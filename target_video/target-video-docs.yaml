resources:
- name: ad_in_progress
  endpoint:
    path: /getAdInProgress
    method: GET
    data_selector: adInProgress
- name: is_full_screen
  endpoint:
    path: /isFullScreen
    method: GET
    data_selector: isFullScreen
- name: is_player_in_view
  endpoint:
    path: /isPlayerInView
    method: GET
    data_selector: isPlayerInView
- name: AdSources
  endpoint:
    path: /ad_source/all/{partner_id}.json
    method: GET
- name: ad_source
  endpoint:
    path: /ad_source/all/{partner_id}.json
    method: GET
- name: videos
  endpoint:
    path: /videos/add.json
    method: POST
    data_selector: data
    params: {}
- name: video
  endpoint:
    path: /videos/add.json
    method: POST
- name: upload_video
  endpoint:
    path: /video/add.json
    method: POST
    data_selector: video
    params: {}
- name: upload_video
  endpoint:
    path: /video/add.json
    method: POST
    data_selector: response
    params:
      partner_id: integer
      channel_id: integer
      name: string
      mp4: string
      publish: string
      description: string
      tags: string
      encode: int
      image: string
      copy_snapshot: integer
      kill_date: string
      geo_on: integer
      geo: string
- name: video_add
  endpoint:
    path: /apiv3/video/add.json
    method: POST
    data_selector: response
    params: {}
- name: video_add
  endpoint:
    path: /apiv3/video/add.json
    method: POST
    data_selector: response
    params: {}
- name: create_website
  endpoint:
    path: /apiv3/partner/add.json
    method: POST
    data_selector: response
    params: {}
- name: video
  endpoint:
    path: /apiv3/video/view/{{VIDEO_ID}}.json
    method: GET
- name: create_website
  endpoint:
    path: /apiv3/partner/add.json
    method: POST
    data_selector: ''
    params: {}
- name: video
  endpoint:
    path: /apiv3/video/view/{{VIDEO_ID}}.json
    method: GET
- name: edit_video
  endpoint:
    path: /apiv3/video/edit/{{VIDEO_ID}}.json
    method: POST
    data_selector: response
    params: {}
- name: video_edit
  endpoint:
    path: /apiv3/videos/edit.json
    method: POST
    data_selector: ''
    params: {}
- name: edit_video
  endpoint:
    path: /apiv3/video/edit/{{VIDEO_ID}}.json
    method: POST
    data_selector: response
    params: {}
- name: edit_video
  endpoint:
    path: /apiv2/videos/edit.json
    method: POST
    data_selector: response
    params: {}
- name: videos_edit
  endpoint:
    path: /apiv3/videos/edit.json
    method: POST
    data_selector: response
    params: {}
- name: delete_video
  endpoint:
    path: //apiv2/videos/delete.json
    method: POST
    params:
      ids: integer
      partner_id: integer
- name: edit_video
  endpoint:
    path: /apiv2/videos/edit.json
    method: POST
    data_selector: response
    params: {}
- name: webhooks
  endpoint:
    path: /webhooks
    method: POST
- name: livestream
  endpoint:
    path: /livestream/setup
    method: POST
- name: delete_video
  endpoint:
    path: /apiv2/videos/delete.json
    method: POST
    data_selector: ''
    params:
      ids: integer
      partner_id: integer
- name: webhooks
  endpoint:
    path: /webhooks
    method: POST
    data_selector: response
    params: {}
- name: livestream
  endpoint:
    path: /livestream/setup
    method: POST
- name: forceHLS
  endpoint:
    path: /forceHLS
    method: POST
    data_selector: forceHLS
    params: {}
- name: consent
  endpoint:
    path: /consent
    method: POST
    data_selector: consent
    params: {}
- name: ignoreHeaderHeight
  endpoint:
    path: /ignoreHeaderHeight
    method: POST
    data_selector: ignoreHeaderHeight
    params: {}
- name: consent_wait_time
  endpoint:
    path: /consent_wait_time
    method: POST
    data_selector: consent_wait_time
    params: {}
- name: sticky_title_above_text
  endpoint:
    path: /sticky_title_above_text
    method: POST
    data_selector: sticky_title_above_text
    params: {}
- name: same_page_clickthroughs
  endpoint:
    path: /same_page_clickthroughs
    method: POST
    data_selector: same_page_clickthroughs
    params: {}
- name: force_load_hls_plugin
  endpoint:
    path: /force_load_hls_plugin
    method: POST
    data_selector: forceHLS
    params: {}
- name: send_consent_string
  endpoint:
    path: /send_consent_string
    method: POST
    data_selector: exposesTcfApi
    params: {}
- name: ignore_header_height_autoplay
  endpoint:
    path: /ignore_header_height_autoplay
    method: POST
    data_selector: ignoreHeaderHeight
    params: {}
- name: custom_wait_for_tcf_api_timeout
  endpoint:
    path: /custom_wait_for_tcf_api_timeout
    method: POST
    data_selector: consent_wait_time
    params: {}
- name: custom_title_sticky_mode
  endpoint:
    path: /custom_title_sticky_mode
    method: POST
    data_selector: sticky_title_above_text
    params: {}
- name: same_page_clickthroughs
  endpoint:
    path: /same_page_clickthroughs
    method: POST
    data_selector: same_page_clickthroughs
    params: {}
- name: playlist
  endpoint:
    path: /playlists
    method: GET
    data_selector: Video
    params: {}
- name: event_listener
  endpoint:
    path: /docs/event-listeners
    method: GET
    data_selector: records
    params: {}
- name: playlists
  endpoint:
    path: /api/playlists
    method: GET
    data_selector: playlists
- name: prebid_integration
  endpoint:
    path: /docs/player-page-prebid-implementation
    method: GET
    data_selector: integration_example
    params: {}
- name: prebid_integration
  endpoint:
    path: /docs/prebid-integration
    method: GET
    data_selector: content
- name: player
  endpoint:
    path: /player/build/brid.min.js
    method: GET
- name: localization
  endpoint:
    path: /localization
    method: POST
    data_selector: localizationData
    params: {}
- name: player_settings
  endpoint:
    path: /docs/full-player-bidding
    method: GET
    data_selector: settings
    params: {}
- name: custom_skin_css
  endpoint:
    path: /{PATH_TO_YOUR_SKIN}/newskin.css
    method: GET
- name: localization
  endpoint:
    path: /localization
    method: POST
    data_selector: localizationData
- name: playlist_widget
  endpoint:
    path: /api/playlist_widget
    method: GET
    data_selector: widget_data
    params: {}
- name: playlist_widget
  endpoint:
    path: /playlist/widget
    method: POST
    data_selector: widgetConfig
- name: playlist_widget
  endpoint:
    path: /api/playlist/widget
    method: GET
    data_selector: widgetData
- name: playlist_widget
  endpoint:
    path: /services/playlist/widget
    method: GET
    data_selector: widgets
    params: {}
- name: single_video
  endpoint:
    path: /player/build
    method: GET
    data_selector: example
    params: {}
- name: playlist
  endpoint:
    path: /player/build
    method: GET
    data_selector: example
    params: {}
- name: latest_videos_playlist
  endpoint:
    path: /player/build
    method: GET
    data_selector: example
    params: {}
- name: latest_videos_by_tag_playlist
  endpoint:
    path: /player/build
    method: GET
    data_selector: example
    params: {}
- name: latest_videos_by_channel
  endpoint:
    path: /player/build
    method: GET
    data_selector: example
    params: {}
- name: custom_external_video_url
  endpoint:
    path: /player/build
    method: GET
    data_selector: example
    params: {}
- name: custom_sticky_position
  endpoint:
    path: /player/build
    method: GET
    data_selector: example
    params: {}
- name: playback_behavior
  endpoint:
    path: /player/build
    method: GET
    data_selector: example
    params: {}
- name: turn_off_default_localization
  endpoint:
    path: /player/build
    method: GET
    data_selector: example
    params: {}
- name: custom_logo_size
  endpoint:
    path: /player/build
    method: GET
    data_selector: example
    params: {}
- name: custom_snapshot_image
  endpoint:
    path: /player/build
    method: GET
    data_selector: example
    params: {}
- name: outstream_units
  endpoint:
    path: /outstream-units
    method: GET
    data_selector: units
- name: single_video
  endpoint:
    path: /player/build/single_video
    method: GET
    data_selector: video
    params: {}
- name: playlist
  endpoint:
    path: /player/build/playlist
    method: GET
    data_selector: playlist
    params: {}
- name: latest_videos_playlist
  endpoint:
    path: /player/build/latest_videos
    method: GET
    data_selector: latest_videos
    params: {}
- name: latest_videos_by_tag_playlist
  endpoint:
    path: /player/build/latest_videos_by_tag
    method: GET
    data_selector: latest_videos_by_tag
    params: {}
- name: latest_videos_by_channel
  endpoint:
    path: /player/build/latest_videos_by_channel
    method: GET
    data_selector: latest_videos_by_channel
    params: {}
- name: custom_external_video
  endpoint:
    path: /player/build/custom_external_video
    method: GET
    data_selector: custom_video
    params: {}
- name: custom_sticky_position
  endpoint:
    path: /player/build/custom_sticky_position
    method: GET
    data_selector: sticky_position
    params: {}
- name: playback_behavior
  endpoint:
    path: /player/build/playback_behavior
    method: GET
    data_selector: playback_behavior
    params: {}
- name: turn_off_localization
  endpoint:
    path: /player/build/turn_off_localization
    method: GET
    data_selector: localization
    params: {}
- name: custom_logo_size
  endpoint:
    path: /player/build/custom_logo_size
    method: GET
    data_selector: logo_size
    params: {}
- name: custom_snapshot_image
  endpoint:
    path: /player/build/custom_snapshot_image
    method: GET
    data_selector: snapshot_image
    params: {}
- name: execute_custom_javascript_code
  endpoint:
    path: /execute/custom/javascript/code/on/ad/ended
    method: POST
    data_selector: result
    params: {}
- name: sticky_unit_offset
  endpoint:
    path: /set-offset-for-sticky-outstream-unit
    method: POST
    data_selector: parameters
    params: {}
- name: player_page_prebid_implementation
  endpoint:
    path: /docs/player-page-prebid-implementation
    method: GET
- name: full_player_bidding
  endpoint:
    path: /docs/full-player-bidding
    method: GET
- name: complete_external_config_implementation
  endpoint:
    path: /docs/complete-external-config-implementation
    method: GET
- name: adding_prebid_for_banner_fallback
  endpoint:
    path: /docs/adding-prebid-for-banner-fallback
    method: GET
- name: player_page_prebid_implementation
  endpoint:
    path: /docs/player-page-prebid-implementation
    method: GET
- name: full_player_bidding
  endpoint:
    path: /docs/full-player-bidding
    method: GET
- name: complete_external_config_implementation
  endpoint:
    path: /docs/complete-external-config-implementation
    method: GET
- name: adding_prebid_for_banner_fallback
  endpoint:
    path: /docs/adding-prebid-for-banner-fallback
    method: GET
- name: outstream_unit
  endpoint:
    path: /player/build/brid.outstream.min.js
    method: GET
    data_selector: data
    params: {}
- name: MRSS Feed
  endpoint:
    path: /v2/playlists/{PLAYLIST_ID}?format=mrss
    method: GET
    data_selector: videos
    params: {}
- name: MRSS Feed
  endpoint:
    path: /v2/playlists/{PLAYLIST_ID}
    method: GET
    data_selector: videos
    params:
      format: mrss
- name: MRSS Feed
  endpoint:
    path: /import/mrss
    method: POST
    data_selector: feed
    params: {}
- name: Import MRSS
  endpoint:
    path: /import/mrss
    method: POST
    data_selector: feed
    params: {}
- name: react_brid_player
  endpoint:
    path: /react/brid-player
    method: GET
- name: react_brid_outstream
  endpoint:
    path: /react/brid-outstream-player
    method: GET
- name: react_brid_playlist_widget
  endpoint:
    path: /react/brid-widget
    method: GET
- name: event_listener
  endpoint:
    path: /docs/event-listeners
    method: GET
    data_selector: events
    params: {}
- name: BridPoster
  endpoint:
    path: /bridposter
    method: GET
    data_selector: events
    params: {}
- name: player_with_single_video
  endpoint:
    path: /player/single_video
    method: POST
    data_selector: player
    params: {}
- name: player_with_playlist
  endpoint:
    path: /player/playlist
    method: POST
    data_selector: player
    params: {}
- name: player_with_playlist_by_channel
  endpoint:
    path: /player/playlist/channel
    method: POST
    data_selector: player
    params: {}
- name: player_with_latest_videos_playlist
  endpoint:
    path: /player/latest_videos_playlist
    method: POST
    data_selector: player
    params: {}
- name: player_with_video_by_tag
  endpoint:
    path: /player/video_by_tag
    method: POST
    data_selector: player
    params: {}
- name: player_with_custom_single_video
  endpoint:
    path: /player/custom_single_video
    method: POST
    data_selector: player
    params: {}
- name: player_with_custom_playlist
  endpoint:
    path: /player/custom_playlist
    method: POST
    data_selector: player
    params: {}
- name: video
  endpoint:
    path: /api/v1/videos
    method: GET
    data_selector: records
- name: playAdTagUrl
  endpoint:
    path: /playAdTagUrl
    method: POST
    data_selector: ad
    params: {}
- name: playAd
  endpoint:
    path: /playAd
    method: POST
    data_selector: ad
    params: {}
- name: setAd
  endpoint:
    path: /setAd
    method: POST
    data_selector: ad
    params: {}
- name: setAdMacros
  endpoint:
    path: /setAdMacros
    method: POST
    data_selector: macros
    params: {}
- name: useVPAID
  endpoint:
    path: /useVPAID
    method: POST
    data_selector: vpaid
    params: {}
- name: playAdTagUrl
  endpoint:
    path: /playAdTagUrl
    method: POST
    data_selector: response
    params: {}
- name: playAd
  endpoint:
    path: /playAd
    method: POST
    data_selector: response
    params: {}
- name: setAd
  endpoint:
    path: /setAd
    method: POST
    data_selector: response
    params: {}
- name: setAdMacros
  endpoint:
    path: /setAdMacros
    method: POST
    data_selector: response
    params: {}
- name: useVPAIDSupport
  endpoint:
    path: /useVPAIDSupport
    method: POST
    data_selector: response
    params: {}
- name: player_events
  endpoint:
    path: /player/events
    method: GET
    data_selector: events
- name: ad_events
  endpoint:
    path: /ad/events
    method: GET
    data_selector: events
- name: player
  endpoint:
    path: /docs/ios-sdk-api-reference
    method: GET
    data_selector: methods
    params: {}
- name: player_events
  endpoint:
    path: /player/events
    method: GET
    data_selector: events
    params: {}
- name: supported_languages
  endpoint:
    path: /localization/supported_languages
    method: GET
    data_selector: languages
    params: {}
- name: supported_languages
  endpoint:
    path: /localization/languages
    method: GET
    data_selector: languages
- name: player
  endpoint:
    path: /add-player-to-your-view
    method: POST
    data_selector: records
    params: {}
- name: player_with_single_video
  endpoint:
    path: /api/player/single
    method: POST
    data_selector: player
- name: player_with_playlist
  endpoint:
    path: /api/player/playlist
    method: POST
    data_selector: player
- name: player_with_playlist_by_channel
  endpoint:
    path: /api/player/channel
    method: POST
    data_selector: player
- name: player_with_latest_videos_playlist
  endpoint:
    path: /api/player/latest
    method: POST
    data_selector: player
- name: player_with_video_by_tag
  endpoint:
    path: /api/player/tag
    method: POST
    data_selector: player
- name: player_with_single_video
  endpoint:
    path: /api/player/single
    method: POST
    data_selector: player
    params: {}
- name: player_with_playlist
  endpoint:
    path: /api/player/playlist
    method: POST
    data_selector: player
    params: {}
- name: player_with_playlist_by_channel
  endpoint:
    path: /api/player/playlist/channel
    method: POST
    data_selector: player
    params: {}
- name: player_with_latest_videos_playlist
  endpoint:
    path: /api/player/latest_videos
    method: POST
    data_selector: player
    params: {}
- name: player_with_video_by_tag
  endpoint:
    path: /api/player/tag
    method: POST
    data_selector: player
    params: {}
- name: player_events
  endpoint:
    path: /player/events
    method: GET
    data_selector: notifications
    params: {}
- name: advertising_events
  endpoint:
    path: /advertising/events
    method: GET
    data_selector: notifications
    params: {}
- name: video
  endpoint:
    path: /services/data/vXX.X/sobjects/Video
    method: GET
    data_selector: records
    params: {}
- name: TargetVideoPlayerView
  endpoint:
    path: /targetvideo/player/view
    method: GET
    data_selector: view
    params: {}
- name: TargetVideoPlayer
  endpoint:
    path: /targetvideo/player
    method: GET
    data_selector: player
    params: {}
- name: rewarded_ad
  endpoint:
    path: /load_ad
    method: GET
    data_selector: ad_data
- name: rewarded_ad
  endpoint:
    path: /api/rewarded_ad
    method: POST
    data_selector: ad_data
    params: {}
- name: TargetVideoPlayerView
  endpoint:
    path: /docs/targetvideoplayerview
    method: GET
    data_selector: records
- name: TargetVideoPlayer
  endpoint:
    path: /docs/targetvideoplayer
    method: GET
    data_selector: records
- name: player_methods
  endpoint:
    path: /api/player/methods
    method: GET
    data_selector: methods
- name: rewarded_ad
  endpoint:
    path: /load_rewarded_ad
    method: POST
    data_selector: ad_data
    params: {}
notes:
- The following advertising events ('adStarted', 'adError' and 'adImpression') have
  additional data associated with them with which you can get the response of the
  XML template itself.
- Accessing GoogleAnalytics object is available only when wrapped in ready callback.
- All you need to get started is a free Targetvideo account.
- Your Bearer token must be present in each API call to perform authorization.
- Dear Publisher, Starting March 1st, 2024, we will deprecate API v2. To ensure continued
  service, please migrate to API v3 before the deprecation date.
- The default upload file size limit is 5GB. If you need to upload larger files contact
  support@targetvideo.tv for an increase.
- The default upload file size limit is 5GB.
- It is highly advised that only your trusted users have access to this widget as
  your API key will be exposed in the web page source.
- Default upload size limit is 5GB. If you need to upload larger files contact us
  at support@targetvideo.tv
- Requires partner_id and channel_id for uploading videos.
- Always make sure to provide your API credentials in each request so it can be processed
  properly.
- If authentication headers are missing, request will be discarded as a non valid
  and an exception will be thrown.
- Domain name is required for creating a website.
- Optional parameters for editing video include name, tags, clickthroughURL, channel_id,
  age_gate_id, publish, kill_date, rejected, image, monetize, geo_on, and geo.
- Requires multipart/form-data for requests
- Optional parameters include name, tags, clickthroughURL, channel_id, age_gate_id,
  publish, kill_date, rejected, image, monetize, geo_on, geo.
- For comScore tracking, optional parameters include ns_st_sn, ns_st_en, ns_st_ge,
  ns_st_ddt, ns_st_tdt, ns_st_st, ns_st_pu, ns_st_ce, ns_user_gen.
- For custom targeting from DFP/GAM, CustomParam[key][] is optional and CustomParam[value][]
  is required if key is provided.
- Chapters for the video can be included with Chapter[timestamp][] and Chapter[title][]
  as optional parameters.
- Uses multipart/form-data for POST requests
- Webhooks feature is available only within premium plans.
- Always make sure to first include a reference to the Targetvideo JS file. This file
  needs to be loaded before the embed code so the player can work properly.
- Requires amp-video-docking extension for sticky player.
- Some important information that you may need to get started with API usage
- Examples of different custom implementations
- When using async embed code, make sure to load the Targetvideo JS script after the
  embed code as this is required to enable proper player work.
- If you need for any reason, to prevent this and to force the players configuration
  file to load directly from our CDN every time instead from the users HTML5 local
  storage.
- Use the following snippet below to enable the players debug information in your
  browsers console.
- If your player is setup to autoplay only when 50% in view and you want to ignore
  the header height when calculating this percentage, make sure to add the below param
- Time should be specified in milliseconds
- All custom code that you plan to integrate with our player should be done after
  the ready callback is fired.
- The default value for items in a playlist is 20, can be increased up to 100.
- The player shows a black screen and a small loading ad pre-loader when trying to
  fetch an ad from an ad server.
- The player has a handy feature with which you can easily enable 'theater mode' which
  will expand the player and show a better viewer experience.
- Uses OAuth2 with refresh token — requires setup of connected app in TargetVideo
- Some objects may return nulls in deeply nested fields
- The player has a handy feature with which you can easily enable 'theater mode'.
- The player will automatically read these configuration parameters from your page
  and use them when it starts the bidding process.
- If you have any Prebid extension installed inside your browser, this implementation
  may not work due to potential conflicts.
- Different kinds of prebid integrations are available within the Targetvideo player.
- Uses prebid with customization on the player level — requires setup of ad units
  in CMS
- Use this implementation if you want to do minimal coding and let the player handle
  all your bidding functionality.
- Uses Prebid Video with Targetvideo player.
- You can localize all text inside your Targetvideo player by setting up a localization
  object in the configuration parameters in the player's embed code.
- 'Every Targetvideo player skin is defined using two main files: a CSS file which
  contains all styling and an SVG JSON object which contains all necessary icons the
  player uses.'
- Make sure to substitute {SKIN_NAME} wherever needed in your custom CSS with the
  appropriate name.
- Additional playlist widget config parameters available.
- Additional parameters can be used to enhance the functionality of the player.
- Uses OAuth2 with refresh token — requires setup of connected app in api
- Default ad timeout is set to 15 seconds.
- Default timeout for prebid is 2000ms.
- Default timeout for Amazon prebid is 3000ms.
- Run custom JavaScript code on outstream ad ended event
- Default prebid timeout setting is 2000ms.
- Default Amazon prebid setting is 3 seconds.
- Add an offset to the player or outstream unit when it's stickied to a corner.
- Percentage values are accepted for offset parameters.
- Display only one ad unit if multiple Outstream ad units are located on a single
  page.
- Add an offset to the player or outstream unit when it's stickied to a corner of
  your choice
- You may wish for the player to sticky to the bottom of your site but above some
  HTML elements.
- You can override the outstream unit size which is sent to prebid by setting the
  JavaScript variable on your page
- By default the player caches bid responses for better performance but you can override
  this setting
- You can override the outstream unit size which is sent to prebid by setting the
  following JavaScript variable on your page
- By default the player caches bid responses for better performance but you can override
  this setting by adding the following code to your web page
- The unit will automatically read these configuration parameters from your page and
  use them when it starts the bidding process.
- Add your own placement id here
- Using a cloud-hosted player.
- Dynamically insert a preroll ad into the outstream unit.
- You can find your PLAYLIST_ID on the playlist details page in your JW dashboard
  OR in the JW Platform Management API in /channels.
- If your feeds are dynamic in nature, you may want to check the automatic sync option
  and set an interval for it.
- Use the tool found at https://github.com/BrightcoveLearning/18026-cms-api-sample-mrss-feed-playlist
  to create MRSS video feeds.
- Currently, the plugin provides a new media type 'Brid.TV Video' (requires the Media
  system to be installed)
- A new paragraph type 'Brid.TV Embedded Video' (Paragraphs module required)
- 'Optional synchronization of the videos with the provider for developers: multiple
  services for using video data from Brid.TV.'
- Some objects like Contact may return nulls in deeply nested fields
- In order to use our SDK, you must have a registered account with one of our usage
  plans.
- Support for media session for flutter plugin.
- Closed Captions (CC) support for Android TV
- Targetvideo has to offer a Drupal plugin which you can use to integrate some of
  Targetvideo functionality into your solution.
- Keep in mind that this plugin is developed and maintained by a third party so for
  any issues regarding this plugin please contact the maintainers.
- Internet connectivity during playback
- To create a BridPlayer object, you need to create a new BridPlayerBuilder object
  and pass it the context of your activity and the FrameLayout where the player will
  be displayed.
- If you use VPAID support, the performance of the player may be slightly lower.
- Supported languages include en, es, de, fr, it, ru, pt, sr, me, hr, bs, sl.
- The recommended size for drawable elements is 24dp.
- 'Add the following directives to the application tag: <uses-permission android:name="android.permission.ACCESS_NETWORK_STATE"
  /> <uses-permission android:name="android.permission.ACCESS_WIFI_STATE"/><uses-permission
  android:name="android.permission.INTERNET" />'
- In all <activity> elements that will contain a player, add android:configChanges="orientation|screenSize".
  This prevents the Activity from being destroyed when rotated.
- The playerID, videoID, and playlistID are generated from our platform, and in order
  to use them, you must have an active subscription to one of our plans.
- It is important to note that if you use VPAID support, the performance of the player
  may be slightly lower.
- List of all available player events and errors are provided.
- 'Supported Languages List includes: en (English), es (Spanish), de (German), fr
  (French), it (Italian), ru (Russian), pt (Portuguese), sr (Serbian), me (Montenegrin),
  hr (Croatian), bs (Bosnian), sl (Slovenian)'
- Picture-in-Picture mode will only work on devices with Android N or higher
- It is currently not supported for Android TV
- Thumbnail Seek will only work on devices with Android N or higher
- SDK aims at easily playing videos with or without ads in your iOS application.
- Uses Brid Player SDK for event listeners
- This SDK depends on GoogleAds-IMA-iOS-SDK, so it will be setup through pods.
- Add 'App Transport Security Settings' and set 'Allow Arbitrary Loads' to YES in
  Info.plist.
- Requires setup of player ID and video ID in the Brid CMS
- Add a new key named Fonts provided by application.
- Set the type to Array.
- Add an item with the name of your font file as a String (e.g., UbuntuSans-Italic-VariableFont.ttf).
- Ensure that the font is correctly named and the file is included in your project’s
  build phase under 'Copy Bundle Resources'.
- You must first initialise your player, and then call methods.
- Allows high level of customization options for the player's appearance.
- Add an item with the name of your font file as a String.
- Available from version 1.2.5 Brid SDK
- iOS 15+ required
- Player events and ad events can be listened through the Notification Centre.
- Supported languages for the player include English, Spanish, German, French, Italian,
  Russian, Portuguese, Serbian, Montenegrin, Croatian, Bosnian, Slovenian.
- Available from version 1.2.5 Brid SDK.
- To activate the Picture-in-Picture feature, select the corresponding option on the
  CMS portal.
- By default, the Thumbnail Image Seek feature is not enabled.
- To activate this feature, it is necessary to configure the Brid Player builder accordingly.
- CocoaPods requires libraries to support all target platform architectures, including
  x86_64 and i386 simulators.
- Brid Player cannot vouch for the functionality of software created and maintained
  by third parties. We strongly advise testing its functionality on a test app first.
- By default, the Thumbnail Image Seek feature is not enabled. To activate this feature,
  it is necessary to configure the Brid Player builder accordingly.
- API call updated for new version of cms
- CocoaPods requires libraries to support all target platform architectures, including
  x86_64 and i386 simulators. This is convenient for testing. However, Apple requires
  x86_64 and i386 targets to be removed prior to submitting your app to the App Store.
- SDK depends on GoogleAds-IMA-tvOS-SDK.
- Init requires a UIViewController and a UIView.
- This SDK depends on GoogleAds-IMA-tvOS-SDK.
- SDK has a Notification.Name extension that contains all the possible events user
  can observe.
- TargetVideo Player cannot vouch for the functionality of software created and maintained
  by third parties. We strongly advise testing its functionality on a test app first.
- You can listen to player events through the Notification Centre.
- Uses OAuth2 with refresh token — requires setup of connected app in BridTV
- A concise overview of the TargetVideo Flutter Plugin, its purpose, and the problems
  it solves by bridging Flutter with native video SDKs.
- The TargetVideo Flutter Plugin provides a unified interface to embed a native video
  player (iOS/Android) within your Flutter applications.
- Step-by-step guidance on initializing a TargetVideoPlayer instance and embedding
  the TargetVideoPlayerView in your widget tree.
- It is necessary to add NSUserTrackingUsageDescription to your app info.plist file.
- Add pod 'Protobuf' to your Podfile and add it to Frameworks, Libraries, and Embedded
  Content with do not embed option under your app's Xcode options.
- Optional width/height for the view container defaults to 320×180.
- All parameters except playerReference are optional and nullable.
- Android has scrolling enabled during ads by default.
- 'Android minSdkVersion: 24'
- 'AppLovin SDK: 12.4.0 or newer'
- Google IMA SDK
- AndroidX Media3 ExoPlayer
- The adapter requires internet access and the INTERNET permission.
- Reward events are delivered only after the video has completed, as per IMA and AppLovin
  reward rules.
- Size defaults to 320×180 for the view container.
- Uses Google IMA and ExoPlayer to deliver high-quality fullscreen video playback.
- TargetVideo’s rewarded ads use Google IMA and AVPlayer to deliver high-quality fullscreen
  video playback.
- Player controls are not shown — the video runs in fullscreen without UI (autoplay
  experience).
errors:
- Default upload size limit is 5GB.
- 'REQUEST_LIMIT_EXCEEDED: Throttle API calls or reduce frequency'
- '401 Unauthorized: Recheck OAuth scopes or token expiration'
- 'QUERY_TIMEOUT: Break down filters or add selectivity'
- 'EVENT_VIDEO_NETWORK_ERROR: Network related error occurred'
- 'EVENT_VIDEO_LOAD_NETWORK_ERROR: Error loading video'
- 'EVENT_VIDEO_FORMAT_ERROR: Video format not supported'
- 'adError: Error occurred during ad playback.'
- 'playerVideoBadUrl: Invalid video from BridTv CMS/Invalid video URL.'
- 'playernsupportedFormat: Video player error. Probably unsupported video format.'
- 'playerProtectedContent: Cannot play protected content.'
- 'playerLostIntenetConnection: Lost internet connection.'
- 'playerLivestreamError: An error occurred during live stream playback.'
- '404 Not Found: Check the endpoint path.'
- '500 Internal Server Error: Server issues.'
- 'For integration support or to report issues: mobile.dev@target-video.com'
auth_info:
  mentioned_objects:
  - BVPlayer
  - BVData
  - Source
  - VideoData
  - OauthToken
  - AuthProvider
  - NamedCredential
client:
  base_url: https://brid.readme.io
  headers:
    Accept: application/json
source_metadata: null
