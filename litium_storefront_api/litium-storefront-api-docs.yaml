resources:
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: bug_details
  endpoint:
    path: /resources/bugs/bug_details
    method: GET
    data_selector: bugs
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
- name: orders
  endpoint:
    path: /orders
    method: GET
- name: Sales
  endpoint:
    path: /resources/bugs/bug_details?id=69624
    method: GET
- name: Products
  endpoint:
    path: /resources/bugs/bug_details?id=70109
    method: GET
- name: Storefront API
  endpoint:
    path: /resources/bugs/bug_details?id=70172
    method: GET
- name: Sales
  endpoint:
    path: /resources/bugs/bug_details
    method: GET
- name: Storefront API
  endpoint:
    path: /resources/bugs/bug_details
    method: GET
- name: Customers
  endpoint:
    path: /resources/bugs/bug_details
    method: GET
- name: Dashboard
  endpoint:
    path: /resources/bugs/bug_details
    method: GET
- name: Products
  endpoint:
    path: /resources/bugs/bug_details
    method: GET
- name: Websites
  endpoint:
    path: /resources/bugs/bug_details
    method: GET
- name: orders
  endpoint:
    path: /api/v1/orders
    method: GET
    data_selector: data
    params: {}
- name: staffed_prices
  endpoint:
    path: /staffed/prices
    method: POST
    data_selector: data
    params: {}
- name: shipment_error
  endpoint:
    path: /shipment/error
    method: POST
    data_selector: error
    params: {}
- name: dashboard_permission
  endpoint:
    path: /dashboard/permission
    method: GET
    data_selector: permissions
    params: {}
- name: page_types
  endpoint:
    path: /accelerators/react-accelerator/working-with-page-types
    method: GET
- name: products_block
  endpoint:
    path: /accelerators/react-accelerator/working-with-blocks/products-block
    method: GET
- name: article_page
  endpoint:
    path: /accelerators/react-accelerator/working-with-page-types/article-page
    method: GET
- name: category_page
  endpoint:
    path: /accelerators/react-accelerator/working-with-page-types/category-page
    method: GET
- name: product_list_page
  endpoint:
    path: /accelerators/react-accelerator/working-with-page-types/product-list-page
    method: GET
- name: product_page
  endpoint:
    path: /accelerators/react-accelerator/working-with-page-types/product-page
    method: GET
- name: search_result_page
  endpoint:
    path: /accelerators/react-accelerator/working-with-page-types/search-result-page
    method: GET
- name: GTM container ID
  endpoint:
    path: /accelerators/react-accelerator/working-with-google-tag-manager
    method: GET
    data_selector: analytics.googleTagManager
- name: TextBlock
  endpoint:
    path: /operations/fragments/blocks/text
    method: POST
    data_selector: fields
- name: TwoColumnsBlock
  endpoint:
    path: /operations/fragments/blocks/twoColumns
    method: POST
    data_selector: children
- name: ContactUsPage
  endpoint:
    path: /contact-us
    method: GET
    data_selector: content.fields.text
- name: bugs
  endpoint:
    path: /resources/bugs
    method: GET
    data_selector: records
- name: bug_details
  endpoint:
    path: /resources/bugs/bug_details
    method: GET
    data_selector: bugs
    params: {}
- name: products
  endpoint:
    path: /api/products
    method: GET
    data_selector: records
- name: orders
  endpoint:
    path: /api/orders
    method: GET
    data_selector: records
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
- name: ThumbnailGenerator
  endpoint:
    path: /ThumbnailGenerator/config
    method: GET
    data_selector: records
- name: Sales
  endpoint:
    path: /Sales/config
    method: GET
    data_selector: records
- name: IdentityServer
  endpoint:
    path: /IdentityServer/config
    method: GET
    data_selector: records
- name: TestController
  endpoint:
    path: /api/test
    method: GET
- name: litium_empty
  endpoint:
    path: /get-started/install-empty-litium
    method: GET
notes:
- The Storefront API does not require authentication and will only return information
  that everyone can access.
- If the authentication that is provided is invalid or has expired the request will
  be treated as anonymous.
- Uses OAuth2 with refresh token â€” requires setup of connected app in api
- Some objects like Contact may return nulls in deeply nested fields
- Ability for administrators to save searches as views for organizations
- Upgrade to Angular 20 Breaking change
- Maintenance of webhook history
- Transition to Standard .NET Logging Configuration
- OpenTelemetry Integration for Unified Observability
- Modified list design
- Cleanup orphaned media storage
- Product bulk editing
- Improved ability for users to manage large volumes in the product list search result
- Improved ability for users to manage large volumes in the price list search result
- Restructured button set for product list
- Ability to add discount codes to existing discount
- Ability to show unit of measurement in order detail view
- Improved discount threshold UI
- Ability to filter orders on article number
- Ability to show tags as column in order list
- Ability to apply discounts from external system
- Ability to mark product price discounts as personalized
- Ability to sort order list by order date
- Ability to recalculate cart when current user or selected organization changes
- Ability to return the customer person and organization on the order object
- Ability to filter the products search for variants and base products
- Ability to enhance the visual appeal of shared page links
- ReadyToShipNotification uses systemid on OrderRowId
- Payment data uses translations and not values Breaking change
- Double shipping costs on Qliro payments
- CartConverterImpl error in TaxDetail conversion Critical
- Filters in Customers module should be entities content dependent
- 'Dashboard reports improvement: use default currency for currency conversion in
  reports'
- The search query returns an empty result when using the value `1-001` for the text
  field
- Cancel and Save buttons remain active after clicking the Cancel button
- Break UI dialog when editing option in Field
- AppHttpClientFactory.CreateClientAsync(ClaimsPrincipal) is not adding aud claims
- 'Product excel import crash if column starts with #'
- Unable to fetch transactions for a gift card via Admin Web API
- Clearing of the cart on confirmation page, removes gift card reservations
- Transaction systemIDs returned instead of transaction data for payments via Admin
  Web API
- Removing gift cards from cart does not trigger AbandonGiftCardTransactionAsync
- Storefront api - Checkout details update does not trigger update to shipping app
- Mutation updateCheckoutDetails doesn't update the returned shipmentHtmlSnippet
- Error 500 when adding a multifield group if the multifield contains empty values.
- Critical issues may impact functionality
- Users with sales/content permission can't access orders with storefront API
- All orders created by unauthorized user are accessible without authorization
- Some objects may return nulls in deeply nested fields
- Critical issues may affect integration or data quality.
- Storefront API is failling when querying Product detail page without IntOption field
- GraphQL - the sorting is ordered in reverse by default.
- Critical issues related to payment and checkout
- Improvements in various APIs
- Storefront CORS policy fallback doesn't work
- Litium.Web.Administration.Application using deprecated Microsoft.AspNetCore.SignalR
  package
- Ability for administrator to see scheduled publishing for pages and global blocks
- Ability for system to hide notifications when user leaves a view
- Ability for administrator to move from variants tab to variant properties
- Ability to prevent information disclosure
- Fixes Sales
- Improvements General
- Order and Payment in init state is migrated into L8 as Authorized and Reserved
- 'Migration: Payment in Pending state is migrated as Reserved'
- For the orders with some campaigns there is wrong data shown on migrated environment
- Manually added discounted price on order row is not migrated to L8
- Order view page on BO throws error if a row has null variants
- JSON stored in order row comments is malformed after upgrade
- Order lines not updated when opening order from sidebar search result suggestion
- Order Row and Transaction Row were the same system id
- Creating or updating cart is failing when primary key already exists or missing
- Migration - BillingAddress Careof over 100 char
- DeliveryMethodID is missing
- Id field of order row table and shipment row table are missing
- Page count is not the same in dashboard and the search result (dashboard includes
  pages from trashcan)
- Cookies are missing the secure keyword
- Possible to view pages the user doesn't have access to
- Ability to manage filter configuration in website entity instead of in the accelerator
- Ability to edit fields faster without clicking the pen icon
- Ability for system to support nested blocks
- Ability for administrator to manage nested blocks in backoffice UI
- Improved tab design
- Ability for administrator to manage blocks in a new tab in edit view
- Cache-control headers are missing from endpoints with dynamic content Critical
- Cache-control headers are missing from endpoints with dynamic content
- Litium support is available for our partners and customers.
- Litium ships with a developer license, the developer license is restricted to be
  used for testing only so a customer license is required for all customer projects.
- The developer license restricts the application to only allow requests from localhost
  before Litium 8.1.
- The developer license will throttle the number of requests allowed per minute for
  Litium 8.1 and later.
- The developer license is restricted to be used for testing only so a customer license
  is required for all customer projects.
- The developer license will throttle the number of requests allowed per minute in
  Litium 8.1 and later.
- Headless accelerator architecture foundation
- Ability for headless accelerator to render metadata for SEO
- Ability to show product page in headless accelerator POC
- Ability to show product filters in headless accelerator category page
- Ability to show a home page with banner block in headless accelerator POC
- Ability to use quick search in headless accelerator
- Ability to use product filters in headless accelerator
- Ability to handle different domain names in headless accelerator
- Ability to add product to cart with an add button
- Ability for visitor to manage a mini cart
- Upgrade to Next.JS 13.2
- Ability to render primary navigation and header
- Ability to manage and render a footer
- Ability for user to quick search in react accelerator
- Ability for user to use a search result page in react accelerator
- Ability for react accelerator to have a category page
- Ability for user to checkout in react accelerator
- Upgrade Next.JS to 13.4
- Ability for category page in React accelerator to show blocks
- Every page should use a secure connection.
- It is advisable to assign the max-age directiveâ€™s value to be greater than 10368000
  seconds (120 days) and ideally to 31536000 (one year).
- An active internet connection is needed to download the installation package.
- A headless, single page storefront application.
- To be able to use the React accelerator, the customer need to be on the Litium Commerce
  Cloud offer.
- Installation based on Litium Mvc Accelerator have conflicting fields, field templates
  and settings and can't be run in the same installation without manual modification
  of templates to contain fields and settings for both the Mvc Accelerator and React
  Accelerator as well that all field template that exist for Mvc Accelerator also
  need to exist in React if the page should work. This setup is not recommended for
  easy maintenance.
- This API is used to manage shopping cart and checkout processes.
- In React Accelerator, only this field is used to configure GTM, while the other
  fields are used on the MVC Accelerator.
- The React Accelerator is designed to be compliant with the WCAG 2.2 Level AA standard.
- To better comply with the EU Accessibility Act the Litium Accelerator supports most
  of the necessary changes to comply with WCAG 2.2 AA.
- The MVC accelerator consists of technical solutions, know-how, and methods that
  can get a project up to speed quickly.
- It is a flexible solution that can be customized and developed in terms of functionality
  and design.
- Nested blocks feature was introduced in Litium 8.9.
- A shopping cart is created if Cart context is not available in Cookies.
- 'The checkout process is divided into three steps: Enter delivery address, Choose
  delivery option, Payment.'
- Compatibility release for Litium
- Fixes and improvements listed for different versions
- Manage your Litium solution with source control, for easy upgrades.
- The importance of using source control
- SMTP settings can be updated in appsettings.json.
- Developer guides and articles for the Litium Accelerator.
- The username should be replaced with your Litium Docs username and password.
- Remember to escape the control characters, i.e. $ if you using powershell, or using
  single quotes (') around the values.
- Litium is an e-commerce platform with an integrated PIM and CMS.
- Uses OAuth2 with refresh token â€” requires setup of connected app in Litium
- Requires the site to have HTTPS for login to work (also required for test environments).
- The tutorial is tested in Windows only, it may work on additional platforms but
  this is currently not tested or supported.
- If something is not working in your setup it may be because of a missed step, please
  double-check the guide again and if you have any questions please ask them in Litium
  forum.
- In Litium 8, Redis should be used as it supports the service bus, distributed caching,
  and distributed concurrency lock.
- Requires setup of connected app in api
- When running Litium in a non-windows environment you cannot use the windows credentials
  to log in.
- To log in you need to access your site over encrypted communication (https).
- When running Litium Apps in containers (docker) the localhost domain will always
  point to the container itself and can't be used in the communication between the
  app and Litium.
- To solve the communication between the app and Litium, we will use a custom domain
  that resolves to the host of the container.
- For Mac From Docker 4.24 and newer versions, there is a known issue which stops
  the DnsResolver from starting.
- The test framework makes it easier to write unit tests for applications based on
  the Litium platform.
- The authentication token for the current user is automatically added to the request.
- All functionality may not work.
- 'For some related bugs, please see the following links: Support macOS, ARM64 Support'
- A empty database must exist before the command can run.
- An empty database must exist before the command can run.
errors:
- 'REQUEST_LIMIT_EXCEEDED: Throttle API calls or reduce frequency'
- 'QUERY_TIMEOUT: Break down filters or add selectivity'
- '401 Unauthorized: Recheck OAuth scopes or token expiration'
- 'Critical: Various issues affecting data operations.'
- Memory leak during indexing Critical
- If a url for a product or category is requested for a channel that doesn't exist,
  the UrlService throws NRE
auth_info:
  mentioned_objects:
  - OauthToken
  - AuthProvider
  - NamedCredential
client:
  base_url: https://docs.litium.com/
  headers:
    Accept: application/json
source_metadata: null
