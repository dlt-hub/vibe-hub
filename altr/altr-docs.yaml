resources:
- name: Auto Tagging API
  endpoint:
    path: /v1/tag/auto-tagging-api-docs/index.html
    method: GET
- name: Access Tokens API
  endpoint:
    path: /v1/access-tokens/docs
    method: GET
- name: Datastore Information Service API (DIS)
  endpoint:
    path: /v1/dis/swagger/
    method: GET
- name: Key Management API
  endpoint:
    path: /v1/docs
    method: GET
- name: Management API (MAPI)
  endpoint:
    path: /api/swagger/
    method: GET
- name: Query Audits API
  endpoint:
    path: /v1/query-audits/api-docs/index.html
    method: GET
- name: Role-Based Access Control (RBAC) API
  endpoint:
    path: /v1/rbac/api-docs/index.html
    method: GET
- name: Service User Service API
  endpoint:
    path: /v1/docs
    method: GET
- name: Sidecar Audit API
  endpoint:
    path: /v1/audits/docs
    method: GET
- name: Sidecar Repo Config API
  endpoint:
    path: /v1/repo-config-docs
    method: GET
- name: Sidecar Telemetry API
  endpoint:
    path: /v1/sidecars/telemetry/docs
    method: GET
- name: Tag-based governance policy on Databricks
  endpoint:
    path: /v1/alpha/dbx/tag-policy/docs/index.html
    method: GET
- name: Tag Masking API
  endpoint:
    path: /v1/tag/masking-api-docs/index.html#
    method: GET
- name: Tag Value Refresh API
  endpoint:
    path: /v1/tag/refresh-api-docs/index.html
    method: GET
- name: Unified Policy API
  endpoint:
    path: /v1/unified-policy/docs
    method: GET
- name: Vaulted Tokenization API
  endpoint:
    path: /api/v2
    method: GET
- name: Snowflake Metadata API
  endpoint:
    path: /v1/snowflake/metadata-api-docs/index.html
    method: GET
- name: Snowflake
  endpoint:
    path: /api/auth/organization_login
    method: POST
- name: Databricks
  endpoint:
    path: /api/auth/organization_login
    method: POST
- name: OLTP
  endpoint:
    path: /api/auth/organization_login
    method: POST
- name: service_user_privilege_requirements
  endpoint:
    path: /service_user_privilege_requirements
    method: GET
    data_selector: privileges
    params: {}
- name: service_user_creation
  endpoint:
    path: /api/create_service_user
    method: POST
    data_selector: result
    params:
      username: ALTR_SERVICE_USER
      type: SERVICE
- name: Database
  endpoint:
    path: /required-snowflake-objects/database
    method: GET
    data_selector: objects
    params:
      created_by: Partner Connect
      object_name: PC_ALTR_DB
- name: Stored Procedure
  endpoint:
    path: /required-snowflake-objects/stored-procedure
    method: GET
    data_selector: objects
    params:
      created_by: Partner Connect
      object_name: SETUP_ALTR_SERVICE_ACCOUNT
- name: User
  endpoint:
    path: /required-snowflake-objects/user
    method: GET
    data_selector: objects
    params:
      created_by: Partner Connect
      object_name: PC_ALTR_USER
- name: Role
  endpoint:
    path: /required-snowflake-objects/role
    method: GET
    data_selector: objects
    params:
      created_by: Partner Connect
      object_name: PC_ALTR_ROLE
- name: Warehouse
  endpoint:
    path: /required-snowflake-objects/warehouse
    method: GET
    data_selector: objects
    params:
      created_by: Partner Connect
      object_name: PC_ALTR_WH
- name: database
  endpoint:
    path: /services/data/vXX.X/sobjects/Database
    method: GET
    data_selector: records
    params: {}
- name: stored_procedure
  endpoint:
    path: /services/data/vXX.X/sobjects/StoredProcedure
    method: GET
    data_selector: records
    params: {}
- name: user
  endpoint:
    path: /services/data/vXX.X/sobjects/User
    method: GET
    data_selector: records
    params: {}
- name: role
  endpoint:
    path: /services/data/vXX.X/sobjects/Role
    method: GET
    data_selector: records
    params: {}
- name: warehouse
  endpoint:
    path: /services/data/vXX.X/sobjects/Warehouse
    method: GET
    data_selector: records
    params: {}
- name: SETUP_ALTR_SERVICE_ACCOUNT
  endpoint:
    path: SETUP_ALTR_SERVICE_ACCOUNT
    method: CALL
    data_selector: report
    params:
      SERVICE_USER: '''<SERVICE_USER>'''
      DATABASE_NAMES: '[''<DATABASE_NAME1>'', ''<DATABASE_NAME2>'', ..., ''<DATABASE_NAMEn>'']'
      SERVICE_ROLE: '''<SERVICE_ROLE>'''
      SERVICE_WAREHOUSE: '''<SERVICE_WAREHOUSE>'''
- name: ALTR_SETUP_SERVICE_ACCOUNT
  endpoint:
    path: SETUP_ALTR_SERVICE_ACCOUNT
    method: CALL
    data_selector: report
- name: network_rule
  endpoint:
    path: /services/data/vXX.X/sobjects/NetworkRule
    method: POST
    data_selector: records
    params: {}
- name: network_policy
  endpoint:
    path: /services/data/vXX.X/sobjects/NetworkPolicy
    method: POST
    data_selector: records
    params: {}
- name: ALTR Service Principal
  endpoint:
    path: /api/auth/organization_login
    method: POST
- name: Workspace Hostname
- name: Service Principal ID
- name: Cluster ID
- name: OAuth Secret
- name: repository
  endpoint:
    path: /api/auth/organization_login
    method: POST
- name: sidecar_authentication
  endpoint:
    path: /api/auth/organization_login
    method: POST
    data_selector: public_keys
    params: {}
- name: repository
  endpoint:
    path: /register/repositories
    method: POST
- name: sidecar_authentication_keys
  endpoint:
    path: /rotate_sidecar_authentication_keys
    method: POST
- name: Connect via the sidecar using impersonation
  endpoint:
    path: /api/auth/organization_login
    method: POST
- name: Connect directly to the sidecar using native database credentials
  endpoint:
    path: /api/auth/native_credentials
    method: POST
- name: S3 Integration
  endpoint:
    path: /api/s3/integration
    method: POST
    data_selector: integration_result
- name: user_session_info
  endpoint:
    path: /path/to/user/session/info
    method: POST
    data_selector: data
    params: {}
- name: S3 Integration
  endpoint:
    path: /amazon-s3-audit-log-export
    method: POST
    data_selector: logs
    params: {}
- name: snowflake
  endpoint:
    path: /services/data/snowflake
    method: POST
    data_selector: data
- name: databricks
  endpoint:
    path: /services/data/databricks
    method: POST
    data_selector: data
- name: Tag-Based Access Policy
  endpoint:
    path: /api/tag-based-access-policy
    method: GET
    data_selector: records
    params: {}
- name: Column-Based Access Policy
  endpoint:
    path: /api/column-based-access-policy
    method: GET
    data_selector: records
    params: {}
- name: Row-Level Access Policy
  endpoint:
    path: /api/row-level-access-policy
    method: GET
    data_selector: records
    params: {}
- name: Access Management Policy
  endpoint:
    path: /api/access-management-policy
    method: GET
    data_selector: records
    params: {}
- name: Impersonation Policy
  endpoint:
    path: /api/impersonation-policy
    method: GET
    data_selector: records
    params: {}
- name: Masking Policies
  endpoint:
    path: /api/masking-policies
    method: GET
    data_selector: records
    params: {}
- name: Alerts
  endpoint:
    path: /api/alerts
    method: GET
    data_selector: records
    params: {}
- name: Custom Data Masking and Masking Extensibility
  endpoint:
    path: /api/custom-data-masking
    method: GET
    data_selector: records
    params: {}
- name: Snowflake
  endpoint:
    path: /data-source/snowflake
    method: GET
    data_selector: records
    params: {}
- name: Databricks
  endpoint:
    path: /data-source/databricks
    method: GET
    data_selector: records
    params: {}
- name: OLTP
  endpoint:
    path: /data-source/oltp
    method: GET
    data_selector: records
    params: {}
- name: Row Policy
  endpoint:
    path: /api/policies/row
    method: POST
    data_selector: policy
    params: {}
- name: Snowflake
  endpoint:
    path: /snowflake
    method: GET
- name: Databricks
  endpoint:
    path: /databricks
    method: GET
- name: OLTP
  endpoint:
    path: /oltp
    method: GET
- name: snowflake
  endpoint:
    path: /snowflake
    method: GET
    data_selector: records
    params: {}
- name: databricks
  endpoint:
    path: /databricks
    method: GET
    data_selector: records
    params: {}
- name: oltp
  endpoint:
    path: /oltp
    method: GET
    data_selector: records
    params: {}
- name: access_management_policy
  endpoint:
    path: /api/access_management_policy
    method: POST
- name: Snowflake
- name: Databricks
- name: OLTP
- name: Impersonation Policy
  endpoint:
    path: /api/impersonation_policy
    method: POST
    data_selector: data
    params: {}
- name: Snowflake
- name: Databricks
- name: OLTP
- name: format_preserving_encryption
  endpoint:
    path: /api/v1/format-preserving-encryption
    method: POST
    data_selector: data
    params: {}
- name: format_preserving_encryption
  endpoint:
    path: /api/format_preserving_encryption
    method: POST
    data_selector: data
    params: {}
- name: Data Usage Analytics
- name: Data Access History Import
- name: Data Usage Analytics
  endpoint:
    path: /data-usage-analytics
    method: GET
- name: Data Access History Import
  endpoint:
    path: /data-access-history-import
    method: GET
- name: encryption_handler
  endpoint:
    path: /api/encryption
    method: POST
    data_selector: results
- name: key_handler
  endpoint:
    path: /api/key
    method: GET
    data_selector: keys
- name: compute_pool
  endpoint:
    path: /api/compute_pool
    method: POST
    data_selector: result
    params: {}
- name: encryption
  endpoint:
    path: /api/encryption
    method: POST
    data_selector: result
    params: {}
- name: decryption
  endpoint:
    path: /api/decryption
    method: POST
    data_selector: result
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
notes:
- Have a Snowflake account of Enterprise level or higher.
- Ensure you have the ACCOUNTADMIN role in Snowflake.
- Create network policies to whitelist ALTR's IP addresses.
- Have at least 1 database in your Snowflake account.
- Create and set up an ALTR account.
- Have admin privileges to third-party integration tools.
- 'Determine which method you will use to classify your data: Snowflake or Google
  DLP.'
- Licenses are issued per Snowflake data user.
- When a Super Administrator creates an API key, all actions performed by that API
  key will be associated with that Super Administrator's account.
- ALTR employs tenant-based authentication, where users must submit their tenant and
  username along with relevant authentication factors (password, etc.).
- 'ALTR supports the following 2FA methods: Authenticator App, SMS.'
- SMS-based 2FA is generally considered insecure relative to other 2FA methods. ALTR
  recommends only using SMS-based 2FA when absolutely necessary.
- 'We''ve added two new display-only fields to provide additional information: Hostname
  on the View Data Source page exposes the hostname entered when the repository was
  registered and Active Connections on the View Sidecar page shows the number of connections
  currently active for an instance.'
- We now support sidecar audit log exports to Amazon S3.
- If your Snowflake account does not have a PC_ALTR_DB database, ALTR's service user
  will not be able to tag Snowflake databases and warehouse.
- PC_ALTR_DB is automatically created if you signed up for ALTR from Snowflake Partner
  Connect.
- Users can now use ALTR's user interface to indicate tokenized data. This can then
  be used to control access to detokenize data via Column Access Policies.
- Single Sign-On (SSO) and System for Cross-Domain Identity Management (SCIM) have
  been moved to ALTR's Enterprise tier.
- The limit for free-tier ALTR accounts has been increased to 3 data source connections,
  from 1.
- Extension functions for Snowflake data masking have been updated to include information
  on the Snowflake Object Tag that dictated access control.
- Custom Role functionality for Snowflake data masking has been updated to include
  Snowflake Object Tag information.
- Enforcing ALTR security policies on columns in views is no longer in beta.
- In order to connect to ALTR, you must have Enterprise or higher level of Snowflake
- ACCOUNTADMIN role, which is needed to sign up for Snowflake Partner Connect and
  to grant access to ALTR. ALTR is not required to run as this role after setup.
- If your service username, role and warehouse are changed from the default objects
  (PC_ALTR_USER, PC_ALTR_ROLE and/or PC_ALTR_WAREHOUSE, or ALTR_SERVICE_USER, ALTR_SERVICE_ROLE
  and ALTR_SERVICE_WAREHOUSE), this stored procedure will not work. Instead, run the
  stored procedure with custom service user objects.
- ALTR's cloud data security platform connects with Snowflake over API, which enables
  an ease of integration and minimization of latency.
- If your Snowflake account does not have a PC_ALTR_DB database, ALTR's service user
  will will not be able to tag Snowflake databases and warehouse.
- Privileges required for ALTR service user to function properly.
- Default user name is ALTR_SERVICE_USER, role is ALTR_SERVICE_ROLE, and warehouse
  is ALTR_SERVICE_WH.
- Do not change the SETUP_ALTR_SERVICE_ACCOUNT stored procedure.
- Run the SETUP_ALTR_SERVICE_ACCOUNT stored procedure after account creation, any
  time a new database is added, or any time a new warehouse is created.
- Although ALTR recommends key-pair authentication, if you wish to use password authentication
  set the TYPE parameter on the user to LEGACY_SERVICE instead of SERVICE.
- Note that Snowflake is taking steps to deprecate LEGACY_SERVICE users throughout
  2025 and 2026 and will ultimately require all ALTR service users to migrate to key-pair
  authentication.
- Although ALTR recommends key-pair authentication, if you wish to use password authentication
  set the TYPE parameter on the user to LEGACY_SERVICE instead of SERVICE. Note that
  Snowflake is taking steps to deprecate LEGACY_SERVICE users throughout 2025 and
  2026 and will ultimately require all ALTR service users to migrate to key-pair authentication.
- ALTR must be able to communicate with Snowflake over the internet in order to apply
  and enforce data security policies.
- If your Snowflake account restricts IP traffic using network policies, you must
  create new network rules whitelisting ALTR's IP addresses before connecting an ALTR
  account.
- The stored procedure grants access to everything in your Snowflake account. Specify
  a list of databases to limit what the role can access.
- If left blank or set to an empty array, DATABASE_NAMES defaults to all databases
  in your Snowflake account.
- This stored procedure is written to execute on all editions of Snowflake, including
  those that do not support masking policies.
- Databricks Premium Tier is required.
- Databricks on AWS is required.
- Unity Catalog is required.
- Databricks on Azure is not supported.
- Databricks on GCP is not supported.
- Serverless Compute is not supported.
- Hive Catalog is not supported.
- Databricks Premium Tier required.
- Databricks on AWS only.
- Unity Catalog is necessary.
- Databricks Premium Tier required
- Databricks on AWS only
- Unity Catalog required
- Repositories must be registered in ALTR so that sidecars can facilitate secure connections
  between data consumers and databases.
- Database credentials are referred to as repository users.
- Databricks on Azure and GCP are not supported.
- Serverless Compute and Hive Catalog features are not supported.
- When connecting your account to ALTR, you will need the Workspace Hostname, Service
  Principal ID, Cluster ID, and OAuth Secret.
- Database credentials for the user are stored in AWS Secrets Manager
- Deployed sidecars must have IAM access to the AWS secrets.
- Access to connect using repository users is controlled by impersonation policies
  in ALTR.
- The Public Key must begin with `-----BEGIN RSA PUBLIC KEY-----` and end with `-----END
  PUBLIC KEY-----`.
- Keys can be rotated to improve security posture and meet compliance requirements.
- The repository name must be unique, use only lowercase letters and contain no spaces.
- The hostname must be in RFC 1123 format, which is a URL without http://.
- Customers must generate a valid RSA key-pair before deploying a sidecar.
- Sidecars must be registered in ALTR’s SaaS control plane so that the sidecar can
  access policy information, provide telemetry and consolidate database activity logs
  in ALTR.
- Listener ports are registered in order to enable connections to the sidecar.
- Public Key must begin with '-----BEGIN RSA PUBLIC KEY-----' and end with '-----END
  PUBLIC KEY-----'.
- Deployed sidecars must be configured to allow connections from data consumers.
- Ensure that relevant listener port(s) are open on ALTR’s sidecar and that firewall
  rules are properly configured to allow connections from data consumers.
- Sidecars must also be able to access relevant databases.
- Ensure that networking and firewall rules for your database(s) are properly configured
  to allow connections from ALTR’s sidecar.
- Impersonation policies enable data consumers to access repositories using single
  sign-on (SSO), without needing to know the underlying database credentials.
- Benefits include simplified user management, secure database accounts, flexible
  access controls, and reduced administrative overhead.
- A single sidecar can be bound to multiple repositories, but each port can only broadcast
  as one version of a database type and version.
- By default, impersonation policies grant IdP users the same access as the repository
  user they impersonate.
- In order to use DBeaver and all of it’s functionality, for each access management
  policy, you must create a separate rule each for READ, DELETE and UPDATED to grant
  access to a specific database object.
- The private key can be mounted ALTR sidecar to “/app” with the name “private.pem”.
  Alternatively, you can specify a different key location as an environment variable.
- Connect via the sidecar using impersonation, where ALTR generates a connection string
  for a user to impersonate a repository login without exposing the native credentials.
- Connect directly to the sidecar using native database credentials, where users can
  directly connect to ALTR’s sidecar using existing database credentials.
- The sidecar software uses AWS services for credential retrieval.
- The sidecar instance generates a random UUID if INSTANCE_ID is not set.
- Generating a new access token invalidates the previous token.
- 'Prerequisite: Repository, sidecar and bindings have been configured in ALTR'
- When connecting directly using native credentials, enter the hostname and port of
  the sidecar, not of the repository.
- ALTR administrators can define impersonation policies at the SSO user or SSO group
  level and specify which repository user(s) can be accessed.
- Once activated, SSO can only be turned off in ALTR by contacting ALTR Support.
- If using a sidecar with impersonation policy, this step is required. It is optional
  if using Snowflake integrations.
- The Unique Identifier field is case sensitive.
- Generating a new access token invalidates the previous token. If your access token
  is in use and you generate a new token, you must use that new token to generate
  a new connection string and re-connect to the repository.
- Microsoft Entra ID was formerly known as Azure Active Directory (AD).
- If you are unable to log into the second window, create a new Administrator account
  in ALTR with a Username that exactly matches (it is case sensitive) your unique
  identifier provider (IdP). For Entra, this is typically your UserPrincipalName.
- Before you begin the S3 integration with ALTR, make sure you have ALTR’s AWS Account
  ID, your S3 bucket name, and the AWS Region where your bucket resides.
- Vaulted Tokenization Audits are only available if your organization has access to
  this feature.
- Tableau executes Initial SQL every time Tableau connects to a database.
- 'To record user and session information, use the SQL statement: set altruser  =
  [TableauServerUser].'
- If using a sidecar with impersonation policy, the bearer token step is required.
- The Unique Identifier field is case sensitive
- Uses OAuth2 with refresh token — requires setup of connected app in api
- 'If your ALTR Username does not exactly match your Entra UserPrincipalName, you
  have two options:

  * Create a new ALTR account using the correct Username.

  * Override the UserPrincipalName in Entra for this integration. When assigning the
  user, copy your Username from ALTR and paste it into the UserPrincipalName field
  in Entra. This override only affects your login for ALTR; it does not change any
  of your other tools.'
- Before force disconnecting a tag, consult ALTR Support.
- Force disconnecting tags could have a negative impact on your source system if you
  do not fully understand your data and this feature.
- To configure S3 integration, you will be switching between ALTR and AWS.
- You need ALTR’s AWS Account ID to create the IAM role.
- The default AWS region for the bucket is us-east-1.
- Our recommendation is to use key-pair authentication method because it is more secure
  than password authentication and Snowflake plans to deprecate password authentication
  for service users.
- ALTR integrates with Tableau to provide user- and session-level visibility into
  queries originating from the Tableau platform.
- Key-pair authentication provides a strong authentication method between ALTR and
  Snowflake compared to password authentication.
- Snowflake is deprecating password authentication in 2025, requiring all users to
  update existing connections to leverage key-pair authentication.
- ALTR must be connected to a data source in order to enforce data access governance
  and advanced data protection on sensitive data.
- ALTR strongly recommends running the stored procedure to update the service user's
  privileges before connecting a new data source.
- Connected Columns are managed on the Data Configuration → Data Management → Columns
  page.
- A column that is connected to ALTR invokes ALTR's cloud-based access control when
  it is queried.
- Uses key-pair authentication method because it is more secure than password authentication
- Snowflake plans to deprecate password authentication for service users
- By default, classification is disabled.
- Classification may take several minutes to run depending on the number of columns
  in the data source.
- When automatically tagging data through ALTR's API, it's possible to tag objects
  more specific than databases and those jobs may affect the same schema objects.
- If you run multiple simultaneous jobs that affect the same columns, you may experience
  inconsistent results.
- If the tag you wish to use does not exist in Snowflake, include the tag in your
  JSON object and turn on the Create Tag toggle.
- Only one automatic tagging job can be run at a time per data source.
- ALTR offers a variety of data discovery tools to assist in data discovery and governance.
- Automatic tagging is also available in ALTR’s API.
- 'Ensure your service user has the correct privileges: APPLY TAG, OWNERSHIP on the
  existing tag if adding new allowed values, USAGE on the database and schema where
  the tag resides, CREATE TAG on the schema where the tag will reside.'
- Tag-based policy masks columns in query results based on tag values assigned to
  the columns.
- Roles with ACCOUNTADMIN privileges can access the PII tag with No Mask applied.
- The most permissive applicable policy determines the masking behavior for each group.
- Choose to apply tag *or* column policy but not both.
- Only columns connected in ALTR display in the dropdown.
- Choose to apply tag or column policy but not both.
- ALTR supports several out-of-the-box masking types for column and tag policies as
  well as the ability to customize masking behavior.
- Hash masking types specifically mean the lower-case–hex-encoded SHA-256 hash of
  the UTF-8–encoded string.
- An alert triggers only after query results are returned and the query audit log
  is generated.
- If you add an alert that blocks users who exceed the rate limit, it may take a few
  minutes to activate the alert after the policy is created.
- Modifying the default masking behavior or role list may result in undefined or inconsistent
  behavior in query results.
- If using the post-hook function, extending the default masking policy may impact
  query performance.
- ALTR does not manage or guarantee the behavior of any customized masking logic.
- Requires setup of connected app in ALTR
- ALTR manages access to the underlying encryption keys, enabling fine-grained control
  over decryption while ensuring that your data never leaves your platform.
- Encryption and decryption always happens within Snowflake.
- To encrypt data in your source system before it enters the ETL pipeline (i.e., shifting
  left), contact ALTR Support for assistance.
- If an encrypted column or tag is connected to ALTR with a deactivated key, you won’t
  be able to decrypt the data.
- Access to ALTR's Vaulted Tokenization API is required to tokenize data.
- To use this API, you must be on an ALTR plan that includes tokenization access.
- Enable FPE for your organization by contacting ALTR Support.
- Detokenizing data can be done from ALTR's Vaulted Tokenization API or through ALTR's
  integration of detokenization with data access policies.
- Ensure you have an ALTR account with access to tokenization.
- Be careful to assign this policy to the role(s) that should be able to access the
  original value.
- Find your ALTR organization ID in ALTR's UI under Settings → Preferences → Organization.
- To use BYOK in tokenization, you must share AWS KMS keys with ALTR.
- Data Usage Analytics is refreshed daily near 3:00AM UTC.
- Information on data accessed during a given day is available in the following day's
  Data Usage Analytics report.
- Data remains on the Data Usage Analytics report for up to 30 days.
- Data Access History Import is currently only available for Snowflake connections.
- Activating this feature will increase the Snowflake Warehouse usage of ALTR's Snowflake
  Service User.
- ALTR introduces a maximum of 60 seconds of buffering.
- If using sidecar integration to access OLTP repositories through impersonation policy,
  ALTR logs key details including data consumers who access the repository.
- ALTR introduces a maximum of 60 seconds of buffering for audit logs.
- If using sidecar integration to access OLTP repositories, ALTR logs key details
  including data consumers.
- The Schema and Function name should be replaced with the schema and function automatically
  created by ALTR in your Snowflake account.
- 'Example: an ALTR Organization ID of 3f5d8e36-562a-4b63-8555-57bffc085496 should
  be modified to 3f5d8e36_562a_4b63_8555_57bffc085496.'
- Contact ALTR Support for the Solution Accelerators Service Level Agreement.
- 'Access with: KEY_ADMIN, APP_ADMIN'
- Application roles are scoped to the application database and must be granted to
  Snowflake account roles to enable functionality.
- Some objects like Contact may return nulls in deeply nested fields
errors:
- 'REQUEST_LIMIT_EXCEEDED: Throttle API calls or reduce frequency'
- 'QUERY_TIMEOUT: Break down filters or add selectivity'
- '401 Unauthorized: Recheck OAuth scopes or token expiration'
- You must call this stored procedure with a user and role that can assume role ACCOUNTADMIN
- '401 Unauthorized: Ensure the ALTR service user has the correct role and permissions.'
- Reach out to support@altr.com for deactivation issues.
- If the changes save without error, you may close the safely close modal in ALTR.
- 'TROLE_LIMIT: Throws an error if the number of available roles to the user is above
  the amount that ALTR will process.'
- 'D: Throws an error if the number of available roles to the user is above the amount
  that ALTR will process.'
- If a non-admin user without proper privileges tries to query, they will see tokens.
- If the expected delivery time exceeds 5 minutes, our Cloud Operation teams are alerted.
auth_info:
  mentioned_objects:
  - Okta
  - KEY_ADMIN
  - APP_ADMIN
  - OauthToken
  - AuthProvider
  - NamedCredential
client:
  base_url: https://altrnet.live.altr.com/api/auth/organization_login
source_metadata: null
