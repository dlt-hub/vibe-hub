resources:
- name: GetFeatures
  endpoint:
    path: /get/api/v2/workspaces/{workspaceName}/feature-services/{featureServiceName}/metadata
    method: GET
- name: GetFeaturesBatch
  endpoint:
    path: /postGetFeaturesBatch
    method: POST
- name: groups
  endpoint:
    path: /get/api/v2/workspaces/{workspaceName}/feature-services/{featureServiceName}/metadata
    method: GET
    data_selector: records
    params: {}
- name: GetFeatures
  endpoint:
    path: /api/v2/workspaces/{workspaceName}/feature-services/{featureServiceName}/metadata
    method: GET
    data_selector: params
    params: {}
- name: GetFeaturesBatch
  endpoint:
    path: /api/v2/workspaces/{workspaceName}/feature-services/{featureServiceName}/metadata
    method: GET
    data_selector: params
    params: {}
- name: groups
  endpoint:
    path: /get/api/v2/workspaces/{workspaceName}/feature-services/{featureServiceName}/metadata
    method: GET
    data_selector: records
    params: {}
- name: users
  endpoint:
    path: get/api/v2/workspaces/{workspaceName}/feature-services/{featureServiceName}/metadata
    method: GET
    data_selector: records
    params: {}
- name: service_account
  endpoint:
    path: /service_accounts/{id}
    method: DELETE
    data_selector: responses
    params: {}
- name: users
  endpoint:
    path: /users
    method: GET
    data_selector: responses
    params: {}
- name: feature_service_metadata
  endpoint:
    path: /workspaces/{workspaceName}/feature-services/{featureServiceName}/metadata
    method: GET
    data_selector: featureServiceType
    params: {}
- name: feature_service_metadata
  endpoint:
    path: get/api/v2/workspaces/{workspaceName}/feature-services/{featureServiceName}/metadata
    method: GET
    data_selector: featureValues
    params: {}
- name: feature_service_metadata
  endpoint:
    path: get/api/v2/workspaces/{workspaceName}/feature-services/{featureServiceName}/metadata
    method: GET
    data_selector: featureServiceType
    params: {}
- name: feature_service_metadata
  endpoint:
    path: get/api/v2/workspaces/{workspaceName}/feature-services/{featureServiceName}/metadata
    method: GET
    data_selector: featureValues
    params: {}
- name: feature_service_metadata
  endpoint:
    path: get/api/v2/workspaces/{workspaceName}/feature-services/{featureServiceName}/metadata
    method: GET
    data_selector: featureServiceType
    params: {}
- name: Ingest Server Groups
  endpoint:
    path: /api/v2/workspaces/{workspaceName}/feature-services/{featureServiceName}/metadata
    method: GET
    data_selector: featureServiceType
    params:
      workspace: string
- name: feature_service_metadata
  endpoint:
    path: workspaces/{workspaceName}/feature-services/{featureServiceName}/metadata
    method: GET
    data_selector: featureServiceType
    params: {}
- name: client_secret
  endpoint:
    path: /api/v2/workspaces/{workspaceName}/feature-services/{featureServiceName}/metadata
    method: GET
    data_selector: featureValues
- name: feature_service_metadata
  endpoint:
    path: /workspaces/{workspaceName}/feature-services/{featureServiceName}/metadata
    method: GET
    data_selector: featureServiceType
    params: {}
- name: GetFeaturesV2
  endpoint:
    path: get/api/v2/workspaces/{workspaceName}/feature-services/{featureServiceName}/metadata
    method: GET
    data_selector: featureValues
- name: complete_login
  endpoint:
    path: /docs/sdk-reference/session/complete_login
    method: GET
- name: get_caller_identity
  endpoint:
    path: /docs/sdk-reference/session/get_caller_identity
    method: GET
- name: login
  endpoint:
    path: /docs/sdk-reference/session/login
    method: GET
- name: logout
  endpoint:
    path: /docs/sdk-reference/session/logout
    method: GET
- name: set_validation_mode
  endpoint:
    path: /docs/sdk-reference/session/set_validation_mode
    method: GET
- name: Workspace
  endpoint:
    path: /docs/sdk-reference/workspaces/Workspace
    method: GET
- name: get_current_workspace
  endpoint:
    path: /docs/sdk-reference/workspaces/get_current_workspace
    method: GET
- name: get_workspace
  endpoint:
    path: /docs/sdk-reference/workspaces/get_workspace
    method: GET
- name: list_workspaces
  endpoint:
    path: /docs/sdk-reference/workspaces/list_workspaces
    method: GET
- name: fraud_detection_feature_service
  endpoint:
    path: /
    method: POST
    data_selector: params
    params: {}
- name: impressions_event_source
  endpoint:
    path: /stream/impressions_event_source
    method: POST
    data_selector: event
    params: {}
- name: user_sign_ups
  endpoint:
    path: /batch/user_sign_ups
    method: POST
    data_selector: signup_event
    params: {}
- name: clicked_events_fv
  endpoint:
    path: /stream/clicked_events_fv
    method: GET
    data_selector: click_event
    params:
      incremental: timestamp
- name: create
  endpoint:
    path: /repository/changes/create
    method: POST
    data_selector: changes
    params: {}
- name: delete
  endpoint:
    path: /repository/changes/delete
    method: POST
    data_selector: changes
    params: {}
- name: update
  endpoint:
    path: /repository/changes/update
    method: POST
    data_selector: changes
    params: {}
- name: recreate
  endpoint:
    path: /repository/changes/recreate
    method: POST
    data_selector: changes
    params: {}
- name: upgrade
  endpoint:
    path: /repository/changes/upgrade
    method: POST
    data_selector: changes
    params: {}
- name: impressions_event_source
  endpoint:
    path: /path/to/impressions_event_source
    method: CREATE
    data_selector: data
- name: user_sign_ups
  endpoint:
    path: /path/to/user_sign_ups
    method: CREATE
    data_selector: data
- name: user
  endpoint:
    path: /path/to/user
    method: CREATE
    data_selector: data
- name: ads_user
  endpoint:
    path: /path/to/ads_user
    method: CREATE
    data_selector: data
- name: clicked_events_fv
  endpoint:
    path: /path/to/clicked_events_fv
    method: CREATE
    data_selector: data
- name: GetFeatures
  endpoint:
    path: /get_features
    method: GET
    data_selector: features
    params: {}
- name: transaction_metrics
  endpoint:
    path: /transaction_metrics
    method: GET
- name: transaction_metrics_add
  endpoint:
    path: /transaction_metrics_add
    method: GET
- name: impressions_event_source
  endpoint:
    path: /Create/Stream/Data/Source
    method: POST
    data_selector: details
    params: {}
- name: user_sign_ups
  endpoint:
    path: /Create/Batch/Data/Source
    method: POST
    data_selector: details
    params: {}
- name: user
  endpoint:
    path: /Create/Entity
    method: POST
    data_selector: details
    params: {}
- name: ads_user
  endpoint:
    path: /Create/Entity
    method: POST
    data_selector: details
    params: {}
- name: clicked_events_fv
  endpoint:
    path: /Create/Transformation
    method: POST
    data_selector: details
    params: {}
- name: clicked_events_fv_stream_feature
  endpoint:
    path: /Create/Stream/Feature/View
    method: POST
    data_selector: details
    params: {}
- name: create_entity
  endpoint:
    path: /create_entity
    method: POST
    data_selector: entity
    params: {}
- name: delete_entity
  endpoint:
    path: /delete_entity
    method: DELETE
    data_selector: entity
    params: {}
- name: update_feature_view
  endpoint:
    path: /update_feature_view
    method: PATCH
    data_selector: feature_view
    params: {}
- name: BatchFeatureView
  endpoint:
    path: /docs/beta/defining-features/feature-views/batch-feature-view
    method: GET
    data_selector: records
    params: {}
- name: StreamFeatureView
  endpoint:
    path: /docs/beta/defining-features/feature-views/stream-feature-view
    method: GET
    data_selector: records
    params: {}
- name: RealtimeFeatureView
  endpoint:
    path: /docs/beta/defining-features/feature-views/realtime-feature-view
    method: GET
    data_selector: records
    params: {}
- name: transactions_stream
  endpoint:
    path: /stream
    method: POST
    data_selector: records
- name: transactions_stream
  endpoint:
    path: /stream
    method: POST
    data_selector: records
    params: {}
- name: transactions
  endpoint:
    path: s3://tecton.ai.public/tutorials/transactions.pq
    method: GET
    data_selector: records
    params: {}
- name: transactions_stream
  endpoint:
    path: /ingest
    method: POST
    data_selector: ingestMetrics
- name: user_transaction_amount_totals
  endpoint:
    path: /features
    method: GET
    data_selector: updated feature values
- name: transactions
  endpoint:
    path: s3://tecton.ai.public/tutorials/transactions.pq
    method: GET
    data_selector: records
    params: {}
- name: transactions
  endpoint:
    path: s3://tecton.ai.public/tutorials/transactions.pq
    method: GET
    data_selector: records
    params: {}
- name: user_transaction_metrics
  endpoint:
    path: /api/v1/feature-service/get-features
    method: POST
    data_selector: result.features
- name: transactions
  endpoint:
    path: s3://tecton.ai.public/tutorials/transactions.pq
    method: GET
    data_selector: records
    params: {}
- name: transactions_stream
  endpoint:
    path: /api/v1/transactions
    method: POST
    data_selector: data
- name: fraud_detection_feature_service_streaming
  endpoint:
    path: /api/v1/feature_services/fraud_detection_feature_service_streaming
    method: GET
    data_selector: features
- name: transactions
  endpoint:
    path: /api/v1/feature-service/get-features
    method: POST
    data_selector: result
    params: {}
- name: updated_features
  endpoint:
    path: /get_online_features
    method: GET
    data_selector: features
    params:
      join_keys:
        user_id: user_id
- name: transactions_stream
  endpoint:
    path: /transactions_stream
    method: POST
    data_selector: data
    params: {}
- name: fraud_detection_feature_service_streaming
  endpoint:
    path: /fraud_detection_feature_service_streaming
    method: GET
    data_selector: features
    params: {}
- name: transaction_request
  endpoint:
    path: transaction_request
    method: POST
    data_selector: amount
    params: {}
- name: transactions_batch
  endpoint:
    path: transactions_batch
    method: GET
    data_selector: transactions
    params:
      uri: s3://tecton.ai.public/tutorials/transactions.pq
      file_format: parquet
      timestamp_field: timestamp
- name: user_transaction_averages
  endpoint:
    path: /tutorials/transactions.pq
    method: GET
    data_selector: transactions
    params: {}
- name: transaction_request
  endpoint:
    path: /transaction_request
    method: POST
    data_selector: amount
    params: {}
- name: transactions_batch
  endpoint:
    path: /transactions_batch
    method: GET
    data_selector: historical_transactions
    params:
      uri: s3://tecton.ai.public/tutorials/transactions.pq
      file_format: parquet
      timestamp_field: timestamp
- name: transaction_request
  endpoint:
    path: /transaction_request
    method: POST
    data_selector: records
- name: user_transaction_averages
  endpoint:
    path: /user_transaction_averages
    method: GET
    data_selector: records
- name: transactions_batch
  endpoint:
    path: /s3/tecton.ai.public/tutorials/transactions.pq
    method: GET
    data_selector: records
- name: transaction_request
  endpoint:
    path: /transaction_request
    method: POST
    data_selector: data
    params: {}
- name: user_transaction_averages
  endpoint:
    path: /user_transaction_averages
    method: GET
    data_selector: data
    params: {}
- name: transaction_request
  endpoint:
    path: /transaction_request
    method: GET
    data_selector: records
- name: user_transaction_averages
  endpoint:
    path: /user_transaction_averages
    method: GET
    data_selector: records
- name: fraud_detection_feature_service
  endpoint:
    path: /fraud_detection_feature_service
    method: GET
    data_selector: records
- name: transaction_amount_is_high
  endpoint:
    path: /realtime_features/transaction_amount_is_high
    method: GET
    data_selector: features
- name: user_transaction_averages
  endpoint:
    path: /batch_features/user_transaction_averages
    method: GET
    data_selector: features
- name: fraud_detection_feature_service
  endpoint:
    path: /feature_services/fraud_detection_feature_service
    method: GET
    data_selector: features
- name: transaction_amount_is_high
  endpoint:
    path: /transaction_amount_is_high
    method: GET
    data_selector: records
- name: user_transaction_averages
  endpoint:
    path: /user_transaction_averages
    method: GET
    data_selector: records
- name: transactions_batch
  endpoint:
    path: /s3://tecton.ai.public/tutorials/transactions.pq
    method: GET
    data_selector: records
    params: {}
- name: fraud_detection_feature_service
  endpoint:
    path: /fraud_detection_feature_service
    method: GET
    data_selector: features
- name: transaction_amount_is_high
  endpoint:
    path: /transaction_amount_is_high
    method: GET
    data_selector: transaction_amount_is_high
    params: {}
- name: user_transaction_averages
  endpoint:
    path: /user_transaction_averages
    method: GET
    data_selector: user_transaction_averages
    params: {}
- name: user
  endpoint:
    path: /entities/user
    method: POST
    data_selector: user
- name: plan
  endpoint:
    path: /services/data/vXX.X/plan
    method: POST
    data_selector: plan
- name: apply
  endpoint:
    path: /services/data/vXX.X/apply
    method: POST
    data_selector: apply
- name: user_credit_card_issuer
  endpoint:
    path: /features/user_credit_card_issuer
    method: GET
    data_selector: user_credit_card_issuer
    params: {}
- name: fraud_detection
  endpoint:
    path: /feature_services/fraud_detection
    method: GET
    data_selector: fraud_detection
    params: {}
- name: user
  endpoint:
    path: /entities/user
    method: POST
    data_selector: records
- name: user_credit_card_issuer
  endpoint:
    path: /features/user_credit_card_issuer
    method: POST
    data_selector: features
    params: {}
- name: fraud_detection_v2
  endpoint:
    path: /feature_services/fraud_detection_v2
    method: POST
    data_selector: features
    params: {}
- name: impressions_event_source
  endpoint:
    path: /services/data/vXX.X/sobjects/ImpressionsEventSource
    method: CREATE
    data_selector: records
- name: user_sign_ups
  endpoint:
    path: /services/data/vXX.X/sobjects/UserSignUps
    method: CREATE
    data_selector: records
- name: user
  endpoint:
    path: /services/data/vXX.X/sobjects/User
    method: CREATE
    data_selector: records
- name: ads_user
  endpoint:
    path: /services/data/vXX.X/sobjects/AdsUser
    method: CREATE
    data_selector: records
- name: clicked_events_fv
  endpoint:
    path: /services/data/vXX.X/sobjects/ClickedEventsFV
    method: CREATE
    data_selector: records
- name: apply_history
  endpoint:
    path: /apply/history
    method: GET
    data_selector: history
    params: {}
- name: restore_apply
  endpoint:
    path: /apply/restore
    method: POST
    data_selector: restore
    params: {}
- name: workspace
  endpoint:
    path: /workspace
    method: GET
    data_selector: workspaces
    params: {}
- name: impressions_event_source
  endpoint:
    path: /services/data/vXX.X/sobjects/impressions_event_source
    method: POST
    data_selector: records
    params: {}
- name: user_sign_ups
  endpoint:
    path: /services/data/vXX.X/sobjects/user_sign_ups
    method: POST
    data_selector: records
    params: {}
- name: user
  endpoint:
    path: /services/data/vXX.X/sobjects/user
    method: POST
    data_selector: records
    params: {}
- name: ads_user
  endpoint:
    path: /services/data/vXX.X/sobjects/ads_user
    method: POST
    data_selector: records
    params: {}
- name: clicked_events_fv
  endpoint:
    path: /services/data/vXX.X/sobjects/clicked_events_fv
    method: POST
    data_selector: records
    params: {}
- name: impressions_event_source
  endpoint:
    path: /path/to/impressions_event_source
    method: CREATE
    data_selector: data
    params: {}
- name: user_sign_ups
  endpoint:
    path: /path/to/user_sign_ups
    method: CREATE
    data_selector: data
    params: {}
- name: user
  endpoint:
    path: /path/to/user
    method: CREATE
    data_selector: data
    params: {}
- name: ads_user
  endpoint:
    path: /path/to/ads_user
    method: CREATE
    data_selector: data
    params: {}
- name: clicked_events_fv
  endpoint:
    path: /path/to/clicked_events_fv
    method: CREATE
    data_selector: data
    params: {}
- name: create
  endpoint:
    path: /apply
    method: POST
    data_selector: changes
    params: {}
- name: delete
  endpoint:
    path: /apply
    method: POST
    data_selector: changes
    params: {}
- name: update
  endpoint:
    path: /apply
    method: POST
    data_selector: changes
    params: {}
- name: upgrade
  endpoint:
    path: /apply
    method: POST
    data_selector: changes
    params: {}
- name: create
  endpoint:
    path: /apply
    method: POST
    data_selector: ''
    params: {}
- name: delete
  endpoint:
    path: /delete
    method: POST
    data_selector: ''
    params: {}
- name: update
  endpoint:
    path: /update
    method: POST
    data_selector: ''
    params: {}
- name: upgrade
  endpoint:
    path: /upgrade
    method: POST
    data_selector: ''
    params: {}
- name: GetFeatures
  endpoint:
    path: /GetFeatures
    method: GET
- name: get_features_for_events
  endpoint:
    path: /get_features_for_events
    method: GET
- name: get_features_in_range
  endpoint:
    path: /get_features_in_range
    method: GET
- name: get_online_features
  endpoint:
    path: /get_online_features
    method: GET
- name: get_features_for_events
  endpoint:
    path: /get_features_for_events
    method: GET
    data_selector: features
    params: {}
- name: get_features_in_range
  endpoint:
    path: /get_features_in_range
    method: GET
    data_selector: features
    params: {}
- name: get_online_features
  endpoint:
    path: /get_online_features
    method: GET
    data_selector: features
    params: {}
- name: GetFeatures
  endpoint:
    path: /GetFeatures
    method: GET
    data_selector: features
    params: {}
- name: BatchFeatureView
  endpoint:
    path: /docs/defining-features/feature-views/batch-feature-view
    method: GET
    data_selector: records
    params: {}
- name: StreamFeatureView
  endpoint:
    path: /docs/defining-features/feature-views/stream-feature-view
    method: GET
    data_selector: records
    params: {}
- name: transaction_metrics
  endpoint:
    path: /services/data/vX.X/sobjects/transaction_metrics
    method: GET
    data_selector: records
    params: {}
- name: transaction_metrics_add
  endpoint:
    path: /services/data/vX.X/sobjects/transaction_metrics_add
    method: GET
    data_selector: records
    params: {}
- name: fd_service
  endpoint:
    path: /services/data/vX.X/sobjects/fd_service
    method: GET
    data_selector: records
    params: {}
- name: churn_service
  endpoint:
    path: /services/data/vX.X/sobjects/churn_service
    method: GET
    data_selector: records
    params: {}
- name: user_transaction_metrics
  endpoint:
    path: /publish_features
    method: POST
    data_selector: features
    params:
      offline: true
      publish_start_time: '2023-01-01'
- name: BatchFeatureView
  endpoint:
    path: /docs/defining-features/feature-views/batch-feature-view
    method: GET
    data_selector: records
- name: StreamFeatureView
  endpoint:
    path: /docs/defining-features/feature-views/stream-feature-view
    method: GET
    data_selector: records
- name: RealtimeFeatureViews
  endpoint:
    path: /docs/defining-features/feature-views/realtime-feature-view
    method: GET
    data_selector: records
- name: fraud_detection
  endpoint:
    path: /path/to/fraud_detection
    method: GET
- name: ctr_prediction_service
  endpoint:
    path: /path/to/ctr_prediction_service
    method: GET
- name: ctr_prediction_service
  endpoint:
    path: /feature_service/ctr_prediction_service
    method: GET
    data_selector: features
    params: {}
- name: fraud_detection
  endpoint:
    path: /feature_service/fraud_detection
    method: GET
    data_selector: features
    params: {}
- name: fraud_detection
  endpoint:
    path: /feature_service/fraud_detection
    method: GET
- name: ctr_prediction_service
  endpoint:
    path: /feature_service/ctr_prediction_service
    method: GET
- name: GetFeatures
  endpoint:
    path: /api/v1/feature-service/get-features
    method: POST
    data_selector: result
- name: fraud_detection
  endpoint:
    path: /feature_services/fraud_detection
    method: GET
    data_selector: features
    params: {}
- name: ctr_prediction_service
  endpoint:
    path: /feature_services/ctr_prediction_service
    method: GET
    data_selector: features
    params: {}
- name: get_features
  endpoint:
    path: /api/v1/feature-service/get-features
    method: POST
    data_selector: params
    params: {}
- name: get_features_batch
  endpoint:
    path: /api/v1/feature-service/get-features-batch
    method: POST
    data_selector: params
    params: {}
- name: GetFeatures
  endpoint:
    path: /api/v1/feature-service/get-features
    method: POST
    data_selector: result
    params: {}
- name: GetFeatures
  endpoint:
    path: /api/v1/feature-service/get-features
    method: POST
    data_selector: params
    params: {}
- name: GetFeaturesBatch
  endpoint:
    path: /api/v1/feature-service/get-features-batch
    method: POST
    data_selector: params
    params: {}
- name: get_features_batch
  endpoint:
    path: /api/v1/feature-service/get-features-batch
    method: POST
    data_selector: response.value
    params: {}
- name: metadata
  endpoint:
    path: /api/v1/feature-service/metadata
    method: POST
    data_selector: response.value
    params: {}
- name: Groups - Get all groups
  endpoint:
    path: /api/scim/v2/Groups
    method: GET
    data_selector: records
    params:
      filter: <string>
      startIndex: <long>
      count: <long>
      sortBy: <string>
      sortOrder: <string>
- name: get_features_batch
  endpoint:
    path: /api/v1/feature-service/get-features-batch
    method: POST
    data_selector: body.params.requestData
- name: metadata
  endpoint:
    path: /api/v1/feature-service/metadata
    method: POST
    data_selector: body
- name: Groups - Get all groups
  endpoint:
    path: /api/scim/v2/Groups
    method: GET
    data_selector: response
    params:
      filter: <string>
      startIndex: <long>
      count: <long>
      sortBy: <string>
      sortOrder: <string>
- name: Groups - Get a group
  endpoint:
    path: /api/scim/v2/Groups/:id
    method: GET
    data_selector: schemas
    params: {}
- name: Groups - Create a group
  endpoint:
    path: /api/scim/v2/Groups
    method: POST
    data_selector: schemas
    params: {}
- name: Groups - Delete a group
  endpoint:
    path: /api/scim/v2/Groups/:id
    method: DELETE
    data_selector: schemas
    params: {}
- name: Groups
  endpoint:
    path: /api/scim/v2/Groups
    method: GET
- name: service_accounts
  endpoint:
    path: /api/scim/v2/ServiceAccounts
    method: GET
    data_selector: Resources
    params: {}
- name: groups
  endpoint:
    path: /api/scim/v2/Groups/:id
    method: PUT
    data_selector: meta
    params: {}
- name: Groups - Create a group
  endpoint:
    path: /api/scim/v2/Groups
    method: POST
    data_selector: schemas
    params: {}
- name: Groups - Get a group
  endpoint:
    path: /api/scim/v2/Groups/:id
    method: GET
    data_selector: schemas
    params: {}
- name: Groups - Delete a group
  endpoint:
    path: /api/scim/v2/Groups/:id
    method: DELETE
    data_selector: schemas
    params: {}
- name: ServiceAccounts
  endpoint:
    path: /api/scim/v2/ServiceAccounts
    method: GET
- name: ServiceAccounts
  endpoint:
    path: /api/scim/v2/ServiceAccounts
    method: GET
    data_selector: Resources
- name: Groups
  endpoint:
    path: /api/scim/v2/Groups/:id
    method: PUT
    data_selector: schemas
- name: ServiceAccounts
  endpoint:
    path: /api/scim/v2/ServiceAccounts/:id
    method: GET
    data_selector: body
- name: Users
  endpoint:
    path: /api/scim/v2/Users
    method: GET
    data_selector: body
- name: Users
  endpoint:
    path: /api/scim/v2/Users
    method: GET
- name: ServiceAccounts
  endpoint:
    path: /api/scim/v2/ServiceAccounts
    method: POST
    data_selector: schemas
    params: {}
- name: GetServiceAccount
  endpoint:
    path: /api/scim/v2/ServiceAccounts/:id
    method: GET
    data_selector: schemas
    params: {}
- name: Users - Get a user
  endpoint:
    path: /api/scim/v2/Users/:id
    method: GET
    data_selector: schemas
- name: Users - Delete a user
  endpoint:
    path: /api/scim/v2/Users/:id
    method: DELETE
    data_selector: schemas
- name: Users - Create a user
  endpoint:
    path: /api/scim/v2/Users
    method: POST
    data_selector: schemas
- name: ServiceAccounts
  endpoint:
    path: /api/scim/v2/ServiceAccounts/:id
    method: GET
    data_selector: body
    params: {}
- name: Users
  endpoint:
    path: /api/scim/v2/Users
    method: GET
    data_selector: body
    params: {}
- name: Assign role(s) on secret scope(s)
  endpoint:
    path: /api/v1/authorization-service/assign-roles
    method: POST
    data_selector: assignments
    params: {}
- name: assign_roles
  endpoint:
    path: /api/v1/authorization-service/assign-roles
    method: POST
    data_selector: assignments
- name: list_assigned_principals
  endpoint:
    path: /api/v1/authorization-service/list-assigned-principals
    method: POST
    data_selector: assignments
- name: list_assigned_roles
  endpoint:
    path: /api/v1/authorization-service/list-assigned-roles
    method: POST
    data_selector: assignments
- name: Users - Create a user
  endpoint:
    path: /api/scim/v2/Users
    method: POST
    data_selector: ''
    params: {}
- name: Users - Get a user
  endpoint:
    path: /api/scim/v2/Users/:id
    method: GET
    data_selector: ''
    params: {}
- name: Users - Delete a user
  endpoint:
    path: /api/scim/v2/Users/:id
    method: DELETE
    data_selector: ''
    params: {}
- name: Users
  endpoint:
    path: /api/scim/v2/Users/:id
    method: PUT
- name: Assign role(s) on secret scope(s)
  endpoint:
    path: /api/v1/authorization-service/assign-roles
    method: POST
- name: list_assigned_roles
  endpoint:
    path: /api/v1/authorization-service/list-assigned-roles
    method: POST
    data_selector: body
    params: {}
- name: unassign_roles
  endpoint:
    path: /api/v1/authorization-service/unassign-roles
    method: POST
    data_selector: body
    params: {}
- name: list_secret_scopes
  endpoint:
    path: /api/v1/secrets-service/scopes
    method: GET
    data_selector: body
    params: {}
- name: delete_secret_scope
  endpoint:
    path: /api/v1/secrets-service/scopes/:scope
    method: DELETE
    data_selector: body
    params: {}
- name: create_secret_scope
  endpoint:
    path: /api/v1/secrets-service/scopes/:scope
    method: POST
    data_selector: body
    params: {}
- name: list_secrets_in_scope
  endpoint:
    path: /api/v1/secrets-service/scopes/:scope/keys
    method: GET
    data_selector: body
    params: {}
- name: assign_roles
  endpoint:
    path: /api/v1/authorization-service/assign-roles
    method: POST
    data_selector: assignments
    params: {}
- name: list_assigned_principals
  endpoint:
    path: /api/v1/authorization-service/list-assigned-principals
    method: POST
    data_selector: assignments
    params: {}
- name: list_assigned_roles
  endpoint:
    path: /api/v1/authorization-service/list-assigned-roles
    method: POST
    data_selector: assignments
    params: {}
- name: Create a service account
  endpoint:
    path: /api/v1/serviceAccounts
    method: POST
    data_selector: body
    params: {}
- name: list_assigned_roles
  endpoint:
    path: /api/v1/authorization-service/list-assigned-roles
    method: POST
    data_selector: body
    params: {}
- name: unassign_roles
  endpoint:
    path: /api/v1/authorization-service/unassign-roles
    method: POST
    data_selector: body
    params: {}
- name: list_secret_scopes
  endpoint:
    path: /api/v1/secrets-service/scopes
    method: GET
    data_selector: body
    params: {}
- name: create_secret_scope
  endpoint:
    path: /api/v1/secrets-service/scopes/:scope
    method: POST
    data_selector: body
    params: {}
- name: delete_secret_scope
  endpoint:
    path: /api/v1/secrets-service/scopes/:scope
    method: DELETE
    data_selector: body
    params: {}
- name: list_secrets_in_scope
  endpoint:
    path: /api/v1/secrets-service/scopes/:scope/keys
    method: GET
    data_selector: body
    params: {}
- name: service_accounts
  endpoint:
    path: /api/v1/serviceAccounts/search
    method: POST
    data_selector: serviceAccounts
    params: {}
- name: delete_service_account
  endpoint:
    path: /api/v1/serviceAccounts/:id
    method: DELETE
    data_selector: {}
    params: {}
- name: update_service_account
  endpoint:
    path: /api/v1/serviceAccounts/:id
    method: PUT
    data_selector: {}
    params: {}
- name: Create a service account
  endpoint:
    path: /api/v1/serviceAccounts
    method: POST
    data_selector: body
- name: serviceAccounts
  endpoint:
    path: /api/v1/serviceAccounts/:id/secrets
    method: GET
- name: createClientSecret
  endpoint:
    path: /api/v1/serviceAccounts/:id/secrets
    method: POST
- name: deleteClientSecret
  endpoint:
    path: /api/v1/serviceAccounts/:serviceAccountId/secrets/:secretId
    method: DELETE
- name: serviceAccounts
  endpoint:
    path: /api/v1/serviceAccounts
    method: POST
    data_selector: serviceAccounts
- name: searchServiceAccounts
  endpoint:
    path: /api/v1/serviceAccounts/search
    method: POST
    data_selector: serviceAccounts
- name: deleteServiceAccount
  endpoint:
    path: /api/v1/serviceAccounts/:id
    method: DELETE
- name: updateServiceAccount
  endpoint:
    path: /api/v1/serviceAccounts/:id
    method: PUT
- name: get-features-batch
  endpoint:
    path: /api/v2/workspaces/:params.workspaceName/feature-services/:params.featureServiceName/get-features-batch
    method: POST
- name: GetFeatures
  endpoint:
    path: /api/v2/workspaces/:params.workspaceName/feature-services/:params.featureServiceName/get-features
    method: POST
    data_selector: value
    params: {}
- name: GetFeaturesBatchV2
  endpoint:
    path: /api/v2/workspaces/:params.workspaceName/feature-services/:params.featureServiceName/get-features-batch
    method: POST
    data_selector: value
    params: {}
- name: get_features_batch
  endpoint:
    path: /api/v2/workspaces/:params.workspaceName/feature-services/:params.featureServiceName/get-features-batch
    method: POST
    data_selector: response
    params: {}
- name: ServiceMetadataV2
  endpoint:
    path: /api/v2/workspaces/:workspaceName/feature-services/:featureServiceName/metadata
    method: GET
    data_selector: response
    params: {}
- name: get_features_batch
  endpoint:
    path: /api/v2/workspaces/:params.workspaceName/feature-services/:params.featureServiceName/get-features-batch
    method: POST
    data_selector: params.requestData
    params: {}
- name: service_metadata_v2
  endpoint:
    path: /api/v2/workspaces/:workspaceName/feature-services/:featureServiceName/metadata
    method: GET
    data_selector: featureServiceType
    params: {}
- name: feature_service_metadata
  endpoint:
    path: /api/v2/workspaces/:workspaceName/feature-services/:featureServiceName/metadata
    method: GET
- name: metadata
  endpoint:
    path: /api/v2/workspaces/:workspaceName/feature-services/:featureServiceName/metadata
    method: GET
    data_selector: response
notes:
- Uses OAuth2 with refresh token — requires setup of connected app in api
- This is documentation for Tecton 0.9, which is not the latest version.
- Support tickets can be created using the support.tecton.ai portal or by emailing
  techsupport@tecton.ai.
- Tecton is built for scale, delivering median latencies of ~5ms and supporting 100,000s
  of requests per second.
- Tecton objects are immutable and therefore a new local Feature Service is created.
- Development workspaces incur no costs, since they do not materialize any data and
  do not consume compute or serving resources.
- This workspace (prod) is a 'Live' workspace. Applying this plan may result in new
  materialization jobs which will incur costs.
- Tecton supports a .tectonignore file that can specify files or path expressions
  to ignore when running plan, apply, or test.
- This workspace (prod) is a "Live" workspace. Applying this plan may result in new
  materialization jobs which will incur costs. Carefully examine the plan output before
  applying changes.
- Using get_online_features() is not recommended in production. It's much slower than
  the GetFeatures endpoint of the HTTP API, and is not designed for production workloads.
- Tecton does not recommend recreating an existing feature view that is a dependency
  for a live model, as this can lead to downtime when the feature view is recreated.
  We recommend setting `prevent_destroy` on production Feature Services and Feature
  Views.
- Materialization is an essential part of Tecton's operational ML features lifecycle
  management.
- The frequency of steady-state materialization is controlled by the batch_schedule
  parameter.
- Tecton does not recommend recreating an existing feature view that is a dependency
  for a live model, as this can lead to downtime when the feature view is recreated.
- Some objects may require additional changes due to upstream data migration.
- Tecton is here to help! Contact your Tecton representative if you need clarification
  on any requirements or need help determining the best configuration for your use
  case.
- Names must not be longer than 21 characters
- Tecton provides capabilities to help you ensure high uptime and low latency for
  feature data.
- Tecton applies tags to resources in your cloud environment so you can view costs
  by feature view or workspace.
- Tecton releases a new stable version about every quarter and defines a support period
  for which it will be maintained.
- Beta versions are intended to allow customers to preview Tecton's new features.
  Tecton does not guarantee any stability between Beta versions and they are not recommended
  for production systems.
- Tecton user accounts are managed through Okta, requiring strong passwords and 2FA.
- SSO & Federated Identity integrations with most Identity Providers through SAML
  2.0 and OpenID Connect.
- Uses OAuth2 — requires setup of connected app in Tecton.
- In a real application, you'd send this data directly to Tecton's HTTP API for the
  best performance.
- Uses HTTP API for real-time data ingestion and historical data retrieval.
- Uses token-based authentication — requires copying authentication token back into
  your notebook.
- Uses API key for authentication.
- Features are materialized for historical data retrieval.
- Requires setup of connected app in api
- Requires setup of service accounts in Tecton.
- Using service accounts requires Consumer access to the workspace.
- For best performance, use the HTTP API directly instead of .ingest()
- Monitor your feature freshness in the Tecton UI
- Set up alerts for serving latency and feature distribution changes
- No prior Tecton experience is required, though basic Python knowledge is assumed.
- Uses RequestSource to define realtime inputs
- Creating realtime_feature_view for on-the-fly computations
- Combining realtime data with historical features
- Generating training data while maintaining consistency
- Deploying features to production
- Use Python >= 3.8 to get started.
- Python >= 3.8 is required to get started.
- Some features involve comparing request data against historical patterns.
- Uses the Tecton SDK for feature engineering and deployment.
- For best performance in production, use the REST API directly or use Tecton's Python/Java
  client libraries.
- 'Request-Aware Features in Minutes: You defined a feature that reacts to the incoming
  transaction amount -- no precomputation, no infrastructure setup.'
- 'Contextual Intelligence from Historical Patterns: By combining request-time data
  with each user''s historical average, you created a feature that adapts to individual
  behavior instead of relying on static thresholds.'
- Uses API Key for authentication — requires setup of service account in Tecton
- Uses REST API for feature requests
- Monitor feature freshness and set up alerts for serving latency
- Some objects like Contact may return nulls in deeply nested fields
- Ensure to create a Service Account for cicd-demo workspace
- Use the API Key obtained during Service Account creation
- Requires setup of connected app in Tecton
- Ensure deployments to production are reviewed and authorized
- The 'apply' job is intentionally configured to be skipped at this stage since it
  is designed to execute only after a merge into the main branch.
- Tecton supports a .tectonignore file that can specify files or path expressions
  to ignore.
- This workspace (prod) is a 'Live' workspace. Applying this plan may result in new
  materialization jobs which will incur costs. Carefully examine the plan output before
  applying changes.
- Using get_online_features() is not recommended in production. It's much slower than
  the GetFeatures endpoint of the HTTP API.
- Tecton handles backfill and steady-state materialization for batch and stream features
  based on your Feature View configuration.
- Tecton recommends running a feature modeling exercise prior to building a feature
  view to identify potential features within a data source.
- Computing and storing features can be the biggest infrastructure cost for production
  AI applications.
- The Tecton data model promotes modular storage of the features in a model as Feature
  Views.
- Ensure offline materialization is enabled (`offline=True`)
- Automatically schedules Feature Publish jobs after materialization
- Tecton is engineered with a strategic focus on cost optimization, empowering customers
  to scale their ML workloads without excessive operational expenses.
- Tecton handles backfill and steady-state materialization for batch and stream features.
- Real-time feature views cannot be materialized since they are calculated only at
  request-time.
- Integration pattern does not require Rift batch compute.
- Stream Ingest API integration currently not available for VPC deployments.
- Some objects may require specific configurations for publishing
- Scale your feature serving capacity to handle your production traffic volumes
- Use monitoring and alerts to gain visibility into jobs, uptime, and data quality
- Follow recommended strategies for updating features, models, and feature services
- Manage your infrastructure costs by optimizing cluster configurations and suppressing
  unnecessary recomputations
- This integration pattern does not require Rift batch compute.
- The Stream Ingest API integration requires the API be enabled.
- Tecton requires connection to a Cloud Provider for deployment.
- Users need to set up a Cloud Provider access with necessary permissions.
- Tecton provides capabilities to help ensure high uptime and low latency for feature
  data.
- Monitoring dashboards and alerting tools help maintain data quality.
- Tecton implements industry-leading security practices in order to meet strict requirements
  for processing sensitive feature data.
- A Feature Service is a Tecton object that groups together one or more Feature Views.
errors:
- '401 Unauthorized: invalid ''Tecton-key'' authorization header. Note that newly
  created credentials may take up to 60 seconds to be usable.'
- '403 Forbidden: Not Authorized. Note that access control changes may take up to
  60 seconds to apply.'
- '404 Not Found: Unable to query FeatureService my_feature_service for workspace
  my_workspace. Newly created feature services may take up to 60 seconds to query.'
- '429 Resources Exhausted: Metadata exceeded the concurrent request limit, please
  retry later.'
- '503 Service Unavailable: 503 Service Temporarily Unavailable.'
- '504 Gateway Timeout: Timed out.'
- invalid 'Tecton-key' authorization header. Note that newly created credentials may
  take up to 60 seconds to be usable.
- Not Authorized. Note that access control changes may take up to 60 seconds to apply.
- Unable to query FeatureService my_feature_service for workspace my_workspace. Newly
  created feature services may take up to 60 seconds to query. Also, ensure that the
  workspace is a live workspace.
- Metadata exceeded the concurrent request limit, please retry later
- 503 Service Temporarily Unavailable
- Timed out
- '404 Not Found: Unable to query FeatureService my_feature_service for workspace
  my_workspace. Newly created feature services may take up to 60 seconds to query.
  Also, ensure that the workspace is a live workspace.'
- '429 Resources Exhausted: Metadata exceeded the concurrent request limit, please
  retry later'
- '503 Service Unavailable: 503 Service Temporarily Unavailable'
- '504 Gateway Timeout: Timed out'
- 'REQUEST_LIMIT_EXCEEDED: Metadata exceeded the concurrent request limit, please
  retry later'
- '429 Resources Exhausted: This error indicates that you have exceeded the concurrent
  request limit for your deployment and you need to either reduce your request rate
  or scale up your feature server deployment.'
- '503 Service Unavailable: This error indicates that Tecton is currently unable to
  process your request because either the Online Store is unavailable or Tecton''s
  feature server deployment is down.'
- '504 Gateway Timeout: Timed out. This error indicates that processing the request
  exceeded the 2 seconds timeout limit set by Tecton.'
- 'REQUEST_LIMIT_EXCEEDED: Throttle API calls or reduce frequency'
- 'QUERY_TIMEOUT: Break down filters or add selectivity'
- '401 Unauthorized: Recheck OAuth scopes or token expiration'
- '401 Unauthorized: Recheck API Key or permissions'
- '403 Forbidden: Ensure sufficient permissions for the Service Account'
- '404 Not Found: Verify feature service and workspace status'
- '429 Resources Exhausted: Reduce request rate or scale deployment'
- '503 Service Unavailable: Check Online Store availability'
- '504 Gateway Timeout: Verify Online Store response time'
- '404 Not Found: Unable to query FeatureService my_feature_service for workspace
  my_workspace.'
- 'Error: Check your API key or feature materialization status.'
- '401 Unauthorized: Check API key or authentication method.'
- '401 Unauthorized: Recheck API key or permissions'
- 'Missing required join key: user_id'
- 'Expected key not found: [amount] in requestContextMap'
- Unexpected JSON type for content_id in joinKeyMap. Expected int64 or null.
- 'Unknown join key: join_key, expected one of: [user_id ad_id]'
- Unable to find FeatureService 'my_feature_service' in workspace 'my_workspace'.
  Please make sure that the FeatureService exists in the workspace.
- '404 Not Found: Unable to query FeatureService `fs` for workspace `ws`. Newly created
  feature services may take up to 60 seconds to query. Also, ensure that the workspace
  is a live workspace.'
- '429 Too Many Requests: GetFeatures exceeded the concurrent request limit, please
  retry later'
- '503 Service Temporarily Unavailable: Tecton is currently unable to process your
  request because either the Online Store is unavailable or Tecton''s feature server
  deployment is down.'
- Batch size 11 exceeds maximum of 10.
- 'Cannot retrieve features. FeatureView: my_feature_view has no materialized data
  in the online store.'
- The DynamoDB table was not found. If this package was newly created and is serving
  in multiple regions, you may need to wait for DynamoDB Global Tables to finish creating
  a replica table.
- GetFeatures exceeded the concurrent request limit, please retry later
- DynamoDB throttled the request. The request rate exceeds the aws account's throughput
  limit, or you may be requesting a hot key.
- '404 Not Found: Unable to query FeatureService for workspace.'
- '429 Too Many Requests: Exceeded the concurrent request limit.'
- '503 Service Temporarily Unavailable: Unable to process request.'
- '504 Gateway Timeout: Processing request exceeded the timeout limit.'
- 'Bad Request: Missing required join key.'
- '504 Gateway Timeout: Request may take too long; consider optimizing'
- '401 Unauthorized: Invalid ''Tecton-key'' authorization header.'
- '403 Forbidden: Service Account lacks permissions for the workspace.'
- '404 Not Found: Ensure workspace is live and feature service exists.'
- '429 Too Many Requests: Exceeded concurrent request limit.'
- '503 Service Temporarily Unavailable: Online Store or deployment is down.'
- Unable to query FeatureService my_feature_service for workspace my_workspace. Newly
  created feature services may take up to 60 seconds to query.
- DynamoDB throttled the request. The request rate exceeds the aws account's throughput
  limit.
- '503 Service Temporarily Unavailable: Check the Online Store availability'
- 'Gateway Timeout: Verify availability of your Online Store'
- 'Unauthorized: Invalid ''Tecton-key'' authorization header'
- '504 Gateway Timeout: Request timed out.'
- '404 Not Found: Unable to query FeatureService for workspace. Ensure that the workspace
  is a live workspace.'
- '429 Too Many Requests: Metadata exceeded the concurrent request limit, please retry
  later.'
- '503 Service Temporarily Unavailable: Unable to process your request.'
- Unauthorized. Please pass an [API Key](https://docs.tecton.ai/docs/beta/reading-feature-data/reading-feature-data-for-inference/reading-online-features-for-inference-using-the-http-api#creating-an-api-key-to-authenticate-to-the-http-api)
  to authorize the call.
- Forbidden. Ensure your the caller has permissions to perform this action. SCIM APIs
  require the Admin role.
- Invalid 'Tecton-key' authorization header
- Malformed API key supplied in authorization header
- '403 Forbidden: Ensure your the caller has permissions to perform this action. SCIM
  APIs require the Admin role.'
- '401 Unauthorized: Please pass an API Key to authorize the call.'
- '404 Not Found: Group does not exist for the provided id.'
- Unauthorized. Please pass an [API Key] to authorize the call.
- Group does not exist for the provided id.
- '401 Unauthorized: Please pass an [API Key] to authorize the call.'
- '403 Forbidden: Ensure your the caller has permissions to perform this action.'
- '409 Conflict: A service account already exists with the provided name.'
- '404 Not Found: Service Account does not exist for the provided id.'
- Unauthorized. Please pass an [API Key] to authenticate the request.
- Forbidden. Ensure your the caller has permissions to perform this action.
- '409 Conflict: A user already exists with the provided userName.'
- '404 Not Found: User does not exist for the provided id.'
- '403 Forbidden: Ensure your API key is valid and has access to perform this action.'
- '400 Bad Request: Service Account with name already exists.'
- '404 Not Found: Service Account not found.'
- '400 Bad Request: Failed to create client secret. This Service Account already has
  the maximum number of secrets (2).'
- '404 Not Found: Service Account or Client Secret not found.'
- Forbidden. Ensure your API key is valid and has access to perform this action.
- Service Account not found.
- 'Missing required join key: `user_id`'
- '504 Gateway Timeout: Processing the request exceeded the timeout limit set by Tecton.'
- '404 Not Found: Ensure that the workspace is a live workspace.'
- '429 Too Many Requests: Reduce your request rate.'
- '503 Service Temporarily Unavailable: Check Online Store availability.'
- '504 Gateway Timeout: Verify availability of your Online Store.'
- '404 Not Found: Ensure the workspace and feature service names are correct.'
- '504 Gateway Timeout: Verify Online Store availability.'
- '404 Not Found: Unable to query FeatureService `fs` for workspace `ws`. Newly created
  feature services may take up to 60 seconds to query.'
- '503 Service Temporarily Unavailable: Tecton is currently unable to process your
  request.'
- '429 Too Many Requests: Metadata exceeded the concurrent request limit, please retry
  later'
- '404 Not Found: Unknown feature_service_name: my_feature_service for workspace:
  prod'
auth_info:
  mentioned_objects:
  - Service Account
  - Workspace
client:
  base_url: '{{baseUrl}}'
  auth:
    type: apikey
    location: header
    header_name: Authorization
  headers:
    Content-Type: application/json
    Accept: application/json
source_metadata: null
