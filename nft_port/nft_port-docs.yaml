resources:
- name: nft_details
  endpoint:
    path: /v0/nfts/{contract_address}/{token_id}
    method: GET
    data_selector: nft
    params:
      chain: ethereum
      refresh_metadata: 'false'
- name: retrieve_contract_nfts
  endpoint:
    path: /v0/nfts/{contract_address}
    method: GET
    data_selector: nfts
    params:
      chain: ethereum
      include: metadata
      page_number: 1
      page_size: 50
      refresh_metadata: false
- name: retrieve_nfts_owned_by_account
  endpoint:
    path: /v0/accounts/{account_address}
    method: GET
    data_selector: data
    params:
      chain: ethereum
      include: metadata
- name: retrieve_contract_nfts
  endpoint:
    path: /v0/nfts/{contract_address}
    method: GET
    data_selector: data
    params:
      chain: ethereum
      include: metadata
- name: retrieve_nft_details
  endpoint:
    path: /v0/nfts/{contract_address}/{token_id}
    method: GET
    data_selector: data
    params:
      chain: ethereum
- name: retrieve_all_nfts
  endpoint:
    path: /v0/nfts
    method: GET
    data_selector: data
    params:
      chain: ethereum
      include: metadata
- name: search
  endpoint:
    path: /v0/search
    method: GET
    data_selector: response
    params:
      chain: all
- name: recommendations
  endpoint:
    path: /v0/recommendations/similar_nfts/urls
    method: POST
    data_selector: response
    params: {}
- name: Retrieve all NFTs
  endpoint:
    path: /nfts
    method: GET
- name: Retrieve NFT details
  endpoint:
    path: /nft-details
    method: GET
- name: deploy_collection_contract
  endpoint:
    path: /v0/contracts/collections
    method: POST
    data_selector: data
- name: deploy_nft_product_contract
  endpoint:
    path: /v0/contracts
    method: POST
    data_selector: data
- name: customizable_minting
  endpoint:
    path: /v0/mints/customizable
    method: POST
    data_selector: data
- name: getInfo
  endpoint:
    path: /getInfo
    method: GET
    data_selector: info
- name: availableSupply
  endpoint:
    path: /availableSupply
    method: GET
    data_selector: availableSupply
- name: balanceOf
  endpoint:
    path: /balanceOf
    method: GET
    data_selector: balanceOf
- name: upload_file
  endpoint:
    path: /v0/files
    method: POST
    data_selector: response
    params: {}
- name: upload_metadata_directory
  endpoint:
    path: /v0/metadata/directory
    method: POST
    data_selector: response
    params: {}
- name: deploy_collection_contract
  endpoint:
    path: /v0/contracts/collections
    method: POST
    data_selector: response
    params: {}
- name: retrieve_deployed_contract
  endpoint:
    path: /v0/contracts/transaction_hash
    method: GET
    data_selector: response
    params:
      chain: polygon
- name: initialize
  endpoint:
    path: /initialize
    method: POST
    data_selector: outputs
    params: {}
- name: isApprovedForAll
  endpoint:
    path: /isApprovedForAll
    method: GET
    data_selector: outputs
    params: {}
- name: isWhitelisted
  endpoint:
    path: /isWhitelisted
    method: GET
    data_selector: outputs
    params: {}
- name: maxSupply
  endpoint:
    path: /maxSupply
    method: GET
    data_selector: outputs
    params: {}
- name: metadataUpdatable
  endpoint:
    path: /metadataUpdatable
    method: GET
    data_selector: outputs
    params: {}
- name: mint
  endpoint:
    path: /mint
    method: POST
    data_selector: outputs
    params: {}
- name: mintingActive
  endpoint:
    path: /mintingActive
    method: GET
    data_selector: outputs
    params: {}
- name: name
  endpoint:
    path: /name
    method: GET
    data_selector: outputs
    params: {}
- name: owner
  endpoint:
    path: /owner
    method: GET
    data_selector: outputs
    params: {}
- name: ownerOf
  endpoint:
    path: /ownerOf
    method: GET
    data_selector: outputs
    params: {}
- name: prerevealTokenURI
  endpoint:
    path: /prerevealTokenURI
    method: GET
    data_selector: outputs
    params: {}
- name: presaleActive
  endpoint:
    path: /presaleActive
    method: GET
    data_selector: outputs
    params: {}
- name: presaleMerkleRoot
  endpoint:
    path: /presaleMerkleRoot
    method: GET
    data_selector: outputs
    params: {}
- name: presaleMint
  endpoint:
    path: /presaleMint
    method: POST
    data_selector: outputs
    params: {}
- name: presaleMintPrice
  endpoint:
    path: /presaleMintPrice
    method: GET
    data_selector: outputs
    params: {}
- name: presaleMintStart
  endpoint:
    path: /presaleMintStart
    method: GET
    data_selector: outputs
    params: {}
- name: publicMintPrice
  endpoint:
    path: /publicMintPrice
    method: GET
    data_selector: outputs
    params: {}
- name: publicMintStart
  endpoint:
    path: /publicMintStart
    method: GET
    data_selector: outputs
    params: {}
- name: reserveRemaining
  endpoint:
    path: /reserveRemaining
    method: GET
    data_selector: outputs
    params: {}
- name: reservedSupply
  endpoint:
    path: /reservedSupply
    method: GET
    data_selector: outputs
    params: {}
- name: symbol
  endpoint:
    path: /symbol
    method: GET
    data_selector: outputs
    params: {}
- name: totalSupply
  endpoint:
    path: /totalSupply
    method: GET
    data_selector: outputs
    params: {}
- name: treasuryAddress
  endpoint:
    path: /treasuryAddress
    method: GET
    data_selector: outputs
    params: {}
- name: contracts
  endpoint:
    path: /v0/contracts
    method: POST
    data_selector: ''
    params: {}
- name: files
  endpoint:
    path: /v0/files
    method: POST
    data_selector: ''
    params: {}
- name: metadata
  endpoint:
    path: /v0/metadata
    method: POST
    data_selector: ''
    params: {}
- name: mints
  endpoint:
    path: /v0/mints/customizable
    method: POST
    data_selector: ''
    params: {}
- name: contracts
  endpoint:
    path: /v0/contracts
    method: POST
    data_selector: null
    params: {}
- name: files
  endpoint:
    path: /v0/files
    method: POST
    data_selector: null
    params: {}
- name: metadata
  endpoint:
    path: /v0/metadata
    method: POST
    data_selector: null
    params: {}
- name: mints
  endpoint:
    path: /v0/mints/customizable
    method: POST
    data_selector: null
    params: {}
- name: contracts
  endpoint:
    path: /v0/contracts
    method: POST
- name: metadata
  endpoint:
    path: /v0/metadata
    method: POST
- name: mints
  endpoint:
    path: /v0/mints/customizable
    method: POST
- name: accounts
  endpoint:
    path: /v0/accounts/
    method: GET
- name: nfts
  endpoint:
    path: /v0/nfts/{contract_address}/{token_id}
    method: GET
- name: wallet
  endpoint:
    path: /wallet
    method: POST
    data_selector: address
    params: {}
- name: retrieve_contract_nfts
  endpoint:
    path: /v0/nfts/{contract_address}
    method: GET
    data_selector: nfts
    params:
      chain: ethereum
      page_number: 1
      page_size: 50
      include: metadata
      refresh_metadata: false
- name: nfts_owned
  endpoint:
    path: /v0/accounts/{account_address}
    method: GET
    data_selector: nfts
    params:
      chain: ethereum
      page_size: 50
      include: metadata
- name: contracts_owned_by_account
  endpoint:
    path: /v0/accounts/contracts/{account_address}
    method: GET
    data_selector: contracts
    params:
      chain: ethereum
      type: owns_contract_nfts
      page_size: 20
- name: transactions
  endpoint:
    path: /v0/transactions/accounts/{account_address}
    method: GET
    data_selector: transactions
    params:
      chain: ethereum
      page_size: 20
      type: all
- name: transactions_by_nft
  endpoint:
    path: /v0/transactions/nfts/{contract_address}/{token_id}
    method: GET
    data_selector: transactions
    params:
      chain: ethereum
      page_size: 20
      type: all
- name: transactions
  endpoint:
    path: /v0/transactions/nfts/{contract_address}
    method: GET
    data_selector: transactions
    params:
      chain: ethereum
      page_size: 20
      type: all
- name: contract_sales_statistics
  endpoint:
    path: /transactions/stats/{contract_address}
    method: GET
    data_selector: response
    params:
      chain: ethereum
- name: update_nft_product_contract
  endpoint:
    path: /contracts
    method: PUT
    data_selector: response
    params: {}
- name: deploy_contract
  endpoint:
    path: /contracts
    method: POST
    data_selector: response
    params: {}
- name: retrieve_deployed_contract
  endpoint:
    path: /v0/contracts/{transaction_hash}
    method: GET
    data_selector: response
    params:
      chain: polygon
- name: minted_nft
  endpoint:
    path: /v0/mints/{transaction_hash}
    method: GET
    data_selector: response
    params:
      chain: polygon
- name: update_collection_contract
  endpoint:
    path: /v0/contracts/collections
    method: PUT
    data_selector: response
    params: {}
- name: deploy_nft_collection_contract
  endpoint:
    path: /contracts/collections
    method: POST
    data_selector: response
    params: {}
- name: upload_file_to_ipfs
  endpoint:
    path: /v0/files
    method: POST
    data_selector: response
    params: {}
- name: upload_metadata
  endpoint:
    path: /v0/metadata
    method: POST
- name: upload_metadata_directory
  endpoint:
    path: /v0/metadata/directory
    method: POST
    data_selector: response
    params: {}
- name: update_minted_nft
  endpoint:
    path: /v0/mints/customizable
    method: PUT
    data_selector: response
    params: {}
- name: customizable_minting
  endpoint:
    path: /v0/mints/customizable
    method: POST
- name: burn_minted_nft
  endpoint:
    path: /v0/mints/customizable
    method: DELETE
    data_selector: response
    params:
      chain: string
      contract_address: string
      token_id: string
      max_transaction_fee: number
- name: transfer_minted_nft
  endpoint:
    path: /v0/mints/transfers
    method: POST
    data_selector: response
    params: {}
- name: batch_customizable_minting
  endpoint:
    path: /v0/mints/customizable/batch
    method: POST
- name: retrieve_batch_minted_nfts
  endpoint:
    path: /v0/mints/batch/{transaction_hash}
    method: GET
- name: batch_burn_minted_nfts
  endpoint:
    path: /v0/mints/customizable/batch
    method: DELETE
    data_selector: response
    params:
      chain: polygon
- name: batch_transfer_minted_nfts
  endpoint:
    path: /v0/mints/transfers/batch
    method: POST
- name: batch_minted_nfts
  endpoint:
    path: /v0/mints/batch/{transaction_hash}
    method: GET
    data_selector: response
    params:
      chain: polygon
- name: easy_minting
  endpoint:
    path: /v0/mints/easy/urls
    method: POST
    data_selector: response
    params: {}
- name: easy_minting_file_upload
  endpoint:
    path: /v0/mints/easy/files
    method: POST
    data_selector: response
    params:
      chain: polygon
      name: NFT_Name
      description: NFT_Description
      mint_to_address: Wallet_Address
- name: deployed_product_contracts
  endpoint:
    path: /v0/me/contracts
    method: GET
    data_selector: contracts
- name: contract_abi
  endpoint:
    path: /v0/me/contracts/abis/{contract_address}
    method: GET
    data_selector: response
    params:
      chain: polygon
- name: collection_contracts
  endpoint:
    path: /v0/me/contracts/collections
    method: GET
    params:
      chain: polygon
      include: default
- name: minted_nfts
  endpoint:
    path: /v0/me/mints
    method: GET
    params:
      page_number: 1
      page_size: 50
- name: ipfs_uploads
  endpoint:
    path: /v0/me/storage
    method: GET
    data_selector: storage
    params:
      page_number: '1'
- name: user_settings
  endpoint:
    path: /v0/me/settings
    method: GET
    data_selector: response
- name: multi-chain_contract_search
  endpoint:
    path: /search/contracts
    method: GET
    data_selector: contracts
    params:
      chain:
      - ethereum
      - polygon
      page_size: 10
- name: multi_chain_nft_search
  endpoint:
    path: /v0/search
    method: GET
    data_selector: nfts
    params:
      text: required
      chain: all
      page_number: '1'
      page_size: '50'
      order_by: relevance
      sort_order: desc
- name: contract_nfts
  endpoint:
    path: /v0/nfts/{contract_address}
    method: GET
    data_selector: nfts
    params:
      chain: ethereum
      page_number: 1
      page_size: 50
      include:
      - metadata
      refresh_metadata: false
- name: nfts_owned
  endpoint:
    path: /v0/accounts/{account_address}
    method: GET
    data_selector: nfts
    params:
      chain: ethereum
      page_size: 50
      include: metadata
- name: transactions
  endpoint:
    path: /v0/transactions/accounts/{account_address}
    method: GET
    params:
      chain: ethereum
      page_size: 20
      type: all
- name: update_nft_product_contract
  endpoint:
    path: /v0/contracts
    method: PUT
    data_selector: response
    params: {}
- name: update_deployed_collection_contract
  endpoint:
    path: /v0/contracts/collections
    method: PUT
    data_selector: response
    params: {}
- name: upload_file_to_ipfs
  endpoint:
    path: /v0/files
    method: POST
    data_selector: response
    params: {}
- name: update_minted_nft
  endpoint:
    path: /v0/mints/customizable
    method: PUT
- name: batch_customizable_minting
  endpoint:
    path: /v0/mints/customizable/batch
    method: POST
- name: easy_minting
  endpoint:
    path: /v0/mints/easy/urls
    method: POST
- name: deployed_product_contracts
  endpoint:
    path: /v0/me/contracts
    method: GET
    data_selector: contracts
- name: multi-chain_contract_search
  endpoint:
    path: /search/contracts
    method: GET
    data_selector: contracts
    params:
      chain:
      - ethereum
      - polygon
      page_size: 10
notes:
- Defaults to 0xbc4ca0eda7647a8ab7c2061c2e118a18a936f13d for contract_address
- Defaults to 567 for token_id
- Defaults to ethereum for chain
- Can be set to include the NFT metadata, file_information, rarity, last_sale_price
  or all.
- Unfortunately, due to a lack of growth in usage and adoption of the service, we
  have decided to deprecate the Solana API endpoints on 27th February 2023.
- 'All NFTPort APIs use a single authentication scheme: an API key passed in the HTTP
  request header.'
- NFTPort employs rate limits as safeguards so that the API stays stable under traffic
  spikes.
- Ethereum product contract currently supports only ERC-721 tokens.
- No ETH necessary and no need to spend money.
- 'Zero maintenance: no need to write and deploy a solidity contract.'
- Make sure to replace the `address` param in the HTML code with your contract address
  to allow users to mint your collection.
- To enable whitelisted minting for a pre-sale, you have to generate proofs using
  Merkle Trees.
- Deploying on Polygon is free but max token supply is capped at 5000 for free tier
  users.
- If you want to mint on Ethereum mainnet, you need to be a subscribed to the Growth
  or Scale tier.
- The minting price paid by the user will be transferred to the balance and can be
  withdrawn to the treasury_address at any time.
- Set metadata_updatable as true so that the metadata of the NFT can be changed as
  required.
- Requires user to create a Metamask wallet
- Users must install Node.js
- Defaults to 50 results per page.
- Account address from which to fetch NFTs is required.
- 'URL Expired: The URL for this request expired after 30 days.'
- Returns all on-chain transactions as well as Seaport listings for the specified
  account address.
- Defaults to contract address 0xbc4ca0eda7647a8ab7c2061c2e118a18a936f13d
- Defaults to Ethereum blockchain.
- Retrieve in-depth sales statistics about a contract from OpenSea. Includes statistics
  such as floor price, total volume, sales, etc. Updated with 1-hour interval.
- The URL for this request expired after 30 days.
- As blockchains can take a few seconds up to a few minutes to sync, this endpoint
  can be polled until the contract_address is returned.
- Ethereum contract updates are available only on the Growth or Scale tier and you
  will be charged immediately on request and if the transaction fails for any reason
  the amount will be refunded.
- You can deploy up to 5 contracts for free on each of Polygon and Goerli, and max_supply
  is limited to less than or equal to 5,000 NFTs for collection contracts deployed
  on the Free plan.
- Supports all file types and maximum file size is 50MB.
- Uploads NFT metadata to IPFS as a JSON file which is the standard format for NFT
  metadata.
- We recommend using IPFS because it’s an industry standard for decentralized storage.
- Supports only files with MIME type as application/json.
- Maximum number of files that can be uploaded together is 25,000 and maximum total
  file size is 50MB.
- Updates an NFT which has been previously minted with Customizable minting or Batch
  customizable minting.
- The NFT must be minted in your deployed contract and update only works if contract
  and token are not frozen.
- You can mint up to 100 NFTs for free per chain. Maximum supported filesize is 50MB.
- Burning is possible only if the token is owned by the contract owner and the token
  has not been transferred/sold yet.
- Transferring is possible only if the token is owned by the contract owner and the
  token has not been transferred/sold yet.
- Batch minting allows you to create multiple NFTs with one API call.
- You can mint up to 100 NFTs for free per chain.
- Maximum supported file size is 50MB.
- Can return merkle proofs of all the whitelisted addresses with include set to merkle_proofs.
- For recently minted NFTs, it may take a few minutes until they appear in this response.
- Only lists IPFS uploads created after 2022-03-21T12:10:00 UTC.
- Retrieve your NFTPort settings to check your usage and limits.
- Returns all on-chain transactions for the specified account address.
- If you wish to list all your previously deployed contracts, see List all your deployed
  contracts.
- You can mint up to 100 NFTs for free per chain. Maximum supported file size is 50MB.
errors:
- 'authorization_missing: Your request is missing an API key. Add your API key to
  the Authorization: header.'
- 'invalid_api_key: You''re using an incorrectly formatted API key. Make sure the
  key is formatted as a valid UUID.'
- 'invalid_credentials: The API key you''re using does not correspond to any NFTPort
  account. Check if you''re using the correct API key.'
- 'account_suspended: Your API key is valid but your account is suspended. Please
  reach out to NFTPort support for more information.'
- 'invalid_address: You provided an invalid address. Check that the wallet and contract
  addresses you''re sending are valid EVM addresses.'
- 'chain_not_supported: This chain is not supported for this endpoint. Check which
  features are support for each chain.'
- 'invalid_date: You provided an invalid date. Check that you''re providing valid
  ISO-formatted date.'
- 'invalid_continuation_string: You provided an invalid continuation string. Make
  sure you''re using the correct continuation string you received from a previous
  request.'
- 'page_number_not_supported: Paging by page number is not supported for this endpoint.
  Switch to using continuation strings.'
- 'value_error: You provided an invalid value. See error message for details.'
- 'invalid_enumeration: You provided an invalid choice for a parameter. See error
  message for list of allowed values.'
- 'parameter_missing: The request is missing a required parameter. See error message
  for details and please make sure the parameter is present.'
- 'invalid_type: You provided a value of invalid type. See error message for details.'
- 'invalid_url: You provided an invalid URL. Make sure the input you provided is a
  valid URL.'
- 'invalid_file_type: The input file type you provided is not supported. See error
  message for supported file types.'
- 'invalid_attribute_value: You provided an invalid NFT metadata attribute value.
  See error message for details.'
- 'invalid_token_id: You provided an invalid token ID. See error message for details.'
- 'invalid_token_quantity: You provided an invalid token quantity. Make sure the token
  quantity is a positive integer.'
- 'invalid_transaction_hash: You provided an invalid transaction hash. Check that
  you''re providing a correctly formatted transaction hash.'
- 'request_too_large: The request contains too much data to write onto the blockchain
  in one request. Please reduce the number of tokens in your request.'
- 'mint_limit_exceeded: You''ve reached the maximum number of NFTs possible to mint
  on your account (in this billing period). Please see Quotas or check your usage
  in the dashboard.'
- 'contract_limit_exceeded: You''ve reached the maximum number of contracts possible
  to deploy on your account (in this billing period). Please see Quotas or check your
  usage in the dashboard.'
- 'transaction_limit_exceeded: You''ve reached the maximum number of transactions
  possible to make on your account (in this billing period). Please see Quotas or
  check your usage in the dashboard.'
- 'too_many_requests: Too many requests hit the API too quickly. Make your requests
  at a lower rate. See Rate limits.'
- 'invalid_request: The request you made was invalid. Please see error message for
  a description of the problem.'
- 'contract_not_supported: The contract does not support the action you requested.
  Check which actions are disabled on your contract, deploy a new contract, or reach
  out to NFTPort support.'
- 'failed_to_fetch_file: We failed to fetch the URL you supplied. Please make sure
  the URL is correct and a file is available at this URL.'
- 'too_many_files: You attempted to upload more files in a single request than the
  endpoint allows. Please reduce the number of files in your request.'
- 'transaction_failed: The transaction (e.g. contract deployment) failed. Please retry
  the transaction.'
- 'forbidden: This action is forbidden on this resource. Please see error message
  for details.'
- 'not_found: The requested resource was not found. Make sure your request parameters
  are correct.'
- 'transaction_pending: The transaction is not yet recorded on chain. Please check
  again in a few seconds.'
- 'method_not_allowed: You attempted to use a HTTP method the endpoint doesn''t support
  (e.g. made a GET request to a POST-only endpoint). Make sure you''re using the correct
  method.'
- 'internal_server_error: An unexpected error occurred when processing your request.
  Please reach out to NFTPort support.'
- 'bad_gateway: An external service returned an error, causing your request to fail.
  Please reach out to NFTPort support.'
- 'too_many_pending_transactions: Due to high load, there are too many on-chain transactions
  queued. Please try again shortly or reach out to NFTPort support.'
- 'gas_price_too_high: Due to high gas fees on the network, your request was rejected.
  Please try again when gas fees are lower or reach out to NFTPort support.'
- '429: Rate limit exceeded'
- ApprovalCallerNotOwnerNorApproved
- ApprovalQueryForNonexistentToken
- ApprovalToCurrentOwner
- ApproveToCaller
- BalanceQueryForZeroAddress
- MintToZeroAddress
- MintZeroQuantity
- OwnerQueryForNonexistentToken
- TransferCallerNotOwnerNorApproved
- TransferFromIncorrectOwner
- TransferToNonERC721ReceiverImplementer
- TransferToZeroAddress
- 'REQUEST_LIMIT_EXCEEDED: Throttle API calls or reduce frequency'
- 'QUERY_TIMEOUT: Break down filters or add selectivity'
- '401 Unauthorized: Recheck API key or token expiration'
- '401 Unauthorized: Recheck API key'
- The request failed
- '400 Bad Request: Check request format and body'
- '401 Unauthorized: Verify API key or token'
- '200: A JSON object with an `nfts` property that contains an array of up to `page_size`
  NFTs.'
- '401: Unauthorized, ensure valid API key.'
- '200: OK'
- 'NOK: Response status indicates an error.'
- '200: A JSON object with `transactions` property'
- '200: A JSON object with transactions property.'
- 'NOK: Response status indicating failure.'
- 200 Returns transaction hash which can be used to confirm that the transaction was
  successful.
- 200 Chain and contract address of the deployed contract.
- '200: The details of the uploaded file and the IPFS URL.'
- '200: The details of the NFT metadata and the uploaded metadata URI.'
- 'URL Expired: The URL for this request expired after 30 days.'
- '200: The IPFS URI of the uploaded directory.'
- 'REQUEST_LIMIT_EXCEEDED: Maximum upload limit exceeded.'
- '200: Returns contract address and the transaction hash which can be used to receive
  the token ID and confirm that the minting was successful.'
- 200 Returns transaction hash which can be used to confirm that the transaction was
  successful
- '200: Returns contract address and the transaction hash.'
- '200: Returns transaction hash which can be used to confirm that the transaction
  was successful.'
- '401 Unauthorized: Recheck OAuth scopes or token expiration'
- '200: Returns contract address and the transaction hash which can be used in Return
  minted NFT to receive the token ID and confirm that the minting was successful.'
- 200 List of all collection contracts you have deployed.
- 200 Your API usage and limits.
- '200: A JSON object with `transactions` property that contains an array of transactions.'
- URL Expired
auth_info:
  mentioned_objects: []
client:
  base_url: https://api.nftport.xyz
  headers:
    Accept: application/json
source_metadata: null
