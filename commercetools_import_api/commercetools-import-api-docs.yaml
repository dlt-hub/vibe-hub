resources:
- name: Project
  endpoint:
    path: /{projectKey}/
    method: GET
    data_selector: key
- name: Project settings
  endpoint:
    path: /{projectKey}/
    method: GET
    data_selector: project settings
    params: {}
- name: customers
  endpoint:
    path: /{projectKey}/customers
    method: GET
    data_selector: records
- name: products
  endpoint:
    path: /{projectKey}/products
    method: GET
    data_selector: records
- name: orders
  endpoint:
    path: /{projectKey}/orders
    method: GET
    data_selector: records
- name: customers
  endpoint:
    path: /{projectKey}/customers
    method: GET
- name: products
  endpoint:
    path: /{projectKey}/products
    method: GET
- name: orders
  endpoint:
    path: /{projectKey}/orders
    method: GET
- name: TypedMoney
  endpoint:
    path: /api/graphql
    method: GET
    data_selector: TypedMoney
    params: {}
- name: CentPrecisionMoney
  endpoint:
    path: /api/graphql
    method: GET
    data_selector: CentPrecisionMoney
    params: {}
- name: HighPrecisionMoney
  endpoint:
    path: /api/graphql
    method: GET
    data_selector: HighPrecisionMoney
    params: {}
- name: TypedMoney
  endpoint:
    path: /api/graphql
    method: GET
    data_selector: TypedMoney
- name: CentPrecisionMoney
  endpoint:
    path: /api/graphql
    method: GET
    data_selector: CentPrecisionMoney
- name: HighPrecisionMoney
  endpoint:
    path: /api/graphql
    method: GET
    data_selector: HighPrecisionMoney
- name: TypedMoneyDraft
  endpoint:
    path: /api/graphql
    method: POST
    data_selector: TypedMoneyDraft
- name: Money
  endpoint:
    path: /api/graphql
    method: POST
    data_selector: Money
- name: HighPrecisionMoneyDraft
  endpoint:
    path: /api/graphql
    method: POST
    data_selector: HighPrecisionMoneyDraft
- name: carts
  endpoint:
    path: /api/projects/carts
    method: GET
    data_selector: records
- name: cartDiscounts
  endpoint:
    path: /api/projects/cartDiscounts
    method: GET
    data_selector: records
- name: customers
  endpoint:
    path: /api/projects/customers
    method: GET
    data_selector: records
- name: cart
  endpoint:
    path: /api/projects/carts
    method: GET
    data_selector: records
- name: cart_discount
  endpoint:
    path: /api/projects/cartDiscounts
    method: GET
    data_selector: records
- name: customer
  endpoint:
    path: /api/projects/customers
    method: GET
    data_selector: records
- name: search_query
  endpoint:
    path: /api/search-query-language
    method: POST
    data_selector: results
- name: Order
  endpoint:
    path: /api/projects/orders
    method: GET
    data_selector: orders
    params: {}
- name: ShoppingList
  endpoint:
    path: /api/projects/shoppingLists
    method: GET
    data_selector: shoppingLists
    params: {}
- name: CustomObject
  endpoint:
    path: /api/projects/custom-objects
    method: GET
    data_selector: customObjects
    params: {}
- name: Product Search
  endpoint:
    path: /api/projects/product-search
    method: POST
    data_selector: results
    params: {}
- name: Customer Search
  endpoint:
    path: /api/projects/customer-search
    method: POST
    data_selector: results
    params: {}
- name: Order Search
  endpoint:
    path: /api/projects/order-search
    method: POST
    data_selector: results
    params: {}
- name: Business Unit Search
  endpoint:
    path: /api/projects/business-unit-search
    method: POST
    data_selector: results
    params: {}
- name: customers
  endpoint:
    path: /graphql
    method: POST
    data_selector: customers
    params:
      where: firstName="John"
      sort: lastName asc
      limit: 5
      offset: 1
- name: customer
  endpoint:
    path: /graphql
    method: POST
    data_selector: customer
    params:
      id: '{customerID}'
- name: customer
  endpoint:
    path: /customers
    method: POST
    data_selector: results
- name: customers
  endpoint:
    path: /customers
    method: GET
    data_selector: results
    params:
      where: firstName="John"
      sort: lastName asc
      limit: 5
      offset: 1
- name: customer
  endpoint:
    path: /customer
    method: GET
    data_selector: results
    params:
      id: '{customerID}'
- name: discount_code
  endpoint:
    path: /discount-codes
    method: POST
    data_selector: data
    params: {}
- name: customer
  endpoint:
    path: /customers
    method: GET
    data_selector: data
    params: {}
- name: customers
  endpoint:
    path: /customers
    method: POST
    data_selector: customers
    params:
      where: firstName="John"
      sort: lastName asc
      limit: 5
      offset: 1
- name: customer
  endpoint:
    path: /customer
    method: POST
    data_selector: customer
    params:
      id: '{customerID}'
- name: createDiscountCode
  endpoint:
    path: /createDiscountCode
    method: POST
    data_selector: createDiscountCode
    params: {}
- name: deactivateDiscountCode
  endpoint:
    path: /deactivateDiscountCode
    method: POST
    data_selector: updateDiscountCode
    params:
      version: 1
      id: '{discountCodeID}'
      actions:
      - changeIsActive:
          isActive: false
- name: customers
  endpoint:
    path: /graphql
    method: POST
    data_selector: data.customers
    params: {}
- name: category
  endpoint:
    path: /graphql
    method: POST
    data_selector: data.category
    params: {}
- name: customObject
  endpoint:
    path: /graphql
    method: POST
    data_selector: data.customObject
    params: {}
- name: product
  endpoint:
    path: /graphql
    method: POST
    data_selector: data.product
    params: {}
- name: customers
  endpoint:
    path: /customers
    method: POST
    data_selector: customers
    params:
      where: firstName="John"
      sort: lastName asc
      limit: 5
      offset: 1
- name: customer
  endpoint:
    path: /customer
    method: POST
    data_selector: customer
    params:
      id: '{customerID}'
- name: customers
  endpoint:
    path: /customers
    method: POST
    data_selector: results
    params:
      where: firstName="John"
      sort: lastName asc
      limit: 5
      offset: 1
- name: customers
  endpoint:
    path: /graphql
    method: POST
    data_selector: data.customers.results
    params:
      where: firstName="John"
      sort: lastName asc
      limit: 5
      offset: 1
- name: customer
  endpoint:
    path: /graphql
    method: POST
    data_selector: data.customer
    params:
      id: '{customerID}'
- name: customers
  endpoint:
    path: /customers
    method: POST
    data_selector: customers.results
    params:
      where: firstName="John"
      sort: lastName asc
      limit: 5
      offset: 1
- name: customer
  endpoint:
    path: /customer
    method: POST
    data_selector: customer
    params:
      id: '{customerID}'
- name: createDiscountCode
  endpoint:
    path: /createDiscountCode
    method: POST
    data_selector: createDiscountCode
    params: {}
- name: deactivateDiscountCode
  endpoint:
    path: /deactivateDiscountCode
    method: POST
    data_selector: deactivateDiscountCode
    params: {}
- name: deleteDiscountCode
  endpoint:
    path: /deleteDiscountCode
    method: POST
    data_selector: deleteDiscountCode
    params: {}
- name: DeactivateDiscountCode
  endpoint:
    path: /graphql
    method: POST
    data_selector: data.customers.exists
    params: {}
- name: checkIfResourceExistsById
  endpoint:
    path: /graphql
    method: POST
    data_selector: data.customers.exists
    params: {}
- name: checkIfResourceExistsByKey
  endpoint:
    path: /graphql
    method: POST
    data_selector: data.customers.exists
    params: {}
- name: checkIfResourceExistsByQueryPredicate
  endpoint:
    path: /graphql
    method: POST
    data_selector: data.customers.exists
    params: {}
- name: productProjectionSearch
  endpoint:
    path: /api/projects/product-search
    method: POST
    data_selector: data.productProjectionSearch
- name: productProjectionsSuggest
  endpoint:
    path: /api/projects/search-term-suggestions
    method: POST
    data_selector: data.productProjectionsSuggest.searchKeywords
    params: {}
- name: customers
  endpoint:
    path: /graphql
    method: POST
    data_selector: customers
    params:
      where: firstName="John"
      sort: lastName asc
      limit: 5
      offset: 1
- name: customer_by_id
  endpoint:
    path: /graphql
    method: POST
    data_selector: customer
    params:
      id: '{customerID}'
- name: create_discount_code
  endpoint:
    path: /graphql
    method: POST
    data_selector: createDiscountCode
    params: {}
- name: deactivate_discount_code
  endpoint:
    path: /graphql
    method: POST
    data_selector: updateDiscountCode
    params:
      version: 1
      id: '{discountCodeID}'
      actions:
      - changeIsActive:
          isActive: false
- name: customers
  endpoint:
    path: /customers
    method: HEAD
    data_selector: exists
    params: {}
- name: category
  endpoint:
    path: /category
    method: GET
    data_selector: children
    params: {}
- name: customObject
  endpoint:
    path: /customObject
    method: GET
    data_selector: referencedResources
    params: {}
- name: customers
  endpoint:
    path: /customers
    method: POST
    data_selector: customers
    params:
      where: firstName="John"
      sort: lastName asc
      limit: 5
      offset: 1
- name: customer
  endpoint:
    path: /customer
    method: POST
    data_selector: customer
    params:
      id: '{customerID}'
- name: createDiscountCode
  endpoint:
    path: /createDiscountCode
    method: POST
    data_selector: createDiscountCode
    params: {}
- name: deactivateDiscountCode
  endpoint:
    path: /deactivateDiscountCode
    method: POST
    data_selector: deactivateDiscountCode
    params: {}
- name: deleteDiscountCode
  endpoint:
    path: /deleteDiscountCode
    method: POST
    data_selector: deleteDiscountCode
    params:
      version: 1
      id: '{discountCodeID}'
- name: product
  endpoint:
    path: /products
    method: POST
    data_selector: results
    params: {}
- name: product_projection
  endpoint:
    path: /graphql
    method: POST
    data_selector: data.productProjectionSearch.results
    params: {}
- name: productProjectionsSuggest
  endpoint:
    path: /api/projects/search-term-suggestions
    method: POST
    data_selector: data.productProjectionsSuggest
- name: carts
  endpoint:
    path: /carts
    method: POST
- name: cart_updates
  endpoint:
    path: /carts/{id}
    method: POST
- name: customers
  endpoint:
    path: /customers
    method: POST
    data_selector: results
    params:
      where: firstName="John"
      sort: lastName asc
      limit: 5
      offset: 1
- name: customer_by_id
  endpoint:
    path: /customer/{customerID}
    method: POST
    data_selector: customer
    params: {}
- name: create_discount_code
  endpoint:
    path: /createDiscountCode
    method: POST
    data_selector: createDiscountCode
    params: {}
- name: deactivate_discount_code
  endpoint:
    path: /deactivateDiscountCode
    method: POST
    data_selector: updateDiscountCode
    params: {}
- name: delete_discount_code
  endpoint:
    path: /deleteDiscountCode
    method: POST
    data_selector: deleteDiscountCode
    params: {}
- name: check_resource_exists_by_id
  endpoint:
    path: /checkIfResourceExistsById
    method: POST
    data_selector: customers.exists
    params:
      where: id="ba5f454f-dab5-4f95-802f-f1c285be7167"
- name: check_resource_exists_by_key
  endpoint:
    path: /checkIfResourceExistsByKey
    method: POST
    data_selector: customers.exists
    params:
      where: key="a-customer-key"
- name: check_resource_exists_by_query_predicate
  endpoint:
    path: /checkIfResourceExistsByQueryPredicate
    method: POST
    data_selector: customers.exists
    params:
      where: firstName="John" and lastName="Smith"
- name: productProjectionsSuggest
  endpoint:
    path: /api/projects/search-term-suggestions
    method: POST
    data_selector: data.productProjectionsSuggest.searchKeywords
    params: {}
- name: customers
  endpoint:
    path: /customers
    method: GET
    data_selector: results
    params:
      where: firstName="John"
      sort: lastName asc
      limit: 5
      offset: 1
- name: customer
  endpoint:
    path: /customer/{customerID}
    method: GET
    data_selector: results
    params: {}
- name: discount_code
  endpoint:
    path: /discount_code
    method: POST
    data_selector: createDiscountCode
    params: {}
- name: delete_discount_code
  endpoint:
    path: /delete_discount_code
    method: DELETE
    data_selector: deleteDiscountCode
    params: {}
- name: productProjectionSearch
  endpoint:
    path: /productProjectionSearch
    method: POST
    data_selector: data
    params: {}
- name: productProjectionsSuggest
  endpoint:
    path: /api/projects/search-term-suggestions
    method: POST
    data_selector: data.productProjectionsSuggest.searchKeywords
    params: {}
- name: api-client
  endpoint:
    path: /api-clients
    method: POST
    data_selector: results
- name: get-api-client
  endpoint:
    path: /api-clients/{id}
    method: GET
    data_selector: results
- name: query-api-clients
  endpoint:
    path: /api-clients
    method: GET
    data_selector: results
- name: api_client
  endpoint:
    path: /api-clients/{id}
    method: DELETE
    data_selector: ApiClient
- name: carts
  endpoint:
    path: /carts
    method: POST
    data_selector: records
- name: cart_updates
  endpoint:
    path: /carts/{id}
    method: POST
    data_selector: records
- name: customer
  endpoint:
    path: /api/projects/customers
    method: GET
- name: cart
  endpoint:
    path: /api/projects/carts
    method: GET
- name: order
  endpoint:
    path: /api/projects/orders
    method: GET
- name: payment
  endpoint:
    path: /api/projects/payments
    method: GET
- name: review
  endpoint:
    path: /api/projects/reviews
    method: GET
- name: shopping_list
  endpoint:
    path: /api/projects/shoppingLists
    method: GET
- name: discount_code
  endpoint:
    path: /api/projects/cartDiscounts
    method: GET
- name: custom_object
  endpoint:
    path: /api/projects/custom-objects
    method: GET
- name: message
  endpoint:
    path: /api/projects/messages
    method: GET
- name: business_unit
  endpoint:
    path: /api/projects/business-units
    method: GET
- name: quote
  endpoint:
    path: /api/projects/quotes
    method: GET
- name: quote_request
  endpoint:
    path: /api/projects/quote-requests
    method: GET
- name: staged_quote
  endpoint:
    path: /api/projects/staged-quotes
    method: GET
- name: Project
  endpoint:
    path: /{projectKey}
    method: GET
    data_selector: Project
    params: {}
- name: customer_profile
  endpoint:
    path: /api/projects/me-profile
    method: GET
    data_selector: profile
- name: business_units
  endpoint:
    path: /api/projects/business-units
    method: GET
    data_selector: businessUnits
- name: orders
  endpoint:
    path: /api/projects/me-orders
    method: GET
    data_selector: orders
- name: payments
  endpoint:
    path: /api/projects/me-payments
    method: GET
    data_selector: payments
- name: shopping_lists
  endpoint:
    path: /api/projects/me-shoppingLists
    method: GET
    data_selector: shoppingLists
- name: quote_requests
  endpoint:
    path: /api/projects/me-quote-requests
    method: GET
    data_selector: quoteRequests
- name: quotes
  endpoint:
    path: /api/projects/me-quotes
    method: GET
    data_selector: quotes
- name: project
  endpoint:
    path: /{projectKey}
    method: POST
    data_selector: ''
    params: {}
- name: api-client
  endpoint:
    path: /api-clients
    method: GET
- name: Channel
  endpoint:
    path: /channels/{id}
    method: GET
- name: Channel by Key
  endpoint:
    path: /channels/key={key}
    method: GET
- name: Query Channels
  endpoint:
    path: /channels
    method: GET
    params:
      limit: 20
      offset: 0
- name: api_client
  endpoint:
    path: /api-clients/{id}
    method: DELETE
    data_selector: ApiClient
    params: {}
- name: channel
  endpoint:
    path: /channels/{id}
    method: HEAD
- name: channel_by_key
  endpoint:
    path: /channels/key={key}
    method: HEAD
- name: channels
  endpoint:
    path: /channels
    method: HEAD
- name: create_channel
  endpoint:
    path: /channels
    method: POST
- name: update_channel_by_id
  endpoint:
    path: /channels/{id}
    method: POST
- name: update_channel_by_key
  endpoint:
    path: /channels/key={key}
    method: POST
- name: delete_channel_by_id
  endpoint:
    path: /channels/{id}
    method: DELETE
- name: delete_channel
  endpoint:
    path: /channels/key={key}
    method: DELETE
    params:
      version: last seen version of the resource
- name: customer
  endpoint:
    path: /api/projects/customers#get-customer
    method: GET
- name: cart
  endpoint:
    path: /api/projects/carts#get-cart-by-customer-id
    method: GET
- name: order
  endpoint:
    path: /api/projects/orders#query-orders
    method: GET
- name: payment
  endpoint:
    path: /api/projects/payments#query-payments
    method: GET
- name: review
  endpoint:
    path: /api/projects/reviews#query-reviews
    method: GET
- name: shopping_list
  endpoint:
    path: /api/projects/shoppingLists#query-shoppinglists
    method: GET
- name: discount_code
  endpoint:
    path: /api/projects/cartDiscounts#query-cartdiscounts
    method: GET
- name: custom_object
  endpoint:
    path: /api/projects/custom-objects#query-customobjects
    method: GET
- name: business_unit
  endpoint:
    path: /api/projects/business-units#query-businessunits
    method: GET
- name: quote
  endpoint:
    path: /api/projects/quotes#query-quotes
    method: GET
- name: quote_request
  endpoint:
    path: /api/projects/quote-requests#query-quoterequests
    method: GET
- name: staged_quote
  endpoint:
    path: /api/projects/staged-quotes#query-stagedquotes
    method: GET
- name: store
  endpoint:
    path: /stores/{id}
    method: GET
    data_selector: Store
- name: store_by_key
  endpoint:
    path: /stores/key={key}
    method: GET
    data_selector: Store
- name: project
  endpoint:
    path: /{projectKey}
    method: GET
    data_selector: Project
    params: {}
- name: stores
  endpoint:
    path: /stores
    method: GET
    data_selector: results
    params:
      limit: '20'
      offset: '0'
      withTotal: 'true'
- name: store_exists_by_id
  endpoint:
    path: /stores/{id}
    method: HEAD
    data_selector: ''
    params: {}
- name: store_exists_by_key
  endpoint:
    path: /stores/key={key}
    method: HEAD
    data_selector: ''
    params: {}
- name: store_exists_by_query_predicate
  endpoint:
    path: /stores
    method: HEAD
    data_selector: ''
    params: {}
- name: create_store
  endpoint:
    path: /stores
    method: POST
    data_selector: ''
    params: {}
- name: update_store_by_id
  endpoint:
    path: /stores/{id}
    method: POST
    data_selector: ''
    params: {}
- name: update_store_by_key
  endpoint:
    path: /stores/key={key}
    method: POST
    data_selector: ''
    params: {}
- name: project
  endpoint:
    path: /{projectKey}
    method: POST
    data_selector: actions
- name: channel_by_id
  endpoint:
    path: /channels/{id}
    method: GET
- name: channel_by_key
  endpoint:
    path: /channels/key={key}
    method: GET
- name: query_channels
  endpoint:
    path: /channels
    method: GET
    params:
      limit: 20
      offset: 0
- name: delete_store_by_id
  endpoint:
    path: /stores/{id}
    method: DELETE
- name: delete_store_by_key
  endpoint:
    path: /stores/key={key}
    method: DELETE
- name: tax_category
  endpoint:
    path: /tax-categories/{id}
    method: GET
    data_selector: TaxCategory
- name: check_channel_by_id
  endpoint:
    path: /channels/{id}
    method: HEAD
    data_selector: null
    params: {}
- name: check_channel_by_key
  endpoint:
    path: /channels/key={key}
    method: HEAD
    data_selector: null
    params: {}
- name: check_channel_by_query_predicate
  endpoint:
    path: /channels
    method: HEAD
    data_selector: null
    params:
      where: null
- name: create_channel
  endpoint:
    path: /channels
    method: POST
    data_selector: null
    params: {}
- name: update_channel_by_id
  endpoint:
    path: /channels/{id}
    method: POST
    data_selector: null
    params: {}
- name: update_channel_by_key
  endpoint:
    path: /channels/key={key}
    method: POST
    data_selector: null
    params: {}
- name: delete_channel_by_id
  endpoint:
    path: /channels/{id}
    method: DELETE
    data_selector: null
    params:
      version: null
- name: Get TaxCategory by Key
  endpoint:
    path: /tax-categories/key={key}
    method: GET
    data_selector: TaxCategory
- name: Query TaxCategories
  endpoint:
    path: /tax-categories
    method: GET
    data_selector: TaxCategoryPagedQueryResponse
- name: Check if TaxCategory exists by ID
  endpoint:
    path: /tax-categories/{id}
    method: HEAD
- name: Check if TaxCategory exists by Key
  endpoint:
    path: /tax-categories/key={key}
    method: HEAD
- name: Check if TaxCategory exists by Query Predicate
  endpoint:
    path: /tax-categories
    method: HEAD
- name: Create TaxCategory
  endpoint:
    path: /tax-categories
    method: POST
- name: Update TaxCategory by ID
  endpoint:
    path: /tax-categories/{id}
    method: POST
- name: Update TaxCategory by Key
  endpoint:
    path: /tax-categories/key={key}
    method: POST
- name: channel
  endpoint:
    path: /channels/key={key}
    method: DELETE
    params:
      version: last seen version of the resource
- name: tax_category_by_id
  endpoint:
    path: /tax-categories/{id}
    method: DELETE
    params:
      version: last seen version of the resource
- name: tax_category_by_key
  endpoint:
    path: /tax-categories/key={key}
    method: DELETE
    params:
      version: last seen version of the resource
- name: store
  endpoint:
    path: /stores/{id}
    method: GET
    data_selector: Store
- name: store_by_key
  endpoint:
    path: /stores/key={key}
    method: GET
    data_selector: Store
- name: ProductType
  endpoint:
    path: /product-types
    method: GET
    data_selector: results
    params:
      limit: 20
      offset: 0
- name: ProductTypeDraft
  endpoint:
    path: /product-types/draft
    method: POST
    data_selector: result
    params: {}
- name: ProductTypePagedQueryResponse
  endpoint:
    path: /product-types/paged-query
    method: GET
    data_selector: results
    params: {}
- name: stores
  endpoint:
    path: /stores
    method: GET
    data_selector: results
    params:
      limit: 20
      offset: 0
      withTotal: true
- name: check_store_exists_by_id
  endpoint:
    path: /stores/{id}
    method: HEAD
    data_selector: null
    params: {}
- name: check_store_exists_by_key
  endpoint:
    path: /stores/key={key}
    method: HEAD
    data_selector: null
    params: {}
- name: check_store_exists_by_query_predicate
  endpoint:
    path: /stores
    method: HEAD
    data_selector: null
    params: {}
- name: create_store
  endpoint:
    path: /stores
    method: POST
    data_selector: null
    params: {}
- name: update_store_by_id
  endpoint:
    path: /stores/{id}
    method: POST
    data_selector: null
    params: {}
- name: update_store_by_key
  endpoint:
    path: /stores/key={key}
    method: POST
    data_selector: null
    params: {}
- name: product_type
  endpoint:
    path: /product-types
    method: GET
    data_selector: results
- name: product_type_by_id
  endpoint:
    path: /product-types/{id}
    method: GET
    data_selector: ProductType
- name: product_type_by_key
  endpoint:
    path: /product-types/key={key}
    method: GET
    data_selector: ProductType
- name: check_product_type_exists_by_id
  endpoint:
    path: /product-types/{id}
    method: HEAD
- name: check_product_type_exists_by_key
  endpoint:
    path: /product-types/key={key}
    method: HEAD
- name: create_product_type
  endpoint:
    path: /product-types
    method: POST
- name: update_product_type_by_id
  endpoint:
    path: /product-types/{id}
    method: POST
- name: update_product_type_by_key
  endpoint:
    path: /product-types/key={key}
    method: POST
- name: store
  endpoint:
    path: /stores/{id}
    method: DELETE
    data_selector: Store
    params:
      version: last seen version of the resource
- name: store_by_key
  endpoint:
    path: /stores/key={key}
    method: DELETE
    data_selector: Store
    params:
      version: last seen version of the resource
- name: tax_category
  endpoint:
    path: /{projectKey}/tax-categories/{id}
    method: GET
    data_selector: TaxCategory
- name: tax_category
  endpoint:
    path: /tax-categories/key={key}
    method: GET
- name: tax_categories
  endpoint:
    path: /tax-categories
    method: GET
- name: tax_category_exists_by_id
  endpoint:
    path: /tax-categories/{id}
    method: HEAD
- name: tax_category_exists_by_key
  endpoint:
    path: /tax-categories/key={key}
    method: HEAD
- name: tax_category_exists_by_query
  endpoint:
    path: /tax-categories
    method: HEAD
- name: create_tax_category
  endpoint:
    path: /tax-categories
    method: POST
- name: update_tax_category_by_id
  endpoint:
    path: /tax-categories/{id}
    method: POST
- name: update_tax_category_by_key
  endpoint:
    path: /tax-categories/key={key}
    method: POST
- name: tax_category_by_id
  endpoint:
    path: /tax-categories/{id}
    method: DELETE
    data_selector: TaxCategory
    params:
      version: last seen version of the resource
- name: tax_category_by_key
  endpoint:
    path: /tax-categories/key={key}
    method: DELETE
    data_selector: TaxCategory
    params:
      version: last seen version of the resource
- name: Set Key
  endpoint:
    path: /set-key
    method: POST
    data_selector: action
    params: {}
- name: Change Name
  endpoint:
    path: /change-name
    method: POST
    data_selector: action
    params: {}
- name: Change Description
  endpoint:
    path: /change-description
    method: POST
    data_selector: action
    params: {}
- name: Add AttributeDefinition
  endpoint:
    path: /add-attributedefinition
    method: POST
    data_selector: action
    params: {}
- name: Remove AttributeDefinition
  endpoint:
    path: /remove-attributedefinition
    method: POST
    data_selector: action
    params: {}
- name: Change AttributeDefinition Name
  endpoint:
    path: /change-attributedefinition-name
    method: POST
    data_selector: action
    params: {}
- name: Change AttributeDefinition Label
  endpoint:
    path: /change-attributedefinition-label
    method: POST
    data_selector: action
    params: {}
- name: Set AttributeDefinition InputTip
  endpoint:
    path: /set-attributedefinition-inputtip
    method: POST
    data_selector: action
    params: {}
- name: Add PlainEnumValue to AttributeDefinition
  endpoint:
    path: /add-plainenumvalue-to-attributedefinition
    method: POST
    data_selector: action
    params: {}
- name: Add LocalizableEnumValue to AttributeDefinition
  endpoint:
    path: /add-localizableenumvalue-to-attributedefinition
    method: POST
    data_selector: action
    params: {}
- name: Remove EnumValues from AttributeDefinition
  endpoint:
    path: /remove-enumvalues-from-attributedefinition
    method: POST
    data_selector: action
    params: {}
- name: Change the order of AttributeDefinitions
  endpoint:
    path: /change-the-order-of-attributedefinitions
    method: POST
    data_selector: action
    params: {}
- name: Change the order of EnumValues
  endpoint:
    path: /change-the-order-of-enumvalues
    method: POST
    data_selector: action
    params: {}
- name: Change the order of LocalizedEnumValues
  endpoint:
    path: /change-the-order-of-localizedenumvalues
    method: POST
    data_selector: action
    params: {}
- name: Change the key of an EnumValue
  endpoint:
    path: /change-the-key-of-an-enumvalue
    method: POST
    data_selector: action
    params: {}
- name: Change the label of an EnumValue
  endpoint:
    path: /change-the-label-of-an-enumvalue
    method: POST
    data_selector: action
    params: {}
- name: Change the label of a LocalizedEnumValue
  endpoint:
    path: /change-the-label-of-a-localizedenumvalue
    method: POST
    data_selector: action
    params: {}
- name: Change AttributeDefinition IsSearchable
  endpoint:
    path: /change-attributedefinition-issearchable
    method: POST
    data_selector: action
    params: {}
- name: Change AttributeDefinition InputHint
  endpoint:
    path: /change-attributedefinition-inputhint
    method: POST
    data_selector: action
    params: {}
- name: Change AttributeDefinition AttributeConstraint
  endpoint:
    path: /change-attributedefinition-attributeconstraint
    method: POST
    data_selector: action
    params: {}
- name: changeAttributeConstraint
  endpoint:
    path: /changeAttributeConstraint
    method: POST
    data_selector: action
    params:
      attributeName: your-attribute-name
      newValue: None
- name: ProductType
  endpoint:
    path: /product-types
    method: GET
    data_selector: results
- name: ProductTypeDraft
  endpoint:
    path: /product-types/draft
    method: POST
    data_selector: results
- name: ProductTypePagedQueryResponse
  endpoint:
    path: /product-types/paged-query
    method: GET
    data_selector: results
- name: product_type_by_id
  endpoint:
    path: /product-types/{id}
    method: DELETE
    params:
      version: last seen version of the resource
- name: product_type_by_key
  endpoint:
    path: /product-types/key={key}
    method: DELETE
    params:
      version: last seen version of the resource
- name: AttributeGroup
  endpoint:
    path: /{projectKey}/attribute-groups/{id}
    method: GET
- name: AttributeGroupByKey
  endpoint:
    path: /{projectKey}/attribute-groups/key={key}
    method: GET
- name: product_type
  endpoint:
    path: /product-types
    method: GET
    data_selector: results
- name: product_type_by_id
  endpoint:
    path: /product-types/{id}
    method: GET
- name: product_type_by_key
  endpoint:
    path: /product-types/key={key}
    method: GET
- name: check_product_type_exists_by_id
  endpoint:
    path: /product-types/{id}
    method: HEAD
- name: check_product_type_exists_by_key
  endpoint:
    path: /product-types/key={key}
    method: HEAD
- name: create_product_type
  endpoint:
    path: /product-types
    method: POST
- name: update_product_type_by_id
  endpoint:
    path: /product-types/{id}
    method: POST
- name: update_product_type_by_key
  endpoint:
    path: /product-types/key={key}
    method: POST
- name: attribute_groups
  endpoint:
    path: /attribute-groups
    method: GET
    data_selector: results
    params:
      limit: 20
      offset: 0
      withTotal: true
- name: attribute_group_by_id
  endpoint:
    path: /attribute-groups/{id}
    method: HEAD
    data_selector: ''
    params: {}
- name: attribute_group_by_key
  endpoint:
    path: /attribute-groups/key={key}
    method: HEAD
    data_selector: ''
    params: {}
- name: attribute_group_query
  endpoint:
    path: /attribute-groups
    method: HEAD
    data_selector: ''
    params: {}
- name: create_attribute_group
  endpoint:
    path: /attribute-groups
    method: POST
    data_selector: ''
    params: {}
- name: update_attribute_group_by_id
  endpoint:
    path: /attribute-groups/{id}
    method: POST
    data_selector: ''
    params: {}
- name: update_attribute_group_by_key
  endpoint:
    path: /attribute-groups/key={key}
    method: POST
    data_selector: ''
    params: {}
- name: attribute_group_by_id
  endpoint:
    path: /attribute-groups/{id}
    method: DELETE
    data_selector: AttributeGroup
- name: attribute_group_by_key
  endpoint:
    path: /attribute-groups/key={key}
    method: DELETE
    data_selector: AttributeGroup
- name: setKey
  endpoint:
    path: /setKey
    method: POST
    data_selector: ''
    params: {}
- name: changeName
  endpoint:
    path: /changeName
    method: POST
    data_selector: ''
    params: {}
- name: changeDescription
  endpoint:
    path: /changeDescription
    method: POST
    data_selector: ''
    params: {}
- name: addAttributeDefinition
  endpoint:
    path: /addAttributeDefinition
    method: POST
    data_selector: ''
    params: {}
- name: removeAttributeDefinition
  endpoint:
    path: /removeAttributeDefinition
    method: POST
    data_selector: ''
    params: {}
- name: changeAttributeDefinitionName
  endpoint:
    path: /changeAttributeDefinitionName
    method: POST
    data_selector: ''
    params: {}
- name: changeAttributeDefinitionLabel
  endpoint:
    path: /changeAttributeDefinitionLabel
    method: POST
    data_selector: ''
    params: {}
- name: setAttributeDefinitionInputTip
  endpoint:
    path: /setAttributeDefinitionInputTip
    method: POST
    data_selector: ''
    params: {}
- name: addPlainEnumValueToAttributeDefinition
  endpoint:
    path: /addPlainEnumValueToAttributeDefinition
    method: POST
    data_selector: ''
    params: {}
- name: addLocalizableEnumValueToAttributeDefinition
  endpoint:
    path: /addLocalizableEnumValueToAttributeDefinition
    method: POST
    data_selector: ''
    params: {}
- name: removeEnumValuesFromAttributeDefinition
  endpoint:
    path: /removeEnumValuesFromAttributeDefinition
    method: POST
    data_selector: ''
    params: {}
- name: changeAttributeOrderByName
  endpoint:
    path: /changeAttributeOrderByName
    method: POST
    data_selector: ''
    params: {}
- name: changePlainEnumValueOrder
  endpoint:
    path: /changePlainEnumValueOrder
    method: POST
    data_selector: ''
    params: {}
- name: changeLocalizedEnumValueOrder
  endpoint:
    path: /changeLocalizedEnumValueOrder
    method: POST
    data_selector: ''
    params: {}
- name: changeEnumKey
  endpoint:
    path: /changeEnumKey
    method: POST
    data_selector: ''
    params: {}
- name: changePlainEnumValueLabel
  endpoint:
    path: /changePlainEnumValueLabel
    method: POST
    data_selector: ''
    params: {}
- name: changeLocalizedEnumValueLabel
  endpoint:
    path: /changeLocalizedEnumValueLabel
    method: POST
    data_selector: ''
    params: {}
- name: changeIsSearchable
  endpoint:
    path: /changeIsSearchable
    method: POST
    data_selector: ''
    params: {}
- name: changeInputHint
  endpoint:
    path: /changeInputHint
    method: POST
    data_selector: ''
    params: {}
- name: changeAttributeConstraint
  endpoint:
    path: /changeAttributeConstraint
    method: POST
    data_selector: ''
    params: {}
- name: product_type_by_id
  endpoint:
    path: /product-types/{id}
    method: DELETE
    params:
      version: last seen version of the resource
- name: product_type_by_key
  endpoint:
    path: /product-types/key={key}
    method: DELETE
    params:
      version: last seen version of the resource
- name: product
  endpoint:
    path: /api/products
    method: GET
    data_selector: results
- name: attribute_group
  endpoint:
    path: /attribute-groups/{id}
    method: GET
- name: attribute_group_by_key
  endpoint:
    path: /attribute-groups/key={key}
    method: GET
- name: ProductVariant
  endpoint:
    path: /api/projects/products/variants
    method: GET
- name: ProductVariantDraft
  endpoint:
    path: /api/projects/products/variants/draft
    method: POST
- name: ProductVariantKeyReference
  endpoint:
    path: /api/import-export/products/variants/key
    method: GET
- name: Attribute
  endpoint:
    path: /api/projects/products/attributes
    method: GET
- name: Image
  endpoint:
    path: /api/projects/products/images
    method: GET
- name: ProductVariantAvailability
  endpoint:
    path: /api/projects/inventory/products/variantAvailability
    method: GET
- name: attribute_groups
  endpoint:
    path: /attribute-groups
    method: GET
    data_selector: results
    params:
      limit: 20
      offset: 0
      withTotal: true
- name: attribute_group_exists_by_id
  endpoint:
    path: /attribute-groups/{id}
    method: HEAD
- name: attribute_group_exists_by_key
  endpoint:
    path: /attribute-groups/key={key}
    method: HEAD
- name: attribute_group_exists_by_query
  endpoint:
    path: /attribute-groups
    method: HEAD
- name: create_attribute_group
  endpoint:
    path: /attribute-groups
    method: POST
- name: update_attribute_group_by_id
  endpoint:
    path: /attribute-groups/{id}
    method: POST
- name: update_attribute_group_by_key
  endpoint:
    path: /attribute-groups/key={key}
    method: POST
- name: product_by_id
  endpoint:
    path: /products/{id}
    method: GET
- name: product_by_key
  endpoint:
    path: /products/key={key}
    method: GET
- name: attribute_group
  endpoint:
    path: /attribute-groups/{id}
    method: DELETE
    data_selector: AttributeGroup
    params:
      version: last seen version of the resource
- name: attribute_group_by_key
  endpoint:
    path: /attribute-groups/key={key}
    method: DELETE
    data_selector: AttributeGroup
    params:
      version: last seen version of the resource
- name: product
  endpoint:
    path: /products
    method: GET
    data_selector: results
- name: products
  endpoint:
    path: /products
    method: GET
    data_selector: results
    params:
      limit: 20
      offset: 0
- name: product_selections_by_id
  endpoint:
    path: /products/{id}/product-selections
    method: GET
    data_selector: results
- name: product_selections_by_key
  endpoint:
    path: /products/key={key}/product-selections
    method: GET
    data_selector: results
- name: check_product_exists_by_id
  endpoint:
    path: /products/{id}
    method: HEAD
- name: check_product_exists_by_key
  endpoint:
    path: /products/key={key}
    method: HEAD
- name: check_product_exists_by_query_predicate
  endpoint:
    path: /products
    method: HEAD
- name: ProductVariant
  endpoint:
    path: /api/projects/product-variants
    method: GET
    data_selector: records
- name: ProductVariantDraft
  endpoint:
    path: /api/projects/product-variant-drafts
    method: POST
    data_selector: records
- name: ProductVariantKeyReference
  endpoint:
    path: /api/import-export/product-variant-key-references
    method: GET
    data_selector: records
- name: Attribute
  endpoint:
    path: /api/projects/attributes
    method: GET
    data_selector: records
- name: Image
  endpoint:
    path: /api/projects/images
    method: GET
    data_selector: records
- name: ProductVariantAvailability
  endpoint:
    path: /api/projects/product-variant-availability
    method: GET
    data_selector: records
- name: create_product
  endpoint:
    path: /products
    method: POST
- name: update_product_by_id
  endpoint:
    path: /products/{id}
    method: POST
- name: product_by_id
  endpoint:
    path: /products/{id}
    method: GET
- name: product_by_key
  endpoint:
    path: /products/key={key}
    method: GET
- name: update_product
  endpoint:
    path: /products/key={key}
    method: POST
- name: products
  endpoint:
    path: /products
    method: GET
    params:
      limit: 20
      offset: 0
- name: product_selections_by_id
  endpoint:
    path: /products/{id}/product-selections
    method: GET
- name: product_selections_by_key
  endpoint:
    path: /products/key={key}/product-selections
    method: GET
- name: check_product_exists_by_id
  endpoint:
    path: /products/{id}
    method: HEAD
- name: check_product_exists_by_key
  endpoint:
    path: /products/key={key}
    method: HEAD
- name: check_product_exists_by_query
  endpoint:
    path: /products
    method: HEAD
- name: create_product
  endpoint:
    path: /products
    method: POST
- name: update_product
  endpoint:
    path: /products/{id}
    method: POST
- name: update_product
  endpoint:
    path: /products/key={key}
    method: POST
    data_selector: Product
- name: setKey
  endpoint:
    path: /setProductKey
    method: POST
    data_selector: action
    params: {}
- name: changeName
  endpoint:
    path: /changeProductName
    method: POST
    data_selector: action
    params: {}
- name: setDescription
  endpoint:
    path: /setProductDescription
    method: POST
    data_selector: action
    params: {}
- name: changeSlug
  endpoint:
    path: /changeSlug
    method: POST
    data_selector: action
    params: {}
- name: addVariant
  endpoint:
    path: /addProductVariant
    method: POST
    data_selector: action
    params: {}
- name: removeVariant
  endpoint:
    path: /removeProductVariant
    method: POST
    data_selector: action
    params: {}
- name: changeMasterVariant
  endpoint:
    path: /changeMasterVariant
    method: POST
    data_selector: action
    params: {}
- name: setPriceMode
  endpoint:
    path: /setPriceMode
    method: POST
    data_selector: action
    params: {}
- name: addPrice
  endpoint:
    path: /addPrice
    method: POST
    data_selector: action
    params: {}
- name: setPrices
  endpoint:
    path: /setPrices
    method: POST
    data_selector: action
    params: {}
- name: changePrice
  endpoint:
    path: /changePrice
    method: POST
    data_selector: action
    params: {}
- name: removePrice
  endpoint:
    path: /removePrice
    method: POST
    data_selector: action
    params: {}
- name: setProductPriceCustomType
  endpoint:
    path: /setPriceCustomType
    method: POST
    data_selector: action
    params: {}
- name: setProductPriceCustomField
  endpoint:
    path: /setPriceCustomField
    method: POST
    data_selector: action
    params: {}
- name: setDiscountedPrice
  endpoint:
    path: /setDiscountedPrice
    method: POST
    data_selector: action
    params: {}
- name: setPriceKey
  endpoint:
    path: /setPriceKey
    method: POST
    data_selector: action
    params: {}
- name: setAttribute
  endpoint:
    path: /setAttribute
    method: POST
    data_selector: action
    params: {}
- name: Set Product Key
  endpoint:
    path: /setKey
    method: POST
    data_selector: ''
    params: {}
- name: Change Product Name
  endpoint:
    path: /changeName
    method: POST
    data_selector: ''
    params: {}
- name: Set Product Description
  endpoint:
    path: /setDescription
    method: POST
    data_selector: ''
    params: {}
- name: Change Slug
  endpoint:
    path: /changeSlug
    method: POST
    data_selector: ''
    params: {}
- name: Add ProductVariant
  endpoint:
    path: /addVariant
    method: POST
    data_selector: ''
    params: {}
- name: Remove ProductVariant
  endpoint:
    path: /removeVariant
    method: POST
    data_selector: ''
    params: {}
- name: Change Master Variant
  endpoint:
    path: /changeMasterVariant
    method: POST
    data_selector: ''
    params: {}
- name: Set PriceMode
  endpoint:
    path: /setPriceMode
    method: POST
    data_selector: ''
    params: {}
- name: Add Price
  endpoint:
    path: /addPrice
    method: POST
    data_selector: ''
    params: {}
- name: Set Prices
  endpoint:
    path: /setPrices
    method: POST
    data_selector: ''
    params: {}
- name: Change Price
  endpoint:
    path: /changePrice
    method: POST
    data_selector: ''
    params: {}
- name: Remove Price
  endpoint:
    path: /removePrice
    method: POST
    data_selector: ''
    params: {}
- name: Set Price Custom Type
  endpoint:
    path: /setProductPriceCustomType
    method: POST
    data_selector: ''
    params: {}
- name: Set Price CustomField
  endpoint:
    path: /setProductPriceCustomField
    method: POST
    data_selector: ''
    params: {}
- name: Set Discounted Price
  endpoint:
    path: /setDiscountedPrice
    method: POST
    data_selector: ''
    params: {}
- name: Set Price Key
  endpoint:
    path: /setPriceKey
    method: POST
    data_selector: ''
    params: {}
- name: Set Attribute
  endpoint:
    path: /setAttribute
    method: POST
    data_selector: ''
    params: {}
- name: setProductAttribute
  endpoint:
    path: /setProductAttribute
    method: POST
    data_selector: action
- name: setAttributeInAllVariants
  endpoint:
    path: /setAttributeInAllVariants
    method: POST
    data_selector: action
- name: addToCategory
  endpoint:
    path: /addToCategory
    method: POST
    data_selector: action
- name: setCategoryOrderHint
  endpoint:
    path: /setCategoryOrderHint
    method: POST
    data_selector: action
- name: removeFromCategory
  endpoint:
    path: /removeFromCategory
    method: POST
    data_selector: action
- name: setTaxCategory
  endpoint:
    path: /setTaxCategory
    method: POST
    data_selector: action
- name: setSku
  endpoint:
    path: /setSku
    method: POST
    data_selector: action
- name: setProductVariantKey
  endpoint:
    path: /setProductVariantKey
    method: POST
    data_selector: action
- name: addExternalImage
  endpoint:
    path: /addExternalImage
    method: POST
    data_selector: action
- name: moveImageToPosition
  endpoint:
    path: /moveImageToPosition
    method: POST
    data_selector: action
- name: removeImage
  endpoint:
    path: /removeImage
    method: POST
    data_selector: action
- name: setImageLabel
  endpoint:
    path: /setImageLabel
    method: POST
    data_selector: action
- name: addAsset
  endpoint:
    path: /addAsset
    method: POST
    data_selector: action
- name: removeAsset
  endpoint:
    path: /removeAsset
    method: POST
    data_selector: action
- name: setAssetKey
  endpoint:
    path: /setAssetKey
    method: POST
    data_selector: action
- name: changeAssetOrder
  endpoint:
    path: /changeAssetOrder
    method: POST
    data_selector: action
- name: changeAssetName
  endpoint:
    path: /changeAssetName
    method: POST
    data_selector: action
- name: setAssetDescription
  endpoint:
    path: /setAssetDescription
    method: POST
    data_selector: action
- name: setAssetTags
  endpoint:
    path: /setAssetTags
    method: POST
    data_selector: action
- name: setAssetTags
  endpoint:
    path: /setAssetTags
    method: POST
    data_selector: action
- name: setAssetSources
  endpoint:
    path: /setAssetSources
    method: POST
    data_selector: action
- name: setAssetCustomType
  endpoint:
    path: /setAssetCustomType
    method: POST
    data_selector: action
- name: setAssetCustomField
  endpoint:
    path: /setAssetCustomField
    method: POST
    data_selector: action
- name: setSearchKeywords
  endpoint:
    path: /setSearchKeywords
    method: POST
    data_selector: action
- name: setMetaTitle
  endpoint:
    path: /setMetaTitle
    method: POST
    data_selector: action
- name: setMetaDescription
  endpoint:
    path: /setMetaDescription
    method: POST
    data_selector: action
- name: setMetaKeywords
  endpoint:
    path: /setMetaKeywords
    method: POST
    data_selector: action
- name: revertStagedChanges
  endpoint:
    path: /revertStagedChanges
    method: POST
    data_selector: action
- name: revertStagedVariantChanges
  endpoint:
    path: /revertStagedVariantChanges
    method: POST
    data_selector: action
- name: publish
  endpoint:
    path: /publish
    method: POST
    data_selector: action
- name: unpublish
  endpoint:
    path: /unpublish
    method: POST
    data_selector: action
- name: transitionState
  endpoint:
    path: /transitionState
    method: POST
    data_selector: action
- name: setProductAttribute
  endpoint:
    path: /setProductAttribute
    method: POST
    data_selector: action
    params:
      action: setProductAttribute
- name: setAttributeInAllVariants
  endpoint:
    path: /setAttributeInAllVariants
    method: POST
    data_selector: action
    params:
      action: setAttributeInAllVariants
- name: addToCategory
  endpoint:
    path: /addToCategory
    method: POST
    data_selector: action
    params:
      action: addToCategory
- name: setCategoryOrderHint
  endpoint:
    path: /setCategoryOrderHint
    method: POST
    data_selector: action
    params:
      action: setCategoryOrderHint
- name: removeFromCategory
  endpoint:
    path: /removeFromCategory
    method: POST
    data_selector: action
    params:
      action: removeFromCategory
- name: setTaxCategory
  endpoint:
    path: /setTaxCategory
    method: POST
    data_selector: action
    params:
      action: setTaxCategory
- name: setSku
  endpoint:
    path: /setSku
    method: POST
    data_selector: action
    params:
      action: setSku
- name: setProductVariantKey
  endpoint:
    path: /setProductVariantKey
    method: POST
    data_selector: action
    params:
      action: setProductVariantKey
- name: addExternalImage
  endpoint:
    path: /addExternalImage
    method: POST
    data_selector: action
    params:
      action: addExternalImage
- name: moveImageToPosition
  endpoint:
    path: /moveImageToPosition
    method: POST
    data_selector: action
    params:
      action: moveImageToPosition
- name: removeImage
  endpoint:
    path: /removeImage
    method: POST
    data_selector: action
    params:
      action: removeImage
- name: setImageLabel
  endpoint:
    path: /setImageLabel
    method: POST
    data_selector: action
    params:
      action: setImageLabel
- name: addAsset
  endpoint:
    path: /addAsset
    method: POST
    data_selector: action
    params:
      action: addAsset
- name: removeAsset
  endpoint:
    path: /removeAsset
    method: POST
    data_selector: action
    params:
      action: removeAsset
- name: setAssetKey
  endpoint:
    path: /setAssetKey
    method: POST
    data_selector: action
    params:
      action: setAssetKey
- name: changeAssetOrder
  endpoint:
    path: /changeAssetOrder
    method: POST
    data_selector: action
    params:
      action: changeAssetOrder
- name: changeAssetName
  endpoint:
    path: /changeAssetName
    method: POST
    data_selector: action
    params:
      action: changeAssetName
- name: setAssetDescription
  endpoint:
    path: /setAssetDescription
    method: POST
    data_selector: action
    params:
      action: setAssetDescription
- name: setAssetTags
  endpoint:
    path: /setAssetTags
    method: POST
    data_selector: action
    params:
      action: setAssetTags
- name: upload_product_image
  endpoint:
    path: /products/{id}/images
    method: POST
    data_selector: url
    params:
      variant: variant
      filename: filename
- name: delete_product
  endpoint:
    path: /products/{id}
    method: DELETE
    data_selector: response
    params:
      version: version
- name: setAssetTags
  endpoint:
    path: /setAssetTags
    method: POST
    data_selector: response
    params: {}
- name: setAssetSources
  endpoint:
    path: /setAssetSources
    method: POST
    data_selector: response
    params: {}
- name: setAssetCustomType
  endpoint:
    path: /setAssetCustomType
    method: POST
    data_selector: response
    params: {}
- name: setAssetCustomField
  endpoint:
    path: /setAssetCustomField
    method: POST
    data_selector: response
    params: {}
- name: setSearchKeywords
  endpoint:
    path: /setSearchKeywords
    method: POST
    data_selector: response
    params: {}
- name: setMetaTitle
  endpoint:
    path: /setMetaTitle
    method: POST
    data_selector: response
    params: {}
- name: setMetaDescription
  endpoint:
    path: /setMetaDescription
    method: POST
    data_selector: response
    params: {}
- name: setMetaKeywords
  endpoint:
    path: /setMetaKeywords
    method: POST
    data_selector: response
    params: {}
- name: revertStagedChanges
  endpoint:
    path: /revertStagedChanges
    method: POST
    data_selector: response
    params: {}
- name: revertStagedVariantChanges
  endpoint:
    path: /revertStagedVariantChanges
    method: POST
    data_selector: response
    params: {}
- name: publish
  endpoint:
    path: /publish
    method: POST
    data_selector: response
    params: {}
- name: unpublish
  endpoint:
    path: /unpublish
    method: POST
    data_selector: response
    params: {}
- name: transitionState
  endpoint:
    path: /transitionState
    method: POST
    data_selector: response
    params: {}
- name: product
  endpoint:
    path: /products/key={key}
    method: DELETE
    data_selector: Product
    params:
      version: Last seen version of the resource.
- name: product_projections
  endpoint:
    path: /{projectKey}/product-projections
    method: GET
    data_selector: results
- name: upload_product_image
  endpoint:
    path: /products/{id}/images
    method: POST
    data_selector: data
    params:
      variant: Int
      sku: String
      filename: String
      staged: Boolean
- name: delete_product
  endpoint:
    path: /products/{id}
    method: DELETE
    data_selector: data
    params:
      version: Int
- name: product_projection_by_id
  endpoint:
    path: /product-projections/{id}
    method: GET
- name: product_projection_by_key
  endpoint:
    path: /product-projections/key={key}
    method: GET
- name: product_projection_in_store_by_id
  endpoint:
    path: /in-store/key={storeKey}/product-projections/{id}
    method: GET
- name: delete_product
  endpoint:
    path: /products/key={key}
    method: DELETE
    params:
      version: Int
- name: Product Projections
  endpoint:
    path: /{projectKey}/product-projections
    method: GET
    data_selector: results
    params: {}
- name: product_projection_by_key
  endpoint:
    path: /in-store/key={storeKey}/product-projections/key={key}
    method: GET
- name: product_projections_query
  endpoint:
    path: /product-projections
    method: GET
- name: product_projection_exists_by_id
  endpoint:
    path: /product-projections/{id}
    method: HEAD
- name: product_projection_exists_by_key
  endpoint:
    path: /product-projections/key={key}
    method: HEAD
- name: product_projection_exists_in_store_by_id
  endpoint:
    path: /in-store/key={storeKey}/product-projections/{id}
    method: HEAD
- name: product_projection_by_id
  endpoint:
    path: /product-projections/{id}
    method: GET
- name: product_projection_by_key
  endpoint:
    path: /product-projections/key={key}
    method: GET
- name: product_projection_in_store_by_id
  endpoint:
    path: /in-store/key={storeKey}/product-projections/{id}
    method: GET
- name: product_projection
  endpoint:
    path: /in-store/key={storeKey}/product-projections/key={key}
    method: HEAD
- name: product_projection
  endpoint:
    path: /{projectKey}/in-store/key={storeKey}/product-projections/key={key}
    method: GET
- name: query_product_projections
  endpoint:
    path: /{projectKey}/product-projections
    method: GET
- name: check_product_projection_by_id
  endpoint:
    path: /{projectKey}/product-projections/{id}
    method: HEAD
- name: check_product_projection_by_key
  endpoint:
    path: /{projectKey}/product-projections/key={key}
    method: HEAD
- name: check_product_projection_in_store_by_id
  endpoint:
    path: /{projectKey}/in-store/key={storeKey}/product-projections/{id}
    method: HEAD
- name: product_projection
  endpoint:
    path: /in-store/key={storeKey}/product-projections/key={key}
    method: HEAD
    data_selector: null
    params: {}
- name: ProductSelection
  endpoint:
    path: /product-selections/{id}
    method: GET
    data_selector: results
    params: {}
- name: ProductSelectionByKey
  endpoint:
    path: /product-selections/key={key}
    method: GET
    data_selector: results
    params: {}
- name: ProductSelections
  endpoint:
    path: /api/projects/product-selections
    method: GET
    data_selector: results
- name: ProductProjectionSearch
  endpoint:
    path: /api/projects/product-projection-search
    method: GET
    data_selector: results
- name: ProductSearch
  endpoint:
    path: /api/projects/product-search
    method: GET
    data_selector: results
- name: product_selections
  endpoint:
    path: /product-selections
    method: GET
    data_selector: results
- name: products_in_store
  endpoint:
    path: /in-store/key={storeKey}/product-selection-assignments
    method: GET
    data_selector: results
- name: check_product_selection_by_id
  endpoint:
    path: /product-selections/{id}
    method: HEAD
- name: check_product_selection_by_key
  endpoint:
    path: /product-selections/key={key}
    method: HEAD
- name: create_product_selection
  endpoint:
    path: /product-selections
    method: POST
- name: product_selection
  endpoint:
    path: /product-selections/{id}
    method: GET
    data_selector: ProductSelection
- name: product_selection_by_key
  endpoint:
    path: /product-selections/key={key}
    method: GET
    data_selector: ProductSelection
- name: product_selection
  endpoint:
    path: /product-selections/{id}
    method: POST
    data_selector: actions
- name: delete_product_selection
  endpoint:
    path: /product-selections/{id}
    method: DELETE
    data_selector: version
- name: product_selection
  endpoint:
    path: /product-selections/key={key}
    method: DELETE
    params:
      version: last seen version of the resource
- name: product_selections
  endpoint:
    path: /product-selections
    method: GET
    data_selector: results
    params:
      limit: 20
      offset: 0
      withTotal: true
- name: product_selection_products
  endpoint:
    path: /product-selections/{id}/products
    method: GET
    data_selector: results
    params:
      limit: 20
      offset: 0
      withTotal: false
- name: store_product_selection_assignments
  endpoint:
    path: /in-store/key={storeKey}/product-selection-assignments
    method: GET
    data_selector: results
    params:
      limit: 20
      offset: 0
      withTotal: false
- name: ProductTailoring
  endpoint:
    path: /api/projects/product-tailoring
    method: GET
    data_selector: productTailorings
- name: ProductProjection
  endpoint:
    path: /api/projects/productProjections
    method: GET
    data_selector: productProjections
- name: product_selection
  endpoint:
    path: /product-selections/{id}
    method: POST
    data_selector: ProductSelection
    params:
      version: Int
- name: product_selection_by_key
  endpoint:
    path: /product-selections/key={key}
    method: POST
    data_selector: ProductSelection
    params:
      version: Int
- name: delete_product_selection
  endpoint:
    path: /product-selections/{id}
    method: DELETE
    data_selector: ProductSelection
    params:
      version: Int
- name: product_tailoring
  endpoint:
    path: /product-tailoring
    method: GET
    data_selector: results
    params:
      incremental: updated_at
- name: product_selection
  endpoint:
    path: /product-selections/key={key}
    method: DELETE
    params:
      version: last seen version of the resource
- name: ProductTailoring
  endpoint:
    path: /api/projects/product-tailoring
    method: GET
    data_selector: tailoredData
    params: {}
- name: ProductProjection
  endpoint:
    path: /api/projects/productProjections
    method: GET
    data_selector: projections
    params: {}
- name: Get ProductTailoring by ID
  endpoint:
    path: /product-tailoring/{id}
    method: GET
- name: Get ProductTailoring by Key
  endpoint:
    path: /product-tailoring/key={key}
    method: GET
- name: Get ProductTailoring assigned to Product in Store by Product ID
  endpoint:
    path: /in-store/key={storeKey}/products/{productID}/product-tailoring
    method: GET
- name: Get ProductTailoring assigned to Product in Store by Product Key
  endpoint:
    path: /in-store/key={storeKey}/products/key={productKey}/product-tailoring
    method: GET
- name: ProductTailoring
  endpoint:
    path: /api/projects/products/product-tailoring
    method: GET
    data_selector: results
- name: ProductTailoringDraft
  endpoint:
    path: /api/projects/products/product-tailoring-draft
    method: POST
    data_selector: results
- name: ProductTailoringInStoreDraft
  endpoint:
    path: /api/projects/products/product-tailoring-in-store-draft
    method: POST
    data_selector: results
- name: product_tailoring
  endpoint:
    path: /product-tailoring
    method: GET
    data_selector: results
- name: product_tailoring_in_store
  endpoint:
    path: /in-store/key={storeKey}/product-tailoring
    method: GET
    data_selector: results
- name: check_product_tailoring_exists
  endpoint:
    path: /product-tailoring
    method: HEAD
- name: create_product_tailoring
  endpoint:
    path: /product-tailoring
    method: POST
- name: Get ProductTailoring by ID
  endpoint:
    path: /product-tailoring/{id}
    method: GET
    data_selector: ProductTailoring
- name: Get ProductTailoring by Key
  endpoint:
    path: /product-tailoring/key={key}
    method: GET
    data_selector: ProductTailoring
- name: Get ProductTailoring assigned to Product in Store by Product ID
  endpoint:
    path: /in-store/key={storeKey}/products/{productID}/product-tailoring
    method: GET
    data_selector: ProductTailoring
- name: Get ProductTailoring assigned to Product in Store by Product Key
  endpoint:
    path: /in-store/key={storeKey}/products/key={productKey}/product-tailoring
    method: GET
    data_selector: ProductTailoring
- name: product_tailoring
  endpoint:
    path: /in-store/key={storeKey}/product-tailoring
    method: POST
- name: update_product_tailoring_by_id
  endpoint:
    path: /product-tailoring/{id}
    method: POST
- name: update_product_tailoring_by_key
  endpoint:
    path: /product-tailoring/key={key}
    method: POST
- name: update_product_tailoring_by_product_id
  endpoint:
    path: /in-store/key={storeKey}/products/{productID}/product-tailoring
    method: POST
- name: update_product_tailoring_by_product_key
  endpoint:
    path: /in-store/key={storeKey}/products/key={productKey}/product-tailoring
    method: POST
- name: product_tailoring
  endpoint:
    path: /product-tailoring
    method: GET
- name: product_tailoring_in_store
  endpoint:
    path: /in-store/key={storeKey}/product-tailoring
    method: GET
- name: check_product_tailoring_exists
  endpoint:
    path: /product-tailoring
    method: HEAD
- name: create_product_tailoring
  endpoint:
    path: /product-tailoring
    method: POST
- name: ProductTailoring
  endpoint:
    path: /api/projects/messages/product-catalog-messages
    method: POST
    data_selector: messages
    params: {}
- name: ProductVariantTailoring
  endpoint:
    path: /api/projects/messages/product-catalog-messages
    method: POST
    data_selector: messages
    params: {}
- name: Assets
  endpoint:
    path: /api/projects/messages/product-catalog-messages
    method: POST
    data_selector: messages
    params: {}
- name: product_tailoring
  endpoint:
    path: /in-store/key={storeKey}/product-tailoring
    method: POST
- name: update_product_tailoring_by_id
  endpoint:
    path: /product-tailoring/{id}
    method: POST
- name: update_product_tailoring_by_key
  endpoint:
    path: /product-tailoring/key={key}
    method: POST
- name: update_product_tailoring_by_product_id
  endpoint:
    path: /in-store/key={storeKey}/products/{productID}/product-tailoring
    method: POST
- name: update_product_tailoring_by_product_key
  endpoint:
    path: /in-store/key={storeKey}/products/key={productKey}/product-tailoring
    method: POST
- name: ProductTailoring
  endpoint:
    path: /api/projects/messages/product-catalog-messages
    method: POST
- name: changeAssetName
  endpoint:
    path: /actions/changeAssetName
    method: POST
    data_selector: action
    params: {}
- name: setAssetDescription
  endpoint:
    path: /actions/setAssetDescription
    method: POST
    data_selector: action
    params: {}
- name: setAssetTags
  endpoint:
    path: /actions/setAssetTags
    method: POST
    data_selector: action
    params: {}
- name: setAssetSources
  endpoint:
    path: /actions/setAssetSources
    method: POST
    data_selector: action
    params: {}
- name: setAssetCustomType
  endpoint:
    path: /actions/setAssetCustomType
    method: POST
    data_selector: action
    params: {}
- name: setAssetCustomField
  endpoint:
    path: /actions/setAssetCustomField
    method: POST
    data_selector: action
    params: {}
- name: setAttribute
  endpoint:
    path: /actions/setAttribute
    method: POST
    data_selector: action
    params: {}
- name: setAttributeInAllVariants
  endpoint:
    path: /actions/setAttributeInAllVariants
    method: POST
    data_selector: action
    params: {}
- name: setProductAttribute
  endpoint:
    path: /actions/setProductAttribute
    method: POST
    data_selector: action
    params: {}
- name: changeAssetName
  endpoint:
    path: /actions/changeAssetName
    method: POST
    data_selector: action
    params: {}
- name: setAssetDescription
  endpoint:
    path: /actions/setAssetDescription
    method: POST
    data_selector: action
    params: {}
- name: setAssetTags
  endpoint:
    path: /actions/setAssetTags
    method: POST
    data_selector: action
    params: {}
- name: setAssetSources
  endpoint:
    path: /actions/setAssetSources
    method: POST
    data_selector: action
    params: {}
- name: setAssetCustomType
  endpoint:
    path: /actions/setAssetCustomType
    method: POST
    data_selector: action
    params: {}
- name: setAssetCustomField
  endpoint:
    path: /actions/setAssetCustomField
    method: POST
    data_selector: action
    params: {}
- name: setAttribute
  endpoint:
    path: /actions/setAttribute
    method: POST
    data_selector: action
    params: {}
- name: setAttributeInAllVariants
  endpoint:
    path: /actions/setAttributeInAllVariants
    method: POST
    data_selector: action
    params: {}
- name: setProductAttribute
  endpoint:
    path: /actions/setProductAttribute
    method: POST
    data_selector: action
    params: {}
- name: product_tailoring_image
  endpoint:
    path: /{projectKey}/in-store/key={storeKey}/products/{productID}/product-tailoring/images
    method: POST
    data_selector: ProductTailoring
    params:
      filename: img
      staged: true
- name: delete_product_tailoring_by_id
  endpoint:
    path: /{projectKey}/product-tailoring/{id}
    method: DELETE
    data_selector: ProductTailoring
- name: delete_product_tailoring_by_key
  endpoint:
    path: /{projectKey}/product-tailoring/key={key}
    method: DELETE
    data_selector: ProductTailoring
- name: delete_product_tailoring_assigned_to_product_in_store_by_product_id
  endpoint:
    path: /{projectKey}/in-store/key={storeKey}/products/{productID}/product-tailoring
    method: DELETE
    data_selector: ProductTailoring
- name: delete_product_tailoring
  endpoint:
    path: /{projectKey}/in-store/key={storeKey}/products/key={productKey}/product-tailoring
    method: DELETE
    data_selector: ProductTailoring
    params:
      version: last seen version of the resource
- name: upload_product_tailoring_image
  endpoint:
    path: /{projectKey}/in-store/key={storeKey}/products/{productID}/product-tailoring/images
    method: POST
    data_selector: ProductTailoring
    params: {}
- name: delete_product_tailoring_by_id
  endpoint:
    path: /{projectKey}/product-tailoring/{id}
    method: DELETE
    data_selector: ProductTailoring
    params: {}
- name: delete_product_tailoring_by_key
  endpoint:
    path: /{projectKey}/product-tailoring/key={key}
    method: DELETE
    data_selector: ProductTailoring
    params: {}
- name: delete_product_tailoring_assigned_to_product_in_store_by_product_id
  endpoint:
    path: /{projectKey}/in-store/key={storeKey}/products/{productID}/product-tailoring
    method: DELETE
    data_selector: ProductTailoring
    params: {}
- name: category
  endpoint:
    path: /categories/{id}
    method: GET
    data_selector: Category
- name: category_by_key
  endpoint:
    path: /categories/key={key}
    method: GET
    data_selector: Category
- name: ProductTailoring
  endpoint:
    path: /in-store/key={storeKey}/products/key={productKey}/product-tailoring
    method: DELETE
    data_selector: ProductTailoring
    params:
      version: last seen version of the resource
- name: categories
  endpoint:
    path: /categories
    method: GET
    data_selector: results
    params:
      limit: 20
      offset: 0
      withTotal: true
- name: check_category_by_id
  endpoint:
    path: /categories/{id}
    method: HEAD
- name: check_category_by_key
  endpoint:
    path: /categories/key={key}
    method: HEAD
- name: create_category
  endpoint:
    path: /categories
    method: POST
    data_selector: Category
    params:
      expand: ''
- name: update_category_by_id
  endpoint:
    path: /categories/{id}
    method: POST
- name: update_category_by_key
  endpoint:
    path: /categories/key={key}
    method: POST
- name: get_category_by_id
  endpoint:
    path: /categories/{id}
    method: GET
- name: get_category_by_key
  endpoint:
    path: /categories/key={key}
    method: GET
- name: Delete Category by ID
  endpoint:
    path: /categories/{id}
    method: DELETE
- name: Delete Category by Key
  endpoint:
    path: /categories/key={key}
    method: DELETE
- name: categories
  endpoint:
    path: /categories
    method: GET
    data_selector: results
    params:
      limit: '20'
      offset: '0'
      withTotal: 'true'
- name: check_category_by_id
  endpoint:
    path: /categories/{id}
    method: HEAD
    data_selector: ''
    params: {}
- name: check_category_by_key
  endpoint:
    path: /categories/key={key}
    method: HEAD
    data_selector: ''
    params: {}
- name: create_category
  endpoint:
    path: /categories
    method: POST
    data_selector: ''
    params: {}
- name: update_category_by_id
  endpoint:
    path: /categories/{id}
    method: POST
    data_selector: ''
    params: {}
- name: update_category_by_key
  endpoint:
    path: /categories/key={key}
    method: POST
    data_selector: ''
    params: {}
- name: Delete Category by ID
  endpoint:
    path: /categories/{id}
    method: DELETE
- name: Delete Category by Key
  endpoint:
    path: /categories/key={key}
    method: DELETE
- name: inventory_entry
  endpoint:
    path: /inventory/{id}
    method: GET
    data_selector: ''
    params: {}
- name: inventory_entry_by_key
  endpoint:
    path: /inventory/key={key}
    method: GET
    data_selector: ''
    params: {}
- name: query_inventory_entries
  endpoint:
    path: /inventory
    method: GET
    data_selector: ''
    params:
      limit: 20
      offset: 0
- name: check_inventory_entry_exists
  endpoint:
    path: /inventory/{id}
    method: HEAD
    data_selector: ''
    params: {}
- name: inventory_entry
  endpoint:
    path: /inventory/{id}
    method: GET
    data_selector: ''
    params: {}
- name: inventory_entry_by_key
  endpoint:
    path: /inventory/key={key}
    method: GET
    data_selector: ''
    params: {}
- name: query_inventory_entries
  endpoint:
    path: /inventory
    method: GET
    data_selector: results
    params:
      limit: 20
      offset: 0
      withTotal: true
- name: check_inventory_entry_exists
  endpoint:
    path: /inventory/{id}
    method: HEAD
    data_selector: ''
    params: {}
- name: inventory_entry_by_key
  endpoint:
    path: /inventory/key={key}
    method: HEAD
- name: inventory_entry_by_query
  endpoint:
    path: /inventory
    method: HEAD
- name: create_inventory_entry
  endpoint:
    path: /inventory
    method: POST
- name: update_inventory_entry_by_id
  endpoint:
    path: /inventory/{id}
    method: POST
- name: update_inventory_entry_by_key
  endpoint:
    path: /inventory/key={key}
    method: POST
- name: delete_inventory_entry_by_id
  endpoint:
    path: /inventory/{id}
    method: DELETE
- name: inventory_entry
  endpoint:
    path: /inventory/key={key}
    method: DELETE
    params:
      version: last seen version of the resource
- name: inventory_entry
  endpoint:
    path: /inventory
    method: POST
    data_selector: InventoryEntry
    params: {}
- name: reviews
  endpoint:
    path: /reviews
    method: GET
    data_selector: results
- name: inventory_entry
  endpoint:
    path: /inventory/key={key}
    method: DELETE
    data_selector: InventoryEntry
    params:
      version: last seen version of the resource
- name: reviews
  endpoint:
    path: /api/projects/reviews
    method: GET
    data_selector: results
- name: review_by_id
  endpoint:
    path: /reviews/{id}
    method: GET
    data_selector: Review
- name: review_by_key
  endpoint:
    path: /reviews/key={key}
    method: GET
    data_selector: Review
- name: query_reviews
  endpoint:
    path: /reviews
    method: GET
    data_selector: ReviewPagedQueryResponse
    params:
      limit: 20
      offset: 0
- name: check_review_exists_by_id
  endpoint:
    path: /reviews/{id}
    method: HEAD
- name: check_review_exists_by_key
  endpoint:
    path: /reviews/key={key}
    method: HEAD
- name: create_review
  endpoint:
    path: /reviews
    method: POST
    data_selector: Review
- name: update_review_by_id
  endpoint:
    path: /reviews/{id}
    method: POST
- name: update_review_by_key
  endpoint:
    path: /reviews/key={key}
    method: POST
- name: Delete Review by ID
  endpoint:
    path: /{id}
    method: DELETE
- name: Delete Review by Key
  endpoint:
    path: /key={key}
    method: DELETE
- name: Product Search
  endpoint:
    path: /api/projects/product-search
    method: GET
- name: Product Projection Search
  endpoint:
    path: /api/projects/product-projection-search
    method: GET
- name: Search Term Suggestions
  endpoint:
    path: /api/projects/search-term-suggestions
    method: GET
- name: review_by_id
  endpoint:
    path: /reviews/{id}
    method: GET
    data_selector: Review
    params: {}
- name: review_by_key
  endpoint:
    path: /reviews/key={key}
    method: GET
    data_selector: Review
    params: {}
- name: query_reviews
  endpoint:
    path: /reviews
    method: GET
    data_selector: ReviewPagedQueryResponse
    params:
      limit: 20
      offset: 0
- name: check_review_exists_by_id
  endpoint:
    path: /reviews/{id}
    method: HEAD
    data_selector: null
    params: {}
- name: check_review_exists_by_key
  endpoint:
    path: /reviews/key={key}
    method: HEAD
    data_selector: null
    params: {}
- name: create_review
  endpoint:
    path: /reviews
    method: POST
    data_selector: Review
    params: {}
- name: update_review_by_id
  endpoint:
    path: /reviews/{id}
    method: POST
    data_selector: Review
    params: {}
- name: update_review_by_key
  endpoint:
    path: /reviews/key={key}
    method: POST
    data_selector: Review
    params: {}
- name: delete_review_by_id
  endpoint:
    path: /reviews/{id}
    method: DELETE
- name: delete_review_by_key
  endpoint:
    path: /reviews/key={key}
    method: DELETE
- name: product_search
  endpoint:
    path: /products/search
    method: POST
    data_selector: results
    params:
      limit: 20
      offset: 0
- name: product_search
  endpoint:
    path: /products/search
    method: POST
    data_selector: results
    params:
      limit: 20
      offset: 0
- name: ProductSearchFacetCount
  endpoint:
    path: /product-search/facets/count
    method: POST
    data_selector: facets.results
    params: {}
- name: ProductSearchFacetStats
  endpoint:
    path: /product-search/facets/stats
    method: POST
    data_selector: facets.results
    params: {}
- name: ProductSearchFacetDistinct
  endpoint:
    path: /product-search/facets/distinct
    method: POST
    data_selector: facets.results
    params: {}
- name: product_projections
  endpoint:
    path: /{projectKey}/product-projections/search
    method: GET
    data_selector: results
- name: product_projections
  endpoint:
    path: /product-projections/search
    method: GET
    data_selector: results
- name: product_projections_post
  endpoint:
    path: /product-projections/search
    method: POST
    data_selector: results
- name: product_variants
  endpoint:
    path: /{projectKey}/product-projections/search
    method: GET
    data_selector: results
- name: query_suggestions
  endpoint:
    path: /product-projections/suggest
    method: GET
    data_selector: SuggestionResult
    params:
      fuzzy: 'false'
      limit: 10
      staged: 'false'
- name: suggestions
  endpoint:
    path: /product-projections/suggest
    method: GET
    data_selector: searchKeywords
    params:
      limit: 10
- name: Standalone Prices
  endpoint:
    path: /api/projects/standalone-prices
    method: GET
    data_selector: prices
- name: Product Discounts
  endpoint:
    path: /api/projects/productDiscounts
    method: GET
    data_selector: discounts
- name: Cart Discounts
  endpoint:
    path: /api/projects/cartDiscounts
    method: GET
    data_selector: discounts
- name: Discount Codes
  endpoint:
    path: /api/projects/discountCodes
    method: GET
    data_selector: codes
- name: Discount Groups
  endpoint:
    path: /api/projects/discount-groups
    method: GET
    data_selector: groups
- name: standalone_prices
  endpoint:
    path: /api/projects/standalone-prices
    method: GET
    data_selector: prices
- name: products
  endpoint:
    path: /api/projects/products
    method: GET
    data_selector: products
- name: carts
  endpoint:
    path: /api/projects/carts
    method: POST
    data_selector: cart
- name: Product Projection Search
  endpoint:
    path: /api/projects/product-projection-search
    method: GET
    data_selector: results
- name: Product Discounts
  endpoint:
    path: /api/projects/productDiscounts
    method: GET
    data_selector: discounts
- name: Cart Discounts
  endpoint:
    path: /api/projects/cartDiscounts
    method: GET
    data_selector: discounts
- name: Product Projection Search
  endpoint:
    path: /api/projects/product-projection-search
    method: GET
    data_selector: results
- name: Product Discounts
  endpoint:
    path: /api/projects/productDiscounts
    method: GET
    data_selector: results
- name: Cart Discounts
  endpoint:
    path: /api/projects/cartDiscounts
    method: GET
    data_selector: results
- name: Discount Codes
  endpoint:
    path: /api/projects/discountCodes
    method: GET
    data_selector: results
- name: Discount Groups
  endpoint:
    path: /api/projects/discount-groups
    method: GET
    data_selector: results
- name: StandalonePrice
  endpoint:
    path: /api/projects/standalone-prices
    method: GET
    data_selector: results
    params: {}
- name: StandalonePrice
  endpoint:
    path: /api/projects/standalone-prices
    method: GET
    data_selector: results
- name: StandalonePriceDraft
  endpoint:
    path: /api/projects/standalone-prices-draft
    method: POST
    data_selector: results
- name: StandalonePricePagedQueryResponse
  endpoint:
    path: /api/projects/standalone-prices/paged-query
    method: GET
    data_selector: results
- name: standalone_price
  endpoint:
    path: /standalone-prices/{id}
    method: GET
    data_selector: StandalonePrice
- name: standalone_price_by_key
  endpoint:
    path: /standalone-prices/key={key}
    method: GET
    data_selector: StandalonePrice
- name: query_standalone_prices
  endpoint:
    path: /standalone-prices
    method: GET
    data_selector: StandalonePricePagedQueryResponse
- name: check_standalone_price_exists_by_id
  endpoint:
    path: /standalone-prices/{id}
    method: HEAD
- name: check_standalone_price_exists_by_key
  endpoint:
    path: /standalone-prices/key={key}
    method: HEAD
- name: create_standalone_price
  endpoint:
    path: /standalone-prices
    method: POST
- name: update_standalone_price_by_id
  endpoint:
    path: /standalone-prices/{id}
    method: POST
- name: standalone_price
  endpoint:
    path: /standalone-prices/key={key}
    method: POST
- name: delete_standalone_price
  endpoint:
    path: /standalone-prices/{id}
    method: DELETE
- name: standalone_price_by_id
  endpoint:
    path: /standalone-prices/{id}
    method: GET
    data_selector: StandalonePrice
- name: standalone_price_by_key
  endpoint:
    path: /standalone-prices/key={key}
    method: GET
    data_selector: StandalonePrice
- name: query_standalone_prices
  endpoint:
    path: /standalone-prices
    method: GET
    data_selector: StandalonePricePagedQueryResponse
- name: create_standalone_price
  endpoint:
    path: /standalone-prices
    method: POST
    data_selector: StandalonePrice
- name: update_standalone_price_by_id
  endpoint:
    path: /standalone-prices/{id}
    method: POST
    data_selector: StandalonePrice
- name: check_standalone_price_exists_by_id
  endpoint:
    path: /standalone-prices/{id}
    method: HEAD
- name: check_standalone_price_exists_by_key
  endpoint:
    path: /standalone-prices/key={key}
    method: HEAD
- name: check_standalone_price_exists_by_query_predicate
  endpoint:
    path: /standalone-prices
    method: HEAD
- name: standalone_prices
  endpoint:
    path: /standalone-prices/key={key}
    method: POST
    data_selector: StandalonePrice
    params: {}
- name: standalone_price
  endpoint:
    path: /standalone-prices/key={key}
    method: DELETE
    data_selector: StandalonePriceDeleted
    params:
      version: Int
- name: standalone_price
  endpoint:
    path: /standalone-prices/key={key}
    method: DELETE
    data_selector: StandalonePriceDeleted
    params:
      version: last seen version of the resource
- name: product_discount
  endpoint:
    path: /product-discounts/{id}
    method: GET
    data_selector: ProductDiscount
- name: product_discount
  endpoint:
    path: /{projectKey}/product-discounts/{id}
    method: GET
    data_selector: ProductDiscount
- name: product_discount
  endpoint:
    path: /product-discounts/key={key}
    method: GET
    data_selector: results
    params: {}
- name: product_discounts
  endpoint:
    path: /product-discounts
    method: GET
    data_selector: results
    params:
      limit: 20
      offset: 0
      withTotal: true
- name: product_discount
  endpoint:
    path: /product-discounts/key={key}
    method: GET
- name: product_discounts
  endpoint:
    path: /product-discounts
    method: GET
- name: product_discount_exists_by_id
  endpoint:
    path: /product-discounts/{id}
    method: HEAD
- name: product_discount_exists_by_key
  endpoint:
    path: /product-discounts/key={key}
    method: HEAD
- name: product_discount_exists_by_query_predicate
  endpoint:
    path: /product-discounts
    method: HEAD
- name: create_product_discount
  endpoint:
    path: /product-discounts
    method: POST
- name: update_product_discount_by_id
  endpoint:
    path: /product-discounts/{id}
    method: POST
- name: update_product_discount_by_key
  endpoint:
    path: /product-discounts/key={key}
    method: POST
- name: Delete ProductDiscount by ID
  endpoint:
    path: /product-discounts/{id}
    method: DELETE
- name: Delete ProductDiscount by Key
  endpoint:
    path: /product-discounts/key={key}
    method: DELETE
- name: Get Matching ProductDiscount
  endpoint:
    path: /product-discounts/matching
    method: POST
- name: Delete ProductDiscount by ID
  endpoint:
    path: /product-discounts/{id}
    method: DELETE
    data_selector: ProductDiscount
    params:
      version: last seen version of the resource
- name: Delete ProductDiscount by Key
  endpoint:
    path: /product-discounts/key={key}
    method: DELETE
    data_selector: ProductDiscount
    params:
      version: last seen version of the resource
- name: Get Matching ProductDiscount
  endpoint:
    path: /product-discounts/matching
    method: POST
    data_selector: ProductDiscountMatchQuery
- name: CartDiscount
  endpoint:
    path: /cart-discounts
    method: GET
    data_selector: results
- name: CartDiscountDraft
  endpoint:
    path: /cart-discounts/draft
    method: POST
    data_selector: results
- name: CartDiscountPagedQueryResponse
  endpoint:
    path: /cart-discounts/paged-query
    method: GET
    data_selector: results
- name: CartDiscount
  endpoint:
    path: /cart-discounts
    method: GET
    data_selector: results
- name: CartDiscountDraft
  endpoint:
    path: /cart-discounts/draft
    method: POST
    data_selector: results
- name: CartDiscountPagedQueryResponse
  endpoint:
    path: /cart-discounts/paged-query
    method: GET
    data_selector: results
- name: CartDiscountValueRelativeDraft
  endpoint:
    path: /cart-discount-value-relative-draft
    method: GET
    data_selector: relativeDiscounts
    params: {}
- name: CartDiscountValueAbsoluteDraft
  endpoint:
    path: /cart-discount-value-absolute-draft
    method: GET
    data_selector: absoluteDiscounts
    params: {}
- name: CartDiscountValueFixedDraft
  endpoint:
    path: /cart-discount-value-fixed-draft
    method: GET
    data_selector: fixedDiscounts
    params: {}
- name: CartDiscountValueGiftLineItemDraft
  endpoint:
    path: /cart-discount-value-gift-line-item-draft
    method: GET
    data_selector: giftLineItemDiscounts
    params: {}
- name: CartDiscountTarget
  endpoint:
    path: /cart-discount-target
    method: GET
    data_selector: discountTargets
    params: {}
- name: CartDiscountLineItemsTarget
  endpoint:
    path: /cart-discount-line-items-target
    method: GET
    data_selector: lineItemsTargets
    params: {}
- name: CartDiscountCustomLineItemsTarget
  endpoint:
    path: /cart-discount-custom-line-items-target
    method: GET
    data_selector: customLineItemsTargets
    params: {}
- name: CartDiscountShippingCostTarget
  endpoint:
    path: /cart-discount-shipping-cost-target
    method: GET
    data_selector: shippingCostTargets
    params: {}
- name: CartDiscountTotalPriceTarget
  endpoint:
    path: /cart-discount-total-price-target
    method: GET
    data_selector: totalPriceTargets
    params: {}
- name: MultiBuyLineItemsTarget
  endpoint:
    path: /multi-buy-line-items-target
    method: GET
    data_selector: multiBuyLineItemsTargets
    params: {}
- name: MultiBuyCustomLineItemsTarget
  endpoint:
    path: /multi-buy-custom-line-items-target
    method: GET
    data_selector: multiBuyCustomLineItemsTargets
    params: {}
- name: CartDiscountPatternTarget
  endpoint:
    path: /cart-discount-pattern-target
    method: GET
    data_selector: patternTargets
    params: {}
- name: CartDiscountValueRelativeDraft
  endpoint:
    type: relative
    permyriad: 1000
    applicationMode: ProportionateDistribution
- name: CartDiscountValueAbsoluteDraft
  endpoint:
    type: absolute
    money:
      centAmount: 2000
      currencyCode: EUR
    applicationMode: IndividualApplication
- name: CartDiscountValueFixedDraft
  endpoint:
    type: fixed
    money:
      centAmount: 2000
      currencyCode: EUR
- name: CartDiscountValueGiftLineItemDraft
  endpoint:
    type: giftLineItem
    product:
      id: '{{product-id}}'
      typeId: product
    variantId: 1
    distributionChannel:
      id: '{{channel-id}}'
      typeId: channel
- name: CartDiscountLineItemsTarget
  endpoint:
    type: lineItems
    predicate: shippingInfo.price = "50.00 EUR"
- name: CartDiscountCustomLineItemsTarget
  endpoint:
    type: customLineItems
    predicate: customLineItemTotal(1 = 1) = "20.00 EUR"
- name: CartDiscountShippingCostTarget
  endpoint:
    type: shipping
- name: CartDiscountTotalPriceTarget
  endpoint:
    type: totalPrice
- name: MultiBuyLineItemsTarget
  endpoint:
    type: multiBuyLineItems
    predicate: taxedPrice.gross = "200.00 EUR"
    triggerQuantity: 5
    discountedQuantity: 2
    maxOccurrence: 10
    selectionMode: Cheapest
- name: MultiBuyCustomLineItemsTarget
  endpoint:
    type: multiBuyCustomLineItems
    predicate: taxedPrice.gross = "200.00 EUR"
    triggerQuantity: 2
    discountedQuantity: 1
    maxOccurrence: 5
    selectionMode: MostExpensive
- name: CartDiscountPatternTarget
  endpoint:
    type: pattern
    maxOccurrence: 3
    selectionMode: Cheapest
- name: discount_example_2
  endpoint:
    path: /discount/example/2
    method: POST
    data_selector: triggerPattern
    params: {}
- name: discount_example_3
  endpoint:
    path: /discount/example/3
    method: POST
    data_selector: triggerPattern
    params: {}
- name: cart_discount
  endpoint:
    path: /cart-discounts/{id}
    method: GET
    data_selector: results
- name: cart_discount_by_key
  endpoint:
    path: /cart-discounts/key={key}
    method: GET
    data_selector: results
- name: cart_discount_in_store
  endpoint:
    path: /in-store/key={storeKey}/cart-discounts/{id}
    method: GET
    data_selector: results
- name: cart_discount_in_store_by_key
  endpoint:
    path: /in-store/key={storeKey}/cart-discounts/key={key}
    method: GET
    data_selector: results
- name: query_cart_discounts
  endpoint:
    path: /cart-discounts
    method: GET
    data_selector: results
- name: check_cart_discount_exists_by_id
  endpoint:
    path: /cart-discounts/{id}
    method: HEAD
- name: check_cart_discount_exists_by_key
  endpoint:
    path: /cart-discounts/key={key}
    method: HEAD
- name: cart_discount
  endpoint:
    path: /cart-discounts
    method: HEAD
    data_selector: ''
    params: {}
- name: cart_discount_in_store
  endpoint:
    path: /in-store/key={storeKey}/cart-discounts
    method: HEAD
    data_selector: ''
    params: {}
- name: create_cart_discount
  endpoint:
    path: /cart-discounts
    method: POST
    data_selector: ''
    params: {}
- name: update_cart_discount
  endpoint:
    path: /cart-discounts/{id}
    method: POST
    data_selector: ''
    params: {}
- name: cart_discount
  endpoint:
    path: /cart-discounts/{id}
    method: GET
    data_selector: results
- name: cart_discount_by_key
  endpoint:
    path: /cart-discounts/key={key}
    method: GET
    data_selector: results
- name: cart_discount_in_store
  endpoint:
    path: /in-store/key={storeKey}/cart-discounts/{id}
    method: GET
    data_selector: results
- name: cart_discount_in_store_by_key
  endpoint:
    path: /in-store/key={storeKey}/cart-discounts/key={key}
    method: GET
    data_selector: results
- name: query_cart_discounts
  endpoint:
    path: /cart-discounts
    method: GET
    data_selector: results
    params:
      limit: 20
      offset: 0
- name: query_cart_discounts_in_store
  endpoint:
    path: /in-store/key={storeKey}/cart-discounts
    method: GET
    data_selector: results
    params:
      limit: 20
      offset: 0
- name: check_cart_discount_exists_by_id
  endpoint:
    path: /cart-discounts/{id}
    method: HEAD
- name: check_cart_discount_exists_by_key
  endpoint:
    path: /cart-discounts/key={key}
    method: HEAD
- name: cart_discount
  endpoint:
    path: /in-store/key={storeKey}/cart-discounts/{id}
    method: POST
    data_selector: CartDiscount
    params: {}
- name: cart_discount_by_key
  endpoint:
    path: /in-store/key={storeKey}/cart-discounts/key={key}
    method: POST
    data_selector: CartDiscount
    params: {}
- name: discount_code
  endpoint:
    path: /discount-codes/{id}
    method: GET
    data_selector: DiscountCode
- name: cart_discount
  endpoint:
    path: /cart-discounts
    method: HEAD
    data_selector: CartDiscounts
    params: {}
- name: cart_discount_in_store
  endpoint:
    path: /in-store/key={storeKey}/cart-discounts
    method: HEAD
    data_selector: CartDiscounts
    params: {}
- name: create_cart_discount
  endpoint:
    path: /cart-discounts
    method: POST
    data_selector: CartDiscount
    params: {}
- name: update_cart_discount_by_id
  endpoint:
    path: /cart-discounts/{id}
    method: POST
    data_selector: CartDiscount
    params: {}
- name: update_cart_discount_by_key
  endpoint:
    path: /cart-discounts/key={key}
    method: POST
    data_selector: CartDiscount
    params: {}
- name: cart_discount
  endpoint:
    path: /in-store/key={storeKey}/cart-discounts/{id}
    method: POST
    data_selector: response
    params: {}
- name: cart_discount_by_key
  endpoint:
    path: /in-store/key={storeKey}/cart-discounts/key={key}
    method: POST
    data_selector: response
    params: {}
- name: discount_code_by_key
  endpoint:
    path: /discount-codes/key={key}
    method: GET
    data_selector: DiscountCode
    params: {}
- name: discount_codes
  endpoint:
    path: /discount-codes
    method: GET
    data_selector: results
    params:
      limit: 20
      offset: 0
- name: check_discount_code_exists_by_id
  endpoint:
    path: /discount-codes/{id}
    method: HEAD
    data_selector: ''
    params: {}
- name: check_discount_code_exists_by_key
  endpoint:
    path: /discount-codes/key={key}
    method: HEAD
    data_selector: ''
    params: {}
- name: create_discount_code
  endpoint:
    path: /discount-codes
    method: POST
    data_selector: DiscountCode
    params: {}
- name: update_discount_code_by_id
  endpoint:
    path: /discount-codes/{id}
    method: POST
    data_selector: DiscountCode
    params: {}
- name: update_discount_code_by_key
  endpoint:
    path: /discount-codes/key={key}
    method: POST
    data_selector: DiscountCode
    params: {}
- name: discount_code
  endpoint:
    path: /discount-codes/{id}
    method: GET
    data_selector: DiscountCode
- name: Delete DiscountCode by ID
  endpoint:
    path: /{id}
    method: DELETE
- name: Delete DiscountCode by Key
  endpoint:
    path: /key={key}
    method: DELETE
- name: discount_group
  endpoint:
    path: /discount-groups/{id}
    method: GET
- name: discount_group_by_key
  endpoint:
    path: /discount-groups/key={key}
    method: GET
- name: all_discount_groups
  endpoint:
    path: /discount-groups
    method: GET
- name: discount_code
  endpoint:
    path: /discount-codes/key={key}
    method: GET
    data_selector: DiscountCode
    params: {}
- name: discount_codes
  endpoint:
    path: /discount-codes
    method: GET
    data_selector: results
    params:
      limit: 20
      offset: 0
      withTotal: true
- name: check_discount_code_exists_by_id
  endpoint:
    path: /discount-codes/{id}
    method: HEAD
    data_selector: ''
    params: {}
- name: check_discount_code_exists_by_key
  endpoint:
    path: /discount-codes/key={key}
    method: HEAD
    data_selector: ''
    params: {}
- name: create_discount_code
  endpoint:
    path: /discount-codes
    method: POST
    data_selector: DiscountCode
    params: {}
- name: update_discount_code_by_id
  endpoint:
    path: /discount-codes/{id}
    method: POST
    data_selector: DiscountCode
    params: {}
- name: update_discount_code_by_key
  endpoint:
    path: /discount-codes/key={key}
    method: POST
    data_selector: DiscountCode
    params: {}
- name: delete_discount_code_by_id
  endpoint:
    path: /{id}
    method: DELETE
- name: delete_discount_code_by_key
  endpoint:
    path: /key={key}
    method: DELETE
- name: discount_group
  endpoint:
    path: /{projectKey}/discount-groups/{id}
    method: GET
    data_selector: DiscountGroup
- name: discount_group_by_key
  endpoint:
    path: /{projectKey}/discount-groups/key={key}
    method: GET
    data_selector: DiscountGroup
- name: query_discount_groups
  endpoint:
    path: /{projectKey}/discount-groups
    method: GET
    data_selector: DiscountGroupPagedQueryResponse
- name: discount_group
  endpoint:
    path: /discount-groups/{id}
    method: HEAD
    data_selector: null
    params: {}
- name: discount_group_by_key
  endpoint:
    path: /discount-groups/key={key}
    method: HEAD
    data_selector: null
    params: {}
- name: discount_group_by_query
  endpoint:
    path: /discount-groups
    method: HEAD
    data_selector: null
    params:
      where: null
- name: create_discount_group
  endpoint:
    path: /discount-groups
    method: POST
    data_selector: null
    params: {}
- name: update_discount_group_by_id
  endpoint:
    path: /discount-groups/{id}
    method: POST
    data_selector: null
    params: {}
- name: update_discount_group_by_key
  endpoint:
    path: /discount-groups/key={key}
    method: POST
    data_selector: null
    params: {}
- name: delete_discount_group_by_id
  endpoint:
    path: /discount-groups/{id}
    method: DELETE
    data_selector: null
    params:
      version: null
- name: delete_discount_group_by_key
  endpoint:
    path: /discount-groups/key={key}
    method: DELETE
    data_selector: null
    params:
      version: null
- name: discount_group
  endpoint:
    path: /discount-groups/{id}
    method: HEAD
    data_selector: status
    params: {}
- name: discount_group_key
  endpoint:
    path: /discount-groups/key={key}
    method: HEAD
    data_selector: status
    params: {}
- name: discount_group_query
  endpoint:
    path: /discount-groups
    method: HEAD
    data_selector: status
    params:
      where: ''
- name: create_discount_group
  endpoint:
    path: /discount-groups
    method: POST
    data_selector: DiscountGroup
    params: {}
- name: update_discount_group_id
  endpoint:
    path: /discount-groups/{id}
    method: POST
    data_selector: DiscountGroup
    params: {}
- name: update_discount_group_key
  endpoint:
    path: /discount-groups/key={key}
    method: POST
    data_selector: DiscountGroup
    params: {}
- name: delete_discount_group_id
  endpoint:
    path: /discount-groups/{id}
    method: DELETE
    data_selector: DiscountGroup
    params: {}
- name: delete_discount_group_key
  endpoint:
    path: /discount-groups/key={key}
    method: DELETE
    data_selector: DiscountGroup
    params: {}
- name: LineItem
  endpoint:
    path: /api/projects/orders/lineItems
    method: GET
    data_selector: lineItems
- name: CustomLineItem
  endpoint:
    path: /api/projects/orders/customLineItems
    method: GET
    data_selector: customLineItems
- name: CustomField
  endpoint:
    path: /api/projects/orders/customFields
    method: GET
    data_selector: customFields
- name: ShippingInfo
  endpoint:
    path: /api/projects/orders/shippingInfo
    method: GET
    data_selector: shippingInfos
- name: Address
  endpoint:
    path: /api/projects/orders/addresses
    method: GET
    data_selector: addresses
- name: TaxRate
  endpoint:
    path: /api/projects/orders/taxRates
    method: GET
    data_selector: taxRates
- name: CustomLineItem
  endpoint:
    path: /api/projects/carts#customlineitem
    method: GET
- name: Order
  endpoint:
    path: /api/projects/orders#order
    method: GET
- name: line_item
  endpoint:
    path: /api/projects/orders#order/lineItems
    method: GET
    data_selector: lineItems
    params: {}
- name: custom_line_item
  endpoint:
    path: /api/projects/orders#order/customLineItems
    method: GET
    data_selector: customLineItems
    params: {}
- name: custom_field
  endpoint:
    path: /api/projects/orders#order/customFields
    method: GET
    data_selector: customFields
    params: {}
- name: customers
  endpoint:
    path: /api/projects/customers
    method: GET
- name: carts
  endpoint:
    path: /api/projects/carts
    method: GET
- name: orders
  endpoint:
    path: /api/projects/orders
    method: GET
- name: reviews
  endpoint:
    path: /api/projects/reviews
    method: GET
- name: CustomLineItem
  endpoint:
    path: /api/projects/carts#customlineitem
    method: GET
    data_selector: records
- name: Order
  endpoint:
    path: /api/projects/orders#order
    method: GET
    data_selector: records
- name: Customer Groups
  endpoint:
    path: /api/projects/customerGroups
    method: GET
- name: Carts
  endpoint:
    path: /api/projects/carts
    method: GET
- name: Orders
  endpoint:
    path: /api/projects/orders
    method: GET
- name: Cart Discounts
  endpoint:
    path: /api/projects/cartDiscounts
    method: GET
- name: Channels
  endpoint:
    path: /api/projects/channels
    method: GET
- name: Stores
  endpoint:
    path: /api/projects/stores
    method: GET
- name: Product Selections
  endpoint:
    path: /api/projects/product-selections
    method: GET
- name: Business Units
  endpoint:
    path: /api/projects/business-units
    method: GET
- name: customers
  endpoint:
    path: /api/projects/customers
    method: GET
- name: customers
  endpoint:
    path: /api/projects/customers
    method: GET
    data_selector: customers
- name: carts
  endpoint:
    path: /api/projects/carts
    method: GET
    data_selector: carts
- name: orders
  endpoint:
    path: /api/projects/orders
    method: GET
    data_selector: orders
- name: reviews
  endpoint:
    path: /api/projects/reviews
    method: GET
    data_selector: reviews
- name: Customer
  endpoint:
    path: /customers
    method: GET
    data_selector: results
- name: CustomerDraft
  endpoint:
    path: /customers/draft
    method: POST
    data_selector: draft
- name: CustomerPagedQueryResponse
  endpoint:
    path: /customers/paged-query
    method: GET
    data_selector: results
- name: customerGroups
  endpoint:
    path: /api/projects/customerGroups
    method: GET
    data_selector: records
- name: customers
  endpoint:
    path: /api/projects/customers
    method: GET
    data_selector: records
- name: carts
  endpoint:
    path: /api/projects/carts
    method: GET
    data_selector: records
- name: orders
  endpoint:
    path: /api/projects/orders
    method: GET
    data_selector: records
- name: cartDiscounts
  endpoint:
    path: /api/projects/cartDiscounts
    method: GET
    data_selector: records
- name: channels
  endpoint:
    path: /api/projects/channels
    method: GET
    data_selector: records
- name: stores
  endpoint:
    path: /api/projects/stores
    method: GET
    data_selector: records
- name: productSelections
  endpoint:
    path: /api/projects/product-selections
    method: GET
    data_selector: records
- name: businessUnits
  endpoint:
    path: /api/projects/business-units
    method: GET
    data_selector: records
- name: CustomerChangePassword
  endpoint:
    path: /customers/change-password
    method: POST
    data_selector: id
    params: {}
- name: CustomerCreatePasswordResetToken
  endpoint:
    path: /customers/create-password-reset-token
    method: POST
    data_selector: email
    params: {}
- name: CustomerResetPassword
  endpoint:
    path: /customers/reset-password
    method: POST
    data_selector: tokenValue
    params: {}
- name: CustomerCreateEmailToken
  endpoint:
    path: /customers/create-email-token
    method: POST
    data_selector: id
    params: {}
- name: CustomerEmailVerify
  endpoint:
    path: /customers/email-verify
    method: POST
    data_selector: tokenValue
    params: {}
- name: Customer
  endpoint:
    path: /customers
    method: GET
    data_selector: results
- name: CustomerDraft
  endpoint:
    path: /customers/draft
    method: POST
    data_selector: results
- name: CustomerPagedQueryResponse
  endpoint:
    path: /customers/paged-query
    method: GET
    data_selector: results
- name: CustomerChangePassword
  endpoint:
    path: /customers/change-password
    method: POST
    data_selector: id
    params: {}
- name: CustomerCreatePasswordResetToken
  endpoint:
    path: /customers/create-password-reset-token
    method: POST
    data_selector: email
    params: {}
- name: CustomerResetPassword
  endpoint:
    path: /customers/reset-password
    method: POST
    data_selector: tokenValue
    params: {}
- name: CustomerCreateEmailToken
  endpoint:
    path: /customers/create-email-token
    method: POST
    data_selector: id
    params: {}
- name: CustomerEmailVerify
  endpoint:
    path: /customers/email-verify
    method: POST
    data_selector: tokenValue
    params: {}
- name: customer
  endpoint:
    path: /customers/{id}
    method: GET
    data_selector: Customer
- name: customer_by_key
  endpoint:
    path: /customers/key={key}
    method: GET
    data_selector: Customer
- name: customer_in_store
  endpoint:
    path: /in-store/key={storeKey}/customers/{id}
    method: GET
    data_selector: Customer
- name: customer_in_store_by_key
  endpoint:
    path: /in-store/key={storeKey}/customers/key={key}
    method: GET
    data_selector: Customer
- name: query_customers
  endpoint:
    path: /customers
    method: GET
    data_selector: CustomerPagedQueryResponse
- name: query_customers_in_store
  endpoint:
    path: /in-store/key={storeKey}/customers
    method: GET
    data_selector: CustomerPagedQueryResponse
- name: check_customer_exists
  endpoint:
    path: /customers/{id}
    method: HEAD
- name: check_customer_exists_by_key
  endpoint:
    path: /customers/key={key}
    method: HEAD
- name: check_customer_exists_by_query
  endpoint:
    path: /customers
    method: HEAD
- name: check_customer_exists_in_store
  endpoint:
    path: /in-store/key={storeKey}/customers/{id}
    method: HEAD
- name: customer
  endpoint:
    path: /customers/{id}
    method: GET
    data_selector: Customer
- name: customer_by_key
  endpoint:
    path: /customers/key={key}
    method: GET
    data_selector: Customer
- name: customer_in_store
  endpoint:
    path: /in-store/key={storeKey}/customers/{id}
    method: GET
    data_selector: Customer
- name: customer_in_store_by_key
  endpoint:
    path: /in-store/key={storeKey}/customers/key={key}
    method: GET
    data_selector: Customer
- name: query_customers
  endpoint:
    path: /customers
    method: GET
    data_selector: CustomerPagedQueryResponse
- name: query_customers_in_store
  endpoint:
    path: /in-store/key={storeKey}/customers
    method: GET
    data_selector: CustomerPagedQueryResponse
- name: check_customer_exists
  endpoint:
    path: /customers/{id}
    method: HEAD
- name: check_customer_exists_by_key
  endpoint:
    path: /customers/key={key}
    method: HEAD
- name: check_customer_exists_by_query
  endpoint:
    path: /customers
    method: HEAD
- name: check_customer_exists_in_store
  endpoint:
    path: /in-store/key={storeKey}/customers/{id}
    method: HEAD
- name: check_customer_exists_by_key
  endpoint:
    path: /in-store/key={storeKey}/customers/key={key}
    method: HEAD
- name: check_customer_exists_by_query
  endpoint:
    path: /in-store/key={storeKey}/customers
    method: HEAD
- name: create_customer
  endpoint:
    path: /customers
    method: POST
- name: create_customer_in_store
  endpoint:
    path: /in-store/key={storeKey}/customers
    method: POST
- name: update_customer_by_id
  endpoint:
    path: /customers/{id}
    method: POST
- name: update_customer_by_key
  endpoint:
    path: /customers/key={key}
    method: POST
- name: update_customer_in_store_by_id
  endpoint:
    path: /in-store/key={storeKey}/customers/{id}
    method: POST
- name: update_customer_in_store_by_key
  endpoint:
    path: /in-store/key={storeKey}/customers/key={key}
    method: POST
- name: customer
  endpoint:
    path: /{projectKey}/customers
    method: POST
    data_selector: customer
    params: {}
- name: customer_in_store
  endpoint:
    path: /{projectKey}/in-store/key={storeKey}/customers
    method: POST
    data_selector: customer
    params: {}
- name: customer_by_id
  endpoint:
    path: /{projectKey}/customers/{id}
    method: POST
    data_selector: customer
    params: {}
- name: customer_by_key
  endpoint:
    path: /{projectKey}/customers/key={key}
    method: POST
    data_selector: customer
    params: {}
- name: customer_in_store_by_id
  endpoint:
    path: /{projectKey}/in-store/key={storeKey}/customers/{id}
    method: POST
    data_selector: customer
    params: {}
- name: customer_in_store_by_key
  endpoint:
    path: /{projectKey}/in-store/key={storeKey}/customers/key={key}
    method: POST
    data_selector: customer
    params: {}
- name: setLocale
  endpoint:
    path: /setLocale
    method: POST
    data_selector: action
    params: {}
- name: setKey
  endpoint:
    path: /setKey
    method: POST
    data_selector: action
    params: {}
- name: setStores
  endpoint:
    path: /setStores
    method: POST
    data_selector: action
    params: {}
- name: addStore
  endpoint:
    path: /addStore
    method: POST
    data_selector: action
    params: {}
- name: removeStore
  endpoint:
    path: /removeStore
    method: POST
    data_selector: action
    params: {}
- name: setAuthenticationMode
  endpoint:
    path: /setAuthenticationMode
    method: POST
    data_selector: action
    params: {}
- name: addCustomerGroupAssignment
  endpoint:
    path: /addCustomerGroupAssignment
    method: POST
    data_selector: action
    params: {}
- name: removeCustomerGroupAssignment
  endpoint:
    path: /removeCustomerGroupAssignment
    method: POST
    data_selector: action
    params: {}
- name: setCustomerGroupAssignments
  endpoint:
    path: /setCustomerGroupAssignments
    method: POST
    data_selector: action
    params: {}
- name: change_password_customer
  endpoint:
    path: /customers/password
    method: POST
    data_selector: Customer
    params: {}
- name: change_password_customer_in_store
  endpoint:
    path: /in-store/key={storeKey}/customers/password
    method: POST
    data_selector: Customer
    params: {}
- name: authenticate_customer
  endpoint:
    path: /login
    method: POST
    data_selector: CustomerSignInResult
    params: {}
- name: authenticate_customer_in_store
  endpoint:
    path: /in-store/key={storeKey}/login
    method: POST
    data_selector: CustomerSignInResult
    params: {}
- name: create_password_reset_token_customer
  endpoint:
    path: /customers/password-token
    method: POST
    data_selector: CustomerToken
    params: {}
- name: get_customer_by_password_token
  endpoint:
    path: /customers/password-token={passwordToken}
    method: GET
    data_selector: Customer
    params: {}
- name: reset_password_customer
  endpoint:
    path: /customers/password/reset
    method: POST
    data_selector: Customer
    params: {}
- name: create_password_reset_token_customer_in_store
  endpoint:
    path: /in-store/key={storeKey}/customers/password-token
    method: POST
    data_selector: CustomerToken
    params: {}
- name: get_customer_in_store_by_password_token
  endpoint:
    path: /in-store/key={storeKey}/customers/password-token={passwordToken}
    method: GET
    data_selector: Customer
    params: {}
- name: changeEmail
  endpoint:
    path: /changeEmail
    method: POST
    data_selector: email
    params: {}
- name: setFirstName
  endpoint:
    path: /setFirstName
    method: POST
    data_selector: firstName
    params: {}
- name: setLastName
  endpoint:
    path: /setLastName
    method: POST
    data_selector: lastName
    params: {}
- name: setMiddleName
  endpoint:
    path: /setMiddleName
    method: POST
    data_selector: middleName
    params: {}
- name: setTitle
  endpoint:
    path: /setTitle
    method: POST
    data_selector: title
    params: {}
- name: setSalutation
  endpoint:
    path: /setSalutation
    method: POST
    data_selector: salutation
    params: {}
- name: addAddress
  endpoint:
    path: /addAddress
    method: POST
    data_selector: address
    params: {}
- name: changeAddress
  endpoint:
    path: /changeAddress
    method: POST
    data_selector: address
    params: {}
- name: removeAddress
  endpoint:
    path: /removeAddress
    method: POST
    data_selector: addressId
    params: {}
- name: setDefaultShippingAddress
  endpoint:
    path: /setDefaultShippingAddress
    method: POST
    data_selector: addressId
    params: {}
- name: addShippingAddressId
  endpoint:
    path: /addShippingAddressId
    method: POST
    data_selector: addressId
    params: {}
- name: removeShippingAddressId
  endpoint:
    path: /removeShippingAddressId
    method: POST
    data_selector: addressId
    params: {}
- name: setDefaultBillingAddress
  endpoint:
    path: /setDefaultBillingAddress
    method: POST
    data_selector: addressId
    params: {}
- name: addBillingAddressId
  endpoint:
    path: /addBillingAddressId
    method: POST
    data_selector: addressId
    params: {}
- name: removeBillingAddressId
  endpoint:
    path: /removeBillingAddressId
    method: POST
    data_selector: addressId
    params: {}
- name: setCustomerGroup
  endpoint:
    path: /setCustomerGroup
    method: POST
    data_selector: customerGroup
    params: {}
- name: setCustomerNumber
  endpoint:
    path: /setCustomerNumber
    method: POST
    data_selector: customerNumber
    params: {}
- name: setExternalId
  endpoint:
    path: /setExternalId
    method: POST
    data_selector: externalId
    params: {}
- name: setCompanyName
  endpoint:
    path: /setCompanyName
    method: POST
    data_selector: companyName
    params: {}
- name: setDateOfBirth
  endpoint:
    path: /setDateOfBirth
    method: POST
    data_selector: dateOfBirth
    params: {}
- name: setVatId
  endpoint:
    path: /setVatId
    method: POST
    data_selector: vatId
    params: {}
- name: setCustomType
  endpoint:
    path: /setCustomType
    method: POST
    data_selector: type
    params: {}
- name: setCustomField
  endpoint:
    path: /setCustomField
    method: POST
    data_selector: name
    params: {}
- name: setAddressCustomType
  endpoint:
    path: /setAddressCustomType
    method: POST
    data_selector: type
    params: {}
- name: setAddressCustomField
  endpoint:
    path: /setAddressCustomField
    method: POST
    data_selector: name
    params: {}
- name: setLocale
  endpoint:
    path: /setLocale
    method: POST
    data_selector: locale
    params: {}
- name: reset_customer_password
  endpoint:
    path: /in-store/key={storeKey}/customers/password/reset
    method: POST
    data_selector: CustomerPasswordUpdated
    params: {}
- name: create_email_token
  endpoint:
    path: /customers/email-token
    method: POST
    data_selector: CustomerEmailTokenCreated
    params: {}
- name: get_customer_by_email_token
  endpoint:
    path: /customers/email-token={emailToken}
    method: GET
    data_selector: Customer
    params: {}
- name: verify_email
  endpoint:
    path: /customers/email/confirm
    method: POST
    data_selector: CustomerEmailVerified
    params: {}
- name: delete_customer
  endpoint:
    path: /customers/{id}
    method: DELETE
    data_selector: CustomerDeleted
    params: {}
- name: setLocale
  endpoint:
    path: /setLocale
    method: POST
    data_selector: ''
    params: {}
- name: setKey
  endpoint:
    path: /setKey
    method: POST
    data_selector: ''
    params: {}
- name: setStores
  endpoint:
    path: /setStores
    method: POST
    data_selector: ''
    params: {}
- name: addStore
  endpoint:
    path: /addStore
    method: POST
    data_selector: ''
    params: {}
- name: removeStore
  endpoint:
    path: /removeStore
    method: POST
    data_selector: ''
    params: {}
- name: setAuthenticationMode
  endpoint:
    path: /setAuthenticationMode
    method: POST
    data_selector: ''
    params: {}
- name: addCustomerGroupAssignment
  endpoint:
    path: /addCustomerGroupAssignment
    method: POST
    data_selector: ''
    params: {}
- name: removeCustomerGroupAssignment
  endpoint:
    path: /removeCustomerGroupAssignment
    method: POST
    data_selector: ''
    params: {}
- name: setCustomerGroupAssignments
  endpoint:
    path: /setCustomerGroupAssignments
    method: POST
    data_selector: ''
    params: {}
- name: customer
  endpoint:
    path: /customers/key={key}
    method: DELETE
    data_selector: Customer
    params:
      version: last seen version of the resource
      dataErasure: 'true'
- name: Search Customers
  endpoint:
    path: /customers/search
    method: POST
    data_selector: results
- name: Get indexing status of Customer Search
  endpoint:
    path: /customers/search/indexing-status
    method: GET
- name: Check if Customer Search index exists
  endpoint:
    path: /customers/search
    method: HEAD
- name: Customer
  endpoint:
    path: /api/projects/customers
    method: GET
- name: Custom Fields
  endpoint:
    path: /api/projects/custom-fields
    method: GET
- name: change_password_customer
  endpoint:
    path: /customers/password
    method: POST
    data_selector: CustomerPasswordUpdated
    params: {}
- name: change_password_customer_in_store
  endpoint:
    path: /in-store/key={storeKey}/customers/password
    method: POST
    data_selector: CustomerPasswordUpdated
    params: {}
- name: authenticate_customer
  endpoint:
    path: /login
    method: POST
    data_selector: CustomerSignInResult
    params: {}
- name: authenticate_customer_in_store
  endpoint:
    path: /in-store/key={storeKey}/login
    method: POST
    data_selector: CustomerSignInResult
    params: {}
- name: create_password_reset_token_customer
  endpoint:
    path: /customers/password-token
    method: POST
    data_selector: CustomerToken
    params: {}
- name: reset_password_customer
  endpoint:
    path: /customers/password/reset
    method: POST
    data_selector: CustomerPasswordUpdated
    params: {}
- name: get_customer_by_password_token
  endpoint:
    path: /customers/password-token={passwordToken}
    method: GET
    data_selector: Customer
    params: {}
- name: get_customer_in_store_by_password_token
  endpoint:
    path: /in-store/key={storeKey}/customers/password-token={passwordToken}
    method: GET
    data_selector: Customer
    params: {}
- name: customer_group
  endpoint:
    path: /customer-groups
    method: GET
    data_selector: results
- name: customer_group_by_id
  endpoint:
    path: /customer-groups/{id}
    method: GET
    data_selector: CustomerGroup
- name: customer_group_by_key
  endpoint:
    path: /customer-groups/key={key}
    method: GET
    data_selector: CustomerGroup
- name: check_customer_group_exists_by_id
  endpoint:
    path: /customer-groups/{id}
    method: HEAD
- name: check_customer_group_exists_by_key
  endpoint:
    path: /customer-groups/key={key}
    method: HEAD
- name: reset_customer_password
  endpoint:
    path: /in-store/key={storeKey}/customers/password/reset
    method: POST
- name: create_email_token
  endpoint:
    path: /customers/email-token
    method: POST
- name: get_customer_by_email_token
  endpoint:
    path: /customers/email-token={emailToken}
    method: GET
- name: verify_email
  endpoint:
    path: /customers/email/confirm
    method: POST
- name: delete_customer
  endpoint:
    path: /customers/{id}
    method: DELETE
- name: customer
  endpoint:
    path: /customers/key={key}
    method: DELETE
    params:
      version: '{version}'
- name: customer_group
  endpoint:
    path: /customer-groups
    method: POST
    data_selector: CustomerGroup
    params: {}
- name: customer_group_by_id
  endpoint:
    path: /customer-groups/{id}
    method: POST
    data_selector: CustomerGroup
    params: {}
- name: customer_group_by_key
  endpoint:
    path: /customer-groups/key={key}
    method: POST
    data_selector: CustomerGroup
    params: {}
- name: delete_customer_group_by_id
  endpoint:
    path: /customer-groups/{id}
    method: DELETE
    data_selector: CustomerGroup
    params: {}
- name: delete_customer_group_by_key
  endpoint:
    path: /customer-groups/key={key}
    method: DELETE
    data_selector: CustomerGroup
    params: {}
- name: search_customers
  endpoint:
    path: /customers/search
    method: POST
- name: get_indexing_status
  endpoint:
    path: /customers/search/indexing-status
    method: GET
- name: check_if_index_exists
  endpoint:
    path: /customers/search
    method: HEAD
- name: my_customer_profile
  endpoint:
    path: /me/profile
    method: GET
- name: my_business_units
  endpoint:
    path: /me/business-units
    method: GET
- name: my_carts
  endpoint:
    path: /me/carts
    method: GET
- name: my_orders
  endpoint:
    path: /me/orders
    method: GET
- name: my_payments
  endpoint:
    path: /me/payments
    method: GET
- name: my_quote_requests
  endpoint:
    path: /me/quote-requests
    method: GET
- name: my_quotes
  endpoint:
    path: /me/quotes
    method: GET
- name: my_shopping_lists
  endpoint:
    path: /me/shoppingLists
    method: GET
- name: customers
  endpoint:
    path: /api/projects/customers
    method: GET
    data_selector: query
- name: get_my_customer
  endpoint:
    path: /me
    method: GET
    data_selector: Customer
    params:
      limit: 20
      offset: 0
      withTotal: true
- name: get_my_customer_in_store
  endpoint:
    path: /in-store/key={storeKey}/me
    method: GET
    data_selector: Customer
    params:
      limit: 20
      offset: 0
      withTotal: true
- name: customer_group
  endpoint:
    path: /customer-groups/{id}
    method: GET
    data_selector: CustomerGroup
- name: customer_group_by_key
  endpoint:
    path: /customer-groups/key={key}
    method: GET
    data_selector: CustomerGroup
- name: query_customer_groups
  endpoint:
    path: /customer-groups
    method: GET
    data_selector: CustomerGroupPagedQueryResponse
    params:
      limit: 20
      offset: 0
- name: check_customer_group_exists_by_id
  endpoint:
    path: /customer-groups/{id}
    method: HEAD
- name: check_customer_group_exists_by_key
  endpoint:
    path: /customer-groups/key={key}
    method: HEAD
- name: create_customer
  endpoint:
    path: /me/signup
    method: POST
- name: create_customer_in_store
  endpoint:
    path: /in-store/key={storeKey}/me/signup
    method: POST
- name: authenticate_customer
  endpoint:
    path: /me/login
    method: POST
- name: authenticate_customer_in_store
  endpoint:
    path: /in-store/key={storeKey}/me/login
    method: POST
- name: update_customer
  endpoint:
    path: /me
    method: POST
- name: update_customer_in_store
  endpoint:
    path: /in-store/key={storeKey}/me
    method: POST
- name: customer_group
  endpoint:
    path: /customer-groups
    method: GET
    data_selector: records
- name: customer_group_create
  endpoint:
    path: /customer-groups
    method: POST
    data_selector: records
- name: customer_group_update_id
  endpoint:
    path: /customer-groups/{id}
    method: POST
    data_selector: records
- name: customer_group_update_key
  endpoint:
    path: /customer-groups/key={key}
    method: POST
    data_selector: records
- name: customer_group_delete_id
  endpoint:
    path: /customer-groups/{id}
    method: DELETE
    data_selector: records
- name: customer_group_delete_key
  endpoint:
    path: /customer-groups/key={key}
    method: DELETE
    data_selector: records
- name: My Customer Profile
  endpoint:
    path: /api/projects/me-profile
    method: GET
- name: My Business Units
  endpoint:
    path: /api/projects/me-business-units
    method: GET
- name: My Carts
  endpoint:
    path: /api/projects/me-carts
    method: GET
- name: My Orders
  endpoint:
    path: /api/projects/me-orders
    method: GET
- name: My Payments
  endpoint:
    path: /api/projects/me-payments
    method: GET
- name: My Quote Requests
  endpoint:
    path: /api/projects/me-quote-requests
    method: GET
- name: My Quotes
  endpoint:
    path: /api/projects/me-quotes
    method: GET
- name: My Shopping Lists
  endpoint:
    path: /api/projects/me-shoppingLists
    method: GET
- name: Get My Customer
  endpoint:
    path: /{projectKey}/me
    method: GET
    data_selector: Customer
    params:
      limit: 20
      offset: 0
      withTotal: true
- name: Get My Customer in Store
  endpoint:
    path: /{projectKey}/in-store/key={storeKey}/me
    method: GET
    data_selector: Customer
    params:
      limit: 20
      offset: 0
      withTotal: true
- name: changeEmail
  endpoint:
    path: /api/projects/messages/customer-messages#ctp:api:type:CustomerEmailChangedMessage
    method: POST
    data_selector: action
    params: {}
- name: setFirstName
  endpoint:
    path: /api/projects/messages/customer-messages#ctp:api:type:CustomerFirstNameSetMessage
    method: POST
    data_selector: action
    params: {}
- name: setLastName
  endpoint:
    path: /api/projects/messages/customer-messages#ctp:api:type:CustomerLastNameSetMessage
    method: POST
    data_selector: action
    params: {}
- name: setMiddleName
  endpoint:
    path: /api/projects/messages/customer-messages#ctp:api:type:CustomerMiddleNameSetMessage
    method: POST
    data_selector: action
    params: {}
- name: setTitle
  endpoint:
    path: /api/projects/messages/customer-messages#ctp:api:type:CustomerTitleSetMessage
    method: POST
    data_selector: action
    params: {}
- name: setSalutation
  endpoint:
    path: /api/projects/messages/customer-messages#ctp:api:type:CustomerSalutationSetMessage
    method: POST
    data_selector: action
    params: {}
- name: addAddress
  endpoint:
    path: /api/projects/messages/customer-messages#ctp:api:type:CustomerAddressAddedMessage
    method: POST
    data_selector: action
    params: {}
- name: changeAddress
  endpoint:
    path: /api/projects/messages/customer-messages#ctp:api:type:CustomerAddressChangedMessage
    method: POST
    data_selector: action
    params: {}
- name: removeAddress
  endpoint:
    path: /api/projects/messages/customer-messages#ctp:api:type:CustomerAddressRemovedMessage
    method: POST
    data_selector: action
    params: {}
- name: setDefaultShippingAddress
  endpoint:
    path: /api/projects/messages/customer-messages#ctp:api:type:CustomerDefaultShippingAddressSetMessage
    method: POST
    data_selector: action
    params: {}
- name: addShippingAddressId
  endpoint:
    path: /api/projects/messages/customer-messages#ctp:api:type:CustomerShippingAddressIdAddedMessage
    method: POST
    data_selector: action
    params: {}
- name: removeShippingAddressId
  endpoint:
    path: /api/projects/messages/customer-messages#ctp:api:type:CustomerShippingAddressIdRemovedMessage
    method: POST
    data_selector: action
    params: {}
- name: setDefaultBillingAddress
  endpoint:
    path: /api/projects/messages/customer-messages#ctp:api:type:CustomerDefaultBillingAddressSetMessage
    method: POST
    data_selector: action
    params: {}
- name: addBillingAddressId
  endpoint:
    path: /api/projects/messages/customer-messages#ctp:api:type:CustomerBillingAddressIdAddedMessage
    method: POST
    data_selector: action
    params: {}
- name: removeBillingAddressId
  endpoint:
    path: /api/projects/messages/customer-messages#ctp:api:type:CustomerBillingAddressIdRemovedMessage
    method: POST
    data_selector: action
    params: {}
- name: setCompanyName
  endpoint:
    path: /api/projects/messages/customer-messages#ctp:api:type:CustomerCompanyNameSetMessage
    method: POST
    data_selector: action
    params: {}
- name: setDateOfBirth
  endpoint:
    path: /api/projects/messages/customer-messages#ctp:api:type:CustomerDateOfBirthSetMessage
    method: POST
    data_selector: action
    params: {}
- name: create_customer
  endpoint:
    path: /me/signup
    method: POST
- name: create_customer_in_store
  endpoint:
    path: /in-store/key={storeKey}/me/signup
    method: POST
- name: authenticate_customer
  endpoint:
    path: /me/login
    method: POST
- name: authenticate_customer_in_store
  endpoint:
    path: /in-store/key={storeKey}/me/login
    method: POST
- name: update_customer
  endpoint:
    path: /me
    method: POST
- name: update_customer_in_store
  endpoint:
    path: /in-store/key={storeKey}/me
    method: POST
- name: Get My BusinessUnit by ID
  endpoint:
    path: /{id}
    method: GET
- name: Get My BusinessUnit by Key
  endpoint:
    path: /key={key}
    method: GET
- name: Query My BusinessUnits
  endpoint:
    path: ''
    method: GET
    params:
      limit: 20
      offset: 0
- name: check_business_unit_by_id
  endpoint:
    path: /me/business-units/{id}
    method: HEAD
- name: check_business_unit_by_key
  endpoint:
    path: /me/business-units/key={key}
    method: HEAD
- name: check_business_unit_by_query
  endpoint:
    path: /me/business-units
    method: HEAD
- name: create_business_unit
  endpoint:
    path: /me/business-units
    method: POST
- name: create_associate_for_business_unit
  endpoint:
    path: /in-business-unit/key={businessUnitKey}/me/customers
    method: POST
- name: update_business_unit_by_id
  endpoint:
    path: /me/business-units/{id}
    method: POST
- name: update_business_unit_by_key
  endpoint:
    path: /me/business-units/key={key}
    method: POST
- name: changeEmail
  endpoint:
    path: /api/projects/messages/customer-messages#ctp:api:type:CustomerEmailChangedMessage
    method: POST
    data_selector: action
    params: {}
- name: setFirstName
  endpoint:
    path: /api/projects/messages/customer-messages#ctp:api:type:CustomerFirstNameSetMessage
    method: POST
    data_selector: action
    params: {}
- name: setLastName
  endpoint:
    path: /api/projects/messages/customer-messages#ctp:api:type:CustomerLastNameSetMessage
    method: POST
    data_selector: action
    params: {}
- name: setMiddleName
  endpoint:
    path: /api/projects/messages/customer-messages#ctp:api:type:CustomerMiddleNameSetMessage
    method: POST
    data_selector: action
    params: {}
- name: setTitle
  endpoint:
    path: /api/projects/messages/customer-messages#ctp:api:type:CustomerTitleSetMessage
    method: POST
    data_selector: action
    params: {}
- name: setSalutation
  endpoint:
    path: /api/projects/messages/customer-messages#ctp:api:type:CustomerSalutationSetMessage
    method: POST
    data_selector: action
    params: {}
- name: addAddress
  endpoint:
    path: /api/projects/messages/customer-messages#ctp:api:type:CustomerAddressAddedMessage
    method: POST
    data_selector: action
    params: {}
- name: changeAddress
  endpoint:
    path: /api/projects/messages/customer-messages#ctp:api:type:CustomerAddressChangedMessage
    method: POST
    data_selector: action
    params: {}
- name: removeAddress
  endpoint:
    path: /api/projects/messages/customer-messages#ctp:api:type:CustomerAddressRemovedMessage
    method: POST
    data_selector: action
    params: {}
- name: setDefaultShippingAddress
  endpoint:
    path: /api/projects/messages/customer-messages#ctp:api:type:CustomerDefaultShippingAddressSetMessage
    method: POST
    data_selector: action
    params: {}
- name: addShippingAddressId
  endpoint:
    path: /api/projects/messages/customer-messages#ctp:api:type:CustomerShippingAddressIdAddedMessage
    method: POST
    data_selector: action
    params: {}
- name: removeShippingAddressId
  endpoint:
    path: /api/projects/messages/customer-messages#ctp:api:type:CustomerShippingAddressIdRemovedMessage
    method: POST
    data_selector: action
    params: {}
- name: setDefaultBillingAddress
  endpoint:
    path: /api/projects/messages/customer-messages#ctp:api:type:CustomerDefaultBillingAddressSetMessage
    method: POST
    data_selector: action
    params: {}
- name: addBillingAddressId
  endpoint:
    path: /api/projects/messages/customer-messages#ctp:api:type:CustomerBillingAddressIdAddedMessage
    method: POST
    data_selector: action
    params: {}
- name: removeBillingAddressId
  endpoint:
    path: /api/projects/messages/customer-messages#ctp:api:type:CustomerBillingAddressIdRemovedMessage
    method: POST
    data_selector: action
    params: {}
- name: setCompanyName
  endpoint:
    path: /api/projects/messages/customer-messages#ctp:api:type:CustomerCompanyNameSetMessage
    method: POST
    data_selector: action
    params: {}
- name: setDateOfBirth
  endpoint:
    path: /api/projects/messages/customer-messages#ctp:api:type:CustomerDateOfBirthSetMessage
    method: POST
    data_selector: action
    params: {}
- name: Get My BusinessUnit by ID
  endpoint:
    path: /me/business-units/{id}
    method: GET
- name: Get My BusinessUnit by Key
  endpoint:
    path: /me/business-units/key={key}
    method: GET
- name: Query My BusinessUnits
  endpoint:
    path: /me/business-units
    method: GET
- name: addAddress
  endpoint:
    path: /addAddress
    method: POST
    data_selector: action
- name: addBillingAddressId
  endpoint:
    path: /addBillingAddressId
    method: POST
    data_selector: action
- name: addShippingAddressId
  endpoint:
    path: /addShippingAddressId
    method: POST
    data_selector: action
- name: changeAddress
  endpoint:
    path: /changeAddress
    method: POST
    data_selector: action
- name: changeAssociate
  endpoint:
    path: /changeAssociate
    method: POST
    data_selector: action
- name: changeName
  endpoint:
    path: /changeName
    method: POST
    data_selector: action
- name: changeParentUnit
  endpoint:
    path: /changeParentUnit
    method: POST
    data_selector: action
- name: removeAddress
  endpoint:
    path: /removeAddress
    method: POST
    data_selector: action
- name: removeAssociate
  endpoint:
    path: /removeAssociate
    method: POST
    data_selector: action
- name: removeBillingAddressId
  endpoint:
    path: /removeBillingAddressId
    method: POST
    data_selector: action
- name: removeShippingAddressId
  endpoint:
    path: /removeShippingAddressId
    method: POST
    data_selector: action
- name: setAddressCustomField
  endpoint:
    path: /setAddressCustomField
    method: POST
    data_selector: action
- name: setAddressCustomType
  endpoint:
    path: /setAddressCustomType
    method: POST
    data_selector: action
- name: setContactEmail
  endpoint:
    path: /setContactEmail
    method: POST
    data_selector: action
- name: setCustomField
  endpoint:
    path: /setCustomField
    method: POST
    data_selector: action
- name: setCustomType
  endpoint:
    path: /setCustomType
    method: POST
    data_selector: action
- name: setCustomType
  endpoint:
    path: /setCustomType
    method: POST
    data_selector: ''
    params: {}
- name: setDefaultBillingAddress
  endpoint:
    path: /setDefaultBillingAddress
    method: POST
    data_selector: ''
    params: {}
- name: setDefaultShippingAddress
  endpoint:
    path: /setDefaultShippingAddress
    method: POST
    data_selector: ''
    params: {}
- name: business_unit
  endpoint:
    path: /me/business-units/{id}
    method: POST
    data_selector: BusinessUnit
    params: {}
- name: business_unit_by_key
  endpoint:
    path: /me/business-units/key={key}
    method: POST
    data_selector: BusinessUnit
    params: {}
- name: business_units
  endpoint:
    path: /me/business-units
    method: HEAD
    data_selector: BusinessUnit
    params:
      where: QueryPredicate
- name: business_unit_exists_by_id
  endpoint:
    path: /me/business-units/{id}
    method: HEAD
    data_selector: BusinessUnit
    params: {}
- name: business_unit_exists_by_key
  endpoint:
    path: /me/business-units/key={key}
    method: HEAD
    data_selector: BusinessUnit
    params: {}
- name: get_my_cart_by_id
  endpoint:
    path: /me/carts/{id}
    method: GET
- name: get_my_active_cart
  endpoint:
    path: /me/active-cart
    method: GET
- name: my_cart_by_id
  endpoint:
    path: /in-store/key={storeKey}/me/carts/{id}
    method: GET
    data_selector: Cart
- name: active_cart_in_store
  endpoint:
    path: /in-store/key={storeKey}/me/active-cart
    method: GET
    data_selector: Cart
- name: my_carts
  endpoint:
    path: /me/carts
    method: GET
    data_selector: CartPagedQueryResponse
- name: addAddress
  endpoint:
    path: /addAddress
    method: POST
    data_selector: action
    params: {}
- name: addBillingAddressId
  endpoint:
    path: /addBillingAddressId
    method: POST
    data_selector: action
    params: {}
- name: addShippingAddressId
  endpoint:
    path: /addShippingAddressId
    method: POST
    data_selector: action
    params: {}
- name: changeAddress
  endpoint:
    path: /changeAddress
    method: POST
    data_selector: action
    params: {}
- name: changeAssociate
  endpoint:
    path: /changeAssociate
    method: POST
    data_selector: action
    params: {}
- name: changeName
  endpoint:
    path: /changeName
    method: POST
    data_selector: action
    params: {}
- name: changeParentUnit
  endpoint:
    path: /changeParentUnit
    method: POST
    data_selector: action
    params: {}
- name: removeAddress
  endpoint:
    path: /removeAddress
    method: POST
    data_selector: action
    params: {}
- name: removeAssociate
  endpoint:
    path: /removeAssociate
    method: POST
    data_selector: action
    params: {}
- name: removeBillingAddressId
  endpoint:
    path: /removeBillingAddressId
    method: POST
    data_selector: action
    params: {}
- name: removeShippingAddressId
  endpoint:
    path: /removeShippingAddressId
    method: POST
    data_selector: action
    params: {}
- name: setAddressCustomField
  endpoint:
    path: /setAddressCustomField
    method: POST
    data_selector: action
    params: {}
- name: setAddressCustomType
  endpoint:
    path: /setAddressCustomType
    method: POST
    data_selector: action
    params: {}
- name: setContactEmail
  endpoint:
    path: /setContactEmail
    method: POST
    data_selector: action
    params: {}
- name: setCustomField
  endpoint:
    path: /setCustomField
    method: POST
    data_selector: action
    params: {}
- name: setCustomType
  endpoint:
    path: /setCustomType
    method: POST
    data_selector: action
    params: {}
- name: my_carts
  endpoint:
    path: /me/carts
    method: HEAD
    data_selector: ''
    params: {}
- name: my_active_cart
  endpoint:
    path: /me/active-cart
    method: HEAD
    data_selector: ''
    params: {}
- name: my_carts_in_store
  endpoint:
    path: /in-store/key={storeKey}/me/carts
    method: HEAD
    data_selector: ''
    params: {}
- name: my_active_cart_in_store
  endpoint:
    path: /in-store/key={storeKey}/me/active-cart
    method: HEAD
    data_selector: ''
    params: {}
- name: setCustomType
  endpoint:
    path: /setCustomType
    method: POST
    data_selector: action
    params: {}
- name: setDefaultBillingAddress
  endpoint:
    path: /setDefaultBillingAddress
    method: POST
    data_selector: action
    params: {}
- name: setDefaultShippingAddress
  endpoint:
    path: /setDefaultShippingAddress
    method: POST
    data_selector: action
    params: {}
- name: get_my_cart_by_id
  endpoint:
    path: /{projectKey}/me/carts/{id}
    method: GET
- name: get_my_active_cart
  endpoint:
    path: /{projectKey}/me/active-cart
    method: GET
- name: create_cart
  endpoint:
    path: /me/carts
    method: POST
    data_selector: Cart
- name: create_cart_in_store
  endpoint:
    path: /in-store/key={storeKey}/me/carts
    method: POST
    data_selector: Cart
- name: replicate_cart
  endpoint:
    path: /me/carts/replicate
    method: POST
    data_selector: Cart
- name: update_cart
  endpoint:
    path: /me/carts/{id}
    method: POST
    data_selector: Cart
- name: update_cart_in_store
  endpoint:
    path: /in-store/key={storeKey}/me/carts/{id}
    method: POST
    data_selector: Cart
- name: cart_actions
  endpoint:
    path: /carts/actions
    method: POST
    data_selector: actions
    params: {}
- name: get_my_cart_by_id
  endpoint:
    path: /{projectKey}/in-store/key={storeKey}/me/carts/{id}
    method: GET
- name: get_my_active_cart
  endpoint:
    path: /{projectKey}/in-store/key={storeKey}/me/active-cart
    method: GET
- name: query_my_carts
  endpoint:
    path: /{projectKey}/me/carts
    method: GET
- name: my_carts
  endpoint:
    path: /me/carts
    method: HEAD
- name: active_cart
  endpoint:
    path: /me/active-cart
    method: HEAD
- name: my_carts_in_store
  endpoint:
    path: /in-store/key={storeKey}/me/carts
    method: HEAD
- name: active_cart_in_store
  endpoint:
    path: /in-store/key={storeKey}/me/active-cart
    method: HEAD
- name: setLocale
  endpoint:
    path: /setLocale
    method: POST
    data_selector: action
    params: {}
- name: setCountry
  endpoint:
    path: /setCountry
    method: POST
    data_selector: action
    params: {}
- name: setDeleteDaysAfterLastModification
  endpoint:
    path: /setDeleteDaysAfterLastModification
    method: POST
    data_selector: action
    params: {}
- name: setCustomType
  endpoint:
    path: /setCustomType
    method: POST
    data_selector: action
    params: {}
- name: setCustomField
  endpoint:
    path: /setCustomField
    method: POST
    data_selector: action
    params: {}
- name: recalculate
  endpoint:
    path: /recalculate
    method: POST
    data_selector: action
    params: {}
- name: changeLineItemQuantity
  endpoint:
    path: /changeLineItemQuantity
    method: POST
    data_selector: action
    params: {}
- name: changeLineItemsOrder
  endpoint:
    path: /changeLineItemsOrder
    method: POST
    data_selector: action
    params: {}
- name: setLineItemDistributionChannel
  endpoint:
    path: /setLineItemDistributionChannel
    method: POST
    data_selector: action
    params: {}
- name: setLineItemSupplyChannel
  endpoint:
    path: /setLineItemSupplyChannel
    method: POST
    data_selector: action
    params: {}
- name: setLineItemShippingDetails
  endpoint:
    path: /setLineItemShippingDetails
    method: POST
    data_selector: action
    params: {}
- name: applyDeltaToLineItemShippingDetailsTargets
  endpoint:
    path: /applyDeltaToLineItemShippingDetailsTargets
    method: POST
    data_selector: action
    params: {}
- name: setLineItemCustomType
  endpoint:
    path: /setLineItemCustomType
    method: POST
    data_selector: action
    params: {}
- name: setLineItemCustomField
  endpoint:
    path: /setLineItemCustomField
    method: POST
    data_selector: action
    params: {}
- name: setLineItemRecurrenceInfo
  endpoint:
    path: /setLineItemRecurrenceInfo
    method: POST
    data_selector: action
    params: {}
- name: setCustomLineItemRecurrenceInfo
  endpoint:
    path: /setCustomLineItemRecurrenceInfo
    method: POST
    data_selector: action
    params: {}
- name: create_my_cart
  endpoint:
    path: /me/carts
    method: POST
- name: create_my_cart_in_store
  endpoint:
    path: /in-store/key={storeKey}/me/carts
    method: POST
- name: replicate_my_cart
  endpoint:
    path: /me/carts/replicate
    method: POST
- name: update_my_cart
  endpoint:
    path: /me/carts/{id}
    method: POST
- name: update_my_cart_in_store
  endpoint:
    path: /in-store/key={storeKey}/me/carts/{id}
    method: POST
- name: delete_my_cart
  endpoint:
    path: /me/carts/{id}
    method: DELETE
- name: delete_my_cart_in_store
  endpoint:
    path: /in-store/key={storeKey}/me/carts/{id}
    method: DELETE
- name: order
  endpoint:
    path: /me/orders/{id}
    method: GET
    data_selector: Order
- name: setCustomerEmail
  endpoint:
    path: /setCustomerEmail
    method: POST
    data_selector: action
- name: setBusinessUnit
  endpoint:
    path: /setBusinessUnit
    method: POST
    data_selector: action
- name: addLineItem
  endpoint:
    path: /addLineItem
    method: POST
    data_selector: action
- name: removeLineItem
  endpoint:
    path: /removeLineItem
    method: POST
    data_selector: action
- name: addDiscountCode
  endpoint:
    path: /addDiscountCode
    method: POST
    data_selector: action
- name: removeDiscountCode
  endpoint:
    path: /removeDiscountCode
    method: POST
    data_selector: action
- name: addPayment
  endpoint:
    path: /addPayment
    method: POST
    data_selector: action
- name: removePayment
  endpoint:
    path: /removePayment
    method: POST
    data_selector: action
- name: changeTaxMode
  endpoint:
    path: /changeTaxMode
    method: POST
    data_selector: action
- name: setBillingAddress
  endpoint:
    path: /setBillingAddress
    method: POST
    data_selector: action
- name: setShippingAddress
  endpoint:
    path: /setShippingAddress
    method: POST
    data_selector: action
- name: addItemShippingAddress
  endpoint:
    path: /addItemShippingAddress
    method: POST
    data_selector: action
- name: removeItemShippingAddress
  endpoint:
    path: /removeItemShippingAddress
    method: POST
    data_selector: action
- name: updateItemShippingAddress
  endpoint:
    path: /updateItemShippingAddress
    method: POST
    data_selector: action
- name: setShippingMethod
  endpoint:
    path: /setShippingMethod
    method: POST
    data_selector: action
- name: setLocale
  endpoint:
    path: /setLocale
    method: POST
    data_selector: action
- name: my_order_in_store
  endpoint:
    path: /in-store/key={storeKey}/me/orders/{id}
    method: GET
    data_selector: Order
- name: my_orders
  endpoint:
    path: /me/orders
    method: GET
    data_selector: OrderPagedQueryResponse
- name: my_orders
  endpoint:
    path: /in-store/key={storeKey}/me/orders
    method: GET
- name: my_order_exists_by_id
  endpoint:
    path: /me/orders/{id}
    method: HEAD
- name: my_order_exists_by_query
  endpoint:
    path: /me/orders
    method: HEAD
- name: my_order_exists_in_store_by_id
  endpoint:
    path: /in-store/key={storeKey}/me/orders/{id}
    method: HEAD
- name: my_order_exists_in_store_by_query
  endpoint:
    path: /in-store/key={storeKey}/me/orders
    method: HEAD
- name: create_my_order_from_my_cart
  endpoint:
    path: /me/orders
    method: POST
- name: create_my_order_from_my_quote
  endpoint:
    path: /me/orders/quotes
    method: POST
- name: setLocale
  endpoint:
    path: /setLocale
    method: POST
    data_selector: action
    params: {}
- name: setCountry
  endpoint:
    path: /setCountry
    method: POST
    data_selector: action
    params: {}
- name: setDeleteDaysAfterLastModification
  endpoint:
    path: /setDeleteDaysAfterLastModification
    method: POST
    data_selector: action
    params: {}
- name: setCustomType
  endpoint:
    path: /setCustomType
    method: POST
    data_selector: action
    params: {}
- name: setCustomField
  endpoint:
    path: /setCustomField
    method: POST
    data_selector: action
    params: {}
- name: recalculate
  endpoint:
    path: /recalculate
    method: POST
    data_selector: action
    params: {}
- name: changeLineItemQuantity
  endpoint:
    path: /changeLineItemQuantity
    method: POST
    data_selector: action
    params: {}
- name: changeLineItemsOrder
  endpoint:
    path: /changeLineItemsOrder
    method: POST
    data_selector: action
    params: {}
- name: setLineItemDistributionChannel
  endpoint:
    path: /setLineItemDistributionChannel
    method: POST
    data_selector: action
    params: {}
- name: setLineItemSupplyChannel
  endpoint:
    path: /setLineItemSupplyChannel
    method: POST
    data_selector: action
    params: {}
- name: setLineItemShippingDetails
  endpoint:
    path: /setLineItemShippingDetails
    method: POST
    data_selector: action
    params: {}
- name: applyDeltaToLineItemShippingDetailsTargets
  endpoint:
    path: /applyDeltaToLineItemShippingDetailsTargets
    method: POST
    data_selector: action
    params: {}
- name: setLineItemCustomType
  endpoint:
    path: /setLineItemCustomType
    method: POST
    data_selector: action
    params: {}
- name: setLineItemCustomField
  endpoint:
    path: /setLineItemCustomField
    method: POST
    data_selector: action
    params: {}
- name: setLineItemRecurrenceInfo
  endpoint:
    path: /setLineItemRecurrenceInfo
    method: POST
    data_selector: action
    params: {}
- name: setCustomLineItemRecurrenceInfo
  endpoint:
    path: /setCustomLineItemRecurrenceInfo
    method: POST
    data_selector: action
    params: {}
- name: create_my_order
  endpoint:
    path: /{projectKey}/in-store/key={storeKey}/me/orders
    method: POST
    data_selector: Order
- name: delete_my_cart
  endpoint:
    path: /me/carts/{id}
    method: DELETE
    data_selector: Cart
    params:
      version: last seen version of the resource
- name: delete_my_cart_in_store
  endpoint:
    path: /in-store/key={storeKey}/me/carts/{id}
    method: DELETE
    data_selector: Cart
    params:
      version: last seen version of the resource
- name: MyPayment
  endpoint:
    path: /me/payments/{id}
    method: GET
    data_selector: MyPayment
- name: MyPayments
  endpoint:
    path: /me/payments
    method: GET
    data_selector: MyPaymentPagedQueryResponse
- name: get_my_order
  endpoint:
    path: /{projectKey}/me/orders/{id}
    method: GET
    data_selector: Order
- name: mypayment
  endpoint:
    path: /me/payments
    method: POST
    data_selector: PaymentCreated
    params: {}
- name: mypayment_update
  endpoint:
    path: /me/payments/{id}
    method: POST
    data_selector: MyPayment
    params: {}
- name: mypayment_delete
  endpoint:
    path: /me/payments/{id}
    method: DELETE
    data_selector: MyPayment
    params: {}
- name: Get My ShoppingList by ID
  endpoint:
    path: /{projectKey}/me/shopping-lists/{id}
    method: GET
- name: Get My ShoppingList by Key
  endpoint:
    path: /{projectKey}/me/shopping-lists/key={key}
    method: GET
- name: Get My ShoppingList in Store by ID
  endpoint:
    path: /{projectKey}/in-store/key={storeKey}/me/shopping-lists/{id}
    method: GET
- name: my_order_in_store
  endpoint:
    path: /in-store/key={storeKey}/me/orders/{id}
    method: GET
    data_selector: Order
- name: my_orders
  endpoint:
    path: /me/orders
    method: GET
    data_selector: OrderPagedQueryResponse
- name: my_orders
  endpoint:
    path: /in-store/key={storeKey}/me/orders
    method: GET
    data_selector: results
    params:
      limit: 20
      offset: 0
- name: my_order_by_id
  endpoint:
    path: /me/orders/{id}
    method: HEAD
    data_selector: ''
    params: {}
- name: my_order_by_query_predicate
  endpoint:
    path: /me/orders
    method: HEAD
    data_selector: ''
    params: {}
- name: my_order_in_store_by_id
  endpoint:
    path: /in-store/key={storeKey}/me/orders/{id}
    method: HEAD
    data_selector: ''
    params: {}
- name: my_order_in_store_by_query_predicate
  endpoint:
    path: /in-store/key={storeKey}/me/orders
    method: HEAD
    data_selector: ''
    params: {}
- name: get_my_shopping_list_by_key
  endpoint:
    path: /in-store/key={storeKey}/me/shopping-lists/key={key}
    method: GET
- name: query_my_shopping_lists
  endpoint:
    path: /me/shopping-lists
    method: GET
- name: query_my_shopping_lists_in_store
  endpoint:
    path: /in-store/key={storeKey}/me/shopping-lists
    method: GET
- name: check_if_my_shopping_list_exists_by_id
  endpoint:
    path: /me/shopping-lists/{id}
    method: HEAD
- name: check_if_my_shopping_list_exists_by_key
  endpoint:
    path: /me/shopping-lists/key={key}
    method: HEAD
- name: check_if_my_shopping_list_exists_by_query_predicate
  endpoint:
    path: /me/shopping-lists
    method: HEAD
- name: check_if_my_shopping_list_exists_in_store_by_id
  endpoint:
    path: /in-store/key={storeKey}/me/shopping-lists/{id}
    method: HEAD
- name: my_order_from_cart
  endpoint:
    path: /me/orders
    method: POST
- name: my_order_from_quote
  endpoint:
    path: /me/orders/quotes
    method: POST
- name: create_order
  endpoint:
    path: /{projectKey}/in-store/key={storeKey}/me/orders
    method: POST
    data_selector: Order
    params: {}
- name: Check if My ShoppingList exists in Store by Key
  endpoint:
    path: /in-store/key={storeKey}/me/shopping-lists/key={key}
    method: HEAD
    data_selector: '200'
    params: {}
- name: Check if My ShoppingList exists in Store by Query Predicate
  endpoint:
    path: /in-store/key={storeKey}/me/shopping-lists
    method: HEAD
    data_selector: '200'
    params: {}
- name: Create My ShoppingList
  endpoint:
    path: /me/shopping-lists
    method: POST
    data_selector: '201'
    params: {}
- name: Create My ShoppingList in Store
  endpoint:
    path: /in-store/key={storeKey}/me/shopping-lists
    method: POST
    data_selector: '201'
    params: {}
- name: Update My ShoppingList by ID
  endpoint:
    path: /me/shopping-lists/{id}
    method: POST
    data_selector: '200'
    params: {}
- name: Update My ShoppingList by Key
  endpoint:
    path: /me/shopping-lists/key={key}
    method: POST
    data_selector: '200'
    params: {}
- name: MyPayment
  endpoint:
    path: /me/payments/{id}
    method: GET
    data_selector: MyPayment
- name: MyPayments
  endpoint:
    path: /me/payments
    method: GET
    data_selector: MyPaymentPagedQueryResponse
    params:
      limit: '20'
      offset: '0'
- name: mypayment
  endpoint:
    path: /me/payments
    method: POST
    data_selector: PaymentCreated
- name: mypayment_update
  endpoint:
    path: /me/payments/{id}
    method: POST
- name: mypayment_delete
  endpoint:
    path: /me/payments/{id}
    method: DELETE
- name: shopping_list
  endpoint:
    path: /{projectKey}/in-store/key={storeKey}/me/shopping-lists/{id}
    method: POST
    data_selector: ShoppingList
    params: {}
- name: shopping_list_by_key
  endpoint:
    path: /{projectKey}/in-store/key={storeKey}/me/shopping-lists/key={key}
    method: POST
    data_selector: ShoppingList
    params: {}
- name: my_shopping_list
  endpoint:
    path: /{projectKey}/me/shopping-lists/{id}
    method: GET
    data_selector: ShoppingList
- name: my_shopping_list_by_key
  endpoint:
    path: /{projectKey}/me/shopping-lists/key={key}
    method: GET
    data_selector: ShoppingList
- name: my_shopping_list_in_store
  endpoint:
    path: /{projectKey}/in-store/key={storeKey}/me/shopping-lists/{id}
    method: GET
    data_selector: ShoppingList
- name: delete_my_shopping_list_by_id
  endpoint:
    path: /me/shopping-lists/{id}
    method: DELETE
- name: delete_my_shopping_list_by_key
  endpoint:
    path: /me/shopping-lists/key={key}
    method: DELETE
- name: delete_my_shopping_list_in_store_by_id
  endpoint:
    path: /in-store/key={storeKey}/me/shopping-lists/{id}
    method: DELETE
- name: delete_my_shopping_list_in_store_by_key
  endpoint:
    path: /in-store/key={storeKey}/me/shopping-lists/key={key}
    method: DELETE
- name: my_shopping_list_by_key
  endpoint:
    path: /in-store/key={storeKey}/me/shopping-lists/key={key}
    method: GET
- name: my_shopping_lists
  endpoint:
    path: /me/shopping-lists
    method: GET
- name: my_shopping_list_exists_by_id
  endpoint:
    path: /me/shopping-lists/{id}
    method: HEAD
- name: my_shopping_list_exists_by_key
  endpoint:
    path: /me/shopping-lists/key={key}
    method: HEAD
- name: my_shopping_list_exists_by_query_predicate
  endpoint:
    path: /me/shopping-lists
    method: HEAD
- name: my_shopping_list_exists_in_store_by_id
  endpoint:
    path: /in-store/key={storeKey}/me/shopping-lists/{id}
    method: HEAD
- name: quote_request
  endpoint:
    path: /{projectKey}/me/quote-requests/{id}
    method: GET
    data_selector: QuoteRequest
- name: quote_request_by_key
  endpoint:
    path: /{projectKey}/me/quote-requests/key={key}
    method: GET
    data_selector: QuoteRequest
- name: check_shopping_list_by_key
  endpoint:
    path: /in-store/key={storeKey}/me/shopping-lists/key={key}
    method: HEAD
- name: check_shopping_list_by_query
  endpoint:
    path: /in-store/key={storeKey}/me/shopping-lists
    method: HEAD
- name: create_shopping_list
  endpoint:
    path: /me/shopping-lists
    method: POST
- name: create_shopping_list_in_store
  endpoint:
    path: /in-store/key={storeKey}/me/shopping-lists
    method: POST
- name: update_shopping_list_by_id
  endpoint:
    path: /me/shopping-lists/{id}
    method: POST
- name: update_shopping_list_by_key
  endpoint:
    path: /me/shopping-lists/key={key}
    method: POST
- name: shopping_list
  endpoint:
    path: /in-store/key={storeKey}/me/shopping-lists/{id}
    method: POST
    data_selector: ShoppingList
    params: {}
- name: shopping_list_by_key
  endpoint:
    path: /in-store/key={storeKey}/me/shopping-lists/key={key}
    method: POST
    data_selector: ShoppingList
    params: {}
- name: quote_requests
  endpoint:
    path: /me/quote-requests
    method: GET
    data_selector: results
    params:
      limit: 20
      offset: 0
      withTotal: true
- name: quote_request_by_id
  endpoint:
    path: /me/quote-requests/{id}
    method: HEAD
    data_selector: ''
- name: quote_request_by_key
  endpoint:
    path: /me/quote-requests/key={key}
    method: HEAD
    data_selector: ''
- name: quote_request_by_query_predicate
  endpoint:
    path: /me/quote-requests
    method: HEAD
    data_selector: ''
- name: create_quote_request
  endpoint:
    path: /me/quote-requests
    method: POST
    data_selector: ''
    params: {}
- name: update_quote_request
  endpoint:
    path: /me/quote-requests/{id}
    method: POST
    data_selector: ''
    params: {}
- name: quote_request
  endpoint:
    path: /me/quote-requests/key={key}
    method: POST
    data_selector: QuoteRequest
- name: Get My Quote by ID
  endpoint:
    path: /me/quotes/{id}
    method: GET
- name: Get My Quote by Key
  endpoint:
    path: /me/quotes/key={key}
    method: GET
- name: delete_my_shopping_list_by_id
  endpoint:
    path: /{projectKey}/me/shopping-lists/{id}
    method: DELETE
- name: delete_my_shopping_list_by_key
  endpoint:
    path: /{projectKey}/me/shopping-lists/key={key}
    method: DELETE
- name: delete_my_shopping_list_in_store_by_id
  endpoint:
    path: /{projectKey}/in-store/key={storeKey}/me/shopping-lists/{id}
    method: DELETE
- name: delete_my_shopping_list_in_store_by_key
  endpoint:
    path: /{projectKey}/in-store/key={storeKey}/me/shopping-lists/key={key}
    method: DELETE
- name: quote_request
  endpoint:
    path: /{projectKey}/me/quote-requests/{id}
    method: GET
    data_selector: QuoteRequest
- name: quote_request_by_key
  endpoint:
    path: /{projectKey}/me/quote-requests/key={key}
    method: GET
    data_selector: QuoteRequest
- name: my_quotes
  endpoint:
    path: /me/quotes
    method: GET
    data_selector: results
    params:
      limit: 20
      offset: 0
      withTotal: true
- name: check_quote_exists_by_id
  endpoint:
    path: /me/quotes/{id}
    method: HEAD
- name: check_quote_exists_by_key
  endpoint:
    path: /me/quotes/key={key}
    method: HEAD
- name: update_my_quote_by_id
  endpoint:
    path: /me/quotes/{id}
    method: POST
    data_selector: quote
    params: {}
- name: update_my_quote_by_key
  endpoint:
    path: /me/quotes/key={key}
    method: POST
    data_selector: Quote
- name: quote_requests
  endpoint:
    path: /me/quote-requests
    method: GET
    data_selector: results
    params:
      limit: 20
      offset: 0
- name: quote_request_by_id
  endpoint:
    path: /me/quote-requests/{id}
    method: HEAD
    data_selector: ''
    params: {}
- name: quote_request_by_key
  endpoint:
    path: /me/quote-requests/key={key}
    method: HEAD
    data_selector: ''
    params: {}
- name: quote_request_creation
  endpoint:
    path: /me/quote-requests
    method: POST
    data_selector: ''
    params: {}
- name: quote_request_update
  endpoint:
    path: /me/quote-requests/{id}
    method: POST
    data_selector: ''
    params: {}
- name: carts
  endpoint:
    path: /{projectKey}/carts
    method: GET
- name: me_carts
  endpoint:
    path: /{projectKey}/me/carts
    method: GET
- name: associate_carts
  endpoint:
    path: /{projectKey}/as-associate/{associateId}/in-business-unit/key={businessUnitKey}/carts
    method: GET
- name: quote_request
  endpoint:
    path: /me/quote-requests/key={key}
    method: POST
    data_selector: QuoteRequest
    params: {}
- name: associate_carts
  endpoint:
    path: /api/projects/associate-carts
    method: GET
- name: associate_quotes
  endpoint:
    path: /api/projects/associate-quotes
    method: GET
- name: associate_quote_requests
  endpoint:
    path: /api/projects/associate-quote-requests
    method: GET
- name: associate_orders
  endpoint:
    path: /api/projects/associate-orders
    method: GET
- name: associate_business_units
  endpoint:
    path: /api/projects/associate-business-units
    method: GET
- name: associate_shopping_lists
  endpoint:
    path: /api/projects/associate-shopping-lists
    method: GET
- name: Get My Quote by ID
  endpoint:
    path: /{id}
    method: GET
- name: Get My Quote by Key
  endpoint:
    path: /key={key}
    method: GET
- name: business_unit
  endpoint:
    path: /business-units
    method: GET
    data_selector: businessUnits
- name: business_unit_draft
  endpoint:
    path: /business-units/drafts
    method: POST
    data_selector: businessUnitDrafts
- name: BusinessUnitPagedQueryResponse
  endpoint:
    path: /api/business-units/paged-query
    method: GET
    data_selector: results
- name: BusinessUnitReference
  endpoint:
    path: /api/business-units/reference
    method: GET
    data_selector: obj
- name: BusinessUnitKeyReference
  endpoint:
    path: /api/business-units/key-reference
    method: GET
    data_selector: key
- name: BusinessUnitResourceIdentifier
  endpoint:
    path: /api/business-units/resource-identifier
    method: GET
    data_selector: id
- name: BusinessUnitAssociateResponse
  endpoint:
    path: /api/business-units/associate-response
    method: GET
    data_selector: customer
- name: my_quotes
  endpoint:
    path: /me/quotes
    method: GET
    data_selector: results
    params:
      limit: 20
      offset: 0
      withTotal: true
- name: check_quote_by_id
  endpoint:
    path: /me/quotes/{id}
    method: HEAD
    data_selector: ''
    params: {}
- name: check_quote_by_key
  endpoint:
    path: /me/quotes/key={key}
    method: HEAD
    data_selector: ''
    params: {}
- name: check_quotes_by_query_predicate
  endpoint:
    path: /me/quotes
    method: HEAD
    data_selector: ''
    params: {}
- name: update_quote_by_id
  endpoint:
    path: /me/quotes/{id}
    method: POST
    data_selector: ''
    params: {}
- name: update_quote
  endpoint:
    path: /{projectKey}/me/quotes/key={key}
    method: POST
- name: business_unit
  endpoint:
    path: /business-units/{id}
    method: GET
    data_selector: BusinessUnit
- name: business_unit_by_key
  endpoint:
    path: /business-units/key={key}
    method: GET
    data_selector: BusinessUnit
- name: associate_in_business_unit
  endpoint:
    path: /business-units/{businessUnitId}/associates/{associateId}
    method: GET
    data_selector: BusinessUnitAssociateResponse
- name: associate_in_business_unit_by_key
  endpoint:
    path: /business-units/key={key}/associates/{associateId}
    method: GET
    data_selector: BusinessUnitAssociateResponse
- name: business_unit_in_store
  endpoint:
    path: /in-store/key={storeKey}/business-units/{id}
    method: GET
    data_selector: BusinessUnit
- name: business_unit_in_store_by_key
  endpoint:
    path: /in-store/key={storeKey}/business-units/key={key}
    method: GET
    data_selector: BusinessUnit
- name: associate_in_business_unit_in_store
  endpoint:
    path: /in-store/key={storeKey}/business-units/{businessUnitId}/associates/{associateId}
    method: GET
    data_selector: BusinessUnitAssociateResponse
- name: associate_in_business_unit_in_store_by_key
  endpoint:
    path: /in-store/key={storeKey}/business-units/key={key}/associates/{associateId}
    method: GET
    data_selector: BusinessUnitAssociateResponse
- name: carts
  endpoint:
    path: /{projectKey}/carts
    method: GET
    data_selector: carts
- name: my_carts
  endpoint:
    path: /{projectKey}/me/carts
    method: GET
    data_selector: carts
- name: associate_carts
  endpoint:
    path: /{projectKey}/as-associate/{associateId}/in-business-unit/key={businessUnitKey}/carts
    method: GET
    data_selector: carts
- name: associate_carts
  endpoint:
    path: /api/projects/associate-carts
    method: GET
- name: associate_quotes
  endpoint:
    path: /api/projects/associate-quotes
    method: GET
- name: associate_quote_requests
  endpoint:
    path: /api/projects/associate-quote-requests
    method: GET
- name: associate_orders
  endpoint:
    path: /api/projects/associate-orders
    method: GET
- name: associate_business_units
  endpoint:
    path: /api/projects/associate-business-units
    method: GET
- name: associate_shopping_lists
  endpoint:
    path: /api/projects/associate-shopping-lists
    method: GET
- name: business_units
  endpoint:
    path: /business-units
    method: GET
    data_selector: results
    params:
      limit: '20'
      offset: '0'
      withTotal: 'true'
- name: business_units_in_store
  endpoint:
    path: /in-store/key={storeKey}/business-units
    method: GET
    data_selector: results
    params:
      limit: '20'
      offset: '0'
      withTotal: 'true'
- name: check_business_unit_exists_by_id
  endpoint:
    path: /business-units/{id}
    method: HEAD
- name: check_business_unit_exists_by_key
  endpoint:
    path: /business-units/key={key}
    method: HEAD
- name: create_business_unit
  endpoint:
    path: /business-units
    method: POST
- name: update_business_unit_by_id
  endpoint:
    path: /business-units/{id}
    method: POST
- name: BusinessUnit
  endpoint:
    path: /business-units
    method: GET
    data_selector: businessUnits
- name: Company
  endpoint:
    path: /companies
    method: GET
    data_selector: companies
- name: Division
  endpoint:
    path: /divisions
    method: GET
    data_selector: divisions
- name: business_unit
  endpoint:
    path: /business-units/key={key}
    method: POST
    data_selector: BusinessUnit
    params: {}
- name: business_unit_in_store
  endpoint:
    path: /in-store/key={storeKey}/business-units/{id}
    method: POST
    data_selector: BusinessUnit
    params: {}
- name: business_unit_in_store_by_key
  endpoint:
    path: /in-store/key={storeKey}/business-units/key={key}
    method: POST
    data_selector: BusinessUnit
    params: {}
- name: search_business_units
  endpoint:
    path: /business-units/search
    method: POST
- name: get_indexing_status
  endpoint:
    path: /business-units/search/indexing-status
    method: GET
- name: check_index_exists
  endpoint:
    path: /business-units/search
    method: HEAD
- name: BusinessUnitPagedQueryResponse
  endpoint:
    path: /api/general-concepts#pagedqueryresult
    method: GET
    data_selector: results
- name: BusinessUnitReference
  endpoint:
    path: /api/types#ctp:api:type:Reference
    method: GET
    data_selector: obj
- name: BusinessUnitKeyReference
  endpoint:
    path: /api/types#ctp:api:type:KeyReference
    method: GET
    data_selector: key
- name: BusinessUnitResourceIdentifier
  endpoint:
    path: /api/types#ctp:api:type:ResourceIdentifier
    method: GET
    data_selector: id
- name: BusinessUnitAssociateResponse
  endpoint:
    path: /api/projects/associate-roles#ctp:api:type:AssociateRole
    method: GET
    data_selector: permissions
- name: Business Unit
  endpoint:
    path: /api/projects/business-units
    method: GET
- name: associate_role
  endpoint:
    path: /associate-roles/{id}
    method: GET
    data_selector: AssociateRole
- name: business_unit
  endpoint:
    path: /business-units/{id}
    method: GET
    data_selector: BusinessUnit
- name: business_unit_by_key
  endpoint:
    path: /business-units/key={key}
    method: GET
    data_selector: BusinessUnit
- name: associate_in_business_unit
  endpoint:
    path: /business-units/{businessUnitId}/associates/{associateId}
    method: GET
    data_selector: BusinessUnitAssociateResponse
- name: associate_in_business_unit_by_key
  endpoint:
    path: /business-units/key={key}/associates/{associateId}
    method: GET
    data_selector: BusinessUnitAssociateResponse
- name: business_unit_in_store
  endpoint:
    path: /in-store/key={storeKey}/business-units/{id}
    method: GET
    data_selector: BusinessUnit
- name: business_unit_in_store_by_key
  endpoint:
    path: /in-store/key={storeKey}/business-units/key={key}
    method: GET
    data_selector: BusinessUnit
- name: associate_in_business_unit_in_store
  endpoint:
    path: /in-store/key={storeKey}/business-units/{businessUnitId}/associates/{associateId}
    method: GET
    data_selector: BusinessUnitAssociateResponse
- name: associate_in_business_unit_in_store_by_key
  endpoint:
    path: /in-store/key={storeKey}/business-units/key={key}/associates/{associateId}
    method: GET
    data_selector: BusinessUnitAssociateResponse
- name: associate_role
  endpoint:
    path: /associate-roles/key={key}
    method: GET
    data_selector: AssociateRole
- name: associate_roles
  endpoint:
    path: /associate-roles
    method: GET
    data_selector: results
    params:
      limit: 20
      offset: 0
- name: associate_role_exists_by_id
  endpoint:
    path: /associate-roles/{id}
    method: HEAD
- name: associate_role_exists_by_key
  endpoint:
    path: /associate-roles/key={key}
    method: HEAD
- name: associate_role_exists_by_query
  endpoint:
    path: /associate-roles
    method: HEAD
- name: create_associate_role
  endpoint:
    path: /associate-roles
    method: POST
- name: update_associate_role_by_id
  endpoint:
    path: /associate-roles/{id}
    method: POST
- name: update_associate_role_by_key
  endpoint:
    path: /associate-roles/key={key}
    method: POST
- name: associate_role_by_id
  endpoint:
    path: /associate-roles/{id}
    method: DELETE
    data_selector: AssociateRole
    params:
      version: version
- name: associate_role_by_key
  endpoint:
    path: /associate-roles/key={key}
    method: DELETE
    data_selector: AssociateRole
    params:
      version: version
- name: business_units
  endpoint:
    path: /business-units
    method: GET
    data_selector: results
    params:
      limit: 20
      offset: 0
      withTotal: true
- name: business_units_in_store
  endpoint:
    path: /in-store/key={storeKey}/business-units
    method: GET
    data_selector: results
    params:
      limit: 20
      offset: 0
      withTotal: true
- name: business_unit_exists_by_id
  endpoint:
    path: /business-units/{id}
    method: HEAD
- name: business_unit_exists_by_key
  endpoint:
    path: /business-units/key={key}
    method: HEAD
- name: create_business_unit
  endpoint:
    path: /business-units
    method: POST
- name: update_business_unit
  endpoint:
    path: /business-units/{id}
    method: POST
- name: Get Cart in BusinessUnit by ID as Associate
  endpoint:
    path: /{projectKey}/as-associate/{associateId}/in-business-unit/key={businessUnitKey}/carts/{id}
    method: GET
- name: Get Cart in BusinessUnit by Key as Associate
  endpoint:
    path: /{projectKey}/as-associate/{associateId}/in-business-unit/key={businessUnitKey}/carts/key={key}
    method: GET
- name: business_unit
  endpoint:
    path: /business-units/key={key}
    method: POST
    data_selector: BusinessUnit
    params: {}
- name: business_unit_in_store
  endpoint:
    path: /in-store/key={storeKey}/business-units/{id}
    method: POST
    data_selector: BusinessUnit
    params: {}
- name: business_unit_in_store_by_key
  endpoint:
    path: /in-store/key={storeKey}/business-units/key={key}
    method: POST
    data_selector: BusinessUnit
    params: {}
- name: carts
  endpoint:
    path: /as-associate/{associateId}/in-business-unit/key={businessUnitKey}/carts
    method: GET
    data_selector: results
    params:
      limit: '20'
      offset: '0'
      withTotal: 'true'
- name: check_cart_by_id
  endpoint:
    path: /as-associate/{associateId}/in-business-unit/key={businessUnitKey}/carts/{id}
    method: HEAD
    data_selector: ''
- name: check_cart_by_key
  endpoint:
    path: /as-associate/{associateId}/in-business-unit/key={businessUnitKey}/carts/key={key}
    method: HEAD
    data_selector: ''
- name: create_cart
  endpoint:
    path: /as-associate/{associateId}/in-business-unit/key={businessUnitKey}/carts
    method: POST
    data_selector: ''
    params:
      expand: ''
- name: search_business_units
  endpoint:
    path: /business-units/search
    method: POST
- name: get_indexing_status
  endpoint:
    path: /business-units/search/indexing-status
    method: GET
- name: check_index_exists
  endpoint:
    path: /business-units/search
    method: HEAD
- name: business_unit_search
  endpoint:
    path: /api/projects/business-units
    method: GET
    data_selector: query
    params: {}
- name: associate_role
  endpoint:
    path: /associate-roles/{id}
    method: GET
    data_selector: AssociateRole
- name: replicate_cart
  endpoint:
    path: /as-associate/{associateId}/in-business-unit/key={businessUnitKey}/carts/replicate
    method: POST
    data_selector: Cart
    params: {}
- name: update_cart_by_id
  endpoint:
    path: /as-associate/{associateId}/in-business-unit/key={businessUnitKey}/carts/{id}
    method: POST
    data_selector: Cart
    params: {}
- name: update_cart_by_key
  endpoint:
    path: /as-associate/{associateId}/in-business-unit/key={businessUnitKey}/carts/key={key}
    method: POST
    data_selector: Cart
    params: {}
- name: delete_cart_by_id
  endpoint:
    path: /{projectKey}/as-associate/{associateId}/in-business-unit/key={businessUnitKey}/carts/{id}
    method: DELETE
    data_selector: Cart
- name: delete_cart_by_key
  endpoint:
    path: /{projectKey}/as-associate/{associateId}/in-business-unit/key={businessUnitKey}/carts/key={key}
    method: DELETE
    data_selector: Cart
- name: associate_role_by_key
  endpoint:
    path: /associate-roles/key={key}
    method: GET
    data_selector: results
- name: associate_roles
  endpoint:
    path: /associate-roles
    method: GET
    data_selector: results
    params:
      limit: 20
      offset: 0
      withTotal: true
- name: associate_role_exists_by_id
  endpoint:
    path: /associate-roles/{id}
    method: HEAD
- name: associate_role_exists_by_key
  endpoint:
    path: /associate-roles/key={key}
    method: HEAD
- name: create_associate_role
  endpoint:
    path: /associate-roles
    method: POST
- name: update_associate_role_by_id
  endpoint:
    path: /associate-roles/{id}
    method: POST
- name: update_associate_role_by_key
  endpoint:
    path: /associate-roles/key={key}
    method: POST
- name: associate_role
  endpoint:
    path: /associate-roles/{id}
    method: DELETE
    data_selector: AssociateRole
    params:
      version: version
- name: associate_role_by_key
  endpoint:
    path: /associate-roles/key={key}
    method: DELETE
    data_selector: AssociateRole
    params:
      version: version
- name: associate_orders
  endpoint:
    path: /{projectKey}/as-associate/{associateId}/in-business-unit/key={businessUnitKey}/orders/{id}
    method: GET
- name: get_order_by_order_number
  endpoint:
    path: /{projectKey}/as-associate/{associateId}/in-business-unit/key={businessUnitKey}/orders/order-number={orderNumber}
    method: GET
- name: Associate Carts
  endpoint:
    path: /{projectKey}/as-associate/{associateId}/in-business-unit/key={businessUnitKey}/carts/{id}
    method: GET
- name: Get Cart in BusinessUnit by Key as Associate
  endpoint:
    path: /{projectKey}/as-associate/{associateId}/in-business-unit/key={businessUnitKey}/carts/key={key}
    method: GET
- name: orders
  endpoint:
    path: /as-associate/{associateId}/in-business-unit/key={businessUnitKey}/orders
    method: GET
    data_selector: results
- name: order_check_by_id
  endpoint:
    path: /as-associate/{associateId}/in-business-unit/key={businessUnitKey}/orders/{id}
    method: HEAD
- name: order_check_by_order_number
  endpoint:
    path: /as-associate/{associateId}/in-business-unit/key={businessUnitKey}/orders/order-number={orderNumber}
    method: HEAD
- name: order_check_by_query_predicate
  endpoint:
    path: /as-associate/{associateId}/in-business-unit/key={businessUnitKey}/orders
    method: HEAD
- name: create_order_from_cart
  endpoint:
    path: /as-associate/{associateId}/in-business-unit/key={businessUnitKey}/orders
    method: POST
- name: carts
  endpoint:
    path: /as-associate/{associateId}/in-business-unit/key={businessUnitKey}/carts
    method: GET
    data_selector: results
    params:
      limit: '20'
      offset: '0'
      withTotal: 'true'
- name: check_cart_exists_by_id
  endpoint:
    path: /as-associate/{associateId}/in-business-unit/key={businessUnitKey}/carts/{id}
    method: HEAD
- name: check_cart_exists_by_key
  endpoint:
    path: /as-associate/{associateId}/in-business-unit/key={businessUnitKey}/carts/key={key}
    method: HEAD
- name: create_cart
  endpoint:
    path: /as-associate/{associateId}/in-business-unit/key={businessUnitKey}/carts
    method: POST
- name: create_order
  endpoint:
    path: /as-associate/{associateId}/in-business-unit/key={businessUnitKey}/orders/quotes
    method: POST
- name: update_order
  endpoint:
    path: /as-associate/{associateId}/in-business-unit/key={businessUnitKey}/orders/{id}
    method: POST
- name: update_order
  endpoint:
    path: /as-associate/{associateId}/in-business-unit/key={businessUnitKey}/orders/order-number={orderNumber}
    method: POST
    data_selector: order
    params:
      version: version
- name: replicate_cart
  endpoint:
    path: /{projectKey}/as-associate/{associateId}/in-business-unit/key={businessUnitKey}/carts/replicate
    method: POST
- name: update_cart_by_id
  endpoint:
    path: /{projectKey}/as-associate/{associateId}/in-business-unit/key={businessUnitKey}/carts/{id}
    method: POST
- name: update_cart_by_key
  endpoint:
    path: /{projectKey}/as-associate/{associateId}/in-business-unit/key={businessUnitKey}/carts/key={key}
    method: POST
- name: quote_request
  endpoint:
    path: /{projectKey}/as-associate/{associateId}/in-business-unit/key={businessUnitKey}/quote-requests/{id}
    method: GET
    data_selector: QuoteRequest
- name: quote_request_by_key
  endpoint:
    path: /{projectKey}/as-associate/{associateId}/in-business-unit/key={businessUnitKey}/quote-requests/key={key}
    method: GET
    data_selector: QuoteRequest
- name: delete_cart_by_id
  endpoint:
    path: /{projectKey}/as-associate/{associateId}/in-business-unit/key={businessUnitKey}/carts/{id}
    method: DELETE
    data_selector: Cart
    params:
      version: last seen version of the resource
- name: delete_cart_by_key
  endpoint:
    path: /{projectKey}/as-associate/{associateId}/in-business-unit/key={businessUnitKey}/carts/key={key}
    method: DELETE
    data_selector: Cart
    params:
      version: last seen version of the resource
- name: associate_orders
  endpoint:
    path: /{projectKey}/as-associate/{associateId}/in-business-unit/key={businessUnitKey}/orders/{id}
    method: GET
- name: get_order_by_id
  endpoint:
    path: /{projectKey}/as-associate/{associateId}/in-business-unit/key={businessUnitKey}/orders/order-number={orderNumber}
    method: GET
- name: quote_requests
  endpoint:
    path: /as-associate/{associateId}/in-business-unit/key={businessUnitKey}/quote-requests
    method: GET
    data_selector: results
    params:
      limit: 20
      offset: 0
      withTotal: true
- name: quote_request_by_id
  endpoint:
    path: /as-associate/{associateId}/in-business-unit/key={businessUnitKey}/quote-requests/{id}
    method: HEAD
    data_selector: ''
    params: {}
- name: quote_request_by_key
  endpoint:
    path: /as-associate/{associateId}/in-business-unit/key={businessUnitKey}/quote-requests/key={key}
    method: HEAD
    data_selector: ''
    params: {}
- name: create_quote_request
  endpoint:
    path: /as-associate/{associateId}/in-business-unit/key={businessUnitKey}/quote-requests
    method: POST
    data_selector: ''
    params: {}
- name: quote_request_by_id
  endpoint:
    path: /as-associate/{associateId}/in-business-unit/key={businessUnitKey}/quote-requests/{id}
    method: POST
    data_selector: QuoteRequest
    params: {}
- name: quote_request_by_key
  endpoint:
    path: /as-associate/{associateId}/in-business-unit/key={businessUnitKey}/quote-requests/key={key}
    method: POST
    data_selector: QuoteRequest
    params: {}
- name: orders
  endpoint:
    path: /as-associate/{associateId}/in-business-unit/key={businessUnitKey}/orders
    method: GET
    data_selector: results
    params:
      limit: 20
      offset: 0
- name: check_order_by_id
  endpoint:
    path: /as-associate/{associateId}/in-business-unit/key={businessUnitKey}/orders/{id}
    method: HEAD
    data_selector: ''
- name: check_order_by_order_number
  endpoint:
    path: /as-associate/{associateId}/in-business-unit/key={businessUnitKey}/orders/order-number={orderNumber}
    method: HEAD
    data_selector: ''
- name: check_order_by_query_predicate
  endpoint:
    path: /as-associate/{associateId}/in-business-unit/key={businessUnitKey}/orders
    method: HEAD
    data_selector: ''
- name: create_order_from_cart
  endpoint:
    path: /as-associate/{associateId}/in-business-unit/key={businessUnitKey}/orders
    method: POST
    data_selector: ''
    params:
      expand: ''
- name: create_order
  endpoint:
    path: /as-associate/{associateId}/in-business-unit/key={businessUnitKey}/orders/quotes
    method: POST
- name: update_order
  endpoint:
    path: /as-associate/{associateId}/in-business-unit/key={businessUnitKey}/orders/{id}
    method: POST
- name: Get Quote in BusinessUnit by ID as Associate
  endpoint:
    path: /{projectKey}/as-associate/{associateId}/in-business-unit/key={businessUnitKey}/quotes/{id}
    method: GET
    data_selector: Quote
- name: Get Quote in BusinessUnit by Key as Associate
  endpoint:
    path: /{projectKey}/as-associate/{associateId}/in-business-unit/key={businessUnitKey}/quotes/key={key}
    method: GET
    data_selector: Quote
- name: update_order
  endpoint:
    path: /as-associate/{associateId}/in-business-unit/key={businessUnitKey}/orders/order-number={orderNumber}
    method: POST
    data_selector: Order
- name: quote_request
  endpoint:
    path: /{projectKey}/as-associate/{associateId}/in-business-unit/key={businessUnitKey}/quote-requests/{id}
    method: GET
    data_selector: QuoteRequest
- name: quote_request_by_key
  endpoint:
    path: /{projectKey}/as-associate/{associateId}/in-business-unit/key={businessUnitKey}/quote-requests/key={key}
    method: GET
    data_selector: QuoteRequest
- name: quotes
  endpoint:
    path: /as-associate/{associateId}/in-business-unit/key={businessUnitKey}/quotes
    method: GET
    data_selector: results
    params:
      limit: 20
      offset: 0
      withTotal: true
- name: check_quote_by_id
  endpoint:
    path: /as-associate/{associateId}/in-business-unit/key={businessUnitKey}/quotes/{id}
    method: HEAD
    data_selector: ''
    params: {}
- name: check_quote_by_key
  endpoint:
    path: /as-associate/{associateId}/in-business-unit/key={businessUnitKey}/quotes/key={key}
    method: HEAD
    data_selector: ''
    params: {}
- name: check_quote_by_query
  endpoint:
    path: /as-associate/{associateId}/in-business-unit/key={businessUnitKey}/quotes
    method: HEAD
    data_selector: ''
    params: {}
- name: update_quote_by_id
  endpoint:
    path: /as-associate/{associateId}/in-business-unit/key={businessUnitKey}/quotes/{id}
    method: POST
    data_selector: ''
    params:
      expand: ''
- name: update_quote
  endpoint:
    path: /as-associate/{associateId}/in-business-unit/key={businessUnitKey}/quotes/key={key}
    method: POST
    data_selector: Quote
    params: {}
- name: quote_requests
  endpoint:
    path: /{projectKey}/as-associate/{associateId}/in-business-unit/key={businessUnitKey}/quote-requests
    method: GET
    data_selector: results
    params:
      limit: 20
      offset: 0
- name: check_quote_request_by_id
  endpoint:
    path: /{projectKey}/as-associate/{associateId}/in-business-unit/key={businessUnitKey}/quote-requests/{id}
    method: HEAD
    data_selector: ''
- name: check_quote_request_by_key
  endpoint:
    path: /{projectKey}/as-associate/{associateId}/in-business-unit/key={businessUnitKey}/quote-requests/key={key}
    method: HEAD
    data_selector: ''
- name: create_quote_request
  endpoint:
    path: /{projectKey}/as-associate/{associateId}/in-business-unit/key={businessUnitKey}/quote-requests
    method: POST
    data_selector: ''
    params:
      expand: ''
- name: update_quote_request
  endpoint:
    path: /{projectKey}/as-associate/{associateId}/in-business-unit/key={businessUnitKey}/quote-requests/{id}
    method: PUT
    data_selector: ''
- name: business_unit_by_id
  endpoint:
    path: /{projectKey}/as-associate/{associateId}/business-units/{id}
    method: GET
- name: business_unit_by_key
  endpoint:
    path: /{projectKey}/as-associate/{associateId}/business-units/key={key}
    method: GET
- name: query_business_units
  endpoint:
    path: /{projectKey}/as-associate/{associateId}/business-units
    method: GET
- name: check_business_unit_exists_by_id
  endpoint:
    path: /{projectKey}/as-associate/{associateId}/business-units/{id}
    method: HEAD
- name: check_business_unit_exists_by_key
  endpoint:
    path: /{projectKey}/as-associate/{associateId}/business-units/key={key}
    method: HEAD
- name: check_business_unit_exists_by_query_predicate
  endpoint:
    path: /{projectKey}/as-associate/{associateId}/business-units
    method: HEAD
- name: quote_request
  endpoint:
    path: /as-associate/{associateId}/in-business-unit/key={businessUnitKey}/quote-requests/{id}
    method: POST
- name: quote_request_by_key
  endpoint:
    path: /as-associate/{associateId}/in-business-unit/key={businessUnitKey}/quote-requests/key={key}
    method: POST
- name: business_unit
  endpoint:
    path: /as-associate/{associateId}/business-units
    method: POST
    data_selector: BusinessUnit
    params: {}
- name: business_unit_by_id
  endpoint:
    path: /as-associate/{associateId}/business-units/{id}
    method: POST
    data_selector: BusinessUnit
    params: {}
- name: business_unit_by_key
  endpoint:
    path: /as-associate/{associateId}/business-units/key={key}
    method: POST
    data_selector: BusinessUnit
    params: {}
- name: associate_quotes
  endpoint:
    path: /{projectKey}/as-associate/{associateId}/in-business-unit/key={businessUnitKey}/quotes/{id}
    method: GET
- name: quote_by_key
  endpoint:
    path: /{projectKey}/as-associate/{associateId}/in-business-unit/key={businessUnitKey}/quotes/key={key}
    method: GET
- name: Get ShoppingList in BusinessUnit by ID as Associate
  endpoint:
    path: /{projectKey}/as-associate/{associateId}/in-business-unit/key={businessUnitKey}/shopping-lists/{id}
    method: GET
    data_selector: ShoppingList
- name: Get ShoppingList in BusinessUnit by Key as Associate
  endpoint:
    path: /{projectKey}/as-associate/{associateId}/in-business-unit/key={businessUnitKey}/shopping-lists/key={key}
    method: GET
    data_selector: ShoppingList
- name: Query ShoppingLists in BusinessUnit as Associate
  endpoint:
    path: /{projectKey}/as-associate/{associateId}/in-business-unit/key={businessUnitKey}/shopping-lists
    method: GET
    data_selector: ShoppingListPagedQueryResponse
- name: quotes
  endpoint:
    path: /{projectKey}/as-associate/{associateId}/in-business-unit/key={businessUnitKey}/quotes
    method: GET
    data_selector: results
    params:
      limit: '20'
      offset: '0'
      withTotal: 'true'
- name: quote_exists_by_id
  endpoint:
    path: /{projectKey}/as-associate/{associateId}/in-business-unit/key={businessUnitKey}/quotes/{id}
    method: HEAD
- name: quote_exists_by_key
  endpoint:
    path: /{projectKey}/as-associate/{associateId}/in-business-unit/key={businessUnitKey}/quotes/key={key}
    method: HEAD
- name: quote_exists_by_query
  endpoint:
    path: /{projectKey}/as-associate/{associateId}/in-business-unit/key={businessUnitKey}/quotes
    method: HEAD
- name: update_quote
  endpoint:
    path: /{projectKey}/as-associate/{associateId}/in-business-unit/key={businessUnitKey}/quotes/{id}
    method: POST
- name: shopping_list_exists_by_id
  endpoint:
    path: /as-associate/{associateId}/in-business-unit/key={businessUnitKey}/shopping-lists/{id}
    method: HEAD
    data_selector: '200'
- name: shopping_list_exists_by_key
  endpoint:
    path: /as-associate/{associateId}/in-business-unit/key={businessUnitKey}/shopping-lists/key={key}
    method: HEAD
    data_selector: '200'
- name: shopping_list_exists_by_query
  endpoint:
    path: /as-associate/{associateId}/in-business-unit/key={businessUnitKey}/shopping-lists
    method: HEAD
    data_selector: '200'
- name: create_shopping_list
  endpoint:
    path: /as-associate/{associateId}/in-business-unit/key={businessUnitKey}/shopping-lists
    method: POST
    data_selector: '201'
- name: update_shopping_list_by_id
  endpoint:
    path: /as-associate/{associateId}/in-business-unit/key={businessUnitKey}/shopping-lists/{id}
    method: POST
    data_selector: '200'
- name: update_quote
  endpoint:
    path: /as-associate/{associateId}/in-business-unit/key={businessUnitKey}/quotes/key={key}
    method: POST
- name: shopping_list
  endpoint:
    path: /as-associate/{associateId}/in-business-unit/key={businessUnitKey}/shopping-lists/key={key}
    method: POST
    data_selector: ShoppingList
    params: {}
- name: delete_shopping_list
  endpoint:
    path: /as-associate/{associateId}/in-business-unit/key={businessUnitKey}/shopping-lists/{id}
    method: DELETE
    data_selector: ShoppingList
    params: {}
- name: delete_shopping_list_by_key
  endpoint:
    path: /as-associate/{associateId}/in-business-unit/key={businessUnitKey}/shopping-lists/key={key}
    method: DELETE
    data_selector: ShoppingList
    params: {}
- name: business_unit
  endpoint:
    path: /as-associate/{associateId}/business-units/{id}
    method: GET
- name: business_unit_by_key
  endpoint:
    path: /as-associate/{associateId}/business-units/key={key}
    method: GET
- name: query_business_units
  endpoint:
    path: /as-associate/{associateId}/business-units
    method: GET
- name: check_business_unit_exists_by_id
  endpoint:
    path: /as-associate/{associateId}/business-units/{id}
    method: HEAD
- name: check_business_unit_exists_by_key
  endpoint:
    path: /as-associate/{associateId}/business-units/key={key}
    method: HEAD
- name: check_business_unit_exists_by_query_predicate
  endpoint:
    path: /as-associate/{associateId}/business-units
    method: HEAD
- name: ApprovalRule
  endpoint:
    path: /{projectKey}/as-associate/{associateId}/in-business-unit/key={businessUnitKey}/approval-rules/{id}
    method: GET
    data_selector: ApprovalRule
    params: {}
- name: business_unit
  endpoint:
    path: /as-associate/{associateId}/business-units
    method: POST
    data_selector: BusinessUnit
    params: {}
- name: business_unit_by_id
  endpoint:
    path: /as-associate/{associateId}/business-units/{id}
    method: POST
    data_selector: BusinessUnit
    params: {}
- name: business_unit_by_key
  endpoint:
    path: /as-associate/{associateId}/business-units/key={key}
    method: POST
    data_selector: BusinessUnit
    params: {}
- name: approval_rule
  endpoint:
    path: /{projectKey}/as-associate/{associateId}/in-business-unit/key={businessUnitKey}/approval-rules/key={key}
    method: GET
    data_selector: results
- name: approval_rules
  endpoint:
    path: /{projectKey}/as-associate/{associateId}/in-business-unit/key={businessUnitKey}/approval-rules
    method: GET
    data_selector: results
    params:
      limit: 20
      offset: 0
      withTotal: true
- name: create_approval_rule
  endpoint:
    path: /{projectKey}/as-associate/{associateId}/in-business-unit/key={businessUnitKey}/approval-rules
    method: POST
- name: update_approval_rule_by_id
  endpoint:
    path: /{projectKey}/as-associate/{associateId}/in-business-unit/key={businessUnitKey}/approval-rules/{id}
    method: POST
- name: update_approval_rule_by_key
  endpoint:
    path: /{projectKey}/as-associate/{associateId}/in-business-unit/key={businessUnitKey}/approval-rules/key={key}
    method: POST
- name: ShoppingList
  endpoint:
    path: /{projectKey}/as-associate/{associateId}/in-business-unit/key={businessUnitKey}/shopping-lists/{id}
    method: GET
- name: ShoppingLists
  endpoint:
    path: /{projectKey}/as-associate/{associateId}/in-business-unit/key={businessUnitKey}/shopping-lists
    method: GET
- name: check_shopping_list_exists_by_id
  endpoint:
    path: /as-associate/{associateId}/in-business-unit/key={businessUnitKey}/shopping-lists/{id}
    method: HEAD
    data_selector: '200'
    params: {}
- name: check_shopping_list_exists_by_key
  endpoint:
    path: /as-associate/{associateId}/in-business-unit/key={businessUnitKey}/shopping-lists/key={key}
    method: HEAD
    data_selector: '200'
    params: {}
- name: check_shopping_lists_by_query
  endpoint:
    path: /as-associate/{associateId}/in-business-unit/key={businessUnitKey}/shopping-lists
    method: HEAD
    data_selector: '200'
    params:
      where: ''
- name: create_shopping_list
  endpoint:
    path: /as-associate/{associateId}/in-business-unit/key={businessUnitKey}/shopping-lists
    method: POST
    data_selector: '201'
    params: {}
- name: update_shopping_list_by_id
  endpoint:
    path: /as-associate/{associateId}/in-business-unit/key={businessUnitKey}/shopping-lists/{id}
    method: POST
    data_selector: '200'
    params: {}
- name: setStatus
  endpoint:
    path: /api/projects/messages/approval-rule-approval-flow-messages
    method: POST
    data_selector: ApprovalRuleStatusSet
    params: {}
- name: setName
  endpoint:
    path: /api/projects/messages/approval-rule-approval-flow-messages
    method: POST
    data_selector: ApprovalRuleNameSet
    params: {}
- name: setDescription
  endpoint:
    path: /api/projects/messages/approval-rule-approval-flow-messages
    method: POST
    data_selector: ApprovalRuleDescriptionSet
    params: {}
- name: setKey
  endpoint:
    path: /api/projects/messages/approval-rule-approval-flow-messages
    method: POST
    data_selector: ApprovalRuleKeySet
    params: {}
- name: setPredicate
  endpoint:
    path: /api/projects/messages/approval-rule-approval-flow-messages
    method: POST
    data_selector: ApprovalRulePredicateSet
    params: {}
- name: setApprovers
  endpoint:
    path: /api/projects/messages/approval-rule-approval-flow-messages
    method: POST
    data_selector: ApprovalRuleApproversSet
    params: {}
- name: setRequesters
  endpoint:
    path: /api/projects/messages/approval-rule-approval-flow-messages
    method: POST
    data_selector: ApprovalRuleRequestersSet
    params: {}
- name: setCustomType
  endpoint:
    path: /api/projects/messages/approval-rule-approval-flow-messages
    method: POST
    data_selector: ApprovalRuleCustomTypeSet
    params: {}
- name: setCustomField
  endpoint:
    path: /api/projects/messages/approval-rule-approval-flow-messages
    method: POST
    data_selector: ApprovalRuleCustomFieldSet
    params: {}
- name: approval_flow
  endpoint:
    path: /{projectKey}/as-associate/{associateId}/in-business-unit/key={businessUnitKey}/approval-flows/{id}
    method: GET
    data_selector: results
- name: update_shopping_list
  endpoint:
    path: /as-associate/{associateId}/in-business-unit/key={businessUnitKey}/shopping-lists/key={key}
    method: POST
    data_selector: ShoppingList
    params:
      version: '1'
- name: delete_shopping_list_by_id
  endpoint:
    path: /as-associate/{associateId}/in-business-unit/key={businessUnitKey}/shopping-lists/{id}
    method: DELETE
    data_selector: ShoppingList
- name: delete_shopping_list_by_key
  endpoint:
    path: /as-associate/{associateId}/in-business-unit/key={businessUnitKey}/shopping-lists/key={key}
    method: DELETE
    data_selector: ShoppingList
- name: approval_rule
  endpoint:
    path: /{projectKey}/as-associate/{associateId}/in-business-unit/key={businessUnitKey}/approval-rules/{id}
    method: GET
    data_selector: ApprovalRule
- name: approval_flow
  endpoint:
    path: /{projectKey}/as-associate/{associateId}/in-business-unit/key={businessUnitKey}/approval-flows
    method: GET
    data_selector: results
    params:
      limit: 20
      offset: 0
- name: update_approval_flow
  endpoint:
    path: /{projectKey}/as-associate/{associateId}/in-business-unit/key={businessUnitKey}/approval-flows/{id}
    method: POST
    data_selector: id
- name: approval_rule
  endpoint:
    path: /{projectKey}/as-associate/{associateId}/in-business-unit/key={businessUnitKey}/approval-rules/key={key}
    method: GET
    data_selector: ApprovalRule
- name: approval_rules
  endpoint:
    path: /{projectKey}/as-associate/{associateId}/in-business-unit/key={businessUnitKey}/approval-rules
    method: GET
    data_selector: ApprovalRulePagedQueryResponse
- name: create_approval_rule
  endpoint:
    path: /{projectKey}/as-associate/{associateId}/in-business-unit/key={businessUnitKey}/approval-rules
    method: POST
    data_selector: ApprovalRule
- name: update_approval_rule_by_id
  endpoint:
    path: /{projectKey}/as-associate/{associateId}/in-business-unit/key={businessUnitKey}/approval-rules/{id}
    method: POST
    data_selector: ApprovalRule
- name: update_approval_rule_by_key
  endpoint:
    path: /{projectKey}/as-associate/{associateId}/in-business-unit/key={businessUnitKey}/approval-rules/key={key}
    method: POST
    data_selector: ApprovalRule
- name: ApprovalRule
  endpoint:
    path: /api/projects/messages/approval-rule-approval-flow-messages
    method: POST
    data_selector: records
- name: merge_cart
  endpoint:
    path: /api/projects/carts#merge-cart
    method: POST
- name: create_order_from_cart
  endpoint:
    path: /api/projects/orders#create-order-from-cart
    method: POST
- name: create_order_from_quote
  endpoint:
    path: /api/projects/orders#create-order-from-quote
    method: POST
- name: create_order_by_import
  endpoint:
    path: /api/projects/orders-import#create-order-by-import
    method: POST
- name: Order
  endpoint:
    path: /api/projects/orders
    method: GET
    data_selector: records
- name: Order Edit
  endpoint:
    path: /api/projects/order-edits
    method: GET
    data_selector: records
- name: ApprovalFlow
  endpoint:
    path: /{projectKey}/as-associate/{associateId}/in-business-unit/key={businessUnitKey}/approval-flows/{id}
    method: GET
- name: approval_flows
  endpoint:
    path: /{projectKey}/as-associate/{associateId}/in-business-unit/key={businessUnitKey}/approval-flows
    method: GET
- name: update_approval_flow
  endpoint:
    path: /{projectKey}/as-associate/{associateId}/in-business-unit/key={businessUnitKey}/approval-flows/{id}
    method: POST
- name: shipping_address
  endpoint:
    path: /api/projects/carts#set-shipping-address-custom-type
    method: GET
    data_selector: records
    params: {}
- name: item_shipping_address
  endpoint:
    path: /api/projects/carts#set-itemshipping-address-custom-type
    method: GET
    data_selector: records
    params: {}
- name: shipping_method
  endpoint:
    path: /api/projects/carts#set-shippingmethod-taxamount
    method: GET
    data_selector: records
    params: {}
- name: shipping
  endpoint:
    path: /api/projects/carts#set-shipping-custom-type
    method: GET
    data_selector: records
    params: {}
- name: delivery
  endpoint:
    path: /api/projects/orders#set-delivery-address
    method: GET
    data_selector: records
    params: {}
- name: delivery_address
  endpoint:
    path: /api/projects/orders#set-delivery-address-custom-type
    method: GET
    data_selector: records
    params: {}
- name: parcel
  endpoint:
    path: /api/projects/orders#set-parcel-measurements
    method: GET
    data_selector: records
    params: {}
- name: return_item
  endpoint:
    path: /api/projects/orders#set-returnitem-custom-type
    method: GET
    data_selector: records
    params: {}
- name: cart
  endpoint:
    path: /carts
    method: GET
    data_selector: carts
    params: {}
- name: cart_draft
  endpoint:
    path: /carts/draft
    method: POST
    data_selector: draft
    params: {}
- name: carts
  endpoint:
    path: /api/projects/carts
    method: POST
    data_selector: results
- name: orders
  endpoint:
    path: /api/projects/orders
    method: POST
    data_selector: results
- name: Cart
  endpoint:
    path: /{projectKey}/carts
    method: POST
    data_selector: results
- name: CartPagedQueryResponse
  endpoint:
    path: /{projectKey}/carts
    method: GET
    data_selector: results
    params:
      limit: 20
      offset: 0
- name: merge_cart
  endpoint:
    path: /api/projects/carts#merge-cart
    method: POST
- name: create_order
  endpoint:
    path: /api/projects/orders#create-order-from-cart
    method: POST
- name: LineItem
  endpoint:
    path: /api/carts/orders#ctp:api:type:LineItem
    method: GET
    data_selector: LineItem
    params: {}
- name: CustomLineItem
  endpoint:
    path: /api/carts/orders#ctp:api:type:CustomLineItem
    method: GET
    data_selector: CustomLineItem
    params: {}
- name: Order Edit
  endpoint:
    path: /api/projects/order-edits
    method: POST
    data_selector: resource
- name: Order
  endpoint:
    path: /api/projects/orders
    method: GET
    data_selector: resource
- name: CustomLineItemDraft
  endpoint:
    path: /custom-line-items
    method: POST
    data_selector: customLineItemDraft
    params: {}
- name: CartDiscountValueDraft
  endpoint:
    path: /api/projects/cartDiscounts#cartdiscountvaluedraft
    method: GET
    data_selector: value
    params: {}
- name: DirectDiscountReference
  endpoint:
    path: /api/types#ctp:api:type:Reference
    method: GET
    data_selector: id
    params: {}
- name: DiscountCodeInfo
  endpoint:
    path: /api/projects/discountCodes#ctp:api:type:DiscountCodeReference
    method: GET
    data_selector: discountCode
    params: {}
- name: ShippingInfo
  endpoint:
    path: /api/projects/shippingMethods#ctp:api:type:ShippingRate
    method: GET
    data_selector: shippingInfo
    params: {}
- name: ShippingDraft
  endpoint:
    path: /api/projects/shippingMethods#ctp:api:type:ShippingMethodReference
    method: GET
    data_selector: shippingDraft
    params: {}
- name: Shipping Address
  endpoint:
    path: /api/projects/carts#set-shipping-address-custom-type
    method: GET
- name: ItemShipping Address
  endpoint:
    path: /api/projects/carts#set-itemshipping-address-custom-type
    method: GET
- name: ShippingMethod
  endpoint:
    path: /api/projects/carts#set-shippingmethod-taxamount
    method: GET
- name: Shipping
  endpoint:
    path: /api/projects/carts#set-shipping-custom-type
    method: GET
- name: Delivery
  endpoint:
    path: /api/projects/orders#set-delivery-address
    method: GET
- name: Delivery Address
  endpoint:
    path: /api/projects/orders#set-delivery-address-custom-type
    method: GET
- name: Parcel
  endpoint:
    path: /api/projects/orders#set-parcel-measurements
    method: GET
- name: ReturnItem
  endpoint:
    path: /api/projects/orders#set-returnitem-custom-type
    method: GET
- name: cart
  endpoint:
    path: /api/carts
    method: GET
    data_selector: carts
- name: get_cart_by_id
  endpoint:
    path: /{projectKey}/carts/{id}
    method: GET
- name: get_cart_by_key
  endpoint:
    path: /{projectKey}/carts/key={key}
    method: GET
- name: get_cart_by_customer_id
  endpoint:
    path: /{projectKey}/carts/customer-id={customerId}
    method: GET
- name: get_cart_in_store_by_id
  endpoint:
    path: /{projectKey}/in-store/key={storeKey}/carts/{id}
    method: GET
- name: get_cart_in_store_by_key
  endpoint:
    path: /{projectKey}/in-store/key={storeKey}/carts/key={key}
    method: GET
- name: get_cart_in_store_by_customer_id
  endpoint:
    path: /{projectKey}/in-store/key={storeKey}/carts/customer-id={customerId}
    method: GET
- name: CartPagedQueryResponse
  endpoint:
    path: /{projectKey}/carts
    method: GET
    data_selector: results
- name: LineItem
  endpoint:
    path: /api/carts/orders/line-item
    method: GET
    data_selector: lineItems
- name: Cart
  endpoint:
    path: /api/carts/orders/cart
    method: GET
    data_selector: carts
- name: carts
  endpoint:
    path: /carts
    method: GET
    data_selector: results
    params:
      limit: 20
      offset: 0
      withTotal: true
- name: carts_in_store
  endpoint:
    path: /in-store/key={storeKey}/carts
    method: GET
    data_selector: results
    params:
      limit: 20
      offset: 0
      withTotal: true
- name: check_cart_exists
  endpoint:
    path: /carts/{id}
    method: HEAD
- name: CustomLineItem
  endpoint:
    path: /carts/custom-line-item
    method: GET
    data_selector: records
- name: CustomLineItemDraft
  endpoint:
    path: /carts/custom-line-item-draft
    method: POST
    data_selector: records
- name: CartDiscountValueDraft
  endpoint:
    path: /api/projects/cartDiscounts#cartdiscountvaluedraft
    method: GET
    data_selector: records
- name: DirectDiscountReference
  endpoint:
    path: /api/types#ctp:api:type:Reference
    method: GET
    data_selector: records
- name: DiscountCodeInfo
  endpoint:
    path: /api/projects/discountCodes#ctp:api:type:DiscountCodeReference
    method: GET
    data_selector: records
- name: ShippingInfo
  endpoint:
    path: /api/projects/shippingMethods#ctp:api:type:ShippingRate
    method: GET
    data_selector: records
- name: check_cart_exists_by_key
  endpoint:
    path: /carts/key={key}
    method: HEAD
    data_selector: '200'
    params: {}
- name: check_cart_exists_by_customer_id
  endpoint:
    path: /carts/customer-id={customerId}
    method: HEAD
    data_selector: '200'
    params: {}
- name: check_cart_exists_by_query_predicate
  endpoint:
    path: /carts
    method: HEAD
    data_selector: '200'
    params:
      where: ''
- name: create_cart
  endpoint:
    path: /carts
    method: POST
    data_selector: '201'
    params:
      expand: ''
- name: create_cart_in_store
  endpoint:
    path: /in-store/key={storeKey}/carts
    method: POST
    data_selector: '201'
    params:
      expand: ''
- name: replicate_cart
  endpoint:
    path: /carts/replicate
    method: POST
    data_selector: '201'
    params: {}
- name: cart_by_id
  endpoint:
    path: /carts/{id}
    method: GET
- name: cart_by_key
  endpoint:
    path: /carts/key={key}
    method: GET
- name: cart_by_customer_id
  endpoint:
    path: /carts/customer-id={customerId}
    method: GET
- name: cart_in_store_by_id
  endpoint:
    path: /in-store/key={storeKey}/carts/{id}
    method: GET
- name: cart_in_store_by_key
  endpoint:
    path: /in-store/key={storeKey}/carts/key={key}
    method: GET
- name: cart_in_store_by_customer_id
  endpoint:
    path: /in-store/key={storeKey}/carts/customer-id={customerId}
    method: GET
- name: replicate_cart
  endpoint:
    path: /in-store/key={storeKey}/carts/replicate
    method: POST
    data_selector: Cart
- name: merge_cart
  endpoint:
    path: /carts/customer-id={customerId}/merge
    method: POST
    data_selector: Cart
- name: merge_cart_in_store
  endpoint:
    path: /in-store/key={storeKey}/carts/customer-id={customerId}/merge
    method: POST
    data_selector: Cart
- name: update_cart_by_id
  endpoint:
    path: /carts/{id}
    method: POST
    data_selector: Cart
- name: update_cart_by_key
  endpoint:
    path: /carts/key={key}
    method: POST
    data_selector: Cart
- name: update_cart_in_store
  endpoint:
    path: /in-store/key={storeKey}/carts/{id}
    method: POST
    data_selector: Cart
- name: carts
  endpoint:
    path: /carts
    method: GET
    data_selector: results
    params:
      limit: 20
      offset: 0
- name: carts_in_store
  endpoint:
    path: /in-store/key={storeKey}/carts
    method: GET
    data_selector: results
    params:
      limit: 20
      offset: 0
- name: check_cart_exists
  endpoint:
    path: /carts/{id}
    method: HEAD
    data_selector: ''
- name: update_cart_by_id
  endpoint:
    path: /{projectKey}/in-store/key={storeKey}/carts/{id}
    method: POST
    data_selector: Cart
    params: {}
- name: update_cart_by_key
  endpoint:
    path: /{projectKey}/in-store/key={storeKey}/carts/key={key}
    method: POST
    data_selector: Cart
    params: {}
- name: cart_by_key
  endpoint:
    path: /carts/key={key}
    method: HEAD
- name: cart_by_customer_id
  endpoint:
    path: /carts/customer-id={customerId}
    method: HEAD
- name: cart_by_query_predicate
  endpoint:
    path: /carts
    method: HEAD
- name: cart_in_store_by_id
  endpoint:
    path: /in-store/key={storeKey}/carts/{id}
    method: HEAD
- name: cart_in_store_by_key
  endpoint:
    path: /in-store/key={storeKey}/carts/key={key}
    method: HEAD
- name: cart_in_store_by_customer_id
  endpoint:
    path: /in-store/key={storeKey}/carts/customer-id={customerId}
    method: HEAD
- name: cart_in_store_by_query_predicate
  endpoint:
    path: /in-store/key={storeKey}/carts
    method: HEAD
- name: create_cart
  endpoint:
    path: /carts
    method: POST
- name: create_cart_in_store
  endpoint:
    path: /in-store/key={storeKey}/carts
    method: POST
- name: replicate_cart
  endpoint:
    path: /carts/replicate
    method: POST
- name: Cart
  endpoint:
    path: /carts
    method: POST
    data_selector: cart
- name: LineItem
  endpoint:
    path: /line-items
    method: POST
    data_selector: lineItem
- name: CustomLineItem
  endpoint:
    path: /custom-line-items
    method: POST
    data_selector: customLineItem
- name: replicate_cart
  endpoint:
    path: /in-store/key={storeKey}/carts/replicate
    method: POST
    data_selector: Cart
- name: merge_cart
  endpoint:
    path: /carts/customer-id={customerId}/merge
    method: POST
    data_selector: Cart
- name: merge_cart_in_store
  endpoint:
    path: /in-store/key={storeKey}/carts/customer-id={customerId}/merge
    method: POST
    data_selector: Cart
- name: update_cart_by_id
  endpoint:
    path: /carts/{id}
    method: POST
    data_selector: Cart
- name: update_cart_by_key
  endpoint:
    path: /carts/key={key}
    method: POST
    data_selector: Cart
- name: update_cart_in_store
  endpoint:
    path: /in-store/key={storeKey}/carts/{id}
    method: POST
    data_selector: Cart
- name: update_cart_by_id
  endpoint:
    path: /{projectKey}/in-store/key={storeKey}/carts/{id}
    method: POST
    data_selector: Cart
- name: update_cart_by_key
  endpoint:
    path: /{projectKey}/in-store/key={storeKey}/carts/key={key}
    method: POST
    data_selector: Cart
- name: cart
  endpoint:
    path: /carts
    method: POST
    data_selector: cart
- name: lineItem
  endpoint:
    path: /line-items
    method: POST
    data_selector: lineItem
- name: customLineItem
  endpoint:
    path: /custom-line-items
    method: POST
    data_selector: customLineItem
- name: addCustomLineItem
  endpoint:
    path: /carts/addCustomLineItem
    method: POST
    data_selector: action
    params: {}
- name: removeCustomLineItem
  endpoint:
    path: /carts/removeCustomLineItem
    method: POST
    data_selector: action
    params: {}
- name: addShoppingList
  endpoint:
    path: /carts/addShoppingList
    method: POST
    data_selector: action
    params: {}
- name: setCartTotalTax
  endpoint:
    path: /carts/setCartTotalTax
    method: POST
    data_selector: action
    params: {}
- name: changeTaxMode
  endpoint:
    path: /carts/changeTaxMode
    method: POST
    data_selector: action
    params: {}
- name: changePriceRoundingMode
  endpoint:
    path: /carts/changePriceRoundingMode
    method: POST
    data_selector: action
    params: {}
- name: changeTaxRoundingMode
  endpoint:
    path: /carts/changeTaxRoundingMode
    method: POST
    data_selector: action
    params: {}
- name: changeTaxCalculationMode
  endpoint:
    path: /carts/changeTaxCalculationMode
    method: POST
    data_selector: action
    params: {}
- name: addDiscountCode
  endpoint:
    path: /carts/addDiscountCode
    method: POST
    data_selector: action
    params: {}
- name: removeDiscountCode
  endpoint:
    path: /carts/removeDiscountCode
    method: POST
    data_selector: action
    params: {}
- name: setDirectDiscounts
  endpoint:
    path: /carts/setDirectDiscounts
    method: POST
    data_selector: action
    params: {}
- name: addPayment
  endpoint:
    path: /carts/addPayment
    method: POST
    data_selector: action
    params: {}
- name: removePayment
  endpoint:
    path: /carts/removePayment
    method: POST
    data_selector: action
    params: {}
- name: setBillingAddress
  endpoint:
    path: /carts/setBillingAddress
    method: POST
    data_selector: action
    params: {}
- name: setShippingAddress
  endpoint:
    path: /carts/setShippingAddress
    method: POST
    data_selector: action
    params: {}
- name: addItemShippingAddress
  endpoint:
    path: /carts/addItemShippingAddress
    method: POST
    data_selector: action
    params: {}
- name: removeItemShippingAddress
  endpoint:
    path: /carts/removeItemShippingAddress
    method: POST
    data_selector: action
    params: {}
- name: updateItemShippingAddress
  endpoint:
    path: /carts/updateItemShippingAddress
    method: POST
    data_selector: action
    params: {}
- name: addShippingMethod
  endpoint:
    path: /carts/addShippingMethod
    method: POST
    data_selector: action
    params: {}
- name: addCustomLineItem
  endpoint:
    path: /path/to/addCustomLineItem
    method: POST
    data_selector: records
- name: removeCustomLineItem
  endpoint:
    path: /path/to/removeCustomLineItem
    method: POST
    data_selector: records
- name: addShoppingList
  endpoint:
    path: /path/to/addShoppingList
    method: POST
    data_selector: records
- name: setCartTotalTax
  endpoint:
    path: /path/to/setCartTotalTax
    method: POST
    data_selector: records
- name: changeTaxMode
  endpoint:
    path: /path/to/changeTaxMode
    method: POST
    data_selector: records
- name: changePriceRoundingMode
  endpoint:
    path: /path/to/changePriceRoundingMode
    method: POST
    data_selector: records
- name: changeTaxRoundingMode
  endpoint:
    path: /path/to/changeTaxRoundingMode
    method: POST
    data_selector: records
- name: changeTaxCalculationMode
  endpoint:
    path: /path/to/changeTaxCalculationMode
    method: POST
    data_selector: records
- name: addDiscountCode
  endpoint:
    path: /path/to/addDiscountCode
    method: POST
    data_selector: records
- name: removeDiscountCode
  endpoint:
    path: /path/to/removeDiscountCode
    method: POST
    data_selector: records
- name: setDirectDiscounts
  endpoint:
    path: /path/to/setDirectDiscounts
    method: POST
    data_selector: records
- name: addPayment
  endpoint:
    path: /path/to/addPayment
    method: POST
    data_selector: records
- name: removePayment
  endpoint:
    path: /path/to/removePayment
    method: POST
    data_selector: records
- name: setBillingAddress
  endpoint:
    path: /path/to/setBillingAddress
    method: POST
    data_selector: records
- name: setShippingAddress
  endpoint:
    path: /path/to/setShippingAddress
    method: POST
    data_selector: records
- name: addItemShippingAddress
  endpoint:
    path: /path/to/addItemShippingAddress
    method: POST
    data_selector: records
- name: removeItemShippingAddress
  endpoint:
    path: /path/to/removeItemShippingAddress
    method: POST
    data_selector: records
- name: updateItemShippingAddress
  endpoint:
    path: /path/to/updateItemShippingAddress
    method: POST
    data_selector: records
- name: addShippingMethod
  endpoint:
    path: /path/to/addShippingMethod
    method: POST
    data_selector: records
- name: addShippingMethod
  endpoint:
    path: /carts/addShippingMethod
    method: POST
    data_selector: action
    params: {}
- name: removeShippingMethod
  endpoint:
    path: /carts/removeShippingMethod
    method: POST
    data_selector: action
    params: {}
- name: setShippingMethod
  endpoint:
    path: /carts/setShippingMethod
    method: POST
    data_selector: action
    params: {}
- name: addCustomShippingMethod
  endpoint:
    path: /carts/addCustomShippingMethod
    method: POST
    data_selector: action
    params: {}
- name: setCustomShippingMethod
  endpoint:
    path: /carts/setCustomShippingMethod
    method: POST
    data_selector: action
    params: {}
- name: setShippingRateInput
  endpoint:
    path: /carts/setShippingRateInput
    method: POST
    data_selector: action
    params: {}
- name: setLocale
  endpoint:
    path: /carts/setLocale
    method: POST
    data_selector: action
    params: {}
- name: setCountry
  endpoint:
    path: /carts/setCountry
    method: POST
    data_selector: action
    params: {}
- name: setDeleteDaysAfterLastModification
  endpoint:
    path: /carts/setDeleteDaysAfterLastModification
    method: POST
    data_selector: action
    params: {}
- name: setCustomType
  endpoint:
    path: /carts/setCustomType
    method: POST
    data_selector: action
    params: {}
- name: setCustomField
  endpoint:
    path: /carts/setCustomField
    method: POST
    data_selector: action
    params: {}
- name: recalculate
  endpoint:
    path: /carts/recalculate
    method: POST
    data_selector: action
    params: {}
- name: freezeCart
  endpoint:
    path: /carts/freezeCart
    method: POST
    data_selector: action
    params: {}
- name: unfreezeCart
  endpoint:
    path: /carts/unfreezeCart
    method: POST
    data_selector: action
    params: {}
- name: changeLineItemQuantity
  endpoint:
    path: /carts/changeLineItemQuantity
    method: POST
    data_selector: action
    params: {}
- name: setLineItemTaxRate
  endpoint:
    path: /carts/setLineItemTaxRate
    method: POST
    data_selector: action
    params: {}
- name: addShippingMethod
  endpoint:
    path: /carts/addShippingMethod
    method: POST
    data_selector: action
    params: {}
- name: removeShippingMethod
  endpoint:
    path: /carts/removeShippingMethod
    method: POST
    data_selector: action
    params: {}
- name: setShippingMethod
  endpoint:
    path: /carts/setShippingMethod
    method: POST
    data_selector: action
    params: {}
- name: addCustomShippingMethod
  endpoint:
    path: /carts/addCustomShippingMethod
    method: POST
    data_selector: action
    params: {}
- name: setCustomShippingMethod
  endpoint:
    path: /carts/setCustomShippingMethod
    method: POST
    data_selector: action
    params: {}
- name: setShippingRateInput
  endpoint:
    path: /carts/setShippingRateInput
    method: POST
    data_selector: action
    params: {}
- name: setLocale
  endpoint:
    path: /carts/setLocale
    method: POST
    data_selector: action
    params: {}
- name: setCountry
  endpoint:
    path: /carts/setCountry
    method: POST
    data_selector: action
    params: {}
- name: setDeleteDaysAfterLastModification
  endpoint:
    path: /carts/setDeleteDaysAfterLastModification
    method: POST
    data_selector: action
    params: {}
- name: setCustomType
  endpoint:
    path: /carts/setCustomType
    method: POST
    data_selector: action
    params: {}
- name: setCustomField
  endpoint:
    path: /carts/setCustomField
    method: POST
    data_selector: action
    params: {}
- name: recalculate
  endpoint:
    path: /carts/recalculate
    method: POST
    data_selector: action
    params: {}
- name: freezeCart
  endpoint:
    path: /carts/freezeCart
    method: POST
    data_selector: action
    params: {}
- name: unfreezeCart
  endpoint:
    path: /carts/unfreezeCart
    method: POST
    data_selector: action
    params: {}
- name: changeLineItemQuantity
  endpoint:
    path: /carts/changeLineItemQuantity
    method: POST
    data_selector: action
    params: {}
- name: setLineItemTaxRate
  endpoint:
    path: /carts/setLineItemTaxRate
    method: POST
    data_selector: action
    params: {}
- name: setLineItemTaxAmount
  endpoint:
    path: /setLineItemTaxAmount
    method: POST
    data_selector: action
- name: setLineItemPrice
  endpoint:
    path: /setLineItemPrice
    method: POST
    data_selector: action
- name: setLineItemTotalPrice
  endpoint:
    path: /setLineItemTotalPrice
    method: POST
    data_selector: action
- name: setLineItemDistributionChannel
  endpoint:
    path: /setLineItemDistributionChannel
    method: POST
    data_selector: action
- name: setLineItemSupplyChannel
  endpoint:
    path: /setLineItemSupplyChannel
    method: POST
    data_selector: action
- name: setLineItemShippingDetails
  endpoint:
    path: /setLineItemShippingDetails
    method: POST
    data_selector: action
- name: applyDeltaToLineItemShippingDetailsTargets
  endpoint:
    path: /applyDeltaToLineItemShippingDetailsTargets
    method: POST
    data_selector: action
- name: setLineItemRecurrenceInfo
  endpoint:
    path: /setLineItemRecurrenceInfo
    method: POST
    data_selector: action
- name: setLineItemCustomType
  endpoint:
    path: /setLineItemCustomType
    method: POST
    data_selector: action
- name: setLineItemCustomField
  endpoint:
    path: /setLineItemCustomField
    method: POST
    data_selector: action
- name: setLineItemInventoryMode
  endpoint:
    path: /setLineItemInventoryMode
    method: POST
    data_selector: action
- name: changeCustomLineItemQuantity
  endpoint:
    path: /changeCustomLineItemQuantity
    method: POST
    data_selector: action
- name: setCustomLineItemTaxRate
  endpoint:
    path: /setCustomLineItemTaxRate
    method: POST
    data_selector: action
- name: setCustomLineItemTaxAmount
  endpoint:
    path: /setCustomLineItemTaxAmount
    method: POST
    data_selector: action
- name: changeCustomLineItemPriceMode
  endpoint:
    path: /changeCustomLineItemPriceMode
    method: POST
    data_selector: action
- name: CustomLineItem
  endpoint:
    path: /ctp:api:type:CustomLineItem
    method: POST
    data_selector: records
- name: ShippingMethod
  endpoint:
    path: /ctp:api:type:ShippingMethod
    method: POST
    data_selector: records
- name: Shipping
  endpoint:
    path: /ctp:api:type:Shipping
    method: POST
    data_selector: records
- name: delete_cart_by_id
  endpoint:
    path: /carts/{id}
    method: DELETE
    params:
      version: Last seen version of the resource.
- name: delete_cart_by_key
  endpoint:
    path: /carts/key={key}
    method: DELETE
    params:
      version: Last seen version of the resource.
- name: delete_cart_in_store_by_id
  endpoint:
    path: /in-store/key={storeKey}/carts/{id}
    method: DELETE
    params:
      version: Last seen version of the resource.
- name: delete_cart_in_store_by_key
  endpoint:
    path: /in-store/key={storeKey}/carts/key={key}
    method: DELETE
    params:
      version: Last seen version of the resource.
- name: order
  endpoint:
    path: /orders
    method: GET
    data_selector: results
    params:
      limit: 20
      offset: 0
- name: setLineItemTaxAmount
  endpoint:
    path: /carts/setLineItemTaxAmount
    method: POST
    data_selector: action
    params: {}
- name: setLineItemPrice
  endpoint:
    path: /carts/setLineItemPrice
    method: POST
    data_selector: action
    params: {}
- name: setLineItemTotalPrice
  endpoint:
    path: /carts/setLineItemTotalPrice
    method: POST
    data_selector: action
    params: {}
- name: setLineItemDistributionChannel
  endpoint:
    path: /carts/setLineItemDistributionChannel
    method: POST
    data_selector: action
    params: {}
- name: setLineItemSupplyChannel
  endpoint:
    path: /carts/setLineItemSupplyChannel
    method: POST
    data_selector: action
    params: {}
- name: setLineItemShippingDetails
  endpoint:
    path: /carts/setLineItemShippingDetails
    method: POST
    data_selector: action
    params: {}
- name: applyDeltaToLineItemShippingDetailsTargets
  endpoint:
    path: /carts/applyDeltaToLineItemShippingDetailsTargets
    method: POST
    data_selector: action
    params: {}
- name: setLineItemRecurrenceInfo
  endpoint:
    path: /carts/setLineItemRecurrenceInfo
    method: POST
    data_selector: action
    params: {}
- name: setLineItemCustomType
  endpoint:
    path: /carts/setLineItemCustomType
    method: POST
    data_selector: action
    params: {}
- name: setLineItemCustomField
  endpoint:
    path: /carts/setLineItemCustomField
    method: POST
    data_selector: action
    params: {}
- name: setLineItemInventoryMode
  endpoint:
    path: /carts/setLineItemInventoryMode
    method: POST
    data_selector: action
    params: {}
- name: changeCustomLineItemQuantity
  endpoint:
    path: /carts/changeCustomLineItemQuantity
    method: POST
    data_selector: action
    params: {}
- name: setCustomLineItemTaxRate
  endpoint:
    path: /carts/setCustomLineItemTaxRate
    method: POST
    data_selector: action
    params: {}
- name: setCustomLineItemTaxAmount
  endpoint:
    path: /carts/setCustomLineItemTaxAmount
    method: POST
    data_selector: action
    params: {}
- name: changeCustomLineItemPriceMode
  endpoint:
    path: /carts/changeCustomLineItemPriceMode
    method: POST
    data_selector: action
    params: {}
- name: Order
  endpoint:
    path: /orders
    method: GET
    data_selector: orders
- name: Delivery
  endpoint:
    path: /delivery
    method: GET
    data_selector: deliveries
- name: DeliveryDraft
  endpoint:
    path: /deliveryDraft
    method: GET
    data_selector: deliveryDrafts
- name: ReturnInfo
  endpoint:
    path: /returnInfo
    method: GET
    data_selector: returnInfos
- name: ReturnInfoDraft
  endpoint:
    path: /returnInfoDraft
    method: GET
    data_selector: returnInfoDrafts
- name: order_by_id
  endpoint:
    path: /orders/{id}
    method: GET
    data_selector: Order
- name: order_by_order_number
  endpoint:
    path: /orders/order-number={orderNumber}
    method: GET
    data_selector: Order
- name: order_in_store_by_id
  endpoint:
    path: /in-store/key={storeKey}/orders/{id}
    method: GET
    data_selector: Order
- name: get_order_in_store
  endpoint:
    path: /in-store/key={storeKey}/orders/order-number={orderNumber}
    method: GET
- name: query_orders
  endpoint:
    path: /orders
    method: GET
- name: check_order_exists_by_id
  endpoint:
    path: /orders/{id}
    method: HEAD
- name: check_order_exists_by_order_number
  endpoint:
    path: /orders/order-number={orderNumber}
    method: HEAD
- name: check_order_exists_by_query_predicate
  endpoint:
    path: /orders
    method: HEAD
- name: check_order_exists_in_store_by_id
  endpoint:
    path: /in-store/key={storeKey}/orders/{id}
    method: HEAD
- name: check_order_exists_in_store_by_order_number
  endpoint:
    path: /in-store/key={storeKey}/orders/order-number={orderNumber}
    method: HEAD
- name: check_order_exists_in_store_by_query_predicate
  endpoint:
    path: /in-store/key={storeKey}/orders
    method: HEAD
- name: create_order_from_cart
  endpoint:
    path: /orders
    method: POST
- name: create_order_from_quote
  endpoint:
    path: /orders/quotes
    method: POST
- name: changeCustomLineItemMoney
  endpoint:
    path: /changeCustomLineItemMoney
    method: POST
    data_selector: action
    params:
      action: changeCustomLineItemMoney
      customLineItemId: '{{customLineItemId}}'
      money:
        currencyCode: EUR
        centAmount: 4200
- name: setCustomLineItemShippingDetails
  endpoint:
    path: /setCustomLineItemShippingDetails
    method: POST
    data_selector: action
    params:
      action: setCustomLineItemShippingDetails
      customLineItemId: '{{customlineItemId}}'
      shippingDetails:
        targets:
        - addressKey: '{{addressKey}}'
          quantity: 1
- name: applyDeltaToCustomLineItemShippingDetailsTargets
  endpoint:
    path: /applyDeltaToCustomLineItemShippingDetailsTargets
    method: POST
    data_selector: action
    params:
      action: applyDeltaToCustomLineItemShippingDetailsTargets
      customLineItemId: '{{customlineItemId}}'
      targetsDelta:
      - addressKey: addressKeyString
        quantity: 1
- name: setCustomLineItemRecurrenceInfo
  endpoint:
    path: /setCustomLineItemRecurrenceInfo
    method: POST
    data_selector: action
    params:
      action: setCustomLineItemRecurrenceInfo
      customLineItemId: '{{customLineItemId}}'
      recurrenceInfo:
        recurrencePolicy:
          id: '{{recurrence-policy-id}}'
          typeId: recurrence-policy
- name: setCustomLineItemCustomType
  endpoint:
    path: /setCustomLineItemCustomType
    method: POST
    data_selector: action
    params:
      action: setCustomLineItemCustomType
      type:
        id: '{{type-id}}'
        typeId: type
      fields:
        exampleStringField: TextString
      customLineItemId: '{{customLineItemId}}'
- name: setCustomLineItemCustomField
  endpoint:
    path: /setCustomLineItemCustomField
    method: POST
    data_selector: action
    params:
      action: setCustomLineItemCustomField
      customLineItemId: '{{customLineItemId}}'
      name: exampleStringField
      value: TextString
- name: setBillingAddressCustomType
  endpoint:
    path: /setBillingAddressCustomType
    method: POST
    data_selector: action
    params:
      action: setBillingAddressCustomType
      type:
        id: '{{type-id}}'
        typeId: type
      fields:
        exampleStringField: TextString
- name: setBillingAddressCustomField
  endpoint:
    path: /setBillingAddressCustomField
    method: POST
    data_selector: action
    params:
      action: setBillingAddressCustomField
      name: exampleStringField
      value: TextString
- name: setShippingAddressCustomType
  endpoint:
    path: /setShippingAddressCustomType
    method: POST
    data_selector: action
    params:
      action: setShippingAddressCustomType
      type:
        id: '{{type-id}}'
        typeId: type
      fields:
        exampleStringField: TextString
- name: setShippingAddressCustomField
  endpoint:
    path: /setShippingAddressCustomField
    method: POST
    data_selector: action
    params:
      action: setShippingAddressCustomField
      name: exampleStringField
      value: TextString
- name: setItemShippingAddressCustomType
  endpoint:
    path: /setItemShippingAddressCustomType
    method: POST
    data_selector: action
    params:
      action: setItemShippingAddressCustomType
      addressKey: '{{address-key}}'
      type:
        id: '{{type-id}}'
        typeId: type
      fields:
        exampleStringField: TextString
- name: setItemShippingAddressCustomField
  endpoint:
    path: /setItemShippingAddressCustomField
    method: POST
    data_selector: action
    params:
      action: setItemShippingAddressCustomField
      addressKey: '{{address-key}}'
      name: exampleStringField
      value: TextString
- name: setShippingMethodTaxAmount
  endpoint:
    path: /setShippingMethodTaxAmount
    method: POST
    data_selector: action
    params:
      action: setShippingMethodTaxAmount
      shippingKey: shipping-method-key
      externalTaxAmount:
        totalGross:
          centAmount: 2000000
          currencyCode: EUR
        taxRate:
          name: myTaxRate
          amount: 0.19
          country: DE
- name: setShippingMethodTaxRate
  endpoint:
    path: /setShippingMethodTaxRate
    method: POST
    data_selector: action
    params:
      action: setShippingMethodTaxRate
      shippingKey: shipping-method-key
      externalTaxRate:
        name: myTaxRate
        amount: 0.19
        country: DE
- name: setShippingCustomType
  endpoint:
    path: /setShippingCustomType
    method: POST
    data_selector: action
    params:
      action: setShippingCustomType
      shippingKey: shippingMethodKey1
      type:
        id: '{{type-id}}'
        typeId: type
      fields:
        exampleStringField: TextString
- name: setShippingCustomField
  endpoint:
    path: /setShippingCustomField
    method: POST
    data_selector: action
    params:
      action: setShippingCustomField
      shippingKey: shippingMethodKey1
      name: exampleStringField
      value: TextString
- name: create_order_from_cart
  endpoint:
    path: /in-store/key={storeKey}/orders
    method: POST
- name: create_order_from_quote
  endpoint:
    path: /in-store/key={storeKey}/orders/quotes
    method: POST
- name: update_order_by_id
  endpoint:
    path: /orders/{id}
    method: POST
- name: update_order
  endpoint:
    path: /orders/order-number={orderNumber}
    method: POST
    data_selector: Order
- name: delete_cart_by_id
  endpoint:
    path: /carts/{id}
    method: DELETE
    data_selector: Cart
- name: delete_cart_by_key
  endpoint:
    path: /carts/key={key}
    method: DELETE
    data_selector: Cart
- name: delete_cart_in_store_by_id
  endpoint:
    path: /in-store/key={storeKey}/carts/{id}
    method: DELETE
    data_selector: Cart
- name: delete_cart_in_store_by_key
  endpoint:
    path: /in-store/key={storeKey}/carts/key={key}
    method: DELETE
    data_selector: Cart
- name: payment_method
  endpoint:
    path: /payment-methods/{id}
    method: GET
    data_selector: PaymentMethod
- name: payment_method_by_key
  endpoint:
    path: /payment-methods/key={key}
    method: GET
    data_selector: PaymentMethod
- name: Order
  endpoint:
    path: /orders
    method: GET
    data_selector: results
- name: OrderFromCartDraft
  endpoint:
    path: /orders/from-cart
    method: POST
    data_selector: results
- name: OrderFromQuoteDraft
  endpoint:
    path: /orders/from-quote
    method: POST
    data_selector: results
- name: OrderPagedQueryResponse
  endpoint:
    path: /orders/paged-query
    method: GET
    data_selector: results
- name: payment_methods
  endpoint:
    path: /payment-methods
    method: GET
    data_selector: results
    params:
      limit: 20
      offset: 0
      withTotal: true
- name: Order
  endpoint:
    path: /orders
    method: GET
- name: Delivery
  endpoint:
    path: /deliveries
    method: GET
- name: DeliveryDraft
  endpoint:
    path: /deliveryDrafts
    method: GET
- name: ReturnInfo
  endpoint:
    path: /returnInfos
    method: GET
- name: ReturnInfoDraft
  endpoint:
    path: /returnInfoDrafts
    method: GET
- name: Delete PaymentMethod by ID
  endpoint:
    path: /{projectKey}/payment-methods/{id}
    method: DELETE
- name: Delete PaymentMethod by Key
  endpoint:
    path: /{projectKey}/payment-methods/key={key}
    method: DELETE
- name: order_by_id
  endpoint:
    path: /orders/{id}
    method: GET
    data_selector: Order
- name: order_by_order_number
  endpoint:
    path: /orders/order-number={orderNumber}
    method: GET
    data_selector: Order
- name: order_in_store_by_id
  endpoint:
    path: /in-store/key={storeKey}/orders/{id}
    method: GET
    data_selector: Order
- name: payment
  endpoint:
    path: /payments/{id}
    method: GET
    data_selector: Payment
- name: payment_by_key
  endpoint:
    path: /payments/key={key}
    method: GET
    data_selector: Payment
- name: order_in_store
  endpoint:
    path: /in-store/key={storeKey}/orders/order-number={orderNumber}
    method: GET
- name: query_orders
  endpoint:
    path: /orders
    method: GET
- name: check_order_exists_by_id
  endpoint:
    path: /orders/{id}
    method: HEAD
- name: payments
  endpoint:
    path: /payments
    method: GET
    data_selector: results
    params:
      limit: 20
      offset: 0
- name: check_payment_by_id
  endpoint:
    path: /payments/{id}
    method: HEAD
    data_selector: null
    params: {}
- name: check_payment_by_key
  endpoint:
    path: /payments/key={key}
    method: HEAD
    data_selector: null
    params: {}
- name: check_payment_by_query_predicate
  endpoint:
    path: /payments
    method: HEAD
    data_selector: null
    params: {}
- name: create_payment
  endpoint:
    path: /payments
    method: POST
    data_selector: null
    params: {}
- name: update_payment_by_id
  endpoint:
    path: /payments/{id}
    method: POST
    data_selector: null
    params: {}
- name: update_payment_by_key
  endpoint:
    path: /payments/key={key}
    method: POST
    data_selector: null
    params: {}
- name: check_order_exists_by_order_number
  endpoint:
    path: /orders/order-number={orderNumber}
    method: HEAD
- name: check_order_exists_by_query_predicate
  endpoint:
    path: /orders
    method: HEAD
- name: check_order_exists_in_store_by_id
  endpoint:
    path: /in-store/key={storeKey}/orders/{id}
    method: HEAD
- name: check_order_exists_in_store_by_order_number
  endpoint:
    path: /in-store/key={storeKey}/orders/order-number={orderNumber}
    method: HEAD
- name: check_order_exists_in_store_by_query_predicate
  endpoint:
    path: /in-store/key={storeKey}/orders
    method: HEAD
- name: create_order_from_cart
  endpoint:
    path: /orders
    method: POST
- name: create_order_from_quote
  endpoint:
    path: /orders/quotes
    method: POST
- name: ShoppingList
  endpoint:
    path: /shopping-lists
    method: GET
    data_selector: results
    params:
      limit: 20
      offset: 0
- name: ShoppingListDraft
  endpoint:
    path: /shopping-lists/drafts
    method: POST
    data_selector: results
    params: {}
- name: ShoppingListPagedQueryResponse
  endpoint:
    path: /shopping-lists/paged-query
    method: GET
    data_selector: results
    params:
      limit: 20
      offset: 0
- name: create_order_from_cart
  endpoint:
    path: /in-store/key={storeKey}/orders
    method: POST
- name: create_order_from_quote
  endpoint:
    path: /in-store/key={storeKey}/orders/quotes
    method: POST
- name: update_order_by_id
  endpoint:
    path: /orders/{id}
    method: POST
- name: TextLineItem
  endpoint:
    path: /path/to/textlineitem
    method: GET
    data_selector: records
    params: {}
- name: update_order
  endpoint:
    path: /orders/order-number={orderNumber}
    method: POST
    data_selector: Order
- name: shopping_list_by_id
  endpoint:
    path: /shopping-lists/{id}
    method: GET
- name: shopping_list_by_key
  endpoint:
    path: /shopping-lists/key={key}
    method: GET
- name: shopping_list_in_store_by_id
  endpoint:
    path: /in-store/key={storeKey}/shopping-lists/{id}
    method: GET
- name: shopping_list_in_store_by_key
  endpoint:
    path: /in-store/key={storeKey}/shopping-lists/key={key}
    method: GET
- name: query_shopping_lists
  endpoint:
    path: /shopping-lists
    method: GET
- name: payment_method
  endpoint:
    path: /payment-methods/{id}
    method: GET
    data_selector: PaymentMethod
- name: payment_method_by_key
  endpoint:
    path: /payment-methods/key={key}
    method: GET
    data_selector: PaymentMethod
- name: shopping_lists
  endpoint:
    path: /in-store/key={storeKey}/shopping-lists
    method: GET
    data_selector: results
- name: shopping_list_check_by_id
  endpoint:
    path: /shopping-lists/{id}
    method: HEAD
- name: shopping_list_check_by_key
  endpoint:
    path: /shopping-lists/key={key}
    method: HEAD
- name: shopping_list_check_by_query_predicate
  endpoint:
    path: /shopping-lists
    method: HEAD
- name: shopping_lists_in_store_check_by_id
  endpoint:
    path: /in-store/key={storeKey}/shopping-lists/{id}
    method: HEAD
- name: shopping_lists_in_store_check_by_key
  endpoint:
    path: /in-store/key={storeKey}/shopping-lists/key={key}
    method: HEAD
- name: shopping_lists_in_store_check_by_query_predicate
  endpoint:
    path: /in-store/key={storeKey}/shopping-lists
    method: HEAD
- name: create_shopping_list
  endpoint:
    path: /shopping-lists
    method: POST
- name: create_shopping_list_in_store
  endpoint:
    path: /in-store/key={storeKey}/shopping-lists
    method: POST
- name: payment-methods
  endpoint:
    path: /payment-methods
    method: GET
    data_selector: results
    params:
      limit: '20'
      offset: '0'
      withTotal: 'true'
- name: payment-methods-by-id
  endpoint:
    path: /payment-methods/{id}
    method: HEAD
    data_selector: null
    params: {}
- name: payment-methods-by-key
  endpoint:
    path: /payment-methods/key={key}
    method: HEAD
    data_selector: null
    params: {}
- name: payment-methods-query
  endpoint:
    path: /payment-methods
    method: HEAD
    data_selector: null
    params: {}
- name: create-payment-method
  endpoint:
    path: /payment-methods
    method: POST
    data_selector: null
    params: {}
- name: update-payment-method-by-id
  endpoint:
    path: /payment-methods/{id}
    method: POST
    data_selector: null
    params: {}
- name: update-payment-method-by-key
  endpoint:
    path: /payment-methods/key={key}
    method: POST
    data_selector: null
    params: {}
- name: shopping_list_by_id
  endpoint:
    path: /shopping-lists/{id}
    method: POST
- name: shopping_list_by_key
  endpoint:
    path: /shopping-lists/key={key}
    method: POST
- name: shopping_list_in_store_by_id
  endpoint:
    path: /in-store/key={storeKey}/shopping-lists/{id}
    method: POST
- name: shopping_list_in_store_by_key
  endpoint:
    path: /in-store/key={storeKey}/shopping-lists/key={key}
    method: POST
- name: Delete PaymentMethod by ID
  endpoint:
    path: /{id}
    method: DELETE
- name: Delete PaymentMethod by Key
  endpoint:
    path: /key={key}
    method: DELETE
- name: payment
  endpoint:
    path: /api/projects/payments
    method: GET
    data_selector: payments
    params: {}
- name: OrderEdit
  endpoint:
    path: /api/projects/order-edits
    method: GET
    data_selector: results
- name: payment
  endpoint:
    path: /payments/{id}
    method: GET
    data_selector: Payment
- name: payment_by_key
  endpoint:
    path: /payments/key={key}
    method: GET
    data_selector: Payment
- name: OrderEdit
  endpoint:
    path: /orders/edits/{id}
    method: GET
    data_selector: OrderEdit
- name: order_edit
  endpoint:
    path: /orders/edits/key={key}
    method: GET
    data_selector: results
- name: order_edits
  endpoint:
    path: /orders/edits
    method: GET
    data_selector: results
- name: check_order_edit_exists_by_id
  endpoint:
    path: /orders/edits/{id}
    method: HEAD
- name: check_order_edit_exists_by_key
  endpoint:
    path: /orders/edits/key={key}
    method: HEAD
- name: check_order_edit_exists_by_query_predicate
  endpoint:
    path: /orders/edits
    method: HEAD
- name: payments
  endpoint:
    path: /payments
    method: GET
    data_selector: results
    params:
      limit: 20
      offset: 0
      withTotal: true
- name: check_payment_by_id
  endpoint:
    path: /payments/{id}
    method: HEAD
    data_selector: null
    params: {}
- name: check_payment_by_key
  endpoint:
    path: /payments/key={key}
    method: HEAD
    data_selector: null
    params: {}
- name: create_payment
  endpoint:
    path: /payments
    method: POST
    data_selector: null
    params: {}
- name: update_payment_by_id
  endpoint:
    path: /payments/{id}
    method: POST
    data_selector: null
    params: {}
- name: update_payment_by_key
  endpoint:
    path: /payments/key={key}
    method: POST
    data_selector: null
    params: {}
- name: order_edit
  endpoint:
    path: /orders/edits
    method: POST
    data_selector: OrderEdit
    params: {}
- name: order_edit
  endpoint:
    path: /orders/edits/{id}
    method: POST
    data_selector: OrderEdit
- name: ShoppingList
  endpoint:
    path: /shopping-lists
    method: GET
    data_selector: results
- name: ShoppingListDraft
  endpoint:
    path: /shopping-lists/draft
    method: POST
    data_selector: results
- name: ShoppingListPagedQueryResponse
  endpoint:
    path: /shopping-lists/paged-query
    method: GET
    data_selector: results
- name: TextLineItem
  endpoint:
    path: /api/shopping-lists/text-line-items
    method: GET
    data_selector: items
- name: order_edit
  endpoint:
    path: /orders/edits/key={key}
    method: POST
    data_selector: OrderEdit
    params: {}
- name: OrderEdit
  endpoint:
    path: /api/projects/orders-edit
    method: POST
    data_selector: actions
    params: {}
- name: Get ShoppingList by ID
  endpoint:
    path: /shopping-lists/{id}
    method: GET
- name: Get ShoppingList by Key
  endpoint:
    path: /shopping-lists/key={key}
    method: GET
- name: Get ShoppingList in Store by ID
  endpoint:
    path: /in-store/key={storeKey}/shopping-lists/{id}
    method: GET
- name: Get ShoppingList in Store by Key
  endpoint:
    path: /in-store/key={storeKey}/shopping-lists/key={key}
    method: GET
- name: Query ShoppingLists
  endpoint:
    path: /shopping-lists
    method: GET
- name: addCustomLineItem
  endpoint:
    path: /path/to/addCustomLineItem
    method: POST
    data_selector: action
    params: {}
- name: removeCustomLineItem
  endpoint:
    path: /path/to/removeCustomLineItem
    method: POST
    data_selector: action
    params: {}
- name: addShoppingList
  endpoint:
    path: /path/to/addShoppingList
    method: POST
    data_selector: action
    params: {}
- name: import_order
  endpoint:
    path: /{projectKey}/orders/import
    method: POST
    data_selector: null
    params: {}
- name: shopping_lists
  endpoint:
    path: /in-store/key={storeKey}/shopping-lists
    method: GET
    data_selector: results
- name: shopping_list_exists_by_id
  endpoint:
    path: /shopping-lists/{id}
    method: HEAD
- name: shopping_list_exists_by_key
  endpoint:
    path: /shopping-lists/key={key}
    method: HEAD
- name: create_shopping_list
  endpoint:
    path: /shopping-lists
    method: POST
- name: create_shopping_list_in_store
  endpoint:
    path: /in-store/key={storeKey}/shopping-lists
    method: POST
- name: OrderImportDraft
  endpoint:
    path: /api/graphql
    method: POST
    data_selector: data.orderImportDraft
    params: {}
- name: LineItemImportDraft
  endpoint:
    path: /api/graphql
    method: POST
    data_selector: data.lineItemImportDraft
    params: {}
- name: CustomLineItemImportDraft
  endpoint:
    path: /api/graphql
    method: POST
    data_selector: data.customLineItemImportDraft
    params: {}
- name: TaxedPriceDraft
  endpoint:
    path: /api/graphql
    method: POST
    data_selector: data.taxedPriceDraft
    params: {}
- name: ShippingInfoImportDraft
  endpoint:
    path: /api/graphql
    method: POST
    data_selector: data.shippingInfoImportDraft
    params: {}
- name: DiscountedLineItemPriceDraft
  endpoint:
    path: /api/graphql
    method: POST
    data_selector: data.discountedLineItemPriceDraft
    params: {}
- name: shopping_list
  endpoint:
    path: /shopping-lists/{id}
    method: POST
    data_selector: response
    params: {}
- name: shopping_list_by_key
  endpoint:
    path: /shopping-lists/key={key}
    method: POST
    data_selector: response
    params: {}
- name: shopping_list_in_store
  endpoint:
    path: /in-store/key={storeKey}/shopping-lists/{id}
    method: POST
    data_selector: response
    params: {}
- name: shopping_list_in_store_by_key
  endpoint:
    path: /in-store/key={storeKey}/shopping-lists/key={key}
    method: POST
    data_selector: response
    params: {}
- name: order_import
  endpoint:
    path: /orders/import
    method: POST
- name: ShoppingListLineItem
  endpoint:
    path: /update-shoppinglistlineitems
    method: POST
    data_selector: lineItems
    params: {}
- name: search_orders
  endpoint:
    path: /{projectKey}/orders/search
    method: POST
- name: check_order_search_index
  endpoint:
    path: /{projectKey}/orders/search
    method: HEAD
- name: order_edit
  endpoint:
    path: /orders/edits/{id}
    method: GET
    data_selector: OrderEdit
- name: orders
  endpoint:
    path: /api/projects/orders
    method: GET
- name: order_edit
  endpoint:
    path: /orders/edits
    method: GET
    data_selector: results
- name: order_edit_by_key
  endpoint:
    path: /orders/edits/key={key}
    method: GET
    data_selector: results
- name: order_edit_by_id
  endpoint:
    path: /orders/edits/{id}
    method: HEAD
    data_selector: ''
- name: recurring_orders
  endpoint:
    path: /api/projects/recurring-orders
    method: GET
    data_selector: recurringOrders
    params: {}
- name: recurrence_policies
  endpoint:
    path: /api/projects/recurrence-policies
    method: GET
    data_selector: recurrencePolicies
    params: {}
- name: order_edit
  endpoint:
    path: /orders/edits
    method: POST
    data_selector: OrderEdit
    params: {}
- name: recurrence_policy
  endpoint:
    path: /recurrence-policies/{id}
    method: GET
    data_selector: RecurrencePolicy
- name: recurrence_policy_by_key
  endpoint:
    path: /recurrence-policies/key={key}
    method: GET
    data_selector: RecurrencePolicy
- name: order_edit
  endpoint:
    path: /orders/edits/{id}
    method: POST
- name: order_edit
  endpoint:
    path: /orders/edits/key={key}
    method: POST
    data_selector: OrderEdit
    params: {}
- name: OrderEdit
  endpoint:
    path: /api/projects/orders-edit
    method: POST
    data_selector: actions
    params: {}
- name: recurrence_policy
  endpoint:
    path: /recurrence-policies
    method: GET
    data_selector: results
    params:
      limit: '20'
      offset: '0'
- name: recurrence_policy_by_id
  endpoint:
    path: /recurrence-policies/{id}
    method: HEAD
    data_selector: ''
    params: {}
- name: recurrence_policy_by_key
  endpoint:
    path: /recurrence-policies/key={key}
    method: HEAD
    data_selector: ''
    params: {}
- name: create_recurrence_policy
  endpoint:
    path: /recurrence-policies
    method: POST
    data_selector: ''
    params: {}
- name: update_recurrence_policy_by_id
  endpoint:
    path: /recurrence-policies/{id}
    method: POST
    data_selector: ''
    params: {}
- name: update_recurrence_policy_by_key
  endpoint:
    path: /recurrence-policies/key={key}
    method: POST
    data_selector: ''
    params: {}
- name: delete_recurrence_policy_by_id
  endpoint:
    path: /recurrence-policies/{id}
    method: DELETE
    data_selector: ''
    params: {}
- name: addCustomLineItem
  endpoint:
    path: /addCustomLineItem
    method: POST
    data_selector: action
    params: {}
- name: removeCustomLineItem
  endpoint:
    path: /removeCustomLineItem
    method: POST
    data_selector: action
    params: {}
- name: addShoppingList
  endpoint:
    path: /addShoppingList
    method: POST
    data_selector: action
    params: {}
- name: recurrence_policy
  endpoint:
    path: /recurrence-policies/key={key}
    method: DELETE
    data_selector: RecurrencePolicy
    params:
      version: last seen version of the resource
- name: import_orders
  endpoint:
    path: /{projectKey}/orders/import
    method: POST
    data_selector: null
    params: {}
- name: RecurringOrder
  endpoint:
    path: /api/projects/recurring-orders
    method: GET
    data_selector: results
- name: OrderImportDraft
  endpoint:
    path: /api/graphql
    method: POST
    data_selector: data
    params: {}
- name: LineItemImportDraft
  endpoint:
    path: /api/graphql
    method: POST
    data_selector: data
    params: {}
- name: CustomLineItemImportDraft
  endpoint:
    path: /api/graphql
    method: POST
    data_selector: data
    params: {}
- name: TaxedPriceDraft
  endpoint:
    path: /api/graphql
    method: POST
    data_selector: data
    params: {}
- name: ShippingInfoImportDraft
  endpoint:
    path: /api/graphql
    method: POST
    data_selector: data
    params: {}
- name: DiscountedLineItemPriceDraft
  endpoint:
    path: /api/graphql
    method: POST
    data_selector: data
    params: {}
- name: recurring_order
  endpoint:
    path: /recurring-orders/{id}
    method: GET
    data_selector: RecurringOrder
- name: recurring_order_by_key
  endpoint:
    path: /recurring-orders/key={key}
    method: GET
    data_selector: RecurringOrder
- name: query_recurring_orders
  endpoint:
    path: /recurring-orders
    method: GET
    data_selector: RecurringOrderPagedQueryResponse
- name: create_recurring_order
  endpoint:
    path: /recurring-orders
    method: POST
    data_selector: RecurringOrder
- name: update_recurring_order
  endpoint:
    path: /recurring-orders/{id}
    method: POST
    data_selector: RecurringOrder
- name: order_import
  endpoint:
    path: /orders/import
    method: POST
    data_selector: Order
    params: {}
- name: search_orders
  endpoint:
    path: /orders/search
    method: POST
    data_selector: hits
- name: check_order_search_index
  endpoint:
    path: /orders/search
    method: HEAD
    data_selector: ''
- name: recurring_order
  endpoint:
    path: /recurring-orders/key={key}
    method: POST
    data_selector: id
    params: {}
- name: delete_recurring_order_by_id
  endpoint:
    path: /recurring-orders/{id}
    method: DELETE
    data_selector: id
    params: {}
- name: delete_recurring_order_by_key
  endpoint:
    path: /recurring-orders/key={key}
    method: DELETE
    data_selector: id
    params: {}
- name: recurring_orders
  endpoint:
    path: /api/projects/recurring-orders
    method: GET
    data_selector: recurringOrders
- name: recurrence_policies
  endpoint:
    path: /api/projects/recurrence-policies
    method: GET
    data_selector: recurrencePolicies
- name: ShippingRateInputType
  endpoint:
    path: /api/projects/project#shippingrateinputtype
    method: GET
- name: ShippingRatePriceTiers
  endpoint:
    path: /api/projects/shippingMethods#shippingratepricetier
    method: GET
- name: CartDraft
  endpoint:
    path: /api/projects/carts#cartdraft
    method: GET
- name: ShippingRate
  endpoint:
    path: /api/projects/shippingMethods#shippingrate
    method: GET
- name: CartDiscountDraft
  endpoint:
    path: /api/projects/cartDiscounts#cartdiscountdraft
    method: GET
- name: ShippingInfo
  endpoint:
    path: /api/projects/carts#shippinginfo
    method: GET
- name: TaxMode
  endpoint:
    path: /api/projects/carts#taxmode
    method: GET
- name: ShippingMode
  endpoint:
    path: /api/projects/carts#shippingmode
    method: GET
- name: recurrence_policy
  endpoint:
    path: /{projectKey}/recurrence-policies/{id}
    method: GET
    data_selector: RecurrencePolicy
- name: recurrence_policy_by_key
  endpoint:
    path: /{projectKey}/recurrence-policies/key={key}
    method: GET
    data_selector: RecurrencePolicy
- name: ShippingMethod
  endpoint:
    path: /shipping-methods
    method: GET
    data_selector: results
- name: ShippingMethodDraft
  endpoint:
    path: /shipping-methods/drafts
    method: POST
    data_selector: result
- name: ShippingMethodPagedQueryResponse
  endpoint:
    path: /shipping-methods/paged-query
    method: GET
    data_selector: results
- name: PriceFunction
  endpoint:
    data_selector: priceFunction
    params: {}
- name: recurrence_policy
  endpoint:
    path: /recurrence-policies
    method: GET
    data_selector: results
    params:
      limit: '20'
      offset: '0'
- name: check_recurrence_policy_exists_by_id
  endpoint:
    path: /recurrence-policies/{id}
    method: HEAD
    data_selector: ''
- name: check_recurrence_policy_exists_by_key
  endpoint:
    path: /recurrence-policies/key={key}
    method: HEAD
    data_selector: ''
- name: create_recurrence_policy
  endpoint:
    path: /recurrence-policies
    method: POST
    data_selector: ''
    params: {}
- name: update_recurrence_policy_by_id
  endpoint:
    path: /recurrence-policies/{id}
    method: POST
    data_selector: ''
    params: {}
- name: delete_recurrence_policy_by_id
  endpoint:
    path: /recurrence-policies/{id}
    method: DELETE
    data_selector: ''
    params: {}
- name: recurrence_policy
  endpoint:
    path: /recurrence-policies/key={key}
    method: DELETE
    params:
      version: '{version}'
- name: Get ShippingMethod by ID
  endpoint:
    path: /shipping-methods/{id}
    method: GET
- name: Get ShippingMethod by Key
  endpoint:
    path: /shipping-methods/key={key}
    method: GET
- name: Get matching Shipping Methods for a Cart
  endpoint:
    path: /shipping-methods/matching-cart
    method: HEAD
- name: Get matching Shipping Methods for a Location
  endpoint:
    path: /shipping-methods/matching-location
    method: HEAD
- name: Get matching Shipping Methods for a Cart and Location
  endpoint:
    path: /shipping-methods/matching-cart-location
    method: HEAD
- name: Get matching Shipping Methods for a Cart in Store
  endpoint:
    path: /in-store/key={storeKey}/shipping-methods/matching-cart
    method: HEAD
- name: Get matching Shipping Methods for an OrderEdit
  endpoint:
    path: /shipping-methods/matching-orderedit
    method: HEAD
- name: Query ShippingMethods
  endpoint:
    path: /shipping-methods
    method: GET
- name: Check if ShippingMethod exists by ID
  endpoint:
    path: /shipping-methods/{id}
    method: HEAD
- name: Check if ShippingMethod exists by Key
  endpoint:
    path: /shipping-methods/key={key}
    method: HEAD
- name: Check if ShippingMethod exists by Query Predicate
  endpoint:
    path: /shipping-methods
    method: HEAD
- name: RecurringOrder
  endpoint:
    path: /api/projects/recurring-orders
    method: GET
    data_selector: results
- name: shipping_methods_matching_cart
  endpoint:
    path: /shipping-methods/matching-cart
    method: HEAD
    data_selector: '200'
- name: shipping_methods_matching_location
  endpoint:
    path: /shipping-methods/matching-location
    method: HEAD
    data_selector: '200'
- name: shipping_methods_matching_cart_location
  endpoint:
    path: /shipping-methods/matching-cart-location
    method: HEAD
    data_selector: '200'
- name: shipping_methods_matching_cart_in_store
  endpoint:
    path: /in-store/key={storeKey}/shipping-methods/matching-cart
    method: HEAD
    data_selector: '200'
- name: shipping_methods_matching_orderedit
  endpoint:
    path: /shipping-methods/matching-orderedit
    method: HEAD
    data_selector: '200'
- name: create_shipping_method
  endpoint:
    path: /shipping-methods
    method: POST
    data_selector: '201'
- name: update_shipping_method
  endpoint:
    path: /shipping-methods/{id}
    method: POST
    data_selector: '200'
- name: recurring_order
  endpoint:
    path: /recurring-orders/{id}
    method: GET
    data_selector: RecurringOrder
    params: {}
- name: recurring_order_by_key
  endpoint:
    path: /recurring-orders/key={key}
    method: GET
    data_selector: RecurringOrder
    params: {}
- name: query_recurring_orders
  endpoint:
    path: /recurring-orders
    method: GET
    data_selector: RecurringOrderPagedQueryResponse
    params:
      limit: '20'
      offset: '0'
- name: create_recurring_order
  endpoint:
    path: /recurring-orders
    method: POST
    data_selector: RecurringOrder
    params: {}
- name: update_recurring_order
  endpoint:
    path: /recurring-orders/{id}
    method: POST
    data_selector: RecurringOrder
    params: {}
- name: zone
  endpoint:
    path: /zones/{id}
    method: GET
    data_selector: Zone
- name: zone_by_key
  endpoint:
    path: /zones/key={key}
    method: GET
    data_selector: Zone
- name: recurring_order
  endpoint:
    path: /recurring-orders/key={key}
    method: POST
    data_selector: RecurringOrder
    params: {}
- name: delete_recurring_order
  endpoint:
    path: /recurring-orders/{id}
    method: DELETE
    data_selector: RecurringOrder
    params: {}
- name: ShippingRateInputType
  endpoint:
    path: /api/projects/project#shippingrateinputtype
    method: GET
- name: ShippingRate
  endpoint:
    path: /api/projects/shippingMethods#shippingrate
    method: GET
- name: CartDraft
  endpoint:
    path: /api/projects/carts#cartdraft
    method: POST
- name: ShippingInfo
  endpoint:
    path: /api/projects/carts#shippinginfo
    method: GET
- name: TaxMode
  endpoint:
    path: /api/projects/carts#taxmode
    method: GET
- name: zones
  endpoint:
    path: /zones
    method: GET
    data_selector: results
    params:
      limit: 20
      offset: 0
      withTotal: true
- name: zone_by_id
  endpoint:
    path: /zones/{id}
    method: HEAD
    data_selector: ''
    params: {}
- name: zone_by_key
  endpoint:
    path: /zones/key={key}
    method: HEAD
    data_selector: ''
    params: {}
- name: zone_query
  endpoint:
    path: /zones
    method: HEAD
    data_selector: ''
    params: {}
- name: create_zone
  endpoint:
    path: /zones
    method: POST
    data_selector: ''
    params: {}
- name: update_zone_by_id
  endpoint:
    path: /zones/{id}
    method: POST
    data_selector: ''
    params: {}
- name: update_zone_by_key
  endpoint:
    path: /zones/key={key}
    method: POST
    data_selector: ''
    params: {}
- name: delete_zone_by_id
  endpoint:
    path: /zones/{id}
    method: DELETE
    data_selector: ''
    params: {}
- name: delete_zone_by_key
  endpoint:
    path: /zones/key={key}
    method: DELETE
    data_selector: ''
    params: {}
- name: shippingMethod
  endpoint:
    path: /shipping-methods
    method: GET
    data_selector: results
- name: shippingMethodDraft
  endpoint:
    path: /shipping-methods/drafts
    method: POST
    data_selector: results
- name: PriceFunction
  endpoint:
    path: /api/types#ctp:api:type:PriceFunction
    method: GET
    data_selector: PriceFunction
    params: {}
- name: QuoteRequest
  endpoint:
    path: /{projectKey}/quote-requests
    method: GET
    data_selector: results
    params:
      limit: '20'
      offset: '0'
- name: quote_request
  endpoint:
    path: /quote-requests/{id}
    method: GET
    data_selector: QuoteRequest
- name: quote_request_by_key
  endpoint:
    path: /quote-requests/key={key}
    method: GET
    data_selector: QuoteRequest
- name: quote_request_in_store
  endpoint:
    path: /in-store/key={storeKey}/quote-requests/{id}
    method: GET
    data_selector: QuoteRequest
- name: quote_request_in_store_by_key
  endpoint:
    path: /in-store/key={storeKey}/quote-requests/key={key}
    method: GET
    data_selector: QuoteRequest
- name: get_shipping_method_by_id
  endpoint:
    path: /shipping-methods/{id}
    method: GET
- name: get_shipping_method_by_key
  endpoint:
    path: /shipping-methods/key={key}
    method: GET
- name: get_matching_shipping_methods_for_cart
  endpoint:
    path: /shipping-methods/matching-cart
    method: HEAD
- name: get_matching_shipping_methods_for_location
  endpoint:
    path: /shipping-methods/matching-location
    method: HEAD
- name: get_matching_shipping_methods_for_cart_and_location
  endpoint:
    path: /shipping-methods/matching-cart-location
    method: HEAD
- name: get_matching_shipping_methods_for_cart_in_store
  endpoint:
    path: /in-store/key={storeKey}/shipping-methods/matching-cart
    method: HEAD
- name: get_matching_shipping_methods_for_order_edit
  endpoint:
    path: /shipping-methods/matching-orderedit
    method: HEAD
- name: query_shipping_methods
  endpoint:
    path: /shipping-methods
    method: GET
- name: check_if_shipping_method_exists_by_id
  endpoint:
    path: /shipping-methods/{id}
    method: HEAD
- name: check_if_shipping_method_exists_by_key
  endpoint:
    path: /shipping-methods/key={key}
    method: HEAD
- name: check_if_shipping_method_exists_by_query_predicate
  endpoint:
    path: /shipping-methods
    method: HEAD
- name: QuoteRequests
  endpoint:
    path: /quote-requests
    method: GET
    data_selector: results
    params:
      limit: 20
      offset: 0
      withTotal: true
- name: QuoteRequestsInStore
  endpoint:
    path: /in-store/key={storeKey}/quote-requests
    method: GET
    data_selector: results
    params:
      limit: 20
      offset: 0
      withTotal: true
- name: CheckQuoteRequestByID
  endpoint:
    path: /quote-requests/{id}
    method: HEAD
- name: CheckQuoteRequestByKey
  endpoint:
    path: /quote-requests/key={key}
    method: HEAD
- name: CheckQuoteRequestByQueryPredicate
  endpoint:
    path: /quote-requests
    method: HEAD
    params:
      where: ''
- name: CheckQuoteRequestInStoreByID
  endpoint:
    path: /in-store/key={storeKey}/quote-requests/{id}
    method: HEAD
- name: CheckQuoteRequestInStoreByKey
  endpoint:
    path: /in-store/key={storeKey}/quote-requests/key={key}
    method: HEAD
- name: CheckQuoteRequestInStoreByQueryPredicate
  endpoint:
    path: /in-store/key={storeKey}/quote-requests
    method: HEAD
    params:
      where: ''
- name: CreateQuoteRequest
  endpoint:
    path: /quote-requests
    method: POST
- name: shipping_methods_matching_cart
  endpoint:
    path: /shipping-methods/matching-cart
    method: HEAD
    data_selector: ''
    params:
      cartId: ''
- name: shipping_methods_matching_location
  endpoint:
    path: /shipping-methods/matching-location
    method: HEAD
    data_selector: ''
    params:
      country: ''
      state: ''
- name: shipping_methods_matching_cart_location
  endpoint:
    path: /shipping-methods/matching-cart-location
    method: HEAD
    data_selector: ''
    params:
      country: ''
      cartId: ''
- name: shipping_methods_matching_cart_in_store
  endpoint:
    path: /in-store/key={storeKey}/shipping-methods/matching-cart
    method: HEAD
    data_selector: ''
    params:
      cartId: ''
- name: shipping_methods_matching_orderedit
  endpoint:
    path: /shipping-methods/matching-orderedit
    method: HEAD
    data_selector: ''
    params:
      orderEditId: ''
      country: ''
      state: ''
- name: create_shipping_method
  endpoint:
    path: /shipping-methods
    method: POST
    data_selector: ''
    params:
      expand: ''
- name: update_shipping_method
  endpoint:
    path: /shipping-methods/{id}
    method: POST
    data_selector: ''
    params:
      expand: ''
- name: staged_quote
  endpoint:
    path: /staged-quotes/{id}
    method: GET
    data_selector: StagedQuote
- name: staged_quote_by_key
  endpoint:
    path: /staged-quotes/key={key}
    method: GET
    data_selector: StagedQuote
- name: zone
  endpoint:
    path: /zones/{id}
    method: GET
    data_selector: Zone
- name: zone_by_key
  endpoint:
    path: /zones/key={key}
    method: GET
    data_selector: Zone
- name: zones
  endpoint:
    path: /zones
    method: GET
    data_selector: results
    params:
      limit: 20
      offset: 0
- name: staged_quote
  endpoint:
    path: /staged-quotes
    method: GET
    data_selector: results
- name: staged_quote_by_id
  endpoint:
    path: /staged-quotes/{id}
    method: HEAD
- name: staged_quote_by_key
  endpoint:
    path: /staged-quotes/key={key}
    method: HEAD
- name: staged_quote_in_store
  endpoint:
    path: /in-store/key={storeKey}/staged-quotes
    method: GET
    data_selector: results
- name: staged_quote_in_store_by_id
  endpoint:
    path: /in-store/key={storeKey}/staged-quotes/{id}
    method: HEAD
- name: staged_quote_in_store_by_key
  endpoint:
    path: /in-store/key={storeKey}/staged-quotes/key={key}
    method: HEAD
- name: QuoteRequest
  endpoint:
    path: /{projectKey}/quote-requests
    method: GET
    data_selector: results
- name: staged_quote
  endpoint:
    path: /staged-quotes
    method: POST
    data_selector: StagedQuote
    params: {}
- name: staged_quote_in_store
  endpoint:
    path: /in-store/key={storeKey}/staged-quotes
    method: POST
    data_selector: StagedQuote
    params: {}
- name: update_staged_quote_by_id
  endpoint:
    path: /staged-quotes/{id}
    method: POST
    data_selector: StagedQuote
    params: {}
- name: update_staged_quote_by_key
  endpoint:
    path: /staged-quotes/key={key}
    method: POST
    data_selector: StagedQuote
    params: {}
- name: update_staged_quote_in_store_by_id
  endpoint:
    path: /in-store/key={storeKey}/staged-quotes/{id}
    method: POST
    data_selector: StagedQuote
    params: {}
- name: update_staged_quote_in_store_by_key
  endpoint:
    path: /in-store/key={storeKey}/staged-quotes/key={key}
    method: POST
    data_selector: StagedQuote
    params: {}
- name: quote_request
  endpoint:
    path: /{projectKey}/quote-requests/{id}
    method: GET
- name: quote_request_by_key
  endpoint:
    path: /{projectKey}/quote-requests/key={key}
    method: GET
- name: quote_request_in_store
  endpoint:
    path: /{projectKey}/in-store/key={storeKey}/quote-requests/{id}
    method: GET
- name: quote_request_in_store_by_key
  endpoint:
    path: /{projectKey}/in-store/key={storeKey}/quote-requests/key={key}
    method: GET
- name: Delete StagedQuote by ID
  endpoint:
    path: /staged-quotes/{id}
    method: DELETE
- name: Delete StagedQuote by Key
  endpoint:
    path: /staged-quotes/key={key}
    method: DELETE
- name: Delete StagedQuote in Store by ID
  endpoint:
    path: /in-store/key={storeKey}/staged-quotes/{id}
    method: DELETE
- name: Delete StagedQuote in Store by Key
  endpoint:
    path: /in-store/key={storeKey}/staged-quotes/key={key}
    method: DELETE
- name: quote_requests
  endpoint:
    path: /quote-requests
    method: GET
    data_selector: results
    params:
      limit: 20
      offset: 0
      withTotal: true
- name: quote_requests_in_store
  endpoint:
    path: /in-store/key={storeKey}/quote-requests
    method: GET
    data_selector: results
    params:
      limit: 20
      offset: 0
      withTotal: true
- name: staged_quote
  endpoint:
    path: /staged-quotes/{id}
    method: GET
- name: staged_quote_by_key
  endpoint:
    path: /staged-quotes/key={key}
    method: GET
- name: quote_by_id
  endpoint:
    path: /quotes/{id}
    method: GET
- name: quote_by_key
  endpoint:
    path: /quotes/key={key}
    method: GET
- name: quote_in_store_by_id
  endpoint:
    path: /in-store/key={storeKey}/quotes/{id}
    method: GET
- name: quote_in_store_by_key
  endpoint:
    path: /in-store/key={storeKey}/quotes/key={key}
    method: GET
- name: staged_quote
  endpoint:
    path: /staged-quotes/{id}
    method: GET
    data_selector: StagedQuote
- name: staged_quote_by_key
  endpoint:
    path: /staged-quotes/key={key}
    method: GET
    data_selector: StagedQuote
- name: query_staged_quotes
  endpoint:
    path: /staged-quotes
    method: GET
    data_selector: StagedQuotePagedQueryResponse
- name: check_staged_quote_exists_by_id
  endpoint:
    path: /staged-quotes/{id}
    method: HEAD
- name: check_staged_quote_exists_by_key
  endpoint:
    path: /staged-quotes/key={key}
    method: HEAD
- name: check_staged_quote_exists_by_query
  endpoint:
    path: /staged-quotes
    method: HEAD
- name: check_staged_quote_exists_in_store_by_id
  endpoint:
    path: /in-store/key={storeKey}/staged-quotes/{id}
    method: HEAD
- name: check_staged_quote_exists_in_store_by_key
  endpoint:
    path: /in-store/key={storeKey}/staged-quotes/key={key}
    method: HEAD
- name: check_staged_quote_exists_in_store_by_query
  endpoint:
    path: /in-store/key={storeKey}/staged-quotes
    method: HEAD
- name: quotes
  endpoint:
    path: /quotes
    method: GET
    data_selector: results
    params:
      limit: '20'
      offset: '0'
      withTotal: 'true'
- name: quotes_in_store
  endpoint:
    path: /in-store/key={storeKey}/quotes
    method: GET
    data_selector: results
    params:
      limit: '20'
      offset: '0'
      withTotal: 'true'
- name: quotes_exist_by_id
  endpoint:
    path: /quotes/{id}
    method: HEAD
- name: quotes_exist_by_key
  endpoint:
    path: /quotes/key={key}
    method: HEAD
- name: quotes_exist_by_query_predicate
  endpoint:
    path: /quotes
    method: HEAD
    params: {}
- name: quotes_exist_in_store_by_id
  endpoint:
    path: /in-store/key={storeKey}/quotes/{id}
    method: HEAD
- name: quotes_exist_in_store_by_key
  endpoint:
    path: /in-store/key={storeKey}/quotes/key={key}
    method: HEAD
- name: quotes_exist_in_store_by_query_predicate
  endpoint:
    path: /in-store/key={storeKey}/quotes
    method: HEAD
    params: {}
- name: quote
  endpoint:
    path: /quotes
    method: POST
- name: quote_in_store
  endpoint:
    path: /in-store/key={storeKey}/quotes
    method: POST
- name: staged_quote
  endpoint:
    path: /staged-quotes
    method: POST
    data_selector: StagedQuote
    params: {}
- name: staged_quote_in_store
  endpoint:
    path: /in-store/key={storeKey}/staged-quotes
    method: POST
    data_selector: StagedQuote
    params: {}
- name: update_staged_quote_by_id
  endpoint:
    path: /staged-quotes/{id}
    method: POST
    data_selector: StagedQuote
    params: {}
- name: update_staged_quote_by_key
  endpoint:
    path: /staged-quotes/key={key}
    method: POST
    data_selector: StagedQuote
    params: {}
- name: update_staged_quote_in_store_by_id
  endpoint:
    path: /in-store/key={storeKey}/staged-quotes/{id}
    method: POST
    data_selector: StagedQuote
    params: {}
- name: update_staged_quote_in_store_by_key
  endpoint:
    path: /in-store/key={storeKey}/staged-quotes/key={key}
    method: POST
    data_selector: StagedQuote
    params: {}
- name: CustomFieldLocalizedEnumValue
  endpoint:
    path: /api/types/CustomFieldLocalizedEnumType
    method: GET
    data_selector: values
    params: {}
- name: CustomFieldReferenceValue
  endpoint:
    path: /api/types/CustomFieldReferenceType
    method: GET
    data_selector: resources
    params: {}
- name: Delete StagedQuote by ID
  endpoint:
    path: /staged-quotes/{id}
    method: DELETE
- name: Delete StagedQuote by Key
  endpoint:
    path: /staged-quotes/key={key}
    method: DELETE
- name: Delete StagedQuote in Store by ID
  endpoint:
    path: /in-store/key={storeKey}/staged-quotes/{id}
    method: DELETE
- name: Delete StagedQuote in Store by Key
  endpoint:
    path: /in-store/key={storeKey}/staged-quotes/key={key}
    method: DELETE
- name: quote
  endpoint:
    path: /quotes
    method: GET
    data_selector: results
- name: Get Type by ID
  endpoint:
    path: /types/{id}
    method: GET
    data_selector: Type
- name: Get Type by Key
  endpoint:
    path: /types/key={key}
    method: GET
    data_selector: Type
- name: Query Types
  endpoint:
    path: /types
    method: GET
    data_selector: TypePagedQueryResponse
- name: Check if Type exists by ID
  endpoint:
    path: /types/{id}
    method: HEAD
- name: Check if Type exists by Key
  endpoint:
    path: /types/key={key}
    method: HEAD
- name: Create Type
  endpoint:
    path: /types
    method: POST
- name: Update Type by ID
  endpoint:
    path: /types/{id}
    method: POST
- name: Update Type by Key
  endpoint:
    path: /types/key={key}
    method: POST
- name: quote_by_id
  endpoint:
    path: /quotes/{id}
    method: GET
- name: quote_by_key
  endpoint:
    path: /quotes/key={key}
    method: GET
- name: quote_in_store_by_id
  endpoint:
    path: /in-store/key={storeKey}/quotes/{id}
    method: GET
- name: quote_in_store_by_key
  endpoint:
    path: /in-store/key={storeKey}/quotes/key={key}
    method: GET
- name: delete_type_by_id
  endpoint:
    path: /{projectKey}/types/{id}
    method: DELETE
- name: delete_type_by_key
  endpoint:
    path: /{projectKey}/types/key={key}
    method: DELETE
- name: CustomObject
  endpoint:
    path: /custom-objects/{container}/{key}
    method: GET
    data_selector: CustomObject
- name: CreateOrUpdateCustomObject
  endpoint:
    path: /custom-objects
    method: POST
    data_selector: CustomObject
- name: quotes
  endpoint:
    path: /quotes
    method: GET
    data_selector: results
    params:
      limit: 20
      offset: 0
      withTotal: true
- name: quotes_in_store
  endpoint:
    path: /in-store/key={storeKey}/quotes
    method: GET
    data_selector: results
    params:
      limit: 20
      offset: 0
      withTotal: true
- name: check_quote_by_id
  endpoint:
    path: /quotes/{id}
    method: HEAD
    data_selector: null
    params: {}
- name: check_quote_by_key
  endpoint:
    path: /quotes/key={key}
    method: HEAD
    data_selector: null
    params: {}
- name: check_quote_by_query_predicate
  endpoint:
    path: /quotes
    method: HEAD
    data_selector: null
    params: {}
- name: check_quote_in_store_by_id
  endpoint:
    path: /in-store/key={storeKey}/quotes/{id}
    method: HEAD
    data_selector: null
    params: {}
- name: check_quote_in_store_by_key
  endpoint:
    path: /in-store/key={storeKey}/quotes/key={key}
    method: HEAD
    data_selector: null
    params: {}
- name: check_quote_in_store_by_query_predicate
  endpoint:
    path: /in-store/key={storeKey}/quotes
    method: HEAD
    data_selector: null
    params: {}
- name: custom_objects
  endpoint:
    path: /custom-objects/{container}
    method: GET
    data_selector: results
- name: check_custom_object_exists
  endpoint:
    path: /custom-objects
    method: HEAD
- name: delete_custom_object
  endpoint:
    path: /custom-objects/{container}/{key}
    method: DELETE
- name: quote
  endpoint:
    path: /quotes
    method: POST
- name: quote_in_store
  endpoint:
    path: /in-store/key={storeKey}/quotes
    method: POST
- name: carts
  endpoint:
    path: /api/projects/carts
    method: GET
- name: orders
  endpoint:
    path: /api/projects/orders
    method: GET
- name: payment methods
  endpoint:
    path: /api/projects/payment-methods
    method: GET
- name: payments
  endpoint:
    path: /api/projects/payments
    method: GET
- name: customers
  endpoint:
    path: /api/projects/customers
    method: GET
- name: customer groups
  endpoint:
    path: /api/projects/customerGroups
    method: GET
- name: quote requests
  endpoint:
    path: /api/projects/quote-requests
    method: GET
- name: staged quotes
  endpoint:
    path: /api/projects/staged-quotes
    method: GET
- name: quotes
  endpoint:
    path: /api/projects/quotes
    method: GET
- name: business units
  endpoint:
    path: /api/projects/business-units
    method: GET
- name: shopping lists
  endpoint:
    path: /api/projects/shoppingLists
    method: GET
- name: Type
  endpoint:
    path: /api/types
    method: GET
    data_selector: results
    params: {}
- name: TypeDraft
  endpoint:
    path: /api/types/draft
    method: POST
    data_selector: results
    params: {}
- name: TypePagedQueryResponse
  endpoint:
    path: /api/types/pagedQuery
    method: GET
    data_selector: results
    params: {}
- name: TypeReference
  endpoint:
    path: /api/types/reference
    method: GET
    data_selector: results
    params: {}
- name: TypeKeyReference
  endpoint:
    path: /api/types/keyReference
    method: GET
    data_selector: results
    params: {}
- name: TypeResourceIdentifier
  endpoint:
    path: /api/types/resourceIdentifier
    method: GET
    data_selector: results
    params: {}
- name: extensions
  endpoint:
    path: /extensions
    method: GET
    data_selector: results
    params:
      limit: 20
      offset: 0
      withTotal: true
- name: extension_by_id
  endpoint:
    path: /extensions/{id}
    method: GET
    data_selector: extension
- name: extension_by_key
  endpoint:
    path: /extensions/key={key}
    method: GET
    data_selector: extension
- name: CustomFieldLocalizedEnumValue
  endpoint:
    path: /api/types/CustomFieldLocalizedEnumValue
    method: GET
    data_selector: key
    params: {}
- name: CustomFieldReferenceValue
  endpoint:
    path: /api/types/CustomFieldReferenceValue
    method: GET
    data_selector: key
    params: {}
- name: extensions
  endpoint:
    path: /extensions/key={key}
    method: DELETE
    data_selector: Extension
    params:
      version: Int
- name: Get Type by ID
  endpoint:
    path: /types/{id}
    method: GET
    data_selector: results
- name: Get Type by Key
  endpoint:
    path: /types/key={key}
    method: GET
    data_selector: results
- name: Query Types
  endpoint:
    path: /types
    method: GET
    data_selector: results
- name: Check if Type exists by ID
  endpoint:
    path: /types/{id}
    method: HEAD
- name: Check if Type exists by Key
  endpoint:
    path: /types/key={key}
    method: HEAD
- name: Create Type
  endpoint:
    path: /types
    method: POST
- name: Update Type by ID
  endpoint:
    path: /types/{id}
    method: POST
- name: Update Type by Key
  endpoint:
    path: /types/key={key}
    method: POST
- name: Subscription
  endpoint:
    path: /subscriptions
    method: GET
    data_selector: results
- name: SubscriptionDraft
  endpoint:
    path: /subscriptions/draft
    method: POST
    data_selector: results
- name: SubscriptionPagedQueryResponse
  endpoint:
    path: /subscriptions/paged
    method: GET
    data_selector: results
- name: CustomObject
  endpoint:
    path: /custom-objects/{container}/{key}
    method: GET
    data_selector: CustomObject
- name: CreateOrUpdateCustomObject
  endpoint:
    path: /custom-objects
    method: POST
    data_selector: CustomObject
- name: customer-group
  endpoint:
    path: /api/projects/customerGroups
    method: GET
- name: customer-password-token
  endpoint:
    path: /api/projects/customers
    method: GET
- name: inventory-entry
  endpoint:
    path: /api/projects/inventory
    method: GET
- name: order
  endpoint:
    path: /api/projects/orders
    method: GET
- name: payment
  endpoint:
    path: /api/projects/payments
    method: GET
- name: product
  endpoint:
    path: /api/projects/products
    method: GET
- name: product-selection
  endpoint:
    path: /api/projects/product-selections
    method: GET
- name: product-tailoring
  endpoint:
    path: /api/projects/product-tailoring
    method: GET
- name: quote
  endpoint:
    path: /api/projects/quotes
    method: GET
- name: quote-request
  endpoint:
    path: /api/projects/quote-requests
    method: GET
- name: review
  endpoint:
    path: /api/projects/reviews
    method: GET
- name: shopping-list
  endpoint:
    path: /api/projects/shoppingLists
    method: GET
- name: staged-quote
  endpoint:
    path: /api/projects/staged-quotes
    method: GET
- name: standalone-price
  endpoint:
    path: /api/projects/standalone-prices
    method: GET
- name: store
  endpoint:
    path: /api/projects/stores
    method: GET
- name: custom_objects
  endpoint:
    path: /custom-objects/{container}
    method: GET
- name: check_custom_object_exists
  endpoint:
    path: /custom-objects
    method: HEAD
- name: delete_custom_object
  endpoint:
    path: /custom-objects/{container}/{key}
    method: DELETE
- name: subscription
  endpoint:
    path: /subscriptions/{id}
    method: GET
    data_selector: Subscription
- name: subscription_by_key
  endpoint:
    path: /subscriptions/key={key}
    method: GET
    data_selector: Subscription
- name: subscription_health
  endpoint:
    path: /subscriptions/{id}/health
    method: GET
    data_selector: HealthStatus
- name: query_subscriptions
  endpoint:
    path: /subscriptions
    method: GET
    data_selector: SubscriptionPagedQueryResponse
- name: create_subscription
  endpoint:
    path: /subscriptions
    method: POST
    data_selector: Subscription
- name: update_subscription
  endpoint:
    path: /subscriptions/{id}
    method: POST
    data_selector: Subscription
- name: update_subscription_by_key
  endpoint:
    path: /subscriptions/key={key}
    method: POST
    data_selector: Subscription
- name: carts
  endpoint:
    path: /api/projects/carts
    method: GET
- name: orders
  endpoint:
    path: /api/projects/orders
    method: GET
- name: payment_methods
  endpoint:
    path: /api/projects/payment-methods
    method: GET
- name: payments
  endpoint:
    path: /api/projects/payments
    method: GET
- name: customers
  endpoint:
    path: /api/projects/customers
    method: GET
- name: customer_groups
  endpoint:
    path: /api/projects/customerGroups
    method: GET
- name: quote_requests
  endpoint:
    path: /api/projects/quote-requests
    method: GET
- name: staged_quotes
  endpoint:
    path: /api/projects/staged-quotes
    method: GET
- name: quotes
  endpoint:
    path: /api/projects/quotes
    method: GET
- name: business_units
  endpoint:
    path: /api/projects/business-units
    method: GET
- name: shopping_lists
  endpoint:
    path: /api/projects/shoppingLists
    method: GET
- name: delete_subscription_by_id
  endpoint:
    path: /{projectKey}/subscriptions/{id}
    method: DELETE
    params:
      version: version
- name: delete_subscription_by_key
  endpoint:
    path: /{projectKey}/subscriptions/key={key}
    method: DELETE
    params:
      version: version
- name: messages
  endpoint:
    path: /messages
    method: GET
    data_selector: results
- name: message_by_id
  endpoint:
    path: /messages/{id}
    method: GET
    data_selector: Message
- name: extension_by_id
  endpoint:
    path: /extensions/{id}
    method: GET
    data_selector: Extension
- name: extension_by_key
  endpoint:
    path: /extensions/key={key}
    method: GET
    data_selector: Extension
- name: query_extensions
  endpoint:
    path: /extensions
    method: GET
    data_selector: results
    params:
      limit: 20
      offset: 0
      withTotal: true
- name: check_extension_exists_by_id
  endpoint:
    path: /extensions/{id}
    method: HEAD
- name: check_extension_exists_by_key
  endpoint:
    path: /extensions/key={key}
    method: HEAD
- name: create_extension
  endpoint:
    path: /extensions
    method: POST
    data_selector: Extension
- name: update_extension_by_id
  endpoint:
    path: /extensions/{id}
    method: POST
    data_selector: Extension
- name: update_extension_by_key
  endpoint:
    path: /extensions/key={key}
    method: POST
    data_selector: Extension
- name: delete_extension_by_id
  endpoint:
    path: /extensions/{id}
    method: DELETE
- name: check_if_message_exists
  endpoint:
    path: /messages
    method: HEAD
- name: Event
  endpoint:
    path: /api/projects/events
    method: GET
    data_selector: data
    params: {}
- name: delete_extension
  endpoint:
    path: /{projectKey}/extensions/key={key}
    method: DELETE
    data_selector: ''
    params:
      version: ''
- name: Subscription
  endpoint:
    path: /subscriptions
    method: GET
    data_selector: results
- name: SubscriptionDraft
  endpoint:
    path: /subscriptions/draft
    method: POST
    data_selector: ''
- name: SubscriptionPagedQueryResponse
  endpoint:
    path: /subscriptions/paged
    method: GET
    data_selector: results
- name: CheckoutOrderCreationFailedEvent
  endpoint:
    path: /checkout/order-creation-failed
    method: POST
    data_selector: data
- name: CheckoutPaymentAuthorizedEvent
  endpoint:
    path: /checkout/payment-authorized
    method: POST
    data_selector: data
- name: CheckoutPaymentAuthorizationFailedEvent
  endpoint:
    path: /checkout/payment-authorization-failed
    method: POST
    data_selector: data
- name: CheckoutPaymentChargedEvent
  endpoint:
    path: /checkout/payment-charged
    method: POST
    data_selector: data
- name: CheckoutPaymentChargeFailedEvent
  endpoint:
    path: /checkout/payment-charge-failed
    method: POST
    data_selector: data
- name: CheckoutPaymentAuthorizationCancelledEvent
  endpoint:
    path: /checkout/payment-authorization-cancelled
    method: POST
    data_selector: data
- name: CheckoutPaymentCancelAuthorizationFailedEvent
  endpoint:
    path: /checkout/payment-cancel-authorization-failed
    method: POST
    data_selector: data
- name: CheckoutPaymentRefundedEvent
  endpoint:
    path: /checkout/payment-refunded
    method: POST
    data_selector: data
- name: CheckoutPaymentRefundFailedEvent
  endpoint:
    path: /checkout/payment-refund-failed
    method: POST
    data_selector: data
- name: customer-group
  endpoint:
    path: /api/projects/customerGroups
    method: GET
    data_selector: messages
- name: customer-password-token
  endpoint:
    path: /api/projects/customers
    method: GET
    data_selector: messages
- name: inventory-entry
  endpoint:
    path: /api/projects/inventory
    method: GET
    data_selector: messages
- name: order
  endpoint:
    path: /api/projects/orders
    method: GET
    data_selector: messages
- name: payment
  endpoint:
    path: /api/projects/payments
    method: GET
    data_selector: messages
- name: product
  endpoint:
    path: /api/projects/products
    method: GET
    data_selector: messages
- name: product-selection
  endpoint:
    path: /api/projects/product-selections
    method: GET
    data_selector: messages
- name: product-tailoring
  endpoint:
    path: /api/projects/product-tailoring
    method: GET
    data_selector: messages
- name: quote
  endpoint:
    path: /api/projects/quotes
    method: GET
    data_selector: messages
- name: quote-request
  endpoint:
    path: /api/projects/quote-requests
    method: GET
    data_selector: messages
- name: review
  endpoint:
    path: /api/projects/reviews
    method: GET
    data_selector: messages
- name: shopping-list
  endpoint:
    path: /api/projects/shoppingLists
    method: GET
    data_selector: messages
- name: staged-quote
  endpoint:
    path: /api/projects/staged-quotes
    method: GET
    data_selector: messages
- name: standalone-price
  endpoint:
    path: /api/projects/standalone-prices
    method: GET
    data_selector: messages
- name: store
  endpoint:
    path: /api/projects/stores
    method: GET
    data_selector: messages
- name: ImportContainerCreated
  endpoint:
    path: /api/import/export/events/created
    method: GET
    data_selector: data
    params: {}
- name: ImportContainerDeleted
  endpoint:
    path: /api/import/export/events/deleted
    method: GET
    data_selector: data
    params: {}
- name: ImportOperationRejected
  endpoint:
    path: /api/import/export/events/rejected
    method: GET
    data_selector: data
    params: {}
- name: ImportUnresolved
  endpoint:
    path: /api/import/export/events/unresolved
    method: GET
    data_selector: data
    params: {}
- name: ImportValidationFailed
  endpoint:
    path: /api/import/export/events/validation-failed
    method: GET
    data_selector: data
    params: {}
- name: ImportWaitForMasterVariant
  endpoint:
    path: /api/import/export/events/wait-for-master-variant
    method: GET
    data_selector: data
    params: {}
- name: states
  endpoint:
    path: /{projectKey}/states/{id}
    method: GET
- name: subscription
  endpoint:
    path: /subscriptions/{id}
    method: GET
    data_selector: Subscription
- name: subscription_by_key
  endpoint:
    path: /subscriptions/key={key}
    method: GET
    data_selector: Subscription
- name: subscription_health
  endpoint:
    path: /subscriptions/{id}/health
    method: GET
    data_selector: ''
- name: subscriptions
  endpoint:
    path: /subscriptions
    method: GET
    data_selector: SubscriptionPagedQueryResponse
- name: subscription_exists_by_id
  endpoint:
    path: /subscriptions/{id}
    method: HEAD
    data_selector: ''
- name: subscription_exists_by_key
  endpoint:
    path: /subscriptions/key={key}
    method: HEAD
    data_selector: ''
- name: subscription_exists_by_query
  endpoint:
    path: /subscriptions
    method: HEAD
    data_selector: ''
- name: create_subscription
  endpoint:
    path: /subscriptions
    method: POST
    data_selector: Subscription
- name: update_subscription_by_id
  endpoint:
    path: /subscriptions/{id}
    method: POST
    data_selector: Subscription
- name: update_subscription_by_key
  endpoint:
    path: /subscriptions/key={key}
    method: POST
    data_selector: Subscription
- name: get_state_by_key
  endpoint:
    path: /states/key={key}
    method: GET
    data_selector: State
- name: query_states
  endpoint:
    path: /states
    method: GET
    data_selector: results
- name: check_if_state_exists_by_id
  endpoint:
    path: /states/{id}
    method: HEAD
- name: check_if_state_exists_by_key
  endpoint:
    path: /states/key={key}
    method: HEAD
- name: create_state
  endpoint:
    path: /states
    method: POST
- name: update_state_by_id
  endpoint:
    path: /states/{id}
    method: POST
- name: update_state_by_key
  endpoint:
    path: /states/key={key}
    method: POST
- name: delete_state_by_id
  endpoint:
    path: /states/{id}
    method: DELETE
    params:
      version: version
- name: delete_state_by_key
  endpoint:
    path: /states/key={key}
    method: DELETE
    params:
      version: version
- name: delete_subscription_by_id
  endpoint:
    path: /{id}
    method: DELETE
    params:
      version: last seen version of the resource
- name: delete_subscription_by_key
  endpoint:
    path: /key={key}
    method: DELETE
    params:
      version: last seen version of the resource
- name: Change History
  endpoint:
    path: /api/history/change-history
    method: GET
- name: Change History
  endpoint:
    path: /
    method: GET
    data_selector: changes
    params: {}
- name: messages
  endpoint:
    path: /messages
    method: GET
    data_selector: results
- name: get_message
  endpoint:
    path: /messages/{id}
    method: GET
    data_selector: Message
- name: check_message_exists
  endpoint:
    path: /messages/{id}
    method: HEAD
    data_selector: null
- name: Record
  endpoint:
    path: /record
    method: GET
    data_selector: results
- name: RecordPagedQueryResponse
  endpoint:
    path: /recordPagedQueryResponse
    method: GET
    data_selector: results
- name: check_message_exists
  endpoint:
    path: /messages
    method: HEAD
- name: events
  endpoint:
    path: /api/projects/events
    method: GET
    data_selector: data
- name: change_history
  endpoint:
    path: /{resourceType}
    method: GET
- name: query_records_by_resource_id
  endpoint:
    path: /{projectKey}/{resourceType}/{id}
    method: GET
- name: query_records_with_graphql
  endpoint:
    path: /{projectKey}/graphql
    method: POST
- name: checkout_order_creation_failed
  endpoint:
    path: /events/checkout/order-creation-failed
    method: GET
    data_selector: records
- name: checkout_payment_authorized
  endpoint:
    path: /events/checkout/payment-authorized
    method: GET
    data_selector: records
- name: checkout_payment_authorization_failed
  endpoint:
    path: /events/checkout/payment-authorization-failed
    method: GET
    data_selector: records
- name: checkout_payment_charged
  endpoint:
    path: /events/checkout/payment-charged
    method: GET
    data_selector: records
- name: checkout_payment_charge_failed
  endpoint:
    path: /events/checkout/payment-charge-failed
    method: GET
    data_selector: records
- name: checkout_payment_authorization_cancelled
  endpoint:
    path: /events/checkout/payment-authorization-cancelled
    method: GET
    data_selector: records
- name: checkout_payment_cancel_authorization_failed
  endpoint:
    path: /events/checkout/payment-cancel-authorization-failed
    method: GET
    data_selector: records
- name: checkout_payment_refunded
  endpoint:
    path: /events/checkout/payment-refunded
    method: GET
    data_selector: records
- name: checkout_payment_refund_failed
  endpoint:
    path: /events/checkout/payment-refund-failed
    method: GET
    data_selector: records
- name: project
  endpoint:
    path: /api/projects/project
    method: GET
    data_selector: projectKey
- name: payment
  endpoint:
    path: /api/projects/payments
    method: GET
    data_selector: payment
- name: transaction
  endpoint:
    path: /api/projects/payments/transaction
    method: GET
    data_selector: transactionId
- name: cart
  endpoint:
    path: /api/projects/carts
    method: GET
    data_selector: cart
- name: order
  endpoint:
    path: /api/projects/orders
    method: GET
    data_selector: order
- name: ImportContainerCreated
  endpoint:
    path: /api/import-export/import-container/created
    method: POST
    data_selector: data
    params: {}
- name: ImportContainerDeleted
  endpoint:
    path: /api/import-export/import-container/deleted
    method: POST
    data_selector: data
    params: {}
- name: ImportOperationRejected
  endpoint:
    path: /api/import-export/import-operation/rejected
    method: POST
    data_selector: data
    params: {}
- name: ImportUnresolved
  endpoint:
    path: /api/import-export/import-operation/unresolved
    method: POST
    data_selector: data
    params: {}
- name: ImportValidationFailed
  endpoint:
    path: /api/import-export/import-operation/validation-failed
    method: POST
    data_selector: data
    params: {}
- name: ImportWaitForMasterVariant
  endpoint:
    path: /api/import-export/import-operation/wait-for-master-variant
    method: POST
    data_selector: data
    params: {}
- name: state
  endpoint:
    path: /states/{id}
    method: GET
    data_selector: State
- name: ImportContainer
  endpoint:
    path: /import-containers/{importContainerKey}
    method: GET
    data_selector: ImportContainer
- name: ImportSummary
  endpoint:
    path: /import-containers/{importContainerKey}/import-summaries
    method: GET
    data_selector: ImportSummary
- name: state_by_key
  endpoint:
    path: /states/key={key}
    method: GET
- name: query_states
  endpoint:
    path: /states
    method: GET
    params:
      limit: 20
      offset: 0
- name: check_state_exists_by_id
  endpoint:
    path: /states/{id}
    method: HEAD
- name: check_state_exists_by_key
  endpoint:
    path: /states/key={key}
    method: HEAD
- name: create_state
  endpoint:
    path: /states
    method: POST
- name: update_state_by_id
  endpoint:
    path: /states/{id}
    method: POST
- name: update_state_by_key
  endpoint:
    path: /states/key={key}
    method: POST
- name: import_containers
  endpoint:
    path: /import-containers
    method: GET
    data_selector: results
- name: create_import_container
  endpoint:
    path: /import-containers
    method: POST
    data_selector: ''
- name: update_import_container
  endpoint:
    path: /import-containers/{importContainerKey}
    method: PUT
    data_selector: ''
- name: delete_import_container
  endpoint:
    path: /import-containers/{importContainerKey}
    method: DELETE
    data_selector: ''
- name: delete_state_by_id
  endpoint:
    path: /states/{id}
    method: DELETE
    params:
      version: Int
- name: delete_state_by_key
  endpoint:
    path: /states/key={key}
    method: DELETE
    params:
      version: Int
- name: Record
  endpoint:
    path: /api/record
    method: GET
    data_selector: records
- name: RecordPagedQueryResponse
  endpoint:
    path: /api/recordPagedQueryResponse
    method: GET
    data_selector: results
- name: business-unit
  endpoint:
    path: /api/import-export/import-resources/business-units
    method: POST
    data_selector: resources
- name: category
  endpoint:
    path: /api/import-export/import-resources/categories
    method: POST
    data_selector: resources
- name: customer
  endpoint:
    path: /api/import-export/import-resources/customers
    method: POST
    data_selector: resources
- name: discount-code
  endpoint:
    path: /api/import-export/import-resources/discount-codes
    method: POST
    data_selector: resources
- name: price
  endpoint:
    path: /api/import-export/import-resources/embedded-prices
    method: POST
    data_selector: resources
- name: inventory
  endpoint:
    path: /api/import-export/import-resources/inventories
    method: POST
    data_selector: resources
- name: standalone-price
  endpoint:
    path: /api/import-export/import-resources/standalone-prices
    method: POST
    data_selector: resources
- name: order
  endpoint:
    path: /api/import-export/import-resources/orders
    method: POST
    data_selector: resources
- name: order-patch
  endpoint:
    path: /api/import-export/import-resources/order-patches
    method: POST
    data_selector: patches
- name: product-type
  endpoint:
    path: /api/import-export/import-resources/product-types
    method: POST
    data_selector: resources
- name: product
  endpoint:
    path: /api/import-export/import-resources/products
    method: POST
    data_selector: resources
- name: product-draft
  endpoint:
    path: /api/import-export/import-resources/product-drafts
    method: POST
    data_selector: resources
- name: product-variant
  endpoint:
    path: /api/import-export/import-resources/product-variants
    method: POST
    data_selector: resources
- name: product-variant-patch
  endpoint:
    path: /api/import-export/import-resources/product-variant-patches
    method: POST
    data_selector: patches
- name: change_history
  endpoint:
    path: /{resourceType}
    method: GET
    data_selector: results
    params:
      limit: 20
      offset: 0
- name: product-selection
  endpoint:
    path: /api/import-export/import-resources
    method: POST
    data_selector: resources
    params:
      maxItems: 20
- name: type
  endpoint:
    path: /api/import-export/import-resources
    method: POST
    data_selector: resources
    params:
      maxItems: 20
- name: query_records_by_resource_id
  endpoint:
    path: /{projectKey}/{resourceType}/{id}
    method: GET
- name: query_records_with_graphql
  endpoint:
    path: /{projectKey}/graphql
    method: POST
- name: Import Containers
  endpoint:
    path: /api/import-export/import-container
    method: GET
- name: Import Requests
  endpoint:
    path: /api/import-export/import-requests
    method: GET
- name: Import Operations
  endpoint:
    path: /api/import-export/import-operation
    method: GET
- name: business_units
  endpoint:
    path: /business-units/import-containers/{importContainerKey}
    method: POST
- name: categories
  endpoint:
    path: /categories/import-containers/{importContainerKey}
    method: POST
- name: customers
  endpoint:
    path: /customers/import-containers/{importContainerKey}
    method: POST
- name: discount_codes
  endpoint:
    path: /discount-codes/import-containers/{importContainerKey}
    method: POST
- name: prices
  endpoint:
    path: /prices/import-containers/{importContainerKey}
    method: POST
- name: inventories
  endpoint:
    path: /inventories/import-containers/{importContainerKey}
    method: POST
- name: products
  endpoint:
    path: /products/import-containers/{importContainerKey}
    method: POST
- name: product_drafts
  endpoint:
    path: /product-drafts/import-containers/{importContainerKey}
    method: POST
- name: product-types
  endpoint:
    path: /product-types/import-containers/{importContainerKey}
    method: POST
- name: product-variants
  endpoint:
    path: /product-variants/import-containers/{importContainerKey}
    method: POST
- name: product-variant-patches
  endpoint:
    path: /product-variant-patches/import-containers/{importContainerKey}
    method: POST
- name: product-selections
  endpoint:
    path: /product-selections/import-containers/{importContainerKey}
    method: POST
- name: orders
  endpoint:
    path: /orders/import-containers/{importContainerKey}
    method: POST
- name: order-patches
  endpoint:
    path: /order-patches/import-containers/{importContainerKey}
    method: POST
- name: standalone-prices
  endpoint:
    path: /standalone-prices/import-containers/{importContainerKey}
    method: POST
- name: ImportContainer
  endpoint:
    path: /import-containers/{importContainerKey}
    method: GET
    data_selector: ImportContainer
- name: ImportSummary
  endpoint:
    path: /import-containers/{importContainerKey}/import-summaries
    method: GET
    data_selector: ImportSummary
- name: import_request
  endpoint:
    path: /types/import-containers/{importContainerKey}
    method: POST
    data_selector: operationStatus
- name: import_container
  endpoint:
    path: /import-containers
    method: GET
    data_selector: results
    params:
      limit: 20
      offset: 0
- name: create_import_container
  endpoint:
    path: /import-containers
    method: POST
    data_selector: results
- name: update_import_container
  endpoint:
    path: /import-containers/{importContainerKey}
    method: PUT
    data_selector: results
- name: delete_import_container
  endpoint:
    path: /import-containers/{importContainerKey}
    method: DELETE
    data_selector: results
- name: customer
  endpoint:
    path: /api/projects/customers
    method: POST
    data_selector: records
- name: discount_code
  endpoint:
    path: /api/projects/discountCodes
    method: POST
    data_selector: records
- name: inventory
  endpoint:
    path: /api/projects/inventory
    method: POST
    data_selector: records
- name: product_type
  endpoint:
    path: /api/projects/productTypes
    method: POST
    data_selector: records
- name: product
  endpoint:
    path: /api/projects/products
    method: POST
    data_selector: records
- name: ProductDraft
  endpoint:
    path: /products/draft
    method: POST
    data_selector: ProductDrafts
    params: {}
- name: ProductVariantDraft
  endpoint:
    path: /products/variant/draft
    method: POST
    data_selector: ProductVariantDrafts
    params: {}
- name: EmbeddedPriceDraft
  endpoint:
    path: /prices/draft
    method: POST
    data_selector: EmbeddedPriceDrafts
    params: {}
- name: ProductVariant
  endpoint:
    path: /api/projects/products/variants
    method: POST
    data_selector: ProductVariantImport
- name: business-unit
  endpoint:
    path: /api/import-export/import-resources/business-unit
    method: POST
- name: category
  endpoint:
    path: /api/import-export/import-resources/category
    method: POST
- name: customer
  endpoint:
    path: /api/import-export/import-resources/customer
    method: POST
- name: discount-code
  endpoint:
    path: /api/import-export/import-resources/discount-code
    method: POST
- name: price
  endpoint:
    path: /api/import-export/import-resources/price
    method: POST
- name: inventory
  endpoint:
    path: /api/import-export/import-resources/inventory
    method: POST
- name: standalone-price
  endpoint:
    path: /api/import-export/import-resources/standalone-price
    method: POST
- name: order
  endpoint:
    path: /api/import-export/import-resources/order
    method: POST
- name: order-patch
  endpoint:
    path: /api/import-export/import-resources/order-patch
    method: POST
- name: product-type
  endpoint:
    path: /api/import-export/import-resources/product-type
    method: POST
- name: product
  endpoint:
    path: /api/import-export/import-resources/product
    method: POST
- name: product-draft
  endpoint:
    path: /api/import-export/import-resources/product-draft
    method: POST
- name: product-variant
  endpoint:
    path: /api/import-export/import-resources/product-variant
    method: POST
- name: product-variant-patch
  endpoint:
    path: /api/import-export/import-resources/product-variant-patch
    method: POST
- name: TextAttribute
  endpoint:
    path: /api/projects/productTypes#ctp:api:type:AttributeDefinition
    method: GET
    data_selector: records
- name: TextSetAttribute
  endpoint:
    path: /api/projects/productTypes#ctp:api:type:AttributeDefinition
    method: GET
    data_selector: records
- name: TimeAttribute
  endpoint:
    path: /api/projects/productTypes#ctp:api:type:AttributeDefinition
    method: GET
    data_selector: records
- name: TimeSetAttribute
  endpoint:
    path: /api/projects/productTypes#ctp:api:type:AttributeDefinition
    method: GET
    data_selector: records
- name: product-selection
  endpoint:
    path: /api/projects/product-selections
    method: POST
    data_selector: resources
    params:
      maxItems: 20
- name: type
  endpoint:
    path: /api/projects/types
    method: POST
    data_selector: resources
    params:
      maxItems: 20
- name: ProductVariant
  endpoint:
    path: /api/projects/products/variants
    method: PATCH
    data_selector: productVariant
    params: {}
- name: ProductSelection
  endpoint:
    path: /api/projects/product-selections
    method: POST
    data_selector: productSelection
    params: {}
- name: EmbeddedPrice
  endpoint:
    path: /api/projects/prices/embedded
    method: POST
    data_selector: embeddedPrice
    params: {}
- name: StandalonePrice
  endpoint:
    path: /api/projects/prices/standalone
    method: POST
    data_selector: standalonePrice
    params: {}
- name: Order
  endpoint:
    path: /api/projects/orders
    method: POST
    data_selector: order
    params: {}
- name: Order
  endpoint:
    path: /api/projects/orders
    method: PATCH
    data_selector: fields
- name: business_units
  endpoint:
    path: /{projectKey}/business-units/import-containers/{importContainerKey}
    method: POST
- name: categories
  endpoint:
    path: /{projectKey}/categories/import-containers/{importContainerKey}
    method: POST
- name: customers
  endpoint:
    path: /{projectKey}/customers/import-containers/{importContainerKey}
    method: POST
- name: discount_codes
  endpoint:
    path: /{projectKey}/discount-codes/import-containers/{importContainerKey}
    method: POST
- name: prices
  endpoint:
    path: /{projectKey}/prices/import-containers/{importContainerKey}
    method: POST
- name: inventories
  endpoint:
    path: /{projectKey}/inventories/import-containers/{importContainerKey}
    method: POST
- name: products
  endpoint:
    path: /{projectKey}/products/import-containers/{importContainerKey}
    method: POST
- name: product_drafts
  endpoint:
    path: /{projectKey}/product-drafts/import-containers/{importContainerKey}
    method: POST
- name: import_operations
  endpoint:
    path: /{projectKey}/import-containers/{importContainerKey}/import-operations
    method: GET
- name: product-types
  endpoint:
    path: /product-types/import-containers/{importContainerKey}
    method: POST
- name: product-variants
  endpoint:
    path: /product-variants/import-containers/{importContainerKey}
    method: POST
- name: product-variant-patches
  endpoint:
    path: /product-variant-patches/import-containers/{importContainerKey}
    method: POST
- name: product-selections
  endpoint:
    path: /product-selections/import-containers/{importContainerKey}
    method: POST
- name: orders
  endpoint:
    path: /orders/import-containers/{importContainerKey}
    method: POST
- name: order-patches
  endpoint:
    path: /order-patches/import-containers/{importContainerKey}
    method: POST
- name: standalone-prices
  endpoint:
    path: /standalone-prices/import-containers/{importContainerKey}
    method: POST
- name: import_request
  endpoint:
    path: /types/import-containers/{importContainerKey}
    method: POST
    data_selector: operationStatus
- name: CompanyBusinessUnitImport
  endpoint:
    path: /api/import-export/import-resources
    method: POST
    data_selector: resources
    params: {}
- name: DivisionBusinessUnitImport
  endpoint:
    path: /api/import-export/import-resources
    method: POST
    data_selector: resources
    params: {}
- name: CategoryImport
  endpoint:
    path: /api/import-export/import-resources
    method: POST
    data_selector: resources
    params: {}
- name: customer_import
  endpoint:
    path: /api/import/customers
    method: POST
    data_selector: records
- name: discount_code_import
  endpoint:
    path: /api/import/discountCodes
    method: POST
    data_selector: records
- name: inventory_import
  endpoint:
    path: /api/import/inventory
    method: POST
    data_selector: records
- name: product_type_import
  endpoint:
    path: /api/import/productTypes
    method: POST
    data_selector: records
- name: product_import
  endpoint:
    path: /api/import/products
    method: POST
    data_selector: records
- name: accounts
  endpoint:
    path: /merchant-center/accounts
    method: GET
- name: administrators_team
  endpoint:
    path: /merchant-center/administrators-team
    method: GET
- name: organizations_teams_projects
  endpoint:
    path: /merchant-center/organizations-teams-projects
    method: GET
- name: user_permissions
  endpoint:
    path: /merchant-center/user-permissions
    method: GET
- name: project_settings
  endpoint:
    path: /merchant-center/project-settings
    method: GET
- name: developer_settings
  endpoint:
    path: /merchant-center/developer-settings
    method: GET
- name: product_types_attributes
  endpoint:
    path: /merchant-center/product-types
    method: GET
- name: products
  endpoint:
    path: /merchant-center/products
    method: GET
- name: product_selections
  endpoint:
    path: /merchant-center/product-selections
    method: GET
- name: categories
  endpoint:
    path: /merchant-center/categories
    method: GET
- name: prices
  endpoint:
    path: /merchant-center/prices
    method: GET
- name: discounts_overview
  endpoint:
    path: /merchant-center/discounts-overview
    method: GET
- name: product_discounts
  endpoint:
    path: /merchant-center/product-discounts
    method: GET
- name: cart_discounts
  endpoint:
    path: /merchant-center/cart-discounts
    method: GET
- name: discount_codes
  endpoint:
    path: /merchant-center/discount-codes
    method: GET
- name: business_units_associates
  endpoint:
    path: /merchant-center/business-units-associates
    method: GET
- name: quotes
  endpoint:
    path: /merchant-center/quotes
    method: GET
- name: order_list
  endpoint:
    path: /merchant-center/order-list
    method: GET
- name: dashboard
  endpoint:
    path: /merchant-center/dashboard
    method: GET
- name: change_history
  endpoint:
    path: /merchant-center/change-history
    method: GET
- name: import_data
  endpoint:
    path: /merchant-center/import-data
    method: GET
- name: export_data
  endpoint:
    path: /merchant-center/export-data
    method: GET
- name: custom_applications
  endpoint:
    path: /merchant-center/managing-custom-applications
    method: GET
- name: custom_views
  endpoint:
    path: /merchant-center/managing-custom-views
    method: GET
- name: connectors
  endpoint:
    path: /connect
    method: GET
- name: ProductDraft
  endpoint:
    path: /api/projects/products/draft-import
    method: POST
    data_selector: drafts
    params: {}
- name: ProductVariantDraft
  endpoint:
    path: /api/projects/products/variant-import
    method: POST
    data_selector: variants
    params: {}
- name: ProductVariant
  endpoint:
    path: /api/projects/products/import/ProductVariant
    method: POST
    data_selector: productVariant
    params: {}
- name: countries
  endpoint:
    path: /countries
    method: GET
    data_selector: countries
- name: currencies
  endpoint:
    path: /currencies
    method: GET
    data_selector: currencies
- name: languages
  endpoint:
    path: /languages
    method: GET
    data_selector: languages
- name: TextAttribute
  endpoint:
    path: /api/projects/productTypes#ctp:import:type:TextAttribute
    method: GET
    data_selector: records
    params: {}
- name: TextSetAttribute
  endpoint:
    path: /api/projects/productTypes#ctp:import:type:TextSetAttribute
    method: GET
    data_selector: records
    params: {}
- name: TimeAttribute
  endpoint:
    path: /api/projects/productTypes#ctp:import:type:TimeAttribute
    method: GET
    data_selector: records
    params: {}
- name: TimeSetAttribute
  endpoint:
    path: /api/projects/productTypes#ctp:import:type:TimeSetAttribute
    method: GET
    data_selector: records
    params: {}
- name: ProductVariant
  endpoint:
    path: /api/projects/products
    method: PATCH
    data_selector: productVariant
    params: {}
- name: ProductSelection
  endpoint:
    path: /api/projects/product-selections
    method: IMPORT
    data_selector: ProductSelectionImport
    params: {}
- name: EmbeddedPrice
  endpoint:
    path: /api/pricing-and-discounts-overview
    method: IMPORT
    data_selector: EmbeddedPriceImport
    params: {}
- name: StandalonePrice
  endpoint:
    path: /api/projects/standalone-prices
    method: IMPORT
    data_selector: StandalonePriceImport
    params: {}
- name: order_import
  endpoint:
    path: /api/projects/orders/import
    method: POST
    data_selector: orderImport
    params: {}
- name: Order
  endpoint:
    path: /api/projects/orders
    method: PATCH
    data_selector: fields
- name: countries
  endpoint:
    path: /countries
    method: GET
    data_selector: records
- name: currencies
  endpoint:
    path: /currencies
    method: GET
    data_selector: records
- name: languages
  endpoint:
    path: /languages
    method: GET
    data_selector: records
- name: zones
  endpoint:
    path: /zones
    method: GET
    data_selector: records
- name: taxes
  endpoint:
    path: /taxes
    method: GET
    data_selector: records
- name: shipping_methods
  endpoint:
    path: /shipping-methods
    method: GET
    data_selector: records
- name: channels
  endpoint:
    path: /channels
    method: GET
    data_selector: records
- name: stores
  endpoint:
    path: /stores
    method: GET
    data_selector: records
- name: associate_roles
  endpoint:
    path: /associate-roles
    method: GET
    data_selector: records
- name: import_operations
  endpoint:
    path: /import-containers/{importContainerKey}/import-operations
    method: GET
- name: products
  endpoint:
    path: /products
    method: GET
    data_selector: products
- name: categories
  endpoint:
    path: /categories
    method: GET
    data_selector: categories
- name: customers
  endpoint:
    path: /customers
    method: GET
    data_selector: customers
- name: orders
  endpoint:
    path: /orders
    method: GET
    data_selector: orders
- name: products
  endpoint:
    path: /merchant-center/products
    method: GET
    data_selector: products
    params: {}
- name: product_selection
  endpoint:
    path: /merchant-center/product-selections
    method: GET
    data_selector: records
- name: categories
  endpoint:
    path: /categories
    method: GET
    data_selector: results
    params: {}
- name: prices
  endpoint:
    path: /merchant-center/prices
    method: GET
    data_selector: prices
- name: countries
  endpoint:
    path: /settings/countries
    method: GET
    data_selector: countries
- name: currencies
  endpoint:
    path: /settings/currencies
    method: GET
    data_selector: currencies
- name: languages
  endpoint:
    path: /settings/languages
    method: GET
    data_selector: languages
- name: taxes
  endpoint:
    path: /settings/taxes
    method: GET
    data_selector: taxes
- name: shipping_methods
  endpoint:
    path: /settings/shipping-methods
    method: GET
    data_selector: shippingMethods
- name: discount_templates
  endpoint:
    path: /merchant-center/discount-templates
    method: GET
    data_selector: templates
    params: {}
- name: Create Product Discount
  endpoint:
    path: /merchant-center/product-discounts
    method: POST
    data_selector: discounts
- name: Get Product Discounts
  endpoint:
    path: /merchant-center/product-discounts
    method: GET
    data_selector: discounts
- name: Update Product Discount
  endpoint:
    path: /merchant-center/product-discounts/{id}
    method: PUT
    data_selector: discount
- name: Delete Product Discount
  endpoint:
    path: /merchant-center/product-discounts/{id}
    method: DELETE
    data_selector: discount
- name: user_permissions
  endpoint:
    path: /merchant-center/user-permissions
    method: GET
    data_selector: permissions
- name: project_settings
  endpoint:
    path: /merchant-center/project-settings
    method: GET
    data_selector: settings
- name: cart_discount
  endpoint:
    path: /api/projects/cartDiscounts
    method: GET
    data_selector: discounts
    params: {}
- name: discount_group
  endpoint:
    path: /api/projects/discount-groups
    method: GET
    data_selector: groups
    params: {}
- name: discount_codes
  endpoint:
    path: /merchant-center/discount-codes
    method: GET
    data_selector: DiscountCodes
    params: {}
- name: products
  endpoint:
    path: /merchant-center/products
    method: GET
    data_selector: products
    params: {}
- name: customers
  endpoint:
    path: /customers
    method: GET
    data_selector: customers
- name: customer_groups
  endpoint:
    path: /customer-groups
    method: GET
    data_selector: customerGroups
- name: business_units
  endpoint:
    path: /customers/business-units
    method: POST
    data_selector: data
    params: {}
- name: associates
  endpoint:
    path: /customers/business-units/associates
    method: POST
    data_selector: data
    params: {}
- name: Product Selections
  endpoint:
    path: /merchant-center/product-selections
    method: GET
    data_selector: productSelections
- name: Products
  endpoint:
    path: /merchant-center/products
    method: GET
    data_selector: products
- name: order_list
  endpoint:
    path: /api/projects/orders
    method: GET
    data_selector: orders
- name: create_category
  endpoint:
    path: /merchant-center/categories
    method: POST
- name: edit_category
  endpoint:
    path: /merchant-center/categories/{category_id}
    method: PATCH
- name: delete_category
  endpoint:
    path: /merchant-center/categories/{category_id}
    method: DELETE
- name: view_change_history
  endpoint:
    path: /merchant-center/categories/{category_id}/change-history
    method: GET
- name: prices
  endpoint:
    path: /merchant-center/prices
    method: GET
    data_selector: prices
- name: audit_log
  endpoint:
    path: /api/history/audit-log
    method: GET
    data_selector: changes
    params: {}
- name: change_history
  endpoint:
    path: /api/history/change-history
    method: GET
    data_selector: changes
    params: {}
- name: Discount Templates
  endpoint:
    path: /merchant-center/discount-templates
    method: GET
- name: import_logs
  endpoint:
    path: /import-logs
    method: GET
    data_selector: logs
- name: business_unit
  endpoint:
    path: /merchant-center/import-business-units
    method: POST
    data_selector: business_units
    params: {}
- name: categories
  endpoint:
    path: /api/projects/categories
    method: POST
    data_selector: data
    params: {}
- name: cart_discount
  endpoint:
    path: /api/projects/cartDiscounts
    method: GET
    data_selector: discounts
    params: {}
- name: discount_group
  endpoint:
    path: /api/projects/discount-groups
    method: GET
    data_selector: groups
    params: {}
- name: custom_object
  endpoint:
    path: /merchant-center/import-custom-objects
    method: POST
    data_selector: supported_fields
    params: {}
- name: discount_codes
  endpoint:
    path: /api/projects/discountCodes
    method: GET
    data_selector: discountCodes
    params: {}
- name: Discount Codes
  endpoint:
    path: /api/projects/discountCodes
    method: POST
    data_selector: Discount Code
    params: {}
- name: inventory
  endpoint:
    path: /merchant-center/import-inventory
    method: POST
    data_selector: entries
- name: product_import
  endpoint:
    path: /merchant-center/import-products
    method: POST
    data_selector: results
- name: business_units
  endpoint:
    path: /customers/business-units
    method: GET
    data_selector: businessUnits
- name: associates
  endpoint:
    path: /customers/associates
    method: GET
    data_selector: associates
- name: images
  endpoint:
    path: /merchant-center/import-images
    method: POST
    data_selector: products
    params: {}
- name: delete_data
  endpoint:
    path: /merchant-center/delete-data
    method: DELETE
    data_selector: deletion
    params: {}
- name: product_types
  endpoint:
    path: /api/projects/productTypes
    method: GET
    data_selector: productTypes
    params: {}
- name: quote_requests
  endpoint:
    path: /merchant-center/quote-requests
    method: GET
    data_selector: records
- name: quotes
  endpoint:
    path: /merchant-center/quotes
    method: GET
    data_selector: records
- name: order_list
  endpoint:
    path: /merchant-center/order-list
    method: GET
    data_selector: orders
    params:
      retention_period: 3 months
- name: business_units
  endpoint:
    path: /export/business-units
    method: GET
    data_selector: data
    params: {}
- name: categories
  endpoint:
    path: /export/categories
    method: GET
    data_selector: data
    params: {}
- name: customers
  endpoint:
    path: /export/customers
    method: GET
    data_selector: data
    params: {}
- name: custom_objects
  endpoint:
    path: /export/custom-objects
    method: GET
    data_selector: data
    params: {}
- name: discount_codes
  endpoint:
    path: /export/discount-codes
    method: GET
    data_selector: data
    params: {}
- name: inventory
  endpoint:
    path: /export/inventory
    method: GET
    data_selector: data
    params: {}
- name: orders
  endpoint:
    path: /export/orders
    method: GET
    data_selector: data
    params: {}
- name: products
  endpoint:
    path: /export/products
    method: GET
    data_selector: data
    params: {}
- name: product_types
  endpoint:
    path: /export/product-types
    method: GET
    data_selector: data
    params: {}
- name: Business Units
  endpoint:
    path: /merchant-center/import-business-units
    method: POST
    data_selector: businessUnits
    params: {}
- name: categories
  endpoint:
    path: /api/projects/categories
    method: GET
- name: customers
  endpoint:
    path: /api/projects/customers
    method: GET
- name: discount_codes
  endpoint:
    path: /api/projects/discountCodes
    method: GET
- name: inventory
  endpoint:
    path: /api/projects/inventory
    method: GET
- name: orders
  endpoint:
    path: /api/projects/orders
    method: GET
- name: products
  endpoint:
    path: /api/projects/products
    method: GET
- name: categories
  endpoint:
    path: /api/projects/categories
    method: POST
    data_selector: records
- name: custom_application
  endpoint:
    path: /custom-applications
    method: GET
    data_selector: applications
- name: Custom Objects
  endpoint:
    path: /import/custom-objects
    method: POST
    data_selector: records
    params: {}
- name: custom_view
  endpoint:
    path: /merchant-center/custom-views
    method: POST
    data_selector: customViews
    params: {}
- name: discount_code
  endpoint:
    path: /api/projects/discountCodes
    method: POST
    data_selector: discountCodes
    params: {}
- name: inventory
  endpoint:
    path: /api/projects/inventory
    method: POST
    data_selector: records
    params: {}
- name: ConnectorStagedDraft
  endpoint:
    path: /connectors/drafts
    method: POST
    data_selector: null
    params: {}
- name: DeploymentDraft
  endpoint:
    path: /{projectKey}/deployments
    method: POST
    data_selector: null
    params: {}
- name: products
  endpoint:
    path: /merchant-center/import-products
    method: POST
    data_selector: products
    params: {}
- name: images
  endpoint:
    path: /merchant-center/import-images
    method: POST
    data_selector: images
    params: {}
- name: delete_data
  endpoint:
    path: /merchant-center/delete-data
    method: POST
    data_selector: delete_data
    params: {}
- name: product_type
  endpoint:
    path: /api/projects/productTypes
    method: POST
    data_selector: productTypes
    params: {}
- name: ConnectorStaged
  endpoint:
    path: /connect/connectors-staged
    method: POST
    data_selector: data
    params:
      certification: 'true'
- name: ConnectorStaged
  endpoint:
    path: /connect/connectors-staged
    method: POST
- name: Deployment
  endpoint:
    path: /connect/deployments
    method: POST
- name: business_units
  endpoint:
    path: /business-units
    method: GET
    data_selector: businessUnits
- name: categories
  endpoint:
    path: /categories
    method: GET
    data_selector: categories
- name: customers
  endpoint:
    path: /customers
    method: GET
    data_selector: customers
- name: discount_codes
  endpoint:
    path: /discount-codes
    method: GET
    data_selector: discountCodes
- name: inventories
  endpoint:
    path: /inventories
    method: GET
    data_selector: inventories
- name: orders
  endpoint:
    path: /orders
    method: GET
    data_selector: orders
- name: products
  endpoint:
    path: /products
    method: GET
    data_selector: products
- name: product_types
  endpoint:
    path: /product-types
    method: GET
    data_selector: productTypes
- name: categories
  endpoint:
    path: /api/projects/categories
    method: GET
    data_selector: categories
- name: customers
  endpoint:
    path: /api/projects/customers
    method: GET
    data_selector: customers
- name: discount_codes
  endpoint:
    path: /api/projects/discountCodes
    method: GET
    data_selector: discountCodes
- name: inventory
  endpoint:
    path: /api/projects/inventory
    method: GET
    data_selector: inventory
- name: orders
  endpoint:
    path: /api/projects/orders
    method: GET
    data_selector: orders
- name: products
  endpoint:
    path: /api/projects/products
    method: GET
    data_selector: products
- name: search_connector
  endpoint:
    path: /connectors/search
    method: GET
    data_selector: connectors
- name: create_connector_staged
  endpoint:
    path: /connectors/drafts
    method: POST
    data_selector: id
- name: create_deployment
  endpoint:
    path: /{projectKey}/deployments
    method: POST
    data_selector: id
- name: ConnectorStaged
  endpoint:
    path: /connectors/drafts/{id}
    method: GET
- name: ConnectorStaged by Key
  endpoint:
    path: /connectors/drafts/key={key}
    method: GET
- name: ConnectorStaged
  endpoint:
    path: /connectors/drafts
    method: GET
    data_selector: results
    params:
      limit: 20
      offset: 0
- name: ConnectorStaged
  endpoint:
    path: /connect/connectors-staged
    method: POST
    data_selector: data
    params:
      certification: 'true'
- name: Organization Connector
  endpoint:
    path: /merchant-center/connect/organization-connector
    method: POST
    data_selector: data
    params: {}
- name: Update Connector
  endpoint:
    path: /update-connector
    method: POST
    data_selector: response
    params: {}
- name: Update Creator
  endpoint:
    path: /update-creator
    method: POST
    data_selector: response
    params: {}
- name: Update Availability of Connector
  endpoint:
    path: /update-availability
    method: POST
    data_selector: response
    params: {}
- name: Preview Connector
  endpoint:
    path: /preview-connector
    method: POST
    data_selector: response
    params: {}
- name: Publish and Certify
  endpoint:
    path: /publish-certify
    method: POST
    data_selector: response
    params: {}
- name: connector
  endpoint:
    path: /connectors/{id}
    method: GET
- name: connector_by_key
  endpoint:
    path: /connectors/key={key}
    method: GET
- name: search_connectors
  endpoint:
    path: /connectors/search
    method: GET
- name: products
  endpoint:
    path: /products
    method: GET
    data_selector: results
    params: {}
- name: customers
  endpoint:
    path: /customers
    method: GET
    data_selector: results
    params: {}
- name: deployment
  endpoint:
    path: /{projectKey}/deployments/{id}
    method: GET
    data_selector: deployment
    params: {}
- name: deployments
  endpoint:
    path: /deployments
    method: GET
    data_selector: results
- name: deployment_by_key
  endpoint:
    path: /deployments/key={key}
    method: GET
    data_selector: deployment
- name: create_deployment
  endpoint:
    path: /deployments
    method: POST
    data_selector: deployment
- name: update_deployment_by_id
  endpoint:
    path: /deployments/{id}
    method: POST
    data_selector: deployment
- name: update_deployment_by_key
  endpoint:
    path: /deployments/key={key}
    method: POST
    data_selector: deployment
- endpoint:
    path: /{region}.commercetools.com/{projectKey}/deployments/{id}
    method: DELETE
- endpoint:
    path: /{region}.commercetools.com/{projectKey}/deployments/key={key}
    method: DELETE
- name: deployment_logs
  endpoint:
    path: /{projectKey}/deployments/{id}/logs
    method: GET
    data_selector: data
- name: deployment_logs_by_key
  endpoint:
    path: /{projectKey}/deployments/key={key}/logs
    method: GET
    data_selector: data
- name: service
  endpoint:
    path: /service
    method: POST
    params: {}
- name: job
  endpoint:
    path: /job
    method: POST
    params:
      schedule: '*/5 * * * *'
- name: event
  endpoint:
    path: /event
    method: POST
    params: {}
- name: merchant-center-custom-application
  endpoint:
    path: ''
    method: POST
    params: {}
- name: merchant-center-custom-view
  endpoint:
    path: ''
    method: POST
    params: {}
- name: assets
  endpoint:
    path: ''
    method: POST
    params: {}
- name: ConnectorStaged
  endpoint:
    path: /connectors/drafts/{id}
    method: GET
    data_selector: results
    params: {}
- name: ConnectorStaged by Key
  endpoint:
    path: /connectors/drafts/key={key}
    method: GET
    data_selector: results
    params: {}
- name: service
  endpoint:
    path: /service
    applicationType: service
- name: job
  endpoint:
    path: /job
    applicationType: job
    properties:
      schedule: '*/5 * * * *'
- name: event
  endpoint:
    path: /event
    applicationType: event
- name: merchant-center-custom-application
  endpoint:
    applicationType: merchant-center-custom-application
- name: merchant-center-custom-view
  endpoint:
    applicationType: merchant-center-custom-view
- name: assets
  endpoint:
    applicationType: assets
- name: ConnectorStaged
  endpoint:
    path: /connectors/drafts
    method: GET
    data_selector: results
    params:
      limit: 20
      offset: 0
- name: Create ConnectorStaged
  endpoint:
    path: /connectors/drafts
    method: POST
    data_selector: ''
    params: {}
- name: Update ConnectorStaged by ID
  endpoint:
    path: /connectors/drafts/{id}
    method: POST
    data_selector: ''
    params: {}
- name: Update ConnectorStaged by Key
  endpoint:
    path: /connectors/drafts/key={key}
    method: POST
    data_selector: ''
    params: {}
- name: service_app_name
  endpoint:
    path: /service
    method: POST
- name: job_app_name
  endpoint:
    path: /job
    method: POST
- name: updateConnector
  endpoint:
    path: /update-connector
    method: POST
    data_selector: action
- name: updateCreator
  endpoint:
    path: /update-creator
    method: POST
    data_selector: action
- name: updateAvailability
  endpoint:
    path: /update-availability
    method: POST
    data_selector: action
- name: previewConnector
  endpoint:
    path: /preview-connector
    method: POST
    data_selector: action
- name: publishAndCertify
  endpoint:
    path: /publish
    method: POST
    data_selector: action
- name: payments
  endpoint:
    path: /api/projects/payments
    method: POST
- name: checkout
  endpoint:
    path: /checkout
    method: GET
- name: product_export
  endpoint:
    path: /api/projects/products
    method: POST
- name: Connector
  endpoint:
    path: /connectors/{id}
    method: GET
- name: Connector by Key
  endpoint:
    path: /connectors/key={key}
    method: GET
- name: Search Connectors
  endpoint:
    path: /connectors/search
    method: GET
- name: deployment
  endpoint:
    path: /deployments/{id}
    method: GET
    data_selector: deployment
- name: messages
  endpoint:
    path: /api/projects/messages
    method: GET
    data_selector: messages
    params: {}
- name: subscriptions
  endpoint:
    path: /api/projects/subscriptions
    method: GET
    data_selector: subscriptions
    params: {}
- name: Get Deployment by Key
  endpoint:
    path: /deployments/key={key}
    method: GET
    data_selector: Deployment
- name: Query Deployments
  endpoint:
    path: /deployments
    method: GET
    data_selector: DeploymentPagedQueryResponse
- name: Create Deployment
  endpoint:
    path: /deployments
    method: POST
- name: Update Deployment by ID
  endpoint:
    path: /deployments/{id}
    method: POST
- name: Update Deployment by Key
  endpoint:
    path: /deployments/key={key}
    method: POST
- name: service_app_name
  endpoint:
    path: /service
    method: POST
- name: job_app_name
  endpoint:
    path: /job
    method: POST
    params:
      schedule: '*/5 * * * *'
- name: Delete Deployment by ID
  endpoint:
    path: /{id}
    method: DELETE
- name: Delete Deployment by Key
  endpoint:
    path: /key={key}
    method: DELETE
- name: carts
  endpoint:
    path: /carts
    method: POST
    data_selector: actions
- name: extensions
  endpoint:
    path: /extensions
    method: POST
    data_selector: key
- name: deployment_logs
  endpoint:
    path: /{projectKey}/deployments/{id}/logs
    method: GET
- name: deployment_logs_by_key
  endpoint:
    path: /{projectKey}/deployments/key={key}/logs
    method: GET
- name: deployment_logs
  endpoint:
    path: /{project-key}/deployments/{deployment-id}/logs
    method: GET
    data_selector: data
    params:
      applicationName: ''
      startDate: ''
      endDate: ''
      pageToken: ''
- name: service
  endpoint:
    path: /service
    method: POST
- name: job
  endpoint:
    path: /job
    method: POST
    params:
      schedule: '*/5 * * * *'
- name: event
  endpoint:
    path: /event
    method: POST
- name: merchant-center-custom-application
  endpoint:
    method: POST
- name: merchant-center-custom-view
  endpoint:
    method: POST
- name: assets
  endpoint:
    method: POST
- name: service
  endpoint:
    path: /service
    method: GET
- name: job
  endpoint:
    path: /job
    method: GET
- name: event
  endpoint:
    path: /event
    method: GET
- name: merchant-center-custom-application
  endpoint:
    path: /merchant-center-custom-application
    method: GET
- name: merchant-center-custom-view
  endpoint:
    path: /merchant-center-custom-view
    method: GET
- name: assets
  endpoint:
    path: /assets
    method: GET
- name: service_app_name
  endpoint:
    path: /service
- name: job_app_name
  endpoint:
    path: /job
- name: core_payment_functions
  endpoint:
    params:
      scopes:
      - manage_orders
      - manage_payments
      - view_customers
      - view_types
- name: other_instore_functions
  endpoint:
    params:
      scopes:
      - manage_shopping_lists
      - manage_orders
      - manage_payments
      - manage_customers
      - view_categories
      - view_customer_groups
      - view_discount_codes
      - view_published_products
      - view_shipping_methods
      - view_stores
- name: payments
  endpoint:
    path: /api/projects/payments
    method: GET
    data_selector: records
    params: {}
- name: checkout
  endpoint:
    path: /checkout
    method: GET
    data_selector: records
    params: {}
- name: product_export
  endpoint:
    path: /api/projects/products
    method: POST
- name: incremental_updater
  endpoint:
    path: /api/projects/messages
    method: GET
- name: Carts
  endpoint:
    path: /api/projects/carts
    method: GET
- name: Orders
  endpoint:
    path: /api/projects/orders
    method: GET
- name: Line Items
  endpoint:
    path: /api/projects/carts/lineitem
    method: GET
- name: Payments
  endpoint:
    path: /api/projects/payments
    method: GET
- name: Transactions
  endpoint:
    path: /api/projects/payments/transaction
    method: GET
- name: Customers
  endpoint:
    path: /api/projects/customers
    method: GET
- name: tax_calculator
  endpoint:
    path: /api/projects/api-extensions
    method: POST
    data_selector: message
    params: {}
- name: order_sync
  endpoint:
    path: /api/projects/subscriptions
    method: POST
    data_selector: message
    params: {}
- name: subscriptions
  endpoint:
    path: /api/projects/subscriptions
    method: GET
- name: messages
  endpoint:
    path: /api/projects/messages
    method: GET
- name: Carts
  endpoint:
    path: /api/projects/carts
    method: GET
    data_selector: carts
- name: Orders
  endpoint:
    path: /api/projects/orders
    method: GET
    data_selector: orders
- name: Line Items
  endpoint:
    path: /api/projects/carts/lineitem
    method: GET
    data_selector: lineItems
- name: Payments
  endpoint:
    path: /api/projects/payments
    method: GET
    data_selector: payments
- name: Transactions
  endpoint:
    path: /api/projects/payments/transaction
    method: GET
    data_selector: transactions
- name: Customers
  endpoint:
    path: /api/projects/customers
    method: GET
    data_selector: customers
- name: Types
  endpoint:
    path: /api/projects/types
    method: GET
    data_selector: records
    params: {}
- name: API Extensions
  endpoint:
    path: /api/projects/api-extensions
    method: GET
    data_selector: records
    params: {}
- name: Subscriptions
  endpoint:
    path: /api/projects/subscriptions
    method: GET
    data_selector: records
    params: {}
- name: service_app_name
  endpoint:
    path: /service
    method: POST
- name: job_app_name
  endpoint:
    path: /job
    method: POST
    params:
      schedule: '*/5 * * * *'
- name: callback
  endpoint:
    path: /your-callback-endpoint/userKey
    method: GET
- name: cart
  endpoint:
    path: /your-callback-endpoint/cartId
    method: GET
- name: carts
  endpoint:
    path: /carts
    method: POST
    data_selector: actions
- name: api_extensions
  endpoint:
    path: /extensions
    method: POST
    data_selector: destination
- name: webhook_payload_for_payments
  endpoint:
    path: /instore/integration/webhooks
    method: POST
    data_selector: cartId
- name: webhook_payload_for_refund
  endpoint:
    path: /instore/integration/webhooks
    method: POST
    data_selector: action
- name: webhook_payload_for_bank_deposit
  endpoint:
    path: /instore/integration/webhooks
    method: POST
    data_selector: session_id
- name: webhook_payload_for_cash_count
  endpoint:
    path: /instore/integration/webhooks
    method: POST
    data_selector: session_id
- name: webhook_payload_for_cash_in
  endpoint:
    path: /instore/integration/webhooks
    method: POST
    data_selector: session_id
- name: webhook_payload_for_cash_out
  endpoint:
    path: /instore/integration/webhooks
    method: POST
    data_selector: session_id
- name: webhook_payload_for_safe_deposit_or_transfer
  endpoint:
    path: /instore/integration/webhooks
    method: POST
    data_selector: session_id
- name: webhook_payload_for_transfer_in
  endpoint:
    path: /instore/integration/webhooks
    method: POST
    data_selector: session_id
- name: webhook_payload_for_transfer_out
  endpoint:
    path: /instore/integration/webhooks
    method: POST
    data_selector: session_id
- name: deployment_logs
  endpoint:
    path: /{project-key}/deployments/{deployment-id}/logs
    method: GET
    params:
      applicationName: ''
      startDate: ''
      endDate: ''
- name: mistStatus
  endpoint:
    path: /instore/integration/events/mistStatus
    method: POST
    data_selector: detail
    params: {}
- name: inStoreCore-Alert
  endpoint:
    path: /instore/integration/events/inStoreCore-Alert
    method: POST
    data_selector: detail
    params: {}
- name: inStoreCore-receiptChoice
  endpoint:
    path: /instore/integration/events/inStoreCore-receiptChoice
    method: POST
    data_selector: detail
    params: {}
- name: inStoreCore-screenChange
  endpoint:
    path: /instore/integration/events/inStoreCore-screenChange
    method: POST
    data_selector: detail
    params: {}
- name: cash_management_parameters
  endpoint:
    path: /instore/cash-management-parameters
    method: GET
    data_selector: parameters
    params: {}
- name: general_parameters
  endpoint:
    path: /instore/general-parameters
    method: GET
    data_selector: parameters
    params: {}
- name: print_parameters
  endpoint:
    path: /instore/print-parameters
    method: GET
    data_selector: parameters
    params: {}
- name: refund_parameters
  endpoint:
    path: /instore/refund-parameters
    method: GET
    data_selector: parameters
    params: {}
- name: paymentButtons
  endpoint:
    path: /payment/buttons
    method: GET
    data_selector: paymentButtons
    params: {}
- name: moneyBoxInjection
  endpoint:
    path: /money/box/injection
    method: POST
    data_selector: moneyBoxInjection
    params: {}
- name: Carts
  endpoint:
    path: /api/projects/carts
    method: GET
    data_selector: cart
- name: Orders
  endpoint:
    path: /api/projects/orders
    method: GET
    data_selector: order
- name: Line Items
  endpoint:
    path: /api/projects/carts/lineitem
    method: GET
    data_selector: lineitem
- name: Payments
  endpoint:
    path: /api/projects/payments
    method: GET
    data_selector: payment
- name: Transactions
  endpoint:
    path: /api/projects/payments/transaction
    method: GET
    data_selector: transaction
- name: Customers
  endpoint:
    path: /api/projects/customers
    method: GET
    data_selector: customer
- name: manage_teams
  endpoint:
    path: /frontend-studio/managing-your-team-in-the-studio
    method: GET
    data_selector: users
    params: {}
- name: comments
  endpoint:
    path: /frontend-studio/comments
    method: POST
    data_selector: comments
    params: {}
- name: reviews
  endpoint:
    path: /frontend-studio/reviews
    method: POST
    data_selector: reviews
    params: {}
- name: Carts
  endpoint:
    path: /api/projects/carts
    method: GET
- name: Orders
  endpoint:
    path: /api/projects/orders
    method: GET
- name: Line Items
  endpoint:
    path: /api/projects/carts
    method: GET
- name: Payments
  endpoint:
    path: /api/projects/payments
    method: GET
- name: Transactions
  endpoint:
    path: /api/projects/payments
    method: GET
- name: Customers
  endpoint:
    path: /api/projects/customers
    method: GET
- name: redirects
  endpoint:
    path: /frontend-studio/redirects
    method: GET
    data_selector: redirects
- name: page_builder
  endpoint:
    path: /frontend-studio/using-the-page-builder
    method: GET
    data_selector: page_versions
    params: {}
- name: callback
  endpoint:
    path: /your-callback-endpoint/userKey
    method: GET
- name: cart
  endpoint:
    path: /your-callback-endpoint/cartId
    method: GET
- name: webhook
  endpoint:
    path: /webhooks
    method: POST
    data_selector: payload
- name: Production
  endpoint:
    path: /frontend-studio/accessing-the-studio
    method: GET
- name: Staging
  endpoint:
    path: /frontend-studio/accessing-the-studio
    method: GET
- name: Development
  endpoint:
    path: /frontend-studio/accessing-the-studio
    method: GET
- name: mistStatus
  endpoint:
    path: /instore/events/mistStatus
    method: POST
    data_selector: detail
    params: {}
- name: inStoreCore-Alert
  endpoint:
    path: /instore/events/inStoreCore-Alert
    method: POST
    data_selector: detail
    params: {}
- name: inStoreCore-receiptChoice
  endpoint:
    path: /instore/events/inStoreCore-receiptChoice
    method: POST
    data_selector: detail
    params: {}
- name: inStoreCore-screenChange
  endpoint:
    path: /instore/events/inStoreCore-screenChange
    method: POST
    data_selector: detail
    params: {}
- name: locale_specific_page_versions
  endpoint:
    path: /frontend-studio/locales-and-translations
    method: GET
    data_selector: locale-specific-page-versions
- name: component_level_translations
  endpoint:
    path: /frontend-studio/component-level-translations
    method: GET
    data_selector: component-level-translations
- name: locale_specific_urls
  endpoint:
    path: /frontend-studio/locale-specific-urls
    method: GET
    data_selector: locale-specific-urls
- name: StoreFrontParameters
  endpoint:
    path: /storefront/parameters
    method: GET
    data_selector: parameters
- name: payment_buttons
  endpoint:
    path: /:tenantId/payment-buttons
    method: PUT
- name: Duplicate page version
  endpoint:
    path: /frontend-studio/duplicating-page-versions
    method: GET
    data_selector: records
- name: paymentButtons
  endpoint:
    path: /payment/buttons
    method: GET
    data_selector: paymentButtons
    params: {}
- name: MoneyBoxInjection
  endpoint:
    path: /money/box/injection
    method: POST
    data_selector: moneyBoxInjection
    params: {}
- name: team
  endpoint:
    path: /frontend-studio/managing-your-team-in-the-studio
    method: GET
    data_selector: users
    params: {}
- name: comments
  endpoint:
    path: /frontend-studio/collaboration
    method: GET
- name: reviews
  endpoint:
    path: /frontend-studio/using-the-page-builder
    method: GET
- name: media_items
  endpoint:
    path: /media
    method: GET
    data_selector: items
- name: data_sources
  endpoint:
    path: /frontend-studio/using-data-sources-in-the-studio
    method: GET
- name: dynamic_pages
  endpoint:
    path: /frontend-studio/using-dynamic-pages
    method: GET
- name: schemas
  endpoint:
    path: /frontend-studio/using-schemas-in-the-studio
    method: GET
- name: api_keys
  endpoint:
    path: /frontend-studio/using-the-api-keys-area
    method: GET
- name: project_schema
  endpoint:
    path: /frontend-development/api-hub-configuration
    method: GET
    data_selector: schemas
- name: page_folder_schema
  endpoint:
    path: /frontend-development/page-folder-schema
    method: GET
    data_selector: schemas
- name: redirects
  endpoint:
    path: /frontend-studio/redirects
    method: GET
    data_selector: redirects
    params: {}
- name: page_builder
  endpoint:
    path: /frontend-studio/manage-page-builder
    method: GET
    data_selector: pageBuilder
- name: component_settings
  endpoint:
    path: /frontend-studio/component-settings
    method: GET
    data_selector: componentSettings
- name: data_source
  endpoint:
    path: /frontend-studio/data-sources
    method: GET
- name: dynamic_pages
  endpoint:
    path: /frontend-studio/dynamic-pages
    method: GET
    data_selector: dynamicPages
- name: Production
  endpoint:
    path: /frontend-studio/overview
    method: GET
- name: Staging
  endpoint:
    path: /frontend-studio/using-the-page-builder
    method: GET
- name: Development
  endpoint:
    path: /frontend-studio/using-the-ci-area
    method: GET
- name: page_folders
  endpoint:
    path: /frontend-studio/page-folders
    method: GET
- name: page_versions
  endpoint:
    path: /frontend-studio/page-versions
    method: GET
- name: carts
  endpoint:
    path: /{projectKey}/carts
    method: GET
    data_selector: results
    params: {}
- name: shopping_lists
  endpoint:
    path: /{projectKey}/shopping-lists
    method: GET
    data_selector: results
    params: {}
- name: Java SDK
  endpoint:
    path: /sdk/jvm-sdk
    method: GET
- name: TypeScript SDK
  endpoint:
    path: /sdk/typescript-sdk
    method: GET
- name: PHP SDK
  endpoint:
    path: /sdk/php-sdk
    method: GET
- name: .NET SDK
  endpoint:
    path: /sdk/dotnet-sdk
    method: GET
- name: schedule_page_versions
  endpoint:
    path: /frontend-studio/scheduling-page-versions
    method: GET
    data_selector: records
    params: {}
- name: shopping_list
  endpoint:
    path: /shoppingLists
    method: GET
    data_selector: results
- name: shopping_list
  endpoint:
    path: /shoppingLists
    method: DELETE
- name: page_template
  endpoint:
    path: /frontend-studio/page-templates
    method: GET
    data_selector: templates
- name: page_version
  endpoint:
    path: /frontend-studio/page-versions
    method: GET
    data_selector: versions
- name: component_groups
  endpoint:
    path: /frontend-studio/component-groups
    method: GET
- name: product
  endpoint:
    path: /products
    method: GET
    data_selector: results
    params: {}
- name: cart
  endpoint:
    path: /carts
    method: GET
    data_selector: results
    params: {}
- name: shopping_list
  endpoint:
    path: /shoppingLists
    method: GET
    data_selector: results
- name: dynamic_page
  endpoint:
    path: /frontend-studio/dynamic-pages
    method: GET
- name: Trace view
  endpoint:
    path: /frontend-studio/trace-view
    method: GET
    data_selector: traces
- name: project
  endpoint:
    path: /{projectKey}
    method: GET
    data_selector: body
    params: {}
- name: shopping_list
  endpoint:
    path: /{projectKey}/shopping-lists
    method: GET
    data_selector: results
- name: import_container
  endpoint:
    path: /{projectKey}/import-containers
    method: GET
    data_selector: results
- name: history_entry
  endpoint:
    path: /{projectKey}/history
    method: GET
    data_selector: results
- name: transaction
  endpoint:
    path: /{projectKey}/transactions
    method: GET
    data_selector: results
- name: shopping_list
  endpoint:
    path: /shoppingLists
    method: GET
- name: customers
  endpoint:
    path: /api/projects/customers
    method: POST
    data_selector: customer
    params: {}
- name: products
  endpoint:
    path: /api/projects/products
    method: POST
    data_selector: product
    params: {}
- name: project
  endpoint:
    path: /{projectKey}
    method: GET
    data_selector: body
    params: {}
- name: similar_content
  endpoint:
    path: /apis/rest/content/similar-content
    method: GET
    data_selector: similarContent
- name: content_by_id
  endpoint:
    path: /apis/rest/content/by-id
    method: GET
    data_selector: content
- name: shoppingLists
  endpoint:
    path: /{projectKey}/shoppingLists
    method: GET
    data_selector: results
- name: payment_integration
  endpoint:
    path: /checkout/payment-integration
    method: POST
    data_selector: data
- name: connectors
  endpoint:
    path: /checkout/connectors
    method: GET
    data_selector: connectors
- name: shopping_list
  endpoint:
    path: /ShoppingLists
    method: GET
    data_selector: Results
- name: stored_payment_methods
  endpoint:
    path: /api/projects/payment-methods
    method: GET
    data_selector: storedPaymentMethods
    params: {}
- name: checkoutFlow
  endpoint:
    path: /checkoutFlow
    method: POST
    data_selector: checkout
- name: paymentFlow
  endpoint:
    path: /paymentFlow
    method: POST
    data_selector: payment
- name: customers
  endpoint:
    path: /api/projects/customers
    method: POST
    data_selector: Customer
    params: {}
- name: products
  endpoint:
    path: /api/projects/products
    method: POST
    data_selector: Product
    params: {}
- name: productTypes
  endpoint:
    path: /api/projects/productTypes
    method: POST
    data_selector: ProductType
    params: {}
- name: SubscriptionDraft
  endpoint:
    path: /api/projects/subscriptions
    method: POST
    data_selector: events
- name: CheckoutOrderCreationFailed
  endpoint:
    path: /checkout/order-creation-failed
    method: GET
    data_selector: data
    params: {}
- name: CheckoutPaymentAuthorized
  endpoint:
    path: /checkout/payment-authorized
    method: GET
    data_selector: data
    params: {}
- name: CheckoutPaymentAuthorizationFailed
  endpoint:
    path: /checkout/payment-authorization-failed
    method: GET
    data_selector: data
    params: {}
- name: CheckoutPaymentCharged
  endpoint:
    path: /checkout/payment-charged
    method: GET
    data_selector: data
    params: {}
- name: CheckoutPaymentChargeFailed
  endpoint:
    path: /checkout/payment-charge-failed
    method: GET
    data_selector: data
    params: {}
- name: CheckoutPaymentAuthorizationCancelled
  endpoint:
    path: /checkout/payment-authorization-cancelled
    method: GET
    data_selector: data
    params: {}
- name: CheckoutPaymentCancelAuthorizationFailed
  endpoint:
    path: /checkout/payment-cancel-authorization-failed
    method: GET
    data_selector: data
    params: {}
- name: CheckoutPaymentRefunded
  endpoint:
    path: /checkout/payment-refunded
    method: GET
    data_selector: data
    params: {}
- name: CheckoutPaymentRefundFailed
  endpoint:
    path: /checkout/payment-refund-failed
    method: GET
    data_selector: data
    params: {}
- name: products
  endpoint:
    path: /api/projects/products
    method: GET
- name: carts
  endpoint:
    path: /api/projects/carts
    method: GET
- name: orders
  endpoint:
    path: /api/projects/orders
    method: GET
- name: checkout_loaded
  endpoint:
    path: /checkout/loaded
    method: GET
    data_selector: checkout_loaded
- name: checkout_started
  endpoint:
    path: /checkout/started
    method: GET
    data_selector: checkout_started
- name: checkout_cancelled
  endpoint:
    path: /checkout/cancelled
    method: GET
    data_selector: checkout_cancelled
- name: checkout_completed
  endpoint:
    path: /checkout/completed
    method: GET
    data_selector: checkout_completed
- name: similar_content
  endpoint:
    path: /apis/rest/content/similar-content
    method: GET
- name: content_by_id
  endpoint:
    path: /apis/rest/content/by-id
    method: GET
- name: payment_integrations
  endpoint:
    path: /checkout/payment-integrations
    method: GET
    data_selector: integrations
- name: connectors
  endpoint:
    path: /checkout/connectors
    method: GET
    data_selector: connectors
- name: applications
  endpoint:
    path: /checkout/applications
    method: GET
    data_selector: applications
- name: application
  endpoint:
    path: /checkout/applications
    method: POST
    data_selector: application
- name: Payment Integration predicates
  endpoint:
    path: /checkout/payment-integration-predicates
    method: GET
    data_selector: predicates
    params: {}
- name: Automated Reversal predicates
  endpoint:
    path: /checkout/automated-reversal-predicates
    method: GET
    data_selector: predicates
    params: {}
- name: PaymentMethods
  endpoint:
    path: /api/projects/payment-methods
    method: GET
- name: checkout_session
  endpoint:
    path: /sessions
    method: POST
    data_selector: id
- name: address
  endpoint:
    path: /checkout/address
    method: GET
    data_selector: address
- name: delivery
  endpoint:
    path: /checkout/delivery
    method: GET
    data_selector: delivery
- name: payment
  endpoint:
    path: /checkout/payment
    method: GET
    data_selector: payment
- name: checkout
  endpoint:
    path: /checkout
    method: GET
    data_selector: checkout
- name: orderSummary
  endpoint:
    path: /checkout/orderSummary
    method: GET
    data_selector: orderSummary
- name: cart
  endpoint:
    path: /checkout/cart
    method: GET
    data_selector: cart
- name: default address form
  endpoint:
    path: /checkout/default-address-form
    method: GET
    data_selector: forms.default.address.layout
- name: address summary
  endpoint:
    path: /checkout/address-summary
    method: GET
    data_selector: forms.default.address.summaryLayout
- name: checkoutFlow
  endpoint:
    path: /checkoutFlow
    method: POST
    data_selector: response
    params:
      projectKey: '{projectKey}'
      region: '{region}'
      sessionId: '{sessionId}'
      locale: '{locale}'
      logInfo: 'true'
      logWarn: 'true'
      logError: 'true'
- name: paymentFlow
  endpoint:
    path: /paymentFlow
    method: POST
    data_selector: response
    params:
      projectKey: '{projectKey}'
      region: '{region}'
      sessionId: '{sessionId}'
      locale: '{locale}'
      logInfo: 'true'
      logWarn: 'true'
      logError: 'true'
- name: checkoutFlow
  endpoint:
    path: /checkoutFlow
    method: POST
- name: paymentFlow
  endpoint:
    path: /paymentFlow
    method: POST
- name: address_fields_validation
  endpoint:
    path: /checkout/custom-address-fields-validation
    method: GET
    data_selector: validation_rules
    params: {}
- name: subscriptions
  endpoint:
    path: /api/projects/subscriptions
    method: POST
    data_selector: SubscriptionDraft
- name: payment
  endpoint:
    path: /api/projects/payments
    method: POST
    data_selector: payment
    params: {}
- name: transaction
  endpoint:
    path: /api/projects/payments/transactions
    method: POST
    data_selector: transaction
    params: {}
- name: CheckoutOrderCreationFailed
  endpoint:
    path: /checkout/order/creation/failed
    method: GET
    data_selector: data
    params: {}
- name: CheckoutPaymentAuthorized
  endpoint:
    path: /checkout/payment/authorized
    method: GET
    data_selector: data
    params: {}
- name: CheckoutPaymentAuthorizationFailed
  endpoint:
    path: /checkout/payment/authorization/failed
    method: GET
    data_selector: data
    params: {}
- name: CheckoutPaymentCharged
  endpoint:
    path: /checkout/payment/charged
    method: GET
    data_selector: data
    params: {}
- name: CheckoutPaymentChargeFailed
  endpoint:
    path: /checkout/payment/charge/failed
    method: GET
    data_selector: data
    params: {}
- name: CheckoutPaymentAuthorizationCancelled
  endpoint:
    path: /checkout/payment/authorization/cancelled
    method: GET
    data_selector: data
    params: {}
- name: CheckoutPaymentCancelAuthorizationFailed
  endpoint:
    path: /checkout/payment/cancel/authorization/failed
    method: GET
    data_selector: data
    params: {}
- name: CheckoutPaymentRefunded
  endpoint:
    path: /checkout/payment/refunded
    method: GET
    data_selector: data
    params: {}
- name: CheckoutPaymentRefundFailed
  endpoint:
    path: /checkout/payment/refund/failed
    method: GET
    data_selector: data
    params: {}
- name: checkout_events
  endpoint:
    path: /checkout/events
    method: GET
    data_selector: data
    params: {}
- name: checkout_payments
  endpoint:
    path: /checkout/payments
    method: GET
    data_selector: data
    params: {}
- name: Checkout Loaded
  endpoint:
    path: /checkout/loaded
    method: GET
    data_selector: code
    params: {}
- name: Checkout Started
  endpoint:
    path: /checkout/started
    method: GET
    data_selector: code
    params: {}
- name: Checkout Cancelled
  endpoint:
    path: /checkout/cancelled
    method: GET
    data_selector: code
    params: {}
- name: Checkout Completed
  endpoint:
    path: /checkout/completed
    method: GET
    data_selector: code
    params: {}
- name: connector_error
  endpoint:
    path: /connector/error
    method: GET
    data_selector: payload.connector
    params: {}
- name: payment_integrations_received
  endpoint:
    path: /payment/integrations/received
    method: GET
    data_selector: payload.paymentIntegrations
    params: {}
- name: multiple_vendor_button_containers
  endpoint:
    path: /vendor/button/containers
    method: GET
    data_selector: payload
    params: {}
- name: payment_integration_not_available
  endpoint:
    path: /payment/integration/unavailable
    method: GET
    data_selector: payload.method
    params: {}
- name: no_payment_integrations
  endpoint:
    path: /payment/integrations/no
    method: GET
    data_selector: payload
    params: {}
- name: payment_integration_loading
  endpoint:
    path: /payment/integration/loading
    method: GET
    data_selector: payload.integration
    params: {}
- name: payment_integration_loading_error
  endpoint:
    path: /payment/integration/loading/error
    method: GET
    data_selector: payload.error
    params: {}
- name: payment_integration_loaded
  endpoint:
    path: /payment/integration/loaded
    method: GET
    data_selector: payload.integration
    params: {}
- name: payment_integration_selected
  endpoint:
    path: /payment/integration/selected
    method: GET
    data_selector: payload.integration
    params: {}
- name: payment_integration_selection_confirmation
  endpoint:
    path: /payment/integration/selection/confirmation
    method: GET
    data_selector: payload.integration
    params: {}
- name: payment_integration_selection_confirmation_failed
  endpoint:
    path: /payment/integration/selection/confirmation/failed
    method: GET
    data_selector: payload.integration
    params: {}
- name: error_loading_all_payment_integrations
  endpoint:
    path: /payment/integrations/error/loading/all
    method: GET
    data_selector: payload
    params: {}
- name: payment_started
  endpoint:
    path: /payment/started
    method: GET
    data_selector: payload.integration
    params: {}
- name: payment_failed
  endpoint:
    path: /payment/failed
    method: GET
    data_selector: payload
    params: {}
- name: payment_cancelled
  endpoint:
    path: /payment/cancelled
    method: GET
    data_selector: payload
    params: {}
- name: payment_validation_failed
  endpoint:
    path: /payment/validation/failed
    method: GET
    data_selector: payload
    params: {}
- name: payment_validation_passed
  endpoint:
    path: /payment/validation/passed
    method: GET
    data_selector: payload
    params: {}
- name: payment_validation_started
  endpoint:
    path: /payment/validation/started
    method: GET
    data_selector: payload
    params: {}
- name: external_terms_and_conditions_pending
  endpoint:
    path: /external/terms/conditions/pending
    method: GET
    data_selector: payload
    params: {}
- name: checkoutFlow
  endpoint:
    path: /checkout
    method: POST
    data_selector: styles
    params: {}
- name: address
  endpoint:
    path: /checkout/address
    method: GET
    data_selector: address
    params: {}
- name: delivery
  endpoint:
    path: /checkout/delivery
    method: GET
    data_selector: delivery
    params: {}
- name: payment
  endpoint:
    path: /checkout/payment
    method: GET
    data_selector: payment
    params: {}
- name: checkout
  endpoint:
    path: /checkout
    method: GET
    data_selector: checkout
    params: {}
- name: orderSummary
  endpoint:
    path: /checkout/orderSummary
    method: GET
    data_selector: orderSummary
    params: {}
- name: address_fields_validation
  endpoint:
    path: /checkout/customize-address-fields-validation
    method: GET
    data_selector: validation_rules
- name: Payment
  endpoint:
    path: /api/projects/payments
    method: POST
    data_selector: payment
    params: {}
- name: Transaction
  endpoint:
    path: /api/projects/payments/transactions
    method: POST
    data_selector: transaction
    params: {}
- name: Order
  endpoint:
    path: /api/projects/orders
    method: POST
    data_selector: order
    params: {}
notes:
- The Import API is designed for high speed, large volume, and automatic handling
  of resource dependencies.
- You cannot delete resources with the Import API.
- The Import API operates independently from other Composable Commerce APIs.
- You cannot use the Import API to set or update the key/orderNumber of an existing
  resource.
- Uses OAuth2 with refresh token — requires setup of connected app in api
- Ensure to save the project_key, client_id, secret, scope, API URL, and Auth URL
  before leaving or closing this page.
- Uses OAuth2 for authentication.
- The token expires in 48 hours (172800 seconds).
- You must provide the Authorization header with the access token
- Each API request must contain the projectKey as a unique identifier.
- The API follows the Command Query Responsibility Segregation (CQRS) pattern.
- All API access is over HTTPS.
- API authorization uses OAuth 2.0 bearer tokens.
- Creating a new cart or an anonymous session on the first page visit can result in
  a very high number of resources.
- If you don't provide a correlation ID for an HTTP request, Composable Commerce generates
  one returned with the response.
- To use external user IDs from an external OAuth server, provide an external OAuth
  token with external_user_id:{externalId} in the scope.
- Set the x-correlation-id HTTP header to propagate the correlation ID on HTTP requests.
- The responses will contain the same header with the correlation ID from the corresponding
  request.
- Query predicates allow filtering of resources.
- Query predicates can be used to filter resources based on specified fields.
- Efficient queries can be fast on extremely large datasets and inefficient queries
  can be fast on small datasets, too.
- The automatic index creation needs to collect a significant amount of data to not
  optimize for outlier scenarios.
- A search request submitted as payload on a Search API is a JSON object.
- Fuzzy search expressions are not as efficient as other expressions and should only
  be used when no other expression is applicable for your use case.
- Indexes are managed automatically by commercetools Composable Commerce.
- Pagination cannot be used to fetch more than the first 10000 results.
- JSON documents persisted through any API endpoint must not be larger than 16 megabytes.
- For best performance, we recommend limiting your average documents to no more than
  100 KB, and large documents to 2 MB.
- The maximum number of Customer Groups that can be added to a project is 10 000.
- The hierarchy of Business Units is limited to 5 levels.
- Each top-level Business Unit can have a maximum of 4 000 Divisions.
- Each Business Unit can have up to 2 000 Associates.
- Each Associate can have up to 5 AssociateRoleAssignments.
- The number of Stores is limited to 300 000.
- The number of Inventory Supply Channels configured for a Store is limited to 100.
- The number of Product Distribution Channels configured for a Store is limited to
  100.
- The number of Product Selections configured for a Store is limited to 100.
- A maximum of 20 000 000 Custom Objects can be created.
- A maximum of 1 000 Product Types can be created.
- A maximum of 25 Extensions can be created per project.
- A maximum of 50 Subscriptions can be created per project.
- A maximum of 1 000 Import Containers can be created per Project.
- An Import Operation is automatically deleted 48 hours after it is created.
- An Import Request may contain a maximum of 20 resources to import.
- The GraphQL API is versionless, meaning new types and fields may be introduced at
  any time without notice.
- Some limits can be increased per project on customer request.
- Most limits only apply to projects created after the introduction of the respective
  limit.
- The maximum number of Customer Groups that can be added to a project is 10,000.
- Each top-level Business Unit can have a maximum of 4,000 Divisions.
- Each Business Unit can have up to 2,000 Associates.
- A maximum of 10,000 addresses per Business Unit can be indexed for Business Unit
  Search.
- Records are stored for 1 year with Audit Log Basic and for 3 years with Audit Log
  Premium.
- The number of Stores is limited to 300,000.
- A maximum of 20,000,000 Custom Objects can be created.
- A maximum of 1,000 Product Types can be created.
- A maximum of 1,000 Import Containers can be created per Project.
- GraphQL API supports Reference Expansion.
- Query complexity can affect performance.
- Uses GraphQL for querying resources
- The `exists` field indicates whether a resource is found
- Search queries are supported with various filters and pagination options.
- Optimize performance with Composable Commerce.
- While the maximum size of JSON documents persisted through any API endpoint is 16
  megabytes, we recommend limiting your average documents to no more than 100 KB.
- JSON document size must not exceed 16 megabytes.
- For optimal performance, keep document size to 2 MB or less.
- Implement short, targeted timeouts wherever possible.
- Do not set timeouts longer than 60 seconds.
- Avoid applying the same timeout globally.
- 'Load tests are not allowed in the following periods of the year: 2 weeks before
  Black Friday to the Tuesday after Black Friday, Between December 20 and December
  26'
- Uses OAuth2 with refresh token — requires setup of connected app in commercetools
- Some services may have performance impacts when using external OAuth tokens
- Uses GraphQL for data retrieval and manipulation.
- The introspection endpoint must return a result within `500 ms` to the Authorization
  API.
- Creating new refresh tokens continues to work even if the limit is exceeded.
- An API Client using manage_project scope cannot request a token with lesser scopes.
- Indexing must be activated for your Project to use Product Projection Search.
- Grants permissions based on projectKey and storeKey.
- The maximum size of JSON documents persisted through any API endpoint is 16 megabytes,
  we recommend limiting your average documents to no more than 100 KB.
- Your largest documents should ideally not exceed 2 MB.
- Scopes cannot be changed after an API Client is created.
- Carts subjected to numerous or intricate discounts, complex shipping rules, or varied
  tax calculations can lead to performance issues.
- JSON document size for Cart objects must not exceed 16 megabytes.
- 'OAuth 2.0 Scopes: manage_api_clients:{projectKey}'
- Maintaining a small Product data footprint improves performance.
- The system reliably processes large Carts, but response times increase with the
  total number of items.
- Timeouts and retries are essential tools for building robust integrations with Composable
  Commerce.
- Use short, targeted timeouts wherever possible.
- Avoid applying the same timeout globally. Configure timeouts based on use case and
  system architecture.
- 'Load tests are not allowed in the following periods of the year: 2 weeks before
  Black Friday to the Tuesday after Black Friday, Between December 20 and December
  26.'
- Use the Composable Commerce OAuth 2.0 authorization flows instead of an external
  OAuth server, unless necessary.
- Ensure GDPR compliance when deleting personal data.
- OAuth endpoint and authentication header to enable external Identity Providers
- 'OAuth 2.0 Scopes: view_project_settings:{projectKey}'
- 'OAuth 2.0 Scopes: manage_project_settings:{projectKey}'
- Each channel must have at least one role. If not specified, then InventorySupply
  is assigned by default.
- A Channel can only be deleted if it is not referenced by other resources.
- Uses OAuth 2.0 with specific scopes for accessing stores.
- Private Service Connect provides private connectivity for your applications running
  in GCP to commercetools APIs.
- OAuth 2.0 Scopes required for managing stores.
- Returns a ReferenceExists error if other resources reference the Channel to be deleted.
- User-defined unique identifier of the ProductType must be between 2 and 256 characters.
- A maximum number of 100 TaxCategories can be created per Project.
- ProductTypes can only be deleted if they are not referenced by a Product.
- 'OAuth 2.0 Scopes: view_products:{projectKey} for read access, manage_products:{projectKey}
  for write access.'
- 'OAuth 2.0 Scopes: manage_attribute_groups:{projectKey}'
- A maximum number of 100 Attribute Groups can be created per Project.
- If Product price selection query parameters are provided, the selected Prices are
  added to the response.
- 'OAuth 2.0 Scopes: manage_products:{projectKey}'
- Maximum file size for image upload is 10 MB.
- Only images in sRGB color space are supported.
- The Product Search API should be the preferred option for product discovery as it
  provides full-text search, filtering, faceting, and lower response times.
- 'File upload using Content-Type: multipart/form-data is currently not supported.'
- When used with an API Client that has the `view_published_products:{projectKey}`
  scope, this endpoint only returns published (current) Product Projections.
- Returns a 200 status if the ProductProjection exists, or a 404 status otherwise.
- 'OAuth 2.0 Scopes: view_products:{projectKey}, view_published_products:{projectKey}'
- 'Requires OAuth 2.0 Scopes: view_product_selections:{projectKey}'
- 'OAuth 2.0 Scopes: view_product_selections:{projectKey}, manage_product_selections:{projectKey}'
- The `id` of the ProductSelection is required for the endpoint.
- The `key` of the ProductSelection can also be used to retrieve the resource.
- Deletion will only succeed if the Product Selection is not assigned to any Store.
- A maximum number of 100000000 Product Tailoring across all Products and Stores can
  be created per Project.
- Requires setup of OAuth2 for authentication
- Ensure that the ProductTailoring is published for current data to be retrieved
- 'OAuth 2.0 Scopes: view_products:{projectKey}, manage_products:{projectKey}'
- Requires setup of connected app in API
- Maximum file size for uploaded images is 10 MB.
- Either variant or sku is required to update a specific ProductVariant.
- 'OAuth 2.0 Scopes: manage_products:{projectKey}, manage_products:{projectKey}:{storeKey}'
- Maximum file size of the image to upload is 10 MB.
- Either the scope view_products:{projectKey} or view_categories:{projectKey} is required.
- Either the scope `view_products:{projectKey}` or `view_categories:{projectKey}`
  is required for GET endpoints.
- Either the scope `manage_products:{projectKey}` or `manage_categories:{projectKey}`
  is required for POST endpoints.
- Deleting a root Category deletes the whole Category tree.
- 'OAuth 2.0 Scopes required: view_products:{projectKey}'
- Only one InventoryEntry can be created for a combination of an SKU and supply channel.
- 'OAuth 2.0 Scopes: `view_products:{projectKey}` for viewing, `manage_products:{projectKey}`
  for managing'
- Reviews are used to evaluate Products and Channels.
- The Product Search API is not active for the Project by default. Activate it using
  Merchant Center or API update action.
- If indexing is in progress or if Product Search is inactive, an ObjectNotFound error
  is returned.
- The Product Search API is not active for the Project by default.
- Automatic deactivation occurs if there are no calls against the Search Products
  endpoint for 30 consecutive days.
- If inactive, you can reactivate it.
- Pagination allows retrieval of the first 10,000 results page by page.
- The default limit is 20 results per page.
- The number of Standalone Prices indexed per Product is limited to 10,000.
- Prices with validity dates are not supported by default.
- Default limit for results is 20
- Maximum number of results retrievable is 10,000
- Standalone Prices cannot be retrieved through the Product Search API.
- By default, prices with validity dates are not supported.
- The Product Projection Search API is not active for the Project by default.
- Automatic deactivation occurs after 30 days of inactivity.
- The API and the Search Term Suggestions API are automatically deactivated for a
  Project if there have been no calls to them for the duration of 30 consecutive days.
- 'The maximum number of results returned on a page: 500'
- 'The starting point for the retrieved paginated result: 10000'
- A response to the search request contains the first 20 results by default.
- Pagination allows you to retrieve the first 10 000 results by requesting them page
  by page.
- Pagination allows you to retrieve the first 10,000 results by requesting them page
  by page.
- The Search Term Suggestions API is not active for the Project by default.
- If the API is deactivated, the Query Suggestions endpoint returns a SearchDeactivated
  error.
- Prices can be embedded or standalone.
- Tiered pricing is supported for bulk purchasing.
- Pricing data exceeds the limit of 50,000 Prices for a Product Variant.
- Pricing data is stored externally in a Product Information Management (PIM).
- Creating a Standalone Price produces the StandalonePriceCreated Message.
- If the Standalone Price has the same price scope as an existing Standalone Price,
  a DuplicateStandalonePriceScope error is returned.
- 'OAuth 2.0 Scopes: manage_standalone_prices:{projectKey}'
- A maximum of 500 Product Discounts can be active at the same time.
- Prices are updated in an eventually consistent manner.
- 'OAuth 2.0 Scopes: view_products:{projectKey}'
- Manage products requires manage_products:{projectKey} scope
- OAuth 2.0 Scopes required include manage_products:{projectKey} for deletion and
  view_products:{projectKey} for getting matching discounts.
- The number of active CartDiscounts that do not require a Discount Code is limited
  to 100.
- Cart Discounts can be defined globally for the Project or specific to one or more
  Stores.
- Take Eventual Consistency into account for calculated discount values.
- Cart Discounts can be defined globally for the Project or specific to one or more
  Stores (up to 500).
- A component that defines the set of units to participate in the Discount.
- Uses different selection modes to determine which items are discounted.
- OAuth 2.0 Scopes required for accessing data include view_orders:{projectKey} and
  view_cart_discounts:{projectKey}.
- To update a CartDiscount, you must have permissions for all Stores the CartDiscount
  is associated with.
- Discount Codes can apply up to 10 Cart Discounts.
- Deleting a Discount Code does not check if a CartDiscount, Cart, or Order exists
  that has a reference to the DiscountCode.
- 'Deprecated OAuth 2.0 Scope: `view_orders:{projectKey}`'
- 'OAuth 2.0 Scopes: `view_discount_codes:{projectKey}` and `manage_discount_codes:{projectKey}`'
- A Discount Group can include up to 100 Cart Discounts.
- Each Project can have up to 100 Discount Groups.
- A DiscountGroup can only be deleted if it is not referenced by any CartDiscount.
- DiscountGroup can only be deleted if it is not referenced by any CartDiscount.
- Certain resources have a predicate or cartPredicate field.
- Predicates consist of field identifiers and operators.
- Customers can be global or store-specific.
- Email addresses are treated as case-insensitive for certain operations.
- Customers are uniquely identified by their email address.
- Email addresses are treated as case-insensitive.
- Global Customers cannot create an account in a Store using the same email address.
- If stores is not empty, the Customer is specific to those Stores.
- If stores are empty, the Customer is a global customer.
- If stores are specified, the Customer can only log in using the Password Flow for
  Customers in a Store.
- 'OAuth 2.0 Scopes: view_customers:{projectKey}, view_customers:{projectKey}:{storeKey},
  manage_customers:{projectKey}, manage_customers:{projectKey}:{storeKey}'
- Simultaneously creating or updating two Customers with the same email address can
  return a LockedField error.
- Simultaneously creating two Customers with the same email address can return a LockedField
  error.
- OAuth 2.0 Scopes include manage_customers:{projectKey} and manage_customers:{projectKey}:{storeKey}
- If the Customer exists in the Project but the 'stores' field references a different
  Store, this method returns a ResourceNotFound error.
- Invalidation of tokens is eventually consistent.
- To erase all related personal data in compliance with GDPR, set dataErasure to true.
- Customer Search is deactivated for a Project by default and must be activated manually.
- 'To erase all related personal data in compliance with GDPR, set dataErasure to
  true. Default: false'
- 'OAuth 2.0 Scopes: manage_customers:{projectKey}, manage_customer_groups:{projectKey}'
- Customer Search is deactivated for a Project by default.
- If no calls have been made to the Search Customers endpoint in the last 30 days,
  the feature is automatically deactivated for a Project.
- The API requires an access token from the password flow or anonymous session flow.
- A maximum number of 10,000 Customer Groups can be created per Project.
- All Orders and Carts belonging to the anonymousId are assigned to the newly created
  Customer.
- 'OAuth 2.0 Scopes: view_customers:{projectKey}, view_customer_groups:{projectKey},
  manage_customers:{projectKey}, manage_customer_groups:{projectKey}'
- Access to the Customer's resources is restricted through dedicated scopes, like
  manage_my_orders.
- The API provides access to a limited subset of fields on Customer for security reasons.
- Uses OAuth 2.0 Scopes for authorization.
- Path parameters include region, projectKey, and storeKey.
- 'OAuth 2.0 Scopes: manage_my_business_units:{projectKey}, customer_id:{id}'
- Requires the UpdateBusinessUnitDetails Permission
- If the required Permission is missing, an AssociateMissingPermission error is returned
- The My Business Unit endpoint does not support assigning existing Customers to a
  Business Unit.
- Carts with Merchant or Quote CartOrigin are ignored.
- Requires the UpdateBusinessUnitDetails Permission.
- Requires the UpdateAssociates Permission.
- 'OAuth 2.0 Scopes: manage_my_orders:{projectKey}, customer_id:{id}, anonymous_id:{id}'
- The Customer must have the CreateMyCarts Permission.
- The Customer must have the UpdateMyCarts Permission.
- A ResourceNotFound error is returned if no Orders exist for the provided query predicate.
- Endpoints intentionally provide access to a limited subset of the fields on a Payment.
- The endpoint requires an access token from the password flow or anonymous session
  flow.
- 'OAuth 2.0 Scopes: manage_my_orders:{projectKey}, manage_my_orders:{projectKey}:{storeKey},
  customer_id:{id}, anonymous_id:{id}'
- Requires setup of OAuth scopes for managing shopping lists.
- Endpoints provide access to a limited subset of the fields on a Payment.
- 'OAuth 2.0 Scopes: manage_my_payments:{projectKey}, customer_id:{id}, anonymous_id:{id}'
- If the expected version does not match the actual version, a ConcurrentModification
  error will be returned.
- Some objects may return nulls in deeply nested fields
- The API requires an access token from the password flow.
- 'OAuth 2.0 Scopes: manage_my_shopping_lists:{projectKey}, manage_my_shopping_lists:{projectKey}:{storeKey},
  customer_id:{id}, anonymous_id:{id}'
- 'Path parameters: region, projectKey, storeKey, key, id'
- 'Requires OAuth 2.0 Scopes: manage_my_quote_requests:{projectKey} and customer_id:{id}'
- When creating B2B Quote Requests, the Customer must have CreateMyQuoteRequestsFromMyCarts
  Permission.
- When updating B2B Quote Requests, the Customer must have UpdateMyQuoteRequests Permission.
- 'OAuth 2.0 Scopes: manage_my_quote_requests:{projectKey}, customer_id:{id}'
- Requires OAuth 2.0 setup with appropriate scopes.
- 'OAuth 2.0 Scopes: manage_my_quotes:{projectKey}, customer_id:{id}'
- When creating B2B Quote Requests, the Customer must have the CreateMyQuoteRequestsFromMyCarts
  Permission.
- When updating B2B Quote Requests, the Customer must have the UpdateMyQuoteRequests
  Permission.
- Can only cancel a Quote Request when it is in state Submitted.
- Business Units can be organized hierarchically up to a maximum of 5 levels, with
  the top level being a Business Unit of type Company.
- Business Units can have specific roles and associations defined.
- 'OAuth 2.0 Scopes required: manage_my_quotes:{projectKey}, customer_id:{id}'
- 'OAuth 2.0 Scopes: manage_my_quotes:{projectKey} customer_id:{id}'
- Expected version of the Quote to which the changes should be applied.
- The general endpoints are intended for Sellers that want to manage access and permissions
  outside of Composable Commerce.
- The 'me' endpoints can only grant access to the Associate's own resources.
- Business Unit can be either a Company or a Division.
- 'OAuth 2.0 Scopes: manage_associate_roles:{projectKey}'
- Deleting an AssociateRole generates the AssociateRoleDeleted Message.
- 'OAuth 2.0 Scopes: view_business_units:{projectKey}, manage_business_units:{projectKey}'
- The Associate must have the ViewMyCarts or ViewOthersCarts Permission.
- The Associate must have the CreateMyCarts or CreateOthersCarts Permission.
- Business Unit Search is deactivated for a Project, by default.
- If no calls have been made to the Search Business Units endpoint in the last 30
  days, the feature is automatically deactivated for a Project and must be reactivated.
- The Associate must have the UpdateMyCarts or UpdateOthersCarts Permission.
- 'OAuth 2.0 Scopes: manage_orders:{projectKey}'
- The Associate must have the CreateMyOrders or CreateOthersOrders Permission.
- If a required Permission is missing, an AssociateMissingPermission error is returned.
- The Associate must have the UpdateMyOrders or UpdateOthersOrders Permission.
- Expected version of the Order on which the changes should be applied.
- If the Cart exists in the Project but does not reference the requested BusinessUnit,
  this method returns an InvalidOperation error.
- Associates can view, create, and update Quote Requests on behalf of a Business Unit.
- The Associate must have the `DeleteMyCarts` or `DeleteOthersCarts` Permission.
- The Associate must have the CreateMyQuoteRequestsFromMyCarts or CreateQuoteRequestsFromOthersCarts
  Permission.
- Creating QuoteRequest fails if the Cart does not reference the same BusinessUnit
  as the businessUnitKey path parameter.
- 'OAuth 2.0 Scopes: manage_quote_requests:{projectKey}'
- Requires `manage_quotes:{projectKey}` scope for creating orders
- Requires `manage_orders:{projectKey}` scope for updating orders
- Associates must have ViewMyQuotes or ViewOthersQuotes Permission.
- 'Requires OAuth 2.0 Scopes: view_quotes:{projectKey}, manage_quotes:{projectKey}'
- 'OAuth 2.0 Scopes: manage_quotes:{projectKey}'
- The Associate must have the necessary permissions to create or update quote requests.
- If the QuoteRequest exists in the Project but does not reference the requested BusinessUnit,
  this method returns an InvalidOperation error.
- If the required Permission is missing, an AssociateMissingPermission error is returned.
- The Associate must have the ViewMyQuotes or ViewOthersQuotes Permission.
- The actions a given Associate is allowed to perform depends on the specific roles
  and permissions they hold within the Business Unit.
- Requires specific permissions to update quotes.
- The Associate must have the CreateMyShoppingLists or CreateOthersShoppingLists Permission.
- The Associate must have the UpdateMyShoppingLists or UpdateOthersShoppingLists Permission.
- 'OAuth 2.0 Scopes: manage_shopping_lists:{projectKey}'
- The Associate must have the DeleteMyShoppingLists or DeleteOthersShoppingLists Permission.
- The Associate must have the `AddChildUnits` Permission in the parent unit.
- The actions a given Associate is allowed to perform depend on the specific roles
  and permissions they hold within the Business Unit.
- Approval Flows represent the entire approval process for an Order within a Business
  Unit.
- 'OAuth 2.0 Scopes: view_approval_flows:{projectKey} and manage_approval_flows:{projectKey}
  are required.'
- Carts can be frozen to maintain price stability during checkout.
- The Cart retains original content with its cartState updated to Merged after merging.
- The lifetime of a Cart is controlled by the deleteDaysAfterLastModification property.
- 'OAuth 2.0 Scopes: view_approval_flows:{projectKey}'
- 'OAuth 2.0 Scopes: manage_approval_flows:{projectKey}'
- A maximum of 10 000 000 Carts can be added to a Project.
- The number of Discount Codes in a Cart is limited to 10.
- The API allows for cart creation and retrieval.
- Default limit for the number of results requested is 20.
- Default offset for the number of elements skipped is 0.
- Customers authenticating through the Composable Commerce OAuth 2.0 service can merge
  carts.
- The Order is a snapshot of a transaction and includes details such as pricing and
  customer information.
- Order Edits API does not support tracking or reserving inventory.
- For best practices on optimizing the performance of large or complex Carts, see
  Large Cart performance tips.
- Cart has a default state of Active.
- Default limit for results requested is 20. Maximum is 500.
- Default offset is 0. Maximum is 10000.
- Tax-inclusive pricing should be avoided when using TaxMode `ExternalAmount`.
- 'OAuth 2.0 Scopes: view_orders:{projectKey}, manage_orders:{projectKey}'
- To ensure the Cart is up-to-date with current values (such as Prices and Discounts),
  use the Recalculate update action.
- 'OAuth 2.0 Scopes: manage_orders:{projectKey}, manage_orders:{projectKey}:{storeKey}'
- 'OAuth 2.0 Scopes: view_orders:{projectKey}'
- Uses OAuth2 with Bearer token for authorization
- If the Tax Rate is not set, a MissingTaxRateForCountry error is returned.
- An InvalidOperation error is returned if an overlapping CustomLineItem is added.
- If the Cart exists in the Project but does not have a store specified, or the store
  field references a different Store, this method returns a ResourceNotFound error.
- Setting the Cart's customerId can lead to updates on all its LineItem prices.
- If the Cart is already associated with a Customer, an InvalidOperation error is
  returned.
- The `cart` field is required for creating an Order from a Cart.
- The `quote` field is required for creating an Order from a Quote.
- If the Order exists in the Project but does not have a store specified, or the store
  field references a different Store, this method returns a ResourceNotFound error.
- Expected version of the Order should be provided in the request body.
- Query parameters include version, expand, and dataErasure.
- OAuth 2.0 Scopes required for accessing payment methods
- An inactive Payment Method cannot be set as the default, and the action will return
  an InvalidOperation error.
- A default Payment Method cannot be set as inactive, and the action will return an
  InvalidOperation error.
- 'OAuth 2.0 Scopes: view_orders:{projectKey}, view_orders:{projectKey}:{storeKey}'
- OAuth 2.0 Scopes required for order operations include view_orders:{projectKey}
  and manage_orders:{projectKey}.
- Shopping Lists can be used to implement a 'save-for-later' feature for an individual
  Customer, a shareable wishlist, or a public collection of Products.
- Creating an Order produces the OrderCreated Message.
- If a server-side problem occurs, the Order creation may still successfully complete
  after the error is returned.
- Expected version of the Order must be provided in the request body.
- 'Limitation: expand=lineItems[0].variant and expand=lineItems[0].productSlug are
  not supported.'
- 'OAuth 2.0 Scopes required: view_payment_methods:{projectKey} and manage_payment_methods:{projectKey}
  for respective operations.'
- A maximum of 100000 OrderEdits can exist per Project.
- Uses OAuth 2.0 for authentication
- 'OAuth 2.0 Scopes: view_order_edits:{projectKey}'
- You can only create an Order Edit if the InventoryMode of the Order and its LineItems
  is None.
- Expected version of the Order Edit on which the changes should be applied.
- Expected version of the Order Edit must match the actual version to avoid ConcurrentModification
  error.
- 'Limitation: `expand=lineItems[0].variant` and `expand=lineItems[0].productSlug`
  are not supported.'
- OrderImportDraft allows importing of orders with various item types including Line
  Items and Custom Line Items.
- Only Orders from the last 3 months are indexed and can be retrieved.
- The Order Search API is automatically deactivated for a Project if there have been
  no calls to the Search Orders endpoint in the last 30 days.
- Pagination allows retrieval of the first 10,000 results by requesting them page
  by page.
- Re-indexing can take several hours, depending on the volume of Orders.
- A Recurring Order defines the schedule and configuration for automatically creating
  and placing future Orders at regular intervals.
- 'OAuth 2.0 Scopes: view_recurring_orders:{projectKey}'
- 'OAuth 2.0 Scopes: manage_order_edits:{projectKey}'
- The stagedActions field cannot be updated if the Order Edit result is OrderEdit
  Applied.
- Recurrence Policy can be deleted only if it is not referenced by any Embedded Price,
  Standalone Price, or (Custom) Line Item.
- Recurring Orders automate the reordering process for a Customer.
- The Cart is validated to ensure that it is convertible to an Order.
- If a server-side problem occurs, verify the status of the Recurring Order by querying
  a unique identifier.
- Only Recurring Orders with recurringOrderState of Expired or Canceled can be deleted.
- Pagination allows retrieval of up to 10,000 results by requesting them page by page.
- Shipping information is not automatically set based on the shipping addresses.
- Shipping addresses must be set in CartDraft or with the Set Shipping Address action.
- Recurring Orders can be paused and reactivated.
- The 'Free above' option is only available with fixed shipping rates.
- A maximum number of 100 Shipping Methods can be created per Project.
- User-defined unique identifier must be between 2 and 256 characters and match the
  pattern '^[A-Za-z0-9_-]+$'.
- OAuth 2.0 Scopes include view_recurring_orders:{projectKey} and manage_recurring_orders:{projectKey}.
- If the expiration date has been reached when the Recurring Order is processed, its
  RecurringOrderState will be updated to Expired.
- A maximum number of 100 Zones can be created per Project.
- 'OAuth 2.0 Scopes required for operations: view_orders:{projectKey} for retrieving
  zones, manage_orders:{projectKey} for creating, updating, and deleting zones.'
- 'OAuth 2.0 Scopes: view_orders:{projectKey}, view_shipping_methods:{projectKey},
  manage_my_orders:{projectKey}, manage_orders:{projectKey}, manage_shipping_methods:{projectKey}'
- 'OAuth 2.0 Scopes: view_orders:{projectKey} for querying zones'
- 'OAuth 2.0 Scopes: manage_orders:{projectKey} for creating, updating, and deleting
  zones'
- 'OAuth 2.0 Scopes: view_staged_quotes:{projectKey}, view_staged_quotes:{projectKey}:{storeKey}'
- Supports pagination with default limit of 20 results.
- 'OAuth 2.0 Scopes: manage_quotes:{projectKey}, manage_quotes:{projectKey}:{storeKey}'
- 'OAuth 2.0 Scopes: manage_staged_quotes:{projectKey}'
- The parameter 'expand' can be passed multiple times.
- 'OAuth 2.0 Scopes: manage_staged_quotes:{projectKey}, manage_staged_quotes:{projectKey}:{storeKey}'
- A maximum number of 20,000,000 Custom Objects can be created per Project.
- 'OAuth 2.0 Scopes: view_products:{projectKey}, view_orders:{projectKey}, view_customers:{projectKey},
  view_key_value_documents:{projectKey}'
- 'Manage Scopes: manage_products:{projectKey}, manage_orders:{projectKey}, manage_customers:{projectKey},
  manage_key_value_documents:{projectKey}'
- An API Extension affects the performance of the API it is extending.
- Query parameters can be passed multiple times.
- A maximum of 50 Subscriptions can be created per Project.
- Messages will be delivered even if the Messages Query HTTP API is not enabled.
- 'OAuth 2.0 Scopes: manage_types:{projectKey}'
- Notifications are not guaranteed to be delivered in their natural order.
- Notifications are not guaranteed to be delivered within a certain time frame.
- 'Deprecated OAuth 2.0 scope: view_orders:{projectKey}'
- 'OAuth 2.0 Scopes: view_states:{projectKey}'
- 'Deprecated OAuth 2.0 scope: manage_orders:{projectKey}'
- 'OAuth 2.0 Scopes: manage_states:{projectKey}'
- Audit Log Basic stores changes originating from the Merchant Center for 1 year.
- Audit Log Premium stores changes originating from the Merchant Center, HTTP API,
  and the Import API for 3 years.
- To access Messages via the API, you must first enable the feature in the Settings
  > Developer Settings section of the Merchant Center.
- Checks if one or more Messages exist for the provided query predicate.
- The `view_audit_log:{projectKey}` scope is required for querying.
- The Change History API is versionless, meaning new types and fields may be introduced
  at any time without notice.
- Import Operations are automatically deleted 48 hours after they are created.
- Do not send duplicate import requests concurrently.
- The required scope for sending requests to an ImportContainer is derived from its
  resourceType property.
- 'OAuth 2.0 Scopes: manage_import_containers:{projectKey}, view_import_containers:{projectKey}'
- Import Requests are resource-specific and can contain up to 20 resources.
- To achieve the best performance with the Import API, we recommended having fewer
  than 200 000 ImportOperations per ImportContainer.
- The default offering of Audit Log (Audit Log Basic) only tracks changes made in
  the Merchant Center.
- Changes originating from other sources, such as APIs, will not show in the query
  results.
- The `view_audit_log:{projectKey}` scope is required.
- If the request exceeds the rate limit, a TooManyRequests error is returned.
- Dynamic schema stitching is discouraged.
- Requires appropriate OAuth 2.0 scopes.
- The Import API does not have rate limits, but sending 300 API calls per second is
  recommended.
- 'OAuth 2.0 Scopes: manage_products:{projectKey}, manage_orders:{projectKey}, manage_standalone_prices:{projectKey},
  manage_product_selections:{projectKey}'
- 'OAuth 2.0 Scopes: manage_project:{projectKey}, manage_types:{projectKey}'
- Recommended having fewer than 200,000 ImportOperations per ImportContainer.
- When updating an existing Product Variant by import, you must include the existing
  values of all fields in ProductVariantImport.
- When creating a new ProductVariant, set `isMasterVariant` to `false`.
- An OrderImport is a snapshot of an order at the time it was imported.
- ImportOperations are automatically deleted 48 hours after they are created.
- Use fewer than 200,000 Import Operations per Import Container for best performance.
- 'OAuth 2.0 Scopes: manage_products:{projectKey}, manage_orders:{projectKey}, manage_standalone_prices:{projectKey},
  manage_product_selections:{projectKey}, view_product_selections:{projectKey}, view_standalone_prices:{projectKey}'
- Set isMasterVariant to false when creating a new ProductVariant
- Supports multiple currencies like EUR, GBP, USD.
- Includes languages for different regions.
- Administrators cannot modify the permissions of the Administrators Team.
- 'The Merchant Center SSO supports only the implicit flow with response_type: id_token.'
- Default limit is 20, minimum is 0, maximum is 500
- Default offset is 0, maximum is 10000
- Permissions are assigned to a specific Project in an Organization.
- View and edit permissions are workflow-based.
- commercetools Frontend helps developers and business users collaborate on creating
  and maintaining the frontend for their commerce website.
- You can extend the backend functionality by creating extensions written as JavaScript
  functions.
- The US tax setup is for illustrative purposes only and not representative of an
  actual tax setup.
- Currently, maximum 100 Product Selections can be assigned to one Store.
- Ensure API Client is set up in Merchant Center
- The maximum number of Product Discounts that can be active at the same time is 500.
- The number of active Cart Discounts that do not require a Discount Code is limited
  to 100.
- 'The Merchant Center supports only the implicit flow with response_type: id_token.'
- Discounts are always created in the deactivated state, and must be activated to
  take effect.
- Permissions are assigned to a specific Project in an Organization, and not to all
  Projects.
- Administrators manage user permissions within an Organization.
- The number of active Cart Discounts in a Discount Code is limited to 10.
- By default, new discounts are inactive and must be activated to take effect.
- For most production use cases, we recommend using an SDK to manage your API Clients
  instead of the Merchant Center.
- Customers are unique within a Project, if your Project is set up with Stores, Customers
  are unique within a Store.
- Only users in Teams with appropriate permissions can manage Business Units.
- Only Orders from the last 3 months are indexed and displayed in the Order list.
- It is not possible to import Orders by using the Merchant Center.
- Standalone Prices offer more flexibility for your business needs by allowing up
  to 50,000 Standalone Prices for each Product Variant.
- Only 100 Embedded Prices can be created for each Product Variant.
- Audit Log tracks changes for 1 year in Basic version and 3 years in Premium version.
- The CSV file that you want to upload must be no larger than 35 MB
- CSV file must contain fewer than 80,000 rows
- Only one Inventory entry can be created for a combination of an `sku` and `supplyChannel`.
- You can update an Inventory entry only if it has a `key`.
- Products require a Product Type with a key.
- When importing Products, selecting the Publish all products option updates the current
  and staged representation.
- By default, newly created Business Units are active.
- Quotes are used to negotiate custom pricing and terms before finalizing a sale.
- Only users in Teams with appropriate permissions can view and manage Quotes.
- The dashboard data is updated in real time in an eventually consistent manner.
- 'Audit Log is available in two versions: Basic and Premium.'
- Basic version tracks changes for 1 year; Premium version tracks for 3 years.
- You must import Custom Object data from JSON files.
- You import data for all other resources from CSV files.
- CSV file must be no larger than 35 MB and contain fewer than 80,000 rows.
- A Custom Application can be installed in multiple Organizations where you have administrator
  rights.
- Custom Objects must be imported from JSON files.
- When updating existing Custom Objects, the value field should include all existing
  values and not just the values you are updating.
- Working on Custom Views requires commercetools to contact the developers or owners
  of Custom Views from time to time, primarily for updates and support purposes.
- For greater security and auditability, we recommend creating a specific API Client
  for each Connector.
- You can update a Discount Code only if it has a `key`.
- When updating Discount Codes, include only the headers and values for the fields
  you are updating.
- Create a specific API Client for each Connector for greater security and auditability.
- The Connect API is only available in Google Cloud Regions.
- Connect applications are not suitable for use cases that involve stateful operations.
- Working on Custom Applications requires commercetools to contact the developers
  or owners of Custom Applications from time to time, primarily for updates and support
  purposes.
- User accounts are separate per Region. Authentication will fail when logging into
  a different Region than the one the account was created in.
- Uses OAuth2 for authentication
- If `private` is true, only these Composable Commerce Projects can access the Connector.
- Connect provides a runtime environment for running small applications.
- Connect applications can be developed by anyone, and they are deployed to Composable
  Commerce Projects.
- 'OAuth 2.0 Scopes: manage_project:{projectKey}, manage_connectors:{projectKey},
  view_connectors:{projectKey}'
- Certification process is managed by the Connect team.
- Re-certification required for changes to Connect applications.
- Connectors are read-only.
- Ensure to handle rate limits to avoid service disruption.
- Use consistent input and output contracts for better integration.
- 'Requires OAuth 2.0 Scopes: manage_project:{projectKey}, manage_connectors_deployments:{projectKey},
  view_connectors_deployments:{projectKey}'
- The `manage_api_clients:{projectKey}` scope is required if you use automatically
  generated API Client credentials.
- Developing Connect applications requires a commercetools Composable Commerce Project
  and a GitHub account.
- 'OAuth 2.0 Scopes: manage_project:{projectKey}, manage_connectors:{projectKey}'
- You must have the manage_api_clients:{projectKey} scope for automatic API Client
  generation.
- Integrates with multiple Payment Service Providers (PSP)
- Ensures compliance with data protection standards
- Promotes decoupling of payments from other domains
- Product export template is Store-specific.
- Incremental updater synchronizes changes with a Product in a Store.
- If true, only Connectors assigned to your Project are retrieved.
- Connect application templates are for development purposes. They require further
  customization before being used in production projects.
- Requires setup of commercetools Composable Commerce Project
- Requires further customization before being used in production projects.
- Familiarize with Messages and their payloads for effective email sending.
- Your application must expose an http server on port 8080.
- Have a local install of ngrok or similar software.
- 'OAuth 2.0 Scopes: manage_project:{projectKey}, manage_connectors_deployments:{projectKey},
  view_connectors_deployments:{projectKey}'
- Uses npm or Yarn Classic as your package manager.
- Connect applications can be developed using JavaScript/TypeScript or Java.
- Node v16.x LTS (or later) is recommended for JavaScript/TypeScript.
- Ensure the API Client that runs the Deployment has access to the manage_api_clients:{projectKey}
  scope.
- The Product export template is Store-specific.
- Incremental updater application subscribes to Messages that are sent when changes
  occur.
- Connect application templates are for development purposes and require further customization
  before being used in production projects.
- Connect application templates are for development purposes.
- Use postDeploy and preUndeploy scripts to automate configurations
- Define scripts in connect.yaml that run on different deployment stages
- All operations between the client/host application and InStore require a user access
  token.
- To ensure tokens are not transmitted from the browser, you need to generate a user
  key every time a new access token is granted for a user.
- Ensure your callback URL is HTTPS-enabled to secure data transmission.
- Keep your security key confidential to prevent unauthorized access.
- The API Extension is triggered when a Cart is created or updated.
- Logs are stored for up to 30 days
- You must use npm or Yarn Classic as your package manager.
- The InStore Center is not localized and is always presented in US English (en-US).
- Locations can only be added to an environment that has a status of Active and cannot
  be used until you add devices to it.
- It is your responsibility to build and maintain the integration server. The template
  repository is a starting point only, and you must not use it in production environments
  without first enhancing its security and resiliency.
- InStore provides capabilities through various components and APIs.
- Integration server must be hosted according to specifications.
- Administration parameters control key features and functions of the InStore colleague
  app.
- New parameters are deactivated by default.
- InStore retrieves UI strings from predefined language bundles.
- For security, we recommend granting only the necessary scopes.
- 'Ensure the following values are defined and match in both your Composable Commerce
  Project and the InStore Center: Barcodes, Receipt Text, Custom field mappings.'
- SVG files must contain XML definitions. Failure to do so may result in Studio malfunctions.
- Animated GIF files will appear as static images on your website.
- AVIF images might not render correctly on some web browsers. If you encounter rendering
  issues, re-upload the image in a different format.
- Field names must match exactly. A mismatch blocks InStore from operating for affected
  resources.
- Use the InStore Center to identify missing mappings across all environments.
- Order numbers in InStore have components including Cart Key Prefix, Location ID,
  Workstation ID, and Sequence Number Length.
- Redirects work on paths, not on the domain.
- The CSV file must contain up to 500 lines.
- InStore webhook sends a POST request to a URL that you preregister in the InStore
  Center.
- Access to environments in the Studio depends on user roles.
- Information can be edited in the highest-level environment it is present in.
- Market permissions is an opt-in feature.
- To remove a market permission, contact the Frontend support team.
- New parameters are deactivated by default. To use a new parameter, activate it in
  one or more of your parameter sets.
- Parameters control various front-end actions and user permissions.
- Creating a new page folder can update the navigation menu structure. Consult with
  your development team before creating a new page folder that is in the production
  environment.
- Moving page folders can cause broken links or other navigation issues. Consult with
  your development team before moving page folders that are in the production environment.
- Deleting a page folder can cause broken links or other navigation issues. Consult
  with your development team before removing the page folders that are in the production
  environment.
- InStore loads only a subset of MaterialUI icons.
- If you want to use an icon that is not included in the preloaded set, contact the
  InStore support team.
- The Studio is a management application that lets business users and developers build,
  edit, and manage a commercetools Frontend website.
- From 26 August 2025, you must log in by using your Identity account.
- The invited user receives an email with instructions to activate their account and
  they are added to the users list with the Invitation sent status.
- The link in the invitation email is valid for 72 hours.
- Comments are stored for 90 days.
- AVIF images might not render correctly on some web browsers.
- Do not deploy directly from Netlify. It causes issues with your deployment due to
  inconsistencies between builds.
- The CSV file must include the source path and the target path in the specified format.
- API keys are independent of the Studio environments.
- Studio updates the build statuses asynchronously about every five minutes.
- Dynamic pages can be managed from the Developer area.
- Access to environments depends on user roles; Admin and Developer users can edit
  in all environments.
- Frontend lets you create an international commerce site with support for multiple
  languages.
- commercetools Frontend development tools enable you to develop components and extensions
  for your Frontend project.
- Only users with the Admin role can create a market permission.
- After you create a market permission, it can't be deleted from the Studio.
- Certifications are valid for the year they are issued and until October of the following
  calendar year.
- To maintain an active certification, you must renew it annually by passing a free,
  online renewal exam.
- OAuth2 authentication is required with client credentials.
- Ensure proper permissions are set for accessing resources.
- The time used for scheduling the page version is based on your computer time.
- The Java SDK is unsuitable for Android development as it does not support Java 8
  on its virtual machine.
- You must add a space before and after an operator. Otherwise, the dynamic page rule
  criteria will not be applied.
- API Client setup is required before making calls.
- The SDK uses Jackson to serialize and deserialize JSON.
- Create readable and maintainable Query Predicates using the Java SDK.
- Java v1 SDK was deprecated on 1 January 2024.
- Ensure to handle rate limits according to the API documentation
- Do not deploy directly from Netlify. It causes issues with your deployment due to
  inconsistencies between frontend and backend extensions build versions.
- Use the TypeScript SDK to make API calls.
- Ensure to replace placeholder values with actual values.
- The Trace view area lets developers see API traces.
- Provide a specific scope for the client. If not included, all the scopes of the
  OAuth client will be used.
- Our autogenerated SDKs allow easy integration of your commerce application with
  Composable Commerce APIs.
- Use ServiceRegion.GCP_EUROPE_WEST1 to match the region where your Project is hosted.
- New Relic Agent & Daemon configured is required.
- Monitor and observe your SDK with Dynatrace.
- To monitor your application by using Datadog Agent, there is no need to change the
  SDK.
- The Java v1 SDK was deprecated on 1 January 2024.
- Create a Customer requires 'email' and 'password'
- Create a Product requires 'name', 'productType', and 'slug'
- Java 8 (or later) is required.
- The API client automatically authenticates using OAuth 2.0 and securely stores the
  retrieved access and refresh tokens to the appropriate keychain, depending on the
  platform being used.
- Uses commercetools API client credentials to act securely on behalf of users.
- The server is accessible via streamable HTTP only (no local STDIO, no SSE).
- The server enforces rate limiting to protect against abuse.
- The PHP SDK (also referred to as the PHP v2 SDK) enables you to use methods and
  objects to interact with Composable Commerce APIs rather than using plain HTTP calls
  and untyped JSON objects.
- Checkout can be accessed using Composable Commerce's SDKs.
- The API Client must be created to access the API.
- You must confirm the creation of permissions and a Subscription to use Checkout.
- Both permission and Subscription sets are pre-defined, and you can only confirm
  them.
- Public Connectors can be developed either by commercetools or by third parties.
- You must install at least one Connector from commercetools Connect to set Payment
  Integrations.
- You must install commercetools.Sdk.Api to use the HTTP API.
- commercetools SDKs use a middleware approach for creating API clients.
- Uses New Relic middleware for monitoring SDK interactions.
- Stored Payment Methods support only card payments.
- Dynatrace supports various environments including cloud, on-premise, and hybrid
  setups.
- OpenTelemetry instrumentation agent for NuGet configured.
- Checkout can only be initialized for Carts created with the Carts API
- Order numbers must be unique. If you send a duplicate Order number, an error occurs
  and the Order is not created.
- Version 11.0 (or later) of the .NET SDK is required.
- 'CustomerDrafts have two required fields: `email` and `password`.'
- 'ProductDrafts have three required fields: `name`, `productType`, and `slug`.'
- 'ProductTypeDrafts have two required fields: `name` and `description`.'
- The API client automatically authenticates using OAuth 2.0 and securely stores the
  retrieved access and refresh tokens to the appropriate keychain.
- Ensure you have the necessary scopes for each enabled action.
- Rate limiting is enforced with each IP address limited to 100 requests per 15 minutes.
- To use Checkout, you must confirm the creation of permissions and a Subscription.
- Permissions let Checkout create a Composable Commerce API Client using specific
  scopes to access your data.
- Ensure to install at least one Connector from commercetools Connect before creating
  Applications.
- Generated messages for various payment integration events.
- Checkout supports only the variables mentioned on this page. Any other variable
  declared will be ignored.
- Checkout supports locale formats such as xx, xx-xx, or xx-XX.
- If an unsupported locale is set, the checkout process automatically reverts to the
  default locale of en.
- Technical issue may occur during checkout process.
- Recommended to use logInfo, logWarn, and logError for debugging during development.
- Use the 'close' method to close the Checkout or the Payment UI component.
- You must set a return URL to take the customer back to your website after the information
  has been retrieved.
- Address fields validation is a frontend validation only.
- Payments created by Checkout can be viewed in the Merchant Center from an Order's
  detail page.
- Requires setup of connected app in commercetools
- The maximum number of elements that can be fetched in a query is 500.
- The maximum offset when using pagination is 10,000.
- The maximum number of update actions within a single request is 500.
- The maximum number of Payment Integrations that can be added to an application is
  100.
- Checkout supports only the variables mentioned on this page.
- No payment is needed for your order
- Authorization is the first stage in a payment process. If an authorization is successful,
  the given amount is reserved and not deducted from the customer's account.
- The API requires a valid authorization token for all requests.
- This feature is marked as beta and is subject to change. Use with caution.
- The maximum number of update actions within a single request is limited to 500.
errors:
- 'unresolvedReferences: Could not resolve references'
- 'InvalidRequest: Check the request format and parameters.'
- 'Unauthorized: Ensure proper authentication.'
- 'Conflict: Resource with the specified key already exists.'
- '401 Unauthorized: Recheck OAuth scopes or token expiration'
- '401 Unauthorized: Check your API key or OAuth token.'
- '404 Not Found: The requested resource does not exist.'
- '404: Not found for requests without SSL/TLS.'
- 'REQUEST_LIMIT_EXCEEDED: Throttle API calls or reduce frequency'
- 'QUERY_TIMEOUT: Break down filters or add selectivity'
- Exceeding character limit returns an invalid input error.
- '400: First error message.'
- '401: invalid_token'
- 'REQUEST_LIMIT_EXCEEDED: Throttle API calls or reduce frequency.'
- 'InvalidInput: Pagination cannot be used to fetch more than the first 10000 results.'
- code: AnonymousIdAlreadyInUse
  message: The given anonymous ID is already in use.
- code: DuplicateField
  message: A duplicate value $duplicateValue exists for field $field.
- code: DuplicateFieldWithConflictingResource
  message: A duplicate value $duplicateValue exists for field $field on $conflictingResource.
- code: FeatureRemoved
  message: Description of the feature that is removed.
- code: InvalidInput
  message: Invalid $propertyName. It may be a non-empty string up to $maxLength
- code: InvalidJsonInput
  message: Request body does not contain valid JSON.
- code: InvalidOperation
  message: Plain text description of the error.
- code: InvalidField
  message: The value $invalidValue is not valid for field $field.
- code: InternalConstraintViolated
  message: Plain text description of the constraints that were violated.
- code: MaxResourceLimitExceeded
  message: You have exceeded the limit of $limit resources of type $resourceTypeId.
- code: MoneyOverflow
  message: A Money operation resulted in an overflow.
- code: ObjectNotFound
  message: A $resourceType with identifier $id was unexpectedly not found.
- code: ReferenceExists
  message: Can not delete a $resource while it is referenced by at least one $referencedBy.
- code: ReferencedResourceNotFound
  message: The referenced object of type $typeId $predicate was not found.
- code: RequiredField
  message: A value is required for field $field.
- code: ResourceSizeLimitExceeded
  message: The resource size exceeds the maximal allowed size of 16 MB.
- code: SemanticError
  message: Plain text description of the error concerning the predicate.
- code: SyntaxError
  message: Syntax error while parsing $fieldDefinition.
- code: QueryTimedOut
  message: The query timed out. If your query constantly times out, please check that
    it follows the performance best practices.
- code: insufficient_scope
  message: 'Insufficient scope. One of the following scopes is missing:'
- code: ResourceNotFound
  message: The Resource with ID $resourceId was not found.
- code: ConcurrentModification
  message: 'Object $resourceId has a different version than expected. Expected: $expectedVersion
    - Actual: $currentVersion.'
- code: SearchNotReady
  message: $Search is not ready. Check the indexing-status endpoint and that the feature
    has been activated in the project settings.
- code: ContentTooLarge
  message: Content too large.
- code: General
  message: Description about any known details of the problem.
- code: BadGateway
  message: Plain text description of the error.
- code: OverCapacity
  message: Plain text description of the error.
- code: PendingOperation
  message: Plain text description of the error.
- 'InvalidJsonInput: The input JSON is not valid.'
- 'ConcurrentModification: The resource was modified concurrently.'
- 'access_denied: Access to the resource is denied.'
- 'ExternalOAuthFailed: External OAuth did not respond in time.'
- '400 Bad Request: Duplicate price key: $priceKey. The price key must be unique per
  variant.'
- '400 Bad Request: Duplicate price scope: $priceScope. The combination of currency,
  country, customerGroup and channel must be unique for each price of a product variant.'
- '400 Bad Request: A duplicate combination of the variant values (sku, key, images,
  prices, attributes) exists.'
- '400 Bad Request: Attribute can''t have the same value in a different variant.'
- '400 Bad Request: The set of attributes must be unique across all variants.'
- '400 Bad Request: An attribute definition with name $attributeName already exists
  on product type $productTypeName.'
- '400 Bad Request: The attribute with name $attributeName has a different type on
  product type $productTypeName.'
- '400 Bad Request: Attribute definition for $attributeName does not exist on type
  $typeName.'
- '400 Bad Request: The enum values contain duplicate keys: $listOfDuplicateKeys.'
- '400 Bad Request: The $attributeName attribute definition already contains an enum
  value with the key $enumKey.'
- '400 Bad Request: The $fieldName field definition does not contain an enum value
  with the key $enumKey.'
- '400 Bad Request: The given values must be equal to the existing enum values.'
- '400 Bad Request: $enumKeysTranscript is used by some products and cannot be deleted
  because the $attributeName attribute is required.'
- code: OutOfStock
  message: 'Some line items are out of stock at the time of placing the order: $itemSku.'
- code: PriceChanged
  message: 'The price or tax of some line items changed at the time of placing the
    order: $lineItems.'
- code: DiscountCodeNonApplicable
  message: The discountCode $discountCodeId cannot be applied to the cart.
- code: ShippingMethodDoesNotMatchCart
  message: The predicate does not match the cart.
- code: InvalidItemShippingDetails
  message: Inconsistent shipping details for $subject with ID $itemId. $subject quantity
    is $itemQuantity and shippingTargets quantity sum is $quantitySum.
- code: MatchingPriceNotFound
  message: The variant $variantId of product $productId does not contain a price for
    currency $currencyCode, $country, $customerGroup, $channel.
- code: MissingTaxRateForCountry
  message: A Tax Category is missing the TaxRate matching country and state given
    in the shippingAddress.
- 'MissingTaxRateForCountry: Tax category $taxCategoryId is missing a tax rate for
  country $countriesAndStates.'
- 'CountryNotConfiguredInStore: The country $country is not configured for the store
  $store.'
- 'ResourceSizeLimitExceeded: Request will fail if the document exceeds size limit.'
- 'QueryComplexityLimitExceeded: Queries with a complexity score greater than or equal
  to 20,000 are not executed.'
- '504 Gateway Timeout: Occurs if the OAuth 2.0 service does not respond in 500 ms.'
- code: InvalidInput
  message: Description of the constraints that are not met by the request.
- code: ConcurrentModification
  message: Object $resourceId has a different version than expected.
- 'insufficient_scope: At least one of the provided Store keys must be covered by
  your scopes.'
- 'DuplicatePriceKey: Duplicate price key: $priceKey. The price key must be unique
  per variant.'
- 'DuplicatePriceScope: Duplicate price scope: $priceScope. The combination of currency,
  country, customerGroup and channel must be unique for each price of a product variant.'
- 'DuplicateVariantValues: A duplicate combination of the variant values (sku, key,
  images, prices, attributes) exists.'
- 'DuplicateAttributeValue: Attribute can''t have the same value in a different variant.'
- 'DuplicateAttributeValues: The set of attributes must be unique across all variants.'
- 'AttributeDefinitionAlreadyExists: An attribute definition with name $attributeName
  already exists on product type $productTypeName.'
- 'AttributeDefinitionTypeConflict: The attribute with name $attributeName has a different
  type on product type $productTypeName.'
- 'AttributeNameDoesNotExist: Attribute definition for $attributeName does not exist
  on type $typeName.'
- 'DuplicateEnumValues: The enum values contain duplicate keys: $listOfDuplicateKeys.'
- 'EnumKeyAlreadyExists: The $attributeName attribute definition already contains
  an enum value with the key $enumKey.'
- 'EnumKeyDoesNotExist: The $fieldName field definition does not contain an enum value
  with the key $enumKey.'
- 'EnumValuesMustMatch: The given values must be equal to the existing enum values.'
- 'EnumValueIsUsed: $enumKeysTranscript is used by some products and cannot be deleted
  because the $attributeName attribute is required.'
- code: MissingTaxRateForCountry
  message: The Tax Category of at least one of the lineItems, customLineItems, or
    shippingInfo in the Cart is missing the TaxRate matching country and state given
    in the shippingAddress of that Cart.
- 'ResourceSizeLimitExceeded: Request will fail if the document exceeds the size limit.'
- '504 Gateway Timeout: OAuth 2.0 service must respond within 500 ms.'
- 'insufficient_scope: At least one of the provided Store keys must be covered by
  your scopes'
- 'ConcurrentModification: Object has a different version than expected'
- 'QueryComplexityLimitExceeded: Queries exceeding complexity limit of 20,000 are
  blocked.'
- 'SearchDeactivated: Activate the indexing for your Project'
- 'insufficient_scope: One of the provided Store keys must be covered by your scopes.'
- 'QueryComplexityLimitExceeded: Queries exceeding complexity limit return this error'
- 'SEARCH_DEACTIVATED: Activate indexing for your Project.'
- 'ResourceSizeLimitExceeded: Document size exceeds 16 megabytes.'
- Update actions per request can contain a maximum of 500 update actions.
- Reference expansion path is limited to a maximum depth of 3 references.
- 'QueryComplexityLimitExceeded: Queries exceeding the complexity limit return this
  error.'
- '502 Bad Gateway: Handle gracefully with retries.'
- '503 Service Unavailable: Handle gracefully with retries.'
- '409 ConcurrentModification: Check resource state before retrying.'
- 'QueryComplexityLimitExceeded: Limit exceeded for query complexity.'
- 502 or 504 ExternalOAuthFailed
- 'SearchDeactivated: Indexing is deactivated for your Project.'
- '404 Not Found: API Client does not exist.'
- 'TooManyUpdateActions: Exceeded the maximum of 500 update actions per request.'
- '502 Bad Gateway: Handle with retries.'
- '503 Service Unavailable: Handle with retries.'
- '409 ConcurrentModification: Check the newest state of the resource.'
- 'Unauthorized: Check OAuth scopes or token expiration'
- Contact support for evidence of actions taken on customer data.
- '404 Not Found: Project does not exist'
- '404: API Client not found'
- 'ReferenceExists: Other resources reference the Channel to be deleted.'
- ReferenceExists
- '401 Unauthorized: Ensure the OAuth token is valid.'
- '404 Not Found: Check if the Store ID or Key is correct.'
- '404: Project does not exist'
- 'ReferenceExistsError: Indicates that other resources reference the Channel.'
- '404: Store not found'
- '400: Bad request'
- '403: Access denied'
- 'InvalidJsonInput: Both id and key are set.'
- 'ConcurrentModification: Expected version does not match the actual version.'
- 'DuplicatePriceScope: Price selection conflicts.'
- 'DuplicateVariantValues: Variant values are not unique.'
- 'DuplicateAttributeValue: Attribute value conflict.'
- 'DuplicateAttributeValues: Multiple values conflict.'
- DuplicatePriceScope
- DuplicateVariantValues
- DuplicateAttributeValue
- DuplicateAttributeValues
- '400 Bad Request: Unsupported image data. Not able to identify the color model of
  your image.'
- '202 Accepted: The small size of the image has been successfully uploaded to the
  CDN, but the upload of the other sizes is still ongoing.'
- '200: ProductProjection exists'
- '404: ProductProjection does not exist'
- '404 Not Found: Check if the ProductSelection ID or key is correct.'
- '404 Not Found: Check the endpoint path and resource identifiers'
- '401 Unauthorized: Verify OAuth2 credentials and permissions'
- '404: InventoryEntry does not exist.'
- '404 Not Found: Check if InventoryEntry exists'
- '200: InventoryEntry created/updated/deleted successfully'
- 'InvalidOperation: Removing a field that does not exist'
- 'ObjectNotFound: If indexing is in progress or if Product Search is inactive.'
- 'ObjectNotFound: If indexing is in progress or Product Search is inactive.'
- 'SearchDeactivated: The Product Projection Search API is not active.'
- 'SearchDeactivated: The Product Projection Search endpoint returns a SearchDeactivated
  error if the API is not activated.'
- 'SearchDeactivated: The Search Term Suggestions API is not active for the Project
  by default.'
- 'SearchDeactivated: Activate the Product Projection Search API to use this feature.'
- 'QUERY_TIMEOUT: Break down filters or add selectivity.'
- '404: StandalonePrice not found'
- 'ConcurrentModification: Expected version does not match actual version'
- 'NoMatchingProductDiscountFound: No applicable discount found.'
- 'InvalidJsonInput: Ensure either id or key is provided.'
- 'InvalidJsonInput: If both id and key are set'
- '404: DiscountCode not found'
- '200: DiscountCode exists'
- '404 Not Found: Check if the DiscountGroup ID or key is correct.'
- 'ReferenceExists: DiscountGroup is referenced by a CartDiscount.'
- '404: DiscountGroup not found'
- '403: Insufficient permissions'
- '400 Bad Request: Constructing a predicate that compares different data types returns
  a 400 Bad Request.'
- '401 Unauthorized: Ensure proper API scopes.'
- '403 Forbidden: Insufficient permissions to access this resource.'
- 'LockedField: Simultaneously creating or updating two Customers with the same email
  address.'
- 'ResourceNotFound: If the Customer exists in the Project but the stores field references
  a different Store.'
- 'ConcurrentModification: If the expected version does not match the actual version.'
- 'LockedField: Simultaneously creating two Customers with the same email address.'
- 'InvalidCredentials: Customer account with given credentials not found'
- 'ResourceNotFound: Customer exists but stores field references a different Store'
- 'ResourceNotFound: If the Customer exists in the Project but the ''stores'' field
  references a different Store.'
- 'SearchNotReady: The search index is not available.'
- '409 Conflict: The search index does not exist.'
- 'ResourceNotFound: Customer does not exist or store mismatch'
- 'SearchNotReady: If the initial indexing is in progress or the feature is inactive.'
- '409 Conflict: When checking if the index exists and it does not.'
- 'ResourceNotFound: No Customer exists for the given Query Predicate.'
- 'DuplicateField: Unique value which must be different from any value used for name
  in CustomerGroup.'
- 'ConcurrentModification: expected version does not match actual version'
- 'InvalidCredentials: If an account with the given credentials is not found.'
- 'ResourceNotFound: If no Customer exists with the specified id.'
- 'ResourceNotFound: Business Unit not found'
- 'ResourceNotFound: The Business Unit does not exist or the Customer does not have
  access.'
- 'AssociateMissingPermission: Permission is missing'
- ResourceNotFound
- InvalidOperation
- AssociateMissingPermission
- 'ResourceNotFound: If no Cart exists in the Store for the given id.'
- 'AssociateMissingPermission: Permission is missing.'
- 'InvalidOperation: Trying to remove a field that does not exist.'
- 'AssociateMissingPermission: Required permission is missing'
- 'AssociateMissingPermission: Customer must have the CreateMyCarts permission'
- 'ResourceNotFound: Cart does not belong to the authenticated Customer'
- 'ConcurrentModification: Expected version does not match the actual version'
- 'AssociateMissingPermission: If the required Permission is missing.'
- 'ResourceNotFound: If the Cart or Order does not belong to the authenticated Customer.'
- 'AssociateMissingPermission: Missing required permission to delete the cart'
- 'ResourceNotFound: No Cart exists with the provided id'
- 'ResourceNotFoundError: No Order exists for the provided id.'
- 'ResourceNotFoundError: Order exists but does not have matching customerId or anonymousId.'
- 'ResourceNotFound: If no Orders exist for the provided query predicate.'
- DiscountCodeNonApplicable
- InvalidItemShippingDetails
- OutOfStock
- PriceChanged
- ShippingMethodDoesNotMatchCart
- MatchingPriceNotFound
- MissingTaxRateForCountry
- CountryNotConfiguredInStore
- 'AssociateMissingPermission: If the required Permission is missing'
- 'ResourceNotFound: If no Cart exists with the provided id'
- '401 Unauthorized: If the OAuth scopes are incorrect'
- '404: Payment does not exist'
- '200: Payment exists'
- 'ResourceNotFound: No Order exists for the provided id'
- 'ResourceNotFound: Order exists but does not have matching customerId or anonymousId'
- 'ResourceNotFound: If no ShoppingList exists with the provided id or key.'
- 'ResourceNotFound: If no Orders exists in the Store with the provided `id`.'
- '404 Not Found: No ShoppingList exists for the provided key or id.'
- '404 Not Found: Payment does not exist'
- 'ConcurrentModification: Version mismatch when updating Payment'
- 'ResourceNotFound: If no ShoppingList matches the provided id or key in a Store.'
- 'InvalidOperation: Removing a field that does not exist returns an InvalidOperation
  error'
- 'InvalidOperation: Error returned when creating a Quote Request with unsupported
  Cart settings.'
- 'AssociateMissingPermission: Required permission is missing.'
- 'ResourceNotFound: The QuoteRequest does not exist.'
- 'InvalidOperation: Carts with Discount Codes and Carts with Multiple ShippingMode
  are not supported.'
- 'ResourceNotFound: Quote not found'
- 'InvalidOperation: Cart does not reference the requested BusinessUnit.'
- '409 Conflict: If an index does not exist.'
- 'AssociateMissingPermission: If a required Permission is missing.'
- 'InvalidOperation: If the Cart does not reference the requested BusinessUnit.'
- 'AssociateMissingPermission: If a required Permission is missing'
- 'InvalidOperation: If the Cart does not reference the requested BusinessUnit'
- 'InvalidOperation: Order does not reference the requested Business Unit'
- 'AssociateMissingPermission: Required Permission is missing'
- 'InvalidOperation: Cart does not reference the requested BusinessUnit'
- 'AssociateMissingPermission: Required permission missing.'
- 'InvalidOperation: Cart does not reference the same BusinessUnit.'
- 'InvalidOperation: If the referenced ShippingMethod has a predicate that does not
  match the Cart.'
- 'InvalidOperation: If criteria are not met for creating an order.'
- 'AssociateMissingPermission: If required permissions are missing.'
- 'AssociateMissingPermission: Required permissions are missing'
- 'InvalidOperation: QuoteRequest does not reference the requested BusinessUnit.'
- 'InvalidOperation: If the QuoteRequest does not reference the requested BusinessUnit'
- 'ConcurrentModification: If the expected version does not match the actual version'
- 'DiscountCodeNonApplicable: Discount code is not applicable'
- 'InvalidItemShippingDetails: Item shipping details are invalid'
- 'OutOfStock: Item is out of stock'
- 'PriceChanged: Price has changed'
- 'ShippingMethodDoesNotMatchCart: Shipping method does not match cart'
- 'MatchingPriceNotFound: No matching price found'
- 'MissingTaxRateForCountry: Tax rate for the country is missing'
- 'InvalidOperation: The Quote must reference the same Business Unit as the businessUnitKey'
- 'InvalidOperation: The requested quote does not reference the requested BusinessUnit.'
- 'InvalidOperation: The Order exists in the Project but does not reference the requested
  Business Unit.'
- 'InvalidOperation: QuoteRequest does not reference the requested BusinessUnit'
- 'InvalidOperation: Quote does not reference the requested BusinessUnit'
- 'InvalidOperation: The Quote exists but does not reference the requested BusinessUnit'
- 'AssociateMissingPermission: Check user''s permissions'
- 'InvalidOperation: The Quote does not reference the requested BusinessUnit.'
- 'AssociateMissingPermission: Returned if the required Permission is missing.'
- 'InvalidOperation: Returned if the ShoppingList exists in the Project but does not
  reference the requested BusinessUnit.'
- 'InvalidOperation: Quote does not reference the requested BusinessUnit.'
- 'ConcurrentModification: Version mismatch on quote update.'
- 'InvalidOperation: ShoppingList exists but does not reference the requested BusinessUnit.'
- 'ConcurrentModification: Expected version does not match actual version.'
- 'InvalidOperation: If the Quote exists but does not reference the requested BusinessUnit'
- 'InvalidOperation: If the ShoppingList exists in the Project but does not reference
  the requested BusinessUnit.'
- 'InvalidOperation: ShoppingList exists but does not reference the requested BusinessUnit'
- 'AssociateMissingPermission: Permission is required to access this resource.'
- 'InvalidOperation: The ShoppingList does not reference the requested BusinessUnit.'
- 'ConcurrentModification: The expected version does not match the actual version.'
- 'InvalidOperationError: If the ShoppingList does not reference the requested BusinessUnit.'
- '400 Bad Request: Check the request format and parameters'
- 'ResourceNotFound: If the Cart exists in the Project but does not have a store specified,
  or the store field references a different Store.'
- '404 Not Found: Cart does not exist'
- 'ResourceNotFound: Cart does not exist or references a different Store'
- 'ReferencedResourceNotFound: If the specified customerId cannot be found.'
- 'InvalidOperation: If the Cart is already associated with a Customer while setting
  an Anonymous ID.'
- 'MatchingPriceNotFound: If the Line Items do not have a Price according to the Product
  priceMode.'
- ConcurrentModification
- 'ReferencedResourceNotFound: Customer not found.'
- 'MatchingPriceNotFound: No matching price found for line items.'
- 'MissingTaxRateForCountry: Tax rate is required but not provided.'
- 'ResourceNotFound: If the Cart exists in the Project but does not have a store specified
  or the store field references a different Store.'
- '404: PaymentMethod not found'
- 'InvalidOperation: Operation not allowed due to current state.'
- 'OutOfStock: Check stock availability'
- 'InvalidOperation: Ensure the Quote state is Pending and valid'
- 'ConcurrentModification: Ensure the expected version matches the actual version'
- '404 Not Found: ShoppingList does not exist.'
- '403 Forbidden: Insufficient permissions.'
- 'InvalidOperation: An inactive Payment Method cannot be set as the default'
- 'InvalidOperation: A default Payment Method cannot be set as inactive'
- '404: ShoppingList not found'
- '400: Bad Request'
- '404 Not Found: The feature has been deactivated due to inactivity.'
- 'Failed: Recurring Order''s state changes to Failed if errors prevent subsequent
  Orders from being created.'
- 'ReferenceExists: Recurrence Policy cannot be deleted if it is referenced by any
  Embedded Price, Standalone Price, or (Custom) Line Item'
- 'InvalidOperation: Returned if a Recurring Order can only be updated when it is
  not processing an Order.'
- 'ConcurrentModification: Returned if the expected version does not match the actual
  version.'
- 'OutOfStock: Check inventory levels'
- 'CountryNotConfiguredInStore: Ensure the country is configured in the store'
- 'InvalidOperation: Recurring Order can only be updated when it is not processing
  an Order.'
- 'InvalidOperation: Shipping Method does not match the conditions of the Cart.'
- 'DoesNotMatchCart: Attempt to create an Order from a Cart that does not match the
  selected Shipping Methods.'
- 'FAILED: Recurring Order state changes to Failed if an error occurs.'
- 'RESOURCE_NOT_FOUND: Check if the Recurrence Policy exists with the provided id
  or key.'
- 'REFERENCE_EXISTS: Cannot delete the Recurrence Policy because it is referenced
  by other resources.'
- 'ReferenceExists: A Recurrence Policy cannot be deleted if it is referenced by any
  Embedded Price, Standalone Price, or (Custom) Line Item.'
- 'InvalidOperation: A Recurring Order can only be updated when it is not processing
  an Order.'
- '404 Not Found: ShippingMethod not found'
- '409 Conflict: Expected version does not match the actual version'
- '404 Not Found: Zone does not exist'
- '400 Bad Request: Invalid request parameters'
- 'InvalidOperation: Cart must have a shippingAddress defined.'
- 'ConcurrentModification: Concurrent updates to the same Custom Object.'
- '404: Not Found - The requested resource does not exist.'
- 400 ExtensionPredicateEvaluationFailed
- 502 ExtensionBadResponse
- 502 ExtensionUpdateActionsFailed
- 504 ExtensionNoResponse
- '404: Message does not exist'
- '200: Message exists'
- 'Too Many Requests: Reduce the date range and resource types in your query.'
- '404 Not Found: Message does not exist.'
- 'TooManyRequests: If the request exceeds the rate limit.'
- 'InvalidField: Error caused by not providing the required product field in ProductVariantPatch.'
- code: access_denied
  message: A plain language description of the cause of an error.
- code: ConcurrentModification
  message: The request conflicts with the current state of the involved resources.
- code: Contention
  message: A plain language description of the cause of an error.
- code: DuplicateAttributeValue
  message: A plain language description of the cause of an error.
- code: DuplicateAttributeValues
  message: A plain language description of the cause of an error.
- code: DuplicateField
  message: A plain language description of the cause of an error.
- code: DuplicateVariantValues
  message: A plain language description of the cause of an error.
- code: Generic
  message: A plain language description of the cause of an error.
- code: NewMasterVariantAdditionNotAllowed
  message: Adding a new variant as master variant is not allowed.
- code: insufficient_scope
  message: A plain language description of the cause of an error.
- code: InvalidCredentials
  message: A plain language description of the cause of an error.
- code: InvalidField
  message: A plain language description of the cause of an error.
- code: InvalidFieldUpdate
  message: The following fields are currently not supported for changes/updates
- code: InvalidInput
  message: An invalid input has been sent to the service.
- code: InvalidJsonInput
  message: An invalid JSON input has been sent to the service.
- code: InvalidOperation
  message: The resources in the request are not in the valid state for the operation.
- code: invalid_scope
  message: A plain language description of the cause of an error.
- code: InvalidTransition
  message: A plain language description of the cause of an error.
- code: invalid_token
  message: A plain language description of the cause of an error.
- code: RequiredField
  message: A required field is missing a value.
- code: ResourceCreation
  message: A plain language description of the cause of an error.
- code: ResourceDeletion
  message: A plain language description of the cause of an error.
- code: ResourceNotFound
  message: A plain language description of the cause of an error.
- code: ResourceUpdate
  message: A plain language description of the cause of an error.
- 'Unauthorized: Recheck OAuth scopes.'
- 'TooManyRequests: Throttle API calls or reduce frequency'
- Duplicate import requests may lead to concurrent modification errors.
- InvalidField error when product field is not set for every ProductVariantPatch.
- 'access_denied: An error identifier.'
- 'ConcurrentModification: An error identifier.'
- 'Contention: An error identifier.'
- 'DuplicateAttributeValue: An error identifier.'
- 'DuplicateAttributeValues: An error identifier.'
- 'DuplicateField: An error identifier.'
- 'DuplicateVariantValues: An error identifier.'
- 'Generic: An error identifier.'
- 'NewMasterVariantAdditionNotAllowed: An error identifier.'
- 'insufficient_scope: An error identifier.'
- 'InvalidCredentials: An error identifier.'
- 'InvalidField: An error identifier.'
- 'InvalidFieldUpdate: An error identifier.'
- 'InvalidInput: An error identifier.'
- 'InvalidJsonInput: An error identifier.'
- 'InvalidOperation: An error identifier.'
- 'invalid_scope: An error identifier.'
- 'InvalidTransition: An error identifier.'
- 'invalid_token: An error identifier.'
- 'RequiredField: An error identifier.'
- 'ResourceCreation: An error identifier.'
- 'ResourceDeletion: An error identifier.'
- 'ResourceNotFound: An error identifier.'
- 'ResourceUpdate: An error identifier.'
- '401 Unauthorized: Recheck OAuth scopes.'
- 'NewMasterVariantAdditionNotAllowed: The import operation will fail if isMasterVariant
  is set to true while creating a new ProductVariant.'
- 'NewMasterVariantAdditionNotAllowed: When creating a new ProductVariant, set isMasterVariant
  to false'
- 'RequiredField: The required field ''key'' is missing.'
- '403 Forbidden: Check user permissions for the resource'
- '404 Not Found: Verify the endpoint and resource ID'
- '401 Unauthorized: Check your OAuth token and permissions'
- '404 Not Found: Ensure the endpoint path is correct'
- Maximum number of Product Discounts that can be active at the same time is 500.
- '400 Bad Request: Ensure the CSV structure is correct'
- '413 Payload Too Large: Split the CSV file into smaller files'
- '422 Unprocessable Entity: Check for duplicate identifiers in the CSV'
- '403 Forbidden: Insufficient permissions for this action'
- code: InvalidQueryParam
  message: Request query param is not valid
- code: InvalidPathParam
  message: Request path param is not valid
- code: FieldValueNotFound
  message: The value $value for the $field field was not found
- code: GitRepositoryNotReachable
  message: Repository with the tag is not reachable
- code: AuthenticationError
  message: Bad credentials or Client ID is not defined
- code: AuthorizationError
  message: Access denied
- code: ResourceNotFound
  message: Deployment with id=$resourceId or key=$resourceKey does not exist
- code: ConcurrentModification
  message: 'Object id=$resourceId or key=$resourceKey has a different version than
    expected. Expected: $expectedVersion - Actual: $currentVersion)'
- code: General
  message: Write operations are temporarily unavailable
- code: ConnectorAlreadyCertified
  message: The ConnectorStaged is already certified
- code: ConnectorReferenceNotFound
  message: Connector '$identifier' with version $version not found
- code: ConnectorSpecificationFileNotFound
  message: The file connect.yaml at $url with the tag $tag was not found
- code: ConnectorSpecificationFileNotValid
  message: The file connect.yaml at $url with the tag $tag is not valid
- code: ConnectorStagedInCertification
  message: The ConnectorStaged is already in certification
- code: ConnectorStagedNotPreviewable
  message: Connector id=$resourceId or key=$resourceKey with version $version is not
    previewable
- code: ConnectorStagedNotPrivate
  message: The operation is not valid because ConnectorStaged with id=$resourceId
    or key=$resourceKey is not private
- code: ConnectorStagedPreviewRequestUnderProcess
  message: The ConnectorStaged preview request is already in progress
- code: DeploymentUnsupportedRegion
  message: Deployment unsupported region $region
- code: DeploymentUnknownApplicationConfiguration
  message: Deployment does not require configuration for application named '$unknownApplicationName'.
- code: DeploymentUnknownApplicationConfigurationKey
  message: Deployment does not require (secret|standard) configuration with key $configurationKey
    for application named $applicationName.
- code: DeploymentInvalidStatusTransition
  message: 'Invalid status change: Already deploying'
- code: DeploymentMissingGlobalConfigurationKey
  message: Deployment global configuration requires (secret|standard) with key $configurationKey.
- code: DeploymentUnknownGlobalConfigurationKey
  message: Deployment global configuration does not require (secret|standard) with
    key $configurationKey.
- code: DeploymentEmptyRequiredGlobalConfigurationKey
  message: Deployment requires a non empty value for (secret|standard) global configuration
    with key $configurationKey.
- code: DeploymentApplicationDoNotBelong
  message: 'Deployment with id=$resourceId or key=$resourceKey does not include application:
    $applicationName'
- code: DeploymentApplicationRequired
  message: A Deployment requires at least one application
- code: DeploymentConnectorUpdateFailure
  message: 'Deployment with id=$resourceId or key=$resourceKey failed while trying
    to update Connector id=$resourceId or key=$resourceId (cause: $cause)'
- code: DeploymentProductionDeactivated
  message: Deployments to production are disabled for this Project. Please contact
    support to enable production deployments.
- code: DeploymentInvalidType
  message: The Connector id=$resourceId or key=$resourceId cannot be deployed as a
    '(preview|sandbox|production)' type. Only '(preview|sandbox|production)' types
    are allowed.
- 'Error: Connector specification file not found'
- Functional errors may cause certification process to fail.
- Security vulnerabilities must be addressed before certification.
- '400 Bad Request: Check the request parameters.'
- '401 Unauthorized: Recheck OAuth scopes or token expiration.'
- 'INVALID_GRANT: Check your client credentials or token.'
- 'UNAUTHORIZED: Ensure your token has the required scopes.'
- '429 Too Many Requests: Implement exponential backoff for retries.'
- ConnectorStagedNotPreviewable
- DeploymentUnsupportedRegion
- DeploymentUnknownApplicationConfiguration
- DeploymentUnknownApplicationConfigurationKey
- DeploymentInvalidType
- DeploymentProductionDeactivated
- DeploymentInvalidStatusTransition
- DeploymentApplicationDoNotBelong
- DeploymentApplicationRequiredError
- DeploymentConnectorUpdateFailure
- DeploymentUnknownGlobalConfigurationKeyError
- DeploymentEmptyRequiredGlobalConfigurationKeyError
- code: ConcurrentModification
  message: 'Object id=$resourceId or key=$resourceKey has a different version than
    expected. Expected: $expectedVersion - Actual: $currentVersion'
- '403 access denied: Missing required scope manage_api_clients:{projectKey}.'
- 200 HTTP status code
- '403 access denied: Ensure the manage_api_clients:{projectKey} scope is granted.'
- '200: Application must reply with a 200 HTTP status code.'
- Ensure that your callback URL is entered correctly.
- Verify that your security key matches the one registered in the application.
- '400 Bad Request: Check request parameters.'
- '401 Unauthorized: Verify client credentials.'
- '404 Not Found: Resource does not exist.'
- 'BadRequestException: thrown when a command cannot run due to unfulfilled preconditions'
- 'ApiHttpException: base exception for all error responses (HTTP status codes `4xx`
  and `5xx`)'
- 'ApiClientException: indicates the client-side errors that can be recovered (HTTP
  status codes `4xx`)'
- 'ApiServerException: represents server errors'
- 'INVALID_CLIENT: Check client credentials'
- '401 Unauthorized: Check token validity'
- '429 Too Many Requests: Slow down API calls'
- '400 Bad Request: Invalid request parameters.'
- '401 Unauthorized: Invalid credentials.'
- 'BadRequestException: Problems related to the ApiHttpClient.'
- 'ApiHttpException: A base exception for all error responses (HTTP status codes 4xx
  and 5xx).'
- 'ApiClientException: Indicates the client-side errors that can be recovered (HTTP
  status codes 4xx).'
- 'ApiServerException: Represents server errors.'
- '404 Not Found: If querying a resource with an id or key that does not exist'
- '429: Rate limit exceeded'
- '404 Not Found: The resource does not exist.'
- '404 Not Found: If you query a resource with an id or key that does not exist.'
- '401 Unauthorized: Check your credentials or token expiration.'
- 'application_disabled: Application {applicationKey} for {projectKey} is disabled.'
- 'cart_empty: Cart {cartId} is empty.'
- 'cart_emptied_during_checkout: Cart {cartId} was emptied during checkout.'
- 'cart_not_found: Cart for {projectKey} and session {sessionId} not found.'
- 'non_orderable_cart_error: This cart is not orderable.'
- 'cart_with_exisiting_payment: Cart with existing approved payment.'
- 'unsupported_country: Cart {cartId} has unsupported country.'
- 'shipping_address_missing: The shippingAddress field is missing for cart {cartId}.'
- 'shipping_method_does_not_match_cart: Selected shipping method no longer matches
  cart.'
- 'set_shipping_address_error: Error setting shipping address.'
- code: init_error
  severity: error
  message: Error during initialization.
- code: init_timeout
  severity: error
  message: Timeout error, no init message received.
- code: invalid_locale
  severity: warn
  message: The provided {locale} is invalid.
- code: invalid_mode
  severity: info
  message: '{mode} mode requires an application with mode type {modeTypeRequested}.
    Current mode {modeTypeReceived}.'
- code: expired_session
  severity: error
  message: Session is expired.
- code: failed_to_refresh_session
  severity: error
  message: Failed to refresh session.
- code: invalid_fields
  severity: error
  message: Some fields are invalid.
- code: no_shipping_methods
  severity: error
  message: There are no shipping methods matching cart.
- code: shipping_method_selected
  severity: info
  message: Shipping Method selected.
- code: shipping_method_selection_confirmation
  severity: info
  message: Shipping Method selection confirmed.
- code: unavailable_locale
  severity: warn
  message: The provided locale {locale} is not available for translated definitions.
- code: deprecated_fields
  severity: warn
  message: Some fields are deprecated.
- code: updated_fields
  severity: warn
  message: Some fields are invalid and have been updated.
- code: add_discount_code_error
  severity: error
  message: Error adding discount code.
- code: remove_discount_code_error
  severity: error
  message: Error removing discount code.
- code: discount_code_not_applicable
  severity: info
  message: Discount code not applicable.
- code: not_applicable_discount_code_removed
  severity: warn
  message: Not applicable discount code removed.
- code: gift_card_balance_started
  severity: info
  message: Gift card balance started.
- code: gift_card_balance_success
  severity: info
  message: Gift card balance started.
- code: gift_card_balance_error
  severity: error
  message: Gift card balance failed.
- code: gift_card_balance_removed
  severity: info
  message: Gift card balance removed.
- code: gift_card_redeem_started
  severity: info
  message: Gift card redeem started.
- code: gift_card_redeem_success
  severity: info
  message: Gift card redeem success.
- code: gift_card_redeem_error
  severity: error
  message: Gift card redeem failed.
- code: order_created
  severity: info
  message: Order {orderId} created.
- code: order_creation_error
  severity: error
  message: Order creation failed with approved payment.
- code: order_verification_started
  severity: info
  message: Order verification started.
- code: order_verification_timeout
  severity: error
  message: Order verification timeout.
- code: order_verification_retry_error
  severity: error
  message: Order verification retry error.
- 'INVALID_FIELD: Check if the provided field values meet the requirements.'
- 'CONNECTION_TIMEOUT: Ensure that the server is reachable and configured correctly.'
- 'connector_error: Connector error.'
- 'payment_integrations_received: Payment integrations received.'
- 'multiple_vendor_button_containers: Multiple vendor button containers detected,
  this may cause issues.'
- 'payment_integration_not_available: Payment integration not available.'
- 'no_payment_integrations: There are no payment integrations configured.'
- 'payment_integration_loading: Payment integration loading.'
- 'payment_integration_loading_error: Payment integration loading failed.'
- 'payment_integration_loaded: Payment integration loaded.'
- 'payment_integration_selected: Payment integration selected.'
- 'payment_integration_selection_confirmation: Payment integration selected.'
- 'payment_integration_selection_confirmation_failed: Payment integration selection
  failed.'
- 'error_loading_all_payment_integrations: Error loading all payment integrations.'
- 'payment_started: Payment started.'
- 'payment_failed: Payment failed.'
- 'payment_cancelled: Payment cancelled.'
- 'payment_validation_failed: Payment validation failed.'
- 'payment_validation_passed: Payment validation passed.'
- 'payment_validation_started: Payment validation started.'
- 'external_terms_and_conditions_pending: External terms and conditions pending.'
- 'project_deactivated: Project is deactivated.'
- 'Duplicate Order number: If you send a duplicate Order number, an error occurs and
  the Order is not created.'
- 'Order Verification Timeout: Retry the verification if it cannot complete on time.'
- 'Order Verification Retry Error: Details about why the retry failed.'
- 'A required field was not filled in: Required field'
- 'The postal code entered does not meet the default validation pattern: Invalid ZIP
  Code'
- 'The email address entered does not meet the default validation pattern: Invalid
  email address'
- 'The phone number entered does not meet the default validation pattern: Invalid
  phone number'
- 'OutOfStock: The item is out of stock.'
- code: DuplicateFieldWithConflictingResource
  message: A duplicate value $duplicateValue exists for field $field in request.
- code: InvalidInput
  message: Description of the invalid input error.
- code: InvalidOperation
  message: Description of the error.
- code: ReferencedResourceNotFound
  message: The referenced object of type $typeId $id || key was not found.
- code: MissingProjectKey
  message: Missing project key in the request path.
- code: ResourceNotFound
  message: The Resource with $resourceIdentifier $resourceId was not found.
- code: ServiceUnavailable
  message: Service is unavailable.
- code: MultipleActionsNotAllowed
  message: Actions accepts only one action at time. Array size must be 1.
- code: ConnectorFailed
  message: The connector could not be reached.
- code: PaymentFailure
  message: Payment could not be completed successfully.
- '404: Not Found when connecting via HTTP.'
- '500: Internal Server Error indicates potential successful completion.'
- 'RequiredField: A value is required for field $field.'
- 'DuplicateFieldWithConflictingResource: A duplicate value $duplicateValue exists
  for field $field in request.'
- 'InvalidInput: Description of the invalid input error.'
- 'InvalidJsonInput: Request body does not contain valid JSON.'
- 'InvalidOperation: Description of the error.'
- 'InvalidField: The value $invalidValue is not valid for field $field.'
- 'MaxResourceLimitExceeded: You have exceeded the limit of $limit resources of type
  $resourceTypeId.'
- 'ReferencedResourceNotFound: The referenced object of type $typeId $id || key was
  not found.'
- 'SyntaxError: Syntax error while parsing $fieldDefinition.'
- 'MissingProjectKey: Missing project key in the request path.'
- 'ResourceNotFound: The Resource with $resourceIdentifier $resourceId was not found.'
- 'ConcurrentModification: Object $resourceId has a different version than expected.'
- 'ServiceUnavailable: Service is unavailable.'
- 'General: Description about any known details of the problem.'
auth_info:
  mentioned_objects:
  - OAuth 2.0
  - API Client
  - OAuth 2.0 clients
  - access tokens
  - ApiClient
  - manage_stores:{projectKey}
  - OauthToken
  - OAuth 2.0 Scopes
  - view_stores:{projectKey}
  - view_products:{projectKey}
  - view_tax_categories:{projectKey}
  - manage_products:{projectKey}
  - view_attribute_groups:{projectKey}
  - manage_attribute_groups:{projectKey}
  - view_published_products:{projectKey}
  - Bearer Token
  - manage_product_selections:{projectKey}
  - ProductTailoring
  - StoreKeyReference
  - ProductReference
  - view_categories:{projectKey}
  - manage_categories:{projectKey}
  - view_standalone_prices:{projectKey}
  - manage_standalone_prices:{projectKey}
  - DiscountCodeDeleted
  - view_cart_discounts:{projectKey}
  - manage_cart_discounts:{projectKey}
  - CustomerDraft
  - CustomerUpdateAction
  - CustomerChangePassword
  - CustomerSignin
  - CustomerCreatePasswordResetToken
  - CustomerToken
  - manage_customers:{projectKey}
  - view_customers:{projectKey}
  - view_project_settings:{projectKey}
  - OAuth2 Scopes
  - view_customer_groups:{projectKey}
  - Customer
  - MyCustomerDraft
  - MyCustomerSignin
  - MyCustomerUpdateAction
  - manage_my_business_units:{projectKey}
  - customer_id:{id}
  - password flow
  - anonymous session flow
  - manage_my_orders:{projectKey}
  - anonymous_id:{id}
  - password flow token
  - anonymous session
  - manage_my_orders:{projectKey}:{storeKey}
  - customer:{id}
  - ResourceNotFoundError
  - manage_my_shopping_lists:{projectKey}
  - manage_my_shopping_lists:{projectKey}:{storeKey}
  - Payment
  - Transaction
  - QuoteRequest
  - view_business_units:{projectKey}
  - view_associate_roles:{projectKey}
  - Permission
  - InvalidOperation
  - AssociateMissingPermission
  - ConcurrentModification
  - manage_associate_roles:{projectKey}
  - ViewMyOrders
  - ViewOthersOrders
  - view_quote_requests:{projectKey}
  - CreateMyQuoteRequestsFromMyCarts
  - CreateQuoteRequestsFromOthersCarts
  - UpdateMyQuoteRequests
  - UpdateOthersQuoteRequests
  - BusinessUnit
  - ApprovalRule
  - ApprovalRulePagedQueryResponse
  - ViewMyShoppingLists
  - ViewOthersShoppingLists
  - view_approval_rules:{projectKey}
  - ApprovalFlow
  - ApprovalFlowUpdateAction
  - manage_orders:{projectKey}
  - manage_orders:{projectKey}:{storeKey}
  - view_orders:{projectKey}
  - view_orders:{projectKey}:{storeKey}
  - view_payment_methods:{projectKey}
  - manage_payment_methods:{projectKey}
  - view_payments:{projectKey}
  - view_shopping_lists:{projectKey}
  - view_shopping_lists:{projectKey}:{storeKey}
  - manage_shopping_lists:{projectKey}
  - manage_shopping_lists:{projectKey}:{storeKey}
  - PaymentMethod
  - PaymentMethodPagedQueryResponse
  - PaymentMethodDraft
  - PaymentMethodUpdateAction
  - manage_payments:{projectKey}
  - manage_order_edits:{projectKey}
  - view_recurring_orders:{projectKey}
  - manage_recurring_orders:{projectKey}
  - view_shipping_methods:{projectKey}
  - manage_shipping_methods:{projectKey}
  - view_quote_requests:{projectKey}:{storeKey}
  - view_staged_quotes:{projectKey}
  - view_types:{projectKey}
  - manage_types:{projectKey}
  - view_quotes:{projectKey}
  - view_quotes:{projectKey}:{storeKey}
  - manage_extensions:{projectKey}
  - manage_subscriptions
  - view_messages:{projectKey}
  - manage_subscriptions:{projectKey}
  - view_audit_log:{projectKey}
  - ImportResponse
  - BusinessUnitImportRequest
  - CategoryImportRequest
  - CustomerImportRequest
  - DiscountCodeImportRequest
  - PriceImportRequest
  - InventoryImportRequest
  - ProductImportRequest
  - ProductDraftImportRequest
  - ImportContainers
  - ImportOperations
  - ImportSummaries
  - ProductTypeImportRequest
  - ProductVariantImportRequest
  - ProductVariantPatchRequest
  - ProductSelectionImportRequest
  - OrderImportRequest
  - OrderPatchImportRequest
  - StandalonePriceImportRequest
  - AuthProvider
  - NamedCredential
  - API Clients
  - Scopes
  - Token requests
  - OAuthClient
  - manage_project:{projectKey}
  - manage_connectors_deployments:{projectKey}
  - view_connectors_deployments:{projectKey}
  - CTP_CLIENT_ID
  - CTP_CLIENT_SECRET
  - CTP_SCOPE
  - OAuth
  - Access Token
  - OAuthToken
  - ClientCredentials
  - ClientBuilder
  - ApiRoot
  - HTTPAPIClient
  - ImportAPIClient
  - HistoryAPIClient
  - CheckoutAPIClient
client:
  base_url: https://api.{region}.commercetools.com/{projectKey}
  auth:
    type: oauth2
source_metadata: null
