resources:
- name: webhook
  endpoint:
    path: /api/v2/webhooks
    method: POST
    data_selector: null
    params: {}
- name: test_shop_webhook
  endpoint:
    path: /reference/test-shop-webhook
    method: null
    data_selector: null
    params: {}
- name: webhook_subscription
  endpoint:
    path: /api/v2/webhooks
    method: POST
    data_selector: ''
    params: {}
- name: test_shop_webhook
  endpoint:
    path: /reference/test-shop-webhook
    method: GET
    data_selector: ''
    params: {}
- name: subscribers
  endpoint:
    path: /api/v2/subscribers
    method: POST
    data_selector: null
    params: {}
- name: keywords
  endpoint:
    path: /api/v2/keywords/[keyword_id]
    method: GET
    data_selector: null
    params: {}
- name: subscribers
  endpoint:
    path: /api/v2/subscribers
    method: POST
    data_selector: subscribers
- name: keywords
  endpoint:
    path: /api/v2/keywords/[keyword_id]
    method: GET
    data_selector: Keyword
    params: {}
- name: subscribers
  endpoint:
    path: /api/v2/subscribers
    method: POST
    data_selector: subscriber
    params: {}
- name: subscribers
  endpoint:
    path: /api/v2/subscribers
    method: POST
    data_selector: data
    params: {}
notes:
- You need to use your private API token.
- Do not call the API from your frontend client.
- If you send too many requests in a short amount of time, you may run into `429`
  error responses.
- Webhook events are sent as HTTPS POST requests with a JSON payload.
- You need to implement security measures to verify incoming requests.
- Ensure you are using the correct JS types for the data passed to the events. In
  particular ensure that resource_id and variant_id are both numeric types and not
  strings.
- Ensure the requests sent to your endpoint are genuinely from Postscript by verifying
  the authenticity of incoming requests.
- Compliance in SMS is of the utmost importance and we work hard with our partners
  to ensure that we minimize legal risk for merchants.
- Ensure to prefix the API key with 'Bearer ' when using it in the Authorization header.
- The Postscript Back In Stock feature is designed to operate exclusively with Shopify's
  Online Store. It is not compatible with headless Shopify integrations at this time.
- Ensure compliance language is included when collecting subscriber information.
- Shops on non-enterprise plans can still generate API keys and use them with our
  Integration Partners.
- Integration Partners retain full API access, regardless of the shop's plan.
- We accept a wide range of phone number formats and are equipped to extract locality
  information from the formats provided.
- For optimal compatibility and accuracy, we recommend submitting phone numbers in
  the E.164 format.
- Bearer token should include a space after 'Bearer'.
- No, the process has been simplified in the V2 API.
- Unlike the V1 API, where you had to manually install triggers for each partner,
  the V2 API automates this process.
- Integration Partners must use their own Partner API authentication tokens.
errors:
- '429: Rate limit exceeded'
- 'You do not have permission to do that: Check your API key and permissions.'
- Errors can arise if a Partner incorrectly uses a Shop’s API auth token without including
  their own Partner auth token.
- 'You do not have permission to do that: Ensure you have ''Bearer '' before your
  private API key.'
- Error message related to the Shop’s plan limitations if a Partner incorrectly uses
  a Shop’s API auth token.
auth_info:
  mentioned_objects: []
client:
  base_url: https://api.postscript.io
  headers:
    Accept: application/json
    Content-Type: application/json
source_metadata: null
