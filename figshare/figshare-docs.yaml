resources:
- name: items
  endpoint:
    path: /items
    method: GET
    data_selector: data
    params: {}
- name: users
  endpoint:
    path: /users
    method: GET
    data_selector: data
    params: {}
- name: articles
  endpoint:
    path: /account/articles
    method: GET
    data_selector: articles
- name: files
  endpoint:
    path: /account/articles/{article_id}/files
    method: GET
    data_selector: files
- name: article_details
  endpoint:
    path: /v2/articles/{article_id}
    method: GET
    data_selector: metadata
- name: articles_search
  endpoint:
    path: /v2/articles/search
    method: GET
    data_selector: results
    params:
      search:
        order: published_date
        search_for: ':title: frog'
        page: 1
        page_size: 5
        order_direction: desc
- name: private_articles_list
  endpoint:
    path: /v2/account/articles
    method: GET
    data_selector: articles
- name: account_articles
  endpoint:
    path: /account/articles
    method: GET
    data_selector: records
    params:
      page: 1
      page_size: 10
- name: articles
  endpoint:
    path: /articles/{ITEM_ID}
    method: GET
    data_selector: metadata
- name: account_articles
  endpoint:
    path: /account/articles
    method: GET
    data_selector: items
    params:
      page: 1
      page_size: 50
- name: article_metadata
  endpoint:
    path: /account/articles/{id}
    method: GET
    data_selector: metadata
    params: {}
- name: article_views
  endpoint:
    path: /total/views/article/{id}
    method: GET
    data_selector: views
    params: {}
- name: article_downloads
  endpoint:
    path: /total/downloads/article/{id}
    method: GET
    data_selector: downloads
    params: {}
- name: articles
  endpoint:
    path: /articles
    method: GET
    data_selector: metadata
    params: {}
- name: account_articles
  endpoint:
    path: /account/articles
    method: GET
    data_selector: ''
    params:
      page: 1
      page_size: 10
- name: account_articles
  endpoint:
    path: /account/articles
    method: GET
    data_selector: items
    params:
      page: 1
      page_size: 50
- name: group_articles
  endpoint:
    path: /articles/search
    method: POST
    data_selector: records
    params:
      group: GRP_ID
      institution: INST_ID
- name: full_metadata
  endpoint:
    path: /account/articles/{id}
    method: GET
    data_selector: metadata
- name: total_views
  endpoint:
    path: /total/views/article/{id}
    method: GET
    data_selector: views
- name: total_downloads
  endpoint:
    path: /total/downloads/article/{id}
    method: GET
    data_selector: downloads
- name: article_files
  endpoint:
    path: /articles/{id}/files
    method: GET
    data_selector: file_metadata
- name: file_download
  endpoint:
    path: /file/download/{id}
    method: GET
- name: articles
  endpoint:
    path: /account/articles
    method: GET
    data_selector: articles
- name: file_upload
  endpoint:
    path: /account/articles/{article_id}/files
    method: POST
    data_selector: upload
- name: articles
  endpoint:
    path: /account/articles
    method: GET
    data_selector: data
- name: articles
  endpoint:
    path: /account/articles
    method: POST
    data_selector: records
- name: article_details
  endpoint:
    path: /v2/articles/{article_id}
    method: GET
    data_selector: metadata
- name: articles_search
  endpoint:
    path: /v2/articles/search
    method: GET
    data_selector: results
    params:
      order: published_date
      search_for: ':title: frog'
      page: 1
      page_size: 5
      order_direction: desc
- name: private_articles_list
  endpoint:
    path: /v2/account/articles
    method: GET
    data_selector: items
- name: articles
  endpoint:
    path: /articles
    method: GET
    data_selector: metadata
- name: private_articles
  endpoint:
    path: /private_articles
    method: GET
    data_selector: metadata
- name: account_articles
  endpoint:
    path: /account/articles
    method: GET
    data_selector: records
    params:
      page: 1
      page_size: 10
- name: articles
  endpoint:
    path: /account/articles
    method: GET
    data_selector: records
    params:
      page: 1
      page_size: 10
- name: metadata
  endpoint:
    path: /articles/{ITEM_ID}
    method: GET
    data_selector: metadata
    params: {}
- name: articles
  endpoint:
    path: /account/articles
    method: GET
    data_selector: items
    params:
      page_size: '50'
- name: articles
  endpoint:
    path: /articles
    method: GET
    data_selector: metadata
- name: account_articles
  endpoint:
    path: /account/articles
    method: GET
    data_selector: articles
    params:
      page: '1'
      page_size: '50'
- name: group_articles
  endpoint:
    path: /articles/search
    method: POST
    data_selector: articles
    params:
      group: GRP_ID
      institution: INST_ID
- name: item_metadata
  endpoint:
    path: /account/articles/{id}
    method: GET
    data_selector: metadata
- name: total_views
  endpoint:
    path: /total/views/article/{id}
    method: GET
    data_selector: totals
- name: total_downloads
  endpoint:
    path: /total/downloads/article/{id}
    method: GET
    data_selector: totals
- name: article_files
  endpoint:
    path: /articles/{id}/files
    method: GET
    data_selector: files
- name: account_articles
  endpoint:
    path: /account/articles
    method: GET
    data_selector: ''
    params:
      page: 1
      page_size: 10
- name: account_articles
  endpoint:
    path: /account/articles
    method: GET
    data_selector: items
    params:
      page: 1
      page_size: 50
- name: article_files
  endpoint:
    path: /articles/{id}/files
    method: GET
    data_selector: file_metadata
    params: {}
- name: total_views
  endpoint:
    path: /total/views/article/{id}
    method: GET
    data_selector: views
    params: {}
- name: total_downloads
  endpoint:
    path: /total/downloads/article/{id}
    method: GET
    data_selector: downloads
    params: {}
- name: account_articles
  endpoint:
    path: /account/articles
    method: GET
    data_selector: articles
- name: upload_file
  endpoint:
    path: /account/articles/{article_id}/files
    method: POST
    data_selector: file_upload
    params: {}
- name: article_upload
  endpoint:
    path: /account/articles
    method: POST
    data_selector: records
- name: articles
  endpoint:
    path: /articles
    method: GET
    data_selector: metadata
- name: account_articles
  endpoint:
    path: /account/articles
    method: GET
    data_selector: ''
    params:
      page: 1
      page_size: 10
- name: account_articles
  endpoint:
    path: /account/articles
    method: GET
    data_selector: items
- name: search_articles
  endpoint:
    path: /articles/search
    method: POST
    data_selector: records
    params:
      group: GRP_ID
      institution: INST_ID
- name: article_metadata
  endpoint:
    path: /account/articles/{id}
    method: GET
    data_selector: metadata
- name: total_views
  endpoint:
    path: /total/views/article/{id}
    method: GET
    data_selector: views
- name: total_downloads
  endpoint:
    path: /total/downloads/article/{id}
    method: GET
    data_selector: downloads
- name: article_files
  endpoint:
    path: /articles/{id}/files
    method: GET
    data_selector: files
- name: articles_search
  endpoint:
    path: /articles/search
    method: GET
- name: research_outputs
  endpoint:
    path: /research_outputs
    method: GET
    data_selector: data
notes:
- API rate limits apply.
- The process to upload files may seem complex but this is necessary to handle extremely
  large files.
- Authentication is required for any endpoint that retrieves or accepts private or
  institutional information.
- Requires setup of token for authorization.
- Supports retrieving multiple articles with pagination.
- Public metadata or files can be retrieved through the API without authentication.
- Group structures only apply to institutions and may be complex.
- You can collect up to 9,000 results.
- To use stage instance replace with 'https://api.figsh.com/v2'
- This uploads an existing DOI and so will only work if you have that enabled in your
  repository.
- It can take a minute or two for the link to show up in the file link area on the
  metadata entry page.
- Group structures apply to institutions; only returns items published in the specific
  group
- Any public metadata or files can be retrieved through the API without authentication.
- Group structures only apply to institutions and these structures may be complex.
- The download script will save files to folders named for the item id the files belong
  to.
- You cannot delete public items.
- Make sure the base url is for the token environment (e.g. stage vs production) and
  that you have Reviewer permissions.
- Stats from the institution scope require a separate password instead of your administrator
  token when requesting results from within the institution scope.
- Request these credentials through a support request (support@figshare.com).
- Figshare provides repository infrastructure for sharing and managing research outputs.
- Uploads an existing DOI and so will only work if you have that enabled in your repository.
- Remember that system ids differ between production and stage.
- If using Excel, save as CSV rather than CSV UTF-8.
- Every repository is set up differently and while the script should work for most,
  you may still run into issues.
- Stats from the institution scope require a separate password instead of your administrator
  token.
- Requires setup of connected app in Figshare.
- Some fields may return nulls depending on the output.
errors:
- '401 Unauthorized: Check API key.'
- 'HTTPError: Check the response content for error details.'
- '401 Unauthorized: Check token validity.'
- '404 Not Found: Ensure the item ID is correct.'
- '401 Unauthorized: Check token'
- 'REQUEST_LIMIT_EXCEEDED: Throttle API calls or reduce frequency'
- 'QUERY_TIMEOUT: Break down filters or add selectivity'
- '401 Unauthorized: Recheck OAuth scopes or token expiration'
- '401 Unauthorized: Recheck token or permissions'
- '401 Unauthorized: Recheck token or authentication method.'
- '401 Unauthorized: Recheck token validity'
- '201 Created: Successfully created the record.'
- Other status codes indicate failure.
- '401 Unauthorized: Check if the token is valid'
- '401 Unauthorized: Recheck token validity.'
- '404 Not Found: Check the article ID.'
- '204 No Content: The request was successful, but there is no content to send in
  the response.'
- '401 Unauthorized: Recheck token or permissions.'
- '404 Not Found: The specified resource does not exist.'
auth_info:
  mentioned_objects:
  - Personal Token
  - TOKEN
client:
  base_url: https://api.figshare.com/v2
  auth:
    type: apikey
    location: header
    header_name: Authorization
  headers:
    Accept: application/json
source_metadata: null
