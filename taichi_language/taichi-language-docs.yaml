resources:
- name: 直播地址
  endpoint:
    path: /api/live
    method: GET
    data_selector: data
    params: {}
- name: 课件
  endpoint:
    path: /api/material
    method: GET
    data_selector: materials
    params: {}
- name: 代码
  endpoint:
    path: /api/code
    method: GET
    data_selector: code_samples
    params: {}
- name: 答疑时间
  endpoint:
    path: /api/qna
    method: GET
    data_selector: qna_sessions
    params: {}
- name: Taichi Runtime Library
  endpoint:
    path: /api/Taichi
    method: GET
    data_selector: runtime
- name: cloth_simulation
  endpoint:
    path: /docs/cloth_simulation
    method: GET
    data_selector: records
    params: {}
- name: cloth_simulation
  endpoint:
    path: /docs/cloth_simulation
    method: GET
    data_selector: records
- name: torch_pad
  endpoint:
    path: /accelerate_pytorch/torch_pad
    method: GET
    data_selector: torch_pad
    params: {}
- name: ti_pad
  endpoint:
    path: /accelerate_pytorch/ti_pad
    method: GET
    data_selector: ti_pad
    params: {}
- name: kernel
  endpoint:
    path: /docs/kernel_function
    method: GET
    data_selector: kernels
    params: {}
- name: function
  endpoint:
    path: /docs/kernel_function
    method: GET
    data_selector: functions
    params: {}
- name: torch_pad
  endpoint:
    path: /docs/accelerate_pytorch
    method: GET
    data_selector: padding
    params: {}
- name: ti_pad
  endpoint:
    path: /docs/accelerate_pytorch
    method: GET
    data_selector: padding
    params: {}
- name: kernels_and_functions
  endpoint:
    path: /docs/kernel_function
    method: GET
    data_selector: records
- name: kernels_and_functions
  endpoint:
    path: /docs/kernel_function
    method: GET
    data_selector: records
    params: {}
- name: Primitive types
  endpoint:
    path: /docs/type
    method: GET
    data_selector: records
- name: Compound types
  endpoint:
    path: /docs/type
    method: GET
    data_selector: records
- name: scalar_field
  endpoint:
    path: /docs/field
    method: GET
    data_selector: fields
    params: {}
- name: vector_field
  endpoint:
    path: /docs/field
    method: GET
    data_selector: fields
    params: {}
- name: matrix_field
  endpoint:
    path: /docs/field
    method: GET
    data_selector: fields
    params: {}
- name: struct_field
  endpoint:
    path: /docs/field
    method: GET
    data_selector: fields
    params: {}
- name: fields
  endpoint:
    path: /docs/field
    method: GET
    data_selector: fields
    params: {}
- name: vector_field
  endpoint:
    path: /path/to/vector_field
    method: GET
    data_selector: records
- name: scalar_field
  endpoint:
    path: /path/to/scalar_field
    method: GET
    data_selector: records
- name: matrix_field
  endpoint:
    path: /path/to/matrix_field
    method: GET
    data_selector: records
- name: ndarray
  endpoint:
    path: /docs/ndarray
    method: GET
    data_selector: records
- name: ndarray
  endpoint:
    path: /docs/ndarray
    method: GET
    data_selector: data
- name: kernel
  endpoint:
    path: /docs/kernel
    method: GET
    data_selector: data
- name: pointer_snode
  endpoint:
    path: /docs/sparse/pointer
    method: GET
    data_selector: sparse_data_structures
    params: {}
- name: bitmasked_snode
  endpoint:
    path: /docs/sparse/bitmasked
    method: GET
    data_selector: sparse_data_structures
    params: {}
- name: create_and_display_window
  endpoint:
    path: /api/create_and_display_window
    method: GET
    data_selector: window_data
- name: close_window
  endpoint:
    path: /api/close_window
    method: POST
    data_selector: close_data
- name: window_creation
  endpoint:
    path: /gui/window
    method: GET
    data_selector: window
- name: event_handling
  endpoint:
    path: /gui/event
    method: GET
    data_selector: event
- name: export_images
  endpoint:
    path: /api/export/images
    method: POST
    data_selector: results
    params: {}
- name: export_videos
  endpoint:
    path: /api/export/videos
    method: POST
    data_selector: results
    params: {}
- name: export_ply_files
  endpoint:
    path: /api/export/ply
    method: POST
    data_selector: results
    params: {}
- name: window
  endpoint:
    path: /ui/window
    method: GET
    data_selector: window_data
    params: {}
- name: canvas
  endpoint:
    path: /ui/canvas
    method: GET
    data_selector: canvas_data
    params: {}
- name: scene
  endpoint:
    path: /ui/scene
    method: GET
    data_selector: scene_data
    params: {}
- name: ScopedProfiler
  endpoint:
    path: /docs/profiler/scoped
    method: GET
    data_selector: info
- name: KernelProfiler
  endpoint:
    path: /docs/profiler/kernel
    method: GET
    data_selector: info
- name: event
  endpoint:
    path: /get_events
    method: GET
    data_selector: events
    params: {}
- name: mouse_position
  endpoint:
    path: /get_cursor_pos
    method: GET
    data_selector: mouse
    params: {}
- name: key_pressed
  endpoint:
    path: /is_pressed
    method: GET
    data_selector: key_status
    params: {}
- name: save_image
  endpoint:
    path: /save_image
    method: POST
    data_selector: save_status
    params:
      file_name: frame.png
- name: export_images
  endpoint:
    path: /export/images
    method: POST
    data_selector: results
- name: export_videos
  endpoint:
    path: /export/videos
    method: POST
    data_selector: results
- name: export_ply
  endpoint:
    path: /export/ply
    method: POST
    data_selector: results
- name: Export Images
  endpoint:
    path: /export/images
    method: GET
    data_selector: results
- name: Export Videos
  endpoint:
    path: /export/videos
    method: GET
    data_selector: results
- name: Export PLY Files
  endpoint:
    path: /export/ply
    method: GET
    data_selector: results
- name: ScopedProfiler
  endpoint:
    path: /docs/profiler/scoped_profiler
    method: GET
    data_selector: results
- name: KernelProfiler
  endpoint:
    path: /docs/profiler/kernel_profiler
    method: GET
    data_selector: results
- name: C++ test
  endpoint:
    path: /tests/cpp/
    method: POST
    data_selector: tests
    params: {}
- name: unmap_memory
  endpoint:
    path: /function/unmap_memory
    method: EXPORT
    data_selector: void
- name: allocate_image
  endpoint:
    path: /function/allocate_image
    method: EXPORT
    data_selector: TiImage
- name: free_image
  endpoint:
    path: /function/free_image
    method: EXPORT
    data_selector: void
- name: copy_memory_device_to_device
  endpoint:
    path: /function/copy_memory_device_to_device
    method: EXPORT
    data_selector: void
- name: track_image_ext
  endpoint:
    path: /function/track_image
    method: EXPORT
    data_selector: void
- name: transition_image
  endpoint:
    path: /function/transition_image
    method: EXPORT
    data_selector: void
- name: launch_kernel
  endpoint:
    path: /function/launch_kernel
    method: EXPORT
    data_selector: void
- name: launch_compute_graph
  endpoint:
    path: /function/launch_compute_graph
    method: EXPORT
    data_selector: void
- name: flush
  endpoint:
    path: /function/flush
    method: EXPORT
    data_selector: void
- name: wait
  endpoint:
    path: /function/wait
    method: EXPORT
    data_selector: void
- name: load_aot_module
  endpoint:
    path: /function/load_aot_module
    method: EXPORT
    data_selector: TiAotModule
- name: create_aot_module
  endpoint:
    path: /function/create_aot_module
    method: EXPORT
    data_selector: TiAotModule
- name: destroy_aot_module
  endpoint:
    path: /function/destroy_aot_module
    method: EXPORT
    data_selector: void
- name: get_aot_module_kernel
  endpoint:
    path: /function/get_aot_module_kernel
    method: EXPORT
    data_selector: TiKernel
- name: get_aot_module_compute_graph
  endpoint:
    path: /function/get_aot_module_compute_graph
    method: EXPORT
    data_selector: TiComputeGraph
- name: TiVulkanRuntimeInteropInfo
  endpoint:
    path: /api/TiVulkanRuntimeInteropInfo
    method: GET
    data_selector: records
    params: {}
- name: TiVulkanMemoryInteropInfo
  endpoint:
    path: /api/TiVulkanMemoryInteropInfo
    method: GET
    data_selector: records
    params: {}
- name: TiVulkanImageInteropInfo
  endpoint:
    path: /api/TiVulkanImageInteropInfo
    method: GET
    data_selector: records
    params: {}
- name: ti_create_vulkan_runtime_ext
  endpoint:
    path: /api/ti_create_vulkan_runtime_ext
    method: POST
    data_selector: records
    params: {}
- name: ti_import_vulkan_runtime
  endpoint:
    path: /api/ti_import_vulkan_runtime
    method: POST
    data_selector: records
    params: {}
- name: ti_export_vulkan_runtime
  endpoint:
    path: /api/ti_export_vulkan_runtime
    method: POST
    data_selector: records
    params: {}
- name: ti_import_vulkan_memory
  endpoint:
    path: /api/ti_import_vulkan_memory
    method: POST
    data_selector: records
    params: {}
- name: ti_export_vulkan_memory
  endpoint:
    path: /api/ti_export_vulkan_memory
    method: POST
    data_selector: records
    params: {}
- name: ti_import_vulkan_image
  endpoint:
    path: /api/ti_import_vulkan_image
    method: POST
    data_selector: records
    params: {}
- name: ti_export_vulkan_image
  endpoint:
    path: /api/ti_export_vulkan_image
    method: POST
    data_selector: records
    params: {}
- name: test_log10
  endpoint:
    path: /tests/python/test_logarithm.py
    method: GET
    data_selector: tests
    params: {}
- name: test_atan2
  endpoint:
    path: /tests/python/test_atan2.py
    method: GET
    data_selector: tests
    params: {}
- name: Operators
  endpoint:
    path: /docs/operator
    method: GET
    data_selector: operators
    params: {}
- name: field
  endpoint:
    path: /api/field
    method: GET
    data_selector: fields
    params: {}
- name: kernel
  endpoint:
    path: /api/kernel
    method: GET
    data_selector: kernels
    params: {}
- name: GUI
  endpoint:
    path: /taichi.GUI
    method: GET
    data_selector: class
- name: Event
  endpoint:
    path: /taichi.GUI.Event
    method: GET
    data_selector: class
- name: EventFilter
  endpoint:
    path: /taichi.GUI.EventFilter
    method: GET
    data_selector: class
- name: WidgetValue
  endpoint:
    path: /taichi.GUI.WidgetValue
    method: GET
    data_selector: class
- name: atomic_add
  endpoint:
    path: /taichi/atomic_add
    method: GET
- name: atomic_and
  endpoint:
    path: /taichi/atomic_and
    method: GET
- name: atomic_max
  endpoint:
    path: /taichi/atomic_max
    method: GET
- name: atomic_min
  endpoint:
    path: /taichi/atomic_min
    method: GET
- name: atomic_or
  endpoint:
    path: /taichi/atomic_or
    method: GET
- name: atomic_sub
  endpoint:
    path: /taichi/atomic_sub
    method: GET
- name: atomic_xor
  endpoint:
    path: /taichi/atomic_xor
    method: GET
- name: axes
  endpoint:
    path: /taichi/axes
    method: GET
- name: bit_cast
  endpoint:
    path: /taichi/bit_cast
    method: GET
- name: bit_shr
  endpoint:
    path: /taichi/bit_shr
    method: GET
- name: block_local
  endpoint:
    path: /taichi/block_local
    method: GET
- name: cache_read_only
  endpoint:
    path: /taichi/cache_read_only
    method: GET
- name: cast
  endpoint:
    path: /taichi/cast
    method: GET
- name: ceil
  endpoint:
    path: /taichi/ceil
    method: GET
- name: cos
  endpoint:
    path: /taichi/cos
    method: GET
- name: cpu
  endpoint:
    path: /taichi/cpu
    method: GET
- name: cuda
  endpoint:
    path: /taichi/cuda
    method: GET
- name: data_oriented
  endpoint:
    path: /taichi/data_oriented
    method: GET
- name: dataclass
  endpoint:
    path: /taichi/dataclass
    method: GET
- name: deactivate
  endpoint:
    path: /taichi/deactivate
    method: GET
- name: deactivate_all_snodes
  endpoint:
    path: /taichi/deactivate_all_snodes
    method: GET
- name: dx11
  endpoint:
    path: /taichi/dx11
    method: GET
- name: dx12
  endpoint:
    path: /taichi/dx12
    method: GET
- name: eig
  endpoint:
    path: /taichi/eig
    method: GET
- name: exp
  endpoint:
    path: /taichi/exp
    method: GET
notes:
- 每堂课后设置丰富的体验作业，即学即用，感受酷炫的视觉效果
- 小白友好，每周答疑，真正手把手带你入门计算机图形学
- Uses OAuth2 with refresh token — requires setup of connected app in api
- Some objects like Contact may return nulls in deeply nested fields
- Taichi compiles and executes Taichi functions and kernels on the designated backend.
- For loops located at the outermost scope in a Taichi kernel are automatically parallelized.
- Taichi offers a flexible data container, known as *field*, and you can utilize indices
  to iterate over a field.
- There is no strong version compatibility enforced yet, so it's highly recommended
  to use the Taichi built from exactly the same commit.
- Use Taichi built from the same commit for compatibility.
- The actual execution time may vary depending on your machine, but we believe that
  the performance improvements you will see is comparable to ours.
- No strong version compatibility enforced yet, recommended to use Taichi built from
  the same commit.
- If you choose a GPU backend, for example ti.cuda, ensure that you have installed
  it on your system; otherwise, Taichi will raise an error.
- The GGUI we use for 3D rendering only supports CUDA and Vulkan, and x86 for now.
- If you choose a GPU backend, for example `ti.cuda`, ensure that you have installed
  it on your system; otherwise, Taichi will raise an error.
- The GGUI we use for 3D rendering only supports CUDA and Vulkan, and x86 for now.
  If you choose a different backend, consider switching the GGUI system we provide
  in the source code.
- The GGUI we use for 3D rendering only supports CUDA and Vulkan.
- 'GGUI supports rendering two types of 3D objects: triangle meshes and particles.'
- Taichi automatically runs the top-level for-loops in parallel
- Taichi takes in the PyTorch tensors directly to reuse allocated memory
- Kernels must be directly invoked by Python code.
- Kernels can only be called from the Python scope.
- Taichi provides finer control over parallelization and enables more 'granular' operations.
- Taichi runs the top-level for-loops in parallel.
- Functions decorated with @ti.kernel are known as Taichi kernels.
- Functions decorated with @ti.func are known as Taichi functions.
- Calling a Taichi function from within the native Python code results in a syntax
  error raised by Taichi.
- Type hinting in Taichi is mandatory for kernel arguments and return values.
- The numeric literals in Taichi's scope have default integer or floating-point types.
- Taichi fields do not support slicing.
- 'It is recommended that you keep your matrices small: 2x1, 3x3, and 4x4 matrices
  work fine. 32x6 is a bit too large.'
- Taichi only supports fields of dimensions ≤ 8.
- Slicing is not supported on ti.field.
- Operating on larger matrices (for example `32x128`) can lead to longer compilation
  time and poor performance.
- 'For performance reasons, it is recommended that you keep your matrices small: `2x1`,
  `3x3`, and `4x4` matrices work fine.'
- 'Backend compatibility: The LLVM-based backends (CPU/CUDA) offer the full functionality
  for performing computations on spatially sparse data structures.'
- Using sparse data structures on the Metal backend is now deprecated.
- Accessing elements of an ndarray from the Python scope can be convenient, but it
  can also result in the creation and launch of multiple small Taichi kernels.
- Only contiguous NumPy arrays and PyTorch tensors are supported.
- Dynamic SNode can only be used in the CPU and CUDA backends.
- A dynamic SNode must have one axis only, and the axis must be the last axis.
- No other SNodes can be placed under a dynamic SNode. In other words, a dynamic SNode
  must be directly placed with a field.
- Along the path from a dynamic SNode to the root of the SNode tree, other SNodes
  must not have the same axis as the dynamic SNode.
- No other SNodes can be placed under a dynamic SNode.
- ti.ad.FwdMode() automatically clears the dual field of loss.
- 'ti.ad.FwdMode() supports multiple inputs and outputs: param can be an N-D field,
  loss can be an individual N-D field or a list of N-D fields.'
- Inheritance of Taichi dataclasses is not supported.
- While it is convenient and recommended to associate functions with a struct defined
  via @ti.dataclass, ti.types.struct can serve the same purpose with the help of the
  __struct_methods argument.
- ti.ad.FwdMode() supports multiple inputs and outputs.
- For now, quantized data types are supported only on the CPU and CUDA backends.
- The Data-Oriented property is automatically carried along with the Python class
  inheritance.
- If you choose Vulkan as backend, ensure that you install the Vulkan environment.
- While it is convenient and recommended to associate functions with a struct defined
  via `@ti.dataclass`, `ti.types.struct` can serve the same purpose with the help
  of the `__struct_methods` argument.
- It is recommended that you familiarize yourself with GGUI through the examples in
  examples/ggui_examples.
- Quantized data types are supported only on the CPU and CUDA backends.
- Taichi offers functions that help you export visual results to images or videos.
- Call `gui.show()` inside a `while` loop. Otherwise, the window would flash once
  and disappear.
- Taichi offers functions to export results to images or videos.
- Uses GPU for rendering, making it much faster to render 3D scenes
- It is recommended that you familiarize yourself with GGUI through the examples in
  `examples/ggui_examples`
- ScopedProfiler is a C++ class in Taichi.
- KernelProfiler supports CPU and CUDA only.
- Printing is not supported on the macOS Vulkan backend.
- Must call save_image() before calling show()
- Off-screen rendering requires show_window set to False
- Always unset sys.tracebacklimit and submit the full traceback messages when filing
  an issue with us.
- The video export utilities depend on ffmpeg.
- The sparse matrix feature is still under development.
- The sparse matrix data type on the CPU backend only supports f32 and f64.
- The sparse matrix data type on the CUDA backend only supports f32.
- Taichi supports saving to png, jpg, and bmp formats.
- The video export utilities of Taichi depend on ffmpeg.
- Be pragmatic & no overkills
- Juxtapose pros and cons
- Communicate effectively
- Taichi kernels automatically parallelize for-loops in the outermost scope.
- Specifying a proper block_dim might result in a nearly 3x speed gain.
- Clang warns if a C++ pointer's nullability was not explicitly marked (__nonnull,
  nullable, ...).
- Nullability seems to be a clang-specific feature; thus we disable this warning.
- By evaluating 'constexpr', compiler throws a warning for functions known to be dead
  at compile time.
- However, some of these 'constexpr' specifiers are debug flags and will be manually
  enabled upon debugging.
- Installation instructions vary depending on which operating system (OS) you are
  using.
- A comprehensive build environment preparation script (aka. `build.py` or `ti-build`)
  has been introduced.
- Default logging level is info
- You may override the default logging level by setting the environment variable like
  export TI_LOG_LEVEL=warn
- Some tests that require sparse feature which is not supported by OpenGL
- If you want to use CUDA and Taichi's GGUI system at the same time on a machine with
  multiple GPU cards, ensure that CUDA_VISIBLE_DEVICES matches TI_VISIBLE_DEVICE.
  In principle, CUDA_VISIBLE_DEVICES and TI_VISIBLE_DEVICE should point to the same
  GPU device identified with UUID. Use nvidia-smi -L to retrieve the details of your
  GPU devices.
- For now, determinant() and inverse() only works in Taichi-scope, and the size of
  the matrix must be 1x1, 2x2, 3x3 or 4x4.
- Currently, Taichi only supports Python 3.7/3.8/3.9/3.10 (64-bit).
- Taichi is more friendly to Non-C users because it can achieve significant performance
  improvement with pure valid Python code.
- 'If Taichi crashes and reports /usr/lib/libstdc++.so.6: version `CXXABI_1.3.11''
  not found, you might be using Ubuntu 16.04.'
- If Taichi crashes and reports `ImportError` on Windows, please consider installing
  Microsoft Visual C++ Redistributable.
- If pip could not find a satisfying package, make sure you're using Python version
  3.7/3.8/3.9/3.10.
- If Taichi crashes with CUDA_ERROR_INVALID_DEVICE, this might be because your NVIDIA
  GPU is pre-Pascal.
- If Taichi exits with message 'Out of CUDA pre-allocated memory', this usually happens
  when you are using sparse data structures that need dynamic GPU memory allocation.
- If you find other CUDA problems, add export TI_ENABLE_CUDA=0 to your ~/.bashrc.
- If Taichi crashes with a stack backtrace containing a line of glfwCreateWindow,
  it is likely because you are running Taichi on a (virtual) machine with an old OpenGL
  API.
- During the installation, the downloading process is interrupted because of HTTPSConnection
  error. You can try installing Taichi from a mirror source.
- Clang warns if a C++ pointer's nullability was not explicitly marked (__nonnull,
  nullable, ...). Nullability seems to be a clang-specific feature; thus we disable
  this warning.
- By evaluating "constexpr", compiler throws a warning for functions known to be dead
  at compile time. However, some of these "constexpr" specifiers are debug flags and
  will be manually enabled upon debugging.
- With the release of Taichi v1.6.0, a comprehensive build environment preparation
  script (aka. `build.py` or `ti-build`) has been introduced.
- The matrix dimension should be less than or equal to 4.
- Determinants of matrices with sizes >= 5 are not supported.
- Inversions of matrices with sizes >= 5 are not supported.
- See Installation Troubleshooting for issues that may share with the end-user installation.
- The list of currently available extensions is [‘sparse’, ‘quant’, ‘mesh’, ‘quant_basic’,
  ‘data64’, ‘adstack’, ‘bls’, ‘assertion’, ‘extfunc’].
- Some tests may require specific backend configurations.
- Assert statements are currently supported on the CPU, CUDA, and Metal backends.
- Assert statements only work in debug mode (when `debug=True` is set in the arguments
  of `ti.init()`), otherwise they are equivalent to no-op.
- ti.static can also be used in combination with if (compile-time branching) and for
  (compile-time unrolling)
- Uses environment variables to customize runtime settings.
- 'If Taichi crashes and reports /usr/lib/libstdc++.so.6: version `CXXABI_1.3.11''
  not found: You might be using Ubuntu 16.04.'
- If Taichi crashes and reports `ImportError` on Windows. Please consider installing
  Microsoft Visual C++ Redistributable.
- If Taichi crashes with CUDA errors, this might be because your NVIDIA GPU is pre-Pascal,
  and it has limited support for Unified Memory.
- 'If you find other CUDA problems: add export TI_ENABLE_CUDA=0 to your ~/.bashrc.'
errors:
- Performance may vary depending on implementation and GPU setup
- 'Syntax error: Only one return value is allowed'
- 'Error: multiple return statements'
- 'Syntax error: Calling a Taichi function from within the native Python code.'
- seed is required if param is not a scalar field
- 'TaichiAssertionError: Accessing elements from a field of shape with invalid indices.'
- 'TaichiAssertionError: Thrown when assertion fails at runtime.'
- 'TaichiCompilationError: Base class for all compilation exceptions.'
- 'TaichiNameError: Thrown when an undefine name is found during compilation.'
- 'TaichiRuntimeError: Thrown when the compiled program cannot be executed due to
  unspecified reasons.'
- 'TaichiRuntimeTypeError: Thrown when the compiled program cannot be executed due
  to unspecified reasons.'
- 'TaichiSyntaxError: Thrown when a syntax error is found during compilation.'
- 'TaichiTypeError: Thrown when a type mismatch is found during compilation.'
- 'REQUEST_LIMIT_EXCEEDED: Throttle API calls or reduce frequency'
- 'QUERY_TIMEOUT: Break down filters or add selectivity'
- '401 Unauthorized: Recheck OAuth scopes or token expiration'
auth_info:
  mentioned_objects: []
client:
  base_url: https://docs.taichi-lang.org
source_metadata: null
