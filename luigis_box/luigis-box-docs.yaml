resources:
- name: autocomplete_results
  endpoint:
    path: /autocomplete/v2
    method: GET
    params:
      tracker_id: identifier of your site within Luigi's Box
      q: user input
      type: comma separated list of required types and their quantity
- name: autocomplete
  endpoint:
    path: /autocomplete/v2
    method: GET
    data_selector: hits
    params:
      tracker_id: 1234-5678
- name: Content Updates API
  endpoint:
    path: /indexing/api/v1/content_update.html
    method: GET
- name: Content Export API
  endpoint:
    path: /indexing/api/v1/export.html
    method: GET
- name: events
  endpoint:
    path: /analytics/api
    method: POST
    data_selector: event
- name: transactions
  endpoint:
    path: /v1/interactions/<TRACKER_ID>/files
    method: POST
- name: autocomplete
  endpoint:
    path: /autocomplete/api.html
    method: GET
    data_selector: results
- name: item
  endpoint:
    path: /autocomplete/item
    method: GET
    data_selector: items
- name: category
  endpoint:
    path: /autocomplete/category
    method: GET
    data_selector: categories
- name: autocomplete
  endpoint:
    path: /autocomplete/api.html
    method: GET
    data_selector: results
- name: item
  endpoint:
    path: /autocomplete/item
    method: GET
- name: category
  endpoint:
    path: /autocomplete/category
    method: GET
- name: top_items
  endpoint:
    path: /v1/top_items
    method: GET
    data_selector: items
    params: {}
- name: top_items
  endpoint:
    path: /v1/top_items
    method: GET
    params: {}
- name: personalized_top_items
  endpoint:
    path: /v1/personalized_top_items
    method: GET
    params: {}
- name: trending_queries
  endpoint:
    path: /v2/trending_queries
    method: GET
    params:
      tracker_id: Identifier of your site within Luigi's Box
- name: trending_queries
  endpoint:
    path: /v2/trending_queries
    method: GET
    params:
      tracker_id: 1234-5678
- name: Search API
  endpoint:
    path: /search/api.html
    method: GET
    data_selector: results
- name: Search.js
  endpoint:
    path: /search/search_js.html
    method: GET
    data_selector: components
- name: search
  endpoint:
    path: /search
    method: GET
    params:
      q: User input - query. Optional, if you do not send `q` parameter, the API will
        only apply filters (`f[]` parameter). This is useful for generating listing
        pages.
      tracker_id: Identifier of your site within Luigi's Box.
- name: search_results
  endpoint:
    path: /search
    method: GET
    data_selector: results.hits
    params: {}
- name: facet_value_search
  endpoint:
    path: /v1/facet_value
    method: GET
    params:
      tracker_id: your_tracker_id
      facet_q: user_input
      facets: name_of_facet
- name: Product Listing API
  endpoint:
    path: /plp/api.html
    method: GET
- name: category_listing
  endpoint:
    path: /search
    method: GET
    data_selector: products
    params:
      f[]: category:T-shirts
- name: product_listing
  endpoint:
    path: /search
    method: GET
    data_selector: records
    params:
      tracker_id: 179075-204259
      plp: category
      f[]:
      - category:Kalimbas
      - type:product
- name: Recommender API
  endpoint:
    path: /recommendations/api.html
    method: GET
- name: Recommendation Batch Publisher
  endpoint:
    path: /recommendations/recommendation_batch_publisher.html
    method: GET
- name: basket-similar
  endpoint:
    path: /recommendations/basket-similar
    method: GET
- name: basket-people-also-buy
  endpoint:
    path: /recommendations/basket-people-also-buy
    method: GET
- name: recommender_ui
  endpoint:
    path: /recco.js
    method: GET
    data_selector: TrackerId
    params: {}
- name: recommendations
  endpoint:
    path: /v1/recommend
    method: POST
- name: get_recommendations
  endpoint:
    path: /get-recommendations
    method: POST
- name: transactions
  endpoint:
    path: /analytics/past_transactions_import.html
    method: POST
- name: search
  endpoint:
    path: /search
    method: GET
    data_selector: results.hits
    params:
      q: query
      f[]: type:item
      facets: price_amount,category
- name: search
  endpoint:
    path: /search
    method: GET
    data_selector: results
- name: product_listing
  endpoint:
    path: /search
    method: GET
    data_selector: results
    params:
      f[]: category_id:<category_id>
      plp: category_id
      facets: price_amount,category
- name: search
  endpoint:
    path: /search/api.html
    method: GET
- name: autocomplete
  endpoint:
    path: /autocomplete/api.html
    method: GET
- name: search
  endpoint:
    path: /search/api.html
    method: GET
- name: autocomplete
  endpoint:
    path: /autocomplete/api.html
    method: GET
- name: color
  endpoint:
    path: /facets/color
    method: GET
    data_selector: facets
- name: color_with_hex
  endpoint:
    path: /facets/color_with_hex
    method: GET
    data_selector: facets
- name: services
  endpoint:
    path: /lbx/requirements/
    method: GET
- name: woocommerce
  endpoint:
    path: /woocommerce/rest-api
    method: GET
    data_selector: records
    params: {}
- name: prestashop
  endpoint:
    path: /prestashop/api
    method: GET
    data_selector: records
    params: {}
- name: commercetools
  endpoint:
    path: /commercetools/api
    method: GET
    data_selector: records
    params: {}
- name: idosell
  endpoint:
    path: /idosell/api
    method: GET
    data_selector: records
    params: {}
- name: bigcommerce
  endpoint:
    path: /bigcommerce/api
    method: GET
    data_selector: records
    params: {}
- name: page_load_events
  endpoint:
    path: /lbx-script
    method: POST
    data_selector: event
    params: {}
- name: product_listing
  endpoint:
    path: /plp/api.html
    method: GET
- name: pricing
  endpoint:
    path: /api/pricing
    method: GET
    data_selector: ''
    params:
      products: 2342,2343,4525
- name: pricing
  endpoint:
    path: /api/pricing
    method: GET
    data_selector: response
    params:
      products: 2342,2343,4525
- name: product_pricing
  endpoint:
    path: /indexing/api/v1/content_update.html
    method: POST
    data_selector: fields
notes:
- This endpoint requires no authentication
- The endpoint is cached internally and it may take some time for changes to propagate.
- Analytics should be the first thing you integrate even before you start to integrate
  the actual product discovery services.
- Depends on the specific HTML structure, it can and will break after redesigns.
- Object identities must be unique across all types.
- Object identities should be immutable.
- The tracking script is unique for your domain.
- If you want to track different domains, contact us for separate tracking scripts.
- We recommend that you insert the script tag inside the <head> element in your HTML
  code.
- We are transparent about our incidents. You can find the system status at the Luigi's
  Box status page at https://www.luigisboxstatus.com/
- Get started with Luigi's Box by following our step-by-step guides.
- Proper data modeling is the single most important factor for achieving high-quality
  search results and recommendations.
- 'Searchable by default: Every field you send is automatically searchable.'
- 'Hidden fields: To index an attribute for internal use (like for ranking) but prevent
  it from appearing in public API responses, prefix its name with an underscore (e.g.,
  _margin).'
- 'Arrays by default: In API responses, all field values are returned as arrays, even
  if you indexed a single scalar value. This simplifies frontend development by eliminating
  the need to check the data type.'
- Work in a separate environment. Avoid using your production site for testing. Instead,
  create a new site within the application and generate API keys.
- Analyze the existing data structure. You can either review the data in the Catalog
  Browser section of the Luigi’s Box app or make a search request to view the API
  output.
- Ignore automatically derived attributes. There is no need to explicitly index these
  attributes, as they will be derived from the raw data you are indexing.
- Index data to the new index. Use the tracker_id of the site created in step 1, and
  update your frontend or backend code to request data from this new index by changing
  the tracker_id.
- Switch to API indexing. Once you’ve verified the new indexing setup and are confident
  that your integration will function as intended after the switch, disable data processing
  via feeds and start indexing through the API.
- Events must be sent independently to be recorded.
- If you use Luigi's Box frontend libraries, they handle sending these analytics events
  automatically.
- To ease the debugging of analytics events you can use the Session explorer screen
  in the Luigi's Box application.
- This screen shows a real-time overview of all sessions which are in-progress and
  not yet flushed to Luigi's Box analytics.
- Data uploaded into API are used for up to 52 weeks.
- The size of any uploaded file cannot be larger than 1 GB.
- An uploaded file must fully transmit within 10 minutes.
- Autocomplete endpoint is cached internally, may take up to 5 minutes for changes
  to show.
- Luigi's Box autocomplete widget is compatible with all modern browsers.
- Mootools is overriding a native `Function.prototype.bind` function in an incompatible
  way.
- The widget uses autocomplete endpoint which is cached internally. If you are using
  this widget to check your data after you've issued a content update, you might need
  to wait up to 5 minutes for the recent changes to show up.
- Placement must be defined for all types if used for one of the Types.
- When autocomplete widget renders, fire an XHR request to your pricing API and use
  the result to replace the loaders with per-customer prices.
- Integration is offered via a frontend JavaScript library or a backend API.
- Using variants makes sense in the cases where there is a visual difference between
  the variants.
- To avoid increasing latencies, we recommend to keep the number of variants per product
  below 10 on average.
- Search API response will include data related to banner campaigns set up in the
  application.
- You can only specify one facet.
- The facet_q parameter only works with this endpoint.
- Uses batch mode for multiple recommenders on one page
- Requires unique Name for each recommender
- Recco.js is a self-hosted JavaScript library which can be used to rapidly build
  an interactive, single-page-application user interface around the Luigi’s Box Recommender
  API.
- To ensure accurate price collection in situations where the standard price_amount
  attribute is not available, utilize the PostponeDataCollection method.
- Upon activation, it employs an emitAnalyticsEventFn callback function passed to
  the onDone function.
- The recommendation endpoint is publicly available and requires no authentication.
- Total hits can be accessed via the total_hits attribute in the API response.
- Emit a JavaScript event 'lbx:page:load' for every page load in Single page applications.
- Adding products to cart is heavily dependent on the specifics of your ecommerce
  store technical solution.
- JavaScript listeners must be set up as 'live listeners' and handle product tiles
  which are added dynamically.
- If you are providing us with an API endpoint, and that API lives on another domain
  or a subdomain than the main website, then you will need to provide CORS headers.
- 'Using withCredentials: true in the request has an impact on the CORS headers that
  you need to set.'
- Recommenders require wrappers to maintain user experience and avoid layout shifts.
- Each wrapper must have a unique id and a height set.
- To avoid unexpected breakage, you can mark the searchboxes with a CSS class dedicated
  to Luigi's Box.
- If at any point in the future you change the CSS classes for the searchbox, the
  integration will break.
- If you have relatively small number (less than 20) of pricing levels, we can use
  a simpler solution than the pricing API.
- CORS headers need to be set if the API lives on another domain or subdomain.
errors:
- '200: Data were successfully uploaded.'
- Error if file exceeds 1 GB or takes longer than 10 minutes to upload.
- 'REQUEST_LIMIT_EXCEEDED: Throttle API calls or reduce frequency'
- 'QUERY_TIMEOUT: Break down filters or add selectivity'
- '401 Unauthorized: Recheck OAuth scopes or token expiration'
- '400 Bad Request: facet_q The request contained zero or more than one facet. Please
  specify one and only one facet with this type of request.'
- '400 Bad Request: Check query parameters'
- '401 Unauthorized: Invalid API key or token'
- '404 Not Found: Endpoint does not exist'
- wildcard mode is not compatible with the credentials mode
- 'Access-Control-Allow-Origin: * is not compatible with credentials mode.'
auth_info:
  mentioned_objects: []
client:
  base_url: https://live.luigisbox.com
  headers:
    Accept: application/json
source_metadata: null
