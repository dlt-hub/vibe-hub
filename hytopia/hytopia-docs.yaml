resources:
- name: default_assets
  endpoint:
    path: /assets/default
    method: GET
    data_selector: assets
- name: assets
  endpoint:
    path: /assets
    method: GET
    data_selector: assets
    params: {}
- name: audio
  endpoint:
    path: /sdk-guides/audio-and-sfx
    method: GET
    data_selector: audio
    params: {}
- name: default_assets
  endpoint:
    path: /assets/default
    method: GET
    data_selector: assets
- name: assets
  endpoint:
    path: /assets
    method: GET
- name: audio_instances
  endpoint:
    path: /audioInstances
    method: GET
- name: entity_attached_audios
  endpoint:
    path: /entityAttachedAudios
    method: GET
- name: looped_audios
  endpoint:
    path: /loopedAudios
    method: GET
- name: oneshot_audios
  endpoint:
    path: /oneshotAudios
    method: GET
- name: audio
  endpoint:
    path: /audio
    method: GET
    data_selector: audios
- name: BlockType
  endpoint:
    path: /sdk-guides/blocks-and-chunks/block-types
    method: GET
    data_selector: blockTypes
- name: BlockTypeRegistry
  endpoint:
    path: /sdk-guides/blocks-and-chunks/block-type-registry
    method: GET
    data_selector: blockTypeRegistry
- name: Chunk
  endpoint:
    path: /sdk-guides/blocks-and-chunks/chunks
    method: GET
    data_selector: chunks
- name: ChunkLattice
  endpoint:
    path: /sdk-guides/blocks-and-chunks/chunk-lattice
    method: GET
    data_selector: chunkLattice
- name: block
  endpoint:
    path: /blocks
    method: POST
    data_selector: block
    params: {}
- name: chunk
  endpoint:
    path: /chunks
    method: POST
    data_selector: chunk
    params: {}
- name: BlockType
  endpoint:
    path: /blocktypes
    method: POST
    data_selector: blockTypes
    params: {}
- name: BlockTypes
  endpoint:
    path: /api/blocktypes
    method: POST
    data_selector: blockTypes
    params: {}
- name: blockTypeRegistry
  endpoint:
    path: /blockTypeRegistry
    method: GET
    data_selector: blockTypes
    params: {}
- name: chunks
  endpoint:
    path: /chunks
    method: GET
    data_selector: data
    params: {}
- name: block_type
  endpoint:
    path: /world/blockTypeRegistry
    method: GET
    data_selector: blockTypes
    params: {}
- name: Chunk
  endpoint:
    path: /chunks
    method: GET
    data_selector: chunks
    params: {}
- name: chunk
  endpoint:
    path: /chunkLattice
    method: GET
    data_selector: chunks
- name: chat_messages
  endpoint:
    path: /chat/messages
    method: POST
    data_selector: messages
- name: chat_commands
  endpoint:
    path: /chat/commands
    method: POST
    data_selector: commands
- name: getAllChunks
  endpoint:
    path: /world/chunkLattice/getAllChunks
    method: GET
    data_selector: chunks
- name: getBlock
  endpoint:
    path: /world/chunkLattice/getBlock
    method: GET
    data_selector: blockTypeId
- name: getChunk
  endpoint:
    path: /world/chunkLattice/getChunk
    method: GET
    data_selector: chunk
- name: hasBlock
  endpoint:
    path: /world/chunkLattice/hasBlock
    method: GET
    data_selector: hasBlock
- name: hasChunk
  endpoint:
    path: /world/chunkLattice/hasChunk
    method: GET
    data_selector: hasChunk
- name: setBlock
  endpoint:
    path: /world/chunkLattice/setBlock
    method: POST
    data_selector: result
- name: ChatManager
  endpoint:
    path: /api/chat
    method: POST
    data_selector: data
    params: {}
- name: Default Player Entity Controller
  endpoint:
    path: /api/entity/defaultplayer
    method: GET
    data_selector: controller
    params: {}
- name: Simple Entity Controller
  endpoint:
    path: /api/entity/simple
    method: GET
    data_selector: controller
    params: {}
- name: entity_manager
  endpoint:
    path: /entityManager
    method: GET
- name: model_entities
  endpoint:
    path: /api/model_entities
    method: GET
    data_selector: models
    params: {}
- name: PlayerEntity
  endpoint:
    path: /player/entity
    method: POST
    data_selector: entity
    params: {}
- name: entity_controller
  endpoint:
    path: /sdk-guides/entities/entity-controllers
    method: GET
    data_selector: entityControllers
    params: {}
- name: player_inputs
  endpoint:
    path: /api/v1/player/inputs
    method: GET
    data_selector: inputs
    params: {}
- name: all_spawned_entities
  endpoint:
    path: /entities/all
    method: GET
    data_selector: entities
    params: {}
- name: all_player_entities
  endpoint:
    path: /entities/player
    method: GET
    data_selector: entities
    params: {}
- name: player_entities_by_player
  endpoint:
    path: /entities/player/{player_id}
    method: GET
    data_selector: entities
    params: {}
- name: entities_by_tag
  endpoint:
    path: /entities/tag/{tag}
    method: GET
    data_selector: entities
    params: {}
- name: entities_by_tag_substring
  endpoint:
    path: /entities/tag/substring/{substring}
    method: GET
    data_selector: entities
    params: {}
- name: model_entities
  endpoint:
    path: /model_entities
    method: GET
    data_selector: entities
- name: ambient_light
  endpoint:
    path: /sdk-guides/lighting/ambient-light
    method: GET
    data_selector: ambient_light
    params: {}
- name: light_manager
  endpoint:
    path: /sdk-guides/lighting/light-manager
    method: GET
    data_selector: light_manager
    params: {}
- name: point_lights
  endpoint:
    path: /sdk-guides/lighting/point-lights
    method: GET
    data_selector: point_lights
    params: {}
- name: spot_lights
  endpoint:
    path: /sdk-guides/lighting/spot-lights
    method: GET
    data_selector: spot_lights
    params: {}
- name: sun_light
  endpoint:
    path: /sdk-guides/lighting/sun-light-directional
    method: GET
    data_selector: sun_light
    params: {}
- name: PlayerEntity
  endpoint:
    path: /PlayerEntity
    method: GET
    data_selector: records
- name: DefaultPlayerEntity
  endpoint:
    path: /DefaultPlayerEntity
    method: GET
    data_selector: records
- name: ambient_light
  endpoint:
    path: /api/ambient_light
    method: GET
    data_selector: ambientLight
- name: light_manager
  endpoint:
    path: /lightManager
    method: GET
    data_selector: lights
    params: {}
- name: player_inputs
  endpoint:
    path: /api/player/inputs
    method: GET
    data_selector: inputs
    params: {}
- name: Light
  endpoint:
    path: /server.light
    method: GET
    data_selector: Light
    params: {}
- name: spot_light
  endpoint:
    path: /sdk-guides/lighting/spot-lights
    method: GET
    data_selector: spot_lights
    params: {}
- name: ambient_light
  endpoint:
    path: /sdk-guides/lighting/ambient-light
    method: GET
- name: light_manager
  endpoint:
    path: /sdk-guides/lighting/light-manager
    method: GET
- name: point_lights
  endpoint:
    path: /sdk-guides/lighting/point-lights
    method: GET
- name: spot_lights
  endpoint:
    path: /sdk-guides/lighting/spot-lights
    method: GET
- name: sun_light
  endpoint:
    path: /sdk-guides/lighting/sun-light-directional
    method: GET
- name: players
  endpoint:
    path: /sdk-guides/players
    method: GET
    data_selector: players
    params: {}
- name: ambient_light
  endpoint:
    path: /sdk-guides/lighting/ambient-light
    method: GET
    data_selector: ambient_light_data
    params: {}
- name: DefaultPlayerEntity
  endpoint:
    path: /sdk-guides/entities/defaultplayerentity
    method: GET
    data_selector: cosmeticHiddenSlots
    params: {}
- name: light_instances
  endpoint:
    path: /lightManager
    method: GET
    data_selector: lights
- name: entity_attached_lights
  endpoint:
    path: /lightManager/entityAttachedLights
    method: GET
    data_selector: attachedLights
- name: connected_players
  endpoint:
    path: /players/connected
    method: GET
    data_selector: connectedPlayers
- name: player_by_username
  endpoint:
    path: /players/username
    method: GET
    data_selector: player
    params:
      username: someUsername
- name: connected_players_by_world
  endpoint:
    path: /players/world
    method: GET
    data_selector: connectedPlayersByWorld
    params:
      world: someWorld
- name: light
  endpoint:
    path: /lights
    method: POST
    data_selector: light
    params: {}
- name: persisted_player_data
  endpoint:
    path: /sdk-guides/players/persisted-player-data
    method: GET
    data_selector: playerData
- name: light
  endpoint:
    path: /lights
    method: POST
    data_selector: light
    params: {}
- name: player
  endpoint:
    path: /sdk-guides/players
    method: GET
    data_selector: players
    params: {}
- name: collider_options
  endpoint:
    path: /sdk-guides/physics/colliders
    method: GET
    data_selector: ColliderOptions
    params: {}
- name: DefaultPlayerEntity
  endpoint:
    path: /sdk-guides/entities/defaultplayerentity
    method: GET
    data_selector: records
    params: {}
- name: connected_players
  endpoint:
    path: /getConnectedPlayers
    method: GET
    data_selector: players
- name: connected_player_by_username
  endpoint:
    path: /getConnectedPlayerByUsername
    method: GET
    data_selector: player
- name: connected_players_by_world
  endpoint:
    path: /getConnectedPlayersByWorld
    method: GET
    data_selector: players
- name: RigidBody
  endpoint:
    path: /rigid-bodies
    method: GET
    data_selector: rigidBodies
- name: Entity
  endpoint:
    path: /entities
    method: GET
    data_selector: entities
- name: skills_panel
  endpoint:
    path: /ui/index.html
    method: GET
    data_selector: skills
- name: collider_options
  endpoint:
    path: /sdk-guides/physics/colliders
    method: GET
    data_selector: collider_options
    params: {}
- name: player_ui
  endpoint:
    path: /player/ui
    method: GET
    data_selector: data
    params: {}
- name: entity
  endpoint:
    path: /models/npcs/spider.gltf
    method: POST
    data_selector: colliders
    params: {}
- name: block_type
  endpoint:
    path: /blocks/dirt.png
    method: POST
    data_selector: customColliderOptions
    params: {}
- name: standalone_collider
  endpoint:
    path: /colliders
    method: POST
    data_selector: onCollision
    params: {}
- name: sensor_collider
  endpoint:
    path: /sensor/colliders
    method: POST
    data_selector: isSensor
    params: {}
- name: scene_ui
  endpoint:
    path: /scene/ui
    method: GET
    data_selector: loadedSceneUIs
    params: {}
- name: worlds
  endpoint:
    path: /api/worlds
    method: GET
    data_selector: worlds
    params: {}
- name: map_data
  endpoint:
    path: /sdk-guides/worlds/map-data-format
    method: GET
    data_selector: blocks
- name: RigidBody
  endpoint:
    path: /sdk-guides/physics/rigid-bodies
    method: GET
    data_selector: RigidBodyOptions
    params: {}
- name: heavyBlock
  endpoint:
    path: heavyBlock
    method: POST
    data_selector: rigidBodyOptions
    params: {}
- name: playerEntity
  endpoint:
    path: playerEntity
    method: POST
    data_selector: rigidBodyOptions
    params: {}
- name: spinningBlock
  endpoint:
    path: spinningBlock
    method: POST
    data_selector: rigidBodyOptions
    params: {}
- name: blockPlatform
  endpoint:
    path: blockPlatform
    method: POST
    data_selector: rigidBodyOptions
    params: {}
- name: cow
  endpoint:
    path: cow
    method: POST
    data_selector: rigidBodyOptions
    params: {}
- name: skills_ui
  endpoint:
    path: ui/index.html
    method: GET
- name: player_ui
  endpoint:
    path: /player/ui
    method: POST
    data_selector: data
- name: scene_ui_manager
  endpoint:
    path: /sdk-guides/user-interface/scene-ui-manager
    method: GET
    data_selector: instances
    params: {}
- name: world
  endpoint:
    path: /worlds
    method: GET
- name: map_data
  endpoint:
    path: /map/data
    method: GET
    data_selector: blockTypes
    params: {}
notes:
- Uses OAuth2 with refresh token — requires setup of connected app in api
- If you receive an error or warning when running your game for the first time that
  includes a message like `Failed to initialize WebRTC`, you can safely ignore this
  error in local development. Your local game server will fall back to using Websockets
  instead.
- Your server is now live at https://localhost:8080.
- If you receive an error or warning when running your game for the first time that
  includes a message like `Failed to initialize WebRTC`, you can safely ignore this
  error in local development.
- Your local game server will fall back to using Websockets instead. This does not
  affect development in any way.
- All of HYTOPIA's services are free for developers. Server scaling, multiplayer systems,
  etc are all internally managed by us.
- All of HYTOPIA's services are free for developers.
- Server scaling, multiplayer systems, etc are all internally managed by us.
- Running the game server locally with cloudflared allows external connections.
- Start the game server without SSL using 'NODE_ENV=production hytopia start'
- Use 'cloudflared tunnel --url http://localhost:8080' to start the tunnel
- Hytopia has chosen a cube texture resolution referred to as `24x`, meaning a cube’s
  face has a pixel resolution of `24x24`.
- Entities and items are intended to be half of the block resolution, putting entities
  at `12x` or `12x12` pixels per face.
- HYTOPIA aims to have fun and vibrant color tone.
- We encourage heavy saturation to keep our world playful and fun.
- Local development by default uses SSL with a self-signed certificate, but a cloudflare
  tunnel will provision its own SSL certificate. We need to disable the one our server
  uses to prevent conflicts.
- Uses 24x texture resolution for cubes
- Entities and items are at half the block resolution of 12x
- Audio supports a number of features for ambient and spatial music and sound effects.
- AudioManager is a singleton for a given world instance
- The AudioManager is used as a singleton and automatically created for a given world
  instance.
- Blocks are fixed cubes that cannot be translated or rotated.
- Block types must have an ID between 1 and 255, 0 is reserved for air or 'no block'.
- Texture images are recommended to be 24x24 pixels for consistency.
- As of now, entity collision callbacks with blocks do not return the coordinate of
  collision.
- We're working on implementing this, and you can expect the onEntityCollision callback
  signature to be updated to include the collision coordinate soon.
- The BlockTypeRegistry is used as a singleton and automatically created for a given
  world instance.
- As of now, entity collision callbacks with blocks do not return the coordinate of
  collision. We're working on implementing this.
- Chunks have multiple lifecycle states, these are despawned, spawned and simulated.
- HYTOPIA does not automatically handle the dynamic loading and unloading of chunks
  in the ChunkLattice relative to player location in a game.
- ChatManager is automatically created for each world instance
- Chat commands must start with / to register.
- Entity controllers define how an entity interacts with the world.
- Premade entity controllers are available for common use cases.
- The EntityManager is used as a singleton and automatically created for a given world
  instance.
- You can toggle the debug info panels by pressing the tilde ` key at any time
- On mobile, you can toggle the debug info panels by quickly tapping with 5 fingers
  at the same time anywhere on the screen
- Model entities are represented by .gltf or .glb models.
- Automatic optimization of models is performed by the HYTOPIA SDK.
- The EntityManager is used as a singleton for a given world instance.
- Model entities are an entity that is visually representing by a .gltf or .glb model.
- Ambient light is the base light that fills the entirety of a world, regardless of
  caves or other occluding elements.
- Point lights are real time lighting, meaning they will cast shadows and recalculate
  light each frame based on the objects in proximity of the light.
- Use point lights sparingly due to performance cost.
- Players are the starting point of a game.
- The Player class is constantly evolving.
- Ambient light can control color using RGB values and intensity as a number.
- Intensity can be a value from 0 to 1+.
- Cosmetics are compatible with custom player models when using the DefaultPlayerEntity
  class.
- Data persistence relies on a HYTOPIA provided service.
- Check if (await player.getPersistedData()) !== undefined to ensure data has loaded.
- Spot lights are real time lighting and will recalculate light each frame based on
  object in the proximity of the light.
- Spot lights come at a higher performance cost than ambient or directional lighting.
- No External Network Requests - Packages used as plugins cannot make external network
  requests.
- Package Must Be Public - To use an NPM package as a plugin, the package must be
  published publicly on NPM.
- Terms Of Use Compliance - HYTOPIA reserves the right to blacklist specific plugins
  or use cases for plugins at any time.
- Debug rendering in its current implementation is very performance intensive because
  it streams all vertices and indices representing the internal physics simulation
  to all connected clients each tick. You'll want to keep debug rendering off unless
  you need to briefly use it.
- Raycasts, unlike colliders, do not impact performance to render them. You can keep
  raycast debugging enabled throughout your entire development cycle without any noticeable
  performance impact.
- In your local development environment, by default all test players will spawn with
  randomly assigned cosmetics when using the DefaultPlayerEntity class with its default
  player model.
- For cosmetics to be applied to your custom model, you must use the DefaultPlayerEntity
  class, and your model must have the correct named anchor nodes for the cosmetic
  types you wish to support.
- 'The default gravity in HYTOPIA is { x: 0, y: -32, z: 0 }.'
- Uses Continuous collision detection to prevent tunneling for high velocities.
- Overlay UI is loaded into an absolutely positioned <div> on top of the game scene
  that spans the full width and height of the window.
- The Overlay UI related systems are constantly evolving.
- The SceneUIManager is used as a singleton and automatically created for a given
  world instance.
- Debug rendering is performance intensive and should be off unless needed.
- Raycast debugging does not impact performance and can be enabled throughout development.
- A World is a core part of a HYTOPIA game's lifecycle.
- Creating additional world instances allows you to create completely isolated game
  world instances within your server.
- Are you a visual learner that likes to follow videos to learn something new? Great!
  Check out these resources below from our community members that will help you quickly
  get up to speed with setting up HYTOPIA and building your first game! With these
  guides you'll learn all of HYTOPIA's tools, game development workflow, and more!
errors:
- 'REQUEST_LIMIT_EXCEEDED: Throttle API calls or reduce frequency'
- 'QUERY_TIMEOUT: Break down filters or add selectivity'
- '401 Unauthorized: Recheck OAuth scopes or token expiration'
- ErrorHandler.warn()
- ErrorHandler.error()
- ErrorHandler.fatalError()
- Data retrieval may fail when players join the game.
- 'undefined: Data retrieval fails'
- If prior initial loading of persisted data succeeded, the method does nothing.
auth_info:
  mentioned_objects: []
client:
  base_url: https://dev.hytopia.com
  auth:
    type: oauth2
source_metadata: null
