resources:
- name: Exchange Token
  endpoint:
    path: /auth/ExchangeToken
    method: POST
- name: Exchange Token
  endpoint:
    path: /ExchangeToken
    method: POST
- name: transfer_autoflow
  endpoint:
    path: /payment/transfer/autoflow
    method: POST
- name: UAE Banks
  endpoint:
    path: /sandbox/uae/banks
    method: GET
    data_selector: banks
- name: US Banks
  endpoint:
    path: /sandbox/us/banks
    method: GET
    data_selector: banks
- name: Egypt Banks
  endpoint:
    path: /sandbox/egypt/banks
    method: GET
    data_selector: banks
- name: Jordan Banks
  endpoint:
    path: /sandbox/jordan/banks
    method: GET
    data_selector: banks
- name: Mexico Banks
  endpoint:
    path: /sandbox/mexico/banks
    method: GET
    data_selector: banks
- name: Qatar Banks
  endpoint:
    path: /sandbox/qatar/banks
    method: GET
    data_selector: banks
- name: Saudi Arabia Banks
  endpoint:
    path: /sandbox/saudi-arabia/banks
    method: GET
    data_selector: banks
- name: Pakistan Banks
  endpoint:
    path: /sandbox/pakistan/banks
    method: GET
    data_selector: banks
- name: Canada Banks
  endpoint:
    path: /sandbox/canada/banks
    method: GET
    data_selector: banks
- name: Exchange Token
  endpoint:
    path: /v2/auth/ExchangeToken
    method: POST
- name: ExchangeToken
  endpoint:
    path: /v2/auth/ExchangeToken
    method: POST
- name: De-Link User
  endpoint:
    path: /v2/users/DelinkUser
    method: POST
    data_selector: status
- name: De-Link User
  endpoint:
    path: /v2/users/DelinkUser
    method: POST
    data_selector: status
- name: Transfer Auto Flow
  endpoint:
    path: /docs/transfer-auto-flow
    method: GET
    data_selector: ''
    params: {}
- name: Get Beneficiaries
  endpoint:
    path: /docs/get-beneficiaries
    method: GET
    data_selector: ''
    params: {}
- name: Create Beneficiary
  endpoint:
    path: /docs/create-beneficiary
    method: POST
    data_selector: ''
    params: {}
- name: Create Transfer
  endpoint:
    path: /docs/create-transfer
    method: POST
    data_selector: ''
    params: {}
- name: transfer_auto_flow
  endpoint:
    path: /v2/payment/transfer/autoflow
    method: POST
- name: Get Beneficiaries
  endpoint:
    path: /get-beneficiaries
    method: GET
- name: Create Beneficiary
  endpoint:
    path: /create-beneficiary
    method: POST
- name: Create Transfer
  endpoint:
    path: /create-transfer
    method: POST
- name: Transfer Auto Flow
  endpoint:
    path: /transfer-auto-flow
    method: POST
- name: beneficiary_transfer
  endpoint:
    path: /transfer/beneficiary
    method: POST
    data_selector: operationID
- name: transfer_auto_flow
  endpoint:
    path: /v2/payment/transfer/autoflow
    method: POST
- name: beneficiaries
  endpoint:
    path: /v2/payment/beneficiaries/get
    method: POST
    data_selector: records
- name: beneficiary
  endpoint:
    path: /services/data/vXX.X/sobjects/Beneficiary
    method: POST
    data_selector: operationID
    params: {}
- name: create_beneficiary
  endpoint:
    path: /v2/payment/beneficiaries/create
    method: POST
- name: beneficiaries
  endpoint:
    path: /v2/payment/beneficiaries/get
    method: POST
    data_selector: null
    params: {}
- name: beneficiaries
  endpoint:
    path: /createBeneficiary
    method: POST
    data_selector: beneficiaries
- name: beneficiary
  endpoint:
    params:
      appSecret: '{{app_secret}}'
      userSecret: '{SECRET}'
      type: local
      swiftCode: NBSHAEAS
      sortCode: ' 123456'
      bankName: Sharjah Islamic Bank
      name: AbdulRahman Darooqi Farooqi
      nickname: AbdulRahman SIB
      iban: AE360410000033417426040
      country: AE
      branchName: American university of sharjah
      branchAddress: AUS
      address:
        line1: AUS
        line2: University City
        line3: Sharjah
- name: create_beneficiary
  endpoint:
    path: /v2/payment/beneficiaries/create
    method: POST
- name: create_transfer
  endpoint:
    path: /v2/payment/transfer/create
    method: POST
- name: beneficiary
  endpoint:
    path: /docs/get-beneficiaries
    method: POST
    data_selector: operationID
    params: {}
- name: create_transfer
  endpoint:
    path: /v2/payment/transfer/create
    method: POST
- name: identity
  endpoint:
    path: /get-identity
    method: GET
- name: accounts
  endpoint:
    path: /get-accounts
    method: GET
- name: balance
  endpoint:
    path: /get-balance
    method: GET
- name: transactions
  endpoint:
    path: /get-transactions
    method: GET
- name: transfer
  endpoint:
    path: /transfer
    method: POST
    data_selector: operationID
    params:
      appSecret: 00bae841ad979345fca2e2585c000da7eac420504d189cf63315e7a6234d45c68dbd6fff749167292cd1475622805dce7a2b979db3c16e25a2897158ee63845b1043930ff603e19deb1d2d54ad9afc3d52df241d3c4e7286244a2f98a10212e38b2e9f8b0e3a7592702fa4358fb9103b93a26dd6bb92c2be0327ac054f14becc
      userSecret: DSv56dS/PB7QGJI/IGX4qKDhGVhIvQQhWo4zxTDT0gn079JlHnUSSq8NAtavX4fpHj7PGQ74BzVXBO9pFHXdSeLCMnayKLTLD0+zmMu7wfGzy+ZhkYTBe040CXWQ+AYaPhGTzfVWu3Lz6oM2QnqM9X56BbvpC80tN8Zg72VJHWC6YjazdQQ2NK0pl9+ePbmqn7PNjFKLhipgpTl7Hw3kvnLrSIC9AcXzVYQeSWYAv3LAEbECB1aNLXC0glMG2W7L2iLTMwy54wHbXXfSQlK9S6X7wmnZ0tn28H0MwMqWdLLtxvcFyYlMr3E0hqYnK4a5sU0IvF1yJAMHMBCbjw2Trnx2VMuX5IWjdxScfh+8IxWGvKl6RypksJTyNg100H+Q+j0vfKW/bOijFolZgHJtAxUowPlewK9JwoWahkbX2KTGoqQbSCh6KSzaCxdbg7ykNI5n+m6vdoWzGfZGFYjfgMX6aMInAM3b32ZAp9DlfFxRkg3oeoLBuTGTz73E51bZj9mGgD0FxkIXFPIWGx0WyxoYpMEesJeT8phNy0G82Bd7qzWCPGP4gK70jGpqfCWsvj1XZKMMMjReCdUrhtXKB4spQIFi+63WcGV7vDyWQdUTINOhmR8QfZOJoVm+VZgFiqCLI3Aa8AnoYw3UIPiheVjE5lxMulPNIP0QGMR31VY=
      amount: 1
      senderID: ntV7rbYoexYaGDRfLCAo8vw1xXgu2VaXXtqvNoMU0sfy6aNErfUEGMD+P6lAlkzu/GKxPeoef7d7eNoxlHKyRw==
      receiverID: kSSWuq7RXww1VZpvF05KBfeiQxr8nb/uHQ35ZqSmhnp2gVoqZ7+DCnI/zRLzcg32myS/e8BLPhMJaT7mJ3z9Uw==
- name: get_identity
  endpoint:
    path: /v2/data/identity/get
    method: POST
- name: Get Identity
  endpoint:
    path: /docs/get-identity
    method: GET
- name: Get Accounts
  endpoint:
    path: /docs/get-accounts
    method: GET
- name: Get Balance
  endpoint:
    path: /docs/get-balance
    method: GET
- name: Get Transactions
  endpoint:
    path: /docs/get-transactions
    method: GET
- name: complete_accounts
  endpoint:
    path: /data/completeAccounts/get
    method: POST
    data_selector: accounts
    params: {}
- name: get_identity
  endpoint:
    path: /v2/data/identity/get
    method: POST
- name: user_input
  endpoint:
    path: /path/to/endpoint
    method: POST
    data_selector: userInputs
- name: accounts
  endpoint:
    path: /data/accounts/get
    method: POST
    data_selector: accounts
    params: {}
- name: complete_accounts
  endpoint:
    path: /completeAccounts/get
    method: POST
    data_selector: accounts
    params: {}
- name: balance
  endpoint:
    path: /data/balance/get
    method: POST
    data_selector: balance
    params: {}
- name: accounts
  endpoint:
    path: /data/accounts/get
    method: POST
    data_selector: accounts
    params: {}
- name: transactions
  endpoint:
    path: /v2/data/transactions/get
    method: POST
    data_selector: transactions
- name: balance
  endpoint:
    path: /data/balance/get
    method: POST
    data_selector: balance
    params: {}
- name: transactions
  endpoint:
    path: /v2/data/transactions/get
    method: POST
- name: categorized_transactions
  endpoint:
    path: /v2/data/categorizedTransactions/get
    method: POST
- name: transactions
  endpoint:
    path: /transactions
    method: POST
    data_selector: transactions
- name: transactions
  endpoint:
    path: /api/transactions
    method: POST
    data_selector: transactions
    params:
      fromDate: '2020-04-01'
      toDate: '2020-04-30'
      accountID: ntV7rbYoexYaGDRfLCAo8vw1xXgu2VaXXtqvNoMU0sfy6aNErfUEGMD+P6lAlkzu/GKxPeoef7d7eNoxlHKyRw==
- name: categorized_transactions
  endpoint:
    path: /v2/data/categorizedTransactions/get
    method: POST
- name: enriched_transactions
  endpoint:
    path: /v2/data/enrichedTransactions/get
    method: POST
- name: transactions
  endpoint:
    path: /transactions
    method: POST
    data_selector: transactions
    params:
      fromDate: '2020-04-01'
      toDate: '2020-04-30'
      accountID: ntV7rbYoexYaGDRfLCAo8vw1xXgu2VaXXtqvNoMU0sfy6aNErfUEGMD+P6lAlkzu/GKxPeoef7d7eNoxlHKyRw==
- name: transactions
  endpoint:
    path: /transactions
    method: POST
    data_selector: transactions
    params:
      fromDate: '2020-04-01'
      toDate: '2020-04-30'
      accountID: ntV7rbYoexYaGDRfLCAo8vw1xXgu2VaXXtqvNoMU0sfy6aNErfUEGMD+P6lAlkzu/GKxPeoef7d7eNoxlHKyRw==
- name: enriched_transactions
  endpoint:
    path: /v2/data/enrichedTransactions/get
    method: POST
- name: transactions
  endpoint:
    path: /transactions
    method: POST
    data_selector: transactions
    params:
      fromDate: '2020-04-01'
      toDate: '2020-04-30'
      accountID: ntV7rbYoexYaGDRfLCAo8vw1xXgu2VaXXtqvNoMU0sfy6aNErfUEGMD+P6lAlkzu/GKxPeoef7d7eNoxlHKyRw==
- name: cards
  endpoint:
    path: /cards/get
    method: POST
    data_selector: cards
- name: cards
  endpoint:
    path: /services/cards
    method: GET
    data_selector: cards
- name: cards
  endpoint:
    path: /data/cards/get
    method: POST
    data_selector: cards
    params: {}
- name: get_card_balance
  endpoint:
    path: /data/balance/get
    method: POST
    data_selector: balance
- name: cards
  endpoint:
    path: /your/endpoint/path
    method: GET
    data_selector: cards
- name: get_card_transactions
  endpoint:
    path: /v2/data/transactions/get
    method: POST
- name: get_card_balance
  endpoint:
    path: /data/balance/get
    method: POST
    data_selector: balance
    params: {}
- name: get_card_transactions
  endpoint:
    path: /v2/data/transactions/get
    method: POST
- name: operation_status
  endpoint:
    path: /get-job-status
    method: GET
- name: Get Operation Status
  endpoint:
    path: /v2/operation/get
    method: POST
    data_selector: null
    params: {}
- name: metadata
  endpoint:
    path: /metadata
    method: GET
- name: get_account_metadata
  endpoint:
    path: /v2/metadata/accounts/get
    method: POST
- name: operation_status
  endpoint:
    path: /operations
    method: GET
- name: get_operation_status
  endpoint:
    path: /v2/operation/get
    method: POST
    data_selector: status
- name: account_metadata
  endpoint:
    path: /docs/get-account-metadata
    method: GET
- name: get_account_metadata
  endpoint:
    path: /v2/metadata/accounts/get
    method: POST
- name: handleSDKRequest
  endpoint:
    path: /handleSDKRequest
    method: POST
    data_selector: response.body
- name: accountsMetadata
  endpoint:
    data_selector: accountsMetadata
- name: accounts
  endpoint:
    path: /data/accounts/get
    method: GET
    data_selector: records
    params: {}
- name: identity
  endpoint:
    path: /data/identity/get
    method: GET
    data_selector: records
    params: {}
- name: cards
  endpoint:
    path: /data/cards/get
    method: GET
    data_selector: records
    params: {}
- name: account_transactions
  endpoint:
    path: /data/transactions/get
    method: GET
    data_selector: records
    params: {}
- name: card_transactions
  endpoint:
    path: /data/transactions/get
    method: GET
    data_selector: records
    params: {}
- name: beneficiaries
  endpoint:
    path: /payment/beneficiaries/get
    method: GET
    data_selector: records
    params: {}
- name: create_beneficiary
  endpoint:
    path: /payment/beneficiaries/create
    method: POST
    data_selector: records
    params: {}
- name: transfer_autoflow
  endpoint:
    path: /payment/transfer/autoflow
    method: POST
    data_selector: records
    params: {}
- name: DelinkUser
  endpoint:
    path: /users/DelinkUser
    method: POST
    data_selector: records
- name: identity
  endpoint:
    path: /data/identity/get
    method: POST
    data_selector: data
    params: {}
- name: accounts
  endpoint:
    path: /data/accounts/get
    method: POST
    data_selector: data
    params: {}
- name: Get Identity
  endpoint:
    path: /data/get-identity
    method: GET
    data_selector: identityResponse
    params: {}
- name: Get Complete Accounts
  endpoint:
    path: /data/get-complete-accounts
    method: GET
    data_selector: accounts
    params: {}
- name: Get Accounts
  endpoint:
    path: /data/get-accounts
    method: GET
    data_selector: accounts
    params: {}
- name: Get Balance
  endpoint:
    path: /data/get-balance
    method: GET
    data_selector: balance
    params: {}
- name: Get Transactions
  endpoint:
    path: /data/get-transactions
    method: GET
    data_selector: transactions
    params: {}
- name: Get Categorized Transactions
  endpoint:
    path: /data/get-categorized-transactions
    method: GET
    data_selector: categorizedTransactions
    params: {}
- name: Get Enriched Transactions
  endpoint:
    path: /data/get-enriched-transactions
    method: GET
    data_selector: enrichedTransactions
    params: {}
- name: Get Cards
  endpoint:
    path: /data/get-cards
    method: GET
    data_selector: cards
    params: {}
- name: Get Card Balance
  endpoint:
    path: /data/get-card-balance
    method: GET
    data_selector: cardBalance
    params: {}
- name: Get Card Transactions
  endpoint:
    path: /data/get-card-transactions
    method: GET
    data_selector: cardTransactions
    params: {}
- name: identity
  endpoint:
    path: /data/get-identity
    method: GET
- name: accounts
  endpoint:
    path: /data/get-accounts
    method: GET
- name: transactions
  endpoint:
    path: /data/get-transactions
    method: GET
- name: cards
  endpoint:
    path: /data/get-cards
    method: GET
- name: card_transactions
  endpoint:
    path: /data/get-card-transactions
    method: GET
- name: cards
  endpoint:
    path: /data/cards/get
    method: POST
    data_selector: action
    params: {}
- name: transactions_account
  endpoint:
    path: /data/transactions/get
    method: POST
    data_selector: action
    params:
      accountID: mSgJ9aCPQnla1+lwp8ng41Swh8OLDEkTDyr5pVf4jam+7JX1ilvTCOi3L7eDSX1i97UJBevg99KDSWGEtpxjMA==
      fromDate: '2021-04-22'
      toDate: '2021-04-26'
- name: transactions_card
  endpoint:
    path: /data/transactions/get
    method: POST
    data_selector: action
    params:
      cardID: 6WOpDShZHWnmvj8+keTDQPZfgzRRnRJ5XBeErJyPuY4YrzMIjxZrkvJyV6fbx8VmYuc7qASeERxtukANg6Yw2A==
      fromDate: '2021-04-22'
      toDate: '2021-07-05'
- name: beneficiaries_get
  endpoint:
    path: /payment/beneficiaries/get
    method: POST
    data_selector: action
    params: {}
- name: beneficiaries_create
  endpoint:
    path: /payment/beneficiaries/create
    method: POST
    data_selector: action
    params:
      accountNumber: 0959040184901
      address:
        line1: baniyas road
        line2: dubai
        line3: united arab emirates
      bankName: Emirates NBD Bank PJSC
      branchAddress: Baniyas Road Deira PO Box 777 Dubai UAE
      branchName: Emirates NBD Bank PJSC
      country: AE
      iban: AE180260001015740872901
      name: Mohammed Ennabah ENBD
      phoneNumber: 0585859206
      swiftCode: EBILAEAD
      type: local
- name: transfer_autoflow
  endpoint:
    path: /payment/transfer/autoflow
    method: POST
    data_selector: action
    params:
      amount: '100'
      beneficiary:
        accountNumber: 0959040184901
        address:
          line1: baniyas road
          line2: dubai
          line3: united arab emirates
        bankName: Emirates NBD Bank PJSC
        branchAddress: Baniyas Road Deira PO Box 777 Dubai UAE
        branchName: Emirates NBD Bank PJSC
        country: AE
        iban: AE180260001015740872901
        name: Mohammed Ennabah ENBD
        phoneNumber: 0585859206
        swiftCode: EBILAEAD
        type: local
      remark: test
      senderID: mSgJ9aCPQnla1+lwp8ng41Swh8OLDEkTDyr5pVf4jam+7JX1ilvTCOi3L7eDSX1i97UJBevg99KDSWGEtpxjMA==
- name: card_enhanced_transactions
  endpoint:
    path: /getCardEnhancedTransactions
    method: GET
    data_selector: transactionsResponse
    params:
      cardID: String
      fromDate: YYYY-MM-DD
      toDate: YYYY-MM-DD
      type: String
- name: DelinkUser
  endpoint:
    path: /users/DelinkUser
    method: POST
    data_selector: action
    params: {}
- name: get_beneficiaries
  endpoint:
    path: /get-beneficiaries
    method: GET
- name: create_beneficiary
  endpoint:
    path: /create-beneficiary
    method: POST
- name: create_transfer
  endpoint:
    path: /create-transfer
    method: POST
- name: getIdentity
  endpoint:
    path: /data/getIdentity
    method: GET
- name: getAccounts
  endpoint:
    path: /metadata/getAccounts
    method: GET
- name: identity
  endpoint:
    path: /data/identity
    method: GET
    data_selector: identity
    params: {}
- name: accounts
  endpoint:
    path: /data/accounts
    method: GET
    data_selector: accounts
    params: {}
- name: transactions
  endpoint:
    path: /data/transactions
    method: GET
    data_selector: transactions
    params: {}
- name: cards
  endpoint:
    path: /data/cards
    method: GET
    data_selector: cards
    params: {}
- name: card_transactions
  endpoint:
    path: /data/card_transactions
    method: GET
    data_selector: card_transactions
    params: {}
- name: getCardEnhancedTransactions
  endpoint:
    path: /data/getCardEnhancedTransactions
    method: GET
    data_selector: transactionsResponse
    params:
      cardID: String
      fromDate: YYYY-MM-DD
      toDate: YYYY-MM-DD
      type: String
- name: bank_connection
  endpoint:
    path: /bank/connections
    method: POST
    data_selector: connection
    params: {}
- name: account_metadata
  endpoint:
    path: /account/metadata
    method: GET
    data_selector: metadata
    params: {}
- name: get_beneficiaries
  endpoint:
    path: /payment/getBeneficiaries
    method: GET
    data_selector: beneficiaries
    params: {}
- name: create_beneficiary
  endpoint:
    path: /payment/createBeneficiary
    method: POST
    data_selector: beneficiary
    params: {}
- name: create_transfer
  endpoint:
    path: /payment/createTransfer
    method: POST
    data_selector: transfer
    params: {}
- name: identity
  endpoint:
    path: /get-identity
    method: GET
    data_selector: response
    params:
      bankConnection: bankConnection
- name: bank_accounts
  endpoint:
    path: /get-complete-accounts
    method: GET
    data_selector: response
    params:
      bankConnection: bankConnection
- name: account_transactions
  endpoint:
    path: /get-transactions
    method: GET
    data_selector: response
    params:
      bankConnection: bankConnection
      bankAccountID: bankAccountID
      type: type
      startDate: startDate
      endDate: endDate
- name: bank_cards
  endpoint:
    path: /get-cards
    method: GET
    data_selector: response
    params:
      bankConnection: bankConnection
- name: cards_transactions
  endpoint:
    path: /cards/transactions
    method: GET
    data_selector: transactions
    params:
      bankConnection: connection
      cardID: card_ID
      type: enriched
      startDate: yyyy-MM-dd
      endDate: yyyy-MM-dd
- name: Transfer Auto Flow
  endpoint:
    path: /payment-api/transfer-auto-flow
    method: POST
- name: get_cards
  endpoint:
    path: /getCards
    method: GET
    data_selector: records
    params: {}
- name: get_identity
  endpoint:
    path: /getIdentity
    method: GET
    data_selector: records
    params: {}
- name: get_accounts
  endpoint:
    path: /getAccounts
    method: GET
    data_selector: records
    params: {}
- name: get_balance
  endpoint:
    path: /getBalance
    method: GET
    data_selector: records
    params: {}
- name: get_transactions
  endpoint:
    path: /getTransactions
    method: GET
    data_selector: records
    params: {}
- name: create_transfer
  endpoint:
    path: /create-transfer
    method: POST
    data_selector: results
    params:
      bankConnection: DAPIBankConnection
      senderBankAccount: DAPIBankAccount
      receiverBeneficiary: DAPIBeneficiary
      amount: Float
      remark: String
- name: get_beneficiaries
  endpoint:
    path: /get-beneficiaries
    method: GET
    data_selector: results
    params:
      bankConnection: DAPIBankConnection
- name: create_transfer_to_existing_beneficiary
  endpoint:
    path: /create-transfer-to-existing-beneficiary
    method: POST
    data_selector: results
    params:
      bankConnection: DAPIBankConnection
      receiverBeneficiaryID: String
      senderBankAccountID: String
      amount: Float
      remark: String
- name: create_beneficiary
  endpoint:
    path: /create-beneficiary
    method: POST
    data_selector: results
    params:
      bankConnection: DAPIBankConnection
      beneficiary: DAPIBeneficiary
- name: bank_connection
  endpoint:
    path: /createBankConnection
    method: POST
    data_selector: results
- name: account_metadata
  endpoint:
    path: /accountMetadata
    method: GET
    data_selector: results
- name: identity
  endpoint:
    path: /get-identity
    method: GET
- name: bank_accounts
  endpoint:
    path: /get-complete-accounts
    method: GET
- name: account_transactions
  endpoint:
    path: /get-transactions
    method: GET
- name: bank_cards
  endpoint:
    path: /get-cards
    method: GET
- name: create_wire_transfer
  endpoint:
    path: /create/wire/transfer
    method: POST
    data_selector: results
    params:
      bankConnection: DAPIBankConnection
      senderBankAccount: DAPIBankAccount
      receiverBeneficiary: DAPIWireBeneficiary
      amount: Float
      remark: String
- name: get_wire_beneficiaries
  endpoint:
    path: /get/wire/beneficiaries
    method: GET
    data_selector: results
    params:
      bankConnection: DAPIBankConnection
- name: create_wire_beneficiary
  endpoint:
    path: /create/wire/beneficiary
    method: POST
    data_selector: results
    params:
      bankConnection: DAPIBankConnection
      beneficiaryDetails: DAPIWireBeneficiary
- name: cards_transactions
  endpoint:
    path: /cards/transactions
    method: GET
    data_selector: transactions
    params:
      bankConnection: ''
      cardID: ''
      type: enriched
      startDate: ''
      endDate: ''
- name: create_transfer
  endpoint:
    path: /create/transfer
    method: POST
    data_selector: results
    params:
      bankConnection: required
      senderBankAccount: required
      receiverBeneficiary: optional
      amount: required
      remark: optional
- name: get_beneficiaries
  endpoint:
    path: /get/beneficiaries
    method: GET
    data_selector: response
    params:
      bankConnection: required
- name: create_transfer_to_exist_beneficiary
  endpoint:
    path: /create/transfer/existing
    method: POST
    data_selector: results
    params:
      bankConnection: required
      receiverBeneficiaryID: required
      senderBankAccountID: required
      amount: required
      remark: optional
- name: create_beneficiary
  endpoint:
    path: /create/beneficiary
    method: POST
    data_selector: results
    params:
      bankConnection: required
      beneficiary: required
- name: create_wire_transfer
  endpoint:
    path: /create-wire-transfer
    method: POST
    data_selector: results
    params:
      bankConnection: DAPIBankConnection
      senderBankAccount: DAPIBankAccount
      amount: Float
      remark: String
- name: get_wire_beneficiaries
  endpoint:
    path: /get-wire-beneficiaries
    method: GET
    data_selector: results
    params:
      bankConnection: DAPIBankConnection
- name: create_wire_beneficiary
  endpoint:
    path: /create-wire-beneficiary
    method: POST
    data_selector: results
    params:
      bankConnection: DAPIBankConnection
      beneficiaryDetails: DAPIWireBeneficiary
- name: payments
  endpoint:
    path: /payments
    method: POST
    data_selector: result
    params: {}
- name: get_parameters
  endpoint:
    path: /getParameters
    method: GET
    data_selector: bankId
- name: create_connection
  endpoint:
    path: /create
    method: POST
    data_selector: connection
- name: delink_connection
  endpoint:
    path: /delete
    method: DELETE
    data_selector: response
- name: ACHPullTransfer
  endpoint:
    path: /create-ACH-pull-transfer
    method: POST
    data_selector: results
    params: {}
- name: getAccounts
  endpoint:
    path: /getAccounts
    method: GET
    data_selector: accounts
- name: getIdentity
  endpoint:
    path: /getIdentity
    method: GET
    data_selector: identity
- name: getCards
  endpoint:
    path: /getCards
    method: GET
    data_selector: cards
- name: account_transactions
  endpoint:
    path: /getTransactions
    method: GET
    data_selector: transactions
    params:
      account: account
      fromDate: fromDate
      toDate: toDate
      type: DapiTransactionsType.DEFAULT
- name: card_transactions
  endpoint:
    path: /getTransactions
    method: GET
    data_selector: transactions
    params:
      card: card
      fromDate: fromDate
      toDate: toDate
      type: DapiTransactionsType.DEFAULT
- name: createTransfer
  endpoint:
    path: /createTransfer
    method: POST
    data_selector: result
    params: {}
- name: createBeneficiary
  endpoint:
    path: /createBeneficiary
    method: POST
    data_selector: result
    params: {}
- name: createTransferToExistingBeneficiary
  endpoint:
    path: /createTransferToExistingBeneficiary
    method: POST
    data_selector: result
    params: {}
- name: beneficiaries
  endpoint:
    path: /getBeneficiaries
    method: GET
    data_selector: beneficiariesResponse
    params: {}
- name: accounts
  endpoint:
    path: /data/accounts
    method: GET
    data_selector: records
- name: transactions
  endpoint:
    path: /data/transactions
    method: GET
    data_selector: records
- name: createWireTransfer
  endpoint:
    path: /createWireTransfer
    method: POST
    data_selector: result
- name: createWireBeneficiary
  endpoint:
    path: /createWireBeneficiary
    method: POST
    data_selector: result
- name: getWireBeneficiaries
  endpoint:
    path: /getWireBeneficiaries
    method: GET
    data_selector: beneficiaries
- name: connections
  endpoint:
    path: /getConnections
    method: GET
    data_selector: connections
- name: accounts_metadata
  endpoint:
    path: /getAccountsMetaData
    method: GET
    data_selector: accountsMetaData
- name: get_parameters
  endpoint:
    path: /getParameters
    method: GET
    data_selector: bankId
- name: create_connection
  endpoint:
    path: /createConnection
    method: POST
    data_selector: connection
    params: {}
- name: delink_connection
  endpoint:
    path: /delinkConnection
    method: DELETE
    data_selector: response
    params: {}
- name: connections
  endpoint:
    path: /connections
    method: GET
- name: getAccounts
  endpoint:
    path: /api/v2/getAccounts
    method: GET
    data_selector: accounts
    params: {}
- name: getIdentity
  endpoint:
    path: /api/v2/getIdentity
    method: GET
    data_selector: identity
    params: {}
- name: getCards
  endpoint:
    path: /api/v2/getCards
    method: GET
    data_selector: cards
    params: {}
- name: accounts
  endpoint:
    path: /getAccounts
    method: GET
    data_selector: response
    params: {}
- name: identity
  endpoint:
    path: /getIdentity
    method: GET
    data_selector: response
    params: {}
- name: cards
  endpoint:
    path: /getCards
    method: GET
    data_selector: response
    params: {}
- name: account_transactions
  endpoint:
    path: /account/getTransactions
    method: GET
    data_selector: transactions
    params:
      account: account
      fromDate: fromDate
      toDate: toDate
      type: DapiTransactionsType.DEFAULT
- name: card_transactions
  endpoint:
    path: /card/getTransactions
    method: GET
    data_selector: transactions
    params:
      card: card
      fromDate: fromDate
      toDate: toDate
      type: DapiTransactionsType.DEFAULT
- name: account_transactions
  endpoint:
    path: /getTransactionsForAccount
    method: GET
    params:
      account: ''
      fromDate: ''
      toDate: ''
      type: DapiTransactionsType.DEFAULT
- name: card_transactions
  endpoint:
    path: /getTransactionsForCard
    method: GET
    params:
      card: ''
      fromDate: ''
      toDate: ''
      type: DapiTransactionsType.DEFAULT
- name: createTransfer
  endpoint:
    path: /createTransfer
    method: POST
    data_selector: result
- name: createTransferToExistingBeneficiary
  endpoint:
    path: /createTransferToExistingBeneficiary
    method: POST
    data_selector: result
- name: createBeneficiary
  endpoint:
    path: /createBeneficiary
    method: POST
    data_selector: result
- name: beneficiaries
  endpoint:
    path: /getBeneficiaries
    method: GET
    data_selector: beneficiariesResponse
    params: {}
- name: createTransfer
  endpoint:
    path: /payment/createTransfer
    method: POST
    data_selector: response
    params: {}
- name: getBeneficiaries
  endpoint:
    path: /payment/getBeneficiaries
    method: GET
    data_selector: response
    params: {}
- name: createBeneficiary
  endpoint:
    path: /payment/createBeneficiary
    method: POST
    data_selector: response
    params: {}
- name: createTransferToExistingBeneficiary
  endpoint:
    path: /payment/createTransferToExistingBeneficiary
    method: POST
    data_selector: response
    params: {}
- name: createWireTransfer
  endpoint:
    path: /createWireTransfer
    method: POST
    data_selector: result
    params: {}
- name: createWireTransferToExistingBeneficiary
  endpoint:
    path: /createWireTransferToExistingBeneficiary
    method: POST
    data_selector: result
    params: {}
- name: createWireBeneficiary
  endpoint:
    path: /createWireBeneficiary
    method: POST
    data_selector: result
    params: {}
- name: getWireBeneficiaries
  endpoint:
    path: /getWireBeneficiaries
    method: GET
    data_selector: beneficiaries
    params: {}
- name: createWireTransfer
  endpoint:
    path: /createWireTransfer
    method: POST
    data_selector: transferResponse
    params: {}
- name: createWireBeneficiary
  endpoint:
    path: /createWireBeneficiary
    method: POST
    data_selector: beneficiaryResponse
    params: {}
- name: getWireBeneficiaries
  endpoint:
    path: /getWireBeneficiaries
    method: GET
    data_selector: beneficiaries
    params: {}
- name: create_bank_connection
  endpoint:
    path: /create-connection
    method: POST
- name: get_cached_connections
  endpoint:
    path: /get-connections
    method: GET
- name: get_accounts_metadata
  endpoint:
    path: /get-accounts-metadata
    method: GET
- name: accounts
  endpoint:
    path: /getAccounts
    method: GET
    data_selector: accounts
- name: identity
  endpoint:
    path: /getIdentity
    method: GET
    data_selector: identity
- name: cards
  endpoint:
    path: /getCards
    method: GET
    data_selector: cards
- name: getAccounts
  endpoint:
    path: /getAccounts
    method: GET
    data_selector: accounts
    params: {}
- name: getIdentity
  endpoint:
    path: /getIdentity
    method: GET
    data_selector: identity
    params: {}
- name: getCards
  endpoint:
    path: /getCards
    method: GET
    data_selector: cards
    params: {}
- name: account_transactions
  endpoint:
    path: /getTransactionsForAccount
    method: GET
    data_selector: transactions
    params:
      account: ''
      fromDate: ''
      toDate: ''
      type: DapiTransactionsType.default
- name: card_transactions
  endpoint:
    path: /getTransactionsForCard
    method: GET
    data_selector: transactions
    params:
      card: ''
      fromDate: ''
      toDate: ''
      type: DapiTransactionsType.default
- name: getTransactionsForAccount
  endpoint:
    path: /getTransactionsForAccount
    method: GET
    data_selector: transactions
    params:
      account: account
      fromDate: fromDate
      toDate: toDate
      type: DapiTransactionsType.DEFAULT
- name: getTransactionsForCard
  endpoint:
    path: /getTransactionsForCard
    method: GET
    data_selector: transactions
    params:
      card: card
      fromDate: fromDate
      toDate: toDate
      type: DapiTransactionsType.DEFAULT
- name: createTransfer
  endpoint:
    path: /payment/createTransfer
    method: POST
    data_selector: response
    params: {}
- name: createBeneficiary
  endpoint:
    path: /payment/createBeneficiary
    method: POST
    data_selector: response
    params: {}
- name: getBeneficiaries
  endpoint:
    path: /payment/getBeneficiaries
    method: GET
    data_selector: response
    params: {}
- name: createTransfer
  endpoint:
    path: /createTransfer
    method: POST
    data_selector: transferResponse
    params: {}
- name: getBeneficiaries
  endpoint:
    path: /getBeneficiaries
    method: GET
    data_selector: beneficiaries
    params: {}
- name: createBeneficiary
  endpoint:
    path: /createBeneficiary
    method: POST
    data_selector: createBeneficiaryResponse
    params: {}
- name: createTransferToExistingBeneficiary
  endpoint:
    path: /createTransferToExistingBeneficiary
    method: POST
    data_selector: transferResponse
    params: {}
- name: createWireTransfer
  endpoint:
    path: /createWireTransfer
    method: POST
    data_selector: response
- name: createWireBeneficiary
  endpoint:
    path: /createWireBeneficiary
    method: POST
    data_selector: response
- name: getWireBeneficiaries
  endpoint:
    path: /getWireBeneficiaries
    method: GET
    data_selector: response
- name: createWireTransfer
  endpoint:
    path: /createWireTransfer
    method: POST
    data_selector: response
    params: {}
- name: createWireTransferToExistingBeneficiary
  endpoint:
    path: /createWireTransferToExistingBeneficiary
    method: POST
    data_selector: response
    params: {}
- name: createWireBeneficiary
  endpoint:
    path: /createWireBeneficiary
    method: POST
    data_selector: response
    params: {}
- name: getWireBeneficiaries
  endpoint:
    path: /getWireBeneficiaries
    method: GET
    data_selector: response
    params: {}
- name: Get Identity
  endpoint:
    path: /data-api/get-identity
    method: GET
- name: Get Complete Accounts
  endpoint:
    path: /data-api/get-complete-accounts
    method: GET
- name: Get Transactions
  endpoint:
    path: /data-api/get-transactions
    method: GET
- name: connections
  endpoint:
    path: /connections
    method: GET
    data_selector: connections
- name: accounts_metadata
  endpoint:
    path: /accounts/metadata
    method: GET
    data_selector: metadata
- name: bank_connection
  endpoint:
    path: /create_bank_connection
    method: POST
- name: cached_connections
  endpoint:
    path: /get_cached_connections
    method: GET
- name: account_metadata
  endpoint:
    path: /get_account_metadata
    method: GET
- name: getAccounts
  endpoint:
    path: /getAccounts
    method: GET
    data_selector: accounts
    params: {}
- name: getIdentity
  endpoint:
    path: /getIdentity
    method: GET
    data_selector: identity
    params: {}
- name: getCards
  endpoint:
    path: /getCards
    method: GET
    data_selector: cards
    params: {}
- name: accounts
  endpoint:
    path: /data-api/get-accounts
    method: GET
- name: identity
  endpoint:
    path: /data-api/get-identity
    method: GET
- name: cards
  endpoint:
    path: /data-api/get-cards
    method: GET
- name: transactions
  endpoint:
    path: /data-api/get-transactions
    method: GET
    params:
      account: ''
      fromDate: ''
      toDate: ''
- name: account_transactions
  endpoint:
    path: /getTransactionsForAccount
    method: GET
    data_selector: transactions
    params: {}
- name: card_transactions
  endpoint:
    path: /getTransactionsForCard
    method: GET
    data_selector: transactions
    params: {}
- name: transactions
  endpoint:
    path: /card/GetTransactions
    method: GET
    data_selector: transactions
    params:
      card: Credit card from where the transaction was performed
      fromDate: Start date of transactions history range
      toDate: End date of transactions history range
- name: createTransfer
  endpoint:
    path: /payment/createTransfer
    method: POST
    data_selector: transferResponse
    params: {}
- name: createBeneficiary
  endpoint:
    path: /payment/createBeneficiary
    method: POST
    data_selector: createBeneficiaryResponse
    params: {}
- name: getBeneficiaries
  endpoint:
    path: /payment/getBeneficiaries
    method: GET
    data_selector: beneficiaries
    params: {}
- name: createTransfer
  endpoint:
    path: /createTransfer
    method: POST
    data_selector: data
    params: {}
- name: createBeneficiary
  endpoint:
    path: /createBeneficiary
    method: POST
    data_selector: data
    params: {}
- name: getBeneficiaries
  endpoint:
    path: /getBeneficiaries
    method: GET
    data_selector: data
    params: {}
- name: createTransferToExistingBeneficiary
  endpoint:
    path: /createTransferToExistingBeneficiary
    method: POST
    data_selector: data
    params: {}
- name: createWireTransfer
  endpoint:
    path: /createWireTransfer
    method: POST
    data_selector: null
    params: {}
- name: createWireTransferToExistingBeneficiary
  endpoint:
    path: /createWireTransferToExistingBeneficiary
    method: POST
    data_selector: null
    params: {}
- name: createWireBeneficiary
  endpoint:
    path: /createWireBeneficiary
    method: POST
    data_selector: null
    params: {}
- name: getWireBeneficiaries
  endpoint:
    path: /getWireBeneficiaries
    method: GET
    data_selector: null
    params: {}
- name: createWireTransfer
  endpoint:
    path: /createWireTransfer
    method: POST
    data_selector: response
    params: {}
- name: createWireBeneficiary
  endpoint:
    path: /createWireBeneficiary
    method: POST
    data_selector: response
    params: {}
- name: getWireBeneficiaries
  endpoint:
    path: /getWireBeneficiaries
    method: GET
    data_selector: response
    params: {}
- name: Payment API
  endpoint:
    path: /payment-api
    method: POST
    data_selector: data
    params: {}
- name: Data API
  endpoint:
    path: /data-api
    method: GET
    data_selector: data
    params: {}
- name: accessCode
  endpoint:
    path: /connect/v3/connector.js
    method: GET
    data_selector: accessCode
- name: connectionID
  endpoint:
    path: /connect/v3/connector.js
    method: GET
    data_selector: connectionID
- name: Create Bank Connection
  endpoint:
    path: /create-bank-connection
    method: POST
    data_selector: connection
    params: {}
- name: Get Cached Connections
  endpoint:
    path: /get-connections
    method: GET
    data_selector: connections
    params: {}
- name: Get Account Metadata
  endpoint:
    path: /get-account-metadata
    method: GET
    data_selector: metadata
    params: {}
- name: Create Connection
  endpoint:
    path: /create-connection
    method: POST
    data_selector: connection
    params: {}
- name: GetAccounts
  endpoint:
    path: /get-accounts
    method: GET
    data_selector: accounts
    params: {}
- name: GetIdentity
  endpoint:
    path: /get-identity
    method: GET
    data_selector: identity
    params: {}
- name: GetCards
  endpoint:
    path: /get-cards
    method: GET
    data_selector: cards
    params: {}
- name: GetTransactions
  endpoint:
    path: /get-transactions
    method: GET
    data_selector: transactions
    params:
      account: account
      fromDate: fromDate
      toDate: toDate
- name: get_transactions
  endpoint:
    path: /card/getTransactions
    method: GET
    data_selector: transactions
    params: {}
- name: createTransfer
  endpoint:
    path: /createTransfer
    method: POST
    data_selector: response
    params: {}
- name: createBeneficiary
  endpoint:
    path: /createBeneficiary
    method: POST
    data_selector: response
    params: {}
- name: getBeneficiaries
  endpoint:
    path: /getBeneficiaries
    method: GET
    data_selector: response
    params: {}
- name: identity
  endpoint:
    path: /data/getIdentity
    method: GET
    data_selector: identity
    params: {}
- name: accounts
  endpoint:
    path: /data/getAccounts
    method: GET
    data_selector: Account
    params: {}
- name: createWireTransfer
  endpoint:
    path: /createWireTransfer
    method: POST
    data_selector: records
    params: {}
- name: createWireBeneficiary
  endpoint:
    path: /createWireBeneficiary
    method: POST
    data_selector: records
    params: {}
- name: getWireBeneficiaries
  endpoint:
    path: /getWireBeneficiaries
    method: GET
    data_selector: records
    params: {}
- name: getAccountBalance
  endpoint:
    path: /data/getAccountBalance
    method: GET
    data_selector: balance
    params: {}
- name: getAccountTransactions
  endpoint:
    path: /data/getAccountTransactions
    method: GET
    data_selector: transactions
    params: {}
- name: getCategorizedAccountTransactions
  endpoint:
    path: /data/getCategorizedAccountTransactions
    method: GET
    data_selector: transactions
    params: {}
- name: getEnrichedAccountTransactions
  endpoint:
    path: /data/getEnrichedAccountTransactions
    method: GET
    data_selector: transactions
    params: {}
- name: getCards
  endpoint:
    path: /data/getCards
    method: GET
    data_selector: Cards
    params: {}
- name: getCardBalance
  endpoint:
    path: /data/getCardBalance
    method: GET
    data_selector: balance
    params: {}
- name: connection
  endpoint:
    path: /v3/connection
    method: GET
    data_selector: queryItems
- name: getCardTransactions
  endpoint:
    path: /getCardTransactions
    method: GET
    data_selector: transactions
- name: getBeneficiaries
  endpoint:
    path: /getBeneficiaries
    method: GET
    data_selector: beneficiaries
- name: createBeneficiary
  endpoint:
    path: /createBeneficiary
    method: POST
    data_selector: response
- name: createTransfer
  endpoint:
    path: /createTransfer
    method: POST
    data_selector: reference
- name: transferAutoFlow
  endpoint:
    path: /transferAutoFlow
    method: POST
    data_selector: reference
- name: createPull
  endpoint:
    path: /createPull
    method: POST
    data_selector: response
- name: ach_getPull
  endpoint:
    method: GET
- name: getIdentity
  endpoint:
    path: /getIdentity
    method: GET
- name: getAccounts
  endpoint:
    path: /getAccounts
    method: GET
- name: getBalance
  endpoint:
    path: /getBalance
    method: GET
- name: getTransactions
  endpoint:
    path: /getTransactions
    method: GET
- name: get_identity
  endpoint:
    path: /data/getIdentity
    method: POST
    data_selector: identity
- name: get_accounts
  endpoint:
    path: /data/getAccounts
    method: POST
    data_selector: accounts
- name: getAccountBalance
  endpoint:
    path: /data/getAccountBalance
    method: GET
    data_selector: balance
- name: getAccountTransactions
  endpoint:
    path: /data/getAccountTransactions
    method: GET
    data_selector: transactions
- name: getCategorizedAccountTransactions
  endpoint:
    path: /data/getCategorizedAccountTransactions
    method: GET
    data_selector: transactions
- name: getEnrichedAccountTransactions
  endpoint:
    path: /data/getEnrichedAccountTransactions
    method: GET
    data_selector: transactions
- name: getCards
  endpoint:
    path: /data/getCards
    method: GET
    data_selector: Cards
- name: getCardBalance
  endpoint:
    path: /data/getCardBalance
    method: GET
    data_selector: balance
- name: categorized_transactions
  endpoint:
    path: /getCategorizedTransactions
    method: POST
    data_selector: transactions
    params:
      accountID: REQUIRED
      fromDate: REQUIRED
      toDate: REQUIRED
      accessToken: REQUIRED
      userSecret: REQUIRED
- name: enriched_transactions
  endpoint:
    path: /getEnrichedTransactions
    method: POST
    data_selector: transactions
    params:
      accountID: REQUIRED
      fromDate: REQUIRED
      toDate: REQUIRED
      accessToken: REQUIRED
      userSecret: REQUIRED
- name: beneficiaries
  endpoint:
    path: /getBeneficiaries
    method: POST
    data_selector: beneficiaries
    params:
      accessToken: REQUIRED
      userSecret: REQUIRED
- name: create_beneficiary
  endpoint:
    path: /createBeneficiary
    method: POST
    data_selector: reference
    params:
      beneficiary: REQUIRED
      accessToken: REQUIRED
      userSecret: REQUIRED
- name: create_transfer
  endpoint:
    path: /createTransfer
    method: POST
    data_selector: reference
    params:
      transfer: REQUIRED
      accessToken: REQUIRED
      userSecret: REQUIRED
- name: transfer_autoflow
  endpoint:
    path: /transferAutoflow
    method: POST
    data_selector: reference
    params:
      transfer: REQUIRED
      accessToken: REQUIRED
      userSecret: REQUIRED
- name: ach_create_pull
  endpoint:
    path: /ach/createPull
    method: POST
    data_selector: response
    params:
      accessToken: REQUIRED
      userSecret: REQUIRED
      transfer: REQUIRED
- name: ach_get_pull
  endpoint:
    path: /ach/getPull
    method: POST
    data_selector: transfer
    params:
      accessToken: REQUIRED
      userSecret: REQUIRED
      operationID: REQUIRED
- name: getCardTransactions
  endpoint:
    path: /getCardTransactions
    method: GET
    data_selector: transactions
- name: getBeneficiaries
  endpoint:
    path: /getBeneficiaries
    method: GET
    data_selector: beneficiaries
- name: createBeneficiary
  endpoint:
    path: /createBeneficiary
    method: POST
    data_selector: beneficiary
- name: createTransfer
  endpoint:
    path: /createTransfer
    method: POST
    data_selector: reference
- name: transferAutoFlow
  endpoint:
    path: /transferAutoFlow
    method: POST
    data_selector: reference
- name: createPull
  endpoint:
    path: /createPull
    method: POST
    data_selector: Base Response
- name: getPull
  endpoint:
    method: GET
- name: getIdentity
  endpoint:
    path: /getIdentity
    method: GET
- name: getAccounts
  endpoint:
    path: /getAccounts
    method: GET
- name: getBalance
  endpoint:
    path: /getBalance
    method: GET
- name: getTransactions
  endpoint:
    path: /getTransactions
    method: GET
- name: getIdentity
  endpoint:
    path: /get-identity
    method: GET
- name: getAccounts
  endpoint:
    path: /get-accounts
    method: GET
- name: getBalance
  endpoint:
    path: /get-balance
    method: GET
- name: getTransactions
  endpoint:
    path: /get-transactions
    method: GET
- name: categorized_transactions
  endpoint:
    path: /getCategorizedTransactions
    method: GET
    data_selector: transactions
- name: enriched_transactions
  endpoint:
    path: /getEnrichedTransactions
    method: GET
    data_selector: transactions
- name: beneficiaries
  endpoint:
    path: /getBeneficiaries
    method: GET
    data_selector: beneficiaries
- name: create_beneficiary
  endpoint:
    path: /createBeneficiary
    method: POST
- name: create_transfer
  endpoint:
    path: /createTransfer
    method: POST
- name: transfer_autoflow
  endpoint:
    path: /transferAutoflow
    method: POST
- name: ach_create_pull
  endpoint:
    path: /ach/createPull
    method: POST
- name: ach_get_pull
  endpoint:
    path: /ach/getPull
    method: GET
- name: createPull
  endpoint:
    path: /createPull
    method: POST
    data_selector: transfer
    params: {}
- name: getPull
  endpoint:
    path: /getPull
    method: GET
    data_selector: transfer
    params: {}
- name: getIdentity
  endpoint:
    path: /getIdentity
    method: POST
- name: getAccounts
  endpoint:
    path: /getAccounts
    method: POST
- name: getBalance
  endpoint:
    path: /getBalance
    method: POST
- name: getTransactions
  endpoint:
    path: /getTransactions
    method: POST
- name: getIdentity
  endpoint:
    path: /getIdentity
    method: GET
- name: getAccounts
  endpoint:
    path: /getAccounts
    method: GET
- name: getBalance
  endpoint:
    path: /getBalance
    method: GET
- name: getTransactions
  endpoint:
    path: /getTransactions
    method: GET
- name: categorized_transactions
  endpoint:
    path: /getCategorizedTransactions
    method: POST
- name: enriched_transactions
  endpoint:
    path: /getEnrichedTransactions
    method: POST
- name: beneficiaries
  endpoint:
    path: /getBeneficiaries
    method: POST
- name: create_beneficiary
  endpoint:
    path: /createBeneficiary
    method: POST
- name: create_transfer
  endpoint:
    path: /createTransfer
    method: POST
- name: transfer_autoflow
  endpoint:
    path: /transferAutoflow
    method: POST
- name: createPull
  endpoint:
    path: /ach/createPull
    method: POST
    data_selector: response
- name: getPull
  endpoint:
    path: /ach/getPull
    method: GET
    data_selector: response
- name: categorized_transactions
  endpoint:
    path: /getCategorizedTransactions
    method: GET
    params:
      accountID: REQUIRED
      fromDate: REQUIRED
      toDate: REQUIRED
      accessToken: REQUIRED
      userSecret: REQUIRED
- name: enriched_transactions
  endpoint:
    path: /getEnrichedTransactions
    method: GET
    params:
      accountID: REQUIRED
      fromDate: REQUIRED
      toDate: REQUIRED
      accessToken: REQUIRED
      userSecret: REQUIRED
- name: beneficiaries
  endpoint:
    path: /getBeneficiaries
    method: GET
    params:
      accessToken: REQUIRED
      userSecret: REQUIRED
- name: create_beneficiary
  endpoint:
    path: /createBeneficiary
    method: POST
    params:
      beneficiary: REQUIRED
      accessToken: REQUIRED
      userSecret: REQUIRED
- name: create_transfer
  endpoint:
    path: /createTransfer
    method: POST
    params:
      transfer: REQUIRED
      accessToken: REQUIRED
      userSecret: REQUIRED
- name: transfer_autoflow
  endpoint:
    path: /transferAutoflow
    method: POST
    params:
      transfer: REQUIRED
      accessToken: REQUIRED
      userSecret: REQUIRED
- name: create_ach_transfer
  endpoint:
    path: /createACHTransfer
    method: POST
    params:
      accessToken: REQUIRED
      userSecret: REQUIRED
      transfer: REQUIRED
- name: get_ach_pull
  endpoint:
    path: /getACHPull
    method: GET
    params:
      accessToken: REQUIRED
      userSecret: REQUIRED
      operationID: REQUIRED
- name: GetIdentity
  endpoint:
    path: /data/get-identity
    method: GET
- name: GetAccounts
  endpoint:
    path: /data/get-accounts
    method: GET
- name: GetBalance
  endpoint:
    path: /data/get-balance
    method: GET
- name: GetTransactions
  endpoint:
    path: /data/get-transactions
    method: GET
- name: getIdentity
  endpoint:
    path: /getIdentity
    method: GET
- name: getAccounts
  endpoint:
    path: /getAccounts
    method: GET
- name: getBalance
  endpoint:
    path: /getBalance
    method: GET
- name: getTransactions
  endpoint:
    path: /getTransactions
    method: GET
- name: GetCategorizedTransactions
  endpoint:
    method: GET
- name: GetEnrichedTransactions
  endpoint:
    method: GET
- name: GetBeneficiaries
  endpoint:
    method: GET
- name: CreateBeneficiary
  endpoint:
    method: POST
- name: CreateTransfer
  endpoint:
    method: POST
- name: TransferAutoflow
  endpoint:
    method: POST
- name: createPull
  endpoint:
    method: POST
- name: getPull
  endpoint:
    method: GET
- name: categorized_transactions
  endpoint:
    path: /getCategorizedTransactions
    method: POST
- name: enriched_transactions
  endpoint:
    path: /getEnrichedTransactions
    method: POST
- name: beneficiaries
  endpoint:
    path: /getBeneficiaries
    method: POST
- name: create_beneficiary
  endpoint:
    path: /createBeneficiary
    method: POST
- name: create_transfer
  endpoint:
    path: /createTransfer
    method: POST
- name: transfer_autoflow
  endpoint:
    path: /transferAutoflow
    method: POST
- name: createPull
  endpoint:
    method: POST
    params:
      accessToken: REQUIRED
      userSecret: REQUIRED
      transfer: REQUIRED
      operationID: OPTIONAL
      userInputs: OPTIONAL
- name: getPull
  endpoint:
    method: GET
    params:
      accessToken: REQUIRED
      userSecret: REQUIRED
      operationID: REQUIRED
      userInputs: OPTIONAL
- name: identity
  endpoint:
    path: /data/getIdentity
    method: GET
- name: accounts
  endpoint:
    path: /data/getAccounts
    method: GET
- name: balance
  endpoint:
    path: /data/getBalance
    method: GET
- name: transactions
  endpoint:
    path: /data/getTransactions
    method: GET
- name: categorized_transactions
  endpoint:
    path: /data/getCategorizedTransactions
    method: GET
- name: enriched_transactions
  endpoint:
    path: /data/getEnrichedTransactions
    method: GET
- name: beneficiaries
  endpoint:
    path: /payment/getBeneficiaries
    method: GET
- name: create_beneficiary
  endpoint:
    path: /payment/createBeneficiary
    method: POST
- name: create_transfer
  endpoint:
    path: /payment/createTransfer
    method: POST
- name: transfer_autoflow
  endpoint:
    path: /payment/transferAutoflow
    method: POST
- name: GetIdentity
  endpoint:
    path: /data/get-identity
    method: GET
- name: GetAccounts
  endpoint:
    path: /data/get-accounts
    method: GET
- name: GetBalance
  endpoint:
    path: /data/get-balance
    method: GET
- name: GetTransactions
  endpoint:
    path: /data/get-transactions
    method: GET
- name: createPull
  endpoint:
    method: POST
    params:
      accessToken: String
      userSecret: String
      transfer: Object<Transfer>
      operationID: String
      userInputs: Array<userInputs>
- name: getPull
  endpoint:
    method: GET
    params:
      accessToken: String
      userSecret: String
      operationID: String
      userInputs: Array<userInputs>
- name: GetCategorizedTransactions
  endpoint:
    path: /data/getCategorizedTransactions
    method: GET
- name: GetEnrichedTransactions
  endpoint:
    path: /data/getEnrichedTransactions
    method: GET
- name: GetBeneficiaries
  endpoint:
    path: /payment/getBeneficiaries
    method: GET
- name: CreateBeneficiary
  endpoint:
    path: /payment/createBeneficiary
    method: POST
- name: CreateTransfer
  endpoint:
    path: /payment/createTransfer
    method: POST
- name: TransferAutoflow
  endpoint:
    path: /payment/transferAutoflow
    method: POST
- name: auto_flow
  endpoint:
    path: /auto-flow
    method: POST
    data_selector: response
    params: {}
- name: createPull
  endpoint:
    method: POST
- name: getPull
  endpoint:
    method: GET
- name: Get Accounts
  endpoint:
    path: /get-accounts
    method: GET
- name: Get Complete Accounts
  endpoint:
    path: /get-complete-accounts
    method: GET
- name: Transfer Auto Flow
  endpoint:
    path: /transfer-auto-flow
    method: POST
- name: identity
  endpoint:
    path: /data/getIdentity
    method: GET
    data_selector: identity
- name: accounts
  endpoint:
    path: /data/getAccounts
    method: GET
    data_selector: Accounts
- name: balance
  endpoint:
    path: /data/getBalance
    method: GET
    data_selector: Balance
- name: transactions
  endpoint:
    path: /data/getTransactions
    method: GET
    data_selector: Transactions
- name: categorized_transactions
  endpoint:
    path: /data/getCategorizedTransactions
    method: GET
- name: enriched_transactions
  endpoint:
    path: /data/getEnrichedTransactions
    method: GET
- name: beneficiaries
  endpoint:
    path: /payment/getBeneficiaries
    method: GET
- name: create_beneficiary
  endpoint:
    path: /payment/createBeneficiary
    method: POST
- name: create_transfer
  endpoint:
    path: /payment/createTransfer
    method: POST
- name: transfer_autoflow
  endpoint:
    path: /payment/transferAutoflow
    method: POST
- name: get_banks_status
  endpoint:
    path: /v2/banks/status/getAll
    method: POST
    data_selector: banks
    params: {}
- name: createPull
  endpoint:
    method: POST
- name: getPull
  endpoint:
    method: GET
- name: Auto Flow
  endpoint:
    path: /auto-flow
    method: POST
    data_selector: response
    params: {}
- name: banks_status
  endpoint:
    path: /v2/banks/status/getAll
    method: POST
    data_selector: banks
    params: {}
- name: Identification Types
  endpoint:
    path: /identification-types
    method: GET
- name: routing_number_types
  endpoint:
    path: /routing-numbers
    method: GET
    data_selector: routing_numbers
- name: Get Categorized Transactions
  endpoint:
    path: /data-api/get-categorized-transactions
    method: GET
    data_selector: transactions
- name: Get Transactions
  endpoint:
    path: /data-api/get-transactions
    method: GET
    data_selector: transactions
notes:
- Jobs have been renamed to operations in V2.
- API no longer supports Job Resume endpoint.
- Uses OAuth2 with refresh token — requires setup of connected app in api
- Each bank has its own authentication process with different MFA types and requests.
- Adding a beneficiary includes a beneficiary cooldown period that corresponds to
  the bank's production environment.
- Some banks have alternative flows, such as lack of adding a beneficiary for Liv
  bank.
- If you want to explore or integrate using the sandbox environment, make sure to
  first create at least two Sandbox Users on Dapi Dashboard.
- 'Sandbox user restrictions: All endpoints can only be used on sandbox users. You
  cannot send money or interact with real users using the sandbox environment.'
- Absolute majority of the Dapi API endpoints require user access Token to be specified
  as Bearer in the Authorization Header.
- The API might require user input several times in a row.
- Bearer Token is required for most endpoints
- The API might require user input for operation confirmation
- accessToken is required to make any following API calls to Dapi to retrieve data
  or initiate payments.
- Access Code is only valid for 30 minutes.
- Permanent access token is required for making API calls.
- Set type to bearer token and the value to the accessToken obtained using the Exchange
  Token request.
- This method does not require specification of the currency in which the transaction
  must be performed.
- For more information and detailed breakdown of possible errors, please see Errors.
- You have obtained the user's permanent access token from the Exchange Token endpoint.
- You have obtained user's permanent access token from `Exchange Token` endpoint.
- This endpoint is only required if you use the `Create Transfer` instead of the `AutoFlow`
  endpoint and the sender bank requires a beneficiary.
- Some of the banks require recipient to be registered as a beneficiary of the user
  in order to process a transaction.
- Some of the banks also have cool-down period activated after adding the beneficiary.
- Some of the banks also require beneficiary information to be specified together
  with receiverID for the first transaction to the beneficiary.
- Private token generated at application creation is required.
- Encrypted version of the userKey is required.
- Required parameters may be different for certain banks.
- Information returned differs for each bank. The document describes all the information
  that can possibly be returned by the service, but depending on the bank, not all
  of this data may be provided.
- You have obtained user's permanent access token from `Exchange Token` endpoint
- Your responses may differ from those listed below on a case-by-case basis.
- You have obtained user's permanent access token from Exchange Token endpoint
- To read more about authentication process and access token please refer to Authentication
  Documentation
- Some objects may return nulls in deeply nested fields
- Authorization header must include bearer token obtained from the Exchange Token
  request.
- You have obtained user's permanent access token from Exchange Token endpoint.
- To read more about authentication process and access token please refer to Authentication
  Documentation.
- Requires user's permanent access token obtained from Exchange Token endpoint.
- Operations provides a single endpoint, that can be used to obtain status of any
  of the previous request made to Dapi.
- You have obtained accessCode & connectionID from the response of user's successful
  authentication in Connect layer
- 'Pre-Requirement: You have obtained user''s permanent access token from `Exchange
  Token` endpoint'
- Dapi API does not support parallel API calls for the same bank account.
- Dapi has an internal timeout at 240 seconds for payment/transfer/autoflow and wire/transfer/autoflow,
  and 120 seconds for all other endpoints.
- The SDKs offer a level of abstraction and take care of the overhead of setting up
  an API call.
- The SDKs have built-in logic to handle more complex situations like asking for an
  OTP from the user during a transfer.
- Server-based set-up is the most secure way of setting up interactions between your
  users and Dapi.
- Serverless set-up requires less development work, but cannot ensure the same level
  of security as the server-based set-up.
- Replace YOUR_APP_SECRET with the appSecret of your Dapi app
- Assuming that Dapi library is already autoloaded. If not, manually include/require
  it here.
- Follow the steps in Configure Project first in order to obtain and import the library.
- The SDKs automatically handle retrieving user's permanent accessToken upon successful
  login.
- Create a Dapi app and products instances with your App Secret.
- All Bank Connections need to be established through Dapi's Connect Layer.
- Data APIs provide all the functionality required to obtain information about your
  users and their financial data.
- Date range of the transactions that can be retrieved varies for each bank.
- Using the SDK requires configuring a backend server.
- If you do not use AutoFlow you will be responsible for handling beneficiary addition
  based on each bank's requirements.
- Web SDK does not support automatic displaying of error messages for Data and Payment
  API endpoints.
- Web SDK does not support showing loading screens between Data and Payment API calls.
- 'Caching for the Web SDK can work in 2 different ways: browser level caching or
  storing the object from the cache on your backend.'
- The clientUserID needs to be unique per user on your app.
- The server can be easily set up on your local machine.
- Uses SDK version 2.0.0 and above for UI customization.
- A Bank Connection represents a user's connection to one bank.
- You need to handle beneficiary existence checks.
- When receiving INVALID_CREDENTIALS or INVALID_CONNECTION error, the bank connection
  should be abandoned.
- If the date range you provide is bigger than the transactionRange you'll get INVALID_DATE_RANGE
  error.
- The environment value is sandbox or production.
- Dapi AutoFlow is recommended for initiating payments.
- Supports light and dark mode themes.
- Can enable network logging.
- No special characters allowed in the remark field
- Must handle beneficiary addition based on each bank's requirements
- Dapi AutoFlow - The easiest and most efficient way to facilitate payments.
- Handles wire beneficiary addition based on each bank's requirements.
- Requires setup of bank connection.
- Date range of the transactions that can be retrieved varies for each bank. The range
  supported by the users bank is shown in the response parameter transactionRange
  of Get Accounts Metadata endpoint. If the date range you provide is bigger than
  the transactionRange you'll get INVALID_DATE_RANGE error.
- Any errors that occur will be passed to you as an Error object in swift and NSError.
- ClientUserID is used to distinguish between different users on the same device.
  Update the clientUserID once the user logs out and another user logs in.
- INVALID_CREDENTIALS or INVALID_CONNECTION indicates that the user has updated their
  online banking credentials.
- No special characters allowed in remark or beneficiary details.
- Please double-check that you are only passing in alpha-numeric values in the beneficiary
  information. Including special characters in any of the fields will result in errors
  later on.
- Make sure you have handled the beneficiary cooldown period. Receiving this error
  means that beneficiary activation will take time from the bank side and the user
  must wait for the cooldown period to end before attempting the transfer again.
- If yes, make sure you are leveraging the remark field in payment/transfer/autoflow
  or payment/transfer/create. The remark field can hold any value set by you. It would
  be useful to use a value that uniquely identifies the transfer on your application
  side.
- NB! No special characters are allowed in the remark field.
- TRANSFER_CONFRIMATION_FAILED is a special error that we recommend handling. The
  error means that at the very last step of the transfer the bank returns a general
  error message.
- Dapi AutoFlow Wire Transfer is recommended for initiating payments.
- ClientUserID is used to distinguish between different end-users.
- ClientUserID is used to distinguish between different users on the same device.
- This guide will help you handle and troubleshoot errors that may occur while using
  Dapi iOS SDK.
- A connection represents a user's connection to a bank.
- Uses DAPIBankConnection for API calls.
- Requires description to track the transaction.
- ClientUserID is used to distinguish between different users on the same device.
  The value for ClientUserID needs to be set by you. We recommend setting clientUserID
  to your actual user ID that you use to distinguish between users. You should update
  the clientUserID once the user logs out and another user logs in.
- 'INVALID_CREDENTIALS or INVALID_CONNECTION: When receiving this error, the bank
  account should be connected again. Depending on your flow, you can do one or multiple
  of those steps: Delete the connection Dapi.delink(bankConnection: bankConnection)
  or Prompt the user to reconnect the bank account.'
- If your logic is relying on bankIDs, then note that sandbox and production bankIDs
  are different.
- Dapi has an internal timeout at 300 seconds for createTransfer and createWireTransfer
  and 120 seconds for all other endpoints.
- If yes, make sure you are leveraging the remark field in payment/transfer/autoflow
  or payment/transfer/create.
- The remark field can hold any value set by you. It would be useful to use a value
  that uniquely identifies the transfer on your application side.
- In order to be sure that the entire value can be used, we recommend keeping the
  remark shorter than 15 characters.
- No special characters are allowed in the remark field.
- createTransfer abstracts all requirements for adding a beneficiary and initiating
  a transfer.
- Uses OAuth2 with refresh token — requires setup of connected app in Dapi
- Some APIs may return nulls in deeply nested fields
- CreateWireTransfer is recommended for initiating payments.
- CLIENTUSERID needs to be set by you to distinguish between different users on the
  same device.
- If receiving INVALID_CREDENTIALS or INVALID_CONNECTION, the bank account should
  be connected again.
- Some banks do not allow immediate transfers to a newly added beneficiary. Beneficiary
  Cooldown time shows how long the user needs to wait before they can make a transfer
  to a newly added beneficiary.
- Uses OAuth2 for authentication
- Date range of the transactions that can be retrieved varies for each bank. The range
  supported by the users bank is shown in the response parameter `transactionRange`
  of `Get Accounts Metadata` endpoint.
- If the date range you provide is bigger than the `transactionRange` you'll get `INVALID_DATE_RANGE`
  error.
- If the date range you provide is bigger than the transactionRange, you'll get INVALID_DATE_RANGE
  error.
- Dapi recommends using createTransfer to initiate a payment.
- Make sure you have handled the beneficiary cooldown period.
- Double-check that you are only passing in alpha-numeric values in the beneficiary
  information.
- A common issue in the Flutter Framework is that Flutter Views may receive touches
  and events even if hidden behind another ViewComtroller.
- createTransfer is recommended for initiating payments
- createTransferToExistingBeneficiary requires additional bank processing logic
- createTransfer automatically takes care of all requirements for adding a beneficiary
  as well as initiating a transfer.
- If using createTransferToExistingBeneficiary, implement bank processing logic and
  validations on your end.
- Dapi recommends using createWireTransfer to initiate a payment.
- Beneficiary Not Activated error on Sandbox occurs if transfer details are incorrect.
- clientUserID is used to keep track of the bank connections in the cache.
- Sandbox and production bankIDs are different.
- Set to DapiEnvironment.PRODUCTION for production release and DapiEnvironment.SANDBOX
  for testing.
- Uses OAuth2 for authentication.
- User must select a bank and enter credentials to create a connection.
- 'The method for GetTransactions requires parameters: account, fromDate, and toDate.'
- If you use createTransferToExistingBeneficiary you have to implement bank processing
  logic and validations on your end.
- createWireTransfer is recommended for initiating payments.
- Connect Layer is only required if you are not using SDK.
- Requires appKey created on Dapi Dashboard
- Capture the success and failure responses
- You will require accessCode, userSecret and connectionID when calling Exchange Token
  in order to obtain a permanent accessToken for the user.
- userSecret value will be required as a parameter in all of the following Data and
  Payment API calls.
- Connect Layer provides a client-side functionality that allows you to authenticate
  user with their bank and retrieve accessCode required to obtain user’s permanent
  token.
- Requires setup of connected app in api
- Requires successful login to Connect for access.
- User secret is required for API calls.
- Connect Layer provides a client-side functionality that allows you to authenticate
  user with their bank and retrieve accessCode required to obtain user's permanent
  token.
- You will require accessCode and connectionID when calling Exchange Token in order
  to obtain a permanent accessToken for the user.
- Requires accessCode, userSecret, and connectionID for obtaining permanent accessToken.
- Connect Layer provides functionality to authenticate users with their bank and retrieve
  accessCode.
- The environment is set to sandbox.
- You need to replace the placeholders in this code snippet(appSecret, accessToken,
  userSecret) with your own values, and to handle the response received.
- Access Token obtained using Exchange Token method.
- Auto-Flow abstracts all validations required by the banks.
- Make sure to take user MFAs into account.
- Handle BENEFICIARY_COOL_DOWN_ERROR
- Access Code is only valid for 30 minutes. It must be exchanged for Access Token
  within this 30 minutes, otherwise the code will become ineffective.
- SDKs handle MFAs automatically
- API might request user input several times in a row.
- For `otp`, `secret_question`, `captcha`, `pin`, `confirmation` and `token` you simply
  need to populate the `answer` field with the value that is given to you by the user.
- For `multiple_choice` type the answer has to be the index number of the item that
  was chosen from the `queryOptionsList`.
- An empty countries list will return results for all countries.
- Environment can be either 'production' or 'sandbox'.
- Category can be 'primary', 'secondary', or 'all'.
- Dapi introduced Auto-Flow endpoint starting with V2 of the API.
- Make sure to handle BENEFICIARY_COOL_DOWN_ERROR
- Access Code is only valid for 30 minutes. It must be exchanged for Access Token
  within this 30 minutes.
- For otp, secret_question, captcha, pin, confirmation and token you simply need to
  populate the answer field with the value that is given to you by the user.
- For multiple_choice type the answer has to be the index number of the item that
  was chosen from the queryOptionsList.
- 'Countries: an empty list will return results for all countries'
- 'Environment: enum values are ''production'', ''sandbox'''
- 'Category: enum values are ''primary'', ''secondary'', ''all'''
- Routing numbers are only returned for accounts from US banks.
- Transaction categories are specific to the MENA region.
- Access tokens allow your app to access the Dapi API. They are permanent for the
  user.
- Some banks require cool-down period before allowing you to transfer amount to newly
  added beneficiary.
errors:
- '401 Unauthorized: Recheck OAuth scopes or token expiration'
- 'INVALID_ARGS: Validation error on field ''connectionID''. Error: value must not
  be an empty string'
- 'INVALID_TOKEN: Invalid token'
- '401 Unauthorized: Recheck access code or connection ID'
- 'UNAUTHORIZED: Token delinked'
- 'Invalid access token: Invalid token specified in request'
- 'UNAUTHORIZED: Invalid access token'
- 'failed: Invalid access token'
- 'Invalid access token: Invalid access token'
- 'UNAUTHORIZED: Invalid token specified in request'
- 'INVALID_ACCOUNT_ID: Account ID is invalid.'
- 'failed: Invalid/expired token or invalid secret'
- '422: The ''jwt'' field is required.'
- 'VALIDATION_ERROR: Validation error occurred'
- 'REQUEST_LIMIT_EXCEEDED: Throttle API calls or reduce frequency'
- 'QUERY_TIMEOUT: Break down filters or add selectivity'
- Invalid JSON request
- Invalid access token
- 'BAD_REQUEST: Invalid JSON request'
- UNAUTHORIZED
- 'Missing params: amount.'
- '422: The ''appSecret'' field is required'
- 'BAD_REQUEST: The ''appSecret'' field is required'
- 'PARAMETER_MISSING: Missing params: amount.'
- 'BAD_REQUEST: The request is invalid'
- 'failed: The request was not successful'
- 'Invalid JSON request: Invalid JSON request'
- 'failed: Request failed'
- '401 Unauthorized: Recheck access token or permissions'
- '401 Unauthorized: Recheck access token'
- 'INVALID_JSON: Invalid JSON request'
- '401 Unauthorized: Set type to bearer token and the value to the accessToken'
- BAD_REQUEST
- 'msg: Account ID is invalid.'
- 'type: INVALID_ACCOUNT_ID'
- 'msg: Invalid access token'
- 'type: UNAUTHORIZED'
- 'INVALID_DATE_FORMAT: fromDate must be before toDate'
- '401 Unauthorized: Set type to bearer token and the value to the accessToken obtained
  using the Exchange Token request.'
- '401 Unauthorized: Ensure access token is valid.'
- 'validation error on field ''operationID''. err: value must not be an empty string'
- Operation not found
- fromDate must be before toDate
- Invalid/expired token or invalid secret
- The 'appSecret' field is required.
- 'INVALID_CREDENTIALS: The user should connect their account again via the Connect
  Layer.'
- 'TRANSFER_CONFRIMATION_FAILED: Check with the end-user when this error message is
  received.'
- '401 Unauthorized: Check app key and secret'
- '504: Having a shorter timeout on your end can result in occasional 504 errors.'
- 'INVALID_DATE_RANGE: Date range provided is bigger than the transactionRange.'
- API Responded with an error
- 'INVALID_CREDENTIALS: The bank connection should be abandoned.'
- 'DIALOGUE_BOX_CLOSED: User dismissed the MFA modal without inputting the required
  answers'
- 'INVALID_CREDENTIALS: Abandon bank connection.'
- 'INVALID_CONNECTION: Update bank account details.'
- '504: Shorter timeout can lead to this error.'
- 'INVALID_DATE_RANGE: Provided date range exceeds the supported range.'
- DIALOGUE_BOX_CLOSED
- '400 Bad Request: Check provided parameters and their types.'
- '401 Unauthorized: Ensure valid bank connection.'
- '404 Not Found: Beneficiary or account not found.'
- 'INVALID_DATE_RANGE: The provided date range is outside of the supported transaction
  range.'
- 'dapiErrorType: Error type.'
- 'dapiErrorMessage: Error message.'
- 'dapiOperationID: Unique ID generated by Dapi to identify a specific operation.'
- 'BENEFICIARY_COOL_DOWN_PERIOD: Error indicating the user must wait before making
  a transfer to a newly added beneficiary'
- 'INVALID_CREDENTIALS: The user has updated their online banking credentials.'
- '504: Indicates a timeout, possibly due to a shorter timeout setting on your end.'
- 'Error: Handling beneficiary existence checks.'
- 'Error: Setting up a way to call the Accounts API to obtain the sender account information.'
- 'BENEFICIARY_COOL_DOWN_PERIOD: Error type indicating the beneficiary cooldown period'
- '401 Unauthorized: Recheck authentication parameters'
- '400 Bad Request: Check required parameters and their formats'
- 'INVALID_CONNECTION: The user has updated their online banking credentials.'
- '504: Resolving a request with the bank can take longer.'
- 'INVALID_DATE_RANGE: The provided date range exceeds the allowed range.'
- 'TRANSFER_CONFRIMATION_FAILED: This can happen sometimes due to the bank''s side
  internal errors.'
- 'Beneficiary Not Activated: Ensure beneficiary details are correct in Sandbox.'
- 'INVALID_CREDENTIALS: The bank account should be connected again.'
- 'BENEFICIARY_COOL_DOWN_PERIOD: Handle cooldown period before retrying transfer.'
- 'INVALID_DATE_RANGE: Date range provided exceeds the supported transaction range.'
- 'INVALID_CREDENTIALS: Reconnect the bank account.'
- 'TRANSFER_CONFIRMATION_FAILED: Check with the end-user when this error message is
  received.'
- 'BENEFICIARY_COOL_DOWN_PERIOD: Wait before transferring to a newly added beneficiary'
- 'BENEFICIARY_COOL_DOWN_PERIOD: Wait for the beneficiary cooldown period to complete
  before retrying'
- 'INVALID_INPUT: Check the input parameters provided'
- 'AUTHENTICATION_ERROR: Verify your authentication credentials'
- 'NETWORK_ERROR: Ensure you have a stable network connection'
- 'INVALID_DATE_RANGE: Ensure the date range is within the transaction range supported
  by the bank.'
- 'INVALID_DATE_RANGE: Ensure the date range doesn''t exceed the transaction range.'
- 'Beneficiary Not Activated: Ensure details are correct for sandbox transfers'
- 'Beneficiary Not Activated: Ensure beneficiary details are correct for the sandbox.'
- 'Beneficiary Not Activated: Ensure beneficiary details are correct and belong to
  a sandbox user.'
- 'INVALID_CREDENTIALS or INVALID_CONNECTION: The bank account should be connected
  again.'
- 'TRANSFER_CONFRIMATION_FAILED: At the very last step of the transfer the bank returns
  a general error message.'
- 'BENEFICIARY_COOL_DOWN_PERIOD: Wait before transferring to newly added beneficiary'
- 'BENEFICIARY_COOL_DOWN_PERIOD: Wait before making a transfer to a newly added beneficiary'
- 'DapiSdkException: Handle errors by catching DapiSdkException'
- 'Invalid input: Check parameters for createTransfer function'
- 'Authentication issues: Verify authentication setup'
- 'Network errors: Ensure network connectivity'
- '401 Unauthorized: Check credentials or authentication status.'
- '400 Bad Request: Verify request parameters and data format.'
- 'INVALID_DATE_RANGE: The provided date range exceeds the allowed transaction range.'
- 'INVALID_DATE_RANGE: The provided date range exceeds the transaction range limits.'
- 'Beneficiary Not Activated: Make sure to use valid beneficiary details.'
- 'Beneficiary Not Activated: Ensure beneficiary details are accurate in Sandbox.'
- 'Beneficiary Not Activated: Ensure beneficiary details are correct.'
- 'INVALID_CREDENTIALS: When receiving this error, the bank account should be connected
  again.'
- '401 Unauthorized: Check API keys or authentication setup'
- '401 Unauthorized: Invalid token or expired token.'
- '400 Bad Request: Check input parameters.'
- '403 Forbidden: Permission denied.'
- 'TRANSFER_CONFIRMATION_FAILED: At the very last step of the transfer the bank returns
  a general error message.'
- 'error: Failed to connect'
- 'status: string'
- 'success: boolean'
- '401 INACTIVE_ACCOUNT: Provided account number is incorrect or inactive. | Verify
  that the request body contains valid values for request parameters or contact your
  bank.'
- '401 INVALID_CREDENTIALS: Your user entered invalid login credentials. | Prompt
  the user to try again.'
- '401 INVALID_MFA: Your user has entered invalid MFA information (OTP, Secret Question).
  | Prompt the user to try again.'
- '404 INVALID_ACCOUNT_ID: Provided account ID is incorrect. | Verify that the request
  body contains valid identifiers.'
- '404 INVALID_CARD_ID: Provided card ID is incorrect. | Verify that the request body
  contains valid identifiers.'
- '400 INVALID_DATE_RANGE: Provided date range is not supported by the bank. | Enter
  a date range of up to `x` days.'
- '400 PARAMETER_ERROR: Your request body contains incorrect parameters. | Verify
  that your request body is properly formatted in accordance to our endpoints.'
- '422 PARAMETER_MISSING: Your request body is missing necessary parameters. | Verify
  that your request body is properly formatted in accordance to our endpoints.'
- '400 INSUFFICIENT_BALANCE: The user''s account does not have sufficient balance
  for this transaction. | Check the balance and try a different amount.'
- '400 BENEFICIARY_NOT_ACTIVATED: Beneficiary has not been activated as two factor
  authentication is required. | Prompt the user to take necessary further action.'
- '400 BENEFICIARY_COOL_DOWN_PERIOD: New beneficiary will be activated for fund transfer
  after x hour(s). | Attempt transactions once this cool down period has elapsed.'
- '400 BENEFICIARY_ALREADY_EXISTS: A beneficiary with this account number or IBAN
  already exists. | Try the Create Transfer endpoint instead.'
- '401 ACCOUNT_LOCKED: Account locked out due to too many failed login attempts. |
  Prompt the user to reset their password and try again.'
- '401 INACTIVE_ACCOUNT: This account has been deactivated. | Prompt the user to contact
  their bank.'
- '401 DUPLICATE_TRANSFER: The same transaction has already been initiated a short
  time ago. | Initiate a different transfer or try again later.'
- '401 ACCOUNT_FEATURE_LOCKED: This operation is locked by the bank. | Contact your
  bank.'
- '400 DAILY_LIMIT_EXCEEDED: The entered amount exceeds the maximum daily limit set
  by the user. | Inform the user to enter a lesser amount or adjust the daily limit
  from the user''s online banking.'
- '400 TRANSACTION_LIMIT_EXCEEDED: You have exceeded the limit defined for the transaction
  you are trying to execute. | Inform the user to enter a lesser amount or adjust
  the transaction limit from the user''s online banking.'
- '400 USER_LIMIT_EXCEEDED: The amount you have entered exceeds the User limit. |
  Inform the user to enter a lesser amount or adjust the user limit from the user''s
  online banking.'
- '400 PART_OF_ANOTHER_SUBPRODUCT: This endpoint is included in a different type of
  request for this bank (payment/transfer/create). | Try the operation using a different
  type of request.'
- '400 AMOUNT_BELOW_TRANSFER_LIMIT: The bank has a minimum required amount for the
  transfer. The current amount is below the bank''s minimum. | Try the the operation
  with an amount that is at least the minimum transfer limit for the bank.'
- '400 BENEFICIARY_NAME_TAKEN: The bank does not allow multiple beneficiaries with
  the same name. | Try the request again with a different beneficiary name.'
- '400 AMOUNT_ABOVE_TRANSFER_LIMIT: The bank has a maximum amount for the transfer.
  The current amount is above the allowed bank''s maximum. | Try the the operation
  with an amount that is at most the maximum transfer limit for the bank.'
- '400 TRANSFER_CONFIRMATION_FAILED: It is unknown whether the transfer was process.
  Mainly caused by internal bank errors. | Contact the user to determine the result
  of the transfer.'
- '400 BENEFICIARY_NICKNAME_NAME_TAKEN: The bank does not allow multiple beneficiaries
  with the same nickname. | Try the request again with a different beneficiary nickname.'
- '400 BENEFICIARY_NICKNAME_CHARACTER_LIMIT: The bank has a limit on the length of
  the nickname. | Try the request again with a shorter beneficiary nickname.'
- '400 BENEFICIARY_NAME_CHARACTER_LIMIT: The bank has a limit on the length of the
  name. | Try the request again with a shorter beneficiary name.'
- '400 UNABLE_TO_CONNECT_TO_BANK: Failed attempt to connect to the user''s bank. |
  Retry the request.'
- '500 UNKNOWN_ERROR: An unknown interruption occurred while performing your request.
  | Retry the request.'
- '401 SESSION_INVALIDATED: Your user''s session has expired or been terminated by
  the bank. | Retry the request.'
- '400 USER_ALREADY_LOGGED_IN: This bank does not support concurrent login. | Retry
  the request.'
- '503 TEMPORARILY_UNAVAILABLE: An error occurred due to financial institution downtime.
  | Retry the request.'
- 'NOT_FOUND: You are most likely trying to call an endpoint that does not exist.
  Please double-check the URL.'
- 'INVALID_ARGS: Please double-check the arguments you are sending in the request.'
- 'INVALID_TOKEN: Make sure you are using the right token. NB! Make sure you have
  set the `accessToken` as the Bearer Token in the request header.'
- 'INVALID_SECRETS: Double-check the integrity of the secrets that you are using.
  NB! If you are using an SDK, make sure you have added the `appSecret` to the Server.'
- 'BAD_REQUEST: Double-check the format of your request.'
- 'UNAUTHORIZED: You are not authorized to call the endpoint. Make sure your `appKey`
  has the necessary permissions.'
- 'CREATE_TRANSFER_TYPE_NOT_SUPPORTED: We do not currently support this transfer type.'
- 'CREATE_BENEFICIARY_SAME_TYPE_NOT_SUPPORTED: We do not currently support this beneficiary
  type.'
- 'CREATE_BENEFICIARY_TYPE_NOT_SUPPORTED: We do not currently support this beneficiary
  type.'
- 'CREATE_BENEFICIARY_INTL_TYPE_NOT_SUPPORTED: We do not currently support this beneficiary
  type.'
- 'PRODUCT_NOT_SUPPORTED: The endpoint you are trying to connect is currently not
  supported.'
- 'SANDBOX_ACCOUNT_NOT_FOUND: You are trying to interact with a sandbox account that
  does not exist for your `appKey`.  NB! If you are trying to create a transfer, make
  sure that the beneficiary is another sandbox user that you have already created.'
- '401: INACTIVE_ACCOUNT: Provided account number is incorrect or inactive. Verify
  that the request body contains valid values for request parameters or contact your
  bank.'
- '401: INVALID_CREDENTIALS: Your user entered invalid login credentials. Prompt the
  user to try again.'
- '401: INVALID_MFA: Your user has entered invalid MFA information (OTP, Secret Question).
  Prompt the user to try again.'
- '404: INVALID_ACCOUNT_ID: Provided account ID is incorrect. Verify that the request
  body contains valid identifiers.'
- '404: INVALID_CARD_ID: Provided card ID is incorrect. Verify that the request body
  contains valid identifiers.'
- '400: INVALID_DATE_RANGE: Provided date range is not supported by the bank. Enter
  a date range of up to x days.'
- '400: PARAMETER_ERROR: Your request body contains incorrect parameters. Verify that
  your request body is properly formatted in accordance to our endpoints.'
- '422: PARAMETER_MISSING: Your request body is missing necessary parameters. Verify
  that your request body is properly formatted in accordance to our endpoints.'
- '400: INSUFFICIENT_BALANCE: The user''s account does not have sufficient balance
  for this transaction. Check the balance and try a different amount.'
- '400: BENEFICIARY_NOT_ACTIVATED: Beneficiary has not been activated as two factor
  authentication is required. Prompt the user to take necessary further action.'
- '400: BENEFICIARY_COOL_DOWN_PERIOD: New beneficiary will be activated for fund transfer
  after x hour(s). Attempt transactions once this cool down period has elapsed.'
- '400: BENEFICIARY_ALREADY_EXISTS: A beneficiary with this account number or IBAN
  already exists. Try the Create Transfer endpoint instead.'
- '401: ACCOUNT_LOCKED: Account locked out due to too many failed login attempts.
  Prompt the user to reset their password and try again.'
- '401: INACTIVE_ACCOUNT: This account has been deactivated. Prompt the user to contact
  their bank.'
- '401: DUPLICATE_TRANSFER: The same transaction has already been initiated a short
  time ago. Initiate a different transfer or try again later.'
- '401: ACCOUNT_FEATURE_LOCKED: This operation is locked by the bank. Contact your
  bank.'
- '400: DAILY_LIMIT_EXCEEDED: The entered amount exceeds the maximum daily limit set
  by the user. Inform the user to enter a lesser amount or adjust the daily limit
  from the user''s online banking.'
- '400: TRANSACTION_LIMIT_EXCEEDED: You have exceeded the limit defined for the transaction
  you are trying to execute. Inform the user to enter a lesser amount or adjust the
  transaction limit from the user''s online banking.'
- '400: USER_LIMIT_EXCEEDED: The amount you have entered exceeds the User limit. Inform
  the user to enter a lesser amount or adjust the user limit from the user''s online
  banking.'
- '400: PART_OF_ANOTHER_SUBPRODUCT: This endpoint is included in a different type
  of request for this bank (payment/transfer/create). Try the operation using a different
  type of request.'
- '400: AMOUNT_BELOW_TRANSFER_LIMIT: The bank has a minimum required amount for the
  transfer. The current amount is below the bank''s minimum. Try the operation with
  an amount that is at least the minimum transfer limit for the bank.'
- '400: BENEFICIARY_NAME_TAKEN: The bank does not allow multiple beneficiaries with
  the same name. Try the request again with a different beneficiary name.'
- '400: AMOUNT_ABOVE_TRANSFER_LIMIT: The bank has a maximum amount for the transfer.
  The current amount is above the allowed bank''s maximum. Try the operation with
  an amount that is at most the maximum transfer limit for the bank.'
- '400: TRANSFER_CONFIRMATION_FAILED: It is unknown whether the transfer was processed.
  Mainly caused by internal bank errors. Contact the user to determine the result
  of the transfer.'
- '400: BENEFICIARY_NICKNAME_NAME_TAKEN: The bank does not allow multiple beneficiaries
  with the same nickname. Try the request again with a different beneficiary nickname.'
- '400: BENEFICIARY_NICKNAME_CHARACTER_LIMIT: The bank has a limit on the length of
  the nickname. Try the request again with a shorter beneficiary nickname.'
- '400: BENEFICIARY_NAME_CHARACTER_LIMIT: The bank has a limit on the length of the
  name. Try the request again with a shorter beneficiary name.'
- '400: UNABLE_TO_CONNECT_TO_BANK: Failed attempt to connect to the user''s bank.
  Retry the request.'
- '500: UNKNOWN_ERROR: An unknown interruption occurred while performing your request.
  Retry the request.'
- '401: SESSION_INVALIDATED: Your user''s session has expired or been terminated by
  the bank. Retry the request.'
- '400: USER_ALREADY_LOGGED_IN: This bank does not support concurrent login. Retry
  the request.'
- '503: TEMPORARILY_UNAVAILABLE: An error occurred due to financial institution downtime.
  Retry the request.'
- 'INVALID_TOKEN: Make sure you are using the right token. NB! Make sure you have
  set the accessToken as the Bearer Token in the request header.'
- 'INVALID_SECRETS: Double-check the integrity of the secrets that you are using.
  NB! If you are using an SDK, make sure you have added the appSecret to the Server.'
- 'UNAUTHORIZED: You are not authorized to call the endpoint. Make sure your appKey
  has the necessary permissions.'
- 'SANDBOX_ACCOUNT_NOT_FOUND: You are trying to interact with a sandbox account that
  does not exist for your appKey. NB! If you are trying to create a transfer, make
  sure that the beneficiary is another sandbox user that you have already created.'
- 'INVALID_ACCOUNT_ID: Account ID is wrong or outdated'
- 'INVALID_ACCOUNT_ID: Account ID is wrong or outdated.'
auth_info:
  mentioned_objects:
  - accessCode
  - connectionID
  - userSecret
  - userID
  - tokenID
  - appSecret
  - Exchange Token
  - appKey
  - bundleID
  - Error
  - NSError
  - DAPIBankConnection
  - DAPIBankAccount
  - DAPITransferResult
  - DapiConnection
  - OauthToken
  - UserLogin
  - UserInputs
  - UserInput
  - access_token
  - user_secret
  - Identity
  - AccountsResponse
  - BalanceResponse
  - TransactionsResponse
  - AccessToken
  - AccessCode
  - ExchangeToken
client:
  base_url: https://api.dapi.com
  auth:
    type: Bearer
    location: header
    header_name: Authorization
source_metadata: null
