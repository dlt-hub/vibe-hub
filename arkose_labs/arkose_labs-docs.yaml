resources:
- name: Edge API
  endpoint:
    path: /edge-api
    method: POST
    data_selector: recommended_action
    params: {}
- name: stream_data
  endpoint:
    path: /stream_data
    method: POST
    data_selector: sessions
- name: batch_data
  endpoint:
    path: /batch_data
    method: POST
    data_selector: sessions
- name: North Virginia Healthcheck
  endpoint:
    path: /metrics-display/x7vj2bf6ckzv/day.json
    method: GET
- name: North Virginia Response Time
  endpoint:
    path: /metrics-display/6wbnmjn5w03x/day.json
    method: GET
- name: Oregon Healthcheck
  endpoint:
    path: /metrics-display/f5txw3k5rpbs/day.json
    method: GET
- name: Oregon Response Time
  endpoint:
    path: /metrics-display/m3pl0rjry4cy/day.json
    method: GET
- name: Singapore Healthcheck
  endpoint:
    path: /metrics-display/p3frx5vqjd5x/day.json
    method: GET
- name: Singapore Response Time
  endpoint:
    path: /metrics-display/13lww8jwjcfq/day.json
    method: GET
- name: Ireland Healthcheck
  endpoint:
    path: /metrics-display/cdplvgx9msf1/day.json
    method: GET
- name: Ireland Response Time
  endpoint:
    path: /metrics-display/8t7xx4yjbswj/day.json
    method: GET
- name: Sydney Healthcheck
  endpoint:
    path: /metrics-display/wcd34f7xkc0c/day.json
    method: GET
- name: Sydney Response Time
  endpoint:
    path: /metrics-display/gljgfg9zqpcg/day.json
    method: GET
- name: 3.1.1 Language of Page
  endpoint:
    path: http://www.w3.org/TR/WCAG20/#meaning-doc-lang-id
    method: GET
    data_selector: Supports
- name: 3.2.1 On Focus
  endpoint:
    path: http://www.w3.org/TR/WCAG20/#consistent-behavior-receive-focus
    method: GET
    data_selector: Supports
- name: 3.2.2 On Input
  endpoint:
    path: http://www.w3.org/TR/WCAG20/#consistent-behavior-unpredictable-change
    method: GET
    data_selector: Supports
- name: 3.2.6 Consistent Help
  endpoint:
    path: https://www.w3.org/TR/WCAG22/#consistent-help
    method: GET
    data_selector: Not Applicable
- name: 3.3.1 Error Identification
  endpoint:
    path: http://www.w3.org/TR/WCAG20/#minimize-error-identified
    method: GET
    data_selector: Supports
- name: 3.3.2 Labels or Instructions
  endpoint:
    path: http://www.w3.org/TR/WCAG20/#minimize-error-cues
    method: GET
    data_selector: Supports
- name: 3.3.7 Redundant Entry
  endpoint:
    path: https://www.w3.org/TR/WCAG22/#redundant-entry
    method: GET
    data_selector: Not Applicable
- name: 4.1.1 Parsing
  endpoint:
    path: http://www.w3.org/TR/WCAG20/#ensure-compat-parses
    method: GET
    data_selector: Supports
- name: 4.1.2 Name, Role, Value
  endpoint:
    path: http://www.w3.org/TR/WCAG20/#ensure-compat-rsv
    method: GET
    data_selector: Supports
- name: verify
  endpoint:
    path: /api/v4/verify/
    method: POST
    data_selector: response
    params: {}
- name: North Virginia Healthcheck
  endpoint:
    path: /metrics-display/x7vj2bf6ckzv/day.json
    method: GET
- name: North Virginia Response Time
  endpoint:
    path: /metrics-display/6wbnmjn5w03x/day.json
    method: GET
- name: Oregon Healthcheck
  endpoint:
    path: /metrics-display/f5txw3k5rpbs/day.json
    method: GET
- name: Oregon Response Time
  endpoint:
    path: /metrics-display/m3pl0rjry4cy/day.json
    method: GET
- name: Singapore Healthcheck
  endpoint:
    path: /metrics-display/p3frx5vqjd5x/day.json
    method: GET
- name: Singapore Response Time
  endpoint:
    path: /metrics-display/13lww8jwjcfq/day.json
    method: GET
- name: Ireland Healthcheck
  endpoint:
    path: /metrics-display/cdplvgx9msf1/day.json
    method: GET
- name: Ireland Response Time
  endpoint:
    path: /metrics-display/8t7xx4yjbswj/day.json
    method: GET
- name: Sydney Healthcheck
  endpoint:
    path: /metrics-display/wcd34f7xkc0c/day.json
    method: GET
- name: Sydney Response Time
  endpoint:
    path: /metrics-display/gljgfg9zqpcg/day.json
    method: GET
- name: verify_api
  endpoint:
    path: /verify-api-v4
    method: POST
- name: edge_api
  endpoint:
    path: /edge-api
- name: truth_data_api
  endpoint:
    path: /truth-data-api
- name: verify_api_responses
  endpoint:
    data_selector: session_details
- name: session_verification
  endpoint:
    method: POST
    data_selector: .
- name: verify
  endpoint:
    path: /api/v4/verify/
    method: POST
    params:
      private_key: '{{ dlt.secrets[''arkose_api_secret''] }}'
      session_token: arkose_session_token
- name: verify
  endpoint:
    path: /api/v4/verify/
    method: POST
- name: verify
  endpoint:
    path: /api/v4/verify
    method: POST
- name: status
  endpoint:
    path: /api/v2/status.json
    method: GET
- name: android_sdk
  endpoint:
    path: ArkoseLabs.sdk:android:x.xx.xxxxx
    method: GET
- name: android_compose_sdk
  endpoint:
    path: ArkoseLabs.sdk:android-compose:x.xx.xxxxx
    method: GET
- name: status
  endpoint:
    path: /api/v2/status.json
    method: GET
    data_selector: status
- name: api_status
  endpoint:
    path: /api/v2/status.json
    method: GET
- name: metrics_display
  endpoint:
    path: /metrics-display/{component_ID}/{timerange}
    method: GET
- name: enforcement_challenge
  endpoint:
    method: GET
- name: verify_api
  endpoint:
    method: GET
    data_selector: session_risk
- name: supported_languages
  endpoint:
    method: GET
- name: enforcement_challenge
  endpoint:
    method: POST
    params:
      api_key: '{{ dlt.secrets[''arkose_public_key''] }}'
      blob: '{{ dlt.secrets[''arkose_blob''] }}'
      language: en
      client_api_retry_count: 0
      style_theme: ''
      timeout_in_seconds_until_ready: 0
- name: enforcement_challenge
  endpoint:
    path: /api.js
    method: GET
- name: verify
  endpoint:
    path: /verify
    method: POST
- name: myArkose
  endpoint:
    method: GET
- name: verify
  endpoint:
    method: POST
- name: edge_api_response
  endpoint:
    method: POST
    data_selector: $
- name: client_api
  endpoint:
    method: GET
- name: verify_response_api
  endpoint:
    method: POST
- name: truth_data_legit_sessions
  endpoint:
    method: POST
- name: truth_data_non_legit_sessions
  endpoint:
    method: POST
- name: verify
  endpoint:
    path: /verify
    method: POST
- name: verify
  endpoint:
    method: POST
- name: enforcement
  endpoint:
    path: /v2/<YOUR PUBLIC KEY>/api.js
    method: GET
- name: detection
  endpoint:
    path: /v2/<YOUR PUBLIC KEY>/api.js
    method: GET
- name: verify
  endpoint:
    path: /api/v4/verify/
    method: POST
- name: verify
  endpoint:
    path: /api/v4/verify/
    method: GET
- name: verify
  endpoint:
    path: /
    method: POST
- name: myArkose
  endpoint:
    method: GET
- name: verify
  endpoint:
    path: /api/v4/verify/
    method: POST
    params:
      private_key: '{{ dlt.secrets[''arkose_private_key''] }}'
      session_token: required
      log_data: optional
      email_address: optional
- name: client_api
  endpoint:
    path: /docs/client-api
    method: GET
- name: verify_api
  endpoint:
    path: /docs/verify-api-v4
    method: GET
- name: edge_api
  endpoint:
    path: /docs/edge-api
    method: GET
- name: truth_data_api
  endpoint:
    path: /docs/truth-data-api
    method: GET
- name: client_api
  endpoint:
    path: /v2/<YOUR PUBLIC KEY>/api.js
    method: GET
- name: verify
  endpoint:
    path: /api/v4/verify/
    method: POST
    data_selector: session_details
- name: client_api
  endpoint:
    path: /docs/client-api
    method: GET
- name: verify_api
  endpoint:
    path: /docs/verify-api-v4
    method: GET
- name: edge_api
  endpoint:
    path: /docs/edge-api
    method: GET
- name: truth_data_api
  endpoint:
    path: /docs/truth-data-api
    method: GET
- name: params_sri
  endpoint:
    path: /params/sri/<YOUR PUBLIC KEY>
    method: GET
    data_selector: hashes.js
- name: callbacks
  endpoint:
    method: GET
- name: verify_api
  endpoint:
    method: POST
- name: enforcement_challenge
  endpoint:
    method: POST
- name: lightbox
  endpoint:
    path: /<YOUR_PUBLIC_KEY>/lightbox.html
    method: GET
- name: index
  endpoint:
    path: /<YOUR_PUBLIC_KEY>/index.html
    method: GET
- name: verify
  endpoint:
    path: /api/v4/verify/
    method: POST
    params:
      private_key: '{{ dlt.secrets[''arkose_private_key''] }}'
      session_token: session_token_value
      log_data: log_data_value
- name: enforcement_api
  endpoint:
    path: /v2/<YOUR_PUBLIC_KEY>/api.js
    method: GET
- name: email_intelligence
  endpoint:
    method: GET
    data_selector: email_intelligence
- name: fingerprint
  endpoint:
    method: GET
    data_selector: fingerprint
- name: ip_intelligence
  endpoint:
    method: GET
    data_selector: ip_intelligence
- name: session_details
  endpoint:
    method: GET
    data_selector: session_details
- name: data_exchange
  endpoint:
    method: GET
    data_selector: data_exchange
- name: verify
  endpoint:
    path: /verify-api/v4
    method: POST
- name: edge
  endpoint:
    path: /edge-api
    method: POST
- name: truth_data
  endpoint:
    path: /truth-data-api
    method: POST
- name: verify
  endpoint:
    path: /verify
    method: POST
- name: arkose_verification
  endpoint:
    method: GET
- name: stream_data
  endpoint:
    path: /truth_data_api/v1/stream_data
    method: POST
- name: batch_data
  endpoint:
    path: /truth_data_api/v1/batch_data
    method: POST
- name: enforcement_challenge
  endpoint:
    path: /v2/<YOUR_PUBLIC_KEY>/api.js
    method: GET
- name: verify
  endpoint:
    path: /api/v4/verify/
    method: POST
    params:
      private_key: '{{ dlt.secrets[''arkose_private_key''] }}'
      session_token: arkose_session_token
- name: verify
  endpoint:
    method: POST
- name: api
  endpoint:
    path: /v2/${publicKey}/api.js
    method: GET
- name: enforcement
  endpoint:
    path: /<YOUR_PUBLIC_KEY>/api.js
    method: GET
- name: detection
  endpoint:
    path: /<YOUR_PUBLIC_KEY>/api.js
    method: GET
- name: edge_api
  endpoint:
    path: /<public_key>
    method: POST
- name: api_status
  endpoint:
    path: /api/v2/status.json
    method: GET
- name: metrics_display
  endpoint:
    path: /metrics-display/{component_ID}/{timerange}
    method: GET
- name: status
  endpoint:
    path: /api/v2/status.json
    method: GET
    data_selector: status
- name: verify
  endpoint:
    method: POST
    data_selector: aggregations
- name: client_api
  endpoint:
    path: /v2/{public_key}/api.js
    method: GET
- name: verify
  endpoint:
    path: /api/v4/verify/
    method: POST
    params:
      private_key: '{{ dlt.secrets[''arkose_private_key''] }}'
      session_token: '{{ dlt.secrets[''arkose_session_token''] }}'
      log_data: '{{ dlt.secrets[''arkose_log_data''] }}'
- name: client_api
  endpoint:
    path: /v2/<YOUR PUBLIC KEY>/api.js
    method: GET
- name: proxy_verify
  endpoint:
    path: /proxy-verify
    method: POST
notes:
- Customer can decide on the appropriate end user action of whether to allow or block
  the user.
- You need to get an authorization token every 24 hours by implementing checks that
  monitor the 'expires_in' value to avoid unnecessary token creation on every request.
- 500 session limit per 1 batch request
- Integrate and configure Arkose APIs so that they can be bypassed in the rare event
  of any Arkose API-related service disruption.
- Arkose Labs does not provide any documentation aimed at the end user, as our products
  in general and the Enforcement Challenge in particular are embedded into the customers'
  web page or app.
- Arkose Labs' customer-facing documentation does however include an overview over
  the level of provided accessibility support.
- The Enforcement Challenges do not use any live audio content.
- The Enforcement Challenges do not play any video content that would require audio
  description or a media alternative.
- The Enforcement Challenge is responsive and adapts its size and layout according
  to the viewport size and orientation of the user’s device. It works equally well
  in landscape and portrait orientation.
- The purpose of each input field can be programmatically determined.
- The Enforcement Challenge has sufficient color contrast between text and background
  in its default styling. Customers may chose to customize the Enforcement Challenge
  styling according to their own branding, in which case it is the customer’s responsibility
  to ensure sufficient color contrast.
- The Enforcement Challenge allows users to resize text up to 200% without loss of
  content or functionality.
- The Enforcement Challenge does not contain images of text.
- The Enforcement Challenge is able to accommodate zoom levels of up to 400% without
  loss of content or functionality or the need for scrolling in two dimensions. Content
  will reflow to the available viewport. Actual results are dependent on the customer’s
  implementation of the iframe which embeds the Enforcement Challenge into the customer’s
  web page, and, as such, are ultimately out of Arkose Labs' control.
- The Enforcement Challenge has sufficient color contrast between non-text user interface
  components and their background in its default styling. Customers may chose to customize
  the Enforcement Challenge styling according to their own branding, in which case
  it is the customer’s responsibility to ensure sufficient color contrast.
- The Enforcement Challenge allow users to adjust text spacing without loss of content
  or functionality.
- The Enforcement Challenge does not contain content that appears on focus or hover.
- The Enforcement Challenge is a single-page app. Individual screens within the app
  by design cannot be located or directly navigated to.
- Each screen of the Enforcement Challenge has appropriate headings and/or labels
  to describe its purpose. The Enforcement Challenge uses H2 headings only, not H1.
  This is to avoid user confusion when the challenge is embedded on a customer page
  which already has a H1 heading.
- The Enforcement Challenge provides a visible keyboard focus.
- Any Enforcement Challenge element receiving keyboard focus is always visible in
  the user's viewport.
- The Enforcement Challenge does not require dragging movements for any part of the
  user interaction.
- The click targets throughout the Enforcement Challenge meet and exceed the minimum
  size requirements.
- The Enforcement Challenge displays all phrases in the page’s native language, which
  is specified in the document language in the HTML markup.
- The Enforcement Challenge uses consistent navigation throughout its different challenge
  types and games.
- Within the Enforcement Challenge, any components that have the same functionality
  are identified consistently across the different challenge types and games.
- The audio challenge provides descriptive error messages, if the user submits invalid
  characters.
- The Enforcement Challenge does not cause legal commitments or financial transactions
  for the user to occur.
- The Enforcement Challenge provides the user with two alternatives for solving (visual
  or audio). At least one of those alternatives is generally an object recognition
  task, which therefore satisfies this criteria.
- Status messages can be programmatically determined through role or properties such
  that they can be presented to the user by assistive technologies without receiving
  focus.
- Client API version V1 is reaching End of Life on June 1, 2023 and customers who
  are still on Client API V1 version must migrate to V2 by June 1, 2023.
- Arkose Labs Verify API versions, V1 and V2 End of Life, as communicated already,
  was on June 1st 2023. We will be shutting down Verify V1 and V2 on July 1 2024.
  Arkose Labs Verify V3 API version is reaching End of Life on August 1 2024 and the
  service will no longer be available after this date.
- If you do not already have a custom V4 URL, talk to your CSM about getting one.
- Arkose Labs Enforcement Challenge UI 1.0 is reaching End of Life on September 1,
  2024.
- Any customers who are still on the UI 1.0 version will be migrated to UI 2.0 by
  September 1, 2024.
- The is_bot field will be fully deprecated by May 13, 2025.
- As part of our ongoing efforts to enhance security and maintain compliance with
  industry standards, we are updating our API to eliminate the use of GET requests
  in Arkose Labs API, which may impact your integration.
- Sensitive data should not be used in query parameters of GET requests as they can
  be logged by various systems.
- Please update your systems by April 1st, 2025 to avoid any potential disruptions.
- Legacy 'Pick-A-Tile' CAPTCHA challenges are reaching their End of Life on October
  8, 2025.
- Requires setup of connected app in Arkose Labs
- Verify response processing code MUST gracefully handle unknown fields
- The response.token is sent back to your server for further inspection.
- Do not send sensitive information via GET request parameters. Use POST requests
  instead.
- We recommend that you write your integration with Arkose Bot Manager so that, in
  the rare event of a disruption of our servers, your system fails-open.
- 'HTTP 5xx (Server Errors): Customers can consider either fail-open for immediate
  user access or retrying with exponential backoff for improved verification accuracy.
  The choice depends on their prioritization of user experience versus potential security
  risks.'
- 'HTTP 400 (Bad Request): Do not fail to open HTTP 400 responses. Allowing such requests
  to pass could expose your system to potential abuse.'
- The onReady callback is required to determine that the Arkose Client has finished
  loading on the page and is ready to be started.
- Response structure varies based on verification outcome
- MICS verdict contains device integrity check information
- Optional data may include encrypted blob data
- Email Intelligence and Device ID response structures available in separate documentation
- Requires Cloudflare Workers features enabled
- Replace <company> with your company's personalized Client API URL name
- arkosesessiontoken header must be present in requests to protected endpoints
- Response status 201 indicates successful verification
- solved=false in response indicates request should be blocked
- Update ARKOSE_API_SECRET with your private key
- API timeout configured at 2000ms
- Initial invitation is valid for 7 days from date of issue
- Supports Okta and Azure AD as enterprise identity providers
- Additional SSO providers will be supported in the near future
- Requires Arkose support login to access Knowledge Base Command Center page
- Uses private key authentication for verification
- Requires EdgeWorker setup for Akamai CDN integration
- Token can be provided via header or cookie
- Supports fail-open configuration for service outages
- Supports minimum version Android OS 5.0
- Kotlin v1.7.20+ is now supported in Android XML and Jetpack Compose SDKs
- All existing detection and challenge features on web solutions are available on
  Mobile SDKs
- Challenge updates can be done without updating the SDKs or releasing new application
  version
- Complies with Google Play Store guidelines
- Has 1-to-1 feature availability between web and mobile solutions
- 'Status API returns indicator values: none, minor, major, critical'
- Recommended to implement fail-open strategy for service disruptions
- Client API uses callback functions onReady, onError, onCompleted for error handling
- Server-side should bypass token validity checks during outages
- Works well on many connected devices including gaming consoles and smart TVs via
  WebView
- Xbox controller functionality can be enabled using arkoseEnforcement.enableDirectionalInput
- Enforcement Challenge must be embedded in a web browser such as UWP WebView
- Risk Score must be enabled for your keys - contact Customer Success Manager (CSM)
  for assistance
- If both Global and Custom Risk Scores are 0, the risk_category field is not returned
- risk_category is the only optional field in session_risk response
- Global Risk Score ranges from 0 to 100 with 100 being highest risk
- Custom Risk Score ranges from 0 to 100 with 100 being highest risk
- Enforcement Challenge (EC) can be invoked in many languages
- Language settings can be controlled manually by passing the whole Locale ID string
  to the configuration object using the language parameter
- Audio challenges use sounds or music instead of spoken words and do not require
  translation
- All EC text elements are localized, including alt text and ARIA labels for accessibility
- Minimum iOS version supported is 12.0
- Compatible with iOS 12, 13, 14, 15, 16, 17, 18
- Also supports iPadOS, macOS 12+, and Vision OS 1.3+
- SDK wraps Arkose's Advanced Enforcement Challenge in native iOS web views
- Requires completion of standard Arkose Server-Side setup instructions
- Available via Mobile SDK Support page - requires CSM approval
- Uses Swift Package Manager (SPM) for integration
- Requires Arkose provided credentials (username and token) for package access
- Uses API key authentication configured through ArkoseConfig.Builder
- Supports both SwiftUI and UIKit integration patterns
- Version 1.0 APIs are deprecated but backward compatible
- Configuration can be updated at runtime using ArkoseManager.update
- GET requests for /verify endpoint are being deprecated for security reasons - sensitive
  data should not be in query parameters
- Migration to POST requests required by April 1st, 2025
- GET requests can expose sensitive data through URL logging
- The myArkose object is provided when the Arkose Bot Manager API script is loaded
- setConfig function must ALWAYS be called to set up the Client API
- onReady callback is required to determine that the Arkose Client has finished loading
- onCompleted callback will always be triggered when a challenged or suppressed session
  is completed
- response.token must be sent to the customer's back end to verify a session is legitimate
- Each response.token can only be used once with the Verify API
- Allow user to continue ONLY if session_details.solved field value is true
- Code must gracefully handle unknown fields in Verify API response
- Private key must not be published on client-facing website
- Arkose Labs reserves the right to add additional fields to response schema
- Always called from server-side code for security reasons
- Uses private key and session token from Client API
- Response can be in simple 1 or 0 format or full JSON format
- Occasionally adds new fields to response without updating or deleting existing fields
- Supports Allowlists and Denylists via custom telltales
- Verify Response API is always called from server-side for security reasons
- Data Exchange information is encrypted using AES-256-GCM to prevent fraudsters from
  data tampering
- Truth Data API for legit sessions not applicable for detection component
- 'API Policy: Arkose Labs supports current version and one version prior, with 60
  days notice for End-of-Life transitions'
- RTL data is sent asynchronously with only a few seconds delay
- RTL data is raw and uninterpreted - needs filtering for best insights
- Provides complete picture of all customer traffic that created an Arkose session
- RTL data consists of events covering entire user experience from session creation
  to conclusion
- Includes telemetry data about users and their presence on Arkose Labs network
- Requires custom domain setup within Auth0 platform with CNAME DNS and Proxied enabled
- Supports both Universal Login Classic and Universal Login New modes
- Worker handles both client-side JavaScript insertion and server-side token validation
- Different URLs for different Auth0 login flows and modes
- Verify API versions V1 and V2 ended life on July 1 2024
- Verify V3 API version reached End of Life on August 1 2024
- Verify V4 responds 3.5x faster than previous versions on average
- V4 supports TLS 1.2 and TLS 1.3
- Future new features will only be added to V4
- 85% of customer traffic has already been migrated to Verify V4
- Each response.token provided by the Client API can only be used once with the Verify
  API
- Allow the user to continue ONLY if the response's session_details.solved field value
  is true
- Private key must not be published on a client facing website, and must only be used
  on your server-side implementation
- Only load the Arkose API script ONCE PER PAGE
- Do not pass sensitive information into GET request parameters
- Multi-key setup allows multiple public keys on same page
- Requires private/public key pair for authentication
- Public key used in client-side script URL path
- Private key used for server-side verification
- Migration requires updating both client-side and server-side code
- Uses session token authentication via arkosesessiontoken header
- Requires client-side JavaScript integration for token generation
- Token must be present in request header, missing token generates error
- Fastly proxy extracts token and makes preflight request to verify API
- Request proceeds to origin only if solved=true returned from verify API
- response.token must be sent to customer's back end to verify session is legitimate
- onShow and onHide can be triggered at two different sequence locations
- Some callbacks may not be triggered during a session depending on conditions
- Internet Explorer 11 (IE11) support will be phased out beginning June 15th, 2022
- During maintenance support phase, Arkose Labs experience for IE11 users will begin
  to degrade
- After End of Support, IE11 users will experience fallback mode with limited features
- Only load the Arkose API script ONCE PER PAGE - Loading multiple times causes duplicate
  event listeners and issues
- When client-side code is loaded, Arkose Labs will read and store the website URL
  including query string parameters
- Do not pass sensitive information into GET request parameters - use POST requests
  for sensitive information
- Multi-key setup allows utilizing Client API with two different Public Keys on the
  same page
- Inline integration is available but has cost implications - consult with Arkose
  Labs first
- v4 accepts only POST requests
- 'v4 has nested response body structure with top level fields: session_details, fingerprint,
  and ip_intelligence'
- v4 returns non-200 status codes for failed server requests unlike v1 and v2
- Custom endpoint required - cannot use generic verify-api.arkoselabs.com
- Code should gracefully handle unknown response fields as new fields may be added
- The Enforcement Challenge offers an audio challenge alternative which does not require
  user vision
- The Enforcement Challenge supports zoom methods and technologies such as browser
  zoom or screen magnifiers, to assist users with limited vision. It meets minimum
  contrast ratios, supports high contrast modes, and colour inversion
- The Enforcement Challenge does not rely on color vision to perceive or operate the
  user interface, nor to solve the visual challenge
- The Enforcement Challenge offers a visual challenge alternative which does not require
  user hearing
- The Enforcement Challenge does not require user speech
- The Enforcement Challenge is fully operable (both visual and audio challenges) without
  pointing devices by keyboard alone. By extension, it can also be operated by any
  other input devices that emit the standard keyboard events
- 'The Enforcement Challenge is designed to be inherently accessibility friendly:
  The challenges use familiar, everyday images or sounds, as well as plain language
  in instructions. It does not generally enforce a time limit on providing an answer
  (exceptions exist for known fraudulent traffic). The user is allowed unlimited attempts
  at solving, without increasing the challenge''s difficulty. Upon a failed attempt,
  the user is given further solve hints. At any point, the user can toggle between
  visual and audio challenges depending on ability and preference'
- The Enforcement Challenge does not use any flashing effects in the user interface
  nor the challenge images
- There is no impact on user privacy when using accessibility features to interact
  with the Enforcement Challenge
- Arkose Labs does not provide any documentation aimed at the end user, as our products
  in general and the Enforcement Challenge in particular are embedded into the customers'
  web page or app
- Arkose Labs does not provide support services to end users
- Arkose Labs Command Center is only supported on desktop, on the latest stable version
  of Chrome, Firefox, Safari, and Edge
- Internet Explorer 11 supported only via fallback mode from May 9, 2023
- As of June 15, 2022, reduced proactive testing for IE11 and focus on fixing critical
  issues only
- Accessibility, custom styling and strings, as well as certain Arkose features are
  not supported in IE11 fallback mode
- Connected devices such as gaming consoles and smart TVs may work but are not confirmed
  compatible due to large number and variability
- Pick-a-tile CAPTCHA challenges are reaching End of Life on October 8, 2025
- All Pick-a-tile traffic will automatically switch to Match-Key challenges after
  October 8, 2025
- Match-Key reduces user friction by approximately 50% compared to Pick-a-tile
- Match-Key has lower failure rates (7% vs 14% with Pick-a-tile)
- Match-Key is fully WCAG2 compliant for accessibility
- SRI hashes should never be hardcoded and must be fetched from the Params API public
  endpoint
- Assets are continuously updated to improve the product and mitigate attackers
- 'Two failure handling options available: Fail Close (blocks access) or Fail Open
  (loads without integrity check)'
- Internet Explorer requires jQuery for AJAX requests
- Enforcement Challenge UI 2.0 requires CAPI v2 migration
- All Production keys need to be migrated to CAPI build v10.1.1
- Game 1 is deprecated and not supported in Enforcement Challenge UI 2.0
- Inline Mode requires minimum width of 300px
- Default design measures 400px width by 450px height
- SDK emits several events that can be used to track the state of the challenge and
  other operations
- The close button only appears when in Lightbox mode
- Detection component is part of overall Arkose Bot Manager platform
- Configuration components apply to both detection and enforcement components
- Wraps Arkose's Advanced Enforcement Challenge in native Android/iOS web views
- Ensures 1-to-1 feature availability between the native Android/iOS SDKs and the
  React Native SDK
- Integrates with your apps through a React Native Bridge
- Handles errors and challenge interactions through callback events
- Complies with Arkose Internal Security guidelines
- Complies with Google Play Store and Apple App Store guidelines for seamless integration
- Is fully compatible with new Enforcement Challenge-API (EC-API) releases
- Supports minimum Android OS version 5.0 and iOS version 12.0
- SDK is reviewed by Arkose Labs Security and complies with respective app store guidelines
- Created with stability and performance in mind with no significant impact on host
  application performance
- Arkose Labs Mobile SDKs are available via the Mobile SDK's Support page - contact
  CSM for access
- Must complete standard Arkose Server-Side setup instructions for full end-to-end
  setup
- Uses React Native Bridge for communication between JavaScript and native SDKs
- SDK must be downloaded as .tgz file from Mobile SDK Support page
- Ensures 1-to-1 feature availability between native Android/iOS SDKs and React Native
  SDK
- Integrates with apps through React Native Bridge
- SDK available via Mobile SDK's Support page - requires CSM access request
- From v2.12.1 supports relative paths in Podspec file declarations
- Uses iframe integration with postMessage communication
- Supports both lightbox and inline modes
- Requires public key setup for hosted iframe template
- CSS styling required for lightbox mode functionality
- Language support via mkt URL parameter
- Uses Public and Private Key Pair for authentication
- Custom endpoints available in format <company>-api.arkoselabs.com and <company>-verify.arkoselabs.com
- Only load the Arkose API script ONCE PER PAGE to avoid duplicate event listeners
- Development Only Key recommended for testing purposes
- One Production Key per workflow recommended
- Private key must not be published on client-facing website and must only be used
  server-side
- Public key is used in client-side implementation
- Requires INTERNET permission in Android manifest
- WebView implementation supports both enforcement and detection components
- Token is one-time use and must be verified server-side
- Enforcement Challenge UI 1.0 is reaching End of Life on September 1, 2024
- EC UI 2.0 offers improved latency with smaller JS bundle size
- New MatchKey game type only supported on EC UI 2.0
- WCAG 2.2 level AA certified accessibility compliance
- Uses Cloudflare Workers to inject client-side scripts into HTML pages
- Stores Arkose Token in cookies for verification
- 'Two versions available: Button trigger and Form Submission trigger'
- Cookie lifetime configurable in milliseconds
- Access token is valid for 24 hours - implement checks to monitor expires_in value
- Batch requests have a 500 session limit per request
- Requires Client ID and Client Secret pair created via Arkose Command Center
- Configuration is done using the setConfig method on the Arkose object
- Callbacks return a response object that needs further processing
- Close button only appears when in Lightbox mode
- Default mode is lightbox for modal display
- Browser settings control language but can be overridden
- Enforcement cannot be triggered before onReady event
- onShown method only invoked first time Enforcement Challenge is displayed
- Uses public/private key pair authentication from Arkose Labs Command Center
- Private key must NOT be published on client-facing websites
- Private key must only be used on server-side Verify API implementation
- Supports both modal/lightbox and inline modes
- Arkose strongly encourages modal rather than inline development
- Integration requires both client-side JavaScript API and server-side token verification
- Client API generates session tokens that must be verified server-side
- 400 status code returned if private key and token do not match
- Tokens should be verified before allowing user registration to proceed
- 'Server-Side Protection: Secures surfaces where client-side JavaScript or SDK implementation
  isn''t possible'
- 'Lightweight Integration: Straightforward implementation with minimal development
  resources required'
- 'Low Cost & Low Latency: Delivers high-speed protection with cost-efficient implementation'
- 'Risk Assessment: Analyzes payload data and returns comprehensive risk signals and
  scores'
- Token can be provided either as a header or stored as a Cookie depending on client
  side configuration
- Example code includes handleFailure function which performs redirect if Arkose token
  fails to verify
- Allows arkose-token to be submitted via header or cookie
- Public Key and Private Key values found under Setup>Keys in Arkose Portal
- Client Subdomain default value is client-api, request custom value from Arkose Consultant
- Verify Subdomain default value is verify-api, request custom value from Arkose Consultant
- Fail Open setting should be switched to True
- Response object is invoked through callback functions for different events
- Token from response object must be sent to backend server for verification
- Challenge failures occur when user incorrectly answers challenge more than configured
  number of times
- Height and width dimensions are provided in pixels (e.g. '290px', '302px')
- Some fields only applicable to enforcement component
- Replace <YOUR_PUBLIC_KEY> with the public key supplied by Arkose Labs
- Private key must NOT be published on client facing website
- Arkose strongly encourages Modal over Inline development
- Command Center supports Okta and Azure AD as enterprise identify providers
- Requires MFA (Multi-Factor Authentication) configuration
- Recommend implementing fail-open strategy to bypass API during service disruptions
- 'Status endpoint returns indicator values: none, minor, major, critical'
- Client API script loading failures should trigger onReady callback timeout checks
- IP velocity fields are optional and must be configured by Customer Success Manager
- short_term fields are for detecting volumetric attacks
- long_term fields are for detecting low & slow attacks
- If short_term count exceeds short_term threshold, suspicious of volumetric attack
- If long_term count exceeds long_term threshold, suspicious of low & slow attack
- Thresholds are determined based on historical data
- Uses public/private key pair authentication retrieved from Arkose Labs Command Center
- Private key must not be published client-side and only used server-side for Verify
  API
- JavaScript API interacts with browser to collect data for traffic classification
- Supports both enforcement and detection components
- Can be implemented as web-based flow or transient web view in native iOS applications
- Client API V1 reached End of Life on June 1, 2023
- Client API V2 provides better security, simplified build process, improved responsiveness,
  observability support
- V2 supports Modal/Lightbox mode for improved user experience
- V2 has better mobile device support with built-in responsiveness
- V2 is prerequisite for MatchKey puzzle feature
- V2 includes CSP, SRI end-to-end security and vulnerability fixes
- Always called for each session from server-side code for security reasons
- Parameters include Arkose private key and session token from Client API
- Response indicates if user was verified in simple 1 or 0 format or full JSON format
- Arkose Labs may add fields to response but will never update or delete existing
  fields
- Customers should account for graceful handling of new fields added to API response
- Requires Akamai Property setup with EdgeWorker configuration
- Token can be sent via header 'arkose-token' or cookie
- HTML page needs to be hosted and served via Akamai Property Origin Server
- Implementation must match between Client Side and Server Side configuration
errors:
- Error message, if any
- '400: Bad Request'
- '401: Unauthorized'
- '500: Internal Service Error'
- '501: The server does not support the functionality required to fulfill the request'
- 'REQUEST_LIMIT_EXCEEDED: Throttle API calls or reduce frequency'
- 'QUERY_TIMEOUT: Break down filters or add selectivity'
- '401 Unauthorized: Recheck OAuth scopes or token expiration'
- 'API_REQUEST_TIMEOUT: Arkose setup session call timeout, our timeout is currently
  set to 20 seconds.'
- 'API_REQUEST_ERROR: Arkose setup session call threw an error.'
- 'CHALLENGE_ERROR: Arkose Client-API javascript fails to load.'
- 'FC_SCRIPT_ERROR: Arkose Enforcement Challenge script/s fail to load. FC_SCRIPT_ERROR
  also includes an additional property source alongside the error code. This property
  contains the URL of the script that failed to load.'
- 'RTIG_ERROR: Requests to the Real Time Image Generation (RTIG) endpoint failed to
  load the Challenge images.'
- 'POW_ERROR: When PoW fails to submit an answer, the error handling depends on the
  operational mode. In transparent mode, the onError callback is invoked, while in
  interactive mode, the onWarning callback is used.'
- 'CDN_ASSET_ERROR: Request to fetch example correct/incorrect images on fail screen
  failed.'
- 'CHECK_ANSWER_ERROR: Request to submit an answer for a challenge failed.'
- 'DAPIB_ERROR: Unable to load DAPIB script, or unable to successfully transform answer.'
- 'DAPIB_SRI_ERROR: Request to fetch DAPIB script’s SRI hash failed.'
- 'GAME_SETUP_ERROR: Request to create a new game/challenge failed.'
- 'GET_EKEY_ERROR: Request to fetch an encryption key failed.'
- 'RTAG_ERROR: Request to the Real Time Audio Generation (RTAG) endpoint failed to
  load the Challenge audio file.'
- 'SRI_ERROR: api.js script was downloaded but it did not match the hash provided.'
- 'Arkose Api Timeout: API request exceeded configured timeout'
- 'arkose error: Non-201 response status from verify endpoint'
- 'Connection interruption: Retry with reset() method and rerun enforcement'
- 'Script loading failure: Implement timer to check onReady callback trigger'
- 'Communication error: Use onError callback to handle and retry session creation'
- 'API_REQUEST_TIMEOUT: Arkose setup session call timeout, our timeout is currently
  set to 20 seconds'
- 'API_REQUEST_ERROR: Arkose setup session call threw an error'
- 'CHALLENGE_ERROR: Arkose Client-API javascript fails to load'
- 'FC_SCRIPT_ERROR: Arkose Enforcement Challenge script/s fail to load'
- 'RTIG_ERROR: Requests to the Real Time Image Generation (RTIG) endpoint failed to
  load the Challenge images'
- 'POW_ERROR: When PoW fails to submit an answer'
- 'CDN_ASSET_ERROR: Request to fetch example correct/incorrect images on fail screen
  failed'
- 'CHECK_ANSWER_ERROR: Request to submit an answer for a challenge failed'
- 'DAPIB_ERROR: Unable to load DAPIB script, or unable to successfully transform answer'
- 'DAPIB_SRI_ERROR: Request to fetch DAPIB script''s SRI hash failed'
- 'GAME_SETUP_ERROR: Request to create a new game/challenge failed'
- 'GET_EKEY_ERROR: Request to fetch an encryption key failed'
- 'RTAG_ERROR: Request to the Real Time Audio Generation (RTAG) endpoint failed to
  load the Challenge audio file'
- 'SRI_ERROR: api.js script was downloaded but it did not match the hash provided'
- 'Challenge load error: Handled by clientAPIRetryCount configuration'
- 'API_REQUEST_ERROR: Network connectivity issues when connecting to apiBaseUrl'
- 'API_REQUEST_TIMEOUT: Request timeout when connecting to apiBaseUrl'
- 'HTTP 5xx (Server Errors): Consider fail-open for immediate user access or retry
  with exponential backoff'
- 'HTTP 400 (Bad Request): Do not fail-open - could expose system to potential abuse'
- '900 Missing Arkose Session Token: the arkosesessiontoken header was missing from
  the request'
- '901 Invalid Arkose Session Token: the token is not valid'
- '902 Access denied returned: the verify API returned an error'
- '500,502,503,504: service_unavailable - transient communication issues'
- '400,401,402,403: service_access_denied - API access issues'
- '300,301,302,303,307: service_redirect - redirect responses'
- '400: Incorrect verification token value or incorrect private key value'
- 'DENIED ACCESS: Default error response from Verify API'
- 'onError: An error occurs when loading the challenge or detection'
- 'onFailed: Challenge has failed (user has failed the challenge multiple times and
  is not allowed to continue the session)'
- '200: Call Succeeded'
- '400 Bad Request: Private key and token do not match - deny access'
- 'Missing session token: Deny access if arkoseToken is null or missing'
- 'Script loading failure: onReady callback not triggered - retry script loading'
- 'Session creation failure: onError callback triggered - call reset() method'
- Communication error during Enforcement Challenge - retry with reset() method
- 'aggregations.error: unable to contact service - IP Velocity service unavailable
  but overall API may still return 200'
- 'HTTP 400 (Bad Request): Do not fail-open - allowing such requests could expose
  system to potential abuse'
auth_info:
  mentioned_objects:
  - MFA
  - Multi-Factor Authentication
  - Okta
  - Azure AD
  - ArkoseConfigCompose
  - EnforcementChallenge
  - EnforcementChallengeInline
  - ArkoseEnforcement
  - ArkoseConfig
  - ArkoseManager
  - ArkoseChallengeDelegate
  - ArkoseConfig.Builder
  - myArkose
  - setConfig
  - onReady
  - onCompleted
  - response.token
  - private key
  - public key
  - publicKey
  - privateKey
  - clientSubdomain
  - verifySubdomain
  - ArkoseEvents
  - Key Settings
  - Arkose Labs Command Center
  - Auth0
  - setupEnforcement
  - myEnforcement
  - ArkoseScriptService
  - Public Key
  - Private Key
  - Client Subdomain
  - Verify Subdomain
  - arkose-token
client:
  base_url: https://status.arkoselabs.com
  headers:
    Accept: application/json
source_metadata: null
