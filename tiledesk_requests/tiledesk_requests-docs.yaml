resources:
- name: requests
  endpoint:
    path: /:project_id/requests
    method: GET
    data_selector: requests
    params:
      limit: '40'
- name: get_request
  endpoint:
    path: /:project_id/requests/:request_id
    method: GET
- name: close_request
  endpoint:
    path: /:project_id/requests/:request_id/close
    method: PUT
- name: reopen_request
  endpoint:
    path: /:project_id/requests/:request_id/reopen
    method: PUT
- name: route_request
  endpoint:
    path: /:project_id/requests/:request_id/departments
    method: PUT
- name: update_request
  endpoint:
    path: /:project_id/requests/:request_id/
    method: PATCH
- name: add_participant
  endpoint:
    path: /:project_id/requests/:request_id/participants
    method: POST
- name: set_participants
  endpoint:
    path: /:project_id/requests/:request_id/participants
    method: PUT
- name: delete_participant
  endpoint:
    path: /:project_id/requests/:request_id/participants/:participantid
    method: DELETE
- name: update_request_attributes
  endpoint:
    path: /:project_id/requests/:request_id/attributes
    method: PATCH
- name: add_note
  endpoint:
    path: /:project_id/requests/:request_id/notes
    method: POST
- name: delete_note
  endpoint:
    path: /:project_id/requests/:request_id/notes/:noteid
    method: DELETE
- name: get_request_history
  endpoint:
    path: /:project_id/requests/:request_id/history
    method: GET
- name: delete_request
  endpoint:
    path: /:project_id/requests/:request_id
    method: DELETE
- name: rate_request
  endpoint:
    path: /:project_id/requests/:request_id/rating
    method: PATCH
- name: add_follower
  endpoint:
    path: /:project_id/requests/:request_id/followers
    method: POST
- name: set_followers
  endpoint:
    path: /:project_id/requests/:request_id/followers
    method: PUT
- name: delete_follower
  endpoint:
    path: /:project_id/requests/:request_id/followers/:followerid
    method: DELETE
- name: create_request
  endpoint:
    path: /:project_id/requests/
    method: POST
- name: get_chatbot_parameters
  endpoint:
    path: /:project_id/requests/:request_id/chatbot/parameters
    method: GET
- name: leads
  endpoint:
    path: /apis/rest-api/leads
    method: GET
- name: messages
  endpoint:
    path: /apis/rest-api/messages
    method: GET
- name: activities
  endpoint:
    path: /apis/rest-api/activities
    method: GET
- name: projects
  endpoint:
    path: /apis/rest-api/projects
    method: GET
- name: team
  endpoint:
    path: /apis/rest-api/team
    method: GET
- name: user
  endpoint:
    path: /apis/rest-api/user
    method: GET
- name: leads
  endpoint:
    path: /apis/rest-api/leads
    method: GET
    data_selector: records
- name: messages
  endpoint:
    path: /apis/rest-api/messages
    method: GET
    data_selector: records
- name: team
  endpoint:
    path: /apis/rest-api/team
    method: GET
    data_selector: records
- name: widget
  endpoint:
    path: /widget
    method: GET
- name: widget_settings
  endpoint:
    path: /v6/assets/twp/index.html
    method: GET
    data_selector: settings
- name: events
  endpoint:
    path: /apis/rest-api/events
    method: GET
    data_selector: events
    params: {}
- name: widget
  endpoint:
    path: /v6/launch.js
    method: GET
    data_selector: widget
- name: widget
  endpoint:
    path: /v6/assets/twp/blank.html
    method: GET
    data_selector: response
    params:
      tiledesk_projectid: <CHANGE_IT>
      tiledesk_fullscreenMode: 'true'
      tiledesk_hideHeaderCloseButton: 'true'
      tiledesk_open: 'true'
- name: widget
  endpoint:
    path: /v6/launch.js
    method: GET
    data_selector: widgetSettings
- name: leads
  endpoint:
    path: /apis/rest-api/leads
    method: GET
    data_selector: records
- name: messages
  endpoint:
    path: /apis/rest-api/messages
    method: GET
    data_selector: records
- name: activities
  endpoint:
    path: /apis/rest-api/activities
    method: GET
    data_selector: records
- name: projects
  endpoint:
    path: /apis/rest-api/projects
    method: GET
    data_selector: records
- name: team
  endpoint:
    path: /apis/rest-api/team
    method: GET
    data_selector: records
- name: user
  endpoint:
    path: /apis/rest-api/user
    method: GET
    data_selector: records
- name: leads
  endpoint:
    path: /apis/rest-api/leads
    method: GET
- name: messages
  endpoint:
    path: /apis/rest-api/messages
    method: GET
- name: widget_settings
  endpoint:
    path: /widgets
    method: GET
    data_selector: user_available
    params: {}
- name: widget
  endpoint:
    path: /widget
    method: GET
    data_selector: widgetData
- name: widget
  endpoint:
    path: /v6/launch.js
    method: GET
- name: widget
  endpoint:
    path: /v6/launch.js
    method: GET
- name: messages
  endpoint:
    path: /apis/rest-api/messages
    method: GET
    data_selector: records
- name: leads
  endpoint:
    path: /apis/rest-api/leads
    method: GET
    data_selector: records
- name: chatbot
  endpoint:
    path: /api/chatbot
    method: POST
    data_selector: data
    params: {}
- name: bot
  endpoint:
    path: /bot
    method: POST
    data_selector: data
- name: department
  endpoint:
    path: /apis/rest-api/management-api/departments
    method: GET
    data_selector: records
- name: leads
  endpoint:
    path: /apis/rest-api/leads
    method: GET
- name: messages
  endpoint:
    path: /apis/rest-api/messages
    method: GET
- name: activities
  endpoint:
    path: /apis/rest-api/activities
    method: GET
- name: projects
  endpoint:
    path: /apis/rest-api/projects
    method: GET
- name: user
  endpoint:
    path: /apis/rest-api/user
    method: GET
- name: team
  endpoint:
    path: /apis/rest-api/team
    method: GET
- name: messages
  endpoint:
    path: /apis/rest-api/messages
    method: POST
    data_selector: messages
    params: {}
- name: files
  endpoint:
    path: /apis/rest-api/files
    method: POST
    data_selector: files
    params: {}
- name: html_message
  endpoint:
    path: /html/messages
    method: POST
    data_selector: message
    params: {}
- name: prechat_form
  endpoint:
    path: /widget/advanced/prechat-form-json
    method: GET
    data_selector: form
- name: prechat_form
  endpoint:
    path: /prechat_form
    method: POST
    data_selector: controls
    params: {}
- name: singleConversation
  endpoint:
    path: /v6/launch.js
    method: GET
    data_selector: widgetSettings
    params:
      singleConversation: 'true'
- name: bot
  endpoint:
    path: /bot
    method: POST
    data_selector: success
- name: send_text_buttons
  endpoint:
    path: /bot
    method: POST
    data_selector: success
- name: send_text_buttons_microlanguage
  endpoint:
    path: /bot-micro
    method: POST
    data_selector: success
- name: leads
  endpoint:
    path: /apis/rest-api/leads
    method: GET
- name: messages
  endpoint:
    path: /apis/rest-api/messages
    method: GET
- name: activities
  endpoint:
    path: /apis/rest-api/activities
    method: GET
- name: external_chatbot
  endpoint:
    path: /external-chatbot
    method: POST
    data_selector: response
- name: RASA bot
  endpoint:
    path: /bot
    method: POST
    data_selector: ''
    params: {}
- name: bot
  endpoint:
    path: /bot
    method: POST
    data_selector: payload
    params: {}
- name: messages
  endpoint:
    path: /apis/rest-api/messages
    method: POST
    data_selector: response
- name: leads
  endpoint:
    path: /apis/rest-api/leads
    method: GET
    data_selector: records
- name: messages
  endpoint:
    path: /apis/rest-api/messages
    method: GET
    data_selector: records
- name: activities
  endpoint:
    path: /apis/rest-api/activities
    method: GET
    data_selector: records
- name: language_chooser_chatbot
  endpoint:
    path: /resolution-bot/orchestration-api/lang-chooser-chatbot
    method: POST
    data_selector: data
    params: {}
- name: english_bot
  endpoint:
    path: /resolution-bot/orchestration-api/english-bot
    method: POST
    data_selector: data
    params: {}
- name: spanish_bot
  endpoint:
    path: /resolution-bot/orchestration-api/spanish-bot
    method: POST
    data_selector: data
    params: {}
- name: department
  endpoint:
    path: /apis/rest-api/management-api/departments
    method: GET
    data_selector: departments
- name: order_info
  endpoint:
    path: /order-info
    method: POST
    data_selector: data
    params: {}
- name: leads
  endpoint:
    path: /apis/rest-api/leads
    method: GET
- name: messages
  endpoint:
    path: /apis/rest-api/messages
    method: GET
- name: activities
  endpoint:
    path: /apis/rest-api/activities
    method: GET
- name: projects
  endpoint:
    path: /apis/rest-api/projects
    method: GET
- name: team
  endpoint:
    path: /apis/rest-api/team
    method: GET
- name: user
  endpoint:
    path: /apis/rest-api/user
    method: GET
- name: analytics
  endpoint:
    path: /apis/rest-api/analytics
    method: GET
- name: canned_responses
  endpoint:
    path: /apis/rest-api/canned-response
    method: GET
- name: tags
  endpoint:
    path: /apis/rest-api/tags
    method: GET
- name: events
  endpoint:
    path: /apis/rest-api/events
    method: GET
- name: jwt
  endpoint:
    path: /apis/rest-api/jwt
    method: GET
- name: labels
  endpoint:
    path: /apis/rest-api/labels
    method: GET
- name: images
  endpoint:
    path: /apis/rest-api/images
    method: GET
- name: files
  endpoint:
    path: /apis/rest-api/files
    method: GET
- name: segments
  endpoint:
    path: /apis/rest-api/segments
    method: GET
- name: chatbots
  endpoint:
    path: /apis/rest-api/bots
    method: GET
- name: knowledge_bases
  endpoint:
    path: /apis/rest-api/knowledge-bases
    method: GET
- name: management_api
  endpoint:
    path: /apis/rest-api/management-api
    method: GET
- name: signin
  endpoint:
    path: /signin
    method: POST
    data_selector: success
    params: {}
- name: signin_anonymously
  endpoint:
    path: /signinAnonymously
    method: POST
    data_selector: success
    params: {}
- name: signin_with_custom_token
  endpoint:
    path: /signinWithCustomToken
    method: POST
    data_selector: success
    params: {}
- name: leads
  endpoint:
    path: /:project_id/leads
    method: GET
    data_selector: leads
    params:
      page: 1
- name: lead_by_id
  endpoint:
    path: /:project_id/leads/:id
    method: GET
    data_selector: lead
    params: {}
- name: create_lead
  endpoint:
    path: /:project_id/leads
    method: POST
    data_selector: lead
    params: {}
- name: update_lead
  endpoint:
    path: /:project_id/leads/:id
    method: PUT
    data_selector: lead
    params: {}
- name: delete_lead
  endpoint:
    path: /:project_id/leads/:id
    method: DELETE
    data_selector: lead
    params: {}
- name: messages
  endpoint:
    path: /v3/:project_id/requests/:request_id/messages
    method: GET
    data_selector: messages
- name: send_message
  endpoint:
    path: /v3/:project_id/requests/:request_id/messages
    method: POST
    data_selector: response
- name: messages
  endpoint:
    path: /:project_id/requests/:request_id/messages/:message_id
    method: GET
    data_selector: _id
    params: {}
- name: multi_messages
  endpoint:
    path: /:project_id/requests/:request_id/messages/multi
    method: POST
    data_selector: _id
    params: {}
- name: activities
  endpoint:
    path: /:project_id/activities
    method: GET
    data_selector: activities
    params:
      incremental: updatedAt
- name: projects
  endpoint:
    path: /projects/
    method: GET
    data_selector: '[]'
- name: project_detail
  endpoint:
    path: /projects/:project_id
    method: GET
    data_selector: '{}'
- name: available_agents
  endpoint:
    path: /projects/:project_id/users/availables
    method: GET
    data_selector: '[]'
- name: project_open_status
  endpoint:
    path: /projects/:project_id/isopen
    method: GET
    data_selector: '{}'
- name: update_project_widget
  endpoint:
    path: /projects/:project_id/availables
    method: PUT
    data_selector: '{}'
- name: get_team
  endpoint:
    path: /v3/:project_id/project_users
    method: GET
    data_selector: records
    params: {}
- name: get_teammate_by_id
  endpoint:
    path: /v3/:project_id/project_users/:project_user_id
    method: GET
    data_selector: records
    params: {}
- name: get_teammate_by_user_id
  endpoint:
    path: /v3/:project_id/project_users/users/:user_id
    method: GET
    data_selector: records
    params: {}
- name: invite_agent
  endpoint:
    path: /v3/:project_id/project_users/invite
    method: POST
    data_selector: records
    params: {}
- name: update_current_logged_teammate
  endpoint:
    path: /:project_id/project_users/
    method: PUT
- name: update_teammate_by_id
  endpoint:
    path: /:project_id/project_users/:project_user_id
    method: PUT
- name: leave_project
  endpoint:
    path: /:project_id/project_users/:project_user_id
    method: DELETE
- name: current_user
  endpoint:
    path: /users
    method: GET
    data_selector: user
- name: update_user
  endpoint:
    path: /users/
    method: PUT
    data_selector: user
- name: average_waiting_response_time
  endpoint:
    path: /:project_id/analytics/requests/waiting
    method: GET
    data_selector: records
- name: average_waiting_response_time_last_day
  endpoint:
    path: /:project_id/analytics/requests/waiting/day/last
    method: GET
    data_selector: records
- name: conversations_count_last_30_days
  endpoint:
    path: /:project_id/analytics/requests/count
    method: GET
    data_selector: records
- name: conversations_count_aggregated_by_status_last_30_days
  endpoint:
    path: /:project_id/analytics/requests/aggregate/status
    method: GET
    data_selector: records
- name: conversations_count_aggregated_by_days
  endpoint:
    path: /:project_id/analytics/requests/aggregate/day
    method: GET
    data_selector: records
- name: conversations_count_aggregated_by_months
  endpoint:
    path: /:project_id/analytics/requests/aggregate/month
    method: GET
    data_selector: records
- name: conversations_count_aggregated_by_weeks
  endpoint:
    path: /:project_id/analytics/requests/aggregate/week
    method: GET
    data_selector: records
- name: conversations_count_aggregated_by_hours
  endpoint:
    path: /:project_id/analytics/requests/aggregate/hours
    method: GET
    data_selector: records
- name: median_conversations_length
  endpoint:
    path: /:project_id/analytics/requests/duration
    method: GET
    data_selector: records
- name: median_conversations_length_last_30_days
  endpoint:
    path: /:project_id/analytics/requests/duration
    method: GET
    data_selector: records
- name: average_customers_rating
  endpoint:
    path: /:project_id/analytics/requests/satisfaction
    method: GET
    data_selector: records
- name: conversations_handled_by_bot_count
  endpoint:
    path: /:project_id/analytics/requests/hasBot/count
    method: GET
    data_selector: records
- name: total_messages_sent_received_last_30_days
  endpoint:
    path: /:project_id/analytics/messages/count
    method: GET
    data_selector: records
- name: total_messages_sent_received_aggregated_by_days_last_30_days
  endpoint:
    path: /:project_id/analytics/messages/aggregate/day
    method: GET
    data_selector: records
- name: get_all_canned_responses
  endpoint:
    path: /:project_id/canned
    method: GET
    data_selector: responses
    params: {}
- name: get_canned_response_by_id
  endpoint:
    path: /:project_id/canned/:id
    method: GET
    data_selector: response
    params: {}
- name: create_canned_response
  endpoint:
    path: /:project_id/canned
    method: POST
    data_selector: response
    params: {}
- name: update_canned_response_by_id
  endpoint:
    path: /:project_id/canned/:id
    method: PUT
    data_selector: response
    params: {}
- name: delete_canned_response_by_id
  endpoint:
    path: /:project_id/canned/:id
    method: DELETE
    data_selector: response
    params: {}
- name: tags
  endpoint:
    path: /:project_id/tags
    method: GET
- name: tag_by_id
  endpoint:
    path: /:project_id/tags/:id
    method: GET
- name: create_tag
  endpoint:
    path: /:project_id/tags
    method: POST
- name: update_tag
  endpoint:
    path: /:project_id/tags/:id
    method: PUT
- name: delete_tag
  endpoint:
    path: /:project_id/tags/:id
    method: DELETE
- name: events
  endpoint:
    path: /:project_id/events
    method: GET
    data_selector: null
    params: {}
- name: event_by_id
  endpoint:
    path: /:project_id/events/:id
    method: GET
    data_selector: null
    params: {}
- name: fire_event
  endpoint:
    path: /:project_id/events
    method: POST
    data_selector: null
    params: {}
- name: jwt_history
  endpoint:
    path: /jwt/history
    method: GET
    data_selector: results
    params: {}
- name: revoke_jwt_by_jti
  endpoint:
    path: /jwt/history/:jti
    method: DELETE
    data_selector: results
    params: {}
- name: revoke_jwt_by_id
  endpoint:
    path: /jwt/history/id/:id
    method: DELETE
    data_selector: results
    params: {}
- name: labels
  endpoint:
    path: /v3/:project_id/labels
    method: GET
    data_selector: labels
    params: {}
- name: labels_by_language
  endpoint:
    path: /v3/:project_id/labels/:id
    method: GET
    data_selector: labels
    params: {}
- name: create_or_update_label
  endpoint:
    path: /v3/:project_id/labels
    method: POST
    data_selector: label
    params: {}
- name: make_language_default
  endpoint:
    path: /v3/:project_id/labels/:lang/default
    method: PATCH
    data_selector: status
    params: {}
- name: delete_label
  endpoint:
    path: /v3/:project_id/labels/:lang
    method: DELETE
    data_selector: status
    params: {}
- name: delete_all_labels
  endpoint:
    path: /v3/:project_id/labels/
    method: DELETE
    data_selector: status
    params: {}
- name: get_all_predefined_labels
  endpoint:
    path: /v3/:project_id/labels/default
    method: GET
    data_selector: labels
    params: {}
- name: get_standard_pre_translated_labels
  endpoint:
    path: /v3/:project_id/labels/default
    method: GET
    data_selector: labels
    params: {}
- name: get_standard_pre_translated_label_by_language_id
  endpoint:
    path: /v3/:project_id/labels/default/lang
    method: GET
    data_selector: label
    params: {}
- name: create_label_clone
  endpoint:
    path: /v3/:project_id/labels/default/clone
    method: POST
    data_selector: status
    params: {}
- name: upload_user_image
  endpoint:
    path: /images/users
    method: POST
    data_selector: message
    params: {}
- name: get_image_binary
  endpoint:
    path: /images
    method: GET
    data_selector: <binary>
    params:
      path: the image path in the repository
- name: upload_user_file
  endpoint:
    path: /v3/files/users
    method: POST
    data_selector: message
    params: {}
- name: get_binary_file
  endpoint:
    path: /v3/files
    method: GET
    data_selector: <binary>
    params: {}
- name: download_binary_file
  endpoint:
    path: /v3/files/download
    method: GET
    data_selector: <binary>
    params: {}
- name: get_all_segments
  endpoint:
    path: /:project_id/segments
    method: GET
    data_selector: segments
- name: get_segment_by_id
  endpoint:
    path: /:project_id/segments/:id
    method: GET
    data_selector: segment
- name: create_segment
  endpoint:
    path: /:project_id/segments
    method: POST
    data_selector: created_segment
- name: update_segment_by_id
  endpoint:
    path: /:project_id/segments/:id
    method: PUT
    data_selector: updated_segment
- name: delete_segment_by_id
  endpoint:
    path: /:project_id/segments/:id
    method: DELETE
    data_selector: deleted_segment
- name: get_all_bots
  endpoint:
    path: /v3/:project_id/bots
    method: GET
    data_selector: '[]'
- name: get_bot_by_id
  endpoint:
    path: /v3/:project_id/bots/:id
    method: GET
    data_selector: '{}'
- name: export_bot_in_json
  endpoint:
    path: /v3/:project_id/bots/exportjson/:id
    method: GET
    data_selector: '{}'
- name: create_new_bot
  endpoint:
    path: /v3/:project_id/bots
    method: POST
    data_selector: '{}'
- name: fork_bot
  endpoint:
    path: /v3/:project_id/bots/fork/:id
    method: POST
    data_selector: '{}'
- name: import_bot
  endpoint:
    path: /:project_id/bots/importjson/:id
    method: POST
- name: update_bot
  endpoint:
    path: /:project_id/bots/:id
    method: PUT
- name: delete_bot
  endpoint:
    path: /:project_id/bots/:id
    method: DELETE
- name: departments
  endpoint:
    path: /apis/rest-api/management-api/departments
    method: GET
- name: groups
  endpoint:
    path: /apis/rest-api/management-api/groups
    method: GET
- name: support_requests
  endpoint:
    path: /apis/rest-api/requests
    method: POST
    data_selector: result
- name: messages
  endpoint:
    path: /apis/rest-api/messages
    method: POST
    data_selector: result
- name: project_user
  endpoint:
    path: /project_user
    method: GET
    data_selector: result
    params: {}
- name: subscriptions
  endpoint:
    path: /apis/webhooks/subscriptions
    method: POST
- name: subscriptions
  endpoint:
    path: /:project_id/subscriptions
    method: POST
    data_selector: ''
    params: {}
- name: get_all_subscriptions
  endpoint:
    path: /:project_id/subscriptions
    method: GET
    data_selector: ''
    params: {}
- name: get_subscription_by_id
  endpoint:
    path: /:project_id/subscriptions/:id
    method: GET
    data_selector: ''
    params: {}
- name: delete_subscription
  endpoint:
    path: /:project_id/subscriptions/:id
    method: DELETE
    data_selector: ''
    params: {}
- name: update_subscription
  endpoint:
    path: /:project_id/subscriptions/:id
    method: PUT
    data_selector: ''
    params: {}
- name: get_subscription_logs
  endpoint:
    path: /:project_id/subscriptions/history
    method: GET
    data_selector: ''
    params: {}
- name: messages
  endpoint:
    path: /messages
    method: GET
    data_selector: messages
    params: {}
- name: requests
  endpoint:
    path: /PROJECT_ID/requests
    method: GET
- name: request_detail
  endpoint:
    path: /PROJECT_ID/requests/REQUEST_ID
    method: GET
- name: request_messages
  endpoint:
    path: /PROJECT_ID/requests/REQUEST_ID/messages
    method: GET
- name: project_users
  endpoint:
    path: /PROJECT_ID/project_users/PROJECT_USER_ID
    method: GET
- name: authentication
  endpoint:
    path: /auth
    method: POST
- name: leads
  endpoint:
    path: /apis/rest-api/leads
    method: GET
- name: messages
  endpoint:
    path: /apis/rest-api/messages
    method: GET
- name: activities
  endpoint:
    path: /apis/rest-api/activities
    method: GET
- name: projects
  endpoint:
    path: /apis/rest-api/projects
    method: GET
- name: team
  endpoint:
    path: /apis/rest-api/team
    method: GET
- name: user
  endpoint:
    path: /apis/rest-api/user
    method: GET
- name: analytics
  endpoint:
    path: /apis/rest-api/analytics
    method: GET
- name: canned_responses
  endpoint:
    path: /apis/rest-api/canned-responses
    method: GET
- name: tags
  endpoint:
    path: /apis/rest-api/tags
    method: GET
- name: events
  endpoint:
    path: /apis/rest-api/events
    method: GET
- name: jwt
  endpoint:
    path: /apis/rest-api/jwt
    method: GET
- name: labels
  endpoint:
    path: /apis/rest-api/labels
    method: GET
- name: images
  endpoint:
    path: /apis/rest-api/images
    method: GET
- name: files
  endpoint:
    path: /apis/rest-api/files
    method: GET
- name: segments
  endpoint:
    path: /apis/rest-api/segments
    method: GET
- name: chatbots
  endpoint:
    path: /apis/rest-api/bots
    method: GET
- name: knowledge_bases
  endpoint:
    path: /apis/rest-api/knowledge-bases
    method: GET
- name: management_api
  endpoint:
    path: /apis/rest-api/management-api
    method: GET
- name: webhook_subscriptions
  endpoint:
    path: /apis/webhooks/subscriptions
    method: POST
- name: requests
  endpoint:
    path: /apis/rest-api/requests
    method: GET
- name: messages
  endpoint:
    path: /apis/rest-api/messages
    method: GET
- name: users
  endpoint:
    path: /apis/rest-api/user
    method: GET
- name: setWebhook
  endpoint:
    path: /bot<your_token>/setWebhook
    method: POST
    data_selector: result
    params: {}
- name: leads
  endpoint:
    path: /apis/rest-api/leads
    method: GET
- name: messages
  endpoint:
    path: /apis/rest-api/messages
    method: GET
- name: leads
  endpoint:
    path: /apis/rest-api/leads
    method: GET
- name: messages
  endpoint:
    path: /apis/rest-api/messages
    method: GET
- name: leads
  endpoint:
    path: /apis/rest-api/leads
    method: GET
- name: messages
  endpoint:
    path: /apis/rest-api/messages
    method: GET
- name: activities
  endpoint:
    path: /apis/rest-api/activities
    method: GET
- name: projects
  endpoint:
    path: /apis/rest-api/projects
    method: GET
- name: team
  endpoint:
    path: /apis/rest-api/team
    method: GET
- name: user
  endpoint:
    path: /apis/rest-api/user
    method: GET
- name: analytics
  endpoint:
    path: /apis/rest-api/analytics
    method: GET
- name: email_parameters
  endpoint:
    path: /configuration/email
    method: GET
    data_selector: email_settings
- name: mongodb_logs
  endpoint:
    params:
      WRITE_LOG_TO_MONGODB: 'true'
      LOG_MONGODB_LEVEL: error
- name: leads
  endpoint:
    path: /apis/rest-api/leads
    method: GET
- name: messages
  endpoint:
    path: /apis/rest-api/messages
    method: GET
notes:
- Requests can originate from a number of channels, including email, chat, Facebook,
  Whatsapp or the API.
- 'Minimum role: agent'
- 'Minimum role: agent for most endpoints, guest for rating and creating requests.'
- When opening an issue, create a small, isolated, simple, reproduction of the issue
  using an online code editor (like replit, codepen, codesandbox etc.) if possible
  and a GitHub repository if not.
- Your question must be well-documented and you should provide the minimum code required
  to reproduce the problem.
- The Tiledesk Roadmap is publicly accessible, allowing the community to stay informed
  about upcoming features.
- The Tiledesk Changelog provides an overview of the most recent key features that
  have been released.
- Uses JWT for secure authentication.
- Website visitors are generally leads whereas logged in users are Tiledesk users
  already logged in.
- You can configure your widget to authenticate visitors using the Javascript API
  and JWT token.
- Default values for various attributes are provided in the documentation.
- Uses JWT for authentication.
- The Tiledesk Widget is compatible with Android 13+.
- Uses JavaScript for widget configuration
- Ensure to replace <<TILEDESK_PROJECT_ID>> with your actual project ID
- Make sure you have installed react-native-webview via Expo command.
- This example shows how to integrate the Tiledesk Widget via a custom HTML code using
  Wix website platform.
- JWT Authentication is used.
- Start widget in hidden mode setting startHidden boolean property to true
- startHidden property must be set to true to not show widget when it starts.
- Widget is not loaded by default and appears after 5 seconds unless triggered by
  an event.
- This Tiledesk example will hide the widget if no agent is available
- This Tiledesk example will change the widget size in height and width as you want
- Script checks current URL to decide if the widget should be loaded.
- This Tiledesk example will change the default style of widget launcher icon and
  add a simple animation hovering it
- Embedded App runs on its own web server on the HTTPS protocol.
- Data exchanged with the app is unknown by Tiledesk and is exchanged directly between
  the app and its own backend.
- Using an app is a secure way to accomplish this task.
- Do not forget to activate the webhook switch on the bottom.
- Prechat form requires user to fill out information before human handoff.
- Some objects may return nulls in deeply nested fields
- Use departmentID property to skip department selection in the widget.
- Uses OAuth2 with refresh token — requires setup of connected app in api
- Requires setup of connected app in Tiledesk
- New features are constantly added to Tiledesk widget.
- The prechat form is asked just once to the user, on the first conversation.
- Once filled and submitted the form data is saved in the browser Local Storage database.
- 'Some reserved field names: userEmail, userFullname, firstMessage'
- Easily integrate your own chatbot technology using Tiledesk's widget on websites
  and mobile apps
- Use Tiledesk multichannel features to propose your custom chatbot on Facebook, Telegram,
  Whatsapp etc.
- APIKEYs will be introduced later in Tiledesk but Node.js APIs already support them
  as a mandatory parameter.
- You can handoff to human agents from any Tiledesk chatbot (native or external) simply
  sending the \agent text as the last line of any message.
- The Widget native protocol supports sending rich messages including buttons.
- Microlanguage allows sending buttons without programming.
- This tutorial uses Dialogflow just as an example for a programmatic external chatbot
  integration.
- Uses Dialogflow as an external chatbot integration
- Uses Dialogflow just as an example for a programmatic external chatbot integration.
- You must securely save the Google Credentials file on your computer and never publish
  it online.
- Fork the project on Replit to create your own RASA proxy
- Use your RASA server address in the index.js file
- Webhook endpoint must be activated for each specific intent to be dynamically served
  with remote fulfillment.
- It must handle HTTPS requests. HTTP is not supported.
- Its URL for requests must be publicly accessible.
- It must handle POST requests with a JSON WebhookRequest body.
- It must respond to WebhookRequest requests with a JSON WebhookResponse body.
- Microlanguage is by default enabled in fulfillment.
- API requires JWT authentication.
- Uses JWT for authentication — ensure proper token management.
- Chatbots can be configured for multiple languages.
- The chatbot uses the default fallback intent to decode the user's input.
- As you can see 'fullname' is not populated. We left this on purpose unfulfilled.
- The request_id field must follow the pattern 'support-group-UUID'.
- 'Minimum role: user for most endpoints, agent for project detail, guest for open
  status'
- Authorization token can be Basic Auth or JWT
- Minimum role for certain actions is admin
- Allows to upload a file with authentication
- Webhook requests have a 10-second timeout.
- 'You must remove all the messages where sender: “system” if you only need messages
  from end-users/humans/chatbot.'
- The Realtime API is implemented using WebSocket technology.
- You must be a verified user to make API requests.
- The shared secret is intended to remain secure.
- Regenerating a new shared secret will revoke the previous token.
- The app is installed in several locations including the Dashboard Monitor panel
  and the Tiledesk App Store.
- Use the token provided by @BotFather to set the webhook.
- The Webhook is now configured!
- Chat21 uses RabbitMQ + MQTT realtime engine.
- Uses JWT authentication
- Minimum recommended setup involves two separate servers.
- For production environments, consider a robust server configuration with load balancer
  and auto-scaling.
- 'CHAT21_ENABLED: true'
- 'CHAT21_ENGINE: firebase'
- 'CHAT21_APPID: tilechat'
- To enable the email service set the follow env property to true of your tiledesk-server
  component.
- Default value for EMAIL_ENABLED is false.
- 'Tiledesk uses Winston as logging library. The Tiledesk server is configured with
  the following transports: the console, logs files under /logs/app.log folder.'
- Use REST API for accessing various resources.
errors:
- '200: Successful response with the list of requests.'
- Authorization token is required for all requests.
- Minimum role required for specific actions.
- '401 Unauthorized: Recheck JWT token expiration'
- '401 Unauthorized: Recheck JWT token.'
- '400 Bad Request: Invalid request data'
- '401 Unauthorized: Invalid token or user not authenticated'
- '401 Unauthorized: Check your API key or token.'
- '400 Bad Request: Check request parameters.'
- '401 Unauthorized: Verify JWT token.'
- 'REQUEST_LIMIT_EXCEEDED: Throttle API calls or reduce frequency'
- 'QUERY_TIMEOUT: Break down filters or add selectivity'
- '401 Unauthorized: Recheck OAuth scopes or token expiration'
- '401 Unauthorized: Invalid JWT token.'
- '401 Unauthorized: Check your JWT token.'
- '404 Not Found: Verify the endpoint path.'
- DefaultFallback intent does not match user input.
- '429 Too Many Requests: Rate limit exceeded'
- '200: Successful request'
- '401: Unauthorized access'
- '401: Unauthorized, check credentials'
- '401 Unauthorized: Recheck authorization token'
- '404 Not Found: Check project_id or bot id'
- 'Failed: 504 Gateway Timeout: A service didn''t respond to a webhook''s request
  within the timeout period.'
- 'REQUEST_TIMEOUT: Check your network connection.'
- '401 Unauthorized: Recheck JWT token validity.'
- 'Invalid email configuration: Check SMTP settings.'
- EMAIL_ENABLED should be set to true to enable email subsystem.
auth_info:
  mentioned_objects:
  - JWT
  - JWT Authentication
  - Jwt
client:
  base_url: https://tiledesk.com
  auth:
    type: oauth2
source_metadata: null
