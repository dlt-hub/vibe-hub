resources:
- name: account.authorizationForm
  endpoint:
    path: /account/authorizationForm
    method: GET
- name: account.getAuthorizationForm
  endpoint:
    path: /account/getAuthorizationForm
    method: GET
- name: account.acceptAuthorization
  endpoint:
    path: /account/acceptAuthorization
    method: POST
- name: canSendStory
  endpoint:
    path: stories.canSendStory
    method: POST
- name: sendStory
  endpoint:
    path: stories.sendStory
    method: POST
- name: getChatsToSend
  endpoint:
    path: stories.getChatsToSend
    method: GET
- name: editStory
  endpoint:
    path: stories.editStory
    method: POST
- name: deleteStories
  endpoint:
    path: stories.deleteStories
    method: POST
- name: getStoriesArchive
  endpoint:
    path: stories.getStoriesArchive
    method: GET
- name: getPinnedStories
  endpoint:
    path: stories.getPinnedStories
    method: GET
- name: searchPosts
  endpoint:
    path: stories.searchPosts
    method: POST
- name: report
  endpoint:
    path: stories.report
    method: POST
- name: exportStoryLink
  endpoint:
    path: stories.exportStoryLink
    method: POST
- name: activateStealthMode
  endpoint:
    path: stories.activateStealthMode
    method: POST
- name: getStoryStats
  endpoint:
    path: stats.getStoryStats
    method: GET
- name: getStoryPublicForwards
  endpoint:
    path: stats.getStoryPublicForwards
    method: GET
- name: sendMedia
  endpoint:
    path: messages.sendMedia
    method: POST
    data_selector: poll
- name: sendVote
  endpoint:
    path: messages.sendVote
    method: POST
    data_selector: option
- name: getPollResults
  endpoint:
    path: messages.getPollResults
    method: POST
    data_selector: pollResults
- name: getPollVotes
  endpoint:
    path: messages.getPollVotes
    method: POST
    data_selector: votes
- name: config
  endpoint:
    path: config
    method: GET
- name: nearestDc
  endpoint:
    path: nearestDc
    method: GET
- name: messages.updatePinnedMessage
  endpoint:
    path: messages.updatePinnedMessage
    method: POST
- name: messages.unpinAllMessages
  endpoint:
    path: messages.unpinAllMessages
    method: POST
- name: messages.search
  endpoint:
    path: messages.search
    method: POST
- name: sendVerificationMessage
  endpoint:
    path: sendVerificationMessage
    method: POST
    data_selector: result
- name: checkSendAbility
  endpoint:
    path: checkSendAbility
    method: POST
    data_selector: result
- name: checkVerificationStatus
  endpoint:
    path: checkVerificationStatus
    method: POST
    data_selector: verification_status
- name: historyImport
  endpoint:
    path: messages.historyImport
    method: POST
    data_selector: messages.HistoryImport
    params: {}
- name: checkHistoryImport
  endpoint:
    path: messages.checkHistoryImport
    method: POST
    data_selector: messages.HistoryImportParsed
    params: {}
- name: checkHistoryImportPeer
  endpoint:
    path: messages.checkHistoryImportPeer
    method: POST
    data_selector: messages.CheckedHistoryImportPeer
    params: {}
- name: initHistoryImport
  endpoint:
    path: messages.initHistoryImport
    method: POST
    data_selector: messages.HistoryImport
    params: {}
- name: uploadImportedMedia
  endpoint:
    path: messages.uploadImportedMedia
    method: POST
    data_selector: MessageMedia
    params: {}
- name: startHistoryImport
  endpoint:
    path: messages.startHistoryImport
    method: POST
    data_selector: Bool
    params: {}
- name: messages.getDhConfig
  endpoint:
    path: messages.getDhConfig
    method: GET
- name: messages.requestEncryption
  endpoint:
    path: messages.requestEncryption
    method: POST
- name: messages.acceptEncryption
  endpoint:
    path: messages.acceptEncryption
    method: POST
- name: messages.sendEncrypted
  endpoint:
    path: messages.sendEncrypted
    method: POST
- name: messages.sendEncryptedFile
  endpoint:
    path: messages.sendEncryptedFile
    method: POST
- name: messages.receivedQueue
  endpoint:
    path: messages.receivedQueue
    method: POST
- name: updates.getDifference
  endpoint:
    path: updates.getDifference
    method: GET
- name: premiumGiftCodeOption
  endpoint:
    path: payments.getPremiumGiftCodeOptions
    method: GET
- name: paymentForm
  endpoint:
    path: payments.getPaymentForm
    method: GET
- name: boostsStatus
  endpoint:
    path: premium.getBoostsStatus
    method: GET
- name: launchPrepaidGiveaway
  endpoint:
    path: payments.launchPrepaidGiveaway
    method: POST
- name: checkGiftCode
  endpoint:
    path: payments.checkGiftCode
    method: GET
- name: applyGiftCode
  endpoint:
    path: payments.applyGiftCode
    method: POST
- name: getSavedDialogs
  endpoint:
    path: messages.getSavedDialogs
    method: GET
    data_selector: dialogs
    params: {}
- name: getSavedHistory
  endpoint:
    path: messages.getSavedHistory
    method: GET
    data_selector: messages
    params: {}
- name: deleteSavedHistory
  endpoint:
    path: messages.deleteSavedHistory
    method: POST
    data_selector: result
    params: {}
- name: getPinnedSavedDialogs
  endpoint:
    path: messages.getPinnedSavedDialogs
    method: GET
    data_selector: dialogs
    params: {}
- name: toggleSavedDialogPin
  endpoint:
    path: messages.toggleSavedDialogPin
    method: POST
    data_selector: result
    params: {}
- name: reorderPinnedSavedDialogs
  endpoint:
    path: messages.reorderPinnedSavedDialogs
    method: POST
    data_selector: result
    params: {}
- name: search
  endpoint:
    path: messages.search
    method: GET
    data_selector: messages
    params: {}
- name: getSearchCounters
  endpoint:
    path: messages.getSearchCounters
    method: GET
    data_selector: counters
    params: {}
- name: getSearchResultsCalendar
  endpoint:
    path: messages.getSearchResultsCalendar
    method: GET
    data_selector: results
    params: {}
- name: getSearchResultsPositions
  endpoint:
    path: messages.getSearchResultsPositions
    method: GET
    data_selector: results
    params: {}
- name: messages
  endpoint:
    path: messages.sendMessage
    method: POST
- name: channelParticipants
  endpoint:
    path: channels.getParticipants
    method: GET
- name: unreadMentions
  endpoint:
    path: messages.getUnreadMentions
    method: GET
- name: readMentions
  endpoint:
    path: messages.readMentions
    method: POST
- name: uploadWallPaper
  endpoint:
    path: /account/uploadWallPaper
    method: POST
    data_selector: wallpaper
    params: {}
- name: getWallPapers
  endpoint:
    path: /account/getWallPapers
    method: GET
    data_selector: wallpapers
    params: {}
- name: saveWallPaper
  endpoint:
    path: /account/saveWallPaper
    method: POST
    data_selector: wallpaper
    params: {}
- name: setChatWallPaper
  endpoint:
    path: /messages/setChatWallPaper
    method: POST
    data_selector: wallpaper
    params: {}
- name: messages
  endpoint:
    path: messages/messages
    method: GET
    data_selector: messages
    params: {}
- name: messagesSlice
  endpoint:
    path: messages/messagesSlice
    method: GET
    data_selector: messages
    params: {}
- name: channelMessages
  endpoint:
    path: messages/channelMessages
    method: GET
    data_selector: messages
    params: {}
- name: messagesNotModified
  endpoint:
    path: messages/messagesNotModified
    method: GET
    data_selector: messages
    params: {}
- name: search
  endpoint:
    path: messages/search
    method: GET
    data_selector: messages
    params: {}
- name: searchGlobal
  endpoint:
    path: messages/searchGlobal
    method: GET
    data_selector: messages
    params: {}
- name: getTopPeers
  endpoint:
    path: contacts/getTopPeers
    method: GET
    data_selector: contacts
    params: {}
- name: getChannelRecommendations
  endpoint:
    path: channels/getChannelRecommendations
    method: GET
    data_selector: channels
    params: {}
- name: getPopularAppBots
  endpoint:
    path: bots/getPopularAppBots
    method: GET
    data_selector: bots
    params: {}
- name: contacts
  endpoint:
    path: contacts.getSaved
    method: GET
    data_selector: contacts
    params: {}
- name: left_channels
  endpoint:
    path: channels.getLeftChannels
    method: GET
    data_selector: chats
    params: {}
- name: starsStatus
  endpoint:
    path: payments.getStarsStatus
    method: GET
- name: starsTransactions
  endpoint:
    path: payments.getStarsTransactions
    method: GET
- name: starsRevenueStats
  endpoint:
    path: payments.getStarsRevenueStats
    method: GET
- name: starsTopupOptions
  endpoint:
    path: payments.getStarsTopupOptions
    method: GET
- name: starsGiftOptions
  endpoint:
    path: payments.getStarsGiftOptions
    method: GET
- name: starsRevenueWithdrawalUrl
  endpoint:
    path: payments.getStarsRevenueWithdrawalUrl
    method: GET
- name: starsRevenueAdsAccountUrl
  endpoint:
    path: payments.getStarsRevenueAdsAccountUrl
    method: GET
- name: forumTopics
  endpoint:
    path: channels.getForumTopics
    method: GET
    data_selector: topics
- name: forumTopicsByID
  endpoint:
    path: channels.getForumTopicsByID
    method: GET
    data_selector: topics
- name: createForumTopic
  endpoint:
    path: channels.createForumTopic
    method: POST
- name: editForumTopic
  endpoint:
    path: channels.editForumTopic
    method: POST
- name: deleteTopicHistory
  endpoint:
    path: channels.deleteTopicHistory
    method: POST
- name: userFull
  endpoint:
    path: userFull#979d2376
    method: GET
    data_selector: flags
    params: {}
- name: businessWorkHours
  endpoint:
    path: businessWorkHours#8c92b098
    method: POST
    data_selector: flags
    params: {}
- name: businessLocation
  endpoint:
    path: businessLocation#ac5c1af7
    method: POST
    data_selector: flags
    params: {}
- name: quickReplies
  endpoint:
    path: messages.quickReplies#c68d6695
    method: GET
    data_selector: quick_replies
    params: {}
- name: businessGreetingMessage
  endpoint:
    path: businessGreetingMessage#e519abab
    method: POST
    data_selector: flags
    params: {}
- name: businessAwayMessage
  endpoint:
    path: businessAwayMessage#ef156a5c
    method: POST
    data_selector: flags
    params: {}
- name: businessIntro
  endpoint:
    path: businessIntro#5a0a066d
    method: POST
    data_selector: flags
    params: {}
- name: businessChatLinks
  endpoint:
    path: account.businessChatLinks#ec43a2d1
    method: GET
    data_selector: links
    params: {}
- name: connectedBots
  endpoint:
    path: account.connectedBots#17d7f87b
    method: GET
    data_selector: connected_bots
    params: {}
- name: user
  endpoint:
    path: /users.getUsers
    method: POST
    data_selector: users
- name: chat
  endpoint:
    path: /messages.getChats
    method: POST
    data_selector: chats
- name: channel
  endpoint:
    path: /channels.getChannels
    method: POST
    data_selector: channels
- name: stickerSet
  endpoint:
    path: messages.getStickerSet
    method: GET
    data_selector: stickerset
    params: {}
- name: featuredStickers
  endpoint:
    path: messages.getFeaturedStickers
    method: GET
    data_selector: sets
    params: {}
- name: favedStickers
  endpoint:
    path: messages.getFavedStickers
    method: GET
    data_selector: stickers
    params: {}
- name: recentStickers
  endpoint:
    path: messages.getRecentStickers
    method: GET
    data_selector: stickers
    params: {}
- name: allStickers
  endpoint:
    path: messages.getAllStickers
    method: GET
    data_selector: sets
    params: {}
- name: emojiStickers
  endpoint:
    path: messages.getEmojiStickers
    method: GET
    data_selector: sets
    params: {}
- name: maskStickers
  endpoint:
    path: messages.getMaskStickers
    method: GET
    data_selector: sets
    params: {}
- name: attachedStickers
  endpoint:
    path: messages.getAttachedStickers
    method: GET
    data_selector: stickers
    params: {}
- name: links
  endpoint:
    path: /links
    method: GET
    data_selector: links
    params: {}
- name: deleteAccount
  endpoint:
    path: account.deleteAccount
    method: POST
    data_selector: null
    params:
      password: flags.0?InputCheckPasswordSRP
- name: confirmPhone
  endpoint:
    path: account.confirmPhone
    method: POST
    data_selector: null
    params:
      phone_code_hash: string
      phone_code: string
- name: sendConfirmPhoneCode
  endpoint:
    path: account.sendConfirmPhoneCode
    method: POST
    data_selector: null
    params:
      hash: string
      settings: CodeSettings
- name: getMe
  endpoint:
    path: /bot<YOUR_BOT_TOKEN>/getMe
    method: GET
    data_selector: result
- name: getCustomEmojiDocuments
  endpoint:
    path: messages.getCustomEmojiDocuments
    method: GET
    data_selector: Vector<Document>
- name: getEmojiKeywordsLanguages
  endpoint:
    path: messages.getEmojiKeywordsLanguages
    method: GET
    data_selector: Vector<EmojiLanguage>
- name: getEmojiKeywords
  endpoint:
    path: messages.getEmojiKeywords
    method: GET
    data_selector: EmojiKeywordsDifference
- name: getEmojiKeywordsDifference
  endpoint:
    path: messages.getEmojiKeywordsDifference
    method: GET
    data_selector: EmojiKeywordsDifference
- name: getEmojiURL
  endpoint:
    path: messages.getEmojiURL
    method: GET
    data_selector: EmojiURL
- name: getPeerColors
  endpoint:
    path: help.getPeerColors
    method: GET
    data_selector: hash
- name: getPeerProfileColors
  endpoint:
    path: help.getPeerProfileColors
    method: GET
    data_selector: hash
- name: getDefaultBackgroundEmojis
  endpoint:
    path: account.getDefaultBackgroundEmojis
    method: GET
    data_selector: hash
- name: updateColor
  endpoint:
    path: account.updateColor
    method: POST
    data_selector: flags
- name: channelsUpdateColor
  endpoint:
    path: channels.updateColor
    method: POST
    data_selector: flags
- name: availableEffects
  endpoint:
    path: messages.getAvailableEffects
    method: GET
- name: messages.sendMedia
  endpoint:
    path: messages.sendMedia
    method: POST
    data_selector: Updates
    params: {}
- name: messages.setGameScore
  endpoint:
    path: messages.setGameScore
    method: POST
    data_selector: Updates
    params: {}
- name: messages.setInlineGameScore
  endpoint:
    path: messages.setInlineGameScore
    method: POST
    data_selector: Bool
    params: {}
- name: messages.getGameHighScores
  endpoint:
    path: messages.getGameHighScores
    method: POST
    data_selector: messages.HighScores
    params: {}
- name: messages.getInlineGameHighScores
  endpoint:
    path: messages.getInlineGameHighScores
    method: POST
    data_selector: messages.HighScores
    params: {}
- name: channel_recommendations
  endpoint:
    path: /channels/getChannelRecommendations
    method: GET
    data_selector: recommended_channels
    params: {}
- name: bots.getAdminedBots
  endpoint:
    path: bots.getAdminedBots
    method: GET
- name: payments.getSuggestedStarRefBots
  endpoint:
    path: payments.getSuggestedStarRefBots
    method: GET
- name: payments.connectStarRefBot
  endpoint:
    path: payments.connectStarRefBot
    method: POST
- name: payments.getConnectedStarRefBots
  endpoint:
    path: payments.getConnectedStarRefBots
    method: GET
- name: payments.getConnectedStarRefBot
  endpoint:
    path: payments.getConnectedStarRefBot
    method: GET
- name: payments.editConnectedStarRefBot
  endpoint:
    path: payments.editConnectedStarRefBot
    method: POST
- name: contacts.resolveUsername
  endpoint:
    path: contacts.resolveUsername
    method: GET
- name: botResults
  endpoint:
    path: messages.botResults
    method: GET
    data_selector: results
- name: inlineBotResults
  endpoint:
    path: messages.getInlineBotResults
    method: GET
    data_selector: results
- name: message_entity
  endpoint:
    path: /api/message_entities
    method: GET
    data_selector: entities
- name: my_boosts
  endpoint:
    path: premium.getMyBoosts
    method: GET
    data_selector: my_boosts
- name: boosts_status
  endpoint:
    path: premium.getBoostsStatus
    method: GET
    data_selector: boostsStatus
- name: boosts_list
  endpoint:
    path: premium.getBoostsList
    method: GET
    data_selector: boostsList
- name: user_boosts
  endpoint:
    path: premium.getUserBoosts
    method: GET
    data_selector: boostsList
- name: apply_boost
  endpoint:
    path: premium.applyBoost
    method: POST
    data_selector: myBoosts
- name: privacy_rules
  endpoint:
    path: account.privacyRules
    method: GET
    data_selector: rules
- name: global_privacy_settings
  endpoint:
    path: account.getGlobalPrivacySettings
    method: GET
    data_selector: globalPrivacySettings
- name: user
  endpoint:
    path: users.getIsPremiumRequiredToContact
    method: GET
    data_selector: users
- name: emojiGroupsNotModified
  endpoint:
    path: messages.emojiGroupsNotModified#6fb4ad87
    method: GET
    data_selector: EmojiGroups
    params: {}
- name: emojiGroups
  endpoint:
    path: messages.emojiGroups#881fb94b
    method: GET
    data_selector: EmojiGroups
    params: {}
- name: getEmojiGroups
  endpoint:
    path: messages.getEmojiGroups#7488ce5b
    method: GET
    data_selector: EmojiGroups
    params: {}
- name: getEmojiStickerGroups
  endpoint:
    path: messages.getEmojiStickerGroups#1dd840f5
    method: GET
    data_selector: EmojiGroups
    params: {}
- name: getEmojiStatusGroups
  endpoint:
    path: messages.getEmojiStatusGroups#2ecd56cd
    method: GET
    data_selector: EmojiGroups
    params: {}
- name: getEmojiProfilePhotoGroups
  endpoint:
    path: messages.getEmojiProfilePhotoGroups#21a548f3
    method: GET
    data_selector: EmojiGroups
    params: {}
- name: messages
  endpoint:
    path: /messages
    method: GET
    data_selector: data
    params:
      incremental: updated_at
- name: users
  endpoint:
    path: /users
    method: GET
    data_selector: data
    params: {}
- name: broadcast_stats
  endpoint:
    path: stats.getBroadcastStats
    method: GET
- name: megagroup_stats
  endpoint:
    path: stats.getMegagroupStats
    method: GET
- name: message_stats
  endpoint:
    path: stats.getMessageStats
    method: GET
- name: story_stats
  endpoint:
    path: stats.getStoryStats
    method: GET
- name: factCheck
  endpoint:
    path: factcheck
    method: GET
    data_selector: factCheck
- name: messages.getFactCheck
  endpoint:
    path: messages.getFactCheck
    method: POST
    data_selector: factCheck
- name: messages.editFactCheck
  endpoint:
    path: messages.editFactCheck
    method: POST
    data_selector: Updates
- name: messages.deleteFactCheck
  endpoint:
    path: messages.deleteFactCheck
    method: POST
    data_selector: Updates
- name: channelFull
  endpoint:
    path: channelFull#bbab348d
    method: GET
    data_selector: flags
    params: {}
- name: inputMediaPaidMedia
  endpoint:
    path: inputMediaPaidMedia#c4103386
    method: GET
    data_selector: flags
    params: {}
- name: messages.sendMedia
  endpoint:
    path: messages.sendMedia#7852834e
    method: POST
    data_selector: flags
    params: {}
- name: starsTransaction
  endpoint:
    path: starsTransaction#64dfc926
    method: GET
    data_selector: flags
    params: {}
- name: messages.sendMedia
  endpoint:
    path: messages.sendMedia
    method: POST
    data_selector: Updates
- name: messages.editMessage
  endpoint:
    path: messages.editMessage
    method: POST
    data_selector: Updates
- name: upload.getWebFile
  endpoint:
    path: upload.getWebFile
    method: POST
    data_selector: upload.WebFile
- name: dialogFilters
  endpoint:
    path: /messages.getDialogFilters
    method: GET
    data_selector: filters
- name: suggestedDialogFilters
  endpoint:
    path: /messages.getSuggestedDialogFilters
    method: GET
    data_selector: filters
- name: updateDialogFilter
  endpoint:
    path: /messages.updateDialogFilter
    method: POST
    data_selector: filter
- name: updateDialogFiltersOrder
  endpoint:
    path: /messages.updateDialogFiltersOrder
    method: POST
    data_selector: order
- name: setBotMenuButton
  endpoint:
    path: bots.setBotMenuButton
    method: POST
    data_selector: Bool
    params: {}
- name: getBotMenuButton
  endpoint:
    path: bots.getBotMenuButton
    method: POST
    data_selector: BotMenuButton
    params: {}
- name: getFullUser
  endpoint:
    path: users.getFullUser
    method: POST
    data_selector: UserFull
    params: {}
- name: sendMessage
  endpoint:
    path: messages.sendMessage
    method: POST
    data_selector: Updates
- name: sendMedia
  endpoint:
    path: messages.sendMedia
    method: POST
    data_selector: Updates
- name: getScheduledHistory
  endpoint:
    path: messages.getScheduledHistory
    method: POST
    data_selector: messages.Messages
- name: getScheduledMessages
  endpoint:
    path: messages.getScheduledMessages
    method: POST
    data_selector: messages.Messages
- name: sendScheduledMessages
  endpoint:
    path: messages.sendScheduledMessages
    method: POST
    data_selector: Updates
- name: deleteScheduledMessages
  endpoint:
    path: messages.deleteScheduledMessages
    method: POST
    data_selector: Updates
- name: editMessage
  endpoint:
    path: messages.editMessage
    method: POST
    data_selector: Updates
- name: imported_contacts
  endpoint:
    path: contacts.importContacts
    method: POST
    data_selector: contacts
    params: {}
- name: get_contacts
  endpoint:
    path: contacts.getContacts
    method: GET
    data_selector: contacts
    params: {}
- name: get_contact_ids
  endpoint:
    path: contacts.getContactIDs
    method: GET
    data_selector: ids
    params: {}
- name: get_saved
  endpoint:
    path: contacts.getSaved
    method: GET
    data_selector: saved_contacts
    params: {}
- name: delete_contacts
  endpoint:
    path: contacts.deleteContacts
    method: POST
    data_selector: updates
    params: {}
- name: delete_by_phones
  endpoint:
    path: contacts.deleteByPhones
    method: POST
    data_selector: success
    params: {}
- name: reset_saved
  endpoint:
    path: contacts.resetSaved
    method: POST
    data_selector: success
    params: {}
- name: search_contacts
  endpoint:
    path: contacts.search
    method: POST
    data_selector: results
    params: {}
- name: setDiscussionGroup
  endpoint:
    path: /channels.setDiscussionGroup
    method: POST
- name: getGroupsForDiscussion
  endpoint:
    path: /channels.getGroupsForDiscussion
    method: POST
- name: togglePreHistoryHidden
  endpoint:
    path: /channels.togglePreHistoryHidden
    method: POST
- name: toggleJoinToSend
  endpoint:
    path: /channels.toggleJoinToSend
    method: POST
- name: user
  endpoint:
    path: user
    method: GET
    data_selector: user#83314fca
- name: webViewResult
  endpoint:
    path: webViewResult
    method: GET
    data_selector: webViewResultUrl#4d22ff98
- name: botInfo
  endpoint:
    path: botInfo
    method: GET
    data_selector: botInfo#36607333
- name: botApp
  endpoint:
    path: botApp
    method: GET
    data_selector: botApp#95fcd1d6
- name: getAppConfig
  endpoint:
    path: help.getAppConfig
    method: GET
- name: getStickerSet
  endpoint:
    path: messages.getStickerSet
    method: GET
    params:
      stickerset: InputStickerSet
- name: sendMedia
  endpoint:
    path: messages.sendMedia
    method: POST
    params:
      media: InputMedia
      message: string
      random_id: long
- name: checkUsername
  endpoint:
    path: channels.checkUsername
    method: GET
    data_selector: Bool
    params: {}
- name: transcribe_audio
  endpoint:
    path: messages.transcribeAudio
    method: POST
    data_selector: messages.TranscribedAudio
    params: {}
- name: rate_transcribed_audio
  endpoint:
    path: messages.rateTranscribedAudio
    method: POST
    data_selector: Bool
    params: {}
- name: sendMessage
  endpoint:
    path: sendMessage
    method: POST
    data_selector: result
    params: {}
- name: setWebhook
  endpoint:
    path: setWebhook
    method: POST
    data_selector: result
    params: {}
- name: broadcastRevenueTransactions
  endpoint:
    path: stats.getBroadcastRevenueTransactions
    method: GET
- name: broadcastRevenueStats
  endpoint:
    path: stats.getBroadcastRevenueStats
    method: GET
- name: broadcastRevenueWithdrawalUrl
  endpoint:
    path: stats.getBroadcastRevenueWithdrawalUrl
    method: GET
- name: restrictSponsoredMessages
  endpoint:
    path: channels.restrictSponsoredMessages
    method: POST
- name: toggleAntiSpam
  endpoint:
    path: channels.toggleAntiSpam
    method: POST
    data_selector: channel
    params:
      enabled: Bool
- name: reportAntiSpamFalsePositive
  endpoint:
    path: channels.reportAntiSpamFalsePositive
    method: POST
    data_selector: channel
    params:
      msg_id: int
- name: savedRingtones
  endpoint:
    path: account.savedRingtones
    method: GET
- name: uploadRingtone
  endpoint:
    path: account.uploadRingtone
    method: POST
- name: saveRingtone
  endpoint:
    path: account.saveRingtone
    method: POST
- name: getSavedRingtones
  endpoint:
    path: account.getSavedRingtones
    method: GET
- name: updateNotifySettings
  endpoint:
    path: account.updateNotifySettings
    method: POST
- name: account.updateEmojiStatus
  endpoint:
    path: account.updateEmojiStatus
    method: POST
    data_selector: Bool
- name: account.getRecentEmojiStatuses
  endpoint:
    path: account.getRecentEmojiStatuses
    method: GET
    data_selector: account.EmojiStatuses
- name: account.clearRecentEmojiStatuses
  endpoint:
    path: account.clearRecentEmojiStatuses
    method: POST
    data_selector: Bool
- name: account.getChannelRestrictedStatusEmojis
  endpoint:
    path: account.getChannelRestrictedStatusEmojis
    method: GET
    data_selector: EmojiList
- name: account.getDefaultEmojiStatuses
  endpoint:
    path: account.getDefaultEmojiStatuses
    method: GET
    data_selector: account.EmojiStatuses
- name: account.getChannelDefaultEmojiStatuses
  endpoint:
    path: account.getChannelDefaultEmojiStatuses
    method: GET
    data_selector: account.EmojiStatuses
- name: saved_gifs
  endpoint:
    path: messages.savedGifs
    method: GET
    data_selector: gifs
- name: save_gif
  endpoint:
    path: messages.saveGif
    method: POST
    data_selector: Bool
- name: get_saved_gifs
  endpoint:
    path: messages.getSavedGifs
    method: GET
    data_selector: messages.SavedGifs
- name: auth.importBotAuthorization
  endpoint:
    path: /auth.importBotAuthorization
    method: POST
    data_selector: flags
    params: {}
- name: uploadTheme
  endpoint:
    path: /account/uploadTheme
    method: POST
- name: createTheme
  endpoint:
    path: /account/createTheme
    method: POST
- name: updateTheme
  endpoint:
    path: /account/updateTheme
    method: POST
- name: getTheme
  endpoint:
    path: /account/getTheme
    method: POST
- name: getThemes
  endpoint:
    path: /account/getThemes
    method: POST
- name: saveTheme
  endpoint:
    path: /account/saveTheme
    method: POST
- name: installTheme
  endpoint:
    path: /account/installTheme
    method: POST
- name: premiumPromo
  endpoint:
    path: help.premiumPromo#5334759c
    method: GET
    data_selector: users
    params: {}
- name: getPremiumPromo
  endpoint:
    path: help.getPremiumPromo#b81b93d4
    method: GET
    data_selector: premiumPromo
    params: {}
- name: getFullUser
  endpoint:
    path: users.getFullUser#b60f5918
    method: GET
    data_selector: UserFull
    params: {}
- name: starGifts
  endpoint:
    path: payments.getStarGifts
    method: GET
- name: userStarGifts
  endpoint:
    path: payments.getUserStarGifts
    method: GET
    params:
      user_id: InputUser
      offset: string
      limit: int
- name: saveStarGift
  endpoint:
    path: payments.saveStarGift
    method: POST
    params:
      user_id: InputUser
      msg_id: int
- name: convertStarGift
  endpoint:
    path: payments.convertStarGift
    method: POST
    params:
      user_id: InputUser
      msg_id: int
- name: updateProfile
  endpoint:
    path: /account.updateProfile
    method: POST
    data_selector: result
- name: updateEmojiStatus
  endpoint:
    path: /account.updateEmojiStatus
    method: POST
    data_selector: result
- name: updateUsername
  endpoint:
    path: /account.updateUsername
    method: POST
    data_selector: result
- name: updateColor
  endpoint:
    path: /account.updateColor
    method: POST
    data_selector: result
- name: updateBirthday
  endpoint:
    path: /account.updateBirthday
    method: POST
    data_selector: result
- name: updatePersonalChannel
  endpoint:
    path: /account.updatePersonalChannel
    method: POST
    data_selector: result
- name: updateBusinessWorkHours
  endpoint:
    path: /account.updateBusinessWorkHours
    method: POST
    data_selector: result
- name: updateBusinessLocation
  endpoint:
    path: /account.updateBusinessLocation
    method: POST
    data_selector: result
- name: updateBusinessGreetingMessage
  endpoint:
    path: /account.updateBusinessGreetingMessage
    method: POST
    data_selector: result
- name: updateBusinessAwayMessage
  endpoint:
    path: /account.updateBusinessAwayMessage
    method: POST
    data_selector: result
- name: updateBusinessIntro
  endpoint:
    path: /account.updateBusinessIntro
    method: POST
    data_selector: result
- name: starsSubscription
  endpoint:
    path: starsSubscription#2e6eab1a
    method: GET
    data_selector: starsSubscription
    params: {}
- name: payments
  endpoint:
    path: payments.getStarsSubscriptions#032512c5
    method: GET
    data_selector: payments.StarsStatus
    params: {}
- name: attach_menu_bot
  endpoint:
    path: messages.getAttachMenuBot
    method: GET
- name: attach_menu_bots
  endpoint:
    path: messages.getAttachMenuBots
    method: GET
- name: toggle_bot_in_attach_menu
  endpoint:
    path: messages.toggleBotInAttachMenu
    method: POST
- name: create_channel
  endpoint:
    path: /channels.createChannel
    method: POST
    data_selector: result
    params:
      broadcast: true
- name: send_message
  endpoint:
    path: /messages.sendMessage
    method: POST
    data_selector: result
    params:
      signatures_enabled: true
      profiles_enabled: true
- name: migrate_chat
  endpoint:
    path: /messages.migrateChat
    method: POST
    data_selector: result
    params: {}
- name: convert_to_gigagroup
  endpoint:
    path: /channels.convertToGigagroup
    method: POST
    data_selector: result
    params: {}
- name: messages.sendReaction
  endpoint:
    path: messages.sendReaction
    method: POST
- name: messages.getMessagesReactions
  endpoint:
    path: messages.getMessagesReactions
    method: GET
- name: messages.getMessageReactionsList
  endpoint:
    path: messages.getMessageReactionsList
    method: GET
- name: messages.getUnreadReactions
  endpoint:
    path: messages.getUnreadReactions
    method: GET
- name: messages.readReactions
  endpoint:
    path: messages.readReactions
    method: POST
- name: messages.reportReaction
  endpoint:
    path: messages.reportReaction
    method: POST
- name: messages.getAvailableReactions
  endpoint:
    path: messages.getAvailableReactions
    method: GET
- name: messages.setChatAvailableReactions
  endpoint:
    path: messages.setChatAvailableReactions
    method: POST
- name: account.setReactionsNotifySettings
  endpoint:
    path: account.setReactionsNotifySettings
    method: POST
- name: account.getReactionsNotifySettings
  endpoint:
    path: account.getReactionsNotifySettings
    method: GET
- name: web_app_events
  endpoint:
    path: /web_app/events
    method: POST
    data_selector: events
    params: {}
- name: peerSettings
  endpoint:
    path: messages.getPeerSettings
    method: GET
    data_selector: peerSettings
- name: userFull
  endpoint:
    path: users.getFullUser
    method: GET
    data_selector: userFull
- name: updatePeerSettings
  endpoint:
    path: updatePeerSettings
    method: POST
    data_selector: updatePeerSettings
- name: hidePeerSettingsBar
  endpoint:
    path: messages.hidePeerSettingsBar
    method: POST
    data_selector: hidePeerSettingsBar
- name: keyboardButton
  endpoint:
    path: /keyboardButton
    method: GET
    data_selector: buttons
    params: {}
- name: messages.sendMessage
  endpoint:
    path: /messages/sendMessage
    method: POST
    data_selector: Updates
    params: {}
- name: messages.getBotCallbackAnswer
  endpoint:
    path: /messages/getBotCallbackAnswer
    method: POST
    data_selector: messages.BotCallbackAnswer
    params: {}
- name: messages.setBotCallbackAnswer
  endpoint:
    path: /messages/setBotCallbackAnswer
    method: POST
    data_selector: Bool
    params: {}
- name: messages.translateText
  endpoint:
    path: messages.translateText
    method: GET
    data_selector: result
    params: {}
- name: messages.togglePeerTranslations
  endpoint:
    path: messages.togglePeerTranslations
    method: GET
    data_selector: disabled
    params: {}
- name: messages.search
  endpoint:
    path: messages.search
    method: GET
    data_selector: Messages
    params: {}
- name: animated_emoji_stickerset
  endpoint:
    path: messages.getStickerSet
    method: GET
    data_selector: stickerset
    params:
      stickerset: inputStickerSetAnimatedEmoji
- name: animated_reaction_emoji_stickerset
  endpoint:
    path: messages.getStickerSet
    method: GET
    data_selector: stickerset
    params:
      stickerset: inputStickerSetAnimatedEmojiAnimations
- name: channels.updateUsername
  endpoint:
    path: channels.updateUsername
    method: POST
    data_selector: Bool
    params:
      channel: InputChannel
      username: string
- name: botCommand
  endpoint:
    path: /botCommand
    method: GET
    data_selector: BotCommand
- name: botInfo
  endpoint:
    path: /botInfo
    method: GET
    data_selector: BotInfo
- name: channelFull
  endpoint:
    path: /channelFull
    method: GET
    data_selector: ChatFull
- name: userFull
  endpoint:
    path: /userFull
    method: GET
    data_selector: UserFull
- name: getAdminLog
  endpoint:
    path: channels.getAdminLog
    method: GET
    data_selector: events
    params:
      limit: int
- name: getLocated
  endpoint:
    path: contacts.getLocated
    method: GET
    data_selector: Updates
    params:
      geo_point: InputGeoPoint
- name: createChannel
  endpoint:
    path: channels.createChannel
    method: POST
    data_selector: Updates
    params:
      geo_point: InputGeoPoint
      address: string
- name: editLocation
  endpoint:
    path: channels.editLocation
    method: POST
    data_selector: Bool
    params:
      geo_point: InputGeoPoint
      address: string
- name: botCommand
  endpoint:
    path: /botCommand
    method: GET
    data_selector: BotCommand
    params: {}
- name: bots.setBotCommands
  endpoint:
    path: /bots.setBotCommands
    method: POST
    data_selector: Bool
    params: {}
- name: username
  endpoint:
    path: /username
    method: GET
- name: user
  endpoint:
    path: /user
    method: GET
- name: channel
  endpoint:
    path: /channel
    method: GET
- name: collectible_info
  endpoint:
    path: /fragment/getCollectibleInfo
    method: GET
- name: updateUsername
  endpoint:
    path: /account.updateUsername
    method: POST
    data_selector: User
    params: {}
- name: document
  endpoint:
    data_selector: Document
- name: sendVerificationMessage
  endpoint:
    path: /sendVerificationMessage
    method: POST
- name: checkSendAbility
  endpoint:
    path: /checkSendAbility
    method: POST
- name: checkVerificationStatus
  endpoint:
    path: /checkVerificationStatus
    method: POST
- name: revokeVerificationMessage
  endpoint:
    path: /revokeVerificationMessage
    method: POST
- name: keyboardButton
  endpoint:
    path: keyboardButton#a2fa4880
    method: GET
- name: keyboardButtonUrl
  endpoint:
    path: keyboardButtonUrl#258aff05
    method: GET
- name: keyboardButtonCallback
  endpoint:
    path: keyboardButtonCallback#35bbdb6b
    method: GET
- name: keyboardButtonRequestPhone
  endpoint:
    path: keyboardButtonRequestPhone#b16a6c29
    method: GET
- name: keyboardButtonRequestGeoLocation
  endpoint:
    path: keyboardButtonRequestGeoLocation#fc796b3f
    method: GET
- name: keyboardButtonSwitchInline
  endpoint:
    path: keyboardButtonSwitchInline#93b9fbb5
    method: GET
- name: keyboardButtonGame
  endpoint:
    path: keyboardButtonGame#50f41ccf
    method: GET
- name: keyboardButtonBuy
  endpoint:
    path: keyboardButtonBuy#afd93fbb
    method: GET
- name: keyboardButtonUrlAuth
  endpoint:
    path: keyboardButtonUrlAuth#10b78d29
    method: GET
- name: inputKeyboardButtonUrlAuth
  endpoint:
    path: inputKeyboardButtonUrlAuth#d02e7fd4
    method: GET
- name: keyboardButtonRequestPoll
  endpoint:
    path: keyboardButtonRequestPoll#bbc7515d
    method: GET
- name: inputKeyboardButtonRequestPeer
  endpoint:
    path: inputKeyboardButtonRequestPeer#c9662d05
    method: GET
- name: keyboardButtonRow
  endpoint:
    path: keyboardButtonRow#77608b83
    method: GET
- name: messagesSendMessage
  endpoint:
    path: messages.sendMessage#983f9745
    method: POST
- name: messagesBotCallbackAnswer
  endpoint:
    path: messages.botCallbackAnswer#36585ea4
    method: GET
- name: messagesGetBotCallbackAnswer
  endpoint:
    path: messages.getBotCallbackAnswer#9342ca07
    method: GET
- name: updateBotCallbackQuery
  endpoint:
    path: updateBotCallbackQuery#b9cfc48d
    method: POST
- name: updateInlineBotCallbackQuery
  endpoint:
    path: updateInlineBotCallbackQuery#691e9052
    method: POST
- name: updateBusinessBotCallbackQuery
  endpoint:
    path: updateBusinessBotCallbackQuery#1ea2fda7
    method: POST
- name: messagesSetBotCallbackAnswer
  endpoint:
    path: messages.setBotCallbackAnswer#d58f130a
    method: POST
- name: getBlocked
  endpoint:
    path: contacts.getBlocked
    method: GET
    data_selector: blocked
    params:
      flags: my_stories_from
      offset: int
      limit: int
- name: setBlocked
  endpoint:
    path: contacts.setBlocked
    method: POST
    data_selector: Bool
    params:
      flags: my_stories_from
      id: Vector<InputPeer>
      limit: int
- name: block
  endpoint:
    path: contacts.block
    method: POST
    data_selector: Bool
    params:
      flags: my_stories_from
      id: InputPeer
- name: unblock
  endpoint:
    path: contacts.unblock
    method: POST
    data_selector: Bool
    params:
      flags: my_stories_from
      id: InputPeer
- name: resolvedPeer
  endpoint:
    path: contacts.resolvedPeer#7f077ad9
    method: GET
    data_selector: peer
- name: resolveUsername
  endpoint:
    path: contacts.resolveUsername#725afbbc
    method: GET
    data_selector: flags
- name: joinChannel
  endpoint:
    path: channels.joinChannel#24b524c5
    method: GET
    data_selector: channel
- name: checkUsername
  endpoint:
    path: channels.checkUsername#10e6bd2c
    method: GET
    data_selector: channel
- name: updateUsername
  endpoint:
    path: channels.updateUsername#3514b3de
    method: GET
    data_selector: channel
- name: user
  endpoint:
    path: /users
    method: GET
    data_selector: users
- name: channel
  endpoint:
    path: /channels
    method: GET
    data_selector: channels
- name: topPeers
  endpoint:
    path: contacts.topPeers#70b772a8
    method: GET
    data_selector: categories
    params: {}
- name: toggleTopPeers
  endpoint:
    path: contacts.toggleTopPeers#8514bdda
    method: POST
    data_selector: enabled
    params: {}
- name: resetTopPeerRating
  endpoint:
    path: contacts.resetTopPeerRating#1ae373ac
    method: POST
    data_selector: category
    params: {}
notes:
- Clients should automatically authenticate users when opening official Telegram websites,
  listed in the autologin_domains key of the client configuration object
- Clients should show a confirmation prompt similar to the one used for bots, to authenticate
  users when opening certain Telegram websites, listed in the url_auth_domains key
  of the client configuration object
- Users can upload their documents once, then instantly share their data with services
  that require real-world ID.
- Starting December 1, 2024 messages with video that are sent, copied or forwarded
  to groups and channels with a sufficiently large audience can be automatically scheduled
  by the server until the respective video is reencoded. Such messages will have 0
  as their message identifier and can't be used before they are actually sent.
- Uses OAuth2 with refresh token — requires setup of connected app in api
- Some objects like Contact may return nulls in deeply nested fields
- After this update it will become impossible to forward messages from some chats.
  Use the fields has_protected_content in the classes Message and Chat to check this.
- After this update users are able to send messages on behalf of channels they own.
  Bots are expected to use the field sender_chat in the class Message to correctly
  support such messages.
- Telegram bots can support multiple languages that adapt to the users' language settings
  in the app.
- Privacy mode is enabled by default for all bots, except bots that were added to
  a group as admins.
- TDLib controls the maximum number of active notification groups by using the option
  notification_group_count_max.
- TDLib controls the maximum number of active notifications in a group by using the
  option notification_group_size_max.
- The maximum uploadable file part size is 512KB.
- The last part does not have to satisfy the size conditions, provided it's less than
  part_size.
- third-party developers are required to maintain the same level of security.
- All clients with secret chat support must be able to initiate re-keying and accept
  relevant service messages.
- The configuration should be manually refreshed immediately upon receival of an updateConfig
  update.
- File references must be cached by the client along with the origin context where
  the document/photo object was found
- A FILE_REFERENCE_EXPIRED error may be returned when downloading a file
- More than one origin context can be associated with one file reference for resilience
- 'Token must be passed in every request as ''Authorization: Bearer <token>'' or ''access_token''
  parameter.'
- You will be automatically charged in advance for the price of one message if the
  method indicates that the user can be contacted.
- Typically, history imports are allowed for private chats with a mutual contact or
  supergroups with change_info administrator rights.
- Client must support Forward Secrecy in Secret Chats to be compatible with official
  Telegram clients.
- Client must support sequence numbers in Secret Chats to be compatible with official
  Telegram clients.
- It's a good idea to transform peer IDs to bot dialog API IDs even if you do decide
  to use separate databases to store info about peers.
- User IDs in the MTProto API range from 1 to 0xffffffffff (inclusive).
- Chat IDs in the MTProto API range from 1 to 999999999999 (inclusive).
- Supergroup/channel IDs share the same sequence in the MTProto API, and they range
  from 1 to 997852516352 (inclusive).
- Secret chat IDs in the MTProto API range from -2147483648 to 2147483647 (inclusive,
  treat the secret chat ID as a signed little-endian 32-bit integer).
- An invoice message with a pay button can only be sent to a private chat with the
  user. Groups and channels are not supported.
- This document describes encryption in voice and video calls as implemented in Telegram
  apps with versions 7.0 and above.
- Fill wallpapers don't require uploading since they have no associated file.
- Searching should invoke messages.searchGlobal with applicable filters and initial
  string.
- Contains results from various messaging functionalities, including global search
  for posts from public channels.
- Options not mentioned in this list may be safely ignored.
- Always ignore updates received from unencrypted connections
- If the connection is encrypted but the session isn't logged in yet or was logged
  out, only certain updates may be handled
- Telegram Business is included with Telegram Premium subscription
- Business users can set a business location and opening hours.
- The access_hash is required to interact with peers in the API.
- The @stickers bot is deprecated, and the in-app editor should be used.
- Mask stickers can have associated coordinates for placement.
- Handles special tg:// and t.me deep links.
- All links should be parsed according to the defined syntaxes.
- Channels and supergroups allow setting granular permissions both for admins and
  specific users.
- Basic groups do not allow setting granular admin permissions, messages.editChatAdmin
  has to be used, instead.
- Basic groups do not allow setting granular user permissions for single users.
- Bots can suggest a set of admin rights when being added to groups and channels.
- Each bot has a unique token which can also be revoked at any time via @BotFather.
- Keep your token in a secure place, treat it like a password.
- Sponsored messages must be cached for 5 minutes.
- Sponsored messages must be displayed below all other posts in channels after scrolling
  down.
- In bots, sponsored messages must be displayed above the chat.
- Clients should re-invoke the method to check for updates in the effects list at
  most once an hour.
- Clients should invoke channels.getChannelRecommendations after joining a channel.
- Different message entities can be used for various types of content.
- To set up a recovery email, it must first be verified.
- If the user has forgotten their 2FA password, recovery options are available.
- Webhook requires SSL/TLS encryption.
- Self-signed certificates must be in PEM format.
- Requires user to grant permissions for specific scopes.
- Administrators can invoke stats.getBroadcastStats to get detailed channel statistics.
- Administrators can call stats.getMegagroupStats to get detailed supergroup statistics.
- Bots with privacy mode enabled will receive messages only for their commands.
- It's not possible to get updates via long polling while an outgoing Webhook is set.
- Manual requests for fact checks should be bundled and postponed by 80ms.
- Store full fact checks in a local database using the hash as key.
- Avoid fetching minimum fact checks if a fact check with the same hash is cached.
- To subscribe to notifications, the client must invoke the account.registerDevice
  query, passing in token_type and token as parameters that identify the current device.
- It is useful to repeat this query at least once every 24 hours or when restarting
  the application.
- Channel administrators may forward or post paid media if the channelFull.paid_media_allowed
  flag is set.
- To purchase paid media, follow the usual payment flow, passing an inputInvoiceMessage.
- Attachment menu integration is currently only available for major advertisers on
  the Telegram Ad Platform.
- Folders may be shared using chat folder deep links.
- The maximum number of per-folder invites that can be created by Premium/non-Premium
  users is specified by the chatlist_invites_limit_default/chatlist_invites_limit_premium
  client configuration parameters.
- Admins may use channels.toggleJoinToSend to force users to join a discussion group
  before commenting.
- Users without a Telegram Premium subscription can only transcribe a limited number
  of messages per week.
- Webhook URL must be defined for receiving messages
- The certificate supplied should be PEM encoded (ASCII BASE64), the pem file should
  only contain the public key (including BEGIN and END portions).
- When converting from a bundle format, please split the file to only include the
  public key.
- 'A self-signed certificate will be generated and installed, to view the certificate:
  certutil -store -user my'
- It is recommended to use gzip compression when calling methods to reduce network
  traffic.
- All balances and currency amounts are in the smallest unit of the chosen cryptocurrency.
- GIFs are actually MPEG4 videos without sound.
- Uploading a GIF will automatically add it to the saved GIFs list.
- Uses OAuth2 with refresh token — requires setup of Telegram app in API
- Changing the username will emit an updateUserName update.
- The length of an entity must not include the length of trailing newlines or whitespaces,
  rtrim entities before computing their length
- The next offset must include the length of newlines or whitespaces that precede
  it
- All methods in the Bot API are case-insensitive.
- Requires user to send messages in the format `https://api.telegram.org/bot<token>/METHOD_NAME`.
- Bots that have the bot_attach_menu flag set offer an attachment or side menu entry.
- Changes made using toggleBotInAttachMenu will trigger an update in other clients.
- Supergroups can support up to 200,000 members.
- Gigagroups have no participant limit but only admins can write.
- Users can react to a message with one or more reactions using messages.sendReaction.
- Use messages.getMessagesReactions to fetch a full list of reactions for one or more
  messages.
- In groups, messages.getMessageReactionsList can be used to fetch the reaction list,
  along with the sender of each reaction.
- Credit card details will be handled only by the payment system
- Events must have a TTL of 10 seconds
- Use messages.getBotCallbackAnswer to handle button callbacks.
- Bots must reply quickly to avoid timeouts.
- The command list can be changed by the owner of the bot through @botfather.
- Bots can also change their own command list by invoking bots.setBotCommands.
- Do not set background and self_expires flags when using contacts.getLocated.
- self_expires flag must always be set when advertising location.
- The client must save an expires_at unix timestamp.
- An unbound temp_auth_key_id may only be used with specific methods.
- Each permanent key may only be bound to one temporary key at a time.
errors:
- 'REQUEST_LIMIT_EXCEEDED: Throttle API calls or reduce frequency'
- 'QUERY_TIMEOUT: Break down filters or add selectivity'
- '401 Unauthorized: Recheck OAuth scopes or token expiration'
- Flood limits are not raised in the test environment, and may at times be stricter.
- upload_max_fileparts_*
- FILE_REFERENCE_EXPIRED
- 'FILE_REFERENCE_EXPIRED: Use context info to refetch the object that contained the
  file reference'
- 'FILE_REFERENCE_%d_EXPIRED: Indicates the media with the expired file reference
  in the passed media array'
- '400 FORM_EXPIRED: The returned form is only valid for 10 minutes.'
- '400 BALANCE_TOO_LOW: The current Telegram Stars balance is not enough to complete
  the transaction.'
- '400 QUICK_REPLIES_TOO_MUCH: Max number of quick replies reached'
- '400 REPLY_MESSAGES_TOO_MUCH: Max number of messages in quick reply reached'
- 'CHATLINKS_TOO_MUCH: Max number of business chat links reached'
- 'CHAT_FORWARDS_RESTRICTED: Refresh info about the source chat.'
- 'CHAT_GUEST_SEND_FORBIDDEN: Refresh info about the discussion group.'
- 'USER_NOT_PARTICIPANT: Refresh info about the channel/supergroup.'
- '401 Unauthorized: Token is invalid or revoked.'
- '400 Bad Request: Check the API request parameters.'
- 'AD_EXPIRED: RPC error for expired ads'
- 'PREMIUM_ACCOUNT_REQUIRED: RPC error if Telegram Premium is required for a chosen
  option.'
- 'PREMIUM_ACCOUNT_REQUIRED: Upgrade to Telegram Premium'
- 'BOOST_NOT_MODIFIED: Already boosting the specified channel or supergroup'
- 'FLOOD_WAIT_X: Cooldown period not over yet'
- AUTH_TOKEN_INVALID
- AUTH_TOKEN_INVALID1
- AUTH_TOKEN_EXPIRED
- AUTH_TOKEN_ALREADY_ACCEPTED
- 'PASSWORD_MISSING: No 2FA password is configured, but one is required.'
- 'PASSWORD_TOO_FRESH_%d: The 2FA password was modified less than 24 hours ago, try
  again in %d seconds.'
- 'SESSION_TOO_FRESH_%d: This session was created less than 24 hours ago, try again
  in %d seconds.'
- 'PASSWORD_HASH_INVALID: The specified password is invalid.'
- '400 Bad Request: Check your request parameters.'
- '401 Unauthorized: Invalid or expired token.'
- '404 Not Found: The requested resource was not found.'
- '429 Too Many Requests: Spreading requests over longer intervals is recommended.'
- No information will be returned for passed messages containing not yet bought paid
  media, or not containing paid media.
- '400 Bad Request: Check parameters for correctness.'
- '401 Unauthorized: Recheck OAuth scopes or token expiration.'
- 'CHAT_GUEST_SEND_FORBIDDEN: Non-members attempting to send a message to the group.'
- '400: CHANNELS_ADMIN_PUBLIC_TOO_MUCH'
- '400: CHANNEL_INVALID'
- '400: CHANNEL_PRIVATE'
- '400: CHAT_ID_INVALID'
- '400: MSG_ID_INVALID'
- '400: PEER_ID_INVALID'
- '400: USERNAME_INVALID'
- '400: USERNAME_OCCUPIED'
- '400: USERNAME_PURCHASE_AVAILABLE'
- '401: Invalid access token provided'
- '400 BIRTHDAY_INVALID: Check the birth year range'
- AUTH_KEY_DUPLICATED
- '500'
- 'UNSUPPORTED: Operation not supported on this device or platform'
- 'ALREADY_FULLSCREEN: The Mini App is already in fullscreen mode'
- 'CHANNELS_ADMIN_PUBLIC_TOO_MUCH: You''re admin of too many public channels, make
  some channels private to change the username of this channel.'
- 'CHANNEL_INVALID: The provided channel is invalid.'
- 'CHANNEL_PRIVATE: You haven''t joined this channel/supergroup.'
- 'CHAT_ADMIN_REQUIRED: You must be an admin in this chat to do this.'
- 'CHAT_NOT_MODIFIED: No changes were made to chat information because the new information
  you passed is identical to the current information.'
- 'CHAT_WRITE_FORBIDDEN: You can''t write in this chat.'
- 'USERNAME_INVALID: The provided username is not valid.'
- 'USERNAME_NOT_MODIFIED: The username was not modified.'
- 'USERNAME_OCCUPIED: The provided username is already occupied.'
- 'USERNAME_PURCHASE_AVAILABLE: The specified username can be purchased on https://fragment.com.'
- 'BUSINESS_ADDRESS_ACTIVE: Location may only be changed using account.updateBusinessLocation.'
- 'ENCRYPTED_MESSAGE_INVALID: Handle the error as specified in the documentation.'
- '404: Non-existent auth_key_id.'
- '400 USERNAME_INVALID: The provided username is not valid.'
- '400 USERNAME_NOT_MODIFIED: The username was not modified.'
- '400 USERNAME_OCCUPIED: The provided username is already occupied.'
- '400 USERNAME_PURCHASE_AVAILABLE: The specified username can be purchased on https://fragment.com.'
auth_info:
  mentioned_objects:
  - InputUser
  - InputPeer
  - InputChannel
  - OAuthToken
  - AuthProvider
  - NamedCredential
  - User
  - UserFull
  - InputGeoPoint
  - InputBusinessGreetingMessage
  - InputBusinessAwayMessage
  - InputBusinessIntro
client:
  headers:
    Accept: application/json
    Content-Type: application/json
    Cache-Control: no-cache
  base_url: https://gatewayapi.telegram.org
  auth:
    type: Bearer
    location: header
    header_name: Authorization
    flow: refresh_token
    token_url: https://login.telegram.org/oauth/token
    client_id: '{{ dlt.secrets[''api_client_id''] }}'
    client_secret: '{{ dlt.secrets[''api_client_secret''] }}'
    refresh_token: '{{ dlt.secrets[''api_refresh_token''] }}'
    auth_key_id: auth_key_id
  paginator:
    type: offset
    cursor_path: next_cursor
    cursor_param: next
    page_size_param: limit
    default_page_size: 20
source_metadata: null
