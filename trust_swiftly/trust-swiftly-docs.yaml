resources:
- name: users
  endpoint:
    path: /api/users
    method: POST
    data_selector: status
    params: {}
- name: users
  endpoint:
    path: /api/users
    method: POST
    data_selector: id
    params: {}
- name: users
  endpoint:
    path: /api/users/ref/{reference_id}
    method: GET
    data_selector: magic_link
    params: {}
- name: users
  endpoint:
    path: /api/users/ref/{user_id}
    method: GET
    data_selector: magic_link
- name: create_user
  endpoint:
    path: /api/create_user
    method: POST
    data_selector: response
    params: {}
- name: create_user
  endpoint:
    path: /api/user/create
    method: POST
    data_selector: magic_link
- name: verifyuser
  endpoint:
    path: /project/demo-4d8110/verifyuser
    method: POST
- name: users
  endpoint:
    path: /api/users
    method: GET
    data_selector: data
    params: {}
- name: user
  endpoint:
    path: /api/users/{id}
    method: GET
    data_selector: data
    params: {}
- name: create_user
  endpoint:
    path: /api/users
    method: POST
    data_selector: status
    params: {}
- name: update_user
  endpoint:
    path: /api/users/{id}
    method: PATCH
    data_selector: success
    params: {}
- name: delete_user
  endpoint:
    path: /api/users/{id}
    method: DELETE
    data_selector: success
    params: {}
- name: get_verify_link
  endpoint:
    path: /api/users/{id}/verify-url
    method: POST
    data_selector: short_url
    params: {}
- name: reverify_user
  endpoint:
    path: /api/user/document/reverify
    method: POST
    data_selector: success
    params: {}
- name: create_verification_job
  endpoint:
    path: /api/verify/document
    method: POST
    data_selector: success
    params: {}
- name: get_verification_status
  endpoint:
    path: /api/verify/document/status
    method: POST
    data_selector: success
    params: {}
- name: stats
  endpoint:
    path: /api/stats
    method: GET
    data_selector: users_per_month
- name: verification_templates
  endpoint:
    path: /api/settings/templates/verifications
    method: GET
    data_selector: templates
    params: {}
- name: users
  endpoint:
    path: /api/users
    method: GET
    data_selector: data
    params: {}
- name: users
  endpoint:
    path: /api/users
    method: GET
    data_selector: records
    params: {}
- name: webhook
  endpoint:
    path: /settings/webhooks
    method: POST
    data_selector: event
    params: {}
- name: webhooks
  endpoint:
    path: /webhooks/trustswiftly
    method: POST
- name: verifications
  endpoint:
    path: /verifications
    method: POST
    data_selector: verifications
- name: self_verification
  endpoint:
    path: /signup
    method: GET
- name: user_creation
  endpoint:
    path: /user/quick_create
    method: GET
    data_selector: query_parameters
    params: {}
- name: Slack Notifications
  endpoint:
    path: /api/slack/notifications
    method: POST
    data_selector: status
    params: {}
- name: supported_documents
  endpoint:
    path: /api/documents
    method: GET
    data_selector: documents
    params: {}
notes:
- Your API key grants full access to your Trust Swiftly account data.
- You must treat it with the same care as you would a password.
- You are not able to directly send us images to analyze for documents.
- API keys are only visible once, please copy and save the keys.
- Uses API key for authentication.
- Ensure permissions are correctly set for your app bundle.
- Camera and Microphone Permission
- Ensure that the magic link is correctly stored in your Bubble database.
- Ensure email notifications are enabled for user verification.
- Magic link will be sent via email after user creation.
- Webhook URL should be the endpoint of your FlutterFlow app that will handle incoming
  webhooks.
- 'Webhook Events: Verification.completed'
- This guide is for testing purposes and not intended to be used for a production
  or advanced setup app.
- Integrates seamlessly with Zapier for identity verification automation
- Document verification process is asynchronous.
- Must ensure user exists and is assigned to a Verification Template.
- Authentication is handled via the Authorization header.
- Authentication is handled via the Authorization header. Your secret API key must
  be prefixed with Bearer.
- Default page size is 15 items per page.
- Maximum page size allowed is 100 items per page.
- Filtering and sorting results can help speed up responses and data collection by
  allowing you to request only the data you need.
- The API imposes rate limits on incoming requests.
- Return a 2xx status code quickly to acknowledge receipt of an event
- Your app must verify that notification messages originated from Trust Swiftly using
  webhook_secret
- To ensure the integrity and authenticity of the webhooks sent from Trust Swiftly,
  we sign every request sent to your endpoint.
- It is a critical security practice to store your secret outside of your codebase.
- The signature is an HMAC-SHA256 hash, generated using your unique webhook signing
  secret and the raw request body.
- The payload includes user status and verification attributes.
- This Link is a One-Time Secret
- Self-verifications allow users to create their own accounts and complete verifications
  without requiring any code or integration.
- Integrating Trust Swiftly with a SAML2 identity provider centralizes user management,
  enhances security, and simplifies the login process.
- Make sure SP initiated login is checked.
- Setup SSO with Entra using a custom app for SAML authentication.
- Enforce Single Sign On setting for added security. Only SAML authenticated sessions
  will be allowed.
- Requires setup of Incoming Webhook in Slack
- Integrate Trust Swiftly with Zoho Cliq to receive real-time notifications about
  verification events.
- Notifications from Trust Swiftly will appear in your configured Zoho Cliq channel.
- 'Important Note on Test Mode: If you are operating in Stripe''s test mode, you must
  enable ''Test mode'' on the Trust Swiftly Stripe App connection page to ensure transactions
  are handled correctly.'
- The API supports over 300 document types for verification.
- The keys are only visible once so please copy and save the keys.
- The secret API key is only displayed once at the time it is created.
errors:
- '401 Unauthorized: Recheck API key'
- 'REQUEST_LIMIT_EXCEEDED: Throttle API calls or reduce frequency'
- 'QUERY_TIMEOUT: Break down filters or add selectivity'
- '401 Unauthorized: Recheck API key or token expiration'
- Api Key Wrong or Unauthorized User
- 'already_assigned: Already assigned'
- '404 Not Found: User not found.'
- '422 Unprocessable Entity: The selected current workflow id is invalid or does not
  match the user''s workflow.'
- 'invalid_document_id: Invalid Document Id'
- '401 Unauthorized: Recheck API key.'
- '401 Unauthorized: No valid API key was provided or the key is invalid.'
- '404 Not Found: The requested resource (like a user) does not exist.'
- '422 Unprocessable Entity: The request was well-formed, but the server was unable
  to process it due to validation errors.'
- '400 Bad Request: The request was unacceptable, often due to malformed syntax or
  missing data.'
- '500 / 5xx: Something went wrong on Trust Swiftly''s end.'
- '429 Too Many Requests: Too Many Requests'
- '401 Unauthorized: Recheck OAuth scopes or token expiration'
auth_info:
  mentioned_objects: []
client:
  base_url: https://{sub-domain}.trustswiftly.com
  headers:
    Accept: application/json
    Content-Type: application/json
    User-Agent: TrustSwiftly/1.0
source_metadata: null
