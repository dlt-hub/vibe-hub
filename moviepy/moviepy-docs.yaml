resources:
- name: trailer
  endpoint:
    path: /moviepy/trailer
    method: GET
    data_selector: clips
    params: {}
- name: preview_clip
  endpoint:
    path: /preview
    method: POST
    data_selector: clipData
    params: {}
- name: save_clip
  endpoint:
    path: /save
    method: POST
    data_selector: saveData
    params: {}
- name: VideoFileClip
  endpoint:
    path: /reference/reference/moviepy.video.VideoFileClip
    method: GET
    data_selector: reference
    params: {}
- name: ImageClip
  endpoint:
    path: /reference/reference/moviepy.video.ImageClip
    method: GET
    data_selector: reference
    params: {}
- name: AudioClip
  endpoint:
    path: /reference/reference/moviepy.audio.AudioClip
    method: GET
    data_selector: reference
    params: {}
- name: VideoClip
  endpoint:
    path: /reference/moviepy.video.VideoClip.VideoClip
    method: GET
- name: VideoFileClip
  endpoint:
    path: /reference/moviepy.video.io.VideoFileClip.VideoFileClip
    method: GET
- name: ImageSequenceClip
  endpoint:
    path: /reference/moviepy.video.io.ImageSequenceClip.ImageSequenceClip
    method: GET
- name: AudioFileClip
  endpoint:
    path: /reference/moviepy.audio.AudioFileClip.AudioFileClip
    method: GET
- name: AudioClip
  endpoint:
    path: /reference/moviepy.audio.AudioClip.AudioClip
    method: GET
- name: TextClip
  endpoint:
    path: /reference/moviepy.video.VideoClip.TextClip
    method: GET
- name: ColorClip
  endpoint:
    path: /reference/moviepy.video.VideoClip.ColorClip
    method: GET
- name: DataVideoClip
  endpoint:
    path: /reference/moviepy.video.DataVideoClip
    method: GET
- name: UpdatedVideoClip
  endpoint:
    path: /reference/moviepy.video.UpdatedVideoClip
    method: GET
- name: VideoClip
  endpoint:
    path: /VideoClip
    method: GET
    data_selector: clips
    params: {}
- name: AudioClip
  endpoint:
    path: /AudioClip
    method: GET
    data_selector: clips
    params: {}
- name: VideoClip
  endpoint:
    path: /reference/moviepy.VideoClip.VideoClip
    method: GET
    data_selector: records
- name: VideoFileClip
  endpoint:
    path: /reference/moviepy.video.io.VideoFileClip.VideoFileClip
    method: GET
    data_selector: records
- name: ImageSequenceClip
  endpoint:
    path: /reference/moviepy.video.io.ImageSequenceClip.ImageSequenceClip
    method: GET
    data_selector: records
- name: ImageClip
  endpoint:
    path: /reference/moviepy.video.VideoClip.ImageClip
    method: GET
    data_selector: records
- name: TextClip
  endpoint:
    path: /reference/moviepy.video.VideoClip.TextClip
    method: GET
    data_selector: records
- name: ColorClip
  endpoint:
    path: /reference/moviepy.video.VideoClip.ColorClip
    method: GET
    data_selector: records
- name: AudioFileClip
  endpoint:
    path: /reference/moviepy.audio.AudioFileClip.AudioFileClip
    method: GET
    data_selector: records
- name: AudioClip
  endpoint:
    path: /reference/moviepy.audio.AudioClip.AudioClip
    method: GET
    data_selector: records
- name: ImageClip
  endpoint:
    path: /reference/moviepy.video.VideoClip.ImageClip
    method: GET
- name: TextClip
  endpoint:
    path: /reference/moviepy.video.VideoClip.TextClip
    method: GET
- name: ColorClip
  endpoint:
    path: /reference/moviepy.video.VideoClip.ColorClip
    method: GET
- name: VideoClip
  endpoint:
    path: /reference/moviepy.video.VideoClip.VideoClip
    method: GET
    data_selector: VideoClip
    params: {}
- name: AudioClip
  endpoint:
    path: /reference/moviepy.audio.AudioClip.AudioClip
    method: GET
    data_selector: AudioClip
    params: {}
- name: AudioFileClip
  endpoint:
    path: /reference/moviepy.audio.io.AudioFileClip.AudioFileClip
    method: GET
    data_selector: AudioFileClip
    params: {}
- name: VideoClip
  endpoint:
    path: /reference/reference/moviepy.video.VideoClip.VideoClip.html
    method: GET
    data_selector: clips
    params: {}
- name: VideoFileClip
  endpoint:
    path: /reference/reference/moviepy.video.io.VideoFileClip.VideoFileClip.html
    method: GET
    data_selector: clips
    params: {}
- name: ImageSequenceClip
  endpoint:
    path: /reference/reference/moviepy.video.io.ImageSequenceClip.ImageSequenceClip.html
    method: GET
    data_selector: clips
    params: {}
- name: ImageClip
  endpoint:
    path: /reference/reference/moviepy.video.VideoClip.ImageClip.html
    method: GET
    data_selector: clips
    params: {}
- name: TextClip
  endpoint:
    path: /reference/reference/moviepy.video.VideoClip.TextClip.html
    method: GET
    data_selector: clips
    params: {}
- name: ColorClip
  endpoint:
    path: /reference/reference/moviepy.video.VideoClip.ColorClip.html
    method: GET
    data_selector: clips
    params: {}
- name: AudioFileClip
  endpoint:
    path: /reference/reference/moviepy.audio.AudioFileClip.AudioFileClip.html
    method: GET
    data_selector: clips
    params: {}
- name: AudioClip
  endpoint:
    path: /reference/reference/moviepy.audio.AudioClip.AudioClip.html
    method: GET
    data_selector: clips
    params: {}
- name: DataVideoClip
  endpoint:
    path: /reference/reference/moviepy.video.DataVideoClip.html
    method: GET
    data_selector: clips
    params: {}
- name: UpdatedVideoClip
  endpoint:
    path: /reference/reference/moviepy.video.UpdatedVideoClip.html
    method: GET
    data_selector: clips
    params: {}
- name: ImageClip
  endpoint:
    path: /reference/reference/moviepy.video.VideoClip.ImageClip.html
    method: GET
    data_selector: examples
- name: TextClip
  endpoint:
    path: /reference/reference/moviepy.video.VideoClip.TextClip.html
    method: GET
    data_selector: examples
- name: ColorClip
  endpoint:
    path: /reference/reference/moviepy.video.VideoClip.ColorClip.html
    method: GET
    data_selector: examples
- name: AudioClip
  endpoint:
    path: /reference/reference/moviepy.audio.AudioClip.AudioClip.html
    method: GET
    data_selector: examples
- name: AudioFileClip
  endpoint:
    path: /reference/reference/moviepy.audio.io.AudioFileClip.AudioFileClip.html
    method: GET
    data_selector: examples
- name: AudioArrayClip
  endpoint:
    path: /reference/reference/moviepy.audio.AudioClip.AudioArrayClip
    method: GET
    data_selector: audio clip data
- name: VideoClip
  endpoint:
    path: /reference/reference/moviepy.video.VideoClip.VideoClip
    method: GET
- name: AudioClip
  endpoint:
    path: /reference/reference/moviepy.audio.AudioClip.AudioClip
    method: GET
- name: concatenate_videoclips
  endpoint:
    path: /reference/reference/moviepy.video.compositing.CompositeVideoClip.concatenate_videoclips.html
    method: GET
    data_selector: reference
    params: {}
- name: clip_array
  endpoint:
    path: /reference/reference/moviepy.video.compositing.CompositeVideoClip.clip_array.html
    method: GET
    data_selector: reference
    params: {}
- name: CompositeVideoClip
  endpoint:
    path: /reference/reference/moviepy.video.compositing.CompositeVideoClip.CompositeVideoClip.html
    method: GET
    data_selector: reference
    params: {}
- name: CompositeAudioClip
  endpoint:
    path: /reference/reference/moviepy.audio.AudioClip.CompositeAudioClip.html
    method: GET
    data_selector: reference
    params: {}
notes:
- MoviePy v2.0 has undergone some large changes with the aim of making the API more
  consistent and intuitive.
- Starting with version 2.0, MoviePy no longer supports Python 2.
- Effects have undergone massive changes and refactoring.
- All effects are now implementing the Effect abstract class.
- MoviePy depends on the software ffmpeg for video reading and writing and on ffplay
  for video previewing.
- You don’t need to worry about ffmpeg, as it should be automatically downloaded/installed
  by ImageIO during your first use of MoviePy.
- MoviePy cannot stream videos.
- MoviePy is not really designed for video processing involving many successive frames.
- Uses various clip manipulation methods for video editing
- Requires ffplay installed for preview functionality
- Uses OAuth2 with refresh token — requires setup of connected app in api
- Some objects like Contact may return nulls in deeply nested fields
- You must have `ffplay` installed and accessible to MoviePy to be able to use `preview()`.
- It is quite frequent for a clip preview to be out of sync, or to play slower than
  it should.
- Requires ffplay to preview clips.
- You must have ffplay installed and accessible to MoviePy to be able to use preview().
- display_in_notebook() will only work if it is on the last line a the notebook cell.
- Must have ffplay installed and accessible to MoviePy to be able to use preview()
- It is quite frequent for a clip preview to be out of sync, or to play slower than
  it should
- Know that display_in_notebook() will only work if it is on the last line of the
  notebook cell
- Though you are encouraged to play with settings of write_videofile, know that lowering
  the optimization preset or increasing the number of threads will not necessarily
  improve the rendering time
- You must have ffplay installed and accessible to MoviePy to be able to use preview()
- Previewing a clip may be out of sync or play slower than it should if the computer
  is not powerful enough.
- Clips act as context managers
- Call close() on any clip once finished using it
- In the case of video and image files, if these are not already black and white they
  will be converted automatically.
- When loading an image with an alpha layer, MoviePy will use this layer as a mask
  unless transparent=False.
- Masks are treated differently by many methods but at the core, they are VideoClip.
- The parameter method lets you define if text should be written and overflow if too
  long (label) or be automatically broken over multiple lines (caption).
- Masks are treated differently by many methods.
- MoviePy v2.0 have introduced breaking changes
- MoviePy will never modify that clip directly; it returns a modified copy of the
  original.
- When applying an effect or modification, it does not immediately apply the effect
  to all the frames of the clip, but only to the first frame.
- When creating an effect, you frequently have to write boilerplate code for assigning
  properties on object initialization, dataclasses is a nice way to limit that.
- Video composition, also known as non-linear editing.
- Before starting, note that video clips generally carry an audio track and a mask,
  which are also clips.
- The clips do not need to be the same size.
- By default the composition has the size of its first clip.
- Video clips generally carry an audio track and a mask, which are also clips.
- When working with timing of your clip, you will frequently want to keep only parts
  of the original clip.
- Video composition automatically generates audio track from clips.
- Clips do not need to be the same size when concatenating.
errors:
- Cannot write a video without duration
auth_info:
  mentioned_objects: []
client:
  base_url: https://pypi.org/project/moviepy/
  headers:
    Accept: application/json
source_metadata: null
