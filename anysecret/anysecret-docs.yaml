resources:
- name: secret_manager
  endpoint:
    path: /secret_manager
    method: GET
    data_selector: secrets
- name: parameter_manager
  endpoint:
    path: /parameter_manager
    method: GET
    data_selector: parameters
- name: profile
  endpoint:
    path: /config/profile-create
    method: POST
    data_selector: profiles
    params: {}
- name: configuration
  endpoint:
    path: /set
    method: POST
    data_selector: configurations
    params: {}
- name: profile
  endpoint:
    path: /config/profile-create
    method: POST
    data_selector: profiles
    params: {}
- name: secrets
  endpoint:
    path: /set
    method: POST
    data_selector: secrets
    params: {}
- name: profile
  endpoint:
    path: /config/profile
    method: POST
    data_selector: output
    params: {}
- name: profile
  endpoint:
    path: /config/profile
    method: GET
    data_selector: profiles
- name: secrets
  endpoint:
    path: /secrets
    method: GET
    data_selector: secrets
- name: AWS
  endpoint:
    path: /aws/setup
    method: GET
- name: GCP
  endpoint:
    path: /gcp/setup
    method: GET
- name: Azure
  endpoint:
    path: /azure/setup
    method: GET
- name: Kubernetes
  endpoint:
    path: /kubernetes/setup
    method: GET
- name: HashiCorp Vault
  endpoint:
    path: /vault/setup
    method: GET
- name: local_files
  endpoint:
    path: /providers/local-files
    method: GET
    data_selector: files
    params: {}
- name: aws
  endpoint:
    path: /providers/aws
    method: GET
    data_selector: aws
    params: {}
- name: gcp
  endpoint:
    path: /providers/gcp
    method: GET
    data_selector: gcp
    params: {}
- name: azure
  endpoint:
    path: /providers/azure
    method: GET
    data_selector: azure
    params: {}
- name: kubernetes
  endpoint:
    path: /providers/kubernetes
    method: GET
    data_selector: kubernetes
    params: {}
- name: hashicorp_vault
  endpoint:
    path: /providers/hashicorp-vault
    method: GET
    data_selector: hashicorp_vault
    params: {}
- name: aws
  endpoint:
    path: /aws
    method: GET
- name: gcp
  endpoint:
    path: /gcp
    method: GET
- name: azure
  endpoint:
    path: /azure
    method: GET
- name: kubernetes
  endpoint:
    path: /kubernetes
    method: GET
- name: hashicorp_vault
  endpoint:
    path: /hashicorp_vault
    method: GET
- name: local_files
  endpoint:
    path: /local/files
    method: GET
    data_selector: files
- name: aws_setup
  endpoint:
    path: /aws/setup
    method: GET
    data_selector: setup
- name: gcp_setup
  endpoint:
    path: /gcp/setup
    method: GET
    data_selector: setup
- name: azure_setup
  endpoint:
    path: /azure/setup
    method: GET
    data_selector: setup
- name: kubernetes_setup
  endpoint:
    path: /kubernetes/setup
    method: GET
    data_selector: setup
- name: hashicorp_vault_setup
  endpoint:
    path: /hashicorp/vault/setup
    method: GET
    data_selector: setup
- name: AWS
  endpoint:
    path: /providers/aws
    method: GET
    data_selector: records
- name: GCP
  endpoint:
    path: /providers/gcp
    method: GET
    data_selector: records
- name: Azure
  endpoint:
    path: /providers/azure
    method: GET
    data_selector: records
- name: Kubernetes
  endpoint:
    path: /providers/kubernetes
    method: GET
    data_selector: records
- name: HashiCorp Vault
  endpoint:
    path: /providers/vault
    method: GET
    data_selector: records
- name: AWS
  endpoint:
    path: /aws
    method: GET
- name: GCP
  endpoint:
    path: /gcp
    method: GET
- name: Azure
  endpoint:
    path: /azure
    method: GET
- name: aws
  endpoint:
    path: /aws
    method: POST
    data_selector: data
    params: {}
- name: gcp
  endpoint:
    path: /gcp
    method: POST
    data_selector: data
    params: {}
- name: azure
  endpoint:
    path: /azure
    method: POST
    data_selector: data
    params: {}
- name: local_files
  endpoint:
    path: /local/files
    method: GET
- name: aws
  endpoint:
    path: /aws/setup
    method: GET
- name: gcp
  endpoint:
    path: /gcp/setup
    method: GET
- name: azure
  endpoint:
    path: /azure/setup
    method: GET
- name: kubernetes
  endpoint:
    path: /kubernetes/setup
    method: GET
- name: hashicorp_vault
  endpoint:
    path: /hashicorp/vault/setup
    method: GET
- name: local_files
  endpoint:
    path: /local/files
    method: GET
    data_selector: files
- name: aws_setup
  endpoint:
    path: /aws/setup
    method: POST
    data_selector: aws
- name: gcp_setup
  endpoint:
    path: /gcp/setup
    method: POST
    data_selector: gcp
- name: azure_setup
  endpoint:
    path: /azure/setup
    method: POST
    data_selector: azure
- name: kubernetes_setup
  endpoint:
    path: /kubernetes/setup
    method: POST
    data_selector: kubernetes
- name: local_files
  endpoint:
    path: /local/files
    method: GET
    data_selector: records
    params: {}
- name: aws
  endpoint:
    path: /aws/setup
    method: GET
    data_selector: records
    params: {}
- name: gcp
  endpoint:
    path: /gcp/setup
    method: GET
    data_selector: records
    params: {}
- name: azure
  endpoint:
    path: /azure/setup
    method: GET
    data_selector: records
    params: {}
- name: kubernetes
  endpoint:
    path: /kubernetes/setup
    method: GET
    data_selector: records
    params: {}
- name: hashicorp_vault
  endpoint:
    path: /hashicorp/vault/setup
    method: GET
    data_selector: records
    params: {}
- name: local_files
  endpoint:
    path: /local/files
    method: GET
    data_selector: files
    params: {}
- name: aws
  endpoint:
    path: /aws/setup
    method: GET
    data_selector: aws_setup
    params: {}
- name: gcp
  endpoint:
    path: /gcp/setup
    method: GET
    data_selector: gcp_setup
    params: {}
- name: azure
  endpoint:
    path: /azure/setup
    method: GET
    data_selector: azure_setup
    params: {}
- name: kubernetes
  endpoint:
    path: /kubernetes/setup
    method: GET
    data_selector: kubernetes_setup
    params: {}
- name: hashicorp_vault
  endpoint:
    path: /vault/setup
    method: GET
    data_selector: vault_setup
    params: {}
- name: profile
  endpoint:
    path: /config/profile
    method: POST
    data_selector: profile_data
    params: {}
- name: bulk_import
  endpoint:
    path: /bulk/import
    method: POST
    data_selector: import_data
    params: {}
- name: profile_export
  endpoint:
    path: /config/profile/export
    method: GET
    data_selector: export_data
    params: {}
- name: Configuration
  endpoint:
    path: /config
    method: GET
    data_selector: records
- name: Secrets
  endpoint:
    path: /secrets
    method: GET
    data_selector: records
- name: configuration
  endpoint:
    path: /api/configuration
    method: GET
    data_selector: records
- name: configuration
  endpoint:
    path: /api/configuration
    method: GET
    data_selector: data
    params: {}
- name: secrets
  endpoint:
    path: /api/secrets
    method: GET
    data_selector: data
    params: {}
- name: configuration
  endpoint:
    path: /api/configuration
    method: GET
    data_selector: data
    params: {}
- name: secrets
  endpoint:
    path: /api/secrets
    method: GET
    data_selector: data
    params: {}
- name: configuration
  endpoint:
    path: /api/configuration
    method: GET
    data_selector: configs
    params: {}
- name: secrets
  endpoint:
    path: /api/secrets
    method: GET
    data_selector: secrets
    params: {}
- name: parameters
  endpoint:
    path: /parameters
    method: GET
    data_selector: records
- name: secrets
  endpoint:
    path: /secrets
    method: GET
    data_selector: records
- name: local_dev
  endpoint:
    path: /config/profile-create/local-dev
    method: POST
- name: hobby_prod
  endpoint:
    path: /config/profile-use/hobby-prod
    method: POST
- name: export_to_env
  endpoint:
    path: /bulk/export
    method: POST
- name: staging
  endpoint:
    path: /staging
    method: POST
    data_selector: secrets
    params:
      DATABASE_PASSWORD: staging_db_password
      DATABASE_HOST: staging-db.company.com
      LOG_LEVEL: debug
      FEATURE_FLAGS_URL: https://flags-staging
- name: production
  endpoint:
    path: /production
    method: POST
    data_selector: secrets
    params:
      DATABASE_PASSWORD: prod_secure_password
      STRIPE_SECRET_KEY: sk_live_real_key
      JWT_SECRET: super_secure_jwt_key
      DATABASE_HOST: prod-db.company.com
      LOG_LEVEL: info
- name: staging
  endpoint:
    path: /add/staging/configuration
    method: POST
    data_selector: configuration
    params: {}
- name: production
  endpoint:
    path: /add/production/secrets
    method: POST
    data_selector: secrets
    params: {}
- name: local-dev
  endpoint:
    path: /config/profile-create/local-dev
    method: POST
    data_selector: null
    params: {}
- name: hobby-prod
  endpoint:
    path: /config/profile-create/hobby-prod
    method: POST
    data_selector: null
    params: {}
- name: dev
  endpoint:
    path: /config/profile-create/dev
    method: POST
    data_selector: null
    params: {}
- name: staging
  endpoint:
    path: /config/profile-create/staging
    method: POST
    data_selector: null
    params: {}
- name: prod
  endpoint:
    path: /config/profile-create/prod
    method: POST
    data_selector: null
    params: {}
- name: prod-services
  endpoint:
    path: /config/profile-create/prod-services
    method: POST
    data_selector: null
    params: {}
- name: local-dev
  endpoint:
    path: /api/local-dev
    method: POST
    data_selector: data
    params: {}
- name: hobby-prod
  endpoint:
    path: /api/hobby-prod
    method: POST
    data_selector: data
    params: {}
- name: staging
  endpoint:
    path: /api/staging
    method: POST
    data_selector: data
    params: {}
- name: prod
  endpoint:
    path: /api/prod
    method: POST
    data_selector: data
    params: {}
- name: profile
  endpoint:
    path: /api/profiles
    method: GET
    data_selector: profiles
- name: configuration
  endpoint:
    path: /api/configurations
    method: GET
    data_selector: configurations
- name: profile
  endpoint:
    path: /config/profile
    method: GET
    data_selector: profiles
    params: {}
- name: bulk_import
  endpoint:
    path: /bulk/import
    method: POST
    data_selector: import_results
    params: {}
- name: bulk_export
  endpoint:
    path: /bulk/export
    method: GET
    data_selector: export_results
    params: {}
notes:
- The primary interface is the CLI. The Python SDK is currently minimal - use the
  CLI for full functionality.
- Intelligent secret management with 40x cost savings
- CLI-first tool that automatically routes secrets to secure managers and configuration
  to cheap storage
- Auto-routes secrets vs parameters based on naming patterns
- Smart classification routes secrets vs parameters based on naming patterns.
- Cost optimization allows for significant savings by using cheap storage for configuration.
- CLI-first tool designed for real-world DevOps workflows
- Automatically routes secrets to secure managers and configuration to cheap storage
- CLI-First - Designed for real-world DevOps workflows
- Uses CLI to manage secrets
- Secrets are masked in terminal output
- CLI-First tool that automatically routes secrets to secure managers and configuration
  to cheap storage
- Uses OAuth2 with refresh token — requires setup of connected app in api
- Some objects like Contact may return nulls in deeply nested fields
- Get up and running with AnySecret CLI in 5 minutes.
- From zero to managing secrets in the cloud with intelligent cost optimization.
- Secrets are masked in terminal
- Uses intelligent secret management with automatic cost optimization.
- Secrets are masked in terminal.
- Perfect for development and hobby projects. No cloud costs, works offline.
- AWS requires configuration of AWS CLI and permissions
- GCP requires billing enabled and necessary APIs
- AnySecret CLI works with multiple providers for secrets and parameters.
- Uses instance/task role automatically
- Requires setup of connected app in api
- Some providers may have specific permissions requirements
- GCP project with billing enabled is required.
- Supports multiple providers for secrets and parameters.
- Requires appropriate configuration based on the chosen provider.
- Requires setup of connected app in respective cloud providers.
- Requires setup of cloud provider accounts and permissions.
- Profiles are stored in ~/.anysecret/profiles/
- Requires setup of resource group and key vault in Azure
- Requires proper setup for each provider.
- Requires setup of connected app in AnySecret
- Vault server running and accessible
- 'Vault CLI installed: Download from vault.io'
- Requires specific provider setup and permissions.
- AWS authentication requires AWS CLI configured
- GCP authentication requires gcloud CLI configured
- Azure authentication requires Azure CLI configured
- Uses intelligent routing for configuration data based on naming patterns.
- Use --decrypt flag when importing encrypted profiles
- Uses intelligent routing for parameters and secrets based on naming patterns.
- Cost optimization is prioritized for parameter storage.
- Uses cloud-native secret managers for sensitive data
- Configuration management is treated as a secondary concern
- Uses intelligent routing for configuration data based on naming patterns
- AnySecret is a universal configuration and secret management system.
- Core focus on secure secret management using cloud-native secret managers.
- 'Secrets First: Core focus on secure secret management using cloud-native secret
  managers (AWS Secrets Manager, GCP Secret Manager, Azure Key Vault)'
- 'Cost Optimization: Parameters cost pennies in cloud storage vs hundreds/month in
  secret managers'
- Uses intelligent routing for secrets and parameters
- Automatic classification by naming patterns
- Uses intelligent routing for configuration data.
- Core focus on secure secret management using cloud-native secret managers (AWS Secrets
  Manager, GCP Secret Manager, Azure Key Vault)
- Intelligent classification by naming patterns
- Intelligent classification for secret management and parameters.
- Cost optimization by using cloud storage for parameters.
- AnySecret is a universal configuration and secret management system that intelligently
  routes configuration data between secrets and parameters based on naming patterns,
  optimizing for both security and cost.
- 'Secrets First: Core focus on secure secret management using cloud-native secret
  managers'
- Uses intelligent routing for secrets and parameters based on naming patterns.
- Cost-effective parameter storage in cloud
- Uses a command line interface for secret and parameter management.
- Uses local files for development, cloud storage for staging
- Using local file storage only for development.
- Monthly cost varies based on the number of secrets and parameters.
- Uses local file storage for development
- Cost optimization examples show significant savings compared to traditional secret
  managers
- 'Cost: $0 - Using local file storage only'
- 'Monthly Cost: ~$6/month vs ~$100+ with traditional secret managers'
- Cost Optimization Examples
- Uses local file storage only
- Cost optimization examples provided
- Uses local file storage only for development
- 'Monthly Cost: ~$25 (50 secrets × $0.40 + 75 parameters × $0.01)'
- 'Monthly Cost: ~$200 (400 secrets × $0.40 + 200 parameters × $0.01)'
- 'Savings vs Traditional: ~$2,000+ saved monthly compared to HashiCorp Vault Enterprise'
- 'Start Simple: Begin with local files, migrate to cloud as you grow'
- 'Use Profiles: Separate environments and teams for security'
- 'Leverage Auto-Classification: Let AnySecret optimize costs automatically'
- 'Secure CI/CD: Use profile export/import for stateless deployments'
- 'Monitor and Optimize: Regular audits can save significant money'
- 'Plan Migrations: Gradual migration reduces risk and team friction'
- Never commit secrets to version control.
- Use profiles for environment separation.
- Secrets Stay Secret, Parameters Stay Cheap
- CI/CD Should Be Stateless
- Never mix environments!
- Use profiles for environment separation
- CI/CD should be stateless
- Secrets stay secret, parameters stay cheap
- Secrets stay secret, parameters stay cheap.
- Never mix environments in one profile.
- Never commit secrets.
- Mask secrets in CI/CD logs.
- Never mix environments in one profile
- CI/CD should be stateless.
- Secrets stay secret — parameters stay cheap
- Never commit secrets
- Secrets are masked by default in terminal output
- Never commit secrets in code.
- Secrets are masked by default in terminal output.
- Use Profiles for Environment Separation
- Never commit secrets in code
- Never Commit Secrets
- Mask Secrets in CI/CD Logs
- Use Encryption for Sensitive Profiles
- Your applications never change. Whether migrating from AWS to GCP, adding multi-cloud
  support, or moving from .env files to production - the same CLI commands work everywhere.
- Migration from any provider is supported.
- Backup and restore functionalities are available.
- Your applications never change.
- Same commands work everywhere.
errors:
- '404 Not Found: Check the endpoint path or resource availability.'
- '401 Unauthorized: Verify access credentials.'
- 'Profile not found: Ensure the profile exists before accessing it'
- 'Import not working: Check the .env file format'
- 'REQUEST_LIMIT_EXCEEDED: Throttle API calls or reduce frequency'
- 'QUERY_TIMEOUT: Break down filters or add selectivity'
- '401 Unauthorized: Recheck OAuth scopes or token expiration'
- '"Profile not found" error'
- Secrets showing as *** in terminal
- Import not working
- Cloud provider authentication
- '"Profile not found" error: Check available profiles'
- 'Import not working: Check file format'
- 'Profile not found: Check available profiles'
- 'AWS Authentication: Check provider health'
- 'GCP Authentication: Check provider health'
- 'Azure Authentication: Check provider health'
- 'Kubernetes Access: Check provider health'
- 'Secrets showing as *** in terminal: This is normal security behavior'
- '401 Unauthorized: Recheck authentication credentials.'
- 'Authentication failed: Check your credentials.'
- 'Permission denied: Ensure you have the correct permissions.'
- '401 Unauthorized: Check your credentials'
- '403 Forbidden: Insufficient permissions'
- '404 Not Found: Resource does not exist'
- 'REQUEST_LIMIT_EXCEEDED: Throttle API calls or reduce frequency.'
- 'QUERY_TIMEOUT: Break down filters or add selectivity.'
- 'INVALID_PARAMETER: Check the parameter names and types.'
- 'NOT_FOUND: The requested resource does not exist.'
- '401 Unauthorized: Check API key or token expiration'
- '400 Bad Request: Check your input parameters'
- '404 Not Found: Verify the endpoint URL'
- Secrets in code
- Mixed environments in one profile
- 'INVALID_PROFILE: Ensure the profile exists'
- 'EXPORT_FAILED: Check permissions and quota'
- 'IMPORT_FAILED: Review the input file format'
auth_info:
  mentioned_objects:
  - AWS CLI
  - GCP CLI
  - Azure CLI
  - gcloud
  - Kubernetes
  - Vault
client:
  base_url: https://anysecret.io
  headers:
    Accept: application/json
source_metadata: null
