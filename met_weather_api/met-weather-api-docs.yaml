resources:
- name: precipitation
  endpoint:
    path: /precipitation
    method: GET
    params:
      area: Oslo
- name: available
  endpoint:
    path: /available
    method: GET
    params: {}
- name: locationforecast
  endpoint:
    path: /locationforecast/2.0/compact
    method: GET
    data_selector: properties
    params:
      lat: '51.5'
      lon: '0'
- name: radar
  endpoint:
    path: /radar/2.0/available.json
    method: GET
    data_selector: params
    params:
      type: lx_reflectivity
      area: central_norway
- name: compact_forecast
  endpoint:
    path: /compact
    method: GET
    data_selector: forecast
    params: {}
- name: sunrise_data
  endpoint:
    path: /weatherapi/sunrise/2.0
    method: GET
    data_selector: astrodata
- name: sun
  endpoint:
    path: /sun
    method: GET
    data_selector: records
- name: moon
  endpoint:
    path: /moon
    method: GET
    data_selector: records
- name: Nordic area forecast
  endpoint:
    path: /locationforecast/nordic
    method: GET
- name: Arctic area forecast
  endpoint:
    path: /locationforecast/arctic
    method: GET
- name: Global forecast
  endpoint:
    path: /locationforecast/global
    method: GET
- name: locationforecast
  endpoint:
    path: /locationforecast
    method: GET
    data_selector: records
- name: location_forecast
  endpoint:
    path: /weatherapi/locationforecast/2.0/complete
    method: GET
    data_selector: properties
    params: {}
- name: alert
  endpoint:
    path: /alert
    method: GET
    data_selector: alert
- name: resource
  endpoint:
    path: <uri>
    method: GET
    data_selector: resourceDesc
    params: {}
- name: area
  endpoint:
    path: <area>
    method: GET
    data_selector: areaDesc
    params: {}
- name: MetAlerts
  endpoint:
    path: /metalerts
    method: GET
    data_selector: features
- name: sun
  endpoint:
    path: /sunrise
    method: GET
    data_selector: properties
- name: moon
  endpoint:
    path: /moon
    method: GET
    data_selector: properties
- name: MapClientLibraries
  endpoint:
    path: /doc/maps/MapClients.html
    method: GET
    data_selector: clients
    params: {}
- name: MapDataProviders
  endpoint:
    path: /doc/other.html
    method: GET
    data_selector: providers
    params: {}
- name: GeoCodingServices
  endpoint:
    path: /doc/maps.html
    method: GET
    data_selector: geocoding
    params: {}
- name: AltitudeDatabases
  endpoint:
    path: /doc/other.html
    method: GET
    data_selector: altitude
    params: {}
- name: indexfile
  endpoint:
    path: /indexfiles
    method: GET
    data_selector: files
    params: {}
- name: Frost
  endpoint:
    path: /frost
    method: GET
    data_selector: records
    params: {}
- name: THREDDS
  endpoint:
    path: /thredds
    method: GET
    data_selector: records
    params: {}
- name: api.met.no
  endpoint:
    path: /api/met.no
    method: GET
    data_selector: records
    params: {}
- name: Yr
  endpoint:
    path: /yr
    method: GET
    data_selector: records
    params: {}
- name: WMS maps
  endpoint:
    path: /wms
    method: GET
    data_selector: records
    params: {}
- name: locationforecast
  endpoint:
    path: /locationforecast/2.0/compact
    method: GET
    params:
      lat: '51.5'
      lon: '0'
- name: radar_available
  endpoint:
    path: /radar/2.0/available.json
    method: GET
    params:
      type: lx_reflectivity
      area: central_norway
- name: location_forecast
  endpoint:
    path: /compact
    method: GET
- name: GeoJSON
  endpoint:
    path: /doc/GeoJSON.html
    method: GET
    data_selector: features
    params: {}
- name: location_forecast
  endpoint:
    path: /weatherapi/locationforecast/2.0/complete
    method: GET
    data_selector: properties
    params:
      lat: '60.10'
      lon: '10'
- name: locationforecast
  endpoint:
    path: /locationforecast
    method: GET
    data_selector: records
- name: ocean_forecast
  endpoint:
    path: /oceanforecast
    method: GET
    data_selector: forecasts
    params: {}
- name: astrodata
  endpoint:
    path: /
    method: GET
    data_selector: astrodata
- name: precipitation
  endpoint:
    path: /precipitation
    method: GET
    data_selector: results
- name: available
  endpoint:
    path: /available
    method: GET
    data_selector: results
- name: changelog
  endpoint:
    path: /changelog
    method: GET
    data_selector: results
- name: observational_data
  endpoint:
    path: /thredds/catalog/metusers/senorge2/seNorge2/provisional_archive/catalog.html
    method: GET
- name: historical_data
  endpoint:
    path: /thredds/catalog/metusers/senorge2/seNorge2/archive/catalog.html
    method: GET
- name: textforecast
  endpoint:
    path: /textforecast/3.0
    method: GET
    data_selector: records
    params: {}
- name: metalerts
  endpoint:
    path: /metalerts/2.0
    method: GET
    data_selector: records
    params: {}
- name: routeforecast
  endpoint:
    path: /routeforecast/2.0
    method: GET
    data_selector: records
    params: {}
- name: available_routes
  endpoint:
    path: /weatherapi/nlaroutes/1.0/available.json
    method: GET
    data_selector: records
    params:
      region: middle
- name: textforecast
  endpoint:
    path: /weatherapi/textforecast/3.0/documentation
    method: GET
    data_selector: records
- name: metalerts
  endpoint:
    path: /weatherapi/metalerts/2.0/documentation
    method: GET
    data_selector: records
- name: sunrise
  endpoint:
    path: /weatherapi/sunrise/3.0/documentation
    method: GET
    data_selector: records
- name: turbulence
  endpoint:
    path: /weatherapi/turbulence/2.0/documentation
    method: GET
    data_selector: records
- name: offshoremaps
  endpoint:
    path: /weatherapi/offshoremaps/1.0/documentation
    method: GET
    data_selector: records
- name: gribfiles
  endpoint:
    path: /weatherapi/gribfiles/1.1/documentation
    method: GET
    data_selector: records
- name: tidalwater
  endpoint:
    path: /weatherapi/tidalwater/documentation
    method: GET
    data_selector: records
- name: nlaroutes
  endpoint:
    path: /weatherapi/nlaroutes/1.0/available.json
    method: GET
- name: routeforecast
  endpoint:
    path: /weatherapi/routeforecast/2.0/documentation
    method: GET
- name: sigcharts
  endpoint:
    path: /weatherapi/sigcharts/2.0/documentation
    method: GET
notes:
- Uses encrypted HTTPS calls to the API
- Some older products specify query string parameters without any endpoint, this practice
  is being phased out
- All requests must include an identifying User Agent-string (UA) in the request with
  the application/domain name, optionally version number.
- If we cannot contact you in case of problems, you risk being blocked without warning.
- Accepts 203-responses for deprecated versions
- You must identify yourself by sending contact information in the User-Agent header.
- If-Modified-Since does not work with beta or deprecated products.
- Always use HTTPS, as lots of unencrypted traffic can make you throttled or blocked.
- Do not use more than 4 decimals to avoid blocking.
- You cannot use the Frost API with simple requests.
- You cannot use the Frost API with authentication.
- The Sunrise service typically processes about 50.000 requests an hour.
- Due to Daylight Savings Time, sunsets near polar latitudes sometimes occur after
  midnight local time.
- In polar regions, the sunrise and/or sunset parameters may return null.
- Forecasts are updated every 5 minutes.
- Historical ocean forecasts are available for download from our thredds server
- This JSON format is meant for encoding meteorological and oceanographic forecast
  data for specific geographical areas and time periods.
- The specification is a work in progress and likely to change as long as Textforecast/3.0
  is in beta.
- CAP v.1 Profile is fully OASIS CAP 1.2 compatible.
- Maximum altitude of the affected area of the alert message (in feet above mean sea
  level) is 9000.
- UPDATE and CANCEL events follow the Google Public Alerts rules.
- This service is currently in beta, but no large changes are expected before going
  into production.
- This document is a brief introduction in how to extract and visualize data from
  THREDDS using the OPeNDAP protocol.
- THREDDS also supports the Web Map Service protocol for interactive raster images.
- Use of the API is subject to the OLA, as described in the Operational Level Agreement
- Each service at MET has their own support email address.
- All requests must include an identifying User Agent-string.
- You must give appropriate credit for open data as specified in the CC BY 4.0 license.
- You must identify yourself by sending contact information in the User-Agent request
  header.
- If the result is a success (a 2xx status), send the request body to the JSON parser.
- The `lastChange` attribute indicates when the forecast set was generated.
- Forecasts cover the whole globe; Nordic and Arctic regions are prioritized.
- All forecasts are automatic, with no manual editing by meteorologists.
- The Sunrise service typically processes about 50.000 requests an hour and has been
  operational for about 15 years.
- The met.no policy is to make as few changes to the original format as possible.
- Polar regions may return null for sunrise/sunset parameters during certain periods.
- Timezones for the offset parameter range from -12:00 to +15:00.
- All queries are done via HTTP GET.
- Only supports encrypted HTTPS calls.
- All 4xx and 5xx errors now include an X-ErrorClass response header in addition to
  the HTTP status code.
- The index file must be written to disk after all corresponding files have been written.
- Files must not be deleted from disk until a new indexfile has been generated without
  the missing file references.
- The index file should only reference those files which are supposed to be available
  via the api.
- Use of the API is subject to the OLA, as described in the Operational Level Agreement.
- Version 3.0 of textforecast is now officially out of beta.
- The old XML version of textforecast will continue to work until further notice.
- Some area polygons will now be drawn freehand by the meteorologists.
- Version 3.0 is now officially out of beta, including some minor corrections in the
  lastChange format to make it ISO 8601 compatible.
- The old XML version will continue to work until further notice.
errors:
- '404 Not Found: Trying to call an unsupported action'
- '429 Too Many Requests: Limit traffic immediately if this should happen.'
- '203 Non-Authoritative Information: Implement appropriate checks or alarms on the
  return codes'
- '429 Too Many Requests: Identify yourself in the User-Agent header'
- '403 Forbidden: Check User-Agent or TOS compliance'
- '405 Method Not Allowed: Ensure only GET requests are used'
- '403 Forbidden: You must read the Terms of Service and identify yourself.'
- '400 Bad Request: Ensure coordinates do not exceed 4 decimals.'
- '422 Unprocessable Entity: Request is for a location not covered by the service.'
- '403 Forbidden: If ''User-Agent'' header is missing or generic.'
- '429: Throttling'
- '400 Bad Request: On error, the HTTP status code “400 Bad request” is returned along
  with an error message formatted as HTML.'
- '401 Unauthorized: This indicates that you are trying to access a resource which
  you are not authorized to.'
- '403 Forbidden: This usually means you have been blacklisted due to a violation
  of our Terms of Service.'
- '404 Not Found: If the request is OK as such, but the product handler does not have
  any data to offer, you will normally receive a “404” code.'
- '405 Method Not Allowed: You are probable sending POST requests, which is not allowed.'
- '422 Unprocessable Entity: The 422 status code might be returned when the request
  is syntactically correct, but the semantics of the specified url parameters make
  it impossible to return data.'
- '429 Too Many Requests: The 429 status code indicates that the user has sent too
  many requests in a given amount of time.'
- '499 Client Closed Request: The HTTP status code “499 Client Closed Request” is
  actually a client error, indicating that the client terminated the connection before
  the response was finished.'
- '500 Internal Server Error: An unspecified error in the API itself.'
- '502 Bad Gateway: The API could not fetch data from the backend.'
- '503 Service Unavailable: The service is currently not operational or functioning
  properly.'
- '504 Gateway Time-out: Some backend service took too long to respond to the API.'
- The returned request body cannot be empty; this is flagged as an error in the API
- 'Content-Type: This must be an IANA-registered media type. If you invent your own
  the API conversion routines will fail'
- '429 Too Many Requests: Limit traffic immediately if this happens.'
- '403 Forbidden: Requests with 5+ decimals for latitude/longitude will be rejected.'
- '203 Non-Authoritative Information: Data returned but version is deprecated'
- '403 Forbidden: If User-Agent header is missing or generic.'
- '429: Throttling response.'
- '404 Not Found: Trying to call an unsupported function.'
- '301 Moved Permanently: Unencrypted HTTP calls may result in a redirect.'
- '502 Bad Gateway: Unexpected missing data from the backend.'
- '429 Too Many Requests: Must identify yourself in the User-Agent header'
- '403 Forbidden: Generic or missing User-Agent header'
auth_info:
  mentioned_objects: []
client:
  base_url: https://api.met.no/weatherapi
  headers:
    User-Agent: MyTestApp/0.1 support@example.com
source_metadata: null
