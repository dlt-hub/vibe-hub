resources:
- name: pets
  endpoint:
    path: /pets
    method: GET
    data_selector: records
    params: {}
- name: pets
  endpoint:
    path: /pets
    method: GET
    data_selector: pets
- name: pet_detail
  endpoint:
    path: /pets/{id}
    method: GET
    data_selector: pet
- name: edit_pet
  endpoint:
    path: /pets/{id}
    method: PUT
    data_selector: pet
- name: add_pet
  endpoint:
    path: /pets
    method: POST
    data_selector: pet
- name: delete_pet
  endpoint:
    path: /pets/{id}
    method: DELETE
    data_selector: pet
- name: foundational_csharp
  endpoint:
    path: /learn/foundational-c-sharp-with-microsoft
    method: GET
    data_selector: courses
- name: Archived Coursework
  endpoint:
    path: /archived-coursework
    method: GET
    data_selector: coursework
    params: {}
- name: pets
  endpoint:
    path: /pets
    method: GET
    data_selector: resp
- name: pets
  endpoint:
    path: /pets
    method: GET
    data_selector: records
    params: {}
- name: pet_detail
  endpoint:
    path: /pets/{id}
    method: GET
    data_selector: records
    params: {}
- name: edit_pet
  endpoint:
    path: /pets/{id}
    method: PUT
    data_selector: records
    params: {}
- name: add_pet
  endpoint:
    path: /pets
    method: POST
    data_selector: records
    params: {}
- name: delete_pet
  endpoint:
    path: /pets/{id}
    method: DELETE
    data_selector: records
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: book
  endpoint:
    path: /books
    method: GET
    data_selector: bookList
- name: person
  endpoint:
    path: /people
    method: GET
    data_selector: personList
- name: chat
  endpoint:
    path: /chat
    method: POST
    data_selector: generated_text
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: chat_token
  endpoint:
    path: /token
    method: POST
    data_selector: data
    params: {}
- name: refresh_token
  endpoint:
    path: /refresh_token
    method: POST
    data_selector: data
    params: {}
- name: chat
  endpoint:
    path: /chat
    method: WebSocket
    data_selector: data
    params: {}
- name: gpt_query
  endpoint:
    path: /models/EleutherAI/gpt-j-6B
    method: POST
    data_selector: generated_text
- name: chat_session
  endpoint:
    path: /token
    method: POST
    data_selector: session_data
    params: {}
- name: book_info
  endpoint:
    path: /books
    method: GET
    data_selector: books
    params: {}
- name: token
  endpoint:
    path: /token
    method: POST
    data_selector: data
- name: refresh_token
  endpoint:
    path: /refresh_token
    method: POST
    data_selector: data
- name: chat
  endpoint:
    path: /chat
    method: WebSocket
    data_selector: data
- name: chat
  endpoint:
    path: /chat
    method: WebSocket
- name: chat
  endpoint:
    path: /token
    method: POST
- name: chat_token
  endpoint:
    path: /token
    method: POST
    data_selector: data
    params: {}
- name: refresh_token
  endpoint:
    path: /refresh_token
    method: POST
    data_selector: data
    params: {}
- name: chat
  endpoint:
    path: /chat
    method: WebSocket
    data_selector: data
    params: {}
- name: GPT
  endpoint:
    path: /models/EleutherAI/gpt-j-6B
    method: POST
    data_selector: ''
    params: {}
- name: gpt_j_model
  endpoint:
    path: /models/EleutherAI/gpt-j-6B
    method: POST
    data_selector: generated_text
- name: chat_history
  endpoint:
    path: /chat/history
    method: GET
    data_selector: messages
    params: {}
- name: chat
  endpoint:
    path: /token
    method: POST
    data_selector: session_data
    params: {}
- name: token
  endpoint:
    path: /token
    method: POST
    data_selector: null
    params: {}
- name: refresh_token
  endpoint:
    path: /refresh_token
    method: POST
    data_selector: null
    params: {}
- name: chat
  endpoint:
    path: /chat
    method: Websocket
    data_selector: null
    params: {}
- name: gpt_model
  endpoint:
    path: /models/EleutherAI/gpt-j-6B
    method: POST
    data_selector: generated_text
    params: {}
- name: token
  endpoint:
    path: /token
    method: POST
    data_selector: data
- name: refresh_token
  endpoint:
    path: /refresh_token
    method: POST
    data_selector: data
- name: chat
  endpoint:
    path: /chat
    method: WEBSOCKET
    data_selector: data
- name: query
  endpoint:
    path: /v1/query
    method: POST
    data_selector: generated_text
- name: refresh_token
  endpoint:
    path: /refresh_token
    method: GET
- name: gpt_j_model
  endpoint:
    path: /models/EleutherAI/gpt-j-6B
    method: POST
    data_selector: generated_text
- name: token
  endpoint:
    path: /token
    method: POST
    data_selector: ''
    params: {}
- name: refresh_token
  endpoint:
    path: /refresh_token
    method: POST
    data_selector: ''
    params: {}
- name: chat
  endpoint:
    path: /chat
    method: WebSocket
    data_selector: ''
    params: {}
- name: token
  endpoint:
    path: /token
    method: POST
    data_selector: token
    params: {}
- name: refresh_token
  endpoint:
    path: /refresh_token
    method: POST
    data_selector: refresh_token
    params: {}
- name: chat
  endpoint:
    path: /chat
    method: WebSocket
    data_selector: chat
    params: {}
- name: test
  endpoint:
    path: /test
    method: GET
    data_selector: msg
    params: {}
- name: chat_session
  endpoint:
    path: /token
    method: POST
    data_selector: chat_session
    params: {}
- name: message_channel
  endpoint:
    path: /chat
    method: GET
    data_selector: stream_data
    params: {}
- name: chat_session
  endpoint:
    path: /token
    method: POST
    data_selector: chat_session
    params: {}
- name: message_channel
  endpoint:
    path: /chat
    method: GET
    data_selector: messages
    params: {}
- name: query
  endpoint:
    path: /query
    method: POST
    data_selector: generated_text
    params: {}
- name: refresh_token
  endpoint:
    path: /refresh_token
    method: GET
- name: chat
  endpoint:
    path: /chat
    method: POST
    data_selector: responses
- name: refresh_token
  endpoint:
    path: /refresh_token
    method: GET
- name: user_repos
  endpoint:
    path: /user/repos
    method: POST
    data_selector: repository
    params:
      private: 'false'
- name: repo_clone_url
  endpoint:
    path: /repos/coccagerman/{repoName}
    method: GET
    data_selector: clone_url
    params: {}
- name: token
  endpoint:
    path: /token
    method: POST
    data_selector: data
    params: {}
- name: refresh_token
  endpoint:
    path: /refresh_token
    method: POST
    data_selector: data
    params: {}
- name: chat
  endpoint:
    path: /chat
    method: WEBSOCKET
    data_selector: data
    params: {}
- name: pets
  endpoint:
    path: /pets
    method: GET
    data_selector: pets
- name: pet
  endpoint:
    path: /pet
    method: GET
    data_selector: pet
- name: chat_session
  endpoint:
    path: /token
    method: POST
    data_selector: session
    params: {}
- name: message_channel
  endpoint:
    path: /chat
    method: POST
    data_selector: message
    params: {}
- name: chat
  endpoint:
    path: /chat
    method: POST
    data_selector: response
    params: {}
- name: pets
  endpoint:
    path: /pets
    method: GET
    data_selector: pets
    params: {}
- name: pet
  endpoint:
    path: /pet
    method: GET
    data_selector: pet
    params: {}
- name: addPet
  endpoint:
    path: /addPet
    method: POST
    data_selector: addPet
    params: {}
- name: editPet
  endpoint:
    path: /editPet
    method: PUT
    data_selector: editPet
    params: {}
- name: deletePet
  endpoint:
    path: /deletePet
    method: DELETE
    data_selector: deletePet
    params: {}
- name: refresh_token
  endpoint:
    path: /refresh_token
    method: GET
- name: pets
  endpoint:
    path: /
    method: POST
    data_selector: data.pets
    params: {}
- name: pet
  endpoint:
    path: /
    method: POST
    data_selector: data.pet
    params: {}
- name: edit_pet
  endpoint:
    path: /
    method: POST
    data_selector: data.editPet
    params: {}
- name: add_pet
  endpoint:
    path: /
    method: POST
    data_selector: data.addPet
    params: {}
- name: delete_pet
  endpoint:
    path: /
    method: POST
    data_selector: data.deletePet
    params: {}
- name: user_repos
  endpoint:
    path: /user/repos
    method: POST
    data_selector: ''
    params:
      name: repoName
      private: false
- name: repo
  endpoint:
    path: /repos/coccagerman/{repoName}
    method: GET
    data_selector: ''
    params: {}
- name: pets
  endpoint:
    path: /
    method: POST
    data_selector: data.pets
    params: {}
- name: pet
  endpoint:
    path: /
    method: POST
    data_selector: data.pet
    params: {}
- name: addPet
  endpoint:
    path: /
    method: POST
    data_selector: data.addPet
    params: {}
- name: deletePet
  endpoint:
    path: /
    method: POST
    data_selector: data.deletePet
    params: {}
- name: editPet
  endpoint:
    path: /
    method: POST
    data_selector: data.editPet
    params: {}
- name: users
  endpoint:
    path: /graphql
    method: POST
    data_selector: data
    params: {}
- name: books
  endpoint:
    path: /graphql
    method: POST
    data_selector: data
    params: {}
- name: pets
  endpoint:
    path: /pets
    method: GET
    data_selector: pets
    params: {}
- name: pet
  endpoint:
    path: /pet
    method: GET
    data_selector: pet
    params:
      id: ID
- name: pets
  endpoint:
    method: GET
    data_selector: pets
- name: pet
  endpoint:
    method: GET
    data_selector: pet
- name: addPet
  endpoint:
    method: POST
    data_selector: addPet
- name: editPet
  endpoint:
    method: PUT
    data_selector: editPet
- name: deletePet
  endpoint:
    method: DELETE
    data_selector: deletePet
- name: pets
  endpoint:
    path: /
    method: POST
    data_selector: data.pets
    params: {}
- name: petDetail
  endpoint:
    path: /
    method: POST
    data_selector: data.pet
    params: {}
- name: editPet
  endpoint:
    path: /
    method: POST
    data_selector: data.editPet
    params: {}
- name: addPet
  endpoint:
    path: /
    method: POST
    data_selector: data.addPet
    params: {}
- name: deletePet
  endpoint:
    path: /
    method: POST
    data_selector: data.deletePet
    params: {}
- name: permissions
  endpoint:
    path: /services/data/vXX.X/permissions
    method: GET
    data_selector: records
    params: {}
- name: pets
  endpoint:
    path: /
    method: POST
    data_selector: data.pets
    params: {}
- name: pet
  endpoint:
    path: /
    method: POST
    data_selector: data.pet
    params: {}
- name: addPet
  endpoint:
    path: /
    method: POST
    data_selector: data.addPet
    params: {}
- name: editPet
  endpoint:
    path: /
    method: POST
    data_selector: data.editPet
    params: {}
- name: deletePet
  endpoint:
    path: /
    method: POST
    data_selector: data.deletePet
    params: {}
- name: policies
  endpoint:
    path: /policies
    method: GET
    data_selector: policies
    params: {}
- name: CSS Transform Functions
  endpoint:
    path: /css-transform-functions
    method: GET
    data_selector: functions
- name: Matrix Resolutions Tool
  endpoint:
    path: /matrix-resolutions-tool
    method: GET
    data_selector: matrix
- name: permission_validator
  endpoint:
    path: /validator
    method: POST
    data_selector: policy
- name: custom_hook
  endpoint:
    path: /hook
    method: GET
    data_selector: hook
- name: contextual_rules
  endpoint:
    path: /contextual
    method: GET
    data_selector: rules
- name: workouts
  endpoint:
    path: /api/v1/workouts
    method: GET
    data_selector: records
    params: {}
- name: workouts
  endpoint:
    path: /api/v1/workouts
    method: GET
    data_selector: workouts
    params: {}
- name: workouts
  endpoint:
    path: /api/v1/workouts
    method: GET
    data_selector: workouts
    params: {}
- name: workouts
  endpoint:
    path: /api/v1/workouts
    method: GET
    data_selector: records
    params: {}
- name: workouts
  endpoint:
    path: /api/v1/workouts
    method: GET
    data_selector: data
    params: {}
- name: create_workout
  endpoint:
    path: /api/v1/workouts
    method: POST
    data_selector: data
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: policies
  endpoint:
    path: /policies
    method: GET
    data_selector: policies
    params: {}
- name: workouts
  endpoint:
    path: /api/v1/workouts/:workoutId/records
    method: GET
- name: members
  endpoint:
    path: /api/v1/members
    method: GET
- name: records
  endpoint:
    path: /api/v1/records
    method: GET
- name: permission
  endpoint:
    path: /validatePermission
    method: POST
    data_selector: result
- name: policies
  endpoint:
    path: /getPolicies
    method: GET
    data_selector: policies
- name: workouts
  endpoint:
    path: /api/v1/workouts
    method: GET
    data_selector: records
    params: {}
- name: workouts
  endpoint:
    path: /api/v1/workouts
    method: GET
    data_selector: workouts
- name: workouts
  endpoint:
    path: /api/v1/workouts
    method: GET
    data_selector: data
    params: {}
- name: create_workout
  endpoint:
    path: /api/v1/workouts
    method: POST
    data_selector: data
    params: {}
- name: workouts
  endpoint:
    path: /api/v1/workouts
    method: GET
    data_selector: workouts
    params: {}
- name: create_workout
  endpoint:
    path: /api/v1/workouts
    method: POST
    data_selector: workout
    params: {}
- name: workouts
  endpoint:
    path: /workouts
    method: GET
    data_selector: workouts
    params: {}
- name: workout_records
  endpoint:
    path: /workouts/:workoutId/records
    method: GET
    data_selector: records
    params: {}
- name: workouts
  endpoint:
    path: /api/v1/workouts
    method: GET
    data_selector: workouts
    params: {}
- name: workouts
  endpoint:
    path: /api/v1/workouts
    method: GET
    data_selector: workouts
- name: records
  endpoint:
    path: /api/v1/workouts/:workoutId/records
    method: GET
    data_selector: records
- name: members
  endpoint:
    path: /members/:memberId
    method: GET
    data_selector: member
- name: workouts
  endpoint:
    path: /
    method: GET
    data_selector: data
    params: {}
- name: workouts
  endpoint:
    path: /workouts
    method: GET
    data_selector: data
- name: create_workout
  endpoint:
    path: /workouts
    method: POST
    data_selector: data
- name: workouts
  endpoint:
    path: /api/v1/workouts
    method: GET
    data_selector: data
    params:
      mode: string
- name: workouts
  endpoint:
    path: /api/v1/workouts/:workoutId/records
    method: GET
- name: members
  endpoint:
    path: /api/v1/members
    method: GET
- name: records
  endpoint:
    path: /api/v1/records
    method: GET
- name: workouts
  endpoint:
    path: /api/v1/workouts
    method: GET
    data_selector: workouts
    params: {}
- name: workouts
  endpoint:
    path: /api/v1/workouts
    method: GET
    data_selector: data
- name: create_workout
  endpoint:
    path: /api/v1/workouts
    method: POST
    data_selector: data
- name: workouts
  endpoint:
    path: /api/v1/workouts
    method: GET
    data_selector: records
    params: {}
- name: workout_by_id
  endpoint:
    path: /api/v1/workouts/:workoutId
    method: GET
    data_selector: workout
    params: {}
- name: create_workout
  endpoint:
    path: /api/v1/workouts
    method: POST
    data_selector: created_workout
    params: {}
- name: update_workout
  endpoint:
    path: /api/v1/workouts/:workoutId
    method: PATCH
    data_selector: updated_workout
    params: {}
- name: delete_workout
  endpoint:
    path: /api/v1/workouts/:workoutId
    method: DELETE
    data_selector: deleted_workout
    params: {}
- name: workout_records
  endpoint:
    path: /api/v1/workouts/:workoutId/records
    method: GET
    data_selector: records
    params: {}
- name: workouts
  endpoint:
    path: /api/v1/workouts
    method: GET
- name: records
  endpoint:
    path: /api/v1/workouts/:workoutId/records
    method: GET
- name: members
  endpoint:
    path: /members/:memberId
    method: GET
- name: sort
  endpoint:
    path: /sort
    method: GET
    data_selector: records
- name: binarySearch
  endpoint:
    path: /binarySearch
    method: GET
    data_selector: records
- name: fill
  endpoint:
    path: /fill
    method: GET
    data_selector: records
- name: copyOf
  endpoint:
    path: /copyOf
    method: GET
    data_selector: records
- name: copyOfRange
  endpoint:
    path: /copyOfRange
    method: GET
    data_selector: records
- name: equals
  endpoint:
    path: /equals
    method: GET
    data_selector: records
- name: deepEquals
  endpoint:
    path: /deepEquals
    method: GET
    data_selector: records
- name: workouts
  endpoint:
    path: /api/v1/workouts
    method: GET
    data_selector: data
    params: {}
- name: workouts
  endpoint:
    path: /api/v1/workouts
    method: GET
    data_selector: data
    params:
      mode: string
- name: hash_map_methods
  endpoint:
    path: /hash_map/methods
    method: GET
    data_selector: methods
- name: user_class
  endpoint:
    path: /user/class
    method: GET
    data_selector: classes
- name: book_class
  endpoint:
    path: /book/class
    method: GET
    data_selector: classes
- name: bash_commands
  endpoint:
    path: /bash_commands
    method: GET
    data_selector: commands
    params: {}
- name: cpu_stress_test
  endpoint:
    path: /cpu_stress_test
    method: GET
    data_selector: tests
    params: {}
- name: file_system_hierarchy
  endpoint:
    path: /
    method: GET
    data_selector: records
    params: {}
- name: array_sort
  endpoint:
    path: /arrays/sort
    method: GET
    data_selector: result
    params: {}
- name: array_binary_search
  endpoint:
    path: /arrays/binary_search
    method: GET
    data_selector: result
    params: {}
- name: array_fill
  endpoint:
    path: /arrays/fill
    method: GET
    data_selector: result
    params: {}
- name: array_copy
  endpoint:
    path: /arrays/copy
    method: GET
    data_selector: result
    params: {}
- name: array_compare
  endpoint:
    path: /arrays/compare
    method: GET
    data_selector: result
    params: {}
- name: hash_map_operations
  endpoint:
    path: /hash_map/operations
    method: POST
    data_selector: results
    params: {}
- name: file_search
  endpoint:
    path: /find
    method: GET
    data_selector: files
    params:
      type: f
      name: file-to-search
- name: directory_search
  endpoint:
    path: /find
    method: GET
    data_selector: directories
    params:
      type: d
- name: key_bindings
  endpoint:
    path: /key_bindings
    method: GET
    data_selector: bindings
    params: {}
- name: disk_health_check
  endpoint:
    path: /disk_health_check
    method: GET
    data_selector: health
    params: {}
- name: hash_map_operations
  endpoint:
    path: /hash_map/operations
    method: GET
    data_selector: operations
    params: {}
- name: bash_commands
  endpoint:
    path: /bash/commands
    method: GET
    data_selector: records
    params: {}
- name: file_management
  endpoint:
    path: /file/management
    method: GET
    data_selector: records
    params: {}
- name: cpu_stress_test
  endpoint:
    path: /stress-ng/cpu
    method: POST
    data_selector: result
    params: {}
- name: whoami_command
  endpoint:
    path: /whoami
    method: GET
    data_selector: username
    params: {}
- name: uname_command
  endpoint:
    path: /uname
    method: GET
    data_selector: system_info
    params: {}
- name: file_system_hierarchy
  endpoint:
    path: /
    method: GET
    data_selector: directory_structure
- name: tail
  endpoint:
    path: /tail
    method: GET
    data_selector: lines
    params: {}
- name: head
  endpoint:
    path: /head
    method: GET
    data_selector: lines
    params: {}
- name: wc
  endpoint:
    path: /wc
    method: GET
    data_selector: count
    params: {}
- name: diff
  endpoint:
    path: /diff
    method: GET
    data_selector: differences
    params: {}
- name: vim
  endpoint:
    path: /vim
    method: GET
    data_selector: editor
    params: {}
- name: nano
  endpoint:
    path: /nano
    method: GET
    data_selector: editor
    params: {}
- name: bash_shell
  endpoint:
    path: /bash_shell
    method: GET
    data_selector: commands
    params: {}
- name: system_info
  endpoint:
    path: /system_info
    method: GET
    data_selector: system_details
    params: {}
- name: file_system
  endpoint:
    path: /file_system
    method: GET
    data_selector: file_hierarchy
    params: {}
- name: installation_guide
  endpoint:
    path: /installation_guide
    method: GET
    data_selector: records
- name: access_methods
  endpoint:
    path: /access_methods
    method: GET
    data_selector: records
- name: find_files
  endpoint:
    path: /find
    method: GET
    data_selector: output
    params: {}
- name: cpu_stress_test
  endpoint:
    path: /stress-ng
    method: POST
    data_selector: output
    params:
      cpu: 4
      timeout: 60
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
- name: bash_script_execution
  endpoint:
    path: /create-and-execute-bash-scripts
    method: POST
    data_selector: scripts
    params: {}
- name: bash_scripting_basics
  endpoint:
    path: /bash-scripting-basics
    method: GET
    data_selector: basics
    params: {}
- name: bash_commands
  endpoint:
    path: /bash/commands
    method: GET
    data_selector: commands
    params: {}
- name: installation_guide
  endpoint:
    path: /installation_guide
    method: GET
    data_selector: content
- name: command_line
  endpoint:
    path: /command_line
    method: GET
    data_selector: commands
- name: system_info
  endpoint:
    path: /system/info
    method: GET
    data_selector: system_info
- name: cpu_info
  endpoint:
    path: /cpu/info
    method: GET
    data_selector: cpu_info
- name: cron_jobs
  endpoint:
    path: /cron/jobs
    method: GET
    data_selector: jobs
    params: {}
- name: tail
  endpoint:
    path: /tail
    method: GET
    data_selector: lines
    params: {}
- name: head
  endpoint:
    path: /head
    method: GET
    data_selector: lines
    params: {}
- name: wc
  endpoint:
    path: /wc
    method: GET
    data_selector: counts
    params: {}
- name: diff
  endpoint:
    path: /diff
    method: GET
    data_selector: differences
    params: {}
- name: Linux Introduction
  endpoint:
    path: /introduction/linux
    method: GET
    data_selector: records
- name: Bash Commands
  endpoint:
    path: /commands/bash
    method: GET
    data_selector: records
- name: log_entries
  endpoint:
    path: /logs
    method: GET
    data_selector: entries
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: process_management
  endpoint:
    path: /processes
    method: GET
    data_selector: processes
- name: random_joke
  endpoint:
    path: /random_joke
    method: GET
    data_selector: joke
- name: linux_commands
  endpoint:
    path: /linux/commands
    method: GET
    data_selector: commands
    params: {}
- name: linux_distributions
  endpoint:
    path: /linux/distributions
    method: GET
    data_selector: distributions
    params: {}
- name: system_activity_report
  endpoint:
    path: /sar
    method: GET
    data_selector: system_activity
    params: {}
- name: disk_health_check
  endpoint:
    path: /smartmontools
    method: GET
    data_selector: disk_health
    params: {}
- name: cpu_stress_test
  endpoint:
    path: /stress-ng
    method: GET
    data_selector: cpu_stress
    params: {}
- name: commands
  endpoint:
    path: /commands
    method: GET
    data_selector: commands
    params: {}
- name: files
  endpoint:
    path: /files
    method: GET
    data_selector: files
    params: {}
- name: chapter_1
  endpoint:
    path: /news/tag/beginner
    method: GET
    data_selector: articles
    params: {}
- name: chapter_2
  endpoint:
    path: /news/tag/beginner
    method: GET
    data_selector: articles
    params: {}
- name: log_entries
  endpoint:
    path: /api/logs
    method: GET
    data_selector: entries
- name: repository
  endpoint:
    path: /user/repos
    method: POST
    data_selector: repository
    params: {}
- name: docker_service
  endpoint:
    path: /v1/docker
    method: POST
    data_selector: repositories
    params: {}
- name: billing_account
  endpoint:
    path: /billing
    method: GET
    data_selector: account_details
    params: {}
- name: service_account
  endpoint:
    path: /iam/serviceAccounts
    method: POST
    data_selector: service_account_details
    params: {}
- name: service_usage_api
  endpoint:
    path: /serviceUsageApi
    method: GET
    data_selector: enabled_services
    params: {}
- name: container
  endpoint:
    path: /hello
    method: GET
    data_selector: NAMES
- name: random_joke
  endpoint:
    path: /random_joke
    method: GET
    data_selector: joke
    params: {}
- name: CPU Stress Test
  endpoint:
    path: /stress-ng/cpu
    method: GET
    data_selector: results
    params: {}
- name: Disk Health Check
  endpoint:
    path: /smartmontools/disk_health
    method: GET
    data_selector: results
    params: {}
- name: container
  endpoint:
    path: /engine/reference/commandline/container/
    method: GET
    data_selector: commands
    params: {}
- name: image
  endpoint:
    path: /engine/reference/commandline/image/
    method: GET
    data_selector: commands
    params: {}
- name: hello-world
  endpoint:
    path: /hello-world
    method: GET
    data_selector: message
    params: {}
- name: todos
  endpoint:
    path: /todos/1
    method: GET
    data_selector: title
- name: hello-world
  endpoint:
    path: /v1.13/containers
    method: POST
    data_selector: image
    params: {}
- name: hello-dock
  endpoint:
    path: /v1.13/containers
    method: POST
    data_selector: image
    params:
      publish: 8080:80
- name: Node.js Project Setup
  endpoint:
    path: /setup/nodejs
    method: GET
    data_selector: steps
    params: {}
- name: GitHub Repository
  endpoint:
    path: /repository/create
    method: POST
    data_selector: repository
    params: {}
- name: CI/CD Workflows
  endpoint:
    path: /workflows/create
    method: POST
    data_selector: workflows
    params: {}
- name: hello-dock
  endpoint:
    path: docker/container/run
    method: POST
    data_selector: response
    params:
      publish: 8080:80
- name: container
  endpoint:
    path: /container
    method: GET
    data_selector: CONTAINER ID, IMAGE, COMMAND, CREATED, STATUS, PORTS, NAMES
- name: hello-world
  endpoint:
    path: /hello-world
    method: GET
    data_selector: records
- name: hello-dock
  endpoint:
    path: /fhsinchy/hello-dock
    method: GET
    data_selector: records
- name: container
  endpoint:
    path: /containers
    method: GET
    data_selector: containers
- name: hello-world
  endpoint:
    path: /hello-world
    method: GET
    data_selector: message
- name: containers
  endpoint:
    path: /v1.41/containers
    method: GET
    data_selector: Containers
- name: images
  endpoint:
    path: /v1.41/images
    method: GET
    data_selector: Images
- name: container
  endpoint:
    path: /hello
    method: GET
    data_selector: id
    params: {}
- name: hello-dock-container
  endpoint:
    path: /docker/containers/hello-dock-container
    method: GET
- name: hello-dock-container-2
  endpoint:
    path: /docker/containers/hello-dock-container-2
    method: GET
- name: reverent_torvalds
  endpoint:
    path: /docker/containers/reverent_torvalds
    method: GET
- name: exciting_chebyshev
  endpoint:
    path: /docker/containers/exciting_chebyshev
    method: GET
- name: container
  endpoint:
    path: /containers/create
    method: POST
    data_selector: container
    params:
      publish: 8080:80
- name: container
  endpoint:
    path: /engine/reference/commandline/container/
    method: GET
    data_selector: commands
- name: container
  endpoint:
    path: /containers
    method: GET
    data_selector: containers
    params: {}
- name: image
  endpoint:
    path: /images
    method: GET
    data_selector: images
    params: {}
- name: hello-world
  endpoint:
    path: /v1.13/containers/create
    method: POST
    data_selector: image
    params: {}
- name: fhsinchy/hello-dock
  endpoint:
    path: /v1.13/containers/create
    method: POST
    data_selector: image
    params: {}
- name: hello-world
  endpoint:
    path: /hello-world
    method: GET
    data_selector: message
    params: {}
- name: containers
  endpoint:
    path: /containers
    method: GET
    data_selector: containers
- name: images
  endpoint:
    path: /images
    method: GET
    data_selector: images
- name: container
  endpoint:
    path: /containers
    method: GET
    data_selector: containers
    params: {}
- name: containers
  endpoint:
    path: /v1.41/containers/json
    method: GET
    data_selector: Containers
    params: {}
- name: images
  endpoint:
    path: /v1.41/images/json
    method: GET
    data_selector: Images
    params: {}
- name: container
  endpoint:
    path: /containers
    method: GET
    data_selector: containers
    params: {}
- name: container
  endpoint:
    path: /v1.13/containers
    method: GET
    data_selector: containers
- name: image
  endpoint:
    path: /v1.13/images
    method: GET
    data_selector: images
- name: registry
  endpoint:
    path: /v1.13/registry
    method: GET
    data_selector: registries
- name: container
  endpoint:
    path: /docker/container
    method: POST
    data_selector: containers
    params: {}
- name: hello-dock
  endpoint:
    path: /r/fhsinchy/hello-dock
    method: GET
- name: hello-world
  endpoint:
    path: /r/library/hello-world
    method: GET
- name: container
  endpoint:
    path: /containers
    method: GET
    data_selector: containers
- name: containers
  endpoint:
    path: /v1.41/containers/json
    method: GET
    data_selector: Containers
    params: {}
- name: images
  endpoint:
    path: /v1.41/images/json
    method: GET
    data_selector: Images
    params: {}
- name: hello-dock-container
  endpoint:
    path: /hello-dock-container
    method: GET
- name: hello-dock-container-2
  endpoint:
    path: /hello-dock-container-2
    method: GET
- name: containers
  endpoint:
    path: /v1.41/containers/json
    method: GET
    data_selector: Containers
    params: {}
- name: images
  endpoint:
    path: /v1.41/images/json
    method: GET
    data_selector: Images
    params: {}
- name: container
  endpoint:
    path: /container
    method: POST
    data_selector: container_id
    params:
      image: fhsinchy/hello-dock
      publish: 8080:80
- name: executable_images
  endpoint:
    path: /rmbyext
    method: GET
    data_selector: files
    params: {}
- name: containers
  endpoint:
    path: /v2/containers
    method: GET
    data_selector: results
- name: images
  endpoint:
    path: /v2/images
    method: GET
    data_selector: results
- name: registries
  endpoint:
    path: /v2/registries
    method: GET
    data_selector: results
- name: container
  endpoint:
    path: /containers
    method: GET
    data_selector: containers
    params: {}
- name: container
  endpoint:
    path: /containers
    method: GET
    data_selector: containers
    params: {}
- name: image
  endpoint:
    path: /images
    method: GET
    data_selector: images
    params: {}
- name: registry
  endpoint:
    path: /registries
    method: GET
    data_selector: registries
    params: {}
- name: container
  endpoint:
    path: /containers
    method: GET
- name: image
  endpoint:
    path: /images
    method: GET
- name: dockerfile
  endpoint:
    path: /Dockerfile
    method: POST
- name: container_start
  endpoint:
    path: /container/start
    method: POST
    data_selector: response
    params: {}
- name: container_restart
  endpoint:
    path: /container/restart
    method: POST
    data_selector: response
    params: {}
- name: container_create
  endpoint:
    path: /container/create
    method: POST
    data_selector: response
    params: {}
- name: container_remove
  endpoint:
    path: /container/remove
    method: DELETE
    data_selector: response
    params: {}
- name: hello_world
  endpoint:
    path: /hello-world
    method: GET
    data_selector: output
- name: containers
  endpoint:
    path: /v1.41/containers/json
    method: GET
    data_selector: containers
- name: images
  endpoint:
    path: /v1.41/images/json
    method: GET
    data_selector: images
- name: hello-dock-container
  endpoint:
    path: /v1.41/containers/hello-dock-container
    method: GET
    data_selector: container_info
- name: containers
  endpoint:
    path: /containers
    method: GET
    data_selector: containers
    params: {}
- name: hello-dock-container
  endpoint:
    path: /container/start/hello-dock-container
    method: POST
- name: hello-dock-container-2
  endpoint:
    path: /container/restart/hello-dock-container-2
    method: POST
- name: image_build
  endpoint:
    path: /docker/image/build
    method: POST
    data_selector: build_context
    params: {}
- name: container_run
  endpoint:
    path: /docker/container/run
    method: POST
    data_selector: run_context
    params: {}
- name: container
  endpoint:
    path: /v1.41/containers
    method: GET
    data_selector: containers
    params: {}
- name: image
  endpoint:
    path: /v1.41/images
    method: GET
    data_selector: images
    params: {}
- name: containers
  endpoint:
    path: /containers
    method: GET
    data_selector: containers
    params: {}
- name: images
  endpoint:
    path: /images
    method: GET
    data_selector: images
    params: {}
- name: registries
  endpoint:
    path: /registries
    method: GET
    data_selector: registries
    params: {}
- name: hello-dock
  endpoint:
    path: /hello-dock
    method: GET
- name: default-nginx
  endpoint:
    path: /
    method: GET
- name: rmbyext
  endpoint:
    path: /zone
    method: POST
    data_selector: files
    params:
      extension: pdf
- name: nginx
  endpoint:
    path: /nginx
    method: GET
    data_selector: response
    params: {}
- name: containers
  endpoint:
    path: /v1.41/containers/json
    method: GET
    data_selector: Containers
    params: {}
- name: images
  endpoint:
    path: /v1.41/images/json
    method: GET
    data_selector: Images
    params: {}
- name: container
  endpoint:
    path: /containers
    method: GET
    data_selector: containers
    params: {}
- name: image
  endpoint:
    path: /images
    method: GET
    data_selector: images
    params: {}
- name: nginx
  endpoint:
    path: /nginx
    method: RUN
    data_selector: apt-get install nginx -y
    params: {}
- name: containers
  endpoint:
    path: /containers
    method: GET
    data_selector: containers
    params: {}
- name: images
  endpoint:
    path: /images
    method: GET
    data_selector: images
    params: {}
- name: docker_image
  endpoint:
    path: /images
    method: GET
    data_selector: images
- name: docker_container
  endpoint:
    path: /containers
    method: GET
    data_selector: containers
- name: hello_world
  endpoint:
    path: /hello-world
    method: GET
    data_selector: message
    params: {}
- name: docker_ps
  endpoint:
    path: /containers/json
    method: GET
    data_selector: containers
    params: {}
- name: Docker Installation
  endpoint:
    path: /installation/docker
    method: GET
    data_selector: installation_guide
    params: {}
- name: Hello World
  endpoint:
    path: /examples/hello-world
    method: GET
    data_selector: example_output
    params: {}
- name: container
  endpoint:
    path: /v2/containers
    method: GET
    data_selector: containers
    params: {}
- name: image
  endpoint:
    path: /v2/images
    method: GET
    data_selector: images
    params: {}
- name: registry
  endpoint:
    path: /v2/registries
    method: GET
    data_selector: registries
    params: {}
- name: docker_image
  endpoint:
    path: /v2/images
    method: GET
    data_selector: images
    params: {}
- name: docker_container
  endpoint:
    path: /v2/containers
    method: GET
    data_selector: containers
    params: {}
- name: containers
  endpoint:
    path: /containers
    method: GET
    data_selector: containers
    params: {}
- name: images
  endpoint:
    path: /images
    method: GET
    data_selector: images
    params: {}
- name: container
  endpoint:
    path: /containers
    method: GET
    data_selector: containers
- name: nginx
  endpoint:
    path: /nginx
    method: GET
    data_selector: records
    params: {}
- name: containers
  endpoint:
    path: /containers
    method: GET
    data_selector: containers
    params: {}
- name: images
  endpoint:
    path: /images
    method: GET
    data_selector: images
    params: {}
- name: volumes
  endpoint:
    path: /volumes
    method: GET
    data_selector: volumes
    params: {}
- name: containers
  endpoint:
    path: /v1.41/containers/json
    method: GET
    data_selector: Containers
- name: images
  endpoint:
    path: /v1.41/images/json
    method: GET
    data_selector: Images
- name: containers
  endpoint:
    path: /containers
    method: GET
    data_selector: containers
    params: {}
- name: nginx
  endpoint:
    path: /nginx
    method: GET
    data_selector: default
- name: nginx
  endpoint:
    path: /nginx
    method: GET
    data_selector: records
    params: {}
- name: hello-world
  endpoint:
    path: /_hello-world
    method: GET
    data_selector: message
    params: {}
- name: container
  endpoint:
    path: /containers
    method: GET
    data_selector: containers
- name: image
  endpoint:
    path: /images
    method: GET
    data_selector: images
- name: registry
  endpoint:
    path: /registry
    method: GET
    data_selector: registries
- name: container
  endpoint:
    path: /container
    method: POST
    data_selector: containers
- name: image
  endpoint:
    path: /image
    method: GET
    data_selector: images
- name: container
  endpoint:
    path: /containers
    method: GET
    data_selector: containers
    params: {}
- name: image
  endpoint:
    path: /images
    method: GET
    data_selector: images
    params: {}
- name: custom-nginx
  endpoint:
    path: /custom-nginx
    method: BUILD
    data_selector: layers
    params: {}
- name: containers
  endpoint:
    path: /containers
    method: GET
    data_selector: containers
- name: images
  endpoint:
    path: /images
    method: GET
    data_selector: images
- name: nginx_source
  endpoint:
    path: /nginx-1.19.2.tar.gz
    method: COPY
    data_selector: source_code
    params: {}
- name: nginx
  endpoint:
    path: /nginx
    method: GET
    data_selector: default
    params: {}
- name: container
  endpoint:
    path: /containers
    method: GET
    data_selector: containers
    params: {}
- name: image
  endpoint:
    path: /images
    method: GET
    data_selector: images
    params: {}
- name: container
  endpoint:
    path: /containers
    method: GET
    data_selector: containers
    params: {}
- name: image
  endpoint:
    path: /images
    method: GET
    data_selector: images
    params: {}
- name: containers
  endpoint:
    path: /containers
    method: GET
    data_selector: containers
    params: {}
- name: images
  endpoint:
    path: /images
    method: GET
    data_selector: images
    params: {}
- name: containers
  endpoint:
    path: /containers
    method: GET
    data_selector: containers
    params: {}
- name: images
  endpoint:
    path: /images
    method: GET
    data_selector: images
    params: {}
- name: nginx
  endpoint:
    path: /nginx-1.19.2.tar.gz
    method: GET
    data_selector: records
- name: nginx
  endpoint:
    path: /services/data/vXX.X/sobjects/nginx
    method: GET
    data_selector: records
    params: {}
- name: containers
  endpoint:
    path: /v1.41/containers
    method: GET
    data_selector: containers
- name: images
  endpoint:
    path: /v1.41/images
    method: GET
    data_selector: images
- name: registries
  endpoint:
    path: /v1.41/registries
    method: GET
    data_selector: registries
- name: containers
  endpoint:
    path: /containers/json
    method: GET
    data_selector: Containers
    params: {}
- name: images
  endpoint:
    path: /images/json
    method: GET
    data_selector: Images
    params: {}
- name: containers
  endpoint:
    path: /containers
    method: GET
    data_selector: containers
    params: {}
- name: containers
  endpoint:
    path: /containers
    method: GET
    data_selector: containers
    params: {}
- name: images
  endpoint:
    path: /images
    method: GET
    data_selector: images
    params: {}
- name: nginx_installation
  endpoint:
    path: /download/nginx-1.19.2.tar.gz
    method: GET
    data_selector: records
- name: nginx
  endpoint:
    path: /
    method: GET
    data_selector: ''
    params: {}
- name: containers
  endpoint:
    path: /containers/json
    method: GET
    data_selector: Containers
    params: {}
- name: images
  endpoint:
    path: /images/json
    method: GET
    data_selector: Images
    params: {}
- name: networks
  endpoint:
    path: /networks
    method: GET
    data_selector: Networks
    params: {}
- name: volumes
  endpoint:
    path: /volumes
    method: GET
    data_selector: Volumes
    params: {}
- name: containers
  endpoint:
    path: /v1.40/containers/json
    method: GET
    data_selector: Containers
- name: images
  endpoint:
    path: /v1.40/images/json
    method: GET
    data_selector: Images
- name: containers
  endpoint:
    path: /containers
    method: GET
    data_selector: containers
    params: {}
- name: images
  endpoint:
    path: /images
    method: GET
    data_selector: images
    params: {}
- name: container_management
  endpoint:
    path: /docker/container
    method: POST
    data_selector: commands
    params:
      command: start
      container_name: hello-dock-container
- name: container_reboot
  endpoint:
    path: /docker/container
    method: POST
    data_selector: commands
    params:
      command: restart
      container_name: hello-dock-container-2
- name: create_container
  endpoint:
    path: /docker/container
    method: POST
    data_selector: commands
    params:
      command: create
      image: fhsinchy/hello-dock
      publish: 8080:80
- name: remove_container
  endpoint:
    path: /docker/container
    method: DELETE
    data_selector: commands
    params:
      container_id: 6cf52771dde1
- name: remove_dangling_containers
  endpoint:
    path: /docker/container/prune
    method: POST
    data_selector: commands
- name: interactive_container_run
  endpoint:
    path: /docker/container/run
    method: POST
    data_selector: commands
    params:
      image: ubuntu
      options:
      - -it
- name: execute_command_in_container
  endpoint:
    path: /docker/container/run
    method: POST
    data_selector: commands
    params:
      image: alpine
      command: uname -a
- name: bind_mount_example
  endpoint:
    path: /docker/container/run
    method: POST
    data_selector: commands
    params:
      image: busybox
      command: sh -c "echo -n my-secret | base64"
      volume: $(pwd):/zone
- name: nginx_source
  endpoint:
    path: /nginx-1.19.2.tar.gz
    method: GET
    data_selector: records
    params: {}
- name: nginx
  endpoint:
    path: /nginx
    method: GET
    data_selector: image
- name: rmbyext
  endpoint:
    path: /services/data/vXX.X/sobjects/rmbyext
    method: GET
    data_selector: records
    params: {}
- name: nginx
  endpoint:
    path: /nginx-1.19.2.tar.gz
    method: ADD
    data_selector: records
- name: containers
  endpoint:
    path: /v1.41/containers/json
    method: GET
    data_selector: Containers
- name: images
  endpoint:
    path: /v1.41/images/json
    method: GET
    data_selector: Images
- name: containers
  endpoint:
    path: /containers
    method: GET
    data_selector: containers
    params: {}
- name: images
  endpoint:
    path: /images
    method: GET
    data_selector: images
    params: {}
- name: volumes
  endpoint:
    path: /volumes
    method: GET
    data_selector: volumes
    params: {}
- name: nginx_build
  endpoint:
    path: /nginx-1.19.2.tar.gz
    method: GET
    data_selector: records
- name: nginx_source
  endpoint:
    path: /download/nginx-1.19.2.tar.gz
    method: GET
- name: container
  endpoint:
    path: /containers
    method: GET
    data_selector: containers
    params: {}
- name: image
  endpoint:
    path: /images
    method: GET
    data_selector: images
    params: {}
- name: registry
  endpoint:
    path: /registries
    method: GET
    data_selector: registries
    params: {}
- name: docker_image
  endpoint:
    path: /images
    method: GET
    data_selector: images
    params: {}
- name: docker_container
  endpoint:
    path: /containers
    method: GET
    data_selector: containers
    params: {}
- name: nginx_source
  endpoint:
    path: /download/nginx-1.19.2.tar.gz
    method: GET
- name: nginx
  endpoint:
    path: /download/nginx-1.19.2.tar.gz
    method: GET
    data_selector: records
- name: nginx
  endpoint:
    path: /download/nginx-1.19.2.tar.gz
    method: ADD
    data_selector: ''
    params: {}
- name: nginx
  endpoint:
    path: /nginx-1.19.2.tar.gz
    method: ADD
    data_selector: none
    params: {}
- name: hello_dock
  endpoint:
    path: /v1/hello_dock
    method: GET
    data_selector: records
    params: {}
- name: hello-dock
  endpoint:
    path: /fhsinchy/hello-dock
    method: GET
    data_selector: images
    params: {}
- name: hello-world
  endpoint:
    path: /hello-world
    method: GET
    data_selector: images
    params: {}
- name: containers
  endpoint:
    path: /v1.41/containers
    method: GET
    data_selector: containers
    params: {}
- name: images
  endpoint:
    path: /v1.41/images
    method: GET
    data_selector: images
    params: {}
- name: containers
  endpoint:
    path: /containers
    method: GET
    data_selector: containers
- name: images
  endpoint:
    path: /images
    method: GET
    data_selector: images
- name: nginx_source
  endpoint:
    path: /nginx-1.19.2.tar.gz
    method: GET
    data_selector: records
    params: {}
- name: containers
  endpoint:
    path: /containers
    method: GET
    data_selector: containers
    params: {}
- name: images
  endpoint:
    path: /images
    method: GET
    data_selector: images
    params: {}
- name: nginx
  endpoint:
    path: /download/nginx-1.19.2.tar.gz
    method: GET
    data_selector: records
    params: {}
- name: rmbyext
  endpoint:
    path: /zone
    method: ENTRYPOINT
    data_selector: script
    params: {}
- name: hello_world
  endpoint:
    path: /hello-world
    method: GET
    data_selector: message
- name: docker_image
  endpoint:
    path: /images
    method: GET
    data_selector: images
    params: {}
- name: docker_container
  endpoint:
    path: /containers
    method: GET
    data_selector: containers
    params: {}
- name: container
  endpoint:
    path: /containers
    method: GET
    data_selector: containers
    params: {}
- name: image
  endpoint:
    path: /images
    method: GET
    data_selector: images
    params: {}
- name: registry
  endpoint:
    path: /registries
    method: GET
    data_selector: registries
    params: {}
- name: nginx_source
  endpoint:
    path: nginx-1.19.2.tar.gz
    method: GET
    data_selector: records
- name: nginx
  endpoint:
    path: /nginx-1.19.2.tar.gz
    method: ADD
    data_selector: download
    params: {}
- name: containers
  endpoint:
    path: /containers
    method: GET
    data_selector: containers
- name: images
  endpoint:
    path: /images
    method: GET
    data_selector: images
- name: docker_image
  endpoint:
    path: /docker/image/build
    method: POST
    data_selector: image_id
    params: {}
- name: nginx
  endpoint:
    path: /
    method: GET
- name: hello_world
  endpoint:
    path: /hello-world
    method: GET
    data_selector: message
    params: {}
- name: hello-dock
  endpoint:
    path: /v1.13/containers/hello-dock
    method: GET
    data_selector: containers
    params: {}
- name: containers
  endpoint:
    path: /v1.41/containers/json
    method: GET
    data_selector: containers
    params: {}
- name: images
  endpoint:
    path: /v1.41/images/json
    method: GET
    data_selector: images
    params: {}
- name: container
  endpoint:
    path: /containers
    method: GET
    data_selector: containers
- name: nginx
  endpoint:
    path: /download/
    method: GET
    data_selector: records
- name: nginx
  endpoint:
    path: /download/nginx-1.19.2.tar.gz
    method: ADD
    data_selector: ''
    params: {}
- name: nginx
  endpoint:
    path: /download/nginx-1.19.2.tar.gz
    method: ADD
    data_selector: null
    params: {}
- name: rmbyext
  endpoint:
    path: /
    method: GET
    data_selector: records
    params: {}
- name: docker_image
  endpoint:
    path: /image/build
    method: POST
    data_selector: images
    params:
      tag: latest
- name: hello_world
  endpoint:
    path: /hello-world
    method: GET
    data_selector: message
    params: {}
- name: containers
  endpoint:
    path: /v1.41/containers/json
    method: GET
    data_selector: Containers
- name: images
  endpoint:
    path: /v1.41/images/json
    method: GET
    data_selector: Images
- name: containers
  endpoint:
    path: /v1.41/containers/json
    method: GET
    data_selector: containers
- name: images
  endpoint:
    path: /v1.41/images/json
    method: GET
    data_selector: images
- name: container_management
  endpoint:
    path: /docker/container
    method: POST
    data_selector: commands
    params:
      action: start
- name: container_creation
  endpoint:
    path: /docker/container/create
    method: POST
    data_selector: commands
    params:
      action: create
      image: fhsinchy/hello-dock
- name: container_removal
  endpoint:
    path: /docker/container/remove
    method: DELETE
    data_selector: commands
    params:
      action: remove
- name: nginx
  endpoint:
    path: /download/
    method: GET
    data_selector: records
- name: nginx
  endpoint:
    path: /download
    method: GET
    data_selector: archives
    params: {}
- name: docker_image
  endpoint:
    path: /docker/image/build
    method: POST
    data_selector: status
    params:
      tag: rmbyext
- name: containers
  endpoint:
    path: /containers
    method: GET
    data_selector: containers
    params: {}
- name: images
  endpoint:
    path: /images
    method: GET
    data_selector: images
    params: {}
- name: registries
  endpoint:
    path: /registries
    method: GET
    data_selector: registries
    params: {}
- name: docker_image
  endpoint:
    path: /docker/image
    method: POST
    data_selector: build
    params:
      tag: custom-nginx:packaged
- name: docker_container
  endpoint:
    path: /docker/container
    method: POST
    data_selector: run
    params:
      image_id: 3199372aa3fc
      port: 8080:80
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: nginx
  endpoint:
    path: /nginx-1.19.2.tar.gz
    method: ADD
    data_selector: records
- name: nginx_source
  endpoint:
    path: /nginx-1.19.2.tar.gz
    method: GET
    data_selector: source_code
    params: {}
- name: docker_image
  endpoint:
    path: /image/build
    method: POST
    data_selector: results
    params:
      tag: latest
- name: nginx_download
  endpoint:
    path: /nginx-1.19.2.tar.gz
    method: GET
    data_selector: file
    params: {}
- name: docker_image
  endpoint:
    path: /images
    method: POST
- name: rmbyext
  endpoint:
    path: /services/data/vXX.X/sobjects/rmbyext
    method: GET
    data_selector: records
    params: {}
- name: app
  endpoint:
    path: /home/node/app
    method: COPY
    data_selector: files
    params: {}
- name: containers
  endpoint:
    path: /v1.41/containers/json
    method: GET
    data_selector: Containers
    params: {}
- name: images
  endpoint:
    path: /v1.41/images/json
    method: GET
    data_selector: Images
    params: {}
- name: hello-dock
  endpoint:
    path: /hello-dock
    method: GET
    data_selector: records
- name: containers
  endpoint:
    path: /containers
    method: GET
    data_selector: containers
    params: {}
- name: images
  endpoint:
    path: /images
    method: GET
    data_selector: images
    params: {}
- name: nginx
  endpoint:
    path: /download/nginx-1.19.2.tar.gz
    method: GET
    data_selector: records
    params: {}
- name: nginx
  endpoint:
    path: /download/nginx-1.19.2.tar.gz
    method: GET
    data_selector: records
- name: rmbyext
  endpoint:
    path: /services/data/vXX.X/sobjects/rmbyext
    method: GET
- name: docker_image
  endpoint:
    path: /docker/image/build
    method: POST
    data_selector: image
    params:
      tag: latest
- name: hello_world
  endpoint:
    path: /hello-world
    method: GET
    data_selector: message
- name: containers
  endpoint:
    path: /containers
    method: GET
    data_selector: containers
    params: {}
- name: images
  endpoint:
    path: /images
    method: GET
    data_selector: images
    params: {}
- name: container
  endpoint:
    path: /containers
    method: GET
    data_selector: containers
    params: {}
- name: image
  endpoint:
    path: /images
    method: GET
    data_selector: images
    params: {}
- name: network
  endpoint:
    path: /networks
    method: GET
    data_selector: networks
    params: {}
- name: volume
  endpoint:
    path: /volumes
    method: GET
    data_selector: volumes
    params: {}
- name: container_management
  endpoint:
    path: /docker/container
    method: POST
    data_selector: commands
    params: {}
- name: image_management
  endpoint:
    path: /docker/image
    method: POST
    data_selector: commands
    params: {}
- name: containers
  endpoint:
    path: /containers
    method: GET
    data_selector: containers
- name: images
  endpoint:
    path: /images
    method: GET
    data_selector: images
- name: nginx
  endpoint:
    path: /download/nginx-1.19.2.tar.gz
    method: GET
    data_selector: records
    params: {}
- name: nginx
  endpoint:
    path: /download/nginx-1.19.2.tar.gz
    method: GET
    data_selector: records
    params: {}
- name: containers
  endpoint:
    path: /containers
    method: GET
    data_selector: containers
    params: {}
- name: images
  endpoint:
    path: /images
    method: GET
    data_selector: images
    params: {}
- name: volumes
  endpoint:
    path: /volumes
    method: GET
    data_selector: volumes
    params: {}
- name: container
  endpoint:
    path: /containers
    method: GET
    data_selector: containers
    params: {}
- name: image
  endpoint:
    path: /images
    method: GET
    data_selector: images
    params: {}
- name: containers
  endpoint:
    path: /containers
    method: GET
    data_selector: containers
- name: rmbyext
  endpoint:
    path: /rmbyext
    method: GET
    data_selector: records
    params: {}
- name: nginx
  endpoint:
    path: /download
    method: GET
- name: nginx
  endpoint:
    path: /download/nginx-1.19.2.tar.gz
    method: GET
    data_selector: records
    params: {}
- name: nginx
  endpoint:
    path: /nginx-1.19.2.tar.gz
    method: GET
    data_selector: download
    params: {}
- name: docker_image
  endpoint:
    path: /docker/image
    method: POST
    data_selector: image
    params: {}
- name: Dockerfile
  endpoint:
    path: /Dockerfile
    method: GET
    data_selector: records
- name: anonymous_volume
  endpoint:
    path: /home/node/app
    method: GET
    data_selector: records
    params: {}
- name: docker_image
  endpoint:
    path: /fhsinchy/hello-dock
    method: GET
    data_selector: images
    params: {}
- name: hello_world
  endpoint:
    path: /v1/containers/hello-world
    method: GET
    data_selector: message
- name: container
  endpoint:
    path: /containers
    method: GET
    data_selector: containers
    params: {}
- name: image
  endpoint:
    path: /images
    method: GET
    data_selector: images
    params: {}
- name: containers
  endpoint:
    path: /containers/json
    method: GET
    data_selector: Containers
    params: {}
- name: images
  endpoint:
    path: /images/json
    method: GET
    data_selector: Images
    params: {}
- name: networks
  endpoint:
    path: /networks
    method: GET
    data_selector: Networks
    params: {}
- name: volumes
  endpoint:
    path: /volumes
    method: GET
    data_selector: Volumes
    params: {}
- name: hello_dock_container
  endpoint:
    path: /docker/container/start/hello-dock-container
    method: POST
- name: hello_dock_container_2
  endpoint:
    path: /docker/container/start/hello-dock-container-2
    method: POST
- name: create_hello_dock_container
  endpoint:
    path: /docker/container/create
    method: POST
    params:
      image: fhsinchy/hello-dock
      publish: 8080:80
- name: remove_dangling_containers
  endpoint:
    path: /docker/container/rm
    method: DELETE
- name: remove_stopped_container
  endpoint:
    path: /docker/container/rm/{container_id}
    method: DELETE
- name: run_interactive_container
  endpoint:
    path: /docker/container/run/ubuntu
    method: POST
- name: docker_image
  endpoint:
    path: /docker_image
    method: GET
    data_selector: images
    params: {}
- name: nginx_source
  endpoint:
    path: /download/nginx-1.19.2.tar.gz
    method: GET
    data_selector: records
    params: {}
- name: docker_image
  endpoint:
    path: /services/data/vXX.X/sobjects/DockerImage
    method: GET
    data_selector: records
- name: docker_container
  endpoint:
    path: /services/data/vXX.X/sobjects/DockerContainer
    method: GET
    data_selector: records
- name: rmbyext
  endpoint:
    path: /services/data/vXX.X/sobjects/rmbyext
    method: GET
    data_selector: records
    params: {}
- name: container
  endpoint:
    path: /containers
    method: GET
    data_selector: containers
    params: {}
- name: image
  endpoint:
    path: /images
    method: GET
    data_selector: images
    params: {}
- name: registry
  endpoint:
    path: /registry
    method: GET
    data_selector: registries
    params: {}
- name: docker_installation
  endpoint:
    path: /install
    method: GET
    data_selector: installation_steps
- name: docker_basics
  endpoint:
    path: /basics
    method: GET
    data_selector: docker_commands
- name: nginx_installation
  endpoint:
    path: /download/nginx-1.19.2.tar.gz
    method: GET
    data_selector: records
- name: containers
  endpoint:
    path: /v1.41/containers
    method: GET
    data_selector: containers
    params: {}
- name: images
  endpoint:
    path: /v1.41/images
    method: GET
    data_selector: images
    params: {}
- name: nginx
  endpoint:
    path: /nginx-1.19.2.tar.gz
    method: ADD
- name: containers
  endpoint:
    path: /containers
    method: GET
    data_selector: containers
    params: {}
- name: rmbyext_image
  endpoint:
    path: /Dockerfile
    method: GET
- name: nginx
  endpoint:
    path: /nginx-1.19.2.tar.gz
    method: ADD
    data_selector: file
    params: {}
- name: networks
  endpoint:
    path: /docker/network
    method: GET
    data_selector: networks
    params: {}
- name: docker_image
  endpoint:
    path: /docker/image/rmbyext
    method: GET
    data_selector: image_data
- name: container
  endpoint:
    path: /containers
    method: GET
    data_selector: containers
    params: {}
- name: image
  endpoint:
    path: /images
    method: GET
    data_selector: images
    params: {}
- name: nginx_source
  endpoint:
    path: /nginx-1.19.2.tar.gz
    method: GET
    data_selector: records
    params: {}
- name: container
  endpoint:
    path: /v1.41/containers
    method: GET
    data_selector: containers
- name: image
  endpoint:
    path: /v1.41/images
    method: GET
    data_selector: images
- name: nginx
  endpoint:
    path: /nginx
    method: GET
- name: rmbyext
  endpoint:
    path: /services/data/vXX.X/sobjects/rmbyext
    method: GET
    data_selector: records
- name: container
  endpoint:
    path: /containers
    method: GET
    data_selector: containers
    params: {}
- name: image
  endpoint:
    path: /images
    method: GET
    data_selector: images
    params: {}
- name: user_defined_bridge
  endpoint:
    path: /network/create
    method: POST
    data_selector: network
    params: {}
- name: nginx
  endpoint:
    path: /download/nginx-1.19.2.tar.gz
    method: GET
    data_selector: records
- name: containers
  endpoint:
    path: /v1.41/containers/json
    method: GET
    data_selector: '[]'
- name: images
  endpoint:
    path: /v1.41/images/json
    method: GET
    data_selector: '[]'
- name: rmbyext
  endpoint:
    path: /services/data/vXX.X/sobjects/rmbyext
    method: GET
    data_selector: records
- name: containers
  endpoint:
    path: /containers
    method: GET
    data_selector: containers
    params: {}
- name: images
  endpoint:
    path: /images
    method: GET
    data_selector: images
    params: {}
- name: container
  endpoint:
    path: /containers
    method: GET
    data_selector: containers
    params: {}
- name: image
  endpoint:
    path: /images
    method: GET
    data_selector: images
    params: {}
- name: docker_image
  endpoint:
    path: /image/build
    method: POST
    data_selector: image_id
- name: nginx_source
  endpoint:
    path: /nginx-1.19.2.tar.gz
    method: GET
    data_selector: files
    params: {}
- name: docker_image
  endpoint:
    path: /images
    method: GET
    data_selector: images
- name: docker_container
  endpoint:
    path: /containers
    method: GET
    data_selector: containers
- name: docker_network
  endpoint:
    path: /networks
    method: GET
    data_selector: networks
- name: rmbyext
  endpoint:
    path: /install
    method: GET
    data_selector: install
- name: network_connect
  endpoint:
    path: /network/connect
    method: POST
    data_selector: response
    params: {}
- name: network_inspect
  endpoint:
    path: /network/inspect
    method: GET
    data_selector: containers
    params: {}
- name: docker_container
  endpoint:
    path: /docker/container
    method: GET
    data_selector: containers
    params: {}
- name: container
  endpoint:
    path: /containers
    method: GET
    data_selector: containers
    params: {}
- name: image
  endpoint:
    path: /images
    method: GET
    data_selector: images
    params: {}
- name: network
  endpoint:
    path: /networks
    method: GET
    data_selector: networks
    params: {}
- name: volume
  endpoint:
    path: /volumes
    method: GET
    data_selector: volumes
    params: {}
- name: container
  endpoint:
    path: /containers
    method: GET
    data_selector: containers
    params: {}
- name: image
  endpoint:
    path: /images
    method: GET
    data_selector: images
    params: {}
- name: registry
  endpoint:
    path: /registries
    method: GET
    data_selector: registries
    params: {}
- name: container
  endpoint:
    path: /container
    method: POST
    data_selector: containers
    params: {}
- name: container
  endpoint:
    path: /containers
    method: GET
    data_selector: containers
    params: {}
- name: image
  endpoint:
    path: /images
    method: GET
    data_selector: images
    params: {}
- name: docker_image
  endpoint:
    path: /image/build
    method: POST
    data_selector: image
    params: {}
- name: docker_container
  endpoint:
    path: /container/run
    method: POST
    data_selector: container
    params: {}
- name: nginx
  endpoint:
    path: /nginx-1.19.2.tar.gz
    method: GET
    data_selector: records
    params: {}
- name: rmbyext
  endpoint:
    path: /rmbyext
    method: GET
    data_selector: records
    params: {}
- name: Dockerfile
  endpoint:
    path: /Dockerfile
    method: POST
    data_selector: Dockerfile
    params: {}
- name: hello-dock
  endpoint:
    path: /hello-dock
    method: POST
    data_selector: response
    params: {}
- name: notes-db
  endpoint:
    path: /container/run
    method: POST
    data_selector: notes-db
    params:
      POSTGRES_DB: notesdb
      POSTGRES_PASSWORD: secret
      network: notes-api-network
- name: container
  endpoint:
    path: /containers
    method: GET
    data_selector: containers
- name: image
  endpoint:
    path: /images
    method: GET
    data_selector: images
- name: containers
  endpoint:
    path: /containers/json
    method: GET
    data_selector: Containers
- name: images
  endpoint:
    path: /images/json
    method: GET
    data_selector: Images
- name: networks
  endpoint:
    path: /networks
    method: GET
    data_selector: Networks
- name: volumes
  endpoint:
    path: /volumes
    method: GET
    data_selector: Volumes
- name: containers
  endpoint:
    path: /containers/json
    method: GET
    data_selector: Containers
- name: images
  endpoint:
    path: /images/json
    method: GET
    data_selector: Images
- name: containers
  endpoint:
    path: /containers
    method: GET
    data_selector: containers
    params: {}
- name: images
  endpoint:
    path: /images
    method: GET
    data_selector: images
    params: {}
- name: nginx
  endpoint:
    path: /download
    method: GET
    data_selector: records
    params: {}
- name: nginx_source
  endpoint:
    path: /nginx-1.19.2.tar.gz
    method: GET
    data_selector: records
    params: {}
- name: docker_image
  endpoint:
    path: /image/build
    method: POST
    data_selector: build
    params: {}
- name: docker_image_build
  endpoint:
    path: /image/build
    method: POST
    data_selector: build_result
- name: docker_image_push
  endpoint:
    path: /image/push
    method: POST
    data_selector: push_result
- name: user_defined_bridge
  endpoint:
    path: /network/create
    method: POST
    data_selector: networks
    params: {}
- name: database_server
  endpoint:
    path: /
    method: GET
    data_selector: data
    params:
      incremental: POSTGRES_DB
- name: hello-dock
  endpoint:
    path: /v1.13/containers
    method: GET
    data_selector: containers
    params: {}
- name: notes-db-data
  endpoint:
    path: /var/lib/postgresql/data
    method: docker volume create
    data_selector: notes-db-data
    params: {}
- name: containers
  endpoint:
    path: /containers
    method: GET
    data_selector: containers
    params: {}
- name: images
  endpoint:
    path: /images
    method: GET
    data_selector: images
    params: {}
- name: nginx
  endpoint:
    path: /nginx
    method: GET
- name: containers
  endpoint:
    path: /containers/json
    method: GET
    data_selector: Containers
    params: {}
- name: images
  endpoint:
    path: /images/json
    method: GET
    data_selector: Images
    params: {}
- name: docker_image
  endpoint:
    path: /image/build
    method: POST
    data_selector: image_id
    params: {}
- name: nginx
  endpoint:
    path: /nginx-1.19.2.tar.gz
    method: GET
- name: network_connect
  endpoint:
    path: /network/connect
    method: POST
    data_selector: results
- name: container_run
  endpoint:
    path: /container/run
    method: POST
    data_selector: results
- name: hello-dock
  endpoint:
    path: /hello-dock
    method: GET
    data_selector: records
- name: database_server
  endpoint:
    path: /v1/databases
    method: GET
    data_selector: data
    params:
      incremental: updated_at
- name: nginx_source
  endpoint:
    path: /download/nginx-1.19.2.tar.gz
    method: GET
- name: nginx
  endpoint:
    path: /download/nginx-1.19.2.tar.gz
    method: ADD
- name: docker_image
  endpoint:
    path: /image
    method: POST
    data_selector: image_data
    params: {}
- name: container
  endpoint:
    path: /containers
    method: GET
    data_selector: containers
    params: {}
- name: image
  endpoint:
    path: /images
    method: GET
    data_selector: images
    params: {}
- name: database_server
  endpoint:
    path: /container/run
    method: POST
    data_selector: notes-db
    params:
      network: notes-api-network
- name: nginx
  endpoint:
    path: /nginx
    method: GET
    data_selector: records
- name: containers
  endpoint:
    path: /containers
    method: GET
    data_selector: containers
    params: {}
- name: images
  endpoint:
    path: /images
    method: GET
    data_selector: images
    params: {}
- name: docker_hub
  endpoint:
    path: /docker_hub
    method: GET
    data_selector: docker_hub
    params: {}
- name: nginx
  endpoint:
    path: /download/nginx-1.19.2.tar.gz
    method: ADD
- name: docker_image
  endpoint:
    path: /image/build
    method: POST
    data_selector: image
    params: {}
- name: nginx_source
  endpoint:
    path: /nginx-1.19.2.tar.gz
    method: GET
    data_selector: records
    params: {}
- name: database
  endpoint:
    path: /run
    method: POST
    data_selector: container
    params:
      POSTGRES_PASSWORD: your_password
      POSTGRES_DB: your_database
- name: nginx_source
  endpoint:
    path: /nginx-1.19.2.tar.gz
    method: GET
    data_selector: records
- name: notes-api
  endpoint:
    path: /notes-api/api
    method: GET
- name: docker_image
  endpoint:
    path: /docker/image/build
    method: POST
    data_selector: results
    params:
      tag: latest
- name: database
  endpoint:
    path: /run_container
    method: POST
    data_selector: status
    params:
      POSTGRES_PASSWORD: your_password
      POSTGRES_DB: your_database
      port: '5432'
- name: db
  endpoint:
    path: /services/data/vXX.X/sobjects/db
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: api
  endpoint:
    path: /services/data/vXX.X/sobjects/api
    method: GET
    data_selector: records
    params: {}
- name: docker_image
  endpoint:
    path: /v2/images
    method: GET
    data_selector: images
    params: {}
- name: docker_container
  endpoint:
    path: /v2/containers
    method: GET
    data_selector: containers
    params: {}
- name: hello-dock
  endpoint:
    path: /hello-dock
    method: GET
    data_selector: records
- name: containers
  endpoint:
    path: /v1.41/containers
    method: GET
    data_selector: containers
    params: {}
- name: dockerfile
  endpoint:
    path: /Dockerfile
    method: ADD
    data_selector: instructions
- name: nginx
  endpoint:
    path: /nginx-1.19.2.tar.gz
    method: ADD
    data_selector: download
    params: {}
- name: container_start
  endpoint:
    path: /containers/{id}/start
    method: POST
    data_selector: ''
    params: {}
- name: container_restart
  endpoint:
    path: /containers/{id}/restart
    method: POST
    data_selector: ''
    params: {}
- name: container_create
  endpoint:
    path: /containers/create
    method: POST
    data_selector: ''
    params: {}
- name: container_rm
  endpoint:
    path: /containers/{id}
    method: DELETE
    data_selector: ''
    params: {}
- name: container_ls
  endpoint:
    path: /containers/json
    method: GET
    data_selector: ''
    params: {}
- name: Dockerfile
  endpoint:
    path: /Dockerfile
    method: GET
    data_selector: content
    params: {}
- name: postgres
  endpoint:
    path: /
    method: POST
    data_selector: container
    params:
      POSTGRES_PASSWORD: your_password
      POSTGRES_DB: your_database
- name: rmbyext
  endpoint:
    path: /services/data/vXX.X/sobjects/rmbyext
    method: GET
    data_selector: records
- name: db
  endpoint:
    path: /services/data/vXX.X/sobjects/db
    method: GET
    data_selector: records
    params:
      POSTGRES_DB: notesdb
      POSTGRES_PASSWORD: secret
- name: api
  endpoint:
    path: /services/data/vXX.X/sobjects/api
    method: GET
    data_selector: records
    params:
      DB_HOST: db
      DB_DATABASE: notesdb
      DB_PASSWORD: secret
- name: exec_command
  endpoint:
    path: /docker/container/exec
    method: POST
    data_selector: command
    params: {}
- name: container
  endpoint:
    path: /containers
    method: GET
    data_selector: containers
    params: {}
- name: image
  endpoint:
    path: /images
    method: GET
    data_selector: images
    params: {}
- name: containers
  endpoint:
    path: /containers
    method: GET
    data_selector: containers
- name: images
  endpoint:
    path: /images
    method: GET
    data_selector: images
- name: containers
  endpoint:
    path: /v1.41/containers
    method: GET
    data_selector: containers
- name: images
  endpoint:
    path: /v1.41/images
    method: GET
    data_selector: images
- name: registries
  endpoint:
    path: /v1.41/registries
    method: GET
    data_selector: registries
- name: nginx_source
  endpoint:
    path: /nginx-1.19.2.tar.gz
    method: GET
    data_selector: source_code
    params: {}
- name: hello-dock-container
  endpoint:
    path: /docker/container/start/hello-dock-container
    method: POST
- name: hello-dock-container-2
  endpoint:
    path: /docker/container/restart/hello-dock-container-2
    method: POST
- name: nginx
  endpoint:
    path: /download
    method: GET
    data_selector: records
    params: {}
- name: Dockerfile
  endpoint:
    path: /Dockerfile
    method: GET
- name: rmbyext
  endpoint:
    path: /services/data/vXX.X/sobjects/Rmbyext
    method: GET
    data_selector: records
    params: {}
- name: postgres_database
  endpoint:
    path: /
    method: GET
    data_selector: databases
    params:
      incremental: created_at
- name: db
  endpoint:
    path: /services/data/vXX.X/sobjects/db
    method: GET
    data_selector: records
    params:
      POSTGRES_DB: notesdb
      POSTGRES_PASSWORD: secret
- name: api
  endpoint:
    path: /services/data/vXX.X/sobjects/api
    method: GET
    data_selector: records
    params:
      DB_HOST: db
      DB_DATABASE: notesdb
      DB_PASSWORD: secret
- name: database
  endpoint:
    path: /
    method: POST
    data_selector: data
    params:
      environment_variables:
        POSTGRES_PASSWORD: your_password
        POSTGRES_DB: your_database
- name: notes-db
  endpoint:
    path: /var/lib/postgresql/data
    method: GET
- name: container
  endpoint:
    path: /containers
    method: GET
    data_selector: containers
    params: {}
- name: images
  endpoint:
    path: /images
    method: GET
    data_selector: images
    params: {}
- name: volumes
  endpoint:
    path: /volumes
    method: GET
    data_selector: volumes
    params: {}
- name: db
  endpoint:
    path: /var/lib/postgresql/data
    method: GET
    data_selector: records
    params:
      POSTGRES_DB: notesdb
      POSTGRES_PASSWORD: secret
- name: api
  endpoint:
    path: /home/node/app
    method: GET
    data_selector: records
    params:
      DB_HOST: db
      DB_DATABASE: notesdb
      DB_PASSWORD: secret
- name: container
  endpoint:
    path: /containers
    method: GET
    data_selector: containers
- name: nginx
  endpoint:
    path: /nginx
    method: GET
    data_selector: image
    params: {}
- name: container
  endpoint:
    path: /containers
    method: GET
    data_selector: containers
    params: {}
- name: image
  endpoint:
    path: /images
    method: GET
    data_selector: images
    params: {}
- name: docker_image
  endpoint:
    path: /image/build
    method: POST
    data_selector: image
- name: database
  endpoint:
    path: /run
    method: POST
    data_selector: data
    params:
      POSTGRES_PASSWORD: your_password
      POSTGRES_DB: your_database_name
- name: container_start
  endpoint:
    path: /container/start
    method: POST
    data_selector: response
    params: {}
- name: container_restart
  endpoint:
    path: /container/restart
    method: POST
    data_selector: response
    params: {}
- name: container_create
  endpoint:
    path: /container/create
    method: POST
    data_selector: response
    params: {}
- name: container_remove
  endpoint:
    path: /container/remove
    method: DELETE
    data_selector: response
    params: {}
- name: container_ls
  endpoint:
    path: /container/ls
    method: GET
    data_selector: response
    params: {}
- name: container_prune
  endpoint:
    path: /container/prune
    method: POST
    data_selector: response
    params: {}
- name: nginx
  endpoint:
    path: /download/nginx-1.19.2.tar.gz
    method: GET
    data_selector: records
    params: {}
- name: db
  endpoint:
    path: /services/data/v12.0/sobjects/Database
    method: GET
    data_selector: records
    params:
      POSTGRES_DB: notesdb
      POSTGRES_PASSWORD: secret
- name: api
  endpoint:
    path: /services/data/v12.0/sobjects/API
    method: GET
    data_selector: records
    params:
      DB_HOST: db
      DB_DATABASE: notesdb
      DB_PASSWORD: secret
- name: hello-dock
  endpoint:
    path: /fhsinchy/hello-dock
    method: GET
    data_selector: repository
    params: {}
- name: rmbyext
  endpoint:
    path: /fhsinchy/rmbyext
    method: GET
    data_selector: repository
    params: {}
- name: database_server
  endpoint:
    path: /run
    method: POST
    data_selector: status
    params:
      POSTGRES_PASSWORD: your_password
      POSTGRES_DB: your_database
- name: containers
  endpoint:
    path: /v1.41/containers
    method: GET
    data_selector: containers
    params: {}
- name: images
  endpoint:
    path: /v1.41/images
    method: GET
    data_selector: images
    params: {}
- name: registries
  endpoint:
    path: /v1.41/registries
    method: GET
    data_selector: registries
    params: {}
- name: notes
  endpoint:
    path: /notes
    method: GET
    data_selector: records
    params: {}
- name: containers
  endpoint:
    path: /containers
    method: GET
    data_selector: containers
    params: {}
- name: images
  endpoint:
    path: /images
    method: GET
    data_selector: images
    params: {}
- name: db
  endpoint:
    path: /var/lib/postgresql/data
    method: GET
    data_selector: environment
    params:
      POSTGRES_DB: notesdb
      POSTGRES_PASSWORD: secret
- name: api
  endpoint:
    path: /home/node/app
    method: GET
    data_selector: environment
    params:
      DB_HOST: db
      DB_DATABASE: notesdb
      DB_PASSWORD: secret
- name: nginx_source
  endpoint:
    path: /nginx-1.19.2.tar.gz
    method: GET
    data_selector: records
    params: {}
- name: container
  endpoint:
    path: /v1.41/containers
    method: GET
    data_selector: containers
    params: {}
- name: image
  endpoint:
    path: /v1.41/images
    method: GET
    data_selector: images
    params: {}
- name: rmbyext
  endpoint:
    path: /services/data/vXX.X/sobjects/rmbyext
    method: GET
- name: containers
  endpoint:
    path: /containers
    method: GET
    data_selector: containers
    params: {}
- name: images
  endpoint:
    path: /images
    method: GET
    data_selector: images
    params: {}
- name: database
  endpoint:
    path: /
    method: GET
    data_selector: databases
    params:
      incremental: created_at
- name: nginx
  endpoint:
    path: /${FILENAME}.${EXTENSION}
    method: ADD
    data_selector: ''
    params: {}
- name: hello-dock
  endpoint:
    path: /hello-dock
    method: GET
    data_selector: application
- name: postgres_server
  endpoint:
    path: /postgres
    method: POST
    data_selector: server
    params:
      POSTGRES_PASSWORD: your_password
      POSTGRES_DB: your_database
- name: notes
  endpoint:
    path: /notes
    method: GET
    data_selector: records
    params: {}
- name: hello-world
  endpoint:
    path: /v1.41/images/hello-world
    method: GET
    data_selector: message
    params: {}
- name: db
  endpoint:
    path: /var/lib/postgresql/data
    method: GET
    data_selector: volumes
    params:
      POSTGRES_DB: notesdb
      POSTGRES_PASSWORD: secret
- name: api
  endpoint:
    path: /home/node/app
    method: GET
    data_selector: volumes
    params:
      DB_HOST: db
      DB_DATABASE: notesdb
      DB_PASSWORD: secret
- name: container
  endpoint:
    path: /containers
    method: GET
    data_selector: containers
    params: {}
- name: image
  endpoint:
    path: /images
    method: GET
    data_selector: images
    params: {}
- name: container
  endpoint:
    path: /containers
    method: GET
    data_selector: containers
    params: {}
- name: image
  endpoint:
    path: /images
    method: GET
    data_selector: images
    params: {}
- name: nginx
  endpoint:
    path: /download/
    method: GET
    data_selector: records
- name: containers
  endpoint:
    path: /containers
    method: GET
    data_selector: containers
    params: {}
- name: images
  endpoint:
    path: /images
    method: GET
    data_selector: images
    params: {}
- name: nginx
  endpoint:
    path: /download/nginx-1.19.2.tar.gz
    method: GET
    data_selector: records
    params: {}
- name: nginx
  endpoint:
    path: /download/nginx-1.19.2.tar.gz
    method: GET
    data_selector: records
- name: notes-api
  endpoint:
    path: /
    method: GET
- name: hello-dock
  endpoint:
    path: /hello-dock
    method: GET
    data_selector: records
- name: db
  endpoint:
    image: postgres:12
    container_name: notes-db-dev
    environment:
      POSTGRES_DB: notesdb
      POSTGRES_PASSWORD: secret
- name: api
  endpoint:
    build:
      context: ./api
      dockerfile: Dockerfile.dev
    image: notes-api:dev
    container_name: notes-api-dev
    environment:
      DB_HOST: db
      DB_DATABASE: notesdb
      DB_PASSWORD: secret
    ports:
    - 3000:3000
- name: db
  environment:
    POSTGRES_DB: notesdb
    POSTGRES_PASSWORD: secret
- name: api
  environment:
    DB_HOST: db
    DB_PORT: 5432
    DB_USER: postgres
    DB_DATABASE: notesdb
    DB_PASSWORD: secret
- name: client
  networks:
  - fullstack-notes-application-network-frontend
- name: nginx
  networks:
  - fullstack-notes-application-network-frontend
  - fullstack-notes-application-network-backend
  ports:
  - '8080': 80
- name: hello_world
  endpoint:
    path: /hello-world
    method: GET
    data_selector: output
- name: hello-dock
  endpoint:
    path: /container/run
    method: POST
    data_selector: container_id
    params:
      publish: 8080:80
- name: container
  endpoint:
    path: /containers
    method: GET
    data_selector: containers
- name: image
  endpoint:
    path: /images
    method: GET
    data_selector: images
- name: container
  endpoint:
    path: /containers
    method: GET
    data_selector: containers
    params: {}
- name: nginx_image
  endpoint:
    path: /nginx-1.19.2.tar.gz
    method: GET
- name: nginx_image
  endpoint:
    path: /download/nginx-1.19.2.tar.gz
    method: GET
    data_selector: records
    params: {}
- name: Dockerfile
  endpoint:
    path: /Dockerfile
    method: GET
- name: dockerfile
  endpoint:
    path: /dockerfile
    method: POST
- name: database_server
  endpoint:
    path: /postgres
    method: POST
    data_selector: records
    params:
      POSTGRES_PASSWORD: your_password
      POSTGRES_DB: your_database
- name: database
  endpoint:
    path: /api/database
    method: POST
    data_selector: data
    params:
      POSTGRES_PASSWORD: your_password
      POSTGRES_DB: your_database_name
      port: 5432
- name: notes
  endpoint:
    path: /api/notes
    method: GET
    data_selector: records
- name: notes
  endpoint:
    path: /api/notes
    method: GET
    data_selector: records
- name: db
  endpoint:
    path: /var/lib/postgresql/data
    method: GET
    data_selector: POSTGRES_DB
    params:
      POSTGRES_PASSWORD: secret
- name: api
  endpoint:
    path: /home/node/app
    method: GET
    data_selector: DB_HOST
    params:
      DB_DATABASE: notesdb
      DB_PASSWORD: secret
- name: db
  endpoint:
    path: /var/lib/postgresql/data
    method: POST
    data_selector: records
- name: api
  endpoint:
    path: ./api
    method: GET
    data_selector: records
- name: client
  endpoint:
    path: ./client
    method: GET
    data_selector: records
- name: nginx
  endpoint:
    path: ./nginx
    method: GET
    data_selector: records
- name: container
  endpoint:
    path: /containers
    method: GET
    data_selector: containers
    params: {}
- name: image
  endpoint:
    path: /images
    method: GET
    data_selector: images
    params: {}
- name: network
  endpoint:
    path: /networks
    method: GET
    data_selector: networks
    params: {}
- name: volume
  endpoint:
    path: /volumes
    method: GET
    data_selector: volumes
    params: {}
- name: containers
  endpoint:
    path: /v1/containers
    method: GET
    data_selector: containers
    params: {}
- name: images
  endpoint:
    path: /v1/images
    method: GET
    data_selector: images
    params: {}
- name: registries
  endpoint:
    path: /v1/registries
    method: GET
    data_selector: registries
    params: {}
- name: container
  endpoint:
    path: /container
    method: POST
    data_selector: container_info
    params: {}
- name: nginx
  endpoint:
    path: /nginx-1.19.2
    method: GET
    data_selector: records
    params: {}
- name: nginx
  endpoint:
    path: /
    method: ADD
    data_selector: files
    params: {}
- name: nginx_source
  endpoint:
    path: /nginx-1.19.2.tar.gz
    method: GET
    data_selector: records
- name: rmbyext
  endpoint:
    path: /fhsinchy/rmbyext
    method: GET
- name: hello-dock
  endpoint:
    path: /fhsinchy/hello-dock
    method: GET
- name: postgres
  endpoint:
    path: /postgres
    method: POST
    data_selector: records
    params:
      POSTGRES_PASSWORD: your_password
      POSTGRES_DB: your_database
- name: rmbyext
  endpoint:
    path: /rmbyext
    method: GET
- name: notes
  endpoint:
    path: /api/notes
    method: GET
    data_selector: records
- name: users
  endpoint:
    path: /api/users
    method: GET
    data_selector: records
- name: db
  environment:
    POSTGRES_DB: notesdb
    POSTGRES_PASSWORD: secret
- name: api
  environment:
    DB_HOST: db
    DB_PORT: '5432'
    DB_USER: postgres
    DB_DATABASE: notesdb
    DB_PASSWORD: secret
- name: client
  networks:
  - fullstack-notes-application-network-frontend
- name: nginx
  networks:
  - fullstack-notes-application-network-frontend
  - fullstack-notes-application-network-backend
  ports:
  - 8080:80
- name: container
  endpoint:
    path: /containers
    method: GET
    data_selector: containers
- name: image
  endpoint:
    path: /images
    method: GET
    data_selector: images
- name: containers
  endpoint:
    path: /containers
    method: GET
    data_selector: containers
- name: images
  endpoint:
    path: /images
    method: GET
    data_selector: images
- name: nginx_source
  endpoint:
    path: /download/nginx-1.19.2.tar.gz
    method: GET
    data_selector: records
    params: {}
- name: dockerfile
  endpoint:
    path: /Dockerfile
    method: GET
    data_selector: records
- name: database_server
  endpoint:
    path: /database
    method: POST
    data_selector: data
    params:
      POSTGRES_PASSWORD: your_password
      POSTGRES_DB: your_database
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: notes-api
  endpoint:
    path: /notes-api/api
    method: GET
- name: os
  endpoint:
    path: /os
    method: GET
    data_selector: systemInfo
    params: {}
- name: file_operations
  endpoint:
    path: /api/file_operations
    method: POST
    data_selector: result
- name: directory_operations
  endpoint:
    path: /api/directory_operations
    method: GET
    data_selector: result
- name: db
  endpoint:
    path: /var/lib/postgresql/data
    method: GET
    data_selector: data
    params: {}
- name: api
  endpoint:
    path: /api
    method: GET
    data_selector: data
    params: {}
- name: client
  endpoint:
    path: /client
    method: GET
    data_selector: data
    params: {}
- name: nginx
  endpoint:
    path: /nginx
    method: GET
    data_selector: data
    params: {}
- name: Docker Installation
  endpoint:
    path: /install
    method: GET
    data_selector: installation_guide
    params: {}
- name: Hello World Example
  endpoint:
    path: /hello-world
    method: GET
    data_selector: example_output
    params: {}
- name: hello-dock
  endpoint:
    path: /container/run
    method: POST
    data_selector: output
    params: {}
- name: hello-world
  endpoint:
    path: /container/run
    method: POST
    data_selector: output
    params: {}
- name: create_directory
  endpoint:
    path: /mkdir
    method: POST
    data_selector: directory_creation
    params: {}
- name: write_file
  endpoint:
    path: /writeFile
    method: POST
    data_selector: file_write
    params: {}
- name: read_file
  endpoint:
    path: /readFile
    method: GET
    data_selector: file_read
    params: {}
- name: delete_file
  endpoint:
    path: /unlink
    method: DELETE
    data_selector: file_deletion
    params: {}
- name: rename_file
  endpoint:
    path: /rename
    method: PATCH
    data_selector: file_rename
    params: {}
- name: read_directory
  endpoint:
    path: /readdir
    method: GET
    data_selector: directory_contents
    params: {}
- name: container
  endpoint:
    path: /containers
    method: GET
    data_selector: containers
    params: {}
- name: image
  endpoint:
    path: /images
    method: GET
    data_selector: images
    params: {}
- name: root
  endpoint:
    path: /
    method: GET
    data_selector: response
    params: {}
- name: about
  endpoint:
    path: /about
    method: GET
    data_selector: response
    params: {}
- name: contact
  endpoint:
    path: /contact
    method: GET
    data_selector: response
    params: {}
- name: error
  endpoint:
    path: /error
    method: GET
    data_selector: response
    params: {}
- name: nginx_source
  endpoint:
    path: /${FILENAME}.${EXTENSION}
    method: GET
    data_selector: source_code
- name: home
  endpoint:
    path: /
    method: GET
    data_selector: homePage
    params: {}
- name: style
  endpoint:
    path: /style.css
    method: GET
    data_selector: homeStyles
    params: {}
- name: script
  endpoint:
    path: /browser-app.js
    method: GET
    data_selector: homeLogic
    params: {}
- name: logo
  endpoint:
    path: /logo.svg
    method: GET
    data_selector: homeLogo
    params: {}
- name: about
  endpoint:
    path: /about
    method: GET
    data_selector: aboutContent
    params: {}
- name: '404'
  endpoint:
    path: /404
    method: GET
    data_selector: notFoundContent
    params: {}
- name: Dockerfile
  endpoint:
    path: /Dockerfile
    method: POST
    data_selector: dockerfile
- name: todo
  endpoint:
    path: /api/todo
    method: GET
    data_selector: records
    params: {}
- name: postgresql
  endpoint:
    path: /_/
    method: GET
    data_selector: records
- name: todos
  endpoint:
    path: /api/todos
    method: POST
    data_selector: todos
    params: {}
- name: notes
  endpoint:
    path: /notes
    method: GET
    data_selector: records
    params: {}
- name: todo
  endpoint:
    path: /api/todo
    method: POST
    data_selector: message
    params: {}
- name: todo
  endpoint:
    path: /api/todo
    method: GET
    data_selector: data
    params: {}
- name: todo_by_id
  endpoint:
    path: /api/todo/{id:guid}
    method: GET
    data_selector: data
    params: {}
- name: todo
  endpoint:
    path: /
    method: POST
    data_selector: message
    params: {}
- name: todo
  endpoint:
    path: /{id}
    method: GET
    data_selector: data
    params: {}
- name: todo
  endpoint:
    path: /{id}
    method: PUT
    data_selector: message
    params: {}
- name: todo
  endpoint:
    path: /{id}
    method: DELETE
    data_selector: message
    params: {}
- name: todos
  endpoint:
    path: /
    method: GET
    data_selector: data
    params: {}
- name: todo
  endpoint:
    path: /todos
    method: POST
    data_selector: todo
    params: {}
- name: Single-File Components
  endpoint:
    path: /vue/single-file-components
    method: GET
    data_selector: components
    params: {}
- name: Vue CLI
  endpoint:
    path: /vue/cli
    method: GET
    data_selector: cli
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: learning_curve
  endpoint:
    path: /api/learning_curve
    method: GET
    data_selector: results
- name: community_support
  endpoint:
    path: /api/community_support
    method: GET
    data_selector: results
- name: project_requirements
  endpoint:
    path: /api/project_requirements
    method: GET
    data_selector: results
- name: resources_for_learning
  endpoint:
    path: /api/resources_for_learning
    method: GET
    data_selector: results
- name: hello_world
  endpoint:
    path: /
    method: GET
    data_selector: Hello World!
- name: path_operations
  endpoint:
    path: /path
    method: GET
    data_selector: methods
    params: {}
- name: form_submission
  endpoint:
    path: /submit-form
    method: POST
    data_selector: body
    params: {}
- name: mkdir
  endpoint:
    path: /fs/mkdir
    method: POST
    data_selector: result
    params: {}
- name: writeFile
  endpoint:
    path: /fs/writeFile
    method: POST
    data_selector: result
    params: {}
- name: readFile
  endpoint:
    path: /fs/readFile
    method: GET
    data_selector: result
    params: {}
- name: readdir
  endpoint:
    path: /fs/readdir
    method: GET
    data_selector: result
    params: {}
- name: rename
  endpoint:
    path: /fs/rename
    method: POST
    data_selector: result
    params: {}
- name: unlink
  endpoint:
    path: /fs/unlink
    method: DELETE
    data_selector: result
    params: {}
- name: home_page
  endpoint:
    path: /
    method: GET
- name: about_page
  endpoint:
    path: /about
    method: GET
- name: contact_page
  endpoint:
    path: /contact
    method: GET
- name: error_page
  endpoint:
    path: /error
    method: GET
- name: home
  endpoint:
    path: /
    method: GET
    data_selector: html
- name: style
  endpoint:
    path: /style.css
    method: GET
    data_selector: css
- name: logo
  endpoint:
    path: /logo.svg
    method: GET
    data_selector: image
- name: script
  endpoint:
    path: /browser-app.js
    method: GET
    data_selector: javascript
- name: about
  endpoint:
    path: /about
    method: GET
    data_selector: html
- name: not_found
  endpoint:
    path: /404
    method: GET
    data_selector: html
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: todo
  endpoint:
    path: /api/todo
    method: GET
    data_selector: records
    params: {}
- name: Todos
  endpoint:
    path: /api/todos
    method: GET
    data_selector: Todos
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: todos
  endpoint:
    path: /api/todo
    method: POST
    data_selector: data
- name: todos
  endpoint:
    path: /api/todo
    method: GET
    data_selector: data
- name: todo_by_id
  endpoint:
    path: /api/todo/{id:guid}
    method: GET
    data_selector: data
- name: todos
  endpoint:
    path: /
    method: GET
    data_selector: data
    params: {}
- name: todo
  endpoint:
    path: /{id:guid}
    method: GET
    data_selector: data
    params: {}
- name: create_todo
  endpoint:
    path: /
    method: POST
    data_selector: message
    params: {}
- name: update_todo
  endpoint:
    path: /{id:guid}
    method: PUT
    data_selector: message
    params: {}
- name: delete_todo
  endpoint:
    path: /{id:guid}
    method: DELETE
    data_selector: message
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: todos
  endpoint:
    path: /api/todos
    method: GET
    data_selector: todos
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: hello_world
  endpoint:
    path: /
    method: GET
    data_selector: body
    params: {}
- name: form_submission
  endpoint:
    path: /form
    method: POST
    data_selector: body
    params: {}
- name: submit_form
  endpoint:
    path: /submit-form
    method: POST
    data_selector: body
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: House
  endpoint:
    path: /class/House
    method: GET
    data_selector: attributes
    params: {}
- name: Ball
  endpoint:
    path: /class/Ball
    method: GET
    data_selector: attributes
    params: {}
- name: Poodle
  endpoint:
    path: /class/Poodle
    method: GET
    data_selector: attributes
    params: {}
- name: Truck
  endpoint:
    path: /class/Truck
    method: GET
    data_selector: attributes
    params: {}
- name: Mom
  endpoint:
    path: /class/Mom
    method: GET
    data_selector: attributes
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: Dog
  endpoint:
    path: /Dog
    method: GET
    data_selector: attributes
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: Dog
  endpoint:
    path: /Dog
    method: GET
    data_selector: attributes
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: tuple_methods
  endpoint:
    path: /tutorial/datastructures.html#more-on-lists
    method: GET
    data_selector: records
    params: {}
- name: dictionary_methods
  endpoint:
    path: /tutorial/datastructures.html#dictionary-methods
    method: GET
    data_selector: records
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: dog_instance
  endpoint:
    path: /dog/instance
    method: POST
    data_selector: instance_data
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: kingdom
  endpoint:
    path: /kingdom
    method: GET
    data_selector: kingdom
    params: {}
- name: species
  endpoint:
    path: /species
    method: GET
    data_selector: species
    params: {}
- name: centroids
  endpoint:
    path: /centroids
    method: GET
    data_selector: centroids
- name: labels
  endpoint:
    path: /labels
    method: GET
    data_selector: labels
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: clustering_techniques
  endpoint:
    path: /clustering/techniques
    method: GET
    data_selector: records
- name: clustered_data
  endpoint:
    path: /services/data/vXX.X/sobjects/ClusteredData
    method: GET
    data_selector: records
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: Elbow_Method
  endpoint:
    path: /Elbow_Method
    method: GET
    data_selector: inertia
    params: {}
- name: Dog
  endpoint:
    path: /Dog
    method: GET
    data_selector: attributes
    params: {}
- name: clustered_data
  endpoint:
    path: /services/data/vXX.X/clustering
    method: POST
    data_selector: results
- name: file_reading
  endpoint:
    path: /how-to-read-files-in-python
    method: GET
    data_selector: content
    params: {}
- name: file_appending
  endpoint:
    path: /how-to-append-to-a-file-in-python
    method: GET
    data_selector: content
    params: {}
- name: file_deletion
  endpoint:
    path: /how-to-delete-a-file-in-python
    method: GET
    data_selector: content
    params: {}
- name: import_statements
  endpoint:
    path: /import-statements-in-python
    method: GET
    data_selector: content
    params: {}
- name: cluster_data
  endpoint:
    path: /api/v1/clusters
    method: GET
    data_selector: data
    params:
      incremental: updated_at
- name: clustered_data
  endpoint:
    path: /services/data/vXX.X/sobjects/ClusteredData
    method: GET
    data_selector: records
- name: clustered_data
  endpoint:
    path: /services/data/vXX.X/sobjects/ClusteredData
    method: GET
    data_selector: records
- name: DBSCAN parameters
  endpoint:
    path: /dbscan/parameters
    method: GET
    data_selector: parameters
    params: {}
- name: Elbow_Method
  endpoint:
    path: /elbow_method
    method: GET
    data_selector: inertia
    params:
      K: 1,2,...,10
- name: Hierarchical_Clustering
  endpoint:
    path: /hierarchical_clustering
    method: GET
    data_selector: clusters
    params: {}
- name: clustered_data
  endpoint:
    path: /services/data/vXX.X/sobjects/ClusteredData
    method: POST
    data_selector: records
- name: DBSCAN_implementation
  endpoint:
    path: /dbscan/implementation
    method: POST
    data_selector: result
    params:
      eps: '0.3'
      min_samples: '5'
- name: synthetic_data
  endpoint:
    path: /generate/synthetic_data
    method: POST
    data_selector: data
    params:
      size: 100x2
- name: kmeans_clustering
  endpoint:
    path: /apply/kmeans
    method: POST
    data_selector: results
    params:
      K: 4
- name: hierarchical_clustering
  endpoint:
    path: /apply/hierarchical_clustering
    method: POST
    data_selector: results
    params:
      n_clusters: 7
      linkage: ward
- name: cluster_data
  endpoint:
    path: /api/v1/clustering
    method: POST
    data_selector: results
    params:
      K: 4
- name: programming_concepts
  endpoint:
    path: /programming/concepts
    method: GET
    data_selector: concepts
- name: programming_languages
  endpoint:
    path: /programming/languages
    method: GET
    data_selector: languages
- name: real_world_applications
  endpoint:
    path: /programming/applications
    method: GET
    data_selector: applications
- name: synthetic_data
  endpoint:
    path: /data/synthetic
    method: GET
    data_selector: records
- name: network_outreach
  endpoint:
    path: /network/outreach
    method: GET
    data_selector: records
- name: event_meeting
  endpoint:
    path: /events/meeting
    method: GET
    data_selector: records
- name: frontend_development
  endpoint:
    path: /frontend-development
    method: GET
    data_selector: topics
    params: {}
- name: backend_development
  endpoint:
    path: /backend-development
    method: GET
    data_selector: topics
    params: {}
- name: curriculum
  endpoint:
    path: /learn
    method: GET
    data_selector: curriculum
    params: {}
- name: interview_flow
  endpoint:
    path: /interview/flow
    method: GET
    data_selector: steps
    params: {}
- name: coding_assessment
  endpoint:
    path: /coding/assessment
    method: GET
    data_selector: assessment_details
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: frontend_development
  endpoint:
    path: /frontend/topics
    method: GET
    data_selector: topics
- name: backend_development
  endpoint:
    path: /backend/topics
    method: GET
    data_selector: topics
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: data
  endpoint:
    path: /data
    method: GET
    data_selector: message
    params: {}
- name: data
  endpoint:
    path: /api/data
    method: GET
    data_selector: message
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: data
  endpoint:
    path: /data
    method: GET
    data_selector: data
    params: {}
- name: data
  endpoint:
    path: /api/data
    method: GET
    data_selector: message
    params: {}
- name: data
  endpoint:
    path: /data
    method: GET
    data_selector: data
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: data
  endpoint:
    path: /data
    method: GET
    data_selector: records
- name: data
  endpoint:
    path: /api/data
    method: GET
    data_selector: message
    params: {}
- name: database
  endpoint:
    path: /database
    method: GET
    data_selector: records
- name: server
  endpoint:
    path: /server
    method: GET
    data_selector: records
- name: logging
  endpoint:
    path: /logging
    method: GET
    data_selector: records
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: data
  endpoint:
    path: /data
    method: GET
    data_selector: data
    params: {}
- name: data
  endpoint:
    path: /api/data
    method: GET
    data_selector: message
    params: {}
- name: Machine Learning in JavaScript
  endpoint:
    path: /ml/javascript
    method: GET
    data_selector: examples
- name: register
  endpoint:
    path: /api/auth/register
    method: POST
    data_selector: ''
    params: {}
- name: login
  endpoint:
    path: /api/auth/login
    method: POST
    data_selector: ''
    params: {}
- name: profile
  endpoint:
    path: /api/auth/profile
    method: GET
    data_selector: ''
    params: {}
- name: modal
  endpoint:
    path: /with-pattern/modal/Modal.jsx
    method: GET
    data_selector: children
    params: {}
- name: Accordion
  endpoint:
    path: /src/with-pattern/accordion/Accordion.jsx
    method: GET
    data_selector: children
    params: {}
- name: AccordionDemo
  endpoint:
    path: /src/with-pattern/accordion/AccordionDemo.jsx
    method: GET
    data_selector: children
    params: {}
- name: user_data
  endpoint:
    path: /user/data
    method: GET
    data_selector: data
    params: {}
- name: data_drift_report
  endpoint:
    path: /data_drift/report
    method: POST
    data_selector: report
    params: {}
- name: data_drift_metrics
  endpoint:
    path: /data_drift/metrics
    method: GET
    data_selector: metrics
    params: {}
- name: database
  endpoint:
    path: /database
    method: GET
    data_selector: settings
    params: {}
- name: server
  endpoint:
    path: /server
    method: GET
    data_selector: settings
    params: {}
- name: logging
  endpoint:
    path: /logging
    method: GET
    data_selector: settings
    params: {}
- name: train_dataset
  endpoint:
    path: /data/x_train_df.parquet
    method: GET
    data_selector: records
    params: {}
- name: validation_dataset
  endpoint:
    path: /data/x_val_df.parquet
    method: GET
    data_selector: records
    params: {}
- name: test_dataset
  endpoint:
    path: /data/x_test_df.parquet
    method: GET
    data_selector: records
    params: {}
- name: preprocessed_train_dataset
  endpoint:
    path: /data/x_train_processed.parquet
    method: GET
    data_selector: records
    params: {}
- name: preprocessed_validation_dataset
  endpoint:
    path: /data/x_val_processed.parquet
    method: GET
    data_selector: records
    params: {}
- name: preprocessed_test_dataset
  endpoint:
    path: /data/x_test_processed.parquet
    method: GET
    data_selector: records
    params: {}
- name: target_train_dataset
  endpoint:
    path: /data/y_train_df.parquet
    method: GET
    data_selector: records
    params: {}
- name: target_validation_dataset
  endpoint:
    path: /data/y_val_df.parquet
    method: GET
    data_selector: records
    params: {}
- name: target_test_dataset
  endpoint:
    path: /data/y_test_df.parquet
    method: GET
    data_selector: records
    params: {}
- name: feature_names
  endpoint:
    path: /preprocessors/feature_names.json
    method: GET
    data_selector: records
    params: {}
- name: model_artifact
  endpoint:
    path: /models/production/dfn_best.pth
    method: GET
    data_selector: records
    params: {}
- name: inference_results
  endpoint:
    path: /data/dfn_inference_results.parquet
    method: GET
    data_selector: records
    params: {}
- name: metrics
  endpoint:
    path: /metrics/dfn_val.json
    method: GET
    data_selector: records
    params: {}
- name: shap_mean_abs
  endpoint:
    path: /reports/dfn_shap_mean_abs.json
    method: GET
    data_selector: records
    params: {}
- name: shap_summary
  endpoint:
    path: /reports/dfn_shap_summary.json
    method: GET
    data_selector: records
    params: {}
- name: raw_shap_values
  endpoint:
    path: /reports/dfn_raw_shap_values.parquet
    method: GET
    data_selector: records
    params: {}
- name: metrics
  endpoint:
    path: /metrics/dfn_risk_fairness.json
    method: GET
    data_selector: metrics
    params: {}
- name: etl_pipeline
  endpoint:
    path: src/data_handling/etl_pipeline.py
    method: python
    data_selector: original_df.parquet
    params: {}
- name: data_drift_check
  endpoint:
    path: src/data_handling/data_drift_check.py
    method: python
    data_selector: data_drift_results.parquet
    params: {}
- name: etl_pipeline
  endpoint:
    path: /services/data/vXX.X/sobjects/etl_pipeline
    method: GET
    data_selector: records
- name: data_drift_check
  endpoint:
    path: /services/data/vXX.X/sobjects/data_drift_check
    method: GET
    data_selector: records
- name: preprocess
  endpoint:
    path: /services/data/vXX.X/sobjects/preprocess
    method: GET
    data_selector: records
- name: train_dataset
  endpoint:
    path: /data/x_train_df.parquet
    method: GET
    data_selector: records
- name: val_dataset
  endpoint:
    path: /data/x_val_df.parquet
    method: GET
    data_selector: records
- name: test_dataset
  endpoint:
    path: /data/x_test_df.parquet
    method: GET
    data_selector: records
- name: register
  endpoint:
    path: /api/auth/register
    method: POST
    data_selector: message
    params: {}
- name: login
  endpoint:
    path: /api/auth/login
    method: POST
    data_selector: token
    params: {}
- name: profile
  endpoint:
    path: /api/auth/profile
    method: GET
    data_selector: user
    params: {}
- name: assess_model_risk
  endpoint:
    path: /src/model/torch_model/assess_risk_and_fairness.py
    method: POST
    data_selector: metrics
    params:
      inference_file_path: data/dfn_inference_results_${params.stockcode}.parquet
      metrics_output_path: metrics/dfn_risk_fairness_${params.stockcode}.json
      sensitive_feature_col: ${tracking.sensitive_feature_col}
      stockcode: ${params.stockcode}
      privileged_group: ${tracking.privileged_group}
      mod_threshold: ${tracking.mod_threshold}
- name: modal
  endpoint:
    path: /with-pattern/modal/Modal
    method: GET
    data_selector: children
- name: Accordion
  endpoint:
    path: /src/with-pattern/accordion/Accordion.jsx
    method: GET
    data_selector: children
    params: {}
- name: AccordionDemo
  endpoint:
    path: /src/with-pattern/accordion/AccordionDemo.jsx
    method: GET
    data_selector: children
    params: {}
- name: data_drift_report
  endpoint:
    path: /api/v1/data_drift/report
    method: POST
    data_selector: report
    params: {}
- name: metrics_data_drift
  endpoint:
    path: /api/v1/data_drift/metrics
    method: GET
    data_selector: metrics
    params: {}
- name: data_drift_report
  endpoint:
    path: /reports/data_drift_report
    method: GET
    data_selector: reports
    params: {}
- name: data_drift_metrics
  endpoint:
    path: /metrics/data_drift
    method: GET
    data_selector: metrics
    params: {}
- name: data_drift_report
  endpoint:
    path: /data_drift/report
    method: POST
    data_selector: report
    params: {}
- name: data_drift_metrics
  endpoint:
    path: /data_drift/metrics
    method: GET
    data_selector: metrics
    params: {}
- name: train_data
  endpoint:
    path: /data/x_train_df.parquet
    method: GET
    data_selector: records
- name: val_data
  endpoint:
    path: /data/x_val_df.parquet
    method: GET
    data_selector: records
- name: test_data
  endpoint:
    path: /data/x_test_df.parquet
    method: GET
    data_selector: records
- name: y_train_data
  endpoint:
    path: /data/y_train_df.parquet
    method: GET
    data_selector: records
- name: y_val_data
  endpoint:
    path: /data/y_val_df.parquet
    method: GET
    data_selector: records
- name: y_test_data
  endpoint:
    path: /data/y_test_df.parquet
    method: GET
    data_selector: records
- name: assess_model_risk
  endpoint:
    path: /src/model/torch_model/assess_risk_and_fairness.py
    method: POST
    data_selector: metrics
    params:
      sensitive_feature_col: is_registered
      privileged_group: 1
      mod_threshold: 0.1
- name: x_train
  endpoint:
    path: data/x_train_df.parquet
    method: GET
    data_selector: ''
    params: {}
- name: x_val
  endpoint:
    path: data/x_val_df.parquet
    method: GET
    data_selector: ''
    params: {}
- name: x_test
  endpoint:
    path: data/x_test_df.parquet
    method: GET
    data_selector: ''
    params: {}
- name: y_train
  endpoint:
    path: data/y_train_df.parquet
    method: GET
    data_selector: ''
    params: {}
- name: y_val
  endpoint:
    path: data/y_val_df.parquet
    method: GET
    data_selector: ''
    params: {}
- name: y_test
  endpoint:
    path: data/y_test_df.parquet
    method: GET
    data_selector: ''
    params: {}
- name: feature_names
  endpoint:
    path: preprocessors/feature_names.json
    method: GET
    data_selector: ''
    params: {}
- name: preprocessor
  endpoint:
    path: preprocessors/column_transformer.pkl
    method: GET
    data_selector: ''
    params: {}
- name: dfn_best_model
  endpoint:
    path: models/production/dfn_best.pth
    method: GET
    data_selector: ''
    params: {}
- name: dfn_inference_results
  endpoint:
    path: data/dfn_inference_results.parquet
    method: GET
    data_selector: ''
    params: {}
- name: dfn_inf_metrics
  endpoint:
    path: metrics/dfn_inf.json
    method: GET
    data_selector: ''
    params: {}
- name: dfn_shap_mean_abs
  endpoint:
    path: reports/dfn_shap_mean_abs.json
    method: GET
    data_selector: ''
    params: {}
- name: dfn_raw_shap_values
  endpoint:
    path: reports/dfn_raw_shap_values.parquet
    method: GET
    data_selector: ''
    params: {}
- name: dfn_shap_summary
  endpoint:
    path: reports/dfn_shap_summary.json
    method: GET
    data_selector: ''
    params: {}
- name: x_train_processed
  endpoint:
    path: data/x_train_processed.parquet
- name: x_val_processed
  endpoint:
    path: data/x_val_processed.parquet
- name: x_test_processed
  endpoint:
    path: data/x_test_processed.parquet
- name: column_transformer
  endpoint:
    path: preprocessors/column_transformer.pkl
- name: feature_names
  endpoint:
    path: preprocessors/feature_names.json
- name: assess_model_risk
  endpoint:
    path: /src/model/torch_model/assess_risk_and_fairness.py
    method: POST
    data_selector: metrics
    params:
      sensitive_feature_col: is_registered
      privileged_group: 1
      mod_threshold: 0.1
- name: etl_pipeline
  endpoint:
    path: /src/data_handling/etl_pipeline.py
    method: POST
    data_selector: data
    params: {}
- name: data_drift_check
  endpoint:
    path: /src/data_handling/report_data_drift.py
    method: POST
    data_selector: data
    params: {}
- name: preprocess
  endpoint:
    path: /src/data_handling/preprocess.py
    method: POST
    data_selector: data
    params: {}
- name: etl_pipeline
  endpoint:
    path: src/data_handling/etl_pipeline.py
    method: python
    data_selector: outputs
    params: {}
- name: data_drift_check
  endpoint:
    path: src/data_handling/data_drift_check.py
    method: python
    data_selector: outputs
    params: {}
- name: tune_primary_model
  endpoint:
    path: src/model/torch_model/main.py
    method: python
    data_selector: tune_and_train
    params:
      n_trials: 100
      num_epochs: 3000
      should_local_save: false
      grid: false
- name: etl_pipeline
  endpoint:
    path: /services/data/vXX.X/sobjects/ETLPipeline
    method: GET
    data_selector: records
- name: data_drift_check
  endpoint:
    path: /services/data/vXX.X/sobjects/DataDriftCheck
    method: GET
    data_selector: records
- name: preprocess
  endpoint:
    path: /services/data/vXX.X/sobjects/Preprocess
    method: GET
    data_selector: records
- name: etl_pipeline
  endpoint:
    path: /src/data_handling/etl_pipeline.py
    method: Python
    data_selector: outputs
    params: {}
- name: data_drift_check
  endpoint:
    path: /src/data_handling/report_data_drift.py
    method: Python
    data_selector: outputs
    params: {}
- name: preprocess
  endpoint:
    path: /src/data_handling/preprocess.py
    method: Python
    data_selector: outputs
    params: {}
- name: train_dataset
  endpoint:
    path: /data/x_train_df.parquet
    method: GET
    data_selector: records
- name: val_dataset
  endpoint:
    path: /data/x_val_df.parquet
    method: GET
    data_selector: records
- name: test_dataset
  endpoint:
    path: /data/x_test_df.parquet
    method: GET
    data_selector: records
- name: train_target
  endpoint:
    path: /data/y_train_df.parquet
    method: GET
    data_selector: records
- name: val_target
  endpoint:
    path: /data/y_val_df.parquet
    method: GET
    data_selector: records
- name: test_target
  endpoint:
    path: /data/y_test_df.parquet
    method: GET
    data_selector: records
- name: inference_results
  endpoint:
    path: /data/dfn_inference_results_${params.stockcode}.parquet
    method: GET
    data_selector: results
    params: {}
- name: validation_metrics
  endpoint:
    path: /metrics/dfn_val_${params.stockcode}.json
    method: GET
    data_selector: metrics
    params: {}
- name: shap_mean_abs
  endpoint:
    path: /reports/dfn_shap_mean_abs_${params.stockcode}.json
    method: GET
    data_selector: mean_abs_shap
    params: {}
- name: shap_summary
  endpoint:
    path: /reports/dfn_shap_summary_${params.stockcode}.json
    method: GET
    data_selector: summary
    params: {}
- name: shap_raw_values
  endpoint:
    path: /reports/dfn_raw_shap_values_${params.stockcode}.parquet
    method: GET
    data_selector: raw_shap
    params: {}
- name: data_drift_report
  endpoint:
    path: /data_drift_report
    method: POST
    data_selector: metrics
    params:
      stockcode: <STOCKCODE OF CHOICE>
- name: metrics
  endpoint:
    path: /metrics/dfn_risk_fairness.json
    method: GET
    data_selector: metrics
    params: {}
- name: etl_pipeline
  endpoint:
    path: /src/data_handling/etl_pipeline.py
    method: GET
    data_selector: records
    params: {}
- name: data_drift_check
  endpoint:
    path: /src/data_handling/report_data_drift.py
    method: GET
    data_selector: records
    params: {}
- name: preprocess
  endpoint:
    path: /src/data_handling/preprocess.py
    method: GET
    data_selector: records
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: etl_pipeline
  endpoint:
    path: /services/data/vXX.X/sobjects/etl_pipeline
    method: POST
    data_selector: records
    params: {}
- name: data_drift_check
  endpoint:
    path: /services/data/vXX.X/sobjects/data_drift_check
    method: POST
    data_selector: records
    params: {}
- name: preprocess
  endpoint:
    path: /services/data/vXX.X/sobjects/preprocess
    method: POST
    data_selector: records
    params: {}
- name: assess_model_risk
  endpoint:
    path: src/model/torch_model/assess_risk_and_fairness.py
    method: POST
    data_selector: metrics
    params:
      sensitive_feature_col: is_registered
      privileged_group: 1
      mod_threshold: 0.1
- name: x_train_processed
  endpoint:
    path: data/x_train_processed.parquet
- name: x_val_processed
  endpoint:
    path: data/x_val_processed.parquet
- name: x_test_processed
  endpoint:
    path: data/x_test_processed.parquet
- name: column_transformer
  endpoint:
    path: preprocessors/column_transformer.pkl
- name: feature_names
  endpoint:
    path: preprocessors/feature_names.json
- name: train_data
  endpoint:
    path: data/x_train_df.parquet
    method: GET
    data_selector: records
    params: {}
- name: val_data
  endpoint:
    path: data/x_val_df.parquet
    method: GET
    data_selector: records
    params: {}
- name: test_data
  endpoint:
    path: data/x_test_df.parquet
    method: GET
    data_selector: records
    params: {}
- name: y_train_data
  endpoint:
    path: data/y_train_df.parquet
    method: GET
    data_selector: records
    params: {}
- name: y_val_data
  endpoint:
    path: data/y_val_df.parquet
    method: GET
    data_selector: records
    params: {}
- name: y_test_data
  endpoint:
    path: data/y_test_df.parquet
    method: GET
    data_selector: records
    params: {}
- name: inference_primary_model
  endpoint:
    path: /src/model/torch_model/inference.py
    method: GET
    data_selector: metrics
    params: {}
- name: etl_pipeline
  endpoint:
    path: /src/data_handling/etl_pipeline.py
    method: GET
    data_selector: records
- name: data_drift_check
  endpoint:
    path: /src/data_handling/report_data_drift.py
    method: GET
    data_selector: records
- name: preprocess
  endpoint:
    path: /src/data_handling/preprocess.py
    method: GET
    data_selector: records
- name: x_train
  endpoint:
    path: data/x_train_df.parquet
    method: GET
    data_selector: records
- name: x_val
  endpoint:
    path: data/x_val_df.parquet
    method: GET
    data_selector: records
- name: x_test
  endpoint:
    path: data/x_test_df.parquet
    method: GET
    data_selector: records
- name: y_train
  endpoint:
    path: data/y_train_df.parquet
    method: GET
    data_selector: records
- name: y_val
  endpoint:
    path: data/y_val_df.parquet
    method: GET
    data_selector: records
- name: y_test
  endpoint:
    path: data/y_test_df.parquet
    method: GET
    data_selector: records
- name: x_train_processed
  endpoint:
    path: data/x_train_processed.parquet
    method: GET
    data_selector: records
- name: x_val_processed
  endpoint:
    path: data/x_val_processed.parquet
    method: GET
    data_selector: records
- name: x_test_processed
  endpoint:
    path: data/x_test_processed.parquet
    method: GET
    data_selector: records
- name: feature_names
  endpoint:
    path: preprocessors/feature_names.json
    method: GET
    data_selector: records
- name: preprocessor
  endpoint:
    path: preprocessors/column_transformer.pkl
    method: GET
    data_selector: records
- name: data_summary_metrics
  endpoint:
    path: metrics/data.json
    method: GET
    data_selector: records
- name: training_data
  endpoint:
    path: /data/x_train_df.parquet
    method: GET
    data_selector: records
- name: validation_data
  endpoint:
    path: /data/x_val_df.parquet
    method: GET
    data_selector: records
- name: test_data
  endpoint:
    path: /data/x_test_df.parquet
    method: GET
    data_selector: records
- name: params
  endpoint:
    path: params.yaml
    method: GET
    data_selector: params
    params: {}
- name: assess_model_risk
  endpoint:
    path: src/model/torch_model/assess_risk_and_fairness.py
    method: python
    data_selector: metrics
    params:
      inference_file_path: data/dfn_inference_results_${params.stockcode}.parquet
      metrics_output_path: metrics/dfn_risk_fairness_${params.stockcode}.json
      sensitive_feature_col: ${tracking.sensitive_feature_col}
      stockcode: ${params.stockcode}
      privileged_group: ${tracking.privileged_group}
      mod_threshold: ${tracking.mod_threshold}
- name: etl_pipeline
  endpoint:
    path: /src/data_handling/etl_pipeline.py
    method: POST
    data_selector: data
    params: {}
- name: data_drift_check
  endpoint:
    path: /src/data_handling/report_data_drift.py
    method: POST
    data_selector: data
    params: {}
- name: preprocess
  endpoint:
    path: /src/data_handling/preprocess.py
    method: POST
    data_selector: data
    params: {}
- name: tracking_metrics
  endpoint:
    path: /path/to/tracking/metrics
    method: GET
    data_selector: metrics
    params: {}
- name: inference_results
  endpoint:
    path: /data/dfn_inference_results_${params.stockcode}.parquet
    method: GET
    data_selector: records
    params: {}
- name: validation_metrics
  endpoint:
    path: /metrics/dfn_val_${params.stockcode}.json
    method: GET
    data_selector: records
    params: {}
- name: shap_mean_abs
  endpoint:
    path: /reports/dfn_shap_mean_abs_${params.stockcode}.json
    method: GET
    data_selector: records
    params: {}
- name: shap_summary
  endpoint:
    path: /reports/dfn_shap_summary_${params.stockcode}.json
    method: GET
    data_selector: records
    params: {}
- name: shap_raw_values
  endpoint:
    path: /reports/dfn_raw_shap_values_${params.stockcode}.parquet
    method: GET
    data_selector: records
    params: {}
- name: train_dataset
  endpoint:
    path: /data/x_train_df.parquet
    method: GET
    data_selector: records
- name: val_dataset
  endpoint:
    path: /data/x_val_df.parquet
    method: GET
    data_selector: records
- name: test_dataset
  endpoint:
    path: /data/x_test_df.parquet
    method: GET
    data_selector: records
- name: train_target
  endpoint:
    path: /data/y_train_df.parquet
    method: GET
    data_selector: records
- name: val_target
  endpoint:
    path: /data/y_val_df.parquet
    method: GET
    data_selector: records
- name: test_target
  endpoint:
    path: /data/y_test_df.parquet
    method: GET
    data_selector: records
- name: metrics
  endpoint:
    path: metrics/dfn_risk_fairness_${params.stockcode}.json
    method: GET
    data_selector: metrics
    params: {}
- name: etl_pipeline
  endpoint:
    path: /services/data/vXX.X/sobjects/etl_pipeline
    method: GET
    data_selector: records
- name: data_drift_check
  endpoint:
    path: /services/data/vXX.X/sobjects/data_drift_check
    method: GET
    data_selector: records
- name: preprocess
  endpoint:
    path: /services/data/vXX.X/sobjects/preprocess
    method: GET
    data_selector: records
- name: etl_pipeline
  endpoint:
    path: /src/data_handling/etl_pipeline.py
    method: POST
    data_selector: output
    params: {}
- name: data_drift_check
  endpoint:
    path: /src/data_handling/report_data_drift.py
    method: POST
    data_selector: output
    params: {}
- name: preprocess
  endpoint:
    path: /src/data_handling/preprocess.py
    method: POST
    data_selector: output
    params: {}
- name: train_dataset
  endpoint:
    path: /data/x_train_df.parquet
    method: GET
    data_selector: records
- name: validation_dataset
  endpoint:
    path: /data/x_val_df.parquet
    method: GET
    data_selector: records
- name: test_dataset
  endpoint:
    path: /data/x_test_df.parquet
    method: GET
    data_selector: records
- name: target_train_dataset
  endpoint:
    path: /data/y_train_df.parquet
    method: GET
    data_selector: records
- name: target_validation_dataset
  endpoint:
    path: /data/y_val_df.parquet
    method: GET
    data_selector: records
- name: target_test_dataset
  endpoint:
    path: /data/y_test_df.parquet
    method: GET
    data_selector: records
- name: preprocessor
  endpoint:
    path: /preprocessors/column_transformer.pkl
    method: GET
    data_selector: records
- name: feature_names
  endpoint:
    path: /preprocessors/feature_names.json
    method: GET
    data_selector: records
- name: model_artifact
  endpoint:
    path: /models/production/dfn_best.pth
    method: GET
    data_selector: records
- name: validation_metrics
  endpoint:
    path: /metrics/dfn_val.json
    method: GET
    data_selector: records
- name: x_train_df
  endpoint:
    path: data/x_train_df.parquet
    method: GET
    data_selector: data
    params: {}
- name: x_val_df
  endpoint:
    path: data/x_val_df.parquet
    method: GET
    data_selector: data
    params: {}
- name: x_test_df
  endpoint:
    path: data/x_test_df.parquet
    method: GET
    data_selector: data
    params: {}
- name: y_train_df
  endpoint:
    path: data/y_train_df.parquet
    method: GET
    data_selector: data
    params: {}
- name: y_val_df
  endpoint:
    path: data/y_val_df.parquet
    method: GET
    data_selector: data
    params: {}
- name: y_test_df
  endpoint:
    path: data/y_test_df.parquet
    method: GET
    data_selector: data
    params: {}
- name: dfn_best_model
  endpoint:
    path: models/production/dfn_best_${params.stockcode}.pth
    method: GET
    data_selector: data
    params: {}
- name: dfn_inf_metrics
  endpoint:
    path: metrics/dfn_inf_${params.stockcode}.json
    method: GET
    data_selector: data
    params: {}
- name: dfn_shap_mean_abs
  endpoint:
    path: reports/dfn_shap_mean_abs_${params.stockcode}.json
    method: GET
    data_selector: data
    params: {}
- name: dfn_raw_shap_values
  endpoint:
    path: reports/dfn_raw_shap_values_${params.stockcode}.parquet
    method: GET
    data_selector: data
    params: {}
- name: inference_primary_model
  endpoint:
    path: python/src/model/torch_model/inference.py
    method: cmd
    data_selector: metrics
    params:
      params:
      - params.stockcode
      - tracking.sensitive_feature_col
      - tracking.privileged_group
- name: assess_model_risk
  endpoint:
    path: /src/model/torch_model/assess_risk_and_fairness.py
    method: POST
    data_selector: metrics
    params:
      sensitive_feature_col: is_registered
      privileged_group: 1
      mod_threshold: 0.1
- name: inference_results
  endpoint:
    path: /inference/results
    method: POST
    data_selector: metrics
    params: {}
- name: etl_pipeline
  endpoint:
    path: /src/data_handling/etl_pipeline.py
    method: GET
    data_selector: records
    params: {}
- name: data_drift_check
  endpoint:
    path: /src/data_handling/report_data_drift.py
    method: GET
    data_selector: records
    params: {}
- name: preprocess
  endpoint:
    path: /src/data_handling/preprocess.py
    method: GET
    data_selector: records
    params: {}
- name: inference_results
  endpoint:
    path: /data/dfn_inference_results_${params.stockcode}.parquet
    method: GET
    data_selector: results
- name: validation_metrics
  endpoint:
    path: /metrics/dfn_val_${params.stockcode}.json
    method: GET
    data_selector: metrics
- name: assess_model_risk
  endpoint:
    path: src/model/torch_model/assess_risk_and_fairness.py
    method: GET
    data_selector: ''
    params: {}
- name: etl_pipeline
  endpoint:
    path: /src/data_handling/etl_pipeline.py
    method: GET
    data_selector: records
- name: data_drift_check
  endpoint:
    path: /src/data_handling/report_data_drift.py
    method: GET
    data_selector: records
- name: preprocess
  endpoint:
    path: /src/data_handling/preprocess.py
    method: GET
    data_selector: records
- name: x_train
  endpoint:
    path: data/x_train_df.parquet
    method: GET
    data_selector: records
    params: {}
- name: x_val
  endpoint:
    path: data/x_val_df.parquet
    method: GET
    data_selector: records
    params: {}
- name: x_test
  endpoint:
    path: data/x_test_df.parquet
    method: GET
    data_selector: records
    params: {}
- name: y_train
  endpoint:
    path: data/y_train_df.parquet
    method: GET
    data_selector: records
    params: {}
- name: y_val
  endpoint:
    path: data/y_val_df.parquet
    method: GET
    data_selector: records
    params: {}
- name: y_test
  endpoint:
    path: data/y_test_df.parquet
    method: GET
    data_selector: records
    params: {}
- name: feature_names
  endpoint:
    path: preprocessors/feature_names.json
    method: GET
    data_selector: records
    params: {}
- name: model_metrics
  endpoint:
    path: metrics/dfn_val.json
    method: GET
    data_selector: records
    params: {}
- name: shap_mean_abs
  endpoint:
    path: reports/dfn_shap_mean_abs.json
    method: GET
    data_selector: records
    params: {}
- name: shap_summary
  endpoint:
    path: reports/dfn_shap_summary.json
    method: GET
    data_selector: records
    params: {}
- name: shap_raw
  endpoint:
    path: reports/dfn_raw_shap_values.parquet
    method: GET
    data_selector: records
    params: {}
- name: assess_model_risk
  endpoint:
    path: /assess_model_risk
    method: POST
    data_selector: metrics
    params:
      sensitive_feature_col: is_registered
      privileged_group: 1
      mod_threshold: 0.1
- name: tracking_metrics
  endpoint:
    path: /src/model/torch_model/assess_risk_and_fairness.py
    method: POST
    data_selector: metrics
    params:
      sensitive_feature_col: is_registered
      privileged_group: 1
      mod_threshold: 0.1
- name: x_train
  endpoint:
    path: data/x_train_df.parquet
    method: GET
    data_selector: ''
    params: {}
- name: x_val
  endpoint:
    path: data/x_val_df.parquet
    method: GET
    data_selector: ''
    params: {}
- name: x_test
  endpoint:
    path: data/x_test_df.parquet
    method: GET
    data_selector: ''
    params: {}
- name: y_train
  endpoint:
    path: data/y_train_df.parquet
    method: GET
    data_selector: ''
    params: {}
- name: y_val
  endpoint:
    path: data/y_val_df.parquet
    method: GET
    data_selector: ''
    params: {}
- name: y_test
  endpoint:
    path: data/y_test_df.parquet
    method: GET
    data_selector: ''
    params: {}
- name: x_train_processed
  endpoint:
    path: data/x_train_processed.parquet
    method: GET
    data_selector: ''
    params: {}
- name: x_val_processed
  endpoint:
    path: data/x_val_processed.parquet
    method: GET
    data_selector: ''
    params: {}
- name: x_test_processed
  endpoint:
    path: data/x_test_processed.parquet
    method: GET
    data_selector: ''
    params: {}
- name: feature_names
  endpoint:
    path: preprocessors/feature_names.json
    method: GET
    data_selector: ''
    params: {}
- name: preprocessor
  endpoint:
    path: preprocessors/column_transformer.pkl
    method: GET
    data_selector: ''
    params: {}
- name: data_drift_report
  endpoint:
    path: /data/drift/report
    method: GET
    data_selector: report
    params: {}
- name: data_drift_metrics
  endpoint:
    path: /data/drift/metrics
    method: GET
    data_selector: metrics
    params: {}
- name: assess_model_risk
  endpoint:
    path: /src/model/torch_model/assess_risk_and_fairness.py
    method: POST
    data_selector: metrics
    params:
      tracking.sensitive_feature_col: is_registered
      tracking.privileged_group: 1
      tracking.mod_threshold: 0.1
- name: etl_pipeline
  endpoint:
    path: /services/data/vXX.X/sobjects/ETLPipeline
    method: GET
    data_selector: records
- name: data_drift_check
  endpoint:
    path: /services/data/vXX.X/sobjects/DataDriftCheck
    method: GET
    data_selector: records
- name: preprocess
  endpoint:
    path: /services/data/vXX.X/sobjects/Preprocess
    method: GET
    data_selector: records
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: assess_model_risk
  endpoint:
    path: /src/model/torch_model/assess_risk_and_fairness.py
    method: GET
    data_selector: metrics
    params:
      sensitive_feature_col: is_registered
      privileged_group: 1
      mod_threshold: 0.1
- name: train_datasets
  endpoint:
    path: /data/x_train_df.parquet
    method: GET
- name: val_datasets
  endpoint:
    path: /data/x_val_df.parquet
    method: GET
- name: test_datasets
  endpoint:
    path: /data/x_test_df.parquet
    method: GET
- name: preprocessed_train_datasets
  endpoint:
    path: /data/x_train_processed.parquet
    method: GET
- name: preprocessed_val_datasets
  endpoint:
    path: /data/x_val_processed.parquet
    method: GET
- name: preprocessed_test_datasets
  endpoint:
    path: /data/x_test_processed.parquet
    method: GET
- name: target_variables_train
  endpoint:
    path: /data/y_train_df.parquet
    method: GET
- name: target_variables_val
  endpoint:
    path: /data/y_val_df.parquet
    method: GET
- name: target_variables_test
  endpoint:
    path: /data/y_test_df.parquet
    method: GET
- name: feature_names
  endpoint:
    path: /preprocessors/feature_names.json
    method: GET
- name: model_artifacts
  endpoint:
    path: /models/production/dfn_best.pth
    method: GET
- name: inference_results
  endpoint:
    path: /data/dfn_inference_results.parquet
    method: GET
- name: etl_pipeline
  endpoint:
    path: /src/data_handling/etl_pipeline.py
    method: POST
    data_selector: data
    params: {}
- name: data_drift_check
  endpoint:
    path: /src/data_handling/report_data_drift.py
    method: POST
    data_selector: data
    params: {}
- name: preprocess
  endpoint:
    path: /src/data_handling/preprocess.py
    method: POST
    data_selector: data
    params: {}
- name: assess_model_risk
  endpoint:
    path: /src/model/torch_model/assess_risk_and_fairness.py
    method: GET
    data_selector: metrics
    params:
      sensitive_feature_col: is_registered
      privileged_group: 1
      mod_threshold: 0.1
- name: train_validation_test_datasets
  endpoint:
    path: /data/datasets
    method: GET
    data_selector: datasets
    params: {}
- name: model_metrics
  endpoint:
    path: /metrics
    method: GET
    data_selector: metrics
    params: {}
- name: shap_values
  endpoint:
    path: /shap/values
    method: GET
    data_selector: shap_values
    params: {}
- name: metrics
  endpoint:
    path: /metrics/dfn_risk_fairness.json
    method: GET
    data_selector: metrics
- name: etl_pipeline
  endpoint:
    path: /services/data/vXX.X/sobjects/etl_pipeline
    method: GET
    data_selector: records
- name: data_drift_check
  endpoint:
    path: /services/data/vXX.X/sobjects/data_drift_check
    method: GET
    data_selector: records
- name: preprocess
  endpoint:
    path: /services/data/vXX.X/sobjects/preprocess
    method: GET
    data_selector: records
- name: metrics
  endpoint:
    path: /calculate_fairness_metrics
    method: POST
    data_selector: metrics
    params:
      sensitive_feature_col: sensitive_feature_col
      label_col: y_true
      prediction_col: y_pred
      privileged_group: privileged_group
      mod_threshold: mod_threshold
- name: etl_pipeline
  endpoint:
    path: /src/data_handling/etl_pipeline.py
    method: GET
    data_selector: records
    params: {}
- name: data_drift_check
  endpoint:
    path: /src/data_handling/report_data_drift.py
    method: GET
    data_selector: records
    params: {}
- name: preprocess
  endpoint:
    path: /src/data_handling/preprocess.py
    method: GET
    data_selector: records
    params: {}
- name: train_dataset
  endpoint:
    path: /datasets/train
    method: GET
    data_selector: data
    params: {}
- name: val_dataset
  endpoint:
    path: /datasets/val
    method: GET
    data_selector: data
    params: {}
- name: test_dataset
  endpoint:
    path: /datasets/test
    method: GET
    data_selector: data
    params: {}
- name: assess_model_risk
  endpoint:
    path: /src/model/torch_model/assess_risk_and_fairness.py
    method: POST
    data_selector: metrics
    params:
      sensitive_feature_col: is_registered
      privileged_group: 1
      mod_threshold: 0.1
- name: inference_results
  endpoint:
    path: /data/dfn_inference_results_${params.stockcode}.parquet
    method: GET
    data_selector: results
    params: {}
- name: validation_metrics
  endpoint:
    path: /metrics/dfn_val_${params.stockcode}.json
    method: GET
    data_selector: metrics
    params: {}
- name: shap_mean_abs
  endpoint:
    path: /reports/dfn_shap_mean_abs_${params.stockcode}.json
    method: GET
    data_selector: mean_abs_shap
    params: {}
- name: shap_summary
  endpoint:
    path: /reports/dfn_shap_summary_${params.stockcode}.json
    method: GET
    data_selector: shap_summary
    params: {}
- name: shap_raw_values
  endpoint:
    path: /reports/dfn_raw_shap_values_${params.stockcode}.parquet
    method: GET
    data_selector: raw_shap_values
    params: {}
- name: etl_pipeline
  endpoint:
    path: /api/v1/etl_pipeline
    method: POST
    data_selector: data
    params: {}
- name: data_drift_check
  endpoint:
    path: /api/v1/data_drift_check
    method: POST
    data_selector: data
    params: {}
- name: preprocess
  endpoint:
    path: /api/v1/preprocess
    method: POST
    data_selector: data
    params: {}
- name: assess_model_risk
  endpoint:
    path: /model/torch_model/assess_risk_and_fairness.py
    method: GET
    data_selector: metrics
    params:
      sensitive_feature_col: is_registered
      privileged_group: 1
      mod_threshold: 0.1
- name: etl_pipeline
  endpoint:
    path: /services/data/vXX.X/sobjects/etl_pipeline
    method: GET
    data_selector: records
    params: {}
- name: data_drift_check
  endpoint:
    path: /services/data/vXX.X/sobjects/data_drift_check
    method: GET
    data_selector: records
    params: {}
- name: data_metrics
  endpoint:
    path: /data.json
    method: GET
    data_selector: metrics
    params: {}
- name: x_train
  endpoint:
    path: data/x_train_df.parquet
    method: GET
    data_selector: data
    params: {}
- name: x_val
  endpoint:
    path: data/x_val_df.parquet
    method: GET
    data_selector: data
    params: {}
- name: x_test
  endpoint:
    path: data/x_test_df.parquet
    method: GET
    data_selector: data
    params: {}
- name: y_train
  endpoint:
    path: data/y_train_df.parquet
    method: GET
    data_selector: data
    params: {}
- name: y_val
  endpoint:
    path: data/y_val_df.parquet
    method: GET
    data_selector: data
    params: {}
- name: y_test
  endpoint:
    path: data/y_test_df.parquet
    method: GET
    data_selector: data
    params: {}
- name: feature_names
  endpoint:
    path: preprocessors/feature_names.json
    method: GET
    data_selector: data
    params: {}
- name: model_artifact
  endpoint:
    path: models/production/dfn_best.pth
    method: GET
    data_selector: data
    params: {}
- name: metrics
  endpoint:
    path: metrics/dfn_val.json
    method: GET
    data_selector: data
    params: {}
- name: metrics
  endpoint:
    path: /metrics/dfn_risk_fairness_${params.stockcode}.json
    method: GET
    data_selector: records
- name: metrics_output
  endpoint:
    path: /metrics/dfn_risk_fairness.json
    method: GET
    data_selector: metrics
    params: {}
- name: etl_pipeline
  endpoint:
    path: /src/data_handling/etl_pipeline.py
    method: GET
    data_selector: records
    params: {}
- name: data_drift_check
  endpoint:
    path: /src/data_handling/report_data_drift.py
    method: GET
    data_selector: records
    params: {}
- name: preprocess
  endpoint:
    path: /src/data_handling/preprocess.py
    method: GET
    data_selector: records
    params: {}
- name: etl_pipeline
  endpoint:
    path: /src/data_handling/etl_pipeline.py
    method: RUN
    data_selector: output
    params: {}
- name: data_drift_check
  endpoint:
    path: /src/data_handling/report_data_drift.py
    method: RUN
    data_selector: output
    params: {}
- name: preprocess
  endpoint:
    path: /src/data_handling/preprocess.py
    method: RUN
    data_selector: output
    params: {}
- name: dvc_metrics
  endpoint:
    path: /metrics/data.json
    method: GET
    data_selector: metrics
- name: model_inference
  endpoint:
    path: /metrics/dfn_inf.json
    method: GET
    data_selector: inference_metrics
- name: assess_model_risk
  endpoint:
    path: /services/data/vXX.X/sobjects/AssessModelRisk
    method: POST
    data_selector: metrics
    params:
      sensitive_feature_col: is_registered
      privileged_group: 1
      mod_threshold: 0.1
- name: train_dataset
  endpoint:
    path: /data/x_train_df.parquet
    method: GET
    data_selector: data
    params: {}
- name: val_dataset
  endpoint:
    path: /data/x_val_df.parquet
    method: GET
    data_selector: data
    params: {}
- name: test_dataset
  endpoint:
    path: /data/x_test_df.parquet
    method: GET
    data_selector: data
    params: {}
- name: train_target
  endpoint:
    path: /data/y_train_df.parquet
    method: GET
    data_selector: data
    params: {}
- name: val_target
  endpoint:
    path: /data/y_val_df.parquet
    method: GET
    data_selector: data
    params: {}
- name: test_target
  endpoint:
    path: /data/y_test_df.parquet
    method: GET
    data_selector: data
    params: {}
- name: preprocessor
  endpoint:
    path: /preprocessors/column_transformer.pkl
    method: GET
    data_selector: data
    params: {}
- name: feature_names
  endpoint:
    path: /preprocessors/feature_names.json
    method: GET
    data_selector: data
    params: {}
- name: model_artifact
  endpoint:
    path: /models/production/dfn_best.pth
    method: GET
    data_selector: data
    params: {}
- name: metrics
  endpoint:
    path: /metrics/dfn_inf.json
    method: GET
    data_selector: data
    params: {}
- name: assess_model_risk
  endpoint:
    path: /src/model/torch_model/assess_risk_and_fairness.py
    method: GET
    data_selector: metrics
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: train_dataset
  endpoint:
    path: /data/x_train_df.parquet
    method: GET
    data_selector: records
- name: val_dataset
  endpoint:
    path: /data/x_val_df.parquet
    method: GET
    data_selector: records
- name: test_dataset
  endpoint:
    path: /data/x_test_df.parquet
    method: GET
    data_selector: records
- name: y_train_dataset
  endpoint:
    path: /data/y_train_df.parquet
    method: GET
    data_selector: records
- name: y_val_dataset
  endpoint:
    path: /data/y_val_df.parquet
    method: GET
    data_selector: records
- name: y_test_dataset
  endpoint:
    path: /data/y_test_df.parquet
    method: GET
    data_selector: records
- name: preprocessor
  endpoint:
    path: /preprocessors/column_transformer.pkl
    method: GET
    data_selector: records
- name: feature_names
  endpoint:
    path: /preprocessors/feature_names.json
    method: GET
    data_selector: records
- name: model_artifact
  endpoint:
    path: /models/production/dfn_best.pth
    method: GET
    data_selector: records
- name: metrics_validation
  endpoint:
    path: /metrics/dfn_val.json
    method: GET
    data_selector: records
- name: metrics_inference
  endpoint:
    path: /metrics/dfn_inf.json
    method: GET
    data_selector: records
- name: shap_mean_abs
  endpoint:
    path: /reports/dfn_shap_mean_abs.json
    method: GET
    data_selector: records
- name: shap_summary
  endpoint:
    path: /reports/dfn_shap_summary.json
    method: GET
    data_selector: records
- name: shap_raw_values
  endpoint:
    path: /reports/dfn_raw_shap_values.parquet
    method: GET
    data_selector: records
- name: etl_pipeline
  endpoint:
    path: /src/data_handling/etl_pipeline.py
    method: POST
    data_selector: output_files
    params: {}
- name: data_drift_check
  endpoint:
    path: /src/data_handling/report_data_drift.py
    method: POST
    data_selector: drift_report
    params: {}
- name: preprocess
  endpoint:
    path: /src/data_handling/preprocess.py
    method: POST
    data_selector: processed_datasets
    params: {}
- name: assess_model_risk
  endpoint:
    path: /src/model/torch_model/assess_risk_and_fairness.py
    method: GET
    data_selector: metrics
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: x_train_df
  endpoint:
    path: data/x_train_df.parquet
    method: GET
    data_selector: data
    params: {}
- name: x_val_df
  endpoint:
    path: data/x_val_df.parquet
    method: GET
    data_selector: data
    params: {}
- name: x_test_df
  endpoint:
    path: data/x_test_df.parquet
    method: GET
    data_selector: data
    params: {}
- name: y_train_df
  endpoint:
    path: data/y_train_df.parquet
    method: GET
    data_selector: data
    params: {}
- name: y_val_df
  endpoint:
    path: data/y_val_df.parquet
    method: GET
    data_selector: data
    params: {}
- name: y_test_df
  endpoint:
    path: data/y_test_df.parquet
    method: GET
    data_selector: data
    params: {}
- name: dfn_best_model
  endpoint:
    path: models/production/dfn_best.pth
    method: GET
    data_selector: data
    params: {}
- name: dfn_inf_metrics
  endpoint:
    path: metrics/dfn_inf.json
    method: GET
    data_selector: data
    params: {}
- name: dfn_shap_mean_abs
  endpoint:
    path: reports/dfn_shap_mean_abs.json
    method: GET
    data_selector: data
    params: {}
- name: dfn_raw_shap_values
  endpoint:
    path: reports/dfn_raw_shap_values.parquet
    method: GET
    data_selector: data
    params: {}
- name: etl_pipeline
  endpoint:
    path: ''
    method: ''
    data_selector: ''
    params: {}
- name: data_drift_check
  endpoint:
    path: ''
    method: ''
    data_selector: ''
    params: {}
- name: preprocess
  endpoint:
    path: ''
    method: ''
    data_selector: ''
    params: {}
- name: risk_fairness_metrics
  endpoint:
    path: /metrics/dfn_risk_fairness.json
    method: GET
    data_selector: metrics
- name: etl_pipeline
  endpoint:
    path: /src/data_handling/etl_pipeline
    method: GET
    data_selector: records
- name: data_drift_check
  endpoint:
    path: /src/data_handling/report_data_drift
    method: GET
    data_selector: records
- name: preprocess
  endpoint:
    path: /src/data_handling/preprocess
    method: GET
    data_selector: records
- name: x_train_df
  endpoint:
    path: data/x_train_df.parquet
    method: GET
    data_selector: ''
    params: {}
- name: x_val_df
  endpoint:
    path: data/x_val_df.parquet
    method: GET
    data_selector: ''
    params: {}
- name: x_test_df
  endpoint:
    path: data/x_test_df.parquet
    method: GET
    data_selector: ''
    params: {}
- name: y_train_df
  endpoint:
    path: data/y_train_df.parquet
    method: GET
    data_selector: ''
    params: {}
- name: y_val_df
  endpoint:
    path: data/y_val_df.parquet
    method: GET
    data_selector: ''
    params: {}
- name: y_test_df
  endpoint:
    path: data/y_test_df.parquet
    method: GET
    data_selector: ''
    params: {}
- name: feature_names
  endpoint:
    path: preprocessors/feature_names.json
    method: GET
    data_selector: ''
    params: {}
- name: dfn_best_model
  endpoint:
    path: models/production/dfn_best.pth
    method: GET
    data_selector: ''
    params: {}
- name: dfn_val_metrics
  endpoint:
    path: metrics/dfn_val.json
    method: GET
    data_selector: ''
    params: {}
- name: dfn_inf_metrics
  endpoint:
    path: metrics/dfn_inf.json
    method: GET
    data_selector: ''
    params: {}
- name: inference_results
  endpoint:
    path: /data/dfn_inference_results_${params.stockcode}.parquet
    method: GET
    data_selector: results
- name: validation_metrics
  endpoint:
    path: /metrics/dfn_val_${params.stockcode}.json
    method: GET
    data_selector: metrics
- name: shap_mean_abs
  endpoint:
    path: /reports/dfn_shap_mean_abs_${params.stockcode}.json
    method: GET
    data_selector: mean_abs
- name: shap_summary
  endpoint:
    path: /reports/dfn_shap_summary_${params.stockcode}.json
    method: GET
    data_selector: summary
- name: shap_raw_values
  endpoint:
    path: /reports/dfn_raw_shap_values_${params.stockcode}.parquet
    method: GET
    data_selector: raw_values
- name: etl_pipeline
  endpoint:
    path: /services/data/vXX.X/sobjects/etl_pipeline
    method: GET
    data_selector: records
- name: data_drift_check
  endpoint:
    path: /services/data/vXX.X/sobjects/data_drift_check
    method: GET
    data_selector: records
- name: preprocess
  endpoint:
    path: /services/data/vXX.X/sobjects/preprocess
    method: GET
    data_selector: records
- name: assess_model_risk
  endpoint:
    path: /assess_model_risk
    method: POST
    data_selector: metrics
    params: {}
- name: preprocessed_data
  endpoint:
    path: /data
    method: GET
    data_selector: records
    params: {}
- name: metrics
  endpoint:
    path: /metrics
    method: GET
    data_selector: records
    params: {}
- name: model_predictions
  endpoint:
    path: /api/predict
    method: POST
    data_selector: predictions
    params: {}
- name: sklearn_model
  endpoint:
    path: /src/model/sklearn_model/scripts/tuning.py
    method: POST
    data_selector: results
    params:
      incremental: n_calls
- name: assess_model_risk
  endpoint:
    path: /src/model/torch_model/assess_risk_and_fairness.py
    method: GET
    data_selector: ''
    params: {}
- name: lambda_function
  endpoint:
    path: /invoke-lambda
    method: POST
    data_selector: result
    params: {}
- name: model_inference
  endpoint:
    path: /model-inference
    method: POST
    data_selector: prediction
    params: {}
- name: tuning
  endpoint:
    path: src/model/sklearn_model/scripts/tuning.py
    method: N/A
    data_selector: N/A
    params: {}
- name: etl_pipeline
  endpoint:
    path: /src/data_handling/etl_pipeline.py
    method: POST
    data_selector: output
    params: {}
- name: data_drift_check
  endpoint:
    path: /src/data_handling/report_data_drift.py
    method: POST
    data_selector: output
    params: {}
- name: preprocess
  endpoint:
    path: /src/data_handling/preprocess.py
    method: POST
    data_selector: output
    params: {}
- name: predict_price
  endpoint:
    path: /v1/predict-price/<string:stockcode>
    method: GET
    data_selector: results
    params: {}
- name: train_data
  endpoint:
    path: /data/x_train_df.parquet
    method: GET
    data_selector: records
- name: val_data
  endpoint:
    path: /data/x_val_df.parquet
    method: GET
    data_selector: records
- name: test_data
  endpoint:
    path: /data/x_test_df.parquet
    method: GET
    data_selector: records
- name: target_data_train
  endpoint:
    path: /data/y_train_df.parquet
    method: GET
    data_selector: records
- name: target_data_val
  endpoint:
    path: /data/y_val_df.parquet
    method: GET
    data_selector: records
- name: target_data_test
  endpoint:
    path: /data/y_test_df.parquet
    method: GET
    data_selector: records
- name: model_artifact
  endpoint:
    path: /models/production/dfn_best.pth
    method: GET
    data_selector: records
- name: metrics
  endpoint:
    path: /metrics/dfn_val.json
    method: GET
    data_selector: records
- name: shap_mean_abs
  endpoint:
    path: /reports/dfn_shap_mean_abs.json
    method: GET
    data_selector: records
- name: inference_results
  endpoint:
    path: /data/dfn_inference_results_${params.stockcode}.parquet
    method: GET
    data_selector: records
- name: ai_pricing
  endpoint:
    path: /api/ai_pricing
    method: POST
    data_selector: results
    params: {}
- name: assess_model_risk
  endpoint:
    path: src/model/torch_model/assess_risk_and_fairness.py
    method: python
    data_selector: null
    params:
      inference_file_path: data/dfn_inference_results_${params.stockcode}.parquet
      metrics_output_path: metrics/dfn_risk_fairness_${params.stockcode}.json
      sensitive_feature_col: ${tracking.sensitive_feature_col}
      stockcode: ${params.stockcode}
      privileged_group: ${tracking.privileged_group}
      mod_threshold: ${tracking.mod_threshold}
- name: train_data_loader
  endpoint:
    path: /create_torch_data_loader
    method: POST
    data_selector: train_data_loader
- name: val_data_loader
  endpoint:
    path: /create_torch_data_loader
    method: POST
    data_selector: val_data_loader
- name: retrain_best_model
  endpoint:
    path: /train_model
    method: POST
    data_selector: best_model
- name: s3_upload
  endpoint:
    path: /s3_upload
    method: POST
    data_selector: s3_upload
- name: flask_app
  endpoint:
    path: /v1/predict-price/<string:stockcode>
    method: GET
    data_selector: predict_price
- name: etl_pipeline
  endpoint:
    path: /src/data_handling/etl_pipeline.py
    method: GET
    data_selector: records
- name: data_drift_check
  endpoint:
    path: /src/data_handling/report_data_drift.py
    method: GET
    data_selector: records
- name: preprocess
  endpoint:
    path: /src/data_handling/preprocess.py
    method: GET
    data_selector: records
- name: model_inference
  endpoint:
    path: /invoke-lambda-function
    method: POST
    data_selector: results
- name: upload_model
  endpoint:
    path: /{S3_BUCKET_NAME}/{MODEL_FILE_PATH}
    method: PUT
    data_selector: model
    params: {}
- name: upload_data
  endpoint:
    path: /{S3_BUCKET_NAME}/{DATA_FILE_PATH}
    method: PUT
    data_selector: data
    params: {}
- name: my-app
  endpoint:
    path: /services/data/vXX.X/sobjects/MyApp
    method: GET
    data_selector: records
    params: {}
- name: x_train
  endpoint:
    path: data/x_train_df.parquet
    method: GET
    data_selector: records
- name: x_val
  endpoint:
    path: data/x_val_df.parquet
    method: GET
    data_selector: records
- name: x_test
  endpoint:
    path: data/x_test_df.parquet
    method: GET
    data_selector: records
- name: y_train
  endpoint:
    path: data/y_train_df.parquet
    method: GET
    data_selector: records
- name: y_val
  endpoint:
    path: data/y_val_df.parquet
    method: GET
    data_selector: records
- name: y_test
  endpoint:
    path: data/y_test_df.parquet
    method: GET
    data_selector: records
- name: feature_names
  endpoint:
    path: preprocessors/feature_names.json
    method: GET
    data_selector: records
- name: model_metrics
  endpoint:
    path: metrics/dfn_val.json
    method: GET
    data_selector: records
- name: inference_results
  endpoint:
    path: data/dfn_inference_results_${params.stockcode}.parquet
    method: GET
    data_selector: records
- name: shap_mean_abs
  endpoint:
    path: reports/dfn_shap_mean_abs_${params.stockcode}.json
    method: GET
    data_selector: records
- name: shap_summary
  endpoint:
    path: reports/dfn_shap_summary_${params.stockcode}.json
    method: GET
    data_selector: records
- name: assess_model_risk
  endpoint:
    path: /src/model/torch_model/assess_risk_and_fairness.py
    method: POST
    data_selector: results
    params:
      sensitive_feature_col: is_registered
      privileged_group: 1
      mod_threshold: 0.1
- name: canvas
  endpoint:
    path: /canvas
    method: GET
    data_selector: records
    params: {}
- name: card
  endpoint:
    path: /card
    method: GET
    data_selector: records
    params: {}
- name: canvas
  endpoint:
    path: /canvas
    method: GET
    data_selector: canvasData
    params: {}
- name: draggable
  endpoint:
    path: /draggable
    method: GET
    data_selector: draggableData
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: EKSClusterRole
  endpoint:
    path: /aws/iam/create-role
    method: POST
    data_selector: role
    params: {}
- name: EKSNodeGroupRole
  endpoint:
    path: /aws/iam/create-role
    method: POST
    data_selector: role
    params: {}
- name: EKS-Management-Role
  endpoint:
    path: /aws/iam/create-role
    method: POST
    data_selector: role
    params: {}
- name: kfold_validation
  endpoint:
    path: /src/model/sklearn_model/scripts/tuning.py
    method: GET
    data_selector: function
    params:
      n_splits: 5
      early_stopping_rounds: 10
      max_iters: 200
- name: bayesian_optimization
  endpoint:
    path: /src/model/sklearn_model/scripts/tuning.py
    method: GET
    data_selector: function
    params:
      n_calls: null
      n_initial_points: 10
      random_state: 42
- name: EKSClusterRole
  endpoint:
    path: /aws/iam/create-role
    method: POST
    data_selector: Vpc.VpcId
    params: {}
- name: EKSNodeGroupRole
  endpoint:
    path: /aws/iam/create-role
    method: POST
    data_selector: Vpc.VpcId
    params: {}
- name: EKS-Management-Role
  endpoint:
    path: /aws/iam/create-role
    method: POST
    data_selector: Vpc.VpcId
    params: {}
- name: lambda_function
  endpoint:
    path: /2015-03-31/functions/{functionName}/invocations
    method: POST
    data_selector: body
    params: {}
- name: api_gateway
  endpoint:
    path: /restapis/{restapi_id}/resources
    method: GET
    data_selector: items
    params: {}
- name: s3_storage
  endpoint:
    path: /{bucket_name}/
    method: GET
    data_selector: Contents
    params: {}
- name: elasticache
  endpoint:
    path: /
    method: GET
    data_selector: data
    params: {}
- name: ecr
  endpoint:
    path: /v2/{repositoryName}/tags
    method: GET
    data_selector: tags
    params: {}
- name: public_subnets
  endpoint:
    path: /services/data/vXX.X/sobjects/PublicSubnets
    method: POST
    data_selector: subnets
    params:
      cidr_blocks:
      - 10.0.1.0/24
      - 10.0.2.0/24
      availability_zones:
      - eu-west-1a
      - eu-west-1b
- name: private_subnets
  endpoint:
    path: /services/data/vXX.X/sobjects/PrivateSubnets
    method: POST
    data_selector: subnets
    params:
      cidr_blocks:
      - 10.0.3.0/24
      - 10.0.4.0/24
      availability_zones:
      - eu-west-1a
      - eu-west-1b
- name: eks_cluster
  endpoint:
    path: /services/data/vXX.X/sobjects/EKSCluster
    method: POST
    data_selector: clusters
    params:
      name: pod-security-cluster-demo
      kubernetes_version: '1.33'
      role_arn: '{{ dlt.secrets[''EKSClusterRoleArn''] }}'
      access_config:
        authentication_mode: API_AND_CONFIG_MAP
      resources_vpc_config:
        subnet_ids:
        - '{{ dlt.secrets[''PUBLIC_SUBNET_1''] }}'
        - '{{ dlt.secrets[''PUBLIC_SUBNET_2''] }}'
        - '{{ dlt.secrets[''PRIVATE_SUBNET_1''] }}'
        - '{{ dlt.secrets[''PRIVATE_SUBNET_2''] }}'
- name: security_group_policy
  endpoint:
    path: /services/data/vXX.X/sobjects/SecurityGroupPolicy
    method: GET
    data_selector: records
    params: {}
- name: vpc_resource_controller
  endpoint:
    path: /services/data/vXX.X/sobjects/VPCResourceController
    method: GET
    data_selector: records
    params: {}
- name: aws_vpc_cni
  endpoint:
    path: /services/data/vXX.X/sobjects/AWSVPC_CNI
    method: GET
    data_selector: records
    params: {}
- name: predict_price
  endpoint:
    path: /v1/predict-price/<string:stockcode>
    method: GET
    data_selector: json
    params: {}
- name: AI_Pricing_for_Retailers
  endpoint:
    path: /ai_pricing_retailers
    method: POST
    data_selector: results
- name: kfold_validation
  endpoint:
    path: /run/kfold_validation
    method: POST
    data_selector: results
- name: s3_upload
  endpoint:
    path: /upload
    method: POST
    data_selector: upload_status
- name: public_subnets
  endpoint:
    path: /create-tags
    method: POST
    data_selector: tags
    params:
      Key: kubernetes.io/cluster/pod-security-cluster-demo
      Value: shared
- name: private_subnets
  endpoint:
    path: /create-tags
    method: POST
    data_selector: tags
    params:
      Key: kubernetes.io/cluster/pod-security-cluster-demo
      Value: shared
- name: public_route_table_creation
  endpoint:
    path: /create-route-table
    method: POST
    data_selector: RouteTableId
    params:
      vpc-id: $VPC_ID
- name: nat_gateway_creation
  endpoint:
    path: /create-nat-gateway
    method: POST
    data_selector: NatGatewayId
    params:
      subnet-id: $PUBLIC_SUBNET_1
      allocation-id: $EIP_ALLOC
- name: eks_cluster_creation
  endpoint:
    path: /create-cluster
    method: POST
    data_selector: cluster
    params:
      name: pod-security-cluster-demo
      kubernetes-version: '1.33'
      role-arn: $CLUSTER_ROLE_ARN
      access-config: authenticationMode=API_AND_CONFIG_MAP
      resources-vpc-config: subnetIds=$PUBLIC_SUBNET_1,$PUBLIC_SUBNET_2,$PRIVATE_SUBNET_1,$PRIVATE_SUBNET_2
- name: workers
  endpoint:
    path: /create-nodegroup
    method: POST
    data_selector: nodeGroupDetails
    params:
      cluster_name: pod-security-cluster-demo
      nodegroup_name: workers
      subnets: $PRIVATE_SUBNET_1 $PRIVATE_SUBNET_2
      node_role: $NODE_ROLE_ARN
      instance_types: m5.large
      scaling_config: minSize=1,maxSize=3,desiredSize=2
      disk_size: 20
      capacity_type: ON_DEMAND
- name: lambda_function
  endpoint:
    path: /services/lambda/function
    method: POST
    data_selector: result
- name: api_gateway
  endpoint:
    path: /services/api/gateway
    method: GET
    data_selector: endpoints
- name: train_data_loader
  endpoint:
    path: /train_data_loader
    method: POST
    data_selector: loader
    params: {}
- name: val_data_loader
  endpoint:
    path: /val_data_loader
    method: POST
    data_selector: loader
    params: {}
- name: SecurityGroupPolicy
  endpoint:
    path: /v1/securitygrouppolicy
    method: POST
    data_selector: data
    params: {}
- name: VPCResourceController
  endpoint:
    path: /v1/vpc/resourcecontroller
    method: GET
    data_selector: data
    params: {}
- name: create_tags_public_subnets
  endpoint:
    path: /create-tags
    method: POST
    data_selector: tags
    params:
      Key: kubernetes.io/cluster/pod-security-cluster-demo
      Value: shared
- name: create_tags_private_subnets
  endpoint:
    path: /create-tags
    method: POST
    data_selector: tags
    params:
      Key: kubernetes.io/role/internal-elb
      Value: '1'
- name: create_route_table_public_subnets
  endpoint:
    path: /create-route-table
    method: POST
    data_selector: routeTable
    params: {}
- name: create_nat_gateway
  endpoint:
    path: /create-nat-gateway
    method: POST
    data_selector: natGateway
    params: {}
- name: create_cluster
  endpoint:
    path: /create-cluster
    method: POST
    data_selector: cluster
    params:
      name: pod-security-cluster-demo
      kubernetes-version: '1.33'
      access-config: authenticationMode=API_AND_CONFIG_MAP
- name: create_node_group
  endpoint:
    path: /create-nodegroup
    method: POST
    data_selector: nodeGroup
    params:
      instance-types: m5.large
      scaling-config: minSize=1,maxSize=3,desiredSize=2
      disk-size: 20
      capacity-type: ON_DEMAND
- name: App
  endpoint:
    path: /src/App.tsx
    method: GET
    data_selector: records
    params: {}
- name: Canvas
  endpoint:
    path: /src/Canvas.tsx
    method: GET
    data_selector: records
    params: {}
- name: Draggable
  endpoint:
    path: /src/Draggable.tsx
    method: GET
    data_selector: records
    params: {}
- name: Addable
  endpoint:
    path: /src/Addable.tsx
    method: GET
    data_selector: records
    params: {}
- name: Canvas
  endpoint:
    path: /src/Canvas.tsx
    method: GET
    data_selector: records
- name: Draggable
  endpoint:
    path: /src/Draggable.tsx
    method: GET
    data_selector: records
- name: management_role_arn
  endpoint:
    path: /iam/get-role
    method: GET
    data_selector: Role.Arn
    params:
      role-name: EKS-Management-Role
- name: associate_admin_policy
  endpoint:
    path: /eks/associate-access-policy
    method: POST
    data_selector: PolicyAssociation
    params:
      cluster-name: pod-security-cluster-demo
      principal-arn: $MANAGEMENT_ROLE_ARN
      policy-arn: arn:aws:eks::aws:cluster-access-policy/AmazonEKSClusterAdminPolicy
      access-scope: type=cluster
- name: list_associated_access_policies
  endpoint:
    path: /eks/list-associated-access-policies
    method: GET
    data_selector: Policies
    params:
      cluster-name: pod-security-cluster-demo
      principal-arn: $MANAGEMENT_ROLE_ARN
- name: create_security_group
  endpoint:
    path: /ec2/create-security-group
    method: POST
    data_selector: GroupId
    params:
      group-name: EKS-Management-SG
      description: Security group for EKS management instance
      vpc-id: $VPC_ID
- name: EKSClusterRole
  endpoint:
    path: /role/EKSClusterRole
    method: POST
    data_selector: roleDetails
- name: EKSNodeGroupRole
  endpoint:
    path: /role/EKSNodeGroupRole
    method: POST
    data_selector: roleDetails
- name: EKS-Management-Role
  endpoint:
    path: /role/EKS-Management-Role
    method: POST
    data_selector: roleDetails
- name: pod_security_groups
  endpoint:
    path: /services/data/vXX.X/sobjects/PodSecurityGroup
    method: GET
    data_selector: records
    params: {}
- name: eks_cluster
  endpoint:
    path: /clusters
    method: POST
    data_selector: clusters
    params: {}
- name: security_group
  endpoint:
    path: /security-groups
    method: GET
    data_selector: securityGroups
    params: {}
- name: EKS Cluster
  endpoint:
    path: /eks/create-cluster
    method: POST
    data_selector: cluster
    params:
      name: pod-security-cluster-demo
      kubernetes-version: '1.33'
      role-arn: $CLUSTER_ROLE_ARN
      access-config: authenticationMode=API_AND_CONFIG_MAP
      resources-vpc-config: subnetIds=$PUBLIC_SUBNET_1,$PUBLIC_SUBNET_2,$PRIVATE_SUBNET_1,$PRIVATE_SUBNET_2
- name: Managed Node Group
  endpoint:
    path: /eks/create-nodegroup
    method: POST
    data_selector: nodegroup
    params:
      cluster-name: pod-security-cluster-demo
      nodegroup-name: workers
      subnets: $PRIVATE_SUBNET_1 $PRIVATE_SUBNET_2
      node-role: $NODE_ROLE_ARN
      instance-types: m5.large
      scaling-config: minSize=1,maxSize=3,desiredSize=2
      disk-size: 20
      capacity-type: ON_DEMAND
- name: Management Instance Security Group
  endpoint:
    path: /ec2/create-security-group
    method: POST
    data_selector: security_group
    params:
      group-name: EKS-Management-SG
      description: Security group for EKS management instance
      vpc-id: $VPC_ID
- name: public_subnet_1
  endpoint:
    path: /services/data/vXX.X/sobjects/PublicSubnet1
    method: GET
    data_selector: records
    params: {}
- name: public_subnet_2
  endpoint:
    path: /services/data/vXX.X/sobjects/PublicSubnet2
    method: GET
    data_selector: records
    params: {}
- name: private_subnet_1
  endpoint:
    path: /services/data/vXX.X/sobjects/PrivateSubnet1
    method: GET
    data_selector: records
    params: {}
- name: private_subnet_2
  endpoint:
    path: /services/data/vXX.X/sobjects/PrivateSubnet2
    method: GET
    data_selector: records
    params: {}
- name: instance
  endpoint:
    path: /ec2/run-instances
    method: POST
    data_selector: Instances
    params:
      image_id: $AMI_ID
      instance_type: t3.micro
      subnet_id: $PUBLIC_SUBNET_1
      security_group_ids: $EC2_SG
      iam_instance_profile: EKS-Management-Profile
      user_data: file://user-data.sh
      tag_specifications: ResourceType=instance,Tags=[{Key=Name,Value=EKS-Management},{Key=Environment,Value=Demo}]
- name: instance_ip
  endpoint:
    path: /ec2/describe-instances
    method: GET
    data_selector: PublicIpAddress
    params:
      instance_ids: $INSTANCE_ID
- name: security_group_policy
  endpoint:
    path: /api/securityGroupPolicy
    method: POST
    data_selector: results
    params: {}
- name: security_group_policy
  endpoint:
    path: /api/securityGroupPolicies
    method: POST
    data_selector: data
    params: {}
- name: vpc_resource_controller
  endpoint:
    path: /api/vpcResourceControllers
    method: GET
    data_selector: data
    params: {}
- name: aws_vpc_cni
  endpoint:
    path: /api/awsVpcCni
    method: GET
    data_selector: data
    params: {}
- name: cluster
  endpoint:
    path: /clusters/pod-security-cluster-demo
    method: GET
    data_selector: cluster
    params: {}
- name: node_group
  endpoint:
    path: /clusters/pod-security-cluster-demo/node-groups/workers
    method: GET
    data_selector: nodeGroup
    params: {}
- name: eks_cluster
  endpoint:
    path: /create-cluster
    method: POST
    data_selector: cluster
    params:
      name: pod-security-cluster-demo
      kubernetes_version: '1.33'
      role_arn: '{{ dlt.secrets[''cluster_role_arn''] }}'
      access_config: authenticationMode=API_AND_CONFIG_MAP
      resources_vpc_config: subnetIds={{ dlt.secrets['public_subnet_1'] }},{{ dlt.secrets['public_subnet_2']
        }},{{ dlt.secrets['private_subnet_1'] }},{{ dlt.secrets['private_subnet_2']
        }}
- name: workers
  endpoint:
    path: ''
    method: ''
    data_selector: ''
    params:
      subnets: $PRIVATE_SUBNET_1 $PRIVATE_SUBNET_2
      node_role: $NODE_ROLE_ARN
      instance_types: m5.large
      scaling_config: minSize=1,maxSize=3,desiredSize=2
      disk_size: 20
      capacity_type: ON_DEMAND
- name: eks_cluster
  endpoint:
    path: /clusters
    method: POST
    data_selector: cluster
    params:
      name: pod-security-cluster-demo
      kubernetes_version: '1.33'
      role_arn: $CLUSTER_ROLE_ARN
      access_config: authenticationMode=API_AND_CONFIG_MAP
      resources_vpc_config: subnetIds=$PUBLIC_SUBNET_1,$PUBLIC_SUBNET_2,$PRIVATE_SUBNET_1,$PRIVATE_SUBNET_2
- name: managed_node_group
  endpoint:
    path: /nodegroups
    method: POST
    data_selector: nodegroup
    params:
      cluster_name: pod-security-cluster-demo
      nodegroup_name: workers
      subnets: $PRIVATE_SUBNET_1,$PRIVATE_SUBNET_2
      node_role: $NODE_ROLE_ARN
      instance_types: m5.large
      scaling_config: minSize=1,maxSize=3,desiredSize=2
      disk_size: 20
      capacity_type: ON_DEMAND
- name: security_group
  endpoint:
    path: /security-groups
    method: POST
    data_selector: securityGroup
    params:
      description: Pod Security Group - Database Access
      group_name: POD_SG
      vpc_id: ${VPC_ID}
- name: eks_cluster
  endpoint:
    path: /eks/clusters
    method: POST
    data_selector: cluster
    params:
      name: pod-security-cluster-demo
      kubernetes_version: '1.33'
      role_arn: $CLUSTER_ROLE_ARN
      access_config: authenticationMode=API_AND_CONFIG_MAP
      resources_vpc_config: subnetIds=$PUBLIC_SUBNET_1,$PUBLIC_SUBNET_2,$PRIVATE_SUBNET_1,$PRIVATE_SUBNET_2
- name: node_group
  endpoint:
    path: /eks/nodegroups
    method: POST
    data_selector: nodeGroup
    params:
      cluster_name: pod-security-cluster-demo
      nodegroup_name: workers
      subnets: $PRIVATE_SUBNET_1 $PRIVATE_SUBNET_2
      node_role: $NODE_ROLE_ARN
      instance_types: m5.large
      scaling_config: minSize=1,maxSize=3,desiredSize=2
      disk_size: 20
      capacity_type: ON_DEMAND
- name: security_group_policy
  endpoint:
    path: /path/to/security_group_policy
    method: POST
    data_selector: policy
    params: {}
- name: vpc_resource_controller
  endpoint:
    path: /path/to/vpc_resource_controller
    method: GET
    data_selector: resources
    params: {}
- name: management_role
  endpoint:
    path: /iam/get-role
    method: GET
    data_selector: Role.Arn
    params:
      role-name: EKS-Management-Role
- name: associate_access_policy
  endpoint:
    path: /eks/associate-access-policy
    method: POST
    data_selector: policy
    params:
      cluster-name: pod-security-cluster-demo
      principal-arn: $MANAGEMENT_ROLE_ARN
      policy-arn: arn:aws:eks::aws:cluster-access-policy/AmazonEKSClusterAdminPolicy
      access-scope: type=cluster
- name: list_associated_access_policies
  endpoint:
    path: /eks/list-associated-access-policies
    method: GET
    data_selector: policies
    params:
      cluster-name: pod-security-cluster-demo
      principal-arn: $MANAGEMENT_ROLE_ARN
- name: create_security_group
  endpoint:
    path: /ec2/create-security-group
    method: POST
    data_selector: GroupId
    params:
      group-name: EKS-Management-SG
      description: Security group for EKS management instance
      vpc-id: $VPC_ID
- name: cluster
  endpoint:
    path: /clusters/pod-security-cluster-demo
    method: GET
    data_selector: cluster
    params: {}
- name: nodegroup
  endpoint:
    path: /nodegroups/workers
    method: GET
    data_selector: nodegroup
    params: {}
- name: security_group
  endpoint:
    path: /security-groups/EKS-Management-SG
    method: GET
    data_selector: security_group
    params: {}
- name: create_tags_public_subnets
  endpoint:
    path: /create-tags
    method: POST
    data_selector: tags
    params:
      resources: $PUBLIC_SUBNET_1,$PUBLIC_SUBNET_2
      tags:
      - Key: kubernetes.io/cluster/pod-security-cluster-demo
        Value: shared
      - Key: kubernetes.io/role/elb
        Value: '1'
- name: create_tags_private_subnets
  endpoint:
    path: /create-tags
    method: POST
    data_selector: tags
    params:
      resources: $PRIVATE_SUBNET_1,$PRIVATE_SUBNET_2
      tags:
      - Key: kubernetes.io/cluster/pod-security-cluster-demo
        Value: shared
      - Key: kubernetes.io/role/internal-elb
        Value: '1'
- name: create_route_table_public_subnets
  endpoint:
    path: /create-route-table
    method: POST
    data_selector: route_table
    params:
      vpc-id: $VPC_ID
- name: create_nat_gateway
  endpoint:
    path: /create-nat-gateway
    method: POST
    data_selector: nat_gateway
    params:
      subnet-id: $PUBLIC_SUBNET_1
      allocation-id: $EIP_ALLOC
- name: create_eks_cluster
  endpoint:
    path: /create-cluster
    method: POST
    data_selector: eks_cluster
    params:
      name: pod-security-cluster-demo
      kubernetes-version: '1.33'
      role-arn: $CLUSTER_ROLE_ARN
      access-config: authenticationMode=API_AND_CONFIG_MAP
      resources-vpc-config: subnetIds=$PUBLIC_SUBNET_1,$PUBLIC_SUBNET_2,$PRIVATE_SUBNET_1,$PRIVATE_SUBNET_2
- name: create_managed_node_group
  endpoint:
    path: /create-nodegroup
    method: POST
    data_selector: node_group
    params:
      cluster-name: pod-security-cluster-demo
      nodegroup-name: workers
      subnets: $PRIVATE_SUBNET_1,$PRIVATE_SUBNET_2
      node-role: $NODE_ROLE_ARN
      instance-types: m5.large
      scaling-config: minSize=1,maxSize=3,desiredSize=2
      disk-size: 20
      capacity-type: ON_DEMAND
- name: create_security_group_for_management
  endpoint:
    path: /create-security-group
    method: POST
    data_selector: security_group
    params:
      group-name: EKS-Management-SG
      description: Security group for EKS management instance
      vpc-id: $VPC_ID
- name: create_security_group_for_pods
  endpoint:
    path: /create-security-group
    method: POST
    data_selector: pod_security_group
    params:
      description: Pod Security Group - Database Access
      group-name: POD_SG
      vpc-id: $VPC_ID
- name: RDS_SG
  endpoint:
    path: /ec2/create-security-group
    method: POST
    data_selector: SecurityGroupId
    params:
      description: RDS Security Group - PostgreSQL Database
      group-name: RDS_SG
      vpc-id: ${VPC_ID}
- name: RDS_SG_ID
  endpoint:
    path: /rds/describe-db-instances
    method: GET
    data_selector: VpcSecurityGroupId
    params:
      db-instance-identifier: rds-ekslab
- name: instance
  endpoint:
    path: /run-instances
    method: POST
    data_selector: Instances
    params:
      image_id: $AMI_ID
      count: '1'
      instance_type: t3.micro
      subnet_id: $PUBLIC_SUBNET_1
      security_group_ids: $EC2_SG
      iam_instance_profile: EKS-Management-Profile
      user_data: file://user-data.sh
      tag_specifications: ResourceType=instance,Tags=[{Key=Name,Value=EKS-Management},{Key=Environment,Value=Demo}]
- name: instance_ip
  endpoint:
    path: /describe-instances
    method: GET
    data_selector: Reservations[0].Instances[0].PublicIpAddress
    params:
      instance_ids: $INSTANCE_ID
- name: node_group_security_group
  endpoint:
    path: /describe-security-groups
    method: GET
    data_selector: SecurityGroups[0].GroupId
    params:
      filters: Name=tag:Name,Values=eks-cluster-sg-pod-security-cluster-demo-* Name=vpc-id,Values=${VPC_ID}
- name: rds_security_group
  endpoint:
    path: /describe-db-instances
    method: GET
    data_selector: DBInstances[0].VpcSecurityGroups[0].VpcSecurityGroupId
    params:
      db-instance-identifier: rds-ekslab
- name: EKSClusterRole
  endpoint:
    path: /services/data/vXX.X/sobjects/EKSClusterRole
    method: POST
    data_selector: records
    params: {}
- name: EKSNodeGroupRole
  endpoint:
    path: /services/data/vXX.X/sobjects/EKSNodeGroupRole
    method: POST
    data_selector: records
    params: {}
- name: EKSManagementRole
  endpoint:
    path: /services/data/vXX.X/sobjects/EKSManagementRole
    method: POST
    data_selector: records
    params: {}
- name: security_group_policy
  endpoint:
    path: /v1/securityGroupPolicies
    method: POST
    data_selector: data
    params: {}
- name: vpc_resource_controller
  endpoint:
    path: /v1/vpcResourceControllers
    method: GET
    data_selector: data
    params: {}
- name: eks_cluster
  endpoint:
    path: /cluster/pod-security-cluster-demo
    method: GET
    data_selector: cluster
    params: {}
- name: eks_node_group
  endpoint:
    path: /nodegroup/workers
    method: GET
    data_selector: nodegroup
    params: {}
- name: eks_cluster
  endpoint:
    path: /services/data/vXX.X/sobjects/EKSCluster
    method: POST
    data_selector: cluster
    params:
      incremental: created_at
- name: node_group
  endpoint:
    path: /services/data/vXX.X/sobjects/NodeGroup
    method: POST
    data_selector: nodeGroup
    params: {}
- name: SecurityGroupPolicy
  endpoint:
    path: /api/v1/securitygrouppolicies
    method: POST
    data_selector: items
- name: VPCResourceController
  endpoint:
    path: /api/v1/vpcresourcecontrollers
    method: GET
    data_selector: items
- name: RDS_SG
  endpoint:
    path: /create-security-group
    method: POST
    data_selector: SecurityGroup
    params:
      description: RDS Security Group - PostgreSQL Database
      group-name: RDS_SG
      vpc-id: ${VPC_ID}
- name: DB_Subnet_Group
  endpoint:
    path: /create-db-subnet-group
    method: POST
    data_selector: DBSubnetGroup
    params:
      db-subnet-group-name: rds-ekslab
      db-subnet-group-description: Subnet group for EKS lab RDS instance
      subnet-ids: ${PRIVATE_SUBNET_1} ${PRIVATE_SUBNET_2}
- name: cluster_creation
  endpoint:
    path: /eks/create-cluster
    method: POST
    data_selector: cluster
    params:
      name: pod-security-cluster-demo
      kubernetes-version: '1.33'
      role-arn: ${CLUSTER_ROLE_ARN}
      access-config: authenticationMode=API_AND_CONFIG_MAP
      resources-vpc-config: subnetIds=${PUBLIC_SUBNET_1},${PUBLIC_SUBNET_2},${PRIVATE_SUBNET_1},${PRIVATE_SUBNET_2}
- name: node_group_creation
  endpoint:
    path: /eks/create-nodegroup
    method: POST
    data_selector: nodeGroup
    params:
      cluster-name: pod-security-cluster-demo
      nodegroup-name: workers
      subnets: ${PRIVATE_SUBNET_1} ${PRIVATE_SUBNET_2}
      node-role: ${NODE_ROLE_ARN}
      instance-types: m5.large
      scaling-config: minSize=1,maxSize=3,desiredSize=2
      disk-size: 20
      capacity-type: ON_DEMAND
- name: security_group_creation
  endpoint:
    path: /ec2/create-security-group
    method: POST
    data_selector: securityGroup
    params:
      description: Pod Security Group - Database Access
      group-name: POD_SG
      vpc-id: ${VPC_ID}
- name: SecurityGroupPolicy
  endpoint:
    path: /api/v1/securitygrouppolicies
    method: POST
    data_selector: policies
- name: VPCResourceController
  endpoint:
    path: /api/v1/vpcresourcecontrollers
    method: GET
    data_selector: controllers
- name: pod_security_cluster_demo
  endpoint:
    path: /services/data/vXX.X/sobjects/pod-security-cluster-demo
    method: POST
    data_selector: cluster
    params: {}
- name: RDS_SG
  endpoint:
    path: /aws/ec2/create-security-group
    method: POST
    data_selector: SecurityGroupId
    params:
      description: RDS Security Group - PostgreSQL Database
      group-name: RDS_SG
      vpc-id: ${VPC_ID}
- name: RDS_DB_Instances
  endpoint:
    path: /aws/rds/describe-db-instances
    method: GET
    data_selector: DBInstances
    params:
      db-instance-identifier: rds-ekslab
- name: DB_Subnet_Group
  endpoint:
    path: /aws/rds/create-db-subnet-group
    method: POST
    data_selector: DBSubnetGroup
    params:
      db-subnet-group-name: rds-ekslab
      db-subnet-group-description: Subnet group for EKS lab RDS instance
      subnet-ids:
      - ${PRIVATE_SUBNET_1}
      - ${PRIVATE_SUBNET_2}
- name: postgresql_instance
  endpoint:
    path: /create-db-instance
    method: POST
    params:
      db-instance-identifier: rds-ekslab
      db-instance-class: db.t3.micro
      engine: postgres
      master-username: postgres
      master-user-password: ${RDS_PASSWORD}
      allocated-storage: 20
      vpc-security-group-ids: ${RDS_SG}
      db-subnet-group-name: rds-ekslab
      no-publicly-accessible: true
      backup-retention-period: 0
      storage-type: gp2
- name: eks_cluster
  endpoint:
    path: /create-cluster
    method: POST
    data_selector: cluster
    params:
      name: pod-security-cluster-demo
      kubernetes-version: '1.33'
      role-arn: $CLUSTER_ROLE_ARN
      access-config: authenticationMode=API_AND_CONFIG_MAP
      resources-vpc-config: subnetIds=$PUBLIC_SUBNET_1,$PUBLIC_SUBNET_2,$PRIVATE_SUBNET_1,$PRIVATE_SUBNET_2
- name: managed_node_group
  endpoint:
    path: /create-nodegroup
    method: POST
    data_selector: nodegroup
    params:
      cluster-name: pod-security-cluster-demo
      nodegroup-name: workers
      subnets: $PRIVATE_SUBNET_1,$PRIVATE_SUBNET_2
      node-role: $NODE_ROLE_ARN
      instance-types: m5.large
      scaling-config: minSize=1,maxSize=3,desiredSize=2
      disk-size: 20
      capacity-type: ON_DEMAND
- name: security_group_for_management
  endpoint:
    path: /create-security-group
    method: POST
    data_selector: security_group
    params:
      group-name: EKS-Management-SG
      description: Security group for EKS management instance
      vpc-id: $VPC_ID
- name: pod_security_group
  endpoint:
    path: /create-security-group
    method: POST
    data_selector: pod_security_group
    params:
      description: Pod Security Group - Database Access
      group-name: POD_SG
      vpc-id: ${VPC_ID}
- name: EKSCluster
  endpoint:
    path: /v1/eks/cluster
    method: GET
    data_selector: clusters
    params: {}
- name: IAMRole
  endpoint:
    path: /v1/iam/roles
    method: GET
    data_selector: roles
    params: {}
- name: node_group_security_group
  endpoint:
    path: /describe-security-groups
    method: GET
    data_selector: SecurityGroups[0].GroupId
    params:
      filters: Name=tag:Name,Values=eks-cluster-sg-pod-security-cluster-demo-* Name=vpc-id,Values=${VPC_ID}
- name: rds_security_group
  endpoint:
    path: /describe-db-instances
    method: GET
    data_selector: DBInstances[0].VpcSecurityGroups[0].VpcSecurityGroupId
    params:
      db-instance-identifier: rds-ekslab
- name: POD_SG
  endpoint:
    path: /create-security-group
    method: POST
    data_selector: SecurityGroup
    params:
      description: Pod Security Group - Database Access
      group_name: POD_SG
      vpc_id: ${VPC_ID}
- name: RDS_Security_Group
  endpoint:
    path: /aws/ec2/create-security-group
    method: POST
    data_selector: SecurityGroupId
    params:
      description: RDS Security Group - PostgreSQL Database
      group_name: RDS_SG
      vpc_id: ${VPC_ID}
- name: RDS_Instance
  endpoint:
    path: /aws/rds/create-db-instance
    method: POST
    data_selector: DBInstanceIdentifier
    params:
      db_instance_identifier: rds-ekslab
      db_instance_class: db.t3.micro
      engine: postgres
      master_username: postgres
      master_user_password: ${RDS_PASSWORD}
      allocated_storage: 20
      vpc_security_group_ids: ${RDS_SG}
      db_subnet_group_name: rds-ekslab
      no_publicly_accessible: true
      backup_retention_period: 0
      storage_type: gp2
- name: cluster
  endpoint:
    path: /services/data/vXX.X/sobjects/Cluster
    method: GET
    data_selector: records
- name: node_group
  endpoint:
    path: /services/data/vXX.X/sobjects/NodeGroup
    method: GET
    data_selector: records
- name: RDS_SG
  endpoint:
    path: /create-security-group
    method: POST
    data_selector: SecurityGroupId
    params:
      description: RDS Security Group - PostgreSQL Database
      group-name: RDS_SG
      vpc-id: ${VPC_ID}
- name: DB_Subnet_Group
  endpoint:
    path: /create-db-subnet-group
    method: POST
    data_selector: DBSubnetGroupName
    params:
      db-subnet-group-name: rds-ekslab
      db-subnet-group-description: Subnet group for EKS lab RDS instance
      subnet-ids:
      - ${PRIVATE_SUBNET_1}
      - ${PRIVATE_SUBNET_2}
- name: security_group
  endpoint:
    path: /v1/security-groups
    method: GET
    data_selector: securityGroups
    params: {}
- name: cluster
  endpoint:
    path: /clusters
    method: GET
    data_selector: clusters
    params: {}
- name: node_group
  endpoint:
    path: /node-groups
    method: GET
    data_selector: nodeGroups
    params: {}
- name: pod_security_cluster_demo
  endpoint:
    path: /services/data/vXX.X/sobjects/EKSCluster
    method: POST
    data_selector: cluster
    params: {}
- name: managed_node_group
  endpoint:
    path: /services/data/vXX.X/sobjects/NodeGroup
    method: POST
    data_selector: nodeGroup
    params: {}
- name: pod_security_group
  endpoint:
    path: /services/data/vXX.X/sobjects/SecurityGroup
    method: POST
    data_selector: securityGroup
    params: {}
- name: SecurityGroupPolicy
  endpoint:
    path: /services/data/vXX.X/sobjects/SecurityGroupPolicy
    method: GET
    data_selector: records
- name: VPCResourceController
  endpoint:
    path: /services/data/vXX.X/sobjects/VPCResourceController
    method: GET
    data_selector: records
- name: rds_security_group
  endpoint:
    path: /create-security-group
    method: POST
    data_selector: SecurityGroupId
    params:
      description: RDS Security Group - PostgreSQL Database
      group_name: RDS_SG
      vpc_id: ${VPC_ID}
- name: db_subnet_group
  endpoint:
    path: /create-db-subnet-group
    method: POST
    data_selector: DBSubnetGroupName
    params:
      db_subnet_group_name: rds-ekslab
      db_subnet_group_description: Subnet group for EKS lab RDS instance
      subnet_ids:
      - ${PRIVATE_SUBNET_1}
      - ${PRIVATE_SUBNET_2}
- name: PostgreSQL
  endpoint:
    path: /create-db-instance
    method: POST
    params:
      db_instance_identifier: rds-ekslab
      db_instance_class: db.t3.micro
      engine: postgres
      master_username: postgres
      master_user_password: ${RDS_PASSWORD}
      allocated_storage: 20
      vpc_security_group_ids: ${RDS_SG}
      db_subnet_group_name: rds-ekslab
      no_publicly_accessible: true
      backup_retention_period: 0
      storage_type: gp2
- name: cluster
  endpoint:
    path: /clusters
    method: GET
    data_selector: clusters
    params: {}
- name: nodegroup
  endpoint:
    path: /nodegroups
    method: GET
    data_selector: nodegroups
    params: {}
- name: security_group
  endpoint:
    path: /security-groups
    method: POST
    data_selector: SecurityGroupId
    params:
      description: RDS Security Group - PostgreSQL Database
      group_name: RDS_SG
      vpc_id: ${VPC_ID}
- name: db_instance
  endpoint:
    path: /db-instances
    method: POST
    data_selector: DBInstanceIdentifier
    params:
      db_instance_identifier: rds-ekslab
      db_instance_class: db.t3.micro
      engine: postgres
      master_username: postgres
      master_user_password: ${RDS_PASSWORD}
      allocated_storage: 20
      vpc_security_group_ids: ${RDS_SG}
      db_subnet_group_name: rds-ekslab
      no_publicly_accessible: true
      backup_retention_period: 0
      storage_type: gp2
- name: SecurityGroupPolicy
  endpoint:
    path: /vpcresources.k8s.aws/v1beta1/securitygrouppolicies
    method: GET
    data_selector: items
    params: {}
- name: pod
  endpoint:
    path: /v1/pods
    method: GET
    data_selector: items
    params:
      labelSelector: app=green-pod
- name: EKS Cluster Service Role
  endpoint:
    path: /iam/create-role
    method: POST
    data_selector: Vpc.VpcId
    params:
      role-name: EKSClusterRole
      assume-role-policy-document: '{"Version": "2012-10-17","Statement": [{"Effect":
        "Allow","Principal": {"Service": "eks.amazonaws.com"},"Action": "sts:AssumeRole"}]}'
- name: EKS Node Group Role
  endpoint:
    path: /iam/create-role
    method: POST
    data_selector: Vpc.VpcId
    params:
      role-name: EKSNodeGroupRole
      assume-role-policy-document: '{"Version": "2012-10-17","Statement": [{"Effect":
        "Allow","Principal": {"Service": "ec2.amazonaws.com"},"Action": "sts:AssumeRole"}]}'
- name: EKS Management Role
  endpoint:
    path: /iam/create-role
    method: POST
    data_selector: Vpc.VpcId
    params:
      role-name: EKS-Management-Role
      assume-role-policy-document: '{"Version": "2012-10-17","Statement": [{"Effect":
        "Allow","Principal": {"Service": "ec2.amazonaws.com"},"Action": "sts:AssumeRole"}]}'
- name: VPC Creation
  endpoint:
    path: /ec2/create-vpc
    method: POST
    data_selector: Vpc.VpcId
    params:
      cidr-block: 10.0.0.0/16
      name: eks-security-demo
- name: Public Subnet 1
  endpoint:
    path: /ec2/create-subnet
    method: POST
    data_selector: Subnet.SubnetId
    params:
      vpc-id: $VPC_ID
      cidr-block: 10.0.1.0/24
      availability-zone: eu-west-1a
- name: Public Subnet 2
  endpoint:
    path: /ec2/create-subnet
    method: POST
    data_selector: Subnet.SubnetId
    params:
      vpc-id: $VPC_ID
      cidr-block: 10.0.2.0/24
      availability-zone: eu-west-1b
- name: Private Subnet 1
  endpoint:
    path: /ec2/create-subnet
    method: POST
    data_selector: Subnet.SubnetId
    params:
      vpc-id: $VPC_ID
      cidr-block: 10.0.3.0/24
      availability-zone: eu-west-1a
- name: Private Subnet 2
  endpoint:
    path: /ec2/create-subnet
    method: POST
    data_selector: Subnet.SubnetId
    params:
      vpc-id: $VPC_ID
      cidr-block: 10.0.4.0/24
      availability-zone: eu-west-1b
- name: pod_security_group
  endpoint:
    path: /services/data/vXX.X/sobjects/POD_SG
    method: POST
    data_selector: ''
    params: {}
- name: security_group_policy
  endpoint:
    path: /services/data/vXX.X/sobjects/SecurityGroupPolicy
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: RDS_SG
  endpoint:
    path: /create-security-group
    method: POST
    data_selector: SecurityGroups
    params:
      description: RDS Security Group - PostgreSQL Database
      group_name: RDS_SG
      vpc_id: ${VPC_ID}
- name: RDS_Instance
  endpoint:
    path: /create-db-instance
    method: POST
    data_selector: DBInstances
    params:
      db_instance_identifier: rds-ekslab
      db_instance_class: db.t3.micro
      engine: postgres
      master_username: postgres
      master_user_password: ${RDS_PASSWORD}
      allocated_storage: 20
      vpc_security_group_ids: ${RDS_SG}
      db_subnet_group_name: rds-ekslab
      no_publicly_accessible: true
      backup_retention_period: 0
      storage_type: gp2
- name: eks_cluster
  endpoint:
    path: /create-cluster
    method: POST
    data_selector: cluster
    params:
      name: pod-security-cluster-demo
      kubernetes-version: '1.33'
      access-config: authenticationMode=API_AND_CONFIG_MAP
      resources-vpc-config: subnetIds=$PUBLIC_SUBNET_1,$PUBLIC_SUBNET_2,$PRIVATE_SUBNET_1,$PRIVATE_SUBNET_2
- name: node_group
  endpoint:
    path: /create-nodegroup
    method: POST
    data_selector: nodegroup
    params:
      cluster-name: pod-security-cluster-demo
      nodegroup-name: workers
      subnets: $PRIVATE_SUBNET_1,$PRIVATE_SUBNET_2
      node-role: $NODE_ROLE_ARN
      instance-types: m5.large
      scaling-config: minSize=1,maxSize=3,desiredSize=2
      disk-size: 20
      capacity-type: ON_DEMAND
- name: security_group_pod
  endpoint:
    path: /services/data/vXX.X/sobjects/SecurityGroupPolicy
    method: GET
    data_selector: records
    params: {}
- name: green-pod
  endpoint:
    path: /green-pod
    method: POST
    data_selector: status
    params: {}
- name: red-pod
  endpoint:
    path: /red-pod
    method: POST
    data_selector: status
    params: {}
- name: cluster_vpc
  endpoint:
    path: /services/data/vXX.X/sobjects/ClusterVPC
    method: GET
    data_selector: records
    params: {}
- name: pod_security_group
  endpoint:
    path: /services/data/vXX.X/sobjects/PodSecurityGroup
    method: GET
    data_selector: records
    params: {}
- name: security_group_policy
  endpoint:
    path: /apis/networking/v1/securitygrouppolicies
    method: GET
    data_selector: items
- name: vpc_resource_controller
  endpoint:
    path: /apis/vpcresourcecontroller/v1/resources
    method: GET
    data_selector: items
- name: eks_cluster
  endpoint:
    path: /eks/create-cluster
    method: POST
    data_selector: clusterDetails
    params:
      name: pod-security-cluster-demo
      kubernetes_version: '1.33'
      role_arn: $CLUSTER_ROLE_ARN
      access_config: authenticationMode=API_AND_CONFIG_MAP
      resources_vpc_config: subnetIds=$PUBLIC_SUBNET_1,$PUBLIC_SUBNET_2,$PRIVATE_SUBNET_1,$PRIVATE_SUBNET_2
- name: managed_node_group
  endpoint:
    path: /eks/create-nodegroup
    method: POST
    data_selector: nodeGroupDetails
    params:
      cluster_name: pod-security-cluster-demo
      nodegroup_name: workers
      subnets: $PRIVATE_SUBNET_1,$PRIVATE_SUBNET_2
      node_role: $NODE_ROLE_ARN
      instance_types: m5.large
      scaling_config: minSize=1,maxSize=3,desiredSize=2
      disk_size: 20
      capacity_type: ON_DEMAND
- name: eks_cluster
  endpoint:
    path: /services/eks/clusters
    method: POST
    data_selector: cluster
    params:
      name: pod-security-cluster-demo
      kubernetes_version: '1.33'
      role_arn: ${CLUSTER_ROLE_ARN}
      access_config: authenticationMode=API_AND_CONFIG_MAP
      resources_vpc_config: subnetIds=${PUBLIC_SUBNET_1},${PUBLIC_SUBNET_2},${PRIVATE_SUBNET_1},${PRIVATE_SUBNET_2}
- name: managed_node_group
  endpoint:
    path: /services/eks/nodegroups
    method: POST
    data_selector: nodegroup
    params:
      cluster_name: pod-security-cluster-demo
      nodegroup_name: workers
      subnets: ${PRIVATE_SUBNET_1},${PRIVATE_SUBNET_2}
      node_role: ${NODE_ROLE_ARN}
      instance_types: m5.large
      scaling_config: minSize=1,maxSize=3,desiredSize=2
      disk_size: 20
      capacity_type: ON_DEMAND
- name: management_instance
  endpoint:
    path: /services/ec2/instances
    method: POST
    data_selector: instance
    params:
      image_id: ${AMI_ID}
      count: 1
      instance_type: t3.micro
      subnet_id: ${PUBLIC_SUBNET_1}
      security_group_ids: ${EC2_SG}
      iam_instance_profile: EKS-Management-Profile
      user_data: file://user-data.sh
      tag_specifications: ResourceType=instance,Tags=[{Key=Name,Value=EKS-Management},{Key=Environment,Value=Demo}]
- name: pod_security_group
  endpoint:
    path: /services/ec2/security-groups
    method: POST
    data_selector: security_group
    params:
      description: Pod Security Group - Database Access
      group_name: POD_SG
      vpc_id: ${VPC_ID}
- name: security_group_policy
  endpoint:
    path: /services/data/vXX.X/sobjects/SecurityGroupPolicy
    method: GET
    data_selector: records
    params: {}
- name: vpc_resource_controller
  endpoint:
    path: /services/data/vXX.X/sobjects/VPCResourceController
    method: GET
    data_selector: records
    params: {}
- name: rds_security_group
  endpoint:
    path: /aws/ec2/create-security-group
    method: POST
    data_selector: SecurityGroup
    params:
      description: RDS Security Group - PostgreSQL Database
      group_name: RDS_SG
      vpc_id: ${VPC_ID}
- name: rds_db_instance
  endpoint:
    path: /aws/rds/create-db-instance
    method: POST
    data_selector: DBInstance
    params:
      db_instance_identifier: rds-ekslab
      db_instance_class: db.t3.micro
      engine: postgres
      master_username: postgres
      master_user_password: ${RDS_PASSWORD}
      allocated_storage: 20
      vpc_security_group_ids: ${RDS_SG}
      db_subnet_group_name: rds-ekslab
      no_publicly_accessible: true
      backup_retention_period: 0
      storage_type: gp2
- name: security_group_policy
  endpoint:
    path: /v1beta1/securitygrouppolicies
    method: GET
    data_selector: items
    params: {}
- name: eks_cluster
  endpoint:
    path: /services/eks/cluster
    method: POST
    data_selector: cluster
    params:
      name: pod-security-cluster-demo
      kubernetes_version: '1.33'
      role_arn: $CLUSTER_ROLE_ARN
      access_config: authenticationMode=API_AND_CONFIG_MAP
      resources_vpc_config: subnetIds=$PUBLIC_SUBNET_1,$PUBLIC_SUBNET_2,$PRIVATE_SUBNET_1,$PRIVATE_SUBNET_2
- name: managed_node_group
  endpoint:
    path: /services/eks/nodegroup
    method: POST
    data_selector: nodegroup
    params:
      cluster_name: pod-security-cluster-demo
      nodegroup_name: workers
      subnets: $PRIVATE_SUBNET_1 $PRIVATE_SUBNET_2
      node_role: $NODE_ROLE_ARN
      instance_types: m5.large
      scaling_config: minSize=1,maxSize=3,desiredSize=2
      disk_size: 20
      capacity_type: ON_DEMAND
- name: management_instance
  endpoint:
    path: /services/ec2/instance
    method: POST
    data_selector: instance
    params:
      image_id: $AMI_ID
      count: 1
      instance_type: t3.micro
      subnet_id: $PUBLIC_SUBNET_1
      security_group_ids: $EC2_SG
      iam_instance_profile: EKS-Management-Profile
      user_data: file://user-data.sh
      tag_specifications: ResourceType=instance,Tags=[{Key=Name,Value=EKS-Management},{Key=Environment,Value=Demo}]
- name: pod_security_group
  endpoint:
    path: /services/ec2/security-group
    method: POST
    data_selector: securityGroup
    params:
      description: Pod Security Group - Database Access
      group_name: POD_SG
      vpc_id: ${VPC_ID}
- name: SecurityGroupPolicy
  endpoint:
    path: /apis/securitygroups.k8s.aws/v1/securitygrouppolicies
    method: GET
    data_selector: items
- name: VPCResourceController
  endpoint:
    path: /apis/vpc.k8s.aws/v1/vpcresourcecontrollers
    method: GET
    data_selector: items
- name: rds_instance
  endpoint:
    path: /rds/db-instances
    method: GET
    data_selector: DBInstances
    params: {}
- name: green_pod
  endpoint:
    path: /services/data/vXX.X/sobjects/greenPod
    method: GET
    data_selector: records
    params: {}
- name: red_pod
  endpoint:
    path: /services/data/vXX.X/sobjects/redPod
    method: GET
    data_selector: records
    params: {}
- name: cluster
  endpoint:
    path: /cluster/pod-security-cluster-demo
    method: GET
    data_selector: cluster
- name: nodegroup
  endpoint:
    path: /nodegroup/workers
    method: GET
    data_selector: nodegroup
- name: security_group
  endpoint:
    path: /security-group/POD_SG
    method: CREATE
    data_selector: securityGroup
- name: security_group_policy
  endpoint:
    path: /v1/securityGroupPolicies
    method: GET
    data_selector: policies
    params: {}
- name: security_group
  endpoint:
    path: /services/data/vXX.X/sobjects/SecurityGroup
    method: GET
    data_selector: records
    params: {}
- name: rds_instance
  endpoint:
    path: /services/data/vXX.X/sobjects/RDSInstance
    method: GET
    data_selector: records
    params: {}
- name: public_subnet_tags
  endpoint:
    path: /create-tags
    method: POST
    data_selector: tags
    params:
      Key: kubernetes.io/cluster/pod-security-cluster-demo
      Value: shared
- name: private_subnet_tags
  endpoint:
    path: /create-tags
    method: POST
    data_selector: tags
    params:
      Key: kubernetes.io/cluster/pod-security-cluster-demo
      Value: shared
- name: rds_instance
  endpoint:
    path: /describe-db-instances
    method: GET
    data_selector: DBInstances
    params: {}
- name: security_group
  endpoint:
    path: /describe-security-groups
    method: GET
    data_selector: SecurityGroups
    params: {}
- name: green_pod
  endpoint:
    path: /services/data/vXX.X/sobjects/GreenPod
    method: GET
    data_selector: records
    params: {}
- name: red_pod
  endpoint:
    path: /services/data/vXX.X/sobjects/RedPod
    method: GET
    data_selector: records
    params: {}
- name: EKS Cluster
  endpoint:
    path: /eks/clusters
    method: POST
    data_selector: cluster
    params:
      name: pod-security-cluster-demo
      kubernetes-version: '1.33'
      role-arn: $CLUSTER_ROLE_ARN
      access-config: authenticationMode=API_AND_CONFIG_MAP
      resources-vpc-config: subnetIds=$PUBLIC_SUBNET_1,$PUBLIC_SUBNET_2,$PRIVATE_SUBNET_1,$PRIVATE_SUBNET_2
- name: Managed Node Group
  endpoint:
    path: /eks/nodegroups
    method: POST
    data_selector: nodegroup
    params:
      cluster-name: pod-security-cluster-demo
      nodegroup-name: workers
      subnets: $PRIVATE_SUBNET_1,$PRIVATE_SUBNET_2
      node-role: $NODE_ROLE_ARN
      instance-types: m5.large
      scaling-config: minSize=1,maxSize=3,desiredSize=2
      disk-size: 20
      capacity-type: ON_DEMAND
- name: Security Group for Pods
  endpoint:
    path: /ec2/security-groups
    method: POST
    data_selector: securityGroup
    params:
      description: Pod Security Group - Database Access
      group-name: POD_SG
      vpc-id: ${VPC_ID}
- name: cluster
  endpoint:
    path: /services/data/vXX.X/sobjects/EKSCluster
    method: POST
    data_selector: clusterData
    params:
      name: pod-security-cluster-demo
      kubernetes_version: '1.33'
- name: node_group
  endpoint:
    path: /services/data/vXX.X/sobjects/EKSNodeGroup
    method: POST
    data_selector: nodeGroupData
    params:
      cluster_name: pod-security-cluster-demo
      nodegroup_name: workers
      instance_types: m5.large
      scaling_config: minSize=1,maxSize=3,desiredSize=2
      disk_size: '20'
      capacity_type: ON_DEMAND
- name: rds_security_group
  endpoint:
    path: /services/data/vXX.X/sobjects/RDSSecurityGroup
    method: POST
    data_selector: SecurityGroupId
    params:
      description: RDS Security Group - PostgreSQL Database
      group_name: RDS_SG
      vpc_id: ${VPC_ID}
- name: pod_security_group
  endpoint:
    path: /services/data/vXX.X/sobjects/PodSecurityGroup
    method: POST
    data_selector: SecurityGroupId
    params:
      description: Pod security group
      group_name: POD_SG
      vpc_id: ${VPC_ID}
- name: rds_instance
  endpoint:
    path: /services/data/vXX.X/sobjects/RDSInstance
    method: POST
    data_selector: DBInstanceIdentifier
    params:
      db_instance_identifier: rds-ekslab
      db_instance_class: db.t3.micro
      engine: postgres
      master_username: postgres
      master_user_password: ${RDS_PASSWORD}
      allocated_storage: 20
      vpc_security_group_ids: ${RDS_SG}
      db_subnet_group_name: rds-ekslab
      no_publicly_accessible: true
      backup_retention_period: 0
      storage_type: gp2
- name: RDS_SG
  endpoint:
    path: /services/data/vXX.X/sobjects/RDS_SG
    method: GET
    data_selector: records
    params: {}
- name: POD_SG
  endpoint:
    path: /services/data/vXX.X/sobjects/POD_SG
    method: GET
    data_selector: records
    params: {}
- name: green-pod
  endpoint:
    path: /green-pod
    method: POST
    data_selector: pod
    params: {}
- name: red-pod
  endpoint:
    path: /red-pod
    method: POST
    data_selector: pod
    params: {}
- name: SecurityGroupPolicy
  endpoint:
    path: /api/v1/securityGroupPolicies
    method: POST
    data_selector: items
- name: VPCResourceController
  endpoint:
    path: /api/v1/vpcResourceControllers
    method: POST
    data_selector: items
- name: security_group_policy
  endpoint:
    path: /api/security-group-policy
    method: POST
    data_selector: data
    params: {}
- name: vpc_resource_controller
  endpoint:
    path: /api/vpc-resource-controller
    method: GET
    data_selector: data
    params: {}
- name: eks_cluster
  endpoint:
    path: /eks/create-cluster
    method: POST
    data_selector: cluster
    params:
      name: pod-security-cluster-demo
      kubernetes_version: '1.33'
      role_arn: $CLUSTER_ROLE_ARN
      access_config: authenticationMode=API_AND_CONFIG_MAP
      resources_vpc_config: subnetIds=$PUBLIC_SUBNET_1,$PUBLIC_SUBNET_2,$PRIVATE_SUBNET_1,$PRIVATE_SUBNET_2
- name: managed_node_group
  endpoint:
    path: /eks/create-nodegroup
    method: POST
    data_selector: nodegroup
    params:
      cluster_name: pod-security-cluster-demo
      nodegroup_name: workers
      subnets: $PRIVATE_SUBNET_1,$PRIVATE_SUBNET_2
      node_role: $NODE_ROLE_ARN
      instance_types: m5.large
      scaling_config: minSize=1,maxSize=3,desiredSize=2
      disk_size: 20
      capacity_type: ON_DEMAND
- name: security_group_for_management
  endpoint:
    path: /ec2/create-security-group
    method: POST
    data_selector: securityGroup
    params:
      group_name: EKS-Management-SG
      description: Security group for EKS management instance
      vpc_id: $VPC_ID
- name: pod_security_group
  endpoint:
    path: /ec2/create-security-group
    method: POST
    data_selector: securityGroup
    params:
      description: Pod Security Group - Database Access
      group_name: POD_SG
      vpc_id: ${VPC_ID}
- name: security_group
  endpoint:
    path: /ec2/create-security-group
    method: POST
    data_selector: SecurityGroupId
    params:
      description: RDS Security Group - PostgreSQL Database
      group_name: RDS_SG
      vpc_id: ${VPC_ID}
- name: db_instance
  endpoint:
    path: /rds/create-db-instance
    method: POST
    data_selector: DBInstanceIdentifier
    params:
      db_instance_identifier: rds-ekslab
      db_instance_class: db.t3.micro
      engine: postgres
      master_username: postgres
      master_user_password: ${RDS_PASSWORD}
      allocated_storage: 20
      vpc_security_group_ids: ${RDS_SG}
      db_subnet_group_name: rds-ekslab
      no_publicly_accessible: true
      backup_retention_period: 0
      storage_type: gp2
- name: eks_cluster
  endpoint:
    path: /eks/create-cluster
    method: POST
    data_selector: cluster
    params:
      name: pod-security-cluster-demo
      kubernetes_version: '1.33'
      role_arn: $CLUSTER_ROLE_ARN
      access_config: authenticationMode=API_AND_CONFIG_MAP
      resources_vpc_config: subnetIds=$PUBLIC_SUBNET_1,$PUBLIC_SUBNET_2,$PRIVATE_SUBNET_1,$PRIVATE_SUBNET_2
- name: managed_node_group
  endpoint:
    path: /eks/create-nodegroup
    method: POST
    data_selector: nodegroup
    params:
      cluster_name: pod-security-cluster-demo
      nodegroup_name: workers
      subnets: $PRIVATE_SUBNET_1,$PRIVATE_SUBNET_2
      node_role: $NODE_ROLE_ARN
      instance_types: m5.large
      scaling_config: minSize=1,maxSize=3,desiredSize=2
      disk_size: 20
      capacity_type: ON_DEMAND
- name: security_group_for_pods
  endpoint:
    path: /ec2/create-security-group
    method: POST
    data_selector: security_group
    params:
      description: Pod Security Group - Database Access
      group_name: POD_SG
      vpc_id: ${VPC_ID}
- name: green-pod
  endpoint:
    path: /green-pod
    method: POST
    data_selector: metadata
    params: {}
- name: red-pod
  endpoint:
    path: /red-pod
    method: POST
    data_selector: metadata
    params: {}
- name: RDS Security Group
  endpoint:
    path: /create-security-group
    method: POST
    data_selector: SecurityGroupId
    params:
      description: RDS Security Group - PostgreSQL Database
      group_name: RDS_SG
      vpc_id: ${VPC_ID}
- name: DB Subnet Group
  endpoint:
    path: /create-db-subnet-group
    method: POST
    data_selector: DBSubnetGroupName
    params:
      db_subnet_group_name: rds-ekslab
      db_subnet_group_description: Subnet group for EKS lab RDS instance
      subnet_ids:
      - ${PRIVATE_SUBNET_1}
      - ${PRIVATE_SUBNET_2}
- name: RDS Instance
  endpoint:
    path: /create-db-instance
    method: POST
    data_selector: DBInstanceIdentifier
    params:
      db_instance_identifier: rds-ekslab
      db_instance_class: db.t3.micro
      engine: postgres
      master_username: postgres
      master_user_password: ${RDS_PASSWORD}
      allocated_storage: 20
      vpc_security_group_ids:
      - ${RDS_SG}
      db_subnet_group_name: rds-ekslab
      no_publicly_accessible: true
      backup_retention_period: 0
      storage_type: gp2
- name: green_pod
  endpoint:
    path: /services/data/vXX.X/sobjects/GreenPod
    method: GET
    data_selector: records
    params: {}
- name: red_pod
  endpoint:
    path: /services/data/vXX.X/sobjects/RedPod
    method: GET
    data_selector: records
    params: {}
- name: create_tags_public_subnets
  endpoint:
    path: /create-tags
    method: POST
    data_selector: tags
    params:
      resources: $PUBLIC_SUBNET_1, $PUBLIC_SUBNET_2
      tags:
      - Key: kubernetes.io/cluster/pod-security-cluster-demo
        Value: shared
      - Key: kubernetes.io/role/elb
        Value: '1'
- name: create_tags_private_subnets
  endpoint:
    path: /create-tags
    method: POST
    data_selector: tags
    params:
      resources: $PRIVATE_SUBNET_1, $PRIVATE_SUBNET_2
      tags:
      - Key: kubernetes.io/cluster/pod-security-cluster-demo
        Value: shared
      - Key: kubernetes.io/role/internal-elb
        Value: '1'
- name: RDS_SG
  endpoint:
    path: /services/data/vXX.X/sobjects/RDS_SG
    method: POST
    data_selector: SecurityGroupId
    params:
      description: RDS Security Group - PostgreSQL Database
      group_name: RDS_SG
      vpc_id: ${VPC_ID}
- name: POD_SG
  endpoint:
    path: /services/data/vXX.X/sobjects/POD_SG
    method: POST
    data_selector: SecurityGroupId
    params:
      description: Pod Security Group
      group_name: POD_SG
      vpc_id: ${VPC_ID}
- name: security_group_policy
  endpoint:
    path: /securityGroupPolicies
    method: POST
    data_selector: data
    params: {}
- name: vpc_resource_controller
  endpoint:
    path: /vpcResourceControllers
    method: GET
    data_selector: data
    params: {}
- name: subnet_tags
  endpoint:
    path: /create-tags
    method: POST
    data_selector: tags
    params: {}
- name: route_table
  endpoint:
    path: /create-route-table
    method: POST
    data_selector: routeTable
    params: {}
- name: nat_gateway
  endpoint:
    path: /create-nat-gateway
    method: POST
    data_selector: natGateway
    params: {}
- name: eks_cluster
  endpoint:
    path: /create-cluster
    method: POST
    data_selector: cluster
    params: {}
- name: managed_node_group
  endpoint:
    path: /create-nodegroup
    method: POST
    data_selector: nodegroup
    params: {}
- name: security_group
  endpoint:
    path: /create-security-group
    method: POST
    data_selector: securityGroup
    params: {}
- name: EKSClusterRole
  endpoint:
    path: /CreateRole
    method: POST
    data_selector: Role
    params: {}
- name: EKSNodeGroupRole
  endpoint:
    path: /CreateRole
    method: POST
    data_selector: Role
    params: {}
- name: EKS-Management-Role
  endpoint:
    path: /CreateRole
    method: POST
    data_selector: Role
    params: {}
- name: RDS_SG
  endpoint:
    path: /services/data/vXX.X/sobjects/RDS_SG
    method: GET
    data_selector: records
    params: {}
- name: pod_security_group
  endpoint:
    path: /create-security-group
    method: POST
    data_selector: SecurityGroup
    params:
      description: Pod Security Group - Database Access
      group_name: POD_SG
      vpc_id: ${VPC_ID}
- name: security_group_policy
  endpoint:
    path: /services/data/vXX.X/security-groups
    method: POST
    data_selector: securityGroupPolicy
    params: {}
- name: green_pod
  endpoint:
    path: /services/data/vXX.X/sobjects/green_pod
    method: GET
    data_selector: records
    params: {}
- name: red_pod
  endpoint:
    path: /services/data/vXX.X/sobjects/red_pod
    method: GET
    data_selector: records
    params: {}
- name: green_pod
  endpoint:
    path: /api/v1/namespaces/networking/pods/green-pod
    method: GET
    data_selector: status
    params: {}
- name: red_pod
  endpoint:
    path: /api/v1/namespaces/networking/pods/red-pod
    method: GET
    data_selector: status
    params: {}
- name: posts
  endpoint:
    path: /databases/{database}/documents/posts
    method: GET
    data_selector: documents
- name: eks_cluster
  endpoint:
    path: /services/data/vXX.X/sobjects/EKSCluster
    method: POST
    data_selector: cluster
    params:
      name: pod-security-cluster-demo
      kubernetes_version: '1.33'
      role_arn: $CLUSTER_ROLE_ARN
      access_config: authenticationMode=API_AND_CONFIG_MAP
      resources_vpc_config: subnetIds=$PUBLIC_SUBNET_1,$PUBLIC_SUBNET_2,$PRIVATE_SUBNET_1,$PRIVATE_SUBNET_2
- name: managed_node_group
  endpoint:
    path: /services/data/vXX.X/sobjects/ManagedNodeGroup
    method: POST
    data_selector: node_group
    params:
      cluster_name: pod-security-cluster-demo
      nodegroup_name: workers
      subnets: $PRIVATE_SUBNET_1 $PRIVATE_SUBNET_2
      node_role: $NODE_ROLE_ARN
      instance_types: m5.large
      scaling_config: minSize=1,maxSize=3,desiredSize=2
      disk_size: 20
      capacity_type: ON_DEMAND
- name: security_group
  endpoint:
    path: /services/data/vXX.X/sobjects/SecurityGroup
    method: POST
    data_selector: security_group
    params:
      description: Pod Security Group - Database Access
      group_name: POD_SG
      vpc_id: ${VPC_ID}
- name: Pizza Map
  endpoint:
    path: /mcp
    method: GET
    data_selector: widgets
    params: {}
- name: Pizza Carousel
  endpoint:
    path: /mcp
    method: GET
    data_selector: widgets
    params: {}
- name: Pizza Album
  endpoint:
    path: /mcp
    method: GET
    data_selector: widgets
    params: {}
- name: Pizza List
  endpoint:
    path: /mcp
    method: GET
    data_selector: widgets
    params: {}
- name: Pizza Video
  endpoint:
    path: /mcp
    method: GET
    data_selector: widgets
    params: {}
- name: agent
  endpoint:
    path: /agent/invocations
    method: POST
    data_selector: response
- name: rds_security_group
  endpoint:
    path: /ec2/create-security-group
    method: POST
    data_selector: SecurityGroups
    params:
      description: RDS Security Group - PostgreSQL Database
      group_name: RDS_SG
      vpc_id: ${VPC_ID}
- name: pod_security_group
  endpoint:
    path: /ec2/create-security-group
    method: POST
    data_selector: SecurityGroups
    params:
      description: Pod Security Group
      group_name: POD_SG
      vpc_id: ${VPC_ID}
- name: db_instance
  endpoint:
    path: /rds/create-db-instance
    method: POST
    data_selector: DBInstances
    params:
      db_instance_identifier: rds-ekslab
      db_instance_class: db.t3.micro
      engine: postgres
      master_username: postgres
      master_user_password: ${RDS_PASSWORD}
      allocated_storage: 20
      vpc_security_group_ids: ${RDS_SG}
      db_subnet_group_name: rds-ekslab
      no_publicly_accessible: true
      backup_retention_period: 0
      storage_type: gp2
- name: security_group_policy
  endpoint:
    path: /vpcresources.k8s.aws/securitygrouppolicies
    method: POST
    data_selector: securitygrouppolicies
    params:
      podSelector:
        matchLabels:
          app: green-pod
      securityGroups:
        groupIds:
        - ${POD_SG}
- name: Python Variables and Data Types
  endpoint:
    path: /learn/python/variables-and-data-types
    method: GET
    data_selector: content
    params: {}
- name: Operators in Python
  endpoint:
    path: /learn/python/operators
    method: GET
    data_selector: content
    params: {}
- name: security_group_pod
  endpoint:
    path: /services/eks/security_group_pods
    method: POST
    data_selector: records
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: EKS Cluster
  endpoint:
    path: /eks/create-cluster
    method: POST
    data_selector: cluster
    params:
      name: pod-security-cluster-demo
      kubernetes-version: '1.33'
      role-arn: $CLUSTER_ROLE_ARN
      access-config: authenticationMode=API_AND_CONFIG_MAP
      resources-vpc-config: subnetIds=$PUBLIC_SUBNET_1,$PUBLIC_SUBNET_2,$PRIVATE_SUBNET_1,$PRIVATE_SUBNET_2
- name: Managed Node Group
  endpoint:
    path: /eks/create-nodegroup
    method: POST
    data_selector: nodegroup
    params:
      cluster-name: pod-security-cluster-demo
      nodegroup-name: workers
      subnets: $PRIVATE_SUBNET_1 $PRIVATE_SUBNET_2
      node-role: $NODE_ROLE_ARN
      instance-types: m5.large
      scaling-config: minSize=1,maxSize=3,desiredSize=2
      disk-size: 20
      capacity-type: ON_DEMAND
- name: EKS Access Configuration
  endpoint:
    path: /eks/create-access-entry
    method: POST
    data_selector: access-entry
    params:
      cluster-name: pod-security-cluster-demo
      principal-arn: $MANAGEMENT_ROLE_ARN
- name: Pod Security Group
  endpoint:
    path: /ec2/create-security-group
    method: POST
    data_selector: security-group
    params:
      description: Pod Security Group - Database Access
      group-name: POD_SG
      vpc-id: ${VPC_ID}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: db_instance
  endpoint:
    path: /create-db-instance
    method: POST
    data_selector: DBInstances
    params:
      db-instance-identifier: rds-ekslab
      engine: postgres
      master-username: postgres
      allocated-storage: 20
      vpc-security-group-ids: ${RDS_SG}
      db-subnet-group-name: rds-ekslab
      no-publicly-accessible: true
      backup-retention-period: 0
      storage-type: gp2
- name: db_subnet_group
  endpoint:
    path: /create-db-subnet-group
    method: POST
    data_selector: DBSubnetGroups
    params:
      db-subnet-group-name: rds-ekslab
      db-subnet-group-description: Subnet group for EKS lab RDS instance
      subnet-ids: ${PRIVATE_SUBNET_1},${PRIVATE_SUBNET_2}
- name: data
  endpoint:
    path: /data
    method: GET
    data_selector: json
- name: posts
  endpoint:
    path: /databases/{database}/documents/posts
    method: GET
    data_selector: data
    params: {}
- name: Pizza Map
  endpoint:
    path: /mcp
    method: GET
    data_selector: widget markup
- name: Pizza Carousel
  endpoint:
    path: /mcp
    method: GET
    data_selector: widget markup
- name: Pizza Album
  endpoint:
    path: /mcp
    method: GET
    data_selector: widget markup
- name: Pizza List
  endpoint:
    path: /mcp
    method: GET
    data_selector: widget markup
- name: Pizza Video
  endpoint:
    path: /mcp
    method: GET
    data_selector: widget markup
- name: ExternalLambda1
  endpoint:
    path: /secure-lambda/ExternalLambda1
    method: POST
- name: ExternalLambda2
  endpoint:
    path: /secure-lambda/ExternalLambda2
    method: POST
- name: lambda1
  endpoint:
    path: /lambda1
    method: POST
- name: lambda2
  endpoint:
    path: /lambda2
    method: POST
- name: invoices
  endpoint:
    path: /invoices/{id}
    method: GET
    data_selector: invoice
    params: {}
- name: jobs
  endpoint:
    path: /jobs
    method: POST
    data_selector: status
    params: {}
- name: sidebar
  endpoint:
    path: /
    method: GET
    data_selector: sidebar
    params: {}
- name: container-node-app
  endpoint:
    path: /container-node-app
    method: POST
    data_selector: image
    params: {}
- name: prerequisites
  endpoint:
    path: /prerequisites
    method: GET
    data_selector: prerequisites
- name: why_learn_python
  endpoint:
    path: /why-learn-python
    method: GET
    data_selector: reasons
- name: key_characteristics
  endpoint:
    path: /key-characteristics
    method: GET
    data_selector: characteristics
- name: practical_uses
  endpoint:
    path: /practical-uses
    method: GET
    data_selector: uses
- name: hello_world
  endpoint:
    path: /hello-world
    method: GET
    data_selector: example
- name: python_variables_data_types
  endpoint:
    path: /python-variables-data-types
    method: GET
    data_selector: data_types
- name: operators
  endpoint:
    path: /operators
    method: GET
    data_selector: operators
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: podcast
  endpoint:
    path: /podcast/192
    method: GET
    data_selector: podcast_details
- name: data
  endpoint:
    path: /data
    method: GET
    data_selector: name, description
- name: Pods
  endpoint:
    path: /api/v1/pods
    method: GET
    data_selector: items
- name: Deployments
  endpoint:
    path: /apis/apps/v1/deployments
    method: GET
    data_selector: items
- name: Services
  endpoint:
    path: /api/v1/services
    method: GET
    data_selector: items
- name: ReplicaSets
  endpoint:
    path: /apis/apps/v1/replicasets
    method: GET
    data_selector: items
- name: DaemonSets
  endpoint:
    path: /apis/apps/v1/daemonsets
    method: GET
    data_selector: items
- name: StatefulSets
  endpoint:
    path: /apis/apps/v1/statefulsets
    method: GET
    data_selector: items
- name: Jobs
  endpoint:
    path: /apis/batch/v1/jobs
    method: GET
    data_selector: items
- name: CronJobs
  endpoint:
    path: /apis/batch/v1beta1/cronjobs
    method: GET
    data_selector: items
- name: ExternalLambda1
  endpoint:
    path: /secure-lambda/ExternalLambda1
    method: POST
- name: ExternalLambda2
  endpoint:
    path: /secure-lambda/ExternalLambda2
    method: POST
- name: lambda1
  endpoint:
    path: /lambda1
    method: POST
    params: {}
- name: lambda2
  endpoint:
    path: /lambda2
    method: POST
    params: {}
- name: Sidebar
  endpoint:
    path: /sidebar
    method: GET
    data_selector: components
    params: {}
- name: Menu
  endpoint:
    path: /menu
    method: GET
    data_selector: components
    params: {}
- name: MenuItem
  endpoint:
    path: /menuitem
    method: GET
    data_selector: components
    params: {}
- name: Submenu
  endpoint:
    path: /submenu
    method: GET
    data_selector: components
    params: {}
- name: Logo
  endpoint:
    path: /logo
    method: GET
    data_selector: components
    params: {}
- name: container-node-app
  endpoint:
    path: /container-node-app
    method: POST
    data_selector: application/json
- name: courses
  endpoint:
    path: /courses
    method: GET
    data_selector: data
    params: {}
notes:
- API versioning is the practice of transparently managing changes to your API.
- Managing an API boils down to defining and evolving data contracts and dealing with
  breaking changes.
- Every aspect of freeCodeCamp is 100% free.
- freeCodeCamp is a donor-supported tax-exempt 501(c)(3) charitable organization.
- The content in this section is not being updated, but is still available for you
  to further your learning.
- Course offers a comprehensive introduction to C# programming.
- The content in the archived coursework section is not being updated.
- Uses Swagger for API documentation
- Uses OAuth2 with refresh token — requires setup of connected app in api
- Some objects like Contact may return nulls in deeply nested fields
- The model URL and access token must be specified in the environment variables.
- This handbook is completely free right here in this webpage.
- The payload input is dynamic and provided by the query method.
- Uses Redis with aioredis and rejson for JSON data handling
- Connection parameters are stored in environment variables
- This handbook covers various JavaScript concepts.
- Because this is a demo app, I do not want to store the chat data in Redis for too
  long.
- Uses Huggingface's accelerated inference API.
- Keep Huggingface access token safe and do not expose it publicly.
- 'use_cache: True is recommended in production to prevent exhausting free tokens.'
- 'return_full_text: is False, as only the response text is needed.'
- Ensure rejson is installed
- Stream consumer waits for new messages
- Uses Redis JSON for storing chat history
- Uses FastAPI for the chat server setup
- WebSocket connection is required for chat functionality
- Uses REST API to communicate with Huggingface inference API
- Uses Redis to broker the communication between chat API and third-party API
- Ensure rejson is installed.
- Use cache to prevent exhausting free tokens.
- Using free account — monitor API usage to avoid rate limits
- WebSocket connection requires a token as a query parameter.
- Uses Redis for message brokering between chat API and third-party API
- Sessions expire after 60 minutes
- Session data will be lost after 60 minutes due to timeout settings.
- The input format turns the GPT-J6B into a conversational model.
- Using cache does not actually load a new response from the model.
- The model creates a new response when the input is the same if use_cache is set
  to False.
- Requires a personal access token for authentication.
- Uses API key authentication
- Redis sessions expire after 60 minutes
- The transform property accepts one or more CSS transform functions.
- GraphQL offers efficient and flexible data fetching capabilities.
- Well-suited for applications with complex data requirements.
- Some objects may return nulls in deeply nested fields
- Declarative access control allows defining what is allowed without worrying about
  how to check permissions.
- The CSS scale property allows scaling an element without using the CSS transform
  property.
- A none value tells browsers not to scale the selected element.
- A none value tells browsers not to translate the selected element.
- Browsers, by default, convert a CSS transform property's value to its matrix equivalent.
- Not all elements are transformable.
- Versioning is implemented using path segments like v1 or v2.
- Declarative access control — define what is allowed rather than how to check permissions.
- Ensure policies are fetched during app startup to avoid unnecessary network requests.
- API is listening on port 3000
- Uses Express.js for API implementation
- Responses are sent in JSON format
- Handles basic CRUD operations for workouts.
- Validates incoming request bodies for required fields.
- API receives data in JSON format via POST requests.
- New workouts must be validated for required fields.
- Implement caching for performance improvements.
- Uses OpenAPI for documentation
- Responses may contain a 5XX error indicating failure
- Make sure the PHP version selected is the latest available.
- MAMP has a version that’s a bit behind, not the latest.
- The API accepts JSON data for creating workouts. Required fields include name, mode,
  equipment, exercises, and trainerTips.
- Responds with standard HTTP error codes for bad requests.
- Java is a widely-used programming language.
- The only prerequisite is familiarity with any other programming language.
- Uses Scanner class for taking user inputs.
- If nextInt() is called before nextLine(), it may skip the next input.
- Common methods inside the java.util.Arrays class.
- Filtering, sorting, and pagination are integrated into the API.
- Uses OpenAPI documentation for endpoints
- MAMP is a tool that’s freely available for all the Operating Systems – Mac, Windows
  and Linux.
- All examples in this book are demonstrated in Ubuntu 22.04.2 LTS (Jammy Jellyfish).
- You can get a PDF, ePub, or Mobi version of this handbook for easier reference,
  or for reading on your Kindle or tablet.
- Arrays.sort() method sorts the array in place.
- Arrays.binarySearch() method returns the index of the found item.
- Uses command line interface for file searching
- Hidden files can be searched by prefixing with '.'
- Nano is pre-installed on most Linux distributions.
- Disk errors can cause application crashes.
- The containsKey() method checks if a given key exists in the hash map.
- The containsValue() method checks if a given value exists in the hash map.
- Linux is an open-source operating system.
- The default shell for many Linux distros is the GNU Bourne-Again Shell (bash).
- Text editing skills using the command line are crucial in Linux.
- Bash scripts can run perfectly fine without the 'sh' extension.
- Comments start with a '#' in bash scripting.
- Uses command-line interface for package management
- The 'find' command is used to search for files and folders.
- The 'stress-ng' utility is used for conducting CPU stress tests.
- Nano is a user-friendly text editor that is easy to use and is perfect for beginners.
- It is pre-installed on most Linux distributions.
- To identify disk issues, run disk check using smartmontools.
- A detailed test provides a full report, including temperature, power-on hours, error
  counts, wear leveling (for SSDs), and more.
- The 'tail' command is used to display the last part of a file.
- The 'head' command is used to display the beginning of a file.
- The 'wc' command counts words, lines, and characters in a file.
- The 'diff' command compares two files line by line.
- Bash scripts can run without the .sh extension.
- 'Comments start with # and are ignored by the interpreter.'
- Bash scripts can run perfectly fine without the .sh extension.
- All examples are demonstrated in Ubuntu 22.04.2 LTS.
- The default port for ssh is 22.
- The `sudo` command allows you to run commands with elevated privileges.
- The fields in awk can be accessed using $1, $2, $3, and so on.
- The default separator in awk is a space.
- The cut command is used to extract sections of text from each line of input.
- Various options available for managing processes using the kill command.
- Crontab allows scheduling tasks to run at specific times.
- Cron jobs can be added or edited using 'crontab -e'.
- Tail command can display last few lines of a file.
- This handbook covers basics of the Linux command line and advanced topics like shell
  scripting.
- Uses command line interface for package management.
- Directory ownership can be viewed using the ls -ld command.
- Logs are structured and can be parsed using awk and cut.
- Use 'kill <pid>' to terminate a process gracefully.
- Use 'kill -9 <pid>' to forcefully terminate a process.
- 'SMART overall-health self-assessment test result: PASSED.'
- Linux is open-source and widely used in various fields.
- Uses `sar` for system activity reporting.
- Disk health can be checked using `smartmontools`.
- CPU can be stressed using `stress-ng`.
- Overheating can cause unexpected errors and crashes.
- Disk errors can also cause application crashes.
- Faulty CPUs can also lead to a number of performance issues.
- Bash scripts are easy to write and don't require any special tools or software.
- Bash scripts can be run on various platforms and operating systems.
- Provides step-by-step instructions for learning React concepts
- No previous knowledge required to start
- The default port for ssh is 22 but it is also vulnerable, as hackers will likely
  attempt here first.
- Logs contain various levels of information including ERROR, WARNING, and INFO.
- The output of commands can be piped for further processing.
- Requires setting up a Google Cloud account and project.
- Billing must be enabled for cloud services.
- This command sends a signal to a process ID, asking it to terminate.
- Can forcefully kill a process using SIGKILL.
- To allow users to create cron jobs, include their names in /etc/cron.allow.
- Ensure billing account is linked to the project
- Service account key should be stored securely
- Trigger Continuous Deployment only when a new release is created from the main branch.
- The fields in log files are space-separated.
- Docker is an open-source containerization platform.
- Cron jobs require permission set in /etc/cron.allow
- Cron logs can be found at /var/log/syslog
- Installation varies by OS but is generally simple.
- Ideal CPU queue is 0.
- Utilized disk spaces should not exceed 80%.
- Docker uses a client-server architecture.
- Uses JSX for templating
- Props are immutable
- Uses useEffect hook for network requests
- Images are multi-layered self-contained files.
- Containers are isolated environments. Your host system doesn't know anything about
  what's going on inside a container.
- To allow access from outside of a container, you must publish the appropriate port
  inside the container to a port on your local network.
- By default, containers run in the foreground and attach themselves to the terminal
  like any other normal program invoked from the terminal.
- This handbook provides a step-by-step guide for setting up CI/CD with GitHub Actions,
  Docker, and Google Cloud Run.
- Uses Docker Hub for image storage
- Requires Google Cloud account and project setup
- A service account allows CI/CD pipeline to authenticate and interact with Google
  Cloud services programmatically.
- The service account key is a JSON file containing the credentials used for authentication.
- Docker is an open-source containerization platform that allows you to containerize
  your applications.
- Images are multi-layered read-only files.
- Docker runs flawlessly on all three major platforms, Mac, Windows, and Linux.
- The Docker client talks to the Docker daemon.
- The container start command starts any container in detached mode by default and
  retains any port configurations made previously.
- In case of a stopped container, both container start and container restart commands
  are exactly the same.
- Containers are isolated environments.
- Docker runs on Mac, Windows, and Linux.
- Installation processes vary across operating systems.
- You can check if the container was deleted or not by using the `container ls` command.
- You can also remove multiple containers at once by passing their identifiers one
  after another separated by spaces.
- Instead of removing individual containers, if you want to remove all dangling containers
  at one go, you can use the `container prune` command.
- You can check the container list using the `container ls --all` command to make
  sure that the dangling containers have been removed.
- Use --name option to define a custom name for containers
- Stopping a container can be done using either the ID or name
- Docker Hub is the default public registry for Docker.
- Uses Docker CLI commands for container management.
- Images can encapsulate an entire Linux distribution inside them.
- These images require a special `-it` option to be passed in the `container run`
  command.
- The `-it` option sets the stage for you to interact with any interactive program
  inside a container.
- Containers are lightweight and share the host OS kernel.
- The container restart command attempts to stop the target container and then starts
  it back up again.
- Uses bind mounts to allow container access to local file system
- Containers are lighter than virtual machines.
- There is also the `--rm` option for the `container run` and `container start` commands
  which indicates that you want the containers removed as soon as they're stopped.
- The 'container start' command starts any container in detached mode by default.
- The 'container restart' command attempts to stop the target container and then starts
  it back up again.
- The 'container create' command creates a container from a given image.
- Every valid Dockerfile starts with a FROM instruction.
- The EXPOSE instruction is used to indicate the port that needs to be published.
- The RUN instruction in a Dockerfile executes a command inside the container shell.
- The CMD instruction sets the default command for your image.
- Uses container commands to manage Docker containers.
- The `container start` command starts any container in detached mode by default.
- In case of a stopped container, `container start` and `container restart` commands
  are equivalent.
- You need to use the -it option whenever you want to run a container in interactive
  mode.
- Docker provides a way to containerize applications along with their dependencies.
- Images are multi-layered read-only files carrying your application.
- Supports managing container lifecycle including start, stop, and remove.
- Can create containers without running them.
- 'The generic syntax for encoding a string using base64 is: echo -n my-secret | base64'
- EXPOSE instruction indicates the port that needs to be published.
- CMD instruction sets the default command for your image.
- Uses Docker Hub as the default public registry for images.
- Containers are much lighter and less resource-hogging than traditional virtual machines.
- Container start command starts any container in detached mode by default and retains
  any port configurations made previously.
- Container restart command attempts to stop the target container and then starts
  it back up again.
- Docker CLI commands provided for managing containers and images
- Docker images are multi-layered files.
- Each line in a Dockerfile creates a new layer in the image.
- Docker can be run on Mac, Windows, and Linux.
- The `FROM` instruction sets Ubuntu as the base image making an ideal environment
  for building any application.
- The `RUN` instruction installs standard packages necessary for building NGINX from
  source.
- The installation process on Mac is the easiest.
- The Docker client communicates with the Docker daemon.
- Uses REST API for managing containers and images.
- Uses Docker CLI commands to manage containers.
- 'The daemon needs two very specific pieces of information: the name of the Dockerfile
  and the build context.'
- Uses Ubuntu as the base image for building NGINX
- Images can be exchanged through registries.
- Uses Docker commands for container management
- Containers can be created, started, stopped, and removed
- The RUN instruction executes a command inside the container shell.
- The API supports managing containers and images.
- Uses ARG instruction for dynamic filename and extension
- Uses ADD instruction to download files from the internet
- Containers can be started in detached mode by default.
- Uses Docker Hub API for accessing container and image data.
- Commands for managing containers and images can be executed using the Docker CLI.
- Containers operate in isolated environments.
- Use `container create` to create a container without running it.
- Uses Ubuntu as base image for building NGINX from source
- The ARG instruction lets you declare variables like in other languages.
- The ADD instruction doesn't extract files obtained from the internet by default.
- Uses Alpine Linux for a lightweight container.
- The 'container start' command starts any container in detached mode by default and
  retains any port configurations made previously.
- Variable values can be passed as options of the image build command.
- Installation varies by operating system.
- Docker is open-source and allows containerization of applications.
- Uses Docker CLI for container management
- Interactive images require -it option to run
- Uses Docker commands to manage containers
- Commands include container start, restart, create, rm, and run for various container
  operations
- The `ARG` instruction lets you declare variables like in other languages.
- The `ADD` instruction doesn't extract files obtained from the internet by default.
- Using Alpine Linux as the base image reduces the size significantly.
- Uses Node.js for JavaScript applications
- The vite development server runs on port 3000
- Container commands can be run in detached mode by default.
- Container removal is possible using the 'container rm' command.
- Docker commands require appropriate permissions and context setup.
- Uses Ubuntu as a base image for building NGINX
- Dockerfile supports building NGINX from source
- The image should have Python pre-installed.
- It should contain a copy of my `rmbyext` script.
- A working directory should be set where the script will be executed.
- The `rmbyext` script should be set as the entry-point so the image can take extension
  names as arguments.
- Set `rmbyext` as the entry-point for this image.
- Docker containers use the host operating system for virtualization.
- Images are multi-layered read-only files that act as templates for containers.
- Uses Alpine Linux to reduce image size.
- Container operations can be performed using commands like start, stop, and remove.
- Uses Python 3-alpine as the base image
- The working directory is set to /zone
- Uses Alpine Linux for a lightweight image.
- Your password will be stored unencrypted in /home/fhsinchy/.docker/config.json.
- Configure a credential helper to remove this warning.
- The `container start` command starts any container in detached mode by default and
  retains any port configurations made previously.
- Uses Docker CLI commands for managing containers.
- Uses Ubuntu as a base image for building NGINX from source.
- The ADD instruction forms the download URL dynamically using arguments declared.
- The image size has been optimized from 343MB to 12.8MB using Alpine Linux.
- Uses Python 3-alpine as the base image.
- The working directory is set to /zone.
- The entry-point for the image is set to rmbyext.
- Uses Docker CLI commands for managing containers and images.
- The container start command starts any container in detached mode by default.
- Uses Ubuntu as the base image for building NGINX from source.
- The container starts in detached mode by default
- The container retains any port configurations made previously
- Uses Ubuntu as base image for building NGINX.
- The default command runs NGINX in single process mode.
- Uses ARG to define filename and extension for dynamic download
- Alpine Linux is used for a lightweight image
- The `rmbyext` script should be set as the entry-point.
- Uses Alpine Linux for a lightweight image
- Image size reduced significantly
- Password will be stored unencrypted in /home/fhsinchy/.docker/config.json.
- Container commands can be used to manage Docker containers.
- Uses Docker API for managing containers and images.
- Ensure Docker daemon is running before making API calls.
- Requires Python pre-installed
- Working directory must be set for script execution
- Given the filename is not `Dockerfile` you have to explicitly pass the filename
  using the `--file` option.
- Containers use the host operating system for virtualization, making them lighter
  than virtual machines.
- Containers can be created without running using the container create command.
- Use --rm option to automatically remove containers once they are stopped.
- Uses Docker API for container management.
- Uses Ubuntu as base image for building NGINX
- Get a good base image for running Python scripts, like python:3-alpine.
- The rmbyext script should be set as the entry-point.
- Bind mounts allow direct reference to local file system inside the container.
- Changes in local source code will reflect immediately inside the container.
- The image is configured to run the rmbyext script on a directory /zone inside the
  container.
- Containers can be started, stopped, and removed using appropriate commands.
- Interactive containers require the -it option.
- To reboot a running container use the container restart command.
- Uses git to install the rmbyext script.
- Uses ARG for filename — allows changing version easily
- ADD instruction can download files directly from the internet
- Uses multi-staged builds for optimized Docker images
- Container commands include start, stop, restart, and remove.
- Use `--rm` option to automatically remove containers after stopping.
- Multi-staged builds can optimize and compact applications.
- Containers are isolated environments from the host system.
- Bind mounts can be created using the --volume or -v option for the container run
  or container start commands.
- Uses a GitHub repository to install the rmbyext script
- Sets rmbyext as the entry-point for the Docker image
- Docker commands may require elevated privileges.
- Installation procedures vary greatly depending on the operating system.
- 'Docker runs flawlessly on all three major platforms: Mac, Windows, and Linux.'
- An anonymous volume is identical to a bind mount except that you don't need to specify
  the source directory.
- Container commands can be run in interactive mode using the -it option.
- Container commands may differ based on the system and configuration.
- The build context must be set correctly to ensure all files are included.
- Make sure to run the container with the correct volume mounts to avoid issues with
  dependencies.
- User-defined bridges provide automatic DNS resolution between containers.
- User-defined bridges provide better isolation.
- Uses Git to install the rmbyext script.
- Uses the docker CLI for network operations
- When accessing a database server from a container, ensure to use the container name
  or IP address instead of localhost.
- The Dockerfile must start with a FROM instruction.
- EXPOSE instruction is used to indicate the port that needs to be published.
- Docker has a similar concept to .gitignore with .dockerignore files to exclude files
  and directories from image builds.
- Uses a client-server architecture where the client communicates with the daemon
  via a REST API.
- Uses REST API to interact with Docker containers and images.
- Multi-staged builds can optimize images by reducing unnecessary dependencies.
- Use the `latest` tag if no specific tag is provided during image build.
- Must provide POSTGRES_PASSWORD and POSTGRES_DB environment variables.
- Docker API allows interaction with containers and images.
- Uses Python as base image
- Working directory set to /zone
- Multi-staged builds can be very useful if you're building large applications with
  a lot of dependencies.
- Using IP addresses to refer to a container is not recommended.
- POSTGRES_PASSWORD environment variable is required to run the PostgreSQL server
- POSTGRES_DB environment variable can be used to specify the default database name
- Uses Docker commands to manage container lifecycle.
- Containers can be created, started, stopped, and removed.
- The notes-api application requires three environment variables to be set.
- Compose is a tool for defining and running multi-container Docker applications.
- Although Compose works in all environments, it's more focused on development and
  testing. Using Compose on a production environment is not recommended at all.
- Uses Alpine Linux for a lighter image build.
- If configured properly, images built in multiple stages can be very optimized and
  compact.
- To remove all dangling containers at one go, you can use the container prune command.
- Uses Ubuntu as the base image for building NGINX.
- Ensure to publish port 5432 for PostgreSQL.
- The API has five routes in total that you can see inside the `/notes-api/api/api/routes/notes.js`
  file.
- You must run the database migration necessary for setting up the database tables
  by executing `npm run db:migrate` command inside the container.
- Set rmbyext as the entry-point for the Docker image.
- Uses Docker Compose for multi-container management
- Development environment recommended for Compose usage
- Installation procedures vary by platform.
- 'To create a volume named notes-db-data you can execute the following command: docker
  volume create notes-db-data'
- This volume can now be mounted to /var/lib/postgresql/data inside the notes-db container.
- Installation procedures vary across platforms.
- Docker commands can manage containers, images, and volumes.
- The image size with Alpine is 12.8MB, which is significantly smaller than the Ubuntu
  version.
- In case of a stopped container, both `container start` and `container restart` commands
  are the same.
- Use `container rm` to remove stopped or dangling containers.
- The `--rm` option for `container run` indicates that you want the containers removed
  as soon as they're stopped.
- '`rmbyext` script should be set as the entry-point so the image can take extension
  names as arguments.'
- To ignore unnecessary files, use a .dockerignore file.
- Make sure the database container is running and attached to the notes-api-network.
- Docker allows you to containerize applications and share them using public or private
  registries.
- The daemon manages various Docker objects.
- Containers use the host operating system kernel.
- Uses Ubuntu as the base image for building NGINX from source
- The rmbyext script should be set as the entry-point so the image can take extension
  names as arguments.
- Uses Git for installation.
- Set rmbyext as the entry-point.
- The database server listens on port 5432.
- Uses Docker Compose to manage multi-container applications
- PostgreSQL listens on port 5432 by default.
- Ensure to publish port 5432 to access the database.
- Databases like PostgreSQL use the /var/lib/postgresql/data directory inside the
  container to persist data.
- To avoid data loss when the container is destroyed, a named volume can be used.
- Using Compose on a production environment is not recommended.
- Containers can be started, stopped, and removed using specific commands.
- The --rm option removes containers automatically after they stop.
- Uses Git to install the script from GitHub
- The PostgreSQL server listens on port 5432.
- To build an image using the Dockerfile code provided, execute the command with the
  proper context.
- The image size has gone from being 343MB to 81.6MB.
- The Alpine version is significantly smaller at 12.8MB.
- Make sure you're running the scripts inside the notes-api directory.
- Uses Alpine variant of Python 3 for optimal size
- Ensure to set entry-point to `rmbyext` for executable image
- PostgreSQL by default listens on port 5432
- The database must be running and attached to the notes-api-network.
- Uses Docker Compose for managing multi-container projects.
- Uses REST API for container management.
- No authentication required for accessing public resources.
- Must provide POSTGRES_PASSWORD and POSTGRES_DB as environment variables.
- The database will be stored inside the notes-db-data volume and can be reused in
  the future.
- Uses ARG instruction to define the filename and extension for the NGINX source.
- The application runs on port 3000.
- Hot reload feature requires bind mounts to reflect changes.
- API has five routes in total
- Uses Docker Compose to manage multi-container applications.
- Do not use Docker Compose in production environments.
- Uses the Docker CLI for command execution
- Commands can be executed in interactive mode with the -it option
- Use container commands to create, start, stop, and manage Docker containers.
- Image is built from Alpine Linux for optimization.
- Use the command 'docker container run --rm --detach --name custom-nginx-built --publish
  8080:80 custom-nginx:built' to run the container.
- Set-up the working directory to an easily accessible directory.
- Every valid docker-compose.yaml file starts by defining the file version.
- The services block holds the definitions for each of the services or containers
  in the application.
- 'The API requires three environment variables: DB_HOST, DB_DATABASE, DB_PASSWORD.'
- Commands like run, start, restart, and remove are essential for container manipulation.
- The base image for Python scripts is python:3-alpine.
- The default working directory is set to /zone.
- Node.js projects use node:lts-alpine as the base image.
- Database must be migrated using 'npm run db:migrate' command inside the container.
- Defined two bridge networks for proper network isolation
- nginx service is attached to both networks to route between front-end and back-end
  services
- Container commands include start, restart, create, run, and rm.
- Use the --rm option for automatic removal of containers.
- Containers can be started, stopped, and removed using respective commands.
- The `-it` option is required for interactive mode.
- Using Alpine Linux for optimized image size.
- The `COPY` instruction is responsible for copying the `nginx-1.19.2.tar.gz` file
  inside the image.
- You will have to run the database migration necessary for setting up the database
  tables by executing `npm run db:migrate` command inside the container.
- The API provides access to notes and user data.
- Ensure to handle authentication for user-related endpoints.
- Docker is an open-source containerization platform that allows you to containerize
  your applications, share them using public or private registries, and orchestrate
  them.
- 'The notes-api application requires three environment variables to be set: DB_HOST,
  DB_DATABASE, and DB_PASSWORD.'
- The PATH module helps with file and directory paths.
- The FS module is used for file handling operations.
- Uses bridge networks for proper isolation
- Nginx serves as a router between front-end and back-end services
- Node is meant for server-side programming, while those browser features are meant
  for client-side programming.
- If you encounter any issues during the installation process, you can refer to the
  official NodeJS documentation for more detailed instructions and troubleshooting
  tips.
- Installation procedures vary by operating system.
- Containers can be created and managed using the Docker API.
- Built using Alpine for a smaller image size
- This API does not require authentication.
- Docker has a similar concept to .gitignore, called .dockerignore, to exclude files
  from image builds.
- Uses SQL Server as the database provider.
- 'The notes-api application requires three environment variables: DB_HOST, DB_DATABASE,
  and DB_PASSWORD.'
- Error handling implemented for creating and retrieving Todo items.
- Database connection string is required in appsettings.json.
- Uses .NET Core for API development
- HTML and JavaScript files must be served from a web server.
- Vue CLI simplifies the development process for Vue.js applications.
- Consider the learning curve when choosing a framework.
- Community support can greatly enhance the development experience.
- Node provides you with lots of API's and Modules with which you can perform a variety
  of operations like File Handling, Creating Servers, and much more.
- The module provides methods to work with file and directory paths.
- Differences in path separators for different operating systems.
- Never trust the input from users.
- Use express-validator for both validation and sanitization.
- Node is meant for server-side programming.
- Uses SQL Server as the database provider
- DbSettings section in appsettings.json must be configured for the connection string
- Ensure the connection string is correctly set in appsettings.json before running
  the API.
- JavaScript uses prototypes instead of classical classes.
- Handles basic CRUD operations for to-do items.
- Vue.js is designed to be approachable and easy to integrate into existing projects.
- Vue.js is built upon a set of guiding principles that shape its design and philosophy.
- Single-File Components encapsulate the template, script, and styles of a component
  into a single file.
- Learning curve varies for each framework.
- Community support is crucial for learning.
- The default port for Express applications is 3000.
- Handle input validation and sanitization using express-validator
- Use formidable for file uploads in multipart/form-data
- Use one leading underscore only for non-public methods and instance variables.
- We don't use the term 'private' here, since no attribute is really private in Python.
- Tuples are immutable and cannot be modified.
- Attributes are not private in Python, leading underscores indicate non-public attributes.
- Clustering is a powerful technique that allows us to unlock the hidden structures
  within our data, leading to valuable insights and informed decision-making.
- The K-Means algorithm is sensitive to the initial choice of centroids.
- K-Means can struggle with non-spherical clusters.
- K-Means is a non-deterministic approach and its randomness comes in Step 1, where
  all observations are randomly assigned to 1 of the K classes.
- This handbook covers fundamental concepts of clustering in unsupervised learning.
- Uses K-Means clustering algorithm from scikit-learn.
- Uses 'with' statement for file operations to ensure proper handling
- Set the maximum number of iterations to 300
- Set a fixed random seed for reproducibility
- Requires OAuth2 setup for authentication
- Data may require normalization before clustering
- K-Means clustering is sensitive to the initial choice of centroids.
- DBSCAN does not require specifying the number of clusters in advance.
- DBSCAN can handle noisy data effectively.
- Difficulty in detecting non-spherical clusters.
- DBSCAN does not require specifying the number of clusters.
- DBSCAN can detect arbitrarily shaped clusters.
- K-Means is a non-deterministic approach and it’s randomness comes in Step 1, where
  all observations are randomly assigned to 1 of the K classes.
- K-Means clustering offers an efficient approach to grouping data points based on
  similarity.
- K-Means clustering is sensitive to initial centroid positions.
- Hierarchical Clustering creates a dendrogram representation.
- t-SNE aims to represent high-dimensional data points in a lower-dimensional space
  while preserving the local structure.
- Implementing t-SNE in Python is straightforward with libraries such as scikit-learn.
- DBSCAN handles noisy data effectively by categorizing noise points separately from
  clusters.
- Elastic computing allows automatic scaling of hardware capacity.
- Serverless architecture eliminates server management, paying only for function execution.
- K-Means clustering can be sensitive to initial centroid selection.
- Programming is essential for everyday life.
- Mobile app developers use languages like JavaScript, Java, Swift, Kotlin.
- 'eps=0.3: Defines how close points should be to be considered neighbors.'
- 'min_samples=5: Sets the minimum number of points required to form a dense region.'
- Programming can be applied in every scientific field that you can imagine, including
  biology, physics, chemistry, and even astronomy.
- Programming languages that are commonly used for physics simulations include C,
  Java, Python, MATLAB, and JavaScript.
- Programming can also be helpful to develop programs and models that predict financial
  indicators and trends.
- K-Means clustering is sensitive to initial centroid placement.
- Implementing t-SNE in Python is relatively straightforward with the help of libraries
  such as scikit-learn.
- Event held in Silicon Valley focused on building apps and pitching them.
- Programming languages can be classified based on different criteria and they share
  basic concepts such as variables, conditionals, loops, and functions.
- Building projects is the best way to strengthen frontend development skills.
- Regularly reviewing what you have learned is essential to reinforce key concepts.
- Learning to code is an ambiguous process.
- Competence and confidence come with practice.
- Coding is about learning and understanding the system.
- Learning is important, but without building projects, it remains theoretical.
- Invest time in building relationships.
- Be interested in people's lives.
- Practice algorithms and data structures will help in interviews.
- Focus on communication skills in Behavioral Interviews.
- Python’s list functions are often simpler and more intuitive, which is particularly
  beneficial for quick data manipulation.
- Using JWTs for user authentication can enhance security.
- Tuples are ideal for fixed collections, such as coordinates or configuration values,
  where data should not change.
- While optional, a solid understanding of DSA can significantly improve your problem-solving
  skills and make you a more competent developer.
- Basic knowledge of system design is a must. It helps you understand how to architect
  scalable and efficient systems, a critical skill for any full stack developer.
- Make sure to build at least five projects that solve real-world problems.
- Becoming a Full Stack Developer is more than just learning to code—it's about building,
  deploying, and scaling real-world applications.
- Testing is an integral part of software development, ensuring that applications
  behave as expected and reducing the likelihood of bugs.
- Both Python and JavaScript have robust ecosystems for testing, offering various
  frameworks and tools to streamline the process.
- 'JavaScript: Mocha and Chai are popular choices, while Python developers often use
  Pytest or the built-in Unittest module.'
- We are a donor-supported tax-exempt 501(c)(3) charity organization.
- You have full control over your data, and can set any of these details to private,
  or delete them at any time.
- When you delete personal data from freeCodeCamp, we immediately delete it from our
  servers.
- These terms govern use of the website.
- You must agree to these terms with Free Code camp, Inc.
- Deciding how to partition the work between multiple processors is sometimes a complex
  issue that you should consider carefully.
- 'Golang introduced concurrency as a first-class language: goroutines and channels.'
- The philosophy of communication in Channels offers a secure means of communication
  between goroutines.
- Server running on port 3000
- TensorFlow.js brings machine learning capabilities to JavaScript.
- 'Always include Authorization: Bearer <token> for protected routes.'
- freeCodeCamp is a donor-supported tax-exempt 501(c)(3) charity organization.
- The vast majority of freeCodeCamp's funding comes from the thousands of people who
  support our 501(c)(3) nonprofit each month through recurring donations.
- We also have organizations who support our nonprofit through grants.
- Uses Compound Components pattern to create flexible UIs
- Users can access all lessons without creating an account.
- Uses OAuth2 with refresh token — requires setup of API credentials.
- Ensure to handle potential data drift detection failures.
- The company reserves the right to change, redact, and delete content on the website
  for any reason.
- Configuration files provide a structured way to manage application settings.
- freeCodeCamp is a donor-supported tax-exempt 501(c)(3) charity organization
- DVC eliminates the need to store the large Parquet or CSV files directly in the
  feature store or model store because it caches them as lightweight hashed files.
- Before committing parallelism into your system, you’ll need to profile the system.
- Deciding how to partition the work between multiple processors is sometimes a complex
  issue.
- Processing each file may happen on a different core, and the results will get added
  at the final stage.
- No authentication required for accessing resources.
- DVC tracks lineage through separate stages, from data extraction to fairness testing.
- Evently AI handles data drift tests.
- JWTs are primarily used for authentication.
- DVC is an open-source version system for data.
- Uses DVC for data versioning and tracking.
- Ensure the result df as dependency
- The modal component accepts children for flexible composition.
- Accordion component takes a special prop called children, enabling it to accept
  any HTML/JSX/React component.
- 'The content area of an AccordionItem could be anything: a paragraph, a table, an
  image, or even a JSX combining them.'
- Requires setup of Evently AI project and API token.
- Uses OAuth2 with refresh token — requires setup of connected app in Evently AI
- Data drift detection is essential for identifying shifts in data distributions
- Requires setup of Evently AI project.
- Ensure to handle API rate limits.
- Uses DVC for tracking data and model versions
- SHAP values computed for feature impact analysis
- The MOD is calculated as the absolute difference between the mean prediction values
  of the privileged (registered) and unprivileged (unregistered) groups.
- The assess_model_risk stage uses a Python script to calculate fairness metrics.
- Uses Evently AI for data drift detection
- DVC tracks the ML lineage through stages
- DVC adds the preprocess_status, x_train_processed_path, and preprocessor_path to
  the data summary metrics file data.json created in Step 2.
- DVC uses MD5 or SHA256 hash to track metadata.
- Evently AI is used for data drift tests.
- Uses Bayesian optimization to tune the model
- DVC is used to track machine learning lineage.
- Evently AI is used for data drift detection.
- Uses DVC to track datasets and model parameters
- DVC offers various storage types like AWS S3 and Google Cloud.
- 'Ensure the IAM role has permissions: s3:ListBucket, s3:GetObject, s3:PutObject,
  and s3:DeleteObject.'
- Uses PyTorch for model training and inference.
- SHAP values are used for interpretability analysis.
- DVC eliminates the need to store large Parquet or CSV files directly in feature
  or model store.
- DVC tracks the lineage through separate stages, from data extraction to fairness
  testing.
- Evently AI is used to handle data drift tests.
- The DVC remote must be configured for AWS S3
- Preprocessed input data stored in parquet format.
- DVC will track and version the generated visualization files on the SHAP values
- Uses DVC to track ML lineage
- Data drift detection is performed using Evently AI
- The preprocessor and feature names are stored for SHAP analysis.
- DVC tracks data and metrics for the entire process.
- Uses Bayesian optimization for model tuning
- The Mean Outcome Difference (MOD) is calculated as the absolute difference between
  the mean prediction values of the privileged (registered) and unprivileged (unregistered)
  groups.
- The pipeline integrates with AWS Lambda and uses DVC for version control.
- Evently AI is used for detecting data drift.
- adding default values to the tracking metrics
- The pipeline includes stages for preprocessing, model tuning, and inference.
- Outputs include train, validation, and test datasets in parquet format.
- Preprocessor and feature names are stored for later use.
- DVC eliminates the need to store large Parquet or CSV files directly in the feature
  store.
- Machine learning lineage is critical for tracking data and model versions.
- Uses DVC for version control of data and models.
- Requires setup of Evently AI for data drift detection.
- Preprocessing and model tuning stages require tracking via DVC.
- Uses DVC for version control of datasets and models
- DVC eliminates the need to store large files directly in the feature store or model
  store.
- The preprocessor and human-readable feature names are stored for SHAP analysis.
- DVC tracks all datasets and metrics generated during the pipeline.
- DVC must publish dvc.lock file in Git to ensure loading of the latest files.
- AWS Lambda function requires access to the DVC cache in production.
- Uses DVC for tracking metrics
- Ensure the IAM role has the right permissions for S3 access
- DVC is used to track the ML lineage.
- Data drift tests are conducted using Evently AI.
- DVC tracks metrics and results as part of the pipeline execution.
- docker image registry (either docker hub or aws ecr)
- AWS S3 is used as a remote storage.
- Uses parameters from params.yaml for configuration.
- DVC tracks datasets and metrics for model training and inference.
- The preprocessing stage includes normalization and feature encoding.
- Model tuning uses Bayesian optimization for hyperparameter search.
- DVC eliminates the need to store large Parquet or CSV files directly in the feature
  store or model store.
- The DVC project must be initiated before running the pipeline.
- Ensure to handle exceptions for the data drift checks.
- DVC used for tracking ML lineage.
- Evently AI used for data drift detection.
- Ensure the datasets are in the correct format before ingestion.
- Uses DVC for version control of data and models
- This stage uses SHAP for feature impact analysis.
- Inference metrics are stored for model evaluation.
- Mean Outcome Difference (MOD) is calculated as the absolute difference between the
  mean prediction values of the privileged (registered) and unprivileged (unregistered)
  groups.
- 'Make sure the IAM role has the following permissions: s3:ListBucket, s3:GetObject,
  s3:PutObject, and s3:DeleteObject.'
- Uses DVC for ML lineage tracking.
- The metrics file tracks the end-to-end process of data preparation and model evaluation.
- Uses DVC for tracking datasets and metrics
- Feature names are stored in a JSON file for SHAP analysis
- Ensure the result df as a dependency in DVC stages
- DVC eliminates the need to store large Parquet or CSV files directly
- define weekly schedule
- Uses DVC for tracking ML lineage
- Incorporates Evently AI for data drift detection
- Configured with a weekly schedule using Prefect
- The Mean Outcome Difference (MOD) is calculated as the absolute difference between
  the mean prediction values of the privileged and unprivileged groups.
- The model uses PyTorch for training and inference.
- DVC is used for data versioning and tracking.
- DVC eliminates the need to store large Parquet or CSV files directly in the feature
  store or model store because it caches them as lightweight hashed files.
- Pipeline stages include ETL, data drift checks, and preprocessing.
- Mean Outcome Difference (MOD) is within the specified threshold of 0.1.
- The privileged group is defined as 1 (registered).
- Uses DVC for data versioning and tracking
- The model is trained using PyTorch
- SHAP values are computed for interpretability analysis
- Uses DVC for version control of data and model files
- Handles data preprocessing and model inference.
- Utilizes DVC for tracking datasets and model versions.
- The registration status `is_registered` column is used as a sensitive feature.
- The process includes multiple stages from preprocessing to inference.
- Handles model training, tuning, and inference with DVC for tracking.
- Includes SHAP analysis for feature impact.
- The application is fully containerized on Docker for universal accessibility.
- Serverless functions can experience cold starts.
- AWS Lambda is serverless and does not require server management.
- Pay-per-use billing based on compute resources consumed.
- k-fold cross-validation is a technique for evaluating a machine learning model's
  performance by training and testing it on different subsets of training data.
- The model is trained and validated using 5-fold cross-validation.
- The system operates as a containerized, serverless microservice.
- The trained models and processed data are stored in the S3 bucket as a Parquet file.
- Trained PyTorch models are serialized into .pth files.
- Uses k-fold cross validation during training to prevent overfitting.
- X_test should never be used during model training to avoid data leakage.
- Serverless functions can experience a cold start duration.
- Uses DVC to track data processing and model training.
- SHAP values are computed for interpretability.
- The `assess_model_risk` stage is added after the `inference_primary_model` stage
  in dvc.yaml.
- Default values for tracking metrics are set in params.yaml.
- Uses Boto3 client for S3 interactions
- Features k-fold cross validation for model training
- Trained PyTorch models are serialized into .pth files
- Define a working directory in the container as /app
- Copy the entire repository (except .dockerignore) into the container at /app
- Install dependencies defined in the requirements.txt
- 'Define commands: ENTRYPOINT [ ''python'' ], CMD [ ''-m'', ''awslambdaric'', ''app.handler''
  ]'
- Uses AWS Lambda for serverless architecture
- Files are uploaded to S3 in Parquet format.
- DVC tracks model artifacts and metrics for each stage.
- Preprocessor needs to be saved to cache for inference.
- SHAP values are computed for model interpretability.
- Uses d3-zoom for panning and zooming
- Requires setup of DndKit for drag and drop functionality
- Uses d3-zoom for panning and zooming functionality
- CSS styles need to account for transform effects
- Security Groups for Pods enables fine-grained network security controls at the pod
  level.
- IAM roles define permissions for AWS services.
- AWS Lambda is a serverless production where a service provider can run the application
  without managing servers.
- K-fold cross-validation is a technique for evaluating a machine learning model's
  performance by training and testing it on different subsets of training data.
- Uses Bayesian optimization for hyperparameter tuning.
- Trained models and processed data are stored in the S3 bucket as a Parquet file.
- Processed data is converted into a CSV and Parquet file format.
- Processed data is converted into CSV and Parquet file format.
- Supports pod-level network security through dedicated security groups and ENIs
- The application uses Redis for caching predictions.
- The model inference may take time depending on the data size and model complexity.
- K-fold cross-validation is performed with 5 folds.
- Models are serialized into .pth files for S3 storage.
- Cluster creation typically takes 10-15 minutes.
- After configuring the Flask application, we’ll containerize the entire application
  on Docker.
- Containerization makes a package of the application, including models, its dependencies,
  and configuration in machine learning context, as a container.
- Docker creates a container image based on the instructions defined in a Dockerfile,
  and the Docker engine uses the image to run the isolated container.
- To publish the Docker image, we first need to configure the default AWS credentials
  and region.
- The model is trained using k-fold cross-validation to prevent overfitting.
- Best hyperparameters are determined using Bayesian optimization.
- Requires setup of IAM roles and policies for EKS.
- From the AWS account console, issue an access token and check the default region.
- Store them in the ~/aws/credentials and ~/aws/config files.
- 'Increase in cold start duration: The WSGI adapter `awsgi` layer adds a small overhead.
  Loading a larger container image takes longer time.'
- 'Monolithic function: Adding endpoints to the Lambda function can lead to a monolithic
  function where an issue in one endpoint impacts others.'
- 'Less granular observability: AWS CloudWatch cannot provide individual invocation/error
  metrics per API endpoint without custom instrumentation.'
- Standard React optimization strategies do work and improve the situation, but there
  is a need to go further, by finding ways to avoid renders, and even to avoid too
  many `memo` comparisons.
- Subnets should be tagged correctly for EKS auto-discovery.
- NAT Gateway provides internet access for resources in private subnets.
- Uses d3-zoom for pan and zoom functionality
- Integrates DndKit for drag and drop features
- There is some complexity to the various position / transform calculations.
- There are only two dependencies to install.
- Requires setup of IAM roles for EKS services and node groups.
- Each pod can have its own Elastic Network Interface (ENI) with custom security groups.
- Uses OAuth2 with refresh token — requires setup of IAM roles and policies in AWS
- Ensure proper subnet configuration for EKS deployment
- Requires setup of IAM roles and policies for proper functionality
- Multi-AZ deployment is recommended for high availability
- Security group allows SSH connections on port 22.
- Management tools installed successfully
- Public IP assigned to the instance in PUBLIC_SUBNET_1
- Uses OAuth2 with refresh token for AWS API integration
- Pod-level security groups require setup of SecurityGroupPolicy.
- Use multiple availability zones for high availability.
- Uses IAM roles for authentication
- Cluster name is pod-security-cluster-demo
- Kubernetes version is 1.33
- Cluster creation can take 10-15 minutes.
- Uses Security Groups for Pods to enable fine-grained network security controls at
  the pod level.
- Requires IAM roles for EKS management and cluster operations.
- Security Groups for Pods allows fine-grained network security controls at the pod
  level.
- Requires setup of IAM roles and policies for EKS operations.
- Uses EKS for managing Kubernetes clusters
- Ensure proper security group configurations for management access
- Management instance is ready. Public IP will be retrieved after instance launch.
- Requires the creation of IAM roles for EKS and Node Groups.
- Network configuration should adhere to AWS best practices.
- Managed nodes are launched in private subnets only.
- Using Kubernetes version 1.33 for EKS cluster.
- Security group for Pods allows fine-grained network policies.
- Security Groups for Pods enables pod-level network security.
- Requires proper IAM roles and policies configuration.
- The `kubernetes.io/cluster/pod-security-cluster-demo=shared` tag identifies subnets
  that belong to our cluster.
- The `kubernetes.io/role/elb=1` tag on public subnets tells Kubernetes to use these
  subnets when creating internet-facing load balancers.
- The `kubernetes.io/role/internal-elb=1` tag on private subnets indicates where internal
  load balancers should be created.
- Uses AWS VPC and Kubernetes for pod-level network security
- Requires IAM roles for EKS service and node group
- Uses tags for EKS auto-discovery and load balancer configuration.
- Uses OAuth2 with refresh token for authentication
- Requires setup of AWS IAM roles and policies
- Security groups control access to the RDS database without exposing it to the internet.
- Ensure to restrict SSH access to management instance in production environments.
- Cluster creation can take 10-15 minutes to become active.
- Supports pod-level security group assignments.
- Requires proper IAM role configuration for EKS.
- Creates a new security group in the cluster's VPC with no inbound or outbound rules
  defined.
- Dedicated security group for RDS PostgreSQL database to control which sources can
  connect.
- This guide walks you through implementing Security Groups for Pods in AWS EKS.
- With Security Groups for Pods, you can assign specific security groups to individual
  pods.
- Database is not publicly accessible and located in private subnets.
- Security Groups for Pods allows fine-grained network security at the pod level.
- Requires setup of IAM roles and policies for proper permissions.
- EKS requires IAM roles for cluster and node group management
- Pods can use security groups for fine-grained access control
- A DB subnet group tells RDS which subnets it can use when launching a database instance.
- The --no-publicly-accessible flag is crucial for security.
- The first command checks that the ENABLE_POD_ENI environment variable is properly
  set in the DaemonSet configuration. You should see the value set to 'true' in the
  output.
- The second command displays the pod-eni capacity for each node.
- The third command looks for trunk ENIs on one of our nodes.
- If everything is working correctly, you shouldn't see any error messages in the
  CNI plugin logs.
- Public subnets use kubernetes.io/role/elb=1 tag for internet-facing load balancers
- Private subnets use kubernetes.io/role/internal-elb=1 tag for internal load balancers
- Uses EKS for Kubernetes cluster management
- Ensure IAM roles are correctly assigned for access
- Ensure the database is never exposed directly to the internet.
- Attach the RDS_SG security group to enforce access rules.
- Security groups for pods require careful configuration to ensure proper access control.
- Security Groups for Pods requires specific IAM roles and policies setup
- Uses API_AND_CONFIG_MAP for cluster access management
- Requires setup of IAM roles and policies for EKS and EC2 instances.
- Green pod starting - should have database access
- Red pod starting - should NOT have database access
- Uses Amazon EKS for Kubernetes cluster management.
- Creating RDS Security Group - PostgreSQL Database
- Creating a dedicated security group for RDS PostgreSQL database to control connections
- Allowing pods with POD_SG to resolve DNS through node group
- Allowing management instance access to RDS
- Allowing only pods with POD_SG and MGMT_SG to access RDS
- Creating DB subnet group spanning private subnets
- Generating cryptographically secure password for the database
- Creating PostgreSQL RDS instance with security-focused configuration
- Connecting to the management instance and creating test data
- Enabling pod ENI feature on AWS VPC CNI
- Security Groups for Pods enables fine-grained network security at the pod level.
- Verify that the ENABLE_POD_ENI environment variable is properly set in the DaemonSet
  configuration. You should see the value set to 'true' in the output.
- The second command displays the pod-eni capacity for each node. For m5.large instances,
  you should see a number like '9' or similar.
- When branch networking is enabled, the VPC CNI creates a special 'trunk' ENI on
  each node that serves as the anchor point for branch ENIs.
- Supports Security Groups for Pods feature in EKS
- Uses multiple availability zones for high availability
- Security Groups for Pods allows fine-grained network policies for pods.
- 'The key is the label `app: green-pod` in the pod template''s metadata section.'
- This pod uses environment variables sourced from Kubernetes secret to get database
  connection details.
- The startup script attempts to connect to the database and run a simple query.
- The expected output from the red pod logs should indicate it could not connect to
  the database.
- These troubleshooting commands help you systematically diagnose problems.
- 'If the green pod can''t connect, you work through the checklist: verify the security
  group rules exist, confirm the ENI was actually assigned, check for CNI errors,
  and validate the SecurityGroupPolicy configuration.'
- If the red pod unexpectedly can connect, you check whether it somehow got the wrong
  labels, whether there's an unintended security group rule allowing node-level access,
  or whether the node security group itself has database access that it shouldn't
  have.
- Creates a rule that applies to future pods with matching labels
- The podSelector section uses Kubernetes label selectors
- Cluster creation may take 10-15 minutes to become active.
- SSH access for management instance should ideally be restricted to specific IP addresses.
- This feature allows assigning specific security groups to individual pods in EKS.
- Green pod has database access via security groups.
- Red pod should not have database access.
- Cluster created with Kubernetes version 1.33 and supports Security Groups for Pods.
- Requires IAM roles for EKS management and access.
- Security Groups for Pods requires specific IAM roles and policies setup.
- Ensure proper subnet configurations for EKS cluster.
- Use a dedicated namespace for demonstration to isolate resources and simplify cleanup.
- Use specific tags to identify subnets for EKS load balancers.
- Ensure database is not publicly accessible for security.
- Uses AWS IAM roles for permissions and EKS management.
- VPC with public and private subnets for high availability.
- Uses environment variables sourced from Kubernetes secret to get database connection
  details
- The startup script attempts to connect to the database and run a simple query
- Uses AWS RDS for PostgreSQL — ensure proper security group setup
- Database should be created in private subnets for security
- Green pod starting - should have database access via security groups
- Uses Kubernetes for deployment and pod management.
- Security Groups for Pods provides granular control over network access at the pod
  level.
- Uses OAuth2 with refresh token — requires setup of IAM roles in AWS
- Ensure that security groups are properly configured before applying policies
- Worker nodes are launched in private subnets for security.
- Green pod has database access via matching security group policy.
- Red pod should not have database access due to mismatched label.
- Uses environment variables sourced from Kubernetes secret for database connection.
- Green pod has database access while red pod does not due to label differences.
- The 'shared' value indicates that these subnets might be used by multiple clusters.
- The 'kubernetes.io/role/elb=1' tag on public subnets tells Kubernetes to use these
  subnets when creating internet-facing load balancers.
- The 'kubernetes.io/role/internal-elb=1' tag on private subnets indicates where internal
  load balancers should be created.
- Complex cleanup due to interdependencies of VPC resources
- Wait for NAT Gateways to delete before proceeding with other deletions
- RDS Security Group created without any rules initially.
- Pod Security Group allows access based on group membership.
- Requires dedicated ENI for pods with custom security groups
- Multi-AZ setup is recommended for high availability
- These tags serve specific purposes in the EKS ecosystem.
- Ensure to restrict security group access in production environments.
- Uses AWS IAM roles for EKS cluster and node groups
- Security Group created without inbound or outbound rules initially.
- Database access controlled through security group membership.
- Using a dedicated namespace helps keep things organized and makes cleanup easier.
- 'The SecurityGroupPolicy does not immediately change anything: it creates a rule
  that will apply to future pods.'
- This pod should have database access via security groups
- This pod should NOT have database access
- Load balancers must be deleted before we can remove subnets, because they create
  ENIs in the subnets.
- The NAT Gateway deletion is particularly important to wait for completely, because
  NAT Gateways take several minutes to fully delete.
- Internet Gateways must be detached before they can be deleted.
- Subnets can be deleted once all resources using them are removed.
- Route tables need to be disassociated from subnets before deletion.
- Green pod should have database access via security groups
- Red pod should NOT have database access
- 'IAM cleanup follows a specific order: first detach all policies from roles, then
  delete any custom policies we created, remove roles from instance profiles, delete
  the instance profiles, and finally delete the roles themselves.'
- The custom EKS-Management-Policy that we created needs to be deleted using your
  account ID in the ARN.
- Uses IAM roles for permissions management
- Users must refresh their tokens after claims are updated.
- Ensure that the NAT Gateway is properly configured for private subnet access.
- Use least privilege for security group ingress rules.
- MCP server runs on port 8000
- Caching strategies include response caching, database query result caching, HTTP
  caching, and stale-while-revalidate.
- Requires AWS account with credentials configured
- Model access enabled in the Amazon Bedrock console is necessary
- Reliable analysis depends on how data is handled throughout the process.
- Each stage of the data workflow benefits from clarity, structure, and shared understanding.
- Strix uses an LLM to reason about vulnerabilities.
- It runs tests in isolated Docker containers.
- Uses environment variables sourced from Kubernetes secret to get database connection
  details.
- Use AWS CLI commands for VPC cleanup process.
- Wait for resources to delete before proceeding to next steps.
- Requires AWS account with appropriate permissions
- Uses IAM roles for service permissions
- Tags help Kubernetes automatically choose the correct subnets based on load balancer
  type.
- Public subnets allow internet-facing load balancers; private subnets allow internal
  load balancers.
- Database is not publicly accessible.
- Security group rules must be configured to control access.
- Red pod should not have database access due to label mismatch.
- The server must include an Access-Control-Allow-Origin header specifying the allowed
  domain.
- CORS policy is a browser-enforced security measure.
- NAT Gateway deletion is particularly important to wait for completely, because NAT
  Gateways take several minutes to fully delete.
- 'IAM requires this order because of the dependency chain: you can''t delete a role
  that still has policies attached, and you can''t delete an instance profile that
  still contains a role.'
- OpenCode is an open-source AI coding assistant that works right inside your terminal.
- Everything stays local, which is a major advantage for teams handling private or
  sensitive codebases.
- Kubernetes is not for everyone, especially not at the beginning
- Widgets can be rendered inline in ChatGPT.
- Caching is not a single tactic but a set of strategies that fit different needs.
- Gaps in APIs can occur before requests reach the APIs, within the code housing the
  APIs, and even along the path of the APIs’ communication with downstream services,
  dependencies, or other microservices.
- Amazon Bedrock AgentCore makes it easy to create and deploy AI agents without dealing
  with complex container setups or infrastructure.
- Lambda functions publish messages to SNS topics using Secrets Manager to fetch sensitive
  information.
- Many of the most persistent problems come not from technical gaps, but from missing
  checks or assumptions that go unspoken.
- API Gateway expects an authorization token from each request it receives before
  routing traffic to the appropriate backend service.
- Strix runs its tests in isolated Docker containers.
- Responsive design ensures a consistent and adaptive layout across various screen
  sizes.
- React MUI Sidebar integrates seamlessly with both React and Next.js.
- Docker Hub account required to push container image to the cloud
- Python is pre-installed in most Linux distributions.
- Learn to code for free via open source curriculum
- This comprehensive, six-hour course is designed to take you on a complete full-stack
  journey.
- The course demonstrates how to organize your code with a modular design using managers,
  clients, and blueprints for a scalable and maintainable project.
- You'll also see how to build efficient, asynchronous data pipelines that can handle
  multiple tasks at once without slowing down.
- Get a free Cerebras API key at https://cloud.cerebras.ai?referral_code=freecodecamp
- Memory leaks can significantly impact your React application's performance and user
  experience.
- Containers provide a portable and efficient way to package applications and their
  dependencies, ensuring consistency across various environments.
- This course is designed to give you a deep, practical understanding of a modern,
  powerful tech stack.
- The client runs on port 5500.
- Ensure that the client origin matches exactly.
- For methods like PUT, the browser sends a preflight OPTIONS request first.
- Integrates AI directly into the terminal
- Doesn't send code to remote servers by default
- Use Docker Hub or GitHub account for authentication.
- Kubernetes is not for everyone, especially not at the beginning.
- Don't jump to Kubernetes just because it's trendy.
- Security best practice is to create another user with administrator privileges and
  use this user for subsequent tasks.
- AWS Lambda is a serverless service on AWS that users can leverage to run application
  functions or code when needed.
- Uses AWS Secrets Manager to fetch the SNS Topic ARN securely
- Lambda functions require permissions to access Secrets Manager
- Both Authorizers will appear in API Gateway.
- API Gateway expects an authorization token from each request.
- Docker Hub account required to push images
- Learn to code for free. freeCodeCamp's open source curriculum has helped more than
  40,000 people get jobs as developers.
- Uses OAuth2 with refresh token — requires setup of connected app in freeCodeCamp
errors:
- 'REQUEST_LIMIT_EXCEEDED: Throttle API calls or reduce frequency'
- 'QUERY_TIMEOUT: Break down filters or add selectivity'
- '401 Unauthorized: Recheck OAuth scopes or token expiration'
- '400 Bad Request: Enter a valid name'
- '404 Not Found: Check the endpoint path or parameters.'
- 'CACHE_ERROR: Check your cache connection settings'
- 'MESSAGE_NOT_FOUND: Ensure the message ID is correct'
- '401 Unauthorized: Check your Hugging Face access token.'
- '429 Too Many Requests: Throttle API calls.'
- '400 Bad Request: Ensure valid input is provided'
- '401 Unauthorized: Check HUGGINFACE_INFERENCE_TOKEN validity'
- '400: Enter a valid name'
- '403: Session not authenticated or expired token'
- '401 Unauthorized: Recheck API key validity or expiration'
- '400: Session expired or does not exist'
- '401 Unauthorized: Recheck API key or token expiration'
- '429 Too Many Requests: Throttle API calls or reduce frequency'
- '401 Unauthorized: Check your API key.'
- '400: One of the following keys is missing or is empty in request body: ''name'',
  ''mode'', ''equipment'', ''exercises'', ''trainerTips'''
- '400: Workout with the name ''{newWorkout.name}'' already exists'
- '400: Can''t find workout with the id ''{workoutId}'''
- '500: {error?.message || error}'
- '404 Not Found: Check endpoint paths or resource availability.'
- '500 Internal Server Error: Review server logs for more details.'
- '500: {error.message || error}'
- 'ArrayIndexOutOfBoundsException: Index out of bounds for length'
- '500: {error.message}'
- '5XX: FAILED'
- 'ArrayIndexOutOfBoundsException: Check the indices used in array operations.'
- Invalid variable names can cause execution issues.
- No specific error codes provided.
- Network timeout on request.
- Connection timed out.
- 'Invalid PID: Ensure the PID exists before attempting to kill the process.'
- Disk errors can cause application crashes.
- '404 Not Found: Ensure the endpoint exists.'
- '500 Internal Server Error: Try again later.'
- 'ERROR: Network timeout on request.'
- 'ERROR: Connection timed out.'
- '403 Forbidden: Check service account permissions.'
- '404 Not Found: Ensure the project ID is correct.'
- 'Failed to bind to port: Check port allocation.'
- 'Too many connections: Evaluate current connection limits.'
- 'Unable to find image: locally'
- 'Exited (0): No error during runtime'
- Unable to find image 'hello-world:latest' locally
- 'Exited (0): indicates that no error was produced during the runtime of the container'
- 'Exited (0): No error produced during runtime.'
- '404 Not Found: The specified container or image does not exist.'
- '404 Not Found: The requested resource could not be found.'
- '500 Internal Server Error: An unexpected error occurred.'
- 'CONTAINER_NOT_FOUND: Ensure the container ID or name is correct.'
- 'CONTAINER_RUNNING: Container is already running; cannot start it again.'
- 'INVALID_PARAMETER: Check the parameters passed to the command.'
- 'Unable to find image: Check if the image exists in the registry.'
- 'Exited (0): Indicates that the container has stopped without error.'
- 'CONTAINER_NOT_FOUND: Check the container ID or name'
- 'INVALID_PARAMETER: Ensure parameters are correct and formatted properly'
- '500 Internal Server Error: An error occurred on the server.'
- '400 Bad Request: Check the syntax of the command.'
- '404 Not Found: The image or container does not exist.'
- 'Unable to find image: Check if the image exists on the registry.'
- 'Exited (0): Container stopped successfully.'
- 'Exited (1): Container stopped with an error.'
- '404 Not Found: Check the endpoint path.'
- '500 Internal Server Error: Retry the request.'
- 'CONTAINER_ALREADY_RUNNING: The container is already in a running state'
- 'INVALID_COMMAND: Ensure the command syntax is correct'
- 'Unable to find image: Check if the image name is correct.'
- 'Exited (0): Indicates that the container has stopped without errors.'
- '404 Not Found: Check the endpoint path or the resource ID.'
- '500 Internal Server Error: Server encountered an unexpected condition.'
- '404 Not Found: Check if the container ID is valid.'
- '404 Not Found: Check the resource path and ensure the container or image exists.'
- '500 Internal Server Error: This may be a temporary issue, please try again later.'
- '404 Not Found: The specified container does not exist.'
- '404 Not Found: Check if the container or image exists.'
- '500 Internal Server Error: Retry the request later.'
- '404 Not Found: Check if the container/image/network/volume exists.'
- '500 Internal Server Error: An unexpected error occurred on the server.'
- '500 Internal Server Error: Try again later or check the server status.'
- 'Unable to find image: Check if the image name is correct'
- 'Exited (0): Indicates successful termination'
- 'Exited (0): Container has stopped successfully'
- 'Exited (137): Container was killed by the system'
- 'Exited (0): Container has exited successfully'
- 'Exited (137): Container was killed due to out of memory'
- 'Created: Container is created but not running'
- 'IMAGE_NOT_FOUND: Ensure the image name is correct'
- 'BUILD_FAILED: Check Dockerfile for errors'
- '404 Not Found: Verify the image name and tag.'
- '500 Internal Server Error: Check Docker daemon status.'
- '404 Not Found: Check if the container or image ID is correct.'
- '500 Internal Server Error: Server issues, try again later.'
- '404 Not Found: Check if the resource exists.'
- '404 Not Found: Verify the endpoint path or resource identifier.'
- '500 Internal Server Error: Check the server logs for more details.'
- '404 Not Found: Check that the container ID is correct.'
- '409 Conflict: Container is in a state that prevents the operation.'
- '500 Internal Server Error: Server encountered an error processing the request.'
- 'ENOENT: The command or file was not found.'
- 'ELIFECYCLE: The script failed to execute.'
- 'spawn ENOENT: Unable to spawn the command.'
- 'Unable to find image ''hello-world:latest'' locally: Check if the image exists
  on the registry.'
- 'Exited (0): Container has stopped without errors.'
- '404 Not Found: Check the container/image ID or name.'
- '500 Internal Server Error: Check the Docker daemon and logs.'
- 'Exited (0): Container has stopped successfully.'
- 'Exited (137): Container was killed by the system.'
- Exiting with status code 0 indicates no error.
- 'CONTAINER_RUNNING: Cannot stop a container that is already running.'
- 'Exited (0): Indicates that no error was produced during the runtime'
- 'sh: 1: vite: not found'
- npm ERR! code ELIFECYCLE
- npm ERR! syscall spawn
- npm ERR! file sh
- npm ERR! errno ENOENT
- 'npm ERR! hello-dock@0.0.0 dev: `vite`'
- npm ERR! spawn ENOENT
- npm ERR! Failed at the hello-dock@0.0.0 dev script.
- npm ERR! This is probably not a problem with npm. There is likely additional logging
  output above.
- '404 Not Found: The specified resource could not be found.'
- '500 Internal Server Error: The server encountered an unexpected condition.'
- 'ELIFECYCLE: Check if all dependencies are correctly installed.'
- 'ENOENT: Ensure the script or command you are trying to run exists.'
- '500 Internal Server Error: Something went wrong on the server side.'
- '401 Unauthorized: Ensure the Authorization header is set correctly'
- '400 Bad Request: Check the provided environment variables'
- 'Exited (137): Container has been killed.'
- 'Exited (0): Indicates successful termination of a process.'
- 'Exited (137): Indicates a container was killed, possibly due to out of memory.'
- '401 Unauthorized: Ensure POSTGRES_PASSWORD is set correctly.'
- '404 Not Found: Check if the container ID is correct.'
- '409 Conflict: Container is already running or cannot be stopped.'
- 'Exited (0): The container exited successfully.'
- 'Exited (137): The container was killed.'
- '401 Unauthorized: Check your credentials or API key.'
- '401 Unauthorized: Check your credentials for the database.'
- 'Connection failed: Ensure the database server is running.'
- 'CONFLICT: The container name is already in use.'
- 'Exited (0): Indicates the container stopped without errors.'
- 'Container not found: Ensure the container ID or name is correct.'
- 'Container already running: Use restart command instead.'
- 'sh: 1: vite: not found: Ensure dependencies are installed'
- 'npm ERR! code ELIFECYCLE: Check for missing node_modules'
- Exited (0) 3 minutes ago
- '404 Not Found: Check the endpoint or resource ID.'
- '500 Internal Server Error: Try again later or check server status.'
- '401 Unauthorized: Check the provided API key.'
- 'ELIFECYCLE: Failed at the hello-dock@0.0.0 dev script.'
- 'CONTAINER_NOT_FOUND: Check if the container ID or name is correct.'
- 'IMAGE_NOT_FOUND: Ensure the image exists in the registry.'
- '404 Not Found: Check the download URL if the image fails to build.'
- 'Exited (0): Indicates the container has completed execution without errors.'
- 'Exited (137): Indicates the container was terminated by an external signal.'
- 'CONTAINER_NOT_FOUND: Ensure the container ID is correct.'
- 'INVALID_COMMAND: Check the syntax of the command.'
- '500 Internal Server Error: Contact support.'
- 'Exited (0): The container has stopped without error'
- 'ENOENT: no such file or directory'
- 'EACCES: permission denied'
- '500 Internal Server Error: Check the Docker daemon status.'
- '500 Internal Server Error: An error occurred while creating the Todo item.'
- '500 Internal Server Error: An error occurred while retrieving the Todo item.'
- '500: An error occurred while processing the request'
- 'Error: Path not found'
- 'Error: Permission denied'
- '422: Unprocessable Entity - Validation errors occurred.'
- '500 Internal Server Error: An error occurred while processing the request'
- 'ZeroDivisionError: division by zero'
- 'IndexError: list index out of range'
- 'KeyError: ''d'''
- 'NameError: name ''b'' is not defined'
- 'RecursionError: maximum recursion depth exceeded in comparison'
- '404 Not Found: Todo item with the specified id not found'
- '500 Internal Server Error: An error occurred during the operation'
- '400 Bad Request: Check input data format or parameters.'
- '500 Internal Server Error: Retry the request after some time.'
- '401 Unauthorized: Check your token or client credentials'
- '422 Unprocessable Entity: Validate input data format'
- Parameter tuning is sensitive which can impact clustering performance.
- 'Inertia calculation failure: Check input data format.'
- 'Invalid cluster count: Ensure K is a positive integer.'
- 'INVALID_DATA: Ensure input data is correctly formatted.'
- 'CLUSTERING_ERROR: Check parameters for clustering.'
- 'CONVERGENCE_FAILURE: Increase max iterations or adjust initialization.'
- '401 Unauthorized: Recheck interview access permissions'
- '401 Unauthorized: No token provided'
- '401 Unauthorized: Malformed token'
- '401 Unauthorized: Invalid or expired token'
- '401 Unauthorized: Check API token and permissions.'
- '404 Not Found: Endpoint does not exist or is incorrect.'
- The company will not be liable to you for breach-of-contract damages company personnel
  could not have reasonably foreseen when you agreed to these terms.
- 'invalid signature: Token has been tampered with.'
- '401 Unauthorized: Ensure the API token is valid and has the necessary permissions.'
- '400 Bad Request: Check the input parameters for the data drift report.'
- '401 Unauthorized: Check API token and permissions'
- '404 Not Found: Ensure the endpoint path is correct'
- '500 Internal Server Error: Try again later or contact support'
- 'FileNotFoundError: Check if the expected data files exist'
- 'ValueError: Ensure the input data is in the correct format'
- 'FileNotFoundError: Ensure the specified dataset exists in the path'
- 'FileNotFoundError: Check the existence of required files.'
- 'ValueError: Ensure input data shapes are compatible.'
- 'FileNotFoundError: Check if the preprocessor path is correct.'
- 'ValueError: Ensure the target column exists in the DataFrame.'
- '... an error occurred during risk and fairness assessment: {e}'
- 'FILE_NOT_FOUND: Check if the specified file paths are correct.'
- 'FileNotFoundError: Check if the preprocessor file exists.'
- 'Data drift detected: stopping pipeline'
- 'File not found: Ensure the specified paths are correct.'
- 'FileNotFoundError: Ensure the specified data files exist.'
- 'FILE_NOT_FOUND: Ensure all required files are present in the specified paths.'
- 'INVALID_INPUT: Check input data format and types for compatibility.'
- '401 Unauthorized: Recheck your API key or token.'
- 'FATAL: data drift detected. stopping pipeline'
- Error occurred during risk and fairness assessment
- 'FILE_NOT_FOUND: Ensure the input files exist in the specified path.'
- 'INVALID_INPUT: Check the input parameters for correctness.'
- 'DATA_DRIFT_DETECTED: A fatal error occurs if data drift is found.'
- 'FILE_NOT_FOUND: Ensure correct file paths are used in the scripts.'
- '404 Not Found: Check the endpoint path or dataset availability.'
- 'FileNotFoundError: Ensure paths to data files are correct'
- '404 Not Found: Check the endpoint path or stockcode.'
- '500 Internal Server Error: Review server logs for details.'
- 'FILE_NOT_FOUND: Check if the specified path exists.'
- 'general loading error: Check DVC configuration or file paths'
- 'FileNotFoundError: Ensure the specified paths exist in the DVC cache'
- 'An error occurred during risk and fairness assessment: {e}'
- 'FILE_NOT_FOUND: Check if the specified file path exists.'
- 'JSON_DECODE_ERROR: Ensure the JSON structure is valid.'
- 'FILE_NOT_FOUND: Ensure the specified file path exists'
- '500 Internal Server Error: Check server logs for details.'
- 'FileNotFoundError: Check if the specified file paths exist.'
- 'ValueError: Ensure the correct shape of input data.'
- '403 Forbidden: Check permissions for the S3 bucket'
- '404 Not Found: Ensure the bucket name is correct'
- 'FileNotFoundError: Ensure correct file paths for datasets and metrics.'
- 'InvalidArgument: Check parameter values passed to scripts.'
- Early stopping triggered when patience_counter exceeds early_stopping_rounds.
- 'REQUEST_TIMEOUT: The API Gateway may timeout if the execution takes too long.'
- 'InvalidParameter: Check your parameters and try again.'
- 'UnauthorizedOperation: You do not have permission to perform this action.'
- '403 Forbidden: Check IAM permissions for the requested action.'
- '404 Not Found: Ensure the resource identifier is correct.'
- '500 Internal Server Error: Retry the request after a few moments.'
- 'InvalidParameter: Check the parameters provided for the API call'
- 'AccessDenied: Ensure the necessary IAM role permissions are granted'
- 'AccessDenied: Check IAM permissions for EC2 actions'
- 'InvalidInstanceType: Ensure instance type is valid for the region'
- '403 Forbidden: Check IAM permissions for the API'
- '404 Not Found: Verify the endpoint path is correct'
- 'Cluster creation failed: Check IAM role permissions.'
- 'Timeout: Cluster did not become active in expected time.'
- 'AuthorizationError: Check IAM permissions for the roles used.'
- 'ClusterNotFoundException: Verify cluster name or existence.'
- 'Unauthorized: Check IAM roles and policies'
- 'ResourceNotFound: Ensure the resource exists and retry'
- 'AccessDenied: Check IAM permissions for the role.'
- 'ResourceNotFound: Ensure the specified resource exists.'
- 'Node group creation timeout: Verify subnet configurations.'
- '403 Forbidden: Check IAM permissions.'
- '404 Not Found: Resource does not exist.'
- 'Unauthorized: Check IAM role permissions'
- 'ResourceNotFound: Verify that the specified resource exists'
- '403 Forbidden: Check IAM permissions'
- '404 Not Found: Ensure the resource exists'
- '500 Internal Server Error: Retry the request'
- 'AccessDenied: Ensure IAM roles have appropriate permissions.'
- 'ThrottlingException: Reduce request frequency to avoid throttling.'
- 'AccessDeniedException: Check IAM permissions for the role'
- 'ClusterNotFoundException: Verify the cluster name'
- 'InvalidParameterException: Ensure parameters are valid'
- 'InsufficientPermissions: Check IAM role policies'
- 'ResourceLimitExceeded: Reduce the number of ENIs or security groups'
- 'Unauthorized: Ensure proper authentication and authorization'
- 'ACCESS_DENIED: Ensure IAM role has required permissions.'
- 'RESOURCE_NOT_FOUND: Check if the specified resource ID is correct.'
- 'ERROR: Could not connect to database'
- 'EXPECTED: Could not connect to database'
- 'Unauthorized: Check IAM permissions for the role.'
- 'Unauthorized: Check IAM permissions for the role used.'
- 'ClusterNotFound: Ensure the cluster name is correct.'
- 'InvalidParameter: Verify parameters when creating node groups or security groups.'
- '403 Forbidden: Check IAM permissions for the role.'
- '404 Not Found: Verify endpoint path is correct.'
- 'UNEXPECTED: Connected to database!'
- 'Unauthorized: Recheck IAM role permissions or token expiration'
- 'Conflict: Ensure no overlapping security group policies exist'
- 'Bad Request: Validate the structure of SecurityGroupPolicy CRD'
- 'ERROR: Could not connect to database: This indicates security group configuration
  issues'
- 'EXPECTED: Could not connect to database: This is correct - red pod should not have
  database access'
- 'InvalidParameterValue: Check your VPC ID and security group configurations.'
- 'AuthorizationError: Ensure your IAM role has permissions to create security groups.'
- 'LIMIT_EXCEEDED: Reduce the number of simultaneous requests'
- 'INTERNAL_SERVER_ERROR: Retry your request after a brief wait'
- 'ACCESS_DENIED: Check IAM roles and permissions'
- 'AccessDenied: Ensure proper IAM permissions are set'
- 'Permission denied: Only admins can add posts.'
- 'Permission denied: Check your AWS credentials and IAM policies.'
- 'Model access denied: Enable model access in the Bedrock console.'
- Possible IDOR vulnerability detected
- Untrusted input can lead to code execution
- 'ResourceNotFound: Check if the resource ID is correct.'
- 'InvalidVpcId.NotFound: The specified VPC does not exist.'
- 'ACCESS_DENIED: Ensure appropriate IAM role permissions'
- 'VPC_LIMIT_EXCEEDED: Review VPC configuration and resource limits'
- 'CORS policy failed: No ''Access-Control-Allow-Origin'' header is present on the
  requested resource.'
- 'Docker warning: Ignore this unless you use — local or — local-build.'
- 'Model access denied: Enable model access (such as Claude Sonnet 4.0) in the Bedrock
  console.'
- 'Build errors: Check CloudWatch build logs and IAM policies.'
- '401 Unauthorized: Token missing or invalid'
- Possible IDOR vulnerability detected.
- '500: An error occurred while processing your request'
- '401 Unauthorized: Recheck token provided in the request header.'
auth_info:
  mentioned_objects:
  - OauthToken
  - AuthProvider
  - NamedCredential
  - HUGGINFACE_INFERENCE_TOKEN
  - HUGGINGFACE_INFERENCE_TOKEN
  - MODEL_URL
  - POSTGRES_DB
  - POSTGRES_PASSWORD
  - Oauth2Token
  - CloudWorkspace
  - Dataset
  - Report
  - EVENTLY_API_TOKEN
  - SecurityGroupPolicy
  - VPC Resource Controller
  - AWS VPC CNI
  - EKSClusterRole
  - EKS-Management-Role
  - EKSNodeGroupRole
  - VPCResourceController
  - AmazonEKSClusterAdminPolicy
client:
  base_url: https://hub.docker.com
  headers:
    Accept: application/json
source_metadata: null
