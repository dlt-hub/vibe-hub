resources:
- name: account_api
  endpoint:
    path: /group/endpoint-account-center
    method: GET
- name: experience_api
  endpoint:
    path: /group/endpoint-experience
    method: GET
- name: management_api
  endpoint:
    path: /
    method: GET
- name: social_connectors
  endpoint:
    path: /integrations/alipay-native
    method: GET
- name: email_connectors
  endpoint:
    path: /integrations/aliyun-dm
    method: GET
- name: sms_connectors
  endpoint:
    path: /integrations/aliyun-sms
    method: GET
- name: enterprise_connectors
  endpoint:
    path: /integrations/entra-id-oidc
    method: GET
- name: users
  endpoint:
    path: /api/users
    method: GET
- name: applications
  endpoint:
    path: /api/applications
    method: GET
- name: audit_logs
  endpoint:
    path: /api/logs
    method: GET
- name: roles
  endpoint:
    path: /api/roles
    method: GET
- name: resources
  endpoint:
    path: /api/resources
    method: GET
- name: connectors
  endpoint:
    path: /api/connectors
    method: GET
- name: organizations
  endpoint:
    path: /api/organizations
    method: GET
- name: account
  endpoint:
    path: /account-center
    method: GET
- name: experience
  endpoint:
    path: /experience
    method: GET
- name: management
  endpoint:
    path: /management
    method: GET
- name: account
  endpoint:
    path: /group/endpoint-account-center
- name: experience
  endpoint:
    path: /group/endpoint-experience
- name: management
  endpoint:
    path: /
- name: account_api
  endpoint:
    path: /group/endpoint-account-center
- name: experience_api
  endpoint:
    path: /group/endpoint-experience
- name: management_api
  endpoint:
    path: /
- name: userinfo
  endpoint:
    method: GET
- name: api_resource
  endpoint:
    path: https://your-api-resource.com
- name: userinfo
  endpoint:
    path: /oidc/me
    method: GET
    data_selector: userData
- name: user_info
  endpoint:
    path: /oidc/me
    method: GET
    data_selector: .
- name: userinfo
  endpoint:
    method: GET
- name: userinfo
  endpoint:
    path: /userinfo
    method: GET
- name: userinfo
  endpoint:
    path: /userinfo
    method: GET
    data_selector: userinfo
- name: sign_in
  endpoint:
    path: /logto/sign-in
    method: GET
- name: sign_in_callback
  endpoint:
    path: /logto/sign-in-callback
    method: GET
- name: sign_out
  endpoint:
    path: /logto/sign-out
    method: GET
- name: userinfo
  endpoint:
    path: /oidc/me
    method: GET
- name: user_info
  endpoint:
    method: GET
    data_selector: idTokenClaims
- name: userinfo
  endpoint:
    method: GET
- name: user_info
  endpoint:
    path: /oidc/me
    method: GET
- name: userinfo
  endpoint:
    method: GET
    data_selector: userinfo
- name: user
  endpoint:
    path: /oidc/auth
    method: GET
- name: api_resource
  endpoint:
    path: /oidc/token
    method: POST
    params:
      grant_type: refresh_token
      resource: https://shopping.your-app.com/api
- name: organization_tokens
  endpoint:
    path: /oidc/token
    method: POST
    params:
      grant_type: refresh_token
      resource: urn:logto:scope:organizations
- name: user_info
  endpoint:
    path: /oidc/me
    method: GET
    data_selector: $
    params: {}
- name: userinfo
  endpoint:
    path: /oidc/me
    method: GET
- name: userinfo
  endpoint:
    path: /oidc/me
    method: GET
- name: userinfo
  endpoint:
    path: /oidc/me
    method: GET
- name: sign_in
  endpoint:
    path: /sign-in
    method: GET
- name: sign_out
  endpoint:
    path: /sign-out
    method: GET
- name: callback
  endpoint:
    path: /callback
    method: GET
- name: userinfo
  endpoint:
    path: /protected/userinfo
    method: GET
- name: userinfo
  endpoint:
    path: /oidc/me
    method: GET
    data_selector: ''
- name: userinfo
  endpoint:
    path: /oidc/me
    method: GET
- name: userinfo
  endpoint:
    method: GET
- name: userinfo
  endpoint:
    method: GET
- name: user_info
  endpoint:
    method: GET
- name: callback
  endpoint:
    path: /callback
    method: GET
- name: userinfo
  endpoint:
    path: /oidc/me
    method: GET
- name: auth
  endpoint:
    path: /oidc/auth
    method: GET
- name: userinfo
  endpoint:
    path: /oidc/me
    method: GET
- name: token
  endpoint:
    path: /oidc/token
    method: POST
- name: session_end
  endpoint:
    path: /oidc/session/end
    method: GET
- name: userinfo
  endpoint:
    path: /oidc/me
    method: GET
- name: user
  endpoint:
    path: /user
    method: GET
- name: user
  endpoint:
    path: /user
    method: PATCH
- name: user
  endpoint:
    path: /user
    method: GET
- name: applications
  endpoint:
    path: /api/applications
    method: GET
- name: users
  endpoint:
    path: /api/users
    method: GET
- name: posts
  endpoint:
    method: GET
- name: alipay_native
  endpoint:
    path: /integrations/alipay-native
- name: alipay_web
  endpoint:
    path: /integrations/alipay-web
- name: amazon
  endpoint:
    path: /integrations/amazon
- name: apple
  endpoint:
    path: /integrations/apple
- name: microsoft
  endpoint:
    path: /integrations/azuread
- name: dingtalk
  endpoint:
    path: /integrations/dingtalk-web
- name: discord
  endpoint:
    path: /integrations/discord
- name: facebook
  endpoint:
    path: /integrations/facebook
- name: feishu
  endpoint:
    path: /integrations/feishu-web
- name: github
  endpoint:
    path: /integrations/github
- name: gitlab
  endpoint:
    path: /integrations/gitlab
- name: google
  endpoint:
    path: /integrations/google
- name: huggingface
  endpoint:
    path: /integrations/huggingface
- name: kakao
  endpoint:
    path: /integrations/kakao
- name: kook
  endpoint:
    path: /integrations/kook
- name: line
  endpoint:
    path: /integrations/line
- name: linkedin
  endpoint:
    path: /integrations/linkedin
- name: naver
  endpoint:
    path: /integrations/naver
- name: oauth2
  endpoint:
    path: /integrations/oauth2
- name: oidc
  endpoint:
    path: /integrations/oidc
- name: patreon
  endpoint:
    path: /integrations/patreon
- name: slack
  endpoint:
    path: /integrations/slack
- name: wechat_native
  endpoint:
    path: /integrations/wechat-native
- name: wechat_web
  endpoint:
    path: /integrations/wechat-web
- name: wecom
  endpoint:
    path: /integrations/wecom
- name: x
  endpoint:
    path: /integrations/x
- name: xiaomi
  endpoint:
    path: /integrations/xiaomi
- name: aliyun_dm
  endpoint:
    path: /integrations/aliyun-dm
- name: aws_ses
  endpoint:
    path: /integrations/aws-ses
- name: http_email
  endpoint:
    path: /integrations/http-email
- name: mailgun
  endpoint:
    path: /integrations/mailgun
- name: postmark
  endpoint:
    path: /integrations/postmark
- name: sendgrid_email
  endpoint:
    path: /integrations/sendgrid-email
- name: smtp
  endpoint:
    path: /integrations/smtp
- name: aliyun_sms
  endpoint:
    path: /integrations/aliyun-sms
- name: gatewayapi
  endpoint:
    path: /integrations/gatewayapi
- name: smsaero
  endpoint:
    path: /integrations/smsaero
- name: tencent_sms
  endpoint:
    path: /integrations/tencent-sms
- name: twilio_sms
  endpoint:
    path: /integrations/twilio-sms
- name: vonage_sms
  endpoint:
    path: /integrations/vonage-sms
- name: entra_id_oidc
  endpoint:
    path: /integrations/entra-id-oidc
- name: entra_id_saml
  endpoint:
    path: /integrations/entra-id-saml
- name: google_workspace
  endpoint:
    path: /integrations/google-workspace
- name: oidc_sso
  endpoint:
    path: /integrations/oidc-sso
- name: okta
  endpoint:
    path: /integrations/okta
- name: saml_sso
  endpoint:
    path: /integrations/saml-sso
- name: permit_io
  endpoint:
    path: /integrations/permit.io
- name: account
  endpoint:
    path: /group/endpoint-account-center
- name: experience
  endpoint:
    path: /group/endpoint-experience
- name: management
  endpoint:
    path: /
- name: account_api
  endpoint:
    path: /group/endpoint-account-center
    method: GET
- name: experience_api
  endpoint:
    path: /group/endpoint-experience
    method: GET
- name: management_api
  endpoint:
    path: /
    method: GET
- name: Account APIs
  endpoint:
    path: /group/endpoint-account-center
    method: GET
- name: Experience APIs
  endpoint:
    path: /group/endpoint-experience
    method: GET
- name: Management APIs
  endpoint:
    path: /operation/operation-getuser
    method: GET
- name: user_management
  endpoint:
    path: /user-management
    method: GET
- name: federated_token_set
  endpoint:
    path: /de/secret-vault/federated-token-set
    method: GET
    data_selector: tokens
- name: mfa
  endpoint:
    path: /de/end-user-flows/mfa
    method: GET
- name: one-time-token
  endpoint:
    path: /api/one-time-tokens
    method: POST
    data_selector: token
    params:
      expiresIn: 3600
      context:
        jitOrganizationIds:
        - abcdefgh1234
- name: Account APIs
  endpoint:
    path: /group/endpoint-account-center
    method: GET
- name: Management APIs
  endpoint:
    path: /
    method: GET
- name: password_verification
  endpoint:
    path: /api/verifications/password/verify
    method: POST
- name: verification_code
  endpoint:
    path: /api/verifications/verification-code
    method: POST
- name: verification_code_verify
  endpoint:
    path: /api/verifications/verification-code/verify
    method: POST
- name: create_organization
  endpoint:
    path: /de/end-user-flows/organization-experience/create-organization
    method: POST
- name: invite_organization_members
  endpoint:
    path: /de/end-user-flows/organization-experience/invite-organization-members
    method: POST
- name: organization_management
  endpoint:
    path: /de/end-user-flows/organization-experience/organization-management
    method: POST
- name: social_verification
  endpoint:
    path: /api/verification/social
    method: POST
- name: social_verification_verify
  endpoint:
    path: /api/verification/social/verify
    method: POST
- name: update_access_token
  endpoint:
    path: /my-account/identities/:target/access-token
    method: PATCH
- name: check_password
  endpoint:
    path: /api/sign-in-exp/default/check-password
    method: POST
- name: email_blocklist
  endpoint:
    path: /security/blocklist
    method: GET
- name: impersonation_request
  endpoint:
    path: /api/request-impersonation
    method: POST
    data_selector: ''
    params: {}
- name: subject_token
  endpoint:
    path: /api/subject-tokens
    method: POST
    data_selector: ''
    params: {}
- name: token_exchange
  endpoint:
    path: /oidc/token
    method: POST
    data_selector: ''
    params: {}
- name: PostSignIn
  endpoint:
    path: /webhooks/PostSignIn
    method: POST
- name: audit_logs
  endpoint:
    path: /audit-logs
    method: GET
    data_selector: logs
- name: oidc
  endpoint:
    path: /oidc
    method: GET
- name: userinfo
  endpoint:
    path: /oidc/me
    method: GET
- name: create_user
  endpoint:
    path: /api/users
    method: POST
    data_selector: user
    params: {}
- name: experience_api
  endpoint:
    path: /experience
    method: POST
    data_selector: data
    params: {}
- name: account_api
  endpoint:
    path: /account
    method: GET
    data_selector: data
    params: {}
- name: sign-in
  endpoint:
    path: /end-user-flows/sign-up-and-sign-in/sign-in
    method: GET
- name: one-time-token
  endpoint:
    path: /api/one-time-tokens
    method: POST
    data_selector: one-time token
- name: custom_profile_fields
  endpoint:
    path: /api/custom-profile-fields
    method: GET
- name: create_organization
  endpoint:
    path: /end-user-flows/organization-experience/create-organization
    method: POST
- name: invite_organization_members
  endpoint:
    path: /end-user-flows/organization-experience/invite-organization-members
    method: POST
- name: organization_management
  endpoint:
    path: /end-user-flows/organization-experience/organization-management
    method: GET
- name: user_identities
  endpoint:
    path: /api/users/{userId}/identities/{target}?includeTokenSecret=true
    method: GET
    data_selector: identities
    params: {}
- name: user_sso_identities
  endpoint:
    path: /api/users/{userId}/sso-identities/{ssoConnectorId}?includeTokenSecret=true
    method: GET
    data_selector: sso_identities
    params: {}
- name: token_retrieve
  endpoint:
    path: /my-account/identities/:target/access-token
    method: GET
    data_selector: access_token
    params: {}
- name: token_delete
  endpoint:
    path: /api/secret/:id
    method: DELETE
    data_selector: delete_token
    params: {}
- name: token_renewal
  endpoint:
    path: /api/verification/social
    method: POST
    data_selector: verification
    params: {}
- name: token_verification
  endpoint:
    path: /api/verification/social/verify
    method: POST
    data_selector: verification_result
    params: {}
- name: token_storage_status
  endpoint:
    path: /api/users/{userId}/identities/{target}?includeTokenSecret=true
    method: GET
- name: sso_token_storage_status
  endpoint:
    path: /api/users/{userId}/sso-identities/{ssoConnectorId}?includeTokenSecret=true
    method: GET
- name: verification_social
  endpoint:
    path: /api/verification/social
    method: POST
- name: verification_social_verify
  endpoint:
    path: /api/verification/social/verify
    method: POST
- name: update_access_token
  endpoint:
    path: /my-account/identities/:target/access-token
    method: PATCH
- name: user_identities
  endpoint:
    path: /api/users/{userId}/identities/{target}?includeTokenSecret=true
    method: GET
    data_selector: identities
- name: sso_identities
  endpoint:
    path: /api/users/{userId}/sso-identities/{ssoConnectorId}?includeTokenSecret=true
    method: GET
    data_selector: ssoIdentities
- name: social_verification
  endpoint:
    path: /api/verification/social
    method: POST
- name: social_verification_verify
  endpoint:
    path: /api/verification/social/verify
    method: POST
- name: update_access_token
  endpoint:
    path: /my-account/identities/:target/access-token
    method: PATCH
- name: user_identities
  endpoint:
    path: /api/users/{userId}/identities/{target}?includeTokenSecret=true
    method: GET
- name: sso_identities
  endpoint:
    path: /api/users/{userId}/sso-identities/{ssoConnectorId}?includeTokenSecret=true
    method: GET
- name: user_identities
  endpoint:
    path: /api/users/{userId}/identities/{target}
    method: GET
    data_selector: identity
    params:
      includeTokenSecret: 'true'
- name: sso_identities
  endpoint:
    path: /api/users/{userId}/sso-identities/{ssoConnectorId}
    method: GET
    data_selector: ssoIdentity
    params:
      includeTokenSecret: 'true'
- name: access_token
  endpoint:
    path: /my-account/identities/:target/access-token
    method: GET
    data_selector: accessToken
- name: sso_access_token
  endpoint:
    path: /my-account/sso-identities/:connectorId/access-token
    method: GET
    data_selector: ssoAccessToken
- name: delete_token
  endpoint:
    path: /api/secret/:id
    method: DELETE
- name: social_verification
  endpoint:
    path: /api/verification/social
    method: POST
- name: social_verification_verify
  endpoint:
    path: /api/verification/social/verify
    method: POST
- name: update_access_token
  endpoint:
    path: /my-account/identities/:target/access-token
    method: PATCH
- name: token_storage
  endpoint:
    path: /api/secret/:id
    method: DELETE
- name: user_identities
  endpoint:
    path: /api/users/{userId}/identities/{target}?includeTokenSecret=true
    method: GET
- name: sso_identities
  endpoint:
    path: /api/users/{userId}/sso-identities/{ssoConnectorId}?includeTokenSecret=true
    method: GET
- name: my_account
  endpoint:
    path: /api/my-account
    method: GET
    data_selector: records
- name: update_my_account
  endpoint:
    path: /api/my-account
    method: PATCH
    data_selector: records
- name: update_password
  endpoint:
    path: /api/my-account/password
    method: POST
    data_selector: records
- name: update_primary_email
  endpoint:
    path: /api/my-account/primary-email
    method: POST
    data_selector: records
- name: delete_primary_email
  endpoint:
    path: /api/my-account/primary-email
    method: DELETE
    data_selector: records
- name: update_primary_phone
  endpoint:
    path: /api/my-account/primary-phone
    method: PATCH
    data_selector: records
- name: delete_primary_phone
  endpoint:
    path: /api/my-account/primary-phone
    method: DELETE
    data_selector: records
- name: link_social_connection
  endpoint:
    path: /api/my-account/identities
    method: POST
    data_selector: records
- name: remove_social_connection
  endpoint:
    path: /api/my-account/identities/[connector_target_id]
    method: DELETE
    data_selector: records
- name: account_center
  endpoint:
    path: /api/account-center
    method: PATCH
    data_selector: ''
- name: web_authn_registration
  endpoint:
    path: /api/verifications/web-authn/registration
    method: POST
    data_selector: ''
- name: web_authn_registration_verify
  endpoint:
    path: /api/verifications/web-authn/registration/verify
    method: POST
    data_selector: ''
- name: mfa_verifications
  endpoint:
    path: /api/my-account/mfa-verifications
    method: POST
    data_selector: ''
- name: backup_codes_generate
  endpoint:
    path: /api/my-account/mfa-verifications/backup-codes/generate
    method: POST
    data_selector: ''
- name: backup_codes_view
  endpoint:
    path: /api/my-account/mfa-verifications/backup-codes
    method: GET
    data_selector: ''
- name: check_password
  endpoint:
    path: /api/sign-in-exp/default/check-password
    method: POST
    data_selector: results
- name: check_password
  endpoint:
    path: /api/sign-in-exp/default/check-password
    method: POST
- name: check_password
  endpoint:
    path: /api/sign-in-exp/default/check-password
    method: POST
- name: check_password
  endpoint:
    path: /api/sign-in-exp/default/check-password
    method: POST
    data_selector: result
    params: {}
- name: check_password
  endpoint:
    path: /api/sign-in-exp/default/check-password
    method: POST
- name: check_password
  endpoint:
    path: /api/sign-in-exp/default/check-password
    method: POST
- name: check_password
  endpoint:
    path: /api/sign-in-exp/default/check-password
    method: POST
- name: check_password
  endpoint:
    path: /api/sign-in-exp/default/check-password
    method: POST
- name: email_blocklist
  endpoint:
    path: /security/blocklist
    method: GET
    data_selector: blocklist_rules
- name: identifier_lockout_policy
  endpoint:
    path: /security/identifier-lockout
    method: GET
    data_selector: policy_settings
    params: {}
- name: organization_permissions
  endpoint:
    path: /group/endpoint-organization-scopes
    method: GET
- name: roles
  endpoint:
    path: /group/endpoint-roles
    method: GET
- name: organization_roles
  endpoint:
    path: /group/endpoint-organization-roles
    method: GET
- name: API Resource
  endpoint:
    path: /api/resources
    method: POST
    data_selector: resource
    params: {}
- name: protected
  endpoint:
    path: /api/protected
    method: GET
    data_selector: auth
    params: {}
- name: protected_endpoint
  endpoint:
    path: /api/protected
    method: GET
    data_selector: auth
    params: {}
- name: request_impersonation
  endpoint:
    path: /api/request-impersonation
    method: POST
    data_selector: ''
    params: {}
- name: subject_tokens
  endpoint:
    path: /api/subject-tokens
    method: POST
    data_selector: ''
    params: {}
- name: token
  endpoint:
    path: /oidc/token
    method: POST
    data_selector: ''
    params: {}
- name: request_impersonation
  endpoint:
    path: /api/request-impersonation
    method: POST
    data_selector: subjectToken
    params: {}
- name: subject_tokens
  endpoint:
    path: /api/subject-tokens
    method: POST
    data_selector: subjectToken
    params: {}
- name: token_exchange
  endpoint:
    path: /oidc/token
    method: POST
    data_selector: access_token
    params: {}
- name: request_impersonation
  endpoint:
    path: /api/request-impersonation
    method: POST
- name: subject_tokens
  endpoint:
    path: /api/subject-tokens
    method: POST
- name: token_exchange
  endpoint:
    path: /oidc/token
    method: POST
- name: request_impersonation
  endpoint:
    path: /api/request-impersonation
    method: POST
    data_selector: ''
    params: {}
- name: subject_tokens
  endpoint:
    path: /api/subject-tokens
    method: POST
    data_selector: ''
    params: {}
- name: token_exchange
  endpoint:
    path: /oidc/token
    method: POST
    data_selector: ''
    params: {}
- name: request_impersonation
  endpoint:
    path: /api/request-impersonation
    method: POST
    data_selector: subjectToken
    params: {}
- name: subject_tokens
  endpoint:
    path: /api/subject-tokens
    method: POST
    data_selector: subjectToken
    params: {}
- name: access_token
  endpoint:
    path: /oidc/token
    method: POST
    data_selector: access_token
    params: {}
- name: request_impersonation
  endpoint:
    path: /api/request-impersonation
    method: POST
    data_selector: subjectToken
    params: {}
- name: subject_tokens
  endpoint:
    path: /api/subject-tokens
    method: POST
    data_selector: subjectToken
    params: {}
- name: request_impersonation
  endpoint:
    path: /api/request-impersonation
    method: POST
    data_selector: subjectToken
    params: {}
- name: subject_tokens
  endpoint:
    path: /api/subject-tokens
    method: POST
    data_selector: subjectToken
    params: {}
- name: token_exchange
  endpoint:
    path: /oidc/token
    method: POST
    data_selector: access_token
    params: {}
- name: request_impersonation
  endpoint:
    path: /api/request-impersonation
    method: POST
- name: subject_tokens
  endpoint:
    path: /api/subject-tokens
    method: POST
- name: access_token
  endpoint:
    path: /oidc/token
    method: POST
- name: request_impersonation
  endpoint:
    path: /api/request-impersonation
    method: POST
- name: subject_tokens
  endpoint:
    path: /api/subject-tokens
    method: POST
- name: token
  endpoint:
    path: /oidc/token
    method: POST
- name: audit_logs
  endpoint:
    path: /audit-logs
    method: GET
    data_selector: logs
- name: introspection
  endpoint:
    path: /oidc/token/introspection
    method: POST
    data_selector: active
    params:
      token: some-random-string
      client_id: '1234567890'
      client_secret: '1234567890'
- name: user
  endpoint:
    path: /api/users
    method: GET
    data_selector: data
- name: application
  endpoint:
    path: /api/applications
    method: GET
    data_selector: data
- name: audit_logs
  endpoint:
    path: /api/audit_logs
    method: GET
    data_selector: data
- name: roles
  endpoint:
    path: /api/roles
    method: GET
    data_selector: data
- name: resources
  endpoint:
    path: /api/resources
    method: GET
    data_selector: data
- name: connectors
  endpoint:
    path: /api/connectors
    method: GET
    data_selector: data
- name: organizations
  endpoint:
    path: /api/organizations
    method: GET
    data_selector: data
- name: user
  endpoint:
    path: /api/users
    method: GET
    data_selector: data
    params: {}
- name: application
  endpoint:
    path: /api/applications
    method: GET
    data_selector: data
    params: {}
- name: audit_logs
  endpoint:
    path: /api/logs
    method: GET
    data_selector: data
    params: {}
- name: roles
  endpoint:
    path: /api/roles
    method: GET
    data_selector: data
    params: {}
- name: resources
  endpoint:
    path: /api/resources
    method: GET
    data_selector: data
    params: {}
- name: connectors
  endpoint:
    path: /api/connectors
    method: GET
    data_selector: data
    params: {}
- name: organizations
  endpoint:
    path: /api/organizations
    method: GET
    data_selector: data
    params: {}
- name: user
  endpoint:
    path: /api/users
    method: GET
    data_selector: data
- name: application
  endpoint:
    path: /api/applications
    method: GET
    data_selector: data
- name: log
  endpoint:
    path: /api/logs
    method: GET
    data_selector: data
- name: role
  endpoint:
    path: /api/roles
    method: GET
    data_selector: data
- name: resource
  endpoint:
    path: /api/resources
    method: GET
    data_selector: data
- name: connector
  endpoint:
    path: /api/connectors
    method: GET
    data_selector: data
- name: organization
  endpoint:
    path: /api/organizations
    method: GET
    data_selector: data
- name: users
  endpoint:
    path: /api/users
    method: GET
- name: applications
  endpoint:
    path: /api/applications
    method: GET
- name: logs
  endpoint:
    path: /api/logs
    method: GET
- name: roles
  endpoint:
    path: /api/roles
    method: GET
- name: resources
  endpoint:
    path: /api/resources
    method: GET
- name: connectors
  endpoint:
    path: /api/connectors
    method: GET
- name: organizations
  endpoint:
    path: /api/organizations
    method: GET
- name: user
  endpoint:
    path: /api/users
    method: GET
- name: application
  endpoint:
    path: /api/applications
    method: GET
- name: audit_logs
  endpoint:
    path: /api/audit-logs
    method: GET
- name: roles
  endpoint:
    path: /api/roles
    method: GET
- name: resources
  endpoint:
    path: /api/resources
    method: GET
- name: connectors
  endpoint:
    path: /api/connectors
    method: GET
- name: organizations
  endpoint:
    path: /api/organizations
    method: GET
- name: user
  endpoint:
    path: /api/users
    method: GET
    data_selector: data
    params: {}
- name: application
  endpoint:
    path: /api/applications
    method: GET
    data_selector: data
    params: {}
- name: user
  endpoint:
    path: /api/users
    method: GET
- name: application
  endpoint:
    path: /api/applications
    method: GET
- name: audit_logs
  endpoint:
    path: /api/audit-logs
    method: GET
- name: roles
  endpoint:
    path: /api/roles
    method: GET
- name: resources
  endpoint:
    path: /api/resources
    method: GET
- name: connectors
  endpoint:
    path: /api/connectors
    method: GET
- name: organizations
  endpoint:
    path: /api/organizations
    method: GET
- name: users
  endpoint:
    path: /api/users
    method: GET
    data_selector: data
- name: applications
  endpoint:
    path: /api/applications
    method: GET
    data_selector: data
- name: logs
  endpoint:
    path: /api/logs
    method: GET
    data_selector: data
- name: roles
  endpoint:
    path: /api/roles
    method: GET
    data_selector: data
- name: resources
  endpoint:
    path: /api/resources
    method: GET
    data_selector: data
- name: connectors
  endpoint:
    path: /api/connectors
    method: GET
    data_selector: data
- name: organizations
  endpoint:
    path: /api/organizations
    method: GET
    data_selector: data
- name: User
  endpoint:
    path: /api/users
    method: GET
- name: Application
  endpoint:
    path: /api/applications
    method: GET
- name: Audit logs
  endpoint:
    path: /api/logs
    method: GET
- name: Roles
  endpoint:
    path: /api/roles
    method: GET
- name: Resources
  endpoint:
    path: /api/resources
    method: GET
- name: Connectors
  endpoint:
    path: /api/connectors
    method: GET
- name: Organizations
  endpoint:
    path: /api/organizations
    method: GET
- name: authentication_flows
  endpoint:
    path: /end-user-flows/authentication
    method: GET
- name: account_flows
  endpoint:
    path: /end-user-flows/account
    method: GET
- name: organization_flows
  endpoint:
    path: /end-user-flows/organization
    method: GET
- name: user_management
  endpoint:
    path: /manage-users
    method: GET
- name: advanced_user_search
  endpoint:
    path: /advanced-user-search
    method: GET
- name: organizations
  endpoint:
    path: /organizations
    method: GET
- name: users
  endpoint:
    path: /api/users
    method: GET
    data_selector: entities
    params:
      search: search
      mode: mode
      joint: joint
      isCaseSensitive: isCaseSensitive
- name: create_organization
  endpoint:
    path: /create-organization
    method: POST
- name: invite_organization_members
  endpoint:
    path: /invite-organization-members
    method: POST
- name: organization_management
  endpoint:
    path: /organization-management
    method: POST
- name: users
  endpoint:
    path: /api/users
    method: GET
    data_selector: User
    params:
      search: search
      mode: mode
      joint: joint
      isCaseSensitive: isCaseSensitive
- name: users
  endpoint:
    path: /api/users
    method: GET
    data_selector: User
- name: users
  endpoint:
    path: /api/users
    method: GET
    data_selector: User
    params: {}
- name: users
  endpoint:
    path: /api/users
    method: GET
    data_selector: User
    params: {}
- name: users
  endpoint:
    path: /api/users
    method: GET
    data_selector: User
    params: {}
- name: users
  endpoint:
    path: /api/users
    method: GET
    data_selector: User
    params: {}
- name: users
  endpoint:
    path: /api/users
    method: GET
    data_selector: User
    params: {}
- name: users
  endpoint:
    path: /api/users
    method: GET
    data_selector: User
    params: {}
- name: users
  endpoint:
    path: /api/users
    method: GET
    data_selector: User
- name: user
  endpoint:
    path: /api/users/:userId
    method: GET
- name: custom_data
  endpoint:
    path: /api/users/{userId}/custom-data
    method: PATCH
- name: user_data
  endpoint:
    path: /operation/operation-getuser
    method: GET
    data_selector: records
- name: users
  endpoint:
    path: /api/users
    method: GET
- name: user_logs
  endpoint:
    path: /api/logs
    method: GET
- name: Token Exchange
  endpoint:
    path: /oidc/token
    method: POST
notes:
- Uses role-based access control (RBAC) and JSON Web Token (JWT) validation for API
  protection
- Supports multiple programming languages and frameworks
- Uses OAuth2 client credentials flow for M2M authentication
- 'API identifier pattern: https://[tenant-id].logto.app/api for Cloud, https://default.logto.app/api
  for OSS'
- Cannot use custom domain for token endpoint in Logto Cloud
- Access token expires in 3600 seconds
- Pagination uses page and page_size query parameters
- 'Rate limit recommendation: 200 requests per 10 seconds for Logto Cloud'
- Minimum supported Android API level is 24
- Uses OAuth 2.0 and OpenID Connect (OIDC) protocols
- Follows principle of least privilege for claims
- 'SDK will always request three scopes: openid, profile, and offline_access'
- Some claims require network requests to fetch via userinfo endpoint
- 'Redirect URI follows pattern: $(LOGTO_REDIRECT_SCHEME)://$(YOUR_APP_PACKAGE)/callback'
- Uses OpenID Connect (OIDC) protocol with strict security measures
- Authentication state can be persisted in Safari View Controller on iOS and Chrome
  Custom Tabs on Android
- Follows principle of least privilege - limited claims returned by default
- Some claims require network requests to fetch to prevent bloating ID token
- Scopes are defined separately from API resources following Resource Indicators for
  OAuth 2.0
- Both autoUserInfo and renewUserInfoAfterTokenRenew will be disabled when resource
  is set
- Access token will be in JWT format instead of random string when resource is configured
- Unavailable scopes will be safely ignored
- Uses OIDC protocol with authorization code flow
- ID token may not contain all user claims - some require userinfo endpoint
- SDK automatically fetches user information if no resource provided in config
- Custom data and identities claims require network requests to userinfo endpoint
- Designed for Chrome extensions using chrome.identity API
- 'Requires permissions: identity, storage in manifest.json'
- Uses redirect-based authentication following OpenID Connect protocol
- Service worker required for background authentication handling
- Limited claims returned by default following principle of least privilege
- Uses OIDC scopes and claims conventions
- Access tokens are JWT format
- Bearer token format required in Authorization header
- Some claims require userinfo endpoint for retrieval
- Organization tokens available for multi-tenancy
- created_at and updated_at claims use milliseconds instead of seconds
- Authentication middleware will automatically refresh tokens when necessary
- Claims in the user object will not be updated due to limitation of underlying OpenID
  Connect authentication handler
- Access token for userinfo endpoint is opaque token, not JWT
- Access token for API resource will be JWT with API resource as audience
- Cannot directly access HttpContext in Razor components - need to inject HttpContextAccessor
- Default Logto redirect URI path is /Callback
- Default Logto post sign-out redirect URI path is /SignedOutCallback
- Blazor Server uses SignalR communication requiring explicit endpoints for sign-in/sign-out
- 'SDK always requests three scopes: openid, profile, and offline_access'
- Some claims require network requests to userinfo endpoint to fetch
- Compatible with .NET 6.0 or higher, demonstration built on .NET Core 8.0
- Built on OAuth 2.0 and OpenID Connect standards
- Authentication middleware automatically refreshes tokens when necessary
- Claims in user object will not be updated due to limitation of underlying OpenID
  Connect authentication handler
- Access token for userinfo endpoint is opaque, not JWT
- Access token for API resources will be JWT with API resource as audience
- JWT access token automatically refreshes using refresh token when expired
- Organization support requires UserScope.Organizations scope
- Package exports must be enabled in Metro bundler for SDK versions <= v0.3.0
- Uses OAuth 2.0 and OpenID Connect (OIDC) protocol
- Some claims require network requests to userinfo endpoint
- Supports native redirect URI schemes for mobile apps
- Default authentication scheme set to LogtoDefaults.CookieScheme
- Default challenge scheme set to LogtoDefaults.AuthenticationScheme
- Uses OpenID Connect with authorization code flow
- Access token is opaque by default, JWT available when API resource configured
- LoadUserInfo conflicts with fetching access token for API resources in WebAssembly
- Some claims require network request to userinfo endpoint
- Follows OAuth 2.0 and OIDC principle of least privilege
- Requires express-session to be configured in prior
- Some claims require network requests to fetch and need fetchUserInfo option
- Claims like custom_data and identities need userinfo endpoint
- Resource Indicators for OAuth 2.0 specifies final scopes as cartesian product of
  all scopes at all target services
- Uses flutter_secure_storage for cross-platform persistent secure token storage
- Uses flutter_web_auth for webview-based authentication interface
- SDK is currently only suitable for Android and iOS platforms
- Requires minimum Android SDK version 18
- Uses ASWebAuthenticationSession on iOS 12+ and macOS 10.15+
- Uses SFAuthenticationSession on iOS 11
- Uses Chrome Custom Tabs on Android
- Claims like custom_data and identities require network requests to userinfo endpoint
- Standard OIDC scopes and claims conventions are used
- Resource Indicators for OAuth 2.0 creates cartesian product of scopes across resources
- Uses ASWebAuthenticationSession on iOS 12+ and macOS 10.15+, SFAuthenticationSession
  on iOS 11, Chrome Custom Tabs on Android
- SDK uses flutter_secure_storage for cross-platform persistent secure token storage
- Keychain is used for iOS, AES encryption is used for Android
- By default, limited claims are returned following principle of least privilege
- 'Always requests three scopes: openid, profile, and offline_access'
- Uses OAuth 2.0 and OpenID Connect (OIDC) standards
- Some claims like custom_data require network requests to userinfo endpoint
- Cookie-based sessions not recommended due to size limits
- Requires cookieSecret to be at least 32 characters long
- Follows principle of least privilege (PoLP) - limited claims returned by default
- Authentication process follows redirect-based sign-in pattern
- Uses OIDC scopes and claims conventions to define user information retrieval
- Some claims like custom_data, identities, sso_identities, and organization_data
  require userinfo endpoint access
- Claims with empty values return null for standard claims, while other standard claims
  are omitted when empty
- created_at and updated_at claims use milliseconds instead of seconds unlike standard
  claims
- Uses ES384 as the default algorithm for JWT token verification
- Follows OpenID Connect (OIDC) protocol with strict security measures
- 'Additional scopes can be requested: email, phone, urn:logto:scope:organizations'
- Uses OAuth2 with refresh token flow
- Requires offline_access scope for refresh token
- Scopes are defined separately from API resources
- Resource Indicators for OAuth 2.0 specifies final scopes as cartesian product
- Uses OIDC standards with ES384 signing algorithm for ID tokens
- Access tokens have short validity periods and may need refresh
- Some claims like custom_data require userinfo endpoint requests
- Follows principle of least privilege - limited claims by default
- Uses OAuth2 with refresh token - access tokens are automatically refreshed when
  expired
- Organization tokens require UserScope.Organizations scope
- Composables useLogtoClient() and useLogtoUser() are not available in middleware
  or API routes
- Requires server-side rendering (SSR) to work properly
- Some claims require network requests to fetch and are not included in ID token
- Claims availability depends on scopes requested during sign-in
- Uses OAuth2 authorization code flow with OIDC
- Requires redirect URIs to be configured in Logto Console
- SDK uses built-in PHP session to store Logto data by default
- Claims with null values may indicate missing scopes or unavailable user data
- The Python sample project is available on Logto Python SDK repo
- Logto SDK leverages coroutines, remember to use await when calling async functions
- Uses Flask framework but concepts are the same for other frameworks
- Replace the default memory storage with a persistent storage
- Authentication process follows the OpenID Connect (OIDC) protocol
- If you have multiple apps, you can use the same identity provider (Logto)
- Requires setup of redirect URIs in Logto Console
- SDK leverages coroutines, remember to use await when calling async functions
- Default memory storage should be replaced with persistent storage like SessionStorage
- Uses OIDC protocol with redirect-based authentication
- Requires persistent storage implementation for session management
- SDK leverages coroutines - use await when calling async functions
- Custom scopes can be requested for additional user information
- Put the token in the Authorization field of HTTP headers with the Bearer format
  (Bearer YOUR_TOKEN)
- The Bearer Token's integration flow may vary based on the framework or requester
  you are using
- Uses OAuth2 with OIDC protocol for authentication
- Supports API resources with JWT access tokens
- Access tokens automatically refresh when expired
- Uses OAuth2 with refresh token
- Built on OpenID Connect (OIDC) protocol
- Follows principle of least privilege (PoLP)
- Some claims require network requests to fetch
- By default, credentials like ID Token and Refresh Token are stored in the Keychain
- Some claims require network requests to fetch and are not included in the ID token
- Authentication process follows OpenID Connect (OIDC) protocol
- Logto enforces strict security measures to protect user sign-in
- Limited claims are returned by default following principle of least privilege
- Follows the principle of least privilege (PoLP)
- Supports organization-based access tokens
- Built on Ruby 3.3.3 with Rails framework support
- Framework-agnostic SDK can be used in any frontend framework
- Access tokens automatically refreshed when expired using refresh token
- Uses OIDC protocol for authentication
- 'Requires OpenID scope: email profile openid offline_access'
- 'Base URL format: https://[tenant-id].logto.app'
- Supports role-based access control (RBAC) with scopes
- Identity key can be email or sub depending on configuration
- Built with composition API and leveraging composables, only compatible with Vue
  3
- Uses OIDC scopes and claims conventions to define user information access
- Some claims require network requests to userinfo endpoint to prevent ID token bloating
- 'Logto SDK always requests three scopes: openid, profile, and offline_access'
- Uses OAuth2 with refresh token - requires setup of traditional web application in
  Logto Console
- Plugin requires verified email address by default
- Role mapping allows mapping Logto roles to WordPress roles
- Session remembered for 2 weeks by default
- Profile synced at every login by default
- Uses role-based access management
- Supports both Webhook and JWT access control methods
- JWT approach reduces network load compared to Webhook approach
- Webhook approach can synchronize changes in user permissions in real-time
- Requires HASURA_GRAPHQL_JWT_SECRET environment variable configuration
- Uses OAuth2 with authorization code flow and PKCE
- Requires redirect URI configuration in Admin Console
- Access tokens expire and require refresh token for renewal
- Sessions store user tokens and interaction data
- Uses OAuth2 client credentials flow for machine-to-machine authentication
- M2M app roles must be assigned for API access
- The sub in access token payload will be the App ID
- 'For Logto Cloud users: cannot use custom domain for Management API access'
- Supabase utilizes Postgres's Row-Level Security to control data access permissions
- JWT secret should never be exposed to third parties
- service_role secret can be used to bypass RLS restrictions for administrative tasks
- Logto currently requires third-party apps to be Traditional web apps
- The app needs a backend server to securely store the client secret
- Third-party apps will show a consent screen asking users for explicit permission
  to access their data
- Logto Cloud is an authentication and authorization managed service
- Each Tenant is digitally isolated from other Tenants and has its own configuration,
  data, and users
- Customer Data is stored on secure servers located in data centers within the West
  Europe region
- Service may transfer Customer Data outside of the EEA if necessary
- Uses JWT validation for API endpoint protection
- Implements role-based access control (RBAC)
- Logto is designed for modern applications and SaaS products.
- It provides secure and customizable authentication and authorization systems.
- Logto can be configured as an Identity Provider (IdP) for third-party applications.
- Modern authentication security combats threats like phishing, credential stuffing,
  brute-force attacks, ransomware, DDoS, and AI-driven attacks.
- Enterprise SSO simplifies authentication for employees across workplace tools.
- MFA requires at least two different verification methods.
- Das Einmal-Token läuft nach der angegebenen expiresIn-Zeit (in Sekunden) ab. Die
  Standardablaufzeit beträgt 10 Minuten.
- Benutzern wird eine transparente Zustimmung für die Verarbeitung ihrer personenbezogenen
  Daten eingeholt.
- Der End-Session-Endpunkt ist ein standardisierter OIDC-Endpunkt, der es der Client-Anwendung
  ermöglicht, dem Autorisierungsserver mitzuteilen, dass sich der Benutzer abgemeldet
  hat.
- Die Token-Speicherung ist direkt mit den Social- oder Enterprise-SSO-Verbindungen
  jedes Benutzers verknüpft.
- Reauthentication and token renewal require users to restart the full Logto authentication
  flow for Enterprise SSO connectors.
- Wegwerf-E-Mails, Subaddressing und benutzerdefinierte E-Mails sind während der Registrierung
  und Kontoverknüpfung eingeschränkt.
- 'Maximale fehlgeschlagene Versuche: Standardwert ist 100'
- 'Sperrdauer: Standardwert ist 60 Minuten'
- Nur Maschine-zu-Maschine (M2M)-Rollen können mit der Logto Management API verknüpft
  werden.
- Das Organisationstemplate von Logto ist für moderne, Multi-Tenant-SaaS-Anwendungen
  konzipiert.
- Logto-eigene Token-Ansprüche können NICHT überschrieben oder verändert werden.
- The subject token is short-lived and can only be used once.
- The impersonation access token is not returned with a refresh token.
- Audit-Logs contain only logs that occur during the user's authentication process.
- Logto erzwingt strenge Sicherheitsmaßnahmen, wie PKCE, und deaktiviert unsichere
  Flows wie den impliziten Flow.
- 'Setze den Header Content-Type: application/x-www-form-urlencoded, wenn du OIDC-APIs
  direkt aufrufen möchtest.'
- We only use strictly necessary cookies to ensure secure authentication and authorization
  for our services.
- Assurez-vous d'entrer le domaine personnalisé dès que vous créez un locataire de
  production, car cela impactera votre configuration suivante.
- This setup allows projects to have both development and production environments.
- Multi-tenancy, member invitations, and MFA are not available for your team to sign
  into an open-source Logto console.
- Logto supports multiple organizations within a single tenant.
- Some advanced features are currently exclusive to the Logto Cloud version.
- Changing the domain after publishing your service may cause troubles because your
  application code and integrations might still reference the old domain.
- API point is rate limited, add a sleep between each request to avoid the rate limit.
- Logto provides a flexible and customizable user experience for various business
  requirements.
- Logto provides session-based Experience API for managing user interactions.
- Logto는 여러 클라이언트 애플리케이션과 플랫폼에서 사용자에게 보편적인 로그인 경험을 제공합니다.
- Logto supports customizable sign-in experiences.
- No Headless API for sign-in and sign-up.
- Logto 提供靈活且可自訂的使用者體驗，以滿足各種業務需求，包括自訂品牌、使用者介面和使用者互動流程
- Currently, Logto only supports verified emails and phone numbers as identifiers.
- Logto does not currently support headless API for sign-in and sign-up.
- Social sign-in allows users to sign up or sign in using their existing social media
  accounts.
- Users may be prompted to provide additional verified information to complete the
  sign-up process.
- The password recovery feature will be automatically enabled when you have a valid
  Email or SMS connector configured.
- If the value is empty, you do not need to manage terms and privacy agreements within
  Logto's sign-in flows.
- Logto does not provide a built-in invitation flow.
- Using magic link for targeted user invitation is recommended.
- Logto uses the OpenID Connect (OIDC) flow for authentication.
- When sessions expire or users bookmark/share sign-in links, it causes 'unknown session'
  404 errors.
- MFA is a vital security measure for B2B and B2E services.
- Logto simplifies the MFA activation process with a one-click toggle.
- One-time tokens expire after the specified 'expiresIn' time.
- Collect only essential data at sign-up; defer nice-to-have info to later profile
  completion.
- To explicitly sign out the user and clear the session at Logto, the client application
  needs to redirect the user to the Logto's end session endpoint.
- Logto allows you to insert custom claims into the access token through a callback
  function getCustomJwtClaims.
- Logto build-in token claims can NOT be overridden or modified.
- This feature requires your custom UI to be Single Page Application (SPA) compatible,
  and it's recommended to always use a production build for optimal performance.
- Proceed with caution when using this feature in production, since it will immediately
  affect your users' sign-in experience.
- Tokens are securely managed in Logto's secret vault.
- Requires proper authorization to access stored tokens.
- Almacena automáticamente los tokens de acceso y actualización emitidos por el proveedor
  de identidad federado
- La reiniciación de la autorización federada está actualmente limitada a conectores
  sociales.
- No olvides validar el parámetro `state` para prevenir ataques CSRF.
- Le stockage de jetons tiers est lié à chaque connexion sociale ou SSO d’entreprise
  de l’utilisateur.
- トークン保存はすべての OIDC エンタープライズコネクターで利用可能です。
- トークン保存状況はLogto コンソールで確認できます。
- 서드파티 토큰 저장이 활성화되면, 사용자가 소셜 또는 엔터프라이즈 SSO 커넥터를 통해 인증 (Authentication)할 때마다 Logto가
  페더레이티드 아이덴티티 제공자가 발급한 액세스 토큰 (Access token)과 리프레시 토큰 (Refresh token)을 자동으로 저장합니다.
- 페더레이티드 인가 재시작은 현재 소셜 커넥터에 한정되어 있습니다.
- 엔터프라이즈 SSO 커넥터의 경우, 재인증 및 토큰 갱신을 위해 사용자가 Logto 인증 (Authentication) 플로우 전체를 다시 시작해야
  하며, 로그인 이후 엔터프라이즈 SSO 제공자와의 직접 재인가 (Authorization)는 현재 지원되지 않습니다.
- Tokens are stored securely in the Logto secret vault.
- Tokens can be revoked by deleting them from the user's identity.
- A reinicialização da autorização federada está atualmente limitada a conectores
  sociais.
- Para conectores SSO corporativos, a reautenticação e renovação de tokens exigem
  que o usuário inicie novamente todo o fluxo de autenticação do Logto.
- Tokens are stored automatically upon user authentication through social connectors
  or Enterprise SSO.
- Tokens can be deleted manually to revoke access.
- การเริ่ม federated authorization ใหม่ในขณะนี้จำกัดเฉพาะตัวเชื่อมต่อโซเชียล
- สำหรับตัวเชื่อมต่อ Enterprise SSO การยืนยันตัวตนใหม่และการต่ออายุโทเค็นจำเป็นต้องให้ผู้ใช้เริ่ม
  flow การยืนยันตัวตนของ Logto ใหม่ทั้งหมด
- Access tokens and refresh tokens are stored securely in Logto's secret vault.
- Tokens are automatically deleted when associated SSO identities are removed.
- 重新发起联合授权目前仅限于社交连接器。
- 对于企业单点登录 (SSO) 连接器，重新认证 (Authentication) 和令牌续期需要用户重新发起完整的 Logto 认证 (Authentication)
  流程，因为目前登录后不支持直接与企业单点登录 (SSO) 提供商重新授权。
- 啟用第三方權杖儲存後，Logto 會在使用者透過社交或企業級 SSO 連接器驗證時，自動儲存由聯邦身分提供者簽發的存取權杖 (Access token) 與重新整理權杖
  (Refresh token)。
- 重新啟動聯邦授權目前僅限於社交連接器。
- 對於企業級 SSO 連接器，重新驗證與權杖續期需使用者重新啟動完整 Logto 驗證流程，因目前尚不支援登入後直接與企業級 SSO 提供者重新授權。
- Each social connector has a unique Identity Provider (IdP) name to differentiate
  user identities.
- The default is to 'sync only upon registration'. 'sync at each sign-in' is an alternative
  but may overwrite custom user data.
- Keep your Client secret secure and never expose it in client-side code.
- GitHub's access token response does not include the specific scope information.
- Keep your client secret secure and never expose it in client-side code.
- Apps with sensitive or restricted scopes may require Google's verification before
  they can be published.
- Facebook doesn't provide refresh tokens. Logto automatically requests a long-lived
  access token (60 days) upon user authentication.
- We ONLY support 'Authorization Code' grant type for security consideration.
- Only supports 'Authorization Code' grant type for security consideration.
- Users signing-in with emails belonging to configured domains will be forced to use
  SSO sign-in.
- Ensure refresh tokens are returned, configure your Logto Google connector to enable
  Offline Access.
- Provide the email domains of your organization on the connector experience tab.
- Logto will complete the authentication process based on authorization code received
  from this URI.
- Logto always includes the `openid`, `profile`, and `email` scopes to retrieve basic
  user identity information, regardless of your custom scope settings.
- To ensure the access token has the appropriate permissions, make sure you have properly
  configured the corresponding scopes in your Logto config.
- Remember to enable MFA and WebAuthn first.
- To use this method, you need to enable the mfa field in the account center settings.
- 新しく作成されたアカウントのみが、更新されたポリシーに従う必要があります。
- より強力なセキュリティを強制するために、POST /api/sign-in-exp/default/check-password API を利用して、ユーザーのパスワードがデフォルトのサインイン体験で定義された現在のポリシーを満たしているかどうかを確認できます。
- CAPTCHA bot protection helps secure your user flows by verifying that users are
  human, significantly reducing bot attacks.
- Disposable emails, subaddressing, and custom email are restricted during registration
  and account linking.
- The identifier lockout policy allows you to customize your own sentinel policy settings
  to protect against account sign-in/sign-up abuse.
- This policy works by monitoring authentication attempts for each identifier (such
  as usernames or email addresses) and implementing restrictions when suspicious activity
  is detected.
- In Logto (and OAuth 2.1), 'permissions' and 'scopes' refer to the same concept and
  are used interchangeably.
- Validate the access token to ensure it is issued by Logto, not expired, and has
  the required permissions (scopes) for the requested action.
- Respond with an error (e.g., HTTP 401 Unauthorized or HTTP 403 Forbidden) if the
  token is missing, invalid, or does not have the required permissions.
- Los roles de organización son específicos de la organización y no pueden mezclarse
  ni actualizarse después de su creación.
- Dans Logto (et OAuth 2.1), « permissions » et « portées » (scopes) désignent le
  même concept et sont utilisées de manière interchangeable dans cette documentation.
- Les rôles et permissions peuvent être attribués via l’API.
- Logto（および OAuth 2.1）では、権限 (permissions) とスコープ (scopes) は同じ概念を指し、本ドキュメント内で同義的に使用されます。
- グローバルロールと組織ロールは混在できない
- ロールのタイプに応じてユーザーまたは M2M アプリを割り当てる必要がある
- 이 두 역할 유형은 혼합하거나 생성 후 변경할 수 없습니다. 역할 유형에 따라 사용자 또는 M2M 앱을 할당하세요.
- No Logto (e no OAuth 2.1), 'permissões' e 'escopos' referem-se ao mesmo conceito
  e são usados de forma intercambiável nesta documentação.
- Apenas papéis máquina para máquina (M2M) podem vincular ao Logto Management API
- Esses dois tipos de papéis não podem ser misturados ou atualizados após a criação
- Uses OAuth 2.0 for access control
- Resource indicators are used for defining API resources
- Uses JWTs for authorization in your app or API
- 为跨应用 RBAC 使用共享资源和权限 (Scopes)。
- 可以通过 API 分配角色和权限吗？可以，控制台和 Management API 均支持以编程方式管理角色和分配。
- 每個 API 資源都由唯一的資源標示符識別，用於限定存取權杖的範圍並強制受眾限制。
- Logto 不支援全域層級的非 API 權限，因該層級保留給 OpenID Connect (OIDC) 權限範圍。
- 僅機器對機器 (M2M) 角色可連結 Logto Management API
- 兩種角色類型建立後不可混用或變更
- Organization roles and permissions are distinct from global roles and their permissions.
- Uses OAuth 2.0 for securing APIs
- Global API resources have no organization context
- Organization permissions (non-API) control access to app features and workflows
  within an organization context.
- Organization RBAC is only applied if an organization_id is included in the request.
- Validating access tokens is a critical part of enforcing role-based access control
  (RBAC) in Logto.
- Always validate both permissions (scopes) and context (audience, organization) for
  secure multi-tenant APIs.
- We use jose in this example to validate the JWT. Install it if you haven't already.
- We use PyJWT to validate JWTs. Install it if you haven't already.
- Uses JWT for authentication — requires setup of issuer and JWKS URI
- Check required scopes for organization-level API resources
- Just-in-time (JIT) provisioning only triggers for user-initiated actions and does
  not affect interactions with the Logto Management API.
- The subject token is short-lived and for one-time-use.
- The impersonation access token doesn't come with a refresh token.
- El token de sujeto es de corta duración y de un solo uso.
- El token de acceso de suplantación no viene con un token de actualización.
- Le jeton de sujet est de courte durée et à usage unique.
- Le jeton d’accès d’usurpation ne s’accompagne pas d’un jeton de rafraîchissement.
- サブジェクトトークンは短命で一度きりの利用です。
- なりすましアクセストークンにはリフレッシュ トークンは付与されません。
- O token de sujeito é de curta duração e para uso único.
- O token de acesso de imitação não vem com um token de atualização (Refresh token).
- subject token มีอายุสั้นและใช้ได้เพียงครั้งเดียว
- access token สำหรับการสวมรอยจะไม่มี refresh token หาก token หมดอายุก่อนที่ Sarah
  จะช่วยแก้ปัญหาให้ Alex ได้สำเร็จ Sarah ต้องทำกระบวนการนี้ใหม่อีกครั้ง
- subject token 是短时且一次性使用的。
- 模仿访问令牌 (Access token) 不会携带刷新令牌 (Refresh token)。
- subject token 為短效且僅限一次使用。
- 模擬存取權杖 (Access token) 不會附帶重新整理權杖 (Refresh token)。
- Theoretically, signing keys should not be leaked and do not have an expiration time,
  meaning there's no need to rotate them. However, periodically rotating the signing
  key after a certain period can enhance security.
- Never rotate signing keys consecutively (two or more times), as this may invalidate
  ALL issued tokens.
- Webhooks offer real-time communication between applications, eliminating the need
  for polling and enabling immediate data updates.
- Best practice is to maintain your own event queue; upon receiving the Logto Webhook,
  insert the event into the queue and return a 2xx response to Logto.
- Audit logs only contain logs that occur during user authentication process, logs
  of Management API operations is not recorded.
- The custom token claims feature is only available to Logto OSS users, Logto Cloud
  tenants with development environment, and Logto Cloud paid tenants with production
  environment.
- Logto enforces strict security measures, such as PKCE, and disables insecure flows
  like the implicit flow.
- Logto applies strict security measures, such as PKCE, and disables insecure flows.
- Uses OAuth2 with refresh token — requires setup of connected app in api
- Logto는 OpenID Connect (OIDC) 제공자입니다.
- 리디렉션은 사용자를 안전하게 인증하는 방법이며 많은 일반적인 공격을 방지할 수 있습니다.
- Logto is an OpenID Connect provider with strict security measures.
- Supports redirect for authentication.
- Direct sign-in is available for social logins.
- Logto enforces strict security measures such as PKCE and disables insecure flows
  like implicit flow.
- Logto is an OpenID Connect provider.
- Redirect is required for security reasons.
- 'If you want to directly call OIDC APIs, remember to set header Content-Type: application/x-www-form-urlencoded.'
- Direct sign-in allows skipping the default Logto sign-in page to redirect users
  to social or enterprise SSO provider's login page.
- Logto stellt eine vorkonfigurierte „Logto Management API access“-M2M-Rolle für neu
  erstellte Mandanten bereit, der die Berechtigung `all` der Logto Management API-Ressource
  bereits zugewiesen ist.
- Logto Management API is read-only with permission 'all'.
- Use default Logto endpoint for API interactions.
- Utilisez l'endpoint Logto par défaut pour obtenir des jetons d’accès.
- Ne pas utiliser de domaine personnalisé avec Logto Management API.
- Logto Management API uses client credentials flow for authentication.
- Ensure that M2M roles with all permissions for Logto Management API are assigned.
- This is a specification only for Logto Cloud.
- It is recommended to keep traffic to around 200 requests per 10 seconds to avoid
  triggering protective features.
- Logto는 현재 M2M 앱이 사용자를 나타내는 것을 지원하지 않습니다.
- O Logto atualmente não suporta o aplicativo M2M para representar um usuário.
- 'Para usuários do Logto Cloud: ao interagir com a Logto Management API, você não
  pode usar domínio personalizado.'
- Logto Management API is a readonly resource with scope 'all' for accessing the API.
- Uses link headers for pagination
- Total-Number header indicates total number of records
- Logto Management API requires M2M roles for access.
- Logto Cloud users should not use custom domain names.
- Logto Cloud users must use the default Logto endpoint to obtain access tokens.
- 為確保所有使用者的服務可靠性與安全性，建議每 10 秒內請求數量控制在約 200 次，以避免觸發保護機制
- Logto está diseñado para admitir tanto múltiples aplicaciones como múltiples organizaciones
  dentro de un solo inquilino.
- 'Cada solicitud de la Protected App incluye la siguiente cabecera: Authorization:
  Basic base64(appId:appSecret)'
- 'Cada solicitud autenticada de la Protected App incluye la siguiente cabecera: Logto-ID-Token:
  <JWT>'
- Logto como IdP actúa como la autoridad central de autenticación, gestionando las
  identidades de los usuarios y emitiendo aserciones SAML
- Tu aplicación como SP depende de Logto para autenticar a los usuarios y consume
  aserciones SAML para el control de acceso
- Es importante asegurarse de que todos los URIs de redirección válidos se agreguen
  a la lista permitida para una aplicación en Logto, para garantizar que los usuarios
  puedan acceder exitosamente a la aplicación después de la autenticación.
- Logto offers ready-to-use experiences configured in Console > Sign-in experience
- Logto proporciona una autorización flexible basada en tokens para aplicaciones SaaS
  y de IA modernas.
- Puedes acceder a tus datos de usuario y gestionarlos utilizando tanto la Consola
  de Logto como el Management API.
- Currently, the federated token set is the only secret type supported by default.
- This API has pagination enabled.
- Logto Cloud is an authentication and authorization managed service provided by Silverhand
  Inc.
- Each Tenant is considered a separate Customer under this Agreement.
- Validierung des HTTP-Headers zur Sicherung des Ursprungsservers
- Das Token ist als JWS Token verschlüsselt und signiert
- Logto als IdP agiert als zentrale Authentifizierungsinstanz, verwaltet Benutzeridentitäten
  und stellt SAML-Assertions aus
- Deine Anwendung als SP vertraut auf Logto zur Authentifizierung der Benutzer und
  nutzt SAML-Assertions für die Zugangskontrolle
- Logto is an identity and access management solution designed for modern apps and
  SaaS products.
- The search mode defaults to 'like'.
- All fuzzy search modes support matching one value per field.
- Search mode is set to 'like' by default, which uses Approximate string matching.
- Utilise Management API nécessitant une authentification
- Le mode de recherche est défini sur 'like' par défaut
- All search parameters are formatted using URLSearchParams.
- Uses Management API which requires authentication
- All search parameters will be formatted as URLSearchParams.
- This is a Management API that requires authentication.
- Benutzer können sich über Social Sign-in anmelden
- Benutzerdefinierte Daten können nach der Benutzeranmeldung abgerufen werden
- Die folgenden Spalten der Benutzer-DB-Tabelle sind im Benutzerprofil sichtbar.
errors:
- 'Unable to resolve @logto/client/shim: Enable package exports in metro.config.js
  for SDK <= v0.3.0'
- '404 on callback URL: WordPress rewrite rules need refresh via Settings > Permalinks'
- '401 Unauthorized: Recheck OAuth scopes or token expiration'
- The hostname is associated with a held zone, please contact the owner to have the
  hold removed
- '404 Not Found: If no identity is associated with the specified target.'
- '401 Unauthorized: If the access token is expired.'
- '200 OK: Si el token de acceso se recupera correctamente y sigue siendo válido.'
- '404 No encontrado: Si el usuario no tiene una identidad social o SSO empresarial
  asociada con el conector o ID especificado.'
- '401 No autorizado: Si el token de acceso ha expirado.'
- '404 Not Found : Si l’utilisateur ne possède pas d’identité sociale ou SSO d’entreprise.'
- '401 Unauthorized : Si le jeton d’accès est expiré.'
- '404 Not Found: 指定したターゲットまたはコネクター ID に紐づくアイデンティティが存在しない場合。'
- '401 Unauthorized: アクセス トークンの有効期限が切れている場合。'
- '200 OK: Token retrieved successfully.'
- '404 Not Found: Identity not associated or token not stored.'
- '401 Unauthorized: Token expired.'
- '404 Not Found: If the user does not have a related social or Enterprise SSO identity.'
- '401 Unauthorized: If the access token has expired.'
- '404 Not Found: User does not have an associated identity or token.'
- '401 Unauthorized: Access token has expired.'
- '404 Not Found: 使用者未有指定 target 或連接器 ID 的社交或企業級 SSO 身分，或未儲存存取權杖。'
- '401 Unauthorized: 存取權杖已過期。'
- 'HTTP 401 Unauthorized: Token is missing, invalid, or does not have the required
  permissions.'
- 'HTTP 403 Forbidden: Token does not have the required permissions.'
- '401 Unauthorized: トークンが無効または期限切れ'
- '403 Forbidden: 必要な権限がない'
- 'HTTP 401 Unauthorized: Token ausente, inválido ou sem permissões necessárias'
- 'HTTP 403 Forbidden: Token não possui as permissões necessárias'
- 'HTTP 401 Unauthorized: 驗證失敗或權限不足'
- 'HTTP 403 Forbidden: 權限不足'
- '401 Unauthorized: Check token expiration and required scopes'
- '401 Unauthorized: Check organization_id and permissions.'
- 'Authorization header is missing: return 401 Unauthorized'
- 'Authorization header must start with ''Bearer '': return 401 Unauthorized'
- Insufficient organization-level API scopes
- '403 Forbidden: Token with missing scopes'
- '401 Unauthorized: Authorization header is missing'
- '401 Unauthorized: Invalid token'
- '401 invalid_client: Asegúrate de incluir client_id y client_secret en el encabezado
  de la solicitud.'
- '401 invalid_client: Inclure client_id et client_secret dans l''en-tête de la requête
  de jeton.'
- '401 invalid_client: ตรวจสอบการตั้งค่า client_id และ client_secret'
- 'Rate limit empfohlen: etwa 200 Anfragen alle 10 Sekunden'
- 'RESOURCE_NOT_FOUND: Check the endpoint and resource name.'
- 'UNAUTHORIZED: Check your app''s roles and permissions.'
- '400 Bad Request: Vérifiez les paramètres de la requête.'
- '401 Unauthorized: Assurez-vous que les identifiants de l''application sont corrects.'
- '429 Too Many Requests: Limitez vos requêtes à environ 200 toutes les 10 secondes.'
- 'Limite de taxa: Recomenda-se limitar sua atividade a aproximadamente 200 solicitações
  a cada 10 segundos.'
- 'Rate limit: Limit requests to approximately 200 every 10 seconds'
- '401 Unauthorized: Check your App ID and App Secret.'
- '403: fehlender erforderlicher Logto-ID-Token-Header'
- '403: ungültiges ID-Token'
auth_info:
  mentioned_objects:
  - JWT
  - RBAC
  - Logto Console
  - Logto Management API
  - Experience API
  - Account API
  - OauthToken
  - OIDC
  - SAML
  - OAuth2
  - refresh_token
  - LogtoClient
  - LogtoConfig
  - IdTokenClaims
  - UserInfoResponse
  - UserScope
  - ApplicationConfig
  - buildAngularAuthConfig
  - provideAuth
  - OidcSecurityService
  - LogtoParameters
  - HttpContext
  - AuthenticationStateProvider
  - IHttpContextAccessor
  - LogtoDefaults.CookieScheme
  - LogtoDefaults.AuthenticationScheme
  - LogtoParameters.Claims
  - LogtoParameters.Scopes
  - AuthenticationProperties
  - LogtoOptions
  - LogtoParameters.Tokens
  - LogtoProvider
  - useLogto
  - IUserManager
  - AuthenticationState
  - User
  - Profile
  - LogtoExpressConfig
  - withLogto
  - handleAuthRoutes
  - CustomAuthManager
  - OpenIdClaims
  - FlutterFlowAuthAuthUser
  - AccessToken
  - ASWebAuthenticationSession
  - SFAuthenticationSession
  - SessionStorage
  - getAccessToken
  - getAccessTokenRSC
  - getOrganizationToken
  - getOrganizationTokenRSC
  - SessionWrapper
  - SessionData
  - LogtoNextConfig
  - getLogtoContext
  - handleSignIn
  - signIn
  - signOut
  - ID token
  - userinfo endpoint
  - OAuth2Client
  - WebSecurityConfig
  - OAuth2AuthenticationToken
  - OAuth2User
  - OidcIdTokenDecoderFactory
  - ClientRegistration
  - NextAuth
  - Auth.js
  - UserScope.Organizations
  - logtoEventHandler
  - useLogtoClient
  - useLogtoUser
  - openid
  - profile
  - email
  - phone
  - address
  - custom_data
  - identities
  - roles
  - organizations
  - organization_roles
  - InteractionMode
  - UserInfoScope
  - Storage
  - getIdTokenClaims
  - handleLogto
  - LogtoClient::Config
  - LogtoClient::SessionStorage
  - LogtoCore::USER_SCOPE
  - Organizations
  - App ID
  - App secret
  - Redirect URI
  - Post sign-out redirect URI
  - HASURA_GRAPHQL_JWT_SECRET
  - jwk_url
  - getCustomJwtClaims
  - OidcConfig
  - TokenResponse
  - IdToken
  - client ID
  - client secret
  - authorization endpoint
  - token endpoint
  - discovery endpoint
  - Tenant
  - Customer
  - authorized users
  - Access token
  - Organization token
  - AuthProvider
  - NamedCredential
  - organization template
  - organization roles
  - organization token (JWT)
  - AuthInfo
  - AuthorizationError
  - AuthorizationException
  - JwtValidator
  - AuthConstants
  - Logto-ID-Token
client:
  base_url: https://openapi.logto.io
source_metadata: null
