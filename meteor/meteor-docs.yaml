resources:
- name: email
  endpoint:
    path: /email
    method: GET
    data_selector: records
- name: imply
  endpoint:
    path: /api/imply
    method: POST
    data_selector: result
    params: {}
- name: export
  endpoint:
    path: /api/export
    method: POST
    data_selector: result
    params: {}
- name: addFiles
  endpoint:
    path: /api/addFiles
    method: POST
    data_selector: result
    params: {}
- name: addAssets
  endpoint:
    path: /api/addAssets
    method: POST
    data_selector: result
    params: {}
- name: onTest
  endpoint:
    path: /api/onTest
    method: POST
    data_selector: result
    params: {}
- name: depends
  endpoint:
    path: /api/depends
    method: POST
    data_selector: result
    params: {}
- name: registerBuildPlugin
  endpoint:
    path: /api/registerBuildPlugin
    method: POST
    data_selector: result
    params: {}
- name: tasks
  endpoint:
    path: /imports/api/TasksCollection
    method: GET
    data_selector: tasks
- name: tasks
  endpoint:
    path: /tasks
    method: GET
    data_selector: records
- name: tasks
  endpoint:
    path: /tasks
    method: GET
    data_selector: records
    params: {}
- name: tasks
  endpoint:
    path: /api/tasks
    method: POST
    data_selector: records
    params: {}
- name: tasks
  endpoint:
    path: /tasks
    method: GET
    data_selector: records
- name: tasks
  endpoint:
    path: /tasks
    method: GET
    data_selector: tasks
    params: {}
- name: ReactiveDict
  endpoint:
    path: /api/reactivedict
    method: GET
    data_selector: records
- name: ReactiveVar
  endpoint:
    path: /api/reactivevar
    method: GET
    data_selector: records
- name: Roles
  endpoint:
    path: /api/roles
    method: GET
    data_selector: records
- name: Subscription
  endpoint:
    path: /api/subscription
    method: GET
    data_selector: records
- name: Tracker
  endpoint:
    path: /api/tracker
    method: GET
    data_selector: records
- name: Session
  endpoint:
    path: /api/session
    method: GET
    data_selector: records
- name: Random
  endpoint:
    path: /api/random
    method: GET
    data_selector: records
- name: Email
  endpoint:
    path: /api/email
    method: GET
    data_selector: records
- name: DDPRateLimiter
  endpoint:
    path: /api/ddpratelimiter
    method: GET
    data_selector: records
- name: WebApp
  endpoint:
    path: /api/webapp
    method: GET
    data_selector: records
- name: changePassword
  endpoint:
    path: /Accounts.changePassword
    method: POST
    data_selector: result
    params:
      oldPassword: string
      newPassword: string
      callback: function
- name: forgotPassword
  endpoint:
    path: /Accounts.forgotPassword
    method: POST
    data_selector: result
    params:
      options: object
      callback: function
- name: resetPassword
  endpoint:
    path: /Accounts.resetPassword
    method: POST
    data_selector: result
    params:
      token: string
      newPassword: string
      callback: function
- name: setPasswordAsync
  endpoint:
    path: /Accounts.setPasswordAsync
    method: POST
    data_selector: result
    params:
      userId: string
      newPlaintextPassword: string
      options: object
- name: sendResetPasswordEmail
  endpoint:
    path: /Accounts.sendResetPasswordEmail
    method: POST
    data_selector: result
    params:
      userId: string
      email: string
      extraTokenData: object
      extraParams: object
- name: sendEnrollmentEmail
  endpoint:
    path: /Accounts.sendEnrollmentEmail
    method: POST
    data_selector: result
    params:
      userId: string
      email: string
      extraTokenData: object
      extraParams: object
- name: sendVerificationEmail
  endpoint:
    path: /Accounts.sendVerificationEmail
    method: POST
    data_selector: result
    params:
      userId: string
      email: string
      extraTokenData: object
      extraParams: object
- name: methods
  endpoint:
    path: /methods
    method: POST
    data_selector: methods
    params: {}
- name: rooms
  endpoint:
    path: /rooms
    method: GET
    data_selector: documents
- name: adminSecretInfo
  endpoint:
    path: /adminSecretInfo
    method: GET
    data_selector: documents
- name: roomAndMessages
  endpoint:
    path: /roomAndMessages
    method: GET
    data_selector: documents
- name: countsByRoom
  endpoint:
    path: /countsByRoom
    method: GET
    data_selector: documents
- name: secretData
  endpoint:
    path: /secretData
    method: GET
    data_selector: documents
- name: Mongo.Collection
  endpoint:
    path: /api/collections
    method: GET
    data_selector: records
    params: {}
- name: find
  endpoint:
    path: /Collection/find
    method: GET
    data_selector: documents
    params: {}
- name: findOne
  endpoint:
    path: /Collection/findOne
    method: GET
    data_selector: document
    params: {}
- name: countDocuments
  endpoint:
    path: /Collection/countDocuments
    method: GET
    data_selector: count
    params: {}
- name: estimatedDocumentCount
  endpoint:
    path: /Collection/estimatedDocumentCount
    method: GET
    data_selector: estimatedCount
    params: {}
- name: insert
  endpoint:
    path: /Collection/insert
    method: POST
    data_selector: insertedId
    params: {}
- name: update
  endpoint:
    path: /Collection/update
    method: PUT
    data_selector: updatedCount
    params: {}
- name: upsert
  endpoint:
    path: /Collection/upsert
    method: PUT
    data_selector: upsertResult
    params: {}
- name: remove
  endpoint:
    path: /collection/remove
    method: POST
    data_selector: result
    params:
      selector: MongoSelector
- name: removeAsync
  endpoint:
    path: /collection/removeAsync
    method: POST
    data_selector: result
    params:
      selector: MongoSelector
- name: createIndex
  endpoint:
    path: /collection/createIndex
    method: POST
    data_selector: result
    params:
      index: Object
- name: createIndexAsync
  endpoint:
    path: /collection/createIndexAsync
    method: POST
    data_selector: result
    params:
      index: Object
- name: allow
  endpoint:
    path: /collection/allow
    method: POST
    data_selector: result
    params:
      options: Object
- name: deny
  endpoint:
    path: /collection/deny
    method: POST
    data_selector: result
    params:
      options: Object
- name: rawCollection
  endpoint:
    path: /collection/rawCollection
    method: GET
    data_selector: result
    params: {}
- name: rawDatabase
  endpoint:
    path: /collection/rawDatabase
    method: GET
    data_selector: result
    params: {}
- name: Email.send
  endpoint:
    path: /email/send
    method: POST
    data_selector: options
    params: {}
- name: Email.sendAsync
  endpoint:
    path: /email/sendAsync
    method: POST
    data_selector: options
    params: {}
- name: Email.hookSend
  endpoint:
    path: /email/hookSend
    method: POST
    data_selector: f
    params: {}
- name: Email.customTransport
  endpoint:
    path: /email/customTransport
    method: POST
    data_selector: f
    params: {}
- name: app_info
  endpoint:
    path: /app/info
    method: GET
    data_selector: options
- name: launchScreens
  endpoint:
    path: App.launchScreens
    method: POST
    data_selector: launchScreens
    params: {}
- name: appendToConfig
  endpoint:
    path: App.appendToConfig
    method: POST
    data_selector: element
    params:
      element: xml content
- name: addResourceFile
  endpoint:
    path: App.addResourceFile
    method: POST
    data_selector: src
    params:
      src: project resource path
      target: resource destination in build
      platform: ios or android
- name: Roles
  endpoint:
    path: /api/roles
    method: GET
    data_selector: roles
    params: {}
- name: getUsersInRole
  endpoint:
    path: /Roles/getUsersInRoleAsync
    method: GET
    data_selector: users
    params:
      roles: roles
- name: userIsInRole
  endpoint:
    path: /Roles/userIsInRoleAsync
    method: GET
    data_selector: roles
    params:
      user: user
      roles: roles
- name: getRolesForUser
  endpoint:
    path: /Roles/getRolesForUserAsync
    method: GET
    data_selector: roles
    params:
      user: user
- name: isParentOf
  endpoint:
    path: /Roles/isParentOfAsync
    method: GET
    data_selector: parent
    params:
      parentRoleName: parentRoleName
      childRoleName: childRoleName
- name: getScopesForUser
  endpoint:
    path: /Roles/getScopesForUserAsync
    method: GET
    data_selector: scopes
    params:
      user: user
- name: ModernBrowsers.isModern
  endpoint:
    path: /api/ModernBrowsers.isModern
    method: GET
- name: ModernBrowsers.setMinimumBrowserVersions
  endpoint:
    path: /api/ModernBrowsers.setMinimumBrowserVersions
    method: POST
- name: ModernBrowsers.getMinimumBrowserVersions
  endpoint:
    path: /api/ModernBrowsers.getMinimumBrowserVersions
    method: GET
- name: ModernBrowsers.calculateHashOfMinimumVersions
  endpoint:
    path: /api/ModernBrowsers.calculateHashOfMinimumVersions
    method: GET
- name: modules
  endpoint:
    path: /api/modules
    method: GET
    data_selector: modules
- name: sink
  endpoint:
    path: /api/server-render
    method: GET
    data_selector: sink
    params: {}
- name: WebApp.handlers
  endpoint:
    path: /WebApp/handlers
    method: GET
    data_selector: handlers
- name: WebApp.addRuntimeConfigHook
  endpoint:
    path: /WebApp/addRuntimeConfigHook
    method: GET
    data_selector: addRuntimeConfigHook
- name: WebApp.addUpdatedNotifyHook
  endpoint:
    path: /WebApp/addUpdatedNotifyHook
    method: GET
    data_selector: addUpdatedNotifyHook
- name: chatRooms
  endpoint:
    path: /chatRooms
    method: GET
    data_selector: rooms
- name: archives
  endpoint:
    path: /archives
    method: GET
    data_selector: records
    params: {}
- name: package
  endpoint:
    path: /meteor/publish
    method: POST
    data_selector: packages
    params: {}
- name: release
  endpoint:
    path: /meteor/publish-release
    method: POST
    data_selector: releases
    params: {}
- name: meteor_update
  endpoint:
    path: /meteor/update
    method: POST
    data_selector: results
    params:
      release: 3.0.3
notes:
- Use the `underscore` package, but only on the server.
- This package requires setup of connected app in api
- Minifiers run last after the sources has been compiled and JavaScript code has been
  linked.
- In development builds, minifiers must meet these requirements to not prevent hot
  module replacement.
- On Windows, the installer runs faster when Windows Developer Mode is enabled.
- This is a live document which will be updated as development progresses.
- It's not required to read this guide before starting with Meteor 3.0.
- Meteor provides an embedded version of MongoDB ready for use.
- Use Meteor Methods for server-side operations.
- Uses accounts-password for authentication
- Requires setup of MongoDB for data storage
- Uses Meteor with Vue — requires setup of Meteor project
- MongoDB is included and automatically set up with Meteor
- Meteor uses a publish-subscribe model to manage data.
- The app has to subscribe to the 'tasks' publication to receive task data.
- Uses OAuth2 for authentication
- HTML files are treated differently from server-side frameworks.
- Meteor supports both eager evaluation and lazy loading.
- 'Most apps will benefit just by enabling modern: true. Most Meteor packages should
  work right away, except ones using nested imports.'
- Integration with a modern bundler is in progress for Meteor 3.4.
- New apps skip `web.browser.legacy` and `web.cordova` by default in development mode.
- By default, the profile option is added directly to the new user document.
- This API supports user account management, including password reset and enrollment.
- Methods can be called remotely by clients using Meteor.call or Meteor.callAsync.
- On Meteor 3.x and later using insert, update, upsert, remove, findOne on the server
  will throw an error. Use the *Async counterparts instead.
- Package setting is only available since Email v2.2
- The entire section is optional.
- You can configure your app's metadata and build process in a special top-level file.
- Meteor's package system relies heavily on Semantic Versioning
- Meteor's package system is single-loading
- To integrate with existing login methods, create a new method that includes the
  2FA code.
- The function Accounts._check2faEnabled must be called to verify 2FA status.
- Available since Meteor 3.1.0 (previously alanning:roles)
- Since bundle analysis is only truly accurate on a minified bundle and minification
  does not take place during development.
- This package must be used in conjunction with the --production flag to the meteor
  tool to simulate production bundling and enable minification.
- HMR is currently not supported for packages, but packages can depend on the hot-module-replacement
  package to ensure access to the hot API.
- HMR currently supports the modern web architecture. It is always disabled in other
  architectures and in production.
- The logging package provides a standardised way for you to log and display in console
  various message from your application.
- The added benefit is that among other data it will show you the location where the
  log was fired, this is useful during debugging to quickly locate where the message
  is coming from.
- Starting with Android 9 (API level 28), cleartext support is disabled by default.
- It is necessary to create a mobile-config.js file enabling the use of cleartext
  for HCP working.
- Browsers not explicitly listed in setMinimumBrowserVersions are considered 'legacy'
  by default.
- Meteor 1.2 introduced support for many new ECMAScript 2015 features
- Meteor 1.3 filled the gap with a fully standards-compliant module system that works
  on both the client and the server.
- The `sink` object may also expose additional properties depending on the environment.
- CoffeeScript is supported on both the client and the server. Files ending with .coffee,
  .litcoffee, or .coffee.md are automatically compiled to JavaScript.
- Requires React ^16.8.
- Compatible with future React versions.
- 'if you are getting a similar error like this one: TypeError [ERR_INVALID_ARG_TYPE]:
  The "data" argument must be of type string or an instance of Buffer, TypedArray,
  or DataView. Received null'
- By default, all methods require a logged-in user.
- This package expects that you'll use the promise-based *Async Meteor collection
  methods introduced in v2.8.1.
- Change Streams will work best when the filter you use can be shared.
- Zero config needed (though you can customize)
- Isomorphic so that it works with Optimistic UI
- Automatically overrides removeAsync to perform an archive (can be turned off)
- Explicitly archive with archiveAsync collection method (optional)
- Restore archived docs with restoreAsync collection method
- Optionally exclude specific collections
- Compatible with Meteor 3.0.2+
- By default, offline data will be kept for all collections using the global defaults
  in Offline.config without any configuration needed.
- 'If you don''t want all collections to be kept, be sure to configure keepAll: false.'
- 'If your embed MongoDB is not starting when you run `meteor` and you see messages
  like these: Unexpected mongo exit code 3221225781. Restarting. Can''t start Mongo
  server.'
- You probably need to install `Visual C++ Redistributable for Visual Studio`, depending
  on your Windows and Meteor embedded version of MongoDB the version of Visual Studio
  could be different.
- 'One possible scenario we''ve seen is that after migrating to Meteor 3, some apps
  become partially unresponsive and throw `MongoTopologyClosedError: Topology is closed`
  errors on startup.'
- In this case, you might consider increasing the server selection timeout for your
  MongoDB instance.
- Free apps and MongoDB shared hosting are not recommended for production use.
- Uses OAuth2 with refresh token — requires setup of connected app in api
- Some objects like Contact may return nulls in deeply nested fields
- If you've had your Meteor installation for over a year, we suggest reinstalling
  it to avoid any package installation issues.
- Upgraded node-gyp to v9.4.0
- Upgraded node-pre-gyp to @mapbox/node-pre-gyp v1.0.11
- Breaking changes related to async methods in Accounts and OAuth.
- OAuth related code has been moved from accounts-base to accounts-oauth.
- Node has been updated to version 8.9.4.
- The meteor-babel npm package (along with its Babel-related dependencies) has been
  updated to version 7.0.0-beta.38, a major update from Babel 6.
- Meteor's Node Mongo driver is now configured with the ignoreUndefined connection
  option set to true, to make sure fields with undefined values are not first converted
  to null, when inserted/updated.
- The server-render package now supports passing a Stream object to ServerSink methods
  that previously expected a string, which enables streaming server-side rendering
  with React 16.
- The cordova-lib package has been updated to version 7.1.0.
- The bundled version of MongoDB used by meteor run in development on 64-bit architectures
  has been updated to 3.4.10.
- The npm package has been upgraded to version 5.6.0.
- applySkipLimit option for count() on find cursors is no longer supported.
- internal result of operations inside Node.js MongoDB driver have changed.
- useUnifiedTopology is not an option anymore, it defaults to true.
- native parser is not an option anymore, it defaults to false in the mongo connection.
- poolSize not an option anymore, we are using max/minPoolSize for the same behavior
  on mongo connection.
- fields option is deprecated, we are maintaining a translation layer to "projection"
  field (now preferred) until the next minor version, where we will start showing
  alerts.
- _ensureIndex is now showing a deprecation message
- we are maintaining a translation layer for the new oplog format, so if you read
  or rely on any behavior of it please read our oplog*v2*converter.js code
- update/insert/remove behavior is maintained in the Meteor way, documented in our
  docs, but we are now using replaceOne/updateOne/updateMany internally.
- waitForStepDownOnNonCommandShutdown=false is not needed anymore when spawning the
  mongodb process
- synchronousCursor.*dbCursor.operation is not an option anymore in the raw cursor
  from nodejs mongodb driver.
- the default write preference for replica sets on mongo v5 is w:majority
- If you are using MongoDB inside a Docker container in your dev environment, you
  might need to append directConnection=true in your mongouri to avoid the new mongo
  driver Service Discovery feature
- 'Free deploy on Cloud: Deploy for free to Cloud with one command: `meteor deploy
  myapp.meteorapp.com --free`.'
- 'Deploy including MongoDB on Cloud: Deploy including MongoDB in a shared instance
  for free to Cloud with one command: `meteor deploy myapp.meteorapp.com --free --mongo`.'
- The babel-compiler package, used by both ecmascript and typescript, no longer supports
  stripping Flow type annotations by default.
- If your application uses blaze-html-templates, the Meteor jquery package will be
  automatically installed in your .meteor/packages file when you update to Meteor
  1.8.3.
- The `stylus` package has been deprecated and will no longer be supported/maintained.
- The meteor-babel npm package has been updated to version 7.0.0-beta.38.
- Meteor's Node Mongo driver is now configured with the ignoreUndefined connection
  option set to true.
- The server-render package now supports passing a Stream object to ServerSink methods.
- Node.js has been upgraded to version 8.8.1, which will be entering long-term support
  (LTS) coverage on 31 October 2017, lasting through December 2019.
- Fresh installs of Meteor 1.6 on 64-bit Windows machines will now use native 64-bit
  Node.js binaries, rather than a 32-bit version of Node.js.
- The meteor-base package implies a new dynamic-import package, which provides runtime
  support for the proposed ECMAScript dynamic import(...) syntax, enabling asynchronous
  module fetching or code splitting.
- Apps created with meteor create --bare now use the static-html package for processing
  .html files instead of blaze-html-templates, to avoid large unnecessary dependencies
  like the jquery package.
- Packages can now be marked as `testOnly` to only run as part of app testing with
  `meteor test`.
- Remove warning in the `simple-todos-react` example app.
- Fix interaction between `browser-policy` and `oauth` packages.
- Add README.md to the `tinytest` package.
- Don't crash when calling `ReactiveDict.prototype.clear` if a property with a value
  wasn't previously accessed.
- Move `DDPRateLimiter` to the server only, since it won't work if it is called from
  the client.
- Don't call function more than once when passing a `Match.Where` argument to `check`.
- Fix empty object argument check in `this.subscribe` in templates.
- Make `HTTP.call` not crash on undefined content.
- Return observe handle from `Mongo.Collection.prototype._publishCursor`.
- Add 'Did you mean?' reminders for some CLI commands to help Rails developers.
- Make internal shell scripts compatible with other Unix-like systems.
- 'Add a `_pollingInterval` option to `coll.find()` that can be used in conjunction
  with `_disableOplog: true`.'
- Expose Tinytest internals which can be used to extend it.
- Improve error message from `check` when passing in null.
- Split up `standard-minifiers` in separate CSS (`standard-minifier-css`) and JS minifiers(`standard-minifier-js`).
- Detect new Facebook user-agent in the `spiderable` package.
- '`Match.ObjectIncluding` now really requires plain objects.'
- Allow `git+` URL schemes for npm dependencies.
- Expose options `disableOplog`, `pollingIntervalMs`, and `pollingThrottleMs` to `Cursor.find`
  for tuning observe parameters on the server.
- Expose `dynamicHead` and `dynamicBody` hooks in boilerplate generation allowing
  code to inject content into the body and head tags from the server.
- Add methods of the form `BrowserPolicy.content.allow<ContentType>BlobUrl()` to BrowserPolicy.
- Move `<script>` tags to end of `<body>` to enable 'loading' UI to be inserted into
  the boilerplate.
- Adds WebAppInternals.setBundledJsCssUrlRewriteHook allowing apps to supply a hook
  function that can create a dynamic bundledJsCssPrefix at runtime.
- 'Meteor is now tested against MongoDB 2.6 by default (and the bundled version used
  by `meteor run` has been upgraded). It should still work fine with MongoDB 2.4.
  Previous versions of Meteor mostly worked with MongoDB 2.6, with a few caveats:
  Some upsert invocations did not work with MongoDB in previous versions of Meteor.
  Previous versions of Meteor required setting up a special ''user-defined role''
  with access to the `system.replset` table to use the oplog observe driver with MongoDB
  2.6. These extra permissions are not required with this version of Meteor.'
- The MongoDB command needed to set up user permissions for the oplog observe driver
  is slightly different in MongoDB 2.6; see https://github.com/meteor/meteor/wiki/Oplog-Observe-Driver
  for details.
- Add a unique index to the collection that stores OAuth login configuration to ensure
  that only one configuration exists per service.
- Add `browser-policy` package for configuring and sending Content-Security-Policy
  and X-Frame-Options HTTP headers.
- Use cryptographically strong pseudorandom number generators when available.
- 'Add upsert support. `Collection.update` now supports the `{upsert: true}` option.'
- Additionally, add a `Collection.upsert` method which returns the newly inserted
  object id if applicable.
- '`update` and `remove` now return the number of documents affected.'
- The `fields` option to the collection methods `find` and `findOne` now works on
  the client as well.
- Pass an index and the cursor itself to the callbacks in `cursor.forEach` and `cursor.map`,
  just like the corresponding `Array` methods.
- 'Support `c.find(query, {limit: N}).count()` on the client.'
- Improve behavior of `$ne`, `$nin`, and `$not` selectors with objects containing
  arrays.
- Fix various bugs if you had two documents with the same _id field in String and
  ObjectID form.
- Modifying websocket compression settings without understanding your application's
  DDP messaging patterns can negatively impact performance.
- Meteor's stream server uses the permessage-deflate extension for websocket compression
  by default.
- Async local storage was added to help deal with async methods.
- Some methods are now async.
errors:
- 'REQUEST_LIMIT_EXCEEDED: Throttle API calls or reduce frequency'
- 'QUERY_TIMEOUT: Break down filters or add selectivity'
- '401 Unauthorized: Check user credentials'
- '403 Forbidden: User not authorized to access this resource'
- '403 Forbidden: Check user permissions or login status.'
- '500 Internal Server Error: Check server logs for more details.'
- 'Not authorized: Ensure user is logged in'
- Unrecognized options for login request [400]
- Match failed [400]
- User not found [403]
- Incorrect password [403]
- User has no password set [403]
- '2FA_ENABLED: User not logged in because 2FA is enabled.'
- 'Invalid app configuration: Check the parameters passed to App.info.'
- 'Invalid preference name: Ensure the preference name is supported by Cordova.'
- 2FA code must be informed.
- Invalid 2FA code.
- '401 Unauthorized: Recheck OAuth scopes or token expiration'
auth_info:
  mentioned_objects:
  - Accounts
  - OauthToken
  - AuthProvider
  - App.info
  - App.setPreference
  - App.icons
client:
  base_url: http://localhost:3000
  headers:
    Accept: application/json
source_metadata: null
