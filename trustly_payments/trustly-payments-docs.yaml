resources:
- name: transactions
  endpoint:
    path: /transactions
    method: GET
    data_selector: items
    params:
      count: '25'
      startIndex: '0'
- name: Trustly Pay
  endpoint:
    path: /payments/docs/deferred-payments
    method: GET
    data_selector: records
- name: Trustly Payouts
  endpoint:
    path: /payments/docs/ig-instant-payouts
    method: GET
    data_selector: records
- name: Trustly Connect
  endpoint:
    path: /payments/docs/account-data-retrieval
    method: GET
    data_selector: records
- name: Trustly ID
  endpoint:
    path: /payments/docs/trustly-id
    method: GET
    data_selector: records
- name: Trustly Insights
  endpoint:
    path: /payments/docs/cashflow-data
    method: GET
    data_selector: records
- name: Trustly Token Authority
  endpoint:
    path: /payments/docs/ig-tokenization
    method: GET
    data_selector: records
- name: create_bank_authorization
  endpoint:
    path: /start/scripts/trustly.js
    method: GET
    data_selector: none
    params: {}
- name: bank_authorization
  endpoint:
    path: /payments/docs/pay-create-a-bank-authorization
    method: POST
    data_selector: data
    params: {}
- name: retrieve_bank_user_info
  endpoint:
    path: /payments/docs/pay-retrieve-bank-user-data
    method: GET
    data_selector: data
    params: {}
- name: initiate_payment_transactions
  endpoint:
    path: /payments/docs/pay-initiate-payment-transactions
    method: POST
    data_selector: data
    params: {}
- name: Get Account Balance
  endpoint:
    path: /api/v1/transactions/{transactionId}/payment/paymentProvider/account/balance
    method: GET
    data_selector: accountBalance
- name: Get User
  endpoint:
    path: /api/v1/transactions/{transactionId}/payment/paymentProvider/user
    method: GET
    data_selector: user
- name: get_account_balance
  endpoint:
    path: /api/v1/transactions/{transactionId}/payment/paymentProvider/account/balance
    method: GET
    data_selector: accountBalance
- name: get_user
  endpoint:
    path: /api/v1/transactions/{transactionId}/payment/paymentProvider/user
    method: GET
    data_selector: user
- name: create_bank_authorization
  endpoint:
    path: /transactions/establish
    method: POST
    data_selector: transaction
    params: {}
- name: create_disbursement_transaction
  endpoint:
    path: /transactions/{transactionId}/deposit
    method: POST
    data_selector: transaction
    params: {}
- name: create_bank_authorization
  endpoint:
    path: /transactions/{transactionId}/deposit
    method: POST
    data_selector: transaction
    params: {}
- name: create_disbursement_transaction
  endpoint:
    path: /transactions/{transactionId}/deposit
    method: POST
    data_selector: transaction
    params: {}
- name: user_data
  endpoint:
    path: /transactions/:id/user
    method: GET
    data_selector: user
- name: user_verification_details
  endpoint:
    path: /transactions/:id/user/detail
    method: GET
    data_selector: detail
- name: register_user
  endpoint:
    path: /transactions/:id/feedback
    method: POST
    data_selector: status
- name: void_user
  endpoint:
    path: /transactions/:id/feedback
    method: POST
    data_selector: status
- name: user_data
  endpoint:
    path: /transactions/:id/user
    method: GET
    data_selector: user
- name: user_verification_details
  endpoint:
    path: /transactions/:id/user/detail
    method: GET
    data_selector: detail
- name: register_user
  endpoint:
    path: /transactions/:id/feedback
    method: POST
    data_selector: ''
    params: {}
- name: void_user
  endpoint:
    path: /transactions/:id/feedback
    method: POST
    data_selector: ''
    params: {}
- name: account_summary
  endpoint:
    path: /transactions/{transactionId}/accountSummary
    method: GET
    data_selector: summary
- name: account_activity
  endpoint:
    path: /accountActivity
    method: GET
    data_selector: activity
- name: account_summary
  endpoint:
    path: /transactions/{transactionId}/accountSummary
    method: GET
    data_selector: summary
    params: {}
- name: create_authorization
  endpoint:
    path: /payments/docs/establish
    method: POST
    data_selector: payload
    params:
      paymentType: instant
      amount: 100.0
      currency: USD
      returnUrl: https://merchant.com/trustly.com/return
      cancelUrl: https://merchant.com/trustly.com/cancel
- name: Create Authorization
  endpoint:
    path: /payments/docs/establish
    method: POST
    data_selector: transaction
    params:
      paymentType: instant
      returnUrl: https://merchant.com/trustly.com/return
      cancelUrl: https://merchant.com/trustly.com/cancel
- name: Handle Event Notifications
  endpoint:
    path: /payments/reference/event-notifications-webhooks
    method: POST
    data_selector: event
    params: {}
- name: create_bank_authorization
  endpoint:
    path: /transactions
    method: POST
    data_selector: transactionId
- name: get_transaction
  endpoint:
    path: /transactions/{transactionId}
    method: GET
    data_selector: transaction
- name: deposit_transaction
  endpoint:
    path: /transactions/{transactionId}/deposit
    method: POST
    data_selector: transaction
- name: create_bank_authorization
  endpoint:
    path: /transactions
    method: POST
    data_selector: transactionId
- name: get_transaction
  endpoint:
    path: /transactions/{transactionId}
    method: GET
    data_selector: transaction
- name: deposit_transaction
  endpoint:
    path: /transactions/{transactionId}/deposit
    method: POST
    data_selector: transaction
- name: create_authorization
  endpoint:
    path: /transactions/transactionId/capture
    method: POST
    data_selector: beneficiary
    params: {}
- name: initiate_payment
  endpoint:
    path: /transactions
    method: POST
    data_selector: merchantId
    params: {}
- name: transactions
  endpoint:
    path: /transactions/transactionId/capture
    method: POST
    data_selector: beneficiary
    params: {}
- name: micro_challenge_deposits
  endpoint:
    path: /payments/docs/micro-deposit-challenges
    method: POST
    data_selector: transaction
    params: {}
- name: initial_bank_authorization
  endpoint:
    path: /payments/docs/micro-deposit-challenges
    method: POST
    data_selector: establishData
    params: {}
- name: Create a Bank Authorization
  endpoint:
    path: /payments/docs/pay-create-a-bank-authorization
    method: POST
- name: Retrieve Bank & User Info
  endpoint:
    path: /payments/docs/pay-retrieve-bank-user-data
    method: GET
- name: Initiate Payment Transactions
  endpoint:
    path: /payments/docs/pay-initiate-payment-transactions
    method: POST
- name: Handle Event Notifications
  endpoint:
    path: /payments/docs/pay-handle-events-refresh
    method: POST
- name: Create a Bank Authorization
  endpoint:
    path: /payments/docs/pay-create-a-bank-authorization
    method: POST
    data_selector: transactionId
- name: Retrieve Bank & User Info
  endpoint:
    path: /payments/docs/pay-retrieve-bank-user-data
    method: GET
    data_selector: userInfo
- name: Initiate Payment Transactions
  endpoint:
    path: /payments/docs/pay-initiate-payment-transactions
    method: POST
    data_selector: paymentResponse
- name: Handle Event Notifications
  endpoint:
    path: /payments/docs/pay-handle-events-refresh
    method: POST
    data_selector: eventResponse
- name: create_bank_authorization
  endpoint:
    path: /payments/docs/pay-create-a-bank-authorization
    method: POST
- name: retrieve_bank_user_info
  endpoint:
    path: /payments/docs/pay-retrieve-bank-user-data
    method: GET
- name: initiate_payment_transactions
  endpoint:
    path: /payments/docs/pay-initiate-payment-transactions
    method: POST
- name: bank_authorization
  endpoint:
    path: /payments/docs/pay-create-a-bank-authorization
    method: POST
    data_selector: transaction
    params: {}
- name: retrieve_bank_info
  endpoint:
    path: /payments/docs/pay-retrieve-bank-user-data
    method: GET
    data_selector: data
    params: {}
- name: initiate_payments
  endpoint:
    path: /payments/docs/pay-initiate-payment-transactions
    method: POST
    data_selector: transaction
    params: {}
- name: get_transaction
  endpoint:
    path: /transactions/{transactionId}
    method: GET
    data_selector: transaction
- name: get_user
  endpoint:
    path: /transactions/{transactionId}/payment/paymentProvider/user
    method: GET
    data_selector: user
- name: get_transaction
  endpoint:
    path: /transactions/{transactionId}
    method: GET
    data_selector: transaction
- name: get_user
  endpoint:
    path: /transactions/{transactionId}/payment/paymentProvider/user
    method: GET
    data_selector: user
- name: capture_preauth
  endpoint:
    path: /transactions/{transactionId}/capture/preauth
    method: POST
    data_selector: transaction
    params: {}
- name: capture
  endpoint:
    path: /transactions/{transactionId}/capture
    method: POST
    data_selector: transaction
    params: {}
- name: deposit
  endpoint:
    path: /transactions/{transactionId}/deposit
    method: POST
    data_selector: transaction
    params: {}
- name: Capture Preauth
  endpoint:
    path: /transactions/{transactionId}/capture/preauth
    method: POST
    data_selector: transaction
    params: {}
- name: Capture
  endpoint:
    path: /transactions/{transactionId}/capture
    method: POST
    data_selector: transaction
    params: {}
- name: Deposit
  endpoint:
    path: /transactions/{transactionId}/deposit
    method: POST
    data_selector: transaction
    params: {}
- name: bank_logo
  endpoint:
    path: /start/assets/institutions/{paymentProviderId}.png
    method: GET
- name: bank_icon
  endpoint:
    path: /start/assets/institutions/icons/{paymentProviderId}.png
    method: GET
- name: bank_logo
  endpoint:
    path: /start/assets/institutions/{paymentProviderId}.png
    method: GET
- name: bank_icon
  endpoint:
    path: /start/assets/institutions/icons/{paymentProviderId}.png
    method: GET
- name: tokenize_account
  endpoint:
    path: /api/v1/accounts/tokenize
    method: POST
- name: tokenize_account
  endpoint:
    path: /api/v1/accounts/tokenize
    method: POST
    data_selector: account
    params:
      verifyAccount: 'true'
- name: EstablishRequest
  endpoint:
    path: /payments/reference/post-establish
    method: POST
    data_selector: establishData
    params: {}
- name: Recurring Payments
  endpoint:
    path: /payments/docs/reference-recurring-payments
    method: GET
    data_selector: recurringPayments
    params: {}
- name: Deferred Payments
  endpoint:
    path: /payments/docs/deferred-payments
    method: GET
    data_selector: deferredPayments
    params: {}
- name: Transaction Status
  endpoint:
    path: /payments/docs/transaction-status
    method: GET
    data_selector: transactionStatus
    params: {}
- name: Add VIP Customers
  endpoint:
    path: /customers
    method: POST
    data_selector: customer
    params: {}
- name: Update Customer
  endpoint:
    path: /customers/{customerId}
    method: POST
    data_selector: customer
    params: {}
- name: Update Customer by External ID
  endpoint:
    path: /customers
    method: POST
    data_selector: customer
    params:
      externalId: ABC098
- name: Update Customer
  endpoint:
    path: /customers/{customerId}
    method: POST
    data_selector: data
    params: {}
- name: Update Customer by External ID
  endpoint:
    path: /customers
    method: POST
    data_selector: data
    params:
      externalId: ABC098
- name: Capture API
  endpoint:
    path: /payments/reference/post-transactions-transactionid-capture
    method: POST
    data_selector: response
    params: {}
- name: Deposit API
  endpoint:
    path: /payments/reference/post-transactions-deposit
    method: POST
    data_selector: response
    params: {}
- name: recurrence
  endpoint:
    path: /payments/docs/reference-recurring-payments
    method: GET
    data_selector: recurrence
- name: Recurrence Object
  endpoint:
    path: /payments/docs/reference-recurring-payments
    method: GET
    data_selector: recurrenceData
- name: Settlement Funding File
  endpoint:
    path: /payments/docs/reporting#settlement-funding-file
    method: GET
    data_selector: reports
    params: {}
- name: Settlement Reconciliation
  endpoint:
    path: /payments/docs/reference-reporting#settlement-reconciliation-file
    method: GET
    data_selector: reports
    params: {}
- name: RTP Settlement Reconciliation
  endpoint:
    path: /payments/docs/reference-reporting#rtp-settlement-reconciliation-file
    method: GET
    data_selector: reports
    params: {}
- name: Settlement Funding File
  endpoint:
    path: /payments/docs/reporting#settlement-funding-file
    method: GET
    data_selector: reports
    params: {}
- name: Settlement Reconciliation
  endpoint:
    path: /payments/docs/reference-reporting#settlement-reconciliation-file
    method: GET
    data_selector: reports
    params: {}
- name: RTP Settlement Reconciliation
  endpoint:
    path: /payments/docs/reference-reporting#rtp-settlement-reconciliation-file
    method: GET
    data_selector: reports
    params: {}
- name: Settlement Funding File
  endpoint:
    path: /payments/docs/reporting#settlement-funding-file
    method: GET
    data_selector: ''
    params: {}
- name: Settlement Reconciliation
  endpoint:
    path: /payments/docs/reference-reporting#settlement-reconciliation-file
    method: GET
    data_selector: ''
    params: {}
- name: RTP Settlement Reconciliation
  endpoint:
    path: /payments/docs/reference-reporting#rtp-settlement-reconciliation-file
    method: GET
    data_selector: ''
    params: {}
- name: Settlement Funding File
  endpoint:
    path: /payments/docs/reference-reporting#settlement-funding-file
    method: GET
    data_selector: records
- name: Settlement Reconciliation File
  endpoint:
    path: /payments/docs/reference-reporting#settlement-reconciliation-file
    method: GET
    data_selector: records
- name: RTP Settlement Reconciliation
  endpoint:
    path: /payments/docs/reference-reporting#rtp-settlement-reconciliation-file
    method: GET
    data_selector: records
- name: settlement_funding_file
  endpoint:
    path: /payments/docs/reporting#settlement-funding-file
    method: GET
    data_selector: records
    params: {}
- name: settlement_reconciliation_file
  endpoint:
    path: /payments/docs/reference-reporting#settlement-reconciliation-file
    method: GET
    data_selector: records
    params: {}
- name: rtp_settlement_reconciliation_file
  endpoint:
    path: /payments/docs/reference-reporting#rtp-settlement-reconciliation-file
    method: GET
    data_selector: records
    params: {}
- name: settlement_funding_file
  endpoint:
    path: /payments/docs/reporting#settlement-funding-file
    method: GET
    data_selector: records
- name: settlement_reconciliation_file
  endpoint:
    path: /payments/docs/reference-reporting#settlement-reconciliation-file
    method: GET
    data_selector: records
- name: rtp_settlement_reconciliation_file
  endpoint:
    path: /payments/docs/reference-reporting#rtp-settlement-reconciliation-file
    method: GET
    data_selector: records
- name: settlement_funding_file
  endpoint:
    path: /payments/docs/reporting#settlement-funding-file
    method: GET
    data_selector: ''
    params: {}
- name: settlement_reconciliation_file
  endpoint:
    path: /payments/docs/reference-reporting#settlement-reconciliation-file
    method: GET
    data_selector: ''
    params: {}
- name: rtp_settlement_reconciliation_file
  endpoint:
    path: /payments/docs/reference-reporting#rtp-settlement-reconciliation-file
    method: GET
    data_selector: ''
    params: {}
- name: settlement_funding_file
  endpoint:
    path: /payments/docs/reporting#settlement-funding-file
    method: GET
- name: settlement_reconciliation_file
  endpoint:
    path: /payments/docs/reference-reporting#settlement-reconciliation-file
    method: GET
- name: rtp_settlement_reconciliation_file
  endpoint:
    path: /payments/docs/reference-reporting#rtp-settlement-reconciliation-file
    method: GET
- name: transaction_id
  endpoint:
    path: /payments/reference/transaction-id
    method: GET
    data_selector: transactionId
    params: {}
- name: EstablishTransaction
  endpoint:
    path: /payments/reference/post-establish
    method: POST
- name: CaptureTransaction
  endpoint:
    path: /payments/reference/post-transactions-transactionid-capture
    method: POST
- name: CancelTransaction
  endpoint:
    path: /payments/reference/post-transactions-cancel
    method: POST
- name: payment_types
  endpoint:
    path: /payments/docs/reference-payment-types
    method: GET
    data_selector: payment_types
    params: {}
- name: transaction_status_values
  endpoint:
    path: /payments/docs/reference-transaction-status-values
    method: GET
    data_selector: transaction_status_values
    params: {}
- name: transaction_types
  endpoint:
    path: /payments/docs/reference-transaction-types
    method: GET
    data_selector: transaction_types
    params: {}
- name: verification_mode
  endpoint:
    path: /payments/docs/reference-verification-mode
    method: GET
    data_selector: verification_mode
    params: {}
- name: verification_status
  endpoint:
    path: /payments/docs/reference-verification-status
    method: GET
    data_selector: verification_status
    params: {}
- name: verification_types
  endpoint:
    path: /payments/docs/reference-verification-types
    method: GET
    data_selector: verification_types
    params: {}
- name: fcra_verification_third_party_score_values
  endpoint:
    path: /payments/docs/reference-fcra-verification-third-party-score-values
    method: GET
    data_selector: fcra_verification_third_party_score_values
    params: {}
- name: non_fcra_verification_score_values
  endpoint:
    path: /payments/docs/reference-non-fcra-verification-score-values
    method: GET
    data_selector: non_fcra_verification_score_values
    params: {}
- name: financial_institution_account_type_values
  endpoint:
    path: /payments/docs/reference-financial-institution-account-type-values
    method: GET
    data_selector: financial_institution_account_type_values
    params: {}
- name: financial_institution_account_profile_values
  endpoint:
    path: /payments/docs/reference-financial-institution-account-profile-values
    method: GET
    data_selector: financial_institution_account_profile_values
    params: {}
- name: transaction_types
  endpoint:
    path: /payments/docs/transaction-types
    method: GET
    data_selector: transaction_types
    params: {}
- name: transaction_status
  endpoint:
    path: /payments/docs/transaction-status
    method: GET
    data_selector: statuses
    params: {}
- name: status_codes
  endpoint:
    path: /payments/docs/status-codes
    method: GET
    data_selector: codes
    params: {}
- name: merchant_collections_file
  endpoint:
    path: /payments/docs/merchant-collections-file
    method: GET
    data_selector: records
- name: reconciliation_funding
  endpoint:
    path: /payments/docs/reconciliation-funding
    method: GET
    data_selector: records
- name: ach_eft_return
  endpoint:
    path: /payments/docs/ach-eft-return
    method: GET
    data_selector: records
- name: vip_program
  endpoint:
    path: /payments/docs/vip-program
    method: GET
    data_selector: records
- name: Funding Report
  endpoint:
    path: /payments/docs/funding-report
    method: GET
    data_selector: records
- name: Funding Report
  endpoint:
    path: /payments/docs/funding-report
    method: GET
    data_selector: records
    params: {}
- name: Reconciliation & Funding Report
  endpoint:
    path: /payments/docs/settlement-report
    method: GET
- name: reconciliation_report
  endpoint:
    path: /payments/docs/settlement-report
    method: GET
    data_selector: records
    params: {}
- name: RTP Reconciliation Report
  endpoint:
    path: /payments/docs/rtp-report
    method: GET
    data_selector: rows
- name: VIP Users File Upload
  endpoint:
    path: /payments/docs/vip-program
    method: POST
    data_selector: VIP Tiers
    params: {}
- name: account_balance
  endpoint:
    path: /payments/docs/account-balance
    method: GET
    data_selector: account balances
    params:
      product: RTP or EFT
      date_range: maximum of 90 days
- name: FI Status Page
  endpoint:
    path: /payments/docs/fi-status
    method: GET
- name: Trustly Mark
  endpoint:
    path: /payments/docs/mark-library
    method: GET
    data_selector: assets
    params: {}
- name: Trustly Widget
  endpoint:
    path: /payments/docs/widgets
    method: GET
    data_selector: widgets
    params: {}
- name: Trustly Lightbox
  endpoint:
    path: /payments/docs/lightbox
    method: GET
    data_selector: lightbox
    params: {}
- name: Trustly Buttons
  endpoint:
    path: /payments/docs/buttons
    method: GET
    data_selector: buttons
    params: {}
- name: Trustly Mark
  endpoint:
    path: /payments/docs/mark-library
    method: GET
    data_selector: assets
- name: Trustly Widget
  endpoint:
    path: /payments/docs/sdk
    method: GET
    data_selector: assets
- name: Trustly Lightbox
  endpoint:
    path: /payments/docs/sdk
    method: GET
    data_selector: assets
- name: Trustly Buttons
  endpoint:
    path: /payments/docs/sdk
    method: GET
    data_selector: assets
- name: Trustly Notifications & Emails
  endpoint:
    path: /payments/docs/sdk
    method: GET
    data_selector: assets
- name: capture_transaction
  endpoint:
    path: /transactions/{transactionId}/capture
    method: POST
- name: deposit_transaction
  endpoint:
    path: /transactions/{transactionId}/deposit
    method: POST
    data_selector: transactionId
- name: account_activity_summary
  endpoint:
    path: /transactions/{transactionId}/accountSummary
    method: GET
- name: user
  endpoint:
    path: /transactions/{transactionId}/user
    method: GET
    data_selector: object
    params: {}
- name: account_activity_summary
  endpoint:
    path: /transactions/{transactionId}/accountSummary
    method: GET
- name: post_account_feedback
  endpoint:
    path: /feedback
    method: POST
    data_selector: object
- name: capture_transaction
  endpoint:
    path: /transactions/{transactionId}/capture
    method: POST
- name: deposit_transaction
  endpoint:
    path: /transactions/{transactionId}/deposit
    method: POST
- name: accounts
  endpoint:
    path: /payments/reference/post-account-feedback
    method: POST
    data_selector: accountData
    params: {}
- name: transactions
  endpoint:
    path: /payments/reference/get-transaction
    method: GET
    data_selector: transactionData
    params: {}
- name: customers
  endpoint:
    path: /payments/reference/get-customers
    method: GET
    data_selector: customerData
    params: {}
- name: account_activity_summary
  endpoint:
    path: /transactions/{transactionId}/accountSummary
    method: GET
- name: accounts
  endpoint:
    path: /payments/reference/get-transaction-account-summary
    method: GET
- name: countries
  endpoint:
    path: /payments/reference/get-countries
    method: GET
- name: customers
  endpoint:
    path: /payments/reference/get-customers
    method: GET
- name: payments
  endpoint:
    path: /payments/reference/list-payments
    method: GET
- name: transactions
  endpoint:
    path: /payments/reference/list-transactions
    method: GET
- name: user
  endpoint:
    path: /transactions/{transactionId}/user
    method: GET
    data_selector: object
    params: {}
- name: account_activity_summary
  endpoint:
    path: /transactions/{transactionId}/accountSummary
    method: GET
    data_selector: object
- name: post_account_feedback
  endpoint:
    path: /feedback
    method: POST
    data_selector: object
    params: {}
- name: accounts
  endpoint:
    path: /payments/reference/list-selected-accounts
    method: GET
    data_selector: accounts
- name: payments
  endpoint:
    path: /payments/reference/list-payments
    method: GET
    data_selector: payments
- name: accounts
  endpoint:
    path: /payments/reference/list-selected-accounts
    method: GET
- name: customers
  endpoint:
    path: /payments/reference/get-customers
    method: GET
- name: payments
  endpoint:
    path: /payments/reference/list-payments
    method: GET
- name: transactions
  endpoint:
    path: /payments/reference/list-transactions
    method: GET
- name: accounts
  endpoint:
    path: /payments/reference/post-account-feedback
    method: POST
- name: payments
  endpoint:
    path: /payments/reference/list-payments
    method: GET
- name: transactions
  endpoint:
    path: /payments/reference/list-transactions
    method: GET
- name: customers
  endpoint:
    path: /payments/reference/get-customers
    method: GET
- name: countries
  endpoint:
    path: /payments/reference/get-countries
    method: GET
- name: post_account_feedback
  endpoint:
    path: /feedback
    method: POST
    data_selector: object
    params: {}
- name: accounts
  endpoint:
    path: /payments/reference/post-account-feedback
    method: POST
- name: account_data
  endpoint:
    path: /payments/reference/get-transaction-account-summary
    method: GET
- name: customers
  endpoint:
    path: /payments/reference/customers
    method: POST
- name: payments
  endpoint:
    path: /payments/reference/list-payments
    method: GET
- name: transactions
  endpoint:
    path: /payments/reference/list-transactions
    method: GET
- name: tokenize_account
  endpoint:
    path: /accounts/tokenize
    method: POST
    data_selector: object
    params:
      verifyAccount: 'false'
- name: verify_account
  endpoint:
    path: /accounts/verify
    method: POST
- name: account_balance
  endpoint:
    path: /transactions/{transactionId}/payment/paymentProvider/account/balance
    method: GET
    data_selector: accountBalance
- name: accounts
  endpoint:
    path: /payments/reference/post-account-feedback
    method: POST
- name: account_data
  endpoint:
    path: /payments/reference/get-transaction-account-summary
    method: GET
- name: countries
  endpoint:
    path: /payments/reference/get-countries
    method: GET
- name: customers
  endpoint:
    path: /payments/reference/post-customers
    method: POST
- name: event_notifications
  endpoint:
    path: /payments/reference/event-notifications-webhooks
    method: POST
- name: identity
  endpoint:
    path: /payments/reference/get-trustly-id-user-data
    method: GET
- name: payments
  endpoint:
    path: /payments/reference/list-payments
    method: GET
- name: payment_providers
  endpoint:
    path: /payments/reference/get-paymentproviders
    method: GET
- name: transactions
  endpoint:
    path: /payments/reference/post-transactions-cancel
    method: POST
- name: account_users
  endpoint:
    path: /transactions/{transactionId}/payment/paymentProvider/user
    method: GET
- name: OAuth
  endpoint:
    path: /payments/reference/oauth
    method: POST
- name: Payments
  endpoint:
    path: /payments/reference/list-payments
    method: GET
- name: Transactions
  endpoint:
    path: /payments/reference/list-transactions
    method: GET
- name: list_all_accounts
  endpoint:
    path: /api/v1/transactions/{transactionId}/payment/paymentProvider/accounts
    method: GET
    data_selector: accounts
- name: countries
  endpoint:
    path: /countries
    method: GET
    data_selector: countries
- name: post_account_feedback
  endpoint:
    path: /v1/feedback
    method: POST
    data_selector: object
- name: customer
  endpoint:
    path: /customers
    method: POST
- name: customers
  endpoint:
    path: /customers
    method: GET
- name: tokenize_account
  endpoint:
    path: /accounts/tokenize
    method: POST
    data_selector: object
    params:
      verifyAccount: 'false'
- name: customer
  endpoint:
    path: /customers/{customerId}
    method: GET
- name: verify_account
  endpoint:
    path: /accounts/verify
    method: POST
- name: customer
  endpoint:
    path: /customers/{customerId}
    method: POST
- name: account_balance
  endpoint:
    path: /api/v1/transactions/{transactionId}/payment/paymentProvider/account/balance
    method: GET
    data_selector: accountBalance
- name: event_notifications
  endpoint:
    path: /payments/reference/event-notifications-webhooks
    method: POST
    data_selector: Event
    params: {}
- name: establish
  endpoint:
    path: /payments/reference/post_establish
    method: POST
- name: account_users
  endpoint:
    path: /transactions/{transactionId}/payment/paymentProvider/user
    method: GET
- name: update
  endpoint:
    path: /payments/reference/post_update
    method: POST
- name: list_all_accounts
  endpoint:
    path: /api/v1/transactions/{transactionId}/payment/paymentProvider/accounts
    method: GET
    data_selector: accounts
- name: countries
  endpoint:
    path: /countries
    method: GET
    data_selector: countries
    params: {}
- name: Completed
  endpoint:
    path: /payments/reference/post_completed
    method: POST
- name: customer
  endpoint:
    path: /customers
    method: POST
    data_selector: customer
- name: customers
  endpoint:
    path: /customers
    method: GET
    data_selector: customers
    params: {}
- name: Refresh
  endpoint:
    path: /payments/reference/post_refresh
    method: POST
    data_selector: event
    params: {}
- name: Get Transactions
  endpoint:
    path: /payments/reference/get-transaction
    method: GET
    data_selector: transaction
    params: {}
- name: customer
  endpoint:
    path: /customers/{customerId}
    method: GET
- name: update_customer
  endpoint:
    path: /customers/{customerId}
    method: POST
- name: user
  endpoint:
    path: /transactions/{transactionId}/user
    method: GET
    data_selector: object
    params: {}
- name: event_notifications
  endpoint:
    path: /payments/reference/event-notifications-webhooks
    method: POST
- name: user_verification_details
  endpoint:
    path: /transactions/{transactionId}/user/detail
    method: GET
- name: establish
  endpoint:
    path: /payments/reference/post_establish
    method: POST
- name: update_user_status
  endpoint:
    path: /api/v1/transactions/{transactionId}/feedback
    method: POST
- name: payments
  endpoint:
    path: /payments
    method: GET
    data_selector: payments
- name: payment
  endpoint:
    path: /payments/{paymentId}
    method: GET
- name: Completed
  endpoint:
    path: /payments/reference/post_completed
    method: POST
- name: Authorize
  endpoint:
    path: /payments/reference/post_authorize
    method: POST
- name: Expired
  endpoint:
    path: /payments/reference/post_expired
    method: POST
- name: Failed
  endpoint:
    path: /payments/reference/post_failed
    method: POST
- name: Refresh
  endpoint:
    path: /payments/reference/post_refresh
    method: POST
- name: Data Ready
  endpoint:
    path: /payments/reference/post_dataready
    method: POST
- name: Verify Customer
  endpoint:
    path: /payments/reference/post_verifycustomer
    method: POST
- name: Update
  endpoint:
    path: /payments/reference/post_update
    method: POST
- name: Establish
  endpoint:
    path: /payments/reference/post_establish
    method: POST
- name: Customers
  endpoint:
    path: /payments/reference/customers
    method: POST
- name: payment_providers
  endpoint:
    path: /v1/paymentProviders
    method: GET
- name: failed
  endpoint:
    path: /payments/reference/post_failed
    method: POST
- name: cancel_transaction
  endpoint:
    path: /transactions/{transactionId}/cancel
    method: POST
- name: refresh
  endpoint:
    path: /payments/reference/post_refresh
    method: POST
- name: establish_transaction
  endpoint:
    path: /establish
    method: POST
- name: Data Ready
  endpoint:
    path: /payments/reference/post_dataready
    method: POST
- name: transactions
  endpoint:
    path: /transactions
    method: GET
- name: preauthorize_transaction
  endpoint:
    path: /transactions/{transactionId}/capture/preAuth
    method: POST
- name: get_user
  endpoint:
    path: /transactions/{transactionId}/user
    method: GET
    data_selector: object
    params: {}
- name: reclaim_transaction
  endpoint:
    path: /transactions/{transactionId}/reclaim
    method: POST
- name: user_verification_details
  endpoint:
    path: /transactions/{transactionId}/user/detail
    method: GET
    data_selector: detail
- name: refresh_transaction
  endpoint:
    path: /transactions/{transactionId}/refresh
    method: POST
- name: update_user_status
  endpoint:
    path: /api/v1/transactions/{transactionId}/feedback
    method: POST
- name: refund_transaction
  endpoint:
    path: /transactions/{transactionId}/refund
    method: POST
- name: payments
  endpoint:
    path: /payments
    method: GET
    data_selector: payments
- name: transaction
  endpoint:
    path: /transactions/{transactionId}
    method: GET
- name: payments
  endpoint:
    path: /payments/{paymentId}
    method: GET
- name: payment_providers
  endpoint:
    path: /v1/paymentProviders
    method: GET
- name: cancel_transaction
  endpoint:
    path: /transactions/{transactionId}/cancel
    method: POST
- name: establish_transaction
  endpoint:
    path: /establish
    method: POST
- name: transactions
  endpoint:
    path: /transactions
    method: GET
- name: preauthorize_transaction
  endpoint:
    path: /transactions/{transactionId}/capture/preAuth
    method: POST
- name: establish_data
  endpoint:
    path: /payments/reference/establish-data-object
    method: POST
- name: reclaim_transaction
  endpoint:
    path: /transactions/{transactionId}/reclaim
    method: POST
- name: refresh_transaction
  endpoint:
    path: /transactions/{transactionId}/refresh
    method: POST
- name: refund_transaction
  endpoint:
    path: /transactions/{transactionId}/refund
    method: POST
- name: Content Strings
  endpoint:
    path: /payments/reference/content-strings
    method: GET
    data_selector: strings
- name: Payments
  endpoint:
    path: /payments/reference/list-payments
    method: GET
    data_selector: payments
- name: Transactions
  endpoint:
    path: /payments/reference/list-transactions
    method: GET
    data_selector: transactions
- name: transaction
  endpoint:
    path: /transactions/{transactionId}
    method: GET
- name: cancel_transaction
  endpoint:
    path: /transactions/{transactionId}/cancel
    method: POST
- name: payment_providers
  endpoint:
    path: /paymentProviders
    method: GET
- name: payments
  endpoint:
    path: /v1/payments
    method: GET
- name: customer
  endpoint:
    path: /v1/customers
    method: POST
- name: countries
  endpoint:
    path: /countries
    method: GET
- name: accounts
  endpoint:
    path: /payments/reference/get-accounts
    method: GET
- name: customers
  endpoint:
    path: /payments/reference/get-customers
    method: GET
- name: payments
  endpoint:
    path: /payments/reference/list-payments
    method: GET
- name: Content Strings
  endpoint:
    path: /payments/reference/content-strings
    method: GET
    data_selector: properties
    params: {}
- name: Payments
  endpoint:
    path: /payments/reference/list-payments
    method: GET
    data_selector: payments
    params: {}
- name: Transactions
  endpoint:
    path: /payments/reference/get-transaction
    method: GET
    data_selector: transactions
    params: {}
- name: cancel_transaction
  endpoint:
    path: /api/v1/transactions/{transactionId}/cancel
    method: POST
- name: payment_providers
  endpoint:
    path: /v1/paymentProviders
    method: GET
    data_selector: response
- name: payments
  endpoint:
    path: /payments
    method: GET
    data_selector: transactions
- name: customer
  endpoint:
    path: /customers
    method: POST
- name: countries
  endpoint:
    path: /countries
    method: GET
notes:
- Users must successfully authorize transactions through Trustly UI before data or
  payments APIs are utilized.
- Users must authorize transactions through Trustly UI before API utilization.
- Wait for the Data Ready event before calling Account Data APIs.
- If a significant amount of time has passed since the user authorized the transaction,
  call the Refresh Transaction API prior to using the Get Account Balance API.
- Every Account Data API call should be performed only after Data Ready event is received.
- Ensure you pass a query string of createTransaction=true on the API Endpoint URL.
- For a full list of the fields, consult the Establish a Transaction.
- BETA Features Included — Standard Trustly Service Level Agreements do not apply
  to this functionality at this time.
- Some behaviors, field names, and property types are likely to change prior to the
  General Availability release.
- Calling any Account Data APIs for a new authorization transaction prior to receiving
  the DataReady event can result in partial data being returned.
- Calling Account Data APIs for a new authorization transaction prior to receiving
  the DataReady event can result in partial data being returned.
- Do not pass Consumer PII (name, email address, etc) in the description field.
- Uses OAuth2 for authentication.
- Requirements for International Money Transfer Applications include providing specific
  data fields.
- Requires compliance with International ACH Transaction (IAT) regulations.
- Electronic Gaming clients are required to pass verifyCustomer as true and pass the
  customer object for verification.
- Ensure to handle the redirect with the provided returnUrl.
- Calling any of the Account Data APIs for a new authorization transaction prior to
  receiving the DataReady event can result in partial data being returned.
- Waiting for the DataReady event is necessary before making requests to Account Data
  APIs.
- A PENDING transaction will trigger an `Authorized` event notification.
- Ensure you're securing your call by including the requestSignature parameter.
- Trustly will not redirect the User to your returnUrl until we either receive a response
  (success or failure) or until the request times out after 3 seconds.
- If you fail to receive or store the splitToken, it can not be resent.
- Some Trustly products require specific use case testing and simulations, in most
  of those cases, additional details are provided in the appropriate tutorial.
- When testing, avoid using the same generic username repeatedly across multiple transactions.
- Use unique, identifiable usernames for each test scenario to ensure smoother and
  faster test results.
- The user must be in the UK (GB, GG, JE, GI) as the current flow type.
- AutomaticCapture must be true.
- Trustly Direct Debit is a restricted product
- Merchant reference is mandatory and unique per mandate
- Self-service onboarding for the VIP customer tier product feature is not available
  at this time.
- Idempotency works for transactions with Authorized, Processed, or Completed status.
- Refund API can use the same merchant reference that already existed.
- Idempotency requires that the merchant reference field is unique per merchant and
  per environment.
- Reports are available daily by 10:00 AM Eastern Time.
- Reports can be delivered to an SFTP site or downloaded from the Merchant Portal.
- Reports can either be delivered to an SFTP site hosted by Trustly, or downloaded
  from the Merchant Portal.
- RTP Settlement Reconciliation File is only available if RTP is configured for the
  merchant.
- The Split Token is only provided immediately after being generated, via the Authorize
  event to the notification URL provided to Trustly during onboarding.
- A webhook listener must be configured at that URL in order to persist the splitToken
  alongside the correlating transactionId or customerId.
- This report only available if RTP is configured for merchant.
- The Split Token is only provided immediately after being generated, via the Authorize
  event, to the notification URL provided to Trustly during onboarding.
- Payment types include Deferred, Recurring, Disbursement, Verification, Retrieval.
- Transaction statuses include New, Pending, Authorized, Processed, Completed, Failed,
  Expired, Canceled, Denied, Reversed, Partially Refunded, Refunded, Voided, OnHold.
- Transaction types include External, Authorize, Pay, Capture, Refund, Reverse, Deposit,
  Reclaim, Representment, Tokenization, Preauthorization, Guarantee.
- Different types of transactions go through different statuses.
- All reports are provided in CSV format and are available at 11 AM UTC Monday - Friday
  (excluding holidays).
- An additional report is generated and delivered on Saturday for funding reports
  that use the EFT rail.
- The Funding Report contains all funds transferred (credits and debits).
- Every report begins with the header and ends with the trail.
- The report period cannot be greater than 31 days due to the size of the files generated.
- Transactions are always retrieved from 12 PM - 11:59 AM UTC on the selected day(s).
- The file must be in .csv format for the process to be completed successfully.
- The balance is automatically updated every hour.
- The FI Status page provides merchants with near real-time information on the status
  of our connectors to banks, credit unions, and other financial institutions.
- The FI Status page is enabled for the top 50 US and top 5 Canadian financial institutions.
- Using Trustly hosted assets is a requirement for certification and launch of your
  integration.
- Do not create your own Trustly Mark design or attempt to mimic the system-provided
  button designs.
- Capture collects money amounts (minimum of 0.99) from a customer bank account of
  a previously authorized transaction.
- The splitToken field is optional at the API level, if omitted when using 'guaranteed'
  payments, it will result in a Fail event.
- Please wait to receive the DataReady event before calling this endpoint. Requests
  to this endpoint made prior to receiving the DataReady event can result in partial
  data being returned.
- The sum of these captures must be less than or equal to what is allowed by the authorized
  payment.
- Ensure you also implement an Event Notification Handler to get transaction status
  updates.
- Ensure to handle redirect URLs for bank authorization.
- Add a Deep Link (URL Scheme) configured for your app
- The requestSignature is required in production
- When using the sandbox environment, set the `env` property to `sandbox`. Before
  publishing your production application, remove the `env` property.
- Trustly client libraries include functionality that simplifies OAuth handling.
- OAuth login pages often have strict security policies prohibiting access to their
  login URLs from WebViews.
- Trustly recommends using the Trustly iOS and Android SDKs to integrate the Trustly
  UI within mobile applications rather than WebView.
- When using the sandbox environment, set the env property to sandbox. Before publishing
  your production application, remove the env property.
- Feedback data helps optimize account verification scores over time.
- This feedback is required when using Trustly Connect.
- When you're testing in the Trustly Sandbox, change the root url to sandbox.trustly.one
  and make sure your Access ID is correct for the sandbox environment.
- Make sure you add the oauth_callback path to your app’s URL scheme.
- Requests to this endpoint made prior to receiving the DataReady event can result
  in partial data being returned.
- To support OAuth login flows, the Trustly Lightbox interacts with ASWebAuthenticationSession.
- Define a URL scheme in your Info.plist for proper redirection after login.
- Setup of OAuth and add redirects is required
- Please wait to receive the DataReady event before calling this endpoint.
- Allows for verification of most global accounts by passing in an account object
  containing either bank routing and account numbers or an IBAN.
- This is a restricted API and must be approved for usage by the Trustly Compliance
  team.
- Ensure you verify the event notification was sent by Trustly and has not been tampered
  with.
- All webhook payloads from Trustly are URL encoded strings.
- Although webhook payload examples appear in JSON format, all webhook payloads from
  Trustly are URL encoded strings.
- 'Content-Type: application/x-www-form-urlencoded'
- Although webhook payload examples, shown to the right, appear in JSON format, all
  webhook payloads from Trustly are URL encoded strings.
- Webhook payloads from Trustly are URL encoded strings.
- Retrieves the details of a Customer using the unique customerId that was returned
  upon customer creation.
- Verifications are configured per application, check with your Trustly services team
  member for definitions of your configured verifications.
- Although webhook payloads appear in JSON format, all webhook payloads from Trustly
  are URL encoded strings.
- A Deferred or Instant payment transaction can only be canceled before the payment
  processing cut-off time.
- If the Cancel request returns an error, a Refund call should be executed instead.
- Captures after the pre-authorized period interval are treated as normal Captures.
- Returns a list of transactions. It can be paged and filtered by appending arguments
  to the query string of the request.
- Request signatures are required for production API requests and SDK operations.
- Trustly strongly recommends that applications verify the signatures included in
  redirect notifications from Trustly UI SDKs and incoming webhook notifications.
- 'Check API Version: For API versions below 1.18.0, the requestSignature is calculated
  using ONLY the query parameters.'
- Uses OAuth2 with refresh token — requires setup of connected app in api
- A cancellation should be issued as soon as you know the transaction will not be
  completed.
- A unique identifier representing the transaction in your system. e.g. Order number
  or Payment ID number
- The gateway redirects the customer browser to this URL if the customer authorizes
  payment.
- A Deposit transaction can only be reclaimed after the transaction has been processed
  and completed.
- The Javascript window event notification call only works on native apps if Trustly
  SDK is used or if the merchant implements the creation of new windows.
- Ensure you check the validity of the request by verifying the Redirect Signature
  in your back end before you process it or by calling the Get Transaction API and
  checking if the values returned are the same as the parameters sent on the redirect
  URL.
- The Trustly SDK allows merchants to display Trustly product and experience string
  content in their applications.
- Some institutions require OAuth login authorization flows in which the user is directed
  to that bank's login page before returning to the Trustly Lightbox.
- Trustly recommends using one of the official Trustly native mobile SDKs for iOS
  and Android.
- Do not include fields with null values unless they also appear in your request payload
  with a null value.
- Check API Version for specific request signature calculation rules.
- The request signature is calculated as a HMAC-SHA1 of the request parameters using
  accessKey as the signing key.
- Trustly provides a Sandbox environment for active development and testing. The Sandbox
  environment supports all features and functionality of the production environment
  but payment operations do not result in any funds activity.
- Ensure you check the validity of the request by verifying the Redirect Signature
  in your back end before you process it.
- Some institutions require OAuth login authorization flows.
errors:
- 'REQUEST_LIMIT_EXCEEDED: Throttle API calls or reduce frequency'
- 'QUERY_TIMEOUT: Break down filters or add selectivity'
- 'DATA_NOT_READY: Wait for Data Ready event before making a request'
- DataReady event required before calling Account Data APIs.
- '400 Bad Request: Check the request parameters and retry the request.'
- '401 Unauthorized: Check your API Credentials and Merchant Id and try the request
  again.'
- '500 Server Error: Retry the request and notify Trustly if the issue persists.'
- '400: Bad Request — Ensure the transactionID is valid and authorized.'
- '400: Invalid request due to unauthorized access or missing data.'
- '401: Unauthorized access, check your credentials.'
- '404: Resource not found.'
- '500: Internal server error.'
- DataReady event must be received before making requests to Account Data APIs.
- 'InvalidRequest: Ensure all required fields are provided.'
- '400 Bad Request: Often due to a missing, required parameter.'
- '401 Unauthorized: Invalid accessId or accessKey.'
- '500 Server error: An error occurred within the Trustly environment.'
- '503 Service Unavailable: The server is currently unable to handle the request due
  to a temporary overloading or server maintenance.'
- Partial data returned if API called before DataReady event.
- Partial data may be returned if APIs are called before receiving the DataReady event.
- '401 Unauthorized: Recheck OAuth scopes or token expiration'
- '326: Expired split token'
- '380: Invalid / corrupt split token'
- '330: Invalid account'
- '390: Fraud analysis'
- '390: Fraud analysis (Negative Data)'
- '378: Internal error or bank request error'
- '331: Not enough balance'
- '330: Invalidated Transaction ID'
- '326: Expired Split Token'
- '380: Expired Split Token'
- '397: Invalid request'
- '330: Handling invalidated Transaction IDs'
- '326: Handling expired Split Tokens'
- '380: Handling expired Split Tokens'
- '397: Handling expired Split Tokens'
- 'ARUCS: Invalid details'
- 'ARUDD: Insufficient funds'
- 'AUDDIS: Instruction Canceled by Payer'
- 'ARUCS: 0: Invalid details'
- 'ARUCS: 2: Beneficiary deceased'
- 'ARUCS: 3: Account transferred'
- 'ARUCS: 5: No account'
- 'ARUCS: B: Account closed'
- 'ARUCS: C: Requested by remitter'
- 'AWACS: 0: Invalid details'
- 'AWACS: 3: Account transferred'
- 'ARUDD: 0: Refer to payer (basically means out of funds)'
- 'ARUDD: 2: Payer deceased'
- 'ARUDD: 3: Account transferred'
- 'ARUDD: 4: Advance notice disputed'
- 'ARUDD: 5: No account (or wrong account type)'
- 'ARUDD: 6: No instruction'
- 'ARUDD: 7: Amount differs (disputed amount)'
- 'ARUDD: 8: Amount not yet due (in case payment is sent before DDI confirmed)'
- 'ARUDD: 9: Presentation is overdue'
- 'ARUDD: A: Service User differs (Details do not match DDI)'
- 'ARUDD: B: Account closed'
- 'ADDACS: 0: Instruction canceled refer to Payer'
- 'ADDACS: 1: Instruction canceled by Payer'
- 'ADDACS: 2: Payer Deceased'
- 'ADDACS: 3: Account transferred to new bank'
- 'ADDACS: B: Account closed'
- 'ADDACS: C: Account transferred to new branch'
- 'ADDACS: D: Advance notice disputed'
- 'ADDACS: E: Instruction amended'
- 'ADDACS: R: Instruction re-instated'
- 'AUDDIS: 1: Instruction Canceled by Payer'
- 'AUDDIS: 2: Payer deceased'
- 'AUDDIS: 3: Account transferred'
- 'AUDDIS: 5: No Account'
- 'AUDDIS: 6: No instruction'
- 'AUDDIS: C: DDI amount not zero'
- 'AUDDIS: F: Invalid account type'
- 'AUDDIS: G: PSP will not accept DD on account'
- 'AUDDIS: H: Instruction expired'
- 'AUDDIS: I: Payer Reference not unique'
- 'AUDDIS: K: Instruction cancelled by paying PSP'
- 'AUDDIS: L: Incorrect payers account details'
- 'AUDDIS: M: Trx code/user status incompatible'
- 'AUDDIS: N: Trx not allowed at payers branch'
- 'AUDDIS: O: invalid reference'
- 'AUDDIS: P: Payer''s name not present'
- 'AUDDIS: Q: Service users name blank'
- 'DDIC: 1: Amount differs'
- 'DDIC: 2: No advance notice received by payer'
- 'DDIC: 3: DDI cancelled by bank'
- 'DDIC: 4: Payer has cancelled DDI with Service User'
- 'DDIC: 5: No instruction held'
- 'DDIC: 6: Signature fraudulent'
- 'DDIC: 7: Claim raised at Service User Request'
- 'DDIC: 8: Service user name disputed, payer does not recognise'
- '210: This is a duplicate request. It has been ignored'
- 'SW010: Established'
- 'SW013: Canceled (user canceled the transaction)'
- 'SW020: Authorization received'
- 'SW021: Authorization denied'
- 'SW051: Merchant error'
- 'SW052: Financial institution error'
- 'SW053: Internal network error'
- 'SW059: Instant transaction rejected due to risk'
- 'SW060: Bank or network processor is down'
- 'SW013: Canceled'
- 'SW021: Authorization declined due to insufficient funds'
- 'SW052: Financial Institution error'
- 'SW054: Suspicious transaction activity'
- 'SW055: Negative data'
- 'SW056: Invalid account'
- 'SW057: Expired split token'
- 'UC01: User canceled the transaction at bank selection page'
- '400 Bad Request: Check request parameters'
- 400 Bad Request
- '400 Bad Request: Ensure the request parameters are valid'
- '400 Invalid parameter: Invalid Account Token'
- 500 Internal Server Error
- 'Invalid request parameters: Ensure all required fields are provided.'
- 'AUTHORIZATION_FAILED: Check the authorization token and its validity.'
- '400 Bad Request: Check request parameters.'
- '401 Unauthorized: Verify access token.'
- '404 Not Found: Endpoint may be incorrect.'
- '400 Bad Request: Transaction ID is required.'
- '400 Bad Request: Check the request parameters for correctness'
- '400 Bad Request: Requests may fail if parameters are missing or incorrect.'
- 400 Invalid parameter
- 400 One of the request parameters is invalid (sending an invalid amount format string
  for example).
- '400 Bad Request: Transaction Expired'
- '400 Bad Request: Transaction Canceled'
- '401 Unauthorized: Check OAuth scopes or token expiration.'
- '400 Bad Request: Check the request parameters.'
- 400 - Transaction Expired
- 400 - Transaction Canceled
- '400 Bad Request: The request was invalid.'
- '404 Not Found: The specified resource was not found.'
- '200: Return a 200 status to indicate that the data was received successfully'
- '200 OK: Must return HTTP status in less than 3 seconds.'
- Retry every 5 minutes for 12 hours if no response is received.
- '400 Bad Request: Invalid request parameters'
- '401 Unauthorized: Check your authentication credentials'
- Return a 200 status to indicate that the data was received successfully
- '400 Bad Request: Check the request parameters and ensure they are correct.'
- '200 OK: Successful request'
- '401 Unauthorized: Invalid `accessId` or `accessKey`.'
- '404 Not Found: This endpoint is not supported or defined by Trustly'
- '500 Server error: Internal Trustly error.'
- '503 Service Unavailable: The server is currently unable to handle the request due
  to temporary overloading or server maintenance.'
- '100: Internal error. An internal error (an internal database exception for example)
  occurred when trying to process the request.'
- '150: Remote error. A remote error (the consumer''s bank interface is down) occurred
  when trying to process the request. This is an internal error.'
- '200: Invalid parameter error. One of the request parameters is invalid (sending
  an invalid amount format string for example).'
- '210: This is a duplicate request. It has been ignored.'
- '300: Security error. These are generic security errors that can happen when trying
  to process the request.'
- '326: Expired split token.'
- '330: Invalid account.'
- '331: Not enough balance.'
- '375: Access control error. This occurs when some security parameter (accessId,
  accessKey or requestSignature) is invalid and the request cannot be processed.'
- '380: Invalid Split Token.'
- '390: Fraud analysis. Suspicious transaction or negative data.'
- '397: splitToken is not valid.'
- '100: Internal error. An internal error occurred when trying to process the request.'
- '150: Remote error. A remote error occurred when trying to process the request.'
- '200: Invalid parameter error. One of the request parameters is invalid.'
- '300: Security error. Generic security errors.'
- '375: Access control error. Invalid security parameter.'
- '390: Fraud analysis. Suspicious transaction.'
auth_info:
  mentioned_objects: []
client:
  base_url: https://sandbox.trustly.one/api/v1
  auth:
    type: basic
    location: header
    header_name: Authorization
  paginator:
    type: page
    page_size_param: count
    default_page_size: 25
source_metadata: null
