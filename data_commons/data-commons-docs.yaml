resources:
- name: get_triples
  endpoint:
    path: /api/python/triple.html
    method: GET
    data_selector: triples
    params:
      dcids: ''
      limit: 500
- name: get_places_in
  endpoint:
    path: /api/python/place_in.html
    method: GET
    data_selector: dict
    params: {}
- name: get_stat_value
  endpoint:
    path: /api/python/stat_value
    method: GET
    data_selector: value
    params: {}
- name: statistical_time_series
  endpoint:
    path: /api/python/stat_series.html
    method: GET
    data_selector: dict
    params:
      place: dcid
      stat_var: dcid
      measurement_method: optional
      observation_period: optional
      unit: optional
      scaling_factor: optional
- name: statistical_data
  endpoint:
    path: /api/python/stat_all.html
    method: GET
    data_selector: data
    params: {}
- name: property_labels
  endpoint:
    path: /api/python/property_label.html
    method: GET
    data_selector: response
    params:
      dcids: list_of_nodes
      out: 'true'
- name: get_property_values
  endpoint:
    path: /api/python/v2/node.html
    method: GET
    data_selector: dict
    params:
      dcids: ''
      prop: ''
      out: true
      value_type: NONE
      limit: 500
- name: time_series
  endpoint:
    path: /api/pandas/time_series
    method: GET
    data_selector: Series
    params: {}
- name: time_series_dataframe
  endpoint:
    path: /api/pandas/time_series_dataframe
    method: GET
    data_selector: data
    params: {}
- name: multivariate_dataframe
  endpoint:
    path: /api/pandas/multivariate_dataframe
    method: GET
    data_selector: data
    params: {}
- name: get_name
  endpoint:
    path: /api/sheets/get_name.html
    method: GET
    data_selector: records
- name: places_in
  endpoint:
    path: /api/sheets/places_in.html
    method: GET
    data_selector: records
- name: get_variable
  endpoint:
    path: /api/sheets/get_variable.html
    method: GET
    data_selector: records
- name: get_property
  endpoint:
    path: /api/sheets/get_property.html
    method: GET
    data_selector: records
- name: get_names_associated_with_dcids
  endpoint:
    path: /api/sheets/get_name.html
    method: GET
    data_selector: names
    params: {}
- name: places_in
  endpoint:
    path: /api/sheets/places_in.html
    method: GET
    data_selector: results
- name: statistical_observations
  endpoint:
    path: /api/sheets/get_variable
    method: GET
    data_selector: records
- name: node_properties
  endpoint:
    path: /api/sheets/get_property.html
    method: GET
    data_selector: values
    params: {}
- name: datacommons-bar
  endpoint:
    path: /api/web_components/bar
    method: GET
- name: datacommons-highlight
  endpoint:
    path: /api/web_components/highlight
    method: GET
- name: datacommons-gauge
  endpoint:
    path: /api/web_components/gauge
    method: GET
- name: datacommons-line
  endpoint:
    path: /api/web_components/line
    method: GET
- name: datacommons-map
  endpoint:
    path: /api/web_components/map
    method: GET
- name: datacommons-pie
  endpoint:
    path: /api/web_components/pie
    method: GET
- name: datacommons-ranking
  endpoint:
    path: /api/web_components/ranking
    method: GET
- name: datacommons-scatter
  endpoint:
    path: /api/web_components/scatter
    method: GET
- name: datacommons-slider
  endpoint:
    path: /api/web_components/slider
    method: GET
- name: bar_chart
  endpoint:
    path: /api/web_components/bar
    method: GET
- name: gauge_chart
  endpoint:
    path: /api/web_components/gauge
    method: GET
    data_selector: gauge_data
- name: highlight_tile
  endpoint:
    path: /api/web_components/highlight
    method: GET
    data_selector: records
- name: line_chart
  endpoint:
    path: /api/web_components/line
    method: GET
    data_selector: records
- name: datacommons-map
  endpoint:
    path: /api/web_components/map
    method: GET
- name: pie_chart
  endpoint:
    path: /api/web_components/pie
    method: GET
- name: ranking_chart
  endpoint:
    path: /api/web_components/ranking
    method: GET
    data_selector: data
    params: {}
- name: datacommons-slider
  endpoint:
    path: /api/web_components/slider
    method: GET
- name: datacommons-map
  endpoint:
    path: /api/web_components/map
    method: GET
- name: datacommons-bar
  endpoint:
    path: /api/web_components/bar
    method: GET
- name: places
  endpoint:
    path: /api/rest/v2/places
    method: GET
    data_selector: records
- name: entities
  endpoint:
    path: /api/rest/v2/entities
    method: GET
    data_selector: records
- name: Observation
  endpoint:
    path: /api/rest/v2/observation
    method: GET
    data_selector: records
- name: Provenance
  endpoint:
    path: /api/rest/v2/provenance
    method: GET
    data_selector: records
- name: Place
  endpoint:
    path: /api/rest/v2/place
    method: GET
    data_selector: records
- name: Place
  endpoint:
    path: /api/place
    method: GET
    data_selector: records
- name: Observation
  endpoint:
    path: /api/observation
    method: GET
    data_selector: records
- name: observation
  endpoint:
    path: /core/api/v2/observation
    method: GET
    data_selector: data
    params: {}
- name: inputFiles
  endpoint:
    path: /inputFiles
    method: GET
    data_selector: records
- name: variables
  endpoint:
    path: /variables
    method: GET
    data_selector: records
- name: sources
  endpoint:
    path: /sources
    method: GET
    data_selector: records
- name: hospital_entities
  endpoint:
    path: hospital_entities.csv
    method: POST
    data_selector: entities
    params:
      importType: entities
      rowEntityType: Hospital
      idColumn: ccn
      entityColumns:
      - City
      provenance: Alaska Weekly Hospital Capacity
- name: observations
  endpoint:
    path: /observations
    method: GET
- name: statistical_observations
  endpoint:
    path: /api/v2/observation
    method: GET
    data_selector: observations
- name: node_properties
  endpoint:
    path: /api/v2/node
    method: GET
    data_selector: properties
- name: resolve_entities
  endpoint:
    path: /api/v2/resolve
    method: GET
    data_selector: entities
- name: statistical_observations
  endpoint:
    path: /api/rest/v2/observation
    method: GET
    data_selector: records
- name: node_properties
  endpoint:
    path: /api/rest/v2/node
    method: GET
    data_selector: records
- name: resolve_entities
  endpoint:
    path: /api/rest/v2/resolve
    method: GET
    data_selector: records
- name: observation
  endpoint:
    path: /observation
    method: GET
    data_selector: data
    params: {}
- name: node
  endpoint:
    path: /node
    method: GET
    data_selector: data
    params: {}
- name: resolve
  endpoint:
    path: /resolve
    method: GET
    data_selector: data
    params: {}
- name: sparql
  endpoint:
    path: /sparql
    method: GET
    data_selector: data
    params: {}
- name: observation
  endpoint:
    path: /api/python/v2/observation
    method: POST
    data_selector: ObservationResponse
- name: node
  endpoint:
    path: /api/python/v2/node
    method: POST
    data_selector: NodeResponse
- name: resolve
  endpoint:
    path: /api/python/v2/resolve
    method: POST
    data_selector: ResolveResponse
- name: triples
  endpoint:
    path: /v1/triples
    method: GET
- name: properties
  endpoint:
    path: /v1/properties
    method: GET
- name: property_values
  endpoint:
    path: /v1/property/values/
    method: GET
- name: bulk_triples
  endpoint:
    path: /v1/bulk/triples
    method: GET
- name: bulk_properties
  endpoint:
    path: /v1/bulk/properties
    method: GET
- name: bulk_property_values
  endpoint:
    path: /v1/bulk/property/values
    method: GET
- name: find_entities
  endpoint:
    path: /v1/find/entities
    method: GET
- name: place_info
  endpoint:
    path: /v1/info/place
    method: GET
- name: variable_info
  endpoint:
    path: /v1/info/variable
    method: GET
- name: observations_point
  endpoint:
    path: /v1/observations/point
    method: GET
- name: observations_series
  endpoint:
    path: /v1/observations/series
    method: GET
- name: variables
  endpoint:
    path: /v1/variables
    method: GET
- name: sparql
  endpoint:
    path: /v1/query
    method: GET
- name: Get statistical observations
  endpoint:
    path: /api/sheets/get_variable.html
    method: GET
    data_selector: records
- name: Get names associated with DCIDs
  endpoint:
    path: /api/sheets/get_name.html
    method: GET
    data_selector: records
- name: Get places contained in other places
  endpoint:
    path: /api/sheets/places_in.html
    method: GET
    data_selector: records
- name: Get node property values
  endpoint:
    path: /api/sheets/get_property.html
    method: GET
    data_selector: records
notes:
- Be sure to initialize the library. Check the Python library setup guide for more
  details.
- 'Method returns a dict in the form: {"<dcid>": ["string", ...]}'
- If no value is found, an empty list is returned.
- AI applications using the MCP server can make mistakes, so please double-check responses.
- A (free) Data Commons API key is required.
- You do not need to install the Google ADK; when you use the command we provide to
  start the agent, it downloads the ADK dependencies at run time.
- None of the Data Commons Sheets functions will work in a spreadsheet until you have
  enabled the add-on by opening the Fill place dcids sidebar.
- Uses Data Commons Web Component for visualizing statistical variables
- Uses Data Commons API for visualizing statistical variables.
- Uses a web component for visualizing statistical variables on a map.
- Default ranking count is 5.
- Default API root is https://datacommons.org.
- 'Page last updated: October 24, 2025'
- Supports complex SQL queries with BigQuery
- Uses unique IDs and geo locations to join with external datasets.
- Data Commons does not support local Windows development natively.
- Uses CSV files to define entities and link to existing entity types.
- It is recommended to specify a column for DCIDs.
- Uses OAuth2 with refresh token — requires setup of connected app in api
- Currently, making changes to any of the files in the static/ directory requires
  that you rebuild a local version of the repo to pick up the changes.
- Uses OAuth2 with refresh token — requires setup of connected app in Google Cloud
- Some objects may return nulls in deeply nested fields
- When the push completes, verify that the container has been uploaded in the Cloud
  Console.
- Requires setup of API keys in the environment file.
- Data Commons provides open and easy access to a plethora of publicly available real
  data.
- Data Commons is available to everyone at no cost and with no restrictions of use.
- Data Commons provides access to real world datasets.
- Trial key is capped with a limited quota for requests.
- Requests to base datacommons.org require an API key.
- The Data Commons V1 REST API is deprecated. Please use the V2 REST API.
errors:
- 'KeyError: ''geoId/123'''
- 'TypeError: get_triples() missing 1 required positional argument: ''dcids'''
- 'TypeError: get_places_in() missing 1 required positional argument: ''place_type'''
- 'TypeError: get_stat_value() missing 1 required positional argument: ''stat_var'''
- 'TypeError: get_stat_series() missing 1 required positional argument: ''stat_var'''
- 'No data found: Returns a dictionary with no values.'
- 'TypeError: get_property_labels() missing 1 required positional argument: ''dcids'''
- 'TypeError: get_property_values() missing 1 required positional argument: ''prop'''
- 'TypeError: build_time_series() missing 1 required positional argument: ''stat_var'''
- 'TypeError: build_time_series_dataframe() missing 1 required positional argument:
  ''stat_var'''
- 'TypeError: build_multivariate_dataframe() missing 1 required positional argument:
  ''stat_vars'''
- '401 Unauthorized: Recheck API key'
- '#ERROR! : Provided an empty cell for a DCID'
- No value is returned if a DCID does not exist
- '#REF!'
- '#ERROR!'
- A DCID does not exist (e.g. geoId/123123123)
- You provide a nonexistent statistical variable (e.g. Count)
- You provide an incorrectly formatted date (e.g. July 12, 2013)
- 'Fail to provide all required arguments, you will get a response of #ERROR!'
- Empty value returned for nonexistent property
- Empty value returned for bad DCID
- '#ERROR! returned for empty DCID'
- '#ERROR! returned for missing required property argument'
- 'REQUEST_LIMIT_EXCEEDED: Throttle API calls or reduce frequency'
- 'QUERY_TIMEOUT: Break down filters or add selectivity'
- '401 Unauthorized: Recheck OAuth scopes or token expiration'
- If you don’t see any data, go to https://console.cloud.google.com/run/jobs for your
  project, select the job you ran in the previous step, and click the Logs tab to
  look for errors.
- '403 Forbidden: Your client does not have permission to get URL / from this server'
- 502 Bad Gateway
- 'REQUEST_LIMIT_EXCEEDED: Throttle API calls or reduce frequency.'
auth_info:
  mentioned_objects: []
client:
  base_url: https://datacommons.org
  headers:
    Accept: application/json
source_metadata: null
