resources:
- name: Railway Metal Regions
  endpoint:
    path: /railway-metal/regions
    method: GET
    data_selector: regions
    params: {}
- name: Railway Metal Pricing
  endpoint:
    path: /railway-metal/pricing
    method: GET
    data_selector: pricing
    params: {}
- name: redeploy
  endpoint:
    path: /redeploy
    method: POST
    data_selector: service
    params: {}
- name: help
  endpoint:
    path: /help
    method: GET
    data_selector: commands
    params: {}
- name: Project Management
  endpoint:
    path: /mcp/project
    method: GET
    data_selector: projects
- name: Service Management
  endpoint:
    path: /mcp/service
    method: GET
    data_selector: services
- name: Environment Management
  endpoint:
    path: /mcp/environment
    method: GET
    data_selector: environments
- name: environments
  endpoint:
    path: /guides/environments
    method: GET
    data_selector: environments
    params: {}
- name: CPU Usage
  endpoint:
    path: /observability/dashboard/cpu-usage
    method: GET
- name: Memory Usage
  endpoint:
    path: /observability/dashboard/memory-usage
    method: GET
- name: Network In/Out
  endpoint:
    path: /observability/dashboard/network-traffic
    method: GET
- name: Disk Usage
  endpoint:
    path: /observability/dashboard/disk-usage
    method: GET
- name: Logs
  endpoint:
    path: /observability/dashboard/logs
    method: GET
- name: Project Usage
  endpoint:
    path: /observability/dashboard/project-usage
    method: GET
- name: permissions
  endpoint:
    path: /reference/project-members#scope-of-permissions
    method: GET
    data_selector: permissions_scope
- name: staged_changes
  endpoint:
    path: /staged_changes
    method: GET
    data_selector: changes
    params: {}
- name: express_app
  endpoint:
    path: /deploy/express
    method: POST
    data_selector: deployment_result
- name: Nest App
  endpoint:
    path: /template/nvnuEH
    method: GET
- name: fastify_app
  endpoint:
    path: /deploy
    method: POST
    data_selector: deployment
    params: {}
- name: flask_app
  endpoint:
    path: /
    method: GET
    data_selector: hello
- name: beego_app
  endpoint:
    path: /deploy/beego
    method: POST
    data_selector: status
    params: {}
- name: rails_app
  endpoint:
    path: /deploy/rails
    method: POST
    data_selector: deployment_info
- name: app_service
  endpoint:
    path: /overview/the-basics#project--project-canvas
    method: POST
    data_selector: service
    params: {}
- name: cron_service
  endpoint:
    path: /overview/the-basics#project--project-canvas
    method: POST
    data_selector: service
    params: {}
- name: worker_service
  endpoint:
    path: /overview/the-basics#project--project-canvas
    method: POST
    data_selector: service
    params: {}
- name: Postgres
  endpoint:
    path: /new
    method: POST
- name: luminus_app
  endpoint:
    path: /deploy/luminus
    method: POST
    data_selector: deployment
    params: {}
- name: play_app
  endpoint:
    path: /deploy/play
    method: POST
    data_selector: app
    params:
      name: helloworld
      organization: com.railwayguide
      version: latest
- name: PlayAppDeployment
  endpoint:
    path: /new/template/my9q_q
    method: GET
    data_selector: deployment
    params: {}
- name: Sails App
  endpoint:
    path: /new/template/t3sAEH
    method: GET
- name: PostgreSQL Database
  endpoint:
    path: /add/postgresql
    method: POST
- name: Redis Database
  endpoint:
    path: /add/redis
    method: POST
- name: Django App
  endpoint:
    path: /new/template/GB6Eki
    method: GET
    data_selector: data
    params: {}
- name: App Service
  endpoint:
    path: /services/app
    method: GET
    data_selector: records
    params: {}
- name: Cron Service
  endpoint:
    path: /services/cron
    method: GET
    data_selector: records
    params: {}
- name: Worker Service
  endpoint:
    path: /services/worker
    method: GET
    data_selector: records
    params: {}
- name: Database Service
  endpoint:
    path: /services/database
    method: GET
    data_selector: records
    params: {}
- name: angular_app
  endpoint:
    path: /new/template/A5t142
    method: POST
    data_selector: app
    params: {}
- name: remix_app
  endpoint:
    path: /new/template/remix
    method: GET
- name: deploy_from_cli
  endpoint:
    path: /guides/cli#installing-the-cli
    method: GET
- name: deploy_from_github
  endpoint:
    path: /new
    method: GET
- name: dockerfile_deployment
  endpoint:
    path: /guides/dockerfiles
    method: GET
- name: vue_app
  endpoint:
    path: /deploy/vue
    method: GET
    data_selector: deployment_steps
    params: {}
- name: spring_boot_app
  endpoint:
    path: /deploy/spring_boot
    method: POST
    data_selector: data
    params: {}
- name: SvelteKit
  endpoint:
    path: /deploy/sveltekit
    method: POST
    data_selector: deployment_info
    params: {}
- name: solid_app
  endpoint:
    path: /deploy/solid
    method: POST
    data_selector: deployment_info
    params: {}
- name: nixpacks
  endpoint:
    path: /nixpacks.toml
    method: GET
    data_selector: variables
    params: {}
- name: helloworld_distillery
  endpoint:
    path: /rel/config/config.exs
    method: GET
    data_selector: config
    params: {}
- name: nixpacks
  endpoint:
    path: /nixpacks.toml
    method: GET
    data_selector: variables
- name: supported_languages
  endpoint:
    path: /reference/nixpacks#supported-languages
    method: GET
    data_selector: languages
- name: build_table
  endpoint:
    path: /reference/nixpacks#the-build-table--build-plan
    method: GET
    data_selector: build_plan
- name: database_service
  endpoint:
    path: /guides/build-a-database-service
    method: GET
notes:
- Team tokens are tied to a team and will have access to all the team's resources.
- Non-team tokens are tied to your Railway account and will have access to all your
  resources.
- Project tokens are scoped to a specific environment within a project.
- Deploying from a private Docker registry is available on the Pro plan.
- Railway Metal is available to all users, including Trial & Hobby Plan users.
- Upgrading to Railway Metal may cause a brief period of downtime.
- Railway is a deployment platform designed to streamline the software development
  life-cycle, starting with instant deployments and effortless scale.
- 'Use Private Networking When Possible: Private networking allows services within
  a project to communicate internally without the need to expose them publicly, providing
  faster communication and increased throughput.'
- 'Deploying Related Services Into the Same Project: Keeping related services within
  the same project allows for private networking and easier variable management.'
- 'Use Reference Variables Where Applicable: Reference variables allow dynamic referencing
  of variables, keeping values in sync.'
- Any build or deployment logs emitted to standard output or standard error are captured
  by Railway so you can view or search for it later.
- Logs are the lines sent to stdout or stderr from your application code.
- Metrics represent measured system level performance, like CPU and RAM.
- Railway surfaces both logs and metrics for your services.
- An essential part of monitoring is through proactive notifications.
- API tokens can be created as Team Tokens, Account Tokens, or Project Tokens.
- Team tokens have access to all the team's resources, while Account tokens access
  all resources including those tied to teams.
- This requires you to have the database's appropriate shell/client installed in your
  $PATH.
- The Railway MCP Server is highly experimental. Expect bugs and missing features.
- Kickback program allows for earning credits based on template usage
- We expect all user workloads to be on Railway Metal by July 4th, 2025.
- For Stateful deployments, there is a brief 30-45 second period of downtime as the
  volume re-mounts into the new deployment.
- Railway is not responsible for data loss that occurs on re-deployment for data on
  the container's ephemeral disk.
- Railway aims to exist for a very long time.
- We advise developers to configure backups.
- Railway is SOC 2 Type I certified.
- SOC 2 Type II certification is expected by the end of July 2025.
- Railway has a robust monitoring system in place to proactively detect and address
  any potential incidents.
- We encourage our customers to report any problems they encounter through our Central
  Station, Slack, or Discord.
- Railway supports wildcard domains out-of-the-box.
- Railway offers a template directory that makes it easy to self-host open-source
  projects with just a few clicks.
- If you publish a template and others deploy it in their projects, you’ll earn a
  50% kickback of their usage costs.
- First-class support for environments so you can isolate production, staging, development,
  testing, etc.
- GitHub integration with support for provisioning isolated preview environments for
  every pull request.
- Ability to do instant rollbacks for your deployments.
- Multi-region replicas is currently available to Pro users.
- Railway auto-imports all the build configurations, deploy commands, environment
  variables from your Fly.io app repo—no manual setup needed.
- Railway requires a valid GitHub account to be linked.
- Railway automatically detects your Next.js configuration and configures the appropriate
  Node.js version.
- This guide demonstrates how to migrate your WordPress site from DigitalOcean to
  Railway's modern cloud platform.
- The template will automatically configure a MariaDB database, initial WordPress
  setup, required environment variables, and a temporary service domain.
- The first time you import variables from Heroku, you will be prompted to Allow Railway
  to connect to your Heroku account.
- Uses tokens for authentication — requires environment variable setup
- You can use Account Tokens to authenticate all CLI actions across all workspaces.
- You can only use Team tokens to authenticate actions on projects within the workspace
  the token was scoped to when it was created.
- You can use Project Tokens to authenticate project-level actions.
- You can only use one type of token at a time.
- Use SSH for debugging only
- Limit sensitive operations
- Railway SSH does not support traditional file transfer methods
- 'Connect volume to file explorer service: Deploy a simple file browser service that
  mounts the same volume as your main application. This provides web-based access
  to your files for download and upload operations.'
- 'Use CURL for file uploads: From within the SSH session, upload files to external
  services'
- Railway supports complex development workflows through environments, giving you
  isolated instances of all services in a project.
- The Observability Dashboard starts with no configured widgets
- Widgets can be stacked, repositioned and resized
- Networking changes are not yet staged and are applied immediately
- Adding databases or templates will only affect the current environment. However,
  they do not yet create a commit in the history
- Railway uses Nixpacks to build and deploy your code with zero configuration.
- Railway supports deployment from public and private Docker images.
- Supports deployment via CLI, GitHub, and Dockerfile.
- Railway requires that Fastify's .listen method for the host be set to ::.
- Railway makes it easy to define deployment configurations for your services directly
  in your project using a railway.toml or railway.json file, alongside your code.
- Uses Gunicorn as the server to start the application
- Railway supports also deployment from public and private Docker images.
- Ensure to configure environment variables such as SECRET_KEY_BASE and DATABASE_URL.
- Sidekiq uses Redis as a job queue.
- Set RAILS_ENV to production.
- Set SECRET_KEY_BASE or RAILS_MASTER_KEY to the value of your Rails app’s secret
  key.
- Set REDIS_URL to ${{Redis.REDIS_URL}} to reference the Redis database URL.
- Railway automatically detects that it’s a Rust app during deployment.
- Rocket apps need to be configured to accept external connections by listening on
  the correct address, which is typically 0.0.0.0.
- Railway will automatically detect that it's a Laravel app during deploy and run
  your app via php-fpm and nginx.
- Laravel, by default, writes logs to a directory on disk. However, on Railway’s ephemeral
  filesystem, this setup won’t persist logs.
- To ensure logs and errors appear in Railway’s console or with railway logs, update
  the LOG_CHANNEL environment variable to errorlog.
- Recommended to eject from the template after deployment
- During deployment, Railway will automatically detect that it’s a PHP app via Nixpacks
- Uses PostgreSQL as the database
- Supports deployment via CLI or GitHub
- Always use the latest stable version of PostgreSQL JDBC driver
- Railway provided domains end in .up.railway.app. Once you add your custom domain,
  please update the allowed hosts to the new URL.
- 'To deploy a Sails app, use one of the following methods: one-click deploy from
  a template, using the CLI, or from a GitHub repository.'
- After deploying, it's recommended to eject from the template to create a copy of
  the repository under your own GitHub account.
- Create a virtual environment and activate it
- Use PostgreSQL for the database
- Environment variables need to be set for database configuration
- This guide follows the assumption that you have installed Celery and Celery Beat
  in your app, the broker uses Redis and you already have a Postgres database service
  provisioned for your app.
- Railway relies on the build and start scripts to automatically build and launch
  applications
- You can also choose from a variety of React app templates created by the community.
- You can also choose from a variety of Remix app templates created by the community.
- Railway automatically detects the Dockerfile and uses it to build and deploy the
  app.
- 'Your app needs to listen on either 0.0.0.0 or :: to accept traffic. If not configured
  properly, you''ll encounter a 502 error.'
- Default database name is set to helloworld_dev, but feel free to change it to whatever
  you'd prefer.
- By default, Phoenix accepts requests on port 4000.
- Uses Distillery for deployment
- Database credentials are fetched from runtime environment variables
- This `nixpacks.toml` file instructs Railway to execute specific commands during
  the setup, install, build, and start phases of the deployment.
- 'You might encounter an error––warning: the VM is running with native name encoding
  of latin1 which may cause Elixir to malfunction as it expects utf8....'
- During the deployment process, Railway will automatically detect that it’s an Elixir
  app
- Every service has access to 10GB of ephemeral storage.
- Uses Dockerfile in the build process if it exists
- Custom Dockerfile path can be set using RAILWAY_DOCKERFILE_PATH variable
- The default mount path for Postgres is /var/lib/postgresql/data
- You can connect to the database service over the private network using the connection
  string postgresql://postgres:password@postgres.railway.internal:5432/railway
- To expose the database over the public network, set up a TCP Proxy to proxy public
  traffic to the Postgres port 5432
errors:
- 'Rate limits apply: 100 RPH for Free customers, 1000 RPH for Hobby customers, 10000
  RPH for Pro customers; custom for Enterprise.'
- 'REQUEST_LIMIT_EXCEEDED: Throttle API calls or reduce frequency'
- 'QUERY_TIMEOUT: Break down filters or add selectivity'
- Application Failed to Respond
- No Start Command Could Be Found
- 405 Method Not Allowed
- Nixpacks Was Unable to Generate a Build Plan for This App
- ENOTFOUND redis.railway.internal
- '401 Unauthorized: Recheck token validity'
- '401 Unauthorized: Recheck OAuth scopes or token expiration'
- 'Authentication failed: Check your token and try again'
- 'Service not running: Ensure your service is active before SSH'
- 'Invalid application `:sasl`: The file sasl.app does not exist or cannot be loaded.'
- 'Failed to archive release: _build/prod/rel/helloworld_distillery/releases/RELEASES:
  no such file or directory'
- Invalid application `:sasl`! The file sasl.app does not exist or cannot be loaded.
auth_info:
  mentioned_objects:
  - Project Token
  - Account Token
  - Team Token
client:
  base_url: https://railway.com
  auth:
    type: oauth2
    flow: refresh_token
source_metadata: null
