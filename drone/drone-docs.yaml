resources:
- name: user
  endpoint:
    path: /user
    method: GET
- name: drone_metrics
  endpoint:
    path: /metrics
    method: GET
    data_selector: metrics
    params: {}
- name: pipeline
  endpoint:
    path: /api/v1/pipelines
    method: POST
- name: pipeline
  endpoint:
    path: /pipeline
    method: POST
    data_selector: steps
- name: pipeline
  endpoint:
    path: /pipeline
    method: GET
    data_selector: pipelines
- name: pipeline
  endpoint:
    path: /pipeline
    method: GET
- name: pipeline
  endpoint:
    path: /pipeline/configuration
    method: GET
    data_selector: pipelines
- name: skipping
  endpoint:
    path: /pipeline/skipping
    method: GET
    data_selector: skip
- name: organization_secrets
  endpoint:
    path: /secret/organization
    method: GET
    data_selector: secrets
    params: {}
- name: sign
  endpoint:
    path: /cli/drone-sign/
    method: GET
    data_selector: yaml configuration file
    params: {}
- name: promote_build
  endpoint:
    path: /cli/build/drone-build-promote/
    method: POST
- name: install_linux
  endpoint:
    path: /cli/install/linux
    method: GET
- name: install_osx
  endpoint:
    path: /cli/install/osx
    method: GET
- name: install_windows
  endpoint:
    path: /cli/install/windows
    method: GET
- name: plugin_inputs
  endpoint:
    path: /plugins/inputs
    method: GET
    data_selector: settings
    params: {}
- name: plugin_distribution
  endpoint:
    path: /plugins/distribution
    method: GET
    data_selector: distribution
    params: {}
- name: plugin_inputs
  endpoint:
    path: /plugins/inputs
    method: GET
    data_selector: settings
    params: {}
- name: plugin_card
  endpoint:
    path: /plugins/cards
    method: GET
    data_selector: cards
    params: {}
- name: event
  endpoint:
    path: /
    method: POST
- name: user_created
  endpoint:
    path: /webhooks/user/created
    method: POST
    data_selector: action
    params: {}
- name: user_deleted
  endpoint:
    path: /webhooks/user/deleted
    method: POST
    data_selector: action
    params: {}
- name: repository_activated
  endpoint:
    path: /webhooks/repository/activated
    method: POST
    data_selector: action
    params: {}
- name: repository_deactivated
  endpoint:
    path: /webhooks/repository/deactivated
    method: POST
    data_selector: action
    params: {}
- name: build_created
  endpoint:
    path: /webhooks/build/created
    method: POST
    data_selector: action
    params: {}
- name: build_updated
  endpoint:
    path: /webhooks/build/updated
    method: POST
    data_selector: action
    params: {}
- name: build_completed
  endpoint:
    path: /webhooks/build/completed
    method: POST
    data_selector: action
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: webhook_receiver
  endpoint:
    path: /webhooks
    method: POST
- name: admission_request
  endpoint:
    path: /admission
    method: POST
    data_selector: user
    params:
      DRONE_ADMISSION_PLUGIN_ENDPOINT: endpoint_url
      DRONE_ADMISSION_PLUGIN_SECRET: secret_token
- name: configuration_extension
  endpoint:
    path: /extensions/configuration
    method: POST
- name: Request
  endpoint:
    path: /extensions/conversion/request
    method: POST
    data_selector: Request
- name: Response
  endpoint:
    path: /extensions/conversion/response
    method: GET
    data_selector: Config
- name: Request
  endpoint:
    path: /request
    method: POST
    data_selector: environment_variables
- name: registry
  endpoint:
    path: /registry
    method: POST
- name: external_secret
  endpoint:
    path: /secrets/data/docker
    method: POST
    data_selector: secret
- name: request
  endpoint:
    path: /validate
    method: POST
    data_selector: message
- name: pipeline
  endpoint:
    path: /v1/pipelines
    method: POST
    data_selector: pipeline
    params: {}
- name: pipeline
  endpoint:
    path: /docker/pipeline
    method: GET
- name: pipeline
  endpoint:
    path: /pipeline
    method: GET
- name: pipeline
  endpoint:
    path: /api/v1/pipeline
    method: GET
- name: pipeline
  endpoint:
    path: /
    method: GET
- name: build_info
  endpoint:
    path: /api/builds/build_info/
    method: GET
- name: build_list
  endpoint:
    path: /api/builds/build_list/
    method: GET
- name: build_logs
  endpoint:
    path: /api/builds/build_logs/
    method: GET
- name: build_create
  endpoint:
    path: /api/builds/build_create/
    method: POST
- name: build_approve
  endpoint:
    path: /api/builds/build_approve/
    method: POST
- name: build_decline
  endpoint:
    path: /api/builds/build_decline/
    method: POST
- name: build_promote
  endpoint:
    path: /api/builds/build_promote/
    method: POST
- name: build_restart
  endpoint:
    path: /api/builds/build_start/
    method: POST
- name: build_stop
  endpoint:
    path: /api/builds/build_stop/
    method: POST
- name: cron
  endpoint:
    path: /api/cron
    method: GET
    data_selector: tasks
    params: {}
- name: repo_info
  endpoint:
    path: /api/repos/repo_info
    method: GET
- name: repo_list
  endpoint:
    path: /api/repos/repo_list
    method: GET
- name: repo_create
  endpoint:
    path: /api/repos/repo_create
    method: POST
- name: repo_update
  endpoint:
    path: /api/repos/repo_update
    method: PUT
- name: repo_delete
  endpoint:
    path: /api/repos/repo_delete
    method: DELETE
- name: secret_create
  endpoint:
    path: /api/secrets/secret_create/
    method: POST
- name: secret_delete
  endpoint:
    path: /api/secrets/secret_delete/
    method: DELETE
- name: secret_info
  endpoint:
    path: /api/secrets/secret_info/
    method: GET
- name: secret_list
  endpoint:
    path: /api/secrets/secret_list/
    method: GET
- name: secret_update
  endpoint:
    path: /api/secrets/secret_update/
    method: PUT
- name: current_user_feed
  endpoint:
    path: /api/user/user_builds
    method: GET
- name: current_user_info
  endpoint:
    path: /api/user/user_info
    method: GET
- name: current_user_repos
  endpoint:
    path: /api/user/user_repos
    method: GET
- name: current_user_sync
  endpoint:
    path: /api/user/user_sync
    method: GET
- name: user_create
  endpoint:
    path: /api/users/users_create
    method: POST
- name: user_delete
  endpoint:
    path: /api/users/users_delete
    method: DELETE
- name: user_info
  endpoint:
    path: /api/users/users_info
    method: GET
- name: user_list
  endpoint:
    path: /api/users/users_list
    method: GET
- name: user_update
  endpoint:
    path: /api/users/users_update
    method: PUT
- name: user_create
  endpoint:
    path: /api/users/users_create/
    method: POST
    data_selector: ''
    params: {}
- name: user_delete
  endpoint:
    path: /api/users/users_delete/
    method: DELETE
    data_selector: ''
    params: {}
- name: user_info
  endpoint:
    path: /api/users/users_info/
    method: GET
    data_selector: ''
    params: {}
- name: user_list
  endpoint:
    path: /api/users/users_list/
    method: GET
    data_selector: ''
    params: {}
- name: user_update
  endpoint:
    path: /api/users/users_update/
    method: PUT
    data_selector: ''
    params: {}
- name: encrypt_secret
  endpoint:
    path: /encrypt
    method: POST
- name: pipeline_execution
  endpoint:
    path: /exec
    method: POST
- name: log_view
  endpoint:
    path: /log/view
    method: GET
    data_selector: logs
- name: log_purge
  endpoint:
    path: /log/purge
    method: POST
    data_selector: logs
- name: drone_jsonnet
  endpoint:
    path: /drone/jsonnet
    method: GET
    data_selector: records
notes:
- Authorization to the API is performed using the HTTP Authorization header.
- Drone server upgrades are meant to be simple and safe.
- If your server is public you should consider using Lets Encrypt.
- Drone caches generated certificates on disk at /data/golang-autocert.
- Drone creates cookies with a default timeout of 30 days (*720h*).
- You can customize the cookie timeout through the environment.
- These parameters should only be used when SSL is enabled.
- The default log level is INFO.
- 'You can enable more detailed debug logging with the configuration parameter: DRONE_LOGS_DEBUG=true.'
- Logs are written to stderr in json-format.
- Access to the metrics endpoint is restricted and requires an authorization token.
- When running the Drone server image, the timezone can be set with an environment
  variable TZ={Area/Location} using a valid TZ database name
- You must have admin privileges to enable the repository.
- The command line runner does not have read access to secrets stored in your server.
- The command line runner uses the dotenv package to read and parse the secrets file.
- Conditions can be used to limit pipeline step execution at runtime.
- Triggers use glob pattern matching, not regular expressions.
- Secrets are not exposed to pull requests by default.
- Organization secrets are used to store and manage sensitive information, such as
  passwords, tokens, and ssh keys.
- This feature is disabled on Drone Cloud. This feature is only available when self-hosting.
- The system administrator role is required to create, update or delete organization
  secrets.
- Secrets are not exposed to pull requests that originate from forks.
- Only Yaml files can be signed and verified. The system cannot sign and verify Starlark
  or Jsonnet files.
- Cron scheduling is disabled on Drone Cloud. This feature is only available when
  self-hosting.
- The cron scheduler is approximate and executes jobs in hourly batches.
- Templates can be used by setting the kind to ’template’, the name of the base template
  to load, and a set of freeform template inputs in their drone.yml file
- Plugins are Docker containers configured as steps in your pipeline.
- Plugins parameters are passed to the plugin container as environment variables.
- Plugins parameters are defined in the settings section of the pipeline step and
  are passed to the plugin container as environment variables.
- Plugin Cards allow Drone users to get high level insights into their build’s execution.
- Different plugins will have different visualizations depending on the type of data
  presented.
- Create a shared secret used to sign the http request.
- The http request is signed per the http signatures draft specification using the
  shared secret.
- Uses OAuth2 with refresh token — requires setup of connected app in api
- Some objects like Contact may return nulls in deeply nested fields
- Create a shared secret used to sign the http request
- The http request is signed per the http signatures draft specification use the shared
  secret.
- The environment extension receives an HTTP request to return a map of environment
  variables.
- The HTTP request is signed per the http signatures draft specification using the
  shared secret.
- The kind must be set to 'pipeline'.
- The type must be set to 'digitalocean'.
- Authorization to the API is performed using the HTTP Authorization header. Provide
  your token as the bearer token value.
- The Drone command line tools are used to interact with the Drone from the command
  line
- The command encrypts a secret.
- The resulting string can be added to your pipeline.
- This subcommand executes a local build.
errors:
- Secrets are not exposed to pull requests by default.
- 'REQUEST_LIMIT_EXCEEDED: Throttle API calls or reduce frequency'
- 'QUERY_TIMEOUT: Break down filters or add selectivity'
- '401 Unauthorized: Recheck OAuth scopes or token expiration'
- '400: yaml failed validation'
- '498: yaml failed validation and should be skipped'
- '499: yaml failed validation and should be blocked'
auth_info:
  mentioned_objects:
  - OauthToken
  - AuthProvider
  - NamedCredential
  - authorization token
client:
  base_url: http://localhost:8080/api
  auth:
    location: header
    header_name: Authorization
source_metadata: null
