resources:
- name: tabular
  endpoint:
    path: /datasets/Inc/train.csv
    method: GET
    data_selector: records
    params: {}
- name: multimodal_text_classification
  endpoint:
    path: /glue/sst/train.parquet
    method: GET
    data_selector: records
    params: {}
- name: multimodal_image_classification
  endpoint:
    path: /object_detection_dataset/tiny_motorbike_coco.zip
    method: GET
    data_selector: records
    params: {}
- name: time_series
  endpoint:
    path: /datasets/timeseries/m4_hourly/train.csv
    method: GET
    data_selector: records
    params: {}
- name: Mitra
  endpoint:
    path: /mitra
    method: GET
    data_selector: data
    params: {}
- name: calibrate_decision_threshold
  endpoint:
    path: /calibrate_decision_threshold
    method: GET
    data_selector: data
    params:
      metric: None
      model: best
      decision_thresholds: 25
      secondary_decision_thresholds: 19
      subsample_size: 1000000
      verbose: true
- name: clone
  endpoint:
    path: /clone
    method: GET
- name: clone
  endpoint:
    path: /tabular/predictor/clone
    method: POST
- name: clone_for_deployment
  endpoint:
    path: /autogluon/tabular/predictor/clone_for_deployment
    method: GET
    data_selector: records
    params: {}
- name: clone_for_deployment
  endpoint:
    path: /clone_for_deployment
    method: GET
    data_selector: records
- name: TabularPredictor
  endpoint:
    path: /autogluon/tabular/TabularPredictor
    method: GET
- name: delete_models
  endpoint:
    path: /TabularPredictor.delete_models
    method: DELETE
- name: delete_models
  endpoint:
    path: /TabularPredictor/delete_models
    method: DELETE
    data_selector: models
- name: disk_usage
  endpoint:
    path: /TabularPredictor.disk_usage
    method: GET
    data_selector: records
    params: {}
- name: disk_usage_per_file
  endpoint:
    path: /TabularPredictor/disk_usage_per_file
    method: GET
    data_selector: Series
    params:
      sort_by: size
      include_path_in_name: false
- name: distill
  endpoint:
    path: /tabular/predictor/distill
    method: POST
- name: TabularPredictor.evaluate
  endpoint:
    path: /TabularPredictor/evaluate
    method: GET
    data_selector: records
- name: evaluate_predictions
  endpoint:
    path: /_modules/autogluon/tabular/predictor/predictor.html#TabularPredictor.evaluate_predictions
    method: GET
    data_selector: returns
    params: {}
- name: TabularPredictor
  endpoint:
    path: /autogluon/tabular/TabularPredictor
    method: GET
    data_selector: records
    params: {}
- name: features
  endpoint:
    path: /TabularPredictor/features
    method: GET
    data_selector: feature_names
    params:
      feature_stage: original
- name: hyperparameter_tune_kwargs
  endpoint:
    params:
      num_trials: 5
      scheduler: local
      searcher: auto
- name: fit
  endpoint:
    path: /fit
    method: POST
    data_selector: results
    params: {}
- name: fit_extra
  endpoint:
    path: /fit_extra
    method: POST
    data_selector: records
- name: TabularPredictor.fit_pseudolabel
  endpoint:
    path: /TabularPredictor/fit_pseudolabel
    method: GET
- name: fit_pseudolabel
  endpoint:
    path: /fit_pseudolabel
    method: POST
    data_selector: self
- name: fit_summary
  endpoint:
    path: /fit_summary
    method: GET
    data_selector: dict
- name: fit_weighted_ensemble
  endpoint:
    path: /fit_weighted_ensemble
    method: POST
    data_selector: model_names
    params:
      base_models: null
      name_suffix: Best
      expand_pareto_frontier: false
      time_limit: null
      refit_full: false
      num_cpus: auto
      num_gpus: auto
- name: TabularPredictor
  endpoint:
    path: /autogluon/tabular/TabularPredictor
    method: GET
    data_selector: records
- name: TimeSeriesPredictor
  endpoint:
    path: /autogluon/timeseries/TimeSeriesPredictor
    method: GET
    data_selector: records
- name: MultiModalPredictor
  endpoint:
    path: /autogluon/multimodal/MultiModalPredictor
    method: GET
    data_selector: records
- name: leaderboard
  endpoint:
    path: /leaderboard
    method: GET
    data_selector: DataFrame
    params: {}
- name: learning_curves
  endpoint:
    path: /TabularPredictor/learning_curves
    method: GET
    data_selector: metadata
    params: {}
- name: TabularPredictor
  endpoint:
    path: /autogluon/tabular
    method: GET
    data_selector: records
- name: TabularPredictor
  endpoint:
    path: /autogluon/tabular/TabularPredictor
    method: GET
    data_selector: records
    params: {}
- name: MultiModalPredictor
  endpoint:
    path: /autogluon/multimodal/MultiModalPredictor
    method: GET
    data_selector: records
    params: {}
- name: TimeSeriesPredictor
  endpoint:
    path: /autogluon/timeseries/TimeSeriesPredictor
    method: GET
    data_selector: records
    params: {}
- name: load_data_internal
  endpoint:
    path: /TabularPredictor/load_data_internal
    method: GET
    data_selector: data
    params:
      data: train
      return_X: true
      return_y: true
- name: load_log
  endpoint:
    path: /TabularPredictor/load_log
    method: GET
    data_selector: list[str]
    params:
      predictor_path: null
      log_file_path: null
- name: model_failures
  endpoint:
    path: /autogluon/tabular/predictor/model_failures
    method: GET
    data_selector: model_failures_df
    params:
      verbose: 'False'
- name: model_hyperparameters
  endpoint:
    path: /tabular/predictor/model_hyperparameters
    method: GET
    data_selector: model_hyperparameters
- name: model_info
  endpoint:
    path: /model_info
    method: GET
    data_selector: model_info
- name: TabularPredictor
  endpoint:
    path: /autogluon/tabular/TabularPredictor
    method: GET
    data_selector: records
- name: MultiModalPredictor
  endpoint:
    path: /autogluon/multimodal/MultiModalPredictor
    method: GET
    data_selector: records
- name: TimeSeriesPredictor
  endpoint:
    path: /autogluon/timeseries/TimeSeriesPredictor
    method: GET
    data_selector: records
- name: persist
  endpoint:
    path: /TabularPredictor/persist
    method: GET
- name: persist
  endpoint:
    path: /TabularPredictor.persist
    method: POST
    data_selector: list[str]
    params: {}
- name: plot_ensemble_model
  endpoint:
    path: /plot_ensemble_model
    method: GET
    data_selector: records
- name: predict
  endpoint:
    path: /tabular/predict
    method: POST
    data_selector: predictions
- name: predict
  endpoint:
    path: /predict
    method: POST
    data_selector: predictions
- name: predict_from_proba
  endpoint:
    path: /predict_from_proba
    method: GET
    data_selector: predictions
    params:
      decision_threshold: None
- name: predict_from_proba
  endpoint:
    path: /predict_from_proba
    method: GET
- name: predict_multi
  endpoint:
    path: /predict_multi
    method: GET
- name: predict_multi
  endpoint:
    path: /tabular/predict_multi
    method: GET
    data_selector: predictions
    params: {}
- name: predict_oof
  endpoint:
    path: /tabular/predict_oof
    method: GET
    data_selector: predictions
    params: {}
- name: predict_proba
  endpoint:
    path: /predict_proba
    method: POST
    data_selector: predictions
    params: {}
- name: predict_proba
  endpoint:
    path: /predict_proba
    method: GET
    data_selector: proba
- name: predict_proba_multi
  endpoint:
    path: /predict_proba_multi
    method: POST
    data_selector: dict
    params: {}
- name: TabularPredictor
  endpoint:
    path: /autogluon/tabular/TabularPredictor
    method: GET
    data_selector: records
    params: {}
- name: refit_full
  endpoint:
    path: /refit_full
    method: GET
- name: refit_full
  endpoint:
    path: /autogluon/tabular/predictor/refit_full
    method: POST
    data_selector: model
    params:
      model: all
      set_best_to_refit_full: true
      train_data_extra: null
      num_cpus: auto
      num_gpus: auto
      fit_strategy: auto
- name: TabularPredictor
  endpoint:
    path: /TabularPredictor.save
    method: GET
    data_selector: records
    params: {}
- name: TabularPredictor
  endpoint:
    path: /autogluon/tabular
    method: GET
    data_selector: records
- name: MultiModalPredictor
  endpoint:
    path: /autogluon/multimodal
    method: GET
    data_selector: records
- name: TimeSeriesPredictor
  endpoint:
    path: /autogluon/timeseries
    method: GET
    data_selector: records
- name: TabularPredictor
  endpoint:
    path: /autogluon/tabular/TabularPredictor
    method: GET
    data_selector: records
- name: TabularPredictor
  endpoint:
    path: /autogluon/tabular/TabularPredictor
    method: GET
    data_selector: records
- name: MultiModalPredictor
  endpoint:
    path: /autogluon/multimodal/MultiModalPredictor
    method: GET
    data_selector: records
- name: TimeSeriesPredictor
  endpoint:
    path: /autogluon/timeseries/TimeSeriesPredictor
    method: GET
    data_selector: records
- name: simulation_artifact
  endpoint:
    path: /autogluon/tabular/predictor/simulation_artifact
    method: GET
    data_selector: simulation_dict
    params:
      test_data: None
- name: transform_features
  endpoint:
    path: /autogluon/tabular/predictor/transform_features
    method: POST
    data_selector: data
    params: {}
- name: TabularPredictor
  endpoint:
    path: /autogluon.tabular.TabularPredictor
    method: GET
    data_selector: records
    params: {}
- name: MultiModalPredictor
  endpoint:
    path: /autogluon.multimodal.MultiModalPredictor
    method: GET
    data_selector: records
    params: {}
- name: TimeSeriesPredictor
  endpoint:
    path: /autogluon.timeseries.TimeSeriesPredictor
    method: GET
    data_selector: records
    params: {}
- name: unpersist
  endpoint:
    path: /TabularPredictor/unpersist
    method: GET
- name: LGBModel
  endpoint:
    path: /autogluon/tabular/models/LGBModel
    method: GET
- name: CatBoostModel
  endpoint:
    path: /autogluon/tabular/models/CatBoostModel
    method: GET
- name: XGBoostModel
  endpoint:
    path: /autogluon/tabular/models/XGBoostModel
    method: GET
- name: RealMLPModel
  endpoint:
    path: /autogluon/tabular/models/RealMLPModel
    method: GET
- name: TabMModel
  endpoint:
    path: /autogluon/tabular/models/TabMModel
    method: GET
- name: MitraModel
  endpoint:
    path: /autogluon/tabular/models/MitraModel
    method: GET
- name: TabICLModel
  endpoint:
    path: /autogluon/tabular/models/TabICLModel
    method: GET
- name: TabPFNV2Model
  endpoint:
    path: /autogluon/tabular/models/TabPFNV2Model
    method: GET
- name: RFModel
  endpoint:
    path: /autogluon/tabular/models/RFModel
    method: GET
- name: XTModel
  endpoint:
    path: /autogluon/tabular/models/XTModel
    method: GET
- name: KNNModel
  endpoint:
    path: /autogluon/tabular/models/KNNModel
    method: GET
- name: LinearModel
  endpoint:
    path: /autogluon/tabular/models/LinearModel
    method: GET
- name: TabularNeuralNetTorchModel
  endpoint:
    path: /autogluon/tabular/models/TabularNeuralNetTorchModel
    method: GET
- name: NNFastAiTabularModel
  endpoint:
    path: /autogluon/tabular/models/NNFastAiTabularModel
    method: GET
- name: LGBModel
  endpoint:
    path: /autogluon/tabular/models/lgb/lgb_model
    method: GET
- name: CatBoostModel
  endpoint:
    path: /autogluon/tabular/models/catboost/catboost_model
    method: GET
- name: XGBoostModel
  endpoint:
    path: /autogluon/tabular/models/xgboost/xgboost_model
    method: GET
- name: RealMLPModel
  endpoint:
    path: /autogluon/tabular/models/realmlp/realmlp_model
    method: GET
- name: TabMModel
  endpoint:
    path: /autogluon/tabular/models/tabm/tabm_model
    method: GET
- name: MitraModel
  endpoint:
    path: /autogluon/tabular/models/mitra/mitra_model
    method: GET
- name: TabICLModel
  endpoint:
    path: /autogluon/tabular/models/tabicl/tabicl_model
    method: GET
- name: TabPFNV2Model
  endpoint:
    path: /autogluon/tabular/models/tabpfnv2/tabpfnv2_model
    method: GET
- name: AbstractModel
  endpoint:
    path: /autogluon/tabular/models/AbstractModel
    method: GET
    data_selector: records
- name: LGBModel
  endpoint:
    path: /autogluon/tabular/models/LGBModel
    method: GET
    data_selector: records
- name: CatBoostModel
  endpoint:
    path: /autogluon/tabular/models/CatBoostModel
    method: GET
    data_selector: records
- name: XGBoostModel
  endpoint:
    path: /autogluon/tabular/models/XGBoostModel
    method: GET
    data_selector: records
- name: RealMLPModel
  endpoint:
    path: /autogluon/tabular/models/RealMLPModel
    method: GET
    data_selector: records
- name: TabMModel
  endpoint:
    path: /autogluon/tabular/models/TabMModel
    method: GET
    data_selector: records
- name: MitraModel
  endpoint:
    path: /autogluon/tabular/models/MitraModel
    method: GET
    data_selector: records
- name: TabICLModel
  endpoint:
    path: /autogluon/tabular/models/TabICLModel
    method: GET
    data_selector: records
- name: TabPFNV2Model
  endpoint:
    path: /autogluon/tabular/models/TabPFNV2Model
    method: GET
    data_selector: records
- name: RFModel
  endpoint:
    path: /autogluon/tabular/models/RFModel
    method: GET
    data_selector: records
- name: XTModel
  endpoint:
    path: /autogluon/tabular/models/XTModel
    method: GET
    data_selector: records
- name: KNNModel
  endpoint:
    path: /autogluon/tabular/models/KNNModel
    method: GET
    data_selector: records
- name: LinearModel
  endpoint:
    path: /autogluon/tabular/models/LinearModel
    method: GET
    data_selector: records
- name: TabularNeuralNetTorchModel
  endpoint:
    path: /autogluon/tabular/models/TabularNeuralNetTorchModel
    method: GET
    data_selector: records
- name: NNFastAiTabularModel
  endpoint:
    path: /autogluon/tabular/models/NNFastAiTabularModel
    method: GET
    data_selector: records
- name: MultiModalPredictorModel
  endpoint:
    path: /autogluon/tabular/models/MultiModalPredictorModel
    method: GET
    data_selector: records
- name: TextPredictorModel
  endpoint:
    path: /autogluon/tabular/models/TextPredictorModel
    method: GET
    data_selector: records
- name: ImagePredictorModel
  endpoint:
    path: /autogluon/tabular/models/ImagePredictorModel
    method: GET
    data_selector: records
- name: TabPFNv2
  endpoint:
    path: /autogluon/tabular/models/TabPFNV2Model
    method: GET
- name: RFModel
  endpoint:
    path: /autogluon/tabular/models/RFModel
    method: GET
- name: XTModel
  endpoint:
    path: /autogluon/tabular/models/XTModel
    method: GET
- name: KNNModel
  endpoint:
    path: /autogluon/tabular/models/KNNModel
    method: GET
- name: LinearModel
  endpoint:
    path: /autogluon/tabular/models/LinearModel
    method: GET
- name: TabularNeuralNetTorchModel
  endpoint:
    path: /autogluon/tabular/models/TabularNeuralNetTorchModel
    method: GET
- name: NNFastAiTabularModel
  endpoint:
    path: /autogluon/tabular/models/NNFastAiTabularModel
    method: GET
- name: MultiModalPredictorModel
  endpoint:
    path: /autogluon/tabular/models/MultiModalPredictorModel
    method: GET
- name: TextPredictorModel
  endpoint:
    path: /autogluon/tabular/models/TextPredictorModel
    method: GET
- name: ImagePredictorModel
  endpoint:
    path: /autogluon/tabular/models/ImagePredictorModel
    method: GET
- name: BaggedEnsembleModel
  endpoint:
    path: /autogluon/core/models/BaggedEnsembleModel
    method: GET
- name: StackerEnsembleModel
  endpoint:
    path: /autogluon/core/models/StackerEnsembleModel
    method: GET
- name: WeightedEnsembleModel
  endpoint:
    path: /autogluon/core/models/WeightedEnsembleModel
    method: GET
- name: FTTransformerModel
  endpoint:
    path: /autogluon/tabular/models/FTTransformerModel
    method: GET
- name: FastTextModel
  endpoint:
    path: /autogluon/tabular/models/FastTextModel
    method: GET
- name: dump_model
  endpoint:
    path: /MultiModalPredictor/dump_model
    method: POST
    data_selector: save_path
    params: {}
- name: dump_model
  endpoint:
    path: /dump_model
    method: GET
- name: evaluate
  endpoint:
    path: /evaluate
    method: GET
- name: export_onnx
  endpoint:
    path: /export_onnx
    method: GET
- name: extract_embedding
  endpoint:
    path: /extract_embedding
    method: GET
- name: fit
  endpoint:
    path: /fit
    method: POST
- name: fit_summary
  endpoint:
    path: /fit_summary
    method: GET
- name: get_num_gpus
  endpoint:
    path: /get_num_gpus
    method: GET
- name: list_supported_models
  endpoint:
    path: /list_supported_models
    method: GET
- name: load
  endpoint:
    path: /load
    method: GET
- name: optimize_for_inference
  endpoint:
    path: /optimize_for_inference
    method: POST
- name: predict
  endpoint:
    path: /predict
    method: POST
- name: predict_proba
  endpoint:
    path: /predict_proba
    method: POST
- name: save
  endpoint:
    path: /save
    method: POST
- name: set_num_gpus
  endpoint:
    path: /set_num_gpus
    method: POST
- name: set_verbosity
  endpoint:
    path: /set_verbosity
    method: POST
- name: evaluate
  endpoint:
    path: /autogluon/multimodal/predictor/evaluate
    method: POST
    data_selector: metrics
- name: export_onnx
  endpoint:
    path: /multimodal/predictor/export_onnx
    method: POST
    data_selector: model_export
    params: {}
- name: extract_embedding
  endpoint:
    path: /extract_embedding
    method: GET
- name: extract_embedding
  endpoint:
    path: /autogluon/multimodal/predictor/extract_embedding
    method: POST
    data_selector: embeddings
    params: {}
- name: fit_summary
  endpoint:
    path: /fit_summary
    method: GET
    data_selector: summary
    params: {}
- name: fit_summary
  endpoint:
    path: /multimodal/predictor/fit_summary
    method: GET
- name: list_supported_models
  endpoint:
    path: /list_supported_models
    method: GET
- name: list_supported_models
  endpoint:
    path: /multimodal/predictor/list_supported_models
    method: GET
    data_selector: model_names
    params:
      pretrained: 'True'
- name: load
  endpoint:
    path: /multimodal/predictor/load
    method: POST
    data_selector: predictor_object
    params:
      path: directory to load the predictor object
      resume: Whether to resume training from last.ckpt
      verbosity: Verbosity levels range from 0 to 4
- name: load
  endpoint:
    path: /load
    method: GET
- name: fit
  endpoint:
    path: /fit
    method: GET
- name: predict
  endpoint:
    path: /predict
    method: GET
- name: optimize_for_inference
  endpoint:
    path: /optimize_for_inference
    method: POST
    data_selector: onnx_module
    params: {}
- name: predict
  endpoint:
    path: /multimodal/predict
    method: POST
    data_selector: predictions
- name: predict
  endpoint:
    path: /predict
    method: POST
- name: predict_proba
  endpoint:
    path: /predict_proba
    method: POST
- name: MultiModalPredictor
  endpoint:
    path: /MultiModalPredictor
    method: POST
    data_selector: model
    params: {}
- name: save
  endpoint:
    path: /multimodal/predictor/save
    method: POST
    data_selector: parameters
    params: {}
- name: set_num_gpus
  endpoint:
    path: /set_num_gpus
    method: POST
- name: set_verbosity
  endpoint:
    path: /set_verbosity
    method: POST
- name: TimeSeriesDataFrame
  endpoint:
    path: /timeseries/dataframe
    method: GET
    data_selector: records
    params: {}
- name: evaluate
  endpoint:
    path: /evaluate
    method: POST
    data_selector: scores_dict
- name: evaluate
  endpoint:
    path: /TimeSeriesPredictor/evaluate
    method: GET
    data_selector: records
    params: {}
- name: feature_importance
  endpoint:
    path: /TimeSeriesPredictor/feature_importance
    method: GET
    data_selector: records
    params: {}
- name: fit
  endpoint:
    path: /TimeSeriesPredictor/fit
    method: POST
    data_selector: records
    params: {}
- name: fit_summary
  endpoint:
    path: /TimeSeriesPredictor/fit_summary
    method: GET
    data_selector: records
    params: {}
- name: info
  endpoint:
    path: /TimeSeriesPredictor/info
    method: GET
    data_selector: records
    params: {}
- name: leaderboard
  endpoint:
    path: /TimeSeriesPredictor/leaderboard
    method: GET
    data_selector: records
    params: {}
- name: load
  endpoint:
    path: /TimeSeriesPredictor/load
    method: GET
    data_selector: records
    params: {}
- name: make_future_data_frame
  endpoint:
    path: /TimeSeriesPredictor/make_future_data_frame
    method: GET
    data_selector: records
    params: {}
- name: model_names
  endpoint:
    path: /TimeSeriesPredictor/model_names
    method: GET
    data_selector: records
    params: {}
- name: persist
  endpoint:
    path: /TimeSeriesPredictor/persist
    method: POST
    data_selector: records
    params: {}
- name: plot
  endpoint:
    path: /TimeSeriesPredictor/plot
    method: GET
    data_selector: records
    params: {}
- name: predict
  endpoint:
    path: /TimeSeriesPredictor/predict
    method: POST
    data_selector: records
    params: {}
- name: refit_full
  endpoint:
    path: /TimeSeriesPredictor/refit_full
    method: POST
    data_selector: records
    params: {}
- name: save
  endpoint:
    path: /TimeSeriesPredictor/save
    method: POST
    data_selector: records
    params: {}
- name: unpersist
  endpoint:
    path: /TimeSeriesPredictor/unpersist
    method: DELETE
    data_selector: records
    params: {}
- name: TimeSeriesPredictor
  endpoint:
    path: /TimeSeriesPredictor/feature_importance
    method: GET
- name: feature_importance
  endpoint:
    path: /TimeSeriesPredictor/feature_importance
    method: GET
    data_selector: importance
    params:
      subsample_size: 50
      method: permutation
      random_seed: 123
      include_confidence_band: true
      confidence_level: 0.99
- name: fit
  endpoint:
    path: /TimeSeriesPredictor.fit
    method: POST
    data_selector: data
- name: evaluate
  endpoint:
    path: /TimeSeriesPredictor.evaluate
    method: POST
    data_selector: evaluation
- name: predict
  endpoint:
    path: /TimeSeriesPredictor.predict
    method: POST
    data_selector: predictions
- name: fit
  endpoint:
    path: /fit
    method: POST
    data_selector: result
    params:
      num_val_windows: 1
      refit_full: false
      enable_ensemble: true
      random_seed: 123
- name: fit_summary
  endpoint:
    path: /fit_summary
    method: GET
    data_selector: summary_dict
- name: fit_summary
  endpoint:
    path: /fit_summary
    method: GET
    data_selector: summary
    params: {}
- name: TimeSeriesPredictor
  endpoint:
    path: /TimeSeriesPredictor
    method: GET
    data_selector: records
- name: leaderboard
  endpoint:
    path: /leaderboard
    method: GET
- name: leaderboard
  endpoint:
    path: /TimeSeriesPredictor/leaderboard
    method: GET
    data_selector: leaderboard
    params: {}
- name: forecast_horizon
  endpoint:
    data_selector: item_id, timestamp
- name: make_future_data_frame
  endpoint:
    path: /make_future_data_frame
    method: GET
    data_selector: data
    params: {}
- name: model_names
  endpoint:
    path: /model_names
    method: GET
- name: persist
  endpoint:
    path: /autogluon/timeseries/predictor/persist
    method: POST
    data_selector: list_of_models
    params:
      models: best
      with_ancestors: true
- name: persist
  endpoint:
    path: /TimeSeriesPredictor/persist
    method: POST
- name: plot
  endpoint:
    path: /TimeSeriesPredictor/plot
    method: POST
    data_selector: data
    params:
      max_num_item_ids: 8
- name: plot
  endpoint:
    path: /TimeSeriesPredictor/plot
    method: GET
- name: refit_full
  endpoint:
    path: /TimeSeriesPredictor/refit_full
    method: GET
- name: refit_full
  endpoint:
    path: /autogluon/timeseries/predictor/refit_full
    method: GET
    data_selector: Dict[str, str]
- name: TimeSeriesPredictor
  endpoint:
    path: /autogluon/timeseries/TimeSeriesPredictor
    method: GET
    data_selector: records
- name: unpersist
  endpoint:
    path: /TimeSeriesPredictor/unpersist
    method: GET
- name: TimeSeriesDataFrame
  endpoint:
    path: /autogluon/timeseries
    method: GET
    data_selector: records
    params: {}
- name: convert_frequency
  endpoint:
    path: /convert_frequency
    method: POST
    data_selector: ts_df
    params: {}
- name: TimeSeriesDataFrame
  endpoint:
    path: from_data_frame
    method: GET
    data_selector: data
- name: from_data_frame
  endpoint:
    path: /TimeSeriesDataFrame/from_data_frame
    method: POST
    data_selector: ts_df
    params: {}
- name: TimeSeriesDataFrame
  endpoint:
    path: /TimeSeriesDataFrame
    method: GET
    data_selector: data
    params: {}
- name: iterable_dataset
  endpoint:
    path: /autogluon/timeseries/dataset/ts_dataframe/from_iterable_dataset
    method: GET
    data_selector: ts_df
    params: {}
- name: TimeSeriesDataFrame
  endpoint:
    path: /path/to/timeseriesdataframe
    method: POST
    data_selector: ts_df
- name: from_pickle
  endpoint:
    path: /autogluon/timeseries/dataset/ts_dataframe/from_pickle
    method: GET
    data_selector: ts_df
    params:
      filepath_or_buffer: Any
- name: get_model_inputs_for_scoring
  endpoint:
    path: /get_model_inputs_for_scoring
    method: GET
    data_selector: past_data
    params:
      prediction_length: int
      known_covariates_names: List[str] | None
- name: infer_frequency
  endpoint:
    path: TimeSeriesDataFrame/infer_frequency
    method: GET
    data_selector: freq
    params: {}
- name: TimeSeriesDataFrame
  endpoint:
    path: /timeseries/dataframe
    method: GET
    data_selector: data
    params: {}
- name: slice_by_time
  endpoint:
    path: /slice_by_time
    method: GET
    data_selector: ts_df
    params: {}
- name: slice_by_timestep
  endpoint:
    path: /slice_by_timestep
    method: GET
    data_selector: ts_df
    params: {}
- name: split_by_time
  endpoint:
    path: /TimeSeriesDataFrame/split_by_time
    method: GET
    data_selector: data_before, data_after
    params:
      cutoff_time: pd.Timestamp
- name: DummyFeatureGenerator
  endpoint:
    path: /autogluon/features/generators/DummyFeatureGenerator
    method: GET
    data_selector: records
    params: {}
- name: FillNaFeatureGenerator
  endpoint:
    path: /autogluon/features/generators/FillNaFeatureGenerator
    method: GET
    data_selector: records
    params: {}
- name: IdentityFeatureGenerator
  endpoint:
    path: /autogluon/features/generators/IdentityFeatureGenerator
    method: GET
    data_selector: records
    params: {}
- name: LabelEncoderFeatureGenerator
  endpoint:
    path: /autogluon/features/generators/LabelEncoderFeatureGenerator
    method: GET
    data_selector: records
    params: {}
- name: CategoryMemoryMinimizeFeatureGenerator
  endpoint:
    path: /autogluon/features/generators/CategoryMemoryMinimizeFeatureGenerator
    method: GET
    data_selector: records
    params: {}
- name: NumericMemoryMinimizeFeatureGenerator
  endpoint:
    path: /autogluon/features/generators/NumericMemoryMinimizeFeatureGenerator
    method: GET
    data_selector: records
    params: {}
- name: RenameFeatureGenerator
  endpoint:
    path: /autogluon/features/generators/RenameFeatureGenerator
    method: GET
    data_selector: records
    params: {}
- name: TextNgramFeatureGenerator
  endpoint:
    path: /autogluon/features/generators/TextNgramFeatureGenerator
    method: GET
    data_selector: records
    params: {}
- name: TextSpecialFeatureGenerator
  endpoint:
    path: /autogluon/features/generators/TextSpecialFeatureGenerator
    method: GET
    data_selector: records
    params: {}
- name: AbstractFeatureGenerator
  endpoint:
    path: /autogluon/features/generators/AbstractFeatureGenerator
    method: GET
    data_selector: records
- name: AutoMLPipelineFeatureGenerator
  endpoint:
    path: /autogluon/features/generators/AutoMLPipelineFeatureGenerator
    method: GET
    data_selector: records
- name: PipelineFeatureGenerator
  endpoint:
    path: /autogluon/features/generators/PipelineFeatureGenerator
    method: GET
    data_selector: records
- name: BulkFeatureGenerator
  endpoint:
    path: /autogluon/features/generators/BulkFeatureGenerator
    method: GET
    data_selector: records
- name: AsTypeFeatureGenerator
  endpoint:
    path: /autogluon/features/generators/AsTypeFeatureGenerator
    method: GET
    data_selector: records
- name: BinnedFeatureGenerator
  endpoint:
    path: /autogluon/features/generators/BinnedFeatureGenerator
    method: GET
    data_selector: records
- name: CategoryFeatureGenerator
  endpoint:
    path: /autogluon/features/generators/CategoryFeatureGenerator
    method: GET
    data_selector: records
- name: DatetimeFeatureGenerator
  endpoint:
    path: /autogluon/features/generators/DatetimeFeatureGenerator
    method: GET
    data_selector: records
- name: DropDuplicatesFeatureGenerator
  endpoint:
    path: /autogluon/features/generators/DropDuplicatesFeatureGenerator
    method: GET
    data_selector: records
- name: DropUniqueFeatureGenerator
  endpoint:
    path: /autogluon/features/generators/DropUniqueFeatureGenerator
    method: GET
    data_selector: records
- name: DummyFeatureGenerator
  endpoint:
    path: /autogluon/features/generators/DummyFeatureGenerator
    method: GET
    data_selector: records
- name: FillNaFeatureGenerator
  endpoint:
    path: /autogluon/features/generators/FillNaFeatureGenerator
    method: GET
    data_selector: records
- name: IdentityFeatureGenerator
  endpoint:
    path: /autogluon/features/generators/IdentityFeatureGenerator
    method: GET
    data_selector: records
- name: LabelEncoderFeatureGenerator
  endpoint:
    path: /autogluon/features/generators/LabelEncoderFeatureGenerator
    method: GET
    data_selector: records
- name: CategoryMemoryMinimizeFeatureGenerator
  endpoint:
    path: /autogluon/features/generators/CategoryMemoryMinimizeFeatureGenerator
    method: GET
    data_selector: records
- name: NumericMemoryMinimizeFeatureGenerator
  endpoint:
    path: /autogluon/features/generators/NumericMemoryMinimizeFeatureGenerator
    method: GET
    data_selector: records
- name: RenameFeatureGenerator
  endpoint:
    path: /autogluon/features/generators/RenameFeatureGenerator
    method: GET
    data_selector: records
- name: TextNgramFeatureGenerator
  endpoint:
    path: /autogluon/features/generators/TextNgramFeatureGenerator
    method: GET
    data_selector: records
- name: TextSpecialFeatureGenerator
  endpoint:
    path: /autogluon/features/generators/TextSpecialFeatureGenerator
    method: GET
    data_selector: records
- name: add_special_types
  endpoint:
    path: /FeatureMetadata/add_special_types
    method: POST
    data_selector: None
    params: {}
- name: Categorical
  endpoint:
    path: /autogluon/common/space/Categorical
    method: GET
    data_selector: data
    params: {}
- name: Real
  endpoint:
    path: /autogluon/common/space/Real
    method: GET
    data_selector: data
    params: {}
- name: Int
  endpoint:
    path: /autogluon/common/space/Int
    method: GET
    data_selector: data
    params: {}
- name: Bool
  endpoint:
    path: /autogluon/common/space/Bool
    method: GET
    data_selector: data
    params: {}
- name: train_data
  endpoint:
    path: /datasets/Inc/train.csv
    method: GET
    data_selector: data
    params: {}
- name: test_data
  endpoint:
    path: /datasets/Inc/test.csv
    method: GET
    data_selector: data
    params: {}
- name: train_data
  endpoint:
    path: /datasets/Inc/train.csv
    method: GET
    data_selector: records
    params: {}
- name: test_data
  endpoint:
    path: /datasets/Inc/test.csv
    method: GET
    data_selector: records
    params: {}
- name: Mitra
  endpoint:
    path: /autogluon/mitra-classifier
    method: GET
    data_selector: model_data
    params: {}
- name: Tabular
  endpoint:
    path: /autogluon/tabular
    method: GET
    data_selector: records
- name: TimeSeries
  endpoint:
    path: /autogluon/timeseries
    method: GET
    data_selector: records
- name: Mitra
  endpoint:
    path: /api/mitra
    method: GET
    data_selector: data
    params: {}
- name: calibrate_decision_threshold
  endpoint:
    path: /TabularPredictor/calibrate_decision_threshold
    method: GET
    data_selector: ''
    params: {}
- name: TabularPredictor.calibrate_decision_threshold
  endpoint:
    path: /autogluon/tabular/predictor/predictor.html#TabularPredictor.calibrate_decision_threshold
    method: GET
    data_selector: Decision Threshold
    params:
      data: null
      metric: null
      model: best
      decision_thresholds: 25
      secondary_decision_thresholds: 19
      subsample_size: 1000000
      verbose: true
- name: clone
  endpoint:
    path: /tabular/predictor/clone
    method: POST
    data_selector: returns
    params: {}
- name: TabularPredictor
  endpoint:
    path: /autogluon.tabular.TabularPredictor
    method: GET
- name: MultiModalPredictor
  endpoint:
    path: /autogluon.multimodal.MultiModalPredictor
    method: GET
- name: TimeSeriesPredictor
  endpoint:
    path: /autogluon.timeseries.TimeSeriesPredictor
    method: GET
- name: clone_for_deployment
  endpoint:
    path: /TabularPredictor/clone_for_deployment
    method: GET
    data_selector: records
    params: {}
- name: TabularPredictor
  endpoint:
    path: /autogluon/tabular/TabularPredictor
    method: GET
    data_selector: records
    params: {}
- name: TimeSeriesPredictor
  endpoint:
    path: /autogluon/timeseries/TimeSeriesPredictor
    method: GET
    data_selector: records
    params: {}
- name: delete_models
  endpoint:
    path: /TabularPredictor.delete_models
    method: GET
- name: delete_models
  endpoint:
    path: /delete_models
    method: DELETE
    data_selector: models
    params:
      models_to_keep: null
      models_to_delete: null
      allow_delete_cascade: false
      delete_from_disk: true
      dry_run: false
- name: TabularPredictor
  endpoint:
    path: /autogluon/tabular/TabularPredictor
    method: GET
    data_selector: records
    params: {}
- name: disk_usage_per_file
  endpoint:
    path: /TabularPredictor/disk_usage_per_file
    method: GET
    data_selector: Series
    params:
      sort_by: size
      include_path_in_name: false
- name: TabularPredictor
  endpoint:
    path: /autogluon/tabular/TabularPredictor
    method: GET
    data_selector: records
- name: distill
  endpoint:
    path: /tabular/predictor/distill
    method: POST
    data_selector: model_names
    params: {}
- name: evaluate
  endpoint:
    path: /autogluon/tabular/predictor/evaluate
    method: POST
    data_selector: dict
    params: {}
- name: evaluate_predictions
  endpoint:
    path: /TabularPredictor/evaluate_predictions
    method: POST
    data_selector: metrics
    params: {}
- name: TabularPredictor
  endpoint:
    path: /autogluon/tabular/TabularPredictor
    method: GET
    data_selector: records
- name: TabularPredictor
  endpoint:
    path: /autogluon/tabular/TabularPredictor
    method: GET
    data_selector: records
    params: {}
- name: TabularPredictor
  endpoint:
    path: /autogluon/tabular/TabularPredictor
    method: GET
- name: TabularPredictor
  endpoint:
    path: /autogluon/tabular/TabularPredictor
    method: GET
    data_selector: records
    params: {}
- name: MultiModalPredictor
  endpoint:
    path: /autogluon/multimodal/MultiModalPredictor
    method: GET
    data_selector: records
    params: {}
- name: TimeSeriesPredictor
  endpoint:
    path: /autogluon/timeseries/TimeSeriesPredictor
    method: GET
    data_selector: records
    params: {}
- name: fit
  endpoint:
    path: /fit
    method: POST
    data_selector: results
    params:
      time_limit: null
      presets:
      - medium_quality
      hyperparameters: default
- name: fit_extra
  endpoint:
    path: /fit_extra
    method: GET
    data_selector: records
- name: fit_extra
  endpoint:
    path: /fit_extra
    method: POST
    data_selector: models
    params: {}
- name: fit_pseudolabel
  endpoint:
    path: /TabularPredictor/fit_pseudolabel
    method: POST
    data_selector: self
- name: TabularPredictor
  endpoint:
    path: /autogluon/tabular/TabularPredictor
    method: GET
- name: fit_summary
  endpoint:
    path: /fit_summary
    method: GET
    data_selector: records
- name: fit_summary
  endpoint:
    path: /fit_summary
    method: GET
    data_selector: summary
    params:
      verbosity: 3
      show_plot: false
- name: fit_weighted_ensemble
  endpoint:
    path: TabularPredictor.fit_weighted_ensemble
    method: POST
    data_selector: model_names
    params:
      base_models: null
      name_suffix: Best
      expand_pareto_frontier: false
      time_limit: null
      refit_full: false
      num_cpus: auto
      num_gpus: auto
- name: TabularPredictor
  endpoint:
    path: /autogluon/tabular/TabularPredictor
    method: GET
    data_selector: records
    params: {}
- name: leaderboard
  endpoint:
    path: /TabularPredictor/leaderboard
    method: GET
    data_selector: DataFrame
    params: {}
- name: learning_curves
  endpoint:
    path: /TabularPredictor.learning_curves
    method: GET
- name: learning_curves
  endpoint:
    path: /TabularPredictor/learning_curves
    method: GET
    data_selector: metadata, model_data
    params: {}
- name: load
  endpoint:
    path: /TabularPredictor/load
    method: GET
- name: load_data_internal
  endpoint:
    path: /load_data_internal
    method: GET
    data_selector: records
- name: load_data_internal
  endpoint:
    path: /load_data_internal
    method: GET
    data_selector: data
    params:
      data: train
      return_X: true
      return_y: true
- name: TabularPredictor
  endpoint:
    path: /autogluon/tabular/TabularPredictor
    method: GET
    data_selector: records
    params: {}
- name: model_failures
  endpoint:
    path: /tabular/predictor/model_failures
    method: GET
    data_selector: model_failures_df
- name: model_hyperparameters
  endpoint:
    path: /model_hyperparameters
    method: GET
    data_selector: model_hyperparameters
- name: model_info
  endpoint:
    path: /model_info
    method: GET
    data_selector: data
    params: {}
- name: model_info
  endpoint:
    path: /model_info
    method: GET
    data_selector: model_info
    params:
      model: str
- name: model_names
  endpoint:
    path: /tabular/predictor/model_names
    method: GET
    data_selector: list
    params: {}
- name: model_names
  endpoint:
    path: /autogluon/tabular/model_names
    method: GET
    data_selector: models
    params: {}
- name: model_refit_map
  endpoint:
    path: /autogluon/tabular/predictor/model_refit_map
    method: GET
    data_selector: dict[str, str]
    params:
      inverse: false
- name: persist
  endpoint:
    path: /TabularPredictor/persist
    method: GET
- name: persist
  endpoint:
    path: /TabularPredictor/persist
    method: GET
    data_selector: models
    params:
      models: best
      with_ancestors: true
      max_memory: 0.4
- name: TabularPredictor
  endpoint:
    path: /autogluon/tabular/TabularPredictor
    method: GET
    data_selector: records
- name: MultiModalPredictor
  endpoint:
    path: /autogluon/multimodal/MultiModalPredictor
    method: GET
    data_selector: records
- name: TimeSeriesPredictor
  endpoint:
    path: /autogluon/timeseries/TimeSeriesPredictor
    method: GET
    data_selector: records
- name: TabularPredictor
  endpoint:
    path: /autogluon/tabular/TabularPredictor
    method: GET
    data_selector: records
- name: predict
  endpoint:
    path: /tabular/predict
    method: POST
    data_selector: predictions
    params: {}
- name: predict_from_proba
  endpoint:
    path: /predict_from_proba
    method: GET
    data_selector: records
    params: {}
- name: predict_multi
  endpoint:
    path: /tabular/predict_multi
    method: POST
    data_selector: predictions
    params:
      data: null
      models: null
      as_pandas: true
      transform_features: true
      inverse_transform: true
      decision_threshold: null
- name: TabularPredictor
  endpoint:
    path: /autogluon/tabular/TabularPredictor
    method: GET
    data_selector: records
    params: {}
- name: TimeSeriesPredictor
  endpoint:
    path: /autogluon/timeseries/TimeSeriesPredictor
    method: GET
    data_selector: records
    params: {}
- name: MultiModalPredictor
  endpoint:
    path: /autogluon/multimodal/MultiModalPredictor
    method: GET
    data_selector: records
    params: {}
- name: TabularPredictor
  endpoint:
    path: /autogluon/tabular/TabularPredictor
    method: GET
- name: predict_proba
  endpoint:
    path: /predict_proba
    method: GET
    data_selector: predictions
    params: {}
- name: predict_proba
  endpoint:
    path: /TabularPredictor/predict_proba
    method: POST
    data_selector: predicted class probabilities
    params: {}
- name: predict_proba_multi
  endpoint:
    path: /TabularPredictor/predict_proba_multi
    method: GET
- name: predict_proba_multi
  endpoint:
    path: /predict_proba_multi
    method: GET
    data_selector: predictions
    params: {}
- name: predict_proba_oof
  endpoint:
    path: /predict_proba_oof
    method: GET
    data_selector: records
    params: {}
- name: refit_full
  endpoint:
    path: TabularPredictor.refit_full
    method: GET
- name: refit_full
  endpoint:
    path: /TabularPredictor/refit_full
    method: POST
    data_selector: model
    params: {}
- name: save
  endpoint:
    path: /TabularPredictor.save
    method: POST
- name: save_space
  endpoint:
    path: /autogluon/tabular/predictor/save_space
    method: POST
    data_selector: parameters
    params: {}
- name: TabularPredictor
  endpoint:
    path: /autogluon/tabular/TabularPredictor
    method: GET
    data_selector: records
    params: {}
- name: MultiModalPredictor
  endpoint:
    path: /autogluon/multimodal/MultiModalPredictor
    method: GET
    data_selector: records
    params: {}
- name: TimeSeriesPredictor
  endpoint:
    path: /autogluon/timeseries/TimeSeriesPredictor
    method: GET
    data_selector: records
    params: {}
- name: set_model_best
  endpoint:
    path: /set_model_best
    method: POST
    data_selector: model
    params:
      save_trainer: 'False'
- name: TabularPredictor
  endpoint:
    path: /autogluon/tabular/TabularPredictor
    method: GET
    data_selector: records
- name: MultiModalPredictor
  endpoint:
    path: /autogluon/multimodal/MultiModalPredictor
    method: GET
    data_selector: records
- name: TimeSeriesPredictor
  endpoint:
    path: /autogluon/timeseries/TimeSeriesPredictor
    method: GET
    data_selector: records
- name: simulation_artifact
  endpoint:
    path: /tabular/predictor/simulation_artifact
    method: GET
    data_selector: simulation_dict
    params: {}
- name: transform_features
  endpoint:
    path: /transform_features
    method: GET
- name: transform_features
  endpoint:
    path: /autogluon/tabular/predictor/transform_features
    method: POST
    data_selector: DataFrame
    params: {}
- name: transform_labels
  endpoint:
    path: /transform_labels
    method: POST
    data_selector: records
    params: {}
- name: TabularPredictor
  endpoint:
    path: /autogluon/tabular/TabularPredictor
    method: GET
- name: TimeSeriesPredictor
  endpoint:
    path: /autogluon/timeseries/TimeSeriesPredictor
    method: GET
- name: MultiModalPredictor
  endpoint:
    path: /autogluon/multimodal/MultiModalPredictor
    method: GET
- name: train_data
  endpoint:
    path: /datasets/Inc/train.csv
    method: GET
    data_selector: data
    params: {}
- name: AbstractModel
  endpoint:
    path: /autogluon/tabular/models/AbstractModel
    method: GET
    data_selector: records
    params: {}
- name: MitraModel
- name: TabICLModel
- name: TabPFNV2Model
- name: RFModel
- name: XTModel
- name: KNNModel
- name: LinearModel
- name: TabularNeuralNetTorchModel
- name: NNFastAiTabularModel
- name: LGBModel
  endpoint:
    path: /autogluon/tabular/models/lgb
    method: GET
- name: CatBoostModel
  endpoint:
    path: /autogluon/tabular/models/catboost
    method: GET
- name: XGBoostModel
  endpoint:
    path: /autogluon/tabular/models/xgboost
    method: GET
- name: EBMModel
  endpoint:
    path: /autogluon/tabular/models/ebm
    method: GET
- name: RealMLPModel
  endpoint:
    path: /autogluon/tabular/models/realmlp
    method: GET
- name: TabMModel
  endpoint:
    path: /autogluon/tabular/models/tabm
    method: GET
- name: MultiModalPredictorModel
  endpoint:
    path: /autogluon/tabular/models/MultiModalPredictorModel
    method: GET
    data_selector: records
- name: TextPredictorModel
  endpoint:
    path: /autogluon/tabular/models/TextPredictorModel
    method: GET
    data_selector: records
- name: ImagePredictorModel
  endpoint:
    path: /autogluon/tabular/models/ImagePredictorModel
    method: GET
    data_selector: records
- name: BaggedEnsembleModel
  endpoint:
    path: /autogluon/core/models/BaggedEnsembleModel
    method: GET
    data_selector: records
- name: StackerEnsembleModel
  endpoint:
    path: /autogluon/core/models/StackerEnsembleModel
    method: GET
    data_selector: records
- name: WeightedEnsembleModel
  endpoint:
    path: /autogluon/core/models/WeightedEnsembleModel
    method: GET
    data_selector: records
- name: FTTransformerModel
  endpoint:
    path: /autogluon/tabular/models/FTTransformerModel
    method: GET
    data_selector: records
- name: FastTextModel
  endpoint:
    path: /autogluon/tabular/models/FastTextModel
    method: GET
    data_selector: records
- name: LGBModel
  endpoint:
    path: /autogluon/tabular/models/LGBModel
    method: GET
    data_selector: hyperparameter options
    params: {}
- name: CatBoostModel
  endpoint:
    path: /autogluon/tabular/models/CatBoostModel
    method: GET
    data_selector: hyperparameter options
    params: {}
- name: XGBoostModel
  endpoint:
    path: /autogluon/tabular/models/XGBoostModel
    method: GET
    data_selector: hyperparameter options
    params: {}
- name: EBMModel
  endpoint:
    path: /autogluon/tabular/models/EBMModel
    method: GET
    data_selector: hyperparameter options
    params: {}
- name: RealMLPModel
  endpoint:
    path: /autogluon/tabular/models/RealMLPModel
    method: GET
    data_selector: hyperparameter options
    params: {}
- name: TabMModel
  endpoint:
    path: /autogluon/tabular/models/TabMModel
    method: GET
    data_selector: hyperparameter options
    params: {}
- name: MitraModel
  endpoint:
    path: /autogluon/tabular/models/MitraModel
    method: GET
    data_selector: hyperparameter options
    params: {}
- name: TabICLModel
  endpoint:
    path: /autogluon/tabular/models/TabICLModel
    method: GET
    data_selector: hyperparameter options
    params: {}
- name: TabPFNV2Model
  endpoint:
    path: /autogluon/tabular/models/TabPFNV2Model
    method: GET
    data_selector: hyperparameter options
    params: {}
- name: RFModel
  endpoint:
    path: /autogluon/tabular/models/RFModel
    method: GET
    data_selector: hyperparameter options
    params: {}
- name: XTModel
  endpoint:
    path: /autogluon/tabular/models/XTModel
    method: GET
    data_selector: hyperparameter options
    params: {}
- name: KNNModel
  endpoint:
    path: /autogluon/tabular/models/KNNModel
    method: GET
    data_selector: hyperparameter options
    params: {}
- name: LinearModel
  endpoint:
    path: /autogluon/tabular/models/LinearModel
    method: GET
    data_selector: hyperparameter options
    params: {}
- name: TabularNeuralNetTorchModel
  endpoint:
    path: /autogluon/tabular/models/TabularNeuralNetTorchModel
    method: GET
    data_selector: hyperparameter options
    params: {}
- name: NNFastAiTabularModel
  endpoint:
    path: /autogluon/tabular/models/NNFastAiTabularModel
    method: GET
    data_selector: hyperparameter options
    params: {}
- name: dump_model
  endpoint:
    path: /MultiModalPredictor/dump_model
    method: POST
    data_selector: model
    params:
      save_path: path to directory where models and configs should be saved
- name: MultiModalPredictor
  endpoint:
    path: /MultiModalPredictor/evaluate
    method: GET
- name: evaluate
  endpoint:
    path: /autogluon/multimodal/predictor/evaluate
    method: POST
    data_selector: metric scores
    params: {}
- name: export_onnx
  endpoint:
    path: /multimodal/predictor/export_onnx
    method: POST
    data_selector: onnx_path
    params: {}
- name: extract_embedding
  endpoint:
    path: /autogluon/multimodal/predictor/extract_embedding
    method: POST
- name: fit_summary
  endpoint:
    path: /MultiModalPredictor/fit_summary
    method: GET
- name: fit_summary
  endpoint:
    path: /MultiModalPredictor/fit_summary
    method: GET
    data_selector: summary_info
- name: get_num_gpus
  endpoint:
    path: /MultiModalPredictor/get_num_gpus
    method: GET
- name: list_supported_models
  endpoint:
    path: /list_supported_models
    method: GET
    data_selector: models
    params: {}
- name: predict_proba
  endpoint:
    path: /predict_proba
    method: GET
    data_selector: proba
- name: save
  endpoint:
    path: /multimodal/predictor/save
    method: POST
    data_selector: parameters
- name: MultiModalPredictor
  endpoint:
    path: /MultiModalPredictor
    method: GET
    data_selector: records
- name: TimeSeriesPredictor
  endpoint:
    path: /TimeSeriesPredictor
    method: GET
    data_selector: records
- name: set_verbosity
  endpoint:
    path: /MultiModalPredictor/set_verbosity
    method: GET
- name: TimeSeriesDataFrame
  endpoint:
    path: /autogluon/timeseries/TimeSeriesDataFrame
    method: GET
    data_selector: records
- name: evaluate
  endpoint:
    path: /evaluate
    method: GET
- name: evaluate
  endpoint:
    path: /evaluate
    method: POST
    data_selector: scores_dict
    params: {}
- name: TimeSeriesPredictor
  endpoint:
    path: /TimeSeriesPredictor/feature_importance
    method: GET
    data_selector: feature_importance
- name: feature_importance
  endpoint:
    path: /feature_importance
    method: POST
    data_selector: DataFrame
    params:
      method: permutation
      subsample_size: 50
      random_seed: 123
      include_confidence_band: true
      confidence_level: 0.99
- name: TimeSeriesPredictor
  endpoint:
    path: /TimeSeriesPredictor
    method: GET
    data_selector: ''
    params: {}
- name: fit
  endpoint:
    path: /timeseries/predictor/fit
    method: POST
- name: fit_summary
  endpoint:
    path: /fit_summary
    method: GET
- name: fit_summary
  endpoint:
    path: /fit_summary
    method: GET
    data_selector: summary_dict
    params:
      verbosity: 1
- name: TimeSeriesPredictor
  endpoint:
    path: /TimeSeriesPredictor/leaderboard
    method: GET
    data_selector: records
- name: TimeSeriesPredictor
  endpoint:
    path: /TimeSeriesPredictor
    method: GET
    data_selector: records
- name: forecast_horizon
  endpoint:
    path: /make_future_data_frame
    method: POST
    data_selector: DataFrame
    params: {}
- name: make_future_data_frame
  endpoint:
    path: make_future_data_frame
    method: GET
- name: model_names
  endpoint:
    path: /model_names
    method: GET
    data_selector: list
- name: model_names
  endpoint:
    path: /TimeSeriesPredictor/model_names
    method: GET
- name: persist
  endpoint:
    path: /TimeSeriesPredictor/persist
    method: POST
    data_selector: list_of_models
- name: TimeSeriesPredictor
  endpoint:
    path: /TimeSeriesPredictor
    method: GET
    data_selector: records
- name: plot
  endpoint:
    path: /TimeSeriesPredictor/plot
    method: POST
    data_selector: data
    params:
      max_num_item_ids: 8
- name: plot
  endpoint:
    path: /TimeSeriesPredictor/plot
    method: GET
- name: TimeSeriesPredictor
  endpoint:
    path: /TimeSeriesPredictor
    method: GET
    data_selector: records
    params: {}
- name: data
  endpoint:
    params:
      known_covariates: known_covariates_names
- name: TimeSeriesPredictor
  endpoint:
    path: /TimeSeriesPredictor/refit_full
    method: GET
- name: refit_full
  endpoint:
    path: /refit_full
    method: POST
    data_selector: result
    params:
      model: all
      set_best_to_refit_full: true
- name: unpersist
  endpoint:
    path: /TimeSeriesPredictor/unpersist
    method: POST
    data_selector: results
- name: convert_frequency
  endpoint:
    path: /TimeSeriesDataFrame/convert_frequency
    method: POST
    data_selector: ts_df
    params: {}
- name: dropna
  endpoint:
    path: /TimeSeriesDataFrame/dropna
    method: GET
    data_selector: rows
    params:
      how: any
- name: iterable_dataset
  endpoint:
    path: /TimeSeriesDataFrame/from_iterable_dataset
    method: GET
    data_selector: records
    params: {}
- name: time_series_data
  endpoint:
    path: /path/to/time_series_data
    method: GET
    data_selector: ts_df
    params: {}
- name: TimeSeriesDataFrame
  endpoint:
    path: from_path
    method: GET
    data_selector: records
- name: get_model_inputs_for_scoring
  endpoint:
    path: /get_model_inputs_for_scoring
    method: GET
    data_selector: tuple
    params: {}
- name: infer_frequency
  endpoint:
    path: /infer_frequency
    method: GET
    data_selector: freq
    params:
      num_items: null
      raise_if_irregular: false
- name: slice_by_timestep
  endpoint:
    path: /slice_by_timestep
    method: GET
    data_selector: ts_df
    params: {}
- name: split_by_time
  endpoint:
    path: /TimeSeriesDataFrame/split_by_time
    method: GET
    data_selector: data_before, data_after
    params:
      cutoff_time: pd.Timestamp
- name: DummyFeatureGenerator
  endpoint:
    path: /autogluon/features/generators/DummyFeatureGenerator
    method: GET
    data_selector: records
    params: {}
- name: FillNaFeatureGenerator
  endpoint:
    path: /autogluon/features/generators/FillNaFeatureGenerator
    method: GET
    data_selector: records
    params: {}
- name: IdentityFeatureGenerator
  endpoint:
    path: /autogluon/features/generators/IdentityFeatureGenerator
    method: GET
    data_selector: records
    params: {}
- name: LabelEncoderFeatureGenerator
  endpoint:
    path: /autogluon/features/generators/LabelEncoderFeatureGenerator
    method: GET
    data_selector: records
    params: {}
- name: CategoryMemoryMinimizeFeatureGenerator
  endpoint:
    path: /autogluon/features/generators/CategoryMemoryMinimizeFeatureGenerator
    method: GET
    data_selector: records
    params: {}
- name: NumericMemoryMinimizeFeatureGenerator
  endpoint:
    path: /autogluon/features/generators/NumericMemoryMinimizeFeatureGenerator
    method: GET
    data_selector: records
    params: {}
- name: RenameFeatureGenerator
  endpoint:
    path: /autogluon/features/generators/RenameFeatureGenerator
    method: GET
    data_selector: records
    params: {}
- name: TextNgramFeatureGenerator
  endpoint:
    path: /autogluon/features/generators/TextNgramFeatureGenerator
    method: GET
    data_selector: records
    params: {}
- name: TextSpecialFeatureGenerator
  endpoint:
    path: /autogluon/features/generators/TextSpecialFeatureGenerator
    method: GET
    data_selector: records
    params: {}
- name: get_features
  endpoint:
    path: /FeatureMetadata/get_features
    method: GET
    data_selector: features
    params: {}
- name: Categorical
  endpoint:
    path: /Categorical
    method: GET
    data_selector: data
    params: {}
- name: Real
  endpoint:
    path: /Real
    method: GET
    data_selector: data
    params: {}
- name: Int
  endpoint:
    path: /Int
    method: GET
    data_selector: data
    params: {}
- name: Bool
  endpoint:
    path: /Bool
    method: GET
    data_selector: data
    params: {}
- name: object_detection
  endpoint:
    path: /object_detection_dataset
    method: GET
    data_selector: records
    params: {}
- name: time_series
  endpoint:
    path: /datasets/timeseries/m4_hourly/train.csv
    method: GET
    data_selector: records
    params: {}
- name: tabular
  endpoint:
    path: /datasets/Inc/train.csv
    method: GET
    data_selector: data
- name: multimodal_text
  endpoint:
    path: /glue/sst/train.parquet
    method: GET
    data_selector: data
- name: multimodal_image
  endpoint:
    path: /object_detection_dataset/tiny_motorbike_coco.zip
    method: GET
    data_selector: data
- name: time_series
  endpoint:
    path: /datasets/timeseries/m4_hourly/train.csv
    method: GET
    data_selector: data
notes:
- AutoGluon supports Linux, MacOS, and Windows.
- If you run into difficulties installing AutoGluon on Windows, please provide details
  in this GitHub Issue
- To install AutoGluon on Windows, it is recommended to use Anaconda
- If Anaconda is already installed but is an old version, follow this guide to update
- Apple Silicon is now supported via the conda installation instructions outlined
  above
- AutoGluon requires Python version 3.9, 3.10, 3.11, or 3.12 and is available on Linux,
  MacOS, and Windows.
- If you run into difficulties installing AutoGluon on Windows, please provide details
  in this GitHub Issue.
- This preset is considered experimental for this release, and may change without
  warning in a future release.
- Loading models trained on older versions of AutoGluon is not supported. Please re-train
  models using AutoGluon 1.3.
- Mitra introduces a principled pretraining approach by carefully selecting and mixing
  diverse synthetic priors to promote robust generalization across a wide range of
  real-world tabular datasets.
- Mitra supports both zero-shot and fine-tuning modes and runs seamlessly on both
  GPU and CPU.
- Uses OAuth2 with refresh token — requires setup of connected app in api
- Some objects like Contact may return nulls in deeply nested fields
- TimeSeries module includes automatic handling of missing data and irregular time
  series
- Achieves 70%+ win rate compared to other popular forecasting frameworks
- The EDA module will be released at a later time, as it requires additional development
  effort before it is ready for 1.0.
- Loading models trained on older versions of AutoGluon is not supported. Please re-train
  models using AutoGluon 1.0.
- Loading models trained on older versions of AutoGluon is not supported. Please re-train
  models using AutoGluon 1.2.
- This preset requires downloading foundation model weights for TabPFNv2, TabICL,
  and Mitra during fit.
- This release supports Python versions 3.9, 3.10, 3.11, and 3.12.
- Loading models trained on older versions of AutoGluon is not supported.
- Efficiency improvements to the core TimeSeriesDataFrame methods, resulting in up
  to 7x lower end-to-end predictor.fit() and predict() time when working with large
  datasets (>10M rows).
- New tabular forecasting model PerStepTabular that fits a separate tabular regression
  model for each time step in the forecast horizon.
- The extreme preset requires downloading foundation model weights for TabPFNv2, TabICL,
  and Mitra during fit.
- AutoGluon 1.0 features numerous usability and performance improvements to the TimeSeries
  module.
- Only load previously trained models using the same version of AutoGluon that they
  were originally trained on.
- Loading models trained in different versions of AutoGluon is not supported.
- This release is non-breaking when upgrading from v0.4.0.
- Only load previously trained models using the same version of AutoGluon that they
  were originally trained on. Loading models trained in different versions of AutoGluon
  is not supported.
- This release is non-breaking when upgrading from v0.3.1.
- If unspecified, a time-stamped folder called “AutogluonModels/ag-[TIMESTAMP]” will
  be created in the working directory to store all models.
- To call fit() twice and save all results of each fit, you must specify different
  path locations or don’t specify path at all.
- Ideal for use-cases where saving a snapshot of the predictor is desired before performing
  more advanced operations.
- This can be helpful to reduce prediction latency and improve throughput.
- This is currently an experimental feature, the supported compilers can be ‘native’,
  ‘onnx’.
- 'WARNING: If delete_from_disk=True, this will DELETE ALL FILES in the deleted model
  directories.'
- It is highly recommended to first run with dry_run=True to understand which directories
  will be deleted.
- Uses AutoGluon 1.4.0 for TabularPredictor
- Distillation can produce a model that is more accurate than the same model fit directly
  on the original training data.
- This will raise an exception if cache_data=False was previously set in fit().
- 'Until catboost v0.24 is released, distill() with CatBoost students in multiclass
  classification requires you to first install catboost-dev: pip install catboost-dev'
- Metrics scores always show in higher is better form.
- This means that metrics such as log_loss and root_mean_squared_error will have their
  signs FLIPPED, and values will be negative.
- Calculating feature importance can be a very computationally expensive process.
- For highly accurate importance and p_value estimates, it is recommended to set subsample_size
  to at least 5000 if possible and num_shuffle_sets to at least 10.
- Fit models to predict a column of a data table based on the other columns.
- The fit_strategy can be 'auto', 'sequential', or 'parallel'.
- pseudo_data is only used for L1 models. Support for L2+ models is not yet implemented.
- This functionality is currently in preview mode.
- The metadata information returned may change in structure in future versions without
  warning.
- The definitions of various metadata values are not yet documented.
- The output of this function should not be used for programmatic decisions.
- Load a TabularPredictor object previously produced by fit() from file and returns
  this object.
- It is highly recommended the predictor be loaded with the exact AutoGluon version
  it was fit with.
- Internal data representations should NOT be combined with the original data, in
  most cases this is not possible.
- At least one of predictor_path or log_file_path must be specified
- Persist models in memory for reduced inference latency.
- This function requires graphviz and pygraphviz to be installed because this visualization
  depends on those package.
- Unless this function will raise ImportError without being able to generate the visual
  of the ensemble model.
- Use trained models to produce predictions of label column values for new data.
- This is advanced functionality not intended for normal usage.
- 'Warning: This method will raise an exception if called on a model that is not a
  bagged ensemble.'
- 'Warning: If intending to join the output of this method with the original training
  data, be aware that a rare edge-case issue exists.'
- This function has NO impact on inference accuracy.
- It is recommended to invoke this method if the only goal is to use the trained model
  for prediction.
- However, certain advanced functionality may no longer be available after save_space()
  has been called.
- When inverse=False, it is possible for the output to contain NaN label values in
  multiclass problems if the provided label was dropped during training.
- Another way to reset the predictor and unpersist models is to reload the predictor
  from disk via predictor = TabularPredictor.load(predictor.path).
- This documentation is for advanced users, and is not comprehensive.
- For a stable public API, refer to TabularPredictor.
- TabPFNv2 is a tabular foundation model pre-trained purely on synthetic data that
  achieves state-of-the-art results with in-context learning on small datasets with
  <=10000 samples and <=500 features.
- Only load data you trust.
- When standalone = True, save the transformers.CLIPModel and transformers.AutoModel
  to os.path.join(path,model_name)
- When standalone = False, the saved artifact may require an online environment to
  process in load()
- Set the verbosity level of the log.
- AutoGluon provides probabilistic (quantile) multi-step-ahead forecasts for univariate
  time series.
- The predictor will automatically infer the frequency from the data unless specified.
- Metrics are always reported in ‘higher is better’ format.
- Training data must include columns listed in known_covariates_names with the covariates
  values aligned with the target time series.
- If tuning_data is provided, multi-window backtesting on training data will be disabled.
- TimeSeriesPredictor.load() uses pickle module implicitly, which is known to be insecure.
  It is possible to construct malicious pickle data which will execute arbitrary code
  during unpickling. Never load data that could have come from an untrusted source,
  or that could have been tampered with. Only load data you trust.
- This is experimental functionality, many time series models do not yet support refit_full
  and will simply be copied.
- 'Supports four input formats: pandas DataFrame without multi-index, path to CSV
  or Parquet, pandas DataFrame with multi-index, and Iterable format.'
- When `deep=True` (default), a new object will be created with a copy of the calling
  object’s data and indices.
- When `deep=False`, a new object will be created without copying the calling object’s
  data or index.
- Drop rows containing NaNs.
- This method assumes that the index of the TimeSeriesDataFrame is sorted by [item_id,
  timestamp].
- If the index is not sorted, this method will log a warning and may produce an incorrect
  result.
- Convenience method to read pickled time series dataframes.
- If the read pickle file refers to a plain pandas DataFrame, it will be cast to a
  TimeSeriesDataFrame.
- If set to None, all items will be used for inferring the frequency.
- Data frame containing time series before the cutoff_time (exclude cutoff_time)
- Data frame containing time series after the cutoff_time (include cutoff_time)
- This method automatically sorts the TimeSeriesDataFrame by item_id, timestamp.
- Some objects may return nulls in deeply nested fields
- Install mmcv-related dependencies using 'mim install "mmcv==2.1.0"' and 'pip install
  "mmdet==3.2.0"'.
- AutoGluon is modularized into sub-modules specialized for tabular, multimodal, or
  time series data.
- If you encounter issues after installing AutoGluon, try restarting the notebook
  runtime to ensure a clean memory state.
- If you encounter installation issues not covered here, please create a GitHub issue.
- The extreme preset is considered experimental for this release and may change without
  warning in a future release.
- Mitra is pretrained exclusively on synthetic data.
- Mitra supports both zero-shot and fine-tuning modes.
- AutoGluon v1.2 achieves a 70%+ win rate against the previous release
- The new v1.3 release brings numerous usability improvements and bug fixes to the
  TimeSeries module.
- Refactor project README & project Tagline
- Pandas version upgrade
- Various dependency upgrades
- AutoGluon 1.2 contains massive improvements to both Tabular and TimeSeries modules,
  each achieving a 70% win-rate vs AutoGluon 1.1.
- v0.8.3 is a patch release to address security vulnerabilities.
- This version supports Python versions 3.8, 3.9, and 3.10.
- Major efficiency improvements to the core TimeSeriesDataFrame methods, resulting
  in up to 7x lower end-to-end predictor.fit() and predict() time when working with
  large datasets (>10M rows).
- The `extreme` preset requires downloading foundation model weights for TabPFNv2,
  TabICL, and Mitra during fit.
- This release is non-breaking when upgrading from v0.4.0. As always, only load previously
  trained models using the same version of AutoGluon that they were originally trained
  on.
- Note that this is currently an experimental feature, the supported compilers can
  be ['native', 'onnx'].
- To maximize predictive performance, use eval_metric and time_limit parameters.
- It is recommended to specify presets and avoid specifying most other fit() arguments
  or model hyperparameters prior to becoming familiar with AutoGluon.
- parallel is experimental and may run into issues.
- AutoGluon 1.4.1 documentation
- Output summary of information about models produced during fit() as a pd.DataFrame.
- Will not work if the learning_curves flag was not set during training.
- Learning curves are only generated for iterative learners with learning curve support.
- This function requires graphviz and pygraphviz to be installed because this visualization
  depends on those packages.
- The data should contain the same column names as training data
- Valid models are listed in this predictor by calling predictor.model_names()
- Valid values for decision_threshold are in the range [0.0, 1.0]
- Optimized decision_threshold can be obtained by calling predictor.calibrate_decision_threshold()
- Returns a dictionary of prediction probabilities where the key is the model name
  and the value is the model’s prediction probabilities on the data.
- This method leverages the model dependency graph to avoid redundant computation.
- The runtime can be roughly estimated as 1 / (k * n) of the original fit runtime,
  with k and n defined above.
- 'Warning: Be aware that utilizing refit_full models without separately verifying
  on test data means that the model is untested, and has no guarantee of being consistent
  with the original model.'
- This method only applies universal transforms employed by all AutoGluon models.
- Unpersist models in memory for reduced memory usage.
- If models are not persisted in memory, they are loaded from disk every time they
  are asked to make predictions.
- This will temporarily double the memory usage of the model, as both the original
  and the pickled version will exist in memory.
- This can lead to an out-of-memory error if the model is larger than the remaining
  available memory.
- The model is assumed to be fitted before compilation.
- 'WARNING: This will DELETE ALL FILES in the self.path directory, regardless if they
  were created by AutoGluon or not.'
- Mitra is a tabular foundation model pre-trained purely on synthetic data with the
  goal of optimizing fine-tuning performance over in-context learning performance.
- TabICL currently only supports classification tasks.
- 'Requires the ‘interpret’ or ‘interpret-core’ package. Install via: pip install
  interpret'
- Added in version 1.5.0.
- AutoMM is designed to simplify the fine-tuning of foundation models for downstream
  applications.
- The method would generate an ONNX module that would perform model inference with
  TensorrtExecutionProvider in onnxruntime, if tensorrt package is properly installed.
- Requires setup of connected app in API
- If provided data is a pandas.DataFrame, AutoGluon will attempt to convert it to
  a TimeSeriesDataFrame.
- If you encounter installation issues not covered here, please create a GitHub issue
- This release supports Python versions 3.8, 3.9, 3.10, and 3.11.
- Loading models trained on older versions of AutoGluon is not supported. Please re-train
  models using AutoGluon 1.1.
- Introduces several major improvements to the Time Series module, including new models,
  upgraded presets that lead to better forecast accuracy, and optimizations that speed
  up training & inference.
errors:
- An exception will be raised if data is not specified while computing importances
  of original features.
- Doing so will raise an exception if feature importance calculation is not yet supported
  with this option when data=None.
- '401 Unauthorized: Recheck OAuth scopes or token expiration'
- 'INVALID_FREQUENCY: Ensure the frequency provided is supported.'
- 'REQUEST_LIMIT_EXCEEDED: Throttle API calls or reduce frequency'
- 'QUERY_TIMEOUT: Break down filters or add selectivity'
- Loading models trained in different versions of AutoGluon is not supported.
auth_info:
  mentioned_objects: []
client:
  base_url: https://auto.gluon.ai
  headers:
    Accept: application/json
source_metadata: null
