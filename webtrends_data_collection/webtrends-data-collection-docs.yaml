resources:
- name: post_event_data
  endpoint:
    path: /v1/docs/post-event-data
    method: POST
    data_selector: event_data
- name: get_visitor_identifier
  endpoint:
    path: /v1/docs/get-visitor-identifier
    method: GET
    data_selector: visitor_id
- name: Get Visitor Identifier
  endpoint:
    path: /get-visitor-identifier
    method: GET
    data_selector: visitor_id
    params: {}
- name: Post Event Data
  endpoint:
    path: /post-event-data
    method: POST
    data_selector: event_response
    params: {}
- name: Get Visitor Identifier
  endpoint:
    path: /get-visitor-identifier
    method: GET
    data_selector: visitor_id
- name: Post Event Data
  endpoint:
    path: /post-event-data
    method: POST
    data_selector: event_response
- name: site_map
  endpoint:
    path: /webtrendssites.lst
    method: GET
    data_selector: DCSID
    params: {}
- name: site_map
  endpoint:
    path: /webtrendssites.lst
    method: GET
    data_selector: DCSID
    params: {}
- name: logelementmap
  endpoint:
    path: /dcs.gif
    method: GET
    data_selector: parameters
    params: {}
- name: servicemodel
  endpoint:
    path: /servicemodel
    method: GET
    data_selector: parameters
    params: {}
- name: logelement
  endpoint:
    path: /logelementmap#
    method: GET
    data_selector: parameters
    params: {}
- name: events
  endpoint:
    path: /v1/dcs9x99xxxx9xxxxxxx9xxxx9x_9x9x/events.svc
    method: POST
    data_selector: fields
- name: events
  endpoint:
    path: /v1/dcs9x99xxxx9xxxxxxx9xxxx9x_9x9x/events.svc
    method: POST
    data_selector: fields
    params:
      dcsverbose: 'true'
      dcsformat: xml
- name: Get Visitor ID
  endpoint:
    path: /v1/asdf;lkjh/events.svc
    method: POST
    data_selector: visitorID
    params:
      dcsverbose: 'true'
- name: Post Event Data
  endpoint:
    path: /v1/asdf;lkjh/events.svc
    method: POST
    data_selector: logLine
    params:
      dcsverbose: 'true'
- name: Get Visitor ID
  endpoint:
    path: /v1/asdf;lkjh/events.svc
    method: POST
- name: Post Event Data
  endpoint:
    path: /v1/asdf;lkjh/events.svc
    method: POST
- name: events
  endpoint:
    path: /v1/dcs9x99xxxx9xxxxxxx9xxxx9x_9x9x/events.svc
    method: POST
    data_selector: fields
    params: {}
- name: events
  endpoint:
    path: /v1/events.svc
    method: POST
    data_selector: fields
- name: tracking_transforms
  endpoint:
    path: /docs/automatic-tracking
    method: GET
    data_selector: transforms
    params: {}
- name: selectors
  endpoint:
    path: /docs/automatic-tracking
    method: GET
    data_selector: selectors
    params: {}
- name: dual_tagging
  endpoint:
    path: /docs/automatic-tracking
    method: GET
    data_selector: dual_tagging
    params: {}
- name: visitor_tracking
  endpoint:
    path: /docs/automatic-tracking
    method: GET
    data_selector: visitor_tracking
    params: {}
- name: tracking
  endpoint:
    path: /api/tracking
    method: POST
    data_selector: data
    params: {}
- name: events
  endpoint:
    path: /v1/asdf;lkjh/events.svc
    method: POST
    data_selector: null
    params: {}
- name: Get Visitor ID
  endpoint:
    path: /v1/asdf;lkjh/events.svc
    method: POST
    data_selector: response
    params:
      dcsverbose: 'true'
- name: Post Event Data
  endpoint:
    path: /v1/asdf;lkjh/events.svc
    method: POST
    data_selector: response
    params:
      dcsverbose: 'true'
- name: visitor_identifier
  endpoint:
    path: /ids.svc
    method: POST
    data_selector: dcsformat
    params:
      dcsformat: plain
- name: visitor_identifier
  endpoint:
    path: /v1/dcs9x99xxxx9xxxxxxx9xxxx9x_9x9x/ids.svc
    method: POST
    data_selector: ''
    params:
      dcsformat: plain
- name: post_event_data
  endpoint:
    path: /v1/dcs9x99xxxx9xxxxxxx9xxxx9x_9x9x/events.svc
    method: POST
    data_selector: null
    params: {}
- name: event_data
  endpoint:
    path: /v1/dcs9x99xxxx9xxxxxxx9xxxx9x_9x9x/events.svc
    method: POST
    data_selector: none
    params:
      dcsformat: optional
      dcsverbose: optional
- name: post_event_data
  endpoint:
    path: /v1/dcs9x99xxxx9xxxxxxx9xxxx9x_9x9x/events.svc
    method: POST
    data_selector: null
    params: {}
- name: post_event_data
  endpoint:
    path: /v1/dcs9x99xxxx9xxxxxxx9xxxx9x_9x9x/events.svc
    method: POST
    data_selector: body
    params:
      dcsformat: plain
      dcsverbose: optional
- name: site_map
  endpoint:
    path: /webtrendssites.lst
    method: GET
    data_selector: DCSID
    params: {}
- name: visitor_identifier
  endpoint:
    path: /ids.svc
    method: POST
    data_selector: ids
    params: {}
- name: visitor_identifier
  endpoint:
    path: /getVisitorIdentifier
    method: GET
    data_selector: visitorId
    params: {}
- name: post_event_data
  endpoint:
    path: /postEventData
    method: POST
    data_selector: result
    params: {}
- name: site_map
  endpoint:
    path: /webtrendssites.lst
    method: GET
    data_selector: DCSID
    params: {}
- name: visitor_identifier
  endpoint:
    path: /v1/dcs9x99xxxx9xxxxxxx9xxxx9x_9x9x/ids.svc
    method: POST
    data_selector: ''
    params: {}
- name: Get Visitor Identifier
  endpoint:
    path: /get-visitor-identifier
    method: GET
    data_selector: visitor_id
- name: Post Event Data
  endpoint:
    path: /post-event-data
    method: POST
    data_selector: event_data
notes:
- dcsuri uniquely identifies the type of event that occurred within your application.
- WT.ti identifies the page title associated with a request.
- Use WT.co_f parameter to pass visitor identifying data.
- Requests with no value for wt.co_f will use IP address and user agent information.
- If your environment requires a 'hardened' server configuration for maximum security,
  you should implement the security hardening measures after the installation is complete.
- The API supports the dcsverbose parameter as the primary method of validating and
  debugging your requests to the data collection server.
- When you set dcsverbose to true, the server returns detailed information about errors
  and log entry content.
- Before you put your code into production and begin collecting data, you should run
  all requests with dcsverbose enabled.
- Requires implementation of a custom URL scheme in the app
- Express Analysis and real-time analysis are only supported with SDC installed in
  a Windows environment.
- The SDC does not attempt to determine the maximum file size that your system supports.
- In Linux, WebTrends recommends that you configure the audit log settings to either
  truncate or rotate the audit log so it does not ever reach the limit.
- The `DCS_URI` logelement is always true. All others default to false.
- The `DCS_URI logelement` is always true. All others default to false.
- Because dcsverbose returns a complete account of all the data logged as a result
  of each request, debugging with dcsverbose ensures that your posts include the intended
  data.
- For failed requests, using dcsverbose ensures that you have the most detailed information
  about each error.
- The optional dcsformat parameter is used to specify the response format when sending
  data to the Webtrends data collection server.
- If no format is specified, the data collection server returns plain text.
- dcsverbose is recommended for debugging during application development.
- Responses have the potential to become extremely large when dcsverbose is enabled.
- Disable dcsverbose after debugging before building for production use.
- The response format can be specified using the dcsformat parameter.
- Using webtrends.load eliminates the need to retag your site when configuration changes
  are made
- To avoid logging hits to pages that do not load completely, paste the code inside
  the <head> section of your web page.
- Uses Google Closure Compiler with Advanced Optimizations to minify the JavaScript
  files.
- Transforms are called just before the beacon request is generated.
- Selectors rely on the JavaScript method `querySelectorAll()`.
- Uses first party cookies for tracking across domains.
- dcsverbose parameter is recommended for debugging during application development.
- Indicates whether hits with invalid cookies are logged in the SDC log file.
- Indicates whether hits that were truncated are logged in the SDC log file.
- SDC searches logelement parameters when parsing incoming hits.
- Log truncation is still supported without using syslog.
- Requests with no value for wt.co_f will use IP address and user agent information
  to identify visitors.
- SDC logs `xavier` in the `cs-username` field. The `&dcsaut=xavier` is not written
  to `cs-uri-query`.
- SDC with Unix does not support Express Analysis.
errors:
- 'ERR_INVALID_DCS_ID: The following invalid hit was discarded due to an invalid DCSID'
- '400 Bad Request: ERR_INVALID_DCS_ID - The following invalid hit was discarded due
  to an invalid DCS ID.'
- 'ERR_INVALID_DCS_ID: Invalid DCSID provided.'
- 'ERR_INVALID_DCS_ID: The following invalid hit was discarded due to an invalid DCS
  ID'
- 'ERR_INVALID_DCS_ID: The following invalid hit was discarded due to an invalid DCS
  ID.'
auth_info:
  mentioned_objects: []
client:
  base_url: https://www.webtrends.com
  headers:
    Accept: application/json
source_metadata: null
