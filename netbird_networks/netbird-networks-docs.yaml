resources:
- name: networks
  endpoint:
    path: /api/networks/routers
    method: GET
    data_selector: ''
    params: {}
- name: list_all_networks
  endpoint:
    path: /api/networks/routers
    method: GET
    data_selector: ''
- name: create_a_network
  endpoint:
    path: /api/networks
    method: POST
    data_selector: ''
- name: retrieve_a_network
  endpoint:
    path: /api/networks/{networkId}
    method: GET
    data_selector: ''
- name: update_a_network
  endpoint:
    path: /api/networks/{networkId}
    method: PUT
    data_selector: ''
- name: delete_a_network
  endpoint:
    path: /api/networks/{networkId}
    method: DELETE
    data_selector: ''
- name: list_all_network_resources
  endpoint:
    path: /api/networks/{networkId}/resources
    method: GET
    data_selector: ''
- name: create_a_network_resource
  endpoint:
    path: /api/networks/{networkId}/resources
    method: POST
    data_selector: ''
- name: retrieve_a_network_resource
  endpoint:
    path: /api/networks/{networkId}/resources/{resourceId}
    method: GET
    data_selector: ''
- name: update_a_network_resource
  endpoint:
    path: /api/networks/{networkId}/resources/{resourceId}
    method: PUT
    data_selector: ''
- name: delete_a_network_resource
  endpoint:
    path: /api/networks/{networkId}/resources/{resourceId}
    method: DELETE
    data_selector: ''
- name: list_all_network_routers
  endpoint:
    path: /api/networks/{networkId}/routers
    method: GET
    data_selector: ''
- name: create_a_network_router
  endpoint:
    path: /api/networks/{networkId}/routers
    method: POST
    data_selector: ''
- name: network_router
  endpoint:
    path: /api/networks/routers
    method: GET
    data_selector: records
    params: {}
- name: network_router
  endpoint:
    path: /api/networks/routers
    method: GET
    data_selector: records
    params: {}
- name: accounts
  endpoint:
    path: /api/resources/accounts
    method: GET
- name: users
  endpoint:
    path: /api/resources/users
    method: GET
- name: tokens
  endpoint:
    path: /api/resources/tokens
    method: GET
- name: peers
  endpoint:
    path: /api/resources/peers
    method: GET
- name: setup_keys
  endpoint:
    path: /api/resources/setup-keys
    method: GET
- name: groups
  endpoint:
    path: /api/resources/groups
    method: GET
- name: networks
  endpoint:
    path: /api/resources/networks
    method: GET
- name: policies
  endpoint:
    path: /api/resources/policies
    method: GET
- name: routes
  endpoint:
    path: /api/resources/routes
    method: GET
- name: dns
  endpoint:
    path: /api/resources/dns
    method: GET
- name: events
  endpoint:
    path: /api/resources/events
    method: GET
- name: accounts
  endpoint:
    path: /api/resources/accounts
    method: GET
- name: users
  endpoint:
    path: /api/resources/users
    method: GET
- name: tokens
  endpoint:
    path: /api/resources/tokens
    method: GET
- name: peers
  endpoint:
    path: /api/resources/peers
    method: GET
- name: setup_keys
  endpoint:
    path: /api/resources/setup-keys
    method: GET
- name: groups
  endpoint:
    path: /api/resources/groups
    method: GET
- name: networks
  endpoint:
    path: /api/resources/networks
    method: GET
- name: policies
  endpoint:
    path: /api/resources/policies
    method: GET
- name: dns
  endpoint:
    path: /api/resources/dns
    method: GET
- name: events
  endpoint:
    path: /api/resources/events
    method: GET
- name: peers
  endpoint:
    path: /api/peers
    method: GET
    data_selector: records
- name: peers
  endpoint:
    path: /api/peers
    method: GET
    data_selector: records
- name: accounts
  endpoint:
    path: /api/accounts
    method: GET
    data_selector: records
- name: update_account
  endpoint:
    path: /api/accounts/{accountId}
    method: PUT
    data_selector: settings
- name: accounts
  endpoint:
    path: /api/accounts
    method: GET
    data_selector: accounts
- name: current_user
  endpoint:
    path: /api/users/current
    method: GET
    data_selector: records
- name: users
  endpoint:
    path: /api/users
    method: GET
    data_selector: records
- name: current_user
  endpoint:
    path: /api/users/current
    method: GET
    data_selector: ''
- name: list_all_tokens
  endpoint:
    path: /api/users/{userId}/tokens
    method: GET
- name: create_token
  endpoint:
    path: /api/users/{userId}/tokens
    method: POST
- name: retrieve_token
  endpoint:
    path: /api/users/{userId}/tokens/{tokenId}
    method: GET
- name: delete_token
  endpoint:
    path: /api/users/{userId}/tokens/{tokenId}
    method: DELETE
- name: tokens
  endpoint:
    path: /api/users/{userId}/tokens
    method: GET
    data_selector: tokens
- name: create_token
  endpoint:
    path: /api/users/{userId}/tokens
    method: POST
    data_selector: token
- name: retrieve_token
  endpoint:
    path: /api/users/{userId}/tokens/{tokenId}
    method: GET
    data_selector: token
- name: delete_token
  endpoint:
    path: /api/users/{userId}/tokens/{tokenId}
    method: DELETE
    data_selector: response
- name: peers
  endpoint:
    path: /api/peers
    method: GET
    data_selector: records
    params: {}
- name: accessible_peers
  endpoint:
    path: /api/peers/{peerId}/accessible-peers
    method: GET
    data_selector: records
    params: {}
- name: port_allocation
  endpoint:
    path: /api/ingress/ports
    method: GET
    data_selector: records
- name: ingress_peer
  endpoint:
    path: /api/ingress/peers
    method: GET
    data_selector: records
- name: peers
  endpoint:
    path: /api/peers
    method: GET
    data_selector: records
    params: {}
- name: accessible_peers
  endpoint:
    path: /api/peers/{peerId}/accessible-peers
    method: GET
    data_selector: records
    params: {}
- name: ingress_peer
  endpoint:
    path: /api/ingress/peers/{ingressPeerId}
    method: DELETE
- name: port_allocation
  endpoint:
    path: /api/ingress/peers/{peerId}/ingress/ports
    method: GET
    data_selector: records
- name: ingress_peer
  endpoint:
    path: /api/ingress/peers
    method: GET
    data_selector: records
- name: setup_keys
  endpoint:
    path: /api/setup-keys
    method: GET
    data_selector: records
- name: ingress_peer
  endpoint:
    path: /api/ingress/peers/{ingressPeerId}
    method: DELETE
    data_selector: id
    params: {}
- name: groups
  endpoint:
    path: /api/groups
    method: GET
    data_selector: groups
- name: delete_group
  endpoint:
    path: /api/groups/{groupId}
    method: DELETE
- name: setup_keys
  endpoint:
    path: /api/setup-keys
    method: GET
    data_selector: records
- name: policies
  endpoint:
    path: /api/policies
    method: GET
    data_selector: records
- name: policy
  endpoint:
    path: /api/policies/{policyId}
    method: DELETE
- name: groups
  endpoint:
    path: /api/groups
    method: GET
    data_selector: groups
- name: posture_checks
  endpoint:
    path: /api/posture-checks
    method: GET
    data_selector: records
- name: policies
  endpoint:
    path: /api/policies
    method: GET
    data_selector: null
    params: {}
- name: delete_posture_check
  endpoint:
    path: /api/posture-checks/{postureCheckId}
    method: DELETE
- name: policy
  endpoint:
    path: /api/policies/{policyId}
    method: DELETE
- name: posture_checks
  endpoint:
    path: /api/posture-checks
    method: GET
    data_selector: records
- name: countries
  endpoint:
    path: /api/locations/countries
    method: GET
    data_selector: geoname_id
    params: {}
- name: cities
  endpoint:
    path: /api/locations/countries/{country}/cities
    method: GET
    data_selector: city_name
    params: {}
- name: posture_check
  endpoint:
    path: /api/posture-checks/{postureCheckId}
    method: DELETE
- name: routes
  endpoint:
    path: /api/routes
    method: GET
    data_selector: routes
    params: {}
- name: countries
  endpoint:
    path: /api/locations/countries
    method: GET
    data_selector: records
- name: city_names_by_country
  endpoint:
    path: /api/locations/countries/{country}/cities
    method: GET
    data_selector: records
- name: nameserver_groups
  endpoint:
    path: /api/dns/nameservers
    method: GET
    data_selector: disabled_management_groups
    params: {}
- name: dns_settings
  endpoint:
    path: /api/dns/settings
    method: PUT
    data_selector: disabled_management_groups
    params: {}
- name: routes
  endpoint:
    path: /api/routes
    method: GET
    data_selector: routes
- name: Nameserver Groups
  endpoint:
    path: /api/dns/nameservers
    method: GET
- name: Update DNS Settings
  endpoint:
    path: /api/dns/settings
    method: PUT
- name: network_traffic
  endpoint:
    path: /api/events/network-traffic
    method: GET
    data_selector: data
    params:
      page: optional
      page_size: optional
      user_id: optional
      reporter_id: optional
      protocol: optional
      type: optional
      connection_type: optional
      direction: optional
      search: optional
      start_date: optional
      end_date: optional
- name: network_traffic
  endpoint:
    path: /api/events/network-traffic
    method: GET
    data_selector: data
    params: {}
- name: Linux Install Script
  endpoint:
    path: /how-to/installation/linux#linux-install-script
    method: GET
    data_selector: script
    params: {}
- name: Ubuntu/Debian (APT)
  endpoint:
    path: /how-to/installation/linux#ubuntu-debian-apt
    method: GET
    data_selector: installation
    params: {}
- name: RHEL/Amazon Linux 2 (RPM)
  endpoint:
    path: /how-to/installation/linux#rhel-amazon-linux-2-rpm
    method: GET
    data_selector: installation
    params: {}
- name: Fedora/Amazon Linux 2023 (DNF)
  endpoint:
    path: /how-to/installation/linux#fedora-amazon-linux-2023-dnf
    method: GET
    data_selector: installation
    params: {}
- name: openSUSE (zypper)
  endpoint:
    path: /how-to/installation/linux#open-suse-zypper
    method: GET
    data_selector: installation
    params: {}
- name: Desktop UI Application
  endpoint:
    path: /how-to/installation/linux#desktop-ui-application
    method: GET
    data_selector: application
    params: {}
- name: Linux Install Script
  endpoint:
    path: /how-to/installation/linux#linux-install-script
    method: GET
    data_selector: ''
    params: {}
- name: Ubuntu/Debian (APT)
  endpoint:
    path: /how-to/installation/linux#ubuntu-debian-apt
    method: GET
    data_selector: ''
    params: {}
- name: RHEL/Amazon Linux 2 (RPM)
  endpoint:
    path: /how-to/installation/linux#rhel-amazon-linux-2-rpm
    method: GET
    data_selector: ''
    params: {}
- name: Fedora/Amazon Linux 2023 (DNF)
  endpoint:
    path: /how-to/installation/linux#fedora-amazon-linux-2023-dnf
    method: GET
    data_selector: ''
    params: {}
- name: Universal Blue (Native package)
  endpoint:
    path: /how-to/installation/linux#universal-blue-native-package
    method: GET
    data_selector: ''
    params: {}
- name: Fedora Universal Blue / SteamOS (DistroBox)
  endpoint:
    path: /how-to/installation/linux#fedora-universal-blue-steam-os-distro-box
    method: GET
    data_selector: ''
    params: {}
- name: openSUSE (zypper)
  endpoint:
    path: /how-to/installation/linux#open-suse-zypper
    method: GET
    data_selector: ''
    params: {}
- name: NixOS 22.11+/unstable
  endpoint:
    path: /how-to/installation/linux#nix-os-22-11-unstable
    method: GET
    data_selector: ''
    params: {}
- name: Binary Install
  endpoint:
    path: /how-to/installation/linux#binary-install
    method: GET
    data_selector: ''
    params: {}
- name: install_script
  endpoint:
    path: /install.sh
    method: GET
    data_selector: script
- name: download_intel
  endpoint:
    path: /macos/amd64
    method: GET
    data_selector: download_link
- name: download_apple_silicon
  endpoint:
    path: /macos/arm64
    method: GET
    data_selector: download_link
- name: Linux Install Script
  endpoint:
    path: /how-to/installation/linux#linux-install-script
    method: GET
    data_selector: script
    params: {}
- name: Ubuntu/Debian (APT)
  endpoint:
    path: /how-to/installation/linux#ubuntu-debian-apt
    method: GET
    data_selector: commands
    params: {}
- name: RHEL/Amazon Linux 2 (RPM)
  endpoint:
    path: /how-to/installation/linux#rhel-amazon-linux-2-rpm
    method: GET
    data_selector: commands
    params: {}
- name: Fedora/Amazon Linux 2023 (DNF)
  endpoint:
    path: /how-to/installation/linux#fedora-amazon-linux-2023-dnf
    method: GET
    data_selector: commands
    params: {}
- name: openSUSE (zypper)
  endpoint:
    path: /how-to/installation/linux#open-suse-zypper
    method: GET
    data_selector: commands
    params: {}
- name: Desktop UI Application
  endpoint:
    path: /how-to/installation/linux#desktop-ui-application
    method: GET
    data_selector: instructions
    params: {}
- name: pfSense Installation
  endpoint:
    path: /how-to/installation/pfsense
    method: GET
    data_selector: installation
- name: NetBird Installation
  endpoint:
    path: /how-to/installation/synology
    method: GET
    data_selector: records
- name: NetBird Authentication
  endpoint:
    path: /authenticate
    method: POST
    data_selector: authentication_response
- name: up
  endpoint:
    path: /api/up
    method: POST
- name: login
  endpoint:
    path: /api/login
    method: POST
- name: down
  endpoint:
    path: /api/down
    method: POST
- name: setup_key
  endpoint:
    path: /setup-keys
    method: POST
    data_selector: setup_key
    params: {}
- name: network_route
  endpoint:
    path: /network-routes
    method: POST
    data_selector: network_route
    params: {}
- name: access_control_policy
  endpoint:
    path: /access-control-policies
    method: POST
    data_selector: access_control_policy
    params: {}
- name: netbird_agent_deployment
  endpoint:
    path: /deployments
    method: POST
    data_selector: deployment
    params: {}
- name: setup_key
  endpoint:
    path: /setup-keys
    method: POST
    data_selector: setup_key
    params: {}
- name: network_route
  endpoint:
    path: /network-routes
    method: POST
    data_selector: network_route
    params: {}
- name: access_control_policy
  endpoint:
    path: /access-control-policies
    method: POST
    data_selector: access_policy
    params: {}
- name: netbird_agent
  endpoint:
    path: /agents
    method: POST
    data_selector: agent
    params: {}
- name: container
  endpoint:
    path: /container
    method: GET
    data_selector: records
    params: {}
- name: management
  endpoint:
    path: /management.ManagementService/
    method: GET
- name: signal
  endpoint:
    path: /signalexchange.SignalExchange/
    method: GET
- name: management_service
  endpoint:
    path: /management
    method: GET
    data_selector: data
- name: StoreConfig
  endpoint:
    path: /selfhosted/postgres-store
    method: GET
    data_selector: Engine
    params: {}
- name: activity_events
  endpoint:
    path: /selfhosted/activity-postgres-store
    method: POST
    data_selector: events
    params:
      store_engine: postgres
      dsn: host=localhost port=5432 user=<user> password=<password> dbname=<db_name>
- name: netbird
  endpoint:
    path: /realms/netbird/.well-known/openid-configuration
    method: GET
- name: Netbird
  endpoint:
    path: /realms/netbird/.well-known/openid-configuration
    method: GET
- name: NetBird
  endpoint:
    path: /silent-auth
    method: POST
    data_selector: data
    params: {}
- name: GeoLite2 City Database
  endpoint:
    path: https://pkgs.netbird.io/geolocation-dbs/GeoLite2-City/download?suffix=tar.gz
    method: GET
- name: GeoLite2 City Database (SHA256)
  endpoint:
    path: https://pkgs.netbird.io/geolocation-dbs/GeoLite2-City/download?suffix=tar.gz.sha256
    method: GET
- name: GeoLite2 City CSV Database
  endpoint:
    path: https://pkgs.netbird.io/geolocation-dbs/GeoLite2-City-CSV/download?suffix=zip
    method: GET
- name: GeoLite2 City CSV Database (SHA256)
  endpoint:
    path: https://pkgs.netbird.io/geolocation-dbs/GeoLite2-City-CSV/download?suffix=zip.sha256
    method: GET
- name: GeoLite2 City Database
  endpoint:
    path: /geolocation-dbs/GeoLite2-City/download?suffix=tar.gz
    method: GET
- name: GeoLite2 City Database (SHA256)
  endpoint:
    path: /geolocation-dbs/GeoLite2-City/download?suffix=tar.gz.sha256
    method: GET
- name: GeoLite2 City CSV Database
  endpoint:
    path: /geolocation-dbs/GeoLite2-City-CSV/download?suffix=zip
    method: GET
- name: GeoLite2 City CSV Database (SHA256)
  endpoint:
    path: /geolocation-dbs/GeoLite2-City-CSV/download?suffix=zip.sha256
    method: GET
- name: internal_networks
  endpoint:
    path: /how-to/troubleshooting-client#glossary
    method: GET
- name: access_control
  endpoint:
    path: /how-to/troubleshooting-client#access-from-peer-a-to-srv-c
    method: GET
- name: int-net1
  endpoint:
    path: /how-to/troubleshooting-client#glossary
    method: GET
    data_selector: resources
    params: {}
- name: srv-c
  endpoint:
    path: /how-to/troubleshooting-client#glossary
    method: GET
    data_selector: resources
    params: {}
- name: int-dns1
  endpoint:
    path: /how-to/troubleshooting-client#glossary
    method: GET
    data_selector: resources
    params: {}
- name: int-dns2
  endpoint:
    path: /how-to/troubleshooting-client#glossary
    method: GET
    data_selector: resources
    params: {}
- name: cf-dns
  endpoint:
    path: /how-to/troubleshooting-client#glossary
    method: GET
    data_selector: resources
    params: {}
- name: peer-a
  endpoint:
    path: /how-to/troubleshooting-client#glossary
    method: GET
    data_selector: resources
    params: {}
- name: peer-b
  endpoint:
    path: /how-to/troubleshooting-client#glossary
    method: GET
    data_selector: resources
    params: {}
- name: users:employees
  endpoint:
    path: /how-to/troubleshooting-client#glossary
    method: GET
    data_selector: resources
    params: {}
- name: routers:int-net1
  endpoint:
    path: /how-to/troubleshooting-client#glossary
    method: GET
    data_selector: resources
    params: {}
- name: access:srv-c
  endpoint:
    path: /how-to/troubleshooting-client#glossary
    method: GET
    data_selector: resources
    params: {}
- name: access:int-net1
  endpoint:
    path: /how-to/troubleshooting-client#glossary
    method: GET
    data_selector: resources
    params: {}
- name: net-a
  endpoint:
    path: /how-to/troubleshooting-client#glossary
    method: GET
    data_selector: resources
    params: {}
- name: route:int-net1
  endpoint:
    path: /how-to/troubleshooting-client#glossary
    method: GET
    data_selector: resources
    params: {}
- name: route:srv-c
  endpoint:
    path: /how-to/troubleshooting-client#glossary
    method: GET
    data_selector: resources
    params: {}
- name: network_resources
  endpoint:
    path: /api/v1/network_resources
    method: GET
    data_selector: resources
    params: {}
- name: access_control_rules
  endpoint:
    path: /api/v1/access_control_rules
    method: GET
    data_selector: rules
    params: {}
- name: net-a
  endpoint:
    path: /net-a
    method: GET
    data_selector: net_resources
    params: {}
- name: srv-c
  endpoint:
    path: /srv-c
    method: GET
    data_selector: srv_details
    params: {}
- name: int-net1
  endpoint:
    path: /int-net1
    method: GET
    data_selector: network_details
    params: {}
- name: users
  endpoint:
    path: /api/users
    method: POST
    data_selector: users
    params: {}
- name: user_approval
  endpoint:
    path: /how-to/approve-users#require-user-approval
    method: GET
    data_selector: enabled
- name: network_route
  endpoint:
    path: /routes
    method: POST
    data_selector: routes
    params: {}
- name: indirect_user_invites
  endpoint:
    path: /how-to/add-users-to-your-network#indirect-user-invites
    method: GET
- name: direct_user_invites
  endpoint:
    path: /how-to/add-users-to-your-network#direct-user-invites
    method: GET
- name: identity_provider_sync
  endpoint:
    path: /how-to/add-users-to-your-network#identity-provider-id-p-sync
    method: GET
- name: manage_user_roles
  endpoint:
    path: /how-to/add-users-to-your-network#manage-user-roles
    method: GET
- name: network_route
  endpoint:
    path: /how-to/routing-traffic-to-private-networks
    method: GET
    data_selector: ''
    params: {}
notes:
- Peer Identifier associated with route can not be set together with peer_groups.
- Peers Group Identifier associated with route can not be set together with peer.
- If you are self-hosting netbird, and used the advanced guide, you may need to use
  port 33073 with your management URL.
- Requires setup of API key for authorization
- Route metric number. Lowest number has higher priority
- Indicate if the route should be kept after a domain doesn't resolve that IP anymore
- Authorization requires a Token
- 'NetBird relies on four components: Client application, Management, Signal, and
  Relay services.'
- The Management service runs in the cloud NetBird-managed. It can also be self-hosted.
- All connections are made directly from the user's browser to target peers.
- Temporary peer will be automatically removed from the management server after 10
  minutes of inactivity.
- NetBird simplifies the setup by automatically generating private and public keys,
  assigning unique private IP addresses, and takes care of sharing public keys between
  the machines.
- The Browser Client enables secure remote connections directly from web browsers
  without requiring client software installation.
- Uses OAuth2 with refresh token — requires setup of connected app in api
- Supports any OIDC-compliant provider, including social logins like Gmail and GitHub
  for personal use.
- Multi-factor authentication (MFA) is supported.
- If you installed the Desktop UI client, you can launch it and click on Connect.
- It will open your browser, and you will be prompt for email and password.
- MFA enabled on IdP account will work automatically.
- Alternatively, you could use command line.
- After installing, you can follow the steps from Running NetBird with SSO Login.
- To uninstall the client remove the app from /Applications
- netbird will copy any existing configuration from the netbird's default configuration
  paths to the new NetBird's default location
- NetBird makes use of eBPF and raw sockets, therefore to guarantee the client software
  functionality, we recommend adding the flags `--cap-add=SYS_ADMIN` and `--cap-add=SYS_RESOURCE`
  for docker clients.
- The experience may vary depending on the docker daemon, operating system, or kernel
  version.
- If you installed the Desktop UI client, you can launch it and click on Connect.
  It will open your browser, and you will be prompt for email and password.
- In case you are activating a server peer, you can use a setup key as described in
  the steps below.
- Requires setup of connected app in api
- This installation is intended for early adopters while the pfSense package is under
  review and not yet available in the pfSense package manager.
- If netbird was previously installed with homebrew, you will need to run commands
  to stop and uninstall the daemon service.
- Netbird will copy any existing configuration from the netbird's default configuration
  paths to the new NetBird's default location.
- Some objects like Contact may return nulls in deeply nested fields
- If a NetBird deployment is not yet available, there are both managed and self-hosted
  options available.
- In some cases on Synology, the NetBird service will not have the correct modules
  loaded on a reboot.
- Uses a command-line interface to interact with the daemon service
- Ensure that SSH Access is enabled both on the target peer and in the NetBird Dashboard
- Users cannot create, switch, or remove profiles when profiles are disabled
- The client operates with a single, fixed configuration when profiles are disabled
- The command will check if the peer is logged in and connect to the management service.
- If the peer is not logged in, by default, it will attempt to initiate an SSO login
  flow.
- 'Management: Connected to https://api.netbird.io:33073'
- 'Signal:  Connected to https://signal2.wiretrustee.com:10000'
- NetBird agent can be deployed using a daemon set or deployment.
- For high availability, increase the number of replicas in the deployment configuration.
- Profiles feature can be disabled using the --disable-profiles flag.
- Users cannot create, switch, or remove profiles when profiles are disabled.
- The DNS feature is not supported. You can reach the peers by IP address only.
- Uses RouterOS containers which are CPU-bound and may not be suitable for large file
  transfers.
- NetBird in RouterOS containers cannot perform NAT but can do direct routing.
- Setup key is passed as an environment variable.
- Make deployment highly available by increasing replicas.
- It should take around 5 minutes to get started if you already have a public domain
  and a VM.
- You would need to obtain a setup key to associate NetBird client with your account.
- The setup key could be found in the NetBird Management dashboard under the Setup
  Keys tab.
- RouterOS containers are unsupported by both MikroTik and NetBird.
- Routing through RouterOS containers is relatively slow and CPU intensive.
- NetBird is open-source and can be self-hosted on your servers.
- A Linux VM with at least 1CPU and 2GB of memory is required.
- Management service runs in a single account mode by default since version v0.10.1.
- It might be a good idea to try NetBird before self-hosting on your servers.
- The NetBird quickstart script generates a user name and a password for the administrator.
- NetBird supports automatic renewal by default when using Let's Encrypt.
- Single account mode ensures that all the users signing up for your self-hosted installation
  will join the same account/network.
- SQLite is the default storage engine for new installations.
- Switching between storage options requires migration steps to prevent data loss.
- Foreign key constraints are enforced in PostgreSQL, including cascading deletes.
- Starting from version 0.26.0, SQLite is the default storage engine for new installations.
- As of version 0.26.0, the default configuration for fresh installations is SQLite
  storage.
- 'To enable Postgres, add to your setup.env the following variable: NETBIRD_STORE_CONFIG_ENGINE=postgres.'
- To enable Postgres, set NB_ACTIVITY_EVENT_STORE_ENGINE to postgres
- The default configuration for fresh installations is SQLite storage.
- Double-check if the endpoint returns a JSON response by calling it from your browser.
- Make sure that your Keycloak instance use HTTPS. Otherwise, the setup won't work.
- Azure AD is a managed service and can't be self-hosted.
- Okta is a managed service and can't be self-hosted.
- Google Workspace integration requires Admin SDK API to be enabled.
- This guide is a part of the NetBird Self-hosting Guide and explains how to integrate
  self-hosted NetBird with Auth0.
- Auth0 is a flexible, drop-in solution to add authentication and authorization services
  to your applications.
- NETBIRD_USE_AUTH0 should be set to true in the setup.env file.
- Token Endpoint Authentication Method should be set to None.
- GeoLite2 databases are updated twice a week to reflect changes in geolocation data.
- To disable automatic updates, pass the --disable-geolite-update flag to the management
  command.
- If srflx and relay are not present then the TURN server is not working or not accessible
  and you should review the required ports in the requirements section.
- The `management` service checks for outdated databases upon startup.
- A single machine can only connect to one NetBird account as the same user/login
  method throughout the lifetime of the config.json file
- Client logs are located in the `/var/log/netbird/client.log` file on macOS and Linux
  and in the `C:\ProgramData\netbird\client.log` file on Windows.
- Access Control rule is not required for connectivity from `peer-a` to `peer-b`
- Uses OAuth2 with refresh token — requires setup of connected app in NetBird
- Some objects may return nulls in deeply nested fields
- Netbird client acts as a proxy for public nameservers.
- Ensure proper configuration of routing and access control rules.
- To configure int-dns1, substitute port 80 for port 53 and substitute ip address
  10.123.45.17 for 10.123.45.6.
- To configure int-dns2, substitute port 80 for port 53, ignore the 10.123.45.0/24
  network instructions, substitute ip address 10.123.45.17 for 10.7.8.9, and create
  a respective Network or Network Route for the 10.7.8.9/32 IP address range.
- The default logging level is info. To revert back to the original state, you can
  repeat the procedure with info instead of debug or trace.
- The Default policy is created when you first create your account.
- The 'All' group serves as a default group that automatically includes every peer
  in your network.
- Uses setup keys for authentication of machines.
- Access Control rule is not required for connectivity from peer-a to peer-b
- To configure int-dns2, substitute port 80 for port 53, completely ignore the 10.123.45.0/24
  network instructions, substitute ip address 10.123.45.17 for 10.7.8.9, and create
  a respective Network (along with Resources and Routing Peers) or Network Route for
  the 10.7.8.9/32 IP address range.
- Nameservers feature is available in NetBird v0.11.0 or later on both cloud and self-hosted
  versions.
- 'DNS Forwarder port change: starting with NetBird v0.59.0, the local DNS forwarder
  used for routed DNS routes switches from port 5353 to 22054.'
- Default policy allows communication between all peers in your network.
- Users can only be invited if they do not already have a NetBird account.
- By default, every reusable key has unlimited usage.
- 'DNS Forwarder port change: starting with NetBird v0.59.0, the local DNS forwarder
  used for routed DNS routes switches from port 5353 to 22054 to avoid collisions
  on client devices.'
- If any peer is below v0.59.0, port 5353 will be used for all peers in that account.
- Requires manual approval for new users joining via domain matching if enabled.
- Users will be blocked until approved.
- Network routes are available in NetBird v0.9.0 or later.
- DNS Routes are available for NetBird v0.28.0 or later.
- This feature isn't available in the self-hosted setup.
- You can run the netbird up command in the terminal to connect.
- A successful ping response confirms that your routing peer is correctly routing
  traffic to resources in your home network.
- Any peer included in your access policy can now securely access resources in your
  home subnet via your designated routing peer, without the need to open router ports
  or install software on every device.
errors:
- 'REQUEST_LIMIT_EXCEEDED: Throttle API calls or reduce frequency'
- 'QUERY_TIMEOUT: Break down filters or add selectivity'
- '401 Unauthorized: Recheck OAuth scopes or token expiration'
- A 4xx status code indicates a client error - those are mostly related to missing
  permissions or invalid parameters inside the request.
- A 5xx status code indicates a server error - in this case please reach out to us
  via Slack or GitHub.
- '2xx: A 2xx status code indicates a successful response.'
- '4xx: A 4xx status code indicates a client error - those are mostly related to missing
  permissions or invalid parameters inside the request.'
- '5xx: A 5xx status code indicates a server error - in this case please reach out
  to us via Slack or GitHub.'
- '401 Unauthorized: Recheck API token or permissions'
- '401 Unauthorized: Recheck API key or token expiration'
- '401 Unauthorized: Recheck API token'
- '401 Unauthorized: Recheck API key or token'
- 'Request timeout: Connection blocked by access policy.'
- Be very careful when using the rm -rf command, as it will permanently delete the
  specified files and directories. Double-check the paths before executing the command.
- 'Error setting up sysctl: 1 errors occurred'
- 'io timeout: check the connectivity to signal.netbird.io'
- Error when migrating due to compatibility issues.
- '2025-04-08T15:03:04+01:00 ERRO management/client/grpc.go:351: failed to login to
  Management Service: rpc error: code = PermissionDenied desc = peer login has expired,
  please log in once more'
- '2025-04-08T15:03:04+01:00 ERRO management/client/grpc.go:351: failed to login to
  Management Service: rpc error: code = PermissionDenied desc = invalid user'
- '2025-04-08T15:03:04+01:00 ERRO client/internal/login.go:145: failed registering
  peer rpc error: code = PermissionDenied desc = invalid user,00000000-0000-0000-0000-000000000000'
- '2025-04-08T15:03:04+01:00 WARN client/server/server.go:267: failed login: rpc error:
  code = PermissionDenied desc = invalid user'
- '401 Unauthorized: Check OAuth token validity.'
- '403 Forbidden: Access denied, check ACL rules.'
- 'USER_ALREADY_EXISTS: The user already has an account and cannot be invited.'
auth_info:
  mentioned_objects: []
client:
  base_url: https://api.netbird.io
  headers:
    Accept: application/json
source_metadata: null
