resources:
- name: organization
  endpoint:
    path: /graphql
    method: POST
    data_selector: data.organization
    params: {}
- name: automation_logs
  endpoint:
    path: /automationLogs
    method: POST
    data_selector: data.automationLogs.edges
    params:
      automationId: required
      status: optional
      searchTerm: optional
- name: automation_initial_values
  endpoint:
    path: /automationInitialValues
    method: POST
    data_selector: data.automationInitialValues
    params:
      actionId: apply_sla_rules
- name: createPipe
  endpoint:
    path: /graphql
    method: POST
    data_selector: data.createPipe.pipe.id
- name: automated_formula_operations
  endpoint:
    path: /automatedFormulaOperations
    method: POST
    data_selector: data.automatedFormulaOperations
- name: automationActions
  endpoint:
    path: /automationActions
    method: POST
    data_selector: data.automationActions
    params: {}
- name: automationEvents
  endpoint:
    path: /automationEvents
    method: POST
    data_selector: data.automationEvents
    params: {}
- name: automationEventsByPhase
  endpoint:
    path: /automationEventsByPhase
    method: POST
    data_selector: data.automationEventsByPhase
    params: {}
- name: createPhaseField
  endpoint:
    path: /graphql
    method: POST
    data_selector: data.createPhaseField
    params: {}
- name: createPresignedUrl
  endpoint:
    path: /graphql
    method: POST
    data_selector: data.createPresignedUrl.url
- name: updateCardField
  endpoint:
    path: /graphql
    method: POST
    data_selector: data.updateCardField.success
- name: automations
  endpoint:
    path: /automations
    method: POST
    data_selector: automations
    params: {}
- name: automation
  endpoint:
    path: /graphql
    method: POST
    data_selector: data.automation
    params: {}
- name: pipe
  endpoint:
    path: /graphql
    method: POST
    data_selector: data
    params: {}
- name: user
  endpoint:
    path: /users
    method: GET
    data_selector: me
- name: card
  endpoint:
    path: /graphql
    method: POST
    data_selector: data
    params: {}
- name: organizations
  endpoint:
    path: ''
    method: POST
    data_selector: data.organizations
    params: {}
- name: organizations
  endpoint:
    path: /organizations
    method: QUERY
    data_selector: organizations
    params: {}
- name: organization
  endpoint:
    path: /organization
    method: QUERY
    data_selector: organization
    params: {}
- name: createOrganization
  endpoint:
    path: /createOrganization
    method: MUTATION
    data_selector: createOrganization
    params: {}
- name: updateOrganization
  endpoint:
    path: /updateOrganization
    method: MUTATION
    data_selector: updateOrganization
    params: {}
- name: deleteOrganization
  endpoint:
    path: /deleteOrganization
    method: MUTATION
    data_selector: deleteOrganization
    params: {}
- name: fields
  endpoint:
    path: /fields
    method: GET
    data_selector: fields
- name: start_form_fields
  endpoint:
    path: /pipe/{id}/start_form_fields
    method: GET
    data_selector: start_form_fields
- name: phase_fields
  endpoint:
    path: /pipe/{id}/phases
    method: GET
    data_selector: phases
- name: table_fields
  endpoint:
    path: /table/{id}/table_fields
    method: GET
    data_selector: table_fields
- name: table
  endpoint:
    path: /graphql
    method: POST
    data_selector: data.table
    params: {}
- name: phase
  endpoint:
    path: /graphql
    method: POST
    data_selector: phase
    params: {}
- name: table_records
  endpoint:
    path: /graphql
    method: POST
    data_selector: data
    params: {}
- name: createAutomationJobsExport
  endpoint:
    path: /createAutomationJobsExport
    method: POST
    data_selector: data.createAutomationJobsExport
    params:
      organizationId: '123456789'
      filter: last_month
- name: automationJobsExport
  endpoint:
    path: /automationJobsExport
    method: POST
    data_selector: data.automationJobsExport
    params:
      id: the-id-returned-by-mutation
- name: createCard
  endpoint:
    path: /graphql
    method: POST
    data_selector: data.createCard
    params: {}
- name: card
  endpoint:
    path: /card
    method: POST
    data_selector: data.card
    params: {}
- name: automation_logs
  endpoint:
    path: /automationLogsByRepo
    method: POST
    data_selector: data.automationLogsByRepo.edges
    params:
      repoId: repoId
      status: status
      searchTerm: searchTerm
- name: automationEventAttributes
  endpoint:
    path: automationEventAttributes
    method: POST
    data_selector: data.automationEventAttributes
- name: organization_members
  endpoint:
    path: /graphql
    method: POST
    data_selector: data.organization.members
    params: {}
- name: organizationSettings
  endpoint:
    path: /graphql
    method: POST
    data_selector: data.organizationSettings
    params:
      id: '123'
- name: createPhaseField
  endpoint:
    path: /graphql
    method: POST
    data_selector: data.createPhaseField.phase_field
    params: {}
- name: createPipe
  endpoint:
    path: /graphql
    method: POST
    data_selector: data.createPipe.pipe.id
- name: phaseSettings
  endpoint:
    path: /phases
    method: POST
    data_selector: data.phaseSettings
    params: {}
- name: userSuggestions
  endpoint:
    path: /graphql
    method: POST
    data_selector: data.usersSuggestions
- name: setRoles
  endpoint:
    path: /graphql
    method: POST
    data_selector: data.setRoles
    params: {}
- name: add_tags_to_resource
  endpoint:
    path: /addTagsToResource
    method: POST
    data_selector: data.addTagsToResource
    params: {}
- name: organization_webhooks
  endpoint:
    path: /
    method: POST
    data_selector: webhooks
    params: {}
- name: create_organization_webhook
  endpoint:
    path: /
    method: POST
    data_selector: createOrganizationWebhook
    params: {}
- name: update_organization_webhook
  endpoint:
    path: /
    method: POST
    data_selector: updateOrganizationWebhook
    params: {}
- name: delete_organization_webhook
  endpoint:
    path: /
    method: POST
    data_selector: deleteOrganizationWebhook
    params: {}
- name: webhook
  endpoint:
    path: /webhooks
    method: POST
    data_selector: webhook
    params: {}
- name: automation
  endpoint:
    path: /graphql
    method: POST
    data_selector: data.automation
    params: {}
- name: createOrganizationWebhook
  endpoint:
    path: /createOrganizationWebhook
    method: POST
    data_selector: createOrganizationWebhook
    params: {}
- name: createWebhookForPipe
  endpoint:
    path: /createWebhook
    method: POST
    data_selector: createWebhook
    params: {}
- name: createWebhookForTable
  endpoint:
    path: /createWebhook
    method: POST
    data_selector: createWebhook
    params: {}
- name: listWebhooksForOrganization
  endpoint:
    path: /organization/{id}
    method: GET
    data_selector: webhooks
    params: {}
- name: listWebhooksForPipe
  endpoint:
    path: /pipe/{id}
    method: GET
    data_selector: webhooks
    params: {}
- name: listWebhooksForTable
  endpoint:
    path: /table/{id}
    method: GET
    data_selector: webhooks
    params: {}
- name: cards
  endpoint:
    path: /api/cards
    method: POST
- name: field
  endpoint:
    path: /graphql
    method: POST
    data_selector: data.field
    params: {}
- name: createPresignedUrl
  endpoint:
    path: /graphql
    method: POST
    data_selector: data.createPresignedUrl.url
- name: updateCardField
  endpoint:
    path: /graphql
    method: POST
    data_selector: data.updateCardField.success
- name: organization
  endpoint:
    path: /graphql
    method: POST
    data_selector: data.organization
    params: {}
- name: create_pipe
  endpoint:
    path: /createPipe
    method: POST
    data_selector: data.createPipe.pipe.id
- name: records_importer
  endpoint:
    path: /
    method: POST
    data_selector: recordsImportation
    params:
      tableId: p0A_JWST
      url: https://docs.google.com/spreadsheets/d/13sohSO0eGjgZYqQSFyp0LUFwZhktiU9t3BX6Sgnb_yk/export?format=xlsx
      statusColumn: d
      fieldValuesColumns:
      - column: e
        fieldId: company_name
      - column: f
        fieldId: contact_email
- name: cardsImporter
  endpoint:
    path: ''
    method: POST
    data_selector: cardsImportation
    params:
      pipeId: '219739'
      url: https://docs.google.com/spreadsheets/d/13sohSO0eGjgZYqQSFyp0LUFwZhktiU9t3BX6Sgnb_yk/export?format=xlsx
      assigneesColumn: a
      labelsColumn: b
      dueDateColumn: c
      currentPhaseColumn: d
      fieldValuesColumns:
      - column: e
        fieldId: company_name
      - column: f
        fieldId: contact_email
      - column: g
        fieldId: deal_value
- name: add_tags_to_resource
  endpoint:
    path: /addTagsToResource
    method: POST
    data_selector: data.addTagsToResource
    params:
      resourceType: pipe
      resourceUuid: pipe-uuid-example
      tagsUuids:
      - tag-uuid-1
      - tag-uuid-2
- name: inviteMembers
  endpoint:
    path: /mutations/inviteMembers
    method: POST
    data_selector: clientMutationId
    params: {}
- name: removeUserFromOrg
  endpoint:
    path: /mutations/removeUserFromOrg
    method: POST
    data_selector: clientMutationId
    params: {}
- name: removeUserFromPipe
  endpoint:
    path: /mutations/removeUserFromPipe
    method: POST
    data_selector: clientMutationId
    params: {}
- name: removeUserFromTable
  endpoint:
    path: /mutations/removeUserFromTable
    method: POST
    data_selector: clientMutationId
    params: {}
notes:
- Personal Access Tokens are deprecated.
- Use a Service Account token with permissions to view automations
- Use a Service Account token (Personal Access Tokens are deprecated).
- Ensure your token has the necessary permissions.
- Must be unique within the organization
- Ensure labels use valid hex codes
- Use a Service Account token (Personal Access Tokens are deprecated)
- Repo ID is needed to retrieve the automation actions; if omitted, all actions will
  be returned but some might be disabled
- This data is updated once a day, so results will not consider changes occurred in
  the current day.
- If authentication fails, the process stops immediately.
- An API token is required to access data.
- The current complexity limit is 50,000.
- The current depth limit is 15.
- The current time limit is 33 seconds.
- Personal Access Tokens are not intended to be used in production environments and
  process integrations, as Service Accounts implement OAuth2, which brings security
  and robustness to your integration and must be used in real-life scenarios.
- Running a mutation in the playground will change the data inside Pipefy.
- Removing a user from an organization or changing their role to 'Guest' will remove
  them from all pipes, tables, and cards.
- When querying for cards, there's much more information available than the ones in
  the examples.
- The field_id is a unique string generated based on the field's name.
- The card object holds the actual values for each field.
- Rate limit is 50 requests in 24 hours, for each pipe.
- You can't set the fields aiAssistantsEnabled and pipeAiAgentsEnabled to true if
  the field aiEnabled is set to false, as it controls AI features in general.
- The export process may take some time. Poll the query until the status is finished
  or failed.
- The fileUrl is only available when the export is complete.
- The simulation process may take some time. Poll the query until the status is success
  or failed.
- If the simulation fails, check the details or errorMessage fields for more information.
- Use simulation to validate automation logic before deploying.
- This query supports pagination and returns up to 10 results per page.
- This query is read-only and does not modify tag associations.
- 'Phases Order: The order of phases in the array defines their left-to-right sequence
  on the Pipe’s board.'
- 'Color Format: Ensure labels use valid hex codes.'
- 'Field Validation: The API enforces type_id validity and required constraints.'
- 'Icon Limitations: Use icons supported by Pipefy.'
- Use the search argument to filter tags by name and reduce result size.
- This query is read-only and does not modify tags.
- The file url may not be immediately available, the report export can take longer
  depending on the report size.
- 'Processing Time: Larger reports may take minutes.'
- 'URL Expiry: The fileURL has a limited lifespan (one hour).'
- 'Email Notification: The requester will receive an email once the report is ready
  for download.'
- 'Idempotent Operation: Repeating the same request won''t change the outcome.'
- 'Immediate Sync: Changes reflect instantly in the user''s interface.'
- 'Validation: Invalid pipe IDs are silently ignored; only valid IDs are stored.'
- This query is read-only and does not modify tag categories.
- 'Use ONE: organization_id, pipe_id, or table_id per mutation.'
- Valid roles depend on the context.
- Use a Service Account token for authentication.
- Permissions required to view automations.
- Always request pageInfo fields (endCursor, hasNextPage, etc.) to navigate pages.
- Use hasNextPage / hasPreviousPage to check if more pages exist.
- Never mix first with before or last with after (they’re mutually exclusive).
- Ensure your token has super admin or admin permission on the organization scope.
- This query is read-only and does not modify tickets.
- This query provides a quick and effective way to retrieve all tickets with all information
  and the tagged pipes.
- The Pipe ID shown in the response payloads are SUIDs (a unique alphanumeric ID).
- Lateness and Expiration type webhooks will not trigger for tables, as these SLA
  configurations are not available at a table level.
- Ensure your token has permissions to view automations.
- You MUST be the pipe or table Admin!
- The XSLX's URL file must be public.
- Ensure your token has permissions to view fields.
- Data is updated once a day, so results will not consider changes occurred in the
  current day.
- Invalid pipe IDs are silently ignored; only valid IDs are stored.
errors:
- '401 Unauthorized: API token is missing or expired'
- Rate limit reached message displayed on errors in the response payload.
- 'USAGE_LIMIT_EXCEEDED: Large batches may trigger rate limits.'
- 'RECORD_INVALID: Validation failed: User is not a member of this phase''s pipe.'
- 'RECORD_NOT_FOUND: Couldn''t find all Users with ''id'': (9, 545)'
- 'Unauthorized: You are not authorized to access this page'
- 'Card could not be moved to phase id: 316983122'
- 'Invalid input: role name (invalid_role)'
- 'AI_CHAT_REQUEST_FAILED: Occurs when a request to the AI Chat API fails.'
- 'ANOTHER_IMPORTATION_ALREADY_RUNNING: Indicates that another importation or similar
  process is already running and cannot be started simultaneously.'
- 'ENABLED_APP: Occurs when there is an issue with the activation or use of a specific
  application.'
- 'FEATURE_NOT_ALLOWED_BY_ORGANIZATION_PLAN: Denotes that the requested feature is
  not available in the current organization plan.'
- 'FIELD_EDITABLE_ONLY_ON_ITS_ORIGINAL_PHASE: Signals that a field can only be edited
  in its original phase and not in other phases.'
- 'INVALID_CONNECTED_FIELD: This exception is raised when a operation with a connected
  field is invalid.'
- 'INVALID_INPUT: Indicates that the provided input data is not valid or improperly
  formatted.'
- 'INVALID_SMTP_AUTH: Indicates that the provided authentication type for SMTP server
  is not supported.'
- 'ORGANIZATION_IN_BLOCKLIST: Indicates that the organization is in the blocklist,
  preventing certain actions.'
- 'PERMISSION_DENIED: Represents the denial of necessary permissions to perform a
  specific operation.'
- 'PHASE_TRANSITION_ERROR: Indicates when attempting to transition a card to a phase
  results in an error.'
- 'PROVIDER_NOT_IDENTIFIED: This exception is thrown whenever it''s not possible to
  find the provider through the user''s email domain.'
- 'RECORD_INVALID: Points to an error related to the validation or integrity of record
  data.'
- 'RECORD_NOT_DESTROYED: Refers to a failure in destroying or deleting a record.'
- 'RECORD_NOT_SAVED: Refers to a failure in saving a record.'
- 'RESOURCE_NOT_FOUND: Occurs when a specific resource could not be found or does
  not exist.'
- 'UNIQUE_RESOURCE_ALREADY_EXISTS: Indicates that a unique resource already exists
  and cannot be duplicated.'
- 'USAGE_LIMIT_EXCEEDED: Indicates that a usage limit has been exceeded, such as the
  maximum number of requests per period.'
- 'USER_TO_ASSIGN_ROLE: Points to an error when trying to assign a role or function
  to a specific user.'
- 'UNAUTHORIZED: Occurs when the API request lacks valid authentication credentials
  or the provided token is invalid.'
- 'INVALID_ROLE: Triggered when attempting to perform actions without the required
  permissions or with an invalid role.'
- 'RESOURCE_NOT_FOUND: Occurs when trying to access a field type that doesn''t exist
  in the specified context.'
- 'missingRequiredInputObjectAttribute: Triggered when required parameters are missing
  from the API request.'
- 'INVALID_INPUT: Occurs when the provided input data doesn''t meet the expected format
  or validation rules.'
- 'USAGE_LIMIT_EXCEEDED: Triggered when the email sending rate limit is exceeded.'
- 'Card could not be moved to phase: Occurs when there''s an issue moving a card to
  a different phase.'
- 'USAGE_LIMIT_EXCEEDED: You have reached the maximum number of emails that could
  be sent within a short period of time. Please try again soon.'
- 'RESOURCE_NOT_FOUND: Field type not found with id: attachments'
- 'REQUEST_LIMIT_EXCEEDED: Throttle API calls or reduce frequency'
- 'QUERY_TIMEOUT: Break down filters or add selectivity'
- '401 Unauthorized: Recheck OAuth scopes or token expiration'
- Argument 'card_id' on InputObject 'CreateInboxEmailInput' is required. Expected
  type ID!
- 'INVALID_INPUT: Invalid input: attachment (["asdf"])'
- 'Incorrect Attachment Format: You provided a value like "asdf" instead of a valid
  Pipefy attachment identifier.'
- 'Invalid Field Type: The field you’re updating expects specific data.'
- 'Uploaded File Not Found: The attachment path you provided does not exist in Pipefy’s
  system.'
- 'Syntax Errors in Input: Incorrect GraphQL syntax.'
- Selected fields couldn’t be found. Maybe you type the wrong column position or field
  ID.
- File format was invalid. Spreadsheet is not Public or the file is not .xlsx format.
- File format was invalid. Spreadsheet is not Public, the file is not .xlsx format
  or the cell input was not in the demanded format.
- 'Error 1: Selected fields couldn’t be found. Maybe you type the wrong column position
  or field ID.'
- 'Error 2: File format was invalid. Spreadsheet is not Public or the file is not
  .xlsx format.'
- 'Error 3: File format was invalid. Spreadsheet is not Public, the file is not .xlsx
  format or the cell input was not in the demanded format.'
auth_info:
  mentioned_objects: []
client:
  auth:
    type: Service Account
    location: header
    header_name: Authorization
    flow: refresh_token
  base_url: https://api.pipefy.com/graphql
  paginator:
    default_page_size: 10
    type: cursor
  headers:
    Authorization: Bearer {{ your_token }}
    Content-Type: application/json
source_metadata: null
