resources:
- name: authentication_api
  endpoint:
    path: /authentication
    method: GET
- name: management_api
  endpoint:
    path: /management
    method: GET
- name: authentication_api
  endpoint:
    method: GET
- name: management_api
  endpoint:
    method: GET
- name: enterprise_identity_providers
  endpoint:
    path: /connections/enterprise
    method: GET
- name: user_profiles
  endpoint:
    path: /users
    method: GET
- name: sso_integrations
  endpoint:
    path: /sso/integrations
    method: GET
- name: logs
  endpoint:
    method: GET
- name: management_api
  endpoint:
    path: /api/v2/
- name: authentication_api
  endpoint:
    path: /oauth/token
- name: support_cases
  endpoint:
    path: /support/cases
    method: POST
- name: monitor_endpoints
  endpoint:
    path: /monitor/endpoints
    method: GET
- name: timesheet_entries
  endpoint:
    method: GET
    data_selector: entries
- name: universal_login
  endpoint:
    path: /authorize
    method: GET
- name: multi_factor_authentication
  endpoint:
    path: /oauth/token
    method: POST
- name: emails
  endpoint:
    path: /emails
    method: GET
- name: connections
  endpoint:
    path: /connections
    method: GET
- name: passwordless
  endpoint:
    path: /passwordless/start
    method: POST
- name: saml
  endpoint:
    path: /saml
    method: GET
- name: ws_federation
  endpoint:
    path: /wsfed
    method: GET
- name: oauth2_oidc_compliant_flows
  endpoint:
    path: /oauth/token
    method: POST
- name: metadata_endpoints
  endpoint:
    path: /.well-known/...
    method: GET
- name: samlp_metadata
  endpoint:
    path: /samlp/metadata/...
    method: GET
- name: log_stream
  endpoint:
    path: /api/log-streams
    method: POST
- name: log_stream_health
  endpoint:
    path: /api/log-streams/{stream_id}/health
    method: GET
- name: logs
  endpoint:
    path: /logs
    method: GET
- name: dashboard_access
  endpoint:
    method: GET
- name: tenant_members
  endpoint:
    method: POST
- name: tenant_member_roles
  endpoint:
    method: PUT
- name: revoke_access
  endpoint:
    method: DELETE
- name: multi_factor_authentication_setup
  endpoint:
    method: POST
- name: update_email
  endpoint:
    method: PUT
- name: tenant_members
  endpoint:
    path: /tenant/members
    method: GET
- name: custom_domains
  endpoint:
    path: /custom/domains
    method: GET
- name: signing_keys
  endpoint:
    path: /signing-keys
    method: GET
- name: metadata_keys
  endpoint:
    path: /metadata/keys
    method: GET
- name: dynamic_application_registration
  endpoint:
    path: /tenant/patch_settings
    method: GET
- name: applications
  endpoint:
    method: POST
- name: apis
  endpoint:
    method: POST
- name: sso_integrations
  endpoint:
    method: POST
- name: users
  endpoint:
    method: POST
- name: tenant
  endpoint:
    path: /api/v2/tenants
    method: GET
- name: domain
  endpoint:
    path: /api/v2/domains
    method: GET
- name: webAuth
  endpoint:
    method: POST
- name: authorize
  endpoint:
    path: /authorize
    method: GET
    params:
      responseType: token
      redirectUri: https://{yourApp}/popup_response_handler.html
      connection: twitter
- name: popup_authorize
  endpoint:
    path: /authorize
    method: GET
    params:
      responseType: token
      redirectUri: https://{yourApp}/popup_response_handler.html
      connection: twitter
- name: login
  endpoint:
    path: /co/authenticate
    method: POST
    params:
      username: optional
      email: optional
      password: required
      realm: required
- name: crossOriginVerification
  endpoint:
    path: unknown
    method: unknown
- name: buildAuthorizeUrl
  endpoint:
    path: /authorize
    method: GET
    params:
      clientID: required
      responseType: required
      redirectUri: required
      state: required
      nonce: optional
- name: userinfo
  endpoint:
    path: /userinfo
    method: GET
    data_selector: undefined
    params: {}
- name: password_reset
  endpoint:
    method: POST
- name: user_profile
  endpoint:
    path: /users
    method: GET
    data_selector: user_profile
- name: update_user_metadata
  endpoint:
    path: /users
    method: PATCH
- name: link_user
  endpoint:
    path: /users/link
    method: POST
- name: authorize
  endpoint:
    path: /authorize
    method: GET
- name: custom_actions
  endpoint:
    path: /custom-actions
- name: rules
  endpoint:
    path: /rules
- name: hooks
  endpoint:
    path: /hooks
- name: database_scripts
  endpoint:
    path: /database-scripts
- name: login_pages
  endpoint:
    path: /login-pages
- name: email_templates
  endpoint:
    path: /email-templates
- name: custom_apis
  endpoint:
    path: /custom-apis
- name: custom_libraries
  endpoint:
    path: /custom-libraries
- name: custom_utilities
  endpoint:
    path: /custom-utilities
- name: authorization_extension
- name: delegated_administration_extension
- name: single_sign_on_dashboard_extension
- name: authentication_api_debugger_extension
- name: ad_ldap_connector
- name: real_time_webtask_logs_extension
- name: account_link_extension
- name: user_import_export_extension
- name: export_log_events_extension
- name: update_prompt_settings
  endpoint:
    path: /api/v2/prompts
    method: PATCH
    data_selector: .
    params:
      enable_ulp_wcag_compliance: true
- name: user_profile
  endpoint:
    method: GET
- name: user_profile
  endpoint:
    method: GET
- name: user_profile
  endpoint:
    method: GET
- name: user_metadata
  endpoint:
    method: POST
- name: user_profile
  endpoint:
    path: /userinfo
    method: GET
- name: user_profile
  endpoint:
    path: /user/profile
    method: GET
    data_selector: user
    params:
      search: true
      update: true
      import: true
      export: true
- name: user_profiles
  endpoint:
    path: /api/v2/users
    method: GET
- name: manage_user_profiles
  endpoint:
    path: /api/v2/users
    method: POST
- name: user_profile
  endpoint:
    method: GET
- name: privacy_rights
  endpoint:
    path: /2025-01-archived
    method: GET
- name: Native/Mobile App
- name: Single-Page App
- name: Regular Web App
- name: Backend/API
- name: Cloud App
notes:
- Management API v1 is deprecated and reached its End of Life on July 13, 2020.
- Management API v1 is deprecated and reached its End of Life on July 13, 2020
- Focus on B2C IAM implementation
- Provides planning guides and checklists for SDLC projects
- Uses OIDC/OAuth for authentication in B2E scenarios
- Supports integration with enterprise identity providers like ADFS and SAML Identity
  Providers
- Allows profile attribute translation and mapping through Auth0 Rules
- Customizable branding for login, signup, and error pages
- Multi-factor authentication configurable per application or user group
- Attack Protection features for Auth0 Database connections
- Provides rich resources for learning and implementation
- Review supported versions of SDKs, browsers, and languages to ensure compatibility
- Utilize Auth0 community and support channels for troubleshooting and enhancements
- Be aware of operational policies for planning and launching services
- Monitor Auth0 service availability via the Status Dashboard
- Requires valid Access Token in HTTP Authorization header for API calls
- Access Token can be renewed to avoid re-login during a session
- Integration with third-party organizational IdPs necessary for certain customers
- Users must have separate identities for each organization they belong to; attempting
  access with incorrect organization credentials results in unauthorized rejection.
- Organizations may use their own IdP or a UserID/Password Database Connection provisioned
  for them.
- API secured with Auth0 using Client Credentials grant for machine-to-machine applications
- Authentication tokens implemented as JSON Web Tokens (JWT)
- Built to support future applications like mobile apps
- Uses OAuth 2.0 and OIDC for authentication and authorization
- Authorization Code Flow recommended for Web Applications
- Centralize and manage users from multiple identity providers
- Customize using your own branding
- Deploy and monitor system health and events
- SSO requires setting a cookie to manage session state
- JWT used for passing identity information securely
- Supports multiple authentication protocols including OIDC and LDAP
- Can integrate with various identity providers for SSO
- Passwords are hashed with bcrypt
- Supports custom scripts for authentication processes
- Automatic migration feature for user data
- Actions are tenant-specific and versioned
- Actions are written in Node.js and execute within the Auth0 platform
- Tokens issued with `iss` claim specific to the domain used in the request.
- Management API must be called using the same custom domain as the token request.
- SSL handshake managed by Auth0 for Auth0-managed certificates.
- For self-managed certificates, the user must manage SSL setup and reverse proxy.
- Log streams deliver logs at least once; up to three delivery attempts per log
- Streams automatically paused after 7 consecutive days of unsuccessful deliveries
- View logs in the Auth0 Dashboard and retrieve logs using the Management API
- Use log streaming to export logs to your preferred processing and analysis tools
- Protect client secrets and never include them in client-side applications
- Uses OAuth 2.0 for securing APIs
- Supports Multi-Factor Authentication (MFA)
- Compliant with SOC2, GDPR, PCI DSS, HIPAA, and other regulations
- Auth0 Teams is on by default for new self-service users since 1 November 2023
- Existing Enterprise customers need to request onboarding into Teams
- Periodic review of dashboard users recommended
- Ensure only current employees have access
- Support for multiple Dashboard admins advised
- OAuth 2.0 Device Authorization Flow used for secure authentication
- Secure credential storage in system's keychain
- Minimal API permissions based on least privilege principle
- Higher rate limits for Production tagged tenants on paid plans
- Custom domains available on paid plans
- 'Rotation settings: Option to revoke the signing key upon rotation'
- 'Allowed Logout URLs: Used for redirect after logout when no client_id is specified'
- 'Tenant Login URI: Used to initiate OIDC login flow'
- Change Password Flow v2 is irreversible once enabled
- Manage identity providers and secure APIs with Auth0
- Tenant names must be unique and are immutable once created
- Tenant names can only contain lowercase alphanumeric characters and hyphens; cannot
  start or end with a hyphen
- Tenant names must be between 3 and 63 characters
- Consider creating multiple tenants to separate user domains and support different
  environments like development, staging, or production
- Requires configuration of tenant settings to manage behavior
- Control over API access and dashboard access needs to be set up through Auth0 settings
- Default responseType is 'token', changes to 'code' if redirectUri is provided
- Using scopes can specify claims for specific fields
- Leeway parameter allows for clock skew in ID Token expiration
- popup authentication cannot be used within hosted login pages
- Uses OAuth2 with refresh token; CSRF concerns in certain scenarios
- Browser must have third-party cookies enabled for checkSession() to function properly
- Polling with checkSession() should occur no more frequently than every 15 minutes
  to avoid rate limiting
- Access Token required for all Management API calls; obtained during authentication
  flow.
- User Account Linking does not merge secondary account's metadata with primary account's
  metadata.
- Lock should be configured with specific versions to avoid potential breaks in production
  due to updates
- Cross-origin authentication needs proper configuration of the "Allowed Web Origins"
  in Application Settings
- Passwordless authentication requires setup in Dashboard under Connections -> Passwordless
- Auth0 SDK libraries facilitate integration with Auth0
- Authorization Code Flow with PKCE is recommended for secure login
- Multiple sessions manage authentication state across local app, Auth0, and IdP
- Silent authentication prevents user prompts by using the prompt=none parameter
- Uses Web Message Response Mode (WMRM) to handle responses via postMessage
- User data comes from a variety of sources, including identity providers, own databases,
  and enterprise connections
- Requires a new DNS domain dedicated to the custom domain's origin server hostname
- A wildcard public SSL certificate is necessary for the new DNS domain
- Use of a layer 4 network load balancer is required, even if a layer 7 is already
  in place
- Auth0 manages the certificate management model
- SAML integration may require handling user profiles and attributes dynamically based
  on the application's needs
- Email domain specific routing for SAML authentication requests
- mTLS targets sectors like finance and healthcare
- JWT-Secured Authorization Request (JAR) uses asymmetric cryptography
- Multi-factor authentication (MFA) enhances security by requiring multiple forms
  of validation
- Attack protection features to prevent and respond to malicious behavior
- SSO implementation requires the use of sessions and an authorization server session
- SSO with Auth0 requires Universal Login for authentication
- OpenID Connect uses JSON Web Tokens for authentication
- LDAP commonly used with Active Directory for centralized identity management
- Auth0 facilitates both SP-initiated and IdP-initiated SSO
- Subject to Auth0's Rate Limit Policy
- Troubleshooting involves generating and analyzing HAR files and inspecting tokens
- Universal Login doesn't require JavaScript for customization in the streamlined
  experience.
- Classic Login allows JavaScript customization but is no longer updated.
- Accessibility features can be enabled via the dashboard or API.
- Auth0 does not merge user profile attributes from multiple providers; sources core
  attributes from the first provider used
- Caching mechanism in place for user profiles
- Tokens such as ID token, Auth0 access token, third-party provider access token,
  and refresh token are involved in the authentication process
- Authentication API specifically for authentication flows
- User profiles are cached in the Auth0 database
- Different identity providers may use different attribute names for the same user
  data
- Uses OAuth2 with refresh token
- ID token uses JWT format
- Access token and third-party provider token also mentioned
- User profile data comes from various sources including social and enterprise identity
  providers
- Auth0 does not merge user profile attributes from multiple providers
- Add multi-factor authentication and defend your application from bots, suspicious
  IPs, and password breaches
- No API-specific quirks mentioned
- Uses various data collection methods like cookies and beacons to improve service
  functionality and for advertising purposes
- Discloses Personal Data to various entities for business purposes
- Shares data with third-party advertising and marketing providers
- No security system is perfect
- Cannot guarantee data safety from unauthorized access due to the inherent nature
  of the Internet
- Provides comprehensive tools and libraries for integrating authentication
- Passkeys are a secure replacement for passwords, using public key cryptography.
- Focuses on identity and authentication technologies including JWT, SAML, and WebAuthn
- Provides interactive environments for learning about authentication methods
errors:
- 401 Unauthorized: Recheck OAuth scopes or token expiration
- Service Interruption: Check the Status Dashboard and subscribe for updates
- Unauthorized: Check if user has granted data access or if token has expired
- invalid_token: Ensure the domain used for the Management API matches the domain
    in the token `iss` claim.
- Delivery Failure: If unable to reach server after three attempts, error logged in
    Health view
- Automatic Pause: Stream automatically paused if unable to reach server for 7 consecutive
    days
- RATE_LIMIT_EXCEEDED: Set up automatic log scanning to check for rate limit errors
- 401 Unauthorized: Check if user's email is compromised or if MFA requirements are
    not met
- 401 Unauthorized: Ensure correct device authorization flow and minimal permissions
- user_exists: Use a generic response to prevent user enumeration
- 'Invalid tenant name: Ensure the tenant name meets the specified requirements'
- Consent required: Ensure correct scopes are set when using getSSOData on localhost
- CSRF_ERROR: Ensure proper handling of 'state' and 'nonce' parameters to mitigate
    CSRF attacks
- code: 400
  message: Invalid request body. All and only of client_id, credential_type, username,
    otp, realm are required.
- code: 401
  message: Cross origin login not allowed.
- code: 400
  message: Unknown credential type parameter.
- code: 400
  message: Unknown realm non-existent-connection.
- code: 403
  message: Wrong email or password.
- code: 403
  message: Authentication error
- code: 403
  message: Blocked user
- code: 401
  message: This login attempt has been blocked because the password you're using was
    previously disclosed through a data breach (not in this application).
- code: 429
  message: Your account has been blocked after multiple consecutive login attempts.
    We've sent you a notification via your preferred contact method with instructions
    on how to unblock it.
- code: 429
  message: We have detected suspicious login behavior and further attempts will be
    blocked. Please contact the administrator.
- Browser does not support third-party cookies: Enable third-party cookies in browser
    settings
- Cross-Origin Authentication Error: Ensure "Allowed Web Origins" is set correctly
    in Application Settings
- SSO not possible with third-party applications: Use Universal Login instead
- CSRF attacks risk with non-custom domains: Recommend using custom domains
- 400: Handle or correct the request format; ensure all required fields are present
- 401: Verify cross-origin permissions or check for password leaks
- 403: Check user credentials or user status
- 429: Implement rate limiting or contact administration for suspicious activities
- Unauthorized: Recheck OAuth scopes or token expiration
- Session Expired: Re-authenticate to refresh session
- 401 Unauthorized: Check if the private key, client certificates, or JWT configurations
    are correctly implemented
- 401 Unauthorized: Check identity provider or token validity
- General guidance on handling error conditions
- Downstream effects on customer experience due to HTML, CSS, and Javascript customizations
  in Universal Login.
- 401 Unauthorized: Check scopes or authentication parameters
- Unauthorized access: User is responsible for maintaining security of passwords and
    devices
auth_info:
  mentioned_objects:
  - Authorization Code
  - Implicit Flow
  - Hybrid Flow
  - Client Credentials Flow
  - Device Authorization Flow
  - Resource Owner Password Flow
  - Client-Initiated Backchannel Authentication Flow
  - Auth0 tenant
  - Auth0 Tenant
  - SAML Identity Provider
  - ADFS
  - Google Workspace
  - Azure AD
  - OpenLDAP
  - Management API
  - Authentication API
  - Support Center
  - Auth0 Community forum
  - Auth0 Dashboard
  - Auth0.Android SDK
  - Authorization Extension
  - Identity Provider
  - Auth0 Organizations
  - Identity Provider (IdP)
  - Organization Tenant
  - Organization User
  - IdP
  - Database Connection
  - Machine-to-Machine Application
  - JSON Web Token
  - Access Token
  - Application
  - Connection
  - Lock widget
  - Auth0 Authorization Extension
  - Auth0 identity platform
  - SSO Cookie
  - ID Token
  - JSON Web Tokens
  - LDAP Data Interchange Format
  - Auth0 SSO Dashboard Extension
  - OAuth 2.0
  - SAML
  - LDAP
  - Actions
  - Flows
  - Triggers
  - CNAME record
  - SSL certificate
  - Universal Login
  - Classic Login
  - Multi-factor Authentication
  - Rules
  - Hooks
  - Extensions
  - Integrations
  - Log Streams
  - application
  - client secret
  - Team Owner
  - Tenant
  - Refresh Token
  - Client Secrets
  - Auth0 Teams Dashboard
  - Auth0 Management API
  - Tenant Settings
  - ID tokens
  - access tokens
  - SAML assertions
  - WS-Fed assertions
  - Metadata endpoint
  - OIDC
  - Applications
  - APIs
  - tenant
  - domain
  - WebAuth
  - webAuth
  - webAuth.popup.authorize
  - webAuth.popup.callback
  - CSRF
  - checkSession
  - Auth0Lock
  - Lock
  - Auth0LockPasswordless
  - Auth0 SDK libraries
  - SDK
  - Authorization Server
  - iframe
  - authorization server
  - access token
  - identity providers
  - enterprise connections
  - custom database connections
  - SSL Certificate
  - DNS Record
  - Network Load Balancer
  - Auth0 SDKs
  - Auth0 APIs
  - Database
  - SAML IdP
  - Client Secret
  - Private Key JWT
  - mTLS
  - JWT-Secured Authorization Request (JAR)
  - X.509 certificates
  - Refresh tokens
  - IDP access tokens
  - Auth0 Management API access tokens
  - Tokens
  - SSO cookie
  - SSO Service Provider
  - SSO Dashboard Extension
  - HAR files
  - OAuth
  - user_metadata
  - app_metadata
  - User Profile
  - JWT
  - Auth0 Lock widget
  - Auth0.js
  - user_id
  - identities
  - ID token
  - Access token
  - Refresh token
  - Auth0 access token
  - Auth0
  - cookies
  - beacons
  - Service Providers
  - Partners and Resellers
  - Law Enforcement and Legal Requests
  - Personal Data
  - Auth0 Forms
  - JSON Web Token (JWT)
  - SDK Libraries
  - WebAuthn
  - Passkeys
  - OpenID Connect
client:
  auth:
    type: oauth2
    flow: auth_code
    location: header
    header_name: Authorization
    token_url: '{{ dlt.secrets[''auth0_token_url''] }}'
    client_id: '{{ dlt.secrets[''auth0_client_id''] }}'
    client_secret: '{{ dlt.secrets[''auth0_client_secret''] }}'
    refresh_token: '{{ dlt.secrets[''auth0_refresh_token''] }}'
    allowed_connections:
    - email
    - sms
    passwordless_method: code
    auth_params:
      redirect_url: http://localhost:3000/callback
      response_type: token id_token
      scope: openid email
    headers:
      prompt: none
  paginator:
    type: page
    page_size_param: per_page
    default_page_size: 50
    cursor_path: undefined
    cursor_param: undefined
  headers:
    Authorization: Bearer {{ access_token }}
    Accept: application/json
  base_url: https://YOUR_DOMAIN.auth0.com
source_metadata: null
