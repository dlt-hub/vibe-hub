resources:
- name: webhook
  endpoint:
    path: /payments/webhook
    method: POST
    data_selector: id
    params: {}
- name: balances
  endpoint:
    path: /reference/balances-api
    method: GET
- name: settlements
  endpoint:
    path: /reference/settlements-api
    method: GET
- name: balances
  endpoint:
    path: /reference/balances-api
    method: GET
    data_selector: records
- name: settlements
  endpoint:
    path: /reference/settlements-api
    method: GET
    data_selector: records
- name: payments
  endpoint:
    path: /payments
    method: GET
- name: methods
  endpoint:
    path: /methods
    method: GET
- name: refunds
  endpoint:
    path: /refunds
    method: GET
- name: payments
  endpoint:
    path: /payments
    method: GET
- name: customers
  endpoint:
    path: /customers
    method: GET
- name: orders
  endpoint:
    path: /orders
    method: GET
- name: business_category
  endpoint:
    path: /common/data/types/business_category
    method: GET
    data_selector: categories
- name: date
  endpoint:
    path: /common/data/types/date
    method: GET
    data_selector: date
- name: datetime
  endpoint:
    path: /common/data/types/datetime
    method: GET
    data_selector: datetime
- name: locale
  endpoint:
    path: /common/data/types/locale
    method: GET
    data_selector: locale
- name: phone_number
  endpoint:
    path: /common/data/types/phone_number
    method: GET
    data_selector: phone_number
- name: qr_code_object
  endpoint:
    path: /common/data/types/qr_code_object
    method: GET
    data_selector: qr_code
- name: webhook
  endpoint:
    path: /v2/webhooks
    method: POST
- name: webhook_events
  endpoint:
    path: /v2/events
    method: GET
- name: Webhook Event
  endpoint:
    path: /webhook-events/{eventID}
    method: GET
    data_selector: payload
- name: payments
  endpoint:
    path: /payments
    method: GET
- name: create_payment
  endpoint:
    path: /payments
    method: POST
- name: payments
  endpoint:
    path: /v2/payments
    method: POST
- name: payment link
  endpoint:
    path: /v2/payment-links
    method: POST
- name: webhooks
  endpoint:
    path: /v2/webhooks
    method: POST
- name: create_payment
  endpoint:
    path: /payments
    method: POST
    data_selector: payment
- name: create_payment
  endpoint:
    path: /payments
    method: POST
- name: payment
  endpoint:
    path: /payments
    method: POST
    data_selector: payment
    params: {}
- name: payment_links
  endpoint:
    path: /v2/payments
    method: GET
    data_selector: _links
- name: payments
  endpoint:
    path: /payments
    method: GET
    data_selector: results
- name: payments
  endpoint:
    path: /payments
    method: GET
    data_selector: _embedded.payments
    params:
      limit: '50'
- name: payment
  endpoint:
    path: /payments
    method: GET
    data_selector: object
    params: {}
- name: payment
  endpoint:
    path: /payments/{paymentId}
    method: GET
    params:
      include: details.qrCode,details.remainderDetails
      embed: captures,refunds,chargebacks
      testmode: 'true'
- name: payment
  endpoint:
    path: /payments/{paymentId}
    method: GET
    data_selector: payment
- name: payment_links
  endpoint:
    path: /v2/payments
    method: GET
    data_selector: _links
- name: payments
  endpoint:
    path: /payments
    method: GET
- name: update_payment
  endpoint:
    path: /payments/{paymentId}
    method: POST
- name: update_payment
  endpoint:
    path: /payments/{paymentId}
    method: PATCH
- name: payment
  endpoint:
    path: /payments
    method: GET
    data_selector: _links
- name: payment
  endpoint:
    path: /payments
    method: POST
    data_selector: payment
- name: cancel_payment
  endpoint:
    path: /cancel_payment/{paymentId}
    method: POST
- name: cancel_payment
  endpoint:
    path: /v2/payments/{paymentId}
    method: DELETE
- name: payment
  endpoint:
    path: /v2/payments
    method: POST
    data_selector: payment
    params: {}
- name: payment
  endpoint:
    path: /v2/payments
    method: GET
    data_selector: _links
- name: release_payment_authorization
  endpoint:
    path: /v2/payments/{paymentId}/release-authorization
    method: POST
- name: payments
  endpoint:
    path: /v2/payments
    method: POST
- name: payments
  endpoint:
    path: /payments
    method: POST
    data_selector: payment
- name: list_payments
  endpoint:
    path: /payments
    method: GET
    data_selector: payments
- name: list_payment_methods
  endpoint:
    path: /methods
    method: GET
- name: list_all_payment_methods
  endpoint:
    path: /methods/all
    method: GET
- name: get_payment_method
  endpoint:
    path: /methods/{id}
    method: GET
- name: enable_payment_method
  endpoint:
    path: /methods/{id}/enable
    method: POST
- name: disable_payment_method
  endpoint:
    path: /methods/{id}/disable
    method: DELETE
- name: list_payment_methods
  endpoint:
    path: /reference/list-methods
    method: GET
- name: list_all_payment_methods
  endpoint:
    path: /reference/list-all-methods
    method: GET
- name: payment_methods
  endpoint:
    path: /methods
    method: GET
    data_selector: _embedded.methods
- name: list_all_payment_methods
  endpoint:
    path: /methods/all
    method: GET
    data_selector: methods
- name: payment_methods
  endpoint:
    path: /v2/methods/all
    method: GET
    data_selector: _embedded.methods
- name: payment_method
  endpoint:
    path: /reference/get-method
    method: GET
- name: payment_method
  endpoint:
    path: /v2/methods/{id}
    method: GET
    data_selector: resource
    params: {}
- name: enable_payment_method
  endpoint:
    path: /v2/profiles/{profileId}/methods/{id}
    method: POST
- name: payment_method
  endpoint:
    path: /profiles/{profileId}/methods/{id}
    method: GET
    data_selector: resource
    params: {}
- name: disable_payment_method
  endpoint:
    path: /v2/profiles/{profileId}/methods/{id}
    method: DELETE
- name: enable_payment_method_issuer
  endpoint:
    path: /v2/profiles/{profileId}/methods/{methodId}/issuers/{id}
    method: POST
- name: profiles
  endpoint:
    path: /profiles
    method: GET
    data_selector: profiles
    params: {}
- name: methods
  endpoint:
    path: /methods
    method: GET
    data_selector: methods
    params: {}
- name: payment method issuer
  endpoint:
    path: /profiles/{profileId}/methods/{methodId}/issuers/{id}
    method: POST
    data_selector: paymentMethodIssuer
    params: {}
- name: disable_payment_method_issuer
  endpoint:
    path: /v2/profiles/{profileId}/methods/{methodId}/issuers/{id}
    method: DELETE
- name: payment_refund
  endpoint:
    path: /refunds
    method: GET
- name: list_all_refunds
  endpoint:
    path: /refunds/all
    method: GET
- name: create_payment_refund
  endpoint:
    path: /refunds
    method: POST
- name: get_payment_refund
  endpoint:
    path: /refunds/{id}
    method: GET
- name: cancel_payment_refund
  endpoint:
    path: /refunds/{id}/cancel
    method: DELETE
- name: payment_refund
  endpoint:
    path: /v2/payments/{paymentId}/refunds
    method: POST
- name: refund
  endpoint:
    path: /payments/{paymentId}/refunds
    method: POST
    data_selector: resource
    params:
      amount[currency]: EUR
      amount[value]: '5.95'
      metadata: '{"bookkeeping_id": 12345}'
- name: payment_refunds
  endpoint:
    path: /payments/{paymentId}/refunds
    method: GET
- name: refunds
  endpoint:
    path: /payments/{paymentId}/refunds
    method: GET
    data_selector: _embedded.refunds
    params:
      limit: 50
- name: payment_refund
  endpoint:
    path: /v2/payments/{paymentId}/refunds/{refundId}
    method: GET
- name: refund
  endpoint:
    path: /payments/{paymentId}/refunds/{refundId}
    method: GET
    data_selector: resource
    params: {}
- name: cancel_payment_refund
  endpoint:
    path: /v2/payments/{paymentId}/refunds/{refundId}
    method: DELETE
- name: payment_refund
  endpoint:
    path: /v2/payments/{paymentId}/refunds/{refundId}
    method: DELETE
    data_selector: json
    params:
      testmode: true
- name: refunds
  endpoint:
    path: /refunds
    method: GET
    data_selector: results
- name: refund
  endpoint:
    path: /refunds
    method: GET
    data_selector: _embedded.refunds
    params:
      limit: 50
- name: payment_chargebacks
  endpoint:
    path: /reference/list-payment-chargebacks
    method: GET
- name: all_chargebacks
  endpoint:
    path: /reference/list-all-chargebacks
    method: GET
- name: chargeback
  endpoint:
    path: /reference/get-chargeback
    method: GET
- name: payment_chargebacks
  endpoint:
    path: /v2/payments/{paymentId}/chargebacks
    method: GET
- name: chargebacks
  endpoint:
    path: /payments/{paymentId}/chargebacks
    method: GET
    data_selector: _embedded.chargebacks
    params:
      limit: 50
- name: payment_chargeback
  endpoint:
    path: /payments/{paymentId}/chargebacks/{chargebackId}
    method: GET
- name: chargeback
  endpoint:
    path: /payments/{paymentId}/chargebacks/{chargebackId}
    method: GET
    data_selector: resource
    params: {}
- name: list_chargebacks
  endpoint:
    path: /payments/{paymentId}/chargebacks
    method: GET
    data_selector: chargebacks
    params: {}
- name: list_all_chargebacks
  endpoint:
    path: /chargebacks
    method: GET
    data_selector: chargebacks
    params: {}
- name: chargebacks
  endpoint:
    path: /v2/chargebacks
    method: GET
- name: chargebacks
  endpoint:
    path: /chargebacks
    method: GET
    data_selector: _embedded.chargebacks
    params:
      limit: 50
- name: captures
  endpoint:
    path: /captures
    method: GET
    data_selector: data
- name: create_capture
  endpoint:
    path: /payments/{paymentId}/captures
    method: POST
- name: captures
  endpoint:
    path: /payments/{paymentId}/captures
    method: POST
    data_selector: resource
    params: {}
- name: captures
  endpoint:
    path: /v2/payments/{paymentId}/captures
    method: GET
- name: captures
  endpoint:
    path: /payments/{paymentId}/captures
    method: GET
    data_selector: _embedded.captures
    params:
      limit: 50
- name: get_capture
  endpoint:
    path: /v2/payments/{paymentId}/captures/{captureId}
    method: GET
- name: captures
  endpoint:
    path: /payments/{paymentId}/captures/{captureId}
    method: GET
    data_selector: resource
    params: {}
- name: request_apple_pay_payment_session
  endpoint:
    path: /wallets/apple-pay
    method: POST
    data_selector: session
    params: {}
- name: request_apple_pay_payment_session
  endpoint:
    path: /v1/payments/applepay
    method: POST
- name: apple_pay_payment_session
  endpoint:
    path: /v2/wallets/applepay/sessions
    method: POST
- name: payment_link
  endpoint:
    path: /payments/payment-links
    method: POST
- name: list_payment_links
  endpoint:
    path: /payments/payment-links
    method: GET
- name: get_payment_link
  endpoint:
    path: /payments/payment-links/{id}
    method: GET
- name: update_payment_link
  endpoint:
    path: /payments/payment-links/{id}
    method: PATCH
- name: delete_payment_link
  endpoint:
    path: /payments/payment-links/{id}
    method: DELETE
- name: payment_link
  endpoint:
    path: /payment-links
    method: POST
- name: payment_link
  endpoint:
    path: /v2/payment-links
    method: POST
    data_selector: resource
    params: {}
- name: payment_links
  endpoint:
    path: /v2/payment-links
    method: POST
- name: payment_links
  endpoint:
    path: /payment-links
    method: GET
- name: payment_link
  endpoint:
    path: /payment-links
    method: GET
    data_selector: _embedded.payment_links
    params:
      limit: 50
- name: payment_link
  endpoint:
    path: /payment-links/{paymentLinkId}
    method: GET
- name: payment_link
  endpoint:
    path: /payment-links
    method: GET
    data_selector: resource
    params:
      testmode: boolean
- name: update_payment_link
  endpoint:
    path: /v2/payment-links/{paymentLinkId}
    method: PATCH
- name: payment_link
  endpoint:
    path: /payment-links
    method: POST
    data_selector: resource
    params: {}
- name: payment_link
  endpoint:
    path: /v2/payment-links
    method: GET
    data_selector: links
    params: {}
- name: delete_payment_link
  endpoint:
    path: /v2/payment-links/{paymentLinkId}
    method: DELETE
- name: payment_link
  endpoint:
    path: /payment-links/{paymentLinkId}
    method: GET
    data_selector: _embedded.payments
    params:
      limit: 50
      sort: desc
- name: payment_link_payments
  endpoint:
    path: /v2/payment-links/{paymentLinkId}/payments
    method: GET
- name: terminals
  endpoint:
    path: /terminals
    method: GET
    data_selector: terminals
- name: terminals
  endpoint:
    path: /terminals
    method: GET
- name: terminals
  endpoint:
    path: /terminals
    method: GET
    data_selector: _embedded.terminals
    params: {}
- name: terminal
  endpoint:
    path: /terminals/{terminalId}
    method: GET
- name: terminal
  endpoint:
    path: /terminals/{terminalId}
    method: GET
    data_selector: resource
    params:
      terminalId: string
- name: list_terminals
  endpoint:
    path: /terminals
    method: GET
    data_selector: resource
    params: {}
- name: delayed_route
  endpoint:
    path: /payments/{paymentId}/routes
    method: POST
- name: payment_routes
  endpoint:
    path: /payments/tr_5B8cwPMGnU6qLbRvo7qEZo/routes
    method: POST
    data_selector: object
    params: {}
- name: payment_routes
  endpoint:
    path: /payments/{paymentId}/routes
    method: GET
- name: payments
  endpoint:
    path: /payments/{paymentId}/routes
    method: GET
    data_selector: _embedded.routes
    params:
      testmode: boolean
- name: webhook
  endpoint:
    path: /webhooks
    method: POST
- name: webhook
  endpoint:
    path: /webhooks
    method: POST
    data_selector: resource
    params: {}
- name: webhooks
  endpoint:
    path: /webhooks
    method: GET
    data_selector: webhooks
- name: webhooks
  endpoint:
    path: /webhooks
    method: GET
    data_selector: _embedded.webhooks
    params:
      limit: 50
- name: webhook
  endpoint:
    path: /v2/webhooks/{id}
    method: PATCH
- name: webhook
  endpoint:
    path: /v2/webhooks
    method: PATCH
    data_selector: webhook
    params: {}
- name: webhook
  endpoint:
    path: /v2/webhooks/{id}
    method: GET
    params: {}
- name: delete_webhook
  endpoint:
    path: /v2/webhooks/{id}
    method: DELETE
    params: {}
- name: webhook
  endpoint:
    path: /v2/webhooks/{id}/ping
    method: POST
- name: webhook_event
  endpoint:
    path: /v2/events/{id}
    method: GET
- name: event
  endpoint:
    path: /events/{id}
    method: GET
    data_selector: resource
    params:
      testmode: boolean
- name: payments
  endpoint:
    path: /payments
    method: GET
- name: refunds
  endpoint:
    path: /refunds
    method: GET
- name: customers
  endpoint:
    path: /customers
    method: GET
- name: orders
  endpoint:
    path: /orders
    method: GET
- name: payments
  endpoint:
    path: /reference/payments-api
    method: POST
- name: methods
  endpoint:
    path: /reference/methods-api
    method: GET
- name: refunds
  endpoint:
    path: /reference/refunds-api
    method: POST
- name: orders
  endpoint:
    path: /reference/orders-api
    method: POST
- name: customers
  endpoint:
    path: /reference/customers-api
    method: POST
- name: subscriptions
  endpoint:
    path: /reference/subscriptions-api
    method: POST
- name: component
  endpoint:
    path: /component
    method: GET
- name: orders
  endpoint:
    path: /reference/orders-api
    method: GET
- name: payments
  endpoint:
    path: /reference/payments-api
    method: GET
- name: customers
  endpoint:
    path: /reference/customers-api
    method: GET
- name: mandates
  endpoint:
    path: /reference/mandates-api
    method: GET
- name: subscriptions
  endpoint:
    path: /reference/subscriptions-api
    method: GET
- name: webhooks
  endpoint:
    path: /reference/webhooks-api
    method: GET
- name: balances
  endpoint:
    path: /reference/balances-api
    method: GET
- name: settlements
  endpoint:
    path: /reference/settlements-api
    method: GET
- name: sales_invoices
  endpoint:
    path: /reference/sales-invoices-api
    method: GET
- name: create_order
  endpoint:
    path: /create-order
    method: POST
- name: list_orders
  endpoint:
    path: /list-orders
    method: GET
- name: get_order
  endpoint:
    path: /get-order
    method: GET
- name: update_order
  endpoint:
    path: /update-order
    method: PATCH
- name: cancel_order
  endpoint:
    path: /cancel-order
    method: DELETE
- name: list_order_refunds
  endpoint:
    path: /list-order-refunds-1
    method: GET
- name: create_order_refund
  endpoint:
    path: /create-order-refund
    method: POST
- name: create_order_payment
  endpoint:
    path: /create-order-payment
    method: POST
- name: list_shipments
  endpoint:
    path: /list-shipments
    method: GET
- name: create_shipment
  endpoint:
    path: /create-shipment
    method: POST
- name: order
  endpoint:
    path: /orders
    method: POST
- name: create_order
  endpoint:
    path: /create_order
    method: POST
    data_selector: order
    params: {}
- name: orders
  endpoint:
    path: /v2/orders
    method: POST
- name: orders
  endpoint:
    path: /orders
    method: POST
- name: list_orders
  endpoint:
    path: /list-orders
    method: GET
- name: orders
  endpoint:
    path: /orders
    method: GET
- name: orders
  endpoint:
    path: /orders
    method: GET
    data_selector: _embedded.orders
    params:
      from: string
      limit: integer | null
      sort: string | null
      profileId: string
      testmode: boolean | null
- name: order
  endpoint:
    path: /orders/{orderId}
    method: GET
    params:
      embed: payments,refunds,shipments
      testmode: 'true'
- name: get_order
  endpoint:
    path: /orders/{orderId}
    method: GET
- name: order
  endpoint:
    path: /orders
    method: GET
    data_selector: resource
- name: orderline
  endpoint:
    path: /orderlines
    method: GET
    data_selector: resource
- name: payment
  endpoint:
    path: /payments
    method: GET
    data_selector: resource
- name: update_order
  endpoint:
    path: /v2/orders/{orderId}
    method: PATCH
- name: order
  endpoint:
    path: /v2/orders
    method: POST
    data_selector: resource
- name: cancel_order
  endpoint:
    path: /orders/{orderId}
    method: DELETE
- name: order
  endpoint:
    path: /v2/orders
    method: GET
    data_selector: resource
- name: order
  endpoint:
    path: /orders
    method: GET
    data_selector: resource
- name: order_line
  endpoint:
    path: /order_lines
    method: GET
    data_selector: resource
- name: manage_order_lines
  endpoint:
    path: /v2/orders/{orderId}/lines
    method: PATCH
    data_selector: operations
- name: payments
  endpoint:
    path: /reference/payments-api
    method: GET
    data_selector: records
- name: orders
  endpoint:
    path: /reference/orders-api
    method: GET
    data_selector: records
- name: customers
  endpoint:
    path: /reference/customers-api
    method: GET
    data_selector: records
- name: webhooks
  endpoint:
    path: /reference/webhooks-api
    method: GET
    data_selector: records
- name: cancel_order_lines
  endpoint:
    path: /orders/{orderId}/lines
    method: DELETE
- name: payments
  endpoint:
    path: /reference/payments-api
    method: GET
- name: orders
  endpoint:
    path: /reference/orders-api
    method: GET
- name: customers
  endpoint:
    path: /reference/customers-api
    method: GET
- name: mandates
  endpoint:
    path: /reference/mandates-api
    method: GET
- name: subscriptions
  endpoint:
    path: /reference/subscriptions-api
    method: GET
- name: order
  endpoint:
    path: /orders
    method: GET
- name: payment
  endpoint:
    path: /payments
    method: GET
- name: update_order_line
  endpoint:
    path: /v2/orders/{orderId}/lines/{orderlineId}
    method: PATCH
    params: {}
- name: order
  endpoint:
    path: /orders
    method: GET
    data_selector: orders
- name: order_line
  endpoint:
    path: /orderlines
    method: GET
    data_selector: orderlines
- name: create_order_payment
  endpoint:
    path: /orders/{orderId}/payments
    method: POST
    data_selector: null
    params: {}
- name: payment
  endpoint:
    path: /payments
    method: POST
    data_selector: payment
    params: {}
- name: create_order_payment
  endpoint:
    path: /reference/create-order-payment
    method: POST
- name: list_payments
  endpoint:
    path: /reference/list-payments
    method: GET
- name: get_payment
  endpoint:
    path: /reference/get-payment
    method: GET
- name: update_payment
  endpoint:
    path: /reference/update-payment
    method: PATCH
- name: cancel_payment
  endpoint:
    path: /reference/cancel-payment
    method: DELETE
- name: payment
  endpoint:
    path: /v2/payments
    method: GET
    data_selector: _links
- name: create_order_refund
  endpoint:
    path: /reference/create-order-refund
    method: POST
- name: list_order_refunds
  endpoint:
    path: /reference/list-order-refunds-1
    method: GET
- name: create_order_refund
  endpoint:
    path: /orders/{orderId}/refunds
    method: POST
- name: order_refunds
  endpoint:
    path: /orders/{orderId}/refunds
    method: GET
    data_selector: refunds
- name: refunds
  endpoint:
    path: /orders/{orderId}/refunds
    method: GET
    data_selector: _embedded.refunds
    params:
      limit: 5
- name: shipment
  endpoint:
    path: /shipments
    method: GET
- name: create_shipment
  endpoint:
    path: /orders/{orderId}/shipments
    method: POST
- name: shipment
  endpoint:
    path: /payments/{orderId}/shipments
    method: POST
    data_selector: resource
    params: {}
- name: shipments
  endpoint:
    path: /orders/{orderId}/shipments
    method: GET
- name: shipments
  endpoint:
    path: /payments/{orderId}/shipments
    method: GET
    data_selector: _embedded.shipments
    params:
      from: string
      limit: integer
      sort: string
      testmode: boolean
- name: shipments
  endpoint:
    path: /v2/shipments
    method: GET
    data_selector: resource
    params: {}
- name: get_shipment
  endpoint:
    path: /orders/{orderId}/shipments/{shipmentId}
    method: GET
- name: shipment
  endpoint:
    path: /v2/shipments
    method: PATCH
    data_selector: resource
    params: {}
- name: update_shipment
  endpoint:
    path: /orders/{orderId}/shipments/{shipmentId}
    method: PATCH
- name: customers
  endpoint:
    path: /customers
    method: GET
    data_selector: customers
- name: customer
  endpoint:
    path: /customers
    method: POST
- name: customer
  endpoint:
    path: /customers
    method: POST
    data_selector: resource
    params: {}
- name: list_customers
  endpoint:
    path: /customers
    method: GET
    data_selector: data
    params: {}
- name: customers
  endpoint:
    path: /customers
    method: GET
    data_selector: customers
- name: customers
  endpoint:
    path: /customers
    method: GET
    data_selector: _embedded.customers
    params:
      limit: 50
- name: customer
  endpoint:
    path: /v2/customers/{customerId}
    method: GET
- name: customer
  endpoint:
    path: /customers/{customerId}
    method: GET
    data_selector: resource
    params: {}
- name: update_customer
  endpoint:
    path: /v2/customers/{customerId}
    method: PATCH
- name: customer
  endpoint:
    path: /v2/customers
    method: PATCH
    data_selector: resource
    params: {}
- name: delete_customer
  endpoint:
    path: /customers/{customerId}
    method: DELETE
- name: customer_payment
  endpoint:
    path: /v2/customers/{customerId}/payments
    method: POST
- name: payment
  endpoint:
    path: /payments
    method: POST
    data_selector: payment
- name: payment
  endpoint:
    path: /v2/payments
    method: GET
    data_selector: _links
    params: {}
- name: create_payment
  endpoint:
    path: /payments
    method: POST
    data_selector: payment
    params:
      customerId: string
      description: string
      amount: object
      redirectUrl: string | null
      cancelUrl: string | null
      webhookUrl: string | null
      lines: array of objects | null
      billingAddress: object
      shippingAddress: object
      locale: string | null
      method: string | null
      issuer: string | null
      restrictPaymentMethodsToCountry: string | null
      metadata: string | array
      captureMode: string | null
      captureDelay: string | null
      applicationFee: object | null
      routing: array of objects | null
      sequenceType: string | null
      mandateId: string | null
      profileId: string
      dueDate: string
      testmode: boolean | null
- name: customer_payments
  endpoint:
    path: /customers/{customerId}/payments
    method: GET
    data_selector: payments
- name: payments
  endpoint:
    path: /payments
    method: GET
    data_selector: _embedded.payments
    params:
      customerId: string
      from: string
      limit: integer
      sort: string
      profileId: string
      testmode: boolean
- name: mandates
  endpoint:
    path: /mandates
    method: GET
- name: mandate
  endpoint:
    path: /v2/customers/{customerId}/mandates
    method: POST
- name: create_mandate
  endpoint:
    path: /customers/{customerId}/mandates
    method: POST
    data_selector: resource
    params: {}
- name: mandates
  endpoint:
    path: /v2/customers/{customerId}/mandates
    method: GET
    data_selector: results
- name: mandates
  endpoint:
    path: /customers/{customerId}/mandates
    method: GET
    data_selector: _embedded.mandates
    params:
      from: customerId
      limit: '50'
      sort: desc
      testmode: boolean
- name: mandate
  endpoint:
    path: /v2/customers/{customerId}/mandates/{mandateId}
    method: GET
- name: mandate
  endpoint:
    path: /customers/{customerId}/mandates/{mandateId}
    method: GET
    data_selector: resource
    params: {}
- name: revoke_mandate
  endpoint:
    path: /v2/customers/{customerId}/mandates/{mandateId}
    method: DELETE
- name: subscriptions
  endpoint:
    path: /subscriptions
    method: GET
- name: create_subscription
  endpoint:
    path: /customers/{customerId}/subscriptions
    method: POST
- name: create_subscription
  endpoint:
    path: /subscriptions
    method: POST
- name: list_subscriptions
  endpoint:
    path: /subscriptions
    method: GET
- name: get_subscription
  endpoint:
    path: /subscriptions/{id}
    method: GET
- name: update_subscription
  endpoint:
    path: /subscriptions/{id}
    method: PATCH
- name: cancel_subscription
  endpoint:
    path: /subscriptions/{id}
    method: DELETE
- name: list_all_subscriptions
  endpoint:
    path: /subscriptions/all
    method: GET
- name: list_subscription_payments
  endpoint:
    path: /subscriptions/{id}/payments
    method: GET
- name: customer_subscriptions
  endpoint:
    path: /customers/{customerId}/subscriptions
    method: GET
    data_selector: subscriptions
- name: subscriptions
  endpoint:
    path: /v2/customers/{customerId}/subscriptions
    method: GET
    data_selector: _embedded.subscriptions
    params:
      from: string
      limit: integer
      sort: string
      testmode: boolean
- name: subscription
  endpoint:
    path: /v2/customers/{customerId}/subscriptions/{subscriptionId}
    method: GET
    data_selector: ''
- name: subscriptions
  endpoint:
    path: /customers/{customerId}/subscriptions/{subscriptionId}
    method: GET
    data_selector: resource
    params: {}
- name: subscriptions
  endpoint:
    path: /customers/{customerId}/subscriptions/{subscriptionId}
    method: PATCH
- name: update_subscription
  endpoint:
    path: /v2/customers/{customerId}/subscriptions/{subscriptionId}
    method: PATCH
- name: cancel_subscription
  endpoint:
    path: /v2/customers/{customerId}/subscriptions/{subscriptionId}
    method: DELETE
- name: subscription
  endpoint:
    path: /v2/customers/{customerId}/subscriptions/{subscriptionId}
    method: DELETE
- name: subscriptions
  endpoint:
    path: /subscriptions
    method: GET
    data_selector: subscriptions
- name: subscriptions
  endpoint:
    path: /subscriptions
    method: GET
    data_selector: _embedded.subscriptions
    params:
      limit: '50'
- name: subscription_payments
  endpoint:
    path: /customers/{customerId}/subscriptions/{subscriptionId}/payments
    method: GET
- name: subscription_payments
  endpoint:
    path: /subscription-payments
    method: GET
    data_selector: _embedded.payments
    params:
      customerId: required
      subscriptionId: required
- name: payments
  endpoint:
    path: /reference/payments-api
    method: GET
- name: customers
  endpoint:
    path: /reference/customers-api
    method: GET
- name: orders
  endpoint:
    path: /reference/orders-api
    method: GET
- name: subscriptions
  endpoint:
    path: /reference/subscriptions-api
    method: GET
- name: invoices
  endpoint:
    path: /reference/invoices-api
    method: GET
- name: generate_tokens
  endpoint:
    path: /oauth2/tokens
    method: POST
- name: tokens
  endpoint:
    path: /oauth2/tokens
    method: POST
- name: generate_tokens
  endpoint:
    path: /oauth2/tokens
    method: POST
- name: generate_tokens
  endpoint:
    path: /oauth2/tokens
    method: POST
- name: revoke_tokens
  endpoint:
    path: /oauth2/tokens
    method: DELETE
    data_selector: null
    params: {}
- name: revoke_token
  endpoint:
    path: /oauth2/tokens
    method: DELETE
    data_selector: none
    params: {}
- name: permissions
  endpoint:
    path: /v2/permissions
    method: GET
    data_selector: ''
- name: permissions
  endpoint:
    path: /permissions
    method: GET
- name: get_permission
  endpoint:
    path: /v2/permissions/{permissionId}
    method: GET
    params:
      testmode: boolean | null
- name: organization
  endpoint:
    path: /organizations
    method: GET
    data_selector: organizations
- name: organizations
  endpoint:
    path: /organizations/{id}
    method: GET
    data_selector: resource
    params: {}
- name: organization
  endpoint:
    path: /organizations/{id}
    method: GET
    data_selector: organization
- name: organization
  endpoint:
    path: /organizations/me
    method: GET
    data_selector: object
- name: current_organization
  endpoint:
    path: /organizations/me
    method: GET
    data_selector: ''
- name: partner_status
  endpoint:
    path: /organizations/me/partner
    method: GET
    data_selector: object
- name: partner_status
  endpoint:
    path: /v2/organizations/me/partner
    method: GET
- name: profiles
  endpoint:
    path: /profiles
    method: GET
    data_selector: profiles
- name: create_profile
  endpoint:
    path: /profiles
    method: POST
    data_selector: profile
- name: get_profile
  endpoint:
    path: /profiles/{profileId}
    method: GET
    data_selector: profile
- name: update_profile
  endpoint:
    path: /profiles/{profileId}
    method: PATCH
    data_selector: profile
- name: delete_profile
  endpoint:
    path: /profiles/{profileId}
    method: DELETE
    data_selector: profile
- name: profile
  endpoint:
    path: /v2/profiles
    method: POST
- name: profiles
  endpoint:
    path: /profiles
    method: POST
    data_selector: resource
    params: {}
- name: profiles
  endpoint:
    path: /profiles
    method: GET
    data_selector: _embedded.profiles
- name: profiles
  endpoint:
    path: /v2/profiles
    method: GET
    data_selector: profiles
    params:
      incremental: from
- name: profile
  endpoint:
    path: /profiles/{id}
    method: GET
    params:
      testmode: boolean | null
- name: profile
  endpoint:
    path: /profiles/{profile_id}
    method: GET
    data_selector: object
    params: {}
- name: list_profiles
  endpoint:
    path: /profiles
    method: GET
    data_selector: profiles
    params: {}
- name: profiles
  endpoint:
    path: /v2/profiles/{id}
    method: PATCH
- name: profile
  endpoint:
    path: /v2/profiles/{id}
    method: PATCH
- name: delete_profile
  endpoint:
    path: /v2/profiles/{id}
    method: DELETE
- name: current_profile
  endpoint:
    path: /v2/profiles/me
    method: GET
    data_selector: ''
- name: current_profile
  endpoint:
    path: /profiles/me
    method: GET
    data_selector: object
- name: onboarding
  endpoint:
    path: /reference/onboarding-api
    method: GET
- name: onboarding_status
  endpoint:
    path: /onboarding/me
    method: GET
    data_selector: response
- name: onboarding_status
  endpoint:
    path: /onboarding/me
    method: GET
    data_selector: object
- name: onboarding
  endpoint:
    path: /onboarding/me
    method: POST
    data_selector: response
    params: {}
- name: submit_onboarding_data
  endpoint:
    path: /onboarding/me
    method: POST
- name: capabilities
  endpoint:
    path: /capabilities
    method: GET
    data_selector: _embedded.capabilities
    params: {}
- name: capabilities
  endpoint:
    path: /v2/capabilities
    method: GET
- name: clients
  endpoint:
    path: /reference/clients-api
    method: GET
- name: clients
  endpoint:
    path: /clients
    method: GET
- name: client
  endpoint:
    path: /clients
    method: GET
    data_selector: _embedded.clients
    params:
      limit: null
- name: client
  endpoint:
    path: /clients/{id}
    method: GET
- name: client
  endpoint:
    path: /clients/{id}
    method: GET
    data_selector: resource
    params: {}
- name: client
  endpoint:
    path: /reference/get-client
    method: GET
- name: client_link
  endpoint:
    path: /reference/create-client-link
    method: POST
- name: client_link
  endpoint:
    path: /client-links
    method: POST
    data_selector: clientLink
- name: list_balance_transactions
  endpoint:
    path: /reference/list-balance-transactions
    method: GET
- name: get_balance_report
  endpoint:
    path: /reference/get-balance-report
    method: GET
- name: get_primary_balance
  endpoint:
    path: /reference/get-primary-balance
    method: GET
- name: get_balance
  endpoint:
    path: /reference/get-balance
    method: GET
- name: list_balances
  endpoint:
    path: /reference/list-balances
    method: GET
- name: balances
  endpoint:
    path: /reference/list-balances
    method: GET
- name: balance
  endpoint:
    path: /reference/get-balance
    method: GET
- name: primary_balance
  endpoint:
    path: /reference/get-primary-balance
    method: GET
- name: balance_report
  endpoint:
    path: /reference/get-balance-report
    method: GET
- name: balance_transactions
  endpoint:
    path: /reference/list-balance-transactions
    method: GET
- name: balance
  endpoint:
    path: /balances
    method: GET
    data_selector: _embedded.balances
- name: balances
  endpoint:
    path: /balances
    method: GET
    data_selector: balances
- name: balance
  endpoint:
    path: /v2/balances
    method: GET
- name: balance
  endpoint:
    path: /balances/{id}
    method: GET
    data_selector: object
    params: {}
- name: primary_balance
  endpoint:
    path: /balances/primary
    method: GET
    data_selector: balance
- name: primary_balance
  endpoint:
    path: /balances/primary
    method: GET
    data_selector: object
    params: {}
- name: balance_report
  endpoint:
    path: /v2/balances/{balanceId}/report
    method: GET
- name: balance_report
  endpoint:
    path: /balances/bal_gVMhHKqSSRYJyPsuoPNFH/report
    method: GET
    data_selector: resource
    params:
      from: '2024-01-01'
      until: '2024-02-01'
      grouping: transaction-categories
- name: balance_transactions
  endpoint:
    path: /balances/{balanceId}/transactions
    method: GET
    data_selector: transactions
- name: balance_transactions
  endpoint:
    path: /balances/{balanceId}/transactions
    method: GET
    data_selector: _embedded.balance_transactions
    params:
      from: string
      limit: integer
      testmode: boolean
- name: settlements
  endpoint:
    path: /reference/list-settlements
    method: GET
- name: settlement
  endpoint:
    path: /reference/get-settlement
    method: GET
- name: open_settlement
  endpoint:
    path: /reference/get-open-settlement
    method: GET
- name: next_settlement
  endpoint:
    path: /reference/get-next-settlement
    method: GET
- name: settlement_payments
  endpoint:
    path: /reference/list-settlement-payments
    method: GET
- name: settlement_captures
  endpoint:
    path: /reference/list-settlement-captures
    method: GET
- name: settlement_refunds
  endpoint:
    path: /reference/list-settlement-refunds
    method: GET
- name: settlement_chargebacks
  endpoint:
    path: /reference/list-settlement-chargebacks
    method: GET
- name: settlements
  endpoint:
    path: /settlements
    method: GET
    data_selector: _embedded.settlements
    params:
      limit: null
      from: null
      balanceId: null
      year: null
      month: null
      currencies: null
- name: settlements
  endpoint:
    path: /settlements
    method: GET
- name: settlement
  endpoint:
    path: /v2/settlements/{id}
    method: GET
- name: settlement
  endpoint:
    path: /settlements/{id}
    method: GET
    data_selector: resource
    params: {}
- name: settlements
  endpoint:
    path: /settlements
    method: GET
    data_selector: settlements
    params: {}
- name: open_settlement
  endpoint:
    path: /settlements/open
    method: GET
    data_selector: settlement
- name: open_settlement
  endpoint:
    path: /settlements/open
    method: GET
- name: settlement
  endpoint:
    path: /settlement
    method: GET
- name: next_settlement
  endpoint:
    path: /settlements/next
    method: GET
    data_selector: object
- name: next_settlement
  endpoint:
    path: /settlements/next
    method: GET
- name: settlement_payments
  endpoint:
    path: /settlement_payments
    method: GET
    params:
      limit: 50
- name: settlement_payments
  endpoint:
    path: /v2/settlements/{settlementId}/payments
    method: GET
- name: settlement_captures
  endpoint:
    path: /settlements/{settlementId}/captures
    method: GET
- name: captures
  endpoint:
    path: /settlements/{settlementId}/captures
    method: GET
    data_selector: _embedded.captures
    params:
      from: string
      limit: integer
      embed: string
      testmode: boolean
- name: settlement_refunds
  endpoint:
    path: /settlements/{settlementId}/refunds
    method: GET
    data_selector: refunds
- name: refunds
  endpoint:
    path: /settlements/{settlementId}/refunds
    method: GET
    data_selector: _embedded.refunds
    params:
      from: string
      limit: integer | null
      embed: string
      testmode: boolean | null
- name: settlement_chargebacks
  endpoint:
    path: /settlements/{settlementId}/chargebacks
    method: GET
- name: chargebacks
  endpoint:
    path: /settlements/{settlementId}/chargebacks
    method: GET
    data_selector: _embedded.chargebacks
    params:
      limit: 50
      from: ''
- name: invoices
  endpoint:
    path: /invoices
    method: GET
    data_selector: invoices
- name: invoice
  endpoint:
    path: /invoices/{invoiceId}
    method: GET
    data_selector: invoice
- name: invoices
  endpoint:
    path: /invoices
    method: GET
- name: invoices
  endpoint:
    path: /invoices
    method: GET
    data_selector: _embedded.invoices
    params:
      incremental: from
- name: invoice
  endpoint:
    path: /invoices/{id}
    method: GET
    data_selector: ''
- name: invoice
  endpoint:
    path: /invoices/{invoice_id}
    method: GET
    data_selector: object
    params: {}
- name: list_invoices
  endpoint:
    path: /invoices
    method: GET
    data_selector: invoices
    params: {}
- name: sales_invoice
  endpoint:
    path: /sales-invoices
    method: POST
- name: invoice
  endpoint:
    path: /invoices
    method: POST
    data_selector: resource
    params: {}
- name: sales_invoices
  endpoint:
    path: /sales-invoices
    method: GET
    data_selector: invoices
- name: sales_invoices
  endpoint:
    path: /sales-invoices
    method: GET
    data_selector: _embedded.sales_invoices
    params:
      from: string
      limit: integer
- name: sales_invoice
  endpoint:
    path: /sales-invoices/{id}
    method: GET
    data_selector: invoice
- name: sales_invoice
  endpoint:
    path: /sales-invoices/{id}
    method: GET
    data_selector: resource
    params:
      testmode: boolean | null
- name: list_sales_invoices
  endpoint:
    path: /sales-invoices
    method: GET
    data_selector: resource
- name: update_sales_invoice
  endpoint:
    path: /sales-invoices/{id}
    method: PATCH
    data_selector: resource
- name: delete_sales_invoice
  endpoint:
    path: /sales-invoices/{id}
    method: DELETE
- name: sales_invoice
  endpoint:
    path: /sales-invoices
    method: POST
    data_selector: resource
- name: sales_invoice
  endpoint:
    path: /v2/sales-invoices/{id}
    method: PATCH
- name: delete_sales_invoice
  endpoint:
    path: /v2/sales-invoices/{id}
    method: DELETE
- name: delayed_route
  endpoint:
    path: /v2/payments/{paymentId}/routes
    method: POST
- name: payment_routes
  endpoint:
    path: /payments/{paymentId}/routes
    method: POST
    data_selector: resource
    params: {}
- name: webhook
  endpoint:
    path: /webhooks
    method: POST
    data_selector: null
    params: {}
- name: webhook
  endpoint:
    path: /webhooks
    method: POST
    data_selector: resource
    params:
      name: Payment notification
      url: https://mollie.com
      eventTypes: payments.read
- name: webhook_event
  endpoint:
    path: /v2/events/{id}
    method: GET
- name: events
  endpoint:
    path: /v2/events/{id}
    method: GET
    data_selector: object
    params: {}
- name: capabilities
  endpoint:
    path: /capabilities
    method: GET
- name: capabilities
  endpoint:
    path: /v2/capabilities
    method: GET
    data_selector: capabilities
- name: sales_invoice
  endpoint:
    path: /sales-invoice
    method: POST
- name: sales_invoice
  endpoint:
    path: /v2/sales-invoices
    method: POST
- name: sales_invoices
  endpoint:
    path: /sales-invoices
    method: POST
    data_selector: ''
- name: payments
  endpoint:
    path: /payments
    method: GET
    data_selector: _embedded.payments
- name: payment
  endpoint:
    path: /payments
    method: POST
    data_selector: id
    params: {}
- name: payment_status
  endpoint:
    path: /payments/{id}
    method: GET
    data_selector: status
    params: {}
- name: payment_methods
  endpoint:
    path: /v2/payment-methods
    method: GET
    data_selector: data
    params: {}
- name: Payments
  endpoint:
    path: /payments
    method: POST
- name: recurring_payments
  endpoint:
    path: /recurring/payments
    method: POST
    data_selector: payments
    params:
      sequenctType: recurring
      method: bancontact
- name: EPS
  endpoint:
    path: /eps
    method: GET
- name: giftcard
  endpoint:
    path: /reference/payments-api
    method: GET
    data_selector: records
    params: {}
- name: Google Pay
  endpoint:
    path: /google-pay
    method: POST
    data_selector: transaction
    params: {}
- name: payments
  endpoint:
    path: /reference/payments-api
    method: GET
- name: orders
  endpoint:
    path: /reference/orders-api
    method: GET
- name: paybybank
  endpoint:
    path: /reference/payments-api
    method: POST
    data_selector: transaction
    params:
      minimum_transaction_amount: EUR 0.01 GBP 0.01
      maximum_transaction_amount: EUR 50,000.00 GBP 40,000.00
- name: payments
  endpoint:
    path: /reference/payments-api
    method: GET
    data_selector: records
    params: {}
- name: orders
  endpoint:
    path: /reference/orders-api
    method: GET
    data_selector: records
    params: {}
- name: payments
  endpoint:
    path: /payments
    method: POST
    data_selector: paymentDetails
- name: vouchers
  endpoint:
    path: /vouchers
    method: GET
    data_selector: vouchers
- name: payments
  endpoint:
    path: /payments
    method: GET
- name: payments
  endpoint:
    path: /v2/payments
    method: GET
    data_selector: data
    params: {}
- name: refund_statuses
  endpoint:
    path: /refunds/statuses
    method: GET
    data_selector: statuses
    params: {}
- name: refunds
  endpoint:
    path: /reference/refunds-api
    method: POST
    data_selector: refunds
    params: {}
- name: create_order_refund
  endpoint:
    path: /reference/create-order-refund
    method: POST
    data_selector: order_refund
    params: {}
- name: customers
  endpoint:
    path: /customers
    method: POST
    data_selector: id
- name: payments
  endpoint:
    path: /payments
    method: POST
    data_selector: id
- name: mandates
  endpoint:
    path: /customers/{customerId}/mandates
    method: GET
    data_selector: mandates
- name: subscriptions
  endpoint:
    path: /customers/{customerId}/subscriptions
    method: POST
    data_selector: id
- name: methods
  endpoint:
    path: /v2/methods
    method: GET
    data_selector: _embedded.methods
    params:
      amount[currency]: SEK
      amount[value]: '10.00'
- name: payment_hold
  endpoint:
    path: /payments/hold
    method: POST
- name: payments
  endpoint:
    path: /payments
    method: POST
    data_selector: ''
    params: {}
- name: captures
  endpoint:
    path: /payments/tr_.../captures
    method: POST
    data_selector: ''
    params: {}
- name: release-authorization
  endpoint:
    path: /payments/tr_.../release-authorization
    method: POST
    data_selector: ''
    params: {}
- name: payments
  endpoint:
    path: /v2/payments
    method: POST
    data_selector: details.qrCode
    params:
      method: ideal
- name: vouchers
  endpoint:
    path: /vouchers
    method: GET
    data_selector: vouchers
- name: payment
  endpoint:
    path: /payments
    method: POST
    data_selector: resource
    params: {}
- name: get_payment
  endpoint:
    path: /payments/{id}
    method: GET
    data_selector: details
    params: {}
- name: create_payment
  endpoint:
    path: /reference-link/create-payment
    method: POST
    data_selector: payment
    params: {}
- name: release_authorization
  endpoint:
    path: /reference-link/release-authorization
    method: POST
    data_selector: release
    params: {}
- name: create_refund
  endpoint:
    path: /reference-link/create-refund
    method: POST
    data_selector: refund
    params: {}
- name: payment_methods
  endpoint:
    path: /v2/methods
    method: GET
    data_selector: data
- name: create_payment
  endpoint:
    path: /v2/payments
    method: POST
    data_selector: data
- name: create_payment
  endpoint:
    path: /payments
    method: POST
    data_selector: payment
    params: {}
- name: create_order
  endpoint:
    path: /orders
    method: POST
    data_selector: order
    params: {}
- name: get_current_profile
  endpoint:
    path: /profiles
    method: GET
    data_selector: profiles
    params: {}
- name: Create payment
  endpoint:
    path: /reference/create-payment
    method: GET
- name: methods
  endpoint:
    path: /methods
    method: GET
    data_selector: methods
    params:
      includeWallets: applepay
- name: create_payment
  endpoint:
    path: /payments
    method: POST
    data_selector: payment
    params:
      method: applepay
- name: payments
  endpoint:
    path: /payments
    method: POST
    data_selector: payment
    params: {}
- name: payments
  endpoint:
    path: /payments
    method: POST
    data_selector: payment
    params: {}
- name: create_order
  endpoint:
    path: /reference/create-order
    method: POST
    data_selector: order
    params:
      method: paypal
- name: get_order
  endpoint:
    path: /reference/get-order
    method: GET
    data_selector: order
    params: {}
- name: payments
  endpoint:
    path: /payments
    method: POST
    data_selector: payment
    params: {}
- name: terminals
  endpoint:
    path: /v1/terminals
    method: GET
- name: payments
  endpoint:
    path: /payments
    method: POST
    data_selector: payment
    params: {}
- name: vouchers
  endpoint:
    path: /vouchers
    method: GET
    data_selector: records
- name: payment
  endpoint:
    path: /v2/payments
    method: POST
    data_selector: resource
    params: {}
- name: get_payment
  endpoint:
    path: /v2/payments/{id}
    method: GET
    data_selector: resource
    params: {}
- name: payment_links
  endpoint:
    path: /payment-links
    method: POST
    data_selector: data
    params: {}
- name: invoicing
  endpoint:
    path: /invoices
    method: POST
    data_selector: data
    params: {}
- name: invoices
  endpoint:
    path: /invoices
    method: GET
    data_selector: invoices
- name: payment_requests
  endpoint:
    path: /payments
    method: GET
    data_selector: payments
    params: {}
- name: payment_options
  endpoint:
    path: /v2/payment-options
    method: GET
- name: subscriptions
  endpoint:
    path: /subscriptions
    method: GET
- name: orders
  endpoint:
    path: /orders
    method: GET
- name: orders
  endpoint:
    path: /orders
    method: GET
    data_selector: orders
- name: payment_methods
  endpoint:
    path: /docs/mollie/payment_methods
    method: GET
- name: orders_api
  endpoint:
    path: /reference/orders-api
    method: GET
- name: Payments API
  endpoint:
    path: /reference/payments-api
    method: GET
- name: Orders API
  endpoint:
    path: /docs/orders-overview
    method: GET
- name: subscriptions
  endpoint:
    path: /subscriptions
    method: GET
    data_selector: records
- name: subscriptions
  endpoint:
    path: /mollie/subscriptions
    method: POST
    data_selector: subscriptions
    params: {}
- name: subscription_emails
  endpoint:
    path: /mollie/subscription_emails
    method: POST
    data_selector: subscription_emails
    params: {}
- name: subscription_products
  endpoint:
    path: /mollie/subscription_products
    method: POST
    data_selector: subscription_products
    params: {}
- name: orders
  endpoint:
    path: /orders
    method: GET
    data_selector: data
- name: orders
  endpoint:
    path: /orders
    method: POST
    data_selector: data
- name: payments
  endpoint:
    path: /v2/payments
    method: GET
    data_selector: records
- name: orders
  endpoint:
    path: /v2/orders
    method: GET
    data_selector: records
- name: orders
  endpoint:
    path: /orders
    method: GET
    data_selector: data
    params: {}
- name: orders
  endpoint:
    path: /api/orders
    method: GET
    data_selector: orders
- name: refunds
  endpoint:
    path: /api/refunds
    method: POST
    data_selector: refunds
- name: payment_statuses
  endpoint:
    path: /api/payment-statuses
    method: GET
    data_selector: payment_statuses
- name: subscriptions
  endpoint:
    path: /subscriptions
    method: GET
    data_selector: subscriptions
- name: automatic_refunds
  endpoint:
    path: /apps/purchased
    method: GET
    data_selector: refunds
    params: {}
- name: payment_methods
  endpoint:
    path: /v2/payment-methods
    method: GET
    data_selector: paymentMethods
- name: payments
  endpoint:
    path: /v2/payments
    method: POST
    data_selector: payment
- name: payment_methods
  endpoint:
    path: /v2/payment-methods
    method: GET
    data_selector: data
    params: {}
- name: orders
  endpoint:
    path: /orders
    method: GET
    data_selector: data
    params: {}
- name: subscriptions
  endpoint:
    path: /subscriptions
    method: GET
    data_selector: records
- name: subscriptions
  endpoint:
    path: /subscriptions
    method: GET
    data_selector: subscriptions
- name: payment_methods
  endpoint:
    path: /v2/payment-methods
    method: GET
    data_selector: data
- name: payments
  endpoint:
    path: /v2/payments
    method: POST
    data_selector: data
notes:
- Check against your records that the resource actually has been changed when your
  webhook is called.
- Your webhook URL needs to be accessible from Mollie's point of view.
- API calls are authenticated with an API credential
- All API endpoints which are related to business operations, do not support test
  mode.
- We no longer recommend implementing classic Mollie Webhooks, given their limited
  functionality. Please gradually migrate available event types to the new Webhooks
  instead.
- If you want to test webhooks locally, you should use a service like ngrok to make
  your local environment accessible from the internet.
- Live mode requires HTTPS
- Webhook endpoint should quickly respond with a success status such as 200
- This feature is in beta.
- The maximum number of objects returned is 250.
- The v2 API endpoints use cursor pagination.
- The Mollie API uses cursor pagination.
- Currently, idempotency keys are tied to the API credential you used on the initial
  request.
- When you rotate credentials, previously used Idempotency-Key values will therefore
  no longer be recognized.
- This limitation particularly affects OAuth, where access tokens expire within one
  hour.
- If you wish to combine the Idempotency-Key feature with OAuth, we recommend cycling
  the access token a few minutes earlier than usual to prevent performing critical
  API requests right before the access token expires.
- Idempotency keys are recommended for POST requests to avoid double charges.
- Request Logs are detailed records of incoming and outgoing requests.
- The Payments API is at the heart of the Mollie API. It allows you to create and
  manage payments.
- The description is truncated automatically according to the limits of the used payment
  method.
- The parameter is normally required, but can be omitted for recurring payments and
  for Apple Pay payments.
- The profileId parameter is required for organization-level credentials.
- The redirectUrl parameter is normally required, but can be omitted for recurring
  payments.
- The API will not reject strings longer than the maximum length but it will truncate
  them to fit.
- The webhookUrl must be reachable from Mollie's point of view.
- For test mode payments in certain scenarios, a hosted interface is available to
  help you test different payment states.
- Recurring payments do not have a checkout URL, because these payments are executed
  without any user interaction.
- Releases the full remaining authorized amount.
- Mollie will do its best to process release requests, but it is not guaranteed that
  it will succeed.
- Uses OAuth2 for authentication
- The status reason object is only available for Point-of-Sale payments at this time.
- Payment methods can be activated via the Mollie Web app or via the Enable payment
  method endpoint.
- Results of this endpoint are not paginated.
- Some payment methods require extra steps in order to be activated.
- The results are paginated.
- Refunds will be executed with a delay of two hours.
- A refund can only be canceled while its status field is either queued or pending.
- The Captures API can only be used for payments created with the Payments API.
- This API is different from the Payments API, as links generated by the Payments
  API are only short-lived.
- The webhookUrl must be reachable from Mollie's point of view, so you cannot use
  localhost.
- Access with API key
- Access token with payment-links.write
- Test entities cannot be retrieved when the endpoint is set to live mode, and vice
  versa.
- Most API credentials are specifically created for either live mode or test mode.
- Payment links which have not been opened and no payments have been made yet can
  be deleted entirely.
- To simply disable a payment link without fully deleting it, you can use the `archived`
  parameter on the Update payment link endpoint instead.
- If you are interested in offering point-of-sale payments, please see the product
  offering page.
- Retrieve a list of all physical point-of-sale devices.
- Uses OAuth2 with refresh token — requires setup of connected app in api
- We no longer recommend using the Orders API. Please refer to the Payments API instead.
- Only relevant if you wish to manage authorization and capturing separately.
- Some payment methods allow placing a hold on the card or bank account.
- By default, we charge the customer's card or bank account immediately when they
  complete the payment.
- The maximum delay is 7 days (168 hours).
- If you set a capture delay however, we will delay the automatic capturing of the
  payment for the specified amount of time.
- The redirectUrl parameter is normally required, but can be omitted for recurring
  payments and Apple Pay payments with an applePayPaymentToken.
- Uses OAuth2 with Bearer token
- Access token with refunds.read
- The Shipments API allows you to indicate that you have (partially) fulfilled an
  order.
- Customers will be created on organization level and so not linked to the profile.
- The redirectUrl is optional for recurring payments and for Apple Pay payments with
  an applePayPaymentToken.
- In v2 endpoints, URLs are commonly represented as objects with an `href` and `type`
  field.
- A mandate is created automatically for the first payment.
- Access token with mandates.write required to create mandates
- Canceling a subscription has no effect on the mandates of the customer.
- Defaults to descending order for result set.
- The results are not paginated.
- To create new organizations, refer to the Onboarding guide.
- Profiles are required for payment processing.
- The Onboarding API is designed for platforms who wish to automatically onboard their
  customers to Mollie.
- OAuth2 authentication required.
- We no longer recommend implementing this endpoint. Please refer to the Client Links
  API instead to kick off the onboarding process for your merchants.
- Response includes a list of capabilities.
- Beta feature — this feature is currently in beta testing, and the final specification
  may still change.
- A client link must be used within 30 days of creation.
- Due to technical limitations, data from before 1 July 2022 is not available via
  this API.
- All Business Operations endpoints do not support the testmode, meaning that they
  cannot be used in a sandbox environment.
- OAuth2 with refresh token is required for authentication.
- Access token with balances.read required
- Retrieve a list of all your invoices, optionally filtered by year or by invoice
  reference.
- For organization-level credentials such as OAuth access tokens, the `profileId`
  parameter is required.
- 'Beta feature: This feature is currently in beta testing, and the final specification
  may still change.'
- Beta feature — This feature is currently in beta testing, and the final specification
  may still change.
- This feature is currently in beta testing, and the final specification may still
  change.
- Test mode available for integration without needing a physical terminal.
- Access token with payments.write
- Uses OAuth2 with Bearer token.
- Use 'test' API key for testing and switch to 'live' API key for production.
- Use HTTP GET for redirect to the checkout URL.
- Using HTTP POST for redirection will cause issues with some payment methods.
- Payment creation is elemental to the Mollie API.
- To activate Alma please contact your account manager or reach out to our support
  team.
- Minimum transaction amount EUR 50.00
- Maximum transaction amount EUR 2,000.00
- Session timeout 20 minutes
- Refund validity 365 days
- Settlement delay 5 business days
- Chargeback risk Yes
- Chargeback period 120 days
- 'Minimum transaction amount: EUR 0.02'
- 'Maximum transaction amount: No maximum limit'
- 'Session timeout: 5 minutes'
- 'Refund validity: 365 days'
- 'Chargeback period: 365 days'
- This payment method is in beta.
- Given that Bacs Direct Debit allows for disputes to be raised indefinitely, if a
  customer disputes a payment after you’ve issued a refund, there’s a risk that you
  could lose both the refunded amount and the amount involved in the dispute.
- Disputes can arise with BancomatPay transactions, BancomatPay consumers must submit
  a complaint within 60 calendar days of purchase and provide the required documentation
  based on the dispute type.
- 'Maximum transaction amount: EUR 1,500.00 for mobile payments (URL intent and QR
  code). Limit does not apply for Card entry.'
- 'Session timeout: 1 hour'
- 'Settlement delay: 2 business days'
- Bancontact WIP is currently supported for merchant initiated recurring payments
  only.
- This service is subject to eligibility.
- Minimum transaction amount is EUR 0.02
- Maximum transaction amount is EUR 1,500.00
- Session timeout is 1 hour
- Refund validity is 365 days
- Settlement delay is 2 business days
- To lower the risk for chargebacks, capture funds when fulfilling the order.
- Add a valid shipping address to the payment to help prevent disputes and chargebacks.
- To activate Bizum please contact your account manager or our support team.
- In order to offer Bizum you must have a Spanish bank that is supported by Bizum.
- 'Required fields: billingAddress.phoneNumber. If not provided, it will redirect
  the consumer to an intermediary screen to collect it.'
- 'Minimum transaction amount: EUR 0.50'
- 'Maximum transaction amount: EUR 2000.00'
- 'Session timeout: 4 min'
- 'Recurring: No'
- 'Chargeback risk: No'
- Minimum transaction amount is PLN 0.01
- Maximum transaction amount is PLN 50,000.00
- Session timeout is 55 seconds
- Refund validity is 13 months
- Settlement delay is 4 business days
- Chargeback period is 13 months
- Minimum transaction amount is EUR 0.00
- Maximum transaction amount is EUR 10,000 (default limit)
- Session timeout is 15 minutes
- Chargeback period is 120 days in general
- 'Minimum transaction amount: EUR 1.00'
- 'Maximum transaction amount: EUR 10,000.00'
- 'Session timeout: 60 minutes'
- Refunds are currently not supported
- Mollie supports stacking transactions, e.g. starting with a partial gift card payment
  and then finalizing the payment using more gift cards or one of the other payment
  methods.
- 3DS pre-authenticated only
- Mollie supports only authenticated device tokens transactions which means only mobile
  compatibility for Android OS 9.0 and above.
- It is highly recommended to use Google Chrome as mobile browser.
- Devices rooted or with a modified OS are not compatible with Google Pay by Mollie
  for now.
- You must have Google Play Services enabled.
- In order to test this you will have to do it in the live mode.
- The most widely used payment method in the Netherlands. At least 60% of Dutch shoppers
  use it to pay for their online purchases.
- Minimum transaction amount is EUR 0.01
- Maximum transaction amount is EUR 50,000.00
- Charge is instant charge
- Minimum transaction amount is EUR 50.00
- Maximum transaction amount is EUR 5,000.00
- Session timeout is 48 hours
- Refund validity is 2 days
- Settlement delay is 11 business days
- Chargeback risk is Yes
- Chargeback period is Unlimited
- Maximum transaction amount is EUR 50,000
- Session timeout is 60 minutes
- Settlement delay is 1 business day
- Charge is Instant charge
- Maximum transaction amount is EUR 5000.00
- Session timeout is 4 min
- Refund validity is 120 days
- Settlement delay is 3 business days
- 'Minimum transaction amount: EUR 0.01'
- 'Maximum transaction amount: EUR 5000.00'
- 'Session timeout: 7 days'
- 'Refund validity: 456 days'
- 'Settlement delay: 3 business days'
- Session timeout is between 5-30 minutes
- The transition period for a successful payment initiation to transition from status
  'pending' to 'paid' depends on the consumer bank.
- Banks do not have to support business bank accounts for the Pay by Bank flow.
- Pay by Bank is a payment method that allows customers to pay for goods or services
  directly from their bank account.
- Refund validity is 180 days
- Chargeback risk exists between Paypal and customer.
- 'Minimum transaction amount: EUR 0.01 (or equivalent)'
- 'Maximum transaction amount: All EU countries: 50.00 EUR/transaction with classic
  pins.'
- 'Session timeout: 2 hours'
- 'Settlement delays: Next business day'
- Minimum transaction amount is 0.01 EUR
- Maximum transaction amount is 50,000.00 EUR (Default Limit)
- Session timeout is approximately 40 seconds
- Ensure to follow Riverty's Best Practices by using the sitewide Integration Guide.
- 'Specific Check for the Netherlands: Ensure that no ''payment surcharge'' for BNPL
  end-users is set in the webshop.'
- Minimum transaction amount EUR 0.01 (or equivalent)
- Maximum transaction amount EUR 50,000.00 Higher limits are possible via a support
  request
- Session timeout 30 minutes
- Refund validity 90 days
- Settlement delay 3 business days
- Instant charge
- 'Minimum transaction amount: 0.01 EUR'
- 'Maximum transaction amount: 1,000,000.00 EUR'
- 'Session timeout: 12(+2) days (default)'
- Maximum transaction amount is 1,000.00 EUR (Default Limit)
- Session timeout is 60 minutes / 15 minutes
- Settlement delay is 9 business days
- Chargeback period is within 8 weeks, customer can report unauthorized Direct debit
  within 13 months of payment
- Minimum transaction amount is SEK 0.01
- Maximum transaction amount is SEK 115000.00
- Session timeout is 3 minutes
- Session timeout is 7 days
- Chargeback risk is No
- 'Dispute Notification & Request for Information: You (the merchant) will be contacted
  directly by the Mollie chargeback team via email.'
- 'Information Supplied: You (the merchant) have five working days to provide challenge
  information to the Mollie Chargeback team via email.'
- Some objects may return nulls in deeply nested fields
- It is not a good idea to predict payment expiry. Best wait until your webhook is
  called and fetch the status as usual. This is the most reliable way to keep your
  system in sync with Mollie, also in the case of expiring payments.
- To keep your conversion as high as possible, we redirect your customer back to Mollie's
  hosted checkout page in case the payment fails or gets canceled and there are other
  methods available. This is default behaviour that can not be changed.
- Make sure to add a webhookUrl when creating the payment.
- Make sure that the fulfilment process is idempotent to prevent fulfilment multiple
  times for a single order.
- Always make sure to listen to webhooks as a back-up.
- Refunds have their own status, independent of the Payment or Order they were created
  for.
- Partial refunds are fully supported. You can create multiple partial refunds if
  needed.
- Refunds for regular payment integrations are created using the Refunds API.
- Refunds support descriptions.
- Recurring payments can be used to charge customers on a regular basis or to offer
  automatic top-ups with credits-based services.
- You can not use recurring payments in our Web app. It's only possible to use our
  API (direct or indirect, e.g. with a partner) for this.
- If you have connected your PayPal account to Mollie before January 2025, you might
  have to reconnect your account in the Mollie Web app to enable all recurring functionality.
- Mollie offers payments in non-EUR currencies via its v2 APIs.
- For PayPal payments made in Hungarian forint or New Taiwan dollar, we round the
  amount up to zero decimals since PayPal does not support smaller denominations.
- Placing a hold is recommended in cases where you are not yet sure up front if and
  when you will be able to fulfil the order completely.
- Delayed automatic capture is only available for card payments.
- Extending the authorization date, also known as an incremental authorization, is
  not supported.
- Vouchers are a prepaid payment method that can be used to make purchases both online
  and in-store.
- Mollie does not handle settlement on your behalf. Settlement is handled by the brand
  owner.
- Use the 'orderLineCategories' query parameter to indicate applicable categories
  for checkout.
- You cannot perform any voucher refunds due to the limitation set by the brand issuers.
- While not required for every payment method, it is recommended to add lines, billingAddress,
  and locale for all payments.
- You cannot use the Captures API to capture funds of an Order or of a Payment that
  is part of an Order.
- For the credit card payment method, you can fully embed the credit card input fields
  while staying PCI-DSS-compliant using Mollie Components.
- Mollie Components is fully PCI-DSS SAQ-A compliant.
- The cardToken is valid for 1 hour.
- When test mode is enabled for Mollie Components, the card tokens you receive should
  be used in combination with your Test API key instead of your Live API key.
- Text styling properties in the input field cannot be styled from outside the iframe.
- You do not need to join the Apple Developer Program for this integration.
- The button can be used when your account is fully setup at PayPal and Mollie.
- Once the order is created, the amount cannot be changed.
- PayPal returns the shippingAddress to us, but it does not return the billingAddress.
- Each terminal has a unique identifier called ‘terminal ID’.
- The terminal status will be `pending`, followed by an `active` status once it is
  ready to accept payments.
- Webhook URL can be provided per payment.
- You can use test mode to ensure your integration works as expected, before rolling
  it out to your customers.
- You will have to contact Mollie support, who will create a test mode terminal for
  you.
- Uses API key for authentication.
- Vouchers via Point of Sale payments only support a single category per payment.
- For Monizze and Pluxee, you cannot perform refunds due to the limitation set by
  the brand issuers.
- No-code solutions for Payment Links and Invoicing
- Payment links direct customers to a branded checkout page.
- All invoices are managed from the Mollie Web app without writing a single line of
  code.
- A payment link is created.
- You can only send automatic emails to HubSpot marketing contacts.
- Select Deals from the Sales drop-down menu.
- Open the relevant deal card.
- Pennylane connects to Mollie through OAuth which means that you have to be able
  to log in to both your Mollie and Pennylane account before starting the connect
  procedure.
- If your synchronization start date is set to the past, all journal-specific transactions
  are aggregated into single entries listed by journal. Transaction are aggregated
  from the start date to 1 a.m. of the current date.
- Check the history and details of every payment synchronization that has taken place
  for a specific integration.
- You need to activate Vouchers first to enable this payment method.
- Check your local legislation before adding a payment surcharge.
- By default, customers have 28 days to pay for their orders.
- You can only accept actual payments after Mollie has approved your website profile.
- Use Mollie test credentials to test credit/debit cards.
- Apple Pay Direct works only in a production environment (in either test or live
  mode), and on Apple devices or Safari.
- You can only send payment requests for orders that have the status "Pending".
- Manually changing an order's status to "Refunded" in WooCommerce does not automatically
  update the Mollie order status to "Refunded".
- Enabling debugging increases server storage requirements due to additional log data.
- By default, Mollie configuration data will be retained when you uninstall and reinstall.
- By installing onsite cards, this will override the default payment methods in your
  store.
- The Payment methods provided by Mollie always settle payments automatically, even
  if your Shopify store is set to manual capture.
- Minimize chargeback risk by clearly communicating the charge amount and frequency
  to your customers.
- Ensure customer awareness by sending advance notifications before each payment,
  for example via email.
- Shopify sends payment descriptions to Mollie.
- Automatic refunds may occur due to failed payment confirmation from Shopify.
- Product availability and discount code validity can affect payment confirmation.
- Some payment methods require Mollie's approval before they're available in your
  Mollie Web app.
- Refunds are currently not possible for vouchers.
- Mollie supports subscriptions through a dedicated Mollie module that you must install
  separately to enable subscription features.
- Test Apple Pay Direct and the Bancontact QR code by making actual payments, as they
  only work in live mode.
- You can only mark an order as *shipped* if the customer pays for it with a payment
  method that uses the Orders API.
- Klarna payment methods require you to mark orders as *shipped* before capturing
  payment.
- Requires setup of connected app in Mollie
- Mollie App for Shopware 6 uses OAuth to securely connect to Mollie.
- 'In test mode, Mollie simulates payments: no real money transfers occur.'
- Mollie-Shopware 6 status mappings are pre-configured and you cannot change them.
- You can only mark an order as shipped if the customer pays for it with a payment
  method that uses the Orders API.
- Klarna payment methods require you to mark orders as shipped before capturing payment.
- The Mollie app handles order status transitions automatically.
- To comply with UK regulations, UK-based merchants have to select a UK-registered
  organization to ensure that they use the correct API keys.
- 'Mollie is only notified when orders with the following statuses are cancelled:
  Created, Authorized, Shipping - only unshipped items are cancelled.'
- Requires OAuth2 authentication setup
- Ensure to handle payment status correctly
- Mollie has its own standard set of payment statuses which may differ from Shopware
  6's.
- Cancel subscriptions on behalf of your customers in situations where they are unable
  to do so themselves or have missed multiple consecutive payments.
- Follow the steps in Troubleshoot common issues article to ensure proper connection
  between Mollie and your Shopware instance
- 'To set the logging period, follow these steps: Log in to Shopware 6, go to Extensions
  > My extensions, open the Mollie Payments context menu, select Configure, enter
  the duration in the Keep log files (days) field, and save the changes.'
- Before updating Mollie Plugin for Shopware 6, review to ensure compatibility with
  your version of Shopware 6 or third-party apps.
- Especially on password-protected staging systems, webhook problems might occur.
  Ensure Mollie can reach the webhook endpoint, and exempt the {basepath}/mollie/webhook/
  path from access control.
- Mollie for Lightspeed eCom uses OAuth to securely connect to Mollie.
- To select an API method, log in to Lightspeed eCom and go to Apps > Purchased apps.
- If you're switching to Mollie for Lightspeed eCom from Lightspeed Payments by Mollie
  or Mollie V2, keep in mind that you need to be able to process refunds on previous
  orders.
- If the webhooks fail, Lightspeed eCom is unable to process payments properly and
  orders aren't updated.
- Ensure Apple Pay Domain Association file is installed and publicly accessible
- Payment links redirect customers to your Mollie Checkout page.
- Enable debugging and get the log files from PrestaShop settings.
- Check the PrestaShop's own logs alongside this troubleshooting sheet.
- Mollie for PrestaShop stores data exchanged between Mollie and PrestaShop in a cache.
  Problems related to information loading can occur when the cache gets too full.
- In WiX, Mollie supports online payments using the methods above, and it also supports
  refunds. However, it does not support recurring payments or subscriptions.
errors:
- '422 Unprocessable Entity: The amount is higher than the maximum'
- '400: Bad Request – The Mollie API was unable to understand your request. There
  might be an error in your syntax.'
- '401: Unauthorized – Your request was not executed due to failed authentication.
  Check your API key.'
- '403: Forbidden – You do not have access to the requested resource.'
- '404: Not Found – The object referenced by your URL does not exist.'
- '405: Method Not Allowed – You are trying to use an HTTP method that is not applicable
  on this URL or resource. Refer to the Allow header to see which methods the endpoint
  supports.'
- '409: Conflict – You are making a duplicate API call that was probably a mistake
  (only in v2).'
- '410: Gone – You are trying to access an object, which has previously been deleted
  (only in v2).'
- '415: Unsupported Media Type – Your request''s encoding is not supported or is incorrectly
  understood. We recommend to always use JSON.'
- '422: Unprocessable Entity – We could not process your request due to another reason
  than the ones listed above. The response usually contains a `field` property to
  indicate which field is causing the issue. If your account is suspended, visit your
  Dashboard for more information.'
- '429: Too Many Requests – Your request has hit a rate limit. You can try again after
  a short period.'
- '500: Internal Server Error – An internal server error occurred while processing
  your request. Our developers are notified automatically, but if you have any information
  on how you triggered the problem, contact us.'
- '502: Bad Gateway – The service is temporarily unavailable, either due to calamity
  or (planned) maintenance. Retry the request at a later time.'
- '503: Service Unavailable – The service is temporarily unavailable, either due to
  calamity or (planned) maintenance. Retry the request at a later time.'
- '504: Gateway Timeout – Your request is causing an unusually long process time.'
- 'invalid webhook location: Your webhook URL needs to be accessible from Mollie''s
  point of view.'
- '400 Bad Request: Same idempotency key used for different endpoints or parameters.'
- '409 Conflict: Second request received while first is still processing.'
- 422 The request contains issues. For example, if a payment description is missing,
  or if the specified amount is higher than the maximum allowed amount.
- 503 The payment method supplier is currently unavailable. For example, if you are
  setting up an iDEAL payment but the iDEAL network is having issues.
- 400 The request contains issues. For example, if the specified `from` value is not
  a valid ID.
- 404 No entity with this ID exists.
- 422 The request contains issues.
- 'REQUEST_LIMIT_EXCEEDED: Throttle API calls or reduce frequency'
- '401 Unauthorized: Recheck OAuth scopes or token expiration'
- '400 Bad Request: Check your request for errors.'
- '401 Unauthorized: Check your API Key or OAuth token.'
- '404 Not Found: The requested resource could not be found.'
- '404: No entity with this ID exists.'
- '422: The request contains issues.'
- 'merchant_id_not_found: Merchant ID not found.'
- 'merchant_account_closed: Merchant account closed.'
- 'terminal_id_not_found: Terminal ID not found.'
- 'service_failed: Service failed.'
- 'invalid_operation: Invalid operation.'
- 'authorization_error: Authorization failed, not logged in.'
- 'login_failed_without_reason: Login failed (Reason not specified).'
- 'invalid_retailer: Invalid/unknown Retailer.'
- 'refer_to_card_issuer: The transaction was cancelled after being initially approved
  by the issuer. This can be due to various reasons, for example, if the shopper returns
  goods after purchase.'
- 'card_does_not_exist: Card or Customer does not exist.'
- 'expired_card: The card has expired. The shopper should use another card or contact
  their bank for a replacement.'
- 'card_is_blocked: Card is blocked.'
- 'insufficient_funds: The account associated with the card has insufficient funds.
  The shopper should use another payment method or contact their bank.'
- 'invalid_card_id: Invalid CardId.'
- 'card_is_transferred: Card is transferred.'
- 'card_is_not_active: Card is not active.'
- 'incorrect_purchase_value: Incorrect activation or purchase value.'
- 'card_not_available: Card not available.'
- 'wrong_currency: Wrong currency.'
- 'login_failed_unknown_user: Login failed: Unknown user.'
- 'login_failed_invalid_password: Login failed: Invalid password.'
- 'invalid_pin: Invalid PIN.'
- 'invalid_ean_code: Invalid EAN code.'
- 400 The request contains issues. For example, if the specified `sequenceType` value
  is invalid.
- '400: The request contains issues. For example, if the specified `locale` value
  is invalid.'
- 400 Bad Request
- 401 Unauthorized
- '404 Not Found: If a method is not available on this profile'
- '403 Forbidden: If the method is available but not enabled yet'
- '404: Not Found'
- '400 to 599: The status code of the error message.'
- 204 An empty response.
- 400 to 599
- '404 Not Found: No entity with this ID exists.'
- '409 Conflict: Two identical refund requests were submitted on the same payment
  in short succession.'
- '422 Unprocessable Entity: The request contains issues. For example, if the refund
  amount is missing.'
- '400: The request contains issues. For example, if the specified `from` value is
  not a valid ID.'
- '404 Not Found: No item with this ID exists, or the refund was canceled.'
- '204: An empty response if the refund was successfully canceled.'
- '400: The request contains issues.'
- '400: Bad Request'
- '400: Bad Request - The request contains issues.'
- '404: Not Found - No entity with this ID exists.'
- 422 The request contains issues. For example, if the validation URL is missing.
- 422 The request contains issues. For example, if the payment link description is
  missing.
- '400: Bad Request - Check the provided parameters.'
- '422: The request contains issues. For example, if no parameters are provided.'
- '400 Bad Request: The request was malformed or contains invalid parameters.'
- '422: The request contains issues. For example, if the URL is missing.'
- '422: The request contains issues. For example, if the URL is invalid.'
- '400 to 599: The status code of the error message. This is always the same code
  as the status code of the HTTP message itself.'
- 'Not Found: The HTTP reason phrase for a 404 error.'
- The request contains issues. For example, if the webhook has already been deleted.
- 422 The request contains issues. For example, if the webhook has already been deleted.
- '401: Unauthorized'
- 422 The request contains issues. For example, if the order number is missing, or
  if the specified amount is higher than the maximum allowed amount.
- 'QUERY_TIMEOUT: Break down filters or add selectivity'
- '400 Bad Request: Check the provided fields.'
- '401 Unauthorized: Recheck API key or permissions'
- 422 The request contains issues. For example, if an order line ID is missing.
- 400 to 599 The status code of the error message.
- '400: Bad Request - Check the request parameters.'
- '400 Bad Request: Check input values.'
- invalid_grant
- 'invalid_grant: Authorization code doesn''t exist or is invalid for the client'
- 204 No Content
- '400 Bad Request: You need to provide the ''token'' field'
- '422: The request contains issues. For example, if a profile name is missing or
  website URL is invalid.'
- '404 Not Found: No entity with this ID exists'
- '410 Gone: The requested resource is no longer available'
- '410 Gone: The requested resource is no longer available.'
- '422 Unprocessable Entity: The request contains issues.'
- 410 The requested resource is no longer available.
- 422 The request contains issues. For example, if the `owner` field is missing.
- '429: Rate Limit has been reached.'
- title The HTTP reason phrase of the error.
- detail A detailed human-readable description of the error that occurred.
- 'title: The HTTP reason phrase of the error.'
- 'detail: A detailed human-readable description of the error that occurred.'
- '400 Bad Request: Invalid request format.'
- 422 The request contains issues. For example, if no parameters are provided.
- '400 Bad Request: Check your request parameters'
- '401 Unauthorized: Invalid API key'
- '404 Not Found: Resource not found'
- 'Dispute Notification: The consumer starts a new dispute and Riverty will notify
  you via email.'
- 'Request for Information: On Day 21, if the dispute is still open, Riverty will
  email you.'
- '4xx: Situation can occur in which it is not possible to perform the refund.'
- '503 Service unavailable: If you perform many refunds in parallel.'
- 'AC01: Account identifier incorrect (i.e. invalid IBAN)'
- 'AC04: Account closed'
- 'AC06: Account blocked for Direct Debit'
- 'MD01: No Mandate'
- 'MD06: Return of funds requested by end customer'
- 'MD07: Debtor deceased'
- 'MS02: Refusal by the Debtor'
- 'MS03: Reason not specified'
- 'SL01: Specific Service offered by the Debtor Bank'
- Payments cannot be canceled if they are in a final state like paid.
- It is not possible to provide a specific amount to release from an authorization.
- '401 Unauthorized: Ensure you use the correct API key for the profile.'
- authentication_abandoned
- authentication_failed
- authentication_required
- authentication_unavailable_acs
- card_declined
- card_expired
- inactive_card
- insufficient_funds
- invalid_cvv
- invalid_card_holder_name
- invalid_card_number
- invalid_card_type
- possible_fraud
- refused_by_issuer
- unknown_reason
- '422 Unprocessable Entity: The transaction was declined by the issuer'
- '422 Unprocessable Entity: If the billingAddress is required but not provided with
  methods other than paypal.'
- 'Payment declined: Ensure a voucher card is used for payment.'
- 'Partial payment not eligible: Initiate separate payments for eligible and non-eligible
  items.'
- '401 Unauthorized: Check your API key and permissions'
- '404 Not Found: The requested resource does not exist'
- '500 Internal Server Error: Try again later'
- '401 Unauthorized: Make sure Mollie can reach the webhook endpoint'
- 'SQLSTATE[23000]: Integrity constraint violation: 1062 Duplicate entry `X`'
- 'PHP Fatal error: Allowed memory size of `X` bytes exhausted'
- Maximum execution time of `X` seconds exceeded
- 500 Internal Server Error
auth_info:
  mentioned_objects:
  - API key
  - Access token with payments.read
  - OauthToken
  - Access token with profiles.write
  - payment-links.read
  - Access token
  - webhooks.read
  - Access token with webhooks.write
  - Access token with webhooks.read
  - webhooks.write
  - events.read
  - Access token with mandates.write
  - Access token with subscriptions.read
  - Access token with subscriptions.write
  - subscriptions.write
  - OAuth
  - Organizations
  - organizations.read
  - Access token with organizations.read
  - profiles.write
  - profiles.read
  - Access token with onboarding.read
  - access token
  - clients.read
  - clients.write
  - Access token with balances.read
  - balance-reports.read
  - settlements.read
  - Access token with settlements.read
  - payments.read
  - refunds.read
  - invoices.read
client:
  base_url: https://api.mollie.com/v2
  auth:
    type: apikey
    location: header
    header_name: Authorization
source_metadata: null
