resources:
- name: fetchPoolState
  endpoint:
    path: /pools/fetchPoolState
    method: GET
- name: fetchPoolStateWithBalances
  endpoint:
    path: /pools/fetchPoolStateWithBalances
    method: GET
- name: fetchNestedPoolState
  endpoint:
    path: /nestedPools/fetchPoolState
    method: GET
- name: fetchSorSwapPaths
  endpoint:
    path: /sorSwapPaths/fetchSorSwapPaths
    method: GET
- name: initializeBuffer
  endpoint:
    path: /initializeBuffer
    method: external
    data_selector: issuedShares
- name: addLiquidityToBuffer
  endpoint:
    path: /addLiquidityToBuffer
    method: external
    data_selector: amountUnderlyingRaw, amountWrappedRaw
- name: queryInitializeBuffer
  endpoint:
    path: /queryInitializeBuffer
    method: external
    data_selector: issuedShares
- name: queryAddLiquidityToBuffer
  endpoint:
    path: /queryAddLiquidityToBuffer
    method: external
    data_selector: amountUnderlyingRaw, amountWrappedRaw
- name: queryRemoveLiquidityFromBuffer
  endpoint:
    path: /queryRemoveLiquidityFromBuffer
    method: external
    data_selector: removedUnderlyingBalanceOut, removedWrappedBalanceOut
- name: queryAddLiquiditySingleTokenExactOut
  endpoint:
    path: /queryAddLiquiditySingleTokenExactOut
    method: POST
    data_selector: amountIn
- name: queryAddLiquidityCustom
  endpoint:
    path: /queryAddLiquidityCustom
    method: POST
    data_selector: amountsIn
- name: queryRemoveLiquidityProportional
  endpoint:
    path: /queryRemoveLiquidityProportional
    method: POST
    data_selector: amountsOut
- name: queryRemoveLiquiditySingleTokenExactIn
  endpoint:
    path: /queryRemoveLiquiditySingleTokenExactIn
    method: POST
    data_selector: amountOut
- name: queryRemoveLiquiditySingleTokenExactOut
  endpoint:
    path: /queryRemoveLiquiditySingleTokenExactOut
    method: POST
    data_selector: bptAmountIn
- name: queryRemoveLiquidityCustom
  endpoint:
    path: /queryRemoveLiquidityCustom
    method: POST
    data_selector: amountsOut
- name: queryRemoveLiquidityRecovery
  endpoint:
    path: /queryRemoveLiquidityRecovery
    method: POST
    data_selector: amountsOut
- name: querySwapSingleTokenExactIn
  endpoint:
    path: /querySwapSingleTokenExactIn
    method: POST
    data_selector: amountOut
- name: querySwapSingleTokenExactOut
  endpoint:
    path: /querySwapSingleTokenExactOut
    method: POST
    data_selector: amountOut
- name: permitBatchAndCall
  endpoint:
    path: /permitBatchAndCall
    method: POST
    data_selector: results
- name: multicall
  endpoint:
    path: /multicall
    method: POST
    data_selector: results
- name: swapExactIn
  endpoint:
    path: /swapExactIn
    method: POST
    data_selector: pathAmountsOut
    params: {}
- name: swapExactOut
  endpoint:
    path: /swapExactOut
    method: POST
    data_selector: pathAmountsIn
    params: {}
- name: querySwapExactIn
  endpoint:
    path: /querySwapExactIn
    method: POST
    data_selector: pathAmountsOut
    params: {}
- name: querySwapExactOut
  endpoint:
    path: /querySwapExactOut
    method: POST
    data_selector: pathAmountsIn
    params: {}
- name: pool_minimum_total_supply
  endpoint:
    path: /pool/minimum_total_supply
    method: GET
    data_selector: value
- name: buffer_minimum_total_supply
  endpoint:
    path: /buffer/minimum_total_supply
    method: GET
    data_selector: value
- name: minimum_tokens
  endpoint:
    path: /pool/minimum_tokens
    method: GET
    data_selector: value
- name: maximum_tokens
  endpoint:
    path: /pool/maximum_tokens
    method: GET
    data_selector: value
- name: maximum_token_decimals
  endpoint:
    path: /token/maximum_decimals
    method: GET
    data_selector: value
- name: pause_window_duration
  endpoint:
    path: /vault/pause_window_duration
    method: GET
    data_selector: value
- name: buffer_period_duration
  endpoint:
    path: /vault/buffer_period_duration
    method: GET
    data_selector: value
- name: minimum_trade_amount
  endpoint:
    path: /trade/minimum_amount
    method: GET
    data_selector: value
- name: minimum_wrap_amount
  endpoint:
    path: /wrap/minimum_amount
    method: GET
    data_selector: value
- name: maximum_protocol_swap_fee_percentage
  endpoint:
    path: /protocol/max_swap_fee_percentage
    method: GET
    data_selector: value
- name: maximum_protocol_yield_fee_percentage
  endpoint:
    path: /protocol/max_yield_fee_percentage
    method: GET
    data_selector: value
- name: maximum_pool_creator_fee_percentage
  endpoint:
    path: /pool/max_creator_fee_percentage
    method: GET
    data_selector: value
- name: minimum_swap_fee_percentage
  endpoint:
    path: /swap/minimum_fee_percentage
    method: GET
    data_selector: value
- name: maximum_swap_fee_percentage
  endpoint:
    path: /swap/maximum_fee_percentage
    method: GET
    data_selector: value
- name: minimum_weight
  endpoint:
    path: /pool/minimum_weight
    method: GET
    data_selector: value
- name: maximum_in_out_ratios
  endpoint:
    path: /pool/max_in_out_ratios
    method: GET
    data_selector: value
- name: minimum_invariant_ratio
  endpoint:
    path: /pool/minimum_invariant_ratio
    method: GET
    data_selector: value
- name: maximum_invariant_ratio
  endpoint:
    path: /pool/maximum_invariant_ratio
    method: GET
    data_selector: value
- name: minimum_amplification_parameter
  endpoint:
    path: /pool/minimum_amplification_parameter
    method: GET
    data_selector: value
- name: maximum_amplification_parameter
  endpoint:
    path: /pool/maximum_amplification_parameter
    method: GET
    data_selector: value
- name: minimum_amplification_parameter_update_time
  endpoint:
    path: /pool/minimum_update_time
    method: GET
    data_selector: value
- name: maximum_daily_rate
  endpoint:
    path: /pool/maximum_daily_rate
    method: GET
    data_selector: value
- name: maximum_stable_tokens
  endpoint:
    path: /pool/maximum_stable_tokens
    method: GET
    data_selector: value
- name: maximum_token_amount
  endpoint:
    path: /pool/maximum_token_amount
    method: GET
    data_selector: value
- name: getPoolTokenInfo
  endpoint:
    path: /getPoolTokenInfo
    method: GET
    data_selector: tokens
- name: getCurrentLiveBalances
  endpoint:
    path: /getCurrentLiveBalances
    method: GET
    data_selector: balancesLiveScaled18
- name: getPoolConfig
  endpoint:
    path: /getPoolConfig
    method: GET
    data_selector: PoolConfig
- name: getHooksConfig
  endpoint:
    path: /getHooksConfig
    method: GET
    data_selector: HooksConfig
- name: getBptRate
  endpoint:
    path: /getBptRate
    method: GET
    data_selector: rate
- name: areBuffersPaused
  endpoint:
    path: /areBuffersPaused
    method: GET
    data_selector: buffersPaused
- name: getAuthorizer
  endpoint:
    path: /getAuthorizer
    method: GET
    data_selector: IAuthorizer
- name: isPoolRegistered
  endpoint:
    path: /isPoolRegistered
    method: GET
    data_selector: bool
- name: initialize
  endpoint:
    path: /initialize
    method: POST
    data_selector: bptAmountOut
- name: totalSupply
  endpoint:
    path: /totalSupply
    method: GET
    data_selector: totalSupply
    params: {}
- name: balanceOf
  endpoint:
    path: /balanceOf
    method: GET
    data_selector: balance
    params: {}
- name: allowance
  endpoint:
    path: /allowance
    method: GET
    data_selector: allowance
    params: {}
- name: approve
  endpoint:
    path: /approve
    method: POST
    data_selector: approval
    params: {}
- name: transfer
  endpoint:
    path: /transfer
    method: POST
    data_selector: transfer
    params: {}
- name: transferFrom
  endpoint:
    path: /transferFrom
    method: POST
    data_selector: transferFrom
    params: {}
- name: isPoolPaused
  endpoint:
    path: /isPoolPaused
    method: GET
    data_selector: isPaused
    params: {}
- name: getPoolPausedState
  endpoint:
    path: /getPoolPausedState
    method: GET
    data_selector: pausedState
    params: {}
- name: isERC4626BufferInitialized
  endpoint:
    path: /isERC4626BufferInitialized
    method: GET
    data_selector: isBufferInitialized
    params: {}
- name: getAggregateSwapFeeAmount
  endpoint:
    path: /getAggregateSwapFeeAmount
    method: GET
    data_selector: aggregateSwapFee
    params: {}
- name: getAggregateYieldFeeAmount
  endpoint:
    path: /getAggregateYieldFeeAmount
    method: GET
    data_selector: aggregateYieldFee
    params: {}
- name: getStaticSwapFeePercentage
  endpoint:
    path: /getStaticSwapFeePercentage
    method: GET
    data_selector: staticSwapFeePercentage
    params: {}
- name: getPoolRoleAccounts
  endpoint:
    path: /getPoolRoleAccounts
    method: GET
    data_selector: roleAccounts
    params: {}
- name: computeDynamicSwapFee
  endpoint:
    path: /computeDynamicSwapFee
    method: GET
    data_selector: dynamicSwapFeePercentage
    params: {}
- name: getProtocolFeeController
  endpoint:
    path: /getProtocolFeeController
    method: GET
    data_selector: protocolFeeController
    params: {}
- name: isPoolInRecoveryMode
  endpoint:
    path: /isPoolInRecoveryMode
    method: GET
    data_selector: inRecoveryMode
    params: {}
- name: removeLiquidityRecovery
  endpoint:
    path: /removeLiquidityRecovery
    method: POST
    data_selector: removeLiquidity
    params: {}
- name: enableRecoveryMode
  endpoint:
    path: /enableRecoveryMode
    method: POST
    data_selector: enableRecovery
    params: {}
- name: disableRecoveryMode
  endpoint:
    path: /disableRecoveryMode
    method: POST
    data_selector: disableRecovery
    params: {}
- name: quote
  endpoint:
    path: /quote
    method: POST
    data_selector: quoteResult
    params: {}
- name: isQueryDisabled
  endpoint:
    path: /isQueryDisabled
    method: GET
    data_selector: queryDisabled
    params: {}
- name: getPauseWindowEndTime
  endpoint:
    path: /getPauseWindowEndTime
    method: GET
    data_selector: pauseWindowEndTime
    params: {}
- name: getBufferPeriodDuration
  endpoint:
    path: /getBufferPeriodDuration
    method: GET
    data_selector: bufferPeriodDuration
    params: {}
- name: getMinimumPoolTokens
  endpoint:
    path: /getMinimumPoolTokens
    method: GET
    data_selector: minimumPoolTokens
    params: {}
- name: getMaximumPoolTokens
  endpoint:
    path: /getMaximumPoolTokens
    method: GET
    data_selector: maximumPoolTokens
    params: {}
- name: getMinimumTradeAmount
  endpoint:
    path: /getMinimumTradeAmount
    method: GET
    data_selector: uint256
- name: getMinimumWrapAmount
  endpoint:
    path: /getMinimumWrapAmount
    method: GET
    data_selector: uint256
- name: vault
  endpoint:
    path: /vault
    method: GET
    data_selector: IVault
- name: isVaultPaused
  endpoint:
    path: /isVaultPaused
    method: GET
    data_selector: bool
- name: getVaultPausedState
  endpoint:
    path: /getVaultPausedState
    method: GET
    data_selector: tuple
- name: getVaultExtension
  endpoint:
    path: /getVaultExtension
    method: GET
    data_selector: address
- name: getVaultAdmin
  endpoint:
    path: /getVaultAdmin
    method: GET
    data_selector: address
- name: onRegister
  endpoint:
    path: /hooks/onRegister
    method: POST
    data_selector: success
- name: getHookFlags
  endpoint:
    path: /hooks/getHookFlags
    method: GET
    data_selector: hookFlags
- name: onBeforeInitialize
  endpoint:
    path: /hooks/onBeforeInitialize
    method: POST
    data_selector: success
- name: onAfterInitialize
  endpoint:
    path: /hooks/onAfterInitialize
    method: POST
    data_selector: success
- name: onBeforeAddLiquidity
  endpoint:
    path: /hooks/onBeforeAddLiquidity
    method: POST
    data_selector: success
- name: onAfterAddLiquidity
  endpoint:
    path: /hooks/onAfterAddLiquidity
    method: POST
    data_selector: success
- name: onBeforeRemoveLiquidity
  endpoint:
    path: /hooks/onBeforeRemoveLiquidity
    method: POST
    data_selector: success
- name: onAfterRemoveLiquidity
  endpoint:
    path: /hooks/onAfterRemoveLiquidity
    method: POST
    data_selector: success
- name: onBeforeSwap
  endpoint:
    path: /hooks/onBeforeSwap
    method: POST
    data_selector: success
- name: onAfterSwap
  endpoint:
    path: /hooks/onAfterSwap
    method: POST
    data_selector: success
- name: onComputeDynamicSwapFeePercentage
  endpoint:
    path: /hooks/onComputeDynamicSwapFeePercentage
    method: POST
    data_selector: success
- name: collectAggregateFees
  endpoint:
    path: /collectAggregateFees
    method: POST
    data_selector: result
    params:
      pool: address
- name: getGlobalProtocolSwapFeePercentage
  endpoint:
    path: /getGlobalProtocolSwapFeePercentage
    method: GET
    data_selector: result
- name: getGlobalProtocolYieldFeePercentage
  endpoint:
    path: /getGlobalProtocolYieldFeePercentage
    method: GET
    data_selector: result
- name: getPoolProtocolSwapFeeInfo
  endpoint:
    path: /getPoolProtocolSwapFeeInfo
    method: GET
    data_selector: result
    params:
      pool: address
- name: getPoolProtocolYieldFeeInfo
  endpoint:
    path: /getPoolProtocolYieldFeeInfo
    method: GET
    data_selector: result
    params:
      pool: address
- name: getProtocolFeeAmounts
  endpoint:
    path: /getProtocolFeeAmounts
    method: GET
    data_selector: result
    params:
      pool: address
- name: getPoolCreatorFeeAmounts
  endpoint:
    path: /getPoolCreatorFeeAmounts
    method: GET
    data_selector: result
    params:
      pool: address
- name: computeAggregateFeePercentage
  endpoint:
    path: /computeAggregateFeePercentage
    method: POST
    data_selector: result
    params:
      protocolFeePercentage: uint256
      poolCreatorFeePercentage: uint256
- name: updateProtocolSwapFeePercentage
  endpoint:
    path: /updateProtocolSwapFeePercentage
    method: POST
    data_selector: result
    params:
      pool: address
- name: updateProtocolYieldFeePercentage
  endpoint:
    path: /updateProtocolYieldFeePercentage
    method: POST
    data_selector: result
    params:
      pool: address
- name: registerPool
  endpoint:
    path: /registerPool
    method: POST
    data_selector: result
    params:
      pool: address
      poolCreator: address
      protocolFeeExempt: bool
- name: setGlobalProtocolSwapFeePercentage
  endpoint:
    path: /setGlobalProtocolSwapFeePercentage
    method: POST
    data_selector: result
    params:
      newProtocolSwapFeePercentage: uint256
- name: setGlobalProtocolYieldFeePercentage
  endpoint:
    path: /setGlobalProtocolYieldFeePercentage
    method: POST
    data_selector: result
    params:
      newProtocolYieldFeePercentage: uint256
- name: withdrawProtocolFees
  endpoint:
    path: /withdrawProtocolFees
    method: POST
    data_selector: result
    params:
      pool: address
      recipient: address
- name: withdrawPoolCreatorFees
  endpoint:
    path: /withdrawPoolCreatorFees
    method: POST
    data_selector: result
    params:
      pool: address
      recipient: address
- name: acceptOwnership
  endpoint:
    path: /acceptOwnership
    method: POST
- name: addLiquidity
  endpoint:
    path: /addLiquidity
    method: POST
- name: create
  endpoint:
    path: /create
    method: POST
- name: quote
  endpoint:
    path: /quote
    method: POST
    data_selector: none
- name: quoteAndRevert
  endpoint:
    path: /quoteAndRevert
    method: POST
    data_selector: none
- name: recoverProtocolFees
  endpoint:
    path: /recoverProtocolFees
    method: POST
    data_selector: none
- name: registerBalancerContract
  endpoint:
    path: /registerBalancerContract
    method: POST
    data_selector: none
- name: registerPool
  endpoint:
    path: /registerPool
    method: POST
    data_selector: none
- name: updateAggregateSwapFeePercentage
  endpoint:
    path: /updateAggregateSwapFeePercentage
    method: POST
- name: updateAggregateYieldFeePercentage
  endpoint:
    path: /updateAggregateYieldFeePercentage
    method: POST
- name: updateProtocolSwapFeePercentage
  endpoint:
    path: /updateProtocolSwapFeePercentage
    method: POST
- name: updateProtocolYieldFeePercentage
  endpoint:
    path: /updateProtocolYieldFeePercentage
    method: POST
- name: withdrawPoolCreatorFees
  endpoint:
    path: /withdrawPoolCreatorFees
    method: POST
- name: withdrawProtocolFees
  endpoint:
    path: /withdrawProtocolFees
    method: POST
- name: withdrawProtocolFeesForToken
  endpoint:
    path: /withdrawProtocolFeesForToken
    method: POST
- name: acceptOwnership
  endpoint:
    path: /acceptOwnership
    method: POST
- name: addLiquidity
  endpoint:
    path: /addLiquidity
    method: POST
- name: create
  endpoint:
    path: /create
    method: POST
- name: Vault
  endpoint:
    path: /vault
    method: POST
    data_selector: records
- name: VaultAdmin
  endpoint:
    path: /vault/admin
    method: POST
    data_selector: records
- name: ProtocolFeeController
  endpoint:
    path: /protocol/fee/controller
    method: POST
    data_selector: records
- name: setPoolMevTaxThreshold
  endpoint:
    path: /setPoolMevTaxThreshold
    method: POST
    data_selector: response
    params: {}
- name: setProtocolFeeController
  endpoint:
    path: /setProtocolFeeController
    method: POST
    data_selector: response
    params: {}
- name: setProtocolSwapFeePercentage
  endpoint:
    path: /setProtocolSwapFeePercentage
    method: POST
    data_selector: response
    params: {}
- name: setProtocolYieldFeePercentage
  endpoint:
    path: /setProtocolYieldFeePercentage
    method: POST
    data_selector: response
    params: {}
- name: setStaticSwapFeePercentage
  endpoint:
    path: /setStaticSwapFeePercentage
    method: POST
    data_selector: response
    params: {}
- name: setSurgeThresholdPercentage
  endpoint:
    path: /setSurgeThresholdPercentage
    method: POST
    data_selector: response
    params: {}
- name: startAmplificationParameterUpdate
  endpoint:
    path: /startAmplificationParameterUpdate
    method: POST
    data_selector: response
    params: {}
- name: stopAmplificationParameterUpdate
  endpoint:
    path: /stopAmplificationParameterUpdate
    method: POST
    data_selector: response
    params: {}
- name: startPriceRatioUpdate
  endpoint:
    path: /startPriceRatioUpdate
    method: POST
    data_selector: response
    params: {}
- name: stopPriceRatioUpdate
  endpoint:
    path: /stopPriceRatioUpdate
    method: POST
    data_selector: response
    params: {}
- name: withdrawProtocolFees
  endpoint:
    path: /withdrawProtocolFees
    method: POST
    data_selector: response
    params: {}
- name: acceptOwnership
  endpoint:
    path: /acceptOwnership
    method: POST
- name: addLiquidity
  endpoint:
    path: /addLiquidity
    method: POST
- name: create
  endpoint:
    path: /create
    method: POST
- name: Vault
  endpoint:
    path: /vault
    method: GET
    data_selector: records
    params: {}
- name: PoolSwapFeeHelper
  endpoint:
    path: /pool-swap-fee-helper
    method: GET
    data_selector: records
    params: {}
- name: StablePool
  endpoint:
    path: /stable-pool
    method: GET
    data_selector: records
    params: {}
- name: ReClammPool
  endpoint:
    path: /reclamm-pool
    method: GET
    data_selector: records
    params: {}
- name: VaultExtension
  endpoint:
    path: /vault-extension
    method: GET
    data_selector: records
    params: {}
- name: ProtocolFeeController
  endpoint:
    path: /protocol/fee/controller
    method: POST
    data_selector: records
- name: VaultAdmin
  endpoint:
    path: /vault/admin
    method: POST
    data_selector: records
- name: Vault
  endpoint:
    path: /vault
    method: POST
    data_selector: records
- name: TokenPairRegistry
  endpoint:
    path: /token-pair-registry
    method: GET
- name: PoolSwapFeeHelper
  endpoint:
    path: /pool-swap-fee-helper
    method: GET
- name: VaultAdmin
  endpoint:
    path: /vault
    method: GET
- name: VaultExtension
  endpoint:
    path: /vault_extension
    method: POST
    data_selector: none
    params: {}
- name: ProtocolFeeController
  endpoint:
    path: /protocol_fee_controller
    method: POST
    data_selector: none
    params: {}
- name: Vault
  endpoint:
    path: /vault
    method: POST
    data_selector: none
    params: {}
- name: VaultAdmin
  endpoint:
    path: /vault_admin
    method: POST
    data_selector: none
    params: {}
- name: MevCaptureHook
  endpoint:
    path: /mev_capture_hook
    method: POST
    data_selector: none
    params: {}
- name: TokenPairRegistry
  endpoint:
    path: /token_pair_registry
    method: POST
    data_selector: none
    params: {}
- name: PoolPauseHelper
  endpoint:
    path: /pool_pause_helper
    method: POST
    data_selector: none
    params: {}
- name: PoolSwapFeeHelper
  endpoint:
    path: /pool_swap_fee_helper
    method: POST
    data_selector: none
    params: {}
- name: ProtocolFeeSweeper
  endpoint:
    path: /protocol_fee_sweeper
    method: POST
    data_selector: none
    params: {}
- name: ReClammPool
  endpoint:
    path: /re_clamm_pool
    method: POST
    data_selector: none
    params: {}
- name: StableSurgeHook
  endpoint:
    path: /stable_surge_hook
    method: POST
    data_selector: none
    params: {}
- name: StablePool
  endpoint:
    path: /stable_pool
    method: POST
    data_selector: none
    params: {}
- name: acceptOwnership
  endpoint:
    path: /acceptOwnership
    method: POST
- name: addLiquidity
  endpoint:
    path: /addLiquidity
    method: POST
- name: create
  endpoint:
    path: /create
    method: POST
- name: erc4626BufferWrapOrUnwrap
  endpoint:
    path: /erc4626BufferWrapOrUnwrap
    method: POST
    data_selector: none
    params: {}
- name: forceTransferOwnership
  endpoint:
    path: /forceTransferOwnership
    method: POST
    data_selector: none
    params: {}
- name: incrementNonce
  endpoint:
    path: /incrementNonce
    method: POST
    data_selector: none
    params: {}
- name: VaultAdmin
  endpoint:
    path: /setStaticSwapFeePercentage
    method: POST
    data_selector: none
    params: {}
- name: PoolSwapFeeHelper
  endpoint:
    path: /setStaticSwapFeePercentage
    method: POST
    data_selector: none
    params: {}
- name: StableSurgeHook
  endpoint:
    path: /setSurgeThresholdPercentage
    method: POST
    data_selector: none
    params: {}
- name: ProtocolFeeSweeper
  endpoint:
    path: /setTargetToken
    method: POST
    data_selector: none
    params: {}
- name: Vault
  endpoint:
    path: /settle
    method: POST
    data_selector: none
    params: {}
- name: StablePool
  endpoint:
    path: /startAmplificationParameterUpdate
    method: POST
    data_selector: none
    params: {}
- name: ReClammPool
  endpoint:
    path: /startPriceRatioUpdate
    method: POST
    data_selector: none
    params: {}
- name: VaultFactory
  endpoint:
    path: /transferOwnership
    method: POST
    data_selector: none
    params: {}
- name: Vault
  endpoint:
    path: /withdrawProtocolFees
    method: POST
    data_selector: none
    params: {}
- name: acceptOwnership
  endpoint:
    path: /acceptOwnership
    method: POST
- name: addLiquidity
  endpoint:
    path: /addLiquidity
    method: POST
- name: addMevTaxExemptSenders
  endpoint:
    path: /addMevTaxExemptSenders
    method: POST
- name: create
  endpoint:
    path: /create
    method: POST
- name: Vault
  endpoint:
    path: /vault
    method: GET
- name: PoolSwapFeeHelper
  endpoint:
    path: /poolSwapFeeHelper
    method: GET
- name: WeightedPool
  endpoint:
    path: /weightedPool
    method: GET
- name: StablePool
  endpoint:
    path: /stablePool
    method: GET
- name: ReClammPool
  endpoint:
    path: /reClammPool
    method: GET
- name: ProtocolFeeController
  endpoint:
    path: /protocolFeeController
    method: GET
- name: MevCaptureHook
  endpoint:
    path: /mevCaptureHook
    method: GET
- name: VaultExtension
  endpoint:
    path: /vaultExtension
    method: GET
- name: VaultAdmin
  endpoint:
    path: /setStaticSwapFeePercentage
    method: POST
- name: PoolSwapFeeHelper
  endpoint:
    path: /setStaticSwapFeePercentage
    method: POST
- name: StableSurgeHook
  endpoint:
    path: /setSurgeThresholdPercentage
    method: POST
- name: ProtocolFeeSweeper
  endpoint:
    path: /setTargetToken
    method: POST
- name: StablePool
  endpoint:
    path: /startAmplificationParameterUpdate
    method: POST
- name: ReClammPool
  endpoint:
    path: /startPriceRatioUpdate
    method: POST
- name: Vault
  endpoint:
    path: /settle
    method: POST
- name: VaultFactory
  endpoint:
    path: /transferOwnership
    method: POST
- name: ProtocolFeeController
  endpoint:
    path: /updateProtocolSwapFeePercentage
    method: POST
- name: addLiquidity
  endpoint:
    path: /addLiquidity
    method: POST
    data_selector: result
    params: {}
- name: removeLiquidity
  endpoint:
    path: /removeLiquidity
    method: POST
    data_selector: result
    params: {}
- name: setFactorySpecificProtocolFeePercentages
  endpoint:
    path: /setFactorySpecificProtocolFeePercentages
    method: POST
- name: setFeeRecipient
  endpoint:
    path: /setFeeRecipient
    method: POST
- name: setGlobalProtocolSwapFeePercentage
  endpoint:
    path: /setGlobalProtocolSwapFeePercentage
    method: POST
- name: setGlobalProtocolYieldFeePercentage
  endpoint:
    path: /setGlobalProtocolYieldFeePercentage
    method: POST
- name: setMaxSurgeFeePercentage
  endpoint:
    path: /setMaxSurgeFeePercentage
    method: POST
- name: setPoolCreatorSwapFeePercentage
  endpoint:
    path: /setPoolCreatorSwapFeePercentage
    method: POST
- name: setPoolCreatorYieldFeePercentage
  endpoint:
    path: /setPoolCreatorYieldFeePercentage
    method: POST
- name: setProtocolFeeController
  endpoint:
    path: /setProtocolFeeController
    method: POST
- name: setProtocolFeePercentagesForPools
  endpoint:
    path: /setProtocolFeePercentagesForPools
    method: POST
- name: setProtocolSwapFeePercentage
  endpoint:
    path: /setProtocolSwapFeePercentage
    method: POST
- name: setProtocolYieldFeePercentage
  endpoint:
    path: /setProtocolYieldFeePercentage
    method: POST
- name: acceptOwnership
  endpoint:
    path: /acceptOwnership
    method: POST
- name: addLiquidity
  endpoint:
    path: /addLiquidity
    method: POST
- name: create
  endpoint:
    path: /create
    method: POST
- name: removeLiquidity
  endpoint:
    path: /removeLiquidity
    method: POST
- name: removeLiquidityFromBufferHook
  endpoint:
    path: removeLiquidityFromBufferHook(address,uint256,uint256,uint256,address)
    method: none
- name: removeLiquidityRecovery
  endpoint:
    path: removeLiquidityRecovery(address,address,uint256,uint256[])
    method: none
- name: removeMevTaxExemptSenders
  endpoint:
    path: removeMevTaxExemptSenders(address[])
    method: none
- name: removePathAtIndex
  endpoint:
    path: removePathAtIndex(address,address,uint256)
    method: none
- name: removePools
  endpoint:
    path: removePools(address[])
    method: none
- name: renounceOwnership
  endpoint:
    path: renounceOwnership()
    method: none
- name: setAuthorizer
  endpoint:
    path: setAuthorizer(address)
    method: none
- name: setProtocolFeeController
  endpoint:
    path: setProtocolFeeController(address)
    method: none
- name: setProtocolSwapFeePercentage
  endpoint:
    path: setProtocolSwapFeePercentage(address,uint256)
    method: none
- name: setStaticSwapFeePercentage
  endpoint:
    path: setStaticSwapFeePercentage(address,uint256)
    method: none
- name: unpauseVault
  endpoint:
    path: unpauseVault()
    method: none
- name: pools
  endpoint:
    path: /pools
    method: GET
    data_selector: pools
- name: pools
  endpoint:
    path: /pools
    method: GET
- name: sorSwapPaths
  endpoint:
    path: /sorSwapPaths
    method: GET
    data_selector: sorPaths
    params: {}
- name: swap
  endpoint:
    path: /developer-reference/contracts/router-api.html
    method: GET
    data_selector: swapInput
    params: {}
- name: swapExactIn
  endpoint:
    path: /swapExactIn
    method: POST
    data_selector: result
- name: querySwapExactIn
  endpoint:
    path: /querySwapExactIn
    method: POST
    data_selector: result
- name: aggregatorPools
  endpoint:
    path: /
    method: POST
    data_selector: data.aggregatorPools
    params: {}
- name: vault_events
  endpoint:
    path: /vault/events
    method: GET
- name: single_swaps
  endpoint:
    path: /developer-reference/contracts/router-api.html#swapsingletokenexactin
    method: GET
- name: multi_path_swaps
  endpoint:
    path: /developer-reference/contracts/batch-router-api.html#swapexactin
    method: GET
- name: simulating_swaps
  endpoint:
    path: /concepts/router/queries.html
    method: GET
- name: weighted_pool
  endpoint:
    path: /v3/pools/weighted
    method: GET
    data_selector: pools
    params: {}
- name: stable_pool
  endpoint:
    path: /v3/pools/stable
    method: GET
    data_selector: pools
    params: {}
- name: stable_surge_pool
  endpoint:
    path: /v3/pools/stable-surge
    method: GET
    data_selector: pools
    params: {}
- name: liquidity_bootstrapping_pool
  endpoint:
    path: /v3/pools/liquidity-bootstrapping
    method: GET
    data_selector: pools
    params: {}
- name: gyro_2_clp
  endpoint:
    path: /v3/pools/gyro-2-clp
    method: GET
    data_selector: pools
    params: {}
- name: gyro_e_clp
  endpoint:
    path: /v3/pools/gyro-e-clp
    method: GET
    data_selector: pools
    params: {}
- name: reclamm_pool
  endpoint:
    path: /v3/pools/reclamm
    method: GET
    data_selector: pools
    params: {}
- name: aggregatorPools
  endpoint:
    path: /integration-guides/aggregators/fetching-pools-and-data.html#using-balancers-api
    method: GET
    data_selector: aggregatorPools
    params:
      chainIn: MAINNET
      protocolVersionIn: 3
      poolTypeIn: QUANT_AMM_WEIGHTED
- name: stable_surge_hook
  endpoint:
    path: /aggregatorPools
    method: GET
    data_selector: hook
    params:
      includeHooks:
      - STABLE_SURGE
      protocolVersionIn: 3
- name: akron_weighted_lvr_fee_hook
  endpoint:
    path: /aggregatorPools
    method: GET
    data_selector: hook
    params:
      includeHooks:
      - AKRON
      protocolVersionIn: 3
- name: swap_fees
  endpoint:
    path: /aggregators/swap-fees
    method: GET
    data_selector: swapFees
    params: {}
- name: BalancerPoolToken
  endpoint:
    path: /api/v1/balancer/pool-tokens
    method: GET
    data_selector: tokens
    params: {}
- name: pool_creator_fee
  endpoint:
    path: /concepts/core-concepts/pool-creator-fee
    method: GET
    data_selector: data
- name: PoolRoleAccounts
  endpoint:
    path: /pool-role-accounts
    method: GET
    data_selector: accounts
    params: {}
- name: rate_provider
  endpoint:
    path: /rate-providers
    method: GET
    data_selector: rateProviders
- name: gyroscope_pools
  endpoint:
    path: /gyroscope/pools
    method: GET
    data_selector: pools
    params: {}
- name: reclamm_pools
  endpoint:
    path: /reclamm/pools
    method: GET
    data_selector: pools
    params: {}
- name: Liquidity Bootstrapping Pools
  endpoint:
    path: /liquidity-bootstrapping-pools
    method: GET
    data_selector: pools
    params: {}
- name: vault
  endpoint:
    path: /api/vault
    method: GET
    data_selector: data
    params: {}
- name: Balancer Vault
  endpoint:
    path: /concepts/vault
    method: GET
    data_selector: data
    params: {}
- name: tokens_with_external_rates
  endpoint:
    path: /concepts/vault/token-types/tokens-with-external-rates
    method: GET
- name: all_other_tokens
  endpoint:
    path: /concepts/vault/token-types/all-other-tokens-standard
    method: GET
- name: swap_fee
  endpoint:
    path: /vault/swap-fee
    method: GET
    data_selector: swapFees
    params: {}
- name: initializeBuffer
  endpoint:
    path: /initializeBuffer
    method: POST
    data_selector: issuedShares
- name: addLiquidityToBuffer
  endpoint:
    path: /addLiquidityToBuffer
    method: POST
    data_selector: amountUnderlyingIn, amountWrappedIn
- name: removeLiquidityFromBuffer
  endpoint:
    path: /removeLiquidityFromBuffer
    method: POST
    data_selector: removedUnderlyingBalanceRaw, removedWrappedBalanceRaw
- name: swap
  endpoint:
    path: /v1/swap
    method: POST
    data_selector: swapData
    params: {}
- name: liquidity
  endpoint:
    path: /v1/liquidity
    method: GET
    data_selector: liquidityData
    params: {}
- name: add_liquidity
  endpoint:
    path: /concepts/vault/add-remove-liquidity-types.html#add-liquidity
    method: GET
    data_selector: AddLiquidityKind
    params: {}
- name: remove_liquidity
  endpoint:
    path: /concepts/vault/add-remove-liquidity-types.html#remove-liquidity
    method: GET
    data_selector: RemoveLiquidityKind
    params: {}
- name: flash_loan
  endpoint:
    path: /vault/flash-loan
    method: POST
    data_selector: loanDetails
- name: Contract Address
  endpoint:
    path: /api/v1/contract-address
    method: GET
    data_selector: addresses
- name: Supply & Inflation Schedule
  endpoint:
    path: /api/v1/supply-inflation-schedule
    method: GET
    data_selector: supply_inflation
- name: Distribution
  endpoint:
    path: /api/v1/distribution
    method: GET
    data_selector: distribution
- name: emergency_subdao
  endpoint:
    path: /emergency/subdao
    method: GET
    data_selector: subdao_info
    params: {}
- name: dao_multisig_signers
  endpoint:
    path: /multisig/dao/signers
    method: GET
    data_selector: signers
    params: {}
- name: operational_multisig_signers
  endpoint:
    path: /multisig/operational/signers
    method: GET
    data_selector: signers
    params: {}
- name: swap_fees
  endpoint:
    path: /governable-protocol-fees/swap-fees
    method: GET
- name: wrapped_token_yield_fees
  endpoint:
    path: /governable-protocol-fees/wrapped-token-yield-fees
    method: GET
- name: flash_loan_fees
  endpoint:
    path: /governable-protocol-fees/flash-loan-fees
    method: GET
- name: core_pool_fee_redirection
  endpoint:
    path: /governable-protocol-fees/core-pool-fee-redirection
    method: GET
- name: veBAL Boost Calculation
  endpoint:
    path: /vebal-boost-calculation
    method: GET
    data_selector: records
- name: Calculating Your Boost
  endpoint:
    path: /calculating-your-boost
    method: GET
    data_selector: records
- name: Calculating Maximum Boost
  endpoint:
    path: /calculating-maximum-boost
    method: GET
    data_selector: records
- name: liquidity_gauges
  endpoint:
    path: /liquidityGauges
    method: POST
    data_selector: data.liquidityGauges
    params: {}
- name: veBAL
  endpoint:
    path: /veBAL/contract
    method: GET
    data_selector: underlyingBpt
    params: {}
- name: claim_pending_tokens
  endpoint:
    path: /claim_pending_tokens
    method: POST
    data_selector: claimableTokens
    params: {}
- name: query_pending_tokens
  endpoint:
    path: /query_pending_tokens
    method: POST
    data_selector: claimableTokens
    params: {}
notes:
- The pause window is factory-specific, and the time period is relative to the factory
  deployment.
- Uses OAuth2 with refresh token — requires setup of connected app in api
- Vault functions are primarily for managing liquidity and token operations.
- none
- Multiple contracts are referenced.
- Uses Balancer SDK to interact with the Balancer protocol.
- This guide is for removing liquidity from Balancer v3 with the b-sdk.
- Token amount inputs/outputs are always in the raw token scale, e.g. 1 USDC should
  be sent as 1000000 because it has 6 decimals.
- Dynamic data is subject to a 5-minute cache which may not provide the required accuracy.
- Event based systems can utilize Vault events to track pool state.
- Queries should not be used to set limits due to possible manipulation via frontrunning.
- API supports multiple pool types including weighted, stable, liquidity bootstrapping,
  and gyro pools.
- 'Swap fees come in two different forms for V3 pools: static and dynamic.'
- Hooks introduce a framework to extend existing pool types at various key points
  throughout the pool’s lifecycle.
- Balancer Pool Tokens are dynamic in nature, meaning their value can fluctuate based
  on changes in the composition of the pool.
- Pool creator can set fees during pool registration
- Accrued creator fees can only be claimed by the poolCreator
- Fungible concentrated liquidity allows for easier management compared to NFT-based
  solutions.
- ReClamm pools adjust liquidity automatically, reducing manual intervention.
- 'LBPs are always two-token pools: the project token and the reserve token.'
- The pool owner specifies the starting and ending weights for both tokens.
- Working with fixed-point math in Solidity presents a unique set of challenges.
- The Vault manages decimal and rate scaling internally.
- Dynamic swap fees can be adjusted based on market conditions.
- 'Ensure Approval: If interacting with other contracts, ensure the Balancer Vault
  has sufficient token allowance.'
- 'Transaction Atomicity: The entire flash loan execution and repayment must occur
  within the same transaction.'
- 'Settlement Accuracy: The `settle()` function is required to inform the Vault that
  the borrowed funds have been repaid and to settle the balances.'
- The emergency subdao was established with bounded authority to manage the protocol.
- BAL tokens are the vehicle to drive alignment between governance token holders and
  protocol stakeholders.
- DAO Multisigs always require 6/11 signers to execute a transaction.
- The Balancer Maxi Multisig set requires 2 or 3 out of 7 signers to execute, depending
  on the security level of the Multisig.
- v3 introduces a more LP-friendly yield fee structure to drive adoption of boosted
  pools technology
- This page is a work in progress
- Queries should not be used onchain to set minAmountOut due to possible manipulation
  via frontrunning.
errors:
- 'SenderNotAllowed: The sender does not have permission to call a function'
- 'Disabled: Cannot create a pool after the factory was disabled'
- 'IndexOutOfBounds: A pool index is beyond the current bounds of the array'
- 'PoolTotalSupplyTooLow(uint256): The total supply of a pool token can''t be lower
  than the absolute minimum'
- 'PoolAlreadyRegistered(address): A pool has already been registered. `registerPool`
  may only be called once'
- 'PoolAlreadyInitialized(address): A pool has already been initialized. `initialize`
  may only be called once'
- 'PoolNotRegistered(address): A pool has not been registered'
- 'PoolNotInitialized(address): A referenced pool has not been initialized'
- 'HookRegistrationFailed(address,address,address): A hook contract rejected a pool
  on registration'
- 'TokenAlreadyRegistered(IERC20): A token was already registered (i.e.,it is a duplicate
  in the pool)'
- 'MinTokens(): The token count is below the minimum allowed'
- 'MaxTokens(): The token count is above the maximum allowed'
- 'InvalidToken(): Invalid tokens (e.g.,zero) cannot be registered'
- 'InvalidTokenType(): The token type given in a TokenConfig during pool registration
  is invalid'
- 'InvalidTokenConfiguration(): The data in a TokenConfig struct is inconsistent or
  unsupported'
- 'InvalidTokenDecimals(): Tokens with more than 18 decimals are not supported'
- 'TokensMismatch(address,address,address): The token list passed into an operation
  does not match the pool tokens in the pool'
- 'BalanceNotSettled(): A transient accounting operation completed with outstanding
  token deltas'
- 'VaultIsNotUnlocked(): A user called a Vault function (swap,add/remove liquidity)
  outside the lock context'
- 'DynamicSwapFeeHookFailed(): The pool has returned false to the beforeSwap hook,
  indicating the transaction should revert'
- 'BeforeSwapHookFailed(): The pool has returned false to the beforeSwap hook, indicating
  the transaction should revert'
- 'AfterSwapHookFailed(): The pool has returned false to the afterSwap hook, indicating
  the transaction should revert'
- 'BeforeInitializeHookFailed(): The pool has returned false to the beforeInitialize
  hook, indicating the transaction should revert'
- 'AfterInitializeHookFailed(): The pool has returned false to the afterInitialize
  hook, indicating the transaction should revert'
- 'BeforeAddLiquidityHookFailed(): The pool has returned false to the beforeAddLiquidity
  hook, indicating the transaction should revert'
- 'AfterAddLiquidityHookFailed(): The pool has returned false to the afterAddLiquidity
  hook, indicating the transaction should revert'
- 'BeforeRemoveLiquidityHookFailed(): The pool has returned false to the beforeRemoveLiquidity
  hook, indicating the transaction should revert'
- 'AfterRemoveLiquidityHookFailed(): The pool has returned false to the afterRemoveLiquidity
  hook, indicating the transaction should revert'
- 'RouterNotTrusted(): An unauthorized Router tried to call a permissioned function
  (i.e.,using the Vault''s token allowance)'
- 'AmountGivenZero(): The user tried to swap zero tokens'
- 'CannotSwapSameToken(): The user attempted to swap a token for itself'
- 'TokenNotRegistered(IERC20): The user attempted to swap a token not in the pool'
- 'SwapLimit(uint256,uint256): An amount in or out has exceeded the limit specified
  in the swap request'
- 'HookAdjustedSwapLimit(uint256,uint256): A hook adjusted amount in or out has exceeded
  the limit specified in the swap request'
- 'TradeAmountTooSmall(): The amount given or calculated for an operation is below
  the minimum limit'
- 'InvalidAddLiquidityKind(): Add liquidity kind not supported'
- 'AmountInAboveMax(IERC20,uint256,uint256): A required amountIn exceeds the maximum
  limit specified for the operation'
- 'HookAdjustedAmountInAboveMax(IERC20,uint256,uint256): A hook adjusted amountIn
  exceeds the maximum limit specified for the operation'
- 'BptAmountOutBelowMin(uint256,uint256): The BPT amount received from adding liquidity
  is below the minimum specified for the operation'
- 'DoesNotSupportAddLiquidityCustom(): Pool does not support adding liquidity with
  a customized input'
- 'DoesNotSupportDonation(): Pool does not support adding liquidity through donation'
- 'InvalidRemoveLiquidityKind(): Remove liquidity kind not supported'
- 'AmountOutBelowMin(IERC20,uint256,uint256): The actual amount out is below the minimum
  limit specified for the operation'
- 'HookAdjustedAmountOutBelowMin(IERC20,uint256,uint256): The hook adjusted amount
  out is below the minimum limit specified for the operation'
- 'BptAmountInAboveMax(uint256,uint256): The required BPT amount in exceeds the maximum
  limit specified for the operation'
- 'DoesNotSupportRemoveLiquidityCustom(): Pool does not support removing liquidity
  with a customized input'
- 'ProtocolFeesExceedTotalCollected(): Error raised when the sum of the parts (aggregate
  swap or yield fee)'
- 'SwapFeePercentageTooLow(): Error raised when the swap fee percentage is less than
  the minimum allowed value'
- 'SwapFeePercentageTooHigh(): Error raised when the swap fee percentage exceeds the
  maximum allowed value'
- 'FeePrecisionTooHigh(): Primary fee percentages result in an aggregate fee that
  cannot be stored with the required precision'
- 'PercentageAboveMax(): A given percentage is above the maximum (usually FixedPoint.ONE,or
  1e18 wei)'
- 'QueriesDisabled(): A user tried to execute a query operation when they were reversibly
  disabled'
- 'QueriesDisabledPermanently(): A user tried to execute a query operation when they
  were permanently disabled'
- 'PoolInRecoveryMode(address): Cannot enable recovery mode when already enabled'
- 'PoolNotInRecoveryMode(address): Cannot disable recovery mode when not enabled'
- 'SenderIsNotVault(address): Error indicating the sender is not the Vault (e.g.,someone
  is trying to call a permissioned function)'
- 'VaultPauseWindowDurationTooLarge(): The caller specified a pause window period
  longer than the maximum'
- 'PauseBufferPeriodDurationTooLarge(): The caller specified a buffer period longer
  than the maximum'
- 'VaultPaused(): A user tried to perform an operation while the Vault was paused'
- 'VaultNotPaused(): Governance tried to unpause the Vault when it was not paused'
- 'VaultPauseWindowExpired(): Governance tried to pause the Vault after the pause
  period expired'
- 'PoolPaused(address): A user tried to perform an operation involving a paused Pool'
- 'PoolNotPaused(address): Governance tried to unpause the Pool when it was not paused'
- 'PoolPauseWindowExpired(address): Governance tried to pause a Pool after the pause
  period expired'
- 'BufferAlreadyInitialized(IERC4626): Buffer for the given wrapped token was already
  initialized'
- 'BufferNotInitialized(IERC4626): Buffer for the given wrapped token was not initialized'
- 'NotEnoughBufferShares(): The user is trying to remove more than their allocated
  shares from the buffer'
- 'WrongUnderlyingToken(IERC4626,address): The wrapped token asset does not match
  the underlying token'
- 'InvalidUnderlyingToken(IERC4626): A wrapped token reported the zero address as
  its underlying token asset'
- 'WrapAmountTooSmall(IERC4626): The amount given to wrap/unwrap was too small,which
  can introduce rounding issues'
- 'VaultBuffersArePaused(): Buffer operation attempted while vault buffers are paused'
- 'BufferSharesInvalidReceiver(): Buffer shares were minted to an invalid address'
- 'BufferSharesInvalidOwner(): Buffer shares were burned from an invalid address'
- 'BufferTotalSupplyTooLow(uint256): The total supply of a buffer can''t be lower
  than the absolute minimum'
- 'NotEnoughUnderlying(IERC4626,uint256,uint256): A wrap/unwrap operation consumed
  more or returned less underlying tokens than it should'
- 'NotEnoughWrapped(IERC4626,uint256,uint256): A wrap/unwrap operation consumed more
  or returned less wrapped tokens than it should'
- 'IssuedSharesBelowMin(uint256,uint256): Shares issued during initialization are
  below the requested amount'
- 'DoesNotSupportUnbalancedLiquidity(): Pool does not support adding / removing liquidity
  with an unbalanced input'
- 'CannotReceiveEth(): The contract should not receive ETH'
- 'NotVaultDelegateCall(): The Vault extension was called by an account directly;
  it can only be called by the Vault via delegatecall'
- 'WrongVaultExtensionDeployment(): The vault extension was configured with an incorrect
  Vault address'
- 'WrongProtocolFeeControllerDeployment(): The protocol fee controller was configured
  with an incorrect Vault address'
- 'WrongVaultAdminDeployment(): The vault admin was configured with an incorrect Vault
  address'
- 'QuoteResultSpoofed(): Quote reverted with a reserved error code'
- AfterAddLiquidityHookFailed
- AfterInitializeHookFailed
- AfterRemoveLiquidityHookFailed
- AfterSwapHookFailed
- AllZeroInputs
- AmountGivenZero
- AmountInAboveMax
- AmountOutBelowMin
- AmpUpdateAlreadyStarted
- AmpUpdateDurationTooShort
- AmpUpdateNotStarted
- AmpUpdateRateTooFast
- AmplificationFactorTooHigh
- AmplificationFactorTooLow
- BalanceNotSettled
- BalanceOverflow
- BaseOutOfBounds
- BeforeAddLiquidityHookFailed
- BeforeInitializeHookFailed
- BeforeRemoveLiquidityHookFailed
- BeforeSwapHookFailed
- BptAmountInAboveMax
- BptAmountOutBelowMin
- CallerIsNotPoolCreator
- CannotReceiveEth
- CannotSwapSameToken
- CodecOverflow
- Disabled
- DoesNotSupportAddLiquidityCustom
- DoesNotSupportDonation
- DoesNotSupportRemoveLiquidityCustom
- DoesNotSupportUnbalancedLiquidity
- DynamicSwapFeeHookFailed
- ElementNotFound
- ErrorSelectorNotFound
- EthTransfer
- ExitHookFeeAboveLimit
- ExponentOutOfBounds
- FeePrecisionTooHigh
- HookAdjustedAmountInAboveMax
- HookAdjustedAmountOutBelowMin
- HookAdjustedSwapLimit
- HookRegistrationFailed
- IndexOutOfBounds
- InputLengthMismatch
- InsufficientEth
- InvalidAddLiquidityKind
- InvalidExponent
- InvalidPercentage
- InvalidRemoveLiquidityKind
- InvalidSize
- InvalidToken
- InvalidTokenConfiguration
- InvalidTokenType
- KeyNotFound
- MaxInRatio
- MaxOutBptForTokenIn
- MaxOutRatio
- MaxTokens
- MinBPTInForTokenOut
- MinTokens
- MinWeight
- MultipleNonZeroInputs
- NormalizedWeightInvariant
- NotEnoughBufferShares
- NotStaticCall
- NotVaultDelegateCall
- OperationNotSupported
- OutOfBounds
- PauseBufferPeriodDurationTooLarge
- PoolAlreadyInitialized
- PoolAlreadyRegistered
- PoolCreatorFeePercentageTooHigh
- PoolCreatorNotRegistered
- PoolDoesNotSupportDonation
- PoolInRecoveryMode
- PoolNotInRecoveryMode
- PoolNotInitialized
- PoolNotPaused
- PoolNotRegistered
- PoolPauseWindowDurationOverflow
- PoolPauseWindowExpired
- PoolPaused
- ProductOutOfBounds
- ProtocolFeesExceedTotalCollected
- ProtocolSwapFeePercentageTooHigh
- ProtocolYieldFeePercentageTooHigh
- QueriesDisabled
- QuoteResultSpoofed
- ReentrancyGuardReentrantCall
- Result
- RouterNotTrusted
- SenderIsNotVault
- SenderNotAllowed
- StableGetBalanceDidNotConverge
- StableInvariantDidNotConverge
- StandardPoolWithCreator
- SwapDeadline
- SwapFeePercentageTooHigh
- SwapFeePercentageTooLow
- SwapLimit
- TokenAlreadyRegistered
- TokenNotRegistered
- TokensMismatch
- TokensNotSorted
- TotalSupplyTooLow
- TransientIndexOutOfBounds
- UnexpectedCallSuccess
- UserDataNotSupported
- VaultBuffersArePaused
- VaultIsNotUnlocked
- VaultNotPaused
- VaultPauseWindowDurationTooLarge
- VaultPauseWindowExpired
- VaultPaused
- WrapAmountTooSmall
- WrongProtocolFeeControllerDeployment
- WrongUnderlyingAmount
- WrongVaultAdminDeployment
- WrongVaultExtensionDeployment
- WrongWrappedAmount
- WrongWrappedTokenAsset
- ZeroDivision
- 'REQUEST_LIMIT_EXCEEDED: Throttle API calls or reduce frequency'
- 'QUERY_TIMEOUT: Break down filters or add selectivity'
- '401 Unauthorized: Recheck OAuth scopes or token expiration'
- 'Invalid address: Ensure correct contract address format.'
- none
- '401 Unauthorized: Check OAuth credentials and scopes.'
- '429 Too Many Requests: Rate limit exceeded, reduce request frequency.'
auth_info:
  mentioned_objects: []
client:
  base_url: https://api.balancer.fi
  auth:
    type: oauth2
    flow: refresh_token
  headers:
    Accept: application/json
source_metadata: null
