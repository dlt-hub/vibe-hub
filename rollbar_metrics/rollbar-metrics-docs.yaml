resources:
- name: metrics
  endpoint:
    path: /api/metrics
    method: GET
    data_selector: data
    params: {}
- name: issues
  endpoint:
    path: /api/1/issues
    method: GET
    data_selector: result
- name: deploys
  endpoint:
    path: /api/1/deploys
    method: GET
    data_selector: result
- name: error
  endpoint:
    path: /api/1/errors
    method: GET
    data_selector: errors
    params: {}
- name: item
  endpoint:
    path: /api/1/item
    method: GET
    data_selector: items
- name: deploy
  endpoint:
    path: /api/1/deploy
    method: POST
    data_selector: deploys
- name: items
  endpoint:
    path: /api/1/item
    method: GET
    data_selector: result.items
- name: item
  endpoint:
    path: /api/1/item
    method: GET
    data_selector: records
- name: deploy
  endpoint:
    path: /api/1/deploy
    method: POST
    data_selector: records
- name: project_access_tokens
  endpoint:
    path: /api/1/project_access_tokens
    method: GET
    data_selector: records
- name: item
  endpoint:
    path: /api/1/item
    method: GET
    data_selector: records
- name: occurrence
  endpoint:
    path: /api/1/instances
    method: GET
    data_selector: records
- name: metrics
  endpoint:
    path: /api/1/metrics/items
    method: POST
    data_selector: records
- name: deploy
  endpoint:
    path: /api/1/deploy
    method: POST
    data_selector: records
- name: item
  endpoint:
    path: /create-item
    method: POST
- name: occurrence
  endpoint:
    path: /api/1/instances
    method: GET
- name: metrics
  endpoint:
    path: /post_api-1-metrics-items
    method: POST
- name: deploy
  endpoint:
    path: /post-deploy
    method: POST
- name: environment
  endpoint:
    path: /list-all-environments
    method: GET
- name: projects
  endpoint:
    path: /list-all-projects
    method: GET
- name: users
  endpoint:
    path: /list-all-users
    method: GET
- name: item
  endpoint:
    path: /api/1/item/
    method: POST
    data_selector: null
    params: {}
- name: item
  endpoint:
    path: /api/1/item/
    method: POST
    data_selector: data
    params: {}
- name: item
  endpoint:
    path: /api/1/item
    method: GET
    data_selector: data
    params: {}
- name: deploy
  endpoint:
    path: /api/1/deploy
    method: POST
    data_selector: data
    params: {}
- name: project_access_token
  endpoint:
    path: /api/1/project_access_tokens
    method: GET
    data_selector: data
    params: {}
- name: item
  endpoint:
    path: /item/
    method: POST
- name: items
  endpoint:
    path: /api/1/items
    method: GET
- name: occurrences
  endpoint:
    path: /api/1/occurrences
    method: GET
- name: projects
  endpoint:
    path: /api/1/projects
    method: GET
- name: deploys
  endpoint:
    path: /api/1/deploys
    method: GET
- name: item
  endpoint:
    path: /api/1/item/
    method: GET
    data_selector: object
    params:
      uuid: string
- name: item
  endpoint:
    path: /items
    method: POST
- name: occurrence
  endpoint:
    path: /occurrences
    method: GET
- name: metrics
  endpoint:
    path: /metrics/items
    method: POST
- name: deploy
  endpoint:
    path: /deploy
    method: POST
- name: environment
  endpoint:
    path: /environments
    method: GET
- name: project
  endpoint:
    path: /projects
    method: POST
- name: user
  endpoint:
    path: /users
    method: GET
- name: item
  endpoint:
    path: /item/
    method: GET
    data_selector: object
- name: occurrence
  endpoint:
    path: /occurrence/
    method: GET
    data_selector: object
- name: item
  endpoint:
    path: /api/1/item/
    method: POST
    data_selector: null
    params: {}
- name: data
  endpoint:
    path: /api/1/item/
    method: POST
    data_selector: data
- name: items
  endpoint:
    path: /api/1/items
    method: GET
    data_selector: result
    params: {}
- name: items
  endpoint:
    path: /items
    method: GET
    data_selector: items
- name: item
  endpoint:
    path: /item
    method: POST
- name: item
  endpoint:
    path: /api/1/item/
    method: GET
    data_selector: object
    params:
      uuid: string
- name: item
  endpoint:
    path: /api/1/item/{itemid}
    method: GET
    data_selector: itemid
    params: {}
- name: item
  endpoint:
    path: /item/itemid
    method: GET
    data_selector: result
- name: all_items
  endpoint:
    path: /list/all/items
    method: GET
    data_selector: result
- name: items
  endpoint:
    path: /api/1/items
    method: GET
    data_selector: result
- name: item
  endpoint:
    path: /api/1/item/{itemid}
    method: PATCH
    data_selector: result
    params: {}
- name: items
  endpoint:
    path: /items
    method: GET
    data_selector: items
- name: item
  endpoint:
    path: /api/1/item/{itemid}
    method: GET
    data_selector: item
    params: {}
- name: item_by_counter
  endpoint:
    path: /api/1/item_by_counter/{counter}
    method: GET
    data_selector: result
    params:
      counter: required
- name: item
  endpoint:
    path: /api/1/item/itemid
    method: GET
    data_selector: result
- name: list_all_items
  endpoint:
    path: /api/1/items
    method: GET
    data_selector: result
- name: item_by_counter
  endpoint:
    path: /item_by_counter/counter
    method: GET
- name: item
  endpoint:
    path: /api/1/item/{itemid}
    method: PATCH
    data_selector: result
- name: occurrences
  endpoint:
    path: /api/1/instances
    method: GET
    data_selector: occurrences
    params:
      limit: '20'
- name: instances
  endpoint:
    path: /instances
    method: GET
- name: item_by_counter
  endpoint:
    path: /api/1/item_by_counter/{counter}
    method: GET
    data_selector: result
    params:
      counter: required
- name: item_by_counter
  endpoint:
    path: /item_by_counter/counter
    method: GET
- name: occurrences_in_item
  endpoint:
    path: /api/1/item/{item_id}/instances
    method: GET
    params:
      limit: 20
- name: instances
  endpoint:
    path: /api/1/item/item_id/instances
    method: GET
- name: occurrences
  endpoint:
    path: /api/1/instances
    method: GET
    data_selector: occurrences
    params:
      limit: 20
- name: occurrence
  endpoint:
    path: /api/1/instance/{instance_id}
    method: GET
    data_selector: occurrence
    params: {}
- name: instances
  endpoint:
    path: /api/1/instances
    method: GET
- name: occurrence
  endpoint:
    path: /instance/instance_id
    method: GET
    data_selector: result
- name: item_instances
  endpoint:
    path: /api/1/item/{item_id}/instances
    method: GET
    params:
      limit: 20
- name: instances
  endpoint:
    path: /api/1/item/item_id/instances
    method: GET
    data_selector: instances
- name: delete_occurrence
  endpoint:
    path: /api/1/instance/{instance_id}
    method: DELETE
- name: instance
  endpoint:
    path: /instance/instance_id
    method: DELETE
- name: occurrence
  endpoint:
    path: /api/1/instance/{instance_id}
    method: GET
    data_selector: occurrence
    params: {}
- name: metrics_items
  endpoint:
    path: /api/1/metrics/items
    method: POST
    data_selector: item_counters
- name: occurrence
  endpoint:
    path: /instance/instance_id
    method: GET
    data_selector: object
    params: {}
- name: delete_occurrence
  endpoint:
    path: /api/1/instance/{instance_id}
    method: DELETE
- name: metrics
  endpoint:
    path: /api/1/metrics/items
    method: POST
    data_selector: metrics
- name: instance
  endpoint:
    path: /api/1/instance/instance_id
    method: DELETE
- name: metrics_items
  endpoint:
    path: /api/1/metrics/items
    method: POST
    data_selector: item_counters
- name: occurrences
  endpoint:
    path: /api/1/metrics/occurrences
    method: POST
    data_selector: results
    params: {}
- name: metrics
  endpoint:
    path: /api/1/metrics/items
    method: POST
    data_selector: metrics
    params: {}
- name: metrics_occurrences
  endpoint:
    path: /api/1/metrics/occurrences
    method: POST
    data_selector: result.timepoints
    params: {}
- name: occurrences
  endpoint:
    path: /api/1/metrics/occurrences
    method: POST
    data_selector: null
    params: {}
- name: resolution_time_metrics
  endpoint:
    path: /api/1/metrics/ttr
    method: POST
    data_selector: results
    params:
      start_time: integer
      end_time: integer
      granularity: string
      function: string
      project_ids: array of integers
      environments: array of strings
      levels: array of strings
      frameworks: array of strings
      timezone: string
- name: metrics_occurrences
  endpoint:
    path: /api/1/metrics/occurrences
    method: POST
    data_selector: result
    params: {}
- name: metrics_ttr
  endpoint:
    path: /metrics/ttr
    method: POST
    data_selector: data
    params: {}
- name: metrics_occurrences
  endpoint:
    path: /metrics/occurrences
    method: POST
    data_selector: data
    params: {}
- name: resolution_time_metrics
  endpoint:
    path: /api/1/metrics/ttr
    method: POST
    data_selector: results
    params:
      start_time: integer
      end_time: integer
      granularity: string
      function: string
      project_ids: array of integers
      environments: array of strings
      levels: array of strings
      frameworks: array of strings
      timezone: string
- name: deploy
  endpoint:
    path: /api/1/deploy
    method: POST
    data_selector: response
    params: {}
- name: metrics_ttr
  endpoint:
    path: /api/1/metrics/ttr
    method: POST
- name: metrics_occurrences
  endpoint:
    path: /api/1/metrics/occurrences
    method: POST
- name: deploy
  endpoint:
    path: /api/1/deploy
    method: POST
    data_selector: data
- name: deploy
  endpoint:
    path: /api/1/deploy
    method: POST
    data_selector: response
    params: {}
- name: deploy
  endpoint:
    path: /api/1/deploy/{deploy_id}
    method: GET
    params:
      deploy_id: int32
- name: deploy
  endpoint:
    path: /api/1/deploy
    method: POST
- name: metrics
  endpoint:
    path: /api/1/metrics
    method: POST
- name: deploy
  endpoint:
    path: /api/1/deploy/{deploy_id}
    method: GET
    data_selector: result
    params: {}
- name: list_deploys
  endpoint:
    path: /api/1/deploys
    method: GET
    data_selector: result
    params: {}
- name: deploy
  endpoint:
    path: /api/1/deploy/{deploy_id}
    method: GET
    data_selector: response
    params: {}
- name: deploy
  endpoint:
    path: /api/1/deploy/{deploy_id}
    method: PATCH
    data_selector: responses
    params: {}
- name: deploy
  endpoint:
    path: /api/1/deploy/deploy_id
    method: GET
- name: list_all_deploys
  endpoint:
    path: /api/1/deploys
    method: GET
- name: deploy
  endpoint:
    path: /api/1/deploy/deploy_id
    method: PATCH
- name: list_deploys
  endpoint:
    path: /api/1/deploys
    method: GET
- name: update_deploy
  endpoint:
    path: /api/1/deploy/{deploy_id}
    method: PATCH
    data_selector: null
    params: {}
- name: deploys
  endpoint:
    path: /api/1/deploys
    method: GET
    data_selector: deploys
    params:
      page: int32
      limit: integer
- name: deploys
  endpoint:
    path: /deploys
    method: GET
    data_selector: deploys
- name: deploys
  endpoint:
    path: /api/1/deploys
    method: GET
    data_selector: deploys
    params:
      page: '1'
      limit: '20'
- name: environments
  endpoint:
    path: /api/1/environments
    method: GET
    data_selector: result.environments
- name: deploys
  endpoint:
    path: /api/1/deploys
    method: GET
    data_selector: deploys
- name: environments
  endpoint:
    path: /api/1/environments
    method: GET
    data_selector: result.environments
- name: source_map_upload
  endpoint:
    path: /api/1/sourcemap
    method: POST
    data_selector: response
    params: {}
- name: sourcemap
  endpoint:
    path: /api/1/sourcemap
    method: POST
- name: sourcemap
  endpoint:
    path: /sourcemap
    method: POST
    data_selector: response
    params: {}
- name: items
  endpoint:
    path: /api/1/items
    method: GET
    data_selector: records
- name: occurrences
  endpoint:
    path: /api/1/instances
    method: GET
    data_selector: records
- name: metrics
  endpoint:
    path: /api/1/metrics/items
    method: POST
    data_selector: records
- name: deploys
  endpoint:
    path: /api/1/deploy
    method: POST
    data_selector: records
- name: environments
  endpoint:
    path: /api/1/environments
    method: GET
    data_selector: records
- name: upload_dsym
  endpoint:
    path: /api/1/dsym
    method: POST
    data_selector: file
    params:
      dsym: required
- name: item
  endpoint:
    path: /api/1/item
    method: POST
- name: occurrence
  endpoint:
    path: /api/1/occurrences
    method: GET
- name: metrics
  endpoint:
    path: /api/1/metrics
    method: POST
- name: deploy
  endpoint:
    path: /api/1/deploy
    method: POST
- name: environment
  endpoint:
    path: /api/1/environments
    method: GET
- name: symbol_map
  endpoint:
    path: /api/1/symbols
    method: POST
- name: project
  endpoint:
    path: /api/1/projects
    method: POST
- name: team
  endpoint:
    path: /api/1/teams
    method: POST
- name: user
  endpoint:
    path: /api/1/users
    method: GET
- name: upload_dsym
  endpoint:
    path: /api/1/dsym
    method: POST
- name: item
  endpoint:
    path: /reference/create-item
    method: POST
- name: occurrence
  endpoint:
    path: /reference/get_api-1-instances
    method: GET
- name: metrics
  endpoint:
    path: /reference/post_api-1-metrics-items
    method: POST
- name: deploy
  endpoint:
    path: /reference/post-deploy
    method: POST
- name: environment
  endpoint:
    path: /reference/list-all-environments
    method: GET
- name: symbol_map
  endpoint:
    path: /reference/upload-a-js-source-map
    method: POST
- name: rql
  endpoint:
    path: /reference/check-an-rql-job
    method: GET
- name: report
  endpoint:
    path: /reference/get-top-active-items
    method: GET
- name: project
  endpoint:
    path: /reference/create-a-project
    method: POST
- name: project_access_token
  endpoint:
    path: /reference/list-all-project-access-tokens
    method: GET
- name: team
  endpoint:
    path: /reference/create-a-team
    method: POST
- name: user
  endpoint:
    path: /reference/list-all-users
    method: GET
- name: notification_channel
  endpoint:
    path: /api/1/notifications/slack
    method: PUT
- name: upload_proguard
  endpoint:
    path: /api/1/proguard
    method: POST
    data_selector: response
    params: {}
- name: items
  endpoint:
    path: /api/1/items
    method: GET
    data_selector: records
- name: occurrences
  endpoint:
    path: /api/1/instances
    method: GET
    data_selector: records
- name: metrics
  endpoint:
    path: /api/1/metrics/items
    method: POST
    data_selector: records
- name: deploys
  endpoint:
    path: /api/1/deploy
    method: POST
    data_selector: records
- name: environments
  endpoint:
    path: /api/1/environments
    method: GET
    data_selector: records
- name: projects
  endpoint:
    path: /api/1/projects
    method: GET
    data_selector: records
- name: teams
  endpoint:
    path: /api/1/teams
    method: GET
    data_selector: records
- name: users
  endpoint:
    path: /api/1/users
    method: GET
    data_selector: records
- name: upload_android_proguard_file
  endpoint:
    path: /api/1/proguard
    method: POST
    data_selector: response
    params: {}
- name: item
  endpoint:
    path: /api/1/items
    method: POST
- name: occurrence
  endpoint:
    path: /api/1/instances
    method: GET
- name: metrics
  endpoint:
    path: /api/1/metrics/items
    method: POST
- name: deploy
  endpoint:
    path: /api/1/deploy
    method: POST
- name: environment
  endpoint:
    path: /api/1/environments
    method: GET
- name: symbol_maps
  endpoint:
    path: /api/1/symbol_maps
    method: POST
- name: rql
  endpoint:
    path: /api/1/rql
    method: POST
- name: reports
  endpoint:
    path: /api/1/reports
    method: GET
- name: projects
  endpoint:
    path: /api/1/projects
    method: POST
- name: project_access_tokens
  endpoint:
    path: /api/1/project-access-tokens
    method: GET
- name: teams
  endpoint:
    path: /api/1/teams
    method: POST
- name: users
  endpoint:
    path: /api/1/users
    method: GET
- name: items
  endpoint:
    path: /api/1/items
    method: GET
- name: occurrences
  endpoint:
    path: /api/1/occurrences
    method: GET
- name: metrics
  endpoint:
    path: /api/1/metrics/items
    method: POST
- name: deploys
  endpoint:
    path: /api/1/deploy
    method: POST
- name: environments
  endpoint:
    path: /api/1/environments
    method: GET
- name: projects
  endpoint:
    path: /api/1/projects
    method: GET
- name: teams
  endpoint:
    path: /api/1/teams
    method: GET
- name: users
  endpoint:
    path: /api/1/users
    method: GET
- name: flutter_symbols
  endpoint:
    path: /api/1/fluttersymbols
    method: POST
    data_selector: response
    params: {}
- name: flutter_symbols
  endpoint:
    path: /api/1/fluttersymbols
    method: POST
    data_selector: response
    params: {}
- name: RQL job
  endpoint:
    path: /api/1/rql/job/{job_id}
    method: GET
    data_selector: result
- name: RQL Job
  endpoint:
    path: /api/1/rql/job/{job_id}
    method: GET
    data_selector: result
- name: RQL job
  endpoint:
    path: /rql/job/job_id
    method: GET
- name: RQL job
  endpoint:
    path: /api/1/rql/job/job_id
    method: GET
- name: rql_job
  endpoint:
    path: /api/1/rql/jobs/
    method: POST
    data_selector: result
    params: {}
- name: RQL Job
  endpoint:
    path: /api/1/rql/jobs/
    method: POST
    data_selector: result
    params: {}
- name: RQL job
  endpoint:
    path: /api/1/rql/jobs/
    method: POST
    data_selector: result
    params:
      force_refresh: false
- name: rql_job
  endpoint:
    path: /api/1/rql/jobs/
    method: POST
    data_selector: result
    params:
      force_refresh: false
- name: rql_jobs
  endpoint:
    path: /api/1/rql/jobs
    method: GET
    data_selector: result
- name: rql_jobs
  endpoint:
    path: /api/1/rql/jobs
    method: GET
    data_selector: result
- name: RQL jobs
  endpoint:
    path: /rql/jobs/
    method: GET
- name: Get RQL job results
  endpoint:
    path: /rql/jobs/results
    method: GET
- name: RQL jobs
  endpoint:
    path: /rql/jobs/
    method: GET
    data_selector: result
- name: RQL job results
  endpoint:
    path: /api/1/rql/job/{job_id}/result
    method: GET
- name: get_rql_job_results
  endpoint:
    path: /rql/job/job_id/result
    method: GET
- name: get_rql_job_results
  endpoint:
    path: /rql/job/job_id/result
    method: GET
- name: list_all_rql_jobs
  endpoint:
    path: /rql/jobs
    method: GET
- name: cancel_rql_job
  endpoint:
    path: /rql/job/job_id/cancel
    method: POST
- name: cancel_rql_job
  endpoint:
    path: /api/1/rql/job/{job_id}/cancel
    method: POST
- name: RQL Job
  endpoint:
    path: /api/1/rql/job/{job_id}/cancel
    method: POST
- name: cancel_rql_job
  endpoint:
    path: /rql/job/job_id/cancel
    method: POST
- name: get_rql_job_results
  endpoint:
    path: /rql/job/job_id/results
    method: GET
- name: RQL job results
  endpoint:
    path: /api/1/rql/job/job_id/cancel
    method: POST
    data_selector: result
    params: {}
- name: top_active_items
  endpoint:
    path: /api/1/reports/top_active_items
    method: GET
    data_selector: result
- name: top_active_items
  endpoint:
    path: /api/1/reports/top_active_items
    method: GET
    data_selector: result
    params:
      hours: 24
- name: top_active_items
  endpoint:
    path: /reports/top_active_items
    method: GET
    data_selector: records
    params:
      hours: '24'
- name: top_active_items
  endpoint:
    path: /api/1/reports/top_active_items
    method: GET
    data_selector: records
    params:
      hours: 24
- name: occurrence_counts
  endpoint:
    path: /api/1/reports/occurrence_counts
    method: GET
    data_selector: '[]'
- name: occurrence_counts
  endpoint:
    path: /api/1/reports/occurrence_counts
    method: GET
    data_selector: result
    params:
      bucket_size: '86400'
      min_level: error
- name: occurrence_counts
  endpoint:
    path: /api/1/reports/occurrence_counts
    method: GET
    data_selector: result
    params:
      bucket_size: '86400'
      min_level: error
- name: activated_item_counts
  endpoint:
    path: /api/1/reports/activated_counts
    method: GET
    data_selector: array
- name: activated_counts
  endpoint:
    path: /reports/activated_counts
    method: GET
    params:
      buckets: '60'
- name: active_occurrence_counts
  endpoint:
    path: /reports/active_occurrence_counts
    method: GET
    params: {}
- name: active_occurrence_counts
  endpoint:
    path: /api/1/reports/activated_counts
    method: GET
    params:
      buckets: '60'
- name: projects
  endpoint:
    path: /api/1/projects
    method: POST
    data_selector: null
    params: {}
- name: projects
  endpoint:
    path: /api/1/projects
    method: POST
- name: projects
  endpoint:
    path: /api/1/projects
    method: POST
    data_selector: ''
    params: {}
- name: projects
  endpoint:
    path: /api/1/projects
    method: GET
- name: projects
  endpoint:
    path: /projects
    method: GET
    data_selector: result
- name: projects
  endpoint:
    path: /api/1/projects
    method: POST
    data_selector: records
- name: get activated item counts
  endpoint:
    path: /api/1/notifications/email/rules
    method: GET
    data_selector: records
- name: projects
  endpoint:
    path: /api/1/projects
    method: GET
    data_selector: response
    params: {}
- name: project
  endpoint:
    path: /api/1/project/{project_id}
    method: GET
- name: projects
  endpoint:
    path: /projects
    method: GET
    data_selector: result
- name: projects
  endpoint:
    path: /api/1/projects
    method: GET
    data_selector: result
- name: items
  endpoint:
    path: /api/1/items
    method: GET
    data_selector: result
- name: project
  endpoint:
    path: /api/1/project/{project_id}
    method: GET
- name: delete_project
  endpoint:
    path: /api/1/project/{project_id}
    method: DELETE
    params: {}
- name: project
  endpoint:
    path: /api/1/projects
    method: GET
- name: item
  endpoint:
    path: /api/1/items
    method: GET
- name: occurrence
  endpoint:
    path: /api/1/occurrences
    method: GET
- name: project
  endpoint:
    path: /api/1/project/project_id
    method: DELETE
- name: project_access_tokens
  endpoint:
    path: /api/1/project/{project_id}/access_tokens
    method: GET
- name: delete_project
  endpoint:
    path: /api/1/project/{project_id}
    method: DELETE
    params: {}
- name: project_access_token
  endpoint:
    path: /api/1/project/{project_id}/access_tokens
    method: POST
- name: projects
  endpoint:
    path: /projects
    method: GET
- name: items
  endpoint:
    path: /items
    method: GET
- name: project_access_tokens
  endpoint:
    path: /project/project_id/access_tokens
    method: POST
    data_selector: result
    params:
      status: enabled
- name: project_access_tokens
  endpoint:
    path: /api/1/project/{project_id}/access_tokens
    method: GET
    data_selector: data
    params: {}
- name: update_rate_limit
  endpoint:
    path: /api/1/project/{project_id}/access_token/{token_identifier}
    method: PATCH
    params: {}
- name: project_access_token
  endpoint:
    path: /api/1/project/{project_id}/access_tokens
    method: POST
- name: project_access_tokens
  endpoint:
    path: /project/project_id/access_tokens
    method: POST
    data_selector: result
    params:
      status: enabled
- name: project_access_token
  endpoint:
    path: /api/1/project/{project_id}/access_token/{token_identifier}
    method: DELETE
- name: project_access_token
  endpoint:
    path: /api/1/project/{project_id}/access_token
    method: PATCH
    data_selector: response
    params: {}
- name: update_rate_limit
  endpoint:
    path: /api/1/project/{project_id}/access_token/{token_identifier}
    method: PATCH
    data_selector: null
    params: {}
- name: project_access_token
  endpoint:
    path: /api/1/project/project_id/access_token/token_identifier
    method: PATCH
- name: project_access_token
  endpoint:
    path: /api/1/project/{project_id}/access_token/{token_identifier}
    method: DELETE
- name: delete_project_access_token
  endpoint:
    path: /api/1/project/{project_id}/access_token
    method: DELETE
    data_selector: body
    params: {}
- name: project_access_token
  endpoint:
    path: /api/1/project/{project_id}/access_token
    method: PATCH
    params: {}
- name: teams
  endpoint:
    path: /api/1/teams
    method: POST
- name: project_access_token
  endpoint:
    path: /api/1/project/project_id/access_token
    method: PATCH
- name: teams
  endpoint:
    path: /api/1/teams
    method: GET
- name: delete_project_access_token
  endpoint:
    path: /api/1/project/{project_id}/access_token
    method: DELETE
    data_selector: none
    params: {}
- name: team
  endpoint:
    path: /api/1/team/{team_id}
    method: GET
    data_selector: ''
    params: {}
- name: teams
  endpoint:
    path: /api/1/teams
    method: POST
- name: teams
  endpoint:
    path: /teams
    method: GET
- name: projects
  endpoint:
    path: /projects
    method: GET
- name: items
  endpoint:
    path: /items
    method: GET
- name: teams
  endpoint:
    path: /api/1/teams
    method: GET
- name: delete_team
  endpoint:
    path: /api/1/team/{team_id}
    method: DELETE
    data_selector: null
    params: {}
- name: team
  endpoint:
    path: /api/1/team/{team_id}
    method: GET
- name: team
  endpoint:
    path: /api/1/team/team_id
    method: DELETE
- name: user
  endpoint:
    path: /api/1/users
    method: GET
- name: teams
  endpoint:
    path: /api/1/teams
    method: GET
- name: projects
  endpoint:
    path: /api/1/projects
    method: GET
- name: items
  endpoint:
    path: /api/1/items
    method: GET
- name: users
  endpoint:
    path: /api/1/users
    method: GET
    data_selector: result.users
- name: users
  endpoint:
    path: /users
    method: GET
- name: delete_team
  endpoint:
    path: /api/1/team/{team_id}
    method: DELETE
    data_selector: null
    params: {}
- name: user
  endpoint:
    path: /api/1/user/{user_id}
    method: GET
    data_selector: result
    params: {}
- name: team
  endpoint:
    path: /api/1/team/team_id
    method: DELETE
- name: item
  endpoint:
    path: /api/1/item
    method: GET
- name: project
  endpoint:
    path: /api/1/project
    method: GET
- name: user
  endpoint:
    path: /user/user_id
    method: GET
- name: list_all_users
  endpoint:
    path: /list-all-users
    method: GET
- name: users
  endpoint:
    path: /api/1/users
    method: GET
    data_selector: result.users
    params: {}
- name: team_users
  endpoint:
    path: /api/1/team/{team_id}/users
    method: GET
- name: users
  endpoint:
    path: /team/team_id/users
    method: GET
- name: users
  endpoint:
    path: /users
    method: GET
- name: teams
  endpoint:
    path: /teams
    method: GET
- name: check_user_assignment
  endpoint:
    path: /api/1/team/{team_id}/user/{user_id}
    method: GET
- name: user
  endpoint:
    path: /api/1/user/{user_id}
    method: GET
    data_selector: result
    params: {}
- name: user
  endpoint:
    path: /api/1/user/user_id
    method: GET
- name: list_all_users
  endpoint:
    path: /api/1/users
    method: GET
- name: list_a_team_users
  endpoint:
    path: /api/1/team/team_id/user/user_id
    method: GET
- name: team_users
  endpoint:
    path: /api/1/team/{team_id}/users
    method: GET
    data_selector: users
    params:
      page: 1
- name: teams_users
  endpoint:
    path: /api/1/team/{team_id}/user/{user_id}
    method: PUT
- name: users
  endpoint:
    path: /team/team_id/users
    method: GET
    data_selector: result
- name: remove_user_from_team
  endpoint:
    path: /api/1/team/{team_id}/user/{user_id}
    method: DELETE
- name: check_user_assigned_to_team
  endpoint:
    path: /api/1/team/{team_id}/user/{user_id}
    method: GET
    params: {}
- name: user_teams
  endpoint:
    path: /api/1/user/{user_id}/teams
    method: GET
    data_selector: teams
    params: {}
- name: team_user
  endpoint:
    path: /team/team_id/user/user_id
    method: GET
- name: teams
  endpoint:
    path: /api/1/user/user_id/teams
    method: GET
- name: assign_user_to_team
  endpoint:
    path: /api/1/team/{team_id}/user/{user_id}
    method: PUT
- name: list_invitations_to_a_team
  endpoint:
    path: /api/1/team/{team_id}/invites
    method: GET
    data_selector: result
- name: user_teams
  endpoint:
    path: /api/1/user/{user_id}/teams
    method: GET
    data_selector: teams
- name: team_invites
  endpoint:
    path: /team/team_id/invites
    method: GET
- name: list_teams
  endpoint:
    path: /teams
    method: GET
- name: list_users
  endpoint:
    path: /users
    method: GET
- name: teams
  endpoint:
    path: /api/1/user/user_id/teams
    method: GET
- name: invite_email
  endpoint:
    path: /api/1/team/{team_id}/invites
    method: POST
    data_selector: result
    params: {}
- name: invitations
  endpoint:
    path: /api/1/team/{team_id}/invites
    method: GET
    data_selector: result
    params:
      page: '1'
- name: invitation
  endpoint:
    path: /team/team_id/invites
    method: POST
- name: invite_email
  endpoint:
    path: /api/1/team/team_id/invites
    method: GET
- name: list_teams
  endpoint:
    path: /api/1/teams
    method: GET
- name: get_invitation
  endpoint:
    path: /api/1/invite/{invite_id}
    method: GET
    data_selector: result
    params: {}
- name: invite_email
  endpoint:
    path: /api/1/team/{team_id}/invites
    method: POST
    data_selector: result
    params: {}
- name: invite
  endpoint:
    path: /invite/invite_id
    method: GET
    data_selector: ''
    params: {}
- name: invitation
  endpoint:
    path: /team/team_id/invites
    method: POST
- name: list_invitations
  endpoint:
    path: /list-invitations-to-a-team
    method: GET
- name: get_invitation
  endpoint:
    path: /get-invitation
    method: GET
- name: item
  endpoint:
    path: /api/1/item
    method: POST
- name: occurrence
  endpoint:
    path: /api/1/occurrence
    method: GET
- name: metrics
  endpoint:
    path: /api/1/metrics
    method: POST
- name: deploy
  endpoint:
    path: /api/1/deploy
    method: POST
- name: environment
  endpoint:
    path: /api/1/environments
    method: GET
- name: project
  endpoint:
    path: /api/1/projects
    method: POST
- name: user
  endpoint:
    path: /api/1/users
    method: GET
- name: get_invitation
  endpoint:
    path: /api/1/invite/{invite_id}
    method: GET
    data_selector: result
    params:
      invite_id: string
- name: cancel_invitation
  endpoint:
    path: /api/1/invite/{invite_id}
    method: DELETE
    data_selector: Invitation cancelled
- name: invite
  endpoint:
    path: /invite/invite_id
    method: GET
    data_selector: ''
- name: teams_projects
  endpoint:
    path: /api/1/team/{team_id}/project/{project_id}
    method: PUT
- name: item
  endpoint:
    path: /api/1/items
    method: GET
    data_selector: items
- name: occurrence
  endpoint:
    path: /api/1/instances
    method: GET
    data_selector: occurrences
- name: metrics
  endpoint:
    path: /api/1/metrics/items
    method: POST
    data_selector: metrics
- name: deploy
  endpoint:
    path: /api/1/deploy
    method: POST
    data_selector: deploy
- name: environment
  endpoint:
    path: /api/1/environments
    method: GET
    data_selector: environments
- name: remove_team_from_project
  endpoint:
    path: /api/1/team/{team_id}/project/{project_id}
    method: DELETE
- name: cancel_invitation
  endpoint:
    path: /api/1/invite/{invite_id}
    method: DELETE
    data_selector: Invitation cancelled
- name: team
  endpoint:
    path: /team/team_id/project/project_id
    method: DELETE
- name: project
  endpoint:
    path: /project/project_id
    method: GET
- name: team_project_assignment
  endpoint:
    path: /api/1/team/{team_id}/project/{project_id}
    method: PUT
- name: Remove a team from a project
  endpoint:
    path: /api/1/team/{team_id}/project/{project_id}
    method: DELETE
- name: user_projects
  endpoint:
    path: /api/1/user/{user_id}/projects
    method: GET
    data_selector: result.projects
- name: team_project
  endpoint:
    path: /api/1/team/team_id/project/project_id
    method: DELETE
- name: projects
  endpoint:
    path: /api/1/user/user_id/projects
    method: GET
    data_selector: projects
- name: user_projects
  endpoint:
    path: /api/1/user/{user_id}/projects
    method: GET
    data_selector: result.projects
- name: person_deletion
  endpoint:
    path: /api/1/delete-a-person
    method: POST
- name: projects
  endpoint:
    path: /api/1/user/user_id/projects
    method: GET
- name: person_deletion
  endpoint:
    path: /api/1/delete-a-person
    method: POST
- name: person_deletion
  endpoint:
    path: /api/1/people/delete_jobs/
    method: POST
    data_selector: result
    params: {}
- name: person_deletion
  endpoint:
    path: /api/1/people/delete_jobs/
    method: POST
    data_selector: result
    params: {}
- name: person_deletion_status
  endpoint:
    path: /api/1/people/delete_jobs/{job_id}
    method: GET
    data_selector: result
    params:
      job_id: int32
- name: person_deletion
  endpoint:
    path: /people/delete_jobs/job_id
    method: GET
    data_selector: records
- name: person_deletion_status
  endpoint:
    path: /api/1/people/delete_jobs/{job_id}
    method: GET
    data_selector: result
    params:
      job_id: int32
- name: person_deletion
  endpoint:
    path: /people/delete_jobs/job_id
    method: GET
- name: slack_notification
  endpoint:
    path: /api/1/notifications/slack
    method: PUT
- name: slack_notifications
  endpoint:
    path: /api/1/notifications/slack
    method: PUT
- name: notifications_slack
  endpoint:
    path: /api/1/notifications/slack
    method: PUT
- name: notifications_webhook
  endpoint:
    path: /api/1/notifications/webhook
    method: PUT
- name: webhook_notification
  endpoint:
    path: /api/1/notifications/webhook
    method: PUT
- name: notifications_slack
  endpoint:
    path: /api/1/notifications/slack
    method: PUT
    data_selector: result
- name: webhook_notification
  endpoint:
    path: /api/1/notifications/webhook
    method: PUT
    data_selector: ''
    params: {}
- name: pagerduty_notifications
  endpoint:
    path: /api/1/notifications/pagerduty
    method: PUT
    data_selector: response
    params:
      enabled: boolean
      service_key: string
- name: notifications_webhook
  endpoint:
    path: /api/1/notifications/webhook
    method: PUT
    data_selector: result
    params: {}
- name: pagerduty_notification
  endpoint:
    path: /api/1/notifications/pagerduty
    method: PUT
    data_selector: result
    params: {}
- name: email_notification
  endpoint:
    path: /api/1/notifications/email
    method: PUT
    data_selector: result
    params: {}
- name: webhook_notification
  endpoint:
    path: /api/1/notifications/webhook
    method: PUT
    data_selector: result
    params: {}
- name: pagerduty_notification
  endpoint:
    path: /api/1/notifications/pagerduty
    method: PUT
    data_selector: enabled
    params:
      enabled: boolean
      service_key: string
- name: email_notifications
  endpoint:
    path: /api/1/notifications/email
    method: PUT
- name: pagerduty_notification
  endpoint:
    path: /api/1/notifications/pagerduty
    method: PUT
    data_selector: result
    params: {}
- name: email_notification
  endpoint:
    path: /api/1/notifications/email
    method: PUT
    data_selector: result
    params: {}
- name: webhook_notification
  endpoint:
    path: /api/1/notifications/webhook
    method: PUT
    data_selector: result
    params: {}
- name: notifications_email
  endpoint:
    path: /api/1/notifications/email
    method: PUT
    data_selector: result
- name: notifications_pagerduty
  endpoint:
    path: /api/1/notifications/pagerduty
    method: PUT
    data_selector: result
- name: email_notification
  endpoint:
    path: /api/1/notifications/email
    method: PUT
- name: slack_notification_rules
  endpoint:
    path: /api/1/notifications/slack/rules
    method: PUT
- name: email_notifications
  endpoint:
    path: /api/1/notifications/email
    method: PUT
    data_selector: result
- name: pagerduty_notifications
  endpoint:
    path: /api/1/notifications/pagerduty
    method: PUT
    data_selector: result
- name: slack_notification_rules
  endpoint:
    path: /api/1/notifications/slack/rules
    method: GET
- name: replace_notification_rules
  endpoint:
    path: /api/1/notifications/slack/rules
    method: PUT
- name: slack_rules
  endpoint:
    path: /api/1/notifications/slack/rules
    method: GET
    data_selector: rules
- name: slack_rules
  endpoint:
    path: /api/1/notifications/slack/rules
    method: GET
- name: slack_notification_rules
  endpoint:
    path: /api/1/notifications/slack/rules
    method: GET
    data_selector: result
- name: slack_notification_rules
  endpoint:
    path: /api/1/notifications/slack/rules
    method: GET
    data_selector: rules
- name: slack_notification_rule
  endpoint:
    path: /api/1/notifications/slack/rule/{rule_id}
    method: GET
- name: slack_notification_rules
  endpoint:
    path: /api/1/notifications/slack/rules
    method: GET
    data_selector: result
- name: slack_notification_rule
  endpoint:
    path: /api/1/notifications/slack/rule/{rule_id}
    method: PUT
- name: slack_notification_rule
  endpoint:
    path: /api/1/notifications/slack/rule/{rule_id}
    method: GET
- name: notification_slack_rule
  endpoint:
    path: /api/1/notifications/slack/rule/{rule_id}
    method: PUT
- name: notification_rule
  endpoint:
    path: /api/1/notifications/slack/rule/{rule_id}
    method: PUT
- name: slack_notification_rule
  endpoint:
    path: /api/1/notifications/slack/rule/{rule_id}
    method: DELETE
- name: notifications_slack_rule
  endpoint:
    path: /api/1/notifications/slack/rule/{rule_id}
    method: PUT
    data_selector: result
    params: {}
- name: slack_notification_rule
  endpoint:
    path: /api/1/notifications/slack/rule/{rule_id}
    method: DELETE
- name: notification_rule
  endpoint:
    path: /api/1/notifications/slack/rule/{rule_id}
    method: DELETE
- name: pagerduty_notification_rules
  endpoint:
    path: /api/1/notifications/pagerduty
    method: POST
- name: slack_notification_rule
  endpoint:
    path: /api/1/notifications/slack/rule/{rule_id}
    method: DELETE
- name: notifications_pagerduty
  endpoint:
    path: /api/1/notifications/pagerduty
    method: POST
- name: notifications_slack_rule
  endpoint:
    path: /api/1/notifications/slack/rule/{rule_id}
    method: PUT
- name: pagerduty_notification
  endpoint:
    path: /api/1/notifications/pagerduty
    method: POST
- name: notification_rules
  endpoint:
    path: /api/1/notifications/pagerduty/rules
    method: PUT
- name: notifications_pagerduty
  endpoint:
    path: /api/1/notifications/pagerduty
    method: POST
- name: notifications_slack_rule
  endpoint:
    path: /api/1/notifications/slack/rule/{rule_id}
    method: PUT
- name: notifications_slack_rules
  endpoint:
    path: /api/1/notifications/slack/rules
    method: GET
- name: pagerduty_notification_rules
  endpoint:
    path: /api/1/notifications/pagerduty/rules
    method: GET
    data_selector: rules
- name: pagerduty_notifications
  endpoint:
    path: /api/1/notifications/pagerduty
    method: POST
    data_selector: notifications
- name: pagerduty_notification_rules
  endpoint:
    path: /api/1/notifications/pagerduty/rules
    method: PUT
- name: pagerduty_notification_rules
  endpoint:
    path: /api/1/notifications/pagerduty/rules
    method: GET
- name: pagerduty_rules
  endpoint:
    path: /api/1/notifications/pagerduty/rules
    method: GET
- name: pagerduty_rules
  endpoint:
    path: /notifications/pagerduty/rules
    method: GET
    data_selector: rules
- name: pagerduty_notification_rules
  endpoint:
    path: /api/1/notifications/pagerduty/rules
    method: GET
    data_selector: rules
- name: pagerduty_rules
  endpoint:
    path: /api/1/notifications/pagerduty/rules
    method: GET
    data_selector: records
    params: {}
- name: pagerduty_rule
  endpoint:
    path: /api/1/notifications/pagerduty/rule/{rule_id}
    method: GET
- name: pagerduty_rule
  endpoint:
    path: /notifications/pagerduty/rule/{rule_id}
    method: GET
- name: pagerduty_rules
  endpoint:
    path: /notifications/pagerduty/rules
    method: GET
- name: pagerduty_rule
  endpoint:
    path: /api/1/notifications/pagerduty/rule/{rule_id}
    method: GET
    data_selector: response
    params: {}
- name: pagerduty_rule
  endpoint:
    path: /notifications/pagerduty/rule/{rule_id}
    method: GET
- name: pagerduty_rules
  endpoint:
    path: /notifications/pagerduty/rules
    method: GET
- name: pagerduty_rule
  endpoint:
    path: /api/1/notifications/pagerduty/rule/{rule_id}
    method: PUT
- name: notification_rule
  endpoint:
    path: /api/1/notifications/pagerduty/rule/{rule_id}
    method: PUT
- name: pagerduty_rule
  endpoint:
    path: /api/1/notifications/pagerduty/rule/{rule_id}
    method: PUT
- name: pagerduty_rule
  endpoint:
    path: /api/1/notifications/pagerduty/rule/{rule_id}
    method: PUT
    data_selector: result
    params: {}
- name: pagerduty_notification_rule
  endpoint:
    path: /api/1/notifications/pagerduty/rule/{rule_id}
    method: DELETE
    params: {}
- name: notification_rule
  endpoint:
    path: /api/1/notifications/pagerduty/rule/{rule_id}
    method: DELETE
    data_selector: response
    params: {}
- name: pagerduty_rule
  endpoint:
    path: /notifications/pagerduty/rule/{rule_id}
    method: DELETE
- name: pagerduty_rule
  endpoint:
    path: /notifications/pagerduty/rule/{rule_id}
    method: DELETE
- name: email_notification_rules
  endpoint:
    path: /api/1/notifications/email/rules
    method: POST
- name: email_notification_rules
  endpoint:
    path: /api/1/notifications/email/rules
    method: POST
- name: email_notification_rules
  endpoint:
    path: /api/1/notifications/email/rules
    method: PUT
- name: email_notification_rules
  endpoint:
    path: /api/1/notifications/email/rules
    method: PUT
- name: slack_notification_rules
  endpoint:
    path: /api/1/notifications/slack/rules
    method: POST
- name: pagerduty_notification_rules
  endpoint:
    path: /api/1/notifications/pagerduty
    method: POST
- name: webhook_notification_rules
  endpoint:
    path: /api/1/notifications/webhook/rules
    method: POST
- name: email_notification_rules
  endpoint:
    path: /api/1/notifications/email/rules
    method: GET
- name: notifications_email_rules
  endpoint:
    path: /api/1/notifications/email/rules
    method: GET
- name: email_notification_rules
  endpoint:
    path: /api/1/notifications/email/rules
    method: GET
    data_selector: rules
- name: email_notification_rule
  endpoint:
    path: /api/1/notifications/email/rule/{rule_id}
    method: GET
    data_selector: response
- name: notifications_email_rules
  endpoint:
    path: /api/1/notifications/email/rules
    method: GET
- name: notifications_email_rule
  endpoint:
    path: /api/1/notifications/email/rule/{rule_id}
    method: GET
- name: email_rule
  endpoint:
    path: /api/1/notifications/email/rule/{rule_id}
    method: GET
    data_selector: result
- name: email_rules
  endpoint:
    path: /api/1/notifications/email/rules
    method: GET
    data_selector: result
- name: email_notification_rule
  endpoint:
    path: /api/1/notifications/email/rule/{rule_id}
    method: GET
- name: email_notification_rule
  endpoint:
    path: /api/1/notifications/email/rule/{rule_id}
    method: PUT
- name: email_rule
  endpoint:
    path: /api/1/notifications/email/rule/{rule_id}
    method: GET
    data_selector: object
- name: email_rules
  endpoint:
    path: /api/1/notifications/email/rules
    method: GET
    data_selector: object
- name: email_rule
  endpoint:
    path: /api/1/notifications/email/rule/{rule_id}
    method: PUT
- name: email_rules
  endpoint:
    path: /api/1/notifications/email/rules
    method: GET
- name: update_notification_rule
  endpoint:
    path: /api/1/notifications/email/rule/{rule_id}
    method: PUT
- name: email_notification_rule
  endpoint:
    path: /api/1/notifications/email/rule/{rule_id}
    method: DELETE
- name: email_notification_rule
  endpoint:
    path: /api/1/notifications/email/rule/{rule_id}
    method: PUT
- name: email_notification_rule
  endpoint:
    path: /api/1/notifications/email/rule/{rule_id}
    method: DELETE
- name: webhook_notification_rules
  endpoint:
    path: /api/1/notifications/webhook/rules
    method: POST
- name: webhook_notification_rules
  endpoint:
    path: /api/1/notifications/webhook/rules
    method: POST
- name: notifications_webhook_rules
  endpoint:
    path: /notifications/webhook/rules
    method: POST
- name: notifications_email_rule
  endpoint:
    path: /notifications/email/rule/{rule_id}
    method: PUT
- name: notifications_email_rules
  endpoint:
    path: /notifications/email/rules
    method: GET
- name: notifications_pagerduty_rule
  endpoint:
    path: /notifications/pagerduty/rule/{rule_id}
    method: PUT
- name: notifications_webhook_rule
  endpoint:
    path: /notifications/webhook/rule/{rule_id}
    method: GET
- name: notifications_webhook_rules
  endpoint:
    path: /api/1/notifications/webhook/rules
    method: POST
- name: webhook_rules
  endpoint:
    path: /api/1/notifications/webhook/rules
    method: GET
- name: webhook_rules
  endpoint:
    path: /api/1/notifications/webhook/rules
    method: GET
    data_selector: rules
- name: notifications_webhook_rules
  endpoint:
    path: /notifications/webhook/rules
    method: GET
    data_selector: records
- name: notifications_webhook_rules
  endpoint:
    path: /api/1/notifications/webhook/rules
    method: GET
    data_selector: records
- name: webhook_rule
  endpoint:
    path: /api/1/notifications/webhook/rule/{rule_id}
    method: GET
- name: webhook_rule
  endpoint:
    path: /api/1/notifications/webhook/rule/{rule_id}
    method: GET
- name: notifications_webhook_rules
  endpoint:
    path: /notifications/webhook/rules
    method: GET
- name: notifications_webhook_rule
  endpoint:
    path: /notifications/webhook/rule/{rule_id}
    method: GET
- name: webhook_rule
  endpoint:
    path: /api/1/notifications/webhook/rule/{rule_id}
    method: GET
- name: webhook_rules
  endpoint:
    path: /api/1/notifications/webhook/rules
    method: GET
- name: webhook_notification_rule
  endpoint:
    path: /api/1/notifications/webhook/rule/{rule_id}
    method: PUT
- name: webhook_rule
  endpoint:
    path: /api/1/notifications/webhook/rule/{rule_id}
    method: PUT
- name: webhook_rule
  endpoint:
    path: /api/1/notifications/webhook/rule/{rule_id}
    method: PUT
- name: webhook_rule
  endpoint:
    path: /api/1/notifications/webhook/rule/{rule_id}
    method: PUT
    data_selector: result
- name: webhook_rule
  endpoint:
    path: /api/1/notifications/webhook/rule/{rule_id}
    method: DELETE
    data_selector: null
    params: {}
- name: webhook_rule
  endpoint:
    path: /api/1/notifications/webhook/rule/{rule_id}
    method: DELETE
- name: webhook_notification_rule
  endpoint:
    path: /api/1/notifications/webhook/rule/{rule_id}
    method: DELETE
- name: session_replay
  endpoint:
    path: /api/1/environment/{environment}/session/{sessionId}/replay/{replayId}
    method: GET
- name: webhook_rule
  endpoint:
    path: /api/1/notifications/webhook/rule/{rule_id}
    method: DELETE
- name: service_links
  endpoint:
    path: /api/1/service_links
    method: GET
- name: session_replay
  endpoint:
    path: /api/1/environment/{environment}/session/{sessionId}/replay/{replayId}
    method: GET
- name: service_links
  endpoint:
    path: /service_links
    method: GET
    data_selector: result
- name: service_links
  endpoint:
    path: /api/1/service_links
    method: GET
- name: service_links
  endpoint:
    path: /api/1/service_links
    method: POST
- name: service_links
  endpoint:
    path: /service_links
    method: GET
- name: service_links
  endpoint:
    path: /api/1/service_links/{id}
    method: PUT
- name: service_links
  endpoint:
    path: /api/1/service_links
    method: POST
- name: service_links
  endpoint:
    path: /api/1/service_links
    method: GET
- name: service_link_by_id
  endpoint:
    path: /api/1/service_links/{id}
    method: GET
- name: service_links
  endpoint:
    path: /api/1/service_links/{id}
    method: PUT
    data_selector: null
    params: {}
- name: service_link
  endpoint:
    path: /api/1/service_links/{id}
    method: GET
- name: service_links
  endpoint:
    path: /api/1/service_links
    method: GET
- name: service_link_by_id
  endpoint:
    path: /api/1/service_links/{id}
    method: GET
- name: service_links
  endpoint:
    path: /api/1/service_links
    method: GET
    data_selector: service_links
- name: service_link
  endpoint:
    path: /api/1/service_links/{id}
    method: DELETE
    data_selector: null
    params: {}
- name: service_link
  endpoint:
    path: /api/1/service_links/{id}
    method: GET
- name: service_links
  endpoint:
    path: /service_links/{id}
    method: GET
- name: service_links
  endpoint:
    path: /api/1/service_links/{id}
    method: DELETE
- name: service_links
  endpoint:
    path: /api/1/service_links/{id}
    method: DELETE
- name: service_links
  endpoint:
    path: /api/1/service_links/{id}
    method: GET
- name: service_links
  endpoint:
    path: /api/1/service_links/{id}
    method: PUT
- name: service_links
  endpoint:
    path: /api/1/service_links
    method: POST
- name: service_links
  endpoint:
    path: /api/1/service_links
    method: GET
- name: service_link
  endpoint:
    path: /api/1/service_links/{id}
    method: DELETE
- name: versions
  endpoint:
    path: /api/1/versions/{version}
    method: GET
- name: versions
  endpoint:
    path: /api/1/versions/{version}
    method: GET
- name: list_items_by_code_version
  endpoint:
    path: /api/1/versions/{version}/items
    method: GET
    params:
      environment: ''
      event: ''
      level: []
      page: 1
- name: list_items_by_code_version
  endpoint:
    path: /api/1/versions/{version}/items
    method: GET
    data_selector: items
    params:
      environment: required
      event: required
- name: versions
  endpoint:
    path: /versions/version/items
    method: GET
    data_selector: result
    params:
      event: new
- name: versions
  endpoint:
    path: /versions/version/items
    method: GET
    data_selector: result
    params:
      event: new
- name: item
  endpoint:
    path: /reference/create-item
    method: POST
- name: occurrence
  endpoint:
    path: /reference/get_api-1-instances
    method: GET
- name: metrics
  endpoint:
    path: /reference/post_api-1-metrics-items
    method: POST
- name: deploy
  endpoint:
    path: /reference/post-deploy
    method: POST
- name: environment
  endpoint:
    path: /reference/list-all-environments
    method: GET
- name: symbol_maps
  endpoint:
    path: /reference/upload-a-js-source-map
    method: POST
- name: rql
  endpoint:
    path: /reference/check-an-rql-job
    method: GET
- name: reports
  endpoint:
    path: /reference/get-top-active-items
    method: GET
- name: projects
  endpoint:
    path: /reference/create-a-project
    method: POST
- name: project_access_tokens
  endpoint:
    path: /reference/list-all-project-access-tokens
    method: GET
- name: teams
  endpoint:
    path: /reference/create-a-team
    method: POST
- name: users
  endpoint:
    path: /reference/list-all-users
    method: GET
- name: item
  endpoint:
    path: /reference/create-item
    method: POST
- name: occurrence
  endpoint:
    path: /reference/get_api-1-instances
    method: GET
- name: metrics
  endpoint:
    path: /reference/post_api-1-metrics-items
    method: POST
- name: deploy
  endpoint:
    path: /reference/post-deploy
    method: POST
- name: environment
  endpoint:
    path: /reference/list-all-environments
    method: GET
- name: symbol_maps
  endpoint:
    path: /reference/upload-a-js-source-map
    method: POST
- name: rql
  endpoint:
    path: /reference/check-an-rql-job
    method: GET
- name: reports
  endpoint:
    path: /reference/get-top-active-items
    method: GET
- name: projects
  endpoint:
    path: /reference/create-a-project
    method: POST
- name: project_access_tokens
  endpoint:
    path: /reference/list-all-project-access-tokens
    method: GET
- name: teams
  endpoint:
    path: /reference/create-a-team
    method: POST
- name: users
  endpoint:
    path: /reference/list-all-users
    method: GET
- name: notification_channels
  endpoint:
    path: /api/1/notifications/slack
    method: PUT
- name: service_links
  endpoint:
    path: /api/1/service_links
    method: GET
- name: versions
  endpoint:
    path: /reference/get_api-1-versions-version
    method: GET
- name: item
  endpoint:
    path: /api/1/item/
    method: POST
    data_selector: null
    params: {}
- name: item
  endpoint:
    path: /api/1/item/
    method: POST
    data_selector: null
    params: {}
- name: item
  endpoint:
    path: /api/1/item
    method: POST
    data_selector: data
- name: item
  endpoint:
    path: /api/1/item/
    method: POST
    data_selector: data
- name: item
  endpoint:
    path: /item/
    method: POST
    data_selector: object
    params: {}
- name: item
  endpoint:
    path: /api/1/item/
    method: POST
- name: occurrences
  endpoint:
    path: /api/1/instances
    method: GET
- name: items
  endpoint:
    path: /api/1/items
    method: GET
- name: projects
  endpoint:
    path: /api/1/projects
    method: GET
- name: teams
  endpoint:
    path: /api/1/teams
    method: GET
- name: users
  endpoint:
    path: /api/1/users
    method: GET
- name: occurrences
  endpoint:
    path: /api/1/instances
    method: GET
    data_selector: records
- name: items
  endpoint:
    path: /api/1/items
    method: GET
    data_selector: records
- name: projects
  endpoint:
    path: /api/1/projects
    method: GET
    data_selector: records
- name: instances
  endpoint:
    path: /api/1/instances
    method: GET
    data_selector: occurrences
- name: occurrences
  endpoint:
    path: /instances
    method: GET
    data_selector: records
- name: metrics_items
  endpoint:
    path: /api/1/metrics/items
    method: POST
    data_selector: item_counters
    params: {}
- name: metrics_items
  endpoint:
    path: /api/1/metrics/items
    method: POST
    data_selector: item_counters
- name: metrics
  endpoint:
    path: /api/1/metrics/items
    method: POST
    data_selector: metrics
- name: metrics
  endpoint:
    path: /metrics/items
    method: POST
    data_selector: metrics
- name: deploy
  endpoint:
    path: /api/1/deploy
    method: POST
    data_selector: null
    params: {}
- name: deploy
  endpoint:
    path: /api/1/deploy
    method: POST
    data_selector: response
    params: {}
- name: deploy
  endpoint:
    path: /api/1/deploy
    method: POST
    data_selector: records
- name: metrics
  endpoint:
    path: /api/1/metrics
    method: POST
    data_selector: records
- name: deploy
  endpoint:
    path: /api/1/deploy
    method: POST
- name: metrics_ttr
  endpoint:
    path: /api/1/metrics/ttr
    method: POST
- name: list_all_projects
  endpoint:
    path: /api/1/projects
    method: GET
- name: environments
  endpoint:
    path: /api/1/environments
    method: GET
    data_selector: result.environments
- name: environments
  endpoint:
    path: /api/1/environments
    method: GET
    data_selector: result.environments
- name: environments
  endpoint:
    path: /api/1/environments
    method: GET
    data_selector: ''
    params: {}
- name: deploys
  endpoint:
    path: /api/1/deploys
    method: GET
    data_selector: ''
    params: {}
- name: environments
  endpoint:
    path: /environments
    method: GET
- name: deploys
  endpoint:
    path: /deploys
    method: GET
- name: items
  endpoint:
    path: /items
    method: GET
- name: occurrences
  endpoint:
    path: /occurrences
    method: GET
- name: projects
  endpoint:
    path: /projects
    method: GET
- name: users
  endpoint:
    path: /users
    method: GET
- name: sourcemap
  endpoint:
    path: /api/1/sourcemap
    method: POST
- name: upload_js_source_map
  endpoint:
    path: /api/1/sourcemap
    method: POST
- name: sourcemap
  endpoint:
    path: /api/1/sourcemap
    method: POST
    data_selector: ''
    params: {}
- name: source_map
  endpoint:
    path: /api/1/sourcemap
    method: POST
    data_selector: response
    params: {}
- name: RQL Job
  endpoint:
    path: /api/1/rql/job/{job_id}
    method: GET
- name: RQL job
  endpoint:
    path: /rql/job/job_id
    method: GET
- name: RQL Job
  endpoint:
    path: /api/1/rql/job/{job_id}
    method: GET
    data_selector: result
    params: {}
- name: top_active_items
  endpoint:
    path: /api/1/reports/top_active_items
    method: GET
    data_selector: result
- name: rql_job
  endpoint:
    path: /rql/job/job_id
    method: GET
- name: top_active_items
  endpoint:
    path: /api/1/reports/top_active_items
    method: GET
    data_selector: records
    params:
      hours: '24'
- name: top_active_items
  endpoint:
    path: /api/1/reports/top_active_items
    method: GET
    data_selector: result
- name: top_active_items
  endpoint:
    path: /api/1/reports/top_active_items
    method: GET
- name: projects
  endpoint:
    path: /api/1/projects
    method: POST
    data_selector: null
    params: {}
- name: projects
  endpoint:
    path: /api/1/projects
    method: POST
    data_selector: null
    params: {}
- name: projects
  endpoint:
    path: /projects
    method: POST
    data_selector: null
    params: {}
- name: projects
  endpoint:
    path: /projects
    method: POST
    data_selector: null
    params: {}
- name: get activated item counts
  endpoint:
    path: /get-activated-item-counts
    method: GET
    data_selector: null
    params: {}
- name: list all projects
  endpoint:
    path: /list-all-projects
    method: GET
    data_selector: null
    params: {}
- name: project_access_tokens
  endpoint:
    path: /api/1/project/{project_id}/access_tokens
    method: GET
    data_selector: tokens
    params: {}
- name: project_access_tokens
  endpoint:
    path: /api/1/project/{project_id}/access_tokens
    method: GET
- name: project_access_tokens
  endpoint:
    path: /api/1/project/project_id/access_tokens
    method: GET
- name: projects
  endpoint:
    path: /api/1/projects
    method: GET
- name: project_access_tokens
  endpoint:
    path: /api/1/project/project_id/access_tokens
    method: GET
- name: projects
  endpoint:
    path: /api/1/projects
    method: GET
- name: teams
  endpoint:
    path: /api/1/teams
    method: POST
    data_selector: ''
    params: {}
- name: teams
  endpoint:
    path: /api/1/teams
    method: POST
    data_selector: null
    params: {}
- name: teams
  endpoint:
    path: /teams
    method: POST
    data_selector: null
    params: {}
- name: projects
  endpoint:
    path: /projects
    method: GET
    data_selector: null
    params: {}
- name: teams
  endpoint:
    path: /teams
    method: GET
- name: projects
  endpoint:
    path: /projects
    method: GET
- name: items
  endpoint:
    path: /items
    method: GET
- name: occurrences
  endpoint:
    path: /instances
    method: GET
- name: deploys
  endpoint:
    path: /deploys
    method: GET
- name: environments
  endpoint:
    path: /environments
    method: GET
- name: users
  endpoint:
    path: /api/1/users
    method: GET
    data_selector: result.users
    params: {}
- name: users
  endpoint:
    path: /api/1/users
    method: GET
    data_selector: result.users
    params: {}
- name: users
  endpoint:
    path: /users
    method: GET
- name: users
  endpoint:
    path: /users
    method: GET
    data_selector: records
- name: team_users
  endpoint:
    path: /api/1/team/{team_id}/users
    method: GET
    data_selector: users
    params: {}
- name: team_users
  endpoint:
    path: /api/1/team/{team_id}/users
    method: GET
    data_selector: users
    params:
      page: '1'
- name: users
  endpoint:
    path: /team/team_id/users
    method: GET
- name: team_users
  endpoint:
    path: /team/team_id/users
    method: GET
- name: team_projects
  endpoint:
    path: /api/1/team/{team_id}/projects
    method: GET
    data_selector: result
- name: teams
  endpoint:
    path: /teams
    method: GET
    data_selector: teams
- name: projects
  endpoint:
    path: /projects
    method: GET
    data_selector: projects
- name: user_projects
  endpoint:
    path: /api/1/user/{user_id}/projects
    method: GET
    data_selector: result.projects
- name: team_projects
  endpoint:
    path: /api/1/team/{team_id}/projects
    method: GET
    data_selector: result
    params:
      team_id: int32
- name: person_deletion
  endpoint:
    path: /api/1/delete-a-person
    method: POST
- name: list_a_project's_teams
  endpoint:
    path: /team/team_id/projects
    method: GET
- name: cancel_invitation
  endpoint:
    path: /cancel-invitation
    method: DELETE
- name: user_projects
  endpoint:
    path: /api/1/user/{user_id}/projects
    method: GET
    data_selector: result.projects
- name: slack_notification
  endpoint:
    path: /api/1/notifications/slack
    method: PUT
    data_selector: response
    params: {}
- name: person_deletion
  endpoint:
    path: /api/1/delete-a-person
    method: POST
- name: notifications_slack
  endpoint:
    path: /api/1/notifications/slack
    method: PUT
    data_selector: null
    params: {}
- name: person_deletion
  endpoint:
    path: /people/delete_jobs/
    method: POST
- name: slack_notification_rules
  endpoint:
    path: /api/1/notifications/slack/rules
    method: POST
- name: slack_notifications
  endpoint:
    path: /api/1/notifications/slack
    method: PUT
    data_selector: null
    params:
      enabled: boolean
      service_account_id: integer
      channel: string
      show_message_buttons: boolean
- name: notifications_slack_rules
  endpoint:
    path: /api/1/notifications/slack/rules
    method: POST
    data_selector: null
    params: {}
- name: notifications_email
  endpoint:
    path: /api/1/notifications/email
    method: PUT
    data_selector: null
    params: {}
- name: notifications_slack
  endpoint:
    path: /api/1/notifications/slack
    method: PUT
    data_selector: null
    params: {}
- name: pagerduty_notification
  endpoint:
    path: /api/1/notifications/pagerduty
    method: POST
    data_selector: object
    params: {}
- name: slack_notification_rules
  endpoint:
    path: /api/1/notifications/slack/rules
    method: POST
- name: notifications_pagerduty
  endpoint:
    path: /api/1/notifications/pagerduty
    method: POST
- name: notifications_slack_rule
  endpoint:
    path: /api/1/notifications/slack/rule/{rule_id}
    method: DELETE
- name: email_notification_rules
  endpoint:
    path: /api/1/notifications/email/rules
    method: POST
- name: notifications_slack_rules
  endpoint:
    path: /api/1/notifications/slack/rules
    method: POST
- name: notifications_email
  endpoint:
    path: /api/1/notifications/email
    method: PUT
- name: pagerduty_notification
  endpoint:
    path: /api/1/notifications/pagerduty
    method: POST
- name: notifications_email_rules
  endpoint:
    path: /api/1/notifications/email/rules
    method: POST
- name: notifications_pagerduty_rules
  endpoint:
    path: /api/1/notifications/pagerduty/rules
    method: POST
- name: notifications_webhook_rules
  endpoint:
    path: /api/1/notifications/webhook/rules
    method: POST
- name: webhook_notification_rules
  endpoint:
    path: /api/1/notifications/webhook/rules
    method: POST
- name: session_replay
  endpoint:
    path: /api/1/environment/{environment}/session/{sessionId}/replay/{replayId}
    method: GET
    data_selector: payload
    params: {}
- name: pagerduty_notification
  endpoint:
    path: /api/1/notifications/pagerduty
    method: POST
- name: email_notification
  endpoint:
    path: /api/1/notifications/email
    method: PUT
- name: slack_notification
  endpoint:
    path: /api/1/notifications/slack
    method: PUT
- name: session_replay
  endpoint:
    path: /api/1/environment/environment/session/sessionId/replay/replayId
    method: GET
- name: email_notification_rules
  endpoint:
    path: /api/1/notifications/email/rules
    method: POST
- name: service_links
  endpoint:
    path: /api/1/service_links
    method: GET
- name: notifications_email_rules
  endpoint:
    path: /api/1/notifications/email/rules
    method: POST
- name: notifications_pagerduty_rules
  endpoint:
    path: /api/1/notifications/pagerduty/rules
    method: PUT
- name: notifications_webhook_rules
  endpoint:
    path: /api/1/notifications/webhook/rules
    method: PUT
- name: versions
  endpoint:
    path: /api/1/versions/{version}
    method: GET
    data_selector: response
- name: versions
  endpoint:
    path: /api/1/versions/version
    method: GET
    data_selector: object
- name: session_replay
  endpoint:
    path: /api/1/environment/{environment}/session/{sessionId}/replay/{replayId}
    method: GET
    data_selector: payload
- name: items
  endpoint:
    path: /api/1/items
    method: GET
    data_selector: data
    params: {}
- name: session_replay
  endpoint:
    path: /api/1/environment/environment/session/sessionId/replay/replayId
    method: GET
    data_selector: events
- name: service_links
  endpoint:
    path: /api/1/service_links
    method: GET
- name: notifications
  endpoint:
    path: /api/1/notifications
    method: POST
    data_selector: data
    params: {}
- name: notifications
  endpoint:
    path: /api/notifications
    method: GET
- name: versions
  endpoint:
    path: /api/1/versions/{version}
    method: GET
    data_selector: response
    params:
      environment: ''
- name: versions
  endpoint:
    path: /api/1/versions/version
    method: GET
    data_selector: object
- name: error_item
  endpoint:
    path: /api/1/errors
    method: GET
    data_selector: result
    params: {}
- name: items
  endpoint:
    path: /api/1/items
    method: GET
    data_selector: data
    params: {}
- name: notifications
  endpoint:
    path: /api/notifications
    method: GET
    data_selector: notifications
    params: {}
- name: item
  endpoint:
    path: /api/1/item
    method: GET
    data_selector: records
- name: occurrence
  endpoint:
    path: /api/1/instance
    method: GET
    data_selector: records
- name: metrics
  endpoint:
    path: /api/1/metrics
    method: POST
    data_selector: records
- name: deploy
  endpoint:
    path: /api/1/deploy
    method: POST
    data_selector: records
- name: error
  endpoint:
    path: /api/1/errors
    method: GET
    data_selector: errors
    params: {}
- name: error
  endpoint:
    path: /api/1/errors/
    method: GET
    data_selector: data.errors
- name: project
  endpoint:
    path: /api/1/projects/
    method: GET
    data_selector: data.projects
- name: telemetry
  endpoint:
    path: /api/telemetry
    method: GET
    data_selector: data
    params: {}
- name: item
  endpoint:
    path: /api/1/item/{item_id}
    method: GET
    data_selector: records
- name: deploy
  endpoint:
    path: /api/1/deploy
    method: POST
    data_selector: records
- name: occurrence
  endpoint:
    path: /api/1/item/{item_id}/instances
    method: GET
    data_selector: records
- name: error
  endpoint:
    path: /api/1/errors
    method: GET
    data_selector: data
    params: {}
- name: rollbar_items
  endpoint:
    path: /api/1/items
    method: GET
    data_selector: data
    params: {}
- name: rollbar_notifications
  endpoint:
    path: /api/notifications
    method: POST
    data_selector: data
- name: rollbar
  endpoint:
    path: /api/1/item/
    method: POST
    data_selector: data
- name: item
  endpoint:
    path: /items
    method: GET
    data_selector: items
- name: rollbar_js
  endpoint:
    path: /api/rollbar.js
    method: GET
    data_selector: payload
    params: {}
- name: error
  endpoint:
    path: /item
    method: POST
    data_selector: data
    params: {}
- name: rollbar_log
  endpoint:
    path: /api/1/item
    method: POST
    data_selector: data
    params: {}
- name: error
  endpoint:
    path: /api/1/errors
    method: GET
    data_selector: errors
- name: item
  endpoint:
    path: /api/1/items
    method: GET
    data_selector: items
- name: logs
  endpoint:
    path: /api/1/item/
    method: POST
    data_selector: data
    params: {}
- name: project
  endpoint:
    path: /api/1/projects
    method: GET
    data_selector: data
- name: rollbar_items
  endpoint:
    path: /api/1/items
    method: GET
    data_selector: result.items
- name: items
  endpoint:
    path: /api/1/items
    method: GET
    data_selector: result.items
    params:
      incremental: created_at
- name: projects
  endpoint:
    path: /api/1/projects
    method: GET
    data_selector: result.projects
    params: {}
- name: rollbar_config
  endpoint:
    path: /api/rollbar_config
    method: POST
    data_selector: data
    params: {}
- name: notifications
  endpoint:
    path: /api/1/notifications
    method: POST
    data_selector: data
    params: {}
- name: items
  endpoint:
    path: /api/1/items
    method: GET
    data_selector: result
    params: {}
- name: error
  endpoint:
    path: /api/1/item/
    method: POST
    data_selector: data
- name: errors
  endpoint:
    path: /api/1/errors
    method: GET
    data_selector: result
    params: {}
- name: rollbar
  endpoint:
    path: /api/1/item
    method: POST
- name: issues
  endpoint:
    path: /api/1/issues
    method: GET
    data_selector: data
- name: deploys
  endpoint:
    path: /api/1/deploys
    method: GET
    data_selector: data
- name: rollbar
  endpoint:
    path: /api/rollbar
    method: POST
    data_selector: data
- name: rollbar
  endpoint:
    path: /rollbar
    method: POST
    data_selector: payload
    params: {}
- name: logs
  endpoint:
    path: /api/1/item/
    method: POST
    data_selector: data
    params: {}
- name: items
  endpoint:
    path: /api/1/items
    method: GET
    data_selector: result.items
- name: errors
  endpoint:
    path: /api/1/errors
    method: GET
    data_selector: result.errors
- name: issues
  endpoint:
    path: /api/1/issues/
    method: GET
    data_selector: data
    params: {}
- name: rollbar
  endpoint:
    path: /api/1/item/
    method: POST
    data_selector: data
    params: {}
- name: rollbar_client
  endpoint:
    path: /rollbar/client
    method: POST
- name: rollbar_server
  endpoint:
    path: /rollbar/server
    method: POST
- name: Rollbar
  endpoint:
    path: /api/1/errors
    method: POST
    data_selector: data
    params: {}
- name: errors
  endpoint:
    path: /errors
    method: GET
    data_selector: data
    params: {}
- name: deploys
  endpoint:
    path: /deploys
    method: GET
    data_selector: data
    params: {}
- name: errors
  endpoint:
    path: /api/1/errors
    method: GET
    data_selector: result
    params: {}
- name: rollbar_logs
  endpoint:
    path: /api/1/item/
    method: POST
    data_selector: data
    params: {}
- name: error_item
  endpoint:
    path: /api/1/item
    method: POST
    data_selector: data
    params: {}
- name: error
  endpoint:
    path: /api/1/item
    method: POST
    data_selector: data
    params: {}
- name: log
  endpoint:
    path: /api/1/log
    method: POST
    data_selector: data
    params: {}
- name: items
  endpoint:
    path: /api/1/items
    method: GET
    data_selector: data.items
- name: occurrences
  endpoint:
    path: /api/1/occurrences
    method: GET
    data_selector: data.occurrences
- name: access_tokens
  endpoint:
    path: /docs/access-tokens
    method: GET
- name: items
  endpoint:
    path: /api/1/items
    method: GET
    data_selector: data
    params: {}
- name: error
  endpoint:
    path: /api/1/item/
    method: POST
    data_selector: data
- name: error
  endpoint:
    path: /api/1/error
    method: POST
    data_selector: data
    params: {}
- name: proguard_upload
  endpoint:
    path: /api/1/proguard
    method: POST
    data_selector: null
    params: {}
- name: log
  endpoint:
    path: /api/1/item/
    method: POST
    data_selector: data
    params: {}
- name: proguard
  endpoint:
    path: /api/1/proguard
    method: POST
    data_selector: ''
    params: {}
- name: rollbar
  endpoint:
    path: /api/1/item
    method: POST
    data_selector: data
    params: {}
- name: error_item
  endpoint:
    path: /api/1/item/
    method: GET
    data_selector: data
    params: {}
- name: web
  endpoint:
    path: /api/web
    method: POST
    data_selector: data
    params: {}
- name: telemetry
  endpoint:
    path: /api/telemetry
    method: GET
    data_selector: events
    params: {}
- name: error_item
  endpoint:
    path: /api/1/item/
    method: GET
    data_selector: data
- name: errors
  endpoint:
    path: /api/1/errors
    method: GET
    data_selector: data
    params: {}
- name: error
  endpoint:
    path: /api/1/item/
    method: POST
    data_selector: data
    params: {}
- name: notifications
  endpoint:
    path: /api/notifications
    method: GET
    data_selector: records
- name: items
  endpoint:
    path: /api/1/items
    method: GET
    data_selector: data
- name: occurrences
  endpoint:
    path: /api/1/occurrences
    method: GET
    data_selector: data
- name: items
  endpoint:
    path: /api/1/items
    method: GET
    data_selector: result.items
- name: errors
  endpoint:
    path: /api/1/errors
    method: GET
    data_selector: result.errors
- name: error
  endpoint:
    path: /api/1/errors
    method: GET
    data_selector: data.errors
- name: proguard
  endpoint:
    path: /api/1/proguard
    method: POST
    data_selector: data
    params: {}
- name: deployment
  endpoint:
    path: /deploys
    method: GET
    data_selector: deployments
- name: proguard
  endpoint:
    path: /api/1/proguard
    method: POST
    data_selector: response
    params:
      version: 0.0.10
- name: items
  endpoint:
    path: /api/1/items/
    method: GET
    data_selector: data.items
    params: {}
- name: occurrences
  endpoint:
    path: /api/1/occurrences/
    method: GET
    data_selector: data.occurrences
    params: {}
- name: error_monitoring
  endpoint:
    path: /api/1/item
    method: POST
    data_selector: data
- name: logs
  endpoint:
    path: /api/1/logs
    method: POST
    data_selector: data
    params: {}
- name: rollbar
  endpoint:
    path: /api/1/item/
    method: POST
- name: log_items
  endpoint:
    path: /api/1/item/
    method: POST
    data_selector: data
    params: {}
- name: reactive_streams
  endpoint:
    path: /reactive-streams
    method: POST
    data_selector: data
    params: {}
- name: logs
  endpoint:
    path: /api/1/item
    method: POST
    data_selector: result
    params: {}
- name: report
  endpoint:
    path: /item/
    method: POST
    data_selector: data
    params: {}
- name: deployments
  endpoint:
    path: /api/1/deploy
    method: POST
    data_selector: result
    params: {}
- name: errors
  endpoint:
    path: /api/1/errors
    method: GET
    data_selector: result
    params: {}
- name: logging
  endpoint:
    path: /logging
    method: POST
- name: error
  endpoint:
    path: /api/1/errors/
    method: GET
    data_selector: data
- name: telemetry
  endpoint:
    path: /telemetry
    method: POST
    data_selector: data
    params: {}
- name: monitor_event
  endpoint:
    path: /api/monitor_event
    method: POST
    data_selector: data
    params: {}
- name: deployments
  endpoint:
    path: /deployments
    method: GET
    data_selector: deployments
- name: project
  endpoint:
    path: /api/1/projects
    method: GET
    data_selector: projects
    params: {}
- name: log_data
  endpoint:
    path: /api/1/item/
    method: POST
    data_selector: data
    params: {}
- name: deployments
  endpoint:
    path: /deployments
    method: POST
    data_selector: deployments
- name: deploys
  endpoint:
    path: /api/1/deploy
    method: POST
    data_selector: result
    params: {}
- name: items
  endpoint:
    path: /api/1/items
    method: GET
    data_selector: items
    params: {}
- name: error
  endpoint:
    path: /item/
    method: POST
    data_selector: data
- name: rollbar_logs
  endpoint:
    path: /api/1/item/
    method: POST
    data_selector: data
    params: {}
- name: Releases
  endpoint:
    path: /docs/versions
    method: GET
    data_selector: releases
- name: LTS Releases
  endpoint:
    path: /docs/lts-releases
    method: GET
    data_selector: lts_releases
- name: errors
  endpoint:
    path: /api/1/errors
    method: POST
    data_selector: data
    params: {}
- name: notifications
  endpoint:
    path: /api/notifications
    method: GET
    data_selector: records
- name: error_items
  endpoint:
    path: /api/1/items
    method: GET
    data_selector: items
- name: error
  endpoint:
    path: /api/1/item/
    method: POST
    data_selector: data
    params: {}
- name: RollbarConfig
  endpoint:
    path: /config
    method: GET
    data_selector: rollbar
- name: error_items
  endpoint:
    path: /api/1/errors/
    method: GET
    data_selector: data.items
    params: {}
- name: access_tokens
  endpoint:
    path: /api/1/access_tokens
    method: GET
    data_selector: access_tokens
    params: {}
- name: projects
  endpoint:
    path: /api/1/projects
    method: GET
    data_selector: projects
    params: {}
- name: internal_event
  endpoint:
    path: /api/1/item/
    method: POST
    data_selector: data
    params: {}
- name: errors
  endpoint:
    path: /api/1/errors
    method: GET
    data_selector: result.errors
    params: {}
- name: deployments
  endpoint:
    path: /deployments
    method: GET
    data_selector: deployments
- name: items
  endpoint:
    path: /api/items
    method: GET
    data_selector: records
- name: error
  endpoint:
    path: /api/1/item/
    method: POST
    data_selector: data
    params: {}
- name: deployment
  endpoint:
    path: /api/1/deploy/
    method: POST
    data_selector: data
    params: {}
- name: items
  endpoint:
    path: /api/1/items
    method: GET
    data_selector: data.result
    params: {}
- name: rollbar_logs
  endpoint:
    path: /api/1/item/
    method: POST
    data_selector: data
    params: {}
- name: events
  endpoint:
    path: /api/1/item/
    method: POST
    data_selector: data
- name: error
  endpoint:
    path: /item
    method: POST
    data_selector: data
    params: {}
- name: deploy
  endpoint:
    path: /deploy
    method: POST
    data_selector: data
    params: {}
- name: error_logs
  endpoint:
    path: /api/1/item/
    method: POST
    data_selector: data
    params: {}
- name: rollbar_notifications
  endpoint:
    path: /api/1/item/
    method: POST
    data_selector: data
    params: {}
- name: items
  endpoint:
    path: /items
    method: GET
    data_selector: records
- name: errors
  endpoint:
    path: /errors
    method: GET
    data_selector: records
- name: events
  endpoint:
    path: /api/1/items/
    method: POST
    data_selector: data
    params: {}
- name: notifications
  endpoint:
    path: /api/1/notifications
    method: GET
    data_selector: notifications
    params: {}
- name: error
  endpoint:
    path: /api/1/item/
    method: POST
    data_selector: data
    params: {}
- name: error
  endpoint:
    path: /api/1/item/
    method: POST
    data_selector: result
    params: {}
- name: error
  endpoint:
    path: /api/1/item/
    method: POST
    data_selector: data
    params: {}
- name: error_items
  endpoint:
    path: /api/1/items
    method: GET
    data_selector: data.items
    params: {}
- name: notifications
  endpoint:
    path: /api/notifications
    method: GET
    data_selector: records
- name: issues
  endpoint:
    path: /api/issues
    method: GET
    data_selector: records
- name: error_logging
  endpoint:
    path: /api/1/item
    method: POST
    data_selector: data
    params: {}
- name: error
  endpoint:
    path: /item/
    method: POST
    data_selector: data
    params: {}
- name: notification
  endpoint:
    path: /notification/
    method: POST
    data_selector: data
    params: {}
- name: items
  endpoint:
    path: /item/
    method: GET
    data_selector: data.items
- name: errors
  endpoint:
    path: /error/
    method: GET
    data_selector: data.errors
- name: logs
  endpoint:
    path: /api/1/logs
    method: POST
    data_selector: data
    params: {}
- name: items
  endpoint:
    path: /api/1/items
    method: GET
    data_selector: data
    params: {}
- name: rollbar_data
  endpoint:
    path: /api/1/item/
    method: POST
    data_selector: data
- name: rollbar
  endpoint:
    path: /api/1/item/
    method: POST
    data_selector: data
- name: items
  endpoint:
    path: /api/1/items
    method: GET
    data_selector: items
- name: rollbar_plugin
  endpoint:
    path: /plugins/rollbar
    method: GET
    data_selector: plugin_data
    params: {}
- name: error
  endpoint:
    path: /api/1/item/
    method: POST
    data_selector: data
    params: {}
- name: item
  endpoint:
    path: /api/1/item
    method: GET
    data_selector: data
    params: {}
- name: event
  endpoint:
    path: /api/1/event
    method: GET
    data_selector: data
    params: {}
- name: error_items
  endpoint:
    path: /item/
    method: GET
    data_selector: items
    params: {}
- name: rollbar
  endpoint:
    path: /api/1/
    method: POST
    data_selector: data
    params: {}
- name: rollbar_event
  endpoint:
    path: /api/1/item/
    method: POST
    data_selector: data
    params: {}
- name: events
  endpoint:
    path: /api/1/projects
    method: GET
    data_selector: data
    params: {}
- name: items
  endpoint:
    path: /items
    method: GET
    data_selector: data.items
- name: error_reports
  endpoint:
    path: /api/1/report
    method: POST
    data_selector: data
    params: {}
- name: error
  endpoint:
    path: /api/1/item
    method: POST
    data_selector: data
    params: {}
- name: error
  endpoint:
    path: /api/1/item
    method: POST
    data_selector: data
    params: {}
- name: errors
  endpoint:
    path: /api/1/errors
    method: GET
    data_selector: result.errors
    params: {}
- name: errors
  endpoint:
    path: /api/1/errors
    method: GET
    data_selector: data
- name: log
  endpoint:
    path: /api/1/item/
    method: POST
    data_selector: result
- name: deploy
  endpoint:
    path: /api/1/deploy
    method: POST
    data_selector: result
    params: {}
- name: error
  endpoint:
    path: /api/1/item
    method: POST
    data_selector: result
    params: {}
- name: item
  endpoint:
    path: /api/1/item
    method: GET
    data_selector: data.items
- name: logs
  endpoint:
    path: /api/1/logs
    method: GET
    data_selector: data
    params: {}
- name: notifications
  endpoint:
    path: /api/notifications
    method: GET
    data_selector: records
- name: errors
  endpoint:
    path: /api/errors
    method: GET
    data_selector: records
- name: notifications
  endpoint:
    path: /api/1/notifications
    method: GET
    data_selector: notifications
- name: error_logging
  endpoint:
    path: /api/1/item
    method: POST
- name: events
  endpoint:
    path: /api/1/events
    method: POST
    data_selector: data
    params: {}
- name: error
  endpoint:
    path: /api/1/item/
    method: POST
    data_selector: data
- name: item
  endpoint:
    path: /api/1/item
    method: GET
    data_selector: data
    params: {}
- name: item
  endpoint:
    path: /api/1/item
    method: GET
    data_selector: data
    params: {}
- name: rollbar
  endpoint:
    path: /rollbar
    method: POST
    data_selector: records
    params: {}
- name: rollbar
  endpoint:
    path: /api/1/item/
    method: POST
    data_selector: data
    params: {}
- name: items
  endpoint:
    path: /api/1/items
    method: GET
    data_selector: data.items
- name: rollbar
  endpoint:
    path: /settings/project-access-tokens
    method: GET
    data_selector: tokens
    params: {}
- name: item
  endpoint:
    path: /api/1/item/
    method: POST
    data_selector: data
    params: {}
- name: sourcemap
  endpoint:
    path: /api/1/sourcemap
    method: POST
    data_selector: data
    params: {}
- name: access_token
  endpoint:
    path: /api/1/item/
    method: POST
    data_selector: data
    params: {}
- name: error_items
  endpoint:
    path: /api/1/items/
    method: GET
    data_selector: result.data
    params: {}
- name: error_reporting
  endpoint:
    path: /api/1/item/
    method: POST
    data_selector: data
    params: {}
- name: error_item
  endpoint:
    path: /api/1/item
    method: GET
    data_selector: records
- name: error
  endpoint:
    path: /api/1/errors
    method: POST
    data_selector: data
- name: post_error
  endpoint:
    path: /api/1/item/
    method: POST
    data_selector: data
- name: error
  endpoint:
    path: /api/1/item/
    method: POST
    data_selector: data
    params: {}
- name: items
  endpoint:
    path: /api/1/items
    method: GET
    data_selector: data
    params: {}
- name: error_reports
  endpoint:
    path: /api/1/report/
    method: POST
    data_selector: data
    params: {}
- name: error
  endpoint:
    path: /api/1/item
    method: POST
    data_selector: data
    params: {}
- name: log_items
  endpoint:
    path: /api/1/item
    method: POST
    data_selector: data
    params: {}
- name: items
  endpoint:
    path: /api/1/items
    method: GET
    data_selector: data
    params: {}
- name: rollbar_configuration
  endpoint:
    path: /rollbar/configuration
    method: POST
    data_selector: configuration
    params: {}
- name: notifications
  endpoint:
    path: /api/1/notifications
    method: GET
    data_selector: data
    params: {}
- name: items
  endpoint:
    path: /api/1/items/
    method: GET
    data_selector: items
    params: {}
- name: items
  endpoint:
    path: /api/1/items
    method: GET
    data_selector: result.items
    params: {}
- name: projects
  endpoint:
    path: /api/1/projects
    method: GET
    data_selector: result.projects
    params: {}
- name: error
  endpoint:
    path: /api/1/errors
    method: GET
    data_selector: result.errors
    params: {}
- name: deployment
  endpoint:
    path: /api/1/deploy
    method: POST
    data_selector: result
    params: {}
- name: items
  endpoint:
    path: /api/1/items
    method: GET
    data_selector: items
- name: errors
  endpoint:
    path: /api/1/errors
    method: GET
    data_selector: errors
- name: items
  endpoint:
    path: /api/1/items/
    method: GET
    data_selector: result.items
    params: {}
- name: errors
  endpoint:
    path: /api/1/errors/
    method: GET
    data_selector: result.errors
    params: {}
- name: rollbar_client
  endpoint:
    path: /api/1/sourcemap
    method: POST
    data_selector: payload
- name: item
  endpoint:
    path: /api/1/item/
    method: POST
    data_selector: data
    params: {}
- name: sourcemap
  endpoint:
    path: /api/1/sourcemap
    method: POST
    data_selector: data
    params: {}
- name: errors
  endpoint:
    path: /api/1/errors
    method: GET
    data_selector: result.errors
- name: deploys
  endpoint:
    path: /api/1/deploys
    method: GET
    data_selector: result.deploys
- name: item
  endpoint:
    path: /api/1/item/
    method: GET
    data_selector: data.items
    params: {}
- name: delayed_job
  endpoint:
    path: /api/1/delayed_job
    method: POST
    data_selector: data
    params: {}
- name: items
  endpoint:
    path: /api/1/items
    method: GET
    data_selector: result
    params: {}
- name: error
  endpoint:
    path: /api/1/errors
    method: GET
    data_selector: data
    params: {}
- name: error
  endpoint:
    path: /api/1/errors
    method: GET
    data_selector: data.errors
    params: {}
- name: error
  endpoint:
    path: /api/1/error
    method: POST
    data_selector: data
    params: {}
- name: error_items
  endpoint:
    path: /api/1/item/
    method: GET
    data_selector: items
    params: {}
- name: error
  endpoint:
    path: /api/1/errors
    method: GET
    data_selector: errors
    params: {}
- name: error
  endpoint:
    path: /api/1/item/
    method: POST
    data_selector: data
    params: {}
- name: errors
  endpoint:
    path: /api/1/errors
    method: GET
    data_selector: result.errors
- name: items
  endpoint:
    path: /api/1/items
    method: GET
    data_selector: result.items
- name: notifications
  endpoint:
    path: /api/1/notifications
    method: GET
    data_selector: records
    params: {}
- name: errors
  endpoint:
    path: /api/1/item/
    method: POST
    data_selector: data
- name: items
  endpoint:
    path: /api/1/items
    method: POST
    data_selector: data
- name: logs
  endpoint:
    path: /api/1/logs
    method: POST
    data_selector: data
- name: logback
  endpoint:
    path: /docs/logback
    method: GET
    data_selector: records
    params: {}
- name: logs
  endpoint:
    path: /api/1/logs
    method: POST
    data_selector: data
    params: {}
- name: items
  endpoint:
    path: /api/1/items
    method: GET
    data_selector: items
- name: issues
  endpoint:
    path: /api/1/issues/
    method: GET
    data_selector: data
    params: {}
- name: items
  endpoint:
    path: /api/1/items
    method: GET
    data_selector: data.items
- name: events
  endpoint:
    path: /events
    method: POST
    data_selector: data
    params: {}
- name: items
  endpoint:
    path: /api/1/items/
    method: GET
    data_selector: result.items
- name: errors
  endpoint:
    path: /api/1/errors
    method: GET
    data_selector: data
    params: {}
- name: errors
  endpoint:
    path: /api/1/errors
    method: GET
    data_selector: data
    params: {}
- name: issues
  endpoint:
    path: /api/1/issues
    method: GET
    data_selector: data
    params: {}
- name: deploys
  endpoint:
    path: /api/1/deploys
    method: GET
    data_selector: data
    params: {}
- name: delayed_job
  endpoint:
    path: /delayed_job
    method: POST
    data_selector: records
    params: {}
- name: sidekiq_jobs
  endpoint:
    path: /config/initializers/rollbar.rb
    method: POST
    data_selector: config
    params: {}
- name: rollbar
  endpoint:
    path: /api/rollbar
    method: POST
    data_selector: data
    params: {}
- name: configuration
  endpoint:
    path: /docs/gem-configuration-reference
    method: GET
    data_selector: configurations
    params: {}
- name: items
  endpoint:
    path: /api/1/items/
    method: GET
    data_selector: data
    params: {}
- name: errors
  endpoint:
    path: /api/1/errors
    method: GET
    data_selector: data.errors
    params: {}
- name: deploys
  endpoint:
    path: /api/1/deploys
    method: GET
    data_selector: data.deploys
    params: {}
- name: error
  endpoint:
    path: /api/1/errors
    method: GET
    data_selector: result.errors
    params: {}
- name: notifications
  endpoint:
    path: /notifications
    method: GET
    data_selector: records
- name: errors
  endpoint:
    path: /errors
    method: GET
    data_selector: records
- name: issues
  endpoint:
    path: /api/1/issues
    method: GET
    data_selector: result
    params: {}
- name: deploys
  endpoint:
    path: /api/1/deploys
    method: GET
    data_selector: result
    params: {}
- name: items
  endpoint:
    path: /api/1/item/
    method: GET
    data_selector: result
    params: {}
- name: rollbar_errors
  endpoint:
    path: /api/rollbar/errors
    method: POST
    data_selector: data
- name: issues
  endpoint:
    path: /api/1/issues/
    method: GET
    data_selector: data
    params: {}
- name: rollbar-logback
  endpoint:
    path: /docs/java
    method: GET
    data_selector: examples
- name: items
  endpoint:
    path: /api/1/items
    method: GET
    data_selector: records
    params: {}
- name: items
  endpoint:
    path: /api/1/items
    method: GET
    data_selector: data.items
    params: {}
- name: log4j2
  endpoint:
    path: /log4j2
    method: POST
    data_selector: logs
    params: {}
- name: error
  endpoint:
    path: /item/
    method: POST
    data_selector: result
    params: {}
- name: items
  endpoint:
    path: /api/1/items
    method: GET
    data_selector: result.items
- name: notifications
  endpoint:
    path: /api/1/notifications
    method: GET
    data_selector: result.notifications
- name: rollbar
  endpoint:
    path: /rollbar
    method: POST
- name: items
  endpoint:
    path: /api/1/items
    method: GET
    data_selector: result.items
- name: rollbar
  endpoint:
    path: /api/1/item/
    method: POST
    data_selector: data
- name: errors
  endpoint:
    path: /api/1/errors
    method: GET
    data_selector: data
    params: {}
- name: deploys
  endpoint:
    path: /api/1/deploys
    method: GET
    data_selector: data
    params: {}
- name: items
  endpoint:
    path: /api/1/items
    method: GET
    data_selector: data.items
- name: occurrences
  endpoint:
    path: /api/1/occurrences
    method: GET
    data_selector: data.occurrences
- name: Rollbar
  endpoint:
    path: /api/rollbar
    method: POST
- name: item
  endpoint:
    path: /api/1/items
    method: GET
    data_selector: items
- name: issues
  endpoint:
    path: /api/1/issues
    method: GET
    data_selector: result
    params: {}
- name: deploys
  endpoint:
    path: /api/1/deploys
    method: GET
    data_selector: result
    params: {}
- name: error
  endpoint:
    path: /api/1/item/
    method: POST
    data_selector: result
    params: {}
- name: deploy
  endpoint:
    path: /api/1/deploy/
    method: POST
    data_selector: result
    params: {}
- name: item
  endpoint:
    path: /item/
    method: GET
    data_selector: data.items
    params: {}
- name: project
  endpoint:
    path: /project/
    method: GET
    data_selector: data.projects
    params: {}
- name: errors
  endpoint:
    path: /api/1/errors
    method: GET
    data_selector: data.errors
    params: {}
- name: deploys
  endpoint:
    path: /api/1/deploys
    method: GET
    data_selector: data.deploys
    params: {}
- name: errors
  endpoint:
    path: /errors
    method: GET
    data_selector: data
    params: {}
- name: projects
  endpoint:
    path: /projects
    method: GET
    data_selector: data
    params: {}
- name: permissions
  endpoint:
    path: /permissions
    method: GET
- name: content_security_policy
  endpoint:
    path: /content_security_policy
    method: GET
- name: content_scripts
  endpoint:
    path: /content_scripts
    method: GET
- name: items
  endpoint:
    path: /api/1/items/
    method: GET
    data_selector: result.data
- name: errors
  endpoint:
    path: /api/1/errors
    method: GET
    data_selector: data
    params: {}
- name: rollbar_lambda
  endpoint:
    path: /rollbar-lambda
    method: POST
    data_selector: result
    params: {}
- name: items
  endpoint:
    path: /api/1/items
    method: GET
    data_selector: result.items
- name: notifications
  endpoint:
    path: /api/notifications
    method: GET
    data_selector: records
    params: {}
- name: log
  endpoint:
    path: /api/1/item/
    method: POST
    data_selector: data
    params: {}
- name: items
  endpoint:
    path: /api/1/items
    method: GET
    data_selector: data.items
- name: error
  endpoint:
    path: /api/1/errors
    method: GET
    data_selector: data
    params: {}
- name: items
  endpoint:
    path: /api/1/items/
    method: GET
    data_selector: data.items
    params: {}
- name: errors
  endpoint:
    path: /api/1/errors/
    method: GET
    data_selector: data.errors
    params: {}
- name: errors
  endpoint:
    path: /api/1/errors
    method: GET
    data_selector: data
    params: {}
- name: exception_reporting
  endpoint:
    path: /api/1/item/
    method: POST
    data_selector: data
- name: error_item
  endpoint:
    path: /api/item
    method: GET
    data_selector: data.items
    params: {}
- name: Rollbar Token Configuration
  endpoint:
    path: /packaging/installPackage.apexp?p0=04t3h000004bh06AAA
    method: GET
    data_selector: records
- name: rollbar
  endpoint:
    path: /app/etc/env.php
    method: POST
    data_selector: rollbar.access_token
    params: {}
- name: error_item
  endpoint:
    path: /item
    method: GET
    data_selector: data.items
    params: {}
- name: issues
  endpoint:
    path: /api/1/issues
    method: GET
    data_selector: data
    params: {}
- name: events
  endpoint:
    path: /api/1/events
    method: GET
    data_selector: data
    params: {}
- name: items
  endpoint:
    path: /api/1/items
    method: GET
    data_selector: data.items
- name: projects
  endpoint:
    path: /api/1/projects
    method: GET
    data_selector: data.projects
- name: error
  endpoint:
    path: /api/1/errors
    method: GET
    data_selector: result
    params: {}
- name: notifications
  endpoint:
    path: /api/1/notifications
    method: GET
    data_selector: data
    params: {}
- name: items
  endpoint:
    path: /api/1/items
    method: GET
    data_selector: result
    params: {}
- name: rollbar_error
  endpoint:
    path: /api/1/item/
    method: POST
    data_selector: data
- name: fluttersymbols
  endpoint:
    path: /api/1/fluttersymbols
    method: POST
    data_selector: result
- name: errors
  endpoint:
    path: /api/1/errors
    method: GET
    data_selector: result.errors
    params: {}
- name: Cordova
  endpoint:
    path: /docs/cordova
    method: GET
- name: items
  endpoint:
    path: /api/items
    method: GET
    data_selector: items
- name: errors
  endpoint:
    path: /api/errors
    method: GET
    data_selector: errors
- name: logs
  endpoint:
    path: /api/1/logs
    method: POST
    data_selector: data
    params: {}
- name: errors
  endpoint:
    path: /api/1/errors
    method: GET
    data_selector: data
    params: {}
- name: deploys
  endpoint:
    path: /api/1/deploys
    method: GET
    data_selector: data
    params: {}
- name: messages
  endpoint:
    path: /messages
    method: POST
    data_selector: message
- name: domains
  endpoint:
    path: /domains
    method: GET
    data_selector: items
- name: Mailgun Events
  endpoint:
    path: /callback/mailgun/ACCESS_TOKEN
    method: POST
    data_selector: ''
    params:
      environment: production
      level: warning
- name: rollbar_lambda
  endpoint:
    path: /api/1/item/
    method: POST
    data_selector: data
    params: {}
- name: error
  endpoint:
    path: /api/1/errors
    method: GET
    data_selector: data
    params: {}
- name: items
  endpoint:
    path: /api/1/item
    method: GET
    data_selector: data.items
    params: {}
- name: items
  endpoint:
    path: /api/1/items
    method: GET
    data_selector: data
    params: {}
- name: users
  endpoint:
    path: /api/1/users
    method: GET
    data_selector: data
    params: {}
- name: teams
  endpoint:
    path: /api/1/teams
    method: GET
    data_selector: data
    params: {}
- name: items
  endpoint:
    path: /api/1/items
    method: POST
    data_selector: data
    params: {}
- name: items
  endpoint:
    path: /api/1/items
    method: GET
    data_selector: result
    params: {}
- name: errors
  endpoint:
    path: /api/1/errors
    method: GET
    data_selector: result
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: error_items
  endpoint:
    path: /api/1/items
    method: GET
    data_selector: items
- name: Rollbar
  endpoint:
    path: /packaging/installPackage.apexp
    method: GET
- name: error
  endpoint:
    path: /api/1/errors/
    method: POST
    data_selector: data
- name: session_replay
  endpoint:
    path: /api/1/session/
    method: POST
    data_selector: data
- name: session_replay
  endpoint:
    path: /api/1/session/
    method: POST
    data_selector: session
- name: rollbar_events
  endpoint:
    path: /api/1/errors
    method: GET
    data_selector: data
- name: items
  endpoint:
    path: /api/1/items
    method: GET
    data_selector: result
    params: {}
- name: sdk_configurations
  endpoint:
    path: /docs/sdk-configurations
    method: GET
- name: items
  endpoint:
    path: /api/1/item/
    method: GET
    data_selector: data
- name: error_items
  endpoint:
    path: /api/1/items
    method: GET
    data_selector: data
    params: {}
- name: Project Configurations
  endpoint:
    path: /reference/create-a-project
    method: GET
    data_selector: records
    params: {}
- name: error
  endpoint:
    path: /api/1/errors
    method: GET
    data_selector: errors
- name: occurrences
  endpoint:
    path: /api/1/occurrences
    method: GET
    data_selector: data
    params: {}
- name: logs
  endpoint:
    path: /api/1/logs
    method: POST
    data_selector: data
    params: {}
- name: Mailgun Events
  endpoint:
    path: /callback/mailgun/ACCESS_TOKEN
    method: POST
    data_selector: events
    params:
      environment: production
      level: warning
- name: items
  endpoint:
    path: /api/1/items
    method: GET
    data_selector: data.items
- name: Custom Fingerprinting Rules
  endpoint:
    path: /api/1/custom_fingerprinting_rules
    method: GET
    data_selector: records
- name: custom_fingerprinting_rules
  endpoint:
    path: /docs/custom-fingerprinting
    method: GET
    data_selector: rules
    params: {}
- name: errors
  endpoint:
    path: /api/1/errors/
    method: GET
    data_selector: data
- name: items
  endpoint:
    path: /api/1/items/
    method: GET
    data_selector: result.items
    params: {}
- name: items
  endpoint:
    path: /api/1/items/
    method: GET
    data_selector: data
    params: {}
- name: Error Simulator
  endpoint:
    path: /api/simulator
    method: POST
    data_selector: errors
- name: rollbar_items
  endpoint:
    path: /api/1/items
    method: GET
    data_selector: result.items
- name: item
  endpoint:
    path: /items
    method: GET
    data_selector: items
- name: item_levels
  endpoint:
    path: /item_levels
    method: GET
    data_selector: levels
    params: {}
- name: log
  endpoint:
    path: /api/1/item/
    method: POST
    data_selector: data
- name: items
  endpoint:
    path: /api/1/items
    method: GET
    data_selector: items
    params: {}
- name: projects
  endpoint:
    path: /api/1/projects
    method: GET
    data_selector: projects
    params: {}
- name: user_settings
  endpoint:
    path: /settings/profile/
    method: GET
- name: authentication_options
  endpoint:
    path: /settings/authentication/
    method: GET
- name: email_settings
  endpoint:
    path: /settings/email/
    method: GET
- name: connected_accounts
  endpoint:
    path: /settings/integrations/
    method: GET
- name: item
  endpoint:
    path: /api/1/items/
    method: GET
    data_selector: items
- name: items
  endpoint:
    path: /items
    method: GET
    data_selector: items
- name: item
  endpoint:
    path: /api/1/item/
    method: GET
    data_selector: data
- name: project
  endpoint:
    path: /api/1/projects/
    method: GET
    data_selector: data
- name: errors
  endpoint:
    path: /api/1/errors
    method: GET
    data_selector: result.errors
    params: {}
- name: session_replay
  endpoint:
    path: /api/1/session/
    method: POST
    data_selector: payload
- name: items
  endpoint:
    path: /api/1/items/
    method: GET
    data_selector: data
    params: {}
- name: session_replay
  endpoint:
    path: /api/1/session/
    method: POST
    data_selector: data
    params: {}
- name: items
  endpoint:
    path: /api/items
    method: GET
    data_selector: items
- name: items
  endpoint:
    path: /api/1/items
    method: GET
    data_selector: result.items
    params: {}
- name: occurrences
  endpoint:
    path: /api/1/rollbar/occurrences
    method: GET
    data_selector: data
    params: {}
- name: error_item
  endpoint:
    path: /api/1/item
    method: GET
    data_selector: data
- name: log
  endpoint:
    path: /api/1/log
    method: POST
    data_selector: data
    params: {}
- name: items
  endpoint:
    path: /api/1/items
    method: GET
    data_selector: data
- name: errors
  endpoint:
    path: /api/1/errors
    method: GET
    data_selector: data
- name: occurrence
  endpoint:
    path: /api/1/occurrences
    method: GET
    data_selector: data.result
    params: {}
- name: occurrences
  endpoint:
    path: /api/1/rollbar/occurrences
    method: GET
    data_selector: data
    params: {}
- name: errors
  endpoint:
    path: /api/1/errors
    method: GET
    data_selector: data
    params: {}
- name: projects
  endpoint:
    path: /api/1/projects
    method: GET
    data_selector: data
    params: {}
- name: occurrences
  endpoint:
    path: /api/1/occurrences
    method: GET
    data_selector: data
    params: {}
- name: occurrences
  endpoint:
    path: /api/1/rollbar/occurrences
    method: GET
    data_selector: data
    params: {}
- name: custom_fingerprinting_rules
  endpoint:
    path: /docs/custom-fingerprinting
    method: GET
    data_selector: rules
    params: {}
- name: saved_views
  endpoint:
    path: /api/saved_views
    method: GET
    data_selector: data
    params: {}
- name: error
  endpoint:
    path: /api/1/errors
    method: GET
    data_selector: result.errors
    params: {}
- name: items
  endpoint:
    path: /api/1/items
    method: GET
    data_selector: data
    params: {}
- name: items
  endpoint:
    path: /api/1/items
    method: GET
    data_selector: data.items
- name: item_status
  endpoint:
    path: /api/1/items/status
    method: GET
    data_selector: data
    params: {}
- name: items
  endpoint:
    path: /api/1/items
    method: GET
    data_selector: result
    params: {}
- name: items
  endpoint:
    path: /api/1/items
    method: GET
    data_selector: result.items
- name: occurrences
  endpoint:
    path: /api/1/occurrences
    method: GET
    data_selector: result.occurrences
- name: items
  endpoint:
    path: /api/1/items
    method: GET
    data_selector: data.items
- name: items
  endpoint:
    path: /api/1/items
    method: GET
    data_selector: data.items
- name: projects
  endpoint:
    path: /api/1/projects
    method: GET
    data_selector: data.projects
- name: errors
  endpoint:
    path: /api/1/errors
    method: GET
    data_selector: data.items
    params: {}
- name: deploys
  endpoint:
    path: /api/1/deploy/
    method: POST
    data_selector: result
    params: {}
- name: items
  endpoint:
    path: /api/1/item/
    method: GET
    data_selector: result
    params: {}
- name: ip_history
  endpoint:
    path: /api/ip_history
    method: GET
    data_selector: data
    params: {}
- name: ip_history
  endpoint:
    path: /api/ip/history
    method: GET
- name: items
  endpoint:
    path: /items
    method: GET
    data_selector: records
- name: items
  endpoint:
    path: /api/1/items
    method: GET
    data_selector: items
    params: {}
- name: items
  endpoint:
    path: /api/items
    method: GET
    data_selector: records
- name: errors
  endpoint:
    path: /api/errors
    method: GET
    data_selector: records
- name: issues
  endpoint:
    path: /api/1/issues
    method: GET
    data_selector: result
- name: projects
  endpoint:
    path: /api/1/projects
    method: GET
    data_selector: result
- name: items
  endpoint:
    path: /api/1/items
    method: GET
    data_selector: result
    params: {}
- name: occurrences
  endpoint:
    path: /api/1/rollbar
    method: GET
    data_selector: result
    params: {}
- name: items
  endpoint:
    path: /api/1/items
    method: GET
    data_selector: data.items
- name: summary_default_fields
  endpoint:
    path: /summarization/default
    method: GET
    data_selector: fields
- name: custom_summarization
  endpoint:
    path: /summarization/custom
    method: GET
    data_selector: custom_fields
- name: items
  endpoint:
    path: /api/1/items
    method: GET
    data_selector: result
    params: {}
- name: notifications
  endpoint:
    path: /api/1/notifications
    method: GET
    data_selector: data
    params: {}
notes:
- Requires setup of connected app in Rollbar
- Uses OAuth2 with refresh token — requires setup of connected app in Rollbar
- Access tokens used for Metrics API calls should be named in way that makes it clear
  that they are being used for Metrics API calls
- Access tokens that access the Metrics API require Read scope
- Some objects may return nulls in deeply nested fields
- Make error tracking and deployment quality a part of every project with our REST
  API.
- Uses OAuth2 with refresh token — requires setup of connected app in api
- Make error tracking and deployment quality a part of every project with our REST
  API
- Rollbar supports over a dozen platforms
- Max payload size is 1024kb (kilobytes).
- Updated 5 days ago
- '`itemid` must be an item ID for an item in the project.'
- Updated about 2 years ago
- Currently supports setting the status, level, title, assigned user
- Snoozing / unsnoozing an item only available for paid accounts
- This API requires setup of authentication to access resources.
- Returns all occurrences in the project, in pages of 20.
- API requires setup of connected app in Rollbar
- Returns all occurrences of an item, in pages of 20. Order is descending by occurrence
  ID.
- Defaults to page 1
- Updated 7 months ago
- Use a Project Access Token with 'read' scope
- Response includes last occurrence id and timestamp.
- Metrics rows contain field names and calculated values.
- Uses POST method to retrieve metrics for occurrences
- Use a Project Access Token with 'post_server_item' scope
- '`deploy_id` must be an ID for a deploy in the project.'
- The deployment status can be 'started', 'succeeded', 'failed', or 'timed_out'.
- deploy_id must be an ID for a deploy in the project
- New status of build can only be changed if the current status of the build is 'started'.
- Returns all deploys in the project, most recent first, in pages of 20.
- Status of the deployment - `started`, `succeeded` *(default)*, `failed`, or `timed_out`.
- dSYM bundles must be zipped prior to upload.
- The URL for this request expired after 30 days.
- If you use a project access token, all rql jobs for that project will be returned.
- If you use an account access token, all rql jobs for the account will be returned.
- Use either an Account Access Token with 'read' scope or a Project Access Token with
  the 'read' scope
- Uses OAuth2 for authentication.
- Defaults to enabled
- Use an Account Access Token with 'write' scope
- To update the rate limit, include either the legacy access token or the secure public
  ID in the token_identifier field of the URL.
- If set to '0', then no rate limit is applied.
- Use an Account Access Token with 'read' scope
- Rollbar API v1
- If the email address belongs to an existing Rollbar user, they will be immediately
  added to the team.
- Returns all invites ever sent for the team–pending, accepted, rejected, and canceled.
- Uses OAuth2 for authentication
- Use a Project Access Token with 'write' scope
- Some endpoints may require specific permissions to access.
- Rate limits apply for API requests.
- Changes to rate limits (including adding, modifying, or removing a rate limit) take
  effect immediately.
- For best results, put custom data in `request`, `server`, `client`, `person`, or
  `custom`.
- For best results, put custom data in request, server, client, person, or custom.
- Returns all environments in the project, in pages of 20.
- By default, the sort of the top items is by the level of severity, then the number
  of occurrences.
- To sort by occurrences only and not by item level, add sort=occurrences in the query
  parameters.
- standard is the only access level you can choose in the UI.
- light and view are API-only team access levels.
- Results are returned in sets of 5000. Access more results by specifying page=2,
  etc.
- 200 Success
- Uses API key for authentication
- Requires a project access token with read scope.
- We have our customer engineering team ready to assist you.
- Requires setup of an API key in Rollbar account.
- Notifications are project-level configuration.
- Notifications can be triggered only in specific conditions using filters.
- Deploy tracking is enabled by config changes made outside of Rollbar; you will need
  to send API calls from your CICD tool to the Rollbar API to notify the platform
  of your deploy actions. They will not be detected automatically.
- If a deploy is reported with status=started, the deploy must be updated to have
  status of succeeded, failed, or timed_out within a certain time period (default
  is 60 minutes), otherwise the system will set the status to timed_out.
- Intelligent alerting helps you stay on top of critical errors and reduce noise in
  your notification channels
- Rollbar Compliant SaaS solution meets HIPAA and ISO 27001 compliance.
- Notifications are a project-level configuration.
- Rate limits may apply to API calls.
- Uses OAuth2 with refresh token — requires setup of connected app in Rollbar.
- Telemetry allows you to view a 'breadcrumb' of events leading up to an exception.
- Rollbar Compliant SaaS allows customers to store their sensitive data and rely on
  Rollbar to perform all of the underlying security and safeguards needed.
- Data Encryption for Rollbar Compliant SaaS accounts, all raw data is encrypted at
  rest with a different encryption key per account.
- Abuse or excessively frequent requests to Rollbar via the API may result in the
  temporary or permanent suspension of your Account's access to the API.
- You may terminate your access to the Services at any time pursuant to Section 9(c)
  (*Your Termination*) below.
- Your subscription to the Services will automatically renew for successive terms
  equal in length to the initial term.
- Authentication is done via access token included as the header 'X-Rollbar-Access-Token'.
- Parameter-based authentication is deprecated.
- Integration requires setting up OAuth2 credentials in Rollbar.
- OAuth2 setup is required to access the API.
- Rollbar is compliant with GDPR.
- Uses OAuth2 with refresh token
- Some objects like Contact may return nulls in deeply nested fields
- The Rollbar Apple SDK can be obtained through various package managers.
- Always initialize the Rollbar Apple SDK as soon as possible in your application
  lifecycle.
- Your subscription to the Services are non-cancellable and, non-refundable.
- 'Upon termination of this Agreement: (i) all rights and licenses granted will terminate
  immediately; (ii) any and all payment obligations, if any, will be due.'
- Using Rollbar API requires setup of OAuth2.
- Uses OAuth2 — requires setup of connected app in Rollbar
- Legacy iOS SDK (Deprecated)
- Make error tracking and deployment quality a part of every project.
- This SDK is deprecated, users are encouraged to migrate to the new Rollbar-Apple
  SDK.
- 'Default: true'
- 'Default: false'
- 'Rollbar SDK for client-side Javascript | Support Level: Supported'
- Always initialize the Rollbar Apple SDK as soon as possible in your application
  lifecycle!
- Once you've confirmed that a test message was sent to your Rollbar project, remove
  the call to Rollbar.infoMessage.
- Telemetry must be enabled as well as its capture of the log entries.
- Requires setup of access tokens in Rollbar interface
- The current telemetry hooks are global for the Node.js process and the telemetry
  history is global. During concurrent execution, telemetry events will be interleaved
  in a single event history.
- Rate limits apply to API calls.
- Recommended to upgrade from the Legacy SDK to the new Rollbar-Apple SDK.
- Requires an active Rollbar account and a post_server_item access token from a new
  project.
- Default transmit is true.
- Default logPayload is false.
- Requires setup of Rollbar client with access token
- OAuth2 implementation requires a connected app setup.
- If you minify your JavaScript in production, you'll want to configure source maps
  so you get meaningful stack traces.
- Use the access token for authentication when sending data to Rollbar.
- Some endpoints may have rate limits
- Be cautious of data retention policies
- Replace POST_CLIENT_ITEM_ACCESS_TOKEN with your project's post_client_item access
  token.
- Requires post_server_item access token from a new project.
- Setting the captureUncaught option to true will result in reporting all uncaught
  exceptions to Rollbar by default.
- Uses Rollbar API to log errors and telemetry.
- Requires OAuth2 setup for access tokens
- Some users have reported issues with Rollbar while using browsers with adblockers.
- OAuth2 requires setup of connected app in Rollbar
- By default Next.js will automatically catch errors when running the dev server.
- The ErrorBoundary class is not perfect at catching and stopping the propagation
  of all errors.
- Rollbar Provider component must wrap the app
- Adblockers may interfere with Rollbar functionality.
- Rate Limits may apply.
- Requires setup of API keys in Rollbar account
- Rate limits apply based on account type
- Uses access token for authentication
- Uses OAuth2 with refresh token — requires setup of connected app in API
- Requires setup of Rollbar account and access token.
- 'Rollbar SDK for Angular 2+ | Support Level: Supported'
- Only send a max of 5 items to Rollbar per minute
- Only send a maximum of 10 items to Rollbar per page load
- By default Next.js will automatically catch errors when running the dev server.
  To properly test Rollbar you will need to do build and run the server directly
- The ErrorBoundary class is not perfect at catching and stopping the propagation
  of all errors, particularly async errors. Be aware, that if you turn on `captureUncaught`
  or `captureUnhandledRejections` in your Rollbar config you may receive doubled occurrences.
- 'Default: `true` for `captureLambdaTimouts`'
- 'Default: `false` for `captureUncaught` and `captureUnhandledRejections`'
- 'Default: `true` for `ignoreDuplicateErrors`'
- 'Default: `true` for `scrubRequestBody`'
- 'Default: `true` for `transmit`'
- Rollbar configuration in the build/deployment process
- OAuth2 requires setup of a connected app in Rollbar.
- Uses API key for access — requires setup of access tokens in Rollbar
- For GDPR compliance, consider anonymizing IP addresses.
- Rollbar provides a way to upload mapping.txt for deobfuscation.
- Rate limits apply to API calls
- The latest version is always available on Maven Central.
- Make sure to keep the access token secure.
- Telemetry includes breadcrumbs for understanding client-side problems.
- Rollbar can be configured at global and notifier levels.
- 'Default scrubbed fields for servers: ["pw", "pass", "passwd", "password", "password_confirmation",
  "passwordConfirmation", "confirm_password", "confirmPassword", "secret", "secret_token",
  "secretToken", "secret_key", "secretKey", "api_key", "access_token", "accessToken",
  "authenticity_token", "oauth_token", "token", "user_session_secret", "request.session.csrf",
  "request.session._csrf", "request.params._csrf", "request.cookie", "request.cookies"]'
- Rollbar API requires OAuth2 authentication for accessing error data.
- Client-side support added for Blazor.
- OAuth2 is required for API access.
- Max file size for upload is 440 MB.
- If you run into any issues, please email us at support@rollbar.com.
- The maximum file size for uploaded mapping.txt is 440 MB.
- The Notifier persists the payloads locally in case the Internet connectivity is
  not available or the Rollbar API server is not reachable.
- Ensure to keep the access token secure.
- Rate limits apply; ensure to handle error responses accordingly.
- All uncaught errors throw by servlets will be logged to Rollbar.
- Upgrade paths across incompatible version changes
- Requires setup of access token for integration
- Integrating Rollbar with Reactive Streams
- Access token is required for API access.
- Using Rollbar requires setup of a connected app.
- Some API responses may contain null values in certain fields
- Uses asynchronous logging for better performance
- Blocking log methods throw System.TimeoutException on timeout
- Monitor internal events can be configured through RollbarLocator
- The RollbarDeploysManager does not have a default parameterless constructor.
- Requires valid Rollbar write and/or read access tokens.
- API may have rate limits on the number of requests.
- The Rollbar Deploys API requires valid Rollbar write and/or read access tokens.
- Ensure to use the correct access token for authentication
- Integrating with ASP.NET Core 2 and Newer
- Configure Rollbar singleton-like notifier
- Add Rollbar middleware to the application pipeline
- Developing software at scale requires a certain level of stability and predictability.
- Each LTS release is supported for 18 months from initial release or at least six
  months after the release of a new LTS version.
- Requires setup of access token in application configuration
- Some responses may contain nested fields
- Uses OAuth2 with refresh token.
- Integrating with Windows Forms based Applications
- Requires valid access token for API access
- Ensure proper environment setup for testing
- Rollbar as a tool for DevOps Teams
- Integrating with WPF based Applications
- Telemetry functionality can be configured either in code or via an application configuration
  file.
- API requires an access token for authentication.
- Uses API key for authentication — requires setup of Rollbar account
- Rate limits apply to API requests.
- Rollbar Deployment API implements deployment tracking as a REST-based service.
- Integrating as a TraceListener
- Rollbar requires an access token for authentication.
- Error reporting may require additional fields depending on the use case.
- Ensure OAuth2 setup is complete for authentication.
- Requires a valid access token for authentication
- Uses API key for authentication — requires setup of access token.
- Integrating with Xamarin Forms Application
- Uses access token for authentication.
- Rollbar API has rate limits.
- Integrating with ASP.NET Web Forms based Applications
- Uses API key for authentication — requires setup of access token in Rollbar
- Integrating with Xamarin
- Assuming the provider was properly configured and a Rollbar Project with the specified
  Access Token was established on Rollbar.com.
- Integrating with Blazor Server application
- Requires setup of Rollbar account and access tokens
- Integrating with ASP.NET MVC
- Uses Access Token for authentication
- Requires setup of access token for API access
- Integration requires setup of Rollbar account and access tokens.
- The Rollbar API is secured via SSL, make sure to include the appropriate CA files
  to support the cURL commands used in the PHP library.
- Rollbar API requires an access token for authentication.
- Replace POST_SERVER_ITEM_ACCESS_TOKEN with your project's post_server_item access
  token
- Ensure to use the correct access token for authentication.
- The API has rate limits that should be adhered to avoid throttling.
- X-Rollbar-Access-Token must be included in all requests for authentication.
- Telemetry is enabled by default.
- You can disable telemetry by setting the telemetry configuration option to false.
- Requires setup of Rollbar project and access token.
- Rollbar provides automatic detection of access_token and root config variables.
- Ensure the specified Access Token is correct and the Items page has proper view
  filters configured.
- Set ROLLBAR_TOKEN in .env for basic configuration.
- This plugin integrates Rollbar into your WordPress installation.
- 'Warning: This installation method might not be suitable for complex WordPress projects.'
- Rollbar provides a JavaScript SDK for error tracking.
- Some API endpoints may have specific rate limits.
- Requires setup of Rollbar access token.
- Data scrubbing options can be configured.
- Some responses may contain null values in nested fields
- Rate limits apply to API usage.
- Requires setup of an OAuth application in Rollbar
- The Rollbar API is secured via SSL, make sure to include the appropriate CA files
  to support the cURL commands.
- Payload handlers must be added after Rollbar.init()
- To use pyrollbar with Celery in a Django app, please see blog post by Matt Layman
  which explains how to configure everything in detail.
- Uses OAuth2 authentication
- Be sure to replace POST_SERVER_ITEM_ACCESS_TOKEN with your project's post_server_item
  access token
- Requires HTTPX package to be installed
- If you would like to use this feature in Python 3.6, you must to install the aiocontextvars
  package. For later versions of Python (3.7+), this package is not necessary.
- You can disable it by setting the telemetry configuration option to false.
- Requires setup of OAuth2 application for authentication
- The access_token and root config variables will be automatically detected
- Requires setup of Rollbar in your application
- Be sure to replace POST_SERVER_ITEM_ACCESS_TOKEN with your project's post_server_item
  access token, which you can find in the Rollbar.com interface.
- This package supports configuration through the services configuration file located
  in `config/logging.php`.
- For bug reports, please open an issue on GitHub
- Rate limits apply to all requests made to the Rollbar API.
- Default endpoint is https://api.rollbar.com/api/1/
- The environment will be taken from WP_ENV environment variable if it's set otherwise
  it's blank.
- Installation method might not be suitable for complex WordPress projects.
- Mapping production React Native JavaScript code to your source files is slightly
  more complicated than traditional JavaScript environments.
- Generating source maps for React Native is an under-documented part of the pipeline.
- This SDK relies on the deprecated Rollbar-ios SDK.
- Limited support for React and web-only targets.
- Access token must be included in the configuration object.
- Uses access_token for authentication
- Default timeout for requests is 3 seconds
- If you are using jRuby with Oracle and JDK7, you may be expecting some errors sending
  reports to our API. This is caused by a bug in that JDK and the primer number used
  in the SSL algorithm.
- Custom senders that don't require an access token must update the payload with the
  access token before sending it to Rollbar.
- Some fields may return nulls based on specific error conditions
- If you are required to comply with GDPR or HIPAA, we recommend setting up person
  tracking, customizing your data retention period, anonymizing or not capturing IP
  addresses, and scrubbing sensitive data before sending Rollbar items.
- For HIPAA compliance, we additionally recommend transforming the payload before
  sending Rollbar items, as sometimes sensitive data may be found in stack traces.
- Ensure to include the appropriate access token in the header for authentication.
- Payload handlers must be added after `Rollbar.init()`
- Scrub out the 'X-Access-Token' http header.
- Scrub out the 'X-Access-Token' http header
- Payload handlers must be added after Rollbar.init() as init() will reset the list
  of handlers.
- Uses custom data method to include additional runtime data in error reports
- By default we use OpenSSL::SSL::VERIFY_PEER for SSL very mode.
- If your application is deployed behind a proxy server, you can set the https_proxy
  environment variable.
- Ensure to provide a valid access token for authentication.
- Be sure to replace `POST_SERVER_ITEM_ACCESS_TOKEN` with your project's `post_server_item`
  access token, which you can find in the Rollbar.com interface.
- If you're on Heroku, you can store the access token in your Heroku config.
- Any changes to nested settings, like the locals dictionary, will need to be handled
  in code.
- OAuth2 authentication is required for API access.
- If handler is agent, the path to the log file must end in .rollbar
- Rate limits apply to all API calls.
- Some endpoints may require additional setup.
- Platform version must be at least 14.
- Crashes in native code will be reported automatically on the next app launch.
- The access_token is being populated in the SDK to be passed to the rollbar-agent.
- Legacy SDK
- The Configuration class is still a work in progress.
- The access token is now included in the configuration object.
- Only versions >= 3.0 of delayed_job are supported.
- Requires setup of Rollbar application for OAuth
- Some API responses may contain nested structures
- For current versions of Sidekiq, async_json_payload must be set in the Rollbar config.
- Start the redis server.
- Uses OAuth2 with refresh token — requires setup of connected app in rollbar
- If config.use_async = true explicitly sets the function used to send asynchronous
  payloads to Rollbar.
- 'Should be an object that responds to #call.'
- Rate limits apply to API requests
- Requires setup of access tokens in Rollbar.
- Error data may sometimes include null values.
- Rollbar will send information about the current user along with each error report.
- If the custom data method crashes while reporting an error, Rollbar will report
  that new error.
- To disable exception reporting for a single block, use Rollbar.silenced.
- Uses access token for authentication - set in environment variable ROLLBAR_ACCESSTOKEN
- Ensure to use the access token for authentication.
- Due to the issue LOG4J2-954, with log4j2, when building a fat-jar, it seems that
  some .dat files are not concatenated.
- Some users have reported problems with Zeus when `rake` was not explicitly included
  in their Gemfile.
- The uncaughtException event does not work in the Lambda environment.
- If you want to set callbackWaitsForEmptyEventLoop to false, our handler will still
  work to report items to Rollbar.
- Requires API key for accessing the endpoints.
- Some API responses may contain nested data structures.
- Uses Rollbar gem with Sidekiq
- Start the redis server with 'redis-server'
- Start Sidekiq with 'bundle exec sidekiq -q rollbar'
- The payload.platform key allows using the Rollbar client token instead of the server
  token.
- Set the access token, branch, code version, and project gems
- Requires setup of Rollbar account and access token
- Requires setup of OAuth2 application in Rollbar.
- Firefox requires setting captureUncaught false in the content script, because it
  doesn't allow Rollbar.js to wrap window.onerror.
- Firefox requires setting autoInstrument.network false in the content script, because
  it doesn't allow Rollbar.js to wrap window.fetch.
- Ensure the API key has the required scopes for accessing issues and deploys.
- Requires setup of Rollbar access token in environment variable ROLLBAR_ACCESSTOKEN
- For further examples and information on using rollbar-logback, check out the example
  app here.
- Some endpoints may have rate limits.
- Due to the issue LOG4J2-954, when building a fat-jar, it seems that some .dat files
  are not concatenated.
- Rollbar provides error tracking services.
- Rollbar provides various SDKs for integration with different programming languages
  and frameworks.
- Rollbar PHP SDK can be used with Zend Framework 3 with little effort.
- If you set callbackWaitsForEmptyEventLoop to false, reports will still be sent to
  Rollbar.
- This plugin integrates Rollbar into your Symfony installation.
- 'Support Level: Not Supported'
- API calls are subject to rate limits
- Ensure correct OAuth scopes are set for the application
- Some responses may include rate limits or require pagination
- Requires a valid access token to authenticate API requests.
- Rollbar API requires OAuth2 for authentication.
- Please make sure to install twisted and treq first.
- Requires API key for access
- This feature requires the HTTPX package to be installed.
- Firefox has slightly different manifest.json requirements.
- The example uses the Firefox compatible content security policy.
- Ensure to configure OAuth2 correctly for accessing Rollbar API.
- In order to ensure that the Rollbar library works correctly, meaning that items
  are transmitted to the Rollbar API, one must not return from the main handler function
  before all of this work completes.
- Include rollbar-gem as a bundler dependency in your deployed application.
- Rate limits are enforced by the API.
- For more information on rollbar-gem, please see the docs
- Some features may require additional setup.
- Some API responses may contain pagination information
- Requires setup of OAuth2 credentials in Rollbar
- Rate limits apply to API usage
- There is a known conflict between Sinatra and other gems where Sinatra's top-level-binded
  methods get overridden by other gems.
- For more information on rollbar-php, please see the docs.
- Error monitoring for your Salesforce organizations and apps
- The module should automatically report all PHP errors and exceptions in your Magento2
  app.
- If you wish to log `E_NOTICE` errors make sure to pass `'included_errno' => E_ALL`
  to `Rollbar::init`.
- Rate Limits apply to API calls
- If duplicate exceptions occur in Apex code that runs synchronously or asynchronously,
  subsequent exception emails are suppressed and only the first email is sent.
- This email suppression prevents flooding of the developer’s inbox with emails about
  the same error.
- For Flow and Process errors, it appears that all errors are reported whether duplicate
  or not.
- Some endpoints may return nulls in deeply nested fields
- Requires setup of Rollbar API credentials.
- Rollbar SDK for Flutter is not actively supported as of April 2024.
- 'Rollbar SDK for Cordova | Support Level: Not Supported'
- As of April 2024, Rollbar will not be actively updating this repository and plans
  to archive it.
- Rate limits are enforced per project.
- Ensure proper scopes are set for OAuth tokens.
- Uses OAuth2 with refresh token — requires setup of a connected app in Rollbar
- Log ingestion requires proper API key setup.
- OAuth2 authentication is required for accessing the API.
- API requires API key for authentication.
- Replace ACCESS_TOKEN with a post_server_item access token for the project where
  events should be sent.
- The environment param is required. Events will be reported into this environment
  in Rollbar.
- The level param is optional and defaults to warning.
- Make sure to include rollbar-gem as a dependency in your application.
- You are unable to set custom SQS name to use.
- This is an experimental feature and still in development.
- It might take up to a minute until your request appears in your Item List
- Rollbar API requires OAuth2 authentication with a connected app.
- Rate limits apply on API calls.
- You must be a member of the Owners team for an account to create projects within
  it.
- Rollbar requires the environment property on all errors to indicate where they occurred
  (production, staging, qa, etc.).
- Items are separated by environment. Items cannot be merged if they are in different
  environments.
- Rate limits apply.
- Check API version compatibility.
- Rollbar has terms for talking about the errors, exceptions, crashes, and messages
  you send us.
- Rate Limits are applied to API calls.
- Report uncaught exceptions that occur in Apex code.
- Report errors in Flow and Process execution.
- Allows setting the environment string sent to Rollbar with each report.
- Rollbar needs read access to your repository for Git integration.
- Earlier versions only allow synchronous callouts.
- User Settings page allows management of account settings and connections to other
  accounts.
- Each account includes 1,000 free replays every month.
- Rollbar automatically reports uncaught Apex exceptions and Flow and Process errors
  when these options are enabled in the configuration.
- Salesforce does not send exception emails for errors that appear to be duplicates
  of errors seen previously.
- Session Replay helps developers see exactly what led to an error.
- Always test your selectors in your app to ensure the correct elements are masked,
  blocked, or ignored in Rollbar session replay.
- Use selectors for dynamic or third-party content where you can't easily add classes.
- Combine class and selector options for maximum flexibility.
- Ensure connected app is set up in Rollbar for OAuth2.
- The minimum configuration required for the Rollbar agent is the access token.
- Users can be members of multiple teams simultaneously.
- It is best for each person to have their own Rollbar user account rather than any
  type of shared service account.
- Rollbar SDK for Flutter is not actively supported as of April 2024
- Projects that have been configured and properly setup can be used as a template
  when creating new Projects within Rollbar.
- Specific configuration might be required for email validation endpoints
- Webhook URL must replace ACCESS_TOKEN with a post_server_item access token.
- Requires setup of OAuth application in Rollbar
- API uses OAuth2 for authentication.
- API rate limits may apply
- Rollbar provides detailed error reporting and logging capabilities.
- Users must be invited to Rollbar accounts to join them.
- You can safelist specific email domains to allow users with verified email addresses
  to automatically join your account.
- 'In Rollbar, all Items have a status that determines where they appear and how they
  behave. There are four statuses: Active, Resolved, Muted, and Archived.'
- Rollbar API requires authentication
- Items can change states via the Rollbar UI or API.
- Items are separated by environment
- Items cannot be merged if they are in different environments
- Snooze is available for all paid tiers - Essentials, Advanced & Enterprise
- New items default to the ERROR level
- Only the first occurrence of an item will have its item level checked from the event
  payload
- Rollbar relies on retrieving data from your Git repository in order to show context
  around each stack frame.
- Requires setup of OAuth application in Rollbar.
- Requires setup of application in Rollbar
- API rate limits apply
- Each account includes 1,000 free replays every month
- Automatically Resolving Items
- Items are checked for inactivity approximately every 30 minutes, and whenever you
  update your settings.
- Rollbar is designed to be developer friendly and delivers on this through customizable
  SDKs for all of our supported languages.
- Minimum configuration required for the Rollbar agent is the access token.
- The default search type is a prefix search.
- Wildcards searches using the LIKE syntax require the '%' or '_' character.
- Creating one team for each Rollbar project is the best way to create data access
  boundaries.
- Some responses may return nulls in deeply nested fields
- Project access tokens have built-in rate limiting; the rate limit is editable for
  each token.
- Requires setup of OAuth2 for API access.
- Item deletion not currently supported
- Rollbar continuously improves the default grouping engine and automatically uses
  the most advanced version for projects created as of July 29, 2020.
- Rules are applied in order, testing the condition against the incoming occurrence.
- Saved Views are available as part of the Advanced and Enterprise tier packages.
- Some API responses may include nested objects
- In Rollbar, all Items have a status that determines where they appear and how they
  behave.
- Items can change states between Active, Resolved, Muted, and Archived
- New items default to the ERROR level, and all occurrences of a given item will have
  the same level.
- Only the first occurrence of an item will have its item level checked from the event
  payload.
- Default search type is a prefix search.
- Requires setup of API keys in the Rollbar account.
- Item summarization enhances the Item Detail page with summary data that helps users
  understand the data within the occurrences that make up an item.
- Custom data included within occurrences is also summarized.
errors:
- 'REQUEST_LIMIT_EXCEEDED: Throttle API calls or reduce frequency'
- '401 Unauthorized: Recheck OAuth scopes or token expiration'
- 'QUERY_TIMEOUT: Break down filters or add selectivity'
- '400: Bad request'
- '403: Access denied'
- '404: Not found'
- '413: Request entity too large'
- '422: Unprocessable Entity'
- '429: Too Many Requests'
- '400 Bad Request: Check the request parameters and format'
- '400: Bad request - A 400 error code means the request was malformed and could not
  be parsed.'
- '403: Access denied - A 403 error code means the access token was missing, invalid,
  or does not have the necessary permissions.'
- '404: Not found - A 404 error code means the requested resource was not found.'
- '429: Too Many Requests - If rate limiting is enabled for your access token, a 429
  error code signifies that the rate limit has been reached.'
- '413: Request entity too large - A 413 error code means the request exceeded the
  maximum size of 128KB.'
- '422: Unprocessable Entity - A 422 error code means the request was parseable but
  some parameters were missing or otherwise invalid.'
- '429: Too Many Requests - A 429 error code signifies that the rate limit has been
  reached.'
- '400: request entity too large'
- '400: Bad Request'
- 400 The format of the UUID is invalid.
- 404 No occurrence matching the given UUID was found.
- 1 indicates there was an error
- request entity too large
- '401 Unauthorized: Use a Project Access Token with ''read'' scope'
- '400 Bad Request: Check if the body parameters are correct'
- '401 Unauthorized: Use a valid Project Access Token with ''write'' scope'
- '301 Moved Permanently: Redirect response indicating the item''s new location.'
- '400 Bad Request: Check the request format'
- '404 Not Found: Occurrence not found or deletion has completed'
- '401 Unauthorized: Check API token'
- 'URL Expired: The URL for this request expired after 30 days.'
- 409 Invalid data sent
- '200: Success'
- 200 Success
- '401 Unauthorized: Use a valid Project Access Token with ''read'' scope'
- URL Expired
- 'Invalid environment: Check the environment parameter'
- 'Invalid sort value: The only accepted value for sort is ''occurrences'''
- '401 Unauthorized: Recheck API access token.'
- 200 success
- '401 Unauthorized: Recheck token or permissions'
- 200 User is on team
- '400 Bad Request: Ensure email is provided and valid.'
- '401 Unauthorized: Check if the Access Token is correct or has the required scope.'
- '200: Person deleted'
- '401 Unauthorized: Use an Account Access Token with ''write'' scope'
- 'Unauthorized: Use a Project Access Token with ''read'' scope'
- '200 Success: The request was successful.'
- '429 Too Many Requests: Throttle API calls or reduce frequency.'
- '429 Too Many Requests: If your access token has a rate limit and has reached it'
- '1: request entity too large'
- '401 Unauthorized: Recheck access token or permissions'
- '400 Bad Request: Check request data for correctness.'
- '401 Unauthorized: Verify API key and permissions.'
- '403 Forbidden: Ensure access rights for the requested resource.'
- '401 Unauthorized: Recheck access token or its scope'
- 'INVALID_ACCESS_TOKEN: Ensure valid access token is provided.'
- 'NOT_FOUND: The requested resource could not be found.'
- '200: Operation was completed successfully'
- 'Deploy timeout: If a deploy is reported with status=started, the deploy must be
  updated to have status of succeeded, failed, or timed_out within a certain time
  period (default is 60 minutes), otherwise the system will set the status to timed_out.'
- 'REQUEST_LIMIT_EXCEEDED: Throttle API calls or reduce frequency.'
- '401 Unauthorized: Recheck OAuth scopes or token expiration.'
- '400 Bad Request: Check the request parameters'
- '401 Unauthorized: Recheck OAuth credentials'
- '429 Too Many Requests: Throttle API calls'
- '400 Bad Request: Check your request parameters.'
- '401 Unauthorized: Verify your authentication credentials.'
- '404 Not Found: Confirm the endpoint exists.'
- 'Unauthorized: Recheck OAuth scopes or token expiration'
- '422: Unprocessable Entity - A 422 error code means the request was parseable, but
  some parameters were missing or invalid.'
- 'INVALID_ACCESS_TOKEN: Check if the access token is correct.'
- 'NOT_FOUND: The requested resource was not found.'
- '400 Bad Request: Check if the request parameters are correct.'
- '401 Unauthorized: Verify the access token.'
- '404 Not Found: Ensure the endpoint is correct.'
- 'INVALID_ACCESS_TOKEN: Ensure the access token is correct and has the necessary
  permissions.'
- '401 Unauthorized: Recheck access token'
- '401 Unauthorized: Check the access token.'
- 'INVALID_ACCESS_TOKEN: Ensure the access token is valid.'
- 'RATE_LIMIT_EXCEEDED: Reduce the frequency of API calls.'
- '404 Not Found: Verify the endpoint path'
- 'INVALID_ACCESS_TOKEN: Check your access token'
- 'RATE_LIMIT_EXCEEDED: Reduce the frequency of requests'
- '404 Not Found: Check the endpoint URL'
- '422 Unprocessable Entity: Check your request payload format.'
- '400 Bad Request: Check the payload format and required fields.'
- '401 Unauthorized: Verify that your access token is valid.'
- '401 Unauthorized: Invalid or missing access token.'
- '400 Bad Request: Check the request body for errors.'
- '400 Bad Request: Check request parameters'
- '401 Unauthorized: Verify client credentials'
- '429 Too Many Requests: Rate limit exceeded'
- Loading failed for the module with source
- Loading failed for the module with source.
- '401 Unauthorized: Check your API key'
- '401 Unauthorized: Verify access token'
- '404 Not Found: Ensure the endpoint exists'
- '401 Unauthorized: Check your access token.'
- 'Unauthorized: Check your API token.'
- 'Rate limit exceeded: Reduce request frequency.'
- '401 Unauthorized: Recheck API key or token expiration'
- '400 Bad Request: Check the request payload for errors'
- '401 Unauthorized: Invalid access token provided'
- 'ANR_DETECTED: Application Not Responding detected'
- 'INITIALIZATION_FAILED: Rollbar failed to initialize'
- 'QUERY_TIMEOUT: Break down filters or add selectivity.'
- '401 Unauthorized: Check client_id and client_secret.'
- '403 Forbidden: Insufficient permissions for the requested action.'
- '401 Unauthorized: Recheck access token.'
- '401 Unauthorized: Check your access token or OAuth configuration.'
- '429 Too Many Requests: Rate limit exceeded; back off and retry.'
- '400 Bad Request: Check your request parameters'
- '401 Unauthorized: Verify your access token'
- '404 Not Found: Ensure the endpoint is correct'
- '400 Bad Request: Invalid request parameters.'
- '401 Unauthorized: Invalid access token.'
- '429 Too Many Requests: Rate limit exceeded.'
- 'RATE_LIMIT_EXCEEDED: Reduce frequency of API calls'
- 'INVALID_ACCESS_TOKEN: Check the provided access token'
- 'InternalError: Basic internal error encountered'
- '401 Unauthorized: Recheck access tokens'
- '400: Bad Request - Check the request parameters.'
- '401: Unauthorized - Check your API token.'
- '429: Too Many Requests - Rate limit exceeded.'
- 'RATE_LIMIT_EXCEEDED: Throttle API calls or reduce frequency'
- 'INVALID_ACCESS_TOKEN: Recheck OAuth scopes or token expiration'
- '400 Bad Request: Check if the request body matches the expected format'
- '401 Unauthorized: Invalid access token'
- '404 Not Found: Check the endpoint path'
- '401 Unauthorized: Check your access token'
- '401 Unauthorized: Recheck API key or permissions'
- '400 Bad Request: Check request format and parameters'
- 'INVALID_ACCESS_TOKEN: Ensure your access token is correct.'
- 'UNAUTHORIZED: Check your token permissions.'
- 'INVALID_ACCESS_TOKEN: Check provided access token'
- 'ITEM_NOT_FOUND: Verify the item ID'
- 'SERVER_ERROR: Retry the request or check service status'
- '400 Bad Request: Check request parameters.'
- '401 Unauthorized: Verify credentials and scopes.'
- '404 Not Found: Endpoint does not exist'
- '500 Internal Server Error: Something went wrong on the server'
- '401 Unauthorized: Recheck API key or token.'
- 'ITEM_NOT_FOUND: Check the item ID.'
- 'RATE_LIMIT_EXCEEDED: Reduce the frequency of requests.'
- '403 Forbidden: Check your access token permissions'
- '400 Bad Request: Ensure the payload structure is correct'
- '400 Bad Request: Validate your request payload'
- '400 Bad Request: Check your payload structure'
- '429 Too Many Requests: Throttle your requests or check your rate limits'
- '401 Unauthorized: Check API access token'
- 'INVALID_ACCESS_TOKEN: Check the access token used'
- 'NOT_FOUND: Ensure the endpoint is correct'
- '400 BAD REQUEST: Check your request parameters are correct.'
- '401 Unauthorized: Verify your access token.'
- '404 Not Found: The requested resource does not exist.'
- 'ITEM_NOT_FOUND: Ensure the item ID exists.'
- '400 Bad Request: Check the request payload for errors.'
- '404 Not Found: The requested resource could not be found'
- 'NOT_FOUND: The requested resource does not exist.'
- '400 Bad Request: Check your request data and format.'
- '401 Unauthorized: Recheck Access Token'
- 'Invalid access token: Ensure the token is correct and has permissions.'
- '400 Bad Request: Check payload format and required fields.'
- '400 Bad Request: Check the request parameters.'
- '401 Unauthorized: Verify access token.'
- '401 Unauthorized: Check your credentials or token expiration.'
- '429 Too Many Requests: Rate limit exceeded. Reduce the frequency of your requests.'
- '401 Unauthorized: Check access token and permissions'
- 'INVALID_ACCESS_TOKEN: Check your access token or refresh token'
- 'RATE_LIMIT_EXCEEDED: Reduce the frequency of your requests'
- '422 Unprocessable Entity: Check the request payload for errors.'
- '401 Unauthorized: Ensure the access token is valid.'
- '403 Forbidden: Check your access token or permissions'
- logging with Rollbar failed
- '404 Not Found: Verify endpoint URL'
- '500 Internal Server Error: Try again later'
- 'INVALID_TOKEN: Ensure that the access token is correct.'
- '429 Too Many Requests: You have hit the rate limit.'
- 'Invalid access token: Check your access token.'
- 'Network error: Ensure you have network connectivity.'
- '401 Unauthorized: Check your token.'
- '400 Bad Request: Check the request payload format'
- '400 Bad Request: Check your request format and required fields.'
- '401 Unauthorized: Ensure that the access token is valid.'
- '500 Internal Server Error: Contact support if the issue persists.'
- If you just want to disable exception reporting for a single block, use Rollbar.silenced
- 'INVALID_ACCESS_TOKEN: Check the provided access token.'
- 'RATE_LIMIT_EXCEEDED: Reduce the frequency of error reports.'
- Known Issues with jRuby and Oracle JDK7 may cause errors sending reports.
- '400 Bad Request: Check the request payload for correctness.'
- '404 Not Found: Ensure the endpoint path is correct.'
- 'Rollbar error during boot: Check configuration in `config/rollbar.rb`'
- '404 Not Found: The requested resource could not be found.'
- '401 Unauthorized: Check if the token is valid or has the right scopes.'
- 'INVALID_ACCESS_TOKEN: Recheck OAuth token validity'
- 'Invalid access token: Check your POST_CLIENT_ITEM_ACCESS_TOKEN.'
- 'Network error: Ensure your device is connected to the internet.'
- '401 Unauthorized: Check the provided credentials'
- '403 Forbidden: Ensure you have access to the requested resource'
- If the exception Rollbar::Ignore is raised inside any of the handlers defined for
  configuration.before_process, we'll ignore the report and not send the error data
  to Rollbar.
- '403 Forbidden: Check API key permissions.'
- '404 Not Found: Check endpoint path.'
- '500 Internal Server Error: Try again later.'
- '404 Not Found: The endpoint does not exist.'
- '404 Not Found: Verify endpoint path and resource existence'
- '429 Too Many Requests: Throttle API calls or reduce frequency'
- Check Redis server status if jobs are not processing
- '401 Unauthorized: Check your API token.'
- 'INVALID_ACCESS_TOKEN: Check the access token validity.'
- 'NOT_FOUND: Verify the endpoint path and parameters.'
- '400 Bad Request: Check the request format and required parameters.'
- '401 Unauthorized: Verify your API access token.'
- '404 Not Found: Ensure the endpoint exists.'
- '400 Bad Request: Check the request format and parameters'
- '401 Unauthorized: Ensure the API key is correct'
- '429 Too Many Requests: Rate limiting exceeded'
- If your function finishes within one second of the timeout time then the timeout
  report will be a false positive.
- 'RATE_LIMIT_EXCEEDED: Reduce the number of requests'
- 'VALIDATION_ERROR: Check the request payload for required fields'
- '401 Unauthorized: Verify the access token and permissions'
- '422 Unprocessable Entity: Validate your input data.'
- '400 Bad Request: Check the request format and parameters.'
- '401 Unauthorized: Invalid access token provided.'
- '400 Bad Request: Check the request payload.'
- '401 Unauthorized: Verify credentials.'
- '404 Not Found: Check the endpoint.'
- '401 Unauthorized: Ensure API key is valid'
- '400 Bad Request: Ensure request parameters are valid'
- '404 Not Found: Check endpoint path'
- 'Execution result: succeeded'
- '400 Bad Request: Check if the request payload is valid.'
- '401 Unauthorized: Ensure valid access token is used.'
- '429 Too Many Requests: Respect the rate limits imposed by the API.'
- '404 Not Found: Verify the endpoint URL'
- '500 Internal Server Error: Retry the request'
- 'INVALID_ACCESS_TOKEN: Check the access token provided'
- 'RATE_LIMIT_EXCEEDED: Too many requests made in a short period'
- '404 Not Found: The requested resource does not exist'
- 'ACCESS_TOKEN_INVALID: Check if the access token is correctly configured'
- 'ENVIRONMENT_NOT_FOUND: Make sure the specified environment exists'
- '401 Unauthorized: Check API key or token.'
- '500 Internal Server Error: Retry the request.'
- '500 Internal Server Error: Check your Rollbar configuration or access token.'
- '401 Unauthorized: Verify authentication credentials.'
- '403 Forbidden: Ensure permissions for the resource.'
- '403 Forbidden: Ensure you have the correct permissions.'
- '401 Unauthorized: Invalid API key.'
- '400 Bad Request: Check your request payload format.'
- '401 Unauthorized: Invalid access token or insufficient permissions.'
- '401 Unauthorized: Recheck access token or token expiration'
- '401 Unauthorized: Ensure your API token is valid.'
- '401 Unauthorized: Check OAuth scopes or token expiration'
- 'Bad Request: Verify Source Control manager credentials are correct'
- '400 Bad Request: Check request format and parameters.'
- '401 Unauthorized: Recheck OAuth credentials.'
- '400 Bad Request: Check your request payload'
- '400 Bad Request: Check your request format.'
- '401 Unauthorized: Ensure your access token is valid.'
- '401 Unauthorized: Verify OAuth token'
- '400 Bad Request: Check the request format and required fields.'
- '401 Unauthorized: Check API key and permissions.'
- '401 Unauthorized: Recheck OAuth token.'
- '401 Unauthorized: Check your access token and scopes'
- '429 Too Many Requests: Reduce the frequency of requests'
- 'INVALID_ACCESS_TOKEN: Check if the access token is correct'
- 'RATE_LIMIT_EXCEEDED: Throttle API calls'
- '401 Unauthorized: Recheck OAuth credentials or token expiration'
- '400 Bad Request: Check API request format'
- '401 Unauthorized: Check your access token and permissions.'
- '404 Not Found: Verify the endpoint path.'
- '401 Unauthorized: Confirm API key permissions.'
- '404 Not Found: Verify the endpoint.'
auth_info:
  mentioned_objects:
  - Project Access Tokens
  - Account Access Tokens
  - Project Access Token
  - OauthToken
  - AuthProvider
  - Identity Provider
  - User
  - OAuth2
  - AccessToken
  - RefreshToken
  - Access Token
  - Refresh Token
  - NamedCredential
  - OAuthToken
  - Authorization
  - RollbarConfig
  - RollbarLocator
  - Person
  - RollbarEventArgs
  - RollbarLogger
  - RollbarInfrastructureConfig
  - RollbarSamplesSettings
  - RollbarInfrastructure
  - RollbarDataSecurityOptions
  - Client
  - Configuration
  - POST_SERVER_ITEM_ACCESS_TOKEN
client:
  base_url: https://api.rollbar.com
  auth:
    type: oauth2
    flow: refresh_token
    token_url: https://api.rollbar.com/oauth/token
    client_id: '{{ dlt.secrets[''rollbar_client_id''] }}'
    client_secret: '{{ dlt.secrets[''rollbar_client_secret''] }}'
    refresh_token: '{{ dlt.secrets[''rollbar_refresh_token''] }}'
    location: header
    header_name: Authorization
  headers:
    Accept: application/json
source_metadata: null
