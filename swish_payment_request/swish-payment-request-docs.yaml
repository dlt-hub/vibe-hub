resources:
- name: payment_request
  endpoint:
    path: /swish-cpcapi/api/v2/paymentrequests/{instructionUUID}
    method: PUT
- name: retrieve_payment_request
  endpoint:
    path: /swish-cpcapi/api/v1/paymentrequests/{instructionUUID}
    method: GET
- name: cancel_payment_request
  endpoint:
    path: /swish-cpcapi/api/v1/paymentrequests/{instructionUUID}
    method: PATCH
- name: payment_request
  endpoint:
    path: /swish-cpcapi/api/v2/paymentrequests/{instructionUUID}
    method: PUT
    data_selector: none
    params: {}
- name: payment_request
  endpoint:
    path: /api/v1/paymentrequests/{id}
    method: GET
    data_selector: Payment Request object
    params: {}
- name: payment_requests
  endpoint:
    path: /api/v1/paymentrequests/{id}
    method: PATCH
    data_selector: null
    params: {}
- name: payment_request
  endpoint:
    path: /swish-cpcapi/api/v1/paymentrequests/{id}
    method: PATCH
    data_selector: Payment Request object
    params: {}
- name: payment_request
  endpoint:
    path: /api/swishcb/paymentrequests
    method: GET
    data_selector: records
    params: {}
- name: payment_request
  endpoint:
    path: /v2/paymentrequest
    method: POST
    data_selector: data
    params: {}
- name: refund_request
  endpoint:
    path: /v2/refund
    method: POST
    data_selector: data
    params: {}
- name: payment_request
  endpoint:
    path: /api/payment-request
    method: GET
- name: refunds
  endpoint:
    path: /api/refunds
    method: GET
- name: payouts
  endpoint:
    path: /api/payouts
    method: GET
- name: qr_codes
  endpoint:
    path: /api/qr-codes
    method: GET
- name: merchant_swish_simulator
  endpoint:
    path: /api/mss
    method: GET
- name: recurring_payments
  endpoint:
    path: /api/recurring-payments
    method: GET
- name: paymentrequests
  endpoint:
    path: /swish-cpcapi/api/v1/paymentrequests
    method: GET
- name: refunds
  endpoint:
    path: /swish-cpcapi/api/v1/refunds
    method: GET
- name: payouts
  endpoint:
    path: /swish-cpcapi/api/v1/payouts
    method: GET
- name: v2_paymentrequests
  endpoint:
    path: /swish-cpcapi/api/v2/paymentrequests/
    method: GET
- name: v2_refunds
  endpoint:
    path: /swish-cpcapi/api/v2/refunds/
    method: GET
- name: paymentrequests_v1
  endpoint:
    path: /swish-cpcapi/api/v1/paymentrequests
    method: GET
- name: paymentrequests_v2
  endpoint:
    path: /swish-cpcapi/api/v2/paymentrequests/
    method: GET
- name: refunds_v1
  endpoint:
    path: /swish-cpcapi/api/v1/refunds
    method: GET
- name: refunds_v2
  endpoint:
    path: /swish-cpcapi/api/v2/refunds/
    method: GET
- name: payouts_v1
  endpoint:
    path: /swish-cpcapi/api/v1/payouts
    method: GET
- name: commerce_qr
  endpoint:
    path: /qrg-swish/api/v1/commerce
    method: GET
- name: payment_request
  endpoint:
    path: /api/payment-request
    method: GET
- name: refunds
  endpoint:
    path: /api/refunds
    method: GET
- name: payouts
  endpoint:
    path: /api/payouts
    method: GET
- name: qr_codes
  endpoint:
    path: /api/qr-codes
    method: GET
- name: merchant_swish_simulator
  endpoint:
    path: /api/mss
    method: GET
- name: recurring_payments
  endpoint:
    path: /api/recurring-payments
    method: GET
- name: create_refund
  endpoint:
    path: /swish-cpcapi/api/v2/refunds/{instructionUUID}
    method: PUT
- name: retrieve_refund
  endpoint:
    path: /swish-cpcapi/api/v1/refunds{instructionUUID}
    method: GET
- name: refund
  endpoint:
    path: /api/v2/refunds/{instructionUUID}
    method: PUT
    data_selector: Refund
    params: {}
- name: refunds
  endpoint:
    path: /api/v1/refunds/{id}
    method: GET
    data_selector: ''
    params: {}
- name: refund
  endpoint:
    path: /api/v1/refunds/{id}
    method: GET
    data_selector: Refund object
    params: {}
- name: create_payout
  endpoint:
    path: /swish-cpcapi/api/v1/payouts/
    method: POST
    data_selector: payload
    params: {}
- name: retrieve_payout
  endpoint:
    path: /swish-cpcapi/api/v1/payouts/{instructionUUID}
    method: GET
    data_selector: payload
    params: {}
- name: payout
  endpoint:
    path: /api/v1/payouts/{id}
    method: GET
    data_selector: Payout Request object
    params: {}
- name: create_payout
  endpoint:
    path: /swish-cpcapi/api/v1/payouts/
    method: POST
- name: retrieve_payout
  endpoint:
    path: /swish-cpcapi/api/v1/payouts/{instructionUUID}
    method: GET
- name: commerce
  endpoint:
    path: /api/v1/commerce
    method: POST
- name: prefilled
  endpoint:
    path: /api/v1/prefilled
    method: POST
- name: payout
  endpoint:
    path: /api/v1/payouts/{id}
    method: GET
    data_selector: Payout Request object
    params: {}
- name: commerce
  endpoint:
    path: /api/v1/commerce
    method: POST
    data_selector: arraybuffer
    params: {}
- name: commerce
  endpoint:
    path: /api/v1/commerce
    method: POST
- name: prefilled
  endpoint:
    path: /api/v1/prefilled
    method: POST
- name: prefilled
  endpoint:
    path: /v1/prefilled
    method: POST
- name: commerce
  endpoint:
    path: /qrg-swish/api/v1/commerce
    method: POST
    data_selector: arraybuffer
    params: {}
- name: prefilled
  endpoint:
    path: /v1/prefilled
    method: POST
- name: payment_requests
  endpoint:
    path: /api/v1/paymentrequests
    method: POST
- name: payment_requests_uuid
  endpoint:
    path: /api/v2/paymentrequests/{uuid}
    method: PUT
- name: payment_request_id
  endpoint:
    path: /api/v1/paymentrequests/{id}
    method: GET
- name: payment_request_id_patch
  endpoint:
    path: /api/v1/paymentrequests/{id}
    method: PATCH
- name: refunds
  endpoint:
    path: /api/v1/refunds
    method: POST
- name: refunds_uuid
  endpoint:
    path: /api/v2/refunds/{uuid}
    method: PUT
- name: refund_id
  endpoint:
    path: /api/v1/refunds/{id}
    method: GET
- name: payouts
  endpoint:
    path: /api/v1/payouts
    method: POST
- name: payouts_uuid
  endpoint:
    path: /api/v1/payouts/{payoutInstructionUUID}
    method: GET
- name: payment_requests
  endpoint:
    path: /api/v1/paymentrequests
    method: POST
- name: payment_requests_uuid
  endpoint:
    path: /api/v2/paymentrequests/{uuid}
    method: PUT
- name: payment_request_id
  endpoint:
    path: /api/v1/paymentrequests/{id}
    method: GET
- name: payment_request_id_patch
  endpoint:
    path: /api/v1/paymentrequests/{id}
    method: PATCH
- name: refunds
  endpoint:
    path: /api/v1/refunds
    method: POST
- name: refunds_uuid
  endpoint:
    path: /api/v2/refunds/{uuid}
    method: PUT
- name: refund_id
  endpoint:
    path: /api/v1/refunds/{id}
    method: GET
- name: payouts
  endpoint:
    path: /api/v1/payouts
    method: POST
- name: payout_instruction_uuid
  endpoint:
    path: /api/v1/payouts/{payoutInstructionUUID}
    method: GET
- name: payment_request
  endpoint:
    path: /api/v1/paymentrequests
    method: POST
    data_selector: data
    params: {}
- name: payment_request
  endpoint:
    path: /api/v1/paymentrequests
    method: POST
    data_selector: data
    params: {}
- name: payment_requests
  endpoint:
    path: /api/v2/paymentrequests/{instructionUUID}
    method: PUT
    data_selector: null
    params: {}
- name: payment_requests
  endpoint:
    path: /api/v2/paymentrequests/{instructionUUID}
    method: PUT
    data_selector: Location
    params: {}
- name: payment_requests
  endpoint:
    path: /api/v1/paymentrequests/{id}
    method: GET
    data_selector: Payment Request
    params: {}
- name: payment_request
  endpoint:
    path: /api/v1/paymentrequests/{id}
    method: GET
    data_selector: Payment Request
- name: payment_request
  endpoint:
    path: /api/v1/paymentrequests/{id}
    method: PATCH
    data_selector: response
    params: {}
- name: payment_request
  endpoint:
    path: /api/v1/paymentrequests/{id}
    method: PATCH
    data_selector: status
    params: {}
- name: refund
  endpoint:
    path: /api/v1/refunds
    method: POST
    data_selector: result
    params: {}
- name: refund
  endpoint:
    path: /api/v1/refunds
    method: POST
    data_selector: Location
    params: {}
- name: refund
  endpoint:
    path: /api/v2/refunds/{instructionUUID}
    method: PUT
    data_selector: Location
    params: {}
- name: refund_request
  endpoint:
    path: /api/v2/refunds/{instructionUUID}
    method: PUT
    data_selector: refund_response
    params: {}
- name: refund
  endpoint:
    path: /api/v1/refunds/{id}
    method: GET
    data_selector: Refund
    params: {}
- name: refund
  endpoint:
    path: /api/v1/refunds/{id}
    method: GET
    data_selector: Refund
    params: {}
- name: create_payout_request
  endpoint:
    path: /createPayoutRequest
    method: POST
    data_selector: payload
    params: {}
- name: create_payout_request
  endpoint:
    path: /create/payout
    method: POST
    data_selector: payload
    params: {}
- name: payout
  endpoint:
    path: /api/v1/payouts/{id}
    method: GET
    data_selector: Refund object formatted as JSON
- name: create_consent_e_com
  endpoint:
    path: /recurring/merchant/v1/consents/{consentId}
    method: POST
- name: create_consent_e_com
  endpoint:
    path: /recurring/merchant/v1/consents/{consentId}
    method: POST
- name: consent
  endpoint:
    path: /recurring/merchant/v1/consents/{consentId}
    method: POST
    data_selector: payer
    params:
      consentId: string
- name: consents
  endpoint:
    path: /recurring/merchant/v1/consents/{consentId}
    method: POST
    data_selector: payer
    params:
      consentId: string
- name: consent_token
  endpoint:
    path: /recurring/merchant/v1/consents/{consentId}/token
    method: POST
- name: consent_token
  endpoint:
    path: /recurring/merchant/v1/consents/{consentId}/token
    method: POST
- name: create_consent
  endpoint:
    path: /recurring/merchant/v1/consents/{consentId}/token
    method: POST
    data_selector: ''
    params:
      consentId: required
      callbackUrl: required
- name: consent_callback
  endpoint:
    path: /recurring/merchant/v1/consent/{consentId}/callback
    method: PUT
- name: create_consent
  endpoint:
    path: /recurring/merchant/v1/consents/{consentId}/token
    method: POST
    data_selector: token
    params:
      consentId: string
- name: recurring_consent_callback
  endpoint:
    path: /recurring/merchant/v1/consent/{consentId}/callback
    method: PUT
    data_selector: token
- name: update_consent
  endpoint:
    path: /recurring/merchant/v1/consent/{consentId}/callback
    method: PUT
    data_selector: callbackUrl
    params:
      consentId: string
- name: consent
  endpoint:
    path: /recurring/merchant/v1/consents/{consentId}
    method: GET
    params:
      consentId: string
- name: consent
  endpoint:
    path: /recurring/merchant/v1/consent/{consentId}/callback
    method: PUT
    data_selector: callbackUrl
    params:
      consentId: string
- name: delete_consent
  endpoint:
    path: /recurring/merchant/v1/consents/{consentId}
    method: DELETE
    data_selector: codes
    params:
      consentId: string
- name: consent
  endpoint:
    path: /recurring/merchant/v1/consents/{consentId}
    method: GET
    params:
      consentId: string
- name: delete_consent
  endpoint:
    path: /recurring/merchant/v1/consents/{consentId}
    method: DELETE
    data_selector: codes
    params:
      consentId: string
- name: consent
  endpoint:
    path: /recurring/merchant/v1/payments/single/{paymentId}
    method: POST
    data_selector: null
    params: {}
- name: create_payment_single
  endpoint:
    path: /recurring/merchant/v1/payments/single/{paymentId}
    method: POST
    data_selector: data
    params:
      paymentId: string
- name: consent
  endpoint:
    path: /recurring/merchant/v1/payments/single/{paymentId}
    method: POST
    data_selector: null
    params: {}
- name: payment_status
  endpoint:
    path: /recurring/merchant/v1/payments/single/{paymentId}/status
    method: GET
    data_selector: status
    params:
      paymentId: string
- name: create_payment
  endpoint:
    path: /recurring/merchant/v1/payments/single/{paymentId}
    method: POST
    data_selector: null
    params:
      paymentId: stringRequired
- name: delete_payment
  endpoint:
    path: /recurring/merchant/v1/recurring/tin
    method: POST
    data_selector: TBD
- name: callback_object_payment
  endpoint:
    path: /callback
    method: GET
    data_selector: callback_payload
- name: payment_status
  endpoint:
    path: /recurring/merchant/v1/payments/single/{paymentId}/status
    method: GET
    data_selector: status
    params:
      paymentId: string
- name: availability_check
  endpoint:
    path: /recurring/merchant/v1/recurring/tin
    method: POST
- name: availability_check
  endpoint:
    path: /recurring/merchant/v1/recurring/alias
    method: POST
    data_selector: recurringIsOffered
    params: {}
- name: callback_object_payment
  endpoint:
    path: /recurring/merchant/v1/recurring/tin
    method: POST
- name: availability_check
  endpoint:
    path: /recurring/merchant/v1/recurring/tin
    method: POST
- name: availability_check
  endpoint:
    path: /recurring/merchant/v1/recurring/alias
    method: POST
    data_selector: recurringIsOffered
notes:
- The API does not require authentication.
- Payment status can be CANCELLED
- Version 1 (v1) of the payment request and refund APIs has been deprecated.
- New integrations towards them are strongly discouraged. Use v2 instead.
- The Swish server requires at least TLS 1.2 or higher
- The Merchant Swish Simulator allows for testing solutions before deploying to production.
- The MSS will only work with the test certificates, certificates created in the Swish
  Portal will be rejected in the MSS environment.
- In the production environment requests will be rejected if the alias parameter (payee/payer)
  in the request differs from the swish number in the certificate. In the MSS environment
  however, this does not matter, your request will not be rejected if the alias differs
  from the CN in the test certificate.
- Sandbox is not intended for load/performance tests
- No communication with banks, instead it uses an API stub.
- Support https but usage is not enforced as it is in production environment.
- It is recommended that v2 is implemented where applicable since the older version
  v1 will be terminated in the future.
- A great deal of technical knowledge is required to integrate Swish for Merchants.
- A partner (technical supplier) offers corporate customers the opportunity to quickly
  get started with Swish.
- Version 1 (v1) of the payment request and refund APIs has been deprecated. New integrations
  towards them are strongly discouraged. Use v2 instead.
- The URL has to use HTTPS.
- Callback URL is required for payout notification.
- Developer documentation for the App available.
- New attributes may be added in future versions of the API, but existing attributes
  will never be removed.
- There’s an Android-specific behaviour where an invalid callbackUrl navigates the
  user back to the previously used app after exiting or completing the flow to sign
  the consent.
errors:
- '400 Bad request: The Create Payment Request operation was malformed.'
- '401 Unauthorized: There are authentication problems with the certificate.'
- '403 Forbidden: The payeeAlias in the payment request object is not the same as
  merchant’s Swish number.'
- '415 Unsupported Media Type: The Content-Type header is not "application/json".'
- '422 Unprocessable Entity: There are validation errors.'
- '429 Too Many Requests: Too Many Requests.'
- '500 Internal Server Error: There was some unknown/unforeseen error that occurred
  on the server.'
- '401 Unauthorized: There are authentication problems with the certificate. Or the
  Swish number in the certificate is not enrolled.'
- '404 Not found: The Payment request was not found, or it was not created by the
  merchant.'
- '429 Too Many Requests: Too Many Requests'
- '500 Internal Server Error: There was some unknown/unforeseen error that occurred
  on the server, this should normally not happen.'
- '415 Unsupported Media Type: The MIME type in the Content-Type header is missing
  or wrong.'
- '422 Unprocessable Entity: The operation could not be performed, either because
  it is invalid or because it is in a non-cancellable state.'
- '400 Bad Request: Check request parameters'
- '401 Unauthorized: Verify client credentials'
- '403 Forbidden: Ensure permissions are granted'
- Simulating different kinds of errors via the message parameter allows you to check
  that your application can handle errors that may occur when for example the transaction
  is declined.
- '429 Too Many Requests: The various Swish API:s will respond with HTTP Status ''429
  Too Many Requests'' if the caller has been rate limited due to sending too many
  requests.'
- '400 Bad Request: The Create refund POST operation was malformed.'
- '403 Forbidden: The payerAlias in the refund object is not the same as merchant’s
  Swish number.'
- '504 Gateway Timeout: The Bank validation response took too long.'
- '404 Not found: No refund was found, or it was not created by the merchant.'
- 'ACMT03: Payer not Enrolled'
- 'ACMT07: Payee not Enrolled'
- 'ACMT17: Swish Number is invalid'
- 'AM02: Specific transaction/message amount is greater than allowed maximum'
- 'AM06: Specified transaction amount is less than agreed minimum'
- 'FF08: Payment Reference is invalid'
- 'PA01: Parameter is not correct.'
- 'PA02: Amount value is missing or not a valid number'
- 'PA06: Incorrect ssn format'
- 'RP01: Missing merchant Swish Number'
- 'RP02: Wrong formatted message'
- 'RP03: Callback URL is missing or does not use Https'
- 'RP09: The given instructionUUID is not available.'
- '400 Bad Request: Request failed for some reason, i.e. bad payoutReference. Details
  provided in the error message in the body.'
- '500 Internal Server Error: A server error has occurred. Details provided in the
  error message in the body.'
- '400 Bad Request: Request failed for some reason, i.e. bad payoutReference.'
- '500 Internal Server Error: A server error has occurred.'
- '400 Bad Request: Returned when the Prefilled request operation was malformed.'
- '415 Unsupported Media Type: Returned when Content-Type header is not "application/json".'
- '500 Internal Server Error: Returned if there was some unknown/unforeseen error
  that occurred on the server, this should normally not happen.'
- '400 Bad Request: Returned when the Create Payment Request operation was malformed.'
- '401 Unauthorized: Returned when there are authentication problems with the certificate.'
- '403 Forbidden: Returned when the payeeAlias in the payment request object is not
  the same as Merchants Swish number in the provided certificate.'
- '415 Unsupported Media Type: Returned when Content-Type header is not ''application/json''.'
- '422 Unprocessable Entity: Returned when there are validation errors.'
- '500 Internal Server Error: Returned if there was some unknown/unforeseen error
  that occurred on the server.'
- '403 Forbidden: Returned when the payeeAlias in the payment request object is not
  the same as Merchants Swish number in the provided certificate or the value is not
  a valid swish number.'
- '404 Not found: Returned when the Payment request was not found.'
- '200 OK: Returned when Payment request successfully cancelled.'
- '415 Unsupported Media Type: Returned if the Content-Type header is not ''application/json-patch+json''.'
- '422 Unprocessable entity: The cancellation could not be executed.'
- '500 Internal Server Error: Returned if there was some unknown/unforeseen error.'
- '401 Unauthorized: Returned when there are authentication problems with the certificate.
  Will return nothing else.'
- '404 Not found: Returned when the Payment request was not found. Will return nothing
  else.'
- '422 Unprocessable entity: The cancellation could not be executed. See content for
  swish error code: RP07 – payment request is not in a cancellable state, PA01 – the
  cancel request operation submitted is invalid, only [{"op": "replace", "path":"/status","value":"cancelled"}]
  is allowed.'
- '500 Internal Server Error: Returned if there was some unknown/unforeseen error
  that occurred on the server, this should normally not happen. Will return nothing
  else.'
- '201 Created: Returned when Refund was successfully created. Will return a Location
  header.'
- '400 Bad Request: Returned when Create refund POST operation was malformed.'
- '403 Forbidden: Returned when the payerAlias in the refund object is not the same
  as Merchants Swish number in the provided certificate.'
- '504 Gateway Timeout: Returned when the Bank validation answers take too long and
  Swish times out.'
- '403 Forbidden: Returned when the payerAlias in the refund object does not match
  the Merchants Swish number.'
- '404 Not found: Returned when no refund was found or it was not created by the Merchant.
  Will return nothing else.'
- '500 Internal Server Error: Returned if there was some unknown/unforeseen error
  that occurred on the server. Will return nothing else.'
- '401 Unauthorized: Returned when there are problems with the authentication certificate
  or the payout signature property.'
- '422 Unprocessable Entity: Returned when there are data validation errors, e.g.
  payerSsn validation failed.'
- '500 Internal Server Error: A server error has occurred, payout has not been initiated.'
- '200 OK: Returned when payout instruction was found, payout instruction details
  provided in the message body.'
- '4xx: Request failed for some reason, for example the payoutInstructionUUID does
  not exist.'
- 'HTTP 400 - RECURRING_NOT_OFFERED: Recurring payment is not offered by the endusers
  bank.'
- 'HTTP 400 - PAYEE_INVALID: Provided payee contains invalid information.'
- 'HTTP 400 - CONSENT_IN_PROGRESS: A consent request already exist for this enduser.'
- 'HTTP 400 - AGE_INVALID: Provided age does not meet the requirements.'
- 'HTTP 400 - TIN_MISMATCH: Provided tax identification number did not match.'
- 'HTTP 400 - DEVICE_NOT_ACTIVATED: Target device contains invalid information for
  the requested operation.'
- 'HTTP 400 - DEVICE_VERSION_INVALID: Target device have a version older version of
  the Swish app that do not support recurring payments.'
- 'HTTP 403 - FORBIDDEN: The swishnumber in the certificate do not have permission
  to perform this action.'
- 'HTTP 404 - PAYER_NOT_FOUND: Requested payer was not found.'
- 'HTTP 409 - CONSENT_DUPLICATE: Consent already exists with provided consentId.'
- 'HTTP 500 - UNKNOWN: Unknown error.'
- 'HTTP 400 - CONSENT_IN_PROGRESS: A consent request already exists for this enduser.'
- 'HTTP 400 - DEVICE_VERSION_INVALID: Target device has an older version of the Swish
  app that does not support recurring payments.'
- 'HTTP 403 - FORBIDDEN: The swishnumber in the certificate does not have permission
  to perform this action.'
- 'HTTP 409 - CONSENT_DUPLICATE: Consent already exists with the provided consentId.'
- 'HTTP/1.1 201: Successful request'
- 'Unauthorized: Check OAuth token'
- 'HTTP 400 - BAD_REQUEST: Bad request.'
- 'HTTP 404 - NOT_FOUND: A consent could not be found with the provided consentId.'
- 'HTTP 409 - CONSENT_STATE_INVALID: Target consent is in an invalid state for the
  requested operation.'
- 'HTTP 200 - OK: The consent was successfully deleted.'
- 'HTTP 400 - BAD REQUEST: Bad request.'
- 'HTTP 404 - NOT FOUND: A consent could not be found with the provided consentId.'
- 'HTTP 400 - CONSENT_IN_PROGRESS: A consent request already exist for this enduser'
- 'HTTP 400 - DEVICE_VERSION_INVALID: Target device have an older version of the Swish
  app that do not support recurring payments.'
- 'HTTP 500 - UKNOWN: Unknown error.'
- 'HTTP 400 - BAD_REQUEST: See violations in the synchronous answer for more detailed
  information about the error.'
- 'HTTP 400 - PAYEE_AMOUNT_LIMIT_EXCEEDED: The provided amount exceeds the payee payment
  limit.'
- 'HTTP 403 - FORBIDDEN: Swishnumber in the certificate do not have the permission
  to perform this action.'
- 'HTTP 404 - CONSENT_NOT_FOUND: The Swishnumber in the certificate do not have the
  permission to perform this action.'
- 'HTTP 409 - CONSENT_STATE_INVALID: The target consent is in an invalid state for
  the requested operation.'
- 'HTTP 409 - PAYMENT_DUPLICATE: A payment already exists with the provided payment
  ID.'
- 'HTTP 500 - UNKNOWN: A unknown error has occurred.'
- 'HTTP 500 - SERVER_ERROR: Server error.'
- 'HTTP 403 - FORBIDDEN: The Swishnumber in the certificate do not have the permission
  to perform this action.'
- 'HTTP 404 - CONSENT_NOT_FOUND: The consentId in the request could not be found.'
- 'HTTP 404 - PAYMENT_NOT_FOUND: The paymentId in the request could not be found.'
- 'HTTP 429 - TOO_MANY_REQUESTS: The max amount of requests have been sent (30TPS).
  See the rate limit section for more information.'
- 'TRANSACTION_DECLINED: The transactions was declined. In most cases this is due
  to insufficient funds.'
- 'CREDIT_BANK_FAIL: Issue on credit bank side. If this persists the credit bank is
  currently unavailable.'
- 'DEBIT_BANK_FAIL: Issue on debit bank side. If this persists the debit bank is currently
  unavailable.'
- 'CREDIT_BANK_TIMEOUT: Credit bank timed out.'
- 'DEBIT_BANK_TIMEOUT: Debit bank timed out'
- 'PAYER_AMOUNT_LIMIT_EXCEEDED: The provided amount exceeds the payer payment limit.'
- 'INTERNAL_TIMEOUT: Something in the Swish system timed out.'
- 'SERVER_ERROR: A server error has occurred.'
- 'error: If the payment request fails with a early failure a errorcode will be sent
  here.'
- 'HTTP 404 - ENROLMENT_NOT_FOUND: The enduser was not found in the Swish system.'
- 'HTTP 400 - BAD_REQUEST: See violations in the synchronous answer for more detalied
  information about the error.'
- 'HTTP 409 - PAYMENT_DUPLICATE: A payment already exists with the provide payment
  ID.'
- 'HTTP 500 - UNKNOWN: A unknown error has occured.'
- 'CREDIT_BANK_FAIL: Issue on credit bank side. If this persist the creditbank is
  currently unavailable.'
- 'DEBIT_BANK_FAIL: Issue on debit bank side. If this persist the debitbank is currently
  unavailable.'
- 'SERVER_ERROR: A server error has occured.'
auth_info:
  mentioned_objects: []
client:
  base_url: https://mss.cpc.getswish.net/swish-cpcapi
  headers:
    Content-Type: application/json
source_metadata: null
