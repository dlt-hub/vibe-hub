resources:
- name: payment_snapshot
  endpoint:
    path: /v1/payments/{{payment_token}}.json
    method: GET
    data_selector: payment_snapshot
- name: gateways
  endpoint:
    path: /v1/gateways.json
    method: GET
    data_selector: gateways
- name: transactions
  endpoint:
    path: /v1/transactions.json
    method: GET
    data_selector: transactions
- name: sub_merchant
  endpoint:
    path: /reference/api/v1/#sub-merchants
    method: GET
    data_selector: records
    params: {}
- name: gateways
  endpoint:
    path: /v1/gateways
    method: POST
    data_selector: gateway
- name: payment-methods
  endpoint:
    path: /payment-methods
    method: POST
- name: purchase
  endpoint:
    path: /reference/api/v1/#payment-method-token
    method: POST
- name: authorize
  endpoint:
    path: /reference/api/v1/#payment-method-token64
    method: POST
- name: capture
  endpoint:
    path: /reference/api/v1/#capture
    method: POST
- name: retain
  endpoint:
    path: /reference/api/v1/#retain37
    method: POST
- name: redact
  endpoint:
    path: /reference/api/v1/#redact32
    method: POST
- name: verify
  endpoint:
    path: /reference/api/v1/#verify
    method: POST
- name: credit_refund
  endpoint:
    path: /reference/api/v1/#credit-refund
    method: POST
- name: list
  endpoint:
    path: /reference/api/v1/#list
    method: GET
- name: test_credit_cards
  endpoint:
    path: /test/credit_cards
    method: GET
    data_selector: cards
    params: {}
- name: test_bank_accounts
  endpoint:
    path: /test/bank_accounts
    method: GET
    data_selector: accounts
    params: {}
- name: IP addresses
  endpoint:
    path: /docs/ip-addresses
    method: GET
    data_selector: addresses
    params: {}
- name: signed_requests
  endpoint:
    path: /signed_requests
    method: GET
- name: payment_methods
  endpoint:
    path: /v1/payment_methods
    method: POST
    data_selector: payment_method
    params: {}
- name: update_gratis
  endpoint:
    path: /v1/payment_methods/{id}/update_gratis
    method: PUT
    data_selector: payment_method
    params: {}
- name: transaction
  endpoint:
    path: /transactions
    method: GET
    data_selector: transactions
- name: payment_method
  endpoint:
    path: /v1/payment_methods.json
    method: POST
    data_selector: payment_method
    params:
      provision_network_token: true
      retained: true
- name: network_tokenization_status
  endpoint:
    path: /reference/network-tokenization-status
    method: GET
    data_selector: network_tokenization
- name: authorize
  endpoint:
    path: /v1/gateways/<gateway_token>/authorize
    method: POST
    data_selector: transaction
    params:
      attempt_network_token: 'true'
- name: token_status
  endpoint:
    path: /v1/network_tokenization/token_status
    method: GET
    data_selector: token_status
    params: {}
- name: card_metadata
  endpoint:
    path: /v1/network_tokenization/card_metadata
    method: GET
    data_selector: card_metadata
    params: {}
- name: payment_method
  endpoint:
    path: /reference/payment_method
    method: GET
    data_selector: payment_method
    params: {}
- name: card_refresher_inquiry
  endpoint:
    path: /v1/card_refresher/inquiry
    method: POST
- name: certified_gateways
  endpoint:
    path: /docs/supported-gateways
    method: GET
    data_selector: gateways
- name: transactions
  endpoint:
    path: /v1/transactions
    method: POST
- name: merchant_metadata
  endpoint:
    path: /merchant_metadata
    method: GET
    data_selector: records
- name: order_data
  endpoint:
    path: /order_data
    method: GET
    data_selector: records
- name: Adyen
  endpoint:
    path: /docs/normalized-request-and-response-fields/adyen
    method: GET
    data_selector: data
    params: {}
- name: Airwallex
  endpoint:
    path: /docs/normalized-request-and-response-fields/airwallex
    method: GET
    data_selector: data
    params: {}
- name: Authorize.net
  endpoint:
    path: /docs/normalized-request-and-response-fields/authorize-net
    method: GET
    data_selector: data
    params: {}
- name: Braintree
  endpoint:
    path: /docs/normalized-request-and-response-fields/braintree
    method: GET
    data_selector: data
    params: {}
- name: Checkout.com
  endpoint:
    path: /docs/normalized-request-and-response-fields/checkout-com
    method: GET
    data_selector: data
    params: {}
- name: customer_data
  endpoint:
    path: /customer_data
    method: GET
    data_selector: merchant_customer_id
    params: {}
- name: merchant_metadata
  endpoint:
    path: /merchant_metadata
    method: GET
    data_selector: statement_descriptor
    params: {}
- name: order_data
  endpoint:
    path: /order_data
    method: GET
    data_selector: gateway_idempotency_key
    params: {}
- name: risk_data
  endpoint:
    path: /risk_data
    method: GET
    data_selector: ignore_fraud_rules
    params: {}
- name: card_metadata
  endpoint:
    path: /card_metadata
    method: GET
    data_selector: records
    params: {}
- name: merchant_data
  endpoint:
    path: /merchant_data
    method: GET
    data_selector: records
    params: {}
- name: payment_outcome_data
  endpoint:
    path: /payment_outcome_data
    method: GET
    data_selector: records
    params: {}
- name: raw_payment_outcome_data
  endpoint:
    path: /raw_payment_outcome_data
    method: GET
    data_selector: records
    params: {}
- name: roles_overview
  endpoint:
    path: /docs/rbac
    method: GET
- name: environment_activity
  endpoint:
    path: /api/v1/reports/environment_activity
    method: GET
- name: success_rates
  endpoint:
    path: /api/v1/reports/success_rates
    method: GET
- name: failures
  endpoint:
    path: /api/v1/reports/failures
    method: GET
- name: transactions
  endpoint:
    path: /api/v1/reports/transactions
    method: GET
- name: 3DS2
  endpoint:
    path: /api/v1/reports/3ds2
    method: GET
- name: payment_methods
  endpoint:
    path: /api/v1/reports/payment_methods
    method: GET
- name: recover
  endpoint:
    path: /api/v1/reports/recover
    method: GET
- name: Merchant Profile
  endpoint:
    path: /merchant_profiles
    method: POST
- name: SCA Provider
  endpoint:
    path: /sca_providers
    method: POST
- name: SCA Authentication
  endpoint:
    path: /sca_authentications
    method: POST
- name: sca_provider
  endpoint:
    path: /v1/sca/providers
    method: POST
    data_selector: sca_provider
- name: authenticate
  endpoint:
    path: /v1/sca/providers/{sca_provider_key}/authenticate
    method: POST
    data_selector: transaction
- name: merchant_profile
  endpoint:
    path: /v1/merchant_profiles.json
    method: POST
    data_selector: merchant_profile
    params: {}
- name: transaction
  endpoint:
    path: /v1/gateways/LlkjmEk0xNkcWrNixXa1fvNoTP4/purchase.json
    method: POST
    data_selector: transaction
- name: purchase
  endpoint:
    path: /LlkjmEk0xNkcWrNixXa1fvNoTP4/purchase.json
    method: POST
    data_selector: transaction
    params: {}
- name: purchase_xml
  endpoint:
    path: /LlkjmEk0xNkcWrNixXa1fvNoTP4/purchase.xml
    method: POST
    data_selector: transaction
    params: {}
- name: sca_authentication
  endpoint:
    path: /v1/sca/providers/{provider_id}/authenticate
    method: POST
    data_selector: transaction
    params: {}
- name: purchase
  endpoint:
    path: /v1/gateways/LlkjmEk0xNkcWrNixXa1fvNoTP4/purchase.json
    method: POST
    data_selector: transaction
    params: {}
- name: authenticate
  endpoint:
    path: /v1/sca/providers/ZI0HsrLtnvzvNry7f3HARhnOXbA/authenticate.json
    method: POST
    data_selector: transaction
    params: {}
- name: purchase
  endpoint:
    path: /v1/gateways/<gateway_token>/purchase.json
    method: POST
    data_selector: transaction
    params: {}
- name: merchant_profiles
  endpoint:
    path: /v1/merchant_profiles.json
    method: POST
    data_selector: merchant_profile
    params: {}
- name: sca_providers
  endpoint:
    path: /v1/sca/providers.json
    method: POST
    data_selector: sca_provider
    params: {}
- name: merchant_profiles
  endpoint:
    path: /v1/merchant_profiles.json
    method: POST
    data_selector: merchant_profile
- name: sca_providers
  endpoint:
    path: /v1/sca/providers.json
    method: POST
    data_selector: sca_provider
- name: authenticate
  endpoint:
    path: /v1/sca/providers/{provider_id}/authenticate.json
    method: POST
    data_selector: transaction
- name: purchase
  endpoint:
    path: /v1/gateways/{gateway_id}/purchase.json
    method: POST
    data_selector: transaction
- name: transaction
  endpoint:
    path: /transaction
    method: GET
    data_selector: transaction
    params: {}
- name: transaction
  endpoint:
    path: /v1/gateways/<gateway_token>/purchase.json
    method: POST
    data_selector: transaction
- name: complete_gratis
  endpoint:
    path: /v1/transactions/<transaction_token>/complete_gratis.json
    method: POST
    data_selector: transaction
- name: third_party_auth
  endpoint:
    path: /v1/gateways/{gateway_id}/purchase
    method: POST
    data_selector: transaction
- name: purchase
  endpoint:
    path: /v1/gateways/<gateway_token>/purchase.json
    method: POST
    data_selector: transaction
    params: {}
- name: transactions
  endpoint:
    path: /v1/callbacks/XjCHPJad2pDbIKKq2fOJezXmxiM/conversations.xml
    method: POST
    data_selector: transaction
- name: transaction
  endpoint:
    path: /v1/transactions
    method: GET
    data_selector: transaction
    params: {}
- name: transaction
  endpoint:
    path: /v1/gateways/<gateway_token>/purchase.json
    method: POST
    data_selector: transaction
    params: {}
- name: purchase
  endpoint:
    path: /v1/gateways/<gateway_token>/purchase.json
    method: POST
    data_selector: transaction
    params: {}
- name: low_value_exemption
  endpoint:
    path: /v1/gateways/<gateway_token>/purchase.json
    method: POST
    data_selector: transaction
    params: {}
- name: moto_exemption
  endpoint:
    path: /v1/gateways/<gateway_token>/purchase.json
    method: POST
    data_selector: transaction
    params: {}
- name: tokenize_payment_method
  endpoint:
    path: /v1/gateways/{gateway_token}/purchase.json
    method: POST
    data_selector: transaction
    params: {}
- name: tokenizeCreditCard
  endpoint:
    path: /tokenizeCreditCard
    method: POST
    data_selector: paymentMethod
    params: {}
- name: validate
  endpoint:
    path: /validate
    method: GET
    data_selector: validation
    params: {}
- name: inputProperties
  endpoint:
    path: /docs/iframe-ui
    method: GET
    data_selector: inputProperties
    params: {}
- name: setValue
  endpoint:
    path: /docs/iframe-api-lifecycle
    method: GET
    data_selector: records
- name: createBraintreePaymentElements
  endpoint:
    path: /createBraintreePaymentElements
    method: POST
    data_selector: element
    params: {}
- name: createStripePaymentElement
  endpoint:
    path: /createStripePaymentElement
    method: POST
    data_selector: element
    params: {}
- name: upload_certificate
  endpoint:
    path: /v1/certificates
    method: POST
    data_selector: certificate
    params: {}
- name: payment_method
  endpoint:
    path: /v1/gateways/{gateway_id}/purchase.json
    method: POST
    data_selector: transaction
    params: {}
- name: express_api
  endpoint:
    path: /iframe/express-3.min.js
    method: GET
- name: payment_method
  endpoint:
    path: /v1/payment_methods.json
    method: POST
    data_selector: transaction
    params: {}
- name: payment_methods
  endpoint:
    path: /v1/payment_methods.xml
    method: POST
- name: payment_methods
  endpoint:
    path: /v1/payment_methods.json
    method: POST
    data_selector: transaction
    params:
      environment_key: C7cRfNJGODKh4Iu5Ox3PToKjniY
- name: store
  endpoint:
    path: /v1/gateways/LlkjmEk0xNkcWrNixXa1fvNoTP4/store.xml
    method: POST
    data_selector: transaction
    params: {}
- name: store
  endpoint:
    path: /v1/gateways/LlkjmEk0xNkcWrNixXa1fvNoTP4/store.xml
    method: POST
    data_selector: transaction
    params: {}
- name: purchase
  endpoint:
    path: /v1/gateways/LlkjmEk0xNkcWrNixXa1fvNoTP4/purchase.xml
    method: POST
    data_selector: transaction
    params: {}
- name: store_transaction
  endpoint:
    path: /v1/gateways/LlkjmEk0xNkcWrNixXa1fvNoTP4/store.xml
    method: POST
    data_selector: transaction
    params: {}
- name: add_payment_method
  endpoint:
    path: /v1/payment_methods.xml
    method: POST
    data_selector: transaction
    params: {}
- name: purchase_transaction
  endpoint:
    path: /v1/gateways/LlkjmEk0xNkcWrNixXa1fvNoTP4/purchase.xml
    method: POST
    data_selector: transaction
    params: {}
- name: payment_methods
  endpoint:
    path: /v1/payment_methods.xml
    method: POST
    data_selector: payment_method
    params: {}
- name: redact_payment_method
  endpoint:
    path: /v1/payment_methods/redact.json
    method: PUT
    data_selector: transaction
    params:
      payment_method_token: ''
      format: json
- name: single_card_export
  endpoint:
    path: /docs/single-card
    method: GET
- name: batch_export
  endpoint:
    path: /docs/batch-export
    method: GET
- name: shoppable
  endpoint:
    path: https://secure.shoppable.com
    method: GET
- name: single_id
  endpoint:
    path: https://api.single.id
    method: GET
- name: site_minder
  endpoint:
    path: https://ws.siteminder.com
    method: GET
- name: sixt
  endpoint:
    path: https://res-soap.prod.sixt-payment.com
    method: GET
- name: slim_cd
  endpoint:
    path: https://trans.slimcd.com
    method: GET
- name: speedpay
  endpoint:
    path: https://*.speedpay.com
    method: GET
- name: spirit_direct_connect
  endpoint:
    path: https://nkprodr4xndcgateway2.navitaire.com
    method: GET
- name: spreedly
  endpoint:
    path: https://core.spreedly.com
    method: GET
- name: springboard
  endpoint:
    path: https://*.gospringboard.com
    method: GET
- name: sprinterbus_net
  endpoint:
    path: https://www.sprinterbus.net
    method: GET
- name: squareup
  endpoint:
    path: https://connect.squareup.com
    method: GET
- name: stax_payments
  endpoint:
    path: sftp://secure.staxpayments.com
    method: GET
- name: stone
  endpoint:
    path: https://e-commerce.stone.com.br
    method: GET
- name: storebox
  endpoint:
    path: https://vaultapi.prod.tokenizer.storebox.com
    method: GET
- name: stayntouch
  endpoint:
    path: http://api-specs.stayntouch.com
    method: GET
- name: stripe
  endpoint:
    path: https://api.stripe.com
    method: GET
- name: sun_express
  endpoint:
    path: https://iflyresapi.ibsgen.com
    method: GET
- name: synxis
  endpoint:
    path: https://interface.synxis.com
    method: GET
- name: syspay
  endpoint:
    path: https://app.syspay.com
    method: GET
- name: target
  endpoint:
    path: https://secure-api.target.com
    method: GET
- name: tds_tickets
  endpoint:
    path: https://gtg.tdstickets.com:38080
    method: GET
- name: telecharge
  endpoint:
    path: https://xml.telecharge.com
    method: GET
- name: tempus
  endpoint:
    path: https://*.spectrumretailnet.com
    method: GET
- name: tessitura_ramp
  endpoint:
    path: https://*.tessituranetworkramp.com
    method: GET
- name: thales
  endpoint:
    path: https://stoplight.io
    method: GET
- name: thanx
  endpoint:
    path: https://secure.api.thanx.com
    method: GET
- name: three_c_web2pay
  endpoint:
    path: https://web2payuat.3cint.com
    method: GET
- name: ticketmaster
  endpoint:
    path: https://app.ticketmaster.com
    method: GET
- name: ticket_network
  endpoint:
    path: https://tnwebservices.ticketnetwork.com
    method: GET
- name: toast
  endpoint:
    path: https://ws-api-spreedly.toasttab.com
    method: GET
- name: tokenex
  endpoint:
    path: https://api.tokenex.com
    method: GET
- name: transaction_services
  endpoint:
    path: https://api.trxservices.com
    method: GET
- name: transbank
  endpoint:
    path: https://studio-ws.apicur.io
    method: GET
- name: transferwise
  endpoint:
    path: https://api.transferwise.com
    method: GET
- name: travel_fusion
  endpoint:
    path: https://api.travelfusion.com
    method: GET
- name: travelcaster_api
  endpoint:
    path: https://apihopper.webtravelcaster.com
    method: GET
- name: travelport
  endpoint:
    path: https://americas.universal-api.travelport.com
    method: GET
- name: travolutionary
  endpoint:
    path: https://services.carsolize.com
    method: GET
- name: truevo
  endpoint:
    path: https://swishme.eu/
    method: GET
- name: trust_payments
  endpoint:
    path: https://webservices.securetrading.net
    method: GET
- name: trustpay
  endpoint:
    path: https://tpgw.trustpay.eu
    method: GET
- name: tsd
  endpoint:
    path: https://weblink.tsdasp.net
    method: GET
- name: tsys_transit
  endpoint:
    path: https://stagegw.transnox.com
    method: GET
- name: two_tap
  endpoint:
    path: https://api.twotap.com
    method: GET
- name: twoc2p
  endpoint:
    path: https://pgw.2c2p.com
    method: GET
- name: usaepay
  endpoint:
    path: https://usaepay.com
    method: GET
- name: usio
  endpoint:
    path: https://payments.usiopay.com
    method: GET
- name: vacation_rent_payment
  endpoint:
    path: https://www.rentpayment.com
    method: GET
- name: vamoose
  endpoint:
    path: https://www.vamoosebus.com
    method: GET
- name: vantiv
  endpoint:
    path: https://payments.vantiv.com
    method: GET
- name: verifone
  endpoint:
    path: https://emea.gsc.verifone.cloud
    method: GET
- name: vervotech
  endpoint:
    path: https://nexus.prod-env.vervotech.com
    method: GET
- name: verygood_security
  endpoint:
    path: https://api.live.verygoodvault.com
    method: GET
- name: viator
  endpoint:
    path: https://viatorapi.viator.com
    method: GET
- name: vietjet
  endpoint:
    path: https://vietjet-api.intelisys.ca
    method: GET
- name: vindicia
  endpoint:
    path: https://soap.vindicia.com
    method: GET
- name: virtual_card_services
  endpoint:
    path: https://www.vcs.co.za
    method: GET
- name: visa
  endpoint:
    path: https://api.visa.com/
    method: GET
- name: viva_air
  endpoint:
    path: https://apis.vivaair.com
    method: GET
- name: volaris
  endpoint:
    path: https://y4prodr4xapi.volaris.com/
    method: GET
- name: virgin_australia
  endpoint:
    path: https://sabremosaic-api-UT1-VA.cert.sabre.com
    method: GET
- name: walpay
  endpoint:
    path: https://prod.cc-gw-wal.com
    method: GET
- name: wantickets
  endpoint:
    path: https://www.wantickets.com
    method: GET
- name: webinc
  endpoint:
    path: https://api.gate4payment.com
    method: GET
- name: wepay
  endpoint:
    path: https://stage-api.wepay.com
    method: GET
- name: wex
  endpoint:
    path: https://api.fleetfabric.com
    method: GET
- name: windsurfer_crs
  endpoint:
    path: https://res.windsurfercrs.com
    method: GET
- name: wirecard
  endpoint:
    path: https://c3.wirecard.com/
    method: GET
- name: wirecard_brasil
  endpoint:
    path: https://api.moip.com.br
    method: GET
- name: wizz_air
  endpoint:
    path: https://api.wizzair.com
    method: GET
- name: worldline
  endpoint:
    path: https://office-server.sips-atos.com
    method: GET
- name: wondersoft
  endpoint:
    path: https://wallett3-dev.wondersoft.com.ar
    method: GET
- name: worldpay
  endpoint:
    path: https://api.worldpay.com
    method: GET
- name: worldpay_riskguardian
  endpoint:
    path: https://trx9.wpstn.com/stlinkssl/stlink.dll
    method: GET
- name: yapstone
  endpoint:
    path: https://www.vacationrentpayment.com
    method: GET
- name: zentrumhub
  endpoint:
    path: https://nexus.prod.zentrumhub.com
    method: GET
- name: zoop
  endpoint:
    path: https://api.zoop.ws
    method: GET
- name: zru
  endpoint:
    path: https://api.zrupay.com
    method: GET
- name: zuora
  endpoint:
    path: https://rest.zuora.com
    method: GET
- name: receiver
  endpoint:
    path: /v1/receivers.json
    method: POST
    data_selector: receiver
- name: deliver_payment_method
  endpoint:
    path: /v1/receivers/{receiver_token}/deliver.json
    method: POST
    data_selector: delivery
- name: export_payment_methods
  endpoint:
    path: /v1/receivers/{receiver_token}/export.json
    method: POST
    data_selector: export
    params: {}
- name: create_receiver
  endpoint:
    path: /v1/receivers.json
    method: POST
    data_selector: receiver
    params: {}
- name: credit_card
  endpoint:
    path: /receiver/variables/credit_card
    method: GET
    data_selector: variables
    params: {}
- name: apple_pay
  endpoint:
    path: /receiver/variables/apple_pay
    method: GET
    data_selector: variables
    params: {}
- name: google_pay
  endpoint:
    path: /receiver/variables/google_pay
    method: GET
    data_selector: variables
    params: {}
- name: bank_account
  endpoint:
    path: /bank_account
    method: GET
    data_selector: variables
    params: {}
- name: paypal
  endpoint:
    path: /paypal
    method: GET
    data_selector: variables
    params: {}
- name: credentials
  endpoint:
    path: /credentials
    method: GET
    data_selector: variables
    params: {}
- name: miscellaneous
  endpoint:
    path: /miscellaneous
    method: GET
    data_selector: variables
    params: {}
- name: transaction
  endpoint:
    path: /v1/gateways/{gateway_token}/purchase.json
    method: POST
    data_selector: transaction
    params: {}
- name: purchase
  endpoint:
    path: /v1/gateways/LlkjmEk0xNkcWrNixXa1fvNoTP4/purchase.json
    method: POST
    data_selector: transaction
    params: {}
- name: purchase_xml
  endpoint:
    path: /v1/gateways/LlkjmEk0xNkcWrNixXa1fvNoTP4/purchase.xml
    method: POST
    data_selector: transaction
    params: {}
- name: gateway_transaction
  endpoint:
    path: /v1/gateways/{gateway_id}/purchase.json
    method: POST
    data_selector: transaction
- name: update_transaction
  endpoint:
    path: /v1/transactions/{transaction_token}.json
    method: PATCH
    data_selector: transaction
- name: Cards
  endpoint:
    path: /docs/supported-payment-methods/cards
    method: GET
- name: Wallets
  endpoint:
    path: /docs/supported-payment-methods/wallets
    method: GET
- name: Bank debits and transfers
  endpoint:
    path: /docs/supported-payment-methods/bank-debits-and-transfers
    method: GET
- name: Bank redirects
  endpoint:
    path: /docs/supported-payment-methods/bank-redirects
    method: GET
- name: Buy now, pay later
  endpoint:
    path: /docs/supported-payment-methods/buy-now-pay-later
    method: GET
- name: Cash based vouchers
  endpoint:
    path: /docs/supported-payment-methods/cash-based-vouchers
    method: GET
- name: Real time payments
  endpoint:
    path: /docs/supported-payment-methods/real-time-payments
    method: GET
- name: certificates
  endpoint:
    path: /v1/certificates/generate.xml
    method: POST
    data_selector: certificate
- name: certificate
  endpoint:
    path: /v1/certificates
    method: PUT
    data_selector: certificate
    params: {}
- name: authorize
  endpoint:
    path: /reference/api/v1/#pass-in-apple-pay68
    method: POST
- name: purchase
  endpoint:
    path: /reference/api/v1/#pass-in-apple-pay
    method: POST
- name: add_apple_pay_payment_method
  endpoint:
    path: /reference/api/v1/#create-apple-pay
    method: POST
- name: transaction
  endpoint:
    path: /v1/gateways/LlkjmEk0xNkcWrNixXa1fvNoTP4/purchase.xml
    method: POST
    data_selector: transaction
    params:
      test_card_number: '4111111111111111'
- name: purchase
  endpoint:
    path: /v1/gateways/LlkjmEk0xNkcWrNixXa1fvNoTP4/purchase.xml
    method: POST
    data_selector: transaction
    params: {}
- name: payment_methods
  endpoint:
    path: /v1/payment_methods.json
    method: POST
    data_selector: payment_method
    params: {}
- name: apple_pay_session
  endpoint:
    path: /v1/gateways/<gateway_token>/verify.json
    method: POST
    data_selector: apple_pay_session
- name: transaction
  endpoint:
    path: /v1/gateways/LlkjmEk0xNkcWrNixXa1fvNoTP4/purchase.xml
    method: POST
    data_selector: transaction
    params:
      gateway_type: elavon
- name: purchase
  endpoint:
    path: /v1/gateways/LlkjmEk0xNkcWrNixXa1fvNoTP4/purchase.xml
    method: POST
    data_selector: transaction
    params: {}
- name: payment_methods
  endpoint:
    path: /payment_methods
    method: POST
    data_selector: allowedPaymentMethods
    params: {}
- name: purchase
  endpoint:
    path: /v1/gateways/LlkjmEk0xNkcWrNixXa1fvNoTP4/purchase.xml
    method: POST
    data_selector: transaction
    params:
      gateway_type: elavon
- name: transactions
  endpoint:
    path: /v1/transactions/{transaction_token}
    method: GET
    data_selector: transaction
    params: {}
- name: payment_methods
  endpoint:
    path: /v1/payment_methods
    method: POST
    data_selector: payment_method
    params: {}
- name: purchase
  endpoint:
    path: /v1/gateways/{gateway_token}/purchase.xml
    method: POST
    data_selector: transaction
    params: {}
- name: settle_transaction
  endpoint:
    path: /v1/gateways/{gateway_token}/settle.xml
    method: POST
    data_selector: settlement
    params: {}
- name: transaction_details
  endpoint:
    path: /v1/transactions/{transaction_token}.xml
    method: GET
    data_selector: transaction
    params: {}
- name: purchase
  endpoint:
    path: /v1/gateways/LlkjmEk0xNkcWrNixXa1fvNoTP4/purchase.json
    method: POST
    data_selector: transaction
    params: {}
- name: confirm_transaction
  endpoint:
    path: /v1/transactions/spreedlyTransactionToken/confirm.json
    method: POST
    data_selector: transaction
    params: {}
- name: payment_methods
  endpoint:
    path: /v1/payment_methods
    method: POST
    data_selector: payment_method
    params: {}
- name: purchase
  endpoint:
    path: /v1/gateways/{gateway_id}/purchase
    method: POST
    data_selector: transaction
    params: {}
- name: c2pInit
  endpoint:
    path: /c2pInit
    method: POST
    data_selector: response
- name: Click to Pay SDK
  endpoint:
    path: https://src.mastercard.com/srci/integration/components/src-ui-kit/src-ui-kit.esm.js
    method: GET
- name: Click to Pay Library
  endpoint:
    path: https://sandbox.src.mastercard.com/srci/integration/2/lib.js
    method: GET
- name: payment_methods
  endpoint:
    path: /v1/payment_methods.json
    method: POST
    data_selector: payment_method
- name: gateways_purchase
  endpoint:
    path: /v1/gateways/<gateway_token>/purchase.json
    method: POST
    data_selector: transaction
- name: Worldpay
  endpoint:
    path: /docs/worldpay-gateway-guide
    method: GET
- name: Checkout V2
  endpoint:
    path: /docs/checkout-v2-gateway-guide
    method: GET
- name: Nuvei REST
  endpoint:
    path: /docs/nuvei-rest-gateway-guide
    method: GET
- name: Paysafe
  endpoint:
    path: /docs/paysafe-gateway-guide
    method: GET
- name: Adyen
  endpoint:
    path: /docs/adyen-gateway-guide
    method: GET
- name: Credorax
  endpoint:
    path: /docs/credorax-gateway-guide
    method: GET
- name: Stripe Payment Intents
  endpoint:
    path: /docs/stripe-payment-intents-gateway-guide
    method: GET
- name: purchase
  endpoint:
    path: /v1/gateways/LlkjmEk0xNkcWrNixXa1fvNoTP4/purchase.xml
    method: POST
    data_selector: transaction
- name: credit
  endpoint:
    path: /v1/transactions/KS3oZgWXCfFeirK16anYbijLxR/credit.xml
    method: POST
    data_selector: transaction
- name: direct_gateways
  endpoint:
    path: /docs/direct-gateways
    method: GET
- name: offsite_gateways
  endpoint:
    path: /docs/offsite-gateways
    method: GET
- name: certificates
  endpoint:
    path: /v1/certificates
    method: POST
- name: payment_method
  endpoint:
    path: /v1/payment_methods
    method: POST
- name: purchase
  endpoint:
    path: /v1/gateways/LlkjmEk0xNkcWrNixXa1fvNoTP4/purchase
    method: POST
    data_selector: transaction
    params: {}
- name: gateway
  endpoint:
    path: /v1/gateways.xml
    method: POST
    data_selector: gateway
- name: transaction
  endpoint:
    path: /api/v1/transaction
    method: POST
    data_selector: transaction
- name: gateway_specific_response_fields
  endpoint:
    path: /gateway/specific/response/fields
    method: GET
    data_selector: gateway_specific_response_fields
    params: {}
- name: 3DS exemptions
  endpoint:
    path: /3ds/exemptions
    method: GET
    data_selector: 3ds_exemptions
    params: {}
- name: gateway
  endpoint:
    path: /v1/gateways.xml
    method: POST
    data_selector: gateway
    params: {}
- name: gateway
  endpoint:
    path: /v1/gateways.xml
    method: POST
    data_selector: gateway
    params: {}
- name: transaction_purchase
  endpoint:
    path: /v1/gateways/LlkjmEk0xNkcWrNixXa1fvNoTP4/purchase.xml
    method: POST
    data_selector: transaction
- name: transaction_store
  endpoint:
    path: /v1/gateways/LlkjmEk0xNkcWrNixXa1fvNoTP4/store.xml
    method: POST
    data_selector: transaction
- name: gateway
  endpoint:
    path: /v1/gateways
    method: POST
    data_selector: gateway
    params: {}
- name: transaction
  endpoint:
    path: /v1/gateways/{gateway_id}/purchase
    method: POST
    data_selector: transaction
    params: {}
- name: gateways
  endpoint:
    path: /v1/gateways.xml
    method: POST
    data_selector: gateway
    params: {}
- name: transactions
  endpoint:
    path: /v1/transactions/spreedlyTransactionToken/complete.json
    method: POST
    data_selector: context
    params: {}
- name: payment_methods
  endpoint:
    path: /v1/payment_methods
    method: POST
    data_selector: payment_method
- name: transactions
  endpoint:
    path: /v1/gateways/{gateway_id}/store
    method: POST
    data_selector: transaction
- name: purchase
  endpoint:
    path: /v1/gateways/LlkjmEk0xNkcWrNixXa1fvNoTP4/purchase.json
    method: POST
    data_selector: transaction
    params: {}
- name: transactions_confirm
  endpoint:
    path: /v1/transactions/spreedlyTransactionToken/confirm.json
    method: POST
    data_selector: state
- name: transactions_capture
  endpoint:
    path: /v1/transactions/spreedlyTransactionToken/capture.json
    method: POST
    data_selector: transaction
    params: {}
- name: gateways_purchase
  endpoint:
    path: /v1/gateways/LlkjmEk0xNkcWrNixXa1fvNoTP4/purchase.json
    method: POST
    data_selector: transaction
    params: {}
- name: gateway
  endpoint:
    path: /v1/gateways.xml
    method: POST
    data_selector: gateway
- name: transaction
  endpoint:
    path: /v1/gateways/LlkjmEk0xNkcWrNixXa1fvNoTP4/authorize
    method: POST
    data_selector: transaction
    params: {}
- name: Account Funding Transactions
  endpoint:
    path: /manage-payments/perform-an-account-funding-transaction
    method: POST
    data_selector: transaction
    params: {}
- name: Account Name Inquiry
  endpoint:
    path: /authenticate-payments/verify-a-card
    method: POST
    data_selector: transaction
    params: {}
- name: transactions
  endpoint:
    path: /v2/transactions
    method: POST
    data_selector: data
    params: {}
- name: payments
  endpoint:
    path: /v2/payments
    method: POST
    data_selector: data
    params: {}
- name: transaction
  endpoint:
    path: /purchase.xml
    method: POST
    data_selector: transaction
- name: gateways
  endpoint:
    path: /v1/gateways.xml
    method: POST
    data_selector: gateway
    params: {}
- name: gateway
  endpoint:
    path: /v1/gateways.xml
    method: POST
    data_selector: gateway
    params: {}
- name: transaction
  endpoint:
    path: /v1/gateways/LlkjmEk0xNkcWrNixXa1fvNoTP4/purchase.xml
    method: POST
    data_selector: transaction
    params: {}
- name: gateways
  endpoint:
    path: /v1/gateways.xml
    method: POST
    data_selector: gateway
- name: transaction
  endpoint:
    path: /v1/gateways/{gateway_id}/purchase.xml
    method: POST
    data_selector: transaction
- name: gateway
  endpoint:
    path: /v1/gateways.xml
    method: POST
    data_selector: gateway
    params: {}
- name: transaction
  endpoint:
    path: /v1/gateways/LlkjmEk0xNkcWrNixXa1fvNoTP4/purchase
    method: POST
    data_selector: transaction
    params: {}
- name: gateway
  endpoint:
    path: /v1/gateways.xml
    method: POST
    data_selector: gateway
    params: {}
- name: transactions
  endpoint:
    path: /v1/gateways/LlkjmEk0xNkcWrNixXa1fvNoTP4/purchase.xml
    method: POST
    data_selector: transaction
    params: {}
- name: pix_payment
  endpoint:
    path: /v1/payment_methods.xml
    method: POST
    data_selector: transaction
    params: {}
- name: transaction
  endpoint:
    path: /v1/gateways/LlkjmEk0xNkcWrNixXa1fvNoTP4/purchase.xml
    method: POST
    data_selector: transaction
    params: {}
- name: gateway
  endpoint:
    path: /v1/gateways.xml
    method: POST
    data_selector: gateway
    params: {}
- name: gateway
  endpoint:
    path: /v1/gateways.xml
    method: POST
- name: verify
  endpoint:
    path: /v1/gateways/{gateway_token}/verify.json
    method: POST
- name: purchase
  endpoint:
    path: /v1/gateways/{gateway_token}/purchase.json
    method: POST
- name: transaction
  endpoint:
    path: /v1/gateways/LlkjmEk0xNkcWrNixXa1fvNoTP4/purchase
    method: POST
    data_selector: transaction
    params: {}
- name: transaction
  endpoint:
    path: /v1/gateways/LlkjmEk0xNkcWrNixXa1fvNoTP4/purchase.xml
    method: POST
    data_selector: transaction
- name: gateways
  endpoint:
    path: /v1/gateways.xml
    method: POST
    data_selector: gateway
    params: {}
- name: gateways
  endpoint:
    path: /v1/gateways.xml
    method: POST
    data_selector: gateway
    params: {}
- name: purchase
  endpoint:
    path: /v1/gateways/{gateway_token}/purchase.xml
    method: POST
    data_selector: transaction
    params: {}
- name: transaction
  endpoint:
    path: /v1/gateways/{gateway_token}/purchase.xml
    method: POST
    data_selector: transaction
    params: {}
- name: general_credit
  endpoint:
    path: /v1/gateways/{gateway_token}/general_credit
    method: POST
- name: general_credit
  endpoint:
    path: /gateways/gateway_token/general_credit
    method: POST
- name: gateways
  endpoint:
    path: /v1/gateways.json
    method: GET
    data_selector: gateways
- endpoint:
    method: GET
    path: /v1/gateways.<format>
- name: gateways
  endpoint:
    path: /v1/gateways
    method: GET
    params:
      order: asc
- name: authorize_payment_method
  endpoint:
    path: /v1/gateways/{gateway_token}/authorize
    method: POST
- name: capture_transaction
  endpoint:
    path: /v1/transactions/{transaction_token}/capture
    method: POST
- name: card_refresher
  endpoint:
    path: /v1/card_refresher/inquiry
    method: POST
- name: certificates
  endpoint:
    path: /certificates
    method: GET
    data_selector: certificates
    params: {}
- name: generate_certificate
  endpoint:
    path: /v1/certificates/generate
    method: POST
- name: certificates
  endpoint:
    path: /v1/certificates/{certificate_token}
    method: PUT
- name: authorize
  endpoint:
    path: /v1/transactions/authorize
    method: POST
- name: purchase
  endpoint:
    path: /v1/transactions/purchase
    method: POST
- name: verify
  endpoint:
    path: /v1/transactions/verify
    method: POST
- name: transactions
  endpoint:
    path: /v1/transactions/{transaction_token}/credit
    method: POST
- name: regenerate_signing_secret
  endpoint:
    path: /v1/environments/{environment_key}/regenerate_signing_secret
    method: POST
- name: environments
  endpoint:
    path: /v1/environments
    method: GET
    data_selector: environments
    params: {}
- name: environments
  endpoint:
    path: /v1/environments
    method: POST
- name: environments
  endpoint:
    path: /environments/{environment_key}
    method: GET
- name: update_environment
  endpoint:
    path: /v1/environments/{environment_key}
    method: PUT
- name: access_secret
  endpoint:
    path: /v1/environments/{environment_key}/access_secrets
    method: POST
- name: access_secrets
  endpoint:
    path: /v1/environments/{environment_key}/access_secrets
    method: GET
- name: show_environment_access_secret
  endpoint:
    path: /environments/{environment_key}/access_secrets/{access_secret_key}
    method: GET
- name: delete_environment_access_secret
  endpoint:
    path: /v1/environments/{environment_key}/access_secrets/{access_secret_key}
    method: DELETE
- name: events
  endpoint:
    path: /v1/events
    method: GET
    data_selector: events
- name: show_event
  endpoint:
    path: /v1/events/{event_id}
    method: GET
- name: gateways
  endpoint:
    path: /v1/gateways
    method: POST
- name: gateways
  endpoint:
    path: /v1/gateways
    method: GET
    data_selector: gateways
- name: gateway
  endpoint:
    path: /v1/gateways/{gateway_token}.json
    method: GET
- name: update_gateway
  endpoint:
    path: /v1/gateways/{gateway_token}.json
    method: PUT
- name: gateways
  endpoint:
    path: /v1/gateways_options.json
    method: GET
- name: transactions
  endpoint:
    path: /v1/gateways/gateway_token/transactions.json
    method: GET
- name: transactions
  endpoint:
    path: /gateways/{gateway_token}/transactions.json
    method: GET
    data_selector: transactions
    params: {}
- name: redact_gateway
  endpoint:
    path: /v1/gateways/{gateway_token}/redact.json
    method: PUT
- name: retain_gateway
  endpoint:
    path: /v1/gateways/{gateway_token}/retain.json
    method: PUT
- name: merchant_profiles
  endpoint:
    path: /v1/merchant_profiles
    method: POST
- name: merchant_profiles
  endpoint:
    path: /v1/merchant_profiles
    method: GET
    data_selector: merchant_profiles
    params:
      order: asc
      since_token: ''
      count: '20'
- name: merchant_profile
  endpoint:
    path: /merchant_profiles/{merchant_profile_token}
    method: GET
    data_selector: merchant_profile
- name: merchant_profile
  endpoint:
    path: /v1/merchant_profiles/{merchant_profile_token}
    method: PUT
- name: card_metadata
  endpoint:
    path: /network_tokenization/card_metadata
    method: GET
    params:
      format: json
      payment_method_token: '{payment_method_token}'
- name: network_token_status
  endpoint:
    path: /v1/network_tokenization/token_status
    method: GET
    data_selector: token_status
    params:
      format: json
      payment_method_token: payment_method_token
- name: payment_methods
  endpoint:
    path: /reference/create-payment-method
    method: POST
- name: list_payment_methods
  endpoint:
    path: /reference/list-payment-method
    method: GET
- name: show_payment_method
  endpoint:
    path: /reference/show-payment-method
    method: GET
- name: update_payment_method
  endpoint:
    path: /reference/update-payment-method
    method: PUT
- name: payment_method
  endpoint:
    path: /v1/payment_methods
    method: POST
    data_selector: payment_method
- name: transaction
  endpoint:
    path: /v1/transactions
    method: POST
    data_selector: transaction
- name: create_payment_method
  endpoint:
    path: /reference/create-payment-method
    method: POST
- name: list_payment_methods
  endpoint:
    path: /reference/list-payment-method
    method: GET
- name: payment_methods
  endpoint:
    path: /v1/payment_methods
    method: GET
    data_selector: payment_methods
    params: {}
- name: payment_methods
  endpoint:
    path: /payment_methods
    method: GET
- name: payment_method
  endpoint:
    path: /v1/payment_methods/{payment_method_token}
    method: GET
- name: update_payment_method
  endpoint:
    path: /v1/payment_methods/{payment_method_token}
    method: PUT
- name: retain_payment_method
  endpoint:
    path: /v1/payment_methods/{payment_method_token}/retain
    method: PUT
- name: redact_payment_method
  endpoint:
    path: /v1/payment_methods/{payment_method_token}/redact
    method: PUT
- name: update_management_payment_method
  endpoint:
    path: /v1/payment_methods/{payment_method_token}/update_gratis
    method: PUT
- name: payment_methods
  endpoint:
    path: /payment_methods
    method: GET
- name: transactions
  endpoint:
    path: /transactions
    method: GET
- name: list_transactions_payment_method
  endpoint:
    path: /v1/payment_methods/{payment_method_token}/transactions
    method: GET
- name: transactions
  endpoint:
    path: /payment_methods/payment_method_token/transactions
    method: GET
- name: list_transactions
  endpoint:
    path: /list-transactions
    method: GET
- name: delete_metadata_payment_method
  endpoint:
    path: /v1/payment_methods/{payment_method_token}/metadata
    method: DELETE
- name: recache_payment_method
  endpoint:
    path: /v1/payment_methods/{payment_method_token}/recache
    method: POST
- name: store_transaction
  endpoint:
    path: /v1/gateways/{gateway_token}/store
    method: POST
- name: protection_provider
  endpoint:
    path: /v1/protection/providers
    method: POST
- name: protection_provider
  endpoint:
    path: /v1/protection/providers/{protection_provider_token}
    method: GET
- name: purchase
  endpoint:
    path: /v1/gateways/{gateway_token}/purchase
    method: POST
- name: purchase_transaction
  endpoint:
    path: /transactions/transaction_token/purchase
    method: POST
- name: purchase_transaction
  endpoint:
    path: /v1/transactions/{transaction_token}/purchase
    method: POST
- name: receivers
  endpoint:
    path: /v1/receivers_options
    method: GET
- name: receivers
  endpoint:
    path: /v1/receivers
    method: POST
- name: receivers
  endpoint:
    path: /v1/receivers
    method: GET
    data_selector: receivers
- name: receiver
  endpoint:
    path: /v1/receivers/{receiver_token}
    method: GET
    data_selector: receiver
    params: {}
- name: receiver
  endpoint:
    path: /v1/receivers/{receiver_token}
    method: PUT
- name: redact_receiver
  endpoint:
    path: /v1/receivers/{receiver_token}/redact
    method: PUT
- name: deliver_payment_method
  endpoint:
    path: /receivers/{receiver_token}/deliver
    method: POST
- name: export_payment_methods
  endpoint:
    path: /v1/receivers/{receiver_token}/export
    method: POST
- name: authenticate_payment_method
  endpoint:
    path: /sca/providers/{sca_provider_key}/authenticate
    method: POST
- name: transaction
  endpoint:
    path: /transactions/{transaction_token}
    method: GET
- name: update_transaction
  endpoint:
    path: /v1/transactions/{transaction_token}
    method: PATCH
- name: complete_transaction
  endpoint:
    path: /v1/transactions/{transaction_token}/complete
    method: POST
- name: transactions
  endpoint:
    path: /transactions
    method: GET
- name: complete_transaction
  endpoint:
    path: /transactions/transaction_token/complete
    method: POST
- name: transactions
  endpoint:
    path: /transactions
    method: GET
    data_selector: array of objects
- name: transactions
  endpoint:
    path: /v1/transactions
    method: GET
    data_selector: transactions
    params:
      count: '20'
      order: asc
- name: confirm_transaction
  endpoint:
    path: /v1/transactions/{transaction_token}/confirm
    method: POST
- name: transactions
  endpoint:
    path: /transactions/transaction_token/confirm
    method: POST
- name: transaction_transcript
  endpoint:
    path: /v1/transactions/{transaction_token}/transcript
    method: GET
    data_selector: transactions
- name: sca_provider
  endpoint:
    path: /v1/sca/providers
    method: POST
- name: sca_provider
  endpoint:
    path: /v1/sca/providers/{sca_provider_token}
    method: GET
    data_selector: sca_provider
    params: {}
- name: sub_merchants
  endpoint:
    path: /v1/sub_merchants
    method: GET
    data_selector: sub_merchants
    params:
      since_token: string
      count: string
      order: string
- name: sub_merchant
  endpoint:
    path: /sub_merchants
    method: POST
    data_selector: sub_merchant
- name: sub_merchant
  endpoint:
    path: /sub_merchants/{sub_merchant_key}
    method: GET
    data_selector: sub_merchant
    params: {}
- name: sub_merchant
  endpoint:
    path: /v1/sub_merchants/{sub_merchant_key}
    method: PUT
- name: verify_payment_method
  endpoint:
    path: /v1/gateways/{gateway_token}/verify
    method: POST
- name: verify_payment_method
  endpoint:
    path: /gateways/gateway_token/verify
    method: POST
- name: void_transaction
  endpoint:
    path: /v1/transactions/{transaction_token}/void
    method: POST
- name: regenerate_signing_secret
  endpoint:
    path: /v1/environments/{environment_key}/regenerate_signing_secret
    method: POST
- name: authorize_payment_method
  endpoint:
    path: /v1/gateways/{gateway_token}/authorize
    method: POST
- name: capture_transaction
  endpoint:
    path: /v1/transactions/{transaction_token}/capture
    method: POST
- name: card_refresher_inquiry
  endpoint:
    path: /v1/card_refresher/inquiry
    method: POST
- name: certificates
  endpoint:
    path: /certificates
    method: GET
    data_selector: certificates
    params: {}
- name: transactions
  endpoint:
    path: /transactions
    method: POST
- name: authorize
  endpoint:
    path: /v1/transactions/authorize
    method: POST
- name: refund_transaction
  endpoint:
    path: /v1/transactions/{transaction_token}/credit
    method: POST
- name: credit_transaction
  endpoint:
    path: /gateways/gateway_token/general_credit
    method: POST
- name: general_credit_transaction
  endpoint:
    path: /v1/gateways/{gateway_token}/general_credit
    method: POST
- name: create_environment_access_secret
  endpoint:
    path: /v1/environments/{environment_key}/access_secrets
    method: POST
- name: events
  endpoint:
    path: /v1/events
    method: GET
    data_selector: events
    params:
      count: '20'
- name: gateways
  endpoint:
    path: /v1/gateways
    method: POST
- name: merchant_profiles
  endpoint:
    path: /v1/merchant_profiles
    method: POST
- name: card_metadata
  endpoint:
    path: /v1/network_tokenization/card_metadata
    method: GET
    data_selector: card_metadata
    params:
      payment_method_token: '{payment_method_token}'
- name: payment_methods
  endpoint:
    path: /v1/payment_methods.<format>
    method: POST
    data_selector: payment_method
- name: payment_methods
  endpoint:
    path: /reference/list-payment-method
    method: GET
- name: transactions
  endpoint:
    path: /reference/list-transactions
    method: GET
- name: authorize
  endpoint:
    path: /reference/authorize-1
    method: POST
- name: capture
  endpoint:
    path: /reference/capture-transaction
    method: POST
- name: card_refresher
  endpoint:
    path: /reference/card_refresher_inquiry
    method: POST
- name: certificates
  endpoint:
    path: /reference/list-certificates
    method: GET
- name: composer
  endpoint:
    path: /reference/composerauthorize
    method: POST
- name: credit
  endpoint:
    path: /reference/credit-transaction
    method: POST
- name: general_credit
  endpoint:
    path: /reference/general-credit-transaction
    method: POST
- name: environments
  endpoint:
    path: /reference/list-environments
    method: GET
- name: events
  endpoint:
    path: /reference/list-events
    method: GET
- name: gateways
  endpoint:
    path: /reference/list-gateways
    method: GET
- name: merchant_profiles
  endpoint:
    path: /reference/list-merchant-profiles
    method: GET
- name: network_tokenization
  endpoint:
    path: /reference/network-tokenization-card-metadata
    method: GET
- name: payment_methods
  endpoint:
    path: /reference/list-payment-method
    method: GET
- name: protection_provider
  endpoint:
    path: /reference/create-protection-provider
    method: POST
- name: purchase
  endpoint:
    path: /reference/purchase
    method: POST
- name: receivers
  endpoint:
    path: /reference/list-supported-receivers
    method: GET
- name: sca_authentication
  endpoint:
    path: /reference/authenticate
    method: POST
- name: transactions
  endpoint:
    path: /reference/show-transactions
    method: GET
- name: sca_provider
  endpoint:
    path: /reference/create-sca-provider
    method: POST
- name: sub_merchants
  endpoint:
    path: /reference/list-sub-merchant
    method: GET
- name: verify
  endpoint:
    path: /reference/verify-payment-method
    method: POST
- name: void
  endpoint:
    path: /reference/void-transaction
    method: POST
- name: protection_provider
  endpoint:
    path: /protection/providers
    method: POST
    data_selector: protection_provider
    params: {}
- name: purchase
  endpoint:
    path: /v1/gateways/{gateway_token}/purchase
    method: POST
    data_selector: transaction
- name: receivers
  endpoint:
    path: /receivers_options
    method: GET
    data_selector: receivers
- name: sca_authentication
  endpoint:
    path: /v1/sca/providers/{sca_provider_key}/authenticate
    method: POST
- name: transaction
  endpoint:
    path: /v1/transactions/{transaction_token}
    method: GET
    data_selector: transaction
- name: sca_provider
  endpoint:
    path: /v1/sca/providers
    method: POST
- name: sub_merchants
  endpoint:
    path: /v1/sub_merchants
    method: GET
    data_selector: sub_merchants
    params:
      since_token: string
      count: string
      order: string
- name: verify_payment_method
  endpoint:
    path: /v1/gateways/{gateway_token}/verify
    method: POST
- name: verify_payment_method
  endpoint:
    path: /gateways/gateway_token/verify
    method: POST
- name: void_transaction
  endpoint:
    path: /v1/transactions/{transaction_token}/void
    method: POST
- name: transaction
  endpoint:
    path: /v1/gateways/LlkjmEk0xNkcWrNixXa1fvNoTP4/purchase.xml
    method: POST
    data_selector: transaction
- name: gateway
  endpoint:
    path: /gateways.xml
    method: POST
    data_selector: gateway
    params: {}
- name: gateway_specific_response_fields
  endpoint:
    path: /gateway_specific_response_fields
    method: GET
    data_selector: gateway_specific_response_fields
    params: {}
- name: gateway
  endpoint:
    path: /v1/gateways
    method: POST
    data_selector: gateway
    params: {}
- name: gateway_specific_response_fields
  endpoint:
    path: /gateway_specific_response_fields
    method: GET
    data_selector: paypal_commerce_platform
    params: {}
- name: gateway
  endpoint:
    path: /gateways.xml
    method: POST
    data_selector: gateway
    params: {}
- name: gateways
  endpoint:
    path: /v1/gateways.xml
    method: POST
    data_selector: gateway
    params: {}
- name: purchase
  endpoint:
    path: /v1/gateways/T11bJAANtTWnxl36GYjKWvbNK0g/purchase.xml
    method: POST
    data_selector: transaction
    params: {}
- name: store
  endpoint:
    path: /v1/gateways/gateway_token/store.xml
    method: POST
    data_selector: transaction
    params: {}
- name: gateway
  endpoint:
    path: /v1/gateways.xml
    method: POST
    data_selector: gateway
    params: {}
- name: gateways
  endpoint:
    path: /v1/gateways
    method: POST
    data_selector: gateway
    params: {}
- name: stripe_payment_intents
  endpoint:
    path: /v1/gateways/LlkjmEk0xNkcWrNixXa1fvNoTP4/purchase
    method: POST
    data_selector: transaction
    params: {}
- name: payment_intent
  endpoint:
    path: /v1/payment_intents
    method: POST
    data_selector: data
    params: {}
- name: gateway
  endpoint:
    path: /v1/gateways
    method: POST
    data_selector: gateway
- name: transaction_credit
  endpoint:
    path: /v1/transactions/{transaction_id}/credit.xml
    method: POST
    data_selector: transaction
    params: {}
- name: transaction_store
  endpoint:
    path: /v1/gateways/{gateway_id}/store.xml
    method: POST
    data_selector: transaction
    params: {}
- name: gateways
  endpoint:
    path: /v1/gateways
    method: POST
    data_selector: gateway
    params: {}
- name: transactions
  endpoint:
    path: /v1/gateways/{gateway_id}/purchase
    method: POST
    data_selector: transaction
    params: {}
- name: purchase
  endpoint:
    path: /v1/gateways/LlkjmEk0xNkcWrNixXa1fvNoTP4/purchase.json
    method: POST
    data_selector: transaction
    params: {}
- name: confirm_transaction
  endpoint:
    path: /v1/transactions/spreedlyTransactionToken/confirm.json
    method: POST
    data_selector: transaction
    params: {}
- name: Spreedly 3DS2 Global
  endpoint:
    path: /docs/spreedly-3ds2-global
    method: GET
- name: Spreedly 3DS2 Gateway Specific
  endpoint:
    path: /docs/3ds2-gateway-specific
    method: GET
- name: Third Party 3DS2
  endpoint:
    path: /docs/using-third-party-3ds2-providers
    method: GET
- name: gateway
  endpoint:
    path: /v1/gateways.xml
    method: POST
    data_selector: gateway
    params: {}
- name: gateways
  endpoint:
    path: /v1/gateways.xml
    method: POST
    data_selector: gateway
- name: purchase
  endpoint:
    path: /v1/gateways/{gateway_id}/purchase.xml
    method: POST
    data_selector: transaction
- name: gateway_specific_response_fields
  endpoint:
    path: /gateway_specific_response_fields
    method: GET
    data_selector: gateway_specific_response_fields
    params: {}
- name: gateway
  endpoint:
    path: /v1/gateways.xml
    method: POST
    data_selector: gateway
    params: {}
- name: account_funding_transaction
  endpoint:
    path: /v1/gateways/LlkjmEk0xNkcWrNixXa1fvNoTP4/purchase.xml
    method: POST
    data_selector: transaction
    params: {}
- name: store
  endpoint:
    path: /v1/gateways/LlkjmEk0xNkcWrNixXa1fvNoTP4/store.xml
    method: POST
    data_selector: transaction
    params: {}
- name: transactions
  endpoint:
    path: /transactions/{transaction_id}/credit.xml
    method: POST
    data_selector: transaction
notes:
- Recover introduces a new object in the API response, labeled as `payment_snapshot`
  that ties together multiple transaction attempts and includes relevant retry details.
- If you would like to see the full history of a payment, including full transcripts
  for each transaction attempt, you can call the GET payment endpoint `core.spreedly.com/v1/payments/<payment_token>.json`.
- Recover is an optional paid service that enables you to automatically retry declined
  transactions on a backup gateway.
- Spreedly allows any gateway to be configured for the `first_retry_gateway` resulting
  in an inability to map errors from these attempts.
- Recover is an optional paid service.
- For transactions in a currency other than USD, Spreedly uses Currencylayer to convert
  and calculate the applicable fees in USD.
- When Test or Sandbox gateways are used, Recover does not need to be enabled by Spreedly.
- Including the iFrame Javascript file on a checkout page does not automatically load
  the library. The iFrame’s lifecycle must be explicitly managed.
- Providing all required parameters in every function call is crucial for successful
  payments.
- Spreedly is a service that allows you to securely store credit cards and use them
  to transact against any number of payment gateways and third party APIs.
- All calls to the Spreedly API use HTTP basic authentication over HTTPS.
- Spreedly requires TLS 1.2.
- Uses OAuth2 with refresh token — requires setup of connected app in api
- Some objects like Contact may return nulls in deeply nested fields
- Payment Method tokens are created and vaulted at the environment level and unique
  to that environment; tokens are not shared between environments.
- Spreedly does not have a distinct 'test environment' type.
- Test API calls are metered and billed for Spreedly customers.
- Test data is only recognized by the test gateway.
- Using test data in production gateways will pass the card values just like any other
  payment method.
- As of December 31, 2022, Spreedly only holds transaction transcripts for 90 days
  after the initial date of the transaction.
- All integrations with the Spreedly API should use core.spreedly.com
- Automation to unenroll a payment method from Lifecycle Management does not unenroll
  a payment method from Advanced Vault, and will continue to have access to BIN MetaData
  and Network tokenization.
- It is not required to have purchased Advanced Vault to initiate the registration
  process.
- If a payment method is redacted, it will not be considered enrolled in the service.
- Callbacks are delivered every few minutes.
- A single callback may contain up to 150 transactions.
- Lifecycle Management is a feature under Advanced Vault.
- Each transaction is signed, allowing verification of the information.
- A signing secret is used to verify the signatures.
- Should respond back with a 200 OK response within 5 seconds.
- Callbacks should be treated as idempotent since they may be sent more than once.
- Callback URL must utilize HTTPS with standard port 443.
- Lifecycle Management is a feature under Advanced Vault. To access Account Updater,
  the organization, environments and payment methods that you are wanting to update
  through the service must also be enrolled in the Advanced Vault Product.
- Access to network tokens and network token transactions is part of Advanced Vault.
- The success of the underlying transaction is independent of the success of the network
  token provisioning.
- Request to check token status is non-billable for currently enrolled AV customers.
- API request for card metadata is non-billable for currently enrolled AV customers.
- BIN Metadata is only available for card payment methods on Spreedly.
- Certain Features under Advanced Vault require additional information from our merchants
  to register them and complete activation.
- A Card Acceptor ID is a unique identifier assigned to a merchant by their acquiring
  bank.
- Spreedly can only support a single merchant profile per Spreedly Organization.
- Certification includes a badge on a gateway card within the Marketplace.
- Payment capabilities confirmed by Spreedly are required to maintain certification.
- Additional gateway support coming soon!
- Composer is Spreedly’s LC/NC workflow builder that allows our customers to simplify
  implementation, orchestration and payment outcomes.
- Each Workflow is specific to a Spreedly Environment; however, an unlimited amount
  of workflows can be created within a given environment.
- The volume split feature uses a random number generator to allocate transactions
  to each gateway based on the specified percentage.
- Advanced Vault must be enabled on the organization to use BIN metadata dimensions.
- More than one conditional step can be added to a workflow.
- Each dimension can only be selected once per condition set.
- Recover is available in sandbox mode for testing.
- All gateways available in Composer are supported by Recover.
- Both XML and JSON format are supported.
- failure_reason and network_advice_code are normalized fields managed by Spreedly
  that are sent in the API response.
- Multi-factor authentication (MFA) using a one-time passcode (OTP) on login is required
  as an additional layer of security for your account.
- RBAC applies to the Spreedly application only. Access to the Spreedly API is controlled
  by separate API credentials.
- Attempting to download a greater volume of available data may result in slowness
- browser_info is required, because the transaction is in PSD2 scope
- Ensure you are using iFrame version v1.156 or above.
- All fields shown are required per card brand, but not all card brands are required.
- Providing an `sca_authentication_token` to a `purchase`, `authorize`, or `verify`
  will automatically fill in the payment method and third-party 3DS fields on the
  gateway transaction.
- The `sca_provider_key` field is mutually exclusive with the `attempt_3dsecure` flag.
- To use DAF you must have a Visa brand id, obtained from Visa.
- 'To force the use of DAF you may send force_daf: true in the authenticate transaction
  request.'
- Transactions under 30 euros are considered low value and exempt from strong customer
  authentication.
- For security reasons you should never make api requests from your frontend application
  directly to Spreedly.
- Ensure that the Spreedly Javascript library has loaded properly.
- 3D Secure is completely optional, even for gateways that support it.
- You must support our asynchronous transaction flow.
- The communication between your frontend and backend is entirely up to you.
- Spreedly does not support a testing environment for Visa's Digital Authentication
  Framework (DAF) at this time.
- Ensure to select only one integration method and refrain from using both, as combining
  them may result in build conflicts
- Requires device_info to be base64 encoded.
- Exemption types include low_value_exemption and transaction_risk_analysis_exemption.
- Allows merchants to use external 3DS2 authentication provider results.
- The new 3DS Global will require the use of iFrame version v1.156 or greater.
- Spreedly 3DS2 Gateway Specific is a new term for our prior default 3DS solution.
- You must support our asynchronous transaction flow in order for it to work.
- 'Include ''attempt_3dsecure: true'', ''three_ds_version: "2"'', and ''browser_info''
  in the request.'
- Callback response must be acknowledged with a 200 OK response within 5 seconds.
- You must support asynchronous transaction flow in order for it to work.
- Ensure that your data in the purchase and completion requests is being passed to
  the Javascript library correctly.
- Ensure that you're collecting the accept header from your server side rendered page
  correctly.
- Ensure that the ordering of interactions with the Spreedly Javascript library are
  correct.
- Parameters such as browser_info and attempt_3dsecure must match casing and underscore.
  browserInfo will not work.
- Requesting an exemption on a gateway does not ensure that the transaction will be
  considered exempt.
- Spreedly manages the details of securely storing and handles sensitive payment method
  data, which can drastically reduce your PCI compliance burden.
- Spreedly validates the presence of name and expiration date associated with a credit
  card by default.
- Ensure to use valid test card numbers during implementation.
- The 'Pay now' button is initially disabled until the iFrame is ready.
- Event handlers can be registered for various iFrame events.
- If validNumber is false, iFrame will prevent a call to tokenizeCreditCard. However,
  the validCVV property will not prevent a call to tokenizeCreditCard, since not all
  customers require a valid CVV at time of tokenizing.
- Spreedly has implemented a deprecation plan for iFrame where all versions that are
  more than 3 months out of date will be deprecated and removed from service.
- The function injects the Braintree Payment Element form into the checkout page.
- Spreedly provides helper functions in our iFrame that help our customers get the
  most out of their integrations.
- To enable authentication of your Create payment method API calls via iFrame, visit
  the environment settings page in app.spreedly.com.
- Once saved, transactions are authenticated from iFrame in this environment only,
  using a session nonce + signature and timestamp.
- Spreedly Express is versioned by major numerical increments.
- Never hardcode secrets client-side—generate signature server-side using a securely
  stored private key.
- Disable the creation of payment methods via direct API to maintain PCI-DSS 4.0 compliance.
- Only allow payment methods to be added via the Express (iFrame) payment form.
- If Enhanced Security is enabled on your environment, all Create payment method requests
  will require basic authentication.
- The resulting storage state is 'cached', indicating it will be purged unless explicitly
  retained.
- Spreedly will send a mapping file after the import has been completed.
- We do not validate expiration dates when importing credit cards.
- Limit requests to no more than five concurrent requests for some gateways.
- Fingerprints are per-environment and not guaranteed to be unique across different
  environments.
- Personal Data Redaction only removes data from Spreedly systems and not from payment
  gateways or other downstream systems.
- Payment method distribution enables businesses to transact with multiple endpoints
  on behalf of their customers via a single integration.
- Batch export operates asynchronously, making it a bit more complex.
- To send a single payment method, use the single card form of payment method distribution.
- A test receiver can only deliver test payment methods.
- The file size limit for batch exports is 1MB.
- Callback URL must utilize HTTPS and a default port of 443.
- Receiver functions are invoked using the template syntax.
- 3DES encryption is not generally acceptable for use in a PCI-compliant context,
  as 3DES encryption can be broken in a trivial amount of time on normal desktop computers
  and cell phones.
- For any Authorize or Purchase request, include stored_credential_initiator and stored_credential_reason_type.
- Major card networks require merchants to include additional data values in purchase
  and authorization requests for stored credentials.
- Not all transactions are eligible for an update.
- The transaction must have taken place on a gateway that Spreedly supports transaction
  updates.
- Uses Apple Pay with Spreedly against any gateway or endpoint that supports network
  tokenization.
- Any Apple Pay payment tokens generated by your app can be sent to Spreedly.
- 'Apple Pay transactions should not include attempt_3dsecure: true as a parameter.'
- 'Two certificates are required: Payment Processing Certificate and Merchant Identity
  Certificate.'
- ThirdPartyApplePay payment methods are locked to the gateway type specified
- Using Apple Pay on the Web requires starting an ApplePaySession
- ThirdPartyApplePay transaction should include gateway_type as a parameter.
- ThirdPartyApplePay payment methods are locked to the gateway type that was specified.
- You must complete the Google Pay Preparation section and have Google Pay production
  credentials before proceeding with Spreedly.
- Test card number can be used for testing transactions.
- 'Google Pay transactions should not include attempt_3dsecure: true.'
- Implementing ThirdPartyGooglePay is completely specific to the gateway therefore
  the first step is to check their documentation to validate the exact credentials
  and steps needed to create a Google Pay Payment Token.
- ThirdPartyGooglePay transactions should include gateway_type as a parameter.
- The callback url will receive a POST of all transactions that have changed since
  the last callback.
- You must respond to the callback with a 200 OK response within 5 seconds.
- Ensure that you replace redirect_url and environment_key with the appropriate URL
  for your application and your Spreedly environment key.
- The stripe_apm payment method type is only supported on the Stripe Payment Intents
  gateway.
- Spreedly does not support the card payment method type.
- Currently only US and Canadian bank accounts are supported.
- C2P accepts either a two digit or four digit year.
- The Mastercard C2P implementation has an init function, and it has been integrated
  in iFrame inside the Spreedly.c2pInit function.
- Replace the {{srcDpaId}} with your DPA Id.
- 'Replace the {{locale}} with merchant site preferred locale. Format: ISO language_country
  pair (e.g., en_US).'
- As a requirement for several Issuing Banks in the region, CVC must be collected
  for each card type or risk a declined authorization request. When a new card is
  entered, CVC should be included by default already but returning cards must also
  request a CVC code.
- In order to use Paze, you will need to first onboard with Paze.
- The keypair that you create must not additionally use password protection.
- Invoking Checkout causes consumers to enter the Paze UI via popup.
- If the consumer is found and is eligible to check out, the SDK will proceed normally.
- Call .complete() with the appropriate payload object depending on the operation.
- To retain Paze payment methods, you must be an Advanced Vault customer.
- Most gateways will decline a `refund` call if the transaction hasn’t settled at
  the merchant account. They’ll typically allow a `void` in that case.
- Retain on success can save an additional API call if the transaction is successful.
- CVV is deleted after a few minutes unless continue_caching is specified.
- shopper_reference is required for Third-party vaulting via the store action, and
  it should be unique per cardholder.
- Both user_agent and accept_header may be required when completing a 3DS transaction.
- To use Adyen’s Dynamic 3D Secure authentication, send the optional threed_dynamic
  field set to true.
- Adyen defaults to immediately capturing an `authorize` request, but this is customizable
  to delayed or manual capture in your Adyen Merchant Account.
- Be sure to set the `attempt_3dsecure` flag to `true` in the transaction request
  if you are using Adyen for gateway specific 3DS authentication.
- Spreedly recommends generating and using a US specific live URL prefix to point
  traffic to a US datacenter in order to reduce latency with the Adyen gateway.
- In addition to the above list of gateway specific fields, the generic Spreedly fields
  for shipping_address map to the Adyen deliveryAddress fields.
- In rare instances, you could receive a transient_error. This is a temporary error
  that has no side effects and can be retried.
- Unique values for request_id and merchant_order_id will automatically be provided
  if not supplied.
- To skip 3DS, set skip_3ds to true, and contact Airwallex to enable this configuration.
- Authorize.Net requires the API login ID in the login field, and your transaction
  key in the password field.
- Reversals for Authorize.Net ACH transactions should be processed via General Credit,
  not Refund.
- Authorize.net offers response reason code lookup tool which may help you discern
  why a transaction is failing.
- Requires billing address for refund transactions for some European customers.
- Response code 4 indicates the transaction was held for review.
- Supports purchase, authorize, capture, credit, void, and verify operations.
- Braintree is supported on Spreedly 3DS2 Global. In order to register with our 3DS2
  Global solution certain data fields are necessary to register.
- Use of ACH bank account payment methods has specific requirements, noted below.
- Braintree gateways require merchant_id, public_key, and private_key
- You can include a merchant_account_id if you have multiple connected Braintree accounts
- Uses basic auth for API calls.
- Custom fields cannot be created via an API request so you’ll need to configure them
  directly in the Control Panel.
- Braintree allows you to settle multiple partial amounts against the same authorization
  for PayPal and Venmo.
- An authorization for PayPal expires after 29 days and Venmo after 10 days.
- When using the `purchase` transaction type via Spreedly, the intention is that an
  authorization (payment) occurs and will be auto-captured by Checkout.
- Incremental authorization and general credit is only supported in `oauth` mode.
- The field payout must be set to true at the top level of the Spreedly transaction
  request body to enable sender and destination to be sent as objects within the gateway_specific_fields.
- The account_holder object for ANI checks is distinct from the account_holder object
  that is nested within the destination gateway specific field for Account Funding
  Transactions.
- API requires OAuth2 authentication with a connected app setup.
- A response from CommerceHub gateway may contain stan or approval_code fields.
- In order to have an extra security layer for sensitive information, Commerce Hub
  requires using additional keys in order to encrypt credit card data.
- For Commerce Hub billing information is important to provide in the transaction
  request because it can be used for Address Verification Services as a fraud prevention.
- Depending on your Conekta gateway settings, you may need to explicitly send a customer
  name and/or phone number in addition to the one sent with your payment method.
- SOAP Toolkit secure Transaction Key is generated in the CyberSource admin portal.
- To create a gateway in Sandbox mode, select ☑️Sandbox.
- For CyberSource, you can request an exemption by passing the exemption type in the
  transaction’s three_ds_exemption_type field.
- Requires merchant_id, public_key, and secret_key for configuration.
- Supports various gateway specific fields like merchant_id, ignore_avs, ignore_cvv,
  etc.
- The current supported dLocal API can respond with a success message for a request
  to void an authorization that has already been captured, but that void request will
  have no effect on the payment.
- dLocal requires a Country code to be sent for each transaction.
- dLocal requires customer’s national identification number for Auths and Purchases.
- Notification URL for refunds must be provided to receive updates.
- For Pix transactions, the customer is redirected to a dLocal-hosted page.
- Decidir supports updating the status of transactions initiated at the gateway using
  gateway_transaction_id.
- By default, Decidir gateways support purchase transactions, which executes the authorization
  and capture of funds in a single step.
- To enable preauth mode, you must make a request to Decidir support.
- EBANX has specific requirements to successfully run certain transactions.
- For any transactions in Colombia, Brazil, Chile, or Argentina, EBANX requires a
  taxpayer identification number sent in the document field.
- By default, the amount is not sent to EBANX for capture requests.
- Use security_key for Security key only mode or login and password for Default mode.
- Merchant will need to enable 'Merchant-Decrypted Data' for Apply Pay and Google
  Pay.
- Spreedly does not retain billing data from Apple Pay PM's which can cause issues
  with AVS checks on gateways. To avoid this you will need to request to get billing
  data info back from Apple in the Apple Pay session.
- Google Pay does not use CVV, but rather CAVV.
- 'Including the industry_identifier: eCommerce or MOTO GSF could help resolve potential
  failed transactions for Mastercard branded cards.'
- For every transaction, Nuvei requires an IP value to be sent. Ensure that the ip
  field is always included in the body of the request.
- Requires setup of environment key and access secret for API calls.
- To make a payout request with connection to a previous transaction, you have to
  send a normal refund request.
- Capture funds previously reserved via an authorize. By specifying an amount, you
  can capture a partial amount.
- Sensitive values will always be obscured from any Spreedly response and scrubbed
  from the transaction’s transcript.
- Use Basic authentication with base64 encoding for API keys.
- This endpoint is rate-limited to 30 requests per minute, per environment.
- Log in to use your API keys
- Capture funds previously reserved via an authorize.
- Orbital requires setup for Electronic Check Processing (ECP).
- This gateway supports Level 2 and Level 3 transaction processing via Spreedly.
- Merchants not using Refund Authorizations should check the Orbital reject batch
  report for confirmation that the action has been successfully completed.
- Responses from Orbital (Chase Paymentech) gateway should contain the auth_code,
  resp_code, and host_resp_code fields.
- 3DS2 transactions may also return cavv_resp_code.
- For authorization transactions, gateway_specific_response_fields should also contain
  the cti_level_3_eligible and cti_commercial_card fields.
- The structure for transactions is complex with nested fields.
- Requires proper setup for gateway specific fields.
- You must reach out to your PayPal account manager to ensure your account is properly
  configured.
- If you wish to have a customer’s billing address returned as part of the response,
  PayPal will need to enable this option.
- This feature is not enabled by default and requires setup by the PayPal Account
  Manager.
- Stripe Payment Intents utilizes the Stripe Payment Intents API.
- Stripe supports 3rd party 3DS2 solutions.
- Managing Transaction ID must be enabled on the account.
- Idempotency key must be unique and can be up to 255 characters long.
- Spreedly supports 3DS on Stripe through the Payment Intents API.
- Webhook must be created in Stripe for payment intent status notifications.
- Use the return_url to redirect customers after authentication.
- transfer_amount and application_fee_amount are mutually exclusive.
- In order to mark any payments as MOTO, set the gateway specific field `moto` to
  `true`. You must contact Stripe to enable this feature on your account.
- 'To set up recurring transactions that have the best success of bypassing 3DS authentication,
  set the value of `setup_future_usage` to `off_session` on the initial transaction
  or `stored_credential_initiator: cardholder`.'
- 'In subsequent transactions using a payment method that’s been setup for future
  usage, set the gateway specific field `off_session` to `true` or `stored_credential_initiator:
  merchant.'
- Uses OAuth2 with refresh token.
- This is the legacy Stripe API. To access the newest features, such as support for
  3D Secure 2, see the Stripe Payment Intents gateway.
- Stripe prefers you to log in and contact them directly via their support form to
  confirm you own the account.
- Contact support for any gateway specific fields.
- Requires creation of webhook endpoint at Stripe for 3DS transactions
- Asynchronous processing for 3DS transactions; check status until complete
- Spreedly’s integration with the Vantiv eCommerce gateway uses the 9.14 version of
  their API.
- To avoid having legitimate transactions unfulfilled at the gateway, please ensure
  `order_id` is unique for supported transactions.
- Testing against Vantiv’s Prelive environment requires passing the `url_override`
  setting as `prelive` when creating a Spreedly gateway.
- It is recommended to create separate gateways for each environment.
- For US based acquiring accounts, see Worldpay US.
- You’ll need to login and turn off the Capture Delay setting in your Worldpay Merchant
  Interface.
- You can usually bypass the need to do a full test transaction before being pushed
  into production by informing Worldpay you are working with Spreedly.
- Must specify unique customer_id per shopper when storing a credit card in the Worldpay
  vault.
- It is recommended that you perform refunds without the `bypass_authorization_status_check`
  field.
errors:
- 'REQUEST_LIMIT_EXCEEDED: Throttle API calls or reduce frequency'
- 'QUERY_TIMEOUT: Break down filters or add selectivity'
- '401 Unauthorized: Recheck OAuth scopes or token expiration'
- Throttle API calls or reduce frequency
- Break down filters or add selectivity
- Recheck OAuth scopes or token expiration
- 'Invalid transaction token: Ensure the token is valid and not expired.'
- 'not_enabled_feature: Network Tokenization service is not currently enabled at Spreedly.'
- 'not_enabled_for_environment: Network Tokenization is not enabled on this environment.'
- 'unsupported_card_type: Unsupported Card Type for Network Tokenization.'
- key: errors.network_tokenization.not_tokenized
  message: You must provision a network token for this payment method before you can
    perform this action.
- '1: Account Number does not start with 2, 3, 4, 5 or 6: payment method is not supported
  and should not be attempted for inquiry again.'
- '3: Account Number contains non-numeric characters or is blank: account number is
  invalid for this payment method and should not be attempted for inquiry again.'
- '4: Account Number is not of proper length (must be 13, 15, 16 or 19): payment method
  is not supported and should not be attempted for inquiry again.'
- '5: Expiration Date is invalid (must be YYMM): update the expiration date to the
  valid format and reattempt inquiry.'
- 'GENERAL_DECLINE: The payment was declined by the payment processor.'
- amount_not_supported
- card_limit_exceeded
- cardholder_authentication_required
- closed_card
- contact_bank
- currency_not_supported
- do_not_honor
- duplicate_transaction
- expired_card
- fraud_suspected
- incorrect_address
- incorrect_cvv
- insufficient_funds
- invalid_account
- invalid_merchant_configuration
- Unknown alias
- Invalid Credit Type
- Invalid Cupon.
- Invalid 'From' account specified
- Invalid Issue Number
- Invalid merchant
- Invalid Merchant ID
- Invalid phone number.
- Invalid request parameter.
- Invalid service code, restricted
- Invalid 'To' account specified
- Missing mandatory field
- Payee First Name / Last Name is missing or invalid
- Re-enter transaction
- Routing error
- SC_MISSING_MANDATORY_FIELD
- The Email field is mandatory
- Verification data failed | 03, 79, 72
- ERROR_CONVERTING_TRANSACTION_AMOUNTS
- Issuer Unavailable
- Card not found - non-participating BIN/issuer
- Card not found - participating BIN/issuer
- E002-System error
- External Error In Processing
- No such issuer
- Payment method Technical Error
- System Error
- System not available
- Tsys Filter - An error occurred
- UNEXPECTED SYSTEM ERROR - PLEASE RETRY LATER
- Unknown Error
- Card has been reported lost or stolen
- Transaction blocked by Adyen to prevent excessive retry fees
- Communication mismatch
- No response from acquirer
- Acquirer response error
- Unknown acquirer error
- Cannot process transaction at this moment
- Process canceled
- Process cancelled.
- No update, but the account is valid
- Issuer or Cardholder has put a restriction on the card.
- Transaction was denied, refer to the gateway for more details
- Issuer does not support installments
- Invalid due date
- '20022: Gateway Specific Outage'
- '20068: Gateway Specific Outage'
- '20096: Gateway Specific Outage'
- '20001: Soft'
- '20002: Soft'
- '20003: Soft'
- '20005: Soft'
- '20006: Soft'
- '20009: Soft'
- '20010: Soft'
- '20012: Soft'
- '20013: Soft'
- '20014: Soft'
- '20017: Soft'
- '20018: Soft'
- '20019: Soft'
- '20020: Soft'
- '20021: Soft'
- '20023: Soft'
- '20024: Soft'
- '20025: Soft'
- '20026: Soft'
- '20027: Soft'
- '20028: Soft'
- '20029: Soft'
- '20030: Soft'
- '20031: Soft'
- '20032: Soft'
- '20033: Soft'
- '20038: Soft'
- '20039: Soft'
- '20040: Soft'
- '20042: Soft'
- '20044: Soft'
- '20046: Soft'
- '20051: Soft'
- '20052: Soft'
- '20053: Soft'
- '20054: Soft'
- '20055: Soft'
- '20056: Soft'
- '20057: Soft'
- '20058: Soft'
- '20059: Soft'
- '20060: Soft'
- '20061: Soft'
- '20062: Soft'
- '20063: Soft'
- '20064: Soft'
- '20065: Soft'
- '20066: Soft'
- '20067: Soft'
- '20075: Soft'
- '20078: Soft'
- '20082: Soft'
- '20083: Soft'
- '20084: Soft'
- '20085: Soft'
- '20086: Soft'
- '20087: Soft'
- '20088: Soft'
- '20089: Soft'
- '20090: Soft'
- '20091: Soft'
- '20092: Soft'
- '20093: Soft'
- '20094: Soft'
- '20095: Soft'
- '20097: Soft'
- '20098: Soft'
- '20099: Soft'
- '2006P: Soft'
- '200N0: Soft'
- '200N7: Soft'
- '200O5: Soft'
- '200P1: Soft'
- '200P9: Soft'
- '200R1: Soft'
- '200R3: Soft'
- '200S4: Soft'
- '200T2: Soft'
- '200T3: Soft'
- '200T5: Soft'
- '20100: Soft'
- '20101: Soft'
- '20102: Soft'
- '20103: Soft'
- '20104: Soft'
- '20105: Soft'
- '20106: Soft'
- '20107: Soft'
- '20108: Soft'
- '20109: Soft'
- '20110: Soft'
- '20111: Soft'
- '20112: Soft'
- '20113: Soft'
- '20114: Soft'
- '20115: Soft'
- '20116: Soft'
- '20117: Soft'
- '20118: Soft'
- '20119: Soft'
- '20120: Soft'
- '20121: Soft'
- '20122: Soft'
- '20123: Soft'
- '20124: Soft'
- '20150: Soft'
- '20151: Soft'
- '20152: Soft'
- '20153: Soft'
- '20154: Soft'
- '20155: Soft'
- '20156: Soft'
- '20157: Soft'
- '20158: Soft'
- '20179: Soft'
- '20182: Soft'
- '20183: Soft'
- '20193: Soft'
- '3001: Gateway Specific Outage'
- '3002: Gateway Specific Outage'
- '3003: Gateway Specific Outage'
- '4000: Gateway Specific Outage'
- '5000: Gateway Specific Outage'
- '5001: Gateway Specific Outage'
- '5002: Gateway Specific Outage'
- '5003: Gateway Specific Outage'
- '5004: Gateway Specific Outage'
- '5005: Gateway Specific Outage'
- '5006: Gateway Specific Outage'
- '5007: Gateway Specific Outage'
- '5008: Gateway Specific Outage'
- '5009: Gateway Specific Outage'
- '5010: Gateway Specific Outage'
- '5013: Gateway Specific Outage'
- '5016: Gateway Specific Outage'
- '5017: Gateway Specific Outage'
- '5021: Gateway Specific Outage'
- '6000: Gateway Specific Outage'
- '7000: Gateway Specific Outage'
- '321: Gateway Specific Outage'
- '327: Gateway Specific Outage'
- '300: Soft'
- '301: Soft'
- '304: Soft'
- '306: Soft'
- '309: Soft'
- '315: Soft'
- '316: Soft'
- '318: Soft'
- '319: Soft'
- '323: Soft'
- '324: Soft'
- '325: Soft'
- '326: Soft'
- '340: Soft'
- 'circuit_breaker_open: High Level Outage'
- 'retryable_communication_exception: High Level Outage'
- 'Acquirer Error: 96 : System error: Gateway Specific Outage'
- 'Acquirer Error: 96 : System malfunction: Gateway Specific Outage'
- 'Issuer Unavailable: Gateway Specific Outage'
- 'Issuer Unavailable: 91 : Issuer or switch is inoperative: Gateway Specific Outage'
- 'Issuer Unavailable: 91 : Issuer unavailable or switch inoperative: Gateway Specific
  Outage'
- 'Issuer Unavailable: 96 : System malfunction: Gateway Specific Outage'
- 'The payment gateway is currently unavailable: Gateway Specific Outage'
- 'Unable to communicate with the payment system.: Gateway Specific Outage'
- '3D Not Authenticated: Soft'
- 'Acquirer Error: Soft'
- 'Authentication required: Soft'
- 'Authentication required: 1A : Authentication Required: Soft'
- 'Authentication required: 65 : Authentication required: Soft'
- 'Billing address problem (Country XK invalid): Soft'
- 'Configuration Problem mpiImplementation: Soft'
- 'Could not find an acquirer account for the provided currency (CRC): Soft'
- 'Could not find an acquirer account for the provided currency (MXN): Soft'
- 'Could not find an acquirer account for the provided currency (USD): Soft'
- 'Could not find an acquirer account for the provided txvariant (amex), currency
  (EUR), and action (AUTH): Soft'
- 'Could not find an acquirer account for the provided txvariant (amex), currency
  (SEK), and action (AUTH): Soft'
- 'Could not find an acquirer account for the provided txvariant (hipercard), currency
  (BRL), and action (AUTH): Soft'
- 'Declined Non Generic: Soft'
- 'Declined Non Generic: 03 : Invalid merchant: Soft'
- 'Expired Card: 82 : Policy: Soft'
- 'Expired Card: SG : No account on file — absolute: Soft'
- 'FRAUD-CANCELLED: 00 : Approved or completed successfully: Soft'
- 'FRAUD-CANCELLED: 85 : No reason to decline a request for account number verification,
  address verification, CVV2 verification, or a credit voucher or merchandise return:
  Soft'
- 'Invalid Amount: Soft'
- 'Invalid Amount: 13 : Invalid amount: Soft'
- 'Invalid Merchant Account: Soft'
- 'Issuer Unavailable: 91 : Issuer unavailable or switch inoperative: Soft'
- 'Not allowed: Soft'
- 'Not supported: Soft'
- 'Not supported: 05 : Do not honor: Soft'
- 'Not supported: 12 : Invalid transaction: Soft'
- 'Not supported: 40 : Requested function not supported: Soft'
- 'Not supported: 42 : Invalid account: Soft'
- 'Payment details are not supported for this country/ MCC combination: Soft'
- 'Pin tries exceeded: 75 : Allowable number of PIN tries exceeded: Soft'
- 'Refused: Soft'
- 'Refused: 03 : Invalid merchant or terminal: Soft'
- 'Refused: 05 : Do not honor: Soft'
- 'Refused: 05 : Generic / Contact the card center: Soft'
- 'Refused: 06 : Error: Soft'
- 'Refused: 100 : Deny: Soft'
- 'Refused: 100 : Do not honor (general denial): Soft'
- 'Refused: 82 : Policy: Soft'
- 'Refused: D : Declined (30 : System malfunction): Soft'
- 'Refused: D : Declined (O8 : Reserved): Soft'
- 'Refused: SG : No account on file — absolute: Soft'
- 'Required field ''billingAddress.stateOrProvince'' is not provided.: Soft'
- 'Required field ''billingAddress.street'' is not provided.: Soft'
- 'Restricted Card: 104 : Restricted card: Soft'
- 'Revocation Of Auth: Soft'
- 'Transaction Not Permitted: Soft'
- 'Unable To Process: Soft'
- '6: Gateway Specific Outage'
- '13: Gateway Specific Outage'
- '22: Gateway Specific Outage'
- '30: Gateway Specific Outage'
- '91: Gateway Specific Outage'
- '92: Gateway Specific Outage'
- '96: Gateway Specific Outage'
- '109: Gateway Specific Outage'
- '181: Gateway Specific Outage'
- '912: Gateway Specific Outage'
- '800.100.156: Gateway Specific Outage'
- '800.100.164: Gateway Specific Outage'
- '800.100.169: Gateway Specific Outage'
- '800.100.190: Gateway Specific Outage'
- '5: Soft'
- '19: Soft'
- '40: Soft'
- '82: Soft'
- '90: Soft'
- '100: Soft'
- '800.100.100: Soft'
- '800.100.152: Soft'
- '800.100.176: Soft'
- 'A valid amount is required: Gateway Specific Outage'
- 'ACH transactions are not accepted by this merchant: Gateway Specific Outage'
- 'An error occurred during processing. Please try again: Gateway Specific Outage'
- 'An error occurred during processing. Call Merchant Service Provider: Gateway Specific
  Outage'
- 'Bill To Address is required: Gateway Specific Outage'
- 'Bill To City is required: Gateway Specific Outage'
- 'Bill To Country is required: Gateway Specific Outage'
- 'Bill To First Name is required: Gateway Specific Outage'
- 'Bill To State/Province is required: Gateway Specific Outage'
- 'Bill To Zip/Postal Code is required: Gateway Specific Outage'
- 'Description is required: Gateway Specific Outage'
- 'Email is required: Gateway Specific Outage'
- 'Line item 1 is invalid: Gateway Specific Outage'
- 'Line item 2 is invalid: Gateway Specific Outage'
- 'Line item 3 is invalid: Gateway Specific Outage'
- 'Line item 4 is invalid: Gateway Specific Outage'
- 'Line item 5 is invalid: Gateway Specific Outage'
- 'Line item 6 is invalid: Gateway Specific Outage'
- 'Line item 7 is invalid: Gateway Specific Outage'
- 'Line item 8 is invalid: Gateway Specific Outage'
- 'Phone is required: Gateway Specific Outage'
- 'Ship To First Name is required: Gateway Specific Outage'
- 'System unavailable.: Gateway Specific Outage'
- 'The ABA code is invalid: Gateway Specific Outage'
- 'The configuration with processor is invalid. Call Merchant Service Provider.: Gateway
  Specific Outage'
- 'The Elavon bank number or terminal ID is incorrect. Call Merchant Service Provider:
  Gateway Specific Outage'
- 'The FDC Merchant ID or Terminal ID is incorrect. Call Merchant Service Provider:
  Gateway Specific Outage'
- 'The Global Payment System identification numbers are incorrect. Call Merchant Service
  Provider: Gateway Specific Outage'
- 'The merchant does not accept this type of credit card: Gateway Specific Outage'
- 'The request field(s) are either invalid or missing: Gateway Specific Outage'
- 'The supplied currency code is either invalid, not supported, not allowed for this
  merchant or doesn''t have an exchange rate: Gateway Specific Outage'
- 'The VITAL identification numbers are incorrect. Call Merchant Service Provider:
  Gateway Specific Outage'
- 'There is one or more missing or invalid required fields: Gateway Specific Outage'
- 'This processor does not support this method of submitting payment data: Gateway
  Specific Outage'
- 'Transactions of this market type cannot be processed on this system: Gateway Specific
  Outage'
- 'AVS data is invalid or AVS is not allowed for this card type.: Soft'
- 'Street address does not match, but 5-digit postal code matches.: Soft'
- 'Street address does not match, but 9-digit postal code matches.: Soft'
- 'Street address matches, but postal code does not match.: Soft'
- 'This transaction cannot be accepted at this time: Soft'
- 'This transaction cannot be processed.: Soft'
- 'This transaction has been declined.: Soft'
- '3000: Gateway Specific Outage'
- '2000: Soft'
- '2002: Soft'
- '2003: Soft'
- '2009: Soft'
- '2026: Soft'
- '2038: Soft'
- '2046: Soft'
- '2048: Soft'
- '2057: Soft'
- '2099: Soft'
- '401 Unauthorized: Recheck your credentials.'
- 'Pending: Indicates that the transaction is in a challenge state.'
- 'REQUEST_FAILED: Handle the error response and display feedback to your user.'
- 'TRANSACTION_PENDING: A challenge is required to finish the authentication.'
- 'STATE_FAILED: Handle error response and display feedback to user.'
- 'STATE_PENDING: Handle challenge required for authentication.'
- 'transaction failed: handle error and display feedback'
- 'transaction pending: handle asynchronous flow'
- 'state: gateway_setup_failed'
- 'message: Succeeded!'
- 'Invalid request: Ensure all required fields are included'
- '401 Unauthorized: Check authorization credentials'
- '400 Bad Request: Review request parameters for correctness'
- '422: Inadequate data or declined cards.'
- If the customer cancels their payment then an object will be returned with state
  'Cancelled'.
- If an unexpected error occurs then an object will be returned with state 'Failed'.
- '401 Unauthorized: Recheck API key or token expiration'
- incompatible third party token error
- 'removal_failed: Personal data removal was unsuccessful.'
- 'errors.unknown_receiver_type: The specified receiver_type is not supported'
- 'errors.hostnames_not_allowed: You can''t assign a custom hostname to a production
  receiver. Please don''t specify a ''hostnames'' property when adding a production
  receiver.'
- '401 Unauthorized: Recheck API credentials'
- '401 Unauthorized: Recheck API key or token.'
- '422 Unprocessable Entity: Check the request data for errors.'
- 'errors.receiver_last_function: Receiver transaction not attempted due to invalid
  use of last receiver function'
- 'errors.receiver_truncate_function: Receiver transaction not attempted due to invalid
  use of truncate receiver function'
- '401 Unauthorized: Check your credentials.'
- '400 Bad Request: Check the request format and required fields.'
- Improved approval rates for recurring and subscription based charges with stored
  credentials.
- 'errors.transaction_state_not_eligible_for_update: Unable to update the transaction
  state because the transaction is in a state of succeeded'
- 'Gateway type mismatch: Ensure the correct gateway type is specified'
- Error if you try to use ThirdPartyApplePay with the wrong gateway.
- 'Failed to process transaction: Check payment data or credentials.'
- Error if using ThirdPartyGooglePay payment methods with the wrong gateway.
- '200 OK: Must respond within 5 seconds to avoid retries'
- '200(OK): Success'
- 'gateway_processing_failed: Transaction failed during processing'
- '401 Unauthorized: Invalid credentials'
- 'pending: transaction state to proceed with payment'
- 'failed: an error has occurred or the payment is no longer processable'
- 'gateway_processing_failed: an error has occurred during processing'
- 'gateway_processing_result_unknown: the result of processing is unknown'
- Mastercard SDK initialization error.
- Default error when something goes wrong on the checkout error and has no specific
  type.
- Unexpected error happened when trying to initiate validation.
- The account exists but is not currently accessible (e.g., it is locked).
- There was an error trying to get the cards of the current session.
- Error when trying to initialize the id look-up UI.
- Unexpected error when trying to log out from the current C2P session.
- Unexpected error when trying to validate an OTP code.
- Unexpected error when trying to perform a checkout with an existing credit card.
- Error when checking out with a new card and the card is invalid.
- checkout response “result” = INCOMPLETE, return customer to Merchant checkout page
- '401 Unauthorized: Recheck credentials or access rights.'
- 422 Request not processed
- '''Received unexpected 3DS authentication response, but a 3DS initiation flag was
  not included in the request.'''
- 'transient_error: Temporary error that can be retried'
- 'Response Code 1: Approved'
- 'Response Code 2: Declined'
- 'Response Code 3: Error'
- 'Response Code 4: Action Required'
- Transaction declined - gateway rejected
- duplicate
- '400 Bad Request: Check the request parameters.'
- '401 Unauthorized: Verify the API key and token.'
- '403 Forbidden: Ensure the account has the necessary permissions.'
- 'Invalid API key: Check your API key and try again.'
- 'Unauthorized: Ensure your credentials are correct.'
- '401 Unauthorized: Check credentials and permissions'
- 'PENDING: Transaction is awaiting user confirmation'
- Verify transactions require preauth mode to be enabled and are unsupported if not
  using preauth mode.
- Field payment.email is required
- '401 Unauthorized: Check environment key and access secret.'
- '400 Bad Request: Review request parameters and format.'
- 401 Unauthorized
- 422 Unprocessable entity
- '401 Unauthorized: Recheck environment key or access secret'
- '401 Access denied: Unable to authenticate using the given environment_key and access_token.  Please
  check your credentials.'
- 402 Account inactive
- '500 level errors: Other 500 level errors, such as 500, 502 and 504, are application
  errors which indicate that the API cannot handle a request. Please contact Spreedly
  support regarding specific transactions that receive this response.'
- '500: Application error'
- '502: Bad gateway'
- '504: Gateway timeout'
- '500 level errors: Contact Spreedly support regarding specific transactions that
  receive this response'
- '503 Service unavailable: Spreedly is temporarily unable to process the request.'
- '500 level errors: Application errors which indicate that the API cannot handle
  a request.'
- '422 Unprocessable Entity: Which attribute(s) have an error'
- '200: Successful response'
- '401: Unauthorized'
- '404: Not Found'
- 404 Not found
- '404 Not Found: Check the endpoint URL'
- '422 Not Processable: Verify request parameters'
- 200 Successful
- '401 Unauthorized: Check your authentication'
- '422 Unprocessable entity: Ensure correct request parameters'
- '422 Unprocessable entity: Check the request parameters'
- '404 Not found: Check the environment key'
- '401 Unauthorized: Recheck authorization credentials'
- '404 Not found: Verify environment_key and access_secret_key'
- '404 Not Found: Check the endpoint or resource'
- '404 Not Found: Check the event_id parameter'
- '401 Unauthorized: Which attribute(s) have an error'
- '404 Not found: Check the resource or endpoint'
- '422 Unauthorized: Check the provided attribute'
- '401 Unauthorized: Check authentication credentials'
- '404 Not found: Verify the gateway token'
- '422 Unprocessable Entity: Check the request body for validation errors'
- '404 Not found: Check the gateway token'
- 422 Unprocessable Entity
- '404 Not found: Check the merchant_profile_token'
- '422 Unprocessable entity: Check the request body parameters'
- 404 Not Found
- '404 Not Found: Check the payment method token'
- '422 Unprocessable Entity: Check the request parameters'
- '400 Bad Request: Check the request parameters and format.'
- '401 Unauthorized: Verify the authorization credentials.'
- '403 Forbidden: Ensure the account has permission for this operation.'
- '401 Unauthorized: Check authentication or permissions'
- '404 Not Found: Verify the payment method token'
- '401 Unauthorized: Error Key and Error Message'
- '404 Not Found: Error Key and Error Message'
- '401 Unauthorized: Error Message'
- '401 Unauthorized: Error Key, Error Message'
- '403 Forbidden: Access is denied'
- '422 Unprocessable Entity: Validation errors occurred'
- 422 Unknown error
- '404 Not found: Payment method not found'
- 401 - Not authorized request
- 404 - Token Not Found
- '422 Unprocessable Entity: Check the attribute(s) in the request.'
- '429 Too Many Requests: Rate limit exceeded'
- '404 Not found: Transaction older than 90 days'
- '401 Unauthorized: Check your credentials'
- '422 Unprocessable: Check for required fields'
- '422 Unprocessable Entity: Missing request parameter'
- '404 Not found: Check the sub_merchant_key'
- 422 - Missing request parameter
- 422 - Gateway does not support verify
- '200: Network Token Provisioned'
- '200: Network Token Provision Failed'
- '200: Network Token Attempted'
- '200: Network Token Attempted Error'
- '422 Not Processable: Review the request parameters'
- '200'
- '401'
- '422'
- '404 Not Found: Check the requested resource'
- '422 Unprocessable: Check required parameters'
- '404 Not Found: Check the gateway_token and request parameters'
- '401 Unauthorized: Check OAuth scopes or token expiration'
- '404 Not Found: Check the transaction token'
- '422 Unprocessable Entity: The transaction the gateway does not support'
- Specific error messages are returned in the issue field.
- 'Invalid client id or secret: Check your PayPal credentials.'
- 'Unauthorized: Ensure your account is configured correctly.'
- '422: You cannot access the connected accounts of your platform''s connected accounts.'
- '422: You cannot make a destination charge on a connected account. You must either
  make the request on your own account (by using your platform''s API key, and not
  using the `Stripe-Account` parameter), or remove the `destination` parameter.'
- '422: Cannot create transfers on behalf of a Standard connected account.'
- Duplicate transactions may occur if idempotency_key is not used.
- Enabled events for the provided webhook do not include the required 3DS events.
- Contact Stripe support to configure your Stripe account for network tokenization.
- OAuth based requests must use card tokens from Stripe.js, but card details were
  directly provided.
- 'gateway_processing_failed: An error has occurred or the payment is no longer processable.'
- 'gateway_processing_result_unknown: An error has occurred or the payment is no longer
  processable.'
- 'failed: An error has occurred or the payment is no longer processable.'
- duplicate transactions based on `order_id`
- '401 Unauthorized: Recheck authentication credentials.'
- '401 Unauthorized: Recheck credentials or access rights'
auth_info:
  mentioned_objects:
  - JWT
  - OauthToken
  - AuthProvider
  - NamedCredential
client:
  base_url: https://core.spreedly.com
  headers:
    Accept: application/json
source_metadata: null
