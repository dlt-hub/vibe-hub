resources:
- name: invoice
  endpoint:
    path: /reference/createinvoice#/
    method: POST
    data_selector: invoice
    params: {}
- name: existing_invoice
  endpoint:
    path: /reference/getinvoice#/
    method: GET
    data_selector: invoice
    params: {}
- name: multiple_invoices
  endpoint:
    path: /reference/getinvoices#/
    method: GET
    data_selector: invoices
    params: {}
- name: update_invoice
  endpoint:
    path: /reference/updateinvoice#/
    method: PUT
    data_selector: invoice
    params: {}
- name: connection_test
  endpoint:
    path: /connection-test
    method: GET
    data_selector: object
- name: transaction
  endpoint:
    path: /reference/getcardtransactions#/
    method: GET
- name: card_batches
  endpoint:
    path: /reference/getcardbatches#/
    method: GET
- name: card_terminal
  endpoint:
    path: /reference/cardterminals#/
    method: GET
- name: transaction
  endpoint:
    path: /reference/getcardtransactions#/
    method: GET
- name: card_batches
  endpoint:
    path: /reference/getcardbatches#/
    method: GET
- name: card_terminals
  endpoint:
    path: /reference/cardterminals#/
    method: GET
- name: transaction
  endpoint:
    path: /reference/purchase
    method: POST
    data_selector: transaction
    params: {}
- name: preauth
  endpoint:
    path: /reference/preauth
    method: POST
    data_selector: transaction
    params: {}
- name: capture
  endpoint:
    path: /reference/capture
    method: POST
    data_selector: transaction
    params: {}
- name: reverse
  endpoint:
    path: /reference/reverse
    method: POST
    data_selector: transaction
    params: {}
- name: refund
  endpoint:
    path: /reference/refund
    method: POST
    data_selector: transaction
    params: {}
- name: verify
  endpoint:
    path: /reference/verify
    method: POST
    data_selector: transaction
    params: {}
- name: get_transactions
  endpoint:
    path: /reference/getcardtransactions#/
    method: GET
    data_selector: transactions
    params: {}
- name: get_transaction
  endpoint:
    path: /reference/getcardtransaction#/
    method: GET
    data_selector: transaction
    params: {}
- name: transaction
  endpoint:
    path: /reference/purchase
    method: POST
    data_selector: transaction
    params: {}
- name: preauth
  endpoint:
    path: /reference/preauth
    method: POST
    data_selector: transaction
    params: {}
- name: capture
  endpoint:
    path: /reference/capture
    method: POST
    data_selector: transaction
    params: {}
- name: reverse
  endpoint:
    path: /reference/reverse
    method: POST
    data_selector: transaction
    params: {}
- name: refund
  endpoint:
    path: /reference/refund
    method: POST
    data_selector: transaction
    params: {}
- name: verify
  endpoint:
    path: /reference/verify
    method: POST
    data_selector: transaction
    params: {}
- name: get_transactions
  endpoint:
    path: /reference/getcardtransactions#/
    method: GET
    data_selector: transactions
    params: {}
- name: get_transaction
  endpoint:
    path: /reference/getcardtransaction#/
    method: GET
    data_selector: transaction
    params: {}
- name: card_batches
  endpoint:
    path: /reference/getcardbatches#/
    method: GET
    data_selector: card_batches
- name: card_batch
  endpoint:
    path: /reference/getcardbatch#/
    method: GET
    data_selector: card_batch
- name: settle_card_batch
  endpoint:
    path: /reference/settlecardbatch#/
    method: POST
    data_selector: settle_card_batch
- name: card_batches
  endpoint:
    path: /reference/getcardbatches#/
    method: GET
    data_selector: cardBatches
    params: {}
- name: card_batch
  endpoint:
    path: /reference/getcardbatch#/
    method: GET
    data_selector: cardBatch
    params: {}
- name: settle_card_batch
  endpoint:
    path: /reference/settlecardbatch#/
    method: POST
    data_selector: settleCardBatch
    params: {}
- name: card_terminal
  endpoint:
    path: /reference/cardterminals
    method: GET
- name: card_terminal
  endpoint:
    path: /reference/cardterminals#/
    method: GET
    data_selector: card terminal
    params: {}
- name: invoice
  endpoint:
    path: /reference/createinvoice
    method: POST
    data_selector: invoice
    params: {}
- name: get_invoices
  endpoint:
    path: /reference/getinvoices
    method: GET
    data_selector: invoices
    params: {}
- name: get_invoice
  endpoint:
    path: /reference/getinvoice
    method: GET
    data_selector: invoice
    params: {}
- name: invoice
  endpoint:
    path: /reference/createinvoice#/
    method: POST
    data_selector: invoice
    params: {}
- name: get_invoices
  endpoint:
    path: /reference/getinvoices
    method: GET
    data_selector: invoices
    params: {}
- name: get_invoice
  endpoint:
    path: /reference/getinvoice
    method: GET
    data_selector: invoice
    params: {}
- name: invoice
  endpoint:
    path: /reference/createinvoice
    method: POST
    data_selector: invoice
    params: {}
- name: get_invoice
  endpoint:
    path: /reference/getinvoice
    method: GET
    data_selector: invoice
    params: {}
- name: get_invoices
  endpoint:
    path: /reference/getinvoices
    method: GET
    data_selector: invoices
    params: {}
- name: invoice
  endpoint:
    path: /reference/createinvoice
    method: POST
    data_selector: invoice
    params: {}
- name: get_invoice
  endpoint:
    path: /reference/getinvoice
    method: GET
    data_selector: invoice
    params: {}
- name: get_invoices
  endpoint:
    path: /reference/getinvoices
    method: GET
    data_selector: invoices
    params: {}
- name: customers
  endpoint:
    path: /reference/getcustomers#/
    method: GET
    data_selector: customers
- name: customer_card
  endpoint:
    path: /reference/getcustomercards#/
    method: GET
    data_selector: cards
- name: customer_bank
  endpoint:
    path: /reference/getcustomerbankaccounts#/
    method: GET
    data_selector: banks
- name: pad_agreements
  endpoint:
    path: /reference/getpads#/
    method: GET
    data_selector: pads
- name: customer
  endpoint:
    path: /reference/createcustomer#/
    method: POST
    data_selector: customer
    params: {}
- name: card
  endpoint:
    path: /cards
    method: POST
    data_selector: card
    params: {}
- name: customer
  endpoint:
    path: /reference/createcustomer#/
    method: POST
- name: get_customer
  endpoint:
    path: /reference/getcustomer#/
    method: GET
- name: get_customers
  endpoint:
    path: /reference/getcustomers#/
    method: GET
- name: update_customer
  endpoint:
    path: /reference/updatecustomer#/
    method: PUT
- name: get_customer_card
  endpoint:
    path: /reference/getcustomercard#/
    method: GET
- name: get_customer_cards
  endpoint:
    path: /reference/getcustomercards#/
    method: GET
- name: delete_customer_card
  endpoint:
    path: /reference/deletecustomercard#/
    method: DELETE
- name: get_customer_bank_account
  endpoint:
    path: /reference/getcustomerbankaccount#/
    method: GET
- name: get_customer_bank_accounts
  endpoint:
    path: /reference/getcustomerbankaccounts#/
    method: GET
- name: create_bank_account
  endpoint:
    path: /reference/createbankaccount#/
    method: POST
- name: request_new_bank_account
  endpoint:
    path: /reference/requestnewbankaccount#/
    method: POST
- name: get_pad
  endpoint:
    path: /reference/getpad#/
    method: GET
- name: get_pads
  endpoint:
    path: /reference/getpads#/
    method: GET
- name: update_pad
  endpoint:
    path: /reference/updatepad#/
    method: PUT
- name: set_customer_card_default
  endpoint:
    path: /reference/setcustomercarddefault#/
    method: POST
- name: set_customer_bank_account_default
  endpoint:
    path: /reference/setcustomerbankaccountdefault#/
    method: POST
- name: bank_account
  endpoint:
    path: /reference/createbankaccount
    method: POST
    data_selector: bankAccount
- name: customer_bank_account
  endpoint:
    path: /reference/getcustomerbankaccount
    method: GET
    data_selector: bankAccount
- name: customer_bank_accounts
  endpoint:
    path: /reference/getcustomerbankaccounts
    method: GET
    data_selector: bankAccounts
- name: request_bank_account_info
  endpoint:
    path: /reference/requestnewbankaccount
    method: POST
    data_selector: message
- name: get_all_pads_for_customer
  endpoint:
    path: /reference/getpads#/
    method: GET
    data_selector: pad
    params: {}
- name: get_pad_by_id
  endpoint:
    path: /reference/getpad#/
    method: GET
    data_selector: pad
    params: {}
- name: update_pad_by_id
  endpoint:
    path: /reference/updatepad#/
    method: POST
    data_selector: pad
    params: {}
- name: customer
  endpoint:
    path: /customers
    method: GET
    data_selector: customers
- name: payment_plan
  endpoint:
    path: /reference/payment-plan-create
    method: POST
    data_selector: ''
    params: {}
- name: subscription
  endpoint:
    path: /reference/subscription-create
    method: POST
    data_selector: ''
    params: {}
- name: add_on
  endpoint:
    path: /reference/add-on-create
    method: POST
    data_selector: ''
    params: {}
- name: bank_account
  endpoint:
    path: /reference/createbankaccount#/
    method: POST
- name: customer
  endpoint:
    path: /reference/updatecustomer#/
    method: POST
- name: payment_plan
  endpoint:
    path: /reference/payment-plan-collection
    method: GET
- name: create_payment_plan
  endpoint:
    path: /reference/payment-plan-create
    method: POST
- name: update_payment_plan
  endpoint:
    path: /reference/payment-plan-patch
    method: PATCH
- name: delete_payment_plan
  endpoint:
    path: /reference/payment-plan-delete
    method: DELETE
- name: get_payment_plan
  endpoint:
    path: /reference/payment-plan-single
    method: GET
- name: subscription
  endpoint:
    path: /reference/subscriptions-collection
    method: GET
    data_selector: subscriptions
- name: pad_agreement
  endpoint:
    path: /reference/getpads#/
    method: GET
    data_selector: pad
    params: {}
- name: create_pad_agreement
  endpoint:
    path: /reference/createbankaccount#/
    method: POST
    data_selector: pad
    params: {}
- name: update_pad_agreement
  endpoint:
    path: /reference/updatepad#/
    method: PUT
    data_selector: pad
    params: {}
- name: get_pad_by_id
  endpoint:
    path: /reference/getpad#/
    method: GET
    data_selector: pad
    params: {}
- name: add-ons
  endpoint:
    path: /reference/add-ons-collection
    method: GET
    data_selector: add-ons
    params: {}
- name: create-add-ons
  endpoint:
    path: /reference/add-on-create
    method: POST
    data_selector: add-on
    params: {}
- name: patch-add-ons
  endpoint:
    path: /reference/add-on-patch
    method: PATCH
    data_selector: add-on
    params: {}
- name: delete-add-on
  endpoint:
    path: /reference/add-on-delete
    method: DELETE
    data_selector: add-on
    params: {}
- name: get-add-on
  endpoint:
    path: /reference/add-on-single
    method: GET
    data_selector: add-on
    params: {}
- name: payment_plan
  endpoint:
    path: /reference/payment-plan-create
    method: POST
    data_selector: payment_plan
    params: {}
- name: subscription
  endpoint:
    path: /reference/subscription-create
    method: POST
    data_selector: subscription
    params: {}
- name: add_on
  endpoint:
    path: /reference/add-on-create
    method: POST
    data_selector: add_on
    params: {}
- name: procedure
  endpoint:
    path: /reference/procedure-process-payment
    method: POST
    data_selector: procedure
    params: {}
- name: Process a subscription payment
  endpoint:
    path: /reference/procedure-process-payment
    method: POST
- name: Get subscriptions
  endpoint:
    path: /reference/subscription-collection
    method: GET
- name: Get subscription
  endpoint:
    path: /reference/subscription-single
    method: GET
- name: payment_plan
  endpoint:
    path: /reference/payment-plan-collection
    method: GET
    data_selector: paymentPlans
- name: create_payment_plan
  endpoint:
    path: /reference/payment-plan-create
    method: POST
- name: patch_payment_plan
  endpoint:
    path: /reference/payment-plan-patch
    method: PATCH
- name: delete_payment_plan
  endpoint:
    path: /reference/payment-plan-delete
    method: DELETE
- name: get_single_payment_plan
  endpoint:
    path: /reference/payment-plan-single
    method: GET
- name: registered_device
  endpoint:
    path: /reference/getdevice#/
    method: GET
- name: registered_devices
  endpoint:
    path: /reference/getdevices#/
    method: GET
- name: ping_registered_device
  endpoint:
    path: /reference/pingdevice#/
    method: POST
- name: process_purchase_transaction
  endpoint:
    path: /reference/startpurchase#/
    method: POST
- name: process_debit_refund_transaction
  endpoint:
    path: /reference/startrefund#/
    method: POST
- name: subscription
  endpoint:
    path: /reference/subscriptions-collection
    method: GET
- name: create_subscription
  endpoint:
    path: /reference/subscription-create
    method: POST
- name: delete_subscription
  endpoint:
    path: /reference/subscription-delete
    method: DELETE
- name: get_subscription
  endpoint:
    path: /reference/subscription-single
    method: GET
- name: patch_subscriptions
  endpoint:
    path: /reference/subscription-patch
    method: PATCH
- name: add-ons
  endpoint:
    path: /reference/add-ons-collection
    method: GET
    data_selector: add-ons
    params: {}
- name: create-add-ons
  endpoint:
    path: /reference/add-on-create
    method: POST
    data_selector: add-on
    params: {}
- name: patch-add-ons
  endpoint:
    path: /reference/add-on-patch
    method: PATCH
    data_selector: add-on
    params: {}
- name: delete-add-on
  endpoint:
    path: /reference/add-on-delete
    method: DELETE
    data_selector: add-on
    params: {}
- name: get-add-on
  endpoint:
    path: /reference/add-on-single
    method: GET
    data_selector: add-on
    params: {}
- name: Process a subscription payment
  endpoint:
    path: /reference/procedure-process-payment
    method: POST
- name: Get subscriptions
  endpoint:
    path: /reference/subscription-single
    method: GET
- name: Send a Ping Event
  endpoint:
    path: /reference/pingdevice#/
    method: POST
    data_selector: response
    params: {}
- name: get_registered_device
  endpoint:
    path: /reference/getdevice#/
    method: GET
- name: get_registered_devices
  endpoint:
    path: /reference/getdevices#/
    method: GET
- name: ping_registered_device
  endpoint:
    path: /reference/pingdevice#/
    method: GET
- name: process_smart_terminal_purchase_transaction
  endpoint:
    path: /reference/startpurchase#/
    method: POST
- name: process_smart_terminal_debit_refund_transaction
  endpoint:
    path: /reference/startrefund#/
    method: POST
- name: purchase_transaction
  endpoint:
    path: /v2/devices/{code}/payment/purchase
    method: POST
    data_selector: response
    params: {}
- name: refund
  endpoint:
    path: /v2/devices/{code}/payment/refund
    method: POST
    data_selector: response
    params: {}
- name: ACH bank payments
  endpoint:
    path: /reference/achwithdraw#/
    method: POST
- name: ACH batches
  endpoint:
    path: /reference/getmanyachbatches#/
    method: GET
- name: process_ach_withdraw
  endpoint:
    path: /reference/achwithdraw#/
    method: POST
    data_selector: transaction
    params: {}
- name: refund_ach_transaction
  endpoint:
    path: /reference/achrefund#/
    method: POST
    data_selector: transaction
    params: {}
- name: void_ach_transaction
  endpoint:
    path: /reference/achvoid#/
    method: POST
    data_selector: transaction
    params: {}
- name: cancel_pending_ach_transaction
  endpoint:
    path: /reference/achcancel#/
    method: POST
    data_selector: transaction
    params: {}
- name: retrieve_single_ach_transaction
  endpoint:
    path: /reference/getachtransactionbyid#/
    method: GET
    data_selector: transaction
    params: {}
- name: collect_all_ach_transactions
  endpoint:
    path: /reference/getmanyachtransactions#/
    method: GET
    data_selector: transactions
    params: {}
- name: Send a Ping Event
  endpoint:
    path: /reference/pingdevice#/
    method: POST
    data_selector: response
    params: {}
- name: ach_batches
  endpoint:
    path: /reference/getmanyachbatches#/
    method: GET
    data_selector: batches
    params: {}
- name: settle_ach_batch
  endpoint:
    path: /reference/achbatchsettle#/
    method: POST
    data_selector: null
    params: {}
- name: purchase_transaction
  endpoint:
    path: /v2/devices/{code}/payment/purchase
    method: POST
    data_selector: ''
    params: {}
- name: debit_refund
  endpoint:
    path: /v2/devices/F44Y/payment/refund
    method: POST
    data_selector: response
    params: {}
- name: ACH withdraw
  endpoint:
    path: /reference/achwithdraw#/
    method: POST
    data_selector: transaction
- name: Refund ACH transaction
  endpoint:
    path: /reference/achrefund#/
    method: POST
    data_selector: transaction
- name: Void ACH transaction
  endpoint:
    path: /reference/achvoid#/
    method: POST
    data_selector: transaction
- name: Cancel pending ACH transaction
  endpoint:
    path: /reference/achcancel#/
    method: POST
    data_selector: transaction
- name: Retrieve single ACH transaction
  endpoint:
    path: /reference/getachtransactionbyid#/
    method: GET
    data_selector: transaction
- name: Collect all ACH transactions
  endpoint:
    path: /reference/getmanyachtransactions#/
    method: GET
    data_selector: transactions
- name: Collect all ACH batches
  endpoint:
    path: /reference/getmanyachbatches#/
    method: GET
    data_selector: batches
- name: Settle ACH batch
  endpoint:
    path: /reference/achbatchsettle#/
    method: POST
    data_selector: batch
- name: HelcimPay.js
  endpoint:
    path: /helcimpay.js/checkout/session
    method: POST
    data_selector: response
    params: {}
- name: process_ach_withdraw
  endpoint:
    path: /reference/achwithdraw#/
    method: POST
- name: refund_ach_transaction
  endpoint:
    path: /reference/achrefund#/
    method: POST
- name: void_ach_transaction
  endpoint:
    path: /reference/achvoid#/
    method: POST
- name: cancel_pending_ach_transaction
  endpoint:
    path: /reference/achcancel#/
    method: POST
- name: retrieve_single_ach_transaction
  endpoint:
    path: /reference/getachtransactionbyid#/
    method: GET
- name: collect_all_ach_transactions
  endpoint:
    path: /reference/getmanyachtransactions#/
    method: GET
- name: card_terminals
  endpoint:
    path: /reference/cardterminals#/
    method: GET
- name: checkout_session
  endpoint:
    path: /v2/helcim-pay/initialize
    method: POST
    data_selector: response
    params: {}
- name: checkout
  endpoint:
    path: /services/start.js
    method: GET
    data_selector: response
    params: {}
- name: checkout_session
  endpoint:
    path: /reference/checkout-init
    method: POST
- name: helcim_pay_logo_upload
  endpoint:
    path: /reference/helcim-pay-logo-upload
    method: POST
- name: transaction_response
  endpoint:
    path: /validate-transaction
    method: POST
    data_selector: data
- name: payments
  endpoint:
    path: /payments
    method: POST
    data_selector: payment
    params: {}
- name: refunds
  endpoint:
    path: /refunds
    method: POST
    data_selector: refund
    params: {}
- name: reverses
  endpoint:
    path: /reverses
    method: POST
    data_selector: reverse
    params: {}
- name: logo_upload
  endpoint:
    path: /reference/helcim-pay-logo-upload
    method: POST
    data_selector: message
    params: {}
- name: HelcimPay.js
  endpoint:
    path: /api/helcimpayjs/checkout
    method: POST
    data_selector: response
    params: {}
- name: Collect Card Transaction
  endpoint:
    path: /reference/getcardtransactions#/
    method: GET
- name: card_terminals
  endpoint:
    path: /reference/cardterminals#/
    method: GET
- name: helcimForm
  endpoint:
    path: /helcimForm
    method: POST
    data_selector: results
- name: checkout_session
  endpoint:
    path: /v2/helcim-pay/initialize
    method: POST
    data_selector: response
    params: {}
- name: payments
  endpoint:
    path: /payments
    method: POST
- name: payment_modal
  endpoint:
    path: /helcim-pay/services/start.js
    method: GET
    data_selector: script
- name: transaction_responses
  endpoint:
    path: /api/transaction-responses
    method: POST
    data_selector: response
- name: connected_account_registration
  endpoint:
    path: /v2/applications/prefill
    method: POST
    data_selector: data
- name: helcimForm
  endpoint:
    path: /js/version2.js
    method: GET
    data_selector: script
    params: {}
- name: payments
  endpoint:
    path: /payments
    method: POST
    data_selector: transaction
    params: {}
- name: transaction_responses
  endpoint:
    path: /transaction/responses
    method: POST
    data_selector: response
    params: {}
- name: prefilled_registration
  endpoint:
    path: /v2/applications/prefill
    method: POST
    data_selector: 'null'
    params: {}
notes:
- Integrating HelcimPay.js into your website or eCommerce store is a breeze and can
  significantly enhance your customers' checkout experience!
- The Helcim Smart Terminal API is a game-changer for developers looking to create
  a seamless point-of-sale experience!
- The Helcim Recurring API is perfect for developers looking to simplify subscription-based
  services and automate recurring payments!
- Integrating with Helcim's Invoice API is an excellent choice for developers who
  want to streamline the invoicing process for their clients!
- Helcim developer test accounts are separate from Helcim production accounts.
- By default, Helcim merchants cannot send full card numbers, expiry dates, or CVV
  numbers, via the API.
- Transactions processed with test credit cards on a production account and processing
  terminal, will be declined by the card networks, and charges may apply.
- Card transaction declines can be simulated in a test environment through the Payment
  API endpoints if enabled for full card numbers.
- In July 2023, Helcim released our V2 API and deprecated our legacy V1 API.
- Reducing your PCI compliance scope and risk is as simple as integrating with HelcimPay.js
  to process online payments.
- Integrators with the Helcim API cannot send full card numbers, expiry dates, or
  CVV numbers through the Payment API by default.
- The Payment API will return an error for any attempts to do so without approval.
- Helcim has implemented API rate limits to ensure the security and availability of
  our services for all merchants.
- When a merchant exceeds these limits, our system will block further requests until
  the limit resets.
- All requests to the Purchase, Preauth, and Verify endpoints require a cardData object
  to be passed in the body.
- Payments processed through the Payment API can be linked to existing customers or
  invoices.
- Helcim supports businesses that are located in Canada or the United States and offers
  both CAD and USD currencies based on the location of your business.
- Idempotency keys submitted to the Payment API are cleared after 5 minutes, ensuring
  you have the opportunity to attempt transactions a second time.
- Idempotency keys submitted to the Payment API are cleared after 5 minutes.
- The generation and tracking of idempotency keys used for transactions will remain
  the merchants responsibility.
- Helcim's fee for this service is a percentage of the savings generated by the lower
  interchange rates, which will show on your monthly merchant statement.
- Suspected duplicate transactions will have a transaction status of 'DECLINED' returned
  in the transaction response object.
- Level 2 and 3 payments capture and transmit additional data for eligible cards to
  achieve lower processing fees.
- Subdomain is your business DBA with '.myhelcim.com' following it.
- The province and country values for a customer object are used for tax calculation
  purposes.
- To reduce PCI compliance scope, integrate with HelcimPay.js for secure tokenization.
- A unique customerCode value is used as a reference for your customer in the Helcim
  system.
- Either a contactName or businessName is required when creating a customer.
- To reduce your PCI compliance scope and capture credit card details in a secure
  manner, we recommend merchants integrate with HelcimPay.js.
- We require a valid `email` stored in the `billingAddress` object for the customer.
- Payment plans can have an optional one-time set up fee.
- A single subscriber can be subscribed to multiple different payment plans and can
  even have multiple subscriptions to the same payment plan.
- A PAD agreement is required in order to successfully process ACH bank payments.
- An approved PAD agreement is required in order to process ACH transactions against
  a customer's bank account.
- An add-on can only be applied to a subscription if it is available on the payment
  plan the subscriber is being subscribed to.
- After charging a one-time single application add-on, the Helcim system will remove
  the add-on from the subscription object automatically.
- Payment plans activate immediately on creation.
- Please connect with tier2support@helcim.com and we would be happy to guide you through
  the process of getting a test environment up and running.
- Please let us know that you would like to integrate with the Smart Terminal API.
- Subscription objects can represent multiple subscriptions for a single subscriber.
- Payments may be approved or declined depending on the payment processing outcome.
- If you do not currently have access to a Helcim developer test account for your
  Smart Terminal API integration, please review our documentation.
- API mode will apply to all Smart Terminal devices associated with your Helcim account,
  causing the built-in Helcim point of sale system to no longer be accessible on these
  devices.
- API mode must be enabled in Helcim account settings.
- Webhook URL must be secure and cannot contain 'Helcim'.
- Configuring your test device before enabling API Mode will allow you to set device
  specific settings such as automatic receipt printing.
- New Helcim merchants may not be approved for processing.
- If you do not currently have access to a Helcim developer test account for your
  Smart Terminal API integration, please review our documentation here to get started.
- The registration process for API mode is triggered on device log in.
- Only Smart Terminal devices that are associated with your Helcim business account
  can be paired with your existing point of sale software.
- Webhook URL must be valid https protocol and not contain the word Helcim.
- The endpoint can be whatever you want, however it cannot contain the word Helcim
  in the URL and must have valid HTTPS in order for you to save your webhook configuration.
- It's also important to disable CSRF protection for this endpoint if the framework
  you use enables them by default.
- Integrate with HelcimPay.js, our premium payment gateway solution, and get access
  to a range of payment options and functionality.
- HelcimPay.js allows you to embed payments into your website or application without
  handling sensitive payment information.
- Cross border ACH payments are not allowed.
- Helcim Fee Saver is not compatible with digital wallets in HelcimPay.js.
- Uploaded logo must be smaller than 2MB and must be either a JPG, JPEG, or PNG file
  format.
- Your HelcimPay.js Initialization request should be made from your website or applications
  secure back-end server.
- The checkoutToken and secretToken returned by the HelcimPay.js initialize endpoint
  are only valid for 60 minutes after being returned.
- Another important aspect of handling webhooks is to verify the signature and timestamp
  when processing them.
- HelcimPay.js requires a browser to work.
- Integrate with HelcimPay.js to embed payments securely.
- The payment modal allows for various payment types and methods.
- To validate the transaction response, compare the hash returned in the response
  with your generated hash.
- HelcimPay.js can only process positive transactions.
- Digital wallets are not enabled by default.
- Helcim.js greatly reduces your scope of security and PCI compliance, by establishing
  a secure connection between the cardholder's web browser and the Helcim API.
- The Helcim system will create a basic customer object based on your default customer
  settings and the payment details passed by the customer in the modal.
- The Helcim system will create a basic object based on your default invoice settings.
- After you click `Save` a new Helcim.js Configuration Token and Secret Key will be
  generated under the Security Settings section.
- The uploaded logo must be smaller than 2MB and must be either a JPG, JPEG, or PNG
  file format.
- Testing on a developer test account is recommended when testing Helcim.js combined
  with the Payment API.
- Recommended Captcha Score Threshold is 0.50.
- Amount hashing is an optional security tool available when processing Purchase or
  Pre-Authorize transactions through Helcim.js.
- Ensure that the invoice that is linked has a status of 'DUE'
- Ensure that the 'Allow Partial Payment' setting is enabled in your Helcim account
  Settings.
- Credit card information input fields should not have an HTML field name, only an
  HTML field id.
- HTML input fields for sensitive credit card information should not have an HTML
  field name, only an HTML field 'id'.
- Helcim.js will intercept your form data based on the respective HTML input elements
  field ID value.
- Integrating into mobile applications must utilize a WebView wrapped in a native
  app.
- The hash value returned from your validateHash() function should match the hash
  value returned in the transaction response from Helcim.
- Partners can earn revenue for all payments processed through their technical integration.
- You do not need to enable Test Mode in your Helcim.js Configuration.
- Connected account registrations create production Helcim accounts.
- Webhook events will only trigger for the auto generated API token. The auto-generated
  token will contain read / write permissions and admin processing privileges. Any
  subsequent API tokens created by the merchant will not trigger this webhook event.
- HTML input fields for sensitive credit card information should not have an HTML
  field name, only an HTML field id.
- HTML input fields for sensitive credit card information should not have an HTML
  field name.
- The value of the field 'amount' is not required if Helcim.js is being used to complete
  a Verify transaction, as that amount is $0.00 by default.
- Include XML on Response setting must be toggled on for XML response.
- Partners benefit from transparent pricing, full access to Helcim’s developer tools,
  and dedicated technical support throughout the integration process.
- Connected account registrations also include optional functionality for pre-filling
  your unique Helcim registration URL with the merchants business information.
- The partner api-token is different from your partner-token or the merchant api-token.
- Webhook events will only trigger for the auto generated API token. The auto-generated
  token will contain read / write permissions and admin processing privileges.
errors:
- 400 Bad Request
- 401 Unauthorized
- 403 Unauthorized
- 'Transaction Declined: DECLINE CVV2 - Do not honor due to CVV2 mismatch\failure'
- 'Transaction Declined: PICK UP CARD - Pick up card'
- 'Transaction Declined: AMOUNT ERROR - Tran Amount Error'
- 'Transaction Declined: AMT OVER SVC LMT - Amount is more than established service
  limit'
- 'Transaction Declined: APPL TYPE ERROR - Call support for help with this error'
- 'Transaction Declined: CANNOT CONVERT - Check is ok, but cannot convert. Do Not
  Honor'
- 'Transaction Declined: DECLINED T4 - Do Not Honor. Failed negative check, unpaid
  items'
- 'Transaction Declined: DECLINED-HELP 9999 - System Error'
- 'Transaction Declined: DUP CHECK NBR - Duplicate Check Number'
- 'Transaction Declined: DECLINED - Do Not Honor'
- 'Transaction Declined: EXPIRED CARD - Expired Card'
- 'Transaction Declined: INVALID CARD - Invalid Card'
- 'Transaction Declined: INVALID CAVV - Invalid Cardholder Authentication Verification
  Value'
- 'Transaction Declined: INVALID TERM ID - Invalid Terminal ID'
- 'Transaction Declined: NETWORK ERROR - General System Error'
- 'Transaction Declined: PLEASE RETRY - Please Retry/Reenter Transaction'
- 'Transaction Declined: REQ. EXCEEDS BAL. - Req. exceeds balance'
- 'Transaction Declined: SERV NOT ALLOWED - Invalid request'
- 'Transaction Declined: CALL AUTH. CENTER - Refer to Issuer'
- '400: Bad Request'
- '401: Unauthorized'
- '403: Forbidden'
- '429: Too Many Requests'
- '500: Internal Server Error'
- '522: Service Unavailable'
- '429 Too Many Requests: Wait before sending more requests'
- '401 Unauthorized: Recheck OAuth scopes or token expiration'
- '409 status code: Returned if the idempotency key exists but the payload sent is
  different from the previous payload.'
- 'Transaction Declined: DECLINED - Suspected duplicate transaction in the last 5
  minutes.'
- 'REQUEST_LIMIT_EXCEEDED: Throttle API calls or reduce frequency.'
- '401 Unauthorized: Recheck OAuth scopes or token expiration.'
- Customer email address on file () is invalid.
- 'Invalid request: Ensure all required fields are included'
- 'Unauthorized: Check your API key and authentication settings'
- 'Invalid bank account details: Ensure the bank account information is correct.'
- 'PAD agreement not accepted: The PAD agreement must be accepted by the customer
  to process payments.'
- 'ERR_VALIDATION_FAILED: Field fails validation'
- 'ERR_UNAUTHENTICATED: Requester is unauthenticated'
- 'ERR_UNAUTHORIZED: You are not authorized to access this resource.'
- 'ERR_INVALID_REQUEST: Request is malformed'
- 'ERR_INTERNAL: An internal error has occurred'
- 'Invalid idempotency key: the request received conflicts with a previous request
  accepted by the API, often caused by an idempotency key that has been assigned to
  an existing successful transaction'
- '401 Unauthorized: Verify authentication credentials.'
- '404 Not Found: Subscription not found.'
- '400 Bad Request: Check the request parameters.'
- 'Transaction Declined: INCORRECT PIN'
- 'Transaction Declined: GENERIC DECLINE'
- Failed webhook event will retry based on a specified schedule.
- '202 Accepted: Request processed correctly but action not completed'
- '403 Unauthorized: Incorrect api-token or insufficient permissions'
- '404 Device Not Found: Incorrect device code'
- '409 Device Not Listening: Device not reachable'
- '500 Internal Server Error: Unknown error processing request'
- '202 Accepted: Request was formed correctly and processed'
- '404 Device Not Found: Incorrect code sent in the request'
- '409 Device Not Listening: Device is not reachable'
- '500 Internal Server Error: Unknown error encountered'
- 'DEVICE_NOT_REGISTERED: The device code entered does not exist or does not belong
  to a registered Smart Terminal.'
- 'A failed webhook event is attempted based on the following schedule: Immediately,
  5 seconds, 5 minutes, 30 minutes, 2 hours, 5 hours, 10 hours.'
- '202 Accepted: Request formed correctly but not completed'
- '404 Device Not Found: Incorrect code sent'
- Unauthorized
- No access permission
- Not allowed to send full card number
- Missing required cardData
- Missing required data
- Missing idempotency key
- Invalid line items
- Invalid phone number
- '202 Accepted: Returned when a request to the Smart Terminal API was formed correctly
  and processed.'
- '403 Unauthorized: Returned when the api-token sent in the header of your request
  was incorrect, or does not have the valid permissions to complete the request.'
- '404 Device Not Found: Returned when the code sent in the path parameters was not
  found by the API.'
- '409 Device Not Listening: Returned when the device is not reachable.'
- '500 Internal Server Error: Returned when the Smart Terminal API encountered an
  unknown error.'
- Processing a partial reverse is not possible.
- Standard processing fees will apply if Fee Saver is enabled for a checkout session
  with digital wallets.
- Transaction failed! Check the event status.
- Invalid hash! Check your generated hash against the Helcim hash.
- Convenience fee can only be applied when both payment methods exist
- 'CROSS_BORDER_ACH_NOT_ALLOWED: All ACH payments must be processed in the core local
  currency.'
- 'PAYMENT_IN_OPEN_BATCH: Payment must be in a closed credit card batch for refund.'
- 'CORS: Attempting to send your HelcimPay.js initialize request from your front-end
  or client side code.'
- 'Invalid credit card number: Ensure the card number is correct and does not contain
  spaces or special characters.'
- 'Transaction declined: Check the card''s status or available funds.'
- 'Missing required fields: Ensure all required fields are included in the request.'
- 'Card not verified: When sending payments to Payment API endpoints after verifying
  card details through Helcim.js in test mode'
- Transaction failed!
- Transaction aborted!
- '400 Bad Request: Validation issues present in request payload.'
- '401 Unauthorized: You are not authorized to access this resource.'
- '500 Internal Server Error: An internal error has occurred.'
- 'REQUEST_LIMIT_EXCEEDED: Throttle API calls or reduce frequency'
- 'QUERY_TIMEOUT: Break down filters or add selectivity'
- 'Card not verified: Card is not verified'
- '400 Bad Request: Validation issues with the request payload.'
- Webhook event delivery failed attempts will be retried based on the specified schedule.
auth_info:
  mentioned_objects: []
client:
  base_url: https://www.helcim.com/
  auth:
    type: oauth2
source_metadata: null
