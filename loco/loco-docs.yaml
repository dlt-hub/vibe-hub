resources:
- name: assets
  endpoint:
    path: /api/assets
    method: POST
    data_selector: id
    params: {}
- name: locales
  endpoint:
    path: /api/locales
    method: POST
    data_selector: code
    params: {}
- name: translations
  endpoint:
    path: /api/translations/{id}/{locale}
    method: POST
    data_selector: translation
    params: {}
- name: import
  endpoint:
    path: /api/import/{ext}
    method: POST
    data_selector: message
    params: {}
- name: export
  endpoint:
    path: /api/export/locale/{locale}.{format}
    method: GET
    data_selector: msgid
    params: {}
- name: auth_verify
  endpoint:
    path: /auth/verify
    method: GET
    data_selector: user
    params:
      key: ''
- name: export_all
  endpoint:
    path: /export/all.{ext}
    method: GET
    data_selector: ''
    params:
      ext: json
- name: import_progress
  endpoint:
    path: /import/progress/{id}
    method: GET
    data_selector: ''
    params:
      key: ''
- name: import
  endpoint:
    path: /import/{ext}
    method: POST
    data_selector: ''
    params:
      key: ''
- name: getLocales
  endpoint:
    path: /locales
    method: GET
    data_selector: locales
- name: createLocale
  endpoint:
    path: /locales
    method: POST
    data_selector: locale
- name: getLocale
  endpoint:
    path: /locales/{locale}
    method: GET
    data_selector: locale
- name: patchLocale
  endpoint:
    path: /locales/{locale}
    method: PATCH
    data_selector: locale
- name: deleteLocale
  endpoint:
    path: /locales/{locale}
    method: DELETE
- name: getLocaleErrors
  endpoint:
    path: /locales/{locale}/errors
    method: GET
    data_selector: ValidationError
    params:
      key: ''
- name: getLocaleProgress
  endpoint:
    path: /locales/{locale}/progress
    method: GET
    data_selector: object
    params:
      filter: ''
      key: ''
- name: getTranslations
  endpoint:
    path: /translations/{id}.json
    method: GET
    data_selector: Translation
    params:
      key: ''
      id: ''
- name: getTranslation
  endpoint:
    path: /translations/{id}/{locale}
    method: GET
    data_selector: Translation
    params:
      key: ''
      id: ''
      locale: ''
- name: translate
  endpoint:
    path: /translations/{id}/{locale}
    method: POST
    data_selector: Translation
    params:
      data: ''
      key: ''
      id: ''
      locale: ''
- name: untranslate
  endpoint:
    path: /translations/{id}/{locale}
    method: DELETE
    data_selector: Success
    params:
      key: ''
      id: ''
      locale: ''
- name: flagTranslation
  endpoint:
    path: /translations/{id}/{locale}/flag
    method: POST
- name: unflagTranslation
  endpoint:
    path: /translations/{id}/{locale}/flag
    method: DELETE
- name: getRevisions
  endpoint:
    path: /translations/{id}/{locale}/revisions
    method: GET
- name: ping
  endpoint:
    path: /ping
    method: GET
- name: ping404
  endpoint:
    path: /ping/not-found
    method: GET
- name: assets
  endpoint:
    path: /api/assets
    method: GET
- name: asset_by_id
  endpoint:
    path: /api/assets/{id}.json
    method: GET
- name: create_asset
  endpoint:
    path: /api/assets
    method: POST
- name: update_asset
  endpoint:
    path: /api/assets/{id}.json
    method: PATCH
- name: delete_asset
  endpoint:
    path: /api/assets/{id}.json
    method: DELETE
- name: get_plural_forms
  endpoint:
    path: /api/assets/{id}/plurals
    method: GET
- name: add_plural_form
  endpoint:
    path: /api/assets/{id}/plurals
    method: POST
- name: unlink_plural_form
  endpoint:
    path: /api/assets/{id}/plurals/{pid}.json
    method: DELETE
- name: tag_asset
  endpoint:
    path: /api/assets/{id}/tags
    method: POST
- name: untag_asset
  endpoint:
    path: /api/assets/{id}/tags/{tag}.json
    method: DELETE
- name: locales
  endpoint:
    path: /api/locales
    method: GET
- name: locale
  endpoint:
    path: /api/locales/{locale}
    method: GET
- name: locale_errors
  endpoint:
    path: /api/locales/{locale}/errors
    method: GET
- name: locale_progress
  endpoint:
    path: /api/locales/{locale}/progress
    method: GET
- name: export_all
  endpoint:
    path: /all.{ext}
    method: GET
- name: export_archive
  endpoint:
    path: /archive/{ext}.zip
    method: GET
- name: export_locale
  endpoint:
    path: /locale/{locale}.{ext}
    method: GET
- name: export_template
  endpoint:
    path: /template.{ext}
    method: GET
- name: import_progress
  endpoint:
    path: /api/import/progress/{id}
    method: GET
- name: import_assets
  endpoint:
    path: /api/import/{ext}
    method: POST
- name: tags
  endpoint:
    path: /api/tags
    method: GET
- name: create_tag
  endpoint:
    path: /api/tags
    method: POST
- name: tag_assets
  endpoint:
    path: /api/tags/{tag}.json
    method: POST
- name: modify_tag
  endpoint:
    path: /api/tags/{tag}.json
    method: PATCH
- name: delete_tag
  endpoint:
    path: /api/tags/{tag}.json
    method: DELETE
- name: assets
  endpoint:
    path: /api/docs/assets/createasset
    method: POST
    data_selector: assets
    params:
      id: Asset ID
notes:
- The preferred method of authentication is to send your key in the Authorization
  request header.
- No OAuth dance required â€” requires just a simple API key sent over SSL.
- The REST API is not currently rate-limited.
- API keys are unique, random strings and cannot be recovered once generated.
- All card transactions are performed using Stripe's pre-authorized tokens.
- We will only retrieve and store the data required to provide you with our service,
  which includes the same personal data as above, including your name, email address,
  profile picture, language and regional preferences.
- Logging in to Loco is not possible without accepting a session cookie named sessid.
- Further identifiers for security purposes may set when you log in, such as a session
  cookie named csrfid.
- Loco API operates only over SSL. Be sure to verify secure connections;
- Treat your keys as sensitively as passwords and regenerate them regularly (they
  don't expire);
- Use a read-only key whenever possible, especially when distributing links or deployment
  code.
- Loco doesn't enforce the uniqueness or correctness of aliases. They're just labels
  for use in your own application, and don't replace the standard tags used inside
  Loco.
- Loco only very loosely follows some of the principles in RFC 4647.
- Loco is platform agnostic, so any style of identifier can be supported within reasonable
  limits.
- Our API is provided for private development purposes, not for embedding in live
  applications.
- Please don't send public Internet traffic to our endpoints.
- If public Internet traffic is routed to our servers we will have to take measures
  which may affect your application.
- Our primary web servers at this domain don't make any outgoing HTTP connections.
- It's our application servers (which are behind firewalls) which you may wish to
  add to allow or deny lists.
- In October 2024 we identified some bugs in the resolution of key collisions as they
  occur in nested objects like JSON, YAML and PHP.
- 'Removal of ''source_text'' field: We''ve removed it. Specify ''arb-version=legacy''
  to get it back.'
- 'Removal of ''screen'' and ''video'' fields: We never supported these.'
- 'Extended placeholder formatting properties: These are now retained from file imports.'
- 'Addition of a global ''@@comment'' field: We''ve added this as per our standard
  export headers.'
errors:
- '401: Invalid API key'
- '403: Insufficient privileges'
- '404: Locale not in project'
- '404: Asset not in project'
- '429 Too many requests: Making too many requests simultaneously may result in status
  429.'
auth_info:
  mentioned_objects: []
client:
  base_url: https://localise.biz
  auth:
    type: apikey
    location: header
    header_name: Authorization
source_metadata: null
