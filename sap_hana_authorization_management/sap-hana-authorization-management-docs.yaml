resources:
- name: users_roles
  endpoint:
    path: /accounts/{accountName}/users/roles
    method: get
    data_selector: roles
    params: {}
- name: users
  endpoint:
    path: /accounts/{accountName}/users
    method: GET
- name: groups
  endpoint:
    path: /accounts/{accountName}/groups
    method: GET
- name: roles
  endpoint:
    path: /accounts/{accountName}/apps/{appName}/roles
    method: GET
- name: users
  endpoint:
    path: /accounts/{accountName}/users
    method: GET
- name: groups
  endpoint:
    path: /accounts/{accountName}/groups
    method: GET
- name: roles
  endpoint:
    path: /accounts/{accountName}/apps/{appName}/roles
    method: GET
- name: users
  endpoint:
    path: /accounts/{accountName}/users
    method: GET
    data_selector: users
    params:
      accountName: required
- name: groups
  endpoint:
    path: /accounts/{accountName}/groups
    method: GET
    data_selector: groups
    params:
      accountName: required
- name: roles
  endpoint:
    path: /accounts/{accountName}/apps/{appName}/roles
    method: GET
    data_selector: roles
    params:
      accountName: required
      appName: required
- name: users
  endpoint:
    path: /accounts/{accountName}/users
    method: GET
- name: groups
  endpoint:
    path: /accounts/{accountName}/groups
    method: GET
- name: roles
  endpoint:
    path: /accounts/{accountName}/apps/{appName}/roles
    method: GET
- name: users
  endpoint:
    path: /accounts/{accountName}/users
    method: GET
- name: groups
  endpoint:
    path: /accounts/{accountName}/groups
    method: GET
- name: roles
  endpoint:
    path: /accounts/{accountName}/apps/{appName}/roles
    method: GET
- name: users
  endpoint:
    path: /accounts/{accountName}/users
    method: GET
    data_selector: users
    params: {}
- name: groups
  endpoint:
    path: /accounts/{accountName}/groups
    method: GET
    data_selector: groups
    params: {}
- name: roles
  endpoint:
    path: /accounts/{accountName}/apps/{appName}/roles
    method: GET
    data_selector: roles
    params: {}
notes: []
errors:
- '400: RoleName parameter is not passed in the request or the role does not exist.'
- '400: Groups parameter is not passed in the request.'
- '400: The specified account is invalid.'
- '503: Service is currently unavailable.'
- 503 Service Unavailable
- 400 Bad Request
- '503: Service is currently unavailable'
- 'REQUEST_LIMIT_EXCEEDED: Throttle API calls or reduce frequency'
- 'QUERY_TIMEOUT: Break down filters or add selectivity'
- '401 Unauthorized: Recheck OAuth scopes or token expiration'
- RoleName parameter is not passed in the request.
- Invalid credentials.
- Internal server error.
- '503 Service Unavailable: Service is currently unavailable'
- '400 Bad Request: RoleName parameter is not passed in the request.'
- '400 Bad Request: RoleName parameter is not passed in the request or the role does
  not exist.'
- '401 Unauthorized: Invalid credentials.'
auth_info:
  mentioned_objects: []
client:
  base_url: https://api.{landscapeHost}/authorization/v1
  auth:
    type: oauth2
    token_url: https://api.{landscapeHost}/oauth2/apitoken/v1
    client_id: '{{ dlt.secrets[''api_client_id''] }}'
    client_secret: '{{ dlt.secrets[''api_client_secret''] }}'
  headers:
    Authorization: Bearer <token value>
source_metadata: null
