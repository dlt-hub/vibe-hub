resources:
- name: session
  endpoint:
    path: /user/session
    method: GET
    data_selector: records
    params: {}
- name: preferences
  endpoint:
    path: /preferences
    method: GET
    data_selector: preferences
    params: {}
- name: state
  endpoint:
    path: /state
    method: GET
    data_selector: state
    params: {}
- name: crash_reports
  endpoint:
    path: /reference/android-crash-reports
    method: GET
- name: preferences
  endpoint:
    path: /preferences
    method: GET
    data_selector: preferences
    params: {}
- name: state
  endpoint:
    path: /state
    method: GET
    data_selector: state
    params: {}
- name: project_key
  endpoint:
    path: /project_key
    method: GET
    data_selector: project_key
    params: {}
- name: Analytics
  endpoint:
    path: /analytics
    method: GET
- name: Crash Reports
  endpoint:
    path: /reference/android-crash-reports
    method: GET
- name: sdk_instance
  endpoint:
    path: /reference/sdk-instance
    method: GET
    data_selector: records
    params: {}
- name: project_key
  endpoint:
    path: /reference/project-key
    method: GET
    data_selector: records
    params: {}
- name: recordings
  endpoint:
    path: /reference/recordings
    method: GET
    data_selector: records
    params: {}
- name: session
  endpoint:
    path: /reference/session
    method: GET
    data_selector: records
    params: {}
- name: session
  endpoint:
    path: /user/session
    method: GET
    data_selector: sessionData
- name: user
  endpoint:
    path: /user
    method: GET
    data_selector: records
- name: preferences
  endpoint:
    path: /preferences
    method: GET
    data_selector: preferences
    params: {}
- name: state
  endpoint:
    path: /state
    method: GET
    data_selector: state
    params: {}
- name: user_identifier
  endpoint:
    path: /user/identifier
    method: SET
    data_selector: identifier
    params: {}
- name: user_name_email
  endpoint:
    path: /user/name_email
    method: SET
    data_selector: name_email
    params: {}
- name: user_properties
  endpoint:
    path: /user/properties
    method: SET
    data_selector: properties
    params: {}
- name: open_new_user
  endpoint:
    path: /user/open_new
    method: POST
    data_selector: new_user
    params: {}
- name: user_url
  endpoint:
    path: /user/url
    method: GET
    data_selector: url
    params: {}
- name: user_notification
  endpoint:
    path: /user/notification
    method: OBSERVE
    data_selector: notification
    params: {}
- name: recording
  endpoint:
    path: /api/recording
    method: GET
    data_selector: recordings
    params: {}
- name: session
  endpoint:
    path: /user/session
    method: GET
    data_selector: sessionURL
- name: user_identifier
  endpoint:
    path: /user/identifier
    method: POST
    data_selector: identifier
- name: user_name
  endpoint:
    path: /user/name
    method: POST
    data_selector: name
- name: user_email
  endpoint:
    path: /user/email
    method: POST
    data_selector: email
- name: user_properties
  endpoint:
    path: /user/properties
    method: POST
    data_selector: properties
- name: new_user_session
  endpoint:
    path: /user/new
    method: POST
    data_selector: new_session
- name: user_url
  endpoint:
    path: /user/url
    method: GET
    data_selector: url
- name: user_listeners
  endpoint:
    path: /user/listeners
    method: POST
    data_selector: listeners
- name: user_sessions
  endpoint:
    path: /api/v2/user/sessions
    method: POST
    data_selector: sessions
    params: {}
- name: preferences
  endpoint:
    path: /preferences
    method: GET
    data_selector: data
- name: state
  endpoint:
    path: /state
    method: GET
    data_selector: data
- name: session
  endpoint:
    path: /session
    method: GET
    data_selector: sessionData
- name: user
  endpoint:
    path: /user
    method: GET
    data_selector: user_data
- name: preferences
  endpoint:
    path: /preferences
    method: GET
    data_selector: preferences
- name: state
  endpoint:
    path: /state
    method: GET
    data_selector: state
- name: session
  endpoint:
    path: /user/session
    method: GET
    data_selector: sessionUrl
- name: project_key
  endpoint:
    path: /project/key
    method: GET
    data_selector: projectKey
- name: user_identifier
  endpoint:
    path: /user/identifier
    method: POST
    data_selector: identifier
    params: {}
- name: user_name_email
  endpoint:
    path: /user/name_email
    method: POST
    data_selector: name_email
    params: {}
- name: user_properties
  endpoint:
    path: /user/properties
    method: GET
    data_selector: properties
    params: {}
- name: open_new_user
  endpoint:
    path: /user/open_new
    method: POST
    data_selector: new_user
    params: {}
- name: user_url
  endpoint:
    path: /user/url
    method: GET
    data_selector: url
    params: {}
- name: projectAPIKey
  endpoint:
    path: /settings/projects
    method: GET
    data_selector: data
- name: session
  endpoint:
    path: /user/session
    method: GET
    data_selector: sessionUrl
- name: user_identifier
  endpoint:
    path: /user/identifier
    method: POST
    data_selector: identifier
- name: user_name_email
  endpoint:
    path: /user/name-email
    method: POST
    data_selector: name_email
- name: user_properties
  endpoint:
    path: /user/properties
    method: GET
    data_selector: properties
- name: open_new_user
  endpoint:
    path: /user/open-new
    method: POST
    data_selector: new_user
- name: user_url
  endpoint:
    path: /user/url
    method: GET
    data_selector: url
- name: user_listeners
  endpoint:
    path: /user/listeners
    method: POST
    data_selector: listeners
- name: preferences
  endpoint:
    path: /preferences
    method: GET
    data_selector: preferences
    params: {}
- name: state
  endpoint:
    path: /state
    method: GET
    data_selector: state
    params: {}
- name: session
  endpoint:
    path: /session
    method: GET
    data_selector: recordings
- name: session
  endpoint:
    path: /instance/user/session
    method: POST
    data_selector: session
    params: {}
- name: user
  endpoint:
    path: /instance/user
    method: POST
    data_selector: user
    params: {}
- name: user_identifier
  endpoint:
    path: /user/identifier
    method: POST
    data_selector: user_identifier
- name: user_name
  endpoint:
    path: /user/name
    method: POST
    data_selector: user_name
- name: user_email
  endpoint:
    path: /user/email
    method: POST
    data_selector: user_email
- name: user_properties
  endpoint:
    path: /user/properties
    method: POST
    data_selector: user_properties
- name: open_new_user
  endpoint:
    path: /user/open_new
    method: POST
    data_selector: open_new_user
- name: user_url
  endpoint:
    path: /user/url
    method: GET
    data_selector: user_url
- name: Preferences
  endpoint:
    path: /preferences
    method: GET
    data_selector: preferences
    params: {}
- name: State
  endpoint:
    path: /state
    method: GET
    data_selector: state
    params: {}
- name: recording
  endpoint:
    path: /recording
    method: POST
    data_selector: recording
- name: user_properties
  endpoint:
    path: /user/properties
    method: POST
    data_selector: userProperties
    params: {}
- name: user_identifier
  endpoint:
    path: /user/identifier
    method: POST
    data_selector: identifier
- name: user_name
  endpoint:
    path: /user/name
    method: POST
    data_selector: name
- name: user_email
  endpoint:
    path: /user/email
    method: POST
    data_selector: email
- name: user_properties
  endpoint:
    path: /user/properties
    method: POST
    data_selector: properties
- name: open_new_user
  endpoint:
    path: /user/new
    method: POST
    data_selector: new_user
- name: user_url
  endpoint:
    path: /user/url
    method: GET
    data_selector: url
- name: user_url_listener
  endpoint:
    path: /user/url/listener
    method: POST
    data_selector: listener
- name: preferences
  endpoint:
    path: /preferences
    method: GET
    data_selector: preferences
- name: state
  endpoint:
    path: /state
    method: GET
    data_selector: state
- name: project_key
  endpoint:
    path: /project/key
    method: GET
    data_selector: project_key
- name: session
  endpoint:
    path: /session
    method: GET
    data_selector: records
- name: user_identifier
  endpoint:
    path: /user/identifier
    method: GET
    data_selector: identifier
- name: user_name
  endpoint:
    path: /user/name
    method: GET
    data_selector: name
- name: user_email
  endpoint:
    path: /user/email
    method: GET
    data_selector: email
- name: user_properties
  endpoint:
    path: /user/properties
    method: GET
    data_selector: properties
- name: Smartlook
  endpoint:
    path: /api/v2/smartlook
    method: POST
    data_selector: sessions
    params: {}
- name: session
  endpoint:
    path: /session
    method: GET
    data_selector: recordings
- name: SmartlookSetupConfig
  endpoint:
    path: /settings/projects
    method: GET
- name: user
  endpoint:
    path: /user
    method: GET
    data_selector: user_data
- name: session
  endpoint:
    path: /user/session
    method: GET
    data_selector: sessionInfo
    params: {}
- name: project_key
  endpoint:
    path: /preferences/projectKey
    method: GET
    data_selector: projectKey
    params: {}
- name: preferences
  endpoint:
    path: /preferences
    method: GET
    data_selector: preferences
    params: {}
- name: state
  endpoint:
    path: /state
    method: GET
    data_selector: state
    params: {}
- name: project_key
  endpoint:
    path: /project/key
    method: GET
    data_selector: project_key
    params: {}
- name: frame_rate
  endpoint:
    path: /frame_rate
    method: GET
    data_selector: frame_rate
    params: {}
- name: event_tracking
  endpoint:
    path: /event_tracking
    method: GET
    data_selector: event_tracking
    params: {}
- name: user_identifier
  endpoint:
    path: /user/identifier
    method: POST
    data_selector: identifier
    params: {}
- name: user_properties
  endpoint:
    path: /user/properties
    method: PUT
    data_selector: properties
    params: {}
- name: open_new_user
  endpoint:
    path: /user/openNew
    method: POST
    data_selector: newUser
    params: {}
- name: user_url
  endpoint:
    path: /user/url
    method: GET
    data_selector: url
    params: {}
- name: preferences
  endpoint:
    path: /reference/preferences
    method: GET
    data_selector: preferences
    params: {}
- name: state
  endpoint:
    path: /reference/state
    method: GET
    data_selector: state
    params: {}
- name: event_tracking
  endpoint:
    path: /preferences/eventTracking
    method: POST
    data_selector: eventTracking
- name: user_sessions
  endpoint:
    path: /api/user_sessions
    method: POST
    data_selector: records
    params: {}
- name: session
  endpoint:
    path: /user/session
    method: GET
    data_selector: sessionUrl
    params: {}
- name: user
  endpoint:
    path: /user
    method: GET
    data_selector: user
    params: {}
- name: project-key
  endpoint:
    path: /project/settings
    method: GET
    data_selector: records
- name: preferences
  endpoint:
    path: /preferences
    method: GET
- name: state
  endpoint:
    path: /state
    method: GET
- name: event_tracking
  endpoint:
    path: /preferences/eventTracking
    method: GET
    data_selector: events
    params: {}
- name: user_interaction_events
  endpoint:
    path: /preferences/eventTracking/interaction
    method: GET
    data_selector: interaction_events
    params: {}
- name: smartlook
  endpoint:
    path: /v1.0/sdk
    method: GET
    data_selector: recordings
- name: Smartlook Unity
  endpoint:
    path: /v1.0/reference/unity-sdk-installation
    method: GET
- name: session
  endpoint:
    path: /api/sessions
    method: GET
    data_selector: sessions
- name: events
  endpoint:
    path: /api/events
    method: GET
    data_selector: events
- name: session
  endpoint:
    path: /api/v2/sessions
    method: POST
    data_selector: session_data
- name: user
  endpoint:
    path: /api/v2/users
    method: POST
    data_selector: user_data
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: recording
  endpoint:
    path: /setupAndStartRecording
    method: POST
    data_selector: records
- name: setup
  endpoint:
    path: /setup
    method: POST
    data_selector: setup
    params:
      apiKey: required
- name: event_tracking_modes
  endpoint:
    path: /v1.0/docs/event-tracking
    method: GET
    data_selector: eventTrackingModes
- name: events
  endpoint:
    path: /v1/events
    method: GET
    data_selector: data
- name: recording
  endpoint:
    path: /setupAndStartRecording
    method: POST
    data_selector: records
- name: user_identifier
  endpoint:
    path: /user/identifier
    method: POST
    data_selector: identifier
    params: {}
- name: user_properties
  endpoint:
    path: /user/properties
    method: POST
    data_selector: properties
    params: {}
- name: event_tracking_modes
  endpoint:
    path: /v1.0/docs/event-tracking
    method: GET
    data_selector: eventTrackingModes
- name: crash_reports
  endpoint:
    path: /v1.0/crash-reports
    method: POST
    data_selector: data
    params: {}
- name: lifecycle_recording
  endpoint:
    path: /v1.0/reference/lifecycle-and-recording
    method: GET
    data_selector: records
- name: Crash Reports
  endpoint:
    path: /v1.0/reference/android-crash-reports
    method: GET
- name: Bugsnag
  endpoint:
    path: /v1.0/reference/android-integration-bugsnag
    method: GET
- name: Sources
  endpoint:
    path: /v1.0/reference/sources
    method: GET
- name: API Documentation
  endpoint:
    path: /v1.0/reference/android-api-documentation
    method: GET
- name: Integrations
  endpoint:
    path: /v1.0/reference/android-integrations
    method: GET
- name: Utility methods
  endpoint:
    path: /v1.0/reference/android-utility-methods
    method: GET
- name: Network intercepting
  endpoint:
    path: /v1.0/reference/android-network-intercepting
    method: GET
- name: Rendering
  endpoint:
    path: /v1.0/reference/android-rendering
    method: GET
- name: Analytics
  endpoint:
    path: /v1.0/reference/android-analytics
    method: GET
- name: User Identification
  endpoint:
    path: /v1.0/reference/android-user-identification
    method: GET
- name: Sensitive data hiding
  endpoint:
    path: /v1.0/reference/android-sensitive-data-hiding
    method: GET
- name: Lifecycle & Recording
  endpoint:
    path: /v1.0/reference/android-lifecycle-recording
    method: GET
- name: SDK Installation
  endpoint:
    path: /v1.0/reference/android-sdk-installation
    method: GET
- name: Migration guide
  endpoint:
    path: /v1.0/reference/migration-guide
    method: GET
- name: Integrations List
  endpoint:
    path: /v1.0/reference/android-integrations-list
    method: GET
- name: user_identifier
  endpoint:
    path: /v1.0/reference/user-identification
    method: GET
- name: user_properties
  endpoint:
    path: /v1.0/reference/user-properties
    method: GET
- name: smartlook_integration
  endpoint:
    path: /v1.0/integration
    method: POST
    data_selector: integrations
    params: {}
- name: open_new_session
  endpoint:
    path: /v1.0/reference/android-lifecycle-recording#opening-a-new-session
    method: GET
    data_selector: session
- name: reset_session
  endpoint:
    path: /v1.0/reference/android-lifecycle-recording#reset-sessionuser
    method: GET
    data_selector: session
- name: setup
  endpoint:
    path: /setup
    method: POST
    data_selector: setupResponse
    params:
      apiKey: API_KEY
      fps: 2
      startNewSession: false
      startNewSessionAndUser: false
- name: user_identifier
  endpoint:
    path: /user/identifier
    method: POST
    data_selector: userIdentifier
- name: user_properties
  endpoint:
    path: /user/properties
    method: POST
    data_selector: userProperties
- name: event_tracking_modes
  endpoint:
    path: /v1.0/docs/event-tracking
    method: GET
    data_selector: eventTrackingMode
- name: user_identifier
  endpoint:
    path: /user/identifier
    method: POST
    data_selector: userIdentifier
- name: session_property
  endpoint:
    path: /session/property
    method: POST
    data_selector: sessionProperty
- name: setup
  endpoint:
    path: /setup
    method: POST
    data_selector: records
- name: smartlook_integration
  endpoint:
    path: /smartlook/integration
    method: POST
    data_selector: data
- name: track
  endpoint:
    path: /track
    method: POST
    data_selector: payload
- name: setup
  endpoint:
    path: /api/setup
    method: POST
    data_selector: results
- name: setup
  endpoint:
    path: /setup
    method: POST
    data_selector: setup_response
- name: recording
  endpoint:
    path: /recording
    method: POST
    data_selector: recording_response
- name: user_identifier
  endpoint:
    path: /user/identifier
    method: POST
    data_selector: userIdentifier
- name: user_properties
  endpoint:
    path: /user/properties
    method: POST
    data_selector: userProperties
- name: user_identifier
  endpoint:
    path: /v1.0/user_identifier
    method: POST
    data_selector: identifier
    params: {}
- name: user_properties
  endpoint:
    path: /v1.0/user_properties
    method: POST
    data_selector: sessionProperties
    params: {}
- name: event_tracking_modes
  endpoint:
    path: /v1.0/docs/event-tracking
    method: GET
    data_selector: eventTrackingModes
    params: {}
- name: manual_integration
  endpoint:
    path: /v1.0/reference/manual-integration
    method: GET
    data_selector: event
    params: {}
- name: setup
  endpoint:
    path: /setup
    method: POST
    data_selector: setupOptions
- name: sdk_setup
  endpoint:
    path: /v1.0/reference/sdk-setup
    method: POST
    data_selector: setup
    params:
      apiKey: API_KEY
- name: user_identifier
  endpoint:
    path: /user/identifier
    method: POST
    data_selector: identifier
    params: {}
- name: user_properties
  endpoint:
    path: /user/properties
    method: POST
    data_selector: properties
    params: {}
- name: session_recording
  endpoint:
    path: /services/data/v2.0/sessions
    method: POST
    data_selector: recordings
    params: {}
- name: SetupOptions
  endpoint:
    path: /v1.0/reference/setup-options
    method: GET
    data_selector: parameters
    params: {}
- name: session
  endpoint:
    path: /reset/session
    method: POST
    data_selector: ''
    params: {}
- name: user
  endpoint:
    path: /reset/user
    method: POST
    data_selector: ''
    params: {}
- name: user_identifier
  endpoint:
    path: /user/identifier
    method: POST
    data_selector: result
- name: session_property
  endpoint:
    path: /session/property
    method: POST
    data_selector: result
- name: SDK setup
  endpoint:
    path: /v1.0/reference/sdk-setup
    method: GET
    data_selector: records
    params: {}
- name: User Identifier
  endpoint:
    path: /user/identifier
    method: POST
    data_selector: identifier
    params: {}
- name: User Properties
  endpoint:
    path: /user/properties
    method: POST
    data_selector: properties
    params: {}
- name: session
  endpoint:
    path: /analytics/session
    method: POST
    data_selector: session
    params: {}
- name: user
  endpoint:
    path: /analytics/user
    method: POST
    data_selector: user
    params: {}
notes:
- Smartlook can store metadata in the EU and North America.
- User sessions can be recorded even if you haven't set the project key. Recorded
  data is saved but not sent.
- Uses rendering modes to handle sensitive data.
- Network tracking and interception is supported in Android SDK version 2.2.2 and
  up.
- Due to Smartlook Privacy by design, not all data is captured.
- A unique project key is needed for the SDK to upload and process recordings.
- Fragment navigation event detection is disabled by default.
- The minimum supported Android version is Jelly Bean (API 18).
- By default, all automatically detected events are tracked, except Fragment navigation
  events.
- Xcode's Main Thread Checker may cause delays when starting in debug mode.
- Minimum supported Android version is Jelly Bean (API 18)
- Smartlook SDK requires iOS 13+ target, has Swift API, and is available via Swift
  Package Manager or for direct download.
- Smartlook only uploads sessions when the device is connected to wifi.
- The default rendering mode for the Smartlook SDK is Native (`.native`)
- You can only have one `Recording mask` set at a time
- Smartlook doesn't collect location, however, location can be determined in backend.
  This functionality can be disabled on the service backend.
- Support for sensitivity in SwiftUI is available from version 2.1 and is a standard
  part of the Smartlook SDK.
- Sensitive elements are hidden locally on the device. No sensitive data is transferred
  to or stored in the dashboard.
- Updated 4 months ago
- Network tracking and interception is supported in iOS SDK version 2.2.4 and up.
- User sessions can be recorded even if you haven't set the project key. Recorded
  data is saved but not sent. Once you set the project key, the data is sent.
- By default, all automatically detected events are tracked.
- The minimum supported iOS version is iOS 13
- The minimum supported Smartlook SDK version is 2.1.2
- Identifier cannot be null or empty, maximum length is 120 characters.
- User name and email act as an alias, added under 'name' and 'email' keys.
- Minimum supported iOS version is iOS 13
- Minimum supported Smartlook SDK version is 2.1.2
- The default can be restored using the provided Swift code.
- User sessions can be recorded even if you haven't set the project key. Recorded
  data are saved but not sent. Once you set the project key, the data is sent.
- User properties can be added, retrieved, and removed.
- The SDK only uploads sessions when the device is connected to wifi.
- User sessions can be recorded even if you haven't set the project key. Recorded
  data are saved but not sent.
- Reset session & user can be done using Smartlook.resetSession(true).
- Smartlook records user interactions sessions. Every session has a single user and
  a single user can have multiple sessions.
- 'Name restrictions: Cannot be empty or null, maximum length is 200 characters, can
  only contain alphanumeric characters, underscore (_), comma (,), period (.), and
  hyphen (-), must start with an alphabetic character.'
- 'Value restrictions: Maximum length is 5 kilobytes.'
- By default, all automatically detected events are tracked, except Fragment navigation
  events on Android.
- Open new session or user with Smartlook.instance.user.openNewSession() or Smartlook.instance.user.openNewUser()
- Smartlook functionality must be implemented in the native code
- SDK will upload sessions only on WiFi
- 'Name restrictions: Cannot be empty or null. The maximum length is 200 characters.
  Can only contain alphanumeric characters, underscore (_), comma (,), period (.),
  and hyphen (-). Must start with an alphabetic character.'
- 'Value restrictions: The maximum length is 5 kilobytes.'
- Uses OAuth2 with refresh token — requires setup of connected app in api
- Some objects like Contact may return nulls in deeply nested fields
- Default rendering mode for the Smartlook SDK is Native.
- Sensitive elements are hidden locally on the device.
- WebView recording is enabled by default. To ensure security, set elements as sensitive.
- Identifier cannot be null or empty; maximum length is 120 characters.
- User URL is only available when the SDK can communicate with the Smartlook backend.
- Open new session & user methods available
- When using the Native rendering mode, the SDK can record sensitive data in your
  application.
- 'Value restrictions: maximum length is 5 kilobytes.'
- 'Identifier restrictions: Cannot be null or empty, Maximum length is 120 characters.'
- 'New user session: Opening a new user opens a new session.'
- SDK will upload sessions only on WiFi.
- The Smartlook Ionic plugin works well with the capacitor engine.
- If you would like to upload your data when the device is on mobile data, you can
  enable Upload on mobile (cellular) data in project settings.
- All event properties are now mutable. If immutability of certain properties is needed
  it must be ensured on the client-side.
- Event tracking is no longer represented as a list of modes. They are rewritten with
  an easy-to-use API.
- The SDK can use different methods of capturing screen image data.
- Due to reported issues with video responsiveness on iOS, we recommend turning off
  the Adaptive Frame Rate feature.
- The Smartlook SDK only uploads sessions when the device is connected to wifi.
- To setup Smartlook, the unique projectAPI Key is needed.
- Currently, apps based on Xamarin.Forms are not supported.
- iOS Simulator does not upload the recording. Please use real device.
- Both user.name and user.email act as an alias. They are added to user.properties
  under the name and email keys.
- The default rendering mode for the Smartlook SDK is Native.
- To setup Smartlook, the unique projectAPI Key is needed. It can be found in the
  mobile project settings in the Smartlook Dashboard.
- No rendering documentation.
- The SDK requires Unity 2019.1 or higher.
- Smartlook SDK only uploads sessions when connected to wifi; can enable upload on
  mobile data in project settings.
- User sessions can be recorded even if you haven't set the project key. Without a
  project key, Smartlook collects data but does not send it.
- Rendering modes is only fully available on some platforms.
- Smartlook SDK only uploads sessions when the device is connected to wifi.
- The Smartlook SDK requires iOS 13+ target, has Swift API, and is available via Swift
  Package Manager or for direct download.
- Smartlook SDK with Cocos is an experimental feature
- Some features may not be available for Cocos apps.
- The SDK is provided 'as is' and 'as available' without warranty of any kind from
  Google.
- 'Currently, the following platforms support wireframe rendering: Android, iOS.'
- Open new session & user
- If you want to change your data storage location, contact Smartlook Sales or Support.
- Smartlook can store metadata in the EU and North America. If you want to change
  your data storage location, contact Smartlook Sales or Support.
- When uploading on mobile connections is requested, too, it must be enabled in the
  project settings in the dashboard.
- Some Android simulators are not very reliable when running low-level libraries like
  Smartlook. Testing on real devices is preferred when debugging an application that
  utilizes Smartlook.
- When debugging an iOS application with Smartlook, a Main Thread Checker warning
  which might be accompanied by a short application freeze during the application
  start is encountered. The freeze does not happen in production builds.
- SDK will upload sessions only on Wi-Fi.
- Smartlook now records all user sessions in your application.
- Smartlook SDK needs to be initialized with an API key that can be acquired in the
  Smartlook Dashboard.
- Identifiers can be found in the Dashboard and are very useful for finding specific
  user’s recordings.
- Note that email or name property will be displayed in the list of visitors in the
  Smartlook Dashboard. Otherwise the identifier is used.
- NO_RENDERING mode does not record any screen data, this is beneficial on screens
  that include sensitive data
- Smartlook SDK will not read or send out any body data, it is reading and sending
  only request metadata.
- Requires setup of OAuth2 credentials in Smartlook dashboard
- Currently the minimal supported Android version is Jelly Bean (API 18).
- In order to upload the mapping file, the REST API token is needed.
- Smartlook can be automatically integrated into Amplitude using the provided code
  snippets.
- SDK needs to be initialized with an API key that can be acquired in the Smartlook
  Dashboard.
- Recording is stopped automatically on application closure.
- Sensitive elements are hidden locally on the device; no sensitive data are transferred
  over the network and stored in the dashboard.
- enableIntegration integration must be called after Heap is initialized.
- 'Some analytic events are recorded out-of-box: Activity/Fragment changes, Focus
  changes, Clicked views, Application crashes.'
- Full Mixpanel documentation with examples can be found on the official website
- NO_RENDERING mode does not record any screen data, this is beneficial on screens
  that include sensitive data.
- All intercepted requests can be displayed in dev tools on every recording.
- Intercepted headers can contain sensitive data, so they need to be filtered out
  by their name.
- If at least one sensitive header name regex is added, default ones are not going
  to be used.
- Smartlook SDK tries to disable automatic integration and removes 'integrated' URLs
  from targeted analytic tools. This however is a 'best effort' try and cannot be
  guaranteed to be successful.
- To upload the mapping file, the REST API token is needed.
- SDK needs to be called only once during an application’s lifetime and it should
  be called on application startup.
- SDK can record sensitive data in your application
- Sensitive elements are hidden locally on the device. No sensitive data are transferred
  over the network and stored in the dashboard.
- The user must be identified in Mixpanel for Smartlook automatic integration to work
  correctly.
- Full Firebase Crashlytics documentation can be found on the official website
- Smartlook Middleware integration translates Segment's track, screen, identify, alias,
  and reset calls to the respective Smartlook method calls.
- When enabled, the Smartlook's type is always .enter.
- Full Segment documentation for mobile platforms can be found on the official website.
- SDK setup needs to be called only once during an application’s lifetime.
- When uploading on mobile connections is requested, it must be enabled in the project
  settings in the dashboard.
- Some analytic events are recorded out-of-box.
- 'Some classes are blacklisted by default: UITextView, UITextField and WKWebView.'
- Further info about event tracking modes could be found in the Event Tracking conceptual
  document.
- Smartlook can be auto-integrated into you project’s Crashlytics
- Recording stops automatically on application closure.
- The options argument can filter unnecessary or unwanted mapping.
- The SDK setup needs to be called only once during an application’s lifetime.
- SDK will stop recording itself automatically on application closure.
- All inputs are hidden by default except for button and submit types.
- Some screens can leak sensitive data even through automatically detected touch events.
- On web based frameworks SDK is not able to autodetect all events like on native
  frameworks.
- SDK needs to be called only once during an application’s lifetime.
- Smartlook can be easily integrated into Segment by installing the @smartlook/segment-react-native-plugin-smartlook
  and the smartlook-react-native-wrapper dependency.
- Event properties will effectively use only flat objects. In case an object that
  includes objects or arrays as a child elements is used, these elements are going
  to be ignored.
- Navigation events need to be tracked manually, because web technology based applications
  typically consist of single activity. Manual tracking needs to be implemented so
  mobile heatmaps work correctly.
- 'Excessive logging can be turned off by using the command in the terminal: flutter
  logs'
- Map views are not supported.
- The SDK will upload sessions only on WiFi. When uploading on mobile connections
  is requested, too, it must be enabled in the project settings in the dashboard.
- This URL can be opened only by someone who has access to your dashboard. This is
  not a public shareable link.
- SDK setup needs to be called only once during an application’s lifetime and should
  be called on application startup.
- NoRendering mode does not record any screen data, this is beneficial on screens
  that include sensitive data.
- Application can handle dashboard URLs changes and pass the current values to other
  analytics frameworks by implementing the respective EventHandler.
- SDK setup needs to be called only once during an application’s lifetime and it should
  be called on application startup.
- There is no need to stop recording explicitly on application closure, SDK will stop
  itself automatically.
- Event properties will effectively use only flat objects.
- Navigation events need to be tracked manually.
- Properties set in start will be merged with properties set in stop/cancel.
- Global event properties have higher a priority.
- SDK only uploads sessions when connected to wifi unless enabled in project settings.
- Xamarin.Forms apps are not supported.
- SDK will upload sessions only on WiFi. When uploading on mobile connections is requested,
  too, it must be enabled in the project settings in the dashboard.
- Uses methods to open new sessions and users in API 2.0
- SDK setup needs to be called only once during an application’s lifetime
errors:
- 'REQUEST_LIMIT_EXCEEDED: Throttle API calls or reduce frequency'
- 'QUERY_TIMEOUT: Break down filters or add selectivity'
- '401 Unauthorized: Recheck API token or token expiration'
- '401 Unauthorized: Recheck OAuth scopes or token expiration'
- 'id: Could not find or use auto-linked library ''swiftCompatibility56'''
- 'id: symbol(s) not found for architecture x86_64'
- 'INVALID_API_KEY: Check the API key provided'
- 'SESSION_TIMEOUT: The session has expired, please reinitialize'
- '401 Unauthorized: Check your credentials and OAuth scopes'
- '429 Too Many Requests: Rate limit exceeded'
- 'Invalid API Key: Ensure the API key is correct and has not expired.'
- 'API_KEY_MISSING: Provide a valid API key.'
- 'INVALID_FPS_VALUE: Allowed values for fps are between 2 and 10.'
auth_info:
  mentioned_objects:
  - REST API token
  - OauthToken
  - AuthProvider
  - NamedCredential
client:
  base_url: https://integrations.smartlook.com
  auth:
    type: oauth2
source_metadata: null
