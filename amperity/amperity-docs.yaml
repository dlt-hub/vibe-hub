resources:
- name: ActiveCampaign
  endpoint:
    path: /api/3/
    method: GET
    data_selector: records
- name: Adobe Campaign
  endpoint:
    path: /api/some_endpoint
    method: GET
    data_selector: records
- name: Braze
  endpoint:
    path: /api/some_endpoint
    method: GET
    data_selector: records
- name: Mailchimp
  endpoint:
    path: /api/some_endpoint
    method: GET
    data_selector: records
- name: indexes
  endpoint:
    path: /indexes
    method: GET
- name: index_by_id
  endpoint:
    path: /indexes/{id}
    method: GET
- name: profiles_by_index
  endpoint:
    path: /indexes/{id}/profiles
    method: GET
- name: profile_by_index_and_id
  endpoint:
    path: /indexes/{id}/profiles/{id}
    method: GET
- name: indexes
  endpoint:
    path: /indexes
    method: GET
    data_selector: data
    params:
      limit: 25
      next_token: string
      with_total: false
- name: index_details
  endpoint:
    path: /indexes/{id}
    method: GET
    data_selector: ''
    params:
      index-id: '{id}'
- name: profiles
  endpoint:
    path: /indexes/{id}/profiles
    method: GET
    data_selector: data
    params:
      limit: 100
      next_token: string
      with_total: true
      filter: ''
- name: profile_details
  endpoint:
    path: /indexes/{id}/profiles/{id}
    method: GET
    data_selector: ''
    params: {}
- name: indexes
  endpoint:
    path: /indexes
    method: GET
    data_selector: data
- name: index_details
  endpoint:
    path: /indexes/{id}
    method: GET
    data_selector: data
- name: index_profiles
  endpoint:
    path: /indexes/{id}/profiles
    method: GET
    data_selector: data
- name: profile_details
  endpoint:
    path: /indexes/{id}/profiles/{id}
    method: GET
    data_selector: attributes
- name: profiles
  endpoint:
    path: /api/indexes/{id}/profiles
    method: post
- name: indexes
  endpoint:
    path: /api/indexes
    method: get
- name: profiles
  endpoint:
    path: /api/indexes/{id}/profiles
    method: post
    data_selector: result.attributes.value
    params: {}
- name: indexes
  endpoint:
    path: /api/indexes
    method: get
    data_selector: result.attributes.value
    params: {}
- name: WebEvents
  endpoint:
    path: /StreamingIngest/WebEvents
    method: POST
    data_selector: records
- name: WebEvents
  endpoint:
    path: /StreamingIngest/WebEvents
    method: GET
- name: Profile API
  endpoint:
    path: /api/profile
    method: GET
- name: Streaming API
  endpoint:
    path: /api/streaming
    method: POST
- name: customer
  endpoint:
    path: /api/customer
    method: GET
- name: order
  endpoint:
    path: /api/order
    method: GET
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: ActiveCampaign
  endpoint:
    path: /send/audiences/activecampaign
    method: POST
- name: Adobe Marketo
  endpoint:
    path: /send/audiences/adobe_marketo
    method: POST
- name: Amazon S3
  endpoint:
    path: /send/audiences/amazon_s3
    method: POST
- name: Attentive
  endpoint:
    path: /send/audiences/attentive
    method: POST
- name: Azure Blob Storage
  endpoint:
    path: /send/audiences/azure_blob_storage
    method: POST
- name: Braze
  endpoint:
    path: /send/audiences/braze
    method: POST
- name: Cheetah Digital
  endpoint:
    path: /send/audiences/cheetah_digital
    method: POST
- name: Cordial
  endpoint:
    path: /send/audiences/cordial
    method: POST
- name: Criteo
  endpoint:
    path: /send/audiences/criteo
    method: POST
- name: Criteo Retail Media
  endpoint:
    path: /send/audiences/criteo_retail_media
    method: POST
- name: DV360
  endpoint:
    path: /send/audiences/dv360
    method: POST
- name: Google Ads
  endpoint:
    path: /send/audiences/google_ads
    method: POST
- name: Google Cloud Storage
  endpoint:
    path: /send/audiences/google_cloud_storage
    method: POST
- name: HubSpot
  endpoint:
    path: /send/audiences/hubspot
    method: POST
- name: Klaviyo
  endpoint:
    path: /send/audiences/klaviyo
    method: POST
- name: Listrak
  endpoint:
    path: /send/audiences/listrak
    method: POST
- name: LiveRamp
  endpoint:
    path: /send/audiences/liveramp
    method: POST
- name: Meta Ads Manager
  endpoint:
    path: /send/audiences/meta_ads_manager
    method: POST
- name: Microsoft Ads
  endpoint:
    path: /send/audiences/microsoft_ads
    method: POST
- name: Neustar
  endpoint:
    path: /send/audiences/neustar
    method: POST
- name: Oracle Eloqua
  endpoint:
    path: /send/audiences/oracle_eloqua
    method: POST
- name: Pinterest
  endpoint:
    path: /send/audiences/pinterest
    method: POST
- name: Sailthru
  endpoint:
    path: /send/audiences/sailthru
    method: POST
- name: Salesforce Marketing Cloud
  endpoint:
    path: /send/audiences/salesforce_marketing_cloud
    method: POST
- name: SFTP
  endpoint:
    path: /send/audiences/sftp
    method: POST
- name: Snapchat
  endpoint:
    path: /send/audiences/snapchat
    method: POST
- name: The Trade Desk
  endpoint:
    path: /send/audiences/the_trade_desk
    method: POST
- name: TikTok Ads
  endpoint:
    path: /send/audiences/tiktok_ads
    method: POST
- name: Walmart DSP
  endpoint:
    path: /send/audiences/walmart_dsp
    method: POST
- name: Yahoo DSP
  endpoint:
    path: /send/audiences/yahoo_dsp
    method: POST
- name: recommended_audience_sizes
  endpoint:
    path: /api/recommended_audience_sizes
    method: GET
    data_selector: data
    params: {}
- name: churn_prevention_campaigns
  endpoint:
    path: /services/data/vXX.X/sobjects/ChurnPreventionCampaign
    method: GET
    data_selector: records
    params: {}
- name: activation_activity
  endpoint:
    path: /activations/activity
    method: GET
    data_selector: records
- name: one_time_buyers
  endpoint:
    path: /services/data/vXX.X/sobjects/OneTimeBuyer
    method: GET
    data_selector: records
    params: {}
- name: campaigns
  endpoint:
    path: /services/data/vXX.X/sobjects/Campaigns
    method: GET
    data_selector: records
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: Transaction Attributes Extended
  endpoint:
    path: /services/data/vXX.X/sobjects/TransactionAttributesExtended
    method: GET
    data_selector: records
    params: {}
- name: one_time_buyer_campaign
  endpoint:
    path: /services/data/vXX.X/sobjects/OneTimeBuyerCampaign
    method: GET
    data_selector: records
    params: {}
- name: churn_propensity
  endpoint:
    path: /predictive/models/churn_propensity
    method: GET
    data_selector: records
    params: {}
- name: event_propensity
  endpoint:
    path: /event_propensity
    method: GET
    data_selector: attributes
    params: {}
- name: RFM scores
  endpoint:
    path: /rfm/scores
    method: GET
    data_selector: records
- name: RFM percentiles
  endpoint:
    path: /rfm/percentiles
    method: GET
    data_selector: records
- name: predicted_clv
  endpoint:
    path: /services/data/vXX.X/sobjects/PredictedCLV
    method: GET
    data_selector: records
- name: Predicted Affinity
  endpoint:
    path: /predicted_affinity
    method: GET
    data_selector: attributes
    params: {}
- name: first_purchase
  endpoint:
    path: /first_purchase
    method: GET
- name: predicted_clv
  endpoint:
    path: /services/data/vXX.X/sobjects/PredictedCLV
    method: GET
    data_selector: records
- name: recommended_audience_sizes
  endpoint:
    path: /predicted_affinity/audience_sizes
    method: GET
    data_selector: audience_sizes
- name: customer_ranking
  endpoint:
    path: /predicted_affinity/customer_ranking
    method: GET
    data_selector: customer_ranking
- name: has_not_purchased
  endpoint:
    path: /services/data/vXX.X/sobjects/HasNotPurchased
    method: GET
    data_selector: records
- name: has_purchased
  endpoint:
    path: /v1/orders
    method: GET
    data_selector: records
- name: first_purchase
  endpoint:
    path: /services/data/vXX.X/sobjects/FirstPurchase
    method: GET
    data_selector: records
    params: {}
- name: most_frequent_order
  endpoint:
    path: /api/purchase_behavior/most_frequent_order
    method: GET
    data_selector: records
- name: Has Not Purchased
  endpoint:
    path: /api/purchase_behavior/has_not_purchased
    method: GET
    data_selector: customers
    params:
      date_range: ''
- name: repeat_purchase
  endpoint:
    path: /purchase_behavior/repeat_purchase
    method: GET
    data_selector: records
- name: has_purchased
  endpoint:
    path: /has_purchased
    method: GET
    data_selector: orders
    params: {}
- name: total_value_of_orders
  endpoint:
    path: /total_value_of_orders
    method: GET
    data_selector: records
    params: {}
- name: repeat_purchase
  endpoint:
    path: /repeat_purchase
    method: GET
    data_selector: customers
- name: total_value_of_orders
  endpoint:
    path: /services/data/vXX.X/sobjects/TotalValueOfOrders
    method: GET
    data_selector: records
- name: braze
  endpoint:
    path: /path/to/braze
    method: POST
    data_selector: attributes
- name: criteo
  endpoint:
    path: /path/to/criteo
    method: POST
    data_selector: transactions
- name: google_ads
  endpoint:
    path: /path/to/google_ads
    method: POST
    data_selector: transactions
- name: klaviyo
  endpoint:
    path: /path/to/klaviyo
    method: POST
    data_selector: custom_fields
- name: meta_ads_manager
  endpoint:
    path: /path/to/meta_ads_manager
    method: POST
    data_selector: events
- name: pinterest
  endpoint:
    path: /path/to/pinterest
    method: POST
    data_selector: conversions
- name: snapchat
  endpoint:
    path: /path/to/snapchat
    method: POST
    data_selector: offline_conversions
- name: the_trade_desk
  endpoint:
    path: /path/to/the_trade_desk
    method: POST
    data_selector: audiences
- name: tiktok_ads
  endpoint:
    path: /path/to/tiktok_ads
    method: POST
    data_selector: events
- name: Large audience sizes
  endpoint:
    path: /audience_sizes/large
    method: GET
- name: Medium audience sizes
  endpoint:
    path: /audience_sizes/medium
    method: GET
- name: Small audience sizes
  endpoint:
    path: /audience_sizes/small
    method: GET
- name: merged_customers
  endpoint:
    path: /services/data/vXX.X/sobjects/MergedCustomers
    method: GET
    data_selector: records
- name: unified_paid_media
  endpoint:
    path: /services/data/vXX.X/sobjects/UnifiedPaidMedia
    method: GET
    data_selector: records
- name: Merged Customers
  endpoint:
    path: /path/to/merged_customers
    method: GET
    data_selector: records
- name: Unified Paid Media
  endpoint:
    path: /path/to/unified_paid_media
    method: GET
    data_selector: records
- name: audience
  endpoint:
    path: /api/3/audiences
    method: GET
    data_selector: audiences
- name: audience
  endpoint:
    path: /api/3/audiences
    method: GET
- name: CSV files
  endpoint:
    path: /send/csv
    method: POST
    data_selector: data
    params: {}
- name: csv_files
  endpoint:
    path: /send/csv
    method: POST
    data_selector: data
    params:
      file_format: CSV
      remote_folder: /folder
- name: customer_attributes
  endpoint:
    path: /send/customer_attributes
    method: POST
    data_selector: attributes
    params:
      file_format: CSV
      remote_folder: /folder
- name: credentials
  endpoint:
    path: /credentials
    method: POST
    data_selector: data
    params: {}
- name: CSV files
  endpoint:
    path: /send
    method: POST
    data_selector: data
    params:
      file_format: CSV
      remote_folder: /folder
- name: customer_attributes
  endpoint:
    path: /
    method: POST
    params:
      file_format: CSV
      remote_folder: /folder
- name: CSV files
  endpoint:
    path: /files
    method: POST
    data_selector: data
    params:
      file_format: CSV
      remote_folder: /folder
- name: audience_list
  endpoint:
    path: /rest/v1/audience/list
    method: POST
- name: audience_lists
  endpoint:
    path: /audience/lists
    method: POST
    data_selector: audience
    params: {}
- name: attributes
  endpoint:
    path: /attributes
    method: POST
    data_selector: attributes
    params: {}
- name: audience
  endpoint:
    path: /path/to/audience/endpoint
    method: POST
    data_selector: audience_data
    params: {}
- name: CSV files
  endpoint:
    path: /
    method: POST
    data_selector: data
    params:
      file_format: CSV
      remote_folder: /folder
- name: Amazon Pinpoint
  endpoint:
    path: /
    method: POST
- name: webhook
  endpoint:
    path: /Prod/run
    method: POST
- name: Amazon S3 bucket details
  endpoint:
    path: /
    method: GET
    data_selector: bucket_details
    params: {}
- name: subscriber_segment_upload
  endpoint:
    path: /subscriber-segment-upload
    method: POST
    data_selector: response
    params: {}
- name: Subscriptions
  endpoint:
    path: /api/v1/subscribers
    method: POST
- name: Custom Attributes
  endpoint:
    path: /api/v1/custom-attributes
    method: POST
- name: custom_attributes
  endpoint:
    path: /custom-attributes
    method: POST
- name: subscriptions
  endpoint:
    path: /subscriptions
    method: POST
- name: customer_profiles
  endpoint:
    path: /run
    method: POST
    data_selector: profiles
    params: {}
- name: customer_profiles
  endpoint:
    path: /run
    method: POST
    data_selector: query_results
- name: data_template
  endpoint:
    path: /AddDataTemplate
    method: POST
    data_selector: template
    params: {}
- name: data_template
  endpoint:
    path: /add-data-template
    method: POST
    data_selector: template
    params: {}
- name: Azure Blob Storage Container
  endpoint:
    path: /{container_name}
    method: POST
    data_selector: blob_data
    params: {}
- name: data_upload
  endpoint:
    path: /
    method: POST
    data_selector: data
    params:
      file_format: CSV
      remote_folder: /
- name: data
  endpoint:
    path: /
    method: CSV
    data_selector: data
    params:
      file_format: CSV
      remote_folder: /
- name: CSV File
  endpoint:
    path: /send/csv
    method: POST
    data_selector: records
    params:
      file_format: CSV
      remote_folder: /folder
- name: customer_profiles
  endpoint:
    path: /api/user/profile
    method: POST
    data_selector: profiles
- name: CSV_files
  endpoint:
    path: /upload
    method: POST
    data_selector: response
    params:
      file_format: CSV
      remote_folder: /folder
- name: customer_profile
  endpoint:
    path: /api/v3/users/attributes
    method: POST
    data_selector: attributes
    params: {}
- name: Braze Customer Attributes
  endpoint:
    path: /users/track
    method: POST
    data_selector: data
- name: CSV Files
  endpoint:
    path: /folder
    method: POST
- name: Cheetah Digital Destination
  endpoint:
    path: /path/to/endpoint
    method: POST
    params:
      file_format: CSV
- name: account_contact_attributes
  endpoint:
    path: /accountcontractattributes
    method: GET
- name: account_lists
  endpoint:
    path: /accountlists
    method: GET
- name: contact_imports
  endpoint:
    path: /contactimports
    method: POST
- name: jobs
  endpoint:
    path: /jobs/{id}
    method: GET
- name: Account Contact Attributes
  endpoint:
    path: /accountcontractattributes
    method: GET
- name: Account Lists
  endpoint:
    path: /accountlists
    method: GET
- name: Contact Imports
  endpoint:
    path: /contactimports
    method: POST
- name: Jobs
  endpoint:
    path: /jobs/{id}
    method: GET
- name: transactions_data
  endpoint:
    path: /path/to/transactions
    method: POST
- name: transactions_data
  endpoint:
    path: /send/transactions
    method: POST
    data_selector: data
    params: {}
- name: audience_segments
  endpoint:
    params:
      Account ID: Required
      Retailer ID: Required
      Identifier type: Required
- name: audience_segments
  endpoint:
    path: /path/to/audience_segments
    method: POST
- name: CSV files
  endpoint:
    path: /send
    method: POST
    data_selector: data
    params:
      file_format: CSV
      remote_folder: /folder
- name: amazon_s3
  endpoint:
    path: /
- name: credentials
  endpoint:
    path: /credentials
    method: POST
    data_selector: credentials
    params: {}
- name: audiences
  endpoint:
    path: /api/audiences
    method: POST
    data_selector: audiences
- name: customer_id
  endpoint:
    params: {}
- name: audience_name
  endpoint:
    params: {}
- name: audience_description
  endpoint:
    params: {}
- name: membership_duration
  endpoint:
    params: {}
- name: upload_key_type
  endpoint:
    params: {}
- name: mobile_app_id
  endpoint:
    params: {}
- name: google_customer_match
  endpoint:
    path: /google_customer_match
    method: POST
- name: Consent
  endpoint:
    path: /v15/Consent
    method: POST
    data_selector: consents
    params: {}
- name: Mobile Device ID
  endpoint:
    path: /v15/MobileDeviceID
    method: POST
    data_selector: mobile_device_ids
    params: {}
- name: Amazon S3
  endpoint:
    path: /destinations/dynamic_yield
    method: POST
- name: static_segment
  endpoint:
    method: POST
- name: CSV files
  endpoint:
    path: /folder
    method: POST
- name: static_segment
  endpoint:
    path: /static_segments
    method: POST
    data_selector: members
    params: {}
- name: CSV files
  endpoint:
    path: /
    method: POST
    data_selector: files
    params:
      remote_folder: /folder
- name: CSV files
  endpoint:
    path: /send/csv
    method: POST
- name: Replace Users
  endpoint:
    path: /vXX.X/custom_audiences/replace
    method: POST
- name: csv_files
  endpoint:
    path: /path/to/csv/files
    method: POST
    data_selector: files
    params:
      remote_folder: /folder
- name: Replace Users
  endpoint:
    path: /vXX.X/audiences/replace
    method: POST
- name: google_customer_match
  endpoint:
    path: /google-ads-api/audience
    method: POST
- name: google_customer_match
  endpoint:
    path: /google_customer_match
    method: POST
- name: bucket_details
  endpoint:
    path: /
    method: GET
    data_selector: details
    params:
      bucket_name: <<GCS_BUCKET_NAME>>
- name: service_account_key
  endpoint:
    path: /service-accounts
    method: POST
    data_selector: service_account
    params:
      role: Storage Object Admin
- name: Google Cloud Storage
  endpoint:
    path: /
    method: POST
    data_selector: data
    params: {}
- name: audience
  endpoint:
    params:
      primary_key: email
- name: contacts
  endpoint:
    params:
      primary_key: email
- name: Update Profile
  endpoint:
    path: /api/profiles/
    method: POST
- name: csv_file
  endpoint:
    path: /path/to/csv
    method: POST
- name: Update Profile
  endpoint:
    path: /api/profiles/
    method: POST
    data_selector: data
- name: audience_segments
  endpoint:
    path: /v2/audienceSegments
    method: POST
    params:
      account_id: required
      identifier_type: email or firstname and lastname
- name: audience_segments
  endpoint:
    path: /v1/audienceSegments
    method: POST
- name: customer_lists
  endpoint:
    path: /customer-lists
    method: POST
- name: product_lists
  endpoint:
    path: /product-lists
    method: POST
- name: order_lists
  endpoint:
    path: /order-lists
    method: POST
- name: order_item_lists
  endpoint:
    path: /order-item-lists
    method: POST
- name: customer_lists
  endpoint:
    path: /customer-lists
    method: POST
- name: product_lists
  endpoint:
    path: /product-lists
    method: POST
- name: order_lists
  endpoint:
    path: /order-lists
    method: POST
- name: order_item_lists
  endpoint:
    path: /order-item-lists
    method: POST
- name: CSV files
  endpoint:
    path: /folder
    method: POST
    data_selector: records
    params: {}
- name: audience
  endpoint:
    path: /3.0/lists
    method: POST
    data_selector: members
    params:
      incremental: updated_at
- name: CSV files
  endpoint:
    path: /
    method: POST
    data_selector: data
    params:
      remote_folder: /folder
      file_format: CSV
      include_header: true
- name: audience
  endpoint:
    path: /lists
    method: POST
    params:
      data_center: data center ID
      list_id: audience ID
      list_name: email list name
      tag_name: Mailchimp tag
- name: customer_list
  endpoint:
    path: /customer-list
    method: POST
    data_selector: records
- name: Dataverse table
  endpoint:
    params:
      Azure tenant ID: Required
      Azure client ID: Required
      Azure client secret: Required
      Power Apps environment region: Required
      Power Apps environment name: Required
      Dataverse table logical name: Required at orchestration
- name: Dynamics entity
  endpoint:
    path: /api/data/v9.0/<entity>
    method: POST
    data_selector: value
    params: {}
- name: dataverse_table
  endpoint:
    params:
      Power Apps environment region: crm
      Power Apps environment name: socktown
      Dataverse table logical name: abc123_customers
- name: Azure Synapse Analytics
  endpoint:
    path: /destination/azure_blob_storage
    method: POST
    data_selector: CSV data
- name: Google BigQuery
  endpoint:
    path: /destination/google_cloud_storage
    method: POST
    data_selector: CSV data
- name: Snowflake
  endpoint:
    path: /bridge/snowflake
    method: POST
    data_selector: datasets
- name: Dynamics entity
  endpoint:
    path: https://<tenant-name>.crm.dynamics.com/api/data/v9.0/<entity>
    method: POST
    data_selector: value
    params:
      Operation: Upsert
      ID field: <your_id_field>
- name: Azure Synapse Analytics
  endpoint:
    path: /destination/azure_blob_storage
    method: POST
    data_selector: data
    params: {}
- name: Google BigQuery
  endpoint:
    path: /destination/google_cloud_storage
    method: POST
    data_selector: data
    params: {}
- name: Snowflake
  endpoint:
    path: /bridge/snowflake
    method: POST
    data_selector: data
    params: {}
- name: CSV files
  endpoint:
    path: /send
    method: POST
    data_selector: data
    params:
      file_format: CSV
      remote_folder: /folder
- name: profiles
  endpoint:
    path: /indexes/{id}/profiles
    method: GET
    data_selector: profiles
- name: registered_users
  endpoint:
    path: /s3/imports/registered
    method: POST
    data_selector: data
    params:
      filename_template: registered_user_data_{{now|format:'dd-MM-yyyy'}}.csv
- name: anonymous_users
  endpoint:
    path: /s3/imports/anonymous
    method: POST
    data_selector: data
    params:
      filename_template: anonymous_user_data_{{now|format:'dd-MM-yyyy'}}.csv
- name: events
  endpoint:
    path: /s3/imports/events
    method: POST
    data_selector: data
    params:
      filename_template: <event-filename>_{{now|format:'dd-MM-yyyy'}}.csv
- name: csv_files
  endpoint:
    path: /send/files
    method: POST
    data_selector: files
    params:
      file_format: CSV
      remote_folder: /folder
- name: CSV files
  endpoint:
    path: /send/csv
    method: POST
    data_selector: files
    params:
      remote_folder: /folder
- name: profiles
  endpoint:
    path: /indexes/{id}/profiles
    method: GET
    data_selector: profiles
- name: csv_files
  endpoint:
    path: /
    method: POST
    data_selector: files
    params:
      file_format: CSV
      remote_folder: /folder
- name: CSV files
  endpoint:
    path: /send-data
    method: POST
    data_selector: data
    params:
      file_format: CSV
      remote_folder: /folder
- name: s3_bucket
  endpoint:
    path: /services/data/vXX.X/s3bucket
    method: POST
    data_selector: files
    params: {}
- name: shared_list
  endpoint:
    path: /shared_lists
    method: POST
    data_selector: data
    params:
      shared_list_name: C_EmailAddress
- name: csv_file
  endpoint:
    path: /send/csv
    method: POST
    data_selector: response
    params:
      remote_folder: /folder
- name: CSV files
  endpoint:
    path: /send/csv
    method: POST
    data_selector: data
    params:
      file_format: CSV
      remote_folder: /folder
- name: shared_list
  endpoint:
    path: /api/shared_lists
    method: POST
    data_selector: data
    params:
      primary_key: C_EmailAddress
- name: CSV files
  endpoint:
    path: /send/csv
    method: POST
    data_selector: files
    params:
      remote_folder: /folder
- name: CSV files
  endpoint:
    path: /send/data
    method: POST
    data_selector: data
    params:
      file_format: CSV
      remote_folder: /folder
- name: data_files
  endpoint:
    path: /
    method: PUT
    data_selector: files
    params:
      file_format: CSV
      remote_folder: /
- name: CSV files
  endpoint:
    path: /path/to/csv
    method: POST
    data_selector: data
    params:
      remote_folder: /folder
- name: create audience
  endpoint:
    path: /v5/audiences/create
    method: POST
- name: create customer list
  endpoint:
    path: /v5/customer_lists/create
    method: POST
- name: update customer list
  endpoint:
    path: /v5/customer_lists/update
    method: PUT
- name: csv_files
  endpoint:
    path: /
    method: POST
    data_selector: data
    params:
      file_format: CSV
      remote_folder: /folder
- name: csv_files
  endpoint:
    path: /
    method: POST
    data_selector: data
    params:
      file_format: CSV
      remote_folder: /folder
- name: create audience
  endpoint:
    path: /audiences/create
    method: POST
- name: create customer list
  endpoint:
    path: /customer_lists/create
    method: POST
- name: update customer list
  endpoint:
    path: /customer_lists/update
    method: POST
- name: audience
  endpoint:
    path: /audiences
    method: POST
    data_selector: audience_list
- name: CSV File
  endpoint:
    path: /
    method: POST
    data_selector: ''
    params:
      file_format: CSV
      remote_folder: /folder
- name: CSVFiles
  endpoint:
    path: /
    method: POST
    data_selector: files
    params:
      file_format: CSV
      remote_folder: /folder
- name: SFTP
  endpoint:
    path: /
    method: POST
    data_selector: data
    params:
      remote_folder: /folder/name
- name: csv_file
  endpoint:
    path: /folder
    method: POST
    data_selector: data
    params: {}
- name: custom_audiences
  endpoint:
    path: /audiences
    method: POST
    data_selector: audience
    params: {}
- name: salesforce_object
  endpoint:
    path: /services/data/vXX.X/sobjects/salesforce_object
    method: POST
    data_selector: records
- name: csv_files
  endpoint:
    path: /folder
    method: POST
- name: SFTP file upload
  endpoint:
    path: /upload
    method: POST
    data_selector: files
    params: {}
- name: SFTP
  endpoint:
    path: /
    method: POST
- name: CSV files
  endpoint:
    path: /
    method: POST
    data_selector: files
    params:
      file_format: CSV
      remote_folder: /
- name: salesforce_object
  endpoint:
    path: /services/soap/c/XX.X
    method: POST
    data_selector: records
- name: audiences
  endpoint:
    path: /snapchat/audiences
    method: POST
- name: SFTP
  endpoint:
    path: /
    method: POST
    data_selector: files
    params:
      file_format: Apache Parquet, CSV, JSON, NDJSON, PSV, TSV
      remote_folder: /folder/name
- name: CSV files
  endpoint:
    path: /send_data
    method: POST
    data_selector: files
    params:
      file_format: CSV
      remote_folder: /folder
- name: audience
  endpoint:
    path: /v3/portal/data/audiences
    method: POST
- name: audience
  endpoint:
    path: /snap-audience-match
    method: POST
- name: CSV Files
  endpoint:
    path: /
    method: POST
    data_selector: files
    params:
      file_format: CSV
      remote_folder: /folder
- name: audience
  endpoint:
    path: /marketing_api/audiences
    method: POST
- name: Amazon Redshift
- name: Azure Synapse Analytics
- name: Databricks
- name: Google BigQuery
- name: Snowflake
- name: CSV Files
  endpoint:
    path: /import/files
    method: POST
- name: audiences
  endpoint:
    path: /api/audiences
    method: POST
- name: offline_events
  endpoint:
    path: /api/offline_events
    method: POST
- name: audience
  endpoint:
    path: /marketing_api/audience
    method: POST
- name: audience
  endpoint:
    path: /path/to/audience/endpoint
    method: POST
    data_selector: audiences
    params: {}
- name: custom_destination
  endpoint:
    path: /webhook
    method: POST
    data_selector: results
    params: {}
- name: AWS Lambda function
  endpoint:
    path: /amperity-lambda-runner
    method: GET
    data_selector: settings
- name: audience
  endpoint:
    path: /AUDIENCE
    method: POST
- name: taxonomy
  endpoint:
    path: /TAXONOMY
    method: PUT
- name: audiences
  endpoint:
    path: /v3/portal/data/doc/UnifiedIDs
    method: POST
    data_selector: audience
    params: {}
- name: lambda_function_response
  endpoint:
    path: /
    method: POST
    data_selector: settings
    params: {}
- name: taxonomy
  endpoint:
    path: /TAXONOMY
    method: PUT
- name: audience
  endpoint:
    path: /AUDIENCE
    method: POST
- name: users
  endpoint:
    path: /api/v2/users
    method: POST
- name: activation_ids
  endpoint:
    path: /activation_ids
    method: POST
    data_selector: activation_ids
    params: {}
- name: Databricks
  endpoint:
    path: /operator/bridge_databricks.html
    method: GET
- name: Google BigQuery
  endpoint:
    path: /operator/bridge_google_bigquery.html
    method: GET
- name: Snowflake
  endpoint:
    path: /operator/bridge_snowflake.html
    method: GET
- name: queries
  endpoint:
    path: /queries
    method: GET
- name: segments
  endpoint:
    path: /segments
    method: GET
- name: activation_ids
  endpoint:
    path: /activation_ids
    method: POST
    data_selector: activation_ids
- name: default_attributes
  endpoint:
    path: /default_attributes
    method: POST
    data_selector: default_attributes
- name: segments
  endpoint:
    path: /segments
    method: POST
    data_selector: segments
- name: campaigns
  endpoint:
    path: /campaigns
    method: POST
    data_selector: campaigns
- name: audit_events
  endpoint:
    path: /audit-events
    method: GET
- name: campaign_drafts
  endpoint:
    path: /campaign-drafts
    method: GET
- name: campaigns
  endpoint:
    path: /campaigns
    method: GET
- name: ingest_jobs
  endpoint:
    path: /ingest/jobs
    method: GET
- name: ingest_jobs_id
  endpoint:
    path: /ingest/jobs/{id}
    method: GET
- name: segments
  endpoint:
    path: /segments
    method: GET
- name: workflow_runs
  endpoint:
    path: /workflow/runs/
    method: GET
- name: workflow_runs_id
  endpoint:
    path: /workflow/runs/{id}
    method: GET
- name: start_workflow
  endpoint:
    path: /workflow/runs
    method: POST
- name: stop_workflow
  endpoint:
    path: /workflow/runs/{id}/stop
    method: POST
- name: inbound_bridge
  endpoint:
    path: /operator/bridge_databricks
    method: GET
    data_selector: records
    params: {}
- name: outbound_bridge
  endpoint:
    path: /operator/bridge_snowflake
    method: GET
    data_selector: records
    params: {}
- name: audit_events
  endpoint:
    path: /audit-events
    method: GET
- name: campaign_drafts
  endpoint:
    path: /campaign-drafts
    method: GET
- name: campaigns
  endpoint:
    path: /campaigns
    method: GET
- name: ingest_jobs
  endpoint:
    path: /ingest/jobs
    method: GET
- name: ingest_job_by_id
  endpoint:
    path: /ingest/jobs/{id}
    method: GET
- name: segments
  endpoint:
    path: /segments
    method: GET
- name: workflow_runs
  endpoint:
    path: /workflow/runs/
    method: GET
- name: workflow_run_by_id
  endpoint:
    path: /workflow/runs/{id}
    method: GET
- name: start_workflow
  endpoint:
    path: /workflow/runs
    method: POST
- name: stop_workflow_by_id
  endpoint:
    path: /workflow/runs/{id}/stop
    method: POST
- name: comparison_operators
  endpoint:
    path: /comparison/operators
    method: GET
    data_selector: operators
    params: {}
- name: functions
  endpoint:
    path: /functions
    method: GET
    data_selector: functions
    params: {}
- name: churn_propensity
  endpoint:
    path: /model_churn_propensity
    method: GET
- name: event_propensity
  endpoint:
    path: /model_event_propensity
    method: GET
- name: predicted_clv
  endpoint:
    path: /model_predicted_clv
    method: GET
- name: product_affinity
  endpoint:
    path: /model_product_affinity
    method: GET
- name: audiences
  endpoint:
    path: /audiences
    method: GET
    data_selector: records
- name: campaigns
  endpoint:
    path: /campaigns
    method: GET
    data_selector: records
- name: churn_propensity_model
  endpoint:
    path: /model_churn_propensity
    method: GET
- name: event_propensity
  endpoint:
    path: /model_event_propensity
    method: GET
- name: predicted_clv_model
  endpoint:
    path: /model_predicted_clv
    method: GET
- name: product_affinity_model
  endpoint:
    path: /model_product_affinity
    method: GET
- name: customer_data
  endpoint:
    path: /v1/customer-data
    method: GET
    data_selector: records
- name: customer_segment
  endpoint:
    path: /segments
    method: GET
    data_selector: segments
    params: {}
- name: customer_insights
  endpoint:
    path: /insights
    method: GET
    data_selector: insights
    params: {}
- name: active_segments
  endpoint:
    path: /segments/active
    method: GET
    data_selector: segments
- name: recommended_segments
  endpoint:
    path: /segments/recommended
    method: GET
    data_selector: segments
- name: sales_transactions
  endpoint:
    path: /downloads/xml/salestransactions.xml
    method: GET
    data_selector: salesTransactionId
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: data_exchange
  endpoint:
    path: /bigquery/analytics-hub/exchanges
    method: POST
    data_selector: exchange
    params: {}
- name: data_listing
  endpoint:
    path: /bigquery/analytics-hub/listings
    method: POST
    data_selector: listing
    params: {}
- name: ActiveCampaign
  endpoint:
    path: /workflows/context/destination/active-campaign
    method: GET
    data_selector: workflow_actions
    params: {}
- name: Amazon Ads
  endpoint:
    path: /workflows/context/destination/amazon-ads
    method: GET
    data_selector: workflow_actions
    params: {}
- name: Amazon S3
  endpoint:
    path: /workflows/context/destination/amazon-s3
    method: GET
    data_selector: workflow_actions
    params: {}
- name: Azure Blob Storage
  endpoint:
    path: /workflows/context/destination/azure-blob-storage
    method: GET
    data_selector: workflow_actions
    params: {}
- name: Braze
  endpoint:
    path: /workflows/context/destination/braze
    method: GET
    data_selector: workflow_actions
    params: {}
- name: Cordial
  endpoint:
    path: /workflows/context/destination/cordial
    method: GET
    data_selector: workflow_actions
    params: {}
- name: Google Ads
  endpoint:
    path: /workflows/context/destination/google-ads
    method: GET
    data_selector: workflow_actions
    params: {}
- name: Klaviyo
  endpoint:
    path: /workflows/context/destination/klaviyo
    method: GET
    data_selector: workflow_actions
    params: {}
- name: Meta Ads Manager
  endpoint:
    path: /workflows/context/destination/meta-ads-manager
    method: GET
    data_selector: workflow_actions
    params: {}
- name: Microsoft Advertising
  endpoint:
    path: /workflows/context/destination/microsoft-advertising
    method: GET
    data_selector: workflow_actions
    params: {}
- name: Oracle Data Cloud
  endpoint:
    path: /workflows/context/destination/oracle-data-cloud
    method: GET
    data_selector: workflow_actions
    params: {}
- name: Oracle DMP
  endpoint:
    path: /workflows/context/destination/oracle-dmp
    method: GET
    data_selector: workflow_actions
    params: {}
- name: Salesforce Marketing Cloud
  endpoint:
    path: /workflows/context/destination/salesforce-marketing-cloud
    method: GET
    data_selector: workflow_actions
    params: {}
- name: Snapchat
  endpoint:
    path: /workflows/context/destination/snapchat
    method: GET
    data_selector: workflow_actions
    params: {}
- name: TikTok Ads
  endpoint:
    path: /workflows/context/destination/tiktok-ads
    method: GET
    data_selector: workflow_actions
    params: {}
- name: Zendesk
  endpoint:
    path: /workflows/context/destination/zendesk
    method: GET
    data_selector: workflow_actions
    params: {}
- name: journey
  endpoint:
    path: /api/v1/journeys
    method: GET
    data_selector: data
    params: {}
- name: offline_events
  endpoint:
    path: /offline-events
    method: POST
- name: customer_profiles
  endpoint:
    path: /services/data/vXX.X/sobjects/CustomerProfile
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: campaigns
  endpoint:
    path: /services/data/vXX.X/sobjects/Campaign
    method: GET
    data_selector: records
    params: {}
- name: indexes
  endpoint:
    path: /indexes
    method: GET
    data_selector: data
    params:
      with_total: 'false'
- name: index
  endpoint:
    path: /indexes/{id}
    method: GET
    data_selector: id
    params:
      index-id: '{id}'
- name: profiles
  endpoint:
    path: /indexes/{id}/profiles
    method: GET
    data_selector: data
    params:
      limit: 100
      with_total: 'true'
- name: customer_profiles
  endpoint:
    path: /api/v1/customer_profiles
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: transactions
  endpoint:
    path: /api/v1/transactions
    method: GET
    data_selector: records
    params: {}
- name: customer_profile
  endpoint:
    path: /indexes/{id}/profiles/{id}
    method: GET
    data_selector: attributes
    params: {}
- name: Merged Customers
  endpoint:
    path: /merged/customers
    method: GET
    data_selector: data
- name: workflow_runs
  endpoint:
    path: /workflow/runs
    method: POST
- name: data_exchange
  endpoint:
    path: /bigquery/dataExchanges
    method: POST
    data_selector: dataExchange
    params: {}
- name: data_listing
  endpoint:
    path: /bigquery/dataListings
    method: POST
    data_selector: dataListing
    params: {}
- name: privacy_rights_workflows
  endpoint:
    path: /privacy_rights/workflows
    method: GET
    data_selector: records
- name: indexes
  endpoint:
    path: /indexes
    method: GET
    data_selector: data
- name: Unified Compliance Overview
  endpoint:
    path: /unified/compliance/overview
    method: GET
    data_selector: results
- name: Unified Compliance
  endpoint:
    path: /unified/compliance
    method: GET
    data_selector: results
- name: index
  endpoint:
    path: /indexes/{id}
    method: GET
    data_selector: id
    params:
      index-id: '{id}'
- name: profiles
  endpoint:
    path: /indexes/{id}/profiles
    method: GET
    data_selector: data
    params:
      limit: '100'
      with_total: 'true'
- name: user_activity
  endpoint:
    path: /settings/user-activity-logs
    method: GET
    data_selector: activity_logs
- name: profiles
  endpoint:
    path: /indexes/{id}/profiles/{id}
    method: GET
    data_selector: attributes
    params: {}
- name: workflow_runs
  endpoint:
    path: /workflow/runs
    method: POST
    data_selector: null
    params:
      config_id: required
      range_from: required
      range_to: optional
      run_mode: optional
- name: inbound_requests
  endpoint:
    path: /inbound_requests
    method: GET
    data_selector: records
    params: {}
- name: unified_compliance_overview
  endpoint:
    path: /unified_compliance_overview
    method: GET
    data_selector: records
    params: {}
- name: unified_compliance
  endpoint:
    path: /unified_compliance
    method: GET
    data_selector: records
    params: {}
- name: user_activity
  endpoint:
    path: /settings/user-activity-logs
    method: GET
    data_selector: events
- name: policies
  endpoint:
    path: /policies
    method: GET
    data_selector: records
notes:
- OAuth credentials only require setup of connected app
- The maximum number of fields in an index is 30.
- Do not use non-hashed email addresses as a unique value for an index.
- Rate limit is 2000 requests per second.
- Connected Content does not write data to user profiles.
- Use a consistent hashing algorithm at each point in the downstream workflow.
- A single access token may be used to access any endpoint in your tenant’s Streaming
  API.
- The Streaming API only accepts individual JSON payloads and does not accept NDJSON
  payloads.
- The Streaming API only accepts individual JSON payloads and does not accept NDJSON
  payloads
- JSON payloads are combined into a single NDJSON file
- Nested JSON payloads require a saved query to flatten the data
- XML payloads are converted into CBOR by the streaming API
- CBOR requires a saved query to transform the data into a tabular format
- A feed must be added for each file that is pulled from Streaming Ingest, including
  all files that contain customer records and interaction records.
- Uses OAuth2 with refresh token — requires setup of connected app in api
- Some objects like Contact may return nulls in deeply nested fields
- At least one campaign must be active before activation states for campaigns are
  accessible.
- At least one journey must be active before activation states for journeys are accessible.
- Recommended audience sizes are refreshed on a weekly basis.
- Campaigns are designed to engage customers at risk of churn.
- Some objects like OneTimeBuyer may return nulls in deeply nested fields
- Direct mail is an effective way to help your brand stand out in the age of digital
  ads and overflowing email inboxes.
- Many direct-to-consumer companies prefer using direct mail because they can show
  the brand and products using a tangible format that customers can hold in their
  hands.
- RFM scores are historically-based and only cover a rolling 1-year window.
- Churn propensity model outputs a score between 0 and 1 representing a customer’s
  probability of returning to make a purchase.
- Use predicted CLV to identify your top customers by predicted spend.
- Event propensity is a predictive model that finds the likelihood that a customer
  performs a revenue-generating event within the next 30 days.
- Purchase behaviors require standardized product catalog field names to be present
  in your standard output for transactions.
- Predicted CLV models customer lifetime value over the next 365 days.
- Use purchase behaviors in segments to filter customers by brand, channel, items,
  and store.
- Has Not Purchased compares the list of customers who did purchase to your total
  list of customers.
- Most credentials are configured to use some form of single sign-on (SSO), but may
  be configured to use usernames and passwords, depending on how user access is configured
  for your tenant.
- Requires standardized product catalog field names to be present in your standard
  output for transactions.
- Each workflow is monitored by Amperity.
- Notifications show a status for individual steps within workflows that are related
  to queries and orchestrations.
- Send offline events to marketing platforms to track success of campaigns.
- Send data for offline events ideally within 1 to 3 days of the transaction date.
- Send offline events to marketing platforms to track campaign effectiveness.
- Uses OAuth2 with refresh token — requires setup of connected app in Amperity
- Changes to audience lists are not immediately available in ActiveCampaign. Allow
  for up to 24 hours after the point at which Amperity has finished sending audience
  updates for them to be available.
- ActiveCampaign API is rate limited to 5 requests per second.
- Some file formats allow a custom delimiter.
- If the path to the remote folder has a space, use a backslash character to escape
  that space.
- Credentials for Adobe Campaign require a username and private key.
- The remote folder to which Amperity sends data must begin with a forward slash.
- Credentials for Acxiom require a username and passphrase.
- The remote folder to which Amperity sends data must start with a forward slash.
- Configure Amperity to send CSV files to Adobe Customer Attributes.
- Credentials for Adobe Campaign require a 'username' and 'private key'.
- Adobe Experience Platform requires a static schema.
- Does not support removing or renaming fields.
- If the path to the remote folder has a space, use a backslash (\) character to escape
  that space.
- An email address must be sent to Adobe Marketo.
- Amperity does not keep smart lists and does not remove users from the Adobe Marketo
  database.
- Credential settings require a username and passphrase.
- Amperity adds a user when they do not exist in Adobe Marketo.
- Configure Amperity to send CSV files to Airship.
- This destination uses the Amazon Ads API to manage audiences.
- If the audience does not exist, Amperity will create it. If the audience exists,
  Amperity will update the list of members.
- Amazon Ads requires the country field to be included in query results.
- Please ask your Amperity representative for assistance with setting up Amazon Ads
  as a destination within your tenant.
- If the audience does not exist, Amperity will create it. If the audience exists,
  Amperity will update the list of members to match the list that is sent.
- Amazon Pinpoint must be enabled in your Amazon AWS account and be configured to
  send SMS messages to your customers.
- A Lambda function must be uploaded to AWS Lambda that is running in your Amazon
  AWS account, and then configured to be available to Amperity.
- A webhook destination that is configured in your Amperity tenant that sends query
  results to a Lambda function running in AWS Lambda.
- Verify business user access to queries and orchestrations and access to segments
  and campaigns.
- 'If Webhook Settings is empty, set it to empty curly braces: {}.'
- 'Amperity supports the following credential types for Amazon S3: IAM role-to-role
  (recommended), IAM credentials.'
- Configure Amperity to send Apache Parquet (recommended), CSV, JSON, NDJSON, PSV,
  or TSV files to any Amazon S3 bucket.
- The compression format to apply to the file. May be one of 'GZIP', 'None', 'TAR',
  'TGZ', or 'ZIP'.
- The escape character to use in the file output. Applies to CSV, TSV, PSV, and custom
  delimiter file types.
- The S3 prefix is a string used to filter results to include only objects whose names
  begin with this prefix.
- Enable to send a '.DONE' file when Amperity has finished sending data.
- Split delimiter-separated output–CSV, PSV, TSV, or files with custom delimiters–into
  multiple files to ensure downstream file limits are not exceeded.
- Users may use orchestrations to send query results
- Users may use orchestrations and campaigns to send audiences
- Users may use orchestrations and campaigns to send offline events
- Configure Amperity to send CSV files with email addresses OR phone numbers, but
  not both.
- Allow up to 24 hours for changes to audiences to be available in Attentive.
- Credentials for Attentive require a 'username' and 'passphrase'.
- Configure Amperity to send CSV files with email addresses OR phone numbers, but
  not both, to Attentive.
- Field names and field values are case sensitive in Attentive.
- Custom attributes cannot contain any sensitive or special categories of information.
- Attentive accepts email addresses or phone numbers as the primary identifier.
- AWS Connect must be enabled in your Amazon AWS account.
- If business user access was not configured as part of the destination, you may configure
  access from the data template.
- 'Under Webhook settings, if Webhook Settings is empty, set it to empty curly braces:
  {}.'
- 'Amperity supports the following credential types for Azure Blob Storage: Connection
  string, Shared access signature, Storage URI.'
- Amperity prefers to send data to customer-managed cloud storage.
- File formats supported include Apache Parquet (recommended), CSV, JSON, NDJSON,
  PSV, or TSV files.
- Users may use orchestrations to send query results, audiences, and offline events.
- A prefix filters the list of blob storage objects to only blob names that match
  the prefix value within your instance of Azure Blob Storage.
- If a downstream sensor is listening for files sent from Amperity, configure that
  sensor to listen for the presence of the '.DONE' file.
- Credentials for BazaarVoice require a 'username' and 'passphrase'.
- Configure Amperity to send CSV to BazaarVoice.
- Bluecore requires a header row to be present in CSV files.
- The header row cannot start with a number or contain any special characters other
  than underscores ( _ ) and must be less than 30 characters in length.
- Braze should be your source of truth for customer consent and for tracking email
  and phone subscription status.
- API key is required for Braze account.
- Ensure table ‘Braze Customer Attributes’ is accessible to Segment Editor and Edit
  Attributes editor.
- 'Braze uses two fields to track email and phone subscription status: email_subscribe
  and push_subscribe.'
- Customer profile attributes must be sent using a strict naming convention.
- Use a forward slash as the first character for the remote folder value.
- The API key for your Braze account is required.
- Configure Amperity to send CSV files to Camelot SMM.
- Choose 'passphrase' as the credential type.
- The hostname for the SFTP server is a combination of the FTP URL and your username,
  separated by ' - '.
- Use a forward slash as the first character for the remote folder.
- The hostname for the SFTP server in Cheetah Digital is a combination of the FTP
  URL and your Cheetah Digital username, separated by ' - '.
- Configure Amperity to send CSV, PSV, or TSV files to Cheetah Digital.
- Amperity recommends using the Cordial API to send email lists from Amperity to Cordial.
- A refresh token is generated by the OAuth process and authorizes Amperity to send
  data to Criteo.
- When configuring OAuth for Criteo you must select the portfolios to which access
  will be granted.
- Criteo will only create the credential if the account you are using has not already
  granted Amperity access. If you need to create a new credential, revoke access for
  Amperity, and then reconfigure OAuth using the newly-generated link.
- A minimum match rate of 0.1% is required, calculated as number of matches / total
  lines before the audience is usable in Criteo Retail Media.
- Changes to offline or onsite display audiences are not immediately available in
  Criteo Retail Media. Allow for up to 24 hours after the point at which Amperity
  has finished sending audience updates for them to be available.
- Configure Amperity to send CSV files to Cross Country Computer.
- Delta Sharing uses end-to-end TLS encryption from client to server to storage account
  along with short-lived credentials, such as pre-signed URLs, to access data.
- Users must have specific permissions to create recipients and shares in Databricks.
- Credentials require a username and passphrase.
- Users must have CREATE CATALOG and CREATE PROVIDER permissions in Databricks.
- The credential file must be treated as a secret and not shared outside the organization.
- Audit logging occurs in Databricks and in Amperity.
- Open sharing uses token-based authentication.
- Amperity requires using cross-account role assumption to manage access to Amazon
  S3.
- After setting up cross-account role assumption, a list of files by filename and
  file type must be made available.
- API username and password required for access.
- List name and contact identifier type are required configuration settings.
- API username and API password required for authentication.
- Contact identifier type must be specified for matching contacts.
- Changes to audiences are not immediately available in DV360. Allow for up to 48
  hours after the point at which Amperity has finished sending audience updates for
  them to be available.
- Customers must send the required user consent signals when uploading data for advertising
  to customers in the European Economic Area (EEA) and/or to adhere to the European
  Union (EU) user consent policy.
- If a row contains a NULL value, it will be automatically filtered out by the connector
  and will be shown in the error logs.
- Requires configuration changes to customer-managed Amazon AWS accounts
- Ensure that customer-managed security policies control access to data
- Consent values must be set to GRANTED to comply with EU user consent policy.
- Rows containing NULL values will be filtered out and logged as errors.
- Amperity requires using cross-account role assumption to manage access to Amazon
  S3 to ensure that customer-managed security policies control access to data.
- After setting up cross-account role assumption, a list of files by filename and
  file type, along with any sample files, must be made available to allow for feed
  creation.
- This destination uses the Microsoft Dynamics Segmentation API to send static segments
  to Dynamics 365 Marketing.
- If the static segment does not exist, it will be created. If it exists, it will
  be truncated, and then loaded.
- Static segments are added, and then submitted to the marketing-insights services
  each time they are loaded to Dynamics 365 Marketing.
- If the static segment does not exist, it will be created. If the static segment
  does exist, it will be truncated, and then loaded.
- Credentials for Epsilon Conversant require a 'username' and 'passphrase'. Set the
  host name to '[value].epsilon.com'.
- Configure Amperity to send CSV files to Epsilon Conversant.
- The remote folder must start with a forward slash.
- Configure Amperity to send CSV files to Epsilon Targeting.
- Credentials for Evocalize require a 'username' and 'passphrase'.
- Configure Amperity to send CSV files to Evocalize.
- Credentials for Evocalize require a 'username' and 'passphrase'. Set the host name
  to 'files.evocalize.com'.
- Changes to custom audiences are not immediately available in Meta Ads Manager. Allow
  for up to 24 hours after the point at which Amperity has finished sending audience
  updates for them to be available.
- The credentials that are defined in Amperity are invalid.
- Meta Ads Manager supports having up to 500 custom audiences in your account at any
  given time.
- The custom audience terms of service must be signed by each business user that is
  associated with your Facebook Ads account.
- The advertising account used to enable workflows to be sent to Meta Ads Manager
  from Amperity requires the advertising account to also belong to a business account.
- Sometimes Meta Ads Manager will issue a security challenge to the advertising account
  and/or business account associated with this workflow.
- Amperity will be unable to create custom audiences when the limit of 500 custom
  audiences is exceeded.
- Changes to audiences are not immediately available in Google Ads. Allow for up to
  48 hours after the point at which Amperity has finished sending audience updates
  for them to be available.
- Authentication for 'Google Ads' must be completed within Google prior to configuring
  Amperity to send audiences to Google Ads.
- Google Ads requires two-factor authentication to be enabled.
- Load Parquet and CSV files from Cloud Storage to Google BigQuery.
- Transfer Parquet and CSV files from Amazon S3 to Google BigQuery.
- The bucket name must match the value of the <<GCS_BUCKET_NAME>> placeholder.
- A Google Cloud Storage service account key must be configured for the Storage Object
  Admin role.
- Configure Amperity to send Apache Parquet (recommended), CSV, JSON, NDJSON, PSV,
  or TSV files to any Google Cloud Storage bucket.
- You may receive a notifications error for a configured Google Cloud Storage destination.
- Review a notifications error.
- Some workflow actions are common across workflows and will often be available, such
  as retrying a specific task within a workflow or restarting a workflow.
- Amperity provides a series of workflow actions that can help resolve specific issues
  that may arise with Google Cloud Storage.
- A workflow will occasionally show an error that describes what prevented a workflow
  from completing successfully.
- 'Field names that are sent from Amperity to HubSpot should be lowercase and contain
  only letters (a-z), numbers (0-9), and underscores (_). Amperity automatically converts
  uppercase letters to lowercase and replaces non-underscore characters (such as #,
  *, or -) with an underscore.'
- Attributes sent to HubSpot with values for a specific day, month, and year must
  be in UTC and formatted as ISO 8601 strings or as EPOCH-timestamps in milliseconds.
- Data that contains PII must be encrypted using public key encryption before it is
  transmitted to Infutor using SFTP.
- If an escape character is not specified and quote mode is set to 'None' this may
  result in unescaped, unquoted files.
- Quotations must be removed from files.
- If a list of email addresses that is sent to HubSpot contains a single invalid email
  address the entire import will fail and return a 400 error.
- Klaviyo supports up to 1000 lists and segments in your account at any given time.
- If an escape character is not specified and quote mode is set to 'None', this may
  result in unescaped, unquoted files.
- 'The API key must have the following scopes added: lists:write, profiles:write'
- Use a forward slash as the first character for remote folder paths.
- Configure Amperity to send CSV files to Koupon Media.
- The remote folder to which Amperity sends data must begin with a forward slash ‘/’.
- Changes to audiences are not immediately available in LinkedIn DMP. Allow for up
  to 48 hours after the point at which Amperity has finished sending audience updates
  for them to be available.
- 'You must configure this destination for email: Email client ID and client secret
  are required.'
- Listrak prefers to use a single list for managing email addresses, which is named
  'Master List' by default.
- Listrak prefers to use a single list for managing email addresses, which is named
  'Master List' by default within Listrak.
- LiveRamp requires a header row to be present in CSV, TSV, and PSV files.
- The API key for your Mailchimp account is required.
- The data center ID appends to the API key after the hyphen.
- Use GPG encryption and GZip compression for file uploads.
- Changes to audiences are not immediately available in Microsoft Advertising. Allow
  for up to 24 hours after the point at which Amperity has finished sending audience
  updates for them to be available.
- Microsoft Advertising requires two-step verification to be enabled before Amperity
  can send data.
- In some cases, this workflow error is caused by a sign-in risk, which represents
  the possibility that a given authentication request wasn’t made by the identity
  owner.
- A client ID and client secret with permission to access your instance of Microsoft
  Dynamics is required.
- The Azure Active Directory ID is often referred to as the tenant ID.
- Data is not sent from Amperity directly to Microsoft Power BI.
- Microsoft Power BI must connect to a location that supports queries to that data.
- Configure an Amazon S3 bucket to grant access to MoEngage.
- Files must be CSV files with a header row. Column names are case sensitive.
- Files sent to Monetate must not exceed 10 GB uncompressed or 100 million rows.
- Files must contain at least one column and may not contain more than 30.
- A user with access to Moveable Ink and who is assigned to the Manager role is required
  to configure the Amperity integration with Moveable Ink.
- All files must be CSV files with a header row.
- Column names are case sensitive.
- Include a header row for new datasets.
- Credentials for Neustar require rotating SFTP passphrases every 180 days.
- For folders with spaces, use a backslash to escape the space.
- User must have Manager role in Moveable Ink to configure integration
- Unique identifiers must be used for profile ID
- Credentials for Neustar require a username and passphrase.
- Neustar requires rotating SFTP passphrases every 180 days.
- Configure Amperity to send CSV files to Oracle Data Cloud.
- If the path to the remote folder has a space, use a backslash to escape that space.
- The first audience that is sent from Amperity to Oracle Eloqua should be to a new
  or empty shared list.
- Use filename templates to configure Amperity to support managing more than one shared
  list.
- Configure Amperity to send CSV files to Oracle Responsys.
- Credentials for Oracle Data Cloud require a username and passphrase.
- All other Amperity file format settings for Oracle Data Cloud are optional.
- Configure Amperity to send CSV files to Panda Printing.
- Configure Amperity to send CSV files to PebblePost.
- Configure Amperity to send CSV files to Persado.
- Use a forward slash as the first character for remote folder.
- If the path has spaces, escape them with a backslash.
- Amperity will create the customer list if it does not already exist.
- A customer list must contain at least 100 email addresses that are associated with
  a Pinterest account before it can be associated with an audience.
- Use a forward slash–“/”–as the first character for the remote folder value.
- Configure Amperity to send CSV files to PowerReviews.
- Credentials for Persado require a “username” and “private key”. Set the host name
  to “psftp.persado.com”.
- Credentials for Quad require a username and passphrase.
- An existing customer list should be empty the first time Amperity sends a list of
  email addresses.
- Ask your DataGrid Operator or your Amperity representative for help configuring
  Reddit Ads as a destination to which you can send campaigns for customer activation.
- Configure Amperity to send CSV files to Salesforce Marketing Cloud Personalization.
- Use a forward slash–'/'–as the first character for the remote folder value.
- Configure Amperity to send CSV files to Quad.
- Connect to sandbox instance? Optional. Select this option if the destination is
  a sandbox instance and not a production instance.
- Custom Salesforce login URL Optional. The custom URL of Salesforce Sales Cloud logins
  requires only the scheme (http:// or https://) and hostname parts of the URL.
- Configure Amperity to send CSV files to RR Donnelly.
- The SFTP server has a 30-day limit on data and after 30 days, data may be moved
  automatically to an archive location.
- Configure Amperity to send CSV files to SMG.
- Use a forward slash–“/”–as the first character for the remote folder.
- This destination uses the Salesforce Sales Cloud SOAP API.
- A refresh token is generated by the OAuth process and authorizes Amperity to send
  data to Snapchat.
- The ID for the Snapchat advertising account is available from the top-left menu
  in Snapchat.
- The hostname for the SFTP site is always <tenant-name>.sftp.amperity.com.
- Escape spaces in folder names with a backslash.
- Changes to audiences are not immediately available in The Trade Desk. Allow for
  up to 48 hours after the point at which Amperity has finished sending audience updates
  for them to be available.
- An ad account ID is required for the Snapchat advertising account.
- Credentials for SoundCommerce require a username and private key.
- A custom audience must have at least 1000 members in TikTok Ads before it can be
  used in an ad group.
- Allow for up to 10 hours after the point at which Amperity has finished sending
  audience updates for them to be available.
- All workflows that make data available to Tableau should be configured to update
  automatically on a daily or weekly schedule.
- 'Tulip supports the following entities: stores, employees, categories, products,
  variants, prices, inventory, customers, and order history.'
- The file prefix the filename generated by Amperity must match the file prefix required
  by Tulip for that entity.
- Credentials for Vibes require a 'username' and 'passphrase'.
- All other Amperity file format settings for Vibes are optional.
- Allow for up to 48 hours after sending audience updates for them to be available.
- Membership duration can be set between 0 - 180 days, with a default of 14 days.
- Amperity sends data to the Lambda function in NDJSON format.
- Credentials for Tulip require a 'username' and 'private key'.
- The name of the SFTP site, SSH key, and remote folder are provided by Tulip support
  after the File Importer is activated in the Tulip Admin Console.
- Files that are sent to Vibes are routed based on a required filename pattern.
- A filename template pattern is required for proper formatting for files sent to
  Vibes.
- Changes to audience lists are not immediately available in Yahoo DSP. Allow for
  up to 48 hours after the point at which Amperity has finished sending audience updates
  for them to be available.
- Creating or updating records are rate limited to a maximum of 100 users per second.
- Changes to audiences are not immediately available in Walmart DSP. Allow for up
  to 48 hours after the point at which Amperity has finished sending audience updates
  for them to be available.
- Your custom destination may require additional steps and/or modifications to the
  steps described in this topic.
- Supports flexible, multi-criteria search for unified customer profiles.
- Outputs of AmpAI Assistants are probabilistic. Users should double check outputs
  for accuracy.
- Amperity Bridge enables sharing data between Amperity and a data lakehouse using
  industry-standard data formats.
- Each bridge configures inbound or outbound connections that give you access to shared
  tables without replicating data.
- AmpAI supports customization through custom prompting capabilities.
- AmpAI enforces user-level permissions, allowing granular control over access.
- Activation IDs are available immediately after the database is activated and do
  not require the database to be run.
- Each request to a profile API endpoint MUST have the correct URL for that endpoint.
- A data export must be configured within a sandbox by a user who is assigned to the
  DataGrid Administrator policy.
- Users assigned to the DataGrid Operator and Amp360 User policies may add the data
  export to orchestrations.
- Presence of NULL evaluates to NULL in BETWEEN operator
- String arguments for BETWEEN must be of same type
- Presto SQL does not support the use of a PIVOT operator.
- Amperity requires each feed to specify a field that describes when each record was
  last updated.
- In Presto SQL, the index starts at 1.
- In Spark SQL, the index starts at 0.
- Ensure segments are run automatically.
- Amperity is a multi-user system and the set of queries for your company is shared
  across all users.
- Not all of the functionality described in the official documentation for Presto
  SQL should be used in the SQL Segment Editor.
- A user must be assigned the **Allow sandbox administration** policy option to view
  details for all sandboxes, access any sandbox, promote changes from a sandbox to
  production, or delete a sandbox.
- If you receive a validation report with errors, investigate each error and work
  to resolve the underlying issue.
- If your tenant is restored to a previous version, all changes that were made to
  your tenant after that version will be lost.
- Ensure that queries are activated before running.
- Up to five segments may be configured to show in the list of recommended segments.
- Only upload CSV files on the Query Editor, if you are going to add additional SQL
  to your query.
- Segment insights are available when your customer 360 database contains certain
  tables.
- Tables must be configured to be available to the Segments page.
- Notifications fall into general behaviors, but all notifications within your tenant
  are specific to your tenant and reflect how your tenant is configured.
- Spark SQL is used to define all SQL queries related to the Stitch process up to
  and including building the tables in the customer 360 database.
- Presto SQL is used to define SQL queries for segments.
- Sandbox configuration works the same way as it does in production with all of the
  same features and functionality.
- A user must be assigned the Allow sandbox administration policy option to view details
  for all sandboxes, access any sandbox, promote changes from a sandbox to production,
  and delete a sandbox.
- A query runs faster when SELECT statements are restricted to specific columns
- A query runs slower when a JOIN operation introduces skew
- You cannot promote changes in a sandbox to production until all validation issues
  are resolved.
- Skew occurs when one partition is assigned a greater amount of work than other partitions.
- Small amounts of skew are common and are sometimes unavoidable.
- Large amounts of skew can lead to increased costs and increased runtimes.
- Remove unintended duplication of values in upstream tables to help prevent skew.
- Filter out values not needed in the final output, including NULL values or placeholders
  for NULL values.
- Some functions will fail if they encounter NULL values. Use COALESCE prior to CONCAT
  and SUM functions to ensure they do not encounter NULL values.
- The CONCAT function will return NULL if the value of any field is NULL. Use COALESCE
  to coalesce to a zero-length string prior to concatenation.
- Users of downstream systems are often not the same set of users who configure and
  manage segments in Amperity.
- Failed login attempts are recorded in Amperity application audit logs.
- Amperity uses Spark SQL, version 3.5.5.
- The Workflows page is accessible to users of Amperity who are assigned the Amp360
  User policy, the AmpIQ User policy, the Datagrid Operator policy, or the Datagrid
  Administrator policy in your production tenant and the Datagrid Administrator policy
  in a sandbox.
- The Workflows page is read-only for users who are assigned the AmpIQ User policy.
- Use a backslash (\) as an escape character for strings that contain single and double
  quotes.
- Always use uppercase for the reserved keywords like SELECT and WHERE.
- Small amounts of skew are common and sometimes unavoidable.
- Common causes of skew include unintended duplication of values in upstream tables.
- Values that are not needed in the final output, including NULL values or placeholders
  for NULL values, can cause skew.
- Avoid duplication in JOIN operations by setting good values for primary keys.
- Email addresses that receive workflow alerts must belong to an allowed domain in
  Amperity.
- Only one Slack workspace may be authorized for your tenant.
- The NOT EXISTS expression runs the same way in Spark SQL and Presto SQL.
- If a CASE expression is too long, add a new line between WHEN and THEN clauses to
  make the line more readable.
- When a GROUP BY clause is used in a SELECT statement all output expressions must
  be either aggregate functions or columns present in the GROUP BY clause.
- From a performance point of view, window functions tend to be relatively performant
  when the OVER() function includes a PARTITION BY clause over a well-distributed
  field.
- Uses COALESCE function to handle NULL values in expressions
- Some functions may require particular data types for optimal performance.
- Streaming JSON is a way to send increments of data using NDJSON formatting within
  each increment.
- A bridge does not require a courier or a database export to be configured.
- A bridge can be configured to run automatically as part of any scheduled workflow.
- A data exchange in Google BigQuery is private by default.
- A data listing in Google BigQuery is a reference to a shared dataset that exists
  in a data exchange.
- Amperity only sends workflow alerts to the configured channels.
- Journeys require that segments are available and that at least one destination has
  been configured.
- Authentication for 'Google Enhanced Conversions' must be completed within Google
  prior to configuring Amperity to send ads to Google Enhanced Conversions.
- Some objects may return nulls in deeply nested fields
- Some data may return nulls in deeply nested fields
- Use a sandbox to make configuration changes to Stitch, and then compare the benchmark
  results in the sandbox to the high benchmark results in production.
- You must agree to a EUID participation policy, which is a requirement for EUID sharing.
- Amperity does not sell third-party data or mark it up in any way.
- Real-time tables take up to 2 minutes to appear after streaming.
- Real-time table schemas cannot be updated; create a new table for updated schemas.
- A data listing is private by default.
- General Data Protection Regulation (GDPR) and California Consumer Privacy Act (CCPA)
  compliance is the obligation of each customer, including interpreting and determining
  how to comply with each request made by a user.
- Customers are encouraged to seek legal counsel regarding California Consumer Privacy
  Act (CCPA) compliance and should not rely solely on General Data Protection Regulation
  (GDPR) and California Consumer Privacy Act (CCPA) workflows within Amperity to ensure
  that compliance.
- 'An address must match on all of the following fields: address, address2, city,
  state, postal, and country.'
- If the request is still active the privacy rights workflow will continue to apply
  the results of that request.
- Activity logs are retained for audit and compliance purposes and cannot be deleted.
- Users who are associated with a custom resource group cannot access the Sources
  page.
- Users who are associated with a custom resource group may be able to view the Stitch
  page depending on their policy.
- Amperity enforces multi-factor authentication for all users who log in with a username
  and password
- Streaming Ingest API is the only supported data source for real-time tables.
- Data from real-time tables may take up to 2 minutes to appear.
- A value for range_from must be specified for any courier group that is configured
  to pull files from cloud storage.
- This topic does not constitute legal advice to third parties regarding General Data
  Protection Regulation (GDPR) and California Consumer Privacy Act (CCPA) compliance,
  nor does it imply that steps taken by Amperity will satisfy these compliance requirements.
- Addresses in incoming data must be standardized before they can be used for matching
  in compliance requests.
- If a record is not found, verify the matching criteria or check for upstream data
  consistency.
- Access Denied message indicates insufficient policies assigned to the user.
- Only users from an allowed domain may access Amperity.
- Amperity enforces multi-factor authentication for all users.
- Some information about your configuration must be shared with Amperity, such as
  a username and passcode required to authenticate and access to various cloud storage
  services or REST APIs.
errors:
- '401 Unauthorized: Recheck OAuth scopes or token expiration'
- 'HTTP 429: Rate limit exceeded, please reduce the frequency of requests.'
- '429 Too Many Requests: Rate limit exceeded.'
- '429: Request throttled. The number of requests may not exceed 1000 requests per
  second.'
- '413: Request is too large. The maximum payload size may not exceed 5 MB.'
- '400: Request malformed.'
- '401: Unauthorized. JWT could not be verified or is expired.'
- '413: Request is too large.'
- '429: Request throttled.'
- '500: Internal error.'
- '503: Service unavailable.'
- '504: Gateway timeout.'
- 'REQUEST_LIMIT_EXCEEDED: Throttle API calls or reduce frequency'
- 'QUERY_TIMEOUT: Break down filters or add selectivity'
- '400 Bad Request: Check the request parameters.'
- '401 Unauthorized: Recheck OAuth token.'
- '404 Not Found: Ensure the endpoint is correct.'
- 'Invalid credentials: Verify that the credentials required by this workflow are
  valid.'
- 'Invalid group name: Verify the name of the user group in ActiveCampaign.'
- 'SFTP site unavailable: Verify the configuration for ''sfgext.acxiom.com''.'
- 'Invalid group name: Verify the name of the user group and/or create a user group
  with the name that is required by this workflow.'
- 'SFTP site unavailable: The SFTP server is unavailable or unresponsive.'
- 'SFTP site unavailable: Verify that the SFTP server is available and responsive.'
- 'SFTP site unavailable: Verify the configuration for ''ftp5.adobe.net''.'
- 'Invalid credentials: Verify the credentials required by this workflow are valid.'
- 'SFTP site unavailable: Verify the configuration for ''account.campaign.adobe.com''.'
- 'SFTP site unavailable: The SFTP site at ''ftp5.adobe.net'' is unavailable.'
- 'Invalid advertiser account ID: Verify that the advertiser account ID exists in
  Amazon Ads.'
- 'SFTP site unavailable: A configuration error within Amperity or the SFTP server
  may be unresponsive.'
- '400 Bad Request: Check the request format and parameters'
- '403 Forbidden: Ensure permissions are correctly set for the Lambda function'
- '404 Not Found: Verify the API Gateway endpoint URL'
- 'Invalid bucket name: The name of the Amazon S3 bucket to which Amperity pushes
  data must be correctly specified in the configuration.'
- 'Invalid credentials: The credentials that are defined in Amperity are invalid.'
- 'Invalid bucket name: The name of the Amazon S3 bucket must be correctly specified'
- 'Invalid credentials: The credentials defined in Amperity are invalid'
- '401 Unauthorized: Recheck API key or permissions'
- 'Invalid permissions: Verify that the SAS token was configured correctly within
  Amperity.'
- 'SFTP site unavailable: Verify the configuration for ''sftp.bazaarvoice.com''.'
- 'Status 401 error: Recheck OAuth scopes or token expiration'
- 'INVALID_CREDENTIALS: Verify that the credentials required by this workflow are
  valid.'
- 'SFTP_SITE_UNAVAILABLE: Verify that the SFTP server is available and responsive.'
- 'Missing required field: A unique identifier must be provided to Braze.'
- 'Status 401 error: Amperity was unable to connect to Braze.'
- 'Status 401 error: Check your authentication credentials.'
- 'SFTP site unavailable: Check if the SFTP site is reachable.'
- 'SFTP site unavailable: Check the connection to the SFTP site.'
- 'Required attributes are missing: Verify the attributes that are required by Cordial.'
- 'Unique list name required: Verify that the name of the list is unique.'
- 'Required attributes are missing: Cordial will reject audiences when required attributes
  are missing.'
- 'Unique list name required: Cordial list names must be unique.'
- Requires permission CREATE CATALOG on Metastore '<metastore>'.
- 'Error: User does not have CREATE PROVIDER on Metastore ''<metastore>''.'
- 'Invalid bucket name: The name of the Amazon S3 bucket must be correctly specified.'
- 'Invalid credentials: Ensure that the correct credentials are being used.'
- 'Invalid bucket name: Verify the name of the Amazon S3 bucket'
- 'Invalid credentials: Ensure correct configuration for the destination'
- NULL value in Mobile Device ID will be shown in the error logs.
- 'Invalid bucket name: The name of the Amazon S3 bucket to which Amperity pushes
  data must be correctly specified in the configuration for the destination.'
- 'Permissions error: To create or edit an audience with an uploaded customer list,
  please agree to the Custom Audience terms.'
- 'Maximum custom audiences exceeded: Amperity will be unable to create custom audiences
  when this limit is exceeded.'
- 'Must agree to Facebook terms: Permissions error: To create or edit an audience
  with an uploaded customer list, please agree to the Custom Audience terms.'
- 'Must belong to business account: Amperity workflows will be unable to create or
  edit a custom audience.'
- 'Security challenge: Complete the steps that are required to resolve the security
  challenge.'
- 'Maximum custom audiences exceeded: Verify the number of custom-audiences associated
  with your Meta Ads Manager account.'
- 'Must agree to Facebook terms: Each business user must agree to the Custom Audience
  terms.'
- 'Must belong to business account: The advertising account must also belong to a
  business account.'
- 'Security challenge: Complete the steps required to resolve the security challenge.'
- 'Cannot update audience: Verify that the user account can update audiences that
  are associated with the customer ID.'
- 'Expired token: Refresh the token that is used with Google Ads.'
- 'Incomplete account setup: Verify that your Google Ads account is set up correctly.'
- 'Missing required fields: One or more required attributes are missing.'
- 'Two-factor authentication required: Google Ads requires two-factor authentication
  to be enabled.'
- 'User cannot access audience: The Google Ads user account does not have permission
  to view, edit, and manage the linked client account.'
- 'Missing required fields: Update the list of attributes to include all required
  fields.'
- 'User cannot access audience: Verify the permissions associated with the user account
  in Google Ads.'
- '400: If a list of email addresses that is sent to HubSpot contains a single invalid
  email address the entire import will fail.'
- 'SFTP site unavailable: The SFTP site at ''sedt.infutor.com'' is unavailable.'
- '400: Invalid email addresses'
- 'Maximum number of lists exceeded: Klaviyo supports up to 1000 lists and/or segments
  in your account at any given time.'
- 'SFTP site unavailable: Verify the configuration for sedt.infutor.com.'
- 'Maximum number of lists exceeded: Verify the number of lists and/or segments associated
  with your Klaviyo account.'
- 'Invalid credentials: Verify the credentials required by this workflow.'
- 'SFTP site unavailable: Check configuration and server availability.'
- 'SFTP site unavailable: The SFTP site at ''sftp.kouponmedia.com'' is unavailable.'
- 'Dataset size error: Verify that the number of rows in the audience list is at least
  300 and no more than 300,000.'
- 'Invalid account ID: Verify that the advertiser LinkedIn account ID exists in LinkedIn.'
- 'Invalid fields: Ensure that the list contains only allowed fields (email or firstname
  and lastname).'
- 'LinkedIn is processing data: Verify that the segment status is ''ready''.'
- 'Dataset size error: LinkedIn requires the uploaded audience to be between 300 and
  300,000 rows.'
- 'Invalid account ID: LinkedIn DMP requires a valid Linkedin account ID to be associated
  with an advertiser.'
- 'Invalid fields: LinkedIn DMP requires the name of the identifier type to be one
  of the following: email, firstname and lastname.'
- 'Email address required: Verify that ''Email'' is included in the attributes being
  sent.'
- 'Expired credentials: Create a new credential for this destination.'
- 'Invalid credentials: Verify that the credentials are valid.'
- 'Must accept terms and conditions: Agree to the Customer Match terms of use.'
- 'Not authorized: Verify the account and customer IDs.'
- 'Expired credentials: The credentials for your Microsoft Advertising account may
  have expired.'
- 'Not authorized: Amperity must have access to the correct combination of account
  and customer IDs in Microsoft Advertising.'
- 'SFTP site unavailable: The SFTP site at ''sftp.monetate.com'' is unavailable.'
- 'SFTP site unavailable: Check the configuration for ''sftp.monetate.com''.'
- 'SFTP site unavailable: Verify the configuration for ''onboarding.neustar.biz''.'
- 'SFTP site unavailable: Verify the configuration for onboarding.neustar.biz.'
- 'SFTP site unavailable: Check if the SFTP server at direct.datalogix.com is available.'
- 'Invalid bucket name: Verify the name of the Amazon S3 bucket in the configuration.'
- 'SFTP site unavailable: Verify the configuration for direct.datalogix.com.'
- 'SFTP site unavailable: Verify the configuration for ''sftp.pebblepost.com''.'
- 'SFTP_SITE_UNAVAILABLE: The SFTP site at ''psftp.persado.com'' is unavailable.'
- 'Rate limit exceeded: Throttle API calls or reduce frequency.'
- 'SFTP site unavailable: Verify the configuration for “sftp.pebblepost.com”.'
- 'SFTP site unavailable: The SFTP site at “psftp.persado.com” is unavailable.'
- 'Invalid credentials: Ensure the username and passphrase are correct.'
- 'SFTP site unavailable: Check the availability of sftp.powerreviews.com.'
- 'SFTP site unavailable: The SFTP site at ''sftp.evergage.com*'' is unavailable.'
- 'SFTP_SITE_UNAVAILABLE: Check the SFTP site is available.'
- 'SFTP site unavailable: The SFTP site at "sftp.evergage.com*" is unavailable.'
- 'Invalid credentials: The credentials defined in Amperity for Snapchat are invalid
  and must be refreshed.'
- 'SFTP site unavailable: Review the details and ensure SFTP site is provisioned.'
- 'Invalid credentials: The credentials that are defined in Amperity for Snapchat
  are invalid and must be refreshed.'
- 'Advertiser not found: Review the configuration for the destination and data template.'
- 'Missing advertiser permissions: Verify that the business user is assigned to the
  Operator role.'
- 'SFTP site unavailable: The SFTP site at ''upload.vibes.com'' is unavailable.'
- Advertiser not found
- Invalid credentials
- Missing advertiser permissions
- '403: Authorization Error - Amperity is not able to access the Zendesk Users API.'
- '403: Authorization Error - Check email address and API token.'
- Invalid credentials - Verify credentials in Amperity.
- 'REQUEST_LIMIT_EXCEEDED: Throttle API calls or reduce frequency.'
- '401 Unauthorized: Check token validity.'
- '404 Not Found: Verify endpoint URL.'
- Ingesting data
- Running a courier
- Data type mismatch with a feed
- Invalid group name
- Invalid advertiser account ID
- Missing required field
- Invalid bucket name
- Invalid permissions
- Status 401 error
- Cannot update audience
- Expired token
- Incomplete account setup
- Maximum number of lists exceeded
- Authorization error
- Email address required
- Expired credentials
- Must accept terms and conditions
- Not authorized
- Two-step authentication required
- Unique list name required
- Maximum custom audiences exceeded
- Must agree to Facebook terms
- Must belong to business account
- Security challenge
- Import location has wrong type
- Import location not found
- Incorrect data extension name
- Incorrect folder
- Missing primary key
- SFTP unavailable
- '400: A human-readable summary of the error.'
- '404 Not Found: The requested entity does not exist.'
- The Google BigQuery BYTES data type is unsupported. Exclude fields with BYTES data
  types from tables before sharing them with Amperity.
- The Google BigQuery RANGE data type is unsupported. Exclude fields with RANGE data
  types from tables before sharing them with Amperity.
- 'REQUEST_NOT_FOUND: Verify that the request ID is correct.'
- 'INVALID_REQUEST_TYPE: Ensure the request type is one of delete, delete_pii, or
  dsar.'
- 'MATCH_NOT_FOUND: Ensure all fields required for matching are present and valid.'
- 'Access Denied: Insufficient policies assigned.'
auth_info:
  mentioned_objects:
  - client_id
  - client_secret
  - OauthToken
  - AuthProvider
  - NamedCredential
  - API key
  - access token
  - tenant ID
  - index ID
client:
  base_url: https://app.amperity.com
  auth:
    type: oauth2
    location: header
    header_name: Authorization
source_metadata: null
