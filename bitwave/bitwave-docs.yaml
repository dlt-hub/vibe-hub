resources:
- name: transactions_v1
  endpoint:
    path: /txns/categorize/{orgId}/{transactionId}
    method: GET
- name: transactions_v2
  endpoint:
    path: /orgs/{orgId}/transactions
    method: GET
- name: categories
  endpoint:
    path: /org/{orgId}/categories
    method: GET
- name: connections
  endpoint:
    path: /orgs/{orgId}/connections
    method: GET
- name: contacts
  endpoint:
    path: /contacts/{orgId}
    method: GET
- name: organizations
  endpoint:
    path: /organizations
    method: GET
- name: users
  endpoint:
    path: /users/me
    method: GET
- name: wallets
  endpoint:
    path: /orgs/{orgId}/wallets
    method: GET
- name: transactions
  endpoint:
    path: /api/v1/transactions
    method: GET
    data_selector: data
    params: {}
- name: pricing
  endpoint:
    path: /api/v1/pricing
    method: GET
    data_selector: data
    params: {}
- name: TransactionID
  endpoint:
    path: /orgs/{orgId}/customers/-/transactions/{transactionId}
    method: GET
- name: Transactions
  endpoint:
    path: /orgs/{orgId}/customers/{customerId}/transactions
    method: GET
- name: Gain/Loss Report
  endpoint:
    path: /orgs/{orgId}/customers/{customerId}/reports/gainLossReport
    method: POST
- name: Reports
  endpoint:
    path: /orgs/{orgId}/customers/{customerId}/reports
    method: GET
- name: TransactionID
  endpoint:
    path: /orgs/{orgId}/customers/-/transactions/{transactionId}
    method: GET
- name: Transactions
  endpoint:
    path: /orgs/{orgId}/customers/{customerId}/transactions
    method: GET
- name: Gain/Loss Report
  endpoint:
    path: /orgs/{orgId}/customers/{customerId}/reports/gainLossReport
    method: GET
- name: Reports
  endpoint:
    path: /orgs/{orgId}/customers/{customerId}/reports
    method: GET
- name: transactions_dirty
  endpoint:
    path: /orgs/{orgId}/transactions/dirty
    method: GET
- name: transactions_dirty
  endpoint:
    path: /orgs/{orgId}/transactions/dirty
    method: GET
- name: transactions
  endpoint:
    path: /orgs/{orgId}/transactions
    method: GET
- name: transactions
  endpoint:
    path: /orgs/{orgId}/transactions
    method: GET
- name: transaction
  endpoint:
    path: /orgs/{orgId}/transactions/{transactionId}
    method: PATCH
- name: transactions
  endpoint:
    path: /orgs/{orgId}/transactions/{transactionId}
    method: PATCH
- name: rule_application
  endpoint:
    path: /orgs/{orgId}/transactions/{transactionId}/rules/{ruleId}
    method: GET
- name: apply_rule
  endpoint:
    path: /orgs/{orgId}/transactions/{transactionId}/rules/{ruleId}
    method: GET
- name: org
  endpoint:
    path: /orgs/{orgId}
    method: GET
- name: org
  endpoint:
    path: /orgs/{orgId}
    method: GET
- name: categorize_transaction
  endpoint:
    path: /txns/categorize/{orgId}/{transactionId}
    method: PUT
- name: transaction
  endpoint:
    path: /txns/{orgId}/{transactionId}/{sourceId}
    method: PUT
- name: transaction
  endpoint:
    path: /txns/{orgId}/{transactionId}/{sourceId}
    method: PUT
- name: transaction
  endpoint:
    path: /txns/{orgId}/{transactionId}/{sourceId}
    method: head
- name: transaction
  endpoint:
    path: /txns/{orgId}/{transactionId}
    method: GET
- name: transaction
  endpoint:
    path: /txns/{orgId}/{transactionId}
    method: GET
- name: transactions
  endpoint:
    path: /txns/{orgId}
    method: GET
- name: transactions
  endpoint:
    path: /txns/{orgId}
    method: GET
- name: categories
  endpoint:
    path: /org/{orgId}/categories
    method: GET
- name: categories
  endpoint:
    path: /org/{orgId}/categories
    method: GET
- name: connection
  endpoint:
    path: /orgs/{orgId}/connections/{connectionId}
    method: GET
- name: token
  endpoint:
    path: /orgs/{orgId}/connections/{connectionId}/token
    method: GET
- name: connection
  endpoint:
    path: /orgs/{orgId}/connections/{connectionId}
    method: GET
- name: connections
  endpoint:
    path: /orgs/{orgId}/connections
    method: GET
    data_selector: connections
- name: token
  endpoint:
    path: /orgs/{orgId}/connections/{connectionId}/token
    method: GET
- name: contacts
  endpoint:
    path: /contacts/{orgId}
    method: GET
- name: connections
  endpoint:
    path: /orgs/{orgId}/connections
    method: GET
- name: contacts
  endpoint:
    path: /contacts/{orgId}
    method: GET
- name: organizations
  endpoint:
    path: /organizations
    method: GET
- name: authentication_token
  endpoint:
    path: /v2/oauth/token
    method: POST
- name: user
  endpoint:
    path: /users/me
    method: GET
    data_selector: user_info
- name: organizations
  endpoint:
    path: /organizations
    method: GET
    data_selector: organizations
- name: wallets
  endpoint:
    path: /orgs/{orgId}/wallets
    method: GET
- name: user
  endpoint:
    path: /users/me
    method: GET
    data_selector: user_info
- name: address
  endpoint:
    path: /networks/{networkId}/addresses/{address}
    method: GET
- name: wallets
  endpoint:
    path: /orgs/{orgId}/wallets
    method: GET
- name: addresses
  endpoint:
    path: /v1/networks/{networkId}/addresses/{addresses}
    method: GET
- name: address_balance
  endpoint:
    path: /networks/{networkId}/addresses/{address}/balance
    method: GET
- name: address
  endpoint:
    path: /networks/{networkId}/addresses/{address}
    method: GET
- name: vault_balance
  endpoint:
    path: /networks/{networkId}/addresses/{vaultAddress}/vaultBalance
    method: GET
- name: addresses
  endpoint:
    path: /v1/networks/{networkId}/addresses/{addresses}
    method: GET
- name: address_balance
  endpoint:
    path: /networks/{networkId}/addresses/{address}/balance
    method: GET
- name: token_supply
  endpoint:
    path: /networks/{networkId}/addresses/{address}/supply
    method: GET
- name: vault_balance
  endpoint:
    path: /networks/{networkId}/addresses/{vaultAddress}/vaultBalance
    method: GET
- name: addresses_read
  endpoint:
    path: /networks/{networkId}/addresses/{address}/read/{method}
    method: GET
- name: token_supply
  endpoint:
    path: /networks/{networkId}/addresses/{address}/supply
    method: GET
- name: blocks
  endpoint:
    path: /networks/{networkId}/blocks
    method: GET
- name: addresses_read_method
  endpoint:
    path: /networks/{networkId}/addresses/{address}/read/{method}
    method: GET
- name: coins
  endpoint:
    path: /coins
    method: GET
- name: blocks
  endpoint:
    path: /networks/{networkId}/blocks
    method: GET
- name: coin
  endpoint:
    path: /coins/{coinId}
    method: GET
    data_selector: coinInformation
- name: coins
  endpoint:
    path: /coins
    method: GET
    data_selector: coins
    params: {}
- name: DeFi Balance
  endpoint:
    path: /networks/{networkId}/platforms/{platformId}/balance
    method: GET
- name: coin
  endpoint:
    path: /coins/{coinId}
    method: GET
- name: symbols
  endpoint:
    path: /symbols/{symbol}
    method: GET
- name: deFi_balance
  endpoint:
    path: /networks/{networkId}/platforms/{platformId}/balance
    method: GET
- name: symbols
  endpoint:
    path: /symbols/{symbol}
    method: GET
- name: rate_table
  endpoint:
    path: /orgs/{orgId}/rate-tables
    method: POST
- name: transactions_v2
  endpoint:
    path: /orgs/{orgId}/transactions/dirtyget
    method: GET
- name: transactions_v1
  endpoint:
    path: /txns/categorize/{orgId}/{transactionId}
    method: PUT
- name: categories
  endpoint:
    path: /org/{orgId}/categories
    method: GET
- name: contacts
  endpoint:
    path: /contacts/{orgId}
    method: GET
- name: organizations
  endpoint:
    path: /organizations
    method: GET
- name: users
  endpoint:
    path: /users/me
    method: GET
- name: rate_tables
  endpoint:
    path: /orgs/{orgId}/rate-tables
    method: GET
- name: rate_table_load
  endpoint:
    path: /orgs/{orgId}/rate-tables/{rateTableId}/load
    method: POST
- name: rate_table
  endpoint:
    path: /orgs/{orgId}/rate-tables
    method: POST
- name: rate_table
  endpoint:
    path: /orgs/{orgId}/rate-tables/{rateTableId}
    method: GET
- name: rate_tables
  endpoint:
    path: /orgs/{orgId}/rate-tables
    method: GET
- name: rate_table_coins
  endpoint:
    path: /orgs/{orgId}/rate-tables/{rateTableId}/coins/{currencyId}
    method: GET
- name: rate_table_load
  endpoint:
    path: /orgs/{orgId}/rate-tables/{rateTableId}/load
    method: POST
- name: rate_table_row
  endpoint:
    path: /orgs/{orgId}/rate-tables/{rateTableId}/rows/{rowId}
    method: GET
- name: rate_table
  endpoint:
    path: /orgs/{orgId}/rate-tables/{rateTableId}
    method: GET
- name: rate_table_row
  endpoint:
    path: /orgs/{orgId}/rate-tables/{rateTableId}/rows/{rowId}
    method: PATCH
- name: rate_table_coins
  endpoint:
    path: /orgs/{orgId}/rate-tables/{rateTableId}/coins/{currencyId}
    method: GET
- name: rate_table_row
  endpoint:
    path: /orgs/{orgId}/rate-tables/{rateTableId}/rows/{rowId}
    method: DELETE
- name: rate_table_row
  endpoint:
    path: /orgs/{orgId}/rate-tables/{rateTableId}/rows/{rowId}
    method: GET
- name: rate_table_rows
  endpoint:
    path: /orgs/{orgId}/rate-tables/{rateTableId}/rows
    method: DELETE
- name: rate_table_row
  endpoint:
    path: /orgs/{orgId}/rate-tables/{rateTableId}/rows/{rowId}
    method: PATCH
- name: health
  endpoint:
    path: /health
    method: GET
    data_selector: ''
- name: rate_table_row
  endpoint:
    path: /orgs/{orgId}/rate-tables/{rateTableId}/rows/{rowId}
    method: DELETE
- name: rate_table_svc_swagger
  endpoint:
    path: /rate-table-svc-swagger.json
    method: GET
    data_selector: response
- name: rate_table_rows
  endpoint:
    path: /orgs/{orgId}/rate-tables/{rateTableId}/rows
    method: DELETE
- name: transactions_dirty
  endpoint:
    path: /orgs/{orgId}/transactions/dirty
    method: GET
- name: health
  endpoint:
    path: /health
    method: GET
- name: org
  endpoint:
    path: /orgs/{orgId}
    method: GET
- name: rate_table_svc_swagger
  endpoint:
    path: /rate-table-svc-swagger.json
    method: GET
    data_selector: response
    params: {}
- name: transactions_dirty
  endpoint:
    path: /orgs/{orgId}/transactions/dirty
    method: GET
- name: categories
  endpoint:
    path: /org/{orgId}/categories
    method: GET
- name: org
  endpoint:
    path: /orgs/{orgId}
    method: GET
- name: connection
  endpoint:
    path: /orgs/{orgId}/connections/{connectionId}
    method: GET
- name: categorize_transaction
  endpoint:
    path: /txns/categorize/{orgId}/{transactionId}
    method: PUT
- name: contacts
  endpoint:
    path: /contacts/{orgId}
    method: GET
- name: categories
  endpoint:
    path: /org/{orgId}/categories
    method: GET
    data_selector: categories
- name: connection
  endpoint:
    path: /orgs/{orgId}/connections/{connectionId}
    method: GET
- name: organizations
  endpoint:
    path: /organizations
    method: GET
- name: contacts
  endpoint:
    path: /contacts/{orgId}
    method: GET
- name: user_info
  endpoint:
    path: /users/me
    method: GET
    data_selector: account_info
- name: wallets
  endpoint:
    path: /orgs/{orgId}/wallets
    method: GET
- name: organizations
  endpoint:
    path: /organizations
    method: GET
- name: address
  endpoint:
    path: /networks/{networkId}/addresses/{address}
    method: GET
- name: user_info
  endpoint:
    path: /users/me
    method: GET
    data_selector: ''
- name: blocks
  endpoint:
    path: /networks/{networkId}/blocks
    method: GET
- name: coins
  endpoint:
    path: /coins
    method: GET
- name: wallets
  endpoint:
    path: /orgs/{orgId}/wallets
    method: GET
- name: DeFi Balance
  endpoint:
    path: /balance
    method: GET
- name: address
  endpoint:
    path: /networks/{networkId}/addresses/{address}
    method: GET
- name: symbols
  endpoint:
    path: /symbols/{symbol}
    method: GET
- name: blocks
  endpoint:
    path: /networks/{networkId}/blocks
    method: GET
- name: rate_table
  endpoint:
    path: /orgs/{orgId}/rate-tables
    method: post
- name: coins
  endpoint:
    path: /coins
    method: GET
    data_selector: coins
- name: rate_tables_load
  endpoint:
    path: /orgs/{orgId}/rate-tables/{rateTableId}/load
    method: post
- name: DeFi Balance
  endpoint:
    path: /networks/{networkId}/platforms/{platformId}/balance
    method: GET
- name: symbols
  endpoint:
    path: /symbols/{symbol}
    method: GET
- name: rate_table
  endpoint:
    path: /orgs/{orgId}/rate-tables/{rateTableId}
    method: GET
- name: rate_table
  endpoint:
    path: /orgs/{orgId}/rate-tables
    method: post
- name: rate_table_coins
  endpoint:
    path: /orgs/{orgId}/rate-tables/{rateTableId}/coins/{currencyId}
    method: GET
- name: rate_table_load
  endpoint:
    path: /orgs/{orgId}/rate-tables/{rateTableId}/load
    method: post
- name: rate_table
  endpoint:
    path: /orgs/{orgId}/rate-tables/{rateTableId}
    method: GET
- name: rate_table_row
  endpoint:
    path: /orgs/{orgId}/rate-tables/{rateTableId}/rows/{rowId}
    method: GET
- name: rate_table_coins
  endpoint:
    path: /orgs/{orgId}/rate-tables/{rateTableId}/coins/{currencyId}
    method: GET
- name: rate_table_rows
  endpoint:
    path: /orgs/{orgId}/rate-tables/{rateTableId}/rows
    method: DELETE
- name: rate_table_row
  endpoint:
    path: /orgs/{orgId}/rate-tables/{rateTableId}/rows/{rowId}
    method: GET
- name: health
  endpoint:
    path: /health
    method: GET
- name: rate_table_rows
  endpoint:
    path: /orgs/{orgId}/rate-tables/{rateTableId}/rows
    method: DELETE
- name: rate_table_svc_swagger
  endpoint:
    path: /rate-table-svc-swagger.json
    method: GET
    data_selector: swagger
    params: {}
- name: health
  endpoint:
    path: /health
    method: GET
- name: rate_table_svc_swagger
  endpoint:
    path: /rate-table-svc-swagger.json
    method: GET
    data_selector: response
    params: {}
- name: categories
  endpoint:
    path: /create/categories
    method: POST
- name: contacts
  endpoint:
    path: /create/contacts
    method: POST
- name: contacts
  endpoint:
    path: /contacts
    method: POST
    data_selector: contacts
    params: {}
- name: categories
  endpoint:
    path: /categories
    method: POST
    data_selector: categories
    params: {}
- name: contacts
  endpoint:
    path: /contacts
    method: POST
    data_selector: contact
    params: {}
- name: categories
  endpoint:
    path: /categories
    method: POST
    data_selector: category
    params: {}
- name: accounting_defaults
  endpoint:
    path: /api/accounting/defaults
    method: POST
    data_selector: data
    params: {}
- name: onchain_wallets
  endpoint:
    path: /docs/onchain-wallets
    method: GET
    data_selector: records
- name: exchanges
  endpoint:
    path: /docs/exchanges-1
    method: GET
    data_selector: records
- name: custodial_accounts
  endpoint:
    path: /docs/custodial
    method: GET
    data_selector: records
- name: manual_wallets
  endpoint:
    path: /docs/manual
    method: GET
    data_selector: records
- name: manual_import
  endpoint:
    path: /api/manual_imports
    method: POST
    data_selector: transactions
    params: {}
- name: manual_import
  endpoint:
    path: /docs/manual-import
    method: GET
- name: beginning_balances
  endpoint:
    path: /docs/set-beginning-balances
    method: GET
- name: balance_report
  endpoint:
    path: /api/balance/report
    method: GET
    data_selector: balances
    params: {}
- name: inventory_views
  endpoint:
    path: /api/inventory_views
    method: POST
    data_selector: data
    params: {}
- name: transactions
  endpoint:
    path: /transactions
    method: GET
    data_selector: transactions
- name: transaction_categorization
  endpoint:
    path: /api/v1/transaction/categorization
    method: POST
    data_selector: transactions
- name: pricing_data
  endpoint:
    path: /check-pricing-data
    method: GET
    data_selector: pricing_records
- name: categorization_rules
  endpoint:
    path: /docs/set-up-categorization-rules
    method: GET
    data_selector: rules
    params: {}
- name: individual_transaction
  endpoint:
    path: /api/individual-transaction
    method: GET
    data_selector: transactions
    params: {}
- name: transaction_categorization
  endpoint:
    path: /api/v1/transaction/categorization
    method: POST
    data_selector: data
    params: {}
- name: Create System Jobs
  endpoint:
    path: /system-jobs/create
    method: POST
    data_selector: jobs
    params: {}
- name: Types of Actions
  endpoint:
    path: /system-jobs/actions
    method: GET
    data_selector: actions
    params: {}
- name: Categorization Rules
  endpoint:
    path: /docs/set-up-categorization-rules
    method: GET
    data_selector: rules
- name: contacts
  endpoint:
    path: /api/v1/contacts
    method: GET
    data_selector: contacts
    params: {}
- name: transactions
  endpoint:
    path: /api/v1/transactions
    method: POST
    data_selector: data
    params: {}
- name: transactions
  endpoint:
    path: /bulk/categorization
    method: POST
    data_selector: success
    params: {}
- name: rolled_up_journal_entry_report
  endpoint:
    path: /reports/rolled_up_journal_entry
    method: GET
    data_selector: report_totals
- name: journal_entry_report
  endpoint:
    path: /reports/journal_entry
    method: GET
    data_selector: transactions
- name: inventory_views_actions_report
  endpoint:
    path: /reports/inventory_views_actions
    method: GET
    data_selector: transaction_details
- name: cost_basis_rollforward_report
  endpoint:
    path: /reports/cost_basis_rollforward
    method: GET
    data_selector: cost_basis_details
- name: impairment_expense
  endpoint:
    path: /record-impairment
    method: GET
    data_selector: impairment_data
- name: cost_basis_rollforward_report
  endpoint:
    path: /cost-basis-rollforward
    method: GET
    data_selector: report_data
- name: system_jobs
  endpoint:
    path: /api/system_jobs
    method: POST
    data_selector: jobs
    params: {}
- name: journal_entries
  endpoint:
    path: /docs/push-transactions-jes-to-general-ledger
    method: POST
- name: gain_loss
  endpoint:
    path: /docs/record-realized-gainloss
    method: POST
- name: transactions
  endpoint:
    path: /api/v1/transactions
    method: POST
    data_selector: data
    params: {}
- name: rolled_up_journal_entry_report
  endpoint:
    path: /reports/rolled_up_journal_entry
    method: GET
- name: journal_entry_report
  endpoint:
    path: /reports/journal_entry
    method: GET
- name: inventory_views_actions_report
  endpoint:
    path: /reports/inventory_views_actions
    method: GET
- name: cost_basis_rollforward_report
  endpoint:
    path: /reports/cost_basis_rollforward
    method: GET
- name: Cost Basis Summary
  endpoint:
    path: /docs/cost-basis-summary-from-inventory-views
    method: GET
- name: Cost Basis Rollforward
  endpoint:
    path: /docs/cost-basis-rollforward-including-gainloss-totals
    method: GET
- name: Actions Report
  endpoint:
    path: /docs/actions-report-from-inventory-views
    method: GET
- name: Balance Report
  endpoint:
    path: /docs/balance-report-1
    method: GET
- name: Journal Entry Reports
  endpoint:
    path: /docs/journal-entry-reports
    method: GET
- name: Period-End Checklist
  endpoint:
    path: /docs/period-end-checklist
    method: GET
- name: Period-End Reconciliation
  endpoint:
    path: /docs/period-end-reconciliation
    method: GET
- name: impairment_expense
  endpoint:
    path: /api/v1/impairment_expense
    method: GET
    data_selector: records
- name: cost_basis_summary
  endpoint:
    path: /inventory-views-reporting/cost-basis-summary
    method: GET
    data_selector: data
    params: {}
- name: actions_report
  endpoint:
    path: /inventory-views-reporting/actions
    method: GET
    data_selector: data
    params: {}
- name: lots_report
  endpoint:
    path: /inventory-views-reporting/lots
    method: GET
    data_selector: data
    params: {}
- name: cost_basis_rollforward
  endpoint:
    path: /inventory-views-reporting/cost-basis-rollforward
    method: GET
    data_selector: data
    params: {}
- name: trade_journal_entries
  endpoint:
    path: /docs/trade-journal-entries-gainloss-calculation
    method: GET
- name: balance_report
  endpoint:
    path: /reports/balance
    method: GET
    data_selector: balance_data
    params: {}
- name: journal_entry_report
  endpoint:
    path: /journal_entry_reports
    method: GET
- name: journal_entry_report_expanded
  endpoint:
    path: /journal_entry_reports/expanded
    method: GET
- name: rolled_up_journal_entry_report
  endpoint:
    path: /journal_entry_reports/rolled_up
    method: GET
- name: cost_basis_summary
  endpoint:
    path: /docs/cost-basis-summary-from-inventory-views
    method: GET
- name: cost_basis_rollforward
  endpoint:
    path: /docs/cost-basis-rollforward-including-gainloss-totals
    method: GET
- name: actions_report
  endpoint:
    path: /docs/actions-report-from-inventory-views
    method: GET
- name: balance_report
  endpoint:
    path: /docs/balance-report-1
    method: GET
- name: journal_entry_reports
  endpoint:
    path: /docs/journal-entry-reports
    method: GET
- name: period_end_checklist
  endpoint:
    path: /docs/period-end-checklist
    method: GET
- name: period_end_reconciliation
  endpoint:
    path: /docs/period-end-reconciliation
    method: GET
- name: Balance Report
  endpoint:
    path: /docs/balance-report-1
    method: GET
- name: Journal Entry Report
  endpoint:
    path: /docs/journal-entry-reports
    method: GET
- name: Cost Basis Roll Forward Report
  endpoint:
    path: /docs/cost-basis-rollforward
    method: GET
- name: Cost Basis Summary
  endpoint:
    path: /cost-basis-summary
    method: GET
- name: Actions Report
  endpoint:
    path: /actions-report
    method: GET
- name: Lots Report
  endpoint:
    path: /lots-report
    method: GET
- name: Cost Basis Rollforward
  endpoint:
    path: /cost-basis-rollforward
    method: GET
- name: journal_entry_report
  endpoint:
    path: /journal-entry-report
    method: GET
- name: journal_entry_report_expanded
  endpoint:
    path: /journal-entry-report-expanded
    method: GET
- name: rolled_up_journal_entry_report
  endpoint:
    path: /rolled-up-journal-entry-report
    method: GET
- name: transactions
  endpoint:
    path: /transactions
    method: GET
- name: journal_entries
  endpoint:
    path: /journal_entries
    method: GET
- name: period_end_reconciliation
  endpoint:
    path: /period_end_reconciliation
    method: GET
- name: Balance Report
  endpoint:
    path: /docs/balance-report-1
    method: GET
- name: Journal Entry Report
  endpoint:
    path: /docs/journal-entry-reports
    method: GET
- name: Cost Basis Roll Forward Report
  endpoint:
    path: /docs/cost-basis-rollforward
    method: GET
- name: organization
  endpoint:
    path: /api/v1/organization
    method: GET
    data_selector: data
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: organization
  endpoint:
    path: /organization
    method: GET
    data_selector: records
- name: partner_listing
  endpoint:
    path: /docs/partner-listing
    method: GET
    data_selector: records
    params: {}
- name: wallets
  endpoint:
    path: /wallets
    method: GET
- name: connections
  endpoint:
    path: /connections
    method: GET
- name: organization
  endpoint:
    path: /api/organization
    method: GET
- name: wallets
  endpoint:
    path: /api/wallets
    method: GET
    data_selector: wallets
    params: {}
- name: transactions
  endpoint:
    path: /api/transactions
    method: GET
    data_selector: transactions
    params: {}
- name: wallets
  endpoint:
    path: /wallets
    method: POST
- name: Wallets
  endpoint:
    path: /wallets
    method: GET
    data_selector: wallets
    params: {}
- name: XPUB Integration Questionnaire
  endpoint:
    path: /docs/xpub-integration-questionnaire
    method: GET
    data_selector: questions
    params: {}
- name: Add Onchain Wallets
  endpoint:
    path: /docs/add-onchain-wallets
    method: GET
    data_selector: instructions
    params: {}
- name: Add Exchange Wallets
  endpoint:
    path: /docs/add-exchange-wallets
    method: GET
    data_selector: instructions
    params: {}
- name: Add Manual Wallets
  endpoint:
    path: /docs/add-manual-wallets
    method: GET
    data_selector: instructions
    params: {}
- name: transactions_export
  endpoint:
    path: /reports/transactions_export
    method: GET
    data_selector: transactions
    params:
      start_date: 1/1/2021
      end_date: 1/31/2021
      wallet: All
- name: xpub_integration_questionnaire
  endpoint:
    path: /xpub/integration/questionnaire
    method: GET
    data_selector: questionnaire
    params: {}
- name: wallet_deletion
  endpoint:
    path: /wallets/delete
    method: POST
    data_selector: delete_wallet
    params: {}
- name: connections_list
  endpoint:
    path: /connections
    method: GET
    data_selector: connections
    params: {}
- name: balance_check_report
  endpoint:
    path: /balance/check/report
    method: GET
    data_selector: balance_report
    params: {}
- name: transactions
  endpoint:
    path: /transactions
    method: GET
    data_selector: records
- name: transactions
  endpoint:
    path: /transactions
    method: GET
    data_selector: transactions
    params: {}
- name: Export Transactions Report
  endpoint:
    path: /transactions/export
    method: GET
    data_selector: transactions
- name: Raw Transaction Data
  endpoint:
    path: /transactions/import
    method: POST
    data_selector: data
    params: {}
- name: trades
  endpoint:
    path: /import/trades
    method: POST
    data_selector: trades
    params: {}
- name: Account Transfer
  endpoint:
    path: /docs/account-transfer
    method: GET
    data_selector: records
- name: Manual Wallet
  endpoint:
    path: /docs/manual-wallet
    method: GET
    data_selector: records
- name: DeFi Module
  endpoint:
    path: /docs/defi-module
    method: GET
    data_selector: records
- name: transactions_export
  endpoint:
    path: /transactions/export
    method: GET
    data_selector: transactions
    params: {}
- name: stake_accounts
  endpoint:
    path: /stake/accounts
    method: GET
    data_selector: stakeAccounts
    params: {}
- name: transactions
  endpoint:
    path: /transactions
    method: GET
    data_selector: transactions
    params: {}
- name: contacts
  endpoint:
    path: /api/v1/contacts
    method: GET
    data_selector: contacts
- name: categories
  endpoint:
    path: /api/v1/categories
    method: GET
    data_selector: categories
- name: transaction_categorization
  endpoint:
    path: /api/transaction/categorization
    method: POST
- name: manual_import
  endpoint:
    path: /manual-import
    method: POST
    data_selector: transactions
    params: {}
- name: Custom Import Transform
  endpoint:
    path: /transactions/import-advanced/new-import
    method: GET
- name: transactions
  endpoint:
    path: /v1/transactions
    method: GET
    data_selector: data
    params: {}
- name: trades
  endpoint:
    path: /import/trades
    method: POST
    data_selector: trades
    params: {}
- name: transactions
  endpoint:
    path: /transactions
    method: GET
    data_selector: transactions
    params: {}
- name: wallets
  endpoint:
    path: /wallets
    method: GET
    data_selector: wallets
    params: {}
- name: General Ledger
  endpoint:
    path: /connect/general-ledger
    method: GET
- name: contacts_and_categories
  endpoint:
    path: /docs/create-manual-categories-in-bitwave
    method: GET
    data_selector: records
    params: {}
- name: contacts
  endpoint:
    path: /contacts
    method: POST
    data_selector: contact
- name: Digital Assets
  endpoint:
    path: /CashManagement/Checking
    method: POST
    data_selector: Account
    params:
      account_id: Bitwave DigitalAsset
      bank_name: Bitwave - Digital Assets
- name: Crypto Fees
  endpoint:
    path: /GeneralLedger/Accounts
    method: POST
    data_selector: Account
    params:
      account_id: Bitwave - Crypto Fees
- name: manual_categories
  endpoint:
    path: /create/manual/categories
    method: POST
    data_selector: category
- name: Custom Record
  endpoint:
    path: /services/data/vXX.X/sobjects/CustomRecord
    method: GET
    data_selector: records
- name: Bills Saved Search
  endpoint:
    path: /services/data/vXX.X/sobjects/BillSavedSearch
    method: GET
    data_selector: records
- name: Vendor Saved Search
  endpoint:
    path: /services/data/vXX.X/sobjects/VendorSavedSearch
    method: GET
    data_selector: records
- name: transactions
  endpoint:
    path: /api/v1/transactions
    method: GET
    data_selector: data
    params: {}
- name: transaction_categorization
  endpoint:
    path: /api/transaction/categorization
    method: POST
    data_selector: transactions
    params: {}
- name: contacts
  endpoint:
    path: /contacts
    method: GET
    data_selector: contacts
- name: transactions
  endpoint:
    path: /transactions
    method: GET
    data_selector: transactions
- name: Default Accounts Payable
  endpoint:
    path: /accounts/payable
    method: GET
- name: Default Accounts Receivable
  endpoint:
    path: /accounts/receivable
    method: GET
- name: balance_report
  endpoint:
    path: /reports/balance
    method: GET
    data_selector: results
    params: {}
- name: journal_entry_report
  endpoint:
    path: /reports/journal-entry
    method: GET
    data_selector: transactions
    params:
      start_date: Start Date
      end_date: End Date
- name: rolled_up_journal_entry_report
  endpoint:
    path: /reports/rolled-up-journal-entry
    method: GET
    data_selector: aggregated_entries
    params:
      time_period: Gain/Loss report
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: Digital Asset Account
  endpoint:
    path: /CashManagement/Checking
    method: ADD
    data_selector: Account
    params:
      Account Id: Bitwave DigitalAsset
      Bank name: Bitwave - Digital Assets
- name: Crypto Fees Account
  endpoint:
    path: /GeneralLedger/Accounts
    method: ADD
    data_selector: Account
    params:
      Title: Bitwave - Crypto Fees
- name: custom_record
  endpoint:
    path: /services/data/vXX.X/sobjects/CustomRecord
    method: POST
    data_selector: records
- name: bills_saved_search
  endpoint:
    path: /services/data/vXX.X/sobjects/BillSavedSearch
    method: GET
    data_selector: records
- name: vendors_saved_search
  endpoint:
    path: /services/data/vXX.X/sobjects/VendorSavedSearch
    method: GET
    data_selector: records
- name: Chart of Accounts
  endpoint:
    path: /accounting/v1/chart_of_accounts
    method: GET
- name: transactions
  endpoint:
    path: /transactions
    method: GET
    data_selector: transactions
- name: system_jobs
  endpoint:
    path: /system_jobs
    method: POST
    data_selector: job_status
- name: Balance Report
  endpoint:
    path: /reports/balance
    method: GET
- name: Rolled Up Journal Entry Report
  endpoint:
    path: /reports/journal-entries
    method: GET
- name: journal_entry_expanded_report
  endpoint:
    path: /reports/journal_entry_expanded
    method: GET
    data_selector: records
- name: balance_report
  endpoint:
    path: /reports/balance
    method: GET
    data_selector: records
- name: Accounts Payable
  endpoint:
    path: /accounts/payable
    method: POST
- name: Accounts Receivable
  endpoint:
    path: /accounts/receivable
    method: POST
- name: Balance Report
  endpoint:
    path: /reports/balance
    method: GET
- name: InventoryView
  endpoint:
    path: /inventory/views
    method: GET
    data_selector: views
    params: {}
- name: Journal Entry Report
  endpoint:
    path: /journal-entry-report
    method: GET
- name: Journal Entry Report Expanded
  endpoint:
    path: /journal-entry-report-expanded
    method: GET
- name: Rolled Up Journal Entry Report
  endpoint:
    path: /rolled-up-journal-entry-report
    method: GET
- name: inventory_view
  endpoint:
    path: /api/inventory_views
    method: POST
    data_selector: data
- name: transactions
  endpoint:
    path: /transactions
    method: GET
    data_selector: data
- name: Reallocation Inventory View
  endpoint:
    path: /docs/new-reallocation-setup-for-inventory-view
    method: GET
    data_selector: records
- name: data_source
  endpoint:
    path: /data-sources
    method: POST
    data_selector: data_sources
    params: {}
- name: dashboard
  endpoint:
    path: /inventory/views/dashboard
    method: GET
- name: actions_report
  endpoint:
    path: /inventory/views/actions
    method: GET
- name: lots_report
  endpoint:
    path: /inventory/views/lots
    method: GET
- name: cost_basis_rollforward
  endpoint:
    path: /inventory/views/cost_basis_rollforward
    method: GET
- name: actions_report
  endpoint:
    path: /actions/report
    method: GET
    data_selector: records
    params: {}
- name: balance_report
  endpoint:
    path: /balance/report
    method: GET
    data_selector: records
    params: {}
- name: multiple_inventories
  endpoint:
    path: /docs/setup-inventory-groups
    method: GET
- name: inventory_views
  endpoint:
    path: /inventory/views
    method: GET
    data_selector: data
    params: {}
- name: Actions Report
  endpoint:
    path: /reports/actions
    method: GET
    data_selector: records
    params: {}
- name: Inventory Views
  endpoint:
    path: /reports/inventory
    method: GET
    data_selector: records
    params: {}
- name: Cost Basis Roll Forward Report
  endpoint:
    path: /reports/cost-basis-roll-forward
    method: GET
    data_selector: records
    params: {}
- name: Dashboard Summary
  endpoint:
    path: /reports/dashboard-summary
    method: GET
    data_selector: records
    params: {}
- name: trading_fees
  endpoint:
    path: /api/v1/trading_fees
    method: GET
    data_selector: data
    params: {}
- name: journal_entries
  endpoint:
    path: /api/v1/journal_entries
    method: GET
    data_selector: data
    params: {}
- name: inventory_view
  endpoint:
    path: /services/data/vXX.X/sobjects/InventoryView
    method: GET
    data_selector: records
    params: {}
- name: inventory_view
  endpoint:
    path: /docs/inventory-views
    method: GET
    data_selector: records
    params: {}
- name: gain_loss_report
  endpoint:
    path: /docs/inventory-views-reporting
    method: GET
    data_selector: records
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: token_pricing
  endpoint:
    path: /api/token_pricing
    method: GET
    data_selector: pricing_data
- name: token_pricing
  endpoint:
    path: /api/v1/token_pricing
    method: GET
    data_selector: pricing
    params: {}
- name: transactions
  endpoint:
    path: /api/v1/transactions
    method: GET
    data_selector: transactions
    params: {}
- name: transactions
  endpoint:
    path: /api/v1/transactions
    method: GET
    data_selector: data
    params: {}
- name: balances
  endpoint:
    path: /api/v1/balances
    method: GET
    data_selector: data
    params: {}
- name: Inventory View
  endpoint:
    path: /docs/setup-inventory-views
    method: GET
    data_selector: records
- name: inventory_view
  endpoint:
    path: /docs/setup-inventory-views
    method: POST
    data_selector: inventory_views
    params: {}
- name: Reallocation Inventory View
  endpoint:
    path: /docs/new-reallocation-setup-for-inventory-view
    method: GET
    data_selector: steps
    params: {}
- name: data_sources
  endpoint:
    path: /data-sources
    method: POST
    data_selector: dataSource
    params: {}
- name: reconciliation
  endpoint:
    path: /reconciliation
    method: POST
    data_selector: reconciliationResult
    params: {}
- name: Dashboard
  endpoint:
    path: /dashboard
    method: GET
    data_selector: token_holdings
    params: {}
- name: Actions Report
  endpoint:
    path: /actions
    method: GET
    data_selector: actions_detail
    params: {}
- name: Lots Report
  endpoint:
    path: /lots
    method: GET
    data_selector: lot_info
    params: {}
- name: Cost Basis Rollforward
  endpoint:
    path: /cost-basis-rollforward
    method: GET
    data_selector: cost_basis_info
    params: {}
- name: standard_chart_of_accounts
  endpoint:
    path: /api/v1/standard_chart_of_accounts
    method: GET
    data_selector: accounts
- name: specific_chart_of_accounts
  endpoint:
    path: /api/v1/specific_chart_of_accounts
    method: GET
    data_selector: accounts
- name: supported_exchanges
  endpoint:
    path: /api/exchanges
    method: GET
    data_selector: exchanges
- name: Inventory Groups
  endpoint:
    path: /inventory/groups
    method: POST
    data_selector: groups
    params: {}
- name: Inventories
  endpoint:
    path: /inventory
    method: POST
    data_selector: inventories
    params: {}
- name: Wallets
  endpoint:
    path: /inventory/wallets
    method: PUT
    data_selector: wallets
    params: {}
- name: Gain/Loss Accounts
  endpoint:
    path: /inventory/gain-loss-accounts
    method: PUT
    data_selector: gainLossAccounts
    params: {}
- name: Cost Basis Rollforward Report
  endpoint:
    path: /cost-basis-rollforward
    method: GET
    data_selector: results
- name: multiple_inventories
  endpoint:
    path: /docs/setup-inventory-groups
    method: GET
    data_selector: inventory_data
    params: {}
- name: Oracle NetSuite
  endpoint:
    path: /connect/general-ledger-software
    method: GET
- name: Xero
  endpoint:
    path: /xero
    method: GET
- name: Sage Intacct
  endpoint:
    path: /sage-intacct-configuration-guide
    method: GET
- name: Quickbooks Online
  endpoint:
    path: /quickbooks
    method: GET
- name: inventory_views
  endpoint:
    path: /api/v1/inventory_views
    method: GET
    data_selector: records
- name: Customer Transactions
  endpoint:
    path: /v3/orgs/{orgId}/data-sources
    method: POST
    data_selector: data
    params:
      idFieldName: transaction_id
- name: Add Rows to Customer Transactions
  endpoint:
    path: /v3/orgs/{orgId}/data-sources/{dataSourceId}/add-rows
    method: POST
    data_selector: rows
    params: {}
- name: inventory_view
  endpoint:
    path: /docs/inventory-views
    method: GET
    data_selector: reports
- name: gain_loss_report
  endpoint:
    path: /docs/record-realized-gainloss
    method: GET
    data_selector: reports
- name: wallet
  endpoint:
    path: /api/wallets
    method: POST
    data_selector: data
    params: {}
- name: get_rows
  endpoint:
    path: /v3/orgs/{orgId}/data-sources/{dataSourceId}/rows
    method: POST
    data_selector: rows
    params: {}
- name: query_funds
  endpoint:
    path: /api/v3/query_funds
    method: GET
- name: query_open_orders
  endpoint:
    path: /api/v3/query_open_orders
    method: GET
- name: query_closed_orders
  endpoint:
    path: /api/v3/query_closed_orders
    method: GET
- name: query_ledger_entries
  endpoint:
    path: /api/v3/query_ledger_entries
    method: GET
- name: export_data
  endpoint:
    path: /api/v3/export_data
    method: GET
- name: api_keys
  endpoint:
    path: /apiKeys
    method: POST
- name: pricing_report
  endpoint:
    path: /pricing/report
    method: GET
    data_selector: pricing_data
    params: {}
- name: transaction
  endpoint:
    path: /transactions
    method: GET
    data_selector: transactions_data
    params: {}
- name: transactions
  endpoint:
    path: /api/transactions
    method: GET
- name: asset_balance
  endpoint:
    path: /api/balance
    method: GET
- name: Single sign on URL
  endpoint:
    path: /saml
    method: GET
- name: Audience URI
  endpoint:
    path: /metadata.xml
    method: GET
- name: metadata_rules
  endpoint:
    path: /api/metadata/rules
    method: GET
    data_selector: rules
- name: categories
  endpoint:
    path: /api/categories
    method: GET
- name: contacts
  endpoint:
    path: /api/contacts
    method: GET
- name: invoices
  endpoint:
    path: /api/invoices
    method: GET
- name: bills
  endpoint:
    path: /api/bills
    method: GET
- name: transactions
  endpoint:
    path: /api/transactions
    method: GET
- name: exchanges
  endpoint:
    path: /api/v1/exchanges
    method: GET
    data_selector: data
    params: {}
- name: custodians
  endpoint:
    path: /api/v1/custodians
    method: GET
    data_selector: data
    params: {}
- name: Oracle NetSuite
  endpoint:
    path: /connect/general-ledger/net-suite
    method: GET
    data_selector: records
- name: Xero
  endpoint:
    path: /connect/general-ledger/xero
    method: GET
    data_selector: records
- name: Sage Intacct
  endpoint:
    path: /connect/general-ledger/sage-intacct
    method: GET
    data_selector: records
- name: Quickbooks Online
  endpoint:
    path: /connect/general-ledger/quickbooks
    method: GET
    data_selector: records
- name: assets
  endpoint:
    path: /v2/assets/{id}
    method: GET
- name: asset_transactions
  endpoint:
    path: /v2/asset-transactions/{id}
    method: GET
- name: cash_transactions
  endpoint:
    path: /v2/cash-transactions/{id}
    method: GET
- name: asset_transactions_all
  endpoint:
    path: /v2/asset-transactions
    method: GET
- name: cash_transactions_all
  endpoint:
    path: /v2/cash-transactions
    method: GET
- name: asset_transfers
  endpoint:
    path: /v2/asset-transfers
    method: GET
- name: account_cash_transfers
  endpoint:
    path: /v2/account-cash-transfers
    method: GET
- name: trades
  endpoint:
    path: /v2/trades
    method: GET
- name: all_assets
  endpoint:
    path: /v2/assets
    method: GET
- name: accounts
  endpoint:
    path: /v2/accounts
    method: GET
- name: contacts
  endpoint:
    path: /v2/contacts
    method: GET
- name: account_asset_totals
  endpoint:
    path: /v2/account-asset-totals
    method: GET
- name: account_cash_totals
  endpoint:
    path: /v2/account-cash-totals
    method: GET
- name: Customer Transactions
  endpoint:
    path: /data-sources
    method: POST
    data_selector: data
    params: {}
- name: Add Rows
  endpoint:
    path: /data-sources/{dataSourceId}/add-rows
    method: POST
    data_selector: rows
    params: {}
- name: data_source_rows
  endpoint:
    path: /v3/orgs/{orgId}/data-sources/{dataSourceId}/rows
    method: POST
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: API Key
  endpoint:
    path: /apiKeys
    method: POST
- name: Private Key
  endpoint:
    path: /privateKeys
    method: POST
- name: transactions
  endpoint:
    path: /api/v2/transactions
    method: GET
    data_selector: data
- name: asset_balance
  endpoint:
    path: /api/v2/balance
    method: GET
    data_selector: data
- name: sso_setup
  endpoint:
    path: /saml
    method: GET
    data_selector: sso_info
    params: {}
- name: categories
  endpoint:
    path: /sync/categories
    method: GET
- name: contacts
  endpoint:
    path: /sync/contacts
    method: GET
- name: customer_invoices
  endpoint:
    path: /sync/invoices
    method: GET
- name: vendor_bills
  endpoint:
    path: /sync/bills
    method: GET
- name: transactions
  endpoint:
    path: /reconcile/transactions
    method: GET
- name: assets
  endpoint:
    path: /v2/assets/{id}
    method: GET
- name: asset_transactions
  endpoint:
    path: /v2/asset-transactions/{id}
    method: GET
- name: cash_transactions
  endpoint:
    path: /v2/cash-transactions/{id}
    method: GET
- name: asset_transactions_list
  endpoint:
    path: /v2/asset-transactions
    method: GET
- name: cash_transactions_list
  endpoint:
    path: /v2/cash-transactions
    method: GET
- name: asset_transfers
  endpoint:
    path: /v2/asset-transfers
    method: GET
- name: account_cash_transfers
  endpoint:
    path: /v2/account-cash-transfers
    method: GET
- name: trades
  endpoint:
    path: /v2/trades
    method: GET
- name: accounts
  endpoint:
    path: /v2/accounts
    method: GET
- name: contacts
  endpoint:
    path: /v2/contacts
    method: GET
- name: account_asset_totals
  endpoint:
    path: /v2/account-asset-totals
    method: GET
- name: account_cash_totals
  endpoint:
    path: /v2/account-cash-totals
    method: GET
notes:
- Almost all Bitwave API endpoints require a client_id and secret.
- Users can now select their preferred language for Bitwave.
- 'Limited Support: Staking support (only picks up deposit and withdrawal events,
  no block-by-block accruals).'
- Returns current user's account information, such as their name, email, and role.
- The /networks/{networkId}/addresses/{address}/supply endpoint will return the token
  supply for your involved pool or vault.
- Load data into a rate table
- Uses OAuth2 with refresh token — requires setup of connected app in api
- Focus on completing Configuration & Setup and Wallets & Accounts tabs in the Onboarding
  Workbook.
- Once completed, reach out to your Onboarding Specialist.
- Complete your Config & Setup and Wallets & Accounts tabs in the Onboarding Workbook
- 'Please focus on completing these two tabs in your workbook: Configuration & Setup,
  Wallets & Accounts'
- Review Config/Setup and Wallets/Accounts information on kickoff call
- Requires setup of connected app in Bitwave
- Bitwave uses Accounting Defaults to automatically apply contacts and categories
  to specific transaction types.
- For TRADES use Standard Imports. DO NOT USE ADVANCED IMPORTS.
- The standard import file is called 'Bitwave Standard Transaction'.
- Customers that are coming to Bitwave having completed their accounting for prior
  periods using a different system will want to have a 'Starting Point' in Bitwave.
- Even if you have done their accounting well prior to Bitwave, Bitwave will likely
  calculate a different beginning balance cost basis number.
- Some token balances will not appear in this report and therefore will not be validated.
  This function is only available 48 hours after wallets/exchanges have been plugged
  in.
- Ensure all wallet and exchange connections are live.
- Some token balances may not appear in the balance check report.
- An update must be run for Inventory Views reporting to reflect any changes to transactions
  or categorization since the last update.
- Some objects may return nulls in deeply nested fields
- Displays the date and time that the transaction occurred in local time zone.
- The API requires authentication to access data.
- Filters available for wallet, reconciliation status, categorization status, ignore
  status, and date.
- Rules categorise historical data and will continue to run until disabled.
- Always test rules first before applying.
- Rules run automatically every 12 hours while enabled.
- You can view addresses and categories assigned on the main Contacts page.
- Once an address is assigned to a specific contact and category, any un-categorized
  transaction with that wallet address on the assigned network will now show the contact
  and category in the transactions ui.
- Tokens without a pricing source or tokens that fail pricing will show a $0 transaction
  rate in reports.
- Failed pricing and missing pricing sources can be communicated to Bitwave support
  for updating and troubleshooting.
- This function is to be used with caution. You are not able to undo a job after it
  begins.
- Contact-based Categorization Defaults can be set up from the Contacts page.
- Unreconciling a transaction in Bitwave does NOT un-reconcile the corresponding transaction
  in your GL (ERP) system.
- Bitwave tracks the carrying value of every lot and uses the carrying value for realized
  gain/loss calculation purposes if an impaired lot is disposed of.
- Bitwave does not create/push a journal entry for realized gain/loss as part of the
  disposal transaction.
- Users should record the realized gain/loss directly in their general ledger.
- Realized gains must be tracked even on gas fees.
- Capitalizing fees doesn’t remove the need to record disposals.
- ERP adjustments for gains are manual based on Bitwave reports.
- Bitwave's subledger automation ensures compliance without double-posting to the
  ERP.
- The Balance Report is ran to verify fair market value as of the period end for all
  activity (categorized & uncategorized)
- The Journal Entry Report (Rolled up) is ran to verify the net debits and credits
  of categorized activity for the period
- The Cost Basis Roll Forward Report is ran to verify the realized and unrealized
  gain/loss for the period
- This report allows you to query the balance and FMV of each digital asset at the
  end of any given date.
- Select the Balance as of the end of day either grouped by wallet or without grouping.
- Confirm all transactions have been categorized and reconciled before closing a period.
- Ensure all Journal Entries (JEs) are synced to your ERP.
- Some objects like Contact may return nulls in deeply nested fields
- These reclass amounts assume there has already been a realized gain/loss entry made
  to your Bitwave - Digital Asset account
- These reclass amounts do not include a reclass to unrealized gain/loss
- Ensure organization details are accurate
- Interested partners can complete the Partner Listing Form.
- Changing the timezone of your Bitwave instance will impact values in certain Bitwave
  reports.
- Users cannot change the time zone for their organization manually.
- Access to Bitwave’s certification training typically requires login credentials
  linked to a registered organization.
- Syncing transactions could take up to 24 hours.
- Do not attempt to sign in directly if you haven't registered yet, this will result
  in login failure.
- Under Administration > Organizations, there is a checkbox labeled 'Use Timezone
  For Display'.
- Bitwave offers enterprise-grade tools for managing crypto payments, accounting,
  tax compliance, and financial reporting.
- Ensure there are no spaces or formatting errors in the API keys.
- Syncing transactions from BitGO can take up to 24 hours, depending on the volume.
- If transactions stop syncing, check whether your Coinbase Pro API has been deprecated
  and replace it with the new Coinbase Exchange API.
- Ensure the QBO integration is fully configured in Bitwave.
- Some APIs sync data immediately, others can take 24–48 hours.
- This is a known UI display issue in Bitwave—your Kraken API may appear unconnected
  but is still syncing transactions and balances in the backend.
- You cannot make changes to transactions once they are reconciled.
- Accurate and complete information is crucial for successful setup.
- All transactions within your Lock Period must be Categorized
- Period locking often aligns with the closing of accounting periods, ensuring that
  financial data remains static for reporting purposes
- Transactions with uncategorized or unignored statuses cannot be locked in Bitwave.
  Ensure all transactions are appropriately categorized or ignored before implementing
  period locks.
- Ensure to provide complete information for successful integration.
- Note that this difference in timing will result in a variance in the reconciliation
  workbook.
- Note that Wallet Level Inventories may be required if additional tokens are acquired
  before all tokens have been fully vested. Without separate inventories, the locked
  tokens will be pickable for disposals.
- Token names are case-sensitive in Bitwave.
- Bitwave does automatically sync Solona staking rewards.
- If transactions were synced with the wrong Bitwave general ledger (GL) account in
  QBO, you may need to unreconcile them in Bitwave.
- Transactions usually begin syncing within an hour of wallet connection. For full
  synchronization, it’s best to wait up to 24 hours.
- If Bitwave shows a wallet balance that doesn’t match on-chain data, contact support
  for verification.
- Uses OAuth2 with refresh token — requires setup of connected app in Bitwave
- You cannot make any changes to a reconciled transaction.
- Note that transactions with uncategorized or unignored statuses cannot be locked
  in Bitwave. Ensure all transactions are appropriately categorized or ignored before
  implementing period locks.
- Requires the creation of at least 2 rows in the import template with a shared TRADE
  ID for importing trades.
- If Bitwave doesn’t support a particular blockchain, you can manually import your
  transaction data to ensure complete reporting.
- By default tokens staked on an exchange will show in Bitwave as disposals and incur
  gain/loss.
- A DeFi wallet can be created in order to track the staked assets as part of portfolio
  balance and show the outflows in Bitwave as transfers.
- 'If you''re seeing a 503 error or import failures: Wait 2–3 minutes between large
  imports.'
- This may be due to a UI rendering issue. Try clearing browser cache and cookies.
- Large file sizes can cause imports to stall. Try breaking the file into smaller
  batches of 10,000 lines or fewer.
- While there is no strict file size limit, we recommend keeping import files under
  approximately 10,000 lines for optimal performance.
- It's best to avoid running multiple large imports simultaneously, as this can cause
  delays or stall the process.
- Ensure the token ticker matches Bitwave’s expected format (e.g., use “OP_ETH” for
  Optimism ETH).
- Ensure dates are in the correct format (e.g., MM/DD/YYYY HH:MM:SS).
- Append a unique suffix like .import1 to the end of each Blockchain ID. Do not prefix
  it.
- Removing problematic entries and re-uploading usually works.
- If you encounter an 'error loading preview', check that the formatting and column
  values comply with Bitwave's manual import guidelines.
- Exports transactions in CSV format.
- 'To establish opening balances, Bitwave requires: (1) token quantities held in each
  wallet as of the opening date, (2) cost basis for each holding, and (3) acquisition
  dates.'
- 'To upload opening balances, fill in the required columns: ID (unique per row),
  Amount (token quantity), Ticker, Time (use 12/31/23 11:59:59 for beginning balances),
  Transaction Type ("Deposit" for holdings), Wallet ID (as Account ID), Tax Status,
  and Blockchain ID (optional but helpful).'
- Blockchain ID is not a required field but can be useful for locating transactions.
- If Cost and CostTicker columns are left blank, Bitwave will use the organization’s
  default pricing source.
- Categories represent the types of transactions and are equivalent to GL (General
  Ledger) accounts such as expense, revenue, asset, etc.
- This usually happens if your organization’s fee settings or transaction inference
  options are not configured correctly.
- Confirm that your default fee category is set to your preferred expense account.
- Check if fee capitalization is enabled.
- Make sure the 'Allow Transaction Inference' option is checked to route fees properly
  into your accounting system.
- Using the same transaction ID across different uploads can cause syncing issues,
  such as transactions disappearing or not matching correctly.
- It’s best to use unique transaction hashes or IDs when manually importing transactions.
- This may occur if manually imported transactions share the same transaction hash
  as synced ones.
- In such cases, you can delete the problematic transactions and request a resync.
- Afterward, reimport the manual transactions using different (unique) transaction
  hashes.
- The Wallet & Connections tab may take some time to reflect recent changes.
- If your Balance Report shows accurate data, rest assured the dashboard will sync
  shortly.
- You can check the 'Ignored' tab in Bitwave to see if any transactions were skipped
  during syncing.
- Accurate token recognition is essential for correct transaction categorization.
- If a token is missing, please alert our team so we can ensure your transaction history
  is complete and accurate.
- If one version has no fair value (like USDC-843), it's safe to mark that transaction
  as 'ignored.'
- Bitwave is exploring options to separate staking rewards from staked units on Solana.
- This may be helpful for compliance with new regulations.
- First, confirm that the import was 100% successful (indicated by a checkmark).
- If so, check whether any of the blockchain IDs in the file are duplicates of existing
  ones in your system.
- If they are, update the blockchain IDs in your CSV to be unique and re-import the
  file.
- Bitwave is designed to handle large volumes and high-value crypto trades with reliable
  and timely data processing.
- Ignoring a problematic transaction may allow you to proceed temporarily, but it
  won’t fully resolve underlying issues.
- For accurate reporting, especially for compliance, we recommend resolving the root
  issue with assistance from our support team.
- The transition from MATIC to POL depends on the network you're using.
- Bitwave will reconcile this based on the nature of the transaction.
- If Bitwave is showing duplicate or phantom entries, report the exact wallet, wallet
  ID, and transaction hash.
- If the system recognizes the asset and retrieves a price after entry, it means the
  transaction is compatible with Bitwave’s data model.
- If it's showing correctly in the interface, the entry is valid and should behave
  as expected in your reports.
- If you detect duplicate token entries, report the issue to Bitwave support.
- To combine swap transactions, first ensure both transactions are uncategorized.
- If one is already categorized, you’ll need to un-categorize it before combining
  them.
- If you're missing transactions on the reconciliation screen, they might be classified
  as trades.
- You can find these in the Trading section under the Transactions tab.
- You can manually adjust the rate by opening the transaction, clicking the pencil
  icon, and modifying the value.
- 'If you''re encountering save errors after editing, follow these steps: Uncategorize
  the transaction, Refresh Bitwave, Use the pencil icon to change the rate, Recategorize
  the transaction and save.'
- If your Fireblocks transactions aren’t syncing with Bitwave, the most common reason
  is that the Fireblocks API key is outdated.
- If you’ve already provided a new API key and transactions are still not syncing,
  it may take some time for our engineering team to complete the resync.
- Transactions may fail to auto-categorize if the tokens involved do not have pricing
  data available.
- The Accounting > Reconcile tab doesn’t display trade transactions.
- Currently, Bitwave support cannot retroactively confirm if a manual rate was applied
  to a transaction.
- When transactions are combined, Bitwave typically ignores the original transactions
  that have blockchain/transaction IDs.
- If ignored transactions are still showing, verify the job’s parameters and recheck
  after some time.
- System Jobs typically complete within 15 minutes to an hour, but may take up to
  24 hours if you're processing more than 100,000 transactions.
- Some jobs may fail if they involve complex or unusual transaction types like contract
  executions.
- Allows assigning wallet addresses to contacts for categorization
- You can export transaction data from Bitwave using the 'Export Transactions' feature
  under the Transactions tab.
- Bitwave does not currently support exporting ignored transactions to Excel or CSV.
- New status helps flag transactions that require user attention due to changes in
  data or timing.
- A Custom Import Transform imports your raw transaction history into Bitwave without
  having to create a standard manual import.
- The Transform will save time, reduce errors, and increase efficiency.
- Some transactions may take longer to process due to system load.
- Importing a trade requires at least 2 rows in the import template with a shared
  TRADE ID.
- For the deposit and withdrawal approach, each row must include a GROUP ID.
- How to Validate that the Rule will have an affect on the Transaction?
- This Jito reward rule (#5) is not one-size-fits-all. You should perform a brief
  analysis of the Jito rewards in your account—reviewing source addresses, typical
  amounts, and frequency and adjust the rule conditions (e.g. asset quantity range,
  from address, wallet) accordingly to best match your validator’s actual activity.
  This ensures accurate and effective categorization.
- 'This may be due to a UI rendering issue. Try: Clearing browser cache and cookies.'
- Bitwave automatically combines transactions with the same group ID across wallets.
- Duplicate transaction IDs can lead to preview errors or cause transactions to be
  combined incorrectly.
- Errors can occur if the same tradeID has been used previously or if inconsistent
  blockchainIDs are used for parts of the same trade.
- Ensure each transaction has a unique group ID, especially when importing from unsupported
  chains.
- Ensure the token ticker matches Bitwave’s expected format (e.g., use “OP_ETH” for
  Optimism ETH). Incorrect tickers may cause import errors.
- If trades are missing despite an API connection, it could be due to syncing issues
  or delayed imports.
- Common errors can result from missing headers, inconsistent time formats, values
  with commas, or fields incorrectly labeled.
- 'To upload opening balances, fill in the required columns: ID (unique per row),
  Amount (token quantity), Ticker, Time (use 12/31/23 11:59:59 for beginning balances),
  Transaction Type ("Deposit" for holdings), Wallet ID (as Account ID), Tax Status,
  and Blockchain ID (optional but helpful). Use Cost and CostTicker if you want to
  set specific cost basis values. Wallet IDs must be used instead of wallet addresses
  in the Account ID column.'
- This issue often occurs due to missing required fields like wallet information in
  the rule, or because Bitwave currently has limitations categorizing fiat (USD) transactions
  via rules.
- After creating a rule, you must run it manually by selecting the checkbox next to
  the rule and clicking 'Run' under the Actions menu.
- Yes, transactions must be uncategorized before rules can reprocess them.
- To delete all transactions across all wallets, navigate to Administration > System
  Jobs, then click Create Job. Choose Delete Transactions from the Action dropdown,
  select All Wallets, and leave the date fields blank to delete all data.
- AP and AR defaults are available in Bitwave’s Invoice & Bill Payment module.
- If a category or contact is manually created within Bitwave, the 'source' will be
  identified as Bitwave.
- Contacts refer to the vendors and customers involved in transactions.
- Requires setup of Web Services user.
- IP address filtering must be configured.
- We are only integrated with QuickBooks online and not the desktop version of QBO.
- Unreconciling a transaction in Bitwave does NOT un-reconcile the corresponding transaction
  in your GL (ERP) system, it will simply create an out of sync situation between
  Bitwave and your ERP system.
- You can assign wallet addresses to contacts directly from the transactions UI.
- If the transaction is not fully categorized, the confirm button will not be active.
- This status acts as a safeguard, allowing you to review changes.
- This API may have issues with internal transfer transaction imbalances.
- Contacts cannot be deleted in Bitwave, but you can disable them.
- If transactions are marked as 'Reconciled' but not appearing in your ERP, it's likely
  they were only flagged as 'Reconciled' and not actually 'Synced.'
- Transactions with zero or near-zero values (e.g., less than $0.01) often cannot
  be reconciled because general ledgers like Sage consider such values immaterial
  and restrict posting them. This limitation is imposed by the ERP provider, not Bitwave.
- Bitwave offers Xero integration even during the free trial.
- Updates made to a NetSuite invoice may take 2–3 hours to reflect in Bitwave.
- It is recommended that you first begin by setting up the desired rule and apply
  it to a small time frame (such as a day or two) to test and ensure that the rule
  works as intended before applying it to all transactions.
- Data typically syncs to QBO within an hour after initiating the sync from Bitwave.
- Unlocking accounting periods can revert previously finalized data, causing discrepancies
  in reconciliation reports and financial statements.
- This Jito reward rule (#5) is not one-size-fits-all. You should perform a brief
  analysis of the Jito rewards in your account—reviewing source addresses, typical
  amounts, and frequency and adjust the rule conditions accordingly to best match
  your validator’s actual activity. This ensures accurate and effective categorization.
- The Balance Report's 11:59:59 PM end of day selection is controlled by the Bitwave
  Engine version in the Organization menu under Administration.
- Selecting an engine version 2.0 or above will configure the Balance Report for 11:59:59
  PM end of day pricing.
- Bitwave currently does not support automatic rule-based categorization for fiat
  currencies like USD.
- Transactions must be uncategorized before rules can reprocess them.
- Requires setup of connected app in api
- While the copy/replication from our database to the datawarehouse is immediate it
  is possible although extremely rare for the datawarehouse to be behind in situations
  where we have some sort of outage.
- Requires setup of Web Services and user roles in Sage Intacct
- Bitwave’s Sender ID must be added to Sage Intacct’s allowed list
- Bitwave AR Clearing Account of TYPE BANK is required to be setup
- Bitwave AP Clearing Account of TYPE BANK is required to be setup
- Add the REST WEB SERVICES permission for the Bitwave Role.
- Required IDs include Script ID, Address, Network, IsValidated, LastValidatedDate,
  Vendor, and Cryptocurrency.
- Once reconciled and synced you are able to view the transactions in your GL (ERP)
  system.
- Ensure all transactions are categorized before generating reports.
- The Gain/Loss scenario runner was officially retired on April 30, 2024.
- Tokens with zero quantity may still appear in the Gain/Loss Summary due to legacy
  report behavior.
- Yes, we can set this up for you. We will need to update the current Service Agreement
  to accommodate multiple entities.
- To delete transactions that were synced to QBO, you’ll need to manually remove them
  directly within QBO.
- Some transactions may require recategorization to reconcile properly.
- Updates made to invoices may take 2–3 hours to reflect.
- Some transactions may show incorrect exchange rates due to syncing errors.
- Use v2.8 for maximum flexibility.
- Test views with sample data to verify gain/loss calculations.
- All Bitwave licenses include the ability to create one view, additional views require
  the purchase of an upgraded license.
- Requires OAuth2 for authentication
- Ensure API keys are kept secure
- All transactions must be categorized and books closed up till the date you decide
  to reallocate.
- Your Standard and Balance Only views should both be updated after all transactions
  have been categorized.
- There should be no errors or negative balances in your standard inventory view.
- Ensure you have had a consultation with your tax or accounting lead / expert regarding
  your desired reallocation approach.
- While the copy/replication from our database to the datawarehouse is immediately
  it is possible although extremely rare for the datawarehouse to be behind in situations
  where we have some sort of outage.
- This is a paid Feature Flag, so it needs to be turned on.
- Currently, the balance check report in Bitwave displays third-party balances for
  major tokens.
- Multiple Inventories feature allows users to manage digital asset inventory flexibly.
- Standard single Inventory configuration treats all digital assets in a single bucket.
- The Inventory Views and Actions Report do not track USD transactions. However, we
  will push USD transaction journal entries into the ERP.
- To generate a report, ensure to specify settings like FIFO method and date range.
- If your inventory update isn't completing, it may be due to a temporary sync or
  configuration issue.
- Please make sure your inventory views are updated right after you ignore any transaction
  or perform any action in transactions UI Page.
- Ensure all transactions are categorized and gains/losses are recorded before using
  the reconciliation tool.
- Gain/Loss scenario runner was officially retired on April 30, 2024.
- Tokens with zero quantity may still appear in Gain/Loss Summary due to legacy report
  behavior.
- Selecting a fee contact helps associate the fee with the appropriate wallet.
- The Inventory View may not reflect updates unless manually refreshed.
- Inventory view does not update in real time; manual update required.
- Wrapped tokens are treated as like-kind assets to their underlying counterparts.
- Conversions between wrapped and unwrapped versions are logged and timestamped.
- Delays in pricing for tokens can occur if data providers take longer than usual
  to provide rates.
- Bitwave supports multiple pricing sources in addition to the default Crypto Compare,
  including Binance, Coinbase, CoinMarketCap, CoinGecko, and others.
- Pricing rules must be enabled to manage pricing sources.
- Pricing should be added manually every time.
- Balance report will always grab pricing for the end of the day the report was run.
- Requires connection to wallet for transactions.
- API response may vary based on account setup.
- Ensure wallet is on the Base network
- Creating 2 or more inventory views requires the purchase of an upgrade.
- Start with v2.8 for maximum flexibility—refer to the screenshot for v1.3 layout
  and upgrade as needed.
- Two predefined account schema configurations for transaction categorization.
- Section under construction
- Multiple Inventories feature allows flexibility in managing digital asset inventory.
- If you are getting errors when you run any date, this may have happened due to some
  calculation errors.
- Make sure to update the view before and after rectifying the issue.
- idFieldName is required as of 9/1/2025, data sources created prior to this date
  will be viewable, but will no longer allow adding rows.
- This can happen if transactions were modified or recategorized while the view was
  outdated.
- 'Use Appropriate Page Sizes: Start with 100-500 rows. Larger page sizes may timeout.'
- 'Use Cursor Pagination: For large datasets, cursor-based pagination (bqPageToken)
  is more efficient than offset-based.'
- 'Index-Friendly Ordering: Order by indexed columns when possible for better performance.'
- 'Handle Complex Types: Use stringifyComplexTypes=true for easier processing of arrays
  and objects.'
- Users are able to give us an excel file with their tokens’ dates and prices, so
  that they can be imported into Bitwave.
- You must use distinct values for Remote ID
- Be sure to click on the Sync button and our system will begin to sync over your
  transaction history. This can take up-to 24 hours.
- API Key, API Secret, and API Passphrase are required for connection.
- Bitwave supports pricing from multiple sources including Coinmarketcap, Coingecko,
  and Crypto Compare.
- Tokens from less widely used blockchains often lack pricing data.
- The term Access Token refers to an API Key.
- 'IP Addresses Allowed: 104.196.183.18, 35.230.22.143'
- All View permissions should be selected
- Access to the Bitwave platform required
- A self-custodial wallet (e.g., Metamask) loaded with ETH or USDC on the Base network
  is needed
- You’ll add two more addresses later in this guide.
- In alignment with Global Synchronizer Foundation (GSF) metadata standards.
- Enable Token-Based Authentication in NetSuite for secure API access.
- Create a new integration record in NetSuite for Bitwave and collect the Consumer
  Key and Consumer Secret.
- Create a new role in NetSuite specifically for the Bitwave integration.
- Assign the newly created Bitwave Role to a user in NetSuite.
- Create a new access token for the user and integration in NetSuite and collect the
  Token Key and Token Secret.
- Record the Account ID from Company Information.
- Enter the Internal ID of the subsidiary you selected.
- Enter the account code for your Digital Asset account.
- Enter the account code for your Fee account.
- This API requires authentication to access SCIM resources.
- Bitwave requires CHANGE_TRACKING to be enabled on the table.
- Use Snowflake Direct Share to securely share your table with Bitwave.
- All API requests must be made over HTTPS
- You must generate an Ed25519 signing key pair and save the public portion in the
  Anchorage Digital Web Dashboard when creating the API access key
- API Key and API Secret should be generated and linked to Bitwave.
- Trading should be disabled and Auditor should be enabled for the API Key.
- Bitwave needs permissions to Query Funds, Query Open Orders & Trades, Query Closed
  Orders & Trades, Query Ledger Entries, Export Data
- The secret API key is masked in the video as the email was opened in a different
  tab.
- Make sure you are on the API Setting tab, then click on New API Key.
- Tick the View box under permissions and then save the Passphrase.
- All View permissions should be selected.
- User needs to input the asserted identity to match what comes from Okta or their
  SSO provider.
- Enable Token-Based Authentication (TBA) in NetSuite for secure API access.
- Create a new integration record named 'Bitwave Integration' in NetSuite.
errors:
- '401 Unauthorized: Recheck OAuth scopes or token expiration'
- 'REQUEST_LIMIT_EXCEEDED: Throttle API calls or reduce frequency'
- Issues or errors are found (Highlighted in RED).
- File has no failing transactions then click on 'Run Import'.
- Common Errors While Uploading Standard Imports
- 'QUERY_TIMEOUT: Break down filters or add selectivity'
- '400 Bad Request: Check the request format and required fields.'
- '401 Unauthorized: Verify authentication details.'
- 'REQUEST_LIMIT_EXCEEDED: Throttle API calls or reduce frequency.'
- '401 Unauthorized: Recheck OAuth scopes or token expiration.'
- 'INVALID_API_KEY: Check the API key permissions.'
- 'TRANSACTION_NOT_FOUND: Ensure the transaction ID is correct.'
- 'WALLET_NOT_FOUND: Verify the wallet address.'
- 'API keys for this connection are malformed: Double-check that you have copied the
  keys correctly from the custodial platform and ensure they match the expected format
  for Bitwave.'
- 'API keys for this connection are malformed: Check that you have copied the keys
  correctly.'
- 'Internal Server Error: Report transaction ID to support for resolution'
- '401 Unauthorized: You need to authenticate to access this endpoint.'
- '503 upstream connect error: Indicates a temporary backend connectivity issue.'
- 'Internal Server Error: Refresh the page or log out and back in.'
- 'Internal Server Error: This error may occur due to a temporary backend issue or
  bug.'
- 'GraphQL error: Internal Server Error: This error can occur due to a temporary backend
  issue affecting transaction access.'
- 'Transaction already reconciled: Review before accepting changes.'
- 'ERROR: More than One Imputed Fee Found: Review transaction for accuracy.'
- Formatting issue in import file may cause errors.
- '503: Server is temporarily unavailable. Wait 2–3 minutes and try again.'
- '500: Server-side failure during the transaction batch processing stage.'
- preview errors during import often result from incorrect formatting in the CSV template.
- Duplicate transaction IDs can lead to preview errors.
- 'Invalid BIGNUMERIC value: Ensure all amounts are in absolute form and do not include
  commas or minus signs.'
- 'Coin: Cannot handle fiat: This error indicates that Bitwave currently does not
  support automatic rule-based categorization for fiat currencies like USD.'
- 'Internal Server Error: If you encounter an ''Internal Server Error'' when adding
  a transaction, first try refreshing the page or logging out and back in.'
- 'ERROR: More than One Imputed Fee Found: Review the error-causing transaction for
  accuracy.'
- Formatting issues in your import file used in the categorization system jobs.
- 'account code: Ensure the default fee account isn''t set up correctly.'
- 'failed to reconcile: May occur due to a temporary sync issue.'
- 'TypeError: Cannot read properties of undefined (reading ''forEach'')'
- 'Problem generating report: High transactional volume or temporary platform issues.'
- 'TypeError: Cannot read properties of undefined (reading ''forEach''): Check for
  backend issues or data mismatches.'
- '401 Unauthorized: Check your API key or OAuth token'
- '404 Not Found: Endpoint may not exist'
- 'Problem generating report: Try running expanded version if encountered.'
- '404 Not Found: Check the endpoint path or resource availability.'
- Not enough acquired assets to match transaction
- 'REQUEST_NOT_FOUND: Provide transaction ID, token symbol, and supporting links.'
- 'PRICE_UNAVAILABLE: Token may not be widely listed or newer.'
- '401 Unauthorized: Check your authentication credentials.'
- '404 Not Found: Verify the endpoint path.'
- Unable to map transaction to inventory - too many or too few wallets.
- Negative balance can result from timing issues.
- Discrepancies between reports can happen due to syncing issues.
- 'invalid field type ''string'' for field ''amount''. Field type must be one of:
  stringType, numberType, bigNumber, floatType, boolean, enum, date, datetime, timestamp,
  ticker, array, object, range'
- Row 2 has column 'status' which is not present in the first row
- 'More than one imputed fee found on txn: This error indicates that a transaction
  has been assigned multiple imputed fees.'
- 'Negative balance: This issue can occur if the Inventory View hasn’t fully updated.'
- Maximum 1000 rows per request
- Maximum 100 requests per minute per organization
- Complex queries may have additional processing time limits
- '400 Bad Request: Check the request parameters and structure.'
- '401 Unauthorized: Ensure valid authentication credentials.'
- '404 Not Found: Verify the endpoint and resource availability.'
auth_info:
  mentioned_objects:
  - client_id
  - client_secret
  - OauthToken
  - AuthProvider
  - NamedCredential
client:
  base_url: https://bitwave.io
  auth:
    type: oauth2
source_metadata: null
