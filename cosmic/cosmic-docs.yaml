resources:
- name: content
  endpoint:
    path: /content
    method: GET
    data_selector: items
- name: images
  endpoint:
    path: /media
    method: GET
    data_selector: files
- name: content
  endpoint:
    path: /v1/objects
    method: GET
    data_selector: objects
    params: {}
- name: AI Investing App
  endpoint:
    path: /projects/ai-investing-app
    method: GET
    data_selector: data
- name: docs_and_knowledge_bases
  endpoint:
    path: /docs/knowledge-bases
    method: GET
- name: CRUD Content
  endpoint:
    path: /solutions/crud-content
    method: GET
- name: objects
  endpoint:
    path: /v3/buckets/:bucket_slug/objects
    method: GET
    data_selector: objects
- name: blog_posts
  endpoint:
    path: /objects
    method: GET
    data_selector: objects
- name: blog_posts
  endpoint:
    path: /objects
    method: GET
    data_selector: objects
    params:
      type: blog-posts
- name: blog-posts
  endpoint:
    path: /objects/find
    method: GET
    data_selector: objects
    params:
      type: blog-posts
- name: blog-posts
  endpoint:
    path: /objects
    method: GET
    data_selector: objects
- name: blog-posts
  endpoint:
    props: title,metadata.image,metadata.content
- name: blog-posts
  endpoint:
    path: /objects
    method: GET
    data_selector: objects
- name: blog-posts
  endpoint:
    path: /objects
    method: GET
    data_selector: objects
- name: blog-posts
  endpoint:
    path: /objects/find
    method: GET
    data_selector: objects
    params:
      type: blog-posts
- name: blog-posts
  endpoint:
    path: /objects
    method: GET
    data_selector: objects
- name: blog-posts
  endpoint:
    path: /objects/find
    method: GET
    data_selector: objects
    params:
      type: blog-posts
- name: blog-posts
  endpoint:
    path: /objects/find
    method: GET
    data_selector: objects
    params: {}
- name: blog_posts
  endpoint:
    path: /objects
    method: GET
    data_selector: objects
    params:
      type: blog-posts
- name: blog_posts
  endpoint:
    path: /objects
    method: GET
    data_selector: objects
    params:
      type: blog-posts
- name: blog-posts
  endpoint:
    path: /objects
    method: GET
    data_selector: objects
- name: blog-posts
  endpoint:
    path: /objects
    method: GET
    data_selector: objects
- name: blog-posts
  endpoint:
    path: /objects
    method: GET
    data_selector: objects
    params:
      type: blog-posts
- name: blog-posts
  endpoint:
    path: /objects
    method: GET
    data_selector: objects
- name: blog_posts
  endpoint:
    path: /objects
    method: GET
    data_selector: objects
    params:
      type: blog-posts
- name: blog_posts
  endpoint:
    path: /objects
    method: GET
    data_selector: objects
- name: blog-posts
  endpoint:
    path: /objects
    method: GET
    data_selector: objects
- name: blog-posts
  endpoint:
    path: /objects
    method: GET
    data_selector: objects
    params: {}
- name: blog_posts
  endpoint:
    path: /objects
    method: GET
    data_selector: objects
    params:
      type: blog-posts
- name: blog-posts
  endpoint:
    path: /objects/find
    method: GET
    data_selector: objects
    params:
      type: blog-posts
- name: blog-posts
  endpoint:
    path: /objects
    method: GET
    data_selector: objects
    params:
      type: blog-posts
- name: blog-posts
  endpoint:
    path: /objects
    method: GET
    data_selector: objects
- name: blog_posts
  endpoint:
    path: /objects
    method: GET
    data_selector: objects
- name: blog-posts
  endpoint:
    path: /objects
    method: GET
    data_selector: objects
    params: {}
- name: objects
  endpoint:
    path: /v3/buckets/:bucket_slug/objects
    method: GET
- name: object_types
  endpoint:
    path: /v3/buckets/:bucket_slug/object-types
    method: GET
    data_selector: object_types
- name: single_object_type
  endpoint:
    path: /v3/buckets/:bucket_slug/object-types/:slug
    method: GET
    data_selector: object_type
- name: create_object_type
  endpoint:
    path: /v3/buckets/:bucket_slug/object-types
    method: POST
    data_selector: object_type
- name: update_object_type
  endpoint:
    path: /v3/buckets/:bucket_slug/object-types/:slug
    method: PATCH
    data_selector: object_type
- name: delete_object_type
  endpoint:
    path: /v3/buckets/:bucket_slug/object-types/:slug
    method: DELETE
    data_selector: message
- name: objects
  endpoint:
    path: /v3/buckets/:bucket_slug/objects
    method: GET
    data_selector: data
    params: {}
- name: delete_object
  endpoint:
    path: /v3/buckets/${BUCKET_SLUG}/objects/:id
    method: DELETE
    data_selector: message
    params:
      id: string
      trigger_webhook: boolean
- name: add_object_revision
  endpoint:
    path: /v3/buckets/${BUCKET_SLUG}/objects/:id
    method: DELETE
    data_selector: message
    params:
      id: string
      status: draft
      trigger_webhook: boolean
- name: revisions
  endpoint:
    path: /v3/buckets/:bucket_slug/objects/:object_id/revisions
    method: GET
    data_selector: revision
    params:
      object_id: example_object_id
- name: add_revision
  endpoint:
    path: /v3/buckets/:bucket_slug/objects/:object_id/revisions
    method: POST
    data_selector: revision
    params:
      object_id: example_object_id
- name: media
  endpoint:
    path: /v3/buckets/:bucket_slug/media
    method: GET
    data_selector: media
    params:
      trigger_webhook: 'false'
      useCache: 'true'
      pretty: 'false'
      skip: 0
- name: generate_text
  endpoint:
    path: /v3/buckets/:bucket_slug/ai/text
    method: POST
    data_selector: text
    params: {}
- name: generate_image
  endpoint:
    path: /v3/buckets/:bucket_slug/ai/image
    method: POST
    data_selector: media
    params: {}
- name: webhook
  endpoint:
    path: /webhooks
    method: POST
    data_selector: payload
    params: {}
- name: localized_objects
  endpoint:
    path: /v3/buckets/:bucket_slug/objects
    method: GET
    data_selector: objects
    params:
      locale: locale
notes:
- Cosmic frees up more time for our developers and makes our workflow more flexible.
- Content is created in a dashboard interface and delivered via API endpoints
- API data is delivered securely with industry standard 256-bit SSL encryption.
- Using a powerful image CDN service like imgix allows you to make edits, crops, and
  adjustments to your images.
- Cosmic headless CMS API is cross-compatible, future-proof, extensible, scalable,
  and robust.
- API requires an OAuth2 setup for authentication.
- Uses OAuth2 for authentication
- Uses cutting-edge AI analysis to identify exceptional long-term value opportunities
  in public and private markets.
- A modern, professional changelog website for developer tool software
- Maintain and update resourceful content to keep your users informed.
- Create, read, update, and delete information using Cosmic’s powerful API.
- You need to grab your API key from your dashboard under Bucket Settings » API Access.
- Add an Object type in the Cosmic dashboard with metafields for image and content
- Add your Cosmic API keys in the .env file
- Add your Cosmic API keys in .env.local file
- Log in to the Cosmic dashboard to create a new Blog Posts Object type
- Add your Cosmic API keys in the .env file.
- Add your Cosmic API keys in a new file titled .env.local
- Ensure to create a new Object type 'Blog Posts' in the Cosmic dashboard.
- Add a few blog posts to get some content ready to be delivered.
- Add your Cosmic API keys in a new file titled `.env.local`.
- Add your Cosmic API keys found in Project / API keys
- Add your Cosmic API keys in `.env` file.
- 'Use environment variables for API keys: BUCKET_SLUG and BUCKET_READ_KEY'
- Add your Cosmic API keys in the environment variables BUCKET_SLUG and BUCKET_READ_KEY.
- Requires setup of bucket and API keys in the Cosmic dashboard
- Add your Cosmic API keys in a .env file
- Uses OAuth2
- Enjoy the free plan forever. If you have more usage requirements than are available
  in the free plan, go to Project > Billing and select from available plans.
- 2FA is an added layer of security which, once activated, will require you to input
  a code generated from text message to log in to your account.
- All Cosmic Buckets have a rate limit of 500 API requests per second per IP address.
- Endpoints have a timeout limit of 30 seconds.
- All requests allow gzip encoding.
- Requires setup of bucket and API keys.
- The size limit for uploads to the upload URL is 900MB.
- AI generation requests may be subject to rate limiting based on your plan.
- Generated images are stored in your Cosmic Bucket's media library and count toward
  your storage quota.
- The new dashboard and API v3 are completely isolated from the v1 dashboard and prior
  REST API and GraphQL API versions.
errors:
- '401 Unauthorized: Check your API key and permissions.'
- '401 Unauthorized: Recheck API key or permissions'
- 'Rate limit exceeded: 500 requests per second per IP address.'
- 'Timeout: Endpoint response time limit of 30 seconds.'
- '200: OK - Everything worked as expected.'
- '400: Bad Request - Your request is invalid.'
- '401: Unauthorized - Your access key is incorrect.'
- '402: Payment Required - Your Bucket needs to be upgraded to continue use.'
- '403: Forbidden - You are not allowed to access this content.'
- '404: Not Found - The requested resource doesn''t exist.'
- '429: Too Many Requests - Too many requests hit the API too quickly.'
- '500, 502, 503, 504: Internal Server Error - Something went wrong on our end.'
- 'REQUEST_LIMIT_EXCEEDED: Throttle API calls or reduce frequency'
- 'QUERY_TIMEOUT: Break down filters or add selectivity'
- '401 Unauthorized: Recheck API key'
auth_info:
  mentioned_objects:
  - BUCKET_SLUG
  - BUCKET_READ_KEY
client:
  base_url: https://app.cosmicjs.com
  auth:
    type: oauth2
    flow: refresh_token
source_metadata: null
