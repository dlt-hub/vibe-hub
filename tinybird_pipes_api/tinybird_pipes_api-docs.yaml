resources:
- name: pipes
  endpoint:
    path: /v0/pipes
    method: POST
    data_selector: id
    params: {}
- name: nodes
  endpoint:
    path: /v0/pipes/{pipe_name}/nodes
    method: POST
    data_selector: name
    params: {}
- name: endpoint
  endpoint:
    path: /v0/pipes/{pipe_name}/endpoint
    method: PUT
    data_selector: id
    params: {}
- name: query
  endpoint:
    path: /v0/sql
    method: POST
    data_selector: data
    params: {}
- name: pipes
  endpoint:
    path: /v0/pipes/
    method: GET
    data_selector: pipes
- name: create_pipe
  endpoint:
    path: /v0/pipes/
    method: POST
    data_selector: ''
    params: {}
- name: append_node
  endpoint:
    path: /v0/pipes/(.+)/nodes
    method: POST
    data_selector: ''
    params: {}
- name: get_pipe_info
  endpoint:
    path: /v0/pipes/(.+)
    method: GET
    data_selector: ''
    params: {}
- name: explain
  endpoint:
    path: /pipes/:pipe_name/explain
    method: GET
    data_selector: debug_query
    params:
      department: Engineering
- name: trips
  endpoint:
    data_selector: records
- name: taxi_zone_lookup
  endpoint:
    path: /misc/taxi_zone_lookup.csv
    method: GET
    data_selector: rows
    params: {}
- name: best_tip_zones
  endpoint:
    path: /endpoints/best_tip_zones.pipe
    method: GET
    data_selector: results
    params: {}
- name: trips
  endpoint:
    path: /datasources/trips.datasource
    method: GET
- name: taxi_zone_lookup
  endpoint:
    path: /datasources/taxi_zone_lookup.datasource
    method: GET
    data_selector: records
- name: best_tip_zones
  endpoint:
    path: /endpoints/best_tip_zones.pipe
    method: GET
    data_selector: results
- name: trips
  endpoint:
    path: /trips
    method: GET
    data_selector: records
- name: taxi_zone_lookup
  endpoint:
    path: /taxi_zone_lookup
    method: GET
    data_selector: records
- name: best_tip_zones
  endpoint:
    path: /v0/pipes/best_tip_zones.json
    method: GET
    data_selector: data
    params:
      pickup_zone: Newark Airport
- name: trips
  endpoint:
    path: /v0/pipes/best_tip_zones.json
    method: GET
    data_selector: data
    params:
      pickup_zone: Newark Airport
- name: taxi_zone_lookup
  endpoint:
    path: /datasources/taxi_zone_lookup.datasource
    method: GET
    data_selector: records
    params: {}
- name: trips
  endpoint:
    path: /datasource/trips
    method: POST
    data_selector: data
    params:
      url: https://d37ci6vzurychx.cloudfront.net/trip-data/yellow_tripdata_2025-05.parquet
- name: taxi_zone_lookup
  endpoint:
    path: /datasource/taxi_zone_lookup
    method: POST
    data_selector: data
    params:
      url: https://d37ci6vzurychx.cloudfront.net/misc/taxi_zone_lookup.csv
- name: trips
  endpoint:
    path: /datasources/trips.datasource
    method: GET
- name: trips
  endpoint:
    data_selector: records
- name: taxi_zone_lookup
  endpoint:
    path: /datasources/taxi_zone_lookup
    method: GET
    data_selector: rows
    params: {}
- name: best_tip_zones
  endpoint:
    path: /endpoints/best_tip_zones
    method: GET
    data_selector: rows
    params: {}
- name: trips
  endpoint:
    path: /datasources/trips.datasource
    method: GET
    data_selector: records
    params: {}
- name: taxi_zone_lookup
  endpoint:
    path: /misc/taxi_zone_lookup.csv
    method: GET
    data_selector: records
    params: {}
- name: best_tip_zones
  endpoint:
    path: /endpoints/best_tip_zones.pipe
    method: POST
    data_selector: results
    params:
      pickup_zone: JFK Airport
- name: trips
  endpoint:
    path: /trip-data/yellow_tripdata_2025-05.parquet
    method: GET
- name: trips
  endpoint:
    path: /datasources/trips
    method: GET
    data_selector: records
    params: {}
- name: taxi_zone_lookup
  endpoint:
    path: /datasources/taxi_zone_lookup
    method: GET
    data_selector: records
    params: {}
- name: best_tip_zones
  endpoint:
    path: /v0/pipes/best_tip_zones.json
    method: GET
    data_selector: data
    params:
      pickup_zone: Newark Airport
- name: trips
  endpoint:
    path: /pipes/best_tip_zones.json
    method: GET
    data_selector: data
    params:
      pickup_zone: Newark Airport
- name: taxi_zone_lookup
  endpoint:
    path: /datasources/taxi_zone_lookup.datasource
    method: GET
    data_selector: records
    params: {}
- name: data_types
  endpoint:
    path: /docs/sql-reference/data-types
    method: GET
    data_selector: data_types
    params: {}
- name: table_engines
  endpoint:
    path: /docs/sql-reference/engines
    method: GET
    data_selector: table_engines
    params: {}
- name: functions
  endpoint:
    path: /docs/sql-reference/functions
    method: GET
    data_selector: functions
    params: {}
- name: pipes
  endpoint:
    path: /pipes
    method: GET
    data_selector: records
- name: endpoints
  endpoint:
    path: /endpoints
    method: GET
    data_selector: records
- name: sinks
  endpoint:
    path: /sinks
    method: GET
    data_selector: records
- name: materialized_views
  endpoint:
    path: /materialized_views
    method: GET
    data_selector: records
- name: data_source
  endpoint:
    path: /data_sources
    method: GET
    data_selector: records
    params: {}
- name: queries
  endpoint:
    path: /queries
    method: POST
    data_selector: results
    params: {}
- name: analyze
  endpoint:
    path: /v0/analyze
    method: POST
- name: datasources
  endpoint:
    path: /v0/datasources
    method: GET
    data_selector: datasources
- name: create_datasource
  endpoint:
    path: /v0/datasources
    method: POST
    data_selector: operations
- name: datasource_truncate
  endpoint:
    path: /v0/datasources/(.+)/truncate
    method: POST
- name: datasource_delete
  endpoint:
    path: /v0/datasources/(.+)/delete
    method: POST
- name: datasource
  endpoint:
    path: /v0/datasources/(.+)
    method: GET
    data_selector: id
    params: {}
- name: delete_datasource
  endpoint:
    path: /v0/datasources/(.+)
    method: DELETE
    data_selector: id
    params: {}
- name: update_datasource
  endpoint:
    path: /v0/datasources/(.+)
    method: PUT
    data_selector: id
    params: {}
- name: events
  endpoint:
    path: /v0/events
    method: POST
    data_selector: null
    params:
      name: events_test
      wait: 'false'
- name: jobs
  endpoint:
    path: /v0/jobs/
    method: GET
    data_selector: jobs
    params: {}
- name: job_details
  endpoint:
    path: /v0/jobs/(.+)
    method: GET
    data_selector: job
    params: {}
- name: cancel_job
  endpoint:
    path: /v0/jobs/(.+)/cancel
    method: POST
    data_selector: cancel_job_response
    params: {}
- name: query
  endpoint:
    path: /v0/sql
    method: POST
    data_selector: data
    params: {}
- name: variables
  endpoint:
    path: /v0/variables/
    method: GET
    data_selector: variables
    params: {}
- name: variable
  endpoint:
    path: /v0/variables/(.+)
    method: GET
    data_selector: variable
    params: {}
- name: datasources-bigquery-credentials
  endpoint:
    path: /v0/datasources-bigquery-credentials
    method: GET
    data_selector: account
- name: trust-policy
  endpoint:
    path: /v0/integrations/s3/policies/trust-policy
    method: GET
- name: write-access-policy
  endpoint:
    path: /v0/integrations/s3/policies/write-access-policy
    method: GET
- name: s3-settings
  endpoint:
    path: /v0/integrations/s3/settings
    method: GET
- name: pipes
  endpoint:
    path: /v0/pipes/{pipe_id}/nodes/{node_id}/sink
    method: POST
- name: remove-sink
  endpoint:
    path: /v0/pipes/{pipe_id}/nodes/{node_id}/sink
    method: DELETE
- name: trigger-sink
  endpoint:
    path: /v0/pipes/{pipe_id}/sink
    method: POST
- name: tokens
  endpoint:
    path: /v0/tokens/
    method: GET
    data_selector: tokens
    params: {}
- name: create_token
  endpoint:
    path: /v0/tokens/
    method: POST
    data_selector: name
    params: {}
- name: refresh_token
  endpoint:
    path: /v0/tokens/(.+)/refresh
    method: POST
    data_selector: token
    params: {}
- name: get_token_info
  endpoint:
    path: /v0/tokens/(.+)
    method: GET
    data_selector: name
    params: {}
- name: delete_token
  endpoint:
    path: /v0/tokens/(.+)
    method: DELETE
    data_selector: name
    params: {}
- name: edit_token
  endpoint:
    path: /v0/tokens/(.+)
    method: PUT
    data_selector: name
    params: {}
notes:
- All Tinybird API Endpoints require authentication using a Token with the appropriate
  scope.
- Pipes only support one enabled node each, so enabling one makes previously enabled
  nodes inaccessible.
- Tinybird Code will have usage limits based on your plan
- Docker or Orbstack is required for running Tinybird Local.
- Requires setup of connected app in Tinybird
- Generated from https://d37ci6vzurychx.cloudfront.net/misc/taxi_zone_lookup.csv
- 'Run the following command to install the Tinybird CLI: curl https://tinybird.co
  | sh'
- All Tinybird API calls require authentication using a token.
- Data sources are the definition of the database tables where you will store the
  data.
- Requires a Tinybird account for authentication.
- Use of pickup_zone as a dynamic parameter in queries
- 'Trips parquet file rows look like this: {''VendorID'':1,''tpep_pickup_datetime'':1746058026000,''tpep_dropoff_datetime'':1746059055000,''passenger_count'':1,''trip_distance'':3.7,''RatecodeID'':1,''store_and_fwd_flag'':''N'',''PULocationID'':140,''DOLocationID'':202,''payment_type'':1,''fare_amount'':18.4,''extra'':4.25,''mta_tax'':0.5,''tip_amount'':4.85,''tolls_amount'':0,''improvement_surcharge'':1,''total_amount'':29,''congestion_surcharge'':2.5,''Airport_fee'':0,''cbd_congestion_fee'':0.75}'
- For the lookup, prioritize subqueries over joins
- Default local url is http://localhost:7181.
- Your local admin token won't work with Tinybird Cloud. The cloud environment has
  its own tokens for security.
- If ingesting using NDJSON format, send Decimal values as strings for accuracy.
- Uses OAuth2 with refresh token — requires setup of connected app in api
- Pipes can be specialized into endpoints, materialized views, copy pipes, and sinks.
- Use resource-scoped static tokens or JWTs for fine-grained access control.
- Tinybird only supports one live and one staging deployment per workspace.
- Uses OAuth2 with refresh token — requires setup of connected app in Tinybird
- Free plan limits apply to Workspaces after canceling Developer plan.
- Some objects may return nulls in deeply nested fields
- Requires OAuth2 for authentication.
- Tinybird supports its customers' Health Insurance Portability and Accountability
  Act (HIPAA) compliance efforts by offering Business Associate Agreements (BAAs).
  Additionally, Tinybird's offering allows customers to process their data constituting
  personal health information (PHI) in AWS, Azure, or Google Cloud—entities which
  themselves have entered into BAAs with Tinybird.
- Multi-Factor Authentication (MFA) will be enabled by default for users signing in
  with email and password starting September 8, 2025.
- Customer-caused outages or disruptions or outages or disruptions attributable in
  whole or in part to force majeure events shall not be included in any measurement
  of Uptime Service Level.
- Tinybird shall provide at least a 99.9% per calendar month uptime availability.
- All endpoints require authentication using a Token with the appropriate scope.
- Dependent Materialized Views won’t be cascade deleted.
- Job details are available for 48h after the Job creation.
- Every resource in Tinybird is secured so to use the Query API you must provide a
  Token with Pipe read permissions.
- Environment variables are unique for a Workspace.
- Environment variables values are rendered as String data type.
- All endpoints require authentication using a Token with TOKENS or ADMIN scope.
errors:
- '400: Could not get a node to run the explain plan'
- '403: Forbidden. Provided token doesn’t have permissions to run the explain plan,
  it needs `ADMIN` or `PIPE:READ` and `DATASOURCE:READ`'
- '404: Pipe not found, Node not found'
- 'usage limits exceeded: Check your plan for request limits'
- '400: Bad request. This could be due to a missing parameter in a request, for instance'
- '403: Forbidden. Provided auth token doesn''t have the right scope or the Data Source
  isn''t available'
- '404: Not found'
- '405: HTTP Method not allowed'
- '408: Request timeout (e.g. query execution time was exceeded)'
- '409: You need to resubmit the request due to a conflict with the current state
  of the target source (e.g.: you need to delete a Materialized View)'
- '411: No valid Content-Length header containing the length of the message-body'
- '413: The message body is too large'
- '429: Too many requests. When over the rate limits of your account'
- '500: Unexpected error'
- 'REQUEST_LIMIT_EXCEEDED: Throttle API calls or reduce frequency'
- '429 Too Many Requests: Throttle API calls or reduce frequency'
- '401 Unauthorized: Recheck OAuth scopes or token expiration'
- DATASOURCES:CREATE token required for truncate and delete operations
- '400: The request is invalid. The body will contain more information. A common cause
  is missing the ''name'' parameter.'
- '403: The token isn''t valid. The request shouldn''t be retried.'
- '404: The token''s Workspace doesn''t belong to this cluster.'
- '429: The request/second limit has been reached. Default limit is 100 requests/second.'
- '500: An unexpected error has occurred. The body will contain more information.'
- '503: The service is temporarily unavailable.'
- 'HTTP Code 404: Job not found.'
- 'HTTP Code 403: The token provided doesn’t have access to this Job.'
- 'HTTP Code 400: Job is not in a cancellable status.'
- '400: Invalid or missing parameters'
- '403: Limit reached or token invalid'
- '404: Workspace or variable not found'
- '200: OK'
- '503: Feature not enabled in your region'
- '200: No error'
- '403: Forbidden. Provided token doesn’t have permissions.'
auth_info:
  mentioned_objects:
  - Auth Token
  - admin token
  - resource-scoped tokens
  - JSON Web tokens (JWTs)
  - OauthToken
client:
  base_url: https://api.tinybird.co
  auth:
    type: Token
    location: header
    header_name: Authorization
source_metadata: null
