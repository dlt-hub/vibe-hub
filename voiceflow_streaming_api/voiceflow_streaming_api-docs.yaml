resources:
- name: interact_stream
  endpoint:
    path: /v2/project/{projectID}/user/D/interact/stream
    method: POST
    data_selector: data
    params:
      completion_events: 'true'
- name: dialogue_manager
  endpoint:
    path: /dialogue
    method: POST
- name: knowledge_base
  endpoint:
    path: /knowledge
    method: GET
- name: transcripts
  endpoint:
    path: /transcripts
    method: GET
- name: transcripts
  endpoint:
    path: /api/transcripts
    method: GET
    data_selector: records
    params: {}
- name: evaluations
  endpoint:
    path: /api/evaluations
    method: GET
    data_selector: records
    params: {}
- name: dialogue_manager
  endpoint:
    path: /dialogue
    method: POST
    data_selector: response
- name: knowledge_base
  endpoint:
    path: /knowledge
    method: GET
    data_selector: data
- name: transcripts
  endpoint:
    path: /transcripts
    method: GET
    data_selector: transcripts
- name: projects
  endpoint:
    path: /projects
    method: POST
    data_selector: data
    params: {}
- name: import_projects
  endpoint:
    path: /import/projects
    method: POST
    data_selector: imported_projects
- name: export_projects
  endpoint:
    path: /export/projects
    method: GET
    data_selector: exported_projects
- name: import_functions
  endpoint:
    path: /import/functions
    method: POST
    data_selector: imported_functions
- name: export_functions
  endpoint:
    path: /export/functions
    method: GET
    data_selector: exported_functions
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: workflows
  endpoint:
    path: /workflows
    method: GET
    data_selector: workflows
    params: {}
- name: message_step
  endpoint:
    path: /docs/message-step
    method: GET
    data_selector: message
- name: Prompt step
  endpoint:
    path: /docs/prompt-step
    method: GET
    data_selector: response
    params: {}
- name: image_step
  endpoint:
    path: /docs/images
    method: GET
    data_selector: records
- name: button_step
  endpoint:
    path: /docs/buttons-v2
    method: GET
    data_selector: buttons
    params: {}
- name: choice_step
  endpoint:
    path: /api/choice_step
    method: POST
    data_selector: data
    params: {}
- name: capture_step
  endpoint:
    path: /docs/capture-step
    method: GET
    data_selector: content
    params: {}
- name: projects
  endpoint:
    path: /v1/projects
    method: GET
    data_selector: data
    params: {}
- name: Set step
  endpoint:
    path: /docs/variables-set
    method: GET
    data_selector: variables
- name: api_step
  endpoint:
    path: /api/step
    method: GET
    data_selector: response
- name: call_forwarding
  endpoint:
    path: /docs/call-forwarding-step
    method: GET
    data_selector: call_forwarding_details
- name: tool_step
  endpoint:
    path: /docs/tool-step
    method: GET
    data_selector: tool_step_data
- name: triggers
  endpoint:
    path: /docs/triggers
    method: GET
    data_selector: triggers
    params: {}
- name: prompts
  endpoint:
    path: /prompts
    method: GET
    data_selector: data
    params: {}
- name: prompting
  endpoint:
    path: /api/v1/prompting
    method: POST
    data_selector: data
    params: {}
- name: events
  endpoint:
    path: /state/userID
    method: POST
    data_selector: action
    params: {}
- name: entities
  endpoint:
    path: /entities
    method: GET
    data_selector: entities
- name: facts
  endpoint:
    path: /facts
    method: GET
    data_selector: responseBody
    params: {}
- name: function_steps
  endpoint:
    path: /functions
    method: GET
    data_selector: functions
    params: {}
- name: Zendesk
  endpoint:
    path: /zendesk
    method: POST
    data_selector: records
    params: {}
- name: Salesforce
  endpoint:
    path: /salesforce
    method: POST
    data_selector: records
    params: {}
- name: Google Sheets
  endpoint:
    path: /google-sheets
    method: POST
    data_selector: records
    params: {}
- name: Gmail
  endpoint:
    path: /gmail
    method: POST
    data_selector: records
    params: {}
- name: Airtable
  endpoint:
    path: /airtable
    method: POST
    data_selector: records
    params: {}
- name: Make (formerly Integromat)
  endpoint:
    path: /make
    method: POST
    data_selector: records
    params: {}
- name: Twilio
  endpoint:
    path: /twilio
    method: POST
    data_selector: records
    params: {}
- name: Hubspot
  endpoint:
    path: /hubspot
    method: POST
    data_selector: records
    params: {}
- name: send_email
  endpoint:
    path: /gmail/send
    method: POST
    data_selector: email
    params: {}
- name: create_case
  endpoint:
    path: /services/data/vXX.X/sobjects/Case
    method: POST
- name: create_contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: POST
- name: create_lead
  endpoint:
    path: /services/data/vXX.X/sobjects/Lead
    method: POST
- name: update_case
  endpoint:
    path: /services/data/vXX.X/sobjects/Case/{id}
    method: PATCH
- name: update_contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact/{id}
    method: PATCH
- name: update_lead
  endpoint:
    path: /services/data/vXX.X/sobjects/Lead/{id}
    method: PATCH
- name: send_sms
  endpoint:
    path: /api/send_sms
    method: POST
    data_selector: message
    params:
      to: phone_number
      body: message_body
- name: Agent
  endpoint:
    path: /reference/stateinteract-1#/
    method: POST
- name: Message
  endpoint:
    path: /reference/stateinteract-1#/
    method: POST
- name: Event
  endpoint:
    path: /reference/stateinteract-1#/
    method: POST
- name: Outbound Call
  endpoint:
    path: /docs/outbound-calls
    method: POST
- name: ticket
  endpoint:
    path: /tickets
    method: POST
    data_selector: ticket
    params: {}
- name: user
  endpoint:
    path: /users
    method: GET
    data_selector: users
    params: {}
- name: organization
  endpoint:
    path: /organizations
    method: PUT
    data_selector: organization
    params: {}
- name: knowledge_base_query
  endpoint:
    path: /knowledge-base/query
    method: POST
    data_selector: response.data
    params: {}
- name: document_upload
  endpoint:
    path: /v1/knowledge-base/docs/upload-url
    method: POST
    data_selector: data
    params: {}
- name: document_upload
  endpoint:
    path: /v1/knowledge-base/docs/upload
    method: POST
    data_selector: data
- name: kb_query
  endpoint:
    path: /v1/knowledge-base/query
    method: POST
    data_selector: data
- name: url_upload
  endpoint:
    path: /v1/knowledge-base/docs/upload
    method: POST
    data_selector: data
    params:
      maxChunkSize: 1000
      overwrite: 'true'
- name: table_upload
  endpoint:
    path: /v1/knowledge-base/docs/upload/table
    method: POST
    data_selector: data
    params: {}
- name: web_chat_widget
  endpoint:
    path: /widget/bundle.mjs
    method: GET
- name: chat_persistence
  endpoint:
    path: /chat/persistence
    method: POST
    data_selector: persistence
    params: {}
- name: chat_load
  endpoint:
    path: /chat/load
    method: POST
    data_selector: response
    params: {}
- name: web_chat
  endpoint:
    path: /api/chat
    method: POST
    data_selector: success
- name: web_chat
  endpoint:
    path: /custom-web-chat-styling
    method: GET
    data_selector: chat
    params: {}
- name: outbound_call
  endpoint:
    path: /v1alpha1/phone-number/<AGENT_ID>/outbound
    method: POST
    data_selector: body
- name: interruption_behavior
  endpoint:
    path: /docs/integrations
    method: GET
    data_selector: interruption_behavior
    params: {}
- name: call_recording
  endpoint:
    path: /call/recording
    method: GET
    data_selector: recordings
    params: {}
- name: custom_actions
  endpoint:
    path: /custom/actions
    method: POST
    data_selector: data
    params: {}
- name: interact
  endpoint:
    path: /state/user/{chatID}/interact
    method: POST
    data_selector: data
- name: transcripts
  endpoint:
    path: /transcripts
    method: GET
    data_selector: records
- name: workspaces
  endpoint:
    path: /workspaces
    method: GET
    data_selector: workspaces
    params: {}
- name: projects
  endpoint:
    path: /projects
    method: GET
    data_selector: projects
    params: {}
- name: team_members
  endpoint:
    path: /manage/collaborators
    method: GET
    data_selector: members
    params: {}
- name: credits
  endpoint:
    path: /credits
    method: GET
    data_selector: credits
    params: {}
- name: knowledge_base
  endpoint:
    path: /docs/upload-files
    method: POST
    data_selector: status
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: interaction_tests
  endpoint:
    path: /tests/interactions
    method: POST
    data_selector: tests
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: Customer Support Agent Test
  endpoint:
    path: /agent-to-agent-tests
    method: POST
- name: agent_testing
  endpoint:
    path: /agent-testing
    method: POST
    data_selector: test_results
- name: agent
  endpoint:
    path: /api/agents
    method: GET
    data_selector: agents
- name: analytics
  endpoint:
    path: /api/analytics
    method: GET
    data_selector: analytics
- name: start_conversation
  endpoint:
    path: /dialog/start
    method: POST
    data_selector: interactions
    params: {}
- name: knowledge_base
  endpoint:
    path: /kb/query
    method: POST
    data_selector: results
    params: {}
- name: documents
  endpoint:
    path: /docs/documents
    method: GET
    data_selector: documents
- name: upload_urls
  endpoint:
    path: /docs/upload-urls
    method: POST
    data_selector: parameters
    params:
      url: https://docs.example.com/api
      name: API Documentation
- name: upload_files
  endpoint:
    path: /document/upload-file
    method: POST
    data_selector: files
    params:
      file: local file path
- name: transcripts
  endpoint:
    path: /transcripts
    method: GET
    data_selector: records
    params: {}
- name: transcripts
  endpoint:
    path: /transcripts
    method: GET
- name: transcripts
  endpoint:
    path: /transcripts
    method: GET
    data_selector: records
- name: tests
  endpoint:
    path: /tests
    method: POST
    data_selector: test
- name: export_agent_information
  endpoint:
    path: /agent/export
    method: GET
    data_selector: agentData
    params: {}
- name: health_check
  endpoint:
    path: /health
    method: GET
    data_selector: null
    params: {}
- name: execute_test_suite
  endpoint:
    path: /api/v1/tests/execute
    method: POST
    data_selector: null
    params: {}
- name: get_test_status
  endpoint:
    path: /api/v1/tests/status/{execution_id}
    method: GET
    data_selector: null
    params: {}
- name: system_information
  endpoint:
    path: /api/v1/system/info
    method: GET
    data_selector: null
    params: {}
- name: test_execution
  endpoint:
    path: /api/v1/tests/execute
    method: POST
    data_selector: execution
    params:
      api_key: your_api_key (optional)
- name: test_status
  endpoint:
    path: /api/v1/tests/status/{YOUR_EXECUTION_ID}
    method: GET
    data_selector: status
    params: {}
- name: health_check
  endpoint:
    path: /health
    method: GET
    data_selector: health_status
    params: {}
- name: analytics
  endpoint:
    path: /analytics
    method: GET
    data_selector: data
    params: {}
- name: analytics
  endpoint:
    path: /analytics
    method: GET
    data_selector: analytics_data
    params:
      agent_id: <your-agent-id>
      start_time: '2025-01-01T00:00:00.000Z'
      end_time: '2025-01-02T00:00:00.000Z'
      limit: 500
      analytics: interactions,sessions
      output_file: jan-2024-analytics.json
- name: test_execution
  endpoint:
    path: /execute/test
    method: POST
    data_selector: test_results
    params: {}
- name: system_info
  endpoint:
    path: /system/info
    method: GET
    data_selector: info
    params: {}
- name: test_suites
  endpoint:
    path: /api/v1/test_suites
    method: POST
    data_selector: test_suites
- name: scheduled_tests
  endpoint:
    path: /scheduled_tests
    method: POST
    data_selector: results
    params: {}
- name: email_notifications
  endpoint:
    path: /email/notifications
    method: POST
    data_selector: notifications
    params: {}
- name: query
  endpoint:
    path: /knowledge-base/query
    method: POST
- name: upload_document
  endpoint:
    path: /v1/knowledge-base/docs/upload
    method: POST
- name: retrieve_document
  endpoint:
    path: /v1/knowledge-base/docs/{documentID}
    method: GET
- name: delete_document
  endpoint:
    path: /v1/knowledge-base/docs/{documentID}
    method: DELETE
- name: replace_document
  endpoint:
    path: /v1/knowledge-base/docs/{documentID}/upload
    method: PUT
- name: upload_table_data
  endpoint:
    path: /v1/knowledge-base/docs/upload/table
    method: POST
- name: traces
  endpoint:
    path: /api/v1/traces
    method: GET
    data_selector: traces
- name: speak
  endpoint:
    path: /speak
    method: POST
    data_selector: payload
- name: visual
  endpoint:
    path: /visual
    method: POST
    data_selector: payload
- name: cardV2
  endpoint:
    path: /cardV2
    method: POST
    data_selector: payload
- name: no-reply
  endpoint:
    path: /no-reply
    method: POST
    data_selector: payload
- name: carousel
  endpoint:
    path: /carousel
    method: POST
    data_selector: payload
- name: choice_button_step
  endpoint:
    path: /dialog-manager/button-step
    method: POST
- name: choice_agent_step
  endpoint:
    path: /dialog-manager/agent-step
    method: POST
- name: custom_actions
  endpoint:
    path: /dialog-manager/custom-actions
    method: POST
- name: end_action
  endpoint:
    path: /dialog-manager/end-action
    method: GET
- name: completion_events
  endpoint:
    path: /dialog-manager/completion-events
    method: GET
- name: Dialog Manager API
  endpoint:
    path: /reference/overview
    method: GET
- name: Knowledge Base Management API
  endpoint:
    path: /reference/post_v1-knowledge-base-docs-upload
    method: POST
- name: Knowledge Query API
  endpoint:
    path: /reference/post_knowledge-base-query
    method: POST
- name: Analytics API
  endpoint:
    path: /reference/querypubliccontroller_queryusage
    method: GET
- name: Transcripts API
  endpoint:
    path: /reference/fetchtranscripts
    method: GET
- name: transcripts
  endpoint:
    path: /transcripts
    method: GET
    data_selector: records
    params: {}
- name: projects
  endpoint:
    path: /projects
    method: GET
    data_selector: records
    params: {}
- name: Project API
  endpoint:
    path: /fetchproject
    method: GET
- name: Transcripts API
  endpoint:
    path: /transcriptpubliccontroller_searchbyprojectid
    method: POST
- name: Knowledge Base API
  endpoint:
    path: /post_knowledge-base-query-1
    method: POST
- name: interact
  endpoint:
    path: /state/user/$ID/interact
    method: POST
    data_selector: response
    params: {}
- name: interact
  endpoint:
    path: /state/user/$ID/interact
    method: POST
    data_selector: response
    params: {}
- name: interact
  endpoint:
    path: /state/user/$ID/interact
    method: POST
    data_selector: traces
- name: interact
  endpoint:
    path: /state/user/ID/interact
    method: POST
    data_selector: response
    params: {}
- name: interact
  endpoint:
    path: /state/user/ID/interact
    method: POST
    data_selector: traces
- name: interact
  endpoint:
    path: /state/user/$ID/interact
    method: POST
    data_selector: traces
- name: Create Transcripts
  endpoint:
    path: /transcripts
    method: PUT
- name: Fetch Project Transcripts
  endpoint:
    path: /fetchtranscripts
    method: GET
- name: transcripts
  endpoint:
    path: /v2/transcripts
    method: PUT
    data_selector: ''
    params: {}
- name: transcripts
  endpoint:
    path: /v2/transcripts
    method: PUT
    data_selector: ''
    params: {}
- name: interact
  endpoint:
    path: /state/user/$ID/interact
    method: POST
    data_selector: ''
    params: {}
- name: transcripts
  endpoint:
    path: /transcripts
    method: GET
    data_selector: records
- name: projects
  endpoint:
    path: /projects
    method: GET
    data_selector: records
- name: interact
  endpoint:
    path: /state/user/{userID}/interact
    method: POST
- name: interact
  endpoint:
    path: /state/user/{userID}/interact
    method: POST
- name: interact
  endpoint:
    path: /state/user/userID/interact
    method: POST
- name: Interact Stream
  endpoint:
    path: /interact-stream
    method: POST
- name: State API
  endpoint:
    path: /state
    method: GET
- name: interact_stream
  endpoint:
    path: /v2/project/{projectID}/user/{userID}/interact/stream
    method: POST
- name: Fetch Project
  endpoint:
    path: /fetchproject
    method: GET
- name: Get All Project Transcripts
  endpoint:
    path: /transcriptpubliccontroller_searchbyprojectid
    method: POST
- name: Get Transcript with Logs
  endpoint:
    path: /transcriptpubliccontroller_findonewithlogs
    method: GET
- name: interact_stream
  endpoint:
    path: /interact-stream
    method: POST
    data_selector: event
    params:
      completion_events: 'true'
- name: dialog_state
  endpoint:
    path: /state
    method: GET
- name: fetch_state
  endpoint:
    path: /state/user/{userID}
    method: GET
- name: update_state
  endpoint:
    path: /state/user/{userID}
    method: PUT
- name: state
  endpoint:
    path: /state/user/userID
    method: GET
    data_selector: stack
    params: {}
- name: delete_state
  endpoint:
    path: /state/user/{userID}
    method: DELETE
- name: update_variables
  endpoint:
    path: /state/user/{userID}/variables
    method: PATCH
- name: update_variables
  endpoint:
    path: /state/user/userID/variables
    method: PATCH
    data_selector: state
    params: {}
- name: session_event
  endpoint:
    path: /v2/project/{projectID}/session/{sessionID}/event
    method: POST
    data_selector: action
    params: {}
- name: query
  endpoint:
    path: /knowledge-base/query
    method: POST
    data_selector: output
- name: query
  endpoint:
    path: /knowledge-base/query
    method: POST
    data_selector: output
    params:
      chunkLimit: 2
      synthesis: true
- name: knowledge_base_upload
  endpoint:
    path: /v1/knowledge-base/docs/upload
    method: POST
    data_selector: data
    params:
      overwrite: 'true'
- name: query
  endpoint:
    path: /reference/post_knowledge-base-query-1
    method: POST
    data_selector: results
- name: upload_document_url
  endpoint:
    path: /v1/knowledge-base/docs/upload
    method: POST
- name: Upload Document (non-url)
  endpoint:
    path: /knowledge-base/docs/upload
    method: POST
    data_selector: null
    params:
      overwrite: boolean
      maxChunkSize: integer
- name: upload_document_url
  endpoint:
    path: /docs/upload
    method: POST
    data_selector: data
    params:
      maxChunkSize: 1000
- name: delete_document
  endpoint:
    path: /docs/documentid
    method: DELETE
    data_selector: data
    params: {}
- name: Delete Document
  endpoint:
    path: /knowledge-base/docs/{documentID}
    method: DELETE
    data_selector: null
    params: {}
- name: document_list
  endpoint:
    path: /knowledge-base/docs
    method: GET
    data_selector: documents
    params:
      page: 1
      limit: 10
- name: document
  endpoint:
    path: /
    method: GET
    data_selector: data
    params:
      page: 1
      limit: 10
- name: document_chunk_retrieval
  endpoint:
    path: /v1/knowledge-base/docs/{documentID}
    method: GET
- name: Document List
  endpoint:
    path: /reference/get_v1-knowledge-base-docs
    method: GET
    data_selector: data
- name: Document Chunk Retrieval
  endpoint:
    path: /reference/get_v1-knowledge-base-docs-documentid
    method: GET
    data_selector: data
- name: Delete Document
  endpoint:
    path: /reference/delete_v1-knowledge-base-docs-documentid
    method: DELETE
    data_selector: data
- name: Upload Document (non-url)
  endpoint:
    path: /reference/post_v1-knowledge-base-docs-upload
    method: POST
    data_selector: data
- name: Upload Document (url)
  endpoint:
    path: /reference/post_v1-knowledge-base-docs-upload-url
    method: POST
    data_selector: data
- name: Replace Document (non-url)
  endpoint:
    path: /reference/put_v1-knowledge-base-docs-documentid-upload
    method: PUT
    data_selector: data
- name: Replace Document (non-url)
  endpoint:
    path: /v1/knowledge-base/docs/{documentID}/upload
    method: PUT
- name: document_chunk_retrieval
  endpoint:
    path: /v1/knowledge-base/docs/documentID/upload
    method: PUT
- name: document_list
  endpoint:
    path: /v1/knowledge-base/docs
    method: GET
- name: Replace Document (url)
  endpoint:
    path: /v1/knowledge-base/docs/{documentID}/upload
    method: PUT
- name: document
  endpoint:
    path: /docs/documentID/upload
    method: PUT
    data_selector: data
    params:
      maxChunkSize: 1000
- name: Update Document Metadata
  endpoint:
    path: /v1/knowledge-base/docs/{documentID}
    method: PATCH
- name: document
  endpoint:
    path: /documentID
    method: PATCH
- name: Update Chunk Metadata
  endpoint:
    path: /v1/knowledge-base/docs/{documentID}/chunk/{chunkID}
    method: PATCH
- name: document_metadata
  endpoint:
    path: /knowledge-base/docs/documentID/chunk/chunkID
    method: PATCH
    data_selector: data
    params: {}
- name: upload_table_data
  endpoint:
    path: /knowledge-base/docs/upload-table-1
    method: POST
    data_selector: data
    params: {}
- name: upload_table_data
  endpoint:
    path: /v1/knowledge-base/docs/upload/table
    method: POST
- name: fetch_project_transcripts
  endpoint:
    path: /v2/transcripts/{projectID}
    method: GET
    data_selector: transcripts
    params:
      tag: string
      range: string
      startDate: string
      endDate: string
- name: transcripts
  endpoint:
    path: /transcripts/projectID
    method: GET
    data_selector: records
- name: Check Transcripts Status
  endpoint:
    path: /v2/transcripts/{projectID}/hasUnreadTranscripts
    method: GET
- name: project_transcripts
  endpoint:
    path: /transcripts/projectID/hasUnreadTranscripts
    method: GET
- name: transcript
  endpoint:
    path: /v2/transcripts
    method: PUT
    data_selector: null
    params: {}
- name: transcripts
  endpoint:
    path: /transcripts
    method: PUT
- name: create_utterance_annotation
  endpoint:
    path: /transcripts/{projectID}/{transcriptID}/annotation/utteranceAddedTo
    method: PUT
- name: Get Transcript Dialog
  endpoint:
    path: /v2/transcripts/{projectID}/{transcriptID}
    method: GET
    params:
      limit: 1 to 1000
      offset: ≥ 1
- name: transcript
  endpoint:
    path: /transcripts/projectID/transcriptID
    method: GET
    data_selector: array of objects
- name: update_transcript
  endpoint:
    path: /v2/transcripts/{projectID}/{transcriptID}
    method: PATCH
- name: transcript
  endpoint:
    path: /transcripts/projectID/transcriptID
    method: PATCH
    data_selector: transcript
    params: {}
- name: delete_transcript
  endpoint:
    path: /v2/transcripts/{projectID}/{transcriptID}
    method: DELETE
    data_selector: ''
    params: {}
- name: Export Transcript Dialog
  endpoint:
    path: /v2/transcripts/{projectID}/{transcriptID}/export
    method: GET
    data_selector: transcript
    params:
      format: csv
- name: transcripts
  endpoint:
    path: /transcripts/projectID/transcriptID/export
    method: GET
- name: delete_transcript_tag
  endpoint:
    path: /v2/transcripts/{projectID}/{transcriptID}/report_tag/{reportTagID}
    method: DELETE
- name: Create Transcript Tag
  endpoint:
    path: /v2/transcripts/{projectID}/{transcriptID}/report_tag/{reportTagID}
    method: PUT
- name: transcripts
  endpoint:
    path: /transcripts/projectID/transcriptID/report_tag/reportTagID
    method: PUT
- name: tags
  endpoint:
    path: /projects/projectID/tags
    method: GET
- name: project_transcript
  endpoint:
    path: /v1/transcript/project/{projectID}
    method: POST
    data_selector: response
    params:
      take: 25
      skip: 0
      order: DESC
- name: transcript
  endpoint:
    path: /v1/transcript/project/projectID
    method: POST
    data_selector: transcripts
    params:
      take: '25'
      skip: '0'
      order: DESC
- name: transcript
  endpoint:
    path: /v1/transcript/{transcriptID}
    method: GET
    params:
      filterConversation: 'false'
- name: transcript
  endpoint:
    path: /v1/transcript/transcriptID
    method: GET
    data_selector: transcript
    params:
      filterConversation: 'false'
- name: Delete a Transcript
  endpoint:
    path: /v1/transcript/{transcriptID}
    method: DELETE
- name: fetch_project
  endpoint:
    path: /v2/versions/{versionID}/export
    method: GET
    params:
      prototype: boolean
- name: export_version
  endpoint:
    path: /versions/versionID/export
    method: GET
- name: query_usage
  endpoint:
    path: /query/usage
    method: POST
- name: query_usage
  endpoint:
    path: /query/usage
    method: POST
    data_selector: result
- name: query_usage
  endpoint:
    path: /v2/query/usage
    method: POST
- name: top_intents
  endpoint:
    path: /top_intents
    method: POST
    data_selector: result.intents
    params:
      projectID: 62912f08e83f76001b218690
      startTime: '2021-08-01T00:00:00.000Z'
      limit: 3
- name: interactions
  endpoint:
    path: /interactions
    method: POST
    data_selector: result.items
    params:
      projectID: 62912f08e83f76001b218690
      startTime: '2021-08-01T00:00:00.000Z'
      limit: 3
- name: unique_users
  endpoint:
    path: /unique_users
    method: POST
    data_selector: result.items
    params:
      projectID: 62912f08e83f76001b218690
      startTime: '2021-08-01T00:00:00.000Z'
      limit: 3
- name: credit_usage
  endpoint:
    path: /credit_usage
    method: POST
    data_selector: result.items
    params:
      projectID: 62912f08e83f76001b218690
      startTime: '2021-08-01T00:00:00.000Z'
      limit: 3
- name: function_usage
  endpoint:
    path: /function_usage
    method: POST
    data_selector: result.items
    params:
      projectID: 62912f08e83f76001b218690
      startTime: '2021-08-01T00:00:00.000Z'
      limit: 3
- name: api_calls
  endpoint:
    path: /api_calls
    method: POST
    data_selector: result.items
    params:
      projectID: 62912f08e83f76001b218690
      startTime: '2021-08-01T00:00:00.000Z'
      limit: 3
- name: kb_documents
  endpoint:
    path: /kb_documents
    method: POST
    data_selector: result.items
    params:
      projectID: 62912f08e83f76001b218690
      startTime: '2021-08-01T00:00:00.000Z'
      limit: 3
- name: integrations
  endpoint:
    path: /integrations
    method: POST
    data_selector: result.items
    params:
      projectID: 62912f08e83f76001b218690
      startTime: '2021-08-01T00:00:00.000Z'
      limit: 3
- name: query_usage
  endpoint:
    path: /query/usage
    method: POST
    data_selector: data
    params:
      limit: 100
- name: transcript_properties
  endpoint:
    path: /v1/transcript-property/project/{projectID}
    method: GET
    data_selector: ''
- name: transcript_property
  endpoint:
    path: /transcript-property/project/projectID
    method: GET
- name: transcript_property
  endpoint:
    path: /v1/transcript-property/{propertyID}
    method: GET
- name: transcript_property
  endpoint:
    path: /v1/transcript-property/propertyID
    method: GET
    data_selector: property
- name: get_all_project_transcript_properties
  endpoint:
    path: /reference/transcriptpropertypubliccontroller_searchbyprojectid
    method: POST
- name: update_transcript_property
  endpoint:
    path: /reference/transcriptpropertypubliccontroller_update
    method: PATCH
- name: transcript_property
  endpoint:
    path: /v1/transcript-property/{propertyID}
    method: PATCH
- name: create_transcript_property
  endpoint:
    path: /v1/transcript-property
    method: POST
- name: transcript_property_value
  endpoint:
    path: /v1/transcript-property-value
    method: POST
- name: transcript_property_value
  endpoint:
    path: /v1/transcript-property-value
    method: POST
    data_selector: propertyValue
- name: Delete a Transcript Property Value
  endpoint:
    path: /v1/transcript-property-value/transcript/{transcriptID}/property/{propertyID}
    method: DELETE
- name: transcript_property_value
  endpoint:
    path: /v1/transcript-property-value/transcript/{transcriptID}
    method: GET
    data_selector: response
    params: {}
- name: transcript_property_value
  endpoint:
    path: /v1/transcript-property-value/transcript/transcriptID
    method: GET
- name: transcript_evaluation
  endpoint:
    path: /v1/transcript-evaluation
    method: POST
- name: transcript_evaluation
  endpoint:
    path: /transcript-evaluation
    method: POST
    data_selector: evaluation
- name: Transcript Evaluation
  endpoint:
    path: /transcriptevaluationpubliccontroller_create
    method: POST
- name: transcript_evaluation
  endpoint:
    path: /v1/transcript-evaluation/{evaluationID}
    method: PATCH
    data_selector: object
    params: {}
- name: transcript_evaluation
  endpoint:
    path: /v1/transcript-evaluation/{evaluationID}
    method: GET
- name: project_evaluations
  endpoint:
    path: /v1/transcript-evaluation/project/{projectID}
    method: GET
    data_selector: evaluations
- name: queue_transcript_evaluations
  endpoint:
    path: /v1/transcript-evaluation/queue
    method: POST
    data_selector: ''
    params: {}
- name: queue_transcript_evaluation
  endpoint:
    path: /queue
    method: POST
- name: get_all_project_evaluations
  endpoint:
    path: /searchbyprojectid
    method: GET
- name: run_evaluation_for_transcript
  endpoint:
    path: /runevaluation
    method: POST
- name: Run an Evaluation for a Transcript
  endpoint:
    path: /v1/transcript-evaluation/{evaluationID}/transcript/{transcriptID}
    method: POST
- name: transcript_evaluation
  endpoint:
    path: /v1/transcript-evaluation/estimate
    method: POST
    data_selector: ''
- name: transcript_evaluation
  endpoint:
    path: /v1/transcript-evaluation/estimate
    method: POST
    data_selector: totalCost
    params: {}
- name: runtime.call.start
  endpoint:
    path: /runtime/call/start
    method: POST
    data_selector: data
- name: runtime.call.end
  endpoint:
    path: /runtime/call/end
    method: POST
    data_selector: data
- name: call_events
  endpoint:
    path: /reference/call-events
    method: POST
    data_selector: data
- name: system_info
  endpoint:
    path: /system/info
    method: GET
    data_selector: object
- name: health_check
  endpoint:
    path: /health
    method: GET
- name: project
  endpoint:
    path: /fetchproject
    method: GET
    data_selector: records
    params: {}
- name: transcript
  endpoint:
    path: /transcript
    method: GET
    data_selector: records
    params: {}
- name: execute_test_suite
  endpoint:
    path: /api/v1/tests/execute
    method: POST
- name: test_execution_status
  endpoint:
    path: /tests/status/{id}
    method: GET
    data_selector: object
    params:
      id: string
- name: test_execution_status
  endpoint:
    path: /status/id
    method: GET
- name: upload_document
  endpoint:
    path: /v1/knowledge-base/docs/upload
    method: POST
    data_selector: response
    params: {}
- name: upload_document_url
  endpoint:
    path: /knowledge-base/docs/upload
    method: POST
- name: upload_document_url
  endpoint:
    path: /v1/knowledge-base/docs/upload/url
    method: POST
    data_selector: data
- name: upload_document
  endpoint:
    path: /upload/url
    method: POST
- name: delete_document
  endpoint:
    path: /delete/{documentID}
    method: DELETE
- name: Delete Document
  endpoint:
    path: /knowledge-base/docs/{documentID}
    method: DELETE
- name: document_chunk_retrieval
  endpoint:
    path: /v1/knowledge-base/docs/{documentID}
    method: GET
    data_selector: chunks
- name: document
  endpoint:
    path: /documentID
    method: GET
- name: document_list
  endpoint:
    path: ''
    method: GET
- name: delete_document
  endpoint:
    path: /documentID
    method: DELETE
- name: upload_document_url
  endpoint:
    path: /upload-url
    method: POST
- name: upload_document_file
  endpoint:
    path: /upload
    method: POST
- name: document_list
  endpoint:
    path: /v1/knowledge-base/docs
    method: GET
    params:
      page: 1
      limit: 10
- name: document_list
  endpoint:
    path: /docs
    method: GET
    data_selector: data
    params:
      page: 1
      limit: 10
- name: document_chunk_retrieval
  endpoint:
    path: /docs/{documentID}
    method: GET
    data_selector: data
- name: delete_document
  endpoint:
    path: /docs/{documentID}
    method: DELETE
- name: upload_document_url
  endpoint:
    path: /docs/upload-url
    method: POST
- name: upload_document_file
  endpoint:
    path: /docs/upload
    method: POST
- name: replace_document
  endpoint:
    path: /v1/knowledge-base/docs/{documentID}/upload
    method: PUT
    params:
      maxChunkSize: 1000
- name: Document List
  endpoint:
    path: /get_v1-knowledge-base-docs
    method: GET
    data_selector: data
- name: Replace Document (URL)
  endpoint:
    path: /put_v1-knowledge-base-docs-documentid-upload-url
    method: PUT
- name: Replace Document (File)
  endpoint:
    path: /put_v1-knowledge-base-docs-documentid-upload-1
    method: PUT
- name: Replace Document (URL)
  endpoint:
    path: /v1/knowledge-base/docs/{documentID}/upload/url
    method: PUT
- name: document
  endpoint:
    path: /v1/knowledge-base/docs/documentID/upload/url
    method: PUT
    data_selector: data
    params:
      maxChunkSize: '1000'
- name: upload_document_non_url
  endpoint:
    path: /v1/knowledge-base/docs/upload
    method: POST
    data_selector: file
    params:
      overwrite: boolean
      maxChunkSize: integer
      markdownConversion: boolean
      llmGeneratedQ: boolean
      llmPrependContext: boolean
      llmBasedChunks: boolean
      llmContentSummarization: boolean
- name: document
  endpoint:
    path: /upload
    method: POST
- name: Update Document Metadata
  endpoint:
    path: /v1/knowledge-base/docs/{documentID}
    method: PATCH
- name: document
  endpoint:
    path: /v1/knowledge-base/docs/documentID
    method: PATCH
    data_selector: data
    params: {}
- name: delete_document
  endpoint:
    path: /v1/knowledge-base/docs/{documentID}
    method: DELETE
- name: document_chunk_retrieval
  endpoint:
    path: /v1/knowledge-base/docs/{documentID}
    method: GET
- name: document
  endpoint:
    path: /documentID
    method: GET
    data_selector: data
    params: {}
- name: document_chunks
  endpoint:
    path: /documentID/chunks
    method: GET
    data_selector: chunks
    params: {}
- name: update_chunk_metadata
  endpoint:
    path: /v1/knowledge-base/docs/{documentID}/chunk/{chunkID}
    method: PATCH
    data_selector: data
- name: upload_document_non_url
  endpoint:
    path: /v1/knowledge-base/docs/upload
    method: POST
    params: {}
- name: upload_document
  endpoint:
    path: /upload
    method: POST
- name: document_list
  endpoint:
    path: /docs
    method: GET
- name: delete_document
  endpoint:
    path: /docs/documentid
    method: DELETE
- name: Update Document Metadata
  endpoint:
    path: /v1/knowledge-base/docs/{documentID}
    method: PATCH
- name: document
  endpoint:
    path: /v1/knowledge-base/docs/documentID
    method: PATCH
- name: Delete Document
  endpoint:
    path: /v1/knowledge-base/docs/{documentID}
    method: DELETE
- name: document_chunk_retrieval
  endpoint:
    path: /v1/knowledge-base/docs/{documentID}
    method: GET
    data_selector: chunks
- name: document
  endpoint:
    path: /documentID
    method: GET
    data_selector: data
    params: {}
- name: document_list
  endpoint:
    path: ''
    method: GET
    data_selector: data
    params: {}
- name: document_list
  endpoint:
    path: /v1/knowledge-base/docs
    method: GET
    data_selector: documents
    params:
      page: 1
      limit: 10
- name: document_list
  endpoint:
    path: /docs
    method: GET
    data_selector: data
- name: document_chunk_retrieval
  endpoint:
    path: /docs/{documentID}
    method: GET
    data_selector: data
- name: upload_document
  endpoint:
    path: /docs/upload
    method: POST
    data_selector: data
- name: replace_document
  endpoint:
    path: /docs/{documentID}/upload
    method: PUT
    data_selector: data
- name: delete_document
  endpoint:
    path: /docs/{documentID}
    method: DELETE
    data_selector: data
- name: Replace Document (non-url)
  endpoint:
    path: /v1/knowledge-base/docs/{documentID}/upload
    method: PUT
- name: document_list
  endpoint:
    path: /knowledge-base/docs
    method: GET
- name: upload_document
  endpoint:
    path: /knowledge-base/docs/documentID/upload
    method: PUT
    params:
      maxChunkSize: 1000
- name: update_chunk_metadata
  endpoint:
    path: /v1/knowledge-base/docs/{documentID}/chunk/{chunkID}
    method: PATCH
- name: document
  endpoint:
    path: /knowledge-base/docs
    method: GET
    data_selector: data
    params: {}
- name: document_list
  endpoint:
    path: /v1/knowledge-base/docs
    method: GET
    data_selector: documents
    params:
      incremental: updated_at
- name: knowledge_base_documents
  endpoint:
    path: /knowledge-base/docs
    method: GET
    data_selector: data
    params:
      page: 1
      limit: 10
- name: Replace Document (non-url)
  endpoint:
    path: /v1/knowledge-base/docs/{documentID}/upload
    method: PUT
- name: Document List
  endpoint:
    path: /reference/get_v1-knowledge-base-docs
    method: GET
- name: Document Chunk Retrieval
  endpoint:
    path: /reference/get_v1-knowledge-base-docs-documentid
    method: GET
- name: Delete Document
  endpoint:
    path: /reference/delete_v1-knowledge-base-docs-documentid
    method: DELETE
- name: Upload Document (non-url)
  endpoint:
    path: /reference/post_v1-knowledge-base-docs-upload
    method: POST
- name: Update Document Metadata
  endpoint:
    path: /reference/patch_v1-knowledge-base-docs-documentid
    method: PATCH
- name: Replace Document (URL)
  endpoint:
    path: /reference/put_v1-knowledge-base-docs-documentid-upload-url
    method: PUT
- name: interact
  endpoint:
    path: /state/user/{userID}/interact
    method: POST
- name: interact
  endpoint:
    path: /state/user/userID/interact
    method: POST
    data_selector: response.traces
- name: dialog_state
  endpoint:
    path: /state
    method: GET
    data_selector: stack
- name: query
  endpoint:
    path: /knowledge-base/query
    method: POST
- name: query
  endpoint:
    path: /knowledge-base/query
    method: POST
    data_selector: output
    params:
      chunkLimit: 2
      synthesis: true
- name: upload_document_url
  endpoint:
    path: /v1/knowledge-base/docs/upload
    method: POST
    data_selector: data
- name: document
  endpoint:
    path: /v1/knowledge-base/docs/upload
    method: POST
    data_selector: data
    params:
      maxChunkSize: 1000
- name: fetch_project_transcripts
  endpoint:
    path: /v2/transcripts/{projectID}
    method: GET
    data_selector: transcripts
    params:
      tag: string
      range: string
      startDate: string
      endDate: string
- name: transcripts
  endpoint:
    path: /transcripts/projectID
    method: GET
    data_selector: records
- name: project_transcripts
  endpoint:
    path: /v1/transcript/project/{projectID}
    method: POST
    params:
      take: 25
      skip: 0
      order: DESC
- name: transcripts
  endpoint:
    path: /v1/transcript/project/projectID
    method: POST
    params:
      take: 25
      skip: 0
      order: DESC
- name: fetch_project
  endpoint:
    path: /versions/{versionID}/export
    method: GET
    params:
      prototype: boolean
- name: transcript
  endpoint:
    path: /transcripts
    method: GET
- name: query_usage
  endpoint:
    path: /v1/query/usage
    method: POST
- name: query_usage
  endpoint:
    path: /query/usage
    method: POST
    data_selector: result
    params: {}
- name: transcript_property
  endpoint:
    path: /v1/transcript-property/project/{projectID}
    method: GET
- name: transcript_property
  endpoint:
    path: /transcript-property/project/projectID
    method: GET
    data_selector: properties
- name: transcript_evaluation
  endpoint:
    path: /v1/transcript-evaluation
    method: POST
    data_selector: evaluation
- name: system_info
  endpoint:
    path: /api/v1/system/info
    method: GET
- name: project
  endpoint:
    path: /fetchproject
    method: GET
    data_selector: records
    params: {}
- name: transcript
  endpoint:
    path: /transcripts
    method: GET
    data_selector: records
    params: {}
- name: upload_document
  endpoint:
    path: /v1/knowledge-base/docs/upload
    method: POST
- name: upload_document_url
  endpoint:
    path: /knowledge-base/docs/upload
    method: POST
- name: get_test_execution_status
  endpoint:
    path: /api-v1/tests/status/{id}
    method: GET
- name: upload_document_non_url
  endpoint:
    path: /v1/knowledge-base/docs/upload
    method: POST
    data_selector: ''
- name: document
  endpoint:
    path: /v1/knowledge-base/docs/upload
    method: POST
- name: upload_document_non_url
  endpoint:
    path: /v1/knowledge-base/docs/upload
    method: POST
- name: document
  endpoint:
    path: /upload
    method: POST
- name: document_list
  endpoint:
    path: /v1/knowledge-base/docs
    method: GET
    data_selector: documents
    params:
      incremental: updated_at
- name: knowledge_base_documents
  endpoint:
    path: /knowledge-base/docs
    method: GET
    data_selector: data
    params:
      page: 1
      limit: 10
notes:
- 'Compatibility: This new streaming endpoint complements the existing interact endpoint
  and is designed to enhance real-time communication scenarios.'
- 'Deterministic and Streamed Messages: When using completion_events, you may receive
  a mix of streamed and fully completed messages.'
- Ensure to handle rate limits while accessing the APIs.
- Uses OAuth2 with refresh token — requires setup of connected app in Voiceflow
- The fastest way to build advanced AI Agents that talk to customers like a human.
- Voiceflow is a collaborative low-code platform for building and deploying customer-facing
  AI agents.
- Uses OAuth2 with refresh token — requires setup of connected app in api
- Testing from any block allows for flexibility in testing.
- Some objects like Contact may return nulls in deeply nested fields
- Currently, the best way to support multiple languages is to build out multiple flows
  for different languages within an agent, or create multiple copies of the same agent
  in different languages and then host a different version on different languages
  of your website. Improving multilingual support in agents is on our road map.
- Good prompting helps your agent understand what information to prioritize, when
  to use the knowledge base, and how to respond to user queries in a consistent manner.
- For best results, use the available Anthropic models (Claude 4, Claude 3.7 Sonnet,
  Claude 4 Opus, etc). OpenAI and other lower end LLM models reportedly face issues
  rendering and executing agent-generated components.
- These components will only be generated if you explicitly instruct the agent to
  use them in the prompt.
- The Message step outputs a pre-written message to the user.
- Messages can be static, dynamic, or reused across your agent for consistency.
- Both the Card and Carousel steps are only available on chat assistants.
- The Button Step allows users to present clickable options.
- Multiple buttons can be added, each creating a port for conversation flow.
- Choice Step allows defining user intents and routing conversations accordingly.
- 'Be Clear with Prompts: Ensure that your initial prompt clearly states what information
  you''re requesting.'
- 'Write Effective Rules: Use natural language to define rules that cover all entities
  in the collection.'
- 'Consider User Privacy: Always provide options for users to opt out of providing
  certain information.'
- 'Test Your Configuration: Use Voiceflow''s testing tools to simulate conversations
  and ensure that your Capture Step behaves as expected.'
- 'Monitor and Iterate: Collect user data (in compliance with privacy laws) to understand
  how users interact with your agent and adjust your design accordingly.'
- Conditions require an exact match, including case-sensitivity.
- Consider using a function instead of an API step for reusable use cases.
- JavaScript steps cannot be used to make requests to external servers
- JavaScript steps do not currently support importing modules
- JavaScript steps cannot be used to create new variables
- Default chunk limit is set to 3, but can be adjusted from 1 to 10.
- The agent still requires a phone number while call forwarding allows the agent to
  transfer a call to any phone number.
- Triggers are accessible from any workflow within the project when enabled.
- Define rules that are essential for your application's logic.
- Be cautious not to overcomplicate validation unless necessary.
- Anticipate situations where users may not provide required information.
- Simulate various conversation paths to ensure triggers, entities, rules, and exit
  scenarios function as intended.
- Be mindful of the Available from workflows setting to control where triggers are
  active.
- Use global scope for widely applicable triggers and local scope for specific ones.
- By default, it stores the last 25 turns of the conversation.
- Storing more conversation turns in memory allows the agent to remember more context
  from previous messages, enabling it to respond more accurately to past discussions.
- 'However, this comes with trade-offs: LLM actions may take slightly longer to process
  due to the additional memory load, and token usage will increase.'
- The total memory length is 12,500 characters with the default setting of 25 turns.
- Ensure to handle rate limiting as per API guidelines.
- Interacting with LLMs involves an iterative process of crafting and refining prompts.
- Some objects may return nulls in deeply nested fields
- Ensure that the event name used in window.voiceflow.chat.interact() matches exactly
  with the event name defined in your Event CMS and associated with a Trigger step.
- Enable LLM Intent Classification within your project's settings.
- Requires setup of connected app in Voiceflow
- Entities are key pieces of information extracted from user input.
- Automatic Reprompts enhance user experience by addressing input issues.
- 'Understand your domain: Create entities that capture the essential information
  relevant to your application''s domain.'
- 'Define clear purposes: Each entity should have a clear purpose, like ''flight_date''
  for capturing dates related to flights.'
- 'Granularity matters: Design entities to be as granular as needed for your application.
  For example, ''departure_city'' and ''arrival_city'' are better than a single ''city''
  entity.'
- 'Consider synonyms and variations: Include common synonyms and variations, like
  ''beverage,'' ''drink,'' ''soda,'' and ''pop.'''
- 'Regularly expand entities: As you gather more data from user interactions, expand
  your entities to include new phrases and terms.'
- 'Avoid overlapping entities: Ensure entities are distinct and don’t capture information
  that could be better suited to another entity.'
- Certain JavaScript methods, such as `setTimeout()`, are not supported out-of-the-box
  due to their dependence on browser or Node.js runtime APIs.
- Certain JavaScript methods, such as `setTimeout()`, are not supported out-of-the-box.
- Function steps can be coded to exit through specific paths based on user input,
  using listen functionality.
- 'Event Availability: If you generate a component (e.g., a carousel with buttons),
  the events associated with those buttons remain available throughout the conversation.'
- 'Delayed Interaction: Users can interact with those buttons at any point during
  the session, and the agent will respond accordingly, even if the conversation has
  moved on from the point where the function was executed.'
- 'Important Note: You must explicitly set listen: false in the next command to enable
  this behaviour. Omitting listen or setting it to true will cause the function to
  fail.'
- Use Restricted Visibility for Highly Sensitive Data
- Regularly Update Secrets
- Leverage Environment Overrides
- Avoid Hardcoding Sensitive Data
- Secure Sharing and Collaboration
- To use the Airtable integration, you'll need to OAuth into Airtable from the Voiceflow
  Creator.
- To use the Gmail integration, you'll need to OAuth into Gmail from the Voiceflow
  Creator.
- The Send email action requires several key arguments like To, Subject, and Body.
- Ensure you provide an LLM description for the tool so the agent understands when
  to use it.
- Voiceflow doesn't currently have any triggers available on Zapier.
- The Knowledge Base uses a vector database for document queries.
- Supports adding metadata which is propagated to relevant chunks extracted from uploaded
  data.
- By default, the delay for No Reply is 10 seconds, but you can change this by clicking
  on the number in the global settings.
- 'Fallback and non-outage errors: LLM fallback only triggers if an LLM fails for
  an outage-related reason.'
- Fallbacks cascade, meaning if a fallback model is also suffering an outage, the
  system will fallback again.
- The fallback process will terminate if it detects that it is revisiting previously
  visited fallback models.
- To use web chat widget, voice integration, or API with your agent, you must have
  published at least one production version of your agent.
- If you'd like to change any of the widget's settings after releasing your agent
  - for example, modifying its colours, fonts, and icons - you'll need to publish
  a new version of your agent to production for the changes to take effect.
- This feature is only available to Enterprise customers.
- 'Voiceflow supports three persistence options: ''localStorage'', ''sessionStorage'',
  and ''memory''.'
- Custom variables can be passed on web chat load like userID, email, and more.
- Programmatically show, hide, and interact with the web chat widget.
- You should only allow dangerous HTML elements if you understand the implications.
- Enabling dangerous HTML elements enables cross-site scripting vulnerabilities (XSS).
- The legacy webchat will be deprecated on June 15th, 2025.
- Proactive messages are temporarily unavailable in the new webchat version.
- 'Known Issue: when you refresh the page, if autostart:false the session will be
  still active.'
- Comply with your local regulations regarding automated calls
- Voiceflow's interruption behaviour settings can be found by visiting Agent Settings
  > Behaviour > Voice.
- You are solely responsible for complying with applicable laws related to call recording
  and consent in your region.
- Adjust parameters like silence timeouts, audio cues, and STT/TTS settings for better
  caller experience.
- Choosing the right Speech-to-Text (STT) model is important for the clarity of your
  agent and how well it understands the user.
- You may want to experiment different providers and their models for your particular
  use case and see what works best for you.
- Advanced custom actions are in experimental beta and subject to change or removal.
- Use DTMF menus judiciously to avoid overloading callers with too many options. Limit
  menus to 3-5 clearly differentiated choices.
- When capturing data like PINs, use a Message step to confirm the caller's input
  before proceeding.
- Be mindful of the caller's experience when transferring calls - provide estimated
  wait times or option to continue talking to AI agent.
- Test your STT settings changes with a diverse set of voices and accents to ensure
  they improve recognition accuracy for your target audience.
- Ensure that the Routing region is US.
- Check if your Twilio account is suspended due to lack of funds.
- To obtain the API Key, access the Primary key found in the API keys section of the
  project settings.
- The new Analytics Dashboard service only has data starting from February 9th, 2025.
- Ensure audio recordings are toggled on to retrieve audio files for a conversation's
  transcript.
- Evaluations consume credits.
- 'Evaluations can return three types of metrics: Binary, Text, Rating.'
- You can invite users directly by inputting their email address or by copying an
  invitation link.
- Magic links are valid for 72 hours.
- Basic Auth is recommended to be disabled once SSO is enabled.
- Voiceflow offers a flexible and transparent billing system designed to accommodate
  teams of all sizes.
- Voiceflow uses credits to bill for Agent hosting and AI services.
- Credits are shared between all agents in a workspace, and each plan includes a specific
  number of credits.
- Requires setup of Voiceflow CLI for API key access
- Every suite is executed in the same Voiceflow user's session.
- Ensure to use the correct OAuth scopes for authentication
- Rate limits may apply based on usage
- OpenAI config is still used for goal evaluation
- OpenAI API key and Voiceflow agent API key are required for testing.
- User information must be pre-configured in Voiceflow agents for Voiceflow agent
  testing.
- OpenAI-powered agent tests require OpenAI API access for the AI agent functionality.
- Ensure sufficient API quota for test execution.
- 'Be Specific: Instead of ''get help'', use ''resolve login issue and access account'''
- 'Include Context: Mention why the goal is important to the user'
- 'Make it Measurable: Define what ''success'' looks like'
- 'Add Emotion: Include emotional state (frustrated, confused, urgent)'
- 'Technical Level: Specify technical expertise level'
- 'Background Context: Provide relevant situational details'
- 'Essential Data: Include information your agent typically needs'
- 'Realistic Values: Use believable names, addresses, and IDs'
- 'Complete Coverage: Provide all data types your agent might request'
- 'Start Conservative: Begin with fewer steps and increase if needed'
- 'Monitor Logs: Check test logs to see actual step usage'
- 'Buffer for Edge Cases: Add 20-30% buffer for unexpected paths'
- The replay command allows you to replay previously recorded conversations with your
  Voiceflow project.
- Knowledge Base is a repository and management system for content that your AI Agent
  uses to provide accurate and contextually relevant responses.
- The voiceflow-cli can query the knowledge base.
- File must be accessible locally
- CORS is enabled by default.
- CORS is enabled by default. You can disable it using --cors=false if not needed.
- 'Optional: use custom subdomain'
- Monitoring all executions is necessary to check the status
- API Key is required for authentication
- Open API Key is optional
- 'Voiceflow Base URL is optional. Default: empty'
- Outputs voiceflow's JSON schema
- Server includes auto-generated OpenAPI/Swagger documentation available at /swagger/index.html
- This platform has been built on top of the Voiceflow CLI running in server mode
  using the public instance
- Tests are submitted to the Voiceflow Dialog Manager API
- Real-time status updates during test execution
- Scheduled Tests enable automated, recurring execution of your Test Suites at predefined
  times.
- Respect Voiceflow API rate limits
- Monitor Voiceflow token usage to avoid quota exhaustion
- Plan execution timing to optimize resources
- Data can be exported as a CSV Export so you can download statistics for external
  analysis
- Email Notifications keep you informed about your test results and platform activity
  without requiring constant monitoring.
- All requests to the Knowledge Base APIs must be authenticated using a Dialog Manager
  API Key.
- Traces represent every output from Voiceflow.
- Your 'primary key' is your Project's API key.
- Keep the api_key secret.
- Keep the API key secret.
- Keep your API key a secret.
- The API key should be kept secret.
- Transcripts aren't automatically saved; a create transcript request is needed after
  each interaction.
- Agent API key is required to access the APIs related to your project.
- '''development'' for testing and development purposes'
- '''production'' for live apps and production deployments'
- A couple of APIs might still need the exact version ID instead of an alias like
  in the versions API.
- Project IDs are only required for certain APIs
- In general, you'll only need to use the API key, and your applications can have
  a local variable storing the project ID for when it's needed
- Multiple conversation sessions can run simultaneously, identified by userID.
- userID should be unique and non-sensitive.
- Uses OAuth2 for authentication
- An Authorization header is required to validate the request.
- Only the Response AI / Prompt step produces completion events
- The programID of the first flow in the stack is always the versionID of the Agent.
- Limit is one url per call
- Limit one per call.
- We don't recommend building new tooling with this API endpoint as it's for the old
  transcripts system.
- Voiceflow released a new transcript system on July 28th, 2025.
- The ID of the conversation session to record as a transcript should be the same
  value as the userID property of the Dialog API.
- Try It! to start a request and see the response
- I'm in beta! • Powered by Voiceflow
- To reliably use the .vfr file's programs property, select the 'Publish' or 'Run'
  button after updates.
- This version of the Analytics API is now in legacy status.
- Updated about 1 month ago
- Path Params projectID is required
- Path Params evaluationID and transcriptID are required.
- Webhooks allow you to receive real-time event notifications when calls start and
  end in Voiceflow.
- Get information about the API server system
- Requires OAuth2 setup for authentication
- Supports uploading documents of types 'pdf', 'text', 'docx' via multipart/form-data.
- Deletes a specific Knowledge Base document by documentID.
- Retrieves the chunks for a Knowledge Base doc by documentID.
- Supports replacing documents of types "pdf", "text", "docx" via multipart/form-data.
- Limit is one file per call.
- Bad request - Table documents are not supported for whole document metadata update
- Successful response with no content.
- Updated 13 days ago
- Using the APIs
- Knowledge Base APIs
- Optional pagination parameters include page and limit.
- Sends a request to advance the conversation session with your Voiceflow project.
- Controls the number of chunks used to synthesize the response. More chunks can increase
  accuracy and token consumption.
- Limit is one url per call.
- Uploads a document to the Knowledge Base (excluding type 'url'). Limit is one file
  per call.
errors:
- 'REQUEST_LIMIT_EXCEEDED: Throttle API calls or reduce frequency'
- 'QUERY_TIMEOUT: Break down filters or add selectivity'
- '401 Unauthorized: Recheck OAuth scopes or token expiration'
- 'TypeError when testing the JavaScript step: Check if variable exists before use'
- '401 Unauthorized: Check if the token is valid and not expired.'
- '400 Bad Request: Check your prompt structure and parameters.'
- '401 Unauthorized: Verify your authentication credentials.'
- '400 Bad Request: Ensure the payload structure is correct.'
- 'INVALID_ENTITY: Ensure the entity meets the specified rules.'
- 'REQUEST_TIMEOUT: Try again later or check network connection.'
- '500 Internal Server Error: Twilio number may not have outbound permissions for
  the region being called'
- Check that your PIN validation code is executing quickly and not hanging the conversation
- Use a Message step to confirm the caller's PIN was received before processing it
- Investigate transcript logs and test your PIN flow to debug any issues.
- 'integration authorization error: Double check that you''ve entered your Twilio
  credentials correctly.'
- '401 Unauthorized: Check your OAuth token'
- '403 Forbidden: Verify your permissions'
- '500 Internal Server Error: Try again later'
- 'Authentication errors: Verify API key configuration'
- '404 Not Found: Ensure you''re using the correct base path /api/v1/ for API endpoints'
- 'Connection Refused Errors: Verify the server is bound to the correct interface'
- '401 Unauthorized: Recheck API key or permissions'
- '401 Unauthorized: Check API Key'
- 'Error interacting with Voiceflow: Check your API key and request format.'
- 'Error interacting with Voiceflow: Check API key and request format.'
- '401 Unauthorized: Check API key'
- '400 Bad Request: Voiceflow project was not published to production'
- '400 Bad Request: Cannot resolve project version'
- '400 Bad Request: Cannot resolve version alias'
- '400 Bad Request: Request is missing a versionID'
- '401 Auth Key Required: HTTP request is missing a Dialog Manager API key in the
  Authorization header'
- '404 Model not found: Ensure project is properly rendered'
- '400: Bad Request.'
- '401: Unauthorized. HTTP request is missing a Dialog Manager API key in the `Authorization`
  header or the key is invalid.'
- '404: Not Found.'
- '429: Too Many Requests.'
- 200 - Successfully updated
- '401 Unauthorized: Either project does not exists or is not public.'
- 400 Bad Request - The request was invalid. This can occur due to various reasons
  such as poorly formatted request body, missing required fields, invalid data types
  in searchable fields, or metadata field size exceeding the limit.
- 403 Forbidden - The request was understood, but it has been refused or access is
  not allowed. This can occur if the number of rows in the uploaded table exceeds
  the limit for your current plan.
- 422 Unprocessable Entity - The request was well-formed but was unable to be followed
  due to semantic errors. This can occur if the metadata format is invalid.
- '401: The provided authentication token does not have permissions for some of the
  requested resources'
- '429: No evaluations could be queued because the limit has been exceeded for this
  project. Retry after waiting for the time indicated in the response.'
- 200 OK
- '400 Bad Request: Invalid request data'
- 500 Internal Server Error
- 200 Successful response with no content.
- '400: Bad request - Table documents are not supported for whole document metadata
  update'
- '400: Voiceflow project was not published to production'
- '401: Auth Key Required'
- '404: Model not found'
auth_info:
  mentioned_objects:
  - OauthToken
  - AuthProvider
  - NamedCredential
client:
  base_url: https://api.voiceflow.com
  auth:
    type: oauth2
    flow: refresh_token
source_metadata: null
