resources:
- name: device_management
  endpoint:
    path: /devices
    method: GET
    data_selector: devices
- name: user_management
  endpoint:
    path: /users
    method: GET
    data_selector: users
- name: product
  endpoint:
    path: /products
    method: POST
    data_selector: records
- name: temperature_readings
  endpoint:
    path: /path/to/temperature_readings
    method: GET
    data_selector: readings
    params: {}
- name: humidity_readings
  endpoint:
    path: /path/to/humidity_readings
    method: GET
    data_selector: readings
    params: {}
- name: sensor_readings
  endpoint:
    path: /data/sensor_readings
    method: GET
    data_selector: sensor_data
- name: heat_pump
  endpoint:
    path: /api/v1/heat_pumps
    method: POST
    data_selector: data
    params: {}
- name: lamp
  endpoint:
    path: /iot/smart-lighting/lamp
    method: GET
    data_selector: devices
    params: {}
- name: lamp_control
  endpoint:
    path: /control/lamp
    method: POST
    data_selector: response
    params: {}
- name: device_management
  endpoint:
    path: /management/device
    method: GET
    data_selector: devices
    params: {}
- name: security_robot
  endpoint:
    path: /api/security_robot
    method: POST
    data_selector: data
    params: {}
- name: device
  endpoint:
    path: /api/devices
    method: GET
    data_selector: devices
    params: {}
- name: text_sensor
  endpoint:
    path: /path/to/text_sensor
    method: GET
    data_selector: records
    params: {}
- name: product
  endpoint:
    path: /products
    method: POST
    data_selector: product
    params: {}
- name: firmware
  endpoint:
    path: /firmware
    method: POST
    data_selector: firmware
    params: {}
- name: ip_address
  endpoint:
    path: /wifi_info/ip_address
    method: GET
    data_selector: ip_address
    params: {}
- name: ssid
  endpoint:
    path: /wifi_info/ssid
    method: GET
    data_selector: ssid
    params: {}
- name: bssid
  endpoint:
    path: /wifi_info/bssid
    method: GET
    data_selector: bssid
    params: {}
- name: mac_address
  endpoint:
    path: /wifi_info/mac_address
    method: GET
    data_selector: mac_address
    params: {}
- name: firmware_installation
  endpoint:
    path: /install_firmware
    method: POST
    data_selector: logs
    params: {}
- name: sensor_data
  endpoint:
    path: /api/sensors
    method: GET
    data_selector: sensors
    params: {}
- name: device_logs
  endpoint:
    path: /api/v1/device/logs
    method: GET
    data_selector: logs
- name: device
  endpoint:
    path: /devices
    method: GET
    data_selector: devices
- name: firmware
  endpoint:
    path: /firmware
    method: POST
    data_selector: firmware
- name: ESPHome
  endpoint:
    path: /api/esp_home
    method: POST
    data_selector: firmware
    params: {}
- name: ESP Web Tools
  endpoint:
    path: /api/esp_web_tools
    method: POST
    data_selector: logs
    params: {}
- name: Business Platform
  endpoint:
    path: /api/business_platform
    method: POST
    data_selector: firmware_installation
    params: {}
- name: iot_device
  endpoint:
    path: /api/v1/iot_devices
    method: GET
    data_selector: devices
- name: white_label_solution
  endpoint:
    path: /services/data/v1.0/white_label_solution
    method: GET
    data_selector: records
- name: encrypted_flash
  endpoint:
    path: /encrypted_flash
    method: GET
    data_selector: data
    params: {}
- name: secure_boot
  endpoint:
    path: /secure_boot
    method: GET
    data_selector: data
    params: {}
- name: product
  endpoint:
    path: /products
    method: GET
- name: device
  endpoint:
    path: /devices
    method: GET
- name: firmware
  endpoint:
    path: /firmware
    method: POST
- name: blinker
  endpoint:
    path: /products
    method: POST
    data_selector: data
    params: {}
- name: Modbus Bridge
  endpoint:
    path: /modbus/bridge
    method: POST
    data_selector: data
    params: {}
- name: MQTT Adapter
  endpoint:
    path: /mqtt/adapter
    method: POST
    data_selector: data
    params: {}
- name: switch
  endpoint:
    path: test/switch/gpio2/state
    method: GET
    data_selector: records
- name: device
  endpoint:
    path: /devices
    method: GET
    data_selector: devices
- name: notifications
  endpoint:
    path: /notifications/create
    method: POST
    data_selector: message
    params: {}
- name: temperature_humidity_sensor
  endpoint:
    path: /projects/temperature_humidity_sensor
    method: GET
    data_selector: configurations
    params: {}
- name: led_strip_controller
  endpoint:
    path: /projects/led_strip_controller
    method: GET
    data_selector: configurations
    params: {}
- name: alarm_device
  endpoint:
    path: /projects/alarm_device
    method: GET
    data_selector: configurations
    params: {}
- name: IoT device management
  endpoint:
    path: /services/data/v1/sobjects/IoTDeviceManagement
    method: GET
    data_selector: records
- name: telemetry data collection
  endpoint:
    path: /services/data/v1/sobjects/TelemetryDataCollection
    method: GET
    data_selector: records
notes:
- Digital twins enable remote monitoring and predictive maintenance.
- Camera publishes the status of two LEDs in the topic 'myhome/dafang'
- Uses self-signed certificates
- mDNS protocol is utilized for device discovery and communication.
- Charging stations implement a service mode for local management.
- You can register the controller as your own product on the platform.
- The device activates its Wi-Fi access point after firmware installation.
- Sensor values are updated in real time in the mobile application emulator.
- Historical data collection checkbox should be checked on the Advanced tab.
- Cookies are used to store user consent for various categories.
- Administrators can log into the mobile or web application using any user account
  connected to the system.
- Generate credentials from the user’s menu to log into the application.
- The admin panel is a web application that dynamically updates the contents of the
  admin pages.
- Developers do not need to create their web admin panel to work on the device.
- VPNs provide encrypted communication channels for IoT devices.
- Regular updates are crucial for maintaining VPN security.
- Unique selling point is the ability to abandon remotes and GSM modules in favor
  of controlling the gate from a smartphone.
- Restrictions set – the user can register no more than 20 physical access tokens
  for family members in the application.
- Uses MQTT protocol for data transmission from sensors to the monitoring platform.
- The 2Smart Cloud free plan allows you to connect up to 20 devices to the platform.
- Uses OAuth2 with refresh token — requires setup of connected app in api
- Uses Grafana for data visualization
- InfluxDB is used for historical data collection
- The platform provides tools for remote collection of telemetry data.
- Minimal modifications required to connect heat pumps to the platform.
- Each device uses unique IDs for authentication that integrate on the hardware level
  in the production stage.
- Slave modules work as a black box and don’t have access to any sensitive information.
- Uses IoT platform for device management and control
- The 2Smart Standalone IoT based automation platform allows expanding its functionality
  with add-ons available in the built-in market.
- Graphs and charts in Grafana allow the customer to control the following data for
  all greenhouse sectors.
- Application lacks support for branding.
- Users cannot control devices remotely from outside their home.
- Uses WebRTC SFU for video and audio broadcasting
- Robot must connect to home Wi-Fi network after pairing
- The platform is gradually evolving from a collection of EV charging infrastructure
  tools into a flexible, scalable ecosystem capable of adapting to diverse markets
  and deployment scenarios.
- The platform can be installed on a local server or cloud server.
- Users can manage the system using the 2Smart Standalone mobile app.
- Offers public cloud servers on a subscription basis
- Provides a web dashboard to manage products and refine mobile applications
- Uses OAuth2 with refresh token — requires setup of connected app in 2Smart Cloud
- Registration on the IoT platform is required to prepare the assembled device for
  operation.
- Devices based on the ESP32 microcontroller support only Wi-Fi networks with a frequency
  range of 2.4 GHz!
- Devices based on the ESP32 microcontroller support only Wi-Fi networks with a frequency
  range of 2.4 GHz.
- 'Ubuntu users need to grant access to the serial ports by adding their user to the
  dialout group using the command: ''sudo usermod -a -G dialout <user>'''
- Important advantage of this firmware installation method is the direct accessibility
  of microcontroller logs from your web browser.
- Windows users will need to install Drivers. The CP210x Universal Windows Driver
  is a suitable choice.
- A significant benefit of this firmware installation method is its provision of direct
  access to microcontroller logs through your web browser.
- The 'Diagnostics' section is unavailable if you used the 2Smart SDK for firmware
  development.
- 2Smart supports connecting devices based on any microcontroller that has internet
  access.
- ESPHome syntax can be used for firmware configuration without programming.
- QR codes improve the user experience in IoT applications by simplifying device onboarding
  and configuration processes.
- The free plan includes five simple applets.
- Integration of Standalone devices into the 2smart Cloud mobile application usually
  takes no more than 20 minutes.
- You must install the 'Standalone to Cloud' bridge to integrate Standalone devices.
- The customer must provide a domain name for the application.
- The customer is responsible for registering necessary accounts.
- At 2Smart, devices always use Wi-Fi pairing via Access Point mode, simplifying the
  setup process.
- We prioritize user convenience by providing informative screens with step-by-step
  instructions before starting the pairing process.
- During the pairing process, our app can automatically connect to the device using
  pre-configured credentials that are standard across all devices in the series.
- We provide users with a QR code containing the Wi-Fi network credentials.
- We focus on usability in various conditions.
- Some objects like Contact may return nulls in deeply nested fields
- Implementing encrypted flash on ESP-IDF brings notable benefits, but also some trade-offs.
- Secure Boot is a critical security measure within ESP-IDF designed to protect the
  device from unauthorized or tampered firmware.
- Access control ensures that devices can only publish to and subscribe from their
  respective topics, preventing unauthorized interception.
- All RES packets are encrypted, ensuring that even if a packet is intercepted, it
  cannot be deciphered without the proper key.
- The mobile app for ESPHome devices connection is also a free feature of 2Smart Cloud.
- An alarm signal doesn’t necessarily mean that someone has entered your home.
- ESP32 microcontroller only supports 2.4GHz networks
- The 2Smart team has experience in independently bringing several IoT solutions to
  market.
- Cookies are used to store user consent for various categories as per GDPR regulations.
- Supports only a limited list of Modbus devices.
- Users need programming skills to write a custom configuration.
- An MQTT topic consists of one or more topic levels, separated by the slash character
  (/). A topic level ID MAY ONLY contain lowercase letters from a to z, numbers from
  0 to 9, and the hyphen character (-).
- Homie convention version 3.0.1 is used.
- The MQTT broker follows the 2Smart convention based on Homie.
- Use this MQTT Explorer feature with care so as not to disable your device!
- 2Smart provides solutions for consumer IoT device manufacturers and enterprises
  that require a professional platform to control and monitor their entire fleet of
  IoT equipment.
- Developing IoT applications from scratch can be expensive for startups.
- The uniqueness of a business model in IoT is a competitive advantage.
- ESPHome requires Wi-Fi network credentials in the device configuration.
- No good mobile application by default for device management.
errors:
- 'REQUEST_LIMIT_EXCEEDED: Throttle API calls or reduce frequency'
- '401 Unauthorized: Recheck OAuth scopes or token expiration'
- 'Invalid password: suggests rechecking the password or verifying network settings.'
auth_info:
  mentioned_objects:
  - digital twin
  - IoT devices
  - ESP32
  - OauthToken
  - AuthProvider
client:
  base_url: https://your-instance.api-name.com
  auth:
    type: oauth2
    flow: refresh_token
    token_url: https://login.api.com/services/oauth2/token
    client_id: '{{ dlt.secrets[''api_client_id''] }}'
    client_secret: '{{ dlt.secrets[''api_client_secret''] }}'
    refresh_token: '{{ dlt.secrets[''api_refresh_token''] }}'
    location: header
    header_name: Authorization
  headers:
    Accept: application/json
    Login: User Login
    Token: Access Token
    Hostname: cloud.2smart.com
    Broker port: '11883'
    Device ID: Test device ID
    Content-Type: application/json
source_metadata: null
