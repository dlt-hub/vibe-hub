resources:
- name: customers
  endpoint:
    path: /reference/getcustomers
    method: GET
    data_selector: customers
    params: {}
- name: banks
  endpoint:
    path: /reference/getbanks
    method: GET
    data_selector: banks
    params: {}
- name: events
  endpoint:
    path: /reference/getevents
    method: GET
    data_selector: events
    params: {}
- name: customers
  endpoint:
    path: /customers/v1/
    method: GET
- name: customer
  endpoint:
    path: /customers/v1/
    method: POST
- name: customer
  endpoint:
    path: /customers/v1/{customer_id}/
    method: GET
- name: customers
  endpoint:
    path: /customers
    method: GET
- name: customer
  endpoint:
    path: /customers/v1/app-user-id/{app_user_id}
    method: GET
- name: customer
  endpoint:
    path: /
    method: POST
- name: banks
  endpoint:
    path: /banks
    method: GET
- name: customer
  endpoint:
    path: /customers/v1/{customer_id}/
    method: GET
- name: events
  endpoint:
    path: /events
    method: GET
- name: customer
  endpoint:
    path: /app-user-id/{app_user_id}
    method: GET
- name: results
  endpoint:
    path: /data/v2/results/{results_id}
    method: GET
- name: banks
  endpoint:
    path: /banks
    method: GET
- name: Payment Destination
  endpoint:
    path: /payments/v1/destinations
    method: POST
- name: events
  endpoint:
    path: /events
    method: GET
    data_selector: records
- name: payment_destinations
  endpoint:
    path: /payments/v1/destinations
    method: GET
    data_selector: records
- name: results
  endpoint:
    path: /results/{results_id}
    method: GET
- name: payment_destinations
  endpoint:
    path: /customers/v1/{customer_id}/destinations
    method: GET
- name: Payment Destination
  endpoint:
    path: /payments/v1/destinations
    method: POST
- name: payment_destination
  endpoint:
    path: /destinations/{payment_destination_id}
    method: GET
    data_selector: details
- name: payment_sources
  endpoint:
    path: /customers/v1/{customer_id}/payment-sources
    method: GET
- name: payment_destinations
  endpoint:
    path: /destinations
    method: GET
- name: payment_source
  endpoint:
    path: /customers/v1/{customer_id}/payment-sources/{payment_source_id}
    method: GET
- name: payment_destinations
  endpoint:
    path: /customers/v1/{customer_id}/destinations
    method: GET
- name: payment_source
  endpoint:
    path: /customers/v1/{customer_id}/payment-sources/{payment_source_id}
    method: DELETE
- name: payment_destination
  endpoint:
    path: /destinations/{payment_destination_id}
    method: GET
- name: payment_intent
  endpoint:
    path: /payments/v1/intents
    method: POST
- name: payment_sources
  endpoint:
    path: /customers/v1/{customer_id}/payment-sources
    method: GET
- name: payment_intents
  endpoint:
    path: /payments/v1/intents
    method: GET
    data_selector: records
- name: payment_source
  endpoint:
    path: /customers/v1/{customer_id}/payment-sources/{payment_source_id}
    method: GET
- name: payment_intent
  endpoint:
    path: /payments/v1/intents/{payment_intent_id}
    method: GET
- name: payment_source
  endpoint:
    path: /customers/v1/{customer_id}/payment-sources/{payment_source_id}
    method: DELETE
- name: payment
  endpoint:
    path: /{payment_id}
    method: GET
- name: payment_intent
  endpoint:
    path: /payments/v1/intents
    method: POST
- name: payment
  endpoint:
    path: /payouts/v1/payment
    method: POST
- name: bulk_payments
  endpoint:
    path: /payouts/v1/bulk-payments
    method: POST
- name: payment_intents
  endpoint:
    path: /payments/v1/intents
    method: GET
    data_selector: records
- name: payouts
  endpoint:
    path: /payouts/v1/payments
    method: GET
- name: payment_intent
  endpoint:
    path: /{payment_intent_id}
    method: GET
- name: payment_history
  endpoint:
    path: /payouts/v1/payments/{payment_id}/history
    method: GET
    data_selector: response
- name: payment
  endpoint:
    path: /{payment_id}
    method: GET
    data_selector: RESPONSE
- name: payout
  endpoint:
    path: /payouts/v1/{payment_id}
    method: GET
- name: payout
  endpoint:
    path: /payouts/v1/payment
    method: POST
- name: payout_intent
  endpoint:
    path: /payouts/v1/intents/{payment_intent_id}
    method: GET
- name: bulk_payout_payment
  endpoint:
    path: /payouts/v1/bulk-payments
    method: POST
- name: payment_destinations
  endpoint:
    path: /payouts/v1/payment/destinations
    method: POST
- name: payment_destination
  endpoint:
    path: /payouts/v1/payment/destinations/{destination_id}
    method: GET
- name: payouts
  endpoint:
    path: /payouts/v1/payments
    method: GET
- name: payment_history
  endpoint:
    path: /payouts/v1/payments/{payment_id}/history
    method: GET
    data_selector: ''
- name: split_payout
  endpoint:
    path: /payouts/v1/split-payments
    method: POST
- name: payout
  endpoint:
    path: /payouts/v1/{payment_id}
    method: GET
- name: refunds
  endpoint:
    path: /payouts/refunds
    method: GET
- name: payout_intent
  endpoint:
    path: /payouts/v1/intents/{payment_intent_id}
    method: GET
    data_selector: ''
- name: refunds
  endpoint:
    path: /payouts/refunds
    method: POST
- name: payment_destinations
  endpoint:
    path: /payouts/v1/payment/destinations
    method: POST
- name: refunds
  endpoint:
    path: /payouts/refunds
    method: PUT
- name: payouts_destination
  endpoint:
    path: /payouts/v1/payment/destinations/{destination_id}
    method: GET
- name: refund_reasons
  endpoint:
    path: /payouts/refunds/reasons
    method: GET
- name: split_payments
  endpoint:
    path: /split-payments
    method: POST
- name: refund
  endpoint:
    path: /payouts/refunds/{refund_id}
    method: GET
- name: payments
  endpoint:
    path: /reconciliation/v1/payments
    method: POST
- name: refunds
  endpoint:
    path: /payouts/refunds
    method: GET
- name: incoming_transactions
  endpoint:
    path: /reconciliation/v1/deposits
    method: GET
- name: refunds
  endpoint:
    path: /payouts/refunds
    method: POST
- name: refunds
  endpoint:
    path: /payouts/refunds
    method: PUT
- name: payments
  endpoint:
    path: /reconciliation/v1/payments/{payment_id}
    method: GET
    data_selector: ''
- name: refund_reasons
  endpoint:
    path: /payouts/refunds/reasons
    method: GET
- name: entities
  endpoint:
    path: /customers/v1/{customer_id}/entities
    method: GET
- name: refund
  endpoint:
    path: /payouts/refunds/{refund_id}
    method: GET
- name: entity
  endpoint:
    path: /customers/v1/{customer_id}/entities/{entity_id}
    method: GET
    data_selector: Entity
- name: payments
  endpoint:
    path: /reconciliation/v1/payments
    method: POST
- name: delete_entity
  endpoint:
    path: /customers/v1/{customer_id}/entities/{entity_id}
    method: DELETE
- name: deposits
  endpoint:
    path: /deposits/
    method: GET
- name: accounts
  endpoint:
    path: /data/v2/accounts
    method: GET
- name: payments
  endpoint:
    path: /reconciliation/v1/payments/{payment_id}
    method: GET
- name: balances
  endpoint:
    path: /data/v2/accounts/{account_id}/balances
    method: GET
- name: entities
  endpoint:
    path: /customers/v1/{customer_id}/entities
    method: GET
- name: identity
  endpoint:
    path: /data/v2/identity
    method: GET
- name: transactions
  endpoint:
    path: /accounts/{account_id}/transactions
    method: GET
- name: entity
  endpoint:
    path: /customers/v1/{customer_id}/entities/{entity_id}
    method: GET
- name: verify_iban
  endpoint:
    path: /verifications/v2/iban
    method: POST
- name: delete_entity
  endpoint:
    path: /customers/v1/{customer_id}/entities/{entity_id}
    method: DELETE
- name: name_verification
  endpoint:
    path: /insights/v1/name-verification
    method: POST
- name: accounts
  endpoint:
    path: /data/v2/accounts
    method: GET
- name: proof_of_address
  endpoint:
    path: /kyc/v1/customers/{customer_id}/proof-of-address
    method: POST
- name: balances
  endpoint:
    path: /accounts/{account_id}/balances
    method: GET
- name: proof_of_address_records
  endpoint:
    path: /kyc/v1/customers/{customer_id}/proof-of-address
    method: GET
- name: identity
  endpoint:
    path: /data/v2/identity
    method: GET
- name: proof_of_address
  endpoint:
    path: /customers/{customer_id}/proof-of-address/{id}
    method: GET
    data_selector: records
- name: transactions
  endpoint:
    path: /accounts/{account_id}/transactions
    method: GET
- name: delete_proof_of_address
  endpoint:
    path: /kyc/v1/customers/{customer_id}/proof-of-address/{id}
    method: DELETE
    data_selector: ''
    params: {}
- name: name_verification
  endpoint:
    path: /insights/v1/name-verification
    method: POST
- name: proof_of_address_document
  endpoint:
    path: /files/kyc/poa/<document_id>.pdf
    method: GET
- name: proof_of_address
  endpoint:
    path: /kyc/v1/customers/{customer_id}/proof-of-address
    method: POST
- name: income
  endpoint:
    path: /insights/v2/income
    method: POST
- name: proof_of_address
  endpoint:
    path: /kyc/v1/customers/{customer_id}/proof-of-address
    method: GET
- name: expenses
  endpoint:
    path: /insights/v2/expenses
    method: GET
- name: proof_of_address
  endpoint:
    path: /customers/{customer_id}/proof-of-address/{id}
    method: GET
    data_selector: records
    params: {}
- name: delete_proof_of_address
  endpoint:
    path: /kyc/v1/customers/{customer_id}/proof-of-address/{id}
    method: DELETE
- name: Get Income
  endpoint:
    path: /insights/v2/income
    method: POST
- name: expenses
  endpoint:
    path: /insights/v2/expenses
    method: GET
- name: customer
  endpoint:
    path: /customers/v1/
    method: POST
    data_selector: customer_id
- name: entity
  endpoint:
    path: /entity
    method: POST
    data_selector: payload
- name: entity_created_webhook
  endpoint:
    path: /webhook/entity.created
    method: POST
    data_selector: payload
- name: customer
  endpoint:
    path: /customers/v1/
    method: POST
    data_selector: customer_id
    params: {}
- name: entity
  endpoint:
    path: /entity
    method: POST
    data_selector: payload
- name: payment_source
  endpoint:
    path: /payment_source
    method: POST
    data_selector: payload
- name: destinations
  endpoint:
    path: /payments/v1/destinations
    method: POST
    data_selector: id
    params: {}
- name: fetch_destinations
  endpoint:
    path: /payments/v1/destinations
    method: GET
    data_selector: destinations
    params: {}
- name: payment_source
  endpoint:
    path: /customers/v1/<customer_id>/payment-sources/<payment_source_id>
    method: GET
    data_selector: payload
    params: {}
- name: destinations
  endpoint:
    path: /payments/v1/destinations
    method: POST
    data_selector: id
    params: {}
- name: list_destinations
  endpoint:
    path: /payments/v1/destinations
    method: GET
    data_selector: destinations
    params: {}
- name: payment_intent
  endpoint:
    path: /payments/v1/intents
    method: POST
    data_selector: payment_intent_id
    params: {}
- name: payment_source
  endpoint:
    path: /customers/v1/<customer_id>/payment-sources/<payment_source_id>
    method: GET
    data_selector: payload
    params: {}
- name: payment_intent
  endpoint:
    path: /payments/v1/intents
    method: POST
    data_selector: payment_intent_id
    params: {}
- name: accounts
  endpoint:
    path: /accounts
    method: GET
    data_selector: payload.accounts
    params:
      entity_id: ''
- name: account_balance
  endpoint:
    path: /accounts/{account.id}/balance
    method: GET
    data_selector: ''
    params:
      entity_id: ''
- name: accounts
  endpoint:
    path: /accounts
    method: GET
    data_selector: payload.accounts
- name: account_balance
  endpoint:
    path: /accounts/{account.id}/balance
    method: GET
    data_selector: balance
    params:
      entity_id: '{entityId}'
- name: accounts
  endpoint:
    path: /accounts
    method: GET
- name: balance
  endpoint:
    path: /balance
    method: GET
- name: identity
  endpoint:
    path: /identity
    method: GET
- name: transactions
  endpoint:
    path: /transactions
    method: GET
- name: results
  endpoint:
    path: /v1/results/{results_id}
    method: GET
    data_selector: results
    params: {}
- name: accounts
  endpoint:
    path: /data/v1/accounts
    method: POST
    data_selector: status
    params:
      async: 'true'
- name: accounts
  endpoint:
    path: /v1/accounts
    method: GET
- name: balance
  endpoint:
    path: /v1/balance
    method: GET
- name: identity
  endpoint:
    path: /v1/identity
    method: GET
- name: transactions
  endpoint:
    path: /v1/transactions
    method: GET
- name: name_verification
  endpoint:
    path: /insights/v1/name-verification
    method: POST
    data_selector: payload
    params: {}
- name: accounts
  endpoint:
    path: /data/v1/accounts
    method: POST
    data_selector: results
    params:
      async: 'true'
- name: results
  endpoint:
    path: /v1/results/{results_id}
    method: GET
    data_selector: results
    params: {}
- name: name_verification
  endpoint:
    path: /insights/v1/name-verification
    method: POST
    data_selector: payload
    params: {}
- name: account_verification
  endpoint:
    path: /verifications/v2/iban
    method: POST
    data_selector: verifications
- name: iban_verification
  endpoint:
    path: /verifications/v2/iban
    method: POST
    data_selector: verifications
- name: proof_of_address_upload
  endpoint:
    path: /kyc/v1/customers/<customer_id>/proof-of-address
    method: POST
    data_selector: id
- name: retrieve_proof_of_address_record
  endpoint:
    path: /kyc/v1/customers/<customer_id>/proof-of-address/<proof_of_address_id>
    method: GET
    data_selector: data
- name: Retrieve Proof of Address Record
  endpoint:
    path: /reference/fetchcurrentidentity#/
    method: GET
- name: Retrieve Identity
  endpoint:
    path: /reference/fetchcurrentidentity#/
    method: GET
- name: proof_of_address
  endpoint:
    path: /kyc/v1/customers/{customer_id}/proof-of-address
    method: GET
    data_selector: content
    params: {}
- name: transactions
  endpoint:
    path: /transactions
    method: GET
    data_selector: categories
    params:
      insights: 'true'
- name: proof_of_address_upload
  endpoint:
    path: /kyc/v1/customers/<customer_id>/proof-of-address
    method: POST
    data_selector: id
    params: {}
- name: retrieve_proof_of_address
  endpoint:
    path: /kyc/v1/customers/<customer_id>/proof-of-address/<proof_of_address_id>
    method: GET
    data_selector: data
    params: {}
- name: retrieve_uploaded_document
  endpoint:
    path: /files/kyc/poa/<document_id>
    method: GET
    data_selector: response
    params: {}
- name: reconciliation
  endpoint:
    path: /v1.0-UAE/reconciliation
    method: GET
    data_selector: payload
    params: {}
- name: proof_of_address
  endpoint:
    path: /kyc/v1/customers/{customer_id}/proof-of-address
    method: GET
    data_selector: content
    params: {}
- name: transactions
  endpoint:
    path: /transactions
    method: GET
    data_selector: transactions
    params:
      insights: 'true'
- name: deposits
  endpoint:
    path: /reference/getdeposits
    method: GET
    data_selector: transactions
- name: reconciliation
  endpoint:
    path: /v1.0-UAE/docs/reconciliation
    method: GET
    data_selector: payload
    params: {}
- name: payment
  endpoint:
    path: /reference/getreconciliationpayments
    method: GET
    data_selector: payload
    params: {}
- name: create_destination
  endpoint:
    path: /payouts/v1/payment/destinations
    method: POST
    data_selector: payload
- name: create_payout
  endpoint:
    path: /payouts/v1/payment
    method: POST
    data_selector: payment_details
- name: create_destination
  endpoint:
    path: /payouts/v1/payment/destinations
    method: POST
    data_selector: payload
- name: create_payout
  endpoint:
    path: /payouts/v1/payment
    method: POST
    data_selector: payload
- name: create_refund
  endpoint:
    path: /payouts/refunds
    method: POST
    data_selector: ''
    params: {}
- name: get_refund_reasons
  endpoint:
    path: /payouts/refunds/reasons
    method: GET
    data_selector: ''
    params: {}
- name: update_refund_status
  endpoint:
    path: /payouts/refunds
    method: PUT
    data_selector: ''
    params: {}
- name: create_refund
  endpoint:
    path: /payouts/refunds
    method: POST
    data_selector: payload
- name: get_refund_reasons
  endpoint:
    path: /payouts/refunds/reasons
    method: GET
    data_selector: payload
- name: update_refund_status
  endpoint:
    path: /payouts/refunds
    method: PUT
    data_selector: payload
- name: LinkSDK
  endpoint:
    path: /banks/v1/
    method: GET
    data_selector: records
- name: banks
  endpoint:
    path: /banks/v1/
    method: GET
    data_selector: '[]'
- name: customization
  endpoint:
    path: /customization
    method: GET
    data_selector: customization_properties
- name: bank
  endpoint:
    path: /banks/v1
    method: GET
    data_selector: records
    params: {}
- name: banks
  endpoint:
    path: /banks/v1/
    method: GET
- name: banks
  endpoint:
    path: /banks/v1
    method: GET
    data_selector: array of Bank objects
    params: {}
- name: webhook
  endpoint:
    path: /webhook
    method: POST
    data_selector: payload
    params: {}
- name: webhook
  endpoint:
    path: /webhooks
    method: POST
    data_selector: payload
    params: {}
- name: payment_source_created
  endpoint:
    path: /webhooks/payment_source.created
    method: POST
    data_selector: payload
- name: payment_source_beneficiary_created
  endpoint:
    path: /webhooks/payment_source.beneficiary.created
    method: POST
    data_selector: payload
- name: payment_source_beneficiary_updated
  endpoint:
    path: /webhooks/payment_source.beneficiary.updated
    method: POST
    data_selector: payload
- name: payment_created
  endpoint:
    path: /webhooks/payment.created
    method: POST
    data_selector: payload
- name: payment_updated
  endpoint:
    path: /webhooks/payment.updated
    method: POST
    data_selector: payload
- name: entity_created
  endpoint:
    path: /webhooks/entity.created
    method: POST
    data_selector: payload
- name: entity_reconnected
  endpoint:
    path: /webhooks/entity.reconnected
    method: POST
    data_selector: payload
- name: results_ready
  endpoint:
    path: /webhooks/results.ready
    method: POST
    data_selector: payload
- name: bank_availability_updated
  endpoint:
    path: /webhooks/bank.availability.updated
    method: POST
    data_selector: payload
- name: payment_reconciliation_updated
  endpoint:
    path: /webhooks/payment.reconciliation.updated
    method: POST
    data_selector: payload
- name: payment_source_created
  endpoint:
    path: /webhooks/payment_source.created
    method: POST
    data_selector: payload
    params: {}
- name: beneficiary_created
  endpoint:
    path: /webhooks/payment_source.beneficiary.created
    method: POST
    data_selector: payload
    params: {}
- name: beneficiary_updated
  endpoint:
    path: /webhooks/payment_source.beneficiary.updated
    method: POST
    data_selector: payload
    params: {}
- name: payment_created
  endpoint:
    path: /webhooks/payment.created
    method: POST
    data_selector: payload
    params: {}
- name: payment_updated
  endpoint:
    path: /webhooks/payment.updated
    method: POST
    data_selector: payload
    params: {}
- name: entity_created
  endpoint:
    path: /webhooks/entity.created
    method: POST
    data_selector: payload
    params: {}
- name: entity_reconnected
  endpoint:
    path: /webhooks/entity.reconnected
    method: POST
    data_selector: payload
    params: {}
- name: results_ready
  endpoint:
    path: /webhooks/results.ready
    method: POST
    data_selector: payload
    params: {}
- name: bank_availability_updated
  endpoint:
    path: /webhooks/bank.availability.updated
    method: POST
    data_selector: payload
    params: {}
- name: payment_reconciliation_updated
  endpoint:
    path: /webhooks/payment.reconciliation.updated
    method: POST
    data_selector: payload
    params: {}
notes:
- Sensitive data should not be used in the sandbox environment.
- Webhook receiver must respond with a 200 status code to confirm receipt.
- Requests will not work for `results_id` that have been returned with a synchronous
  request.
- 'The Results endpoint can only be used when requests have been made with `async:
  true` or a request has timed out to a `PENDING` or `RECONNECT_REQUIRED` status.'
- All calls using OAuth should be made using https://api2.leantech.me
- Sensitive data in sandbox should not be used when testing data or payments.
- It is extremely important that you set up your webhook receiver to explicitly respond
  to all webhooks sent from Lean with a 200 to confirm receipt.
- The app_user_id has a unique constraint.
- In UAE, the only relevant permissions are identity (only for retail accounts), accounts,
  balance and transactions.
- All calls in Sandbox are made to sandbox.leantech.me not api.leantech.me.
- 'Usage of the LinkSDK has sandbox: true in the method calls.'
- Calls to Lean's API do not require certificates or mTLS transmission.
- An entity maps to a user's entire relationship with a specific bank.
- In UAE, the only relevant permissions are identity, accounts, balance and transactions.
- Don't use special characters in the payment destination
- All calls in Sandbox are made to sandbox.leantech.me not api.leantech.me
- 'Usage of the LinkSDK has sandbox: true in the method calls'
- Calls to Lean's API do not require certificates or mTLS transmission
- The balance field under the accounts object has been deprecated.
- Descriptions have a maximum length of 32 characters and is recommended to be as
  short as possible without any special characters.
- Some banks only allow 12 characters for the reference.
- Setting up payments does not require actually making a payment from your end-user.
- For corporate banks, an OTP will be required every time you make a call to the API
  after a few minutes of your last call.
- Requests may fall back to asynchronous processing if they take longer than 50 seconds.
- For corporate banks, OTP will be required every time a call is made after a few
  minutes.
- Reconnect ID expires within 30 days.
- This API currently supports retail bank accounts only (corporate account support
  is not available).
- Fallback to asynchronous workflow if response delayed for more than 50 seconds
- Handle PENDING response for asynchronous requests
- Automate and simplify address verification
- Handle SDK callbacks to monitor document upload events
- Optionally listen to webhooks to receive verification outcomes
- Ensure to handle SDK callbacks and Webhook notifications
- API returns all results for a customer ID where a document has been uploaded and
  processed for Address Verification.
- We recommend you use the APIs in asynchronous mode to avoid timeouts.
- Webhook notifications are sent for upload status and processing results.
- Lean's reconciliation product currently supports reconciling payments for only one
  destination account.
- If you receive payments into multiple bank accounts, you will need to select one
  to use with reconciliation.
- Lean retrieves data every 15 minutes without manual intervention.
- Querying the API retrieves Transactions already retrieved by Lean.
- If you are set up with auto reconciliation, Lean will connect to your bank account
  every 15 mins and fetch deposits from your bank account.
- Payments can be moved to `Unreceived` from any match status (unique, partial or
  no match).
- We recommend that the person from your company who operates the tool has easy access
  to the details to change the password for the account (`User ID`, `Subscriber ID`,
  `Password` and the phone number that is registered with that account). This will
  allow for minimal downtime when the password needs to be changed.
- Note that the reconciliation product takes up to 15 minutes to update once you have
  entered the new credentials. During these time, you will see that you will still
  see the banner that requests you to update the credentials. Please ignore it.
- Banks tend to invalidate credentials once every 3 months. We recommend you change
  your password every 2 months and follow the process to update them in the Lean dashboard.
  This will prevent unexpected downtimes.
- Lean does not retrieve the deposits from the bank when you query the API. Lean has
  set up a scheduled refresh (every 15 min) when Transactions are retrieved.
- Before Payouts can be used you need to reach out to a Lean representative to enable
  it.
- Any user on your end with the 'Financial Controller' role will have to opt-in in
  order to use this product.
- Whenever a password becomes invalidated, the tool will stop working.
- We recommend you change your password every 2 months.
- All requests are processed asynchronously on Lean’s side.
- Ensure Destination is created before initiating a Payout.
- The user must have already connected their bank credentials.
- ACCEPTED_BY_BANK or PENDING_WITH_BANK does not guarantee the payment has been received
  by the destination account.
- Payment Finality is an early access feature. Please reach out to a Lean representative
  to learn more and would like access to this feature.
- Payments which are marked with `authorize_payment` flag set to `true` will be automatically
  authorised.
- Payments which are marked with `authorize_payment` flag set to `false` can be authorized
  via a backend call to Lean.
- Refunds are only available for transactions that have been reconciled.
- Must get a customer scoped auth token to initiate an SDK flow from your backend
- The CSP is an optional security feature and is not managed by Lean Tech. The responsibility
  for configuring and maintaining the CSP lies solely with the implementer.
- To reduce the maintenance burden and increase flexibility, you may consider using
  a wildcard (`*`) to allow all subdomains under `leantech.me` in your CSP configuration.
- Link SDK is available in English and Arabic, fully supported with a right-to-left
  UI.
- Customization capabilities are progressively being released to match UI with application
  branding.
- Lean's Link SDK is a Kotlin library, distributed as a AAR/JAR and distributed via
  Jitpack.
- 'The latest version is: X.X.X'
- If the CSP configuration blocks any required URLs, the Link SDK may not function
  as expected.
- The CSP is an optional security feature and is not managed by Lean Tech.
- Link SDK is available in English and Arabic
- The default language is English
- Link SDK is available in English and Arabic, fully supported with a right-to-left
  UI, including text alignment, icons and images.
- Requires a cache of available banks and a CRON job for updates
- Webhook for bank availability updates must handle both active and enabled parameters
- Optimal dimensions for the logo are 400px x 400px square
- 'Webhook retry policy: If we receive any other status code or do not receive a response
  within 10 seconds, we will start retrying.'
- 'For securing the webhook messages sent by Lean, the following security checks are
  highly recommended to be implemented in your integration: Check our webhook signature
  with Webhook Secret Token, Whitelist webhook IP, Always validate the Lean App Token.'
- Requires caching of bank data and weekly updates.
- Availability must be true for both active and enabled parameters for banks.
- Webhook delivery is considered successful upon receiving a 200 status code.
- For securing webhooks, check the webhook signature with Webhook Secret Token, whitelist
  webhook IP, and validate the Lean App Token.
errors:
- 'EU_ACCOUNT_LOCKED: Prompt the user to contact the bank to unlock the account.'
- 'LOGGED_IN_ELSEWHERE: Wait for some time before making a new request.'
- 'BANK_ISSUE: Wait for some time before making a new request.'
- 'UNSEEN_BANK_ERROR: Wait for some time before making a new request.'
- 'BANK_MAINTENANCE: Wait for some time before making a new request.'
- 'LEAN_ERROR: Wait for some time before making a new request.'
- 'EU_FUNCTIONALITY_RESTRICTED: Prompt the user to contact the bank.'
- 'KNOWN_UNSUPPORTED_MFA_BEHAVIOUR: Contact Lean.'
- 'KNOWN_TRAFFIC_OUTSIDE_ALLOWED_REGION: Contact Lean.'
- 'DISABLED_BY_LEAN: You should have received a webhook indicating the bank has been
  disabled.'
- 'DISABLED_BY_CLIENT: Reenable the bank from the Lean dashboard.'
- 'ACTIVE_SESSION_EXISTS: Wait for some time before making a new request.'
- 'DUPLICATED_REQUEST: Wait for 1 minute before repeating the same request.'
- General errors
- Data errors
- Payments Errors
- 'CERTIFICATE_TOKEN_MISMATCH: The mTLS certificate used for the API call is a valid
  certificate issued by Lean but does not match the certificate that is assigned to
  the application token you have provided in the header.'
- 'CUSTOMER_ALREADY_EXISTS: A Lean customer object already exists for the app_user_id
  you have provided.'
- 'INCORRECT_ACCESS_LEVEL: You are making a call to a service that you do not have
  the correct access permission levels for.'
- 'INSUFFICIENT_ACCESS_LEVEL: You are making a call to the production endpoint whereas
  your application only has access to the sandbox environment. Make the same API call
  with sandbox.leantech.me/foo instead of api.leantech.me/foo.'
- 'INTERNAL_SERVER_ERROR: This one''s on us. Something has gone wrong in our system
  and you should let us know.'
- 'INVALID_CERTIFICATE: The provided certificate is not valid.'
- 'INVALID_HTTP_METHOD: The HTTP method used for the API call is incorrect but the
  URL is correct. You''ve likely used a GET instead of a POST or vice versa.'
- 'INVALID_PARAMETERS: One or more parameters specified in the request body were invalid.
  This could be an unrecognized or misspelled key or an ill formatted value. We are
  always trying to be more specific with which parameter was invalid so you should
  contact us and tell us when you see this error so we can make a specific INVALID_[PARAMETERNAME]
  error for it.'
- 'INVALID_URL: The URL specified for this request is invalid. Double check the spelling
  and whether you used the plural or singular of a noun.'
- 'MISSING_PARAMETERS: A parameter required for this request was not specified.'
- 'RATE_LIMIT_EXCEEDED: Too many of the exact same request hit our API too quickly.
  We recommend an exponential backoff when retrying requests.'
- 'UNKNOWN_ACCOUNT: The account you specified in the request body cannot be found
  for the entity you specified. Use the Get Accounts endpoint to ensure that the account_id
  specified in the request matches one of the accounts for the entity.'
- 'UNKNOWN_APP_TOKEN: The app_token specified in the header of the request is not
  recognized. You can check your app token in the Authentication page of your application
  dashboard.'
- 'UNKNOWN_APP_USER: The app_user you are trying to retrieve the customer object for
  cannot be found in our system. Ensure that the app_user_id provided as a query parameter
  is formatted correctly.'
- 'UNKNOWN_CUSTOMER: The customer specified in your request does not exist.'
- 'UNKNOWN_ENTITY: The entity specified in your request does not exist or, when applicable
  does not belong to the customer also specified in the query parameter.'
- 'UNKNOWN_RESULTS_ID: The results_id specified in your query parameters does not
  exist.'
- 'USER_PERMISSIONS_NOT_GRANTED: Your customer has not granted you permission to access
  the data you are requesting. You define the permissions asked for in the Link()
  flow in the SDK and you can query which permissions you asked for by using the Get
  Entity request.'
- 'AMOUNT_UNDER_MIN_VALUE: The amount specified for the payment intent is lower than
  the minimum amount allowed for the currency. Use a higher amount and try again.
  The minimum amount allowed for AED is 10 and for USD is 3.'
- 'INVALID_AMOUNT: The amount specified for the payment intent is incorrectly formatted.
  Make sure the amount is formatted correctly and has the appropriate number of decimals
  for the currency specified.'
- 'INVALID_IBAN: The IBAN specified for the Payment Destination is invalid. It may
  be incorrectly formatted or our system detected that the IBAN is invalid. You can
  check if an IBAN is valid using https://www.iban.com/iban-checker.'
- 'INVALID_NAME: The name specified for the Payment Destination is invalid. You must
  enter the full name of the person or entity. The name string must be at least two
  words.'
- 'UNKNOWN_PAYMENT_DESTINATION: The payment_destination specified in your request
  does not exist.'
- 'UNKNOWN_PAYMENT_INTENT: The payment_intent specified in your request does not exist.'
- 'UNKNOWN_PAYMENT_SOURCE: The payment_source specified in your request does not exist
  or, when applicable does not belong to the customer also specified in the query
  parameters.'
- 'AMOUNT_OVER_MAX_VALUE: The amount specified for the payment intent is greater than
  the maximum amount allowed for the currency. Use a lower amount and try again. The
  maximum amount allowed for AED is 1,000,000 and for USD is 270,000.'
- 'ANOTHER_PAYMENT_ALREADY_IN_PROGRESS: User is initiating another payment while an
  existing payment is already in progress. Suggests a duplication by the user. End
  users are messaged to wait 10 minutes before attempting the payment again.'
- 'EU_ACCOUNT_LOCKED: Your online account has been locked by your bank. This can be
  confirmed by trying to log in to your bank''s mobile application or website which
  will also give you more details about how to unlock your account. Once your account
  is unlocked, you will be able to successfully connect.'
- 'LOGGED_IN_ELSEWHERE: The bank rejected the connection because you logged into your
  bank account on another device. Please try again without logging in to your online
  banking elsewhere.'
- 'BANK_ISSUE: Your bank is currently experiencing technological problems. Please
  try again later.'
- 'UNSEEN_BANK_ERROR: Your bank has reported an error, please try again later. If
  this error continues, please contact customer service.'
- 'BANK_MAINTENANCE: Your bank is currently undergoing technical maintenance and online
  services are unavailable. Please try again later.'
- 'LEAN_ERROR: Generic response for an unclassified error. This may be an error with
  Lean or the bank - This is unlikely to be resolved without reaching out to our support
  team with the trace_id for further details on the logs that led to the transaction
  failing.'
- 'EU_FUNCTIONALITY_RESTRICTED: Your bank has restricted functionality on your account.
  Please try to log in to your bank''s online web portal to resolve any issues or
  requirements.'
- 'KNOWN_UNSUPPORTED_MFA_BEHAVIOUR: We are unable to process this request, please
  try again later. If you continue to see this error, please get in touch with customer
  support with the support code below.'
- 'KNOWN_TRAFFIC_OUTSIDE_ALLOWED_REGION: We were unable to process this request because
  you have not enabled this service on your account.'
- 'ENTITY_ALREADY_CONNECTED: We could not connect this account since you have already
  connected an account for this bank. Please choose a different bank to connect this
  with or delete your existing connection with this bank and try again.'
- 'BENEFICIARY_RECENTLY_REMOVED: The bank has indicated that you recently removed
  the beneficiary you are trying to authorise. Please try again in 72 hours.'
- 'BENEFICIARY_DUPLICATE_NICKNAME: A beneficiary with the nickname %s already exists
  in your bank account. Please go to your online banking website and delete the beneficiary
  with this nickname before trying again.'
- 'BENEFICIARY_NOT_FOUND: The recipient of this payment was removed as a beneficiary
  for your bank account. Please contact customer support to add the recipient as a
  beneficiary.'
- 'BENEFICIARY_COOL_DOWN_INCOMPLETE: You cannot send a payment to this recipient right
  now because your bank has not yet activated the beneficiary.'
- 'INACTIVE_PAYMENT_SOURCE: You have already connected this bank account but your
  payment method has been deactivated. Please contact customer support for assistance.'
- 'BENEFICIARY_DAILY_LIMIT_EXCEEDED: You cannot set up payments right now because
  you have exceeded your bank''s limit of three new beneficiaries per day. Please
  try again tomorrow.'
- 'EXISTING_BENEFICIARY_INVALID: The beneficiary that exists in your bank account
  is not correctly set up. Please go to your bank’s website and edit the beneficiary
  to include all necessary details including the city and country of the beneficiary.'
- 'INSUFFICIENT_BALANCE: There is insufficient balance in your account to cover this
  payment and any associated fees. Please try with another account or after you''ve
  refunded your account.'
- 'EXCEEDS_DAILY_LIMIT: You have exceeded your bank''s limit for the value of online
  transfers that can be made in one day. Please try to make this payment tomorrow
  before making other online transfers.'
- 'ACCOUNT_SETTINGS_LIMIT_EXCEEDED: Your bank has rejected this payment because it
  is not permitted by your account settings. Please ensure your account settings allows
  payments of this type and amount before trying again.'
- 'PAYMENT_BELOW_MIN_AMOUNT: This transaction cannot be processed by your bank as
  it is too small. Please try again with a larger amount.'
- 'PAYMENT_ABOVE_MAX_AMOUNT: This transaction cannot be processed by your bank as
  it is too large. Please try again with a smaller amount.'
- 'SERVICE_NOT_SUPPORTED: We were unable to set up or initiate payments because you
  have not enabled this service on your account. To enable this, login to your online
  banking portal or mobile application and enable this functionality before trying
  again.'
- 'ONLINE_TRANSFERS_DISABLED: Online transfers are disabled for your bank account.
  Please enable online transfers through your bank''s website before trying again.'
- 'NO_VALID_PAYMENT_ACCOUNTS: We could not find any accounts that are eligible for
  payments.'
- 'CURRENCY_UNSUPPORTED: We cannot currently process payments in the chosen currency
  with your bank. Please try your payment in another currency or with another bank.'
- 'REPEATED_TRANSACTION: Your bank has rejected this payment because a similar payment
  was made in the last few minutes. If you intended to make this payment, please try
  again after an hour.'
- 'BANK_FLAGGED_DUPLICATE_TRANSACTION: Your bank does not permit more than one transaction
  of the same amount to the same recipient within a 5 minute period. Please try again
  with a different amount or after waiting 5 minutes.'
- 'USER_CANCELLED: You have cancelled or rejected this transfer with your bank so
  it could not be processed. Please try again.'
- 'SESSION_EXPIRED_ON_OTP: The payment was rejected by the bank because the connection
  timed out and expired. Please try again and make sure to submit any OTPs within
  1 minute.'
- 'CURRENCY_UNSUPPORTED_BANK: The bank does not support transfers to this country
  in the chosen currency. Please try again with another currency.'
- 'DESTINATION_COUNTRY_UNSUPPORTED: We cannot currently process payments to the destination
  country for the chosen bank.'
- 'DISABLED_BY_LEAN: This functionality has been temporarily disabled for this bank.
  Please try again later.'
- 'DISABLED_BY_CLIENT: This application has temporarily disabled functionality for
  this bank. Please try again later.'
- 'COOLDOWN_PAYMENT_LIMIT_EXCEEDED: Your bank requires you to wait for 6 hours before
  you can make this payment since this the first time you are transferring money to
  this entity. Please try to make this payment after 6 hours. We''re sorry for this
  inconvenience.'
- 'USER_SEGMENT_MAX_REACHED: The entered amount exceeds the maximum daily limit for
  transfers from your bank. Please wait one business day for your limit to reset,
  or try again with a smaller amount.'
- 'UNSUPPORTED_ACCOUNT_TYPE: The account you selected does not allow payments to be
  initiated. Please try again with another account.'
- 'MISSING_PAYMENT_AUTHORIZATION_PERMISSION: You don''t have permissions to authorize
  payments. Please connect or use a different account with authorizer permissions.'
- 'MISSING_PERMISSION_OR_NO_PAYMENTS: There are either no payments to authorize or
  you don''t have payment authorization permissions with your connected account.'
- 'AWAITING_BENEFICIARY_COOL_OFF: Indicates a cool down period before the account
  is chargeable.'
- 'ACTIVE: Indicates the customer can make a payment immediately.'
- 'FAILED: The bank rejected the payment initiation.'
- 'PENDING_WITH_BANK: The bank accepted the initiation, but didn’t provide a transaction
  reference number.'
- 'ACCEPTED_BY_BANK: The bank accepted the initiation and provided a transaction reference
  number.'
- 'RECONNECT_REQUIRED: User input is required to reconnect with the bank'
- 'PENDING: Results not yet returned. Please wait'
- 'LEAN_ERROR: There is a Lean system error. If the error continues contact Lean.'
- 'BANK_ISSUE: There are connection issues with the bank and the request should be
  retried.'
- 'UNSUPPORTED_BY_BANK: The bank for the account requested is not currently supported
  for verification.'
- 'DISABLED_BY_LEAN: We have temporarily disabled this service due to an ongoing issue.'
- 'INVALID_IBAN: The IBAN entered is invalid.'
- 'INVALID_PARAMETERS: The IBAN entered is invalid.'
- 'GIVEN_INPUT_CANNOT_BE_VERIFIED: The account cannot be verified and should not be
  retried.'
- 'INVALID_IBAN: The IBAN entered is invalid. Please amend the IBAN to a valid IBAN
  and try the request again.'
- 'INVALID_PARAMETERS: The IBAN entered is invalid. Please amend the IBAN to a valid
  IBAN and try the request again.'
- 'GIVEN_INPUT_CANNOT_BE_VERIFIED: The account cannot be verified and in this case
  and should not be retried.'
- 'INVALID_PARAMETERS: The document is password protected. Please provide an unencrypted
  version'
- 'RATE_LIMIT_EXCEEDED: POA is already initiated for this customer: [customerId]'
- 'DOCUMENT_UPLOAD_FAILED: This document contains embedded files which aren''t supported.
  Please upload a standard PDF.'
- 'INVALID_PARAMETERS: The document is password protected. Please provide an unencrypted
  version.'
- 'RATE_LIMIT_EXCEEDED: POA is already initiated for this customer.'
- 'REQUEST_LIMIT_EXCEEDED: Throttle API calls or reduce frequency'
- 'QUERY_TIMEOUT: Break down filters or add selectivity'
- 'AUTHORIZATION_FAILED: Check authorization flow settings'
- 'FAILED: Generic failure message returned'
- 'FAILED: the payment has failed to be queued or authorized.'
- 'AWAITING_AUTHORIZATION: the payment has been successfully queued on the Bank''s
  side.'
- 'AUTHORIZATION_FAILED: the payment has failed to be authorised. This is a retry-able
  state.'
- 'PENDING_WITH_BANK: the payment has been successfully authorised but the bank didn''t
  provide us with a reference id.'
- 'ACCEPTED_BY_BANK: the payment has been successfully authorised and accepted by
  the bank.'
- 'PENDING_WITH_BANK: Initiation successful - happy path'
- 'FAILED: This would return a generic failure message'
- 'AUTHORIZATION_FAILED: Payment authorization failed'
- 'AUTHORIZATION_FAILED: the payment has failed to be authorised.'
- '400 Bad Request: Check the request body for missing or invalid fields.'
- '401 Unauthorized: Ensure proper authentication and permissions.'
- '404 Not Found: Verify the refund ID or endpoint path.'
- '400 Bad Request: Check required fields in the request body.'
- '404 Not Found: Ensure the refund ID or payment ID is correct.'
- 'ERROR: Some message'
- 'INVALID_CREDENTIALS: Check the credentials provided by the user for bank login.'
- 'ERROR: User cancelled the operation'
- 'ERROR: The SDK or user experienced an error'
- '404 Not Found: Check the endpoint path'
- '500 Internal Server Error: Check server logs for details'
- 'INVALID_CREDENTIALS: User entered incorrect credentials'
- 'MFA_REQUIRED: User needs to enter an OTP'
- 'INVALID_MFA: User entered an incorrect OTP'
- If we receive any other status code or do not receive a response within 10 seconds,
  we will start retrying.
- 'PAYMENT_SOURCE_ACCOUNT_BALANCES_INVALID_CREDENTIALS: User entered incorrect credentials'
- Ensure webhooks are secured to avoid fake requests.
auth_info:
  mentioned_objects:
  - Application Dashboard
  - OAuth
  - JWT
client:
  base_url: https://sandbox.leantech.me
  auth:
    type: Bearer
source_metadata: null
