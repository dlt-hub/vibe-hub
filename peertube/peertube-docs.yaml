resources:
- name: user
  endpoint:
    path: /api/v1/users
    method: GET
    data_selector: records
- name: video
  endpoint:
    path: /api/v1/videos
    method: GET
    data_selector: records
- name: videos
  endpoint:
    path: /api/v1/videos
    method: GET
    data_selector: records
    params: {}
- name: users
  endpoint:
    path: /api/v1/users
    method: GET
    data_selector: records
    params: {}
- name: video
  endpoint:
    path: /api/v1/videos
    method: GET
    data_selector: records
- name: user
  endpoint:
    path: /api/v1/users
    method: GET
    data_selector: records
- name: video
  endpoint:
    path: /videos
    method: GET
    data_selector: videos
- name: upload_video
  endpoint:
    path: /api/v1/videos/upload
    method: POST
    data_selector: video
- name: import_video
  endpoint:
    path: /api/v1/videos/import
    method: POST
    data_selector: video
- name: live_stream
  endpoint:
    path: /api/v1/live
    method: POST
    data_selector: stream
- name: object_storage
  endpoint:
    path: /api/v1/object_storage
    method: GET
    data_selector: object_storage
- name: object_storage
  endpoint:
    path: /remote-storage/s3
    method: GET
    data_selector: object_storage
    params: {}
- name: storage
  endpoint:
    path: /var/www/peertube/storage
    method: COPY
    data_selector: files
- name: config
  endpoint:
    path: /var/www/peertube/config
    method: COPY
    data_selector: files
- name: postgresql
  endpoint:
    path: pg_dump
    method: DUMP
    data_selector: database
- name: peertube_logs
  endpoint:
    path: /var/www/peertube/storage/logs/peertube*.log
    method: GET
    data_selector: logs
    params: {}
- name: PeerTube metrics
  endpoint:
    path: /metrics
    method: GET
- name: PostgreSQL metrics
  endpoint:
    path: /9188
    method: GET
- name: Node metrics
  endpoint:
    path: /9101
    method: GET
- name: Redis metrics
  endpoint:
    path: /9122
    method: GET
- name: platform_follows
  endpoint:
    path: /api/v1/platforms/follows
    method: GET
    data_selector: follows
- name: platform_redundancy
  endpoint:
    path: /api/v1/platforms/redundancy
    method: GET
    data_selector: redundancy
- name: remote_runners
  endpoint:
    path: /admin/remote-runners
    method: GET
    data_selector: runners
    params: {}
- name: runner_jobs
  endpoint:
    path: /admin/remote-runners/jobs
    method: GET
    data_selector: jobs
    params: {}
- name: themes
  endpoint:
    path: /api/themes
    method: GET
    data_selector: themes
    params: {}
- name: plugins
  endpoint:
    path: /api/plugins
    method: GET
    data_selector: plugins
    params: {}
- name: standard_logs
  endpoint:
    path: /api/logs/standard
    method: GET
    data_selector: logs
- name: audit_logs
  endpoint:
    path: /api/logs/audit
    method: GET
    data_selector: logs
- name: video
  endpoint:
    path: /videos
    method: GET
    data_selector: videos
- name: channels
  endpoint:
    path: /api/v1/channels
    method: GET
    data_selector: channels
    params: {}
- name: videos
  endpoint:
    path: /api/v1/videos
    method: GET
    data_selector: videos
    params: {}
- name: video_statistics
  endpoint:
    path: /api/v1/videos/statistics
    method: GET
    data_selector: data
    params: {}
- name: synchronization
  endpoint:
    path: /api/synchronizations
    method: POST
    data_selector: synchronization
- name: settings
  endpoint:
    path: /settings
    method: GET
    data_selector: settings
    params: {}
- name: storage
  endpoint:
    path: /storage
    method: GET
    data_selector: data
    params: {}
- name: video_categories
  endpoint:
    path: /video/categories
    method: GET
    data_selector: categories
    params: {}
- name: users
  endpoint:
    path: /users/me
    method: GET
    data_selector: user
- name: videos
  endpoint:
    path: /videos
    method: GET
    data_selector: videos
- name: videos
  endpoint:
    path: /api/v1/videos
    method: GET
    data_selector: records
- name: videos
  endpoint:
    path: /api/v1/videos
    method: GET
- name: completed_jobs
  endpoint:
    path: /api/v1/jobs/completed
    method: GET
- name: videos
  endpoint:
    path: /api/v1/runners
    method: GET
    data_selector: data
- name: runners
  endpoint:
    path: /runners
    method: GET
    data_selector: data
- name: public_web_video_file
  endpoint:
    path: /api/v1/videos/{filename}
    method: GET
- name: private_web_video_file
  endpoint:
    path: /api/v1/videos/{filename}
    method: GET
- name: public_hls_video_file
  endpoint:
    path: /api/v1/videos/{filename}
    method: GET
- name: private_hls_video_file
  endpoint:
    path: /api/v1/videos/{filename}
    method: GET
- name: video_download
  endpoint:
    path: /api/v1/videos/{videoId}/download
    method: GET
- name: get_user_import
  endpoint:
    path: /api/v1/runners
    method: GET
    data_selector: data
- name: subscriptions
  endpoint:
    path: /api/v1/runners
    method: GET
    data_selector: data
    params:
      count: 15
- name: user_info
  endpoint:
    path: /api/v1/runners
    method: GET
    data_selector: data
- name: notify_user_watching_video
  endpoint:
    path: /api/v1/runners
    method: GET
    data_selector: data
    params: {}
- name: list_videos_of_subscriptions
  endpoint:
    path: /api/v1/runners
    method: GET
- name: get_subscription
  endpoint:
    path: /api/v1/runners
    method: GET
- name: delete_subscription
  endpoint:
    path: /api/v1/runners
    method: DELETE
- name: list_notifications
  endpoint:
    path: /api/v1/runners
    method: GET
- name: mark_notifications_as_read
  endpoint:
    path: /api/v1/runners
    method: POST
- name: mark_all_notifications_as_read
  endpoint:
    path: /api/v1/runners
    method: POST
- name: update_notification_settings
  endpoint:
    path: /api/v1/runners
    method: POST
- name: list_watched_videos_history
  endpoint:
    path: /api/v1/runners
    method: GET
- name: delete_history_element
  endpoint:
    path: /api/v1/runners
    method: DELETE
- name: clear_video_history
  endpoint:
    path: /api/v1/runners
    method: POST
- name: list_videos_of_an_account
  endpoint:
    path: /api/v1/runners
    method: GET
- name: upload_video
  endpoint:
    path: /videos/upload
    method: POST
- name: initialize_resumable_upload
  endpoint:
    path: /videos/upload
    method: POST
- name: send_chunk
  endpoint:
    path: /videos/upload
    method: PUT
- name: cancel_upload
  endpoint:
    path: /videos/upload
    method: DELETE
- name: create_live
  endpoint:
    path: /lives
    method: POST
- name: get_live_info
  endpoint:
    path: /lives/{id}
    method: GET
- name: update_live_info
  endpoint:
    path: /lives/{id}
    method: PUT
- name: get_video_metadata
  endpoint:
    path: /videos/{id}/source
    method: GET
- name: delete_video
  endpoint:
    path: /videos/{id}
    method: DELETE
- name: initialize_video_replacement
  endpoint:
    path: /api/v1/videos/{id}/replace
    method: POST
- name: send_chunk_video_replacement
  endpoint:
    path: /api/v1/videos/{id}/replace/chunk
    method: PUT
- name: cancel_video_replacement
  endpoint:
    path: /api/v1/videos/{id}/replace/cancel
    method: DELETE
- name: list_storyboards
  endpoint:
    path: /api/v1/videos/{id}/storyboards
    method: GET
- name: list_channel_videos
  endpoint:
    path: /api/v1/channels/{channelHandle}/videos
    method: GET
- name: search_videos
  endpoint:
    path: /api/v1/videos/search
    method: GET
- name: videos
  endpoint:
    path: /videos/upload
    method: POST
    data_selector: data
    params: {}
- name: runners
  endpoint:
    path: /runners
    method: GET
    data_selector: data
    params: {}
- name: runners
  endpoint:
    path: /api/v1/runners
    method: GET
    data_selector: data
- name: runners
  endpoint:
    path: /api/v1/runners
    method: GET
    data_selector: data
- name: runners
  endpoint:
    path: /api/v1/runners
    method: GET
    data_selector: data
- name: import_video
  endpoint:
    path: /videos/import
    method: POST
- name: cancel_video_import
  endpoint:
    path: /videos/import/{id}
    method: DELETE
- name: delete_video_import
  endpoint:
    path: /videos/import/{id}
    method: DELETE
- name: list_captions
  endpoint:
    path: /videos/{id}/captions
    method: GET
- name: generate_video_caption
  endpoint:
    path: /videos/{id}/captions
    method: POST
- name: add_replace_video_caption
  endpoint:
    path: /videos/{id}/captions/{captionLanguage}
    method: PUT
- name: delete_video_caption
  endpoint:
    path: /videos/{id}/captions/{captionLanguage}
    method: DELETE
- name: get_video_channel
  endpoint:
    path: /channels/{channelHandle}
    method: GET
- name: create_video_channel
  endpoint:
    path: /channels
    method: POST
- name: update_video_channel
  endpoint:
    path: /channels/{channelHandle}
    method: PUT
- name: delete_video_channel
  endpoint:
    path: /channels/{channelHandle}
    method: DELETE
- name: list_videos_of_channel
  endpoint:
    path: /channels/{channelHandle}/videos
    method: GET
- name: list_abuses
  endpoint:
    path: /api/v1/list_abuses
    method: GET
    data_selector: data
    params:
      count: 15
- name: report_abuse
  endpoint:
    path: /api/v1/report_abuse
    method: POST
    data_selector: data
- name: update_abuse
  endpoint:
    path: /api/v1/update_abuse/{abuseId}
    method: PUT
    data_selector: data
- name: delete_abuse
  endpoint:
    path: /api/v1/delete_abuse/{abuseId}
    method: DELETE
    data_selector: data
- name: list_messages_of_abuse
  endpoint:
    path: /api/v1/list_messages_of_abuse/{abuseId}
    method: GET
    data_selector: data
- name: watched_words
  endpoint:
    path: /api/v1/watched_words
    method: GET
    data_selector: data
- name: account_watched_words
  endpoint:
    path: /api/v1/accounts/{accountName}/watched_words
    method: GET
    data_selector: data
- name: runners
  endpoint:
    path: /api/v1/runners
    method: GET
    data_selector: data
- name: delete_video_hls_files
  endpoint:
    path: /api/v1/runners
    method: GET
- name: delete_video_web_video_files
  endpoint:
    path: /api/v1/runners
    method: GET
- name: video_transcoding
  endpoint:
    path: /api/v1/runners
    method: GET
- name: create_studio_task
  endpoint:
    path: /api/v1/runners
    method: GET
- name: create_transcoding_job
  endpoint:
    path: /api/v1/runners
    method: GET
- name: create_live
  endpoint:
    path: /api/v1/runners
    method: GET
- name: get_live_information
  endpoint:
    path: /api/v1/runners
    method: GET
- name: update_live_information
  endpoint:
    path: /api/v1/runners
    method: GET
- name: list_live_sessions
  endpoint:
    path: /api/v1/runners
    method: GET
- name: get_live_session_of_replay
  endpoint:
    path: /api/v1/runners
    method: GET
- name: import_videos_in_channel
  endpoint:
    path: /api/v1/runners
    method: GET
- name: create_synchronization_for_video_channel
  endpoint:
    path: /api/v1/runners
    method: GET
- name: delete_video_channel_synchronization
  endpoint:
    path: /api/v1/runners
    method: GET
- name: triggers_channel_synchronization_job
  endpoint:
    path: /api/v1/runners
    method: GET
- name: list_synchronizations_of_video_channels
  endpoint:
    path: /api/v1/runners
    method: GET
- name: list_video_passwords
  endpoint:
    path: /api/v1/runners
    method: GET
- name: update_video_passwords
  endpoint:
    path: /api/v1/runners
    method: GET
- name: delete_video_password
  endpoint:
    path: /api/v1/runners
    method: GET
- name: runners
  endpoint:
    path: /api/v1/runners
    method: GET
    data_selector: data
    params:
      count: '15'
- name: plugins
  endpoint:
    path: /api/v1/plugins
    method: GET
    data_selector: data
    params:
      count: '15'
- name: instance_stats
  endpoint:
    path: /api/v1/stats
    method: GET
    data_selector: data
- name: instance_logs
  endpoint:
    path: /api/v1/logs
    method: GET
    data_selector: data
- name: registration_tokens
  endpoint:
    path: /api/v1/registration-tokens
    method: GET
    data_selector: data
    params:
      count: '15'
- name: video_languages_manager
  endpoint:
    path: /api/video/languages
    method: GET
    data_selector: languages
- name: video_licences_manager
  endpoint:
    path: /api/video/licences
    method: GET
    data_selector: licences
- name: video_privacy_manager
  endpoint:
    path: /api/video/privacy
    method: GET
    data_selector: privacy_types
- name: video_playlist_privacy_manager
  endpoint:
    path: /api/video/playlist/privacy
    method: GET
    data_selector: playlist_privacy_types
- name: video_transcoding_manager
  endpoint:
    path: /api/video/transcoding
    method: GET
    data_selector: transcoding_profiles
- name: embed
  endpoint:
    path: /videos/embed/{videoId}
    method: GET
    data_selector: embed_data
    params: {}
- name: video
  endpoint:
    path: /activitypub/video
    method: GET
    data_selector: records
- name: video
  endpoint:
    path: /videos/watch/04af977f-4201-4697-be67-a8d8cae6fa7a
    method: GET
    data_selector: id
    params: {}
- name: actor
  endpoint:
    path: /accounts/{username}
    method: GET
    data_selector: records
- name: watch_action
  endpoint:
    path: /api/watch-action
    method: POST
    data_selector: records
- name: likes
  endpoint:
    path: /videos/watch/04af977f-4201-4697-be67-a8d8cae6fa7a/likes
    method: GET
- name: dislikes
  endpoint:
    path: /videos/watch/04af977f-4201-4697-be67-a8d8cae6fa7a/dislikes
    method: GET
- name: shares
  endpoint:
    path: /videos/watch/04af977f-4201-4697-be67-a8d8cae6fa7a/announces
    method: GET
- name: comments
  endpoint:
    path: /videos/watch/04af977f-4201-4697-be67-a8d8cae6fa7a/comments
    method: GET
- name: chapters
  endpoint:
    path: /videos/watch/04af977f-4201-4697-be67-a8d8cae6fa7a/chapters
    method: GET
- name: upload_video
  endpoint:
    path: /upload
    method: POST
- name: manage_plugins
  endpoint:
    path: /plugins
    method: GET
- name: remote_peerTube_cli
  endpoint:
    path: /api/rest-reference.html
    method: GET
- name: peerTube_runner
  endpoint:
    path: /admin/remote-runners
    method: GET
- name: upload_video
  endpoint:
    path: /api/v1/videos
    method: POST
    data_selector: video
    params: {}
- name: regenerate_thumbnails
  endpoint:
    path: /regenerate-thumbnails
    method: POST
- name: import_video_file
  endpoint:
    path: /create-import-video-file-job
    method: POST
- name: move_video_to_object_storage
  endpoint:
    path: /create-move-video-storage-job
    method: POST
- name: move_video_to_filesystem
  endpoint:
    path: /create-move-video-storage-job
    method: POST
- name: update_object_storage_urls
  endpoint:
    path: /update-object-storage-url
    method: POST
- name: cleanup_remote_files
  endpoint:
    path: /house-keeping
    method: POST
- name: generate_storyboard
  endpoint:
    path: /create-generate-storyboard-job
    method: POST
- name: prune_storage
  endpoint:
    path: /prune-storage
    method: POST
- name: update_host
  endpoint:
    path: /update-host
    method: POST
- name: reset_password
  endpoint:
    path: /reset-password
    method: POST
- name: install_plugin
  endpoint:
    path: /plugin:install
    method: POST
- name: uninstall_plugin
  endpoint:
    path: /plugin:uninstall
    method: POST
- name: video
  endpoint:
    path: /activitypub/video
    method: GET
    data_selector: records
- name: video
  endpoint:
    path: /videos/watch/04af977f-4201-4697-be67-a8d8cae6fa7a
    method: GET
    data_selector: id
    params: {}
- name: Actor
  endpoint:
    path: /accounts/{username}
    method: GET
    data_selector: records
- name: WatchAction
  endpoint:
    path: /actions/watch
    method: POST
    data_selector: records
- name: likes
  endpoint:
    path: /videos/watch/04af977f-4201-4697-be67-a8d8cae6fa7a/likes
    method: GET
- name: dislikes
  endpoint:
    path: /videos/watch/04af977f-4201-4697-be67-a8d8cae6fa7a/dislikes
    method: GET
- name: shares
  endpoint:
    path: /videos/watch/04af977f-4201-4697-be67-a8d8cae6fa7a/announces
    method: GET
- name: comments
  endpoint:
    path: /videos/watch/04af977f-4201-4697-be67-a8d8cae6fa7a/comments
    method: GET
- name: hasParts
  endpoint:
    path: /videos/watch/04af977f-4201-4697-be67-a8d8cae6fa7a/chapters
    method: GET
- name: object_storage
  endpoint:
    path: /api/remote-storage
    method: GET
    data_selector: storage
- name: object_storage
  endpoint:
    path: /object_storage
    method: POST
    data_selector: storage_config
    params: {}
notes:
- 'Remove NodeJS 16 support (see https://nodejs.org/fr/blog/announcements/nodejs16-eol):
  Please upgrade to NodeJS 18 before upgrading PeerTube'
- 'Remove WebTorrent support in player: ''WebTorrent videos'' are renamed to ''Web
  Video''. The video format is the same, we just stop to use P2P for these videos'
- Uses OAuth2 with refresh token — requires setup of connected app in PeerTube
- Some objects may return nulls in deeply nested fields
- The minimum ffmpeg version required is now 4.1
- Deprecate static routes that will be removed in 3.0
- Uses OAuth2 with refresh token — requires setup of connected app in api
- Requires setup of connected app in api
- You need to execute manually a script to create HLS video torrents.
- In the next PeerTube release, a unique index on actors usernames will be added to
  fix some federation bugs.
- Les instances partagent les vidéos des autres, mais l'index des comptes de chaque
  instance n'est pas fédéré.
- PeerTube does not support webserver host change.
- 'Please don''t install PeerTube for production on a device behind a low bandwidth
  connection (example: your ADSL link).'
- Certbot should have installed a cron to automatically renew your certificate.
- PeerTube does not support webserver host change. Keep in mind your domain name is
  definitive after your first PeerTube start.
- Videos will be publicly available after transcoding
- Changing the hostname is unsupported and may be a risky operation, especially if
  you have already federated.
- Your S3 provider must support Virtual hosting of buckets as PeerTube doesn't support
  path style requests.
- To reduce object storage cost, we strongly recommend to setup a cache server (CDN/external
  proxy).
- PeerTube configuration is loaded with node-config.
- You can have multiple config files that will be selected due to a specific file
  load order.
- Ensure to copy Let's Encrypt certs from the old server.
- To send PeerTube logs to Loki, use promtail software.
- Logs are sent to your Loki instance after PeerTube restart.
- PeerTube follows OpenTelemetry standard and can export its metrics in Prometheus
  format.
- Metrics are exposed on specific endpoints after configuration.
- PeerTube has a built-in videos redundancy system, allowing a platform to duplicate
  and serve videos of another platform.
- Require email verification
- Require approval
- Registered runners can alter video content. It's the reason why you must have confidence
  in their administrator.
- P2P can be disabled by the PeerTube admin or directly in users settings.
- Depending on the PeerTube platform, you can download the video in different formats.
- Registration is deactivated if the button is not visible.
- Login name and password are case-sensitive.
- Remote channels will be checked each hour for new videos.
- First, you should use a server or PC with at least 4GB of RAM. Less RAM may lead
  to crashes.
- PeerTube also requires a running redis server, no special setup is needed for this.
- Don't make assumptions and check every parameter you want to use.
- Don't try to require parent PeerTube modules, only use peertubeHelpers.
- If your plugin is broken with a new PeerTube release, update your code and the peertubeEngine
  field of your package.json field.
- Plugins can register settings that PeerTube will inject in the administration interface.
- Plugins can store/load JSON data, that PeerTube will store in its database.
- Use peertubeHelpers.getAuthHeader() to set the auth header in requests.
- The PeerTube API should not be exposed directly to the internet.
- Only one session token can currently be used at a time.
- Uses OAuth2
- Uses OAuth2 for authentication
- Requires setup of OAuth2 for authentication
- Some fields may return null values.
- Uses OAuth2 — requires setup of connected app in PeerTube
- isLiveBroadcast is false
- Dependencies guide is maintained by the community. Some parts may be outdated!
- Videos will be publicly available after transcoding.
- The runner uses env paths like ~/.config, ~/.cache and ~/.local/share directories
  to store runner configuration or temporary files.
- Currently, there are no Arch packages available for RC or nightly builds of PeerTube.
- PeerTube has a built-in videos redundancy system, allowing an platform to duplicate
  and serve videos of another platform.
- Multiple PeerTube runners can run on the same OS by using the --id CLI option
- The runner uses a websocket connection with the PeerTube instance to be notified
  about new available transcoding jobs.
- PeerTube requires running Node.js and npm commands.
- Changing the hostname may be risky if already federated.
- This API includes custom objects such as WatchAction not part of standard ActivityPub.
errors:
- 'REQUEST_LIMIT_EXCEEDED: Throttle API calls or reduce frequency'
- 'QUERY_TIMEOUT: Break down filters or add selectivity'
- '401 Unauthorized: Recheck OAuth scopes or token expiration'
- If you have trouble with uploads to object storing failing, you can try lowering
  the part size.
- '401 Unauthorized: Recheck basic auth username or password'
- '401 Unauthorized: Check if the user is authenticated.'
- '200: successful operation'
- '404 Not Found: Video not found'
- '403 Forbidden: Cannot get this video regarding follow constraints'
- '400 Bad Request: Incorrect request parameters'
auth_info:
  mentioned_objects:
  - OauthToken
  - AuthProvider
  - NamedCredential
  - Basic Auth
  - peertubeHelpers
  - Oauth2
  - oauth-clients
  - users
  - runnerToken
client:
  base_url: https://peertube.cpy.re
  auth:
    type: oauth2
  headers:
    Content-Type: application/json
source_metadata: null
