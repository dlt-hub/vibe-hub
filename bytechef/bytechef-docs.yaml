resources:
- name: ask
  endpoint:
    path: /ollama/v1/ask
    method: POST
- name: createCompany
  endpoint:
    path: /accelo/v1/createCompany
    method: POST
    data_selector: response
    params: {}
- name: createContact
  endpoint:
    path: /accelo/v1/createContact
    method: POST
    data_selector: response
    params: {}
- name: createTask
  endpoint:
    path: /accelo/v1/createTask
    method: POST
    data_selector: response
    params: {}
- name: createAccount
  endpoint:
    path: /v1/createAccount
    method: POST
    data_selector: account
- name: createContact
  endpoint:
    path: /v1/createContact
    method: POST
    data_selector: contact
- name: createTask
  endpoint:
    path: /v1/createTask
    method: POST
    data_selector: dealTask
- name: addSubscriber
  endpoint:
    path: /acumbamail/v1/addSubscriber
    method: POST
    data_selector: parameters
    params:
      list_id: List Id
- name: deleteSubscriber
  endpoint:
    path: /acumbamail/v1/deleteSubscriber
    method: POST
    data_selector: parameters
    params:
      list_id: List Id
      email: Email
- name: createSubscriberList
  endpoint:
    path: /acumbamail/v1/createSubscriberList
    method: POST
    data_selector: parameters
    params:
      email: Email
      name: Name
      company: Company
      country: Country
      city: City
      address: Address
      phone: Phone
- name: deleteSubscriberList
  endpoint:
    path: /acumbamail/v1/deleteSubscriberList
    method: POST
    data_selector: parameters
    params:
      list_id: List Id
- name: createOpportunity
  endpoint:
    path: affinity/v1/createOpportunity
    method: POST
- name: createOrganization
  endpoint:
    path: affinity/v1/createOrganization
    method: POST
- name: createPerson
  endpoint:
    path: affinity/v1/createPerson
    method: POST
- name: createContact
  endpoint:
    path: /v1/createContact
    method: POST
    data_selector: parameters
- name: createDeal
  endpoint:
    path: /agileCrm/v1/crateDeal
    method: POST
    data_selector: parameters
- name: createTask
  endpoint:
    path: /agileCrm/v1/createTask
    method: POST
    data_selector: parameters
- name: createFeature
  endpoint:
    path: /v1/features
    method: POST
- name: createIdea
  endpoint:
    path: /v1/ideas
    method: POST
- name: getMetrics
  endpoint:
    path: /getMetrics
    method: GET
    data_selector: metrics
- name: getSubscriptionInfo
  endpoint:
    path: /getSubscriptionInfo
    method: GET
    data_selector: limits_and_usage
- name: getPageContent
  endpoint:
    path: /getPageContent
    method: GET
    data_selector: page-content
- name: createRecord
  endpoint:
    path: /v1/createRecord
    method: POST
    data_selector: parameters
    params:
      baseId: ''
      tableId: ''
      fields: {}
- name: deleteRecord
  endpoint:
    path: /v1/deleteRecord
    method: DELETE
    data_selector: parameters
    params:
      baseId: ''
      tableId: ''
      recordId: ''
- name: getRecord
  endpoint:
    path: /v1/getRecord
    method: GET
    data_selector: parameters
    params:
      baseId: ''
      tableId: ''
      recordId: ''
- name: newRecord
  endpoint:
    path: /v1/newRecord
    method: POST
    data_selector: parameters
    params:
      baseId: ''
      tableId: ''
      triggerField: ''
- name: createRecord
  endpoint:
    path: /aitable/v1/createRecord
    method: POST
    data_selector: ''
    params:
      spaceId: ''
      datasheetId: ''
      fields: {}
- name: findRecords
  endpoint:
    path: /aitable/v1/findRecords
    method: POST
    data_selector: ''
    params:
      spaceId: ''
      datasheetId: ''
      fields: []
      recordIds: []
      maxRecords: 1
- name: updateRecord
  endpoint:
    path: /aitable/v1/updateRecord
    method: POST
    data_selector: ''
    params:
      spaceId: ''
      datasheetId: ''
      recordId: ''
      fields: {}
- name: createAttributionEvent
  endpoint:
    path: /v1/createAttributionEvent
    method: POST
    data_selector: output
    params: {}
- name: createOrUpdateUser
  endpoint:
    path: /v1/createOrUpdateUser
    method: POST
    data_selector: output
    params: {}
- name: createAttributionEvent
  endpoint:
    path: /v1/createAttributionEvent
    method: POST
- name: createOrUpdateUser
  endpoint:
    path: /v1/createOrUpdateUser
    method: POST
- name: ask
  endpoint:
    path: /ask
    method: POST
    data_selector: response
    params: {}
- name: getLastRun
  endpoint:
    path: /getLastRun
    method: POST
    data_selector: output
    params:
      actorId: ''
- name: startActor
  endpoint:
    path: /startActor
    method: POST
    data_selector: output
    params:
      actorId: ''
      body: ''
- name: updateDeal
  endpoint:
    path: /apollo/v1/updateDeal
    method: POST
    data_selector: opportunity
    params: {}
- name: createDeal
  endpoint:
    path: /apollo/v1/createDeal
    method: POST
    data_selector: opportunity
    params: {}
- name: enrichPerson
  endpoint:
    path: /apollo/v1/enrichPerson
    method: POST
    data_selector: person
    params: {}
- name: enrichCompany
  endpoint:
    path: /apollo/v1/enrichCompany
    method: POST
    data_selector: organization
    params: {}
- name: newEvent
  endpoint:
    path: /appEvent/v1/newEvent
    method: POST
    data_selector: parameters
    params:
      appEventId: INTEGER
- name: createApprovalLinks
  endpoint:
    path: /createApprovalLinks
    method: POST
    data_selector: output
- name: createRecord
  endpoint:
    path: /attio/v1/createRecord
    method: POST
    data_selector: data
- name: createTask
  endpoint:
    path: /attio/v1/createTask
    method: POST
    data_selector: data
- name: updateRecord
  endpoint:
    path: /attio/v1/updateRecord
    method: POST
    data_selector: data
- name: recordCreated
  endpoint:
    path: /attio/v1/recordCreated
    method: POST
    data_selector: data
- name: taskCreated
  endpoint:
    path: /attio/v1/taskCreated
    method: POST
    data_selector: data
- name: getObject
  endpoint:
    path: awsS3/v1/getObject
    method: GET
    data_selector: parameters
    params:
      filename: ''
      key: ''
- name: getUrl
  endpoint:
    path: awsS3/v1/getUrl
    method: GET
    data_selector: parameters
    params:
      key: ''
- name: listObjects
  endpoint:
    path: awsS3/v1/listObjects
    method: GET
    data_selector: parameters
    params:
      prefix: ''
- name: presignGetObject
  endpoint:
    path: awsS3/v1/presignGetObject
    method: GET
    data_selector: parameters
    params:
      key: ''
      signatureDuration: ''
- name: putObject
  endpoint:
    path: awsS3/v1/putObject
    method: PUT
    data_selector: parameters
    params:
      fileEntry:
        extension: ''
        mimeType: ''
        name: ''
        url: ''
      key: ''
      acl: ''
- name: ask
  endpoint:
    path: /azureOpenAi/v1/ask
    method: POST
    data_selector: parameters
    params: {}
- name: createImage
  endpoint:
    path: /azureOpenAi/v1/createImage
    method: POST
    data_selector: parameters
    params: {}
- name: createTranscription
  endpoint:
    path: /azureOpenAi/v1/createTranscription
    method: POST
    data_selector: parameters
    params: {}
- name: createEmployee
  endpoint:
    path: /createEmployee
    method: POST
    data_selector: output
    params: {}
- name: updateEmployee
  endpoint:
    path: /updateEmployee
    method: PUT
    data_selector: output
    params: {}
- name: getEmployee
  endpoint:
    path: /getEmployee
    method: GET
    data_selector: output
    params: {}
- name: updateEmployeeFile
  endpoint:
    path: /updateEmployeeFile
    method: PUT
    data_selector: output
    params: {}
- name: updatedEmployee
  endpoint:
    path: /updatedEmployee
    method: POST
    data_selector: output
    params: {}
- name: newEmployee
  endpoint:
    path: /newEmployee
    method: POST
    data_selector: output
    params: {}
- name: createRow
  endpoint:
    path: baserow/v1/createRow
    method: POST
    data_selector: parameters
- name: deleteRow
  endpoint:
    path: baserow/v1/deleteRow
    method: DELETE
    data_selector: parameters
- name: getRow
  endpoint:
    path: baserow/v1/getRow
    method: GET
    data_selector: parameters
- name: listRows
  endpoint:
    path: baserow/v1/listRows
    method: GET
    data_selector: parameters
- name: updateRow
  endpoint:
    path: baserow/v1/updateRow
    method: PUT
    data_selector: parameters
- name: execute
  endpoint:
    path: /execute
    method: POST
    data_selector: parameters
    params:
      script: ''
- name: createFeatureRequest
  endpoint:
    path: /beamer/v1/createFeatureRequest
    method: POST
    data_selector: output
    params: {}
- name: createPost
  endpoint:
    path: /beamer/v1/createPost
    method: POST
    data_selector: output
    params: {}
- name: getFeed
  endpoint:
    path: /beamer/v1/getFeed
    method: GET
    data_selector: output
    params: {}
- name: newComment
  endpoint:
    path: /beamer/v1/newComment
    method: POST
    data_selector: output
    params: {}
- name: newVote
  endpoint:
    path: /beamer/v1/newVote
    method: POST
    data_selector: output
    params: {}
- name: newPost
  endpoint:
    path: /beamer/v1/newPost
    method: GET
    data_selector: output
    params: {}
- name: fetch_pair_price
  endpoint:
    path: /fetchPairPrice
    method: GET
    data_selector: parameters
    params:
      symbol: ''
- name: createRepository
  endpoint:
    path: /bitbucket/v1/createRepository
    method: POST
- name: createProject
  endpoint:
    path: /bitbucket/v1/createProject
    method: POST
- name: listProjects
  endpoint:
    path: /bitbucket/v1/listProjects
    method: GET
- name: listRepositories
  endpoint:
    path: /bitbucket/v1/listRepositories
    method: GET
    data_selector: items
    params:
      workspace: ''
- name: repositoryPush
  endpoint:
    path: /bitbucket/v1/repositoryPush
    method: POST
    data_selector: parameters
    params:
      workspace: ''
      repository: ''
- name: makePhoneCall
  endpoint:
    path: /makePhoneCall
    method: POST
    data_selector: response
    params: {}
- name: callCompletionReport
  endpoint:
    path: /callCompletionReport
    method: POST
    data_selector: response
    params: {}
- name: createContact
  endpoint:
    path: /v1/createContact
    method: POST
    data_selector: id
- name: updateContact
  endpoint:
    path: /v1/updateContact
    method: POST
    data_selector: ''
- name: sendTransactionalEmail
  endpoint:
    path: /v1/sendTransactionalEmail
    method: POST
    data_selector: messageId
- name: bookingCanceled
  endpoint:
    path: /calcom/v1/bookingCanceled
    method: POST
    data_selector: properties
- name: bookingCreated
  endpoint:
    path: /calcom/v1/bookingCreated
    method: POST
    data_selector: properties
- name: bookingEnded
  endpoint:
    path: /calcom/v1/bookingEnded
    method: POST
    data_selector: properties
- name: bookingRescheduled
  endpoint:
    path: /v1/bookingRescheduled
    method: POST
    data_selector: output
- name: bookingCanceled
  endpoint:
    path: /v1/bookingCanceled
    method: POST
- name: bookingCreated
  endpoint:
    path: /v1/bookingCreated
    method: POST
- name: bookingEnded
  endpoint:
    path: /v1/bookingEnded
    method: POST
- name: bookingRescheduled
  endpoint:
    path: /v1/bookingRescheduled
    method: POST
- name: booking
  endpoint:
    path: /api/v1/bookings
    method: GET
    data_selector: bookings
- name: responseToRequest
  endpoint:
    path: /chat/v1/responseToRequest
    method: POST
    data_selector: output
- name: newChatRequest
  endpoint:
    path: /chat/v1/newChatRequest
    method: POST
    data_selector: output
- name: createList
  endpoint:
    path: /createList
    method: POST
- name: createTask
  endpoint:
    path: /createTask
    method: POST
- name: createFolder
  endpoint:
    path: /createFolder
    method: POST
- name: newList
  endpoint:
    path: /newList
    method: GET
- name: newTask
  endpoint:
    path: /newTask
    method: GET
- name: listDocs
  endpoint:
    path: /v1/listDocs
    method: GET
    data_selector: items
- name: copyDoc
  endpoint:
    path: /v1/copyDoc
    method: POST
    data_selector: id
- name: updateRow
  endpoint:
    path: /v1/updateRow
    method: PUT
    data_selector: requestId
- name: insertRow
  endpoint:
    path: /v1/insertRow
    method: POST
    data_selector: requestId
- name: sendSms
  endpoint:
    path: /sendSms
    method: POST
- name: sendEmail
  endpoint:
    path: /sendEmail
    method: POST
- name: createActivity
  endpoint:
    path: /copper/v1/createActivity
    method: POST
- name: createCompany
  endpoint:
    path: /copper/v1/createCompany
    method: POST
- name: createPerson
  endpoint:
    path: /copper/v1/createPerson
    method: POST
- name: createTask
  endpoint:
    path: /createTask
    method: POST
    data_selector: parameters
- name: hash
  endpoint:
    path: /cryptoHelper/v1/hash
    method: POST
    data_selector: hash
    params:
      algorithm: ''
      input: ''
- name: hmac
  endpoint:
    path: /cryptoHelper/v1/hmac
    method: POST
    data_selector: hmac
    params:
      algorithm: ''
      input: ''
      key: ''
- name: pgpDecrypt
  endpoint:
    path: /cryptoHelper/v1/pgpDecrypt
    method: POST
    data_selector: pgpDecrypt
    params:
      privateKey: ''
      file:
        extension: ''
        mimeType: ''
        name: ''
        url: ''
      passphrase: ''
- name: pgpEncrypt
  endpoint:
    path: /cryptoHelper/v1/pgpEncrypt
    method: POST
    data_selector: pgpEncrypt
    params:
      publicKey: ''
      file:
        extension: ''
        mimeType: ''
        name: ''
        url: ''
- name: rsaDecrypt
  endpoint:
    path: /cryptoHelper/v1/rsaDecrypt
    method: POST
    data_selector: rsaDecrypt
    params:
      privateKey: ''
      file:
        extension: ''
        mimeType: ''
        name: ''
        url: ''
- name: rsaEncrypt
  endpoint:
    path: /cryptoHelper/v1/rsaEncrypt
    method: POST
    data_selector: rsaEncrypt
    params:
      publicKey: ''
      file:
        extension: ''
        mimeType: ''
        name: ''
        url: ''
- name: sign
  endpoint:
    path: /cryptoHelper/v1/sign
    method: POST
    data_selector: sign
    params:
      privateKey: ''
      file:
        extension: ''
        mimeType: ''
        name: ''
        url: ''
- name: verify
  endpoint:
    path: /cryptoHelper/v1/verify
    method: POST
    data_selector: verify
    params:
      publicKey: ''
      file:
        extension: ''
        mimeType: ''
        name: ''
        url: ''
      signature:
        extension: ''
        mimeType: ''
        name: ''
        url: ''
- name: hash
  endpoint:
    path: hash
    method: POST
    data_selector: output
    params: {}
- name: hmac
  endpoint:
    path: hmac
    method: POST
    data_selector: output
    params: {}
- name: pgpDecrypt
  endpoint:
    path: pgpDecrypt
    method: POST
    data_selector: output
    params: {}
- name: pgpEncrypt
  endpoint:
    path: pgpEncrypt
    method: POST
    data_selector: output
    params: {}
- name: rsaDecrypt
  endpoint:
    path: rsaDecrypt
    method: POST
    data_selector: output
    params: {}
- name: rsaEncrypt
  endpoint:
    path: rsaEncrypt
    method: POST
    data_selector: output
    params: {}
- name: sign
  endpoint:
    path: sign
    method: POST
    data_selector: output
    params: {}
- name: verify
  endpoint:
    path: verify
    method: POST
    data_selector: output
    params: {}
- name: read
  endpoint:
    path: /csvFile/v1/read
    method: GET
    data_selector: ''
    params:
      fileEntry: {}
      delimiter: ''
      enclosingCharacter: ''
      headerRow: false
      includeEmptyCells: false
      pageSize: 1
      pageNumber: 1
      readAsString: false
- name: write
  endpoint:
    path: /csvFile/v1/write
    method: POST
    data_selector: ''
    params:
      rows:
      - {}
      filename: ''
- name: appendValueToList
  endpoint:
    path: /dataStorage/v1/appendValueToList
    method: POST
- name: atomicIncrement
  endpoint:
    path: /dataStorage/v1/atomicIncrement
    method: POST
- name: awaitGetValue
  endpoint:
    path: /dataStorage/v1/awaitGetValue
    method: POST
- name: deleteValue
  endpoint:
    path: /dataStorage/v1/deleteValue
    method: POST
- name: deleteValueFromlist
  endpoint:
    path: /dataStorage/v1/deleteValueFromlist
    method: POST
- name: getAllEntries
  endpoint:
    path: /dataStorage/v1/getAllEntries
    method: GET
- name: getValue
  endpoint:
    path: /dataStorage/v1/getValue
    method: GET
- name: setValue
  endpoint:
    path: dataStorage/v1/setValue
    method: POST
    data_selector: ''
    params: {}
- name: setValueInList
  endpoint:
    path: dataStorage/v1/setValueInList
    method: POST
    data_selector: ''
    params: {}
- name: addTime
  endpoint:
    path: /dateHelper/v1/addTime
    method: POST
    data_selector: parameters
- name: convertUnixTimestampToIso8601
  endpoint:
    path: /dateHelper/v1/convertUnixTimestampToIso8601
    method: POST
    data_selector: parameters
- name: dateDifference
  endpoint:
    path: /dateHelper/v1/dateDifference
    method: POST
    data_selector: parameters
- name: extractDateUnits
  endpoint:
    path: /dateHelper/v1/extractDateUnits
    method: POST
    data_selector: parameters
- name: getCurrentDate
  endpoint:
    path: /dateHelper/v1/getCurrentDate
    method: POST
    data_selector: parameters
- name: isBusinessHours
  endpoint:
    path: /dateHelper/v1/isBusinessHours
    method: POST
    data_selector: parameters
- name: isWeekend
  endpoint:
    path: /dateHelper/v1/isWeekend
    method: POST
    data_selector: parameters
- name: subtractTime
  endpoint:
    path: /dateHelper/v1/subtractTime
    method: POST
    data_selector: parameters
- name: ask
  endpoint:
    path: /ask
    method: POST
- name: sleep
  endpoint:
    path: /delay/v1/sleep
    method: POST
    data_selector: ''
    params: {}
- name: sendChannelMessage
  endpoint:
    path: /v1/sendChannelMessage
    method: POST
    data_selector: parameters
    params: {}
- name: createChannel
  endpoint:
    path: /v1/createChannel
    method: POST
    data_selector: parameters
    params: {}
- name: sendDirectMessage
  endpoint:
    path: /v1/sendDirectMessage
    method: POST
    data_selector: parameters
    params: {}
- name: createEnvelope
  endpoint:
    path: /docusign/v1/createEnvelope
    method: POST
    data_selector: parameters
- name: downloadEnvelopeDocument
  endpoint:
    path: /docusign/v1/downloadEnvelopeDocument
    method: POST
    data_selector: parameters
- name: createEnvelope
  endpoint:
    path: /v1/envelopes
    method: POST
    data_selector: envelopeid
- name: downloadEnvelopeDocument
  endpoint:
    path: /v1/envelopes/{envelopeId}/documents/{documentId}
    method: GET
    data_selector: url
- name: copy
  endpoint:
    path: /dropbox/v1/copy
    method: POST
- name: createFolder
  endpoint:
    path: /dropbox/v1/createFolder
    method: POST
- name: createTextFile
  endpoint:
    path: /dropbox/v1/createTextFile
    method: POST
- name: delete
  endpoint:
    path: /dropbox/v1/delete
    method: POST
- name: getFileLink
  endpoint:
    path: /dropbox/v1/getFileLink
    method: POST
- name: listFolder
  endpoint:
    path: /dropbox/v1/listFolder
    method: POST
- name: move
  endpoint:
    path: /dropbox/v1/move
    method: POST
- name: search
  endpoint:
    path: /v1/search
    method: POST
    data_selector: matches
    params:
      query: ''
- name: uploadFile
  endpoint:
    path: /v1/uploadFile
    method: POST
    data_selector: ''
    params: {}
- name: createSoundEffect
  endpoint:
    path: /v1/createSoundEffect
    method: POST
    data_selector: parameters
    params: {}
- name: createSpeech
  endpoint:
    path: /v1/createSpeech
    method: POST
    data_selector: parameters
    params: {}
- name: createSpeechWithTiming
  endpoint:
    path: /v1/createSpeechWithTiming
    method: POST
    data_selector: parameters
    params: {}
- name: createTranscript
  endpoint:
    path: /v1/createTranscript
    method: POST
    data_selector: parameters
    params: {}
- name: send
  endpoint:
    path: /email/v1/send
    method: POST
    data_selector: parameters
    params: {}
- name: get
  endpoint:
    path: /email/v1/get
    method: GET
    data_selector: parameters
    params: {}
- name: getComments
  endpoint:
    path: /figma/v1/getComments
    method: GET
    data_selector: comments
    params:
      fileKey: ''
- name: postComment
  endpoint:
    path: /figma/v1/postComment
    method: POST
    data_selector: comment
    params:
      fileKey: ''
      message: ''
- name: read
  endpoint:
    path: /fileStorage/v1/read
    method: POST
    data_selector: parameters
    params:
      fileEntry:
        required: true
- name: write
  endpoint:
    path: /fileStorage/v1/write
    method: POST
    data_selector: parameters
    params:
      content:
        required: true
      filename:
        required: false
- name: download
  endpoint:
    path: /fileStorage/v1/download
    method: POST
    data_selector: parameters
    params:
      url:
        required: true
      filename:
        required: false
- name: createTempDir
  endpoint:
    path: /filesystem/v1/createTempDir
    method: POST
- name: mkdir
  endpoint:
    path: /filesystem/v1/mkdir
    method: POST
- name: getFilePath
  endpoint:
    path: /filesystem/v1/getFilePath
    method: POST
- name: ls
  endpoint:
    path: /filesystem/v1/ls
    method: POST
- name: readFile
  endpoint:
    path: /filesystem/v1/readFile
    method: POST
- name: rm
  endpoint:
    path: /filesystem/v1/rm
    method: POST
- name: writeFile
  endpoint:
    path: /filesystem/v1/writeFile
    method: POST
- name: createCompany
  endpoint:
    path: /api/v2/companies
    method: POST
    data_selector: id
- name: createContact
  endpoint:
    path: /api/v2/contacts
    method: POST
    data_selector: id
- name: createTicket
  endpoint:
    path: /api/v2/tickets
    method: POST
    data_selector: id
- name: createAccount
  endpoint:
    path: /freshsales/v1/createAccount
    method: POST
- name: createContact
  endpoint:
    path: /freshsales/v1/createContact
    method: POST
- name: createLead
  endpoint:
    path: /freshsales/v1/createLead
    method: POST
- name: addAssigneesToIssue
  endpoint:
    path: /github/v1/addAssigneesToIssue
    method: POST
- name: addLabelsToIssue
  endpoint:
    path: /github/v1/addLabelsToIssue
    method: POST
- name: createCommentOnIssue
  endpoint:
    path: /github/v1/createCommentOnIssue
    method: POST
- name: createIssue
  endpoint:
    path: /github/v1/createIssue
    method: POST
- name: getIssue
  endpoint:
    path: /github/v1/getIssue
    method: GET
- name: listIssues
  endpoint:
    path: /github/v1/listIssues
    method: GET
    data_selector: parameters
    params:
      filter: ''
      state: ''
- name: listRepositoryIssues
  endpoint:
    path: /github/v1/listRepositoryIssues
    method: GET
    data_selector: parameters
    params:
      repository: ''
- name: starRepository
  endpoint:
    path: /github/v1/starRepository
    method: POST
    data_selector: parameters
    params:
      owner: ''
      repository: ''
- name: newIssue
  endpoint:
    path: /github/v1/newIssue
    method: POST
    data_selector: parameters
    params:
      repository: ''
- name: newPullRequest
  endpoint:
    path: /github/v1/newPullRequest
    method: POST
    data_selector: parameters
    params:
      repository: ''
- name: createIssue
  endpoint:
    path: /v1/createIssue
    method: POST
    data_selector: parameters
    params: {}
- name: createCommentOnIssue
  endpoint:
    path: /v1/createCommentOnIssue
    method: POST
    data_selector: parameters
    params: {}
- name: newIssue
  endpoint:
    path: /v1/newIssue
    method: POST
    data_selector: parameters
    params: {}
- name: addAttendeesToEvent
  endpoint:
    path: /googleCalendar/v1/addAttendeesToEvent
    method: POST
    data_selector: parameters
    params:
      calendarId: ''
      eventId: ''
      attendees: []
- name: createEvent
  endpoint:
    path: /googleCalendar/v1/createEvent
    method: POST
    data_selector: parameters
    params:
      calendarId: ''
      allDay: true
      start: ''
      end: ''
      useDefault: true
- name: createQuickEvent
  endpoint:
    path: /googleCalendar/v1/createQuickEvent
    method: POST
    data_selector: parameters
- name: deleteEvent
  endpoint:
    path: /googleCalendar/v1/deleteEvent
    method: DELETE
    data_selector: parameters
- name: getEvents
  endpoint:
    path: /googleCalendar/v1/getEvents
    method: GET
    data_selector: parameters
- name: getFreeTimeSlots
  endpoint:
    path: /googleCalendar/v1/getFreeTimeSlots
    method: GET
    data_selector: parameters
- name: updateEvent
  endpoint:
    path: /googleCalendar/v1/updateEvent
    method: PUT
    data_selector: parameters
- name: newOrUpdatedEvent
  endpoint:
    path: /googleCalendar/v1/newOrUpdatedEvent
    method: POST
    data_selector: parameters
- name: createMessage
  endpoint:
    path: /v1/createMessage
    method: POST
    data_selector: parameters
- name: createSpace
  endpoint:
    path: /v1/createSpace
    method: POST
    data_selector: parameters
- name: createMessage
  endpoint:
    path: /v1/createMessage
    method: POST
    data_selector: parameters
    params:
      SPACE: ''
      text: ''
- name: createSpace
  endpoint:
    path: /v1/createSpace
    method: POST
    data_selector: parameters
    params:
      displayName: ''
- name: createContact
  endpoint:
    path: googleContacts/v1/createContact
    method: POST
- name: createGroup
  endpoint:
    path: googleContacts/v1/createGroup
    method: POST
- name: updateContact
  endpoint:
    path: googleContacts/v1/updateContact
    method: PATCH
- name: searchContacts
  endpoint:
    path: googleContacts/v1/searchContacts
    method: GET
- name: createDocument
  endpoint:
    path: /googleDocs/v1/createDocument
    method: POST
- name: createDocumentFromTemplate
  endpoint:
    path: /googleDocs/v1/createDocumentFromTemplate
    method: POST
- name: getDocument
  endpoint:
    path: /googleDocs/v1/getDocument
    method: GET
- name: getAllResponses
  endpoint:
    path: googleForms/v1/getAllResponses
    method: POST
    data_selector: parameters
    params:
      formId: ''
- name: getForm
  endpoint:
    path: googleForms/v1/getForm
    method: POST
    data_selector: parameters
    params:
      formId: ''
- name: getResponse
  endpoint:
    path: googleForms/v1/getResponse
    method: POST
    data_selector: parameters
    params:
      formId: ''
      responseId: ''
- name: newResponse
  endpoint:
    path: googleForms/v1/newResponse
    method: POST
    data_selector: parameters
    params:
      formId: ''
- name: createMeetingSpace
  endpoint:
    path: /googleMeet/v1/createMeetingSpace
    method: POST
- name: getMeetingSpace
  endpoint:
    path: /googleMeet/v1/getMeetingSpace
    method: GET
- name: listParticipants
  endpoint:
    path: /googleMeet/v1/listParticipants
    method: GET
- name: createPresentationBasedOnTemplate
  endpoint:
    path: /v1/presentations
    method: POST
    data_selector: presentationId
- name: sendMessage
  endpoint:
    path: /v1/sendMessage
    method: POST
    data_selector: ''
    params: {}
- name: sendMessage
  endpoint:
    path: /message
    method: POST
    data_selector: id
    params: {}
- name: rawQuery
  endpoint:
    path: ''
    method: ''
    data_selector: ''
    params: {}
- name: ask
  endpoint:
    path: /ask
    method: POST
- name: fetchTopStories
  endpoint:
    path: /topstories.json
    method: GET
    data_selector: items
- name: get
  endpoint:
    path: uri
    method: GET
- name: post
  endpoint:
    path: uri
    method: POST
- name: put
  endpoint:
    path: uri
    method: PUT
- name: patch
  endpoint:
    path: /patch
    method: PATCH
    params: {}
- name: delete
  endpoint:
    path: /delete
    method: DELETE
    params: {}
- name: head
  endpoint:
    path: /head
    method: HEAD
    params: {}
- name: getContact
  endpoint:
    path: /hubspot/v1/getContact
    method: GET
    data_selector: properties
- name: updateContact
  endpoint:
    path: /hubspot/v1/updateContact
    method: PUT
    data_selector: properties
- name: createContact
  endpoint:
    path: /hubspot/v1/createContact
    method: POST
    data_selector: properties
- name: deleteContact
  endpoint:
    path: /hubspot/v1/deleteContact
    method: DELETE
    data_selector: contactId
- name: newContact
  endpoint:
    path: /hubspot/v1/newContact
    method: POST
    data_selector: appId
- name: ask
  endpoint:
    path: /ask
    method: POST
    data_selector: ''
    params: {}
- name: emailEnrichment
  endpoint:
    path: /v1/emailEnrichment
    method: GET
    data_selector: data
    params:
      email: ''
- name: companyEnrichment
  endpoint:
    path: /v1/companyEnrichment
    method: GET
    data_selector: data
    params:
      domain: ''
- name: combinedEnrichment
  endpoint:
    path: /v1/combinedEnrichment
    method: GET
    data_selector: data
    params:
      email: ''
- name: createLead
  endpoint:
    path: /v1/createLead
    method: POST
    data_selector: data
    params:
      email: ''
      first_name: ''
      last_name: ''
      position: ''
      company: ''
      phone_number: ''
      lead_list_id: ''
- name: compressImage
  endpoint:
    path: imageHelper/v1/compressImage
    method: POST
    data_selector: parameters
    params: {}
- name: cropImage
  endpoint:
    path: imageHelper/v1/cropImage
    method: POST
    data_selector: parameters
    params: {}
- name: getImageMetadata
  endpoint:
    path: imageHelper/v1/getImageMetadata
    method: POST
    data_selector: parameters
    params: {}
- name: imageToBase64
  endpoint:
    path: imageHelper/v1/imageToBase64
    method: POST
    data_selector: parameters
    params: {}
- name: resizeImage
  endpoint:
    path: imageHelper/v1/resizeImage
    method: POST
    data_selector: parameters
    params: {}
- name: rotateImage
  endpoint:
    path: imageHelper/v1/rotateImage
    method: POST
    data_selector: parameters
    params: {}
- name: sendSMS
  endpoint:
    path: /v1/sendSMS
    method: POST
    data_selector: messages
    params: {}
- name: sendWhatsappTemplateMessage
  endpoint:
    path: /v1/sendWhatsappTemplateMessage
    method: POST
    data_selector: messages
    params: {}
- name: sendWhatsappTextMessage
  endpoint:
    path: /v1/sendWhatsappTextMessage
    method: POST
    data_selector: messages
    params: {}
- name: newSMS
  endpoint:
    path: /v1/newSMS
    method: POST
    data_selector: messages
    params: {}
- name: newWhatsappMessage
  endpoint:
    path: /v1/newWhatsappMessage
    method: POST
    data_selector: messages
    params: {}
- name: createContact
  endpoint:
    path: /v1/createContact
    method: POST
    data_selector: CONTACT_ID
    params: {}
- name: createOrganization
  endpoint:
    path: /v1/createOrganization
    method: POST
    data_selector: ORGANISATION_ID
    params: {}
- name: createTask
  endpoint:
    path: /v1/createTask
    method: POST
    data_selector: TASK_ID
    params: {}
- name: createContact
  endpoint:
    path: /intercom/v1/createContact
    method: POST
    data_selector: parameters
- name: getContact
  endpoint:
    path: /intercom/v1/getContact
    method: GET
    data_selector: parameters
- name: sendMessage
  endpoint:
    path: /intercom/v1/sendMessage
    method: POST
    data_selector: parameters
- name: createIssue
  endpoint:
    path: /jira/v1/createIssue
    method: POST
    data_selector: id
    params: {}
- name: createIssueComment
  endpoint:
    path: /jira/v1/createIssueComment
    method: POST
    data_selector: id
    params: {}
- name: getIssue
  endpoint:
    path: /jira/v1/getIssue
    method: GET
    data_selector: id
    params: {}
- name: searchForIssuesUsingJql
  endpoint:
    path: /jira/v1/searchForIssuesUsingJql
    method: GET
    data_selector: ''
    params:
      maxResults: 1
- name: newIssue
  endpoint:
    path: /jira/v1/newIssue
    method: POST
    data_selector: id
    params: {}
- name: updatedIssue
  endpoint:
    path: /jira/v1/updatedIssue
    method: POST
    data_selector: id
    params: {}
- name: getFormSubmissions
  endpoint:
    path: /getFormSubmissions
    method: GET
    data_selector: content
    params:
      formId: ''
- name: read
  endpoint:
    path: /read
    method: POST
    data_selector: parameters
    params:
      fileType: JSON
      fileEntry: {}
      isArray: false
      path: ''
      pageSize: 1
      pageNumber: 1
- name: write
  endpoint:
    path: /write
    method: POST
    data_selector: parameters
    params:
      fileType: JSON
      type: OBJECT
      source: []
      filename: file.json
- name: Convert from JSON String
  endpoint:
    path: /convert/from/json
    method: POST
    data_selector: output
    params:
      source: string
- name: Convert to JSON String
  endpoint:
    path: /convert/to/json
    method: POST
    data_selector: output
    params:
      type: OBJECT
      source: {}
- name: sign
  endpoint:
    path: jwtHelper/v1/sign
    method: POST
    data_selector: parameters
- name: verify
  endpoint:
    path: jwtHelper/v1/verify
    method: POST
    data_selector: parameters
- name: createCompany
  endpoint:
    path: /keap/v1/createCompany
    method: POST
    data_selector: parameters
    params: {}
- name: createTask
  endpoint:
    path: /keap/v1/createTask
    method: POST
    data_selector: parameters
    params: {}
- name: createContact
  endpoint:
    path: /keap/v1/createContact
    method: POST
    data_selector: parameters
    params: {}
- name: getLists
  endpoint:
    path: /klaviyo/v1/getLists
    method: GET
    data_selector: data
    params: {}
- name: subscribeProfiles
  endpoint:
    path: /klaviyo/v1/subscribeProfiles
    method: POST
    data_selector: data
    params: {}
- name: updateProfile
  endpoint:
    path: /klaviyo/v1/updateProfile
    method: PUT
    data_selector: data
    params: {}
- name: createIssue
  endpoint:
    path: /linear/v1/createIssue
    method: POST
- name: updateIssue
  endpoint:
    path: /linear/v1/updateIssue
    method: POST
- name: createProject
  endpoint:
    path: /linear/v1/createProject
    method: POST
- name: updateProject
  endpoint:
    path: /linear/v1/updateProject
    method: POST
- name: createComment
  endpoint:
    path: /linear/v1/createComment
    method: POST
- name: rawGraphqlQuery
  endpoint:
    path: /linear/v1/rawGraphqlQuery
    method: POST
- name: newIssue
  endpoint:
    path: /linear/v1/newIssue
    method: POST
- name: updatedIssue
  endpoint:
    path: /linear/v1/updatedIssue
    method: POST
- name: removedIssue
  endpoint:
    path: /v1/removedIssue
    method: POST
    data_selector: parameters
- name: debug
  endpoint:
    path: /logger/v1/debug
    method: POST
- name: error
  endpoint:
    path: /logger/v1/error
    method: POST
- name: info
  endpoint:
    path: /logger/v1/info
    method: POST
- name: warn
  endpoint:
    path: /logger/v1/warn
    method: POST
- name: addMemberToList
  endpoint:
    path: /mailchimp/v1/addMemberToList
    method: POST
- name: subscribe
  endpoint:
    path: /mailchimp/v1/subscribe
    method: POST
- name: addSubscriberToGroup
  endpoint:
    path: /mailerLite/v1/addSubscriberToGroup
    method: POST
- name: createOrUpdateSubscriber
  endpoint:
    path: /mailerLite/v1/createOrUpdateSubscriber
    method: POST
- name: removeSubscriberFromGroup
  endpoint:
    path: /mailerLite/v1/removeSubscriberFromGroup
    method: POST
- name: subscriberAddedToGroup
  endpoint:
    path: /mailerLite/v1/subscriberAddedToGroup
    method: GET
- name: subscriberCreated
  endpoint:
    path: /mailerLite/v1/subscriberCreated
    method: GET
- name: subscriberUnsubscribed
  endpoint:
    path: /mailerLite/v1/subscriberUnsubscribed
    method: GET
- name: addition
  endpoint:
    path: /mathHelper/v1/addition
    method: POST
    data_selector: parameters
- name: division
  endpoint:
    path: /mathHelper/v1/division
    method: POST
    data_selector: parameters
- name: modulo
  endpoint:
    path: /mathHelper/v1/modulo
    method: POST
    data_selector: parameters
- name: multiplication
  endpoint:
    path: /mathHelper/v1/multiplication
    method: POST
    data_selector: parameters
- name: subtraction
  endpoint:
    path: /mathHelper/v1/subtraction
    method: POST
    data_selector: parameters
- name: sendMessage
  endpoint:
    path: /sendMessage
    method: POST
    data_selector: output
    params: {}
- name: createCompany
  endpoint:
    path: mautic/v1/createCompany
    method: POST
    data_selector: id
    params:
      companyname: ''
      isPublished: 1
      overwriteWithBlank: false
- name: createContact
  endpoint:
    path: mautic/v1/createContact
    method: POST
    data_selector: id
    params:
      firstname: ''
      lastname: ''
      email: ''
      overwriteWithBlank: false
- name: getCompany
  endpoint:
    path: mautic/v1/getCompany
    method: GET
    data_selector: id
    params:
      id: ''
- name: getContact
  endpoint:
    path: mautic/v1/getContact
    method: GET
    data_selector: id
    params:
      id: ''
- name: appendRow
  endpoint:
    path: microsoftExcel/v1/appendRow
    method: POST
    data_selector: parameters
- name: clearWorksheet
  endpoint:
    path: microsoftExcel/v1/clearWorksheet
    method: POST
    data_selector: parameters
- name: deleteRow
  endpoint:
    path: microsoftExcel/v1/deleteRow
    method: POST
    data_selector: parameters
- name: findRowByNum
  endpoint:
    path: microsoftExcel/v1/findRowByNum
    method: POST
    data_selector: parameters
- name: updateRow
  endpoint:
    path: microsoftExcel/v1/updateRow
    method: POST
    data_selector: parameters
- name: copyFile
  endpoint:
    path: /microsoftOneDrive/v1/copyFile
    method: POST
- name: createNewFolder
  endpoint:
    path: /microsoftOneDrive/v1/createNewFolder
    method: POST
- name: createNewTextFile
  endpoint:
    path: /microsoftOneDrive/v1/createNewTextFile
    method: POST
- name: deleteFile
  endpoint:
    path: /microsoftOneDrive/v1/deleteFile
    method: DELETE
- name: downloadFile
  endpoint:
    path: /microsoftOneDrive/v1/downloadFile
    method: GET
- name: getFile
  endpoint:
    path: /microsoftOneDrive/v1/getFile
    method: GET
- name: listFiles
  endpoint:
    path: /microsoftOneDrive/v1/listFiles
    method: GET
    data_selector: items
    params: {}
- name: listFolders
  endpoint:
    path: /microsoftOneDrive/v1/listFolders
    method: GET
    data_selector: items
    params: {}
- name: uploadFile
  endpoint:
    path: /microsoftOneDrive/v1/uploadFile
    method: POST
    data_selector: file
    params: {}
- name: newFile
  endpoint:
    path: /microsoftOneDrive/v1/newFile
    method: GET
    data_selector: file
    params: {}
- name: createEvent
  endpoint:
    path: /microsoftOutlook365/v1/createEvent
    method: POST
    data_selector: parameters
- name: deleteEvent
  endpoint:
    path: /microsoftOutlook365/v1/deleteEvent
    method: DELETE
    data_selector: parameters
- name: getEvents
  endpoint:
    path: /microsoftOutlook365/v1/getEvents
    method: GET
    data_selector: parameters
- name: getFreeTimeSlots
  endpoint:
    path: /microsoftOutlook365/v1/getFreeTimeSlots
    method: GET
    data_selector: parameters
- name: getMail
  endpoint:
    path: /microsoftOutlook365/v1/getMail
    method: GET
    data_selector: parameters
- name: moveEmail
  endpoint:
    path: /microsoftOutlook365/v1/moveEmail
    method: POST
    data_selector: parameters
- name: replyToEmail
  endpoint:
    path: /microsoftOutlook365/v1/replyToEmail
    method: POST
    data_selector: parameters
- name: searchEmail
  endpoint:
    path: /microsoftOutlook365/v1/searchEmail
    method: GET
    data_selector: messages
    params: {}
- name: sendEmail
  endpoint:
    path: /microsoftOutlook365/v1/sendEmail
    method: POST
    data_selector: message
    params: {}
- name: newEmail
  endpoint:
    path: /microsoftOutlook365/v1/newEmail
    method: GET
    data_selector: email
    params: {}
- name: createFolder
  endpoint:
    path: /microsoftSharePoint/v1/createFolder
    method: POST
    data_selector: createdFolder
- name: createList
  endpoint:
    path: /microsoftSharePoint/v1/createList
    method: POST
    data_selector: createdList
- name: createListItem
  endpoint:
    path: /microsoftSharePoint/v1/createListItem
    method: POST
    data_selector: createdListItem
- name: uploadFile
  endpoint:
    path: /microsoftSharePoint/v1/uploadFile
    method: POST
    data_selector: uploadedFile
- name: createChannel
  endpoint:
    path: /microsoftTeams/v1/createChannel
    method: POST
    data_selector: output
    params: {}
- name: sendChannelMessage
  endpoint:
    path: /microsoftTeams/v1/sendChannelMessage
    method: POST
    data_selector: output
    params: {}
- name: sendChatMessage
  endpoint:
    path: /microsoftTeams/v1/sendChatMessage
    method: POST
    data_selector: output
    params: {}
- name: createTask
  endpoint:
    path: /microsoftToDo/v1/createTask
    method: POST
- name: createTaskList
  endpoint:
    path: /microsoftToDo/v1/createTaskList
    method: POST
- name: getTask
  endpoint:
    path: /microsoftToDo/v1/getTask
    method: GET
- name: search
  endpoint:
    path: /milvus/v1/search
    method: POST
- name: load
  endpoint:
    path: /milvus/v1/load
    method: POST
- name: ask
  endpoint:
    path: /mistral/v1/ask
    method: POST
    data_selector: parameters
- name: ocr
  endpoint:
    path: /mistral/v1/ocr
    method: POST
    data_selector: parameters
- name: createCustomer
  endpoint:
    path: /myob/v1/createCustomer
    method: POST
    data_selector: parameters
    params:
      companyFile: ''
      IsIndividual: false
      FirstName: ''
      LastName: ''
      CompanyName: ''
      IsActive: false
      Addresses: []
- name: createCustomerPayment
  endpoint:
    path: /myob/v1/createCustomerPayment
    method: POST
    data_selector: parameters
    params:
      companyFile: ''
      PayFrom: ''
      Account: ''
      Customer: ''
- name: createSupplier
  endpoint:
    path: /myob/v1/createSupplier
    method: POST
    data_selector: parameters
    params:
      companyFile: ''
      IsIndividual: false
      FirstName: ''
      LastName: ''
      CompanyName: ''
      IsActive: false
      Addresses: []
- name: createSupplierPayment
  endpoint:
    path: /myob/v1/createSupplierPayment
    method: POST
    data_selector: parameters
    params:
      companyFile: ''
      PayFrom: ''
      Account: ''
      Supplier: ''
- name: query
  endpoint:
    path: /mysql/v1/query
    method: POST
    data_selector: parameters
    params:
      query: ''
      parameters: {}
- name: insert
  endpoint:
    path: /mysql/v1/insert
    method: POST
    data_selector: parameters
    params:
      schema: ''
      table: ''
      columns: []
      values: {}
- name: update
  endpoint:
    path: /mysql/v1/update
    method: POST
    data_selector: parameters
    params:
      schema: ''
      table: ''
      condition: ''
      columns: []
      values: {}
- name: delete
  endpoint:
    path: /mysql/v1/delete
    method: POST
    data_selector: parameters
    params:
      schema: ''
      table: ''
      condition: ''
- name: execute
  endpoint:
    path: /mysql/v1/execute
    method: POST
    data_selector: parameters
    params:
      execute: ''
      columns: []
      parameters: {}
- name: newRow
  endpoint:
    path: /mysql/v1/newRow
    method: POST
    data_selector: parameters
    params:
      schema: ''
      table: ''
      orderBy: ''
      orderDirection: ''
- name: createProject
  endpoint:
    path: /nifty/v1/createProject
    method: POST
- name: createTask
  endpoint:
    path: /nifty/v1/createTask
    method: POST
- name: getTask
  endpoint:
    path: /nifty/v1/getTask
    method: GET
- name: createStatus
  endpoint:
    path: /nifty/v1/createStatus
    method: POST
- name: getTrackedTimeReport
  endpoint:
    path: /nifty/v1/getTrackedTimeReport
    method: GET
- name: newTask
  endpoint:
    path: /nifty/v1/newTask
    method: DYNAMIC_WEBHOOK
- name: createRecords
  endpoint:
    path: /nocoDb/v1/createRecords
    method: POST
    data_selector: Id
    params:
      workspaceId: Workspace ID
      baseId: Base ID
      tableId: Table ID
      tableColumns: {}
- name: deleteRecords
  endpoint:
    path: /nocoDb/v1/deleteRecords
    method: DELETE
    data_selector: Id
    params:
      workspaceId: Workspace ID
      baseId: Base ID
      tableId: Table ID
      recordId: []
- name: getRecord
  endpoint:
    path: /nocoDb/v1/getRecord
    method: GET
    data_selector: record
    params:
      workspaceId: Workspace ID
      baseId: Base ID
      tableId: Table ID
      recordId: ''
      fields: []
- name: updateRecords
  endpoint:
    path: /nocoDb/v1/updateRecords
    method: PUT
    data_selector: Id
    params:
      workspaceId: Workspace ID
      baseId: Base ID
      tableId: Table ID
      tableColumns: {}
- name: createPage
  endpoint:
    path: /notion/v1/createPage
    method: POST
- name: getDatabase
  endpoint:
    path: /notion/v1/getDatabase
    method: GET
- name: getPage
  endpoint:
    path: /notion/v1/getPage
    method: GET
- name: createContact
  endpoint:
    path: /createContact
    method: POST
    data_selector: contacts
- name: createCompany
  endpoint:
    path: /createCompany
    method: POST
    data_selector: accounts
- name: createLead
  endpoint:
    path: /createLead
    method: POST
    data_selector: leads
- name: ask
  endpoint:
    path: /nvidia/v1/ask
    method: POST
- name: addValueByKey
  endpoint:
    path: /objectHelper/v1/addValueByKey
    method: POST
- name: addKeyValuePairs
  endpoint:
    path: /objectHelper/v1/addKeyValuePairs
    method: POST
- name: contains
  endpoint:
    path: /objectHelper/v1/contains
    method: POST
- name: deleteKeyValuePair
  endpoint:
    path: /objectHelper/v1/deleteKeyValuePair
    method: POST
- name: equals
  endpoint:
    path: /objectHelper/v1/equals
    method: POST
- name: mergeTwoObjects
  endpoint:
    path: /objectHelper/v1/mergeTwoObjects
    method: POST
- name: read
  endpoint:
    path: /odsFile/v1/read
    method: GET
    data_selector: parameters
    params:
      fileEntry:
        extension: ''
        mimeType: ''
        name: ''
        url: ''
      sheetName: ''
      headerRow: false
      includeEmptyCells: false
      pageSize: 1
      pageNumber: 1
      readAsString: false
- name: write
  endpoint:
    path: /odsFile/v1/write
    method: POST
    data_selector: parameters
    params:
      sheetName: ''
      rows:
      - {}
      filename: ''
- name: currencyConverter
  endpoint:
    path: /oneSimpleAPI/v1/currencyConverter
    method: POST
    data_selector: parameters
- name: urlShortener
  endpoint:
    path: /oneSimpleAPI/v1/urlShortener
    method: POST
    data_selector: parameters
- name: webInformation
  endpoint:
    path: /oneSimpleAPI/v1/webInformation
    method: POST
    data_selector: parameters
- name: ask
  endpoint:
    path: /ask
    method: POST
- name: createImage
  endpoint:
    path: /createImage
    method: POST
- name: createSpeech
  endpoint:
    path: /createSpeech
    method: POST
- name: createTranscription
  endpoint:
    path: /createTranscription
    method: POST
- name: createIncident
  endpoint:
    path: /pagerDuty/v1/createIncident
    method: POST
    data_selector: incident
- name: createIncidentNote
  endpoint:
    path: /pagerDuty/v1/createIncidentNote
    method: POST
    data_selector: note
- name: updateIncident
  endpoint:
    path: /v1/incidents/{incidentId}
    method: PUT
    data_selector: incident
    params:
      From: ''
      incidentId: ''
      incident_type: ''
      status: ''
      assignments: []
      resolution: ''
      title: ''
      priority: ''
      urgency: ''
      escalation_policy: ''
- name: newOrUpdatedIncident
  endpoint:
    path: /v1/incidents
    method: POST
    data_selector: incident
    params:
      service: ''
- name: createIncident
  endpoint:
    path: /v1/createIncident
    method: POST
    data_selector: incident
    params:
      From: ''
      title: ''
      service: ''
      priority: ''
      urgency: ''
      details: ''
      assignments:
      - ''
      incident_key: ''
      incident_type: ''
      escalation_policy: ''
- name: createIncidentNote
  endpoint:
    path: /v1/createIncidentNote
    method: POST
    data_selector: note
    params:
      From: ''
      incidentId: ''
      content: ''
- name: updateIncident
  endpoint:
    path: /v1/updateIncident
    method: PUT
    data_selector: incident
    params:
      From: ''
      incidentId: ''
      incident_type: ''
      status: ''
      assignments:
      - ''
      resolution: ''
      title: ''
      priority: ''
      urgency: ''
      escalation_policy: ''
- name: incident
  endpoint:
    path: /incidents
    method: GET
    data_selector: incident
- name: newOrUpdatedIncident
  endpoint:
    path: /triggers/newOrUpdatedIncident
    method: POST
    data_selector: output
- name: convertToImage
  endpoint:
    path: /pdfHelper/v1/convertToImage
    method: POST
- name: extractText
  endpoint:
    path: /pdfHelper/v1/extractText
    method: POST
- name: imageToPdf
  endpoint:
    path: /pdfHelper/v1/imageToPdf
    method: POST
- name: textToPdf
  endpoint:
    path: /pdfHelper/v1/textToPdf
    method: POST
- name: ask
  endpoint:
    method: POST
- name: addPet
  endpoint:
    path: /petstore/v1/addPet
    method: POST
- name: updatePet
  endpoint:
    path: /petstore/v1/updatePet
    method: PUT
- name: findPetsByStatus
  endpoint:
    path: /petstore/v1/findPetsByStatus
    method: GET
- name: findPetsByTags
  endpoint:
    path: /petstore/v1/findPetsByTags
    method: GET
- name: deletePet
  endpoint:
    path: /petstore/v1/deletePet
    method: DELETE
- name: getPetById
  endpoint:
    path: /petstore/v1/getPetById
    method: GET
- name: updatePetWithForm
  endpoint:
    path: /petstore/v1/updatePetWithForm
    method: POST
- name: uploadFile
  endpoint:
    path: /petstore/v1/uploadFile
    method: POST
- name: getInventory
  endpoint:
    path: /petstore/v1/getInventory
    method: GET
    data_selector: OBJECT
- name: placeOrder
  endpoint:
    path: /petstore/v1/placeOrder
    method: POST
    data_selector: OBJECT
- name: deleteOrder
  endpoint:
    path: /petstore/v1/deleteOrder
    method: DELETE
    data_selector: OBJECT
- name: getOrderById
  endpoint:
    path: /petstore/v1/getOrderById
    method: GET
    data_selector: OBJECT
- name: createUser
  endpoint:
    path: /petstore/v1/createUser
    method: POST
    data_selector: OBJECT
- name: createUsersWithListInput
  endpoint:
    path: /petstore/v1/createUsersWithListInput
    method: POST
    data_selector: ARRAY
- name: deleteUser
  endpoint:
    path: /petstore/v1/deleteUser
    method: DELETE
    data_selector: OBJECT
- name: getUserByName
  endpoint:
    path: /petstore/v1/getUserByName
    method: GET
    data_selector: OBJECT
- name: updateUser
  endpoint:
    path: /petstore/v1/updateUser
    method: PUT
    data_selector: OBJECT
- name: getDeals
  endpoint:
    path: /pipedrive/v1/getDeals
    method: GET
    data_selector: data
- name: addDeal
  endpoint:
    path: /pipedrive/v1/addDeal
    method: POST
    data_selector: data
- name: searchDeals
  endpoint:
    path: /pipedrive/v1/searchDeals
    method: GET
    data_selector: data
- name: deleteDeal
  endpoint:
    path: /pipedrive/v1/deleteDeal
    method: DELETE
    data_selector: data
- name: getDealDetails
  endpoint:
    path: /pipedrive/v1/getDealDetails
    method: GET
    data_selector: data
- name: getLeads
  endpoint:
    path: /getLeads
    method: GET
    data_selector: data
    params: {}
- name: addLead
  endpoint:
    path: /addLead
    method: POST
    data_selector: data
    params: {}
- name: deleteLead
  endpoint:
    path: /deleteLead
    method: DELETE
    data_selector: data
    params: {}
- name: getLeadDetails
  endpoint:
    path: /getLeadDetails
    method: GET
    data_selector: data
    params: {}
- name: searchLeads
  endpoint:
    path: /searchLeads
    method: GET
    data_selector: data
    params: {}
- name: getOrganizations
  endpoint:
    path: /getOrganizations
    method: GET
    data_selector: data
    params: {}
- name: addOrganization
  endpoint:
    path: /addOrganization
    method: POST
    data_selector: data
    params: {}
- name: searchOrganization
  endpoint:
    path: /searchOrganization
    method: GET
    data_selector: data
    params: {}
- name: deleteOrganization
  endpoint:
    path: /deleteOrganization
    method: DELETE
    data_selector: data
    params: {}
- name: getOrganizationDetails
  endpoint:
    path: /getOrganizationDetails
    method: GET
    data_selector: data
    params: {}
- name: getPersons
  endpoint:
    path: /getPersons
    method: GET
    data_selector: data
    params: {}
- name: addPerson
  endpoint:
    path: /pipedrive/v1/addPerson
    method: POST
    data_selector: data
    params: {}
- name: searchPersons
  endpoint:
    path: /pipedrive/v1/searchPersons
    method: GET
    data_selector: data
    params: {}
- name: deletePerson
  endpoint:
    path: /pipedrive/v1/deletePerson
    method: DELETE
    data_selector: data
    params: {}
- name: getPersonDetails
  endpoint:
    path: /pipedrive/v1/getPersonDetails
    method: GET
    data_selector: data
    params: {}
- name: newActivity
  endpoint:
    path: /pipedrive/v1/newActivity
    method: POST
    data_selector: data
    params: {}
- name: newDeal
  endpoint:
    path: /pipedrive/v1/newDeal
    method: POST
    data_selector: data
    params: {}
- name: newOrganization
  endpoint:
    path: /pipedrive/v1/newOrganization
    method: POST
    data_selector: data
    params: {}
- name: newPerson
  endpoint:
    path: /pipedrive/v1/newPerson
    method: POST
    data_selector: data
    params: {}
- name: updatedDeal
  endpoint:
    path: /pipedrive/v1/updatedDeal
    method: PUT
    data_selector: data
    params: {}
- name: updatedOrganization
  endpoint:
    path: /pipedrive/v1/updatedOrganization
    method: PUT
    data_selector: data
    params: {}
- name: updatedPerson
  endpoint:
    path: /pipedrive/v1/updatedPerson
    method: PUT
    data_selector: data
    params: {}
- name: createAccount
  endpoint:
    path: /createAccount
    method: POST
    data_selector: data
    params:
      owner_id: ''
      name: ''
- name: createContact
  endpoint:
    path: /createContact
    method: POST
    data_selector: data
    params:
      owner_id: ''
      first_name: ''
      last_name: ''
- name: createTask
  endpoint:
    path: /createTask
    method: POST
    data_selector: data
    params:
      subject: ''
      activity_type_id: ''
      unit_id: ''
      owner_id: ''
- name: query
  endpoint:
    path: /postgresql/v1/query
    method: POST
    data_selector: parameters
    params:
      query: ''
      parameters: {}
- name: insert
  endpoint:
    path: /postgresql/v1/insert
    method: POST
    data_selector: parameters
    params:
      schema: ''
      table: ''
      columns: []
      values: {}
- name: update
  endpoint:
    path: /postgresql/v1/update
    method: POST
    data_selector: parameters
    params:
      schema: ''
      table: ''
      condition: ''
      columns: []
      values: {}
- name: delete
  endpoint:
    path: /postgresql/v1/delete
    method: POST
    data_selector: parameters
    params:
      schema: ''
      table: ''
      condition: ''
- name: execute
  endpoint:
    path: /postgresql/v1/execute
    method: POST
    data_selector: parameters
    params:
      execute: ''
      columns: []
      parameters: {}
- name: newRow
  endpoint:
    path: /postgresql/v1/newRow
    method: POST
    data_selector: parameters
    params:
      schema: ''
      table: ''
      orderBy: ''
      orderDirection: ''
- name: createEvent
  endpoint:
    path: /postHog/v1/createEvent
    method: POST
    data_selector: ''
    params: {}
- name: createProject
  endpoint:
    path: /postHog/v1/createProject
    method: POST
    data_selector: ''
    params: {}
- name: getFeature
  endpoint:
    path: /productboard/v1/getFeature
    method: GET
    data_selector: data
    params:
      X-Version: 1
- name: listNotes
  endpoint:
    path: /productboard/v1/listNotes
    method: GET
    data_selector: data
    params:
      X-Version: 1
- name: createNote
  endpoint:
    path: /productboard/v1/createNote
    method: POST
    data_selector: data
    params:
      X-Version: 1
- name: deleteNote
  endpoint:
    path: /productboard/v1/deleteNote
    method: DELETE
    data_selector: ''
    params:
      X-Version: 1
- name: getNote
  endpoint:
    path: /productboard/v1/getNote
    method: GET
    data_selector: data
    params:
      X-Version: 1
- name: updateNote
  endpoint:
    path: /productboard/v1/updateNote
    method: PUT
    data_selector: data
    params:
      X-Version: 1
- name: updated_feature
  endpoint:
    path: /updatedFeature
    method: POST
    data_selector: body
    params: {}
- name: sendNotification
  endpoint:
    path: /pushover/v1/sendNotification
    method: POST
    data_selector: status
- name: load
  endpoint:
    path: /v1/load
    method: POST
- name: search
  endpoint:
    path: /v1/search
    method: POST
- name: createCategory
  endpoint:
    path: /quickbooks/v1/createCategory
    method: POST
    data_selector: item
    params: {}
- name: createCustomer
  endpoint:
    path: /quickbooks/v1/createCustomer
    method: POST
    data_selector: customer
    params: {}
- name: createItem
  endpoint:
    path: /quickbooks/v1/createItem
    method: POST
    data_selector: item
    params: {}
- name: createPayment
  endpoint:
    path: /quickbooks/v1/createPayment
    method: POST
    data_selector: payment
    params: {}
- name: getCustomer
  endpoint:
    path: /quickbooks/v1/getCustomer
    method: GET
    data_selector: customer
    params: {}
- name: getInvoice
  endpoint:
    path: /quickbooks/v1/getInvoice
    method: GET
    data_selector: invoice
    params: {}
- name: getItem
  endpoint:
    path: /quickbooks/v1/getItem
    method: GET
    data_selector: item
    params: {}
- name: getPayment
  endpoint:
    path: /quickbooks/v1/getPayment
    method: GET
    data_selector: payment
    params: {}
- name: sendMessage
  endpoint:
    path: /rabbitMQ/v1/sendMessage
    method: POST
    data_selector: parameters
    params:
      queue: ''
      message: {}
- name: newMessage
  endpoint:
    path: /rabbitMQ/v1/newMessage
    method: POST
    data_selector: parameters
    params:
      queue: ''
- name: randomFloat
  endpoint:
    path: /randomHelper/v1/randomFloat
    method: GET
    data_selector: output
    params:
      startInclusive: 1
      endInclusive: 1
- name: randomHex
  endpoint:
    path: /randomHelper/v1/randomHex
    method: GET
    data_selector: output
    params:
      length: 1
- name: randomInt
  endpoint:
    path: /randomHelper/v1/randomInt
    method: GET
    data_selector: output
    params:
      startInclusive: 1
      endInclusive: 1
- name: randomString
  endpoint:
    path: /randomHelper/v1/randomString
    method: GET
    data_selector: output
    params:
      length: 1
      characterSet: ''
- name: randomUuid
  endpoint:
    path: /randomHelper/v1/randomUuid
    method: GET
    data_selector: output
- name: createContact
  endpoint:
    path: /reckon/v1/createContact
    method: POST
    data_selector: id
    params:
      bookId: ''
      name: ''
- name: createInvoice
  endpoint:
    path: /reckon/v1/createInvoice
    method: POST
    data_selector: id
    params:
      bookId: ''
      customer: ''
      invoiceDate: ''
      amountTaxStatus: ''
      lineItems: []
- name: createPayment
  endpoint:
    path: /reckon/v1/createPayment
    method: POST
    data_selector: id
    params:
      bookId: ''
      supplier: ''
      paymentDate: ''
      totalAmount: 0
- name: newInvoice
  endpoint:
    path: /reckon/v1/newInvoice
    method: GET
    data_selector: id
    params:
      bookId: ''
- name: newPayment
  endpoint:
    path: /reckon/v1/newPayment
    method: GET
    data_selector: id
    params:
      bookId: ''
- name: createComment
  endpoint:
    path: /reddit/v1/createComment
    method: POST
    data_selector: jquery
    params:
      thing_id: ''
      text: ''
- name: createPost
  endpoint:
    path: /reddit/v1/createPost
    method: POST
    data_selector: jquery
    params:
      sr: ''
      title: ''
      kind: ''
      url: ''
      text: ''
- name: search
  endpoint:
    path: redis/v1/search
    method: POST
    data_selector: parameters
    params:
      query: STRING
- name: load
  endpoint:
    path: redis/v1/load
    method: POST
    data_selector: ''
    params: {}
- name: autoRespondWithHTTP200
  endpoint:
    path: /request/v1/autoRespondWithHTTP200
    method: POST
    data_selector: output
- name: awaitWorkflowAndRespond
  endpoint:
    path: /request/v1/awaitWorkflowAndRespond
    method: POST
    data_selector: output
    params:
      timeout: 1
- name: sendEmail
  endpoint:
    path: /v1/sendEmail
    method: POST
- name: deleteRow
  endpoint:
    path: /retable/v1/deleteRow
    method: DELETE
    data_selector: data
    params: {}
- name: insertRow
  endpoint:
    path: /retable/v1/insertRow
    method: POST
    data_selector: data
    params: {}
- name: updateRow
  endpoint:
    path: /retable/v1/updateRow
    method: PUT
    data_selector: data
    params: {}
- name: sendDirectMessage
  endpoint:
    path: /rocketchat/v1/sendDirectMessage
    method: POST
    data_selector: message
    params:
      roomId: ''
      text: ''
- name: sendChannelMessage
  endpoint:
    path: /rocketchat/v1/sendChannelMessage
    method: POST
    data_selector: message
    params:
      roomId: ''
      text: ''
- name: createChannel
  endpoint:
    path: /rocketchat/v1/createChannel
    method: POST
    data_selector: channel
    params:
      name: ''
      members: []
      readOnly: false
      excludeSelf: false
- name: newMessage
  endpoint:
    path: /rocketchat/v1/newMessage
    method: POST
    data_selector: message
    params: {}
- name: createFeed
  endpoint:
    path: /v1/createFeed
    method: POST
- name: newItemInFeed
  endpoint:
    path: /v1/newItemInFeed
    method: POST
- name: newRecord
  endpoint:
    path: /salesforce/v1/newRecord
    method: POST
- name: updatedRecord
  endpoint:
    path: /salesforce/v1/updatedRecord
    method: POST
- name: everyDay
  endpoint:
    path: schedule/v1/everyDay
    method: LISTENER
    data_selector: parameters
    params:
      hour: 1
      minute: 1
      dayOfWeek:
      - 1
      timezone: ''
- name: everyWeek
  endpoint:
    path: schedule/v1/everyWeek
    method: LISTENER
    data_selector: parameters
    params:
      hour: 1
      minute: 1
      dayOfWeek: 1
      timezone: ''
- name: everyMonth
  endpoint:
    path: schedule/v1/everyMonth
    method: LISTENER
    data_selector: parameters
    params:
      hour: 1
      minute: 1
      dayOfMonth: 1
      timezone: ''
- name: interval
  endpoint:
    path: schedule/v1/interval
    method: LISTENER
    data_selector: parameters
    params:
      interval: 1
      timeUnit: 1
- name: cron
  endpoint:
    path: schedule/v1/cron
    method: LISTENER
    data_selector: parameters
    params:
      expression: ''
      timezone: ''
- name: searchScraper
  endpoint:
    path: /v1/searchScraper
    method: POST
    data_selector: result
- name: markdownify
  endpoint:
    path: /v1/markdownify
    method: POST
    data_selector: result
- name: smartScraper
  endpoint:
    path: /v1/smartScraper
    method: POST
    data_selector: result
- name: javascript
  endpoint:
    method: POST
- name: python
  endpoint:
    method: POST
- name: ruby
  endpoint:
    method: POST
- name: javascript
  endpoint:
    path: ''
    method: ''
    data_selector: ''
    params: {}
- name: python
  endpoint:
    path: ''
    method: ''
    data_selector: ''
    params: {}
- name: ruby
  endpoint:
    path: ''
    method: ''
    data_selector: ''
    params: {}
- name: createContact
  endpoint:
    path: /sendfox/v1/createContact
    method: POST
    data_selector: id
- name: createList
  endpoint:
    path: /sendfox/v1/createList
    method: POST
    data_selector: id
- name: unsubscribeContact
  endpoint:
    path: /sendfox/v1/unsubscribeContact
    method: POST
    data_selector: id
- name: sendEmail
  endpoint:
    path: /v1/sendEmail
    method: POST
    data_selector: parameters
- name: createOrder
  endpoint:
    path: shopify/v1/createOrder
    method: POST
    data_selector: order
- name: deleteOrder
  endpoint:
    path: shopify/v1/deleteOrder
    method: DELETE
    data_selector: orderId
- name: cancelOrder
  endpoint:
    path: shopify/v1/cancelOrder
    method: POST
    data_selector: orderId
- name: updateOrder
  endpoint:
    path: shopify/v1/updateOrder
    method: PUT
    data_selector: orderId
- name: closeOrder
  endpoint:
    path: shopify/v1/closeOrder
    method: POST
    data_selector: orderId
- name: newCancelledOrder
  endpoint:
    path: shopify/v1/newCancelledOrder
    method: POST
    data_selector: order
- name: newOrder
  endpoint:
    path: shopify/v1/newOrder
    method: POST
    data_selector: order
- name: newPaidOrder
  endpoint:
    path: shopify/v1/newPaidOrder
    method: POST
    data_selector: order
- name: deleteRow
  endpoint:
    path: snowflake/v1/deleteRow
    method: POST
    data_selector: resultSetMetaData
    params:
      database: Database
      schema: Schema
      table: Table
      condition: Condition
- name: executeSql
  endpoint:
    path: snowflake/v1/executeSql
    method: POST
    data_selector: resultSetMetaData
    params:
      statement: Statement
- name: insertRow
  endpoint:
    path: snowflake/v1/insertRow
    method: POST
    data_selector: resultSetMetaData
    params:
      database: Database
      schema: Schema
      table: Table
      values: {}
- name: updateRow
  endpoint:
    path: snowflake/v1/updateRow
    method: POST
    data_selector: resultSetMetaData
    params:
      database: Database
      schema: Schema
      table: Table
      condition: Condition
      values: {}
- name: deleteRow
  endpoint:
    path: /snowflake/v1/deleteRow
    method: DELETE
    data_selector: data
    params:
      database: ''
      schema: ''
      table: ''
      condition: ''
- name: executeSql
  endpoint:
    path: /snowflake/v1/executeSql
    method: POST
    data_selector: data
    params:
      statement: ''
- name: insertRow
  endpoint:
    path: /snowflake/v1/insertRow
    method: POST
    data_selector: data
    params:
      database: ''
      schema: ''
      table: ''
      values: {}
- name: updateRow
  endpoint:
    path: /snowflake/v1/updateRow
    method: PUT
    data_selector: data
    params:
      database: ''
      schema: ''
      table: ''
      condition: ''
      values: {}
- name: startResumePlayback
  endpoint:
    path: /v1/startResumePlayback
    method: POST
- name: addItemsToPlaylist
  endpoint:
    path: /v1/addItemsToPlaylist
    method: POST
- name: createPlaylist
  endpoint:
    path: /v1/createPlaylist
    method: POST
- name: createCustomer
  endpoint:
    path: stripe/v1/createCustomer
    method: POST
    data_selector: id
- name: createInvoice
  endpoint:
    path: stripe/v1/createInvoice
    method: POST
    data_selector: id
- name: newCustomer
  endpoint:
    path: stripe/v1/newCustomer
    method: POST
    data_selector: id
- name: newInvoice
  endpoint:
    path: stripe/v1/newInvoice
    method: POST
    data_selector: id
- name: uploadFile
  endpoint:
    path: /storage/v1/object
    method: POST
    data_selector: Key
    params: {}
- name: search
  endpoint:
    path: /tavily/v1/search
    method: POST
    data_selector: results
    params: {}
- name: extract
  endpoint:
    path: /tavily/v1/extract
    method: POST
    data_selector: results
    params: {}
- name: createCompany
  endpoint:
    path: /teamwork/v1/createCompany
    method: POST
    data_selector: company
- name: createTask
  endpoint:
    path: /teamwork/v1/createTask
    method: POST
    data_selector: task
- name: base64EncodeDecode
  endpoint:
    path: /textHelper/v1/base64EncodeDecode
    method: POST
    data_selector: ''
    params: {}
- name: concatenate
  endpoint:
    path: /textHelper/v1/concatenate
    method: POST
    data_selector: ''
    params: {}
- name: contains
  endpoint:
    path: /textHelper/v1/contains
    method: POST
    data_selector: ''
    params: {}
- name: extractContentFromHtml
  endpoint:
    path: /textHelper/v1/extractContentFromHtml
    method: POST
    data_selector: ''
    params: {}
- name: extractUrls
  endpoint:
    path: /textHelper/v1/extractUrls
    method: POST
    data_selector: ''
    params: {}
- name: formatCurrency
  endpoint:
    path: /textHelper/v1/formatCurrency
    method: POST
    data_selector: ''
    params: {}
- name: HTMLToMarkdown
  endpoint:
    path: /textHelper/v1/HTMLToMarkdown
    method: POST
    data_selector: ''
    params: {}
- name: lowerCase
  endpoint:
    path: /textHelper/v1/lowerCase
    method: POST
    data_selector: ''
    params: {}
- name: markdownToHTML
  endpoint:
    path: /textHelper/v1/markdownToHTML
    method: POST
    data_selector: ''
    params: {}
- name: replace
  endpoint:
    path: /textHelper/v1/replace
    method: POST
    data_selector: ''
    params: {}
- name: selectFirstNCharacters
  endpoint:
    path: /textHelper/v1/selectFirstNCharacters
    method: POST
    data_selector: ''
    params: {}
- name: selectLastNCharacters
  endpoint:
    path: textHelper/v1/selectLastNCharacters
    method: GET
    data_selector: parameters
- name: split
  endpoint:
    path: textHelper/v1/split
    method: GET
    data_selector: parameters
- name: trimWhitespace
  endpoint:
    path: textHelper/v1/trimWhitespace
    method: GET
    data_selector: parameters
- name: upperCase
  endpoint:
    path: textHelper/v1/upperCase
    method: GET
    data_selector: parameters
- name: urlEncodeDecode
  endpoint:
    path: textHelper/v1/urlEncodeDecode
    method: GET
    data_selector: parameters
- name: createTask
  endpoint:
    path: /todoist/v1/createTask
    method: POST
    data_selector: parameters
- name: markTaskCompleted
  endpoint:
    path: /todoist/v1/markTaskCompleted
    method: POST
    data_selector: parameters
- name: createProject
  endpoint:
    path: /todoist/v1/createProject
    method: POST
    data_selector: parameters
- name: createBoard
  endpoint:
    path: trello/v1/createBoard
    method: POST
    data_selector: parameters
    params:
      name: ''
      desc: ''
- name: createCard
  endpoint:
    path: trello/v1/createCard
    method: POST
    data_selector: parameters
    params:
      idBoard: ''
      idList: ''
      name: ''
      desc: ''
- name: getCard
  endpoint:
    path: trello/v1/getCard
    method: GET
    data_selector: parameters
    params:
      idBoard: ''
      id: ''
- name: newCard
  endpoint:
    path: trello/v1/newCard
    method: DYNAMIC_WEBHOOK
    data_selector: parameters
    params:
      idBoard: ''
      idList: ''
- name: sendSMS
  endpoint:
    path: twilio/v1/sendSMS
    method: POST
    data_selector: parameters
- name: sendWhatsAppMessage
  endpoint:
    path: twilio/v1/sendWhatsAppMessage
    method: POST
    data_selector: parameters
- name: newWhatsappMessage
  endpoint:
    path: twilio/v1/newWhatsappMessage
    method: POST
    data_selector: ''
- name: createForm
  endpoint:
    path: /typeform/v1/createForm
    method: POST
- name: newSubmission
  endpoint:
    path: /typeform/v1/newSubmission
    method: POST
- name: search
  endpoint:
    path: /typesense/v1/search
    method: POST
    data_selector: ''
    params: {}
- name: load
  endpoint:
    path: /typesense/v1/load
    method: POST
    data_selector: ''
    params: {}
- name: set_value
  endpoint:
    path: /var/v1/set
    method: POST
    data_selector: output
    params: {}
- name: addContactToList
  endpoint:
    path: vbout/v1/addContactToList
    method: POST
    data_selector: parameters
    params: {}
- name: updateContact
  endpoint:
    path: vbout/v1/updateContact
    method: POST
    data_selector: parameters
    params: {}
- name: createEmailMarketingCampaign
  endpoint:
    path: vbout/v1/createEmailMarketingCampaign
    method: POST
    data_selector: parameters
    params: {}
- name: addTagToContact
  endpoint:
    path: vbout/v1/addTagToContact
    method: POST
    data_selector: parameters
    params: {}
- name: createEmailList
  endpoint:
    path: vbout/v1/createEmailList
    method: POST
    data_selector: parameters
    params: {}
- name: createSocialMediaMessage
  endpoint:
    path: vbout/v1/createSocialMediaMessage
    method: POST
    data_selector: parameters
    params: {}
- name: createContact
  endpoint:
    path: /vtiger/v1/createContact
    method: POST
    data_selector: result
    params: {}
- name: createProduct
  endpoint:
    path: /vtiger/v1/createProduct
    method: POST
    data_selector: results
    params: {}
- name: getMe
  endpoint:
    path: /vtiger/v1/getMe
    method: GET
    data_selector: result
    params: {}
- name: search
  endpoint:
    path: /weaviate/v1/search
    method: POST
    data_selector: output
    params: {}
- name: load
  endpoint:
    path: /weaviate/v1/load
    method: POST
    data_selector: output
    params: {}
- name: fulfillOrder
  endpoint:
    path: /webflow/v1/fulfillOrder
    method: POST
- name: getCollectionItem
  endpoint:
    path: /webflow/v1/getCollectionItem
    method: GET
- name: responseToWebhookRequest
  endpoint:
    path: /webhook/v1/responseToWebhookRequest
    method: POST
    data_selector: ''
    params: {}
- name: autoRespondWithHTTP200
  endpoint:
    path: /webhook/v1/autoRespondWithHTTP200
    method: POST
    data_selector: ''
    params: {}
- name: validateAndRespond
  endpoint:
    path: /webhook/v1/validateAndRespond
    method: POST
    data_selector: ''
    params: {}
- name: awaitWorkflowAndRespond
  endpoint:
    path: /webhook/v1/awaitWorkflowAndRespond
    method: POST
    data_selector: ''
    params: {}
- name: sendMessage
  endpoint:
    path: /whatsApp/v1/sendMessage
    method: POST
    data_selector: messaging_product
    params: {}
- name: messageReceived
  endpoint:
    path: /whatsApp/v1/messageReceived
    method: POST
    data_selector: object
    params: {}
- name: getFullResult
  endpoint:
    path: /getFullResult
    method: GET
    data_selector: results
    params:
      input: ''
      output: ''
- name: getShortAnswer
  endpoint:
    path: /getShortAnswer
    method: GET
    data_selector: output
    params:
      i: ''
      units: ''
- name: createCoupon
  endpoint:
    path: /woocommerce/v1/createCoupon
    method: POST
    data_selector: parameters
- name: createCustomer
  endpoint:
    path: /woocommerce/v1/createCustomer
    method: POST
    data_selector: parameters
- name: createOrder
  endpoint:
    path: /woocommerce/v1/createOrder
    method: POST
    data_selector: parameters
- name: createProduct
  endpoint:
    path: /woocommerce/v1/createProduct
    method: POST
    data_selector: parameters
- name: newOrder
  endpoint:
    path: /woocommerce/v1/newOrder
    method: POST
    data_selector: parameters
- name: newCoupon
  endpoint:
    path: /woocommerce/v1/newCoupon
    method: POST
    data_selector: parameters
- name: getPost
  endpoint:
    path: /wordpress/v1/getPost
    method: GET
    data_selector: output
    params:
      postId: ''
- name: updatePost
  endpoint:
    path: /wordpress/v1/updatePost
    method: POST
    data_selector: parameters
    params:
      postId: ''
      title: ''
      content: ''
      status: ''
      slug: ''
      categories: []
      comment_status: ''
      ping_status: ''
- name: createPost
  endpoint:
    path: /wordpress/v1/createPost
    method: POST
    data_selector: parameters
    params:
      title: ''
      content: ''
      status: ''
      slug: ''
      categories: []
      comment_status: ''
      ping_status: ''
- name: createPage
  endpoint:
    path: /wordpress/v1/createPage
    method: POST
    data_selector: parameters
    params:
      title: ''
      content: ''
      status: ''
      slug: ''
      comment_status: ''
      ping_status: ''
- name: newPost
  endpoint:
    path: /wordpress/v1/newPost
    method: POST
    data_selector: post
    params: {}
- name: getPost
  endpoint:
    path: /wordpress/v1/getPost
    method: GET
    data_selector: output
- name: updatePost
  endpoint:
    path: /wordpress/v1/updatePost
    method: POST
    data_selector: output
- name: createPost
  endpoint:
    path: /wp/v1/posts
    method: POST
    data_selector: id
    params:
      title: ''
      content: ''
      status: ''
      slug: ''
      categories:
      - 1
      comment_status: ''
      ping_status: ''
- name: newPost
  endpoint:
    path: /wp/v1/posts
    method: GET
    data_selector: id
- name: createComment
  endpoint:
    path: /wrike/v1/createComment
    method: POST
- name: createFolder
  endpoint:
    path: /wrike/v1/createFolder
    method: POST
- name: createProject
  endpoint:
    path: /wrike/v1/createProject
    method: POST
- name: createTask
  endpoint:
    path: /wrike/v1/createTask
    method: POST
- name: newTask
  endpoint:
    path: /wrike/v1/newTask
    method: WEBHOOK
- name: createBill
  endpoint:
    path: /xero/v1/createBill
    method: POST
    data_selector: parameters
- name: createContact
  endpoint:
    path: /xero/v1/createContact
    method: POST
    data_selector: parameters
- name: createSalesInvoice
  endpoint:
    path: /xero/v1/createSalesInvoice
    method: POST
    data_selector: parameters
- name: createQuote
  endpoint:
    path: /xero/v1/createQuote
    method: POST
    data_selector: parameters
- name: newBill
  endpoint:
    path: /xero/v1/newBill
    method: POST
    data_selector: parameters
- name: newContact
  endpoint:
    path: /xero/v1/newContact
    method: POST
    data_selector: parameters
- name: newInvoice
  endpoint:
    path: /xero/v1/newInvoice
    method: POST
    data_selector: parameters
- name: read
  endpoint:
    path: /xlsxFile/v1/read
    method: POST
    data_selector: parameters
    params:
      fileEntry:
        extension: ''
        mimeType: ''
        name: ''
        url: ''
      sheetName: ''
      headerRow: false
      includeEmptyCells: false
      pageSize: 1
      pageNumber: 1
      readAsString: false
- name: write
  endpoint:
    path: /xlsxFile/v1/write
    method: POST
    data_selector: parameters
    params:
      sheetName: ''
      rows:
      - {}
      filename: ''
- name: read
  endpoint:
    path: /read
    method: GET
    data_selector: parameters
    params:
      fileEntry:
        required: true
      isArray:
        required: false
      path:
        required: false
      pageSize:
        required: false
      pageNumber:
        required: false
- name: write
  endpoint:
    path: /write
    method: POST
    data_selector: parameters
    params:
      type:
        required: false
      source:
        required: true
      filename:
        required: true
- name: parse
  endpoint:
    path: /xmlHelper/v1/parse
    method: POST
    data_selector: output
    params:
      source: ''
- name: stringify
  endpoint:
    path: /xmlHelper/v1/stringify
    method: POST
    data_selector: output
    params:
      type: ''
      source: []
- name: uploadVideo
  endpoint:
    path: /youtube/v1/uploadVideo
    method: POST
- name: newVideo
  endpoint:
    path: /youtube/v1/newVideo
    method: GET
- name: updateProject
  endpoint:
    path: /zeplin/v1/updateProject
    method: POST
    data_selector: parameters
- name: projectNote
  endpoint:
    path: /zeplin/v1/projectNote
    method: POST
    data_selector: parameters
- name: createContact
  endpoint:
    path: /zohoBooks/v1/createContact
    method: POST
    data_selector: contact
    params: {}
- name: createInvoice
  endpoint:
    path: /zohoBooks/v1/createInvoice
    method: POST
    data_selector: invoice
    params: {}
- name: createSalesOrder
  endpoint:
    path: /zohoBooks/v1/createSalesOrder
    method: POST
    data_selector: salesorder
    params: {}
- name: addUser
  endpoint:
    path: /zohoCrm/v1/addUser
    method: POST
- name: getOrganization
  endpoint:
    path: /zohoCrm/v1/getOrganization
    method: GET
- name: listUsers
  endpoint:
    path: /zohoCrm/v1/listUsers
    method: GET
- name: createContact
  endpoint:
    path: /createContact
    method: POST
    data_selector: contact
    params:
      contact_name: ''
      company_name: ''
      website: ''
      currency_id: ''
      billing_address: {}
      shipping_address: {}
- name: createInvoice
  endpoint:
    path: /createInvoice
    method: POST
    data_selector: invoice
    params:
      customer_id: ''
      use_custom_invoice_number: false
      invoice_number: ''
      line_items: []
      date: ''
      payment_terms: 1
- name: createItem
  endpoint:
    path: /createItem
    method: POST
    data_selector: item
    params:
      name: ''
      rate: 0.0
      product_type: ''
      description: ''
- name: createMeeting
  endpoint:
    path: /v1/createMeeting
    method: POST
    data_selector: parameters
- name: addMeetingRegistrant
  endpoint:
    path: /v1/addMeetingRegistrant
    method: POST
    data_selector: parameters
notes:
- Login to the dashboard at https://coda.io/signin to generate API token.
- Custom Actions empower you to define HTTP requests tailored to your specific requirements.
- Can only be used to retrieve a maximum of 10,000 matches.
- Recent changes may not immediately be reflected in search results due to a short
  delay in indexing.
- This component doesn't have the action you need, you can use Custom Action to create
  your own.
- Your instances pod can be found under your API URL, e.g. https://api.{pod}.insightly.com/v3.1
- Uses OAuth2 with refresh token — requires setup of connected app in api
- Some objects like Contact may return nulls in deeply nested fields
- Uses API key for authentication — requires creation of a Private API Key in Klaviyo.
- You need to create a new OAuth2 Application to get credentials.
- Enable Webhooks and fill information.
- Uses OAuth2 for authentication.
- The parentId parameter is optional for actions involving files and folders.
- Ensure valid user association for request.
- Priorities must be enabled in your PagerDuty account.
- Ask anything you want.
- Uses Bearer Token for authentication.
- Applications API Token can be found in your applications dashboard.
- User Key can be found in main dashboard.
- Requires setup of domain and authentication token.
- Triggers when there is a new record in Salesforce.
- Triggers when a record is updated.
- You can use default API key. To create new API key, click on '+' sign.
- If this component doesn't have the action you need, you can use Custom Action.
- Requires setup of connected app in Zoho Books
- Requires setup of connected app in Zoom
- Ensure to add required scopes for meetings
errors:
- 'REQUEST_LIMIT_EXCEEDED: Throttle API calls or reduce frequency'
- 'QUERY_TIMEOUT: Break down filters or add selectivity'
- '401 Unauthorized: Recheck OAuth scopes or token expiration'
- '400 Bad Request: Check required fields and data formats.'
- '401 Unauthorized: Verify OAuth credentials.'
- '404 Not Found: Confirm incident ID exists.'
- '400 Bad Request: Check for missing required fields'
- '401 Unauthorized: Verify client credentials and scopes'
- '404 Not Found: Check endpoint URL'
auth_info:
  mentioned_objects:
  - clientId
  - clientSecret
  - token
  - apiKey
  - apiSecret
client:
  base_url: http://localhost:1024
  auth:
    type: bearer_token
    token_url: ''
source_metadata: null
