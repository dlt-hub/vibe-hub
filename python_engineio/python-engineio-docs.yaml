resources:
- name: Engine.IO Server
  endpoint:
    path: /engine.io/
    method: GET
- name: engineio.Server
  endpoint:
    path: api.html#engineio.Server
    method: GET
- name: engineio.AsyncServer
  endpoint:
    path: api.html#engineio.AsyncServer
    method: GET
notes:
- To enable logging set to True or pass a logger object to use.
- The default request timeout is 5 seconds.
- Set ssl_verify to False to skip SSL certificate verification.
- Compatible with Python 3.6+.
- Uses an event-based architecture implemented with decorators that hides the details
  of the protocol.
- Implements HTTP long-polling and WebSocket transports.
- Static file serving is intended for development use only, and as such it lacks important
  features such as caching. Do not use in a production environment.
- Logging can help identify the cause of connection problems, unexpected disconnections
  and other issues.
- Gevent provides a monkey_patch() function that replaces all the blocking functions
  in the standard library with equivalent asynchronous versions.
- While python-engineio does not require monkey patching, other libraries such as
  database drivers are likely to require it.
- Static file serving is intended for development use only, and as such it lacks important
  features such as caching.
- Gevent can be used with one worker process in gunicorn due to limitations in its
  load balancing algorithm.
- A server configured for threading is deployed as a regular web application, using
  any WSGI compliant multi-threaded server.
- Gunicorn can only be used with one worker process, so the -w 1 option is required.
- Instances of class engineio.Server will automatically use the threading mode if
  neither eventlet nor gevent are not installed.
- Engine.IO is a stateful protocol, which makes horizontal scaling more difficult.
- Each Engine.IO server process must be able to handle multiple requests concurrently.
- The load balancer must be configured to always forward requests from a client to
  the same process.
- static file serving is intended for development use only, and as such it lacks important
  features such as caching. Do not use in a production environment.
errors: []
auth_info:
  mentioned_objects:
  - engineio.Server
  - Flask
client:
  base_url: http://localhost:5000
  headers:
    Accept: application/json
source_metadata: null
