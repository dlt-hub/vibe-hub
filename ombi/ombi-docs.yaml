resources:
- name: installation
  endpoint:
    path: /guides/installation
    method: GET
    data_selector: content
    params: {}
- name: OmbiDatabase
  endpoint:
    path: /database.json
    method: GET
    data_selector: OmbiDatabase
- name: SettingsDatabase
  endpoint:
    path: /database.json
    method: GET
    data_selector: SettingsDatabase
- name: ExternalDatabase
  endpoint:
    path: /database.json
    method: GET
    data_selector: ExternalDatabase
- name: OmbiDatabase
  endpoint:
    path: database.json
    method: GET
    data_selector: OmbiDatabase
- name: SettingsDatabase
  endpoint:
    path: database.json
    method: GET
    data_selector: SettingsDatabase
- name: ExternalDatabase
  endpoint:
    path: database.json
    method: GET
    data_selector: ExternalDatabase
- name: OmbiDatabase
  endpoint:
    path: /Ombi
    method: CREATE
    data_selector: Ombi
    params: {}
- name: SettingsDatabase
  endpoint:
    path: /Ombi_Settings
    method: CREATE
    data_selector: Ombi_Settings
    params: {}
- name: ExternalDatabase
  endpoint:
    path: /Ombi_External
    method: CREATE
    data_selector: Ombi_External
    params: {}
- name: OmbiDatabase
  endpoint:
    path: /Ombi
    method: CREATE
    data_selector: CREATE DATABASE IF NOT EXISTS `Ombi` DEFAULT CHARACTER SET utf8mb4
      COLLATE utf8mb4_bin;
- name: SettingsDatabase
  endpoint:
    path: /Ombi_Settings
    method: CREATE
    data_selector: CREATE DATABASE IF NOT EXISTS `Ombi_Settings` DEFAULT CHARACTER
      SET utf8mb4 COLLATE utf8mb4_bin;
- name: ExternalDatabase
  endpoint:
    path: /Ombi_External
    method: CREATE
    data_selector: CREATE DATABASE IF NOT EXISTS `Ombi_External` DEFAULT CHARACTER
      SET utf8mb4 COLLATE utf8mb4_bin;
- name: Customization Settings
  endpoint:
    path: /settings/customization
    method: GET
    data_selector: settings
    params: {}
- name: issues
  endpoint:
    path: /settings/issues
    method: GET
    data_selector: issues
    params: {}
- name: categories
  endpoint:
    path: /settings/issues/categories
    method: GET
    data_selector: categories
    params: {}
- name: issue_settings
  endpoint:
    path: /settings/issues
    method: GET
    data_selector: issues
- name: import_plex_users
  endpoint:
    path: /settings/usermanagement/import-plex-users
    method: GET
    data_selector: imported_users
- name: import_plex_admin
  endpoint:
    path: /settings/usermanagement/import-plex-admin
    method: GET
    data_selector: imported_admin
- name: cleanup_plex_users
  endpoint:
    path: /settings/usermanagement/cleanup-plex-users
    method: GET
    data_selector: cleaned_users
- name: default_roles
  endpoint:
    path: /settings/usermanagement/default-roles
    method: GET
    data_selector: roles
- name: default_request_limit
  endpoint:
    path: /settings/usermanagement/default-request-limit
    method: GET
    data_selector: request_limits
- name: streaming_country
  endpoint:
    path: /settings/usermanagement/streaming-country
    method: GET
    data_selector: streaming_country
- name: run_importer
  endpoint:
    path: /settings/usermanagement/run-importer
    method: POST
    data_selector: importer_run
- name: vote_limits
  endpoint:
    path: /settings/vote/vote_limits
    method: GET
    data_selector: vote_limits
    params: {}
- name: vote_limits
  endpoint:
    path: /settings/vote/#vote-limits
    method: GET
    data_selector: vote_limits
    params: {}
- name: Servers
  endpoint:
    path: /settings/plex/#servers
    method: GET
- name: servers
  endpoint:
    path: /servers
    method: GET
- name: watchlist
  endpoint:
    path: /watchlist
    method: GET
- name: server_info
  endpoint:
    path: /api/server/info
    method: GET
    data_selector: server
- name: libraries
  endpoint:
    path: /LoadLibraries
    method: GET
- name: test_connectivity
  endpoint:
    path: /TestConnectivity
    method: GET
- name: server_information
  endpoint:
    path: /DiscoverServerInformation
    method: GET
- name: manually_run_cacher
  endpoint:
    path: /ManuallyRunCacher
    method: POST
- name: clear_data_and_resync
  endpoint:
    path: /ClearDataAndResync
    method: POST
- name: server_info
  endpoint:
    path: /api/server/info
    method: GET
    data_selector: data
- name: media
  endpoint:
    path: /api/media
    method: GET
    data_selector: items
- name: sonarr
  endpoint:
    path: /api/sonarr
    method: GET
    data_selector: records
- name: movies
  endpoint:
    path: /api/movies
    method: POST
    data_selector: movies
    params:
      enabled: 'true'
- name: tv_shows
  endpoint:
    path: /api/tvshows
    method: POST
    data_selector: tv_shows
    params:
      enabled: 'true'
- name: movies
  endpoint:
    path: /api/movies
    method: POST
    data_selector: watchlist
    params: {}
- name: tv_shows
  endpoint:
    path: /api/tvshows
    method: POST
    data_selector: watchlist
    params: {}
- name: user_preferences
  endpoint:
    path: /settings/user-preferences
    method: GET
    data_selector: user_preferences
    params: {}
- name: language
  endpoint:
    path: /settings/user-preferences/language
    method: GET
    data_selector: language_options
- name: streaming_country
  endpoint:
    path: /settings/user-preferences/streaming-country
    method: GET
    data_selector: country_code
- name: notifications
  endpoint:
    path: /settings/notifications/
    method: GET
- name: Sonarr Sync
  endpoint:
    path: /sonarr/sync
    method: GET
    data_selector: jobs
    params:
      cron: 0 10 0/1 1/1 * ? *
- name: SickRage Sync
  endpoint:
    path: /sickrage/sync
    method: GET
    data_selector: jobs
    params:
      cron: 0 35 0/1 1/1 * ? *
- name: Radarr Sync
  endpoint:
    path: /radarr/sync
    method: GET
    data_selector: jobs
    params:
      cron: 0 15 0/1 1/1 * ? *
- name: Lidarr Sync
  endpoint:
    path: /lidarr/sync
    method: GET
    data_selector: jobs
    params:
      cron: 0 40 0/1 1/1 * ? *
- name: CouchPotato Sync
  endpoint:
    path: /couchpotato/sync
    method: GET
    data_selector: jobs
    params:
      cron: 0 30 0/1 1/1 * ? *
- name: Automatic Update
  endpoint:
    path: /automatic/update
    method: GET
    data_selector: jobs
    params:
      cron: 0 0 0/6 1/1 * ? *
- name: Retry Failed Requests
  endpoint:
    path: /retry/failed/requests
    method: GET
    data_selector: jobs
    params:
      cron: 0 0 6 1/1 * ? *
- name: Plex Sync
  endpoint:
    path: /plex/sync
    method: GET
    data_selector: jobs
    params:
      cron: 0 0 2 1/1 * ? *
- name: Plex Recently Added Sync
  endpoint:
    path: /plex/recently/added/sync
    method: GET
    data_selector: jobs
    params:
      cron: 0 0/30 * 1/1 * ? *
- name: Emby Sync
  endpoint:
    path: /emby/sync
    method: GET
    data_selector: jobs
    params:
      cron: 0 5 0/1 1/1 * ? *
- name: User Importer
  endpoint:
    path: /user/importer
    method: GET
    data_selector: jobs
    params:
      cron: 0 0 0 1/1 * ? *
- name: Refresh Metadata
  endpoint:
    path: /refresh/metadata
    method: GET
    data_selector: jobs
    params:
      cron: 0 0 12 1/3 * ? *
- name: Newsletter
  endpoint:
    path: /newsletter
    method: GET
    data_selector: jobs
    params:
      cron: 0 0 12 ? * 6 *
- name: Issue Purge/Delete
  endpoint:
    path: /issue/purge/delete
    method: GET
    data_selector: jobs
    params:
      cron: 0 0 0 1/1 * ? *
- name: Media Data Refresh
  endpoint:
    path: /media/data/refresh
    method: GET
    data_selector: jobs
    params:
      cron: 0 0 12 1/5 * ? *
- name: Sonarr Sync
  endpoint:
    path: /scheduled_tasks/sonarr_sync
    method: GET
    data_selector: records
    params:
      cron_expression: 0 10 0/1 1/1 * ? *
- name: SickRage Sync
  endpoint:
    path: /scheduled_tasks/sickrage_sync
    method: GET
    data_selector: records
    params:
      cron_expression: 0 35 0/1 1/1 * ? *
- name: Radarr Sync
  endpoint:
    path: /scheduled_tasks/radarr_sync
    method: GET
    data_selector: records
    params:
      cron_expression: 0 15 0/1 1/1 * ? *
- name: Lidarr Sync
  endpoint:
    path: /scheduled_tasks/lidarr_sync
    method: GET
    data_selector: records
    params:
      cron_expression: 0 40 0/1 1/1 * ? *
- name: CouchPotato Sync
  endpoint:
    path: /scheduled_tasks/couchpotato_sync
    method: GET
    data_selector: records
    params:
      cron_expression: 0 30 0/1 1/1 * ? *
- name: Automatic Update
  endpoint:
    path: /scheduled_tasks/automatic_update
    method: GET
    data_selector: records
    params:
      cron_expression: 0 0 0/6 1/1 * ? *
- name: Retry Failed Requests
  endpoint:
    path: /scheduled_tasks/retry_failed_requests
    method: GET
    data_selector: records
    params:
      cron_expression: 0 0 6 1/1 * ? *
- name: Plex Sync
  endpoint:
    path: /scheduled_tasks/plex_sync
    method: GET
    data_selector: records
    params:
      cron_expression: 0 0 2 1/1 * ? *
- name: Plex Recently Added Sync
  endpoint:
    path: /scheduled_tasks/plex_recently_added_sync
    method: GET
    data_selector: records
    params:
      cron_expression: 0 0/30 * 1/1 * ? *
- name: Emby Sync
  endpoint:
    path: /scheduled_tasks/emby_sync
    method: GET
    data_selector: records
    params:
      cron_expression: 0 5 0/1 1/1 * ? *
- name: User Importer
  endpoint:
    path: /scheduled_tasks/user_importer
    method: GET
    data_selector: records
    params:
      cron_expression: 0 0 0 1/1 * ? *
- name: Refresh Metadata
  endpoint:
    path: /scheduled_tasks/refresh_metadata
    method: GET
    data_selector: records
    params:
      cron_expression: 0 0 12 1/3 * ? *
- name: Newsletter
  endpoint:
    path: /scheduled_tasks/newsletter
    method: GET
    data_selector: records
    params:
      cron_expression: 0 0 12 ? * 6 *
- name: Issue Purge/Delete
  endpoint:
    path: /scheduled_tasks/issue_purge_delete
    method: GET
    data_selector: records
    params:
      cron_expression: 0 0 0 1/1 * ? *
- name: Media Data Refresh
  endpoint:
    path: /scheduled_tasks/media_data_refresh
    method: GET
    data_selector: records
    params:
      cron_expression: 0 0 12 1/5 * ? *
- name: sqlite_backup
  endpoint:
    path: /backups/sqlite
    method: GET
    data_selector: files
    params: {}
- name: mysql_backup
  endpoint:
    path: /backups/mysql
    method: GET
    data_selector: databases
    params: {}
- name: database_backup
  endpoint:
    path: /backing-up/ombi
    method: GET
    data_selector: databases
    params: {}
- name: ombi
  endpoint:
    path: /
    method: GET
    data_selector: records
- name: Ombi
  endpoint:
    path: /
    method: GET
    data_selector: records
- name: notification_variables
  endpoint:
    path: /info/notification-template-variables/
    method: GET
    data_selector: variables
    params: {}
- name: notification_variables
  endpoint:
    path: /info/notification-template-variables/
    method: GET
    data_selector: variables
    params: {}
- name: Tautulli Users
  endpoint:
    path: /api/v2
    method: GET
    data_selector: response.data
    params:
      apikey: ''
      cmd: get_users
- name: Ombi Users
  endpoint:
    path: /api/v1/Identity/Users
    method: GET
    data_selector: ''
    params: {}
- name: Update Ombi User
  endpoint:
    path: /api/v1/Identity
    method: PUT
    data_selector: ''
    params: {}
- name: ombi
  endpoint:
    path: /ombi
    method: GET
- name: Apache2
  endpoint:
    path: /info/reverse-proxy/#apache2
    method: GET
    data_selector: documents
    params: {}
- name: IIS
  endpoint:
    path: /info/reverse-proxy/#iis
    method: GET
    data_selector: documents
    params: {}
- name: Caddy
  endpoint:
    path: /info/reverse-proxy/#caddy
    method: GET
    data_selector: documents
    params: {}
- name: Traefik
  endpoint:
    path: /info/reverse-proxy/#traefik
    method: GET
    data_selector: documents
    params: {}
- name: notifications
  endpoint:
    path: /info/roles-and-notifications
    method: GET
    data_selector: notifications
    params: {}
- name: OmbiDatabase
  endpoint:
    path: /ombi_sqlite2mysql.py
    method: POST
    data_selector: ConnectionString
    params: {}
- name: SettingsDatabase
  endpoint:
    path: /ombi_sqlite2mysql.py
    method: POST
    data_selector: ConnectionString
    params: {}
- name: ExternalDatabase
  endpoint:
    path: /ombi_sqlite2mysql.py
    method: POST
    data_selector: ConnectionString
    params: {}
- name: OmbiDatabase
  endpoint:
    path: /OmbiDatabase
    method: POST
    data_selector: database
    params:
      ConnectionString: Server=192.168.1.100;Port=3306;Database=Ombi;User=ombi;Password=ombi
- name: SettingsDatabase
  endpoint:
    path: /SettingsDatabase
    method: POST
    data_selector: database
    params:
      ConnectionString: Server=192.168.1.100;Port=3306;Database=Ombi_Settings;User=ombi;Password=ombi
- name: ExternalDatabase
  endpoint:
    path: /ExternalDatabase
    method: POST
    data_selector: database
    params:
      ConnectionString: Server=192.168.1.200;Port=3306;Database=Ombi_External;User=ombi;Password=ombi
- name: OmbiDatabase
  endpoint:
    path: migration.json
    method: GET
    data_selector: OmbiDatabase
    params: {}
- name: SettingsDatabase
  endpoint:
    path: migration.json
    method: GET
    data_selector: SettingsDatabase
    params: {}
- name: ExternalDatabase
  endpoint:
    path: migration.json
    method: GET
    data_selector: ExternalDatabase
    params: {}
- name: OmbiDatabase
  endpoint:
    path: /etc/Ombi/migration.json
    method: GET
    data_selector: OmbiDatabase
    params: {}
- name: SettingsDatabase
  endpoint:
    path: /etc/Ombi/migration.json
    method: GET
    data_selector: SettingsDatabase
    params: {}
- name: ExternalDatabase
  endpoint:
    path: /etc/Ombi/migration.json
    method: GET
    data_selector: ExternalDatabase
    params: {}
- name: api
  endpoint:
    path: /api
    method: GET
- name: swagger
  endpoint:
    path: /swagger
    method: GET
- name: ombi_api
  endpoint:
    path: /ombi/api
    method: GET
- name: api
  endpoint:
    path: /api
    method: GET
- name: swagger
  endpoint:
    path: /swagger
    method: GET
- name: api
  endpoint:
    path: /ombi/api
    method: GET
- name: swagger
  endpoint:
    path: /ombi/swagger
    method: GET
- name: api
  endpoint:
    path: /api
    method: GET
- name: swagger
  endpoint:
    path: /swagger
    method: GET
- name: ombi
  endpoint:
    path: /ombi
    method: GET
- name: import_plex_users
  endpoint:
    path: /settings/usermanagement/import-plex-users
    method: POST
    data_selector: imported_users
    params: {}
- name: import_plex_admin
  endpoint:
    path: /settings/usermanagement/import-plex-admin
    method: POST
    data_selector: imported_admin
    params: {}
- name: cleanup_plex_users
  endpoint:
    path: /settings/usermanagement/cleanup-plex-users
    method: DELETE
    data_selector: removed_users
    params: {}
- name: import_plex_users
  endpoint:
    path: /settings/usermanagement/import-plex-users
    method: GET
    data_selector: users
    params: {}
- name: import_plex_admin
  endpoint:
    path: /settings/usermanagement/import-plex-admin
    method: GET
    data_selector: admin
    params: {}
- name: cleanup_plex_users
  endpoint:
    path: /settings/usermanagement/cleanup-plex-users
    method: GET
    data_selector: cleanup
    params: {}
- name: user_roles
  endpoint:
    path: /info/user-roles
    method: GET
    data_selector: roles
- name: Ombi
  endpoint:
    path: /server_sql.php
    method: GET
    data_selector: records
- name: Ombi
  endpoint:
    path: /
    method: GET
    data_selector: records
    params: {}
- name: installation
  endpoint:
    path: /guides/installation/
    method: GET
- name: windows_installation
  endpoint:
    path: /guides/installation/#windows
    method: GET
- name: linux_installation
  endpoint:
    path: /guides/installation/#linux-systems
    method: GET
- name: docker_installation
  endpoint:
    path: /guides/installation/#docker
    method: GET
- name: feature_suggestions
  endpoint:
    path: /info/faq/#how-do-i-request-a-feature-be-added-to-ombi
    method: GET
- name: plex_connection
  endpoint:
    path: /info/faq/#what-is-the-plex-connection-used-for
    method: GET
- name: synchronize_users
  endpoint:
    path: /info/faq/#can-i-synchronise-users-between-ombi-and-tautulli
    method: GET
- name: qr_code_mobile
  endpoint:
    path: /info/faq/#how-do-i-get-the-qr-code-for-mobile-connections
    method: GET
- name: database_uses
  endpoint:
    path: /info/faq/#database-uses
    method: GET
- name: ombi_logs_logarr
  endpoint:
    path: /info/faq/#how-can-i-include-ombi-logs-in-logarr
    method: GET
- name: force_requests_readd
  endpoint:
    path: /info/faq/#can-i-force-requests-to-re-add-to-client-systems
    method: GET
- name: tv_shows_not_showing
  endpoint:
    path: /info/faq/#tv-shows-and-episodes-not-showing-as-available
    method: GET
- name: notifications_not_sending
  endpoint:
    path: /info/faq/#notifications-are-not-sending-but-mass-email-works
    method: GET
- name: notifications_requests_not_received
  endpoint:
    path: /info/faq/#notifications-for-requests-not-being-received
    method: GET
- name: default_language
  endpoint:
    path: /info/faq/#ombi-does-not-default-to-english-or-my-preferred-language
    method: GET
- name: enable_debug_logging
  endpoint:
    path: /info/faq/#how-do-i-enable-debug-logging
    method: GET
- name: wrong_server_version
  endpoint:
    path: /info/faq/#wrong-server-version
    method: GET
- name: email_notifications
  endpoint:
    path: /settings/notifications/email
    method: POST
    data_selector: settings
    params: {}
- name: webhook
  endpoint:
    path: /webhooks
    method: POST
    data_selector: payload
    params: {}
- name: SMTP Settings
  endpoint:
    path: /settings/notifications/email
    method: POST
    data_selector: settings
    params:
      smtp_server: smtp.gmail.com
      port: 587
notes:
- Using the API key provides admin access to the whole system, so keep this a secret.
- Common Errors can be found in the documentation
- After installing the system, be sure to configure your own systems to handle the
  requests after approval.
- Whatever combination of the supported systems you use is up to you - Sonarr, Radarr,
  Couchpotato, Lidarr... Whatever.
- Packages in this repo use systemd.
- Ombi supports multiple database types, not just SQLite.
- If the database.json file is not found, Ombi falls back to the default SQLite databases.
- Ensure database character set is set to utf8mb4.
- Support for MySQL 5.7 ended in October 2023.
- Ensure that your database character set is set to utf8mb4.
- If you are doing this on your server machine changing the environment will make
  your Ombi install fail to run.
- Be sure to change the environment back to production to re-run Ombi.
- Gmail required you to enable 'access for less secure apps', under your account security.
- If an issue was specific to a certain provider, it'll be noted here.
- For SMTP in the past, Gmail required you to enable 'access for less secure apps',
  under your account security.
- This setting has been almost completely retired (it's being done in stages, not
  all users encountered this at once).
- The only way moving forward is via Two Factor Authentication (2FA).
- The built-in automatic updater is broken for 'local' installations.
- Automated container updates via something like WatchTower for docker installs are
  unaffected - only direct installs using apt/exe deployment.
- This script only works for develop releases and should be considered ***beta***.
- Automated container updates via something like WatchTower for docker installs are
  unaffected.
- Custom Page is public and can be accessed without authorization, use with caution.
- This will replace most references to the word `Ombi` with a new name.
- This is for any external links Ombi sends out through any of the notification methods.
- This is used for the Login Page, Landing Page and also any notifications that we
  send a logo.
- This will default to the Ombi logo, but you can have your own favicon load if you
  wish to.
- Does what it says on the tin.
- We have the ability to set a custom donation url and message.
- This allows you to add a blank page to the Nav bar that you are able to fully customise
  the HTML with a WYSIWYG editor.
- There are two ways we officially support custom CSS.
- We do have the ability to change what backgrounds are used on the landing and login
  pages.
- Allow users to see the Report Issue button.
- This allows you to mark issues as 'in progress' so users know you're looking into
  it.
- Deletes an issue 'x' days after you've marked it as resolved.
- Allows users to report issues with specific items in your libraries.
- Only Plex users you have shared your library with can be imported.
- Managed user accounts are tied to your admin account and cannot be imported separately.
- This will run a scheduled job every day that will import Plex users and give them
  the default permissions you have setup.
- It will also look at the existing users that have been imported and update their
  email if it has changed.
- If the user reaches their request limit they will no longer be able to request.
  If you do not want your user to have a request limit, set it to 0.
- Exclude the API from the auth method
- Vote limits tell Ombi how many votes the request needs before approval.
- If you set your vote limit to 1 then things will be auto approved!
- If you have 2FA enabled on your account, you need to append the 2FA code to the
  end of your password.
- If SSL is handled by a reverse proxy, leave it off.
- Default port is 8096.
- Default port for Emby is 8096
- You will need to generate an API key in JellyFin in order for Ombi to authenticate
  with it.
- Default port for JellyFin is 8096.
- SSL should be enabled in JellyFin if applicable.
- Enable Season Folders recommended for keeping files organized.
- If enabled then any movie requests will be added to your Movie Watchlist on DogNzb.
- If enabled then any TV requests will be added to your Watchlist on DogNzb. Please
  note that DogNzb does not support episode requests.
- Per-user settings like roles can be applied by the admin under User Management.
- Available methods include Mobile, Legacy Mobile, Email, MassEmail, Newsletter, Discord,
  Slack, Pushbullet, Pushover, Mattermost, Telegram, Gotify, Twilio, Webhook
- If a notification type is enabled at the server level, it will notify any user with
  a value under that notification type.
- Notifications will be sent via all methods active for the user, potentially duplicating
  notifications.
- Do not forget to disable debug logging once you are done - it is for troubleshooting,
  and should not be left enabled full-time.
- 'Back up the SQLite db files: ombi.db, ombisettings.db, ombiexternal.db'
- Back up database.json.
- V4 introduced/introduces an entirely new UI structure, and is in the process of
  being entirely rewritten.
- V4 introduced/introduces an entirely new UI structure, and is in the process of
  being entirely rewritten. As such, these classes and themes are subject to change.
  They may or may not work.
- Open Ombi "http://docker-host-ip:5000" and setup your ombi installation.
- If you wish to use MySQL as a database for ombi, then you'll need to create a 'database.json'
  file in the config folder.
- Ombi requires configuration of application URL for notifications.
- Debug logging can be enabled by editing appsettings.json.
- Ombi needs to know where to send users if they click any links within the notifications.
- Any and all common bugs that we are aware of will be added here.
- Please note that as things are being found, reported, and fixed at a colossal rate,
  this page will frequently be outdated.
- In every notification type, you are able to pass in variables that Ombi will populate
  with data when sending out the actual message.
- This script requires the requests module to be installed.
- Ombi must be started with the --baseurl /ombi option
- Ensure your Application Url (in Ombi) matches the server_name field
- Ombi doesn't do SSL in and of itself. We write a specific tool for a specific purpose.
- Ensure your Application Url (in Ombi) matches the server_name field.
- Uses SSL/TLS configuration for secure connections.
- Ombi doesn't do SSL in and of itself.
- Uses reverse proxy configuration for Ombi
- Uses OAuth2 with refresh token — requires setup of connected app in api
- Some objects like Contact may return nulls in deeply nested fields
- Certain roles automatically disable some notifications for that user.
- If notifications are not working but the 'Test Notification' does, check the roles
  they're assigned.
- Default = http://*:5000
- We are well aware that we can't think of everything, and the best place to get actual
  useful ideas is you, the users.
- If you use 2FA then the 2FA code needs to be appended onto the end of your password
- Requires Python3 and Ombi version 4.0.728 or higher.
- Not recommended to use the python3-mysqldb package on Debian/Ubuntu.
- The script will empty the tables from the MySQL/MariaDB database and automatically
  migrate the data from SQLite to MySQL/MariaDB.
- This error typically occurs when tables were not successfully created with the --migrate
  argument to ombi.
- The solution is to add the --storage argument when we run the migration.
- We need to change the default setting to 'Use Legacy Authentication Method'.
- Make sure you don't forget the password!
- We need to change the default setting to 'Use Legacy Authentication Method'. Since
  this is a security risk I would advise closing the port (3306 default) in your modem.
- Ensure your setup is using the Fullchain SSL certificate.
- Coming Soon
- Check 'Run with highest privileges'
- Run whether user is logged on or not to ensure Ombi runs even when you are logged
  out
- 'Configure for: Choose your Windows version'
- Please enter your credentials, and click OK.
- This is an NGINX subdomain reverse proxy that DOES NOT use baseurl.
- The official binaries and Docker image do not include any of the DNS plugins required
  for wildcard certificates or DNS verification instead of port 80 verification. If
  your connection blocks port 80, you will need to build your own binary or image
  to include these.
- This is an NGINX reverse proxy configuration that DOES use baseurl.
- This script only works for develop releases and should be considered beta.
- Assume all commands require sudo.
- The virtual directory should target a physical directory that resides at c:\inetpub\wwwroot\ombi.
- We REALLY do not recommend this option. While we endeavour to make the application
  itself as secure as possible, leaving traffic to go in and out of your network unencrypted
  is not a good thing to do, nor is simply punching a hole in your firewall through
  a forwarded port.
- Ombi doesn't do SSL in and of itself. We write a specific tool, for a specific purpose,
  and we're not going to be able to do SSL better than a dedicated web server software
  can.
- This is not done via the Ombi UI, but done in the appsettings.json file in the Ombi
  directory
- Ombi doesn't do SSL in and of itself. A reverse proxy is recommended to handle SSL.
- Uses a reverse proxy setup with WebSocket support
- Providing a nice URL for users to access
- Providing a layer of SSL security for your Ombi users
- Uses Apache2, IIS, Caddy, and Traefik for reverse proxy configurations.
- Scheduled job runs daily to import Plex users and update emails.
- Old Plex users can be removed to prevent access to content.
- Changing user roles requires them to log out and in again before they are applied.
- Ensure Ombi runs even when you are logged out
- Either restart your PC for task scheduler to take over, or manually start it in
  the Task Scheduler Library on the far left.
- This should be a semicolon-separated (;) list of URL prefixes to which the server
  should respond.
- The protocol (http://) must be included with each URL.
- Open Ombi 'http://docker-host-ip:5000' and setup your ombi installation.
- The next time you restart your PC, Task Scheduler will run ombi for you.
- This repo is signed. This means packages get validated before installation.
- If no errors are shown, Ombi has been installed successfully and will automatically
  start during boot.
- Uses systemd to manage Ombi service
- Ombi should now be reachable at http://your-ip-address:5000
- Requires setup of connected app in Ombi
- Must have a webhook set up for your chosen discord server or channel.
- User ID must be found by right clicking their name in Discord and selecting 'Copy
  ID'.
- Ombi requires a configured application URL for notifications.
- 'SMTP Server for Gmail: smtp.gmail.com, Port: 587'
- 'SMTP Server for Office 365: smtp.office365.com, Port: 587'
- 'SMTP Server for Yahoo: smtp.mail.yahoo.com, Port: 587'
- Requires Two Factor Authentication and app password for Gmail.
- To send email via Gmail with a direct SMTP connection, you will need to add an App
  Password to your account.
- This is only possible if you have 2 factor authentication turned ON with your Gmail
  account.
- As things are being found, reported, and fixed at a colossal rate, this page will
  frequently be outdated.
- Common Errors
errors:
- Common Errors
- 'GRANT ALL PRIVILEGES: Required for every database created.'
- Support for MySQL 5.7 ended in October 2023.
- If you have difficulty getting the script/executable working, you can test the script
  by opening a command prompt in the folder where your script is located.
- If you have difficulty getting the script/executable working, check that you have
  backed up your SQLite database.
- 'REQUEST_LIMIT_EXCEEDED: Throttle API calls or reduce frequency'
- 'QUERY_TIMEOUT: Break down filters or add selectivity'
- '401 Unauthorized: Recheck OAuth scopes or token expiration'
- 'SQLite Error 1: ''No such column: x.RequestId'''
- 'Error updating from Web UI: See Update Errors'
- Using the v4 repo, I get 'missing release file'. We are currently migrating the
  repositories. Bear with us, it will be resolved soon™.
- Ubuntu 21.xx and onwards has moved to a new method of signing repositories, where
  keys are trusted per repository instead of per key.
- Ombi currently needs access to write and read the Index.html file ('ClientApp/dist/index.html'),
  this is to work around a unsupported scenario with Angular.
- 'System.TypeInitializationException: The type initializer for ''System.Net.Http.CurlHandler''
  threw an exception.'
- Using the v4 repo, I get "missing release file".
- Ombi currently needs access to write and read the Index.html file (`ClientApp/dist/index.html`),
  this is to work around a unsupported scenario with Angular.
- 'Wrong Server Version: Using only the domain certificate without providing the intermediate
  certificate can cause errors.'
- Some Roles do not trigger some notifications
- If there is an error you can contact in Discord or you can open an incident.
- 'Wrong server version: Ensure your setup is using the Fullchain SSL certificate.'
- 'Wrong server version: due to an inability to verify the full SSL trust chain.'
- Timeout if the real server is dead
- Advanced Proxy Config
- If you have difficulty getting the script/executable working, double check that
  you have backed up your SQLite database and/or database.json file before proceeding.
- 'System.InvalidOperationException: This operation is not supported for a relative
  URI.'
- 'libunwind.so.8: cannot open shared object file You may need to install libunwind8.'
- There was an error when sending the Mobile message. Please check your settings.
- no usable version of libssl found
- 'No such column: x.RequestId'
- 'Using the v4 repo, I get ''missing release file'': We are currently migrating the
  repositories. Bear with us, it will be resolved soon™.'
- 'Ombi currently needs access to write and read the Index.html file: Ombi will write
  and read that file every time Ombi starts up.'
- 'System.TypeInitializationException: The type initializer for ''System.Net.Http.CurlHandler''
  threw an exception: Run `apt install libcurl4-openssl-dev`.'
- '[Warning] Exception when testing Email Notifications: System.InvalidOperationException:
  This operation is not supported for a relative URI.'
- Error updating from Web UI
- Using the v4 repo, I get 'missing release file'.
- Ombi currently needs access to write and read the Index.html file.
auth_info:
  mentioned_objects: []
client:
  base_url: https://docs.ombi.app
  auth:
    type: oauth2
    location: header
    header_name: Authorization
source_metadata: null
