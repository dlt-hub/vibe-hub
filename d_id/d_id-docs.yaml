resources:
- name: delete_video_translate
  endpoint:
    path: /translations/{id}
    method: DELETE
- name: animations
  endpoint:
    path: /animations
    method: POST
    data_selector: null
    params: {}
- name: get_animations
  endpoint:
    path: /animations
    method: GET
    data_selector: null
    params: {}
- name: get_credits
  endpoint:
    path: /credits
    method: GET
    data_selector: null
    params: {}
- name: upload_image
  endpoint:
    path: /upload-an-image
    method: POST
    data_selector: null
    params: {}
- name: upload_audio
  endpoint:
    path: /upload-an-audio
    method: POST
    data_selector: null
    params: {}
- name: talks
  endpoint:
    path: /talks
    method: POST
    data_selector: id
- name: get_specific_talk
  endpoint:
    path: /talks/<id>
    method: GET
    data_selector: metadata
- name: drivers
  endpoint:
    path: /drivers
    method: GET
- name: expressions
  endpoint:
    path: /expressions
    method: GET
- name: create_talk
  endpoint:
    path: /talks
    method: POST
    data_selector: object
- name: talks
  endpoint:
    path: /talks
    method: GET
    data_selector: talks
    params:
      limit: '100'
- name: get_a_specific_talk
  endpoint:
    path: /talks/{id}
    method: GET
    data_selector: object
    params: {}
- name: delete_talk
  endpoint:
    path: /talks/{id}
    method: DELETE
- name: create_talk
  endpoint:
    path: /talks
    method: POST
    data_selector: id
- name: clips
  endpoint:
    path: /clips
    method: POST
    data_selector: id
- name: get_specific_clip
  endpoint:
    path: /clips/<id>
    method: GET
    data_selector: metadata
- name: get_presenters
  endpoint:
    path: /clips/presenters
    method: GET
    data_selector: presenters
- name: clips
  endpoint:
    path: /clips
    method: POST
    data_selector: id
    params: {}
- name: presenters
  endpoint:
    path: /clips/presenters
    method: GET
- name: presenters
  endpoint:
    path: /clips/presenters
    method: GET
    data_selector: presenters
    params: {}
- name: presenters
  endpoint:
    path: /v2/presenters
    method: GET
    data_selector: presenters
    params:
      limit: 100
- name: presenters
  endpoint:
    path: /clips/presenters
    method: GET
    data_selector: presenters
    params:
      limit: 100
- name: get_presenter_by_id
  endpoint:
    path: /clips/presenters/{id}
    method: GET
    data_selector: presenters
- name: delete_presenter
  endpoint:
    path: /clips/presenters/{id}
    method: DELETE
    data_selector: null
    params: {}
- name: clips
  endpoint:
    path: /clips
    method: POST
    data_selector: id
- name: consents
  endpoint:
    path: /consents
    method: POST
    data_selector: id
- name: presenters
  endpoint:
    path: /clips/presenters/{id}
    method: GET
    data_selector: presenters
- name: create_clip
  endpoint:
    path: /clips
    method: POST
    data_selector: ''
    params: {}
- name: get_clip
  endpoint:
    path: /clips/{id}
    method: GET
    data_selector: ''
    params: {}
- name: create_premium_avatar
  endpoint:
    path: /clips/avatars
    method: POST
- name: create_clip
  endpoint:
    path: /clips
    method: POST
    data_selector: object
- name: get_clips
  endpoint:
    path: /getclips
    method: GET
    data_selector: object
- name: delete_clip
  endpoint:
    path: /deleteclip
    method: DELETE
    data_selector: object
- name: clips
  endpoint:
    path: /clips
    method: GET
    data_selector: clips
    params:
      limit: 100
- name: clip
  endpoint:
    path: /clips/{id}
    method: GET
    data_selector: object
    params: {}
- name: delete_clip
  endpoint:
    path: /clips/{id}
    method: DELETE
- name: animations
  endpoint:
    path: /animations
    method: POST
    data_selector: result_url
- name: get_specific_animation
  endpoint:
    path: /animations/<id>
    method: GET
    data_selector: metadata
- name: create_animation
  endpoint:
    path: /animations
    method: POST
- name: animations
  endpoint:
    path: /animations
    method: POST
    data_selector: object
- name: animations
  endpoint:
    path: /animations
    method: GET
    data_selector: animations
    params:
      limit: '100'
- name: animations
  endpoint:
    path: /animations/{id}
    method: GET
    data_selector: object
- name: animation
  endpoint:
    path: /animations/{id}
    method: DELETE
- name: translations
  endpoint:
    path: /translations
    method: POST
    data_selector: translations
- name: specific_translation
  endpoint:
    path: /translations/<id>
    method: GET
    data_selector: translations
- name: video_translate
  endpoint:
    path: /translations
    method: POST
- name: Video Translates
  endpoint:
    path: /translations
    method: GET
    data_selector: translations
    params: {}
- name: video_translate
  endpoint:
    path: /translations/{id}
    method: GET
    data_selector: object
- name: scenes
  endpoint:
    path: /scenes
    method: POST
    data_selector: id
- name: consents
  endpoint:
    path: /consents
    method: POST
    data_selector: id
- name: avatars
  endpoint:
    path: /scenes/avatars
    method: POST
    data_selector: id
- name: scene
  endpoint:
    path: /scenes
    method: POST
    data_selector: object
    params: {}
- name: get_scene
  endpoint:
    path: /scenes/{id}
    method: GET
    data_selector: object
    params: {}
- name: create_express_avatar
  endpoint:
    path: /scenes/avatars
    method: POST
    data_selector: object
- name: avatars
  endpoint:
    path: /scenes/avatars
    method: GET
    data_selector: avatars
    params:
      limit: 100
- name: get_avatar_by_id
  endpoint:
    path: /scenes/avatars/{id}
    method: GET
- name: delete_avatar
  endpoint:
    path: /scenes/avatars/{id}
    method: DELETE
    data_selector: null
    params: {}
- name: scenes
  endpoint:
    path: /scenes
    method: POST
    data_selector: object
- name: videos
  endpoint:
    path: /videos
    method: GET
    data_selector: object
- name: scenes
  endpoint:
    path: /scenes
    method: GET
    data_selector: scenes
    params: {}
- name: scene
  endpoint:
    path: /scenes/{id}
    method: GET
    data_selector: object
    params: {}
- name: delete_specific_scene
  endpoint:
    path: /scenes/{id}
    method: DELETE
- name: agents
  endpoint:
    path: /reference/agents
    method: GET
- name: talks
  endpoint:
    path: /reference/talks
    method: GET
- name: clips
  endpoint:
    path: /reference/clips
    method: GET
- name: animations
  endpoint:
    path: /reference/animations
    method: GET
- name: videos
  endpoint:
    path: /reference/videos
    method: GET
- name: voices
  endpoint:
    path: /reference/voices-2
    method: GET
- name: agents
  endpoint:
    path: /agents
    method: POST
- name: get_agents
  endpoint:
    path: /listmyagents
    method: GET
- name: get_agent
  endpoint:
    path: /getagent
    method: GET
- name: update_agent
  endpoint:
    path: /agents/{agentId}/
    method: PATCH
- name: agents
  endpoint:
    path: /reference/agents
    method: GET
- name: create_agent
  endpoint:
    path: /reference/createagent
    method: POST
- name: delete_agent
  endpoint:
    path: /reference/deleteagent
    method: DELETE
- name: update_agent
  endpoint:
    path: /reference/updateagent
    method: PATCH
- name: agents
  endpoint:
    path: /agents/me
    method: GET
    data_selector: agents
    params:
      limit: 100
- name: agents
  endpoint:
    path: /agents/{id}
    method: GET
- name: Update an Agent
  endpoint:
    path: /agents/{id}
    method: PATCH
- name: delete_agent
  endpoint:
    path: /agents/{id}
    method: DELETE
    data_selector: id
- name: agents
  endpoint:
    path: /agents
    method: POST
- name: knowledge
  endpoint:
    path: /knowledge
    method: POST
- name: agents
  endpoint:
    path: /agents
    method: POST
- name: voices
  endpoint:
    path: /voices
    method: GET
- name: credits
  endpoint:
    path: /credits
    method: GET
- name: ratings
  endpoint:
    path: /agents/{agentId}/chat/{chatId}/ratings
    method: POST
    data_selector: object
    params: {}
- name: ratings
  endpoint:
    path: /agents/{agentId}/chat/{chatId}/ratings/{ratingId}
    method: PATCH
- name: delete_rating
  endpoint:
    path: /agents/{agentId}/chat/{chatId}/ratings/{ratingId}
    method: DELETE
- name: agents
  endpoint:
    path: /agents
    method: GET
- name: create_chat
  endpoint:
    path: /agents/{agentId}/chat
    method: POST
- name: send_message
  endpoint:
    path: /agents/{agentId}/chat/{chatId}
    method: POST
- name: create_video_stream
  endpoint:
    path: /agents/{agentId}/streams/{streamId}
    method: POST
- name: agents
  endpoint:
    path: /reference/agents
    method: GET
- name: create_agent
  endpoint:
    path: /reference/createagent
    method: POST
- name: delete_agent
  endpoint:
    path: /reference/deleteagent
    method: DELETE
- name: update_agent
  endpoint:
    path: /reference/updateagent
    method: PATCH
- name: get_agent
  endpoint:
    path: /reference/getagent
    method: GET
- name: list_my_agents
  endpoint:
    path: /reference/listmyagents
    method: GET
- name: create_agent_stream
  endpoint:
    path: /agents/{agentId}/streams
    method: POST
- name: start_webrtc_connection
  endpoint:
    path: /agents/{agentId}/streams/{streamId}/sdp
    method: POST
    data_selector: status
- name: submit_network_information
  endpoint:
    path: /agents/{agentId}/streams/{streamId}/ice
    method: POST
- name: Create a video stream
  endpoint:
    path: /agents/{agentId}/streams/{streamId}
    method: POST
- name: delete_video_stream
  endpoint:
    path: /agents/{agentId}/streams/{streamId}
    method: DELETE
- name: create_chat
  endpoint:
    path: /agents/{agentId}/chat
    method: POST
    data_selector: json
    params: {}
- name: send_message_to_chat
  endpoint:
    path: /agents/{agentId}/chat/{chatId}
    method: POST
- name: create_chat_export
  endpoint:
    path: /agents/chats/exports
    method: POST
    data_selector: export_id
- name: get_chat_export
  endpoint:
    path: /agents/chats/exports/<id>
    method: GET
    data_selector: result
- name: chat_logs
  endpoint:
    path: /reference/get-chat-logs
    method: GET
- name: create_chat_logs
  endpoint:
    path: /reference/create-chat-logs
    method: POST
- name: create_chat_logs
  endpoint:
    path: /agents/chats/exports
    method: POST
    data_selector: export_id
    params: {}
- name: get_chat_logs
  endpoint:
    path: /agents/chats/exports
    method: GET
    data_selector: chat_logs
    params: {}
- name: chat_logs
  endpoint:
    path: /agents/chats/exports/{id}
    method: GET
    data_selector: object
- name: knowledge
  endpoint:
    path: /knowledge
    method: POST
    data_selector: created
    params: {}
- name: documents
  endpoint:
    path: /knowledge/{knowledgeId}/documents
    method: POST
    data_selector: created
    params: {}
- name: knowledge
  endpoint:
    path: /knowledge
    method: POST
    data_selector: object
- name: knowledge
  endpoint:
    path: /knowledge
    method: GET
    data_selector: array of objects
- name: Create a Document
  endpoint:
    path: /knowledge/{knowledgeId}/documents
    method: POST
- name: documents
  endpoint:
    path: /knowledge/knowledgeId/documents
    method: POST
- name: documents
  endpoint:
    path: /knowledge/{knowledgeId}/documents
    method: GET
    data_selector: array of objects
- name: knowledge
  endpoint:
    path: /knowledge/{knowledgeId}
    method: GET
    data_selector: object
- name: documents
  endpoint:
    path: /documents
    method: GET
    data_selector: object
- name: knowledge
  endpoint:
    path: /knowledge/{knowledgeId}
    method: PATCH
- name: knowledge
  endpoint:
    path: /knowledge/{knowledgeId}
    method: DELETE
    data_selector: object
    params: {}
- name: Get a Document
  endpoint:
    path: /knowledge/{knowledgeId}/documents/{documentId}
    method: GET
- name: knowledge
  endpoint:
    path: /knowledge
    method: GET
- name: document
  endpoint:
    path: /knowledge/knowledgeId/documents/documentId
    method: GET
- name: delete_document
  endpoint:
    path: /knowledge/{knowledgeId}/documents/{documentId}
    method: DELETE
- name: talk_streams
  endpoint:
    path: /talks/streams
    method: POST
    data_selector: id
    params: {}
- name: start_stream
  endpoint:
    path: /talks/streams/{session_id}/sdp
    method: POST
    data_selector: ''
    params: {}
- name: add_ice_candidate
  endpoint:
    path: /talks/streams/{stream_id}/ice
    method: POST
    data_selector: ''
    params: {}
- name: create_talk_stream
  endpoint:
    path: /talks/streams/{stream_id}
    method: POST
    data_selector: ''
    params: {}
- name: delete_talk_stream
  endpoint:
    path: /talks/streams/{stream_id}
    method: DELETE
    data_selector: ''
    params: {}
- name: streams
  endpoint:
    path: /talks/streams
    method: POST
    data_selector: id
    params: {}
- name: stream_sdp
  endpoint:
    path: /talks/streams/{streamId}/sdp
    method: POST
    data_selector: session_id
    params: {}
- name: delete_stream
  endpoint:
    path: /talks/streams/{streamId}
    method: DELETE
    data_selector: null
    params: {}
- name: ice_candidate
  endpoint:
    path: /talks/streams/{streamId}/ice
    method: POST
    data_selector: null
    params: {}
- name: talk_streams
  endpoint:
    path: /talks/streams
    method: POST
    data_selector: session_id
- name: start_webrtc_connection
  endpoint:
    path: /talks/streams/{id}/sdp
    method: POST
- name: Submit network information
  endpoint:
    path: /talks/streams/{id}/ice
    method: POST
- name: Start a WebRTC connection
  endpoint:
    path: /startconnection-talks
    method: POST
- name: Create a talk stream
  endpoint:
    path: /createtalkstream
    method: POST
- name: Get a specific talk
  endpoint:
    path: /gettalk
    method: GET
- name: Get talks
  endpoint:
    path: /gettalks
    method: GET
- name: talk_stream
  endpoint:
    path: /talks/streams/{id}
    method: POST
    data_selector: object
- name: delete_talk_stream
  endpoint:
    path: /talks/streams/{id}
    method: DELETE
- name: streams
  endpoint:
    path: /clips/streams
    method: POST
    data_selector: id
    params: {}
- name: sdp
  endpoint:
    path: /clips/streams/{session_id}/sdp
    method: POST
    data_selector: offer
    params: {}
- name: ice
  endpoint:
    path: /clips/streams/{stream_id}/ice
    method: POST
    data_selector: ''
    params: {}
- name: create_clip_stream
  endpoint:
    path: /clips/streams/{stream_id}
    method: POST
    data_selector: ''
    params: {}
- name: delete_stream
  endpoint:
    path: /clips/streams/{stream_id}
    method: DELETE
    data_selector: ''
    params: {}
- name: streams
  endpoint:
    path: /talks/streams
    method: POST
    data_selector: id
    params: {}
- name: stream_sdp
  endpoint:
    path: /talks/streams/{streamId}/sdp
    method: POST
    data_selector: null
    params: {}
- name: delete_stream
  endpoint:
    path: /talks/streams/{streamId}
    method: DELETE
    data_selector: null
    params: {}
- name: create_stream
  endpoint:
    path: /clips/streams
    method: POST
- name: start_webrtc_connection
  endpoint:
    path: /clips/streams/{id}/sdp
    method: POST
    data_selector: status
    params: {}
- name: submit_network_information
  endpoint:
    path: /clips/streams/{id}/ice
    method: POST
- name: create_clip_stream
  endpoint:
    path: /clips/streams/{id}
    method: POST
- name: delete_clip_stream
  endpoint:
    path: /clips/streams/{id}
    method: DELETE
- name: voices
  endpoint:
    path: /reference/voices
    method: GET
- name: talks
  endpoint:
    path: /reference/createtalk
    method: POST
- name: voices
  endpoint:
    path: /reference/voices-2
    method: GET
- name: credits
  endpoint:
    path: /reference/credits-1
    method: GET
- name: consents
  endpoint:
    path: /reference/consents
    method: GET
- name: settings
  endpoint:
    path: /reference/settings-1
    method: GET
- name: voices
  endpoint:
    path: /reference/voices
    method: GET
- name: create_talk
  endpoint:
    path: /reference/createtalk
    method: POST
- name: create_clip
  endpoint:
    path: /reference/createclip
    method: POST
- name: create_talk_stream
  endpoint:
    path: /reference/createtalkstream
    method: POST
- name: Voices
  endpoint:
    path: /reference/voices-2
    method: GET
- name: Get credits
  endpoint:
    path: /reference/getcredits
    method: GET
- name: voices
  endpoint:
    path: /reference/voices
    method: GET
- name: voices
  endpoint:
    path: /tts/voices
    method: GET
    data_selector: array of objects
- name: voices
  endpoint:
    path: /tts/voices
    method: POST
    data_selector: voiceId
- name: voices
  endpoint:
    path: /tts/voices
    method: POST
- name: delete_voice
  endpoint:
    path: /tts/voices/{id}
    method: DELETE
- name: upload_image
  endpoint:
    path: /images
    method: POST
    data_selector: object
- name: delete_image
  endpoint:
    path: /images/{id}
    method: DELETE
    data_selector: null
    params: {}
- name: audios
  endpoint:
    path: /audios
    method: POST
    data_selector: object
    params: {}
- name: audios
  endpoint:
    path: /audios/{id}
    method: DELETE
    data_selector: '204'
    params: {}
- name: credits
  endpoint:
    path: /credits
    method: GET
    data_selector: credits
- name: consent
  endpoint:
    path: /consents
    method: POST
    data_selector: object
- name: list consents
  endpoint:
    path: /consents
    method: GET
    data_selector: object
- name: get consent
  endpoint:
    path: /consents/{id}
    method: GET
    data_selector: object
- name: delete consent
  endpoint:
    path: /consents/{id}
    method: DELETE
    data_selector: object
- name: consents
  endpoint:
    path: /consents
    method: GET
    data_selector: consents
- name: consents
  endpoint:
    path: /consents/{id}
    method: POST
    data_selector: object
- name: consent
  endpoint:
    path: /consents/{id}
    method: GET
    data_selector: object
    params: {}
- name: consent
  endpoint:
    path: /consents/{id}
    method: DELETE
    data_selector: response
    params: {}
- name: logo
  endpoint:
    path: /settings/logo
    method: GET
- name: upload_logo
  endpoint:
    path: /settings/logo
    method: POST
- name: get_logo
  endpoint:
    path: /settings/logo
    method: GET
- name: delete_logo
  endpoint:
    path: /settings/logo
    method: DELETE
- name: Delete Logo
  endpoint:
    path: /settings/logo
    method: DELETE
- name: talks
  endpoint:
    path: /talks
    method: POST
    data_selector: id
- name: get_specific_talk
  endpoint:
    path: /talks/<id>
    method: GET
    data_selector: metadata
- name: Drivers
  endpoint:
    path: /drivers
    method: GET
    data_selector: drivers
- name: Expressions
  endpoint:
    path: /expressions
    method: GET
    data_selector: expressions
- name: clips
  endpoint:
    path: /clips
    method: POST
    data_selector: id
- name: get_clip
  endpoint:
    path: /clips/<id>
    method: GET
    data_selector: metadata
- name: presenters
  endpoint:
    path: /clips/presenters
    method: GET
    data_selector: presenter_id
- name: clips
  endpoint:
    path: /clips
    method: POST
    data_selector: id
- name: animations
  endpoint:
    path: /animations
    method: POST
    data_selector: id
- name: get_specific_animation
  endpoint:
    path: /animations/<id>
    method: GET
    data_selector: metadata
- name: animations
  endpoint:
    path: /animations
    method: POST
    data_selector: id
    params: {}
- name: translations
  endpoint:
    path: /translations
    method: POST
    data_selector: translations
- name: specific_translation
  endpoint:
    path: /translations/<id>
    method: GET
    data_selector: translations
- name: create_scene
  endpoint:
    path: /scenes
    method: POST
    data_selector: id
- name: get_scene
  endpoint:
    path: /scenes/{id}
    method: GET
    data_selector: id
- name: create_consent
  endpoint:
    path: /consents
    method: POST
    data_selector: id
- name: upload_consent_video
  endpoint:
    path: /consents/{id}
    method: POST
- name: create_avatar
  endpoint:
    path: /scenes/avatars
    method: POST
    data_selector: id
- name: get_avatar
  endpoint:
    path: /scenes/avatars/{id}
    method: GET
    data_selector: id
- name: scene
  endpoint:
    path: /scenes
    method: POST
    data_selector: object
    params: {}
- name: get_scene
  endpoint:
    path: /scenes/{id}
    method: GET
    data_selector: object
    params: {}
- name: Agents
  endpoint:
    path: /reference/agents-overview
    method: GET
- name: Videos
  endpoint:
    path: /reference/talks-overview
    method: GET
- name: Clips
  endpoint:
    path: /reference/clips-overview
    method: GET
- name: Animations
  endpoint:
    path: /reference/animations-overview
    method: GET
- name: Video Translate
  endpoint:
    path: /reference/video-translate-overview
    method: GET
- name: Scenes
  endpoint:
    path: /reference/express-avatars-overview
    method: GET
- name: Voices
  endpoint:
    path: /reference/tts-microsoft
    method: GET
- name: Images
  endpoint:
    path: /reference/upload-an-image
    method: POST
- name: Audios
  endpoint:
    path: /reference/upload-an-audio
    method: POST
- name: Credits
  endpoint:
    path: /reference/getcredits
    method: GET
- name: Consents
  endpoint:
    path: /reference/create
    method: POST
- name: Settings
  endpoint:
    path: /reference/getlogo
    method: GET
- name: agents
  endpoint:
    path: /agents
    method: POST
- name: get_agents
  endpoint:
    path: /listmyagents
    method: GET
- name: get_agent
  endpoint:
    path: /getagent
    method: GET
- name: update_agent
  endpoint:
    path: /agents/{agentId}/
    method: PATCH
- name: Create an Agent
  endpoint:
    path: /reference/createagent
    method: POST
- name: Delete an Agent
  endpoint:
    path: /reference/deleteagent
    method: DELETE
- name: Update an Agent
  endpoint:
    path: /reference/updateagent
    method: PATCH
- name: Get an Agent
  endpoint:
    path: /reference/getagent
    method: GET
- name: Get Agents
  endpoint:
    path: /reference/listmyagents
    method: GET
- name: create_rating
  endpoint:
    path: /agents/{agentId}/chat/{chatId}/ratings
    method: POST
    data_selector: object
    params: {}
- name: agents
  endpoint:
    path: /agents
    method: GET
- name: create_agent
  endpoint:
    path: /agents
    method: POST
- name: create_chat
  endpoint:
    path: /agents/{agentId}/chat
    method: POST
- name: send_message_to_chat
  endpoint:
    path: /agents/{agentId}/chat/{chatId}
    method: POST
- name: create_video_stream
  endpoint:
    path: /agents/{agentId}/streams/{streamId}
    method: POST
- name: agents
  endpoint:
    path: /reference/agents
    method: GET
- name: ratings
  endpoint:
    path: /reference/ratings
    method: POST
- name: videos
  endpoint:
    path: /reference/videos
    method: GET
- name: chats
  endpoint:
    path: /reference/chats-export
    method: GET
- name: chat_export
  endpoint:
    path: /agents/chats/exports
    method: POST
    data_selector: export_id
    params: {}
- name: get_chat_export
  endpoint:
    path: /agents/chats/exports/<id>
    method: GET
    data_selector: result
    params: {}
- name: Get chat logs
  endpoint:
    path: /reference/get-chat-logs
    method: GET
- name: Create chat logs
  endpoint:
    path: /reference/create-chat-logs
    method: POST
- name: knowledge
  endpoint:
    path: /knowledge
    method: POST
    data_selector: created
    params: {}
- name: documents
  endpoint:
    path: /knowledge/{knowledgeId}/documents
    method: POST
    data_selector: created
    params: {}
- name: get_knowledge
  endpoint:
    path: /knowledge/{knowledgeId}/
    method: GET
    data_selector: status
    params: {}
- name: Get chat logs
  endpoint:
    path: /reference/get-chat-logs
    method: GET
- name: Create a Knowledge
  endpoint:
    path: /reference/createknowledge
    method: POST
- name: streams
  endpoint:
    path: /talks/streams
    method: POST
    data_selector: id
    params: {}
- name: sdp
  endpoint:
    path: /talks/streams/{session_id}/sdp
    method: POST
    data_selector: offer
    params: {}
- name: ice
  endpoint:
    path: /talks/streams/{stream_id}/ice
    method: POST
    data_selector: {}
    params: {}
- name: create_talk_stream
  endpoint:
    path: /talks/streams/{stream_id}
    method: POST
    data_selector: {}
    params: {}
- name: delete_stream
  endpoint:
    path: /talks/streams/{stream_id}
    method: DELETE
    data_selector: {}
    params: {}
- name: talks_streams
  endpoint:
    path: /talks/streams
    method: POST
    data_selector: id
    params: {}
- name: talk_stream_sdp
  endpoint:
    path: /talks/streams/{streamId}/sdp
    method: POST
    data_selector: session_id
    params: {}
- name: delete_talk_stream
  endpoint:
    path: /talks/streams/{streamId}
    method: DELETE
    data_selector: session_id
    params: {}
- name: streams
  endpoint:
    path: /clips/streams
    method: POST
- name: start_stream
  endpoint:
    path: /clips/streams/{session_id}/sdp
    method: POST
- name: add_ice_candidate
  endpoint:
    path: /clips/streams/{stream_id}/ice
    method: POST
- name: create_clip_stream
  endpoint:
    path: /clips/streams/{stream_id}
    method: POST
- name: delete_stream
  endpoint:
    path: /clips/streams/{stream_id}
    method: DELETE
- name: talk_streams
  endpoint:
    path: /talks/streams
    method: POST
    data_selector: id
    params: {}
- name: talk_stream_sdp
  endpoint:
    path: /talks/streams/{streamId}/sdp
    method: POST
    data_selector: ''
    params: {}
- name: delete_talk_stream
  endpoint:
    path: /talks/streams/{streamId}
    method: DELETE
    data_selector: ''
    params: {}
- name: voices
  endpoint:
    path: /reference/voices
    method: GET
- name: talks
  endpoint:
    path: /reference/createtalk
    method: POST
- name: voices
  endpoint:
    path: /reference/voices-2
    method: GET
- name: credits
  endpoint:
    path: /credits-1
    method: GET
- name: consents
  endpoint:
    path: /consents
    method: GET
- name: settings
  endpoint:
    path: /settings-1
    method: GET
- name: upload_image
  endpoint:
    path: /images
    method: POST
    data_selector: url
- name: audios
  endpoint:
    path: /audios
    method: POST
    data_selector: object
- name: credits
  endpoint:
    path: /credits
    method: GET
    data_selector: credits
- name: consent
  endpoint:
    path: /consents
    method: POST
    data_selector: id
    params: {}
- name: list_all_consents
  endpoint:
    path: /consents
    method: GET
    data_selector: consents
    params: {}
- name: get_consent_by_id
  endpoint:
    path: /consents/{id}
    method: GET
    data_selector: consent
    params: {}
- name: get_logo
  endpoint:
    path: /settings/logo
    method: GET
- name: talks
  endpoint:
    path: /talks
    method: POST
    data_selector: id
- name: get_talk
  endpoint:
    path: /talks/<id>
    method: GET
    data_selector: metadata
- name: drivers
  endpoint:
    path: /reference/talks-facial-expressions
    method: GET
    data_selector: drivers
- name: expressions
  endpoint:
    path: /reference/talks-facial-expressions
    method: GET
    data_selector: expressions
- name: animations
  endpoint:
    path: /animations
    method: POST
    data_selector: id
- name: get_specific_animation
  endpoint:
    path: /animations/<id>
    method: GET
    data_selector: metadata
- name: animations
  endpoint:
    path: /animations
    method: POST
    data_selector: ''
- name: streams
  endpoint:
    path: /talks/streams
    method: POST
    data_selector: id
    params: {}
- name: start_connection
  endpoint:
    path: /talks/streams/{session_id}/sdp
    method: POST
    data_selector: sessionClientAnswer
    params: {}
- name: add_ice_candidate
  endpoint:
    path: /talks/streams/{stream_id}/ice
    method: POST
    data_selector: candidate
    params: {}
- name: create_talk_stream
  endpoint:
    path: /talks/streams/{stream_id}
    method: POST
    data_selector: stream_response
    params: {}
- name: delete_stream
  endpoint:
    path: /talks/streams/{stream_id}
    method: DELETE
    data_selector: ''
    params: {}
- name: streams
  endpoint:
    path: /talks/streams
    method: POST
    data_selector: id
- name: stream_sdp
  endpoint:
    path: /talks/streams/{streamId}/sdp
    method: POST
    data_selector: session_id
- name: delete_stream
  endpoint:
    path: /talks/streams/{streamId}
    method: DELETE
- name: create_stream
  endpoint:
    path: /agents/{agentId}/streams
    method: POST
- name: Start a WebRTC connection
  endpoint:
    path: /agents/{agentId}/streams/{streamId}/sdp
    method: POST
- name: submit_network_information
  endpoint:
    path: /agents/{agentId}/streams/{streamId}/ice
    method: POST
- name: get_agents
  endpoint:
    path: /agents
    method: GET
- name: create_agent
  endpoint:
    path: /agents
    method: POST
- name: delete_agent
  endpoint:
    path: /agents/{agentId}
    method: DELETE
- name: clips
  endpoint:
    path: /clips
    method: POST
    data_selector: id
- name: get_specific_clip
  endpoint:
    path: /clips/<id>
    method: GET
    data_selector: metadata
- name: get_presenters
  endpoint:
    path: /clips/presenters
    method: GET
    data_selector: presenters
- name: create_clip
  endpoint:
    path: /clips
    method: POST
    data_selector: ''
    params: {}
notes:
- 'The output video is ready only when ''status'': ''done'''
- We strongly recommend using the default auto-matching driver mechanism (by not providing
  `driver_url`) to achieve the best results
- The driver_expressions parameter takes an array of objects, each containing the
  start_frame, expression, and intensity of the expression.
- Defaults to 100 presenters to return
- 'The output video will be located in the result_url field only when ''status'':
  ''done'''
- The consent challenge will expire in 30 minutes after it is created.
- You can proceed only when the Avatar's status is 'done'.
- This SDK is designed for front-end development only.
- You can create an agent without any special knowledge or skills.
- After creating a knowledge base, include its ID in the PATCH request to update an
  agent.
- The chat archive will be deleted from the database 7 days after the export creation
  date.
- Knowledge API endpoints help to create a knowledge base for an agent by processing
  documents or websites you upload.
- The Live Streaming API is based on WebRTC for real-time communication.
- Change the value of the service parameter in your api.json file to clips for Clips
  streams.
- Microsoft Azure Text to Speech Provider support more than 100 languages, with a
  large variety of authentic human voices.
- Premium Voices available for paid plans only.
- Break time should be described in seconds, each pause is maximum 3 seconds in length.
- Consent challenge will expire in 30 minutes after creation.
- 'The output video will be located in the result_url field only when "status": "done"'
- The Live Streaming API provides a dedicated endpoint specifically designed for real-time
  video streaming.
- Use Basic Authentication with API key.
- Service parameter in api.json must be set to clips to use Clips streams.
- 'The output video is ready only when "status": "done"'
- API key must be included in the request header as Basic auth.
- 'The output video is ready only when ''status'': ''done''.'
errors:
- '400: Bad Request'
- '401: Unauthorized'
- '402: Payment Required'
- '403: Forbidden'
- '451: Unavailable For Legal Reasons'
- '401 Unauthorized: Recheck OAuth scopes or token expiration'
- '404 Not Found: Verify the talk ID'
- '404 Not Found: Check if the talk ID exists'
- '409 Conflict: Handle conflicting requests'
- '404 Not Found: Presenter with the specified id does not exist'
- '404 Not Found: Ensure the clip ID is correct'
- '404 Not Found: Resource not found'
- '409 Conflict: Resource conflict'
- 'status: ''created'' when posting a new animations request'
- 'status: ''started'' when starting the video processing'
- 'status: ''done'' when the video is ready'
- '404 Not Found: Check the provided ID'
- '404 Not Found: Resource does not exist'
- '409 Conflict: Request conflicts with the current state of the server'
- '404 Not Found: Check if the resource exists'
- '401 Unauthorized: Check your authentication credentials.'
- '400 Bad Request: Ensure all required fields are included in your request.'
- '404 Not Found: Verify the avatar ID provided'
- '500 Internal Server Error: Check API service status'
- '401'
- '404'
- '500'
- '404 Not Found: Check if the scene ID is correct'
- '500 Internal Server Error: Check server status'
- '404: Not Found'
- '500: Internal Server Error'
- 401 AuthorizationError
- '401 AuthorizationError: Recheck your API keys'
- '400 SessionError: Required field is missing or invalid.'
- '401 AuthorizationError: Check your authorization credentials.'
- 400 SessionError
- '400 RangeError: Invalid request parameters'
- '401 AuthorizationError: Check API key or credentials'
- '500 InternalServerError: An unexpected error occurred'
- '404 Not Found: Check the provided resource ID'
- '401 AuthorizationError: Requires authentication'
- '401 AuthorizationError: Recheck OAuth scopes or token expiration'
- '401 AuthorizationError: Requires valid authentication'
- '400 SessionError: Session identifier is required'
- '401 AuthorizationError: Authorization is required'
- '400 Bad Request: Check required parameters'
- '401 Unauthorized: Check API key validity'
- '400 DriverNotValidError: The driver ID provided is not valid'
- '401 AuthorizationError: The request lacks valid authentication credentials'
- '400 SessionError: Required session information is missing'
- '401 AuthorizationError: Invalid or expired credentials'
- '400 SessionError: The candidate parameter is missing or null'
- '400 Bad Request: Required parameters are missing or invalid'
- '401 Unauthorized: Invalid API key'
- '400 Bad Request: Required fields missing'
- '401 Unauthorized: Recheck API key or token'
- 400 BadRequestError | InvalidFileSizeError | InvalidImageResolutionError
- 402 InsufficientCreditsError
- 415 UnsupportedMimeTypeError
- 451 ImageModerationError | CelebrityRecognizedError
- '404: Resource not found'
- 400 BadRequestError | InvalidFileSizeError | InvalidAudioDurationError
- 451 AudioModerationError
- 404 NotFoundError
- '415: Unsupported Media Type'
- '401 Unauthorized: Check your API key.'
- '404 NotFoundError: Resource not found'
- '401 Unauthorized: Recheck API keys or authentication'
- '400 SessionError: Required parameter is missing or invalid'
- '401 AuthorizationError: Invalid credentials or token'
- '401 Unauthorized: Recheck authentication details.'
auth_info:
  mentioned_objects: []
client:
  base_url: https://api.d-id.com
  auth:
    type: basic
source_metadata: null
