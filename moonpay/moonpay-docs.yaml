resources:
- name: buy_transactions
  endpoint:
    path: /v1/transactions
    method: GET
    data_selector: array
- name: transactions
  endpoint:
    path: /v1/transactions
    method: GET
    data_selector: object
    params: {}
- name: on-ramp
  endpoint:
    path: /on-ramp
    method: GET
    data_selector: records
- name: currencies
  endpoint:
    path: /v3/currencies
    method: GET
    data_selector: data
- name: buy_quote
  endpoint:
    path: /v3/buy_quote
    method: GET
    data_selector: data
- name: customers_badges
  endpoint:
    path: /v3/customers/badges
    method: GET
    data_selector: data
- name: on_ramp
  endpoint:
    path: /on-ramp
    method: GET
    data_selector: data
    params: {}
- name: off_ramp
  endpoint:
    path: /off-ramp
    method: GET
    data_selector: data
    params: {}
- name: on-ramp
  endpoint:
    path: /on-ramp
    method: GET
    data_selector: data
    params: {}
- name: off-ramp
  endpoint:
    path: /off-ramp
    method: GET
    data_selector: data
    params: {}
- name: top-up
  endpoint:
    path: /top-up
    method: GET
    data_selector: data
    params: {}
- name: checkout
  endpoint:
    path: /checkout
    method: GET
    data_selector: data
    params: {}
- name: sell_quote
  endpoint:
    path: /reference/getsellquote
    method: GET
- name: transaction_updates
  endpoint:
    path: /reference/reference-webhooks-overview
    method: GET
- name: off-ramp
  endpoint:
    path: /off-ramp
    method: GET
- name: crypto_deposit
  endpoint:
    path: /api/v1/crypto_deposit
    method: POST
    data_selector: data
    params:
      apiKey: pk_test_key
- name: transaction_tracking
  endpoint:
    path: /api/v1/transactions
    method: GET
    data_selector: data
    params: {}
- name: widget
  endpoint:
    path: /web-sdk/v1/moonpay-web-sdk.min.js
    method: GET
    data_selector: widget
    params: {}
- name: MoonPayBuyWidget
  endpoint:
    path: /buy
    method: GET
    data_selector: records
- name: MoonPaySellWidget
  endpoint:
    path: /sell
    method: GET
    data_selector: records
- name: MoonPaySwapWidget
  endpoint:
    path: /swap
    method: GET
    data_selector: records
- name: MoonPayNftCheckoutWidget
  endpoint:
    path: /nft-checkout
    method: GET
    data_selector: records
- name: top_up
  endpoint:
    path: /
    method: GET
    data_selector: records
- name: topup
  endpoint:
    path: /topup
    method: GET
    data_selector: topup
    params:
      apiKey: pk_test_123
      enabledMethods:
      - dex
      - coinbase
      - moonpay-balance
      - fiat
      - onramper
      cryptoAmount: 0.05
      fromDefaultCurrencyCode: eth
      fromChainName: ethereum
      toChainName: solana
- name: top_up
  endpoint:
    path: /top-up
    method: GET
    data_selector: records
    params: {}
- name: sell
  endpoint:
    path: /sell
    method: GET
    data_selector: records
    params: {}
- name: swap
  endpoint:
    path: /swap
    method: GET
    data_selector: records
    params: {}
- name: nft_checkout
  endpoint:
    path: /nft-checkout
    method: GET
    data_selector: records
    params: {}
- name: get_nft_info
  endpoint:
    path: /reference/get_asset-info-contractaddress-tokenid
    method: GET
    data_selector: nft_info
- name: send_nft
  endpoint:
    path: /reference/send_nft
    method: POST
    data_selector: send_status
- name: get_transaction_status
  endpoint:
    path: /reference/get_transaction_status
    method: GET
    data_selector: transaction_status
- name: proxy_smart_contracts
  endpoint:
    path: /proxy/smart-contracts
    method: GET
    data_selector: contracts
    params: {}
- name: virtual_account
  endpoint:
    path: /v1/virtual-accounts
    method: GET
    data_selector: data
- name: virtual_account_transactions
  endpoint:
    path: /v1/virtual-accounts/transactions
    method: GET
    data_selector: data
- name: virtual_account_transactions
  endpoint:
    path: /v1/virtual-accounts/transactions/onramp
    method: GET
    params:
      apiKey: your_publishable_api_key
      timestamp: unix_timestamp
      virtualAccountId: optional_external_virtual_account_id
      externalCustomerId: optional_external_customer_id
      pageSize: number_of_transactions_per_page
      cursor: cursor_value_from_previous_page_response
- name: get_customer_limits
  endpoint:
    path: /v1/customers/{customerId}
    method: GET
- name: customer_limits_by_external_id
  endpoint:
    path: /v1/customers/ext/{customerId}
    method: GET
- name: sell_transactions
  endpoint:
    path: /v3/sell_transactions
    method: GET
    data_selector: object
    params:
      customerId: required
- name: cancel_sell_transaction_by_external_id
  endpoint:
    path: /v3/sell_transactions/ext/{transactionId}
    method: DELETE
    data_selector: ''
    params: {}
- name: my_account_details
  endpoint:
    path: /accounts/me
    method: GET
    data_selector: object
- name: get_crypto_currency_limits
  endpoint:
    path: /v3/currencies/{currencyCode}/limits
    method: GET
    data_selector: object
    params: {}
- name: network_fees
  endpoint:
    path: /v3/currencies/network_fees
    method: GET
    data_selector: object
    params: {}
- name: buy_quote
  endpoint:
    path: /v3/currencies/{currencyCode}/buy_quote
    method: GET
    data_selector: object
    params: {}
- name: transaction
  endpoint:
    path: /v1/transactions/transactionId
    method: GET
    data_selector: object
    params: {}
- name: buy_transaction
  endpoint:
    path: /v1/transactions/{transactionId}
    method: GET
- name: buy_transaction
  endpoint:
    path: /v1/transactions/ext/externalTransactionId
    method: GET
    data_selector: id
- name: buy_transaction
  endpoint:
    path: /v1/transactions/ext/{externalTransactionId}
    method: GET
    data_selector: array
- name: sell_quote
  endpoint:
    path: /v3/currencies/{currencyCode}/sell_quote
    method: GET
    data_selector: object
    params: {}
- name: sell_transaction
  endpoint:
    path: /v3/sell_transactions/{transactionId}
    method: GET
    data_selector: object
    params: {}
- name: sell_transaction
  endpoint:
    path: /v3/sell_transactions/ext/{externalTransactionId}
    method: GET
    data_selector: object
    params:
      externalTransactionId: string
- name: swap_pairs
  endpoint:
    path: /swap/pairs
    method: GET
    data_selector: array of objects
- name: swap_quote
  endpoint:
    path: /swap/{PAIR}/quote
    method: GET
    data_selector: object
- name: execute_swap_quote
  endpoint:
    path: /swap/execute_quote
    method: POST
- name: swap_transaction
  endpoint:
    path: /swap/transaction/{transactionId}
    method: GET
    data_selector: object
- name: swap_requote
  endpoint:
    path: /swap/transaction/{transactionId}/requote
    method: GET
- name: reject_swap_requote
  endpoint:
    path: /v4/swap/reject_requote
    method: POST
- name: countries
  endpoint:
    path: /v3/countries
    method: GET
    data_selector: array of objects
- name: currencies
  endpoint:
    path: /v3/currencies
    method: GET
    data_selector: array
- name: check_customer_ip_address
  endpoint:
    path: /v3/ip_address
    method: GET
    data_selector: object
    params: {}
- name: nft_information
  endpoint:
    path: /asset_info/{contractAddress}/{tokenId}
    method: GET
    data_selector: object
    params: {}
- name: calldata
  endpoint:
    path: /calldata
    method: POST
    data_selector: object
    params: {}
- name: deliver_nft
  endpoint:
    path: /lite/deliver_nft/{contractAddress}/{tokenId}
    method: POST
- name: transaction_status
  endpoint:
    path: /transaction_status
    method: GET
    data_selector: data
    params:
      id: array of strings
- name: Buy transactions
  endpoint:
    path: /reference/get_v1-transactions
    method: GET
- name: Customers
  endpoint:
    path: /reference/get_v1-customers-customerid
    method: GET
- name: Sell transactions
  endpoint:
    path: /reference/get_v3-sell-transactions
    method: GET
- name: Account details
  endpoint:
    path: /reference/getaccount-1
    method: GET
- name: On-ramp
  endpoint:
    path: /reference/getcurrencylimits-1
    method: GET
- name: Off-ramp
  endpoint:
    path: /reference/getsellquote-1
    method: GET
- name: Swaps
  endpoint:
    path: /reference/getswappairs
    method: GET
- name: NFT Assets
  endpoint:
    path: /reference/get_asset-info-contractaddress-tokenid
    method: GET
- name: Virtual Account
  endpoint:
    path: /reference/virtualaccountcontrollergetvirtualaccounts
    method: GET
- name: Buy transactions
  endpoint:
    path: /reference/get_v1-transactions
    method: GET
- name: Customers
  endpoint:
    path: /reference/get_v1-customers-customerid
    method: GET
- name: Sell transactions
  endpoint:
    path: /reference/get_v3-sell-transactions
    method: GET
- name: Account details
  endpoint:
    path: /reference/getaccount-1
    method: GET
- name: On-ramp
  endpoint:
    path: /reference/getcurrencylimits-1
    method: GET
- name: Off-ramp
  endpoint:
    path: /reference/getsellquote-1
    method: GET
- name: Swaps
  endpoint:
    path: /reference/getswappairs
    method: GET
- name: NFT Assets
  endpoint:
    path: /reference/get_asset-info-contractaddress-tokenid
    method: GET
- name: NFT Delivery
  endpoint:
    path: /reference/post_calldata
    method: POST
- name: Virtual Account
  endpoint:
    path: /reference/virtualaccountcontrollergetvirtualaccounts
    method: GET
- name: transactions
  endpoint:
    path: /v1/transactions
    method: GET
    data_selector: transactions
- name: customers
  endpoint:
    path: /v1/customers/{customerId}
    method: GET
    data_selector: customer
- name: currencies
  endpoint:
    path: /v1/currencies
    method: GET
    data_selector: currencies
- name: buy_transactions
  endpoint:
    path: /v1/transactions
    method: GET
    data_selector: data
    params: {}
- name: customers
  endpoint:
    path: /v1/customers
    method: GET
    data_selector: data
    params: {}
- name: sell_transactions
  endpoint:
    path: /reference/get_v3-sell-transactions
    method: GET
- name: buy_transactions
  endpoint:
    path: /reference/get_v1-transactions
    method: GET
- name: customers
  endpoint:
    path: /reference/get_v1-customers-customerid
    method: GET
- name: sell_transaction_created
  endpoint:
    path: /v3/sell-transactions
    method: POST
    data_selector: data
    params: {}
- name: sell_transaction_updated
  endpoint:
    path: /v3/sell-transactions
    method: POST
    data_selector: data
    params: {}
- name: sell_transaction_failed
  endpoint:
    path: /v3/sell-transactions
    method: POST
    data_selector: data
    params: {}
- name: virtual_account_status_updated
  endpoint:
    path: /reference/virtual_account_status_updated
    method: GET
    data_selector: payload
    params: {}
- name: virtual_account_transaction_status_updated
  endpoint:
    path: /reference/virtual_account_transaction_status_updated
    method: GET
    data_selector: payload
    params: {}
- name: identity_check_updated
  endpoint:
    path: /identity-check
    method: GET
    data_selector: results
- name: Buy transactions
  endpoint:
    path: /reference/get_v1-transactions
    method: GET
- name: Customers
  endpoint:
    path: /reference/get_v1-customers-customerid
    method: GET
- name: Sell transactions
  endpoint:
    path: /reference/get_v3-sell-transactions
    method: GET
- name: Account details
  endpoint:
    path: /reference/getaccount-1
    method: GET
- name: On-ramp
  endpoint:
    path: /reference/getcurrencylimits-1
    method: GET
- name: Off-ramp
  endpoint:
    path: /reference/getsellquote-1
    method: GET
- name: Swaps
  endpoint:
    path: /reference/getswappairs
    method: GET
- name: NFT Assets
  endpoint:
    path: /reference/get_asset-info-contractaddress-tokenid
    method: GET
- name: create_partner_account
  endpoint:
    path: /partner_onboarding/v1/accounts
    method: POST
- name: get_partner_account
  endpoint:
    path: /getpartneraccount
    method: GET
- name: get_industries
  endpoint:
    path: /v1/industries
    method: GET
- name: get_countries
  endpoint:
    path: /v1/countries
    method: GET
- name: partner_account
  endpoint:
    path: /partner_onboarding/v1/accounts/{accountId}
    method: GET
    data_selector: apiKeys
    params: {}
- name: update_domains
  endpoint:
    path: /partner_onboarding/v1/accounts/{accountId}
    method: PATCH
- name: countries
  endpoint:
    path: /partner_onboarding/v1/countries
    method: GET
    data_selector: object
- name: industries
  endpoint:
    path: /partner_onboarding/v1/industries
    method: GET
    data_selector: object
- name: virtual_accounts
  endpoint:
    path: /virtual-accounts
    method: GET
    data_selector: object
    params: {}
- name: off_ramp_transactions
  endpoint:
    path: /virtual-accounts/transactions/offramp
    method: GET
    data_selector: transactions
    params:
      pageSize: required
      virtualAccountId: ''
      uuid: ''
      externalCustomerId: ''
- name: update_on_ramp_virtual_account
  endpoint:
    path: /v1/virtual-accounts/onramp/{id}
    method: PATCH
- name: on_ramp_transactions
  endpoint:
    path: /virtual-accounts/transactions/onramp
    method: GET
    data_selector: transactions
    params:
      pageSize: required
      virtualAccountId: ''
      uuid: ''
      externalCustomerId: ''
- name: sell_transactions
  endpoint:
    path: /v3/sell_transactions
    method: GET
    data_selector: object
    params:
      customerId: required
- name: transactions
  endpoint:
    path: /v1/transactions
    method: GET
    data_selector: object
    params: {}
- name: customer_limits
  endpoint:
    path: /v1/customers/{customerId}
    method: GET
    data_selector: object
    params: {}
- name: my_account_details
  endpoint:
    path: /v4/accounts/me
    method: GET
    data_selector: object
- name: get_crypto_currency_limits
  endpoint:
    path: /v3/currencies/{currencyCode}/limits
    method: GET
- name: sell_quote
  endpoint:
    path: /v3/currencies/{currencyCode}/sell_quote
    method: GET
    data_selector: object
    params: {}
- name: swap_pairs
  endpoint:
    path: /swap/pairs
    method: GET
    data_selector: array of objects
- name: supported_countries
  endpoint:
    path: /v3/countries
    method: GET
    data_selector: array of objects
- name: nft_information
  endpoint:
    path: /asset_info/{contractAddress}/{tokenId}
    method: GET
    data_selector: object
- name: calldata
  endpoint:
    path: /calldata
    method: POST
- name: partner_account
  endpoint:
    path: /partner_onboarding/v1/accounts
    method: POST
    data_selector: accountId
    params: {}
- name: countries
  endpoint:
    path: /partner_onboarding/v1/countries
    method: GET
    data_selector: object
- name: virtual_accounts
  endpoint:
    path: /virtual-accounts
    method: GET
    data_selector: object
    params: {}
notes:
- Sandbox environment for all your development needs
- KYC information entered will not be verified
- There are no fees for integrating with MoonPay. However, partners have the option
  to include an affiliate fee for each transaction if they wish.
- MoonPay doesn’t charge distinct trading or psp fees. Instead, a variable fee is
  applied for every transaction.
- Buy is available for all residents except those in non-supported countries.
- Sell is unavailable for residents of Louisiana, Texas, New York and US Virgin Islands.
- Uses OAuth2 with refresh token — requires setup of connected app in api
- Sandbox environment supports limited selection of testnet currencies; we recommend
  testing primarily with Ethereum on Sepolia, Solana Testnet, TON or the Bitcoin Testnet.
- Buy is available for all residents except those in specific countries and US states.
- No fees for integrating with MoonPay.
- A variable fee is applied for every transaction.
- 'Never use a test credit card on anything other than a test widget that has environment:
  ''sandbox'', otherwise your MoonPay account may be blocked.'
- Users are 20% more likely to get past the code (OTP) verification screen when the
  MoonPay widget has custom theming.
- Pre-fill the customer's email address to skip the login screen
- Pre-fill the customer's wallet address to skip the wallet address screen
- Mobile payments, such as Apple Pay and Google Pay, are not supported with Overlay.
- Use 'pk_test...' for Sandbox environment and 'pk_live...' for Production environment.
- NEVER use your secret key in client side code
- Load your secret key from an environment variable instead
- Use of in-app browser is required for certain functionalities.
- 'Possible values for flow: buy, sell, swap, swapsCustomerSetup, nft'
- 'Possible values for environment: sandbox, production'
- Passing the signature parameter is mandatory if you're using the walletAddress or
  walletAddresses parameter.
- If the signature is invalid for any reason the MoonPay widget will fail to load.
- 'Secure Crypto Transactions: Our system supports 100+ cryptocurrencies and as the
  merchant of record MoonPay assumes full responsibility for all fraud disputes and
  chargebacks.'
- All customers are required to pass MoonPay’s established Know Your Customer (KYC)
  and risk management procedures along with all applicable laws and regulations.
- Environment must be set to 'sandbox' for test transactions.
- Recommended to use onInitiateDeposit or redirectURL for handling deposits.
- Users must ensure correct amount, cryptocurrency, network, and wallet address for
  deposits.
- Mobile payments, such as Apple Pay and Google Pay, are not supported with Overlay
  because it operates within an iframe.
- Uses API key for authentication.
- In-app browser implementation is required when using the MoonPay SDK.
- Mandatory to sign URLs when using refundWalletAddress or refundWalletAddresses parameters.
- Themes built on the MoonPay dashboard are tied to your API key and will show up
  wherever you use your API key.
- A signed URL helps limit access from unauthorized third parties by providing limited
  permissions and time to make a request.
- Genuine cards should never be added to sandbox accounts.
- The API requires the signature parameter for sensitive information.
- Ensure that the widget URL contains URL-encoded query parameters.
- The parameters below represent the primary TopUp-specific properties. This is not
  the complete list of available properties.
- The default value for useWarnBeforeRefresh is true.
- Uses API key for authentication
- The URL for the widget must be signed for the widget to work.
- All query parameter values need to be URL-encoded to generate a valid signature.
- The time to initiate NFT delivery after being requested is 5 seconds.
- MoonPay voids the initial pre-authorization placed on the customer's card after
  a 10-hour timeout if delivery fails.
- When making requests to your partner endpoints, MoonPay will send your query parameters
  in alphabetical order.
- NFT Checkout only supports transaction sizes of between $3 and $15,000.
- All smart contracts that we are using have been verified on Tenderly explorer
- MoonPay handles authentication, KYC, crypto delivery and fiat payouts.
- Contact team@moonpay.com before getting started so we can enable your account to
  begin VA testing.
- Your app must refer to this product as 'Virtual Accounts' and not 'Bank Accounts'.
- Parent page header has no restrictions for initializing the camera, e.g. camera=()
- Parent page can alternatively include camera=* in the Permissions-Policy header
- The iframe allow property has allow="accelerometer; autoplay; camera; encrypted-media;
  gyroscope; payment"
- Passing the signature parameter is mandatory if you're using the walletAddress parameter.
- The sandbox environment includes sample virtual account transactions for testing
  integration.
- The URL for this request expired after 30 days.
- Duplicate events MAY occur and may arrive out of order.
- Requires setup of API key in moonpay account
errors:
- '401 Unauthorized: A descriptive error message.'
- 'Transaction processing failed: may happen when the testnet wallet is empty or you
  used the wrong card'
- 'Your Region is Not Supported: means MoonPay may not support your country or the
  cryptocurrency is unsupported in your region'
- 'You''ve made too many actions: means you have been rate limited'
- 'Account is restricted or blocked: may happen if you are using a production MoonPay
  user account in sandbox'
- 'CSP error: buy.moonpay.com refused to connect'
- geo-blocks certain users
- 'REQUEST_LIMIT_EXCEEDED: Throttle API calls or reduce frequency'
- 'QUERY_TIMEOUT: Break down filters or add selectivity'
- '401 Unauthorized: Recheck OAuth scopes or token expiration'
- 'INVALID_REQUEST: Ensure all required parameters are included'
- 'AUTHENTICATION_FAILED: Check your client ID and secret'
- 'RATE_LIMIT_EXCEEDED: Reduce the frequency of your requests'
- 'INVALID_API_KEY: Check your API key and try again.'
- 'PAYMENT_FAILED: The payment could not be processed.'
- '401 Unauthorized: Check API key and permissions.'
- '403 Forbidden: Ensure correct usage of the API.'
- '401 Unauthorized: Check API key validity'
- '401 Unauthorized: Check API key or permissions'
- '400 Bad Request: Check required parameters'
- 'INVALID_REQUEST: Missing required parameter: apiKey'
- 'INVALID_SIGNATURE: Request signature verification failed'
- 'INVALID_API_KEY: The provided API key is invalid or inactive'
- 'RATE_LIMIT_EXCEEDED: Rate limit exceeded. Please try again later.'
- 'INTERNAL_ERROR: An internal server error occurred'
- '409 Conflict: A descriptive error message.'
- 401 Unauthorized
- '404 Not Found: No transaction with the supplied identifier exists.'
- '400: Delivery could not be initiated. Response may include a reason for our logs.'
- '403: NFT not available for sale. MoonPay will cancel the customer transaction.'
- '404: NFT not found. MoonPay will cancel the customer transaction.'
- '500: Something went wrong. MoonPay will cancel the customer transaction.'
- '401 Unauthorized: Recheck API key or permissions'
- '400 Bad Request: A descriptive error message.'
- '403 Forbidden: A descriptive error message.'
- '500 Internal Server Error: A descriptive error message.'
auth_info:
  mentioned_objects:
  - OauthToken
  - AuthProvider
  - NamedCredential
  - apiKey
client:
  base_url: https://api.moonpay.com
  headers:
    accept: application/json
source_metadata: null
