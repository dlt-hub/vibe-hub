resources:
- name: events
  endpoint:
    path: /2025-07-01/events
    method: GET
    data_selector: data
- name: connections
  endpoint:
    path: /2025-07-01/connections
    method: GET
    data_selector: data
- name: shopify
  endpoint:
    path: /2025-07-01/sources
    method: GET
- name: issue_triggers
  endpoint:
    path: /2025-07-01/issue-triggers
    method: GET
    data_selector: models
- name: transformations
  endpoint:
    path: /2025-07-01/transformations
    method: GET
    data_selector: models
- name: create_transformation
  endpoint:
    path: /2025-07-01/transformations
    method: POST
    data_selector: name
- name: update_transformation
  endpoint:
    path: /2025-07-01/transformations
    method: PUT
    data_selector: name
- name: delete_transformation
  endpoint:
    path: /2025-07-01/transformations/:id
    method: DELETE
    data_selector: id
- name: requests_retry
  endpoint:
    path: /2025-07-01/requests/:id/retry
    method: POST
- name: retrieve_request_events
  endpoint:
    path: /2025-07-01/requests/:id/events
    method: GET
- name: retrieve_request_ignored_events
  endpoint:
    path: /2025-07-01/requests/:id/ignored_events
    method: GET
- name: retrieve_all_events
  endpoint:
    path: /2025-07-01/events
    method: GET
- name: retrieve_event
  endpoint:
    path: /2025-07-01/events/:id
    method: GET
- name: retry_event
  endpoint:
    path: /2025-07-01/events/:id/retry
    method: POST
- name: cancel_event
  endpoint:
    path: /2025-07-01/events/:id/cancel
    method: PUT
- name: retrieve_attempts
  endpoint:
    path: /2025-07-01/attempts
    method: GET
- name: retrieve_bookmarks
  endpoint:
    path: /2025-07-01/bookmarks
    method: GET
- name: bookmarks
  endpoint:
    path: /2025-07-01/bookmarks/:id
    method: PUT
    data_selector: response
    params: {}
- name: trigger_bookmark
  endpoint:
    path: /2025-07-01/bookmarks/:id/trigger
    method: POST
    data_selector: response
    params: {}
- name: delete_bookmark
  endpoint:
    path: /2025-07-01/bookmarks/:id
    method: DELETE
    data_selector: response
    params: {}
- name: issues
  endpoint:
    path: /2025-07-01/issues
    method: GET
    data_selector: models
    params: {}
- name: count_issues
  endpoint:
    path: /2025-07-01/issues/count
    method: GET
    data_selector: models
    params:
      limit: 255
- name: retrieve_issue
  endpoint:
    path: /2025-07-01/issues/:id
    method: GET
    data_selector: data
    params: {}
- name: bulk_retry_events
  endpoint:
    path: /2025-07-01/bulk/events/retry
    method: GET
    data_selector: events
    params: {}
- name: events
  endpoint:
    path: /2025-07-01/events
    method: GET
    data_selector: data
    params: {}
- name: connections
  endpoint:
    path: /2025-07-01/connections
    method: GET
    data_selector: data
    params: {}
- name: bulk_events_retry
  endpoint:
    path: /2025-07-01/bulk/events/retry
    method: GET
    data_selector: models
    params: {}
- name: bulk_events_cancel
  endpoint:
    path: /2025-07-01/bulk/events/cancel
    method: GET
    data_selector: models
    params: {}
- name: bulk_ignored_events_retry
  endpoint:
    path: /2025-07-01/bulk/ignored-events/retry
    method: GET
    data_selector: models
    params: {}
- name: bulk_requests_retry
  endpoint:
    path: /2025-07-01/bulk/requests/retry
    method: GET
    data_selector: models
    params: {}
- name: shopify-my-api
  endpoint:
    path: /2025-07-01/connections
    method: PUT
- name: bulk_retry
  endpoint:
    path: /2025-07-01/bulk/requests/retry
    method: GET
    data_selector: models
- name: retrieve_bulk_retry
  endpoint:
    path: /2025-07-01/bulk/requests/retry/:id
    method: GET
    data_selector: model
- name: generate_bulk_retry_plan
  endpoint:
    path: /2025-07-01/bulk/requests/retry/plan
    method: GET
    data_selector: models
- name: create_bulk_retry
  endpoint:
    path: /2025-07-01/bulk/requests/retry
    method: POST
    data_selector: model
- name: cancel_bulk_retry
  endpoint:
    path: /2025-07-01/bulk/requests/retry/:id/cancel
    method: POST
    data_selector: model
- name: shopify
  endpoint:
    path: /2025-07-01/sources
    method: GET
    data_selector: null
    params: {}
- name: webhook_events
  endpoint:
    path: /cli/events
    method: GET
    data_selector: events
    params: {}
- name: disable_destination
  endpoint:
    path: /2025-07-01/destinations/:id/disable
    method: PUT
    data_selector: id
    params: {}
- name: enable_destination
  endpoint:
    path: /2025-07-01/destinations/:id/enable
    method: PUT
    data_selector: id
    params: {}
- name: delete_destination
  endpoint:
    path: /2025-07-01/destinations/:id
    method: DELETE
    data_selector: id
    params: {}
- name: issue_triggers
  endpoint:
    path: /2025-07-01/issue-triggers
    method: GET
    data_selector: models
    params: {}
- name: transformations
  endpoint:
    path: /2025-07-01/transformations
    method: GET
    data_selector: models
    params: {}
- name: UserService
  endpoint:
    path: /user
    method: POST
    data_selector: eventType
    params: {}
- name: OrderService
  endpoint:
    path: /order
    method: POST
    data_selector: eventType
    params: {}
- name: AnalyticsService
  endpoint:
    path: /analytics
    method: POST
    data_selector: eventType
    params: {}
- name: create_transformation
  endpoint:
    path: /2025-07-01/transformations
    method: POST
    data_selector: name
    params: {}
- name: update_transformation
  endpoint:
    path: /2025-07-01/transformations
    method: PUT
    data_selector: name
    params: {}
- name: test_transformation
  endpoint:
    path: /2025-07-01/transformations/run
    method: PUT
    data_selector: request
    params: {}
- name: retrieve_transformation_logs
  endpoint:
    path: /2025-07-01/transformations/:id/executions
    method: GET
    data_selector: pagination
    params: {}
- name: retrieve_transformation_log
  endpoint:
    path: /2025-07-01/transformations/:id/executions/:execution_id
    method: GET
    data_selector: id
    params: {}
- name: delete_transformation
  endpoint:
    path: /2025-07-01/transformations/:id
    method: DELETE
    data_selector: id
    params: {}
- name: retry_request
  endpoint:
    path: /2025-07-01/requests/:id/retry
    method: POST
- name: retrieve_request_events
  endpoint:
    path: /2025-07-01/requests/:id/events
    method: GET
- name: retrieve_request_ignored_events
  endpoint:
    path: /2025-07-01/requests/:id/ignored_events
    method: GET
- name: retrieve_all_events
  endpoint:
    path: /2025-07-01/events
    method: GET
- name: retrieve_event
  endpoint:
    path: /2025-07-01/events/:id
    method: GET
- name: retry_event
  endpoint:
    path: /2025-07-01/events/:id/retry
    method: POST
- name: connections
  endpoint:
    path: /connections
    method: GET
- name: events
  endpoint:
    path: /events
    method: GET
- name: publish_webhook
  endpoint:
    path: /publish
    method: POST
    data_selector: event_request_id
- name: cancel_event
  endpoint:
    path: /2025-07-01/events/:id/cancel
    method: PUT
    data_selector: response
    params: {}
- name: retrieve_attempts
  endpoint:
    path: /2025-07-01/attempts
    method: GET
    data_selector: models
    params:
      limit: 255
- name: retrieve_bookmarks
  endpoint:
    path: /2025-07-01/bookmarks
    method: GET
    data_selector: models
    params:
      limit: 255
- name: bookmark
  endpoint:
    path: /bookmarks/:id
    method: PUT
- name: trigger_bookmark
  endpoint:
    path: /bookmarks/:id/trigger
    method: POST
- name: delete_bookmark
  endpoint:
    path: /bookmarks/:id
    method: DELETE
- name: issues
  endpoint:
    path: /issues
    method: GET
- name: issue_count
  endpoint:
    path: /issues/count
    method: GET
- name: issue_by_id
  endpoint:
    path: /issues/:id
    method: GET
- name: update_issue
  endpoint:
    path: /issues/:id
    method: PUT
- name: delete_issue
  endpoint:
    path: /issues/:id
    method: DELETE
- name: count_issues
  endpoint:
    path: /issues/count
    method: GET
    data_selector: models
    params:
      limit: 100
- name: retrieve_issue
  endpoint:
    path: /issues/:id
    method: GET
    data_selector: data
    params: {}
- name: bulk_retry_events
  endpoint:
    path: /2025-07-01/bulk/events/retry
    method: GET
    data_selector: bulk_retries
- name: update_issue
  endpoint:
    path: /2025-07-01/issues/:id
    method: PUT
    data_selector: issues
- name: dismiss_issue
  endpoint:
    path: /2025-07-01/issues/:id
    method: DELETE
    data_selector: issues
- name: bulk_events_retry
  endpoint:
    path: /2025-07-01/bulk/events/retry
    method: POST
    data_selector: models
    params: {}
- name: bulk_events_cancel
  endpoint:
    path: /2025-07-01/bulk/events/cancel
    method: GET
    data_selector: models
    params: {}
- name: bulk_requests_retry
  endpoint:
    path: /2025-07-01/bulk/requests/retry
    method: GET
    data_selector: models
- name: retrieve_bulk_retry
  endpoint:
    path: /2025-07-01/bulk/requests/retry/:id
    method: GET
    data_selector: models
- name: generate_bulk_retry_plan
  endpoint:
    path: /2025-07-01/bulk/requests/retry/plan
    method: GET
- name: create_bulk_retry
  endpoint:
    path: /2025-07-01/bulk/requests/retry
    method: POST
- name: cancel_bulk_retry
  endpoint:
    path: /2025-07-01/bulk/requests/retry/:id/cancel
    method: POST
- name: shopify
  endpoint:
    path: /2025-07-01/connections
    method: POST
- name: connections
  endpoint:
    path: /2025-07-01/connections/:id/disable
    method: PUT
- name: enable_connection
  endpoint:
    path: /2025-07-01/connections/:id/enable
    method: PUT
- name: delete_connection
  endpoint:
    path: /2025-07-01/connections/:id
    method: DELETE
- name: sources
  endpoint:
    path: /2025-07-01/sources
    method: POST
    data_selector: id
- name: user_service
  endpoint:
    path: /user
    method: POST
    data_selector: eventType
    params:
      filter:
        eventType:
          $eq: user.created
- name: order_service
  endpoint:
    path: /order
    method: POST
    data_selector: eventType
    params:
      filter:
        eventType:
          $eq: order.placed
- name: analytics_service
  endpoint:
    path: /analytics
    method: POST
    data_selector: eventType
    params:
      filter:
        eventType:
          $eq: page.viewed
- name: shipstation
  endpoint:
    path: /shipstation
    method: POST
    data_selector: X-Shopify-Topic
    params:
      filter:
        X-Shopify-Topic:
          $eq: orders/create
- name: twilio
  endpoint:
    path: /twilio
    method: POST
    data_selector: X-Shopify-Topic
    params:
      filter:
        X-Shopify-Topic:
          $eq: fulfillments/update
- name: hubspot
  endpoint:
    path: /hubspot
    method: POST
    data_selector: X-Shopify-Topic
    params:
      filter:
        X-Shopify-Topic:
          $eq: customers/create
- name: webhook
  endpoint:
    path: /webhooks
    method: POST
    data_selector: event
    params: {}
- name: enable_destination
  endpoint:
    path: /2025-07-01/destinations/:id/enable
    method: PUT
    data_selector: null
    params: {}
- name: delete_destination
  endpoint:
    path: /2025-07-01/destinations/:id
    method: DELETE
    data_selector: null
    params: {}
- name: connections
  endpoint:
    path: /connections
    method: POST
    data_selector: event_request_id
- name: events
  endpoint:
    path: /events
    method: GET
    data_selector: events
- name: deduplication_rule
  endpoint:
    path: /2025-07-01/connections
    method: POST
    data_selector: rules
    params: {}
- name: cancel_single_event
  endpoint:
    path: /2025-07-01/events/:id/cancel
    method: PUT
    data_selector: webhook_id
- name: cancel_many_events
  endpoint:
    path: /2025-07-01/bulk/events/cancel
    method: POST
    data_selector: team_id
- name: abort_scheduled_cancellations
  endpoint:
    path: /2025-07-01/bulk/events/cancel/:id/cancel
    method: POST
    data_selector: team_id
- name: requests
  endpoint:
    path: /2025-07-01/requests
    method: GET
    data_selector: models
    params:
      pagination:
        order_by: ingested_at
        dir: desc
        limit: 100
- name: events
  endpoint:
    path: /2025-07-01/events
    method: GET
    data_selector: models
    params:
      order_by: created_at
      dir: desc
      limit: 100
- name: events
  endpoint:
    path: /api/v1/events
    method: POST
    data_selector: data
    params: {}
- name: User Data
  endpoint:
    path: /sub-processors
    method: GET
    data_selector: data
- name: bookmarks
  endpoint:
    path: /2025-07-01/bookmarks
    method: POST
    data_selector: id
    params: {}
- name: edit_bookmark
  endpoint:
    path: /2025-07-01/bookmarks/:id
    method: PUT
    data_selector: id
    params: {}
- name: trigger_bookmark
  endpoint:
    path: /2025-07-01/bookmarks/:id/trigger
    method: POST
    data_selector: id
    params: {}
- name: remove_bookmark
  endpoint:
    path: /2025-07-01/bookmarks/:id
    method: DELETE
    data_selector: id
    params: {}
- name: issues
  endpoint:
    path: /2025-07-01/issues
    method: GET
    data_selector: models
- name: issues
  endpoint:
    path: /2025-07-01/issues/:id
    method: GET
- name: update_issue
  endpoint:
    path: /2025-07-01/issues/:id
    method: PUT
- name: dismiss_issue
  endpoint:
    path: /2025-07-01/issues/:id
    method: DELETE
- name: shopify
  endpoint:
    path: /2025-07-01/connections
    method: POST
- name: notifications_webhooks
  endpoint:
    path: /2025-07-01/notifications/webhooks
    method: PUT
    data_selector: ''
    params: {}
- name: issue_triggers
  endpoint:
    path: /2025-07-01/issue-triggers
    method: GET
    data_selector: models
- name: disable_connection
  endpoint:
    path: /2025-07-01/connections/:id/disable
    method: PUT
- name: enable_connection
  endpoint:
    path: /2025-07-01/connections/:id/enable
    method: PUT
- name: delete_connection
  endpoint:
    path: /2025-07-01/connections/:id
    method: DELETE
- name: requests
  endpoint:
    path: /metrics/requests
    method: GET
    data_selector: data
- name: events
  endpoint:
    path: /metrics/events
    method: GET
    data_selector: data
- name: attempts
  endpoint:
    path: /metrics/attempts
    method: GET
    data_selector: data
- name: source
  endpoint:
    path: /2025-07-01/sources
    method: POST
    data_selector: id
- name: destinations
  endpoint:
    path: /2025-07-01/destinations/:id
    method: PUT
    data_selector: id
    params: {}
- name: enable_destination
  endpoint:
    path: /2025-07-01/destinations/:id/enable
    method: PUT
- name: delete_destination
  endpoint:
    path: /2025-07-01/destinations/:id
    method: DELETE
- name: stripe-webhooks
  endpoint:
    path: /cli/events
    method: GET
    data_selector: events
    params: {}
- name: cancel_single_event
  endpoint:
    path: /2025-07-01/events/:id/cancel
    method: PUT
    data_selector: null
    params: {}
- name: bulk_cancel_events
  endpoint:
    path: /2025-07-01/bulk/events/cancel
    method: POST
    data_selector: null
    params: {}
- name: abort_bulk_cancellation
  endpoint:
    path: /2025-07-01/bulk/events/cancel/:id/cancel
    method: POST
    data_selector: null
    params: {}
- name: requests
  endpoint:
    path: /2025-07-01/requests
    method: GET
    data_selector: models
    params:
      order_by: ingested_at
      dir: desc
      limit: 100
- name: events
  endpoint:
    path: /2025-07-01/events
    method: GET
    data_selector: models
- name: event_inspection
  endpoint:
    path: /2025-07-01/events/:id
    method: GET
    data_selector: data
- name: bookmarks
  endpoint:
    path: /2025-07-01/bookmarks
    method: POST
    data_selector: id
- name: edit_bookmark
  endpoint:
    path: /2025-07-01/bookmarks/:id
    method: PUT
    data_selector: id
- name: trigger_bookmark
  endpoint:
    path: /2025-07-01/bookmarks/:id/trigger
    method: POST
    data_selector: request_id
- name: remove_bookmark
  endpoint:
    path: /2025-07-01/bookmarks/:id
    method: DELETE
    data_selector: id
- name: issues
  endpoint:
    path: /2025-07-01/issues
    method: GET
    data_selector: models
- name: issues
  endpoint:
    path: /2025-07-01/issues/:id
    method: GET
    data_selector: data
- name: update_issue
  endpoint:
    path: /2025-07-01/issues/:id
    method: PUT
    data_selector: data
- name: dismiss_issue
  endpoint:
    path: /2025-07-01/issues/:id
    method: DELETE
    data_selector: data
- name: webhook_notifications
  endpoint:
    path: /2025-07-01/notifications/webhooks
    method: PUT
    data_selector: ''
    params: {}
- name: issue_triggers
  endpoint:
    path: /2025-07-01/issue-triggers
    method: GET
    data_selector: models
- name: stripe-webhooks
  endpoint:
    path: /listen
    method: POST
    data_selector: events
notes:
- Bearer Token Authentication is the preferred method for API key usage.
- Basic Authentication is deprecated.
- Limit for result set size is 255.
- The Publish API uses the same authentication as the Hookdeck REST API.
- Uses Bearer Token Authentication — API key is required in every request.
- Bulk retry operations can be filtered by various parameters including created_at
  and status.
- Guarantees event delivery with smart retries and DLQ
- Automatically retries failures with customizable retry policies and exponential
  backoff
- Event Gateway connects event sources to destinations
- CLI allows forwarding of webhook events to a local web server.
- Messages are guaranteed to be delivered at least once and are never lost.
- Supports the common publish and subscription paradigm to ease adoption and integration
  into existing systems.
- Receiving events at high volumes can lead to spikes that overwhelm your systems.
- Events received beyond the configured rate are queued and processed at a later time.
- Pausing a Connection is useful during maintenance or when dealing with unreliable
  endpoints.
- Hookdeck continues to ingest and store all incoming Events from the Source while
  a Connection is paused.
- Each provider has its own way of registering webhooks.
- Hookdeck automatically detects and completes the challenge for you without any additional
  configuration.
- Enforces a 1MB limit on the payload size.
- The API allows for cancelling events with specific statuses
- Attempts can be retrieved by their IDs or associated event IDs
- Hookdeck does not support synchronous responses to incoming requests.
- Transformations do not support I/O operations.
- Hookdeck does not perform schema validation on the event payloads.
- It is your responsibility to ensure that the event payloads conform to the expected
  schema in your application.
- Learn how to create and configure Hookdeck Connections to route webhook events between
  services, with best practices for Sources, Destinations, and processing rules.
- Use Hookdeck's rate limiting and queuing to control event flow and protect your
  destinations.
- Duplicates are expected because providers retry aggressively using a at-least-once
  delivery guarantee.
- You shouldn't rely on retries but rather implement your own queuing, dead-letter
  handling, and replay strategy.
- To guarantee resilience, you must keep your own event store and implement your own
  replay capability.
- Dismissed issues are filtered out by default.
- Services can be used indefinitely for free, with limitations outlined in the free
  plan.
- First-time Users are eligible for a one-time 30-day trial, offering all features
  of the highest-level payment plan.
- The Publish API does not have a specification beyond the required headers.
- Usage-based billing to support your projects, from small to massive scale.
- Uses OAuth2 for authentication.
- 'The Personal Data Processed by the Data Processor will be Processed for the following
  duration: Until the account of the User is terminated for any reason whatsoever.'
- Flexible Authentication available for securing inbound and outbound payloads, and
  API access.
- Event Gateway powers the backbone of modern interopable event-driven systems
- 'Do NOT use Authorization: Bearer $API_KEY for Source URLs.'
- Use in combination with the Hookdeck Console as a free alternative to ngrok
- Events sent to your CLI are available on your CLI Events page
- Regular monitoring allows you to proactively address potential issues and maintain
  a steady and reliable flow of events.
- Moving from reactive debugging to proactive monitoring allows you to catch systemic
  issues before they impact many users.
- Pausing a Connection allows for managing event-driven workflows during maintenance
  or when dealing with unreliable endpoints.
- Requests sent by Hookdeck are verified using the Hookdeck Signature.
- Hookdeck preserves the original request's headers, body, query string, and path.
- Hookdeck acts as an HTTP proxy and queue between the webhook producer and your application.
- Payload size limit is 1MB
- Hookdeck APIs are idempotent
- Deduplication is a best-effort feature and is not guaranteed. Always implement idempotent
  request handling in your destination.
- Changing the deduplication configuration resets the deduplication cache for the
  connection.
- Hookdeck does not support synchronous responses to incoming request
- Transformations in Hookdeck are designed to be lightweight and fast. They do not
  support I/O operations such as making HTTP requests or reading from external sources
- Hookdeck is not a workflow engine
- Transformations have some important limitations to keep in mind.
- The transformation runtime cannot perform any IO, or access any external resources
  such as the network or file system.
- The execution runtime is limited to 1 second.
- Transformation code is limited to 5 MB.
- Events are limited to 50 automatic retries, but can be manually retried as many
  times as you like.
- Duplicates are expected because providers retry aggressively using a at-least-once
  delivery guarantee, so it's your responsibility to make processing idempotent and
  protect downstream systems.
- Providers retry, but only for a limited time and with varying strategies.
- Cancelled events will appear in your event history with a 'Cancelled' status.
- Free Developer plan usage limits still apply during the trial.
- Webhooks at Contra are mission-critical and Hookdeck lets us sleep at night.
- Events are limited to 50 automatic retries
- Requires setup of connected app in Hookdeck
- Ensure proper OAuth scopes are configured
- The Personal Data Processed by the Data Processor will be processed until the account
  of the User is terminated for any reason whatsoever.
- Uses OAuth2 with refresh token — requires setup of connected app in api
- A connection lets you route events from a source to a destination.
- To fan out a single source to multiple destinations, create a new connection using
  an existing source.
- Notifications contain the payload of the failed webhook.
- Issues are organized into three types -- delivery issues, transformation issues,
  and backpressure issues.
- Your disabled connection will no longer ingest or route events, although your source
  provider will still receive an `HTTP 200` response when making requests.
- The connection will now resume routing events, but the events received while it
  was disabled will not be available for replaying.
- Organizations can be created upon signup or invitation.
- Each project includes 5 events per second by default for free.
- Under no circumstances will events be dropped within your retention window.
- Hookdeck can verify the authenticity of incoming webhooks to ensure they are from
  the expected Source.
- The destination must respond to a request within 60 seconds, or the attempt will
  be marked as failed.
- Configurations in Hookdeck are not automatically copied between environments. You
  must manually configure copy each configuration from one project to another.
- Keep environments isolated to prevent accidental changes in production.
- The Hookdeck CLI provides a listen command that creates a secure tunnel from a public
  Hookdeck URL directly to your local machine.
- The transformation runtime does not support promises and async/await.
- Webhook signatures are cryptographic hashes generated by the sender using a secret
  key.
- Hookdeck signs Events it forwards to your Destination using a project-level signing
  secret.
- Filters were designed for JSON payloads. To filter non-JSON payloads, you can use
  a transformation to convert the payload to JSON.
- Hookdeck will ignore the Retry-After header for certain URLs.
- Flexible Authentication with several standards for securing inbound and outbound
  payloads, and API access.
- Each issue has a status that helps you track resolution steps with your team.
- Issues marked resolved or dismissed will automatically re-open when they reoccur.
- Webhook notifications can be enabled in project settings.
- Each project is initialized with one issue trigger of each type.
- Deleting an issue trigger will also permanently delete all associated issues.
- Certain event metrics are only available in 'point-in-time' instead of time-series
  data.
- Metrics export allows you to access your Hookdeck project metrics in your own observability
  platform.
- Organizations cannot be deleted if they have an active paying subscription or unpaid
  invoices.
- Each project has its own API key for configuring your connections.
- Configurations in Hookdeck are not automatically copied between environments.
- Hookdeck can ingest events with a variety of content types
- Webhook signatures are cryptographic hashes generated by the sender using a secret
  key known only to them and you.
- Timestamp validation helps ensure the request is recent.
- Idempotency remains crucial to ensure that processing the same Event multiple times
  does not lead to unintended side effects.
- Flexible Authentication - Several standards for securing inbound and outbound payloads,
  and API access.
errors:
- '422: Connection does not exist or is disabled'
- '429: Rate limit exceeded'
- '404 Not Found: Check the provided ID or path'
- '400 Bad Request: Ensure request parameters are valid'
- '404 Not Found: Check the event ID or attempt ID provided'
- '400 Bad Request: Ensure all required parameters are included'
- '401 Unauthorized: Verify API key or authentication method'
- Your use of linked websites or services may result in damages.
- Payments are due monthly unless otherwise agreed upon.
- '400 Bad Request: Check the request for missing required parameters.'
- '404 Not Found: Ensure the endpoint exists and is correctly specified.'
- 'TIMEOUT: Destination must respond within 60 seconds.'
- Deduplication is not guaranteed due to distributed system constraints.
- Security is not enforced consistently across providers, it's on you to implement
  the required verification.
- 'SOURCE_DISABLED: The associated source with the request URL is disabled'
- 'VERIFICATION_FAILED: A verification integration configured for the request source
  identified invalid credentials or signature'
- 'NO_WEBHOOK: There are no connections associated with the request source'
- 'UNSUPPORTED_HTTP_METHOD: The request HTTP method is not supported.'
- 'UNSUPPORTED_CONTENT_TYPE: The request content-type is not supported'
- 'UNPARSABLE_JSON: The request content-type is JSON but the body is unparsable'
- 'PAYLOAD_TOO_LARGE: The request payload was larger then what''s allowed for your
  current quota'
- 'UNKNOWN: An unknown error occur, the team has been notified and is investigating'
- 'CONNECTION_REFUSED: The request to your destination could not be made because the
  connection was refused.'
- 'TIMEOUT: The request to your destination exceeded the 60-second timeout window.'
- 'UNKNOWN: An uncategorized error occurred.'
- '400: Bad Request: Your request is invalid and could not be understood.'
- '401: Unauthorized: Your API key is wrong.'
- '403: Forbidden: Access to the requested resource is restricted.'
- '404: Not Found: The resource could not be found.'
- '413: Payload Too Large: The payload size exceeds the limit.'
- '422: Unprocessable Entry: The request was understood but contains invalid input.'
- '429: Too Many Requests: The request limit for a specific time period has been exceeded.'
- '500: Internal Server Error: There was a problem with the server. Try again later.'
- '503: Service Unavailable: The server is temporarily offline for maintenance. Try
  again later.'
- '401 Unauthorized: Recheck OAuth scopes or token expiration'
- '429 Too Many Requests: Rate limit exceeded'
- HTTP 401 for the HMAC, API Key, and Basic Auth verification methods.
- 'REQUEST_LIMIT_EXCEEDED: Throttle API calls or reduce frequency'
- Project notifications are disabled
- The delivery issue was ignored
- The issue trigger is misconfigured
- The email was filtered
- If there are pending Events associated with the connection, they will be updated
  with the error code 'CANCELLED' and marked as 'FAILED'.
- 'TIMEOUT: The destination must respond within 60 seconds.'
- 'UNSUPPORTED_HTTP_METHOD: Check the HTTP method being used.'
- '401 Unauthorized: Recheck OAuth scopes or token expiration.'
- 'PAYLOAD_TOO_LARGE: The request payload was larger than what''s allowed for your
  current quota'
- 'UNKNOWN: An unknown error occurred, the team has been notified and is investigating'
- 'CONNECTION_RESET: The request to your destination could not be made because the
  connection was forcibly closed by your server.'
- 'NOT_FOUND: The request to your destination could not be made because the domain
  or host was not found or unavailable.'
- 'MISSING_URL: Your destination does not have a HTTP URL configured.'
- 'CLI: The attempt failed to be forwarded to your local server by the CLI.'
- 'SELF_SIGNED_CERT: Your destination uses a self-signed SSL certificate.'
- 'ERR_TLS_CERT_ALTNAME_INVALID: Your destination''s SSL certificate is not valid.'
- 'SSL_CERT_EXPIRED: Your destination''s SSL certificate is expired.'
- 'SSL_ERROR_CA_UNKNOWN: The intermediate certificate / CA Bundle is invalid or mismatched.'
- 'SOCKET_CLOSED: Usually caused by the destination endpoint being unreachable by
  Hookdeck.'
- '400: Bad Request - Your request is invalid and could not be understood.'
- '401: Unauthorized - Your API key is wrong.'
- '403: Forbidden - Access to the requested resource is restricted.'
- '404: Not Found - The resource could not be found.'
- '413: Payload Too Large - The payload size exceeds the limit.'
- '422: Unprocessable Entry - The request was understood but contains invalid input.'
- '429: Too Many Requests - The request limit for a specific time period has been
  exceeded.'
- '500: Internal Server Error - There was a problem with the server. Try again later.'
- '503: Service Unavailable - The server is temporarily offline for maintenance. Try
  again later.'
- '500: The Mock API returns the request data with a HTTP 500 code'
- 'QUERY_TIMEOUT: Break down filters or add selectivity'
auth_info:
  mentioned_objects:
  - OauthToken
  - AuthProvider
client:
  base_url: https://dashboard.hookdeck.com
  headers:
    Accept: application/json
source_metadata: null
