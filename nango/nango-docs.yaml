resources:
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
- name: users
  endpoint:
    path: /v1/users
    method: GET
    data_selector: data
    params: {}
- name: groups
  endpoint:
    path: /v1/groups
    method: GET
    data_selector: data
    params: {}
- name: files
  endpoint:
    path: /me/drive/root/children
    method: GET
    data_selector: value
    params: {}
- name: product_updates
  endpoint:
    path: /changelog/overview
    method: GET
    data_selector: updates
    params: {}
- name: applications
  endpoint:
    path: /applications
    method: GET
- name: opportunities
  endpoint:
    path: /opportunities
    method: GET
- name: notes
  endpoint:
    path: /notes
    method: GET
- name: offers
  endpoint:
    path: /offers
    method: GET
- name: postings
  endpoint:
    path: /postings
    method: GET
- name: stages
  endpoint:
    path: /stages
    method: GET
- name: opportunities
  endpoint:
    path: /opportunities
    method: GET
- name: users
  endpoint:
    path: /users
    method: GET
- name: users
  endpoint:
    path: /users
    method: GET
- name: group
  endpoint:
    path: /group
    method: POST
- name: user-groups
  endpoint:
    path: /user-groups
    method: PUT
- name: remove-user-group
  endpoint:
    path: /user-groups
    method: DELETE
- name: users
  endpoint:
    path: /users
    method: GET
- name: users
  endpoint:
    path: /v1/users
    method: GET
    data_selector: data
    params: {}
- name: groups
  endpoint:
    path: /v1/groups
    method: GET
    data_selector: data
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: users
  endpoint:
    path: /scim/v2/Users
    method: GET
    data_selector: Resources
    params: {}
- name: groups
  endpoint:
    path: /scim/v2/Groups
    method: GET
    data_selector: Resources
    params: {}
- name: users
  endpoint:
    path: /v1/users
    method: GET
    data_selector: data
    params: {}
- name: groups
  endpoint:
    path: /v1/groups
    method: GET
    data_selector: data
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: users
  endpoint:
    path: /v1/users
    method: GET
    data_selector: data
- name: users
  endpoint:
    path: /v1/users
    method: GET
    data_selector: data
    params: {}
- name: groups
  endpoint:
    path: /v1/groups
    method: GET
    data_selector: data
    params: {}
- name: users
  endpoint:
    path: /v1/users
    method: GET
    data_selector: users
- name: groups
  endpoint:
    path: /v1/groups
    method: GET
    data_selector: groups
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
- name: users
  endpoint:
    path: /v1/users
    method: GET
    data_selector: users
- name: groups
  endpoint:
    path: /v1/groups
    method: GET
    data_selector: groups
- name: users
  endpoint:
    path: /users
    method: GET
    data_selector: users
    params: {}
- name: meetings
  endpoint:
    path: /meetings
    method: GET
    data_selector: meetings
    params: {}
- name: invoices
  endpoint:
    path: /api.xro/2.0/Invoices
    method: GET
    data_selector: Invoices
- name: contacts
  endpoint:
    path: /api.xro/2.0/Contacts
    method: GET
    data_selector: Contacts
- name: users
  endpoint:
    path: /api/v1/users
    method: GET
    data_selector: users
    params: {}
- name: groups
  endpoint:
    path: /api/v1/groups
    method: GET
    data_selector: groups
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: users
  endpoint:
    path: /Users
    method: GET
    data_selector: Resources
    params: {}
- name: groups
  endpoint:
    path: /Groups
    method: GET
    data_selector: Resources
    params: {}
- name: users
  endpoint:
    path: /v1/users
    method: GET
    data_selector: data
    params: {}
- name: contacts
  endpoint:
    path: /contacts
    method: GET
    data_selector: data
    params: {}
- name: companies
  endpoint:
    path: /companies
    method: GET
    data_selector: data
    params: {}
- name: users
  endpoint:
    path: /v1/users
    method: GET
    data_selector: data
    params: {}
- name: groups
  endpoint:
    path: /v1/groups
    method: GET
    data_selector: data
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: users
  endpoint:
    path: /v1/users
    method: GET
    data_selector: data
    params: {}
- name: groups
  endpoint:
    path: /v1/groups
    method: GET
    data_selector: data
    params: {}
- name: users
  endpoint:
    path: /users
    method: GET
    data_selector: users
    params: {}
- name: meetings
  endpoint:
    path: /meetings
    method: GET
    data_selector: meetings
    params: {}
- name: users
  endpoint:
    path: /v1/users
    method: GET
    data_selector: data
    params: {}
- name: users
  endpoint:
    path: /v1/users
    method: GET
    data_selector: data
    params: {}
- name: files
  endpoint:
    path: /me/drive/root/children
    method: GET
    data_selector: value
- name: users
  endpoint:
    path: /users
    method: GET
    data_selector: users
    params:
      incremental: updated_at
- name: groups
  endpoint:
    path: /groups
    method: GET
    data_selector: groups
    params: {}
- name: users
  endpoint:
    path: /users
    method: GET
    data_selector: users
    params: {}
- name: meetings
  endpoint:
    path: /meetings
    method: GET
    data_selector: meetings
    params: {}
- name: users
  endpoint:
    path: /users
    method: GET
    data_selector: data
- name: groups
  endpoint:
    path: /groups
    method: GET
    data_selector: data
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: whoami
  endpoint:
    path: /whoami
    method: GET
- name: webhooks
  endpoint:
    path: /webhooks
    method: POST
- name: tables
  endpoint:
    path: /tables
    method: GET
- name: bases
  endpoint:
    path: /bases
    method: GET
- name: users
  endpoint:
    path: /v1/users
    method: GET
    data_selector: data
    params: {}
- name: groups
  endpoint:
    path: /v1/groups
    method: GET
    data_selector: data
    params: {}
- name: files
  endpoint:
    path: /me/drive/root/children
    method: GET
    data_selector: value
    params: {}
- name: contacts
  endpoint:
    path: /contacts
    method: POST
- name: users
  endpoint:
    path: /v1/users
    method: GET
    data_selector: users
- name: users
  endpoint:
    path: /users
    method: GET
    data_selector: users
    params: {}
- name: meetings
  endpoint:
    path: /meetings
    method: GET
    data_selector: meetings
    params: {}
- name: users
  endpoint:
    path: /v1/users
    method: GET
    data_selector: data
- name: groups
  endpoint:
    path: /v1/groups
    method: GET
    data_selector: data
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: users
  endpoint:
    path: /v1/users
    method: GET
    data_selector: data
- name: users
  endpoint:
    path: /v1/users
    method: GET
    data_selector: data
    params: {}
- name: groups
  endpoint:
    path: /v1/groups
    method: GET
    data_selector: data
    params: {}
- name: product_id_mapping
  endpoint:
    path: /proxy/v1/seller/integrations/id:{integrationId}/productIdMapping/list
    method: POST
- name: users
  endpoint:
    path: /api/v1/users
    method: GET
    data_selector: data
    params: {}
- name: groups
  endpoint:
    path: /api/v1/groups
    method: GET
    data_selector: data
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: users
  endpoint:
    path: /users
    method: GET
    data_selector: users
    params: {}
- name: groups
  endpoint:
    path: /groups
    method: GET
    data_selector: groups
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: users
  endpoint:
    path: /v1/users
    method: GET
    data_selector: data
- name: groups
  endpoint:
    path: /v1/groups
    method: GET
    data_selector: data
- name: users
  endpoint:
    path: /api/v1/users
    method: GET
    data_selector: data
- name: groups
  endpoint:
    path: /api/v1/groups
    method: GET
    data_selector: data
- name: users
  endpoint:
    path: /api/v1/users
    method: GET
    data_selector: users
- name: groups
  endpoint:
    path: /api/v1/groups
    method: GET
    data_selector: groups
- name: users
  endpoint:
    path: /v1/users
    method: GET
    data_selector: data
    params: {}
- name: users
  endpoint:
    path: /api/v1/users
    method: GET
    data_selector: users
    params: {}
- name: groups
  endpoint:
    path: /api/v1/groups
    method: GET
    data_selector: groups
    params: {}
- name: users
  endpoint:
    path: /v1/users
    method: GET
    data_selector: users
- name: groups
  endpoint:
    path: /v1/groups
    method: GET
    data_selector: groups
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: users
  endpoint:
    path: /v1/users
    method: GET
    data_selector: users
    params: {}
- name: groups
  endpoint:
    path: /v1/groups
    method: GET
    data_selector: groups
    params: {}
- name: users
  endpoint:
    path: /v2/users
    method: GET
    data_selector: users
- name: meetings
  endpoint:
    path: /v2/meetings
    method: GET
    data_selector: meetings
- name: users
  endpoint:
    path: /v1/users
    method: GET
    data_selector: users
    params: {}
- name: files
  endpoint:
    path: /me/drive/root/children
    method: GET
    data_selector: value
- name: shared_with_me
  endpoint:
    path: /me/drive/sharedWithMe
    method: GET
    data_selector: value
- name: projects
  endpoint:
    path: /projects
    method: GET
- name: tasks
  endpoint:
    path: /tasks
    method: POST
- name: tasks
  endpoint:
    path: /tasks
    method: PATCH
- name: tasks
  endpoint:
    path: /tasks
    method: DELETE
- name: tasks
  endpoint:
    path: /tasks
    method: GET
- name: users
  endpoint:
    path: /users
    method: GET
- name: workspaces
  endpoint:
    path: /workspaces
    method: GET
- name: workspaces_limit
  endpoint:
    path: /workspaces/limit
    method: GET
- name: projects_limit
  endpoint:
    path: /projects/limit
    method: GET
- name: users
  endpoint:
    path: /v1/users
    method: GET
    data_selector: data
- name: groups
  endpoint:
    path: /v1/groups
    method: GET
    data_selector: data
- name: files
  endpoint:
    path: /me/drive/root/children
    method: GET
    data_selector: value
    params: {}
- name: shared_items
  endpoint:
    path: /me/drive/sharedWithMe
    method: GET
    data_selector: value
    params: {}
- name: users
  endpoint:
    path: /v1/users
    method: GET
    data_selector: data
    params: {}
- name: groups
  endpoint:
    path: /v1/groups
    method: GET
    data_selector: data
    params: {}
- name: files
  endpoint:
    path: /me/drive/root/children
    method: GET
    data_selector: value
- name: candidate
  endpoint:
    path: /candidate.list
    method: POST
    data_selector: null
    params:
      limit: 10
- name: users
  endpoint:
    path: /api/v1/users
    method: GET
    data_selector: users
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: users
  endpoint:
    path: /v1/users
    method: GET
    data_selector: data
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
- name: users
  endpoint:
    path: /v1/users
    method: GET
    data_selector: data
    params: {}
- name: groups
  endpoint:
    path: /v1/groups
    method: GET
    data_selector: data
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: users
  endpoint:
    path: /v1/users
    method: GET
    data_selector: users
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: people
  endpoint:
    path: /objects/people/records/query
    method: POST
    data_selector: records
    params:
      limit: '10'
- name: users
  endpoint:
    path: /v1/users
    method: GET
    data_selector: data
    params: {}
- name: groups
  endpoint:
    path: /v1/groups
    method: GET
    data_selector: data
    params: {}
- name: contacts
  endpoint:
    path: /contacts
    method: GET
    data_selector: data
    params: {}
- name: leads
  endpoint:
    path: /leads
    method: GET
    data_selector: data
    params: {}
- name: users
  endpoint:
    path: /api/v1/users
    method: GET
    data_selector: data
    params: {}
- name: groups
  endpoint:
    path: /api/v1/groups
    method: GET
    data_selector: data
    params: {}
- name: users
  endpoint:
    path: /v1/users
    method: GET
    data_selector: users
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: users
  endpoint:
    path: /scim/v2/Users
    method: GET
    data_selector: Resources
    params:
      incremental: updated_at
- name: groups
  endpoint:
    path: /scim/v2/Groups
    method: GET
    data_selector: Resources
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: users
  endpoint:
    path: /v1/users
    method: GET
    data_selector: data
    params: {}
- name: groups
  endpoint:
    path: /v1/groups
    method: GET
    data_selector: data
    params: {}
- name: users
  endpoint:
    path: /v1/users
    method: GET
    data_selector: data
    params: {}
- name: users
  endpoint:
    path: /v1/users
    method: GET
    data_selector: data
    params: {}
- name: groups
  endpoint:
    path: /v1/groups
    method: GET
    data_selector: data
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: users
  endpoint:
    path: /v1/users
    method: GET
    data_selector: data
    params: {}
- name: groups
  endpoint:
    path: /v1/groups
    method: GET
    data_selector: data
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: users
  endpoint:
    path: /users
    method: POST
- name: users
  endpoint:
    path: /users
    method: DELETE
- name: users
  endpoint:
    path: /users
    method: GET
- name: users
  endpoint:
    path: /api/v1/users
    method: GET
    data_selector: data
    params: {}
- name: files
  endpoint:
    path: /me/drive/root/children
    method: GET
    data_selector: value
- name: user
  endpoint:
    path: /v1/users
    method: GET
    data_selector: users
- name: group
  endpoint:
    path: /v1/groups
    method: GET
    data_selector: groups
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: users
  endpoint:
    path: /v1/users
    method: GET
    data_selector: users
    params:
      incremental: updated_at
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: users
  endpoint:
    path: /v1/users
    method: GET
    data_selector: data
- name: groups
  endpoint:
    path: /v1/groups
    method: GET
    data_selector: data
- name: users
  endpoint:
    path: /v1/users
    method: GET
    data_selector: data
    params: {}
- name: groups
  endpoint:
    path: /v1/groups
    method: GET
    data_selector: data
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: users
  endpoint:
    path: /api/v1/users
    method: GET
    data_selector: users
    params: {}
- name: meetings
  endpoint:
    path: /meetings
    method: GET
    data_selector: meetings
    params: {}
- name: users
  endpoint:
    path: /users
    method: GET
    data_selector: users
    params: {}
- name: employees
  endpoint:
    path: /employees
    method: POST
- name: employees
  endpoint:
    path: /employees
    method: PUT
- name: employees
  endpoint:
    path: /employees
    method: GET
- name: unified_employees
  endpoint:
    path: /employees/unified
    method: GET
- name: fields
  endpoint:
    path: /fields
    method: GET
- name: users
  endpoint:
    path: /api/v1/users
    method: GET
    data_selector: data
    params: {}
- name: users
  endpoint:
    path: /api/v1/users
    method: GET
    data_selector: users
    params: {}
- name: accounts
  endpoint:
    path: /accounts
    method: GET
- name: projects
  endpoint:
    path: /projects
    method: GET
- name: todolists
  endpoint:
    path: /todolists
    method: GET
- name: todos
  endpoint:
    path: /todos
    method: POST
- name: todos_sync
  endpoint:
    path: /todos
    method: GET
- name: users
  endpoint:
    path: /v1/users
    method: GET
    data_selector: data
    params: {}
- name: groups
  endpoint:
    path: /v1/groups
    method: GET
    data_selector: data
    params: {}
- name: employees
  endpoint:
    path: /v1/employees
    method: GET
    data_selector: data
    params: {}
- name: users
  endpoint:
    path: /api/v1/users
    method: GET
    data_selector: data
    params: {}
- name: groups
  endpoint:
    path: /api/v1/groups
    method: GET
    data_selector: data
    params: {}
- name: files
  endpoint:
    path: /me/drive/root/children
    method: GET
    data_selector: value
- name: shared_files
  endpoint:
    path: /me/drive/sharedWithMe
    method: GET
    data_selector: value
- name: users
  endpoint:
    path: /api/v1/users
    method: GET
    data_selector: data
    params: {}
- name: groups
  endpoint:
    path: /api/v1/groups
    method: GET
    data_selector: data
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: users
  endpoint:
    path: /v1/users
    method: GET
    data_selector: data
    params:
      incremental: updated_at
- name: groups
  endpoint:
    path: /v1/groups
    method: GET
    data_selector: data
    params: {}
- name: users
  endpoint:
    path: /users
    method: POST
- name: users
  endpoint:
    path: /v1/users
    method: GET
    data_selector: users
- name: groups
  endpoint:
    path: /v1/groups
    method: GET
    data_selector: groups
- name: contacts
  endpoint:
    path: /contacts
    method: GET
    data_selector: data
    params: {}
- name: companies
  endpoint:
    path: /companies
    method: GET
    data_selector: data
    params: {}
- name: users
  endpoint:
    path: /users
    method: POST
- name: users
  endpoint:
    path: /users
    method: DELETE
- name: users
  endpoint:
    path: /users
    method: GET
- name: user
  endpoint:
    path: /v1/users
    method: GET
    data_selector: users
- name: users
  endpoint:
    path: /users
    method: GET
    data_selector: users
    params: {}
- name: meetings
  endpoint:
    path: /meetings
    method: GET
    data_selector: meetings
    params: {}
- name: users
  endpoint:
    path: /v1/users
    method: GET
    data_selector: data
    params: {}
- name: groups
  endpoint:
    path: /v1/groups
    method: GET
    data_selector: data
    params: {}
- name: company_details
  endpoint:
    path: /company-details
    method: GET
    data_selector: ''
- name: users
  endpoint:
    path: /v1/users
    method: GET
    data_selector: data
    params: {}
- name: files
  endpoint:
    path: /me/drive/root/children
    method: GET
    data_selector: value
- name: users
  endpoint:
    path: /v1/users
    method: GET
    data_selector: users
- name: groups
  endpoint:
    path: /v1/groups
    method: GET
    data_selector: groups
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: users
  endpoint:
    path: /api/v1/users
    method: GET
    data_selector: data
    params:
      incremental: updated_at
- name: groups
  endpoint:
    path: /api/v1/groups
    method: GET
    data_selector: data
    params: {}
- name: contacts
  endpoint:
    path: /contacts
    method: GET
    data_selector: data
    params: {}
- name: deals
  endpoint:
    path: /deals
    method: GET
    data_selector: data
    params: {}
- name: users
  endpoint:
    path: /api/v1/users
    method: GET
    data_selector: data
    params:
      incremental: updated_at
- name: groups
  endpoint:
    path: /api/v1/groups
    method: GET
    data_selector: data
    params: {}
- name: users
  endpoint:
    path: /scim/v2/Users
    method: GET
    data_selector: Resources
- name: groups
  endpoint:
    path: /scim/v2/Groups
    method: GET
    data_selector: Resources
- name: users
  endpoint:
    path: /v1/users
    method: GET
    data_selector: users
    params: {}
- name: groups
  endpoint:
    path: /v1/groups
    method: GET
    data_selector: groups
    params: {}
- name: users
  endpoint:
    path: /v1/users
    method: GET
    data_selector: data
    params: {}
- name: groups
  endpoint:
    path: /v1/groups
    method: GET
    data_selector: data
    params: {}
- name: users
  endpoint:
    path: /api/v1/users
    method: GET
    data_selector: users
    params: {}
- name: groups
  endpoint:
    path: /api/v1/groups
    method: GET
    data_selector: groups
    params: {}
- name: files
  endpoint:
    path: /files
    method: GET
- name: folder_content
  endpoint:
    path: /folder-content
    method: GET
- name: root_folders
  endpoint:
    path: /root-folders
    method: GET
- name: create_user
  endpoint:
    path: /users
    method: POST
- name: delete_user
  endpoint:
    path: /users
    method: DELETE
- name: users
  endpoint:
    path: /users
    method: GET
- name: users
  endpoint:
    path: /v1/users
    method: GET
    data_selector: users
    params: {}
- name: groups
  endpoint:
    path: /v1/groups
    method: GET
    data_selector: groups
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: users
  endpoint:
    path: /v1/users
    method: GET
    data_selector: data
- name: groups
  endpoint:
    path: /v1/groups
    method: GET
    data_selector: data
- name: users
  endpoint:
    path: /scim/v2/Users
    method: GET
    data_selector: Resources
- name: groups
  endpoint:
    path: /scim/v2/Groups
    method: GET
    data_selector: Resources
- name: users
  endpoint:
    path: /users
    method: GET
    data_selector: users
    params: {}
- name: meetings
  endpoint:
    path: /meetings
    method: GET
    data_selector: meetings
    params: {}
- name: users
  endpoint:
    path: /api/v1/users
    method: GET
    data_selector: data
- name: users
  endpoint:
    path: /api/v1/users
    method: GET
    data_selector: users
- name: groups
  endpoint:
    path: /api/v1/groups
    method: GET
    data_selector: groups
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: users
  endpoint:
    path: /v1/users
    method: GET
    data_selector: data
    params: {}
- name: vaults
  endpoint:
    path: /v1/vaults
    method: GET
    data_selector: data
    params: {}
- name: users
  endpoint:
    path: /scim/v2/Users
    method: GET
    data_selector: Resources
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: users
  endpoint:
    path: /v1/users
    method: GET
    data_selector: users
    params: {}
- name: groups
  endpoint:
    path: /v1/groups
    method: GET
    data_selector: groups
    params: {}
- name: books
  endpoint:
    path: /books
    method: GET
- name: books_by_id
  endpoint:
    path: /books-by-Id
    method: GET
- name: book_analytics
  endpoint:
    path: /book-analytics
    method: GET
- name: pages
  endpoint:
    path: /pages
    method: GET
- name: users
  endpoint:
    path: /v1/users
    method: GET
    data_selector: data
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: users
  endpoint:
    path: /v1/users
    method: GET
    data_selector: data
    params: {}
- name: groups
  endpoint:
    path: /v1/groups
    method: GET
    data_selector: data
    params: {}
- name: user
  endpoint:
    path: /users
    method: GET
    data_selector: users
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: users
  endpoint:
    path: /v1/users
    method: GET
    data_selector: data
    params: {}
- name: groups
  endpoint:
    path: /v1/groups
    method: GET
    data_selector: data
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: users
  endpoint:
    path: /v1/users
    method: GET
    data_selector: users
    params: {}
- name: groups
  endpoint:
    path: /v1/groups
    method: GET
    data_selector: groups
    params: {}
- name: users
  endpoint:
    path: /v1/users
    method: GET
    data_selector: users
- name: groups
  endpoint:
    path: /v1/groups
    method: GET
    data_selector: groups
- name: tickets
  endpoint:
    path: /api/v2/tickets.json
    method: GET
    data_selector: tickets
- name: users
  endpoint:
    path: /api/v2/users.json
    method: GET
    data_selector: users
- name: events
  endpoint:
    path: /events
    method: GET
- name: event_types
  endpoint:
    path: /event/types
    method: GET
- name: users
  endpoint:
    path: /v1/users
    method: GET
    data_selector: data
    params: {}
- name: tickets
  endpoint:
    path: /api/v2/tickets.json
    method: GET
    data_selector: tickets
- name: users
  endpoint:
    path: /api/v2/users.json
    method: GET
    data_selector: users
- name: users
  endpoint:
    path: /users
    method: POST
- name: users
  endpoint:
    path: /users
    method: DELETE
- name: whoami
  endpoint:
    path: /whoami
    method: GET
- name: users
  endpoint:
    path: /users
    method: GET
- name: events
  endpoint:
    path: /events
    method: GET
- name: event_types
  endpoint:
    path: /event/types
    method: GET
- name: event_invitees
  endpoint:
    path: /event/invitees
    method: GET
- name: users
  endpoint:
    path: /v1/users
    method: GET
    data_selector: users
    params:
      incremental: updated_at
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: users
  endpoint:
    path: /api/v1/users
    method: GET
    data_selector: users
- name: groups
  endpoint:
    path: /api/v1/groups
    method: GET
    data_selector: groups
- name: users
  endpoint:
    path: /users
    method: GET
    data_selector: users
    params: {}
- name: meetings
  endpoint:
    path: /meetings
    method: GET
    data_selector: meetings
    params: {}
- name: users
  endpoint:
    path: /api/v1/users
    method: GET
    data_selector: users
- name: users
  endpoint:
    path: /users
    method: GET
    data_selector: data
    params: {}
- name: groups
  endpoint:
    path: /groups
    method: GET
    data_selector: data
    params: {}
- name: users
  endpoint:
    path: /v1/users
    method: GET
    data_selector: users
- name: groups
  endpoint:
    path: /v1/groups
    method: GET
    data_selector: groups
- name: files
  endpoint:
    path: /me/drive/root/children
    method: GET
    data_selector: value
- name: users
  endpoint:
    path: /v1/users
    method: GET
    data_selector: data
    params: {}
- name: groups
  endpoint:
    path: /v1/groups
    method: GET
    data_selector: data
    params: {}
- name: users
  endpoint:
    path: /v1/users
    method: GET
    data_selector: data
    params: {}
- name: groups
  endpoint:
    path: /v1/groups
    method: GET
    data_selector: data
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: users
  endpoint:
    path: /v1/users
    method: GET
    data_selector: users
    params: {}
- name: groups
  endpoint:
    path: /v1/groups
    method: GET
    data_selector: groups
    params: {}
- name: users
  endpoint:
    path: /api/v1/users
    method: GET
    data_selector: data
    params: {}
- name: groups
  endpoint:
    path: /api/v1/groups
    method: GET
    data_selector: data
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: users
  endpoint:
    path: /v1/users
    method: GET
    data_selector: data
    params: {}
- name: tickets
  endpoint:
    path: /api/v2/tickets.json
    method: GET
    data_selector: tickets
    params: {}
- name: users
  endpoint:
    path: /api/v2/users.json
    method: GET
    data_selector: users
    params: {}
- name: users
  endpoint:
    path: /api/v1/users
    method: GET
    data_selector: users
- name: users
  endpoint:
    path: /users
    method: GET
    data_selector: users
    params: {}
- name: meetings
  endpoint:
    path: /meetings
    method: GET
    data_selector: meetings
    params: {}
- name: users
  endpoint:
    path: /v1/users
    method: GET
    data_selector: data
- name: groups
  endpoint:
    path: /v1/groups
    method: GET
    data_selector: data
- name: background_check_service_list
  endpoint:
    path: /background-check/service-list
    method: GET
- name: background_check_service_parameters
  endpoint:
    path: /background-check/service-parameters
    method: GET
- name: trigger_background_check
  endpoint:
    path: /background-check/trigger
    method: POST
- name: create_candidate
  endpoint:
    path: /candidates
    method: POST
- name: background_checks
  endpoint:
    path: /background-checks
    method: GET
- name: users
  endpoint:
    path: /api/v1/users
    method: GET
    data_selector: data
- name: groups
  endpoint:
    path: /api/v1/groups
    method: GET
    data_selector: data
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: account
  endpoint:
    path: /v1/account
    method: GET
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: meetings
  endpoint:
    path: /users/me/meetings
    method: GET
    data_selector: meetings
    params: {}
- name: users
  endpoint:
    path: /users
    method: GET
    data_selector: users
    params: {}
- name: users
  endpoint:
    path: /api/v1/users
    method: GET
    data_selector: users
    params: {}
- name: groups
  endpoint:
    path: /api/v1/groups
    method: GET
    data_selector: groups
    params: {}
- name: invoices
  endpoint:
    path: /api.xro/2.0/Invoices
    method: GET
    data_selector: Invoices
    params: {}
- name: contacts
  endpoint:
    path: /api.xro/2.0/Contacts
    method: GET
    data_selector: Contacts
    params: {}
- name: users
  endpoint:
    path: /v1/users
    method: GET
    data_selector: data
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: calls
  endpoint:
    path: /calls
    method: GET
- name: users
  endpoint:
    path: /v1/users
    method: GET
    data_selector: data
    params: {}
- name: groups
  endpoint:
    path: /v1/groups
    method: GET
    data_selector: data
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: account
  endpoint:
    path: /account
    method: GET
- name: send_sms
  endpoint:
    path: /sms/send
    method: POST
- name: sms_history
  endpoint:
    path: /sms/history
    method: GET
- name: users
  endpoint:
    path: /users
    method: GET
    data_selector: data
    params: {}
- name: groups
  endpoint:
    path: /groups
    method: GET
    data_selector: data
    params: {}
- name: users
  endpoint:
    path: /v1/users
    method: GET
    data_selector: data
- name: groups
  endpoint:
    path: /v1/groups
    method: GET
    data_selector: data
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
- name: users
  endpoint:
    path: /v1/users
    method: GET
    data_selector: data
    params: {}
- name: groups
  endpoint:
    path: /v1/groups
    method: GET
    data_selector: data
    params: {}
- name: users
  endpoint:
    path: /users
    method: GET
    data_selector: users
    params: {}
- name: meetings
  endpoint:
    path: /meetings
    method: GET
    data_selector: meetings
    params: {}
- name: users
  endpoint:
    path: /v1/users
    method: GET
    data_selector: users
    params: {}
- name: groups
  endpoint:
    path: /v1/groups
    method: GET
    data_selector: groups
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: users
  endpoint:
    path: /v1/users
    method: GET
    data_selector: data
    params: {}
- name: groups
  endpoint:
    path: /v1/groups
    method: GET
    data_selector: data
    params: {}
- name: users
  endpoint:
    path: /api/v1/users
    method: GET
    data_selector: users
    params: {}
- name: groups
  endpoint:
    path: /api/v1/groups
    method: GET
    data_selector: groups
    params: {}
- name: users
  endpoint:
    path: /v1/users
    method: GET
    data_selector: users
- name: groups
  endpoint:
    path: /v1/groups
    method: GET
    data_selector: groups
- name: files
  endpoint:
    path: /me/drive/root/children
    method: GET
    data_selector: value
    params: {}
- name: users
  endpoint:
    path: /v1/users
    method: GET
    data_selector: data
    params:
      incremental: updated_at
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: users
  endpoint:
    path: /v1/users
    method: GET
    data_selector: data
    params: {}
- name: groups
  endpoint:
    path: /v1/groups
    method: GET
    data_selector: data
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: users
  endpoint:
    path: /scim/v2/Users
    method: GET
    data_selector: Resources
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: users
  endpoint:
    path: /v1/users
    method: GET
    data_selector: data
- name: groups
  endpoint:
    path: /v1/groups
    method: GET
    data_selector: data
- name: meetings
  endpoint:
    path: /meetings
    method: GET
    data_selector: meetings
    params: {}
- name: users
  endpoint:
    path: /users
    method: GET
    data_selector: users
    params: {}
- name: spaces
  endpoint:
    path: /spaces
    method: GET
- name: pages
  endpoint:
    path: /pages
    method: GET
- name: user
  endpoint:
    path: /v1/users
    method: GET
    data_selector: users
    params: {}
- name: group
  endpoint:
    path: /v1/groups
    method: GET
    data_selector: groups
    params: {}
- name: employee
  endpoint:
    path: /api/v1/employees
    method: GET
    data_selector: data
    params:
      incremental: last_updated
- name: users
  endpoint:
    path: /v1/users
    method: GET
    data_selector: users
    params: {}
- name: users
  endpoint:
    path: /v1/users
    method: GET
    data_selector: users
    params: {}
- name: groups
  endpoint:
    path: /v1/groups
    method: GET
    data_selector: groups
    params: {}
- name: users
  endpoint:
    path: /users
    method: GET
    data_selector: data
    params: {}
- name: groups
  endpoint:
    path: /groups
    method: GET
    data_selector: data
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: users
  endpoint:
    path: /v1/users
    method: GET
    data_selector: data
    params: {}
- name: users
  endpoint:
    path: /api/v1/users
    method: GET
    data_selector: users
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: users
  endpoint:
    path: /users
    method: GET
    data_selector: data
- name: groups
  endpoint:
    path: /groups
    method: GET
    data_selector: data
- name: users
  endpoint:
    path: /api/v1/users
    method: GET
    data_selector: data
    params: {}
- name: groups
  endpoint:
    path: /api/v1/groups
    method: GET
    data_selector: data
    params: {}
- name: users
  endpoint:
    path: /users
    method: GET
    data_selector: users
    params: {}
- name: meetings
  endpoint:
    path: /meetings
    method: GET
    data_selector: meetings
    params: {}
- name: users
  endpoint:
    path: /api/v1/users
    method: GET
    data_selector: data
    params:
      incremental: updated_at
- name: groups
  endpoint:
    path: /api/v1/groups
    method: GET
    data_selector: data
    params: {}
- name: contacts
  endpoint:
    path: /crm/v2/contacts
    method: GET
    data_selector: data
- name: leads
  endpoint:
    path: /crm/v2/leads
    method: GET
    data_selector: data
- name: users
  endpoint:
    path: /v1/users
    method: GET
    data_selector: data
    params:
      incremental: updated_at
- name: groups
  endpoint:
    path: /v1/groups
    method: GET
    data_selector: data
    params: {}
- name: contacts
  endpoint:
    path: /contacts
    method: GET
    data_selector: data
    params: {}
- name: leads
  endpoint:
    path: /leads
    method: GET
    data_selector: data
    params: {}
- name: users
  endpoint:
    path: /scim/v2/Users
    method: GET
    data_selector: Resources
    params:
      incremental: updated_at
- name: meetings
  endpoint:
    path: /meetings
    method: GET
    data_selector: meetings
    params: {}
- name: users
  endpoint:
    path: /users
    method: GET
    data_selector: users
    params: {}
- name: users
  endpoint:
    path: /v1/users
    method: GET
    data_selector: users
- name: groups
  endpoint:
    path: /v1/groups
    method: GET
    data_selector: groups
- name: users
  endpoint:
    path: /users
    method: GET
    data_selector: users
    params: {}
- name: meetings
  endpoint:
    path: /meetings
    method: GET
    data_selector: meetings
    params: {}
- name: users
  endpoint:
    path: /api/v1/users
    method: GET
    data_selector: users
    params:
      incremental: updated_at
- name: groups
  endpoint:
    path: /api/v1/groups
    method: GET
    data_selector: groups
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: vaults
  endpoint:
    path: /v1/vaults
    method: GET
    data_selector: vaults
    params: {}
- name: items
  endpoint:
    path: /v1/items
    method: GET
    data_selector: items
    params: {}
- name: users
  endpoint:
    path: /api/v1/users
    method: GET
    data_selector: users
    params: {}
- name: groups
  endpoint:
    path: /api/v1/groups
    method: GET
    data_selector: groups
    params: {}
- name: warehouses
  endpoint:
    path: /warehouses
    method: GET
- name: users
  endpoint:
    path: /v1/users
    method: GET
    data_selector: data
    params: {}
- name: users
  endpoint:
    path: /users
    method: POST
- name: users
  endpoint:
    path: /users
    method: DELETE
- name: users
  endpoint:
    path: /users
    method: GET
- name: users
  endpoint:
    path: /v1/users
    method: GET
    data_selector: data
    params: {}
- name: groups
  endpoint:
    path: /v1/groups
    method: GET
    data_selector: data
    params: {}
- name: contacts
  endpoint:
    path: /crm/v2/Contacts
    method: GET
    data_selector: data
    params: {}
- name: users
  endpoint:
    path: /v1/users
    method: GET
    data_selector: data
    params:
      incremental: updated_at
- name: groups
  endpoint:
    path: /v1/groups
    method: GET
    data_selector: data
    params: {}
- name: users
  endpoint:
    path: /v2/users
    method: GET
    data_selector: users
    params: {}
- name: meetings
  endpoint:
    path: /v2/meetings
    method: GET
    data_selector: meetings
    params: {}
- name: users
  endpoint:
    path: /v1/users
    method: GET
    data_selector: data
    params: {}
- name: groups
  endpoint:
    path: /v1/groups
    method: GET
    data_selector: data
    params: {}
- name: users
  endpoint:
    path: /api/v1/users
    method: GET
    data_selector: users
    params: {}
- name: groups
  endpoint:
    path: /api/v1/groups
    method: GET
    data_selector: groups
    params: {}
- name: users
  endpoint:
    path: /v1/users
    method: GET
    data_selector: users
- name: groups
  endpoint:
    path: /v1/groups
    method: GET
    data_selector: groups
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: users
  endpoint:
    path: /users
    method: GET
    data_selector: data
- name: drive_items
  endpoint:
    path: /v1.0/me/drive/root/children
    method: GET
    data_selector: value
- name: users
  endpoint:
    path: /v1/users
    method: GET
    data_selector: data
    params:
      incremental: updated_at
- name: user
  endpoint:
    path: /v1/users
    method: GET
    data_selector: users
    params:
      incremental: updated_at
- name: group
  endpoint:
    path: /v1/groups
    method: GET
    data_selector: groups
    params: {}
- name: users
  endpoint:
    path: /users
    method: GET
    data_selector: users
    params: {}
- name: meetings
  endpoint:
    path: /meetings
    method: GET
    data_selector: meetings
    params: {}
- name: users
  endpoint:
    path: /users
    method: GET
- name: users
  endpoint:
    path: /v1/users
    method: GET
    data_selector: data
    params: {}
- name: groups
  endpoint:
    path: /v1/groups
    method: GET
    data_selector: data
    params: {}
- name: users
  endpoint:
    path: /v1/users
    method: GET
    data_selector: data
- name: groups
  endpoint:
    path: /v1/groups
    method: GET
    data_selector: data
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: users
  endpoint:
    path: /v1/users
    method: GET
    data_selector: data
    params:
      incremental: updated_at
- name: groups
  endpoint:
    path: /v1/groups
    method: GET
    data_selector: data
    params: {}
- name: contacts
  endpoint:
    path: /contacts
    method: GET
    data_selector: data
- name: companies
  endpoint:
    path: /companies
    method: GET
    data_selector: data
- name: users
  endpoint:
    path: /v1/users
    method: GET
    data_selector: users
- name: contacts
  endpoint:
    path: /api/v1/contacts
    method: GET
    data_selector: data
- name: deals
  endpoint:
    path: /api/v1/deals
    method: GET
    data_selector: data
- name: categories
  endpoint:
    path: /categories
    method: GET
- name: users
  endpoint:
    path: /users
    method: GET
- name: topics
  endpoint:
    path: /topics
    method: POST
- name: update_topic_status
  endpoint:
    path: /topics/status
    method: PUT
- name: users
  endpoint:
    path: /v1/users
    method: GET
    data_selector: data
- name: drive_items
  endpoint:
    path: /me/drive/root/children
    method: GET
    data_selector: value
- name: users
  endpoint:
    path: /v1/users
    method: GET
    data_selector: users
- name: users
  endpoint:
    path: /api/v1/users
    method: GET
    data_selector: users
    params: {}
- name: users
  endpoint:
    path: /v1/users
    method: GET
    data_selector: data
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: users
  endpoint:
    path: /users
    method: POST
- name: users
  endpoint:
    path: /users
    method: DELETE
- name: users
  endpoint:
    path: /users
    method: GET
- name: users
  endpoint:
    path: /v1/users
    method: GET
    data_selector: data
    params: {}
- name: groups
  endpoint:
    path: /v1/groups
    method: GET
    data_selector: data
    params: {}
- name: users
  endpoint:
    path: /users
    method: POST
- name: users
  endpoint:
    path: /users
    method: DELETE
- name: users
  endpoint:
    path: /users
    method: GET
- name: users
  endpoint:
    path: /users
    method: GET
    data_selector: records
    params: {}
- name: groups
  endpoint:
    path: /groups
    method: GET
    data_selector: records
    params: {}
- name: contacts
  endpoint:
    path: /crm/v2/Contacts
    method: GET
    data_selector: data
    params: {}
- name: users
  endpoint:
    path: /scim/v2/Users
    method: GET
    data_selector: Resources
- name: groups
  endpoint:
    path: /scim/v2/Groups
    method: GET
    data_selector: Resources
- name: contacts
  endpoint:
    path: /crm/v2/Contacts
    method: GET
    data_selector: data
- name: leads
  endpoint:
    path: /crm/v2/Leads
    method: GET
    data_selector: data
- name: folder_content
  endpoint:
    path: /folder-content
    method: POST
- name: users
  endpoint:
    path: /users
    method: POST
- name: delete_users
  endpoint:
    path: /users
    method: DELETE
- name: get_users
  endpoint:
    path: /users
    method: GET
- name: files
  endpoint:
    path: /files
    method: GET
- name: users
  endpoint:
    path: /v1/users
    method: GET
    data_selector: data
    params: {}
- name: groups
  endpoint:
    path: /v1/groups
    method: GET
    data_selector: data
    params: {}
- name: files
  endpoint:
    path: /me/drive/root/children
    method: GET
    data_selector: value
- name: users
  endpoint:
    path: /api/v1/users
    method: GET
    data_selector: data
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: users
  endpoint:
    path: /v1/users
    method: GET
    data_selector: users
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: users
  endpoint:
    path: /v1/users
    method: GET
    data_selector: users
    params: {}
- name: groups
  endpoint:
    path: /v1/groups
    method: GET
    data_selector: groups
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: users
  endpoint:
    path: /v1/users
    method: GET
    data_selector: data
    params: {}
- name: groups
  endpoint:
    path: /v1/groups
    method: GET
    data_selector: data
    params: {}
- name: employee
  endpoint:
    path: /v1/Employee
    method: GET
    data_selector: records
- name: job
  endpoint:
    path: /v1/Job
    method: GET
    data_selector: records
- name: users
  endpoint:
    path: /api/v1/users
    method: GET
    data_selector: users
- name: groups
  endpoint:
    path: /api/v1/groups
    method: GET
    data_selector: groups
- name: users
  endpoint:
    path: /v1/users
    method: GET
    data_selector: data
    params: {}
- name: groups
  endpoint:
    path: /v1/groups
    method: GET
    data_selector: data
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: users
  endpoint:
    path: /api/v1/users
    method: GET
    data_selector: data
    params: {}
- name: groups
  endpoint:
    path: /api/v1/groups
    method: GET
    data_selector: data
    params: {}
- name: files
  endpoint:
    path: /me/drive/root/children
    method: GET
    data_selector: value
- name: users
  endpoint:
    path: /v1/users
    method: GET
    data_selector: users
    params: {}
- name: groups
  endpoint:
    path: /v1/groups
    method: GET
    data_selector: groups
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: users
  endpoint:
    path: /v1/users
    method: GET
    data_selector: data
- name: groups
  endpoint:
    path: /v1/groups
    method: GET
    data_selector: data
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: users
  endpoint:
    path: /v1/users
    method: GET
    data_selector: data
    params: {}
- name: groups
  endpoint:
    path: /v1/groups
    method: GET
    data_selector: data
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: users
  endpoint:
    path: /api/v1/users
    method: GET
    data_selector: data
    params: {}
- name: groups
  endpoint:
    path: /api/v1/groups
    method: GET
    data_selector: data
    params: {}
- name: files
  endpoint:
    path: /me/drive/root/children
    method: GET
    data_selector: value
- name: users
  endpoint:
    path: /v1/users
    method: GET
    data_selector: data
    params: {}
- name: groups
  endpoint:
    path: /v1/groups
    method: GET
    data_selector: data
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: users
  endpoint:
    path: /api/v1/users
    method: GET
    data_selector: data
    params: {}
- name: groups
  endpoint:
    path: /api/v1/groups
    method: GET
    data_selector: data
    params: {}
- name: users
  endpoint:
    path: /users
    method: GET
- name: groups
  endpoint:
    path: /groups
    method: GET
- name: roles
  endpoint:
    path: /roles
    method: GET
- name: users
  endpoint:
    path: /v1/users
    method: GET
    data_selector: data
- name: groups
  endpoint:
    path: /v1/groups
    method: GET
    data_selector: data
- name: users
  endpoint:
    path: /api/v1/users
    method: GET
    data_selector: data
    params: {}
- name: groups
  endpoint:
    path: /api/v1/groups
    method: GET
    data_selector: data
    params: {}
- name: users
  endpoint:
    path: /api/v1/users
    method: GET
    data_selector: users
- name: groups
  endpoint:
    path: /api/v1/groups
    method: GET
    data_selector: groups
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: users
  endpoint:
    path: /v1/users
    method: GET
    data_selector: data
    params: {}
- name: teams
  endpoint:
    path: /v1/teams
    method: GET
    data_selector: data
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: users
  endpoint:
    path: /v1/users
    method: GET
    data_selector: data
    params: {}
- name: groups
  endpoint:
    path: /v1/groups
    method: GET
    data_selector: data
    params: {}
- name: users
  endpoint:
    path: /users
    method: GET
- name: create_user
  endpoint:
    path: /users
    method: POST
- name: disable_user
  endpoint:
    path: /users
    method: DELETE
- name: policies
  endpoint:
    path: /policies
    method: POST
- name: users
  endpoint:
    path: /api/v1/users
    method: GET
    data_selector: data
- name: groups
  endpoint:
    path: /api/v1/groups
    method: GET
    data_selector: data
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: users
  endpoint:
    path: /scim/v2/Users
    method: GET
    data_selector: Resources
    params: {}
- name: groups
  endpoint:
    path: /scim/v2/Groups
    method: GET
    data_selector: Resources
    params: {}
- name: employee
  endpoint:
    path: /v1/employees
    method: GET
    data_selector: records
    params: {}
- name: users
  endpoint:
    path: /api/v1/users
    method: GET
    data_selector: users
- name: tickets
  endpoint:
    path: /tickets.json
    method: GET
    data_selector: tickets
- name: users
  endpoint:
    path: /users.json
    method: GET
    data_selector: users
- name: users
  endpoint:
    path: /v1/users
    method: GET
    data_selector: users
    params: {}
- name: groups
  endpoint:
    path: /v1/groups
    method: GET
    data_selector: groups
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: users
  endpoint:
    path: /v1/users
    method: GET
    data_selector: data
    params: {}
- name: groups
  endpoint:
    path: /v1/groups
    method: GET
    data_selector: data
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: users
  endpoint:
    path: /users
    method: GET
    data_selector: users
    params: {}
- name: groups
  endpoint:
    path: /groups
    method: GET
    data_selector: groups
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: users
  endpoint:
    path: /v1/users
    method: GET
    data_selector: data
    params: {}
- name: groups
  endpoint:
    path: /v1/groups
    method: GET
    data_selector: data
    params: {}
- name: users
  endpoint:
    path: /v1/users
    method: GET
    data_selector: data
- name: groups
  endpoint:
    path: /v1/groups
    method: GET
    data_selector: data
- name: users
  endpoint:
    path: /v1/users
    method: GET
    data_selector: data
    params:
      incremental: updated_at
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: users
  endpoint:
    path: /api/v1/users
    method: GET
    data_selector: data
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: users
  endpoint:
    path: /v1/users
    method: GET
    data_selector: data
    params: {}
- name: deals
  endpoint:
    path: /deals
    method: GET
    data_selector: data
    params: {}
- name: persons
  endpoint:
    path: /persons
    method: GET
    data_selector: data
    params: {}
- name: users
  endpoint:
    path: /v1/users
    method: GET
    data_selector: data
- name: groups
  endpoint:
    path: /v1/groups
    method: GET
    data_selector: data
- name: tickets
  endpoint:
    path: /tickets
    method: GET
    data_selector: tickets
- name: users
  endpoint:
    path: /users
    method: GET
    data_selector: users
- name: users
  endpoint:
    path: /v1/users
    method: GET
    data_selector: data
    params: {}
- name: users
  endpoint:
    path: /users
    method: GET
    data_selector: data
    params: {}
- name: groups
  endpoint:
    path: /groups
    method: GET
    data_selector: data
    params: {}
- name: users
  endpoint:
    path: /users
    method: GET
    data_selector: users
    params: {}
- name: meetings
  endpoint:
    path: /meetings
    method: GET
    data_selector: meetings
    params: {}
- name: users
  endpoint:
    path: /v1/users
    method: GET
    data_selector: data
- name: groups
  endpoint:
    path: /v1/groups
    method: GET
    data_selector: data
- name: users
  endpoint:
    path: /api/v1/users
    method: GET
    data_selector: data
    params: {}
- name: groups
  endpoint:
    path: /api/v1/groups
    method: GET
    data_selector: data
    params: {}
- name: contacts
  endpoint:
    path: /api/v1/contacts
    method: GET
    data_selector: data
- name: users
  endpoint:
    path: /v1/users
    method: GET
    data_selector: data
- name: vaults
  endpoint:
    path: /v1/vaults
    method: GET
    data_selector: data
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: contacts
  endpoint:
    path: /contacts
    method: GET
- name: users
  endpoint:
    path: /users
    method: GET
- name: articles
  endpoint:
    path: /articles
    method: GET
- name: tickets
  endpoint:
    path: /tickets
    method: GET
- name: users
  endpoint:
    path: /v1/users
    method: GET
    data_selector: data
- name: groups
  endpoint:
    path: /v1/groups
    method: GET
    data_selector: data
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: users
  endpoint:
    path: /v1/users
    method: GET
    data_selector: data
    params: {}
- name: groups
  endpoint:
    path: /v1/groups
    method: GET
    data_selector: data
    params: {}
- name: files
  endpoint:
    path: /me/drive/root/children
    method: GET
    data_selector: value
- name: shared_files
  endpoint:
    path: /me/drive/sharedWithMe
    method: GET
    data_selector: value
- name: user
  endpoint:
    path: /api/v1/users
    method: GET
    data_selector: data
    params:
      incremental: updated_at
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: users
  endpoint:
    path: /v1/users
    method: GET
    data_selector: data
- name: groups
  endpoint:
    path: /v1/groups
    method: GET
    data_selector: data
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: conversations_all
  endpoint:
    path: /conversations/all
    method: GET
- name: conversations
  endpoint:
    path: /conversations
    method: GET
- name: users
  endpoint:
    path: /v1/users
    method: GET
    data_selector: data
    params:
      incremental: updated_at
- name: groups
  endpoint:
    path: /v1/groups
    method: GET
    data_selector: data
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: users
  endpoint:
    path: /v1/users
    method: GET
    data_selector: data
- name: groups
  endpoint:
    path: /v1/groups
    method: GET
    data_selector: data
- name: users
  endpoint:
    path: /api/v1/users
    method: GET
    data_selector: data
    params: {}
- name: groups
  endpoint:
    path: /api/v1/groups
    method: GET
    data_selector: data
    params: {}
- name: users
  endpoint:
    path: /users
    method: GET
    data_selector: data
    params: {}
- name: groups
  endpoint:
    path: /groups
    method: GET
    data_selector: data
    params: {}
- name: users
  endpoint:
    path: /v1/users
    method: GET
    data_selector: data
    params: {}
- name: groups
  endpoint:
    path: /v1/groups
    method: GET
    data_selector: data
    params: {}
- name: users
  endpoint:
    path: /users
    method: GET
    data_selector: users
    params: {}
- name: meetings
  endpoint:
    path: /meetings
    method: GET
    data_selector: meetings
    params: {}
- name: users
  endpoint:
    path: /v1/users
    method: GET
    data_selector: users
    params:
      incremental: updated_at
- name: groups
  endpoint:
    path: /v1/groups
    method: GET
    data_selector: groups
    params: {}
- name: files
  endpoint:
    path: /me/drive/root/children
    method: GET
    data_selector: value
- name: application
  endpoint:
    path: /application
    method: PATCH
- name: applications
  endpoint:
    path: /applications
    method: GET
- name: candidates
  endpoint:
    path: /candidates
    method: GET
- name: job-posts
  endpoint:
    path: /job-posts
    method: GET
- name: job-stages
  endpoint:
    path: /job-stages
    method: GET
- name: jobs
  endpoint:
    path: /jobs
    method: GET
- name: locations
  endpoint:
    path: /locations
    method: GET
- name: users
  endpoint:
    path: /users
    method: GET
- name: users
  endpoint:
    path: /v1/users
    method: GET
    data_selector: data
- name: groups
  endpoint:
    path: /v1/groups
    method: GET
    data_selector: data
- name: contacts
  endpoint:
    path: /crm/v2/Contacts
    method: GET
    data_selector: data
- name: leads
  endpoint:
    path: /crm/v2/Leads
    method: GET
    data_selector: data
- name: users
  endpoint:
    path: /v1/users
    method: GET
    data_selector: users
- name: groups
  endpoint:
    path: /v1/groups
    method: GET
    data_selector: groups
- name: contacts
  endpoint:
    path: /crm/v2/Contacts
    method: GET
    data_selector: data
    params: {}
- name: deals
  endpoint:
    path: /crm/v2/Deals
    method: GET
    data_selector: data
    params: {}
- name: users
  endpoint:
    path: /v1/users
    method: GET
    data_selector: data
    params: {}
- name: drives
  endpoint:
    path: /drives
    method: GET
    data_selector: value
- name: items
  endpoint:
    path: /me/drive/root/children
    method: GET
    data_selector: value
- name: users
  endpoint:
    path: /v1/users
    method: GET
    data_selector: data
    params:
      incremental: updated_at
- name: files
  endpoint:
    path: /files
    method: PUT
- name: files
  endpoint:
    path: /files
    method: GET
- name: list_repos
  endpoint:
    path: /github/list-repos
    method: GET
- name: issues
  endpoint:
    path: /github/issues
    method: GET
- name: issues_lite
  endpoint:
    path: /github/issues-lite
    method: GET
- name: users
  endpoint:
    path: /v1/users
    method: GET
    data_selector: data
    params:
      incremental: updated_at
- name: groups
  endpoint:
    path: /v1/groups
    method: GET
    data_selector: data
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: users
  endpoint:
    path: /v1/users
    method: GET
    data_selector: users
    params: {}
- name: groups
  endpoint:
    path: /v1/groups
    method: GET
    data_selector: groups
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: repository
  endpoint:
    path: /repos/{owner}/{repo}
    method: GET
    data_selector: data
    params: {}
- name: issues
  endpoint:
    path: /repos/{owner}/{repo}/issues
    method: GET
    data_selector: data
    params: {}
- name: commits
  endpoint:
    path: /commits
    method: GET
- name: pull_requests
  endpoint:
    path: /pull-requests
    method: GET
- name: repositories
  endpoint:
    path: /repositories
    method: GET
- name: users
  endpoint:
    path: /users
    method: GET
    data_selector: users
- name: groups
  endpoint:
    path: /groups
    method: GET
    data_selector: groups
- name: users
  endpoint:
    path: /v1/users
    method: GET
    data_selector: data
    params: {}
- name: groups
  endpoint:
    path: /v1/groups
    method: GET
    data_selector: data
    params: {}
- name: users
  endpoint:
    path: /v2/users
    method: GET
    data_selector: users
- name: meetings
  endpoint:
    path: /v2/meetings
    method: GET
    data_selector: meetings
- name: users
  endpoint:
    path: /v1/users
    method: GET
    data_selector: data
    params: {}
- name: groups
  endpoint:
    path: /v1/groups
    method: GET
    data_selector: data
    params: {}
- name: fetch_call_transcripts
  endpoint:
    path: /fetch-call-transcripts
    method: GET
- name: calls
  endpoint:
    path: /calls
    method: GET
- name: call_transcripts
  endpoint:
    path: /call-transcripts
    method: GET
- name: users
  endpoint:
    path: /users
    method: GET
- name: users
  endpoint:
    path: /v1/users
    method: GET
    data_selector: data
    params: {}
- name: groups
  endpoint:
    path: /v1/groups
    method: GET
    data_selector: data
    params: {}
- name: users
  endpoint:
    path: /users
    method: GET
    data_selector: users
- name: meetings
  endpoint:
    path: /meetings
    method: GET
    data_selector: meetings
- name: call_transcripts
  endpoint:
    path: /call-transcripts
    method: GET
- name: calls
  endpoint:
    path: /calls
    method: GET
- name: users
  endpoint:
    path: /users
    method: GET
- name: fetch_call_transcripts
  endpoint:
    path: /fetch-call-transcripts
    method: GET
- name: users
  endpoint:
    path: /v1/users
    method: GET
    data_selector: users
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: workspace-org-unit
  endpoint:
    path: /google/workspace-org-unit
    method: GET
- name: workspace-users
  endpoint:
    path: /google/workspace-users
    method: GET
- name: workspace-user-access-tokens
  endpoint:
    path: /google/workspace-user-access-tokens
    method: GET
- name: users
  endpoint:
    path: /v1/users
    method: GET
    data_selector: data
    params: {}
- name: groups
  endpoint:
    path: /v1/groups
    method: GET
    data_selector: data
    params: {}
- name: files
  endpoint:
    path: /me/drive/root/children
    method: GET
    data_selector: value
- name: users
  endpoint:
    path: /v1/users
    method: GET
    data_selector: data
    params:
      incremental: updated_at
- name: meetings
  endpoint:
    path: /users/me/meetings
    method: GET
    data_selector: meetings
- name: users
  endpoint:
    path: /v1/users
    method: GET
    data_selector: data
    params: {}
- name: groups
  endpoint:
    path: /v1/groups
    method: GET
    data_selector: data
    params: {}
- name: users
  endpoint:
    path: /v1/users
    method: GET
    data_selector: data
    params:
      incremental: updated_at
- name: groups
  endpoint:
    path: /v1/groups
    method: GET
    data_selector: data
    params: {}
- name: files
  endpoint:
    path: /me/drive/root/children
    method: GET
    data_selector: value
- name: users
  endpoint:
    path: /users
    method: GET
    data_selector: data
- name: groups
  endpoint:
    path: /groups
    method: GET
    data_selector: data
- name: files
  endpoint:
    path: /me/drive/root/children
    method: GET
    data_selector: value
- name: users
  endpoint:
    path: /api/v1/users
    method: GET
    data_selector: data
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: users
  endpoint:
    path: /v1/users
    method: GET
    data_selector: data
    params: {}
- name: users
  endpoint:
    path: /v1/users
    method: GET
    data_selector: data
    params: {}
- name: groups
  endpoint:
    path: /v1/groups
    method: GET
    data_selector: data
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: users
  endpoint:
    path: /v1/users
    method: GET
    data_selector: data
    params: {}
- name: groups
  endpoint:
    path: /v1/groups
    method: GET
    data_selector: data
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: users
  endpoint:
    path: /api/v1/users
    method: GET
    data_selector: users
    params: {}
- name: users
  endpoint:
    path: /api/v1/users
    method: GET
    data_selector: users
- name: users
  endpoint:
    path: /users
    method: GET
    data_selector: data
    params: {}
- name: users
  endpoint:
    path: /users
    method: GET
    data_selector: users
    params: {}
- name: meetings
  endpoint:
    path: /meetings
    method: GET
    data_selector: meetings
    params: {}
- name: users
  endpoint:
    path: /v1/users
    method: GET
    data_selector: data
    params: {}
- name: groups
  endpoint:
    path: /v1/groups
    method: GET
    data_selector: data
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: users
  endpoint:
    path: /api/v1/users
    method: GET
    data_selector: data
    params: {}
- name: users
  endpoint:
    path: /api/v1/users
    method: GET
    data_selector: users
- name: ticket
  endpoint:
    path: /ticket
    method: POST
- name: tickets
  endpoint:
    path: /tickets
    method: GET
- name: user
  endpoint:
    path: /users
    method: POST
- name: users
  endpoint:
    path: /users
    method: GET
- name: users
  endpoint:
    path: /v1/users
    method: GET
    data_selector: data
    params: {}
- name: groups
  endpoint:
    path: /v1/groups
    method: GET
    data_selector: data
    params: {}
- name: contacts
  endpoint:
    path: /contacts
    method: GET
    data_selector: data
    params:
      incremental: updated_at
- name: companies
  endpoint:
    path: /companies
    method: GET
    data_selector: data
    params: {}
- name: users
  endpoint:
    path: /api/v1/users
    method: GET
    data_selector: data
    params: {}
- name: groups
  endpoint:
    path: /api/v1/groups
    method: GET
    data_selector: data
    params: {}
- name: files
  endpoint:
    path: /me/drive/root/children
    method: GET
    data_selector: value
- name: shared_files
  endpoint:
    path: /me/drive/sharedWithMe
    method: GET
    data_selector: value
- name: users
  endpoint:
    path: /v1/users
    method: GET
    data_selector: data
- name: groups
  endpoint:
    path: /v1/groups
    method: GET
    data_selector: data
- name: users
  endpoint:
    path: /users
    method: GET
- name: users
  endpoint:
    path: /v1/users
    method: GET
    data_selector: data
    params: {}
- name: invoices
  endpoint:
    path: /api.xro/2.0/Invoices
    method: GET
    data_selector: Invoices
    params: {}
- name: contacts
  endpoint:
    path: /api.xro/2.0/Contacts
    method: GET
    data_selector: Contacts
    params: {}
- name: users
  endpoint:
    path: /v1/users
    method: GET
    data_selector: data
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: applications
  endpoint:
    path: /greenhouse-basic/applications
    method: GET
- name: candidates
  endpoint:
    path: /greenhouse-basic/candidates
    method: GET
- name: jobs
  endpoint:
    path: /greenhouse-basic/jobs
    method: GET
- name: users
  endpoint:
    path: /api/v1/users
    method: GET
    data_selector: users
    params: {}
- name: groups
  endpoint:
    path: /api/v1/groups
    method: GET
    data_selector: groups
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: users
  endpoint:
    path: /v1/users
    method: GET
    data_selector: data
    params: {}
- name: groups
  endpoint:
    path: /v1/groups
    method: GET
    data_selector: data
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: applications
  endpoint:
    path: /greenhouse-basic/applications
    method: GET
- name: candidates
  endpoint:
    path: /greenhouse-basic/candidates
    method: GET
- name: jobs
  endpoint:
    path: /greenhouse-basic/jobs
    method: GET
- name: users
  endpoint:
    path: /v1/users
    method: GET
    data_selector: data
    params: {}
- name: groups
  endpoint:
    path: /v1/groups
    method: GET
    data_selector: data
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: users
  endpoint:
    path: /v1/users
    method: GET
    data_selector: data
    params: {}
- name: groups
  endpoint:
    path: /v1/groups
    method: GET
    data_selector: data
    params: {}
- name: zap
  endpoint:
    path: /zaps
    method: GET
    data_selector: zaps
    params: {}
- name: task
  endpoint:
    path: /tasks
    method: GET
    data_selector: tasks
    params: {}
- name: users
  endpoint:
    path: /users
    method: GET
    data_selector: data
- name: groups
  endpoint:
    path: /groups
    method: GET
    data_selector: data
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: users
  endpoint:
    path: /v1/users
    method: GET
    data_selector: data
    params: {}
- name: files
  endpoint:
    path: /me/drive/root/children
    method: GET
    data_selector: value
    params: {}
- name: users
  endpoint:
    path: /v1/users
    method: GET
    data_selector: users
    params: {}
- name: groups
  endpoint:
    path: /v1/groups
    method: GET
    data_selector: groups
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: users
  endpoint:
    path: /v1/users
    method: GET
    data_selector: records
- name: groups
  endpoint:
    path: /v1/groups
    method: GET
    data_selector: records
- name: files
  endpoint:
    path: /me/drive/root/children
    method: GET
    data_selector: value
- name: users
  endpoint:
    path: /v1/users
    method: GET
    data_selector: users
    params: {}
- name: groups
  endpoint:
    path: /v1/groups
    method: GET
    data_selector: groups
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: users
  endpoint:
    path: /users
    method: GET
    data_selector: data
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: users
  endpoint:
    path: /v1/users
    method: GET
    data_selector: data
    params: {}
- name: employees
  endpoint:
    path: /employees
    method: POST
- name: employees
  endpoint:
    path: /employees
    method: PUT
- name: employees
  endpoint:
    path: /employees
    method: DELETE
- name: employees
  endpoint:
    path: /employees
    method: GET
- name: unified_employees
  endpoint:
    path: /employees/unified
    method: GET
- name: users
  endpoint:
    path: /v1/users
    method: GET
    data_selector: data
    params: {}
- name: groups
  endpoint:
    path: /v1/groups
    method: GET
    data_selector: data
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: employees
  endpoint:
    path: /employees
    method: POST
- name: employees
  endpoint:
    path: /employees
    method: PUT
- name: employees
  endpoint:
    path: /employees
    method: DELETE
- name: employees
  endpoint:
    path: /employees
    method: GET
- name: unified_employees
  endpoint:
    path: /employees/unified
    method: GET
- name: users
  endpoint:
    path: /v1/users
    method: GET
    data_selector: users
    params: {}
- name: interviews
  endpoint:
    path: /interviews
    method: POST
- name: interviews
  endpoint:
    path: /interviews
    method: GET
- name: tests
  endpoint:
    path: /tests
    method: POST
- name: tests
  endpoint:
    path: /tests
    method: GET
- name: teams
  endpoint:
    path: /teams
    method: GET
- name: users
  endpoint:
    path: /users
    method: GET
- name: users
  endpoint:
    path: /scim/v2/Users
    method: GET
    data_selector: Resources
    params:
      incremental: modified
- name: groups
  endpoint:
    path: /scim/v2/Groups
    method: GET
    data_selector: Resources
    params: {}
- name: meetings
  endpoint:
    path: /meetings
    method: GET
    data_selector: meetings
    params: {}
- name: users
  endpoint:
    path: /users
    method: GET
    data_selector: users
    params: {}
- name: users
  endpoint:
    path: /api/v1/users
    method: GET
    data_selector: data
- name: groups
  endpoint:
    path: /api/v1/groups
    method: GET
    data_selector: data
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: users
  endpoint:
    path: /v1/users
    method: GET
    data_selector: data
- name: users
  endpoint:
    path: /v1/users
    method: GET
    data_selector: data
    params: {}
- name: files
  endpoint:
    path: /me/drive/root/children
    method: GET
    data_selector: value
- name: users
  endpoint:
    path: /users
    method: GET
    data_selector: data
    params: {}
- name: groups
  endpoint:
    path: /groups
    method: GET
    data_selector: data
    params: {}
- name: users
  endpoint:
    path: /v1/users
    method: GET
    data_selector: data
    params:
      incremental: updated_at
- name: vaults
  endpoint:
    path: /v1/vaults
    method: GET
    data_selector: data
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: employees
  endpoint:
    path: /employees
    method: GET
- name: unified_employees
  endpoint:
    path: /employees/unified
    method: GET
- name: users
  endpoint:
    path: /api/v1/users
    method: GET
    data_selector: data
    params: {}
- name: groups
  endpoint:
    path: /api/v1/groups
    method: GET
    data_selector: data
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: contacts
  endpoint:
    path: /contacts/search
    method: POST
- name: users
  endpoint:
    path: /api/v1/users
    method: GET
    data_selector: users
    params: {}
- name: groups
  endpoint:
    path: /api/v1/groups
    method: GET
    data_selector: groups
    params: {}
- name: contacts
  endpoint:
    path: /crm/v2/Contacts
    method: GET
    data_selector: data
    params: {}
- name: leads
  endpoint:
    path: /crm/v2/Leads
    method: GET
    data_selector: data
    params: {}
- name: contacts
  endpoint:
    path: /contacts/search
    method: POST
- name: users
  endpoint:
    path: /api/v1/users
    method: GET
    data_selector: data
    params: {}
- name: groups
  endpoint:
    path: /api/v1/groups
    method: GET
    data_selector: data
    params: {}
- name: users
  endpoint:
    path: /users
    method: GET
    data_selector: data
- name: groups
  endpoint:
    path: /groups
    method: GET
    data_selector: data
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: user
  endpoint:
    path: /v1/users
    method: GET
    data_selector: data
    params:
      incremental: updated_at
- name: group
  endpoint:
    path: /v1/groups
    method: GET
    data_selector: data
    params: {}
- name: files
  endpoint:
    path: /me/drive/root/children
    method: GET
    data_selector: value
- name: contacts
  endpoint:
    path: /crm/v3/objects/contacts
    method: GET
    data_selector: properties
    params:
      properties: email,phone
- name: users
  endpoint:
    path: /v1/users
    method: GET
    data_selector: users
- name: users
  endpoint:
    path: /v1/users
    method: GET
    data_selector: data
    params: {}
- name: groups
  endpoint:
    path: /v1/groups
    method: GET
    data_selector: data
    params: {}
- name: contact
  endpoint:
    path: /contacts
    method: GET
    data_selector: data
- name: users
  endpoint:
    path: /api/v1/users
    method: GET
    data_selector: data
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: users
  endpoint:
    path: /api/v1/users
    method: GET
    data_selector: data
    params: {}
- name: groups
  endpoint:
    path: /api/v1/groups
    method: GET
    data_selector: data
    params: {}
- name: contacts
  endpoint:
    path: /v2/contacts
    method: GET
    data_selector: data
- name: deals
  endpoint:
    path: /v2/deals
    method: GET
    data_selector: data
- name: users
  endpoint:
    path: /api/v1/users
    method: GET
    data_selector: users
    params:
      incremental: updated_at
- name: groups
  endpoint:
    path: /api/v1/groups
    method: GET
    data_selector: groups
    params: {}
- name: whoami
  endpoint:
    path: /whoami
    method: GET
- name: single_article
  endpoint:
    path: /single-article
    method: GET
- name: contact
  endpoint:
    path: /contact
    method: POST
- name: contact_delete
  endpoint:
    path: /contact
    method: DELETE
- name: conversations
  endpoint:
    path: /conversations
    method: GET
- name: conversation_messages
  endpoint:
    path: /conversation-messages
    method: GET
- name: contacts
  endpoint:
    path: /contacts
    method: GET
- name: articles
  endpoint:
    path: /articles
    method: GET
- name: users
  endpoint:
    path: /users
    method: GET
- name: users
  endpoint:
    path: /v1/users
    method: GET
    data_selector: data
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: users
  endpoint:
    path: /v1/users
    method: GET
    data_selector: data
- name: groups
  endpoint:
    path: /v1/groups
    method: GET
    data_selector: data
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: users
  endpoint:
    path: /v1/users
    method: GET
    data_selector: users
    params: {}
- name: groups
  endpoint:
    path: /v1/groups
    method: GET
    data_selector: groups
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: users
  endpoint:
    path: /users
    method: GET
    data_selector: data
- name: groups
  endpoint:
    path: /groups
    method: GET
    data_selector: data
- name: files
  endpoint:
    path: /me/drive/root/children
    method: GET
    data_selector: value
    params: {}
- name: users
  endpoint:
    path: /v1/users
    method: GET
    data_selector: data
- name: files
  endpoint:
    path: /me/drive/root/children
    method: GET
    data_selector: value
- name: shared_items
  endpoint:
    path: /me/drive/sharedWithMe
    method: GET
    data_selector: value
- name: users
  endpoint:
    path: /users
    method: GET
    data_selector: data
    params: {}
- name: users
  endpoint:
    path: /api/v1/users
    method: GET
    data_selector: users
- name: teams
  endpoint:
    path: /teams-list
    method: GET
- name: users
  endpoint:
    path: /users
    method: GET
- name: create_user
  endpoint:
    path: /users
    method: POST
- name: delete_user
  endpoint:
    path: /users
    method: DELETE
- name: users
  endpoint:
    path: /v1/users
    method: GET
    data_selector: data
- name: groups
  endpoint:
    path: /v1/groups
    method: GET
    data_selector: data
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: users
  endpoint:
    path: /v1/users
    method: GET
    data_selector: data
- name: groups
  endpoint:
    path: /v1/groups
    method: GET
    data_selector: data
- name: users
  endpoint:
    path: /users
    method: GET
    data_selector: data
- name: groups
  endpoint:
    path: /groups
    method: GET
    data_selector: data
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: users
  endpoint:
    path: /v1/users
    method: GET
    data_selector: data
- name: files
  endpoint:
    path: /me/drive/root/children
    method: GET
    data_selector: value
- name: users
  endpoint:
    path: /api/v1/users
    method: GET
    data_selector: data
    params: {}
- name: groups
  endpoint:
    path: /api/v1/groups
    method: GET
    data_selector: data
    params: {}
- name: users
  endpoint:
    path: /v1/users
    method: GET
    data_selector: users
    params: {}
- name: groups
  endpoint:
    path: /v1/groups
    method: GET
    data_selector: groups
    params: {}
- name: users
  endpoint:
    path: /api/v1/users
    method: GET
    data_selector: users
- name: groups
  endpoint:
    path: /api/v1/groups
    method: GET
    data_selector: groups
- name: contacts
  endpoint:
    path: /crm/v2/contacts
    method: GET
    data_selector: data
    params: {}
- name: deals
  endpoint:
    path: /crm/v2/deals
    method: GET
    data_selector: data
    params: {}
- name: users
  endpoint:
    path: /v1/users
    method: GET
    data_selector: data
    params: {}
- name: groups
  endpoint:
    path: /v1/groups
    method: GET
    data_selector: data
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: users
  endpoint:
    path: /v1/users
    method: GET
    data_selector: users
- name: groups
  endpoint:
    path: /v1/groups
    method: GET
    data_selector: groups
- name: users
  endpoint:
    path: /v1/users
    method: GET
    data_selector: users
    params: {}
- name: user
  endpoint:
    path: /api/v1/users
    method: GET
    data_selector: users
    params: {}
- name: users
  endpoint:
    path: /scim/v2/Users
    method: GET
    data_selector: Resources
    params: {}
- name: employee
  endpoint:
    path: /v1/employees
    method: GET
    data_selector: employees
    params:
      incremental: updated_at
- name: users
  endpoint:
    path: /users
    method: POST
- name: users
  endpoint:
    path: /users
    method: DELETE
- name: users
  endpoint:
    path: /users
    method: GET
- name: users
  endpoint:
    path: /v1/users
    method: GET
    data_selector: data
    params: {}
- name: groups
  endpoint:
    path: /v1/groups
    method: GET
    data_selector: data
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: user
  endpoint:
    path: /v1/users
    method: GET
    data_selector: users
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
- name: list
  endpoint:
    path: /api/v1/lists
    method: GET
    data_selector: data
    params: {}
- name: profile
  endpoint:
    path: /api/v1/profiles
    method: GET
    data_selector: data
    params: {}
- name: users
  endpoint:
    path: /v1/users
    method: GET
    data_selector: users
- name: groups
  endpoint:
    path: /v1/groups
    method: GET
    data_selector: groups
- name: users
  endpoint:
    path: /api/v1/users
    method: GET
    data_selector: data
    params:
      incremental: updated_at
- name: files
  endpoint:
    path: /me/drive/root/children
    method: GET
    data_selector: value
- name: users
  endpoint:
    path: /v1/scim/Users
    method: GET
    data_selector: resources
    params:
      incremental: updatedAt
- name: tickets
  endpoint:
    path: /api/v2/tickets.json
    method: GET
    data_selector: tickets
    params: {}
- name: users
  endpoint:
    path: /api/v2/users.json
    method: GET
    data_selector: users
    params: {}
- name: conversations
  endpoint:
    path: /kustomer/conversations
    method: GET
- name: users
  endpoint:
    path: /api/v1/users
    method: GET
    data_selector: data
    params: {}
- name: groups
  endpoint:
    path: /api/v1/groups
    method: GET
    data_selector: data
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: users
  endpoint:
    path: /users
    method: GET
    data_selector: data
    params: {}
- name: groups
  endpoint:
    path: /groups
    method: GET
    data_selector: data
    params: {}
- name: users
  endpoint:
    path: /users
    method: GET
    data_selector: users
    params: {}
- name: meetings
  endpoint:
    path: /meetings
    method: GET
    data_selector: meetings
    params: {}
- name: users
  endpoint:
    path: /users
    method: POST
- name: users
  endpoint:
    path: /users
    method: DELETE
- name: users
  endpoint:
    path: /users
    method: GET
- name: users
  endpoint:
    path: /users
    method: GET
    data_selector: users
    params: {}
- name: groups
  endpoint:
    path: /groups
    method: GET
    data_selector: groups
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: users
  endpoint:
    path: /v1/users
    method: GET
    data_selector: data
    params: {}
- name: groups
  endpoint:
    path: /v1/groups
    method: GET
    data_selector: data
    params: {}
- name: users
  endpoint:
    path: /users
    method: GET
- name: users
  endpoint:
    path: /v1/users
    method: GET
    data_selector: data
    params: {}
- name: users
  endpoint:
    path: /users
    method: GET
    data_selector: data
    params: {}
- name: groups
  endpoint:
    path: /groups
    method: GET
    data_selector: data
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: applications
  endpoint:
    path: /applications
    method: GET
- name: archived_reasons
  endpoint:
    path: /archived/reasons
    method: GET
- name: notes
  endpoint:
    path: /notes
    method: GET
- name: offers
  endpoint:
    path: /offers
    method: GET
- name: opportunities
  endpoint:
    path: /opportunities
    method: GET
- name: postings
  endpoint:
    path: /postings
    method: GET
- name: users
  endpoint:
    path: /users
    method: GET
- name: users
  endpoint:
    path: /api/v1/users
    method: GET
    data_selector: data
- name: groups
  endpoint:
    path: /api/v1/groups
    method: GET
    data_selector: data
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
- name: applications
  endpoint:
    path: /applications
    method: GET
- name: archived_reasons
  endpoint:
    path: /archived/reasons
    method: GET
- name: notes
  endpoint:
    path: /notes
    method: GET
- name: offers
  endpoint:
    path: /offers
    method: GET
- name: opportunities
  endpoint:
    path: /opportunities
    method: GET
- name: postings
  endpoint:
    path: /postings
    method: GET
- name: users
  endpoint:
    path: /users
    method: GET
- name: users
  endpoint:
    path: /v1/users
    method: GET
    data_selector: data
    params: {}
- name: drive_items
  endpoint:
    path: /me/drive/root/children
    method: GET
    data_selector: value
    params:
      incremental: lastModifiedDateTime
- name: applications
  endpoint:
    path: /applications
    method: GET
- name: archived_reasons
  endpoint:
    path: /archived/reasons
    method: GET
- name: notes
  endpoint:
    path: /notes
    method: GET
- name: offers
  endpoint:
    path: /offers
    method: GET
- name: opportunities
  endpoint:
    path: /opportunities
    method: GET
- name: postings
  endpoint:
    path: /postings
    method: GET
- name: users
  endpoint:
    path: /users
    method: GET
- name: users
  endpoint:
    path: /v1/users
    method: GET
    data_selector: data
    params:
      incremental: updated_at
- name: vaults
  endpoint:
    path: /v1/vaults
    method: GET
    data_selector: data
    params: {}
- name: files
  endpoint:
    path: /me/drive/root/children
    method: GET
    data_selector: value
    params: {}
- name: shared_files
  endpoint:
    path: /me/drive/sharedWithMe
    method: GET
    data_selector: value
    params: {}
- name: applications
  endpoint:
    path: /applications
    method: GET
- name: archived_reasons
  endpoint:
    path: /archived/reasons
    method: GET
- name: notes
  endpoint:
    path: /notes
    method: GET
- name: offers
  endpoint:
    path: /offers
    method: GET
- name: opportunities
  endpoint:
    path: /opportunities
    method: GET
- name: postings
  endpoint:
    path: /postings
    method: GET
- name: users
  endpoint:
    path: /users
    method: GET
- name: users
  endpoint:
    path: /api/v1/users
    method: GET
    data_selector: users
    params: {}
- name: groups
  endpoint:
    path: /api/v1/groups
    method: GET
    data_selector: groups
    params: {}
- name: contacts
  endpoint:
    path: /crm/v2/Contacts
    method: GET
    data_selector: data
    params: {}
- name: deals
  endpoint:
    path: /crm/v2/Deals
    method: GET
    data_selector: data
    params: {}
- name: issues
  endpoint:
    path: /proxy/graphql
    method: POST
    data_selector: nodes
    params: {}
- name: users
  endpoint:
    path: /v1/users
    method: GET
    data_selector: data
    params: {}
- name: groups
  endpoint:
    path: /v1/groups
    method: GET
    data_selector: data
    params: {}
- name: trigger
  endpoint:
    path: /triggers
    method: GET
    data_selector: data
- name: action
  endpoint:
    path: /actions
    method: GET
    data_selector: data
- name: users
  endpoint:
    path: /api/v1/users
    method: GET
    data_selector: users
    params: {}
- name: groups
  endpoint:
    path: /api/v1/groups
    method: GET
    data_selector: groups
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: users
  endpoint:
    path: /v1/users
    method: GET
    data_selector: data
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: user
  endpoint:
    path: /api/v1/users
    method: GET
    data_selector: users
    params:
      incremental: updated_at
- name: group
  endpoint:
    path: /api/v1/groups
    method: GET
    data_selector: groups
    params: {}
- name: users
  endpoint:
    path: /v1/users
    method: GET
    data_selector: data
- name: groups
  endpoint:
    path: /v1/groups
    method: GET
    data_selector: data
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
- name: users
  endpoint:
    path: /scim/v2/Users
    method: GET
    data_selector: Resources
- name: groups
  endpoint:
    path: /scim/v2/Groups
    method: GET
    data_selector: Resources
- name: users
  endpoint:
    path: /v1/users
    method: GET
    data_selector: users
- name: groups
  endpoint:
    path: /v1/groups
    method: GET
    data_selector: groups
- name: users
  endpoint:
    path: /users
    method: GET
    data_selector: users
    params: {}
- name: meetings
  endpoint:
    path: /meetings
    method: GET
    data_selector: meetings
    params: {}
- name: list_events
  endpoint:
    path: /luma/list-events
    method: GET
- name: users
  endpoint:
    path: /v1/users
    method: GET
    data_selector: data
    params:
      incremental: updated_at
- name: files
  endpoint:
    path: /me/drive/root/children
    method: GET
    data_selector: value
- name: users
  endpoint:
    path: /users
    method: GET
    data_selector: data
- name: contacts
  endpoint:
    path: /contacts
    method: GET
    data_selector: data
    params: {}
- name: companies
  endpoint:
    path: /companies
    method: GET
    data_selector: data
    params: {}
- name: users
  endpoint:
    path: /v1/users
    method: GET
    data_selector: data
    params: {}
- name: groups
  endpoint:
    path: /v1/groups
    method: GET
    data_selector: data
    params: {}
- name: users
  endpoint:
    path: /v1/users
    method: GET
    data_selector: data
    params: {}
- name: groups
  endpoint:
    path: /v1/groups
    method: GET
    data_selector: data
    params: {}
- name: users
  endpoint:
    path: /users
    method: GET
    data_selector: users
    params: {}
- name: meetings
  endpoint:
    path: /meetings
    method: GET
    data_selector: meetings
    params:
      incremental: start_time
- name: users
  endpoint:
    path: /v1/users
    method: GET
    data_selector: data
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: users
  endpoint:
    path: /v1/users
    method: GET
    data_selector: data
- name: groups
  endpoint:
    path: /v1/groups
    method: GET
    data_selector: data
- name: users
  endpoint:
    path: /users
    method: GET
    data_selector: users
    params: {}
- name: meetings
  endpoint:
    path: /meetings
    method: GET
    data_selector: meetings
    params: {}
- name: contacts
  endpoint:
    path: /api/v1/contacts
    method: GET
    data_selector: data
- name: products
  endpoint:
    path: /api/v1/products
    method: GET
    data_selector: data
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: users
  endpoint:
    path: /api/v1/users
    method: GET
    data_selector: users
    params: {}
- name: contacts
  endpoint:
    path: /contacts
    method: GET
    data_selector: results
- name: companies
  endpoint:
    path: /companies
    method: GET
    data_selector: results
- name: users
  endpoint:
    path: /users
    method: GET
- name: users
  endpoint:
    path: /v1/users
    method: GET
    data_selector: users
- name: groups
  endpoint:
    path: /v1/groups
    method: GET
    data_selector: groups
- name: users
  endpoint:
    path: /users
    method: GET
    data_selector: users
- name: meetings
  endpoint:
    path: /meetings
    method: GET
    data_selector: meetings
- name: users
  endpoint:
    path: /v1/users
    method: GET
    data_selector: data
    params: {}
- name: groups
  endpoint:
    path: /v1/groups
    method: GET
    data_selector: data
    params: {}
- name: contacts
  endpoint:
    path: /crm/v2/Contacts
    method: GET
    data_selector: data
- name: deals
  endpoint:
    path: /crm/v2/Deals
    method: GET
    data_selector: data
- name: users
  endpoint:
    path: /api/v1/users
    method: GET
    data_selector: data
    params: {}
- name: groups
  endpoint:
    path: /api/v1/groups
    method: GET
    data_selector: data
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
notes:
- Uses OAuth2 with refresh token — requires setup of connected app in api
- Requires OAuth2 client setup in 1Password.
- Pagination is handled via page numbers.
- Access requires appropriate permissions to be granted for the application.
- Integration scripts now use TypeScript for configuration, colocated with your script
  code.
- Nango can now act as a remote MCP server, exposing third-party API actions as tools
  for your AI agents.
- Nango now validates input fields through formatting checks and live API requests,
  minimizing misconfigurations.
- Nango now periodically detects invalid API keys and basic credentials in addition
  to expired OAuth tokens.
- Requires 1Password account with SCIM enabled
- Some objects like Contact may return nulls in deeply nested fields
- Users see a scary 'this app is unverified' step during the OAuth flow
- Only 100 users may authorize your app in total. You cannot reset this counter or
  remove test users.
- OAuth tokens always expire after 7 days, forcing users to re-authorize
- Uses OAuth2 with refresh token — requires setup of connected app in 1Password
- Check for required scopes when configuring the application
- Requires setup of 1Password SCIM integration.
- '1Password SCIM uses API_KEY authentication with Authorization: Bearer API_KEY in
  the request header.'
- SCIM-based provisioning can take time to sync across all users. Ensure you handle
  pagination properly when fetching user lists.
- 1Password SCIM requires an active SCIM Bridge deployment to function correctly.
- Ensure your API token has the necessary permissions.
- Requires setting up an OAuth application in 1Password.
- Acuity uses OAuth for authentication. Ensure you have the correct client ID and
  secret.
- Acuity Scheduling enforces a general rate limit of 10 requests a second and 20 concurrent
  connections from an IP.
- Requires setup of SCIM in 1Password.
- 'ActiveCampaign uses API_KEY auth_mode with `Api-Token: API_KEY` in the request
  header to access different endpoints.'
- ActiveCampaign enforces a default rate limit of 5 requests per second per account.
- Requires API key setup in 1Password account.
- Ensure to set up the application in Zoom App Marketplace correctly to get credentials.
- If the service you are trying to integrate allows `offline_access`, then you will
  be able to get refresh token if you add this in the scopes.
- UMAPI enforces API rate limiting, please refer to the Throttling section of each
  API to determine its limitations.
- Requires app registration in Xero Developer portal
- UMAPI is only available to the enterprise plan.
- Requires admin access to 1Password account
- Some users may not have all fields populated
- No setup guide yet.
- Requires SCIM endpoint setup in 1Password
- Users and groups are managed through this API
- Ensure to configure the 1Password SCIM bridge correctly.
- Rate limits apply, check the documentation for more details.
- Pagination is not supported
- Rate limits may apply based on the account tier
- Requires the user to have permissions to access the API.
- Rate limits apply to API usage.
- Requires setup of OAuth2 in the 1Password admin console.
- Some endpoints may have rate limits.
- Requires OAuth2 setup for API access
- Be aware of rate limits on API calls
- Affinity gives you only an `API Key` but uses Basic auth for the API. Pass the `API
  Key` as the password to Nango and leave the username blank.
- The Affinity API is only for Premium and Enterprise tier customers, and for Professional
  tier customers who signed up for Affinity before July 5, 2023.
- Currently, Affinity supports one key per user on your team.
- There is a limit of three webhook subscriptions per Affinity instance.
- Requires initial setup of an API token in 1Password.
- Requires API key to be set up in 1Password
- Requires admin consent for certain permissions
- Requires setup of API key in 1Password
- Some endpoints may have rate limits
- Zoom API requires an app to be created in the Zoom App Marketplace.
- Ensure to follow the API rate limits outlined in the documentation.
- 'Airtable (Personal Access Token) uses API_KEY auth mode with authorization: Bearer
  API_KEY in the request header to access different endpoints.'
- Requires API token for access. Ensure token is valid.
- Integration requires permissions for accessing OneDrive files.
- 'Algolia uses API_KEY auth mode with X-Algolia-API-Key: API_KEY and X-Algolia-Application-Id:
  APP_ID in the request header to access different endpoints.'
- Requires setup of OAuth2 with 1Password
- Make sure to check API limits
- Requires OAuth2 setup for application
- Requires setup of OAuth application in 1Password.
- The beta version is an application still in draft status.
- Requires the setup of a 1Password SCIM integration.
- For Basic auth, Amplitude uses the API Key as username and Secret Key as password.
- Requires API token with appropriate scopes
- Rate limiting may apply
- Requires setup of API access in 1Password admin panel.
- 'Anthropic uses API_KEY auth mode with `x-api-key: API_KEY` in the request header
  to access different endpoints.'
- Requires setup of API token in the 1Password app
- Admin keys (starting with sk-ant-admin) are specifically for administrative tasks
  like managing organization members, workspaces, and API keys
- Ensure API key has the correct permissions
- Rate limits apply to API calls
- Requires API key setup in 1Password.
- Requires Okta setup and proper permissions.
- 'Apollo uses API_KEY auth mode with x-api-key: API_KEY in the request header to
  access various endpoints.'
- Requires specific permissions for accessing user data
- Requires setup of an Okta application for API access
- Rate limits apply based on the Okta plan
- 'OAuth Redirect URL: Use https://api.nango.dev/oauth/callback for the redirect URL.'
- Apollo adds read_user_profile and app_scopes by default.
- 1Password SCIM API requires a valid OAuth token for access
- After creating an API key, you will obtain `Private Key ID` and `Private Key`. The
  latter should be base64 encoded when passing to the auth call
- Ensure the OAuth app is properly configured in 1Password
- Requires setup of OAuth credentials in Zoom App Marketplace
- Requires specific scopes for accessing user data
- Requires user consent for accessing files.
- Rate limits apply on API calls.
- Requires API key and OAuth configuration.
- Requires permission setup for OneDrive API access
- If you are getting `The required parameter client_id is missing or invalid`, you
  will most likely need to go to Developer Console -> Your app -> Manage distribution
  -> Change from “Specific workspaces” to “Any workspace”
- In order to use `asana-scim` you need to generate a service account in Asana
- Requires setup of OAuth2 client in 1Password.
- Rate limits apply for API calls.
- Requires Azure app registration for authentication
- Authorize Ashby with API key
- Rate limits apply to API calls.
- Ensure that the client ID and secret are stored securely.
- 'Atlas.so uses API_KEY auth mode with `Authorization: Bearer ''{API_KEY}''` in the
  request header to access different endpoints.'
- Ensure to set up the SCIM integration in your 1Password account.
- To allow the possibility of refreshing the token, you must add `offline_access`
  to your scopes when creating the integration on the Nango UI.
- Refresh tokens will expire after 365 days of non use and will expire by 90 days
  if the resource owner is inactive for 90 days.
- Requires setup of 1Password SCIM in account settings.
- Requires a valid OAuth2 client setup in 1Password.
- API requires valid OAuth token for access
- Rate limits apply to API requests
- Requires OAuth2 authentication with refresh token.
- Ensure correct scopes are provided during the OAuth setup.
- To get refresh_token, you will need to add offline_access to the list of your scopes.
- Requires setup of SCIM integration in 1Password
- Ensure the correct scopes are set for the API access.
- Autodesk enforces different rate limits for different service or endpoints within
  a service.
- Some objects may return nulls in deeply nested fields
- AutoTask requires a zone-specific subdomain for API access
- The API Integration Code is used for tracking and must be included in headers
- API rate limits apply and vary by account type
- Requires setup of API in 1Password account
- Rate limits apply
- Avalara uses BASIC auth mode to access various AvaTax API endpoints. You can provide
  either a combination of your `username` and `password` or your `accountID` and `licensekey`
  to authenticate with the Avalara AvaTax API.
- Requires an OAuth2 setup with 1Password.
- Ensure proper OAuth setup to avoid unauthorized access
- Rate limits may apply; check response headers for limits
- Requires a valid 1Password account and proper permissions
- API rate limits may apply
- AWS uses different domain extensions codes for different regions.
- To create a new connection in Nango for AWS IAM, you’ll need an Access Key ID and
  a Secret Access Key.
- Requires setup of OAuth2 client in 1Password
- Ensure scopes are set correctly for data access
- Requires proper permissions for accessing files in OneDrive.
- You need to configure an External Identity Provider in IAM Identity Center and set
  up SAML to be able to use SCIM
- 'AWS (SCIM) uses API_KEY auth mode with Authorization: Bearer ${apiKey} in the request
  header to access different endpoints.'
- Ensure the API key is kept secure.
- 'Avoma uses API_KEY auth mode with `Authorization: Bearer ${apiKey}` in the request
  header to access different endpoints.'
- Requires setup of API keys in the 1Password admin console
- Make sure you request the `offline_access` scope to get a refresh token and keep
  access with your integration.
- Requires setting up OAuth2 in 1Password
- Ensure scopes are correctly configured for access
- Personal Access Tokens (PATs) have a maximum lifetime of 1 year
- Rate limiting is applied based on multiple factors including type of request and
  load on the service
- Some APIs require specific scopes in the PAT to access
- Organization-level APIs require organization-level PATs
- BambooHR gives only an API Key but uses Basic auth for the API. Pass the API Key
  as the username and use x for the password.
- Requires setup of 1Password SCIM bridge.
- Uses OAuth2 with refresh token — requires setup of app in Zoom Developer Portal
- BambooHR gives only an API Key but uses Basic auth for the API.
- Ensure proper permissions are set for API access
- Ensure to have the correct scopes for token generation.
- 'When creating a new connection in Nango, you will need to add the `appDetails`
  configuration parameter in the format `MyApp (yourname@example.com)`, which will
  be appended to the request as a header: `User-Agent: MyApp (yourname@example.com)`.'
- Requires an API key obtained from the 1Password admin console.
- Ensure OAuth credentials are correctly configured in Workday
- Tokens cannot be refreshed, hence when the token expires, resource owners will have
  to go through the authorize flow again.
- OAuth2 authentication with refresh token support.
- Ensure proper API scopes are granted.
- Requires user consent for permissions
- 'Beehiiv uses API_KEY auth mode with Authorization: Bearer ${apiKey} in the request
  header to access different endpoints.'
- After creating a new connection on Nango, you will need to rewrite your HTTP request
  headers to use the X-Auth-Token header to pass the API account’s access_token instead
  of the Authorization header.
- Some API responses may include sensitive information
- If you would like to set up a sandbox API environment, one can sign up here.
- 'When creating a new connection in Nango, please provide the following: Username,
  Password, Organization ID, and Developer key.'
- Requires setup of SCIM in 1Password admin console
- Requires a valid ZoomInfo account and appropriate permissions
- Rate limits may apply based on the subscription plan
- 'If you would like to set up a sandbox API environment, one can sign up here: https://www-test.bill.com/signup?env=stage.'
- 'Please provide the following: Username (the email address used to sign in to your
  BILL developer account), Password (used to sign in to your BILL developer account),
  Organization ID (a unique alphanumeric value beginning with 008 that represents
  your organization), and Developer key (provided by the team and used to identify
  your developer account in API requests).'
- Requires an API key for authentication.
- Requires user authentication to access personal account data
- Access tokens expire after every 2 hours, you can use `nango.getConnection()` to
  generate a new set of tokens.
- Uses OAuth2 authorization code flow — requires user interaction
- Bitdefender uses Basic auth mode to access different endpoints. Provide your API
  key as the Username value and leave the password field empty.
- Bitdefender enforces different rate limits for different API endpoints and methods.
- Requires configuration of OAuth settings in 1Password.
- Rate limits may apply.
- Ensure the app has permissions to read files.
- You might need your group guid for certain API calls.
- For security purposes, access tokens will expire after 60 minutes, when this happens
  you can use `nango.getConnection()` to generate a new set of tokens.
- Requires setup of integration in 1Password Admin Console.
- Requires OAuth2 configuration in Zoho to access data
- You can authenticate API requests using either a username & password from your Infinity
  login credentials or by creating a username & PAT for a proxy user.
- API supports SCIM specification for managing user identities
- You will be able to get refresh tokens only if you add `offline_access` in the list
  of scopes.
- Requires API key for authentication
- Booking.com uses Basic auth mode to access different endpoints. Use your machine
  account username as the username value and the password provided by Booking.com
  as the password value.
- API rate limits apply — check documentation for details.
- Uses OAuth2 with authorization code flow.
- Ensure the client app is set up in Okta.
- Requires an enterprise account to create or delete users.
- Requires OAuth2 setup through 1Password's developer portal.
- Rate limiting may apply.
- Requires OAuth2 setup in 1Password.
- Ensure correct OAuth scopes are set for user and group access.
- Requires setup of OAuth app in Zoom
- 'Braze uses the API_KEY auth_mode with `Authorization: Bearer API_KEY` as a request
  header to access different endpoints.'
- Braze enforces a default rate limit of 250,000 requests per hour.
- Some objects may have rate limits on API calls
- Pre-built authorization using API Key is available.
- Requires a 1Password account with SCIM enabled.
- Include the scope `offline_access` to get a refresh token (access tokens expire
  after 1h).
- Refresh tokens expire after 90 days of non use. Make sure you regularly make an
  API request as long as you need the connection.
- Requires an API key and OAuth2 setup.
- Rate limit applies to API calls.
- Requires an API token from 1Password account settings
- Uses OAuth2 with refresh token — requires setup of 1Password app
- Some APIs may have rate limits
- Different auth scopes are required for different requests.
- Requires setup of API tokens and permissions in 1Password.
- Builder.io has two different sets of API keys for its various APIs. For the content
  API, a public API key is required, while the write API requires a private API key.
- Supports pagination for large datasets
- Requires specific permissions set in your 1Password account
- Rate limited to 100 requests per minute
- 'Buildium uses API_KEY auth mode with x-buildium-client-id: ClientSecret and x-buildium-client-secret:
  ApiKey in the request header to access different endpoints.'
- Buildium enforces a general rate limit of 10 concurrent requests per second.
- Requires OAuth2 setup in 1Password
- Pagination is based on cursor
- Requires an active 1Password account and SCIM provisioning enabled
- 'Cal.com offers two versions of their API: the legacy version V1 and the latest
  V2, each with different methods for passing the API key.'
- API limits requests to 100 per minute
- Ensure the OAuth application is properly set up in Zendesk.
- Requires a valid OAuth2 token for API access.
- API rate limits apply to requests.
- Ensure proper scopes are set for OAuth tokens.
- Only HTTPs redirect will work when your app is in production.
- Users may have limited access based on roles.
- Some fields may require additional permissions to view.
- For 3rd party integrators, Callrail suggests identifying your integration.
- Requires API Key for initial authentication
- Rate limits apply per user
- Uses OAuth2 with refresh token — requires setup of app in Zoom Developer portal
- Canny’s API docs only mention POST requests, but the APIs endpoints also accept
  GET requests.
- For GET requests, the API accepts any piece of body data as a URL param.
- Ensure to set up the correct scopes in the 1Password developer console.
- Local development requires using 127.0.0.1 instead of localhost for the redirect
  URL in the integration settings
- For webhook notifications, you must enable the collaboration:event scope
- 1Password SCIM API requires a valid token for all requests.
- Only team administrators and owners of Canva for Teams or Canva for Education have
  access to generate a SCIM access token.
- Ensure that the API key has the necessary permissions.
- Ensure correct permissions are granted for accessing OneDrive resources.
- Requires setup of OAuth app in 1Password
- API rate limits apply
- Check API rate limits for the Zapier account.
- Some endpoints may return paginated results
- Chargebee uses Basic auth to access different endpoints. Provide your API key as
  the Username value and leave the password field empty.
- 'Rate limiting: APIs are rate limited in both test and live sites. Upon breaching
  the rate limit APIs respond with 429.'
- Requires API token with read access to users and groups.
- 'Chattermill uses API_KEY auth mode with `Authorization: Bearer apiKey` in the request
  header to access different endpoints.'
- Requires proper OAuth2 setup in 1Password admin panel.
- Rate limiting applies to API requests.
- To get started, Check needs to be contacted to get a sandbox API key and a production
  API key.
- Ensure you have the right API token and permissions set in your 1Password account.
- Requires setup of OAuth2 application in Zendesk
- Rate limits apply based on the plan
- Checkout.com offers client credentials token that authorizes as app instead of a
  user.
- 1Password SCIM API requires proper setup of the application.
- Uses OAuth2 with refresh token — requires setup of Zoom app in Developer Portal
- Requires an active 1Password account and API access.
- The access_token generated are long lived, until revoked and don’t need to be refreshed.
- Checkr requires partners to comply with a quick integration review so as to make
  the integration production ready.
- API responds with different structures based on the endpoint.
- Requires Zoom account with API access
- 'Chorus uses API_KEY auth mode with Authorization: Bearer ${apiKey} in the request
  header to access different endpoints.'
- API tokens can be generated for each Chorus user, and is managed via the Personal
  Settings page within the Chorus application.
- Requires setting up OAuth2 application in 1Password.
- User and group data can be fetched through respective endpoints.
- Requires setup of application in Xero Developer portal
- 'Circle.so uses API_KEY auth mode where Authorization: Token APIkey is passed to
  the request header for Authentication.'
- Ensure to have a valid token before making requests.
- Clari Copilot uses API_KEY auth mode where X-Api-Key:API key and X-Api-Password:API
  Secret are passed to the request header for Authentication.
- ClickSend uses BASIC auth where the Username is your account username, and the Password
  is your API key.
- Requires user access to the 1Password SCIM API.
- Ensure that the API token has the necessary permissions.
- ClickUp does not use scopes in their OAuth implementation, so you can leave the
  scope field empty when configuring your integration.
- Ensure proper OAuth setup for access.
- Limited rate limiting applies.
- Clerk uses different key prefixes for different environments. Use sk_test_ keys
  for development and sk_live_ keys for production.
- Clerk implements rate limiting based on your subscription plan. Free tier includes
  10,000 monthly active users and standard rate limits.
- Ensure that the 1Password SCIM API is enabled in your 1Password account.
- Ensure OAuth scopes are correctly set.
- You can leave the scopes empty as scopes are not required during authorization.
- Requires setup of OAuth in 1Password
- Rate limits apply to API usage
- Requires setup of OAuth2 in 1Password.
- API rate limits may apply.
- Ensure that scopes are properly set for the application in Okta.
- 'Coda uses API_KEY auth mode with Authorization: Bearer api_token in the request
  header to access different endpoints.'
- Requires an active 1Password account with SCIM enabled.
- Ensure that the OAuth client is set up correctly in 1Password.
- Requires Microsoft account to access OneDrive
- Ensure permissions are set for API access
- 'CodeClimate uses API_KEY auth mode with `Authorization: Token token=token` in the
  request header to access different endpoints.'
- CodeClimate enforces a general rate limit of 5,000 requests per token per hour.
- Requires admin access to retrieve user data
- 'Codegen uses API_KEY auth mode with `authorization: Bearer API_KEY` in the request
  header to access different endpoints.'
- Ensure you specify the correct scope (e.g., manage_project:your-project-key) when
  generating the OAuth token. Without the correct scope, API requests will fail.
- Access tokens expire after 2 days (172800 seconds). Make sure to refresh the token
  before it expires.
- Use the correct region-specific endpoint (e.g., auth.us.commercetools.com for the
  US region) when making API requests.
- Requires a valid 1Password account and API key
- Ensure proper scopes are set for OAuth
- 'This integration uses API_KEY auth mode with `Authorization: Bearer {API_KEY}`
  in the request header to access different endpoints.'
- The API_KEY based auth mode should be enough for company-wide access.
- CompanyCam also supports OAUTH2 auth mode which is not supported by this integration,
  because access is granted on a case-by-case basis by CompanyCam.
- Ensure you have the correct scopes set for the OAuth token.
- Pagination is not supported for some endpoints.
- Uses OAuth2 with refresh token — requires setup of Zoom App in developer portal
- When creating an OAuth 2.0 (3LO) app, it’s private by default.
- Requires setup of API key in 1Password account settings
- Workday API supports incremental loading based on last_updated field.
- Basic authentication requires your Atlassian account email and an API token. Never
  use your account password.
- Because Confluence permits anonymous access by default, it does not supply a typical
  authentication challenge. Some HTTP clients may behave unexpectedly.
- When making API calls, remember that the permissions of your Atlassian account will
  limit what you can access, regardless of the authentication method.
- The Confluence REST API has different versions. Make sure you’re using the correct
  version for your needs.
- Your API token is sensitive information - keep it secure and never share it.
- Basic authentication is recommended for scripts and manual API calls. For production
  applications, consider using OAuth 2.0 instead.
- Ensure API key is valid for successful data retrieval.
- Requires API token with appropriate scopes.
- ConnectWise PSA uses BASIC authentication. The username will always begin with the
  CompanyId followed by either the public key, integrator username, or MemberId. The
  password will be the private key, integrator password, or member hash.
- When creating a new connection on Nango, you will need to include the apiVersion
  in the format 2019.1.
- You will also need to provide the subdomain in the format api-{region}, with the
  region being specified.
- Additionally, you will be required to enter the clientId, which can be found at
  ClientID.
- OAuth2 with refresh token is required for access.
- Ensure the necessary permissions are granted for all endpoints.
- Requires setup of OAuth credentials in 1Password.
- Contentful also supports the authorization code flow as well.
- Contentful requires specific subdomain for the various API type this will comprise
  of the API type and region.
- Ensure to have appropriate scopes set for the OAuth2 token.
- Requires OAuth2 setup in 1Password admin console
- Copper offers both OAuth and API_KEY authentication modes. To use OAuth2.0 with
  Copper, you must first register your application.
- Requires an active 1Password account and proper API access permissions.
- OAuth2 with refresh token is required for authentication.
- Requires setup in 1Password for OAuth2 integration
- API limits apply to requests
- Ensure to set proper scopes while configuring OAuth.
- Rate limits may apply depending on the API usage.
- The Coros API documentation is private, so use the Register Application link above
  to get access, and the Coros team will share them with you.
- Coros does not list any Oauth scopes in their documentation.
- The Coros sandbox is their test environment set up for developers. Set up separate
  Nango integrations for the sandbox and production accounts.
- Rate limits are enforced on the API.
- Rate limits are enforced, ensure to handle errors gracefully.
- Requires a 1Password account with SCIM provisioning enabled.
- OAuth2 is required for authentication.
- Each Coupa Compass customer has their own base url, of the form {instance_name}.coupahost.com.
- Requires appropriate scopes for user and group data access.
- Rate limit of 100 requests per minute.
- 'Cyberimpact uses API_KEY auth mode with authorization: Bearer API_KEY in the request
  header to access different endpoints.'
- Databricks provides authentication at both the workspace and account levels.
- Requires configuring API token in 1Password settings
- Requires setup of OAuth 2.0 for API access
- Limited to 200 users per request
- Uses OAuth2 with refresh token
- Ensure proper scopes are set for the OAuth application
- Requires OAuth2 authentication for all requests.
- An access_token is valid for 15 minutes, while the refresh_token is valid for 11
  hours.
- At present, only DATEV partners or DATEV Schnittstellenanbieter have access to DATEV
  Online APIs. Therefore, a DATEV partner manager will handle the application registration.
- Requires an API token generated from the admin console.
- Dayforce issues an HTTP redirect for every request to route it to the appropriate
  service. For high-volume integrations, you can avoid repeated redirects by making
  a REST request to /{companyId}/V1/ClientMetadata. Use the companyId from your connection
  configuration to retrieve the ServiceUri, and make subsequent API calls directly
  to that URI.
- Rate limits apply — be cautious of the number of requests.
- Requires setup of authorization server and client in Okta.
- Access tokens expire after 100 hours. You will need to re-authorize the connection.
  Nango also supports Datto RMM (Password Grant), which automatically refreshes access
  tokens when they expire.
- API key must be included in the Authorization header.
- Ensure to configure the 1Password API settings properly for access.
- Rate limits apply to API calls; manage frequency accordingly.
- Deel provides a separate environment for testing/sandbox and production.
- Requires setup of connected app in 1Password
- Requires API key for initial setup.
- 'Devin uses API_KEY auth mode with `authorization: Bearer API_KEY` in the request
  header to access different endpoints.'
- Some endpoints may return incomplete data in certain scenarios
- API requires OAuth2 authentication with specific scopes for access
- Rate limits apply based on the account type
- Ensure to set up proper OAuth scopes in the 1Password app.
- Dialpad enforces different rate limits for different endpoints.
- Requires setting up OAuth 2.0 in 1Password Admin Console
- Rate limits may apply based on the 1Password plan
- Rate limits are applied to API calls.
- Rate limits apply to the API usage.
- Ensure proper permissions are set for the client ID.
- Requires proper setup of API tokens and permissions in 1Password
- Requires a connected app in Zoho for OAuth2 authentication.
- Discourse uses API_KEY authentication mode with Api-Key and Api-Username in the
  request header.
- Requires setup of OAuth 2.0 in 1Password admin console.
- Ensure your app is registered in Azure AD to access OneDrive API.
- 'Dixa uses API_KEY auth mode with `Authorization: : API_KEY` in the request header
  to access different endpoints.'
- Ensure the token has the correct scopes for accessing user data.
- OAuth2 with refresh token required for authentication.
- 'Document360 uses API_KEY auth mode with `api_token: {API_KEY}` in the request header
  to access different endpoints.'
- Ensure to handle scopes correctly in OAuth
- Use the docusign-sandbox configuration in Nango to test your integration with the
  Docusign Developer account.
- Remember, the DocuSign integration key is actually the ‘client ID’. Also, you’ll
  need to add a ‘secret key’ when creating your app.
- Requires setup of OAuth application in 1Password
- Rate limits apply for API requests
- Ensure to use the correct scopes for the API client
- Rate limits may apply based on account type
- Uses OAuth2 with refresh token — requires setup of application in Zoho Developer
  Console
- Nango currently supports the Username & Password authentication flow.
- Some objects may have rate limits.
- Check API documentation for specific endpoint limitations.
- Rate limits are applied per account.
- Requires permissions for accessing files in OneDrive.
- Dropbox Sign requires production approval for apps using OAuth.
- Requires setup of OAuth2 integration in 1Password.
- Nango currently supports Drupal rest authentication using the Drupal REST & JSON
  API Authentication module.
- E-conomic enforces a rate limit of 50,000 API calls per 24 hour period per agreement.
- Ensure proper scopes are granted for API access
- App ID is Client ID and Cert ID is Client Secret
- For sandbox, use ebay-sandbox integration, for production use ebay integration
- 'Add a Redirect URL and set “Your auth accepted URL” to your Nango callback URL:
  Default: https://api.nango.dev/oauth/callback'
- Requires access to 1Password SCIM API.
- Rate limits apply to API requests.
- Ensure to set up the application in 1Password to get the client_id and client_secret.
- Requires OAuth2 setup in Workday.
- Currently Nango supports public applications via authorization code flow to generate
  an access token.
- Egnyte requires a user specific subdomain to run OAuth.
- Until you application has been approved for production use, it will only work on
  the subdomain registered in your application key’s profile.
- Ensure OAuth2 setup is correctly configured in 1Password.
- Some fields may be null or empty depending on user permissions.
- 'ElevenLabs uses API_KEY auth mode with xi-api-key: api_key in the request header
  to access different endpoints.'
- Requires setup of OAuth2 with 1Password.
- 'Elevio uses API_KEY auth mode with x-api-key: apiKey and Authorization: Bearer
  jwt in the request header to access different endpoints.'
- Requires setup of OAuth2 application in 1Password
- Ensure correct scopes are set for access
- Requires Azure app registration for OAuth setup
- API limits may affect large file operations
- Emarsys offers different APIs(Emarsys core, Loyalty V4 and SMS), currently Nango
  support Emarsys core API which offers WSSE over SSL authentication.
- 'The OAuth Token has a fetch rate limiting of per `client_id`: 2 requests per minute,
  10 requests per hour or per `customer_id`: 10,000 requests per day.'
- Requires setup of OAuth2 in 1Password
- When creating a new connection in Nango, use a combination of the `username` and
  `secret` that you received during onboarding. The `username` follows the format
  `account_name00X`, where X is a digit.
- The scopes used are the ones selected when creating a new application on the developer
  portal, so there is no need to supply scopes within Nango.
- Entrata uses Basic auth mode to access different endpoints. Provide your username
  as the Username value and password as the Password value generated through the Entrata
  platform.
- Ensure proper scopes are set for OAuth.
- Requires user consent for accessing files
- Throttling may occur on large requests
- Requires setup of 1Password SCIM integration in the admin panel
- The refresh token has a very aggressive time out of just a few hours - make API
  requests very frequently (to refresh it) or you will lose access!
- Requires a valid 1Password account with SCIM enabled.
- In your Nango connection config, you need to specify the EvaluAgent region that
  is being used.
- There are no OAuth scopes for this API.
- There are no mention of refresh tokens nor access token expiration in the API docs.
- Requires setup of an OAuth2 application in 1Password
- Ensure the correct scopes are requested during OAuth flow
- Ensure to manage API client permissions properly.
- Access Token refreshes are only possible in the last 30 seconds of the last one
  being valid, or of course when there is no valid Access Token anymore.
- Access Tokens stay valid for only 10 minutes.
- Uses OAuth2 with refresh token — requires setup of API key in 1Password
- Some fields may be nested within the response data
- The lifetime of an access token is an year
- Requires OAuth2 setup with 1Password
- Expensify in Nango uses Basic auth mode to access different endpoints. Provide your
  partnerUserID as the Username value and partnerUserSecret as the Password value.
- Every request has to be made against the same endpoint.
- Expensify enforces a general rate limit of 50 jobs started per minute.
- May have rate limits on user provisioning.
- Check permissions for accessing user and group data
- Uses OAuth2 with refresh token — requires setup of connected app in Workday
- 'There are essentially two scopes: read, write.'
- Requires setup of API access in 1Password Admin Console
- Ensure that your Zendesk account has API access enabled.
- 'fal.ai uses API_KEY auth mode with Authorization: Key `api_key` in the request
  header to access different endpoints.'
- 1Password SCIM API supports user and group management via OAuth2
- At the time of writing this guide, Fairing’s API is still in beta.
- Requires setting up an OAuth2 application in 1Password.
- API has rate limits.
- 1Password API has rate limits. Ensure you handle retries gracefully.
- The data returned may vary based on user permissions.
- Figjam enforces rate limits on a per authenticated user basis. Each user can only
  have one active access token at a time for your application and cannot request multiple
  tokens concurrently for the same user.
- Requires setup of API key in 1Password.
- Figma enforces rate limits on a per authenticated user basis. Each user can only
  have one active access token at a time for your application and cannot request multiple
  tokens concurrently for the same user.
- Requires a valid API token
- Rate limits apply on API calls
- 'Figma (SCIM) uses API_KEY auth mode with Authorization: Bearer ${apiKey} in the
  request header to access different endpoints.'
- Requires access to the 1Password SCIM API.
- Ensure that the API token has sufficient permissions.
- Requires valid OAuth2 credentials to access the API
- Rate limits apply based on the plan.
- 'Fireflies uses API_KEY auth mode with Authorization: Bearer API_KEY as a request
  header to access different endpoints.'
- Fireflies enforces both rate and upload limits for its endpoints based on the subscription
  plan.
- 1Password SCIM API requires a valid token for access.
- Ensure proper OAuth scopes are set for accessing resources
- Fiserv, supports different authentication methods for different products.
- When creating a new Fiserv connection in Nango, please provide your `API key` as
  your client Id and `API secret` as your client secret.
- OAuth2 flow with refresh token required for API access.
- Ensure correct scopes are granted for the token.
- Fiserv supports different authentication methods for different products.
- When creating a new Fiserv connection in Nango, please provide your API key as your
  client Id and API secret as your client secret.
- To obtain the Fiserv hostUrl, navigate to the API key section of your workspace.
- Requires API key for integration.
- Check for rate limits on API requests.
- Requires OAuth2 authentication setup.
- There does not seem to be any approval process, and you can immediately use your
  app.
- During the authorization flow, users need to manually select which scopes they grant
  to your application.
- Rate limits apply; check the API documentation for details.
- You need to specify the same `scope` on Nango’s side to be able to connect.
- Ensure to set up OAuth2 in your 1Password account settings.
- API may rate limit requests.
- Requires setup of OAuth2 connected app in Zoho
- Some API responses may have rate limits
- FreshBooks API endpoints are account-specific. The account ID is required for most
  API calls and is included in the URL path.
- Ensure you have the appropriate scopes for OAuth.
- For Basic Auth, Freshdesk uses API key as a username and dummy characters as a password.
- API calls are directed to your subdomain of Freshdesk.
- Requires proper setup of API keys in the 1Password vault.
- 'Freshsales uses API_KEY auth mode with `Authorization: Token token= API_KEY` as
  a request header.'
- Freshsales enforces rate limit on the account level.
- Ensure API key has the right permissions.
- Requires Microsoft Azure app registration.
- Token expiration may require refreshing.
- Some requests may require specific scopes
- Freshteam is not currently available for new customers, but support is still provided
  for existing customers.
- Freshteam enforces a rate limit per minute based on the organization’s plan and
  the number of subscribed employees, applying to the account regardless of the originating
  IP address.
- API supports incremental loading based on updated timestamps.
- Scopes are not required.
- Access tokens will expire after an hour.
- 'Float uses API_KEY auth mode with `Authorization: Bearer ${apiKey}` in the request
  header to access different endpoints.'
- To create or revoke your client credentials, log in to your Control environment,
  and navigate to `Integrations` > `API`.
- Requires configuration of OAuth2 settings in 1Password.
- API supports pagination through page parameter.
- API requests are subject to rate limits depending on your tier. To ensure uninterrupted
  service, monitor your usage closely and consider upgrading to a higher tier if necessary.
- Requires setup of API key in 1Password account settings.
- API may have rate limits.
- API rate limits apply — check your account settings
- Some endpoints may require additional permissions
- Ensure you specify the correct `scope` in the OAuth token request.
- The `Accept-Language` header must be provided if localization is required in API
  responses.
- 1Password SCIM API requires an API key and client secret.
- Ensure to handle pagination to retrieve all records.
- Requires user consent for certain permissions.
- 'Gem uses API_KEY auth mode with x-api-key: API_KEY and x-application-secret: Application
  Secret in the request header to access different endpoints.'
- By default, each API key is subject to a rate limit of 20 requests per second.
- Requires proper setup of OAuth2 credentials in 1Password.
- Rate limits may apply based on account type.
- Requires setup in Zoho Developer Console for app credentials
- Check API limits to avoid throttling
- Gerrit uses BASIC auth mode to access various API endpoints. Please use your username
  and password to authenticate.
- Requires configuration of SCIM features in 1Password
- Data may be rate-limited depending on account type
- Requires OAuth2 setup with Zoho
- Rate limits apply based on the API plan
- Both Admin and Content API keys can be obtained by creating a new Custom Integration
  under the Integrations screen in Ghost Admin.
- For Ghost Admin, the API Key should be in the format `id:secret`.
- API responses may include nested errors
- Requires proper Azure app registration for OAuth2.
- For Ghost Admin, the API Key should be in the format id:secret.
- Requires an API key for authentication
- Use your Client ID and Client Secret from the previous steps
- Authorization callback URL is https://api.nango.dev/oauth/callback
- Requires a valid API token for access.
- Rate limits apply to requests.
- Ensure to handle pagination correctly.
- Uses OAuth2 with refresh token — requires setup of GitHub App
- The Callback URL needs to be filled in with the callback URL which unless customized
  will be https://api.nango.dev/oauth/callback.
- The API is rate-limited, so avoid excessive calls.
- 'GitHub provides two types of tokens for authentication: Classic Personal Access
  Tokens (PATs) and Fine-Grained Personal Access Tokens.'
- GitHub recommends using Fine-grained PATs whenever possible.
- Users must have appropriate permissions to access SCIM endpoints.
- Requires OAuth2 setup with Zoom App
- This API supports pagination through page parameters.
- Ensure to replace the version in the endpoint paths as needed.
- 'Gong uses BASIC auth for their API, but doesn’t call them username and password:
  Access Key is the username in Nango and Access Key Secret is the password in Nango.'
- By default Gong limits your company’s access to the service to 3 API calls per second,
  and 10,000 API calls per day.
- Ensure that you have the correct OAuth scopes assigned to your application.
- Uses OAuth2 with refresh token — requires app creation in Zoom App Marketplace
- Some fields may return null depending on user permissions
- Google has a unified OAuth system for their various APIs.
- You need to enable individual Google APIs on the Google API Console before using
  them.
- Requires configuration of OAuth2 for secure API access.
- Ensure proper permissions are granted for accessing OneDrive resources
- Google implements incremental authorization, allowing you to request additional
  scopes over time without requiring users to re-authorize all previously granted
  scopes.
- For applications using sensitive or restricted scopes, Google requires verification
  and a security assessment. This process can take several weeks to complete.
- Requires API token for authentication.
- Endpoints may vary based on user permissions.
- Ensure to set up OAuth App in Zoom App Marketplace to get the necessary credentials.
- Google's OAuth consent screen has different configurations for 'External' and 'Internal'
  user types.
- For applications using sensitive or restricted scopes, Google requires verification
  and a security assessment.
- Requires setup of a 1Password account.
- Requires configuration of OAuth2 in 1Password settings
- Ensure app has necessary permissions to access OneDrive files
- API limits are enforced on a per-app basis.
- Requires user consent for files access
- Google enforces rate limits on API requests, which vary depending on the specific
  API being used.
- Requires user to have SCIM access enabled
- Pagination is handled through the 'next' link in the response
- Requires setup of 1Password SCIM provisioning.
- Authorize Google Drive integration through Nango.
- Ensure the right permissions are granted for OAuth2 tokens.
- Ensure the 1Password app is set up for API access.
- Some endpoints may require additional permissions.
- Please note that the Google Play APIs have various scopes for different versions,
  such as viewing and managing your Google Play Developer account or managing corporate
  Android devices.
- Data may be subject to rate limits.
- Requires Okta admin access to configure API tokens.
- Ensure that the API token has the necessary permissions to access user data.
- Requires 1Password SCIM setup and provisioning.
- Gorgias requires a user specific subdomain to run OAuth.
- To refresh tokens, you will need to set the offline as part of the scopes when creating
  an integration.
- Requires specific user roles to access certain resources.
- Ensure that the correct scopes are requested during OAuth authorization.
- Requires permissions to access 1Password SCIM API
- Check the API documentation for rate limits
- Requires a valid ZoomInfo account.
- The Grain Public API is still in beta. Developer access is limited to select partners.
- Ensure to handle token expiration.
- Ensure correct permissions are set for the application in Azure.
- 'Grain offers both OAuth and API_KEY authentication modes. For the API_KEY auth
  mode, `Authorization: Bearer apiKey` is passed in the request header to access different
  endpoints, where `apiKey` is your account’s personal access token.'
- The Grain Public API is still in beta. Developer access is limited to select partners.
  Please reach out to Grain’s support for more questions.
- Requires API key for access
- Rate limit is enforced at 100 requests per minute
- Only Grammarly Enterprise and Education admins have access to create OAuth 2.0 credentials.
- Requires API key to access the SCIM endpoints.
- Uses OAuth2 with refresh token — requires setup of connected app in Xero
- Only Grammarly Enterprise and Education admins have access to generate SCIM API
  keys.
- The API uses standard SCIM 2.0 endpoints for user and group management.
- Rate limiting is enforced; ensure to handle errors gracefully.
- Requires setup of API access in 1Password
- Some API endpoints may have rate limits
- Greenhouse (Assessment API) uses Basic auth mode by passing the Integration partner’s
  API key as the username and leaving the password field blank.
- Uses OAuth2 with refresh token — requires setup of application in 1Password
- For Basic auth pass Greenhouse API token as username and the password should be
  blank.
- If you need to use the proxy, it is important to provide the resource that you will
  be calling in the config.
- Requires an API token with appropriate scopes.
- Greenhouse (Harvest API) uses Basic auth mode by passing Greenhouse API key as the
  username and leaving the password field blank.
- Requires a valid 1Password account and API key.
- Requires user to authenticate with their Zapier account.
- Rate limits apply based on user account type.
- Requires a valid API token for authentication.
- Rate limiting is enforced on API calls.
- Job Board data is publicly available, so authentication is not required for any
  GET endpoints. Only the application submission endpoint requires Basic Authentication.
- The Basic auth can be achieved by passing the Greenhouse (Job Board API) as the
  username and leaving the password field blank.
- Uses OAuth2 with refresh token.
- Rate limits are applied.
- Requires permission scopes for accessing OneDrive files
- API responses may vary based on user permissions
- Greenhouse (Onboarding API) uses Basic auth mode by passing Greenhouse Access key
  as the username and Secret key as the password.
- Ensure correct permissions are set for API access.
- 'Grafana uses API_KEY auth mode with `Authorization: Bearer API_KEY` in the request
  header to access different endpoints.'
- API requires a valid 1Password account and access rights.
- Requires Azure AD app registration for authentication
- Requires API token for authentication
- Rate limits apply, check the documentation for details
- For Basic Auth, Guru uses USER or COLLECTION ID as the username and either User
  token Collection token as the password.
- Requires a valid OAuth token to access user information.
- For Basic Auth, Guru (SCIM) requires the SCIM Username as the username and the SCIM
  Token as the password.
- Requires 1Password SCIM provisioning to be enabled
- Limited to specific user groups based on configuration
- Requires an active subscription to 1Password.
- HackerRank-Work uses Basic auth mode to access different endpoints. Provide your
  API key as the Basic auth username value. You do not need to provide a password.
- Utilizes OAuth2 authentication flow with authorization code.
- Ensure to set up appropriate scopes for API access.
- Uses OAuth2 with refresh token — requires setup of connected app in Zoom
- 'When creating a connection, you need to add the `appDetails` configuration parameter
  in the format `MyApp (yourname@example.com)`, which will be appended to the request
  as a header: `User-Agent: MyApp (yourname@example.com)`. Requests without a valid
  `User-Agent` header are rejected.'
- Harvest enforces different rate limits for different endpoints.
- Requires an API token for authentication.
- Rate limits apply, refer to the API documentation for details.
- 1Password SCIM API is used for managing user provisioning.
- Ensure the correct scopes are set for the application.
- Requires client ID and secret for OAuth2 authentication.
- Requires permissions for file access and may need admin consent for certain operations.
- For Help Scout Docs Basic Auth, you will need to pass your API key as the username
  and a dummy password like X as the password. Each API key is associated with a Help
  Scout user.
- For Help Scout Mailbox, access tokens expire after every 172800 seconds which is
  equivalent to 2 days.
- Ensure to follow the setup guide for OAuth2 authentication.
- Access tokens expires after every 172800 seconds which is equivalent to 2 days,
  you can use `nango.getConnection()` to generate a new set of tokens.
- Both `helpscout-docs` and `helpscout-mailbox` enforce different rate limits based
  on your current plan.
- Requires a valid 1Password account with API access.
- For Basic auth, HiBob uses ID as the username and token as the password.
- Requires setup of API keys in 1Password
- Rate limits apply, check API documentation for details
- Requires API token with appropriate permissions.
- Requires an OAuth2 connected app setup in Zoho.
- Make sure to handle rate limits as per API documentation.
- 'Holded uses API_KEY auth mode where key: API key is passed to the request header
  for Authentication.'
- Requires admin access to the 1Password account
- Ensure proper scopes are granted for access
- No scope is needed when setting up the integration
- Requires SCIM setup in 1Password.
- Requires proper Azure application setup for API access.
- Rate limits may apply based on the application.
- Requires setup of 1Password SCIM integration
- API keys must be passed in the Authorization header as `Bearer <api_key>`
- API keys can have different scopes - make sure to grant the required permissions
  when creating the key
- Ensure correct permissions are set for the OAuth app.
- Requires API token setup in 1Password.
- Some user fields may not be populated due to privacy settings.
- For the Basic Display API, the scope `user_profile` is mandatory. The only other
  available scope seems to be `user_media`.
- Ensure to have the correct scopes for API access
- OAuth2 authentication is used with token refresh capability.
- The Hypergrowth plan is required for full API access
- Free accounts start with 100 API tokens for testing
- 'Instantly has two API versions: v2 (current) - Recommended for new integrations,
  v1 (deprecated 2025, maintained for a while)'
- 'Rate limit: 10 requests per second for both API versions'
- API keys can only be viewed once during creation
- Multiple API keys can be created with different scopes for enhanced security
- Requires admin permissions to access user and group data.
- Intercom access tokens do not expire. Logically, Intercom doesn’t return a refresh
  token along with the access token.
- You do not need to pass API scopes/permissions during the authorization request.
  Permissions are only set in the Intercom Developer Portal.
- 1Password SCIM API requires a valid access token for all requests.
- Make sure to set up OAuth2 correctly in the 1Password developer console.
- Requires enabling SCIM in 1Password.
- Requires Microsoft 365 subscription
- May have rate limits on API calls
- API requests are limited to 100 requests per minute
- All API endpoints are prefixed with /api/v1/
- Date fields should be formatted as YYYY-MM-DD
- Ensure the client has the correct scopes to access user data.
- Requires user consent to access files and folders
- Requires proper setup of API key in 1Password settings.
- Ensure that the Okta API token has the necessary permissions.
- Refreshing tokens require the offline_access scope when creating the integration
  on the Nango UI.
- You will need to fetch your Cloud ID to be able to make API requests to the Jira
  API v3.
- Requires API key for access.
- Rate limits apply based on endpoint usage.
- 'Jira Data Center uses API_KEY auth mode with  authorization: Bearer API_KEY in
  the request header to access different endpoints.'
- Requires specific permissions for API access
- Data returned may include nested objects
- Jira Data Center requires a license.
- Choose only the scopes your application needs. Higher-level scopes automatically
  include lower-level ones.
- Be aware of rate limits on the API
- Jira Data Center (Basic Auth) uses BASIC auth mode to access various API endpoints.
  Please use your Username and Password to authenticate.
- Requires OAuth2 setup with client ID and secret.
- Requires appropriate permissions granted to the application to access user files.
- Always include `offline_access` scope as part of your integration scope
- Custom field management requires specific scopes
- Partner features require special scopes (`partner_jobboard`, `partner_ui_action`)
- Integration requires 1Password SCIM enabled on the account
- Access requires a paid subscription. Request for a demo.
- Requires OAuth2 for authentication with refresh tokens.
- 'API has two environments: Production and Stage/Staging'
- Rate limits are per API key/secret pair
- Uses OAuth2 with refresh token — requires setup of client in Zoho Developer Console
- Generate an API token in your Jotform account
- Requires 1Password account and API access configuration.
- JumpCloud uses both v1 and v2 APIs. Depending on your integration needs, you may
  need to use both versions.
- The API key must be included in the x-api-key header for all requests.
- Rate limiting applies - refer to best practices
- Some endpoints require specific permissions for the admin user associated with the
  API key.
- 1Password SCIM API requires OAuth2 authentication.
- 'Kandji uses API_KEY auth mode with `authorization: Bearer API_KEY` in the request
  header to access different endpoints.'
- Kandji enforces a general API rate limit of 10,000 requests per hour per tenant.
- Uses OAuth2 with refresh token — requires setup in Okta developer console
- Requires proper setup of OAuth2 application in 1Password.
- Requires configuration of API client in Workday.
- To authenticate APIs for SCIM access, you can use the token generated by Keeper
  during node setup process.
- 'KnowBe4 (Reporting) uses API_KEY auth mode with `authorization: Bearer: API_KEY`
  in the request header to access different endpoints.'
- For `API_KEY` auth mode, `Klaviyo` uses Public and Private API Keys to access different
  endpoints. Endpoints that begin with `/api` need to be authenticated with the private
  API key, while endpoints that begin with `/client` need to be authenticated using
  the public API key.
- If you want to use a different API version than the default one set in Nango you
  can override the `revision` by adding in the necessary header.
- Rate limiting in `klaviyo-oauth` is different from the standard API rate limiting.
- Uses OAuth2 with refresh token — requires setup of connected app in Klaviyo
- Rate limiting in klaviyo-oauth is different from the standard API rate limiting.
- Requires initial setup in 1Password for API access
- Ensure the application has the necessary permissions to access OneDrive files.
- 'Klipfolio uses API_KEY auth mode with `kf-api-key: API_KEY` as a request header
  to access different endpoints.'
- Klipfolio enforces rate limits for its endpoints based on the subscribed plan.
- Ensure correct scopes are set for user access
- Uses OAuth2 with refresh token — requires setup of connected app in Zendesk
- 'kustomer uses API_KEY auth mode with Authorization: Bearer api_key in the request
  header to access different endpoints.'
- Depending on the pricing plan, there are various rate limits.
- This API requires an OAuth2 setup with a redirect URI configured.
- API requires an API key for authentication.
- Requires OAuth2 setup with Zoom Developer account.
- LastPass in Nango uses Basic auth mode to access different endpoints. Please provide
  your cid as your username and provhash as your password values.
- Requires setup of a 1Password account with SCIM enabled
- lemlist uses Basic Authentication to access various endpoints. To authenticate,
  provide an empty username and use your API key as the password.
- Rate limits apply.
- Lattice API endpoints and fields are subject to change at any time without notice.
- The API has a rate limit of 240 requests per minute.
- All API requests must be made over HTTPS.
- Requires proper setup in 1Password to enable SCIM access
- Lessonly uses Basic auth mode to access different endpoints. Provide your SUBDOMAIN:API_KEY
  as the username value and leave the password field empty.
- Uses OAuth2 with refresh token — requires initial setup in 1Password
- You should create different integrations for using the Lever production vs. sandbox
  API.
- This API supports SCIM for user and group management.
- Requires setup of SCIM integration in 1Password.
- Uses OAuth2 with refresh token — requires Azure AD app registration
- Limitations on API call frequency
- Permissions must be granted in Azure portal
- Requires setup of an Okta application for OAuth2.
- Requires setup of OAuth2 in Zoho Developer Console
- Ensure to set the correct permissions for OAuth scopes.
- Rate limit applies on user and group endpoints.
- Requires initial setup of OAuth app in 1Password.
- If the scope permissions are changed in your app, your users must re-authenticate
  to ensure that they have explicitly granted your application all of the permissions
  that it is requesting on their behalf.
- The scopes available to your app depend on which Products or Partner Programs your
  app has access to.
- Requires a valid 1Password account and API access.
- Requires setup of SCIM integration in 1Password admin console.
- Loom SCIM requires SAML SSO to be enabled before a SCIM token can be generated.
- SCIM tokens can be reused across multiple identity providers (IdPs) such as Okta
  or Entra ID.
- 'User provisioning supports roles: Creator, Viewer, and Admin.'
- Rate limits apply to the API calls.
- 'Loops.so uses API_KEY auth mode where Authorization: Bearer APIkey is passed to
  the request header for Authentication.'
- Ensure proper permissions are set for API access.
- Ensure SCIM is enabled for your Enterprise account by contacting Lucid support.
- Obtain a bearer token from the Lucid admin panel under SCIM settings.
- Requires user authorization for access.
- API limits on the number of requests per minute.
- Requires a Zoom account with API access.
- Rate limits apply based on account type.
- Luma enforces a rate limit of 300 requests in any 1-minute period across all endpoints.
- Requires OAuth2 authorization setup in Azure.
- Mailchimp do not use scopes during Authorization. Hence, when providing scopes in
  the provider configuration in the Nango UI, you can ignore.
- You will also need to provide your `dc` value, which represents the data center
  associated with your account.
- Requires an active API key and proper permissions.
- Rate limit is applied to the API.
- Ensure API key is valid and has appropriate permissions
- When adding a new connection, api is the region for US-based customers, and api.eu
  is the region for EU-based customers.
- Requires admin access to configure the SCIM integration.
- When adding a new connection, you will also need to add your environmentUrl.
- Requires setup of API key for access.
- Pagination is done via cursor-based approach.
- Requires valid OAuth app setup in Zoom
- Different authentication scopes are required for various operations within Malwarebytes.
- Requires a valid 1Password account with SCIM enabled
- All API calls must use OAuth2 for authentication.
- Requires OAuth2 setup with Zoom App credentials.
- Both `endpointURL` and `identityURL` can be found in the Admin > Web Services menu
  in the REST API section.
- Medallia enforces different rate limits based on the API types.
- When creating a new connection, you will need to supply your reportingInstance and
  tenantName.
- You will also need to provide your gatewayUrl so as to build your Nango proxy base_url.
- Requires setup of OAuth2 credentials in 1Password.
- Requires valid API key for access
- Rate limiting is enforced
- 'Metabase uses API_KEY authentication mode with x-api-key: API_KEY as a request
  header to access different endpoints.'
- Requires an API key which is obtained through the 1Password admin console.
- Requires OAuth2 for authentication and setup of an app in Zoom marketplace.
- Microsoft has a unified OAuth system for their various APIs.
- Microsoft Graph API has different versions (v1.0 and beta).
- Ensure proper scopes are granted for OAuth2 access.
- Requires OAuth2 setup with Zoho.
- The Microsoft Advertising API doesn’t offer a REST API, which means certain Nango
  functionalities won’t be accessible, including syncs, workflows, and proxy requests.
- Microsoft Graph API has different versions (v1.0 and beta). The v1.0 endpoint is
  for production use, while the beta endpoint contains features that are still in
  preview.
- Requires 1Password SCIM setup in your account.
- When requesting Application Permissions that require admin consent, an Microsoft
  Entra ID administrator must pre-authorize the permissions.
- For multitenant applications, each tenant administrator must grant consent to the
  app’s required permissions before access is granted in their tenant.
- No user interaction is involved when using the Microsoft Business Central provider.
  Therefore, a Microsoft Entra ID administrator must grant consent for the required
  Application Permissions ahead of time.
errors:
- '401 Unauthorized: Check your token or client credentials.'
- '403 Forbidden: You do not have permission to access this resource.'
- '401 Unauthorized: Check the provided credentials and permissions.'
- '404 Not Found: The requested resource could not be found.'
- 'REQUEST_LIMIT_EXCEEDED: Throttle API calls or reduce frequency'
- 'QUERY_TIMEOUT: Break down filters or add selectivity'
- '401 Unauthorized: Recheck OAuth scopes or token expiration'
- '401 Unauthorized: Check the provided credentials'
- '403 Forbidden: Ensure the OAuth token has the required permissions'
- '401 Unauthorized: Check your API credentials and token'
- '404 Not Found: Verify the requested resource exists'
- '401 Unauthorized: Check API token and permissions'
- '404 Not Found: Verify endpoint path'
- '500 Internal Server Error: Try again later'
- '401 Unauthorized: Check API token validity.'
- '403 Forbidden: Insufficient permissions.'
- '401 Unauthorized: Invalid credentials or token expired'
- '403 Forbidden: Insufficient permissions to access this resource'
- '401 Unauthorized: Check your credentials.'
- '400 Bad Request: Check request parameters and data format.'
- '401 Unauthorized: Verify the token and its permissions.'
- '404 Not Found: Ensure the endpoint is correct.'
- '401 Unauthorized: Check client_id, client_secret, and scopes'
- '429 Too Many Requests: Rate limit exceeded'
- '401 Unauthorized: Check credentials or token expiration'
- '403 Forbidden: Insufficient permissions'
- '401 Unauthorized: Check your API token and permissions'
- '404 Not Found: Ensure the endpoint path is correct'
- '429 Too Many Requests: Rate limit exceeded; try again later'
- '400 Bad Request: Check your request parameters.'
- '401 Unauthorized: Ensure your credentials are correct.'
- '429 Too Many Requests: Rate limit exceeded.'
- '400: Bad Request'
- '401: Unauthorized'
- '429: Too Many Requests'
- '400 Bad Request: Check the request syntax.'
- '401 Unauthorized: Verify client credentials.'
- '404 Not Found: The requested resource does not exist.'
- '401 Unauthorized: Check client credentials and token.'
- '404 Not Found: Verify endpoint and resource identifier.'
- '429 Too Many Requests: Reduce request frequency.'
- '401 Unauthorized: Check your token and scopes'
- '401 Unauthorized: Check client ID and secret'
- '403 Forbidden: Ensure proper permissions are granted'
- '401 Unauthorized: Check token validity and permissions'
- '403 Forbidden: Ensure the app has required permissions'
- '429 Too Many Requests: Slow down requests'
- '401 Unauthorized: Verify credentials and permissions'
- '404 Not Found: Check the endpoint URL'
- '401 Unauthorized: Invalid token or insufficient permissions'
- '401 Unauthorized: Check your API key.'
- '404 Not Found: Endpoint may not exist or is misconfigured'
- '401 Unauthorized: Verify client ID and secret.'
- '403 Forbidden: Ensure correct permissions are granted.'
- '401 Unauthorized: Check your credentials'
- '429 Too Many Requests: Throttle your requests'
- '401 Unauthorized: Check the provided token is valid'
- '404 Not Found: Verify the endpoint'
- '401 Unauthorized: Check client credentials and token expiration.'
- '403 Forbidden: Insufficient permissions for the requested resource.'
- '403 Forbidden: You do not have access to this resource'
- '401 Unauthorized: Check your API token and scopes'
- 'INVALID_CREDENTIALS: Check client ID and secret.'
- 'RATE_LIMIT_EXCEEDED: Reduce frequency of requests.'
- '404 Not Found: Verify endpoint path.'
- '401 Unauthorized: Check your API token'
- '404 Not Found: Resource does not exist'
- '403 Forbidden: Check API key permissions'
- '401 Unauthorized: Invalid API key or token.'
- '401 Unauthorized: Check API token or scopes.'
- '403 Forbidden: Insufficient privileges.'
- '401 Unauthorized: Check client credentials'
- '401 Unauthorized: Check client credentials or token validity'
- '403 Forbidden: Insufficient permissions for the requested resource'
- '401 Unauthorized: Check token validity'
- '401 Unauthorized: Check your client ID and secret'
- '404 Not Found: Ensure the endpoint is correct'
- '401 Unauthorized: Verify token validity.'
- '404 Not Found: Check the resource path.'
- '401 Unauthorized: Check your API key or OAuth token.'
- '404 Not Found: Verify the endpoint URL.'
- '401 Unauthorized: Check the authorization token'
- '404 Not Found: Resource not found at the specified path'
- The required parameter client_id is missing or invalid
- '429 Too Many Requests: Throttle your requests.'
- '401 Unauthorized: Check your authentication credentials.'
- '401 Unauthorized: Check client credentials and permissions'
- '403 Forbidden: Ensure proper access to the resource'
- '401 Unauthorized: Check your API token and permissions.'
- '404 Not Found: Endpoint may be incorrect or resource does not exist.'
- '400 Bad Request: Check request parameters.'
- '401 Unauthorized: Verify credentials.'
- '404 Not Found: Resource does not exist.'
- '401 Unauthorized: Check your client credentials and token expiration.'
- '401 Unauthorized: Check the authentication tokens'
- '404 Not Found: Verify the endpoint path'
- 'INVALID_TOKEN: Check if the token is expired or invalid.'
- 'RESOURCE_NOT_FOUND: Verify the endpoint and resource ID.'
- 'RATE_LIMIT_EXCEEDED: Implement retry logic with exponential backoff.'
- '401 Unauthorized: Check your API key and permissions'
- '401 Unauthorized: Check client credentials and scopes.'
- '429 Too Many Requests: Throttle API calls or reduce frequency'
- '401 Unauthorized: Check your credentials and scopes.'
- '429 Too Many Requests: Rate limit exceeded. Try again later.'
- '401 Unauthorized: Check OAuth token and scopes'
- '401 Unauthorized: Check credentials'
- '403 Forbidden: Check if the OAuth token is valid and has correct scopes'
- '404 Not Found: Verify the endpoint and resource ID'
- '401 Unauthorized: Check if the app has the required permissions.'
- '404 Not Found: Ensure the resource exists.'
- '403 Forbidden: Check your API key permissions.'
- '401 Unauthorized: Check your API keys or tokens'
- '401 Unauthorized: Check client credentials and token validity'
- '404 Not Found: Check if the endpoint is correct'
- '401 Unauthorized: Verify the access token is valid'
- '429 Too Many Requests: Rate limit exceeded, try again later'
- 'invalid_client: Check client_id and client_secret'
- 'unauthorized: Token expired or invalid'
- '401 Unauthorized: Verify API key and permissions.'
- '404 Not Found: Check the endpoint path.'
- '403 Forbidden: Verify user permissions for the API'
- '401 Unauthorized: Check if your access token is valid.'
- '403 Forbidden: Ensure you have the right permissions.'
- '401 Unauthorized: Check the token and permissions'
- '403 Forbidden: Ensure the user has access to the requested resource'
- Session ID and Developer Key are incomplete or missing
- '401 Unauthorized: Check credentials and authorization'
- '429 Too Many Requests: Slow down your request rate'
- '401 Unauthorized: Check API key and permissions.'
- '404 Not Found: Ensure the endpoint exists.'
- '401 Unauthorized: Check your access tokens and scopes'
- '429 Too Many Requests: Rate limit exceeded, retry after some time'
- 'INVALID_CLIENT: Check client ID and secret'
- 'UNAUTHORIZED: Ensure proper authorization token is provided'
- 'RATE_LIMIT_EXCEEDED: Reduce the frequency of API calls'
- '403 Forbidden: You do not have access to this resource.'
- '401 Unauthorized: Check if the token is valid and has the right permissions'
- '404 Not Found: Ensure the endpoint path is correct.'
- 'INVALID_TOKEN: Check if the token is valid'
- 'RATE_LIMIT_EXCEEDED: Reduce the number of API calls'
- '403 Forbidden: Ensure sufficient permissions'
- '401 Unauthorized: Invalid API key or insufficient permissions'
- '404 Not Found: Resource does not exist or endpoint is incorrect'
- '401 Unauthorized: Check API key'
- 'E0000010: Invalid client_id or client_secret'
- 'E0000007: Invalid token'
- 'E0000013: Resource not found'
- '401 Unauthorized: Check client credentials and token validity.'
- '401 Unauthorized: Check client credentials and permissions.'
- '401 Unauthorized: Check client ID and secret.'
- '403 Forbidden: Ensure your account has access to the requested resource.'
- '403 Forbidden: Check permissions or API key validity.'
- '404 Not Found: Verify endpoint and resource existence.'
- '500 Internal Server Error: Retry the request after a moment.'
- '403 Forbidden: Check API token permissions'
- '429 Too Many Requests: Throttle requests to avoid rate limits'
- '400 Bad Request: Check your request format'
- '401 Unauthorized: Verify your token or credentials'
- '404 Not Found: Ensure the endpoint exists'
- '403 Forbidden: Check permissions or API key validity'
- '404 Not Found: Verify endpoint and resource'
- '500 Internal Server Error: Retry request after some time'
- '401 Unauthorized: Verify client credentials'
- '403 Forbidden: Check permissions'
- '401 Unauthorized: Check if the access token is valid'
- '403 Forbidden: Ensure the account has SCIM enabled'
- '401 Unauthorized: Check your credentials and permissions.'
- '401 Unauthorized: Check the provided credentials.'
- '403 Forbidden: The request is not allowed.'
- '401 Unauthorized: Check your OAuth token.'
- '403 Forbidden: Check your API key and permissions.'
- '404 Not Found: Verify the resource path.'
- '401 Unauthorized: Check your API Key'
- '401 Unauthorized: Check your OAuth token and scopes'
- '404 Not Found: The requested resource does not exist'
- '404 Not Found: Verify the endpoint and resource path.'
- '400 Bad Request: Check the request parameters.'
- '401 Unauthorized: Verify your credentials.'
- '401 Unauthorized: Check your API key and permissions.'
- '403 Forbidden: Your request is not allowed.'
- '404 Not Found: Check if the resource exists.'
- '401 Unauthorized: Verify the access token.'
- '401 Unauthorized: Check OAuth token validity'
- 'AUTHENTICATION_ERROR: Check API key validity.'
- 'RATE_LIMIT_EXCEEDED: Reduce request frequency.'
- '401 Unauthorized: Check your access token and scopes'
- '429 Too Many Requests: Rate limit exceeded, please retry later'
- '429: Rate limit exceeded. Test sites: ~750 API calls per every 5 minutes. Live
  sites: ~150 API calls per site per minute.'
- '404 Not Found: Verify the endpoint is correct.'
- '401 Unauthorized: Check client credentials.'
- '404 Not Found: Verify endpoint URL.'
- '404 Not Found: Check the endpoint URL or resource'
- '403 Forbidden: Verify permissions or token scopes'
- '429 Too Many Requests: Throttle requests to avoid limits'
- '401 Unauthorized: Check client credentials or permissions'
- '403 Forbidden: Ensure the user has access rights'
- '404 Not Found: Verify the endpoint URL'
- '404 Not Found: Verify endpoint path and parameters'
- '401 Unauthorized: Check your token validity.'
- '401 Unauthorized: Check client_id and client_secret'
- '404 Not Found: Check endpoint path'
- '401 Unauthorized: Check your OAuth2 credentials.'
- '401 Unauthorized: Check your credentials and scopes'
- '403 Forbidden: Insufficient permissions for the requested operation.'
- '404 Not Found: Check if the endpoint URL is correct.'
- '401 Unauthorized: Check if the token is valid.'
- '401 Unauthorized: Check your authentication details'
- '401 Unauthorized: Check your OAuth credentials.'
- '429 Too Many Requests: You have exceeded the API rate limit.'
- 'E0000004: The request is missing a required parameter.'
- 'E0000010: Invalid request.'
- 'E0000007: Invalid client.'
- '404 Not Found: The requested resource was not found.'
- '403 Forbidden: Ensure API permissions are granted'
- '429 Too Many Requests: Reduce request frequency'
- '401 Unauthorized: Check your API key or token'
- '403 Forbidden: You do not have permission to access this resource'
- '404 Not Found: Verify the endpoint path.'
- '404 Not Found: Verify the endpoint path or resource ID'
- '401 Unauthorized: Check your API key'
- '401 Unauthorized: Check the OAuth credentials and token validity.'
- '403 Forbidden: Verify access permissions for the requested resource.'
- '401 Unauthorized: Check API key and permissions'
- '404 Not Found: Verify endpoint URL'
- '401 Unauthorized: Check token validity.'
- 'INVALID_GRANT: Check the refresh token and client credentials.'
- '403 Forbidden: Ensure the user has access to the requested resource.'
- '404 Not Found: Check the endpoint URL.'
- '429 Too Many Requests: Please slow down your requests.'
- 'INVALID_TOKEN: Check if the token is valid or expired'
- 'RATE_LIMIT_EXCEEDED: Throttle requests to avoid hitting limits'
- 'INVALID_TOKEN: Check if the access token is valid.'
- 'RATE_LIMIT_EXCEEDED: Reduce the rate of API calls.'
- 'INVALID_TOKEN: Ensure the access token is valid.'
- 'RATE_LIMIT_EXCEEDED: Reduce the frequency of requests.'
- '403 Forbidden: Ensure the account has SCIM provisioning enabled.'
- '401 Unauthorized: Check your access token.'
- '404 Not Found: Check the requested resource.'
- 'invalid_grant: Invalid credentials provided'
- 'unauthorized: Not authorized to access this resource'
- '401 Unauthorized: Check your API credentials and permissions.'
- '403 Forbidden: Ensure you have access to the requested resource.'
- 'INVALID_AUTHORIZATION_CODE: Check the authorization code.'
- 'ACCESS_TOKEN_EXPIRED: Refresh the access token.'
- 'INVALID_REQUEST: Verify the request parameters.'
- '401 Unauthorized: Check client credentials or token expiration.'
- '403 Forbidden: Ensure permissions are set correctly.'
- '401 Unauthorized: Check your API token and credentials.'
- '403 Forbidden: API token lacks the required permissions.'
- '401 Unauthorized: Check your API key or token.'
- '404 Not Found: Check the endpoint URL or resource ID'
- '401 Unauthorized: Verify OAuth scopes or token expiration'
- '404 Not Found: Check the endpoint path and parameters'
- '400 Bad Request: Ensure required fields are included in the request'
- '401 Unauthorized: Verify the access token and permissions'
- '401 Unauthorized: Check your access token and permissions.'
- '401 Unauthorized: Check client credentials or token expiration'
- '404 Not Found: Verify the endpoint is correct'
- 'INVALID_REQUEST: Check the request format.'
- 'UNAUTHORIZED: Validate client credentials.'
- 'RATE_LIMIT_EXCEEDED: Slow down API requests.'
- '401 Unauthorized: Invalid client ID or secret.'
- 'INVALID_AUTHORIZATION_CODE: Check your authorization code.'
- 'ACCESS_TOKEN_EXPIRED: Refresh your access token.'
- '401 Unauthorized: Check the validity of your tokens.'
- '403 Forbidden: Ensure your account has the necessary permissions.'
- '401 Unauthorized: Verify your API key and permissions.'
- '403 Forbidden: Ensure proper permissions are set'
- '400 Bad Request: Check request parameters'
- '400 Bad Request: Check the request parameters'
- '401 Unauthorized: Recheck OAuth credentials'
- '429 Too Many Requests: Throttle requests'
- 'INVALID_TOKEN: Recheck OAuth token validity'
- 'ACCESS_DENIED: Ensure proper scopes are set'
- '401 Unauthorized: Check your client credentials.'
- '403 Forbidden: Ensure you have the required permissions.'
- 'INVALID_AUTHORIZATION_CODE: Verify the authorization code.'
- 'INVALID_REFRESH_TOKEN: Ensure the refresh token is valid.'
- 'RATE_LIMIT_EXCEEDED: Reduce the rate of requests.'
- '403 Forbidden: Ensure sufficient permissions.'
- '403 Forbidden: Ensure you have permission to access the resource.'
- Basic API credentials are incomplete
- '401 Unauthorized: Check API token.'
- '429 Too Many Requests: Exceeded rate limits.'
- '401 Unauthorized: Check your OAuth credentials'
- '429 Too Many Requests: Rate limit exceeded, reduce request frequency'
- '403 Forbidden: Check user permissions.'
- '401 Unauthorized: Verify your OAuth2 token.'
- '401 Unauthorized: Ensure that the OAuth2 token is valid.'
- '401 Unauthorized: Check client credentials or access token'
- '429 Too Many Requests: Implement exponential backoff'
- '403 Forbidden: Ensure the app has the necessary permissions'
- '404 Not Found: Verify file or endpoint existence'
- '401 Unauthorized: Check your OAuth token and permissions'
- '401 Unauthorized: Check your API token.'
- '401 Unauthorized: Check your credentials and token validity.'
- '403 Forbidden: Ensure you have the necessary permissions.'
- '403 Forbidden: Ensure permissions are granted'
- '401 Unauthorized: Check your client credentials'
- '403 Forbidden: Ensure your account has the necessary permissions'
- '401 Unauthorized: Check the provided credentials or token expiration.'
- '404 Not Found: Verify the endpoint URL and parameters.'
- '401 Unauthorized: Check your access token'
- '404 Not Found: Ensure the resource path is correct'
- '403 Forbidden: Verify API token permissions'
- '404 Not Found: Check endpoint URL'
- '401 Unauthorized: Check API token or permissions'
- '404 Not Found: Check if the endpoint is correct.'
- '401 Unauthorized: Recheck OAuth token or permissions.'
- '403 Forbidden: Ensure you have the necessary permissions'
- '403 Forbidden: Ensure you have the necessary scopes.'
- '429 Too Many Requests: Rate limit exceeded, slow down requests.'
- '401 Unauthorized: Check your OAuth token and scopes.'
- '429 Too Many Requests: You have exceeded your rate limit.'
- '401 Unauthorized: Check API token'
- '429 Too Many Requests: Reduce the rate of API calls.'
- '403 Forbidden: Check permissions for the API key'
- '401 Unauthorized: Check your OAuth2 token'
- '404 Not Found: The endpoint does not exist.'
- '429 Too Many Requests: Throttle API requests to avoid hitting rate limits'
- '401 Unauthorized: Check if the token is valid and has the required scopes.'
- '403 Forbidden: Token does not have permission to access this resource.'
- '400 Bad Request: Check request parameters and format.'
- '401 Unauthorized: Verify API key validity.'
- '404 Not Found: Check the endpoint and resource ID.'
- '403 Forbidden: Verify OAuth scopes and permissions.'
- '403 Forbidden: Check permissions for the token.'
- '404 Not Found: Ensure the endpoint URL is correct.'
- '403 Forbidden: Ensure you have the right permissions for the requested resource.'
- '429 Too Many Requests: Rate limit exceeded, slow down your requests.'
- 'INVALID_TOKEN: Check if your token is valid'
- '401 Unauthorized: Check OAuth token and permissions.'
- '404 Not Found: Ensure the resource exists and is accessible.'
- '401 Unauthorized: Check client credentials or scopes'
- '429 Too Many Requests: Reduce request rate'
- '401 Unauthorized: Check your client ID and secret.'
- '401 Unauthorized: Check your token and permissions.'
- '429 Too Many Requests: Rate limit exceeded, try again later.'
- '404 Not Found: Check the endpoint and parameters'
- '403 Forbidden: Ensure you have the right permissions'
- '400 Bad Request: Validate your request parameters'
- 'INVALID_REQUEST: Check the request parameters.'
- 'UNAUTHORIZED: Verify the API key and permissions.'
- '401 Unauthorized: Invalid credentials or lack of consent.'
- '403 Forbidden: Access denied due to insufficient permissions.'
- 'INVALID_TOKEN: Ensure the token is valid and not expired'
- 'RATE_LIMIT_EXCEEDED: Reduce the number of requests per minute'
- 'INVALID_TOKEN: Check if the token is valid or refresh it'
- 'API_RATE_LIMIT_EXCEEDED: Reduce the frequency of requests'
- '404 NOT FOUND: Verify the endpoint path'
- 'INVALID_CREDENTIALS: Check your client_id and client_secret'
- 'ACCESS_DENIED: Ensure the token has appropriate scopes'
- '401 Unauthorized: Check if token is valid and not expired.'
- '403 Forbidden: Ensure proper permissions are granted.'
- '429 Too Many Requests: Exceeded rate limits'
- '400 Bad Request: Invalid parameters.'
- '401 Unauthorized: Check credentials.'
- '403 Forbidden: Check access permissions'
- '401 Unauthorized: Verify token and scopes'
- '404 Not Found: Check endpoint URL.'
- '403 Forbidden: Verify API token permissions.'
- '404 Not Found: Check the endpoint and resource'
- '403 Forbidden: Verify API permissions'
- '401 Unauthorized: Check your credentials and token.'
- '404 Not Found: Verify the endpoint and resource.'
- 'Rate limit exceeded: Adjust your API call frequency'
- 'Unauthorized: Check your API credentials'
- '404 Not Found: Check for valid user ID or meeting ID'
- '400 Bad Request: Ensure required fields are populated correctly'
- '401 Unauthorized: Verify OAuth token and scopes'
- Google allows up to 100 refresh tokens per account per OAuth client ID; new tokens
  overwrite the oldest without warning when the limit is reached.
- For applications using sensitive or restricted scopes, Google requires verification
  and a security assessment.
- '401 Unauthorized: Check if the token has expired or is not valid'
- '403 Forbidden: Verify permissions for the app registration'
- '401 Unauthorized: Check your access token or refresh token.'
- '404 Not Found: Ensure the resource exists and the URL is correct.'
- '403 Forbidden: Access denied for the requested resource.'
- 'INVALID_CREDENTIALS: Check client ID and secret'
- '403 FORBIDDEN: Ensure the token has appropriate permissions'
- '429 TOO MANY REQUESTS: Throttle your requests'
- Google expires a user’s refresh token and the token refresh in Nango will fail under
  certain circumstances.
- '401 Unauthorized: Invalid credentials.'
- '401 Unauthorized: Check the client ID, client secret, and refresh token.'
- '404 Not Found: Verify the endpoint path and resource.'
- '401 Unauthorized: Check your API token and scopes.'
- '403 Forbidden: Check the permissions of the API token.'
- '400 Bad Request: Review the request parameters.'
- '401 Unauthorized: Invalid token or token expired.'
- '404 Not Found: Endpoint does not exist.'
- '401 Unauthorized: Invalid credentials or token'
- '401 Unauthorized: Verify token or credentials.'
- '403 Forbidden: Ensure permissions for the requested resource.'
- '401 Unauthorized: Invalid credentials'
- '429 Too Many Requests: You have exceeded the allowed number of requests.'
- '401 Unauthorized: Check client credentials or token validity.'
- '403 Forbidden: Ensure proper permissions for API access.'
- '403 Forbidden: Ensure the user has permission to access the resource.'
- '401 Unauthorized: Invalid API key or token'
- '403 Forbidden: Check permissions for the requested resource'
- '401 Unauthorized: Verify credentials and token'
- '429 Too Many Requests: Reduce the frequency of API calls'
- '401 Unauthorized: Check API token and permissions.'
- '403 Forbidden: Insufficient permissions for this endpoint.'
- '401 Unauthorized: Validate the auth token.'
- '401 Unauthorized: Check for valid access token'
- '403 Forbidden: Insufficient permissions to access the resource'
- '401 Unauthorized: Check your API key or permissions.'
- '403 Forbidden: Check permissions for the API'
- '403 Forbidden: You do not have permission for this resource'
- '401 Unauthorized: Check your token.'
- '401 Unauthorized: Check if the access token is valid or expired.'
- '403 Forbidden: Verify permissions for the requested resource.'
- '401 Unauthorized: Check OAuth token'
- '429 Too Many Requests: You have hit the rate limit.'
- 'INVALID_TOKEN: Check the token format or refresh it.'
- '403 FORBIDDEN: Verify your permissions for the requested resource.'
- '429 Too Many Requests: You have exceeded the rate limit.'
- '401 Unauthorized: Check API keys and permissions'
- 'INVALID_CLIENT: Check client_id and client_secret.'
- 'TOKEN_EXPIRED: Refresh the access token using the refresh token.'
- '403 Forbidden: Ensure that the API scope is set correctly.'
- '429 Too Many Requests: Implement exponential backoff.'
- '404 Not Found: Check the endpoint path'
- '401 Unauthorized: Check your token and permissions'
- '403 Forbidden: Ensure you have access to the requested resource'
- 'TOKEN_EXPIRED: Refresh the token.'
- '401 Unauthorized: Check your API token or permissions.'
- 'INVALID_TOKEN: Check if the token is valid and not expired.'
- '403 Forbidden: Ensure the client has permission for the requested resource.'
- '401 Unauthorized: Check if the access token is valid.'
- '403 Forbidden: Ensure the client has the necessary permissions.'
- '401 Unauthorized: Check access token and permissions'
- '404 Not Found: Verify the resource path and ID'
- '401 Unauthorized: Check API key validity.'
- '403 Forbidden: Ensure proper permissions are set.'
- '500 Internal Server Error: Retry after a brief wait.'
- '401 Unauthorized: Check API key or token'
- '400 Bad Request: Check the request format and parameters'
- '401 Unauthorized: Verify API key and permissions'
- '403 Forbidden: Check permissions or authentication details.'
- '500 Internal Server Error: Retry the request.'
- '429 Too Many Requests: Slow down API requests'
- Rate limits reset at midnight Pacific Time (PT)
- '404 Not Found: Verify endpoint path or resource availability'
- 'INVALID_REQUEST: Check the request parameters'
- '401 Unauthorized: Verify the access token'
- '401 Unauthorized: Check your authentication details.'
- '403 Forbidden: Ensure you have appropriate permissions.'
- '401 Unauthorized: Check client ID or secret.'
- '403 Forbidden: Ensure correct permissions.'
- '404 Not Found: Ensure the endpoint URL is correct'
- '404 Not Found: Check the requested file path.'
- '401 Unauthorized: Verify token validity and permissions.'
- '429 Too Many Requests: Rate limiting applied'
- '403 Forbidden: Check API permissions'
- '401 Unauthorized: Check your token and scopes.'
- '401 Unauthorized: Check API key.'
- '1001: Invalid access token.'
- '3001: Meeting does not exist.'
- '3002: User does not exist.'
- '403 Forbidden: Ensure SCIM access is enabled for your account'
- 'Rate limit exceeded: Check your request frequency.'
- '401 Unauthorized: Check your API token or client credentials'
- '401 Unauthorized: Check your credentials or token expiration'
- '404 Not Found: Verify the endpoint or resource existence'
- '401 Unauthorized: Check your access token and permissions'
- '404 Not Found: Resource may not exist or endpoint is incorrect'
- '403 Forbidden: Verify permissions'
- '403 Forbidden: Check permissions for the requested resource.'
- '429 Too Many Requests: Throttle API calls.'
- '403 Forbidden: Check permissions for the API token.'
- '401 Unauthorized: Ensure valid credentials are being used.'
- '403 Forbidden: Insufficient permissions for the requested action.'
- '404 Not Found: Endpoint does not exist'
- 'INVALID_TOKEN: Check if the OAuth token is valid.'
- 'UNAUTHORIZED: Ensure the provided credentials have access.'
- '401 Unauthorized: Check your client_id and client_secret.'
- '401 Unauthorized: Check client credentials and scopes'
- '401 Unauthorized: Invalid credentials or token expired.'
- '401 Unauthorized: Verify token and permissions.'
- '401 Unauthorized: Check if the token is valid and has the right scopes.'
- '401 Unauthorized: Check API key or token.'
- '429 Too Many Requests: Rate limit exceeded, please retry.'
- '404 Not Found: Check endpoint and parameters'
- '400 Bad Request: Verify request format and parameters'
- '401 Unauthorized: Ensure valid token and scopes'
- '401 Unauthorized: Check your token or scopes.'
- '401 Unauthorized: Validate token and scopes.'
- '401 Unauthorized: Verify client credentials or token.'
- 'INVALID_TOKEN: Recheck OAuth token validity.'
- .default scope can't be combined with resource-specific scopes
auth_info:
  mentioned_objects:
  - OAuth2Client
  - AccessToken
  - OAuthToken
  - AuthProvider
  - OauthToken
  - NamedCredential
  - OAuth2
  - BearerToken
  - Authorization Code Grant
  - XeroAPI
  - Token
  - APIKey
  - User
  - Meeting
  - Tenant
  - ApiToken
  - Authorization Code
  - Authorization Server
  - Client ID
  - Client Secret
  - OAuth2 Client
  - Access Token
  - oauth2
  - ClientCredentials
  - OAuthClient
  - ClientID
  - ClientSecret
  - OAuth
  - RefreshToken
  - API Key
  - AuthorizationCode
  - OAuth 2.0
  - Refresh Token
  - AuthToken
  - client_id
  - client_secret
  - accountId
  - databricksInstance
  - Client
  - AuthorizationServer
  - ResourceServer
  - Microsoft Graph
  - Client Credentials
  - 1Password SCIM API
  - Authorization
  - OAuth2Token
  - ClientCredential
  - GitHub App
  - OAuth Token
  - OAuth client ID
  - OAuth consent screen
  - Tokens
  - OAuth2 Token
  - OAuth2AccessToken
  - OAuth2RefreshToken
  - TokenEndpoint
  - GraphServiceClient
  - MicrosoftGraph
  - Bearer Token
  - DriveItem
  - OAuth App
  - OAuthAuthorization
  - ZoomAPI
client:
  base_url: https://api.1password.com
  auth:
    type: oauth2
    flow: refresh_token
    token_url: https://login.1password.com/oauth/token
    client_id: '{{ dlt.secrets[''1password_client_id''] }}'
    client_secret: '{{ dlt.secrets[''1password_client_secret''] }}'
    refresh_token: '{{ dlt.secrets[''1password_refresh_token''] }}'
    location: header
    header_name: Authorization
  headers:
    Accept: application/json
source_metadata: null
