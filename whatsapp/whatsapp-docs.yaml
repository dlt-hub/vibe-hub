resources:
- name: template
  endpoint:
    path: /resources/v1/messaging
    method: POST
    data_selector: template
    params: {}
- name: text_message
  endpoint:
    path: /text
    method: POST
    data_selector: message
    params: {}
- name: contacts_message
  endpoint:
    path: /contacts
    method: POST
    data_selector: contacts
    params: {}
- name: location_message
  endpoint:
    path: /location
    method: POST
    data_selector: location
    params: {}
- name: media_message
  endpoint:
    path: /media
    method: POST
    data_selector: media
    params: {}
- name: hsm_message
  endpoint:
    path: /hsm
    method: POST
    data_selector: hsm
    params: {}
- name: messaging
  endpoint:
    path: /messaging/
    method: POST
- name: createProfile
  endpoint:
    path: /createProfile
    method: POST
- name: getProfile
  endpoint:
    path: /getProfile
    method: GET
- name: transactionstatus
  endpoint:
    path: /transactionstatus/
    method: POST
- name: rules
  endpoint:
    path: /rules
    method: POST
    data_selector: response
    params: {}
- name: events
  endpoint:
    path: /events
    method: GET
    data_selector: events
    params: {}
- name: send_sms
  endpoint:
    path: /resources/v1/messaging
    method: POST
- name: geofence
  endpoint:
    path: /geofences
    method: POST
    data_selector: geofences
    params: {}
- name: voice_media
  endpoint:
    path: /voice_media
    method: POST
    data_selector: voice_files
    params: {}
- name: sms_restrictions
  endpoint:
    path: /sms_restrictions
    method: GET
    data_selector: restrictions
    params: {}
- name: number_restrictions
  endpoint:
    path: /number_restrictions
    method: GET
    data_selector: restrictions
    params: {}
- name: smart_link
  endpoint:
    path: /smartlink
    method: POST
    data_selector: smartlinks
    params: {}
- name: direct_messages
  endpoint:
    path: /direct_messages/events/list
    method: GET
    data_selector: events
- name: email
  endpoint:
    path: /email
    method: POST
    data_selector: message
    params: {}
- name: messaging
  endpoint:
    path: /messaging/
    method: POST
- name: createProfile
  endpoint:
    path: /createProfile
    method: POST
- name: createAppProfile
  endpoint:
    path: /createAppProfile
    method: POST
- name: getProfile
  endpoint:
    path: /getProfile
    method: GET
- name: getAppProfile
  endpoint:
    path: /getAppProfile
    method: GET
- name: updateProfile
  endpoint:
    path: /updateProfile
    method: PUT
- name: updateAppProfile
  endpoint:
    path: /updateAppProfile
    method: PUT
- name: deleteProfile
  endpoint:
    path: /deleteProfile
    method: DELETE
- name: deleteAppProfile
  endpoint:
    path: /deleteAppProfile
    method: DELETE
- name: deleteDeviceAppProfile
  endpoint:
    path: /delete-device-app-profile
    method: DELETE
- name: externalevent
  endpoint:
    path: /externalevent/
    method: POST
- name: transactionstatus
  endpoint:
    path: /transactionstatus/
    method: POST
- name: branch
  endpoint:
    path: /flow/branch
    method: GET
    data_selector: ''
    params: {}
- name: CallWorkflow
  endpoint:
    path: /flow/callworkflow
    method: POST
- name: hashing_algorithm
  endpoint:
    path: /hashing/algorithm
    method: GET
    data_selector: algorithms
- name: plain_text
  endpoint:
    path: /hashing/plain_text
    method: POST
    data_selector: hashed_output
- name: apply_salt
  endpoint:
    path: /hashing/salt
    method: POST
    data_selector: salt_value
- name: Flow Delay
  endpoint:
    path: /node/timer
    method: GET
    data_selector: properties
    params:
      timeout: 20
- name: decryption
  endpoint:
    path: /decryption
    method: POST
- name: email_flow
  endpoint:
    path: /flow/email
    method: POST
    data_selector: response
    params: {}
- name: 'Flow: Profile'
  endpoint:
    path: /flow/profile
    method: GET
    data_selector: records
- name: Receive SMS
  endpoint:
    path: /flow/receive/sms
    method: POST
    data_selector: sysResponseMessage
    params: {}
- name: Inbound Voice
  endpoint:
    path: /flow/receive/voice
    method: POST
    data_selector: sysResponseMessage
    params: {}
- name: Facebook Messenger
  endpoint:
    path: /flow/receive/facebook
    method: POST
    data_selector: sysResponseMessage
    params: {}
- name: Receive Email
  endpoint:
    path: /flow/receive/email
    method: POST
    data_selector: sysResponseMessage
    params: {}
- name: Twitter message
  endpoint:
    path: /flow/receive/twitter
    method: POST
    data_selector: sysResponseMessage
    params: {}
- name: Custom Event
  endpoint:
    path: /flow/receive/custom_event
    method: POST
    data_selector: session_data
    params: {}
- name: WeChat message
  endpoint:
    path: /flow/receive/wechat
    method: POST
    data_selector: sysResponseMessage
    params: {}
- name: In-app messaging
  endpoint:
    path: /flow/receive/in_app
    method: POST
    data_selector: sysResponseMessage
    params: {}
- name: Lead
  endpoint:
    path: /services/data/vXX.X/sobjects/Lead
    method: POST
- name: Case
  endpoint:
    path: /services/data/vXX.X/sobjects/Case
    method: POST
- name: node_events
  endpoint:
    data_selector: Exit event
    params: {}
- name: send
  endpoint:
    path: /flow/send
    method: POST
    data_selector: deliveryInfoNotification
    params: {}
- name: facebook
  endpoint:
    path: /facebook/send
    method: POST
- name: twitter
  endpoint:
    path: /twitter/send
    method: POST
- name: wechat
  endpoint:
    path: /wechat/send
    method: POST
- name: push_notification
  endpoint:
    path: /push/send
    method: POST
- name: 'Flow: Wait for Event'
  endpoint:
    path: /path/to/flow/wait/for/event
    method: GET
    data_selector: records
    params: {}
- name: NLP Modules
  endpoint:
    path: /nlp/modules
    method: GET
    data_selector: modules
    params: {}
- name: Voice Nodes
  endpoint:
    path: /voice/nodes
    method: GET
- name: collect_input
  endpoint:
    path: /node/collect-input
    method: GET
    data_selector: options
    params: {}
- name: play_options
  endpoint:
    path: /node/play-options
    method: GET
    data_selector: options
    params: {}
- name: timer_settings
  endpoint:
    path: /node/timer-settings
    method: GET
    data_selector: settings
    params: {}
- name: node_events
  endpoint:
    path: /node/events
    method: GET
    data_selector: events
    params: {}
- name: dial_dtmf
  endpoint:
    path: /node/dial_dtmf
    method: POST
    data_selector: dtmf_settings
    params: {}
- name: voice_disconnect
  endpoint:
    path: /node-disconnect
    method: GET
    data_selector: logs
- name: voice_record
  endpoint:
    path: /voice/record
    method: POST
    data_selector: recordings
- name: voice_send
  endpoint:
    path: /voice/send
    method: POST
    data_selector: response
    params: {}
- name: Voice Start
  endpoint:
    path: /voice/start
    method: GET
- name: session_data
  endpoint:
    path: /docs/configuration-session-datacustom-logs
    method: GET
    data_selector: default_parameters
    params: {}
- name: custom_logs
  endpoint:
    path: /docs/configuration-session-datacustom-logs
    method: GET
    data_selector: custom_logs
    params: {}
- name: custom_flow_result
  endpoint:
    path: /docs/configuration-session-datacustom-logs
    method: GET
    data_selector: custom_flow_result
    params: {}
- name: chat_events
  endpoint:
    path: /api/chat/events
    method: POST
    data_selector: events
    params: {}
- name: incoming_message
  endpoint:
    path: /incoming-message
    method: POST
    data_selector: message
    params: {}
- name: outgoing_message
  endpoint:
    path: /outgoing-message
    method: POST
    data_selector: message
    params: {}
- name: incoming_message
  endpoint:
    path: /incoming/message
    method: POST
    data_selector: Conversationid
    params: {}
- name: postback_event
  endpoint:
    path: /postback/event
    method: POST
    data_selector: Conversationid
    params: {}
- name: message_delivery
  endpoint:
    path: /message/delivery
    method: POST
    data_selector: Conversationid
    params: {}
- name: bot_reply
  endpoint:
    path: /bot/reply
    method: POST
    data_selector: eventid
    params: {}
- name: zip_code_service
  endpoint:
    path: /zip_code_service
    method: POST
    data_selector: response
    params: {}
- name: Event Scheduler
  endpoint:
    path: /event/scheduler
    method: POST
    data_selector: event
    params: {}
- name: Add Calendar
  endpoint:
    path: /add-calendar
    method: POST
    data_selector: calendar
    params: {}
- name: Manage Calendar
  endpoint:
    path: /manage-calendar
    method: PUT
    data_selector: calendar
    params: {}
- name: Delete Calendar
  endpoint:
    path: /delete-calendar
    method: DELETE
    data_selector: calendar
    params: {}
- name: message_block
  endpoint:
    path: /api/v1/language/message_block
    method: GET
    data_selector: data
    params: {}
- name: supported_languages
  endpoint:
    path: /api/v1/language/supported_languages
    method: GET
    data_selector: languages
    params: {}
- name: audit_logs
  endpoint:
    path: /api/v1/language/audit_logs
    method: GET
    data_selector: logs
    params: {}
- name: Email Template
  endpoint:
    path: /v2.2/docs/template-builder
    method: POST
    data_selector: templates
    params: {}
- name: register_device
  endpoint:
    path: /register/device
    method: POST
    data_selector: registration
    params: {}
- name: subscribe_topic
  endpoint:
    path: /subscribe/topic
    method: POST
    data_selector: subscription
    params: {}
- name: unsubscribe_topic
  endpoint:
    path: /unsubscribe/topic
    method: POST
    data_selector: unsubscription
    params: {}
- name: publish_message
  endpoint:
    path: /publish/message
    method: POST
    data_selector: message
    params: {}
- name: fetch_topics
  endpoint:
    path: /fetch/topics
    method: GET
    data_selector: topics
    params: {}
- name: fetchThreads
  endpoint:
    path: /fetchThreads
    method: GET
    data_selector: threads
    params:
      beforeDate: date
      limit: int
- name: fetchTopics
  endpoint:
    path: /fetchTopics
    method: GET
    data_selector: topics
    params:
      offset: Integer
- name: getConnectionStatus
  endpoint:
    path: /getConnectionStatus
    method: GET
    data_selector: status
- name: publishMessage
  endpoint:
    path: /publishMessage
    method: POST
    data_selector: message
    params: {}
- name: setMessageAsRead
  endpoint:
    path: /setMessageAsRead
    method: POST
    data_selector: status
    params:
      transactionId: String
- name: setMessagesAsRead
  endpoint:
    path: /setMessagesAsRead
    method: POST
    data_selector: status
    params:
      transactionIds: String[]
- name: subscribeTopic
  endpoint:
    path: /subscribeTopic
    method: POST
    data_selector: subscription
    params:
      topicId: String
- name: unsubscribeTopic
  endpoint:
    path: /unsubscribeTopic
    method: POST
    data_selector: unsubscription
    params:
      topicId: String
- name: uploadFile
  endpoint:
    path: /docs/attachments-media
    method: POST
    data_selector: result
    params: {}
- name: setMode
  endpoint:
    path: /setMode
    method: void
    data_selector: mode
    params: {}
- name: setLimits
  endpoint:
    path: /setLimits
    method: void
    data_selector: limits
    params: {}
- name: onSetMessageStatusComplete
  endpoint:
    path: /onSetMessageStatusComplete
    method: POST
    data_selector: messageTransactionIds
    params: {}
- name: onShutdownComplete
  endpoint:
    path: /onShutdownComplete
    method: POST
    data_selector: null
    params: {}
- name: onSubscribeTopicComplete
  endpoint:
    path: /onSubscribeTopicComplete
    method: POST
    data_selector: topicId
    params: {}
- name: onUnsubscribeTopicComplete
  endpoint:
    path: /onUnsubscribeTopicComplete
    method: POST
    data_selector: topicId
    params: {}
- name: onUpdateComplete
  endpoint:
    path: /onUpdateComplete
    method: POST
    data_selector: bundle
    params: {}
- name: onUpdateThreadComplete
  endpoint:
    path: /onUpdateThreadComplete
    method: POST
    data_selector: thread
    params: {}
- name: onPinGenerated
  endpoint:
    path: /onPinGenerated
    method: POST
    data_selector: null
    params: {}
- name: onPinValidated
  endpoint:
    path: /onPinValidated
    method: POST
    data_selector: null
    params: {}
- name: onPinReceived
  endpoint:
    path: /onPinReceived
    method: POST
    data_selector: null
    params: {}
- name: onError
  endpoint:
    path: /onError
    method: POST
    data_selector: exception
    params: {}
- name: onPublishEventComplete
  endpoint:
    path: /onPublishEventComplete
    method: POST
    data_selector: bundle
    params: {}
- name: getImageUri
  endpoint:
    path: /getImageUri
    method: GET
- name: ICConversationRecyclerViewChild
  endpoint:
    path: /style/ICConversationRecyclerViewChild
    method: GET
    data_selector: attributes
    params: {}
- name: myBubbleColor
  endpoint:
    path: myBubbleColor
    method: GET
- name: theirBubbleColor
  endpoint:
    path: theirBubbleColor
    method: GET
- name: device_profile
  endpoint:
    path: /register/device
    method: POST
    data_selector: response
    params: {}
- name: topics
  endpoint:
    path: /fetch/topics
    method: GET
    data_selector: topics
    params: {}
- name: device_profile
  endpoint:
    path: /device/profile
    method: GET
- name: setLogType
  endpoint:
    path: /setLogType
    method: POST
    data_selector: logOptions
    params: {}
- name: setRetentionDuration
  endpoint:
    path: /setRetentionDuration
    method: POST
    data_selector: retentionDuration
    params: {}
- name: logPath
  endpoint:
    path: /logPath
    method: GET
    data_selector: logDirectory
    params: {}
- name: publishEvent
  endpoint:
    path: /publishEvent
    method: POST
    data_selector: eventResponse
    params: {}
- name: ICMessage
  endpoint:
    path: /ICMessage
    method: GET
    data_selector: message
    params: {}
- name: ICThread
  endpoint:
    path: /ICThread
    method: GET
    data_selector: thread
    params: {}
- name: fetchMessages
  endpoint:
    path: /fetchMessagesForThreadId
    method: GET
    data_selector: messages
    params: {}
- name: fetchThreads
  endpoint:
    path: /fetchThreadsUpdatedBeforeDate
    method: GET
    data_selector: threads
    params: {}
- name: push_notifications
  endpoint:
    path: /api/push_notifications
    method: POST
    data_selector: notification
    params: {}
- name: uploadFile
  endpoint:
    path: /uploadFile
    method: POST
    data_selector: file_upload_status
- name: onFileUploadComplete
  endpoint:
    path: /onFileUploadComplete
    method: POST
    data_selector: upload_complete_status
- name: setMediaId
  endpoint:
    path: /setMediaId
    method: POST
    data_selector: media_id_status
- name: fetchThreads
  endpoint:
    path: /fetchThreads
    method: GET
    data_selector: threads
    params: {}
- name: fetchMessages
  endpoint:
    path: /fetchMessages
    method: GET
    data_selector: messages
    params: {}
- name: fetchStreams
  endpoint:
    path: /fetchStreams
    method: GET
    data_selector: streams
    params: {}
- name: topics
  endpoint:
    path: /fetchTopics
    method: GET
    data_selector: topics
    params: {}
- name: messages
  endpoint:
    path: /publishMessage
    method: POST
    data_selector: message
    params: {}
- name: deviceProfile
  endpoint:
    path: /deviceProfile
    method: POST
    data_selector: deviceProfile
    params: {}
- name: cordova_plugin
  endpoint:
    path: /cordova/plugin
    method: GET
    data_selector: records
    params: {}
- name: audio_attachment
  endpoint:
    path: /ICAudioAttachment
    method: GET
    data_selector: audioFiles
    params: {}
- name: NotificationFactory
  endpoint:
    path: ../src/android/NotificationFactory.java
    method: GET
    data_selector: Notification
    params: {}
- name: MessagingReceiver
  endpoint:
    path: ../src/android/MessagingReceiver.java
    method: GET
    data_selector: Void
    params: {}
- name: deleteMessageFromStore
  endpoint:
    path: /deleteMessageFromStore
    method: POST
    data_selector: transactionId
    params: {}
- name: getMessageCount
  endpoint:
    path: /getMessageCount
    method: POST
    data_selector: threadId
    params: {}
- name: saveThread
  endpoint:
    path: /saveThread
    method: POST
    data_selector: thread
    params: {}
- name: saveThreads
  endpoint:
    path: /saveThreads
    method: POST
    data_selector: threads
    params: {}
- name: loadThread
  endpoint:
    path: /loadThread
    method: POST
    data_selector: threadId
    params: {}
- name: loadThreads
  endpoint:
    path: /loadThreads
    method: POST
    data_selector: modifiedBefore, modifiedAfter, limit
    params: {}
- name: loadUnreadThreads
  endpoint:
    path: /loadUnreadThreads
    method: POST
    data_selector: limit
    params: {}
- name: deleteThread
  endpoint:
    path: /deleteThread
    method: POST
    data_selector: threadId
    params: {}
- name: getThreadCount
  endpoint:
    path: /getThreadCount
    method: POST
    data_selector: ''
    params: {}
- name: getUnReadThreadCount
  endpoint:
    path: /getUnReadThreadCount
    method: POST
    data_selector: ''
    params: {}
- name: deleteAll
  endpoint:
    path: /deleteAll
    method: POST
    data_selector: ''
    params: {}
- name: publishEvent
  endpoint:
    path: /publishEvent
    method: POST
    data_selector: eventJsonObj
    params: {}
- name: publishTypingIndicator
  endpoint:
    path: /publishTypingIndicator
    method: POST
    data_selector: threadId, isIndicatorEnabled
    params: {}
- name: deleteMessage
  endpoint:
    path: /deleteMessage
    method: POST
    data_selector: messageTransactionId
    params: {}
- name: getDeviceProfile
  endpoint:
    path: /getDeviceProfile
    method: POST
    data_selector: ''
    params: {}
- name: subscribeTopic
  endpoint:
    path: /subscribeTopic
    method: POST
- name: unsubscribeTopic
  endpoint:
    path: /unsubscribeTopic
    method: POST
- name: connectionStatusChangedListener
  endpoint:
    path: /connectionStatusChangedListener
    method: POST
- name: getConnectionStatus
  endpoint:
    path: /getConnectionStatus
    method: GET
- name: createThread
  endpoint:
    path: /createThread
    method: POST
- name: updateThread
  endpoint:
    path: /updateThread
    method: POST
- name: closeThread
  endpoint:
    path: /closeThread
    method: POST
- name: fetchThreads
  endpoint:
    path: /fetchThreads
    method: GET
- name: fetchTopics
  endpoint:
    path: /fetchTopics
    method: GET
- name: publishMessage
  endpoint:
    path: /publishMessage
    method: POST
- name: setMessageSyncPolicy
  endpoint:
    path: /setMessageSyncPolicy
    method: POST
- name: messageListener
  endpoint:
    path: /messageListener
    method: POST
- name: deeplinkListener
  endpoint:
    path: /deeplinkListener
    method: POST
- name: fetchMessages
  endpoint:
    path: /fetchMessages
    method: GET
- name: setMessageAsRead
  endpoint:
    path: /setMessageAsRead
    method: POST
- name: setMessagesAsRead
  endpoint:
    path: /setMessagesAsRead
    method: POST
- name: uploadFile
  endpoint:
    path: /uploadFile
    method: POST
- name: isFileUploading
  endpoint:
    path: /isFileUploading
    method: GET
- name: downloadFile
  endpoint:
    path: /downloadFile
    method: GET
- name: isFileDownloading
  endpoint:
    path: /isFileDownloading
    method: GET
- name: getCachedFile
  endpoint:
    path: /getCachedFile
    method: GET
- name: saveMessage
  endpoint:
    path: /saveMessage
    method: POST
- name: saveMessages
  endpoint:
    path: /saveMessages
    method: POST
- name: loadMessage
  endpoint:
    path: /loadMessage
    method: GET
- name: loadMessages
  endpoint:
    path: /loadMessages
    method: GET
- name: Firebase
  endpoint:
    path: /firebase
    method: POST
- name: IMIconnect
  endpoint:
    path: /imiconnect
    method: GET
- name: Cordova Plugin
  endpoint:
    path: /cordova-plugin
    method: POST
    data_selector: records
- name: notifications
  endpoint:
    path: /api/v1/notifications
    method: POST
    data_selector: data
    params: {}
- name: deliveryInfoNotification
  endpoint:
    path: /deliveryInfoNotification
    method: POST
    data_selector: deliveryInfoNotification
    params: {}
- name: delivery_notifications
  endpoint:
    path: /services/delivery_notifications
    method: GET
    data_selector: deliveryInfoNotification
- name: read_notifications
  endpoint:
    path: /services/read_notifications
    method: GET
    data_selector: deliveryInfoNotification
- name: iOS Delivery Info
  endpoint:
    path: /ios/delivery_info
    method: GET
    data_selector: deliveryInfoNotification
- name: Android Delivery Info
  endpoint:
    path: /android/delivery_info
    method: GET
    data_selector: deliveryInfoNotification
- name: Web Delivery Info
  endpoint:
    path: /web/delivery_info
    method: GET
    data_selector: deliveryInfoNotification
- name: Facebook Delivery Info
  endpoint:
    path: /facebook/delivery_info
    method: GET
    data_selector: deliveryInfoNotification
- name: Twitter Delivery Info
  endpoint:
    path: /twitter/delivery_info
    method: GET
    data_selector: deliveryInfoNotification
- name: WeChat Delivery Info
  endpoint:
    path: /wechat/delivery_info
    method: GET
    data_selector: deliveryInfoNotification
- name: incoming_message_notifications
  endpoint:
    path: /incoming/message/notifications
    method: POST
    data_selector: message
    params: {}
- name: SMS
  endpoint:
    path: /incoming/messages/sms
    method: POST
    data_selector: message
    params: {}
- name: RTM
  endpoint:
    path: /incoming/messages/rtm
    method: POST
    data_selector: message
    params: {}
- name: incoming_message_notifications
  endpoint:
    path: /incoming_message_notifications
    method: POST
    data_selector: notifications
    params: {}
- name: authentication
  endpoint:
    path: /authentication
    method: POST
    data_selector: auth_data
    params: {}
- name: postback
  endpoint:
    path: /postback
    method: POST
    data_selector: postback_data
    params: {}
- name: account_linking
  endpoint:
    path: /account_linking
    method: POST
    data_selector: account_linking_data
    params: {}
- name: registration_request
  endpoint:
    path: /app-profile-update-events/registration
    method: POST
    data_selector: data
    params: {}
- name: location_change
  endpoint:
    path: /app-profile-update-events/location
    method: POST
    data_selector: data
    params: {}
- name: network_change
  endpoint:
    path: /app-profile-update-events/network
    method: POST
    data_selector: data
    params: {}
- name: timezone_change
  endpoint:
    path: /app-profile-update-events/timezone
    method: POST
    data_selector: data
    params: {}
- name: roaming_change
  endpoint:
    path: /app-profile-update-events/roaming
    method: POST
    data_selector: data
    params: {}
- name: idlescreen_update
  endpoint:
    path: /app-profile-update-events/idlescreen
    method: POST
    data_selector: data
    params: {}
- name: batterylevel_update
  endpoint:
    path: /app-profile-update-events/batterylevel
    method: POST
    data_selector: data
    params: {}
- name: foregroundapp_update
  endpoint:
    path: /app-profile-update-events/foregroundapp
    method: POST
    data_selector: data
    params: {}
- name: foreground_last_opened_update
  endpoint:
    path: /app-profile-update-events/foreground_last_opened
    method: POST
    data_selector: data
    params: {}
- name: timespent_update
  endpoint:
    path: /app-profile-update-events/timespent
    method: POST
    data_selector: data
    params: {}
- name: phonemode_update
  endpoint:
    path: /app-profile-update-events/phonemode
    method: POST
    data_selector: data
    params: {}
- name: signalstrength_update
  endpoint:
    path: /app-profile-update-events/signalstrength
    method: POST
    data_selector: data
    params: {}
- name: ip_update
  endpoint:
    path: /app-profile-update-events/ip
    method: POST
    data_selector: data
    params: {}
- name: mac_update
  endpoint:
    path: /app-profile-update-events/mac
    method: POST
    data_selector: data
    params: {}
- name: cellid_update
  endpoint:
    path: /app-profile-update-events/cellid
    method: POST
    data_selector: data
    params: {}
- name: connectType_update
  endpoint:
    path: /app-profile-update-events/connectType
    method: POST
    data_selector: data
    params: {}
- name: facebook_profile_events
  endpoint:
    path: /ott/facebook
    method: POST
    data_selector: events
- name: wechat_profile_events
  endpoint:
    path: /ott/wechat
    method: POST
    data_selector: events
- name: twitter_profile_events
  endpoint:
    path: /ott/twitter
    method: POST
    data_selector: events
- name: AddToQueue
  endpoint:
    path: /addToQueue
    method: POST
    data_selector: response
    params: {}
- name: CallWorkflow
  endpoint:
    path: /callWorkflow
    method: POST
    data_selector: response
    params: {}
- name: CDR
  endpoint:
    path: /cdr
    method: POST
    data_selector: response
    params: {}
- name: Data Parser
  endpoint:
    path: /dataParser
    method: POST
    data_selector: response
    params: {}
- name: DBSelect
  endpoint:
    path: /dbSelect
    method: POST
    data_selector: response
    params: {}
- name: DBUpdate
  endpoint:
    path: /dbUpdate
    method: POST
    data_selector: response
    params: {}
- name: Error
  endpoint:
    path: /error
    method: POST
    data_selector: response
    params: {}
- name: Evaluate
  endpoint:
    path: /evaluate
    method: POST
    data_selector: response
    params: {}
- name: ExternalEvent
  endpoint:
    path: /externalEvent
    method: POST
    data_selector: response
    params: {}
- name: HTTP
  endpoint:
    path: /http
    method: POST
    data_selector: response
    params: {}
- name: ReceiveSMS
  endpoint:
    path: /receiveSMS
    method: POST
    data_selector: response
    params: {}
- name: Redirect
  endpoint:
    path: /redirect
    method: POST
    data_selector: response
    params: {}
- name: Repository
  endpoint:
    path: /repository
    method: POST
    data_selector: response
    params: {}
- name: Salesforce
  endpoint:
    path: /salesforce
    method: POST
    data_selector: response
    params: {}
- name: ServiceBundle
  endpoint:
    path: /serviceBundle
    method: POST
    data_selector: response
    params: {}
- name: SMS
  endpoint:
    path: /sms
    method: POST
    data_selector: response
    params: {}
- name: Transform
  endpoint:
    path: /transform
    method: POST
    data_selector: response
    params: {}
- name: Messaging
  endpoint:
    path: /messaging/
    method: GET
    data_selector: ''
    params: {}
- name: Create Profile
  endpoint:
    path: /createProfile
    method: POST
    data_selector: ''
    params: {}
- name: Get Profile
  endpoint:
    path: /getProfile
    method: GET
    data_selector: ''
    params: {}
- name: Update Profile
  endpoint:
    path: /updateProfile
    method: PUT
    data_selector: ''
    params: {}
- name: Delete Profile
  endpoint:
    path: /deleteProfile
    method: DELETE
    data_selector: ''
    params: {}
- name: External Event
  endpoint:
    path: /externalevent/
    method: POST
    data_selector: ''
    params: {}
- name: Transaction Status
  endpoint:
    path: /transactionstatus/
    method: GET
    data_selector: ''
    params: {}
- name: messaging
  endpoint:
    path: /resources/v1/messaging
    method: POST
- name: SMS
  endpoint:
    path: /resources/v1/messaging
    method: POST
- name: voice
  endpoint:
    path: /resources/{v1}/messaging
    method: POST
- name: Voice
  endpoint:
    path: /resources/v1/messaging
    method: POST
- name: in-app messages
  endpoint:
    path: /resources/v1/messaging
    method: POST
    data_selector: null
    params: {}
- name: channels
  endpoint:
    path: /resources/v1/messaging
    method: POST
    data_selector: response
    params: {}
- name: push_notifications
  endpoint:
    path: /resources/v1/messaging
    method: POST
- name: message
  endpoint:
    path: /v2.6/me/messages
    method: POST
    data_selector: message
- name: airline_itinerary
  endpoint:
    path: /airline/itinerary
    method: POST
    data_selector: boarding_pass
- name: airline_checkin
  endpoint:
    path: /airline/checkin
    method: POST
    data_selector: flight_info
- name: airline_boarding_pass
  endpoint:
    path: /airline/boarding_pass
    method: POST
    data_selector: boarding_pass
- name: smartlinks
  endpoint:
    path: /resources/v1/messaging
    method: POST
    data_selector: smartlinks
- name: Airline Boarding Pass
  endpoint:
    path: /airline/boarding_pass
    method: POST
    data_selector: payload
    params: {}
- name: Airline Flight Update
  endpoint:
    path: /airline/update
    method: POST
    data_selector: payload
    params: {}
- name: quick_replies
  endpoint:
    path: /
    method: POST
    data_selector: response
    params: {}
- name: messaging
  endpoint:
    path: /resources/v1/messaging
    method: POST
    data_selector: response
    params: {}
- name: channels
  endpoint:
    path: /resources/v1/messaging
    method: POST
    data_selector: channels
- name: messaging
  endpoint:
    path: /resources/v1/messaging
    method: POST
- name: messaging
  endpoint:
    path: /resources/v1/messaging
    method: POST
- name: sms
  endpoint:
    path: /sms
    method: POST
    data_selector: message
    params:
      deliverychannel: sms
- name: voice
  endpoint:
    path: /voice
    method: POST
    data_selector: message
    params:
      deliverychannel: voice
- name: rt
  endpoint:
    path: /rt
    method: POST
    data_selector: message
    params:
      deliverychannel: rt
- name: push
  endpoint:
    path: /push
    method: POST
    data_selector: message
    params:
      deliverychannel: push
- name: fb
  endpoint:
    path: /fb
    method: POST
    data_selector: message
    params:
      deliverychannel: fb
- name: twitter
  endpoint:
    path: /twitter
    method: POST
    data_selector: message
    params:
      deliverychannel: twitter
- name: wechat
  endpoint:
    path: /wechat
    method: POST
    data_selector: message
    params:
      deliverychannel: wechat
- name: Custom Event v1
  endpoint:
    path: /reference/external-event
    method: POST
    data_selector: events
    params: {}
- name: externalevent
  endpoint:
    path: /resources/v1/events/externalevent/
    method: POST
- name: custom_event_v2
  endpoint:
    path: /events/<eventID>
    method: POST
    data_selector: object
- name: getProfile
  endpoint:
    path: /getProfile
    method: GET
    data_selector: ''
    params:
      customerid: Service Provider specific ID
- name: getAppProfile
  endpoint:
    path: /getAppProfile
    method: GET
    data_selector: ''
    params:
      customerid: Service Provider specific ID
      appid: Application ID
- name: createProfile
  endpoint:
    path: /createProfile
    method: POST
    data_selector: ''
    params:
      attributes: Array of strings defining a customer profile
- name: createAppProfile
  endpoint:
    path: /createAppProfile
    method: POST
    data_selector: ''
    params:
      appid: Application ID
- name: updateProfile
  endpoint:
    path: /updateProfile
    method: PUT
    data_selector: ''
    params:
      customerid: Service Provider specific ID
      attributes: Array of strings defining a customer profile
- name: updateAppProfile
  endpoint:
    path: /updateAppProfile
    method: PUT
    data_selector: ''
    params:
      appid: Application ID
      appprofilekey: Application Profile key
- name: deleteProfile
  endpoint:
    path: /deleteProfile
    method: DELETE
    data_selector: ''
    params:
      customerid: Service Provider specific ID
- name: deleteAppProfile
  endpoint:
    path: /deleteAppProfile
    method: DELETE
    data_selector: ''
    params:
      appid: Application ID
      appprofilekey: Application Profile key
- name: create_profile
  endpoint:
    path: /resources/v2/customerprofile
    method: POST
    data_selector: Records
- name: create_app_profile
  endpoint:
    path: /resources/v2/customerappprofile/<appid>
    method: POST
    data_selector: Records
- name: get_profile
  endpoint:
    path: /resources/v1/customerprofile/<customerid>
    method: GET
    data_selector: Records
- name: customer_app_profile
  endpoint:
    path: /resources/v1/customerappprofile
    method: GET
    data_selector: Records
- name: get_app_profile
  endpoint:
    path: /resources/v1/customerappprofile/<appid>/<customerid>
    method: GET
    data_selector: ''
- name: get_profile_status
  endpoint:
    path: /resources/v2/profile/status/{transactionid}
    method: GET
- name: update_profile
  endpoint:
    path: /resources/v2/customerprofile
    method: PUT
- name: update_app_profile
  endpoint:
    path: /resources/v2/customerprofiles/<appid>
    method: PUT
- name: delete_profile
  endpoint:
    path: /resources/v2/customerprofile/<customerid>
    method: DELETE
- name: delete_app_profile
  endpoint:
    path: /resources/v2/customerappprofile/<appid>/<customerid>
    method: DELETE
- name: delete_device_app_profile
  endpoint:
    path: /resources/v2/customerappprofile/<appid>/<customerid or userid>/<deviceid>
    method: DELETE
- name: list_streams
  endpoint:
    path: /apps/$(appid)/streams
    method: GET
    data_selector: null
    params: {}
- name: app_threads
  endpoint:
    path: /api/v1/apps/$(appid)/threads
    method: GET
    params:
      start: 0
- name: user_messages
  endpoint:
    path: /rtmsAPI/api/v1/apps/$(appid)/user/$(userid)/threads/$(threadid)/messages
    method: GET
    data_selector: messages
    params:
      from: <datetime>
- name: create_thread
  endpoint:
    path: /api/v1/apps/$(appid)/threads
    method: POST
- name: user_threads
  endpoint:
    path: /api/v1/apps/PO05125832/user/1723/threads
    method: GET
    params:
      start: '0'
- name: user_messages
  endpoint:
    path: /api/v1/apps/$(appid)/user/$(userid)/threads
    method: GET
    data_selector: messages
    params:
      start: '0'
- name: user_messages_v2
  endpoint:
    path: /api/v2/apps/$(appid)/user/$(userid)/threads
    method: GET
    params:
      start: '0'
- name: update_thread
  endpoint:
    path: /api/v1/apps/$(appid)/user/$(userid)/threads/$(threadid)/update
    method: POST
- name: Create Segment
  endpoint:
    path: /reference/create
    method: POST
- name: Delete Segment
  endpoint:
    path: /reference/delete-1
    method: DELETE
- name: List Segments in a App
  endpoint:
    path: /reference/list-1
    method: GET
- name: Update a Segment
  endpoint:
    path: /reference/update
    method: POST
- name: Add Users to a Segment
  endpoint:
    path: /reference/add-users
    method: POST
- name: Delete Users from Segment
  endpoint:
    path: /reference/delete-users-from-segment
    method: DELETE
- name: Get All Users of a Segment
  endpoint:
    path: /reference/get-all-users
    method: GET
- name: create_segment
  endpoint:
    path: /rtmsAPI/api/v1/apps/$(appid)/segments
    method: POST
- name: delete_segment
  endpoint:
    path: /apps/$(appid)/segments/$(segmentid)
    method: DELETE
- name: list_segments
  endpoint:
    path: /rtmsAPI/api/v1/apps/$(appid)/segments
    method: GET
    data_selector: segments
- name: add_users_to_segment
  endpoint:
    path: /rtmsAPI/api/v1/apps/$(appid)/segments/$(segmentid)
    method: POST
    data_selector: trans_id
- name: get_all_users_of_a_segment
  endpoint:
    path: /apps/$(appid)/segments/$(segmentid)
    method: GET
    params:
      start: '0'
- name: topic
  endpoint:
    path: /reference/generateotp
    method: POST
- name: list_topic
  endpoint:
    path: /reference/list
    method: GET
- name: get_topic
  endpoint:
    path: /reference/get-2
    method: GET
- name: subscribe
  endpoint:
    path: /reference/subscribe
    method: POST
- name: get_all_subscribers
  endpoint:
    path: /reference/get-all-subscribers
    method: GET
- name: get_all_topics
  endpoint:
    path: /reference/get-all-topics
    method: GET
- name: unsubscribe_user
  endpoint:
    path: /reference/unsubscribe-user-from-topics
    method: DELETE
- name: create_topic
  endpoint:
    path: /rtmsAPI/api/v1/apps/$(appid)/topics
    method: POST
    data_selector: response
    params: {}
- name: delete_topic
  endpoint:
    path: /rtmsAPI/api/v1/apps/$(appid)/topics/$(topicid)
    method: DELETE
- name: list_all_topic
  endpoint:
    path: /list
    method: GET
- name: get_topic
  endpoint:
    path: /rtmsAPI/api/v1/apps/$(appid)/topics/$(topicid)
    method: GET
- name: subscribe_users_to_topic
  endpoint:
    path: /rtmsAPI/api/v1/apps/$(appid)/topics/$(topicid)/users
    method: POST
- name: subscribers
  endpoint:
    path: /apps/$(appid)/topics/$(topicid)/users
    method: GET
    data_selector: users
    params:
      start: '0'
- name: Get All Topics of a Subscriber
  endpoint:
    path: /rtmsAPI/api/v1/apps/$(appid)/users/$(userid)/topics
    method: GET
    params:
      start: '0'
      subscribed: true/false/both
- name: unsubscribe_users
  endpoint:
    path: /rtmsAPI/api/v1/apps/$(appid)/topics/$(topicid)/users
    method: DELETE
    params:
      users: $(users)
- name: unsubscribe_user_from_topics
  endpoint:
    path: /api/v1/apps/$(appid)/user/$(userid)/topics
    method: DELETE
- name: set_user_id
  endpoint:
    path: /app/{appid}/setuserid
    method: POST
    data_selector: null
    params: {}
notes:
- HSM type APIs can only be used to send text-based notification messages.
- WeChat restricts the official accounts to initiate an interaction.
- WeChat limits the official accounts to push messages only within 48-hours of the
  incoming message from the customers.
- Web push notifications are not supported in private browsing mode.
- When you regenerate the service key, ensure to update the service key in the API
  calls.
- You cannot delete a rule. If a rule is no longer used in any service, from the drop-down
  make the rule Inactive. The rule will be deactivated.
- When a missed call is received, an outbound call gets initiated to the customer.
- The log file is downloaded in a zip format and is password protected.
- The 8 character password is a combination of the first 4 characters of your logged
  in user ID and the first 4 characters of your domain name.
- Export logs to excel format, password protected with user ID and domain.
- Domain Keys Identified Mail (DKIM) provides proof that the email you send originates
  from your domain and is authentic.
- You cannot configure a Persistent menu unless you configure the Welcome screen.
- A flow must begin with a 'Start' node and terminate with an 'End Event' of a node.
- All nodes in a flow must be stitched using a connector and appropriately configured.
- Ensure all error and warnings are fixed, before publishing a flow.
- The decryption method uses AWS - Key management service.
- Data encryption allows sensitive data such as bank account details of a customer
  to be transported securely over public internet.
- The OTP node must be used in conjunction with Send and Receive nodes.
- Node can be configured to facilitate flow wait across 'Custom event' and 'Channels
  events' simultaneously.
- Default value is 20 seconds for Time Out.
- This node supports operations on Lead and Case objects.
- Default value for Time Out is 20 seconds.
- By default, the flow waits for the next available social hour window.
- The default delay time is 30 minutes and the maximum delay time is 120 minutes.
- NLP node provides intelligence modules for input text processing.
- NLP Premium node gives you additional intelligence modules that provide much more
  complex capabilities.
- Allows recording of voice calls with customizable options.
- Custom parameter payload passed to voice workflows should be limited to 5kb.
- You cannot make a flow live if the flow has errors, however, you can save it as
  draft flow.
- Enghouse is truncating the messages with more than 1024 characters sent through
  OTT/RT channels which causes missing of actual message.
- SFB is used as a customer end-point.
- The integration between BOT platform and IMIConnect is setup using webhooks.
- User must configure the Webhook URL on which the BOT will receive the events from
  IMIconnect.
- Webhook must be re-verified after five consecutive failures.
- You should have all the HTTPS URL ready for REST integration and WSDL file for SOAP
  integration.
- To schedule an event using Event Scheduler, it is mandatory to create a custom event
  and a rule that is configured with custom event.
- To invoke an event successfully, it is mandatory to match uploaded files' header
  parameters with the event parameters.
- Only one file can be uploaded.
- You need to activate the Logbook to use it in the flow.
- Your account administrator should have been provided a URL to the imiconnect Portal,
  this URL is unique to your account.
- The IMIconnect SDK supports Android version 4.0 and above.
- Ensure you use the same name for your Application class as specified in your AndroidManifest.xml
- OTPs are sent to the users device as an SMS.
- One-time passwords generated by the platform are valid for 30 minutes.
- Connect method enables messages sent from IMIconnect to be received on the app.
- IMIconnect will return a subset of the results when the topic list is large.
- Ensure to configure Core SDK accurately.
- The style is applied to the ICConversationRecyclerView component rather than the
  fragment itself.
- Ensure to call super implementation when overriding AppDelegate methods.
- This interface has two classes that handles the SDK initialization and registration.
- The Conversation System requires the Core SDK to be correctly configured before
  the system will function.
- Uses OAuth2 with refresh token — requires setup of connected app in api
- This module enables publication and receipt of Real Time Messages and Push notifications.
- Uses OAuth2 for authentication
- Default unique deviceId can be retrieved from connect plugin using IMIconnectPlugin.getDefaultDeviceId()
  method
- Ensure to install npm and Cordova before setting up the plugin
- Requires Xcode for iOS application setup
- The SDK must be initialized before attempting to use any of its features.
- IMIconnect Core plugin 2.0.0 supports Firebase versions 11.0.0 and higher.
- This section is only required if you intend to use rich notifications.
- Cordova installation requires npm and Node to be installed.
- Xcode 8.0 and above is required for iOS setup.
- Requires setup of APNs and FCM for push notifications.
- For more information on status code description, see Channel Specific Status Codes.
- Different channels have different capabilities in-terms of the kind of the receipts
  that are available.
- An active account on IMIconnect platform is required.
- An SMPP account must be created for a client on IMIconnect platform.
- Fixed various issues with push notification registration and actions.
- Various minor bug fixes and improvements.
- 'Delete message: The method named ''deleteMessage'' does not have back-end support
  and will throw an exception if used.'
- Either text or attachment or sender_action is mandatory.
- The timezone format must be in ISO 8601-based format YYYY-MM-DDThh:mm.
- Requires authentication for inbound events
- Profile details are encapsulated within the Attributes section.
- Additional key value pairs may be added as required.
- This API is used to fetch thread message information for a specific threadId under
  a app and sync all the devices of a specific user.
- If the segment is without criteria and there are existing users in that segment,
  then the segment cannot be deleted.
- This API is used to list the topics for a specific appID.
- A maximum of 50 records can be returned (if available).
errors:
- '404 Not Found: Check the endpoint path'
- '400 Bad Request: Verify the request parameters and structure'
- 812 Rule execution success
- 813 Rule execution failed
- 'DisabledException: The request was rejected because the specified customer master
  keys (CMK) is not enabled.'
- 'InvalidCiphertextException: The request was rejected because the specified cipher
  text has been corrupted or is otherwise invalid.'
- 'InvalidGrantTokenException: The request was rejected because the specified grant
  token is not valid.'
- 'KMSInternalException: The request was rejected because an internal exception occurred.
  The request can be retried.'
- 'KMSInvalidStateException: The request was rejected because the state of the specified
  resource is not valid for this request.'
- 'NotFoundException: The request was rejected because the specified entity or resource
  could not be found.'
- 'ondependencytimeout: The system timed out while trying to fulfill the request.
  The request can be retried.'
- 'onsuccess: This event is triggered if the node flow is completed successfully.'
- 'onerror: This event is triggered if an error occurs.'
- 'onkeyunavailable: The request was rejected because the specified CMK was not available.
  The request can be retried.'
- 'INVALID_PARAMETER: Ensure all parameters are correctly set.'
- 'TIMEOUT: Check for network connectivity issues.'
- 7120 - This error code appears when the payload size exceeds 5Kb.
- 'ICErrorCode.FeatureNotSupported: Authentication not enabled for the app configuration
  in the platform.'
- 'ICErrorCode.RestFailure: Rest error occurred, query the ICRestException for more
  info'
- 'DEVICE_NOT_REGISTERED: Ensure device is registered before using other features.'
- 'MESSAGE_DELIVERY_FAILED: Check connection status or topic subscription.'
- 'REQUEST_LIMIT_EXCEEDED: Throttle API calls or reduce frequency'
- 'NotRegistered: Returned when the app is not registered with IMIconnect.'
- 'NotConnected: Returned when the app is not connected to IMIconnect'
- 'FeatureNotSupported: Returned when the feature is not supported in IMIconnect.'
- '401 Unauthorized: Recheck OAuth scopes or token expiration'
- 'INVALID_APP_ID: Check if the App ID is correctly configured.'
- 'UNAUTHORIZED: Verify client credentials and permissions.'
- 'Invalid app credentials(Invalid OAuth): Check your OAuth configuration'
- 'Unregistered Device: Ensure the device is registered'
- '7500: Delivered'
- '7501: Submitted'
- '7004: Invalid parameters/Values'
- '7006: Internal server error'
- '7101: Invalid Sender ID'
- '7102: Invalid address'
- '7109: User in DnD'
- '7201: Delivery failed at Operator'
- '7202: Delivery failed at platform'
- '7203: Unknown Subscriber address'
- '7204: Insufficient Credits in subscriber account'
- '7205: Error in Binary message'
- '7206: Can''t deliver. Subscriber SIM Full'
- '7207: Subscriber out of coverage area or not reachable'
- '7208: Message expired'
- '7209: Unable to deliver multipart message'
- '7210: Billing Configuration error'
- '7211: Billing error at operator'
- '7503: Message expired before delivery attempt'
- '7504: Authentication error'
- '7505: Too large payload ( >4kb)'
- '7506: Invalid time to live value'
- '7507: Too many requests for the App'
- '7508: GCM server error'
- '7509: Too many concurrent requests for same customer'
- '7510: Too big payload'
- '7511: Invalid time to live value'
- '7512: Invalid push id'
- '7513: Unregistered Device'
- '7514: Wrong apns certificate gateway'
- '7515: Bad apns certificate'
- '7516: Too many request for the same device'
- '7517: APNS server error'
- '7518: Unknown'
- '7520: Bounce'
- '7521: Complaint'
- '7522: Email address is not verified'
- '7523: Invalid email address'
- '7241: EmailId in unsubscribe blacklist'
- '3001: validation fail'
- '3002: add to queue exception'
- '3003: add to queue fail'
- '3002: workflow not available'
- '3002: CDR insertion exception'
- '3003: CDR insertion fail'
- '3002: invalid datatype'
- '3003: mandatory path not found'
- '3004: exception'
- '3002: query execution fail'
- '3001: exception occur'
- '3002: normal error execution'
- '3002: script execution fail'
- '3003: invalid result'
- '3002: invalid event occurs'
- '3002: http exception'
- '3003: http response null'
- '3002: message not available'
- '3003: endpoint unreachable'
- '3004: gateway exception'
- '3002: transform exception'
- '0x00000001: ESME_RINVMSGLEN - Message Length is too long'
- '0x00000002: ESME_RINVCMDLEN - Command length is invalid'
- '0x00000003: ESME_RINVCMDID - Command ID is invalid or not supported'
- '0x00000004: ESME_RINVBNDSTS - Incorrect bind status for given command'
- '0x00000005: ESME_RALYBND - ESME Already in Bound State'
- '0x00000006: ESME_RINVPRTFLG - Invalid Priority Flag'
- '0x00000007: ESME_RINVREGDLVFLG - Invalid registered delivery flag'
- '0x00000008: ESME_RSYSERR - System error'
- '0x0000000A: ESME_RINVSRCADR - Invalid source address'
- '0x0000000B: ESME_RINVDSTADR - Invalid destination address'
- '0x0000000D: ESME_RBINDFAIL - Bind failed'
- '0x0000000E: ESME_RINVPASWD - Invalid password'
- '0x0000000F: ESME_RINVSYSID - Invalid System ID'
- '0x00000014: ESME_RMSSQFUL - Message queue full'
- '0x00000043: ESME_RINVESMCLASS - Invalid esm class field data'
- '0x00000058: ESME_RTHROTTLED - Throttling error (ESME has exceeded allowed message
  limits)'
- '0x00000061: ESME_RINVSCHED - Invalid scheduled delivery time'
- '0x00000062: ESME_RINVEXPIRY - Invalid message validity period(Expiry time)'
- '0x000000C0: ESME_RINVTLVSTREAM - Error in the optional part of the PDU body'
- '0x000000C2: ESME_RINVTLVLEN - Invalid parameter length'
- '0x000000FE: ESME_RDELIVERYFAILURE - Transaction delivery failure'
- '0x000000FF: ESME_RUNKNOWNERR - Unknown error'
- '7008: Inactive profile'
- '7010: Service provider exception'
- '7011: Unknown exception'
- '7019: Request expired'
- '7020: You have reached maximum transaction limit'
- '7103: Not enough credits'
- '7104: Invalid app ID'
- '7105: Customer profile not found'
- '7106: Channel not configured'
- '7107: Message length exceeded'
- '7108: Invalid template'
- '7110: User is not active'
- '7111: Span content detected'
- '7112: Invalid message type'
- '7113: Social hours'
- '7114: Configuration Error. Please contact admin'
- '7115: Rate plan not defined'
- '7116: Destination profile is not verified'
- '7117: RTM is not enabled for this app'
- '7118: Push is not enabled for this app'
- '7119: Destination profile doesn''t have OS details'
- '7120: Voice parameters length exceeded'
- '7121: Replaceable parameters could not be fetched.'
- '7200: Unknown status'
- '7209: Unable to deliver multi-part message'
- '7212: Invalid registration'
- '7213: Unregistered'
- '7214: Cloud specific failure'
- '7301: Message expired'
- '7302: Rate limit exceeded'
- '7303: Delivery notification of a message expired'
- '7304: Invalid app credentials(Invalid OAuth)'
- '7305: Invalid user credentials'
- '7306: Duplicate message for twitter'
- '7307: End point not reachable (FB is not reachable)'
- '7401: No answer'
- '7402: Customer busy'
- '7403: Call rejected'
- '7404: Others'
- '7502: Read'
- '7507: Too many requests for the app'
- '7512: Invalid push ID'
- '7514: Wrong APNs certificate gateway'
- '7515: Bad APNs certificate'
- '7517: APNs server error'
- '7600: No results found'
- '7601: Transaction is not under this service or service key is invalid'
- '7602: User presence failure'
- '7603: Invalid media file type'
- '7604: Invalid file type'
- '7605: Invalid file size'
- '7606: Invalid media file ID'
- '7607: Invalid message type'
- '7608: Invalid image file size'
- '7609: Invalid audio file size'
- '7610: Invalid video file size'
- '7611: Invalid thumbnail file size'
- '7612: Invalid App ID'
- '7613: Invalid access token'
- '7614: Invalid oauth code'
- '7615: Invalid refresh token'
- '7616: Invalid openid list'
- '7617: Invalid openid list length'
- '7618: Invalid request characters: The character uxxxx cannot be included'
- '7619: Invalid parameters'
- '7620: Invalid request format'
- '7621: Invalid URL length'
- '7622: Parameter missing: access token'
- '7623: Parameter missing: appid'
- '7624: Parameter missing: refresh token'
- '7625: Parameter missing: secret'
- '7626: Multimedia file data missing'
- '7627: Parameter missing: media ID'
- '7628: The other user is not yet a follower'
- '7629: The other user is not yet a follower'
- '7630: Rich media message is empty'
- '7631: Text message is empty'
- '7632: Error source: multimedia file size'
- '7633: Message contents too long'
- '7634: Title too long'
- '7635: Description too long'
- '7636: URL too long'
- '7637: Image URL too long'
- '7638: Audio play time over limit'
- '7639: Rich media messages over limit'
- '7640: Error source: interface call'
- '7641: Message quantity over limit'
- '7642: This user does not exist'
- '7643: Invalid image file type (invalid file type)'
- '7000: Invalid JSON'
- '7001: Authentication failed'
- '7002: Service Key Missing'
- '7003: any one of [customerid,msisdn,email, userid,pushid,psid, twitterid, wechatid]
  is mandatory'
- '7004: invalid value for param ''priority'', it should be one of [1,2,3,4,5]'
- '7005: Request expired'
- '7006: Internal error occurred'
- '7007: Service Inactive'
- '7008: Inactive Profile'
- '7009: Maximum number of destination address'
- '7010: Source IP is not whitelisted'
- '7011: Unknown Exception'
- '7104: Invalid app id'
- '7111: Spam content detected'
- '7114: Configuration Error. Please contact admin.'
- '7118: push is not enabled for this app'
- '7120: Voice params length exceeded'
- '7121: Replaceable params could not be fetched.'
- '7200: Unknown Status'
- '7208: Source ip is not white listed'
- '7209: Message expired'
- '7210: Unable to deliver multipart message'
- '7211: Billing Configuration error'
- '7307: End point not reachable(FB is not reachable)'
- '7501: Submited'
- '7600: no results found'
- '7601: transaction is not under this service or service key is invalid'
- '7601: Verification failed'
- '7602: user presence failure'
- '7602: Invalid WeChat User ID'
- '7603: either validation failed for request or user verification failure'
- '7627: Parameter missing: media id'
- '7642: This user does not exist.'
- '1001: Queued'
- '7002: Service key missing'
- '7003: Mandatory parameters missing'
- '7004: Invalid parameters'
- '7007: Service inactive'
- '7009: Max number of destinations'
- '1002: Queued'
- '7004: Invalid parameters/values'
- '7005: Internal error occurred'
- '7025: Mandatory custom parameters missing'
- '7027: Invalid XML'
- '400: Bad Request'
- '7012: Batch size limit(100) exceeded'
- '7014: Customer not found'
- '7015: Customer already exists'
- '1000: Queued'
- '7000: invalid JSON'
- '7010: Source IP is not white listed'
- '7011: Invalid Attribute Value'
- '7015: customer already exists'
- '1002: Partial success'
- '7018: invalid app profile or app profile is not linked to this client'
- '1000: Success'
- '7600: No result found'
- '7010: Source ip is not white listed'
- '7018: Invalid app profile or app profile not linked to this client.'
- '7203: Customer not found'
- '7208: Source IP is not whitelisted'
- '7014: app profile not found'
- '400 Bad Request: Ensure all mandatory parameters are included in the request'
- '401 Unauthorized: Check if the secretKey is valid'
- '404 Not Found: Verify the app ID and user ID'
- '1: Internal error while processing the request'
- '2: Topic already exists'
- '3: Required Attributes Missing'
- '4: invalid request'
- '5: Appid/Topic does not exist'
- '7: UserId is not exist'
- '11: Secret key is missing in header'
- '14: AppId is required'
- '26: secretkey is invalid'
- '31: Stream not found for given appId and userId'
- 38 - Invalid token
- 39 - Token is required to access the requested resource.
- 40 - Token expired
- '7700: Workflow session not available with the given information.'
- '7701: Workflow service not available with the given information.'
- '7003: param ''text'' is missing for android'
- '7003: param ''text'' is missing for ios'
- '7003: param ''push'' missing for push channel'
- '7003: either android or ios information is mandatory for push channel'
- '7003: param ''text'' missing for channel fb'
- '7003: param ''OTT-Messaging'' missing for channel fb'
- '7003: param ''fb'' missing for channel fb'
- '7003: param ''text'' missing for channel wechat'
- '7003: param ''wechat'' missing for channel wechat'
- '7003: param ''OTT-Messaging'' missing for channel wechat'
- '7003: param ''text'' missing for channel whatsapp'
- '7003: param ''whatsapp'' missing for channel whatsapp'
- '7003: param ''OTT-Messaging'' missing for channel whatsapp'
- '7003: param ''text'' missing for channel twitter'
- '7003: param ''twitter'' missing for channel twitter'
- '7003: param ''OTT-Messaging'' missing for channel twitter'
- '7003: param ''text'' missing for channel rt'
- '7003: param ''appmessaging'' missing for channel rt'
- '7003: param ''body'' missing for channel sms'
- '7003: param ''text'' missing for channel sms'
- '7003: param ''sms'' missing for channel sms'
- '7003: either param ''callflowid'' or param ''media'' is required'
- '7003: param ''voice'' missing for channel voice'
- '7003: No destination channel information found in request'
- '7003: param ''deliverychannel'' missing'
- '7003: mandatory param device_types missing'
- '7003: mandatory param value missing for action xxx'
- '7003: mandatory param pos missing'
- '7003: mandatory param category missing'
- '7003: mandatory param actions missing'
- '7003: customerId is missing'
- '7003: mandatory param access_token missing'
- '7003: mandatory param access_token_expiry missing'
- '7003: mandatory param psid missing'
- '7003: mandatory param access_token_secret missing'
- '7003: mandatory param screenName missing'
- '7003: mandatory param twitter_user_id missing'
- '7003: mandatory param connectStatus missing'
- '7003: mandatory param deviceId missing'
- '7003: mandatory param rtmId missing'
- '7003: mandatory param wechat_user_id missing'
- '7003: mandatory param msisdn missing'
- '7003: mandatory param status missing or it is empty'
- '7003: invalid value for param status, only values [0,1] are allowed'
- '7004: invalid value of param ''type'' , only [1,2,3,4] are allowed'
- '7004: invalid delivery channel'
- '7004: invalid device type xxx, only ios or android is allowed'
- '7004: duplicate device type xxx'
- '7004: invalid value of param pos, duplicate values for pos are not allowed'
- '7004: invalid value of param action or action is invalid for this channel'
- '7004: invalid value of param value, specified value is invalid for action xxx'
- '7004: invalid action for identifier xxx'
- '7004: invalid identifier or no actions mapped for this identifier'
- '7004: no identifier found for this category and at this position'
- '7004: Invalid value of param pos, only positions [xx,xx] are allowed for this category'
- '7004: Invalid number of actions, expected actions size xx, but found xx'
- '7004: Invalid value of param category or no identifiers mapped to this category'
- '7004: Invalid value for param *evtid*'
- '7010: Service provider exceptioni'
- '7011: invalid value for param status, only values [0,1] are allowed'
- '7013: Master profile store not found'
- '7015: app profile already exists'
- '7016: Unknwon error'
- '7017: Profile attribute doesn''t exist'
- '7201: Invalid Profile'
- '7202: Invalid attribute'
auth_info:
  mentioned_objects:
  - ICUserAuthentication
  - ICUserAuthenticationCallback
  - ICConfig
  - IMIconnectPlugin
  - ICDeviceProfile
  - ICMessage
  - ICThread
  - service key
client:
  base_url: https://api.imiconnect.io
  headers:
    Content-Type: application/json
source_metadata: null
