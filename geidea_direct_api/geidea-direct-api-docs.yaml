resources:
- name: Create Session
  endpoint:
    path: /reference/create-session-v2-1
    method: POST
- name: Fetch All or Search Payment Links
  endpoint:
    path: /reference/find-list-of-payment-links
    method: GET
- name: Update Payment Link
  endpoint:
    path: /reference/update-payment-links
    method: PUT
- name: Fetch Payment Link Details
  endpoint:
    path: /reference/get-payment-link-by-id
    method: GET
- name: Delete Payment Link
  endpoint:
    path: /reference/delete-payment-link
    method: DELETE
- name: Send Payment link by Email
  endpoint:
    path: /reference/send-by-email-1
    method: POST
- name: Send Payment Link by SMS
  endpoint:
    path: /reference/send-payment-link-by-sms-1
    method: POST
- name: Capture Transaction
  endpoint:
    path: /reference/capture-transaction-1
    method: GET
- name: Void Payment
  endpoint:
    path: /reference/void-payment-1
    method: POST
- name: Refund - Full or Partial
  endpoint:
    path: /reference/refund-1-1
    method: POST
- name: Cancel Order
  endpoint:
    path: /reference/cancel-order-2
    method: POST
- name: Fetch all or Search Transactions or Orders
  endpoint:
    path: /reference/fetch-or-search-all-transactions-1
    method: GET
- name: Get Order Details
  endpoint:
    path: /reference/get-order-details
    method: GET
- name: create_session
  endpoint:
    path: /reference/create-session-v2-1
    method: post
- name: fetch_payment_links
  endpoint:
    path: /reference/find-list-of-payment-links
    method: get
- name: update_payment_link
  endpoint:
    path: /reference/update-payment-links
    method: put
- name: fetch_payment_link_details
  endpoint:
    path: /reference/get-payment-link-by-id
    method: get
- name: delete_payment_link
  endpoint:
    path: /reference/delete-payment-link
    method: del
- name: send_payment_link_email
  endpoint:
    path: /reference/send-by-email-1
    method: post
- name: send_payment_link_sms
  endpoint:
    path: /reference/send-payment-link-by-sms-1
    method: post
- name: capture_transaction
  endpoint:
    path: /reference/capture-transaction-1
    method: get
- name: void_payment
  endpoint:
    path: /reference/void-payment-1
    method: post
- name: refund_transaction
  endpoint:
    path: /reference/refund-1-1
    method: post
- name: cancel_order
  endpoint:
    path: /reference/cancel-order-2
    method: post
- name: fetch_transactions
  endpoint:
    path: /reference/fetch-or-search-all-transactions-1
    method: get
- name: get_order
  endpoint:
    path: /reference/get-order-by-id-1
    method: get
- name: retrieve_token
  endpoint:
    path: /reference/retrieve-token-1
    method: get
- name: get_order_by_merchant_reference
  endpoint:
    path: /reference/fetch-transaction-or-order-by-merchant-reference-1
    method: get
- name: create_session
  endpoint:
    path: /create-session
    method: POST
    data_selector: session
    params: {}
- name: create_session
  endpoint:
    path: /payment-intent/api/v2/direct/session
    method: POST
    data_selector: session.id
- name: create_session
  endpoint:
    path: /checkout/session
    method: POST
    data_selector: session
    params:
      amount: amount
      currency: currency
      timestamp: timestamp
      signature: signature
      callbackUrl: callbackUrl
      language: language
      returnUrl: returnUrl
- name: payment_link
  endpoint:
    path: /api/payment-link
    method: POST
    data_selector: paymentLinks
- name: static_pay_link
  endpoint:
    path: /static_payment_link
    method: POST
    data_selector: payment_link_details
    params: {}
- name: create_session
  endpoint:
    path: /payment-intent/api/v2/direct/session
    method: POST
    data_selector: session.id
- name: payment_link
  endpoint:
    path: /payment-links
    method: POST
    data_selector: link_details
- name: create_payment_link
  endpoint:
    path: /reference/create-payment-link
    method: POST
- name: update_payment_link
  endpoint:
    path: /reference/update-payment-links
    method: PUT
- name: fetch_payment_link_details
  endpoint:
    path: /reference/get-payment-link-by-id
    method: GET
- name: fetch_all_or_search_payment_links
  endpoint:
    path: /reference/find-list-of-payment-links
    method: GET
- name: send_payment_link_by_email
  endpoint:
    path: /reference/send-by-email-1
    method: POST
- name: send_payment_link_by_sms
  endpoint:
    path: /reference/send-payment-link-by-sms-1
    method: POST
- name: static_payment_link
  endpoint:
    path: /api/static_payment_link
    method: POST
    data_selector: payment_links
    params: {}
- name: payment_link
  endpoint:
    path: /payment-intent/api/v1/direct/eInvoice
    method: POST
    data_selector: paymentIntent
    params: {}
- name: update_payment_link
  endpoint:
    path: /payment-intent/api/v1/direct/eInvoice
    method: PUT
    data_selector: paymentIntent
    params: {}
- name: delete_payment_link
  endpoint:
    path: /payment-intent/api/v1/direct/eInvoice/{paymentIntentId}
    method: DELETE
    data_selector: ''
    params: {}
- name: send_payment_link_email
  endpoint:
    path: /payment-intent/api/v1/direct/eInvoice/{paymentIntentId}/SendByEmail
    method: POST
    data_selector: ''
    params: {}
- name: create_payment_link
  endpoint:
    path: /reference/create-payment-link
    method: POST
- name: update_payment_link
  endpoint:
    path: /reference/update-payment-links
    method: PUT
- name: delete_payment_link
  endpoint:
    path: /reference/delete-payment-link
    method: DELETE
- name: fetch_payment_link_details
  endpoint:
    path: /reference/get-payment-link-by-id
    method: GET
- name: fetch_all_payment_links
  endpoint:
    path: /reference/find-list-of-payment-links
    method: GET
- name: send_payment_link_by_email
  endpoint:
    path: /reference/send-by-email-1
    method: POST
- name: send_payment_link_by_sms
  endpoint:
    path: /reference/send-payment-link-by-sms-1
    method: POST
- name: send_payment_link_by_sms
  endpoint:
    path: /payment-intent/api/v1/direct/eInvoice/{paymentIntentId}/sendBySms
    method: POST
    data_selector: paymentIntent
- name: payment_link
  endpoint:
    path: /payment-intent/api/v1/direct/eInvoice
    method: POST
    data_selector: paymentIntent
    params: {}
- name: initiate_authentication
  endpoint:
    path: /pgw/api/v6/direct/authenticate/initiate
    method: POST
    data_selector: response
    params: {}
- name: authenticate_payer
  endpoint:
    path: /pgw/api/v6/direct/authenticate/payer
    method: POST
    data_selector: ''
    params: {}
- name: update_payment_link
  endpoint:
    path: /payment-intent/api/v1/direct/eInvoice
    method: PUT
    data_selector: paymentIntent
    params: {}
- name: delete_payment_link
  endpoint:
    path: /payment-intent/api/v1/direct/eInvoice/{paymentIntentId}
    method: DELETE
    data_selector: ''
    params: {}
- name: send_payment_link_by_email
  endpoint:
    path: /payment-intent/api/v1/direct/eInvoice/{paymentIntentId}/SendByEmail
    method: POST
    data_selector: ''
    params: {}
- name: send_payment_link_by_sms
  endpoint:
    path: /payment-intent/api/v1/direct/eInvoice/{paymentIntentId}/sendBySms
    method: POST
    data_selector: paymentIntent
    params:
      paymentIntentId: string
- name: pay
  endpoint:
    path: /pgw/api/v2/direct/pay
    method: POST
    data_selector: null
    params: {}
- name: payment
  endpoint:
    path: /api/pay
    method: POST
    data_selector: order
    params: {}
- name: initiate_authentication
  endpoint:
    path: /pgw/api/v6/direct/authenticate/initiate
    method: POST
    data_selector: null
    params: {}
- name: authenticate_payer
  endpoint:
    path: /pgw/api/v6/direct/authenticate/payer
    method: POST
    data_selector: response
    params: {}
- name: session
  endpoint:
    path: /payment-intent/api/v2/direct/session
    method: POST
    data_selector: session
    params:
      amount: 10.0
      currency: SAR
      cardOnFile: true
- name: payment_intent
  endpoint:
    path: /payment-intent/api/v2/direct/session
    method: POST
    data_selector: null
    params: {}
- name: pay
  endpoint:
    path: /pgw/api/v2/direct/pay
    method: POST
    data_selector: orderId
    params: {}
- name: create_session
  endpoint:
    path: /docs/geidea-checkout-v2
    method: POST
    data_selector: sessionId
    params:
      cardOnFile: true
- name: direct_payment
  endpoint:
    path: /docs/pg-direct-api
    method: POST
    data_selector: tokenId
- name: create_session
  endpoint:
    path: /docs/geidea-checkout-v2
    method: POST
    data_selector: session
    params:
      tokenId: c14e4989-e6ae-4684-7c7a-08dc96266f60
- name: session_creation
  endpoint:
    path: /payment-intent/api/v2/direct/session
    method: POST
    data_selector: session
    params:
      amount: 10.0
      currency: SAR
      cardOnFile: true
- name: tokenized_transaction
  endpoint:
    path: /payment-intent/api/v2/direct/session
    method: POST
    data_selector: order
    params: {}
- name: session_creation_tokenization
  endpoint:
    path: /payment-intent/api/v2/direct/session
    method: POST
    data_selector: ''
    params: {}
- name: session_generation_mit
  endpoint:
    path: /payment-intent/api/v2/direct/session
    method: POST
    data_selector: ''
    params: {}
- name: initiating_mit_transaction
  endpoint:
    path: /pgw/api/v2/direct/pay/token
    method: POST
    data_selector: ''
    params: {}
- name: create_session
  endpoint:
    path: /docs/geidea-checkout-v2
    method: POST
    data_selector: sessionId
    params:
      cardOnFile: true
- name: direct_payment
  endpoint:
    path: /docs/pg-direct-api
    method: POST
    data_selector: tokenId
    params: {}
- name: save_card
  endpoint:
    path: /payment-intent/api/v1/direct/session/saveCard
    method: POST
    data_selector: session
    params:
      currency: EGP
- name: create_session
  endpoint:
    path: /docs/geidea-checkout-v2
    method: POST
    data_selector: tokenId
    params:
      amount: 1850
      currency: EGP
      timestamp: '2024-07-03T13:30:56Z'
      merchantReferenceId: 7e0d5b14-1721-4653-b6f2-29288400472b
      signature: ock2tDLjUmlc1lLA8X6WDsLrm1+kpFejaXubUYo7o1U=
      tokenId: c14e4989-e6ae-4684-7c7a-08dc96266f60
      initiatedBy: Internet
- name: session
  endpoint:
    path: /payment-intent/api/v2/direct/session
    method: POST
    data_selector: null
    params: {}
- name: mit_transaction
  endpoint:
    path: /pgw/api/v2/direct/pay/token
    method: POST
    data_selector: null
    params: {}
- name: Create QR Code
  endpoint:
    path: /reference/create-qr-code
    method: POST
    data_selector: null
    params: {}
- name: Request for Payment
  endpoint:
    path: /reference/request-to-pay
    method: POST
    data_selector: null
    params: {}
- name: Retrieve Order ID
  endpoint:
    path: /reference/get-order-id
    method: GET
    data_selector: null
    params: {}
- name: Retrieve Order Details
  endpoint:
    path: /reference/get-order-details
    method: GET
    data_selector: null
    params: {}
- name: Payment notification
  endpoint:
    path: /reference/send-notification
    method: POST
    data_selector: null
    params: {}
- name: create_session
  endpoint:
    path: /direct/session/saveCard
    method: POST
    data_selector: session
    params:
      currency: EGP
- name: merchant_registration
  endpoint:
    path: /api/v1/merchant/register
    method: POST
- name: transaction
  endpoint:
    path: /api/v1/transaction
    method: GET
- name: subscriptions
  endpoint:
    path: /subscriptions/api/v1/direct/subscription
    method: POST
    data_selector: subscription
    params: {}
- name: Create QR Code
  endpoint:
    path: /reference/create-qr-code
    method: POST
    data_selector: null
    params: {}
- name: Request for Payment
  endpoint:
    path: /reference/request-to-pay
    method: POST
    data_selector: null
    params: {}
- name: Retrieve Order ID
  endpoint:
    path: /reference/get-order-id
    method: GET
    data_selector: null
    params: {}
- name: Retrieve Order Details
  endpoint:
    path: /reference/get-order-details
    method: GET
    data_selector: null
    params: {}
- name: Payment notification
  endpoint:
    path: /reference/send-notification
    method: POST
    data_selector: null
    params: {}
- name: order
  endpoint:
    path: /api/order
    method: POST
    data_selector: order
- name: valu
  endpoint:
    path: /docs/valu
    method: GET
- name: souhoola
  endpoint:
    path: /docs/souhoola
    method: GET
- name: shahry
  endpoint:
    path: /docs/shahry
    method: GET
- name: cancel_subscription
  endpoint:
    path: /subscriptions/api/v1/direct/subscription/{subscriptionid}/cancel
    method: POST
    data_selector: response
    params:
      subscriptionid: string
      signature: string
- name: get_subscription
  endpoint:
    path: /subscriptions/api/v1/direct/subscription/{subscriptionid}
    method: GET
- name: cancel_order
  endpoint:
    path: /docs/cancel-order-1
    method: POST
- name: refund_payment
  endpoint:
    path: /docs/refund-2
    method: POST
- name: void_transaction
  endpoint:
    path: /docs/void-1
    method: POST
- name: fetch_transaction_or_order
  endpoint:
    path: /reference/get-order-by-id
    method: GET
- name: fetch_all_or_search_transactions
  endpoint:
    path: /reference/fetch-or-search-all-transactions
    method: GET
- name: cancel_order
  endpoint:
    path: /pgw/api/v1/direct/cancel
    method: POST
    data_selector: responseMessage
    params:
      orderId: string
      reason: string
- name: subscription
  endpoint:
    path: /subscriptions/api/v1/direct/subscription
    method: POST
    data_selector: subscription
- name: refund
  endpoint:
    path: /docs/refund-2
    method: POST
    data_selector: orderDetails
    params:
      orderId: string
      refundAmount: float
      signature: string
- name: order
  endpoint:
    path: /callback
    method: POST
    data_selector: order
    params: {}
- name: cancel_subscription
  endpoint:
    path: /subscriptions/api/v1/direct/subscription/{subscriptionid}/cancel
    method: POST
    data_selector: response
    params:
      subscriptionid: string
      signature: string
- name: refund
  endpoint:
    path: /pgw/api/v2/direct/refund
    method: POST
    data_selector: order
    params: {}
- name: get_subscription
  endpoint:
    path: /subscriptions/api/v1/direct/subscription/{subscriptionid}
    method: GET
    params:
      subscriptionid: string
- name: Void
  endpoint:
    path: /void
    method: POST
- name: cancel_order
  endpoint:
    path: /docs/cancel-order-1
    method: POST
- name: refund_payment
  endpoint:
    path: /docs/refund-2
    method: POST
- name: void_transaction
  endpoint:
    path: /docs/void-1
    method: POST
- name: fetch_transaction_or_order
  endpoint:
    path: /reference/get-order-by-id
    method: GET
- name: fetch_all_or_search_transactions
  endpoint:
    path: /reference/fetch-or-search-all-transactions
    method: GET
- name: fetch_transaction_order_details
  endpoint:
    path: /pgw/api/v1/direct/order/{orderId}
    method: GET
    data_selector: order
    params:
      orderId: string
- name: cancel_order
  endpoint:
    path: /pgw/api/v1/direct/cancel
    method: POST
    data_selector: ''
    params: {}
- name: transaction_order
  endpoint:
    path: /pgw/api/v1/direct/order
    method: GET
    data_selector: orders
    params:
      MerchantReferenceId: '{MerchantReferenceId}'
- name: refund
  endpoint:
    path: /docs/refund-2
    method: POST
    data_selector: order
    params:
      orderId: string
      refundAmount: float
      signature: string
- name: transactions
  endpoint:
    path: /order
    method: GET
    data_selector: orders
    params: {}
- name: refund
  endpoint:
    path: /pgw/api/v2/direct/refund
    method: POST
    data_selector: responseMessage
    params: {}
- name: void
  endpoint:
    path: /void
    method: POST
    data_selector: transaction
    params: {}
- name: fetch_transaction_order_details
  endpoint:
    path: /pgw/api/v1/direct/order/{orderId}
    method: GET
    data_selector: order
    params:
      orderId: string
- name: fetch_transaction_order_details
  endpoint:
    path: /pgw/api/v1/direct/order
    method: GET
    params:
      MerchantReferenceId: '{MerchantReferenceId}'
- name: Geidea Online Payments
  endpoint:
    path: /geidea/payments
    method: POST
    data_selector: transaction
    params: {}
- name: transactions
  endpoint:
    path: /order
    method: GET
    data_selector: orders
    params: {}
- name: Geidea Online Payments
  endpoint:
    path: /payments
    method: POST
    data_selector: transaction
    params: {}
- name: payments
  endpoint:
    path: /api/payments
    method: POST
    data_selector: payment
    params: {}
- name: Geidea Online Payments
  endpoint:
    path: /geidea/payments
    method: POST
    data_selector: response
    params: {}
- name: checkout
  endpoint:
    path: /checkout
    method: POST
- name: Geidea Online Payments
  endpoint:
    path: /Geidea/Payment
    method: POST
    data_selector: transaction
    params:
      Merchant_Key: 1a2b3456-cb3b-11ed-afa1-0242ac120002
      Merchant_Password: 9z87y65x-cb3b-11ed-afa1-0242ac120002
      Allowed_Currencies: EGP, SAR
- name: GeideaPaymentAPI
  endpoint:
    path: /GeideaPaymentAPI
    method: POST
    data_selector: response
    params: {}
- name: payment
  endpoint:
    path: /payments
    method: POST
    data_selector: transaction
    params: {}
- name: checkout
  endpoint:
    path: /checkout
    method: POST
    data_selector: response
- name: Webhook Notifications
  endpoint:
    path: /webhook/notifications
    method: POST
- name: card_type_transactions
  endpoint:
    path: /card-type-transactions
    method: GET
- name: order
  endpoint:
    path: /path/to/order
    method: POST
    data_selector: order
- name: Create Session
  endpoint:
    path: /reference/create-session-v2-1
    method: POST
- name: Fetch All or Search Payment Links
  endpoint:
    path: /reference/find-list-of-payment-links
    method: GET
- name: Fetch Payment Link Details
  endpoint:
    path: /reference/get-payment-link-by-id
    method: GET
- name: Fetch all or Search Transactions or Orders
  endpoint:
    path: /reference/fetch-or-search-all-transactions-1
    method: GET
- name: Fetch Transaction or Order
  endpoint:
    path: /reference/get-order-by-id-1
    method: GET
- name: Retrieve Token
  endpoint:
    path: /reference/retrieve-token-1
    method: GET
- name: refund
  endpoint:
    path: /refund
    method: POST
- name: payment_status
  endpoint:
    path: /payment/status
    method: GET
- name: transaction
  endpoint:
    path: /transaction
    method: GET
- name: Webhook/Callback Notifications
  endpoint:
    path: /webhook/callback
    method: POST
    data_selector: callbackData
- name: order
  endpoint:
    path: /webhook/callback
    method: POST
    data_selector: order
    params: {}
- name: transaction
  endpoint:
    path: /meeza/transaction
    method: POST
    data_selector: order
- name: create_session
  endpoint:
    path: /reference/create-session-v2-1
    method: POST
- name: create_payment_link
  endpoint:
    path: /reference/create-payment-link
    method: POST
- name: fetch_payment_links
  endpoint:
    path: /reference/find-list-of-payment-links
    method: GET
- name: update_payment_link
  endpoint:
    path: /reference/update-payment-links
    method: PUT
- name: fetch_payment_link_details
  endpoint:
    path: /reference/get-payment-link-by-id
    method: GET
- name: delete_payment_link
  endpoint:
    path: /reference/delete-payment-link
    method: DELETE
- name: send_payment_link_email
  endpoint:
    path: /reference/send-by-email-1
    method: POST
- name: send_payment_link_sms
  endpoint:
    path: /reference/send-payment-link-by-sms-1
    method: POST
- name: capture_transaction
  endpoint:
    path: /reference/capture-transaction-1
    method: GET
- name: void_payment
  endpoint:
    path: /reference/void-payment-1
    method: POST
- name: refund_transaction
  endpoint:
    path: /reference/refund-1-1
    method: POST
- name: cancel_order
  endpoint:
    path: /reference/cancel-order-2
    method: POST
- name: fetch_transactions
  endpoint:
    path: /reference/fetch-or-search-all-transactions-1
    method: GET
- name: fetch_transaction_by_id
  endpoint:
    path: /reference/get-order-by-id-1
    method: GET
- name: retrieve_token
  endpoint:
    path: /reference/retrieve-token-1
    method: GET
- name: fetch_transaction_by_reference_id
  endpoint:
    path: /reference/fetch-transaction-or-order-by-merchant-reference-1
    method: GET
- name: create_qr_code
  endpoint:
    path: /reference/create-qr-code
    method: POST
- name: request_to_pay
  endpoint:
    path: /reference/request-to-pay
    method: POST
- name: get_order_id
  endpoint:
    path: /reference/get-order-id
    method: GET
- name: get_order_details
  endpoint:
    path: /reference/get-order-details
    method: GET
- name: send_notification
  endpoint:
    path: /reference/send-notification
    method: POST
- name: create_subscription
  endpoint:
    path: /reference/create-subscription
    method: POST
- name: get_subscription
  endpoint:
    path: /reference/get-subscription-2
    method: GET
- name: cancel_subscription
  endpoint:
    path: /reference/cancel-subscription-2
    method: POST
notes:
- Integrating with Direct APIs requires additional technical expertise and resources
  to implement and maintain.
- You need to be PCI DSS (Payment Card Industry Data Security Standard) compliant
  in order to utilize our direct payment APIs.
- These credentials need to be added for basic authentication for each of the payment
  operations.
- Your API password is a secret key! It is important to never expose your API password
  in the front-end of your application.
- Your API password is a secret key! It is important to never expose your API password
  in any part of your application.
- Please initiate the Create Session API Request as a server-to-server API call from
  the back end.
- Geidea is a PCI-DSS-certified company and is authorised to handle and process transactions
  that involve the collection of card details.
- Payment links can be shared via email or SMS.
- Payment links can be shared via SMS or email.
- The link will not work before activation or after expiry.
- Requires setup of merchant account in Geidea
- Static Payment Links can be shared via social media
- Payment links can be generated through the merchant portal.
- Link expiry is set as 30 days by default.
- Payment Link is a unique URL that allows customers to make payments online.
- Ensure secure payment handling and protect customers from unauthorized charges.
- You can only delete Payment Links that are in the Created state.
- You can only send Payment Links that are in the Created state.
- You need to pass the paymentIntentId as a path parameter.
- Payment link allows customers to make payments online.
- During the customer journey, the merchant redirects the customer to a page containing
  a form for accepting a one-time password.
- Merchants need to dynamically extract the device details of the browser during the
  transaction and pass them as part of the API payload in the device object.
- Amount and Currency passed in this API will not be picked up for processing
- Uses Pay API for processing payments
- Your API password is a secret key! It is important to never expose your API password
  in the front end of your application.
- During the customer journey, the merchant redirects the customer to a page containing
  a form for accepting a one-time password (OTP).
- Initial payment must use 3DS - strong customer authentication.
- Token ID is received in the response when cardOnFile is true.
- The merchant will not receive the complete token, which contains the encrypted card
  details.
- Payment can be accepted in two ways, by using a combination of Authorization and
  Capture API calls or the Pay API.
- Uses OAuth2 with refresh token — requires setup of connected app in api
- Uses tokenization for payments — requires session ID and token ID management
- Recurring payment is a convenient feature for merchants dealing in goods/services
  that require payment collection repeatedly over a period of time.
- Payments are automatically processed at the designated intervals, eliminating the
  need for manual invoicing or payment reminders.
- Customers will receive email notifications at every stage of their subscription.
- Reminder to use the correct endpoint based on your environment
- Use tokenId for subsequent transactions.
- The merchant will require tokenization to be enabled on their MID to use this feature.
- Your API password is a secret key! It is important to never expose it in the frontend
  of your application.
- Apple Pay integration is available in UAE and KSA only.
- Ensure that the '.well-known' folder and file are publicly published, otherwise
  the feature won't be enabled
- To Enable Google Pay™ as Payment Method , Please raise a request with your Geidea
  Account Manager.
- In the UAE, it's not mandatory to provide a billing address for processing payments
  via Google Pay.
- Requires setup of connected app in geidea
- Merchants need to register themselves as a merchant with Meeza.
- Meeza requires a unique set of credentials (National ID, Commercial Register Number)
  that needs to be configured in the Gateway Settings.
- Merchants need to register themselves as a merchant with ValU to offer it as a payment
  method.
- Currently Geidea's Apple Pay integration is available in UAE and KSA only.
- Google Pay offers a tokenized solution, which is highly recommended. Issuers recognize
  this as Strong Customer Authentication (SCA), thus eliminating the necessity for
  3D-Secure verification.
- The installment feature needs to be enabled for a merchant in the gateway settings.
- The Amount Variability parameter must remain constant throughout a subscription.
- If a subscription is set with a FIXED amount variability, it should remain unchanged
  until cancellation or completion.
- Geidea offers innovative payment solutions for your business, ensuring a seamless
  and secure transaction experience for customers.
- Once the transaction is successfully approved the customer receives an email with
  the subscription details.
- Settlement of funds for all Tamara transactions processed through Geidea, will directly
  be done by Tamara into your merchant settlement account.
- To offer Tabby as a payment method, you need to reach out directly to Tabby asking
  them to be signed up as Geidea merchant
- Tabby will provide you with a unique set of credentials consisting of the Merchant
  Code, Merchant Public key and Secret Key
- You can cancel an order only if you have executed the Cancel Order API call either
  after the Initiate Authentication API call or the Authenticate Payer API call.
- Trying to execute the Cancel Order API call after the Pay API call will not cancel
  the order.
- Refunds can only be initiated for captured or paid or settled transactions.
- Your customers will receive the amount in their account, according to the time set
  by their bank and country regulations. It usually takes anywhere between 3 to 7
  days.
- Void means that the uncaptured/unpaid/unsettled transaction is cancelled from the
  merchant side.
- You can use the Void operation for pre-authorized and uncaptured transactions.
- The orderId must always be unique for every order created under your merchant profile.
- You can programmatically loop through and search through all the payments or orders
  returned as the response for this API call.
- Refund can only be made to the card from which the transaction has originated.
- Geidea adheres to the most stringent security standards, such as PCI DSS compliance.
  Our secure hosted checkout solution eliminates the need for an SSL certificate or
  PCI-DSS certification.
- The `orderId` must always be unique for every order created under your merchant
  profile. This must be a valid GUID.
- The country name must be followed by PROD for instance (EGY-PROD)
- Requires a merchant account with Geidea
- The module must be configured in the PrestaShop admin
- While we make every effort to test software or module or plugin updates rigorously,
  there is no guarantee that a plugin or module would work seamlessly with your hosting
  environment.
- Backup your website before updating any plugins or modules.
- Merchants will need to be PCI-DSS certified
- Do not hard-code your merchant password directly into your APK file. Always get
  it securely and dynamically.
- You must enable the payment module to accept payments using Geidea.
- It is recommended to uninstall the previous version of the module before installing
  the latest version.
- While we make every effort to test software or modules or plugins or SDK updates
  rigorously, there is no guarantee that a plugin or module or SDK would work seamlessly
  with your device.
- Do not hard-code your merchant password directly into your code.
- Please ask your Geidea contact to provide you with an account/merchant public key
  to be able to start testing payments through the Hosted payment page.
- You must enable the Geidea Online Payments module to accept payments.
- Ensure to back up your website before updating any plugins or modules.
- While we make every effort to test software or modules or plugin or SDK updates
  rigorously, there is no guarantee that a plugin or module or SDK would work seamlessly
  with your device. So please back up your mobile app before updating any plugins,
  or modules or SDKs.
- Do not hard-code your merchant password directly into your APK file.
- The SDK does not store your credentials in any way.
- As a PCI-compliant payment processor, Geidea offers the capability to securely store
  payment details, facilitating recurring payments for merchants.
- Geidea is PCI-DSS level 4.0 certified.
- Geidea utilizes 3D Secure, a two-step authentication process to verify customer
  identity.
- After receiving the callback response, it's important to verify the callback parameters.
- Uses webhook for callback notifications
- When you use the Meeza wallet for transactions, it's reliable to rely on the parent
  payment intent rather than the payment intent for tracking your payments.
- Geidea utilizes 3D Secure for secure transactions
- Geidea is PCI-DSS level 4.0 certified
- Verify callback parameters to ensure the amount matches your order amount.
- Proceed only if the responseCode is '000' and responseMessage is 'Success'.
- Sample callback payload structure provided.
errors:
- 'REQUEST_LIMIT_EXCEEDED: Throttle API calls or reduce frequency'
- 'QUERY_TIMEOUT: Break down filters or add selectivity'
- '401 Unauthorized: Recheck API password'
- '000: The operation was successful'
- '401: Unauthorized access'
- 'INVALID_REQUEST: Check the required fields for creating a payment link.'
- 'INVALID_PAYMENT_LINK: The payment link provided is not valid.'
- 'PAYMENT_METHOD_NOT_SUPPORTED: Selected payment method is not supported.'
- '400 Bad Request: Check the mandatory fields in the payload.'
- '401 Unauthorized: Verify the authorization header.'
- '404 Not Found: Ensure the endpoint URL is correct.'
- '401 Unauthorized: Recheck OAuth scopes or token expiration'
- '000: Success'
- 'Terms and Conditions: null'
- '400 Bad Request: Check request parameters'
- '401 Unauthorized: Authentication required'
- '500 Internal Server Error: Try again later'
- '401 Unauthorized: Recheck API credentials'
- Unable to update the customer, as a customer with the same email and phone number
  combination already exists.
- 'Unauthorized: Ensure your API password is stored securely and not exposed in the
  frontend.'
- All merchants must adhere to the Google Pay APIs Acceptable Use Policy and accept
  the terms defined in the Google Pay API Terms of Service.
- '000: Successful request'
- 'NotProcessed: Subscription payment was not processed'
- Order is already completed
- 'Invalid Merchant Key: Check your Merchant Account ID.'
- 'Payment Failed: Ensure that your Merchant Password is correct.'
- '000.000: Your transaction was successful'
- '010.001: Cancelled by user'
- '100.001: HSM invalid input fields'
- '200.001: Card is expired'
- '300.001: The card is not 3DS enrolled'
- '500.001: Capture not allowed'
- '600.001: Blocked PAN'
- '720.001: Technical failure'
- '300: 3DS authentication failed'
- '750.001: Invalid input fields'
- '750.002: Invalid token'
- '750.003: Token Owner not found'
- '750.004: System not found'
- '750.005: AgreementID does not match initial value'
- '750.006: Parameter initiatedBy not configured for this account'
- '800.001: Refund failed - Order does not exist'
- '800.002: Refund failed - Payment for order has not been completed'
- '800.003: Refund failed - Invalid order'
- '800.004: Refund failed - Order already refunded'
- '800.005: Refund failed - Refund functionality not enabled'
- '800.006: Refund rejected by the BNPL provider'
- '800.007: Refund failed - refund amount exceeds remaining amount'
- '800.008: Refund failed - refund amount exceeds order amount'
- '900.001: Void failed - invalid order'
- '900.002: Void failed - order is not in Preauthorized status'
- '900.003: Order does not exist'
- '900.004: Void functionality not enabled'
- '001: Invalid public key'
- '002: Missing public key'
- '003: Invalid amount'
- '004: Missing amount'
- '005: Invalid currency'
- '006: Missing currency'
- '007: Start payment failed to find target element'
- '009: Invalid callback url'
- '010: Your payment has timed out'
- '011: Invalid billing country code'
- '012: Invalid shipping country code'
- '013: Invalid billing address'
- '014: Invalid shipping address'
- '015: Unable to find gateway configuration by the provided gateway key'
- '016: Invalid email'
- '017: Invalid paymentOperation'
- '018: Invalid paymentIntentID'
- '019: Invalid initiated by parameter'
- '020: Invalid agreement ID'
- '021: Invalid agreement type'
- '022: Card on file is not enabled for this account'
- '023: Account not configured for transactions initiatedBy {initiatedBy}'
- '024: Invalid header color'
- '025: Invalid HPP profile'
- '026: Invalid showAddress parameter'
- '027: Invalid showEmail parameter'
- '028: Invalid cardOnFile parameter'
- '029: Invalid language'
- '030: Gateway not available'
- '031: Invalid merchant reference ID'
- '032: Invalid merchant logo URL'
- '033: Invalid custom parameter'
- '034: Invalid summary subtotal'
- '035: Invalid summary shipping'
- '036: Invalid summary vat'
- '037: Summary subtotal field is mandatory when submitting summary parameters'
- '038: The summary total amount must be equal to order amount'
- '039: Invalid paymentMethods parameter'
- '040: Parameter integrationType length exceeded'
- '041: Parameter name length exceeded'
- '042: Parameter version length exceeded'
- '043: Parameter pluginVersion length exceeded'
- '044: Parameter partnerId length exceeded'
- '045: Parameter merchantName length exceeded'
- '046: Parameter statementDescription.name length exceeded'
- '047: Parameter statementDescription.phone length exceeded'
- '048: {Field} contains invalid characters'
- '049: Invalid isTransactionReceiptEnabled parameter'
- '050: Invalid isPaymentMethodSelectionEnabled parameter'
- '051: Invalid payment option label'
- '052: Invalid hideGeideaLogo parameter'
- '053: Invalid CustomerId parameter'
- '054: Parameter customerReferenceId length exceeded'
- '055: Invalid recurringCycleInterval parameter'
- '056: Invalid expiry format parameter'
- '057: Invalid IsCreateCustomerEnabled parameter'
- '058: Invalid IsSetPaymentMethodEnabled parameter'
- '059: Invalid minimum value parameter'
- '060: Invalid recurring description length parameter'
- '061: Gateway configuration is not active'
- '062: Parameter description length exceeded'
- '063: Parameter apiPassword length exceeded'
- '064: Invalid merchant item id parameter'
- '065: Invalid item name parameter'
- '066: Invalid item description parameter'
- '067: Invalid item categories parameter'
- '068: Invalid item count parameter'
- '069: Invalid item price parameter'
- '070: Invalid item currency parameter'
- 'INVALID_MERCHANT_ACCOUNT: Ensure that you have the correct API credentials'
- 'INVALID_MERCHANT_ACCOUNT: Ensure correct API credentials'
- 'TRANSACTION_FAILED: Check communication issues or payment method'
auth_info:
  mentioned_objects: []
client:
  base_url: https://api.merchant.geidea.net
  headers:
    accept: application/json
    content-type: application/json
source_metadata: null
