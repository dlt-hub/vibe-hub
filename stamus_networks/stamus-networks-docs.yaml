resources:
- name: appliances_host_id
  endpoint:
    path: /rest/appliances/host_id/<IP_ADDRESS>
    method: GET
    data_selector: ''
    params: {}
- name: Custom Source
  endpoint:
    path: /sources/custom
    method: POST
    data_selector: source
    params: {}
- name: Sales Trial License
  endpoint:
    path: /sales-trial-license
    method: GET
    data_selector: license_info
    params: {}
- name: Installing License
  endpoint:
    path: /installing-license
    method: GET
    data_selector: installation_guide
    params: {}
- name: probe_management
  endpoint:
    path: /probe_management
    method: GET
    data_selector: probes
- name: systems_license
  endpoint:
    path: /systems_license
    method: POST
    data_selector: license_info
- name: Multi Tenancy
  endpoint:
    path: /api/multi-tenancy
    method: GET
    data_selector: tenants
    params: {}
- name: Chained SCS Tenancy
  endpoint:
    path: /api/chained-scs-tenancy
    method: GET
    data_selector: chainedTenancy
    params: {}
- name: host_id
  endpoint:
    path: /rest/appliances/host_id/<IP_ADDRESS>
    method: GET
    data_selector: ''
    params: {}
- name: host_insights
  endpoint:
    path: /host_insights
    method: GET
    data_selector: records
    params: {}
- name: error
  endpoint:
    path: /stats/app_layer/error
    method: GET
    data_selector: records
- name: expectations
  endpoint:
    path: /stats/app_layer/expectations
    method: GET
    data_selector: records
- name: flow
  endpoint:
    path: /stats/app_layer/flow
    method: GET
    data_selector: records
- name: tx
  endpoint:
    path: /stats/app_layer/tx
    method: GET
    data_selector: records
- name: decoder
  endpoint:
    path: /stats/decoder
    method: GET
    data_selector: records
- name: ssh
  endpoint:
    path: /ssh
    method: GET
    data_selector: ssh
    params: {}
- name: tftp
  endpoint:
    path: /tftp
    method: GET
    data_selector: tftp
    params: {}
- name: tls
  endpoint:
    path: /tls
    method: GET
    data_selector: tls
    params: {}
- name: event
  endpoint:
    path: /api/events
    method: GET
    data_selector: events
- name: http
  endpoint:
    path: /api/http
    method: GET
    data_selector: http
- name: dns
  endpoint:
    path: /api/dns
    method: GET
    data_selector: dns
- name: ike
  endpoint:
    path: /ike
    method: GET
    data_selector: ike
    params: {}
- name: smb_events
  endpoint:
    path: /smb/events
    method: GET
    data_selector: smb
    params: {}
- name: rfb
  endpoint:
    path: /rfb
    method: GET
    data_selector: rfb
    params: {}
- name: mqtt
  endpoint:
    path: /mqtt
    method: GET
    data_selector: mqtt
    params: {}
- name: http2
  endpoint:
    path: /http2
    method: GET
    data_selector: http2
    params: {}
- name: host_id
  endpoint:
    path: /appliances/host_id/<IP_ADDRESS>
    method: GET
    data_selector: data
    params: {}
- name: appliances_host_id
  endpoint:
    path: /rest/appliances/host_id/<IP_ADDRESS>
    method: GET
    data_selector: ''
    params: {}
- name: stamus_probe
  endpoint:
    path: /rest/appliances/stamus_probe/
    method: GET
    data_selector: ''
    params: {}
- name: stamus_probe_template
  endpoint:
    path: /rest/appliances/stamus_probe_template/
    method: GET
    data_selector: ''
    params: {}
- name: suricata_probe
  endpoint:
    path: /rest/appliances/suricata_probe/
    method: GET
    data_selector: ''
    params: {}
- name: appliances
  endpoint:
    path: /rest/appliances/appliances/
    method: GET
    data_selector: ''
    params: {}
- name: stamus_device
  endpoint:
    path: /rest/appliances/stamus_device/
    method: GET
    data_selector: ''
    params: {}
- name: host_id
  endpoint:
    path: /rest/appliances/host_id/<IP_ADDRESS>
    method: GET
    data_selector: ''
    params: {}
- name: appliances
  endpoint:
    path: /rest/appliances/
    method: GET
    data_selector: ''
- name: host_id
  endpoint:
    path: /rest/appliances/host_id/<IP_ADDRESS>
    method: GET
    data_selector: ''
- name: host_id
  endpoint:
    path: /appliances/host_id/<IP_ADDRESS>
    method: GET
- name: beacon_metric
  endpoint:
    path: /beacon_metric
    method: GET
    data_selector: records
- name: sightings
  endpoint:
    path: /sightings
    method: GET
    data_selector: records
- name: newly_registered_domains
  endpoint:
    path: /api/nrd
    method: GET
    data_selector: data
    params: {}
- name: cipher_analytics
  endpoint:
    path: /tls/cipher/analytics
    method: GET
    data_selector: cipher_security, cipher_suite
    params: {}
- name: ja4_analytics
  endpoint:
    path: /tls/ja4/analytics
    method: GET
    data_selector: ja4.hash, ja4.agent
    params: {}
- name: alpn_analytics
  endpoint:
    path: /tls/alpn/analytics
    method: GET
    data_selector: alpn_tc, alpn_ts
    params: {}
- name: Newly Registered Domains
  endpoint:
    path: /api/nrd
    method: GET
    data_selector: domains
- name: TLS
  endpoint:
    path: /logs/tls
    method: GET
    data_selector: tls_logs
- name: Flow
  endpoint:
    path: /logs/flow
    method: GET
    data_selector: flow_logs
- name: SSH
  endpoint:
    path: /logs/ssh
    method: GET
    data_selector: ssh_logs
- name: RDP
  endpoint:
    path: /logs/rdp
    method: GET
    data_selector: rdp_logs
- name: IKE
  endpoint:
    path: /logs/ike
    method: GET
    data_selector: ike_logs
- name: tls_logs
  endpoint:
    path: /tls/logs
    method: GET
    data_selector: fields
- name: flow_logs
  endpoint:
    path: /flow/logs
    method: GET
    data_selector: fields
- name: ssh_logs
  endpoint:
    path: /ssh/logs
    method: GET
    data_selector: fields
- name: rdp_logs
  endpoint:
    path: /rdp/logs
    method: GET
    data_selector: fields
- name: ike_logs
  endpoint:
    path: /ike/logs
    method: GET
    data_selector: fields
- name: krb5_fields
  endpoint:
    data_selector: fields
- name: rule_filter
  endpoint:
    path: /rest/rules/processing-filter/9/
    method: GET
    data_selector: filter_defs
    params: {}
- name: TLS Anomalies
  endpoint:
    path: /tls/anomalies
    method: GET
    data_selector: events
- name: IKE Anomalies
  endpoint:
    path: /ike/anomalies
    method: GET
    data_selector: events
- name: SSH Anomalies
  endpoint:
    path: /ssh/anomalies
    method: GET
    data_selector: events
- name: Kerberos Anomalies
  endpoint:
    path: /kerberos/anomalies
    method: GET
    data_selector: events
- name: QUIC Anomalies
  endpoint:
    path: /quic/anomalies
    method: GET
    data_selector: events
- name: DNS over HTTPS
  endpoint:
    path: /doh/anomalies
    method: GET
    data_selector: events
- name: TOR Detection
  endpoint:
    path: /tor/anomalies
    method: GET
    data_selector: events
- name: File Sharing Services
  endpoint:
    path: /file-sharing/anomalies
    method: GET
    data_selector: events
- name: Malicious TLS Communications
  endpoint:
    path: /malicious-tls
    method: GET
    data_selector: events
- name: hunting_filters
  endpoint:
    path: /hunting/filters
    method: GET
    data_selector: filters
    params: {}
- name: hosts
  endpoint:
    path: /hosts
    method: GET
    data_selector: observed_hosts
    params: {}
- name: filter_sets
  endpoint:
    path: /filter_sets
    method: POST
    data_selector: created_filter_set
    params: {}
- name: rule_filter
  endpoint:
    path: /rest/rules/processing-filter/9/
    method: GET
- name: predefined_hunting_filters
  endpoint:
    path: /hunting/filters/predefined
    method: GET
    data_selector: filters
- name: user_defined_filters
  endpoint:
    path: /hunting/filters/user_defined
    method: GET
    data_selector: filters
- name: detection_methods
  endpoint:
    path: /hunting/detection_methods
    method: GET
    data_selector: methods
- name: hosts
  endpoint:
    path: /hosts
    method: GET
    data_selector: records
- name: services
  endpoint:
    path: /hosts/services
    method: GET
    data_selector: records
- name: probe_settings
  endpoint:
    path: /nsm/settings/probes
    method: GET
    data_selector: probes
- name: rule_activity
  endpoint:
    path: /nsm/rules/activity
    method: GET
    data_selector: rules_activity
- name: Coverage
  endpoint:
    path: /api/v1/coverage
    method: GET
    data_selector: threats
    params: {}
- name: Threat Family
  endpoint:
    path: /api/v1/threat_family
    method: GET
    data_selector: threats
    params: {}
- name: Threat
  endpoint:
    path: /api/v1/threat
    method: GET
    data_selector: threat_details
    params: {}
- name: alert
  endpoint:
    path: /rest/rules/es/alerts_tail/
    method: GET
    data_selector: results
    params:
      qfilter: alert.signature_id%3A{signature_id} AND flow_id%3A{flow_id}
- name: upload_pcap
  endpoint:
    path: /rest/rules/filestore_pcap/upload/
    method: POST
    data_selector: filename
    params:
      host: <PROBE_NAME>
- name: extract_pcap
  endpoint:
    path: /rest/rules/filestore_pcap/<FILENAME RESPONSE FROM STEP 1>/extract_pcap/
    method: POST
    data_selector: ''
    params:
      host: <PROBE_NAME>
- name: retrieve_pcap
  endpoint:
    path: /rest/rules/filestore_pcap/<FILENAME RESPONSE FROM STEP 1>/retrieve/
    method: GET
    data_selector: ''
    params:
      host: <PROBE_NAME>
- name: download_pcap
  endpoint:
    path: /rest/rules/filestore_pcap/<FILENAME RESPONSE FROM STEP 1>/download/
    method: GET
    data_selector: ''
    params: {}
- name: alerts
  endpoint:
    path: /rules/es/alerts_tail/
    method: GET
    data_selector: results
    params:
      qfilter: alert.signature_id%3A{signature_id} AND flow_id%3A{flow_id}
- name: upload_pcap
  endpoint:
    path: /rules/filestore_pcap/upload/
    method: POST
    data_selector: filename
    params:
      host: <PROBE_NAME>
- name: extract_pcap
  endpoint:
    path: /rules/filestore_pcap/<FILENAME RESPONSE FROM STEP 1>/extract_pcap/
    method: POST
    data_selector: ''
    params:
      host: <PROBE_NAME>
- name: retrieve_pcap
  endpoint:
    path: /rules/filestore_pcap/<FILENAME RESPONSE FROM STEP 1>/retrieve/
    method: GET
    data_selector: ''
    params:
      host: <PROBE_NAME>
- name: download_pcap
  endpoint:
    path: /rules/filestore_pcap/<FILENAME RESPONSE FROM STEP 1>/download/
    method: GET
    data_selector: ''
    params: {}
- name: templates
  endpoint:
    path: /appliances/templates
    method: GET
    data_selector: templates
    params: {}
- name: custom_source
  endpoint:
    path: /sources
    method: POST
    data_selector: sources
    params: {}
- name: ruleset_update
  endpoint:
    path: /rulesets
    method: PUT
    data_selector: rulesets
    params: {}
- name: Threat Intel Source for Datasets
  endpoint:
    path: /add/threat-intel-source
    method: POST
    data_selector: results
    params: {}
- name: Single Custom Source
  endpoint:
    path: /add/custom-source
    method: POST
    data_selector: results
    params: {}
- name: Dedicated Custom Sources
  endpoint:
    path: /add/dedicated-custom-source
    method: POST
    data_selector: results
    params: {}
- name: Suppression and Thresholding
  endpoint:
    path: /suppress-threshold
    method: POST
    data_selector: results
    params: {}
- name: Pass on Sightings and Beaconing
  endpoint:
    path: /pass-sightings
    method: POST
    data_selector: results
    params: {}
- name: Rule Transformations
  endpoint:
    path: /transform/rules
    method: POST
    data_selector: results
    params: {}
- name: Custom Suricata keywords
  endpoint:
    path: /custom-keywords
    method: GET
    data_selector: results
    params: {}
- name: suricata_sensor_registration
  endpoint:
    path: /api/suricata/sensors/register
    method: POST
    data_selector: registration_data
    params: {}
- name: log_shipping
  endpoint:
    path: /api/suricata/sensors/logs
    method: POST
    data_selector: log_data
    params: {}
- name: Known Bad IPs
  endpoint:
    path: /Sources/Add_custom_source
    method: POST
    data_selector: custom_sources
    params:
      datatype: Signatures files in tar archive
- name: Probe Management
  endpoint:
    path: /probe-management
    method: GET
    data_selector: probes
    params: {}
- name: Systems license
  endpoint:
    path: /systems-license
    method: GET
    data_selector: license_info
    params: {}
- name: Stamus Networks Probe
  endpoint:
    path: /path/to/probe
    method: POST
    data_selector: data
    params: {}
- name: Stamus Central Server
  endpoint:
    path: /path/to/server
    method: POST
    data_selector: data
    params: {}
- name: troubleshoot_steps_probe
  endpoint:
    path: /rest/appliances/appliance/<probe_pk>/troubleshoot_steps/
    method: GET
    data_selector: results
- name: troubleshoot_steps_scs
  endpoint:
    path: /rest/appliances/troubleshoot/steps/
    method: GET
    data_selector: results
- name: troubleshoot_probe
  endpoint:
    path: /rest/appliances/appliance/<probe_pk>/troubleshoot/
    method: GET
    data_selector: status
- name: troubleshoot_scs
  endpoint:
    path: /rest/appliances/troubleshoot/
    method: GET
    data_selector: status
- name: USB Stick Procedure
  endpoint:
    path: /usb-installation/usb-stick-procedure
    method: GET
    data_selector: procedure_steps
    params: {}
- name: RAID-on-a-Chip Procedure
  endpoint:
    path: /usb-installation/raid-on-a-chip-procedure
    method: GET
    data_selector: procedure_steps
    params: {}
- name: host_insights
  endpoint:
    path: /appliances/host_id/
    method: GET
    data_selector: data
    params: {}
- name: host_insights_alerts
  endpoint:
    path: /appliances/host_id_alerts/
    method: GET
    data_selector: data
    params: {}
- name: field_stats
  endpoint:
    path: /rules/es/field_stats/
    method: GET
    data_selector: data
    params: {}
- name: events_tail
  endpoint:
    path: /rules/es/events_tail/
    method: GET
    data_selector: data
    params: {}
- name: host_insights
  endpoint:
    path: /appliances/host_id/
    method: GET
    data_selector: data
    params: {}
- name: host_insights_alerts
  endpoint:
    path: /appliances/host_id_alerts/
    method: GET
    data_selector: data
    params: {}
- name: nsm_metadata
  endpoint:
    path: /rules/es/events_tail/
    method: GET
    data_selector: data
    params: {}
- name: alerts_metadata
  endpoint:
    path: /rules/es/field_stats/
    method: GET
    data_selector: data
    params: {}
- name: troubleshoot_steps_probe
  endpoint:
    path: /rest/appliances/appliance/<probe_pk>/troubleshoot_steps/
    method: GET
    data_selector: results
    params: {}
- name: troubleshoot_steps_scs
  endpoint:
    path: /rest/appliances/troubleshoot/steps/
    method: GET
    data_selector: results
    params: {}
- name: troubleshoot_probe
  endpoint:
    path: /rest/appliances/appliance/<probe_pk>/troubleshoot/
    method: GET
    data_selector: results
    params: {}
- name: troubleshoot_scs
  endpoint:
    path: /rest/appliances/troubleshoot/
    method: GET
    data_selector: results
    params: {}
- name: host_insights_all
  endpoint:
    path: /appliances/host_id/
    method: GET
    params: {}
- name: host_insights_alerted
  endpoint:
    path: /appliances/host_id_alerts/
    method: GET
    params: {}
- name: host_insights_ip
  endpoint:
    path: /appliances/host_id/{ip}
    method: GET
    params: {}
- name: metadata
  endpoint:
    path: /rules/es/field_stats/
    method: GET
    data_selector: response_data
    params: {}
- name: ip
  endpoint:
    path: /appliances/host_id/{ip}
    method: GET
    data_selector: response_data
    params: {}
- name: dashboards
  endpoint:
    path: /rules/es/fields_stats/
    method: GET
    data_selector: response_data
    params: {}
- name: dashboards
  endpoint:
    path: /rules/es/fields_stats/
    method: GET
    data_selector: response_data
    params: {}
- name: host_insights
  endpoint:
    path: /appliances/host_id/
    method: GET
    data_selector: records
- name: host_insights_alerts
  endpoint:
    path: /appliances/host_id_alerts/
    method: GET
    data_selector: records
- name: field_stats
  endpoint:
    path: /rules/es/field_stats/
    method: GET
    data_selector: records
- name: events_tail
  endpoint:
    path: /rules/es/events_tail/
    method: GET
    data_selector: records
- name: host_insights
  endpoint:
    path: /appliances/host_id/
    method: GET
    data_selector: ''
    params: {}
- name: host_insights_alerts
  endpoint:
    path: /appliances/host_id_alerts/
    method: GET
    data_selector: ''
    params: {}
- name: nsm_metadata
  endpoint:
    path: /rules/es/events_tail/
    method: GET
    data_selector: ''
    params: {}
- name: alerts_metadata
  endpoint:
    path: /rules/es/field_stats/
    method: GET
    data_selector: ''
    params: {}
- name: host_insights
  endpoint:
    path: /appliances/host_id/
    method: GET
    data_selector: records
- name: host_insights_alerts
  endpoint:
    path: /appliances/host_id_alerts/
    method: GET
    data_selector: records
- name: nsm_metadata
  endpoint:
    path: /rules/es/events_tail/
    method: GET
    data_selector: records
- name: alerts_metadata
  endpoint:
    path: /rules/es/field_stats/
    method: GET
    data_selector: records
- name: host_insights
  endpoint:
    path: /appliances/host_id/
    method: GET
    params: {}
- name: alerted_host_insights
  endpoint:
    path: /appliances/host_id_alerts/
    method: GET
    params: {}
- name: specific_host_insights
  endpoint:
    path: /appliances/host_id/{ip}
    method: GET
    params: {}
- name: metadata
  endpoint:
    path: /rules/es/field_stats/
    method: GET
    params:
      field: alert.metadata.affected_product
- name: dashboards
  endpoint:
    path: /rules/es/fields_stats/
    method: GET
- name: host_insights_all
  endpoint:
    path: /appliances/host_id/
    method: GET
    data_selector: response_data
    params: {}
- name: host_insights_alerted
  endpoint:
    path: /appliances/host_id_alerts/
    method: GET
    data_selector: response_data
    params: {}
- name: host_insights_ip
  endpoint:
    path: /appliances/host_id/{ip}
    method: GET
    data_selector: response_data
    params: {}
- name: metadata
  endpoint:
    path: /rules/es/field_stats/
    method: GET
    data_selector: response_data
    params: {}
- name: host_insights
  endpoint:
    path: /appliances/host_id/{ip}
    method: GET
    data_selector: response_data
    params: {}
- name: dashboards
  endpoint:
    path: /rules/es/fields_stats/
    method: GET
    data_selector: response_data
    params: {}
- name: dashboards
  endpoint:
    path: /rules/es/fields_stats/
    method: GET
    data_selector: ''
    params: {}
- name: host_insights
  endpoint:
    path: /appliances/host_id/
    method: GET
    data_selector: data
    params: {}
- name: host_alerts
  endpoint:
    path: /appliances/host_id_alerts/
    method: GET
    data_selector: data
    params: {}
- name: field_stats
  endpoint:
    path: /rules/es/field_stats/
    method: GET
    data_selector: data
    params: {}
- name: events_tail
  endpoint:
    path: /rules/es/events_tail/
    method: GET
    data_selector: data
    params: {}
- name: all_hosts
  endpoint:
    path: /appliances/host_id/
    method: GET
    data_selector: ''
    params: {}
- name: alerted_hosts
  endpoint:
    path: /appliances/host_id_alerts/
    method: GET
    data_selector: ''
    params: {}
- name: host_ip
  endpoint:
    path: /appliances/host_id/{ip}
    method: GET
    data_selector: ''
    params: {}
- name: metadata
  endpoint:
    path: /rules/es/field_stats/
    method: GET
    data_selector: response_data
    params: {}
- name: dashboards
  endpoint:
    path: /rules/es/fields_stats/
    method: GET
    data_selector: response_data
    params: {}
- name: nsm_metadata
  endpoint:
    path: /rules/es/events_tail/
    method: GET
    data_selector: results
    params: {}
- name: host_insights
  endpoint:
    path: /appliances/host_id/
    method: GET
    data_selector: response_data
- name: host_insights_alerted
  endpoint:
    path: /appliances/host_id_alerts/
    method: GET
    data_selector: response_data
- name: nsm_metadata
  endpoint:
    path: /rules/es/events_tail/
    method: GET
    data_selector: response_data
- name: alert_metadata
  endpoint:
    path: /rules/es/field_stats/
    method: GET
    data_selector: response_data
- name: metadata
  endpoint:
    path: /alerts/metadata
    method: GET
- name: host_insights
  endpoint:
    path: /appliances/host_id/
    method: GET
    data_selector: data
    params: {}
- name: host_insights_alerts
  endpoint:
    path: /appliances/host_id_alerts/
    method: GET
    data_selector: data
    params: {}
- name: nsm_metadata
  endpoint:
    path: /rules/es/events_tail/
    method: GET
    data_selector: data
    params: {}
- name: alerts_metadata
  endpoint:
    path: /rules/es/field_stats/
    method: GET
    data_selector: data
    params: {}
- name: alert_category
  endpoint:
    path: /hunting/dashboards(alert.category)
    method: GET
    data_selector: records
    params: {}
- name: alert_severity
  endpoint:
    path: /hunting/dashboards(alert.severity)
    method: GET
    data_selector: records
    params: {}
- name: alert_metadata_signature_severity
  endpoint:
    path: /hunting/dashboards(alert.metadata.signature_severity)
    method: GET
    data_selector: records
    params: {}
- name: alert_metadata_attack_target
  endpoint:
    path: /hunting/dashboards(alert.metadata.attack_target)
    method: GET
    data_selector: records
    params: {}
- name: alert_metadata_affected_product
  endpoint:
    path: /hunting/dashboards(alert.metadata.affected_product)
    method: GET
    data_selector: records
    params: {}
- name: alert_metadata_malware_family
  endpoint:
    path: /hunting/dashboards(alert.metadata.malware_family)
    method: GET
    data_selector: records
    params: {}
- name: alert_metadata_mitre_tactic_id
  endpoint:
    path: /hunting/dashboards(alert.metadata.mitre_tactic_id)
    method: GET
    data_selector: records
    params: {}
- name: alert_metadata_mitre_tactic_name
  endpoint:
    path: /hunting/dashboards(alert.metadata.mitre_tactic_name)
    method: GET
    data_selector: records
    params: {}
- name: alert_metadata_mitre_technique_id
  endpoint:
    path: /hunting/dashboards(alert.metadata.mitre_technique_id)
    method: GET
    data_selector: records
    params: {}
- name: alert_metadata_mitre_technique_name
  endpoint:
    path: /hunting/dashboards(alert.metadata.mitre_technique_name)
    method: GET
    data_selector: records
    params: {}
- name: alert_source_ip
  endpoint:
    path: /hunting/dashboards(alert.source.ip)
    method: GET
    data_selector: records
    params: {}
- name: alert_target_ip
  endpoint:
    path: /hunting/dashboards(alert.target.ip)
    method: GET
    data_selector: records
    params: {}
- name: hostname_info_subdomain
  endpoint:
    path: /hunting/dashboards(hostname_info.subdomain)
    method: GET
    data_selector: records
    params: {}
- name: hostname_info_domain
  endpoint:
    path: /hunting/dashboards(hostname_info.domain)
    method: GET
    data_selector: records
    params: {}
- name: hostname_info_tld
  endpoint:
    path: /hunting/dashboards(hostname_info.tld)
    method: GET
    data_selector: records
    params: {}
- name: hostname_info_domain_without_tld
  endpoint:
    path: /hunting/dashboards(hostname_info.domain_without_tld)
    method: GET
    data_selector: records
    params: {}
- name: hostname_info_host
  endpoint:
    path: /hunting/dashboards(hostname_info.host)
    method: GET
    data_selector: records
    params: {}
- name: geoip_country_name
  endpoint:
    path: /hunting/dashboards(geoip.country_name)
    method: GET
    data_selector: records
    params: {}
- name: geoip_city_name
  endpoint:
    path: /hunting/dashboards(geoip.city_name)
    method: GET
    data_selector: records
    params: {}
- name: alert_lateral
  endpoint:
    path: /hunting/dashboards(alert.lateral)
    method: GET
    data_selector: records
    params: {}
- name: alert_source_net_info_agg
  endpoint:
    path: /hunting/dashboards(alert.source.net_info_agg)
    method: GET
    data_selector: records
    params: {}
- name: alert_target_net_info_agg
  endpoint:
    path: /hunting/dashboards(alert.target.net_info_agg)
    method: GET
    data_selector: records
    params: {}
- name: fqdn_src
  endpoint:
    path: /hunting/dashboards(fqdn.src)
    method: GET
    data_selector: records
    params: {}
- name: fqdn_dest
  endpoint:
    path: /hunting/dashboards(fqdn.dest)
    method: GET
    data_selector: records
    params: {}
- name: geoip_provider_autonomous_system_number
  endpoint:
    path: /hunting/dashboards(geoip.provider.autonomous_system_number)
    method: GET
    data_selector: records
    params: {}
- name: geoip_provider_autonomous_system_organization
  endpoint:
    path: /hunting/dashboards(geoip.provider.autonomous_system_organization)
    method: GET
    data_selector: records
    params: {}
- name: src_ip
  endpoint:
    path: /hunting/dashboards(src_ip)
    method: GET
    data_selector: records
    params: {}
- name: dest_ip
  endpoint:
    path: /hunting/dashboards(dest_ip)
    method: GET
    data_selector: records
    params: {}
- name: src_port
  endpoint:
    path: /hunting/dashboards(src_port)
    method: GET
    data_selector: records
    params: {}
- name: dest_port
  endpoint:
    path: /hunting/dashboards(dest_port)
    method: GET
    data_selector: records
    params: {}
- name: vlan
  endpoint:
    path: /hunting/dashboards(vlan)
    method: GET
    data_selector: records
    params: {}
- name: tunnel_src_ip
  endpoint:
    path: /hunting/dashboards(tunnel.src_ip)
    method: GET
    data_selector: records
    params: {}
- name: tunnel_dest_ip
  endpoint:
    path: /hunting/dashboards(tunnel.dest_ip)
    method: GET
    data_selector: records
    params: {}
- name: tunnel_proto
  endpoint:
    path: /hunting/dashboards(tunnel.proto)
    method: GET
    data_selector: records
    params: {}
- name: tunnel_depth
  endpoint:
    path: /hunting/dashboards(tunnel.depth)
    method: GET
    data_selector: records
    params: {}
- name: http_hostname
  endpoint:
    path: /hunting/dashboards(http.hostname)
    method: GET
    data_selector: records
    params: {}
- name: http_url
  endpoint:
    path: /hunting/dashboards(http.url)
    method: GET
    data_selector: records
    params: {}
- name: http_status
  endpoint:
    path: /hunting/dashboards(http.status)
    method: GET
    data_selector: records
    params: {}
- name: http_http_user_agent
  endpoint:
    path: /hunting/dashboards(http.http_user_agent)
    method: GET
    data_selector: records
    params: {}
- name: http_http_refer
  endpoint:
    path: /hunting/dashboards(http.http_refer)
    method: GET
    data_selector: records
    params: {}
- name: http_http_refer_info_subdomain
  endpoint:
    path: /hunting/dashboards(http.http_refer_info.subdomain)
    method: GET
    data_selector: records
    params: {}
- name: http_http_refer_info_resource_path
  endpoint:
    path: /hunting/dashboards(http.http_refer_info.resource_path)
    method: GET
    data_selector: records
    params: {}
- name: http_http_refer_info_domain
  endpoint:
    path: /hunting/dashboards(http.http_refer_info.domain)
    method: GET
    data_selector: records
    params: {}
- name: http_http_refer_info_scheme
  endpoint:
    path: /hunting/dashboards(http.http_refer_info.scheme)
    method: GET
    data_selector: records
    params: {}
- name: http_http_refer_info_tld
  endpoint:
    path: /hunting/dashboards(http.http_refer_info.tld)
    method: GET
    data_selector: records
    params: {}
- name: http_http_refer_info_domain_without_tld
  endpoint:
    path: /hunting/dashboards(http.http_refer_info.domain_without_tld)
    method: GET
    data_selector: records
    params: {}
- name: dns_query_rrname
  endpoint:
    path: /hunting/dashboards(dns.query.rrname)
    method: GET
    data_selector: records
    params: {}
- name: dns_query_rrtype
  endpoint:
    path: /hunting/dashboards(dns.query.rrtype)
    method: GET
    data_selector: records
    params: {}
- name: tls_sni
  endpoint:
    path: /hunting/dashboards(tls.sni)
    method: GET
    data_selector: records
    params: {}
- name: tls_subject
  endpoint:
    path: /hunting/dashboards(tls.subject)
    method: GET
    data_selector: records
    params: {}
- name: tls_issuerdn
  endpoint:
    path: /hunting/dashboards(tls.issuerdn)
    method: GET
    data_selector: records
    params: {}
- name: tls_fingerprint
  endpoint:
    path: /hunting/dashboards(tls.fingerprint)
    method: GET
    data_selector: records
    params: {}
- name: tls_ja3_hash
  endpoint:
    path: /hunting/dashboards(tls.ja3.hash)
    method: GET
    data_selector: records
    params: {}
- name: tls_ja3_agent
  endpoint:
    path: /hunting/dashboards(tls.ja3.agent)
    method: GET
    data_selector: records
    params: {}
- name: tls_ja3s_hash
  endpoint:
    path: /hunting/dashboards(tls.ja3s.hash)
    method: GET
    data_selector: records
    params: {}
- name: tls_cipher_suite
  endpoint:
    path: /hunting/dashboards(tls.cipher_suite)
    method: GET
    data_selector: records
    params: {}
- name: tls_cipher_security
  endpoint:
    path: /hunting/dashboards(tls.cipher_security)
    method: GET
    data_selector: records
    params: {}
- name: smtp_mail_from
  endpoint:
    path: /hunting/dashboards(smtp.mail_from)
    method: GET
    data_selector: records
    params: {}
- name: smtp_rcpt_to
  endpoint:
    path: /hunting/dashboards(smtp.rcpt_to)
    method: GET
    data_selector: records
    params: {}
- name: smtp_helo
  endpoint:
    path: /hunting/dashboards(smtp.helo)
    method: GET
    data_selector: records
    params: {}
- name: smb_command
  endpoint:
    path: /hunting/dashboards(smb.command)
    method: GET
    data_selector: records
    params: {}
- name: smb_status
  endpoint:
    path: /hunting/dashboards(smb.status)
    method: GET
    data_selector: records
    params: {}
- name: smb_filename
  endpoint:
    path: /hunting/dashboards(smb.filename)
    method: GET
    data_selector: records
    params: {}
- name: smb_share
  endpoint:
    path: /hunting/dashboards(smb.share)
    method: GET
    data_selector: records
    params: {}
- name: smb_dcerpc_interface_name
  endpoint:
    path: /hunting/dashboards(smb.dcerpc.interface.name)
    method: GET
    data_selector: records
    params: {}
- name: smb_dcerpc_endpoint
  endpoint:
    path: /hunting/dashboards(smb.dcerpc.endpoint)
    method: GET
    data_selector: records
    params: {}
- name: ssh_client_software_version
  endpoint:
    path: /hunting/dashboards(ssh.client.software_version)
    method: GET
    data_selector: records
    params: {}
- name: ssh_server_software_version
  endpoint:
    path: /hunting/dashboards(ssh.server.software_version)
    method: GET
    data_selector: records
    params: {}
- name: nsm_metadata
  endpoint:
    path: /rules/es/events_tail/
    method: GET
    params: {}
- name: host_insights_all
  endpoint:
    path: /appliances/host_id/
    method: GET
- name: host_insights_alerted
  endpoint:
    path: /appliances/host_id_alerts/
    method: GET
- name: host_insights_ip
  endpoint:
    path: /appliances/host_id/{ip}
    method: GET
- name: metadata
  endpoint:
    path: /rules/es/field_stats/
    method: GET
    data_selector: response_data
    params: {}
- name: dashboards
  endpoint:
    path: /rules/es/fields_stats/
    method: GET
    data_selector: response_data
    params: {}
- name: host_insights
  endpoint:
    path: /appliances/host_id/
    method: GET
    data_selector: data
    params: {}
- name: host_alerts
  endpoint:
    path: /appliances/host_id_alerts/
    method: GET
    data_selector: data
    params: {}
- name: field_stats
  endpoint:
    path: /rules/es/field_stats/
    method: GET
    data_selector: data
    params: {}
- name: events_tail
  endpoint:
    path: /rules/es/events_tail/
    method: GET
    data_selector: data
    params: {}
- name: host_insights
  endpoint:
    path: /appliances/host_id/
    method: GET
    data_selector: data
- name: host_insights_alerts
  endpoint:
    path: /appliances/host_id_alerts/
    method: GET
    data_selector: data
- name: nsm_events
  endpoint:
    path: /rules/es/events_tail/
    method: GET
    data_selector: data
- name: alert_metadata
  endpoint:
    path: /rules/es/field_stats/
    method: GET
    data_selector: data
- name: host_insights
  endpoint:
    path: /appliances/host_id/
    method: GET
    data_selector: records
    params: {}
- name: host_insights_alerted
  endpoint:
    path: /appliances/host_id_alerts/
    method: GET
    data_selector: records
    params: {}
- name: host_insights_ip
  endpoint:
    path: /appliances/host_id/{ip}
    method: GET
    data_selector: records
    params: {}
- name: metadata
  endpoint:
    path: /rules/es/field_stats/
    method: GET
    data_selector: response
    params: {}
- name: dashboards
  endpoint:
    path: /rules/es/fields_stats/
    method: GET
    data_selector: response
    params: {}
- name: host_insights
  endpoint:
    path: /appliances/host_id/
    method: GET
    data_selector: ''
    params: {}
- name: host_insights_alerts
  endpoint:
    path: /appliances/host_id_alerts/
    method: GET
    data_selector: ''
    params: {}
- name: nsm_metadata
  endpoint:
    path: /rules/es/events_tail/
    method: GET
    data_selector: ''
    params: {}
- name: alerts_metadata
  endpoint:
    path: /rules/es/field_stats/
    method: GET
    data_selector: ''
    params: {}
- name: host_insights
  endpoint:
    path: /appliances/host_id/
    method: GET
- name: host_insights_alerted
  endpoint:
    path: /appliances/host_id_alerts/
    method: GET
- name: host_insights_ip
  endpoint:
    path: /appliances/host_id/{ip}
    method: GET
- name: metadata
  endpoint:
    path: /rules/es/field_stats/
    method: GET
    data_selector: response_data
    params: {}
- name: dashboards
  endpoint:
    path: /rules/es/fields_stats/
    method: GET
    data_selector: response_data
    params: {}
- name: host_insights
  endpoint:
    path: /appliances/host_id/
    method: GET
    data_selector: data
    params: {}
- name: host_insights_alerts
  endpoint:
    path: /appliances/host_id_alerts/
    method: GET
    data_selector: data
    params: {}
- name: field_stats
  endpoint:
    path: /rules/es/field_stats/
    method: GET
    data_selector: data
    params: {}
- name: events_tail
  endpoint:
    path: /rules/es/events_tail/
    method: GET
    data_selector: data
    params: {}
- name: host_insights
  endpoint:
    path: /appliances/host_id/
    method: GET
    data_selector: response_data
    params: {}
- name: host_insights_alerted
  endpoint:
    path: /appliances/host_id_alerts/
    method: GET
    data_selector: response_data
    params: {}
- name: host_insights_ip
  endpoint:
    path: /appliances/host_id/{ip}
    method: GET
    data_selector: response_data
    params: {}
- name: field_stats
  endpoint:
    path: /rules/es/field_stats/
    method: GET
    params: {}
- name: dashboards
  endpoint:
    path: /rules/es/fields_stats/
    method: GET
    params: {}
- name: alert_category
  endpoint:
    path: hunting.dashboards(dashboard="alert.category", alert=True, discovery=False)
    method: GET
- name: alert_severity
  endpoint:
    path: hunting.dashboards(dashboard="alert.severity", alert=False, discovery=True)
    method: GET
- name: alert_metadata_signature_severity
  endpoint:
    path: hunting.dashboards(dashboard="alert.metadata.signature_severity", alert=True,
      discovery=True)
    method: GET
- name: alert_metadata_attack_target
  endpoint:
    path: hunting.dashboards(dashboard="alert.metadata.attack_target", alert=True,
      discovery=True)
    method: GET
- name: alert_metadata_affected_product
  endpoint:
    path: hunting.dashboards(dashboard="alert.metadata.affected_product", alert=True,
      discovery=True)
    method: GET
- name: alert_metadata_malware_family
  endpoint:
    path: hunting.dashboards(dashboard="alert.metadata.malware_family", alert=True,
      discovery=True)
    method: GET
- name: alert_metadata_mitre_tactic_id
  endpoint:
    path: hunting.dashboards(dashboard="alert.metadata.mitre_tactic_id", alert=True,
      discovery=False)
    method: GET
- name: alert_metadata_mitre_tactic_name
  endpoint:
    path: hunting.dashboards(dashboard="alert.metadata.mitre_tactic_name", alert=True,
      discovery=False)
    method: GET
- name: alert_metadata_mitre_technique_id
  endpoint:
    path: hunting.dashboards(dashboard="alert.metadata.mitre_technique_id", alert=True,
      discovery=False)
    method: GET
- name: alert_metadata_mitre_technique_name
  endpoint:
    path: hunting.dashboards(dashboard="alert.metadata.mitre_technique_name", alert=True,
      discovery=False)
    method: GET
- name: alert_source_ip
  endpoint:
    path: hunting.dashboards(dashboard="alert.source.ip", alert=True, discovery=False)
    method: GET
- name: alert_target_ip
  endpoint:
    path: hunting.dashboards(dashboard="alert.target.ip", alert=True, discovery=False)
    method: GET
- name: hostname_info_subdomain
  endpoint:
    path: hunting.dashboards(dashboard="hostname_info.subdomain", alert=True, discovery=False)
    method: GET
- name: hostname_info_domain
  endpoint:
    path: hunting.dashboards(dashboard="hostname_info.domain", alert=True, discovery=False)
    method: GET
- name: hostname_info_tld
  endpoint:
    path: hunting.dashboards(dashboard="hostname_info.tld", alert=True, discovery=False)
    method: GET
- name: hostname_info_domain_without_tld
  endpoint:
    path: hunting.dashboards(dashboard="hostname_info.domain_without_tld", alert=True,
      discovery=False)
    method: GET
- name: hostname_info_host
  endpoint:
    path: hunting.dashboards(dashboard="hostname_info.host", alert=True, discovery=False)
    method: GET
- name: geoip_country_name
  endpoint:
    path: hunting.dashboards(dashboard="geoip.country_name", alert=True, discovery=False)
    method: GET
- name: geoip_city_name
  endpoint:
    path: hunting.dashboards(dashboard="geoip.city_name", alert=True, discovery=False)
    method: GET
- name: alert_lateral
  endpoint:
    path: hunting.dashboards(dashboard="alert.lateral", alert=True, discovery=False)
    method: GET
- name: alert_source_net_info_agg
  endpoint:
    path: hunting.dashboards(dashboard="alert.source.net_info_agg", alert=True, discovery=False)
    method: GET
- name: alert_target_net_info_agg
  endpoint:
    path: hunting.dashboards(dashboard="alert.target.net_info_agg", alert=True, discovery=False)
    method: GET
- name: fqdn_src
  endpoint:
    path: hunting.dashboards(dashboard="fqdn.src", alert=True, discovery=False)
    method: GET
- name: fqdn_dest
  endpoint:
    path: hunting.dashboards(dashboard="fqdn.dest", alert=True, discovery=False)
    method: GET
- name: geoip_provider_autonomous_system_number
  endpoint:
    path: hunting.dashboards(dashboard="geoip.provider.autonomous_system_number",
      alert=True, discovery=False)
    method: GET
- name: geoip_provider_autonomous_system_organization
  endpoint:
    path: hunting.dashboards(dashboard="geoip.provider.autonomous_system_organization",
      alert=True, discovery=False)
    method: GET
- name: src_ip
  endpoint:
    path: hunting.dashboards(dashboard="src_ip", alert=True, discovery=False)
    method: GET
- name: dest_ip
  endpoint:
    path: hunting.dashboards(dashboard="dest_ip", alert=True, discovery=False)
    method: GET
- name: src_port
  endpoint:
    path: hunting.dashboards(dashboard="src_port", alert=True, discovery=False)
    method: GET
- name: dest_port
  endpoint:
    path: hunting.dashboards(dashboard="dest_port", alert=True, discovery=False)
    method: GET
- name: vlan
  endpoint:
    path: hunting.dashboards(dashboard="vlan", alert=True, discovery=False)
    method: GET
- name: tunnel_src_ip
  endpoint:
    path: hunting.dashboards(dashboard="tunnel.src_ip", alert=True, discovery=False)
    method: GET
- name: tunnel_dest_ip
  endpoint:
    path: hunting.dashboards(dashboard="tunnel.dest_ip", alert=True, discovery=False)
    method: GET
- name: tunnel_proto
  endpoint:
    path: hunting.dashboards(dashboard="tunnel.proto", alert=True, discovery=False)
    method: GET
- name: tunnel_depth
  endpoint:
    path: hunting.dashboards(dashboard="tunnel.depth", alert=True, discovery=False)
    method: GET
- name: http_hostname
  endpoint:
    path: hunting.dashboards(dashboard="http.hostname", alert=True, discovery=False)
    method: GET
- name: http_url
  endpoint:
    path: hunting.dashboards(dashboard="http.url", alert=True, discovery=False)
    method: GET
- name: http_status
  endpoint:
    path: hunting.dashboards(dashboard="http.status", alert=True, discovery=False)
    method: GET
- name: http_http_user_agent
  endpoint:
    path: hunting.dashboards(dashboard="http.http_user_agent", alert=True, discovery=False)
    method: GET
- name: http_http_refer
  endpoint:
    path: hunting.dashboards(dashboard="http.http_refer", alert=True, discovery=False)
    method: GET
- name: http_http_refer_info_subdomain
  endpoint:
    path: hunting.dashboards(dashboard="http.http_refer_info.subdomain", alert=True,
      discovery=False)
    method: GET
- name: http_http_refer_info_resource_path
  endpoint:
    path: hunting.dashboards(dashboard="http.http_refer_info.resource_path", alert=True,
      discovery=False)
    method: GET
- name: http_http_refer_info_domain
  endpoint:
    path: hunting.dashboards(dashboard="http.http_refer_info.domain", alert=True,
      discovery=False)
    method: GET
- name: http_http_refer_info_scheme
  endpoint:
    path: hunting.dashboards(dashboard="http.http_refer_info.scheme", alert=True,
      discovery=False)
    method: GET
- name: http_http_refer_info_tld
  endpoint:
    path: hunting.dashboards(dashboard="http.http_refer_info.tld", alert=True, discovery=False)
    method: GET
- name: http_http_refer_info_domain_without_tld
  endpoint:
    path: hunting.dashboards(dashboard="http.http_refer_info.domain_without_tld",
      alert=True, discovery=False)
    method: GET
- name: dns_query_rrname
  endpoint:
    path: hunting.dashboards(dashboard="dns.query.rrname", alert=True, discovery=False)
    method: GET
- name: dns_query_rrtype
  endpoint:
    path: hunting.dashboards(dashboard="dns.query.rrtype", alert=True, discovery=False)
    method: GET
- name: tls_sni
  endpoint:
    path: hunting.dashboards(dashboard="tls.sni", alert=True, discovery=False)
    method: GET
- name: tls_subject
  endpoint:
    path: hunting.dashboards(dashboard="tls.subject", alert=True, discovery=False)
    method: GET
- name: tls_issuerdn
  endpoint:
    path: hunting.dashboards(dashboard="tls.issuerdn", alert=True, discovery=False)
    method: GET
- name: tls_fingerprint
  endpoint:
    path: hunting.dashboards(dashboard="tls.fingerprint", alert=True, discovery=False)
    method: GET
- name: tls_ja3_hash
  endpoint:
    path: hunting.dashboards(dashboard="tls.ja3.hash", alert=True, discovery=False)
    method: GET
- name: tls_ja3_agent
  endpoint:
    path: hunting.dashboards(dashboard="tls.ja3.agent", alert=True, discovery=False)
    method: GET
- name: tls_ja3s_hash
  endpoint:
    path: hunting.dashboards(dashboard="tls.ja3s.hash", alert=True, discovery=False)
    method: GET
- name: tls_cipher_suite
  endpoint:
    path: hunting.dashboards(dashboard="tls.cipher_suite", alert=True, discovery=False)
    method: GET
- name: tls_cipher_security
  endpoint:
    path: hunting.dashboards(dashboard="tls.cipher_security", alert=True, discovery=False)
    method: GET
- name: smtp_mail_from
  endpoint:
    path: hunting.dashboards(dashboard="smtp.mail_from", alert=True, discovery=False)
    method: GET
- name: smtp_rcpt_to
  endpoint:
    path: hunting.dashboards(dashboard="smtp.rcpt_to", alert=True, discovery=False)
    method: GET
- name: smtp_helo
  endpoint:
    path: hunting.dashboards(dashboard="smtp.helo", alert=True, discovery=False)
    method: GET
- name: smb_command
  endpoint:
    path: hunting.dashboards(dashboard="smb.command", alert=True, discovery=False)
    method: GET
- name: smb_status
  endpoint:
    path: hunting.dashboards(dashboard="smb.status", alert=True, discovery=False)
    method: GET
- name: smb_filename
  endpoint:
    path: hunting.dashboards(dashboard="smb.filename", alert=True, discovery=False)
    method: GET
- name: smb_share
  endpoint:
    path: hunting.dashboards(dashboard="smb.share", alert=True, discovery=False)
    method: GET
- name: smb_dcerpc_interface_name
  endpoint:
    path: hunting.dashboards(dashboard="smb.dcerpc.interface.name", alert=True, discovery=False)
    method: GET
- name: smb_dcerpc_endpoint
  endpoint:
    path: hunting.dashboards(dashboard="smb.dcerpc.endpoint", alert=True, discovery=False)
    method: GET
- name: ssh_client_software_version
  endpoint:
    path: hunting.dashboards(dashboard="ssh.client.software_version", alert=True,
      discovery=False)
    method: GET
- name: ssh_server_software_version
  endpoint:
    path: hunting.dashboards(dashboard="ssh.server.software_version", alert=True,
      discovery=False)
    method: GET
- name: nsm_metadata
  endpoint:
    path: /rules/es/events_tail/
    method: GET
    data_selector: response_data
- name: dashboards
  endpoint:
    path: /rules/es/fields_stats/
    method: GET
    data_selector: response_data
- name: alert_category
  endpoint:
    path: hunting.dashboards(dashboard="alert.category")
    method: GET
- name: alert_severity
  endpoint:
    path: hunting.dashboards(dashboard="alert.severity")
    method: GET
- name: alert_metadata_signature_severity
  endpoint:
    path: hunting.dashboards(dashboard="alert.metadata.signature_severity")
    method: GET
- name: alert_metadata_attack_target
  endpoint:
    path: hunting.dashboards(dashboard="alert.metadata.attack_target")
    method: GET
- name: alert_metadata_affected_product
  endpoint:
    path: hunting.dashboards(dashboard="alert.metadata.affected_product")
    method: GET
- name: alert_metadata_malware_family
  endpoint:
    path: hunting.dashboards(dashboard="alert.metadata.malware_family")
    method: GET
- name: alert_metadata_mitre_tactic_id
  endpoint:
    path: hunting.dashboards(dashboard="alert.metadata.mitre_tactic_id")
    method: GET
- name: alert_metadata_mitre_tactic_name
  endpoint:
    path: hunting.dashboards(dashboard="alert.metadata.mitre_tactic_name")
    method: GET
- name: alert_metadata_mitre_technique_id
  endpoint:
    path: hunting.dashboards(dashboard="alert.metadata.mitre_technique_id")
    method: GET
- name: alert_metadata_mitre_technique_name
  endpoint:
    path: hunting.dashboards(dashboard="alert.metadata.mitre_technique_name")
    method: GET
- name: alert_source_ip
  endpoint:
    path: hunting.dashboards(dashboard="alert.source.ip")
    method: GET
- name: alert_target_ip
  endpoint:
    path: hunting.dashboards(dashboard="alert.target.ip")
    method: GET
- name: hostname_info_subdomain
  endpoint:
    path: hunting.dashboards(dashboard="hostname_info.subdomain")
    method: GET
- name: hostname_info_domain
  endpoint:
    path: hunting.dashboards(dashboard="hostname_info.domain")
    method: GET
- name: hostname_info_tld
  endpoint:
    path: hunting.dashboards(dashboard="hostname_info.tld")
    method: GET
- name: hostname_info_domain_without_tld
  endpoint:
    path: hunting.dashboards(dashboard="hostname_info.domain_without_tld")
    method: GET
- name: hostname_info_host
  endpoint:
    path: hunting.dashboards(dashboard="hostname_info.host")
    method: GET
- name: geoip_country_name
  endpoint:
    path: hunting.dashboards(dashboard="geoip.country_name")
    method: GET
- name: geoip_city_name
  endpoint:
    path: hunting.dashboards(dashboard="geoip.city_name")
    method: GET
- name: alert_lateral
  endpoint:
    path: hunting.dashboards(dashboard="alert.lateral")
    method: GET
- name: alert_source_net_info_agg
  endpoint:
    path: hunting.dashboards(dashboard="alert.source.net_info_agg")
    method: GET
- name: alert_target_net_info_agg
  endpoint:
    path: hunting.dashboards(dashboard="alert.target.net_info_agg")
    method: GET
- name: fqdn_src
  endpoint:
    path: hunting.dashboards(dashboard="fqdn.src")
    method: GET
- name: fqdn_dest
  endpoint:
    path: hunting.dashboards(dashboard="fqdn.dest")
    method: GET
- name: geoip_provider_autonomous_system_number
  endpoint:
    path: hunting.dashboards(dashboard="geoip.provider.autonomous_system_number")
    method: GET
- name: geoip_provider_autonomous_system_organization
  endpoint:
    path: hunting.dashboards(dashboard="geoip.provider.autonomous_system_organization")
    method: GET
- name: src_ip
  endpoint:
    path: hunting.dashboards(dashboard="src_ip")
    method: GET
- name: dest_ip
  endpoint:
    path: hunting.dashboards(dashboard="dest_ip")
    method: GET
- name: src_port
  endpoint:
    path: hunting.dashboards(dashboard="src_port")
    method: GET
- name: dest_port
  endpoint:
    path: hunting.dashboards(dashboard="dest_port")
    method: GET
- name: vlan
  endpoint:
    path: hunting.dashboards(dashboard="vlan")
    method: GET
- name: tunnel_src_ip
  endpoint:
    path: hunting.dashboards(dashboard="tunnel.src_ip")
    method: GET
- name: tunnel_dest_ip
  endpoint:
    path: hunting.dashboards(dashboard="tunnel.dest_ip")
    method: GET
- name: tunnel_proto
  endpoint:
    path: hunting.dashboards(dashboard="tunnel.proto")
    method: GET
- name: tunnel_depth
  endpoint:
    path: hunting.dashboards(dashboard="tunnel.depth")
    method: GET
- name: http_hostname
  endpoint:
    path: hunting.dashboards(dashboard="http.hostname")
    method: GET
- name: http_url
  endpoint:
    path: hunting.dashboards(dashboard="http.url")
    method: GET
- name: http_status
  endpoint:
    path: hunting.dashboards(dashboard="http.status")
    method: GET
- name: http_http_user_agent
  endpoint:
    path: hunting.dashboards(dashboard="http.http_user_agent")
    method: GET
- name: http_http_refer
  endpoint:
    path: hunting.dashboards(dashboard="http.http_refer")
    method: GET
- name: http_http_refer_info_subdomain
  endpoint:
    path: hunting.dashboards(dashboard="http.http_refer_info.subdomain")
    method: GET
- name: http_http_refer_info_resource_path
  endpoint:
    path: hunting.dashboards(dashboard="http.http_refer_info.resource_path")
    method: GET
- name: http_http_refer_info_domain
  endpoint:
    path: hunting.dashboards(dashboard="http.http_refer_info.domain")
    method: GET
- name: http_http_refer_info_scheme
  endpoint:
    path: hunting.dashboards(dashboard="http.http_refer_info.scheme")
    method: GET
- name: http_http_refer_info_tld
  endpoint:
    path: hunting.dashboards(dashboard="http.http_refer_info.tld")
    method: GET
- name: http_http_refer_info_domain_without_tld
  endpoint:
    path: hunting.dashboards(dashboard="http.http_refer_info.domain_without_tld")
    method: GET
- name: dns_query_rrname
  endpoint:
    path: hunting.dashboards(dashboard="dns.query.rrname")
    method: GET
- name: dns_query_rrtype
  endpoint:
    path: hunting.dashboards(dashboard="dns.query.rrtype")
    method: GET
- name: tls_sni
  endpoint:
    path: hunting.dashboards(dashboard="tls.sni")
    method: GET
- name: tls_subject
  endpoint:
    path: hunting.dashboards(dashboard="tls.subject")
    method: GET
- name: tls_issuerdn
  endpoint:
    path: hunting.dashboards(dashboard="tls.issuerdn")
    method: GET
- name: tls_fingerprint
  endpoint:
    path: hunting.dashboards(dashboard="tls.fingerprint")
    method: GET
- name: tls_ja3_hash
  endpoint:
    path: hunting.dashboards(dashboard="tls.ja3.hash")
    method: GET
- name: tls_ja3_agent
  endpoint:
    path: hunting.dashboards(dashboard="tls.ja3.agent")
    method: GET
- name: tls_ja3s_hash
  endpoint:
    path: hunting.dashboards(dashboard="tls.ja3s.hash")
    method: GET
- name: tls_cipher_suite
  endpoint:
    path: hunting.dashboards(dashboard="tls.cipher_suite")
    method: GET
- name: tls_cipher_security
  endpoint:
    path: hunting.dashboards(dashboard="tls.cipher_security")
    method: GET
- name: smtp_mail_from
  endpoint:
    path: hunting.dashboards(dashboard="smtp.mail_from")
    method: GET
- name: smtp_rcpt_to
  endpoint:
    path: hunting.dashboards(dashboard="smtp.rcpt_to")
    method: GET
- name: smtp_helo
  endpoint:
    path: hunting.dashboards(dashboard="smtp.helo")
    method: GET
- name: smb_command
  endpoint:
    path: hunting.dashboards(dashboard="smb.command")
    method: GET
- name: smb_status
  endpoint:
    path: hunting.dashboards(dashboard="smb.status")
    method: GET
- name: smb_filename
  endpoint:
    path: hunting.dashboards(dashboard="smb.filename")
    method: GET
- name: smb_share
  endpoint:
    path: hunting.dashboards(dashboard="smb.share")
    method: GET
- name: smb_dcerpc_interface_name
  endpoint:
    path: hunting.dashboards(dashboard="smb.dcerpc.interface.name")
    method: GET
- name: smb_dcerpc_endpoint
  endpoint:
    path: hunting.dashboards(dashboard="smb.dcerpc.endpoint")
    method: GET
- name: ssh_client_software_version
  endpoint:
    path: hunting.dashboards(dashboard="ssh.client.software_version")
    method: GET
- name: ssh_server_software_version
  endpoint:
    path: hunting.dashboards(dashboard="ssh.server.software_version")
    method: GET
- name: dns
  endpoint:
    path: /dns
    method: GET
    data_selector: records
    params: {}
- name: fileinfo
  endpoint:
    path: /fileinfo
    method: GET
    data_selector: records
    params: {}
- name: flow
  endpoint:
    path: /flow
    method: GET
    data_selector: records
    params: {}
- name: ftp
  endpoint:
    path: /ftp
    method: GET
    data_selector: records
    params: {}
- name: ftp_data
  endpoint:
    path: /ftp_data
    method: GET
    data_selector: records
    params: {}
- name: host_insights
  endpoint:
    path: /host_insights
    method: GET
    data_selector: records
    params: {}
- name: http
  endpoint:
    path: /http
    method: GET
    data_selector: records
    params: {}
- name: ike
  endpoint:
    path: /ike
    method: GET
    data_selector: records
    params: {}
- name: krb5
  endpoint:
    path: /krb5
    method: GET
    data_selector: records
    params: {}
- name: mqtt
  endpoint:
    path: /mqtt
    method: GET
    data_selector: records
    params: {}
- name: netflow
  endpoint:
    path: /netflow
    method: GET
    data_selector: records
    params: {}
- name: nfs
  endpoint:
    path: /nfs
    method: GET
    data_selector: records
    params: {}
- name: nsm_metadata
  endpoint:
    path: /rules/es/events_tail/
    method: GET
    data_selector: response_data
- name: dashboards
  endpoint:
    path: /rules/es/fields_stats/
    method: GET
    data_selector: response_data
- name: app_layer
  endpoint:
    path: /stats/app_layer
    method: GET
    data_selector: records
- name: decoder
  endpoint:
    path: /stats/decoder
    method: GET
    data_selector: records
- name: ssh_client
  endpoint:
    path: /ssh/client
    method: GET
    data_selector: ssh.client
    params: {}
- name: ssh_server
  endpoint:
    path: /ssh/server
    method: GET
    data_selector: ssh.server
    params: {}
- name: logs
  endpoint:
    path: /api/logs
    method: GET
    data_selector: records
    params: {}
- name: json_log
  endpoint:
    path: /json/logs
    method: GET
    data_selector: logs
- name: dns_event
  endpoint:
    path: /dns/events
    method: GET
    data_selector: answers
    params:
      version: 2
- name: smb
  endpoint:
    path: /smb/events
    method: GET
    data_selector: smb
    params: {}
- name: fileinfo
  endpoint:
    path: /fileinfo
    method: GET
    data_selector: records
- name: flow
  endpoint:
    path: /flow
    method: GET
    data_selector: records
- name: ftp
  endpoint:
    path: /ftp
    method: GET
    data_selector: records
- name: http
  endpoint:
    path: /http
    method: GET
    data_selector: records
- name: ike
  endpoint:
    path: /ike
    method: GET
    data_selector: records
- name: krb5
  endpoint:
    path: /krb5
    method: GET
    data_selector: records
- name: mqtt
  endpoint:
    path: /mqtt
    method: GET
    data_selector: records
- name: netflow
  endpoint:
    path: /netflow
    method: GET
    data_selector: records
- name: nfs
  endpoint:
    path: /nfs
    method: GET
    data_selector: records
- name: rdp
  endpoint:
    path: /rdp
    method: GET
    data_selector: rdp
    params: {}
- name: rfb
  endpoint:
    path: /rfb
    method: GET
    data_selector: rfb
- name: mqtt
  endpoint:
    path: /mqtt
    method: GET
    data_selector: mqtt
- name: http2
  endpoint:
    path: /http2
    method: GET
    data_selector: http2
- name: error
  endpoint:
    path: /stats/app_layer/error
    method: GET
    data_selector: records
- name: expectations
  endpoint:
    path: /stats/app_layer/expectations
    method: GET
    data_selector: records
- name: flow
  endpoint:
    path: /stats/app_layer/flow
    method: GET
    data_selector: records
- name: tx
  endpoint:
    path: /stats/app_layer/tx
    method: GET
    data_selector: records
- name: ssh
  endpoint:
    path: /ssh
    method: GET
    data_selector: fields
- name: tftp
  endpoint:
    path: /tftp
    method: GET
    data_selector: fields
- name: tls
  endpoint:
    path: /tls
    method: GET
    data_selector: fields
- name: map
  endpoint:
    path: /map
    method: GET
    data_selector: records
    params: {}
- name: replay
  endpoint:
    path: /replay
    method: GET
    data_selector: records
    params: {}
- name: tarExtract
  endpoint:
    path: /tarExtract
    method: GET
    data_selector: records
    params: {}
- name: alert_events
  endpoint:
    path: /api/alerts
    method: GET
    data_selector: alerts
- name: anomaly_events
  endpoint:
    path: /api/anomalies
    method: GET
    data_selector: anomalies
- name: http_events
  endpoint:
    path: /api/http
    method: GET
    data_selector: http
- name: dns_events
  endpoint:
    path: /dns/events
    method: GET
    data_selector: answers
    params:
      version: 2
- name: ike_events
  endpoint:
    path: /ike/events
    method: GET
    data_selector: ikev1
    params: {}
- name: modbus_events
  endpoint:
    path: /modbus/events
    method: GET
    data_selector: data
    params: {}
- name: ftp_events
  endpoint:
    path: /ftp/events
    method: GET
    data_selector: reply
    params: {}
- name: tls_events
  endpoint:
    path: /tls/events
    method: GET
    data_selector: subject
    params: {}
- name: tftp_events
  endpoint:
    path: /tftp/events
    method: GET
    data_selector: file
    params: {}
- name: smb
  endpoint:
    path: /smb/events
    method: GET
    data_selector: smb
    params: {}
- name: map
  endpoint:
    path: /map
    method: POST
    data_selector: global
- name: replay
  endpoint:
    path: /replay
    method: POST
    data_selector: global
- name: tarExtract
  endpoint:
    path: /tarExtract
    method: POST
    data_selector: global
- name: beacons
  endpoint:
    path: /api/beacons
    method: GET
    data_selector: beacon_data
- name: sightings
  endpoint:
    path: /api/sightings
    method: GET
    data_selector: sighting_data
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
- name: policies
  endpoint:
    path: /policies
    method: GET
    data_selector: records
- name: alerts
  endpoint:
    path: /alerts
    method: GET
    data_selector: records
- name: tls_logs
  endpoint:
    path: /tls/logs
    method: GET
    data_selector: fields
- name: flow_logs
  endpoint:
    path: /flow/logs
    method: GET
    data_selector: fields
- name: ssh_logs
  endpoint:
    path: /ssh/logs
    method: GET
    data_selector: fields
- name: ike_logs
  endpoint:
    path: /ike/logs
    method: GET
    data_selector: fields
- name: krb5_log
  endpoint:
    path: /krb5/log
    method: GET
    data_selector: records
- name: TLS Anomalies
  endpoint:
    path: /tls/anomalies
    method: GET
    data_selector: events
- name: IKE Anomalies
  endpoint:
    path: /ike/anomalies
    method: GET
    data_selector: events
- name: SSH Anomalies
  endpoint:
    path: /ssh/anomalies
    method: GET
    data_selector: events
- name: Kerberos Anomalies
  endpoint:
    path: /kerberos/anomalies
    method: GET
    data_selector: events
- name: QUIC Anomalies
  endpoint:
    path: /quic/anomalies
    method: GET
    data_selector: events
- name: DNS over HTTPS
  endpoint:
    path: /doh/detections
    method: GET
    data_selector: events
- name: TOR Detections
  endpoint:
    path: /tor/detections
    method: GET
    data_selector: events
- name: Malicious TLS Communications
  endpoint:
    path: /malicious_tls
    method: GET
    data_selector: events
- name: processing_filter
  endpoint:
    path: /rest/rules/processing-filter/9/
    method: GET
    data_selector: filter_defs
    params: {}
- name: newly_registered_domains
  endpoint:
    path: /api/v1/nrd
    method: GET
    data_selector: records
- name: hosts
  endpoint:
    path: /hosts
    method: GET
    data_selector: observed_hosts
    params: {}
- name: hosts_with_services
  endpoint:
    path: /hosts/services
    method: GET
    data_selector: observed_hosts_with_services
    params: {}
- name: tls_logs
  endpoint:
    path: /tls/logs
    method: GET
    data_selector: fields
- name: flow_logs
  endpoint:
    path: /flow/logs
    method: GET
    data_selector: fields
- name: ssh_logs
  endpoint:
    path: /ssh/logs
    method: GET
    data_selector: fields
- name: ike_logs
  endpoint:
    path: /ike/logs
    method: GET
    data_selector: fields
- name: rdp_logs
  endpoint:
    path: /rdp/logs
    method: GET
    data_selector: fields
- name: krb5_fields
  endpoint:
    data_selector: fields
- name: TLS Detection
  endpoint:
    path: /detection/tls
    method: GET
    data_selector: events
- name: IKE Detection
  endpoint:
    path: /detection/ike
    method: GET
    data_selector: events
- name: SSH Detection
  endpoint:
    path: /detection/ssh
    method: GET
    data_selector: events
- name: Kerberos Detection
  endpoint:
    path: /detection/kerberos
    method: GET
    data_selector: events
- name: QUIC Detection
  endpoint:
    path: /detection/quic
    method: GET
    data_selector: events
- name: rule_filter
  endpoint:
    path: /rest/rules/processing-filter/9/
    method: GET
    data_selector: filter_defs
- name: Hosts
  endpoint:
    path: /hosts
    method: GET
    data_selector: records
- name: Services
  endpoint:
    path: /hosts/services
    method: GET
    data_selector: records
- name: SN-ALERTS
  endpoint:
    path: /kibana/api/alerts
    method: GET
    data_selector: alerts
    params: {}
- name: SN-DNS
  endpoint:
    path: /kibana/api/dns
    method: GET
    data_selector: dns_logs
    params: {}
- name: SN-ALERTS
  endpoint:
    path: /dashboard/SN-ALERTS
    method: GET
    data_selector: alerts
    params: {}
- name: SN-ALERTS-CVE
  endpoint:
    path: /dashboard/SN-ALERTS-CVE
    method: GET
    data_selector: alerts
    params: {}
- name: SN-ALERTS-EXE-HUNT-1
  endpoint:
    path: /dashboard/SN-ALERTS-EXE-HUNT-1
    method: GET
    data_selector: alerts
    params: {}
- name: SN-ALERTS-PHISHING
  endpoint:
    path: /dashboard/SN-ALERTS-PHISHING
    method: GET
    data_selector: alerts
    params: {}
- name: SN-ALL
  endpoint:
    path: /dashboard/SN-ALL
    method: GET
    data_selector: events
    params: {}
- name: SN-ANOMALY
  endpoint:
    path: /dashboard/SN-ANOMALY
    method: GET
    data_selector: anomalies
    params: {}
- name: SN-BEACONING-TLS
  endpoint:
    path: /dashboard/SN-BEACONING-TLS
    method: GET
    data_selector: beaconing
    params: {}
- name: SN-DCERPC
  endpoint:
    path: /dashboard/SN-DCERPC
    method: GET
    data_selector: dcerpc
    params: {}
- name: SN-DHCP
  endpoint:
    path: /dashboard/SN-DHCP
    method: GET
    data_selector: dhcp
    params: {}
- name: SN-DNP3
  endpoint:
    path: /dashboard/SN-DNP3
    method: GET
    data_selector: dnp3
    params: {}
- name: SN-DNS
  endpoint:
    path: /dashboard/SN-DNS
    method: GET
    data_selector: dns
    params: {}
- name: SN-DNS-HUNT-Tunnel
  endpoint:
    path: /dashboard/SN-DNS-HUNT-Tunnel
    method: GET
    data_selector: dns
    params: {}
- name: SN-FILE-Transactions
  endpoint:
    path: /dashboard/SN-FILE-Transactions
    method: GET
    data_selector: file_transactions
    params: {}
- name: SN-FLOW
  endpoint:
    path: /dashboard/SN-FLOW
    method: GET
    data_selector: flow
    params: {}
- name: SN-FLOW-HTTP
  endpoint:
    path: /dashboard/SN-FLOW-HTTP
    method: GET
    data_selector: flow_http
    params: {}
- name: SN-FLOW-HUNT-DNS-EXFIL
  endpoint:
    path: /dashboard/SN-FLOW-HUNT-DNS-EXFIL
    method: GET
    data_selector: flow_dns
    params: {}
- name: SN-FLOW-HUNT-ICMP-Possible-EXFIL
  endpoint:
    path: /dashboard/SN-FLOW-HUNT-ICMP-Possible-EXFIL
    method: GET
    data_selector: flow_icmp
    params: {}
- name: SN-FLOW-SIZE
  endpoint:
    path: /dashboard/SN-FLOW-SIZE
    method: GET
    data_selector: flow_size
    params: {}
- name: SN-FLOW-SMB
  endpoint:
    path: /dashboard/SN-FLOW-SMB
    method: GET
    data_selector: flow_smb
    params: {}
- name: SN-FLOW-SSH
  endpoint:
    path: /dashboard/SN-FLOW-SSH
    method: GET
    data_selector: flow_ssh
    params: {}
- name: SN-FLOW-TCP
  endpoint:
    path: /dashboard/SN-FLOW-TCP
    method: GET
    data_selector: flow_tcp
    params: {}
- name: SN-FLOW-TLS
  endpoint:
    path: /dashboard/SN-FLOW-TLS
    method: GET
    data_selector: flow_tls
    params: {}
- name: SN-FLOW-UDP
  endpoint:
    path: /dashboard/SN-FLOW-UDP
    method: GET
    data_selector: flow_udp
    params: {}
- name: SN-HTTP
  endpoint:
    path: /dashboard/SN-HTTP
    method: GET
    data_selector: http
    params: {}
- name: SN-HTTP-HUNT
  endpoint:
    path: /dashboard/SN-HTTP-HUNT
    method: GET
    data_selector: http_hunt
    params: {}
- name: SN-HUNT-1
  endpoint:
    path: /dashboard/SN-HUNT-1
    method: GET
    data_selector: hunt
    params: {}
- name: SN-IDS
  endpoint:
    path: /dashboard/SN-IDS
    method: GET
    data_selector: ids
    params: {}
- name: SN-IKEv2
  endpoint:
    path: /dashboard/SN-IKEv2
    method: GET
    data_selector: ike
    params: {}
- name: SN-IoC-Search
  endpoint:
    path: /dashboard/SN-IoC-Search
    method: GET
    data_selector: ioc_search
    params: {}
- name: SN-KRB5
  endpoint:
    path: /dashboard/SN-KRB5
    method: GET
    data_selector: krb5
    params: {}
- name: SN-MQTT
  endpoint:
    path: /dashboard/SN-MQTT
    method: GET
    data_selector: mqtt
    params: {}
- name: SN-NFS
  endpoint:
    path: /dashboard/SN-NFS
    method: GET
    data_selector: nfs
    params: {}
- name: SN-Network-Overview
  endpoint:
    path: /dashboard/SN-Network-Overview
    method: GET
    data_selector: network_overview
    params: {}
- name: SN-Network-Overview-1
  endpoint:
    path: /dashboard/SN-Network-Overview-1
    method: GET
    data_selector: network_overview_1
    params: {}
- name: SN-Network-Overview-2
  endpoint:
    path: /dashboard/SN-Network-Overview-2
    method: GET
    data_selector: network_overview_2
    params: {}
- name: SN-OVERVIEW
  endpoint:
    path: /dashboard/SN-OVERVIEW
    method: GET
    data_selector: overview
    params: {}
- name: SN-POLICY-OLD-TLS
  endpoint:
    path: /dashboard/SN-POLICY-OLD-TLS
    method: GET
    data_selector: policy_old_tls
    params: {}
- name: SN-POLICY-Violations
  endpoint:
    path: /dashboard/SN-POLICY-Violations
    method: GET
    data_selector: policy_violations
    params: {}
- name: SN-POSTPROC-Stats
  endpoint:
    path: /dashboard/SN-POSTPROC-Stats
    method: GET
    data_selector: postproc_stats
    params: {}
- name: SN-RDP
  endpoint:
    path: /dashboard/SN-RDP
    method: GET
    data_selector: rdp
    params: {}
- name: SN-RFB
  endpoint:
    path: /dashboard/SN-RFB
    method: GET
    data_selector: rfb
    params: {}
- name: SN-SIGHTINGS
  endpoint:
    path: /dashboard/SN-SIGHTINGS
    method: GET
    data_selector: sightings
    params: {}
- name: SN-SIGNATURE-Performance
  endpoint:
    path: /dashboard/SN-SIGNATURE-Performance
    method: GET
    data_selector: signature_performance
    params: {}
- name: SN-SIP
  endpoint:
    path: /dashboard/SN-SIP
    method: GET
    data_selector: sip
    params: {}
- name: SN-SMB
  endpoint:
    path: /dashboard/SN-SMB
    method: GET
    data_selector: smb
    params: {}
- name: SN-SMB-DCERPC-Lateral-1
  endpoint:
    path: /dashboard/SN-SMB-DCERPC-Lateral-1
    method: GET
    data_selector: smb_dcerpc_lateral
    params: {}
- name: SN-SMTP
  endpoint:
    path: /dashboard/SN-SMTP
    method: GET
    data_selector: smtp
    params: {}
- name: SN-SNMP
  endpoint:
    path: /dashboard/SN-SNMP
    method: GET
    data_selector: snmp
    params: {}
- name: SN-SSH
  endpoint:
    path: /dashboard/SN-SSH
    method: GET
    data_selector: ssh
    params: {}
- name: SN-STAMUS
  endpoint:
    path: /dashboard/SN-STAMUS
    method: GET
    data_selector: stamus
    params: {}
- name: SN-TFTP
  endpoint:
    path: /dashboard/SN-TFTP
    method: GET
    data_selector: tftp
    params: {}
- name: SN-TLS
  endpoint:
    path: /dashboard/SN-TLS
    method: GET
    data_selector: tls
    params: {}
- name: SN-TrafficID
  endpoint:
    path: /dashboard/SN-TrafficID
    method: GET
    data_selector: traffic_id
    params: {}
- name: SN-VLAN
  endpoint:
    path: /dashboard/SN-VLAN
    method: GET
    data_selector: vlan
    params: {}
- name: policy_violation
  endpoint:
    path: /api/v1/policy-violation
    method: GET
    data_selector: violations
    params: {}
- name: policy_violations
  endpoint:
    path: /declarations_of_policy_violation
    method: GET
    data_selector: data
    params: {}
- name: alerts
  endpoint:
    path: /rest/rules/es/alerts_tail/
    method: GET
    data_selector: results
    params: {}
- name: upload_pcap
  endpoint:
    path: /rest/rules/filestore_pcap/upload/
    method: POST
    data_selector: filename
    params: {}
- name: extract_pcap
  endpoint:
    path: /rest/rules/filestore_pcap/<FILENAME>/extract_pcap/
    method: POST
    data_selector: response
    params: {}
- name: retrieve_pcap
  endpoint:
    path: /rest/rules/filestore_pcap/<FILENAME>/retrieve/
    method: GET
    data_selector: response
    params: {}
- name: download_pcap
  endpoint:
    path: /rest/rules/filestore_pcap/<FILENAME>/download/
    method: GET
    data_selector: response
    params: {}
- name: alerts
  endpoint:
    path: /rest/rules/es/alerts_tail/
    method: GET
    data_selector: results
    params:
      qfilter: alert.signature_id%3A{signature_id} AND flow_id%3A{flow_id}
- name: upload_pcap
  endpoint:
    path: /rest/rules/filestore_pcap/upload/
    method: POST
    data_selector: filename
    params:
      host: <PROBE_NAME>
- name: extract_pcap
  endpoint:
    path: /rest/rules/filestore_pcap/<FILENAME>/extract_pcap/
    method: POST
    data_selector: response
    params:
      host: <PROBE_NAME>
- name: retrieve_pcap
  endpoint:
    path: /rest/rules/filestore_pcap/<FILENAME>/retrieve/
    method: GET
    data_selector: response
    params:
      host: <PROBE_NAME>
- name: download_pcap
  endpoint:
    path: /rest/rules/filestore_pcap/<FILENAME>/download/
    method: GET
    data_selector: response
- name: network_definition
  endpoint:
    path: /rest/appliances/network_definition/
    method: GET
    data_selector: results
- name: apply_changes
  endpoint:
    path: /rest/appliances/stamus_probe/%s/apply_changes/
    method: POST
- name: Custom Source
  endpoint:
    path: /sources/custom
    method: POST
    data_selector: data
    params: {}
- name: Dataset Custom Source
  endpoint:
    path: /sources/dataset
    method: POST
    data_selector: data
    params: {}
- name: threats_update
  endpoint:
    path: /threats
    method: GET
- name: ip_reputation_list
  endpoint:
    path: /ip_reputation
    method: GET
- name: Threat Updates
  endpoint:
    path: /threats
    method: GET
- name: IP Reputation List
  endpoint:
    path: /ip-reputation
    method: POST
- name: Sales Trial License
  endpoint:
    path: /sales/trial
    method: GET
    data_selector: trial_info
    params: {}
- name: Installing License
  endpoint:
    path: /license/install
    method: POST
    data_selector: installation_info
    params: {}
- name: usb_installation_procedure
  endpoint:
    path: /usb-installation
    method: GET
    data_selector: procedure
    params: {}
- name: troubleshoot_steps_probe
  endpoint:
    path: /rest/appliances/appliance/<probe_pk>/troubleshoot_steps/
    method: GET
    data_selector: results
- name: troubleshoot_steps_scs
  endpoint:
    path: /rest/appliances/troubleshoot/steps/
    method: GET
    data_selector: results
- name: troubleshoot_probe
  endpoint:
    path: /rest/appliances/appliance/<probe_pk>/troubleshoot/?query=<param>
    method: GET
    data_selector: results
- name: troubleshoot_scs
  endpoint:
    path: /rest/appliances/troubleshoot/?query=<param>
    method: GET
    data_selector: results
- name: troubleshoot_steps_probe
  endpoint:
    path: /rest/appliances/appliance/<probe_pk>/troubleshoot_steps/
    method: GET
    data_selector: results
- name: troubleshoot_steps_scs
  endpoint:
    path: /rest/appliances/troubleshoot/steps/
    method: GET
    data_selector: results
- name: troubleshoot_probe
  endpoint:
    path: /rest/appliances/appliance/<probe_pk>/troubleshoot/
    method: GET
    data_selector: results
- name: troubleshoot_scs
  endpoint:
    path: /rest/appliances/troubleshoot/
    method: GET
    data_selector: results
- name: troubleshoot_report_probe
  endpoint:
    path: /rest/appliances/appliance/<probe_pk>/troubleshoot_report/
    method: GET
    data_selector: results
- name: troubleshoot_report_scs
  endpoint:
    path: /rest/appliances/troubleshoot/report/
    method: GET
    data_selector: results
- name: host_insights
  endpoint:
    path: /appliances/host_id/
    method: GET
    data_selector: data
    params: {}
- name: host_alerts
  endpoint:
    path: /appliances/host_id_alerts/
    method: GET
    data_selector: data
    params: {}
- name: field_stats
  endpoint:
    path: /rules/es/field_stats/
    method: GET
    data_selector: data
    params: {}
- name: events_tail
  endpoint:
    path: /rules/es/events_tail/
    method: GET
    data_selector: data
    params: {}
- name: host_insights
  endpoint:
    path: /appliances/host_id/
    method: GET
    data_selector: data
    params: {}
- name: host_insights
  endpoint:
    path: /appliances/host_id/
    method: GET
    data_selector: records
    params: {}
- name: host_alerts
  endpoint:
    path: /appliances/host_id_alerts/
    method: GET
    data_selector: records
    params: {}
- name: field_stats
  endpoint:
    path: /rules/es/field_stats/
    method: GET
    data_selector: records
    params: {}
- name: events_tail
  endpoint:
    path: /rules/es/events_tail/
    method: GET
    data_selector: records
    params: {}
- name: host_insights
  endpoint:
    path: /appliances/host_id/
    method: GET
    data_selector: data
    params: {}
- name: host_insights_alerts
  endpoint:
    path: /appliances/host_id_alerts/
    method: GET
    data_selector: data
    params: {}
- name: field_stats
  endpoint:
    path: /rules/es/field_stats/
    method: GET
    data_selector: data
    params: {}
- name: events_tail
  endpoint:
    path: /rules/es/events_tail/
    method: GET
    data_selector: data
    params: {}
- name: all_hosts
  endpoint:
    path: /appliances/host_id/
    method: GET
    data_selector: ''
    params: {}
- name: alerted_hosts
  endpoint:
    path: /appliances/host_id_alerts/
    method: GET
    data_selector: ''
    params: {}
- name: specific_host
  endpoint:
    path: /appliances/host_id/{ip}
    method: GET
    data_selector: ''
    params: {}
- name: all_hosts
  endpoint:
    path: /appliances/host_id/
    method: GET
    data_selector: response_data
    params: {}
- name: alerted_hosts
  endpoint:
    path: /appliances/host_id_alerts/
    method: GET
    data_selector: response_data
    params: {}
- name: specific_host
  endpoint:
    path: /appliances/host_id/{ip}
    method: GET
    data_selector: response_data
    params: {}
- name: metadata
  endpoint:
    path: /rules/es/field_stats/
    method: GET
    data_selector: response_data
- name: ip
  endpoint:
    path: /appliances/host_id/
    method: GET
    data_selector: response_data
- name: dashboards
  endpoint:
    path: /rules/es/fields_stats/
    method: GET
    data_selector: response_data
- name: alerts_metadata
  endpoint:
    path: /rules/es/field_stats/
    method: GET
    data_selector: response_data
- name: host_insights
  endpoint:
    path: /appliances/host_id/{ip}
    method: GET
    data_selector: response_data
- name: dashboards
  endpoint:
    path: /rules/es/fields_stats/
    method: GET
    data_selector: response_data
    params: {}
- name: dashboards
  endpoint:
    path: /rules/es/fields_stats/
    method: GET
    data_selector: response_data
    params: {}
- name: host_insights
  endpoint:
    path: /appliances/host_id/
    method: GET
    data_selector: records
- name: host_insights_alerts
  endpoint:
    path: /appliances/host_id_alerts/
    method: GET
    data_selector: records
- name: field_stats
  endpoint:
    path: /rules/es/field_stats/
    method: GET
    data_selector: records
- name: events_tail
  endpoint:
    path: /rules/es/events_tail/
    method: GET
    data_selector: records
- name: host_insights
  endpoint:
    path: /appliances/host_id/
    method: GET
    data_selector: ''
    params: {}
- name: host_alerts
  endpoint:
    path: /appliances/host_id_alerts/
    method: GET
    data_selector: ''
    params: {}
- name: field_stats
  endpoint:
    path: /rules/es/field_stats/
    method: GET
    data_selector: ''
    params: {}
- name: events_tail
  endpoint:
    path: /rules/es/events_tail/
    method: GET
    data_selector: ''
    params: {}
- name: host_insights_all
  endpoint:
    path: /appliances/host_id/
    method: GET
    data_selector: ''
    params: {}
- name: host_insights_alerted
  endpoint:
    path: /appliances/host_id_alerts/
    method: GET
    data_selector: ''
    params: {}
- name: host_insights_ip
  endpoint:
    path: /appliances/host_id/{ip}
    method: GET
    data_selector: ''
    params: {}
- name: metadata
  endpoint:
    path: /rules/es/field_stats/
    method: GET
    params: {}
- name: dashboards
  endpoint:
    path: /rules/es/fields_stats/
    method: GET
    params: {}
- name: host_insights_all
  endpoint:
    path: /appliances/host_id/
    method: GET
    data_selector: ''
    params: {}
- name: host_insights_alerted
  endpoint:
    path: /appliances/host_id_alerts/
    method: GET
    data_selector: ''
    params: {}
- name: host_insights_ip
  endpoint:
    path: /appliances/host_id/{ip}
    method: GET
    data_selector: ''
    params: {}
- name: metadata
  endpoint:
    path: /rules/es/field_stats/
    method: GET
    data_selector: response_data
- name: dashboards
  endpoint:
    path: /rules/es/fields_stats/
    method: GET
    data_selector: response_data
- name: dashboards
  endpoint:
    path: /hunting/dashboards
    method: GET
    data_selector: records
    params: {}
- name: nsm_metadata
  endpoint:
    path: /rules/es/events_tail/
    method: GET
    params:
      field: required_field
      field_value: required_qfilter_value
- name: host_insights
  endpoint:
    path: /appliances/host_id/
    method: GET
    data_selector: ''
    params: {}
- name: host_insights_alerts
  endpoint:
    path: /appliances/host_id_alerts/
    method: GET
    data_selector: ''
    params: {}
- name: field_stats
  endpoint:
    path: /rules/es/field_stats/
    method: GET
    data_selector: ''
    params: {}
- name: events_tail
  endpoint:
    path: /rules/es/events_tail/
    method: GET
    data_selector: ''
    params: {}
- name: host_insights
  endpoint:
    path: /appliances/host_id/
    method: GET
    data_selector: response_data
    params: {}
- name: host_insights_alerted
  endpoint:
    path: /appliances/host_id_alerts/
    method: GET
    data_selector: response_data
    params: {}
- name: host_insights
  endpoint:
    path: /appliances/host_id/
    method: GET
    data_selector: data
    params: {}
- name: host_insights_alerts
  endpoint:
    path: /appliances/host_id_alerts/
    method: GET
    data_selector: data
    params: {}
- name: nsm_events
  endpoint:
    path: /rules/es/events_tail/
    method: GET
    data_selector: data
    params: {}
- name: alerts_metadata
  endpoint:
    path: /rules/es/field_stats/
    method: GET
    data_selector: data
    params: {}
- name: host_insights
  endpoint:
    path: /appliances/host_id/
    method: GET
- name: alerted_host_insights
  endpoint:
    path: /appliances/host_id_alerts/
    method: GET
- name: specific_host_insights
  endpoint:
    path: /appliances/host_id/{ip}
    method: GET
- name: metadata
  endpoint:
    path: /rules/es/field_stats/
    method: GET
    data_selector: response_data
- name: dashboards
  endpoint:
    path: /rules/es/fields_stats/
    method: GET
    data_selector: response_data
- name: host_insights
  endpoint:
    path: /appliances/host_id/
    method: GET
    data_selector: data
    params: {}
- name: host_insights_alerts
  endpoint:
    path: /appliances/host_id_alerts/
    method: GET
    data_selector: data
    params: {}
- name: nsm_metadata
  endpoint:
    path: /rules/es/events_tail/
    method: GET
    data_selector: data
    params: {}
- name: alerts_metadata
  endpoint:
    path: /rules/es/field_stats/
    method: GET
    data_selector: data
    params: {}
- name: metadata
  endpoint:
    path: /rules/es/field_stats/
    method: GET
    data_selector: response
    params: {}
- name: dashboards
  endpoint:
    path: /rules/es/fields_stats/
    method: GET
    data_selector: response
    params: {}
- name: nsm_metadata
  endpoint:
    path: /rules/es/events_tail/
    method: GET
    params:
      qfilter: field
- name: host_insights
  endpoint:
    path: /appliances/host_id/
    method: GET
    data_selector: data
    params: {}
- name: host_insights_alerts
  endpoint:
    path: /appliances/host_id_alerts/
    method: GET
    data_selector: data
    params: {}
- name: nsm_metadata
  endpoint:
    path: /rules/es/events_tail/
    method: GET
    data_selector: data
    params: {}
- name: alerts_metadata
  endpoint:
    path: /rules/es/field_stats/
    method: GET
    data_selector: data
    params: {}
- name: host_id_alerts
  endpoint:
    path: /appliances/host_id_alerts/
    method: GET
    data_selector: records
    params: {}
- name: host_id
  endpoint:
    path: /appliances/host_id/{ip}
    method: GET
    data_selector: records
    params: {}
- name: host_insights
  endpoint:
    path: /appliances/host_id/
    method: GET
    data_selector: data
    params: {}
- name: host_insights_alerts
  endpoint:
    path: /appliances/host_id_alerts/
    method: GET
    data_selector: data
    params: {}
- name: nsm_metadata
  endpoint:
    path: /rules/es/events_tail/
    method: GET
    data_selector: data
    params: {}
- name: alerts_metadata
  endpoint:
    path: /rules/es/field_stats/
    method: GET
    data_selector: data
    params: {}
- name: host_insights
  endpoint:
    path: /appliances/host_id/
    method: GET
    params: {}
- name: host_insights_alerted
  endpoint:
    path: /appliances/host_id_alerts/
    method: GET
    params: {}
- name: host_insights_ip
  endpoint:
    path: /appliances/host_id/{ip}
    method: GET
    params: {}
- name: metadata
  endpoint:
    path: /rules/es/field_stats/
    method: GET
    data_selector: response_data
    params: {}
- name: dashboards
  endpoint:
    path: /rules/es/fields_stats/
    method: GET
    data_selector: response_data
    params: {}
- name: host_insights
  endpoint:
    path: /appliances/host_id/
    method: GET
    data_selector: data
    params: {}
- name: host_insights_alerts
  endpoint:
    path: /appliances/host_id_alerts/
    method: GET
    data_selector: data
    params: {}
- name: nsm_metadata
  endpoint:
    path: /rules/es/events_tail/
    method: GET
    data_selector: data
    params: {}
- name: alerts_metadata
  endpoint:
    path: /rules/es/field_stats/
    method: GET
    data_selector: data
    params: {}
- name: host_insights
  endpoint:
    path: /appliances/host_id/
    method: GET
    data_selector: ''
    params: {}
- name: host_insights_alerted
  endpoint:
    path: /appliances/host_id_alerts/
    method: GET
    data_selector: ''
    params: {}
- name: host_insights_ip
  endpoint:
    path: /appliances/host_id/{ip}
    method: GET
    data_selector: ''
    params: {}
- name: metadata
  endpoint:
    path: /rules/es/field_stats/
    method: GET
    data_selector: response_data
    params: {}
- name: dashboards
  endpoint:
    path: /rules/es/fields_stats/
    method: GET
    data_selector: response_data
    params: {}
- name: alert_category
  endpoint:
    path: /hunting/dashboards
    method: GET
    data_selector: alert.category
    params: {}
- name: alert_severity
  endpoint:
    path: /hunting/dashboards
    method: GET
    data_selector: alert.severity
    params: {}
- name: alert_metadata_signature_severity
  endpoint:
    path: /hunting/dashboards
    method: GET
    data_selector: alert.metadata.signature_severity
    params: {}
- name: alert_metadata_attack_target
  endpoint:
    path: /hunting/dashboards
    method: GET
    data_selector: alert.metadata.attack_target
    params: {}
- name: alert_metadata_affected_product
  endpoint:
    path: /hunting/dashboards
    method: GET
    data_selector: alert.metadata.affected_product
    params: {}
- name: alert_metadata_malware_family
  endpoint:
    path: /hunting/dashboards
    method: GET
    data_selector: alert.metadata.malware_family
    params: {}
- name: alert_metadata_mitre_tactic_id
  endpoint:
    path: /hunting/dashboards
    method: GET
    data_selector: alert.metadata.mitre_tactic_id
    params: {}
- name: alert_metadata_mitre_tactic_name
  endpoint:
    path: /hunting/dashboards
    method: GET
    data_selector: alert.metadata.mitre_tactic_name
    params: {}
- name: alert_metadata_mitre_technique_id
  endpoint:
    path: /hunting/dashboards
    method: GET
    data_selector: alert.metadata.mitre_technique_id
    params: {}
- name: alert_metadata_mitre_technique_name
  endpoint:
    path: /hunting/dashboards
    method: GET
    data_selector: alert.metadata.mitre_technique_name
    params: {}
- name: alert_source_ip
  endpoint:
    path: /hunting/dashboards
    method: GET
    data_selector: alert.source.ip
    params: {}
- name: alert_target_ip
  endpoint:
    path: /hunting/dashboards
    method: GET
    data_selector: alert.target.ip
    params: {}
- name: hostname_info_subdomain
  endpoint:
    path: /hunting/dashboards
    method: GET
    data_selector: hostname_info.subdomain
    params: {}
- name: hostname_info_domain
  endpoint:
    path: /hunting/dashboards
    method: GET
    data_selector: hostname_info.domain
    params: {}
- name: hostname_info_tld
  endpoint:
    path: /hunting/dashboards
    method: GET
    data_selector: hostname_info.tld
    params: {}
- name: hostname_info_domain_without_tld
  endpoint:
    path: /hunting/dashboards
    method: GET
    data_selector: hostname_info.domain_without_tld
    params: {}
- name: hostname_info_host
  endpoint:
    path: /hunting/dashboards
    method: GET
    data_selector: hostname_info.host
    params: {}
- name: geoip_country_name
  endpoint:
    path: /hunting/dashboards
    method: GET
    data_selector: geoip.country_name
    params: {}
- name: geoip_city_name
  endpoint:
    path: /hunting/dashboards
    method: GET
    data_selector: geoip.city_name
    params: {}
- name: alert_lateral
  endpoint:
    path: /hunting/dashboards
    method: GET
    data_selector: alert.lateral
    params: {}
- name: alert_source_net_info_agg
  endpoint:
    path: /hunting/dashboards
    method: GET
    data_selector: alert.source.net_info_agg
    params: {}
- name: alert_target_net_info_agg
  endpoint:
    path: /hunting/dashboards
    method: GET
    data_selector: alert.target.net_info_agg
    params: {}
- name: fqdn_src
  endpoint:
    path: /hunting/dashboards
    method: GET
    data_selector: fqdn.src
    params: {}
- name: fqdn_dest
  endpoint:
    path: /hunting/dashboards
    method: GET
    data_selector: fqdn.dest
    params: {}
- name: geoip_provider_autonomous_system_number
  endpoint:
    path: /hunting/dashboards
    method: GET
    data_selector: geoip.provider.autonomous_system_number
    params: {}
- name: geoip_provider_autonomous_system_organization
  endpoint:
    path: /hunting/dashboards
    method: GET
    data_selector: geoip.provider.autonomous_system_organization
    params: {}
- name: src_ip
  endpoint:
    path: /hunting/dashboards
    method: GET
    data_selector: src_ip
    params: {}
- name: dest_ip
  endpoint:
    path: /hunting/dashboards
    method: GET
    data_selector: dest_ip
    params: {}
- name: src_port
  endpoint:
    path: /hunting/dashboards
    method: GET
    data_selector: src_port
    params: {}
- name: dest_port
  endpoint:
    path: /hunting/dashboards
    method: GET
    data_selector: dest_port
    params: {}
- name: vlan
  endpoint:
    path: /hunting/dashboards
    method: GET
    data_selector: vlan
    params: {}
- name: tunnel_src_ip
  endpoint:
    path: /hunting/dashboards
    method: GET
    data_selector: tunnel.src_ip
    params: {}
- name: tunnel_dest_ip
  endpoint:
    path: /hunting/dashboards
    method: GET
    data_selector: tunnel.dest_ip
    params: {}
- name: tunnel_proto
  endpoint:
    path: /hunting/dashboards
    method: GET
    data_selector: tunnel.proto
    params: {}
- name: tunnel_depth
  endpoint:
    path: /hunting/dashboards
    method: GET
    data_selector: tunnel.depth
    params: {}
- name: http_hostname
  endpoint:
    path: /hunting/dashboards
    method: GET
    data_selector: http.hostname
    params: {}
- name: http_url
  endpoint:
    path: /hunting/dashboards
    method: GET
    data_selector: http.url
    params: {}
- name: http_status
  endpoint:
    path: /hunting/dashboards
    method: GET
    data_selector: http.status
    params: {}
- name: http_http_user_agent
  endpoint:
    path: /hunting/dashboards
    method: GET
    data_selector: http.http_user_agent
    params: {}
- name: http_http_refer
  endpoint:
    path: /hunting/dashboards
    method: GET
    data_selector: http.http_refer
    params: {}
- name: http_http_refer_info_subdomain
  endpoint:
    path: /hunting/dashboards
    method: GET
    data_selector: http.http_refer_info.subdomain
    params: {}
- name: http_http_refer_info_resource_path
  endpoint:
    path: /hunting/dashboards
    method: GET
    data_selector: http.http_refer_info.resource_path
    params: {}
- name: http_http_refer_info_domain
  endpoint:
    path: /hunting/dashboards
    method: GET
    data_selector: http.http_refer_info.domain
    params: {}
- name: http_http_refer_info_scheme
  endpoint:
    path: /hunting/dashboards
    method: GET
    data_selector: http.http_refer_info.scheme
    params: {}
- name: http_http_refer_info_tld
  endpoint:
    path: /hunting/dashboards
    method: GET
    data_selector: http.http_refer_info.tld
    params: {}
- name: http_http_refer_info_domain_without_tld
  endpoint:
    path: /hunting/dashboards
    method: GET
    data_selector: http.http_refer_info.domain_without_tld
    params: {}
- name: dns_query_rrname
  endpoint:
    path: /hunting/dashboards
    method: GET
    data_selector: dns.query.rrname
    params: {}
- name: dns_query_rrtype
  endpoint:
    path: /hunting/dashboards
    method: GET
    data_selector: dns.query.rrtype
    params: {}
- name: tls_sni
  endpoint:
    path: /hunting/dashboards
    method: GET
    data_selector: tls.sni
    params: {}
- name: tls_subject
  endpoint:
    path: /hunting/dashboards
    method: GET
    data_selector: tls.subject
    params: {}
- name: tls_issuerdn
  endpoint:
    path: /hunting/dashboards
    method: GET
    data_selector: tls.issuerdn
    params: {}
- name: tls_fingerprint
  endpoint:
    path: /hunting/dashboards
    method: GET
    data_selector: tls.fingerprint
    params: {}
- name: tls_ja3_hash
  endpoint:
    path: /hunting/dashboards
    method: GET
    data_selector: tls.ja3.hash
    params: {}
- name: tls_ja3_agent
  endpoint:
    path: /hunting/dashboards
    method: GET
    data_selector: tls.ja3.agent
    params: {}
- name: tls_ja3s_hash
  endpoint:
    path: /hunting/dashboards
    method: GET
    data_selector: tls.ja3s.hash
    params: {}
- name: tls_cipher_suite
  endpoint:
    path: /hunting/dashboards
    method: GET
    data_selector: tls.cipher_suite
    params: {}
- name: tls_cipher_security
  endpoint:
    path: /hunting/dashboards
    method: GET
    data_selector: tls.cipher_security
    params: {}
- name: smtp_mail_from
  endpoint:
    path: /hunting/dashboards
    method: GET
    data_selector: smtp.mail_from
    params: {}
- name: smtp_rcpt_to
  endpoint:
    path: /hunting/dashboards
    method: GET
    data_selector: smtp.rcpt_to
    params: {}
- name: smtp_helo
  endpoint:
    path: /hunting/dashboards
    method: GET
    data_selector: smtp.helo
    params: {}
- name: smb_command
  endpoint:
    path: /hunting/dashboards
    method: GET
    data_selector: smb.command
    params: {}
- name: smb_status
  endpoint:
    path: /hunting/dashboards
    method: GET
    data_selector: smb.status
    params: {}
- name: smb_filename
  endpoint:
    path: /hunting/dashboards
    method: GET
    data_selector: smb.filename
    params: {}
- name: smb_share
  endpoint:
    path: /hunting/dashboards
    method: GET
    data_selector: smb.share
    params: {}
- name: smb_dcerpc_interface_name
  endpoint:
    path: /hunting/dashboards
    method: GET
    data_selector: smb.dcerpc.interface.name
    params: {}
- name: smb_dcerpc_endpoint
  endpoint:
    path: /hunting/dashboards
    method: GET
    data_selector: smb.dcerpc.endpoint
    params: {}
- name: ssh_client_software_version
  endpoint:
    path: /hunting/dashboards
    method: GET
    data_selector: ssh.client.software_version
    params: {}
- name: ssh_server_software_version
  endpoint:
    path: /hunting/dashboards
    method: GET
    data_selector: ssh.server.software_version
    params: {}
- name: nsm_metadata
  endpoint:
    path: /rules/es/events_tail/
    method: GET
    data_selector: response_data
    params: {}
- name: dashboards
  endpoint:
    path: /rules/es/fields_stats/
    method: GET
    data_selector: response_data
    params: {}
- name: fileinfo
  endpoint:
    path: /api/fileinfo
    method: GET
    data_selector: fileinfo
    params: {}
- name: flow
  endpoint:
    path: /api/flow
    method: GET
    data_selector: flow
    params: {}
- name: ftp
  endpoint:
    path: /api/ftp
    method: GET
    data_selector: ftp
    params: {}
- name: http
  endpoint:
    path: /api/http
    method: GET
    data_selector: http
    params: {}
- name: ike
  endpoint:
    path: /api/ike
    method: GET
    data_selector: ike
    params: {}
- name: krb5
  endpoint:
    path: /api/krb5
    method: GET
    data_selector: krb5
    params: {}
- name: mqtt
  endpoint:
    path: /api/mqtt
    method: GET
    data_selector: mqtt
    params: {}
- name: netflow
  endpoint:
    path: /api/netflow
    method: GET
    data_selector: netflow
    params: {}
- name: nfs
  endpoint:
    path: /api/nfs
    method: GET
    data_selector: nfs
    params: {}
- name: rdp
  endpoint:
    path: /api/rdp
    method: GET
    data_selector: rdp
    params: {}
- name: rfb
  endpoint:
    path: /api/rfb
    method: GET
    data_selector: rfb
    params: {}
- name: sip
  endpoint:
    path: /api/sip
    method: GET
    data_selector: sip
    params: {}
- name: smb
  endpoint:
    path: /smb
    method: GET
    data_selector: fields
    params: {}
- name: smtp
  endpoint:
    path: /smtp
    method: GET
    data_selector: fields
    params: {}
- name: snmp
  endpoint:
    path: /snmp
    method: GET
    data_selector: fields
    params: {}
- name: sightings
  endpoint:
    path: /sightings
    method: GET
    data_selector: fields
    params: {}
- name: error
  endpoint:
    path: /stats/app_layer/error
    method: GET
    data_selector: records
- name: flow
  endpoint:
    path: /stats/app_layer/flow
    method: GET
    data_selector: records
- name: tx
  endpoint:
    path: /stats/app_layer/tx
    method: GET
    data_selector: records
- name: decoder
  endpoint:
    path: /stats/decoder
    method: GET
    data_selector: records
- name: SSH
  endpoint:
    path: /ssh
    method: GET
    data_selector: ssh.client.hassh
    params: {}
- name: TFTP
  endpoint:
    path: /tftp
    method: GET
    data_selector: tftp.file
    params: {}
- name: TLS
  endpoint:
    path: /tls
    method: GET
    data_selector: tls.cipher_suite
    params: {}
- name: json_logs
  endpoint:
    path: /logs
    method: GET
    data_selector: records
    params: {}
- name: dns_events
  endpoint:
    path: /dns/events
    method: GET
    data_selector: answers
- name: ike_events
  endpoint:
    path: /ike/events
    method: GET
    data_selector: ike
- name: modbus_events
  endpoint:
    path: /modbus/events
    method: GET
    data_selector: modbus
- name: ftp_events
  endpoint:
    path: /ftp/events
    method: GET
    data_selector: ftp
- name: tls_events
  endpoint:
    path: /tls/events
    method: GET
    data_selector: tls
- name: tftp_events
  endpoint:
    path: /tftp/events
    method: GET
    data_selector: tftp
- name: nsm_metadata
  endpoint:
    path: /rules/es/events_tail/
    method: GET
    data_selector: results
    params: {}
- name: dashboards
  endpoint:
    path: /rules/es/fields_stats/
    method: GET
    data_selector: metadata
    params: {}
- name: smb_event
  endpoint:
    path: /smb/events
    method: GET
    data_selector: smb
    params: {}
- name: rfb
  endpoint:
    path: /rfb
    method: GET
    data_selector: rfb
    params: {}
- name: map
  endpoint:
    path: /map
    method: GET
    data_selector: files
    params:
      incremental: timestamp
- name: replay
  endpoint:
    path: /replay
    method: POST
    data_selector: results
    params: {}
- name: tarExtract
  endpoint:
    path: /tarExtract
    method: POST
    data_selector: extracted_files
    params: {}
- name: Fileinfo
  endpoint:
    path: /fileinfo
    method: GET
    data_selector: fileinfo
    params: {}
- name: FLOW
  endpoint:
    path: /flow
    method: GET
    data_selector: flow
    params: {}
- name: FTP
  endpoint:
    path: /ftp
    method: GET
    data_selector: ftp
    params: {}
- name: Host Insights
  endpoint:
    path: /host-insights
    method: GET
    data_selector: host
    params: {}
- name: HTTP
  endpoint:
    path: /http
    method: GET
    data_selector: http
    params: {}
- name: IKE
  endpoint:
    path: /ike
    method: GET
    data_selector: ike
    params: {}
- name: KRB5
  endpoint:
    path: /krb5
    method: GET
    data_selector: krb5
    params: {}
- name: MQTT
  endpoint:
    path: /mqtt
    method: GET
    data_selector: mqtt
    params: {}
- name: NETFLOW
  endpoint:
    path: /netflow
    method: GET
    data_selector: netflow
    params: {}
- name: NFS
  endpoint:
    path: /nfs
    method: GET
    data_selector: nfs
    params: {}
- name: RDP
  endpoint:
    path: /rdp
    method: GET
    data_selector: rdp
    params: {}
- name: RFB
  endpoint:
    path: /rfb
    method: GET
    data_selector: rfb
    params: {}
- name: SIP
  endpoint:
    path: /sip
    method: GET
    data_selector: sip
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
- name: smb
  endpoint:
    path: /smb
    method: GET
    data_selector: fields
    params: {}
- name: smtp
  endpoint:
    path: /smtp
    method: GET
    data_selector: fields
    params: {}
- name: snmp
  endpoint:
    path: /snmp
    method: GET
    data_selector: fields
    params: {}
- name: sightings
  endpoint:
    path: /sightings
    method: GET
    data_selector: fields
    params: {}
- name: error
  endpoint:
    path: /stats/app_layer/error
    method: GET
    data_selector: records
    params: {}
- name: expectations
  endpoint:
    path: /stats/app_layer/expectations
    method: GET
    data_selector: records
    params: {}
- name: flow
  endpoint:
    path: /stats/app_layer/flow
    method: GET
    data_selector: records
    params: {}
- name: tx
  endpoint:
    path: /stats/app_layer/tx
    method: GET
    data_selector: records
    params: {}
- name: decoder
  endpoint:
    path: /stats/decoder
    method: GET
    data_selector: records
    params: {}
- name: decoder_event
  endpoint:
    path: /stats/decoder/event
    method: GET
    data_selector: records
- name: defrag
  endpoint:
    path: /stats/defrag
    method: GET
    data_selector: records
- name: detect
  endpoint:
    path: /stats/detect
    method: GET
    data_selector: records
- name: file_store
  endpoint:
    path: /stats/file_store
    method: GET
    data_selector: records
- name: flow
  endpoint:
    path: /stats/flow
    method: GET
    data_selector: records
- name: ftp
  endpoint:
    path: /stats/ftp
    method: GET
    data_selector: records
- name: http
  endpoint:
    path: /stats/http
    method: GET
    data_selector: records
- name: tcp
  endpoint:
    path: /stats/tcp
    method: GET
    data_selector: records
- name: uptime
  endpoint:
    path: /stats/uptime
    method: GET
    data_selector: records
- name: alert
  endpoint:
    path: /alert
    method: GET
    data_selector: alert
- name: anomaly
  endpoint:
    path: /anomaly
    method: GET
    data_selector: anomaly
- name: http
  endpoint:
    path: /http
    method: GET
    data_selector: http
- name: dns_events
  endpoint:
    path: /dns/events
    method: GET
    data_selector: dns
- name: predefined_hunting_filter_sets
  endpoint:
    path: /hunting-filters/predefined
    method: GET
    data_selector: filter_sets
    params: {}
- name: user_defined_filters
  endpoint:
    path: /hunting-filters/user-defined
    method: GET
    data_selector: user_filters
    params: {}
- name: smb
  endpoint:
    path: /smb/events
    method: GET
    data_selector: smb
    params: {}
- name: rfb
  endpoint:
    path: /rfb
    method: GET
    data_selector: rfb
    params: {}
- name: mqtt
  endpoint:
    path: /mqtt
    method: GET
    data_selector: mqtt
    params: {}
- name: http2
  endpoint:
    path: /http2
    method: GET
    data_selector: http2
    params: {}
- name: file_status
  endpoint:
    path: /rest/rules/filestore/<HASH>/status/
    method: GET
    data_selector: status
    params:
      host: <PROBE_NAME>
- name: file_retrieve
  endpoint:
    path: /rest/rules/filestore/<HASH>/retrieve/
    method: GET
    data_selector: retrieve
    params:
      host: <PROBE_NAME>
- name: file_download
  endpoint:
    path: /rest/rules/filestore/<HASH>/download/
    method: GET
    data_selector: download
    params:
      host: <PROBE_NAME>
- name: NDR Events
  endpoint:
    path: /api/v1/events
    method: GET
    data_selector: events
- name: suricata_sensor
  endpoint:
    path: /api/suricata/sensor
    method: POST
    data_selector: sensor_data
    params: {}
- name: Known Bad IPs
  endpoint:
    path: /add/custom/source
    method: POST
    data_selector: source
    params: {}
- name: predefined_filter_sets
  endpoint:
    path: /api/filter_sets
    method: GET
    data_selector: filter_sets
- name: user_defined_filters
  endpoint:
    path: /api/user_defined_filters
    method: GET
    data_selector: user_filters
- name: file_status
  endpoint:
    path: /rest/rules/filestore/<HASH>/status/
    method: GET
    data_selector: status
    params:
      host: <PROBE_NAME>
- name: file_retrieve
  endpoint:
    path: /rest/rules/filestore/<HASH>/retrieve/
    method: GET
    data_selector: retrieve
    params:
      host: <PROBE_NAME>
- name: file_download
  endpoint:
    path: /rest/rules/filestore/<HASH>/download/
    method: GET
    data_selector: download
    params:
      host: <PROBE_NAME>
- name: Threat Definitions
  endpoint:
    path: /YOUR_UNIQ_ID/stamus/str-etpro/threats.tar.gz
    method: GET
- name: Known Bad IPs
  endpoint:
    path: /YOUR_UNIQ_ID/stamus/bad-ips.list
    method: POST
- name: policies
  endpoint:
    path: /api/v1/policies
    method: GET
    data_selector: records
- name: policies
  endpoint:
    path: /api/policies
    method: GET
    data_selector: records
- name: backup
  endpoint:
    path: /home/snuser/backups/
    method: POST
    data_selector: backup
    params: {}
- name: restore
  endpoint:
    path: /home/snuser/backups/
    method: POST
    data_selector: restore
    params: {}
- name: map
  endpoint:
    path: /map
    method: GET
    data_selector: records
    params: {}
- name: replay
  endpoint:
    path: /replay
    method: GET
    data_selector: records
    params: {}
- name: tarExtract
  endpoint:
    path: /tarExtract
    method: GET
    data_selector: records
    params: {}
- name: tls
  endpoint:
    path: /tls
    method: GET
    data_selector: records
- name: rule_filter
  endpoint:
    path: /rest/rules/processing-filter/9/
    method: GET
    data_selector: filter_defs
    params: {}
- name: tls_ja4
  endpoint:
    path: /tls/ja4
    method: GET
    data_selector: tls
    params: {}
- name: tls_alpn
  endpoint:
    path: /tls/alpn
    method: GET
    data_selector: tls
    params: {}
- name: dcerpc
  endpoint:
    path: /dcerpc
    method: GET
    data_selector: smb
    params: {}
- name: transactions
  endpoint:
    path: /transactions
    method: GET
    data_selector: tx_id
    params: {}
- name: ssh
  endpoint:
    path: /ssh
    method: GET
    data_selector: ssh
    params: {}
- name: rule_filter
  endpoint:
    path: /rest/rules/processing-filter/9/
    method: GET
    data_selector: ''
    params: {}
- name: SN-ALERTS
  endpoint:
    path: /path/to/sn-alerts
    method: GET
    data_selector: alerts with metadata
    params: {}
- name: SN-ALERTS-CVE
  endpoint:
    path: /path/to/sn-alerts-cve
    method: GET
    data_selector: alerts with metadata
    params: {}
- name: SN-ALERTS-EXE-HUNT-1
  endpoint:
    path: /path/to/sn-alerts-exe-hunt-1
    method: GET
    data_selector: alerts with metadata
    params: {}
- name: SN-ALERTS-PHISHING
  endpoint:
    path: /path/to/sn-alerts-phishing
    method: GET
    data_selector: alerts with metadata
    params: {}
- name: SN-ALL
  endpoint:
    path: /path/to/sn-all
    method: GET
    data_selector: any log type
    params: {}
- name: SN-ANOMALY
  endpoint:
    path: /path/to/sn-anomaly
    method: GET
    data_selector: anomaly events
    params: {}
- name: SN-BEACONING-TLS
  endpoint:
    path: /path/to/sn-beaconing-tls
    method: GET
    data_selector: beaconing events
    params: {}
- name: SN-DCERPC
  endpoint:
    path: /path/to/sn-dcerpc
    method: GET
    data_selector: dcerpc logs
    params: {}
- name: SN-DHCP
  endpoint:
    path: /path/to/sn-dhcp
    method: GET
    data_selector: dhcp logs
    params: {}
- name: SN-DNP3
  endpoint:
    path: /path/to/sn-dnp3
    method: GET
    data_selector: dnp3 logs
    params: {}
- name: SN-DNS
  endpoint:
    path: /path/to/sn-dns
    method: GET
    data_selector: dns logs
    params: {}
- name: SN-DNS-HUNT-Tunnel
  endpoint:
    path: /path/to/sn-dns-hunt-tunnel
    method: GET
    data_selector: dns logs
    params: {}
- name: SN-FILE-Transactions
  endpoint:
    path: /path/to/sn-file-transactions
    method: GET
    data_selector: fileinfo, file transaction logs
    params: {}
- name: SN-FLOW
  endpoint:
    path: /path/to/sn-flow
    method: GET
    data_selector: flow, netflow logs
    params: {}
- name: SN-FLOW-HTTP
  endpoint:
    path: /path/to/sn-flow-http
    method: GET
    data_selector: flow logs specific to HTTP
    params: {}
- name: SN-FLOW-HUNT-DNS-EXFIL
  endpoint:
    path: /path/to/sn-flow-hunt-dns-exfil
    method: GET
    data_selector: flow logs specific to DNS
    params: {}
- name: SN-FLOW-HUNT-ICMP-Possible-EXFIL
  endpoint:
    path: /path/to/sn-flow-hunt-icmp-possible-exfil
    method: GET
    data_selector: flow logs specific to ICMP
    params: {}
- name: SN-FLOW-SIZE
  endpoint:
    path: /path/to/sn-flow-size
    method: GET
    data_selector: flow logs
    params: {}
- name: SN-FLOW-SMB
  endpoint:
    path: /path/to/sn-flow-smb
    method: GET
    data_selector: flow logs specific to SMB
    params: {}
- name: SN-FLOW-SSH
  endpoint:
    path: /path/to/sn-flow-ssh
    method: GET
    data_selector: flow logs specific to SSH
    params: {}
- name: SN-FLOW-TCP
  endpoint:
    path: /path/to/sn-flow-tcp
    method: GET
    data_selector: flow logs specific to TCP
    params: {}
- name: SN-FLOW-TLS
  endpoint:
    path: /path/to/sn-flow-tls
    method: GET
    data_selector: flow logs specific to TLS
    params: {}
- name: SN-FLOW-UDP
  endpoint:
    path: /path/to/sn-flow-udp
    method: GET
    data_selector: flow logs specific to UDP
    params: {}
- name: SN-HTTP
  endpoint:
    path: /path/to/sn-http
    method: GET
    data_selector: http logs
    params: {}
- name: SN-HTTP-HUNT
  endpoint:
    path: /path/to/sn-http-hunt
    method: GET
    data_selector: http logs
    params: {}
- name: SN-HUNT-1
  endpoint:
    path: /path/to/sn-hunt-1
    method: GET
    data_selector: tls, http, dns, flow, smb, krb, icmp, file transaction logs
    params: {}
- name: SN-IDS
  endpoint:
    path: /path/to/sn-ids
    method: GET
    data_selector: alert logs
    params: {}
- name: SN-IKEv2
  endpoint:
    path: /path/to/sn-ikev2
    method: GET
    data_selector: ike logs
    params: {}
- name: SN-IoC-Search
  endpoint:
    path: /path/to/sn-ioc-search
    method: GET
    data_selector: tls, http, dns logs
    params: {}
- name: SN-KRB5
  endpoint:
    path: /path/to/sn-krb5
    method: GET
    data_selector: krb5 logs
    params: {}
- name: SN-MQTT
  endpoint:
    path: /path/to/sn-mqtt
    method: GET
    data_selector: mqtt logs
    params: {}
- name: SN-NFS
  endpoint:
    path: /path/to/sn-nfs
    method: GET
    data_selector: nfs logs
    params: {}
- name: SN-Network-Overview
  endpoint:
    path: /path/to/sn-network-overview
    method: GET
    data_selector: flow logs
    params: {}
- name: SN-Network-Overview-1
  endpoint:
    path: /path/to/sn-network-overview-1
    method: GET
    data_selector: flow logs
    params: {}
- name: SN-Network-Overview-2
  endpoint:
    path: /path/to/sn-network-overview-2
    method: GET
    data_selector: flow logs
    params: {}
- name: SN-OVERVIEW
  endpoint:
    path: /path/to/sn-overview
    method: GET
    data_selector: any logs
    params: {}
- name: SN-POLICY-OLD-TLS
  endpoint:
    path: /path/to/sn-policy-old-tls
    method: GET
    data_selector: tls logs
    params: {}
- name: SN-POLICY-Violations
  endpoint:
    path: /path/to/sn-policy-violations
    method: GET
    data_selector: alert logs
    params: {}
- name: SN-POSTPROC-Stats
  endpoint:
    path: /path/to/sn-postproc-stats
    method: GET
    data_selector: stats logs
    params: {}
- name: SN-RDP
  endpoint:
    path: /path/to/sn-rdp
    method: GET
    data_selector: rdp logs
    params: {}
- name: SN-RFB
  endpoint:
    path: /path/to/sn-rfb
    method: GET
    data_selector: rfb logs
    params: {}
- name: SN-SIGHTINGS
  endpoint:
    path: /path/to/sn-sightings
    method: GET
    data_selector: tls, http, dns, smb, logs
    params: {}
- name: SN-SIGNATURE-Performance
  endpoint:
    path: /path/to/sn-signature-performance
    method: GET
    data_selector: signature profiling metrics on cpu ticks
    params: {}
- name: SN-SIP
  endpoint:
    path: /path/to/sn-sip
    method: GET
    data_selector: sip logs
    params: {}
- name: SN-SMB
  endpoint:
    path: /path/to/sn-smb
    method: GET
    data_selector: smb logs
    params: {}
- name: SN-SMB-DCERPC-Lateral-1
  endpoint:
    path: /path/to/sn-smb-dcerpc-lateral-1
    method: GET
    data_selector: smb logs
    params: {}
- name: SN-SMTP
  endpoint:
    path: /path/to/sn-smtp
    method: GET
    data_selector: smtp logs
    params: {}
- name: SN-SNMP
  endpoint:
    path: /path/to/sn-snmp
    method: GET
    data_selector: snmp logs
    params: {}
- name: SN-SSH
  endpoint:
    path: /path/to/sn-ssh
    method: GET
    data_selector: ssh logs
    params: {}
- name: SN-STAMUS
  endpoint:
    path: /path/to/sn-stamus
    method: GET
    data_selector: doc logs
    params: {}
- name: SN-TFTP
  endpoint:
    path: /path/to/sn-tftp
    method: GET
    data_selector: tftp logs
    params: {}
- name: SN-TLS
  endpoint:
    path: /path/to/sn-tls
    method: GET
    data_selector: tls logs
    params: {}
- name: SN-TrafficID
  endpoint:
    path: /path/to/sn-trafficid
    method: GET
    data_selector: alert logs
    params: {}
- name: SN-VLAN
  endpoint:
    path: /path/to/sn-vlan
    method: GET
    data_selector: all logs
    params: {}
- name: dns_events_filter
  endpoint:
    path: /events/dns
    method: GET
- name: flow_events_filter
  endpoint:
    path: /events/flow
    method: GET
- name: enrichment_options
  endpoint:
    path: /events/enrichment
    method: GET
- name: file_extraction
  endpoint:
    path: /rest/rules/filestore/<HASH>/status/?host=<PROBE_NAME>
    method: GET
    data_selector: status
- name: retrieve_file
  endpoint:
    path: /rest/rules/filestore/<HASH>/retrieve/?host=<PROBE_NAME>
    method: GET
    data_selector: retrieve
- name: download_file
  endpoint:
    path: /rest/rules/filestore/<HASH>/download/?host=<PROBE_NAME>
    method: GET
    data_selector: file
- name: alerts
  endpoint:
    path: /rest/rules/es/alerts_tail/
    method: GET
    data_selector: results
    params:
      qfilter: alert.signature_id%3A<signature_id> AND flow_id%3A<flow_id>
- name: upload_pcap
  endpoint:
    path: /rest/rules/filestore_pcap/upload/
    method: POST
    data_selector: ''
    params:
      host: <PROBE_NAME>
- name: extract_pcap
  endpoint:
    path: /rest/rules/filestore_pcap/<FILENAME RESPONSE FROM STEP 1>/extract_pcap/
    method: POST
    data_selector: ''
    params:
      host: <PROBE_NAME>
- name: retrieve_pcap
  endpoint:
    path: /rest/rules/filestore_pcap/<FILENAME RESPONSE FROM STEP 1>/retrieve/
    method: GET
    data_selector: ''
    params:
      host: <PROBE_NAME>
- name: download_pcap
  endpoint:
    path: /rest/rules/filestore_pcap/<FILENAME RESPONSE FROM STEP 1>/download/
    method: GET
    data_selector: ''
    params: {}
- name: NSM settings
  endpoint:
    path: /nsm/settings
    method: GET
- name: Protocols
  endpoint:
    path: /nsm/protocols
    method: GET
- name: HTTP custom fields
  endpoint:
    path: /nsm/http
    method: POST
- name: SMTP custom fields
  endpoint:
    path: /nsm/smtp
    method: POST
- name: DNS custom fields
  endpoint:
    path: /nsm/dns
    method: POST
- name: File handling
  endpoint:
    path: /nsm/file
    method: POST
- name: Rule Activity
  endpoint:
    path: /nsm/rules/activity
    method: GET
- name: alerts
  endpoint:
    path: /rest/rules/es/alerts_tail/
    method: GET
    data_selector: results
    params:
      qfilter: alert.signature_id%3A{signature_id} AND flow_id%3A{flow_id}
- name: upload_pcap
  endpoint:
    path: /rest/rules/filestore_pcap/upload/
    method: POST
    data_selector: filename
    params:
      host: <PROBE_NAME>
- name: extract_pcap
  endpoint:
    path: /rest/rules/filestore_pcap/<FILENAME RESPONSE FROM STEP 1>/extract_pcap/
    method: POST
    data_selector: ''
    params:
      host: <PROBE_NAME>
- name: retrieve_pcap
  endpoint:
    path: /rest/rules/filestore_pcap/<FILENAME RESPONSE FROM STEP 1>/retrieve/
    method: GET
    data_selector: ''
    params:
      host: <PROBE_NAME>
- name: download_pcap
  endpoint:
    path: /rest/rules/filestore_pcap/<FILENAME RESPONSE FROM STEP 1>/download/
    method: GET
    data_selector: ''
    params: {}
notes:
- 'The Access Token must be sent using the HTTP header ''Authorization: Token <TOKEN>'''
- SCS provides out-of-box filters, called Filters Set, and that’s the methodology
  we use to produce them.
- You are viewing an older version of this documentation.
- 'Most recent is here: 42.0.0'
- The groups SCSAdmins and SCSStaff need to be part of the group SCSActive otherwise
  members will not have an active status and would not be able to log into SCS.
- After the configuration is submitted, you need to click on apply changes to make
  it active.
- A name must not be included in another name to avoid potential conflicts during
  log fetching.
- The name in load must be the same as the name of the dataset source.
- For both custom source addition types (http url or upload), you should select Individual
  Signatures file as Datatype.
- The installation process is mostly unattended.
- Default credentials for login are `scirius:scirius`.
- All models require an USB Keyboard and a VGA monitor (or an adaptator for VGA) to
  be able control the boot process of our Appliances.
- External ELK cluster aren’t part of the components we do support.
- To use Stamus Networks support portal, you have to setup an account.
- Each Tenant will be named following the name of the Network Definition used on the
  relevant Stamus Network Probe.
- Activating multi-tenancy cannot be reverted without losing all previously collected
  data.
- 'The Access Token must be sent using the HTTP header `Authorization: Token <TOKEN>`.'
- Hassh must be enabled in the Suricata config file (set ‘app-layer.protocols.ssh.hassh’
  to ‘yes’)
- 'The HTTP header Content-Type: application/json must be provided'
- 'Access Token must be sent using the HTTP header ''Authorization: Token <TOKEN>'''
- Uses OAuth2 with refresh token — requires setup of connected app in api
- Uses OAuth2 for authentication.
- Uses loose filters for exploration is acceptable.
- The SCS provides out-of-box filters called Filters Set.
- High-fidelity Declarations of Compromise™ are generated by Stamus Security Platform,
  signaling a serious threat on an asset.
- Beacons and Sightings detection require a NDR license.
- Consider enabling High Entropy NRD and Phishing NRDs 30 days list with any deployment
  that is also monitoring internet (North-South) traffic.
- On the smallest Stamus Networks HW probe models - SN-VA-100M (100 mbps virtual model)
  only the Phishing NRDs list should be enabled.
- 'Enrichment will be present in event types: SIGHTINGS, alert, flow, tls.'
- Any TLS based alert or TLS protocol event will have Cipher analytics subsection
  as part of the standard JSON log.
- The TLS Application-Layer Protocol Negotiation (ALPN) is an extension of the TLS
  protocol that allows the client and server to negotiate which application protocol
  to use during the TLS handshake.
- Stamus Security Platform analyzes and automatically detects any KRB5-based connection.
- Data in the logs contain various aspects of that encrypted connection including
  fields and values related to the encryption itself.
- The Stamus Security Platform is threat intel feed vendor agnostic.
- Daily updated detection methods for various types of encrypted communication.
- A filter set is basically a hunting idea or concept – translated into criteria based
  on the selection, negation and wild carding of event metadata values.
- The import/export format is json.
- Any data from the Kibana dashboards or visualizations can be exported as CSV or
  PDF.
- Over 120 pre-defined filter sets available.
- Filters can be negated or wildcarded.
- After any configuration change in this section is submitted, you need to click on
  apply changes to make it active.
- Only Global Filter Sets and Private Filter Sets can be deleted.
- Consult your Identity Provider (IdP) for more details what configuration needs to
  be provided, like the Identity Provider URL and the Identity Provider metadata.
- Some IdP’s won’t need that SP metadata to be provided.
- Stamus Central Server does not support external SSL Elasticsearch that is using
  a self signed certificate or any certificate that is not signed by a publicly trusted
  certificate authority (CA based PKI)
- Your comments, suggestions, and ideas for improvements are very important to us.
- In case there is a no interface displayed, you can use (Re)discover system parameters
  under Special actions sub menu from the left hand side panel.
- After any configuration change in the authentication section, you need to click
  on apply changes.
- For all settings related to Network Security Monitoring, you need to apply changes
  on the probe once you are happy with your change set.
- It is recommended to select at least Conditional logging as it will provide context
  around IDS alerts that is really beneficial when doing investigation.
- Declarations of Compromise were formerly known as STR Events prior U38.0.0
- If you enable an external Elasticsearch on your SCS setup and you do not explicitly
  specify a port, then port 9200 will be set as a default one.
- The objectives is to lower the amount of generated data by applying some specific
  filters.
- You need to apply changes on the probe once you are happy with your change set.
- File extraction has a performance impact on the Stamus Probe it is enabled on.
- Extracted files are de-duplicated.
- Extracted files are de-duplicated. In other words if the same file is extracted
  5 times it will only be saved to disc once on the particular Stamus Probe.
- Each subnet or IP address in the network definition must be unique.
- Load balancers and proxies should be excluded from the HOME_NET in order not to
  miss detection.
- You need to enable listening to port 443/TCP if you want to configure and apply
  VPN proxy settings on a probe.
- Templates allow you to change properties on a set of Stamus Probes in one single
  action.
- Specific settings can be overridden when editing a template.
- Load balancers and proxies should be excluded from the HOME_NET.
- VPN probes and Loggers are incompatible in v39.0.0.
- The configuration of the SCS will be lost when converting to a Stamus Logger.
- RYOD requires dedicated performance and HW resources. It is not recommended to enable
  and run RYOD containers in Virtual production environments.
- After registering successfully a Stamus Networks Probe, some additional configuration
  needs to be done.
- At least one protocol needs to be set active.
- The correct sniffing network interface needs to be activated.
- Using port 443/TCP breaks the IP address logging of connections to SCS.
- You need to have at least one interface prior to submitting proxy configuration.
- To create a template, go to Appliances then click Add template in the Action category
  of the left menu.
- To list templates, click on Template list. There you can select a template and edit
  it by clicking on Edit settings in the Action category of the left menu.
- Overridden settings are displayed with a pin on the top right corner. To get back
  to template value, simply click on the pin and validate the action by clicking on
  Reset in the pop up.
- For any template changes to take effect and become active you would need to Apply
  changes on the particular probe or probes.
- Upload managed files are not updated during ruleset update.
- To trigger an update, you need to Edit the source and upload a new file.
- VPN probes and Loggers are incompatible in v39.0.0
- 'WARNING: converting SCS into a Stamus Logger will lose the configuration of the
  SCS and cannot be reverted.'
- Bad written signatures can result in very bad detection performance for the whole
  system or generate very noisy alerts.
- Make sure that the variables HOME_NET and EXTERNAL_NET are correctly set, since
  a big portion if signatures rely on those.
- In general the so called sticky buffers in Suricata provide a better performance
  compared to the legacy keywords.
- Once the configuration fits your environment requirements, don’t forget to Apply
  Changes
- Password for `ams` user should be used as one time password for probe registration
  in the Stamus Central Server interface.
- 'On CentOS based sensors: The option **Defaults requiretty** in **/etc/sudoers**
  needs to be commented.'
- Webhooks are only available with Clear NDR Tier 3
- Uses Suricata signatures for detection capabilities.
- Webhook takes the scirius visible address to construct the links to NDR.
- In some specific cases, if you are using the AIO, Logstash over VLAN, etc. - you
  would need to adjust the webhooks template content, in order to make it work.
- Ensure to use specific variables instead of 'any' unless there is a good reason
  to not follow that.
- Using 'threshold' is a good way to limit alerts and reduce noise.
- External Links Templates offer dynamic and customizable access to the latest threat
  intelligence available.
- This feature streamlines the investigation process by providing immediate access
  to external information on suspicious entities.
- Password for 'ams' user is used as a one-time password for probe registration.
- After registration, the password of the 'ams' user will be reset by SCS.
- The default user’s (scirius) credentials need to be reset with the `stamus_config`
  CLI tool on the Stamus Central Server.
- Use user `admin` for AWS, GCP and `adminaz` for Azure when connecting over the shell.
- Please contact Stamus Networks to obtain the latest images for AWS/GCP/Azure.
- If you SCS is able to access Internet over HTTPS, then all you need to do is to
  configure a Source to get updates from https://ti.stamus-networks.io
- The proper deployment for Stamus Network Probes is crucial to ensure the correct
  visibility of network traffic in the environment.
- Full coverage every traffic passing any switch would have to be mirrored, but that
  is rarely feasible.
- It is highly recommended to configure the custom system with 2 disks in RAID 1 redundant
  storage array.
- External Links Templates can also be edited or deleted from the External links page.
- Default credentials are snuser:snpasswd for initial login.
- After installation, change the default password using the passwd command.
- Ensure the USB key has at least 2GB of space
- Substitute `/dev/sdc` from this example to the actual device of the USB stick that
  you have plugged into your system.
- On Windows, you can use programs such as Rufus to write the ISO file to a USB stick.
- Make sure to setup the BIOS to boot the USB stick in Legacy mode.
- Restoring from a backup created on non-consecutive versions will not be possible.
- Restoring data will cause all existing data to be lost.
- Stamus Central Server (SCS) upgrade time will vary depending on the hardware or
  allocated resources of the system and could take up to 40 minutes for smaller VMs.
- A full coverage every traffic passing any switch would have to be mirrored, but
  that is rarely feasible.
- If the error is only localized on SCS, generate a report for SCS. If the error is
  on the probe, generate a report on both SCS and the Probe.
- The software is licensed annually, and multiple years may be purchased together.
- All licenses include software maintenance and support with new software updates
  approximately every 3 months.
- If you are installing the Stamus Central Server or the Stamus Network Probe on a
  custom hardware (non Stamus issued HW), it is required to have the custom HW configuration
  to be approved prior by Stamus Networks.
- Ensure all services and connections are running properly on both SCS and Stamus
  Probes.
- Refer to SNMP’s user manual to properly configure the SNMP daemon according to the
  specification of your environment.
- Ensure that the networks you map during the deployment match your VM’s requirements.
- All OVF images come with fixed disks, that can be adjusted if needed.
- Setup the BIOS to boot the USB stick in Legacy mode
- Default pagination returns 30 items per page starting from page 1.
- Date parameters must be provided in Unix Timestamp format.
- If restoring the backup on a machine with different IP address, an additional configurational
  step is needed.
- Default pagination returns 30 items per page starting from the first page.
- Execute troubleshooting steps via the provided API endpoints.
- SNMP (Simple Network Management Protocol) is a widely used protocol for network
  management.
- If multi-tenancy is enabled, ensure correct tenant value is used.
- Unix timestamp format is required for date and time parameters.
- If multi-tenancy is enabled, appropriate tenant value should be used.
- Pagination settings can be modified if needed.
- API calls require a token in order to ensure secure communication.
- If multi-tenancy is enabled, uncomment the corresponding lines in the class.
- If customizations are needed for pagination and date/time range uncomment lines
  in the methods.
- Requires setup of connected app in api
- API calls require a token for secure communication.
- By default, API calls will return 30 items per page starting from page 1.
- By default Stamus Central Server uses a pagination system with a default page size
  of 30 and starts on page 1.
- API calls will return 30 items per page starting from the first page.
- If customizations are needed for pagination and date/time range uncomment the corresponding
  lines below and change to desired value.
- If tenancy is enabled, uncomment the lines below
- Date and time must be provided in Unix Timestamp format.
- Default pagination is set to return 30 items per page starting from page 1.
- Tenant parameter is not used by default and should only be used if multi-tenancy
  is enabled.
- Default pagination returns 30 items per page starting from page 1
- Any and all logs produced by the Stamus Central Server are in standard JSON format.
- Each event produced by the Stamus Central Server has its own log event type.
- Some objects may return nulls in deeply nested fields
- Fields include timestamp, event_type, src_ip, src_port, dest_ip, dest_port, proto.
- Extended logging can provide additional details such as HTTP method, status, and
  headers.
- Uses new version of dns logging to improve how dns answers are logged
- GopherCap is a lightweight tool for working with PCAP files.
- This API provides access to various types of event data including alerts, anomalies,
  and HTTP events.
- Uses different formats for logging dns answers
- IKEv1 and IKEv2 have different feature sets
- GopherCap uses a single configuration dictionary for all subcommands.
- For the rest of the High Entropy NRDs or All NRD there must be minimum of 2.4Gb
  or 3.6GB additional RAM respectively available.
- Any TLS based alert or TLS protocol event will have TLS JA4 subsection as part of
  the standard JSON log.
- Any DCERPC event will have enrichment in the form of a name mapping subsection as
  part of the standard JSON log.
- Any protocol event will have enrichment in the form tx_id as part of the standard
  JSON log.
- Any SSH protocol event will have by default the ssh client and server software and
  version as part of its log.
- Predefined filter sets are organized around 11 categories.
- The combined power of predefined filter sets with local organizational enrichment
  provides a proactive approach to minimizing the risk of malware.
- On the smallest Stamus Networks HW probe models - SN-VA-100M only the Phishing NRDs
  list should be enabled.
- Global filter sets are shared between all authorized and authenticated users.
- Private filter sets are available only to the user who created them.
- Any TLS based alert or TLS protocol event (even TLS 1.3 with full encryption) will
  have TLS JA4 subsection as part of the standard JSON log.
- Stamus Security Platform is threat intel feed vendor agnostic
- Uses a drill down approach to select events.
- All time range will set a time range from the first to the last stored alert.
- 10.136.0.27 is the IP of SCS
- There is a fall back on local database but one should keep a user with admin privilege
  in the local database which username is not available/existing in the Active Directory.
- Some IdP’s won't need that SP metadata to be provided. Consult the documentation
  of the Identity Provider that is going to be used.
- After any configuration change in the authentication section is submitted, you need
  to click on apply changes to make it active.
- Stamus Central Server does not support external SSL Elasticsearch that is using
  a self signed certificate or any certificate that is not signed by a publicly trusted
  certificate authority
- In case there is a no interface displayed, you can use '(Re)discover system parameters'
  under 'Special actions' sub menu from the left hand side panel.
- Provides insights into various categories of policy violations.
- Allows creation of custom Declarations of Policy Violation.
- This system allows you to filter some network security monitoring events based on
  some criteria.
- The partition on which the files are stored on the Network Probes can only be extended
  on virtual machines.
- You can use a custom HTTPS certificate and key for the connection with the web UI.
- To clear the logs history, click on `Appliances` major menu, select `Global Appliance
  Settings` from the drop down menu on the left upper side corner(Stamus Networks
  logo).
- To clear the logs history, click on Appliances major menu, select Global Appliance
  Settings from the drop down menu on the left upper side corner(Stamus Networks logo).
- Once you configure the VPN proxy settings, you have to recreate the VPN certificate
  and register the Probe.
- If a child template that is deployed to a probe is deleted - the parent/base template
  takes over.
- For any template changes to take effect and become active you would need to `Apply
  changes` on the particular probe or probes.
- This operation cannot be reverted.
- Before you begin and in case you already have VPN probe(s), you should have in mind
  that VPN probes and Loggers are incompatible in v39.0.0.
- 'WARNING: this will convert the SCS into a Stamus Logger. The configuration of the
  SCS will be lost. This operation cannot be reverted.'
- If you are a SELKS user, the menu Appliances won’t be accessible to you. Instead,
  use the Suricata menu.
- Stamus Networks is threat intel vendor agnostic.
- The expected format is pure text, one IoC (like a Domain or HTTP user agent) per
  line.
- Each time you change a signature, increase the revision value rev:.
- By default only the top 10 signatures are shown. This can be adjusted via Custom
  suricata runtime flags.
- Upload managed file are not updated during ruleset update.
- By default only the top 10 signatures are shown. This can be adjusted via Custom
  suricata runtime flags
- Apply changes to both Stamus Central Server and Probe after enabling SSL.
- Once you have selected the checkbox, you will see that there is one more option
  you could choose - Signature based Stamus Threat Radar.
- In order to be able to use the Signature based Stamus Threat Radar feature, you
  should mandatorily add stamus.rules to the list of sources in suricata.yaml, then
  restart Suricata on your Custom Sensors.
- Password for ams user should be used as one time password for probe registration
  in the Stamus Central Server interface.
- After executing the steps above, you should do an Update/Push Ruleset in order to
  enable log shipping from the remote Suricata sensor to Stamus Central Server.
- Provides daily Threat Updates to ensure up to date coverage of recent threats.
- Daily Threat Updates to ensure up-to-date coverage of recent threats.
- Webhooks are only available with Stamus NDR
- External Links Templates can be edited or deleted from the External links page.
- If you are already using Webhooks and would like to enable Multi Tenancy feature,
  you need to adjust your Webhooks Integrations setup.
- Traffic captured directly at the WAN uplink will show all traffic coming in and
  outside the network.
- The described guideline highly benefits from a proper network architecture with
  strict segregation.
- Free Sales Trial license limited to 30 days, may be extended.
- Sales Trial license is limited to 30 days.
- Stamus Network Probe has 2 network interfaces, one for management and one for sniffing
  the traffic.
- The sniffing interface on the Network Probe is set to Promiscuous mode.
- Highly recommended to configure the custom system with 2 disks in RAID 1 redundant
  storage array.
- Default credentials for login are snuser:snpasswd.
- Use sudo stamus_config to set minimum required parameters.
- The installation process is mostly unattended and all you need to do is select the
  first option when presented with the installation screen.
- Once the parameters are set, Save & apply changes, exit stamus_config and reboot
  the system using sudo reboot.
- Make sure to setup the BIOS to boot the USB stick in Legacy mode
- If restoring the backup on a machine with different ip address, an additional configurational
  step is needed.
- Restoration procedure doesn’t include network parameters of the system.
- Token is generated via SSH command.
- Ensure the API is reachable before executing troubleshoot steps.
- Date and time parameters must be provided in Unix Timestamp format.
- Default pagination starts on page 1.
- API calls return 30 items per page starting from page 1.
- Use Unix Timestamp format for date and time parameters.
- If multi-tenancy is enabled, the tenant parameter should be used.
- If multi-tenancy is enabled, corresponding lines need to be uncommented and the
  correct tenant value should be used.
- If multi-tenancy is enabled, you may need to customize parameters.
- By default, API calls will return 30 items per page starting from the first page.
- Tenant parameter should only be used if multi-tenancy is enabled.
- Default API calls will return 30 items per page starting from page 1.
- Default settings for tenancy and pagination are employed.
- Pagination defaults to 30 items per page
- Date must be provided in Unix Timestamp format
- Multi-tenancy is supported
- Custom pagination settings can be applied
- Pagination defaults to 30 items per page starting from page 1.
- Customizations are needed for pagination and date/time range.
- Default page size is 30, starts on page 1
- If multi-tenancy is enabled, appropriate tenant parameters should be added.
- By default API calls will return 30 items per page starting from the first page.
- Uses JSON format for logs
- Includes common fields across different event types
- New version of dns logging improves how dns answers are logged.
- DNS events can be logged in detailed or grouped format.
- Uses SMB protocol for events
- Stamus Central Server generates different types of data that can be used in various
  cases such as - detection, hunting, matching, statistics and analysis.
- GopherCap can handle large asynchronous PCAP sets efficiently.
- CLI flags override values in configuration dictionary.
- Uses detailed and grouped formats for logging DNS answers
- Control over logged RR types using 'types' field in suricata.yaml
- Uses JSON data format for SMB events
- Gophercap is an open source project maintained by Stamus Networks for accurate,
  modular and scalable PCAP manipulation.
- File extraction is performed through the usage of Suricata rules.
- All extracted files will have their sha256 fingerprint computed.
- The deduplication of files is performed on a per probe basis.
- To clear the logs history, click on Appliances major menu, select Global Appliance
  Settings from the drop down menu on the left upper side corner(Stamus Networks logo).
  Click on the Log retention tab and click Clean old logs now.
- If your network is not compliant with RFC1918, simply define your internal networks
  in Home as they are, this will work as expected.
- All your subnets and IPs should be part of Home, including your public IP addresses.
- The HOME_NET type can also be set to All networks. Choose this option if your network
  definition doesn’t define 'Internet' (0.0.0.0/0) and only contains addresses and
  subnets that belong to your organization.
- As of U38.0, there is a UI bug that displays a brown triangle next to the subnets
  or IP addresses indicating that the address is invalid. While this is disturbing,
  this is just a UI glitch and the underlying logic works. Simply ignore this warning,
  this will be fixed soon.
- Default user/password combination to connect to the container is login 'snuser'
  and password 'snpasswd'.
- After executing the steps above, you should do an `Update/Push Ruleset` in order
  to enable log shipping from the remote Suricata sensor to Stamus Central Server.
- If you are working in a closed environment which prevent SCS from accessing Internet,
  you will need to regularly update threats definition manually.
- Over 110 pre-defined filter sets available.
- As of October 2021, Microsoft Azure Virtual Network TAP is on hold for all regions.
  Deploying Network Probes in Microsoft Azure requires a third party packet broker.
- The software versions must strictly be identical on the backuped server and the
  restored VM.
- Some of those files may be potentially dangerous, proceed with caution when downloading
  them!
- Some objects like Contact may return nulls in deeply nested fields
- Once a RYOD container is created it can be accessed via SSH protocol at the same
  address as the Stamus Central Server but on a separate port.
- The default user/password combination to connect to the container is login `snuser`
  and password `snpasswd`. So please change it as soon as you connect to the container.
- GopherCap is an open source project maintained by Stamus Networks for accurate,
  modular and scalable PCAP manipulation.
- Gophercap does not aim to be a generic traffic replay tool like tcpreplay.
- Ensure proper SMTP configuration for email notifications.
- Webhook actions can be triggered for STR events.
- Uses OAuth2 for authentication — requires configuration of Clear NDR® Central Server
- High-fidelity Declarations of Compromise™ (DoCs) are high-confidence and high-priority
  security events generated by Stamus Security Platform.
- Guided threat hunting empowers users to investigate, classify, escalate, and automate
  vast amounts of event data.
- Keep a user with admin privilege in the local database which username is not available/existing
  in the Active Directory.
- Consult your Identity Provider (IdP) for more details on configuration.
- If Stamus Central Server can not connect directly to the internet and has to use
  a proxy, you can check the `Use a proxy` checkbox.
- Before you enable the external Elasticsearch cluster, you should have in mind that
  Evebox only supports one single ES node.
- If you enable an external Elasticsearch on your SCS setup and you do not explicitly
  specify a port, then port `9200` will be set as a default one.
- Activating network card load balancing is not recommended for virtual probes.
- Declarations of Compromise were formerly known as STR Events prior U38.0.0.
- Some IdP’s won't need that SP metadata to be provided.
- Extracted files are de-duplicated on a per probe basis.
- Unset the checkbox `Use elasticsearch` if you want to totally remove all data analysis
  from the product.
- Evebox only supports one single ES node. So in case you have more than one node,
  Evebox will not be accessible.
- Conditional pcaps stored are automatically rotated based on total size limit for
  all.
- Changes need to be applied on the probe once the desired configurations are set.
- The recommended logging for protocols is at least 'Conditional logging'.
- Once a new Declaration of Compromise has been created, please update/push ruleset.
- To clear the logs history, click on `Appliances` major menu, select `Global Appliance
  Settings` from the drop down menu on the left upper side corner.
- 'Important: It is highly recommended and advised for any expert configurational
  changes to be reviewed and approved by Stamus Networks as there can be performance
  and/or detection impact.'
errors:
- '401 Unauthorized: Invalid Token'
- 'INVALID_CREDENTIALS: Check bind parameters for accuracy.'
- 'Authentication failed for user: user DN/password rejected by LDAP server.'
- 'Authentication failed for user: failed to map the username to a DN.'
- Contact support for assistance with account setup
- 'REQUEST_LIMIT_EXCEEDED: Throttle API calls or reduce frequency'
- '401 Unauthorized: Recheck API key or token expiration'
- '401 Unauthorized: Recheck OAuth scopes or token expiration'
- 'QUERY_TIMEOUT: Break down filters or add selectivity'
- 'FILTER_NOT_FOUND: Ensure correct filter name is used.'
- 'INVALID_FILTER_SYNTAX: Check for proper syntax in filter definitions.'
- 'SC_ERR_UNKNOWN_PROTOCOL(124): protocol cannot be used in a signature.'
- 'SC_ERR_INVALID_SIGNATURE(39): error parsing signature from file.'
- 'SC_ERR_NO_RULES(42): No rules loaded from file.'
- 'Invalid configuration: Check sensor settings and ensure all prerequisites are met.'
- 'Connection failed: Ensure SSH access is enabled and credentials are correct.'
- '401 Unauthorized: Check your credentials and permissions.'
- Dropped packets, either on the path towards the probe or on the probe, are a big
  issue, because the detection is negatively impacted.
- If packets are missing it’s very similar to dropped packets and are typical issue
  with oversubscribed mirror parts.
- 'TOKEN_EXPIRED: Generate a new access token.'
- 'REQUEST_LIMIT_EXCEEDED: Throttle API calls or reduce frequency.'
- 'INVALID_TENANT: Ensure correct tenant ID is used.'
- '401 Unauthorized: Check the provided token and its validity.'
- '404 Not Found: Ensure the specified probe or appliance exists.'
- '500 Internal Server Error: The server encountered an unexpected condition.'
- '401 Unauthorized: Recheck token validity or permissions'
- '401 Unauthorized: Recheck token validity'
- '404 Not Found: Verify the endpoint path'
- '500 Internal Server Error: Retry the request later'
- '401 Unauthorized: Check token validity.'
- '404 Not Found: Ensure the endpoint is correct.'
- '401 Unauthorized: Recheck token validity or permissions.'
- '401 Unauthorized: Ensure token is valid and has proper scopes.'
- '429 Too Many Requests: Throttle API calls to avoid rate limiting.'
- '404 Not Found: Check the endpoint and parameters for correctness.'
- '401 Unauthorized: Recheck access token validity or permissions'
- '400 Bad Request: Check the request parameters'
- '404 Not Found: Ensure the endpoint exists'
- '500 Internal Server Error: Try again later or contact support'
- 'INVALID_CREDENTIALS: Check bind parameters'
- 'user DN/password rejected by LDAP server: Check user credentials'
- 'failed to map the username to a DN: Check if the user exists'
- 'INVALID_CREDENTIALS: Check the bind parameters.'
- 'Authentication failed for <username>: user DN/password rejected by LDAP server.'
- Error. Host %s is not up...
- 'Request failed with status code: {status_code}'
- '400 Bad Request: Ensure the JSON structure is correct when importing.'
- 'SC_ERR_NO_RULES(42): No rules loaded from rules file.'
- 'SC_ERR_NO_RULES(42): No rules loaded from the specified rule file.'
- If your sniffing interface doesn’t appear in the list of the interfaces, you can
  add it manually.
- 'EXIT_WUSAGE: Usage error in script execution.'
- 'EXIT_WERROR_NOSSH: SSH connection error.'
- 'EXIT_WFAILCHECK: Troubleshoot check failure.'
- Request for account setup may be triaged to the SPAM folder.
- '401 Unauthorized: Recheck token validity.'
- 'QUERY_TIMEOUT: Break down filters or add selectivity.'
- '401 Unauthorized: Ensure correct token is provided.'
- '404 Not Found: Verify the endpoint is correct.'
- '500 Internal Server Error: Contact support if this issue persists.'
- '401 Unauthorized: Ensure the token is valid and not expired.'
- 'Unauthorized: Check the token and ensure it is valid.'
- 'Not Found: Verify the endpoint and parameters.'
- '400 Bad Request: Check request parameters'
- '401 Unauthorized: Check token validity'
- '500 Internal Server Error: Check server status'
- '400 Bad Request: Check your query parameters'
- '404 Not Found: Check endpoint path'
- '500 Internal Server Error: Retry the request'
- '401 Unauthorized: Check if the token is valid'
- '404 Not Found: Ensure the endpoint path is correct'
- '500 Internal Server Error: An unexpected error occurred'
- '401 Unauthorized: Recheck token validity or scopes'
- '401 Unauthorized: Recheck token validity or authorization'
- '404 Not Found: Check endpoint path or resource existence'
- 'INVALID_QUERY: The DNS query is malformed.'
- 'NO_DATA: The DNS query returned no data.'
- 'ERROR_FILE_NOT_FOUND: Check the file path.'
- 'ERROR_INVALID_REGEXP: Ensure the regular expression is valid.'
- '404 Not Found: The specified file does not exist.'
- '403 Forbidden: Insufficient permissions to access the file.'
- '401 Unauthorized: Check OAuth scopes or token expiration'
- '200: Request is successful!'
- '404: Resource not found'
- '400: Bad request'
auth_info:
  mentioned_objects:
  - LDAP server URI
  - LDAP bind user
  - LDAP search settings
  - LDAP groups mapping
  - RestCall
  - HostInsights
  - Alerts
  - OauthToken
  - AuthProvider
  - NamedCredential
client:
  base_url: https://<stamus.security.platform.ip>/rest/
  auth:
    type: Token
    location: header
    header_name: Authorization
  paginator:
    default_page_size: 30
source_metadata: null
