resources:
- name: initiate_payment
  endpoint:
    path: /merchants/{mid}/orders/{orderId}
    method: POST
    data_selector: orderDetailDescription
- name: orders
  endpoint:
    path: /api/v2/merchants/{mid}/orders
    method: POST
    data_selector: transactionReferences
    params: {}
- name: tokens
  endpoint:
    path: /api/v2/merchants/{mid}/tokens
    method: POST
    data_selector: transactionReferences
    params: {}
- name: authentications
  endpoint:
    path: /api/v2/merchants/{mid}/orders/{orderId}/authentications
    method: POST
    data_selector: transactionReferences
    params: {}
- name: initiate_payment
  endpoint:
    path: /merchants/{mid}/orders/{orderId}
    method: POST
    data_selector: transactionReferences
    params: {}
- name: InitiateAuthentication
  endpoint:
    path: /api/v2/merchants/{mid}/orders/{orderId}/authentications
    method: POST
    data_selector: transactionReferences
    params: {}
- name: ContinueAuthentication
  endpoint:
    path: /api/v2/merchants/{mid}/orders/{orderId}/continueauthentications
    method: POST
    data_selector: transactionReferences
    params: {}
- name: CompleteAuthentication
  endpoint:
    path: /api/v2/merchants/{mid}/orders/{orderId}/completeauthentications
    method: POST
    data_selector: transactionReferences
    params: {}
- name: orders
  endpoint:
    path: /api/v2/merchants/{mid}/orders
    method: POST
    data_selector: transactionReferences
    params: {}
- name: tokens
  endpoint:
    path: /api/v2/merchants/{mid}/tokens
    method: POST
    data_selector: transactionReferences
    params: {}
- name: authentications
  endpoint:
    path: /api/v2/merchants/{mid}/orders/{orderId}/authentications
    method: POST
    data_selector: transactionReferences
    params: {}
- name: initiate_authentication
  endpoint:
    path: /api/v2/merchants/{mid}/orders/{orderId}/authentications
    method: POST
    data_selector: transactionReferences
    params: {}
- name: continue_authentication
  endpoint:
    path: /api/v2/merchants/{mid}/orders/{orderId}/continueauthentications
    method: POST
    data_selector: transactionReferences
    params: {}
- name: complete_authentication
  endpoint:
    path: /api/v2/merchants/{mid}/orders/{orderId}/completeauthentications
    method: POST
    data_selector: transactionReferences
    params: {}
- name: cancel_order
  endpoint:
    path: /api/v2/merchants/{mid}/orders/{orderId}/cancels
    method: POST
    data_selector: transactionReferences
    params: {}
- name: capture_order
  endpoint:
    path: /api/v2/merchants/{mid}/orders/{orderId}/captures
    method: POST
    data_selector: transactionReferences
    params: {}
- name: InitiateAuthentication
  endpoint:
    path: /authentications
    method: POST
    data_selector: records
- name: ContinueAuthentication
  endpoint:
    path: /continueauthentications
    method: POST
    data_selector: records
- name: CompleteAuthentication
  endpoint:
    path: /completeauthentications
    method: POST
    data_selector: records
- name: capture_transaction
  endpoint:
    path: /api/v2/transactions/{transactionId}/captures
    method: POST
    data_selector: transaction
    params: {}
- name: refund_order
  endpoint:
    path: /api/v2/merchants/{mid}/orders/{orderId}/refunds
    method: POST
    data_selector: transaction
    params: {}
- name: complete_payment
  endpoint:
    path: /api/v2/merchants/{mid}/orders/{orderId}/completes
    method: POST
    data_selector: transaction
    params: {}
- name: get_order
  endpoint:
    path: /api/v2/merchants/{mid}/orders/{orderId}
    method: GET
    data_selector: order_details
    params: {}
- name: InitiateAuthentication
  endpoint:
    path: /api/v2/merchants/{mid}/orders/{orderId}/authentications
    method: POST
    data_selector: transactionReferences
    params: {}
- name: ContinueAuthentication
  endpoint:
    path: /api/v2/merchants/{mid}/orders/{orderId}/continueauthentications
    method: POST
    data_selector: transactionReferences
    params: {}
- name: CompleteAuthentication
  endpoint:
    path: /api/v2/merchants/{mid}/orders/{orderId}/completeauthentications
    method: POST
    data_selector: transactionReferences
    params: {}
- name: CancelOrder
  endpoint:
    path: /api/v2/merchants/{mid}/orders/{orderId}/cancels
    method: POST
    data_selector: transactionReferences
    params: {}
- name: CaptureOrder
  endpoint:
    path: /api/v2/merchants/{mid}/orders/{orderId}/captures
    method: POST
    data_selector: transactionReferences
    params: {}
- name: original_credit
  endpoint:
    path: /api/v2/merchants/{mid}/orders/{orderId}/originalcredits
    method: POST
    data_selector: transactionReferences
    params: {}
- name: payout
  endpoint:
    path: /api/v2/merchants/{mid}/orders/{orderId}/originalcredits
    method: POST
    data_selector: transactionReferences
    params: {}
- name: capture_transaction
  endpoint:
    path: /api/v2/transactions/{transactionId}/captures
    method: POST
    data_selector: transactionReferences
    params: {}
- name: refund_order
  endpoint:
    path: /api/v2/merchants/{mid}/orders/{orderId}/refunds
    method: POST
    data_selector: transactionReferences
    params: {}
- name: complete_payment
  endpoint:
    path: /api/v2/merchants/{mid}/orders/{orderId}/completes
    method: POST
    data_selector: transactionReferences
    params: {}
- name: get_order
  endpoint:
    path: /api/v2/merchants/{mid}/orders/{orderId}
    method: GET
    data_selector: transactions
    params: {}
- name: original_credit
  endpoint:
    path: /api/v2/merchants/{mid}/orders/{orderId}/originalcredits
    method: POST
    data_selector: transactionReferences
    params: {}
- name: payout
  endpoint:
    path: /api/v2/merchants/{mid}/orders/{orderId}/originalcredits
    method: POST
    data_selector: transactionReferences
    params: {}
- name: Payment Page
  endpoint:
    path: /payment-page
    method: GET
- name: Device REST API
  endpoint:
    path: /device-rest-api
    method: GET
- name: Payment REST API
  endpoint:
    path: /payment-rest-api
    method: GET
- name: Web Service
  endpoint:
    path: /web-service
    method: GET
- name: Notification Service
  endpoint:
    path: /notification-service
    method: GET
- name: Batch Interface
  endpoint:
    path: /batch-interface
    method: GET
- name: Payment Page
  endpoint:
    path: /paymentpage-integration/paymentpage.html
    method: GET
- name: Device REST API
  endpoint:
    path: /payment-api/device-payment-api-overview.html
    method: GET
- name: Payment REST API
  endpoint:
    path: /payment-rest-api/overview.html
    method: GET
- name: Web Service
  endpoint:
    path: /web-service/overview.html
    method: GET
- name: Capture
  endpoint:
    path: /payment-processing/capture.html
    method: GET
- name: Refunds
  endpoint:
    path: /payment-processing/refunds.html
    method: GET
- name: Cancellation
  endpoint:
    path: /payment-processing/cancels.html
    method: GET
- name: Original Credit
  endpoint:
    path: /payment-processing/original-credit.html
    method: GET
- name: payment_page
  endpoint:
    path: /pay
    method: GET
    data_selector: response
    params: {}
- name: card_payment
  endpoint:
    path: /cardPayment
    method: POST
    data_selector: encryptedResponse
- name: redirect_payment
  endpoint:
    path: /redirectPayment
    method: POST
    data_selector: encryptedResponse
- name: eft_payment
  endpoint:
    path: /eftPayment
    method: POST
    data_selector: encryptedResponse
- name: card_payment
  endpoint:
    path: /cardPayment
    method: POST
    data_selector: encryptedResponse
- name: payment_methods
  endpoint:
    path: /getIbpPaymentMethods
    method: GET
    data_selector: paymentMethods
- name: payment_page
  endpoint:
    path: /payment-page
    method: GET
    data_selector: parameters
    params:
      mandatory:
      - FirstName
      - LastName
      - BirthDate
      - Phone
      - MobilePhone
      - Email
      - Address1
      - Address2
      - City
      - ZipCode
      - Country
- name: PaymentRequest
  endpoint:
    path: /createPaymentRequest
    method: POST
- name: card_payment
  endpoint:
    path: /cardPayment
    method: POST
    data_selector: encryptedResponse
- name: redirect_payment
  endpoint:
    path: /redirectPayment
    method: POST
    data_selector: encryptedResponse
- name: 3D Secure Request
  endpoint:
    path: /3ds/request
    method: POST
    data_selector: Status
    params: {}
- name: Transaction Status
  endpoint:
    path: /transaction/status
    method: GET
    data_selector: Status
    params: {}
- name: users_registration
  endpoint:
    path: /api/users/registrations
    method: POST
- name: unpack_response
  endpoint:
    path: /api/users/unpackResponse
    method: POST
- name: eft_payment
  endpoint:
    path: /eftPayment
    method: POST
    data_selector: encryptedResponse
- name: init_auth
  endpoint:
    path: /initAuth
    method: POST
    data_selector: encryptedResponse
- name: continue_auth
  endpoint:
    path: /continueAuth
    method: POST
    data_selector: encryptedResponse
- name: card_payment
  endpoint:
    path: /cardPayment
    method: POST
    data_selector: encryptedResponse
- name: get_payment_methods
  endpoint:
    path: /getPaymentMethods
    method: GET
    data_selector: paymentMethods
- name: orders
  endpoint:
    path: /v2/merchants/{merchant_id}/orders/{order_id}
    method: POST
    data_selector: transactionReferences
- name: payment_request
  endpoint:
    path: /payment-api
    method: POST
    data_selector: transaction
- name: 3D Secure Request
  endpoint:
    path: /3ds/request
    method: POST
    data_selector: transaction
    params: {}
- name: Transaction Status
  endpoint:
    path: /transaction/status
    method: GET
    data_selector: status
    params: {}
- name: payment
  endpoint:
    path: /api/users/registrations
    method: POST
    data_selector: transaction
    params: {}
- name: unpackResponse
  endpoint:
    path: /api/users/unpackResponse
    method: POST
    data_selector: response
    params: {}
- name: orders
  endpoint:
    path: /v2/merchants/{merchant_id}/orders/{order_id}
    method: POST
    data_selector: transactionReferences
- name: captures
  endpoint:
    path: /api/v2/merchants/1570616552/orders/order_example_1/captures
    method: POST
    data_selector: amount
    params: {}
- name: refund
  endpoint:
    path: /api/v2/merchants/1570616552/orders/order_example_1/refunds
    method: POST
    data_selector: RefundOrderRequest
- name: cancel_order
  endpoint:
    path: /api/v2/merchants/1570616552/orders/order_example_1/cancels
    method: POST
    data_selector: null
    params: {}
- name: captures
  endpoint:
    path: /api/v2/merchants/1570616552/orders/order_example_1/captures
    method: POST
    data_selector: ''
    params: {}
- name: query_order
  endpoint:
    path: /v2/merchants/1262899477/orders/exampleorder1
    method: GET
    data_selector: ''
- name: refunds
  endpoint:
    path: /api/v2/merchants/1570616552/orders/order_example_1/refunds
    method: POST
    data_selector: RefundOrderRequest
- name: cancel_order
  endpoint:
    path: /api/v2/merchants/1570616552/orders/order_example_1/cancels
    method: POST
    data_selector: null
    params: {}
- name: tokenization
  endpoint:
    path: /tokenization
    method: POST
    data_selector: token
    params: {}
- name: merchant_notification
  endpoint:
    path: /v1/merchants/{merchantId}/orders/{orderId}
    method: POST
    data_selector: notification
- name: order
  endpoint:
    path: /v2/merchants/1262899477/orders/exampleorder1
    method: GET
    data_selector: null
    params: {}
- name: orders
  endpoint:
    path: /v2/merchant/{mid}/orders/{orderId}
    method: GET
- name: merchant_notification
  endpoint:
    path: /v1/merchants/{merchantId}/orders/{orderId}
    method: POST
    data_selector: notification
- name: complete_order
  endpoint:
    path: /v2/merchants/{mid}/orders/{orderId}/completeauthentications
    method: POST
    data_selector: authenticationResultParameter
- name: orders
  endpoint:
    path: /v2/merchant/{mid}/orders/{orderId}
    method: GET
- name: complete_authentications
  endpoint:
    path: /v2/merchants/{mid}/orders/{orderId}/completeauthentications
    method: POST
- name: cancel_order
  endpoint:
    path: /v2/merchants/{mid}/orders/{orderId}/cancel
    method: POST
- name: complete_authentications
  endpoint:
    path: /v2/merchants/{mid}/orders/{orderId}/completeauthentications
    method: POST
    data_selector: authenticationResultParameter
- name: complete_payment
  endpoint:
    path: /v2/merchants/{mid}/orders/{orderId}/completeauthentications
    method: POST
    data_selector: authenticationResultParameter
    params: {}
- name: complete_authentications
  endpoint:
    path: /v2/merchants/{mid}/orders/{orderId}/completeauthentications
    method: POST
    data_selector: authenticationResultParameter
    params: {}
- name: tokenization
  endpoint:
    path: /v2/merchants/{mid}/orders/{orderId}/tokenization
    method: POST
    data_selector: token
    params: {}
- name: complete_authentication
  endpoint:
    path: /v2/merchants/{mid}/orders/{orderId}/completeauthentications
    method: POST
    data_selector: ''
- name: cancel_order
  endpoint:
    path: /v2/merchants/{mid}/orders/{orderId}/completeauthentications
    method: POST
    data_selector: ''
- name: complete_authentication
  endpoint:
    path: /v2/merchants/{mid}/orders/{orderId}/completeauthentications
    method: POST
    data_selector: ''
    params: {}
- name: complete_authentication
  endpoint:
    path: /v2/merchants/{mid}/orders/{orderId}/completeauthentications
    method: POST
    data_selector: authenticationResultParameter
- name: refund_order
  endpoint:
    path: /v2/merchants/{mid}/orders/{orderId}/completeauthentications
    method: POST
    data_selector: authenticationResultParameter
- name: complete_authentication
  endpoint:
    path: /v2/merchants/{mid}/orders/{orderId}/completeauthentications
    method: POST
    data_selector: authenticationResultParameter
    params: {}
- name: complete_authentications
  endpoint:
    path: /v2/merchants/{mid}/orders/{orderId}/completeauthentications
    method: POST
    data_selector: authenticationResultParameter
    params: {}
- name: tokenization
  endpoint:
    path: /v2/merchants/{mid}/orders/{orderId}/tokenization
    method: POST
    data_selector: token
    params: {}
- name: complete_authentication
  endpoint:
    path: /v2/merchants/{mid}/orders/{orderId}/completeauthentications
    method: POST
    data_selector: authenticationResultParameter
- name: complete_authentication
  endpoint:
    path: /v2/merchants/{mid}/orders/{orderId}/completeauthentications
    method: POST
    data_selector: authenticationResultParameter
    params: {}
- name: Alive
  endpoint:
    path: /alive
    method: GET
- name: StoreToken
  endpoint:
    path: /storetoken
    method: POST
- name: Initiate3d
  endpoint:
    path: /initiate3d
    method: POST
- name: Complete3d
  endpoint:
    path: /complete3d
    method: POST
- name: InitiatePayment
  endpoint:
    path: /initiatepayment
    method: POST
- name: CancelOrder
  endpoint:
    path: /cancelorder
    method: POST
- name: CaptureOrder
  endpoint:
    path: /captureorder
    method: POST
- name: CompletePayment
  endpoint:
    path: /completepayment
    method: POST
- name: RefundOrder
  endpoint:
    path: /refundorder
    method: POST
- name: QueryOrder
  endpoint:
    path: /queryorder
    method: GET
- name: GetPaymentMethods
  endpoint:
    path: /getpaymentmethods
    method: GET
- name: OriginalCredit
  endpoint:
    path: /originalcredit
    method: POST
- name: GetAddress
  endpoint:
    path: /getaddress
    method: GET
- name: GetPaymentPlans
  endpoint:
    path: /getpaymentplans
    method: GET
- name: SendPaymentInstruction
  endpoint:
    path: /sendpaymentinstruction
    method: POST
- name: UpdateOrder
  endpoint:
    path: /updateorder
    method: POST
- name: UpdateAccount
  endpoint:
    path: /updateaccount
    method: POST
- name: InitiatePayment
  endpoint:
    path: /InitiatePayment
    method: POST
    data_selector: InitiatePaymentResponse
- name: CancelOrder
  endpoint:
    path: /CancelOrder
    method: POST
    data_selector: CancelOrderResponse
- name: CaptureOrder
  endpoint:
    path: /CaptureOrder
    method: POST
    data_selector: CaptureOrderResponse
- name: CompletePayment
  endpoint:
    path: /CompletePayment
    method: POST
    data_selector: CompletePaymentResponse
- name: RefundOrder
  endpoint:
    path: /RefundOrder
    method: POST
    data_selector: RefundOrderResponse
- name: Alive
  endpoint:
    path: /alive
    method: GET
- name: StoreToken
  endpoint:
    path: /storetoken
    method: POST
- name: Initiate3d
  endpoint:
    path: /initiate3d
    method: POST
- name: Complete3d
  endpoint:
    path: /complete3d
    method: POST
- name: InitiatePayment
  endpoint:
    path: /initiatepayment
    method: POST
- name: CancelOrder
  endpoint:
    path: /cancelorder
    method: POST
- name: CaptureOrder
  endpoint:
    path: /captureorder
    method: POST
- name: CompletePayment
  endpoint:
    path: /completepayment
    method: POST
- name: RefundOrder
  endpoint:
    path: /refundorder
    method: POST
- name: QueryOrder
  endpoint:
    path: /queryorder
    method: GET
- name: GetPaymentMethods
  endpoint:
    path: /getpaymentmethods
    method: GET
- name: OriginalCredit
  endpoint:
    path: /originalcredit
    method: POST
- name: GetAddress
  endpoint:
    path: /getaddress
    method: GET
- name: GetPaymentPlans
  endpoint:
    path: /getpaymentplans
    method: GET
- name: SendPaymentInstruction
  endpoint:
    path: /sendpaymentinstruction
    method: POST
- name: UpdateOrder
  endpoint:
    path: /updateorder
    method: POST
- name: UpdateAccount
  endpoint:
    path: /updateaccount
    method: POST
- name: CommercePayments
  endpoint:
    path: /files/CommercePayments.wsdl
    method: SOAP
    data_selector: SOAP Response
    params: {}
- name: XMLSchema
  endpoint:
    path: /files/CommercePayments_1_1_44.xsd
    method: SOAP
    data_selector: XML Schema
    params: {}
- name: InitiatePayment
  endpoint:
    path: /InitiatePayment
    method: POST
    data_selector: InitiatePaymentResponse
    params: {}
- name: CancelOrder
  endpoint:
    path: /CancelOrder
    method: POST
    data_selector: CancelOrderResponse
    params: {}
- name: CaptureOrder
  endpoint:
    path: /CaptureOrder
    method: POST
    data_selector: CaptureOrderResponse
    params: {}
- name: RefundOrder
  endpoint:
    path: /RefundOrder
    method: POST
    data_selector: RefundOrderResponse
    params: {}
- name: QueryOrder
  endpoint:
    path: /QueryOrder
    method: POST
    data_selector: QueryOrderResponse
- name: GetPaymentMethods
  endpoint:
    path: /GetPaymentMethods
    method: POST
    data_selector: PaymentMethods
- name: CommercePayments
  endpoint:
    path: /files/CommercePayments.wsdl
    method: POST
    data_selector: ''
    params: {}
- name: CommercePayments_XSD
  endpoint:
    path: /files/CommercePayments_1_1_44.xsd
    method: GET
    data_selector: ''
    params: {}
- name: AVS Status Codes
  endpoint:
    path: /avs-status-codes
    method: GET
    data_selector: results
    params: {}
- name: TransactionResponse
  endpoint:
    path: /fraud/screening
    method: POST
    data_selector: FraudResult
- name: payment_api
  endpoint:
    path: /api/payment
    method: POST
    data_selector: response.data
    params:
      MID: Merchant ID
      Transaction channel: Web Online
      Order ID: Order ID
      Amount: Order amount
      Currency: Three alphabetic letter, ISO-4217 code
      Country: Country code
      Language: Language code
      Return URL: URL for consumer redirect back to merchant
- name: PaymentAPI
  endpoint:
    path: /payment-api
    method: POST
    data_selector: parameters
- name: 3D Secure Request Parameters
  endpoint:
    path: /request/3DSecure
    method: POST
    data_selector: parameters
    params: {}
- name: Response Details
  endpoint:
    path: /response/details
    method: GET
    data_selector: response
    params: {}
- name: processor_settlement
  endpoint:
    path: /processorsettlementservice/v2/processorsettlementlineitems
    method: GET
    data_selector: response
    params:
      summaryId: string
- name: finds_processor_settlements
  endpoint:
    path: /processorsettlementservice/v2/processorsettlementlineitems
    method: GET
    data_selector: response
    params:
      id: string
      settledDate: string
      processor: string
      fromRegistrationTimeUtc: string
      toRegistrationTimeUtc: string
      settlementCurrency: string
- name: finds_processor_settlements
  endpoint:
    path: /api/processorsettlementservice/v2/finds
    method: GET
    data_selector: response
    params: {}
- name: finds_processor_settlement_line_items
  endpoint:
    path: /api/processorsettlementservice/v2/processorsettlementlineitems
    method: GET
    data_selector: response
    params: {}
notes:
- Use the flag autoCapture to determine whether the transaction is to be executed
  as an Authorize or Debit.
- Set createToken to true to store a card number during the Initiate Payment transaction
  call.
- Uses OAuth2 with Bearer token for authentication.
- When the Initiate Authentication response contains authentication status as REQUIRED,
  it follows 3DS Challenge.
- 3D Secure incorporates strong customer authentication by making better risk assessment
  decisions.
- When the Initiate Authentication response has CONTINUE as an authentication status,
  it follows 3DS Frictionless with 3D Method.
- Advanced topic on transaction-level payment processing
- The recommended way to integrate with the Payment REST API is by working with orders.
- The orderId must be unique for this transaction type.
- Learn how to build solutions using the APIs and services provided by Worldline platforms.
- Uses OAuth2 with Bearer token — ensure proper token management.
- Being on the top-tier of payment processors globally, Worldline provides a number
  of options for processing payments on a large scale.
- We recommend staying at a total of 25 concurrent requests so that you will not hit
  your rate limit.
- The Worldline Payment Page is a ready-to-use, secure Web-based solution for accepting
  cards and alternative Payment Methods worldwide.
- The Worldline issues certificates which are used for authentication when the client’s
  Payment Page communicates with Worldline.
- These pages are tested with JavaScript and cookies activated.
- The pages require local language settings in the Operating System of the client
  computer to display correctly (e.g. Simplified Chinese may not look right on Western
  locale settings).
- Client must implement a Web service that accepts notifications.
- Configuration for 3D Secure profiles is done by Worldline on behalf of the merchant.
- Worldline issues certificates which are used for authentication when the client’s
  Payment Page communicates with Worldline.
- Certificates are implemented twice, first during Payment Page development and second
  when launched in production.
- The consumer's financial credentials never touch the merchant's site.
- The payment page includes built-in support for server side retry-handling.
- The form has input fields for cardHolderName, cardNumber, cardExpiryMonth, cardExpiryYear
  and cardCVC.
- The card holder data field has no 'name' attribute, as that could risk that the
  cardholderdata gets passed to the merchant server.
- Configuration for profiles is done by Worldline on behalf of the merchant.
- The full address including street name and house number must be provided in address
  1 and address 2.
- The response must be decrypted to retrieve details on the success of the transaction.
- The payment process may require user redirection for authentication.
- Demo application uses JavaScript for integration.
- The card holder data field has no 'name' attribute, as that could risk that the
  cardholder data gets passed to the merchant server.
- All requests must be secured with TLS 1.2 or later.
- Requires setup of PaymentHandler to manage keys and addresses.
- The Web service is designed to be easily integrated, scalable and permitting secure
  and trusted transactions.
- A typical card interaction between the merchant (client) and Worldline (server)
  is illustrated in the following image.
- Requires optional parameters for 3D Secure transactions
- Do not use test data in the production environment.
- The demo server logs more results of the payment transaction on stdout.
- Before the client can process live transactions, the integration has to be certified.
- Worldline test systems are available 24x7 without uptime guarantees, except for
  those agreed upon in contracts.
- All requests must be compliant with TLS 1.2 or later.
- Follow the JWT guide on how to acquire a Bearer Token.
- The client needs to handle, or ignore, extra elements that Worldline has added to
  the schema.
- The testing and certification is used to verify that the implementation and configuration
  of the merchant’s system fulfills the requirements needed to obtain access to the
  Worldline production environment.
- The Technical Integration Manager at Worldline should be immediately notified for
  assistance, when client notices unexpected results during the certification testing.
- You must always refer back to a previous payment, either by an orderId, or an orderId
  and transactionId.
- The RefundOrder method supports retries.
- The CancelOrder method supports retries.
- Credential on File (CoF) is a requirement from Visa and MasterCard to provide greater
  visibility for all parties into transaction processing.
- The Merchant Notification Service supports Content-Type application/json, charset
  UTF-8.
- The merchant must configure an HTTPS service that listens to HTTP POST calls.
- Use the OAuth 2.0 token exchange to retrieve an access token that can be used in
  subsequent requests to Worldline REST APIs.
- This section will guide through the details on how to successfully create a signed
  and base64 encoded JWT which will be posted to Worldline to exchange that for an
  access token.
- Strong Customer Authentication is offered through 3-D Secure 1.0 and 3-D Secure
  2.0.
- Disclose to cardholders how those credentials will be used.
- Obtain cardholders’ consent to store the credentials.
- Notify cardholders when any changes are made to the terms of use.
- Inform the card issuer via a transaction that payment credentials are now stored
  on file.
- Identify transactions with appropriate indicators when using stored credentials.
- Bearer token is valid for a specified period of time.
- The Merchant Notification Service for v3 supports Content-Type application/json,
  charset UTF-8, in the response from the Merchants web service back to Worldline
  web client.
- The Payment Page interface is recommended for all payment methods except cards.
- Contact your integration manager for support on non-card payment methods.
- Worldline Services operates multiple active data centres.
- In order to ensure that a merchant will be switched quickly away from an unreachable
  datacenter, the time-to-live (TTL) of the web service URL is 60 seconds.
- Worldline requires all batch files to be encrypted before file transfer.
- Worldline promotes the use of Pretty Good Privacy (PGP) for file encryption.
- Worldline provides a single URL that will support failover between data centers,
  using DNS.
- The FraudResult Code and Message fields should not be used for logical decisions
  on the client side as they may change over time.
- FraudResult Code and Message fields should not be used for logical decisions on
  the client side as they may change over time.
- Some parameters are required while others are optional.
- Check with integration manager for POS ID, Billing Last Name, and Billing First
  Name.
- Some payment methods do not allow iframe.
- Parameters for initiating a 3DS Request and response details for payment processing.
- Worldline supports hosting of Domain Names and Certificates when you want the Payment
  Page embedded in your web page.
- This is useful for merchant identity on pages as well as for support of a Payment
  Page presented within an iframe.
- JWT bearer flow supports the RSA SHA256 algorithm, which uses an uploaded certificate
  as the signing secret.
errors:
- 'REQUEST_LIMIT_EXCEEDED: Throttle API calls or reduce frequency'
- 'QUERY_TIMEOUT: Break down filters or add selectivity'
- '401 Unauthorized: Recheck OAuth scopes or token expiration'
- 'Throttling errors: Reduce frequency of requests.'
- Transaction Accepted
- Transaction Processed
- 'statusCode: 26016: Authentication required'
- 'statusCode: 26029: Continue with authentication'
- '26016: Authentication required'
- '26029: Continue with authentication'
- '0: Transaction Accepted'
- '401 Unauthorized: Recheck OAuth token validity'
- '400 Bad Request: Check required parameters in the request'
- 'NOK: Payment was not completed due to multiple attempts or fraud detection.'
- 'TIMEOUT: Payment attempt exceeded the timeout set by the merchant.'
- 'ERROR: Issues with URL content or merchant configuration.'
- '400 Bad Request: Check request parameters or data format'
- '401 Unauthorized: Ensure valid authentication credentials'
- '500 Internal Server Error: Contact support'
- 'OK: The payment has been successfully processed.'
- 'AUTHENTICATION: Status returned by authentication request.'
- 'NOK: The payment was not completed due to user exceeding the maximum number of
  retries.'
- 'Invalid headers or merchant base URLs found: The request is declined.'
- 'NOK: Payment not completed due to maximum retries exceeded'
- 'USERCANCEL: Consumer pressed cancel button'
- 'TIMEOUT: Payment initiation after timeout expired'
- 'NOK: Indicates a failed request'
- 'PENDING: The transaction is in process'
- 'RETRY: The transaction should be retried'
- 'ERROR: An unspecified error occurred'
- RequestId must be unique per MerchantId.
- 'HTTP status 201: Successful response to a notification.'
- All other responses are treated as not received.
- '401 Unauthorized: Recheck JWT validity or application user status'
- 'HTTP 201: Successful response required'
- Notification not received if server does not respond or is unavailable
- '400 Bad Request: Will occur on missing or invalid input, where required.'
- 401 Unauthorized
- 403 Forbidden
- 400 Bad Request
- 201 Successful operation
- 400 Bad Request. Will occur on missing or invalid input, where required.
- '201: Successful operation'
- '400: Bad Request. Will occur on missing or invalid input, where required.'
- '401: Unauthorized'
- '403: Forbidden'
- '0: Transaction accepted'
- '1: Transaction failed'
- The transaction was successfully processed
- Business rule violation
- Input data problem
- Transaction failed due to a technical problem.
- '1: The transaction was successfully processed'
- '2: Business rule violation'
- '3: Input data problem'
- '4: Transaction failed due to a technical problem.'
- '0: OK: Accepted'
- '11001: Error: Duplicate transaction found'
- '11002: Error: No charge model found'
- '11011: Error: Invalid currency'
- '11013: Error: Invalid Transaction Channel'
- '11023: Error: Invalid input data (details provided in description)'
- '22002: Error: Server configuration error'
- '22014: Error: Server error, no transaction sent to acquirer'
- '22017: Error: Server error, no transaction sent to acquirer'
- '22020: Error: Bank system error'
- '22021: Error: Bank system temporary unreachable'
- '22022: Error: Operation not supported by bank'
- '22023: Error: Invalid expiry date'
- '22024: Error: Invalid card type'
- '22026: Error: Invalid order ID'
- '22027: Decline: Transaction refused'
- '22028: Decline: Transaction refused'
- '22029: Decline: Transaction refused'
- '22031: Decline: Transaction refused'
- '22032: Decline: Transaction refused'
- '22033: Error: Invalid reference transaction id'
- '22034: Error: Transaction refused: Card Number can only contain numbers'
- '22035: Error: Communication problems'
- '22036: Error: Communication problems'
- '22037: Error: No response from bank before client timeout'
- '22038: Error: Communication problems'
- '22039: Decline: Transaction refused'
- '22040: Decline: Transaction refused'
- '22041: Error: Transaction refused: The sum of this and previously credited amounts
  (if any) exceeds debited amount'
- '22042: Error: Server error, no transaction sent to acquirer'
- '22043: Error: Transaction type not supported by server'
- '22044: Error: Transaction refused: The status of the reference transaction does
  not allow this transaction'
- '22045: Error: Transaction refused: The type of the reference transaction is not
  valid for this transaction'
- '22047: Error: Transaction refused: The currency code does not match the reference
  transaction'
- '22048: Error: Transaction refused: Server temporarily unavailable'
- '22049: Error: Transaction refused: Active configuration differs from the one used
  in the reference transaction'
- '22050: Error: Transaction refused: Merchant ID not active. Please contact Digital
  River World Payments'
- '22051: Error: Server error, no transaction sent to acquirer'
- '22052: Error: Transaction refused'
- '22053: Decline: Transaction refused. Card Expired'
- '22054: Error: System error'
- '22055: Error: Server error'
- '22056: Error: System error'
- '22060: Error: Invalid track 2 data'
- '22061: Error: Invalid track 2 expiry date'
- '22062: Error: Server error, no transaction sent to acquirer'
- '22063: Error: Transaction refused: Card is blacklisted'
- '22064: Error: Transaction refused: Card is blacklisted'
- '22065: Error: Transaction refused: Reference transaction cancelled'
- '22066: Error: Transaction refused: Reference transaction already captured'
- '22068: Error: Required data was too long'
- '22069: Error: Transaction refused: Merchant ID inactive'
- '22070: Error: Transaction refused: The currency code does not match with the reference
  transaction'
- '22071: Error: Transaction refused: Capture amount exceeds authorized amount'
- '22072: Error: This capture requires a telephone auth code'
- '22073: Error: Telephone auth code not requested'
- '22074: Error: Server error, no transaction sent to acquirer'
- '22075: Error: The Originating Account Type parameter is invalid'
- '22080: Decline: Transaction refused: Velocity check rule violation (details provided
  in description)'
- '23001: Error: Digital River World Payments server error'
- '23002: Error: Digital River World Payments server error'
- '23003: Error: Digital River World Payments server received corrupt input data format'
- '23005: Error: Invalid Transaction Type'
- '23006: Error: Communication problems'
- '23007: Error: Server unavailable'
- '23008: Error: Invalid input data'
- '24001: Error: Invalid merchant id'
- '24002: Error: Invalid Transaction Channel'
- '24004: Error: Invalid account holder number'
- '24005: Error: Invalid schema'
- '24007: Error: Invalid post bank transaction flag'
- '24008: Error: Invalid amount'
- '24009: Error: Invalid currency'
- '24010: Error: Invalid order ID'
- '24011: Error: Invalid party name'
- '24012: Error: Invalid city name'
- '24013: Error: No charge model is found'
- '24014: Error: Exceeded execution date period'
- '24015: Error: Execution date less than allowed'
- '24017: Error: Cancelled by merchant'
- '24018: Error: Invalid reference transaction id'
- '24019: Error: Reference transaction not found'
- '24020: Error: Cancel transaction timeframe has expired'
- '24021: Error: Duplicate transaction found'
- '24022: Error: Transaction already cancelled'
- '24023: Error: System error'
- '24025: Error: Invalid institution branch number'
- '24026: Error: Invalid account holder name'
- '24027: Error: Declined. Invalid account'
- '24028: Error: Declined. Suspected fraud'
- '24029: Error: Invalid Mandate ID'
- '24030: Error: Invalid Mandate date'
- '24031: Error: Invalid recurring indicator'
- '24032: Error: Invalid account holder country'
- '24033: Error: Invalid IBAN'
- '24034: Error: Invalid BIC'
- '24035: Error: Multiple charge models found'
- '24036: Error: Invalid account holder address'
- '24037: Error: Invalid account holder zip'
- '24038: Error: Invalid account holder email'
- '24039: Error: Invalid creditor identifier'
- '24040: Error: Invalid creditor name'
- '24041: Error: Invalid creditor address'
- '24042: Error: Invalid creditor city'
- '24043: Error: Invalid creditor country'
- '24044: Error: Invalid creditor zip'
- '24045: Error: Invalid mandate consent'
- '25012: Error: Digital River World Payment client error'
- '25013: Error: Digital River World Payment client error, transaction status unknown'
- '26001: Error: System error'
- '26002: Error: System error'
- '26003: Error: Required argument missing or empty'
- '26004: Error: Invalid argument'
- '26005: Error: Corrupted PARes msg, please retry.'
- '26006: Error: Signature on PARes bad'
- '26007: Error: Attempt recorded'
- '26008: Error: Authentication not available'
- '26009: Error: Not authenticated'
- '26010: Error: Invalid certificate'
- '26011: Error: Configuration error'
- '26012: Error: Corrupted PARes msg, please retry.'
- '26013: Error: Corrupted issuer certificate, please retry'
- '26014: Error: Authentication not possible'
- '26015: Error: Authentication not required'
- '26016: Error: Authentication Required'
- '26017: Error: Authentication Required, mobile device'
- '26023: Error: Authentication request failed, please retry'
- '26024: Error: Authentication verification failed, please retry'
- '26026: Error: 3D Secure not available for this bank connection'
- '26027: Error: Number of digits truncated from purchase amount mismatch'
- '26028: Error: Card type not 3D secure enabled'
- '27001: Decline: Transaction refused'
- '27002: Error: Server error'
- '27004: Error: Card type is not allowed'
- '27005: Error: No transaction matching the referenced transaction'
- '27006: Error: Invalid merchant id'
- '27007: Error: Invalid Transaction Channel'
- '27013: Error: Server error'
- '27014: Error: Invalid order ID'
- '27015: Error: Invalid Order description'
- '27016: Error: Invalid Order info'
- '27017: Error: Invalid Card Number'
- '27018: Error: Invalid Expire Date'
- '27019: Error: Invalid card type'
- '27020: Error: Invalid Currency Code'
- '27021: Error: Invalid Currency Subunit'
- '27022: Error: Invalid amount'
- '27023: Error: Invalid VAT Numerator'
- '27024: Error: Invalid reference transaction id'
- '27025: Error: Transaction type not supported by legacy system'
- '27026: Error: Corrupt input data to Server'
- '27027: Error: Invalid LARID'
- '27028: Error: Invalid Sub Merchant ID'
- '27029: Error: Invalid Start Date'
- '27030: Error: Invalid Issue'
- '27031: Decline: Invalid CVCodeState'
- '27032: Decline: Invalid CVCode'
- '27033: Error: Acquirer error. Transaction not processed'
- '27034: Error: System error'
- '27039: Error: Invalid track 2 data'
- '27040: Decline: Requires telephone authorization'
- '27041: Error: The bank reported time out. Please retry'
- '27042: Error: Server configuration error'
- '27043: Decline: Pick up card'
- '27044: Error: Originating account type value not supported'
- '27045: '
- '27048: Decline: Lost or stolen card'
- '27050: Decline: Do not try again/use alternate payment card'
- '27051: Error: Correct card number and re-try'
- '27052: Error: Re-enter transaction and try again'
- '27053: Error: Do not try again/merchant review'
- '27054: Decline: Attempt lower amount'
- '27055: Decline: Do not try again/Merchant warning'
- '27056: Decline: Try again later'
- '27057: Error: This code is not active'
- '27058: Decline: Try again without cash'
- '27059: Decline: CashBack amount too high. Try lower amount'
- '27060: Decline: Payment stopped/contact cardholder'
- '27061: Decline: Line items can not be captured, --detailed description'
- '27062: Decline: Line items can not be refunded, --detailed description'
- '27063: Decline: Line items can not be cancelled, --detailed description'
- '27064: Error: A system error occurred in one of the systems involved in the transaction'
- '27065: Decline: Line items can not be updated, --detailed description'
- '27066: Error: Invalid email'
- '27067: Error: Invalid phone number'
- '27068: Error: Possible fraud'
- '27069: Error: Invalid address line 1'
- '27070: Error: Invalid address line 2'
- '27071: Error: Invalid address line 3'
- '27072: Error: Invalid city'
- '27073: Error: Invalid zip code'
- '27074: Error: Invalid state or province'
- '27075: Error: Invalid country'
- '27076: Error: Invalid payment plan code'
- '27077: Error: Invalid due date'
- '27078: Decline: Customer account disabled in processor''s system'
- '27079: Decline: Merchant accountï¿½disabled in processor''s system'
- '27080: Error: Invalid birth date'
- '27081: Error: Invalid account holder name'
- '27082: Decline: Account holder reached payment limit'
- '27083: Decline: Insufficient Funds'
- '27084: Decline: Contact the Issuer'
- '27085: Decline: Foreign credit card cannot be processed'
- '27086: Decline: Processor does not support payment method'
- '27087: Error: VAT number and personal data do not match, fraud possible'
- '27088: Decline: Processor does not support 3-D Secure enabled card'
- '27089: Decline: Refundment valid date exceed'
- '27090: Decline: Invalid number of installments'
- '27091: Decline: CV code not matching by issuer. Transaction cancelled.'
- '27092: Decline: Strong customer authentication is required'
- '32001: Error: Invalid merchant id'
- '32002: Error: Invalid Transaction Channel'
- '32003: Error: Invalid country'
- '32004: Error: Invalid currency'
- '32005: Error: Invalid order ID'
- '32006: Error: Exceeded execution date period'
- '32007: Error: Execution date less than allowed'
- '32008: Error: No EFT configuration found'
- '32009: Error: No account configuration found for merchant'
- '32010: Error: Incomplete account set-up. No translation found'
- '32011: Error: System error'
- '32013: Error: Declined by bank'
- '32014: Error: Bank communication problem'
- '33001: Error: Server error, no transaction sent to acquirer'
- '33002: Error: Bank system error, no transaction sent to acquirer'
- '33003: Error: Bank system temporary unreachable'
- '33004: Error: Server error, transaction status unknown'
- '33005: Error: Server configuration error'
- '33006: Error: Transaction refused: Reference transaction owned by other merchant'
- '33010: Error: Server error, no transaction sent to acquirer'
- '33011: Error: Transaction type not supported by server'
- '33012: Error: Transaction refused: The status of the reference transaction does
  not allow this transaction'
- '33013: Error: Transaction refused: The reference transaction''s type is not valid
  for this transaction'
- '33015: Error: Transaction refused: Server temporary unavailable. Please try again'
- '33017: Error: Transaction refused: Merchant ID not active'
- '27079: Decline: Merchant account disabled in processor''s system'
- '33018: Transaction refused: Reference transaction already completed successfully'
- '33019: Transaction refused: Sum of debited amount and previous credited amounts
  (if any) exceeded'
- '33020: Transaction refused: Transaction already in progress'
- '33021: Transaction refused: Currency differs from the currency of the reference
  transaction'
- '33023: Invalid order ID'
- '33024: Duplicate transaction found'
- '33025: No charge model found'
- '33026: Reference transaction not found'
- '33027: Order ID doesn''t match the referenced transaction'
- '33030: Invalid Transaction Channel'
- '33031: Invalid Transaction Type'
- '33032: Invalid amount'
- '33033: Invalid reference transaction id'
- '33034: Invalid merchant id'
- '33035: Invalid bank id / No service app type found'
- '33037: A parameter contains an invalid/illegal value'
- '33038: Server error, please try again'
- '33039: Invalid currency'
- '33041: Order description too long'
- '33042: Order detail description too long'
- '33043: Sub merchantID too long'
- '33044: POS ID too long'
- '33045: POS description too long'
- '33046: Invalid order ID'
- '33047: Auth amount exceeded'
- '33048: Reference Tx has been captured'
- '33049: Reference Tx has been cancelled'
- '33050: Operation not supported by bank'
- '34001: Transaction refused'
- '34002: Server error'
- '34003: Server error, please contact Digital River World Payments'
- '34004: Transaction type not supported by legacy system'
- '34005: Invalid input data to Server'
- '34006: Acquirer error. Transaction not processed'
- '34007: The bank reported time out. Please retry'
- '34008: Server configuration error'
- '34010: Transaction not yet completed'
- '34011: Operation not supported by bank'
- '36001: Duplicate order id'
- '36002: Invalid execution date'
- '36003: Invalid merchant id'
- '36004: No account configured'
- '36005: No charge model is found'
- '36006: Several charge models found'
- '36007: Amount exceeds charge model range'
- '36008: Order id already used in timeframe'
- '36009: Invalid IBAN'
- '36010: Bank name missing'
- '36011: Bank city missing'
- '36012: Bank sort code missing'
- '36013: Bank branch code missing'
- '36014: Beneficiary name missing'
- '36015: Beneficiary address missing'
- '36016: Beneficiary zip code missing'
- '36017: Beneficiary city missing'
- '36018: Insufficient account info'
- '36019: Referenced transaction has other currency'
- '36020: Payout amount exceeds scope amount'
- '36021: No reference transaction found'
- '36022: Important data too long and can''t be truncated'
- '36023: Invalid format of input data'
- '36024: No account found in configuration'
- '36025: Several accounts found for this configuration'
- '36026: Invalid beneficiary information'
- '36027: Reference transaction is temporarily locked'
- '36028: Invalid amount'
- '36029: Beneficiary swift missing'
- '36030: System error'
- '36031: Invalid Billing Country Code'
- '38001: System error'
- '38002: Illegal argument: [Description]'
- '38003: Business rule violation: [Description]'
- '38004: Operation cannot be performed at this time: [Description]'
- '39001: System error'
- '39002: Authentication Problem'
- '39003: Blocked in fraud screening'
- '39004: Transaction refused'
- '40001: Token not found'
- '40002: Token not supported for the payment method in the request'
- '40003: Token already exists'
- '40004: System error'
- '40005: Invalid token'
- '40006: Unauthorized access'
- '40007: Invalid merchant id'
- '40008: Invalid card type'
- '40009: Invalid order ID'
- '40010: Account updater service is inactive'
- '40016: Request is already registered for this card number or token'
- '41001: System error'
- '41002: Illegal argument: [Description]'
- '41101: Enrollment received'
- '41102: Enrollment declined by DRWP'
- '41103: Enrollment sent to bank'
- '41104: Enrollment approved by bank'
- '41105: Enrollment declined by bank'
- '41106: Sub-Merchant activated'
- '41107: Enrollment accepted by bank but configuration failed'
- 'Matched: Transaction accepted. All the address information matched'
- 'Not matched: None of the address information matched'
- 'Partial matched: Part of the address information matched'
- 'Not processed: The merchant did not provide AAV information'
- 'Service not available: Address not checked'
- 'Invalid response: The acquirer responded with an invalid response'
- '39003: Screen order blocked by TD'
- 'INVALID_PARAMETER: Check parameter values and lengths.'
- 'AUTHENTICATION_FAILED: Recheck OAuth credentials.'
- 'NOK: The payment was not completed due to several attempts or possible fraud detection.'
- 'USERCANCEL: The consumer pressed a cancel button.'
- 'TIMEOUT: The payment initiation timed out.'
- 'PENDING: The final status of the payment is not yet determined.'
- 'ERROR: Configuration issues detected in the URL content.'
- 400 Bad request
- 500 Internal server error
- 'error: Categorization of error'
- 'error_description: A text field describing the problem'
- 'Error: Categorization of error'
auth_info:
  mentioned_objects: []
client:
  base_url: https://api.test.payments.worldline.com
  headers:
    Accept: application/json
    Content-Type: application/json
source_metadata: null
