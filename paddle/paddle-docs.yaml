resources:
- name: transaction.created
  endpoint:
    path: /webhooks/transactions/transaction-created
    method: POST
- name: customer.created
  endpoint:
    path: /webhooks/customers/customer-created
    method: POST
- name: address.created
  endpoint:
    path: /webhooks/addresses/address-created
    method: POST
- name: business.created
  endpoint:
    path: /webhooks/addresses/address-created
    method: POST
- name: transaction.paid
  endpoint:
    path: /webhooks/transactions/transaction-paid
    method: POST
- name: subscription.created
  endpoint:
    path: /webhooks/subscriptions/subscription-created
    method: POST
- name: transaction.completed
  endpoint:
    path: /webhooks/transactions/transaction-completed
    method: POST
- name: pricing_preview
  endpoint:
    path: /paddlejs/methods/paddle-pricepreview
    method: GET
    data_selector: details.lineItems
    params: {}
- name: checkout
  endpoint:
    path: /paddlejs/methods/paddle-checkout-open
    method: POST
    data_selector: checkoutInfo
    params: {}
- name: pricing_preview
  endpoint:
    path: /paddle/v2/pricing-preview
    method: POST
    data_selector: data
- name: transaction_preview
  endpoint:
    path: /paddle/v2/transaction-preview
    method: POST
    data_selector: data
- name: overlay_checkout
  endpoint:
    path: /build/checkout/build-overlay-checkout
    method: GET
- name: checkout
  endpoint:
    path: /checkout
    method: POST
    data_selector: checkout
    params: {}
- name: checkout
  endpoint:
    path: /checkout
    method: POST
    data_selector: data
    params: {}
- name: update_checkout
  endpoint:
    path: /checkout/update
    method: POST
    data_selector: data
    params: {}
- name: products
  endpoint:
    path: /products
    method: GET
    data_selector: products
- name: prices
  endpoint:
    path: /prices
    method: GET
    data_selector: prices
- name: products
  endpoint:
    path: /api/products
    method: GET
    data_selector: products
    params: {}
- name: prices
  endpoint:
    path: /api/prices
    method: GET
    data_selector: prices
    params: {}
- name: hosted_checkout
  endpoint:
    path: /checkout
    method: GET
    data_selector: checkout_data
- name: checkout
  endpoint:
    path: /paddle/webhooks
    method: POST
- name: product
  endpoint:
    path: /catalog/products
    method: GET
- name: price
  endpoint:
    path: /catalog/prices
    method: GET
- name: create_transaction
  endpoint:
    path: /paddle/create-transaction
    method: POST
- name: create_customer
  endpoint:
    path: /paddle/create-customer
    method: POST
- name: webhooks
  endpoint:
    path: /paddle/webhooks
    method: POST
- name: create_transaction
  endpoint:
    path: /paddle/create-transaction
    method: POST
    data_selector: transaction
    params: {}
- name: product
  endpoint:
    path: /products/{product_id}
    method: GET
    data_selector: product
    params:
      include: prices
- name: price
  endpoint:
    path: /prices/{price_id}
    method: GET
    data_selector: price
    params:
      include: product
- name: list_prices
  endpoint:
    path: /prices
    method: GET
    data_selector: prices
    params:
      product_id: '{product_id}'
- name: discounts
  endpoint:
    path: /discounts/{discount_id}
    method: GET
    data_selector: data
- name: discount_groups
  endpoint:
    path: /discount-groups
    method: POST
    data_selector: data
- name: checkout
  endpoint:
    path: /build/checkout/prefill-checkout-properties
    method: GET
- name: checkout_success
  endpoint:
    path: /checkout/success
    method: POST
- name: payment_methods
  endpoint:
    path: /customers/{customer_id}/payment-methods
    method: GET
- name: customer_auth_token
  endpoint:
    path: /customers/{customer_id}/auth-token
    method: POST
- name: saved_payment_methods
  endpoint:
    path: /customers/{customer_id}/auth-token
    method: POST
    data_selector: data
    params: {}
- name: transactions
  endpoint:
    path: /transactions
    method: POST
    data_selector: data
    params: {}
- name: transactions
  endpoint:
    path: /transactions/{transaction_id}
    method: PATCH
    data_selector: data
    params: {}
- name: cancel_invoice
  endpoint:
    path: /transactions/{transaction_id}
    method: PATCH
    data_selector: data
    params:
      status: canceled
- name: transaction
  endpoint:
    path: /transactions/{transaction_id}
    method: PATCH
- name: transactions
  endpoint:
    path: /transactions
    method: POST
    data_selector: data
- name: transaction_preview
  endpoint:
    path: /transactions/preview
    method: POST
    data_selector: data
- name: default_payment_link
  endpoint:
    path: /build/transactions/default-payment-link
    method: GET
    data_selector: checkout.payment_links
- name: transactions
  endpoint:
    path: /transactions
    method: POST
    data_selector: data
    params: {}
- name: preview_transaction
  endpoint:
    path: /transactions/preview
    method: POST
    data_selector: data
    params: {}
- name: transactions_preview
  endpoint:
    path: /transactions/preview
    method: POST
- name: transactions
  endpoint:
    path: /transactions
    method: POST
- name: transactions
  endpoint:
    path: /build/transactions/pass-transaction-checkout
    method: POST
- name: transactions
  endpoint:
    path: /transactions/{transaction_id}
    method: PATCH
    data_selector: data
    params: {}
- name: adjustments
  endpoint:
    path: /adjustments
    method: POST
    data_selector: data
- name: transactions
  endpoint:
    path: /transactions/{transaction_id}
    method: GET
    data_selector: data
- name: adjustments
  endpoint:
    path: /adjustments
    method: POST
    data_selector: data
- name: transaction
  endpoint:
    path: /transactions/{transaction_id}
    method: GET
    data_selector: data
- name: credit_note
  endpoint:
    path: /adjustments/{adjustment_id}/credit-note
    method: GET
    data_selector: data
- name: transactions
  endpoint:
    path: /transactions
    method: POST
    data_selector: data
    params: {}
- name: subscription
  endpoint:
    path: /subscriptions/{subscription_id}
    method: GET
- name: preview_subscription
  endpoint:
    path: /subscriptions/{subscription_id}/preview
    method: PATCH
- name: update_subscription
  endpoint:
    path: /subscriptions/{subscription_id}
    method: PATCH
- name: subscription
  endpoint:
    path: /subscriptions/{subscription_id}/preview
    method: PATCH
- name: update_subscription
  endpoint:
    path: /subscriptions/{subscription_id}
    method: PATCH
- name: subscriptions
  endpoint:
    path: /subscriptions/{subscription_id}
    method: GET
- name: subscriptions_customer
  endpoint:
    path: /subscriptions
    method: GET
    params:
      customer_id: '{customer_id}'
- name: transactions
  endpoint:
    path: /transactions
    method: GET
    data_selector: data
    params:
      subscription_id: sub_01h3h3a9sfpr5syq38tq0sd4sp
      origin: subscription_charge
- name: bill_for_one_time_charges
  endpoint:
    path: /subscriptions/{subscription_id}/charge
    method: POST
- name: preview_one_time_charge
  endpoint:
    path: /subscriptions/{subscription_id}/charge/preview
    method: POST
- name: get_one_time_charge
  endpoint:
    path: /subscriptions/{subscription_id}
    method: GET
    params:
      include:
      - next_transaction
- name: change_billing_dates
  endpoint:
    path: /subscriptions/{subscription_id}
    method: PATCH
    data_selector: data
    params: {}
- name: preview_change_dates
  endpoint:
    path: /subscriptions/{subscription_id}/preview
    method: PATCH
    data_selector: data
    params: {}
- name: update_payment_method_transaction
  endpoint:
    path: /subscriptions/{subscription_id}/update-payment-method-transaction
    method: GET
- name: resume_subscription
  endpoint:
    path: /subscriptions/{subscription_id}/resume
    method: POST
    data_selector: data
    params: {}
- name: preview_resumed_subscription
  endpoint:
    path: /subscriptions/{subscription_id}
    method: GET
    data_selector: data
    params:
      include: recurring_transaction_details
- name: pause_subscription
  endpoint:
    path: /subscriptions/{subscription_id}/pause
    method: POST
    data_selector: data
    params: {}
- name: remove_scheduled_change
  endpoint:
    path: /subscriptions/{subscription_id}
    method: PATCH
    data_selector: data
    params: {}
- name: cancel_subscription
  endpoint:
    path: /subscriptions/{subscription_id}/cancel
    method: POST
    data_selector: data
    params: {}
- name: webhook_events
  endpoint:
    path: /webhooks
    method: POST
    data_selector: events
    params: {}
- name: subscription
  endpoint:
    path: /build/lifecycle/subscription-creation
    method: POST
    data_selector: subscription
    params: {}
- name: transaction
  endpoint:
    path: /build/transactions/create-transaction
    method: POST
    data_selector: transaction
    params: {}
- name: invoice
  endpoint:
    path: /build/invoices/create-issue-invoices
    method: POST
    data_selector: invoice
    params: {}
- name: subscription_renewal
  endpoint:
    path: /build/lifecycle/subscription-renewal
    method: GET
    data_selector: transactions
    params: {}
- name: pause_subscription
  endpoint:
    path: /api-reference/subscriptions/pause-subscription
    method: POST
    data_selector: pause
    params: {}
- name: resume_subscription
  endpoint:
    path: /api-reference/subscriptions/resume-subscription
    method: POST
    data_selector: resume
    params: {}
- name: cancel_subscription
  endpoint:
    path: /api-reference/subscriptions/cancel-subscription
    method: POST
- name: Payment Recovery
  endpoint:
    path: /build/retain/configure-payment-recovery-dunning
    method: GET
    data_selector: Payment Recovery
    params: {}
- name: trialing_subscription
  endpoint:
    path: /subscriptions/{subscription_id}
    method: PATCH
- name: preview_charge
  endpoint:
    path: /subscriptions/{subscription_id}/charge/preview
    method: POST
- name: create_one_time_charge
  endpoint:
    path: /subscriptions/{subscription_id}/charge
    method: POST
- name: pause_subscription
  endpoint:
    path: /subscriptions/{subscription_id}/pause
    method: POST
- name: activate_subscription
  endpoint:
    path: /subscriptions/{subscription_id}/activate
    method: POST
- name: update_subscription
  endpoint:
    path: /subscriptions/{subscription_id}
    method: PATCH
- name: list_subscriptions
  endpoint:
    path: /subscriptions
    method: GET
- name: customers
  endpoint:
    path: /build/customers/create-update-customers
    method: POST
    data_selector: customer
- name: addresses
  endpoint:
    path: /build/customers/create-update-customers
    method: POST
    data_selector: address
- name: businesses
  endpoint:
    path: /build/customers/create-update-customers
    method: POST
    data_selector: business
- name: credit_balances
  endpoint:
    path: /customers/{customer_id}/credit-balances
    method: GET
    data_selector: data
    params: {}
- name: customer_portal_session
  endpoint:
    path: /customers/{customer_id}/portal-sessions
    method: POST
    data_selector: data
    params: {}
- name: customer_portal_session
  endpoint:
    path: /customers/{customer_id}/portal-sessions
    method: POST
    data_selector: data
    params: {}
- name: subscriptions
  endpoint:
    path: /subscriptions
    method: GET
    data_selector: data
    params:
      customer_id: '{customer_id}'
- name: transactions
  endpoint:
    path: /api-reference/transactions/overview
    method: GET
    data_selector: records
- name: transaction_line_items
  endpoint:
    path: /api-reference/transactions/overview
    method: GET
    data_selector: records
- name: adjustments
  endpoint:
    path: /api-reference/adjustments/overview
    method: GET
    data_selector: records
- name: adjustment_line_items
  endpoint:
    path: /api-reference/adjustments/overview
    method: GET
    data_selector: records
- name: products_and_prices
  endpoint:
    path: /api-reference/products/overview
    method: GET
    data_selector: records
- name: discounts
  endpoint:
    path: /api-reference/discounts/overview
    method: GET
    data_selector: records
- name: balance
  endpoint:
    path: /api-reference/balance/overview
    method: GET
    data_selector: records
- name: checkout
  endpoint:
    path: /checkout
    method: POST
    data_selector: checkoutData
    params: {}
- name: supported_currencies
  endpoint:
    path: /concepts/sell/supported-currencies
    method: GET
    data_selector: currencies
- name: payment_methods
  endpoint:
    path: /concepts/payment-methods/overview
    method: GET
    data_selector: supported_payment_methods
    params: {}
- name: cards
  endpoint:
    path: /concepts/payment-methods/credit-debit-card
    method: GET
- name: iDEAL
  endpoint:
    path: /concepts/payment-methods/ideal
    method: GET
    data_selector: records
- name: list_subscriptions
  endpoint:
    path: /subscriptions
    method: GET
- name: get_subscription
  endpoint:
    path: /subscriptions/{subscription_id}
    method: GET
- name: preview_subscription
  endpoint:
    path: /subscriptions/{subscription_id}/preview
    method: PATCH
- name: update_subscription
  endpoint:
    path: /subscriptions/{subscription_id}
    method: PATCH
- name: update_payment_method_transaction
  endpoint:
    path: /subscriptions/{subscription_id}/update-payment-method-transaction
    method: GET
- name: preview_one_time_charge
  endpoint:
    path: /subscriptions/{subscription_id}/charge/preview
    method: POST
- name: create_one_time_charge
  endpoint:
    path: /subscriptions/{subscription_id}/charge
    method: POST
- name: activate_subscription
  endpoint:
    path: /subscriptions/{subscription_id}/activate
    method: POST
- name: pause_subscription
  endpoint:
    path: /subscriptions/{subscription_id}/pause
    method: POST
- name: resume_subscription
  endpoint:
    path: /subscriptions/{subscription_id}/resume
    method: POST
- name: cancel_subscription
  endpoint:
    path: /subscriptions/{subscription_id}/cancel
    method: POST
- name: subscriptions
  endpoint:
    path: /subscriptions
    method: GET
    data_selector: data
    params:
      incremental: updated_at
- name: subscription
  endpoint:
    path: /subscriptions/{subscription_id}
    method: GET
    data_selector: data
- name: preview_subscription
  endpoint:
    path: /subscriptions/{subscription_id}/preview
    method: PATCH
- name: update_subscription
  endpoint:
    path: /subscriptions/{subscription_id}
    method: PATCH
- name: update_payment_method_transaction
  endpoint:
    path: /subscriptions/{subscription_id}/update-payment-method-transaction
    method: GET
- name: preview_subscription_charge
  endpoint:
    path: /subscriptions/{subscription_id}/charge/preview
    method: POST
    data_selector: data
    params: {}
- name: create_one_time_charge
  endpoint:
    path: /subscriptions/{subscription_id}/charge
    method: POST
    data_selector: data
    params: {}
- name: activate_trialing_subscription
  endpoint:
    path: /subscriptions/{subscription_id}/activate
    method: POST
- name: pause_subscription
  endpoint:
    path: /subscriptions/{subscription_id}/pause
    method: POST
- name: resume_subscription
  endpoint:
    path: /subscriptions/{subscription_id}/resume
    method: POST
    data_selector: data
    params: {}
- name: cancel_subscription
  endpoint:
    path: /subscriptions/{subscription_id}/cancel
    method: POST
- name: customer_portal_session
  endpoint:
    path: /customers/{customer_id}/portal-sessions
    method: POST
- name: customer_portal_session
  endpoint:
    path: /customers/{customer_id}/portal-sessions
    method: POST
    data_selector: data
    params: {}
- name: list_adjustments
  endpoint:
    path: /adjustments
    method: GET
- name: create_adjustment
  endpoint:
    path: /adjustments
    method: POST
- name: get_credit_note
  endpoint:
    path: /adjustments/{adjustment_id}/credit-note
    method: GET
- name: adjustments
  endpoint:
    path: /adjustments
    method: GET
    data_selector: data
    params: {}
- name: create_adjustment
  endpoint:
    path: /adjustments
    method: POST
    data_selector: data
- name: get_credit_note_pdf
  endpoint:
    path: /adjustments/{adjustment_id}/credit-note
    method: GET
    data_selector: data.url
    params:
      disposition: attachment
- name: events
  endpoint:
    path: /events
    method: GET
- name: event_types
  endpoint:
    path: /event-types
    method: GET
- name: event_types
  endpoint:
    path: /event-types
    method: GET
    data_selector: data
- name: notification_destinations
  endpoint:
    path: /notification-settings/{notification_setting_id}
    method: DELETE
    data_selector: null
    params: {}
- name: list_notification_settings
  endpoint:
    path: /notification-settings
    method: GET
- name: create_notification_setting
  endpoint:
    path: /notification-settings
    method: POST
- name: get_notification_setting
  endpoint:
    path: /notification-settings/{notification_setting_id}
    method: GET
- name: update_notification_setting
  endpoint:
    path: /notification-settings/{notification_setting_id}
    method: PATCH
- name: delete_notification_setting
  endpoint:
    path: /notification-settings/{notification_setting_id}
    method: DELETE
- name: notification_settings
  endpoint:
    path: /notification-settings
    method: GET
    data_selector: data
    params:
      per_page: 200
- name: notification_setting
  endpoint:
    path: /notification-settings
    method: POST
    data_selector: data
- name: get_notification_setting
  endpoint:
    path: /notification-settings/get-notification-setting
    method: GET
    data_selector: data
- name: notification_setting
  endpoint:
    path: /notification-settings/{notification_setting_id}
    method: GET
    data_selector: data
- name: update_notification_setting
  endpoint:
    path: /notification-settings/{notification_setting_id}
    method: PATCH
- name: delete_notification_setting
  endpoint:
    path: /notification-settings/{notification_setting_id}
    method: DELETE
- name: list_notifications
  endpoint:
    path: /notifications
    method: GET
- name: get_notification
  endpoint:
    path: /notifications/{notification_id}
    method: GET
- name: replay_notification
  endpoint:
    path: /notifications/{notification_id}/replay
    method: POST
- name: notifications
  endpoint:
    path: /notifications
    method: GET
    data_selector: data
    params:
      per_page: 50
- name: notification
  endpoint:
    path: /notifications/{notification_id}
    method: GET
    data_selector: data
    params: {}
- name: replay_notification
  endpoint:
    path: /notifications/{notification_id}/replay
    method: POST
    data_selector: data
    params: {}
notes:
- Sandbox emails now come from the paddle.com domain, rather than withpaddle.com.
- Paddle Billing shares some settings with Classic, but has its own data and API so
  your existing subscriptions and integration aren't impacted.
- Client-side tokens for sandbox accounts start with 'test_'
- Your webhook endpoint should look like 'https://hkdk.events/azz5twg6es4g41', not
  'https://console.hookdeck.com/'.
- Hookdeck accepted your webhooks by checking the logs.
- Use sandbox accounts for testing and evaluation.
- Update base URLs for API endpoints by replacing sandbox-api.paddle.com with api.paddle.com.
- API keys are separate for your sandbox and live accounts.
- Client-side tokens are separate for sandbox and live accounts.
- Use client-side tokens for frontend code.
- Use OAuth2 with refresh token — requires setup of connected app in Paddle
- Client-side tokens are separate for your sandbox and live accounts.
- Ensure to replace the client-side token in Paddle.Initialize()
- You can use localhost for testing if the default payment link matches
- Sandbox accounts are designed for testing and evaluation.
- Live accounts must be approved by Paddle before you can open checkouts for them.
- If you're using a sandbox account, website approval is instant.
- Website approval may take a few days for live accounts.
- You can verify the webhook signature here - it's best practice to do so.
- You can sign up for a sandbox account for testing and evaluation.
- Get your website approved using the Paddle dashboard.
- Website approval is instant for sandbox accounts.
- Requires user authentication for checkout
- Paddle Checkout supports Apple Pay with no additional setup
- You need to complete account verification for a live account.
- API keys should be treated like passwords.
- Paddle automatically handles conversion into your balance currency.
- Use HTML data attributes on your checkout launcher element.
- Recommended to use `Paddle.Initialize()` method for default settings.
- Checkouts must have at least one item. You can't open a checkout without any items.
- Prefilling works with both overlay checkout and inline checkout.
- Paddle Checkout includes a final screen that lets customers know their purchase
  was successful.
- You can only present saved payment methods when using one-page checkout.
- To avoid exposing your API key and other sensitive data, don't make requests to
  the Paddle API directly from your frontend.
- Inline checkout comes with over 50 styling options to let you create a checkout
  experience that's fully integrated with your app.
- Checkout recovery is enabled by default if it's enabled in Paddle Classic or if
  you joined Paddle after May 2, 2025.
- Invoices work using manually-collected transactions.
- To create an invoice, set the collection_mode to manual.
- Transactions are financial records. You can't edit them if they're billed, canceled,
  or completed.
- Transactions are automatically marked as draft or ready based on required fields.
- You must set your default payment link to start selling with Paddle.
- Your sandbox and live systems are separate. You should set a default payment link
  for both systems.
- Recurring items on a transaction must have the same billing interval.
- Non-catalog products and prices are created for specific transactions.
- Automatically-collected transactions, and manually-collected transactions where
  `billing_details.enable_checkout` is `true`, include a `checkout.url`.
- You can't change collection mode for a transaction that's billed or completed.
- Most refunds for live accounts require approval from Paddle.
- Credits do not need approval from Paddle.
- Requires setup of Paddle account and authentication.
- You can't make changes to a subscription if the next billing period is within 30
  minutes, or the subscription status is `past_due`.
- transaction.created occurs when a one-time charge is billed to a subscription immediately.
- You can't make changes to a subscription if the next billing period is within 30
  minutes, or the subscription status is past_due.
- Payment methods can be updated for automatically-collected subscriptions that are
  active or past due.
- Defaults to start_new_billing_period. The customer is charged immediately the full
  amount for the new billing period.
- Canceled subscriptions can't be reinstated.
- Use webhooks to keep your app in sync with Paddle and determine what access customers
  have.
- Provision your app so a customer has access.
- Subscriptions renew automatically unless canceled or paused.
- Paddle collects using a saved payment method, or sends an invoice that customers
  must pay.
- Paddle Retain works to automatically recover payments for past due subscriptions.
- Paddle doesn't automatically refund customers where subscriptions are canceled mid-cycle.
- Updating payment information is a key subscription workflow.
- Providing a way for customers to update their payment details at any time is good
  practice, helping reduce churn.
- Paddle Retain works with live data for your billing platform. This means you can't
  integrate or test with sandbox accounts.
- Retain integrates with Paddle.js, so you don't need to include any additional scripts
  if you use Paddle Billing.
- Only the items and next_billed_at fields can be updated for a subscription in trial.
- You must use 'do_not_bill' as the proration billing mode when sending requests to
  change billing dates for a trial.
- Paddle ID of the customer that you want to create a customer portal session for.
- Data on reports may be delayed for up to 24 hours.
- Reports are available to download for 14 days once generated.
- Use sandbox accounts to build and test your integration without affecting real data.
- Supports overlay and inline checkout methods.
- Fully PCI-1-compliant vault for payment data.
- Paddle automatically creates a subscription when a checkout completes
- Hosted checkout is the quickest way to let mobile app users make purchases outside
  your app.
- Paddle handles chargebacks, fights fraud, and prevents card attacks for you.
- The customer portal is included by default with Paddle. You don't need to do anything
  to turn it on or set it up.
- Checkout recovery emails are automatically turned on if you signed up for Paddle
  after May 2, 2025 — no additional setup or integration required.
- Preoptimized emails are automatically sent with no technical setup and at no extra
  cost to you.
- Go global and sell in over 200 countries and territories, fully tax compliant, with
  no extra engineering effort.
- Paddle automatically calculates taxes and handles sales tax liability for all countries
  and currencies.
- Paddle automatically determines which payment methods to show to customers.
- You don't need to do anything to enable bank transfers. They're always enabled for
  Paddle accounts.
- No configuration or PayPal account required.
- No configuration required.
- You don't need to sign up for an Apple Developer account to add Apple Pay as a payment
  option with Paddle.
- You don't need to sign up for Google Pay for Business to add Google Pay as a payment
  option with Paddle.
- No configuration required to add iDEAL as a payment option with Paddle.
- Paddle Checkout only presents iDEAL as a payment method for one-time items priced
  in euro, where the customer address is the Netherlands.
- Paddle Checkout only presents Bancontact as a payment method for one-time items
  priced in euro, where the customer address is Belgium.
- Returns a paginated list of subscriptions. Use the query parameters to page through
  results.
- Previews an update for a subscription without applying those changes.
- When making changes to items or the next billing date for a subscription, you must
  include the `proration_billing_mode` field.
- Previews creating a one-time charge for a subscription without billing that charge.
- By default, subscriptions are paused at the end of the billing period.
- You can pause a subscription right away by including `effective_from` in your request.
- Only paused subscriptions can be resumed.
- Immediate billing occurs upon resuming a paused subscription.
- Active subscriptions are canceled at the end of the billing period by default.
- Customer portal sessions are temporary and shouldn't be cached.
- For security and the best customer experience, don't embed the customer portal in
  an iframe.
- Returns a paginated list of adjustments.
- Refunds for live accounts are created with the status of pending_approval until
  reviewed by Paddle, but some are automatically approved.
- The link returned is not a permanent link. It expires after an hour.
- Returns a paginated list of notification settings (notification destinations).
- Webhook signature verification requires the endpoint_secret_key.
- When you delete a notification setting, it's permanently removed from your account.
- Returns a paginated list of notifications created in the last 90 days.
- Notifications older than 90 days aren't retained.
errors:
- 'not_found: The entity you''re trying to work with doesn''t exist.'
- 'invalid_url: The URL you called is invalid.'
- 'authentication_missing: No Authorization header detected with your request.'
- 'authentication_malformed: An Authorization header was sent with your request, but
  it isn''t in a valid format.'
- 'invalid_token: The API key used for your request isn''t valid.'
- 'invalid_client_token: The client-side token used for your request isn''t valid.'
- 'paddle_billing_not_enabled: Your authentication is valid, but Paddle Billing is
  not activated for this account.'
- 'forbidden: The authentication method you used doesn''t have permission to perform
  that request.'
- 'bad_request: Something isn''t right with your request.'
- 'internal_error: Something went wrong processing your request. Your request was
  not processed.'
- 'service_unavailable: The endpoint is down for maintenance or temporarily unable
  to handle your request. Your request was not processed.'
- 'method_not_allowed: The endpoint does not support the HTTP method you used.'
- 'not_implemented: The method used to make your request isn''t recognized.'
- 'bad_gateway: The endpoint is temporarily unable to handle your request. Your request
  was not processed.'
- 'too_many_requests: There have been too many requests to the API from your IP address,
  so it''s been temporarily rate-limited.'
- 'temporarily_unavailable: Endpoint is temporarily disabled for your account.'
- 'entity_archived: The entity you''re trying to modify is archived, so it can''t
  be changed.'
- 'invalid_field: One or more of the fields sent with your request aren''t valid.'
- 'concurrent_modification: There were multiple concurrent requests to modify the
  same entity.'
- 'conflict: Your request conflicts with another change.'
- 'invalid_json: Your request isn''t valid JSON.'
- 'unexpected_request_body: Your request contains a body, but this is not expected
  for this endpoint.'
- 'invalid_time_query_parameter: You''re sending an invalid timestamp as a query parameter.'
- 'unsupported_media_type: The request has an invalid Content-Type header.'
- 'receipt_data_not_enabled: You''re attempting to pass receipt_data as part of your
  request, but it''s not enabled for your account.'
- 'request_headers_too_large: The provided request URI length or headers are too large.'
- 'request_body_too_large: The provided request body is too large.'
- '401 Unauthorized: Recheck OAuth scopes or token expiration'
- If you don't see any webhooks in Hookdeck Console, check the notification destination
  in Paddle.
- Common problems include incorrect default payment link, Paddle.js not included correctly,
  or incorrect client-side token.
- 'REQUEST_LIMIT_EXCEEDED: Throttle API calls or reduce frequency'
- 'QUERY_TIMEOUT: Break down filters or add selectivity'
- 'Invalid client-side token: Ensure you are using a valid token for the environment.'
- 'CHECKOUT_NOT_WORKING: Check console for Paddle.js error messages'
- 'INVALID_TOKEN: Ensure client-side token is correct'
- 'REQUEST_FAILED: Check network and endpoint validity'
- '401 Unauthorized: Check your API key and permissions.'
- '404 Not Found: Ensure the endpoint URL is correct.'
- '401 Unauthorized: Recheck API key or token expiration'
- 200 OK
- 'transaction_invalid_status_change: Transaction isn''t `billed` or `ready`.'
- 'transaction_immutable: Transaction is `completed`. Create an adjustment instead.'
- '400 Bad Request: Check required fields and data format.'
- '401 Unauthorized: Verify authentication credentials.'
- '404 Not Found: Ensure the endpoint path is correct.'
- '400 Bad Request: Ensure the transaction ID is valid.'
- '404 Not Found: Transaction not found.'
- 'pending_approval: Refunds are created with this status until reviewed.'
- 'rejected: Refunds may be rejected by Paddle.'
- 'adjustment_transaction_invalid_status_for_credit: Transaction must be `billed`
  and manually collected to create a credit.'
- 'adjustment_transaction_invalid_status_for_refund: Transaction must be `completed`
  to create a refund.'
- 'adjustment_pending_refund_request: Transaction has a pending refund. Wait for the
  refund to move to `approved` or `rejected` before creating another.'
- 'prevent_change: Paddle returns an error and doesn''t apply subscription changes
  when payment fails.'
- '200 OK: Successful response'
- '401 Unauthorized: Invalid subscription_id or permissions'
- '400 Bad Request: Check subscription ID and request body.'
- '401 Unauthorized: Check authentication credentials.'
- 'transaction.created: Paddle creates a transaction for the items on the checkout.'
- 'transaction.paid: Occurs because the transaction status changes to paid.'
- 'subscription.created: Paddle creates a subscription for the customer.'
- 'Payment collection fails: Payment fails using payment method on file.'
- 'transaction.created: Get notified when a transaction is created.'
- 'transaction.completed: Get notified when a transaction is completed.'
- 'subscription.activated: Get notified when a past due subscription becomes active.'
- '400 Bad Request: Ensure that the next_billed_at date is at least 30 minutes in
  the future.'
- 'customer_already_exists: There''s already a customer entity with the email address
  that you''re using to create or update a customer.'
- 'customer_email_invalid: Email address for a customer is invalid. Check that there
  are no unsupported characters and it''s formatted correctly.'
- 'address_location_not_allowed: Paddle doesn''t support the country for an address.'
- '401 Unauthorized: Recheck API key or permissions'
- '400 Bad Request: Ensure the subscription_id is valid and the subscription is paused.'
- 'notification_maximum_active_settings_reached: You can only have 10 active notification
  destinations at once. Deactivate a notification destination before creating a new
  one.'
- 'url_notification_setting_incorrect: The URL you supplied for a notification destination
  isn''t valid.'
- 'url_notification_setting_incorrect: The email address you supplied for a notification
  destination isn''t valid.'
- '401 Unauthorized: Check API key or permissions.'
- 204 Response
- '404 Not Found: If the notification is no longer retained.'
- 'Notification not retained: You tried to replay a notification that''s no longer
  retained.'
auth_info:
  mentioned_objects: []
client:
  base_url: https://api.paddle.com/
source_metadata: null
