resources:
- name: checkout_customization_options
  endpoint:
    path: /brand-customize-inline-checkout
    method: GET
- name: inline_checkout
  endpoint:
    path: /paddle/paddle.js
    method: GET
- name: sandbox_environment_setting
  endpoint:
    path: /Paddle.Environment.set()
    method: POST
    params:
      environment: sandbox
- name: initialize_client_side_token
  endpoint:
    path: /Paddle.Initialize()
    method: POST
    params:
      token: client-side token
- name: checkout_settings
  endpoint:
    path: Paddle.Initialize()
    method: POST
    data_selector: checkout.settings
    params:
      displayMode: inline
      frameTarget: checkout-container
      frameInitialHeight: '450'
      frameStyle: 'width: 100%; min-width: 312px; background-color: transparent; border:
        none;'
- name: checkout_items
  endpoint:
    path: Paddle.Checkout.open()
    method: POST
    data_selector: items
    params:
      priceId: pri_01gsz8x8sawmvhz1pv30nge1ke
      quantity: 10
- name: update_checkout
  endpoint:
    method: POST
    params:
      items:
      - priceId: pri_01gsz95g2zrkagg294kpstx54r
        quantity: 1
      - priceId: pri_01gsz98e27ak2tyhexptwc58yk
        quantity: 1
      updatedItems:
      - priceId: pri_01gsz8z1q1n00f12qt82y31smh
        quantity: 10
      - priceId: pri_01gsz96z29d88jrmsf2ztbfgjg
        quantity: 1
      - priceId: pri_01gsz98e27ak2tyhexptwc58yk
        quantity: 1
- name: checkout_data
  endpoint:
    path: /checkout
    method: GET
    data_selector: data
- name: overlay_checkout
  endpoint:
    path: /v2/paddle.js
    method: GET
- name: sandbox_environment
  endpoint:
    method: GET
- name: client_side_token
  endpoint:
    method: GET
- name: checkout
  endpoint:
    path: /checkout
    method: POST
- name: localized_pricing
  endpoint:
    path: /paddle.js
    method: GET
    data_selector: ''
- name: products
  endpoint:
    path: /product
    method: GET
    data_selector: data
    params: {}
- name: prices
  endpoint:
    path: /price
    method: GET
    data_selector: data
    params: {}
- name: starter_price
  endpoint:
    data_selector: formattedTotals.subtotal
- name: pro_price
  endpoint:
    data_selector: formattedTotals.subtotal
- name: checkout_success
  endpoint:
    path: /thankyou
    method: GET
- name: checkout_items
  endpoint:
    path: /checkout/open
    method: POST
    data_selector: items
    params:
      price_id: pri_01gsz8x8sawmvhz1pv30nge1ke
      quantity: 10
- name: prefill_checkout_properties
  endpoint:
    path: /prefill-checkout-properties
    method: POST
    params:
      customer.address.countryCode: data-customer-address-country-code
      customer.email: data-customer-email
      customer.id: data-customer-id
      customer.address.id: data-customer-address-id
      business.id: data-business-id
- name: discount
  endpoint:
    params:
      enabled_for_checkout: true
- name: checkout
  endpoint:
    params:
      variant: one-page
- name: multi_page_checkout
  endpoint:
    params:
      customer.address.countryCode: '{{ data-customer-address-country-code }}'
      customer.email: '{{ data-customer-email }}'
      customer.address.postalCode: '{{ data-customer-address-postal-code }}'
      customer.address.region: '{{ data-customer-address-region }}'
- name: saved_payment_methods
  endpoint:
    method: GET
    params: {}
- name: customer_auth_token
  endpoint:
    path: /customers/{customer_id}/auth-token
    method: POST
    data_selector: data.customer_auth_token
- name: saved_payment_methods
  endpoint:
    path: /customers/{customer_id}/payment-methods
    method: GET
    data_selector: data
    params:
      customer_id: '{{ customer_id }}'
- name: customer_auth_token
  endpoint:
    path: /customers/{customer_id}/auth-token
    method: POST
    data_selector: data
- name: saved_payment_methods
  endpoint:
    method: GET
- name: customer_authentication_token
  endpoint:
    method: GET
- name: checkout_settings
  endpoint:
    method: JavaScript
- name: paddle_checkout
  endpoint:
    path: /checkout
    params:
      displayMode: inline
      frameTarget: checkout-container
      frameInitialHeight: '450'
      frameStyle: 'width: 100%; min-width: 312px; background-color: transparent; border:
        none;'
      theme: dark
      locale: es
      allowLogout: false
- name: customer
  endpoint:
    path: /customers/new
    method: POST
    data_selector: customer
    params:
      name: Full name of this customer
      email: Email address for this customer
- name: address
  endpoint:
    path: /customers/addresses/new
    method: POST
    data_selector: address
    params:
      description: Memorable description for this address
      first_line: First line of this address
      second_line: Second line of this address
      city: City of this address
      postal_code: ZIP or postal code of this address
      region: State, county, or region of this address
      country_code: Country of this address
- name: customer
  endpoint:
    path: /customers
    method: GET
    params:
      email: '{{ email }}'
- name: customer_credit_balances
  endpoint:
    path: /customers/{customer_id}/credit-balances
    method: GET
    data_selector: data
- name: customer_portal_session
  endpoint:
    path: /{customer_id}/portal-sessions
    method: POST
- name: customer_portal_session
  endpoint:
    path: /cpl_01gsx07ferwf96qnjz1mrc6h0q
    method: GET
    data_selector: data.urls.general.overview
- name: subscriptions
  endpoint:
    method: GET
    data_selector: data
    params:
      customer_id: comma-separated list of customer IDs
- name: customer_portal_sessions
  endpoint:
    path: /{customer_id}/portal-sessions
    method: POST
    data_selector: data
- name: cancel_invoice
  endpoint:
    path: /transactions/{transaction_id}
    method: PATCH
    data_selector: data
    params:
      status: canceled
- name: invoice
  endpoint:
    method: POST
    data_selector: invoices
    params:
      collection_mode: manual
      status: draft
- name: transaction
  endpoint:
    path: /transactions
    method: POST
    data_selector: data
- name: update_invoice
  endpoint:
    path: /transactions/{transaction_id}
    method: PATCH
    data_selector: data
- name: transaction_update
  endpoint:
    path: /transactions/{transaction_id}
    method: PATCH
    data_selector: data
- name: transaction_details
  endpoint:
    path: /transactions/{transaction_id}
    method: GET
    data_selector: data
- name: subscription_details
  endpoint:
    path: /subscriptions/{subscription_id}
    method: GET
    data_selector: data
- name: transaction
  endpoint:
    path: /list_transactions
    method: GET
    params:
      subscription_id: '{{subscription_id}}'
      status: past_due
- name: product_catalog
  endpoint:
    path: /catalog/products
    method: POST
    data_selector: products
- name: prices
  endpoint:
    path: /catalog/products/prices
    method: POST
    data_selector: prices
- name: create_transaction
  endpoint:
    path: /paddle/create-transaction
    method: POST
- name: create_customer
  endpoint:
    path: /paddle/create-transaction
    method: POST
- name: paddle_webhooks
  endpoint:
    path: /paddle/webhooks
    method: POST
    data_selector: data
- name: transaction_details
  endpoint:
    path: update/transaction
    method: POST
    data_selector: data
- name: transaction
  endpoint:
    method: POST
- name: product_catalog
  endpoint:
    path: /catalog/products
    method: POST
    data_selector: product
    params:
      type: One-time
- name: price_catalog
  endpoint:
    path: /catalog/products/prices
    method: POST
    data_selector: price
- name: hosted_checkout
  endpoint:
    path: /hsc_01jt8s46kx4nv91002z7vy4ecj_1as3scas9cascascasasx23dsa3asd2a
    method: GET
    params:
      price_id: pri_01h1vjg3sqjj1y9tvazkdqe5vt
      app_user_id: 85886aac-eef6-41df-8133-743cbb1daa4b
      user_email: sam@example.com
      country_code: US
      postal_code: '10021'
- name: transaction
  endpoint:
    path: /paddle/webhooks
    method: POST
    data_selector: data
- name: product
  endpoint:
    path: /product
    method: POST
- name: price
  endpoint:
    path: /price
    method: POST
- name: checkout_information
  endpoint:
    params:
      appUserId: 85886aac-eef6-41df-8133-743cbb1daa4b
      userEmail: sam@example.com
      countryCode: US
      postalCode: '10021'
- name: products
  endpoint:
    path: /api/2.0/product
    method: POST
- name: prices
  endpoint:
    path: /api/2.0/price
    method: POST
- name: website
  endpoint:
    path: /api/2.0/website
    method: POST
- name: paddle_variables
  endpoint:
    path: /developer_tools/authentication
    method: POST
    params:
      api_key: PADDLE_API_KEY
      client_token: NEXT_PUBLIC_PADDLE_CLIENT_TOKEN
      webhook_secret: PADDLE_NOTIFICATION_WEBHOOK_SECRET
      environment: NEXT_PUBLIC_PADDLE_ENV
- name: product
  endpoint:
    path: /catalog/products
    method: POST
- name: price
  endpoint:
    path: /catalog/products/prices
    method: POST
- name: website_approval
  endpoint:
    path: /paddle/checkout/website-approval
    method: POST
- name: default_payment_link
  endpoint:
    path: /paddle/checkout/checkout-settings
    method: POST
- name: notification_destination
  endpoint:
    path: /paddle/checkout/notification-settings
    method: POST
- name: product_catalog
  endpoint:
    path: /product_catalog
    method: POST
- name: notification_destinations
  endpoint:
    path: /notifications
    method: POST
- name: notifications
  endpoint:
    method: POST
- name: products
  endpoint:
    path: /catalog/products
    method: GET
- name: prices
  endpoint:
    path: /catalog/products/prices
    method: GET
- name: client_side_token
  endpoint:
    path: /client-side-tokens
    method: POST
    data_selector: token
- name: checkout
  endpoint:
    path: /checkout
    method: GET
- name: webhook
  endpoint:
    path: /webhook
    method: POST
- name: transaction
  endpoint:
    method: POST
    params:
      events:
      - created
      - paid
      - completed
- name: customer
  endpoint:
    method: POST
    params:
      events:
      - created
- name: address
  endpoint:
    method: POST
    params:
      events:
      - created
- name: business
  endpoint:
    method: POST
    params:
      events:
      - created
- name: subscription
  endpoint:
    method: POST
    params:
      events:
      - created
- name: sandbox_account
  endpoint:
    method: POST
- name: live_account
  endpoint:
    method: POST
- name: team_members
  endpoint:
    method: POST
- name: event_types
  endpoint:
    path: /event-types
    method: GET
- name: product_with_prices
  endpoint:
    path: /products/{product_id}
    method: GET
    params:
      include: prices
- name: price_with_product
  endpoint:
    path: /prices/{price_id}
    method: GET
    params:
      include: product
- name: prices_for_product
  endpoint:
    path: /prices
    method: GET
    params:
      product_id: '{{ product_id }}'
- name: discount_redeem_count
  endpoint:
    path: /discounts/{discount_id}
    method: GET
- name: discount
  endpoint:
    path: /discount
    method: GET
    data_selector: data
- name: product
  endpoint:
    path: /build/products
    method: POST
- name: price
  endpoint:
    path: /build/products/prices
    method: POST
- name: price_overrides
  endpoint:
    path: /prices/{price_id}
    method: PATCH
    data_selector: data
- name: cancellation_flow
  endpoint:
    path: /build/retain/configure-cancellation-flows-surveys
    method: GET
- name: payment_recovery_emails
  endpoint:
    path: /build/retain/configure-payment-recovery-dunning
    method: POST
    data_selector: emails
    params:
      send_emails: true
- name: subscription_details
  endpoint:
    path: /subscriptions/{subscription_id}
    method: GET
    data_selector: items
- name: subscription_items_update
  endpoint:
    path: /subscription/update
    method: POST
    data_selector: items
    params:
      proration_billing_mode: prorated_immediately
      on_payment_failure: prevent_change
- name: preview_change
  endpoint:
    path: /subscriptions/{subscription_id}/preview
    method: PATCH
    data_selector: items
- name: update_subscription
  endpoint:
    path: /subscriptions/{subscription_id}
    method: PATCH
    data_selector: items
- name: subscription_items_update
  endpoint:
    path: /subscription/update
    method: POST
    data_selector: items
    params:
      proration_billing_mode: prorated_immediately
      on_payment_failure: prevent_change
- name: preview_change
  endpoint:
    path: /subscriptions/{subscription_id}/preview
    method: PATCH
    data_selector: items
- name: update_subscription
  endpoint:
    path: /subscriptions/{subscription_id}
    method: PATCH
    data_selector: items
- name: subscription_preview
  endpoint:
    path: /subscriptions/{subscription_id}/preview
    method: PATCH
    data_selector: items
- name: subscription_update
  endpoint:
    path: /subscriptions/{subscription_id}
    method: PATCH
    data_selector: items
- name: one_time_charges
  endpoint:
    method: POST
    params:
      billing_cycle: null
      recurring: false
- name: one_time_charge
  endpoint:
    path: /subscriptions/{subscription_id}/charge/preview
    method: POST
    data_selector: items
    params:
      effective_from: next_billing_period
- name: subscription
  endpoint:
    path: /subscriptions/{subscription_id}
    method: GET
    data_selector: next_transaction.details.line_items
    params:
      include: next_transaction
- name: transactions
  endpoint:
    path: /transactions
    method: GET
    data_selector: data
    params:
      origin: subscription_charge
- name: cancel_subscription
  endpoint:
    path: /build/subscriptions/cancel-subscriptions
    method: POST
    data_selector: status
    params:
      effective_from: scheduled date or immediate
      scheduled_change: null
- name: cancel_subscription
  endpoint:
    path: /subscriptions/{subscription_id}/cancel
    method: POST
- name: remove_scheduled_change
  endpoint:
    path: /subscriptions/{subscription_id}/cancel
    method: POST
- name: subscription
  endpoint:
    path: /subscriptions/{subscription_id}
    method: PATCH
    data_selector: billing_details
- name: subscriptions
  endpoint:
    path: /subscriptions
    method: GET
    params:
      customer_id: '{{ customer_id }}'
- name: transaction
  endpoint:
    path: /transactions
    method: POST
- name: change_billing_dates
  endpoint:
    path: /subscriptions/{subscription_id}/preview
    method: PATCH
    params:
      next_billed_at: RFC 3339 datetime
      proration_billing_mode: prorated_immediately | prorated_next_billing_period
        | do_not_bill
      on_payment_failure: prevent_change
- name: subscription
  endpoint:
    path: /subscriptions/{subscription_id}
    method: PATCH
    data_selector: data
- name: subscription_activation
  endpoint:
    path: /subscriptions/{subscription_id}/activate
    method: POST
- name: trial_modification
  endpoint:
    path: /subscriptions/{subscription_id}/modify
    method: POST
    params:
      next_billed_at: RFC 3339 datetime
      proration_billing_mode: do_not_bill
- name: subscription_update
  endpoint:
    path: /subscriptions/{subscription_id}
    method: PATCH
    data_selector: data
- name: subscription_preview
  endpoint:
    path: /subscriptions/{subscription_id}
    method: GET
    data_selector: data
    params:
      include: next_transaction,recurring_transaction_details
- name: subscription
  endpoint:
    path: /subscriptions/{subscription_id}/activate
    method: POST
- name: pause_subscription
  endpoint:
    path: /build/subscriptions/pause-subscriptions
    method: POST
    data_selector: status
    params:
      effective_from: '2023-11-01T00:00:00.000000Z'
- name: resume_subscription
  endpoint:
    path: /build/subscriptions/resume-subscriptions
    method: POST
    data_selector: current_billing_period.starts_at
- name: pause_subscription
  endpoint:
    path: /subscriptions/{subscription_id}/pause
    method: POST
- name: remove_scheduled_change
  endpoint:
    path: /subscriptions/{subscription_id}/remove_scheduled_change
    method: POST
- name: subscription
  endpoint:
    path: /subscriptions/{subscription_id}
    method: PATCH
    params:
      effective_from: '2023-11-01T00:00:00.000000Z'
- name: resume_subscription
  endpoint:
    path: /subscriptions/{subscription_id}/resume
    method: POST
- name: preview_subscription_charge
  endpoint:
    path: /subscriptions/{subscription_id}
    method: GET
    params:
      include: recurring_transaction_details
- name: resume_subscription
  endpoint:
    path: /subscriptions/{subscription_id}/resume
    method: POST
    data_selector: data
- name: webhook_events
  endpoint:
    path: /build/subscriptions/provision-access-webhooks
    method: POST
    data_selector: data
    params:
      notification_occurred_at: notification.occurred_at
      subscription_id: subscription.id
      subscription_status: subscription.status
      subscription_items_price_id: subscription.items[].price.id
      subscription_items_quantity: subscription.items[].quantity
      subscription_items_product_id: subscription.items[].price.product_id
      subscription_collection_mode: subscription.collection_mode
      subscription_scheduled_change: subscription.scheduled_change
- name: transaction
  endpoint:
    params:
      customer_id: null
      subscription_id: null
- name: subscription_items
  endpoint:
    path: /subscriptions/{subscription_id}
    method: GET
    data_selector: data
- name: list_subscriptions
  endpoint:
    path: /subscriptions
    method: GET
    params:
      customer_id: '{{ customer_id }}'
- name: prices
  endpoint:
    path: /prices
    method: GET
- name: subscription_update
  endpoint:
    path: /subscriptions/{subscription_id}
    method: PATCH
    params:
      proration_billing_mode: prorated_immediately
      items:
      - price_id: pro_01gsz4vmqbjk3x4vvtafffd540
        quantity: 1
- name: update_subscription
  endpoint:
    path: /subscription/users/update
    method: POST
    data_selector: data
    params:
      proration_billing_mode: prorated_immediately
- name: list_subscriptions
  endpoint:
    path: /subscription
    method: GET
- name: update_payment_method_transaction
  endpoint:
    path: /subscriptions/{subscription_id}/update-payment-method-transaction
    method: GET
- name: transaction
  endpoint:
    path: /transaction
    method: POST
    data_selector: data
- name: preview_change
  endpoint:
    path: /subscriptions/{subscription_id}/preview
    method: PATCH
    params:
      items:
      - price_id: pri_{id}
        quantity: null
      effective_from: null
- name: update_subscription
  endpoint:
    path: /subscriptions/{subscription_id}
    method: PATCH
    params:
      items:
      - price_id: pri_{id}
        quantity: null
      effective_from: null
- name: one-time_charge_preview
  endpoint:
    path: /subscriptions/{subscription_id}/charge/preview
    method: POST
- name: one-time_charge_create
  endpoint:
    path: /subscriptions/{subscription_id}/charge
    method: POST
- name: subscription_pause
  endpoint:
    path: /subscriptions/{subscription_id}/pause
    method: POST
- name: transaction_preview
  endpoint:
    path: /transactions/preview
    method: POST
    data_selector: data
    params: {}
- name: product_update
  endpoint:
    path: /products/{product_id}
    method: PATCH
    data_selector: data
    params: {}
- name: price_update
  endpoint:
    path: /prices/{price_id}
    method: PATCH
    data_selector: data
    params: {}
- name: transaction_preview
  endpoint:
    path: /transactions/preview
    method: POST
    data_selector: data
- name: product_update
  endpoint:
    path: /products/{product_id}
    method: PATCH
    data_selector: data
- name: price_update
  endpoint:
    path: /prices/{price_id}
    method: PATCH
    data_selector: data
- name: product
  endpoint:
    path: /products/{product_id}
    method: PATCH
    data_selector: data
- name: price
  endpoint:
    path: /prices/{price_id}
    method: PATCH
    data_selector: data
- name: transaction_collection_mode_change
  endpoint:
    path: /transactions/{transaction_id}
    method: PATCH
    data_selector: billing_details
    params:
      collection_mode: manual
- name: list_transactions
  endpoint:
    path: /transactions
    method: GET
- name: transaction
  endpoint:
    path: /transactions/{transaction_id}
    method: PATCH
    data_selector: data
    params:
      collection_mode: automatic
- name: transaction
  endpoint:
    path: /services/data/vXX.X/sobjects/Transaction
    method: GET
    data_selector: data
- name: transaction
  endpoint:
    path: /transaction
    method: GET
    data_selector: transaction.details.line_items[]
    params:
      status: billed,past_due
- name: refund
  endpoint:
    path: /refund
    method: POST
- name: create_adjustment
  endpoint:
    path: /adjustments
    method: POST
    data_selector: data
    params:
      action: credit
      type:
      - full
      - partial
      transaction_id: txn_{{ transaction_id }}
      reason: '{{ reason }}'
      items:
      - item_id: txnitm_{{ item_id }}
        type:
        - full
        - partial
        amount: '{{ amount }}'
- name: transaction
  endpoint:
    path: /2.0/transaction
    method: GET
    data_selector: details.line_items
    params:
      status: billed,past_due
- name: adjustment
  endpoint:
    path: /2.0/adjustment
    method: POST
- name: create_adjustment
  endpoint:
    path: /adjustments
    method: POST
    data_selector: data
    params:
      action: credit
      transaction_id: '{{ dlt.secrets[''transaction_id''] }}'
      type: partial
      reason: '{{ dlt.secrets[''reason''] }}'
      items: '{{ dlt.secrets[''items''] }}'
- name: credit_note
  endpoint:
    path: /adjustments/{adjustment_id}/credit-note
    method: POST
    data_selector: data
- name: transaction
  endpoint:
    path: /build/transactions/create-transaction
    method: POST
- name: transaction_preview
  endpoint:
    path: /transactions/preview
    method: POST
    data_selector: data
- name: transaction_update
  endpoint:
    path: /transactions/{transaction_id}
    method: PATCH
    data_selector: data
- name: transaction
  endpoint:
    path: /transactions/{transaction_id}
    method: PATCH
    data_selector: data
- name: custom_data_checkout
  endpoint:
    path: /transactions
    method: POST
    data_selector: data
- name: custom_data_transaction
  endpoint:
    path: /transactions/{transaction_id}
    method: PATCH
    data_selector: data
- name: transaction
  endpoint:
    path: /transactions/{transaction_id}
    method: GET
    data_selector: data
- name: update_transaction
  endpoint:
    path: /transactions/{transaction_id}
    method: PATCH
    data_selector: data
- name: transaction_checkout_link
  endpoint:
    path: /build/transactions/default-payment-link
    method: GET
    data_selector: checkout.url
    params:
      billing_details.enable_checkout: 'true'
- name: payment_link
  endpoint:
    method: GET
    data_selector: body
- name: transaction
  endpoint:
    method: POST
- name: subscription
  endpoint:
    path: /cpl_01j7zbyqs3vah3aafp4jf62qaw
    method: GET
    data_selector: management_urls
    params: {}
- name: preview_subscription
  endpoint:
    method: GET
- name: update_subscription
  endpoint:
    method: POST
- name: adjustments_credit_note
  endpoint:
    path: /adjustments/{adjustment_id}/credit-note
    method: POST
- name: reports
  endpoint:
    path: /reports
    method: GET
- name: reports_download
  endpoint:
    path: /reports/{report_id}/download-url
    method: GET
- name: customers_credit_balances
  endpoint:
    path: /customers/{customer_id}/credit-balances
    method: GET
- name: subscriptions_activate
  endpoint:
    path: /subscriptions/{subscription_id}/activate
    method: POST
- name: subscriptions_update_payment_method_transaction
  endpoint:
    path: /subscriptions/{subscription_id}/update-payment-method-transaction
    method: GET
- name: notifications_replay
  endpoint:
    path: /notifications/{notification_id}/replay
    method: POST
- name: initialize_paddle
  endpoint:
    path: /
    method: script
- name: notifications
  endpoint:
    path: /webhooks/notifications
    method: POST
- name: simulation
  endpoint:
    path: /test-webhooks
    method: POST
- name: checkout
  endpoint:
    path: /Paddle.Checkout.open
    method: POST
- name: price_preview
  endpoint:
    path: /Paddle.PricePreview
    method: POST
- name: subscription_update
  endpoint:
    path: /paddle.subscriptions.update
    method: POST
- name: payment_methods
  endpoint:
    path: /enable_payment_methods
    method: POST
notes:
- Paddle.js allows for building integrated subscription billing experiences
- Inline checkout captures payment directly in the app
- Sandbox tokens start with 'test_'
- Inline checkout settings apply to all checkouts on the page when using Paddle.Initialize()
- Settings only apply to the opened checkout when using Paddle.Checkout.open()
- Checkout customization allows setting language, hiding discount options, and restricting
  payment methods
- Inline checkout implementations must include transaction details such as purchase
  description, transaction totals, billing frequency, and trial period information
- Overlay checkout implementation recommends using Paddle.js for minimal frontend
  coding
- Inline checkout provides complete control over the checkout experience
- Domain approval is needed for live environment setups
- Uses Paddle.js to handle checkout interactions client-side
- Sandbox and live environments have separate price IDs
- Checkout can be opened with customer information prefilled; if there's a problem,
  a `checkout.warning` event is emitted
- Ensure correct email format and necessary ZIP/postal codes for certain countries
  in address information
- Paddle IDs for customer and address must be correct and appropriate for the environment
  (sandbox or live)
- Uses Paddle.js to fetch localized prices with taxes and currency conversion
- Paddle.js automatically detects visitor location using their IP address and returns
  localized prices
- Checkouts must have at least one item
- Recurring items on a checkout must have the same billing interval
- Customer authentication tokens are unique and only valid for 30 minutes
- Access-Control-Allow-Origin header to block access from browsers
- Can only present saved payment methods using one-page checkout
- Certain payment methods like PayPal may not be compatible with all checkouts depending
  on currency and region
- The saved_payment_methods endpoint can be used to retrieve payment methods for a
  customer, which returns multiple entities including cards and PayPal accounts.
- Authentication tokens are valid for 30 minutes and cannot be retrieved after generation.
- Requires customer authentication token to interact with saved payment methods
- To open a checkout, include Paddle.js and pass a client-side token
- For inline checkouts, certain settings like display mode, class name, and styles
  are required
- Defaults to one-page checkout experience unless specified
- Defaults to light mode unless dark mode is specified
- If customerAuthToken is used, allowLogout is automatically set to false
- Credit balances are linked to customer entities and reflect prorated subscription
  changes.
- Credits are automatically applied to pay for future transactions or reduce the amount
  due on issued invoices.
- Authenticated links in customer portal sessions expire and are unique to each customer
- Customer portal sessions are temporary and should not be cached
- Invoices are manually collected and can be billed or ready. Once canceled, they
  cannot be uncanceled or modified.
- Canceling an invoice does not automatically cancel related subscriptions.
- Invoices require manually-collected transactions
- Domain approval needed for live environment payment links
- Paddle does not automatically refund or credit for canceled subscriptions mid-cycle;
  manual adjustment required for refunds.
- Cannot make changes to subscriptions with scheduled changes.
- Uses webhook to handle transaction events
- Requires endpoint setup for webhook reception
- Handles payments, tax, subscriptions, and metrics
- Handles customer order inquiries
- Assumes existing user authentication method like Firebase or Sign in with Apple
- Platform integration involves handling webhooks or using RevenueCat for fulfillment
- Requires client-side token for authentication
- Requires account verification for live operations
- Sandbox account available for testing
- API key requires specific permissions set for actions on Paddle account
- Treat API key like a password and keep it secure
- Use sandbox environment for testing and production for live setups
- Sandbox accounts have instant website approval
- Live accounts may require a few days for website approval
- Requires domain verification for default payment links
- Webhook notifications include a signature for security
- Rotate API keys periodically
- Client-side tokens are designed for frontend use and have limited data access
- Use Hookdeck Console for receiving webhooks without setting up a server
- Ensure webhook endpoint configuration is correct for receiving events
- Integration initially in sandbox for testing, transition to live for real transactions
- Domain, business, and identity verification required for live account
- Paddle handles automatic currency conversion and country specific pricing without
  additional engineering effort.
- Pricing can be set in multiple currencies and adjusted per country to reflect local
  market conditions.
- Cancellation Flows cannot be tested with sandbox accounts; live data is required.
- Paddle Retain cannot be tested with sandbox accounts; only live data is supported.
- Emails from Paddle Retain are optimized through A/B testing and designed to look
  as if they come from the user's team.
- Failed payments without Paddle Retain are retried up to seven times over 30 days
  before cancellation.
- Cancel at the end of the billing period or immediately
- Cannot make changes if the next billing period is within 30 minutes or the subscription
  status is past_due
- Canceled subscriptions cannot be reinstated
- management_urls object includes a temporary token parameter for security
- Cannot change subscription if next billing period is within 30 minutes or status
  is past_due
- Proration calculations can delay responses when collecting payments immediately
- Subscriptions can be paused immediately or scheduled to pause at the end of the
  billing period.
- Resuming a subscription can either start a new billing period or continue the existing
  one.
- API assumes complete list of items for updates; missing items in payload are considered
  removed.
- Subscription changes cannot be made if next billing is within 30 minutes or status
  is past_due.
- Paddle calculates proration to the minute for precise billing adjustments.
- Optional parameters like on_payment_failure can be included to handle specific scenarios.
- Requires embedding Paddle.js for payment method updates
- Overlay and inline checkout options available with different user interface elements
- Displays a checkout for transactions with zero value to update payment methods
- Only 'items' and 'next_billed_at' fields can be updated for a subscription in trial.
- Must use 'do_not_bill' as the proration billing mode when making changes.
- Automatically-collected transactions don't need the `billing_details` object; Paddle
  automatically nulls this when you change collection mode to automatic.
- Adjustments for refunds move from "pending_approval" to "approved" or "rejected"
- Credits can only be created for manually-collected transactions not for automatically-collected
  transactions
- The `type` field can be 'full' or 'partial'. 'full' credits the total amount while
  'partial' requires an 'amount' field for each item.
- Include 'transaction_id' to specify the related transaction.
- The 'action' must be set to 'credit' to apply the adjustment.
- Requires domain approval for live environment usage
- Transactions automatically progress from draft to ready to paid to completed
- Default settings can be overridden by specific settings passed to Paddle.Checkout.open()
- Requires a default payment link to be set and approved for live environments
- API keys now have a new standardized format with enhanced security features
- API keys should not be used with Paddle.js as they must remain secret
- Paddle Retain is only available for live accounts and not for sandbox environments
- Webhooks need to be set up via Paddle dashboard under Developer Tools > Notifications
- Webhook simulator is used for testing and should not be used to send data to production
  endpoints
- Integrate with a future-proofed platform
- Domain for customer portal links varies between sandbox-buyer-portal.paddle.com
  and buyer-portal.paddle.com
- API allows interaction through AI assistants like Claude and AI-powered IDEs like
  Cursor
errors:
- 'Error when no items passed: Paddle.js will throw an error if no items are passed
  to a checkout.'
- Something went wrong: Check Paddle.js integration and client-side token
- 'Discount Not Applied: Ensure the discount code is valid and applicable for the
  items in the checkout'
- Something went wrong: Check domain under Paddle > Checkout > Checkout settings >
    Default payment link or inspect browser console for specific error messages
- No specific error patterns mentioned
- Localization issues: Check IP detection and country selector functionality
- 401 Unauthorized: Ensure API key is valid and has appropriate permissions
- If a passed saved payment method isn't compatible with a checkout, other payment
  options are presented.
- customer_already_exists: List customers using the API, passing the 'email' query
    parameter to find the existing entity.
- customer_email_invalid: Check that there are no unsupported characters and it's
    formatted correctly.
- address_location_not_allowed: Check that the country is supported.
- REQUEST_LIMIT_EXCEEDED: Throttle API calls or reduce frequency
- 401 Unauthorized: Check if the client-side token is correct and active
- Account Not Verified: Complete verification to enable live operations
- Unauthorized: Check if API key or client token is invalid or expired
- Approval Delay: For live accounts, website approval may take a few days.
- 'Domain verification failed: Ensure using a real website that passed domain verification'
- Unauthorized: Recheck API keys or permissions
- Incorrect Price ID: Ensure correct format starting with "pri_" and uniqueness in
    requests
- Webhook not received: Check the notification destination settings
- 'Domain not approved: Ensure compliance with Paddle Acceptable Use Policy'
- 'Business verification needed: Respond to emails from verification team'
- 'Identity verification incomplete: Complete necessary steps as directed in email'
- past_due: Cannot make changes if the subscription status is past_due
- token_expired: management_urls token is temporary, do not store these URLs
- past_due: Cannot make changes if the next billing period is within 30 minutes or
    the subscription status is past_due.
- approved: Refund approved by Paddle
- rejected: Refund rejected by the Paddle team
- adjustment_transaction_invalid_status_for_credit: Transaction must be billed and
    manually collected to create a credit.
- adjustment_transaction_invalid_status_for_refund: Transaction must be completed
    to create a refund.
- adjustment_pending_refund_request: Transaction has a pending refund. Wait for the
    refund to move to approved or rejected before creating another.
- Invalid transaction ID: Ensure the transaction ID is correct and exists
- Domain not approved: Verify the domain in the default payment link settings
- subscription_invalid_billing_mode_for_scheduled_change: New error code for billing
    mode issues
- 401 Unauthorized: Recheck API key validity
auth_info:
  mentioned_objects:
  - Client-side token
  - client-side token
  - Paddle.js
  - Paddle.PricePreview()
  - customer_authentication_token
  - customerAuthToken
  - savedPaymentMethodId
  - Paddle Checkout
  - Paddle account
  - API Key
  - Client-side Token
  - Webhook Secret
  - API keys
  - webhook endpoint
  - subscription_id
  - status
  - next_billing_period
  - on_resume
  - client_side_token
client:
  base_url: https://api.paddle.com/
  headers:
    Accept: application/javascript
  auth:
    type: apikey
    location: header
    header_name: token
  paginator:
    type: cursor
source_metadata: null
