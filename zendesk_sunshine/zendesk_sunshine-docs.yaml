resources:
- name: custom_integration
  endpoint:
    path: /v2/apps/{appId}/integrations/
    method: POST
- name: conversation
  endpoint:
    path: /conversation
    method: POST
- name: message
  endpoint:
    path: /message
    method: POST
- name: conversation_activity
  endpoint:
    path: /{appId}/appusers/{userId}/conversation/activity
    method: POST
    data_selector: conversation
    params: {}
- name: reset_unread_count
  endpoint:
    path: /{appId}/appusers/{userId}/conversation/read
    method: POST
    data_selector: null
    params: {}
- name: post_notification
  endpoint:
    path: /{appId}/notifications
    method: POST
    data_selector: notification
    params: {}
- name: upload_attachment
  endpoint:
    path: /{appId}/attachments
    method: POST
    data_selector: mediaUrl
    params: {}
- name: delete_attachment
  endpoint:
    path: /{appId}/attachments/remove
    method: POST
    data_selector: null
    params: {}
- name: create_template
  endpoint:
    path: /{appId}/templates
    method: POST
    data_selector: template
    params: {}
- name: list_templates
  endpoint:
    path: /{appId}/templates
    method: GET
    data_selector: templates
    params: {}
- name: get_template
  endpoint:
    path: /{appId}/templates/{templateId}
    method: GET
    data_selector: template
    params: {}
- name: update_template
  endpoint:
    path: /{appId}/templates/{templateId}
    method: PUT
    data_selector: template
    params: {}
- name: delete_template
  endpoint:
    path: /{appId}/templates/{templateId}
    method: DELETE
    data_selector: null
    params: {}
- name: send_message
  endpoint:
    path: /{appId}/appusers/{userId}/messages
    method: POST
    data_selector: message
    params: {}
- name: service_accounts
  endpoint:
    path: /v1.1/serviceaccounts
    method: POST
    data_selector: serviceAccount
    params: {}
- name: app_users
  endpoint:
    path: /v1.1/appusers/{userId}
    method: GET
    data_selector: appUser
    params: {}
- name: appUser:delete
  endpoint:
    path: /appUser/delete
    method: POST
    data_selector: appUser
    params: {}
- name: postback
  endpoint:
    path: /postback
    method: POST
    data_selector: postbacks
    params: {}
- name: conversation:read
  endpoint:
    path: /conversation/read
    method: GET
    data_selector: conversation
    params: {}
- name: create_webhook
  endpoint:
    path: /{appId}/webhooks
    method: POST
    data_selector: webhook
    params: {}
- name: list_webhooks
  endpoint:
    path: /{appId}/webhooks
    method: GET
    data_selector: webhooks
    params: {}
- name: get_webhook
  endpoint:
    path: /{appId}/webhooks/{webhookId}
    method: GET
    data_selector: webhook
    params: {}
- name: update_webhook
  endpoint:
    path: /{appId}/webhooks/{webhookId}
    method: PUT
    data_selector: webhook
    params: {}
- name: delete_webhook
  endpoint:
    path: /{appId}/webhooks/{webhookId}
    method: DELETE
    data_selector: null
    params: {}
- name: conversation:start
  endpoint:
    path: /start
    method: POST
- name: conversation:referral
  endpoint:
    path: /referral
    method: POST
- name: merge:appUser
  endpoint:
    path: /merge/appUser
    method: POST
- name: message:delivery:channel
  endpoint:
    path: /message/delivery/channel
    method: POST
- name: message:delivery:user
  endpoint:
    path: /message/delivery/user
    method: POST
- name: message:delivery:failure
  endpoint:
    path: /message/delivery/failure
    method: POST
- name: notification:delivery:channel
  endpoint:
    path: /notification/delivery/channel
    method: POST
- name: notification:delivery:failure
  endpoint:
    path: /notification/delivery/failure
    method: POST
- name: app_user
  endpoint:
    path: /v1.1/apps/{appId}/appusers/{smoochId|userId}
    method: GET
    data_selector: appUser
- name: update_app_user
  endpoint:
    path: /v1.1/apps/{appId}/appusers/{smoochId|userId}
    method: PUT
    data_selector: appUser
- name: delete_app_user_profile
  endpoint:
    path: /v1.1/apps/{appId}/appusers/{smoochId|userId}/profile
    method: DELETE
    data_selector: appUser
- name: delete_app_user
  endpoint:
    path: /v1.1/apps/{appId}/appusers/{smoochId|userId}
    method: DELETE
    data_selector: {}
- name: pre_create_app_user
  endpoint:
    path: /v1.1/apps/{appId}/appusers
    method: POST
    data_selector: appUser
- name: messages
  endpoint:
    path: /v1.1/apps/{appId}/appusers/{smoochId|userId}/messages
    method: GET
    data_selector: messages
- name: post_message
  endpoint:
    path: /v1.1/apps/{appId}/appusers/{smoochId|userId}/messages
    method: POST
    data_selector: message
- name: delete_message
  endpoint:
    path: /v1.1/apps/{appId}/appusers/{smoochId|userId}/messages/{messageId}
    method: DELETE
- name: delete_all_messages
  endpoint:
    path: /v1.1/apps/{appId}/appusers/{smoochId|userId}/messages
    method: DELETE
- name: conversation_activity
  endpoint:
    path: /v1.1/apps/{appId}/appusers/{smoochId|userId}/conversation/activity
    method: POST
- name: notification_delivery_user
  endpoint:
    path: /notification/delivery/user
    method: POST
    data_selector: trigger
- name: payment_success
  endpoint:
    path: /payment/success
    method: POST
    data_selector: trigger
- name: link_success
  endpoint:
    path: /link/success
    method: POST
    data_selector: trigger
- name: link_match
  endpoint:
    path: /link/match
    method: POST
    data_selector: trigger
- name: link_failure
  endpoint:
    path: /link/failure
    method: POST
    data_selector: trigger
- name: client_add
  endpoint:
    path: /client/add
    method: POST
    data_selector: trigger
- name: client_block
  endpoint:
    path: /client/block
    method: POST
    data_selector: trigger
- name: client_remove
  endpoint:
    path: /client/remove
    method: POST
    data_selector: trigger
- name: typing_appUser
  endpoint:
    path: /typing/appUser
    method: POST
    data_selector: trigger
- name: link_app_user_to_channel
  endpoint:
    path: /v1.1/apps/{appId}/appusers/{smoochId|userId}/channels
    method: POST
    data_selector: appUser
    params: {}
- name: unlink_app_user_from_channel
  endpoint:
    path: /v1.1/apps/{appId}/appusers/{smoochId|userId}/channels/{channel}
    method: DELETE
    data_selector: null
    params: {}
- name: get_auth_code
  endpoint:
    path: /v1.1/apps/{appId}/appusers/{smoochId|userId}/authcode
    method: GET
    data_selector: authCode
    params: {}
- name: get_link_requests
  endpoint:
    path: /v1.1/apps/{appId}/appusers/{smoochId|userId}/linkrequest
    method: GET
    data_selector: linkRequests
    params:
      integrationIds: ''
- name: merge_users
  endpoint:
    path: /v1.1/apps/{appId}/appusers/merge
    method: POST
    data_selector: null
    params: {}
- name: send_message
  endpoint:
    path: /{userId}/messages
    method: POST
    data_selector: message
- name: send_message
  endpoint:
    path: /{userId}/messages
    method: POST
    data_selector: message
- name: get_app_menu
  endpoint:
    path: /v1.1/apps/{appId}/menu
    method: GET
    data_selector: menu.items
    params: {}
- name: update_app_menu
  endpoint:
    path: /v1.1/apps/{appId}/menu
    method: PUT
    data_selector: menu.items
    params: {}
- name: delete_app_menu
  endpoint:
    path: /v1.1/apps/{appId}/menu
    method: DELETE
    data_selector: menu.items
    params: {}
- name: list_integrations
  endpoint:
    path: /v1.1/apps/{appId}/integrations
    method: GET
    data_selector: integrations
    params: {}
- name: integration
  endpoint:
    path: /v1.1/apps/{appId}/integrations/{integrationId}
    method: GET
    data_selector: integration
- name: update_integration
  endpoint:
    path: /v1.1/apps/{appId}/integrations/{integrationId}
    method: PUT
    data_selector: integration
- name: create_integration
  endpoint:
    path: /v1.1/apps/{appId}/integrations
    method: POST
    data_selector: integration
- name: delete_integration
  endpoint:
    path: /v1.1/apps/{appId}/integrations/{integrationId}
    method: DELETE
- name: web_messenger
  endpoint:
    path: /apps/{appId}/integrations
    method: POST
    data_selector: integration
    params: {}
- name: wechat
  endpoint:
    path: /apps/{appId}/integrations
    method: POST
    data_selector: integration
    params: {}
- name: whatsapp
  endpoint:
    path: /apps/{appId}/integrations
    method: POST
    data_selector: integration
    params: {}
- name: deployments
  endpoint:
    path: /whatsapp/deployments
    method: POST
    data_selector: deployment
    params: {}
- name: instagram
  endpoint:
    path: /v1.1/apps/55c8d9758590aa1900b9b9f6/integrations
    method: POST
    data_selector: integration
    params:
      type: instagram
      pageAccessToken: your_page_access_token
      appId: your_fb_app_id
      appSecret: your_fb_app_secret
- name: line
  endpoint:
    path: /v1.1/apps/55c8d9758590aa1900b9b9f6/integrations
    method: POST
    data_selector: integration
    params:
      type: line
      channelId: '1234567890'
      channelAccessToken: lineChannelAccessToken
      channelSecret: lineChannelSecret
      qrCodeUrl: https://qr-official.line.me/M/1O4fb8.png
- name: messagebird
  endpoint:
    path: /v1.1/apps/55c8d9758590aa1900b9b9f6/integrations
    method: POST
    data_selector: integration
    params:
      type: messagebird
      accessKey: <>
      signingKey: <>
      originator: '12262121021'
- name: telegram
  endpoint:
    path: /v1.1/apps/55c8d9758590aa1900b9b9f6/integrations
    method: POST
    data_selector: integration
    params:
      type: telegram
      token: <>
- name: twilio
  endpoint:
    path: /v1.1/apps/55c8d9758590aa1900b9b9f6/integrations
    method: POST
    data_selector: integration
    params:
      type: twilio
      accountSid: <>
      authToken: <>
      phoneNumberSid: <>
- name: twitter
  endpoint:
    path: /v1.1/apps/55c8d9758590aa1900b9b9f6/integrations
    method: POST
    data_selector: integration
    params:
      type: twitter
      tier: premium
      envName: your_env_label
      consumerKey: your_consumer_key
      consumerSecret: your_consumer_secret
      accessTokenKey: your_access_token_key
      accessTokenSecret: your_access_token_secret
- name: viber
  endpoint:
    path: /v1.1/apps/55c8d9758590aa1900b9b9f6/integrations
    method: POST
    data_selector: integration
    params:
      type: viber
      token: df5f8c5233399561-92636b0c5ba30da9-16d4928fc004a72d
- name: service_account
  endpoint:
    path: /serviceaccounts
    method: POST
    data_selector: serviceAccount
- name: app
  endpoint:
    path: /apps
    method: POST
    data_selector: app
- name: app
  endpoint:
    path: /v1.1/apps/{appId}
    method: GET
    data_selector: app
- name: sdk_ids
  endpoint:
    path: /v1.1/apps/{appId}/sdks
    method: GET
    data_selector: sdk_ids
- name: app_key
  endpoint:
    path: /v1.1/apps/{appId}/keys
    method: GET
    data_selector: keys
- name: messages_large
  endpoint:
    path: /v1/apps/:appId/appusers/:userId/messages/large
    method: POST
    data_selector: response.message
    params: {}
- name: templates_large
  endpoint:
    path: /v1/apps/:appId/templates/large
    method: POST
    data_selector: response.template
    params: {}
- name: update_template_large
  endpoint:
    path: /v1/apps/:appId/templates/:templateId/large
    method: PUT
    data_selector: response.template
    params: {}
- name: user_account
  endpoint:
    path: /create_user_account
    method: POST
    data_selector: data
    params: {}
- name: service_account
  endpoint:
    path: /create_service_account
    method: POST
    data_selector: data
    params: {}
- name: app
  endpoint:
    path: /create_app
    method: POST
    data_selector: data
    params: {}
- name: user
  endpoint:
    path: /create_user
    method: POST
    data_selector: data
    params: {}
- name: message
  endpoint:
    path: /send_message
    method: POST
    data_selector: data
    params: {}
- name: client
  endpoint:
    path: /create_client
    method: POST
    data_selector: data
    params: {}
- name: integration
  endpoint:
    path: /create_integration
    method: POST
    data_selector: data
    params: {}
- name: webhook
  endpoint:
    path: /create_webhook
    method: POST
    data_selector: data
    params: {}
- name: template
  endpoint:
    path: /create_template
    method: POST
    data_selector: data
    params: {}
- name: conversation
  endpoint:
    path: /api/conversation
    method: POST
- name: sendMessage
  endpoint:
    path: /messages
    method: POST
    data_selector: data
    params: {}
- name: app
  endpoint:
    path: /apps
    method: POST
    data_selector: id
    params: {}
- name: integration
  endpoint:
    path: /integrations
    method: POST
    data_selector: id
    params: {}
- name: app_key
  endpoint:
    path: /app-keys
    method: POST
    data_selector: id
    params: {}
- name: service_account
  endpoint:
    path: /v1.1/serviceaccounts
    method: POST
    data_selector: serviceAccount
    params: {}
- name: app_users
  endpoint:
    path: /v1.1/appusers/{userId}
    method: GET
    data_selector: appUser
    params: {}
- name: create_webhook
  endpoint:
    path: /v1.1/apps/{appId}/webhooks
    method: POST
    data_selector: webhook
    params: {}
- name: list_webhooks
  endpoint:
    path: /v1.1/apps/{appId}/webhooks
    method: GET
    data_selector: webhooks
    params: {}
- name: get_webhook
  endpoint:
    path: /v1.1/apps/{appId}/webhooks/{webhookId}
    method: GET
    data_selector: webhook
    params: {}
- name: update_webhook
  endpoint:
    path: /v1.1/apps/{appId}/webhooks/{webhookId}
    method: PUT
    data_selector: webhook
    params: {}
- name: delete_webhook
  endpoint:
    path: /v1.1/apps/{appId}/webhooks/{webhookId}
    method: DELETE
    data_selector: {}
    params: {}
- name: message_appUser_file
  endpoint:
    path: /trigger/message:appUser
    method: POST
    data_selector: messages
    params: {}
- name: message_appMaker_form
  endpoint:
    path: /trigger/message:appMaker
    method: POST
    data_selector: messages
    params: {}
- name: message_appUser_formResponse
  endpoint:
    path: /trigger/message:appUser
    method: POST
    data_selector: messages
    params: {}
- name: appUser_delete
  endpoint:
    path: /trigger/appUser:delete
    method: POST
    data_selector: appUser
    params: {}
- name: postback
  endpoint:
    path: /trigger/postback
    method: POST
    data_selector: postbacks
    params: {}
- name: conversation_read
  endpoint:
    path: /trigger/conversation:read
    method: POST
    data_selector: conversation
    params: {}
- name: conversation:start
  endpoint:
    path: /start
    method: POST
- name: conversation:referral
  endpoint:
    path: /conversation/referral
    method: POST
- name: merge:appUser
  endpoint:
    path: /merge/appUser
    method: POST
- name: message:delivery:channel
  endpoint:
    path: /message/delivery/channel
    method: POST
- name: message:delivery:user
  endpoint:
    path: /message/delivery/user
    method: POST
- name: message:delivery:failure
  endpoint:
    path: /message/delivery/failure
    method: POST
- name: notification:delivery:channel
  endpoint:
    path: /notification/delivery/channel
    method: POST
- name: notification:delivery:failure
  endpoint:
    path: /notification/delivery/failure
    method: POST
- name: app_user
  endpoint:
    path: /v1.1/apps/{appId}/appusers/{smoochId|userId}
    method: GET
    data_selector: appUser
- name: update_app_user
  endpoint:
    path: /v1.1/apps/{appId}/appusers/{smoochId|userId}
    method: PUT
    data_selector: appUser
- name: delete_app_user
  endpoint:
    path: /v1.1/apps/{appId}/appusers/{smoochId|userId}
    method: DELETE
    data_selector: appUser
- name: pre_create_app_user
  endpoint:
    path: /v1.1/apps/{appId}/appusers
    method: POST
    data_selector: appUser
- name: messages
  endpoint:
    path: /{userId}/messages
    method: POST
    data_selector: message
- name: notification_delivery_user
  endpoint:
    path: /notification/delivery/user
    method: POST
- name: payment_success
  endpoint:
    path: /payment/success
    method: POST
- name: link_success
  endpoint:
    path: /link/success
    method: POST
- name: link_match
  endpoint:
    path: /link/match
    method: POST
- name: link_failure
  endpoint:
    path: /link/failure
    method: POST
- name: client_add
  endpoint:
    path: /client/add
    method: POST
- name: client_block
  endpoint:
    path: /client/block
    method: POST
- name: client_remove
  endpoint:
    path: /client/remove
    method: POST
- name: typing_appUser
  endpoint:
    path: /typing/appUser
    method: POST
- name: link_app_user_to_channel
  endpoint:
    path: /v1.1/apps/{appId}/appusers/{smoochId|userId}/channels
    method: POST
    data_selector: appUser
    params: {}
- name: unlink_app_user_from_channel
  endpoint:
    path: /v1.1/apps/{appId}/appusers/{smoochId|userId}/channels/{channel}
    method: DELETE
    data_selector: ''
    params: {}
- name: get_auth_code
  endpoint:
    path: /v1.1/apps/{appId}/appusers/{smoochId|userId}/authcode
    method: GET
    data_selector: authCode
    params: {}
- name: get_link_requests
  endpoint:
    path: /v1.1/apps/{appId}/appusers/{smoochId|userId}/linkrequest
    method: GET
    data_selector: linkRequests
    params:
      integrationIds: ''
- name: merge_users
  endpoint:
    path: /v1.1/apps/{appId}/appusers/merge
    method: POST
    data_selector: ''
    params: {}
- name: conversation_activity
  endpoint:
    path: /apps/{appId}/appusers/{userId}/conversation/activity
    method: POST
    data_selector: conversation
    params: {}
- name: reset_unread_count
  endpoint:
    path: /apps/{appId}/appusers/{userId}/conversation/read
    method: POST
    data_selector: ''
    params: {}
- name: post_notification
  endpoint:
    path: /apps/{appId}/notifications
    method: POST
    data_selector: notification
    params: {}
- name: upload_attachment
  endpoint:
    path: /apps/{appId}/attachments
    method: POST
    data_selector: ''
    params: {}
- name: delete_attachment
  endpoint:
    path: /apps/{appId}/attachments/remove
    method: POST
    data_selector: ''
    params: {}
- name: create_template
  endpoint:
    path: /apps/{appId}/templates
    method: POST
    data_selector: template
    params: {}
- name: list_templates
  endpoint:
    path: /apps/{appId}/templates
    method: GET
    data_selector: templates
    params: {}
- name: get_template
  endpoint:
    path: /apps/{appId}/templates/{templateId}
    method: GET
    data_selector: template
    params: {}
- name: update_template
  endpoint:
    path: /apps/{appId}/templates/{templateId}
    method: PUT
    data_selector: template
    params: {}
- name: delete_template
  endpoint:
    path: /apps/{appId}/templates/{templateId}
    method: DELETE
    data_selector: ''
    params: {}
- name: send_message
  endpoint:
    path: /apps/{appId}/appusers/{userId}/messages
    method: POST
    data_selector: message
    params: {}
- name: messages
  endpoint:
    path: /v1.1/apps/{appId}/appusers/{smoochId|userId}/messages
    method: POST
    data_selector: message
    params: {}
- name: get_messages
  endpoint:
    path: /v1.1/apps/{appId}/appusers/{smoochId|userId}/messages
    method: GET
    data_selector: messages
    params: {}
- name: delete_messages
  endpoint:
    path: /v1.1/apps/{appId}/appusers/{smoochId|userId}/messages
    method: DELETE
    data_selector: null
    params: {}
- name: messages
  endpoint:
    path: /{userId}/messages
    method: POST
    data_selector: message
    params: {}
- name: app_menu
  endpoint:
    path: /v1.1/apps/{appId}/menu
    method: GET
- name: integration_menu
  endpoint:
    path: /v1.1/apps/{appId}/integrations/{integrationId}/menu
    method: GET
- name: integration
  endpoint:
    path: /{appId}/integrations/{integrationId}
    method: GET
    data_selector: integration
- name: update_integration
  endpoint:
    path: /{appId}/integrations/{integrationId}
    method: PUT
    data_selector: integration
- name: create_integration
  endpoint:
    path: /{appId}/integrations
    method: POST
    data_selector: integration
- name: delete_integration
  endpoint:
    path: /{appId}/integrations/{integrationId}
    method: DELETE
- name: upload_profile_photo
  endpoint:
    path: /{appId}/integrations/{integrationId}/profile/photo
    method: PUT
- name: twilio_integration
  endpoint:
    path: /integrations
    method: POST
    data_selector: integration
    params: {}
- name: create_integration
  endpoint:
    path: /apps/{appId}/integrations
    method: POST
    data_selector: integration
    params: {}
- name: list_deployments
  endpoint:
    path: /whatsapp/deployments
    method: GET
    data_selector: deployments
    params: {}
- name: activate_deployment
  endpoint:
    path: /whatsapp/deployments/{deploymentId}/activate
    method: POST
    data_selector: deployment
    params: {}
- name: confirm_code
  endpoint:
    path: /whatsapp/deployments/{deploymentId}/code/confirm
    method: POST
    data_selector: deployment
    params: {}
- name: delete_deployment
  endpoint:
    path: /whatsapp/deployments/{deploymentId}
    method: DELETE
    data_selector: deployment
    params: {}
- name: service_accounts
  endpoint:
    path: /v1.1/serviceaccounts
    method: GET
    data_selector: serviceAccounts
- name: apps
  endpoint:
    path: /v1.1/apps
    method: GET
    data_selector: apps
- name: get_app
  endpoint:
    path: /v1.1/apps/{appId}
    method: GET
- name: update_app
  endpoint:
    path: /v1.1/apps/{appId}
    method: PUT
- name: delete_app
  endpoint:
    path: /v1.1/apps/{appId}
    method: DELETE
- name: get_sdk_ids
  endpoint:
    path: /v1.1/apps/{appId}/sdks
    method: GET
- name: create_app_key
  endpoint:
    path: /v1.1/apps/{appId}/keys
    method: POST
- name: list_app_keys
  endpoint:
    path: /v1.1/apps/{appId}/keys
    method: GET
- name: get_app_key
  endpoint:
    path: /v1.1/apps/{appId}/keys/{keyId}
    method: GET
- name: delete_app_key
  endpoint:
    path: /v1.1/apps/{appId}/keys/{keyId}
    method: DELETE
- name: get_app_jwt
  endpoint:
    path: /v1.1/apps/{appId}/keys/{keyId}/jwt
    method: GET
- name: authorize
  endpoint:
    path: /oauth/authorize
    method: GET
- name: get_token
  endpoint:
    path: /oauth/token
    method: POST
- name: revoke_access
  endpoint:
    path: /oauth/authorization
    method: DELETE
- name: custom_integration
  endpoint:
    path: /v2/apps/{appId}/integrations/
    method: POST
- name: notifications
  endpoint:
    path: /apps/5963c0d619a30a2e00de36b8/notifications
    method: POST
    data_selector: notifications
    params: {}
- name: notifications
  endpoint:
    path: /apps/5963c0d619a30a2e00de36b8/notifications
    method: POST
    data_selector: notifications
    params: {}
- name: user
  endpoint:
    path: /users
    method: POST
    data_selector: user
    params: {}
- name: service_accounts
  endpoint:
    path: /serviceaccounts
    method: POST
    data_selector: null
    params: {}
- name: api_keys
  endpoint:
    path: /serviceaccounts/{serviceAccountId}/keys
    method: POST
    data_selector: null
    params: {}
- name: apps
  endpoint:
    path: /apps
    method: POST
    data_selector: null
    params: {}
- name: list_apps
  endpoint:
    path: /apps
    method: GET
    data_selector: null
    params: {}
- name: delete_app
  endpoint:
    path: /apps/{appId}
    method: DELETE
    data_selector: null
    params: {}
- name: delete_service_account
  endpoint:
    path: /serviceaccounts/{serviceAccountId}
    method: DELETE
    data_selector: null
    params: {}
- name: conversation
  endpoint:
    path: /v1/conversations
    method: GET
    data_selector: conversations
- name: message
  endpoint:
    path: /v1/messages
    method: POST
    data_selector: messages
notes:
- Standard rate limits apply, see documentation for details.
- WebMessenger supports multiline user messages.
- You need an existing account to log in to Telegram Web. You cannot create an account
  from within Telegram Web.
- Every string you see in Sunshine Conversations can be customized and localized.
- Accounts created via the Viber admin panel will initially only be discoverable via
  a deep link.
- Viber has a 6 item limit for carousels; any carousel sent with more than 6 will
  be split into multiple messages.
- Automatically pads items to fit Viber's requirements.
- Viber doesn’t support the square image ratio configuration.
- When creating a message template, the name must reflect the template’s content and
  have no more than 512 characters.
- A message template can be created in as many languages as desired, using the exact
  same message template name.
- If the message template happens to be rejected, the 30 day rule does not apply and
  the message template name will become free immediately after deleting the message
  template.
- Notifications must include an author role of appMaker.
- API requests require specifying the content-type as application/json
- Conversations are limited to 30,000 messages
- Payload structures may vary based on event type.
- The response body will include a secret which will be transmitted with each webhook
  invocation and can be used to verify the authenticity of the caller.
- The `conversation:start` event is only available on a subset of channels.
- The `conversation:start` won’t be triggered when a user is linking a second channel.
- Webhook calls will be attempted up to 5 times over a 15 minute window.
- Non-recoverable errors include 400, 401, 403, 404, and 406.
- Messages must have a role of either appUser or appMaker.
- The API endpoint for retrieving messages has a limit of a 100 messages.
- Linking allows users to continue conversations on their preferred channels.
- Link requests are currently supported by Facebook Messenger, Telegram, Viber, and
  WhatsApp channels.
- Carousel messages are only supported on certain platforms.
- Forms are only supported on the Web Messenger.
- The API supports pagination for list endpoints.
- For WeChat integration, whitelist specific IP addresses before creating integration.
- Deployment must be activated with a valid phone number.
- Account provisioning endpoints require 'account' scope.
- OAuth flow begins with a GET request to the authorize endpoint
- Authorization code must be exchanged for an access token
- Web Messenger supports all popular browsers.
- Web Messenger includes a set of built-in customization options.
- Creating an app requires the account scope.
- If conversationRetentionSeconds is left unset, no automatic message deletion will
  take place.
- During the OAuth flow, a Facebook page owner may select the 'Choose what you allow'
  option to reduce the scope of access that is granted to Sunshine Conversations.
- Not all brands will be able to connect via Instagram’s APIs, but as the channel
  opens up, more brands will be granted access.
- Sunshine Conversations allows basic authentication or JSON Web Tokens (JWTs) as
  authentication methods.
- Conversations are limited to 30,000 messages.
- Webhook payloads include a secret for verification of the caller's authenticity.
- A message webhook of type 'file' will only be sent when the appUser sends a message
  from the Web, iOS or Android SDKs.
- Webhooks will be retried 5 times in case of failure.
- Not all messaging channels fully support carousel and list messages.
- Multiple link requests can be made at once.
- Conversation is automatically created when the first message is sent or received.
- Sunshine Conversations forms are only supported on the Web Messenger.
- Menus can be configured on a per-app basis and on a per-integration basis.
- This API allows you to create and manage integrations for multiple messaging platforms.
- API is paginated and returns a maximum of 25 records by default.
- OAuth requires user interaction for authentication.
- We recommend selecting a 'Service Account' to integrate with Sunshine Conversations.
- Your account must have Zendesk messaging or Agent Workspace with social messaging,
  or a standalone license through Sunshine Conversations directly, to delete your
  channel and re-integrate it.
- LINE does not restrict when messages can be sent to end users once a user starts
  following your account.
- LINE restricts the maximum number of characters for a reply button label to 20.
- Facebook account must have Admin access to the page in question.
- You can proactively detect this error case by subscribing to the `conversation:message:delivery:failure`
  webhook trigger.
- The user object has a key called metadata to which you can add metadata.
- For development usage only, some manipulations can be done on the SDKs to quickly
  clear a conversation.
- Configuring Help Scout is super easy. All you have to do is connect your Help Scout
  account to Sunshine Conversations using Help Scout’s OAuth.
- Requires setup of an Enterprise Account with Twitter
- Business must enable 'Allow message requests from everyone' in Twitter’s settings
- Unstructured information can contain key/value pairs limited to 4KB in size.
- A service account must be given a unique name to identify the account.
- A service account can only be deleted if it no longer has access to any apps.
- Text fallback will usually be ignored.
- A combination of text (optional), image, and button will be sent to end-users as
  a card.
- Supports push notifications for message delivery.
- Requires setup of iOS integration ID in the Sunshine Conversations dashboard.
- Basic authentication for server-to-server API requests is now the recommended method.
- WhatsApp approval is required for all businesses to enter the program.
errors:
- '403 Forbidden: Ensure that the API key is correct and has necessary permissions.'
- '404 Not Found: Verify the endpoint URL.'
- '429 Too Many Requests: Rate limit exceeded.'
- '401 Unauthorized: Recheck OAuth scopes or token expiration'
- 'payment_required: Your account has exceeded the free plan limits and must be upgraded
  to a paid plan to continue'
- '401 Unauthorized: Authorization is required'
- '400 bad_request: Something in your header or request body was malformed.'
- '429 Too Many Requests: You are calling our APIs more frequently than we allow.'
- 'bad_request: The channel rejected the Sunshine Conversations request because of
  a bad request.'
- 'unauthorized: The delivery failed because the integration is not authorized.'
- '400: The target exists, but can’t process the payload.'
- '401: The target is behind authentication or doesn’t recognize the webhook secret.'
- '403: Sunshine Conversations should not be calling the target.'
- '404: The target doesn’t exist.'
- '406: The target exists, and rejected the webhook intentionally.'
- '404 client_not_found: If the user does not have a client linked to the targeted
  channel.'
- '201 CREATED: Message successfully created.'
- '400 Bad Request: Check the request syntax or parameters.'
- '401 Unauthorized: Verify your authentication credentials.'
- '404 Not Found: Ensure the endpoint and resource exist.'
- '201 CREATED: Integration created successfully.'
- '200 OK: Successful operation.'
- 'access_denied: The user denied access'
- 'bad_request: Invalid JSON'
- 'Invalid integration ID: Check the integration ID used in the Smooch.init call.'
- '200 OK: Successful request'
- '201 CREATED: Webhook successfully created'
- '401 Unauthorized: Invalid credentials provided'
- 'unauthorized: Authentication failed due to the following reason: invalid token.
  Confirm that the access token in the authorization header is valid.'
- 'bad_request: This is an error message.'
- '201 CREATED: Successful message send'
- '404 client_not_found: The user does not have a client linked to the targeted channel.'
- '201 CREATED: Successfully created the resource.'
- 'REQUEST_LIMIT_EXCEEDED: Throttle API calls or reduce frequency.'
- '400 Bad Request: Check the request parameters.'
- '404 Not Found: The specified resource does not exist.'
- 'Error validating access token: The session has been invalidated because the user
  changed their password or Facebook has changed the session for security reasons.'
- '404 Not Found: Returned when attempting to retrieve or modify an app the service
  account does not have access to.'
- '401 Unauthorized: Check your integration ID and access token.'
- '404 Not Found: Ensure the endpoint path is correct.'
- '423 Locked: Maximum size of 30,000 messages reached.'
auth_info:
  mentioned_objects:
  - keyId
  - keySecret
  - secret
  - serviceAccount
  - app
  - OAuth2
  - Authorization
  - OAuth
  - Service Account
  - App
  - SKTSettings
  - SKTAuthenticationDelegate
client:
  base_url: https://api.whatsapp.com
  auth:
    type: oauth2
    location: header
    header_name: Authorization
    scope:
    - instagram_basic
    - instagram_manage_messages
    - pages_manage_metadata
    - pages_show_list
    - human_agent
    - public_profile
    flow: refresh_token
    token_url: https://login.sunshineconversations.com/oauth/token
    client_id: '{{ dlt.secrets[''sunshine_client_id''] }}'
    client_secret: '{{ dlt.secrets[''sunshine_client_secret''] }}'
    refresh_token: '{{ dlt.secrets[''sunshine_refresh_token''] }}'
  headers:
    Content-Type: application/json
    content-type: application/json
    Accept: application/json
  paginator:
    type: page
    page_size_param: limit
    default_page_size: 25
source_metadata: null
