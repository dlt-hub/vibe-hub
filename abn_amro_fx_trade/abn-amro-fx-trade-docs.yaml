resources:
- name: fx_quote
  endpoint:
    path: /v1/fxtrade/quotes
    method: GET
    data_selector: quotes
- name: fx_order
  endpoint:
    path: /v1/fxtrade/orders
    method: GET
    data_selector: orders
- name: allowed_currency_pairs
  endpoint:
    path: /allowedcurrencypairs
    method: GET
    data_selector: currencyPairs
- name: settlement_account_groups
  endpoint:
    path: /settlementaccountgroups
    method: GET
    data_selector: settlementAccountGroups
- name: rates
  endpoint:
    path: /rates
    method: GET
    data_selector: rates
- name: conversion_calculations
  endpoint:
    path: /conversioncalculations
    method: POST
    data_selector: conversions
- name: quotes
  endpoint:
    path: /v1/fxtrade/quotes
    method: POST
    data_selector: quoteId
- name: orders
  endpoint:
    path: /v1/fxtrade/orders
    method: POST
    data_selector: orderId
- name: getAllowedCurrencyPairs
  endpoint:
    path: /v1/fxtrade/allowedcurrencypairs
    method: GET
    data_selector: records
    params:
      settlementAccountGroup: string
- name: getOrders
  endpoint:
    path: /v1/fxtrade/orders/{orderId}
    method: GET
    data_selector: order
    params: {}
- name: orders
  endpoint:
    path: /orders/{orderId}
    method: GET
    data_selector: records
- name: fxRates
  endpoint:
    path: /fxrates
    method: GET
    data_selector: records
- name: conversionCalculations
  endpoint:
    path: /conversionCalculations
    method: POST
    data_selector: records
- name: createFxQuote
  endpoint:
    path: /v1/fxtrade/quotes
    method: POST
    data_selector: order
    params: {}
- name: getFxQuotes
  endpoint:
    path: /v1/fxtrade/quotes
    method: GET
    data_selector: quotes
    params: {}
- name: getFxQuote
  endpoint:
    path: /v1/fxtrade/quotes/{quoteId}
    method: GET
    data_selector: quote
    params: {}
- name: getFxOrder
  endpoint:
    path: get/orders/{orderId}
    method: GET
    data_selector: order
    params: {}
- name: createFxOrder
  endpoint:
    path: createFxOrder
    method: POST
    data_selector: order
    params: {}
- name: getFxOrders
  endpoint:
    path: getFxOrders
    method: GET
    data_selector: orders
    params: {}
- name: orders
  endpoint:
    path: /fxtrade/orders/{orderId}
    method: GET
- name: Payment Initiation
  endpoint:
    path: /api-products/payment-initiation-psd2/payment-initiation-psd2
    method: GET
- name: Account Information
  endpoint:
    path: /api-products/account-information-psd2/account-information-psd2
    method: GET
- name: Confirmation Availability Funds
  endpoint:
    path: /api-products/confirmation-availability-funds-psd2
    method: GET
- name: Business Account Insight
  endpoint:
    path: /api-products/business-account-insight/business-account-insight
    method: GET
- name: Business Account Payment
  endpoint:
    path: /api-products/business-account-payment
    method: GET
- name: IBAN-Name Check
  endpoint:
    path: /api-products/iban-name-check
    method: GET
- name: FX Trade
  endpoint:
    path: /api-products/fx-trade
    method: GET
- name: single_payment
  endpoint:
    path: /postpostSEPAPayment
    method: POST
    data_selector: payment
    params: {}
- name: batch_payment
  endpoint:
    path: /postregisterBulkPayments
    method: POST
    data_selector: bulk_payment
    params: {}
- name: payments
  endpoint:
    path: /v1/payments
    method: POST
    data_selector: transactionId
    params: {}
- name: consentinfo
  endpoint:
    path: /v1/consentinfo
    method: GET
    data_selector: transactionId
    params: {}
- name: batch_payment
  endpoint:
    path: /v1/payments/bulkpayment
    method: POST
    data_selector: ''
    params: {}
- name: consent_info
  endpoint:
    path: /v1/consentinfo
    method: GET
    data_selector: ''
    params: {}
- name: postSEPAPayment
  endpoint:
    path: /payments/sepa
    method: POST
    data_selector: scopes
    params: {}
- name: putSEPAPayment
  endpoint:
    path: /payments/sepa/{transactionId}
    method: PUT
    data_selector: scopes
    params:
      transactionId: string
- name: deleteSEPAPayment
  endpoint:
    path: /payments/sepa/{transactionId}
    method: DELETE
    data_selector: scopes
    params:
      transactionId: string
- name: getSEPAPayment
  endpoint:
    path: /payments/sepa/{transactionId}
    method: GET
    data_selector: scopes
    params:
      transactionId: string
- name: postXborderPayment
  endpoint:
    path: /payments/xborder
    method: POST
    data_selector: scopes
    params: {}
- name: putXborderPayment
  endpoint:
    path: /payments/xborder/{transactionId}
    method: PUT
    data_selector: scopes
    params:
      transactionId: string
- name: getConsentInformation
  endpoint:
    path: /consentinfo
    method: GET
    data_selector: records
- name: registerBulkPayments
  endpoint:
    path: /bulkPayments
    method: POST
    data_selector: records
- name: executeRegisteredBulkPayments
  endpoint:
    path: /bulkPayments/{transactionId}/execute
    method: POST
    data_selector: records
- name: getTransactions
  endpoint:
    path: /v2/accounts/{accountNumber}/activities
    method: GET
    data_selector: transactions
    params: {}
- name: getBalances
  endpoint:
    path: /v2/accounts/{accountNumber}/balances
    method: GET
    data_selector: balances
    params: {}
- name: getDetails
  endpoint:
    path: /v2/accounts/{accountNumber}/details
    method: GET
    data_selector: details
    params: {}
- name: getActivities
  endpoint:
    path: /v2/accounts/{accountNumber}/activities
    method: GET
    data_selector: activities
    params: {}
- name: consent_info
  endpoint:
    path: /v1/consentinfo
    method: GET
    data_selector: scopes
    params: {}
- name: activities
  endpoint:
    path: /v2/accounts/{accountNumber}/activities
    method: GET
    data_selector: activities
    params:
      dateFrom: string <date>
      dateTo: string <date>
      nextPageKey: string
      activityType: string
      status: string
      includeProperties: Array of strings
- name: funds
  endpoint:
    path: /v1/accounts/{accountNumber}/funds
    method: GET
    data_selector: funds
    params:
      amount: integer <double>
      currency: string
- name: getFunds
  endpoint:
    path: /v1/consentinfo
    method: GET
    data_selector: iban
    params: {}
- name: getConsentInfo
  endpoint:
    path: /v1/consentinfo
    method: GET
    data_selector: iban
    params: {}
- name: getFunds
  endpoint:
    path: /v1/accounts/{NL12ABNA9999876523}/funds
    method: GET
    data_selector: funds
    params:
      amount: required
      currency: optional
- name: getConsentInfo
  endpoint:
    path: /v1/consentinfo
    method: GET
    data_selector: consentInfo
    params: {}
- name: transaction_information
  endpoint:
    path: /transaction
    method: GET
- name: current_balance
  endpoint:
    path: /balance
    method: GET
- name: account_details
  endpoint:
    path: /account
    method: GET
- name: activities
  endpoint:
    path: /v1/accounts/{accountNumber}/activities
    method: GET
    data_selector: activities
    params: {}
- name: activities
  endpoint:
    path: /v1/accounts/{accountNumber}/activities
    method: GET
    data_selector: activities
    params: {}
- name: accountDetails
  endpoint:
    path: /v1/accounts/{accountNumber}/details
    method: GET
    data_selector: accountDetails
    params: {}
- name: batch_transaction_details
  endpoint:
    path: /api/products/business-account-insight-batch-transaction-details
    method: GET
    data_selector: transactions
    params: {}
- name: batch_transactions
  endpoint:
    path: /v1/accounts/{accountNumber}/batch-transactions/{batchTransactionId}
    method: GET
    data_selector: transactions
    params:
      nextPageKey: string
- name: batch_transactions
  endpoint:
    path: /v1/accounts/{accountNumber}/batch-transactions/{batchTransactionId}
    method: GET
    data_selector: transactions
    params:
      nextPageKey: string
- name: initiatePayment
  endpoint:
    path: /v1/customer-api/payments
    method: POST
    data_selector: string
    params: {}
- name: getPaymentStatus
  endpoint:
    path: /v1/customer-api/payments/{paymentId}/status
    method: GET
    data_selector: string
    params:
      paymentId: string
- name: transaction
  endpoint:
    path: /api/transaction
    method: POST
    data_selector: transactionDetails
- name: status
  endpoint:
    path: /api/status
    method: GET
    data_selector: statusDetails
- name: initiate_payment
  endpoint:
    path: /v1/customer-api/payments
    method: POST
    data_selector: accountNumber
    params: {}
- name: get_payment_status
  endpoint:
    path: /v1/customer-api/payments/{paymentId}/status
    method: GET
    data_selector: status
    params: {}
- name: initiatePayment
  endpoint:
    path: /customer-api/payments
    method: POST
    data_selector: paymentResponse
    params: {}
- name: getPaymentStatus
  endpoint:
    path: /customer-api/payments/{paymentId}/status
    method: GET
    data_selector: statusResponse
    params:
      paymentId: string
- name: initiatePayment
  endpoint:
    path: /initiatePayment
    method: POST
    data_selector: response
    params: {}
- name: payment_initiation
  endpoint:
    path: /v1/customer-api/payments
    method: POST
    data_selector: accountNumber
    params: {}
- name: payments
  endpoint:
    path: /v1/customer-api/payments
    method: POST
    data_selector: accountNumber
    params: {}
- name: createSubscription
  endpoint:
    path: /v1/business-account-notification/subscriptions
    method: POST
    data_selector: ''
    params: {}
- name: getAllSubscriptions
  endpoint:
    path: /v1/business-account-notification/subscriptions
    method: GET
    data_selector: ''
    params: {}
- name: getOneSubscription
  endpoint:
    path: /v1/business-account-notification/subscriptions/{subscriptionId}
    method: GET
    data_selector: ''
    params: {}
- name: updateSubscription
  endpoint:
    path: /v1/business-account-notification/subscriptions
    method: PUT
    data_selector: ''
    params: {}
- name: deleteSubscription
  endpoint:
    path: /v1/business-account-notification/subscriptions/{subscriptionId}
    method: DELETE
    data_selector: ''
    params: {}
- name: deleteSubscription
  endpoint:
    path: /business-account-notification/subscriptions/{subscriptionId}
    method: DELETE
- name: getOneSubscription
  endpoint:
    path: /business-account-notification/subscriptions/{subscriptionId}
    method: GET
- name: updateSubscription
  endpoint:
    path: /business-account-notification/subscriptions/{subscriptionId}
    method: PUT
- name: dispatchConfirmationOfPayee
  endpoint:
    path: /third-party-api/surepay/iban-name-check/v3
    method: POST
    data_selector: confirmationOfPayeeRequest
- name: company
  endpoint:
    path: /pay-by-invoice/v1/companies
    method: GET
    data_selector: companies
- name: order
  endpoint:
    path: /pay-by-invoice/v1/orders
    method: POST
    data_selector: order
- name: create_order
  endpoint:
    path: /orders
    method: POST
    data_selector: order
    params: {}
- name: get_orders
  endpoint:
    path: /orders
    method: GET
    data_selector: orders
    params: {}
- name: refund
  endpoint:
    path: /{orderId}/refunds
    method: POST
    data_selector: refundSummaryId
- name: update_order
  endpoint:
    path: /{orderId}
    method: PUT
    data_selector: orderRevision
- name: confirm_order
  endpoint:
    path: /{orderId}/confirm
    method: POST
    data_selector: orderId
- name: cancel_order
  endpoint:
    path: /{orderId}/cancel
    method: POST
    data_selector: orderId
- name: create_partial_refund
  endpoint:
    path: /orders/{orderId}/refunds
    method: POST
    data_selector: refundSummaryId
- name: payment_requests
  endpoint:
    path: /paymentrequests
    method: GET
    data_selector: records
    params:
      pageNumber: integer <int32>
      pageSize: integer <int32>
- name: transactions
  endpoint:
    path: /transactionbundles
    method: GET
    data_selector: records
    params: {}
- name: transaction_subscription
  endpoint:
    path: /transactionssubscription
    method: DELETE
    data_selector: response
    params: {}
- name: payment_requests
  endpoint:
    path: /paymentrequests/{paymentRequestToken}/payments
    method: GET
    data_selector: payments
    params:
      pageNumber: '0'
      pageSize: '10'
- name: refunds
  endpoint:
    path: /paymentrequests/{paymentRequestToken}/payments/{paymentToken}/refunds
    method: POST
    data_selector: refund
    params: {}
- name: transaction_subscription
  endpoint:
    path: /transactionssubscription
    method: POST
    data_selector: notification
    params: {}
- name: getCashbackCampaign
  endpoint:
    path: /cashback/campaigns/{campaignId}
    method: GET
    data_selector: ''
    params: {}
- name: createCashback
  endpoint:
    path: /cashback/campaigns/{campaignId}/cashbacks
    method: POST
    data_selector: ''
    params: {}
- name: getCashbackList
  endpoint:
    path: /cashback/campaigns/{campaignId}/cashbacks
    method: GET
    data_selector: ''
    params: {}
- name: getCashback
  endpoint:
    path: /cashback/campaigns/{campaignId}/cashbacks/{cashbackId}
    method: GET
    data_selector: ''
    params: {}
- name: subscribeCashbackNotifications
  endpoint:
    path: /cashback/cashback-subscriptions
    method: POST
    data_selector: ''
    params: {}
- name: deleteCashbackNotifications
  endpoint:
    path: /cashback/cashback-subscriptions
    method: DELETE
    data_selector: ''
    params: {}
- name: getInstrument
  endpoint:
    path: /api/instrument
    method: GET
- name: getInstrumentList
  endpoint:
    path: /api/instrumentList
    method: GET
- name: getInstrument
  endpoint:
    path: /consumer-investments/instruments/v2
    method: GET
    data_selector: records
    params:
      instrumentCode: required
- name: getInstrumentList
  endpoint:
    path: /consumer-investments/instruments/v2
    method: GET
    data_selector: records
    params: {}
- name: instruments
  endpoint:
    path: /
    method: GET
    data_selector: instruments
    params:
      sortBy: INSTRUMENT_TYPE_AND_NAME_ASCENDING
      nextPageKey: 1
notes:
- Quotes stay tradable for 90 seconds in the sandbox.
- Rates in the sandbox environment are fictitious and provided for testing purposes
  only.
- The FX Trade API product is available from Sunday 17:00 (America/New_York) until
  Friday 17:00 (America/New_York).
- Performing a POST on the quote and order endpoint is subject to trading hours.
- Replace the quoteSignature value with the value you obtained in the quote response.
- If the quote remains in the PENDING_NEW state, you must continue to query the service
  for a final state.
- Use an interval between requests that is larger than one second to avoid receiving
  a 429 status code.
- ABN AMRO only accepts Qualified Website Authentication Certificates (QWAC) from
  Qualified Trusted Service Providers (QSTPs) that are on the trusted list with CEF
  Digital only.
- Batch processing is available for non retail/commercial clients only.
- In the production environment, the PSD2 compliant EIDAS QWAC certificate or OBWAC
  certificate for UK access is used.
- You must store the transactionId.
- In the sandbox, a simplified version of the consent application is used.
- Each file can have 1 batch only.
- The access_token is valid for 2 hours.
- Uses OAuth2 with client credentials — requires setup of consent application in api
- Payments may be subject to SWIFT character set limitations.
- This API is PSD2 compliant. Any Account Information Service Provider (AISP) with
  a PSD2 license can use this product.
- The sandbox handles functional error scenarios only.
- Consent is supported for a single account only.
- To access ABN AMRO accounts as a third-party service provider, you must have a PSD2
  license that has been granted by a local competent authority.
- ABN AMRO only accepts Qualified Website Authentication Certificates (QWAC) from
  Qualified Trusted Service Providers (QSTPs) that are on the trusted list with CEF
  Digital.
- All confirmation availability funds consents are valid for 180 days.
- In the production environment, the PSD2 compliant EIDAS QWAC SSL certificate, production
  redirect-uri, and production API-Key are used.
- All data is available digitally, so it can be directly used within your ERP, TMS,
  or any other financial system.
- If you are a third party bank connectivity service provider and you are interested
  in this service, please contact us through ABN AMRO's Embedded Finance page.
- The Batch Transaction Details service can be freely used by ABN AMRO business account
  holders.
- Third parties providing bank connectivity services may have restrictions.
- API supports ISO20022 XML format
- The sandbox environment is static, payments posted are cleaned daily.
- Payments for authorization are available in your Internet Banking Business or Access
  Online portal.
- This API is currently in Early Access (pilot phase) and therefore limited to a fixed
  number of users, at this moment, the pilot is full.
- This API is currently in Early Access (pilot phase) and therefore limited to a fixed
  number of users.
- Occasionally, we also refer to the RFC7515 Internet Standard Track document.
- The signing certificate must be valid at the time of creating the JWS and during
  payment execution lifecycle.
- The signer must include an HTTP header called Signature with its value set to the
  signature computed in Step 3.
- This product is in early access (pilot phase).
- An ABN AMRO Business Current Account registered in the Netherlands is required.
- This service covers 99.5% of Dutch bank accounts.
- For the EU corporate market only checks with IBANs are currently functionally available.
- Sandbox and production environments are not functionally identical.
- Use a TLS certificate for production access.
- This API is available to corporate customers who specifically want to execute a
  high number of foreign exchange transactions in small amounts.
- Usage of this API is prohibited for Consumer to Consumer (C2C) use.
- If you are a software vendor developing an application for a company other than
  your own, please contact the Tikkie Sales Team for additional support.
- API Key and App Token must be included in the header of each request.
- To use this API in a production environment, you must have a Tikkie Business Contract.
- An app token must be created in the Tikkie Business Portal with the Cashback permission
  enabled.
- A TLS certificate of the type Organisation Validation (OV) or Extended Validation
  (EV) is required.
- Use of the APIs is at your own risk.
- For use in a real production environment, other conditions may exist.
- ABN AMRO only accepts Qualified Website Authentication Certificates (QWAC) from
  Qualified Trusted Service Providers (QSTPs).
- This API is exclusively available for Business-to-Business (B2B) usage.
- This authorization process uses mutual TLS to authenticate the consumer based on
  an x.509 certificate.
- The consumer must send a public key, private key, and certificate chain in the request
  to prove their identity.
errors:
- '429 Too Many Requests: Exceeding request thresholds.'
- '500 Internal Server Error: Triggered by specific currency pairs.'
- '503 Service Unavailable: Service temporarily unable to handle request.'
- 'REQUEST_INVALID: property ''buyCurrency'' with value ''XXX'' does not represent
  a monetary currency'
- 'REJECTED: submitted after quote expiration time'
- 'PENDING_NEW: request a quote status on a regular basis'
- '400: Bad Request. Validation errors or missing data in request.'
- '401: Unauthorized. The presented access token is invalid or expired.'
- '403: Forbidden. The scope of the token is insufficient to access the resource.'
- '404: Not Found. The requested resource does not exist.'
- '429: Too Many Requests. Quota for call exceeded.'
- '500: Internal Server Error. An unexpected internal failure occurred.'
- '503: Service Unavailable. This service is unavailable.'
- 'REQUEST_BODY_INVALID: The request body can not be parsed.'
- 'PATH_PARAMETER_INVALID: Provided path parameter is invalid.'
- 'QUERY_PARAMETER_MISSING: Mandatory query parameter is missing.'
- 'QUERY_PARAMETER_INVALID: Provided query parameter is invalid.'
- 'PROPERTY_MISSING: Mandatory request body property is missing.'
- 'PROPERTY_INVALID: Provided request body property is invalid.'
- 'ERR_1002_003: API Key Header missing.'
- 'ERR_2002_003: The presented access token is invalid or expired.'
- 'ERR_2005_001: Invalid API Key.'
- 'ERR_3002_003: Request authenticated, but the scope of the token is insufficient
  to access the resource.'
- 'RESOURCE_NOT_FOUND: The requested resource does not exist.'
- 'ACCEPT_HEADER_INVALID: The target resource does not have a current representation
  as requested by the ''Accept'' header.'
- 'ERR_7001_001: Quota for call exceeded.'
- 'ERR_7002_001: Spikes in API call.'
- 'INTERNAL_SERVER_ERROR: An unexpected internal failure occurred.'
- 'SERVICE_UNAVAILABLE: This service is unavailable.'
- 'error=access_denied#: No current accounts are available to authorize or user declined
  authorization.'
- '401 Unauthorized: Recheck OAuth scopes or token expiration'
- '500 Internal Server Error: Check the request format or contact support.'
- 401 Unauthorized
- 500 Internal Server Error
- 'error=access_denied: No current accounts are available to authorize or user declined
  access.'
- 'MESSAGE_RST560_0001: Account number empty or null.'
- 'MESSAGE_RST560_0007: IBAN is invalid.'
- 'MESSAGE_RST560_0010: Account number is too long.'
- 'MESSAGE_BAI560_0077: Next page key is invalid.'
- 'MESSAGE_BAI560_0082: Request contains an input error (activity type is invalid).'
- 'MESSAGE_BAI560_0083: Request contains an input error (status is invalid).'
- 'MESSAGE_BAI560_0084: Request contains a data error (nextPageKey is invalid).'
- 'MESSAGE_RST560_0016: No access to the account. Contact the account holder for details.'
- 'MESSAGE_RST560_0028: Batch transaction ID is empty or null.'
- 'MESSAGE_BAI560_0062: Combination of the batch transaction ID and account number
  is invalid.'
- 'MESSAGE_BAI560_0073: Either invalid filter values provided or maximum number of
  filter values are exceeded.'
- 'MESSAGE_BAI560_0077: Next page key is invalid'
- 'MESSAGE_BAI560_0085: Request contains a data error.'
- 'error=access_denied#: No current accounts are available to authorize or user declined
  access.'
- '400: Bad request/parameter error'
- '401: Unauthorized'
- '403: Access forbidden'
- '404: Not found'
- '500: Internal server error'
- 'REQUEST_LIMIT_EXCEEDED: Throttle API calls or reduce frequency'
- 'QUERY_TIMEOUT: Break down filters or add selectivity'
- 'MESSAGE_RST560_0012: To date is greater than current date.'
- 'MESSAGE_BAI560_0086: Reservation not found.'
- 'MESSAGE_BAI560_0064: No batch transaction details available for this request.'
- '401: Unauthorised'
- '403: Access Forbidden'
- '404: Account number not found'
- '500: Internal Server Error'
- 'INTERNAL_SERVER_ERROR: A technical error has occurred. Please try again later.'
- '400: Bad Request'
- '400 Bad Request: Check the request parameters and body.'
- '401 Unauthorized: Recheck API Key or access token.'
- '403 Forbidden: Ensure you have the correct permissions.'
- 400 Bad Request
- 500 INTERNAL_SERVER_ERROR
- '401 Unauthorized: Access token is invalid or expired.'
- '400 Bad Request: Invalid request parameters.'
- '400: Validation Errors'
- '400: Missing or invalid parameters.'
- 'INTERNAL_SERVER_ERROR: An unknown error occurred.'
- 'INTERNAL_SERVER_ERROR: An unknown error occurred. For more information, contact
  the API Support Team.'
- 'INVALID_ACCOUNT_ID: The provided account id exceeds the maximum length or contains
  spaces.'
- 'NAME_NOT_PROVIDED: The request is missing the name'
- 'INVALID_CORRELATION_ID: A correlation ID is not valid.'
- 400 Bad request/parameter error
- 403 Access Forbidden
- 404 Order not found
- '404: Order not found. Error code: ORDER_NOT_FOUND'
- '412: Order has changed'
- '400 Bad request/parameter error: INVALID_STATE_CHANGE_ERROR'
- 401 Unauthorised
- '404 Order not found. Error code: ORDER_NOT_FOUND'
- 412 Order has changed
- 'INVALID_STATE_CHANGE_ERROR: Cannot change order with state [State], status [Status]
  to state [State]'
- 'SCHEMA_ERROR: Error parsing schema'
- 'REFUND_CURRENCY_ERROR: Refund currency should be the same as order currency'
- 'REFUND_AMOUNT_TOO_HIGH: Refund amount greater than order amount'
- 'ORDER_ALREADY_PARTIALLY_REFUNDED: Tried to fully refund a partially refunded order'
- '403 Forbidden: Ensure all permissions are enabled for your App Token.'
- '401 Unauthorized: Access denied, check your API Key and App Token.'
- 'ACCESS_DENIED: Access denied.'
- '401: Access denied.'
- 'APP_TOKEN_INVALID: appToken is in an invalid format.'
- 'INTERNAL_SERVER_ERROR: Technical error in the service.'
- 'IMS_ERROR: Technical error occurred when reading the database.'
- 'CONNECTION_EXCEPTION: Technical Error with connection.'
- 'ISIN_CODE_INVALID: ISIN code is not alphanumeric or is not of 12 characters length.'
- 'INSTRUMENT_CODE_INVALID: Instrument code is not numeric or is not of 6 digits.'
- 'INSTRUMENT_TYPE_INVALID: Instrument type supplied is not as per the valid values.'
- 'INSTRUMENT_NAME_INVALID: The provided instrument name is invalid.'
- 'INSTRUMENTNAME_IS_BLANK: Instrument name is blank.'
- 'INSTRUMENTNAME_LENGTH_NOT_VALID: The instrument name exceeds the maximum length.'
- 'INSTRUMENT_NAME_TYPE_INVALID: Instrument name and type combination not valid.'
- 'INSTRUMENTNAME_NOT_VALID: Instrument name is incorrect or not valid.'
- 'STATUS_INVALID: The provided status is invalid.'
- 'NEXT_PAGE_KEY_INVALID: Next page key is not numeric.'
- 'SORT_BY_INVALID: "Sort By" indicator is not as per the valid values.'
- 'ERR_1001_001: Malformed or incorrect Authorization header'
- 'ERR_1002_001: Basic authentication header missing'
- 'ERR_1002_002: Access token header missing'
- 'ERR_1002_003: API Key Header missing'
- 'ERR_1003_001: JSON Request: Container Depth exceeded'
- 'ERR_1004_001: Incorrect or missing value for {parameter name}'
- 'ERR_2001_001: Client identifier is either missing or invalid.'
- 'ERR_2002_001: Invalid access token.'
- 'ERR_2003_001: Access token expired.'
- 'ERR_3001_001: Access denied for this IP address.'
- 'ERR_3002_001: Insufficient scope of the token. Token cannot be used for this call.'
- 'ERR_7001_001: Quota for the call has been exceeded.'
- 'ERR_7002_001: Spikes in an API call.'
- 'ERR_9001_001: Service is currently unavailable.'
- '504 - Gateway timeout: Slow backend server or slow API request due to high load.'
- 400 - Bad request or parameter error.
auth_info:
  mentioned_objects:
  - OAuthToken
  - ClientCredentials
  - Oauth_ClientCredentials
  - Oauth_AuthorizationCode
  - PSD2_Oauth
  - Gen_ApiKey
  - API-Key
  - X-App-Token
client:
  base_url: https://api.abnamro.com
  auth:
    type: oauth2
    token_url: https://auth-mtls.abnamro.com/as/token.oauth2
    client_id: As supplied to you by ABN AMRO
    location: header
    header_name: Authorization
  headers:
    Accept: application/json
source_metadata: null
