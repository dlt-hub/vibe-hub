resources:
- name: pages
  endpoint:
    path: /v2/pages/
    method: POST
    data_selector: response
    params: {}
- name: pages
  endpoint:
    path: /pages/
    method: POST
    data_selector: ''
    params: {}
- name: update_pages
  endpoint:
    path: /pages/*/faq/
    method: PATCH
    data_selector: ''
    params: {}
- name: pages
  endpoint:
    path: /v2/pages/*/faq/
    method: PATCH
    data_selector: fields
    params:
      status: draft
- name: pages
  endpoint:
    path: /pages/
    method: POST
    data_selector: response
    params: {}
- name: pages
  endpoint:
    path: /pages/
    method: POST
    data_selector: data
- name: single_page
  endpoint:
    path: /pages/<page_type_slug>/<page_slug>/
    method: GET
    data_selector: data
    params:
      locale: en
      preview: '1'
- name: pages_search
  endpoint:
    path: /v2/pages/search/
    method: GET
    data_selector: data
    params:
      query: ''
      page_type: news
      page: 1
      page_size: 10
- name: content_artists
  endpoint:
    path: /v2/content/artists/
    method: GET
    data_selector: data
    params:
      locale: en
- name: pages
  endpoint:
    path: /pages/*/
    method: GET
    data_selector: data
    params:
      preview: '1'
      page: '1'
      page_size: '10'
      locale: en
      levels: '2'
- name: pages_by_type
  endpoint:
    path: /pages/<page_type>/
    method: GET
    data_selector: data
    params:
      preview: '1'
      fields.tag: example
      fields.genre: api
      order: title
      page: '1'
      page_size: '10'
      locale: en
      levels: '2'
- name: create_collection_item
  endpoint:
    path: /v2/content/
    method: POST
    data_selector: ''
    params: {}
- name: collection_item
  endpoint:
    path: /v2/content/collection_api_slug/123/
    method: PUT
    data_selector: fields
- name: partial_collection_item
  endpoint:
    path: /v2/content/collection_api_slug/123/
    method: PATCH
    data_selector: fields
- name: collection_item
  endpoint:
    path: /v2/content/collection_api_slug/123/
    method: PATCH
    data_selector: fields
    params: {}
- name: posts
  endpoint:
    path: /v2/posts/
    method: POST
    data_selector: post
    params: {}
- name: collection_item
  endpoint:
    path: /v2/content/collection_api_slug/123/
    method: PATCH
    data_selector: fields
    params: {}
- name: delete_collection_item
  endpoint:
    path: /v2/content/collection_api_slug/123/
    method: DELETE
    data_selector: ''
    params: {}
- name: retrieve_collection
  endpoint:
    path: /v2/content/artists/
    method: GET
    data_selector: data.artists
    params:
      preview: '1'
      fields.genre: Rock
      order: name
      page: '1'
      page_size: '10'
      locale: en
      levels: '2'
- name: update_blog_post
  endpoint:
    path: /v2/posts/this-is-a-blog-post/
    method: PATCH
    data_selector: null
    params: {}
- name: delete_blog_post
  endpoint:
    path: /v2/posts/this-is-a-blog-post/
    method: DELETE
    data_selector: null
    params: {}
- name: posts
  endpoint:
    path: /posts/
    method: GET
    data_selector: data
    params:
      page: '1'
      page_size: '10'
      exclude_body: 'false'
      author_slug: test-api
      category_slug: test-category
      tag_slug: test-tag
- name: posts
  endpoint:
    path: /posts/
    method: GET
    data_selector: data
    params:
      page: 1
      page_size: 10
- name: post
  endpoint:
    path: /posts/<slug>/
    method: GET
    data_selector: data
    params: {}
- name: posts
  endpoint:
    path: /posts/search/
    method: GET
    data_selector: data
    params:
      page: 1
      page_size: 10
- name: authors
  endpoint:
    path: /authors/
    method: GET
    data_selector: data
    params:
      include: recent_posts
- name: categories
  endpoint:
    path: /categories/
    method: GET
    data_selector: data
    params:
      include: recent_posts
- name: category_detail
  endpoint:
    path: /categories/{slug}/
    method: GET
    data_selector: data
    params:
      include: recent_posts
- name: author_detail
  endpoint:
    path: /authors/{slug}/
    method: GET
    data_selector: data
    params:
      include: recent_posts
- name: tags
  endpoint:
    path: /tags/
    method: GET
    data_selector: data
    params:
      include: recent_posts
- name: tag
  endpoint:
    path: /tags/{slug}/
    method: GET
    data_selector: data
    params:
      include: recent_posts
- name: rss_feed
  endpoint:
    path: /feeds/rss/
    method: GET
    data_selector: data
- name: atom_feed
  endpoint:
    path: /feeds/atom/
    method: GET
    data_selector: data
- name: sitemap
  endpoint:
    path: /feeds/sitemap/
    method: GET
    data_selector: data
- name: content
  endpoint:
    path: /v2/content
    method: GET
    data_selector: data
    params: {}
- name: content
  endpoint:
    path: /v2/content/
    method: GET
    data_selector: data
    params: {}
- name: content
  endpoint:
    path: /v1/content/
    method: GET
    data_selector: data
    params: {}
- name: content
  endpoint:
    path: /v2/content/
    method: GET
    data_selector: data
    params: {}
- name: blog_posts
  endpoint:
    path: /v2/posts/
    method: GET
    data_selector: data
- name: pages
  endpoint:
    path: /v2/pages/
    method: GET
    data_selector: data
- name: pages
  endpoint:
    path: /pages
    method: GET
    data_selector: data
- name: posts
  endpoint:
    path: /posts
    method: GET
    data_selector: data
- name: blog
  endpoint:
    path: /api/v1/blog/
    method: GET
- name: page
  endpoint:
    path: /api/v1/page/
    method: GET
- name: Pages
  endpoint:
    path: /pages
    method: GET
    data_selector: data
- name: Blogs
  endpoint:
    path: /blogs
    method: GET
    data_selector: data
- name: pages
  endpoint:
    path: /pages
    method: GET
    data_selector: data
    params: {}
- name: posts
  endpoint:
    path: /posts
    method: GET
    data_selector: data
    params: {}
- name: pages
  endpoint:
    path: /api/v2/pages/
    method: GET
    data_selector: data
- name: posts
  endpoint:
    path: /api/v2/posts/
    method: GET
    data_selector: data
- name: pages
  endpoint:
    path: /v2/pages/
    method: GET
    data_selector: data
    params: {}
- name: customer_case_study
  endpoint:
    path: /v2/pages/
    method: GET
    data_selector: data.fields
- name: customer_case_study
  endpoint:
    path: /api/v1/pages/
    method: GET
    data_selector: data.fields
- name: content
  endpoint:
    path: /v2/content/
    method: GET
    data_selector: data
    params: {}
- name: posts
  endpoint:
    path: /v2/posts/
    method: GET
    data_selector: data
- name: pages
  endpoint:
    path: /v2/pages/
    method: GET
    data_selector: data
    params: {}
- name: collections
  endpoint:
    path: /v2/collections/
    method: GET
    data_selector: data
    params: {}
- name: page
  endpoint:
    path: /pages
    method: GET
    data_selector: data
- name: customer_case_study
  endpoint:
    path: /v2/pages/
    method: GET
    data_selector: data
    params: {}
- name: content
  endpoint:
    path: /content/
    method: GET
    data_selector: data
- name: page
  endpoint:
    path: /page/retrieve/*
    method: GET
    data_selector: data
- name: content
  endpoint:
    path: /v2/content/
    method: GET
    data_selector: data
- name: posts
  endpoint:
    path: /v2/posts/
    method: GET
    data_selector: data
- name: content
  endpoint:
    path: /v2/content/
    method: GET
    data_selector: data
- name: page
  endpoint:
    path: /v2/page/
    method: GET
    data_selector: data
- name: customer_case_study
  endpoint:
    path: /v2/page/list/
    method: GET
    data_selector: data
- name: customer_case_study
  endpoint:
    path: /v2/pages/
    method: GET
    data_selector: data
- name: customer_case_study
  endpoint:
    path: /v2/pages/
    method: GET
    data_selector: data
    params: {}
- name: pages
  endpoint:
    path: /pages/
    method: GET
    data_selector: data
- name: customer_case_study
  endpoint:
    path: /page/list/customer_case_study
    method: GET
    data_selector: data
    params: {}
- name: customer_page
  endpoint:
    path: /page/retrieve/customer_case_study
    method: GET
    data_selector: data
    params: {}
- name: posts
  endpoint:
    path: /v2/posts/
    method: GET
    data_selector: data
    params: {}
- name: post
  endpoint:
    path: /v2/posts/:slug/
    method: GET
    data_selector: data
    params: {}
- name: content
  endpoint:
    path: /content
    method: GET
    data_selector: data
    params: {}
- name: rss_feed
  endpoint:
    path: /feeds/rss/
    method: GET
- name: atom_feed
  endpoint:
    path: /feeds/atom/
    method: GET
- name: sitemap
  endpoint:
    path: /feeds/sitemap/
    method: GET
- name: pages
  endpoint:
    path: /pages/
    method: GET
- name: collections
  endpoint:
    path: /content/
    method: GET
- name: blog_posts
  endpoint:
    path: /posts/
    method: GET
- name: rss_feed
  endpoint:
    path: /feeds/rss/
    method: GET
- name: atom_feed
  endpoint:
    path: /feeds/atom/
    method: GET
- name: sitemap
  endpoint:
    path: /feeds/sitemap/
    method: GET
- name: pages
  endpoint:
    path: /pages/
    method: GET
- name: collections
  endpoint:
    path: /content/
    method: GET
- name: blog_posts
  endpoint:
    path: /posts/
    method: GET
- name: authors
  endpoint:
    path: /authors/
    method: GET
- name: categories
  endpoint:
    path: /categories/
    method: GET
- name: tags
  endpoint:
    path: /tags/
    method: GET
- name: pages
  endpoint:
    path: /pages
    method: GET
    data_selector: data
- name: collections
  endpoint:
    path: /collections
    method: GET
    data_selector: data
- name: blog_posts
  endpoint:
    path: /blog/posts
    method: GET
    data_selector: data
- name: pages
  endpoint:
    path: /pages/
    method: GET
    data_selector: data
- name: collections
  endpoint:
    path: /content/
    method: GET
    data_selector: data
- name: blog_posts
  endpoint:
    path: /posts/
    method: GET
    data_selector: data
- name: blog_metadata
  endpoint:
    path: /authors/
    method: GET
    data_selector: data
- name: pages
  endpoint:
    path: /pages/
    method: GET
    data_selector: data.fields
    params: {}
- name: single_pages
  endpoint:
    path: /pages/*/
    method: GET
    data_selector: data.fields
    params: {}
- name: page_type_pages
  endpoint:
    path: /pages/{page_type}/
    method: GET
    data_selector: data.fields
    params: {}
- name: collections_write
  endpoint:
    path: /content/
    method: POST
- name: collections_read
  endpoint:
    path: /content/{collection_key}/
    method: GET
- name: blog_posts_write
  endpoint:
    path: /posts/
    method: POST
- name: blog_posts_read
  endpoint:
    path: /posts/
    method: GET
- name: blog_metadata
  endpoint:
    path: /authors/
    method: GET
- name: webhooks_events
  endpoint:
    path: /page-published
    method: POST
- name: feeds_utilities
  endpoint:
    path: /feeds/rss/
    method: GET
- name: images_info
  endpoint:
    path: /images/
    method: GET
- name: collections
  endpoint:
    path: /content/
    method: POST
    data_selector: data
- name: blog_posts
  endpoint:
    path: /posts/
    method: GET
    data_selector: data
- name: blog_metadata
  endpoint:
    path: /authors/
    method: GET
    data_selector: data
- name: webhooks
  endpoint:
    path: /page-published
    method: POST
    data_selector: data
- name: feeds
  endpoint:
    path: /feeds/rss/
    method: GET
    data_selector: data
- name: pages_write
  endpoint:
    path: /pages/
    method: POST
- name: pages_read_single
  endpoint:
    path: /pages/{page_type}/{page_slug}/
    method: GET
- name: collections_write
  endpoint:
    path: /content/
    method: POST
- name: collections_read
  endpoint:
    path: /content/{collection_key}/
    method: GET
- name: blog_posts_write
  endpoint:
    path: /posts/
    method: POST
- name: blog_posts_read
  endpoint:
    path: /posts/
    method: GET
- name: blog_metadata
  endpoint:
    path: /authors/
    method: GET
- name: webhooks_events
  endpoint:
    path: /webhooks/
    method: POST
- name: feeds_utilities
  endpoint:
    path: /feeds/rss/
    method: GET
- name: webhook_events
  endpoint:
    path: /webhooks/events
    method: POST
    data_selector: payload
    params: {}
- name: rss_feed
  endpoint:
    path: /feeds/rss/
    method: GET
    data_selector: feed
    params: {}
- name: atom_feed
  endpoint:
    path: /feeds/atom/
    method: GET
    data_selector: feed
    params: {}
- name: sitemap
  endpoint:
    path: /feeds/sitemap/
    method: GET
    data_selector: sitemap
    params: {}
- name: pages
  endpoint:
    path: /pages/
    method: GET
- name: collections
  endpoint:
    path: /content/
    method: GET
- name: blog_posts
  endpoint:
    path: /posts/
    method: GET
- name: blog_metadata
  endpoint:
    path: /authors/
    method: GET
- name: update_page
  endpoint:
    path: /pages/{page_type}/{page_slug}/
    method: PATCH
    data_selector: data
    params: {}
- name: get_pages
  endpoint:
    path: /pages/{page_type}/
    method: GET
    data_selector: data
    params: {}
- name: create_page
  endpoint:
    path: /pages/
    method: POST
    data_selector: status
    params:
      locale: string
- name: update_page
  endpoint:
    path: /pages/{page_type}/{page_slug}/
    method: PATCH
    data_selector: status
    params: {}
- name: full_update_page
  endpoint:
    path: /pages/{page_type}/{page_slug}/
    method: PUT
    data_selector: status
    params: {}
- name: blog_posts
  endpoint:
    path: /posts/
    method: GET
    data_selector: data
- name: blog_post_slug
  endpoint:
    path: /posts/{slug}/
    method: GET
    data_selector: data
- name: authors
  endpoint:
    path: /authors/
    method: GET
    data_selector: data
- name: author_slug
  endpoint:
    path: /authors/{slug}/
    method: GET
    data_selector: data
- name: categories
  endpoint:
    path: /categories/
    method: GET
    data_selector: data
- name: category_slug
  endpoint:
    path: /categories/{slug}/
    method: GET
    data_selector: data
- name: tags
  endpoint:
    path: /tags/
    method: GET
    data_selector: data
- name: tag_slug
  endpoint:
    path: /tags/{slug}/
    method: GET
    data_selector: data
- name: posts_search
  endpoint:
    path: /posts/search/
    method: GET
    data_selector: data
- name: rss_feed
  endpoint:
    path: /feeds/rss/
    method: GET
    data_selector: data
- name: atom_feed
  endpoint:
    path: /feeds/atom/
    method: GET
    data_selector: data
- name: sitemap
  endpoint:
    path: /feeds/sitemap/
    method: GET
    data_selector: data
- name: webhook_events
  endpoint:
    path: /webhooks/
    method: POST
    data_selector: data
- name: search_pages
  endpoint:
    path: /pages/search/
    method: GET
    data_selector: data
    params:
      query: string
      page_type: string
      locale: string
      levels: integer
      page: integer
      page_size: integer
      limit: integer
      offset: integer
- name: pages
  endpoint:
    path: /pages/{page_type}/
    method: GET
    data_selector: data
    params:
      preview: 0
      page: 1
      page_size: 10
      locale: en
      levels: 2
      alt_media_text: 0
      auth_token: your_api_token
- name: single_page
  endpoint:
    path: /pages/{page_type}/{page_slug}/
    method: GET
    data_selector: data
    params:
      preview: 0
      locale: en
      levels: 2
      alt_media_text: 0
      auth_token: your_api_token
- name: create_collection_item
  endpoint:
    path: /content/
    method: POST
    data_selector: fields
- name: update_collection_item
  endpoint:
    path: /content/{collection_key}/{item_id}/
    method: PUT
    data_selector: fields
- name: patch_collection_item
  endpoint:
    path: /content/{collection_key}/{item_id}/
    method: PATCH
    data_selector: fields
- name: delete_collection_item
  endpoint:
    path: /content/{collection_key}/{item_id}/
    method: DELETE
- name: collection_item_update
  endpoint:
    path: /content/{collection_key}/{item_id}/
    method: PUT
    data_selector: fields
- name: collection_item_partial_update
  endpoint:
    path: /content/{collection_key}/{item_id}/
    method: PATCH
    data_selector: fields
- name: collection_item_delete
  endpoint:
    path: /content/{collection_key}/{item_id}/
    method: DELETE
- name: collection_items_read
  endpoint:
    path: /content/{collection_key}/
    method: GET
- name: blog_posts_write
  endpoint:
    path: /posts/
    method: POST
- name: blog_posts_partial_update
  endpoint:
    path: /posts/{slug}/
    method: PATCH
- name: blog_posts_delete
  endpoint:
    path: /posts/{slug}/
    method: DELETE
- name: blog_posts_read
  endpoint:
    path: /posts/
    method: GET
- name: retrieve_collection
  endpoint:
    path: /content/{collection_key}/
    method: GET
- name: pages_read
  endpoint:
    path: /pages/{page_type}/
    method: GET
- name: collections
  endpoint:
    path: /v2/content/{collection_key}/
    method: GET
    data_selector: data
    params:
      auth_token: your_api_token
      keys: artists,albums
      preview: 1
      order: string
      page: 2
      page_size: 5
      limit: 5
      offset: 10
      locale: en
      levels: 2
      alt_media_text: 0
- name: pages
  endpoint:
    path: /pages/
    method: GET
- name: collections
  endpoint:
    path: /content/
    method: GET
- name: blog_posts
  endpoint:
    path: /posts/
    method: GET
- name: post_all
  endpoint:
    path: /v2/post-all
    method: GET
    data_selector: data
- name: collectionitem_published
  endpoint:
    path: /v2/collectionitem-published
    method: GET
    data_selector: data
- name: collectionitem_draft
  endpoint:
    path: /v2/collectionitem-draft
    method: GET
    data_selector: data
- name: collectionitem_unpublished
  endpoint:
    path: /v2/collectionitem-unpublished
    method: GET
    data_selector: data
- name: collectionitem_delete
  endpoint:
    path: /v2/collectionitem-delete
    method: GET
    data_selector: data
- name: collectionitem_all
  endpoint:
    path: /v2/collectionitem-all
    method: GET
    data_selector: data
- name: media_videouploaded
  endpoint:
    path: /v2/media-videouploaded
    method: GET
    data_selector: data
- name: feeds_rss
  endpoint:
    path: /feeds/rss/
    method: GET
- name: feeds_atom
  endpoint:
    path: /feeds/atom/
    method: GET
- name: feeds_sitemap
  endpoint:
    path: /feeds/sitemap/
    method: GET
- name: authors
  endpoint:
    path: /authors/
    method: GET
    data_selector: data
    params: {}
- name: categories
  endpoint:
    path: /categories/
    method: GET
    data_selector: data
    params: {}
- name: tags
  endpoint:
    path: /tags/
    method: GET
    data_selector: data
    params: {}
- name: posts_search
  endpoint:
    path: /posts/search/
    method: GET
    data_selector: data
    params: {}
- name: page_published
  endpoint:
    path: /v2/page-published
    method: POST
    data_selector: data
    params: {}
- name: page_draft
  endpoint:
    path: /v2/page-draft
    method: POST
    data_selector: data
    params: {}
- name: page_unpublished
  endpoint:
    path: /v2/page-unpublished
    method: POST
    data_selector: data
    params: {}
- name: page_delete
  endpoint:
    path: /v2/page-delete
    method: POST
    data_selector: data
    params: {}
- name: page_all
  endpoint:
    path: /v2/page-all
    method: POST
    data_selector: data
    params: {}
- name: post_published
  endpoint:
    path: /v2/post-published
    method: POST
    data_selector: data
    params: {}
- name: post_draft
  endpoint:
    path: /v2/post-draft
    method: POST
    data_selector: data
    params: {}
- name: post_delete
  endpoint:
    path: /v2/post-delete
    method: POST
    data_selector: data
    params: {}
- name: rss_feed
  endpoint:
    path: /feeds/rss/
    method: GET
    data_selector: application/xml
- name: atom_feed
  endpoint:
    path: /feeds/atom/
    method: GET
    data_selector: application/xml
- name: sitemap
  endpoint:
    path: /feeds/sitemap/
    method: GET
    data_selector: application/xml
- name: pages
  endpoint:
    path: /pages/
    method: GET
- name: collections
  endpoint:
    path: /content/
    method: GET
- name: blog_posts
  endpoint:
    path: /posts/
    method: GET
- name: authors
  endpoint:
    path: /authors/
    method: GET
- name: categories
  endpoint:
    path: /categories/
    method: GET
- name: tags
  endpoint:
    path: /tags/
    method: GET
- name: rss_feed
  endpoint:
    path: /feeds/rss/
    method: GET
- name: atom_feed
  endpoint:
    path: /feeds/atom/
    method: GET
- name: sitemap
  endpoint:
    path: /feeds/sitemap/
    method: GET
- name: pages
  endpoint:
    path: /pages/
    method: GET
- name: collections
  endpoint:
    path: /content/
    method: GET
- name: blog_posts
  endpoint:
    path: /posts/
    method: GET
- name: authors
  endpoint:
    path: /authors/
    method: GET
- name: categories
  endpoint:
    path: /categories/
    method: GET
- name: tags
  endpoint:
    path: /tags/
    method: GET
- name: pages
  endpoint:
    path: /v2/pages/
    method: POST
    data_selector: response
    params: {}
- name: pages
  endpoint:
    path: /v2/pages/
    method: POST
    data_selector: fields
- name: update_page
  endpoint:
    path: /v2/pages/*/faq/
    method: PATCH
    data_selector: fields
- name: pages
  endpoint:
    path: /pages/
    method: POST
    data_selector: response
    params: {}
- name: pages
  endpoint:
    path: /pages/
    method: POST
    data_selector: fields
    params: {}
- name: update_page
  endpoint:
    path: /pages/*/faq/
    method: PATCH
    data_selector: fields
    params: {}
- name: pages
  endpoint:
    path: /pages/
    method: POST
    data_selector: data
- name: single_page
  endpoint:
    path: /pages/<page_type_slug>/<page_slug>/
    method: GET
    data_selector: data
- name: pages
  endpoint:
    path: /pages/*/
    method: GET
    data_selector: data
    params:
      preview: '1'
      page: '1'
      page_size: '10'
      locale: en
      levels: '2'
- name: pages_by_type
  endpoint:
    path: /pages/<page_type>/
    method: GET
    data_selector: data
    params:
      preview: '1'
      order: title
      page: '1'
      page_size: '10'
      locale: en
      levels: '2'
- name: collection_item
  endpoint:
    path: /v2/content/
    method: POST
    data_selector: fields
- name: pages_search
  endpoint:
    path: /v2/pages/search/
    method: GET
    data_selector: data
    params:
      query: search term
      page_type: news
      page: 1
      page_size: 10
- name: collection_item
  endpoint:
    path: /v2/content/collection_api_slug/123/
    method: PUT
    data_selector: fields
- name: collection_item_partial_update
  endpoint:
    path: /v2/content/collection_api_slug/123/
    method: PATCH
    data_selector: fields
- name: collection_item
  endpoint:
    path: /collection_api_slug/123/
    method: PATCH
    data_selector: fields
- name: collection_item
  endpoint:
    path: /v2/content/collection_api_slug/{item_id}/
    method: PATCH
    data_selector: data
    params: {}
- name: delete_collection_item
  endpoint:
    path: /v2/content/collection_api_slug/{item_id}/
    method: DELETE
    data_selector: data
    params: {}
- name: retrieve_collection
  endpoint:
    path: /v2/content/{collection_slug}/
    method: GET
    data_selector: data
    params:
      auth_token: your_api_token
- name: posts
  endpoint:
    path: /v2/posts/
    method: POST
    data_selector: posts
- name: posts
  endpoint:
    path: /v2/posts/this-is-a-blog-post/
    method: PATCH
    data_selector: ''
    params: {}
- name: delete_post
  endpoint:
    path: /v2/posts/this-is-a-blog-post/
    method: DELETE
    data_selector: ''
    params: {}
- name: posts
  endpoint:
    path: /posts/
    method: GET
    data_selector: data
    params:
      page: 1
      page_size: 10
      exclude_body: false
- name: posts
  endpoint:
    path: /posts/search/
    method: GET
    data_selector: data
    params:
      page: 1
      page_size: 10
- name: authors
  endpoint:
    path: /authors/
    method: GET
    data_selector: data
    params:
      include: recent_posts
- name: categories
  endpoint:
    path: /categories/
    method: GET
    data_selector: data
    params:
      include: recent_posts
- name: posts
  endpoint:
    path: /posts
    method: GET
    data_selector: data
    params:
      page: 1
      page_size: 10
      preview: 1
      exclude_body: false
      limit: 10
      offset: 0
- name: post
  endpoint:
    path: /posts/<slug>
    method: GET
    data_selector: data
    params: {}
- name: tags
  endpoint:
    path: /tags/
    method: GET
    data_selector: data
    params:
      include: recent_posts
- name: tag
  endpoint:
    path: /tags/{slug}/
    method: GET
    data_selector: data
    params:
      include: recent_posts
- name: rss_feed
  endpoint:
    path: /feeds/rss/
    method: GET
    data_selector: data
- name: atom_feed
  endpoint:
    path: /feeds/atom/
    method: GET
    data_selector: data
- name: sitemap_feed
  endpoint:
    path: /feeds/sitemap/
    method: GET
    data_selector: data
- name: create_page
  endpoint:
    path: /pages/
    method: POST
- name: update_page
  endpoint:
    path: /pages/{page_type}/{page_slug}/
    method: PATCH
- name: update_page_full
  endpoint:
    path: /pages/{page_type}/{page_slug}/
    method: PUT
- name: multiple_pages
  endpoint:
    path: /pages/{page_type}/
    method: GET
- name: single_page
  endpoint:
    path: /pages/{page_type}/{page_slug}/
    method: GET
- name: search_pages
  endpoint:
    path: /pages/search/
    method: GET
- name: create_collection_item
  endpoint:
    path: /content/
    method: POST
- name: update_collection_item_full
  endpoint:
    path: /content/{collection_key}/{item_id}/
    method: PUT
- name: update_collection_item_partial
  endpoint:
    path: /content/{collection_key}/{item_id}/
    method: PATCH
- name: delete_collection_item
  endpoint:
    path: /content/{collection_key}/{item_id}/
    method: DELETE
- name: collection_items
  endpoint:
    path: /content/{collection_key}/
    method: GET
    data_selector: items
    params: {}
- name: page_published
  endpoint:
    path: /webhooks-events/webhookpagepublished
    method: POST
- name: page_draft_saved
  endpoint:
    path: /webhooks-events/webhookpagedraft
    method: POST
- name: page_unpublished
  endpoint:
    path: /webhooks-events/webhookpageunpublished
    method: POST
- name: page_deleted
  endpoint:
    path: /webhooks-events/webhookpagedelete
    method: POST
- name: page_any_activity
  endpoint:
    path: /webhooks-events/webhookpageall
    method: POST
- name: blog_post_published
  endpoint:
    path: /webhooks-events/webhookpostpublished
    method: POST
- name: blog_post_draft_saved
  endpoint:
    path: /webhooks-events/webhookpostdraft
    method: POST
- name: blog_post_deleted
  endpoint:
    path: /webhooks-events/webhookpostdelete
    method: POST
- name: blog_post_any_activity
  endpoint:
    path: /webhooks-events/webhookpostall
    method: POST
- name: collection_item_published
  endpoint:
    path: /webhooks-events/webhookcollectionitempublished
    method: POST
- name: collection_item_draft_saved
  endpoint:
    path: /webhooks-events/webhookcollectionitemdraft
    method: POST
- name: collection_item_unpublished
  endpoint:
    path: /webhooks-events/webhookcollectionitemunpublished
    method: POST
- name: collection_item_deleted
  endpoint:
    path: /webhooks-events/webhookcollectionitemdelete
    method: POST
- name: collection_item_any_activity
  endpoint:
    path: /webhooks-events/webhookcollectionitemall
    method: POST
- name: media_video_uploaded
  endpoint:
    path: /webhooks-events/webhookmediavideouploaded
    method: POST
- name: rss_feed
  endpoint:
    path: /feeds/rss/
    method: GET
    data_selector: feed
    params: {}
- name: atom_feed
  endpoint:
    path: /feeds/atom/
    method: GET
    data_selector: feed
    params: {}
- name: sitemap
  endpoint:
    path: /feeds/sitemap/
    method: GET
    data_selector: sitemap
    params: {}
notes:
- It is not possible to create new Single Pages or new Page Types via the write API.
- You must include every field for a Page in the payload when creating it.
- You can update existing Pages by using a PATCH request to /v2/pages/*/your-page-slug/
  endpoint.
- It's not currently possible to update the page title or slug via PATCH.
- To preview changes, append `?preview=1` to the URL.
- Only the direct content of the Pages will be searched -- any references that the
  Page might include will be ignored.
- There is a technical limit of 10MB response size per API request.
- Requests should be HTTP POST requests made to the Butter /v2/content/ API endpoint.
- Requests should be HTTP PUT or PATCH requests made to the specified endpoint.
- Make sure to append a slash to the end of the Collection Item ID in the URL path.
- Requests should be HTTP POST requests made to the specified endpoint.
- Full collection update occurs asynchronously, meaning a successfully deleted content
  may still show up for a short time.
- The API will return HTTP status code 404 if the Collection item doesn't exist.
- Blog posts cannot be scheduled via the write API.
- If a scheduled timestamp or a status of scheduled is passed to the write API via
  PATCH, it will be ignored.
- Requires setup of connected app in ButterCMS
- Requires OAuth2 setup for API access.
- API requires proper OAuth2 setup
- Rate limiting applies to API calls
- API rate limits apply.
- Ensure API key is kept secure.
- API key required for authentication.
- Utilizes OAuth2 for authentication
- Uses API key for authentication
- ButterCMS is a work in progress, meaning that a lot will change in the near future.
- We cannot guarantee that the Website will be up and running 24/7.
- Users can implement their own password policies and multi-factor authentication
  implementations.
- Add your API token as an environment variable
- Run development server with python manage.py runserver
- Add your API token as an environment variable and run development server
- Get started quickly with a fully-functional Java starter project.
- Uses API key for authentication.
- Requires an API token to access data.
- Add your API token as an environment variable.
- Integrates with Angular and Angular.js applications
- Supports dynamic content management with a drag-and-drop interface
- We're a SaaS CMS or CaaS. You simply call our Content API from your app.
- We don't control or host any of your templates.
- Most customers get our Django CMS up and running in less than an hour.
- No database required — we're a SaaS CMS.
- Does not control or host any of your templates.
- Use your ButterCMS API token for authentication.
- Configure the source plugin with your API token in gatsby-config.js.
- A truly zero-maintenance solution
- Most customers get our Java CMS set up in one hour or less
- ButterCMS integrates with any Node.js server and templating engines like Jade, Mustache,
  and React.
- Integrates with Laravel using a straightforward API
- Most customers get ButterCMS set up in less than an hour
- ButterCMS is a SaaS CMS or CaaS. You simply call our Content API from your app.
- No database required! We're a SaaS CMS or CaaS.
- ButterCMS optimizes performance and scalability through a globally cached API.
- Daily automated backups ensure data safety.
- Most customers get our PHP CMS set up in one hour or less.
- ButterCMS is an API-based headless CMS.
- API requires a valid API token for access
- ButterCMS uses a simple API key for authentication.
- Butter's API has unbeatable performance using the Fastly CDN
- Quick setup for integrating into existing tech stack
- Read operations use query parameter for authentication.
- Webhook events are triggered for create, update, publish, unpublish, and delete
  operations across all content types.
- Content is served through a global CDN with 150+ edge locations.
- Authentication for write operations requires header-based authentication.
- Webhook events are delivered as HTTP POST requests with JSON payloads.
- PUT behaves like PATCH for pages — use either method for partial updates.
- Authentication is handled through token-based access; read operations can use a
  query parameter (`auth_token`) while write operations require header-based authentication
  for enhanced security.
- Pages are created as draft by default. You can set status=published to publish immediately.
- Authentication is handled through token-based access; read operations can use a
  query parameter (auth_token) while write operations require header-based authentication
  for enhanced security.
- Authentication is handled through token-based access.
- Read operations can use a query parameter (`auth_token`) while write operations
  require header-based authentication.
- URL must include a trailing slash after the item ID for updates and deletes.
- Asynchronous processing is used for updates and deletes.
- Collections contain completely user-defined content with customizable field schemas.
- Webhook events are sent as HTTP POST requests to configured endpoint URLs with JSON
  payloads.
- Requests should be HTTP POST requests made to https://api.buttercms.com/v2/pages/,
  with the Content-Type header set to application/json.
- It is not currently possible to update the page title or slug via PATCH.
- If the scheduled timestamp or a status of scheduled is passed to the write API via
  PATCH, these fields will be ignored.
- The pages write API supports adding components as well.
- Components can be created and updated.
- Requests should be HTTP POST requests made to the Butter API endpoint.
- The structure of your request body is conditional on whether you have any configured
  locales.
- Supports pagination through page and page_size parameters.
- Technical limit of 10MB response size per API request.
- 'Make sure to append a slash to the end of the Collection Item ID in the URL path:
  /v2/content/collection_key/123/'
- The API will return HTTP status code 202 for a validated POST request.
- Posts are validated prior to returning the API response but may fail after returning
  a 202 response.
- The API requires an auth token passed in the query string for authentication.
- Supports pagination and filtering.
- When using the posts endpoint, if preview=1 is not set, scheduled posts will not
  be returned.
- API key required for authentication
errors:
- HTTP status code 400 if your data does not pass the initial validation stage.
- '400: Bad request, often due to missing a required parameter.'
- '401: No valid API key provided.'
- '404: The requested resource doesn''t exist.'
- '401 Unauthorized: Check your API token'
- '404 Not Found: The requested resource does not exist'
- 'REQUEST_LIMIT_EXCEEDED: Throttle API calls or reduce frequency'
- 'QUERY_TIMEOUT: Break down filters or add selectivity'
- '401 Unauthorized: Recheck API key or token expiration'
- '400 Bad Request: Returned if your data does not pass the initial validation stage.'
- '400: Missing field, missing required field, or invalid remote URL.'
- '400: Bad request if data does not pass validation.'
- '204 No content: Successful DELETE request.'
- '404 Not Found: Collection item doesn''t exist.'
- '401 Unauthorized: Recheck OAuth scopes or token expiration'
- '401 Unauthorized: Check your API key and ensure it has the correct permissions.'
- '404 Not Found: Verify the endpoint and parameters.'
- '401 Unauthorized: Check your credentials'
- '404 Not Found: Ensure the endpoint is correct'
- '429 Too Many Requests: Rate limit exceeded'
- '400 Bad Request: Check your request parameters.'
- '401 Unauthorized: Verify API key.'
- '429 Too Many Requests: Rate limit exceeded.'
- '403 Forbidden: Check API key validity.'
- '404 Not Found: The requested resource does not exist.'
- '401 Unauthorized: Check API key validity'
- '401 Unauthorized: Recheck API key or permissions.'
- '401 Unauthorized: Check your API key.'
- '404 Not Found: Resource does not exist.'
- '401 Unauthorized: Recheck API key or token expiration.'
- '401 Unauthorized: Check your API token.'
- '404 Not Found: Ensure the endpoint is correct.'
- '401 Unauthorized: Check your API key'
- '404 Not Found: Verify the endpoint path'
- '400 Bad Request: Check your request parameters'
- '401 Unauthorized: Verify your API key'
- '404 Not Found: Ensure endpoint exists'
- '404 Not Found: Verify endpoint path.'
- '401 Unauthorized: Invalid API token'
- '404 Not Found: Requested resource does not exist'
- '401 Unauthorized: Check API key and permissions'
- '404 Not Found: Ensure endpoint is correct'
- '400: Bad Request'
- '401: Unauthorized'
- '403: Forbidden'
- '401 Unauthorized: Recheck API token'
- '404 Not Found: Check page type or slug'
- '400: Bad Request - Check your request body and parameters.'
- '401: Unauthorized - Ensure your token is valid.'
- '403: Forbidden - You do not have permission to access this resource.'
- '202: Operation accepted for async processing'
- '400: Bad request'
- '404: Not found'
- '404: Not Found'
- 404 Not Found
- '400: Validation error, missing a required field or invalid URL.'
- '400: If your data does not pass the initial validation stage.'
- '401 Unauthorized: Recheck API key validity'
- '404: Collection item doesn''t exist.'
- '204: No content for successful DELETE request.'
- '400 Bad Request: Data does not pass validation stage.'
- '401 Unauthorized: Invalid auth token'
- '404 Not Found: Check the slug for the post.'
- '401 Unauthorized: Recheck API token.'
auth_info:
  mentioned_objects:
  - OAuth2
  - AccessToken
client:
  base_url: https://api.buttercms.com
  auth:
    type: apikey
    location: query
    header_name: auth_token
source_metadata: null
