resources:
- name: events_device
  endpoint:
    path: /sites/{siteId}/events/device/{deviceName}
    method: GET
- name: events_success_device
  endpoint:
    path: /sites/{siteId}/events/device/{deviceName}/success
    method: GET
- name: events_info_device
  endpoint:
    path: /sites/{siteId}/events/device/{deviceName}/info
    method: GET
- name: events_warning_device
  endpoint:
    path: /sites/{siteId}/events/device/{deviceName}/warning
    method: GET
- name: events_error_device
  endpoint:
    path: /sites/{siteId}/events/device/{deviceName}/error
    method: GET
- name: events_critical_device
  endpoint:
    path: /sites/{siteId}/events/device/{deviceName}/critical
    method: GET
- name: events_site
  endpoint:
    path: /sites/{siteId}/events
    method: GET
- name: events_success_site
  endpoint:
    path: /sites/{siteId}/events/success
    method: GET
- name: events_info_site
  endpoint:
    path: /sites/{siteId}/events/info
    method: GET
- name: events_warning_site
  endpoint:
    path: /sites/{siteId}/events/warning
    method: GET
- name: events_error_site
  endpoint:
    path: /sites/{siteId}/events/error
    method: GET
- name: events_critical_site
  endpoint:
    path: /sites/{siteId}/events/critical
    method: GET
- name: event_monitors
  endpoint:
    path: /sites/{siteId}/devices/{deviceName}/monitors
    method: GET
    data_selector: monitors
- name: suppress_once
  endpoint:
    path: /sites/{siteId}/devices/{deviceName}/suppress/once
    method: PUT
- name: suppress_always
  endpoint:
    path: /sites/{siteId}/devices/{deviceName}/suppress/always
    method: PUT
- name: suppress_until
  endpoint:
    path: /sites/{siteId}/devices/{deviceName}/suppress/until
    method: PUT
- name: unsuppress
  endpoint:
    path: /sites/{siteId}/devices/{deviceName}/suppress/none
    method: PUT
- name: last_status
  endpoint:
    path: /sites/{siteId}/devices/{deviceName}/laststatus
    method: GET
    data_selector: lastStatus
- name: export_configuration
  endpoint:
    path: /configuration/{siteId}/export
    method: POST
- name: get_site_groups
  endpoint:
    path: /sites/groups
    method: GET
- name: add_site_group
  endpoint:
    path: /sites/groups
    method: POST
- name: get_sub_groups
  endpoint:
    path: /sites/groups/{groupName}
    method: GET
- name: remove_site_group
  endpoint:
    path: /sites/groups/{groupName}
    method: DELETE
- name: get_sites_in_group
  endpoint:
    path: /sites/groups/{groupName}/sites
    method: GET
- name: rename_group
  endpoint:
    path: /sites/groups/{groupName}/rename
    method: PUT
- name: resume_group
  endpoint:
    path: /sites/groups/{groupName}/resume
    method: PUT
- name: pause_group
  endpoint:
    path: /sites/groups/{groupName}/pause
    method: PUT
- name: get_all_sites
  endpoint:
    path: /sites/status
    method: GET
- name: get_site_details
  endpoint:
    path: /sites/{siteId}
    method: GET
- name: remove_site
  endpoint:
    path: /sites/{siteId}
    method: DELETE
- name: get_site_by_name
  endpoint:
    path: /sites/{siteName}
    method: GET
- name: move_site
  endpoint:
    path: /sites/{siteId}/move
    method: PUT
- name: resume_site
  endpoint:
    path: /sites/{siteId}/resume
    method: PUT
- name: pause_site
  endpoint:
    path: /sites/{siteId}/pause
    method: PUT
- name: get_paused_sites
  endpoint:
    path: /sites/paused
    method: GET
- name: add_syslog
  endpoint:
    path: /syslog
    method: POST
- name: PagerDuty Notifications
  endpoint:
    path: /integrations/pagerduty-integration/
    method: POST
- name: news
  endpoint:
    path: /news/
    method: GET
    data_selector: articles
    params: {}
- name: change_log
  endpoint:
    path: /change-log/
    method: GET
    data_selector: changes
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
notes:
- Enable single sign-on (SSO) for your FrameFlow installation by integrating with
  Azure Active Directory.
- For additional security, we recommend that all FrameFlow users enable two-factor
  authentication.
- FrameFlow uses agentless authentication profiles.
- FrameFlow can lose the port number it is configured to use if another program grabs
  it first before FrameFlow starts up.
- If you want to put FrameFlow back on the original port you'll need to find which
  program current has the port reserved.
- Recommended to use the 'Events API v2' integration.
- Set notification profile's action with a State Change trigger.
- Previously, you would use a webhook connector to integrate MS Teams with FrameFlow.
- Microsoft plans to remove support for this method near the end of 2025 in favor
  of using a workflow.
- Users who are currently employing webhooks to integrate FrameFlow with Teams should
  switch to the method outlined here as soon as possible for continued support.
- Once a FrameFlow app has been created and the Slack Token is saved in FrameFlow's
  Integration Settings, you can create a dashboard panel to display Slack chat feeds
  from any of the channels that the FrameFlow app is a member of.
- FrameFlow can only post notifications to channels that are active (not archived),
  and to which the FrameFlow bot has been invited.
- Uses OAuth2 with refresh token â€” requires setup of connected app in api
- Some objects like Contact may return nulls in deeply nested fields
- The newsletter goes out once per month, near the start of the month, and contains
  no ads or promotions.
errors:
- 401 Not authenticated/Session timed out
- 'REQUEST_LIMIT_EXCEEDED: Throttle API calls or reduce frequency'
- 'QUERY_TIMEOUT: Break down filters or add selectivity'
- '401 Unauthorized: Recheck OAuth scopes or token expiration'
auth_info:
  mentioned_objects:
  - OauthToken
  - AuthProvider
  - NamedCredential
client:
  base_url: https://www.frameflow.com
  auth:
    type: oauth2
source_metadata: null
