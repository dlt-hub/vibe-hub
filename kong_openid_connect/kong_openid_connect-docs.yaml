resources:
- name: Gateway Services
  endpoint:
    path: /gateway/entities/service/
    method: GET
- name: Routes
  endpoint:
    path: /gateway/entities/route/
    method: GET
- name: Consumers
  endpoint:
    path: /gateway/entities/consumer/
    method: GET
- name: Consumer Groups
  endpoint:
    path: /gateway/entities/consumer-group/
    method: GET
- name: Plugins
  endpoint:
    path: /gateway/entities/plugin/
    method: GET
- name: Certificates
  endpoint:
    path: /gateway/entities/certificate/
    method: GET
- name: CA Certificates
  endpoint:
    path: /gateway/entities/ca-certificate/
    method: GET
- name: Vaults
  endpoint:
    path: /gateway/entities/vault/
    method: GET
- name: scorecard_templates
  endpoint:
    path: /service-catalog/scorecards/templates
    method: GET
    data_selector: templates
- name: create_scorecard
  endpoint:
    path: /service-catalog/scorecards
    method: POST
    data_selector: scorecard
- name: consumer
  endpoint:
    path: /consumers
    method: GET
    data_selector: data
    params: {}
- name: consumer_group
  endpoint:
    path: /consumer_groups
    method: GET
    data_selector: data
    params: {}
- name: Konnect APIs
  endpoint:
    path: /konnect-api/
    method: GET
- name: Kong Admin API
  endpoint:
    path: /admin-api/
    method: GET
- name: Kong Ingress Controller
  endpoint:
    path: /kubernetes-ingress-controller/
    method: GET
- name: Terraform providers for Kong
  endpoint:
    path: /terraform/
    method: GET
- name: mock_servers
  endpoint:
    path: /mock-servers
    method: POST
    data_selector: mock_server
    params: {}
- name: Flights Service
  endpoint:
    path: /flights
    method: GET
- name: Keyboard Shortcuts
  endpoint:
    path: /insomnia/keyboard-shortcuts
    method: GET
- name: allowlist
  endpoint:
    path: /insomnia/allowlist
    method: GET
- name: proxy
  endpoint:
    path: /insomnia/proxy
    method: GET
- name: M_Account
  endpoint:
    path: ''
    method: ''
    data_selector: ''
    params: {}
- name: M_Resource
  endpoint:
    path: ''
    method: ''
    data_selector: ''
    params: {}
- name: M_ResourceGroup
  endpoint:
    path: ''
    method: ''
    data_selector: ''
    params: {}
- name: M_Link
  endpoint:
    path: ''
    method: ''
    data_selector: ''
    params: {}
- name: application_analytics
  endpoint:
    path: /analytics/applications
    method: GET
    data_selector: metrics
    params: {}
- name: portal_analytics
  endpoint:
    path: /analytics/portal
    method: GET
    data_selector: metrics
    params: {}
- name: custom_domains
  endpoint:
    path: /dev-portal/custom-domains/
    method: GET
- name: audit_logs
  endpoint:
    path: /gateway/audit-logs/
    method: GET
- name: Dev Portal
  endpoint:
    path: /dev-portal/
    method: GET
- name: konnect_portal_classic
  endpoint:
    path: /migrate/konnect_portal_classic
    method: POST
    data_selector: resource
    params: {}
- name: apis
  endpoint:
    path: /apis
    method: POST
    data_selector: null
    params: {}
- name: api_versions
  endpoint:
    path: /apis/{apiId}/versions
    method: POST
    data_selector: null
    params: {}
- name: api_documents
  endpoint:
    path: /apis/{apiId}/documents
    method: POST
    data_selector: null
    params: {}
- name: api_implementations
  endpoint:
    path: /apis/{apiId}/implementations
    method: POST
    data_selector: null
    params: {}
- name: api
  endpoint:
    path: /v3/apis
    method: POST
    data_selector: id
- name: document
  endpoint:
    path: /v3/apis/{apiId}/documents
    method: POST
    data_selector: id
- name: version
  endpoint:
    path: /v3/apis/{apiId}/versions
    method: POST
    data_selector: id
- name: implementation
  endpoint:
    path: /v3/apis/{apiId}/implementations
    method: POST
    data_selector: id
- name: publication
  endpoint:
    path: /v3/apis/{apiId}/publications/{portalId}
    method: PUT
    data_selector: ''
- name: Developer self-service and app registration
  endpoint:
    path: /dev-portal/self-service/
    method: GET
- name: Dev Portal developer RBAC
  endpoint:
    path: /dev-portal/developer-rbac/
    method: GET
- name: teams
  endpoint:
    path: /portals/{portalId}/teams
    method: POST
    data_selector: null
    params: {}
- name: developers
  endpoint:
    path: /portals/{portalId}/teams/{teamId}/developers
    method: POST
    data_selector: null
    params: {}
- name: assigned-roles
  endpoint:
    path: /portals/{portalId}/teams/{teamId}/assigned-roles
    method: POST
    data_selector: null
    params: {}
- name: DCR Provider
  endpoint:
    path: /dev-portal/application-auth/dcr-provider/create
    method: POST
- name: Auth Strategy
  endpoint:
    path: /dev-portal/application-auth/auth-strategy/create
    method: POST
- name: DCR Provider
  endpoint:
    path: /dev-portal/application-auth/dcr-provider/create
    method: POST
- name: Auth Strategy
  endpoint:
    path: /dev-portal/application-auth/auth-strategy/create
    method: POST
- name: SSO URL
  endpoint:
    path: /login/sso
    method: GET
- name: SAML ACS URL
  endpoint:
    path: /api/v2/developer/authenticate/saml/acs
    method: GET
- name: Default Visibility
  endpoint:
    path: /dev-portal/default-visibility
    method: GET
- name: User Authentication
  endpoint:
    path: /dev-portal/user-authentication
    method: GET
- name: Identity Providers
  endpoint:
    path: /dev-portal/identity-providers
    method: GET
- name: Developer and Application Approvals
  endpoint:
    path: /dev-portal/developer-approvals
    method: GET
- name: RBAC
  endpoint:
    path: /dev-portal/rbac
    method: GET
- name: Authentication Strategy
  endpoint:
    path: /dev-portal/authentication-strategy
    method: GET
- name: teams
  endpoint:
    path: /teams
    method: POST
    data_selector: teams
    params: {}
- name: assigned-roles
  endpoint:
    path: /assigned-roles
    method: POST
    data_selector: roles
    params: {}
- name: users
  endpoint:
    path: /users
    method: POST
    data_selector: users
    params: {}
- name: team-mappings
  endpoint:
    path: /team-mappings
    method: PUT
    data_selector: mappings
    params: {}
- name: dashboards
  endpoint:
    path: /api/konnect/analytics-requests/v2/
    method: GET
- name: PagerDuty
  endpoint:
    path: /service-catalog/integrations/pagerduty/
    method: GET
- name: GitHub
  endpoint:
    path: /service-catalog/integrations/github/
    method: GET
- name: Traceable
  endpoint:
    path: /service-catalog/integrations/traceable/
    method: GET
- name: GitLab
  endpoint:
    path: /service-catalog/integrations/gitlab/
    method: GET
- name: SwaggerHub
  endpoint:
    path: /service-catalog/integrations/swaggerhub/
    method: GET
- name: Datadog
  endpoint:
    path: /service-catalog/integrations/datadog/
    method: GET
- name: Slack
  endpoint:
    path: /service-catalog/integrations/slack/
    method: GET
- name: Gateway Manager
  endpoint:
    path: /service-catalog/integrations/gateway-manager/
    method: GET
- name: Konnect Analytics
  endpoint:
    path: /service-catalog/integrations/konnect-analytics/
    method: GET
- name: Mesh Manager
  endpoint:
    path: /service-catalog/integrations/mesh-manager/
    method: GET
- name: gateway_services
  endpoint:
    path: /gateway/entities/service/
    method: GET
- name: routes
  endpoint:
    path: /gateway/entities/route/
    method: GET
- name: consumers
  endpoint:
    path: /gateway/entities/consumer/
    method: GET
- name: consumer_groups
  endpoint:
    path: /gateway/entities/consumer-group/
    method: GET
- name: upstreams
  endpoint:
    path: /gateway/entities/upstream/
    method: GET
- name: targets
  endpoint:
    path: /gateway/entities/target/
    method: GET
- name: plugins
  endpoint:
    path: /gateway/entities/plugin/
    method: GET
- name: certificates
  endpoint:
    path: /gateway/entities/certificate/
    method: GET
- name: vaults
  endpoint:
    path: /gateway/entities/vault/
    method: GET
- name: Gateway Services
  endpoint:
    path: /gateway/entities/service/
    method: GET
- name: Routes
  endpoint:
    path: /gateway/entities/route/
    method: GET
- name: Consumers
  endpoint:
    path: /gateway/entities/consumer/
    method: GET
- name: API products
  endpoint:
    path: /api/konnect/api-products/
    method: GET
- name: Application registration
  endpoint:
    path: /dev-portal/self-service/#application-authentication-strategies
    method: GET
- name: Dev portals
  endpoint:
    path: /dev-portal/
    method: GET
- name: Service meshes and mesh zones
  endpoint:
    path: /mesh-manager/
    method: GET
- name: Custom teams and roles
  endpoint:
    path: /konnect-platform/teams-and-roles/
    method: GET
- name: Data Plane
  endpoint:
    path: /api/konnect/control-planes-config/v2/
    method: PUT
    data_selector: dataplane_groups
- name: Access Control List
  default_resource_limit: 50000
- name: Asymmetric Key
  default_resource_limit: 1000
- name: Asymmetric KeySet
  default_resource_limit: 1000
- name: Basic Authentication
  default_resource_limit: 50000
- name: Certificate Authority Certificate
  default_resource_limit: 1000
- name: Certificate
  default_resource_limit: 1000
- name: Consumer
  default_resource_limit: 50000
- name: Consumer Group
  default_resource_limit: 1000
- name: Consumer Group Member
  default_resource_limit: 50000
- name: Consumer Group Rate Limiting Advanced Configuration
  default_resource_limit: 1000
- name: Custom Plugins
  default_resource_limit: 100
- name: Data Plane Client Certificate
  default_resource_limit: 32
- name: DeGraphQL Route
  default_resource_limit: 1000
- name: GraphQL Rate Limiting Cost Decoration
  default_resource_limit: 1000
- name: Hash-based Message Authentication
  default_resource_limit: 50000
- name: JSON Web Token
  default_resource_limit: 50000
- name: Key (API Key) Authentication
  default_resource_limit: 50000
- name: Mutual Transport Layer Security Authentication
  default_resource_limit: 50000
- name: Plugin Configuration
  default_resource_limit: 10000
- name: Route
  default_resource_limit: 10000
- name: Control Planes
  default_resource_limit: 100
- name: Server Name Indication (SNI)
  default_resource_limit: 1000
- name: Service
  default_resource_limit: 10000
- name: Target
  default_resource_limit: 10000
- name: Upstream
  default_resource_limit: 10000
- name: Vault
  default_resource_limit: 1000
- name: custom_plugin
  endpoint:
    path: /plugin-schemas
    method: POST
    data_selector: null
    params: {}
- name: labels
  endpoint:
    path: /api/konnect/labels
    method: GET
- name: global_control_plane
  endpoint:
    path: /mesh-manager/global-control-planes
    method: POST
- name: zone
  endpoint:
    path: /mesh-manager/zones
    method: POST
- name: services
  endpoint:
    path: /mesh-manager/services
    method: GET
- name: mesh_control_plane
  endpoint:
    path: /mesh_control_plane
    method: POST
    data_selector: resources
    params: {}
- name: mesh
  endpoint:
    path: /mesh
    method: POST
    data_selector: resources
    params: {}
- name: mesh_control_plane
  endpoint:
    path: /mesh/control_plane
    method: POST
    data_selector: id
- name: mesh
  endpoint:
    path: /mesh
    method: POST
    data_selector: id
- name: mesh_traffic_permission
  endpoint:
    path: /mesh/traffic_permission
    method: POST
    data_selector: id
- name: mesh
  endpoint:
    path: /meshes
    method: GET
- name: hostnamegenerators
  endpoint:
    path: /hostnamegenerators
    method: GET
- name: meshtrafficpermissions
  endpoint:
    path: /meshtrafficpermissions
    method: GET
- name: zone_control_plane
  endpoint:
    path: /mesh-manager/service-mesh
    method: GET
    data_selector: resources
    params: {}
- name: AccessRole
  endpoint:
    path: /mesh/access_role
    method: GET
    data_selector: roles
    params: {}
- name: AccessRoleBinding
  endpoint:
    path: /mesh/access_role_binding
    method: GET
    data_selector: bindings
    params: {}
- name: AccessRole
  endpoint:
    path: /kuma.io/v1alpha1/AccessRole
    method: POST
    data_selector: rules
- name: AccessRoleBinding
  endpoint:
    path: /kuma.io/v1alpha1/AccessRoleBinding
    method: POST
    data_selector: subjects
- name: Flights Service 0.1.0
  endpoint:
    path: /your-endpoint-path
    method: GET
    data_selector: response_data
    params: {}
- name: Flights Service 0.1.0
  endpoint:
    path: /how-to/write-data-type-tests/
    method: GET
    data_selector: tests
    params: {}
- name: Flights Service 0.1.0
  endpoint:
    path: /run/
    method: GET
- name: flights
  endpoint:
    path: /flights
    method: GET
    data_selector: response
    params: {}
- name: flights
  endpoint:
    path: /flights/{flightNumber}
    method: GET
    data_selector: response
    params: {}
- name: Unary
  endpoint:
    path: /hello.HelloService/SayHello
    method: POST
    data_selector: greeting
- name: Server Streaming
  endpoint:
    path: /hello.HelloService/LotsOfReplies
    method: POST
    data_selector: greeting
- name: Client Streaming
  endpoint:
    path: /hello.HelloService/LotsOfGreetings
    method: POST
    data_selector: greeting
- name: Bidirectional Streaming
  endpoint:
    path: /hello.HelloService/BiDiHello
    method: POST
    data_selector: greeting
- name: insomnia-plugin-base64
  endpoint:
    path: /plugins
    method: POST
    data_selector: plugins
    params: {}
- name: teams
  endpoint:
    path: /app/enterprise/team
    method: GET
- name: licenses
  endpoint:
    path: /app/enterprise/licenses
    method: GET
- name: export
  endpoint:
    path: /inso-cli/reference/export/
    method: GET
- name: export spec
  endpoint:
    path: /inso-cli/reference/export_spec/
    method: GET
- name: generate-docs
  endpoint:
    path: /inso-cli/reference/generate-docs/
    method: GET
- name: lint
  endpoint:
    path: /inso-cli/reference/lint/
    method: GET
- name: run
  endpoint:
    path: /inso-cli/reference/run/
    method: GET
- name: run collection
  endpoint:
    path: /inso-cli/reference/run_collection/
    method: GET
- name: run test
  endpoint:
    path: /inso-cli/reference/run_test/
    method: GET
- name: script
  endpoint:
    path: /inso-cli/reference/script/
    method: GET
- name: GitHub Action example
  endpoint:
    path: /inso-cli/
    method: GET
    data_selector: jobs
    params: {}
- name: Inso CLI
  endpoint:
    path: /inso-cli/
    method: GET
    data_selector: resources
- name: Inso CLI binaries SBOM
  endpoint:
    path: /downloads/release/latest?app=com.insomnia.inso&channel=stable
    method: GET
- name: Inso CLI Docker images SBOM
  endpoint:
    path: /downloads/release/latest?app=com.insomnia.inso&channel=stable
    method: GET
- name: binary_artifacts
  endpoint:
    path: /insomnia/verify-binary-provenance
    method: GET
    data_selector: artifacts
    params: {}
- name: Docker Image Provenance
  endpoint:
    path: /inso-cli/verify-docker-image-provenance
    method: GET
- name: Docker image verification
  endpoint:
    path: /inso-cli/verify-docker-image-signature
    method: GET
    data_selector: signatures
    params: {}
- name: Git Sync
  endpoint:
    path: /insomnia/storage/#git-sync
    method: GET
- name: cloud sync
  endpoint:
    path: /insomnia/storage/#cloud-sync
    method: GET
- name: local vault
  endpoint:
    path: /insomnia/storage/#local-vault
    method: GET
- name: binary_artifacts
  endpoint:
    path: /downloads/release/latest
    method: GET
    data_selector: artifacts
    params:
      pattern: Insomnia.Core-$VERSION.{snap,tar.gz,zip,rpm,dmg,deb,exe,AppImage}
- name: provenance_file
  endpoint:
    path: /downloads/release/latest
    method: GET
    data_selector: provenance
    params:
      pattern: insomnia-provenance.intoto.jsonl
- name: import_methods
  endpoint:
    path: /import-methods
    method: GET
    data_selector: methods
- name: export_methods
  endpoint:
    path: /export-methods
    method: GET
    data_selector: methods
- name: Kong Enterprise Edition
  endpoint:
    path: /kong-enterprise-edition-3.11.0.2
    method: GET
- name: kong
  endpoint:
    path: /
    method: GET
    data_selector: status
    params: {}
- name: Dockerfile
  endpoint:
    path: /gateway/install/docker/
    method: GET
- name: control-planes
  endpoint:
    path: /v2/control-planes
    method: POST
    data_selector: id
- name: dp-client-certificates
  endpoint:
    path: /v2/control-planes/{control_plane_id}/dp-client-certificates
    method: POST
    data_selector: cert
- name: example_service
  endpoint:
    path: /mock
    method: POST
    data_selector: services
    params: {}
- name: example_route
  endpoint:
    path: /mock
    method: POST
    data_selector: routes
    params: {}
- name: chat
  endpoint:
    path: /chat
    method: POST
    data_selector: response
    params: {}
- name: embeddings
  endpoint:
    path: /v1/embeddings
    method: POST
- name: assistants
  endpoint:
    path: /v1/assistants
    method: POST
- name: responses
  endpoint:
    path: /v1/responses
    method: POST
- name: batch
  endpoint:
    path: /v1/batch
    method: POST
- name: audio_transcriptions
  endpoint:
    path: /v1/audio/transcriptions
    method: POST
- name: audio_speech
  endpoint:
    path: /v1/audio/speech
    method: POST
- name: image_generations
  endpoint:
    path: /v1/images/generations
    method: POST
- name: image_edits
  endpoint:
    path: /v1/images/edits
    method: POST
- name: realtime
  endpoint:
    path: /v1/realtime
    method: POST
- name: converse
  endpoint:
    path: /converse
    method: POST
- name: retrieveAndGenerate
  endpoint:
    path: /retrieveAndGenerate
    method: POST
- name: text_generation
  endpoint:
    path: /text-generation
    method: POST
- name: rerank
  endpoint:
    path: /rerank
    method: POST
- name: cache_management
  endpoint:
    path: /plugins/ai-semantic-cache/cache-management
    method: GET
    data_selector: cache
    params: {}
- name: vector_database
  endpoint:
    path: /plugins/ai-semantic-cache/vector-database
    method: GET
    data_selector: vector
    params: {}
- name: ai-prompt-template
  endpoint:
    path: /plugins/
    method: POST
    data_selector: config
    params: {}
- name: supported_versions
  endpoint:
    path: /kubernetes-ingress-controller/supported-versions
    method: GET
    data_selector: versions
    params: {}
- name: kong_ingress_controller_versions
  endpoint:
    path: /kubernetes-ingress-controller/versions
    method: GET
    data_selector: versions
    params: {}
- name: KongUpstreamPolicy
  endpoint:
    path: /v2/control-planes
    method: POST
    data_selector: id
    params: {}
- name: KongUpstreamPolicy
  endpoint:
    path: /v2/control-planes
    method: POST
    data_selector: spec
    params: {}
- name: sticky_sessions
  endpoint:
    path: /kubernetes-ingress-controller/sticky-sessions
    method: GET
    data_selector: sticky_sessions
    params: {}
- name: drain_support
  endpoint:
    path: /kubernetes-ingress-controller/drain-support
    method: GET
    data_selector: drain_support
    params: {}
- name: KongLicense
  endpoint:
    path: /kubernetes-ingress-controller/reference/custom-resources/#konglicense
    method: POST
    data_selector: rawLicenseString
    params: {}
- name: Lease
  endpoint:
    path: /kubernetes/lease
    method: GET
- name: status_500
  endpoint:
    path: /status/500
    method: GET
- name: status_200
  endpoint:
    path: /status/200
    method: GET
- name: KongUpstreamPolicy
  endpoint:
    path: /v2/control-planes
    method: POST
    data_selector: id
    params: {}
- name: httpbin
  endpoint:
    path: /httpbin/status/{status}
    method: GET
    data_selector: status
    params: {}
- name: Kong Gateway Enterprise
  endpoint:
    path: /kong/kong-gateway
    method: GET
- name: Kong Ingress Controller nightly
  endpoint:
    path: /kong/nightly-ingress-controller
    method: GET
- name: Service
  endpoint:
    path: /kubernetes/services
    method: GET
    data_selector: services
- name: Pods
  endpoint:
    path: /kubernetes/pods
    method: GET
    data_selector: pods
- name: Gateway
  endpoint:
    path: /kubernetes/gateway
    method: GET
    data_selector: gateways
- name: GatewayClass
  endpoint:
    path: /kubernetes/gatewayclass
    method: GET
    data_selector: gatewayClasses
- name: HTTPRoute
  endpoint:
    path: /kubernetes/httproute
    method: GET
    data_selector: httpRoutes
- name: Ingress
  endpoint:
    path: /kubernetes/ingress
    method: GET
    data_selector: ingresses
- name: Gateway
  endpoint:
    path: /gateway
    method: GET
    data_selector: items
    params: {}
- name: Service
  endpoint:
    path: /service
    method: GET
    data_selector: items
    params: {}
- name: KongConsumer
  endpoint:
    path: /kubernetes-ingress-controller/KongConsumer
    method: GET
    data_selector: items
- name: KongPlugin
  endpoint:
    path: /kubernetes-ingress-controller/KongPlugin
    method: GET
    data_selector: items
- name: Ingress
  endpoint:
    path: /kubernetes-ingress-controller/Ingress
    method: GET
    data_selector: items
- name: KongPlugin
  endpoint:
    path: /configuration.konghq.com/v1/kongplugins
    method: GET
    data_selector: items
    params: {}
- name: KongClusterPlugin
  endpoint:
    path: /configuration.konghq.com/v1/kongclusterplugins
    method: GET
    data_selector: items
    params: {}
- name: KongConsumer
  endpoint:
    path: /configuration.konghq.com/v1/kongconsumers
    method: GET
    data_selector: items
    params: {}
- name: KongConsumerGroup
  endpoint:
    path: /configuration.konghq.com/v1/kongconsumergroups
    method: GET
    data_selector: items
    params: {}
- name: TCPIngress
  endpoint:
    path: /configuration.konghq.com/v1/tcpingresses
    method: GET
    data_selector: items
    params: {}
- name: UDPIngress
  endpoint:
    path: /configuration.konghq.com/v1/udingresses
    method: GET
    data_selector: items
    params: {}
- name: KongLicense
- name: KongCustomEntity
- name: KongPlugin
- name: KongUpstreamPolicy
- name: KongClusterPlugin
- name: KongConsumer
- name: KongConsumerGroup
- name: KongVault
- name: TCPIngress
- name: UDPIngress
- name: KongConsumer
  endpoint:
    path: /kubernetes-ingress-controller/admission-webhook
    method: POST
    data_selector: results
    params: {}
- name: KongPlugin
  endpoint:
    path: /kubernetes-ingress-controller/admission-webhook
    method: POST
    data_selector: results
    params: {}
- name: Secret
  endpoint:
    path: /kubernetes-ingress-controller/admission-webhook
    method: POST
    data_selector: results
    params: {}
- name: HTTPRoute
  endpoint:
    path: /kubernetes-ingress-controller/admission-webhook
    method: POST
    data_selector: results
    params: {}
- name: Ingress
  endpoint:
    path: /kubernetes-ingress-controller/admission-webhook
    method: POST
    data_selector: results
    params: {}
- name: KongUpstreamPolicy
  endpoint:
    path: /v2/control-planes
    method: POST
    data_selector: spec
    params: {}
- name: internal
  endpoint:
    path: /kubernetes-ingress-controller/split-traffic
    method: POST
- name: external
  endpoint:
    path: /kubernetes-ingress-controller/split-traffic
    method: POST
- name: Preserve client IP
  endpoint:
    path: /kubernetes-ingress-controller/preserve-client-ip
    method: GET
- name: Gateway
  endpoint:
    path: /v2/control-planes
    method: POST
    data_selector: id
    params: {}
- name: echo
  endpoint:
    path: /echo
    method: POST
    data_selector: cert
    params: {}
- name: KongPlugin
  endpoint:
    path: /v1/kongplugins
    method: POST
    data_selector: plugin
    params: {}
- name: secured-endpoint
  endpoint:
    path: /secured-endpoint
    method: POST
    data_selector: cert
    params: {}
- name: sensitive-endpoint
  endpoint:
    path: /sensitive-endpoint
    method: POST
    data_selector: cert
    params: {}
- name: KongPlugin
  endpoint:
    path: /v2/control-planes
    method: POST
    data_selector: id
    params: {}
- name: KongPlugin
  endpoint:
    path: /v2/control-planes
    method: POST
    data_selector: id
    params: {}
- name: degraphql_route_example
  endpoint:
    path: /v2/control-planes
    method: POST
    data_selector: ''
    params: {}
- name: kgo_install
  endpoint:
    path: /operator/install
    method: POST
    data_selector: result
- name: control_plane
  endpoint:
    path: /v2/control-planes
    method: POST
    data_selector: id
- name: declarative_config
  endpoint:
    path: /v2/control-planes/{control_plane_id}/declarative-config
    method: PUT
    data_selector: config
- name: api_management
  endpoint:
    path: /api/v1/manage
    method: GET
    data_selector: data
- name: analytics
  endpoint:
    path: /api/v1/analytics
    method: GET
    data_selector: data
- name: identity_providers
  endpoint:
    path: /identity-providers
    method: POST
- name: portal_identity_providers
  endpoint:
    path: /portals/{portalId}/identity-providers
    method: POST
- name: Azure
  endpoint:
    path: /index/konnect-platform/azure
    method: GET
    data_selector: mapping
    params: {}
- name: Oracle Cloud
  endpoint:
    path: /index/konnect-platform/oracle-cloud
    method: GET
    data_selector: mapping
    params: {}
- name: KeyCloak
  endpoint:
    path: /index/konnect-platform/keycloak
    method: GET
    data_selector: mapping
    params: {}
- name: audit_log_webhook
  endpoint:
    path: /v2/audit-log-webhook
    method: PATCH
    data_selector: null
    params: {}
- name: control_planes
  endpoint:
    path: /v2/control-planes
    method: GET
    data_selector: null
    params: {}
- name: control_plane_ports
  endpoint:
    path: /gateway/control-plane-ports
    method: GET
    data_selector: ports
    params: {}
- name: data_plane_node_ports
  endpoint:
    path: /gateway/data-plane-node-ports
    method: GET
    data_selector: ports
    params: {}
- name: hostnames
  endpoint:
    path: /gateway/hostnames
    method: GET
    data_selector: hostnames
    params: {}
- name: mesh_manager_hostnames
  endpoint:
    path: /gateway/mesh-manager-hostnames
    method: GET
    data_selector: mesh_hostnames
    params: {}
- name: audit_log_destination
  endpoint:
    path: /audit-log-destinations
    method: POST
    data_selector: destination
    params: {}
- name: audit_log_webhook
  endpoint:
    path: /portals/{portalId}/audit-log-webhook
    method: PATCH
    data_selector: webhook
    params: {}
- name: example-service
  endpoint:
    path: /anything
    method: GET
- name: openid_connect
  endpoint:
    path: /plugins/openid-connect
    method: POST
    data_selector: config
    params: {}
- name: Gateway Services
  endpoint:
    path: /gateway/entities/service/
    method: GET
- name: Routes
  endpoint:
    path: /gateway/entities/route/
    method: GET
- name: Consumers
  endpoint:
    path: /gateway/entities/consumer/
    method: GET
- name: Consumer Groups
  endpoint:
    path: /gateway/entities/consumer-group/
    method: GET
- name: Upstreams
  endpoint:
    path: /gateway/entities/upstream/
    method: GET
- name: Targets
  endpoint:
    path: /gateway/entities/target/
    method: GET
- name: Plugins
  endpoint:
    path: /gateway/entities/plugin/
    method: GET
- name: Workspaces
  endpoint:
    path: /gateway/entities/workspace/
    method: GET
- name: Partials
  endpoint:
    path: /gateway/entities/partial/
    method: GET
- name: example-service
  endpoint:
    path: /anything
    method: GET
- name: example-service
  endpoint:
    path: /anything
    method: GET
- name: example-route
  endpoint:
    path: /anything
    method: GET
    data_selector: access-token
- name: example-service
  endpoint:
    path: /anything
    method: GET
- name: example-service
  endpoint:
    path: /anything
    method: GET
    data_selector: ''
    params: {}
- name: example-service
  endpoint:
    path: /anything
    method: GET
- name: example-route
  endpoint:
    path: /anything
    method: GET
- name: consumer_groups
  endpoint:
    path: /consumer_groups
    method: POST
    data_selector: null
    params: {}
- name: consumers
  endpoint:
    path: /consumers
    method: POST
    data_selector: null
    params: {}
- name: Consumer
  endpoint:
    path: /{workspace_id_or_name}/consumers
    method: POST
- name: Gateway Service
  endpoint:
    path: /services
    method: POST
- name: Route
  endpoint:
    path: /routes
    method: POST
- name: example-service
  endpoint:
    path: /anything
    method: GET
- name: example-service
  endpoint:
    path: /anything
    method: GET
- name: consumer
  endpoint:
    path: /anything
    method: GET
    data_selector: records
notes:
- Supports various features of the FAPI standard, aimed to protect APIs that expose
  high-value and sensitive data.
- OpenID Connect provides a way to form a federation with identity providers (IdPs).
- Unlike other authentication types like Key Auth and Basic Auth, with OpenID Connect
  you don’t need to manage user credentials directly.
- Token caching doesn’t work if both client_credentials and password are set as auth
  methods.
- To resolve this caching issue, make sure you only have the client_credentials method
  enabled.
- Authentication is the process of verifying that a requester has permissions to access
  a resource.
- Kong Gateway has a library of plugins that support the most widely used methods
  of API gateway authentication.
- KNEP is a proxy for the native Kafka protocol that sits between native consumers
  and producers, and backend Kafka clusters.
- The KNEP Data Planes are self-managed and deployed by you, the user.
- Built-in mTLS, service discovery, and traffic management.
- Support for multi-zone and multi-tenant topologies.
- Runs on both Kubernetes and Universal (VM / Bare metal) environments.
- Kong Ingress Controller allows you to run Kong Gateway as a Kubernetes Ingress.
- Advanced Analytics includes the ability to build organization-specific views with
  Custom Dashboards.
- A Service Catalog scorecard helps you evaluate services based on validation criteria.
- Secure the Admin API provides a RESTful interface for configuring Kong Gateway entities.
- Review domain breaking changes for Dev Portal v3 and migrate to the new domain before
  October 1, 2025.
- decK is a command line tool that facilitates API Lifecycle Automation (APIOps)
- decK communicates with Kong Gateway via the Admin API
- Uses OAuth2 with refresh token - requires setup of connected app in Kong
- Some objects like Consumer may return nulls in deeply nested fields
- Some objects may return nulls in deeply nested fields
- Cookies may impact your experience of the site and the services we are able to offer.
- Uses OAuth2 with refresh token — requires setup of connected app in api
- Starting in version 11.3.0, Insomnia for Windows now uses the Nullsoft Scriptable
  Install System (NSIS) installer.
- Global and collection environments can be accessed by all collections in a project
- Sub-environments can be marked as private and require a vault key to be accessed
- Secret environment variables are stored locally in encrypted form and masked by
  default
- Once you enable SSO on your Enterprise account, users will no longer be able to
  use other login methods.
- New users provisioned through SCIM will receive an email containing an initial passphrase
  needed to log in to Insomnia. If they don’t have this passphrase, they can reset
  it.
- All data is encrypted using randomly generated 256-bit symmetric keys for use with
  AES-GCM-256 (Galois Counter Mode).
- Insomnia stores encrypted workspace data and the encrypted symmetric key for each
  authorized user. Nothing is ever stored in plain text, not even the shared secret
  key.
- You can automate tests written in Insomnia by using the Inso CLI with the `inso
  run test "document name" --env "environment name"` command.
- This tutorial requires the Owner role in your Insomnia account.
- You need a Microsoft Entra subscription that can enable the Microsoft Entra SAML
  Toolkit SSO.
- Cloud Application Administrator or Application Administrator permissions are required.
- The token will only be visible once in Insomnia. Make sure to store it in a secure
  location so you can retrieve it if needed.
- Hobby accounts created from June 4th 2024 onwards have E2EE disabled by default.
- For enterprise users utilizing Insomnia, it’s crucial to ensure that specific domains
  are allowlisted in your network.
- Insomnia collects usage data to help improve the application.
- Requires Advanced Analytics for detailed insights.
- Available to all customers for portal and API contextual analytics.
- The API specification endpoint is being deprecated on October 1, 2025 in favor of
  the API versions endpoint.
- Auth strategy sync errors will be moving from the API entity to the implementation
  entity.
- Incompatible with on-prem
- Dev Portal audit logs don’t collect authorization and access events by design.
- An API must be linked to a Konnect Gateway Service to be able to restrict access
  to your API with authentication strategies.
- APIs can only have a 1:1 mapping with a Gateway Service.
- Requires a Konnect personal access token for authentication
- Requires a Konnect personal access token.
- Developer sign ups and application creation require admin approval by default
- User authentication is enabled by default for private Dev Portals
- Developers can only use one auth strategy per application.
- DCR support in Konnect provides multiple methods by which applications can be authenticated
  using industry-standard protocols.
- Each application automatically receives a client ID and secret.
- This tutorial requires a Konnect Plus account.
- Avoid using the `openid` scope with client credentials as it restricts the use.
- Requires a Konnect Plus account.
- Dynamic Client Registration is used to automatically create Dev Portal applications.
- Dynamic client registration supports Azure OAuth v1 token endpoints only.
- Use the client ID and secret pair obtained previously in the header.
- Incompatible with on-prem deployments.
- Custom domain breaking changes for Dev Portal v3 must be migrated before October
  1, 2025.
- Developers are auto-approved by Konnect when using SSO to log in to the Dev Portal.
- You can combine built-in authentication with either OIDC or SAML (not both).
- Enabling user authentication allows anonymous users to register for a developer
  account.
- Auto approval for developers can be enabled or disabled.
- Manage data ingestion from any Control Plane Dashboard using the Advanced Analytics
  toggle.
- 'Minimum Version: Kong Gateway - 3.8'
- Predefined teams cannot be modified or deleted.
- If Okta integration is enabled, Konnect users and teams become read-only.
- Custom Dashboards provide a flexible way to build, organize, and manage analytical
  views that are tailored to your organization’s needs.
- Dashboards can be created from scratch or from a template.
- This is a Konnect tutorial and requires a Konnect personal access token.
- Automatic usage of the KONNECT_TOKEN environment variable if available.
- Kong Gateway requires specific setup for various deployment topologies.
- Plugins can be integrated to extend functionality.
- Only authentication, billing, and usage is shared between Konnect geos.
- Review domain breaking changes for Dedicated Cloud Gateways and migrate to the new
  domain before September 30, 2025.
- Control Plane Groups are read-only. Configuration changes must be made through a
  member Control Plane.
- Data Plane nodes don’t manage their own configurations.
- Self-managed Data Plane nodes can be upgraded to a new Kong Gateway by initializing
  new nodes before decommissioning old ones.
- Data traveling between Control Planes and Data Planes is secured through a mutual
  TLS handshake.
- Data Plane nodes initiate the connection to the Kong Gateway Control Plane.
- Telemetry data does not include any customer information or any data processed by
  the Data Plane. All telemetry data is encrypted using mTLS.
- By default, the buffer limit is 100000 requests.
- Please upgrade Kong Gateway to version 3.2.0.0 or above.
- Please upgrade Kong Gateway to version 3.5.0.0 or above.
- Please upgrade Kong Gateway to version 3.6.0.0 or above.
- Please upgrade Kong Gateway to version 3.7.0.0 or above.
- Please upgrade Kong Gateway to version 3.8.0.0 or above.
- Please upgrade Kong Gateway to version `3.8.0.0` or above.
- Please upgrade Kong Gateway to version `3.9.0.0` or above.
- Please upgrade Kong Gateway to version 3.3.0.0 or above.
- Please upgrade Kong Gateway to version 3.4.3.5 or above.
- Please upgrade Kong Gateway to version 2.8.0.0 or above.
- Please upgrade Kong Gateway to version 3.0.0.0 or above.
- Please upgrade Kong Gateway to version 3.1.0.0 or above.
- Plugin features that rely on these fields are not working as intended.
- You can’t edit these limits directly.
- If you need any of the Konnect entity resource limits increased, contact Kong Support.
- Each custom plugin must have a unique name.
- All plugin files must also be deployed to each Kong Gateway Data Plane node.
- The plugin must not contain an api.lua file, as Admin API extensions are not supported.
- The plugin must not contain the dao.lua or migrations.lua files, as custom data
  entities are not supported.
- Custom validation functions must be written in Lua and be self-contained within
  the schema.lua file.
- The schema.lua file must not contain any require() statements.
- Plugins that require third-party libraries must reference them in the handler.lua
  file.
- Carefully test the operation of any custom plugins before using them in production.
- Uses personal access token for authentication.
- This process assumes you’re migrating zones one by one.
- During migration, zone-to-zone communication may break temporarily.
- By default, all requests that originate from localhost are authenticated as the
  `admin` user belonging to the `mesh-system:admin` group.
- Insomnia is an open source desktop application that simplifies designing, debugging,
  and testing APIs.
- Secrets retrieved from cloud vault services are cached in memory for 30 minutes
  by default.
- If the cache expires or is missing, Insomnia re-fetches the secret automatically.
- Local vault is ideal for users who prefer or require their data to remain off the
  cloud for privacy or security reasons.
- Scratch pad is best suited for individual developers who aren’t working as part
  of a team.
- Cloud sync enables collaboration and provides easy access to projects from different
  devices and locations.
- Git sync allows users to use a third-party Git repository for storing project data.
- Uses Insomnia for testing APIs
- Before we create a test, we need to create a test suite for our collection.
- GraphQL queries cannot include Insomnia templating, but variables can.
- Requires personal access token and system account ID
- Insomnia supports making gRPC requests.
- gRPC endpoints can be secured by TLS.
- Requires a verified domain in Insomnia
- Users must be assigned to the app integration in Okta before they can log in with
  SSO
- Requires the Owner role in your Insomnia account
- You need an admin account for Okta
- You can enable domain capture on a verified domain only.
- If you enable both domain capture and domain lock on the same verified domain in
  Insomnia, then domain capture takes priority for new sign-ups and overrides domain
  lock.
- Roles are defined on the team level, which means that if the same team is linked
  to multiple organizations, the team members will have the same role in all linked
  organizations.
- Teams can’t be renamed or deleted manually in Insomnia, but this feature will be
  added in a future release.
- Insomnia implements end-to-end encryption (E2EE), which means that all encryption
  keys are generated locally, all encryption is performed before sending any data
  over the network, and all decryption is performed after receiving data from the
  network.
- At no point in the sync process can the Insomnia servers, or an intruder read or
  access sensitive application project data.
- We regularly update the Insomnia desktop application. Security, and hotfix patches
  are handled on a case-by-case basis and can occur at any time.
- Kong produces build provenance for Inso CLI binary artifacts, which can be verified
  using cosign or slsa-verifier.
- The GitHub owner is case-sensitive (Kong/insomnia vs kong/insomnia).
- Kong produces build provenance for Inso CLI docker container images, which can be
  verified using cosign or slsa-verifier with attestations published to a Docker Hub
  repository.
- Inso CLI Docker container images are signed using cosign with signatures published
  to a Docker Hub repository.
- GitHub owner is case-sensitive (Kong/insomnia vs kong/insomnia).
- New organizations can only be created by the account owner or co-owners.
- By default, new users are added with the Member role.
- All storage options are available by default.
- 'Minimum Version: Insomnia - 11.0'
- If you can’t find your repository in the list, install the Insomnia Desktop app
  on your GitHub organization.
- Kong uses GitHub Actions to build and release, using GitHub’s OIDC identity to generate
  build provenance.
- Insomnia offers a unified workflow for importing and exporting API artifacts.
- Insomnia supports various import and export formats including JSON, Postman, HAR,
  and OpenAPI.
- After installing the database, configure kong.conf to connect to PostgreSQL
- Run kong migrations bootstrap to initialize the schema, then start Kong Gateway
- 'Deployment Platform: on-prem'
- Incompatible with konnect
- Requires a personal access token (PAT) for authentication
- Uses mTLS certificates for secure communication with Konnect
- This tutorial requires Kong Gateway Enterprise.
- For production, it is recommended to let the API gateway autogenerate a complex
  key.
- Requires setup of a Konnect personal access token.
- The client must provide an Authorization header with an OpenAI API key.
- 'Anthropic: Does not support llm/v1/completions or llm/v1/embeddings.'
- 'Llama2: Raw format lacks support for llm/v1/embeddings.'
- 'Bedrock and Gemini: Only support auth.allow_override = false.'
- AI Proxy Advanced plugin accepts requests in one of a few defined and standardized
  OpenAI formats.
- This plugin is only available as part of our AI Gateway Enterprise offering.
- The plugin supports Redis as a vector database.
- Requires setup of AI Proxy or AI Proxy Advanced to be configured first.
- This plugin extends the functionality of the AI Proxy plugin, and requires either
  AI Proxy or AI Proxy Advanced to be configured first.
- Requires AI Proxy to be configured first.
- 'Minimum Version: Kong Gateway - 3.6'
- LTS versions of Kong Ingress Controller are supported for 3 years after release.
- Standard versions are supported for 1 year after release.
- Requires setup of connected app in Konnect.
- 'Minimum Version: Kong Ingress Controller - 3.5, Kong Gateway - 3.11'
- Kong Ingress Controller - 3.5
- Kong Gateway - 3.11
- Sticky sessions rely on cookies, which may not be supported in all client environments
- Drain support requires the --enable-drain-support flag to be explicitly enabled
- Kong recommends running at least two Kong Ingress Controller instances.
- Leader election is controlled using the Lease resource.
- Kong Gateway doesn’t proxy any additional requests if the Pod is unhealthy.
- Configure `spec.healthchecks` in a `KongUpstreamPolicy` resource.
- Health checks are done at the Service-level.
- Kong Ingress Controller stores the last valid configuration in memory and uses it
  to configure new Pods.
- If the Kong Ingress Controller Pod is restarted with a broken configuration on the
  Kubernetes API server, it fetches the last valid configuration from an existing
  Kong instance and stores it in memory.
- If there are no running proxy Pods when the controller is restarted the last known
  good configuration is lost.
- Fallback Configuration is an opt-in feature. You must enable it by setting `FallbackConfiguration=true`
  in the controller’s feature gates configuration.
- Gateway API resources will only be reconciled when the Gateway API CRDs are installed
  in your cluster before Kong Ingress Controller is started.
- Ports missing appropriate Kong-side configuration results in an error condition
  in the Gateway’s status.
- Kong will continue to support the Kubernetes Ingress resource to configure a Kong
  Gateway.
- The Kubernetes Gateway API resource is now the preferred mechanism for configuring
  inbound routing in Kubernetes clusters.
- KongClusterPlugin is a Kubernetes cluster-level resource.
- TCPIngress and UDPIngress are deprecated as of Kong Ingress Controller 3.5.
- kong is the default value and can be changed using the --ingress-class CLI flag,
  or the CONTROLLER_INGRESS_CLASS environment variable.
- konghq.com/kic-gateway-controller is the default value and can be changed using
  the --gateway-api-controller-name CLI flag, or the CONTROLLER_GATEWAY_API_CONTROLLER_NAME
  environment variable.
- The admission webhook should not be disabled unless you are asked to do so by a
  member of the Kong team.
- Kong Ingress Controller talks to Konnect over a connected secured with TLS certificates.
- Kong’s load balancer distributes requests evenly across a number of equal-size buckets.
- This method is not supported by all cloud providers.
- Requires setup of personal access token (PAT) to interact with Konnect API
- The certificate needs to be a single line string to send it to the Konnect API with
  curl.
- Kong provides a way to deploy custom plugins using both Kong Gateway Operator and
  the Kong Ingress Controller Helm chart.
- Create an anonymous consumer that will be used when validation fails.
- Attach a request-termination plugin to this consumer to ensure that traffic is blocked
  if the request does not match another consumer’s credentials.
- 'Create a Secret with a konghq.com/credential: acl label and apply it to the Consumer
  that you want to access the Service.'
- Generate and format mTLS certificates before sending to the Konnect API
- Use secrets to store the TLS certificate and key for the Kong Ingress Controller
- Uses OAuth2 with Bearer token for authentication.
- Rate limiting policy can be local or redis.
- Uses mTLS for secure connectivity using certificates
- Uses OIDC with Kong Ingress Controller
- Requires setup of connected app in Kong
- The degraphql plugin requires an upstream GraphQL API.
- KNEP acts as a proxy between the client and Kafka cluster.
- The recommended method of authentication for Konnect is an access token.
- Personal access tokens are associated with user accounts, while system account access
  tokens are associated with system accounts.
- OAuth2 is used for authentication.
- Ensure to set the correct scopes for the API access.
- Users with a large number of groups may experience authentication issues due to
  non-standard group claims.
- Keep built-in authentication enabled while you are testing IdP authentication.
- Only disable built-in authentication after successfully testing the configurations.
- OIDC uses app registration in Azure.
- Remove the namespace from the claim name in Azure.
- Set Name ID format to transient in Oracle Cloud.
- Manually upload the signing certificate from sp_metadata_url in Oracle Cloud and
  KeyCloak.
- This policy only applies to Kong Gateway.
- Kong adopts a structured approach to versioning its products.
- Kong may designate a specific minor version as a Long-Term Support (LTS) version.
- Create an HTTPS data collection endpoint and access key in your SIEM provider and
  save their values.
- 'Set ''log_format: cef'' and ''enabled: true'' while configuring the webhook.'
- Konnect deployments run in managed or Hybrid Mode.
- Communication between Control Plane and Data Plane nodes uses specific ports.
- Create an HTTPS data collection endpoint and access key in the provider and save
  their values.
- Uses SumoLogic as a SIEM provider.
- OpenID Connect (OIDC) is a standard built on top of OAuth and JWT.
- The OIDC plugin also includes session management and support for the Financial-Grade
  API (FAPI) standard.
- Uses OpenID Connect with authorization code flow and session authentication.
- Requires setup of Okta app with client ID and client secret.
- Ensure to configure redirect URI in Okta.
- Uses OpenID Connect plugin with session authentication
- Requires setup of identity provider
- Setting config.client_auth to client_secret_post lets you easily test the connection
  to your IdP, but we recommend using a more secure auth method in production.
- Uses OpenID Connect with JWT authentication
- Requires setup of an identity provider (IdP) like Keycloak
- As per the OAuth2 specs, this plugin requires the underlying Service to be served
  over HTTPS.
- Uses OpenID Connect plugin with introspection authentication
- Uses OpenID Connect with refresh token.
- Uses OpenID Connect with password grant
- Requires setup of Keycloak as identity provider
- Uses OpenID Connect plugin for claims-based authorization
- You must also configure an authentication plugin on the Service or Route before
  configuring the ACL plugin.
- Requires setup of connected app in Kong Gateway
- Basic authentication requires at least one Consumer to work.
- Password must be base64-encoded when used in the Authentication header.
- Recommended to use key in header for better security.
- Setting config.client_auth to client_secret_post lets you easily test the connection
  to your IdP.
- Client authentication is required for accessing services.
- The JWT can be included in a request to Kong Gateway.
- Create a Consumer with an algorithm, key, and secret in the jwt_secrets configuration.
- Enable the JWT plugin globally.
errors:
- 'REQUEST_LIMIT_EXCEEDED: Throttle API calls or reduce frequency'
- 'QUERY_TIMEOUT: Break down filters or add selectivity'
- '401 Unauthorized: Recheck OAuth scopes or token expiration'
- Do not include sensitive data in any requests, responses, or logs you share with
  support unless you send it through a secure channel.
- '401 Unauthorized: You must include your key in the request.'
- '400 Bad Request: Check your request parameters.'
- '401 Unauthorized: Verify your client ID and secret.'
- 'Unauthorized: Check client ID and secret.'
- 'Not Found: Ensure the API audience exists.'
- CNAME status and SSL status will show Pending while the DNS record TTL expires and
  SSL is configured.
- '403 Forbidden: Insufficient permissions to perform the action.'
- '404 Not Found: Resource not found.'
- 'Conflicts have been detected between these Control Planes: CONTROL-PLANE-EXAMPLE
  CONTROL-PLANE-ANOTHER-EXAMPLE'
- Please upgrade Kong Gateway to version 3.1.0.0 or above.
- 'For the `proxy-cache-advanced` plugin, one or more of the following `config` fields
  are set: `response_headers` but Kong Gateway versions < 3.5.0.0 do not support these
  fields. Plugin features that rely on these fields are not working as intended.'
- 'For the `oas-validation` plugin, one or more of the following `config` fields are
  set: `include_base_path` but Kong Gateway versions < 3.4.3.6 do not support these
  fields. Plugin features that rely on these fields are not working as intended.'
- 'For the `mocking` plugin, one or more of the following `config` fields are set:
  `include_base_path` but Kong Gateway versions < 3.5.0.0 do not support these fields.
  Plugin features that rely on these fields are not working as intended.'
- 'For the `openid-connect` plugin, one or more of the following `config` fields are
  set: `introspection_token_param_name`, `revocation_token_param_name` but Kong Gateway
  versions < 3.5.0.0 do not support these fields. Plugin features that rely on these
  fields are not working as intended.'
- For the `openid-connect` plugin, the `unauthorized_destroy_session` config field
  is set, but only Kong Gateway versions >=3.4.1.0 and >=2.8.4.5 for the 2.8 serie
  support this field. Plugin features that rely on this field are not working as intended.
- For the `request-validator` plugin, the config field `content_type_parameter_validation`
  has been used. This is not supported in Kong Gateway versions older than 3.6.1.5
  and versions older than 3.7.1.0 for the 3.7.x release line.
- 'For the `openid-connect` plugin, one or more of the following `config` fields are
  set: `tls_client_auth_cert_id`, `tls_client_auth_ssl_verify`, `mtls_token_endpoint`,
  `mtls_introspection_endpoint`, `mtls_revocation_endpoint` but Kong Gateway versions
  < 3.6.0.0 do not support these fields. Plugin features that rely on these fields
  are not working as intended.'
- For the `ai-rate-limiting-advanced` plugin, one or more instances have been configured
  with the `bedrock` LLM provider. This is not supported in Kong Gateway versions
  < 3.8.0.0. The plugin has been removed in the data plane node.
- For the `ai-rate-limiting-advanced` plugin, one or more instances have been configured
  with the `gemini` LLM provider. This is not supported in Kong Gateway versions <
  3.8.0.0. The plugin has been removed in the data plane node.
- 'For the `proxy-cache-advanced` plugin, one or more of the following `config` fields
  are set: `redis.cluster_max_redirections`, `redis.connection_is_proxied` but Kong
  Gateway versions < 3.8.0.0 do not support these fields. Plugin features that rely
  on these fields are not working as intended.'
- 'For the `ai-rate-limiting-advanced` plugin, one or more of the following `config`
  fields are set: `redis.cluster_max_redirections`, `redis.connection_is_proxied`
  but Kong Gateway versions < 3.8.0.0 do not support these fields. Plugin features
  that rely on these fields are not working as intended.'
- 'For the `graphql-proxy-cache-advanced` plugin, one or more of the following `config`
  fields are set: `redis.cluster_max_redirections`, `redis.connection_is_proxied`
  but Kong Gateway versions < 3.8.0.0 do not support these fields. Plugin features
  that rely on these fields are not working as intended.'
- 'For the `rate-limiting-advanced` plugin, one or more of the following `config`
  fields are set: `lock_dictionary_name` but Kong Gateway versions < 3.9.0.0 do not
  support these fields. Plugin features that rely on these fields are not working
  as intended.'
- 'For the `openid-connect` plugin, one or more of the following `config` fields are
  set: `introspection_post_args_client_headers` but Kong Gateway versions < 3.9.0.0
  do not support these fields. Plugin features that rely on these fields are not working
  as intended.'
- 'D100: Plugin `jq` is not available in Kong Gateway versions < 2.6.0.0.'
- 'D101: For the `canary` plugin, one or more of the following `config` fields are
  set: `hash_header` but Kong Gateway versions < 2.6.0.0 do not support these fields.'
- 'D102: For the `canary` plugin, `config.hash` field has been set to `header`. This
  is not supported in Kong Gateway versions < 2.6.0.0.'
- 'D103: For the `kafka-log` plugin, one or more of the following `config` fields
  are set: `authentication`, `keepalive_enabled`, `security` but Kong Gateway versions
  < 2.6.0.0 do not support these fields.'
- 'D104: For the `kafka-upstream` plugin, one or more of the following `config` fields
  are set: `authentication`, `keepalive_enabled`, `security` but Kong Gateway versions
  < 2.6.0.0 do not support these fields.'
- 'D105: For the `rate-limiting-advanced` plugin, either `config.strategy` is set
  to `local` or `config.identifier` is set to `path` or both. These settings are not
  supported in Kong Gateway versions < 2.6.0.0.'
- 'D106: For the `openid-connect` plugin, one or more of the following unsupported
  `config` fields or values for a `config` field are in use: `by_username_ignore_case`,
  `disable_session`, `downstream_introspection_jwt_header`, `downstream_user_info_jwt_header`,
  `introspection_accept`, `introspection_check_active`, `upstream_introspection_jwt_header`,
  `upstream_user_info_jwt_header`, `userinfo_accept`, `userinfo_headers_client`, `userinfo_headers_names`,
  `userinfo_headers_values`, `userinfo_query_args_client`, `userinfo_query_args_names`,
  `userinfo_query_args_values`, `auth_methods` array field with value `userinfo`,
  `ignore_signature` array field with value `introspection`, `ignore_signature` array
  field with value `userinfo`, `login_methods` array field with value `userinfo`,
  `token_headers_grants` array field with value `refresh_token`.'
- 'D107: For the `rate-limiting-advanced` plugin, one or more of the following `config`
  fields are set: `path` but Kong Gateway versions < 2.6.0.0 do not support these
  fields.'
- 'D108: For the `forward-proxy` plugin, one or more of the following `config` fields
  are set: `auth_username`, `auth_password` but Kong Gateway versions < 2.7.0.0 do
  not support these fields.'
- 'D109: For the `mocking` plugin, one or more of the following `config` fields are
  set: `random_examples` but Kong Gateway versions < 2.7.0.0 do not support these
  fields.'
- 'D110: For the `rate-limiting-advanced` plugin, one or more of the following `config`
  fields are set: `enforce_consumer_groups`, `consumer_groups` but Kong Gateway versions
  < 2.7.0.0 do not support these fields.'
- 'D111: For the `rate-limiting-advanced` plugin, one or more of the following `config`
  fields are set: `redis.username`, `redis.sentinel_username` but Kong Gateway versions
  < 2.8.0.0 do not support these fields.'
- 'D112: For the `proxy-cache-advanced` plugin, one or more of the following `config`
  fields are set: `redis.username`, `redis.sentinel_username` but Kong Gateway versions
  < 2.8.0.0 do not support these fields.'
- 'D113: For the `canary` plugin, one or more of the following `config` fields are
  set: `canary_by_header_name` but Kong Gateway versions < 2.8.0.0 do not support
  these fields.'
- 'D114: For the `forward-proxy` plugin, one or more of the following `config` fields
  are set: `https_proxy_host`, `https_proxy_port` but Kong Gateway versions < 2.8.0.0
  do not support these fields.'
- 'D115: N/A'
- 'D116: For the `openid-connect` plugin, one or more of the following `config` fields
  are set: `session_redis_username`, `resolve_distributed_claims` but Kong Gateway
  versions < 2.8.0.0 do not support these fields.'
- 'D117: N/A'
- 'D118: For the `kafka-log` plugin, one or more of the following `config` fields
  are set: `cluster_name` but Kong Gateway versions < 2.8.0.0 do not support these
  fields.'
- 'D119: For the `kafka-upstream` plugin, one or more of the following `config` fields
  are set: `cluster_name` but Kong Gateway versions < 2.8.0.0 do not support these
  fields.'
- 'D120: For the `kafka-log` plugin, one or more of the following fields: `authentication.mechanism`
  have been set to one or more of the following values: `SCRAM-SHA-512` but Kong Gateway
  versions < 2.8.1.1 do not support these values.'
- 'D121: For the `kafka-upstream` plugin, one or more of the following fields: `authentication.mechanism`
  have been set to one or more of the following values: `SCRAM-SHA-512` but Kong Gateway
  versions < 2.8.1.1 do not support these values.'
- 'D122: For the `mtls-auth` plugin, one or more of the following `config` fields
  are set: `http_proxy_host`, `http_proxy_port`, `https_proxy_host`, `https_proxy_port`
  but Kong Gateway versions < 2.8.1.1 do not support these fields.'
- 'D123: It seems you are using Konnect Developer Portal with Kong Gateway. For the
  Developer Portal’s application registration feature to work correctly, `konnect-application-auth`
  plugin is required but this plugin is not available on Kong Gateway versions < 3.0.0.0.'
- 'D124: For the `ldap-auth-advanced` plugin, one or more of the following `config`
  fields are set: `groups_required` but Kong Gateway versions < 3.0.0.0 do not support
  these fields.'
- 'D125: For the `opa` plugin, one or more of the following `config` fields are set:
  `include_body_in_opa_input`, `include_parsed_json_body_in_opa_input`, `ssl_verify`
  but Kong Gateway versions < 3.0.0.0 do not support these fields.'
- 'D126: For the `statsd-advanced` plugin, one or more of the following `config` fields
  are set: `consumer_identifier_default`, `service_identifier_default`, `workspace_identifier_default`
  but Kong Gateway versions < 3.0.0.0 do not support these fields.'
- 'D127: For the `rate-limiting-advanced` plugin, `config.sync_rate` was set to a
  float value less than 1.0. This configuration is not supported in Kong Gateway versions
  < 2.6.0.0.'
- 'D128: For the `openid-connect` plugin, `config.anonymous` field has been set to
  a string value that is not a UUID, possibly to reference a consumer via username.'
- 'D129: Konnect cloud’s Developer Portal’s application registration workflow requires
  features introduced in Kong Gateway 3.0.0.0.'
- 'D130: For the `Plugin` entity, the `ordering` field has been set but Kong Gateway
  versions < 3.0 do not support plugin re-ordering.'
- 'D131: For the `service` entity, `protocol` field has been set to `ws` or `wss`.
  This is not supported in Kong Gateway versions < 3.0.0.0.'
- 'D132: For the `route` entity or associated `service`, `protocol` field has been
  set to `ws` or `wss`. This is not supported in Kong Gateway versions < 3.0.0.0.'
- 'D133: For the `plugin` entity, `protocol` field has been set to `ws` or `wss`.
  This is not supported in Kong Gateway versions < 3.0.0.0.'
- 'D134: Plugin `websocket-validator` is not available in Kong Gateway versions <
  3.0.0.0.'
- 'D135: Plugin `websocket-size-limit` is not available in Kong Gateway versions <
  3.0.0.0.'
- 'D136: Plugin `tls-handshake-modifier` is not available in Kong Gateway versions
  < 3.0.0.0.'
- 'D137: Plugin `tls-metadata-headers` is not available in Kong Gateway versions <
  3.0.0.0.'
- 'D138: For the `forward-proxy` plugin, one or more of the following `config` fields
  are set: `x_headers` but Kong Gateway versions < 3.1.0.0 do not support these fields.'
- 'D139: For the `mtls-auth` plugin, one or more of the following `config` fields
  are set: `send_ca_dn` but Kong Gateway versions < 3.1.0.0 do not support these fields.'
- 'D140: For the `route-transformer-advanced` plugin `config.escape_path` is set.
  This is not supported in Kong Gateway versions < 2.8.2.0 and in Kong Gateway versions
  > 3.0.x.x.'
- 'D141: Plugin `app-dynamics` is not available in Kong Gateway versions < 3.1.0.0.'
- 'D142: Plugin `saml` is not available in Kong Gateway versions < 3.1.0.0.'
- 'D143: Plugin `jwe-decrypt` is not available in Kong Gateway versions < 3.1.0.0.'
- 'D144: Plugin `xml-threat-protection` is not available in Kong Gateway versions
  < 3.1.0.0.'
- 'D145: For the `rate-limiting-advanced` plugin, one or more of the following `config`
  fields are set: `error_code`, `error_message`, `disable_penalty` but Kong Gateway
  versions < 3.1.0.0 do not support these fields.'
- 'D146: For the `vaults` entity, one or more of the following schema fields are set:
  `auth_method`, `kube_role`, `kube_api_token_file` but Kong Gateway versions < 3.1.0.0
  do not support these fields.'
- 'D147: The `consumer_group` entity is being used, but Kong Gateway versions < 2.8.0.0
  do not support this entity.'
- 'D148: As part of the `Consumer Groups` feature, some Consumers have been set to
  belong to one or more of such groups but Kong Gateway versions < 2.8 do not support
  Consumer Groups.'
- 'D149: As part of the `Consumer Groups` feature, some Rate Limiting Advanced overrides
  have been to one of such groups but Kong Gateway versions < 2.8 do not support Consumer
  Groups.'
- 'D150: For the `mocking` plugin, one or more of the following `config` fields are
  set: `included_status_codes`, `random_status_code` but Kong Gateway versions < 3.1.0.0
  do not support these fields.'
- 'D151: For the `oauth2-introspection` plugin, `config.anonymous` field has been
  set to a string value that is not a UUID, possibly to reference a consumer via username.'
- 'For the `datadog` plugin, one or more of the following `config` fields are set:
  `queue` but Kong Gateway versions < 3.3.0.0 do not support these fields.'
- 'For the `http-log` plugin, one or more of the following `config` fields are set:
  `retry_count`, `queue_size`, `flush_timeout` but Kong Gateway versions >= 3.3.0.0
  do not support these fields.'
- 'For the `statsd` plugin, one or more of the following `config` fields are set:
  `retry_count`, `queue_size`, `flush_timeout` but Kong Gateway versions >= 3.3.0.0
  do not support these fields.'
- 'For the `opentelemetry` plugin, one or more of the following `config` fields are
  set: `batch_span_count`, `batch_flush_delay` but Kong Gateway versions >= 3.3.0.0
  do not support these fields.'
- 'For the vault entity, one or more of the following schema fields are set: endpoint_url,
  assume_role_arn, role_session_name but Kong Gateway versions < 3.4.3.5 do not support
  these fields.'
- For the vault entity, the config contains one or more Azure vault entity. This is
  not supported in Kong Gateway versions < 3.4.3.5.
- 'For the session plugin, one or more of the following config fields are set: read_body_for_logout
  but Kong Gateway versions < 3.5.0.0 do not support these fields.'
- 'For the vault entity, one or more of the following schema fields are set: kube_auth_path
  but Kong Gateway versions < 3.4.3.4 do not support these fields.'
- One or more services have been configured with an underscore in the host field.
  This is only supported for Kong Gateway parity and it is not compliant with RFC0952.
- The priority exceeds the value of 2^46, which may cause loss of precision in the
  Data Plane Node.
- Recursive OpenAPI specification found in the oas-validation plugin configuration.
  The api_spec must not have recursive elements for data plane nodes < 3.5.0.0.
- The filter_chains entity is being used, but Kong Gateway versions < 3.5.0.0 do not
  support this entity.
- For the ip-restriction plugin, instances have been configured on a specific consumer_group.
  This is not supported in Kong Gateway versions < 3.6.0.0.
- For the proxy-cache plugin, instances have been configured on a specific consumer_group.
  This is not supported in Kong Gateway versions < 3.6.0.0.
- For the rate-limiting plugin, instances have been configured on a specific consumer_group.
  This is not supported in Kong Gateway versions < 3.6.0.0.
- For the request-termination plugin, instances have been configured on a specific
  consumer_group. This is not supported in Kong Gateway versions < 3.6.0.0.
- 'For the acl plugin, one or more of the following config fields are set: include_consumer_groups
  but Kong Gateway versions < 3.6.0.0 do not support these fields.'
- 'For the session plugin, one or more of the following config fields are set: sampling_rate
  but Kong Gateway versions < 3.6.0.0 do not support these fields.'
- One or more filter chain entities have been configured, but wasm support is not
  enabled on one or more data plane nodes.
- Plugin ai-proxy is not available in Kong Gateway versions < 3.6.0.0.
- For the vault entity, one or more instances are configured with HCV approle settings.
  This is not supported in Kong Gateway versions < 3.6.0.0.
- Plugin ai-prompt-template is not available in Kong Gateway versions < 3.6.0.0.
- Plugin ai-prompt-decorator is not available in Kong Gateway versions < 3.6.0.0.
- For the hmac-auth plugin, the algorithms field contains the hmac-sha1 value but
  FIPS-enabled Kong Gateways do not support it.
- For Kong Gateway version >= 3.4.0.0, configuration of rate limiting advanced plugin
  overrides on consumer groups is deprecated.
- Plugin ai-prompt-guard is not available in Kong Gateway versions < 3.6.0.0.
- 'For the key-auth plugin, one or more of the following config fields are set: realm
  but Kong Gateway versions < 3.7.0.0 do not support these fields.'
- 'For the basic-auth plugin, one or more of the following config fields are set:
  realm but Kong Gateway versions < 3.6.0.0 do not support these fields.'
- Plugin ai-request-transformer is not available in Kong Gateway versions < 3.6.0.0.
- Plugin ai-response-transformer is not available in Kong Gateway versions < 3.6.0.0.
- For the acme plugin, one or more config fields are set but Kong Gateway versions
  < 3.6.0.0 do not support these fields.
- For the rate-limiting plugin, one or more config fields are set but Kong Gateway
  versions < 3.6.0.0 do not support these fields.
- For the response-ratelimiting plugin, one or more config fields are set but Kong
  Gateway versions < 3.6.0.0 do not support these fields.
- 'For the opentelemetry plugin, one or more of the following config fields are set:
  propagation but Kong Gateway versions < 3.7.0.0 do not support these fields.'
- 'For the zipkin plugin, one or more of the following config fields are set: propagation
  but Kong Gateway versions < 3.7.0.0 do not support these fields.'
- 'For the `response-ratelimiting` plugin, one or more of the following `config` fields
  are set: `redis_username`, `redis.username` but Kong Gateway versions < 2.8.0.0
  do not support these fields. Plugin features that rely on these fields are not working
  as intended.'
- Plugin `opentelemetry` is not available in Kong Gateway versions < 3.0.0.0.
- 'For the `zipkin` plugin, one or more of the following `config` fields are set:
  `http_span_name`, `connect_timeout`, `send_timeout`, `read_timeout` but Kong Gateway
  versions < 3.0.0.0 do not support these fields. Plugin features that rely on these
  fields are not working as intended.'
- 'For the `prometheus` plugin, one or more of the following `config` fields are set:
  `status_code_metrics`, `latency_metrics`, `bandwidth_metrics`, `upstream_health_metrics`
  but Kong Gateway versions < 3.0.0.0 do not support these fields. Plugin features
  that rely on these fields are not working as intended.'
- 'For the `acme` plugin, one or more of the following `config` fields are set: `allow_any_domain`
  but Kong Gateway versions < 3.0.0.0 do not support these fields. Plugin features
  that rely on these fields are not working as intended.'
- For the `Service` entity, `enabled` field has been set to `true` but Kong Gateway
  versions < 2.7.0.0 do not support this feature. The Service has been left enabled
  in the Kong Gateway, and the traffic for the Service is being routed by Kong Gateway.
  This is a critical error and may result in unwanted traffic being routed to the
  upstream Services via Kong Gateway.
- 'For the `aws-lambda` plugin, one or more of the following `config` fields are set:
  `proxy_scheme` but Kong Gateway versions >= 3.0.0.0 do not support these fields.
  Plugin features that rely on these fields are not working as intended.'
- For the `pre-function` plugin, `config.functions` field has been used. This is not
  supported in Kong Gateway versions >= 3.0.0.0. The plugin configuration has been
  updated to rename `config.functions` to `config.access` in the data-plane.
- For the `post-function` plugin, `config.functions` field has been used. This is
  not supported in Kong Gateway versions >= 3.0.0.0. The plugin configuration has
  been updated to rename `config.functions` to `config.access` in the data-plane.
- 'For the `upstream` entity, one or more of the following schema fields are set:
  `hash_on_query_arg`, `hash_fallback_query_arg`, `hash_on_uri_capture`, `hash_fallback_uri_capture`
  but Kong Gateway versions < 3.0.0.0 do not support these fields.'
- 'For the `upstreams` entity, one or more of the `hash_on, hash_fallback` schema
  fields are set with one of the following values: path, query_arg, uri_capture, but
  Kong Gateway versions < 3.0.0.0 do not support these values.'
- 'For the `statsd` plugin, one or more of the following metrics are being used: `shdict_usage`,
  `status_count_per_user_per_route`, `status_count_per_workspace`, but Kong Gateway
  versions < 3.0.0.0 do not support these. These metrics have been removed from the
  `statsd` plugin configuration and features that rely on them are not working as
  intended.'
- 'For the `statsd` plugin, one or more metrics have one or more of the following
  fields set: `workspace_identifier`, `service_identifier`. These fields are unsupported
  in Kong Gateway versions < 3.0.0.0 and have been removed. Features that rely on
  these removed fields are not working as intended.'
- For the `statsd` plugin, one or more metrics don’t have the `consumer_identifier`
  field set. For these metrics, the value of the `consumer_identifier` field has been
  set to `custom_id`.
- 'For the `statsd` plugin, one or more of the following `config` fields are set:
  `allow_status_codes`, `udp_packet_size`, `use_tcp`, `hostname_in_prefix`, `consumer_identifier_default`,
  `service_identifier_default`, `workspace_identifier_default` but Kong Gateway versions
  < 3.0.0.0 do not support these fields. Plugin features that rely on these fields
  are not working as intended.'
- Tags that contain space characters () are not supported on Kong gateway versions
  < 3.0.0.0. As such, all tag values that contain space characters have been removed.
- The `vaults` entity is being used, but Kong Gateway versions < 3.1.0.0 do not support
  this entity.
- 'For the `zipkin` plugin, one or more of the following `config` fields are set:
  `http_response_header_for_traceid` but Kong Gateway versions < 3.1.0.0 do not support
  these fields. Plugin features that rely on these fields are not working as intended.'
- 'For the `rate-limiting` plugin, one or more of the following `config` fields are
  set: `error_code`, `error_message` but Kong Gateway versions < 3.1.0.0 do not support
  these fields. Plugin features that rely on these fields are not working as intended.'
- 'For the `acme` plugin, one or more of the following `config` fields are set: `storage_config.redis.ssl`,
  `storage_config.redis.ssl_verify`, `storage_config.redis.ssl_server_name`, `storage_config.redis.server_name`
  but Kong Gateway versions < 3.1.0.0 do not support these fields. Plugin features
  that rely on these fields are not working as intended.'
- 'For the `response-ratelimiting` plugin, one or more of the following `config` fields
  are set: `redis_ssl`, `redis_ssl_verify`, `redis_server_name`, `redis.ssl`, `redis.ssl_verify`,
  `redis.server_name` but Kong Gateway versions < 3.1.0.0 do not support these fields.
  Plugin features that rely on these fields are not working as intended.'
- 'For the `aws-lambda` plugin, one or more of the following `config` fields are set:
  `aws_assume_role_arn`, `aws_role_session_name` but Kong Gateway versions < 2.8.1.3
  do not support these fields. Plugin features that rely on these fields are not working
  as intended.'
- The `keys` entity is being used, but Kong Gateway versions < 3.1.0.0 do not support
  this entity.
- The `key_sets` entity is being used, but Kong Gateway versions < 3.1.0.0 do not
  support this entity.
- 'For the `pre-function` plugin, one or more of the following `config` fields are
  set: `ws_handshake`, `ws_client_frame`, `ws_upstream_frame`, `ws_close` but Kong
  Gateway versions < 3.0.0.0 do not support these fields. Plugin features that rely
  on these fields are not working as intended.'
- 'For the `post-function` plugin, one or more of the following `config` fields are
  set: `ws_handshake`, `ws_client_frame`, `ws_upstream_frame`, `ws_close` but Kong
  Gateway versions < 3.0.0.0 do not support these fields. Plugin features that rely
  on these fields are not working as intended.'
- 'For the `acme` plugin, one or more of the following `config` fields are set: `enable_ipv4_common_name`
  but Kong Gateway versions < 3.1.0.0 do not support these fields. Plugin features
  that rely on these fields are not working as intended.'
- 'For the `datadog` plugin, one or more of the following `config` fields are set:
  `retry_count`, `queue_size`, `flush_timeout` but Kong Gateway versions < 3.1.0.0
  do not support these fields. Plugin features that rely on these fields are not working
  as intended.'
- 'For the `session` plugin, one or more of the following `config` fields are set:
  `cookie_persistent` but Kong Gateway versions < 3.1.0.0 do not support these fields.
  Plugin features that rely on these fields are not working as intended.'
- 'For the `plugin` entity, one or more of the following schema fields are set: `instance_name`
  but Kong Gateway versions < 3.2.0.0 do not support these fields.'
- 'For the `zipkin` plugin, one or more of the following `config` fields are set:
  `phase_duration_flavor` but Kong Gateway versions < 3.2.0.0 do not support these
  fields. Plugin features that rely on these fields are not working as intended.'
- For the `upstreams` entity, the `algorithm` field is set to `latency` but Kong Gateway
  versions < 3.2.0.0 do not support this value. Because of this, `algorithm` has been
  set to the default value `round-robin` and features depending on the `latency` algorithm
  may not work as expected.
- 'For the `statsd` plugin, one or more of the following `config` fields are set:
  `retry_count`, `queue_size`, `flush_timeout` but Kong Gateway versions < 3.1.0.0
  do not support these fields. Plugin features that rely on these fields are not working
  as intended.'
- 'For the `statsd` plugin, one or more of the following `config` fields are set:
  `tag_style` but Kong Gateway versions < 3.2.0.0 do not support these fields. Plugin
  features that rely on these fields are not working as intended.'
- For the `statsd` plugin, one or more default metrics have been configured with a
  non-default stat_type. This is not supported in Kong Gateway versions < 3.1.0.0.
- 'For the `session` plugin, one or more of the following `config` fields are set:
  `audience`, `absolute_timeout`, `remember_cookie_name`, `remember_rolling_timeout`,
  `remember_absolute_timeout`, `response_headers`, `request_headers` but Kong Gateway
  versions < 3.2.0.0 do not support these fields. Plugin features that rely on these
  fields are not working as intended.'
- 'For the `session` plugin, one or more `config` fields are set but Kong Gateway
  versions < 3.2.0.0 do not support these fields. The plugin configuration has been
  updated and these fields have been mapped to their old names: `rolling_timeout`
  => `cookie_lifetime`, `idling_timeout` => `cookie_idletime`, `stale_ttl` => `cookie_discard`,
  `cookie_same_site` => `cookie_samesite`, `cookie_http_only` => `cookie_httponly`.'
- 'For the `session` plugin, one or more of the following `config` fields are set:
  `cookie_renew` but Kong Gateway versions >= 3.2.0.0 do not support these fields.
  Plugin features that rely on these fields are not working as intended.'
- 'For the `session` plugin, one or more of the following `config` fields are set:
  `remember` but Kong Gateway versions < 3.1.0.0 do not support these fields. Plugin
  features that rely on these fields are not working as intended.'
- For the `session` plugin, `config.cookie_same_site` has been set to `Default`. This
  is not supported in Kong Gateway versions < 3.2.0.0. The plugin configuration has
  been changed to the `config.cookie_same_site=Lax` in the data-plane (default value).
- 'For the `aws-lambda` plugin, the following `config` field is set: aws_imds_protocol_version,
  but Kong Gateway versions <2.8.3.0 and >=3.0.0.0,<3.2.0.0 do not support it. Plugin
  features that rely on this field are not working as intended.'
- For the `opentelemetry` plugin, instances have been configured on a specific service,
  route, or consumer. This is not supported in Kong Gateway versions < 3.2.0.0. The
  plugin has been removed in the data-plane.
- For the `graphql-rate-limiting-advanced` plugin on Kong Gateway versions <3.2.0.0,
  the `cluster` option is not supported on hybrid mode. The plugin instance has been
  removed to avoid system crashes.
- 'For the `ai-request-transformer` plugin, one or more instances are configured with
  `llm.model.provider` field set to: `gemini` but Kong Gateway versions < 3.8.0.0
  do not support this value.'
- 'For the `ai-response-transformer` plugin, one or more instances are configured
  with `llm.model.provider` field set to: `gemini` but Kong Gateway versions < 3.8.0.0
  do not support this value.'
- 'For the `ai-proxy` plugin, one or more instances are configured with `model.provider`
  field set to: `bedrock` but Kong Gateway versions < 3.8.0.0 do not support this
  value.'
- 'unable to update running config: bad config received from Control Plane'
- 'Access Denied: user cannot access the resource'
- '404 Not Found: No Route matched with those values'
- '401 Unauthorized: No API key found in request'
- '429 Too Many Requests: API rate limit exceeded'
- '200 OK: Successful request'
- '401 Unauthorized: Invalid API key'
- 'CLIENT_ERROR: Failures in network requests.'
- 'http_429: Too many requests.'
- 'http_502: Bad gateway.'
- '400 Bad Request: If any deny expressions are set and the request matches any regex
  pattern in the deny list.'
- '503 Service Temporarily Unavailable: failure to get a peer from the ring-balancer'
- '503 Service Unavailable: Indicates the service is unavailable due to unhealthy
  pods.'
- 'message: no Kong listen with the requested protocol is configured for the requested
  port'
- 'reason: PortUnavailable'
- 'Error from server: admission webhook "validations.kong.konghq.com" denied the request:
  consumer already exists'
- 'Error from server: admission webhook "validations.kong.konghq.com" denied the request:
  plugin failed schema validation: schema violation (config.foo: unknown field)'
- 'Error from server: admission webhook "validations.kong.konghq.com" denied the request:
  consumer credential failed validation: missing required field(s): password'
- 'Error from server: admission webhook "validations.kong.konghq.com" denied the request:
  consumer credential failed validation: invalid credential type wrong-auth'
- 'Error from server: admission webhook "validations.kong.konghq.com" denied the request:
  HTTPRoute failed schema validation: schema violation (paths.1: invalid regex: ''/echo/**/broken''
  (PCRE returned: pcre_compile() failed: nothing to repeat in "/echo/**/broken" at
  "*/broken"))'
- '401 Unauthorized: Recheck credentials or consumer assignments'
- You cannot consume this service
- '429 Too Many Requests: Rate limit exceeded.'
- '404 Not Found: Check if the control plane ID is correct.'
- 'Connection refused: Verify all services are running.'
- '400 Bad Request: Check the request parameters.'
- '401 Unauthorized: Verify the access token.'
- '404 Not Found: Check the endpoint path.'
- Serious security vulnerabilities are treated with the utmost priority.
- Bugs which result in production outages or effective non-operation will be remedied
  through high priority bug fixes.
- '429 Too Many Requests: retry after waiting for 1 to 30 seconds.'
- 'REQUEST_TIMEOUT: Check network settings or proxy configuration.'
- '429 Too Many Requests: Retry after a delay as per the retry rules.'
- '200: Successful authentication'
- '401 Unauthorized: Recheck credentials'
- 'Unauthorized: Invalid credentials or token expired.'
- '401 Unauthorized: Recheck API key or permissions'
- '401 Unauthorized: Invalid credentials.'
- '401 Unauthorized: No API key is provided or the API key is not known to Kong Gateway.'
- '403 Forbidden: You cannot consume this service'
- '403 Forbidden: Service is protected by authentication.'
- '401 Unauthorized: Recheck JWT token or Consumer credentials.'
auth_info:
  mentioned_objects:
  - OauthToken
  - AuthProvider
  - Consumer
  - Gateway Service
  - API
  - AccessRole
  - AccessRoleBinding
  - KongCustomEntity
  - KongPlugin
  - KONNECT_TOKEN
  - KONNECT_CONTROL_PLANE_ID
  - OAuth2
  - Token
  - OpenID Connect
  - Client
  - Okta App Client ID
  - Okta App Client Secret
  - issuer URL
  - JWT
  - Keycloak
  - jwt_secrets
client:
  base_url: https://us.api.konghq.com
  auth:
    type: key-auth
source_metadata: null
