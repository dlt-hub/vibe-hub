resources:
- name: craneLib
  endpoint:
    path: /craneLib
    method: GET
    data_selector: records
- name: buildTrunkPackage
  endpoint:
    path: /buildTrunkPackage
    method: GET
    data_selector: records
- name: cargoAudit
  endpoint:
    path: /cargoAudit
    method: GET
    data_selector: records
- name: cargoDeny
  endpoint:
    path: /cargoDeny
    method: GET
    data_selector: records
- name: cargoBuild
  endpoint:
    path: /cargoBuild
    method: GET
    data_selector: records
- name: cargoClippy
  endpoint:
    path: /cargoClippy
    method: GET
    data_selector: records
- name: cargoDoc
  endpoint:
    path: /cargoDoc
    method: GET
    data_selector: records
- name: cargoDocTest
  endpoint:
    path: /cargoDocTest
    method: GET
    data_selector: records
- name: cargoFmt
  endpoint:
    path: /cargoFmt
    method: GET
    data_selector: records
- name: taploFmt
  endpoint:
    path: /taploFmt
    method: GET
    data_selector: records
- name: cargoLlvmCov
  endpoint:
    path: /cargoLlvmCov
    method: GET
    data_selector: records
- name: cargoNextest
  endpoint:
    path: cargoNextest
    method: RUN
    data_selector: set
    params: {}
- name: cargoTarpaulin
  endpoint:
    path: cargoTarpaulin
    method: RUN
    data_selector: set
    params: {}
- name: cargoTest
  endpoint:
    path: cargoTest
    method: RUN
    data_selector: set
    params: {}
- name: cleanCargoSource
  endpoint:
    path: cleanCargoSource
    method: CLEAN
    data_selector: path or drv
    params: {}
- name: cleanCargoToml
  endpoint:
    path: cleanCargoToml
    method: CLEAN
    data_selector: set
    params: {}
- name: cargo_toml
  endpoint:
    path: ./Cargo.toml
    method: GET
    data_selector: dependencies
    params: {}
- name: cleanCargoToml
  endpoint:
    path: ./.
    method: POST
    data_selector: dependencies
    params: {}
- name: crateNameFromCargoToml
  endpoint:
    path: ./Cargo.toml
    method: POST
    data_selector: package
    params: {}
- name: downloadCargoPackage
  endpoint:
    path: /downloadCargoPackage
    method: POST
    data_selector: set
    params:
      checksum: sha256
      name: crate
      source: source
      version: version
- name: downloadCargoPackageFromGit
  endpoint:
    path: /downloadCargoPackageFromGit
    method: POST
    data_selector: set
    params:
      git: url
      rev: revision
      allRefs: 'true'
      ref: ref
      sha256: sha256
- name: findCargoFiles
  endpoint:
    path: /findCargoFiles
    method: GET
    data_selector: set of lists
    params:
      path: path
- name: configureCargoVendoredDepsHook
  endpoint:
    path: /configureCargoVendoredDepsHook
    method: POST
    data_selector: void
    params:
      cargoVendorDir: path
      configFile: path
- name: filterCargoSources
  endpoint:
    path: /filterCargoSources
    method: GET
    data_selector: boolean
    params:
      path: path
      string: string
- name: cleanCargoToml
  endpoint:
    path: ./Cargo.toml
    method: set
    data_selector: dependencies
    params: {}
- name: crateNameFromCargoToml
  endpoint:
    path: ./Cargo.toml
    method: set
    data_selector: pname
    params: {}
- name: crateRegistries
  endpoint:
    path: ./Cargo.toml
    method: set
    data_selector: pname
    params: {}
- name: devShell
  endpoint:
    path: ./Cargo.toml
    method: set
    data_selector: packages
    params: {}
- name: downloadCargoPackage
  endpoint:
    path: ./Cargo.toml
    method: set
    data_selector: checksum
    params: {}
- name: downloadCargoPackageFromGit
  endpoint:
    path: ./Cargo.toml
    method: set
    data_selector: git
    params: {}
- name: findCargoFiles
  endpoint:
    path: ./src
    method: set
    data_selector: cargoTomls
    params: {}
- name: filterCargoSources
  endpoint:
    path: ./.
    method: set
    data_selector: src
    params: {}
- name: cargoTomlAndLock
  endpoint:
    path: craneLib.fileset.cargoTomlAndLock
    method: GET
    data_selector: fileset
    params: {}
- name: commonCargoSources
  endpoint:
    path: craneLib.fileset.commonCargoSources
    method: GET
    data_selector: fileset
    params: {}
- name: rust
  endpoint:
    path: craneLib.fileset.rust
    method: GET
    data_selector: fileset
    params: {}
- name: toml
  endpoint:
    path: craneLib.fileset.toml
    method: GET
    data_selector: fileset
    params: {}
- name: configureCargoVendoredDeps
  endpoint:
    path: craneLib.configureCargoVendoredDepsHook
    method: GET
    data_selector: configure
    params: {}
- name: mkCrossToolchainEnv
  endpoint:
    path: craneLib.mkCrossToolchainEnv
    method: GET
    data_selector: env
    params: {}
- name: mkDummySrc
  endpoint:
    path: craneLib.mkDummySrc
    method: GET
    data_selector: drv
    params: {}
- name: cleanCargoToml
  endpoint:
    path: ./craneLib.cleanCargoToml
    method: GET
    data_selector: records
    params: {}
- name: crateNameFromCargoToml
  endpoint:
    path: ./craneLib.crateNameFromCargoToml
    method: GET
    data_selector: records
    params: {}
- name: crateRegistries
  endpoint:
    path: ./craneLib.crateRegistries
    method: GET
    data_selector: records
    params: {}
- name: devShell
  endpoint:
    path: ./craneLib.devShell
    method: GET
    data_selector: records
    params: {}
- name: downloadCargoPackage
  endpoint:
    path: ./craneLib.downloadCargoPackage
    method: GET
    data_selector: records
    params: {}
- name: downloadCargoPackageFromGit
  endpoint:
    path: ./craneLib.downloadCargoPackageFromGit
    method: GET
    data_selector: records
    params: {}
- name: findCargoFiles
  endpoint:
    path: ./craneLib.findCargoFiles
    method: GET
    data_selector: records
    params: {}
- name: filterCargoSources
  endpoint:
    path: ./craneLib.filterCargoSources
    method: GET
    data_selector: records
    params: {}
- name: filesetCargoTomlAndLock
  endpoint:
    path: ./craneLib.fileset.cargoTomlAndLock
    method: GET
    data_selector: records
    params: {}
- name: filesetCommonCargoSources
  endpoint:
    path: ./craneLib.fileset.commonCargoSources
    method: GET
    data_selector: records
    params: {}
- name: filesetConfigToml
  endpoint:
    path: ./craneLib.fileset.configToml
    method: GET
    data_selector: records
    params: {}
- name: filesetRust
  endpoint:
    path: ./craneLib.fileset.rust
    method: GET
    data_selector: records
    params: {}
- name: filesetToml
  endpoint:
    path: ./craneLib.fileset.toml
    method: GET
    data_selector: records
    params: {}
- name: mkCargoDerivation
  endpoint:
    path: ./craneLib.mkCargoDerivation
    method: GET
    data_selector: records
    params: {}
- name: mkCrossToolchainEnv
  endpoint:
    path: ./craneLib.mkCrossToolchainEnv
    method: GET
    data_selector: records
    params: {}
- name: mkDummySrc
  endpoint:
    path: ./craneLib.mkDummySrc
    method: GET
    data_selector: records
    params: {}
- name: overrideToolchain
  endpoint:
    path: overrideToolchain
    method: function
    data_selector: set
    params: {}
- name: path
  endpoint:
    path: path
    method: function
    data_selector: path
    params: {}
- name: cleanCargoToml
  endpoint:
    path: ./.
    method: POST
    data_selector: dependencies
- name: crateNameFromCargoToml
  endpoint:
    path: ./Cargo.toml
    method: POST
    data_selector: pname
- name: crateRegistries
  endpoint:
    path: ./Cargo.lock
    method: POST
    data_selector: registries
- name: devShell
  endpoint:
    path: ./.
    method: POST
    data_selector: shell
- name: downloadCargoPackage
  endpoint:
    path: ./Cargo.lock
    method: POST
    data_selector: package
- name: downloadCargoPackageFromGit
  endpoint:
    path: ./git-repo
    method: POST
    data_selector: git
- name: findCargoFiles
  endpoint:
    path: ./src
    method: GET
    data_selector: cargoFiles
- name: filterCargoSources
  endpoint:
    path: ./.
    method: POST
    data_selector: filteredSources
- name: fileset.cargoTomlAndLock
  endpoint:
    path: ./
    method: GET
    data_selector: files
- name: fileset.commonCargoSources
  endpoint:
    path: ./.
    method: GET
    data_selector: commonFiles
- name: fileset.configToml
  endpoint:
    path: ./.
    method: GET
    data_selector: configFiles
- name: fileset.rust
  endpoint:
    path: ./.
    method: GET
    data_selector: rustFiles
- name: fileset.toml
  endpoint:
    path: ./.
    method: GET
    data_selector: tomlFiles
- name: mkCargoDerivation
  endpoint:
    path: ./.
    method: POST
    data_selector: derivation
- name: mkCrossToolchainEnv
  endpoint:
    path: ./.
    method: POST
    data_selector: crossEnv
- name: mkDummySrc
  endpoint:
    path: ./.
    method: POST
    data_selector: dummySrc
- name: registryFromDownloadUrl
  endpoint:
    path: /craneLib/registryFromDownloadUrl
    method: GET
    data_selector: dl
    params: {}
- name: configureCargoVendoredDepsHook
  endpoint:
    path: /craneLib/configureCargoVendoredDepsHook
    method: GET
    data_selector: configureCargoVendoredDeps
    params: {}
- name: cleanCargoToml
  endpoint:
    path: ./.
    method: POST
    data_selector: dependencies
    params:
      cargoToml: ./Cargo.toml
- name: crateNameFromCargoToml
  endpoint:
    path: ./.
    method: POST
    data_selector: pname
    params:
      cargoToml: ./Cargo.toml
- name: crateRegistries
  endpoint:
    path: ./.
    method: POST
    data_selector: registries
    params:
      src: ./
- name: devShell
  endpoint:
    path: ./.
    method: POST
    data_selector: shell
    params: {}
- name: downloadCargoPackage
  endpoint:
    path: ./.
    method: POST
    data_selector: vendor
    params:
      checksum: sha256
      name: crate_name
      source: source_key
      version: crate_version
- name: downloadCargoPackageFromGit
  endpoint:
    path: ./.
    method: POST
    data_selector: git_package
    params:
      git: repository_url
      rev: revision
- name: findCargoFiles
  endpoint:
    path: ./.
    method: POST
    data_selector: files
    params:
      path: ./src
- name: filterCargoSources
  endpoint:
    path: ./.
    method: POST
    data_selector: filtered_sources
    params:
      path: ./src
- name: mkCargoDerivation
  endpoint:
    path: ./.
    method: POST
    data_selector: derivation
    params:
      buildPhaseCargoCommand: cargo build
      cargoArtifacts: ./target
- name: mkCrossToolchainEnv
  endpoint:
    path: ./.
    method: POST
    data_selector: cross_toolchain
    params: {}
- name: mkDummySrc
  endpoint:
    path: ./.
    method: POST
    data_selector: dummy_src
    params:
      src: ./src
- name: configureCargoVendoredDeps
  endpoint:
    path: /cranelib/configureCargoVendoredDeps
    method: POST
    data_selector: data
    params: {}
- name: vendorMultipleCargoDeps
  endpoint:
    path: /cranelib/vendorMultipleCargoDeps
    method: POST
    data_selector: data
    params: {}
- name: cleanCargoToml
  endpoint:
    path: ./.
    method: POST
    data_selector: dependencies
    params: {}
- name: crateNameFromCargoToml
  endpoint:
    path: ./Cargo.toml
    method: POST
    data_selector: pname
    params: {}
- name: crateRegistries
  endpoint:
    path: ./Cargo.toml
    method: POST
    data_selector: registries
    params: {}
- name: devShell
  endpoint:
    path: ./.
    method: POST
    data_selector: devShell
    params: {}
- name: downloadCargoPackage
  endpoint:
    path: ./Cargo.lock
    method: POST
    data_selector: package
    params: {}
- name: downloadCargoPackageFromGit
  endpoint:
    path: ./.
    method: POST
    data_selector: git
    params: {}
- name: findCargoFiles
  endpoint:
    path: ./src
    method: POST
    data_selector: cargoFiles
    params: {}
- name: filterCargoSources
  endpoint:
    path: ./.
    method: POST
    data_selector: filteredSources
    params: {}
- name: filesetCargoTomlAndLock
  endpoint:
    path: ./.
    method: POST
    data_selector: fileset
    params: {}
- name: filesetCommonCargoSources
  endpoint:
    path: ./.
    method: POST
    data_selector: commonSources
    params: {}
- name: filesetConfigToml
  endpoint:
    path: ./.
    method: POST
    data_selector: configToml
    params: {}
- name: filesetRust
  endpoint:
    path: ./.
    method: POST
    data_selector: rustFiles
    params: {}
- name: filesetToml
  endpoint:
    path: ./.
    method: POST
    data_selector: tomlFiles
    params: {}
- name: mkCargoDerivation
  endpoint:
    path: ./.
    method: POST
    data_selector: derivation
    params: {}
- name: mkCrossToolchainEnv
  endpoint:
    path: ./.
    method: POST
    data_selector: crossEnv
    params: {}
- name: mkDummySrc
  endpoint:
    path: ./.
    method: POST
    data_selector: dummySrc
    params: {}
- name: registryFromDownloadUrl
  endpoint:
    path: registryFromDownloadUrl
    method: POST
    data_selector: registry
    params:
      dl: https://static.crates.io/crates
      indexUrl: https://github.com/rust-lang/crates.io-index
- name: registryFromGitIndex
  endpoint:
    path: registryFromGitIndex
    method: POST
    data_selector: registry
    params:
      indexUrl: https://github.com/Hirevo/alexandrie-index
      rev: 90df25daf291d402d1ded8c32c23d5e1498c6725
- name: registryFromSparse
  endpoint:
    path: registryFromSparse
    method: POST
    data_selector: registry
    params:
      indexUrl: https://index.crates.io/config.json
      configSha256: 1cxgzdm1ipqmgwnq7kgym92axna7pfyhgfla63vl7dvydwn3m52v
- name: cargoLock
  endpoint:
    path: src + /Cargo.lock
    method: GET
- name: dummyrs
  endpoint:
    path: 'an empty fn main declaration and conditionally enabled #![no_std] if the
      target_os cfg is set to none or uefi'
    method: GET
- name: dummyBuildrs
  endpoint:
    path: 'dummyrs, if specified, otherwise, an empty fn main declaration and conditionally
      enabled #![no_std] if the target_os cfg is set to none or uefi'
    method: GET
- name: extraDummyScript
  endpoint:
    path: ''
    method: GET
- name: cargo_dependencies
  endpoint:
    path: /cargo/dependencies
    method: GET
- name: clippy_checks
  endpoint:
    path: /clippy/checks
    method: GET
- name: code_coverage_tests
  endpoint:
    path: /code/coverage
    method: GET
- name: crate_build
  endpoint:
    path: /crate/build
    method: GET
- name: my-crate
  endpoint:
    path: /my-crate
    method: GET
- name: my-crate
  endpoint:
    path: /api/v1/crates/{crate}/{version}/download
    method: GET
- name: my-crate
  endpoint:
    path: /
    method: GET
    data_selector: checks
    params: {}
- name: my-crate
  endpoint:
    path: ./myCrate.nix
    method: CALL
    data_selector: checks
- name: my-app
  endpoint:
    path: /my-app
    method: GET
- name: serve-app
  endpoint:
    path: /serve-app
    method: GET
- name: server
  endpoint:
    path: /services/data/vXX.X/sobjects/Server
    method: GET
- name: client
  endpoint:
    path: /services/data/vXX.X/sobjects/Client
    method: GET
- name: my-crate
  endpoint:
    path: /
    method: N/A
    data_selector: N/A
    params: {}
- name: source_filtering
  endpoint:
    path: /source/filtering
    method: GET
    data_selector: records
- name: fileset_filtering
  endpoint:
    path: /fileset/filtering
    method: GET
    data_selector: records
- name: mkCargoDerivation
  endpoint:
    path: /API.html#libmkcargoderivation
    method: GET
    data_selector: reference
- name: my-crate
  endpoint:
    path: my-crate.nix
    method: GET
    data_selector: records
    params: {}
- name: vendorCargoDeps
  endpoint:
    path: /vendorCargoDeps
    method: POST
- name: overrideVendorGitCheckout
  endpoint:
    path: /overrideVendorGitCheckout
    method: POST
- name: overrideVendorCargoPackage
  endpoint:
    path: /overrideVendorCargoPackage
    method: POST
- name: nixpkgs
  endpoint:
    path: /mkLib
    method: POST
    data_selector: results
- name: aws-lc-sys
  endpoint:
    path: /craneLib.buildPackage
    method: POST
    data_selector: options
    params: {}
- name: my-crate
  endpoint:
    path: /my-crate
    method: GET
    data_selector: records
    params: {}
- name: my-crate
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params: {}
- name: my-crate
  endpoint:
    path: ./my-crate.nix
    method: N/A
    data_selector: N/A
    params: {}
- name: myCrateClippy
  endpoint:
    path: /myCrateClippy
    method: GET
    data_selector: records
- name: myCrateCoverage
  endpoint:
    path: /myCrateCoverage
    method: GET
    data_selector: records
- name: myCrate
  endpoint:
    path: /myCrate
    method: GET
    data_selector: records
- name: my-crate
  endpoint:
    path: /my-crate
    method: GET
    data_selector: records
- name: cargo_awesome
  endpoint:
    path: /cargo/awesome
    method: GET
- name: cargo_project
  endpoint:
    path: /cargo/project
    method: POST
    data_selector: project_data
    params: {}
- name: my-app
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
- name: cargoAwesome
  endpoint:
    path: /cargo/awesome
    method: POST
    data_selector: cargoArtifacts
    params: {}
- name: cargoVendorDir
  endpoint:
    path: /cargo/vendor
    method: POST
    data_selector: vendorCargoDeps
    params: {}
- name: buildDepsOnly
  endpoint:
    path: /buildDepsOnly
    method: GET
    data_selector: records
- name: buildPackage
  endpoint:
    path: /buildPackage
    method: GET
    data_selector: records
- name: cargoAudit
  endpoint:
    path: /cargoAudit
    method: GET
    data_selector: records
- name: cargoDeny
  endpoint:
    path: /cargoDeny
    method: GET
    data_selector: records
- name: cargoBuild
  endpoint:
    path: /cargoBuild
    method: GET
    data_selector: records
- name: cargoClippy
  endpoint:
    path: /cargoClippy
    method: GET
    data_selector: records
- name: cargoDoc
  endpoint:
    path: /cargoDoc
    method: GET
    data_selector: records
- name: cargoDocTest
  endpoint:
    path: /cargoDocTest
    method: GET
    data_selector: records
- name: cargoFmt
  endpoint:
    path: cargoFmt
    method: set
    data_selector: drv
- name: taploFmt
  endpoint:
    path: taploFmt
    method: set
    data_selector: drv
- name: cargoLlvmCov
  endpoint:
    path: cargoLlvmCov
    method: set
    data_selector: drv
- name: cargoNextest
  endpoint:
    path: cargoNextest
    method: set
    data_selector: drv
- name: cargoTarpaulin
  endpoint:
    path: cargoTarpaulin
    method: set
    data_selector: drv
- name: cargoTest
  endpoint:
    path: cargoTest
    method: set
    data_selector: drv
- name: cleanCargoSource
  endpoint:
    path: cleanCargoSource
    method: path or drv
    data_selector: drv
- name: cleanCargoToml
  endpoint:
    path: cleanCargoToml
    method: set
    data_selector: set
- name: myCrate
  endpoint:
    path: /crates/myCrate
    method: POST
    data_selector: output
    params: {}
- name: my-app
  endpoint:
    path: /services/data/vXX.X/sobjects/MyApp
    method: GET
    data_selector: records
    params: {}
- name: cargoAudit
  endpoint:
    path: /cargo/audit
    method: POST
    data_selector: audit_result
    params: {}
- name: cargoDeny
  endpoint:
    path: /cargo/deny
    method: POST
    data_selector: deny_result
    params: {}
- name: cargoBuild
  endpoint:
    path: /cargo/build
    method: POST
    data_selector: build_result
    params: {}
- name: cargoClippy
  endpoint:
    path: /cargo/clippy
    method: POST
    data_selector: clippy_result
    params: {}
- name: cargoDoc
  endpoint:
    path: /cargo/doc
    method: POST
    data_selector: doc_result
    params: {}
- name: cargoFmt
  endpoint:
    path: /cargo/fmt
    method: POST
    data_selector: fmt_result
    params: {}
- name: cargoLlvmCov
  endpoint:
    path: /cargo/llvm-cov
    method: POST
    data_selector: llvm_cov_result
    params: {}
- name: cargoNextest
  endpoint:
    path: cargoNextest
    method: set
    data_selector: drv
- name: cargoTarpaulin
  endpoint:
    path: cargoTarpaulin
    method: set
    data_selector: drv
- name: cargoTest
  endpoint:
    path: cargoTest
    method: set
    data_selector: drv
- name: cleanCargoSource
  endpoint:
    path: cleanCargoSource
    method: path or drv
    data_selector: drv
- name: cleanCargoToml
  endpoint:
    path: cleanCargoToml
    method: set
    data_selector: set
- name: myCrateClippy
  endpoint:
    path: /cargoClippy
    method: GET
    data_selector: records
- name: myCrateCoverage
  endpoint:
    path: /cargoTarpaulin
    method: GET
    data_selector: records
- name: myCrate
  endpoint:
    path: /buildPackage
    method: GET
    data_selector: records
- name: my-app
  endpoint:
    path: /services/data/vXX.X/sobjects/MyApp
    method: GET
    data_selector: records
- name: my-crate
  endpoint:
    path: /services/data/vXX.X/sobjects/MyCrate
    method: POST
    data_selector: records
- name: cargo_awesome
  endpoint:
    path: /cargo/awesome
    method: GET
- name: cargoAudit
  endpoint:
    path: /craneLib/cargoAudit
    method: POST
    data_selector: results
- name: cargoDeny
  endpoint:
    path: /craneLib/cargoDeny
    method: POST
    data_selector: results
- name: cargoBuild
  endpoint:
    path: /craneLib/cargoBuild
    method: POST
    data_selector: results
- name: cargoClippy
  endpoint:
    path: /craneLib/cargoClippy
    method: POST
    data_selector: results
- name: cargoDoc
  endpoint:
    path: /craneLib/cargoDoc
    method: POST
    data_selector: results
- name: cargoFmt
  endpoint:
    path: /craneLib/cargoFmt
    method: POST
    data_selector: results
- name: cargoTest
  endpoint:
    path: /craneLib/cargoTest
    method: POST
    data_selector: results
- name: cargoDocTest
  endpoint:
    path: /craneLib/cargoDocTest
    method: POST
    data_selector: results
- name: cargoLlvmCov
  endpoint:
    path: /craneLib/cargoLlvmCov
    method: POST
    data_selector: results
- name: taploFmt
  endpoint:
    path: /craneLib/taploFmt
    method: POST
    data_selector: results
- name: cargoNextest
  endpoint:
    method: run
    data_selector: set
- name: cargoTarpaulin
  endpoint:
    method: run
    data_selector: set
- name: cargoTest
  endpoint:
    method: run
    data_selector: set
- name: cleanCargoSource
  endpoint:
    method: clean
    data_selector: path or drv
- name: cleanCargoToml
  endpoint:
    method: clean
    data_selector: set
- name: crateNameFromCargoToml
  endpoint:
    method: extract
    data_selector: set
- name: downloadCargoPackage
  endpoint:
    path: /downloadCargoPackage
    method: POST
- name: downloadCargoPackageFromGit
  endpoint:
    path: /downloadCargoPackageFromGit
    method: POST
- name: findCargoFiles
  endpoint:
    path: /findCargoFiles
    method: GET
- name: myCrateClippy
  endpoint:
    path: cargoClippy
    method: GET
- name: myCrateCoverage
  endpoint:
    path: cargoTarpaulin
    method: GET
- name: myCrate
  endpoint:
    path: buildPackage
    method: POST
- name: my-crate
  endpoint:
    path: /my-crate
    method: GET
    data_selector: records
    params: {}
- name: buildPackage
  endpoint:
    path: /buildPackage
    method: POST
    data_selector: result
    params: {}
- name: mkCargoDerivation
  endpoint:
    path: /mkCargoDerivation
    method: POST
    data_selector: result
    params: {}
- name: cargoAudit
  endpoint:
    path: /cargoAudit
    method: GET
    data_selector: records
- name: cargoDeny
  endpoint:
    path: /cargoDeny
    method: GET
    data_selector: records
- name: cargoBuild
  endpoint:
    path: /cargoBuild
    method: GET
    data_selector: records
- name: cargoClippy
  endpoint:
    path: /cargoClippy
    method: GET
    data_selector: records
- name: cargoDoc
  endpoint:
    path: /cargoDoc
    method: GET
    data_selector: records
- name: cargoDocTest
  endpoint:
    path: /cargoDocTest
    method: GET
    data_selector: records
- name: cargoFmt
  endpoint:
    path: /cargoFmt
    method: GET
    data_selector: records
- name: taploFmt
  endpoint:
    path: /taploFmt
    method: GET
    data_selector: records
- name: cargoLlvmCov
  endpoint:
    path: /cargoLlvmCov
    method: GET
    data_selector: records
- name: cargoNextest
  endpoint:
    path: craneLib.cargoNextest
    method: SET
    data_selector: drv
    params: {}
- name: cargoTarpaulin
  endpoint:
    path: craneLib.cargoTarpaulin
    method: SET
    data_selector: drv
    params: {}
- name: cargoTest
  endpoint:
    path: craneLib.cargoTest
    method: SET
    data_selector: drv
    params: {}
- name: cleanCargoSource
  endpoint:
    path: craneLib.cleanCargoSource
    method: SET
    data_selector: drv
    params: {}
- name: cleanCargoToml
  endpoint:
    path: craneLib.cleanCargoToml
    method: SET
    data_selector: set
    params: {}
- name: crateNameFromCargoToml
  endpoint:
    path: craneLib.crateNameFromCargoToml
    method: SET
    data_selector: set
    params: {}
- name: crateRegistries
  endpoint:
    path: craneLib.crateRegistries
    method: SET
    data_selector: set
    params: {}
- name: devShell
  endpoint:
    path: craneLib.devShell
    method: SET
    data_selector: drv
    params: {}
- name: downloadCargoPackage
  endpoint:
    path: craneLib.downloadCargoPackage
    method: SET
    data_selector: drv
    params: {}
- name: downloadCargoPackageFromGit
  endpoint:
    path: craneLib.downloadCargoPackageFromGit
    method: SET
    data_selector: drv
    params: {}
- name: findCargoFiles
  endpoint:
    path: craneLib.findCargoFiles
    method: SET
    data_selector: set
    params: {}
- name: my-crate
  endpoint:
    path: /services/data/vXX.X/sobjects/my-crate
    method: GET
    data_selector: records
- name: cargoAwesome
  endpoint:
    path: cargo/awesome
    method: GET
- name: buildPackage
  endpoint:
    path: build/package
    method: POST
- name: cargoAudit
  endpoint:
    buildPhaseCargoCommand: cargo audit -n -d ${advisory-db}
    cargoArtifacts: null
    doInstallCargoArtifacts: false
    pnameSuffix: -audit
    src: Cargo.lock
- name: cargoDeny
  endpoint:
    buildPhaseCargoCommand: cargo --offline $cargoExtraArgs deny $cargoDenyExtraArgs
      check $cargoDenyChecks
    cargoArtifacts: null
    doInstallCargoArtifacts: false
    pnameSuffix: -deny
- name: cargoBuild
  endpoint:
    buildPhaseCargoCommand: cargo build --profile release
    pnameSuffix: -build
- name: cargoClippy
  endpoint:
    buildPhaseCargoCommand: cargo clippy --profile release
    pnameSuffix: -clippy
- name: cargoDoc
  endpoint:
    buildPhaseCargoCommand: cargo doc --profile release
    doInstallCargoArtifacts: false
    pnameSuffix: -doc
- name: cargoDocTest
  endpoint:
    buildPhaseCargoCommand: cargo test --profile release
    pnameSuffix: -doctest
- name: cargoFmt
  endpoint:
    buildPhaseCargoCommand: cargo fmt
    cargoArtifacts: null
    cargoVendorDir: null
    pnameSuffix: -fmt
- name: taploFmt
  endpoint:
    buildPhaseCargoCommand: taplo fmt
    cargoArtifacts: null
    cargoVendorDir: null
    pnameSuffix: -tomlfmt
- name: cargoLlvmCov
  endpoint:
    buildPhaseCargoCommand: cargo llvm-cov test --release
    installPhaseCommand: ''
    doInstallCargoArtifacts: false
    pnameSuffix: -llvm-cov
- name: cargoNextest
  endpoint:
    path: /craneLib/cargoNextest
    method: GET
    data_selector: records
- name: cargoTarpaulin
  endpoint:
    path: /craneLib/cargoTarpaulin
    method: GET
    data_selector: records
- name: cargoTest
  endpoint:
    path: /craneLib/cargoTest
    method: GET
    data_selector: records
- name: cleanCargoSource
  endpoint:
    path: /craneLib/cleanCargoSource
    method: GET
    data_selector: records
- name: cleanCargoToml
  endpoint:
    path: /craneLib/cleanCargoToml
    method: GET
    data_selector: records
- name: crateNameFromCargoToml
  endpoint:
    path: /craneLib/crateNameFromCargoToml
    method: GET
    data_selector: records
- name: crateRegistries
  endpoint:
    path: /craneLib/crateRegistries
    method: GET
    data_selector: records
- name: devShell
  endpoint:
    path: /craneLib/devShell
    method: GET
    data_selector: records
- name: downloadCargoPackage
  endpoint:
    path: /craneLib/downloadCargoPackage
    method: GET
    data_selector: records
- name: downloadCargoPackageFromGit
  endpoint:
    path: /craneLib/downloadCargoPackageFromGit
    method: GET
    data_selector: records
- name: findCargoFiles
  endpoint:
    path: /craneLib/findCargoFiles
    method: GET
    data_selector: records
- name: filterCargoSources
  endpoint:
    path: /craneLib/filterCargoSources
    method: GET
    data_selector: records
- name: fileset.cargoTomlAndLock
  endpoint:
    path: /craneLib/fileset/cargoTomlAndLock
    method: GET
    data_selector: records
- name: fileset.commonCargoSources
  endpoint:
    path: /craneLib/fileset/commonCargoSources
    method: GET
    data_selector: records
- name: fileset.configToml
  endpoint:
    path: /craneLib/fileset/configToml
    method: GET
    data_selector: records
- name: fileset.rust
  endpoint:
    path: /craneLib/fileset/rust
    method: GET
    data_selector: records
- name: fileset.toml
  endpoint:
    path: /craneLib/fileset/toml
    method: GET
    data_selector: records
- name: mkCargoDerivation
  endpoint:
    path: /craneLib/mkCargoDerivation
    method: GET
    data_selector: records
- name: mkCrossToolchainEnv
  endpoint:
    path: /mkCrossToolchainEnv
    method: GET
    data_selector: records
- name: mkDummySrc
  endpoint:
    path: /mkDummySrc
    method: GET
    data_selector: records
- name: overrideToolchain
  endpoint:
    path: overrideToolchain
    method: GET
    data_selector: records
- name: path
  endpoint:
    path: path
    method: GET
    data_selector: records
- name: myCrate
  endpoint:
    path: ./
    method: build
    data_selector: packages.default
    params: {}
- name: myCrateClippy
  endpoint:
    path: ./
    method: cargoClippy
    data_selector: checks.myCrateClippy
    params: {}
- name: myCrateCoverage
  endpoint:
    path: ./
    method: cargoTarpaulin
    data_selector: checks.myCrateCoverage
    params: {}
- name: my-crate
  endpoint:
    path: /
    method: GET
    data_selector: records
    params: {}
- name: workspace
  endpoint:
    path: /services/data/vXX.X/sobjects/Workspace
    method: GET
    data_selector: records
- name: buildPackage
  endpoint:
    path: /buildPackage
    method: POST
    data_selector: result
    params: {}
- name: mkCargoDerivation
  endpoint:
    path: /mkCargoDerivation
    method: POST
    data_selector: result
    params: {}
- name: cargoAudit
  endpoint:
    path: /cargo/audit
    method: POST
    data_selector: results
    params: {}
- name: cargoDeny
  endpoint:
    path: /cargo/deny
    method: POST
    data_selector: results
    params: {}
- name: cargoBuild
  endpoint:
    path: /cargo/build
    method: POST
    data_selector: results
    params: {}
- name: cargoClippy
  endpoint:
    path: /cargo/clippy
    method: POST
    data_selector: results
    params: {}
- name: cargoDoc
  endpoint:
    path: /cargo/doc
    method: POST
    data_selector: results
    params: {}
- name: cargoFmt
  endpoint:
    path: /cargo/fmt
    method: POST
    data_selector: results
    params: {}
- name: cargoLlvmCov
  endpoint:
    path: /cargo/llvm-cov
    method: POST
    data_selector: results
    params: {}
- name: cargo_nextest
  endpoint:
    path: null
    method: null
    data_selector: null
    params: {}
- name: cargo_tarpaulin
  endpoint:
    path: null
    method: null
    data_selector: null
    params: {}
- name: cargo_test
  endpoint:
    path: null
    method: null
    data_selector: null
    params: {}
- name: clean_cargo_source
  endpoint:
    path: null
    method: null
    data_selector: null
    params: {}
- name: clean_cargo_toml
  endpoint:
    path: null
    method: null
    data_selector: null
    params: {}
- name: crate_name_from_cargo_toml
  endpoint:
    path: null
    method: null
    data_selector: null
    params: {}
- name: crate_registries
  endpoint:
    path: null
    method: null
    data_selector: null
    params: {}
- name: dev_shell
  endpoint:
    path: null
    method: null
    data_selector: null
    params: {}
- name: download_cargo_package
  endpoint:
    path: null
    method: null
    data_selector: null
    params: {}
- name: download_cargo_package_from_git
  endpoint:
    path: null
    method: null
    data_selector: null
    params: {}
- name: find_cargo_files
  endpoint:
    path: null
    method: null
    data_selector: null
    params: {}
- name: filter_cargo_sources
  endpoint:
    path: null
    method: null
    data_selector: null
    params: {}
- name: fileset_cargo_toml_and_lock
  endpoint:
    path: null
    method: null
    data_selector: null
    params: {}
- name: fileset_common_cargo_sources
  endpoint:
    path: null
    method: null
    data_selector: null
    params: {}
- name: fileset_config_toml
  endpoint:
    path: null
    method: null
    data_selector: null
    params: {}
- name: fileset_rust
  endpoint:
    path: null
    method: null
    data_selector: null
    params: {}
- name: fileset_toml
  endpoint:
    path: null
    method: null
    data_selector: null
    params: {}
- name: mk_cargo_derivation
  endpoint:
    path: null
    method: null
    data_selector: null
    params: {}
- name: mkCrossToolchainEnv
  endpoint:
    path: mkCrossToolchainEnv
    method: GET
- name: mkDummySrc
  endpoint:
    path: mkDummySrc
    method: GET
- name: overrideToolchain
  endpoint:
    path: overrideToolchain
    method: GET
- name: path
  endpoint:
    path: path
    method: GET
- name: registry
  endpoint:
    path: /registryFromDownloadUrl
    method: GET
    data_selector: dl
    params: {}
- name: my-app
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
- name: buildPackage
  endpoint:
    path: /buildPackage
    method: POST
- name: mkCargoDerivation
  endpoint:
    path: /mkCargoDerivation
    method: POST
- name: vendorCargoDeps
  endpoint:
    path: /vendorCargoDeps
    method: POST
- name: cargoAudit
  endpoint:
    buildPhaseCargoCommand: cargo audit -n -d ${advisory-db}
    cargoArtifacts: null
    doInstallCargoArtifacts: false
    pnameSuffix: -audit
    src: Cargo.lock
- name: cargoDeny
  endpoint:
    buildPhaseCargoCommand: cargo --offline $cargoExtraArgs deny $cargoDenyExtraArgs
      check $cargoDenyChecks
    cargoArtifacts: null
    doInstallCargoArtifacts: false
    pnameSuffix: -deny
    cargoDenyChecks: bans licenses sources
- name: cargoBuild
  endpoint:
    buildPhaseCargoCommand: cargo build --profile release
    cargoArtifacts: null
    pnameSuffix: -build
- name: cargoClippy
  endpoint:
    buildPhaseCargoCommand: cargo clippy --profile release
    cargoArtifacts: null
    pnameSuffix: -clippy
- name: cargoDoc
  endpoint:
    buildPhaseCargoCommand: cargo doc --profile release
    cargoArtifacts: null
    doInstallCargoArtifacts: false
    pnameSuffix: -doc
- name: cargoDocTest
  endpoint:
    buildPhaseCargoCommand: cargo test --profile release
    pnameSuffix: -doctest
- name: cargoFmt
  endpoint:
    buildPhaseCargoCommand: cargo fmt
    cargoArtifacts: null
    cargoVendorDir: null
    pnameSuffix: -fmt
- name: taploFmt
  endpoint:
    buildPhaseCargoCommand: taplo fmt
    cargoArtifacts: null
    cargoVendorDir: null
    pnameSuffix: -tomlfmt
- name: cargoLlvmCov
  endpoint:
    buildPhaseCargoCommand: cargo llvm-cov test --release
    installPhaseCommand: ''
    doInstallCargoArtifacts: false
    pnameSuffix: -llvm-cov
- name: cargoNextest
  endpoint:
    path: cargoNextest
    method: set
    data_selector: drv
- name: cargoTarpaulin
  endpoint:
    path: cargoTarpaulin
    method: set
    data_selector: drv
- name: cargoTest
  endpoint:
    path: cargoTest
    method: set
    data_selector: drv
- name: cleanCargoSource
  endpoint:
    path: cleanCargoSource
    method: path or drv
    data_selector: drv
- name: cleanCargoToml
  endpoint:
    path: cleanCargoToml
    method: set
    data_selector: set
- name: crateNameFromCargoToml
  endpoint:
    path: crateNameFromCargoToml
    method: set
    data_selector: set
- name: crateRegistries
  endpoint:
    path: crateRegistries
    method: set
    data_selector: set
- name: devShell
  endpoint:
    path: devShell
    method: set
    data_selector: drv
- name: downloadCargoPackage
  endpoint:
    path: downloadCargoPackage
    method: set
    data_selector: drv
- name: downloadCargoPackageFromGit
  endpoint:
    path: downloadCargoPackageFromGit
    method: set
    data_selector: drv
- name: findCargoFiles
  endpoint:
    path: findCargoFiles
    method: path
    data_selector: set of lists
- name: filterCargoSources
  endpoint:
    path: filterCargoSources
    method: path
    data_selector: string
- name: fileset.cargoTomlAndLock
  endpoint:
    path: fileset.cargoTomlAndLock
    method: path
    data_selector: fileset
- name: fileset.commonCargoSources
  endpoint:
    path: fileset.commonCargoSources
    method: path
    data_selector: fileset
- name: fileset.configToml
  endpoint:
    path: fileset.configToml
    method: path
    data_selector: fileset
- name: fileset.rust
  endpoint:
    path: fileset.rust
    method: path
    data_selector: fileset
- name: fileset.toml
  endpoint:
    path: fileset.toml
    method: path
    data_selector: fileset
- name: mkCargoDerivation
  endpoint:
    path: mkCargoDerivation
    method: set
    data_selector: drv
- name: mkCrossToolchainEnv
  endpoint:
    path: mkCrossToolchainEnv
    method: GET
    data_selector: set
    params: {}
- name: mkDummySrc
  endpoint:
    path: mkDummySrc
    method: GET
    data_selector: set
    params: {}
- name: overrideToolchain
  endpoint:
    path: overrideToolchain
    method: GET
    data_selector: set
    params: {}
- name: registryFromDownloadUrl
  endpoint:
    path: registryFromDownloadUrl
    method: GET
    data_selector: set
    params: {}
- name: registryFromGitIndex
  endpoint:
    path: /services/data/vXX.X/registryFromGitIndex
    method: POST
    data_selector: url
    params:
      indexUrl: https://github.com/Hirevo/alexandrie-index
      rev: 90df25daf291d402d1ded8c32c23d5e1498c6725
- name: myCrateClippy
  endpoint:
    path: myCrateClippy
    method: GET
- name: myCrateCoverage
  endpoint:
    path: myCrateCoverage
    method: GET
- name: myCrate
  endpoint:
    path: myCrate
    method: GET
- name: my-crate
  endpoint:
    path: /my-crate
    method: GET
    data_selector: records
- name: my-app
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
- name: my-crate
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
- name: buildPackage
  endpoint:
    path: /buildPackage
    method: POST
    data_selector: result
    params: {}
- name: mkCargoDerivation
  endpoint:
    path: /mkCargoDerivation
    method: POST
    data_selector: result
    params: {}
- name: vendorCargoDeps
  endpoint:
    path: /vendorCargoDeps
    method: POST
    data_selector: result
    params: {}
- name: cargoAudit
  endpoint:
    path: /craneLib/cargoAudit
    method: POST
    data_selector: advisory-db
    params: {}
- name: cargoDeny
  endpoint:
    path: /craneLib/cargoDeny
    method: POST
    data_selector: cargoDenyChecks
    params: {}
- name: cargoBuild
  endpoint:
    path: /craneLib/cargoBuild
    method: POST
    data_selector: cargoArtifacts
    params: {}
- name: cargoClippy
  endpoint:
    path: /craneLib/cargoClippy
    method: POST
    data_selector: cargoClippyExtraArgs
    params: {}
- name: cargoDoc
  endpoint:
    path: /craneLib/cargoDoc
    method: POST
    data_selector: cargoDocExtraArgs
    params: {}
- name: cargoDocTest
  endpoint:
    path: /craneLib/cargoDocTest
    method: POST
    data_selector: cargoTestExtraArgs
    params: {}
- name: cargoFmt
  endpoint:
    path: /craneLib/cargoFmt
    method: POST
    data_selector: cargoExtraArgs
    params: {}
- name: taploFmt
  endpoint:
    path: /craneLib/taploFmt
    method: POST
    data_selector: taploExtraArgs
    params: {}
- name: cargoLlvmCov
  endpoint:
    path: /craneLib/cargoLlvmCov
    method: POST
    data_selector: cargoLlvmCovExtraArgs
    params: {}
- name: cargoNextest
  endpoint:
    path: cargoNextest
    method: set
    data_selector: null
    params: {}
- name: cargoTarpaulin
  endpoint:
    path: cargoTarpaulin
    method: set
    data_selector: null
    params: {}
- name: cargoTest
  endpoint:
    path: cargoTest
    method: set
    data_selector: null
    params: {}
- name: cleanCargoSource
  endpoint:
    path: cleanCargoSource
    method: path
    data_selector: null
    params: {}
- name: cleanCargoToml
  endpoint:
    path: cleanCargoToml
    method: set
    data_selector: null
    params: {}
- name: crateNameFromCargoToml
  endpoint:
    path: crateNameFromCargoToml
    method: set
    data_selector: null
    params: {}
- name: crateRegistries
  endpoint:
    path: crateRegistries
    method: set
    data_selector: null
    params: {}
- name: devShell
  endpoint:
    path: devShell
    method: set
    data_selector: null
    params: {}
- name: downloadCargoPackage
  endpoint:
    path: downloadCargoPackage
    method: set
    data_selector: null
    params: {}
- name: downloadCargoPackageFromGit
  endpoint:
    path: downloadCargoPackageFromGit
    method: set
    data_selector: null
    params: {}
- name: findCargoFiles
  endpoint:
    path: findCargoFiles
    method: path
    data_selector: null
    params: {}
- name: filterCargoSources
  endpoint:
    path: filterCargoSources
    method: path
    data_selector: null
    params: {}
- name: fileset.cargoTomlAndLock
  endpoint:
    path: cargoTomlAndLock
    method: path
    data_selector: null
    params: {}
- name: fileset.commonCargoSources
  endpoint:
    path: commonCargoSources
    method: path
    data_selector: null
    params: {}
- name: fileset.configToml
  endpoint:
    path: configToml
    method: path
    data_selector: null
    params: {}
- name: fileset.rust
  endpoint:
    path: rust
    method: path
    data_selector: null
    params: {}
- name: fileset.toml
  endpoint:
    path: toml
    method: path
    data_selector: null
    params: {}
- name: mkCargoDerivation
  endpoint:
    path: mkCargoDerivation
    method: set
    data_selector: null
    params: {}
- name: mkCrossToolchainEnv
  endpoint:
    path: mkCrossToolchainEnv
    method: GET
- name: mkDummySrc
  endpoint:
    path: mkDummySrc
    method: GET
- name: overrideToolchain
  endpoint:
    path: overrideToolchain
    method: GET
- name: registryFromDownloadUrl
  endpoint:
    path: registryFromDownloadUrl
    method: GET
- name: registryFromGitIndex
  endpoint:
    path: registryFromGitIndex
    method: GET
- name: registryFromSparse
  endpoint:
    path: registryFromSparse
    method: GET
- name: cargo
  endpoint:
    path: /craneLib/cargo
    method: GET
    data_selector: records
    params: {}
- name: myCrate
  endpoint:
    path: /
    method: GET
    data_selector: packages.default
- name: myCrateCoverage
  endpoint:
    path: /
    method: GET
    data_selector: checks.myCrateCoverage
- name: myCrateClippy
  endpoint:
    path: /
    method: GET
    data_selector: checks.myCrateClippy
- name: my-app
  endpoint:
    path: /services/data/vXX.X/sobjects/my-app
    method: GET
    data_selector: records
    params: {}
- name: cargoAudit
  endpoint:
    path: /cargo/audit
    method: POST
    data_selector: results
- name: cargoDeny
  endpoint:
    path: /cargo/deny
    method: POST
    data_selector: results
- name: cargoBuild
  endpoint:
    path: /cargo/build
    method: POST
    data_selector: results
- name: cargoClippy
  endpoint:
    path: /cargo/clippy
    method: POST
    data_selector: results
- name: cargoDoc
  endpoint:
    path: /cargo/doc
    method: POST
    data_selector: results
- name: cargoFmt
  endpoint:
    path: /cargo/fmt
    method: POST
    data_selector: results
- name: cargoLlvmCov
  endpoint:
    path: /cargo/llvm-cov
    method: POST
    data_selector: results
- name: cargoTest
  endpoint:
    path: /cargo/test
    method: POST
    data_selector: results
- name: cargoNextest
  endpoint:
    path: cargoNextest
    method: set
    data_selector: drv
- name: cargoTarpaulin
  endpoint:
    path: cargoTarpaulin
    method: set
    data_selector: drv
- name: cargoTest
  endpoint:
    path: cargoTest
    method: set
    data_selector: drv
- name: cleanCargoSource
  endpoint:
    path: cleanCargoSource
    method: path or drv
    data_selector: drv
- name: cleanCargoToml
  endpoint:
    path: cleanCargoToml
    method: set
    data_selector: set
- name: crateNameFromCargoToml
  endpoint:
    path: crateNameFromCargoToml
    method: set
    data_selector: set
- name: crateRegistries
  endpoint:
    path: crateRegistries
    method: set
    data_selector: set
- name: devShell
  endpoint:
    path: devShell
    method: set
    data_selector: drv
- name: downloadCargoPackage
  endpoint:
    path: downloadCargoPackage
    method: set
    data_selector: drv
- name: downloadCargoPackageFromGit
  endpoint:
    path: downloadCargoPackageFromGit
    method: set
    data_selector: drv
- name: findCargoFiles
  endpoint:
    path: findCargoFiles
    method: path
    data_selector: set of lists
- name: filterCargoSources
  endpoint:
    path: filterCargoSources
    method: path
    data_selector: string
- name: fileset
  endpoint:
    path: fileset
    method: path
    data_selector: fileset
- name: registryFromDownloadUrl
  endpoint:
    path: registryFromDownloadUrl
    method: POST
    data_selector: registry
    params: {}
- name: registryFromGitIndex
  endpoint:
    path: registryFromGitIndex
    method: POST
    data_selector: registry
    params: {}
- name: registryFromSparse
  endpoint:
    path: registryFromSparse
    method: POST
    data_selector: registry
    params: {}
- name: vendorGitDeps
  endpoint:
    path: /vendorGitDeps
    method: GET
    data_selector: lockPackages
    params: {}
- name: vendorMultipleCargoDeps
  endpoint:
    path: /vendorMultipleCargoDeps
    method: GET
    data_selector: cargoLockList
    params: {}
- name: writeTOML
  endpoint:
    path: /writeTOML
    method: POST
    data_selector: config
    params: {}
- name: myCrateClippy
  endpoint:
    path: /cargoClippy
    method: GET
- name: myCrateCoverage
  endpoint:
    path: /cargoTarpaulin
    method: GET
- name: myCrate
  endpoint:
    path: /buildPackage
    method: POST
- name: my-crate
  endpoint:
    path: /services/data/vXX.X/sobjects/my-crate
    method: GET
    data_selector: records
- name: my-app
  endpoint:
    path: /trunk-workspace
    method: GET
    data_selector: records
    params: {}
- name: my-crate
  endpoint:
    path: /sqlx
    method: GET
    data_selector: records
    params: {}
- name: buildPackage
  endpoint:
    path: /buildPackage
    method: POST
- name: mkCargoDerivation
  endpoint:
    path: /mkCargoDerivation
    method: POST
- name: vendorCargoDeps
  endpoint:
    path: /vendorCargoDeps
    method: POST
- name: cargoAudit
  endpoint:
    buildPhaseCargoCommand: cargo audit -n -d ${advisory-db}
    cargoArtifacts: null
    doInstallCargoArtifacts: false
    pnameSuffix: -audit
    src: Cargo.lock
- name: cargoDeny
  endpoint:
    buildPhaseCargoCommand: cargo --offline $cargoExtraArgs deny $cargoDenyExtraArgs
      check $cargoDenyChecks
    cargoArtifacts: null
    doInstallCargoArtifacts: false
    pnameSuffix: -deny
- name: cargoBuild
  endpoint:
    buildPhaseCargoCommand: cargo build --profile release
    pnameSuffix: -build
- name: cargoClippy
  endpoint:
    buildPhaseCargoCommand: cargo clippy --profile release
    pnameSuffix: -clippy
- name: cargoDoc
  endpoint:
    buildPhaseCargoCommand: cargo doc --profile release
    doInstallCargoArtifacts: false
    pnameSuffix: -doc
- name: cargoDocTest
  endpoint:
    buildPhaseCargoCommand: cargo test --profile release
    pnameSuffix: -doctest
- name: cargoFmt
  endpoint:
    buildPhaseCargoCommand: cargo fmt
    cargoArtifacts: null
    cargoVendorDir: null
    pnameSuffix: -fmt
- name: taploFmt
  endpoint:
    buildPhaseCargoCommand: taplo fmt
    cargoArtifacts: null
    cargoVendorDir: null
    pnameSuffix: -tomlfmt
- name: cargoLlvmCov
  endpoint:
    buildPhaseCargoCommand: cargo llvm-cov test --release
    installPhaseCommand: ''
    doInstallCargoArtifacts: false
    pnameSuffix: -llvm-cov
- name: Cargo.lock
  endpoint:
    path: /services/data/vXX.X/sobjects/Cargo.lock
    method: GET
    data_selector: records
- name: lockPackages
  endpoint:
    path: /path/to/Cargo.lock
    method: GET
    data_selector: '[[package]]'
- name: myCrateClippy
  endpoint:
    path: cargoClippy
    method: GET
    data_selector: records
- name: myCrateCoverage
  endpoint:
    path: cargoTarpaulin
    method: GET
    data_selector: records
- name: myCrate
  endpoint:
    path: buildPackage
    method: GET
    data_selector: records
- name: my-crate
  endpoint:
    path: /build
    method: POST
    data_selector: checks
    params: {}
- name: server
  endpoint:
    path: /path/to/your/server
    method: GET
    data_selector: records
- name: client
  endpoint:
    path: /path/to/your/client
    method: GET
    data_selector: records
- name: cargo_awesome
  endpoint:
    path: /cargo/awesome
    method: GET
    data_selector: records
- name: build_package
  endpoint:
    path: /build/package
    method: POST
    data_selector: records
- name: cargoAudit
  endpoint:
    path: /cargo/audit
    method: POST
    data_selector: results
    params: {}
- name: cargoDeny
  endpoint:
    path: /cargo/deny
    method: POST
    data_selector: results
    params: {}
- name: cargoBuild
  endpoint:
    path: /cargo/build
    method: POST
    data_selector: results
    params: {}
- name: cargoClippy
  endpoint:
    path: /cargo/clippy
    method: POST
    data_selector: results
    params: {}
- name: cargoDoc
  endpoint:
    path: /cargo/doc
    method: POST
    data_selector: results
    params: {}
- name: cargoFmt
  endpoint:
    path: /cargo/fmt
    method: POST
    data_selector: results
    params: {}
- name: taploFmt
  endpoint:
    path: /taplo/fmt
    method: POST
    data_selector: results
    params: {}
- name: cargoLlvmCov
  endpoint:
    path: /cargo/llvm-cov
    method: POST
    data_selector: results
    params: {}
- name: cargoNextest
  endpoint:
    path: craneLib.cargoNextest
    method: SET
    data_selector: drv
    params: {}
- name: cargoTarpaulin
  endpoint:
    path: craneLib.cargoTarpaulin
    method: SET
    data_selector: drv
    params: {}
- name: cargoTest
  endpoint:
    path: craneLib.cargoTest
    method: SET
    data_selector: drv
    params: {}
- name: cleanCargoSource
  endpoint:
    path: craneLib.cleanCargoSource
    method: SET
    data_selector: drv
    params: {}
- name: cleanCargoToml
  endpoint:
    path: craneLib.cleanCargoToml
    method: SET
    data_selector: set
    params: {}
- name: crateNameFromCargoToml
  endpoint:
    path: craneLib.crateNameFromCargoToml
    method: SET
    data_selector: set
    params: {}
- name: crateRegistries
  endpoint:
    path: craneLib.crateRegistries
    method: SET
    data_selector: set
    params: {}
- name: devShell
  endpoint:
    path: craneLib.devShell
    method: SET
    data_selector: drv
    params: {}
- name: downloadCargoPackage
  endpoint:
    path: craneLib.downloadCargoPackage
    method: SET
    data_selector: drv
    params: {}
- name: downloadCargoPackageFromGit
  endpoint:
    path: craneLib.downloadCargoPackageFromGit
    method: SET
    data_selector: drv
    params: {}
- name: findCargoFiles
  endpoint:
    path: craneLib.findCargoFiles
    method: SET
    data_selector: set of lists
    params: {}
- name: filterCargoSources
  endpoint:
    path: craneLib.filterCargoSources
    method: SET
    data_selector: string
    params: {}
- name: fileset.cargoTomlAndLock
  endpoint:
    path: craneLib.fileset.cargoTomlAndLock
    method: SET
    data_selector: fileset
    params: {}
- name: fileset.commonCargoSources
  endpoint:
    path: craneLib.fileset.commonCargoSources
    method: SET
    data_selector: fileset
    params: {}
- name: fileset.configToml
  endpoint:
    path: craneLib.fileset.configToml
    method: SET
    data_selector: fileset
    params: {}
- name: fileset.rust
  endpoint:
    path: craneLib.fileset.rust
    method: SET
    data_selector: fileset
    params: {}
- name: fileset.toml
  endpoint:
    path: craneLib.fileset.toml
    method: SET
    data_selector: fileset
    params: {}
- name: mkCargoDerivation
  endpoint:
    path: craneLib.mkCargoDerivation
    method: SET
    data_selector: drv
    params: {}
- name: mkCrossToolchainEnv
  endpoint:
    path: /mkCrossToolchainEnv
    method: GET
    data_selector: set
    params: {}
- name: mkDummySrc
  endpoint:
    path: /mkDummySrc
    method: GET
    data_selector: set
    params: {}
- name: overrideToolchain
  endpoint:
    path: /overrideToolchain
    method: GET
    data_selector: set
    params: {}
- name: registryFromDownloadUrl
  endpoint:
    path: /registryFromDownloadUrl
    method: GET
    data_selector: set
    params: {}
- name: registryFromGitIndex
  endpoint:
    path: /registryFromGitIndex
    method: GET
    data_selector: set
    params: {}
- name: registryFromSparse
  endpoint:
    path: /registryFromSparse
    method: GET
    data_selector: set
    params: {}
- name: urlForCargoPackage
  endpoint:
    path: /urlForCargoPackage
    method: GET
    data_selector: set
    params: {}
- name: vendorCargoDeps
  endpoint:
    path: /vendorCargoDeps
    method: GET
    data_selector: set
    params: {}
- name: vendorCargoRegistries
  endpoint:
    path: /vendorCargoRegistries
    method: GET
    data_selector: set
    params: {}
- name: lockPackages
  endpoint:
    path: /lockPackages
    method: GET
    data_selector: packages
- name: vendorGitDeps
  endpoint:
    path: /vendorGitDeps
    method: GET
    data_selector: deps
- name: vendorMultipleCargoDeps
  endpoint:
    path: /vendorMultipleCargoDeps
    method: GET
    data_selector: multipleDeps
- name: writeTOML
  endpoint:
    path: /writeTOML
    method: POST
    data_selector: result
- name: my-workspace-nextest
  endpoint:
    path: ./
    method: GET
    data_selector: records
- name: my-workspace-clippy
  endpoint:
    path: ./
    method: GET
    data_selector: records
notes:
- Uses mkLib to create a lib instance bound to the specified pkgs set.
- Default value for cargoLock is src + /Cargo.lock
- 'Default value for dummyrs is an empty fn main declaration and conditionally enabled
  #![no_std] if the target_os cfg is set to none or uefi'
- 'Default value for dummyBuildrs is dummyrs if specified, otherwise, an empty fn
  main declaration and conditionally enabled #![no_std] if the target_os cfg is set
  to none or uefi'
- Default value for extraDummyScript is an empty string
- 'Default value for dummyrs is an empty fn main declaration and conditionally enabled
  #![no_std] if the target_os cfg is set to "none" or "uefi".'
- 'Default value for dummyBuildrs is dummyrs, if specified, otherwise, an empty fn
  main declaration and conditionally enabled #![no_std] if the target_os cfg is set
  to "none" or "uefi".'
- Default value for extraDummyScript is "".
- If the registry in question has a stable download URL, use registryFromDownloadUrl.
- If the registry needs a special way of accessing crate sources, fetchurlExtraArgs
  can be used.
- Defines helper functions for internal use.
- Runs as a post-patch hook
- If not specified, the value of $cargoVendorDir will be used
- If not specified, the value of $CARGO_HOME/config.toml will be used
- If not specified, the value of $cargoArtifacts will be used
- If not specified, the value of $CARGO_TARGET_DIR will be used
- If not specified, the value of $out will be used
- If not specified, the value of $cargoBuildLog will be used
- Builds are dependent on the success of previous checks.
- Cross compiling a rust program for windows
- Build a cargo project which uses SQLx
- Setting NIX_DEBUG to a non-zero value will cause the builder to print out various
  variables and commands it will run.
- Sometimes it is useful for a downstream consumer of a derivation to override portions
  of its behavior.
- Nix will rebuild a derivation if any of its inputs change.
- Use a source cleaning function to avoid unnecessary builds.
- Changes to files outside the crate's source directory will trigger rebuilds.
- Nix will rebuild a derivation if any of its inputs change, which includes any file
  contained by the source that is passed in.
- An efficient way to debug such problems is to use nix-diff to compare the derivation
  build plans.
- Another way to debug such problems is to use nix derivation show -r to compare the
  derivation build plans.
- A regression was introduced sometime around Rust 1.71.1 which changed how debuginfo
  flags are passed to proc-macro crates when using a dev profile.
- The pyo3 crate uses checks $PYO3_PYTHON for a path to the python binary it should
  use during the build. If this environment variable is not set, pyo3 will look for
  whatever version of python is on the $PATH, which unfortunately results in the crate
  being rebuilt when $PATH changes.
- The way to remedy this is to explicitly set PYO3_PYTHON to point to the version
  of python that will be used by the derivation.
- If you are using rustPlatform.bindgenHook it is worth noting that it will propagate
  NIX_CFLAGS_COMPILE via BINDGEN_EXTRA_CLANG_ARGS.
- In order to support reproducible builds, this build hook will add -frandom-seed=...
  to NIX_CFLAGS_COMPILE based on the current derivation's hash.
- Since dependencies are built in a separate derivation as the main package, each
  derivation essentially gets a different value for -frandom-seed.
- A workaround for this is to set NIX_OUTPATH_USED_AS_RANDOM_SEED to any arbitrary
  10 character string for all derivations which share artifacts together.
- Dependency crates are vendored by reading `Cargo.lock` at evaluation time and not
  at build time.
- Using patches may result in a situation where new crates introduced by the patch
  cannot be found by cargo.
- It is possible to work around this limitation by patching `Cargo.lock` in a stand-alone
  derivation.
- In general, build scripts should not modify any files outside of OUT_DIR.
- It is not recommended to copy all vendored sources out of the Nix store.
- Most cargo projects have their Cargo.toml at the root of the source, but it's still
  possible to build a project where the Cargo.toml file is nested in a deeper directory.
- This error can occur when mixing components from two different Rust toolchains,
  for example, using `clippy` with artifacts produced from a different cargo version.
- Check the configuration for specifying the exact Rust toolchain to be used in the
  build.
- A typical project configuration will build a workspace's dependencies (without the
  actual sources) during the buildDepsOnly derivation, and later build the project's
  sources in a second derivation.
- Sometimes this results in problems if a build hook is accidentally configured to
  run in both derivations but expects to use the real sources.
- One sanity check if you are running into NotFound errors for flake checks, is to
  double check that the derivations built in checks have the appropriate sources.
- The checks attribute, which may have a my-workspace-nextest attribute that runs
  cargo-nextest, for example, by default only needs the commonArgs and cargoArtifacts
  in order to run tests.
- Assemble from source instead of using pre-assembled objects
- Ignore compiler warnings that cause windows cross-build to fail (because of -Werror)
- Fix missing <pthread.h> include
- On linux, use linux cc/cxx (default in cross compilation stdenv is mingw)
- Make necessary build tools available
- crane's stability guarantees only apply to what has been documented at the API level
- Take care when reaching deep into the internals
- Dummy sources now attempt to use the same name as their original source (minus the
  Nix store path and hash) to minimize errors with build scripts which expect their
  full path to not change between runs.
- Uses OAuth2 with refresh token — requires setup of connected app in api
- Some objects like Contact may return nulls in deeply nested fields
- Dropped compatibility for Nix versions below 2.11.0
- Dropped compatibility for nixpkgs-22.05. nixpkgs-22.11 and nixpkgs-unstable are
  fully supported
- Zstd compression of cargo artifacts now defaults to using as many cores as $NIX_BUILD_CORES
  allows for (or all available cores if it isn't defined)
- Your Toolchain must have the `wasm32-unknown-unknown` target installed
- Start with a comprehensive suite of tests
- If you need a custom rust toolchain (e.g. to build WASM targets)
- Your Toolchain must have the wasm32-unknown-unknown target installed
- craneLib.buildDepsOnly requires setting the build target
- craneLib.filterCargoSources will remove html, css, your assets folder
- All derivation attributes are delegated to mkCargoDerivation.
- Useful for caching incremental cargo builds.
- Ensure to set up the environment correctly before executing commands.
- cargo artifacts must be prepared via buildDepsOnly or any cargo-based derivation
  built with doInstallCargoArtifacts = true
- At least one of the input attributes must be specified for evaluation.
- Uses separate derivation for clippy checks, allowing granular control over rebuilds.
- For craneLib.buildDepsOnly to work you will need to set the build target
- You will need to set wasm-bindgen-cli to a version that matches your Cargo.lock
  file
- Nix considers that a derivation must be rebuilt whenever any of its inputs change,
  including all source files passed into the build.
- Source filtering is a technique Nix employs that allows for better caching by programmatically
  filtering out files which are known to not apply to the build before the inputs
  are hashed.
- Builds can be split up for granular control.
- Changing clippy flags will only rebuild the clippy derivation.
- For `craneLib.buildDepsOnly` to work you will need to set the build target
- '`craneLib.filterCargoSources` will remove html, css, your assets folder'
- Nix considers that a derivation must be rebuilt whenever any of its inputs change.
- Breaking changes can land on the master branch at any time, so it is recommended
  you use a versioning strategy when consuming this library.
- Dummy sources now attempt to use the same name as their original source to minimize
  errors with build scripts which expect their full path to not change between runs
- This API provides functions for building Nix packages using Cargo.
- This is a fairly low-level abstraction, so consider using `buildPackage` or `cargoBuild`
  if they fit your needs.
- Uses Cargo configurations specified in the project.
- A different set of dependency crates are being built between derivations.
- Another reason could be using different feature flags between derivations.
- Build process allows granular control over rebuilds.
- Source filtering is used to optimize builds by excluding unnecessary files.
- If the vendored directory path contains a file named config.toml, then its contents
  will be appended to the specified cargo config path.
- One easy workaround for this issue (besides enabling the `allow-import-from-derivation`
  option in Nix) is to explicitly set `{ pname = '...'; version = '...'; }` in the
  derivation.
- An efficient way to debug such problems is to use `nix-diff` to compare the derivation
  build plans.
- Another way to debug such problems is to use `nix derivation show -r` to compare
  the derivation build plans.
- Another potential pitfall is defining both `[package]` and `[workspace]` in the
  project's top-level `Cargo.toml` file.
- If the dependency crates are being rebuilt even after proper source filtering has
  been applied, check that the same Rust/Cargo toolchain is being used.
- A regression was introduced sometime around Rust 1.71.1 which changed how debuginfo
  flags are passed to proc-macro crates when using a `dev` profile.
- 'If you are building with a `dev` profile, you may want to set the following in
  `.cargo/config.toml`: [profile.dev.build-override] debug = false'
- The `pyo3` crate uses checks `$PYO3_PYTHON` for a path to the `python` binary it
  should use during the build.
- If you are using `rustPlatform.bindgenHook`, it is worth noting that it will propagate
  `NIX_CFLAGS_COMPILE` via `BINDGEN_EXTRA_CLANG_ARGS`.
- A workaround for this is to set `NIX_OUTPATH_USED_AS_RANDOM_SEED` to any arbitrary
  10 character string for all derivations which share artifacts together.
- By default, cargo will build the crate at the current directory when invoked; if
  the current directory holds a workspace, cargo will then build all crates within
  that workspace.
- Double check if the source passed into the derivation is being cleaned or filtered
  in any way.
- In general, most build scripts used by popular Rust projects are pretty good at
  only attempting to write to cargo's output directory.
- Highly recommended to use something like cargo-hakari to avoid cache misses when
  building various workspace crates.
- Some objects may return nulls in deeply nested fields
- The crane library can be instantiated with a specific version of nixpkgs.
- It can also be instantiated with a particular rust toolchain.
- Uses AWS_LC_SYS_PREBUILT_NASM to assemble from source instead of using pre-assembled
  objects
- CFLAGS set to ignore compiler warnings that cause windows cross-build to fail
errors:
- 'found invalid metadata files for crate: Check the configuration for specifying
  the exact Rust toolchain to be used in the build.'
- 'REQUEST_LIMIT_EXCEEDED: Throttle API calls or reduce frequency'
- 'QUERY_TIMEOUT: Break down filters or add selectivity'
- '401 Unauthorized: Recheck OAuth scopes or token expiration'
- 'BUILD_FAILED: Check your dependencies or toolchain settings'
- cannot build '/nix/store/...-source.drv' during evaluation because the option 'allow-import-from-derivation'
  is disabled
- a 'aarch64-darwin' with features {} is required to build '/nix/store/...', but I
  am a 'x86_64-linux' with features {}
auth_info:
  mentioned_objects: []
client:
  base_url: https://github.com/ipetkov/crane
  headers:
    Accept: application/json
source_metadata: null
