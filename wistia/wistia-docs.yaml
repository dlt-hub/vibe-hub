resources:
- name: stats_visitors
  endpoint:
    path: /stats/visitors/.json
    method: GET
- name: medias_archive
  endpoint:
    path: /v1/medias/archive.json
    method: PUT
- name: projects
  endpoint:
    path: /projects
    method: GET
- name: channel_episodes
  endpoint:
    path: /v1/channel_episodes
    method: GET
- name: customizations
  endpoint:
    path: /medias//customizations.json
    method: POST
- name: sharings
  endpoint:
    path: /projects//sharings/.json
    method: GET
- name: media
  endpoint:
    path: /medias
    method: GET
- name: media_stats
  endpoint:
    path: /v1/stats/medias//by_date.json
    method: GET
- name: captions_purchase
  endpoint:
    path: /medias//captions/purchase.json
    method: POST
- name: projects
  endpoint:
    path: /projects/
    method: GET
- name: create_post
  endpoint:
    path: /medias/{media-hashed-id}/trims
    method: POST
- name: captions
  endpoint:
    path: /medias//captions.json
    method: GET
    data_selector: captions
- name: create_trim
  endpoint:
    path: /v1/medias/{media-hashed-id}/trims
    method: POST
- name: oEmbed
  endpoint:
    path: /oembed
    method: GET
    data_selector: html
    params: {}
- name: transcript
  endpoint:
    path: /transcripts
    method: GET
    data_selector: transcripts
    params: {}
- name: project_sharing
  endpoint:
    path: /projects/{project-id}/sharings/{sharing-id}.json
    method: PUT
- name: channel_episodes
  endpoint:
    path: /v1/channels//channel_episodes/
    method: GET
- name: project
  endpoint:
    path: /projects
    method: POST
    data_selector: null
    params: {}
- name: customizations
  endpoint:
    path: /v1/medias//customizations.json
    method: PUT
- name: media
  endpoint:
    path: /medias/{media-hashed-id}.json
    method: DELETE
- name: captions
  endpoint:
    path: /medias//captions/.json
    method: GET
- name: channel_episode
  endpoint:
    path: /channels/{channel-id}/channel_episodes
    method: POST
- name: localizations
  endpoint:
    path: /medias//localizations/
    method: GET
- name: expiring_token
  endpoint:
    path: /v2/expiring_token
    method: POST
    data_selector: data
    params: {}
- name: video_embed
  endpoint:
    path: /embed/medias/{media_id}.jsonp
    method: GET
    data_selector: media
    params: {}
- name: copy_media
  endpoint:
    path: /medias/{media-hashed-id}/copy.json
    method: POST
- name: events_list
  endpoint:
    path: /v1/stats/events.json
    method: GET
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: events
  endpoint:
    path: /events/{event-key}.json
    method: GET
- name: media
  endpoint:
    path: /medias/.json
    method: GET
    data_selector: media
    params: {}
- name: channels
  endpoint:
    path: /channels/{id}
    method: GET
    data_selector: Channel
    params: {}
- name: tags
  endpoint:
    path: /tags
    method: GET
- name: sharings
  endpoint:
    path: /projects//sharings.json
    method: GET
- name: account
  endpoint:
    path: /account.json
    method: GET
    data_selector: account
    params: {}
- name: account
  endpoint:
    path: /v1/account.json
    method: GET
- name: customizations
  endpoint:
    path: /v1/medias//customizations.json
    method: PUT
- name: account
  endpoint:
    path: /stats/account.json
    method: GET
    data_selector: stats
- name: media
  endpoint:
    path: /medias
    method: GET
- name: project_list
  endpoint:
    path: /projects
    method: GET
- name: tags
  endpoint:
    path: /tags
    method: POST
- name: project_stats
  endpoint:
    path: /stats/projects/.json
    method: GET
- name: localizations
  endpoint:
    path: /medias//localizations
    method: GET
- name: media_stats
  endpoint:
    path: /{media-id}.json
    method: GET
- name: thumbnail
  endpoint:
    path: /thumbnail
    method: POST
    params:
      media_id: required
      access_token: required
      url: optional
- name: project
  endpoint:
    path: /v1/projects/{id}
    method: DELETE
- name: localizations
  endpoint:
    path: /v1/medias/{media-hashed-id}/localizations
    method: POST
- name: project_update
  endpoint:
    path: /projects/{id}
    method: PUT
- name: s3_copy
  endpoint:
    path: /s3_copy
    method: POST
    params:
      bucket: my-bucket
      source_file: videos/dog-videos/lenny.mp4
      region: us-east-1
- name: captions
  endpoint:
    path: /v1/medias//captions/.txt
    method: GET
- name: copy_media
  endpoint:
    path: /medias/{media-hashed-id}/copy.json
    method: POST
- name: project_sharing
  endpoint:
    path: /projects/{project-id}/sharings/{sharing-id}.json
    method: DELETE
- name: project_update
  endpoint:
    path: /projects/{id}
    method: PUT
- name: media_upload
  endpoint:
    path: /
    method: POST
- name: DeleteTag
  endpoint:
    path: /v1/tags/{name}
    method: DELETE
- name: project_sharing
  endpoint:
    path: /v1/projects/{project-id}/sharings/{sharing-id}.json
    method: PUT
- name: delete_sharing
  endpoint:
    path: /projects/{project-id}/sharings/{sharing-id}.json
    method: DELETE
- name: BottomLeftWaterMark
  endpoint:
    path: BottomLeftWaterMark.handle
    method: defineControl
    data_selector: BottomLeftWaterMarkControl
- name: MyButton
  endpoint:
    path: MyButton.handle
    method: defineControl
    data_selector: MyButton
- name: MyOverlay
  endpoint:
    path: MyOverlay.handle
    method: defineControl
    data_selector: MyOverlay
- name: BackTenSecondsControl
  endpoint:
    path: /control/backTenSeconds
    method: GET
    data_selector: controls
- name: MyButtonWithLinksControl
  endpoint:
    path: /control/myButtonWithLinks
    method: GET
    data_selector: controls
- name: tags
  endpoint:
    path: /tags/{name}
    method: DELETE
- name: account
  endpoint:
    path: /stats/account.json
    method: GET
    data_selector: account_stats
- name: project_copy
  endpoint:
    path: /projects//copy.json
    method: POST
- name: captions
  endpoint:
    path: /medias//captions/.json
    method: GET
- name: project_copy
  endpoint:
    path: /projects//copy.json
    method: POST
- name: background_job_status
  endpoint:
    path: /v1/background_job_status/{background-job-status-id}.json
    method: GET
    data_selector: status
    params: {}
- name: project
  endpoint:
    path: /projects/{id}
    method: DELETE
- name: account
  endpoint:
    path: /account.json
    method: GET
    data_selector: account
- name: customizations
  endpoint:
    path: /medias//customizations.json
    method: DELETE
- name: wistia_player
  endpoint:
    path: /embed/abc123
    method: GET
    data_selector: wistia-player
- name: wistia_api
  endpoint:
    path: /player.js
    method: GET
    data_selector: wistiaApi
- name: tags
  endpoint:
    path: /v1/tags
    method: POST
- name: channels
  endpoint:
    path: /v1/channels
    method: GET
- name: captions
  endpoint:
    path: /medias//captions/.txt
    method: GET
- name: background_job_status
  endpoint:
    path: /v1/background_job_status/{background-job-status-id}.json
    method: GET
- name: medias
  endpoint:
    path: /v1/medias/archive.json
    method: PUT
- name: project_stats
  endpoint:
    path: /stats/projects/
    method: GET
    data_selector: json
- name: WistiaPlayer
  endpoint:
    path: /wistia-player
    method: GET
- name: localizations
  endpoint:
    path: /medias//localizations
    method: GET
- name: upload_media
  endpoint:
    path: /
    method: POST
    data_selector: null
    params: {}
- name: googleAnalytics4
  endpoint:
    path: ''
    method: ''
    data_selector: ''
    params: {}
- name: embed_options
  endpoint:
    path: /embed/options
    method: GET
    data_selector: embedOptions
    params: {}
- name: channel_episodes
  endpoint:
    path: /v1/channel_episodes
    method: GET
- name: create_trim
  endpoint:
    path: /v1/medias/{media-hashed-id}/trims
    method: POST
- name: background_job_status
  endpoint:
    path: /v1/background_job_status/{background-job-status-id}.json
    method: GET
- name: localizations_translate_transcript
  endpoint:
    path: /v1/medias/{media-hashed-id}/localizations/translate_transcript
    method: POST
- name: tags
  endpoint:
    path: /tags
    method: GET
- name: wistia-player
  endpoint:
    path: /wistia-player
    method: GET
    data_selector: media
    params: {}
- name: wistia_player
  endpoint:
    path: /wistia-player
    method: GET
    data_selector: attributes
- name: player_properties
  endpoint:
    path: /wistia-player/properties
    method: GET
    data_selector: properties
- name: media_stats
  endpoint:
    path: /medias/{media-hashed-id}/stats.json
    method: GET
    data_selector: stats
- name: sharings
  endpoint:
    path: /v1/projects//sharings.json
    method: POST
- name: localization
  endpoint:
    path: /v1/medias/{media-hashed-id}/localizations/{localization-hashed-id}
    method: DELETE
- name: events
  endpoint:
    path: /events.json
    method: GET
- name: projects
  endpoint:
    path: /projects/
    method: GET
    data_selector: projects
    params: {}
- name: tags
  endpoint:
    path: /tags
    method: GET
- name: events
  endpoint:
    path: /events
    method: GET
    data_selector: events
    params: {}
- name: visitors
  endpoint:
    path: /stats/visitors/.json
    method: GET
- name: media
  endpoint:
    path: /medias/{media-hashed-id}.json
    method: PUT
- name: sharings
  endpoint:
    path: /projects//sharings.json
    method: GET
- name: captions
  endpoint:
    path: /medias//captions/
    method: PUT
- name: media
  endpoint:
    path: /medias/{media-hashed-id}.json
    method: DELETE
- name: media_stats
  endpoint:
    path: /medias/{media-hashed-id}/stats.json
    method: GET
- name: channels
  endpoint:
    path: /v1/channels
    method: GET
- name: captions
  endpoint:
    path: /v1/medias//captions.json
    method: POST
- name: project
  endpoint:
    path: /projects
    method: POST
- name: captions
  endpoint:
    path: /v1/medias//captions/.vtt
    method: GET
- name: visitors
  endpoint:
    path: /stats/visitors.json
    method: GET
- name: channel_episodes
  endpoint:
    path: /v1/channel_episodes
    method: GET
- name: channel_episode
  endpoint:
    path: /channels/{channel-id}/channel_episodes
    method: POST
- name: channels
  endpoint:
    path: /channels/{id}
    method: GET
- name: stats_by_date
  endpoint:
    path: /stats/medias//by_date.json
    method: GET
    data_selector: null
    params: {}
- name: media_engagement
  endpoint:
    path: /v1/stats/medias//engagement.json
    method: GET
- name: captions
  endpoint:
    path: /medias//captions/.vtt
    method: GET
- name: upload_media
  endpoint:
    path: /
    method: POST
    data_selector: null
    params:
      file: required
      url: required
- name: media_show
  endpoint:
    path: /medias/show
    method: GET
- name: media
  endpoint:
    path: /medias/.json
    method: GET
- name: medias
  endpoint:
    path: /v1/medias/myhashedid
    method: GET
    data_selector: records
    params: {}
- name: engagement
  endpoint:
    path: /v1/stats/medias//engagement.json
    method: GET
- name: project_list
  endpoint:
    path: /projects
    method: GET
- name: video
  endpoint:
    path: /
    method: GET
    data_selector: video
    params: {}
- name: wistia_embed
  endpoint:
    path: /embed/iframe/{id}
    method: GET
    data_selector: wistia_embed
    params: {}
- name: time
  endpoint:
    path: time()
    method: GET
- name: seek
  endpoint:
    path: time(val)
    method: GET
- name: unbind
  endpoint:
    path: unbind(eventType, callbackFn)
    method: GET
- name: unmute
  endpoint:
    path: unmute()
    method: GET
- name: videoHeight
  endpoint:
    path: videoHeight()
    method: GET
- name: videoQuality
  endpoint:
    path: videoQuality(val)
    method: GET
- name: visitorKey
  endpoint:
    path: visitorKey()
    method: GET
- name: volume
  endpoint:
    path: volume(val)
    method: GET
- name: width
  endpoint:
    path: width(val)
    method: GET
- name: captions
  endpoint:
    path: /medias//captions.json
    method: GET
    data_selector: captions
- name: captions
  endpoint:
    path: /medias//captions/.json
    method: PUT
- name: sharings
  endpoint:
    path: /v1/projects//sharings.json
    method: POST
- name: oembed
  endpoint:
    path: /
    method: GET
    data_selector: ''
    params:
      url: ''
- name: player_methods
  endpoint:
    path: /api/player/methods
    method: GET
    data_selector: methods
    params: {}
- name: restore_media
  endpoint:
    path: /medias/restore.json
    method: PUT
- name: events_list
  endpoint:
    path: /v1/stats/events.json
    method: GET
- name: customizations
  endpoint:
    path: /v1/medias//customizations.json
    method: POST
- name: sharings
  endpoint:
    path: /v1/projects//sharings.json
    method: GET
- name: channel_episodes
  endpoint:
    path: /channels//channel_episodes/
    method: GET
- name: move_media
  endpoint:
    path: /v1/medias/move.json
    method: PUT
- name: plugin
  endpoint:
    path: /plugin
    method: GET
    data_selector: plugin
- name: channels
  endpoint:
    path: /v1/channels
    method: GET
- name: restore_media
  endpoint:
    path: /medias/restore.json
    method: PUT
- name: account
  endpoint:
    path: /stats/account.json
    method: GET
- name: visitors_list
  endpoint:
    path: /stats/visitors.json
    method: GET
- name: visitors
  endpoint:
    path: /stats/visitors.json
    method: GET
    data_selector: visitors
- name: customizations
  endpoint:
    path: /medias//customizations.json
    method: GET
- name: event
  endpoint:
    path: /{event-key}.json
    method: GET
- name: media_stats
  endpoint:
    path: /stats/medias/{media-id}.json
    method: GET
    data_selector: stats
- name: captions
  endpoint:
    path: /medias//captions.json
    method: GET
    data_selector: ''
- name: move_media
  endpoint:
    path: /medias/move.json
    method: PUT
- name: media
  endpoint:
    path: /medias/{media-hashed-id}.json
    method: PUT
- name: thumbnail_url
  endpoint:
    path: /oembed
    method: GET
    data_selector: thumbnail_url
    params: {}
- name: upload_thumbnail
  endpoint:
    path: /upload
    method: POST
    data_selector: hashed_id
    params: {}
- name: media_stats
  endpoint:
    path: /v1/stats/medias/{media-id}.json
    method: GET
    data_selector: stats
- name: projects_sharings
  endpoint:
    path: /projects//sharings/
    method: GET
- name: project_stats
  endpoint:
    path: /stats/projects/.json
    method: GET
- name: channel
  endpoint:
    path: /embed/channel/{channel_id}
    method: GET
- name: popover_embed
  endpoint:
    path: /embed/popover
    method: GET
    data_selector: embed_data
- name: wistia-player
  endpoint:
    path: /embed
    method: GET
    data_selector: media-id
    params: {}
notes:
- Livestream medias, recording sessions, and Soapbox videos imported to Wistia before
  September 1, 2023 cannot be archived.
- 'Requires api token with permissions: Read, update & delete anything, Read all data,
  Read all project and video data'
- The Wistia Chooser is in beta.
- The Wistia Chooser is not compatible with medias in Channels.
- Projects#show uses pagination by default - we’ll return up to the first 500 medias
  in a Project.
- If you have more than 500 medias in a Project, you’ll need to add a query param,
  page=2 to get the second page of medias.
- Uses popover=true option for video embeds
- 'Requires api token with permissions: Read, update & delete anything'
- 'Requires api token with one of the following permissions: Read, update & delete
  anything, Read all data, Read all project and video data'
- 'Requires api token with one of the following permissions: Read, update & delete
  anything'
- The Wistia APIs were specifically built for videos in projects.
- We do not formally support using our APIs for audio files.
- Requires api token with one of the following permissions Read, update & delete anything
- Wistia APIs were specifically built for videos in projects. We do not formally support
  using our APIs for audio files in projects.
- Check Browser Console for Errors
- Enable Report-Only Mode
- Contact Support
- We do not formally support using our APIs for audio files in projects, or audio
  or video episodes in Channels at this time.
- Uses OAuth2 with refresh token — requires setup of connected app in api
- Some objects like Contact may return nulls in deeply nested fields
- Due to data retention policy, only events from the last 2 years are available.
- 'Requires api token with permissions: Read, update & delete anything, Read all data,
  Read all project and video data.'
- Requires api token with permissions to access data
- 'Requires api token with permissions: Read, update & delete anything or Read all
  data'
- Requires api token with one of the following permissions (any scope allowed)
- All upload requests must use SSL (https://, not http://).
- While most uploads will be picked up immediately, there is a possibility for a delay
  due to high traffic or system maintenance.
- For accounts with more than 100 media, you’ll want to page and sort the returned
  list.
- 'Requires api token with permissions: Read, update & delete anything; Read all data;
  Read all project and video data.'
- S3 Copy is only available for accounts on the Premium Plan at this time.
- The Wistia APIs were specifically built for videos in projects. We do not formally
  support using our APIs for audio files in projects, or audio or video episodes in
  Channels at this time.
- Standard embed codes only. This does not work with iframes (fallback) or popovers.
- Embed Links should exist in the DOM within 5 seconds of the video being embedded.
  Otherwise, you'll need to run `Wistia.EmbedLink.setupAll()` right after they're
  injected so that they work.
- The framework only applies to the Vulcan V2 player.
- If you need to support IE11, transpiling your classes should work just fine.
- This method does not copy the project’s sharing information.
- The person specified as owner must be a Manager in the account.
- The person specified as the owner must be a Manager in the account.
- Requires api token with one of the following permissions Read, update & delete anything
  Read all data
- We do not formally support using our APIs for audio files in projects.
- We generally do not recommend using Asset URLs, as accessing a Wistia-hosted video
  file outside of the video player means you won't get any video stats, analytics,
  customizations, HLS playback delivery, or other features specific to the Wistia
  player.
- Asset URL viewing and downloads will contribute to bandwidth usage in your account.
- 'Requires api token with one of the following permissions: Read, update & delete
  anything; Read all data; Read all project and video data'
- This method accepts a list of up to 100 medias to archive per request.
- It processes requests asynchronously and will return a background_job_status object
  rather than the typical Media response object.
- Note that Livestream medias and Soapbox videos imported to Wistia before September
  1, 2023 cannot be archived.
- We do not formally support using our APIs for audio files in projects, or audio
  or video episodes in Channels.
- Requires api token with permissions Read, update & delete anything
- 'Requires api token with one of the following permissions: Read, update & delete
  anything or Read all data'
- Attributes can be set on the <wistia-player> element for customization.
- Read-only properties provide useful information about the data and state of the
  wistia-player.
- This request works for videos only. Otherwise, the server responds with HTTP status
  code 400 Bad Request.
- Passing authentication tokens or passwords via query parameters is unsafe - from
  malicious actors and from passwords being exposed in logs. Wistia will be deprecating
  this functionality in favor of bearer tokens or other authentication schemes.
- Webhooks let you know about events that happen in Wistia as they occur.
- Each event in a message's body will specify a uuid and a generated_at timestamp
  for uniqueness.
- Events can be dispatched from user interaction or from updates within the player.
- Requires api token with one of the following permissions Read, update & delete anything
  Read all data Read all project and video data
- The API has a rate limit of 600 requests per minute.
- Authentication of API requests must be done with an HTTP 'Authentication' header.
- Wistia APIs were specifically built for videos in projects.
- Extracting thumbnails like this isn't instantaneous; it may take from 15 seconds
  to a few minutes.
- Only Managers and owners of an account can authorize an application at this time.
- E-v1.js only needs to be included once per page with your videos.
- Self-hosting E-v1 is a big no.
- You must use SSL (https instead of http) to access the API.
- Recommended to switch to Standard (async) embeds for better performance
- The 'timechange' event will always fire before 'secondchange' and 'seek'.
- Requires api token with permissions to read, update & delete anything, read all
  data, or read all project and video data.
- 'Stats rounding for percentages: Percentage values provided by the Stats API are
  rounded to whole numbers.'
- 'Events/Heatmaps data retention window: These endpoints will only return Events
  from the past two years.'
- If an invalid URL is given, the endpoint will return 404 Not Found.
- If a media is found but has no available embed code, the endpoint will return 501
  Not Implemented.
- Methods can only be called in response to user-initiated events.
- Your account must have access to the Archiving feature to use this method.
- Due to our data retention policy, only events from the last 2 years are available.
- 'Requires api token with one of the following permissions: Read, update & delete
  anything, Read all data'
- Max 100 media per request, and max 10 requests in 5 minutes.
- This is a different rate limit than applies to the rest of the api.
- 'Requires api token with permissions: Read, update & delete anything; Read all data;
  Read all project and video data'
- Requires api token with one of the following permissions Read, update & delete anything,
  Read all data, Read all project and video data
- Certain referrer-policy values can restrict the Wistia player's ability to perform
  the domain restrictions check on page load.
- This is fixable by setting one of the supported policies.
- 'Requires api token with one of the following permissions: Read, update & delete
  anything; Read all data; Read all project and video data.'
- Aurora is the default for most users.
- Some users might have unique integration needs that the Aurora player won't quite
  meet yet.
- Requires api token with permissions for Read, update & delete anything or Read all
  data or Read all project and video data
- A Channel's Public URL serves as its oEmbed URL.
- The oEmbed endpoint produces Channel Embeds that are of the 'popover' type by default.
- Most non-popover attributes, properties, events, and methods can also be used with
  popover embeds.
- If videos for multiple accounts are on the same page and have different Privacy
  Mode settings, then Privacy Mode is considered ON. That is, when in doubt, we will
  not track the viewer.
- Videos in iframes can receive consent using the browser's postMessage() feature.
  However, if the video's iframe is separated from the parent page by an intermediary
  iframe, it cannot communicate, and W.consent(true) or W.consent(false) will have
  no effect on it in that case.
- IE8 and below--and IE11 when in IE8 compatibility mode--do not currently support
  Player Privacy Mode.
errors:
- '404 Not Found: Invalid URL or unparseable URL.'
- '501 Not Implemented: Only videos are embeddable.'
- 'REQUEST_LIMIT_EXCEEDED: Throttle API calls or reduce frequency'
- 'QUERY_TIMEOUT: Break down filters or add selectivity'
- '401 Unauthorized: Recheck OAuth scopes or token expiration'
- '400: This account has exceeded its video limit. Please upgrade to upload more videos.'
- '401 Unauthorized: Requires api token with permissions ''Read, update & delete anything'''
- '503: Rate limit reached - account has reached its rate limit.'
- '429: Rate limiting code should be used instead of 503.'
- '429 Service Unavailable: Rate limit exceeded'
- 'access_denied: The resource owner or authorization server denied the request.'
- '429 Service Unavailable: Rate limit exceeded. Retry after the time specified in
  the Retry-After header.'
- '404 Not Found: Invalid or unparseable URL.'
- '501 Not Implemented: Media found but no available embed code.'
- '429 Service Unavailable: More than 600 requests in a minute.'
auth_info:
  mentioned_objects:
  - OauthToken
  - AuthProvider
  - NamedCredential
client:
  base_url: https://api.wistia.com/v1
  auth:
    type: Bearer
    location: header
    header_name: Authorization
    accessToken: ACCESS_TOKEN_GOES_HERE
    flow: refresh_token
    token_url: https://api.wistia.com/oauth/token
    client_id: '{{ dlt.secrets[''api_client_id''] }}'
    client_secret: '{{ dlt.secrets[''api_client_secret''] }}'
    refresh_token: '{{ dlt.secrets[''api_refresh_token''] }}'
  paginator:
    type: page
    page_size_param: per_page
    default_page_size: 100
    cursor_path: nextRecordsUrl
    cursor_param: nextUrl
  headers:
    Accept: application/json
    Authorization: Bearer YOUR_TOKEN_HERE
source_metadata: null
