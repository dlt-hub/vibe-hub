resources:
- name: project_issues
  endpoint:
    path: /api/v1/project-issues/status
    method: POST
    data_selector: issues
    params: {}
- name: scan
  endpoint:
    path: /scan
    method: POST
    data_selector: results
- name: Email OTP Setup
  endpoint:
    path: /authentication/email-otp
    method: POST
- name: Crawler
  endpoint:
    path: /docs/crawler
    method: GET
- name: .HAR-file
  endpoint:
    path: /docs/discovering-with-a-har
    method: GET
- name: API Schema
  endpoint:
    path: /docs/discovering-api-endpoints
    method: GET
- name: GraphQL Schema file
  endpoint:
    path: /discovery#for-graphql
    method: GET
- name: Single Entrypoint
  endpoint:
    path: /create-a-single-entrypoint
    method: GET
- name: render
  endpoint:
    path: /api/render
    method: POST
    data_selector: '201'
    params: {}
- name: redirect
  endpoint:
    path: /api/goto
    method: GET
    data_selector: '200'
    params:
      url:
        required: true
        in: query
- name: metadata
  endpoint:
    path: /api/metadata
    method: POST
    data_selector: '201'
    params: {}
- name: test_options
  endpoint:
    path: /api
    method: OPTIONS
    data_selector: '200'
    params: {}
- name: launch_command
  endpoint:
    path: /api/spawn
    method: GET
    data_selector: '200'
    params:
      command:
        required: true
        in: query
- name: get_config
  endpoint:
    path: /api/config
    method: GET
    data_selector: '200'
    params: {}
- name: login_admin
  endpoint:
    path: /api/auth/admin/login
    method: POST
    data_selector: '201'
    params: {}
- name: login
  endpoint:
    path: /api/auth/login
    method: POST
    data_selector: '201'
    params: {}
- name: dom_csrf_token
  endpoint:
    path: /api/auth/dom-csrf-flow
    method: GET
    data_selector: '400'
    params: {}
- name: simple_csrf_token
  endpoint:
    path: /api/auth/simple-csrf-flow
    method: GET
    data_selector: '200'
    params: {}
- name: oidc_client
  endpoint:
    path: /api/auth/oidc-client
    method: GET
    data_selector: '200'
    params: {}
- name: login_kid_sql
  endpoint:
    path: /api/auth/jwt/kid-sql/login
    method: POST
    data_selector: '201'
    params: {}
- name: validate_kid_sql
  endpoint:
    path: /api/auth/jwt/kid-sql/validate
    method: GET
    data_selector: '200'
    params: {}
- name: login_with_x5c
  endpoint:
    path: /api/auth/jwt/x5c/login
    method: POST
    data_selector: content
- name: validate_with_x5c
  endpoint:
    path: /api/auth/jwt/x5c/validate
    method: GET
    data_selector: content
- name: login_with_x5u
  endpoint:
    path: /api/auth/jwt/x5u/login
    method: POST
    data_selector: content
- name: validate_with_x5u
  endpoint:
    path: /api/auth/jwt/x5u/validate
    method: GET
    data_selector: content
- name: get_user_by_email
  endpoint:
    path: /api/users/one/{email}
    method: GET
    data_selector: content
- name: get_user_by_id
  endpoint:
    path: /api/users/{id}
    method: GET
    data_selector: content
- name: get_user_photo
  endpoint:
    path: /api/users/one/{email}/photo
    method: GET
    data_selector: content
- name: upload_user_photo
  endpoint:
    path: /api/users/one/{email}/photo
    method: PUT
    data_selector: content
- name: ldap_query
  endpoint:
    path: /api/users/ldap
    method: GET
    data_selector: content
- name: create_basic_user
  endpoint:
    path: /api/users/basic
    method: POST
    data_selector: content
- name: create_oidc_user
  endpoint:
    path: /api/users/oidc
    method: POST
    data_selector: content
- name: change_user_info
  endpoint:
    path: /api/users/one/{email}/info
    method: PUT
    data_selector: content
- name: user_info
  endpoint:
    path: /api/users/one/{email}
    method: GET
    data_selector: user
    params:
      email: james.harris@neuralegion.com
- name: admin_status
  endpoint:
    path: /api/users/one/{email}/adminpermission
    method: GET
    data_selector: admin_status
    params:
      email: james.harris@neuralegion.com
- name: file_read
  endpoint:
    path: /api/file
    method: GET
    data_selector: file_content
    params:
      path: /etc/passwd
      type: text
      accept: accept
- name: file_delete
  endpoint:
    path: /api/file
    method: DELETE
    data_selector: file_delete_status
    params:
      path: /home/user/downloads/sample.txt
- name: file_upload
  endpoint:
    path: /api/file/raw
    method: PUT
    data_selector: file_upload_status
    params:
      path: /home/user/downloads/sample.txt
- name: subscription
  endpoint:
    path: /api/subscriptions
    method: POST
    data_selector: subscribed_email
    params:
      email: james.harris@neuralegion.com
- name: testimonial_create
  endpoint:
    path: /api/testimonials
    method: POST
    data_selector: testimonial
    params: {}
- name: testimonial_get
  endpoint:
    path: /api/testimonials
    method: GET
    data_selector: testimonials
    params: {}
- name: testimonial_count
  endpoint:
    path: /api/testimonials/count
    method: GET
    data_selector: testimonial_count
    params:
      query: vulnerability
- name: products
  endpoint:
    path: /api/products
    method: GET
    data_selector: products
    params: {}
- name: latest_products
  endpoint:
    path: /api/products/latest
    method: GET
    data_selector: latest_products
    params: {}
- name: render_template
  endpoint:
    path: /api/render
    method: POST
    data_selector: Rendered result
- name: redirect
  endpoint:
    path: /api/goto
    method: GET
    data_selector: Redirected
    params:
      url: ''
- name: metadata
  endpoint:
    path: /api/metadata
    method: POST
    data_selector: XML passed successfully
- name: get_config
  endpoint:
    path: /api/config
    method: GET
- name: admin_login
  endpoint:
    path: /api/auth/admin/login
    method: POST
    data_selector: JWT token
    params: {}
- name: user_login
  endpoint:
    path: /api/auth/login
    method: POST
    data_selector: JWT token
    params: {}
- name: login_with_x5c
  endpoint:
    path: /api/auth/jwt/x5c/login
    method: POST
    data_selector: application/json
    params: {}
- name: validate_with_x5c
  endpoint:
    path: /api/auth/jwt/x5c/validate
    method: GET
    data_selector: application/json
    params: {}
- name: login_with_x5u
  endpoint:
    path: /api/auth/jwt/x5u/login
    method: POST
    data_selector: application/json
    params: {}
- name: validate_with_x5u
  endpoint:
    path: /api/auth/jwt/x5u/validate
    method: GET
    data_selector: application/json
    params: {}
- name: validate_with_jwk
  endpoint:
    path: /api/auth/jwt/jwk/validate
    method: GET
    data_selector: application/json
    params: {}
- name: user_info
  endpoint:
    path: /api/users/one/{email}
    method: GET
    data_selector: user
    params:
      email: james.harris@neuralegion.com
- name: admin_status
  endpoint:
    path: /api/users/one/{email}/adminpermission
    method: GET
    data_selector: admin_status
    params:
      email: james.harris@neuralegion.com
- name: file_read
  endpoint:
    path: /api/file
    method: GET
    data_selector: file_content
    params:
      path: /etc/passwd
      type: text
      accept: accept
- name: file_delete
  endpoint:
    path: /api/file
    method: DELETE
    data_selector: delete_status
    params:
      path: /home/user/downloads/sample.txt
- name: file_upload
  endpoint:
    path: /api/file/raw
    method: PUT
    data_selector: upload_status
    params:
      path: /home/user/downloads/sample.txt
- name: file_read_content
  endpoint:
    path: /api/file/raw
    method: GET
    data_selector: file_content
    params:
      path: /home/user/downloads/sample.txt
- name: subscribe
  endpoint:
    path: /api/subscriptions
    method: POST
    data_selector: subscribed_email
    params:
      email: james.harris@neuralegion.com
- name: create_testimonial
  endpoint:
    path: /api/testimonials
    method: POST
    data_selector: testimonial
    params: {}
- name: get_testimonials
  endpoint:
    path: /api/testimonials
    method: GET
    data_selector: testimonials
    params: {}
- name: get_testimonial_count
  endpoint:
    path: /api/testimonials/count
    method: GET
    data_selector: testimonial_count
    params:
      query: vulnerability
- name: get_products
  endpoint:
    path: /api/products
    method: GET
    data_selector: products
    params: {}
- name: get_latest_products
  endpoint:
    path: /api/products/latest
    method: GET
    data_selector: latest_products
    params: {}
- name: user
  endpoint:
    path: /user/MAIL
    method: GET
    data_selector: responses
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: render_template
  endpoint:
    path: /api/render
    method: POST
    data_selector: Rendered result
- name: redirect
  endpoint:
    path: /api/goto
    method: GET
    data_selector: Redirected
    params:
      url: query
- name: receive_metadata
  endpoint:
    path: /api/metadata
    method: POST
    data_selector: XML passed successfully
- name: get_test_options
  endpoint:
    path: /api
    method: OPTIONS
    data_selector: ''
- name: launch_command
  endpoint:
    path: /api/spawn
    method: GET
    data_selector: ''
    params:
      command: query
- name: get_config
  endpoint:
    path: /api/config
    method: GET
    data_selector: ''
- name: login_with_rsa_jwt_keys_admin
  endpoint:
    path: /api/auth/admin/login
    method: POST
    data_selector: ''
    params: {}
- name: login_with_rsa_jwt_keys
  endpoint:
    path: /api/auth/login
    method: POST
    data_selector: ''
    params: {}
- name: get_dom_csrf_token
  endpoint:
    path: /api/auth/dom-csrf-flow
    method: GET
    data_selector: ''
    params: {}
- name: get_csrf_token
  endpoint:
    path: /api/auth/simple-csrf-flow
    method: GET
    data_selector: ''
- name: get_oidc_client
  endpoint:
    path: /api/auth/oidc-client
    method: GET
    data_selector: ''
- name: login_with_x5c
  endpoint:
    path: /api/auth/jwt/x5c/login
    method: POST
    data_selector: content
    params: {}
- name: login_with_x5u
  endpoint:
    path: /api/auth/jwt/x5u/login
    method: POST
    data_selector: content
    params: {}
- name: validate_with_jwk
  endpoint:
    path: /api/auth/jwt/jwk/validate
    method: GET
    data_selector: content
    params: {}
- name: validate_with_x5c
  endpoint:
    path: /api/auth/jwt/x5c/validate
    method: GET
    data_selector: content
    params: {}
- name: validate_with_x5u
  endpoint:
    path: /api/auth/jwt/x5u/validate
    method: GET
    data_selector: content
    params: {}
- name: user_info
  endpoint:
    path: /api/users/one/{email}
    method: GET
    data_selector: user info
    params:
      email: james.harris@neuralegion.com
- name: admin_status
  endpoint:
    path: /api/users/one/{email}/adminpermission
    method: GET
    data_selector: admin status
    params:
      email: james.harris@neuralegion.com
- name: file
  endpoint:
    path: /api/file
    method: GET
    data_selector: file content
    params:
      path: /etc/passwd
      type: text
      accept: accept
- name: subscription
  endpoint:
    path: /api/subscriptions
    method: POST
    data_selector: subscribed email
    params:
      email: james.harris@neuralegion.com
- name: testimonial
  endpoint:
    path: /api/testimonials
    method: GET
    data_selector: testimonials
    params: {}
- name: product
  endpoint:
    path: /api/products
    method: GET
    data_selector: products
    params: {}
- name: latest_product
  endpoint:
    path: /api/products/latest
    method: GET
    data_selector: latest products
    params: {}
- name: user_MAIL
  endpoint:
    path: /user/MAIL
    method: GET
    data_selector: responses
    params:
      userEmail:
        required: true
        type: string
        default: docs@brightsec.com
- name: user
  endpoint:
    path: /user/MAIL
    method: GET
    data_selector: responses
    params:
      userEmail:
        required: true
        type: string
        default: docs@brightsec.com
- name: scan_by_status
  endpoint:
    path: /api/v1/scans/status
    method: POST
    data_selector: data
    params: {}
- name: scan_by_status
  endpoint:
    path: /api/v1/scans
    method: POST
    data_selector: entryPointsStatuses
    params: {}
- name: scan_details
  endpoint:
    path: /scans/details
    method: GET
    data_selector: scan_info
    params: {}
- name: scan_results
  endpoint:
    path: /scans/results
    method: GET
    data_selector: issues
    params: {}
- name: entrypoints
  endpoint:
    path: /entrypoints
    method: GET
    data_selector: entrypoints
    params: {}
- name: groups
  endpoint:
    path: /api/groups
    method: POST
    data_selector: groups
    params: {}
- name: members
  endpoint:
    path: /api/members
    method: PUT
    data_selector: members
    params: {}
- name: access_scopes
  endpoint:
    path: /api/v1/access_scopes
    method: GET
    data_selector: scopes
    params: {}
- name: auth-objects
  endpoint:
    path: /auth-objects
    method: GET
    data_selector: permissions
    params: {}
- name: discoveries
  endpoint:
    path: /discoveries
    method: GET
    data_selector: available_discoveries
    params: {}
- name: entry-points
  endpoint:
    path: /entry-points
    method: GET
    data_selector: available_entry_points
    params: {}
- name: files
  endpoint:
    path: /files
    method: GET
    data_selector: available_files
    params: {}
- name: integration.repos
  endpoint:
    path: /integration.repos
    method: GET
    data_selector: integrated_resources
    params: {}
- name: issues
  endpoint:
    path: /issues
    method: GET
    data_selector: detected_issues
    params: {}
- name: projects
  endpoint:
    path: /projects
    method: GET
    data_selector: available_projects
    params: {}
- name: repeaters
  endpoint:
    path: /repeaters
    method: GET
    data_selector: organization_repeaters
    params: {}
- name: scans
  endpoint:
    path: /scans
    method: GET
    data_selector: existing_scans
    params: {}
- name: scripts
  endpoint:
    path: /scripts
    method: GET
    data_selector: repeater_scripts
    params: {}
- name: storage_files
  endpoint:
    path: /storage/files
    method: GET
    data_selector: files
- name: upload_file
  endpoint:
    path: /storage/upload
    method: POST
    data_selector: upload_response
- name: clone_file
  endpoint:
    path: /storage/clone
    method: POST
    data_selector: clone_response
- name: delete_file
  endpoint:
    path: /storage/delete
    method: DELETE
    data_selector: delete_response
- name: entrypoints
  endpoint:
    path: /entrypoints
    method: GET
    data_selector: entrypoints
    params:
      project: projectId
      limit: '10'
- name: update_host
  endpoint:
    path: /entrypoints/update-host
    method: POST
    data_selector: response
    params: {}
- name: scan
  endpoint:
    path: /scans
    method: GET
    data_selector: scans
- name: upload_archive
  endpoint:
    path: /api/archive/upload
    method: POST
    data_selector: archive_upload_response
    params:
      type: har
      discard: true
- name: repeater
  endpoint:
    path: /repeaters
    method: GET
- name: monitor
  endpoint:
    path: /monitor
    method: POST
- name: repeater_scripts
  endpoint:
    path: /repeater/scripts
    method: GET
    data_selector: scripts
- name: GitHub Issues
  endpoint:
    path: /repos/{owner}/{repo}/issues
    method: GET
- name: webhook
  endpoint:
    path: /projects/{project_id}/webhooks
    method: POST
    data_selector: webhook
    params: {}
- name: user
  endpoint:
    path: /api/users
    method: POST
    data_selector: user
    params: {}
- name: group
  endpoint:
    path: /api/groups
    method: POST
    data_selector: group
    params: {}
- name: user
  endpoint:
    path: /api/users
    method: POST
    data_selector: users
- name: scan_start
  endpoint:
    path: /scan/start
    method: POST
    data_selector: scan_result
    params:
      api_token: ${{ secrets.BRIGHT_TOKEN }}
      hostname: app.brightsec.com
      name: Bright Scan - ${{ github.sha }}
      restart_scan: $SCAN_ID
- name: poll_scan_status
  endpoint:
    path: /scan/status
    method: GET
    data_selector: scan_status
    params:
      api_token: ${{ secrets.BRIGHT_TOKEN }}
      hostname: app.brightsec.com
      scan: ${{ steps.start.outputs.id }}
      wait_for: any
      code_scanning_alerts: true
      github_token: ${{ secrets.GITHUB_TOKEN }}
      timeout: 600
- name: scan
  endpoint:
    path: /scan
    method: POST
    params:
      token: $BRIGHT_TOKEN
- name: scan_status
  endpoint:
    path: /scan/status
    method: GET
    params:
      token: $BRIGHT_TOKEN
- name: Nexploit Scan
  endpoint:
    path: /nexploit/scan
    method: POST
- name: Nexploit Re-run Scan
  endpoint:
    path: /nexploit/re-run-scan
    method: POST
- name: jfrognexploit
  endpoint:
    path: /path/to/jfrognexploit
    method: GET
    data_selector: records
    params: {}
- name: scan
  endpoint:
    path: /api/scans
    method: POST
    data_selector: scan_id
    params: {}
- name: scan
  endpoint:
    path: /scans
    method: POST
    data_selector: scan_results
    params:
      incremental: scan_id
- name: scan
  endpoint:
    path: /scans
    method: POST
    data_selector: results
    params:
      incremental: updated_at
- name: repeater
  endpoint:
    path: /repeater
    method: POST
    data_selector: results
- name: scan
  endpoint:
    path: /scans
    method: POST
    data_selector: SCAN_ID
    params:
      token: ${BRIGHT_TOKEN}
      repeater: ${REPEATER}
      name: Jenkins Scan with Repeater
      crawler: https://brokencrystals.com/
      smart: true
- name: polling
  endpoint:
    path: /scan/polling
    method: GET
    data_selector: RESULT
    params:
      interval: 30s
      timeout: 20m
      token: ${BRIGHT_TOKEN}
      breakpoint: high_issue
      scan_id: $SCAN_ID
- name: stop_scan
  endpoint:
    path: /scan/stop
    method: POST
    data_selector: null
    params:
      token: ${BRIGHT_TOKEN}
      scan_id: $SCAN_ID
- name: scan
  endpoint:
    path: /scans
    method: POST
- name: repeater
  endpoint:
    path: /repeater
    method: POST
- name: scan
  endpoint:
    path: /scans
    method: POST
    data_selector: scan_id
- name: scan
  endpoint:
    path: /scans
    method: POST
    data_selector: scan_id
- name: repeater
  endpoint:
    path: /repeater
    method: POST
    data_selector: repeater_id
- name: scan
  endpoint:
    path: /scans
    method: POST
    data_selector: scan_results
    params: {}
- name: scan
  endpoint:
    path: /scan
    method: POST
    data_selector: scan_id
    params: {}
- name: scan
  endpoint:
    path: /scan
    method: POST
    data_selector: scan_id
- name: repeater
  endpoint:
    path: /repeater
    method: POST
    data_selector: repeater_id
- name: scan
  endpoint:
    path: /scans
    method: POST
    data_selector: SCAN_ID
- name: scan
  endpoint:
    path: /scans
    method: POST
    data_selector: scan_id
- name: repeater
  endpoint:
    path: /repeater
    method: GET
    data_selector: repeater_id
- name: scan
  endpoint:
    path: /scans
    method: POST
    data_selector: scan_id
    params:
      token: $BRIGHT_TOKEN
      project_id: $PROJECT_ID
- name: scan
  endpoint:
    path: /scan
    method: POST
    data_selector: scan_id
    params: {}
- name: scan_issues
  endpoint:
    path: /api/v1/scans/{SCAN_ID}/issues
    method: GET
    data_selector: '[]'
- name: scan
  endpoint:
    path: /api/v1/scans
    method: GET
    data_selector: scans
    params: {}
- name: issues
  endpoint:
    path: /api/v1/scans/{scan_id}/issues
    method: GET
    data_selector: issues
    params: {}
- name: scan
  endpoint:
    path: /scan
    method: POST
    data_selector: scan_id
- name: scan_issues
  endpoint:
    path: /api/v1/scans/{SCAN_ID}/issues
    method: GET
    data_selector: '[]'
- name: aws_s3_takeover
  endpoint:
    path: /docs/amazon-aws-s3-bucket-takeover
    method: GET
    data_selector: vulnerabilities
    params: {}
- name: broken_jwt_authentication
  endpoint:
    path: /docs/broken-jwt-authentication
    method: GET
    data_selector: vulnerabilities
    params: {}
- name: broken_object_property_authorization
  endpoint:
    path: /docs/broken-object-property-authorization
    method: GET
    data_selector: vulnerabilities
    params: {}
- name: broken_saml_authentication
  endpoint:
    path: /docs/broken-saml-authentication
    method: GET
    data_selector: vulnerabilities
    params: {}
- name: business_constraint_bypass
  endpoint:
    path: /docs/business-constraint-bypass
    method: GET
    data_selector: vulnerabilities
    params: {}
- name: cookie_security
  endpoint:
    path: /docs/missing-httponly-flag-in-cookie
    method: GET
    data_selector: vulnerabilities
    params: {}
- name: date_manipulation
  endpoint:
    path: /docs/unvalidated-date-range
    method: GET
    data_selector: vulnerabilities
    params: {}
- name: directory_listing
  endpoint:
    path: /docs/directory-listing
    method: GET
    data_selector: vulnerabilities
    params: {}
- name: email_injection
  endpoint:
    path: /docs/email-header-injection
    method: GET
    data_selector: vulnerabilities
    params: {}
- name: excessive_data_exposure
  endpoint:
    path: /docs/excessive-data-exposure
    method: GET
    data_selector: vulnerabilities
    params: {}
- name: file_upload
  endpoint:
    path: /docs/unrestricted-file-upload
    method: GET
    data_selector: vulnerabilities
    params: {}
- name: full_path_disclosure
  endpoint:
    path: /docs/full-path-disclosure
    method: GET
    data_selector: vulnerabilities
    params: {}
- name: graphql_introspection
  endpoint:
    path: /docs/graphql-introspection
    method: GET
    data_selector: vulnerabilities
    params: {}
- name: header_security
  endpoint:
    path: /docs/misconfigured-security-headers
    method: GET
    data_selector: vulnerabilities
    params: {}
- name: html_injection
  endpoint:
    path: /docs/html-injection
    method: GET
    data_selector: vulnerabilities
    params: {}
- name: http_method_fuzzing
  endpoint:
    path: /docs/insecure-http-method
    method: GET
    data_selector: vulnerabilities
    params: {}
- name: id_enumeration
  endpoint:
    path: /docs/id-enumeration
    method: GET
    data_selector: vulnerabilities
    params: {}
- name: improper_asset_management
  endpoint:
    path: /docs/improper-assets-management
    method: GET
    data_selector: vulnerabilities
    params: {}
- name: insecure_tls_configuration
  endpoint:
    path: /docs/insecure-tls-configuration
    method: GET
    data_selector: vulnerabilities
    params: {}
- name: ldap_injection
  endpoint:
    path: /docs/ldap-error
    method: GET
    data_selector: vulnerabilities
    params: {}
- name: local_file_inclusion
  endpoint:
    path: /docs/local-file-inclusion-lfi
    method: GET
    data_selector: vulnerabilities
    params: {}
- name: mongodb_injection
  endpoint:
    path: /docs/mongodb-nosqli
    method: GET
    data_selector: vulnerabilities
    params: {}
- name: open_cloud_storage
  endpoint:
    path: /docs/open-cloud-storage
    method: GET
    data_selector: vulnerabilities
    params: {}
- name: open_database
  endpoint:
    path: /docs/exposed-database-access
    method: GET
    data_selector: vulnerabilities
    params: {}
- name: os_command_injection
  endpoint:
    path: /docs/os-command-injection
    method: GET
    data_selector: vulnerabilities
    params: {}
- name: remote_file_inclusion
  endpoint:
    path: /docs/remote-file-inclusion-rfi
    method: GET
    data_selector: vulnerabilities
    params: {}
- name: secret_tokens
  endpoint:
    path: /docs/secret-tokens-leak
    method: GET
    data_selector: vulnerabilities
    params: {}
- name: server_side_template_injection
  endpoint:
    path: /docs/server-side-template-injection-ssti
    method: GET
    data_selector: vulnerabilities
    params: {}
- name: server_side_js_injection
  endpoint:
    path: /docs/server-side-js-injection
    method: GET
    data_selector: vulnerabilities
    params: {}
- name: server_side_request_forgery
  endpoint:
    path: /docs/server-side-request-forgery-ssrf
    method: GET
    data_selector: vulnerabilities
    params: {}
- name: sql_injection
  endpoint:
    path: /docs/sql-injection
    method: GET
    data_selector: vulnerabilities
    params: {}
- name: version_control_systems
  endpoint:
    path: /docs/version-control-system-exposure
    method: GET
    data_selector: vulnerabilities
    params: {}
- name: xpath_injection
  endpoint:
    path: /docs/xpath-injection
    method: GET
    data_selector: vulnerabilities
    params: {}
- name: client_side_attacks
  endpoint:
    path: /client-side-attacks
    method: GET
    data_selector: attacks
    params: {}
- name: cve_test
  endpoint:
    path: /cve_test
    method: GET
- name: retire_js
  endpoint:
    path: /retire_js
    method: GET
- name: CVE scanning
  endpoint:
    path: /cve_test
    method: GET
    data_selector: records
    params: {}
- name: JavaScript Vulnerabilities Scanning
  endpoint:
    path: /retire_js
    method: GET
    data_selector: records
    params: {}
- name: LDAP Injection
  endpoint:
    path: /ldapi
    method: GET
    data_selector: records
    params: {}
- name: WordPress Scan
  endpoint:
    path: /wordpress
    method: GET
    data_selector: records
    params: {}
- name: XML External Entity (XXE)
  endpoint:
    path: /xxe
    method: GET
    data_selector: records
    params: {}
- name: HTTP Security Headers
  endpoint:
    path: /docs/misconfigured-security-headers
    method: GET
    data_selector: headers
    params: {}
notes:
- To access the API, you'll need a valid token in the Authorization header.
- Include a valid API key in the Authorization header.
- Bright tests for all common vulnerabilities, such as SQL injection, CSRF, XSS, and
  XXE - as well as uncommon vulnerabilities, such as business logic vulnerabilities.
- The Bright CLI Repeater acts as a secure proxy that connects to your local targets.
- Real-time progress results are now shown in the authentication test process.
- Ability to unmask passwords in Authentication Objects
- Passwords and Authorization headers in Authentication Objects are now masked by
  default to enhance data protection
- 'Bright has the following public static IPs: U.S. – 54.205.119.224, Europe – 54.75.37.42'
- The private cloud instance is hosted on the Bright infrastructure.
- Separate databases at the instance level. Standard SaaS only accommodates some databases
  at a logical level.
- Full control over network-level configurations, such as load handling, network-level
  access configurations (IP allow/deny), options for site-to-site VPN setup.
- Improved security in lateral-movement scenarios.
- Bright supports Google, Okta, and Microsoft SSO options.
- To learn more about vulnerabilities and their remediations, see the Vulnerabilities
  Index.
- Bright authentication capabilities allow you to scan all the login-protected resources
  within your target application or API.
- If using a Repeater, add --ntlm flag to keep an open connection between a Repeater
  and the target.
- The Bright engine only supports `set-cookie` headers that are less than 4097 bytes.
  If the received header exceeds this limit, the engine will ignore the header and
  will not include it in the request/response data. Breaking the limit may also cause
  authentication object failure.
- When you first run Authentication Recorder, your browser may request permission
  to access your clipboard. Grant the permission to proceed.
- The recording does NOT start automatically when the browser window appears.
- The authentication process produces HTTP requests and receives HTTP responses.
- The email address is generated automatically and is not customizable.
- Emails are automatically deleted after 7 days.
- Single entrypoint creation does not create a discovery record
- To ensure complete coverage of the discovery, you should configure an authentication
  object so that the crawler can reach the authenticated parts of the target application.
- Authentication coverage - To ensure complete coverage of the discovery, you should
  configure an authentication object so that the Bright engine can reach the authenticated
  parts of the target application.
- HAR upload limits - A single .HAR file is limited to 500 Mb, but you can upload
  multiple files for larger targets.
- The quality of the scan depends directly on the .HAR file quality. The more detailed
  the .HAR file, the larger the discovery scope can be covered by Bright.
- Before using a .HAR file for a scan we recommend that you verify its formatting
  and structure using a .HAR file viewer.
- These kinds of files (.HAR and .JSON files) can be also viewed and edited in any
  text editor.
- Uses OAuth2 with refresh token — requires setup of connected app in api
- Some objects like Contact may return nulls in deeply nested fields
- Uses OAuth2 with JWT tokens.
- Configuration issues can affect discovery results but do not prevent running a discovery.
- Critical issues may prevent using the schema for a discovery.
- Bright uses the FIRST element in the servers array as a scan target.
- Legacy scanning is still available, to use it, click Discover Entrypoints in the
  New Scan dialogue.
- The default value for concurrent requests is 10.
- Skipping static parameters can increase scan speed.
- Default settings are optimized for high-quality scans.
- Currently our scans are capped at 2000 Entrypoints.
- The default value for concurrent requests is 10 requests.
- Automate your workflow by scheduling a Discovery scan first, followed by a status-based
  DAST scan with a short delay.
- 'Limit: 2,000 EPs per scan.'
- No EPs found for the selected status may trigger UI or email errors.
- Bright allows users to lock any adjusting parameters for editing due the scan template
  creation. This allows you to ensure that scans are performed with exactly the same
  configurations as provided.
- If during a scan, Bright receives mostly 403 or 405 statuses, it may indicate that
  Bright is blocked by a WAF.
- Response statuses include 500, with the percentage of total responses <60% may indicate
  an unstable network.
- Response statuses include `429` for API throttling.
- The Super Bot Fight Mode is a global configuration and will affect your entire protection
  of all Cloudflare configurations.
- To change the status of the issue, click Actions and select an action to perform.
- To change the issue severity, open the relevant menu and select an appropriate status
  manually from Critical, High, Medium, or Low.
- Bright allows you to monitor the scan progress, check the setup parameters and runtime
  notifications, as well as view the scan results.
- You can customize the visible tabs on the Scan details page.
- Bright can track the history of each entrypoint, involved in a scan.
- By default, the next runs of all scheduled and retested scans are executed with
  the initial settings defined during the creation of the scans.
- You can download a scan report in the PDF, JSON or CSV format for further analysis.
- Bright provides you with the opportunity to select the scope of the information
  to be included in the PDF report.
- An organization-wide 2FA policy cannot be set to mandatory until all the administrative
  users have set up their own 2FA.
- Make sure that the server can serve the .nex file from the webroot.
- Only the Admin and Owner default roles allow creating and managing custom roles.
- The default roles are read-only, you cannot edit or delete them.
- For some Bright operations and integrations, you will need specific scanning and
  management permissions provided by selecting the relative access scopes.
- To enable integration with your CI pipeline, you may require to create an organization
  or a personal API key with a predefined set of scopes.
- Enables communication between a Repeater and the Bright engine
- Provides unrestricted access to discoveries
- Allows creating, editing, deleting, testing and previewing changes made to entrypoints
- Some objects may return nulls in deeply nested fields
- A project is required for the configuration of a new discovery or a scan.
- Keep the Bright CLI updated for the best experience.
- Access to the internet to communicate with Bright (directly or via a proxy), and
  in case it is used as a repeater - access to the internal targets on the local network.
- Standalone executables eliminate additional dependencies, ensuring a hassle-free
  setup process.
- By default, the chart connects to app.brightsec.com.
- To ensure compatibility, install the latest NPM version in your local environment
  using versions 20 or 22 of Node.
- Microsoft Windows Installer is an installation and configuration service provided
  with Windows.
- Default concurrency is 10
- Default interactions depth is 3
- Default smart option is true
- Crawl parent path folders and subdomains default is false
- Request to start a new discovery using the same configuration as an existing discovery,
  by discovery ID.
- This command allows you to track the progress of an update host flow.
- The Repeater mode requires a working AUTH_TOKEN with the scope bot.
- Headers set with this option override the original headers and are set in all requests.
- Currently supported operating systems include Windows, Linux, and macOS.
- To test network connectivity, you will need a valid Repeater ID and an API token
  with the bot scope.
- The name of the scan is a required option.
- This command stops a scan by its ID
- The breakpoint option allows you to follow the fail-fast principle when polling
  the scan results.
- If an archive with that name already exists, an error will be shown.
- Uses JWT authentication — requires setup of connected app in Bright
- Some endpoints may have rate limits
- When running Bright CLI on Windows, you might encounter a warning due to Microsoft
  Defender SmartScreen.
- On macOS, unsigned binaries might be blocked from execution.
- On Apple silicon machines, Rosetta 2 needs to be installed to run the CLI.
- To use the CLI on a Linux/arm64 machine, you need to install QEMU software.
- When working with Docker 18 and above on macOS and Windows, you can establish a
  connection with a local target by referencing host.docker.internal, which points
  to the localhost.
- Linux users can use the host network mode through the --net parameter to share the
  host's network stack.
- Don't install the command-line interface (CLI) as a root user. Instead, consider
  using a node version manager (e.g. nvm or n) or configuring npm to use a different
  default directory.
- The Repeater is using WebSocket and HTTPS (443) for communication between the Repeater
  and Bright cloud.
- If your environment uses a proxy server, please make sure that the SOCKS protocol
  support is enabled.
- The Repeater mode is not compatible with TLS tests.
- The key need to have the `bot` scope.
- Bright supports SOCKS4, SOCKS5, SOCKS4a, and SOCKS5h.
- Bright supports SOCKS4, SOCKS5, SOCKS4a, and SOCKS5h. If you specify SOCKS://<URL>,
  SOCKS5h is applied by default.
- If you are using the Bright app on a private cloud, ensure you specify the custom
  cluster instead of <https://app.brightsec.com> (for example, <https://my-cluster.brightsec.com>).
- Using scripts are only supported for discoveries or scans running via a Repeater.
- The authorization token is a composite of a secure cryptographic algorithm, the
  AWS Access Key ID and a hash-encoded signature.
- Using external dependency is not possible in HMAC script. Therefore, to use external
  dependency, you need to 'bundle (pack)' everything – HMAC script with its internal
  dependencies and external dependencies – in a single JavaScript file.
- 'While using ''rollup'', make sure that you use the es modules instead of cjs: import
  ''something'' VS require(''something'')'
- Repeater Scripts allow you to add, change or compute some part of a scan request
  before it is dispatched to the target.
- The machine on which the Repeater will be run must have the latest version of the
  Bright CLI.
- Integrations allow you to simplify and accelerate fixing the security issues of
  your application or API.
- The Issues feature is enabled in your GitHub repository settings.
- Allow third-party application access for your organization in Azure DevOps.
- You should first register the Bright application in GitLab.
- The created Application ID and Secret will then be required for enabling the integration
  in the Bright app.
- Bright supports connecting multiple Snyk instances
- A dedicated project is required for the Snyk integration
- The option to filter issue severity is only available to the users whose roles include
  the `integrations.repos:manage` access scope.
- To configure provisioning, first enable Okta SSO using OIDC or SAML.
- Requires an Organization Key with 'scim' scope for provisioning.
- Bright does not support special symbols for `userName`. If the `userName` of an
  Okta user contains special symbols, they will be sanitized when signing in to a
  Bright organization via SSO.
- Strict enforcement of SSO for all organization members will require resetting the
  connection in case of an SSO break.
- If you delete a user that was provisioned to a connected Bright organization on
  the Azure side, the user will become inactive in the Bright organization and will
  not be activated back automatically after re-adding them to Azure.
- To enable automatic activation of users after re-adding them on the Azure side,
  add the ?aadOptscim062020 flag to the Tenant URL.
- The 'Namespace' field must be blanked to successfully complete the integration
- Although it is possible to configure a CI pipeline with our REST API, it is recommended
  to use our Bright CLI for an easier, more robust configuration of your pipeline.
- Requires setup of environment variables like BRIGHT_TOKEN for API access.
- Bright allows you to follow the fail-fast principle by interrupting a scan automatically
  at the first detected vulnerability.
- 'You have a valid User Key, Project Key or Organization Key with the following scopes:
  scans:read, scans:run, scans:stop'
- 'We need to change the following parameters with our own: repeater (repeater ID),
  token (your Bright token)'
- BRIGHT_TOKEN (API key) is required to use the Bright CLI.
- The scanner is set to automatically scan every time there is a change committed
  in the repository, enabling developers to run an automated, comprehensive and accurate
  security scan on every commit.
- The Linux Docker deployment of TeamCity is currently not supported.
- If a valid API token `BRIGHT_TOKEN` and Repeater ID `REPEATER` were not added, then
  the **Unauthorized access** error appears. Please check your credentials.
- If a valid API token `BRIGHT-TOKEN` and Repeater ID `REPEATER` were not added, then
  the **Unauthorized access** error appears. Please check your credentials.
- A valid User Key, Project Key, or Organization Key with specific scopes is required.
- If a valid API token 'BRIGHT-TOKEN' and Repeater ID 'REPEATER' were not added, then
  the Unauthorized access error appears.
- Uses API key for authentication
- Poll the scan until it returns something, or its time runs out
- Requires valid User Key, Project Key or Organization Key with specific scopes
- Ensure BRIGHT_TOKEN variable is set in the environment
- If a valid API token BRIGHT_TOKEN and Repeater ID REPEATER were not added, then
  the Unauthorized access error appears.
- You have created the BRIGHT_TOKEN and REPEATER variables on your Travis CI machine.
- You have copied the Bright PROJECT_ID on the Projects page.
- Requires setup of BRIGHT_TOKEN environment variable.
- If a valid API token BRIGHT_TOKEN and Repeater ID REPEATER were not added, then
  the Unauthorized access error appears. Please check your credentials.
- You have a valid Repeater ID.
- You have a valid User Key, Project Key or Organization Key with specified scopes.
- To apply this option, you only need to install the Bright CLI globally on your GitLab
  machine using the relative NPM command.
- Requires valid User Key, Project Key, or Organization Key with specific scopes.
- You have to set the BRIGHT_TOKEN variable in your GitLab pipeline.
- Requires valid API keys with specific scopes.
- 'You have a valid User Key, Project Key, or Organization Key with the following
  scopes: scans:read, scans:run, scans:stop.'
- 'You have set the BRIGHT_TOKEN variable in your GitLab pipeline: Settings > CI/CD
  > Variables.'
- If a valid API token `BRIGHT_TOKEN` and Repeater ID `REPEATER` were not added, then
  the **Unauthorized access** error appears.
- Tests for various client-side vulnerabilities such as XSS, CSRF, and insecure cookies.
- Multiple authentication methods are supported.
- The issue can be found in the source code on the response body, and subdomains using
  S3 buckets.
- Ensure access controls are consistently applied and enforced on both client and
  server sides.
- 'Follow the Principle of Least Privilege: Grant the minimum necessary permissions
  for users to perform their roles.'
- 'Validate User Inputs: Check and validate all inputs to avoid unauthorized access
  via parameter tampering.'
- 'Secure API Endpoints: Ensure that all API endpoints, especially POST, PUT, and
  DELETE, are properly protected with access controls.'
- 'Use Secure Tokens: Implement short-lived, stateless JWTs or invalidate session
  identifiers on logout.'
- 'Monitor and Log: Track access control failures and alert administrators for unusual
  activities.'
- JSON Web Token (JWT) is an open standard for transmitting information securely.
- This vulnerability allows an attacker to gain privileges or assume identity.
- Ensure that access control mechanisms are applied not only to objects but also to
  their individual properties.
- Validate and sanitize all incoming data to prevent injection attacks.
- Ensure that only authorized properties can be accessed or modified by users based
  on their roles.
- Apply the principle of least privilege by granting users the minimum level of access
  necessary for their role. This reduces the risk of unauthorized access to sensitive
  properties.
- Avoid using generic methods such as `tojson()` and `to_string()`. Instead, cherry-pick
  specific object properties you specifically want to return. If possible, avoid using
  functions that automatically bind a client's input into code variables, internal
  objects, or object properties.
- Implement a schema-based response validation mechanism as an extra layer of security.
  As part of this mechanism, define and enforce data returned by all API methods.
- The attack surface for SAML authentication is extensive, mostly due to the fact
  that SAML is XML-based.
- Most SAML SSO security vulnerabilities are introduced by Service Providers (SPs)
  improperly validating and processing SAML responses.
- Multi-factor authentication (MFA) is by far the best defence against the majority
  of password-related attacks, including the brute-force attacks.
- CAPTCHA can help prevent automated login attempts against accounts.
- Avoid making implicit assumptions about user behavior or the behavior of other parts
  of the application. Verify and limit the user input that will be used as business
  parameters on both client and server sides.
- Please bear in mind that attackers can see the API requests to your application
  and manipulate the parameters. Additionally, the use of standard parameters (like
  limit, offset and others) should be validated and allowed only for those APIs for
  which it is necessary. Never trust that an API call will not be used or abused by
  anyone other than your application.
- Web applications are comprised of various components, incorporating proprietary
  and open-source entities such as platforms, frameworks, and libraries.
- Ensure that you keep your components up to date by installing the latest stable
  version.
- Always use the 'SameSite' Cookie Attribute for session cookies. Based on your application
  use cases, 'Lax' or 'Strict' value should be used.
- Do not use the GET method for state-changing requests. The GET request should be
  used only for retrieving the information.
- Try to avoid cross-site requests if possible. Modern web browsers support same-origin
  policy restriction, so do not configure CORS headers on your server.
- If your application supports cross-site requests, then carefully configure CORS
  headers. Configure allowed domain names in 'Access-Control-Allow-Origin' header.
- Avoid embedding untrusted data in your HTML document whenever possible. Limit insertion
  to specifically safe locations.
- Prioritize HTML encoding for untrusted data before integrating it into the content
  of HTML elements.
- Utilize attribute encoding for untrusted data before embedding it into common HTML
  attributes.
- Implement JavaScript encoding to safeguard untrusted data before inserting it into
  JavaScript data values.
- Before incorporating untrusted data into HTML style property values, apply CSS encoding
  and conduct rigorous validation.
- Employ URL encoding for untrusted data before inserting it into HTML URL parameter
  values.
- Rely on libraries specifically designed for the task of sanitizing HTML markup.
- Exercise caution with JavaScript URLs.
- CSS injection represents a severe security flaw where an attacker inserts malicious
  Cascading Style Sheets (CSS) code into a web application.
- Countermeasures against CSS injection necessitate the implementation of stringent
  coding standards, meticulous input validation, and robust output encoding.
- Leakage of sensitive data
- Administrative section must have authentication. That means each action in that
  section should be authenticated.
- URL for the login form should not be shown on your public website.
- Default Login Location should be changed if possible.
- Administrative section should be closed for search bots.
- Comments and links with the information about the default login form should be removed
  from the HTML code shown by the client application.
- Remove the default credentials or change the password.
- Enable Brute Force Protection for the login form.
- Sanitize user input with special functions according to your programming language.
- Use certain correct types for supplied user input such as string, float or int.
- Avoiding excessive data exposure and not relying on the client to carry out the
  information filtering, instead opting for the filtering to occur at the API level
  before the information is sent to the client.
- Ensuring that each client receives only the necessary information. This step should
  be carried out at the API design stage to ensure that once the API is deployed,
  a regular user’s client would only receive information that the client needs and
  no extra data, such as information only administrators should have.
- Classifying any sensitive and personal information and reviewing how this information
  is used by the API to avoid sending it when it is not necessary as part of the functionality.
- Most web applications use common files to store application configuration, logs,
  tokens and other sensitive information.
- This vulnerability allows an attacker to gain sensitive information and take control
  over other systems the credentials are used for.
- This test is not supported when using a Repeater.
- The issue can be found in the source code on the client side.
- Disable showing errors to users. The errors should be logged to files or a special
  logging system.
- Avoid showing users debug information or sensitive logs.
- GraphQL Introspection attack is an 'Information Disclosure' and 'Misconfiguration'
  vulnerability.
- Restrict access to introspection queries.
- The application stores a malicious code (injected HTML) in a long time storage (usually
  a database on the server side).
- The protection against HTML injections is better to consider as general XSS protection
  in the application.
- An enumeration attack allows an attacker to check whether a user exists in the system
  by looking for differences in the server response based on the validity of submitted
  credentials/user's information.
- The main targets for this attack are places where the attacker can enter data about
  an assumed user and make conclusions depending on the response from the server.
- Web applications comprise diverse elements such as platforms, frameworks, and libraries.
- Addressing vulnerabilities within these components through source code updates or
  application upgrades is crucial for security.
- Attackers meticulously analyze an application to pinpoint its platform, dependencies,
  and known vulnerabilities.
- Improper Assets Management vulnerability allows an attacker to get access to old
  API version.
- This vulnerability allows the attacker to gain sensitive information and get full
  access to the server through old vulnerable versions of APIs.
- Insecure HTTP methods should be disabled.
- If an application needs one or more of these methods, check that their usage is
  properly limited to trusted users and safe conditions.
- Ensure all user input is sanitized before rendering it on the page. This involves
  stripping out or encoding potentially harmful characters such as script tags or
  HTML syntax.
- Employ libraries or frameworks that automatically apply context-aware escaping to
  prevent the insertion of untrusted HTML content.
- Implement a strict Content Security Policy that restricts sources for scripts, styles,
  and other potentially dangerous resources to trusted domains.
- Currently, the Bright’s insecure TLS configuration test is limited to cloud-based
  scans and is not available for scans run in the Repeater mode.
- 'To simplify the check, you can use open-source TLS/SSL testers, for example: https://github.com/drwetter/testssl.sh
  and https://testssl.sh'
- A one-time fix will solve the current issue, but will not prevent similar cases
  in the future. You need to take a set of measures to continuously monitor and react
  to new vulnerabilities identified in the components you use.
- Remove unused dependencies, unnecessary features, components, files, and documentation.
- Continuously inventory the versions of both client-side and server-side components
  (for example, frameworks, libraries) and their dependencies using special tools.
- API requests consume resources such as network, CPU, memory, and storage.
- 'An API is vulnerable if at least one of the following limits is missing or set
  inappropriately (e.g., too low/high): Execution timeouts, Max allocable memory,
  Number of file descriptors, Number of processes, Request payload size, Number of
  requests per client/resource, Number of records per page to return in a single request-response.'
- Add proper server-side validation for query string and request body parameters,
  specifically the one that controls the number of records to be returned in the response.
- Escape all variables using the right LDAP encoding function.
- Wherever possible, use the whitelist approach for input validation. Additional input
  validation can be used to detect unauthorized input before it is passed to the LDAP
  query.
- Use the frameworks that automatically protect against the LDAP Injection (like LINQtoAD
  for .NET).
- To decrease the potential damage of a successful LDAP injection, you should minimize
  the privileges assigned to the LDAP binding account in your environment.
- Local File Inclusion is an attack applicable to web applications that dynamically
  include local files or scripts.
- An attacker is able to change the requested URL to retrieve local files.
- Verify that the HTTP Response Headers are configured correctly. If necessary, apply
  changes to the web server configuration and the application source code.
- It is necessary to configure (enable) the Secure attribute for sensitive cookies.
- NoSQL injection (NoSQLi) is a security vulnerability that occurs when an attacker
  is able to inject malicious input into a NoSQL database query.
- To prevent NoSQLi, developers should implement proper input validation, use parameterized
  queries or prepared statements, employ least privilege access controls, and keep
  software up-to-date with the latest security patches.
- The impact of an open S3 bucket can be severe. Since anyone can access the data
  without authentication, it can lead to unauthorized viewing, downloading, modification,
  or deletion of sensitive information.
- 'Regularly Monitor and Audit Access: Set up logging and monitoring to detect unauthorized
  access attempts and unusual activities.'
- Avoid using the entire OS commands for your code. We recommend that you use built-in
  library functions instead of the OS commands, as they cannot be manipulated to perform
  unintended tasks.
- When your programming language / a built-in library function does not have a corresponding
  OS command, the OS command needs to be sanitized before execution.
- The issue can be found in the source code on the server side.
- The issue can be found in the server configuration.
- Prompt injections occur when carefully constructed prompts bypass filters or manipulate
  the Language Model (LLM) into disregarding prior commands or performing actions
  beyond its intended scope.
- Denial of service by triggering JavaScript exceptions
- Remote code execution by forcing the code path that the attacker injects
- Escalating to Reflected XSS
- Secret Tokens should never be hardcoded in the source code of your application.
- Store Secret Tokens in environment variables if possible. If environment variables
  are being used, make sure to only read them in a single config file.
- Do not store configuration files in a source code repository. Such files have to
  be stored separately and be uploaded or created in the application during the release/deployment
  process.
- If secure information is stored in your application, it should be encrypted.
- Restrict supported protocols in your web application. Disable any unused schema,
  for example ftp://, dict://, file:///, gopher://.
- Some web applications use template engines to generate HTML pages.
- This vulnerability allows an attacker to gain sensitive information and execute
  shell commands.
- An SQL injection attack involves the unauthorized insertion of a malicious SQL query
  into an application through client-provided input data.
- The web application inadvertently stores harmful data within its long-term, server-side
  database.
- An attacker can execute actions on the client side that are normally reserved for
  the victim user, such as retrieving cookies, session tokens, and other critical
  information.
- The uploaded file types must be restricted. Use a whitelist of accepted, non-executable
  file extensions.
- Validate the uploaded files. Limit the uploaded files amount and maximum file size.
- Make sure that your web server uses only one extension in the filename.
- The directory with the uploaded files should not have any 'execute' permission,
  and all the script handlers should be removed from these directories.
- Consider saving the uploaded files in a specially designed data storage rather than
  in the file system of your web server.
- Unvalidated Date Range is a type of vulnerability that might cause DoS and other
  types of resource consumption.
- It is necessary to fully validate and restrict the date range selection available
  to the user on both the client and the server sides.
- The best solution to avoid unvalidated redirects is not to use any redirects or
  forwards.
- Remove the VCS metadata (repository folders `.svn`, `.git`) from your production
  web server.
- If it is not possible to remove repository folders, ensure that you deny access
  to the repository folders (`.svn`, `.git`) via your web server configuration.
- A WordPress component was found to have a known public vulnerability, please see
  the additional information section below for specific information on each issue.
- A one-time fix will solve the current issue, but will not prevent similar cases
  in the future.
- 'The vulnerability may expose the application to the following attack vectors: Gain
  sensitive information, Disclose internal content via HTTP(S) requests or launch
  a CSRF attack to any unprotected internal services, Initiate SSRF attack in applications
  that use XML, Modifying the content type of application/x-www-form-urlencoded to
  enable XXE with LFI, Leveraging XInclude for application/x-www-form-urlencoded by
  injecting XML parameters with XXE, Execute a malicious URL, possibly allowing the
  arbitrary code to be executed under the application account, Cause denial of the
  services (DoS)'
- XPath Boolean-Based Injection is a sophisticated technique employed to bypass the
  authentication mechanisms of web applications.
- The issue can be found on the server side.
errors:
- '401: invalid credentials'
- '404: User not founded'
- '409: User Already exists'
- 'REQUEST_LIMIT_EXCEEDED: Throttle API calls or reduce frequency'
- 'QUERY_TIMEOUT: Break down filters or add selectivity'
- '401 Unauthorized: Recheck OAuth scopes or token expiration'
- '403: invalid credentials'
- '403: user has no admin rights'
- Syntax errors have the highest priority and are displayed first.
- Validation errors involve incorrect specification of property names and their values.
- 'No EPs found for the selected status: If you picked a status that is irrelevant
  to the updated EPs list.'
- '2,000 EPs limit exceeded: Only scanning the first 2,000 EPs.'
- 'No EPs found for the selected status: UI error for manual scans, email warning
  for scheduled scans.'
- The default templates cannot be edited.
- Repeater::ESOCKETTIMEDOUT
- NexPloit::Session::Client::Agent::RepeaterTimeout
- Repeater::ECONNREFUSED - You are trying to connect to your server but are unable
  to connect to the port
- Repeater::ECONNRESET - Your request to the server is not fulfilled
- Repeater::ETIMEDOUT - Your request response is not received in the given time
- Repeater::HPE_LF_EXPECTED
- Repeater::ENOTFOUND - You were not able to connect to the given address
- Repeater::EAI_AGAIN - DNS lookup timed out error, meaning there is a network connectivity
  error or proxy related error
- Repeater::EHOST_UNREACH - No route to host
- 'REQUEST_LIMIT_EXCEEDED: Check the current concurrent requests and set them to a
  lower number.'
- 'Disrupted scan status: The target is not authorized to be scanned.'
- 'Failed scan: Check the general scan health. Monitor the number of requests, progress,
  and network responses.'
- '404: Indicate that Bright is blocked by a WAF, or that there is an issue with authentication.'
- 'exit code 50: Indicates at least one issue found during scan.'
- The file with that name already exists or the HAR file is corrupted
- '401 Unauthorized: Recheck JWT token or expiration'
- '403 Forbidden: Check permissions for the requested resource'
- '404 Not Found: Verify the endpoint URL'
- 'permission denied: Ensure the file is executable using chmod +x.'
- 'exec ./bright-cli: no such file or directory: Possible compatibility issues on
  Alpine Linux.'
- 'EACCES permission errors while attempting to install packages globally: Don''t
  install the command-line interface (CLI) as a root user.'
- 'The module ''<some-path-to-file>'' was compiled for a different version of Node.js:
  Try recompiling or reinstalling the module (for example, using ''npm rebuild'' or
  ''npm install'').'
- 'gyp failed with exit code: 1: For a permanent solution please refer to Mitigating
  Problems with Built-in Node-gyp.'
- '200: OK - the request has succeeded.'
- '201: Created - the request has been fulfilled and has resulted in one or more new
  resources being created.'
- '202: Accepted - the request has been accepted for processing, but the processing
  has not been completed.'
- '203: Non-authoritative information - the request was successful but the enclosed
  payload has been modified from that of the origin server’s 200 OK response by a
  transforming proxy.'
- '204: No content - indicates that a request has succeeded, but that the client doesn''t
  need to navigate away from its current page.'
- '206: Partial content - the server is delivering only part of the resource requested
  by the client due to a range header sent by the client.'
- '301: Moved Permanently redirect status response - the requested resource has been
  definitively moved to the URL given by the Location headers.'
- '302: Found - a specific URL has been moved temporarily to a new location.'
- '303: Other redirect status response code - the redirects don''t link to the requested
  resource itself, but to another page.'
- '304: Not modified - there is no need to retransmit the requested resources.'
- '307: Temporary redirect - the resource requested has been temporarily moved to
  the URL given by the Location headers.'
- '308: Permanent redirect - the resource requested has been definitively moved to
  the URL given by the Location headers.'
- '400: Bad request - API request is not formatted correctly.'
- '401: Unauthorized - authentication to use an API is failed.'
- '403: Forbidden - requests to this URL are forbidden.'
- '404: Not found - the requested URL doesn’t exist on the API server.'
- '405: Method not allowed - a web browser has requested access to one of your pages,
  and your web server has recognized the request.'
- '406: Client’s requests with a particular protocol to a website or web application
  are not supported.'
- '409: Conflict - the request could not be processed because of a conflict in the
  request.'
- '411: Length Required - the server refuses to accept the request without a defined
  Content-Length header.'
- '412: Precondition Failed - access to the target resource has been denied.'
- '414: Too long response status code - the URL requested by the client is longer
  than the server is willing to interpret.'
- '415: Unsupported media type - the server refuses to accept the request because
  the payload format is in unsupported format.'
- '417: Expectation failed - the expectation given in the request''s Expect header
  could not be met.'
- '419: Session expired - a session has expired while processing a post request.'
- '422: Unprocessable entity - the request is unable to process, although it is understandable.'
- '424: Failed dependency - status code means that the method could not be performed
  on the resource because the requested action depended on another action and that
  action failed.'
- '429: Too many requests - too many requests per second are sent.'
- '431: Request header fields too large - the server refuses to process the request
  because the request''s HTTP headers are too long.'
- '500: Internal server error - API server crashed.'
- '501: Not implemented - the request is not available yet.'
- '502: Bad gateway - the server you were calling is not an actual API server, but
  a gateway or proxy.'
- '503: Service unavailable - too many API requests were sent and the API can’t handle
  any more of them.'
- '504: Gateway timed out - The server you were calling can’t response quickly.'
- '505: Version not supported - the HTTP version used in the request is not supported
  by the server.'
- '520: The message didn''t fit in with the standard list of HTTP response codes.'
- '524: Occurs if the origin web server acknowledges the resource request after the
  connection has been established, but does not send a timely response.'
- 'ArgumentError: Occurs after receiving invalid arguments.'
- 'Exception: General exception error'
- 'IO::EOFError: Input/output system error'
- 'IO::Error: General error for input/output issues.'
- 'IO::TimeoutError: Timeout while transmitting data - occurs when there is no response
  from the remote side in the network connection.'
- 'JSON::MappingError: Occurs the JSON file contains inappropriate content.'
- 'JSON::ParseException: Occurs then the JSON file is not valid (or probably is not
  a JSON file).'
- 'NexPloit::Agent::Error: General error for repeater issues.'
- 'NexPloit::Agent::Timeout: Failed to connect to the Repeater, connection timeout.'
- 'NexPloit::Session::AuthFlow::Error: Authorization error - occurs during an authflow,
  when server response is not 200.'
- 'NexPloit::Session::Client::Agent::RepeaterTimeout: General error for connection
  issues'
- 'NexPloit::Session::Client::Error: General error for connection issues'
- 'NexPloit::Session::Client::Timeout: Connection timeout to the address'
- 'OpenSSL::SSL::Error: Certificate error'
- 'Repeater::EAI_AGAIN: Indicates that there is no data available and to try the operation
  again later.'
- 'Repeater::ECONNABORTED: Indicates that the network connection has been aborted.'
- 'Repeater::ECONNREFUSED: Indicates that the network connection has been refused.'
- 'Repeater::ECONNRESET: Indicates that the network connection has been refused.'
- 'Repeater::ENETUNREACH: Indicates that the network connection has been reset.'
- 'Repeater::ENOTFOUND: Occurs when it’s impossible to determine the address.'
- 'Repeater::EPROTO: Indicates a protocol error.'
- 'Repeater::ESOCKETTIMEDOUT: Timeout error - operation didn’t complete within the
  expected time.'
- 'Repeater::ETIMEDOUT: Indicates that the connection timed out.'
- 'Repeater::HPE_INVALID_HEADER_TOKEN: Error in header validation on the Repeater
  side.'
- 'RuntimeError: System function response is not valid or expected.'
- 'Socket::Addrinfo::Error: Can’t get an address because of DNS problems.'
- 'Socket::ConnectError: General connection error.'
- 'URI::ExtractDomainError: Unable to determine public-suffix of this domain.'
- 'WebDriver::DriverStore::Timeout: The engine couldn’t get an idle web-driver from
  the storage.'
- 'Unauthorized access: Check your credentials'
- 'Unauthorized access: Check your credentials.'
- '401 Unauthorized: Recheck API key or token expiration'
- 'Unauthorized access: Please check your credentials.'
- '401 Unauthorized: Recheck API key or token validity'
- '401 Unauthorized: Check your API key and permissions.'
- Potential data breaches
- Malware distribution
- Negatively impact on the company reputation
- Unauthorized access to sensitive data
- Privilege escalation
- Data leakage or modification
- Compromise of application security and integrity
- Use a JWT library that is not exposed to this vulnerability.
- During token validation, explicitly request the expected algorithm.
- 'CWE-287: Improper Authentication'
- CWE-307
- 'CWE-639: Validate and limit user input for business parameters.'
- 'CWE-79: Cross-Site Scripting vulnerability'
- 1064 - You have an error in your SQL syntax; check the manual that corresponds to
  your MySQL server version for the right syntax to use near ''' at line 1
- 'CWE-20: Input validation error'
- Information disclosure, the elevation of privilege.
- 'CWE-284: Improper Access Control'
- 'CWE-200: Information Disclosure'
- Login failed, invalid username
- Login failed, invalid password
- This email address doesn't exist in our database
- We just sent you a password reset link
- Unauthorized Actions
- Gather sensitive information
- Malware Distribution
- Account Takeover
- Disable insecure HTTP methods (PUT, DELETE, CONNECT, and TRACE) on the production
  web server.
- CWE-79
- An attacker may read the contents of traffic (confidentiality)
- An attacker may modify traffic (integrity)
- An attacker may replay requests against the server (replay prevention)
- Inability for the client to verify that they are connected to the real server when
  using the client certificate (authentication)
- CWE-90
- 'CWE-693: Misconfigured Security Headers'
- CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:N/I:L/A:N
- 'CWE-1004: Ensure sensitive cookies use the HttpOnly attribute to protect against
  XSS attacks.'
- CWE-614
- Unauthorized data access
- Data manipulation
- Data exfiltration
- Denial of service (DoS)
- Lateral movement
- 'CWE-539: Session management implementation issues leading to potential session
  hijacking.'
- Data Leakage
- Legal Issues
- Token leaks
- 'CWE-200: Information Exposure'
- 'CWE-20: Improper Data Validation'
- CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:N/I:H/A:N
- 'CWE-601: Unvalidated Redirect'
- '404 HTTP Code (Not Found): .git is not available on the server.'
- '403 HTTP Code (Forbidden): .git folder exists on the server, but it cannot be easily
  accessed.'
- 'CWE-611: XML External Entity (XXE) vulnerability'
- Data modification or deletion
- System compromise
- Denial of Service
- Reputation damage
- Compliance violations
auth_info:
  mentioned_objects:
  - Recorded Browser-Based Form Authentication
  - Manual Browser-Based Form Authentication
  - Custom API authentication flow
  - OauthToken
  - AuthProvider
  - NamedCredential
  - LoginRequest
  - LoginResponse
  - OidcClientResponse
  - LoginJwtResponse
  - JwtValidationResponse
  - User Key
  - Project Key
  - Organization Key
  - CWE-352
client:
  base_url: https://app.brightsec.com
  auth:
    type: oauth2
source_metadata: null
