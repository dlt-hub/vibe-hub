resources:
- name: identify_a_person
  endpoint:
    path: /reference/idgraph-identify-a-person
    method: post
- name: track_an_event
  endpoint:
    path: /reference/idgraph-track-an-event
    method: post
- name: delete_identifiers
  endpoint:
    path: /reference/idgraph-delete-identifiers
    method: post
- name: delete_contact
  endpoint:
    path: /reference/idgraph-delete-contact
    method: del
- name: ZetaClient
  endpoint:
    path: /initialize
    method: POST
    data_selector: response
    params: {}
- name: in_app_message
  endpoint:
    path: /in-app/message
    method: GET
    data_selector: messages
    params: {}
- name: push_notification
  endpoint:
    path: /push/notification
    method: POST
    data_selector: notification
- name: zetakit_reactnative
  endpoint:
    path: /docs/react-native-mobile-sdk-010
    method: GET
    data_selector: ''
    params: {}
- name: ZetaCore
  endpoint:
    path: /initialize
    method: POST
    data_selector: config
- name: push_notification
  endpoint:
    path: /push/notification
    method: POST
    data_selector: notification_data
- name: in_app_message
  endpoint:
    path: /in/app/message
    method: GET
    data_selector: messages
- name: track_event
  endpoint:
    path: /track-an-event
    method: POST
    data_selector: events
    params: {}
- name: clear_session_identity
  endpoint:
    path: /reference/clear-session
    method: POST
    data_selector: settings
    params: {}
- name: update_user
  endpoint:
    path: /reference/update-user
    method: POST
    data_selector: properties
    params: {}
- name: track_event
  endpoint:
    path: /track-an-event
    method: POST
    data_selector: event
    params: {}
- name: user_segment_membership
  endpoint:
    path: /reference/get-a-users-segment-membership
    method: GET
    data_selector: segments
- name: clear
  endpoint:
    path: /reference/clear-session
    method: POST
    data_selector: settings
- name: update_user
  endpoint:
    path: /reference/update-user
    method: POST
    data_selector: properties
    params: {}
- name: segment_membership
  endpoint:
    path: /check-segment-membership
    method: GET
    data_selector: status
    params: {}
- name: user_segment_membership
  endpoint:
    path: /reference/get-a-users-segment-membership
    method: GET
    data_selector: segments
- name: check_segment_membership
  endpoint:
    path: /reference/check-segment-membership
    method: GET
    data_selector: status
- name: authorization
  endpoint:
    path: /oauth/jwt
    method: POST
    data_selector: object
    params:
      refresh_token: required
- name: delete_person
  endpoint:
    path: /{site_id}/person_operation_requests
    method: POST
    data_selector: user
    params: {}
- name: Authorization
  endpoint:
    path: /oauth/jwt
    method: POST
    data_selector: object
    params:
      refresh_token: string
      force: boolean
- name: status_of_delete_a_person
  endpoint:
    path: /ver2/{site_id}/person_operation_requests/{request_token}
    method: GET
    data_selector: user
    params: {}
- name: delete_person
  endpoint:
    path: /{site_id}/person_operation_requests
    method: POST
    data_selector: user
    params:
      request_type: delete
      source: api
- name: find_person
  endpoint:
    path: /{site_id}/subscribers
    method: GET
    data_selector: object
- name: status_of_delete_a_person
  endpoint:
    path: /ver2/{site_id}/person_operation_requests/{request_token}
    method: GET
    data_selector: object
- name: recent_events
  endpoint:
    path: /ver2/{site_id}/subscribers/{uid}/events
    method: GET
    data_selector: events
    params:
      event_type: ''
      page_token: ''
- name: find_person
  endpoint:
    path: /ver2/{site_id}/subscribers
    method: GET
    data_selector: object
    params: {}
- name: identify_a_person
  endpoint:
    path: /ver2/{site_id}/subscribers/identify
    method: POST
    data_selector: response
    params: {}
- name: recent_events
  endpoint:
    path: /ver2/{site_id}/subscribers/{uid}/events
    method: GET
    data_selector: events
    params: {}
- name: look_up_person_by_contact
  endpoint:
    path: /subscribers
    method: GET
    data_selector: array of objects
- name: identify_person
  endpoint:
    path: /ver2/{site_id}/subscribers/identify
    method: POST
- name: merge_people
  endpoint:
    path: /person_operation_requests
    method: POST
    data_selector: object
    params: {}
- name: look_up_person_by_contact
  endpoint:
    path: /{site_id}/subscribers
    method: GET
    data_selector: array of objects
- name: delete_contact
  endpoint:
    path: /subscribers/{uid}/contacts/{contact_value}
    method: DELETE
    data_selector: subscriber
    params: {}
- name: merge_people
  endpoint:
    path: /person_operation_requests
    method: POST
    data_selector: response
    params: {}
- name: resend_email
  endpoint:
    path: /ver2/{site_id}/communications/{message_uid}/resend
    method: POST
    data_selector: response
    params: {}
- name: delete_contact
  endpoint:
    path: /{site_id}/subscribers/{uid}/contacts/{contact_value}
    method: DELETE
    data_selector: subscriber
    params: {}
- name: track_event
  endpoint:
    path: /{site_id}/activities
    method: POST
    data_selector: event
    params: {}
- name: resend_email
  endpoint:
    path: /ver2/{site_id}/communications/{message_uid}/resend
    method: POST
- name: track_event
  endpoint:
    path: /activities/
    method: POST
    data_selector: activity
- name: track_event_with_contacts
  endpoint:
    path: /ver2/{site_id}/activities
    method: GET
    data_selector: activity
    params: {}
- name: track_event
  endpoint:
    path: /{site_id}/activities
    method: POST
    data_selector: event
- name: unsubscribe_contact
  endpoint:
    path: /ver2/{site_id}/subscribers/{uid}/unsubscribe
    method: POST
- name: track_event
  endpoint:
    path: /ver2/{site_id}/activities/
    method: POST
- name: unsubscribe_contact
  endpoint:
    path: /ver2/{site_id}/subscribers/{uid}/unsubscribe
    method: POST
    data_selector: response
    params: {}
- name: track_event_with_contacts
  endpoint:
    path: /{site_id}/activities
    method: GET
    data_selector: activity
- name: View Previously Sent Email
  endpoint:
    path: /ver2/{site_id}/communications/:message_uid
    method: GET
    data_selector: response
    params: {}
- name: unsubscribe_contact
  endpoint:
    path: /ver2/{site_id}/subscribers/{uid}/unsubscribe
    method: POST
    data_selector: null
    params: {}
- name: add_or_remove_people_from_audience_lists
  endpoint:
    path: /{site_id}/segments/{id}/members
    method: POST
- name: unsubscribe_contact
  endpoint:
    path: /ver2/{site_id}/subscribers/{uid}/unsubscribe
    method: POST
    data_selector: null
    params: {}
- name: update_broadcast_campaign
  endpoint:
    path: /ver2/{site_id}/broadcasts/{campaign_id}
    method: PATCH
    data_selector: object
- name: preview_sent_email
  endpoint:
    path: /ver2/{site_id}/communications/:message_uid
    method: GET
    data_selector: response
    params: {}
- name: broadcast_campaign
  endpoint:
    path: /{site_id}/broadcasts/{campaign_id}
    method: GET
- name: add_or_remove_people_from_audience_lists
  endpoint:
    path: /{site_id}/segments/{id}/members
    method: POST
    data_selector: add
    params: {}
- name: create_email_campaign
  endpoint:
    path: /campaigns
    method: POST
    data_selector: object
- name: broadcast_campaign
  endpoint:
    path: /ver2/{site_id}/broadcasts/{campaign_id}
    method: PATCH
- name: asset_upload
  endpoint:
    path: /{site_id}/assets/upload
    method: POST
    data_selector: asset
    params:
      filepath: string
      folder_path: string
- name: broadcast_campaign
  endpoint:
    path: /ver2/{site_id}/broadcasts/{campaign_id}
    method: GET
- name: campaign_content
  endpoint:
    path: /{site_id}/campaigns/{campaign_id}/content
    method: GET
    data_selector: object
    params: {}
- name: create_email_campaign
  endpoint:
    path: /ver2/{site_id}/campaigns
    method: POST
- name: campaign_content
  endpoint:
    path: /campaigns/name/{campaign_name}/content
    method: GET
- name: asset_upload
  endpoint:
    path: /{site_id}/assets/upload
    method: POST
- name: update_campaign_content
  endpoint:
    path: /ver2/{site_id}/campaigns/{campaign_id}/content
    method: PATCH
    data_selector: object
    params: {}
- name: campaign_content
  endpoint:
    path: /{site_id}/campaigns/{campaign_id}/content
    method: GET
    data_selector: object
- name: update_campaign_content_by_name
  endpoint:
    path: /ver2/{site_id}/campaigns/name/{campaign_name}/content
    method: PATCH
- name: send_api_broadcast_campaign
  endpoint:
    path: /ver2/{site_id}/campaigns/<campaignID>/launch
    method: POST
- name: campaign_content
  endpoint:
    path: /ver2/{site_id}/campaigns/name/{campaign_name}/content
    method: GET
    data_selector: content
- name: Update Campaign Content
  endpoint:
    path: /{site_id}/campaigns/{campaign_id}/content
    method: PATCH
- name: send_campaign_proof
  endpoint:
    path: /ver2/{site_id}/campaigns/{campaign_id}/proofs
    method: POST
    data_selector: object
- name: update_campaign_content
  endpoint:
    path: /ver2/{site_id}/campaigns/name/{campaign_name}/content
    method: PATCH
- name: snippet
  endpoint:
    path: /{site_id}/snippets
    method: POST
    data_selector: object
    params: {}
- name: send_api_broadcast_campaign
  endpoint:
    path: /{site_id}/campaigns/<campaignID>/launch
    method: POST
- name: Delete a Snippet
  endpoint:
    path: /{site_id}/snippets/{snippet_id}
    method: DELETE
- name: send_campaign_proof_email
  endpoint:
    path: /ver2/{site_id}/campaigns/{campaign_id}/proofs
    method: POST
- name: snippets
  endpoint:
    path: /ver2/{site_id}/snippets
    method: GET
    data_selector: snippets
    params: {}
- name: snippet
  endpoint:
    path: /{site_id}/snippets
    method: POST
- name: get_snippet_by_name
  endpoint:
    path: /{site_id}/snippets/name/{snippet_name}
    method: GET
- name: snippet
  endpoint:
    path: /{site_id}/snippets/{snippet_id}
    method: GET
    data_selector: object
- name: delete_snippet
  endpoint:
    path: /{site_id}/snippets/{snippet_id}
    method: DELETE
    data_selector: object
    params: {}
- name: snippet
  endpoint:
    path: /ver2/{site_id}/snippets/{snippet_id}
    method: PATCH
    data_selector: ''
    params: {}
- name: snippets
  endpoint:
    path: /ver2/{site_id}/snippets
    method: GET
    data_selector: response
    params: {}
- name: update_snippet_by_name
  endpoint:
    path: /snippets/name/{snippet_name}
    method: PATCH
- name: snippet
  endpoint:
    path: /snippets/name/{snippet_name}
    method: GET
    data_selector: object
    params:
      site_id: string
- name: create_template
  endpoint:
    path: /{site_id}/templates
    method: POST
    data_selector: object
    params: {}
- name: snippet
  endpoint:
    path: /{site_id}/snippets/{snippet_id}
    method: GET
    data_selector: object
- name: delete_template
  endpoint:
    path: /ver2/{site_id}/templates/{template_id}
    method: DELETE
- name: snippet
  endpoint:
    path: /ver2/{site_id}/snippets/{snippet_id}
    method: PATCH
    data_selector: response
    params: {}
- name: delete_template
  endpoint:
    path: /ver2/{site_id}/templates/name/{template_name}
    method: DELETE
- name: Update Snippet by Name
  endpoint:
    path: /ver2/{site_id}/snippets/name/{snippet_name}
    method: PATCH
- name: templates
  endpoint:
    path: /{site_id}/templates
    method: GET
    data_selector: templates
    params:
      page_size: 10
      sort_field: updated_at
- name: template
  endpoint:
    path: /{site_id}/templates
    method: POST
    data_selector: object
- name: template
  endpoint:
    path: /ver2/{site_id}/templates/name/{template_name}
    method: GET
    data_selector: html_content
- name: delete_template
  endpoint:
    path: /ver2/{site_id}/templates/{template_id}
    method: DELETE
- name: delete_template_by_name
  endpoint:
    path: /ver2/{site_id}/templates/name/{template_name}
    method: DELETE
    data_selector: object
    params: {}
- name: template
  endpoint:
    path: /ver2/{site_id}/templates/{template_id}
    method: GET
    data_selector: response
- name: update_template
  endpoint:
    path: /ver2/{site_id}/templates/{template_id}
    method: PATCH
- name: templates
  endpoint:
    path: /{site_id}/templates
    method: GET
    data_selector: templates
    params:
      page_size: 10
      sort_field: updated_at
- name: update_template_by_name
  endpoint:
    path: /ver2/{site_id}/templates/name/{template_name}
    method: PATCH
    data_selector: null
    params: {}
- name: template
  endpoint:
    path: /ver2/{site_id}/templates/name/{template_name}
    method: GET
    data_selector: HTML content
- name: create_or_update_resource
  endpoint:
    path: /{site_id}/resources/{resource_id}
    method: PUT
- name: template
  endpoint:
    path: /ver2/{site_id}/templates/{template_id}
    method: GET
    data_selector: response
    params: {}
- name: resource_fields
  endpoint:
    path: /{site_id}/resources/fields
    method: GET
- name: update_template
  endpoint:
    path: /ver2/{site_id}/templates/{template_id}
    method: PATCH
- name: resource_count
  endpoint:
    path: /{site_id}/resources/count
    method: GET
- name: update_template_by_name
  endpoint:
    path: /ver2/{site_id}/templates/name/{template_name}
    method: PATCH
    data_selector: null
    params: {}
- name: resource_types
  endpoint:
    path: /{site_id}/resources/types
    method: GET
- name: create_or_update_resource
  endpoint:
    path: /ver2/{site_id}/resources/{resource_id}
    method: PUT
- name: specific_resource
  endpoint:
    path: /{site_id}/resources/{resource_id}
    method: GET
- name: resource_fields
  endpoint:
    path: /resources/fields
    method: GET
- name: Update Resource
  endpoint:
    path: /{site_id}/resources/{resource_id}
    method: PATCH
- name: resource_count
  endpoint:
    path: /{site_id}/resources/count
    method: GET
- name: Delete Resource
  endpoint:
    path: /{site_id}/resources/{resource_id}
    method: DELETE
- name: resource_types
  endpoint:
    path: /{site_id}/resources/types
    method: GET
- name: Get list of Resources
  endpoint:
    path: /resource-list
    method: POST
    data_selector: data
    params: {}
- name: specific_resource
  endpoint:
    path: /{site_id}/resources/{resource_id}
    method: GET
- name: Update Resource
  endpoint:
    path: /ver2/{site_id}/resources/{resource_id}
    method: PATCH
- name: track_event_batch
  endpoint:
    path: /{site_id}/activities/batch
    method: POST
    data_selector: activities
    params:
      return_processed_records: 'false'
- name: Delete Resource
  endpoint:
    path: /{site_id}/resources/{resource_id}
    method: DELETE
- name: identify_a_person_batch
  endpoint:
    path: /subscribers/batch
    method: POST
    data_selector: subscribers
    params:
      return_processed_records: true
- name: resources
  endpoint:
    path: /resource-list
    method: POST
- name: identify_person
  endpoint:
    path: /subscribers/identify
    method: POST
    data_selector: ''
    params: {}
- name: track_event_batch
  endpoint:
    path: /{site_id}/activities/batch
    method: POST
    data_selector: activities
    params: {}
- name: Delete Identifiers
  endpoint:
    path: /person_operation_requests
    method: POST
    data_selector: ''
- name: identify_a_person_batch
  endpoint:
    path: /ver2/{site_id}/subscribers/batch
    method: POST
    data_selector: subscriber
- name: delete_contact
  endpoint:
    path: /ver2/{site_id}/subscribers/{unique_client_id}:{id}/contacts/{contact_value}
    method: DELETE
    data_selector: null
    params: {}
- name: identify_person
  endpoint:
    path: /ver2/{site_id}/subscribers/identify
    method: POST
- name: authorization
  endpoint:
    path: /oauth/ro
    method: POST
    data_selector: id_token
- name: track_event
  endpoint:
    path: /ver2/{site_id}/activities
    method: POST
    data_selector: response
    params: {}
- name: recommendations
  endpoint:
    path: /v:version/{site_id}/{identifier_type}/{identifier}
    method: GET
    data_selector: results
    params:
      compact: 'true'
      test: 'true'
      filter: pubDate:AFTER:-P7D
      exclude: article|abcd
- name: Delete Identifiers
  endpoint:
    path: /{site_id}/person_operation_requests
    method: POST
- name: delete_contact
  endpoint:
    path: /ver2/{site_id}/subscribers/{unique_client_id}:{id}/contacts/{contact_value}
    method: DELETE
    data_selector: null
    params: {}
- name: recommendations
  endpoint:
    path: /v:version/{site_id}/{identifier_type}/{identifier}
    method: POST
    data_selector: data
    params:
      compact: 'false'
      test: 'false'
- name: identify_person
  endpoint:
    path: /v1/identify/{site_id}
    method: POST
- name: basic_recommendations
  endpoint:
    path: /v:version/{site_id}/{identifier_type}/{identifier}
    method: GET
    data_selector: results
    params:
      compact: 'true'
      test: 'true'
      filter: pubDate:AFTER:-P7D
      exclude: article|abcd
- name: alternative_item_recommendations
  endpoint:
    path: /alternative/{site_id}/{identifier_type}/{identifier}
    method: GET
    data_selector: recommendations
    params:
      test: 'true'
      seeds: product|331839917
      fields: brand
      count: '3'
- name: recommendations
  endpoint:
    path: /v:version/{site_id}/{identifier_type}/{identifier}
    method: POST
- name: website_in_page_campaign
  endpoint:
    path: /osrs/{site_id}/{identifier_type}/{identifier}
    method: GET
    data_selector: object
    params:
      pname: your_placement_name
      test: 'false'
- name: Get an Identifier for a Person
  endpoint:
    path: /v:version/site_id/identifier_type/identifier
    method: POST
    data_selector: Result
    params:
      compact: 'false'
      test: 'false'
- name: identify_person
  endpoint:
    path: /v1/identify/{site_id}
    method: POST
- name: get_dsp_campaign_reporting
  endpoint:
    path: /report
    method: POST
    data_selector: items
    params: {}
- name: alternative_item_recommendations
  endpoint:
    path: /v2/alternative/{site_id}/{identifier_type}/{identifier}
    method: GET
    data_selector: results
    params: {}
- name: website_in_page_campaign
  endpoint:
    path: /api/v:version/osrs/{site_id}/{identifier_type}/{identifier}
    method: GET
    data_selector: object
    params:
      pname: your_placement_name
      test: 'false'
- name: get_dsp_campaign_reporting
  endpoint:
    path: /report
    method: POST
- name: DSP campaign reporting
  endpoint:
    path: /report/schema
    method: GET
notes:
- To utilize the LIVE ID Graph, please first consult with your account representative,
  these functionalities must be enabled and configured before use.
- You can provide multiple unique_client_id name/value pairs in a single call, up
  to 25 total.
- Refresh tokens will be valid unless explicitly revoked.
- All date-time should be in ISO 8601 format in UTC
- Initialization can be called on main thread as heavy work is scheduled in background
  thread.
- The opt-out status is maintained locally on the device. This status is not communicated
  to the backend.
- Intialisation can be called on main thread as heavy work is scheduled in background
  thread
- The push notification service will not work without Google Play services, so the
  application must ensure that the device has Google Play services installed.
- For Android 13 and above, user permission is required to show notifications, and
  the application must handle this permission appropriately.
- In App message is enabled by default, but if the app needs to stop in app message
  the app can call ZetaClient.inApp.stop()
- The SDK does not persist the stop state, the application must manage this state.
- In-app messages are displayed within mobile app without requiring any additional
  permissions.
- Uses OAuth2 with refresh token — requires setup of connected app in api
- User permission is required to show notifications for Android 13 and above.
- The SDK uses a polling mechanism to fetch in-app messages.
- For processing push notifications, we shall need to add below dependencies in React
  Native iOS directory.app/ios
- The push notification service will not work without Google Play services.
- Uses OAuth2 with header authorization
- Ensure your Android project has Google Play Services and Firebase Messaging set
  up if using push notifications.
- Refresh tokens will be valid unless explicitly revoked, Zeta recommends that refresh
  tokens are generated sparingly and any unneeded tokens are immediately revoked.
- Events are non-blocking JavaScript calls.
- Updates properties on the existing user
- User Updates are blocking JavaScript calls.
- Events are non-blocking JavaScript calls
- Checks if a user is a member of a segment in the system.
- There may be up to a 5 minute delay in the deletion and up to a 20-30 minute delay
  for the deletion to be reflected in the UI of the profile itself.
- Further propagation for deletion of events may take up to 72 hours.
- There may be up to a 5 minute delay in the deletion and up to a 20-30 minute delay
  for the deletion to be reflected in the UI of the profile itself. Further propagation
  for deletion of events may take up to 72 hours.
- The default rate limiting for this endpoint is 10k/min with a 2min cooldown, note
  that this limit is shared across all accounts within the same parent/child structure.
- The default rate limiting for this endpoint is 10k/min with a 2min cooldown.
- There may be up to a 5 minute delay in the deletion and up to a 15-20 minute delay
  for the deletion to be reflected in the UI.
- The default rate limiting for this endpoint is 50k/min with a 2min cooldown.
- Identify_person should only be set to true when doing a profile update.
- The default rate limiting for this endpoint is 50k/min with a 2min cooldown, note
  that this limit is shared across all accounts within the same parent/child structure.
- The endpoint can be used to both update a user and create an event.
- This endpoint can be used to create an event for a new profile and associate contacts.
- Authorization requires Basic authentication with base64 encoding
- Authorization requires Basic authentication with base64 encoded credentials
- Email content is updated via the Update Campaign Content API.
- The ID of the campaign is required as a path parameter.
- Authorization must be set to Basic.
- The URL for this request expired after 30 days.
- Asset files are publicly accessible. No authentication is required to view or download
  an asset file.
- Returns the HTML content for an existing multi-version campaign by its name.
- The name of the snippet must be unique.
- Updates HTML content for an existing snippet
- The body of the Snippet to be updated, note that this is a full replace
- The name of the template must be unique.
- Authorization is Basic and requires base64 encoding of credentials.
- Updates HTML content for an existing template, not compatible with visual templates
- Updates HTML content for an existing template by name, not compatible with visual
  templates
- Requires ZMP Site ID and resource ID to update a resource
- Bulk create/update people in your account, this API allows up to 100 profiles to
  be updated in one call
- IDs can only be used to associate an event to an existing profile
- If using an additional identifier, the given profile should already exist, else
  the call will fail
- Delete a contact from an existing profile using a, so long as contact_value and
  uid are not the same value
- Create a person in your account or update it if it already exists
- The id_token returned will be valid for 10 hours after issue.
- When you're ready to deploy this endpoint, remove 'test=true' from the URL. Otherwise,
  user metrics will not be recorded.
- Remove 'test=true' from the URL when ready to deploy this endpoint.
- As of September 20th, 2022, Zeta DSP API calls are limited to 8,000 calls per day.
- If you exceed a quota, you’ll generally receive a 402 or 403 error HTTP status code
  response.
- At least one of primary.bsin, primary.email, or primary.user_id must be present
  in the request body.
- Endpoint for getting schema for DSP campaign reporting
errors:
- 'REQUEST_LIMIT_EXCEEDED: Throttle API calls or reduce frequency'
- '401 Unauthorized: Recheck OAuth scopes or token expiration'
- If any property value is not serializable to JSON, the entire event data will be
  silently discarded.
- '400 Bad Request: Check the event properties and format.'
- '401 Unauthorized: Recheck OAuth token.'
- '500 Internal Server Error: Try again later.'
- 'QUERY_TIMEOUT: Break down filters or add selectivity'
- '400: Bad Request'
- '400: Result'
- '404: Not Found'
- '429: Rate limit exceeded'
- '400: contact_value and uid cannot be the same value'
- '400 Bad Request: Invalid request format.'
- '401 Unauthorized: Recheck authorization credentials'
- '400: Invalid request parameters'
- '400: Invalid request'
- 400 Bad Request
- '400 Bad Request: Check request parameters.'
- '400 Bad Request: Check required parameters'
- '400 Bad Request: Check the request parameters.'
- '404: The requested URL was not found on the server.'
- '500: We had a reactor leak here now. Give us a few minutes to lock it down. Large
  leak, very dangerous.'
- '401 Unauthorized: Recheck username and password'
- '400: Bad Request - Check parameters'
- '402: Quota exceeded'
- '403: Forbidden access'
- '500: Internal Server Error'
- '402: Exceeded quota limits'
- '403: Access denied'
auth_info:
  mentioned_objects:
  - Authorization API
  - JWT
  - JSON Web Token
client:
  base_url: https://api.zetaglobal.net/ver2
  auth:
    type: Basic
    location: header
    header_name: Authorization
  headers:
    Content-Type: application/json
    Accept: application/json
source_metadata: null
