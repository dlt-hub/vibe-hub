resources:
- name: transactions
  endpoint:
    path: /api/v1/transactions
    method: GET
    data_selector: data
    params: {}
- name: batches
  endpoint:
    path: /api/v1/batches
    method: GET
    data_selector: data
    params: {}
- name: transfers
  endpoint:
    path: /api/v1/transfers
    method: GET
    data_selector: data
    params: {}
- name: transactions
  endpoint:
    path: /Query/transactions
    method: GET
    data_selector: records
- name: invoice
  endpoint:
    path: /Invoice
    method: GET
    data_selector: records
- name: payout
  endpoint:
    path: /Payout/query
    method: GET
    data_selector: records
- name: transaction_details
  endpoint:
    path: /MoneyIn/details/:transId
    method: GET
    data_selector: records
- name: boarding_status
  endpoint:
    path: /Boarding/read/:appid
    method: GET
    data_selector: records
- name: refund
  endpoint:
    path: /refunds
    method: POST
    data_selector: responseData
    params: {}
- name: pass_through_fee
  endpoint:
    path: /api/v1/pass-through-fees
    method: POST
    data_selector: data
    params: {}
- name: getpaid
  endpoint:
    path: /api/MoneyIn/getpaid
    method: POST
- name: tokenstorage
  endpoint:
    path: /tokenstorage/add
    method: POST
- name: authorize
  endpoint:
    path: /authorize
    method: POST
- name: payout
  endpoint:
    path: /api-reference/query/get-list-of-payouts-for-entrypoint
    method: GET
    data_selector: paymentDetails
    params: {}
- name: pay_in_support
  endpoint:
    path: /learning/guides/supported-regions#pay-in-support
    method: GET
    data_selector: Supported Payment Methods
    params: {}
- name: pay_out_support
  endpoint:
    path: /learning/guides/supported-regions#pay-out-support
    method: GET
    data_selector: Supported Pay Out Methods
    params: {}
- name: business_information
  endpoint:
    path: /business-information
    method: GET
    data_selector: records
- name: beneficial_ownership
  endpoint:
    path: /beneficial-ownership
    method: GET
    data_selector: records
- name: boarding_application
  endpoint:
    path: /boarding/applications
    method: POST
    data_selector: applicationData
    params: {}
- name: ReceivedChargeBack
  endpoint:
    path: /api-reference/chargebacks/add-response-to-chargeback-or-return
    method: POST
    data_selector: response
    params: {}
- name: ReceivedAchReturn
  endpoint:
    path: /api-reference/chargebacks/add-response-to-chargeback-or-return
    method: POST
    data_selector: response
    params: {}
- name: simulate_successful_transaction
  endpoint:
    path: /developers/references/test-accounts#simulate-a-successful-transaction
    method: GET
- name: simulate_decline
  endpoint:
    path: /developers/references/test-accounts#simulate-a-decline
    method: GET
- name: money_in_transaction_status
  endpoint:
    path: /developers/references/money-in-statuses#money-in-transaction-status
    method: GET
    data_selector: TransStatus
- name: payment_funding_status
  endpoint:
    path: /developers/references/money-in-statuses#payment-funding-status
    method: GET
    data_selector: SettlementStatus
- name: batch_status
  endpoint:
    path: /developers/references/money-in-statuses#batch-status
    method: GET
    data_selector: BatchStatus
- name: transfer_status
  endpoint:
    path: /developers/references/money-in-statuses#transfer-status
    method: GET
    data_selector: TransferStatus
- name: invoice_status
  endpoint:
    path: /developers/references/money-in-statuses#invoice-status
    method: GET
    data_selector: invoiceStatus
- name: subscription_status
  endpoint:
    path: /developers/references/money-in-statuses#subscription-status
    method: GET
    data_selector: SubStatus
- name: payout_transaction_statuses
  endpoint:
    path: /developers/references/money-out-statuses#payout-transaction-statuses
    method: GET
    data_selector: Records
    params: {}
- name: batch_statuses
  endpoint:
    path: /developers/references/money-out-statuses#batch-statuses
    method: GET
    data_selector: Records
    params: {}
- name: bill_statuses
  endpoint:
    path: /developers/references/money-out-statuses#bill-statuses
    method: GET
    data_selector: Records
    params: {}
- name: money_in_transaction_status
  endpoint:
    path: /api/v1/money_in/status
    method: GET
    data_selector: TransStatus
    params: {}
- name: payment_funding_status
  endpoint:
    path: /api/v1/payment_funding/status
    method: GET
    data_selector: SettlementStatus
    params: {}
- name: batch_status
  endpoint:
    path: /api/v1/batch/status
    method: GET
    data_selector: BatchStatus
    params: {}
- name: transfer_status
  endpoint:
    path: /api/v1/transfer/status
    method: GET
    data_selector: TransferStatus
    params: {}
- name: invoice_status
  endpoint:
    path: /api/v1/invoice/status
    method: GET
    data_selector: invoiceStatus
    params: {}
- name: subscription_status
  endpoint:
    path: /api/v1/subscription/status
    method: GET
    data_selector: SubStatus
    params: {}
- name: payout_transaction_statuses
  endpoint:
    path: /developers/references/money-out-statuses#payout-transaction-statuses
    method: GET
    data_selector: records
- name: batch_statuses
  endpoint:
    path: /developers/references/money-out-statuses#batch-statuses
    method: GET
    data_selector: records
- name: bill_statuses
  endpoint:
    path: /developers/references/money-out-statuses#bill-statuses
    method: GET
    data_selector: records
- name: EmbeddedMethod
  endpoint:
    path: /embedded-method
    method: GET
- name: PayMethod
  endpoint:
    path: /pay-method
    method: GET
- name: VirtualTerminal
  endpoint:
    path: /virtual-terminal
    method: GET
- name: ExpressCheckout
  endpoint:
    path: /express-checkout
    method: GET
- name: EmbeddedMethod
  endpoint:
    path: /developers/developer-guides/embedded-components-embeddedmethodui
    method: GET
- name: PayMethod
  endpoint:
    path: /developers/developer-guides/embedded-components-paymethodui
    method: GET
- name: VirtualTerminal
  endpoint:
    path: /developers/developer-guides/embedded-components-virtualterminalui
    method: GET
- name: ExpressCheckout
  endpoint:
    path: /developers/developer-guides/embedded-components-express-checkout
    method: GET
- name: EmbeddedMethod UI
  endpoint:
    path: /developers/developer-guides/embedded-components-embeddedmethodui
    method: GET
- name: ExpressCheckout UI
  endpoint:
    path: /developers/developer-guides/embedded-components-express-checkout
    method: GET
- name: VirtualTerminal UI
  endpoint:
    path: /developers/developer-guides/embedded-components-virtualterminalui
    method: GET
- name: PayMethod UI
  endpoint:
    path: /developers/developer-guides/embedded-components-paymethodui
    method: GET
- name: transfer
  endpoint:
    path: /Query/transfers
    method: GET
    data_selector: records
- name: chargeback
  endpoint:
    path: /ChargeBacks/read/{Id}
    method: GET
    data_selector: records
- name: boarding
  endpoint:
    path: /Query/boarding/{orgId}
    method: GET
    data_selector: records
- name: notificationlogs
  endpoint:
    path: /v2/notificationlogs
    method: POST
    data_selector: records
- name: boarding
  endpoint:
    path: /Query/boarding/{orgId}
    method: GET
    data_selector: records
    params: {}
- name: transfers
  endpoint:
    path: /Query/transfers
    method: GET
    data_selector: records
    params: {}
- name: notification_logs
  endpoint:
    path: /v2/notificationlogs
    method: POST
    data_selector: records
    params: {}
- name: bills
  endpoint:
    path: /Query/bills/{entry}
    method: GET
- name: boarding_applications
  endpoint:
    path: /Query/boarding/applications/{orgId}
    method: GET
- name: invoices
  endpoint:
    path: /Query/invoices/{entry}
    method: GET
- name: batch_details
  endpoint:
    path: /Query/batchDetails/{entry}
    method: GET
- name: batches
  endpoint:
    path: /Query/batches/{entry}
    method: GET
- name: outbound_batches
  endpoint:
    path: /Query/batchesOut/{entry}
    method: GET
- name: chargebacks
  endpoint:
    path: /Query/chargebacks/{entry}
    method: GET
- name: customers
  endpoint:
    path: /Query/customers/{entry}
    method: GET
- name: organizations
  endpoint:
    path: /Query/organizations
    method: GET
- name: payouts
  endpoint:
    path: /Query/payouts/{entry}
    method: GET
- name: paypoints
  endpoint:
    path: /Query/paypoints/{orgId}
    method: GET
- name: settlements
  endpoint:
    path: /Query/settlements/{entry}
    method: GET
- name: subscriptions
  endpoint:
    path: /Query/subscriptions/{entry}
    method: GET
- name: transactions
  endpoint:
    path: /Query/transactions/{entry}
    method: GET
- name: transfers
  endpoint:
    path: /Query/transfers/{entry}
    method: GET
- name: transfer_details
  endpoint:
    path: /Query/transferDetails/{entry}
    method: GET
- name: vendors
  endpoint:
    path: /Query/vendors/{entry}
    method: GET
- name: virtual_cards
  endpoint:
    path: /Query/vcards/{entry}
    method: GET
- name: transactions
  endpoint:
    path: /ui/user-guides/pay-in-transaction-basics
    method: GET
    data_selector: records
- name: customers
  endpoint:
    path: /ui/references/money-in-schemas
    method: GET
    data_selector: records
- name: bills
  endpoint:
    path: /Query/bills/{entry}
    method: GET
    data_selector: records
    params: {}
- name: boarding_applications
  endpoint:
    path: /Query/boarding/applications/{orgId}
    method: GET
    data_selector: records
    params: {}
- name: invoices
  endpoint:
    path: /Query/invoices/{entry}
    method: GET
    data_selector: records
    params: {}
- name: batch_details
  endpoint:
    path: /Query/batchDetails/{entry}
    method: GET
    data_selector: records
    params: {}
- name: batches
  endpoint:
    path: /Query/batches/{entry}
    method: GET
    data_selector: records
    params: {}
- name: outbound_batches
  endpoint:
    path: /Query/batchesOut/{entry}
    method: GET
    data_selector: records
    params: {}
- name: chargebacks
  endpoint:
    path: /Query/chargebacks/{entry}
    method: GET
    data_selector: records
    params: {}
- name: customers
  endpoint:
    path: /Query/customers/{entry}
    method: GET
    data_selector: records
    params: {}
- name: organizations
  endpoint:
    path: /Query/organizations
    method: GET
    data_selector: records
    params: {}
- name: payouts
  endpoint:
    path: /Query/payouts/{entry}
    method: GET
    data_selector: records
    params: {}
- name: paypoints
  endpoint:
    path: /Query/paypoints/{orgId}
    method: GET
    data_selector: records
    params: {}
- name: settlements
  endpoint:
    path: /Query/settlements/{entry}
    method: GET
    data_selector: records
    params: {}
- name: subscriptions
  endpoint:
    path: /Query/subscriptions/{entry}
    method: GET
    data_selector: records
    params: {}
- name: transactions
  endpoint:
    path: /Query/transactions/{entry}
    method: GET
    data_selector: records
    params: {}
- name: transfers
  endpoint:
    path: /Query/transfers/{entry}
    method: GET
    data_selector: records
    params: {}
- name: transfer_details
  endpoint:
    path: /Query/transferDetails/{entry}
    method: GET
    data_selector: records
    params: {}
- name: vendors
  endpoint:
    path: /Query/vendors/{entry}
    method: GET
    data_selector: records
    params: {}
- name: virtual_cards
  endpoint:
    path: /Query/vcards/{entry}
    method: GET
    data_selector: records
    params: {}
- name: notifications
  endpoint:
    path: /ui/user-guides/pay-ops-notifications
    method: GET
    data_selector: notifications
    params: {}
- name: reports
  endpoint:
    path: /ui/user-guides/pay-ops-notifications#manage-summary-reports
    method: GET
    data_selector: reports
    params: {}
- name: ACH Industry Concept
  endpoint:
    path: /ui/references/payment-glossary
    method: GET
    data_selector: records
- name: Acquirer
  endpoint:
    path: /ui/references/payment-glossary
    method: GET
    data_selector: records
- name: notifications
  endpoint:
    path: /ui/user-guides/pay-ops-notifications
    method: GET
- name: reports
  endpoint:
    path: /ui/user-guides/pay-ops-notifications#manage-summary-reports
    method: GET
- name: simulate_successful_transaction
  endpoint:
    path: /ui/references/test-accounts#simulate-a-successful-transaction
    method: GET
- name: simulate_decline
  endpoint:
    path: /ui/references/test-accounts#simulate-a-decline
    method: GET
- name: invalid_cvv_declines
  endpoint:
    path: /ui/references/test-accounts#invalid-cvv-declines
    method: GET
- name: simulate_successful_transaction
  endpoint:
    path: /ui/references/test-accounts#simulate-a-successful-transaction
    method: GET
- name: simulate_decline
  endpoint:
    path: /ui/references/test-accounts#simulate-a-decline
    method: GET
- name: addMethod
  endpoint:
    path: /api-reference/tokenstorage/save-a-payment-method-tokenize
    method: POST
- name: getpaid
  endpoint:
    path: /MoneyIn/getpaid
    method: POST
- name: voidTransaction
  endpoint:
    path: /MoneyIn/void/{transID}
    method: GET
- name: refundTransaction
  endpoint:
    path: /MoneyIn/refund
    method: GET
- name: reverseTransaction
  endpoint:
    path: /MoneyIn/reverse
    method: GET
- name: addMethod
  endpoint:
    path: /api-reference/tokenstorage/save-a-payment-method-tokenize
    method: POST
- name: getpaid
  endpoint:
    path: /MoneyIn/getpaid
    method: POST
- name: voidTransaction
  endpoint:
    path: /MoneyIn/void/{transID}
    method: GET
- name: refundTransaction
  endpoint:
    path: /MoneyIn/refund
    method: GET
- name: reverseTransaction
  endpoint:
    path: /MoneyIn/reverse
    method: GET
- name: General codes
  endpoint:
    path: /developers/api-reference/api-responses
    method: GET
    data_selector: codes
    params: {}
- name: 3000 codes
  endpoint:
    path: /developers/api-reference/api-responses#3000-codes
    method: GET
    data_selector: codes
    params: {}
- name: 3200 codes
  endpoint:
    path: /developers/api-reference/api-responses#3200-codes
    method: GET
    data_selector: codes
    params: {}
- name: 3400 codes
  endpoint:
    path: /developers/api-reference/api-responses#3400-codes
    method: GET
    data_selector: codes
    params: {}
- name: 3500 codes
  endpoint:
    path: /developers/api-reference/api-responses#3500-codes
    method: GET
    data_selector: codes
    params: {}
- name: 3600 codes
  endpoint:
    path: /developers/api-reference/api-responses#3600-codes
    method: GET
    data_selector: codes
    params: {}
- name: 3700 codes
  endpoint:
    path: /developers/api-reference/api-responses#3700-codes
    method: GET
    data_selector: codes
    params: {}
- name: 3900 codes
  endpoint:
    path: /developers/api-reference/api-responses#3900-codes
    method: GET
    data_selector: codes
    params: {}
- name: ACH_return_codes
  endpoint:
    path: /developers/references/ACH_return_codes
    method: GET
    data_selector: codes
    params: {}
- name: pass_through_fees
  endpoint:
    path: /api/v1/pass-through-fees
    method: POST
    data_selector: data
    params: {}
- name: transactions
  endpoint:
    path: /api/v1/transactions
    method: POST
    data_selector: data
    params: {}
- name: customers
  endpoint:
    path: /api/v1/customers
    method: GET
    data_selector: data
    params: {}
- name: customer
  endpoint:
    path: /api/Customer/single/{entry}
    method: POST
    data_selector: responseData
    params: {}
- name: import_customers
  endpoint:
    path: /api/Import/customersForm/{entrypoint}
    method: POST
    data_selector: responseData
    params: {}
- name: split_funding
  endpoint:
    path: /developers/developer-guides/money-in-split-funding
    method: GET
- name: route_funds
  endpoint:
    path: /developers/developer-guides/pay-in-multiple-bank-accounts
    method: GET
- name: pass_through_fees
  endpoint:
    path: /api/v1/passthrough-fees
    method: POST
    data_selector: data
- name: vendor
  endpoint:
    path: /api/Vendor/single/:entry
    method: POST
    data_selector: responseData
- name: import_vendors
  endpoint:
    path: /api/Import/vendorsForm/:entry
    method: POST
    data_selector: responseData
- name: bill
  endpoint:
    path: /api/Bill/single/:entry
    method: POST
- name: import_bills
  endpoint:
    path: /api/Import/billsForm/:entry
    method: POST
- name: boarding_application
  endpoint:
    path: /api/Boarding/read/{appId}
    method: GET
    data_selector: boardingStatus
    params: {}
- name: paymethod_ui
  endpoint:
    path: /component.js
    method: GET
- name: paymentMethod
  endpoint:
    path: /paymentMethod
    method: POST
    data_selector: responseData
    params: {}
- name: customerData
  endpoint:
    path: /customerData
    method: POST
    data_selector: responseData
    params: {}
- name: customer
  endpoint:
    path: /api/Customer/single/{entry}
    method: POST
    params:
      replaceExisting: '0'
      forceCustomerCreation: 'false'
- name: import_customers
  endpoint:
    path: /api/Import/customersForm/{entry}
    method: POST
    params:
      replaceExisting: '0'
- name: EmbeddedMethod UI
  endpoint:
    path: /developers/developer-guides/embedded-components-embeddedmethodui
    method: GET
- name: create_vendor
  endpoint:
    path: /api/Vendor/single/:entry
    method: POST
- name: import_vendors
  endpoint:
    path: /api/Import/vendorsForm/:entry
    method: POST
- name: bill
  endpoint:
    path: /api/Bill/single/:entry
    method: POST
- name: import_bills
  endpoint:
    path: /api/Import/billsForm/:entry
    method: POST
- name: subscriptions
  endpoint:
    path: /api/Subscription
    method: POST
    data_selector: ''
    params: {}
- name: notifications
  endpoint:
    path: /api/Notification
    method: POST
    data_selector: ''
    params: {}
- name: DeclinedPayment
  endpoint:
    path: /api/Notification
    method: POST
- name: Subscription
  endpoint:
    path: /api/Subscription/{subId}
    method: PUT
- name: transactions
  endpoint:
    path: /api/Query/transactions/{entry}
    method: GET
- name: boarding_application
  endpoint:
    path: /api/Boarding/read/{appId}
    method: GET
    data_selector: boardingStatus
- name: save_payment_method
  endpoint:
    path: /api/TokenStorage/add
    method: POST
    data_selector: responseData
    params: {}
- name: authenticate_user
  endpoint:
    path: /api/User/auth/:provider
    method: POST
- name: paymethod
  endpoint:
    path: /component.js
    method: GET
    data_selector: response
- name: transactions
  endpoint:
    path: /api/Query/transactions/:entry
    method: GET
    data_selector: Records
    params:
      limitRecord: '20'
      fromRecord: '0'
- name: payment_card
  endpoint:
    path: /payment/card
    method: POST
    data_selector: response
- name: bank_debit
  endpoint:
    path: /payment/ach
    method: POST
    data_selector: response
- name: subscriptions
  endpoint:
    path: /api/Subscription
    method: POST
    data_selector: subscription
    params: {}
- name: notification
  endpoint:
    path: /api/Notification
    method: POST
    data_selector: notification
    params: {}
- name: DeclinedPayment
  endpoint:
    path: /api/Notification
    method: POST
- name: Subscription
  endpoint:
    path: /api/Subscription/{subId}
    method: PUT
- name: transactions
  endpoint:
    path: /api/Query/transactions/{entry}
    method: GET
- name: save_payment_method
  endpoint:
    path: /api/TokenStorage/add
    method: POST
- name: authenticate_user
  endpoint:
    path: /api/User/auth/:provider
    method: POST
- name: transactions
  endpoint:
    path: /api/Query/transactions/:entry
    method: GET
    data_selector: Records
    params:
      fromRecord: 0
      limitRecord: 20
notes:
- Must make all API requests over HTTPS.
- API tokens carry privileges, so be sure to keep them secure.
- Batch cutoff is 5 PM Eastern time.
- Creator is currently in beta release. Only reports are embeddable at this time.
- To opt in to the Enhanced Refund Flow, contact Payabli. This feature isn’t enabled
  by default.
- Refunds can only be processed on transactions after their batch has processed.
- Fees are non-refundable. To prevent disputes, let your customers know this before
  they pay.
- Sending the correct CIT and MIT indicators helps prevent fraud and maintain customer
  trust.
- Payabli defaults to initiator = 'merchant' and storedMethodUsageType = 'unscheduled'
  if values are not sent.
- Level II and Level III transactions require more detail than Level I transactions.
- Best practice to send as much of the Level II and Level III data you have with the
  transaction.
- ACH transactions must be authorized by the person or company being debited, either
  as part of the transaction or in advance of the transaction.
- ACH returns can happen after the fund day.
- The Payabli team must configure your custom batch times, it’s not a self-service
  process.
- Positive Pay is an automated fraud prevention tool that matches the details of issued
  checks with those presented for payment.
- Partners must submit an application with comprehensive documentation for underwriting.
- Payments to vendors are initiated only after the funds are verified and settled.
- Ensure sufficient funds and confirm when Payabli can reattempt the debit
- Provide updated banking details immediately if account is closed
- Stay up-to-date on paypoint boarding status by subscribing to the boarding webhook
  notifications.
- The more accurate and complete the information is, the faster the underwriting process
  goes.
- To configure fees for a merchant account, contact the Payabli team.
- The chargeback process can differ between payment processors, but it traditionally
  takes between 60 and 90 days to resolve a chargeback fully.
- Suspicious payment processing activities can indicate potential fraud, money laundering,
  regulatory violations, or high-risk behavior.
- Identifying and mitigating these risks is critical for compliance with Anti-Money
  Laundering (AML) laws, Bank Secrecy Act (BSA) requirements, and general payment
  processing security.
- Merchants must initiate the migration process themselves by reaching out to Stripe.
- Payabli isn’t responsible for the export speed of other payment processors.
- The Payabli team helps with data migration, it’s not a self-service process.
- Delays in receiving data from the outgoing provider, time spent updating data formats,
  and more can impact migration timelines.
- Merchant must send a formal request directly to migrations@payabli.com for data
  transfer.
- The SLA for this transfer is 5 to 7 business days.
- Using a test card repeatedly in a short period can sometimes cause it to be blocked.
- Payabli recommends adhering to the fraud control limits.
- If your batches seem stuck in the Pending or Open status, this could mean there’s
  an issue with the funding configuration setup or other funding errors.
- If batches seem stuck in Pending or Open status, verify funding configuration.
- Contact Support to verify funding configuration if issues persist.
- Payabli’s embedded components authenticate with the token field passed in the embedded
  component’s configuration.
- The API token must be a public token.
- Uses public token for authentication
- API token must be set up for the Creator component
- Beginning October 22, 2023 embedded components no longer supports versions older
  than 1.9.0.
- You must add the data-test configuration variable to your script tag when using
  the sandbox library.
- During your integration kickoff, you receive access to a sandbox environment.
- You use API tokens to authenticate with the API.
- Embedded components authenticate with the token field passed in the embedded component’s
  configuration.
- Webhook notification retries updated to resend failed notifications up to 2 times
  in 5-minute intervals.
- New export capabilities introduced across Query endpoints.
- Uses API tokens for authentication.
- Sandbox environment available for testing.
- Webhook notifications can be retried up to 2 times in 5-minute intervals.
- The deprecated Export endpoints will continue to work but are no longer being enhanced
  or maintained.
- All Query endpoints listed above support both 'csv' and 'xlsx' export formats.
- Must make all API requests over HTTPS. API requests without authentication will
  fail.
- The deprecated Export endpoints will continue to work but are no longer being enhanced
  or maintained
- All Query endpoints listed above support both csv and xlsx export formats
- You must make all API requests over HTTPS. API requests without authentication will
  fail.
- Using a test card repeatedly in a short period can sometimes cause it to be blocked.
  Best practice is to adhere to the fraud control limits.
- AVS codes indicate the degree of match between the address provided by the customer
  and the address on file with the card issuer.
- CVV codes are a security feature used in credit and debit card transactions.
- ACH return codes can help you understand what went wrong with an ACH payment and
  how to fix it.
- When using a tokenized card number, if the original card associated with the token
  has expired, you need a new card number from the customer to create a new token.
- The PAX terminal’s contactless payment feature requires specific card placement
  for successful transactions.
- Temporary tokens expire in 12 hours.
- Fees are non-refundable. To prevent disputes, Payabli recommends letting your customers
  know this before they pay.
- Tokenization is the process of exchanging sensitive data for nonsensitive data called
  tokens.
- Requires setup of a connected app in Payabli
- The max field length for custom identifiers is 100 characters.
- Tokenization types for payment methods have nothing to do with API tokens used for
  authentication.
- Applications don’t automatically move from one status to another like they do in
  the production environment.
- This component is supported in the Playground.
- Use the interactive demo to see how the component works.
- The token value must be a public API token.
- You need a Payabli sandbox account to do any testing.
- When temporaryToken is true, the token created for the payment is temporary.
- If tokenization fails, Payabli will attempt an authorization transaction.
- Identifiers are required to create customer records.
- Custom identifiers can be configured in PartnerHub.
- The embedded component returns a response object to the callback functions defined
  in the configuration.
- The token must be a public API token.
- Payabli supports payouts to US and Canadian vendors only. International vendors
  aren’t supported.
- Uses OAuth2 with refresh token — requires setup of connected app in api
- Some objects like Contact may return nulls in deeply nested fields
- Uses methodEmbedded for payment processing
- Defaults to false for hideComponent
- Defaults to true for clearFormAfterSubmit
- Defaults to true for temporaryToken
- Defaults to true for forceCustomerCreation
- Defaults to false for achValidation
- Defaults to false for fallbackAuth
- Payabli doesn’t retry failed subscription payments automatically.
- Applications do not automatically move between statuses in the sandbox environment.
- For PCI compliance, consider using Payabli’s embedded components instead of the
  direct-access API.
- Use the PayMethod UI component to open a modal that captures a customer payment
  method for tokenization.
- The captured payment method is returned as an ID.
- Uses a public API token for authentication
- The component connects to your HTML element by matching the id attribute value
- When `temporaryToken` is `true`, the token created for the payment is temporary.
- Uses OAuth2 with refresh token — requires setup of connected app in Payabli
- Use the payabliExec method to perform payment processing logic.
- The final step creates a working payment form that can process real transactions
  or save payment methods securely.
- Replace with your own authentication parameters
- Because improperly handling customer card data can result in fines and impact your
  ability to process transactions, you must understand and fulfill PCI security requirements.
errors:
- '504 Gateway Timeout: Request takes longer than the timeout.'
- '409 Conflict: Duplicated idempotencyKey.'
- '401 Unauthorized: Recheck OAuth scopes or token expiration'
- Ensure to handle the case where refunds are declined due to original transaction
  state.
- '5005: The fee sent is less than the amount configured at the paypoint level.'
- '5006: The pass-through fee is rejected.'
- 'Invalid initiator: Ensure the initiator is either ''payor'' or ''merchant''.'
- 'Transaction declined: Incorrect indicators may lead to declined transactions.'
- 'Insufficient funds: Transaction request failed due to lack of available funds.'
- 'Invalid banking information: Transaction request failed due to incorrect account
  details.'
- 'R01: Insufficient Funds'
- 'R02: Account Closed'
- 'R03: Cannot Locate Account'
- 'R05: Unauthorized Corporate Debit'
- 'R07: Authorization Revoked'
- 'R08: Payment Stopped'
- 'R24: Duplicate Entry'
- 'R29: Debit Block'
- 'R38: Source Document Stop Paid'
- 'R52: Stop Payment'
- 'R61: Misrouted Return'
- 'R67: Duplicate Return'
- 'REQUEST_LIMIT_EXCEEDED: Throttle API calls or reduce frequency'
- 'QUERY_TIMEOUT: Break down filters or add selectivity'
- 'Merchant avoiding compliance requests: A merchant might avoid providing legal or
  financial documentation when requested.'
- 'Ties to sanctioned individuals or countries: This can include transactions involving
  flagged entities or high-risk jurisdictions.'
- Declined
- '201: Do not honor. The customer’s issuing bank is unwilling to accept the transaction..
  DECLINED'
- '850: AVS or CVV failed.. DECLINED'
- 'Pending or Open status: This could indicate an issue with the funding configuration
  setup.'
- 'Common causes of Pending status: Incomplete funding configuration or incorrect
  bank details.'
- '401 Unauthorized: Recheck API token configuration'
- Validation errors will trigger functionCallBackError.
- For declined transactions, check responseText for 'Declined'.
- 'functionCallBackError: Triggered for validation errors'
- '5004: Invalid Service Fee value'
- 'REQUEST_LIMIT_EXCEEDED: Throttle API calls or reduce frequency.'
- '401 Unauthorized: Recheck API token or expiration.'
- '409 Conflict: Duplicated idempotencyKey'
- 'Declined: The customer’s issuing bank is unwilling to accept the transaction.'
- 'AVS or CVV failed: CVV2/CVC2 no match.'
- '4001: Invalid Xchange AccountId: Provide a valid Xchange AccountId.'
- '4002: Invalid User account: Either the user doesn’t exist or there is a problem
  with their token.'
- '4003: Model cannot be null: The entry model is null. Review and try again.'
- '4004: The Server field cannot be null or empty: Review the Server field and try
  again.'
- '4005: The UserId field cannot be null or empty: Review the UserId field and try
  again.'
- '4006: The RemotePathIn field cannot be null or empty: Review RemotePathIn fields
  and try again.'
- '4007: The RemotePathOut field cannot be null or empty: Review the RemotePathOut
  field and try again.'
- '4008: The Schedule field cannot be null or empty: Review the Schedule field and
  try again.'
- '4009: The LastCheck field cannot be less than the actual date: Review the LastCheck
  field and try again.'
- '4010: The EntryName field cannot be null or empty: Review the EntryName field and
  try again.'
- '4011: The OrgType field cannot be null or empty: Review the OrgType field and try
  again.'
- '4012: The Orgid field cannot be null or 0: Review the Orgid field and try again.'
- '4013: The Mode field cannot be null: Review the Userid field and try again.'
- '4014: The Channel field cannot be null or 0: Review the Channel field and try again.'
- '4015: The content of the PKey field isn’t Base64 encoded: Review the PKey field
  and try again.'
- '4016: The Organization/Paypoint has no associated token: Review the request data
  and try again.'
- '4017: The data wasn’t saved in the Payabli database: An error occurred while saving
  the data to the database. Contact the support team.'
- '4018: Invalid Xchange Account: Provide a valid Xchange account and try again.'
- '4019: The user isn’t related to the organization: The user isn’t related to the
  organization.'
- '4020: The configuration isn’t related to the xchange account organization: The
  configuration isn’t related to the Xchange account organization.'
- '4021: The Type field cannot be null or different from IP, Card or PayorId: Review
  the Type field and try again.'
- '4022: At least one of these fields is required: Content, FraudHistoryId, or TransId:
  Review the request and try again.'
- '4023: The service cannot be deleted: Wait until all transactions are marked as
  settled, then delete the service.'
- '4024: The service cannot be updated: Wait until all transactions are marked as
  settled, then update the service.'
- '4025: Purposes cannot be null: Purposes can’t be null. Review and try again.'
- '4026: The keyword cannot be repeated: Keywords can’t be repeated. Review and try
  again.'
- '4027: Empty input file: The input file can’t be empty. Review and try again.'
- '4028: Empty file content: The file has no content. Review and try again.'
- '4029: The size of the PKey File is not allowed: The size of the PKey File is not
  allowed. Review and try again.'
- '4030: PKey File does not have the allowed format: PKey File does not have the allowed
  format. Review and try again.'
- '4031: The password and key file cannot be empty, at least one is required: The
  password and key file cannot be empty, at least one is required. Review and try
  again.'
- '5004: Invalid Service Fee value: Please make sure that the service fee value in
  the request is greater than or equal to zero.'
- '5005: Invalid Service Fee value: Review the service fee value provided in the request
  and try again.'
- '5006: Invalid Service Fee value: Review the service fee value provided in the request
  and try again.'
- '5009: Invalid stored method relationship: Review values to make sure the stored
  method belongs to the specified customer, and try again.'
- '5010: Invalid chargeback ID: Review the value of the chargeback identifier and
  try again.'
- '5011: Invalid chargeback status: Review the value of the chargeback status and
  try again.'
- '5012: Invalid ACH return ID: Verify the ACH return identifier and make sure that
  it’s correct.'
- '5013: Invalid ACH return status: Check the ACH return status and make sure that
  it’s valid for this transaction.'
- '5014: Invalid transaction method: Verify the transaction identifier and make sure
  that it corresponds to a valid ACH payment.'
- '5015: Invalid transaction ID: Verify the transaction identifier and make sure that
  it’s correct.'
- '5016: Invalid transaction ID: This transaction has already been returned.'
- '5017: Invalid transaction method: Verify the transaction identifier and make sure
  it corresponds to a valid card payment.'
- '6000: Opt-in process is already pending for this customer: The customer must complete
  the opt-in process.'
- '6001: SMS configuration is missing: Contact Payabli Support to enable this feature.'
- '6002: The request has failed because the user hasn’t consented to communications:
  The customer must complete the opt-in process.'
- '6003: Invalid customer ID: Provide a correct identifier value in the request.'
- '6004: Missing or invalid phone number: Verify that the customer’s phone number
  isn’t empty and has a valid format.'
- '6005: Invalid payment link type: Payment link must be for an invoice.'
- '6006: Missing or invalid phone number: Verify that the customer’s phone number
  isn’t empty and has a valid format.'
- '6007: Missing or invalid email address: Verify that the customer’s email isn’t
  empty and has a valid format.'
- '6008: Invalid additional email addresses: Verify that the additional email addresses
  aren’t empty and has a valid format.'
- '6009: Invalid channel: Verify that the communication channel is one of the valid
  options: sms or email.'
- '6010: Invalid invoice: Verify that the invoice exists and has a valid status.'
- '6101: Invalid domain ID: Verify that the domain ID is correct and try again.'
- '6103: Failed to cascade the domain: Try cascading the domain again later.'
- '6201: No card service found for this paypoint: Contact Payabli for help.'
- '6202: Cascading is not supported for this entity type.: Use a domain owned by an
  organization.'
- '6202: Card services are disabled for this paypoint: Contact Payabli for help.'
- '6203: No card gateway found for this paypoint: Contact Payabli for help.'
- '6204: Invalid card credentials for this paypoint: Contact Payabli for help.'
- '6205: Apple Pay configuration update in progress for this organization: Wait for
  the update to finish and try again.'
- '6206: Failed to cascade organization updates: Try again later.'
- '7001: Invalid transaction ID: Review the value of the transaction ID and try again.'
- '7002: Invalid transaction status: Verify the status of the transaction.'
- '7003: Invalid payment method: Change the payment method or remove the reference
  to a stored payment method in the request.'
- '7004: Invalid payment method: Try a different payment method.'
- '7005: Missing card number: Provide a valid card number in payment method object.'
- '7006: Missing payment method: Provide valid data in payment method object.'
- '7007: Invalid payment method: Provide valid data in payment method object.'
- '7008: Missing payment details: Provide a valid data in payment detail object.'
- '7009: Invalid currency code: Provide a valid ISO 4217 currency code.'
- '7010: Invalid card expiration date: Review the expiration date.'
- '7011: Invalid payment method: Review the payment method object for any missing
  data.'
- '7012: Invalid payment method: Review the payment method object for any missing
  data.'
- '7013: Invalid payment method: Review the payment method object for any missing
  data.'
- '7014: Invalid payment method: Review the payment method object for invalid data.'
- '7015: Invalid payment method: Review the payment method object and payment detail
  object for any missing data.'
- '7015: Invalid card number: Provide a valid card number in payment method object.'
- '7016: Invalid CVV number: Provide a valid CVV number in payment method object.'
- '7017: Invalid payment method: Review the payment method object for any missing
  data.'
- '7018: Invalid payment method: Review the payment method object for any missing
  data.'
- '7019: Invalid payment method: Provide the correct customerId linked to the stored
  payment method provided.'
- '7020: Error in customer data: Review customer object for missing or invalid fields.'
- '7021: Invalid invoice number: Review customer object and invoice data provided
  in request.'
- '7022: Invalid invoice action: Review the data provided in request and try again.'
- '7023: Invalid invoice action: Review the data provided in request and try again.'
- '7024: Invalid invoice action: Review the data provided in request and try again.'
- '7025: Invalid invoice action: Review the data provided in request and try again.'
- '7026: Invalid invoice number: Review vendor object and invoice data provided in
  request.'
- '7027: Invalid card expiration date: Review the expiration date.'
- '7028: Invalid card expiration date: Review the expiration date.'
- '7029: Invalid MCC value provided: Review the data provided in request and try again.'
- '7030: Invalid TCC value provided: Review the data provided in request and try again.'
- '7031: Invalid expense limit provided: Review the data provided in request and try
  again.'
- '7032: Invalid expense limit period provided: Review the data provided in request
  and try again.'
- '7033: Invalid cardtoken provided: Review the data provided in request and try again.'
- '7034: Invalid cardtoken provided: Review the data provided in request and try again.'
- '7035: Invalid customer ID: Review the data provided in request and try again.'
- '7036: Invalid payment method: Review the payment method object for any missing
  data.'
- '7037: Invalid transaction status: Review status of transaction before submitting
  the request.'
- '7038: Invalid stored method type: Try a different payment method.'
- '7039: Invalid stored method type: Try a different payment method.'
- '7040: This type of stored method cannot be used with this paypoint: Try a different
  payment method.'
- '7041: Tokenization provider of stored method is incompatible with processor in
  paypoint: Try a different payment method.'
- '6202: Cascading is not supported for this entity type: Use a domain owned by an
  organization.'
- '9001: Invalid Authorization Token: Token in input doesn’t have access to Entity
  in scope or Token isn’t allowed to execute requested action. Use the authorized
  API token for the request. Review the reference to the entity in request parameter
  (entry name, paypoint ID, organization ID, signing) is correct and is within the
  token scope.'
- '9002: Unauthorized Token: User or Customer entity doesn’t have permission to the
  requested action. Verify permissions assigned to the user or customer.'
- '9003: Unauthorized Token: Token type or origin IP address aren’t accepted by action.
  Use the correct API token for action. For web components the token type is different
  of the direct API token. Verify if your token has IP restriction.'
- '9004: Inactive Paypoint: The paypoint isn’t active in the platform. Reach out to
  the support team to clarify the status of your paypoint.'
- '9005: Blocked by Fraud Control: The card or the origin IP of request is blacklisted
  in the platform. Reach out to the support team to clarify the status of your paypoint.'
- '9006: Unauthorized Token: Expected Validation code is missing or invalid. Use the
  correct validation code for action. Verify value provided in CAPTCHA for payment
  pages.'
- '9007: Invalid entryId: The provided entry ID is invalid. Review the data provided
  in request and try again.'
- '9008: Invalid orgId parameter: Invalid `orgId` parameter. Provide a valid `orgId`
  parameter.'
- '9009: Invalid entry point name: Invalid entrypoint name. Review the entry point
  name in the request and try again.'
- '9010: Invalid Fraud History Id: Invalid Fraud History ID. Provide a valid ID parameter.'
- '9011: Unauthorized Token: Domain Origin not in scope. Review your domain restrictions
  to see the domain originating the request is included in scope.'
- '9012: Invalid Fraud Blacklist Id: Invalid Fraud Blacklist ID.'
- '9013: Invalid Tier Id: Invalid Tier Id. Provide a valid ID parameter.'
- '9014: Invalid Tier Name: Invalid Tier Name. Provide a valid Name parameter.'
- '9051: Fraud alert: A velocity fraud alert condition was triggered. Verify your
  request and fraud limits with the Support team.'
- '9001: Invalid Authorization Token: Token in input doesn’t have access to Entity
  in scope or Token isn’t allowed to execute requested action. Solution: Use the authorized
  API token for the request. Review the reference to the entity in request parameter
  (entry name, paypoint ID, organization ID, signing) is correct and is within the
  token scope.'
- '9002: Unauthorized Token: User or Customer entity doesn’t have permission to the
  requested action. Solution: Verify permissions assigned to the user or customer.'
- '9003: Unauthorized Token: Token type or origin IP address aren’t accepted by action.
  Solution: Use the correct API token for action. For web components the token type
  is different of the direct API token. Verify if your token has IP restriction.'
- '9004: Inactive Paypoint: The paypoint isn’t active in the platform. Solution: Reach
  out to the support team to clarify the status of your paypoint.'
- '9005: Blocked by Fraud Control: The card or the origin IP of request is blacklisted
  in the platform. Solution: Reach out to the support team to clarify the status of
  your paypoint.'
- '9006: Unauthorized Token: Expected Validation code is missing or invalid. Solution:
  Use the correct validation code for action. Verify value provided in CAPTCHA for
  payment pages.'
- '9007: Invalid entryId: The provided entry ID is invalid. Solution: Review the data
  provided in request and try again.'
- '9008: Invalid orgId parameter: Invalid `orgId` parameter. Solution: Provide a valid
  `orgId` parameter.'
- '9009: Invalid entry point name: Invalid entrypoint name. Solution: Review the entry
  point name in the request and try again.'
- '9010: Invalid Fraud History Id: Invalid Fraud History ID. Solution: Provide a valid
  ID parameter.'
- '9011: Unauthorized Token: Domain Origin not in scope. Solution: Review your domain
  restrictions to see the domain originating the request is included in scope.'
- '9013: Invalid Tier Id: Invalid Tier Id. Solution: Provide a valid ID parameter.'
- '9014: Invalid Tier Name: Invalid Tier Name. Solution: Provide a valid Name parameter.'
- '9051: Fraud alert: A velocity fraud alert condition was triggered. Solution: Verify
  your request and fraud limits with the Support team.'
- '9999: The transaction or action was declined due to a processor error. Try again
  later.'
- '9999: The transaction or action was declined due to a processor error. Try again
  later. If the issue persists, contact Customer Support.'
- '4029: The size of the PKey File is not allowed: Review and try again.'
- '4030: PKey File does not have the allowed format: Review and try again.'
- '4031: The password and key file cannot be empty, at least one is required: Review
  and try again.'
- '7008: Missing payment details: Provide valid data in payment detail object.'
- '7010: Invalid card expiration date: Review the expiration date. Accepted formats
  are MM/YY and MMYY.'
- '7014: Invalid payment method: Review the payment method object for invalid data.
  Accepted values for bank account type are: SAVINGS or CHECKING.'
- '7027: Invalid card expiration date: Review the expiration date. The value must
  be in MM/DD/YY format.'
- '7028: Invalid card expiration date: Review the expiration date. The value must
  be in MM/DD/YY format.'
- '9008: Invalid orgId parameter: Invalid orgId parameter. Provide a valid orgId parameter.'
- 'R03: No Account/Unable to Locate Account'
- 'R04: Invalid Account Number'
- 'R05: Unauthorized Debit to Consumer Account Using Corporate SEC Code'
- 'R06: Returned per ODFI’s Request'
- 'R07: Authorization Revoked by Customer (adjustment entries)'
- 'R08: Payment Stopped or Stop Payment on Item'
- 'R09: Uncollected Funds'
- 'R10: Customer Advises Originator is Not Known to Receiver and/or Originator is
  Not Authorized by Receiver to Debit Receiver’s Account'
- 'R11: Customer Advises Entry Not in Accordance with the Terms of the Authorization'
- 'R12: Branch Sold to Another DFI'
- 'R13: Invalid ACH Routing Number'
- 'R14: Representative Payee Deceased or Unable to Continue in that Capacity'
- 'R15: Beneficiary or Account Holder (Other Than a Representative Payee) Deceased'
- 'R16: Account Frozen'
- 'R17: File Record Edit Criteria/Entry with Invalid Account Number Initiated Under
  Questionable Circumstances/Return of Improperly-Intiated Reversal'
- 'R20: Non-Transaction Account'
- 'R21: Invalid Company Identification'
- 'R22: Invalid Individual ID Number'
- 'R23: Credit Entry Refused by Receiver'
- 'R29: Corporate Customer Advises Not Authorized'
- 'R31: Permissible Return Entry (CCD and CTX only)'
- 'R33: Return of XCK Entry'
- 'Expired card: The card issuer has determined the card is expired.'
- 'Consumer verification negative: The customer entered their account information
  incorrectly or the account number entered is flagged as a risk.'
- 'expired_card: The card issuer has determined the card is expired.'
- 'consumer_verification_negative: The account number entered is flagged as a risk.'
- '5005: Transaction rejected because fee sent is less than the amount configured
  at the paypoint level.'
- '5006: Transaction rejected because pass-through fee exceeds configured amount and
  acceptance of greater values is not allowed.'
- '5005: Fee sent is less than the amount configured at the paypoint level.'
- '5006: Pass-through fee is rejected.'
- '401 Unauthorized: Recheck API token'
- '802: paymentMethodsCardNumberError: Error in Card number field'
- '803: paymentMethodsCardExpirationDateError: Error in Card Expiration field'
- '804: paymentMethodsCardCvvError: Error in CardCVV field'
- '805: paymentMethodsCardZipcodeError: Error in Card Zip code field'
- '901: paymentMethodsAchAccountHolderNameError: Error in ACH Holder field'
- '902: paymentMethodsAchAccountTypeError: Error in ACH Account type field'
- '903: paymentMethodsAchRoutingError: Error in ACH Routing field'
- '904: paymentMethodsAchAccountError: Error in ACH Account number field'
- 'Customer already exists: Check if the customer identifiers are correct.'
- 'Invalid entry point: Ensure the entry point used in the URL is correct.'
- Payment processing error occurred
- '401 Unauthorized: Recheck API token or permissions'
- '400: Bad Request Error'
- '401: Unauthorized Error'
- '500: Internal Server Error'
- '503: Service Unavailable Error'
- 'Error: Tokenization failed due to processor decline or validation errors'
- 400 Bad Request Error
- 401 Unauthorized Error
- 500 Internal Server Error
- 503 Service Unavailable Error
auth_info:
  mentioned_objects:
  - PayabliComponent
  - OauthToken
  - AuthProvider
  - NamedCredential
client:
  base_url: https://api.payabli.com
  auth:
    type: oauth2
    flow: refresh_token
    token_url: https://login.payabli.com/oauth/token
    client_id: '{{ dlt.secrets[''payabli_client_id''] }}'
    client_secret: '{{ dlt.secrets[''payabli_client_secret''] }}'
    refresh_token: '{{ dlt.secrets[''payabli_refresh_token''] }}'
    location: header
    header_name: Authorization
  headers:
    Accept: application/json
source_metadata: null
