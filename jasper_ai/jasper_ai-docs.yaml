resources:
- name: commands
  endpoint:
    path: /commands
    method: POST
    data_selector: data
- name: templates
  endpoint:
    path: /templates
    method: POST
    data_selector: data
- name: commands
  endpoint:
    path: /commands
    method: POST
    data_selector: data
- name: templates
  endpoint:
    path: /templates
    method: POST
    data_selector: data
- name: run_template
  endpoint:
    path: /v1/templates/skl_46A3AF219D654117A83BE51A3836D7A1/run
    method: POST
- name: get_templates
  endpoint:
    path: /v1/templates
    method: GET
- name: command
  endpoint:
    path: /v1/command
    method: POST
- name: knowledge
  endpoint:
    path: /v1/knowledge
    method: POST
- name: documents
  endpoint:
    path: /v1/documents
    method: GET
- name: users
  endpoint:
    path: /v1/users
    method: GET
- name: tones
  endpoint:
    path: /v1/tones
    method: POST
- name: templates
  endpoint:
    path: /v1/templates
    method: GET
- name: usage
  endpoint:
    path: /v1/usage
    method: GET
- name: audiences
  endpoint:
    path: /v1/audiences
    method: GET
- name: commands
  endpoint:
    path: /commands
    method: POST
    data_selector: data
- name: templates
  endpoint:
    path: /templates
    method: POST
    data_selector: data
- name: templates
  endpoint:
    path: /templates
    method: GET
    data_selector: records
- name: run_template
  endpoint:
    path: /templates/{templateId}/run
    method: POST
    data_selector: outputs
- name: templates
  endpoint:
    path: /reference/getalltemplates-1
    method: GET
    data_selector: templates
- name: template_by_id
  endpoint:
    path: /reference/gettemplate-1
    method: GET
    data_selector: template
- name: command
  endpoint:
    path: /v1/command
    method: POST
    data_selector: inputs
    params: {}
- name: templates
  endpoint:
    path: /v1/templates/skl_33330DF2C49347A4B2411624CF8E8A5B/run
    method: POST
    data_selector: inputs
    params: {}
- name: messages
  endpoint:
    path: /v1/messages
    method: POST
    data_selector: data
    params: {}
- name: generate-content
  endpoint:
    path: /v1/generate-content
    method: POST
- name: get-jasper-brand-voices
  endpoint:
    path: /v1/get-jasper-brand-voices
    method: GET
- name: get-jasper-audiences
  endpoint:
    path: /v1/get-jasper-audiences
    method: GET
- name: search-knowledge-base
  endpoint:
    path: /v1/search-knowledge-base
    method: GET
- name: get-jasper-style-guides
  endpoint:
    path: /v1/get-jasper-style-guides
    method: GET
- name: apply-style
  endpoint:
    path: /v1/apply-style
    method: POST
- name: command
  endpoint:
    path: /v1/command
    method: POST
- name: knowledge
  endpoint:
    path: /reference/uploadknowledgedocument
    method: POST
- name: users
  endpoint:
    path: /reference/getallusers
    method: GET
- name: documents
  endpoint:
    path: /reference/getalldocuments
    method: GET
- name: create_knowledge
  endpoint:
    path: /knowledge
    method: POST
    data_selector: data
    params: {}
- name: knowledge_items
  endpoint:
    path: /knowledge
    method: GET
    data_selector: data
    params:
      page: 1
      size: 10
- name: knowledge
  endpoint:
    path: /v1/knowledge/{knowledgeId}
    method: GET
- name: Update Knowledge by ID
  endpoint:
    path: /v1/knowledge/{knowledgeId}
    method: PATCH
- name: Delete Knowledge by ID
  endpoint:
    path: /v1/knowledge/{knowledgeId}
    method: DELETE
- name: search_knowledge
  endpoint:
    path: /v1/knowledge/search
    method: POST
- name: Apply Style Guide
  endpoint:
    path: /v1/styles/{styleId}/apply
    method: POST
- name: Retrieve All Style Guides
  endpoint:
    path: /v1/styles
    method: GET
- name: Retrieve Documents
  endpoint:
    path: /v1/documents
    method: GET
- name: Retrieve Users
  endpoint:
    path: /v1/users
    method: GET
- name: style_guides
  endpoint:
    path: /styles
    method: GET
    data_selector: object
- name: documents
  endpoint:
    path: /documents
    method: GET
    data_selector: data
    params:
      size: 50
      page: 1
- name: documents
  endpoint:
    path: /v1/documents
    method: POST
    data_selector: data
    params: {}
- name: document
  endpoint:
    path: /v1/documents/{documentId}
    method: GET
    data_selector: data
- name: Update Document
  endpoint:
    path: /v1/documents/{documentId}
    method: PATCH
    data_selector: data
    params: {}
- name: delete_document
  endpoint:
    path: /v1/documents/{documentId}
    method: DELETE
- name: users
  endpoint:
    path: /v1/users
    method: GET
    data_selector: data
- name: user
  endpoint:
    path: /v1/users/{userId}
    method: GET
    data_selector: data
- name: tone
  endpoint:
    path: /tones
    method: POST
    data_selector: data
- name: tone
  endpoint:
    path: /v1/tones
    method: GET
    data_selector: array of objects
    params:
      page: 1
      size: 10
- name: tone
  endpoint:
    path: /v1/tones/{toneId}
    method: GET
- name: tone
  endpoint:
    path: /v1/tones/{toneId}
    method: PATCH
- name: tone
  endpoint:
    path: /v1/tones/{toneId}
    method: DELETE
- name: templates
  endpoint:
    path: /v1/templates
    method: GET
    data_selector: data
- name: template
  endpoint:
    path: /v1/templates/{templateId}
    method: GET
- name: Run template
  endpoint:
    path: /v1/templates/{templateId}/run
    method: POST
- name: Retrieve templates
  endpoint:
    path: /v1/templates
    method: GET
- name: Retrieve template by ID
  endpoint:
    path: /v1/templates/{templateId}
    method: GET
- name: usage
  endpoint:
    path: /v1/usage
    method: GET
    data_selector: data.requests
    params:
      start: string
      end: string
      granularity: string
- name: audience
  endpoint:
    path: /v1/audiences/{audienceId}
    method: GET
    data_selector: data
- name: audiences
  endpoint:
    path: /audiences
    method: GET
    data_selector: data
    params:
      page: 1
      size: 10
- name: command
  endpoint:
    path: /command
    method: POST
- name: knowledge
  endpoint:
    path: /knowledge
    method: GET
- name: user
  endpoint:
    path: /users
    method: GET
- name: document
  endpoint:
    path: /documents
    method: GET
- name: tone
  endpoint:
    path: /tones
    method: GET
- name: template
  endpoint:
    path: /templates
    method: GET
- name: audience
  endpoint:
    path: /audiences
    method: GET
- name: Create Knowledge
  endpoint:
    path: /v1/knowledge
    method: POST
    data_selector: data
    params: {}
- name: Retrieve Knowledge items
  endpoint:
    path: /v1/knowledge
    method: GET
    data_selector: data
    params: {}
- name: Retrieve Knowledge by ID
  endpoint:
    path: /v1/knowledge/{id}
    method: GET
    data_selector: data
    params: {}
- name: Update Knowledge by ID
  endpoint:
    path: /v1/knowledge/{id}
    method: PATCH
    data_selector: data
    params: {}
- name: Delete Knowledge by ID
  endpoint:
    path: /v1/knowledge/{id}
    method: DELETE
    data_selector: data
    params: {}
- name: apply_style_guide
  endpoint:
    path: /v1/styles/{styleId}/apply
    method: POST
- name: retrieve_all_style_guides
  endpoint:
    path: /v1/styles
    method: GET
- name: retrieve_documents
  endpoint:
    path: /v1/documents
    method: GET
- name: retrieve_users
  endpoint:
    path: /v1/users
    method: GET
- name: documents
  endpoint:
    path: /documents
    method: GET
    data_selector: data
- name: users
  endpoint:
    path: /users
    method: GET
    data_selector: data
    params:
      limit: number
      page: number
- name: image_background_removal
  endpoint:
    path: /v1/image/remove-background
    method: POST
- name: tone
  endpoint:
    path: /tones
    method: POST
    data_selector: data
    params: {}
- name: templates
  endpoint:
    path: /v1/templates
    method: GET
    data_selector: data
- name: Retrieve API usage
  endpoint:
    path: /v1/usage
    method: GET
    data_selector: data.requests
    params:
      granularity: week
- name: audience
  endpoint:
    path: /v1/audiences/{audienceId}
    method: GET
    data_selector: data
notes:
- Access to Jasper's API is only available for customers on the Jasper Business plan.
- Access to Jasper's API is currently only available for customers on the Jasper Business
  plan.
- Your API Key is a secret, so be sure to take appropriate actions to protect it.
  Do not share it with others or expose it in client-side applications.
- 'Rate limits are on a per-workspace basis, and the default values are as follows:
  POST /commands - 105 RPM (6,300 per hour), GET /templates - 200 RPM (12,000 per
  hour), etc.'
- Uses OAuth2 with refresh token â€” requires setup of connected app in api
- The inputSchema found in a response from getting a template needs to be used in
  the inputs.body parameter of your request to run a given template.
- Uses authorization token for mcp_servers
- The Jasper MCP Server is currently in beta for business customers with API access.
- Production use is supported.
- Jasper Business Plan with API Access is required.
- Visit the Authentication page for information on how to generate a token within
  the Jasper app.
- Jasper API key is required to create a connection.
- Path Params for Apply Style Guide requires styleId.
- Body Params for Apply Style Guide requires content.
errors:
- '400: Bad request. May be missing required inputs or may have badly formatted inputs
  or options.'
- '500: Internal server error. Unable to remove background.'
- '500: Internal server error. Unable to run command.'
- '201: Your request was successful'
- '400: inputs.`field_name` should not be empty'
- '400: inputs.`field_name` must be a `type`'
- '400: inputs.`field_name` should not exist'
- '400: inputs must be an object'
- '400: options.`field_name` must be one of the following values: `values`'
- '400: Missing required template input, inputKey: `field_name`'
- '400: Input does not meet type requirements. Input `inputKey` expects maxLength:
  `length`'
- '400: Input does not meet type requirements. Input `inputKey` expects type: `type`'
- '400: Bad request'
- '401: Invalid Authentication Token'
- '402: Request failed'
- '403: Access forbidden'
- '404: Not Found'
- '429: You have reached your requests per minute limit. Please try again in a few
  minutes.'
- '500: Internal Server Error'
- 400 Bad request. May be missing required fields or may have badly formatted inputs
  or options.
- 500 Internal server error. Unable to create Knowledge.
- 500 Internal server error. Unable to get Knowledges
- 404 Not found. May have an incorrect URL path or Knowledge ID.
- 500 Internal server error. Unable to get Knowledge by ID.
- 500 Internal server error. Unable to update Knowledge by ID.
- 500 Internal server error. Unable to get specified Knowledge.
- '500: Internal server error. Unable to search Knowledge.'
- '400 Bad request: May be missing required fields or may have badly formatted inputs
  or options.'
- '500 Internal server error: Unable to apply style.'
- 500 Something unexpected happened while trying to get the style guide.
- '401: Unauthorized. User is not a member of the workspace.'
- '404: Not found. May have an incorrect URL path.'
- '500: Internal server error. Unable to get documents.'
- 401 Unauthorized. User is not a member of the workspace.
- 404 Not found. May have an incorrect URL path.
- 500 Internal server error. Unable to create document.
- 500 Internal server error. Unable to get specified document.
- 500 Internal server error. Unable to update document.
- 500 Internal server error. Unable to delete specified document.
- '500: Internal server error. Unable to get specified user.'
- 500 Internal server error. Unable to create a Tone.
- '500: Internal server error. Unable to get Tones'
- '404: Not found. May have an incorrect URL path or Tone ID.'
- '500: Internal server error. Unable to get specified Tone.'
- '500: Internal server error. Unable to update specified Tone.'
- 400 Bad request. May be missing required inputs or may have badly formatted inputs
  or options.
- 500 Internal server error. Unable to run KeepWriting.
- '500: Internal server error. Unable to get templates.'
- '404: Not found. May have an incorrect URL path or template ID.'
- '500: Internal server error. Unable to get specified template.'
- '400: Bad Request. May need to check that the request body corresponds with the
  input schema for the template you are trying to complete.'
- '404: Not found. May be due to an incorrect URL path.'
- '500: Internal server error. Unable to generate outputs for specified template.'
- '400: Bad request. May be missing required inputs or may have badly formatted inputs.'
- '401: Unauthorized access to the workspace.'
- '500: Internal server error. Unable to get specified Audience.'
- '500: Internal server error. Unable to get Documents.'
- 500 Internal server error. Unable to run command.
- '500: Internal server error. Unable to get users.'
- 500 Internal server error. Unable to remove background.
- '400: Bad request. May be missing required fields or may have badly formatted inputs
  or options.'
- '500: Internal server error. Unable to create a Tone.'
auth_info:
  mentioned_objects: []
client:
  base_url: https://api.jasper.ai
  headers:
    accept: application/json
    content-type: application/json
source_metadata: null
