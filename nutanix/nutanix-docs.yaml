resources:
- name: available_updates
  endpoint:
    path: /foundation/components/available_updates
    method: GET
    data_selector: blocks
    params: {}
- name: install_progress
  endpoint:
    path: /foundation/components/install_progress
    method: GET
    data_selector: session_id
    params: {}
- name: inventory
  endpoint:
    path: /foundation/components/inventory
    method: GET
    data_selector: blocks
    params: {}
- name: components_install
  endpoint:
    path: /components/install
    method: POST
    data_selector: components
    params: {}
- name: components_upload
  endpoint:
    path: /components/upload
    method: PUT
    data_selector: components
    params: {}
- name: validate_network_configuration
  endpoint:
    path: /validate/network/configuration
    method: POST
    data_selector: null
    params: {}
- name: delete_file
  endpoint:
    path: /foundation/delete
    method: POST
    data_selector: null
    params: {}
- name: get_whitelist
  endpoint:
    path: /foundation/get_whitelist
    method: GET
    data_selector: null
    params: {}
- name: enumerate_nos_packages
  endpoint:
    path: /foundation/enumerate_nos_packages
    method: GET
    data_selector: null
    params: {}
- name: validate_network_configuration
  endpoint:
    path: /foundation/validate_network_configuration
    method: POST
    data_selector: ''
    params: {}
- name: update_whitelist
  endpoint:
    path: /foundation/update_whitelist
    method: POST
    data_selector: ''
    params: {}
- name: upload
  endpoint:
    path: /foundation/upload
    method: POST
    data_selector: ''
    params: {}
- name: enumerate_hypervisor_isos
  endpoint:
    path: /foundation/enumerate_hypervisor_isos
    method: GET
    data_selector: ''
    params: {}
- name: validate_network_configuration
  endpoint:
    path: /foundation/validate_network_configuration
    method: POST
    data_selector: blocks
    params: {}
- name: check_update_available
  endpoint:
    path: /foundation/is_update_available
    method: POST
    data_selector: blocks
    params: {}
- name: get_update_log
  endpoint:
    path: /foundation/get_update_log
    method: GET
    data_selector: blocks
    params: {}
- name: last_update_status
  endpoint:
    path: /foundation/last_update_status
    method: GET
- name: auto_update_foundation
  endpoint:
    path: /foundation/auto_update_foundation
    method: GET
- name: boot_phoenix
  endpoint:
    path: /foundation/boot_phoenix
    method: POST
- name: validate_network_configuration
  endpoint:
    path: /foundation/validate_network_configuration
    method: POST
    data_selector: blocks
    params: {}
- name: detect_local_hypervisor_type
  endpoint:
    path: /foundation/detect_local_hypervisor_type
    method: GET
    data_selector: blocks
    params: {}
- name: is_iso_supported
  endpoint:
    path: /foundation/is_iso_supported
    method: POST
    data_selector: blocks
    params: {}
- name: blocks
  endpoint:
    path: /foundation/features
    method: POST
    data_selector: blocks
- name: validate_network_configuration
  endpoint:
    path: /validate_network_configuration
    method: POST
    data_selector: blocks
    params: {}
- name: get_foundation_tar
  endpoint:
    path: /foundation/get_foundation_tar
    method: GET
    data_selector: ''
    params: {}
- name: get_version
  endpoint:
    path: /foundation/version
    method: GET
    data_selector: ''
    params: {}
- name: get_phoenix_iso
  endpoint:
    path: /foundation/get_phoenix_iso
    method: POST
    data_selector: ''
    params: {}
- name: abort_session
  endpoint:
    path: /abort_session
    method: GET
    data_selector: ''
    params:
      session_id: required
- name: reboot_from_phoenix
  endpoint:
    path: /reboot_from_phoenix
    method: POST
    data_selector: ''
    params: {}
- name: reboot_to_phoenix
  endpoint:
    path: /reboot_to_phoenix
    method: POST
    data_selector: ''
    params: {}
- name: log_archive_tar
  endpoint:
    path: /foundation/log_archive_tar
    method: GET
    data_selector: blocks
- name: cluster_log
  endpoint:
    path: /foundation/cluster_log
    method: GET
    data_selector: clusters
- name: node_log
  endpoint:
    path: /foundation/node_log
    method: GET
    data_selector: blocks
- name: service_log
  endpoint:
    path: /foundation/service_log
    method: GET
    data_selector: clusters
- name: blocks
  endpoint:
    path: /foundation/blocks
    method: POST
    data_selector: blocks
    params: {}
- name: clusters
  endpoint:
    path: /foundation/clusters
    method: POST
    data_selector: clusters
    params: {}
- name: validate_network
  endpoint:
    path: /foundation/validate_network
    method: POST
    data_selector: validate_network
    params: {}
- name: image_nodes
  endpoint:
    path: /foundation/image_nodes
    method: POST
    data_selector: blocks
    params: {}
- name: reset_state
  endpoint:
    path: /foundation/reset_state
    method: GET
    data_selector: clusters
    params: {}
- name: pre_check
  endpoint:
    path: /pre_check
    method: POST
- name: phoenix_network_status
  endpoint:
    path: /phoenix_network_status
    method: GET
- name: ipmi_config
  endpoint:
    path: /ipmi_config
    method: POST
- name: validate_network_configuration
  endpoint:
    path: /foundation/validate_network_configuration
    method: POST
    data_selector: blocks
    params: {}
- name: list_nics
  endpoint:
    path: /foundation/list_nics
    method: GET
    data_selector: blocks
    params: {}
- name: foundation_networking
  endpoint:
    path: /foundation/foundation_networking
    method: POST
    data_selector: null
    params: {}
- name: node_network_details
  endpoint:
    path: /foundation/node_network_details
    method: POST
    data_selector: null
    params: {}
- name: discover_nodes
  endpoint:
    path: /discover_nodes
    method: GET
    data_selector: blocks
- name: ping_multiple
  endpoint:
    path: /ping_multiple
    method: POST
    data_selector: blocks
- name: provision_network
  endpoint:
    path: /provision_network
    method: POST
- name: primary_nic
  endpoint:
    path: /primary_nic
    method: POST
- name: foundation_networking
  endpoint:
    path: /foundation_networking
    method: POST
- name: validate_network_configuration
  endpoint:
    path: /validate_network_configuration
    method: POST
    data_selector: string
    params: {}
- name: api_keys
  endpoint:
    path: /api_keys
    method: POST
    data_selector: details
    params: {}
- name: prism_element_clusters
  endpoint:
    path: /pc/clusters
    method: POST
    data_selector: details
    params:
      length: 0
      offset: 0
- name: hardware_managers
  endpoint:
    path: /hardware_managers
    method: POST
    data_selector: details
    params: {}
- name: imaged_clusters_list
  endpoint:
    path: /imaged_clusters/list
    method: POST
    data_selector: clusters
    params:
      length: 0
      offset: 0
- name: imaged_clusters
  endpoint:
    path: /imaged_clusters
    method: POST
    data_selector: cluster
    params: {}
- name: imaged_nodes_list
  endpoint:
    path: /imaged_nodes/list
    method: POST
    data_selector: nodes
    params:
      length: 0
      offset: 0
- name: imaged_nodes_onboard
  endpoint:
    path: /imaged_nodes/onboard
    method: POST
    data_selector: onboarded_node
    params: {}
- name: agent
  endpoint:
    path: /agent
    method: GET
    data_selector: Status
- name: workloads
  endpoint:
    path: /plans/workloads/list
    method: POST
    data_selector: Status
- name: ntp_servers
  endpoint:
    path: /configurations/appliance/ntpservers
    method: PUT
    data_selector: Status
- name: app_info
  endpoint:
    path: /appinfo
    method: GET
    data_selector: Status
- name: workload_information
  endpoint:
    path: /move/v2/plans/workloads/list
    method: POST
    data_selector: Status
    params:
      NumIterations: integer <uint64>
- name: workloads
  endpoint:
    path: /move/v2/plans/workloads/list
    method: POST
    data_selector: Status
    params:
      NumIterations: integer <uint64>
- name: appliance_snapshots
  endpoint:
    path: /move/v2/configurations/appliance/providers/snapshots
    method: POST
    data_selector: Status
- name: appliance_sslcertificate
  endpoint:
    path: /move/v2/configurations/appliance/sslcertificate
    method: POST
    data_selector: Status
- name: appliance_services
  endpoint:
    path: /move/v2/configurations/appliance/services
    method: POST
    data_selector: Status
- name: supportbundle
  endpoint:
    path: /move/v2/supportbundle
    method: POST
    data_selector: Status
- name: workloads
  endpoint:
    path: /move/v2/plans/workloads/list
    method: POST
    data_selector: Status
    params:
      NumIterations: integer <uint64>
- name: bandwidth_capacity_policy
  endpoint:
    path: /move/v2/plans/bwcap/policies
    method: POST
    data_selector: Status
- name: delete_bandwidth_capacity_policy
  endpoint:
    path: /move/v2/plans/bwcap/policies/{policyuuid}
    method: DELETE
- name: workloads_list
  endpoint:
    path: /plans/workloads/list
    method: POST
    data_selector: Status
    params: {}
- name: cloud_pricing
  endpoint:
    path: /cloudpricing/{provideruuid}/{region}
    method: GET
    data_selector: Status
    params: {}
- name: events_download_cancel
  endpoint:
    path: /events/download/cancel
    method: POST
    data_selector: Status
    params: {}
- name: workloads
  endpoint:
    path: /plans/workloads/list
    method: POST
    data_selector: Status
    params:
      NumIterations: integer <uint64>
- name: iam_providers
  endpoint:
    path: /iamproviders/{id}
    method: DELETE
    data_selector: ''
    params: {}
- name: workloads_list
  endpoint:
    path: /plans/workloads/list
    method: POST
    data_selector: Status
    params:
      NumIterations: integer <uint64>
- name: iamproviders
  endpoint:
    path: /iamproviders
    method: GET
    data_selector: Status
- name: vddk
  endpoint:
    path: /vddk
    method: DELETE
- name: vddk_upload
  endpoint:
    path: /vddk/upload
    method: POST
- name: workloads_list
  endpoint:
    path: /plans/workloads/list
    method: POST
    data_selector: Status
    params: {}
- name: change_password
  endpoint:
    path: /changepassword
    method: POST
    data_selector: ''
    params: {}
- name: cancel_migration
  endpoint:
    path: /plans/{id}/cancel
    method: POST
    data_selector: ''
    params: {}
- name: perses_token
  endpoint:
    path: /perses/token
    method: POST
    data_selector: ''
    params: {}
- name: workloads_list
  endpoint:
    path: /plans/workloads/list
    method: POST
    data_selector: Status
    params:
      NumIterations: integer <uint64>
- name: plans
  endpoint:
    path: /plans/{id}
    method: GET
    data_selector: Status
    params: {}
- name: workload_info
  endpoint:
    path: /plans/workloads/list
    method: POST
    data_selector: Status
    params:
      NumIterations: integer <uint64>
- name: workload_action
  endpoint:
    path: /plans/{id}/workloads/{wid}/action
    method: POST
- name: workloads_list
  endpoint:
    path: /move/v2/plans/workloads/list
    method: POST
    data_selector: Status
    params: {}
- name: workloads_list
  endpoint:
    path: /move/v2/plans/workloads/list
    method: POST
    data_selector: Status
    params:
      NumIterations: integer <uint64>
- name: validate_conversion
  endpoint:
    path: /move/v2/plans/{id}/validateconversion
    method: POST
- name: allowlist
  endpoint:
    path: /move/v2/providers/{id}/allowlist
    method: POST
- name: delete_provider
  endpoint:
    path: /move/v2/providers/{id}
    method: DELETE
- name: get_runbook
  endpoint:
    path: /move/v2/providers/{id}/runbooks/{runbookid}
    method: GET
- name: workloads
  endpoint:
    path: /plans/workloads/list
    method: POST
    data_selector: Status
    params:
      NumIterations: integer <uint64>
- name: providers
  endpoint:
    path: /providers/list
    method: POST
    data_selector: Status
- name: poweronvms
  endpoint:
    path: /sources/{id}/regions/{regionId}/poweronvms
    method: POST
    data_selector: Status
- name: workloads_list
  endpoint:
    path: /plans/workloads/list
    method: POST
    data_selector: Status
    params: {}
- name: task_details
  endpoint:
    path: /tasks/{id}
    method: GET
    data_selector: Status
    params: {}
- name: token_check_authorized
  endpoint:
    path: /token/checkAuthorized
    method: POST
    data_selector: Status
    params: {}
- name: workload_information
  endpoint:
    path: /plans/workloads/list
    method: POST
    data_selector: Status
    params:
      NumIterations: integer <uint64>
- name: workloads
  endpoint:
    path: /plans/workloads/list
    method: POST
    data_selector: Status
    params:
      NumIterations: integer <uint64>
- name: checkUpgrade
  endpoint:
    path: /checkUpgrade
    method: GET
    data_selector: responses
    params:
      ReCache: boolean
- name: workloads_list
  endpoint:
    path: /plans/workloads/list
    method: POST
    data_selector: Status
    params:
      NumIterations: integer <uint64>
- name: GetUpgradeInfo
  endpoint:
    path: /upgrade/GetUpgradeInfo
    method: GET
    data_selector: Status
- name: uploadUpgradeFiles
  endpoint:
    path: /uploadUpgradeFiles
    method: POST
- name: upgrade
  endpoint:
    path: /upgrade
    method: POST
- name: migrateOs_manual
  endpoint:
    path: /upgrade/migrateOs/manual
    method: POST
- name: migrateOs_automatic
  endpoint:
    path: /upgrade/migrateOs/automatic
    method: POST
- name: workloads_list
  endpoint:
    path: /plans/workloads/list
    method: POST
    data_selector: Status
    params:
      NumIterations: integer <uint64>
- name: workloads_action
  endpoint:
    path: /plans/workloads/action
    method: POST
    data_selector: Status
- name: accounts
  endpoint:
    path: /accounts
    method: post
    data_selector: entities
- name: delete_account
  endpoint:
    path: /accounts/{uuid}
    method: delete
- name: accounts
  endpoint:
    path: /accounts/{uuid}
    method: GET
    data_selector: entities
- name: resource_types
  endpoint:
    path: /accounts/{uuid}/resource_types/list
    method: POST
    data_selector: entities
- name: vpcs
  endpoint:
    path: /vpcs
    method: GET
    data_selector: entities
- name: app_icons
  endpoint:
    path: /app_icons/{uuid}
    method: GET
    data_selector: entities
- name: upload_app_icon
  endpoint:
    path: /app_icons/upload
    method: POST
    data_selector: entities
- name: app_runlogs_archival_policy
  endpoint:
    path: /app_runlogs/archival_policy/{uuid}
    method: GET
    data_selector: entities
- name: app_runlogs_archive_file
  endpoint:
    path: /app_runlogs/archive_file/{uuid}/download
    method: GET
    data_selector: entities
- name: app_showback_prepare_csv
  endpoint:
    path: /app_showback/prepare_csv
    method: GET
    data_selector: entities
- name: app_showback_export_file
  endpoint:
    path: /app_showback/export_file
    method: GET
    data_selector: entities
- name: app_showback_cancel
  endpoint:
    path: /app_showback/cancel
    method: POST
    data_selector: entities
- name: app_showback_csv_file_readiness_status
  endpoint:
    path: /app_showback/{uuid}/csv_file_readiness_status
    method: GET
    data_selector: entities
- name: app_showback_prepare_csv_task_exists
  endpoint:
    path: /app_showback/prepare_csv_task_exists
    method: GET
    data_selector: entities
- name: app_showback_disable
  endpoint:
    path: /app_showback/disable
    method: POST
    data_selector: entities
- name: app_showback_enable
  endpoint:
    path: /app_showback/enable
    method: POST
    data_selector: entities
- name: app_showback_status
  endpoint:
    path: /app_showback/status
    method: GET
    data_selector: entities
- name: app_tasks
  endpoint:
    path: /app_tasks
    method: POST
    data_selector: entities
- name: app_tasks_delete
  endpoint:
    path: /app_tasks/{uuid}
    method: DELETE
    data_selector: entities
- name: app_tasks_get
  endpoint:
    path: /app_tasks/{uuid}
    method: GET
    data_selector: entities
- name: app_tasks_list
  endpoint:
    path: /app_tasks/list
    method: POST
    data_selector: entities
- name: app_tasks_share
  endpoint:
    path: /app_tasks/{uuid}/share
    method: PUT
    data_selector: entities
- name: app_protection_policy
  endpoint:
    path: /app_protection_policies
    method: post
    data_selector: entities
- name: app_protection_policy_uuid
  endpoint:
    path: /app_protection_policies/{uuid}
    method: get
    data_selector: entities
- name: delete_app_protection_policy
  endpoint:
    path: /app_protection_policies/{uuid}
    method: delete
    data_selector: entities
- name: approval_request
  endpoint:
    path: /approvals/{uuid}
    method: GET
    data_selector: entities
- name: approval_requests_list
  endpoint:
    path: /approval_requests/list
    method: POST
    data_selector: entities
- name: approvals_list
  endpoint:
    path: /approvals/list
    method: POST
    data_selector: entities
- name: abort_runlog
  endpoint:
    path: /apps/{uuid}/app_runlogs/{runlog_uuid}/abort
    method: POST
    data_selector: entities
- name: run_script_abort
  endpoint:
    path: /runbooks/{uuid}/run_script/abort/{runid}/{trlid}
    method: POST
    data_selector: entities
    params: {}
- name: blueprints_new_apply
  endpoint:
    path: /apps/{uuid}/blueprints/new/apply
    method: POST
    data_selector: entities
    params: {}
- name: apps_clone
  endpoint:
    path: /apps/{uuid}/clone
    method: POST
    data_selector: entities
    params: {}
- name: apps
  endpoint:
    path: /apps
    method: POST
    data_selector: entities
    params: {}
- name: credential_update
  endpoint:
    path: /apps/{uuid}/credential/update
    method: POST
    data_selector: entities
    params: {}
- name: apps_delete
  endpoint:
    path: /apps/{uuid}
    method: DELETE
    data_selector: entities
    params: {}
- name: unreachable_vms
  endpoint:
    path: /apps/{uuid}/unreachable_vms
    method: DELETE
    data_selector: entities
    params: {}
- name: output_download
  endpoint:
    path: /apps/{uuid}/output/download
    method: GET
    data_selector: entities
    params: {}
- name: runlogs_output_download
  endpoint:
    path: /runbooks/runlogs/{uuid}/output/download
    method: GET
    data_selector: entities
    params: {}
- name: action_variables
  endpoint:
    path: /apps/{uuid}/actions/{action_name}/variables
    method: GET
    data_selector: entities
    params: {}
- name: app_details
  endpoint:
    path: /apps/{uuid}
    method: GET
    data_selector: entities
    params: {}
- name: original_blueprint
  endpoint:
    path: /apps/{uuid}/blueprints/original
    method: GET
    data_selector: entities
    params: {}
- name: app_consumption
  endpoint:
    path: /apps/{uuid}/consumption
    method: POST
    data_selector: entities
    params: {}
- name: variable_values
  endpoint:
    path: /runbooks/{uuid}/variables/{variable_uuid}/values
    method: GET
    data_selector: entities
    params: {}
- name: new_blueprint
  endpoint:
    path: /apps/{uuid}/blueprints/new
    method: GET
    data_selector: entities
    params: {}
- name: published_services
  endpoint:
    path: /apps/{uuid}/published_services/{published_service_uuid}
    method: GET
    data_selector: entities
- name: app_runlogs
  endpoint:
    path: /apps/{uuid}/app_runlogs/{runlog_uuid}
    method: GET
    data_selector: entities
- name: output
  endpoint:
    path: /runbooks/runlogs/{uuid}/children/{children_uuid}/output
    method: GET
    data_selector: entities
- name: run_script
  endpoint:
    path: /runbooks/{uuid}/run_script
    method: POST
    data_selector: entities
- name: roles
  endpoint:
    path: /aws/v1/roles/list
    method: POST
    data_selector: entities
    params:
      filter: string
      length: 1
      offset: 0
- name: application_security_groups
  endpoint:
    path: /azure_rm/v1/application_security_groups/list
    method: POST
    data_selector: entities
    params:
      filter: string
      length: 1
      offset: 0
- name: availability_sets
  endpoint:
    path: /azure_rm/v1/availability_sets/list
    method: POST
    data_selector: entities
    params:
      filter: string
      length: 1
      offset: 0
- name: availability_zones
  endpoint:
    path: /azure_rm/v1/availability_zones/list
    method: POST
    data_selector: entities
    params:
      filter: string
      length: 1
      offset: 0
- name: galleries
  endpoint:
    path: /azure_rm/v1/galleries/list
    method: POST
    data_selector: entities
    params:
      filter: string
      length: 1
      offset: 0
- name: gallery_image_versions
  endpoint:
    path: /azure_rm/v1/gallery_image_versions/list
    method: POST
    data_selector: entities
    params:
      filter: string
      length: 1
      offset: 0
- name: gallery_images
  endpoint:
    path: /azure_rm/v1/gallery_images/list
    method: POST
    data_selector: entities
    params:
      filter: string
      length: 1
      offset: 0
- name: image_offers
  endpoint:
    path: /azure_rm/v1/image_offers/list
    method: POST
    data_selector: entities
    params:
      filter: string
      length: 1
      offset: 0
- name: image_publishers
  endpoint:
    path: /azure_rm/v1/image_publishers/list
    method: POST
    data_selector: entities
    params: {}
- name: image_skus
  endpoint:
    path: /azure_rm/v1/image_skus/list
    method: POST
    data_selector: entities
    params: {}
- name: image_versions
  endpoint:
    path: /azure_rm/v1/image_versions/list
    method: POST
    data_selector: entities
    params: {}
- name: images
  endpoint:
    path: /azure_rm/v1/images/list
    method: POST
    data_selector: entities
    params: {}
- name: locations
  endpoint:
    path: /azure_rm/v1/locations/list
    method: POST
    data_selector: entities
    params: {}
- name: resource_groups
  endpoint:
    path: /azure_rm/v1/resource_groups/list
    method: POST
    data_selector: entities
    params: {}
- name: security_groups
  endpoint:
    path: /azure_rm/v1/security_groups/list
    method: POST
    data_selector: entities
    params: {}
- name: security_rules
  endpoint:
    path: /azure_rm/v1/security_rules/list
    method: POST
    data_selector: entities
    params: {}
- name: storage_accounts
  endpoint:
    path: /azure_rm/v1/storage_accounts/list
    method: POST
    data_selector: entities
    params: {}
- name: subnets
  endpoint:
    path: /azure_rm/v1/subnets/list
    method: POST
    data_selector: entities
    params: {}
- name: subscription_images
  endpoint:
    path: /azure_rm/v1/subscription_images/list
    method: POST
    data_selector: entities
    params: {}
- name: virtual_networks
  endpoint:
    path: /azure_rm/v1/virtual_networks/list
    method: POST
    data_selector: entities
    params: {}
- name: vm_sizes
  endpoint:
    path: /azure_rm/v1/vm_sizes/list
    method: POST
    data_selector: entities
    params: {}
- name: blueprints
  endpoint:
    path: /blueprints
    method: POST
    data_selector: entities
    params: {}
- name: blueprint_export_file
  endpoint:
    path: /blueprints/{uuid}/export_file
    method: GET
    data_selector: entities
    params: {}
- name: blueprint_export_json
  endpoint:
    path: /blueprints/{uuid}/export_json
    method: GET
    data_selector: entities
    params: {}
- name: vpcs
  endpoint:
    path: /xi/vpcs
    method: GET
    data_selector: entities
- name: blueprints
  endpoint:
    path: /blueprints/{uuid}
    method: POST
    data_selector: entities
- name: endpoints
  endpoint:
    path: /endpoints
    method: POST
    data_selector: entities
- name: environments
  endpoint:
    path: /environments
    method: POST
    data_selector: entities
- name: environments
  endpoint:
    path: /environments/{uuid}
    method: GET
    data_selector: entities
- name: environments_list
  endpoint:
    path: /environments/list
    method: POST
    data_selector: entities
- name: environments_usage
  endpoint:
    path: /environments/{uuid}/usage
    method: POST
    data_selector: entities
- name: environments_put
  endpoint:
    path: /environments/{uuid}
    method: PUT
    data_selector: entities
- name: download_logs
  endpoint:
    path: /features/policy/download_logs
    method: GET
    data_selector: entities
- name: feature_status
  endpoint:
    path: /features/{name}/status
    method: GET
    data_selector: entities
- name: approval_policy
  endpoint:
    path: /features/approval_policy
    method: GET
    data_selector: entities
- name: policy
  endpoint:
    path: /features/policy
    method: GET
    data_selector: entities
- name: project_saml
  endpoint:
    path: /features/project_saml
    method: GET
    data_selector: entities
- name: snapshots
  endpoint:
    path: /gcp/v1/snapshots/list
    method: POST
    data_selector: entities
    params:
      filter: string
      length: 1
      offset: 0
- name: subnetworks
  endpoint:
    path: /gcp/v1/subnetworks/list
    method: POST
    data_selector: entities
    params: {}
- name: zones
  endpoint:
    path: /gcp/v1/zones/list
    method: POST
    data_selector: entities
    params: {}
- name: job_instances
  endpoint:
    path: /jobs/{uuid}/instances
    method: POST
    data_selector: entities
    params: {}
- name: jobs
  endpoint:
    path: /jobs
    method: POST
    data_selector: entities
    params: {}
- name: clusters
  endpoint:
    path: /kubernetes/v1/karbon/clusters/list
    method: POST
    data_selector: entities
    params: {}
- name: license_consumption
  endpoint:
    path: /license/consumption
    method: POST
    data_selector: entities
    params: {}
- name: marketplace_icon
  endpoint:
    path: /icons/constant/marketplace/upload
    method: POST
    data_selector: entities
    params: {}
- name: marketplace_items
  endpoint:
    path: /calm_marketplace_items
    method: POST
    data_selector: entities
    params: {}
- name: network_groups
  endpoint:
    path: /network_groups
    method: POST
    data_selector: entities
- name: network_group
  endpoint:
    path: /network_groups/{uuid}
    method: GET
    data_selector: entities
- name: delete_network_group
  endpoint:
    path: /network_groups/{uuid}
    method: DELETE
    data_selector: entities
- name: create_network_group
  endpoint:
    path: /network_groups
    method: POST
    data_selector: entities
- name: network_groups
  endpoint:
    path: /network_groups/list
    method: POST
    data_selector: entities
- name: categories
  endpoint:
    path: /nutanix/v1/categories/list
    method: POST
    data_selector: entities
- name: clusters
  endpoint:
    path: /nutanix/v1/clusters/list
    method: POST
    data_selector: entities
- name: groups
  endpoint:
    path: /nutanix/v1/groups/list
    method: POST
    data_selector: entities
- name: hosts
  endpoint:
    path: /nutanix/v1/hosts/list
    method: POST
    data_selector: entities
- name: images
  endpoint:
    path: /nutanix/v1/images/list
    method: POST
    data_selector: entities
- name: subnets
  endpoint:
    path: /nutanix/v1/subnets/list
    method: POST
    data_selector: entities
- name: vm_recovery_points
  endpoint:
    path: /nutanix/v1/vm_recovery_points/list
    method: POST
    data_selector: entities
- name: vms
  endpoint:
    path: /nutanix/v1/vms/list
    method: POST
    data_selector: entities
- name: vpcs
  endpoint:
    path: /nutanix/v1/vpcs/list
    method: POST
    data_selector: entities
- name: policies
  endpoint:
    path: /policies
    method: POST
    data_selector: entities
- name: projects
  endpoint:
    path: /projects
    method: POST
    data_selector: entities
- name: projects
  endpoint:
    path: /projects
    method: GET
    data_selector: entities
- name: calm_projects
  endpoint:
    path: /calm_projects
    method: GET
    data_selector: entities
- name: projects_stats
  endpoint:
    path: /projects/stats
    method: POST
    data_selector: entities
- name: consumption_stats
  endpoint:
    path: /consumption_stats
    method: POST
    data_selector: entities
- name: calm_projects_usage
  endpoint:
    path: /calm_projects/{uuid}/usage
    method: POST
    data_selector: entities
- name: calm_projects_validate
  endpoint:
    path: /calm_projects/validate
    method: POST
    data_selector: entities
- name: providers
  endpoint:
    path: /providers
    method: POST
    data_selector: entities
- name: quotas
  endpoint:
    path: /quotas
    method: POST
    data_selector: entities
- name: quotas_list
  endpoint:
    path: /quotas/list
    method: post
    data_selector: entities
- name: replication_connections
  endpoint:
    path: /replication_connections
    method: post
    data_selector: entities
- name: resource_types
  endpoint:
    path: /resource_types
    method: post
    data_selector: entities
- name: runbooks
  endpoint:
    path: /runbooks
    method: POST
    data_selector: entities
- name: runlogs
  endpoint:
    path: /runbooks/runlogs/{uuid}
    method: GET
    data_selector: entities
- name: resource_types
  endpoint:
    path: /resource_types/list
    method: POST
    data_selector: entities
- name: runbook_execute
  endpoint:
    path: /runbooks/{uuid}/execute
    method: POST
    data_selector: entities
- name: runbook_export_json
  endpoint:
    path: /runbooks/{uuid}/export_json
    method: GET
    data_selector: entities
- name: runbook_variables_values
  endpoint:
    path: /runbooks/{uuid}/variables/{variable_uuid}/values
    method: GET
    data_selector: entities
- name: runbook
  endpoint:
    path: /runbooks/{uuid}
    method: GET
    data_selector: entities
- name: runlog
  endpoint:
    path: /runbooks/runlogs/{uuid}
    method: GET
    data_selector: entities
- name: runlog_children_output
  endpoint:
    path: /runbooks/runlogs/{uuid}/children/{children_uuid}/output
    method: GET
    data_selector: entities
- name: runlog_children_list
  endpoint:
    path: /runbooks/runlogs/{uuid}/children/list
    method: POST
    data_selector: entities
- name: runbooks_list
  endpoint:
    path: /runbooks/list
    method: POST
    data_selector: entities
- name: runlog_pause
  endpoint:
    path: /runbooks/runlogs/{uuid}/pause
    method: POST
    data_selector: entities
- name: runlog_play
  endpoint:
    path: /runbooks/runlogs/{uuid}/play
    method: POST
    data_selector: entities
- name: runlog_rerun
  endpoint:
    path: /runbooks/runlogs/{uuid}/rerun
    method: POST
    data_selector: entities
- name: runlog_children_resume
  endpoint:
    path: /runbooks/runlogs/{uuid}/children/{children_uuid}/resume
    method: POST
    data_selector: entities
- name: tunnels
  endpoint:
    path: /tunnels
    method: POST
    data_selector: entities
- name: system_preference
  endpoint:
    path: /system_preference
    method: GET
    data_selector: entities
- name: saas_consumption
  endpoint:
    path: /saas_consumption
    method: DELETE
    data_selector: entities
- name: user_preference
  endpoint:
    path: /user_preference
    method: GET
    data_selector: entities
- name: api_keys
  endpoint:
    path: /api_keys
    method: POST
    data_selector: entities
- name: tags
  endpoint:
    path: /vmware/v6/tags/list
    method: POST
    data_selector: entities
- name: clusters
  endpoint:
    path: /clusters
    method: POST
    data_selector: entities
- name: storage_pod
  endpoint:
    path: /vmware/v6/storage_pod/list
    method: POST
    data_selector: entities
    params:
      filter: string
      length: 1
      offset: 0
- name: vmware_templates
  endpoint:
    path: /vmware/v6/accounts/{account_uuid}/templates/list
    method: POST
    data_selector: entities
- name: timezones
  endpoint:
    path: /vmware/v6/timezone/list
    method: POST
    data_selector: entities
- name: vmware_vms
  endpoint:
    path: /vmware/v6/accounts/{account_uuid}/vms/list
    method: POST
    data_selector: entities
- name: categories
  endpoint:
    path: /xi/v1/categories/list
    method: POST
    data_selector: entities
- name: images
  endpoint:
    path: /xi/v1/images/list
    method: POST
    data_selector: entities
- name: subnets
  endpoint:
    path: /xi/v1/subnets/list
    method: POST
    data_selector: entities
- name: vpcs
  endpoint:
    path: /xi/v1/vpcs/list
    method: POST
    data_selector: entities
- name: cloud_accounts
  endpoint:
    path: /cloud-accounts/{id}
    method: GET
    data_selector: data
- name: availability_zones
  endpoint:
    path: /cloud-accounts/{cloud_account_id}/regions/{region_id}/availability-zones
    method: GET
    data_selector: data
- name: cloud_accounts
  endpoint:
    path: /cloud-accounts/{id}/regions/{region_id}/vpcs
    method: GET
    data_selector: data
- name: clusters
  endpoint:
    path: /clusters/{id}
    method: GET
    data_selector: data
- name: vpcs
  endpoint:
    path: /cloud-accounts/{cloud_account_id}/regions/{region_id}/vpcs
    method: GET
    data_selector: data
- name: notifications
  endpoint:
    path: /notifications
    method: GET
    data_selector: data
- name: cloud_accounts
  endpoint:
    path: /organizations/{id}/cloud-accounts
    method: GET
    data_selector: data
- name: organizations
  endpoint:
    path: /organizations
    method: GET
    data_selector: data
- name: vpcs
  endpoint:
    path: /cloud-accounts/{cloud_account_id}/regions/{region_id}/vpcs
    method: GET
    data_selector: data
- name: remote_storage_profiles
  endpoint:
    path: /remote-storage-profiles
    method: GET
    data_selector: data
- name: ssh_keys
  endpoint:
    path: /cloud-accounts/{cloud_account_id}/regions/{region_id}/ssh-keys
    method: GET
    data_selector: data
- name: tasks
  endpoint:
    path: /tasks/{id}
    method: GET
    data_selector: data
- name: vnets
  endpoint:
    path: /cloud-accounts/{cloud_account_id}/regions/{region_id}/vnets
    method: GET
    data_selector: data
- name: alert_policy
  endpoint:
    path: /alerts/policy
    method: GET
    data_selector: policy
    params: {}
- name: alerts
  endpoint:
    path: /alerts
    method: GET
    data_selector: alerts
    params: {}
- name: verify_external_user
  endpoint:
    path: /users/external/verify
    method: POST
    data_selector: verify
    params: {}
- name: verify_external_user
  endpoint:
    path: /users/external/verify
    method: POST
    data_selector: none
    params: {}
- name: delete_cte
  endpoint:
    path: /encryptions/cte/{cte_id}
    method: DELETE
    data_selector: none
    params: {}
- name: get_alerts_policy_name
  endpoint:
    path: /alerts/policy/name/{alertPolicyName}
    method: GET
    data_selector: none
    params: {}
- name: get_alerts_purge_interval
  endpoint:
    path: /alerts/purgeInterval
    method: GET
    data_selector: none
    params: {}
- name: verify_external_user
  endpoint:
    path: /users/external/verify
    method: POST
    data_selector: string
    params: {}
- name: deregister_clone
  endpoint:
    path: /clones/{clone_id}
    method: DELETE
    data_selector: string
    params: {}
- name: get_clones
  endpoint:
    path: /clones
    method: GET
    data_selector: string
    params: {}
- name: verify_external_user
  endpoint:
    path: /users/external/verify
    method: POST
    data_selector: string
    params: {}
- name: get_clusters
  endpoint:
    path: /clusters
    method: GET
    data_selector: string
    params: {}
- name: get_clusters_supported_clouds
  endpoint:
    path: /clusters/supported-clouds
    method: GET
    data_selector: string
    params: {}
- name: get_clusters_by_name
  endpoint:
    path: /clusters/name/{cluster_name}
    method: GET
    data_selector: string
    params: {}
- name: delete_cluster
  endpoint:
    path: /clusters/{cluster_id}
    method: DELETE
    data_selector: string
    params: {}
- name: verify_external_user
  endpoint:
    path: /users/external/verify
    method: POST
    data_selector: errorCode
    params: {}
- name: deregister_database_group
  endpoint:
    path: /database-groups/{database_group_id}
    method: DELETE
    data_selector: errorCode
    params:
      delete-time-machine: 'false'
      time-machine-id: string
- name: verify_external_user
  endpoint:
    path: /era/v0.9/users/external/verify
    method: POST
    data_selector: records
    params: {}
- name: deregister_database_server_cluster
  endpoint:
    path: /era/v0.9/dpcs/{dbserver-cluster-id}
    method: POST
    data_selector: records
    params: {}
- name: verify_external_user
  endpoint:
    path: /era/v0.9/users/external/verify
    method: POST
    data_selector: string
- name: deregister_database_server
  endpoint:
    path: /era/v0.9/dbservers/{dbserver_id}
    method: DELETE
    data_selector: string
- name: get_database_servers
  endpoint:
    path: /era/v0.9/dbservers
    method: GET
    data_selector: string
- name: get_database_server
  endpoint:
    path: /era/v0.9/dbservers/{dbserver_id}
    method: GET
    data_selector: string
- name: verify_external_user
  endpoint:
    path: /users/external/verify
    method: POST
    data_selector: none
    params: {}
- name: patch_dbserver
  endpoint:
    path: /dbservers/{dbserver_id}/patch
    method: POST
    data_selector: none
    params: {}
- name: patch_os_dbserver
  endpoint:
    path: /dbservers/{dbserver_id}/patch-os
    method: POST
    data_selector: none
    params: {}
- name: provision_dbserver
  endpoint:
    path: /dbservers/provision
    method: POST
    data_selector: none
    params: {}
- name: register_dbserver
  endpoint:
    path: /dbservers/register
    method: POST
    data_selector: none
    params: {}
- name: update_dbserver
  endpoint:
    path: /dbservers/{dbserver_id}
    method: PUT
    data_selector: none
    params: {}
- name: creds_dbserver
  endpoint:
    path: /dbservers/{dbserver_id}/creds
    method: POST
    data_selector: none
    params: {}
- name: scale_dbserver
  endpoint:
    path: /dbservers/{dbserver_id}/scale
    method: POST
    data_selector: none
    params: {}
- name: verify_external_user
  endpoint:
    path: /users/external/verify
    method: POST
    data_selector: ''
    params: {}
- name: deregister_database
  endpoint:
    path: /databases/{database_id}
    method: DELETE
    data_selector: ''
    params: {}
- name: get_databases
  endpoint:
    path: /databases
    method: GET
    data_selector: ''
    params: {}
- name: provision_database
  endpoint:
    path: /databases/provision
    method: POST
    data_selector: ''
    params: {}
- name: verify_external_user
  endpoint:
    path: /users/external/verify
    method: POST
    data_selector: application/json
    params: {}
- name: create_dr_config
  endpoint:
    path: /dpcs/{dbserver-cluster-id}/drconfigs
    method: POST
    data_selector: application/json
    params: {}
- name: delete_dr_config
  endpoint:
    path: /dpcs/{dbserver-cluster-id}/drconfigs/{drconfig-id}
    method: DELETE
    data_selector: application/json
    params: {}
- name: verify_external_user
  endpoint:
    path: /users/external/verify
    method: POST
    data_selector: payload
- name: dbservers_drconfigs
  endpoint:
    path: /dbservers/{dbserver_id}/drconfigs/{drconfig-id}
    method: GET
- name: dpcs_drconfigs
  endpoint:
    path: /dpcs/{dbserver-cluster-id}/drconfigs/{drconfig-id}
    method: GET
- name: switchover
  endpoint:
    path: /dbservers/{dbserver_id}/drconfigs/{drconfig-id}/switchover
    method: POST
- name: dr
  endpoint:
    path: /dbservers/{dbserver_id}/drconfigs/{drconfig-id}/dr
    method: POST
- name: patch_drconfigs
  endpoint:
    path: /dbservers/{dbserver_id}/drconfigs/{drconfig-id}
    method: PATCH
- name: verify_external_user
  endpoint:
    path: /users/external/verify
    method: POST
    data_selector: payload
    params: {}
- name: delete_domain
  endpoint:
    path: /domains/{domain-id}
    method: DELETE
    data_selector: payload
    params: {}
- name: get_domains
  endpoint:
    path: /domains
    method: GET
    data_selector: payload
    params: {}
- name: get_domain_clusters
  endpoint:
    path: /domains/{domain-id}/clusters
    method: GET
    data_selector: payload
    params: {}
- name: create_kms_config
  endpoint:
    path: /encryptions/tde/kms/{kms-id}/cfg
    method: POST
    data_selector: payload
    params: {}
- name: verify_external_user
  endpoint:
    path: /users/external/verify
    method: POST
    data_selector: payload
    params: {}
- name: encryptions_tde_kms
  endpoint:
    path: /encryptions/tde/kms
    method: POST
    data_selector: payload
    params: {}
- name: verify_external_user
  endpoint:
    path: /era/v0.9/users/external/verify
    method: POST
    data_selector: records
- name: add_maintenance_task
  endpoint:
    path: /era/v0.9/maintenance/tasks
    method: POST
    data_selector: records
- name: add_vlan
  endpoint:
    path: /era/v0.9/resources/networks
    method: POST
    data_selector: records
- name: delete_ca_certificate
  endpoint:
    path: /era/v0.9/resources/certs/{id}
    method: DELETE
    data_selector: records
- name: delete_network
  endpoint:
    path: /era/v0.9/resources/networks/{vlan_id}
    method: DELETE
    data_selector: records
- name: users_external_verify
  endpoint:
    path: /resources/users/external/verify
    method: POST
    data_selector: string
    params: {}
- name: operations
  endpoint:
    path: /operations
    method: GET
    data_selector: string
    params: {}
- name: operations_short_info
  endpoint:
    path: /operations/short-info
    method: GET
    data_selector: string
    params: {}
- name: resources_networks_validate_gateway
  endpoint:
    path: /resources/networks/validate-gateway
    method: GET
    data_selector: string
    params: {}
- name: resources_networks_ip_pool
  endpoint:
    path: /resources/networks/{vlan_id}/ip-pool
    method: DELETE
    data_selector: string
    params: {}
- name: resources_certs
  endpoint:
    path: /resources/certs
    method: GET
    data_selector: string
    params: {}
- name: verify_external_user
  endpoint:
    path: /users/external/verify
    method: POST
    data_selector: string
    params: {}
- name: profiles
  endpoint:
    path: /profiles
    method: GET
    data_selector: string
    params: {}
- name: verify_external_user
  endpoint:
    path: /users/external/verify
    method: POST
    data_selector: string
- name: create_sla
  endpoint:
    path: /slas
    method: POST
    data_selector: string
- name: get_slas
  endpoint:
    path: /slas
    method: GET
    data_selector: string
- name: get_sla
  endpoint:
    path: /slas/{sla_id}
    method: GET
    data_selector: string
- name: delete_sla
  endpoint:
    path: /slas/{sla_id}
    method: DELETE
    data_selector: string
- name: verify_external_user
  endpoint:
    path: /users/external/verify
    method: POST
    data_selector: string
    params: {}
- name: get_snapshots
  endpoint:
    path: /snapshots
    method: GET
    data_selector: string
    params: {}
- name: get_storage_overview
  endpoint:
    path: /storage/overview
    method: GET
    data_selector: string
    params: {}
- name: get_storage_trend
  endpoint:
    path: /storage/clusters/{clusterId}/trend
    method: GET
    data_selector: string
    params: {}
- name: storage_resources
  endpoint:
    path: /storage-resources
    method: GET
    data_selector: records
    params: {}
- name: verify_external_user
  endpoint:
    path: /users/external/verify
    method: POST
    data_selector: records
    params: {}
- name: deregister_storage_resource
  endpoint:
    path: /storage-resources/{storage-resource-id}
    method: DELETE
    data_selector: records
    params: {}
- name: verify_external_user
  endpoint:
    path: /era/v0.9/users/external/verify
    method: POST
    data_selector: application/json
- name: storage_resources_provision
  endpoint:
    path: /era/v0.9/storage-resources/provision
    method: POST
    data_selector: application/json
- name: tags
  endpoint:
    path: /era/v0.9/tags
    method: POST
    data_selector: application/json
- name: verify_external_user
  endpoint:
    path: /users/external/verify
    method: POST
    data_selector: string
    params: {}
- name: create_clone
  endpoint:
    path: /tms/{timemachine_id}/clones
    method: POST
    data_selector: string
    params: {}
- name: delete_snapshot
  endpoint:
    path: /snapshots/{snapshot_id}
    method: DELETE
    data_selector: string
    params: {}
- name: get_candidate_dbservers
  endpoint:
    path: /tms/{timemachine_id}/candidate-dbservers
    method: GET
    data_selector: string
    params: {}
- name: verify_external_user
  endpoint:
    path: /users/external/verify
    method: POST
    data_selector: null
    params: {}
- name: tms
  endpoint:
    path: /tms
    method: GET
    data_selector: null
    params: {}
- name: tms_health_summary
  endpoint:
    path: /tms/health/summary
    method: GET
    data_selector: null
    params: {}
- name: tms_clones
  endpoint:
    path: /tms/{timemachine_id}/clones
    method: GET
    data_selector: null
    params: {}
- name: tms_snapshots
  endpoint:
    path: /tms/{timemachine_id}/snapshots
    method: GET
    data_selector: null
    params: {}
- name: verify_external_user
  endpoint:
    path: /era/v0.9/users/external/verify
    method: POST
    data_selector: string
    params: {}
- name: create_user
  endpoint:
    path: /era/v0.9/users
    method: POST
    data_selector: string
    params: {}
- name: delete_user
  endpoint:
    path: /era/v0.9/users/{user_id}
    method: DELETE
    data_selector: string
    params: {}
- name: verify_external_user
  endpoint:
    path: /users/external/verify
    method: POST
    data_selector: default
- name: get_users
  endpoint:
    path: /users
    method: GET
    data_selector: default
- name: get_user_details
  endpoint:
    path: /users/{user_id}
    method: GET
    data_selector: default
- name: update_user
  endpoint:
    path: /users/{user_id}
    method: PUT
    data_selector: default
- name: models
  endpoint:
    path: /v1/models
    method: GET
    data_selector: data
- name: embeddings
  endpoint:
    path: /v1/embeddings
    method: POST
    data_selector: data
- name: images
  endpoint:
    path: /v1/images/generations
    method: POST
    data_selector: data
- name: rerank
  endpoint:
    path: /v1/rerank
    method: POST
    data_selector: data
- name: chat completions
  endpoint:
    path: /v1/chat/completions
    method: POST
    data_selector: data
- name: access_control_policy
  endpoint:
    path: /api/nutanix/v3/access_control_policies
    method: POST
    data_selector: spec
    params: {}
- name: vms
  endpoint:
    path: /api/nutanix/v3/vms/list
    method: POST
    data_selector: kind
    params: {}
- name: access_control_policy
  endpoint:
    path: /access_control_policies/{uuid}
    method: DELETE
    data_selector: string
    params: {}
- name: access_control_policy
  endpoint:
    path: /access_control_policies/{uuid}
    method: GET
- name: access_control_policy_list
  endpoint:
    path: /access_control_policies/list
    method: POST
- name: address_groups_list
  endpoint:
    path: /address_groups/list
    method: POST
    data_selector: records
    params:
      kind: address_group
      length: 1
      offset: 0
- name: address_group
  endpoint:
    path: /address_groups
    method: POST
    data_selector: string
- name: address_group
  endpoint:
    path: /address_groups/{uuid}
    method: GET
- name: update_address_group
  endpoint:
    path: /address_groups/{uuid}
    method: PUT
- name: create_alert
  endpoint:
    path: /alerts/notify
    method: POST
    data_selector: ''
    params: {}
- name: update_scenario
  endpoint:
    path: /address_groups/{uuid}
    method: PUT
    data_selector: ''
    params: {}
- name: alert
  endpoint:
    path: /alerts/{uuid}
    method: GET
    data_selector: records
    params: {}
- name: update_scenario
  endpoint:
    path: /alerts/action/{action}
    method: POST
    data_selector: application/json
- name: get_alerts_list
  endpoint:
    path: /alerts/list
    method: POST
    data_selector: application/json
- name: audit
  endpoint:
    path: /audits/{uuid}
    method: GET
    data_selector: records
    params:
      uuid: string
- name: update_audit
  endpoint:
    path: /audits/list
    method: POST
    data_selector: records
- name: batch
  endpoint:
    path: /batch
    method: POST
    data_selector: api_request_list
- name: blackout
  endpoint:
    path: /blackouts
    method: POST
    data_selector: spec
    params: {}
- name: update_blackout
  endpoint:
    path: /blackouts/{uuid}
    method: DELETE
    data_selector: uuid
    params: {}
- name: blackout_list
  endpoint:
    path: /blackouts/list
    method: POST
    data_selector: blackouts
- name: blackout
  endpoint:
    path: /blackouts/{uuid}
    method: put
    data_selector: string
    params: {}
- name: category
  endpoint:
    path: /api/nutanix/v3/categories/{name}
    method: PUT
    data_selector: category
    params: {}
- name: delete_category
  endpoint:
    path: /delete/categories/{name}
    method: DELETE
- name: update_scenario
  endpoint:
    path: /update/scenario
    method: POST
    data_selector: scenario body
- name: get_category
  endpoint:
    path: /get/categories/{name}
    method: GET
    data_selector: response
- name: update_scenario
  endpoint:
    path: /categories/{name}/{value}
    method: POST
    data_selector: scenario body
- name: list
  endpoint:
    path: /categories/list
    method: POST
    data_selector: records
- name: update_scenario
  endpoint:
    path: /clusters
    method: POST
    data_selector: scenario
    params: {}
- name: get_existing_cluster
  endpoint:
    path: /clusters/{uuid}
    method: GET
    data_selector: cluster
    params: {}
- name: list_clusters
  endpoint:
    path: /clusters/list
    method: POST
    data_selector: clusters
- name: update_cluster
  endpoint:
    path: /clusters/{uuid}
    method: PUT
    data_selector: cluster
- name: directory_service
  endpoint:
    path: /post/directory_services
    method: POST
    data_selector: spec
- name: directory_service
  endpoint:
    path: /directory_services/{uuid}
    method: GET
    data_selector: records
    params: {}
- name: update_scenario
  endpoint:
    path: /directory_services/{uuid}
    method: UPDATE
    data_selector: records
    params: {}
- name: directory_service
  endpoint:
    path: /directory_services
    method: POST
    data_selector: new_cluster
    params: {}
- name: directory_service
  endpoint:
    path: /directory_services/{uuid}
    method: PUT
    data_selector: scenario body
    params: {}
- name: directory_service_search
  endpoint:
    path: /directory_services/{uuid}/search
    method: POST
    data_selector: scenario body
    params: {}
- name: floating_ips
  endpoint:
    path: /floating_ips
    method: POST
    data_selector: string
- name: floating_ip_update
  endpoint:
    path: /floating_ips/{uuid}
    method: DELETE
    data_selector: string
- name: floating_ips
  endpoint:
    path: /floating_ips/{uuid}
    method: GET
    data_selector: records
    params:
      uuid: string
- name: update_floating_ip
  endpoint:
    path: /{uuid}
    method: PUT
    data_selector: application/json
    params: {}
- name: update_scenario
  endpoint:
    path: /hosts
    method: POST
    data_selector: string
- name: get_existing_host
  endpoint:
    path: /hosts/{uuid}
    method: GET
    data_selector: string
- name: create_idempotence_identifier
  endpoint:
    path: /post/idempotence_identifiers
    method: POST
    data_selector: idempotence_identifier
    params: {}
- name: update_scenario
  endpoint:
    path: /idempotence_identifiers/{client_identifier}
    method: PUT
    data_selector: scenario body
    params:
      uuid: string
- name: get_scenario
  endpoint:
    path: /idempotence_identifiers/{client_identifier}
    method: GET
    data_selector: scenario body
    params:
      uuid: string
- name: identity_provider
  endpoint:
    path: /identity_providers
    method: POST
    data_selector: identity_provider
    params: {}
- name: identity_providers
  endpoint:
    path: /identity_providers/{uuid}
    method: DELETE
    data_selector: ''
    params:
      uuid: string <UUID> ^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}...
- name: sp_metadata
  endpoint:
    path: /identity_providers/sp_metadata
    method: GET
    data_selector: ''
    params: {}
- name: identity_provider
  endpoint:
    path: /identity_providers/{uuid}
    method: GET
    data_selector: records
    params:
      uuid: string
- name: update_identity_provider
  endpoint:
    path: /identity_providers/{uuid}
    method: PUT
    data_selector: response
    params: {}
- name: list_identity_providers
  endpoint:
    path: /identity_providers/list
    method: POST
    data_selector: response
    params: {}
- name: create_image_placement_policy
  endpoint:
    path: /images/placement_policies
    method: POST
    data_selector: spec
    params: {}
- name: update_scenario
  endpoint:
    path: /images/placement_policies/{uuid}
    method: PUT
    data_selector: scenario
    params:
      uuid: required
- name: delete_image_placement_policy
  endpoint:
    path: /images/placement_policies/{uuid}
    method: DELETE
    data_selector: ''
    params:
      uuid: required
- name: images_placement_policies
  endpoint:
    path: /images/placement_policies/{uuid}
    method: GET
    data_selector: string
- name: images_placement_policies_list
  endpoint:
    path: /images/placement_policies/list
    method: POST
    data_selector: string
- name: update_image_placement_policy
  endpoint:
    path: /images/placement_policies/{uuid}
    method: PUT
    data_selector: string
- name: create_image
  endpoint:
    path: /images
    method: POST
    data_selector: spec
- name: update_image
  endpoint:
    path: /images/{uuid}
    method: PUT
    data_selector: scenario
- name: delete_image
  endpoint:
    path: /images/{uuid}
    method: DELETE
- name: image
  endpoint:
    path: /images/{uuid}
    method: GET
    data_selector: ''
    params: {}
- name: image_list
  endpoint:
    path: /images/list
    method: POST
    data_selector: uuid
    params: {}
- name: image_file
  endpoint:
    path: /images/{uuid}/file
    method: GET
    data_selector: uuid
    params: {}
- name: update_image
  endpoint:
    path: /images/{uuid}
    method: PUT
    data_selector: string
    params:
      uuid: string <UUID>
- name: network_function_chain
  endpoint:
    path: /network_function_chains
    method: POST
    data_selector: metadata
- name: update_scenario
  endpoint:
    path: /images/{uuid}/file
    method: PUT
- name: network_function_chain
  endpoint:
    path: /delete/network_function_chains/{uuid}
    method: DELETE
- name: network_function_chains
  endpoint:
    path: /network_function_chains/{uuid}
    method: GET
- name: network_function_chains_list
  endpoint:
    path: /network_function_chains/list
    method: POST
- name: network_security_rule
  endpoint:
    path: /network_security_rules
    method: POST
    data_selector: spec
    params: {}
- name: network_security_rule
  endpoint:
    path: /network_security_rules/{uuid}
    method: DELETE
    data_selector: string
    params:
      uuid: string <UUID>
- name: network_security_rule
  endpoint:
    path: /network_security_rules/{uuid}
    method: GET
    data_selector: records
    params: {}
- name: export_network_security_rules
  endpoint:
    path: /network_security_rules/export
    method: GET
    data_selector: records
    params: {}
- name: network_security_rules_import
  endpoint:
    path: /network_security_rules/import/apply
    method: POST
    data_selector: string
- name: network_security_rules_list
  endpoint:
    path: /network_security_rules/list
    method: POST
    data_selector: string
- name: update_scenario
  endpoint:
    path: /network_security_rules/{uuid}
    method: PUT
    data_selector: scenario body
    params:
      uuid: string <UUID> ^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}...
- name: ngt_policy
  endpoint:
    path: /ngt_policies
    method: POST
    data_selector: spec
- name: ngt_policies
  endpoint:
    path: /ngt_policies/{uuid}
    method: GET
    data_selector: records
    params:
      uuid: string <UUID>
- name: update_scenario
  endpoint:
    path: /ngt_policies/{uuid}
    method: PUT
    data_selector: records
    params:
      uuid: string <UUID>
- name: ngt_policy
  endpoint:
    path: /ngt_policies/list
    method: POST
    data_selector: records
- name: ngt_policies
  endpoint:
    path: /ngt_policies/{uuid}
    method: PUT
- name: concatenate_ovas_chunks
  endpoint:
    path: /ovas/{uuid}/chunks/concatenate
    method: POST
- name: update_scenario
  endpoint:
    path: /ovas
    method: POST
    data_selector: string
- name: delete_scenario
  endpoint:
    path: /ovas/{uuid}
    method: DELETE
    data_selector: string
- name: ovas
  endpoint:
    path: /ovas/list
    method: POST
    data_selector: none
    params: {}
- name: ovas
  endpoint:
    path: /ovas/{uuid}
    method: GET
    data_selector: string
- name: disks
  endpoint:
    path: /ovas/{uuid}/disks/{disk_id}
    method: GET
    data_selector: string
- name: ovas
  endpoint:
    path: /ovas/{uuid}/file
    method: GET
    data_selector: records
    params: {}
- name: ovas_update
  endpoint:
    path: /ovas/{uuid}/vm_spec
    method: GET
    data_selector: records
    params: {}
- name: disks
  endpoint:
    path: /ovas/{uuid}/disks
    method: GET
- name: update_scenario
  endpoint:
    path: /ovas/{uuid}
    method: PUT
    data_selector: string
    params: {}
- name: upload_file_chunk
  endpoint:
    path: /ovas/{uuid}/chunks
    method: PUT
    data_selector: string
    params: {}
- name: get_permission
  endpoint:
    path: /permissions/{uuid}
    method: GET
    params: {}
- name: update_scenario
  endpoint:
    path: /ovas/{uuid}/chunks
    method: POST
    params: {}
- name: permissions_list
  endpoint:
    path: /permissions/list
    method: POST
    data_selector: string
- name: create_project
  endpoint:
    path: /projects
    method: POST
    data_selector: spec
    params: {}
- name: delete_project
  endpoint:
    path: /projects/{uuid}
    method: DELETE
    data_selector: ''
    params: {}
- name: update_project
  endpoint:
    path: /projects/{uuid}
    method: PUT
    data_selector: ''
    params: {}
- name: projects
  endpoint:
    path: /{uuid}
    method: GET
    data_selector: ''
    params: {}
- name: projects_list
  endpoint:
    path: /list
    method: POST
    data_selector: ''
    params: {}
- name: update_project
  endpoint:
    path: /projects/{uuid}
    method: PUT
    data_selector: application/json
    params:
      uuid: string
- name: protection_rule
  endpoint:
    path: /protection_rules
    method: POST
    data_selector: protection_rule
    params: {}
- name: delete_protection_rule
  endpoint:
    path: /protection_rules/{uuid}
    method: DELETE
    data_selector: protection_rule
    params: {}
- name: protection_rules
  endpoint:
    path: /protection_rules/{uuid}/query_entities
    method: GET
    data_selector: records
    params:
      uuid: string <UUID>
- name: update_scenario
  endpoint:
    path: /protection_rules/{uuid}
    method: POST
    data_selector: records
    params:
      uuid: string <UUID>
- name: protection_rules_list
  endpoint:
    path: /protection_rules/list
    method: POST
    data_selector: string
- name: protection_rule
  endpoint:
    path: /protection_rules/{uuid}
    method: PUT
    data_selector: response
    params: {}
- name: process_protection_rule
  endpoint:
    path: /protection_rules/{uuid}/process
    method: POST
    data_selector: response
    params: {}
- name: recovery_plan_job
  endpoint:
    path: /recovery_plan_jobs
    method: POST
    data_selector: ''
    params: {}
- name: update_recovery_plan_job
  endpoint:
    path: /recovery_plan_jobs/{uuid}
    method: PUT
    data_selector: ''
    params: {}
- name: delete_recovery_plan_job
  endpoint:
    path: /recovery_plan_jobs/{uuid}
    method: DELETE
    data_selector: ''
    params: {}
- name: recovery_plan_job
  endpoint:
    path: /recovery_plan_jobs/{uuid}
    method: GET
    data_selector: records
    params:
      uuid: string
- name: recovery_plan_jobs
  endpoint:
    path: /recovery_plan_jobs/{uuid}/{status}
    method: GET
    data_selector: records
    params: {}
- name: list_recovery_plan_jobs
  endpoint:
    path: /recovery_plan_jobs/list
    method: POST
    data_selector: records
    params: {}
- name: recovery_plan_jobs
  endpoint:
    path: /recovery_plan_jobs/{uuid}/{action}
    method: POST
    data_selector: spec
    params: {}
- name: recovery_plans
  endpoint:
    path: /recovery_plans
    method: POST
    data_selector: metadata
    params: {}
- name: recovery_plan
  endpoint:
    path: /recovery_plans/{uuid}
    method: DELETE
    data_selector: string
    params:
      uuid: string <UUID>
- name: recovery_plan_entities
  endpoint:
    path: /recovery_plans/{uuid}/entities
    method: GET
    data_selector: records
    params: {}
- name: recovery_plan
  endpoint:
    path: /recovery_plans/{uuid}
    method: GET
    data_selector: records
    params: {}
- name: recovery_plans_list
  endpoint:
    path: /recovery_plans/list
    method: POST
    data_selector: vendor_list
    params: {}
- name: update_scenario
  endpoint:
    path: /recovery_plans/{uuid}
    method: PUT
    data_selector: uuid
    params:
      uuid: string <UUID>
- name: remote_syslog_modules
  endpoint:
    path: /remote_syslog_modules
    method: POST
    data_selector: spec
    params: {}
- name: remote_syslog_module
  endpoint:
    path: /remote_syslog_modules/{uuid}
    method: GET
    data_selector: string
    params: {}
- name: list
  endpoint:
    path: /remote_syslog_modules/list
    method: POST
    data_selector: string
    params: {}
- name: remote_syslog_servers
  endpoint:
    path: /remote_syslog_servers
    method: POST
    data_selector: spec
    params: {}
- name: remote_syslog_modules
  endpoint:
    path: /remote_syslog_modules/{uuid}
    method: PUT
    data_selector: spec
    params: {}
- name: remote_syslog_server
  endpoint:
    path: /remote_syslog_servers/{uuid}
    method: GET
    data_selector: default
    params:
      uuid: string <UUID> ^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}...
- name: list
  endpoint:
    path: /remote_syslog_servers/list
    method: POST
    data_selector: string
- name: update_remote_syslog_server
  endpoint:
    path: /remote_syslog_servers/{uuid}
    method: PUT
    data_selector: application/json
    params: {}
- name: report_instance
  endpoint:
    path: /report_instances
    method: POST
    data_selector: spec
- name: report_config
  endpoint:
    path: /report_configs
    method: POST
    data_selector: spec
- name: report_configs
  endpoint:
    path: /report_configs/{uuid}
    method: DELETE
- name: report_instances
  endpoint:
    path: /report_instances/{uuid}
    method: DELETE
    data_selector: response
- name: download_report
  endpoint:
    path: /reports/download/{type}/{uuid}
    method: GET
    data_selector: response
- name: report_configs
  endpoint:
    path: /report_configs/{uuid}
    method: GET
    data_selector: string
    params: {}
- name: notify
  endpoint:
    path: /reports/notify
    method: POST
    data_selector: string
    params: {}
- name: report_instances
  endpoint:
    path: /report_instances/list
    method: POST
    data_selector: default
    params: {}
- name: report_instance
  endpoint:
    path: /report_instances/{uuid}
    method: GET
    data_selector: default
    params: {}
- name: report_configs
  endpoint:
    path: /report_configs/list
    method: POST
    data_selector: string
- name: common_report_configs
  endpoint:
    path: /common_report_configs/{uuid}
    method: PUT
    data_selector: scenario body
    params: {}
- name: report_configs
  endpoint:
    path: /report_configs/{uuid}
    method: PUT
    data_selector: scenario body
    params: {}
- name: update_scenario
  endpoint:
    path: /reports/upload/{type}
    method: POST
    data_selector: new_cluster
    params: {}
- name: create_role
  endpoint:
    path: /roles
    method: POST
    data_selector: spec
    params: {}
- name: delete_role
  endpoint:
    path: /roles/{uuid}
    method: DELETE
    params:
      uuid: string
- name: roles
  endpoint:
    path: /roles/list
    method: POST
    data_selector: roles
- name: update_scenario
  endpoint:
    path: /roles/{uuid}
    method: GET
    data_selector: scenario
- name: clear_routing_policy_counters
  endpoint:
    path: /vpcs/{uuid}/routing_policies/reset_counters
    method: POST
    data_selector: response
    params: {}
- name: update_scenario
  endpoint:
    path: /roles/{uuid}
    method: PUT
    data_selector: response
    params: {}
- name: routing_policy
  endpoint:
    path: /routing_policies/{uuid}/reset_counters
    method: POST
    data_selector: string
    params:
      uuid: string
- name: routing_policy
  endpoint:
    path: /routing_policies
    method: DELETE
    params:
      uuid: string
- name: routing_policy
  endpoint:
    path: /routing_policies/{uuid}
    method: GET
- name: routing_policy_list
  endpoint:
    path: /routing_policies/list
    method: POST
- name: routing_policy
  endpoint:
    path: /routing_policies/{uuid}
    method: PUT
    data_selector: string
    params:
      uuid: string
- name: create_service_group
  endpoint:
    path: /service_groups
    method: POST
    data_selector: service_group
    params: {}
- name: delete_service_group
  endpoint:
    path: /service_groups/{uuid}
    method: DELETE
    data_selector: service_group
    params: {}
- name: service_group
  endpoint:
    path: /service_groups/{uuid}
    method: GET
    data_selector: records
    params: {}
- name: service_group_list
  endpoint:
    path: /service_groups/list
    method: POST
    data_selector: records
    params: {}
- name: service_group
  endpoint:
    path: /service_groups/{uuid}
    method: PUT
    data_selector: string
    params: {}
- name: storage_policy_counts
  endpoint:
    path: /storage_policies/compute_counts
    method: POST
    data_selector: counts
- name: update_scenario
  endpoint:
    path: /storage_policies
    method: POST
    data_selector: scenario
- name: storage_policy
  endpoint:
    path: /storage_policies/{uuid}
    method: GET
    data_selector: string
- name: update_scenario
  endpoint:
    path: /storage_policies/{uuid}
    method: PUT
    data_selector: string
- name: storage_policy_list
  endpoint:
    path: /storage_policies/list
    method: POST
    data_selector: string
    params: {}
- name: storage_policies
  endpoint:
    path: /storage_policies/{uuid}
    method: PUT
    data_selector: application/json
    params: {}
- name: subnets
  endpoint:
    path: /subnets
    method: POST
    data_selector: application/json
    params: {}
- name: subnet
  endpoint:
    path: /subnets/{uuid}
    method: GET
    data_selector: subnet
    params:
      uuid: string <UUID>
- name: update_scenario
  endpoint:
    path: /subnets/{uuid}
    method: PUT
    data_selector: scenario
    params:
      uuid: string <UUID>
- name: delete_subnet
  endpoint:
    path: /subnets/{uuid}
    method: DELETE
    data_selector: response
    params:
      uuid: string <UUID>
- name: subnets_list
  endpoint:
    path: /subnets/list
    method: POST
    data_selector: subnets
    params: {}
- name: update_scenario
  endpoint:
    path: /subnets/{uuid}
    method: PUT
    data_selector: scenario body
    params:
      uuid: string
- name: get_existing_task
  endpoint:
    path: /tasks/{uuid}
    method: GET
    data_selector: task data
    params:
      uuid: string
- name: user_group
  endpoint:
    path: /user_groups
    method: POST
    data_selector: user_group
    params: {}
- name: update_scenario
  endpoint:
    path: /tasks/{uuid}/abort
    method: POST
    data_selector: scenario
    params:
      uuid: string <UUID>
- name: user_group
  endpoint:
    path: /user_groups/{uuid}
    method: DELETE
    data_selector: string
    params:
      uuid: string
- name: user_groups
  endpoint:
    path: /user_groups/{uuid}
    method: GET
- name: user_groups_list
  endpoint:
    path: /user_groups/list
    method: POST
- name: create_user
  endpoint:
    path: /users
    method: POST
    data_selector: spec
    params: {}
- name: update_scenario
  endpoint:
    path: /users/{uuid}
    method: PUT
    data_selector: spec
    params:
      uuid: string <UUID> ^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}...
- name: delete_user
  endpoint:
    path: /users/{uuid}
    method: DELETE
    data_selector: uuid
    params:
      uuid: string <UUID> ^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}...
- name: users
  endpoint:
    path: /users/{uuid}
    method: GET
    data_selector: records
    params: {}
- name: list
  endpoint:
    path: /users/list
    method: POST
    data_selector: scenario body
- name: me
  endpoint:
    path: /users/me
    method: GET
    data_selector: response
- name: users_project_usage_summary
  endpoint:
    path: /users/{uuid}/project_usage_summary
    method: GET
- name: create_vpc
  endpoint:
    path: /vpcs
    method: POST
- name: delete_vpc
  endpoint:
    path: /delete/vpcs/{uuid}
    method: DELETE
- name: vpcs
  endpoint:
    path: /list
    method: post
- name: vpcs_uuid
  endpoint:
    path: /{uuid}
    method: get
- name: update_scenario
  endpoint:
    path: /vpcs/{uuid}
    method: PUT
    data_selector: string
    params:
      uuid: string <UUID>
- name: delete_policy
  endpoint:
    path: /vm_host_affinity_legacy_policies/{uuid}
    method: DELETE
    data_selector: string
    params:
      uuid: string <UUID>
- name: vm_host_affinity_legacy_policies
  endpoint:
    path: /vm_host_affinity_legacy_policies/list
    method: POST
    data_selector: string
    params: {}
- name: create_vm_host_affinity_policy
  endpoint:
    path: /vm_host_affinity_policies
    method: post
    data_selector: config
- name: delete_vm_host_affinity_policy
  endpoint:
    path: /vm_host_affinity_policies/{uuid}
    method: delete
- name: vm_host_affinity_policy
  endpoint:
    path: /vm_host_affinity_policies/{uuid}
    method: GET
    data_selector: records
    params:
      uuid: string
- name: vm_host_affinity_policy_list
  endpoint:
    path: /vm_host_affinity_policies/list
    method: POST
    data_selector: records
    params: {}
- name: vms_list
  endpoint:
    path: /vm_host_affinity_policies/{uuid}/vms_list
    method: POST
    data_selector: workload_list
    params:
      uuid: string
- name: update_vm_host_affinity_policy
  endpoint:
    path: /vm_host_affinity_policies/{uuid}
    method: PUT
    data_selector: application/json
    params: {}
- name: re_enforce_vm_host_affinity_policy
  endpoint:
    path: /vm_host_affinity_policies/{uuid}/re_enforce
    method: POST
    data_selector: application/json
    params: {}
- name: update_scenario
  endpoint:
    path: /vms/{uuid}
    method: POST
    data_selector: scenario body
    params:
      uuid: string
- name: clone_vm
  endpoint:
    path: /vms/{uuid}/clone
    method: POST
    data_selector: metadata
    params:
      uuid: string
- name: acpi_reboot
  endpoint:
    path: /vms/{uuid}/acpi_reboot
    method: POST
    data_selector: string
- name: guest_reboot
  endpoint:
    path: /vms/{uuid}/guest_reboot
    method: POST
    data_selector: string
    params: {}
- name: acpi_shutdown
  endpoint:
    path: /vms/{uuid}/acpi_shutdown
    method: POST
    data_selector: string
    params: {}
- name: guest_shutdown
  endpoint:
    path: /vms/{uuid}/guest_shutdown
    method: POST
- name: power_cycle
  endpoint:
    path: /vms/{uuid}/power_cycle
    method: POST
- name: vm_reset
  endpoint:
    path: /vms/{uuid}/reset
    method: POST
    data_selector: string
    params:
      uuid: string
- name: vms
  endpoint:
    path: /vms/{uuid}/export
    method: POST
    data_selector: payload
    params: {}
- name: vms_delete
  endpoint:
    path: /vms/{uuid}
    method: DELETE
    data_selector: payload
    params: {}
- name: list
  endpoint:
    path: /list
    method: POST
    data_selector: records
- name: get
  endpoint:
    path: /{uuid}
    method: GET
- name: migrate_disks
  endpoint:
    path: /vms/{uuid}/migrate_disks
    method: POST
    data_selector: string
    params: {}
- name: pause_replication
  endpoint:
    path: /pause_replication
    method: POST
- name: release_ip
  endpoint:
    path: /release_ip
    method: PUT
- name: update_scenario
  endpoint:
    path: /vms/{uuid}/update_ip
    method: PUT
    data_selector: string
    params:
      uuid: string <UUID> ^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}...
- name: resume_replication
  endpoint:
    path: /vms/{uuid}/resume_replication
    method: POST
    data_selector: string
    params:
      uuid: string <UUID> ^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}...
- name: update_vm
  endpoint:
    path: /{uuid}
    method: PUT
    data_selector: string
    params:
      uuid: string
- name: vpc_route_table
  endpoint:
    path: /vpcs/{uuid}/route_tables
    method: GET
- name: update_vpc_route_table
  endpoint:
    path: /vpcs/{uuid}/route_tables
    method: PUT
- name: vpn_connection
  endpoint:
    path: /vpn_connections
    method: POST
    data_selector: spec
    params: {}
- name: update_vpn_connection
  endpoint:
    path: /vpn_connections/{uuid}
    method: DELETE
    data_selector: ''
    params: {}
- name: vendor_config
  endpoint:
    path: /vpn_connections/{uuid}/vendor_config/{name}
    method: GET
    data_selector: data
    params:
      uuid: string
- name: vpn_connection
  endpoint:
    path: /api/nutanix/v3/vpn_connections/{uuid}
    method: GET
    data_selector: records
- name: vendor_config
  endpoint:
    path: /api/nutanix/v3/vpn_connections/{uuid}/vendor_config/{name}
    method: GET
    data_selector: records
- name: vpn_connection
  endpoint:
    path: /list
    method: POST
    data_selector: string
    params: {}
- name: update_vpn_connection
  endpoint:
    path: /{uuid}
    method: PUT
    data_selector: string
    params: {}
- name: vpn_gateway
  endpoint:
    path: /vpn_gateways
    method: POST
    data_selector: spec
- name: vpn_gateways
  endpoint:
    path: /vpn_gateways/{uuid}
    method: DELETE
    data_selector: records
    params:
      uuid: string
- name: vpn_gateways
  endpoint:
    path: /vpn_gateways/{uuid}
    method: GET
    data_selector: response
    params: {}
- name: vpn_gateways_list
  endpoint:
    path: /vpn_gateways/list
    method: POST
    data_selector: response
    params: {}
- name: scenario
  endpoint:
    path: /capacity_planning/scenarios
    method: post
    data_selector: string
- name: update_scenario
  endpoint:
    path: /vpn_gateways/{uuid}
    method: put
    data_selector: string
- name: scenario
  endpoint:
    path: /capacity_planning/scenarios/{uuid}
    method: DELETE
    data_selector: scenario body
    params:
      uuid: string
- name: reports
  endpoint:
    path: /reports
    method: POST
    data_selector: scenario body
- name: recommendations
  endpoint:
    path: /recommendations/{task_uuid}
    method: GET
    data_selector: recommendation body
- name: capacity_planning_reports
  endpoint:
    path: /capacity_planning/reports/{task_uuid}
    method: GET
- name: capacity_planning_scenarios
  endpoint:
    path: /capacity_planning/scenarios/{uuid}
    method: GET
- name: scenarios
  endpoint:
    path: /capacity_planning/scenarios
    method: GET
    data_selector: records
    params: {}
- name: recommendations
  endpoint:
    path: /capacity_planning/recommendations
    method: POST
    data_selector: scenario body
- name: scenarios
  endpoint:
    path: /capacity_planning/scenarios/{uuid}
    method: PUT
    data_selector: scenario body
- name: update_scenario
  endpoint:
    path: /update_scenario
    method: POST
    data_selector: scenario
    params:
      uuid: string
- name: acknowledge_alert
  endpoint:
    path: /alerts/{id}/acknowledge
    method: POST
- name: unprotect_vstore
  endpoint:
    path: /vstores/{uuid}/unprotect
    method: POST
- name: add_auth_types
  endpoint:
    path: /authconfig/add_auth_types
    method: POST
- name: directories
  endpoint:
    path: /authconfig/directories
    method: POST
- name: delete_authconfig
  endpoint:
    path: /authconfig
    method: DELETE
- name: unprotect_vstore
  endpoint:
    path: /vstores/{uuid}/unprotect
    method: POST
    data_selector: response
    params: {}
- name: client_auth
  endpoint:
    path: /authconfig/client_auth
    method: POST
    data_selector: response
    params: {}
- name: directories
  endpoint:
    path: /authconfig/directories
    method: PUT
    data_selector: response
    params: {}
- name: auth_types
  endpoint:
    path: /authconfig/auth_types
    method: GET
    data_selector: response
    params: {}
- name: connection_status
  endpoint:
    path: /authconfig/directories/connection_status
    method: POST
    data_selector: response
    params: {}
- name: auth_types
  endpoint:
    path: /authconfig/auth_types
    method: PUT
- name: client_auth
  endpoint:
    path: /authconfig/client_auth
    method: PUT
- name: vstores_unprotect
  endpoint:
    path: /vstores/{uuid}/unprotect
    method: POST
- name: cloud_credentials
  endpoint:
    path: /cloud/{cloud_type}/credentials
    method: POST
- name: public_keys
  endpoint:
    path: /cluster/public_keys
    method: POST
- name: name_servers
  endpoint:
    path: /cluster/name_servers
    method: POST
- name: nfs_whitelist
  endpoint:
    path: /cluster/nfs_whitelist
    method: POST
- name: name_servers
  endpoint:
    path: /cluster/name_servers
    method: GET
    data_selector: records
    params: {}
- name: ntp_servers
  endpoint:
    path: /cluster/ntp_servers
    method: POST
    data_selector: records
    params: {}
- name: metro_witness
  endpoint:
    path: /cluster/metro_witness
    method: POST
    data_selector: records
    params: {}
- name: public_keys
  endpoint:
    path: /cluster/public_keys/{name}
    method: GET
    data_selector: records
    params: {}
- name: nfs_whitelist
  endpoint:
    path: /cluster/nfs_whitelist
    method: GET
    data_selector: records
    params: {}
- name: remote_support
  endpoint:
    path: /cluster/remote_support
    method: GET
    data_selector: records
    params: {}
- name: search
  endpoint:
    path: /cluster/search
    method: GET
    data_selector: records
    params: {}
- name: stats
  endpoint:
    path: /cluster/stats
    method: GET
    data_selector: records
    params: {}
- name: get_alerts
  endpoint:
    path: /clusters/{id}/alerts
    method: GET
    data_selector: alerts
- name: get_cluster
  endpoint:
    path: /clusters/{id}
    method: GET
    data_selector: cluster
- name: get_ntp_servers
  endpoint:
    path: /cluster/ntp_servers
    method: GET
    data_selector: ntp_servers
- name: get_public_keys
  endpoint:
    path: /cluster/public_keys
    method: GET
    data_selector: public_keys
- name: get_rackable_units
  endpoint:
    path: /cluster/rackable_units
    method: GET
    data_selector: rackable_units
- name: get_smtp_security_modes
  endpoint:
    path: /cluster/smtp/security_modes
    method: GET
    data_selector: smtp_security_modes
- name: get_smtp
  endpoint:
    path: /cluster/smtp
    method: GET
    data_selector: smtp
- name: get_domain_fault_tolerance_status
  endpoint:
    path: /cluster/domain_fault_tolerance_status
    method: GET
    data_selector: domain_fault_tolerance_status
- name: get_metro_witness
  endpoint:
    path: /cluster/metro_witness
    method: GET
    data_selector: metro_witness
- name: patch_cluster
  endpoint:
    path: /cluster
    method: PATCH
    data_selector: updated_cluster
- name: put_cluster
  endpoint:
    path: /cluster
    method: PUT
    data_selector: updated_cluster
- name: clusters_alerts
  endpoint:
    path: /clusters/alerts
    method: GET
    data_selector: ''
    params: {}
- name: clusters
  endpoint:
    path: /clusters
    method: GET
    data_selector: ''
    params: {}
- name: vstores_unprotect
  endpoint:
    path: /vstores/{uuid}/unprotect
    method: POST
    data_selector: ''
    params: {}
- name: data_at_rest_encryption_download_encryption_key
  endpoint:
    path: /data_at_rest_encryption/download_encryption_key
    method: POST
    data_selector: ''
    params: {}
- name: data_at_rest_encryption_enable
  endpoint:
    path: /data_at_rest_encryption/enable
    method: POST
    data_selector: ''
    params: {}
- name: data_at_rest_encryption_recent_certificate_test_results
  endpoint:
    path: /data_at_rest_encryption/recent_certificate_test_results
    method: GET
    data_selector: ''
    params: {}
- name: data_at_rest_encryption_certificates_svm_certificates_multi_file
  endpoint:
    path: /data_at_rest_encryption_certificates/svm_certificates/multi_file
    method: POST
    data_selector: ''
    params: {}
- name: data_at_rest_encryption_certificates_ca_certificates
  endpoint:
    path: /data_at_rest_encryption_certificates/ca_certificates
    method: POST
    data_selector: ''
    params: {}
- name: data_at_rest_encryption_certificates_ca_certificates_delete
  endpoint:
    path: /data_at_rest_encryption_certificates/ca_certificates/{name}
    method: DELETE
    data_selector: ''
    params: {}
- name: vstore_unprotect
  endpoint:
    path: /vstores/{uuid}/unprotect
    method: POST
    data_selector: response
    params: {}
- name: disk_get
  endpoint:
    path: /disks/{uuid}
    method: GET
    data_selector: response
    params: {}
- name: disk_alerts
  endpoint:
    path: /disks/{uuid}/alerts
    method: GET
    data_selector: response
    params: {}
- name: disk_events
  endpoint:
    path: /disks/{uuid}/events
    method: GET
    data_selector: response
    params: {}
- name: disk_stats
  endpoint:
    path: /disks/{uuid}/stats
    method: GET
    data_selector: response
    params: {}
- name: event_acknowledge
  endpoint:
    path: /events/{id}/acknowledge
    method: PUT
    data_selector: response
    params: {}
- name: health_checks
  endpoint:
    path: /health_checks
    method: GET
    data_selector: records
- name: health_check_details
  endpoint:
    path: /health_checks/{id}
    method: GET
    data_selector: records
- name: update_health_check
  endpoint:
    path: /health_checks
    method: PATCH
    data_selector: records
- name: hosts
  endpoint:
    path: /hosts
    method: GET
    data_selector: '{}'
- name: host_nics
  endpoint:
    path: /hosts/{uuid}/host_nics
    method: GET
    data_selector: '{}'
- name: host_nics_stats
  endpoint:
    path: /hosts/{uuid}/host_nics/{pnic_id}/stats
    method: GET
    data_selector: '{}'
- name: host_gpus
  endpoint:
    path: /hosts/{uuid}/host_gpus
    method: GET
    data_selector: '{}'
- name: host_gpus_stats
  endpoint:
    path: /hosts/{uuid}/host_gpus/{gpu_uuid}/stats
    method: GET
    data_selector: '{}'
- name: alerts
  endpoint:
    path: /hosts/{uuid}/alerts
    method: GET
    data_selector: '{}'
- name: events
  endpoint:
    path: /hosts/{uuid}/events
    method: GET
    data_selector: '{}'
- name: gpu_profiles
  endpoint:
    path: /hosts/gpu_profiles
    method: GET
    data_selector: '{}'
- name: unprotect_vstore
  endpoint:
    path: /vstores/{uuid}/unprotect
    method: POST
    data_selector: backedup
    params:
      uuid: required
- name: http_proxies
  endpoint:
    path: /http_proxies
    method: POST
    data_selector: backedup
    params: {}
- name: delete_http_proxy
  endpoint:
    path: /http_proxies/{name}
    method: DELETE
    data_selector: backedup
    params:
      name: required
- name: key_management_servers
  endpoint:
    path: /key_management_servers
    method: get
    data_selector: records
- name: unprotect_vstore
  endpoint:
    path: /vstores/{uuid}/unprotect
    method: post
    data_selector: response
- name: create_disk_image
  endpoint:
    path: /images
    method: post
    data_selector: response
- name: modify_iscsi_client
  endpoint:
    path: /iscsi_clients/{uuid}
    method: put
    data_selector: response
- name: unprotect_vstore
  endpoint:
    path: /vstores/{uuid}/unprotect
    method: POST
    data_selector: backedup
    params: {}
- name: blacklist_ip_addresses
  endpoint:
    path: /networks/{uuid}/blacklist_ip_addresses
    method: POST
    data_selector: backedup
    params: {}
- name: abort_replication
  endpoint:
    path: /protection_domains/{protection_domain_name}/replications/{id}
    method: DELETE
    data_selector: backedup
    params: {}
- name: activate_protection_domain
  endpoint:
    path: /protection_domains/{name}/activate
    method: POST
    data_selector: backedup
    params: {}
- name: pending_actions
  endpoint:
    path: /protection_domains/{name}/pending_actions
    method: GET
    data_selector: records
- name: oob_schedules
  endpoint:
    path: /protection_domains/{name}/oob_schedules
    method: POST
    data_selector: records
- name: schedules
  endpoint:
    path: /protection_domains/{name}/schedules
    method: POST
    data_selector: records
- name: protect_vms
  endpoint:
    path: /protection_domains/{name}/protect_vms
    method: POST
    data_selector: records
- name: deactivate
  endpoint:
    path: /protection_domains/{name}/deactivate
    method: POST
    data_selector: records
- name: failure_handling
  endpoint:
    path: /protection_domains/{pd_name}/failure_handling
    method: PUT
    data_selector: records
- name: retention_policies
  endpoint:
    path: /protection_domains/{pd_name}/schedules/{id}/retention_policies
    method: DELETE
    data_selector: records
- name: unprotect_vstore
  endpoint:
    path: /vstores/{uuid}/unprotect
    method: POST
    data_selector: records
- name: snapshots
  endpoint:
    path: /snapshots/{uuid}
    method: DELETE
    data_selector: records
- name: metro_avail_disable
  endpoint:
    path: /protection_domains/{pd_name}/metro_avail_disable
    method: POST
    data_selector: records
- name: metro_avail_enable
  endpoint:
    path: /protection_domains/{pd_name}/metro_avail_enable
    method: POST
    data_selector: records
- name: get_protection_domain
  endpoint:
    path: /protection_domains/{name}
    method: GET
    data_selector: records
- name: consistency_groups
  endpoint:
    path: /protection_domains/{name}/consistency_groups
    method: GET
    data_selector: records
- name: consistency_groups_all
  endpoint:
    path: /protection_domains/consistency_groups
    method: GET
    data_selector: records
- name: pending_actions
  endpoint:
    path: /protection_domains/pending_actions
    method: GET
    data_selector: records
- name: pending_replicas
  endpoint:
    path: /protection_domains/{name}/pending_replications
    method: GET
    data_selector: records
- name: replications
  endpoint:
    path: /protection_domains/{name}/replications
    method: GET
    data_selector: records
- name: unprotected_vms
  endpoint:
    path: /protection_domains/unprotected_vms
    method: GET
    data_selector: records
- name: status
  endpoint:
    path: /protection_domains/status
    method: GET
    data_selector: records
- name: alerts
  endpoint:
    path: /protection_domains/{name}/alerts
    method: GET
    data_selector: records
- name: events
  endpoint:
    path: /protection_domains/events
    method: GET
    data_selector: records
- name: oob_schedules
  endpoint:
    path: /protection_domains/oob_schedules
    method: GET
    data_selector: records
- name: dr_snapshots
  endpoint:
    path: /protection_domains/{name}/dr_snapshots
    method: GET
    data_selector: records
- name: stats
  endpoint:
    path: /protection_domains/{name}/stats
    method: GET
    data_selector: records
- name: unprotect_vstore
  endpoint:
    path: /vstores/{uuid}/unprotect
    method: POST
    data_selector: response
    params: {}
- name: get_sra_state
  endpoint:
    path: /protection_domains/{name}/sra_state
    method: GET
    data_selector: response
    params: {}
- name: migrate_protection_domain
  endpoint:
    path: /protection_domains/{name}/migrate
    method: POST
    data_selector: response
    params: {}
- name: add_entities
  endpoint:
    path: /protection_domains/{name}/add_entities
    method: POST
    data_selector: response
    params: {}
- name: remove_entities
  endpoint:
    path: /protection_domains/{name}/remove_entities
    method: POST
    data_selector: response
    params: {}
- name: dr_snapshots_remove_list
  endpoint:
    path: /protection_domains/{name}/dr_snapshots/remove_list
    method: POST
    data_selector: response
    params: {}
- name: dr_snapshots_retain_list
  endpoint:
    path: /protection_domains/{name}/dr_snapshots/retain_list
    method: POST
    data_selector: response
    params: {}
- name: oob_schedules_remove_list
  endpoint:
    path: /protection_domains/{name}/oob_schedules/remove_list
    method: POST
    data_selector: response
    params: {}
- name: oob_schedules_add_list
  endpoint:
    path: /protection_domains/{name}/oob_schedules/add_list
    method: POST
    data_selector: response
    params: {}
- name: validate_migrate
  endpoint:
    path: /protection_domains/{name}/validate_migrate
    method: POST
    data_selector: response
    params: {}
- name: promote_protection_domain
  endpoint:
    path: /protection_domains/{pd_name}/promote
    method: POST
    data_selector: response
    params: {}
- name: min_snapshots
  endpoint:
    path: /protection_domains/{name}/min_snapshots
    method: PUT
    data_selector: response
    params: {}
- name: schedules_resume
  endpoint:
    path: /protection_domains/{name}/schedules/resume
    method: PUT
    data_selector: response
    params: {}
- name: schedules_suspend
  endpoint:
    path: /protection_domains/{name}/schedules/suspend
    method: PUT
    data_selector: response
    params: {}
- name: sra_state_update
  endpoint:
    path: /protection_domains/{name}/sra_state
    method: PUT
    data_selector: response
    params: {}
- name: unprotect_vstore
  endpoint:
    path: /vstores/{uuid}/unprotect
    method: POST
    data_selector: backedup
- name: delete_schedule
  endpoint:
    path: /protection_domains/{pd_name}/schedules/{id}
    method: DELETE
- name: replicate_snapshot
  endpoint:
    path: /protection_domains/{name}/snapshots/{snapshot_id}/replicate
    method: POST
- name: clone_snapshot
  endpoint:
    path: /protection_domains/{name}/snapshots/{snapshot_id}/clone
    method: POST
- name: retain_snapshot
  endpoint:
    path: /protection_domains/{protection_domain_name}/dr_snapshots/{snapshot_id}/retain
    method: POST
- name: restore_entities
  endpoint:
    path: /protection_domains/{name}/restore_entities
    method: POST
- name: rollback
  endpoint:
    path: /protection_domains/{name}/rollback
    method: POST
- name: break_replication_timeout
  endpoint:
    path: /protection_domains/{pd_name}/break_replication_timeout
    method: POST
- name: get_schedules
  endpoint:
    path: /protection_domains/{name}/schedules
    method: GET
- name: put_replication
  endpoint:
    path: /protection_domains/{protection_domain_name}/replications/{id}
    method: PUT
- name: put_consistency_group
  endpoint:
    path: /protection_domains/{pd_name}/consistency_groups/{cg_name}
    method: PUT
- name: remote_sites
  endpoint:
    path: /remote_sites
    method: GET
    data_selector: response
    params: {}
- name: alerts
  endpoint:
    path: /remote_sites/alerts
    method: GET
    data_selector: response
    params: {}
- name: pending_replications
  endpoint:
    path: /remote_sites/pending_replications
    method: GET
    data_selector: response
    params: {}
- name: events
  endpoint:
    path: /remote_sites/events
    method: GET
    data_selector: response
    params: {}
- name: connection_status
  endpoint:
    path: /remote_sites/{name}/connection_status
    method: GET
    data_selector: response
    params: {}
- name: dr_snapshots
  endpoint:
    path: /remote_sites/{name}/dr_snapshots
    method: GET
    data_selector: response
    params: {}
- name: unprotect_vstore
  endpoint:
    path: /vstores/{uuid}/unprotect
    method: POST
    data_selector: response
    params: {}
- name: clone_snapshot
  endpoint:
    path: /snapshots/{uuid}/clone
    method: POST
    data_selector: response
    params: {}
- name: delete_snapshot
  endpoint:
    path: /snapshots/{uuid}
    method: DELETE
    data_selector: response
    params: {}
- name: snapshots
  endpoint:
    path: /snapshots
    method: GET
    data_selector: records
    params: {}
- name: vstores_unprotect
  endpoint:
    path: /vstores/{uuid}/unprotect
    method: POST
    data_selector: records
    params: {}
- name: add_transports
  endpoint:
    path: /snmp/add_transports
    method: POST
    data_selector: records
    params: {}
- name: traps
  endpoint:
    path: /snmp/traps
    method: POST
    data_selector: records
    params: {}
- name: users
  endpoint:
    path: /snmp/users
    method: POST
    data_selector: records
    params: {}
- name: status
  endpoint:
    path: /snmp/status
    method: POST
    data_selector: records
    params: {}
- name: snmp
  endpoint:
    path: /snmp
    method: GET
    data_selector: records
    params: {}
- name: transports
  endpoint:
    path: /snmp/transports
    method: GET
    data_selector: records
    params: {}
- name: storage_container
  endpoint:
    path: /storage_containers
    method: GET
    data_selector: backedup
- name: unprotect_vstore
  endpoint:
    path: /vstores/{uuid}/unprotect
    method: POST
    data_selector: backedup
- name: storage_container_alerts
  endpoint:
    path: /storage_containers/{uuid}/alerts
    method: GET
    data_selector: backedup
- name: storage_container_events
  endpoint:
    path: /storage_containers/{uuid}/events
    method: GET
    data_selector: backedup
- name: storage_container_stats
  endpoint:
    path: /storage_containers/{uuid}/stats
    method: GET
    data_selector: backedup
- name: storage_containers_datastores
  endpoint:
    path: /storage_containers/datastores
    method: GET
    data_selector: backedup
- name: unprotect_vstore
  endpoint:
    path: /vstores/{uuid}/unprotect
    method: POST
    data_selector: response
    params: {}
- name: cancel_task
  endpoint:
    path: /tasks/cancel
    method: PUT
    data_selector: response
    params: {}
- name: remove_datastore
  endpoint:
    path: /storage_containers/datastores/remove_datastore
    method: POST
    data_selector: response
    params: {}
- name: list_tasks
  endpoint:
    path: /tasks/list
    method: POST
    data_selector: response
    params: {}
- name: get_task
  endpoint:
    path: /tasks/{uuid}
    method: GET
    data_selector: response
    params: {}
- name: poll_task
  endpoint:
    path: /tasks/poll
    method: POST
    data_selector: response
    params: {}
- name: upgrade_configuration
  endpoint:
    path: /upgrade/{type}/configuration
    method: GET
    data_selector: response
    params: {}
- name: upgrade_softwares
  endpoint:
    path: /upgrade/{type}/softwares
    method: GET
    data_selector: response
    params: {}
- name: validate_compatibility
  endpoint:
    path: /upgrade/validate_compatibility/{type}/{version}
    method: GET
    data_selector: response
    params: {}
- name: metadata
  endpoint:
    path: /upgrade/{type}/metadata
    method: POST
    data_selector: response
    params: {}
- name: cancel_transfer
  endpoint:
    path: /upgrade/{type}/softwares/{name}/cancel_transfer
    method: POST
    data_selector: response
    params: {}
- name: download_software
  endpoint:
    path: /upgrade/{type}/softwares/{name}/download
    method: POST
    data_selector: response
    params: {}
- name: upload_software
  endpoint:
    path: /upgrade/{type}/softwares/{name}/upload
    method: POST
    data_selector: response
    params: {}
- name: vstores_unprotect
  endpoint:
    path: /vstores/{uuid}/unprotect
    method: POST
    data_selector: response
    params: {}
- name: vdisks
  endpoint:
    path: /vdisks
    method: GET
    data_selector: response
    params: {}
- name: virtual_disks
  endpoint:
    path: /virtual_disks
    method: GET
    data_selector: response
    params: {}
- name: virtual_disks_stats
  endpoint:
    path: /virtual_disks/{uuid}/stats
    method: GET
    data_selector: response
    params: {}
- name: vms
  endpoint:
    path: /vms
    method: POST
    data_selector: response
    params: {}
- name: vms_nics
  endpoint:
    path: /vms/{uuid}/nics
    method: POST
    data_selector: response
    params: {}
- name: vms_clone
  endpoint:
    path: /vms/{uuid}/clone
    method: POST
    data_selector: response
    params: {}
- name: vms_disks_attach
  endpoint:
    path: /vms/{uuid}/disks/attach
    method: POST
    data_selector: response
    params: {}
- name: vms_nics_delete
  endpoint:
    path: /vms/{vm_uuid}/nics/{nic_id}
    method: DELETE
    data_selector: response
    params: {}
- name: vms_delete
  endpoint:
    path: /vms/{uuid}
    method: DELETE
    data_selector: response
    params: {}
- name: attach_volume_group
  endpoint:
    path: /volume_groups/{uuid}/attach
    method: POST
    data_selector: null
    params: {}
- name: clone_volume_group
  endpoint:
    path: /volume_groups/{uuid}/clone
    method: POST
    data_selector: null
    params: {}
- name: close_volume_group
  endpoint:
    path: /volume_groups/{uuid}/close
    method: POST
    data_selector: null
    params: {}
- name: create_volume_group
  endpoint:
    path: /volume_groups
    method: POST
    data_selector: null
    params: {}
- name: disks_volume_group
  endpoint:
    path: /volume_groups/{uuid}/disks
    method: POST
    data_selector: null
    params: {}
- name: vstores
  endpoint:
    path: /vstores
    method: GET
    data_selector: records
- name: unprotect_vstore
  endpoint:
    path: /vstores/{uuid}/unprotect
    method: POST
    data_selector: response
- name: volume_groups
  endpoint:
    path: /volume_groups/{uuid}
    method: GET
    data_selector: response
- name: health_check_summary
  endpoint:
    path: /volume_groups/health_check_summary
    method: GET
    data_selector: response
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: categories
  endpoint:
    path: /services/data/v1/categories
    method: GET
    data_selector: records
- name: citrix_tags
  endpoint:
    path: /services/data/v1/citrix_tags
    method: GET
    data_selector: records
- name: storage_containers
  endpoint:
    path: /api/nutanix/v2.0/storage_containers
    method: GET
    data_selector: records
- name: vms
  endpoint:
    path: /api/nutanix/v3/vms/list
    method: POST
    data_selector: kind
- name: images
  endpoint:
    path: /api/vmm/v4.0/content/images
    method: GET
    data_selector: records
- name: images
  endpoint:
    path: /v4/images
    method: GET
    data_selector: records
- name: virtual_machines
  endpoint:
    path: /v4/vms
    method: GET
    data_selector: records
- name: images
  endpoint:
    path: /api/vmm/v4.1/content/images
    method: GET
    data_selector: data
    params:
      $limit: 3
      $orderby: name
- name: images
  endpoint:
    path: /api/vmm/v4.1/content/images
    method: GET
    data_selector: data
- name: images
  endpoint:
    path: /api/vmm/v4.1/content/images
    method: GET
    data_selector: data
    params:
      $filter: startswith(name, 'fileserver_')
- name: images_sorted_limited
  endpoint:
    path: /api/vmm/v4.1/content/images
    method: GET
    data_selector: data
    params:
      $limit: 3
      $orderby: name
- name: images
  endpoint:
    path: /api/vmm/v4.1/content/images
    method: GET
    data_selector: data
- name: images
  endpoint:
    path: /content/images
    method: GET
    data_selector: data
    params:
      $limit: 3
      $orderby: name
- name: images
  endpoint:
    path: /api/vmm/v4.1/content/images
    method: GET
    data_selector: data
    params: {}
- name: storage_container
  endpoint:
    path: /api/nutanix/v2.0/storage_containers
    method: GET
- name: virtual_machine
  endpoint:
    path: /api/nutanix/v3/vms/list
    method: POST
- name: network_security_rule
  endpoint:
    path: /api/nutanix/v3/network_security_rules/{{uuid}}
    method: DELETE
notes:
- Use of v4 APIs in a Prism Element or Prism Central environment that does not meet
  the version requirements above may cause the request(s) to fail.
- The product labs are specifically written to give our developer community a way
  of learning and testing Nutanix products.
- All code samples are unofficial, are unsupported and will require extensive modification
  before use in a production environment.
- Validates the IP configuration of Hypervisor, CVM and IPMI.
- Detecting IP conflicts, confirming CVM-CVM connection, confirming CVM-Hypervisor
  connection (optional).
- Includes detecting IP conflicts.
- Includes detecting IP conflicts and confirming connections.
- Move uses JWT token based bearer authentication.
- It is advised that the user revoke the authentication token using the Revoke API
  after completing required tasks.
- Workload search filter can be specified to list only required workload information.
- Requires Bearer token for authorization
- Uses Bearer token for authorization
- One can filter based on plan, provider, workload references (UUIDs), and the workload's
  current migration state.
- This API is for internal use only and is specific to AWS source provider.
- API is in beta and might be subjected to change.
- Filter to select and view specific VMs from a workload.
- Uses basicAuth for authentication
- The API uses JSON for requests and responses.
- Uses application/json as content type for requests and responses
- It is advisable to keep your JWT short lived, Nutanix recommends a maximum of 5
  minutes as the JWT token lifespan.
- While making Nutanix API requests to the NDB services by using the default self-signed
  certificates, the request needs to be configured to ignore SSL certificate verification
  requests.
- Payload to verify an external user is required in application/json format.
- Payload to verify an external user requires specific fields.
- Payload to verify an external user is required.
- Uses Basic Authentication for API calls.
- Payload to verify an external user.
- 'Request Body schema: application/json required'
- All API users should have valid API Key credentials to send API calls to the Inference
  Endpoint.
- APIs on nutanix.dev portal are publicly available to all valid users without special
  permissions for viewing purposes.
- Batching allows for instructions for several operations to be sent using a single
  HTTP request.
- Maximum size of the array should not exceed 60.
- Request Succeeded
- Internal error
- The UUID of the entity is required for path parameters.
- The UUID of the entity is required
- The target runway default is 180
- The UUID of the entity is required in the path parameters.
- UUID required as path parameter
- The UUID of the entity is required for update scenarios.
- Unprotect a VStore with the specified id.
- HTTP Proxy instance requires address, name, port, proxy types, username, and password.
- Unprotect a VStore with the specified id requires uuid as a path parameter.
- Nutanix has supported High Availability for virtual machines (VMs) from hypervisor
  outages for a long time, which will automatically restart the VMs when a host.
- Uses OAuth2 with refresh token — requires setup of connected app in api
- Some objects like Contact may return nulls in deeply nested fields
- Some objects may return nulls in deeply nested fields
- 'Nutanix v4 APIs: Using API Key Authentication'
- Disaster Recovery is hard. Offering it as a managed service offering is harder.
  It also happens to be the first managed service offering from Nutanix.
- Security has always been important in the I.T. world.
- The process of deploying every component in a new environment can be somewhat daunting.
- This revisited version contains updated LCM SDK usage that is being progressively
  rolled.
- Enterprise-grade platform that simplifies the management of large language models
  (LLMs) and inference endpoints.
- Uses OAuth2 with refresh token — requires setup of connected app in Nutanix
- Managing any platform using a terminal requires the installation of several CLI
  tools.
- Some objects may return nulls in deeply nested fields.
- Nutanix has supported High Availability for virtual machines (VMs) from hypervisor
  outages.
- NCM Self-Service DSL offers a platform-agnostic means of interacting with NCM Self-Service.
- Recommended APIs and SDK for all supported Nutanix API endpoints
- GA (Generally Available) and RC (Release Candidate)
- Nutanix Legacy API versions v0.8, v1, v2, and v3 will be deprecated and no longer
  supported starting with the AOS and PC Upgrade Release planned for Q4-CY2026.
- HTTP POST, PUT and DELETE requests must be submitted with an accompanying JSON payload.
- Nutanix Legacy API versions v0.8, v1, v2, and v3 will be deprecated starting with
  the AOS and PC Upgrade Release planned for Q4-CY2026.
- Uses HTTP Basic Authentication — requires valid username and password
- Service accounts must be used for API key authentication
- Nutanix v4 APIs support OData-compliant resource sorting and limiting.
- Up to 500 entities can be included in a single batch operation.
- The Etag header is mandatory for all operations on existing entities to prevent
  mid-air collisions.
- Batch operations allow users to construct a multi-operation payload for related
  entities.
- Uses HTTP Basic Authentication — requires setup of user account in Prism Central
- OData-compliant resource sorting and limiting supported.
- Pagination uses a zero-based index.
- Ntnx-Request-Id header is mandatory on nearly all POST, PUT and DELETE requests.
- Etag header is mandatory for all operations on existing entities.
- Use service accounts for automated interactions, API keys cannot be managed via
  the Prism Central UI.
- For production environments, avoid using the 'admin' account.
- Requires Prism Central pc.2024.3 or later and AOS 7.0 or later
- Recommended to use dedicated user accounts instead of the built-in 'admin' account
- Nutanix API consumers have become accustomed to using various product-specific and
  Prism API endpoints.
- Code samples are unofficial, unsupported and will require extensive modification
  before use in a production environment.
- Uses Odata filters to find matching virtual machines
- This request is specific to the Nutanix v4 APIs and is not backwards compatible
  with v1, v2.0 or v3 APIs.
errors:
- '500: Raised in case of any errors'
- '500: Raised in case of any errors.'
- '500: Raised in case of any errors or if cvm_ip is missing.'
- 500 Raised in case of any errors
- '500: Raised in case of any errors such as missing mandatory keys.'
- 401 Unauthorized
- 403 Forbidden
- 404 Not Found
- 409 Conflict
- 422 Unprocessable Entity
- 500 Internal Server Error
- 501 Not Implemented
- 503 Service unavailable
- '200: Operation completed.'
- 'default: Generic error response.'
- '500: Internal Server Error.'
- '204: Operation completed.'
- '400: Invalid token'
- '422: OlaPassword & NewPassword in body is required'
- 'default: Generic error response'
- '404: Entity not found'
- 'default: Internal Error'
- '400: Entity not found'
- '404: Invalid UUID Provided'
- 404 Entity not found
- default Internal Error
- 200 Success
- 400 Bad Request
- '404: Invalid UUID provided'
- 202 Request Accepted
- '200: Request Succeeded'
- '200: Success'
- '200: Successful'
- '201: Created'
- '202: Accepted'
- '400: Bad Request'
- '401: Unauthorized'
- '403: Forbidden'
- '404: Not Found'
- '406: Not Acceptable'
- '500: Internal Server Error'
- '503: Service Unavailable'
- 401 Operation Unauthorized.
- 403 Operation Forbidden.
- 404 Not Found.
- 500 Server Error.
- '401: Unauthorized.'
- '403: Forbidden.'
- '500: Server Error.'
- '500: Operation completed.'
- '503: Service unavailable.'
- '500: Server Error'
- '400: Bad Request. - Invalid DBVM IDs - Batch size exceeds limit (>10) - Invalid
  port number'
- '401: Unauthorized. - Missing authentication token - Invalid authentication token
  - Token expired'
- '403: Forbidden. - User doesn''t have required permissions'
- '404: Not Found. - Certificate not found'
- '500: Internal Server Error. - Deletion failed - System error'
- 503 Service Unavailable
- 500 Server Error
- '400 Bad Request: Invalid certificate format, Invalid display name, Certificate
  already exists, File size exceeded, Certificate validation failed'
- '401 Unauthorized: Missing authentication token, Invalid authentication token, Token
  expired'
- '403 Forbidden: User doesn''t have required permissions'
- '500 Internal Server Error: Certificate import failed, File processing error'
- '400: Input error.'
- '403: Permission denied.'
- '404: Not Found.'
- '500: Internal server error.'
- '401 Unauthorized: Unauthorized client error.'
- '401 Unauthorized: Recheck Basic Auth credentials'
- '500 Server Error: Check server status'
- '503 Service Unavailable: API is temporarily down'
- '400: Bad request'
- '404: Not found'
- '500: Internal server error'
- '504: Gateway timeout error'
- 404 Invalid UUID provided
- Failed to retrieve blackout object
- '202: Request Accepted'
- '200: Successful operation'
- '500: Any internal exception while performing this operation'
- 'REQUEST_LIMIT_EXCEEDED: Throttle API calls or reduce frequency'
- 'QUERY_TIMEOUT: Break down filters or add selectivity'
- '401 Unauthorized: Recheck OAuth scopes or token expiration'
- '401 Unauthorized: Recheck API key or token expiration'
- '401 Unauthorized: Recheck username and password'
- '401 Unauthorized: Recheck username or password'
- '401 Unauthorized: Recheck username/password or API key validity'
- Unable to authenticate using the supplied credentials.
auth_info:
  mentioned_objects:
  - BasicAuth
  - CookieAuth
  - APIKeyAuth
  - APIKeyKubAuth
  - Bearer
  - era_token
  - era_auth
  - OauthToken
  - AuthProvider
  - NamedCredential
  - service account
  - API key
  - authorization policy
client:
  base_url: https://ip_address:9440/api/nutanix/v3
  auth:
    type: basicAuth
source_metadata: null
