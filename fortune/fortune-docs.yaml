resources:
- name: person
  endpoint:
    path: /api/person
    method: GET
    data_selector: records
- name: post
  endpoint:
    path: /posts
    method: GET
    data_selector: records
- name: user
  endpoint:
    path: /users
    method: GET
    data_selector: records
- name: post
  endpoint:
    path: /posts
    method: GET
    data_selector: records
- name: user
  endpoint:
    path: /users
    method: GET
    data_selector: records
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
notes:
- In-memory data persistence by default and IndexedDB for the browser
- Fortune.js implements its own wire protocol based on WebSocket and MessagePack
- Inverse relationship updates, automatically maintain both sides of relationships
  between records.
- Referential integrity, ensure that links must be valid at the application level.
- Type validations, fields are guaranteed to belong to a single type.
- Adapter interface, use any database that can implement an adapter.
- No object-relational mapping (ORM) or active record pattern, just plain data objects.
- No coupling with network protocol, handle requests from anywhere.
- Fortune.js provides an abstraction around core functionality of web applications.
- Fortune.js is a non-native graph database abstraction layer for Node.js and web
  browsers.
- By default, Fortune.js uses an in-memory database.
- Uses OAuth2 with refresh token â€” requires setup of connected app in api
- Some objects like Contact may return nulls in deeply nested fields
- Do not persist extraneous `id` field in NeDB adapter.
- Drop `@links` object in every response of Micro API serializer. Now only the top-level
  `@links` will be shown in the entry point.
- Fixed incorrect record type linking that passed checks.
- Fixed IndexedDB connection when a new type is added.
errors:
- 'REQUEST_LIMIT_EXCEEDED: Throttle API calls or reduce frequency'
- 'QUERY_TIMEOUT: Break down filters or add selectivity'
- '401 Unauthorized: Recheck OAuth scopes or token expiration'
auth_info:
  mentioned_objects:
  - OauthToken
  - AuthProvider
  - NamedCredential
client:
  base_url: https://github.com/fortunejs/fortune
  headers:
    Accept: application/json
source_metadata: null
