resources:
- name: Transaction Status and Response Codes
  endpoint:
    path: /reference/status-and-response-codes
    method: GET
    data_selector: transactions
    params: {}
- name: customers
  endpoint:
    path: /customers
    method: GET
- name: customer_session
  endpoint:
    path: /create_customer_session
    method: POST
- name: checkout_session
  endpoint:
    path: /create_checkout_session
    method: POST
- name: customer
  endpoint:
    path: /customers
    method: GET
- name: transactions
  endpoint:
    path: /reference/transaction
    method: GET
    data_selector: transactions
    params: {}
- name: customer_session
  endpoint:
    path: /reference/the-customer-session-object
    method: POST
- name: checkout_session
  endpoint:
    path: /reference/the-checkout-session-object
    method: POST
- name: transactions
  endpoint:
    path: /reference/transaction
    method: GET
    data_selector: transactions
- name: Payment Connection
  endpoint:
    path: /connections
    method: GET
- name: Routing
  endpoint:
    path: /routing
    method: GET
- name: Checkout Builder
  endpoint:
    path: /checkout-builder
    method: GET
- name: Developers
  endpoint:
    path: /developers
    method: GET
- name: payments
  endpoint:
    path: /payments
    method: POST
- name: payments
  endpoint:
    path: /payments
    method: POST
- name: create_customer
  endpoint:
    path: /reference/create-customer
    method: POST
- name: create_payment
  endpoint:
    path: /reference/create-payment
    method: POST
- name: enroll_payment_method
  endpoint:
    path: /reference/enroll-payment-method-api
    method: POST
- name: create_customer
  endpoint:
    path: /reference/create-customer
    method: POST
- name: create_payment
  endpoint:
    path: /reference/create-payment
    method: POST
- name: enroll_payment_method
  endpoint:
    path: /reference/enroll-payment-method-api
    method: POST
- name: payment_methods
  endpoint:
    path: /api/payment-methods
    method: GET
    data_selector: methods
- name: create_payment
  endpoint:
    path: /api/create-payment
    method: POST
    data_selector: payment_info
- name: payment_methods_by_checkout_session
  endpoint:
    path: /reference/retrieve-payment-methods-for-checkout
    method: GET
- name: payment_methods_by_customer
  endpoint:
    path: /reference/retrieve-enrolled-payment-methods-api
    method: GET
- name: get_payment_methods_by_checkout_session
  endpoint:
    path: /reference/retrieve-payment-methods-for-checkout
    method: GET
- name: get_payment_methods_by_customer
  endpoint:
    path: /reference/retrieve-enrolled-payment-methods-api
    method: GET
- name: Test Mode
  endpoint:
    path: /docs/environments/test-mode
    method: GET
    data_selector: features
    params: {}
- name: Live Mode
  endpoint:
    path: /docs/environments/live-mode
    method: GET
    data_selector: features
    params: {}
- name: payments
  endpoint:
    path: /api/v1/payments
    method: POST
    data_selector: data
    params: {}
- name: transactions
  endpoint:
    path: /api/v1/transactions
    method: GET
    data_selector: data
    params: {}
- name: monitors
  endpoint:
    path: /monitors
    method: GET
    data_selector: data
    params: {}
- name: payment_performance_metrics
  endpoint:
    path: /insights/payment-performance
    method: GET
    data_selector: data
    params: {}
- name: payment_volume
  endpoint:
    path: /insights/payment-volume
    method: GET
    data_selector: data
    params: {}
- name: conversion_rate
  endpoint:
    path: /insights/conversion-rate
    method: GET
    data_selector: data
    params: {}
- name: reconciliation_status
  endpoint:
    path: /reconciliation/status
    method: GET
    data_selector: status
- name: transaction_reconciliation_report
  endpoint:
    path: /reconciliation/transaction_report
    method: GET
    data_selector: report
- name: settlement_report
  endpoint:
    path: /reconciliation/settlement_report
    method: GET
    data_selector: settlements
- name: create_payment_link
  endpoint:
    path: /reference/create-payment-link
    method: POST
- name: create_customer
  endpoint:
    path: /reference/create-customer
    method: POST
- name: create_payment_link
  endpoint:
    path: /reference/create-payment-link
    method: POST
- name: create_customer
  endpoint:
    path: /reference/create-customer
    method: POST
- name: audit_logs
  endpoint:
    path: /audit-logs
    method: GET
    data_selector: logs
- name: account_management
  endpoint:
    path: /accounts
    method: GET
- name: Single Sign-On
  endpoint:
    path: /sso
    method: POST
    data_selector: sso_config
- name: create_payment
  endpoint:
    path: /reference/create-payment
    method: POST
- name: create_customer
  endpoint:
    path: /reference/create-customer
    method: POST
- name: create_checkout_session
  endpoint:
    path: /reference/create-checkout-session
    method: POST
- name: create_payment
  endpoint:
    path: /create/payment
    method: POST
    data_selector: payment
    params: {}
- name: create_customer
  endpoint:
    path: /create/customer
    method: POST
    data_selector: customer
    params: {}
- name: create_checkout_session
  endpoint:
    path: /create/checkout/session
    method: POST
    data_selector: checkout_session
    params: {}
- name: retrieve_payment
  endpoint:
    path: /retrieve/payment
    method: GET
    data_selector: payment_info
    params: {}
- name: refund_payment
  endpoint:
    path: /refund-payment
    method: POST
    data_selector: response
    params:
      id: payment_id
      transaction_id: transaction_id
      amount: optional_amount
- name: retrieve_payment
  endpoint:
    path: /retrieve-payment-by-id
    method: GET
    data_selector: response
    params:
      id: payment_id
- name: refund_payment
  endpoint:
    path: /refund-payment
    method: POST
    data_selector: response
    params: {}
- name: retrieve_payment_by_id
  endpoint:
    path: /retrieve-payment-by-id
    method: GET
    data_selector: response
    params: {}
- name: retrieve_payment_by_merchant_order_id
  endpoint:
    path: /retrieve-payment-by-merchant_order_id
    method: GET
    data_selector: response
    params: {}
- name: cancel_payment
  endpoint:
    path: /reference/cancel-payment
    method: POST
    data_selector: response
    params: {}
- name: retrieve_payment_by_id
  endpoint:
    path: /reference/retrieve-payment-by-id
    method: GET
    data_selector: response
    params: {}
- name: retrieve_payment_by_merchant_order_id
  endpoint:
    path: /reference/retrieve-payment-by-merchant_order_id
    method: GET
    data_selector: response
    params: {}
- name: cancel_payment
  endpoint:
    path: /reference/cancel-payment
    method: POST
    data_selector: response
    params: {}
- name: retrieve_payment_by_id
  endpoint:
    path: /reference/retrieve-payment-by-id
    method: GET
    data_selector: response
    params: {}
- name: retrieve_payment_by_merchant_order_id
  endpoint:
    path: /reference/retrieve-payment-by-merchant_order_id
    method: GET
    data_selector: response
    params: {}
- name: capture_payment
  endpoint:
    path: /reference/capture-authorization
    method: POST
- name: retrieve_payment_by_id
  endpoint:
    path: /reference/retrieve-payment-by-id
    method: GET
- name: retrieve_payment_by_merchant_order_id
  endpoint:
    path: /reference/retrieve-payment-by-merchant_order_id
    method: GET
- name: capture_payment
  endpoint:
    path: /capture-authorization
    method: POST
    data_selector: response
    params: {}
- name: retrieve_payment
  endpoint:
    path: /retrieve-payment-by-id
    method: GET
    data_selector: response
    params: {}
- name: retrieve_payment_by_merchant_order_id
  endpoint:
    path: /retrieve-payment-by-merchant_order_id
    method: GET
    data_selector: response
    params: {}
- name: create_report
  endpoint:
    path: /reference/create-a-report
    method: POST
    data_selector: report
    params:
      type: payment
      start_date: '2023-01-01'
      end_date: '2023-01-31'
      country: AR,BR
- name: retrieve_report
  endpoint:
    path: /reference/retrieve-a-report
    method: GET
    data_selector: report
    params:
      id: '{{report_id}}'
- name: list_all_reports
  endpoint:
    path: /reference/list-all-reports
    method: GET
    data_selector: reports
    params:
      account_id: '{{account_id}}'
- name: download_report
  endpoint:
    path: /reference/download-a-report
    method: GET
    data_selector: report
    params:
      id: '{{report_id}}'
- name: create_report
  endpoint:
    path: /reference/create-a-report
    method: POST
- name: download_report
  endpoint:
    path: /reference/download-a-report
    method: GET
- name: retrieve_report
  endpoint:
    path: /reference/retrieve-a-report
    method: GET
- name: list_reports
  endpoint:
    path: /reference/list-all-reports
    method: GET
- name: create_payment
  endpoint:
    path: /create_payment
    method: POST
    data_selector: payment_response
- name: create_customer
  endpoint:
    path: /create_customer
    method: POST
    data_selector: customer_response
- name: create_checkout_session
  endpoint:
    path: /create_checkout_session
    method: POST
    data_selector: session_response
- name: create_one_time_token
  endpoint:
    path: /create_one_time_token
    method: POST
    data_selector: token_response
- name: create_payment
  endpoint:
    path: /create-payment
    method: POST
    data_selector: payment_result
- name: create_customer
  endpoint:
    path: /create-customer
    method: POST
    data_selector: customer_result
- name: create_checkout_session
  endpoint:
    path: /create-checkout-session
    method: POST
    data_selector: session_result
- name: create_one_time_token
  endpoint:
    path: /create-one-time-token
    method: POST
    data_selector: token_result
- name: create_customer
  endpoint:
    path: /reference/create-customer
    method: POST
    data_selector: id
- name: create_checkout_session
  endpoint:
    path: /reference/create-checkout-session
    method: POST
    data_selector: checkout_session
- name: create_one_time_token
  endpoint:
    path: /reference/create-ott
    method: POST
    data_selector: one-time-token
- name: create_payment
  endpoint:
    path: /reference/create-payment
    method: POST
    data_selector: payment
- name: authorize_payment
  endpoint:
    path: /reference/authorize-payment
    method: POST
    data_selector: authorization
- name: capture_authorization
  endpoint:
    path: /reference/capture-authorization
    method: POST
    data_selector: capture
- name: create_customer
  endpoint:
    path: /reference/create-customer
    method: POST
    data_selector: id
- name: create_checkout_session
  endpoint:
    path: /reference/create-checkout-session
    method: POST
    data_selector: checkout_session
- name: create_one_time_token
  endpoint:
    path: /reference/create-ott
    method: POST
    data_selector: one-time-token
- name: create_payment
  endpoint:
    path: /reference/create-payment
    method: POST
    data_selector: payment_response
- name: payment_status
  endpoint:
    path: /reference/payment
    method: GET
    data_selector: status
    params: {}
- name: create_payment
  endpoint:
    path: /reference/create-payment
    method: POST
    data_selector: payment
    params: {}
- name: retrieve_payment_by_id
  endpoint:
    path: /reference/retrieve-payment-by-id
    method: GET
    data_selector: payment
    params: {}
- name: retrieve_payment_by_merchant_order_id
  endpoint:
    path: /reference/retrieve-payment-by-merchant_order_id
    method: GET
    data_selector: payment
    params: {}
- name: create_payment
  endpoint:
    path: /reference/create-payment
    method: POST
    data_selector: status
    params: {}
- name: retrieve_payment_by_id
  endpoint:
    path: /reference/retrieve-payment-by-id
    method: GET
    data_selector: status
    params: {}
- name: retrieve_payment_by_merchant_order_id
  endpoint:
    path: /reference/retrieve-payment-by-merchant_order_id
    method: GET
    data_selector: status
    params: {}
- name: customer
  endpoint:
    path: /reference/create-customer
    method: POST
- name: checkout_session
  endpoint:
    path: /reference/create-checkout-session
    method: POST
- name: create_customer
  endpoint:
    path: /reference/create-customer
    method: POST
- name: create_checkout_session
  endpoint:
    path: /reference/create-checkout-session
    method: POST
- name: checkout_session
  endpoint:
    path: /checkout/session
    method: POST
    data_selector: session
    params: {}
- name: payment_method
  endpoint:
    path: /payment/methods
    method: GET
    data_selector: methods
    params: {}
- name: checkout_session
  endpoint:
    path: /create-checkout-session
    method: POST
    data_selector: session
    params: {}
- name: customer
  endpoint:
    path: /customers
    method: POST
    data_selector: customer
    params: {}
- name: unmount_external_buttons
  endpoint:
    path: /unmount/external/buttons
    method: POST
    data_selector: response
    params: {}
- name: checkout_session
  endpoint:
    path: /reference/create-checkout-session
    method: POST
- name: create_payment
  endpoint:
    path: /reference/create-payment
    method: POST
- name: create_payment
  endpoint:
    path: /reference/create-payment
    method: POST
    data_selector: payment
    params: {}
- name: checkout_session
  endpoint:
    path: /reference/create-checkout-session
    method: POST
    data_selector: session
    params: {}
- name: checkout
  endpoint:
    path: /startCheckout
    method: POST
    data_selector: response
    params: {}
- name: checkout
  endpoint:
    path: /checkout
    method: POST
    data_selector: checkoutSession
- name: create_payment
  endpoint:
    path: /reference/create-payment
    method: POST
- name: checkout_session
  endpoint:
    path: /checkout/session
    method: POST
- name: payment
  endpoint:
    path: /payment
    method: POST
- name: form_loader
  endpoint:
    path: /docs/loader
    method: GET
    data_selector: showLoading
- name: issuers_form
  endpoint:
    path: /docs/issuer
    method: GET
    data_selector: issuersFormEnable
- name: render_mode
  endpoint:
    path: /docs/render-mode
    method: GET
    data_selector: renderMode
- name: card_form
  endpoint:
    path: /docs/card-form
    method: GET
    data_selector: card
- name: texts
  endpoint:
    path: /docs/texts
    method: GET
    data_selector: texts
- name: form_loader
  endpoint:
    path: /form-loader
    method: GET
    data_selector: form_loader
    params: {}
- name: issuers_form
  endpoint:
    path: /issuers-form
    method: GET
    data_selector: issuers_form
    params: {}
- name: render_mode
  endpoint:
    path: /render-mode
    method: GET
    data_selector: render_mode
    params: {}
- name: card_form
  endpoint:
    path: /card-form
    method: GET
    data_selector: card_form
    params: {}
- name: checkout
  endpoint:
    path: /reference/create-checkout-session
    method: POST
    data_selector: checkoutSession
    params: {}
- name: payment
  endpoint:
    path: /reference/create-payment
    method: POST
    data_selector: paymentResult
    params: {}
- name: checkout_session
  endpoint:
    path: /reference/create-checkout-session
    method: POST
    data_selector: session
    params: {}
- name: create_payment
  endpoint:
    path: /reference/create-payment
    method: POST
    data_selector: payment
    params: {}
- name: checkout_session
  endpoint:
    path: /create-checkout-session
    method: POST
    data_selector: session
- name: create_payment
  endpoint:
    path: /create-payment
    method: POST
    data_selector: payment
- name: payment
  endpoint:
    path: /create-payment
    method: POST
    data_selector: paymentResult
    params: {}
- name: checkout_session
  endpoint:
    path: /create-checkout-session
    method: POST
    data_selector: sessionId
    params: {}
- name: create_payment
  endpoint:
    path: /reference/create-payment
    method: POST
    data_selector: payment
    params: {}
- name: card
  endpoint:
    path: /startCheckout
    method: POST
    data_selector: card
    params: {}
- name: card_form
  endpoint:
    path: /startCheckout
    method: POST
    data_selector: card
    params: {}
- name: customer_session
  endpoint:
    path: /reference/create-customer-session
    method: POST
    data_selector: session
- name: payment_method
  endpoint:
    path: /reference/enroll-payment-method-checkout
    method: POST
    data_selector: paymentMethod
- name: customer_session
  endpoint:
    path: /reference/create-customer-session
    method: POST
    data_selector: customerSession
    params: {}
- name: payment_method
  endpoint:
    path: /reference/enroll-payment-method-checkout
    method: POST
    data_selector: paymentMethod
    params: {}
- name: continuePayment
  endpoint:
    path: /continuePayment
    method: GET
    data_selector: return_value
- name: checkout
  endpoint:
    path: /reference/create-checkout-session
    method: POST
    data_selector: checkoutSession
- name: create_payment
  endpoint:
    path: /reference/create-payment
    method: POST
    data_selector: payment
- name: create_checkout_session
  endpoint:
    path: /reference/create-checkout-session
    method: POST
    data_selector: checkoutSession
- name: create_payment
  endpoint:
    path: /reference/create-payment
    method: POST
    data_selector: payment
- name: card_form
  endpoint:
    path: /card-form
    method: POST
    data_selector: settings
- name: secure_fields
  endpoint:
    path: /secure-fields
    method: POST
- name: customer_session
  endpoint:
    path: /reference/create-customer-session
- name: enrollment_payment_method
  endpoint:
    path: /reference/enroll-payment-method-checkout
- name: Secure Field
  endpoint:
    path: /secureFields
    method: POST
    data_selector: fields
- name: secure_fields_enrollment
  endpoint:
    path: /secure-fields/enrollment
    method: POST
    data_selector: secureFields
    params: {}
- name: secureNumber
  endpoint:
    path: /secureFields/create
    method: POST
    data_selector: secureField
    params:
      name: pan
      options:
        placeholder: 0000 0000 0000 0000
        label: Card Number
        showError: true
        errorMessage: Custom Error
        validateOnBlur: false
- name: secureExpiration
  endpoint:
    path: /secureFields/create
    method: POST
    data_selector: secureField
    params:
      name: expiration
      options:
        placeholder: MM / YY
        label: Card Expiration
        showError: true
- name: secureCvv
  endpoint:
    path: /secureFields/create
    method: POST
    data_selector: secureField
    params:
      name: cvv
      options:
        placeholder: CVV
        label: CVV
        showError: true
- name: secure_fields
  endpoint:
    path: /secureFields/create
    method: POST
    data_selector: fields
    params: {}
- name: vaulted_token
  endpoint:
    path: /secureFields/generateVaultedToken
    method: POST
    data_selector: token
    params: {}
- name: vaulted_token_information
  endpoint:
    path: /secureFields/generateVaultedTokenWithInformation
    method: POST
    data_selector: tokenInformation
    params: {}
- name: create_customer
  endpoint:
    path: /reference/create-customer
    method: POST
- name: create_customer_session
  endpoint:
    path: /reference/create-customer-session
    method: POST
- name: enroll_payment_method
  endpoint:
    path: /reference/enroll-payment-method-checkout
    method: POST
- name: customer
  endpoint:
    path: /reference/create-customer
    method: POST
    data_selector: customer
    params: {}
- name: customer_session
  endpoint:
    path: /reference/create-customer-session
    method: POST
    data_selector: customer_session
    params: {}
- name: enroll_payment_method
  endpoint:
    path: /reference/enroll-payment-method-checkout
    method: POST
    data_selector: payment_method
    params: {}
- name: checkout_session
  endpoint:
    path: /reference/create-checkout-session
    method: POST
- name: checkout_session
  endpoint:
    path: /create-checkout-session
    method: POST
    data_selector: session_id
- name: create_payment
  endpoint:
    path: /reference/create-payment
    method: POST
    data_selector: payment
    params: {}
- name: generate_token
  endpoint:
    path: /reference/generate-token
    method: POST
    data_selector: token
    params: {}
- name: get_three_d_secure_challenge
  endpoint:
    path: /reference/get-three-d-secure-challenge
    method: GET
    data_selector: url
    params: {}
- name: get_continue_payment_action
  endpoint:
    path: /reference/get-continue-payment-action
    method: GET
    data_selector: action
    params: {}
- name: generate_token
  endpoint:
    path: /generate-token
    method: POST
    data_selector: token
    params: {}
- name: create_payment
  endpoint:
    path: /create-payment
    method: POST
    data_selector: token
    params: {}
- name: get_three_d_secure_challenge
  endpoint:
    path: /get-three-d-secure-challenge
    method: POST
    data_selector: url
    params: {}
- name: get_continue_payment_action
  endpoint:
    path: /get-continue-payment-action
    method: POST
    data_selector: action
    params: {}
- name: payment_status
  endpoint:
    path: /payment/status
    method: GET
- name: payment_status
  endpoint:
    path: /payment-status
    method: GET
    data_selector: status
    params: {}
- name: 3DS Setup
  endpoint:
    path: /reference/3ds-setup
    method: GET
    data_selector: setupId
    params:
      account_id: your_account_id
- name: 3DS Setup
  endpoint:
    path: /reference/3ds-setup
    method: GET
    data_selector: setup_id
    params: {}
- name: full_sdk
  endpoint:
    path: /docs/full-checkout-android
    method: GET
    data_selector: records
- name: lite_sdk_payment
  endpoint:
    path: /docs/lite-checkout-android
    method: GET
    data_selector: records
- name: lite_sdk_enrollment
  endpoint:
    path: /docs/enrollment-android
    method: GET
    data_selector: records
- name: headless_sdk_payment
  endpoint:
    path: /docs/headless-sdk-payment-android
    method: GET
    data_selector: records
- name: headless_sdk_enrollment
  endpoint:
    path: /docs/headless-sdk-enrollment-android
    method: GET
    data_selector: records
- name: checkout_session
  endpoint:
    path: /reference/create-checkout-session
    method: POST
- name: create_customer
  endpoint:
    path: /reference/create-customer
    method: POST
- name: create_payment
  endpoint:
    path: /reference/create-payment
    method: POST
- name: create_customer
  endpoint:
    path: /reference/create-customer
    method: POST
- name: create_checkout_session
  endpoint:
    path: /reference/create-checkout-session
    method: POST
- name: create_payment
  endpoint:
    path: /reference/create-payment
    method: POST
    data_selector: oneTimeToken
    params: {}
- name: payment
  endpoint:
    path: /create-payment
    method: POST
    data_selector: paymentResponse
    params: {}
- name: customer
  endpoint:
    path: /reference/create-customer
    method: POST
    data_selector: customer_id
- name: customer
  endpoint:
    path: /reference/create-customer
    method: POST
    data_selector: customer
    params: {}
- name: checkout_session
  endpoint:
    path: /reference/create-checkout-session
    method: POST
    data_selector: checkout_session
    params: {}
- name: enrollment_status
  endpoint:
    path: /enrollment/status
    method: GET
    data_selector: status
- name: startPaymentLite
  endpoint:
    path: /reference/start-payment-lite
    method: POST
    data_selector: payment
    params: {}
- name: createPayment
  endpoint:
    path: /reference/create-payment
    method: POST
    data_selector: payment
    params: {}
- name: continuePayment
  endpoint:
    path: /reference/continue-payment
    method: POST
    data_selector: payment
    params: {}
- name: customer
  endpoint:
    path: /reference/create-customer
    method: POST
- name: customer_session
  endpoint:
    path: /reference/create-customer-session
    method: POST
- name: enroll_payment_method
  endpoint:
    path: /reference/enroll-payment-method-checkout
    method: POST
- name: customer
  endpoint:
    path: /reference/create-customer
    method: POST
    data_selector: customer_id
- name: vaulted_token
  endpoint:
    path: /apiClientEnroll/continueEnrollment
    method: POST
    data_selector: vaulted_token
    params: {}
- name: enrollment_status
  endpoint:
    path: /enrollment/status
    method: GET
    data_selector: status
    params: {}
- name: customer
  endpoint:
    path: /reference/create-customer
    method: POST
- name: checkout_session
  endpoint:
    path: /reference/create-checkout-session
    method: POST
- name: customer
  endpoint:
    path: /reference/create-customer
    method: POST
    data_selector: customer_id
- name: customer_session
  endpoint:
    path: /reference/create-customer-session
    method: POST
    data_selector: customer_session_id
- name: enroll_payment_method
  endpoint:
    path: /reference/enroll-payment-method-checkout
    method: POST
    data_selector: payment_method_id
- name: create_payment
  endpoint:
    path: /reference/create-payment
    method: POST
    data_selector: response
    params: {}
- name: create_checkout_session
  endpoint:
    path: /reference/create-checkout-session
    method: POST
    data_selector: response
    params: {}
- name: get_three_ds_challenge
  endpoint:
    path: /reference/get-three-d-secure-challenge
    method: GET
    data_selector: response
    params: {}
- name: customer
  endpoint:
    path: /reference/create-customer
    method: POST
- name: checkout_session
  endpoint:
    path: /reference/create-checkout-session
    method: POST
- name: screen_payment_card_form
  endpoint:
    path: /screen_payment_card_form.xml
    method: GET
- name: generate_token
  endpoint:
    path: /generate-token
    method: POST
    data_selector: response
- name: create_payment
  endpoint:
    path: /create-payment
    method: POST
    data_selector: response
- name: get_three_d_secure_challenge
  endpoint:
    path: /get-three-d-secure-challenge
    method: POST
    data_selector: response
- name: payment_methods
  endpoint:
    path: /api/v1/payment_methods
    method: GET
    data_selector: methods
    params: {}
- name: enrollment
  endpoint:
    path: /api/v1/enrollment
    method: POST
    data_selector: enrollment
    params: {}
- name: screen_payment_card_form
  endpoint:
    path: /create_card_form
    method: POST
    data_selector: components
    params: {}
- name: full_sdk
  endpoint:
    path: /docs/full-checkout-ios
    method: GET
- name: lite_sdk_payment
  endpoint:
    path: /docs/lite-checkout-ios
    method: GET
- name: lite_sdk_enrollment
  endpoint:
    path: /docs/enrollment-ios
    method: GET
- name: headless_sdk_payment
  endpoint:
    path: /docs/headless-sdk-payment-ios
    method: GET
- name: headless_sdk_enrollment
  endpoint:
    path: /docs/headless-sdk-enrollment-ios
    method: GET
- name: create_payment
  endpoint:
    path: /reference/create-payment
    method: POST
    data_selector: payment
    params: {}
- name: enrollment
  endpoint:
    path: /enrollPayment
    method: POST
    data_selector: result
- name: create_payment
  endpoint:
    path: /reference/create-payment
    method: POST
- name: YunoPaymentDelegate
  endpoint:
    path: /implementing/YunoPaymentDelegate
    method: GET
    data_selector: protocols
    params: {}
- name: customer
  endpoint:
    path: /reference/create-customer
    method: POST
- name: customer_session
  endpoint:
    path: /reference/create-customer-session
    method: POST
- name: enroll_payment_method
  endpoint:
    path: /reference/enroll-payment-method-checkout
    method: POST
- name: payment
  endpoint:
    path: /create-checkout-session
    method: POST
    data_selector: session
    params: {}
- name: customer
  endpoint:
    path: /reference/create-customer
    method: POST
- name: customer_session
  endpoint:
    path: /reference/create-customer-session
    method: POST
- name: enroll_payment_method
  endpoint:
    path: /reference/enroll-payment-method-checkout
    method: POST
- name: create_checkout_session
  endpoint:
    path: /reference/create-checkout-session
    method: POST
    data_selector: response
    params: {}
- name: create_payment
  endpoint:
    path: /reference/create-payment
    method: POST
    data_selector: response
    params: {}
- name: get_three_d_secure_challenge
  endpoint:
    path: /reference/get-three-d-secure-challenge
    method: GET
    data_selector: response
    params: {}
- name: retrieve_payment_by_id
  endpoint:
    path: /reference/retrieve-payment-by-id
    method: GET
    data_selector: response
    params: {}
- name: checkout_session
  endpoint:
    path: /reference/create-checkout-session
    method: POST
- name: create_payment
  endpoint:
    path: /reference/create-payment
    method: POST
- name: create_checkout_session
  endpoint:
    path: /reference/create-checkout-session
    method: POST
- name: 3DS_card_verification
  endpoint:
    path: /docs/3ds-1
    method: GET
- name: retrieve_payment_by_id
  endpoint:
    path: /reference/retrieve-payment-by-id
    method: GET
- name: 3DS Setup
  endpoint:
    path: /docs/routing#configuring-the-dynamic-routing
    method: GET
    data_selector: data
    params: {}
- name: 3DS Step
  endpoint:
    path: /routing/card-routes/3DS-step
    method: GET
    data_selector: scenarios
- name: card_verification
  endpoint:
    path: /card/verification
    method: POST
    data_selector: verify
    params: {}
- name: payment
  endpoint:
    path: /reference/create-payment
    method: POST
- name: get_payment
  endpoint:
    path: /reference/retrieve-payment-by-id
    method: GET
- name: card_verification
  endpoint:
    path: /verify/card
    method: POST
    data_selector: response
    params: {}
- name: enroll_payment_method
  endpoint:
    path: /enroll/payment-method
    method: POST
    data_selector: response
    params: {}
- name: payments
  endpoint:
    path: /v1/payments
    method: POST
    data_selector: ''
    params: {}
- name: card_verification
  endpoint:
    path: /verify/card
    method: POST
    data_selector: response
    params:
      amount:
        value: 0
      verify: true
- name: payment
  endpoint:
    path: /payments
    method: POST
    data_selector: payment_method
    params: {}
- name: payments
  endpoint:
    path: /v1/payments
    method: POST
    data_selector: payments
- name: create_customer
  endpoint:
    path: /v1/customers
    method: POST
    data_selector: id
- name: retrieve_customer
  endpoint:
    path: /v1/customers/{id}
    method: GET
    data_selector: data
- name: enroll_payment_method
  endpoint:
    path: /v1/customers/{customer_id}/payment-methods
    method: POST
    data_selector: vaulted_token
- name: retrieve_enrolled_payment_methods
  endpoint:
    path: /v1/customers/{customer_id}/payment-methods
    method: GET
    data_selector: methods
- name: customer
  endpoint:
    path: /v1/customers
    method: POST
    data_selector: id
- name: payment_method
  endpoint:
    path: /v1/customers/{{customer_id}}/payment-methods
    method: POST
    data_selector: vaulted_token
- name: payment_link
  endpoint:
    path: /reference/create-payment-link
    method: POST
    data_selector: payment_link
    params: {}
- name: get_payment_methods
  endpoint:
    path: /reference/retrieve-enrolled-payment-methods-api
    method: GET
    data_selector: payment_methods
    params: {}
- name: enroll_payment_method
  endpoint:
    path: /enroll/payment/method
    method: POST
- name: create_customer
  endpoint:
    path: /create/customer
    method: POST
- name: create_customer_session
  endpoint:
    path: /create/customer/session
    method: POST
- name: retrieve_payment_methods_to_enroll
  endpoint:
    path: /retrieve/payment/methods/to/enroll
    method: GET
- name: retrieve_enrolled_payment_methods
  endpoint:
    path: /retrieve/enrolled/payment/methods
    method: GET
- name: merchant_installments
  endpoint:
    path: /docs/merchant-installments
    method: GET
- name: provider_installments
  endpoint:
    path: /docs/provider-installments
    method: GET
- name: payment_link
  endpoint:
    path: /reference/create-payment-link
    method: POST
    data_selector: payment_link_data
    params:
      customer_payer.id: customer_id
      one_time_use: true
      vault_on_success: true
- name: payment_methods
  endpoint:
    path: /reference/retrieve-enrolled-payment-methods-api
    method: GET
    data_selector: payment_methods_data
    params: {}
- name: installments
  endpoint:
    path: /docs/merchant-installments
    method: GET
- name: create_payment
  endpoint:
    path: /reference/create-payment
    method: POST
    data_selector: payment_method.detail.card.installments
    params: {}
- name: create_installments_plan
  endpoint:
    path: /reference/create-installments-plan
    method: POST
    data_selector: ''
    params: {}
- name: create_checkout_session
  endpoint:
    path: /reference/create-checkout-session
    method: POST
    data_selector: ''
    params: {}
- name: create_payment
  endpoint:
    path: /reference/create-payment
    method: POST
    data_selector: payment_method.detail.card.installments
    params: {}
- name: create_installments_plan
  endpoint:
    path: /reference/create-installments-plan
    method: POST
    data_selector: ''
    params: {}
- name: create_checkout_session
  endpoint:
    path: /reference/create-checkout-session
    method: POST
    data_selector: ''
    params: {}
- name: create_subscription
  endpoint:
    path: /reference/Create-Subscription
    method: POST
- name: pause_subscription
  endpoint:
    path: /reference/Pause-Subscription
    method: POST
- name: resume_subscription
  endpoint:
    path: /reference/Resume-Subscription
    method: POST
- name: cancel_subscription
  endpoint:
    path: /reference/Cancel-Subscription
    method: POST
- name: retrieve_subscription
  endpoint:
    path: /reference/Retrieve-Subscription
    method: GET
- name: subscriptions
  endpoint:
    path: /reference/Create-Subscription
    method: POST
- name: pause_subscription
  endpoint:
    path: /reference/Pause-Subscription
    method: POST
- name: resume_subscription
  endpoint:
    path: /reference/Resume-Subscription
    method: POST
- name: cancel_subscription
  endpoint:
    path: /reference/Cancel-Subscription
    method: POST
- name: retrieve_subscription
  endpoint:
    path: /reference/Retrieve-Subscription
    method: GET
- name: recipients
  endpoint:
    path: /reference/create-recipient-1
    method: POST
- name: create_payment
  endpoint:
    path: /reference/create-payment
    method: POST
- name: capture
  endpoint:
    path: /v1/payments/id/transactions/transaction_id/capture
    method: POST
    data_selector: amount
    params:
      simplified_mode: true
- name: refund
  endpoint:
    path: /v1/payments/id/transactions/transaction_id/refund
    method: POST
    data_selector: simplified_mode
    params:
      simplified_mode: true
- name: payments
  endpoint:
    path: /reference/create-payment
    method: POST
    data_selector: additional_data.order.account_funding
    params: {}
- name: create_recipients
  endpoint:
    path: /recipients
    method: POST
- name: create_onboarding
  endpoint:
    path: /recipients/{recipient_id}/onboardings
    method: POST
- name: continue_onboarding
  endpoint:
    path: /recipients/{recipient_id}/onboardings/{onboarding_id}/continue
    method: POST
- name: create_payment
  endpoint:
    path: /payments
    method: POST
- name: capture_authorization
  endpoint:
    path: /payments/{id}/transactions/{transaction_id}/capture
    method: POST
- name: refund_payment
  endpoint:
    path: /payments/{id}/transactions/{transaction_id}/refund
    method: POST
- name: cancel_or_refund_payment
  endpoint:
    path: /payments/{id}/cancel-or-refund
    method: POST
- name: cancel_or_refund_payment_with_transaction
  endpoint:
    path: /payments/{id}/transactions/{transaction_id}/cancel-or-refund
    method: POST
- name: transfer_onboarding
  endpoint:
    path: /recipients/{recipient_id}/onboardings/{onboarding_id}/transfer
    method: POST
- name: reverse_onboarding_transfer
  endpoint:
    path: /recipients/{recipient_id}/onboardings/{onboarding_id}/reverse-transfer
    method: POST
- name: payments
  endpoint:
    path: /payments
    method: POST
    data_selector: data
    params: {}
- name: account_funding
  endpoint:
    path: /reference/create-payment
    method: POST
    data_selector: additional_data.order.account_funding
    params: {}
- name: payments
  endpoint:
    path: /v1/payments
    method: POST
    data_selector: data
    params: {}
- name: payments
  endpoint:
    path: /v1/payments
    method: POST
    data_selector: ''
    params: {}
- name: payments
  endpoint:
    path: /payments
    method: POST
    data_selector: ''
    params: {}
- name: delayed_cancel
  endpoint:
    path: /cancel
    method: POST
    data_selector: ''
    params: {}
- name: create_payout
  endpoint:
    path: /reference/create-payout
    method: POST
- name: retrieve_payout_by_id
  endpoint:
    path: /reference/retrieve-payout-by-id
    method: GET
- name: retrieve_payout_by_merchant_reference
  endpoint:
    path: /reference/retrieve-payout-by-merchant-reference
    method: GET
- name: capture_payment
  endpoint:
    path: /create-payment
    method: POST
    data_selector: payment_method
- name: cancel_payment
  endpoint:
    path: /cancel-or-refund-a-payment
    method: POST
    data_selector: payment_method
- name: delayed_cancel
  endpoint:
    path: /delayed/cancel
    method: POST
    data_selector: result
    params: {}
- name: dispute
  endpoint:
    path: /v1/payments/:payment_id/transactions/:transaction_id/dispute
    method: POST
    data_selector: evidence
- name: create_payout
  endpoint:
    path: /reference/create-payout
    method: POST
    data_selector: payout
    params: {}
- name: retrieve_payout_by_id
  endpoint:
    path: /reference/retrieve-payout-by-id
    method: GET
    data_selector: payout
    params: {}
- name: retrieve_payout_by_merchant_reference
  endpoint:
    path: /reference/retrieve-payout-by-merchant-reference
    method: GET
    data_selector: payout
    params: {}
- name: dispute
  endpoint:
    path: /v1/payments/:payment_id/transactions/:transaction_id/dispute
    method: POST
- name: payment_event_v2
  endpoint:
    path: /webhooks/v2/payment
    method: POST
    data_selector: payment
    params: {}
- name: payment_event_v1
  endpoint:
    path: /webhooks/v1/payment
    method: POST
    data_selector: payment
    params: {}
- name: payment_event_v2
  endpoint:
    path: /payment/webhook/v2
    method: POST
    data_selector: payment
- name: payment
  endpoint:
    path: /payment
    method: POST
    data_selector: data.payment
- name: payment
  endpoint:
    path: /api/callback/my-orders
    method: GET
    data_selector: data.payment
    params: {}
- name: payment
  endpoint:
    path: /payment
    method: POST
    data_selector: payment
- name: enrollment
  endpoint:
    path: /enrollment
    method: POST
    data_selector: data
- name: payout
  endpoint:
    path: /payout
    method: POST
    data_selector: data
- name: subscription
  endpoint:
    path: /subscription
    method: POST
    data_selector: data
- name: onboarding
  endpoint:
    path: /onboarding
    method: POST
    data_selector: data
- name: payment
  endpoint:
    path: /refunds
    method: GET
    data_selector: payment
- name: payment
  endpoint:
    path: /payments
    method: POST
    data_selector: payment
    params: {}
- name: enrollment
  endpoint:
    path: /enrollments
    method: POST
    data_selector: data
    params: {}
- name: payouts
  endpoint:
    path: /payouts
    method: POST
    data_selector: data
    params: {}
- name: subscriptions
  endpoint:
    path: /subscriptions
    method: POST
    data_selector: data
    params: {}
- name: onboardings
  endpoint:
    path: /onboardings
    method: POST
    data_selector: data
    params: {}
- name: payment
  endpoint:
    path: /refunds
    method: GET
    data_selector: payment
    params: {}
- name: apple_pay_connection
  endpoint:
    path: /connections/apple_pay
    method: POST
    data_selector: connection
    params: {}
- name: routing
  endpoint:
    path: /routing/apple_pay
    method: POST
    data_selector: route
    params: {}
- name: checkout_builder
  endpoint:
    path: /checkout_builder/apple_pay
    method: PATCH
    data_selector: settings
    params: {}
- name: Apple Pay Connection
  endpoint:
    path: /connections/apple-pay
    method: POST
    data_selector: connection
    params: {}
- name: Routing for Apple Pay
  endpoint:
    path: /routing/apple-pay
    method: POST
    data_selector: route
    params: {}
- name: Checkout Builder for Apple Pay
  endpoint:
    path: /checkout-builder/apple-pay
    method: POST
    data_selector: checkout
    params: {}
- name: create_payment
  endpoint:
    path: /reference/create-payment
    method: POST
    data_selector: payment_token
    params: {}
- name: one_time_payments
  endpoint:
    path: /direct_integration/one_time_payments
    method: POST
    data_selector: payment
    params: {}
- name: checkout_session
  endpoint:
    path: /create-checkout-session
    method: POST
    data_selector: session
    params: {}
- name: customer_initiated_transaction
  endpoint:
    path: /customer-initiated-transaction
    method: POST
    data_selector: transaction
    params: {}
- name: merchant_initiated_transaction
  endpoint:
    path: /merchant-initiated-transaction
    method: POST
    data_selector: transaction
    params: {}
- name: Customer Initiated Transaction
  endpoint:
    path: /create-payment
    method: POST
    data_selector: payment_token
    params: {}
- name: Merchant Initiated Transaction
  endpoint:
    path: /create-payment
    method: POST
    data_selector: payment_token
    params: {}
- name: create_payment
  endpoint:
    path: /reference/create-payment
    method: POST
    data_selector: payment_token
    params: {}
- name: one_time_payments
  endpoint:
    path: /payments/one_time
    method: POST
    data_selector: payment_response
    params:
      account_id: 2d77ea44-9a01-4ffc-a465-7db5c2ced44d
      description: Apple Pay one-time payment
      merchant_order_id: MER01
- name: payment
  endpoint:
    path: /pass-google-pay-payment-token
    method: POST
    data_selector: payment
    params: {}
- name: Customer Initiated Transaction
  endpoint:
    path: /create-payment
    method: POST
    data_selector: payment_token
    params: {}
- name: Merchant Initiated Transaction
  endpoint:
    path: /create-payment
    method: POST
    data_selector: payment_token
    params: {}
- name: payment
  endpoint:
    path: /pass_google_pay_payment_token
    method: POST
    data_selector: payment_response
    params: {}
- name: create_customer
  endpoint:
    path: /reference/create-customer
    method: POST
- name: retrieve_customer
  endpoint:
    path: /reference/retrieve-customer
    method: GET
- name: retrieve_customer_by_external_id
  endpoint:
    path: /reference/retrieve-customer-by-external-id
    method: GET
- name: enroll_payment_method
  endpoint:
    path: /reference/enroll-payment-method-api
    method: POST
- name: retrieve_enrolled_payment_method
  endpoint:
    path: /reference/retrieve-enrolled-payment-method-by-id-api
    method: GET
- name: create_payment
  endpoint:
    path: /reference/create-payment
    method: POST
- name: retrieve_payment
  endpoint:
    path: /reference/retrieve-payment
    method: GET
- name: create_subscription
  endpoint:
    path: /reference/create-subscription
    method: POST
- name: retrieve_subscription
  endpoint:
    path: /reference/retrieve-subscription
    method: GET
- name: payment_methods
  endpoint:
    path: /payment-methods
    method: GET
- name: workspaces
  endpoint:
    path: /workspaces
    method: GET
- name: create_customer
  endpoint:
    path: /reference/create-customer
    method: POST
- name: retrieve_customer
  endpoint:
    path: /reference/retrieve-customer
    method: GET
- name: retrieve_customer_by_external_id
  endpoint:
    path: /reference/retrieve-customer-by-external-id
    method: GET
- name: enroll_payment_method
  endpoint:
    path: /reference/enroll-payment-method-api
    method: POST
- name: retrieve_enrolled_payment_method_by_id
  endpoint:
    path: /reference/retrieve-enrolled-payment-method-by-id-api
    method: GET
- name: create_payment
  endpoint:
    path: /reference/create-payment
    method: POST
- name: retrieve_payment_by_id
  endpoint:
    path: /reference/retrieve-payment
    method: GET
- name: create_subscription
  endpoint:
    path: /reference/create-subscription
    method: POST
- name: retrieve_subscription
  endpoint:
    path: /reference/retrieve-subscription
    method: GET
- name: webhook
  endpoint:
    path: /_v/yunopartnerbr.yuno/v4/webhook
    method: POST
- name: Yuno Plugin
  endpoint:
    path: /configure-yuno-as-provider
    method: POST
- name: webhook
  endpoint:
    path: /_v/yunopartnerbr.yuno/v4/webhook
    method: POST
    data_selector: webhook
    params: {}
- name: credit_card_payment
  endpoint:
    path: /reference/create-payment
    method: GET
    data_selector: paymentAppData
    params: {}
- name: pix_payment
  endpoint:
    path: /reference/create-payment
    method: GET
    data_selector: paymentAppData
    params: {}
- name: payments
  endpoint:
    path: /_v/yunopartnerbr.yuno/v4/payments/yuno
    method: POST
    data_selector: paymentData
- name: payment_response
  endpoint:
    path: /reference/create-payment
    method: GET
    data_selector: paymentAppData
    params: {}
- name: provider_rate_service
  endpoint:
    path: /currency-conversion/provider-rate-service
    method: POST
    data_selector: amount
    params: {}
- name: yuno_rate_service
  endpoint:
    path: /currency-conversion/yuno-rate-service
    method: POST
    data_selector: amount
    params: {}
- name: webhook
  endpoint:
    path: /api/payment-provider/webhook/yuno
    method: POST
    data_selector: webhook details
    params: {}
- name: customer
  endpoint:
    path: /customer
    method: POST
- name: paymentMethod
  endpoint:
    path: /paymentMethod
    method: POST
- name: checkoutSession
  endpoint:
    path: /checkoutSession
    method: POST
- name: payments
  endpoint:
    path: /payments
    method: POST
- name: subscriptions
  endpoint:
    path: /subscriptions
    method: POST
- name: recipients
  endpoint:
    path: /recipients
    method: POST
- name: installmentPlans
  endpoint:
    path: /installmentPlans
    method: POST
- name: customers
  endpoint:
    path: /reference/the-customer-object
    method: GET
- name: payments
  endpoint:
    path: /reference/the-payment-object
    method: GET
- name: subscriptions
  endpoint:
    path: /reference/the-subscription-object
    method: GET
- name: reports
  endpoint:
    path: /reference/the-reports-object
    method: GET
- name: customer.create
  endpoint:
    path: /customer.create
    method: POST
- name: customer.retrieve
  endpoint:
    path: /customer.retrieve
    method: GET
- name: customer.retrieveByExternalId
  endpoint:
    path: /customer.retrieveByExternalId
    method: GET
- name: customer.update
  endpoint:
    path: /customer.update
    method: PUT
- name: paymentMethod.enroll
  endpoint:
    path: /paymentMethod.enroll
    method: POST
- name: paymentMethod.retrieve
  endpoint:
    path: /paymentMethod.retrieve
    method: GET
- name: paymentMethod.retrieveEnrolled
  endpoint:
    path: /paymentMethod.retrieveEnrolled
    method: GET
- name: paymentMethod.unenroll
  endpoint:
    path: /paymentMethod.unenroll
    method: DELETE
- name: checkoutSession.create
  endpoint:
    path: /checkoutSession.create
    method: POST
- name: checkoutSession.retrievePaymentMethods
  endpoint:
    path: /checkoutSession.retrievePaymentMethods
    method: GET
- name: payments.create
  endpoint:
    path: /payments.create
    method: POST
- name: payments.retrieve
  endpoint:
    path: /payments.retrieve
    method: GET
- name: payments.retrieveByMerchantOrderId
  endpoint:
    path: /payments.retrieveByMerchantOrderId
    method: GET
- name: payments.refund
  endpoint:
    path: /payments.refund
    method: POST
- name: payments.cancelOrRefund
  endpoint:
    path: /payments.cancelOrRefund
    method: POST
- name: payments.cancelOrRefundWithTransaction
  endpoint:
    path: /payments.cancelOrRefundWithTransaction
    method: POST
- name: payments.cancel
  endpoint:
    path: /payments.cancel
    method: DELETE
- name: payments.authorize
  endpoint:
    path: /payments.authorize
    method: POST
- name: payments.captureAuthorization
  endpoint:
    path: /payments.captureAuthorization
    method: POST
- name: paymentLinks.create
  endpoint:
    path: /paymentLinks.create
    method: POST
- name: paymentLinks.retrieve
  endpoint:
    path: /paymentLinks.retrieve
    method: GET
- name: paymentLinks.cancel
  endpoint:
    path: /paymentLinks.cancel
    method: DELETE
- name: subscriptions.create
  endpoint:
    path: /subscriptions.create
    method: POST
- name: subscriptions.retrieve
  endpoint:
    path: /subscriptions.retrieve
    method: GET
- name: subscriptions.pause
  endpoint:
    path: /subscriptions.pause
    method: POST
- name: subscriptions.resume
  endpoint:
    path: /subscriptions.resume
    method: POST
- name: subscriptions.update
  endpoint:
    path: /subscriptions.update
    method: PUT
- name: subscriptions.cancel
  endpoint:
    path: /subscriptions.cancel
    method: DELETE
- name: recipients.create
  endpoint:
    path: /recipients.create
    method: POST
- name: recipients.retrieve
  endpoint:
    path: /recipients.retrieve
    method: GET
- name: recipients.update
  endpoint:
    path: /recipients.update
    method: PUT
- name: recipients.delete
  endpoint:
    path: /recipients.delete
    method: DELETE
- name: recipients.createOnboarding
  endpoint:
    path: /recipients.createOnboarding
    method: POST
- name: installmentPlans.create
  endpoint:
    path: /installmentPlans.create
    method: POST
- name: installmentPlans.retrieve
  endpoint:
    path: /installmentPlans.retrieve
    method: GET
- name: installmentPlans.retrieveAll
  endpoint:
    path: /installmentPlans.retrieveAll
    method: GET
- name: installmentPlans.update
  endpoint:
    path: /installmentPlans.update
    method: PUT
- name: installmentPlans.delete
  endpoint:
    path: /installmentPlans.delete
    method: DELETE
- name: documentation.read
  endpoint:
    path: /documentation.read
    method: GET
- name: passenger_type
  endpoint:
    path: /reference/passenger-type
    method: GET
    data_selector: passenger_types
- name: fare_class_code
  endpoint:
    path: /reference/fare-class-code
    method: GET
    data_selector: fare_class_codes
- name: loyalty_tier
  endpoint:
    path: /reference/loyalty-tier
    method: GET
    data_selector: loyalty_tiers
- name: successful_authentication
  endpoint:
    path: /eci/successful_authentication
    method: GET
    data_selector: codes
    params: {}
- name: attempted_authentication
  endpoint:
    path: /eci/attempted_authentication
    method: GET
    data_selector: codes
    params: {}
- name: failed_authentication
  endpoint:
    path: /eci/failed_authentication
    method: GET
    data_selector: codes
    params: {}
- name: Payment Methods
  endpoint:
    path: /payment-methods
    method: GET
- name: transaction_category
  endpoint:
    path: /reference/transaction-category-list
    method: GET
    data_selector: transaction_categories
    params: {}
- name: type
  endpoint:
    path: /shipping/type
    method: GET
    data_selector: types
- name: carrier
  endpoint:
    path: /shipping/carrier
    method: GET
    data_selector: carriers
- name: customer
  endpoint:
    path: /reference/the-customer-object
    method: GET
- name: customer
  endpoint:
    path: /customers
    method: GET
    data_selector: customers
    params: {}
- name: successful_authentication
  endpoint:
    path: /reference/eci-indicators-list/successful-authentication
    method: GET
    data_selector: codes
- name: attempted_authentication
  endpoint:
    path: /reference/eci-indicators-list/attempted-authentication
    method: GET
    data_selector: codes
- name: failed_authentication
  endpoint:
    path: /reference/eci-indicators-list/failed-authentication
    method: GET
    data_selector: codes
- name: customer
  endpoint:
    path: /v1/customers
    method: POST
- name: customer
  endpoint:
    path: /v1/customers/{id}
    method: GET
    data_selector: records
- name: customer
  endpoint:
    path: /v1/customers
    method: GET
    data_selector: response
    params: {}
- name: Customer
  endpoint:
    path: /reference/the-customer-object
    method: GET
- name: Payment
  endpoint:
    path: /reference/the-payment-object
    method: GET
- name: Recipient
  endpoint:
    path: /reference/the-recipient-object
    method: GET
- name: Payout
  endpoint:
    path: /reference/the-payout-object
    method: GET
- name: Report
  endpoint:
    path: /reference/the-reports-object
    method: GET
- name: customer
  endpoint:
    path: /v1/customers/{id}
    method: PATCH
- name: delete_customer
  endpoint:
    path: /v1/customers/{id}
    method: DELETE
- name: Enrollment Status
  endpoint:
    path: /reference/enrollment-workflow
    method: GET
- name: customer_session
  endpoint:
    path: /customer_session
    method: POST
    data_selector: records
- name: transaction_category
  endpoint:
    path: /reference/transaction-category-list
    method: GET
    data_selector: records
    params: {}
- name: shipping_types
  endpoint:
    path: /shipping/types
    method: GET
    data_selector: types
- name: shipping_carriers
  endpoint:
    path: /shipping/carriers
    method: GET
    data_selector: carriers
- name: customer_session
  endpoint:
    path: /v1/customers/sessions
    method: POST
    data_selector: customer_session
    params: {}
- name: Customer
  endpoint:
    path: /reference/the-customer-object
    method: GET
- name: customer
  endpoint:
    path: /retrieve/customer
    method: GET
    data_selector: records
    params: {}
- name: Retrieve Payment Methods To Enroll
  endpoint:
    path: /the-payment-method-object-checkout
    method: GET
- name: Enroll Payment Method
  endpoint:
    path: /enroll-payment-method-checkout
    method: POST
- name: Retrieve Payment Method By ID
  endpoint:
    path: /retrieve-payment-method-by-id-checkout
    method: GET
- name: Unenroll Payment Method
  endpoint:
    path: /unenroll-payment-method-checkout
    method: POST
- name: payment_method
  endpoint:
    path: /reference/the-payment-method-object
    method: GET
    data_selector: records
    params: {}
- name: customers
  endpoint:
    path: /v1/customers/{id}
    method: GET
- name: payment_methods
  endpoint:
    path: /v1/checkout/customers/sessions/{customer_session}/payment-methods
    method: GET
- name: enroll_payment_method
  endpoint:
    path: /v1/customers/sessions/{customer_session}/payment-methods
    method: POST
- name: customer
  endpoint:
    path: /v1/customers
    method: GET
    data_selector: customers
    params:
      merchant_customer_id: required
- name: payment_method
  endpoint:
    path: /v1/payment-methods/{payment_method_id}
    method: GET
    data_selector: response
- name: customer
  endpoint:
    path: /v1/customers/{id}
    method: PATCH
- name: customer
  endpoint:
    path: /v1/customers/{id}
    method: DELETE
    data_selector: object
    params: {}
- name: unenroll_payment_method
  endpoint:
    path: /v1/customers/payment-methods/{payment_method_id}/unenroll
    method: POST
    data_selector: object
- name: enrollment_status
  endpoint:
    path: /reference/enrollment-workflow
    method: GET
- name: customer_session
  endpoint:
    path: /the-customer-session-object
    method: POST
    data_selector: customer_session
    params: {}
- name: Retrieve Payment Methods To Enroll
  endpoint:
    path: /retrieve-payment-methods-to-enroll-checkout
    method: GET
- name: Enroll Payment Method
  endpoint:
    path: /enroll-payment-method-checkout
    method: POST
- name: Retrieve Payment Method By ID
  endpoint:
    path: /retrieve-payment-method-by-id-checkout
    method: GET
- name: Unenroll Payment Method
  endpoint:
    path: /unenroll-payment-method-checkout
    method: POST
- name: payment_method
  endpoint:
    path: /reference/the-payment-method-object-checkout
    method: GET
    data_selector: records
    params: {}
- name: customer_session
  endpoint:
    path: /v1/customers/sessions
    method: POST
    data_selector: customer_session
- name: enroll_payment_method
  endpoint:
    path: /v1/customers/{customer_id}/payment-methods
    method: POST
    data_selector: ''
    params: {}
- name: Retrieve Payment Methods To Enroll
  endpoint:
    path: /retrieve-payment-methods-to-enroll-checkout
    method: GET
- name: Enroll Payment Method
  endpoint:
    path: /enroll-payment-method-checkout
    method: POST
- name: Retrieve Payment Method By ID
  endpoint:
    path: /retrieve-payment-method-by-id-checkout
    method: GET
- name: Unenroll Payment Method
  endpoint:
    path: /unenroll-payment-method-checkout
    method: POST
- name: payment_method
  endpoint:
    path: /customers/customer_id/payment-methods
    method: POST
    data_selector: object
    params: {}
- name: payment_method
  endpoint:
    path: /reference/the-payment-method-object-checkout
    method: GET
    data_selector: records
    params: {}
- name: enrolled_payment_method
  endpoint:
    path: /v1/customers/{customer_id}/payment-methods/{payment_method_id}
    method: GET
    data_selector: response
    params: {}
- name: payment_methods
  endpoint:
    path: /v1/checkout/customers/sessions/{customer_session}/payment-methods
    method: GET
    data_selector: response
- name: enroll_payment_method
  endpoint:
    path: /v1/customers/sessions/{customer_session}/payment-methods
    method: POST
- name: enrolled_payment_methods
  endpoint:
    path: /v1/customers/{customer_id}/payment-methods
    method: GET
    data_selector: payment_methods
- name: payment_method
  endpoint:
    path: /v1/payment-methods/{payment_method_id}
    method: GET
- name: unenroll_payment_method
  endpoint:
    path: /v1/customers/{customer_id}/payment-methods/{payment_method_id}/unenroll
    method: POST
- name: unenroll_payment_method
  endpoint:
    path: /v1/customers/payment-methods/{payment_method_id}/unenroll
    method: POST
- name: checkout_session
  endpoint:
    path: /checkout/session
    method: POST
    data_selector: checkout_session
    params: {}
- name: Retrieve Payment Methods To Enroll
  endpoint:
    path: /retrieve-payment-methods-to-enroll-checkout
    method: GET
- name: Enroll Payment Method
  endpoint:
    path: /enroll-payment-method-checkout
    method: POST
- name: Retrieve Payment Method By ID
  endpoint:
    path: /retrieve-payment-method-by-id-checkout
    method: GET
- name: Unenroll Payment Method
  endpoint:
    path: /unenroll-payment-method-checkout
    method: POST
- name: checkout_session
  endpoint:
    path: /v1/checkout/sessions
    method: POST
    data_selector: checkout_session
    params: {}
- name: payment_method
  endpoint:
    path: /reference/the-payment-method-object-checkout
    method: GET
    data_selector: attributes
    params: {}
- name: checkout_session
  endpoint:
    path: /checkout/sessions
    method: POST
    data_selector: object
    params: {}
- name: payment_methods
  endpoint:
    path: /v1/checkout/sessions/{checkout_session}/payment-methods
    method: GET
- name: enroll_payment_method
  endpoint:
    path: /v1/customers/{customer_id}/payment-methods
    method: POST
    data_selector: object
    params: {}
- name: one_time_use_token
  endpoint:
    path: /v1/tokens
    method: POST
- name: payment_methods
  endpoint:
    path: /customers/customer_id/payment-methods
    method: POST
- name: checkout_session
  endpoint:
    path: /v1/checkout/sessions/{id}
    method: GET
- name: enrolled_payment_method
  endpoint:
    path: /v1/customers/{customer_id}/payment-methods/{payment_method_id}
    method: GET
    data_selector: payment_method
    params: {}
- name: payment_methods
  endpoint:
    path: /v1/customers/{customer_id}/payment-methods
    method: GET
    data_selector: payment_methods
- name: payment_status
  endpoint:
    path: /reference/status-and-response-codes
    method: GET
    data_selector: payments_status
    params: {}
- name: unenroll_payment_method
  endpoint:
    path: /v1/customers/{customer_id}/payment-methods/{payment_method_id}/unenroll
    method: POST
- name: Manage Payments
  endpoint:
    path: /manage-payments
    method: POST
- name: Retrieve Payment by ID
  endpoint:
    path: /retrieve-payment-by-id
    method: GET
- name: checkout_session
  endpoint:
    path: /checkout/session
    method: POST
    data_selector: checkout_session
    params: {}
- name: merchant_advice_codes
  endpoint:
    path: /merchant_advice_codes
    method: GET
    data_selector: macs
    params: {}
- name: payment
  endpoint:
    path: /manage/payments
    method: GET
- name: checkout_session
  endpoint:
    path: /v1/checkout/sessions
    method: POST
- name: payments
  endpoint:
    path: /payments
    method: GET
    data_selector: records
    params: {}
- name: payment_methods
  endpoint:
    path: /v1/checkout/sessions/{checkout_session}/payment-methods
    method: GET
- name: ticket
  endpoint:
    path: /tickets
    method: GET
    data_selector: records
    params: {}
- name: one_time_use_token
  endpoint:
    path: /v1/tokens
    method: POST
- name: transportations
  endpoint:
    path: /transportations
    method: GET
    data_selector: transportations
    params: {}
- name: transactions
  endpoint:
    path: /transactions
    method: GET
    data_selector: transactions
    params: {}
- name: checkout_session
  endpoint:
    path: /v1/checkout/sessions/{id}
    method: GET
- name: payment_status
  endpoint:
    path: /reference/status-and-response-codes
    method: GET
    data_selector: payment_status
- name: iso8583_response
  endpoint:
    path: /iso8583_response
    method: GET
    data_selector: records
    params: {}
- name: manage_payments
  endpoint:
    path: /manage-payments
    method: post
- name: retrieve_payment
  endpoint:
    path: /retrieve-payment
    method: get
- name: create_payment
  endpoint:
    path: /create-payment
    method: post
- name: cancel_payment
  endpoint:
    path: /cancel-payment
    method: post
- name: payment
  endpoint:
    path: /payments
    method: POST
- name: merchant_advice_codes
  endpoint:
    path: /merchant_advice_codes
    method: GET
    data_selector: macs
    params: {}
- name: payment
  endpoint:
    path: /manage/payments
    method: POST
- name: payout
  endpoint:
    path: /manage/payouts
    method: POST
- name: report
  endpoint:
    path: /manage/reports
    method: POST
- name: installment
  endpoint:
    path: /manage/installments
    method: POST
- name: payment
  endpoint:
    path: /v1/payments/{id}
    method: GET
    params:
      raw_response: 'false'
      transactions_history: 'false'
- name: payment
  endpoint:
    path: /payments
    method: GET
    data_selector: payments
- name: ticket
  endpoint:
    path: /api/tickets
    method: GET
    data_selector: tickets
    params: {}
- name: payment
  endpoint:
    path: /v1/payments
    method: GET
    data_selector: payments
    params:
      merchant_order_id: string
- name: refund_payment
  endpoint:
    path: /v1/payments/{id}/transactions/{transaction_id}/refund
    method: POST
- name: tickets
  endpoint:
    path: /tickets
    method: GET
    data_selector: tickets
- name: transportations
  endpoint:
    path: /transportations
    method: GET
    data_selector: transportations
- name: cancel_or_refund_payment
  endpoint:
    path: /v1/payments/{payment_id}/cancel-or-refund
    method: POST
- name: cancel_or_refund_payment_with_transaction
  endpoint:
    path: /v1/payments/{payment_id}/transactions/{transaction_id}/cancel-or-refund
    method: POST
- name: card_data
  endpoint:
    path: /card_data
    method: GET
    data_selector: records
- name: three_d_secure
  endpoint:
    path: /three_d_secure
    method: GET
    data_selector: records
- name: network_token
  endpoint:
    path: /network_token
    method: GET
    data_selector: records
- name: stored_credentials
  endpoint:
    path: /stored_credentials
    method: GET
    data_selector: records
- name: wallet
  endpoint:
    path: /wallet
    method: GET
    data_selector: records
- name: bnpl
  endpoint:
    path: /bnpl
    method: GET
    data_selector: records
- name: bank_transfer
  endpoint:
    path: /bank_transfer
    method: GET
    data_selector: records
- name: ticket
  endpoint:
    path: /ticket
    method: GET
    data_selector: records
- name: payment_link
  endpoint:
    path: /payment_link
    method: GET
    data_selector: records
- name: iso8583_response_code
  endpoint:
    path: /iso8583_response_code
    method: GET
- name: iso8583_response_message
  endpoint:
    path: /iso8583_response_message
    method: GET
- name: cancel_payment
  endpoint:
    path: /v1/payments/{payment_id}/transactions/{transaction_id}/cancel
    method: POST
- name: payment
  endpoint:
    path: /v1/payments
    method: POST
- name: authorize_payment
  endpoint:
    path: /v1/payments
    method: POST
- name: payment
  endpoint:
    path: /payments
    method: POST
- name: payment
  endpoint:
    path: /v1/payments/{id}
    method: GET
    data_selector: response
    params: {}
- name: capture_authorization
  endpoint:
    path: /v1/payments/{payment_id}/transactions/{transaction_id}/capture
    method: POST
- name: payment
  endpoint:
    path: /v1/payments
    method: GET
    data_selector: payments
    params:
      merchant_order_id: string
- name: dispute_chargeback
  endpoint:
    path: /v1/payments/{payment_id}/transactions/{transaction_id}/dispute
    method: POST
    data_selector: ''
    params: {}
- name: issuers
  endpoint:
    path: /v1/issuers
    method: GET
    data_selector: ''
    params: {}
- name: refund_payment
  endpoint:
    path: /v1/payments/{id}/transactions/{transaction_id}/refund
    method: POST
- name: notify_fulfillment
  endpoint:
    path: /v1/payments/{payment_id}/fulfillments
    method: POST
- name: cancel_or_refund_payment
  endpoint:
    path: /v1/payments/{payment_id}/cancel-or-refund
    method: POST
    data_selector: ''
    params: {}
- name: cancel_or_refund_payment_transaction
  endpoint:
    path: /v1/payments/{payment_id}/transactions/{transaction_id}/cancel-or-refund
    method: POST
    data_selector: ''
    params: {}
- name: payments
  endpoint:
    path: /payments
    method: POST
    data_selector: id
    params: {}
- name: cancel_payment
  endpoint:
    path: /v1/payments/{payment_id}/transactions/{transaction_id}/cancel
    method: POST
- name: payments
  endpoint:
    path: /payments
    method: POST
    data_selector: null
    params: {}
- name: authorize_payment
  endpoint:
    path: /v1/payments
    method: POST
- name: bank_transfer
  endpoint:
    path: /payments
    method: POST
    data_selector: id
    params: {}
- name: pix
  endpoint:
    path: /payments
    method: POST
    data_selector: id
    params: {}
- name: capture_authorization
  endpoint:
    path: /v1/payments/{payment_id}/transactions/{transaction_id}/capture
    method: POST
- name: PSE
  endpoint:
    path: /payments
    method: POST
    data_selector: id
    params: {}
- name: SafetyPay
  endpoint:
    path: /payments
    method: POST
    data_selector: id
    params: {}
- name: SPEI
  endpoint:
    path: /payments
    method: POST
    data_selector: id
    params: {}
- name: dispute_chargeback
  endpoint:
    path: /v1/payments/{payment_id}/transactions/{transaction_id}/dispute
    method: POST
- name: codi_payment
  endpoint:
    path: /payments
    method: POST
    data_selector: transactions
    params: {}
- name: nupay_payment
  endpoint:
    path: /payments
    method: POST
    data_selector: transactions
    params: {}
- name: issuers
  endpoint:
    path: /v1/issuers
    method: GET
- name: payments
  endpoint:
    path: /payments
    method: POST
    data_selector: id
    params: {}
- name: fulfillment
  endpoint:
    path: /v1/payments/{payment_id}/fulfillments
    method: POST
    data_selector: object
- name: payments
  endpoint:
    path: /payments
    method: POST
    data_selector: response
    params: {}
- name: customer
  endpoint:
    path: /reference/the-customer-object
    method: GET
- name: payment
  endpoint:
    path: /reference/the-payment-object
    method: GET
- name: payout
  endpoint:
    path: /reference/the-payout-object
    method: GET
- name: subscription
  endpoint:
    path: /reference/the-subscription-object
    method: GET
- name: recipient
  endpoint:
    path: /reference/the-recipient-object
    method: GET
- name: payments
  endpoint:
    path: /v1/payments
    method: POST
    data_selector: data
- name: payments
  endpoint:
    path: /v1/payments
    method: POST
    data_selector: id
- name: payments
  endpoint:
    path: /v1/payments
    method: POST
    data_selector: id
- name: payment
  endpoint:
    path: /payments
    method: POST
    data_selector: id
    params: {}
- name: payments
  endpoint:
    path: /payments
    method: POST
    data_selector: id
- name: bank_transfer
  endpoint:
    path: /v1/payments
    method: POST
    data_selector: id
    params: {}
- name: pix
  endpoint:
    path: /v1/payments
    method: POST
    data_selector: id
    params: {}
- name: payments
  endpoint:
    path: /v1/payments
    method: POST
    data_selector: response
    params: {}
- name: payments
  endpoint:
    path: /payments
    method: POST
    data_selector: id
    params: {}
- name: PSE
  endpoint:
    path: /payments
    method: POST
    data_selector: id
    params: {}
- name: SafetyPay
  endpoint:
    path: /payments
    method: POST
    data_selector: id
    params: {}
- name: SPEI
  endpoint:
    path: /payments
    method: POST
    data_selector: id
    params: {}
- name: payments
  endpoint:
    path: /v1/payments
    method: POST
    data_selector: id
    params: {}
- name: payments
  endpoint:
    path: /payments
    method: POST
    data_selector: response
    params: {}
- name: codi_payment
  endpoint:
    path: /payments
    method: POST
    data_selector: id
    params: {}
- name: nupay_payment
  endpoint:
    path: /payments
    method: POST
    data_selector: id
    params: {}
- name: payments
  endpoint:
    path: /payments
    method: POST
    data_selector: id
- name: payments
  endpoint:
    path: /payments
    method: POST
    data_selector: id
- name: payments
  endpoint:
    path: /payments
    method: POST
    data_selector: id
    params: {}
- name: payments
  endpoint:
    path: /payments
    method: POST
    data_selector: response
    params: {}
- name: payments
  endpoint:
    path: /v1/payments
    method: POST
- name: payout
  endpoint:
    path: /reference/retrieve-payout-by-id
    method: GET
- name: report
  endpoint:
    path: /reference/list-all-reports
    method: GET
- name: installment
  endpoint:
    path: /reference/get-installments-plan-by-account
    method: GET
- name: currency_conversion
  endpoint:
    path: /reference/get-conversion-rate
    method: POST
- name: ai_caller
  endpoint:
    path: /reference/ai-caller
    method: POST
- name: payments
  endpoint:
    path: /v1/payments
    method: POST
    data_selector: payment
    params: {}
- name: payment_link
  endpoint:
    path: /v1/payments
    method: POST
    data_selector: id
    params: {}
- name: payments
  endpoint:
    path: /v1/payments
    method: POST
    data_selector: id
- name: tarjeta_clave
  endpoint:
    path: /v1/payments
    method: POST
    data_selector: id
    params: {}
- name: webpay
  endpoint:
    path: /v1/payments
    method: POST
    data_selector: id
    params: {}
- name: pago_efectivo
  endpoint:
    path: /v1/payments
    method: POST
    data_selector: id
    params: {}
- name: payments
  endpoint:
    path: /payments
    method: POST
    data_selector: id
- name: payments
  endpoint:
    path: /payments
    method: POST
    data_selector: id
    params: {}
- name: payment
  endpoint:
    path: /v1/payments
    method: POST
    data_selector: id
    params: {}
- name: payments
  endpoint:
    path: /payments
    method: POST
    data_selector: id
- name: payments
  endpoint:
    path: /v1/payments
    method: POST
    data_selector: id
    params: {}
- name: payments
  endpoint:
    path: /payments
    method: POST
    data_selector: response
    params: {}
- name: payment
  endpoint:
    path: /v1/payments
    method: POST
    data_selector: id
    params: {}
- name: payments
  endpoint:
    path: /payments
    method: POST
    data_selector: id
- name: payments
  endpoint:
    path: /payments
    method: POST
    data_selector: response
    params: {}
- name: payments
  endpoint:
    path: /payments
    method: POST
    data_selector: transactions
    params: {}
- name: payment_link_status
  endpoint:
    path: /reference/status-payment-links
    method: GET
    data_selector: status
    params: {}
- name: payment_link
  endpoint:
    path: /the-payment-link-object
    method: GET
- name: payment_link
  endpoint:
    path: /payment_links
    method: POST
    data_selector: payment_links
- name: payout
  endpoint:
    path: /reference/create-payout
    method: POST
- name: report
  endpoint:
    path: /reference/create-a-report
    method: POST
- name: installments
  endpoint:
    path: /reference/create-installments-plan
    method: POST
- name: conversion_rate
  endpoint:
    path: /reference/get-conversion-rate
    method: POST
- name: ai_caller
  endpoint:
    path: /reference/ai-caller
    method: POST
- name: Payment Links
  endpoint:
    path: /reference/payment-link
    method: GET
- name: Create Payment Link
  endpoint:
    path: /reference/create-payment-link
    method: POST
- name: Cancel Payment Link
  endpoint:
    path: /reference/cancel-payment-link
    method: POST
- name: Retrieve Payment Link
  endpoint:
    path: /reference/retrieve-payment-link
    method: GET
- name: payment_link
  endpoint:
    path: /payments
    method: POST
    data_selector: id
    params: {}
- name: payment_links
  endpoint:
    path: /v1/payment-links
    method: POST
- name: payment_link
  endpoint:
    path: /v1/payment-links/{code}
    method: GET
- name: tarjeta_clave
  endpoint:
    path: /payments
    method: POST
    data_selector: id
    params: {}
- name: webpay
  endpoint:
    path: /payments
    method: POST
    data_selector: id
    params: {}
- name: pago_efectivo
  endpoint:
    path: /payments
    method: POST
    data_selector: id
    params: {}
- name: cancel_payment_link
  endpoint:
    path: /v1/payment-links/{code}/cancel
    method: POST
- name: subscription_status
  endpoint:
    path: /reference/status-subscriptions
    method: GET
- name: payments
  endpoint:
    path: /payments
    method: POST
    data_selector: id
    params: {}
- name: subscription
  endpoint:
    path: /subscriptions
    method: GET
    data_selector: subscriptions
- name: payment
  endpoint:
    path: /payments
    method: POST
    data_selector: id
    params: {}
- name: subscription
  endpoint:
    path: /v1/subscriptions
    method: POST
    data_selector: object
- name: payments
  endpoint:
    path: /payments
    method: POST
    data_selector: id
    params: {}
- name: subscription
  endpoint:
    path: /subscriptions
    method: POST
- name: payment
  endpoint:
    path: /payments
    method: POST
    data_selector: id
    params: {}
- name: subscriptions
  endpoint:
    path: /v1/subscriptions/{subscription_id}
    method: GET
- name: payments
  endpoint:
    path: /v1/payments
    method: POST
    data_selector: id
- name: pause_subscription
  endpoint:
    path: /v1/subscriptions/{subscription_id}/pause
    method: POST
- name: payment_link_status
  endpoint:
    path: /reference/status-payment-links
    method: GET
- name: resume_subscription
  endpoint:
    path: /v1/subscriptions/{subscription_id}/resume
    method: POST
- name: Payment Link
  endpoint:
    path: /the-payment-link-object
    method: GET
- name: subscriptions
  endpoint:
    path: /v1/subscriptions/{id}
    method: PATCH
- name: payment_link
  endpoint:
    path: /reference/create-payment-link
    method: POST
    data_selector: payment_link
    params: {}
- name: subscriptions
  endpoint:
    path: /subscriptions/id
    method: PATCH
- name: Payment Links
  endpoint:
    path: /reference/payment-link
    method: GET
- name: Manage Payment Links
  endpoint:
    path: /reference/manage-payment-links
    method: POST
- name: Cancel Payment Link
  endpoint:
    path: /reference/cancel-payment-link
    method: POST
- name: Retrieve Payment Link
  endpoint:
    path: /reference/retrieve-payment-link
    method: GET
- name: Create Payment Link
  endpoint:
    path: /reference/create-payment-link
    method: POST
- name: cancel_subscription
  endpoint:
    path: /v1/subscriptions/{subscription_id}/cancel
    method: POST
- name: payment_link
  endpoint:
    path: /v1/payment-links
    method: POST
- name: recipient
  endpoint:
    path: /reference/the-recipient-object
    method: GET
    data_selector: records
- name: payment_link
  endpoint:
    path: /v1/payment-links/{code}
    method: GET
- name: recipient
  endpoint:
    path: /v1/recipients
    method: POST
- name: cancel_payment_link
  endpoint:
    path: /v1/payment-links/{code}/cancel
    method: POST
- name: recipient
  endpoint:
    path: /v1/recipients/{recipient_id}
    method: GET
    data_selector: recipient
- name: subscription_status
  endpoint:
    path: /reference/status-subscriptions
    method: GET
- name: recipient
  endpoint:
    path: /v1/recipients/{recipient_id}
    method: PATCH
- name: subscription
  endpoint:
    path: /manage-subscriptions
    method: GET
    data_selector: records
- name: recipient
  endpoint:
    path: /v1/recipients/{recipient_id}
    method: DELETE
    data_selector: 'null'
    params: {}
- name: subscriptions
  endpoint:
    path: /v1/subscriptions
    method: POST
- name: create_onboarding
  endpoint:
    path: /v1/recipients/{recipient_id}/onboardings
    method: POST
- name: update_onboarding
  endpoint:
    path: /v1/recipients/{recipient_id}/onboardings/{onboarding_id}
    method: PATCH
- name: subscriptions
  endpoint:
    path: /v1/subscriptions/{subscription_id}
    method: GET
- name: continue_onboarding
  endpoint:
    path: /v1/recipients/{recipient_id}/onboardings/{onboarding_id}/continue
    method: POST
- name: pause_subscription
  endpoint:
    path: /v1/subscriptions/{subscription_id}/pause
    method: POST
- name: recipients
  endpoint:
    path: /recipients
    method: POST
    data_selector: object
- name: onboarding
  endpoint:
    path: /recipients/recipient_id/onboardings/onboarding_id/continue
    method: POST
    data_selector: object
- name: resume_subscription
  endpoint:
    path: /v1/subscriptions/{subscription_id}/resume
    method: POST
- name: block_onboarding
  endpoint:
    path: /v1/recipients/{recipient_id}/onboardings/{onboarding_id}/block
    method: POST
- name: subscription
  endpoint:
    path: /v1/subscriptions/{id}
    method: PATCH
- name: update_subscription
  endpoint:
    path: /subscriptions/id
    method: PATCH
- name: unblock_onboarding
  endpoint:
    path: /v1/recipients/{recipient_id}/onboardings/{onboarding_id}/unblock
    method: POST
- name: cancel_subscription
  endpoint:
    path: /v1/subscriptions/{subscription_id}/cancel
    method: POST
- name: transfer_onboarding
  endpoint:
    path: /v1/recipients/{recipient_id}/onboardings/{onboarding_id}/transfer
    method: POST
- name: recipient
  endpoint:
    path: /reference/the-recipient-object
    method: GET
    data_selector: records
- name: recipient_onboarding_transfer
  endpoint:
    path: /recipients/recipient_id/onboardings/onboarding_id/transfer
    method: POST
- name: recipient
  endpoint:
    path: /v1/recipients
    method: POST
- name: recipient
  endpoint:
    path: /v1/recipients/{recipient_id}
    method: GET
- name: recipient
  endpoint:
    path: /v1/recipients/{recipient_id}
    method: PATCH
- name: reverse_transfer_onboarding
  endpoint:
    path: /recipients/recipient_id/onboardings/onboarding_id/reverse-transfer
    method: POST
- name: cancel_onboarding
  endpoint:
    path: /v1/recipients/{recipient_id}/onboardings/{onboarding_id}/cancel
    method: POST
- name: recipient
  endpoint:
    path: /v1/recipients/{recipient_id}
    method: DELETE
    data_selector: ''
    params: {}
- name: payout_status
  endpoint:
    path: /reference/payout-workflow
    method: GET
    data_selector: status
    params: {}
- name: create_onboarding
  endpoint:
    path: /v1/recipients/{recipient_id}/onboardings
    method: POST
- name: payout
  endpoint:
    path: /the-payout-object
    method: GET
    data_selector: records
- name: update_onboarding
  endpoint:
    path: /v1/recipients/{recipient_id}/onboardings/{onboarding_id}
    method: PATCH
- name: payout
  endpoint:
    path: /payouts
    method: GET
    data_selector: transactions
    params: {}
- name: continue_onboarding
  endpoint:
    path: /v1/recipients/{recipient_id}/onboardings/{onboarding_id}/continue
    method: POST
- name: payout
  endpoint:
    path: /v1/payouts
    method: POST
- name: payout
  endpoint:
    path: /v1/payouts/{payout_code}
    method: GET
- name: recipients
  endpoint:
    path: /recipients
    method: POST
    data_selector: object
    params: {}
- name: onboardings
  endpoint:
    path: /recipients/recipient_id/onboardings/onboarding_id/continue
    method: POST
    data_selector: object
    params: {}
- name: payout
  endpoint:
    path: /v1/payouts
    method: GET
    data_selector: details
    params:
      merchant_reference: ''
- name: report_status
  endpoint:
    path: /reference/report-status
    method: GET
    data_selector: reports
    params: {}
- name: block_recipient
  endpoint:
    path: /v1/recipients/{recipient_id}/onboardings/{onboarding_id}/block
    method: POST
- name: reports
  endpoint:
    path: /manage/reports
    method: GET
    data_selector: reports
    params: {}
- name: payment_report
  endpoint:
    path: /payment/report
    method: GET
    data_selector: records
    params: {}
- name: transaction_report
  endpoint:
    path: /reports/transaction
    method: GET
    data_selector: transactions
    params: {}
- name: transaction_reconciliation_report
  endpoint:
    path: /reports/transaction_reconciliation
    method: GET
    data_selector: reconciliations
    params: {}
- name: recipient_onboarding_transfer
  endpoint:
    path: /v1/recipients/recipient_id/onboardings/onboarding_id/transfer
    method: POST
- name: settlement_header
  endpoint:
    path: /settlement/header
    method: GET
    data_selector: records
- name: settlement_body
  endpoint:
    path: /settlement/body
    method: GET
    data_selector: records
- name: communications_report
  endpoint:
    path: /communications/report
    method: GET
    data_selector: records
- name: fraud_transactions_report
  endpoint:
    path: /fraud/transactions
    method: GET
    data_selector: records
- name: payouts_report
  endpoint:
    path: /payouts/report
    method: GET
    data_selector: payouts
- name: fees_report
  endpoint:
    path: /fees/report
    method: GET
    data_selector: fees
- name: agenda_report
  endpoint:
    path: /agenda/report
    method: GET
    data_selector: agenda
- name: reverse_transfer
  endpoint:
    path: /recipients/recipient_id/onboardings/onboarding_id/reverse-transfer
    method: POST
- name: cancel_onboarding
  endpoint:
    path: /cancel-recipient
    method: POST
- name: transfer_onboarding
  endpoint:
    path: /transfer-onboarding
    method: POST
- name: sales_conciliation_report
  endpoint:
    path: /sales_conciliation
    method: GET
    data_selector: transactions
    params: {}
- name: advancements_report
  endpoint:
    path: /advancements
    method: GET
    data_selector: operations
    params: {}
- name: cancel_onboarding
  endpoint:
    path: /v1/recipients/{recipient_id}/onboardings/{onboarding_id}/cancel
    method: POST
- name: payout_status
  endpoint:
    path: /reference/payout-workflow
    method: GET
    data_selector: status
    params: {}
- name: reports
  endpoint:
    path: /v1/reports
    method: POST
    data_selector: id
- name: payout
  endpoint:
    path: /the-payout-object
    method: GET
- name: payout
  endpoint:
    path: /reference/create-payout
    method: POST
    data_selector: transactions
- name: reports
  endpoint:
    path: /reports
    method: POST
    data_selector: result
    params: {}
- name: report
  endpoint:
    path: /v1/reports/{report_id}
    method: GET
    data_selector: report
- name: payout
  endpoint:
    path: /v1/payouts/{payout_code}
    method: GET
- name: payout
  endpoint:
    path: /v1/payouts
    method: GET
    data_selector: response
    params:
      merchant_reference: query
- name: download_report
  endpoint:
    path: /v2/reports/{report_id}/download
    method: GET
- name: report_status
  endpoint:
    path: /reference/report-status
    method: GET
    data_selector: statuses
    params: {}
- name: list_all_reports
  endpoint:
    path: /v1/reports/list
    method: GET
- name: reports
  endpoint:
    path: /reference/the-reports-object
    method: GET
    data_selector: reports
    params: {}
- name: installments_plan
  endpoint:
    path: /v1/installments-plans
    method: POST
- name: payment
  endpoint:
    path: /payments
    method: GET
    data_selector: records
- name: installments_plan
  endpoint:
    path: /installments-plans/{installment_code}
    method: GET
- name: transaction_report
  endpoint:
    path: /transaction/report
    method: GET
    data_selector: records
    params: {}
- name: transaction_reconciliation_report
  endpoint:
    path: /transaction/reconciliation/report
    method: GET
    data_selector: records
    params: {}
- name: installments_plans
  endpoint:
    path: /installments-plans
    method: GET
    data_selector: array of objects
    params:
      account_id: string
      currency: string
      iin: string
      amount: string
- name: settlement_header
  endpoint:
    path: /settlement/header
    method: GET
    data_selector: settlement_header_data
- name: settlement_body
  endpoint:
    path: /settlement/body
    method: GET
    data_selector: settlement_body_data
- name: communications_report
  endpoint:
    path: /communications/report
    method: GET
    data_selector: communications_report_data
- name: fraud_transactions_report
  endpoint:
    path: /fraud/transactions
    method: GET
    data_selector: fraud_transactions_report_data
- name: update_plan
  endpoint:
    path: /v1/installments-plans/{installment_code}
    method: PATCH
- name: payouts_report
  endpoint:
    path: /payouts/report
    method: GET
    data_selector: records
- name: fees_report
  endpoint:
    path: /fees/report
    method: GET
    data_selector: records
- name: agenda_report
  endpoint:
    path: /agenda/report
    method: GET
    data_selector: records
- name: Delete Installments Plan
  endpoint:
    path: /v1/installments-plans/{installment_code}
    method: DELETE
    data_selector: json
    params: {}
- name: sales_conciliation
  endpoint:
    path: /sales_conciliation
    method: GET
    data_selector: transactions
    params: {}
- name: advancements
  endpoint:
    path: /advancements
    method: GET
    data_selector: advancements
    params: {}
- name: get_conversion_rate
  endpoint:
    path: /currency-conversion
    method: POST
- name: report
  endpoint:
    path: /v1/reports
    method: POST
    data_selector: id
- name: declined_payment_calls
  endpoint:
    path: /v1/smart-support/external/payments/recover
    method: POST
    data_selector: settings
    params: {}
- name: reports
  endpoint:
    path: /reports
    method: POST
    data_selector: results
    params: {}
- name: initiate_recovery_outreach
  endpoint:
    path: /v1/smart-support/external/payments
    method: POST
- name: customer
  endpoint:
    path: /reference/the-customer-object
    method: GET
- name: report
  endpoint:
    path: /v1/reports/{report_id}
    method: GET
- name: customer
  endpoint:
    path: /reference/the-customer-object
    method: GET
    data_selector: attributes
    params: {}
- name: download_report
  endpoint:
    path: /v2/reports/{report_id}/download
    method: GET
- name: customer_session
  endpoint:
    path: /the-customer-session-object
    method: GET
    data_selector: customer_session
    params: {}
- name: list_all_reports
  endpoint:
    path: /v1/reports/list
    method: GET
    data_selector: records
- name: installments_plan
  endpoint:
    path: /v1/installments-plans
    method: POST
- name: Retrieve Payment Methods To Enroll
  endpoint:
    path: /retrieve-payment-methods-to-enroll-checkout
    method: GET
- name: Enroll Payment Method
  endpoint:
    path: /enroll-payment-method-checkout
    method: POST
- name: Retrieve Payment Method By ID
  endpoint:
    path: /retrieve-payment-method-by-id-checkout
    method: GET
- name: Unenroll Payment Method
  endpoint:
    path: /unenroll-payment-method-checkout
    method: POST
- name: Enroll Payment Method (Direct Workflow)
  endpoint:
    path: /enroll-payment-method-api
    method: POST
- name: Retrieve Enrolled Payment Method by Id
  endpoint:
    path: /retrieve-enrolled-payment-method-by-id-api
    method: GET
- name: Retrieve Enrolled Payment Methods
  endpoint:
    path: /retrieve-enrolled-payment-methods-api
    method: GET
- name: Unenroll Payment Method (Direct Workflow)
  endpoint:
    path: /unenroll-payment-method-api
    method: POST
- name: installments_plan
  endpoint:
    path: /v1/installments-plans/{installment_code}
    method: GET
    data_selector: object
    params: {}
- name: payment_method
  endpoint:
    path: /reference/retrieve-payment-methods-to-enroll-checkout
    method: GET
    data_selector: payment_methods
    params: {}
- name: payment_method
  endpoint:
    path: /retrieve-enrolled-payment-methods-api
    method: GET
    data_selector: records
- name: installments_plans
  endpoint:
    path: /installments-plans
    method: GET
    data_selector: array of objects
    params:
      account_id: string
      currency: string
      iin: string
      amount: string
- name: checkout_session
  endpoint:
    path: /checkout/session
    method: POST
    data_selector: session
    params: {}
- name: checkout_session
  endpoint:
    path: /reference/create-checkout-session
    method: POST
    data_selector: checkout_session
    params: {}
- name: update_plan
  endpoint:
    path: /v1/installments-plans/{installment_code}
    method: PATCH
- name: delete_installments_plan
  endpoint:
    path: /v1/installments-plans/{installment_code}
    method: DELETE
- name: payment
  endpoint:
    path: /manage/payments
    method: POST
    data_selector: payment_data
    params: {}
- name: payout
  endpoint:
    path: /manage/payouts
    method: POST
    data_selector: payout_data
    params: {}
- name: payment
  endpoint:
    path: /payments
    method: GET
    data_selector: payments
    params: {}
- name: get_conversion_rate
  endpoint:
    path: /currency-conversion
    method: POST
- name: declined_payment
  endpoint:
    path: /v1/smart-support/external/payments/recover
    method: POST
    data_selector: payments
- name: tickets
  endpoint:
    path: /tickets
    method: GET
    data_selector: records
- name: payment_methods
  endpoint:
    path: /payment_methods
    method: GET
    data_selector: records
- name: transportations
  endpoint:
    path: /transportations
    method: GET
    data_selector: transportations
- name: transactions
  endpoint:
    path: /transactions
    method: GET
    data_selector: transactions
- name: initiate_recovery_outreach
  endpoint:
    path: /v1/smart-support/external/payments
    method: POST
- name: customer
  endpoint:
    path: /reference/create-customer
    method: POST
    data_selector: customer
    params: {}
- name: customer_session
  endpoint:
    path: /the-customer-session-object
    method: GET
    data_selector: records
- name: card_data
  endpoint:
    path: /card_data
    method: GET
    data_selector: records
    params: {}
- name: three_d_secure
  endpoint:
    path: /three_d_secure
    method: GET
    data_selector: records
    params: {}
- name: network_token
  endpoint:
    path: /network_token
    method: GET
    data_selector: records
    params: {}
- name: stored_credentials
  endpoint:
    path: /stored_credentials
    method: GET
    data_selector: records
    params: {}
- name: wallet
  endpoint:
    path: /wallet
    method: GET
    data_selector: records
    params: {}
- name: bnpl
  endpoint:
    path: /bnpl
    method: GET
    data_selector: records
    params: {}
- name: bank_transfer
  endpoint:
    path: /bank_transfer
    method: GET
    data_selector: records
    params: {}
- name: ticket
  endpoint:
    path: /ticket
    method: GET
    data_selector: records
    params: {}
- name: payment_link
  endpoint:
    path: /payment_link
    method: GET
    data_selector: records
    params: {}
- name: raw_notification
  endpoint:
    path: /raw_notification
    method: GET
    data_selector: notification_data
- name: detail
  endpoint:
    path: /detail
    method: GET
    data_selector: payment_method_detail
- name: customer_data
  endpoint:
    path: /customer_data
    method: GET
    data_selector: customer_details
- name: fee_details
  endpoint:
    path: /fee_details
    method: GET
    data_selector: fees
- name: Retrieve Payment Methods To Enroll
  endpoint:
    path: /retrieve-payment-methods-to-enroll-checkout
    method: GET
- name: Enroll Payment Method
  endpoint:
    path: /enroll-payment-method-checkout
    method: POST
- name: Retrieve Payment Method By ID
  endpoint:
    path: /retrieve-payment-method-by-id-checkout
    method: GET
- name: Unenroll Payment Method
  endpoint:
    path: /unenroll-payment-method-checkout
    method: POST
- name: Enroll Payment Method API
  endpoint:
    path: /enroll-payment-method-api
    method: POST
- name: Retrieve Enrolled Payment Method by Id
  endpoint:
    path: /retrieve-enrolled-payment-method-by-id-api
    method: GET
- name: Retrieve Enrolled Payment Methods
  endpoint:
    path: /retrieve-enrolled-payment-methods-api
    method: GET
- name: Unenroll Payment Method API
  endpoint:
    path: /unenroll-payment-method-api
    method: POST
- name: payment_method
  endpoint:
    path: /reference/the-payment-method-object
    method: GET
    data_selector: attributes
- name: payment_link
  endpoint:
    path: /the-payment-link-object
    method: GET
    data_selector: records
    params: {}
- name: create_payment_link
  endpoint:
    path: /create-payment-link
    method: POST
    data_selector: records
    params: {}
- name: retrieve_payment_link
  endpoint:
    path: /retrieve-payment-link
    method: GET
    data_selector: records
    params: {}
- name: cancel_payment_link
  endpoint:
    path: /cancel-payment-link
    method: POST
    data_selector: records
    params: {}
- name: payment_method
  endpoint:
    path: /reference/the-payment-method-object-api
    method: GET
    data_selector: records
- name: payment_link
  endpoint:
    path: /payment_links
    method: GET
    data_selector: data
    params: {}
- name: Checkout Session
  endpoint:
    path: /reference/the-checkout-session-object
    method: POST
- name: checkout_session
  endpoint:
    path: /reference/create-checkout-session
    method: POST
- name: Enrollment
  endpoint:
    path: /reference/enrollment-workflow
    method: GET
- name: Customer Sessions
  endpoint:
    path: /reference/customer-session
    method: GET
- name: Create Customer Session
  endpoint:
    path: /reference/create-customer-session
    method: POST
- name: Payment Methods (Checkout)
  endpoint:
    path: /reference/payment-methods-checkout
    method: GET
- name: Enroll Payment Method
  endpoint:
    path: /reference/enroll-payment-method-checkout
    method: POST
- name: Retrieve Payment Method By ID
  endpoint:
    path: /reference/retrieve-payment-method-by-id-checkout
    method: GET
- name: Payment Methods (Direct Workflow)
  endpoint:
    path: /reference/payment-methods-api
    method: GET
- name: Retrieve Enrolled Payment Methods
  endpoint:
    path: /reference/retrieve-enrolled-payment-methods-api
    method: GET
- name: Create Payment Link
  endpoint:
    path: /reference/create-payment-link
    method: POST
- name: Manage Payments
  endpoint:
    path: /reference/the-payment-object
    method: POST
    data_selector: payment
    params: {}
- name: Retrieve Payment by ID
  endpoint:
    path: /reference/retrieve-payment-by-id
    method: GET
    data_selector: payment
    params: {}
- name: Retrieve Payment by Merchant Order ID
  endpoint:
    path: /reference/retrieve-payment-by-merchant-order-id
    method: GET
    data_selector: payment
    params: {}
- name: Refund Payment
  endpoint:
    path: /reference/refund-payment
    method: POST
    data_selector: refund
    params: {}
- name: Cancel or Refund a Payment
  endpoint:
    path: /reference/cancel-or-refund-a-payment
    method: POST
    data_selector: cancellation
    params: {}
- name: payment
  endpoint:
    path: /payments
    method: GET
    data_selector: payments
    params: {}
- name: subscription
  endpoint:
    path: /the-subscription-object
    method: GET
    data_selector: records
    params: {}
- name: ticket
  endpoint:
    path: /tickets
    method: GET
    data_selector: tickets
- name: recipient
  endpoint:
    path: /reference/the-recipient-object
    method: GET
    data_selector: recipient_data
- name: transportations
  endpoint:
    path: /transportations
    method: GET
    data_selector: transportations
- name: transactions
  endpoint:
    path: /transactions
    method: GET
    data_selector: transactions
- name: recipient
  endpoint:
    path: /reference/the-recipient-object
    method: GET
    data_selector: recipient
- name: payout
  endpoint:
    path: /the-payout-object
    method: GET
- name: payment
  endpoint:
    path: /the-payment-object
    method: GET
- name: recipient
  endpoint:
    path: /the-recipient-object
    method: GET
- name: payout
  endpoint:
    path: /reference/create-payout
    method: POST
    data_selector: transactions
    params: {}
- name: reports
  endpoint:
    path: /reference/the-reports-object
    method: GET
    data_selector: records
- name: card_data
  endpoint:
    path: /card/data
    method: GET
    data_selector: records
    params: {}
- name: three_d_secure
  endpoint:
    path: /three_d_secure
    method: GET
    data_selector: records
    params: {}
- name: network_token
  endpoint:
    path: /network/token
    method: GET
    data_selector: records
    params: {}
- name: stored_credentials
  endpoint:
    path: /stored/credentials
    method: GET
    data_selector: records
    params: {}
- name: wallet
  endpoint:
    path: /wallet
    method: GET
    data_selector: records
    params: {}
- name: bnpl
  endpoint:
    path: /bnpl
    method: GET
    data_selector: records
    params: {}
- name: bank_transfer
  endpoint:
    path: /bank/transfer
    method: GET
    data_selector: records
    params: {}
- name: ticket
  endpoint:
    path: /ticket
    method: GET
    data_selector: records
    params: {}
- name: payment_link
  endpoint:
    path: /payment/link
    method: GET
    data_selector: records
    params: {}
- name: installments_plan
  endpoint:
    path: /v1/installments-plans
    method: POST
- name: iso8583_response_code
  endpoint:
    path: /iso8583_response_code
    method: GET
    data_selector: code
- name: iso8583_response_message
  endpoint:
    path: /iso8583_response_message
    method: GET
    data_selector: message
- name: raw_notification
  endpoint:
    path: /raw_notification
    method: GET
    data_selector: notification
- name: detail
  endpoint:
    path: /detail
    method: GET
    data_selector: payment_method_detail
- name: card
  endpoint:
    path: /card
    method: GET
    data_selector: card_details
- name: wallet
  endpoint:
    path: /wallet
    method: GET
    data_selector: wallet_details
- name: bnpl
  endpoint:
    path: /bnpl
    method: GET
    data_selector: bnpl_details
- name: bank_transfer
  endpoint:
    path: /bank_transfer
    method: GET
    data_selector: bank_transfer_details
- name: ticket
  endpoint:
    path: /ticket
    method: GET
    data_selector: ticket_details
- name: payment_link
  endpoint:
    path: /payment_link
    method: GET
    data_selector: payment_link_details
- name: payment_link
  endpoint:
    path: /the-payment-link-object
    method: GET
- name: payment_link
  endpoint:
    path: /reference/create-payment-link
    method: POST
    data_selector: payment_links
    params: {}
- name: Create Payment Link
  endpoint:
    path: /create-payment-link
    method: POST
- name: Retrieve Payment Link
  endpoint:
    path: /retrieve-payment-link
    method: GET
- name: Cancel Payment Link
  endpoint:
    path: /cancel-payment-link
    method: POST
- name: Payment Link Status
  endpoint:
    path: /status-payment-links
    method: GET
- name: Manage Payment Links
  endpoint:
    path: /manage-payment-links
    method: GET
- name: subscription
  endpoint:
    path: /reference/the-subscription-object
    method: GET
    data_selector: records
- name: recipient
  endpoint:
    path: /reference/the-recipient-object
    method: GET
- name: recipient
  endpoint:
    path: /reference/the-recipient-object
    method: GET
    data_selector: records
- name: payout
  endpoint:
    path: /the-payout-object
    method: GET
- name: create_payout
  endpoint:
    path: /create-payout
    method: POST
- name: retrieve_payout_by_id
  endpoint:
    path: /retrieve-payout-by-id
    method: GET
- name: retrieve_payout_by_merchant_reference
  endpoint:
    path: /retrieve-payout-by-merchant-reference
    method: GET
- name: payout
  endpoint:
    path: /reference/manage-payouts
    method: GET
    data_selector: transactions
    params: {}
- name: reports
  endpoint:
    path: /manage/reports
    method: GET
    data_selector: reports
    params: {}
- name: installments_plan
  endpoint:
    path: /v1/installments-plans
    method: POST
- name: declined_payment_calls
  endpoint:
    path: /v1/smart-support/external/payments/recover
    method: POST
- name: declined_payment_calls
  endpoint:
    path: /v1/smart-support/external/payments/recover
    method: POST
notes:
- Some declines include a merchant_advice_code (MAC) that indicates whether and when
  to retry.
- Uses OAuth2 with refresh token — requires setup of connected app in yuno
- Uses OAuth2 with refresh token — requires setup of connected app in api
- Each payment has one or more associated transactions.
- Primary transactions can be Purchase, Authorize, or Verify.
- Secondary transactions can include Refund, Cancel, Capture, Chargeback, 3DS, and
  Fraud screening.
- Yuno uses two different types of tokens to process payments, depending on the integration.
- Webhooks allow apps to receive real-time updates whenever an event occurs, eliminating
  the need for constant requests.
- Your API should not require authentication or access restrictions through headers.
- Yuno provides an easy 3DS2 integration, ensuring secure and frictionless payments
  for your customers.
- 3D Secure 2 (3DS2) enhances security while improving the user experience.
- 'Recommended Integration: Seamless SDK options for a smooth integration experience.'
- Direct Flow requires PCI certification.
- Webhooks are recommended for payment status updates.
- Direct Flow requires merchants to handle fraud prevention aspects manually.
- This feature is only available for enrolling Cards for PCI compliant merchants.
- Yuno's Seamless SDK provides a simple and efficient integration while giving you
  full control over the payment experience.
- Yuno manages the entire checkout process.
- You should only use one option to enroll a card.
- The Lite SDK provides full control over your payment experience.
- Even if the user selects an enrolled payment method, Yuno recommends using the SDK
  to tokenize the information instead of directly using the vaulted token with Yuno's
  API.
- Lite SDK provides full control over your payment experience.
- You can save credit or debit cards for future purchases within the same payment
  request, without additional enrollment integration.
- Secure Fields complies with PCI security standards.
- Payment details are tokenized, ensuring sensitive data never touches your server.
- The Headless SDK is designed to accept payments using cards only.
- Yuno's Headless SDK provides complete control over the checkout UX and UI, allowing
  you to enroll cards without requiring PCI compliance.
- 'Yuno provides a powerful dual environment feature: Test Mode (Sandbox) and Live
  Mode (Production).'
- Test Mode allows for safe experimentation, while Live Mode is where your customers
  interact with your live services.
- Ensure proper configuration of OAuth2 credentials for authentication.
- Dynamic Metadata Configuration allows granular control over payment data flow.
- Dynamic Metadata Configuration allows control over which metadata fields are sent
  to each connected provider.
- Monitors cannot be created for routes that are already published.
- Any changes made using the Checkout Builder are immediately reflected in the user-facing
  checkout.
- Changes made using the Checkout Builder are immediately reflected in the user-facing
  checkout.
- The batch refund feature allows you to process refunds for several transactions
  simultaneously, saving time and effort.
- The Insights section provides a unified view of your payment performance metrics
  and analytics, directly within the dashboard.
- The Insights section provides a unified view of payment performance metrics and
  analytics.
- Data can be filtered, customized, and exported as PDF.
- Reconciliation helps you identify and resolve discrepancies in your payment processing.
- Regular reconciliation allows you to detect and prevent balance errors, identify
  potential fraud, and track failed payments.
- Perform reconciliation daily for best results.
- Yuno maintains separate keys for Test and Live environments, ensuring robust security
  and smooth operations.
- You must configure the Risk conditions connection to enable rules and lists.
- Activate the Risk Conditions provider in the Connections section.
- You can't delete allowlists, blocklists, or rules.
- Payment links allow for simplified payment collection with customizable options.
- Audit logs provide transparency, security, and regulatory compliance by logging
  and tracking all team members' activities.
- Multiple accounts allow fine-tuning of access permissions.
- Users can access and engage with multiple accounts, each with its own role and permissions.
- Yuno allows creating teams and defining roles for precise access control.
- Yuno allows you to create flexible teams composed of users from different accounts.
- You will have to create a team for each account you have created.
- To activate SSO, the user must have the Admin role in all accounts within the organization.
- Okta is enabled by default for SSO.
- To activate SSO in the dashboard, the user must have the Admin role in all accounts
  within the organization.
- Make sure to choose the payment connection that suits your needs when following
  these instructions.
- Use Yuno Testing Gateway as your provider for testing credit card payments.
- API credentials are specific to the Sandbox environment
- Public API Key is used for client-side SDK initialization
- Secret API Key is used for server-side API calls
- Yuno provides a Test Payment Gateway available only in the sandbox environment.
- Use webhooks to monitor asynchronous payments effectively.
- Refunds processing time varies depending on the payment type. While in test mode,
  refunds are processed instantly in the Sandbox environment.
- Only payments with PENDING status can be canceled.
- Only payments with PENDING status can be captured.
- 'Yuno provides four types of reports: Payment, Transaction, Transaction Reconciliation,
  Settlement.'
- Yuno Test Payment Gateway is only available in the sandbox environment.
- When creating the route, check if the provided country is on the condition list.
- Yuno recommends using webhooks to monitor asynchronous payments better.
- Use this step-by-step guide to configure and test 3D Secure in Yuno.
- Check payment status by analyzing the status and sub_status from the response.
- Use webhooks to monitor asynchronous payments better.
- Yuno's SDKs provide a range of benefits that can significantly enhance your payment
  processing workflows.
- Recommended SDK for a smooth integration experience.
- Ensure that if your app uses a UISceneDelegate, the Yuno initialization code is
  placed within your SceneDelegate.
- Swift 6 introduces stricter concurrency requirements that affect how you implement
  the YunoPaymentDelegate protocol.
- The Yuno SDK can be initialized with a public API key.
- Concurrency rules have become more stringent to enhance app stability and prevent
  crashes.
- UI components must always run on the main thread to prevent crashes.
- The API is used to create a customer, which is required before initiating payments
- You can access the Yuno repository to complete Yuno Android SDKs implementation.
- You must have an active Yuno account.
- Ensure the `INTERNET` permission is included in your `AndroidManifest.xml`.
- Uses OAuth2 with refresh token — requires setup of connected app in Yuno
- Each payment method can have its own checkout session
- Uses OAuth2 for authentication
- Yuno’s Flutter SDK is no longer maintained. Refer to our integration documentation
  to choose the best SDK for your project.
- Yuno Web SDK does not support the IE browser.
- If you are using TypeScript, access the Yuno repository to use all interfaces and
  types available for the Web SDK.
- If you are using the Web SDK inside a WebView on Android, you must enable JavaScript
  code execution and multi-window support.
- 'The Web SDK sets two essential cookies for its functionality: recognitionToken
  and yuno.'
- Existing customers may choose to skip the upgrade, though they won’t have access
  to the enhancements.
- Recommended SDK is Web Seamless SDK for a smooth integration experience.
- To optimize performance, preconnect links should be added within the head tag.
- Recommended SDK is the Web Seamless SDK for a smooth integration experience.
- Requires setup of API credentials to initialize SDK
- Uses OAuth2 with public API key for authentication.
- The merchant is responsible for managing the loader.
- Some objects like Contact may return nulls in deeply nested fields
- Uses optional initialization options for advanced configuration.
- Yuno SDK renders as a modal by default.
- Supports an optional 'options' parameter in 'Yuno.initialize'.
- By default, Yuno SDK renders as a modal.
- Yuno requires integration of the continuePayment method for some asynchronous payment
  methods.
- After creating a payment, Yuno requires you to integrate the continuePayment method
  from the SDK.
- Requires setup of connected app in Yuno
- The merchant is responsible for handling the loader.
- Version 1.1 introduces enhancements to 3DS, performance, security, and user experience.
- Ensure the Yuno SDK file is included in your webpage before closing the </body>
  tag.
- The continuePayment method requires a valid checkout session.
- The enhanced Lite SDK v2.0 provides advanced render mode capabilities that embed
  Yuno's checkout forms directly within your interface.
- Merchants are responsible for displaying the payment methods and capturing the customer's
  selection.
- Yuno provides additional services and configurations to improve customers' experience.
- Hide Pay button when presenting the Card or Customer Data Forms by setting showPayButton
  to false.
- Uses cardSaveEnable to show checkbox for saving cards, default is false
- Only CARD is available for enrollment.
- Only CARD is available for enrollment in the SDK Lite.
- Default value for showLoading is true.
- Default render mode is 'modal'.
- Optimizations to the Lite SDK's weight and performance
- 'Added support for multiple Asian and European languages: German, Dutch, Swedish,
  French, Italian, Japanese, Korean.'
- If you hide the Pay button, you will need to start the one-time token creation through
  your code.
- 'Supports multiple languages: German, Dutch, Swedish, French, Italian, Japanese,
  Korean.'
- The complete list of country codes is available on https://docs.y.uno/docs/country-coverage-yuno-sdk
- 'You can display a checkbox for saving or enrolling cards using the cardSaveEnable:
  true.'
- Uses secure fields to collect payment information securely.
- Currently, only CARD is available for Headless SDK.
- Ensure to handle potential errors during token generation and payment creation.
- Use webhooks to receive real-time updates on payment status.
- Ensure to handle errors during token generation and payment creation.
- The specific implementation for handling each action type will depend on your application's
  UI framework and requirements.
- The specific implementation for handling each action type will depend on your application's
  UI framework and requirements. Ensure you handle all possible action types that
  your configured payment providers might return.
- You can use either the Status or Status Lite SDK to monitor payment status.
- You can use the Status SDK to update the user about the payment process.
- Status Lite does not mount any element.
- 'Styles within an iframe: Define the new styles when initializing the SDK.'
- 'Styles outside an iframe: Inject the styles directly into the page.'
- Ensure to align payment forms with brand guidelines.
- To ensure the Demo App will work properly, be sure to connect at least one payment
  method to your account through the Dashboard.
- This service was deprecated and will be removed in the future.
- You must have an active Yuno account
- Retrieve your public API keys from the Yuno dashboard
- Ensure that the CoroutineScope is tied to the Activity/Fragment lifecycle to prevent
  memory leaks and ensure proper cleanup.
- Ensure you have an active Yuno account.
- You must create a customer before creating a payment.
- You need your Yuno API credentials (account_id, public-api-key, and private-secret-key)
  to authenticate requests.
- Yuno requires you integrate the continuePayment method after the payment is created
  because certain asynchronous payment methods require additional customer action
  to complete.
- To perform the integration, you'll need your Yuno API credentials (`public-api-key`),
  which you can obtain from the Developers section of the Yuno dashboard
- Using the function enrollmentStatus is optional. It isn't a requirement to complete
  the enrollment process.
- The possible states are SUCCEEDED, FAIL, PROCESSING, REJECT, INTERNAL_ERROR, and
  CANCELED.
- Yuno requires you integrate the continuePayment method of the SDK after the payment
  is created because certain asynchronous payment methods require additional action
  from the customer to complete it.
- Yuno Headless SDK provides control over the payment method enrollment process.
- The Headless SDK only supports the CARD payment method type.
- To perform the integration, you'll need your Yuno API credentials (public-api-key)
- The apiClientEnroll.continueEnrollment function returns an Observable type that
  extends LiveData.
- If you provide a new callback when calling the function enrollmentStatus, it will
  override the callback you set when calling the function initEnrollment.
- Requires an active Yuno account and API credentials.
- Payment methods requiring additional SDK interaction will have sdk_action_required
  set to true.
- Consider using the enrollment status received via Webhooks.
- Yuno Android SDK supports XML themes and styles.
- Customizations are unavailable in previous versions, so we recommend using version
  1.13.0 or higher.
- The feature is only available for SDK version 1.13.0 or higher.
- Always define and use callback_url in your payment flows
- Configure the intent-filter correctly in your manifest
- Handle the return intent to update the payment status or navigate the user
- Test the flow on multiple devices and browsers
- The apiClientPayment.generateToken function returns an Observable type.
- The endpoint response provides the sdk_action_required parameter that defines if
  additional actions are necessary.
- Yuno's iOS SDKs are designed to simplify the integration of payment processing functionality
  in your iOS applications.
- Customizations are a work in progress and are continuously updated.
- This feature is only available for SDK version 1.13.0 or higher.
- Recommended SDK is the iOS Seamless SDK for a smooth integration experience.
- Only use MainActor.assumeIsolated when you guarantee it's called from MainActor.
- Use nonisolated for properties or methods that must be thread-safe.
- Requires setup of connected app in Yuno.
- Use iOS version 14.0 or above.
- Ensure the SDK is initialized before using startPaymentRender
- The delegate must implement all required methods of YunoPaymentDelegate
- The checkoutSession must be valid and active
- Recommended SDK for smooth integration experience.
- Ensure to place your Yuno initialization code within your SceneDelegate.
- Only use MainActor.assumeIsolated when guaranteed it's called from MainActor.
- nonisolated means it can be accessed from any thread, so it must be thread-safe.
- viewController must always be accessed from the main thread to prevent crashes.
- This step is only required if you're using a payment method that relies on deep
  links or Mercado Pago Checkout Pro.
- Make sure the `url.scheme` in this code matches the `callback_url` you provided
  when creating the `checkout_session`.
- nonisolated must be thread-safe.
- viewController must always be accessed from the main thread.
- Recommended to use the iOS Seamless SDK for integration.
- Each implementation has different concurrency needs
- UI components must always run on the main thread to prevent crashes
- Always check if formView() returns nil before displaying the view
- viewController remains as @MainActor because it should always be accessed from the
  main thread.
- Yuno's iOS SDK provides an enrollment feature for payment methods integrated into
  Yuno.
- Yuno's Headless SDK enables you to create payments and enroll payment methods simultaneously.
- 'MainActor.assumeIsolated: Only use when you guarantee it''s called from MainActor.
  This is a safety mechanism that tells Swift "trust me, I know this is running on
  the main thread."'
- 'nonisolated: Means it can be accessed from any thread, so it must be thread-safe.
  Use this when your properties or methods don''t depend on UI state.'
- 'viewController: Remains as @MainActor because it should always be accessed from
  the main thread. UI components must always run on the main thread to prevent crashes.'
- The payment creation must be carried out using the Create Payment endpoint.
- The response provides the sdk_action_required parameter, indicating if additional
  actions are needed to complete the payment.
- By default, Yuno will stop the loading after processing transaction operations.
- Ensure all colors are specified as UIColor to maintain compatibility.
- The default value for showPaymentStatus is true.
- You can listen for the messageFromWeb event to handle challenge responses.
- This feature is optional and is intended for advanced use cases where you need to
  customize how device identification is handled via cookies.
- This section describes a special exception for handling Mercado Pago Checkout Pro
  integration in webview environments.
- 3DS logic is handled automatically using the continuePayment() method - no separate
  3DS setup is required.
- If you require access to a Yuno SDK in a country that is not yet supported, reach
  out to our commercial team.
- Uses SDK for handling 3DS logic
- Fingerprints are highly valuable for tracking if a user is using the same card for
  multiple customer-present payments.
- 3DS2 verification step is added while defining card routes.
- 3DS logic is handled automatically using the continuePayment() method.
- The credit card verification process isn't provided by all providers.
- Yuno uses a zero-dollar authorization for card validations.
- For each payment you'll have a PENDING/WAITING_ADDITIONAL_STEP status/sub status.
- You are responsible for redirecting your customers to the URL provided by the redirect_url.
- The verify feature at the payment is only available for PCI-compliant merchants
  when using the Direct integration.
- With Yuno's PCI-DSS Level 1 solution, you can securely tokenize your customers'
  payment information, reducing your PCI scope and ensuring data protection.
- Using a third-party service like Yuno, you will probably be required to fill out
  the SAQ A or SAQ D.
- To activate payments using network tokens, please contact our support team to provision
  or request the necessary credentials.
- Using Yuno solutions, the transaction and cardholder data are tokenized.
- Merchant must provide necessary information about the network tokens for Yuno to
  share with upstream payment partners.
- Token's number, holder name, expiration month, and expiration year are mandatory
  for PCI certified merchants.
- Ensure compliance with Visa and Mastercard guidelines for stored credentials.
- All data throughout the migration process is encrypted using PGP keys and transferred
  using SFTP (Secure File Transfer Protocol).
- Yuno does not validate expiration dates during credit card import.
- 'For encrypting sensitive data. Environment: sandbox'
- 'Created: 22 Nov 2024'
- 'Expires: 22 Nov 2026'
- Network tokens enhance security by replacing actual card data during transactions.
- Network tokens are generated for all cards enrolled and securely stored in Yuno's
  vault.
- With this option, Yuno acts only as a passthrough for the network token information.
  The merchant must provide the necessary information about the network tokens so
  Yuno can share them with upstream payment partners.
- For encrypting sensitive data.
- 'Environment: sandbox'
- Ensure to have public-api-key and private-secret-key for authentication.
- Ensure the customer exists before enrolling payment methods.
- Token export requests are handled with the same level of rigor and encryption used
  to protect data in production.
- Only eligible clients with validated use cases and PCI DSS compliance may initiate
  this process.
- 'Secure Channel Required: The file is never sent by email or made publicly accessible.
  Access is strictly limited to the configured secure channel.'
- A Vaulted Token is created once a payment method is enrolled and stored with the
  customer information.
- Only the Checkout workflow requires the utilization of a customer session.
- Requires setup of API credentials including public-api-key and private-secret-key.
- When using Secure Fields SDK integration, you will need to enable the installments
  option while starting the checkout process.
- While setting your route for the Card payment method, remember that having a fallback
  for a provider that has 'Provider installments' is not supported, as different providers
  handle different types of installment plans.
- While setting your route for the Card payment method, remember that having a fallback
  for a provider that has 'Provider installments' is not supported.
- Yuno's Smart Retries use machine learning to optimize transaction retry attempts.
- Yuno's Smart Retries use advanced machine learning techniques to determine the best
  timing for retrying a declined recurring credit card payment.
- Leverages machine learning to create the most effective retry schedule.
- By setting the simplified_mode field to true in capture and refund requests, Yuno
  will automatically retry failed transactions up to seven times within a 96-hour
  period.
- Merchants must first onboard their recipients for the payment split.
- Automatic retries enhance transaction success rates.
- Retries are scheduled at strategic intervals.
- Ensure your provider supports split payments before using this functionality.
- The fee_amount, shipping_amount, tip_amount, and taxes are included in the final
  transaction amount and are for informational purposes only.
- A dedicated field (`additiona_datal.order.fee_amount`) allows you to specify the
  fee amount for your services that is included in the transaction.
- A dedicated field (`additional_data.order.shipping_amount`) allows you to specify
  the shipping amount that is included in the transaction.
- A dedicated field (`additiona_datal.order.tip_amount`) allows you to specify the
  tips amount that is included in the transaction.
- A dedicated array of objects (`additional_data.order.taxes`) allows you to specify
  the taxes amounts for your services that are included in the transaction.
- 'Issuer''s Final Decision: While merchants can request an exemption using the strong_customer_authentication_exemptions
  field, the card issuer has the final authority to accept or decline the exemption
  based on their risk assessment and compliance policies.'
- 'Liability Implications: Requesting an exemption may impact liability in cases of
  fraudulent transactions.'
- 'Delayed Capture and Cancel Settings: We recommend not using both delayed_capture_settings
  and delayed_cancel_settings simultaneously to avoid unexpected behaviors.'
- Discounts are included in the final transaction amount and are not added separately.
- Delay before Yuno cancels the authorization must follow ISO 8601 duration format
  (e.g., 'P30D' for 30 days).
- Requesting an exemption may impact liability in cases of fraudulent transactions.
- Ensure that the use of strong_customer_authentication_exemptions aligns with regional
  regulations.
- Yuno provides multiple options for capture and cancel operations.
- Evidence must be in PDF format, base64 encoded, and no larger than 1 MB.
- Yuno Payouts requires a security and risk analysis.
- Evidence must be in PDF format, no larger than 1 MB, and written in English or the
  country's local language.
- The REST API built to receive event notifications should not require any authentication
  or access restriction through a header.
- Yuno event notifications will not be available to the public and will use a unique
  URL to communicate only to your REST API.
- Yuno webhooks expect to receive an HTTP 200 OK status as a response to indicate
  that the webhook was received.
- Yuno webhooks will send the event notification up to seven times to avoid information
  loss.
- The REST API you will build should not require any authentication or access restriction
  through a header.
- If no response is received, Yuno will send the event notification up to seven times.
- Supports both v1 and v2 webhook events.
- Webhook V2 for payment events
- The response contains a complex nested structure with detailed payment information.
- Uses webhook to receive payment events
- Yuno streamlines the process of accepting Apple Pay payments and provides the flexibility
  to route payments to any payment service provider.
- Wallets allow customers to use stored cards with different providers.
- 'You must also host Apple’s `apple-developer-merchantid-domain-association` file
  at: https://yourdomain.com/.well-known/apple-developer-merchantid-domain-association'
- 'You must also host Apple’s apple-developer-merchantid-domain-association file at:
  https://yourdomain.com/.well-known/apple-developer-merchantid-domain-association'
- Ensure you have completed the Prerequisites process to obtain the necessary Apple
  Pay certificates and merchant credentials.
- Ensure your Apple Pay Merchant ID matches the one configured in your Yuno Dashboard
  provider connections.
- Before implementing Apple Pay payments, ensure you have completed the dashboard
  setup and configuration process.
- Implement retry logic for failed MIT transactions
- Monitor payment status through webhooks for real-time updates
- Ensure compliance with Google Pay APIs Acceptable Use Policy
- Complete the Google Pay and Wallet Console configuration
- Pass Apple Pay payment token in request as a JSON string in payment_method.detail.wallet.payment_token
  field.
- All merchants must adhere to the Google Pay APIs Acceptable Use Policy.
- Enable Demo mode to test the integration.
- Direct integration requires implementation of Customer Initiated Transaction (CIT)
  and Merchant Initiated Transaction (MIT) flows.
- You must securely store the payment token from the CIT response.
- Click to Pay is based on the EMVCo secure payment standard.
- Designed to work across various devices, facilitating online shopping on both desktops
  and mobile devices.
- 'Yuno supports both Google Pay API authorization methods: PAN_ONLY and CRYPTOGRAM_3DS.'
- Pass Google Pay payment token in request
- Uses Google Pay integration without accessing card data
- Must adhere to Google Pay APIs Acceptable Use Policy
- The Yuno plugin for VTEX is PCI compliant.
- To enable payments with two cards, contact the Yuno supporting team in advance.
- VTEX recommends you to not enable the test mode in production environments, since
  the test payment options will be available to customers in your store.
- 'There is a known issue affecting the option Scheduled: Schedules the Automatic
  Capture.'
- Admin permissions required to install applications in VTEX.
- 'Automated Generation: Merchants do not need to modify or format the payload manually.'
- 'Dynamic Structure: The payload format adapts based on the selected payment method
  (credit card, Pix, etc.).'
- 'Seamless Integration: The data is retrieved automatically from Yuno''s connector
  when processing transactions in VTEX.'
- Aida allows you to instantly access detailed information about payments, payouts,
  subscriptions, and payment links.
- If at any point the agent is unable to resolve your request, just send a message
  that includes 'human'.
- To install both applications, you need Admin permissions in VTEX.
- Card Account Updater ensures that stored card data remains current.
- Registration occurs directly with the Card Schemes and may take up to 10 working
  days for new customers.
- Credentials to use Yuno API in Sandbox are different from the Production credentials.
- Requires YUNO_PUBLIC_API_KEY, YUNO_PRIVATE_SECRET_KEY, and YUNO_ACCOUNT_CODE
- 'Rate limiting: 15 requests per minute per session'
- 'Session timeouts: 30 minutes idle; 6 hours absolute'
- 'Keep Your Keys Safe: Do not share your secret API keys in public places like Github,
  Bitbucket, etc.'
- It is essential for idempotency to pass a nonce to the required API request.
- The `X-Idempotency-Key` of a transaction and the status returned for making that
  order are both stored by Yuno's idempotency system.
- The API will only generate one request even if two requests are sent with the same
  key in the header and different contents in the body.
- In some circumstances, it's possible that some requests are sent at the same time.
  As a result, it is possible that the application receives a second request before
  it responds to the first one.
- When this happens, the second request will be met with the 409 code - Conflict.
- The Yuno API behavior will not record the keys in cases of request fail for any
  reason.
- The API provides a type of error 400 informing there’s a problem with the request.
- Requires setup of Yuno API credentials using environment variables.
- The credentials to use Yuno API in Sandbox are different from the Production credentials.
- Requests will fail if environment variables are not configured.
- Although cobranded, transactions made through eftpos will receive ECI codes of 05/06/07,
  indicating the possible outcomes of authentication attempts.
- 'UnionPay International: Transactions falling within the BIN ranges overlapping
  with UnionPay International will receive both ECI values - 05/06/07 and 02/01/00.
  These values signify different authentication results.'
- The authentication request encountered obstacles that prevented its completion for
  various reasons.
- Transactions made through eftpos will receive ECI codes of 05/06/07, indicating
  the possible outcomes of authentication attempts.
- Transactions falling within the BIN ranges overlapping with UnionPay International
  will receive both ECI values - 05/06/07 and 02/01/00.
- Yuno organizes the available payment methods into distinct transaction categories.
- All updates are backwards compatible.
- Disruptive modifications require a new version.
- Only available for PCI certified merchants.
- Get the list of payment methods the user has available for enrollment.
- Create a checkout session is only required for flow SDK_CHECKOUT.
- Only one payment is supported per each checkout session.
- The checkout session expires 5 hours after its creation.
- The unique identifier of the customer, created using the Create Customer endpoint
  (UUID, 36 chars).
- The unique identifier of the customer's order (MAX 255; MIN 3).
- The description of the payment (MAX 255; MIN 3).
- The URL where we will redirect your customer after making the purchase (MAX 526;
  MIN 3).
- The customer's country (MAX 2; MIN 2; ISO 3166-1).
- The unique identifier of the account (UUID, 36 chars).
- This endpoint is for PCI compliant merchants only
- Discover payment status, transaction types, and transaction codes used by the Yuno
  API utilizes on this page.
- Payments have all the essential information about the order, including customer
  information, amount, currency, items, shipping info, etc.
- Yuno’s public APIs include both normalized and raw response codes.
- The payment object represents the payment created after generating the checkout
  session for a customer.
- For every implementation, we recommend taking the payment status and sub_status
  as the main reference for the payment's state.
- This request creates a payment after you created a checkout session.
- Do not execute a refund while another is in progress. Wait for the current operation
  to complete before starting a new one.
- The format of the raw_notification object depends on the provider's response.
- Payments in a PENDING status due to 3DS authentication cannot be canceled.
- Alternative payment methods such as PIX also support payment cancellation with a
  PENDING status.
- If you fill out the amount field, the refund will be partial. Otherwise, it will
  create a complete refund.
- Uses SDK_CHECKOUT workflow for managing payments.
- Some payment methods and providers may only be available in specific countries and/or
  currencies.
- Requires X-Idempotency-Key, private-secret-key, and public-api-key in headers
- All payment methods use the same endpoint but different request bodies.
- Uses workflow REDIRECT for payment processing
- Callback URL must be a valid URL
- Requires X-Idempotency-Key header for idempotency
- Uses SDK_CHECKOUT workflow for payment processing
- Requires setup of private and public API keys
- Requires X-Idempotency-Key and private/public API keys in headers
- Uses different payment methods like PSE, SafetyPay, and SPEI
- All payments require a callback_url and workflow
- Uses private and public keys for authentication
- Payments can be created using CODI or Nupay.
- Requires 'X-Idempotency-Key' and authentication headers 'private-secret-key' and
  'public-api-key'.
- Requires Yuno Setup for 3DS implementation
- Requires X-Idempotency-Key and private API keys for authentication.
- Uses private and public API keys for authentication
- Use of private-secret-key and public-api-key is required.
- Uses POST requests to create payments
- Requires specific headers for authentication and content type
- Requires setup of private and public API keys.
- Uses a private and public API key for authentication.
- Uses public and private keys for authentication
- Card payment with vaulted token
- No authentication required for this API.
- Requires Yuno Setup for Card Direct with 3DS
- Flag to enroll the card after a successful payment.
- Requires X-Idempotency-Key, private-secret-key, and public-api-key headers for requests
- The subscription object can be associated with a customer.
- Uses X-Idempotency-Key for idempotency control
- Callback URL is required for payment workflow
- The fields billing_cycles and availability.finish_at have an impact on each other.
- Uses public and private API keys for authentication.
- Uses public API key for authentication.
- This object represents a recipient who will receive part of a split payment.
- The fields `billing_cycles` and `availability.finish_at` have an impact on each
  other.
- Reciprocal onboarding requires valid recipient and onboarding IDs.
- The report can have various statuses including IN_PROCESS, SUCCEEDED, DOWNLOADED,
  EXPIRED, FAILED, and ERROR.
- The following columns are mapped upon request, you may request them when activating
  the reconciliations module. Contact support for more details.
- The date format is now ISO 8601 (e.g., 2023-12-11T01:14:38.000Z for UTC, 2023-02-23T17:39:36.065+01:00
  for UTC+1).
- The report ID needs to be provided in the request path.
- The report URL has expired, and the report is no longer available for download 10
  minutes after the creation confirmation.
- Payment report field details available.
- The date format is ISO 8601 (e.g., 2023-12-11T01:14:38.000Z for UTC)
- All data must be transmitted over HTTPS.
- Yuno adheres to relevant data protection regulations, including GDPR and LGPD.
- The `plan_id` is only necessary when applying a fixed installment plan that doesn't
  change during the purchase.
- The Update Plan API allows you to modify an existing plan, enabling you to update
  attributes such as the plan's status, installment details, and the payment method
  associated with the plan.
- Ensure proper routing for payment processing
- Review and adhere to API rate limits
- Payment methods expiration date format is 'yyyy-MM-dd HH:mm:ss.SSSz'.
- Ensure to validate user's card before authorizing a real amount.
- API access requires a valid API key provided in the request headers.
- This object represents a payment link that can be associated with a customer.
- The subscription object represents a subscription that can be associated with a
  customer.
errors:
- 'REQUESTS_EXCEEDED: Requests limit for the provider account reached.'
- 'TRANSACTION_NOT_FOUND: Transaction not found'
- 'INVALID_PARAMETERS: Invalid parameters'
- 'ERROR: Unknown internal error'
- 'PROVIDER_ERROR: Error. An unknown error occurred during the authorization'
- 'PROVIDER_INTERNAL_ERROR: Internal error'
- 'PROVIDER_INVALID_CREDENTIALS: Invalid credentials'
- 'PROVIDER_INVALID_REQUEST: Invalid request'
- 'PROVIDER_TIMEOUT: Response received too late'
- 'PROVIDER_UNKNOWN_ERROR: Unknown error'
- 'OPERATION_NOT_SUPPORTED: Provider does not support this operation'
- 'TO_REVERSE: The transaction will be reversed'
- 'PROVIDER_INVALID_RESPONSE: Invalid response'
- 'PROVIDER_INVALID_API_VERSION: Invalid API version'
- 'REQUEST_LIMIT_EXCEEDED: Throttle API calls or reduce frequency'
- '401 Unauthorized: Recheck OAuth scopes or token expiration'
- Throttle API calls or reduce frequency
- Break down filters or add selectivity
- '400 Bad Request: Check the request parameters'
- '401 Unauthorized: Invalid authentication credentials'
- '401 Unauthorized: Check your credentials.'
- '400 Bad Request: Ensure all required fields are filled.'
- '400 Bad Request: Check the request parameters and try again.'
- '401 Unauthorized: Ensure the OAuth token is valid.'
- '404 Not Found: Verify the endpoint URL.'
- '400 Bad Request: Check payment ID and transaction ID.'
- '401 Unauthorized: Invalid API credentials.'
- '404 Not Found: Payment not found.'
- 'Transaction failed: Check payment method or user details.'
- 'Transaction rejected: Insufficient funds or fraudulent activity.'
- 'Failed to load script: https://sdk-web.y.uno/v1.1/main.js - Error message'
- 'Payment error: Check your payment method or network connectivity.'
- 'QUERY_TIMEOUT: Break down filters or add selectivity'
- 'sdk_action_required: Additional action required from the customer.'
- 'sdk_action_required: Additional action required from the customer to complete the
  payment.'
- '400 Bad Request: Check the request parameters.'
- '401 Unauthorized: Check your API key.'
- '500 Internal Server Error: Try again later.'
- '400 Bad Request: Check the parameters sent in the request'
- '401 Unauthorized: Invalid API key'
- '404 Not Found: Endpoint does not exist'
- 'TOKEN_INVALID: Ensure the token is valid and not expired.'
- 'PAYMENT_FAILED: Verify payment details and try again.'
- 'REQUEST_TIMEOUT: Check network connection and retry.'
- '401 Unauthorized: Ensure proper authentication.'
- '404 Not Found: Verify the endpoint path.'
- 'FAIL: Investigate the cause of failure (validation, network, server) and take corrective
  measures.'
- 'REJECT: Inform the user of the rejection, provide the reason if possible, and suggest
  next steps.'
- 'INTERNAL_ERROR: Requires technical intervention to review the system, fix internal
  issues, and retry or inform the user.'
- '401 Unauthorized: Verify API key validity.'
- '404 Not Found: Endpoint does not exist.'
- 'THREE_D_SECURE_REQUIRED: Additional SDK interaction needed to complete the payment.'
- '401 Unauthorized: Recheck API key or token expiration'
- 'formView() always returns nil: Verify that the selected payment method requires
  a form'
- 'Delegate doesn''t receive yunoCreatePayment: Verify that submitForm() is being
  called correctly'
- 'continuePayment() doesn''t return view when expected: Some payment methods don''t
  require additional views'
- 'Missing data: This will trigger an error if there is missing data.'
- 'Invalid 3DS provider: This indicates an error during the 3DS challenge.'
- '401 Unauthorized: Ensure proper setup in Yuno Dashboard.'
- 'Transaction successful: Transaction successful'
- Payment is created and waiting for Yuno's SDK session id.
- The challenge is required, and the redirect_url is returned by Yuno.
- An error occurred while redirecting to the user's challenge.
- '400 Bad Request: Invalid payment parameters'
- '401 Unauthorized: Check your API key'
- '409 Conflict: Duplicate payment request'
- '401 Unauthorized: Invalid API key or secret.'
- 'X-Idempotency-Key: <Your idempotency-key>'
- 'private-secret-key: <Your private-secret-key>'
- 'public-api-key: <Your public-api-key>'
- '400 Bad Request: Check evidence format or size.'
- '401 Unauthorized: Verify API key and secret.'
- '404 Not Found: Ensure payment or transaction ID is correct.'
- '400 Bad Request: Check the request parameters or body.'
- '401 Unauthorized: Verify API keys and authentication.'
- '404 Not Found: Ensure the payment_id and transaction_id are correct.'
- If no response is received within the specified time, Yuno will retry sending the
  event notification up to seven times.
- 'EMV_LIABILITY_SHIFT_COUNTERFEIT: The cardholder is claiming that they did not authorize
  or participate in a transaction that you processed.'
- 'EMV_LIABILITY_SHIFT_NOT_COUNTERFEIT: The cardholder is claiming that they did not
  authorize or participate in a transaction that you processed.'
- 'CARD_PRESENT_FRAUD: The cardholder is claiming that they did not authorize or participate
  in a key-entered or unattended transaction conducted in a card-present environment.'
- 'NON_CARD_PRESENT_FRAUD: The cardholder did not authorize or participate in a transaction
  conducted in a card-not-present environment, such as internet, mail-order, phone-order,
  and others.'
- 'SCHEME_MONITORING_PROGRAM: Scheme Fraud Monitoring program.'
- 'NO_AUTHORIZATION: Correct and valid authorization was not obtained by the merchant.'
- 'DECLINED_AUTHORIZATION: Authorization request received a Decline response and the
  merchant completed the transaction.'
- 'LATE_PRESENTMENT: The transaction was not sent within the timeframe required.'
- 'INCORRECT_TRANSACTION_CODE: The cardholder is claiming that the converted amount
  of charge on an international transaction is incorrect.'
- 'INCORRECT_CURRENCY: The merchant made one or more errors related to the transaction
  currency.'
- 'INCORRECT_ACCOUNT_NUMBER: The account number in the authorization does not match
  the account number used in the transaction.'
- 'INCORRECT_AMOUNT: The cardholder is claiming that the amount they agreed to pay
  differs from the amount charged.'
- 'DUPLICATE_PROCESSING: A single transaction was processed two or more times.'
- 'INVALID_DATA: The authorization was obtained using invalid or incorrect data.'
- 'PRODUCT_OR_SERVICE_NOT_RECEIVED: The cardholder is claiming that merchandise or
  services that they ordered were not received.'
- 'CANCELED_RECURRING_TRANSACTION: A recurring transaction was processed after it
  was cancelled.'
- 'PRODUCT_OR_SERVICE_ISSUE: The cardholder is claiming the goods were not as described.'
- 'COUNTERFEIT_MERCHANDISE: The merchandise was identified as counterfeit.'
- 'MISREPRESENTATION: The cardholder’s bank received a notice from the cardholder
  is claiming misrepresented terms of sale.'
- 'CREDIT_NOT_PROCESSED: The cardholder’s bank received a notice from the cardholder
  claiming that they received authorization, credit or voided transaction receipt
  that has not been processed.'
- 'PRODUCT_OR_SERVICE_CANCELED: The cardholder’s bank received a notice from the cardholder
  stating that they returned merchandise or cancelled services, but the credit has
  not appeared on the cardholder’s statement.'
- 'ORIGINAL_TRANSACTION_NOT_ACCEPTED: The original credit was not accepted.'
- 'CASH_TRANSACTION_VALUE: Cardholder did not receive the full cash withdrawal at
  an ATM.'
- 'CUSTOMER_AGREEMENT: The issuer asks the merchant for a copy of the receipt signed
  by the cardholder or any other documentation that verifies the customers agreement
  for the purchase.'
- HTTP 200 OK is required as a response to confirm the webhook was successfully received.
- If not receiving a response at the specified time, Yuno webhooks will send the event
  notification up to seven times to avoid information loss.
- 'TOKEN_EXPIRED: Automatic retry with fresh token generation.'
- 'PAYMENT_FAILURE: Built-in retry logic for temporary issues.'
- 'NETWORK_ISSUE: Connection retry mechanisms.'
- 'Token expiration: Re-authenticate customers when tokens expire'
- 'Payment failures: Implement retry logic with exponential backoff'
- 'Network issues: Handle timeouts and connection failures'
- '401 Unauthorized: Recheck API key or permissions'
- '409 Conflict: Indicates that there is an open call for the same `X-Idempotency-Key`.'
- '400 Bad Request: Indicates there’s a problem with the request.'
- '500 Internal Server Error: Indicates a server-side error.'
- 'INVALID_REQUEST: Invalid request.'
- 'INVALID_PARAMETERS: Invalid parameters: list - [parameter_name].'
- 'MISSING_PARAMETERS: Missing parameters: list - [parameter_name].'
- 'INVALID_STATUS: Invalid transaction status.'
- 'COUNTRY_NOT_SUPPORTED: Country not supported.'
- 'CURRENCY_NOT_ALLOWED: Currency is not allowed for this country.'
- 'CUSTOMER_ID_DUPLICATED: The customer id for the merchant is duplicated.'
- 'INVALID_AMOUNT: Invalid amount for the payment method.'
- 'INVALID_ACCOUNT_ID: Invalid Yuno''s account id'
- 'INVALID_TRANSACTION: Invalid transaction id'
- 'INVALID_API_VERSION: Invalid API Version.'
- 'INVALID_TRANSACTION_TYPE: Invalid transaction type for the request.'
- 'CHARGEBACK_IN_PROCESS: Chargeback in place for this transaction.'
- 'UNAVAILABLE_PAYMENT_METHOD: Unavailable payment method.'
- 'NOT_FOUND: Resource not found.'
- 'UNEXPECTED_RESPONSE: Unexpected service response.'
- 'BAD_REQUEST: There was a bad error executing the request.'
- 'INVALID_REPORT_ID: Report id must be UUID.'
- 'INVALID_REPORT_TYPE: Invalid report type.'
- 'INVALID_DATE_FORMAT: Start/end date format must be yyyy-MM-dd''T''HH:mm:ss.SSS''Z''.'
- 'REPORT_MAX_RANGE_ERROR: Max range date is two months.'
- 'REPORT_RANGE_ERROR: Start date must be before end date. Start/end date must be
  after now.'
- 'REPORT_STATUS_ERROR: Report is not ready yet, status is %s.'
- 'REPORT_EMPTY: Report requested is empty.'
- 'PAYMENT_METHOD_NOT_FOUND: [For Subscriptions] - Payment method associated to the
  customer not found'
- 'PAYMENT_METHOD_STATUS_INVALID: [For Subscriptions] - The payment method is a state
  that does not allow payments to be made.'
- 'INCORRECT_PAYMENT_METHOD_TYPE: [For Subscriptions] - The type of payment method
  of the request does not correspond to the vaulted_token.'
- 'SUBSCRIPTION_NOT_FOUND: [For Subscriptions] - Subscription not found.'
- 'INVALID_STATE: [For Subscriptions] - The subscription state does not support the
  action requested.'
- 'INVALID_DATE: [For Subscriptions] - The subscription can not be resume due to a
  conflict with the availability dates. Please update availability dates and try again
  if you want to keep using the subscription.'
- 'INVALID_PARAMETERS: [For Subscriptions] - Invalid parameters: list - [parameter_name].'
- 'INVALID_CUSTOMER_FOR_TOKEN: The token used for this transaction is associated with
  another customer object.'
- 'PAYMENT_NOT_FOUND: Payment not found.'
- 'TRANSACTION_NOT_FOUND: Transaction of payment not found'
- 'CUSTOMER_NOT_FOUND: Customer not found'
- 'CHECKOUT_SESSION_NOT_FOUND: Checkout session not found or inactive'
- 'REPORT_NOT_FOUND: Report id not found'
- 'IDEMPOTENCY_DUPLICATED: Idempotency is duplicated.'
- 'INVALID_CREDENTIALS: Invalid Credentials.'
- 'EXPIRED_CREDENTIALS: Expired Credentials.'
- 'UNKNOWN_IP_ADDRESS: Unregistered IP address.'
- 'INVALID_TOKEN: Invalid Token.'
- 'TOKEN_IN_USE: The token provided is currently being used in another request.'
- 'AUTHORIZATION_REQUIRED: The merchant has no authorization to use this API.'
- 'UNSUPPORTED_METHOD: Method not supported.'
- 'INTERNAL_ERROR: Internal error.'
- 'REQUEST_TIMEOUT: Request Timeout.'
- '400 Bad Request: Informing there’s a problem with the request, allowing the merchant
  to fix the request and send it again.'
- '500 Internal Server Error: The same remains true for situations where any 500 error
  code is returned.'
- 'INVALID_DATE: [For Subscriptions] - The subscription can not be resume due to a
  conflict with the availability dates. Please update availability dates and try again
  if you want to keep using the subscription'
- 404 Customer not found
- '400 Bad Request: Check request parameters'
- '401 Unauthorized: Check authentication credentials'
- '403 Forbidden: Ensure proper permissions'
- '404 Not Found: Verify endpoint URL'
- '401 Unauthorized: Recheck your API keys'
- '403 Forbidden: Ensure you have access rights'
- '400: Bad Request'
- '401: Unauthorized'
- '403: Forbidden'
- '404: Not Found'
- '400: Invalid request'
- 400 - Bad Request
- 401 - Unauthorized
- 403 - Result
- '400 Bad Request: Invalid request parameters'
- '401 Unauthorized: Invalid credentials provided'
- '403 Forbidden: Access denied to the requested resource'
- '401 Unauthorized: Invalid API key or secret'
- '403 Forbidden: Access denied'
- '400: Bad Request - Check the request parameters.'
- '401: Unauthorized - Check your authentication credentials.'
- 403 - Forbidden
- 400 Bad Request
- 401 Unauthorized
- 'INVALID_DATA: Incorrect payment information; merchant must revalidate before retry'
- 400 - Bad request
- 400 Bad request
- 403 Forbidden
- '400: Bad request'
- '400'
- 'CANCELLED: Payment status updated after cancellation request'
- '401 Unauthorized: Check your API keys'
- '400 Bad Request: Check the request body for required fields'
- '400 Bad Request: Check your request payload'
- '400 Bad Request: Check JSON structure and required fields'
- '401 Unauthorized: Recheck API keys or credentials'
- '429 Too Many Requests: Throttle API calls'
- '401 Unauthorized: Check your API keys or authentication.'
- 'INVALID_REQUEST: Check the request parameters'
- 'TRANSACTION_FAILED: Verify payment details'
- 'UNAUTHORIZED: Check API keys'
- '401 Unauthorized: Recheck API keys or authorization'
- '401 Unauthorized: Check provided keys'
- '401 Unauthorized: Recheck API keys'
- '401 Unauthorized: Check your API keys and permissions.'
- 'PENDING_PROVIDER_CONFIRMATION: Transaction waiting confirmation'
- '401 Unauthorized: Check your API keys and headers'
- '400 Bad Request: Ensure the request body is correctly formatted'
- 'PENDING_PROVIDER_CONFIRMATION: Transaction is waiting for provider confirmation.'
- 'REQUEST_LIMIT_EXCEEDED: Throttle API calls or reduce frequency.'
- 404 Recipient not found
- 409 Conflict - Recipient cannot be deleted
- '404: Recipient not found'
- '409 Conflict: Recipient cannot be blocked'
- 'CREATED: Initial state when a payout is created. It is an internal state.'
- 'PENDING_PROVIDER_CONFIRMATION: The payout has been delivered to the provider and
  is being analyzed.'
- 'AUTHORIZED: The payout has been delivered to the provider, its authorized and its
  waiting merchant''s confirmation to release the transaction.'
- 'SUCCEEDED: The payout was successfully completed.'
- 'REJECTED: Payout rejected by Yuno. Please review the request fields.'
- 'DECLINED: The provider declined the payout.'
- 'ERROR: Error.'
- 409 Conflict - Recipient cannot be blocked
- '400 Bad Request: Check parameter values and formats'
- '401 Unauthorized: Recheck OAuth token'
- 201 - Result
- 400 - Result
- 401 - Result
- 404 Not Found
- '400: code and messages'
- '401: code and messages'
- 400 Invalid request payload.
- 500 Internal server error.
- '400 Bad Request: Check your request parameters'
- '404 Not Found: Verify the endpoint URL'
- '500 Internal Server Error: Try again later'
- '400: Invalid request payload.'
- '500: Internal server error.'
- '401 Unauthorized: Recheck OAuth scopes or token expiration.'
- '400 Bad Request: Validate input data before sending requests.'
auth_info:
  mentioned_objects:
  - YunoConfig
  - PaymentMethodSelected
  - SeamlessParams
  - account_id
  - public-api-key
  - private-secret-key
  - YUNO_ACCOUNT_CODE
  - YUNO_PUBLIC_API_KEY
  - YUNO_PRIVATE_SECRET_KEY
  - YUNO_COUNTRY_CODE
  - YUNO_CURRENCY
  - X-idempotency-key
client:
  base_url: https://api-sandbox.y.uno
  auth:
    type: apikey
  headers:
    Accept: application/json
    content-type: application/json
source_metadata: null
