resources:
- name: pipeline
  endpoint:
    path: /pipelines
    method: GET
    data_selector: pipelines
    params: {}
- name: feature_flags
  endpoint:
    path: /feature_flags
    method: GET
    data_selector: feature_flags
    params: {}
- name: gitlab_pages
  endpoint:
    path: /etc/gitlab/gitlab.rb
    method: POST
    data_selector: configuration
    params:
      namespace_in_path: true
- name: gitlab_pages
  endpoint:
    path: /etc/gitlab/gitlab.rb
    method: GET
    data_selector: records
    params: {}
- name: gitlab_pages
  endpoint:
    path: /etc/gitlab/gitlab.rb
    method: EDIT
    data_selector: null
    params: {}
- name: pages_deployments
  endpoint:
    path: /pages_deployments
    method: POST
    data_selector: deployments
    params: {}
- name: environments
  endpoint:
    path: /api/v4/projects/:id/environments
    method: GET
    data_selector: environments
    params: {}
- name: deployments
  endpoint:
    path: /api/v4/projects/:id/environments/:environment_id/deployments
    method: GET
    data_selector: deployments
    params: {}
- name: workload_identity_pool
  endpoint:
    path: /iam/workload-identity-pools
    method: POST
    data_selector: workloadIdentityPool
    params: {}
- name: workload_identity_provider
  endpoint:
    path: /iam/workload-identity-pools/providers
    method: POST
    data_selector: workloadIdentityProvider
    params: {}
- name: runner
  endpoint:
    path: /runners
    method: POST
    data_selector: runners
- name: docker_network
  endpoint:
    path: /services/data/vXX.X/sobjects/DockerNetwork
    method: GET
    data_selector: records
    params: {}
- name: docker_executor
  endpoint:
    path: /ci
    method: POST
    data_selector: docker
- name: buildah
  endpoint:
    path: /builds
    method: POST
    data_selector: image
    params: {}
- name: docker
  endpoint:
    path: /runners/docker
    method: GET
    data_selector: volume_driver_ops
    params:
      size: 50G
- name: docker_executor
  endpoint:
    path: /ci
    method: GET
    data_selector: jobs
- name: docker
  endpoint:
    path: /dev/kvm
    method: GET
- name: docker
  endpoint:
    path: /dev/dri
    method: GET
- name: runner
  endpoint:
    path: /ci
    method: GET
    data_selector: runners
    params: {}
- name: oci-container-build
  endpoint:
    path: /ci/jobs
    method: POST
    data_selector: jobs
    params: {}
- name: windows-docker-2019
  endpoint:
    path: /
    method: GET
    data_selector: runners
    params: {}
- name: parent_pipeline
  endpoint:
    path: /parent-pipeline
    method: POST
    data_selector: jobs
    params:
      resource_group: AWS-production
- name: child_pipeline
  endpoint:
    path: /deploy.gitlab-ci.yml
    method: POST
    data_selector: jobs
    params:
      resource_group: production
- name: build
  endpoint:
    path: /build
    method: POST
    data_selector: jobs
    params: {}
- name: deploy
  endpoint:
    path: /deploy
    method: POST
    data_selector: jobs
    params:
      resource_group: production
- name: executors
  endpoint:
    path: /api/v4/runners/executors
    method: GET
- name: mysql
  endpoint:
    path: /services/data/vXX.X/sobjects/MySQL
    method: GET
    data_selector: records
    params: {}
- name: postgres
  endpoint:
    path: /services/data/vXX.X/sobjects/Postgres
    method: GET
    data_selector: records
    params: {}
- name: redis
  endpoint:
    path: /services/data/vXX.X/sobjects/Redis
    method: GET
    data_selector: records
    params: {}
- name: wordpress
  endpoint:
    path: /services/data/vXX.X/sobjects/Wordpress
    method: GET
    data_selector: records
    params: {}
- name: mysql
  endpoint:
    path: mysql:latest
    method: GET
- name: super_sql
  endpoint:
    path: super/sql:latest
    method: GET
    command:
    - /usr/bin/super-sql
    - run
- name: pipeline_trigger
  endpoint:
    path: /api/v4/projects/<project_id>/trigger/pipeline
    method: POST
    data_selector: pipeline
    params: {}
- name: list_trigger_tokens
  endpoint:
    path: /projects/:id/triggers
    method: GET
- name: get_trigger_token_details
  endpoint:
    path: /projects/:id/triggers/:trigger_id
    method: GET
- name: create_trigger_token
  endpoint:
    path: /projects/:id/triggers
    method: POST
- name: update_trigger_token
  endpoint:
    path: /projects/:id/triggers/:trigger_id
    method: PUT
- name: remove_trigger_token
  endpoint:
    path: /projects/:id/triggers/:trigger_id
    method: DELETE
- name: trigger_pipeline
  endpoint:
    path: /projects/:id/trigger/pipeline
    method: POST
- name: slash_command_integrations
  endpoint:
    path: /chatops/slash_commands
    method: GET
    data_selector: integrations
    params: {}
- name: ci_cd_jobs
  endpoint:
    path: /ci_cd/jobs
    method: GET
    data_selector: jobs
    params: {}
- name: Development Group
  endpoint:
    path: /groups
    method: POST
    data_selector: group
    params:
      name: Development
      path: development-group
      visibility: private
- name: Product Management Subgroup
  endpoint:
    path: /groups/development-group/subgroups
    method: POST
    data_selector: subgroup
    params:
      name: Product Management
      visibility: private
- name: Engineering Subgroup
  endpoint:
    path: /groups/development-group/subgroups
    method: POST
    data_selector: subgroup
    params:
      name: Engineering
      visibility: private
- name: User Experience Subgroup
  endpoint:
    path: /groups/development-group/subgroups
    method: POST
    data_selector: subgroup
    params:
      name: User Experience
      visibility: private
- name: UX Design Subgroup
  endpoint:
    path: /groups/user-experience-group/subgroups
    method: POST
    data_selector: subgroup
    params:
      name: UX Design
      visibility: private
- name: Technical Writing Subgroup
  endpoint:
    path: /groups/user-experience-group/subgroups
    method: POST
    data_selector: subgroup
    params:
      name: Technical Writing
      visibility: private
- name: product_management_subgroup
  endpoint:
    path: /subgroups/product_management
    method: GET
    data_selector: members
    params: {}
- name: engineering_subgroup
  endpoint:
    path: /subgroups/engineering
    method: GET
    data_selector: members
    params: {}
- name: user_experience_subgroup
  endpoint:
    path: /subgroups/user_experience
    method: GET
    data_selector: members
    params: {}
- name: release_project
  endpoint:
    path: /projects/release_2_0
    method: GET
    data_selector: members
    params: {}
- name: todos
  endpoint:
    path: /todos
    method: GET
    data_selector: ''
    params: {}
- name: mark_as_done_single
  endpoint:
    path: /todos/:id/mark_as_done
    method: POST
    data_selector: response
    params:
      id: integer
- name: mark_as_done_all
  endpoint:
    path: /todos/mark_as_done
    method: POST
    data_selector: response
    params: {}
- name: upgrade_steps
  endpoint:
    path: /upgrade/gitlab
    method: GET
    data_selector: steps
- name: pre_upgrade_checks
  endpoint:
    path: /upgrade/pre_checks
    method: GET
    data_selector: checks
- name: post_upgrade_checks
  endpoint:
    path: /upgrade/post_checks
    method: GET
    data_selector: checks
- name: input_parameters
  endpoint:
    path: /spec/inputs
    method: GET
    data_selector: inputs
    params: {}
- name: scan-website-job
  endpoint:
    path: scan-website-job.yml
    method: GET
- name: steps
  endpoint:
    path: /ci-cd/steps
    method: GET
    data_selector: steps
    params: {}
- name: step_specification
  endpoint:
    path: /step_specification
    method: GET
    data_selector: spec
    params: {}
- name: environment_variables
  endpoint:
    path: /environment_variables
    method: GET
    data_selector: env
    params: {}
- name: hello_world
  endpoint:
    path: hello_world
    method: run
    data_selector: outputs
    params: {}
- name: hello_steps
  endpoint:
    path: hello_steps
    method: run
    data_selector: outputs
    params: {}
- name: all_my_greetings
  endpoint:
    path: /main
    method: GET
    data_selector: echo
    params: {}
- name: inputs
  endpoint:
    path: /inputs
    method: GET
    data_selector: inputs
    params: {}
- name: after_script
  endpoint:
    path: /after_script
    method: GET
    data_selector: scripts
- name: allow_failure
  endpoint:
    path: /allow_failure
    method: GET
    data_selector: jobs
- name: artifacts
  endpoint:
    path: /artifacts
    method: POST
    data_selector: files
- name: jobs
  endpoint:
    path: /jobs
    method: GET
    data_selector: jobs
- name: pipelines
  endpoint:
    path: /pipelines
    method: GET
    data_selector: pipelines
- name: pipelines
  endpoint:
    path: /api/v4/projects/:id/pipelines
    method: GET
    data_selector: pipelines
    params: {}
- name: pipeline details
  endpoint:
    path: /api/v4/projects/:id/pipelines/:pipeline_id
    method: GET
    data_selector: pipeline
    params: {}
- name: jobs
  endpoint:
    path: /api/v4/projects/:id/jobs
    method: GET
    data_selector: jobs
    params: {}
- name: component_project
  endpoint:
    path: /component/project
    method: GET
    data_selector: components
    params: {}
- name: component
  endpoint:
    path: /templates/
    method: GET
    data_selector: components
    params: {}
- name: pipeline_variables
  endpoint:
    path: /settings/ci_cd/variables
    method: GET
    data_selector: variables
    params: {}
- name: jobs
  endpoint:
    path: /api/v4/jobs/request
    method: POST
- name: runners
  endpoint:
    path: /api/v4/runners
    method: POST
- name: Auto DevOps features
  endpoint:
    path: /auto_devops/features
    method: GET
    data_selector: features
    params: {}
- name: Deployment options
  endpoint:
    path: /auto_devops/deploy
    method: GET
    data_selector: deploy_options
    params: {}
- name: enterprise_users
  endpoint:
    path: /api/v4/users
    method: GET
    data_selector: users
- name: domain_verification
  endpoint:
    path: /api/v4/groups/:id/domain_verification
    method: GET
    data_selector: domains
- name: account_and_limit_settings
  endpoint:
    path: /api/v4/account_limits
    method: GET
    data_selector: settings
- name: ci_cd_settings
  endpoint:
    path: /api/v4/ci_cd_settings
    method: GET
    data_selector: settings
- name: container_registry_settings
  endpoint:
    path: /api/v4/container_registry_settings
    method: GET
    data_selector: settings
- name: gitlab_pages_settings
  endpoint:
    path: /api/v4/gitlab_pages_settings
    method: GET
    data_selector: settings
- name: subscription_management
  endpoint:
    path: /api/v4/subscriptions
    method: GET
    data_selector: subscriptions
    params: {}
- name: subscription_data
  endpoint:
    path: /customers_portal/subscription_data
    method: POST
    data_selector: data
    params: {}
- name: subscription_contacts
  endpoint:
    path: /api/v4/subscription_contacts
    method: GET
- name: seat_usage
  endpoint:
    path: /api/v4/seat_usage
    method: GET
- name: billing_information
  endpoint:
    path: /api/v4/billing
    method: GET
- name: billable_users
  endpoint:
    path: /api/v4/users/billable
    method: GET
    data_selector: billable_users
    params: {}
- name: historical_maximum_users
  endpoint:
    path: /api/v4/users/historical_maximum
    method: GET
    data_selector: historical_maximum_users
    params:
      from: 1.year.ago.beginning_of_day
      to: Time.current.end_of_day
- name: GitLab Duo Core
  endpoint:
    path: /gitlab_duo/core
    method: GET
    data_selector: features
    params: {}
- name: GitLab Duo Pro
  endpoint:
    path: /gitlab_duo/pro
    method: GET
    data_selector: features
    params: {}
- name: GitLab Duo Enterprise
  endpoint:
    path: /gitlab_duo/enterprise
    method: GET
    data_selector: features
    params: {}
- name: two_factor_authentication
  endpoint:
    path: /api/v4/application/settings
    method: PUT
    data_selector: settings
    params:
      require_two_factor_authentication: true
      two_factor_grace_period: 0
- name: group_permissions
  endpoint:
    path: /groups/:id/permissions
    method: GET
    data_selector: permissions
- name: project_permissions
  endpoint:
    path: /projects/:id/permissions
    method: GET
    data_selector: permissions
- name: container_registry_permissions
  endpoint:
    path: /permissions/container_registry
    method: GET
    data_selector: permissions
    params: {}
- name: package_registry_permissions
  endpoint:
    path: /permissions/package_registry
    method: GET
    data_selector: permissions
    params: {}
- name: repository_group_permissions
  endpoint:
    path: /permissions/repository_group
    method: GET
    data_selector: permissions
    params: {}
- name: user_management_permissions
  endpoint:
    path: /permissions/user_management
    method: GET
    data_selector: permissions
    params: {}
- name: workspace_permissions
  endpoint:
    path: /permissions/workspace
    method: GET
    data_selector: permissions
    params: {}
- name: analytics_permissions
  endpoint:
    path: /permissions/analytics
    method: GET
    data_selector: permissions
    params: {}
- name: application_security_permissions
  endpoint:
    path: /permissions/application_security
    method: GET
    data_selector: permissions
    params: {}
- name: ci_cd_permissions
  endpoint:
    path: /ci_cd/permissions
    method: GET
    data_selector: permissions
    params: {}
- name: compliance_features
  endpoint:
    path: /compliance/features
    method: GET
    data_selector: features
    params: {}
- name: gitlab_duo
  endpoint:
    path: /gitlab_duo
    method: GET
    data_selector: duo_features
    params: {}
- name: model_registry
  endpoint:
    path: /model_registry
    method: GET
    data_selector: models
    params: {}
- name: monitoring
  endpoint:
    path: /monitoring
    method: GET
    data_selector: incidents
    params: {}
- name: project_permissions
  endpoint:
    path: /projects/permissions
    method: GET
    data_selector: permissions
    params: {}
- name: repository_permissions
  endpoint:
    path: /repository/permissions
    method: GET
    data_selector: permissions
    params: {}
- name: omniauth_providers
  endpoint:
    path: /users/auth
    method: GET
- name: gitaly_configuration
  endpoint:
    data_selector: configuration
    params:
      concurrency:
      - rpc: /gitaly.SmartHTTPService/PostReceivePack
        max_per_repo: 3
      - rpc: /gitaly.SSHService/SSHUploadPack
        max_per_repo: 3
      cgroups:
        repositories:
          count: 2
        mountpoint: /sys/fs/cgroup
        hierarchy_root: gitaly
        memory_bytes: 500000
        cpu_shares: 512
- name: backup
  endpoint:
    path: /gitlab.toolbox.backups.objectStorage
    method: POST
    data_selector: backups
    params: {}
- name: projects
  endpoint:
    path: /api/v4/projects
    method: GET
    data_selector: projects
- name: pipeline_configuration
  endpoint:
    path: /settings/integrations/diffblue_cover
    method: POST
    data_selector: configuration
    params: {}
- name: set_external_control_status
  endpoint:
    path: /api/v4/projects/:id/compliance_external_controls/:external_control_id/status
    method: POST
    data_selector: status
    params:
      id: integer
      external_control_id: integer
      status: string
- name: jira_issues_integration
  endpoint:
    path: /jira/issues
    method: GET
    data_selector: issues
- name: jira_development_panel
  endpoint:
    path: /jira/development_panel
    method: GET
    data_selector: development_info
- name: Certificate Management
  endpoint:
    path: /certificate_management
    method: GET
- name: Consul
  endpoint:
    path: /consul
    method: GET
- name: Database Migrations
  endpoint:
    path: /database_migrations
    method: GET
- name: Elasticsearch
  endpoint:
    path: /elasticsearch
    method: GET
- name: Gitaly
  endpoint:
    path: /gitaly
    method: GET
- name: GitLab Exporter
  endpoint:
    path: /gitlab_exporter
    method: GET
- name: GitLab Geo
  endpoint:
    path: /gitlab_geo
    method: GET
- name: GitLab Pages
  endpoint:
    path: /gitlab_pages
    method: GET
- name: GitLab agent
  endpoint:
    path: /gitlab_agent
    method: GET
- name: 'GitLab self-monitoring: Alertmanager'
  endpoint:
    path: /alertmanager
    method: GET
- name: 'GitLab self-monitoring: Grafana'
  endpoint:
    path: /grafana
    method: GET
- name: 'GitLab self-monitoring: Jaeger'
  endpoint:
    path: /jaeger
    method: GET
- name: 'GitLab self-monitoring: Prometheus'
  endpoint:
    path: /prometheus
    method: GET
- name: 'GitLab self-monitoring: Sentry'
  endpoint:
    path: /sentry
    method: GET
- name: GitLab Shell
  endpoint:
    path: /gitlab_shell
    method: GET
- name: GitLab Workhorse
  endpoint:
    path: /gitlab_workhorse
    method: GET
- name: Inbound email (SMTP)
  endpoint:
    path: /inbound_email
    method: GET
- name: Jaeger integration
  endpoint:
    path: /jaeger_integration
    method: GET
- name: LDAP Authentication
  endpoint:
    path: /ldap_authentication
    method: GET
- name: Mattermost
  endpoint:
    path: /mattermost
    method: GET
- name: MinIO
  endpoint:
    path: /minio
    method: GET
- name: NGINX
  endpoint:
    path: /nginx
    method: GET
- name: Node Exporter
  endpoint:
    path: /node_exporter
    method: GET
- name: Outbound email (SMTP)
  endpoint:
    path: /outbound_email
    method: GET
- name: Patroni
  endpoint:
    path: /patroni
    method: GET
- name: PgBouncer Exporter
  endpoint:
    path: /pgbouncer_exporter
    method: GET
- name: PgBouncer
  endpoint:
    path: /pgbouncer
    method: GET
- name: PostgreSQL Exporter
  endpoint:
    path: /postgresql_exporter
    method: GET
- name: PostgreSQL
  endpoint:
    path: /postgresql
    method: GET
- name: Praefect
  endpoint:
    path: /praefect
    method: GET
- name: Puma (GitLab Rails)
  endpoint:
    path: /puma
    method: GET
- name: Redis Exporter
  endpoint:
    path: /redis_exporter
    method: GET
- name: Redis
  endpoint:
    path: /redis
    method: GET
- name: Registry
  endpoint:
    path: /registry
    method: GET
- name: Runner
  endpoint:
    path: /runner
    method: GET
- name: Sentry integration
  endpoint:
    path: /sentry_integration
    method: GET
- name: Sidekiq
  endpoint:
    path: /sidekiq
    method: GET
- name: Token Revocation API
  endpoint:
    path: /token_revocation
    method: GET
- name: alertmanager
  endpoint:
    path: /alertmanager
    method: GET
    data_selector: ''
    params: {}
- name: certificate_management
  endpoint:
    path: /certificate_management
    method: GET
    data_selector: ''
    params: {}
- name: consul
  endpoint:
    path: /consul
    method: GET
    data_selector: ''
    params: {}
- name: elasticsearch
  endpoint:
    path: /elasticsearch
    method: GET
    data_selector: ''
    params: {}
- name: gitaly
  endpoint:
    path: /gitaly
    method: GET
    data_selector: ''
    params: {}
- name: praefect
  endpoint:
    path: /praefect
    method: GET
    data_selector: ''
    params: {}
- name: gitlab_geo
  endpoint:
    path: /gitlab_geo
    method: GET
    data_selector: ''
    params: {}
- name: gitlab_exporter
  endpoint:
    path: /gitlab_exporter
    method: GET
    data_selector: ''
    params: {}
- name: gitlab_agent
  endpoint:
    path: /gitlab_agent
    method: GET
    data_selector: ''
    params: {}
- name: gitlab_pages
  endpoint:
    path: /gitlab_pages
    method: GET
    data_selector: ''
    params: {}
- name: gitlab_runner
  endpoint:
    path: /gitlab_runner
    method: GET
    data_selector: ''
    params: {}
- name: gitlab_shell
  endpoint:
    path: /gitlab_shell
    method: GET
    data_selector: ''
    params: {}
- name: gitlab_workhorse
  endpoint:
    path: /gitlab_workhorse
    method: GET
    data_selector: ''
    params: {}
- name: grafana
  endpoint:
    path: /grafana
    method: GET
    data_selector: ''
    params: {}
- name: jaeger
  endpoint:
    path: /jaeger
    method: GET
    data_selector: ''
    params: {}
- name: logrotate
  endpoint:
    path: /logrotate
    method: GET
    data_selector: ''
    params: {}
- name: mattermost
  endpoint:
    path: /mattermost
    method: GET
    data_selector: ''
    params: {}
- name: minio
  endpoint:
    path: /minio
    method: GET
    data_selector: ''
    params: {}
- name: nginx
  endpoint:
    path: /nginx
    method: GET
    data_selector: ''
    params: {}
- name: node_exporter
  endpoint:
    path: /node_exporter
    method: GET
    data_selector: ''
    params: {}
- name: patroni
  endpoint:
    path: /patroni
    method: GET
    data_selector: ''
    params: {}
- name: pgbouncer
  endpoint:
    path: /pgbouncer
    method: GET
    data_selector: ''
    params: {}
- name: pgbouncer_exporter
  endpoint:
    path: /pgbouncer_exporter
    method: GET
    data_selector: ''
    params: {}
- name: postgresql
  endpoint:
    path: /postgresql
    method: GET
    data_selector: ''
    params: {}
- name: postgresql_exporter
  endpoint:
    path: /postgresql_exporter
    method: GET
    data_selector: ''
    params: {}
- name: prometheus
  endpoint:
    path: /prometheus
    method: GET
    data_selector: ''
    params: {}
- name: redis
  endpoint:
    path: /redis
    method: GET
    data_selector: ''
    params: {}
- name: redis_exporter
  endpoint:
    path: /redis_exporter
    method: GET
    data_selector: ''
    params: {}
- name: registry
  endpoint:
    path: /registry
    method: GET
    data_selector: ''
    params: {}
- name: sentry
  endpoint:
    path: /sentry
    method: GET
    data_selector: ''
    params: {}
- name: sidekiq
  endpoint:
    path: /sidekiq
    method: GET
    data_selector: ''
    params: {}
- name: puma
  endpoint:
    path: /puma
    method: GET
    data_selector: ''
    params: {}
- name: ldap_authentication
  endpoint:
    path: /ldap_authentication
    method: GET
    data_selector: ''
    params: {}
- name: outbound_email
  endpoint:
    path: /outbound_email
    method: GET
    data_selector: ''
    params: {}
- name: inbound_email
  endpoint:
    path: /inbound_email
    method: GET
    data_selector: ''
    params: {}
- name: ci_variables_project
  endpoint:
    path: gitlab:seed:ci_variables_project
    method: POST
    data_selector: variables
    params:
      project_path: required
      seed_count: 10
      environment_scope: '*'
      prefix: VAR_
- name: ci_variables_group
  endpoint:
    path: gitlab:seed:ci_variables_group
    method: POST
    data_selector: variables
    params:
      group_name: required
      seed_count: 10
      environment_scope: '*'
      prefix: GROUP_VAR_
- name: ci_variables_instance
  endpoint:
    path: gitlab:seed:ci_variables_instance
    method: POST
    data_selector: variables
    params:
      seed_count: 10
      prefix: INSTANCE_VAR_
- name: as-if-jh pipeline
  endpoint:
    path: /pipelines
    method: POST
    data_selector: pipelines
    params: {}
- name: runners
  endpoint:
    path: /runners
    method: GET
    data_selector: runners
    params: {}
- name: gitlab_pages
  endpoint:
    path: /gitlab-pages
    method: GET
- name: installation
  endpoint:
    path: /admin/license/new
    method: POST
    data_selector: license
    params: {}
- name: service_status
  endpoint:
    path: /gitlab-ctl/status
    method: GET
    data_selector: status
    params: {}
- name: configuration
  endpoint:
    path: /gitlab-ctl/show-config
    method: GET
    data_selector: configuration
    params: {}
- name: logs
  endpoint:
    path: /logs
    method: GET
    data_selector: logs
    params: {}
- name: Linux package installation
  endpoint:
    path: /troubleshooting/linux-package-installation
    method: GET
    data_selector: issues
    params: {}
- name: repositories
  endpoint:
    path: /api/v4/projects/:id/repository
    method: GET
    data_selector: projects
    params: {}
- name: gitlab_installation
  endpoint:
    path: /install
    method: GET
    data_selector: installation_steps
    params: {}
- name: installation_guide
  endpoint:
    path: /installation
    method: GET
    data_selector: steps
    params: {}
- name: gitlab
  endpoint:
    path: /gitlab
    method: GET
    data_selector: data
    params: {}
- name: gitlab
  endpoint:
    path: /gitlab
    method: GET
    data_selector: records
- name: gitlab_repositories
  endpoint:
    path: /gitlab-org/gitlab-foss/repositories
    method: GET
    data_selector: repositories
    params: {}
- name: gitlab_users
  endpoint:
    path: /gitlab-org/gitlab/users
    method: GET
    data_selector: users
    params: {}
- name: gitlab_shell_config
  endpoint:
    path: /gitlab-shell/config.yml
    method: GET
    data_selector: config
- name: gitlab_repo
  endpoint:
    path: /gitlab/repositories
    method: GET
    data_selector: repositories
- name: gitlab
  endpoint:
    path: /api/v4/projects
    method: GET
    data_selector: projects
    params: {}
- name: gitlab
  endpoint:
    path: /api/v4/projects
    method: GET
    data_selector: projects
    params: {}
- name: gitlab_projects
  endpoint:
    path: /api/v4/projects
    method: GET
    data_selector: projects
    params: {}
- name: gitlab_repository
  endpoint:
    path: /api/v4/projects
    method: GET
    data_selector: projects
    params: {}
- name: prometheus
  endpoint:
    path: ''
    method: ''
    data_selector: ''
    params:
      enabled: 'true'
      server_address: 10.1.2.3:9090
- name: GitLab repositories
  endpoint:
    path: /home/git/repositories
    method: GET
    data_selector: repositories
    params: {}
- name: access_requests
  endpoint:
    path: /projects/:id/access_requests
    method: GET
- name: access_tokens
  endpoint:
    path: /projects/:id/access_tokens
    method: GET
- name: agents
  endpoint:
    path: /projects/:id/cluster_agents
    method: GET
- name: branches
  endpoint:
    path: /projects/:id/repository/branches/
    method: GET
- name: commits
  endpoint:
    path: /projects/:id/repository/commits
    method: GET
- name: container_registry
  endpoint:
    path: /projects/:id/registry/repositories
    method: GET
- name: deployments
  endpoint:
    path: /projects/:id/deployments
    method: GET
- name: issues
  endpoint:
    path: /projects/:id/issues
    method: GET
- name: merge_requests
  endpoint:
    path: /projects/:id/merge_requests
    method: GET
- name: pipelines
  endpoint:
    path: /projects/:id/pipelines
    method: GET
- name: projects
  endpoint:
    path: /projects
    method: GET
- name: access_requests
  endpoint:
    path: /groups/:id/access_requests/
    method: GET
- name: access_tokens
  endpoint:
    path: /groups/:id/access_tokens
    method: GET
- name: custom_attributes
  endpoint:
    path: /groups/:id/custom_attributes
    method: GET
- name: debian_distributions
  endpoint:
    path: /groups/:id/-/packages/debian
    method: GET
- name: deploy_tokens
  endpoint:
    path: /groups/:id/deploy_tokens
    method: GET
- name: discussions
  endpoint:
    path: /groups/:id/epics/.../discussions
    method: GET
- name: epic_issues
  endpoint:
    path: /groups/:id/epics/.../issues
    method: GET
- name: epic_links
  endpoint:
    path: /groups/:id/epics/.../epics
    method: GET
- name: epics
  endpoint:
    path: /groups/:id/epics
    method: GET
- name: groups
  endpoint:
    path: /groups
    method: GET
- name: group_badges
  endpoint:
    path: /groups/:id/badges
    method: GET
- name: group_issue_boards
  endpoint:
    path: /groups/:id/boards
    method: GET
- name: group_iterations
  endpoint:
    path: /groups/:id/iterations
    method: GET
- name: group_labels
  endpoint:
    path: /groups/:id/labels
    method: GET
- name: group_level_variables
  endpoint:
    path: /groups/:id/variables
    method: GET
- name: group_milestones
  endpoint:
    path: /groups/:id/milestones
    method: GET
- name: group_releases
  endpoint:
    path: /groups/:id/releases
    method: GET
- name: group_ssh_certificates
  endpoint:
    path: /groups/:id/ssh_certificates
    method: GET
- name: group_wikis
  endpoint:
    path: /groups/:id/wikis
    method: GET
- name: invitations
  endpoint:
    path: /groups/:id/invitations
    method: GET
- name: issues
  endpoint:
    path: /groups/:id/issues
    method: GET
- name: issues_statistics
  endpoint:
    path: /groups/:id/issues_statistics
    method: GET
- name: linked_epics
  endpoint:
    path: /groups/:id/epics/.../related_epics
    method: GET
- name: member_roles
  endpoint:
    path: /groups/:id/member_roles
    method: GET
- name: members
  endpoint:
    path: /groups/:id/members
    method: GET
- name: merge_requests
  endpoint:
    path: /groups/:id/merge_requests
    method: GET
- name: notes
  endpoint:
    path: /groups/:id/epics/.../notes
    method: GET
- name: notification_settings
  endpoint:
    path: /groups/:id/notification_settings
    method: GET
- name: resource_label_events
  endpoint:
    path: /groups/:id/epics/.../resource_label_events
    method: GET
- name: search
  endpoint:
    path: /groups/:id/search
    method: GET
- name: account_avatar
  endpoint:
    path: /avatar
    method: GET
    data_selector: avatar_url
    params:
      email: admin@example.com
      size: 32
- name: access_requests_group
  endpoint:
    path: /groups/:id/access_requests
    method: GET
    data_selector: records
    params:
      id: integer/string
- name: access_requests_project
  endpoint:
    path: /projects/:id/access_requests
    method: GET
    data_selector: records
    params:
      id: integer/string
- name: request_access_group
  endpoint:
    path: /groups/:id/access_requests
    method: POST
    data_selector: records
    params:
      id: integer/string
- name: request_access_project
  endpoint:
    path: /projects/:id/access_requests
    method: POST
    data_selector: records
    params:
      id: integer/string
- name: approve_access_request_group
  endpoint:
    path: /groups/:id/access_requests/:user_id/approve
    method: PUT
    data_selector: records
    params:
      id: integer/string
      user_id: integer
- name: approve_access_request_project
  endpoint:
    path: /projects/:id/access_requests/:user_id/approve
    method: PUT
    data_selector: records
    params:
      id: integer/string
      user_id: integer
- name: deny_access_request_group
  endpoint:
    path: /groups/:id/access_requests/:user_id
    method: DELETE
    data_selector: records
    params:
      id: integer/string
      user_id: integer
- name: deny_access_request_project
  endpoint:
    path: /projects/:id/access_requests/:user_id
    method: DELETE
    data_selector: records
    params:
      id: integer/string
      user_id: integer
- name: list_agents
  endpoint:
    path: /projects/:id/cluster_agents
    method: GET
    data_selector: agents
    params:
      id: project_id
- name: get_agent_details
  endpoint:
    path: /projects/:id/cluster_agents/:agent_id
    method: GET
    data_selector: agent
    params:
      id: project_id
      agent_id: agent_id
- name: register_agent
  endpoint:
    path: /projects/:id/cluster_agents
    method: POST
    data_selector: new_agent
    params:
      id: project_id
      name: agent_name
- name: delete_agent
  endpoint:
    path: /projects/:id/cluster_agents/:agent_id
    method: DELETE
    params:
      id: project_id
      agent_id: agent_id
- name: list_tokens
  endpoint:
    path: /projects/:id/cluster_agents/:agent_id/tokens
    method: GET
    data_selector: '[]'
- name: get_single_token
  endpoint:
    path: /projects/:id/cluster_agents/:agent_id/tokens/:token_id
    method: GET
    data_selector: '{}'
- name: create_agent_token
  endpoint:
    path: /projects/:id/cluster_agents/:agent_id/tokens
    method: POST
    data_selector: '{}'
- name: revoke_agent_token
  endpoint:
    path: /projects/:id/cluster_agents/:agent_id/tokens/:token_id
    method: DELETE
    data_selector: '{}'
- name: list_url_configurations
  endpoint:
    path: /projects/:id/cluster_agents/:agent_id/url_configurations
    method: GET
    data_selector: '[]'
- name: get_agent_url_configuration
  endpoint:
    path: /projects/:id/cluster_agents/:agent_id/url_configurations/:url_configuration_id
    method: GET
    data_selector: url_configuration
- name: create_agent_url_configuration
  endpoint:
    path: /projects/:id/cluster_agents/:agent_id/url_configurations
    method: POST
    data_selector: url_configuration
- name: delete_agent_url_configuration
  endpoint:
    path: /projects/:id/cluster_agents/:agent_id/url_configurations/:url_configuration_id
    method: DELETE
- name: upload_metric_image
  endpoint:
    path: /projects/:id/alert_management_alerts/:alert_iid/metric_images
    method: POST
    data_selector: id
    params: {}
- name: list_metric_images
  endpoint:
    path: /projects/:id/alert_management_alerts/:alert_iid/metric_images
    method: GET
    data_selector: '[]'
    params: {}
- name: update_metric_image
  endpoint:
    path: /projects/:id/alert_management_alerts/:alert_iid/metric_images/:image_id
    method: PUT
    data_selector: id
    params: {}
- name: delete_metric_image
  endpoint:
    path: /projects/:id/alert_management_alerts/:alert_iid/metric_images/:image_id
    method: DELETE
    data_selector: id
    params: {}
- name: get_application_appearance
  endpoint:
    path: /application/appearance
    method: GET
    data_selector: ''
- name: update_application_appearance
  endpoint:
    path: /application/appearance
    method: PUT
    data_selector: ''
- name: update_application_logo
  endpoint:
    path: /application/appearance
    method: PUT
    data_selector: ''
- name: application_settings
  endpoint:
    path: /application/settings
    method: GET
    data_selector: records
- name: application_settings
  endpoint:
    path: /application/settings
    method: PUT
    data_selector: id
    params:
      signup_enabled: 'false'
      default_project_visibility: internal
- name: settings
  endpoint:
    path: /application/settings
    method: GET
    data_selector: settings
- name: dormant_project_settings
  endpoint:
    path: /api/v4/application/settings/dormant_project
    method: GET
    data_selector: settings
    params: {}
- name: housekeeping_settings
  endpoint:
    path: /api/v4/application/settings/housekeeping
    method: GET
    data_selector: settings
    params: {}
- name: application_statistics
  endpoint:
    path: /application/statistics
    method: GET
    data_selector: statistics
    params: {}
- name: create_application
  endpoint:
    path: /applications
    method: POST
- name: list_applications
  endpoint:
    path: /applications
    method: GET
- name: delete_application
  endpoint:
    path: /applications/:id
    method: DELETE
- name: renew_application_secret
  endpoint:
    path: /applications/:id/renew-secret
    method: POST
- name: instance_audit_events
  endpoint:
    path: /audit_events
    method: GET
    data_selector: records
    params: {}
- name: group_audit_events
  endpoint:
    path: /groups/:id/audit_events
    method: GET
    data_selector: records
    params: {}
- name: project_audit_events
  endpoint:
    path: /projects/:id/audit_events
    method: GET
    data_selector: '[]'
    params: {}
- name: specific_project_audit_event
  endpoint:
    path: /projects/:id/audit_events/:audit_event_id
    method: GET
    data_selector: '{}'
    params: {}
- name: list_epics_related_to_given_epic
  endpoint:
    path: /groups/:id/epics/:epic_iid/epics
    method: GET
    data_selector: records
    params: {}
- name: assign_child_epic
  endpoint:
    path: /groups/:id/epics/:epic_iid/epics/:child_epic_id
    method: POST
    data_selector: records
    params: {}
- name: create_and_assign_child_epic
  endpoint:
    path: /groups/:id/epics/:epic_iid/epics
    method: POST
    data_selector: records
    params: {}
- name: reorder_child_epic
  endpoint:
    path: /groups/:id/epics/:epic_iid/epics/:child_epic_id
    method: PUT
    data_selector: records
    params: {}
- name: unassign_child_epic
  endpoint:
    path: /groups/:id/epics/:epic_iid/epics/:child_epic_id
    method: DELETE
    data_selector: records
    params: {}
- name: list_repository_branches
  endpoint:
    path: /projects/:id/repository/branches
    method: GET
    data_selector: records
    params:
      id: ''
- name: get_single_repository_branch
  endpoint:
    path: /projects/:id/repository/branches/:branch
    method: GET
    data_selector: records
    params:
      id: ''
      branch: ''
- name: create_repository_branch
  endpoint:
    path: /projects/:id/repository/branches
    method: POST
    data_selector: records
    params:
      id: ''
      branch: ''
      ref: ''
- name: delete_repository_branch
  endpoint:
    path: /projects/:id/repository/branches/:branch
    method: DELETE
    data_selector: records
    params:
      id: ''
      branch: ''
- name: delete_merged_branches
  endpoint:
    path: /projects/:id/repository/merged_branches
    method: DELETE
    data_selector: records
    params:
      id: ''
- name: commit_signature
  endpoint:
    path: /projects/:id/repository/commits/:sha/signature
    method: GET
    data_selector: signature
    params:
      id: integer/string
      sha: string
- name: get_all_broadcast_messages
  endpoint:
    path: /broadcast_messages
    method: GET
    data_selector: ''
- name: get_specific_broadcast_message
  endpoint:
    path: /broadcast_messages/:id
    method: GET
    data_selector: ''
- name: create_broadcast_message
  endpoint:
    path: /broadcast_messages
    method: POST
    data_selector: ''
- name: update_broadcast_message
  endpoint:
    path: /broadcast_messages/:id
    method: PUT
    data_selector: ''
- name: delete_broadcast_message
  endpoint:
    path: /broadcast_messages/:id
    method: DELETE
    data_selector: ''
- name: discover_cert_based_clusters
  endpoint:
    path: /discover-cert-based-clusters
    method: GET
    params:
      group_id: integer/string
- name: code_completions
  endpoint:
    path: /code_suggestions/completions
    method: POST
- name: code_suggestions_enabled
  endpoint:
    path: /code_suggestions/enabled
    method: POST
- name: direct_access
  endpoint:
    path: /code_suggestions/direct_access
    method: POST
- name: repository_commits
  endpoint:
    path: /projects/:id/repository/commits
    method: GET
    data_selector: '[]'
- name: create_commit
  endpoint:
    path: /projects/:id/repository/commits
    method: POST
    data_selector: commit
    params: {}
- name: get_commit
  endpoint:
    path: /projects/:id/repository/commits/:sha
    method: GET
    data_selector: commit
    params: {}
- name: get_references_a_commit_is_pushed_to
  endpoint:
    path: /projects/:id/repository/commits/:sha/refs
    method: GET
    data_selector: refs
    params: {}
- name: get_sequence_of_a_commit
  endpoint:
    path: /projects/:id/repository/commits/:sha/sequence
    method: GET
    data_selector: count
    params: {}
- name: cherry_pick_a_commit
  endpoint:
    path: /projects/:id/repository/commits/:sha/cherry_pick
    method: POST
    data_selector: id
    params: {}
- name: revert_a_commit
  endpoint:
    path: /projects/:id/repository/commits/:sha/revert
    method: POST
    data_selector: id
    params: {}
- name: commit_diff
  endpoint:
    path: /projects/:id/repository/commits/:sha/diff
    method: GET
    data_selector: diff
    params:
      id: integer/string
      sha: string
- name: commit_comments
  endpoint:
    path: /projects/:id/repository/commits/:sha/comments
    method: GET
    data_selector: note
    params:
      id: integer/string
      sha: string
- name: post_commit_comment
  endpoint:
    path: /projects/:id/repository/commits/:sha/comments
    method: POST
    data_selector: note
    params:
      id: integer/string
      sha: string
      note: string
      path: string
      line: integer
      line_type: string
- name: commit_discussions
  endpoint:
    path: /projects/:id/repository/commits/:sha/discussions
    method: GET
    data_selector: id
    params:
      id: integer/string
      sha: string
- name: commit_statuses
  endpoint:
    path: /projects/:id/repository/commits/:sha/statuses
    method: GET
- name: set_pipeline_status
  endpoint:
    path: /projects/:id/statuses/:sha
    method: POST
- name: merge_requests
  endpoint:
    path: /projects/:id/repository/commits/:sha/merge_requests
    method: GET
- name: change_visibility
  endpoint:
    path: /projects/:id/
    method: PUT
- name: list_registry_repositories
  endpoint:
    path: /projects/:id/registry/repositories
    method: GET
- name: get_repository_tag_details
  endpoint:
    path: /projects/:id/registry/repositories/:repository_id/tags/:tag_name
    method: GET
- name: get_repository_details
  endpoint:
    path: /registry/repositories/:id
    method: GET
- name: delete_registry_repository
  endpoint:
    path: /projects/:id/registry/repositories/:repository_id
    method: DELETE
- name: list_repository_tags
  endpoint:
    path: /projects/:id/registry/repositories/:repository_id/tags
    method: GET
- name: registry_repository_tag_details
  endpoint:
    path: /projects/:id/registry/repositories/:repository_id/tags/:tag_name
    method: GET
    data_selector: name
- name: delete_registry_repository_tag
  endpoint:
    path: /projects/:id/registry/repositories/:repository_id/tags/:tag_name
    method: DELETE
- name: delete_registry_repository_tags_in_bulk
  endpoint:
    path: /projects/:id/registry/repositories/:repository_id/tags
    method: DELETE
- name: container_repositories
  endpoint:
    path: /v2/_catalog
    method: GET
    data_selector: repositories
    params: {}
- name: list_container_repository_protection_rules
  endpoint:
    path: /api/v4/projects/:id/registry/protection/repository/rules
    method: GET
    data_selector: rules
    params: {}
- name: create_container_repository_protection_rule
  endpoint:
    path: /api/v4/projects/:id/registry/protection/repository/rules
    method: POST
    data_selector: rule
    params: {}
- name: update_container_repository_protection_rule
  endpoint:
    path: /api/v4/projects/:id/registry/protection/repository/rules/:protection_rule_id
    method: PATCH
    data_selector: rule
    params: {}
- name: delete_container_repository_protection_rule
  endpoint:
    path: /api/v4/projects/:id/registry/protection/repository/rules/:protection_rule_id
    method: DELETE
    data_selector: 'null'
    params: {}
- name: user_custom_attributes
  endpoint:
    path: /users/:id/custom_attributes
    method: GET
    data_selector: ''
- name: group_custom_attributes
  endpoint:
    path: /groups/:id/custom_attributes
    method: GET
    data_selector: ''
- name: project_custom_attributes
  endpoint:
    path: /projects/:id/custom_attributes
    method: GET
    data_selector: ''
- name: single_user_custom_attribute
  endpoint:
    path: /users/:id/custom_attributes/:key
    method: GET
    data_selector: ''
- name: single_group_custom_attribute
  endpoint:
    path: /groups/:id/custom_attributes/:key
    method: GET
    data_selector: ''
- name: single_project_custom_attribute
  endpoint:
    path: /projects/:id/custom_attributes/:key
    method: GET
    data_selector: ''
- name: set_user_custom_attribute
  endpoint:
    path: /users/:id/custom_attributes/:key
    method: PUT
    data_selector: ''
- name: set_group_custom_attribute
  endpoint:
    path: /groups/:id/custom_attributes/:key
    method: PUT
    data_selector: ''
- name: set_project_custom_attribute
  endpoint:
    path: /projects/:id/custom_attributes/:key
    method: PUT
    data_selector: ''
- name: delete_user_custom_attribute
  endpoint:
    path: /users/:id/custom_attributes/:key
    method: DELETE
    data_selector: ''
- name: delete_group_custom_attribute
  endpoint:
    path: /groups/:id/custom_attributes/:key
    method: DELETE
    data_selector: ''
- name: delete_project_custom_attribute
  endpoint:
    path: /projects/:id/custom_attributes/:key
    method: DELETE
    data_selector: ''
- name: mark_migration
  endpoint:
    path: /api/v4/admin/migrations/:version/mark
    method: POST
    data_selector: null
    params:
      version: integer
      database: string
- name: validate_sample_ci_configuration
  endpoint:
    path: /projects/:id/ci/lint
    method: POST
    data_selector: valid
    params:
      content: CI/CD configuration content
- name: validate_project_ci_configuration
  endpoint:
    path: /projects/:id/ci/lint
    method: GET
    data_selector: valid
    params: {}
- name: CI Lint
  endpoint:
    path: /api/v4/projects/:id/ci/lint
    method: POST
    data_selector: merged_yaml
- name: project_dependencies
  endpoint:
    path: /projects/:id/dependencies
    method: GET
    data_selector: '[]'
    params:
      package_manager: bundler,yarn,maven
- name: get_deployment
  endpoint:
    path: /projects/:id/deployments/:deployment_id
    method: GET
    data_selector: id
    params: {}
- name: create_deployment
  endpoint:
    path: /projects/:id/deployments
    method: POST
    data_selector: id
    params: {}
- name: create_dependency_list_export
  endpoint:
    path: /projects/:id/dependency_list_exports
    method: POST
- name: get_single_dependency_list_export
  endpoint:
    path: /dependency_list_exports/:id
    method: GET
- name: download_dependency_list_export
  endpoint:
    path: /dependency_list_exports/:id/download
    method: GET
- name: purge_dependency_proxy_cache
  endpoint:
    path: /groups/:id/dependency_proxy/cache
    method: DELETE
    params:
      id: integer/string
- name: list_all_deploy_keys
  endpoint:
    path: /deploy_keys
    method: GET
    data_selector: '[]'
    params:
      public: 'false'
- name: add_deploy_key
  endpoint:
    path: /deploy_keys
    method: POST
    data_selector: '{}'
    params: {}
- name: project_deploy_keys
  endpoint:
    path: /projects/:id/deploy_keys
    method: GET
    data_selector: '[]'
    params:
      id: id
- name: user_project_deploy_keys
  endpoint:
    path: /users/:id_or_username/project_deploy_keys
    method: GET
    data_selector: '[]'
    params:
      id_or_username: id_or_username
- name: single_deploy_key
  endpoint:
    path: /projects/:id/deploy_keys/:key_id
    method: GET
    data_selector: '{}'
    params:
      id: id
      key_id: key_id
- name: add_deploy_key
  endpoint:
    path: /projects/:id/deploy_keys
    method: POST
    data_selector: key
    params: {}
- name: update_deploy_key
  endpoint:
    path: /projects/:id/deploy_keys/:key_id
    method: PUT
    data_selector: title
    params: {}
- name: delete_deploy_key
  endpoint:
    path: /projects/:id/deploy_keys/:key_id
    method: DELETE
    data_selector: ''
    params: {}
- name: enable_deploy_key
  endpoint:
    path: /projects/:id/deploy_keys/:key_id/enable
    method: POST
    data_selector: key
    params: {}
- name: add_deploy_keys_to_multiple_projects
  endpoint:
    path: /projects/:id/deploy_keys
    method: POST
    data_selector: ''
    params: {}
- name: deploy_tokens
  endpoint:
    path: /deploy_tokens
    method: GET
    data_selector: records
    params:
      active: false
- name: project_deploy_tokens
  endpoint:
    path: /projects/:id/deploy_tokens
    method: GET
    data_selector: records
    params:
      id: required
      active: false
- name: group_deploy_tokens
  endpoint:
    path: /groups/:id/deploy_tokens
    method: GET
    data_selector: records
    params:
      id: required
      active: false
- name: create_group_deploy_token
  endpoint:
    path: /groups/:id/deploy_tokens
    method: POST
    data_selector: response
    params:
      id: integer/string
      name: string
      scopes: array of strings
      expires_at: datetime
      username: string
- name: delete_group_deploy_token
  endpoint:
    path: /groups/:id/deploy_tokens/:token_id
    method: DELETE
    data_selector: response
    params:
      id: integer/string
      token_id: integer
- name: deployments
  endpoint:
    path: /projects/:id/deployments
    method: GET
    data_selector: deployments
    params: {}
- name: update_deployment
  endpoint:
    path: /projects/:id/deployments/:deployment_id
    method: PUT
    data_selector: ''
    params: {}
- name: delete_deployment
  endpoint:
    path: /projects/:id/deployments/:deployment_id
    method: DELETE
    data_selector: ''
    params: {}
- name: list_merge_requests
  endpoint:
    path: /projects/:id/deployments/:deployment_id/merge_requests
    method: GET
    data_selector: ''
    params: {}
- name: approve_reject_deployment
  endpoint:
    path: /projects/:id/deployments/:deployment_id/approval
    method: POST
    data_selector: ''
    params: {}
- name: issue_discussions
  endpoint:
    path: /projects/:id/issues/:issue_iid/discussions
    method: GET
    data_selector: discussions
- name: single_issue_discussion
  endpoint:
    path: /projects/:id/issues/:issue_iid/discussions/:discussion_id
    method: GET
    data_selector: discussion
- name: create_issue_thread
  endpoint:
    path: /projects/:id/issues/:issue_iid/discussions
    method: POST
    data_selector: thread
- name: add_note_to_thread
  endpoint:
    path: /projects/:id/issues/:issue_iid/discussions/:discussion_id/notes
    method: POST
    data_selector: note
- name: modify_thread_note
  endpoint:
    path: /projects/:id/issues/:issue_iid/discussions/:discussion_id/notes/:note_id
    method: PUT
    data_selector: note
- name: delete_issue_thread_note
  endpoint:
    path: /projects/:id/issues/:issue_iid/discussions/:discussion_id/notes/:note_id
    method: DELETE
    params: {}
- name: list_project_snippet_discussion_items
  endpoint:
    path: /projects/:id/snippets/:snippet_id/discussions
    method: GET
    params: {}
- name: get_single_snippet_discussion_item
  endpoint:
    path: /projects/:id/snippets/:snippet_id/discussions/:discussion_id
    method: GET
    params: {}
- name: create_new_snippet_thread
  endpoint:
    path: /projects/:id/snippets/:snippet_id/discussions
    method: POST
    params: {}
- name: add_note_to_existing_snippet_thread
  endpoint:
    path: /projects/:id/snippets/:snippet_id/discussions/:discussion_id/notes
    method: POST
    params: {}
- name: modify_existing_snippet_thread_note
  endpoint:
    path: /projects/:id/snippets/:snippet_id/discussions/:discussion_id/notes/:note_id
    method: PUT
    params: {}
- name: delete_snippet_thread_note
  endpoint:
    path: /projects/:id/snippets/:snippet_id/discussions/:discussion_id/notes/:note_id
    method: DELETE
    params: {}
- name: list_group_epic_discussions
  endpoint:
    path: /groups/:id/epics/:epic_id/discussions
    method: GET
- name: get_single_epic_discussion
  endpoint:
    path: /groups/:id/epics/:epic_id/discussions/:discussion_id
    method: GET
- name: create_new_epic_thread
  endpoint:
    path: /groups/:id/epics/:epic_id/discussions
    method: POST
- name: add_note_to_existing_epic_thread
  endpoint:
    path: /groups/:id/epics/:epic_id/discussions/:discussion_id/notes
    method: POST
- name: modify_existing_epic_thread_note
  endpoint:
    path: /groups/:id/epics/:epic_id/discussions/:discussion_id/notes/:note_id
    method: PUT
- name: delete_epic_thread_note
  endpoint:
    path: /groups/:id/epics/:epic_id/discussions/:discussion_id/notes/:note_id
    method: DELETE
- name: merge_request_discussions
  endpoint:
    path: /projects/:id/merge_requests/:merge_request_iid/discussions
    method: GET
    data_selector: discussions
- name: single_merge_request_discussion
  endpoint:
    path: /projects/:id/merge_requests/:merge_request_iid/discussions/:discussion_id
    method: GET
    data_selector: discussion
- name: merge_request_discussions
  endpoint:
    path: /projects/:id/merge_requests/:merge_request_iid/discussions
    method: POST
    data_selector: discussions
- name: resolve_merge_request_thread
  endpoint:
    path: /projects/:id/merge_requests/:merge_request_iid/discussions/:discussion_id
    method: PUT
    params:
      resolved: boolean
      id: integer/string
      discussion_id: string
      merge_request_iid: integer
- name: add_note_to_merge_request_thread
  endpoint:
    path: /projects/:id/merge_requests/:merge_request_iid/discussions/:discussion_id/notes
    method: POST
    params:
      body: string
      id: integer/string
      discussion_id: string
      merge_request_iid: integer
      note_id: integer
- name: modify_merge_request_thread_note
  endpoint:
    path: /projects/:id/merge_requests/:merge_request_iid/discussions/:discussion_id/notes/:note_id
    method: PUT
    params:
      discussion_id: string
      id: integer/string
      merge_request_iid: integer
      note_id: integer
      body: string
      resolved: boolean
- name: delete_merge_request_thread_note
  endpoint:
    path: /projects/:id/merge_requests/:merge_request_iid/discussions/:discussion_id/notes/:note_id
    method: DELETE
    params:
      discussion_id: string
      id: integer/string
      merge_request_iid: integer
      note_id: integer
- name: commit_discussion
  endpoint:
    path: /projects/:id/repository/commits/:commit_id/discussions
    method: GET
    data_selector: discussions
- name: single_commit_discussion
  endpoint:
    path: /projects/:id/repository/commits/:commit_id/discussions/:discussion_id
    method: GET
    data_selector: discussion
- name: create_commit_thread
  endpoint:
    path: /projects/:id/repository/commits/:commit_id/discussions
    method: POST
    data_selector: new_thread
- name: add_note
  endpoint:
    path: /projects/:id/repository/commits/:commit_id/discussions/:discussion_id/notes
    method: POST
    data_selector: body
    params:
      commit_id: string
      discussion_id: string
      id: integer or string
      note_id: integer
      body: string
- name: modify_note
  endpoint:
    path: /projects/:id/repository/commits/:commit_id/discussions/:discussion_id/notes/:note_id
    method: PUT
    data_selector: body
    params:
      commit_id: string
      discussion_id: string
      id: integer or string
      note_id: integer
      body: string
- name: delete_note
  endpoint:
    path: /projects/:id/repository/commits/:commit_id/discussions/:discussion_id/notes/:note_id
    method: DELETE
    data_selector: none
    params:
      id: integer or string
      commit_id: string
      discussion_id: string
      note_id: integer
- name: list_awardable_emoji_reactions
  endpoint:
    path: /projects/:id/issues/:issue_iid/award_emoji
    method: GET
- name: get_single_emoji_reaction
  endpoint:
    path: /projects/:id/issues/:issue_iid/award_emoji/:award_id
    method: GET
- name: add_new_emoji_reaction
  endpoint:
    path: /projects/:id/issues/:issue_iid/award_emoji
    method: POST
- name: delete_emoji_reaction
  endpoint:
    path: /projects/:id/issues/:issue_iid/award_emoji/:award_id
    method: DELETE
- name: list_emoji_reactions
  endpoint:
    path: /projects/:id/issues/:issue_iid/notes/:note_id/award_emoji
    method: GET
    data_selector: '[*]'
    params:
      id: integer/string
      issue_iid: integer
      note_id: integer
- name: get_single_emoji_reaction
  endpoint:
    path: /projects/:id/issues/:issue_iid/notes/:note_id/award_emoji/:award_id
    method: GET
    data_selector: '{}'
    params:
      id: integer/string
      issue_iid: integer
      note_id: integer
      award_id: integer
- name: add_emoji_reaction
  endpoint:
    path: /projects/:id/issues/:issue_iid/notes/:note_id/award_emoji
    method: POST
    data_selector: '{}'
    params:
      id: integer/string
      issue_iid: integer
      note_id: integer
      name: string
- name: delete_emoji_reaction
  endpoint:
    path: /projects/:id/issues/:issue_iid/notes/:note_id/award_emoji/:award_id
    method: DELETE
    data_selector: '{}'
    params:
      id: integer/string
      issue_iid: integer
      note_id: integer
      award_id: integer
- name: list_environments
  endpoint:
    path: /projects/:id/environments
    method: GET
    data_selector: environments
    params: {}
- name: get_specific_environment
  endpoint:
    path: /projects/:id/environments/:environment_id
    method: GET
    data_selector: environment
    params: {}
- name: create_environment
  endpoint:
    path: /projects/:id/environments
    method: POST
- name: update_environment
  endpoint:
    path: /projects/:id/environments/:environment_id
    method: PUT
- name: delete_environment
  endpoint:
    path: /projects/:id/environments/:environment_id
    method: DELETE
- name: delete_multiple_review_apps
  endpoint:
    path: /projects/:id/environments/review_apps
    method: DELETE
- name: stop_environment
  endpoint:
    path: /projects/:id/environments/:environment_id/stop
    method: POST
- name: stop_stale_environments
  endpoint:
    path: /projects/:id/environments/stop_stale
    method: POST
    data_selector: message
    params:
      id: integer/string
      before: date
- name: epics
  endpoint:
    path: /groups/:id/epics
    method: GET
    data_selector: ''
- name: single_epic
  endpoint:
    path: /groups/:id/epics/:epic_iid
    method: GET
    data_selector: records
- name: new_epic
  endpoint:
    path: /groups/:id/epics
    method: POST
    data_selector: records
- name: update_epic
  endpoint:
    path: /groups/:id/epics/:epic_iid
    method: PUT
    data_selector: id
    params: {}
- name: delete_epic
  endpoint:
    path: /groups/:id/epics/:epic_iid
    method: DELETE
    data_selector: id
    params: {}
- name: create_todo_item
  endpoint:
    path: /groups/:id/epics/:epic_iid/todo
    method: POST
    data_selector: id
    params: {}
- name: error_tracking_settings
  endpoint:
    path: /projects/:id/error_tracking/settings
    method: GET
    data_selector: settings
    params:
      id: integer
- name: create_error_tracking_settings
  endpoint:
    path: /projects/:id/error_tracking/settings
    method: PUT
    data_selector: settings
    params:
      id: integer
      active: boolean
      integrated: boolean
- name: activate_error_tracking_settings
  endpoint:
    path: /projects/:id/error_tracking/settings
    method: PATCH
    data_selector: settings
    params:
      id: integer
      active: boolean
      integrated: boolean
- name: list_client_keys
  endpoint:
    path: /projects/:id/error_tracking/client_keys
    method: GET
    data_selector: client_keys
    params:
      id: integer/string
- name: create_client_key
  endpoint:
    path: /projects/:id/error_tracking/client_keys
    method: POST
    data_selector: client_key
    params:
      id: integer/string
- name: delete_client_key
  endpoint:
    path: /projects/:id/error_tracking/client_keys/:key_id
    method: DELETE
    data_selector: client_key
    params:
      id: integer/string
      key_id: integer
- name: events
  endpoint:
    path: /events
    method: GET
    data_selector: records
    params: {}
- name: user_contribution_events
  endpoint:
    path: /users/:id/events
    method: GET
    data_selector: records
    params:
      id: required
- name: events
  endpoint:
    path: /projects/:project_id/events
    method: GET
    data_selector: records
    params:
      project_id: required
      action: optional
      target_type: optional
      before: optional
      after: optional
      sort: optional
- name: markdown
  endpoint:
    path: /markdown
    method: POST
    data_selector: html
    params: {}
- name: experiments
  endpoint:
    path: /experiments
    method: GET
    data_selector: '[*]'
- name: get_project_external_status_checks
  endpoint:
    path: /projects/:id/external_status_checks
    method: GET
    data_selector: '[]'
    params:
      id: integer
- name: create_external_status_check_service
  endpoint:
    path: /projects/:id/external_status_checks
    method: POST
    data_selector: '[]'
    params:
      id: integer
      name: string
      external_url: string
- name: update_external_status_check_service
  endpoint:
    path: /projects/:id/external_status_checks/:check_id
    method: PUT
    data_selector: '[]'
    params:
      id: integer
      check_id: integer
- name: delete_external_status_check_service
  endpoint:
    path: /projects/:id/external_status_checks/:check_id
    method: DELETE
    data_selector: '[]'
    params:
      check_id: integer
      id: integer
- name: list_status_checks_for_merge_request
  endpoint:
    path: /projects/:id/merge_requests/:merge_request_iid/status_checks
    method: GET
    data_selector: '[]'
    params:
      id: integer
      merge_request_iid: integer
- name: set_status_of_external_status_check
  endpoint:
    path: /projects/:id/merge_requests/:merge_request_iid/status_check_responses
    method: POST
    data_selector: '[]'
    params:
      id: integer
      merge_request_iid: integer
      sha: string
      external_status_check_id: integer
- name: retry_failed_status_check
  endpoint:
    path: /projects/:id/merge_requests/:merge_request_iid/status_checks/:external_status_check_id/retry
    method: POST
    data_selector: '[]'
    params:
      id: integer
      merge_request_iid: integer
      external_status_check_id: integer
- name: merge_request
  endpoint:
    path: /merge_requests
    method: POST
    data_selector: object_attributes
    params: {}
- name: feature_flags
  endpoint:
    path: /projects/:id/feature_flags
    method: GET
    data_selector: '[]'
- name: single_feature_flag
  endpoint:
    path: /projects/:id/feature_flags/:feature_flag_name
    method: GET
    data_selector: '{}'
- name: create_feature_flag
  endpoint:
    path: /projects/:id/feature_flags
    method: POST
    data_selector: '{}'
- name: update_feature_flag
  endpoint:
    path: /projects/:id/feature_flags/:feature_flag_name
    method: PUT
    data_selector: null
    params: {}
- name: delete_feature_flag
  endpoint:
    path: /projects/:id/feature_flags/:feature_flag_name
    method: DELETE
    data_selector: null
    params: {}
- name: feature_flag_user_lists
  endpoint:
    path: /projects/:id/feature_flags_user_lists
    method: GET
    data_selector: '[]'
    params: {}
- name: create_feature_flag_user_list
  endpoint:
    path: /projects/:id/feature_flags_user_lists
    method: POST
    data_selector: '{}'
    params: {}
- name: get_feature_flag_user_list
  endpoint:
    path: /projects/:id/feature_flags_user_lists/:iid
    method: GET
    data_selector: '{}'
    params: {}
- name: update_feature_flag_user_list
  endpoint:
    path: /projects/:id/feature_flags_user_lists/:iid
    method: PUT
    data_selector: '{}'
    params: {}
- name: delete_feature_flag_user_list
  endpoint:
    path: /projects/:id/feature_flags_user_lists/:iid
    method: DELETE
    data_selector: '{}'
    params: {}
- name: list_freeze_periods
  endpoint:
    path: /projects/:id/freeze_periods
    method: GET
    data_selector: records
- name: get_freeze_period
  endpoint:
    path: /projects/:id/freeze_periods/:freeze_period_id
    method: GET
    data_selector: records
- name: create_freeze_period
  endpoint:
    path: /projects/:id/freeze_periods
    method: POST
    data_selector: records
- name: update_freeze_period
  endpoint:
    path: /projects/:id/freeze_periods/:freeze_period_id
    method: PUT
    data_selector: records
- name: delete_freeze_period
  endpoint:
    path: /projects/:id/freeze_periods/:freeze_period_id
    method: DELETE
    data_selector: records
- name: geo_nodes
  endpoint:
    path: /geo_nodes
    method: GET
    data_selector: records
- name: create_geo_node
  endpoint:
    path: /geo_nodes
    method: POST
    data_selector: records
- name: geo_node
  endpoint:
    path: /geo_nodes/:id
    method: PUT
    data_selector: id
    params: {}
- name: delete_geo_node
  endpoint:
    path: /geo_nodes/:id
    method: DELETE
    data_selector: id
    params: {}
- name: repair_geo_node
  endpoint:
    path: /geo_nodes/:id/repair
    method: POST
    data_selector: id
    params: {}
- name: geo_node_status
  endpoint:
    path: /geo_nodes/status
    method: GET
    data_selector: '[]'
    params: {}
- name: geo_node_status
  endpoint:
    path: /geo_nodes/:id/status
    method: GET
    data_selector: geo_node_id
- name: geo_sites
  endpoint:
    path: /geo_sites
    method: GET
    data_selector: records
- name: geo_site
  endpoint:
    path: /geo_sites/:id
    method: PUT
    data_selector: ''
    params: {}
- name: delete_geo_site
  endpoint:
    path: /geo_sites/:id
    method: DELETE
    data_selector: ''
    params: {}
- name: repair_geo_site
  endpoint:
    path: /geo_sites/:id/repair
    method: POST
    data_selector: ''
    params: {}
- name: geo_site_status
  endpoint:
    path: /geo_sites/status
    method: GET
    data_selector: '[].geo_node_id'
- name: geo_site_status
  endpoint:
    path: /geo_sites/:id/status
    method: GET
    data_selector: geo_node_id
- name: chat_completions
  endpoint:
    path: /chat/completions
    method: POST
    data_selector: response
    params: {}
- name: list_virtual_registries
  endpoint:
    path: /groups/:id/-/virtual_registries/packages/maven/registries
    method: GET
    data_selector: ''
- name: create_virtual_registry
  endpoint:
    path: /groups/:id/-/virtual_registries/packages/maven/registries
    method: POST
    data_selector: ''
- name: get_virtual_registry
  endpoint:
    path: /virtual_registries/packages/maven/registries/:id
    method: GET
    data_selector: ''
- name: update_virtual_registry
  endpoint:
    path: /virtual_registries/packages/maven/registries/:id
    method: PATCH
    data_selector: ''
- name: delete_virtual_registry
  endpoint:
    path: /virtual_registries/packages/maven/registries/:id
    method: DELETE
    data_selector: ''
- name: delete_cache_entries
  endpoint:
    path: /virtual_registries/packages/maven/registries/:id/cache
    method: DELETE
    data_selector: ''
- name: list_upstream_registries
  endpoint:
    path: /virtual_registries/packages/maven/registries/:id/upstreams
    method: GET
    data_selector: ''
- name: create_upstream_registry
  endpoint:
    path: /virtual_registries/packages/maven/registries/:id/upstreams
    method: POST
    data_selector: id
- name: get_upstream_registry
  endpoint:
    path: /virtual_registries/packages/maven/upstreams/:id
    method: GET
    data_selector: id
- name: update_upstream_registry
  endpoint:
    path: /virtual_registries/packages/maven/upstreams/:id
    method: PATCH
    data_selector: id
- name: update_upstream_registry_position
  endpoint:
    path: /virtual_registries/packages/maven/registry_upstreams/:id
    method: PATCH
    data_selector: id
- name: delete_upstream_registry
  endpoint:
    path: /virtual_registries/packages/maven/upstreams/:id
    method: DELETE
    data_selector: id
- name: associate_upstream_with_registry
  endpoint:
    path: /virtual_registries/packages/maven/registry_upstreams
    method: POST
    data_selector: id
- name: disassociate_upstream_from_registry
  endpoint:
    path: /virtual_registries/packages/maven/registry_upstreams/:id
    method: DELETE
    data_selector: id
- name: delete_cache_entries_for_upstream_registry
  endpoint:
    path: /virtual_registries/packages/maven/upstreams/:id/cache
    method: DELETE
    data_selector: id
- name: upstream_registry_cache_entries
  endpoint:
    path: /virtual_registries/packages/maven/upstreams/:id/cache_entries
    method: GET
    data_selector: records
    params:
      id: integer
      search: string
      page: integer
      per_page: integer
- name: delete_cache_entry
  endpoint:
    path: /virtual_registries/packages/maven/cache_entries/*id
    method: DELETE
    data_selector: null
    params:
      id: string
- name: download_package
  endpoint:
    path: /virtual_registries/packages/maven/:id/*path
    method: GET
    data_selector: null
    params:
      id: integer
      path: string
- name: upload_package
  endpoint:
    path: /virtual_registries/packages/maven/:id/*path/upload
    method: POST
    data_selector: null
    params:
      id: integer
      path: string
      file: file
- name: instance_member_roles
  endpoint:
    path: /member_roles
    method: GET
    data_selector: records
- name: group_member_roles
  endpoint:
    path: /groups/:id/member_roles
    method: GET
    data_selector: records
- name: add_member_role
  endpoint:
    path: /groups/:id/member_roles
    method: POST
    data_selector: id
    params: {}
- name: remove_member_role
  endpoint:
    path: /groups/:id/member_roles/:member_role_id
    method: DELETE
    data_selector: '204'
    params: {}
- name: group_members
  endpoint:
    path: /groups/:id/members
    method: GET
    data_selector: '[]'
- name: project_members
  endpoint:
    path: /projects/:id/members
    method: GET
    data_selector: '[]'
- name: clone_issue
  endpoint:
    path: /projects/:id/issues/:issue_iid/clone
    method: POST
- name: group_members
  endpoint:
    path: /groups/:id/members/all
    method: GET
    data_selector: records
- name: project_members
  endpoint:
    path: /projects/:id/members/all
    method: GET
    data_selector: records
- name: group_member
  endpoint:
    path: /groups/:id/members/:user_id
    method: GET
    data_selector: record
- name: project_member
  endpoint:
    path: /projects/:id/members/:user_id
    method: GET
    data_selector: record
- name: group_members
  endpoint:
    path: /groups/:id/members/all/:user_id
    method: GET
- name: billable_members
  endpoint:
    path: /groups/:id/billable_members
    method: GET
- name: billable_member_memberships
  endpoint:
    path: /groups/:id/billable_members/:user_id/memberships
    method: GET
- name: indirect_memberships
  endpoint:
    path: /api/v4/groups/:id/billable_members/:user_id/indirect
    method: GET
    data_selector: records
- name: remove_member
  endpoint:
    path: /api/v4/groups/:id/billable_members/:user_id
    method: DELETE
    data_selector: success
- name: change_membership_state
  endpoint:
    path: /api/v4/groups/:id/members/:user_id/state
    method: PUT
    data_selector: success
- name: add_member
  endpoint:
    path: /api/v4/groups/:id/members
    method: POST
    data_selector: id
- name: add_member_to_project
  endpoint:
    path: /api/v4/projects/:id/members
    method: POST
    data_selector: id
- name: update_group_member
  endpoint:
    path: /groups/:id/members/:user_id
    method: PUT
    data_selector: member
    params:
      access_level: '40'
- name: update_project_member
  endpoint:
    path: /projects/:id/members/:user_id
    method: PUT
    data_selector: member
    params:
      access_level: '40'
- name: set_override_flag_group_member
  endpoint:
    path: /groups/:id/members/:user_id/override
    method: POST
    data_selector: override
    params: {}
- name: remove_override_group_member
  endpoint:
    path: /groups/:id/members/:user_id/override
    method: DELETE
    data_selector: override
    params: {}
- name: remove_group_member
  endpoint:
    path: /groups/:id/members/:user_id
    method: DELETE
    data_selector: member
    params:
      skip_subresources: 'false'
      unassign_issuables: 'false'
- name: approve_group_member
  endpoint:
    path: /groups/:id/members/:member_id/approve
    method: PUT
    data_selector: member
    params: {}
- name: approve_all_group_members
  endpoint:
    path: /groups/:id/members/approve_all
    method: POST
    data_selector: members
    params: {}
- name: pending_members
  endpoint:
    path: /groups/:id/pending_members
    method: GET
    data_selector: records
    params:
      id: required
- name: approve_merge_request
  endpoint:
    path: /projects/:id/merge_requests/:merge_request_iid/approve
    method: POST
    data_selector: none
    params:
      id: required
      merge_request_iid: required
      sha: optional
- name: unapprove_merge_request
  endpoint:
    path: /projects/:id/merge_requests/:merge_request_iid/unapprove
    method: POST
    data_selector: none
    params:
      id: required
      merge_request_iid: required
- name: reset_approvals_merge_request
  endpoint:
    path: /projects/:id/merge_requests/:merge_request_iid/reset_approvals
    method: PUT
    data_selector: none
    params:
      id: required
      merge_request_iid: required
- name: retrieve_approval_configuration
  endpoint:
    path: /projects/:id/approvals
    method: GET
    data_selector: none
    params:
      id: required
- name: update_approval_configuration
  endpoint:
    path: /projects/:id/approvals
    method: POST
    data_selector: none
    params:
      id: required
      reset_approvals_on_push: optional
      selective_code_owner_removals: optional
      disable_overriding_approvers_per_merge_request: optional
      merge_requests_author_approval: optional
      merge_requests_disable_committers_approval: optional
      require_reauthentication_to_approve: optional
- name: approval_rules
  endpoint:
    path: /projects/:id/approval_rules
    method: GET
    data_selector: approval_rules
    params: {}
- name: approval_rule
  endpoint:
    path: /projects/:id/approval_rules/:approval_rule_id
    method: GET
    data_selector: approval_rule
    params: {}
- name: approval_rule
  endpoint:
    path: /projects/:id/approval_rules
    method: POST
    data_selector: approvals
    params: {}
- name: update_approval_rule
  endpoint:
    path: /projects/:id/approval_rules/:approval_rule_id
    method: PUT
    data_selector: approvals
    params: {}
- name: delete_approval_rule
  endpoint:
    path: /projects/:id/approval_rules/:approval_rule_id
    method: DELETE
    data_selector: ''
- name: retrieve_approval_state
  endpoint:
    path: /projects/:id/merge_requests/:merge_request_iid/approvals
    method: GET
    data_selector: ''
- name: retrieve_approval_details
  endpoint:
    path: /projects/:id/merge_requests/:merge_request_iid/approval_state
    method: GET
    data_selector: ''
- name: list_approval_rules
  endpoint:
    path: /projects/:id/merge_requests/:merge_request_iid/approval_rules
    method: GET
    data_selector: ''
- name: retrieve_approval_rule
  endpoint:
    path: /projects/:id/merge_requests/:merge_request_iid/approval_rules/:approval_rule_id
    method: GET
    data_selector: approval_rule
    params: {}
- name: create_approval_rule
  endpoint:
    path: /projects/:id/merge_requests/:merge_request_iid/approval_rules
    method: POST
    data_selector: approval_rule
    params: {}
- name: update_approval_rule
  endpoint:
    path: /projects/:id/merge_requests/:merge_request_iid/approval_rules/:approval_rule_id
    method: PUT
    data_selector: approval_rule
    params: {}
- name: delete_approval_rule
  endpoint:
    path: /projects/:id/merge_requests/:merge_request_iid/approval_rules/:approval_rule_id
    method: DELETE
    data_selector: approval_rule
    params: {}
- name: approval_rules
  endpoint:
    path: /groups/:id/approval_rules
    method: GET
    data_selector: '[]'
    params: {}
- name: create_approval_rule
  endpoint:
    path: /groups/:id/approval_rules
    method: POST
    data_selector: '{}'
    params: {}
- name: update_approval_rule
  endpoint:
    path: /groups/:id/approval_rules/:approval_rule_id
    method: PUT
    data_selector: '{}'
    params: {}
- name: unpublish_pages
  endpoint:
    path: /projects/:id/pages
    method: DELETE
    data_selector: null
    params:
      id: integer/string
- name: get_pages_settings
  endpoint:
    path: /projects/:id/pages
    method: GET
    data_selector: null
    params:
      id: integer/string
- name: update_pages_settings
  endpoint:
    path: /projects/:id/pages
    method: PATCH
    data_selector: null
    params:
      id: integer/string
      pages_unique_domain_enabled: boolean
      pages_https_only: boolean
      pages_primary_domain: string
- name: workload_identity_federation_creation_script
  endpoint:
    path: /projects/:id/google_cloud/setup/wlif.sh
    method: GET
- name: google_cloud_integration_setup_script
  endpoint:
    path: /projects/:id/google_cloud/setup/integrations.sh
    method: GET
- name: runner_provisioning_configuration_script
  endpoint:
    path: /projects/:id/google_cloud/setup/runner_deployment_project.sh
    method: GET
- name: group
  endpoint:
    path: /groups/:id
    method: GET
    data_selector: response
    params:
      with_projects: 'false'
- name: list_groups
  endpoint:
    path: /groups
    method: GET
    data_selector: '[]'
- name: projects
  endpoint:
    path: /groups/:id/projects
    method: GET
    data_selector: projects
    params:
      id: required
- name: shared_projects
  endpoint:
    path: /groups/:id/projects/shared
    method: GET
    data_selector: projects
    params:
      id: required
- name: saml_users
  endpoint:
    path: /groups/:id/saml_users
    method: GET
    data_selector: users
    params:
      id: required
- name: move_issue
  endpoint:
    path: /projects/:id/issues/:issue_iid/move
    method: POST
    data_selector: id
    params: {}
- name: project
  endpoint:
    path: /projects/:id
    method: GET
    data_selector: id
- name: provisioned_users
  endpoint:
    path: /groups/:id/provisioned_users
    method: GET
    data_selector: records
    params:
      id: required
- name: users
  endpoint:
    path: /groups/:id/users
    method: GET
    data_selector: records
    params:
      id: required
      include_saml_users: 'true'
      include_service_accounts: 'true'
- name: subgroups
  endpoint:
    path: /groups/:id/subgroups
    method: GET
    data_selector: records
    params:
      id: required
- name: descendant_groups
  endpoint:
    path: /groups/:id/descendant_groups
    method: GET
- name: shared_groups
  endpoint:
    path: /groups/:id/groups/shared
    method: GET
- name: invited_groups
  endpoint:
    path: /groups/:id/invited_groups
    method: GET
    data_selector: records
    params:
      id: required
- name: create_group
  endpoint:
    path: /groups
    method: POST
    data_selector: records
    params:
      name: required
      path: required
- name: create_subgroup
  endpoint:
    path: /groups
    method: POST
    data_selector: records
    params:
      subgroup_path: required
      subgroup_name: required
      parent_id: required
- name: archive_group
  endpoint:
    path: /groups/:id/archive
    method: POST
    params:
      id: integer or string
- name: unarchive_group
  endpoint:
    path: /groups/:id/unarchive
    method: POST
    params:
      id: integer or string
- name: sync_group_ldap
  endpoint:
    path: /groups/:id/ldap_sync
    method: POST
    params:
      id: string
- name: update_group_attributes
  endpoint:
    path: /api/v4/groups/:id
    method: PUT
    data_selector: null
    params: {}
- name: group_avatar
  endpoint:
    path: /groups/:id/avatar
    method: GET
    data_selector: avatar
- name: delete_group
  endpoint:
    path: /groups/:id
    method: DELETE
    data_selector: deleted
- name: restore_group
  endpoint:
    path: /groups/:id/restore
    method: POST
    data_selector: restored
- name: revoke_token
  endpoint:
    path: /groups/:id/tokens/revoke
    method: POST
    data_selector: token_revoked
- name: share_group
  endpoint:
    path: /groups/:id/share
    method: POST
    data_selector: shared
- name: unshare_group
  endpoint:
    path: /groups/:id/share/:group_id
    method: DELETE
    data_selector: unshared
- name: transfer_project
  endpoint:
    path: /groups/:id/projects/:project_id
    method: POST
    data_selector: project_transferred
- name: transfer_group
  endpoint:
    path: /groups/:id/transfer
    method: POST
    data_selector: group_transferred
- name: list_transfer_locations
  endpoint:
    path: /groups/:id/transfer_locations
    method: GET
    data_selector: transfer_locations
- name: import_github
  endpoint:
    path: /import/github
    method: POST
    data_selector: null
    params:
      personal_access_token: string
      repo_id: integer
      target_namespace: string
      new_name: string
      github_hostname: string
- name: cancel_import_github
  endpoint:
    path: /import/github/cancel
    method: POST
    data_selector: null
    params:
      project_id: integer
- name: import_github_gists
  endpoint:
    path: /import/github/gists
    method: POST
    data_selector: null
    params:
      personal_access_token: string
- name: import_bitbucket_server
  endpoint:
    path: /import/bitbucket_server
    method: POST
    data_selector: null
    params:
      bitbucket_server_url: string
      bitbucket_server_username: string
      personal_access_token: string
      bitbucket_server_project: string
      bitbucket_server_repo: string
      target_namespace: string
- name: import_bitbucket
  endpoint:
    path: /import/bitbucket
    method: POST
    data_selector: ''
    params: {}
- name: single_merge_request
  endpoint:
    path: /projects/:id/merge_requests/:merge_request_iid
    method: GET
    data_selector: merge_request
    params: {}
- name: list_instance_variables
  endpoint:
    path: /admin/ci/variables
    method: GET
    data_selector: records
- name: show_instance_variable_details
  endpoint:
    path: /admin/ci/variables/:key
    method: GET
    data_selector: records
- name: create_instance_variable
  endpoint:
    path: /admin/ci/variables
    method: POST
    data_selector: records
- name: update_instance_variable
  endpoint:
    path: /admin/ci/variables/:key
    method: PUT
    data_selector: records
- name: remove_instance_variable
  endpoint:
    path: /admin/ci/variables/:key
    method: DELETE
    data_selector: records
- name: add_member
  endpoint:
    path: /groups/:id/invitations
    method: POST
- name: list_invitations
  endpoint:
    path: /groups/:id/invitations
    method: GET
- name: update_invitation
  endpoint:
    path: /groups/:id/invitations/:email
    method: PUT
- name: delete_invitation
  endpoint:
    path: /groups/:id/invitations/:email
    method: DELETE
- name: issues
  endpoint:
    path: /issues
    method: GET
    data_selector: issues
    params: {}
- name: issues
  endpoint:
    path: /groups/:id/issues
    method: GET
    data_selector: issues
- name: project_issues
  endpoint:
    path: /projects/:id/issues
    method: GET
    data_selector: issues
- name: issue
  endpoint:
    path: /issues/:id
    method: GET
    data_selector: id
    params: {}
- name: project_issue
  endpoint:
    path: /projects/:id/issues/:issue_iid
    method: GET
    data_selector: project_id
    params: {}
- name: issues
  endpoint:
    path: /projects/:id/issues
    method: POST
    data_selector: project_id
    params: {}
- name: edit_issue
  endpoint:
    path: /projects/:id/issues/:issue_iid
    method: PUT
    data_selector: issue
    params: {}
- name: delete_issue
  endpoint:
    path: /projects/:id/issues/:issue_iid
    method: DELETE
    data_selector: issue
    params: {}
- name: reorder_issue
  endpoint:
    path: /projects/:id/issues/:issue_iid/reorder
    method: PUT
    data_selector: issue
    params: {}
- name: merge_request
  endpoint:
    path: /merge_requests
    method: GET
    data_selector: merge_requests
- name: subscribe_to_issue
  endpoint:
    path: /projects/:id/issues/:issue_iid/subscribe
    method: POST
    data_selector: id
    params: {}
- name: unsubscribe_from_issue
  endpoint:
    path: /projects/:id/issues/:issue_iid/unsubscribe
    method: POST
    data_selector: id
    params: {}
- name: create_todo
  endpoint:
    path: /projects/:id/issues/:issue_iid/todo
    method: POST
    data_selector: id
    params: {}
- name: promote_issue
  endpoint:
    path: /projects/:id/issues/:issue_iid/notes
    method: POST
    data_selector: id
    params: {}
- name: set_time_estimate
  endpoint:
    path: /projects/:id/issues/:issue_iid/time_estimate
    method: POST
    data_selector: human_time_estimate
    params: {}
- name: reset_time_estimate
  endpoint:
    path: /projects/:id/issues/:issue_iid/reset_time_estimate
    method: POST
    data_selector: human_time_estimate
    params: {}
- name: add_spent_time
  endpoint:
    path: /projects/:id/issues/:issue_iid/add_spent_time
    method: POST
    data_selector: null
    params:
      duration: required
      id: required
      issue_iid: required
      summary: optional
- name: reset_spent_time
  endpoint:
    path: /projects/:id/issues/:issue_iid/reset_spent_time
    method: POST
    data_selector: null
    params:
      id: required
      issue_iid: required
- name: time_tracking_stats
  endpoint:
    path: /projects/:id/issues/:issue_iid/time_stats
    method: GET
    data_selector: null
    params:
      id: required
      issue_iid: required
- name: related_merge_requests
  endpoint:
    path: /projects/:id/issues/:issue_iid/related_merge_requests
    method: GET
    data_selector: records
    params: {}
- name: merge_requests_closed_by_issue
  endpoint:
    path: /projects/:id/issues/:issue_iid/closed_by
    method: GET
- name: issue_participants
  endpoint:
    path: /projects/:id/issues/:issue_iid/participants
    method: GET
- name: user_agent_detail
  endpoint:
    path: /projects/:id/issues/:issue_iid/user_agent_detail
    method: GET
- name: metric_images_upload
  endpoint:
    path: /projects/:id/issues/:issue_iid/metric_images
    method: POST
- name: metric_images_list
  endpoint:
    path: /projects/:id/issues/:issue_iid/metric_images
    method: GET
- name: update_metric_image
  endpoint:
    path: /projects/:id/issues/:issue_iid/metric_images/:image_id
    method: PUT
- name: delete_metric_image
  endpoint:
    path: /projects/:id/issues/:issue_iid/metric_images/:image_id
    method: DELETE
- name: epic_issues
  endpoint:
    path: /groups/:id/epics/:epic_iid/issues
    method: GET
    data_selector: records
- name: assign_issue_to_epic
  endpoint:
    path: /groups/:id/epics/:epic_iid/issues/:issue_id
    method: POST
- name: remove_issue_from_epic
  endpoint:
    path: /groups/:id/epics/:epic_iid/issues/:epic_issue_id
    method: DELETE
- name: epic_issue_association
  endpoint:
    path: /groups/:id/epics/:epic_iid/issues/:epic_issue_id
    method: PUT
    data_selector: id
    params: {}
- name: issues_statistics
  endpoint:
    path: /issues_statistics
    method: GET
    data_selector: statistics.counts
    params: {}
- name: group_issues_statistics
  endpoint:
    path: /groups/:id/issues_statistics
    method: GET
    data_selector: statistics.counts
    params: {}
- name: issues_statistics
  endpoint:
    path: /projects/:id/issues_statistics
    method: GET
    data_selector: statistics
    params:
      id: integer/string
- name: project_jobs
  endpoint:
    path: /projects/:id/jobs
    method: GET
    data_selector: jobs
- name: jobs
  endpoint:
    path: /projects/:id/pipelines/:pipeline_id/jobs
    method: GET
    data_selector: records
    params: {}
- name: pipeline_trigger_jobs
  endpoint:
    path: /projects/:id/pipelines/:pipeline_id/bridges
    method: GET
    data_selector: jobs
- name: job_token_job
  endpoint:
    path: /job
    method: GET
    data_selector: job
- name: single_job
  endpoint:
    path: /projects/:id/jobs/:job_id
    method: GET
    data_selector: job
- name: gitlab_agent
  endpoint:
    path: /job/allowed_agents
    method: GET
    data_selector: allowed_agents
- name: jobs
  endpoint:
    path: /projects/:id/jobs/:job_id
    method: GET
    data_selector: job
    params: {}
- name: job_trace
  endpoint:
    path: /projects/:id/jobs/:job_id/trace
    method: GET
    data_selector: trace
    params: {}
- name: cancel_job
  endpoint:
    path: /projects/:id/jobs/:job_id/cancel
    method: POST
    data_selector: job
    params: {}
- name: retry_job
  endpoint:
    path: /projects/:id/jobs/:job_id/retry
    method: POST
    data_selector: job
    params: {}
- name: erase_job
  endpoint:
    path: /projects/:id/jobs/:job_id/erase
    method: POST
    params: {}
- name: run_job
  endpoint:
    path: /projects/:id/jobs/:job_id/play
    method: POST
    params: {}
- name: download_job_artifacts
  endpoint:
    path: /projects/:id/jobs/:job_id/artifacts
    method: GET
    data_selector: artifacts
    params:
      job_token: CI_JOB_TOKEN
- name: download_single_artifact
  endpoint:
    path: /projects/:id/jobs/:job_id/artifacts/*artifact_path
    method: GET
    data_selector: single_artifact
    params:
      job_token: CI_JOB_TOKEN
- name: keep_job_artifacts
  endpoint:
    path: /projects/:id/jobs/:job_id/artifacts/keep
    method: POST
    data_selector: keep_artifacts
- name: delete_job_artifacts
  endpoint:
    path: /projects/:id/jobs/:job_id/artifacts
    method: DELETE
- name: delete_all_job_artifacts
  endpoint:
    path: /projects/:id/artifacts
    method: DELETE
- name: projects
  endpoint:
    path: /projects
    method: GET
    data_selector: projects
    params: {}
- name: job_token_scope
  endpoint:
    path: /projects/:id/job_token_scope
    method: GET
    data_selector: null
    params:
      id: integer/string
- name: job_token_scope_patch
  endpoint:
    path: /projects/:id/job_token_scope
    method: PATCH
    data_selector: null
    params:
      id: integer/string
      enabled: boolean
- name: job_token_scope_allowlist
  endpoint:
    path: /projects/:id/job_token_scope/allowlist
    method: GET
    data_selector: null
    params:
      id: integer/string
- name: job_token_scope_allowlist_add
  endpoint:
    path: /projects/:id/job_token_scope/allowlist
    method: POST
    data_selector: null
    params:
      id: integer/string
      target_project_id: integer
- name: job_token_scope_allowlist_remove
  endpoint:
    path: /projects/:id/job_token_scope/allowlist/:target_project_id
    method: DELETE
    data_selector: null
    params:
      id: integer/string
      target_project_id: integer
- name: job_token_scope_groups_allowlist
  endpoint:
    path: /projects/:id/job_token_scope/groups_allowlist
    method: GET
    data_selector: null
    params:
      id: integer/string
- name: job_token_scope_groups_allowlist_add
  endpoint:
    path: /projects/:id/job_token_scope/groups_allowlist
    method: POST
    data_selector: null
    params:
      id: integer/string
      target_group_id: integer
- name: remove_group
  endpoint:
    path: /projects/:id/job_token_scope/groups_allowlist/:target_group_id
    method: DELETE
    data_selector: null
    params: {}
- name: get_ssh_key_by_id
  endpoint:
    path: /keys/:id
    method: GET
    data_selector: id
    params: {}
- name: get_user_by_fingerprint
  endpoint:
    path: /keys
    method: GET
    data_selector: id
    params:
      fingerprint: string
- name: deploy_key
  endpoint:
    path: /keys
    method: GET
    data_selector: deploy_keys_projects
    params:
      fingerprint: ''
- name: current_license
  endpoint:
    path: /license
    method: GET
    data_selector: ''
    params: {}
- name: all_licenses
  endpoint:
    path: /licenses
    method: GET
    data_selector: ''
    params: {}
- name: single_license
  endpoint:
    path: /license/:id
    method: GET
    data_selector: ''
    params: {}
- name: add_license
  endpoint:
    path: /license
    method: POST
    data_selector: ''
    params: {}
- name: delete_license
  endpoint:
    path: /license/:id
    method: DELETE
    data_selector: ''
    params: {}
- name: refresh_billable_users
  endpoint:
    path: /license/:id/refresh_billable_users
    method: PUT
    data_selector: ''
    params: {}
- name: usage_export
  endpoint:
    path: /license/usage_export.csv
    method: GET
    data_selector: ''
    params: {}
- name: related_epic_links
  endpoint:
    path: /groups/:id/related_epic_links
    method: GET
    data_selector: records
- name: linked_epics
  endpoint:
    path: /groups/:id/epics/:epic_iid/related_epics
    method: GET
    data_selector: records
- name: related_epics
  endpoint:
    path: /groups/:id/epics/:epic_iid/related_epics
    method: POST
    data_selector: id
- name: related_epics
  endpoint:
    path: /groups/:id/epics/:epic_iid/related_epics/:related_epic_link_id
    method: DELETE
    data_selector: id
    params: {}
- name: list_issue_relations
  endpoint:
    path: /projects/:id/issues/:issue_iid/links
    method: GET
    data_selector: '[]'
    params:
      id: integer/string
      issue_iid: integer
- name: get_issue_link
  endpoint:
    path: /projects/:id/issues/:issue_iid/links/:issue_link_id
    method: GET
    data_selector: source_issue
    params:
      id: integer/string
      issue_iid: integer
      issue_link_id: integer/string
- name: create_issue_link
  endpoint:
    path: /projects/:id/issues/:issue_iid/links
    method: POST
    data_selector: source_issue
    params:
      id: integer/string
      issue_iid: integer
      target_project_id: integer/string
      target_issue_iid: integer/string
      link_type: string
- name: delete_issue_link
  endpoint:
    path: /projects/:id/issues/:issue_iid/links/:issue_link_id
    method: DELETE
- name: merge_request_participants
  endpoint:
    path: /projects/:id/merge_requests/:merge_request_iid/participants
    method: GET
    data_selector: '[]'
- name: merge_request_reviewers
  endpoint:
    path: /projects/:id/merge_requests/:merge_request_iid/reviewers
    method: GET
    data_selector: '[]'
- name: group_mr_approval_settings
  endpoint:
    path: /groups/:id/merge_request_approval_setting
    method: GET
    data_selector: records
    params:
      id: integer or string
- name: project_mr_approval_settings
  endpoint:
    path: /projects/:id/merge_request_approval_setting
    method: GET
    data_selector: records
    params:
      id: integer or string
- name: list_context_commits
  endpoint:
    path: /projects/:id/merge_requests/:merge_request_iid/context_commits
    method: GET
    data_selector: '[]'
- name: create_context_commits
  endpoint:
    path: /projects/:id/merge_requests/:merge_request_iid/context_commits
    method: POST
    data_selector: '[]'
- name: delete_context_commits
  endpoint:
    path: /projects/:id/merge_requests/:merge_request_iid/context_commits
    method: DELETE
    data_selector: '[]'
- name: merge_requests
  endpoint:
    path: /merge_requests
    method: GET
    data_selector: merge_requests
- name: merge_requests
  endpoint:
    path: /merge_requests
    method: GET
    params:
      with_merge_status_recheck: 'true'
- name: merge_requests
  endpoint:
    path: /projects/:id/merge_requests
    method: GET
    data_selector: '[]'
    params:
      state: all
- name: merge_requests
  endpoint:
    path: /groups/:id/merge_requests
    method: GET
    data_selector: records
    params: {}
- name: merge_request_commits
  endpoint:
    path: /projects/:id/merge_requests/:merge_request_iid/commits
    method: GET
    data_selector: commits
- name: merge_request_dependencies
  endpoint:
    path: /projects/:id/merge_requests/:merge_request_iid/blocks
    method: GET
    data_selector: ''
- name: delete_merge_request_dependency
  endpoint:
    path: /projects/:id/merge_requests/:merge_request_iid/blocks/:block_id
    method: DELETE
- name: create_merge_request_dependency
  endpoint:
    path: /projects/:id/merge_requests/:merge_request_iid/blocks
    method: POST
- name: blocked_merge_requests
  endpoint:
    path: /projects/:id/merge_requests/:merge_request_iid/blockees
    method: GET
    data_selector: records
    params:
      id: integer or string
- name: merge_request_changes
  endpoint:
    path: /projects/:id/merge_requests/:merge_request_iid/changes
    method: GET
    data_selector: changes
    params: {}
- name: merge_request_diffs
  endpoint:
    path: /projects/:id/merge_requests/:merge_request_iid/diffs
    method: GET
    data_selector: diffs
    params: {}
- name: merge_request_raw_diffs
  endpoint:
    path: /projects/:id/merge_requests/:merge_request_iid/raw_diffs
    method: GET
    data_selector: raw_diff
    params: {}
- name: merge_request_pipelines
  endpoint:
    path: /projects/:id/merge_requests/:merge_request_iid/pipelines
    method: GET
    data_selector: pipelines
    params: {}
- name: create_merge_request_pipeline
  endpoint:
    path: /projects/:id/merge_requests/:merge_request_iid/pipelines
    method: POST
    data_selector: pipeline
    params: {}
- name: create_merge_request
  endpoint:
    path: /projects/:id/merge_requests
    method: POST
- name: update_merge_request
  endpoint:
    path: /projects/:id/merge_requests/:merge_request_iid
    method: PUT
- name: delete_merge_request
  endpoint:
    path: /projects/:id/merge_requests/:merge_request_iid
    method: DELETE
    data_selector: null
    params: {}
- name: merge_merge_request
  endpoint:
    path: /projects/:id/merge_requests/:merge_request_iid/merge
    method: PUT
    data_selector: null
    params: {}
- name: merge_ref
  endpoint:
    path: /projects/:id/merge_requests/:merge_request_iid/merge_ref
    method: GET
    data_selector: commit_id
    params:
      id: id
      merge_request_iid: merge_request_iid
- name: cancel_merge_when_pipeline_succeeds
  endpoint:
    path: /projects/:id/merge_requests/:merge_request_iid/cancel_merge_when_pipeline_succeeds
    method: POST
    data_selector: null
    params:
      id: id
      merge_request_iid: merge_request_iid
- name: model_package
  endpoint:
    path: /projects/:id/packages/ml_models/:model_version_id/files/(*path/):filename
    method: GET
    data_selector: file contents
    params:
      id: required
      model_version_id: required
      path: required
      filename: required
- name: rebase_merge_request
  endpoint:
    path: /projects/:id/merge_requests/:merge_request_iid/rebase
    method: PUT
    data_selector: rebase_in_progress
    params: {}
- name: closes_issues
  endpoint:
    path: /projects/:id/merge_requests/:merge_request_iid/closes_issues
    method: GET
    data_selector: '[]'
    params: {}
- name: related_issues
  endpoint:
    path: /projects/:id/merge_requests/:merge_request_iid/related_issues
    method: GET
    data_selector: records
    params: {}
- name: subscribe_to_merge_request
  endpoint:
    path: /projects/:id/merge_requests/:merge_request_iid/subscribe
    method: POST
    params: {}
- name: unsubscribe_merge_request
  endpoint:
    path: /projects/:id/merge_requests/:merge_request_iid/unsubscribe
    method: POST
- name: create_todo_item
  endpoint:
    path: /projects/:id/merge_requests/:merge_request_iid/todo
    method: POST
    data_selector: id
    params: {}
- name: get_merge_request_diff_versions
  endpoint:
    path: /projects/:id/merge_requests/:merge_request_iid/versions
    method: GET
    data_selector: ''
    params: {}
- name: merge_request_diff_version
  endpoint:
    path: /projects/:id/merge_requests/:merge_request_iid/versions/:version_id
    method: GET
    data_selector: id
- name: set_time_estimate
  endpoint:
    path: /api/v4/projects/:id/merge_requests/:merge_request_iid/time_estimate
    method: POST
    data_selector: human_time_estimate
    params: {}
- name: reset_time_estimate
  endpoint:
    path: /api/v4/projects/:id/merge_requests/:merge_request_iid/reset_time_estimate
    method: POST
    data_selector: human_time_estimate
    params: {}
- name: add_spent_time
  endpoint:
    path: /api/v4/projects/:id/merge_requests/:merge_request_iid/add_spent_time
    method: POST
    data_selector: human_total_time_spent
    params: {}
- name: reset_spent_time
  endpoint:
    path: /api/v4/projects/:id/merge_requests/:merge_request_iid/reset_spent_time
    method: POST
    data_selector: human_total_time_spent
    params: {}
- name: get_time_tracking_stats
  endpoint:
    path: /api/v4/projects/:id/merge_requests/:merge_request_iid/time_stats
    method: GET
    data_selector: human_time_estimate
    params: {}
- name: merge_trains
  endpoint:
    path: /projects/:id/merge_trains
    method: GET
    params:
      scope: complete
- name: merge_requests_in_merge_train
  endpoint:
    path: /projects/:id/merge_trains/:target_branch
    method: GET
    params: {}
- name: merge_request_status
  endpoint:
    path: /projects/:id/merge_trains/merge_requests/:merge_request_iid
    method: GET
    params: {}
- name: merge_train_merge_requests
  endpoint:
    path: /projects/:id/merge_trains/merge_requests/:merge_request_iid
    method: POST
- name: metadata
  endpoint:
    path: /metadata
    method: GET
    data_selector: version
    params: {}
- name: projects
  endpoint:
    path: /projects
    method: GET
    data_selector: records
    params: {}
- name: projects
  endpoint:
    path: /users/:user_id/projects
    method: GET
    params:
      user_id: string
- name: contributed_projects
  endpoint:
    path: /users/:user_id/contributed_projects
    method: GET
    data_selector: projects
    params:
      user_id: string
      order_by: string
      simple: boolean
      sort: string
- name: projects
  endpoint:
    path: /projects
    method: GET
    data_selector: records
    params: {}
- name: project_users
  endpoint:
    path: /projects/:id/users
    method: GET
    data_selector: records
    params: {}
- name: project_groups
  endpoint:
    path: /projects/:id/groups
    method: GET
    data_selector: records
    params: {}
- name: shareable_groups
  endpoint:
    path: /projects/:id/share_locations
    method: GET
    data_selector: records
    params: {}
- name: invited_groups
  endpoint:
    path: /projects/:id/invited_groups
    method: GET
    data_selector: records
    params: {}
- name: project_languages
  endpoint:
    path: /projects/:id/languages
    method: GET
    data_selector: records
    params: {}
- name: project
  endpoint:
    path: /projects
    method: POST
    data_selector: null
    params: {}
- name: create_project
  endpoint:
    path: /projects/user/:user_id
    method: POST
    data_selector: project_attributes
- name: projects
  endpoint:
    path: /projects/:id
    method: PUT
- name: import_project_members
  endpoint:
    path: /projects/:id/import_project_members/:project_id
    method: POST
    data_selector: status
    params: {}
- name: archive_project
  endpoint:
    path: /projects/:id/archive
    method: POST
    data_selector: id
    params: {}
- name: unarchive_project
  endpoint:
    path: /projects/:id/unarchive
    method: POST
    data_selector: id
    params: {}
- name: delete_project
  endpoint:
    path: /projects/:id
    method: DELETE
    data_selector: id
    params: {}
- name: restore_project
  endpoint:
    path: /projects/:id/restore
    method: POST
    data_selector: id
    params: {}
- name: list_namespaces
  endpoint:
    path: /namespaces
    method: GET
    data_selector: records
- name: get_namespace_details
  endpoint:
    path: /namespaces/:id
    method: GET
    data_selector: records
- name: verify_namespace_availability
  endpoint:
    path: /namespaces/:namespace/exists
    method: GET
    data_selector: records
- name: transfer_project
  endpoint:
    path: /projects/:id/transfer
    method: PUT
    data_selector: id
    params: {}
- name: transfer_locations
  endpoint:
    path: /projects/:id/transfer_locations
    method: GET
    data_selector: '[]'
    params: {}
- name: upload_avatar
  endpoint:
    path: /projects/:id
    method: PUT
    data_selector: avatar_url
    params: {}
- name: download_avatar
  endpoint:
    path: /projects/:id/avatar
    method: GET
    data_selector: ''
    params: {}
- name: remove_avatar
  endpoint:
    path: /projects/:id
    method: PUT
    data_selector: ''
    params: {}
- name: share_project
  endpoint:
    path: /projects/:id/share
    method: POST
    data_selector: attributes
    params:
      group_access: required
      group_id: required
      id: required
      expires_at: optional
- name: delete_shared_project
  endpoint:
    path: /projects/:id/share/:group_id
    method: DELETE
    data_selector: null
    params:
      group_id: required
      id: required
- name: start_housekeeping
  endpoint:
    path: /projects/:id/housekeeping
    method: POST
    data_selector: null
    params:
      id: required
      task: optional
- name: security_scan
  endpoint:
    path: /projects/:id/security_scans/sast/scan
    method: POST
    data_selector: null
    params:
      id: required
- name: download_snapshot
  endpoint:
    path: /projects/:id/snapshot
    method: GET
    data_selector: null
    params:
      id: required
      wiki: optional
- name: get_repository_storage
  endpoint:
    path: /projects/:id/storage
    method: GET
    data_selector: null
    params:
      id: required
- name: secret_push_protection_status
  endpoint:
    path: /projects
    method: GET
    data_selector: null
    params:
      id: required
- name: repository_tree
  endpoint:
    path: /projects/:id/repository/tree
    method: GET
    data_selector: records
    params:
      per_page: 20
- name: blob
  endpoint:
    path: /projects/:id/repository/blobs/:sha
    method: GET
    data_selector: records
    params: {}
- name: raw_blob_content
  endpoint:
    path: /projects/:id/repository/blobs/:sha/raw
    method: GET
    data_selector: records
    params: {}
- name: file_archive
  endpoint:
    path: /projects/:id/repository/archive
    method: GET
    data_selector: records
    params: {}
- name: compare
  endpoint:
    path: /projects/:id/repository/compare
    method: GET
    data_selector: commit
    params: {}
- name: contributors
  endpoint:
    path: /projects/:id/repository/contributors
    method: GET
    data_selector: ''
    params: {}
- name: merge_base
  endpoint:
    path: /projects/:id/repository/merge_base
    method: GET
    data_selector: ''
    params: {}
- name: changelog
  endpoint:
    path: /projects/:id/repository/changelog
    method: POST
    data_selector: ''
    params: {}
- name: changelog
  endpoint:
    path: /projects/:id/repository/changelog
    method: POST
    data_selector: notes
    params:
      version: 1.0.0
- name: health
  endpoint:
    path: /projects/:id/repository/health
    method: GET
    data_selector: null
    params: {}
- name: get_file
  endpoint:
    path: /projects/:id/repository/files/:file_path
    method: GET
    data_selector: file
    params: {}
- name: get_file_metadata
  endpoint:
    path: /projects/:id/repository/files/:file_path
    method: HEAD
    data_selector: metadata
    params: {}
- name: request_blame_range
  endpoint:
    path: /projects/:id/repository/files/path%2Fto%2Ffile.rb/blame
    method: HEAD
    data_selector: blame
    params:
      range[start]: '1'
      range[end]: '2'
- name: get_raw_file
  endpoint:
    path: /projects/:id/repository/files/:file_path/raw
    method: GET
- name: create_file
  endpoint:
    path: /projects/:id/repository/files/:file_path
    method: POST
- name: update_file
  endpoint:
    path: /projects/:id/repository/files/:file_path
    method: PUT
- name: delete_file
  endpoint:
    path: /projects/:id/repository/files/:file_path
    method: DELETE
- name: resource_weight_events
  endpoint:
    path: /projects/:id/issues/:issue_iid/resource_weight_events
    method: GET
    data_selector: '[]'
- name: single_resource_weight_event
  endpoint:
    path: /projects/:id/issues/:issue_iid/resource_weight_events/:resource_weight_event_id
    method: GET
    data_selector: '{}'
- name: issue_notes
  endpoint:
    path: /projects/:id/issues/:issue_iid/notes
    method: GET
    data_selector: notes
    params:
      sort: desc
      order_by: created_at
- name: single_issue_note
  endpoint:
    path: /projects/:id/issues/:issue_iid/notes/:note_id
    method: GET
    data_selector: note
    params: {}
- name: create_issue_note
  endpoint:
    path: /projects/:id/issues/:issue_iid/notes
    method: POST
    data_selector: note
    params:
      body: string
- name: modify_issue_note
  endpoint:
    path: /projects/:id/issues/:issue_iid/notes/:note_id
    method: PUT
    data_selector: note
    params:
      body: string
- name: delete_issue_note
  endpoint:
    path: /projects/:id/issues/:issue_iid/notes/:note_id
    method: DELETE
    data_selector: note
    params: {}
- name: snippet_notes
  endpoint:
    path: /projects/:id/snippets/:snippet_id/notes
    method: GET
    data_selector: notes
    params:
      sort: desc
      order_by: created_at
- name: snippet_note
  endpoint:
    path: /projects/:id/snippets/:snippet_id/notes
    method: POST
    data_selector: ''
    params: {}
- name: merge_request_note
  endpoint:
    path: /projects/:id/merge_requests/:merge_request_iid/notes
    method: POST
    data_selector: ''
    params: {}
- name: merge_request_note
  endpoint:
    path: /projects/:id/merge_requests/:merge_request_iid/notes/:note_id
    method: PUT
    data_selector: note
    params:
      id: project_id
      merge_request_iid: merge_request_iid
      note_id: note_id
      body: note_content
- name: epic_note
  endpoint:
    path: /groups/:id/epics/:epic_id/notes/:note_id
    method: GET
    data_selector: note
    params:
      id: group_id
      epic_id: epic_id
      note_id: note_id
- name: wiki_page_notes
  endpoint:
    path: /projects/:id/wiki_pages/:wiki_page_meta_id/notes
    method: GET
    data_selector: notes
    params:
      id: required
      wiki_page_meta_id: required
      sort: optional
      order_by: optional
- name: single_wiki_page_note
  endpoint:
    path: /projects/:id/wiki_pages/:wiki_page_meta_id/notes/:note_id
    method: GET
    data_selector: note
    params:
      id: required
      wiki_page_meta_id: required
      note_id: required
- name: create_wiki_page_note
  endpoint:
    path: /groups/:id/wiki_pages/:wiki_page_meta_id/notes
    method: POST
    data_selector: note
    params:
      body: required
      wiki_page_meta_id: required
      id: required
- name: modify_wiki_page_note
  endpoint:
    path: /groups/:id/wiki_pages/:wiki_page_meta_id/notes/:note_id
    method: PUT
    data_selector: note
    params:
      id: required
      wiki_page_meta_id: required
      note_id: required
      body: required
- name: delete_wiki_page_note
  endpoint:
    path: /groups/:id/wiki_pages/:wiki_page_meta_id/notes/:note_id
    method: DELETE
    data_selector: note
    params:
      id: required
      wiki_page_meta_id: required
      note_id: required
- name: modify_wiki_page_note
  endpoint:
    path: /groups/:id/wiki_pages/:wiki_page_meta_id/notes/:note_id
    method: PUT
    params: {}
- name: delete_wiki_page_note
  endpoint:
    path: /groups/:id/wiki_pages/:wiki_page_meta_id/notes/:note_id
    method: DELETE
    params: {}
- name: get_global_notification_settings
  endpoint:
    path: /notification_settings
    method: GET
    data_selector: ''
    params: {}
- name: update_global_notification_settings
  endpoint:
    path: /notification_settings
    method: PUT
    data_selector: ''
    params: {}
- name: get_group_notification_settings
  endpoint:
    path: /groups/:id/notification_settings
    method: GET
    data_selector: ''
    params:
      id: ''
- name: get_project_notification_settings
  endpoint:
    path: /projects/:id/notification_settings
    method: GET
    data_selector: ''
    params:
      id: ''
- name: update_group_notification_settings
  endpoint:
    path: /groups/:id/notification_settings
    method: PUT
- name: update_project_notification_settings
  endpoint:
    path: /projects/:id/notification_settings
    method: PUT
- name: organization
  endpoint:
    path: /organizations
    method: POST
    data_selector: id
    params: {}
- name: project_packages
  endpoint:
    path: /projects/:id/packages
    method: GET
    data_selector: records
    params: {}
- name: group_packages
  endpoint:
    path: /groups/:id/packages
    method: GET
    data_selector: records
    params:
      exclude_subgroups: 'false'
- name: project_package
  endpoint:
    path: /projects/:id/packages/:package_id
    method: GET
    data_selector: package
    params: {}
- name: package_files
  endpoint:
    path: /projects/:id/packages/:package_id/package_files
    method: GET
    data_selector: files
    params: {}
- name: list_package_pipelines
  endpoint:
    path: /projects/:id/packages/:package_id/pipelines
    method: GET
- name: delete_project_package
  endpoint:
    path: /projects/:id/packages/:package_id
    method: DELETE
- name: delete_package_file
  endpoint:
    path: /projects/:id/packages/:package_id/package_files/:package_file_id
    method: DELETE
- name: list_all_pages_domains
  endpoint:
    path: /pages/domains
    method: GET
    data_selector: records
- name: list_project_pages_domains
  endpoint:
    path: /projects/:id/pages/domains
    method: GET
    data_selector: records
    params:
      id: integer/string
- name: single_project_pages_domain
  endpoint:
    path: /projects/:id/pages/domains/:domain
    method: GET
    data_selector: records
    params:
      id: integer/string
      domain: string
- name: create_pages_domain
  endpoint:
    path: /projects/:id/pages/domains
    method: POST
    data_selector: response
    params: {}
- name: update_pages_domain
  endpoint:
    path: /projects/:id/pages/domains/:domain
    method: PUT
    data_selector: response
    params: {}
- name: verify_pages_domain
  endpoint:
    path: /projects/:id/pages/domains/:domain/verify
    method: PUT
    data_selector: response
    params: {}
- name: delete_pages_domain
  endpoint:
    path: /projects/:id/pages/domains/:domain
    method: DELETE
    data_selector: response
    params: {}
- name: list_personal_access_tokens
  endpoint:
    path: /personal_access_tokens
    method: GET
    data_selector: tokens
    params: {}
- name: get_personal_access_token_details
  endpoint:
    path: /personal_access_tokens/:id
    method: GET
    data_selector: token_details
    params: {}
- name: rotate_personal_access_token
  endpoint:
    path: /personal_access_tokens/:id/rotate
    method: POST
    data_selector: rotate_response
    params: {}
- name: revoke_personal_access_token
  endpoint:
    path: /personal_access_tokens/:id
    method: DELETE
    data_selector: revoke_response
    params: {}
- name: token_associations
  endpoint:
    path: /personal_access_tokens/self/associations
    method: GET
    data_selector: groups, projects
    params:
      min_access_level: '40'
      page: '2'
- name: get_all_pipeline_schedules
  endpoint:
    path: /projects/:id/pipeline_schedules
    method: GET
    data_selector: ''
- name: get_single_pipeline_schedule
  endpoint:
    path: /projects/:id/pipeline_schedules/:pipeline_schedule_id
    method: GET
    data_selector: ''
- name: get_all_pipelines_triggered_by_schedule
  endpoint:
    path: /projects/:id/pipeline_schedules/:pipeline_schedule_id/pipelines
    method: GET
    data_selector: ''
- name: create_new_pipeline_schedule
  endpoint:
    path: /projects/:id/pipeline_schedules
    method: POST
    data_selector: ''
- name: edit_pipeline_schedule
  endpoint:
    path: /projects/:id/pipeline_schedules/:pipeline_schedule_id
    method: PUT
- name: take_ownership
  endpoint:
    path: /projects/:id/pipeline_schedules/:pipeline_schedule_id/take_ownership
    method: POST
- name: delete_pipeline_schedule
  endpoint:
    path: /projects/:id/pipeline_schedules/:pipeline_schedule_id
    method: DELETE
- name: run_pipeline_immediately
  endpoint:
    path: /projects/:id/pipeline_schedules/:pipeline_schedule_id/play
    method: POST
- name: create_pipeline_schedule_variable
  endpoint:
    path: /projects/:id/pipeline_schedules/:pipeline_schedule_id/variables
    method: POST
- name: edit_pipeline_schedule_variable
  endpoint:
    path: /projects/:id/pipeline_schedules/:pipeline_schedule_id/variables/:key
    method: PUT
    data_selector: ''
    params: {}
- name: delete_pipeline_schedule_variable
  endpoint:
    path: /projects/:id/pipeline_schedules/:pipeline_schedule_id/variables/:key
    method: DELETE
    data_selector: ''
    params: {}
- name: list_project_pipelines
  endpoint:
    path: /projects/:id/pipelines
    method: GET
    data_selector: pipelines
- name: get_single_pipeline
  endpoint:
    path: /projects/:id/pipelines/:pipeline_id
    method: GET
    data_selector: pipeline
- name: latest_pipeline
  endpoint:
    path: /projects/:id/pipelines/latest
    method: GET
    data_selector: id
- name: pipeline_variables
  endpoint:
    path: /projects/:id/pipelines/:pipeline_id/variables
    method: GET
    data_selector: key
- name: test_report
  endpoint:
    path: /projects/:id/pipelines/:pipeline_id/test_report
    method: GET
    data_selector: total_time
- name: test_report_summary
  endpoint:
    path: /projects/:id/pipelines/:pipeline_id/test_report_summary
    method: GET
    data_selector: total
- name: create_pipeline
  endpoint:
    path: /projects/:id/pipeline
    method: POST
    data_selector: id
- name: retry_pipeline
  endpoint:
    path: /projects/:id/pipelines/:pipeline_id/retry
    method: POST
    data_selector: null
    params: {}
- name: cancel_pipeline
  endpoint:
    path: /projects/:id/pipelines/:pipeline_id/cancel
    method: POST
    data_selector: null
    params: {}
- name: delete_pipeline
  endpoint:
    path: /projects/:id/pipelines/:pipeline_id
    method: DELETE
    data_selector: null
    params: {}
- name: update_pipeline_metadata
  endpoint:
    path: /projects/:id/pipelines/:pipeline_id/metadata
    method: PUT
    data_selector: null
    params: {}
- name: current_plan_limits
  endpoint:
    path: /application/plan_limits
    method: GET
    data_selector: ''
- name: change_plan_limits
  endpoint:
    path: /application/plan_limits
    method: PUT
    data_selector: ''
- name: issue_state_events
  endpoint:
    path: /projects/:id/issues/:issue_iid/resource_state_events
    method: GET
    data_selector: events
    params: {}
- name: merge_request_state_events
  endpoint:
    path: /projects/:id/merge_requests/:merge_request_iid/resource_state_events
    method: GET
    data_selector: events
    params: {}
- name: epic_state_events
  endpoint:
    path: /groups/:id/epics/:epic_id/resource_state_events
    method: GET
    data_selector: events
    params: {}
- name: load_request
  endpoint:
    path: /projects/:id/product_analytics/request/load
    method: POST
    data_selector: query
    params:
      id: integer
- name: dry_run_request
  endpoint:
    path: /projects/:id/product_analytics/request/dry-run
    method: POST
    data_selector: query
    params:
      id: integer
- name: metadata_request
  endpoint:
    path: /projects/:id/product_analytics/request/meta
    method: GET
    data_selector: metadata
    params:
      id: integer
- name: submodule_update
  endpoint:
    path: /projects/:id/repository/submodules/:submodule
    method: PUT
    data_selector: id
    params:
      id: project_id
      submodule: submodule_path
      branch: branch_name
      commit_sha: commit_sha
      commit_message: commit_message
- name: resource_groups
  endpoint:
    path: /projects/:id/resource_groups
    method: GET
    data_selector: records
    params: {}
- name: specific_resource_group
  endpoint:
    path: /projects/:id/resource_groups/:key
    method: GET
    data_selector: records
    params: {}
- name: upcoming_jobs
  endpoint:
    path: /projects/:id/resource_groups/:key/upcoming_jobs
    method: GET
    data_selector: records
    params: {}
- name: edit_resource_group
  endpoint:
    path: /projects/:id/resource_groups/:key
    method: PUT
    data_selector: records
    params: {}
- name: resource_iteration_events
  endpoint:
    path: /projects/:id/issues/:issue_iid/resource_iteration_events
    method: GET
    data_selector: '[]'
    params:
      id: ''
      issue_iid: ''
- name: single_resource_iteration_event
  endpoint:
    path: /projects/:id/issues/:issue_iid/resource_iteration_events/:resource_iteration_event_id
    method: GET
    data_selector: '{}'
    params:
      id: ''
      issue_iid: ''
      resource_iteration_event_id: ''
- name: project_issue_label_events
  endpoint:
    path: /projects/:id/issues/:issue_iid/resource_label_events
    method: GET
    data_selector: '[]'
    params: {}
- name: single_project_issue_label_event
  endpoint:
    path: /projects/:id/issues/:issue_iid/resource_label_events/:resource_label_event_id
    method: GET
    data_selector: '[]'
    params: {}
- name: group_epic_label_events
  endpoint:
    path: /groups/:id/epics/:epic_id/resource_label_events
    method: GET
    data_selector: '[]'
    params: {}
- name: single_group_epic_label_event
  endpoint:
    path: /groups/:id/epics/:epic_id/resource_label_events/:resource_label_event_id
    method: GET
    data_selector: '[]'
    params: {}
- name: project_merge_request_label_events
  endpoint:
    path: /projects/:id/merge_requests/:merge_request_iid/resource_label_events
    method: GET
    data_selector: '[]'
    params: {}
- name: single_project_merge_request_label_event
  endpoint:
    path: /projects/:id/merge_requests/:merge_request_iid/resource_label_events/:resource_label_event_id
    method: GET
    data_selector: '[]'
    params: {}
- name: project_issue_milestone_events
  endpoint:
    path: /projects/:id/issues/:issue_iid/resource_milestone_events
    method: GET
- name: single_issue_milestone_event
  endpoint:
    path: /projects/:id/issues/:issue_iid/resource_milestone_events/:resource_milestone_event_id
    method: GET
- name: project_merge_request_milestone_events
  endpoint:
    path: /projects/:id/merge_requests/:merge_request_iid/resource_milestone_events
    method: GET
- name: single_merge_request_milestone_event
  endpoint:
    path: /projects/:id/merge_requests/:merge_request_iid/resource_milestone_events/:resource_milestone_event_id
    method: GET
- name: single_epic_state_event
  endpoint:
    path: /groups/:id/epics/:epic_id/resource_state_events/:resource_state_event_id
    method: GET
    data_selector: id
    params:
      id: integer/string
      epic_id: integer
      resource_state_event_id: integer
- name: list_owned_runners
  endpoint:
    path: /runners
    method: GET
- name: list_all_runners
  endpoint:
    path: /runners/all
    method: GET
- name: runner
  endpoint:
    path: /runners/:id
    method: GET
    data_selector: null
    params: {}
- name: update_runner
  endpoint:
    path: /runners/:id
    method: PUT
    data_selector: null
    params: {}
- name: pause_runner
  endpoint:
    path: /runners/:runner_id
    method: PUT
    data_selector: null
    params: {}
- name: jobs
  endpoint:
    path: /runners/:id/jobs
    method: GET
    data_selector: jobs
    params:
      status: running
- name: list_runners_managers
  endpoint:
    path: /runners/:id/managers
    method: GET
- name: list_projects_runners
  endpoint:
    path: /projects/:id/runners
    method: GET
- name: assign_runner_to_project
  endpoint:
    path: /projects/:id/runners
    method: POST
- name: unassign_runner_from_project
  endpoint:
    path: /projects/:id/runners/:runner_id
    method: DELETE
- name: list_group_runners
  endpoint:
    path: /groups/:id/runners
    method: GET
    data_selector: runners
- name: create_runner
  endpoint:
    path: /runners
    method: POST
    data_selector: runner
- name: delete_runner_by_id
  endpoint:
    path: /runners/:id
    method: DELETE
    data_selector: runner
- name: delete_runner_by_token
  endpoint:
    path: /runners
    method: DELETE
    data_selector: runner
- name: verify_runner
  endpoint:
    path: /runners/verify
    method: POST
    data_selector: runner
- name: reset_instance_runner_registration_token
  endpoint:
    path: /runners/reset_registration_token
    method: POST
- name: reset_project_runner_registration_token
  endpoint:
    path: /projects/:id/runners/reset_registration_token
    method: POST
- name: reset_group_runner_registration_token
  endpoint:
    path: /groups/:id/runners/reset_registration_token
    method: POST
- name: reset_runner_authentication_token_by_id
  endpoint:
    path: /runners/:id/reset_authentication_token
    method: POST
- name: reset_runner_authentication_token_by_current_token
  endpoint:
    path: /runners/reset_authentication_token
    method: POST
- name: search_projects
  endpoint:
    path: /search
    method: GET
    data_selector: records
    params:
      scope: projects
- name: search_issues
  endpoint:
    path: /search
    method: GET
    data_selector: records
    params:
      scope: issues
- name: search_merge_requests
  endpoint:
    path: /search
    method: GET
    data_selector: records
    params:
      scope: merge_requests
- name: milestones
  endpoint:
    path: /projects/:id/search?scope=milestones
    method: GET
    data_selector: records
- name: users
  endpoint:
    path: /projects/:id/search?scope=users
    method: GET
    data_selector: records
- name: wiki_blobs
  endpoint:
    path: /projects/:id/search?scope=wiki_blobs
    method: GET
    data_selector: records
- name: commits
  endpoint:
    path: /projects/:id/search?scope=commits
    method: GET
    data_selector: records
- name: blobs
  endpoint:
    path: /projects/:id/search?scope=blobs
    method: GET
    data_selector: records
- name: notes
  endpoint:
    path: /projects/:id/search?scope=notes
    method: GET
    data_selector: records
- name: groups_search_projects
  endpoint:
    path: /groups/3/search
    method: GET
    data_selector: records
    params:
      scope: projects
- name: groups_search_issues
  endpoint:
    path: /groups/3/search
    method: GET
    data_selector: records
    params:
      scope: issues
- name: projects_search_merge_requests
  endpoint:
    path: /projects/6/search
    method: GET
    data_selector: records
    params:
      scope: merge_requests
- name: projects_search_milestones
  endpoint:
    path: /projects/12/search
    method: GET
    data_selector: records
    params:
      scope: milestones
- name: projects_search_users
  endpoint:
    path: /projects/6/search
    method: GET
    data_selector: records
    params:
      scope: users
- name: wiki_blobs
  endpoint:
    path: /api/v4/projects/:id/search
    method: GET
    data_selector: results
    params:
      scope: wiki_blobs
- name: commits
  endpoint:
    path: /api/v4/projects/:id/search
    method: GET
    data_selector: results
    params:
      scope: commits
- name: blobs
  endpoint:
    path: /api/v4/projects/:id/search
    method: GET
    data_selector: results
    params:
      scope: blobs
- name: notes
  endpoint:
    path: /api/v4/projects/:id/search
    method: GET
    data_selector: results
    params:
      scope: notes
- name: issues
  endpoint:
    path: /api/v4/projects/{project_id}/search
    method: GET
    data_selector: records
    params:
      scope: issues
- name: merge_requests
  endpoint:
    path: /api/v4/projects/{project_id}/search
    method: GET
    data_selector: records
    params:
      scope: merge_requests
- name: milestones
  endpoint:
    path: /api/v4/projects/{project_id}/search
    method: GET
    data_selector: records
    params:
      scope: milestones
- name: users
  endpoint:
    path: /api/v4/projects/{project_id}/search
    method: GET
    data_selector: records
    params:
      scope: users
- name: wiki_blobs
  endpoint:
    path: /api/v4/projects/{project_id}/search
    method: GET
    data_selector: records
    params:
      scope: wiki_blobs
- name: commits
  endpoint:
    path: /projects/:id/search
    method: GET
    data_selector: records
    params:
      scope: commits
      search: ''
- name: blobs
  endpoint:
    path: /projects/:id/search
    method: GET
    data_selector: records
    params:
      scope: blobs
      search: ''
- name: notes
  endpoint:
    path: /projects/:id/search
    method: GET
    data_selector: records
    params:
      scope: notes
      search: ''
- name: advanced_search_migrations
  endpoint:
    path: /admin/search/migrations
    method: GET
    data_selector: ''
- name: advanced_search_migration
  endpoint:
    path: /admin/search/mirations/:version_or_name
    method: GET
    data_selector: ''
- name: list_secure_files
  endpoint:
    path: /projects/:project_id/secure_files
    method: GET
    data_selector: ''
- name: show_secure_file_details
  endpoint:
    path: /projects/:project_id/secure_files/:id
    method: GET
    data_selector: ''
- name: create_secure_file
  endpoint:
    path: /projects/:project_id/secure_files
    method: POST
    data_selector: ''
- name: download_secure_file
  endpoint:
    path: /projects/:project_id/secure_files/:id/download
    method: GET
    data_selector: ''
- name: remove_secure_file
  endpoint:
    path: /projects/:project_id/secure_files/:id
    method: DELETE
    data_selector: ''
- name: service_ping
  endpoint:
    path: /usage_data/service_ping
    method: GET
    data_selector: payload
- name: metric_definitions
  endpoint:
    path: /usage_data/metric_definitions
    method: GET
    data_selector: metrics
- name: sql_queries
  endpoint:
    path: /usage_data/queries
    method: GET
    data_selector: queries
- name: non_sql_metrics
  endpoint:
    path: /usage_data/non_sql_metrics
    method: GET
    data_selector: non_sql_metrics
- name: track_event
  endpoint:
    path: /usage_data/track_event
    method: POST
    data_selector: event_response
- name: track_events
  endpoint:
    path: /usage_data/track_events
    method: POST
    data_selector: events_response
- name: queue_metrics
  endpoint:
    path: /sidekiq/queue_metrics
    method: GET
    data_selector: queues
- name: process_metrics
  endpoint:
    path: /sidekiq/process_metrics
    method: GET
    data_selector: processes
- name: job_stats
  endpoint:
    path: /sidekiq/job_stats
    method: GET
    data_selector: jobs
- name: compound_metrics
  endpoint:
    path: /sidekiq/compound_metrics
    method: GET
    data_selector: queues
- name: delete_jobs
  endpoint:
    path: /admin/sidekiq/queues/:queue_name
    method: DELETE
    data_selector: completed
    params:
      queue_name: string
- name: retrieve_all_snippet_repository_storage_moves
  endpoint:
    path: /snippet_repository_storage_moves
    method: GET
- name: retrieve_all_repository_storage_moves_for_a_snippet
  endpoint:
    path: /snippets/:snippet_id/repository_storage_moves
    method: GET
- name: get_single_snippet_repository_storage_move
  endpoint:
    path: /snippet_repository_storage_moves/:repository_storage_id
    method: GET
- name: get_single_repository_storage_move_for_a_snippet
  endpoint:
    path: /snippets/:snippet_id/repository_storage_moves/:repository_storage_id
    method: GET
- name: schedule_repository_storage_move_for_a_snippet
  endpoint:
    path: /snippets/:snippet_id/repository_storage_moves
    method: POST
- name: snippet_repository_storage_moves
  endpoint:
    path: /snippet_repository_storage_moves
    method: POST
    data_selector: message
    params:
      source_storage_name: default
- name: snippets
  endpoint:
    path: /snippets
    method: GET
    data_selector: snippets
    params: {}
- name: single_snippet
  endpoint:
    path: /snippets/:id
    method: GET
    data_selector: snippet
    params: {}
- name: snippet_raw_contents
  endpoint:
    path: /snippets/:id/raw
    method: GET
    data_selector: raw_content
    params: {}
- name: snippet_repository_file_content
  endpoint:
    path: /snippets/:id/files/:ref/:file_path/raw
    method: GET
    data_selector: file_content
    params: {}
- name: create_snippet
  endpoint:
    path: /snippets
    method: POST
    data_selector: created_snippet
    params: {}
- name: update_snippet
  endpoint:
    path: /snippets/:id
    method: PUT
- name: delete_snippet
  endpoint:
    path: /snippets/:id
    method: DELETE
- name: list_public_snippets
  endpoint:
    path: /snippets/public
    method: GET
- name: all_snippets
  endpoint:
    path: /snippets/all
    method: GET
    data_selector: snippets
    params:
      per_page: per_page
      page: page
- name: user_agent_detail
  endpoint:
    path: /snippets/:id/user_agent_detail
    method: GET
    data_selector: user_agent
    params:
      id: id
- name: apply_suggestion
  endpoint:
    path: /suggestions/:id/apply
    method: PUT
- name: batch_apply_suggestions
  endpoint:
    path: /suggestions/batch_apply
    method: PUT
- name: list_protected_branches
  endpoint:
    path: /projects/:id/protected_branches
    method: GET
    data_selector: '[]'
    params:
      id: integer or string
- name: get_protected_branch
  endpoint:
    path: /projects/:id/protected_branches/:name
    method: GET
    data_selector: '{}'
    params:
      id: integer or string
      name: string
- name: protected_branch
  endpoint:
    path: /projects/:id/protected_branches
    method: POST
    data_selector: id
    params:
      id: integer or string
      name: string
      allow_force_push: boolean
      allowed_to_merge: array
      allowed_to_push: array
      allowed_to_unprotect: array
      code_owner_approval_required: boolean
      merge_access_level: integer
      push_access_level: integer
      unprotect_access_level: integer
- name: protected_branch
  endpoint:
    path: /projects/:id/protected_branches/:name
    method: PATCH
    data_selector: push_access_levels
    params: {}
- name: unprotect_branch
  endpoint:
    path: /projects/:id/protected_branches/:name
    method: DELETE
    data_selector: ''
    params: {}
- name: list_system_hooks
  endpoint:
    path: /hooks
    method: GET
    data_selector: '[]'
- name: get_system_hook
  endpoint:
    path: /hooks/:id
    method: GET
    data_selector: '{}'
- name: add_new_system_hook
  endpoint:
    path: /hooks
    method: POST
    data_selector: '[]'
- name: update_system_hook
  endpoint:
    path: /hooks/:hook_id
    method: PUT
    data_selector: '{}'
- name: test_system_hook
  endpoint:
    path: /hooks/:id
    method: POST
    data_selector: '{}'
- name: delete_system_hook
  endpoint:
    path: /hooks/:id
    method: DELETE
    data_selector: '{}'
- name: set_url_variable
  endpoint:
    path: /hooks/:hook_id/url_variables/:key
    method: PUT
    data_selector: '{}'
- name: delete_url_variable
  endpoint:
    path: /hooks/:hook_id/url_variables/:key
    method: DELETE
    data_selector: '{}'
- name: vulnerability_export
  endpoint:
    path: /security/vulnerability_exports/:id/download
    method: GET
    data_selector: ''
- name: list_repository_tags
  endpoint:
    path: /projects/:id/repository/tags
    method: GET
    params:
      id: 'yes'
      order_by: 'no'
      sort: 'no'
      search: 'no'
- name: get_single_repository_tag
  endpoint:
    path: /projects/:id/repository/tags/:tag_name
    method: GET
    params:
      id: 'yes'
      tag_name: 'yes'
- name: create_new_tag
  endpoint:
    path: /projects/:id/repository/tags
    method: POST
    params:
      id: 'yes'
      tag_name: 'yes'
      ref: 'yes'
      message: 'no'
- name: delete_tag
  endpoint:
    path: /projects/:id/repository/tags/:tag_name
    method: DELETE
    params:
      id: 'yes'
      tag_name: 'yes'
- name: tag_signature
  endpoint:
    path: /projects/:id/repository/tags/:tag_name/signature
    method: GET
    data_selector: signature_type
    params:
      id: integer or string
      tag_name: string
- name: list_topics
  endpoint:
    path: /topics
    method: GET
    data_selector: records
    params: {}
- name: get_topic
  endpoint:
    path: /topics/:id
    method: GET
    data_selector: records
    params: {}
- name: list_projects_by_topic
  endpoint:
    path: /projects
    method: GET
    data_selector: records
    params:
      topic: <topic_name>
- name: create_topic
  endpoint:
    path: /topics
    method: POST
    data_selector: records
    params: {}
- name: update_topic
  endpoint:
    path: /topics/:id
    method: PUT
    data_selector: records
    params: {}
- name: delete_topic
  endpoint:
    path: /topics/:id
    method: DELETE
    data_selector: records
    params: {}
- name: merge_topics
  endpoint:
    path: /topics/merge
    method: POST
    data_selector: records
    params: {}
- name: users
  endpoint:
    path: /users
    method: GET
    data_selector: ''
    params:
      page: ''
      per_page: ''
- name: user_details
  endpoint:
    path: /user
    method: GET
    data_selector: ''
    params: {}
- name: create_user
  endpoint:
    path: /users
    method: POST
- name: get_single_user
  endpoint:
    path: /users/:id
    method: GET
- name: get_user_details
  endpoint:
    path: /user
    method: GET
- name: create_user
  endpoint:
    path: /users
    method: POST
    data_selector: attributes
- name: get_user
  endpoint:
    path: /user
    method: GET
    data_selector: user
- name: create_user
  endpoint:
    path: /users
    method: POST
- name: modify_user
  endpoint:
    path: /users/:id
    method: PUT
- name: delete_user
  endpoint:
    path: /users/:id
    method: DELETE
- name: get_user_status
  endpoint:
    path: /user/status
    method: GET
- name: create_project_vulnerability_export
  endpoint:
    path: /security/projects/:id/vulnerability_exports
    method: POST
- name: create_group_vulnerability_export
  endpoint:
    path: /security/groups/:id/vulnerability_exports
    method: POST
- name: create_instance_vulnerability_export
  endpoint:
    path: /security/vulnerability_exports
    method: POST
- name: get_single_vulnerability_export
  endpoint:
    path: /security/vulnerability_exports/:id
    method: GET
- name: user_status
  endpoint:
    path: /users/:id_or_username/status
    method: GET
    data_selector: status
- name: set_user_status
  endpoint:
    path: /user/status
    method: PUT
    data_selector: status
- name: user_preferences
  endpoint:
    path: /user/preferences
    method: GET
    data_selector: preferences
- name: update_user_preferences
  endpoint:
    path: /user/preferences
    method: PUT
    data_selector: preferences
- name: upload_avatar
  endpoint:
    path: /user/avatar
    method: PUT
    data_selector: avatar
- name: user_counts
  endpoint:
    path: /user_counts
    method: GET
    data_selector: counts
- name: user_associations_count
  endpoint:
    path: /users/:id/associations_count
    method: GET
    data_selector: associations_count
- name: user_activity
  endpoint:
    path: /user/activities
    method: GET
    data_selector: activities
- name: user_memberships
  endpoint:
    path: /users/:id/memberships
    method: GET
    data_selector: records
- name: disable_two_factor
  endpoint:
    path: /users/:id/disable_two_factor
    method: PATCH
- name: create_runner
  endpoint:
    path: /user/runners
    method: POST
- name: delete_auth_identity
  endpoint:
    path: /users/:id/identities/:provider
    method: DELETE
- name: create_support_pin
  endpoint:
    path: /user/support_pin
    method: POST
- name: get_support_pin
  endpoint:
    path: /user/support_pin
    method: GET
- name: get_user_support_pin
  endpoint:
    path: /users/:id/support_pin
    method: GET
- name: revoke_support_pin
  endpoint:
    path: /users/:id/support_pin/revoke
    method: POST
- name: version
  endpoint:
    path: /version
    method: GET
    data_selector: ''
    params: {}
- name: single_vulnerability
  endpoint:
    path: /vulnerabilities/:id
    method: GET
    data_selector: id
- name: confirm_vulnerability
  endpoint:
    path: /vulnerabilities/:id/confirm
    method: POST
    data_selector: id
- name: resolve_vulnerability
  endpoint:
    path: /vulnerabilities/:id/resolve
    method: POST
    data_selector: id
- name: dismiss_vulnerability
  endpoint:
    path: /vulnerabilities/:id/dismiss
    method: POST
    data_selector: id
- name: revert_vulnerability
  endpoint:
    path: /vulnerabilities/:id/revert
    method: POST
    data_selector: id
- name: vulnerabilityConfirm
  endpoint:
    path: Mutation.vulnerabilityConfirm
    method: POST
    data_selector: data.vulnerabilityConfirm
- name: vulnerabilityResolve
  endpoint:
    path: Mutation.vulnerabilityResolve
    method: POST
    data_selector: data.vulnerabilityResolve
- name: vulnerabilityDismiss
  endpoint:
    path: Mutation.vulnerabilityDismiss
    method: POST
    data_selector: data.vulnerabilityDismiss
- name: vulnerabilityRevertToDetected
  endpoint:
    path: Mutation.vulnerabilityRevertToDetected
    method: POST
    data_selector: data.vulnerabilityRevertToDetected
- name: export_archived_vulnerabilities
  endpoint:
    path: /security/projects/:id/vulnerability_archive_exports
    method: POST
    data_selector: null
    params:
      id: integer or string
      start_date: string
      end_date: string
      export_format: csv
- name: get_single_vulnerability_archive_export
  endpoint:
    path: /security/vulnerability_archive_exports/:id
    method: GET
    data_selector: null
    params:
      id: integer or string
- name: vulnerability_archive_exports
  endpoint:
    path: /security/vulnerability_archive_exports/:id/download
    method: GET
    data_selector: records
    params:
      id: integer or string
- name: vulnerability_findings
  endpoint:
    path: /projects/:id/vulnerability_findings
    method: GET
    data_selector: records
- name: public_key
  endpoint:
    path: /web_commits/public_key
    method: GET
    data_selector: public_key
- name: projects
  endpoint:
    path: /projects
    method: GET
    data_selector: statistics
    params:
      statistics: 'true'
- name: job_artifacts
  endpoint:
    path: /projects/:id/jobs
    method: GET
    data_selector: artifacts
- name: projects
  endpoint:
    path: /projects
    method: GET
    data_selector: statistics
    params:
      statistics: 'true'
- name: job_artifacts
  endpoint:
    path: /projects/{project_id}/jobs
    method: GET
    data_selector: artifacts
- name: project_artifacts
  endpoint:
    path: /projects/$GL_PROJECT_ID/artifacts
    method: DELETE
- name: project_jobs
  endpoint:
    path: /projects/$GL_PROJECT_ID/jobs
    method: GET
- name: projects
  endpoint:
    path: /projects
    method: GET
    data_selector: '[]'
- name: job_artifacts
  endpoint:
    path: /projects/{project_id}/jobs
    method: GET
    data_selector: '[]'
- name: pipelines
  endpoint:
    path: /projects/$GL_PROJECT_ID/pipelines
    method: GET
    data_selector: .[]
    params: {}
- name: projects
  endpoint:
    path: /projects
    method: GET
    data_selector: .
    params:
      statistics: 'true'
- name: job_artifacts
  endpoint:
    path: /projects/{project_id}/jobs
    method: GET
    data_selector: .artifacts
    params: {}
- name: pipelines
  endpoint:
    path: /projects/{project_id}/pipelines
    method: GET
    data_selector: .
    params: {}
- name: projects
  endpoint:
    path: /projects
    method: GET
    data_selector: '[]'
- name: job_artifacts
  endpoint:
    path: /projects/{project_id}/jobs
    method: GET
    data_selector: '[]'
- name: pipelines
  endpoint:
    path: /projects/{project_id}/pipelines
    method: GET
    data_selector: '[]'
- name: container_registry_repositories
  endpoint:
    path: /projects/{project_id}/registry/repositories
    method: GET
    data_selector: .
    params: {}
- name: container_registry_repository
  endpoint:
    path: /registry/repositories/{repository_id}
    method: GET
    data_selector: .
    params:
      size: 'true'
- name: container_registry_tags
  endpoint:
    path: /projects/{project_id}/registry/repositories/{repository_id}/tags
    method: GET
    data_selector: .
    params: {}
- name: delete_container_tags
  endpoint:
    path: /projects/{project_id}/registry/repositories/{repository_id}/tags
    method: DELETE
    data_selector: .
    params:
      older_than: 1m
- name: projects
  endpoint:
    path: /projects
    method: GET
    data_selector: '[]'
    params:
      statistics: 'true'
- name: job_artifacts
  endpoint:
    path: /projects/{project_id}/jobs
    method: GET
    data_selector: '[]'
    params: {}
- name: container_registry
  endpoint:
    path: /projects/{project_id}/registry/repositories
    method: GET
    data_selector: '[]'
    params: {}
- name: container_expiration_policy
  endpoint:
    path: /projects/{project_id}/container_expiration_policy
    method: PUT
    data_selector: container_expiration_policy_attributes
    params: {}
- name: projects
  endpoint:
    path: /projects
    method: GET
    data_selector: .
    params: {}
- name: registry_repositories
  endpoint:
    path: /projects/{project_id}/registry/repositories
    method: GET
    data_selector: .
    params: {}
- name: job_artifacts
  endpoint:
    path: /projects/{project_id}/jobs
    method: GET
    data_selector: .
    params: {}
- name: pipelines
  endpoint:
    path: /projects/{project_id}/pipelines
    method: GET
    data_selector: .
    params: {}
- name: projects
  endpoint:
    path: /projects
    method: GET
    data_selector: .
    params: {}
- name: registry_repositories
  endpoint:
    path: /projects/{project_id}/registry/repositories
    method: GET
    data_selector: .
    params: {}
- name: packages
  endpoint:
    path: /projects/{project_id}/packages
    method: GET
    data_selector: .
    params: {}
- name: generate-package
  endpoint:
    path: /projects/${CI_PROJECT_ID}/packages/generic/generator/${timestamp}/${MB_COUNT}-nightly.tar.gz
    method: POST
    data_selector: artifacts
    params: {}
- name: project_iterations
  endpoint:
    path: /projects/:id/iterations
    method: GET
    data_selector: '[]'
    params: {}
- name: list_project_access_tokens
  endpoint:
    path: /projects/:id/access_tokens
    method: GET
    data_selector: tokens
- name: get_project_access_token_details
  endpoint:
    path: /projects/:id/access_tokens/:token_id
    method: GET
    data_selector: token
- name: create_project_access_token
  endpoint:
    path: /projects/:id/access_tokens
    method: POST
    data_selector: token
- name: rotate_project_access_token
  endpoint:
    path: /projects/:id/access_tokens/:token_id/rotate
    method: POST
- name: revoke_project_access_token
  endpoint:
    path: /projects/:id/access_tokens/:token_id
    method: DELETE
- name: project_aliases
  endpoint:
    path: /project_aliases
    method: GET
    data_selector: records
- name: project_alias_details
  endpoint:
    path: /project_aliases/:name
    method: GET
    data_selector: records
- name: create_project_alias
  endpoint:
    path: /project_aliases
    method: POST
    data_selector: records
- name: delete_project_alias
  endpoint:
    path: /project_aliases/:name
    method: DELETE
    data_selector: records
- name: list_badges
  endpoint:
    path: /projects/:id/badges
    method: GET
    data_selector: badges
- name: get_badge
  endpoint:
    path: /projects/:id/badges/:badge_id
    method: GET
    data_selector: badge
- name: add_badge
  endpoint:
    path: /projects/:id/badges
    method: POST
    data_selector: badge
- name: edit_badge
  endpoint:
    path: /projects/:id/badges/:badge_id
    method: PUT
    data_selector: badge
- name: remove_badge
  endpoint:
    path: /projects/:id/badges/:badge_id
    method: DELETE
    data_selector: badge
- name: preview_badge
  endpoint:
    path: /projects/:id/badges/render
    method: GET
    data_selector: badge_preview
- name: list_protected_environments
  endpoint:
    path: /projects/:id/protected_environments
    method: GET
    data_selector: '[]'
- name: get_single_protected_environment
  endpoint:
    path: /projects/:id/protected_environments/:name
    method: GET
    data_selector: '{}'
- name: protect_single_environment
  endpoint:
    path: /projects/:id/protected_environments
    method: POST
    data_selector: '{}'
- name: update_protected_environment
  endpoint:
    path: /projects/:id/protected_environments/:name
    method: PUT
    data_selector: '{}'
- name: protected_environments
  endpoint:
    path: /projects/:id/protected_environments/:name
    method: PUT
    data_selector: approval_rules
    params: {}
- name: unprotect_environment
  endpoint:
    path: /projects/:id/protected_environments/:name
    method: DELETE
    data_selector: null
    params: {}
- name: list_project_variables
  endpoint:
    path: /projects/:id/variables
    method: GET
    data_selector: variables
    params:
      id: integer/string
- name: get_single_variable
  endpoint:
    path: /projects/:id/variables/:key
    method: GET
    data_selector: variable
    params:
      id: integer/string
      key: string
- name: create_variable
  endpoint:
    path: /projects/:id/variables
    method: POST
    data_selector: variable
    params:
      id: integer/string
      key: string
      value: string
- name: update_variable
  endpoint:
    path: /projects/:id/variables/:key
    method: PUT
    data_selector: variable
    params:
      id: integer/string
      key: string
      value: string
- name: delete_variable
  endpoint:
    path: /projects/:id/variables/:key
    method: DELETE
    data_selector: 'null'
    params:
      id: integer/string
      key: string
- name: fork_project
  endpoint:
    path: /projects/:id/fork
    method: POST
- name: list_forks
  endpoint:
    path: /projects/:id/forks
    method: GET
- name: create_fork_relationship
  endpoint:
    path: /projects/:id/fork/:forked_from_id
    method: POST
- name: delete_fork_relationship
  endpoint:
    path: /projects/:id/fork
    method: DELETE
- name: export_project
  endpoint:
    path: /projects/:id/export
    method: POST
    data_selector: message
    params: {}
- name: export_status
  endpoint:
    path: /projects/:id/export
    method: GET
    data_selector: export_status
    params: {}
- name: export_download
  endpoint:
    path: /projects/:id/export/download
    method: GET
    data_selector: id
    params: {}
- name: import_project
  endpoint:
    path: /projects/import
    method: POST
    data_selector: id
    params: {}
- name: remote_import
  endpoint:
    path: /projects/remote-import
    method: POST
    data_selector: null
    params: {}
- name: import_relation
  endpoint:
    path: /projects/import-relation
    method: POST
    data_selector: null
    params: {}
- name: relation_import_status
  endpoint:
    path: /projects/:id/relation-imports
    method: GET
    data_selector: null
    params: {}
- name: remote_import_s3
  endpoint:
    path: /projects/remote-import-s3
    method: POST
    data_selector: null
    params: {}
- name: import_status
  endpoint:
    path: /projects/:id/import
    method: GET
    data_selector: import_status
    params:
      id: integer or string
- name: set_up_buildkite
  endpoint:
    path: /projects/:id/integrations/buildkite
    method: PUT
    data_selector: settings
    params: {}
- name: disable_buildkite
  endpoint:
    path: /projects/:id/integrations/buildkite
    method: DELETE
    data_selector: settings
    params: {}
- name: get_buildkite_settings
  endpoint:
    path: /projects/:id/integrations/buildkite
    method: GET
    data_selector: settings
    params: {}
- name: Campfire Classic
  endpoint:
    path: /projects/:id/integrations/campfire
    method: PUT
    data_selector: ''
    params:
      token: API authentication token from Campfire Classic
      subdomain: .campfirenow.com
      room: ID portion of the Campfire Classic room URL
      use_inherited_settings: Indicates whether to inherit the default settings
- name: ClickUp
  endpoint:
    path: /projects/:id/integrations/clickup
    method: PUT
    data_selector: ''
    params:
      issues_url: URL of the issue
      project_url: URL of the project
      use_inherited_settings: Indicates whether to inherit the default settings
- name: Confluence Workspace
  endpoint:
    path: /projects/:id/integrations/confluence
    method: PUT
    data_selector: ''
    params:
      confluence_url: URL of the Confluence Workspace hosted on atlassian.net
      use_inherited_settings: Indicates whether to inherit the default settings
- name: Custom issue tracker
  endpoint:
    path: /projects/:id/integrations/custom-issue-tracker
    method: PUT
    data_selector: ''
    params:
      new_issue_url: URL of the new issue
      issues_url: URL of the issue
      project_url: URL of the project
      use_inherited_settings: Indicates whether to inherit the default settings
- name: Datadog
  endpoint:
    path: /projects/:id/integrations/datadog
    method: PUT
    data_selector: ''
    params:
      api_key: API key used for authentication with Datadog
      datadog_ci_visibility: Enables collection of pipeline and job events in Datadog
      api_url: Full URL of your Datadog site
      datadog_env: For self-managed deployments, env% tag for all the data sent to
        Datadog
      datadog_service: GitLab instance to tag all data from in Datadog
      datadog_site: Datadog site to send data to
      datadog_tags: Custom tags in Datadog
      archive_trace_events: When enabled, job logs are collected by Datadog
      use_inherited_settings: Indicates whether to inherit the default settings
- name: Diffblue Cover
  endpoint:
    path: /projects/:id/integrations/diffblue-cover
    method: PUT
    data_selector: ''
    params:
      diffblue_license_key: Diffblue Cover license key
      diffblue_access_token_name: Access token name used by Diffblue Cover in pipelines
      diffblue_access_token_secret: Access token secret used by Diffblue Cover in
        pipelines
      use_inherited_settings: Indicates whether to inherit the default settings
- name: git_guardian
  endpoint:
    path: /projects/:id/integrations/git-guardian
    method: PUT
    data_selector: ''
    params: {}
- name: reorder_list
  endpoint:
    path: /projects/:id/boards/:board_id/lists/:list_id
    method: PUT
    data_selector: id
    params: {}
- name: delete_list
  endpoint:
    path: /projects/:id/boards/:board_id/lists/:list_id
    method: DELETE
    data_selector: id
    params: {}
- name: GitHub integration
  endpoint:
    path: /projects/:id/integrations/github
    method: PUT
    data_selector: settings
    params:
      token: GitHub API token with `repo:status` OAuth scope.
      repository_url: GitHub repository URL.
- name: Google Chat integration
  endpoint:
    path: /projects/:id/integrations/hangouts-chat
    method: PUT
    data_selector: settings
    params:
      webhook: The Hangouts Chat webhook.
- name: Google Artifact Management
  endpoint:
    path: /projects/:id/integrations/google-cloud-platform-artifact-registry
    method: PUT
    data_selector: settings
    params:
      artifact_registry_project_id: ID of the Google Cloud project.
      artifact_registry_location: Location of the Artifact Registry repository.
      artifact_registry_repositories: Repository of Artifact Registry.
- name: teamcity_integration
  endpoint:
    path: /projects/:id/integrations/teamcity
    method: PUT
- name: get_teamcity_settings
  endpoint:
    path: /projects/:id/integrations/teamcity
    method: GET
- name: jira_integration
  endpoint:
    path: /projects/:id/integrations/jira
    method: PUT
    params:
      url: https://jira.example.com
      password: '{{ dlt.secrets[''jira_password''] }}'
      jira_auth_type: 0
      active: false
- name: matrix_notifications
  endpoint:
    path: /projects/:id/integrations/matrix
    method: PUT
    params:
      token: '{{ dlt.secrets[''matrix_token''] }}'
      room: '!qPKKM111FFKKsfoCVy:matrix.org'
- name: mattermost_notifications
  endpoint:
    path: /projects/:id/integrations/mattermost
    method: PUT
    params:
      webhook: http://mattermost.example.com/hooks/...
- name: pivotal_tracker
  endpoint:
    path: /projects/:id/integrations/pivotaltracker
    method: PUT
    data_selector: settings
    params: {}
- name: pumble_integration
  endpoint:
    path: /projects/:id/integrations/pumble
    method: PUT
    data_selector: parameters
    params:
      webhook: https://api.pumble.com/workspaces/x/...
      branches_to_be_notified: default
      confidential_issues_events: false
      confidential_note_events: false
      issues_events: false
      merge_requests_events: false
      note_events: false
      notify_only_broken_pipelines: false
      pipeline_events: false
      push_events: false
      tag_push_events: false
      wiki_page_events: false
      use_inherited_settings: false
- name: pushover_integration
  endpoint:
    path: /projects/:id/integrations/pushover
    method: PUT
    data_selector: parameters
    params:
      api_key: your_api_key
      user_key: your_user_key
      priority: your_priority
      device: ''
      sound: ''
      use_inherited_settings: false
- name: redmine_integration
  endpoint:
    path: /projects/:id/integrations/redmine
    method: PUT
    data_selector: parameters
    params:
      new_issue_url: url_of_new_issue
      project_url: url_of_project
      issues_url: url_of_issue
      use_inherited_settings: false
- name: slack_integration
  endpoint:
    path: /projects/:id/integrations/slack
    method: PUT
    data_selector: parameters
    params:
      webhook: https://hooks.slack.com/services/...
      username: ''
      channel: ''
      notify_only_broken_pipelines: false
      branches_to_be_notified: default
      labels_to_be_notified: ''
      labels_to_be_notified_behavior: match_any
      alert_channel: ''
      alert_events: false
      commit_events: false
      confidential_issue_channel: ''
      confidential_issues_events: false
      confidential_note_channel: ''
      confidential_note_events: false
      deployment_channel: ''
      deployment_events: false
      incident_channel: ''
      incidents_events: false
      issue_channel: ''
      issues_events: false
      job_events: false
      merge_request_channel: ''
      merge_requests_events: false
      note_channel: ''
      note_events: false
      pipeline_channel: ''
      pipeline_events: false
      push_channel: ''
      push_events: false
      tag_push_channel: ''
      tag_push_events: false
      wiki_page_channel: ''
      wiki_page_events: false
      use_inherited_settings: false
- name: slack_slash_commands
  endpoint:
    path: /projects/:id/integrations/slack-slash-commands
    method: PUT
    data_selector: parameters
    params:
      token: your_slack_token
      use_inherited_settings: false
- name: slack_slash_commands
  endpoint:
    path: /projects/:id/integrations/slack-slash-commands
    method: GET
- name: squash_tm
  endpoint:
    path: /projects/:id/integrations/squash-tm
    method: GET
- name: telegram
  endpoint:
    path: /projects/:id/integrations/telegram
    method: GET
- name: unify_circuit
  endpoint:
    path: /projects/:id/integrations/unify-circuit
    method: GET
- name: webex_teams
  endpoint:
    path: /projects/:id/integrations/webex-teams
    method: GET
- name: youtrack
  endpoint:
    path: /projects/:id/integrations/youtrack
    method: GET
- name: list_project_issue_boards
  endpoint:
    path: /projects/:id/boards
    method: GET
    data_selector: boards
    params: {}
- name: show_single_issue_board
  endpoint:
    path: /projects/:id/boards/:board_id
    method: GET
    data_selector: board
    params: {}
- name: create_issue_board
  endpoint:
    path: /projects/:id/boards
    method: POST
    data_selector: new_board
    params: {}
- name: update_issue_board
  endpoint:
    path: /projects/:id/boards/:board_id
    method: PUT
- name: delete_issue_board
  endpoint:
    path: /projects/:id/boards/:board_id
    method: DELETE
- name: list_board_lists
  endpoint:
    path: /projects/:id/boards/:board_id/lists
    method: GET
- name: show_single_board_list
  endpoint:
    path: /projects/:id/boards/:board_id/lists/:list_id
    method: GET
- name: create_board_list
  endpoint:
    path: /projects/:id/boards/:board_id/lists
    method: POST
- name: list_labels
  endpoint:
    path: /projects/:id/labels
    method: GET
    data_selector: records
    params: {}
- name: get_single_project_label
  endpoint:
    path: /projects/:id/labels/:label_id
    method: GET
    data_selector: record
    params: {}
- name: create_label
  endpoint:
    path: /projects/:id/labels
    method: POST
    data_selector: record
    params: {}
- name: delete_label
  endpoint:
    path: /projects/:id/labels/:label_id
    method: DELETE
    data_selector: record
    params: {}
- name: edit_label
  endpoint:
    path: /projects/:id/labels/:label_id
    method: PUT
    data_selector: record
    params: {}
- name: promote_label
  endpoint:
    path: /projects/:id/labels/:label_id/promote
    method: PUT
    data_selector: id
    params: {}
- name: subscribe_label
  endpoint:
    path: /projects/:id/labels/:label_id/subscribe
    method: POST
    data_selector: id
    params: {}
- name: unsubscribe_label
  endpoint:
    path: /projects/:id/labels/:label_id/unsubscribe
    method: POST
    data_selector: id
    params: {}
- name: upload_file
  endpoint:
    path: /projects/:id/uploads
    method: POST
    data_selector: id
    params: {}
- name: list_uploads
  endpoint:
    path: /projects/:id/uploads
    method: GET
    data_selector: '[]'
    params: {}
- name: download_upload_by_id
  endpoint:
    path: /projects/:id/uploads/:upload_id
    method: GET
    data_selector: ''
    params: {}
- name: download_upload_by_secret
  endpoint:
    path: /projects/:id/uploads/:secret/:filename
    method: GET
    data_selector: ''
    params: {}
- name: delete_upload_by_id
  endpoint:
    path: /projects/:id/uploads/:upload_id
    method: DELETE
    data_selector: ''
    params: {}
- name: delete_upload_by_secret
  endpoint:
    path: /projects/:id/uploads/:secret/:filename
    method: DELETE
    data_selector: ''
    params: {}
- name: list_project_milestones
  endpoint:
    path: /projects/:id/milestones
    method: GET
    data_selector: milestones
    params:
      id: integer or string
- name: get_single_milestone
  endpoint:
    path: /projects/:id/milestones/:milestone_id
    method: GET
    data_selector: milestone
    params:
      id: integer or string
      milestone_id: integer
- name: create_new_milestone
  endpoint:
    path: /projects/:id/milestones
    method: POST
    data_selector: milestone
    params:
      id: integer or string
      title: string
- name: edit_milestone
  endpoint:
    path: /projects/:id/milestones/:milestone_id
    method: PUT
    data_selector: milestone
    params:
      id: integer or string
      milestone_id: integer
- name: delete_project_milestone
  endpoint:
    path: /projects/:id/milestones/:milestone_id
    method: DELETE
    data_selector: success
    params:
      id: integer or string
      milestone_id: integer
- name: get_all_issues_assigned_to_single_milestone
  endpoint:
    path: /projects/:id/milestones/:milestone_id/issues
    method: GET
    data_selector: issues
    params:
      id: integer or string
      milestone_id: integer
- name: get_all_merge_requests_assigned_to_single_milestone
  endpoint:
    path: /projects/:id/milestones/:milestone_id/merge_requests
    method: GET
    data_selector: merge_requests
    params:
      id: integer or string
      milestone_id: integer
- name: promote_project_milestone_to_group_milestone
  endpoint:
    path: /projects/:id/milestones/:milestone_id/promote
    method: POST
    data_selector: success
    params:
      id: integer or string
      milestone_id: integer
- name: get_all_burndown_chart_events_for_single_milestone
  endpoint:
    path: /projects/:id/milestones/:milestone_id/burndown_events
    method: GET
    data_selector: burndown_events
    params:
      id: integer or string
      milestone_id: integer
- name: starred_projects
  endpoint:
    path: /users/:user_id/starred_projects
    method: GET
    data_selector: projects
    params:
      user_id: string
- name: starrers
  endpoint:
    path: /projects/:id/starrers
    method: GET
    data_selector: records
    params:
      id: required
- name: star_project
  endpoint:
    path: /projects/:id/star
    method: POST
    data_selector: records
    params:
      id: required
- name: unstar_project
  endpoint:
    path: /projects/:id/unstar
    method: POST
    data_selector: ''
- name: list_package_protection_rules
  endpoint:
    path: /api/v4/projects/:id/packages/protection/rules
    method: GET
    data_selector: package protection rules
- name: create_package_protection_rule
  endpoint:
    path: /api/v4/projects/:id/packages/protection/rules
    method: POST
    data_selector: created package protection rule
- name: update_package_protection_rule
  endpoint:
    path: /api/v4/projects/:id/packages/protection/rules/:package_protection_rule_id
    method: PATCH
    data_selector: updated package protection rule
- name: delete_package_protection_rule
  endpoint:
    path: /api/v4/projects/:id/packages/protection/rules/:package_protection_rule_id
    method: DELETE
    data_selector: deleted package protection rule
- name: list_protected_tags
  endpoint:
    path: /projects/:id/protected_tags
    method: GET
    data_selector: protected_tags
    params: {}
- name: get_single_protected_tag
  endpoint:
    path: /projects/:id/protected_tags/:name
    method: GET
    data_selector: protected_tag
    params: {}
- name: protect_repository_tags
  endpoint:
    path: /projects/:id/protected_tags
    method: POST
    data_selector: protected_tag
    params: {}
- name: unprotect_repository_tags
  endpoint:
    path: /projects/:id/protected_tags/:name
    method: DELETE
    data_selector: unprotected_tag
    params: {}
- name: project_pull_mirror
  endpoint:
    path: /projects/:id/mirror/pull
    method: GET
    data_selector: mirror
    params: {}
- name: configure_pull_mirror
  endpoint:
    path: /projects/:id/mirror/pull
    method: PUT
    data_selector: configure
    params: {}
- name: start_pull_mirror
  endpoint:
    path: /projects/:id/mirror/pull
    method: POST
    data_selector: start
    params: {}
- name: get_project_push_rule
  endpoint:
    path: /projects/:id/push_rule
    method: GET
    data_selector: push_rule
    params: {}
- name: add_project_push_rule
  endpoint:
    path: /projects/:id/push_rule
    method: POST
    data_selector: push_rule
    params: {}
- name: edit_project_push_rule
  endpoint:
    path: /projects/:id/push_rule
    method: PUT
    data_selector: push_rule
    params: {}
- name: delete_project_push_rule
  endpoint:
    path: /projects/:id/push_rule
    method: DELETE
    data_selector: push_rule
    params: {}
- name: export_relations
  endpoint:
    path: /projects/:id/export_relations
    method: POST
    data_selector: null
    params:
      id: integer/string
      batched: boolean
- name: export_relations_status
  endpoint:
    path: /projects/:id/export_relations/status
    method: GET
    data_selector: null
    params:
      id: integer/string
      relation: string
- name: export_relations_download
  endpoint:
    path: /projects/:id/export_relations/download
    method: GET
    data_selector: null
    params:
      id: integer/string
      relation: string
      batched: boolean
      batch_number: integer
- name: releases
  endpoint:
    path: /projects/:id/releases
    method: GET
    data_selector: '[].tag_name'
    params:
      incremental: released_at
- name: get_release_by_tag
  endpoint:
    path: /projects/:id/releases/:tag_name
    method: GET
    data_selector: '[]._links'
    params: {}
- name: download_release_asset
  endpoint:
    path: /projects/:id/releases/:tag_name/downloads/:direct_asset_path
    method: GET
    data_selector: null
    params: {}
- name: get_latest_release
  endpoint:
    path: /projects/:id/releases/permalink/latest
    method: GET
    data_selector: null
    params: {}
- name: create_release
  endpoint:
    path: /projects/:id/releases
    method: POST
    data_selector: release
    params:
      id: integer/string
      tag_name: string
      name: string
      description: string
      milestones: array of string
- name: collect_release_evidence
  endpoint:
    path: /projects/:id/releases/:tag_name/evidence
    method: POST
    data_selector: evidence
    params:
      id: integer/string
      tag_name: string
- name: update_release
  endpoint:
    path: /projects/:id/releases/:tag_name
    method: PUT
    data_selector: release
    params: {}
- name: delete_release
  endpoint:
    path: /projects/:id/releases/:tag_name
    method: DELETE
    data_selector: release
    params: {}
- name: list_remote_mirrors
  endpoint:
    path: /projects/:id/remote_mirrors
    method: GET
    data_selector: '[]'
- name: get_single_remote_mirror
  endpoint:
    path: /projects/:id/remote_mirrors/:mirror_id
    method: GET
    data_selector: '{}'
- name: get_single_remote_mirror_public_key
  endpoint:
    path: /projects/:id/remote_mirrors/:mirror_id/public_key
    method: GET
    data_selector: '{}'
- name: create_push_mirror
  endpoint:
    path: /projects/:id/remote_mirrors
    method: POST
    data_selector: '{}'
- name: update_remote_mirror
  endpoint:
    path: /projects/:id/remote_mirrors/:mirror_id
    method: PUT
    data_selector: '{}'
- name: force_push_mirror_update
  endpoint:
    path: /projects/:id/remote_mirrors/:mirror_id/sync
    method: POST
    data_selector: '{}'
- name: delete_remote_mirror
  endpoint:
    path: /projects/:id/remote_mirrors/:mirror_id
    method: DELETE
    data_selector: '{}'
- name: project_repository_storage_moves
  endpoint:
    path: /project_repository_storage_moves
    method: GET
    data_selector: records
- name: repository_storage_moves_for_project
  endpoint:
    path: /projects/:project_id/repository_storage_moves
    method: GET
    data_selector: records
    params:
      project_id: integer
- name: single_project_repository_storage_move
  endpoint:
    path: /project_repository_storage_moves/:repository_storage_id
    method: GET
    data_selector: record
    params:
      repository_storage_id: integer
- name: single_repository_storage_move_for_project
  endpoint:
    path: /projects/:project_id/repository_storage_moves/:repository_storage_id
    method: GET
    data_selector: record
    params:
      project_id: integer
      repository_storage_id: integer
- name: schedule_repository_storage_move_for_project
  endpoint:
    path: /projects/:project_id/repository_storage_moves
    method: POST
    data_selector: record
    params:
      project_id: integer
      destination_storage_name: string
- name: schedule_repository_storage_moves_for_all_projects
  endpoint:
    path: /project_repository_storage_moves
    method: POST
    data_selector: message
    params:
      source_storage_name: string
      destination_storage_name: string
- name: security_settings
  endpoint:
    path: /projects/:id/security_settings
    method: GET
    data_selector: security_settings
    params:
      id: integer or string
- name: update_secret_push_protection
  endpoint:
    path: /projects/:id/security_settings
    method: PUT
    data_selector: security_settings
    params:
      id: integer or string
      secret_push_protection_enabled: boolean
- name: list_snippets
  endpoint:
    path: /projects/:id/snippets
    method: GET
    data_selector: snippets
    params:
      id: integer or string
- name: single_snippet
  endpoint:
    path: /projects/:id/snippets/:snippet_id
    method: GET
    data_selector: snippet
    params:
      id: integer or string
      snippet_id: integer
- name: create_snippet
  endpoint:
    path: /projects/:id/snippets
    method: POST
    data_selector: snippet
    params:
      id: integer or string
- name: update_snippet
  endpoint:
    path: /projects/:id/snippets/:snippet_id
    method: PUT
    data_selector: snippet
    params:
      id: integer or string
      snippet_id: integer
- name: delete_snippet
  endpoint:
    path: /projects/:id/snippets/:snippet_id
    method: DELETE
    data_selector: null
    params:
      id: integer or string
      snippet_id: integer
- name: snippet_content
  endpoint:
    path: /projects/:id/snippets/:snippet_id/raw
    method: GET
    data_selector: raw_content
    params:
      id: integer or string
      snippet_id: integer
- name: project_statistics
  endpoint:
    path: /projects/:id/statistics
    method: GET
    data_selector: fetches
    params:
      id: integer or string
- name: get_all_templates
  endpoint:
    path: /projects/:id/templates/:type
    method: GET
    data_selector: ''
- name: get_one_template
  endpoint:
    path: /projects/:id/templates/:type/:name
    method: GET
    data_selector: ''
- name: list_project_vulnerabilities
  endpoint:
    path: /projects/:id/vulnerabilities
    method: GET
    data_selector: vulnerabilities
- name: new_vulnerability
  endpoint:
    path: /projects/:id/vulnerabilities
    method: POST
    params:
      finding_id: <your_finding_id>
- name: list_webhooks
  endpoint:
    path: /projects/:id/hooks
    method: GET
    data_selector: webhooks
    params: {}
- name: get_webhook
  endpoint:
    path: /projects/:id/hooks/:hook_id
    method: GET
    data_selector: webhook
    params: {}
- name: project_webhook_events
  endpoint:
    path: /projects/:id/hooks/:hook_id/events
    method: GET
    data_selector: events
    params:
      hook_id: integer
      id: integer or string
      status: integer or string
      page: integer
      per_page: integer
- name: resend_project_webhook_event
  endpoint:
    path: /projects/:id/hooks/:hook_id/events/:hook_event_id/resend
    method: POST
- name: add_webhook_to_project
  endpoint:
    path: /projects/:id/hooks
    method: POST
- name: edit_project_webhook
  endpoint:
    path: /projects/:id/hooks/:hook_id
    method: PUT
- name: delete_project_webhook
  endpoint:
    path: /projects/:id/hooks/:hook_id
    method: DELETE
- name: trigger_test_project_webhook
  endpoint:
    path: /projects/:id/hooks/:hook_id/test/:trigger
    method: POST
- name: set_custom_header
  endpoint:
    path: /projects/:id/hooks/:hook_id/custom_headers/:key
    method: PUT
- name: delete_custom_header
  endpoint:
    path: /projects/:id/hooks/:hook_id/custom_headers/:key
    method: DELETE
- name: set_url_variable
  endpoint:
    path: /projects/:id/hooks/:hook_id/url_variables/:key
    method: PUT
- name: delete_url_variable
  endpoint:
    path: /projects/:id/hooks/:hook_id/url_variables/:key
    method: DELETE
- name: list_wiki_pages
  endpoint:
    path: /projects/:id/wikis
    method: GET
    data_selector: '[]'
- name: get_wiki_page
  endpoint:
    path: /projects/:id/wikis/:slug
    method: GET
    data_selector: '{}'
- name: create_wiki_page
  endpoint:
    path: /projects/:id/wikis
    method: POST
    data_selector: '{}'
- name: edit_wiki_page
  endpoint:
    path: /projects/:id/wikis/:slug
    method: PUT
    data_selector: '{}'
- name: delete_wiki_page
  endpoint:
    path: /projects/:id/wikis/:slug
    method: DELETE
    data_selector: '{}'
- name: upload_attachment
  endpoint:
    path: /projects/:id/wikis/attachments
    method: POST
    data_selector: '{}'
- name: merge_request_draft_notes
  endpoint:
    path: /projects/:id/merge_requests/:merge_request_iid/draft_notes
    method: GET
    data_selector: ''
    params: {}
- name: single_draft_note
  endpoint:
    path: /projects/:id/merge_requests/:merge_request_iid/draft_notes/:draft_note_id
    method: GET
    data_selector: ''
    params: {}
- name: create_draft_note
  endpoint:
    path: /projects/:id/merge_requests/:merge_request_iid/draft_notes
    method: POST
    data_selector: ''
    params: {}
- name: modify_draft_note
  endpoint:
    path: /projects/:id/merge_requests/:merge_request_iid/draft_notes/:draft_note_id
    method: PUT
    data_selector: ''
    params: {}
- name: delete_draft_note
  endpoint:
    path: /projects/:id/merge_requests/:merge_request_iid/draft_notes/:draft_note_id
    method: DELETE
    data_selector: ''
    params: {}
- name: publish_draft_note
  endpoint:
    path: /projects/:id/merge_requests/:merge_request_iid/draft_notes/:draft_note_id/publish
    method: PUT
    data_selector: draft_note
    params: {}
- name: bulk_publish_draft_notes
  endpoint:
    path: /projects/:id/merge_requests/:merge_request_iid/draft_notes/bulk_publish
    method: POST
    data_selector: draft_notes
    params: {}
- name: list_project_clusters
  endpoint:
    path: /projects/:id/clusters
    method: GET
    data_selector: ''
- name: get_single_project_cluster
  endpoint:
    path: /projects/:id/clusters/:cluster_id
    method: GET
    data_selector: ''
- name: clusters
  endpoint:
    path: /projects/:id/clusters/user
    method: POST
    data_selector: null
    params: {}
- name: edit_project_cluster
  endpoint:
    path: /projects/:id/clusters/:cluster_id
    method: PUT
- name: delete_project_cluster
  endpoint:
    path: /projects/:id/clusters/:cluster_id
    method: DELETE
- name: group_access_tokens
  endpoint:
    path: /groups/:id/access_tokens
    method: GET
- name: group_access_token_details
  endpoint:
    path: /groups/:id/access_tokens/:token_id
    method: GET
- name: create_group_access_token
  endpoint:
    path: /groups/:id/access_tokens
    method: POST
- name: rotate_group_access_token
  endpoint:
    path: /groups/:id/access_tokens/:token_id/rotate
    method: POST
- name: self_rotate_access_token
  endpoint:
    path: /api/v4/groups/<group_id>/access_tokens/self/rotate
    method: POST
    data_selector: null
    params: {}
- name: revoke_access_token
  endpoint:
    path: /groups/:id/access_tokens/:token_id
    method: DELETE
    data_selector: null
    params: {}
- name: issues_count
  endpoint:
    path: /analytics/group_activity/issues_count
    method: GET
    data_selector: issues_count
    params:
      group_path: string
- name: merge_requests_count
  endpoint:
    path: /analytics/group_activity/merge_requests_count
    method: GET
    data_selector: merge_requests_count
    params:
      group_path: string
- name: new_members_count
  endpoint:
    path: /analytics/group_activity/new_members_count
    method: GET
    data_selector: new_members_count
    params:
      group_path: string
- name: list_badges
  endpoint:
    path: /groups/:id/badges
    method: GET
    data_selector: badges
    params:
      id: integer/string
      name: string
- name: get_badge
  endpoint:
    path: /groups/:id/badges/:badge_id
    method: GET
    data_selector: badge
    params:
      id: integer/string
      badge_id: integer
- name: add_badge
  endpoint:
    path: /groups/:id/badges
    method: POST
    data_selector: badge
    params:
      id: integer/string
      link_url: string
      image_url: string
      name: string
- name: edit_badge
  endpoint:
    path: /groups/:id/badges/:badge_id
    method: PUT
    data_selector: badge
    params:
      id: integer/string
      badge_id: integer
      link_url: string
      image_url: string
      name: string
- name: remove_badge
  endpoint:
    path: /groups/:id/badges/:badge_id
    method: DELETE
    data_selector: 'null'
    params:
      id: integer/string
      badge_id: integer
- name: preview_badge
  endpoint:
    path: /groups/:id/badges/render
    method: GET
    data_selector: preview
    params:
      id: integer/string
      link_url: string
      image_url: string
- name: emails_on_push
  endpoint:
    path: /groups/:id/integrations/emails-on-push
    method: PUT
- name: ewm
  endpoint:
    path: /groups/:id/integrations/ewm
    method: PUT
- name: external_wiki
  endpoint:
    path: /groups/:id/integrations/external-wiki
    method: PUT
- name: git_guardian
  endpoint:
    path: /groups/:id/integrations/git-guardian
    method: PUT
- name: github
  endpoint:
    path: /groups/:id/integrations/github
    method: PUT
- name: jira_cloud_app
  endpoint:
    path: /groups/:id/integrations/jira-cloud-app
    method: PUT
- name: list_group_variables
  endpoint:
    path: /groups/:id/variables
    method: GET
    data_selector: variables
    params: {}
- name: show_variable_details
  endpoint:
    path: /groups/:id/variables/:key
    method: GET
    data_selector: variable
    params: {}
- name: create_variable
  endpoint:
    path: /groups/:id/variables
    method: POST
    data_selector: variable
    params: {}
- name: update_variable
  endpoint:
    path: /groups/:id/variables/:key
    method: PUT
    data_selector: variable
    params: {}
- name: remove_variable
  endpoint:
    path: /groups/:id/variables/:key
    method: DELETE
    data_selector: 'null'
    params: {}
- name: list_enterprise_users
  endpoint:
    path: /groups/:id/enterprise_users
    method: GET
    data_selector: records
    params: {}
- name: get_enterprise_user_details
  endpoint:
    path: /groups/:id/enterprise_users/:user_id
    method: GET
    data_selector: records
    params: {}
- name: disable_two_factor_authentication
  endpoint:
    path: /groups/:id/enterprise_users/:user_id/disable_two_factor
    method: PATCH
    data_selector: none
    params: {}
- name: epic_boards
  endpoint:
    path: /groups/:id/epic_boards
    method: GET
    data_selector: records
    params: {}
- name: single_epic_board
  endpoint:
    path: /groups/:id/epic_boards/:board_id
    method: GET
    data_selector: records
    params: {}
- name: epic_board_lists
  endpoint:
    path: /groups/:id/epic_boards/:board_id/lists
    method: GET
    data_selector: records
    params: {}
- name: single_epic_board_list
  endpoint:
    path: /groups/:id/epic_boards/:board_id/lists/:list_id
    method: GET
    data_selector: records
    params: {}
- name: export_group
  endpoint:
    path: /groups/:id/export
    method: POST
    data_selector: message
    params:
      id: integer/string
- name: download_export
  endpoint:
    path: /groups/:id/export/download
    method: GET
    data_selector: exported_archive
    params:
      id: integer/string
- name: import_group
  endpoint:
    path: /groups/import
    method: POST
    data_selector: import_response
    params:
      name: string
      path: string
      file: string
      parent_id: integer
- name: active_integrations
  endpoint:
    path: /groups/:id/integrations
    method: GET
    data_selector: records
- name: asana_integration
  endpoint:
    path: /groups/:id/integrations/asana
    method: PUT
- name: assembla_integration
  endpoint:
    path: /groups/:id/integrations/assembla
    method: PUT
- name: atlassian_bamboo_integration
  endpoint:
    path: /groups/:id/integrations/bamboo
    method: PUT
- name: bugzilla_integration
  endpoint:
    path: /groups/:id/integrations/bugzilla
    method: PUT
- name: buildkite_integration
  endpoint:
    path: /groups/:id/integrations/buildkite
    method: PUT
- name: campfire_integration
  endpoint:
    path: /groups/:id/integrations/campfire
    method: PUT
- name: clickup_integration
  endpoint:
    path: /groups/:id/integrations/clickup
    method: PUT
- name: setup_drone
  endpoint:
    path: /groups/:id/integrations/drone-ci
    method: PUT
    params: {}
- name: disable_drone
  endpoint:
    path: /groups/:id/integrations/drone-ci
    method: DELETE
    params: {}
- name: get_drone_settings
  endpoint:
    path: /groups/:id/integrations/drone-ci
    method: GET
    params: {}
- name: gitlab_slack_application
  endpoint:
    path: /groups/:id/integrations/gitlab-slack-application
    method: PUT
- name: google_chat
  endpoint:
    path: /groups/:id/integrations/hangouts-chat
    method: PUT
- name: google_artifact_management
  endpoint:
    path: /groups/:id/integrations/google-cloud-platform-artifact-registry
    method: PUT
- name: google_cloud_identity_access_management
  endpoint:
    path: /groups/:id/integrations/google-cloud-platform-workload-identity-federation
    method: PUT
- name: harbor
  endpoint:
    path: /groups/:id/integrations/harbor
    method: PUT
    data_selector: settings
    params:
      url: https://demo.goharbor.io
      project_name: testproject
      username: ''
      password: ''
      use_inherited_settings: false
- name: irker
  endpoint:
    path: /groups/:id/integrations/irker
    method: PUT
    data_selector: settings
    params:
      recipients: ''
      default_irc_uri: irc://irc.network.net:6697/
      server_host: localhost
      server_port: 6659
      colorize_messages: false
      use_inherited_settings: false
- name: teamcity
  endpoint:
    path: /groups/:id/integrations/teamcity
    method: PUT
    data_selector: settings
    params:
      teamcity_url: https://teamcity.example.com
      enable_ssl_verification: true
      build_type: ''
      username: ''
      password: ''
      push_events: false
      merge_requests_events: false
      use_inherited_settings: false
- name: jira
  endpoint:
    path: /groups/:id/integrations/jira
    method: PUT
    data_selector: settings
    params:
      url: https://jira.example.com
      api_url: https://jira-api.example.com
      username: ''
      password: ''
      active: false
      jira_auth_type: 0
      jira_issue_prefix: ''
      jira_issue_regex: ''
      jira_issue_transition_automatic: false
      jira_issue_transition_id: ''
      commit_events: false
      merge_requests_events: false
      comment_on_event_enabled: false
      issues_enabled: false
      project_keys: []
      use_inherited_settings: false
- name: matrix
  endpoint:
    path: /groups/:id/integrations/matrix
    method: PUT
    data_selector: settings
    params:
      hostname: https://matrix.org
      token: syt-zyx57W2v1u123ew11
      room: '!qPKKM111FFKKsfoCVy:matrix.org'
      notify_only_broken_pipelines: false
      branches_to_be_notified: default
      push_events: false
      issues_events: false
      confidential_issues_events: false
      merge_requests_events: false
      tag_push_events: false
      note_events: false
      confidential_note_events: false
      pipeline_events: false
      wiki_page_events: false
      use_inherited_settings: false
- name: set_up_phorge
  endpoint:
    path: /groups/:id/integrations/phorge
    method: PUT
    data_selector: parameters
    params: {}
- name: disable_phorge
  endpoint:
    path: /groups/:id/integrations/phorge
    method: DELETE
    data_selector: parameters
    params: {}
- name: get_phorge_settings
  endpoint:
    path: /groups/:id/integrations/phorge
    method: GET
    data_selector: parameters
    params: {}
- name: set_up_redmine
  endpoint:
    path: /groups/:id/integrations/redmine
    method: PUT
    data_selector: null
    params:
      new_issue_url: string
      project_url: string
      issues_url: string
      use_inherited_settings: boolean
- name: disable_redmine
  endpoint:
    path: /groups/:id/integrations/redmine
    method: DELETE
    data_selector: null
    params: {}
- name: get_redmine_settings
  endpoint:
    path: /groups/:id/integrations/redmine
    method: GET
    data_selector: null
    params: {}
- name: set_up_telegram
  endpoint:
    path: /groups/:id/integrations/telegram
    method: PUT
    data_selector: ''
    params:
      token: <your_bot_token>
      room: <unique_identifier>
      push_events: true
      issues_events: true
      confidential_issues_events: true
      merge_requests_events: true
      tag_push_events: true
      note_events: true
      confidential_note_events: true
      pipeline_events: true
      wiki_page_events: true
- name: disable_telegram
  endpoint:
    path: /groups/:id/integrations/telegram
    method: DELETE
    data_selector: ''
- name: get_telegram_settings
  endpoint:
    path: /groups/:id/integrations/telegram
    method: GET
    data_selector: ''
- name: unify_circuit
  endpoint:
    path: /groups/:id/integrations/unify-circuit
    method: PUT
    data_selector: parameters
    params:
      webhook: string
      notify_only_broken_pipelines: boolean
      branches_to_be_notified: string
      push_events: boolean
      issues_events: boolean
      confidential_issues_events: boolean
      merge_requests_events: boolean
      tag_push_events: boolean
      note_events: boolean
      confidential_note_events: boolean
      pipeline_events: boolean
      wiki_page_events: boolean
      use_inherited_settings: boolean
- name: webex_teams
  endpoint:
    path: /groups/:id/integrations/webex-teams
    method: PUT
    data_selector: parameters
    params:
      webhook: string
      notify_only_broken_pipelines: boolean
      branches_to_be_notified: string
      push_events: boolean
      issues_events: boolean
      confidential_issues_events: boolean
      merge_requests_events: boolean
      tag_push_events: boolean
      note_events: boolean
      confidential_note_events: boolean
      pipeline_events: boolean
      wiki_page_events: boolean
      use_inherited_settings: boolean
- name: youtrack
  endpoint:
    path: /groups/:id/integrations/youtrack
    method: PUT
    data_selector: parameters
    params:
      issues_url: string
      project_url: string
      use_inherited_settings: boolean
- name: list_group_issue_boards
  endpoint:
    path: /groups/:id/boards
    method: GET
    data_selector: ''
    params:
      id: ''
- name: single_group_issue_board
  endpoint:
    path: /groups/:id/boards/:board_id
    method: GET
    data_selector: ''
    params:
      id: ''
      board_id: ''
- name: create_group_issue_board
  endpoint:
    path: /groups/:id/boards
    method: POST
    data_selector: ''
    params:
      id: ''
      name: ''
- name: update_group_issue_board
  endpoint:
    path: /groups/:id/boards/:board_id
    method: PUT
    data_selector: null
    params: {}
- name: delete_group_issue_board
  endpoint:
    path: /groups/:id/boards/:board_id
    method: DELETE
    data_selector: null
    params: {}
- name: list_group_issue_board_lists
  endpoint:
    path: /groups/:id/boards/:board_id/lists
    method: GET
    data_selector: null
    params: {}
- name: single_group_issue_board_list
  endpoint:
    path: /groups/:id/boards/:board_id/lists/:list_id
    method: GET
    data_selector: null
    params: {}
- name: new_group_issue_board_list
  endpoint:
    path: /groups/:id/boards/:board_id/lists
    method: POST
    data_selector: null
    params: {}
- name: edit_group_issue_board_list
  endpoint:
    path: /groups/:id/boards/:board_id/lists/:list_id
    method: PUT
    data_selector: null
    params: {}
- name: delete_group_issue_board_list
  endpoint:
    path: /groups/:id/boards/:board_id/lists/:list_id
    method: DELETE
    data_selector: null
    params: {}
- name: group_iterations
  endpoint:
    path: /groups/:id/iterations
    method: GET
    data_selector: '[]'
    params: {}
- name: list_group_labels
  endpoint:
    path: /groups/:id/labels
    method: GET
- name: get_single_group_label
  endpoint:
    path: /groups/:id/labels/:label_id
    method: GET
- name: create_group_label
  endpoint:
    path: /groups/:id/labels
    method: POST
- name: update_group_label
  endpoint:
    path: /groups/:id/labels/:label_id
    method: PUT
- name: delete_group_label
  endpoint:
    path: /groups/:id/labels/:label_id
    method: DELETE
- name: subscribe_to_group_label
  endpoint:
    path: /groups/:id/labels/:label_id/subscribe
    method: POST
- name: unsubscribe_from_group_label
  endpoint:
    path: /groups/:id/labels/:label_id/unsubscribe
    method: POST
- name: list_ldap_group_links
  endpoint:
    path: /groups/:id/ldap_group_links
    method: GET
    data_selector: records
- name: add_ldap_group_link
  endpoint:
    path: /groups/:id/ldap_group_links
    method: POST
    data_selector: records
- name: delete_ldap_group_link
  endpoint:
    path: /groups/:id/ldap_group_links
    method: DELETE
    data_selector: records
- name: list_uploads
  endpoint:
    path: /groups/:id/uploads
    method: GET
    data_selector: uploads
- name: download_upload_by_id
  endpoint:
    path: /groups/:id/uploads/:upload_id
    method: GET
    data_selector: uploaded_file
- name: download_upload_by_secret
  endpoint:
    path: /groups/:id/uploads/:secret/:filename
    method: GET
    data_selector: uploaded_file
- name: delete_upload_by_id
  endpoint:
    path: /groups/:id/uploads/:upload_id
    method: DELETE
    data_selector: response
- name: delete_upload_by_secret
  endpoint:
    path: /groups/:id/uploads/:secret/:filename
    method: DELETE
    data_selector: response
- name: start_migration
  endpoint:
    path: /bulk_imports
    method: POST
    data_selector: entities
    params: {}
- name: list_migrations
  endpoint:
    path: /bulk_imports
    method: GET
    data_selector: migrations
    params: {}
- name: list_migration_entities
  endpoint:
    path: /bulk_imports/entities
    method: GET
    data_selector: entities
    params: {}
- name: migration_details
  endpoint:
    path: /bulk_imports/:id
    method: GET
    data_selector: migration
    params: {}
- name: update_secret_push_protection
  endpoint:
    path: /groups/{id}/security_settings
    method: PUT
    data_selector: secret_push_protection_enabled
    params:
      secret_push_protection_enabled: 'true'
      projects_to_exclude: []
- name: bulk_import_entities
  endpoint:
    path: /bulk_imports/:id/entities
    method: GET
    data_selector: records
    params:
      per_page: number of records to return per page
      page: page to retrieve
      sort: asc or desc
      status: import status
- name: bulk_import_entity_details
  endpoint:
    path: /bulk_imports/:id/entities/:entity_id
    method: GET
    data_selector: entity details
    params: {}
- name: bulk_import_failures
  endpoint:
    path: /bulk_imports/:id/entities/:entity_id/failures
    method: GET
    data_selector: failures
    params: {}
- name: cancel_migration
  endpoint:
    path: /bulk_imports/:id/cancel
    method: POST
    data_selector: cancellation status
    params: {}
- name: list_group_milestones
  endpoint:
    path: /groups/:id/milestones
    method: GET
    data_selector: milestones
    params:
      id: required
- name: get_single_milestone
  endpoint:
    path: /groups/:id/milestones/:milestone_id
    method: GET
    data_selector: milestone
    params:
      id: required
      milestone_id: required
- name: create_new_milestone
  endpoint:
    path: /groups/:id/milestones
    method: POST
    data_selector: milestone
    params:
      id: required
      title: required
- name: edit_milestone
  endpoint:
    path: /groups/:id/milestones/:milestone_id
    method: PUT
    data_selector: milestone
    params:
      id: required
      milestone_id: required
- name: delete_group_milestone
  endpoint:
    path: /groups/:id/milestones/:milestone_id
    method: DELETE
    data_selector: milestone
    params:
      id: required
      milestone_id: required
- name: get_issues_assigned_to_milestone
  endpoint:
    path: /groups/:id/milestones/:milestone_id/issues
    method: GET
    data_selector: issues
    params:
      id: required
      milestone_id: required
- name: get_merge_requests_assigned_to_milestone
  endpoint:
    path: /groups/:id/milestones/:milestone_id/merge_requests
    method: GET
    data_selector: merge_requests
    params:
      id: required
      milestone_id: required
- name: burndown_events
  endpoint:
    path: /groups/:id/milestones/:milestone_id/burndown_events
    method: GET
    params:
      id: integer/string
      milestone_id: integer
- name: placeholder_reassignments
  endpoint:
    path: /groups/:id/placeholder_reassignments
    method: GET
    data_selector: records
    params: {}
- name: reassign_placeholders
  endpoint:
    path: /groups/:id/placeholder_reassignments
    method: POST
    data_selector: message
    params: {}
- name: list_protected_branches
  endpoint:
    path: /groups/:id/protected_branches
    method: GET
    data_selector: '[]'
    params:
      id: integer or string
      search: string
- name: get_single_protected_branch
  endpoint:
    path: /groups/:id/protected_branches/:name
    method: GET
    data_selector: '{}'
    params:
      id: integer or string
      name: string
- name: protect_repository_branch
  endpoint:
    path: /groups/:id/protected_branches
    method: POST
    data_selector: '{}'
    params:
      id: integer or string
      name: string
      allow_force_push: boolean
      allowed_to_merge: array
      allowed_to_push: array
      allowed_to_unprotect: array
      code_owner_approval_required: boolean
      merge_access_level: integer
      push_access_level: integer
      unprotect_access_level: integer
- name: unprotect_repository_branch
  endpoint:
    path: /groups/:id/protected_branches/:name
    method: DELETE
    data_selector: '{}'
    params:
      id: integer or string
      name: string
- name: protected_branch
  endpoint:
    path: /groups/:id/protected_branches/:name
    method: PATCH
    data_selector: push_access_levels
    params: {}
- name: list_group_level_protected_environments
  endpoint:
    path: /groups/:id/protected_environments
    method: GET
    data_selector: '[]'
- name: get_single_protected_environment
  endpoint:
    path: /groups/:id/protected_environments/:name
    method: GET
    data_selector: '{}'
- name: protect_single_environment
  endpoint:
    path: /groups/:id/protected_environments
    method: POST
    data_selector: '{}'
- name: update_protected_environment
  endpoint:
    path: /groups/:id/protected_environments/:name
    method: PUT
    data_selector: '{}'
- name: protected_environments
  endpoint:
    path: /api/v4/groups/:id/protected_environments/:name
    method: DELETE
- name: list_service_accounts
  endpoint:
    path: /groups/:id/service_accounts
    method: GET
    params:
      id: required
- name: create_service_account
  endpoint:
    path: /groups/:id/service_accounts
    method: POST
    params:
      id: required
- name: update_service_account
  endpoint:
    path: /groups/:id/service_accounts/:user_id
    method: PATCH
    params:
      id: required
      user_id: required
- name: delete_service_account
  endpoint:
    path: /groups/:id/service_accounts/:user_id
    method: DELETE
    params:
      id: required
      user_id: required
- name: list_personal_access_tokens
  endpoint:
    path: /groups/:id/service_accounts/:user_id/personal_access_tokens
    method: GET
    params:
      id: required
      user_id: required
- name: create_personal_access_token
  endpoint:
    path: /groups/:id/service_accounts/:user_id/personal_access_tokens
    method: POST
    params:
      scopes: api
      name: service_accounts_token
- name: revoke_personal_access_token
  endpoint:
    path: /groups/:id/service_accounts/:user_id/personal_access_tokens/:token_id
    method: DELETE
    params: {}
- name: rotate_personal_access_token
  endpoint:
    path: /groups/:id/service_accounts/:user_id/personal_access_tokens/:token_id/rotate
    method: POST
    params: {}
- name: get_push_rules
  endpoint:
    path: /groups/:id/push_rule
    method: GET
- name: add_push_rules
  endpoint:
    path: /groups/:id/push_rule
    method: POST
- name: edit_push_rules
  endpoint:
    path: /groups/:id/push_rule
    method: PUT
- name: delete_push_rules
  endpoint:
    path: /groups/:id/push_rule
    method: DELETE
- name: export_relations
  endpoint:
    path: /groups/:id/export_relations
    method: POST
    data_selector: message
    params: {}
- name: export_relations_status
  endpoint:
    path: /groups/:id/export_relations/status
    method: GET
    data_selector: status
    params: {}
- name: export_relations_download
  endpoint:
    path: /groups/:id/export_relations/download
    method: GET
    data_selector: file
    params: {}
- name: releases
  endpoint:
    path: /groups/:id/releases
    method: GET
    data_selector: '[]'
    params:
      id: integer/string
      sort: string
      simple: boolean
- name: group_repository_storage_moves
  endpoint:
    path: /group_repository_storage_moves
    method: GET
    data_selector: records
    params: {}
- name: repository_storage_moves_for_group
  endpoint:
    path: /groups/:group_id/repository_storage_moves
    method: GET
    data_selector: records
    params:
      group_id: integer
- name: single_group_repository_storage_move
  endpoint:
    path: /group_repository_storage_moves/:repository_storage_id
    method: GET
    data_selector: record
    params:
      repository_storage_id: integer
- name: schedule_repository_storage_move_for_group
  endpoint:
    path: /groups/:group_id/repository_storage_moves
    method: POST
    data_selector: record
    params:
      group_id: integer
      destination_storage_name: string
- name: schedule_repository_storage_moves_for_all_groups
  endpoint:
    path: /group_repository_storage_moves
    method: POST
    data_selector: message
    params:
      source_storage_name: string
      destination_storage_name: string
- name: saml_identities
  endpoint:
    path: /groups/:id/saml/identities
    method: GET
    data_selector: ''
    params: {}
- name: single_saml_identity
  endpoint:
    path: /groups/:id/saml/:uid
    method: GET
    data_selector: ''
    params: {}
- name: saml_group_links
  endpoint:
    path: /groups/:id/saml_group_links
    method: GET
    data_selector: ''
    params: {}
- name: single_saml_group_link
  endpoint:
    path: /groups/:id/saml_group_links/:saml_group_name
    method: GET
    data_selector: ''
    params: {}
- name: add_saml_group_link
  endpoint:
    path: /groups/:id/saml_group_links
    method: POST
    data_selector: ''
    params: {}
- name: delete_saml_group_link
  endpoint:
    path: /groups/:id/saml_group_links/:saml_group_name
    method: DELETE
    data_selector: ''
    params: {}
- name: get_scim_identities
  endpoint:
    path: /groups/:id/scim/identities
    method: GET
    data_selector: '[]'
- name: get_single_scim_identity
  endpoint:
    path: /groups/:id/scim/:uid
    method: GET
    data_selector: '{}'
- name: update_extern_uid
  endpoint:
    path: /groups/:groups_id/scim/:uid
    method: PATCH
    data_selector: '{}'
- name: delete_single_scim_identity
  endpoint:
    path: /groups/:id/scim/:uid
    method: DELETE
    data_selector: '{}'
- name: comments
  endpoint:
    path: /comments
    method: GET
    data_selector: comments
    params: {}
- name: merge_requests
  endpoint:
    path: /merge_requests
    method: GET
    data_selector: merge_requests
    params: {}
- name: issues
  endpoint:
    path: /issues
    method: GET
    data_selector: issues
    params: {}
- name: ssh_certificates
  endpoint:
    path: /groups/:id/ssh_certificates
    method: GET
    data_selector: results
    params:
      id: integer
- name: create_ssh_certificate
  endpoint:
    path: /groups/:id/ssh_certificates
    method: POST
    data_selector: result
    params:
      id: integer
      key: string
      title: string
- name: delete_ssh_certificate
  endpoint:
    path: /groups/:id/ssh_certificate/:id
    method: DELETE
    data_selector: result
    params:
      id: integer
- name: list_group_hooks
  endpoint:
    path: /groups/:id/hooks
    method: GET
    data_selector: '[]'
- name: get_group_hook
  endpoint:
    path: /groups/:id/hooks/:hook_id
    method: GET
    data_selector: '{}'
- name: group_hook_events
  endpoint:
    path: /groups/:id/hooks/:hook_id/events
    method: GET
    data_selector: events
    params:
      page: 1
- name: resend_group_hook_event
  endpoint:
    path: /groups/:id/hooks/:hook_id/events/:hook_event_id/resend
    method: POST
- name: add_group_hook
  endpoint:
    path: /groups/:id/hooks
    method: POST
- name: edit_group_hook
  endpoint:
    path: /groups/:id/hooks/:hook_id
    method: PUT
- name: delete_group_hook
  endpoint:
    path: /groups/:id/hooks/:hook_id
    method: DELETE
- name: trigger_test_group_hook
  endpoint:
    path: /groups/:id/hooks/:hook_id/test/:trigger
    method: POST
- name: set_custom_header
  endpoint:
    path: /groups/:id/hooks/:hook_id/custom_headers/:key
    method: PUT
- name: delete_custom_header
  endpoint:
    path: /groups/:id/hooks/:hook_id/custom_headers/:key
    method: DELETE
- name: set_url_variable
  endpoint:
    path: /groups/:id/hooks/:hook_id/url_variables/:key
    method: PUT
- name: delete_url_variable
  endpoint:
    path: /groups/:id/hooks/:hook_id/url_variables/:key
    method: DELETE
- name: new_feature
  endpoint:
    path: /foo/new_feature_endpoint
    method: POST
    data_selector: records
- name: duo_chat
  endpoint:
    path: /foo/duo_chat
    method: POST
    data_selector: records
- name: list_wiki_pages
  endpoint:
    path: /groups/:id/wikis
    method: GET
    data_selector: content
    params:
      with_content: '1'
- name: get_wiki_page
  endpoint:
    path: /groups/:id/wikis/:slug
    method: GET
    data_selector: content
    params: {}
- name: create_wiki_page
  endpoint:
    path: /projects/:id/wikis
    method: POST
    data_selector: content
    params: {}
- name: edit_wiki_page
  endpoint:
    path: /groups/:id/wikis/:slug
    method: PUT
    data_selector: content
    params: {}
- name: delete_wiki_page
  endpoint:
    path: /groups/:id/wikis/:slug
    method: DELETE
    data_selector: ''
    params: {}
- name: upload_attachment
  endpoint:
    path: /groups/:id/wikis/attachments
    method: POST
    data_selector: file_name
    params: {}
- name: features
  endpoint:
    path: /features
    method: GET
    data_selector: features
- name: feature_definitions
  endpoint:
    path: /features/definitions
    method: GET
    data_selector: feature_definitions
- name: set_create_feature
  endpoint:
    path: /features/:name
    method: POST
    data_selector: feature
- name: delete_feature
  endpoint:
    path: /features/:name
    method: DELETE
- name: session
  endpoint:
    path: /session
    method: GET
- name: aiAction
  endpoint:
    path: /aiAction
    method: POST
    data_selector: clientMutationId
- name: aiCompletionResponse
  endpoint:
    path: /aiCompletionResponse
    method: SUBSCRIPTION
    data_selector: content
- name: new_feature
  endpoint:
    path: /foo/new_feature_endpoint
    method: GET
- name: merge_request
  endpoint:
    path: /merge_requests
    method: GET
    data_selector: merge_requests
    params: {}
- name: contacts
  endpoint:
    path: /add_contacts
    method: POST
    data_selector: contacts
    params: {}
- name: organizations
  endpoint:
    path: /organizations
    method: GET
    data_selector: organizations
    params: {}
- name: objectives
  endpoint:
    path: /api/v4/projects/:id/objectives
    method: GET
    data_selector: objectives
    params: {}
- name: key_results
  endpoint:
    path: /api/v4/projects/:id/key_results
    method: GET
    data_selector: key_results
    params: {}
- name: saas_feature
  endpoint:
    path: /ee/config/saas_features
    method: GET
    data_selector: features
    params: {}
- name: saas_feature
  endpoint:
    path: /ee/config/saas_features
    method: GET
    data_selector: features
    params: {}
- name: feature_flag
  endpoint:
    path: /config/feature_flags
    method: GET
    data_selector: feature_flags
    params: {}
- name: feature_flags
  endpoint:
    path: /feature_flags
    method: GET
    data_selector: flags
    params: {}
- name: IssuePolicy
  endpoint:
    path: /policy/debug
    method: GET
    data_selector: rules
    params: {}
- name: FooPolicy
  endpoint:
    path: /policy/conditions
    method: GET
    data_selector: conditions
    params: {}
- name: ParentPolicy
  endpoint:
    path: /policy/abilities
    method: GET
    data_selector: abilities
    params: {}
- name: ChildPolicy
  endpoint:
    path: /policy/overrides
    method: GET
    data_selector: overrides
    params: {}
- name: community_contributions
  endpoint:
    path: /issues
    method: GET
    data_selector: issues
    params:
      label: ~"Seeking community contributions"
- name: stewardship
  endpoint:
    path: /issues
    method: GET
    data_selector: issues
    params:
      label: ~"stewardship"
- name: technical_debt
  endpoint:
    path: /issues
    method: GET
    data_selector: issues
    params:
      label: ~"technical debt"
- name: deferred_ux
  endpoint:
    path: /issues
    method: GET
    data_selector: issues
    params:
      label: ~"Deferred UX"
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
- name: merge_requests
  endpoint:
    path: /projects/:id/merge_requests/:iid/pipelines
    method: POST
    data_selector: performance_bar
    params:
      performance_bar: memory
- name: merge_request_codequality_mr_diff_reports
  endpoint:
    path: /projects/:id/merge_requests/:merge_request_iid/codequality_mr_diff_reports.json
    method: GET
    data_selector: files
- name: merge_request_codequality_reports
  endpoint:
    path: /projects/:id/merge_requests/:merge_request_iid/codequality_reports.json
    method: GET
    data_selector: status
- name: service_response
  endpoint:
    path: /services/data/vXX.X/sobjects/ServiceResponse
    method: GET
    data_selector: records
    params: {}
- name: file_storage
  endpoint:
    path: /uploads
    method: GET
    data_selector: files
    params: {}
- name: object_storage
  endpoint:
    path: /object_storage
    method: GET
    data_selector: objects
    params: {}
- name: web_hooks
  endpoint:
    path: /web_hooks
    method: POST
    data_selector: payload
- name: web_hooks
  endpoint:
    path: /web_hooks
    method: POST
    data_selector: payload
    params: {}
- name: web_hooks
  endpoint:
    path: /api/v4/projects/:id/hooks
    method: POST
    data_selector: webhook
    params: {}
- name: list_instance_clusters
  endpoint:
    path: /admin/clusters
    method: GET
    data_selector: '[]'
- name: get_single_instance_cluster
  endpoint:
    path: /admin/clusters/:cluster_id
    method: GET
    data_selector: '{}'
- name: add_existing_instance_cluster
  endpoint:
    path: /admin/clusters/add
    method: POST
    data_selector: '{}'
- name: edit_instance_cluster
  endpoint:
    path: /admin/clusters/:cluster_id
    method: PUT
    data_selector: null
    params:
      cluster_id: integer
- name: delete_instance_cluster
  endpoint:
    path: /admin/clusters/:cluster_id
    method: DELETE
    data_selector: null
    params:
      cluster_id: integer
- name: get_security_policy_settings
  endpoint:
    path: /admin/security/compliance_policy_settings
    method: GET
    data_selector: csp_namespace_id
- name: update_security_policy_settings
  endpoint:
    path: /admin/security/compliance_policy_settings
    method: PUT
    data_selector: csp_namespace_id
- name: groups
  endpoint:
    path: /groups
    method: GET
    data_selector: groups
    params: {}
- name: projects
  endpoint:
    path: /projects
    method: GET
    data_selector: projects
    params: {}
- name: labels
  endpoint:
    path: /labels
    method: GET
    data_selector: labels
    params: {}
- name: iterations
  endpoint:
    path: /iterations
    method: GET
    data_selector: iterations
    params: {}
- name: epic_board
  endpoint:
    path: /epic_boards
    method: POST
    data_selector: epic
    params:
      title: Release Planning
- name: create_epic
  endpoint:
    path: /epics
    method: POST
    data_selector: epic
    params:
      title: When using the application, I need to create an account, so that I can
        use the application features.
- name: create_issue_email
  endpoint:
    path: /issues
    method: POST
    data_selector: issue
    params:
      title: When creating my account, I need to specify my email address so that
        I can receive future updates from the application
- name: create_issue_password
  endpoint:
    path: /issues
    method: POST
    data_selector: issue
    params:
      title: When creating my account, I need to specify a password so that my account
        remains secure
- name: create_issue_finalize
  endpoint:
    path: /issues
    method: POST
    data_selector: issue
    params:
      title: When creating my account and entering the required information, I need
        to finalize creating my account so that I can sign in
- name: Backlog
  endpoint:
    path: /issues
    method: GET
    data_selector: issues
    params: {}
- name: Current Sprint
  endpoint:
    path: /issues
    method: GET
    data_selector: issues
    params: {}
- name: kanban_board
  endpoint:
    path: /issue_boards
    method: GET
    data_selector: boards
    params: {}
- name: value_stream_analytics
  endpoint:
    path: /value_streams
    method: GET
    data_selector: value_streams
    params: {}
- name: work_items
  endpoint:
    path: /work_items
    method: GET
    data_selector: work_items
- name: reserved_project_names
  endpoint:
    path: /reserved/project_names
    method: GET
    data_selector: names
    params: {}
- name: reserved_group_names
  endpoint:
    path: /reserved/group_names
    method: GET
    data_selector: names
    params: {}
notes:
- You cannot set an environment tier using the UI.
- You cannot rename an environment.
- GitLab.com provides instance runners for you.
- Older articles and videos may not reflect the state of the latest GitLab release.
- Features behind default-disabled feature flags are not recommended for use in a
  production environment.
- Security issues found in features that are disabled by default are patched in regular
  releases.
- Features behind default-disabled feature flags are not recommended for use in a
  production environment and problems caused by using a default disabled features
  aren’t covered by GitLab Support.
- When the feature is ready, GitLab removes the feature flag, and the option for enabling
  and disabling it no longer exists.
- The GitLab Pages daemon must be configured before users can access this feature.
- Multiple wildcards for one instance is not supported. Only one wildcard per instance
  can be assigned.
- 'GitLab Pages supports only one URL scheme at a time: wildcard domains or single-domain
  sites.'
- If you enable namespace_in_path, existing GitLab Pages websites are accessible only
  as single-domain sites.
- If https:// is used, additional configuration is required.
- Most of these settings don’t have to be configured manually unless you need more
  granular control.
- Custom domains supported, but no TLS.
- Disabling domain verification is unsafe and can lead to various vulnerabilities.
- Your instance must use the Linux package installation method.
- The certificate must specify the hostname or IP address as a Subject Alternative
  Name.
- The full certificate chain is required, including the end-user certificate, intermediate
  certificates, and the root certificate, in that order.
- If you used a custom Certificate Authority (CA), you must copy the root CA certificate
  to /etc/gitlab/ssl.
- You must have administrator access to the instance.
- Object storage is the preferred configuration for most environments.
- You should strongly consider running GitLab Pages under a different hostname than
  GitLab to prevent XSS attacks.
- Subsequent pipelines can use the cache.
- Subsequent jobs in the same pipeline can use the cache, if the dependencies are
  identical.
- Different projects cannot share the cache.
- By default, protected and non-protected branches do not share the cache. However,
  you can change this behavior.
- By default, npm stores cache data in the home folder (`~/.npm`). However, you can’t
  cache things outside of the project directory.
- If you’re using Yarn, you can use `yarn-offline-mirror` to cache the zipped `node_modules`
  tarballs.
- Subsequent jobs can use the cache if the dependencies are identical.
- Caching is an optimization, but it isn’t guaranteed to always work.
- If you use cache and artifacts to store the same path in your jobs, the cache might
  be overwritten because caches are restored before artifacts.
- If you have a cache mismatch, follow these steps to troubleshoot.
- Make sure you clear some space to allow new caches to be stored. There’s no automatic
  way to do this.
- Some characters cannot be used in environment names.
- Due to resource limitations, a background worker for stopping environments runs
  only once every hour.
- Active environments that haven’t been updated after the specified date are stopped.
- Protected environments are ignored and not stopped.
- 'Auto Rollback is turned off by default. To turn it on: On the left sidebar, select
  Search or go to and find your project. Select Settings > CI/CD. Expand Automatic
  deployment rollbacks. Select the checkbox for Enable automatic rollbacks. Select
  Save changes.'
- Use a dedicated project for identity management, separate from resources and CI/CD
  projects.
- The 'attribute-mapping' parameter must map OIDC custom claims to IAM attributes.
- These claims are a superset of the ID token claims.
- All values are of type string.
- ID tokens support cloud providers with OIDC, including AWS, Azure, GCP, HashiCorp
  Vault.
- Removes the need to store secrets in your GitLab group or project.
- You can’t register a runner and its Docker executor without defining a default image
  in config.toml
- The image defined in config.toml can be used when none is defined in .gitlab-ci.yml
- To use this networking mode, enable FF_NETWORK_PER_BUILD in either the feature flag
  or the environment variable in the config.toml.
- This feature works only when the Docker daemon is configured with IPv6 enabled.
- The Docker executor requires a default image defined in config.toml.
- Docker Engine API v1.25 is required.
- Exposes /dev/bus/usb to build containers.
- The Docker executor requires a default image to be defined in config.toml.
- Only images from an internal registry may access the host devices
- The Docker executor uses Docker Engine API v1.25 to talk to the Docker Engine.
- Minimum supported version of Docker on a Linux server is 1.13.0.
- Unlike Docker, Podman enforces SELinux policies by default. While many pipelines
  run without issues, some may fail due to SELinux context inheritance when tools
  use temporary directories.
- Use local images but also pull images if a local image does not exist.
- Reduce time that runners analyze the difference in image layers for heavy and rarely
  updated images.
- Local images must contain an installed Docker Engine and a local copy of used images.
- To control the images used by runner users.
- For private runners that are dedicated to a project that can only use specific images
  that are not publicly available on any registries.
- The existing pull_policy keyword must include at least one pull policy specified
  in allowed_pull_policies.
- Known issue with source directory when passing --docker-volumes or DOCKER_VOLUMES
  environment variable.
- In GitLab 17.9 and later, the build image must have the ca-certificates package
  installed.
- Generally it’s unsafe to run jobs with shell executors. The jobs are run with the
  user’s permissions and can 'steal' code from other projects that are run on this
  server.
- Specify resource_group to ensure deployment jobs do not run concurrently.
- You can add only one resource to a resource group.
- Specify resource_group keyword to the concurrency sensitive job.
- 'Sometimes, a job hangs with the message `Waiting for resource: <resource_group>`'
- If you can’t resolve your issue with the solutions above, you might be encountering
  a known race condition issue.
- Ensure your Vault server is running on version 1.2.0 or later.
- The kv-v2 secrets engine is the default engine GitLab Runner uses when no engine
  type is explicitly specified.
- 'When the Vault server is using a self-signed certificate, you see the following
  error in the job logs: ERROR: Job failed (system failure): resolving secrets: initializing
  Vault service: preparing authenticated client: checking Vault server health.'
- If you are running vault server in development mode locally with GitLab Development
  Kit (GDK), you might also get this error.
- Logs generated by applications running in service containers can be captured for
  subsequent examination and debugging.
- To enable service logging, add the CI_DEBUG_SERVICES variable to the project’s .gitlab-ci.yml
  file.
- Enabling CI_DEBUG_SERVICES might reveal masked variables.
- A pipeline trigger token impersonates a user’s project access and permissions.
- Use of tokens in plain text in public projects is a security risk.
- You must have at least the Developer role for the project.
- The project is configured to use a slash command integration.
- Public SSH keys must be unique to GitLab because they bind to your account.
- Administrators can view expiration dates and use them for guidance when deleting
  keys.
- GitLab checks all SSH keys at 01:00 AM UTC every day. It emails an expiration notice
  for all SSH keys that are scheduled to expire seven days from now.
- GitLab checks all SSH keys at 02:00 AM UTC every day. It emails an expiration notice
  for all SSH keys that expire on the current date.
- The SSH key generated in WSL is not directly available for Git for Windows, and
  vice versa, as both have a different home directory.
- If you’re running Windows 11 and using OpenSSH for Windows, ensure the HOME environment
  variable is set correctly. Otherwise, your private SSH key might not be found.
- Custom configurations for SSH on the GitLab server are explicitly not supported
  and may stop working at any time.
- Be mindful of inherited permissions for groups and subgroups.
- Test your upgrade in a test environment before updating your production instance.
- Consult changes for different versions of GitLab to ensure compatibility before
  upgrading.
- The pipeline editor is the primary place to edit the GitLab CI/CD configuration
  in the .gitlab-ci.yml file in the root of your repository.
- When using a self-signed certificate, you might encounter SSL certificate errors.
- Initialize the repository by pushing a test file to configure the integration.
- Inputs provide typed parameters for reusable templates with built-in validation
  at pipeline creation time.
- Inputs are mandatory if default is not specified.
- A string containing an input must be less than 1 MB.
- A string inside an input must be less than 1 KB.
- You must ensure that expressions remain properly formatted after input values are
  inserted into the configuration.
- The default values of the GitLab custom resource are not intended for production
  use
- For production deployments, you must follow the Cloud Native Hybrid reference architectures
- GitLab does not support any issues related to PostgreSQL, Redis, Gitaly, Praefect,
  or MinIO deployed inside of a Kubernetes Cluster
- GitLab Operator does not support migration from GitLab Chart or Linux package to
  GitLab Operator
- Git over SSH with OpenShift routes is not supported
- GKE workload identity and IAM service accounts to authenticate workloads to other
  cloud APIs are not supported
- This experimental feature is still in active development and might have breaking
  changes at any time.
- Expressions are evaluated just prior to step execution in the job environment.
- Environment variable names can only use alphanumeric characters and underscores,
  and must not start with a number.
- Steps only have access to a subset of environment variables from the runner environment.
- Any dependency required by the executing step should also be installed by the step.
- Steps must have a name consisting only of alphanumeric characters and underscores,
  and must not start with a number.
- Outputs are written to the ${{output_file}} file provided at run time in JSON Line
  format.
- This document lists the configuration options for the GitLab .gitlab-ci.yml file.
- When you are editing your .gitlab-ci.yml file, you can validate it with the CI Lint
  tool.
- Global defaults are not passed to downstream pipelines, which run independently
  of the upstream pipeline that triggered the downstream pipeline.
- The time limit to resolve all files is 30 seconds.
- Inputs are mandatory unless you use spec:inputs:default to set a default value.
- A string containing an interpolation block must not exceed 1 MB.
- The string inside an interpolation block must not exceed 1 KB.
- The job's 'after_script' commands run in a new shell.
- 'Using ''allow_failure: true'' allows the pipeline to continue running if a job
  fails.'
- You cannot use job variables as values for global keywords like include.
- Use the CI Lint tool to validate your .gitlab-ci.yml file.
- Globally-defined image, services, cache, before_script, and after_script globally
  is deprecated.
- Using only and except are deprecated and not being actively developed.
- 'Scheduled pipelines run on specific branches, so jobs configured with only: branches
  run on scheduled pipelines too.'
- only:variables and except:variables are deprecated and not being actively developed.
- only:changes and except:changes are deprecated and not being actively developed.
- only:kubernetes and except:kubernetes are deprecated and not being actively developed.
- Pipelines can run automatically for specific events, like when pushing to a branch,
  creating a merge request, or on a schedule.
- When a user deletes their GitLab.com account, the deletion does not occur for seven
  days.
- During this period, any pipeline subscriptions created by that user continue to
  run with the user’s original permissions.
- To prevent unauthorized pipeline executions, immediately update pipeline subscription
  settings for the deleted user.
- Jobs are configured in the .gitlab-ci.yml file with a list of commands to execute
  to accomplish tasks like building, testing, or deploying code.
- You must have at least the Maintainer role for force canceling a job.
- You can find the reason for a failed pipeline in the pipeline graph, pipeline widgets,
  or job views.
- GitLab Duo Root Cause Analysis can be used to troubleshoot failed CI/CD jobs.
- Avoid hard-coding instance or project-specific values
- Avoid using global keywords in a component
- Use components to create a small part of a larger pipeline, or even to compose a
  complete pipeline configuration.
- Components published to the CI/CD catalog use both the description and avatar when
  displaying the component project’s summary.
- Avoid using hardcoded values in CI/CD components.
- Use inputs instead of variables to configure components.
- Set the project as a catalog project to make it visible in the CI/CD catalog.
- Components created and maintained by a user verified by an administrator.
- Carefully review components before using them in your project.
- Sensitive variables containing values like secrets or keys should be added in the
  UI.
- Projects can have a maximum of 8000 CI/CD variables.
- Groups can have a maximum of 30000 CI/CD variables.
- Variables could be accidentally exposed in a job log, or maliciously sent to a third
  party server.
- Masking a CI/CD variable is not a guaranteed way to prevent malicious users from
  accessing variable values.
- You must have the Developer role in the project to specify a pipeline variable.
- You must have the Maintainer role in the project to limit the use of pipeline variables.
- Secrets management is the systems that developers use to securely store sensitive
  data in a secure environment with strict access controls.
- Sensitive data should be stored in a secrets management solution.
- Uses pipeline editor for editing .gitlab-ci.yml
- CI/CD configuration visualization is available
- A CI/CD pipeline must run and be successful before merge
- If you don’t use pipelines for your project, then you should disable Pipelines must
  succeed so you can accept merge requests
- 'If your merge request is stuck with a Checking ability to merge automatically message
  that does not disappear after a few minutes, you can try one of these workarounds:
  Refresh the merge request page, Close & Re-Open the merge request, Rebase the merge
  request with the /rebase quick action, If you have already confirmed the merge request
  is ready to be merged, you can merge it with the /merge quick action'
- This issue is resolved in GitLab 15.5
- After the pipeline is created, the message updates with the pipeline status
- The latest pipeline was deleted (this is a known issue)
- The source branch of the merge request is on a private fork
- Users must also have the permission to run CI/CD jobs in the same projects
- 'To reduce the configuration size, you can: Check the length of the expanded CI/CD
  configuration in the pipeline editor’s Full configuration tab, Look for duplicated
  configuration that can be removed or simplified, Move long or repeated script sections
  into standalone scripts in the project, Use parent and child pipelines to move some
  work to jobs in an independent child pipeline'
- On GitLab Self-Managed, you can increase the size limits
- Ensure that included configuration files do not create a loop of references to each
  other
- 'These errors can happen if the following are both true: The Limit access to this
  project option is enabled in the private project hosting the image, The job attempting
  to fetch the image is running in a project that is not listed in the private project’s
  allowlist'
- These errors might also happen when trying to use a project access token to access
  images in another project
- Backward compatibility is guaranteed between minor version updates.
- GitLab Runner can be installed and registered on all GitLab installations.
- Auto DevOps runs pipelines automatically only if a Dockerfile or matching buildpack
  exists.
- You must have at least the Maintainer role for the project to enable Auto DevOps.
- Uses GitLab CI/CD to test changes included in a feature branch
- Some known issues exist.
- The manual connection method required for GitHub Enterprise does not support external
  pull requests.
- Pull requests from fork repositories are ignored.
- Namespaces with a period (.) cause issues with SSL certificate validation and the
  source path when publishing Terraform modules.
- If the user who scheduled the group deletion loses access to the group, the deletion
  job will instead restore and unarchive the group.
- If the user who scheduled the group deletion regains Owner role or administrator
  access before the job runs, then the job removes the group permanently.
- The display of group members’ Source might be inconsistent.
- You must have the Owner role to remove a member from the group.
- The member must have direct membership in the group.
- Domain verification is required for GitLab.com users to be marked as enterprise
  users.
- DNS propagation can take up to 24 hours, although it’s usually a couple of minutes
  to complete.
- By default, you are signed out of GitLab after seven days (10080 minutes) of inactivity
  or until you close your browser window, whichever comes first.
- GitLab administrators can change this default.
- To remain signed in indefinitely, select the Remember me checkbox on the GitLab
  sign-in page.
- In GitLab 16.3 and later, Go limits RSA keys to a maximum of 8192 bits.
- Ensure that your SSH key format is compatible with your server OS configuration.
  For example, ED25519 key pairs might not work on some FIPS systems.
- All settings are publicly available, as Kubernetes configuration or Chef cookbooks.
- On GitLab.com, top-level group creation is not available through the API. It must
  be performed through the UI.
- Groups are permanently deleted after a seven-day delay.
- Projects are permanently deleted after a seven-day delay.
- If you receive a `403 Forbidden` error for all requests to GitLab.com, check for
  any automated processes that may be triggering a block.
- GitLab.com responds with HTTP status code `403` for 15 minutes when a single IP
  address sends 300 failed authentication requests in a 1-minute period.
- User and IP rate limits includes a list of the headers responded to blocked requests.
- Subscription data is automatically synchronized once a day.
- The data is sent securely through an encrypted HTTPS connection.
- Subscription data synchronization occurs daily at approximately 3:00 AM (UTC).
- Manual synchronization can be initiated from the Admin section.
- A user can belong to two different top-level groups with different subscriptions.
- Free Guest users do not consume a seat in the Ultimate tier.
- GitLab Dedicated is a single-tenant SaaS solution that is fully isolated and deployed
  in your preferred AWS cloud region.
- Usage limits apply to Premium and Ultimate customers’ use of the included Code Suggestions
  and GitLab Duo Chat features.
- 30 days prior notice before enforcement of limits.
- To install extensions, PostgreSQL requires the user to have superuser privileges.
- Regular database migrations cannot be used in installing extensions and instead,
  extensions have to be installed manually prior to upgrading GitLab to a newer version.
- The more performant and/or resilient you want your environment to be, the more complex
  it is.
- Large monorepos can significantly impact the performance of Git and the environment
  itself.
- Optimize the large monorepo using features such as LFS to not store binaries.
- When the monorepo is significantly large (20 gigabytes or more), further additional
  strategies may be required.
- Network and disk bandwidth is another potential consideration with large monorepos.
- No swap is not recommended in the reference architectures as it impacts performance
  greatly.
- Updated notes on Load Balancers to be more reflective that any reputable offering
  is expected to work.
- Expanded details on what each Reference Architecture is designed for, the testing
  methodology used and added details on how to scale environments.
- Added more expanded notes throughout to warn about the use of Large Monorepos and
  their impacts for increased awareness.
- Recommended practices to secure your GitLab instance.
- Test your upgrade in a test environment first, and have a rollback plan to reduce
  the risk of unplanned outages and extended downtime.
- If available in your starting version, consider turning on maintenance mode during
  the upgrade.
- 2FA makes it harder for an unauthorized person to access an account because they
  would need both factors.
- If you are using an external provider to sign in into GitLab, this setting will
  not enforce 2FA for users.
- Users can view only events based on their individual actions.
- Guests can only view events based on their individual actions.
- Personal namespace owners are displayed as having the Maintainer role on projects
  in the namespace.
- Non-members can only view models and versions in public projects with the Everyone
  with access visibility level.
- Non-members can’t view internal projects, even if they’re logged in.
- Guest users can only set metadata when creating an issue. They cannot change the
  metadata on existing issues.
- Guest users can close and reopen issues that they authored or are assigned to.
- Guest users can archive and reopen issues that they authored or are assigned to.
- On GitLab Self-Managed, users with the Guest role are able to perform actions only
  on public and internal projects (not on private projects).
- External users must be given explicit access (at least the Reporter role) even if
  the project is internal.
- Users with the Guest role on GitLab.com are only able to perform actions on public
  projects.
- Users with the Minimal Access role do not automatically have access to projects
  and subgroups in that top-level group.
- Owners must explicitly add these users to the specific subgroups and projects.
- The availability of SHA-256 hashing is controlled by a feature flag.
- OAuth 2.0 client ID and client secret required from GitHub
- Ensure the authorization callback URL includes /users/auth
- GitLab requires a significant amount of memory when running with all features enabled.
- With some adjustments, GitLab can run comfortably on much lower specifications than
  described in minimum requirements.
- You may experience unexpected degradation of both product functionality and performance.
- A general guideline is to configure swap to be around 50% of the available memory.
- Using swap allows the application to run and function normally, and use swap only
  from time to time.
- When memory consumption is the primary concern, install GitLab CE.
- A secondary site performs different type of synchronizations against the primary
  site, using a special authorization protected by JWT.
- Pushing directly to a secondary site redirects the request to the primary site instead
  of handling it directly.
- The primary site has to be online for OAuth login to happen.
- Real-time updates of issues/merge requests does not work on secondary sites where
  http proxying is disabled.
- Selective synchronization only limits what repositories and files are replicated.
- Pages access control does not work on secondaries.
- Disaster recovery for deployments with multiple secondary sites causes downtime
  due to re-initialization of PostgreSQL streaming replication.
- Secondary sites must use the same port as the primary for Git over SSH.
- Git push over SSH against a secondary site does not work for pushes over 1.86 GB.
- Backups cannot be run on Geo secondary sites.
- Git push with options over SSH against a secondary site does not work and terminates
  the connection.
- The Geo secondary site does not accelerate the clone request for the first stage
  of the pipeline in most cases.
- When a single Git repository receives pushes at a high rate, the secondary site’s
  local copy can be perpetually out-of-date.
- Proxying is implemented only in the GitLab application in the Puma service or Web
  service.
- GitLab container registry should be configured to use a separate domain.
- With a unified URL, Let’s Encrypt can’t generate certificates unless it can reach
  both IPs through the same domain.
- When a secondary site uses a separate URL from the primary site, signing in using
  SAML is only supported if the SAML Identity Provider allows multiple callback URLs.
- Git clone and fetch requests with option --depth over SSH against a secondary site
  does not work and hangs indefinitely if the secondary site is not up to date.
- Failures during a backfill are scheduled to be retried at the end of the backfill.
- Enforce two-factor authentication (2FA) for all users.
- Create personal access tokens. When you use 2FA, you can use these tokens to access
  the GitLab API.
- Rate limits prevent denial-of-service or brute-force attacks.
- IP blocks usually happen when GitLab.com receives unusual traffic from a single
  IP address.
- It is recommended to keep a copy of your configuration and certificates in a safe
  place, that’s separate from your GitLab application backups.
- If those files are lost, 2FA users will lose access to their GitLab account and
  ‘secure variables’ will be lost from CI configurations.
- Make sure that /secret/gitlab/backups/ exists.
- Your machines SSH host keys are stored in a separate location at /etc/ssh/. Be sure
  to also backup and restore those keys to avoid man-in-the-middle attack warnings
  if you have to perform a full machine restore.
- Backup and Restore procedures described here have only been tested with S3 compatible
  APIs.
- The Toolbox connects to the included MinIO by default, unless specific settings
  are given.
- 'An error like [Error] AccessDeniedException: 403 <GCP Account> does not have storage.objects.list
  access to the Google Cloud Storage bucket usually happens during a backup or restore
  of a GitLab instance, because of missing permissions.'
- This error happens when a Kubernetes secret containing a .s3cfg file was not specified
  through the gitlab.toolbox.backups.objectStorage.config.secret value.
- 'An error like [Error] WARNING: <file> not writable: Operation not permitted happens
  if the toolbox user does not have permissions to write files that match the stored
  permissions of the bucket items.'
- Starting with GitLab 16.6/Chart 7.6 repositories may be skipped on restore if the
  backup archive has been renamed.
- REST API requests are subject to rate limit settings.
- Some API endpoints also support plain text format.
- GitLab supports offset-based pagination as the default method.
- For large collections, use keyset pagination instead of offset pagination when available.
- When using a self-signed certificate, add it to the OS trusted chain to avoid SSL
  certificate errors.
- When you use a self-signed certificate to integrate GitLab with external applications,
  you might encounter SSL certificate errors in different parts of GitLab.
- Akismet configuration is available to users on GitLab Self-Managed.
- Akismet is already enabled on GitLab SaaS (GitLab.com), where its configuration
  and management are handled by GitLab Inc.
- Arkose Protect is used on GitLab.com and is not supported for GitLab Self-Managed
  instances.
- To enable Arkose Protect, get the public and private API keys from the ArkoseLabs
  Portal.
- Users with the Administrator role can configure the integration for the entire instance
  or for a specific project or group.
- Optional. To override the API URL used to send data directly, provide an API URL.
  Used only in advanced scenarios.
- Using an access token with excessive permissions is a security risk.
- The email account used by GitLab to send notification emails must have a consistent
  history of sending a high volume of mail from your domain (order of hundred emails
  a day minimum to Gmail) for a few weeks at least.
- Emails must be authenticated via DKIM or SPF.
- Before sending the final form (Gmail Schema Whitelist Request), you must send a
  real email from your production server.
- You cannot use this integration to trigger GitLab CI/CD pipelines from Jenkins.
- Some objects like Contact may return nulls in deeply nested fields
- Mutations always require authentication.
- Tokens must have the correct scope to access the GraphQL API.
- Uses Google reCAPTCHA v2 for spam detection
- Use HTTPS in production
- Authorization code with Proof Key for Code Exchange (PKCE) is recommended for client-side
  apps
- Resource owner password credentials are disabled for users with two-factor authentication
  turned on
- Never store the user’s credentials and only use this grant type when your client
  is deployed to a trusted environment
- GitLab leverages reCAPTCHA to protect against spam and abuse
- To enable reCAPTCHA for logins via password, select the Enable reCAPTCHA for login
  checkbox
- Requires both Snowflake and GitLab configuration
- Enter the path where the GitLab personal access token secret is stored
- Git operations over HTTP use the stateless 'smart' protocol described in the Git
  documentation.
- All requests pass through NGINX and any other HTTP load balancers.
- GitLab provides Rake tasks with which you see version information and run a quick
  check on your configuration to ensure it is configured properly within the application.
- It’s recommended to sign in to the git user using either sudo -i -u git or sudo
  su - git.
- By default, this seeds an average of 10 issues per week for the last 52 weeks per
  project.
- Group are additionally seeded with epics if GitLab instance has epics feature available.
- Uses OAuth2 with refresh token — requires setup of connected app in api
- You can’t run `rspec .` since this tries to run all the `_spec.rb` files it can
  find, also the ones in `/tmp`
- Spring is a Rails application pre-loader. It speeds up development by keeping your
  application running in the background so you don’t need to boot it every time you
  run a test, Rake task or migration.
- Some shells require brackets to be escaped or quoted.
- It is not recommended to increase the size of config/security/banned_ssh_keys.yml
  beyond 1 megabyte in size.
- The * as-if-foss jobs run the GitLab test suite 'as if FOSS', meaning as if the
  jobs would run in the context of gitlab-org/gitlab-foss.
- Cross project downstream FOSS pipeline simulates merging the merge request into
  the default branch in the FOSS project instead.
- 'AS_IF_FOSS_TOKEN: This is a GitLab FOSS project token with developer role and write_repository
  permission.'
- This pipeline is allowed to fail.
- The GitLab JH mirror project is private and CI is disabled.
- The GitLab JH validation project is public and CI is enabled.
- Rails logging to log/test.log is disabled by default in CI for performance reasons.
- ASGs should have autoscaling disabled. GitLab Runner takes care of autoscaling via
  the Taskscaler library.
- The Runner codebase makes a distinction between unit and integration tests.
- Unit test files have a suffix of _test.go.
- Integration test files have a suffix of _integration_test.go.
- To test the state of the build directives in test files, make check_test_directives
  can be used.
- Default port is 3010, but you can use any other
- GitLab Pages access control is disabled by default
- Known issues exist for running GitLab on ARM.
- Requires setup of connected app in api
- Some objects may return nulls in deeply nested fields
- The Linux package requires various configuration to get the components in working
  order.
- To avoid accidental overwrites of user configuration, the /etc/gitlab/gitlab.rb
  configuration file is not updated with new configuration when the Linux package
  installation is upgraded.
- You can start, stop or restart GitLab and all of its components with the gitlab-ctl
  commands.
- Do not rotate the gitlab_rails secrets because it contains the database encryption
  keys.
- If this secret is rotated, you see the same behavior as when the secrets file is
  lost.
- Recommended. Extract your current secrets for gitlab_rails.
- On all nodes, run a checksum match on the /etc/gitlab/gitlab-secrets.json file to
  confirm that the secrets match.
- This is a known bug with zypper where zypper ignores the gpgkey keyword in the repository
  configuration file.
- From GitLab 16.10 forward, administrators can try gitlab-ctl apply-sepolicy to automatically
  fix SELinux issues.
- The Git user is created with a locked password, shown by '!' in /etc/shadow.
- The Git user must have access to the system; review security settings at /etc/security/access.conf.
- To reduce PostgreSQL's shared memory usage, consider reducing shared_buffers or
  max_connections.
- To fix shared memory type detection error, set postgresql['dynamic_shared_memory_type']
  = 'none' in /etc/gitlab/gitlab.rb.
- Check maximum connections and available connections using the provided SQL query
  in PostgreSQL database console.
- This is unlikely to happen with non virtualized machines but on a VPS with virtualization
  like openVZ, container might not have the required module enabled or container doesn’t
  have access to kernel parameters.
- Another variation of this error reports the file system is read-only.
- Setting kernel parameters can only be done with root access.
- To prevent init daemon detection, add package['detect_init'] = false in gitlab.rb
- If using the configuration, runit service must be started before running gitlab-ctl
  reconfigure
- To fix the issue with AWS Cloudformation, use package['systemd_wanted_by'] and package['systemd_after']
  in gitlab.rb
- Avoid using underscores in external_url to prevent CI/CD issues
- Your local mirror should be updated periodically to get new RPMs as new GitLab versions
  are released.
- This guide is long because it covers many cases and includes all commands you need.
- Many people run into permission problems because they changed the location of directories
  or run services as the wrong user.
- Use caution when you deviate from the installation guide.
- Only PostgreSQL is supported. In GitLab 18.0 and later, we require PostgreSQL 16+.
- Use caution when you deviate from this guide.
- The installation guide covers many cases and includes all commands.
- If your distribution uses systemd init and the output of the following command is
  `notify`, you must not make any changes.
- 'If the output is **not** `notify`, run: sudo sed -i -e ''s/^daemonize yes$/daemonize
  no/'' -e ''s/^supervised no$/supervised systemd/'' -e ''s/^pidfile/# pidfile/''
  /etc/redis/redis.conf sudo chown redis:redis /etc/redis/redis.conf'
- You can configure LDAP authentication in `config/gitlab.yml`. Restart GitLab after
  editing this file.
- Restart GitLab after editing config/gitlab.yml
- This guide is long because it covers many cases and includes all commands you need,
  this is one of the few installation scripts that actually work out of the box.
- This guide is for setting up GitLab server using source files.
- Make sure you don’t violate any assumptions GitLab makes about its environment.
- Restart GitLab after editing the config/gitlab.yml file.
- Make sure GitLab can write to the tmp/pids/ and tmp/sockets/ directories.
- Make sure only the GitLab user has access to the public/uploads/ directory.
- Refer to https://github.com/puma/puma#configuration for more information.
- Make sure to install GitLab into the home directory of the user 'git'.
- 'In GitLab 17.0 and later, you must have the two main: and ci: sections in your
  database.yml.'
- You only need to adapt the production settings (first part).
- Self-compiled installation requires caution to avoid permission problems.
- Ensure proper setup of GitLab environment.
- If you want to use Kerberos for user authentication, omit 'kerberos' in the '--without'
  option in the installation commands.
- This installation guide covers various cases and provides all necessary commands.
- You must then update `gitlab.yml`’s `production -> elasticsearch -> indexer_path`
  setting to point to that binary.
- GitLab requires OpenSSL version 1.1.
- GitLab uses PostgreSQL 16 or later starting from version 18.0.
- Recommended to use the Linux package installation for reliability.
- Ensure correct permissions are set for directories used by GitLab.
- Backup `secrets.yml` someplace safe, but don’t store it in the same place as your
  database backups. Otherwise, your secrets are exposed if one of your backups is
  compromised.
- If `rake` fails with `JavaScript heap out of memory` error, try to run it with `NODE_OPTIONS`
  set as follows.
- The installation guide covers many cases and includes all commands you need.
- 'If you encounter problems with improperly encoded characters in URLs, see Error:
  `404 Not Found` when using a reverse proxy.'
- Ensure to follow the installation guide closely to avoid permission issues.
- Follow the installation guide carefully to avoid common pitfalls.
- Ensure that permissions are correctly set for the GitLab user.
- Use caution when you deviate from the guide.
- Backup critical data for projects.
- While compiling assets, you may receive the error message 'Killed error Command
  failed with exit code 137.' This can occur when Yarn kills a container that runs
  out of memory.
- Increase your system’s memory to at least 8 GB.
- You must have at least the Developer role to use the list tokens, get a single agent
  token, and list URL configurations endpoints.
- You must have at least the Maintainer role to use the create agent token and revoke
  agent token endpoints.
- Changes to your application settings are subject to caching and might not immediately
  take effect.
- Requires access token to be included in the header.
- Default for delete_inactive_projects is false.
- Default for inactive_projects_delete_after_months is 2.
- Default for inactive_projects_min_size_mb is 0.
- Default for inactive_projects_send_warning_email_after_months is 1.
- For values less than 10,000, this endpoint returns an exact count.
- For values of 10,000 and greater, this endpoint only returns approximate data when
  TablesampleCountStrategy and ReltuplesCountStrategy strategies are used for calculations.
- Offset-based pagination was deprecated in GitLab 17.8 and is planned for removal
  in 19.0. Use keyset-based pagination instead.
- Every API call to epic_links must be authenticated.
- Multi-level Epics are available only in GitLab Ultimate.
- This feature was deprecated in GitLab 14.5.
- The availability of the `context` and `user_instruction` attributes is controlled
  by a feature flag.
- This API rate-limits each user to 60 requests per 1-minute window for completions
  and 10 requests per 5-minute window for direct access.
- Some date fields in responses from this API are, or can appear to be, duplicated
  information
- GitLab supports form encoding for some endpoints.
- The operation does not delete blobs. To reclaim disk space, run garbage collection.
- The number of tags deleted by this API is limited on GitLab.com.
- Administrator credentials are required to list all container repositories.
- Every call to this endpoint requires authentication.
- User should be authorized to read repository.
- Endpoints require administrator access for deploy tokens.
- Both position[old_path] and position[new_path] are required and must refer to the
  file path before and after the change.
- Expected date format is ISO 8601
- The Epics REST API was deprecated in GitLab 17.0 and is planned for removal in v5
  of the API.
- If a user is not a member of a private group, a GET request on that group results
  in a 404 status code.
- If epics feature is not available a 403 status code is returned.
- This API is deprecated.
- Deprecated API
- Your access token must have either the 'read_user' or 'api' scope.
- Some epic features like child items, linked items, start dates, due dates, and health
  statuses are not returned by the API.
- Some merge request notes may instead use the DiscussionNote type. This target type
  is not supported by the API.
- All API calls to the Markdown API must be authenticated.
- This API is for internal use only.
- You must have at least the Developer role.
- Geo Nodes API was deprecated in GitLab 16.0 and is planned for removal in v5 of
  the API.
- This API is deprecated
- The health_status parameter can only be in a 'Healthy' or 'Unhealthy' state.
- The health parameter can be empty, 'Healthy', or contain the actual error message.
- Ensure to provide a valid access token in the header
- The health_status parameter can only be in a 'Healthy' or 'Unhealthy' state
- The health parameter can be empty, 'Healthy', or contain the actual error message
- Markdown files do not support changing text color.
- 'Prerequisites: Authenticate yourself as an administrator.'
- You must have the Owner role for the group to manage group member roles.
- The group_saml_identity attribute is only visible to group owners for SSO-enabled
  groups.
- The email attribute is only visible to group owners for enterprise users of the
  group.
- Administrator approval required for role promotions if enabled.
- To create an approval rule, use a POST request with appropriate attributes.
- To update an approval rule, use a PUT request with the approval_rule_id specified.
- This feature is not ready for production use.
- By default, this request returns 20 results at a time because the API results are
  paginated.
- If the target project is the source project or the user has insufficient permissions,
  an error message with status code 400 is returned.
- Requires at least the Maintainer role on the group for provisioned_users endpoint.
- Requires Owner role for the users endpoint.
- The users endpoint is scheduled for removal in GitLab 18.3.
- The projects and shared_projects attributes in the response are deprecated and scheduled
  for removal in API v5.
- Group deletion happens 7 days later by default.
- A GitLab.com group can’t be deleted if it is linked to a subscription.
- For groups, you must have the Owner role for the group.
- For projects, you must have the Owner or Maintainer role for the project.
- If a user is not a member of a private project, a GET request on that project results
  in a 404 status code.
- The assignee column is deprecated. We now show it as a single-sized array assignees.
- If the group is private, you must provide credentials to authorize.
- Only for administrators.
- The preferred way to do this is by using personal access tokens.
- Issues created by users on GitLab Premium or Ultimate include the weight property.
- Issues created by users on GitLab Premium or Ultimate include the epic property.
- Issues created by users on GitLab Ultimate include the health_status property.
- Only for administrators and project owners.
- Every API call to the epic issues API endpoint must be authenticated.
- If the Epics feature is not available, a 403 status code is returned.
- This endpoint supports both offset-based and keyset-based pagination, but keyset-based
  pagination is strongly recommended when requesting consecutive pages of results.
- By default, this request returns 20 results at a time because the API results are
  paginated
- Prior to GitLab 17.0, this endpoint does not support trigger jobs.
- You must have at least the Maintainer role for the project.
- User must have at least the Guest role for both groups.
- Searching by `locked` generally returns no results as that state is short-lived
  and transitional.
- Supports filtering by various parameters such as state, labels, milestones, and
  more.
- To restrict the list of merge requests, use the pagination parameters `page` and
  `per_page`.
- Diffs associated with the set of changes have size limitations.
- This endpoint is subject to Merge requests diff limits.
- This endpoint is subject to Merge requests diff limits. Merge requests that exceed
  the diff limits return limited results.
- If successful, returns `200 OK`.
- Uses a private token for authentication.
- KAS related fields will be null if KAS is not enabled.
- This feature is available for testing, but not ready for production use.
- Only public projects are returned when accessed without authentication.
- An empty list is returned if a profile is set to private.
- Without authentication, this operation is a no-op; only simple fields are returned.
- When accessed without authentication, only public invited groups are returned.
- This endpoint is rate-limited to 60 requests per minute.
- You must be an administrator.
- The version attribute must follow semantic versioning.
- You can access this endpoint without authentication, if the repository is publicly
  accessible.
- For blobs larger than 10 MB, this endpoint has a rate limit of 5 requests per minute.
- The wiki page notes API uses the wiki page meta ID instead of wiki page slug. If
  you use the page’s slug, GitLab returns a 404 error.
- Limited to 1,000,000 characters for the content of a note.
- If successful, returns 200 OK
- This endpoint is an experiment and might be changed or removed without notice.
- By default, the GET request returns 20 results, because the API is paginated.
- Although you can filter packages by status, working with packages that have a processing
  status can result in malformed data or broken packages.
- Self-revoke a personal access token using the 'self' keyword in the request URL.
- Each service must verify that the JWT sent by a GitLab instance is legitimate.
- Cache the JWKS response. It is suggested to let the cache expire once a day.
- The availability of this feature is controlled by a feature flag.
- 'Pagination is available on the following API endpoints (they return 20 items by
  default): GET /runners, GET /runners/all, GET /runners/:id/jobs, GET /projects/:id/runners,
  GET /groups/:id/runners.'
- The active and paused values in the status query parameter are deprecated and scheduled
  for removal in a future version of the REST API.
- You must have at least the Developer role for the target namespace or project.
- An access token with the manage_runner scope and the appropriate role is required.
- The list of jobs is limited to projects where the user has at least the Reporter
  role.
- You must be an administrator or have at least the Maintainer role for the target
  project to list or assign runners.
- The ip_address attribute is deprecated in GitLab 16.1 and is scheduled for removal
  in a future version.
- Registration with runner registration tokens is disabled in the project or group
  settings might return HTTP 410 Gone.
- This scope is available only when advanced search is enabled.
- filename is deprecated in favor of path.
- Wiki blobs searches are performed on both filenames and contents.
- When in doubt, request both a frontend and backend review.
- User-facing changes include both visual changes (regardless of how minor), and changes
  to the rendered DOM which impact how a screen reader may announce the content.
- The file being uploaded has a 5 MB limit.
- Premium and Ultimate features available for granular control over protected branch
  access.
- You must be an administrator to create a user.
- You must be signed in to use the Get a single user endpoint.
- You must be an administrator to create, modify, or delete a user.
- Returns a 204 No Content status code if the operation was successful.
- You must be authenticated to access certain endpoints.
- This API is in the process of being deprecated and considered unstable.
- Use the GraphQL API instead.
- Requires at least Developer role on all projects for read access.
- Requires at least Maintainer role on all projects for full access.
- Job artifacts consume most of the pipeline storage and can be deleted.
- Deleting job logs and artifacts is a destructive action that cannot be reverted.
- Deleting job log and artifacts is a destructive action that cannot be reverted.
- PAT (Project Access Token or Personal Access Token) is required for authentication.
- AGE_THRESHOLD is optional with a default value of 90 days.
- Job artifacts consume most of the pipeline storage, and job logs can also generate
  several hundreds of kilobytes.
- To manage artifact storage, you can update or configure when an artifact expires.
- The expiry setting for artifacts are configured in each job configuration in the
  .gitlab-ci.yml.
- Deleting job artifacts and logs is a destructive action that cannot be reverted.
- On GitLab.com, the number of tags deleted by this API is limited.
- Job artifacts consume most of the pipeline storage.
- To use the GitLab API, at least Developer role on all projects is required.
- You must have appropriate permissions to access the API.
- Job artifacts can be deleted in bulk, but it is a destructive action and cannot
  be reverted.
- You must use a personal access token with the create project access token endpoint.
- If there are multiple variables with the same key, use filter to select the correct
  environment_scope.
- Only supports binary data file uploads to the final server.
- Maximum import file size can be set by the Administrator.
- The maximum import file size defaults to 0 (unlimited).
- 'Status can be one of: none, scheduled, failed, started, finished'
- If the status is failed, it includes the import error message under import_error.
- SSL verification is always enabled.
- Pushes can be delayed or can time out. With the GitGuardian integration, pushes
  are sent to a third-party, and GitLab has no control over the connection with GitGuardian
  or the GitGuardian process.
- Due to a GitGuardian API limitation, the integration ignores files over the size
  of 1 MB. They are not scanned.
- If a pushed file has a name over 256 characters long the push won’t go through.
- The build configuration in TeamCity must use the build number format '%build.vcs.number%'
- In the advanced settings for VCS root, configure monitoring for all branches so
  merge requests can build.
- Every API call to issue boards must be authenticated.
- Use 'username:token' for authentication if the repository is not publicly accessible
- Returns a paginated list of releases, sorted by released_at
- This endpoint has a rate limit of five requests per minute for each project webhook
  and authenticated user.
- To disable this limit on GitLab Self-Managed and GitLab Dedicated, an administrator
  can disable the feature flag named `web_hook_event_resend_api_endpoint_rate_limit`.
- Requires a valid access token to authenticate.
- This API endpoint only works for top-level groups.
- You must have the Owner role in the top-level group.
- Every API call to group epic boards must be authenticated.
- If a user is not a member of a group and the group is private, a GET request results
  in 404 status code.
- This feature is in beta.
- Integration settings are reset when disabled.
- Provide either a cn or a filter, but not both.
- Every API call to group security settings must be authenticated.
- If a user isn’t a member of a private group, requests to the private group return
  a `404 Not Found` status code.
- Prevent pushes to this branch if it matches an item in the CODEOWNERS file.
- This API requires you to authenticate yourself as an administrator.
- By default, GET requests return 20 results at a time, because the API results are
  paginated.
- Requires at least Guest role to create threads
- Requires at least Developer role or be the author to resolve threads
- Get a list of events for a specific group hook in the past seven days from start
  date.
- This endpoint has a rate limit of five requests per minute for each hook and authenticated
  user.
- On GitLab.com, it will self-issue a token with scopes based on the provided resource.
- All methods require administrator authorization.
- The API only supports boolean and percentage-of-time gate values.
- Session data is stored in Redis.
- Use simple primitives and avoid storing objects to avoid marshaling complications.
- Duo features route LLM requests through the AI gateway.
- When responses are taking too long, consider restarting Sidekiq or running the service
  synchronously for debugging.
- Duo features route LLM requests through the AI gateway
- Required stops are any changes to GitLab components or dependencies that result
  in the need to upgrade to and stop at a specific major.minor version when upgrading
  GitLab.
- Development maintains a maintenance policy that results in a three-release (3 month)
  backport window - GitLab maintains a much longer window of version support that
  includes the current major version, as well as the two previous major versions.
- Wherever possible, a required stop should be avoided.
- If it can’t be avoided, the required stop should be aligned to a scheduled required
  stop.
- Many components must be backwards-compatible.
- Backward compatibility problems during updates are often very subtle.
- 'When we need to add a new parameter to a Sidekiq worker class, we can split this
  into the following steps: expand, migrate, contract.'
- Using our post-deployment migrations framework allows us to bundle all three phases
  into one milestone.
- At a first look, it may seem safe to bundle expand and migrate into a single milestone,
  but this causes an outage if Puma restarts before Sidekiq.
- When we moved MR routes, users on the new servers were redirected to the new URLs.
- We bumped the Markdown cache version and found a bug when a user edited a description
  or comment.
- The old servers were still updating the old column, but that was fine because we
  had a DB trigger that updated the new column from the old one.
- We changed the data type of one GraphQL field.
- We added a NOT NULL constraint to a column and marked it as a NOT VALID constraint.
- To address the issue, we added a new column to an existing table with a NOT NULL
  constraint without specifying a default value.
- In one production issue, CI builds that used the parallel keyword and depending
  on the variable CI_NODE_TOTAL being an integer failed.
- On GitLab Self-Managed, it will always return ::CloudConnector::ServiceAccessToken
  JWT token.
- The responsibility to find the best solution and implement it lies with the merge
  request author.
- It actually solves the problem it was meant to solve.
- It does so in the most appropriate way.
- It satisfies all requirements.
- There are no remaining bugs, logical problems, uncovered edge cases, or known vulnerabilities.
- The best way to do this, and to avoid unnecessary back-and-forth with reviewers,
  is to perform a self-review of your own merge request, following the Code Review
  guidelines.
- When assigning reviewers, it can be helpful to add a comment to the MR indicating
  which type of review you are looking for from that reviewer.
- If the merge request is from a fork, also check the additional guidelines for community
  contributions.
- Danger only posts one comment and updates its content on subsequent danger-review
  runs.
- When Danger tokens are rotated, it creates confusion/clutter (as old comments can’t
  be updated).
- When you work on a personal fork, Danger is run but its output is not added to a
  merge request comment and labels are not applied.
- Confidential OKRs are visible only to members of a project with sufficient permissions.
- It is okay to reject Community Contributions that solely bump dependencies.
- Simple dependency updates are better done automatically for the reasons provided
  above.
- Minimizing the impact to our customers ahead of a breaking change will ensure that
  disruptions will be as small as possible.
- Development on deprecated features is restricted to Priority 1 / Severity 1 bug
  fixes.
- All SaaS features must be known and explicitly defined.
- SaaS features are self-documented in YAML files stored in ee/config/saas_features.
- EE features must have good test coverage to prevent regressions.
- SaaS features are self-documented in YAML files.
- CE specs should remain untouched as much as possible and extra specs should be added
  for EE.
- Licensed features can be stubbed using the spec helper `stub_licensed_features`
  in `EE::LicenseHelpers`.
- Add documentation to the doc/ directory.
- EE-specific models should be defined in ee/app/models/
- EE-specific views should be placed in ee/app/views/, using extra subdirectories
  if appropriate.
- Instead of using regular render, we should use render_if_exists, which doesn’t render
  anything if it cannot find the specific partial.
- The render_if_exists view path argument must be relative to app/views/ and ee/app/views.
- For render and render_if_exists, they search for the EE partial first, and then
  CE partial.
- 'EE Unlicensed: this is what you have from a plain GDK installation, if you’ve installed
  from the main repository'
- 'EE licensed: when you add a valid license to your GDK'
- 'GitLab.com SaaS: when you simulate SaaS'
- Use the push_licensed_feature to guard frontend features that extend existing views.
- Ensure the group you want to test the EE feature for is actually using an EE plan.
- It is recommended to use Gitlab::Saas.feature_available? for SaaS-only features.
- GitLab Maintenance Mode only blocks writes from HTTP and SSH requests at the application
  level in a few key places within the rails application.
- The database itself is not in read-only mode (except in a Geo secondary site) and
  can be written by sources other than the ones blocked.
- By default, tests run in the EE environment, executing both EE and CE tests.
- 'If you want to test only the CE file in the FOSS environment, you need to run the
  following command: FOSS_ONLY=1 yarn jest path/to/spec/file.spec.js'
- As for CE tests we only add CE features, it may fail in the EE environment if EE-specific
  mock data is missing.
- Use the ee_else_ce_jest alias when importing mock data.
- Make sure that you have a CE and an EE mock_data file with an object with the corresponding
  data.
- In the CE file expect blocks, if you need to compare an object, use toMatchObject
  instead of toEqual.
- If a component you’re adding styles for is limited to EE, it is better to have a
  separate SCSS file.
- In some cases, styles are usually kept in a stylesheet that is common for both CE
  and EE.
- Conflicts in app/assets/images/icons.json or app/assets/images/icons.svg can be
  resolved by regenerating those assets with yarn run svg.
- S/MIME signed emails cannot be currently previewed with letter_opener.
- Reply by email should now be working.
- 'For Developer Experience internal tooling we use feature_category: :tooling.'
- 'For gems that are primarily maintained by the Test Platform sub department, we
  use feature_category: :test_platform.'
- 'For gems that are used across different product groups we use feature_category:
  :shared.'
- When possible, workers marked as 'not owned' use their caller’s category (worker
  or HTTP endpoint) in metrics and logs.
- All newly-introduced feature flags should be disabled by default.
- Feature flags are meant to be short lived.
- Feature flags must be used in the MR that introduces them.
- Do not use feature flags for long lived settings.
- The feature flag must be disabled by default.
- Feature flags should remain in the codebase for as short period as possible to reduce
  the need for feature flag accounting.
- All newly-introduced feature flags must be disabled by default.
- When using a feature flag for UI elements, make sure to also use a feature flag
  for the underlying backend code, if there is any.
- This ensures there is absolutely no way to use the feature until it is enabled.
- It is strongly advised to use actors with feature flags.
- Actors provide a simple way to enable a feature flag only for a given project, group
  or user.
- This makes debugging easier, as you can filter logs and errors based on actors.
- Actors also provide an easy way to do a percentage rollout of a feature in a sticky
  way.
- You can’t use a feature flag with the same name as a licensed feature name, because
  it would cause a naming collision.
- 'When a feature flag is changed on Staging or on GitLab.com, a Slack message will
  be posted to the #e2e-run-staging or #e2e-run-production channels.'
- End-to-end tests will run with feature flags in the default state implemented in
  the source code.
- Feature flags are not enabled by default in end-to-end tests.
- When set to false, 100% of the jobs are deferred.
- Dropping feature flag (`drop_sidekiq_jobs_{WorkerName}`) takes precedence over deferring
  feature flag (`run_sidekiq_jobs_{WorkerName}`)
- Bullet is enabled only in development mode by default.
- Logging is disabled, because Bullet logging is noisy.
- GitLab is committed to releasing software for our customers who are required to
  comply with FIPS 140-2 and 140-3.
- FIPS 140 is a requirement to do business within the U.S. public sector, as well
  as some non-U.S. public sector organizations.
- Non-validated cryptography is currently viewed as providing no protection to the
  information or data.
- The regulatory environment and policymaking in this area is dynamic and requires
  close monitoring by GitLab.
- GitLab takes the stance of applying patches to cryptographic modules.
- GitLab favors security over compliance in situations where it is not possible to
  achieve both with respect to FIPS 140-2.
- GitLab has standardized on RHEL and UBI for its FIPS-approved software releases
- 'Advanced Search: GitLab does not provide a packaged Elastic or OpenSearch deployment.
  You must use a FIPS-compliant service or disable Advanced Search.'
- FIPS Linux packages for GitLab 17.7 fixed the issue with Libgcrypt compatibility.
- Omnibus GitLab has dropped the app/assets directory after asset compilation.
- Reading files from app/assets directory fails in Omnibus-installed GitLab instances.
- Avoid using expect_any_instance_of or allow_any_instance_of in RSpec.
- Do not rescue Exception.
- Accessing a file from the app/assets folder will error out in production installations.
- Avoid using `expect_any_instance_of` or `allow_any_instance_of` in RSpec
- Image scaling is limited to Upload entities, specifically avatars.
- Rescaled images are not stored; scaler runs every time a smaller version is requested.
- Type labels are very important. They define what kind of issue this is. Every issue
  should have one and only one.
- Team labels specify what team is responsible for this issue. Assigning a team label
  makes sure issues get the attention of the appropriate people.
- This Markdown specification is valid for GitLab only.
- You cannot use relative links to reference project files in a wiki page, or a wiki
  page in a project file.
- This endpoint is only available for Rails web workers. Sidekiq workers cannot be
  inspected this way.
- RAILS_PROFILE environment variable can be set to true before starting GitLab for
  profiling.
- This will not work on production because we have 60-second timeouts for the requests.
- Rails loads Zeitwerk after the initializers in `config/initializers` are loaded.
- Autoloading before Zeitwerk is loaded is now deprecated.
- To run an initializer before Zeitwerk is loaded, put them in `config/initializers_before_autoloader`.
- Database connections are not opened from Rails initializers to prevent errors during
  tasks like `db:drop` and `db:test:prepare`.
- We strive to run GitLab using the latest Rails releases to benefit from performance,
  security updates, and new features.
- If the Rails upgrade was over a patch release and it contains important security
  fixes, make sure to release it in a GitLab patch release to self-managed customers.
- Service classes usually have an execute method, which can return a ServiceResponse.
- When upgrading Ruby, consider the order and necessity of the documented steps.
- For patch level updates, it should suffice to increment the patch level of RUBY_VERSION.
- Ruby 3.0.2 has a known bug that causes table tests to fail when table values consist
  of integer values.
- Testing in irb/rails console silences the deprecation warning, since irb in Ruby
  2.7.x has a bug that prevents deprecation warnings from showing.
- Files are stored at multiple locations and use different path schemes.
- Contributions to translations are always needed.
- Some translations are incomplete or inconsistent.
- Webhook payloads must accurately represent the state of data at the time of the
  event.
- Sensitive data should never be included in webhook payloads.
- Historically there has been a lot of inconsistency between the payload schemas of
  different types of webhooks.
- Loading additional data for the webhook payload must be performant because we need
  to build payloads in-request and not on Sidekiq.
- We cannot make breaking changes to webhook payloads.
- Only additive changes can be made, where new properties are added.
- Breaking changes include removing a property, renaming a property, a change to the
  value of the 'object_kind' property, or a change to a value of the 'action' property.
- If the value of a property other than 'object_kind' or 'action' must change, set
  the value to null, {}, or [] rather than remove the property.
- Users need administrator access to use these endpoints.
- Your instance must have the Ultimate tier to use security policies.
- Groups contain one or more projects, epics, boards, labels, and iterations.
- Settings and configurations applied at the group level cascade down to child projects.
- Some words cannot be used as project or group names.
- Usernames must start and end with a letter or a digit.
- Usernames and group names can contain only letters, digits, emoji, underscores,
  dots, parentheses, dashes, or spaces.
- Project names can contain only letters, digits, emoji, underscores, dots, pluses,
  dashes, or spaces.
- Usernames and project or group slugs must not contain consecutive special characters.
- Cannot end in .git or .atom.
- You must have at least the Planner role for the project.
- You must have at least the Reporter role for the project.
- Confidential tasks are visible only to members of a project with sufficient permissions.
- The availability of features like Lock discussion and Two-column layout is controlled
  by a feature flag.
- Locking a discussion prevents public comments in a task.
- To link items, the user must have at least the Guest role for the project.
- To remove a linked item, the user must have at least the Guest role for the project.
errors:
- 'REQUEST_LIMIT_EXCEEDED: Throttle API calls or reduce frequency'
- 'QUERY_TIMEOUT: Break down filters or add selectivity'
- Cannot connect to the Docker daemon at tcp://docker:2375. Is the docker daemon running?
- 'Pulling docker image registry.tld/my/image:latest ... ERROR: Build failed: Error:
  image registry.tld/my/image:latest not found'
- 'Pulling docker image local_image:latest ... ERROR: Build failed: Error: image local_image:latest
  not found'
- 'Pulling docker image registry.tld/my/image:latest ... WARNING: Cannot pull the
  latest version of image registry.tld/my/image:latest : Error: image registry.tld/my/image:latest
  not found WARNING: Locally found image will be used instead.'
- 'WARNING: Failed to pull image with policy "always": Error response from daemon:
  received unexpected HTTP status: 502 Bad Gateway (docker.go:143:0s) Attempt #2:
  Trying "if-not-present" pull policy Using locally found image version due to "if-not-present"
  pull policy'
- 'ERROR: Job failed (system failure): resolving secrets: secret not found: MY_SECRET'
- '401 Unauthorized: Check if the token is valid or has the necessary permissions.'
- '403 Forbidden: Avoid trigger loops, do not use pipeline events to trigger pipelines'
- '404 Not Found: Use a pipeline trigger token instead of a personal access token'
- 'The requested URL returned error: 400: Check branch name or workflow rules for
  triggering pipelines'
- Unable to validate CI/CD configuration.
- 'Test Failed. Save Anyway: This error occurs because the integration uses push data
  to build the test payload when the project does not have push events.'
- 'job_activity_limit_exceeded: The maximum number of jobs that can exist in active
  pipelines is limited.'
- 'REQUEST_LIMIT_EXCEEDED: Throttle API calls or reduce frequency.'
- 'canceled: Job was manually canceled or automatically aborted.'
- 'failed: Job execution failed.'
- 'success: Job completed successfully.'
- 'content not found: This GitLab CI configuration is invalid: Component ''gitlab.com/my-namespace/my-project/my-component@~latest''
  - content not found'
- 'Build component error: Spec must be a valid json schema'
- Insufficient permissions to set pipeline variables
- A CI/CD pipeline must run and be successful before merge
- Checking ability to merge automatically
- Project <group/project> not found or access denied
- The parsed YAML is too big
- 500 error when editing the .gitlab-ci.yml file
- Failed to pull image
- Something went wrong on our end
- config should be an array of hashes
- 'ssh: Could not resolve hostname gitlab.example.com: nodename nor servname provided,
  or not known'
- 'Key enrollment failed: invalid format'
- SSH host keys are not available on this system.
- '429: Too Many Requests - The client should wait before attempting the request again.'
- '`403 Forbidden`: Check for any automated processes that may be triggering a block.'
- '`429 Too Many Requests`: If the same IP address sends more than 10 POST requests
  in a minute to protected paths.'
- 'Seat overages: Ensure only eligible users have access.'
- 'Blocked, banned, and deactivated users: Users are automatically removed from seats.'
- 'permission denied to create extension "btree_gist": Must be superuser to create
  this extension.'
- GitLab requires the PostgreSQL extension 'btree_gist' installed in database 'gitlabhq_production',
  but the database user is not allowed to install the extension.
- Amazon Aurora is incompatible and not supported.
- Azure Database for PostgreSQL Single Server is not supported as the service is now
  deprecated.
- Google AlloyDB and Amazon RDS Multi-AZ DB cluster are not tested and are not recommended.
- '401 Unauthorized: Recheck OAuth scopes or token expiration'
- '404: Minimal access users receive 404 errors when accessing the parent group.'
- '500 Internal Server Error: Check network connectivity between GitLab and GitHub
  Enterprise'
- '403 forbidden error: If the error occurs for all GitLab SaaS requests, look for
  an automated process that could have triggered a block.'
- 'HAProxy API throttle: GitLab SaaS responds with HTTP status code 429 to API requests
  that exceed 10 requests per second, per IP address.'
- 'Protected paths throttle: GitLab SaaS responds with HTTP status code 429 to POST
  requests at protected paths that exceed 10 requests per minute, per IP address.'
- 'Git and container registry failed authentication ban: GitLab SaaS responds with
  HTTP status code 403 for one hour if it receives 30 failed authentication requests
  in three minutes from a single IP address.'
- '414 Request-URI Too Large: Use a payload body instead.'
- 'Test Failed. Save Anyway: Initialize the repository by pushing a test file to the
  project.'
- Connection failed. Please check your settings
- Could not connect to the CI server
- Merge request event does not trigger a Jenkins pipeline
- '401 Unauthorized: Invalid token'
- Request denied. Spam detected
- Request denied. Solve CAPTCHA challenge and retry
- '401 Unauthorized: Recheck personal access token permissions'
- Hash Sum mismatch when downloading packages
- NoMethodError - undefined method '[]=' for nil:NilClass
- 'The following signatures couldn''t be verified because the public key is not available:
  NO_PUBKEY 3F01618A51312F3F'
- 'FATAL: could not create shared memory segment: Cannot allocate memory'
- 'FATAL: could not open shared memory segment "/PostgreSQL.XXXXXXXXXX": Permission
  denied'
- 'FATAL: remaining connection slots are reserved for non-replication superuser connections'
- Reconfigure complains about the GLIBC version
- 'Mixlib::ShellOut::ShellCommandFailed: Expected process to exit with [0], but received
  ''255'''
- 'sysctl: setting key "kernel.shmall": Read-only file system'
- 'sysctl: setting key "kernel.shmmax": Read-only file system'
- 'Permission denied: gitlab-rake assets:precompile'
- 'The requested URL returned error: 403'
- 'Faraday::SSLError (SSL_connect returned=1 errno=0 state=SSLv3 read server certificate
  B: certificate verify failed)'
- 'proxyRoundTripper: XXX failed with: "net/http: timeout awaiting response headers"'
- Can't verify CSRF token authenticity Completed 422 Unprocessable
- Extension missing pg_trgm
- 'Errno::ENOMEM: Cannot allocate memory during backup or upgrade'
- 'NGINX error: could not build server_names_hash, you should increase server_names_hash_bucket_size'
- '''root'' cannot chown'
- 'Errno::EAFNOSUPPORT: Address family not supported by protocol - socket(2): Check
  if the hostnames are resolvable and IPv4 addresses are returned'
- 'URI::InvalidComponentError (bad component(expected host component: my_url.tld)):
  Avoid using underscores in external_url'
- 'timeout: run: /opt/gitlab/service/gitaly: If the upgrade fails, check that all
  Gitaly processes are stopped and rerun sudo gitlab-ctl reconfigure'
- 'Reconfigure is stuck when re-installing GitLab: Ensure all uninstall steps are
  followed and perform necessary actions'
- 'E: connection refused to d20rj4el6vkp4c.cloudfront.net 443'
- exec request failed on channel 0
- shell request failed on channel 0
- Migration from GitLab Chart or Linux package to GitLab Operator not supported
- Git over SSH with OpenShift routes not supported
- GKE workload identity and IAM service accounts authentication limitations
- '401 Unauthorized: Check API token or permissions.'
- '404 Not Found: Verify endpoint and resource availability.'
- '404 Not Found: Check project ID or URL.'
- '500 Internal Server Error: Check server logs for more information.'
- '401 Unauthorized: Check if the access token is valid.'
- '404 Not Found: Verify the endpoint and parameters.'
- '204 No Content: if the image was deleted successfully.'
- '422 Unprocessable: if the image could not be deleted.'
- '404: Not Found - User is not a member of a private group.'
- '403: Forbidden - Multi-level Epics feature is not available.'
- '400 Bad Request: Check the request parameters and payload.'
- '404 Not Found: Ensure the project ID and commit SHA are correct.'
- '401 Unauthorized: Recheck the access token.'
- '403 Forbidden: The tag matches protection rules.'
- '202 Accepted: Indicates asynchronous job has been scheduled.'
- '200 OK: A list of protection rules.'
- '401 Unauthorized: The access token is invalid.'
- '403 Forbidden: The user does not have permission to list protection rules for this
  project.'
- '404 Not Found: The project was not found.'
- '201 Created: The protection rule was created successfully.'
- '400 Bad Request: The protection rule is invalid.'
- '403 Forbidden: The user does not have permission to create a protection rule.'
- '422 Unprocessable Entity: The protection rule could not be created.'
- '200 OK: The protection rule was updated successfully.'
- '403 Forbidden: The user does not have permission to update the protection rule.'
- '422 Unprocessable Entity: The protection rule could not be updated.'
- '204 No Content: The protection rule was deleted successfully.'
- '400 Bad Request: The id or the protection_rule_id are missing or are invalid.'
- '403 Forbidden: The user does not have permission to delete the protection rule.'
- '404 Not Found: The project or the protection rule was not found.'
- 204 Deployment destroyed
- 403 Forbidden
- 400 Cannot destroy running deployment
- 400 Deployment currently deployed to environment
- '400: Invalid before date'
- '404: Not Found'
- '403: Forbidden'
- '400: Insufficient permissions'
- '400 Bad Request: Check required attributes.'
- '404 Not Found: Ensure the project ID and approval rule ID are correct.'
- '403 Forbidden: Insufficient permissions.'
- '400 Bad Request: If the target project is the source project or the user has insufficient
  permissions.'
- '202 Accepted: Indicates user has authorization.'
- '400 Bad Request: Check required parameters.'
- '404 Not Found: Ensure the group ID is correct.'
- '204: No content on success'
- '403: Forbidden if unauthorized to delete the invitation'
- '404: Not found if authorized and no invitation is found for that email address'
- '409: Request valid but the invitation could not be deleted'
- '204 No Content: if the image was deleted successfully'
- '400 Bad Request: if the image could not be deleted'
- '404: If a user is not a member of a group and the group is private.'
- '403: Returned if the Epics feature is not available.'
- '404: Job not found or no log file'
- '404 Not Found: Using branch names with merge request pipelines may cause this error.'
- '202 Accepted: Indicates that the request was accepted.'
- '403 Forbidden: The current user is not permitted to read the licenses.'
- '404 Not Found: The requested license doesn’t exist.'
- '403: Related Epics feature is not available in your GitLab plan'
- '200 OK: Successful request'
- '404 Not Found: Project not found'
- '401 Unauthorized: Invalid or missing access token'
- 204 No Content
- 400 Bad request
- 404 Not found
- 409 Conflict
- '401 Unauthorized: This user does not have permission to accept this merge request.'
- '405 Method Not Allowed: The merge request cannot merge.'
- '409 SHA does not match HEAD of source branch: The provided sha parameter does not
  match the HEAD of the source.'
- '422 Branch cannot be merged: The merge request failed to merge.'
- '400: Merge request is not mergeable'
- '400: Merge ref cannot be updated'
- '400: Unsupported operation'
- '202: Successfully enqueued.'
- '403: Cannot push to source branch'
- '403: Source branch does not exist'
- '403: Source branch is protected from force push'
- '409: Failed to enqueue the rebase operation'
- HTTP 304 Not Modified
- '401 Unauthorized: Recheck access token.'
- '401 Unauthorized: Recheck access token'
- 404 Project Not Found
- 422 Unprocessable Entity
- '400 Bad Request: Possible causes include directory traversal in file_path, empty
  commit, or concurrent file updates.'
- '404 Not Found: Check if the ID provided is correct.'
- '400 Bad Request: Ensure required parameters are included.'
- '404 Not Found: If the page’s slug is used instead of the wiki page meta ID.'
- '204 No Content: The package was deleted successfully.'
- '403 Forbidden: The package is protected from deletion.'
- '404 Not Found: The package was not found.'
- '401: Unauthorized'
- '400: Bad Request'
- The active attribute in the response is deprecated and is scheduled for removal
  in a future version of the REST API.
- '403 Forbidden: You must have appropriate permissions to perform this action.'
- '403: Invalid runner registration token'
- '410: Runner registration disabled'
- '204: Runner was deleted'
- '204: Delete was successful. No data is returned.'
- '404: The snippet wasn’t found.'
- '400 Bad Request: Check the input parameters for correctness.'
- '404 Not Found: Ensure the project ID is valid.'
- '403 Forbidden: Verify permissions for accessing or modifying protected branches.'
- '404 Not Found: If the vulnerability export is not finished yet or was not found'
- '404: Resource not found'
- '409: User cannot be soft deleted'
- '403 Forbidden: User does not have permission to create a new vulnerability'
- '429 Too Many Requests: Export request while previous request is still in progress'
- '202 Accepted: Export is not finished yet'
- 404 User Not Found
- 400 Bad Request
- '403 Forbidden: User does not have permission to view or change vulnerability status'
- '403 Forbidden: User does not have permission to use the Project Security Dashboard.'
- '401 Unauthorized: Check your access token and permissions.'
- '403 Forbidden: Ensure you have the required role for the project.'
- '401 Unauthorized: Ensure the token has the necessary permissions.'
- 'Authentication failed: Check the token and permissions.'
- Failed to fetch pipelines or no pipelines found.
- '404 Not Found: Check the project ID or ensure you have access.'
- '403 Forbidden: Check permissions or token scope.'
- '401 Unauthorized: Recheck token validity or authorization scopes.'
- '401 Unauthorized: Check your API token or permissions.'
- '404 Not Found: Verify the project ID or endpoint path.'
- '405: Method Not Allowed'
- 'query timeouts: A typical example of unrecoverable errors.'
- '404: Not Found - User is not a member of the project.'
- '304: if the project is not starred'
- '200 OK: A list of package protection rules.'
- '403 Forbidden: The user does not have permission.'
- '404 Not Found: The project or package protection rule was not found.'
- '200 OK: Successful response'
- '404 Not Found: User does not have permission to access the project'
- '403: User does not have permission to use the Project Security Dashboard'
- '403: User does not have permission to create a new vulnerability'
- 'A Vulnerability Finding is not found or already attached to a different Vulnerability:
  Status code 400'
- '400 Bad request: 2FA is not enabled for the specified user.'
- '403 Forbidden: The authenticated user is not an Owner.'
- '404 Not found: User can not be found.'
- '404: Not Found if the user is not a member of a private group.'
- 401 Unauthorized
- 404 Migration not found
- 503 Service unavailable
- 404 Group Not Found
- '404 Not Found: Check if the group_id or repository_storage_id is correct'
- You need to pay attention to it if it is updated or not.
- RuboCop::Cop::BackgroundMigration::FeatureCategory cop ensures a valid feature_category
  is defined.
- The spec also validates if the used feature categories are known.
- 'default_enabled: Must not be set to true for gitlab_com_derisk type feature flags.'
- 'default_enabled: Must not be set to true for wip type feature flags.'
- 'default_enabled: Can be set to true for beta type feature flags.'
- 'RuntimeError: Database connection should not be called during initializers.'
auth_info:
  mentioned_objects:
  - GITLAB_TOKEN
  - OauthToken
  - AuthProvider
  - NamedCredential
client:
  base_url: https://gitlab.example.com/api/v4
  headers:
    Strict-Transport-Security: max-age=63072000
    Accept: application/json
    MALLOC_CONF: dirty_decay_ms:1000,muzzy_decay_ms:1000
    Content-Type: application/json
    X-Gitlab-Timestamp: <X-Gitlab-Timestamp>
    X-Gitlab-Nonce: <X-Gitlab-Nonce>
    X-Gitlab-Hmac-Sha256: <X-Gitlab-Hmac-Sha256>
    X-GitLab-Show-Login-Captcha: '1'
    Authorization: REDACTED
    PRIVATE-TOKEN: <your_access_token>
    Content-type: application/json
    content-type: application/json
    Private-Token: <your_access_token>
    JOB-TOKEN: $CI_JOB_TOKEN
    accept: application/json
  auth:
    auth_secret: ''
    gitlab_id: ''
    gitlab_secret: ''
    auth_scope: api
    auth_timeout: 5
    auth_cookie_session_timeout: 600
    type: apikey
    flow: refresh_token
    token_url: https://login.api.com/services/oauth2/token
    location: header
    header_name: PRIVATE-TOKEN
    token: xxxxxxx
    client_id: '{{ dlt.secrets[''api_client_id''] }}'
    client_secret: '{{ dlt.secrets[''api_client_secret''] }}'
    refresh_token: '{{ dlt.secrets[''api_refresh_token''] }}'
    args:
      scope: user:email
  paginator:
    type: cursor
    default_page_size: 200
    page_size_param: pageSize
    cursor_path: nextRecordsUrl
    cursor_param: nextUrl
source_metadata: null
