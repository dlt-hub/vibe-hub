resources:
- name: employees
  endpoint:
    path: /e09284/v1/employees
    method: GET
    data_selector: records
    params: {}
- name: resources
  endpoint:
    path: /resources
    method: GET
- name: resource_by_id
  endpoint:
    path: /resources/{id}
    method: GET
- name: echo
  endpoint:
    path: /echo
    method: POST
    data_selector: examples.application/json
    params: {}
- name: users
  endpoint:
    path: /users
    method: GET
    data_selector: schema
    params: {}
- name: user_by_username
  endpoint:
    path: /users/{username}
    method: GET
    data_selector: schema
    params: {}
- name: echo
  endpoint:
    path: /echo
    method: POST
    data_selector: examples
    params: {}
- name: users
  endpoint:
    path: /users
    method: GET
    data_selector: schema
    params: {}
- name: user_by_name
  endpoint:
    path: /users/{username}
    method: GET
    data_selector: schema
    params: {}
- name: echo
  endpoint:
    path: /echo
    method: POST
- name: users
  endpoint:
    path: /users
    method: GET
- name: user_by_name
  endpoint:
    path: /users/{username}
    method: GET
- name: echo
  endpoint:
    path: /echo
    method: POST
    data_selector: examples.application/json
    params: {}
- name: users
  endpoint:
    path: /users
    method: GET
    data_selector: schema
    params: {}
- name: user_by_name
  endpoint:
    path: /users/{username}
    method: GET
    data_selector: schema
    params: {}
- name: update_user
  endpoint:
    path: /users/{username}
    method: PUT
    data_selector: schema
    params: {}
- name: delete_user
  endpoint:
    path: /users/{username}
    method: DELETE
    data_selector: schema
    params: {}
- name: echo
  endpoint:
    path: /echo
    method: POST
    data_selector: response
- name: users
  endpoint:
    path: /users
    method: GET
    data_selector: response
- name: user_by_name
  endpoint:
    path: /users/{username}
    method: GET
    data_selector: response
- name: update_user
  endpoint:
    path: /users/{username}
    method: PUT
    data_selector: response
- name: delete_user
  endpoint:
    path: /users/{username}
    method: DELETE
    data_selector: response
- name: echo
  endpoint:
    path: /echo
    method: POST
- name: users
  endpoint:
    path: /users
    method: GET
- name: user_by_name
  endpoint:
    path: /users/{username}
    method: GET
- name: update_user
  endpoint:
    path: /users/{username}
    method: PUT
- name: delete_user
  endpoint:
    path: /users/{username}
    method: DELETE
- name: echo
  endpoint:
    path: /echo
    method: POST
    data_selector: response
- name: users
  endpoint:
    path: /users
    method: GET
    data_selector: users
- name: user_by_name
  endpoint:
    path: /users/{username}
    method: GET
    data_selector: user
- name: update_user
  endpoint:
    path: /users/{username}
    method: PUT
    data_selector: user
- name: delete_user
  endpoint:
    path: /users/{username}
    method: DELETE
    data_selector: response
notes:
- All APIs MUST adhere to semantic versioning
- APIs are not intended to last forever
- All APIs created for the Australian government MUST specify a valid OpenAPI v2.0
  document as it has the widest support.
- An OpenAPI v3.0 document MAY also be provided to future proof the API.
- All APIs MUST be exposed using HTTPS.
- URLs MUST follow the standard naming convention as described.
- All APIs **MUST** be exposed using HTTPS.
- The total URI, including the Path and the Query, **MUST NOT** exceed 2000 characters
  in length.
- Creating or updating multiple resource instances in the same request is not standardised,
  and should be avoided.
- PII should not be included in the Query String where there is a risk that it may
  be stored in logs or on proxy servers.
- The recommended, and default content type is JSON (application/json).
- Total payload size MUST NOT exceed 10 Mb. It is suggested that payload size SHOULD
  NOT exceed 2 Mb.
- To conform to various privacy legislation, PII should not be included in the Query
  String where there is a risk that it may be stored in logs or on proxy servers.
- The default content type is JSON (application/json).
- Basic or Digest authentication SHOULD NOT be used.
- Always set a reasonable expiration date for tokens. An OIDC access token lifetime
  SHOULD NOT exceed 5 minutes.
- 'The Authorization: Bearer header MUST be used for authentication/authorization
  e.g. using a JWT token.'
- APIs using hypermedia in representations could be extended seamlessly.
- The mere presence of links does not decouple a client from having to learn the data
  required to make requests for a transition and all associated link semantics particularly
  for POST/PUT/PATCH operations. An API MUST provide documentation to clearly describe
  all the links, link relation types and request response formats for each of the
  URIs.
- APIs SHOULD follow a 'pagination first' policy.
- Pagination is RECOMMENDED to serve requests in a timely manner (e.g. < 2s) and ensure
  the amount of data returned remains within a manageable payload (e.g. < 500kb).
- Webhooks require additional infrastructure from your API Consumers so consider their
  needs and capabilities when designing your solution
- No authentication is currently required to use the retrieval methods published in
  this API.
- It is advised that users keep their queries to ~2-3 calls per second to avoid overloading
  the service.
- Keep queries to ~2-3 calls per second to avoid overloading the service.
errors:
- 'REQUEST_LIMIT_EXCEEDED: Throttle API calls or reduce frequency'
- 'QUERY_TIMEOUT: Break down filters or add selectivity'
- '401 Unauthorized: Recheck OAuth scopes or token expiration'
- '415 Unsupported Media Type: Ensure the Accept header matches supported media types.'
- '400 Bad Request: Invalid value(s) in request input'
- '422 Unprocessable Entity: Contains validation errors that the client can change
  e.g. missing a mandatory field'
- '500 Internal Service: Downstream system is not responding correctly'
- '415 Unsupported Media Type: The requested media type(s) are unsupported.'
- '415 Unsupported Media Type: Reject requests containing unexpected or missing content
  type headers.'
- '400: The server cannot process the request.''The specified resource was not found.'
- '401: The request could not be authenticated.'
- '403: The request was authenticated but is not authorised to access the resource.'
- '404: The resource was not found.'
- '400: Bad Request - The server cannot process the request.'
- '401: Unauthorized - The request could not be authenticated.'
- '403: Forbidden - The request was authenticated but is not authorised to access
  the resource.'
- '404: Not Found - The resource was not found.'
- '408_error_response: Request Timeout.'
- '415_error_response: Unsupported Media Type.'
- '422_error_response: Unprocessable Entity.'
- '500_error_response: Internal Server Error.'
- '501_error_response: Method Not Implemented.'
- '408: Request Timeout.'
- '415: Unsupported Media Type.'
- '422: Unprocessable Entity.'
- '500: Internal Server Error.'
- '501: Method Not Implemented.'
- '400: The server cannot process the request.'
- '405: The method is not implemented for this resource.'
- '415: This status code indicates that the server refuses to accept the request because
  the content type specified in the request is not supported by the server.'
- '422: This status code indicates that the server received the request but it did
  not fulfil the requirements of the back end.'
- '500: An internal server error. The response body may contain error messages.'
- '500: An internal server error.'
- '400: Bad Request.'
- '401: Unauthorized.'
- '403: Forbidden.'
- '404: Not found.'
- '405: Not Allowed.'
auth_info:
  mentioned_objects:
  - main_auth
  - api_key
  - basic_auth
client:
  base_url: https://gw.api.gov.au
  headers:
    Accept: application/json
source_metadata: null
