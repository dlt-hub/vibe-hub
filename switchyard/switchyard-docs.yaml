resources:
- name: Ethernet
  endpoint:
    path: /modules/switchyard/lib/packet/ethernet.html
    method: GET
    data_selector: None
    params: {}
- name: ARP
  endpoint:
    path: /modules/switchyard/lib/packet/arp.html
    method: GET
    data_selector: None
    params: {}
- name: IPv4
  endpoint:
    path: /modules/switchyard/lib/packet/ipv4.html
    method: GET
    data_selector: None
    params: {}
- name: IPv6
  endpoint:
    path: /modules/switchyard/lib/packet/ipv6.html
    method: GET
    data_selector: None
    params: {}
- name: UDP
  endpoint:
    path: /modules/switchyard/lib/packet/udp.html
    method: GET
    data_selector: None
    params: {}
- name: TCP
  endpoint:
    path: /modules/switchyard/lib/packet/tcp.html
    method: GET
    data_selector: None
    params: {}
- name: ICMPv4
  endpoint:
    path: /switchyard/lib/packet/ICMP
    method: GET
    data_selector: icmpdata
    params: {}
- name: ICMPv6
  endpoint:
    path: /switchyard/lib/packet/ICMPv6
    method: GET
    data_selector: icmpdata
    params: {}
- name: UDPPing
  endpoint:
    path: /creating_new_packet_header_class
    method: GET
    data_selector: records
- name: SpanningTreeMessage
  endpoint:
    path: /configuring_lower_layer_header_class
    method: GET
    data_selector: records
notes:
- The Switchyard software is distributed under terms of the GNU General Public License,
  version 3.
- 'Switchyard’s documentation is distributed under a Creative Commons Attribution-NonCommercial-ShareAlike
  4.0 International License: http://creativecommons.org/licenses/by-nc-sa/4.0/'
- Key limitation of Switchyard is that arbitrary values for core protocol number enumerations
  cannot be dynamically added and/or modified.
- Uses existing protocol numbers for new layer 3 or 4 protocols.
- The protocol stack example uses a single Python thread.
- Uses Switchyard’s application-layer socket emulation capabilities.
- Only one socket application can be started by Switchyard at a time.
- When using Switchyard to create a protocol stack and run a socket-based application
  on a standard commodity operating system (e.g., a desktop/laptop Linux or macOS
  system), you may need to be careful about configuring the host firewall settings
  when starting Switchyard in real/live mode.
- Switchyard uses the libpcap library for receiving and sending packets, which generally
  requires root privileges.
- Only UDP sockets are supported.
- Switchyard attempts to be careful about choosing a local (ephemeral) port number
  for use, but its approach isn't fool-proof.
- When using Switchyard to create a protocol stack and run a socket-based application
  on a standard commodity operating system, you may need to be careful about configuring
  the host firewall settings.
errors:
- Not enough bytes to unpack UDPPing
- Not enough bytes to unpack SpanningTreeMessage
auth_info:
  mentioned_objects:
  - ICMPv6
  - ICMPv6Type
  - ICMPv6RedirectMessage
  - ICMPv6RouterSolicitation
  - ICMPv6OptionSourceLinkLayerAddress
  - ICMPv6OptionTargetLinkLayerAddress
  - ICMPv6OptionRedirectedHeader
  - ICMPv6OptionMTU
  - ICMPv6OptionPrefixInformation
client:
  base_url: switchyard.lib.userlib
source_metadata: null
