resources:
- name: projects
  endpoint:
    path: /api/projects
    method: GET
    data_selector: data
    params: {}
- name: projects
  endpoint:
    path: /api/projects
    method: GET
    data_selector: data
    params: {}
- name: assets
  endpoint:
    path: /api/assets
    method: GET
    data_selector: data
    params: {}
- name: annotations
  endpoint:
    path: /annotations
    method: GET
    data_selector: annotations
- name: apiKeys
  endpoint:
    path: /apiKeys
    method: GET
    data_selector: apiKeys
- name: assets
  endpoint:
    path: /assets
    method: GET
    data_selector: assets
- name: comments
  endpoint:
    path: /comments
    method: GET
    data_selector: comments
- name: dataConnections
  endpoint:
    path: /dataConnections
    method: GET
    data_selector: dataConnections
- name: issues
  endpoint:
    path: /issues
    method: GET
    data_selector: issues
- name: labels
  endpoint:
    path: /labels
    method: GET
    data_selector: labels
- name: notifications
  endpoint:
    path: /notifications
    method: GET
    data_selector: notifications
- name: organizations
  endpoint:
    path: /organizations
    method: GET
    data_selector: organizations
- name: projects
  endpoint:
    path: /projects
    method: GET
    data_selector: projects
- name: users
  endpoint:
    path: /users
    method: GET
    data_selector: users
- name: annotations
  endpoint:
    path: /annotations
    method: GET
    data_selector: annotations
- name: apiKeys
  endpoint:
    path: /apiKeys
    method: GET
    data_selector: apiKeys
- name: assets
  endpoint:
    path: /assets
    method: GET
    data_selector: assets
- name: comments
  endpoint:
    path: /comments
    method: GET
    data_selector: comments
- name: dataConnections
  endpoint:
    path: /dataConnections
    method: GET
    data_selector: dataConnections
- name: issues
  endpoint:
    path: /issues
    method: GET
    data_selector: issues
- name: labels
  endpoint:
    path: /labels
    method: GET
    data_selector: labels
- name: notifications
  endpoint:
    path: /notifications
    method: GET
    data_selector: notifications
- name: organizations
  endpoint:
    path: /organizations
    method: GET
    data_selector: organizations
- name: projects
  endpoint:
    path: /projects
    method: GET
    data_selector: projects
- name: users
  endpoint:
    path: /users
    method: GET
    data_selector: users
- name: project
  endpoint:
    path: /projects
    method: GET
    data_selector: projects
- name: users
  endpoint:
    path: /users
    method: GET
    data_selector: users
- name: projects
  endpoint:
    path: /projects
    method: GET
    data_selector: projects
- name: UsageMetricsOverTime
  endpoint:
    path: /UsageMetricsOverTime
    method: GET
    data_selector: details
- name: User
  endpoint:
    path: /User
    method: GET
    data_selector: activated
- name: Vertice
  endpoint:
    path: /Vertice
    method: GET
    data_selector: x
- name: VideoClassificationAnnotation
  endpoint:
    path: /VideoClassificationAnnotation
    method: GET
    data_selector: id
- name: VideoObjectDetectionAnnotation
  endpoint:
    path: /VideoObjectDetectionAnnotation
    method: GET
    data_selector: id
- name: VideoTranscriptionAnnotation
  endpoint:
    path: /VideoTranscriptionAnnotation
    method: GET
    data_selector: id
- name: project
  endpoint:
    path: /projects
    method: GET
    data_selector: projects
- name: asset
  endpoint:
    path: /assets
    method: GET
    data_selector: assets
- name: minimum_requirements
  endpoint:
    path: /minimum-requirements
    method: GET
    data_selector: requirements
    params: {}
- name: projects
  endpoint:
    path: /api/projects
    method: GET
    data_selector: data
    params: {}
- name: assets
  endpoint:
    path: /api/assets
    method: GET
    data_selector: data
    params: {}
- name: projects
  endpoint:
    path: /api/projects
    method: POST
    data_selector: data
    params: {}
- name: add_metadata
  endpoint:
    path: /api/v1/assets/metadata
    method: POST
    data_selector: metadata
- name: append_many_to_dataset
  endpoint:
    path: /api/v1/assets
    method: POST
    data_selector: assets
- name: asset
  endpoint:
    path: /assets
    method: POST
    data_selector: assets
- name: assets
  endpoint:
    path: /v1/assets
    method: POST
    data_selector: assets
- name: integration
  endpoint:
    path: /integrations
    method: POST
    data_selector: data
- name: asset_metadata
  endpoint:
    path: /assets/metadata
    method: POST
    data_selector: metadata
    params: {}
- name: GCP Bucket Configuration
  endpoint:
    path: /config/gcp-bucket
    method: POST
    data_selector: configuration
    params: {}
- name: storage_container
  endpoint:
    path: /<STORAGE ACCOUNT>/<CONTAINER NAME>
    method: GET
    data_selector: blob_list
- name: GCP Bucket
  endpoint:
    path: /connect-gcp-bucket
    method: POST
    data_selector: bucket
    params: {}
- name: export_labels
  endpoint:
    path: /export/labels
    method: POST
- name: assets
  endpoint:
    path: /label/v2/files
    method: GET
    data_selector: assets
- name: projects
  endpoint:
    path: /projects
    method: DELETE
    data_selector: project
    params: {}
- name: export_project_labels
  endpoint:
    path: /export/labels
    method: POST
    data_selector: exported_data
    params: {}
- name: assets
  endpoint:
    path: /api/assets
    method: GET
    data_selector: records
- name: deleting_project
  endpoint:
    path: /docs/deleting-a-project
    method: DELETE
- name: labeled_assets
  endpoint:
    path: /api/v1/labeled_assets
    method: GET
    data_selector: data
    params: {}
- name: assets
  endpoint:
    path: /api/assets
    method: GET
    data_selector: records
    params: {}
- name: assets
  endpoint:
    path: /assets
    method: GET
    data_selector: records
    params: {}
- name: projects
  endpoint:
    path: /projects
    method: GET
    data_selector: records
    params: {}
- name: consensus
  endpoint:
    path: /v1/consensus
    method: POST
    data_selector: results
- name: user_roles
  endpoint:
    path: /user-roles
    method: GET
    data_selector: roles
- name: asset_queue
  endpoint:
    path: /docs/queue-page
    method: GET
    data_selector: assets
    params: {}
- name: admin
  endpoint:
    path: /docs/managing-members-of-an-organization
    method: GET
- name: user
  endpoint:
    path: /docs/users-and-roles
    method: GET
- name: labeling_jobs
  endpoint:
    path: /labeling_jobs
    method: GET
    data_selector: jobs
- name: object_entity_detection_jobs
  endpoint:
    path: /object/entity/detection/jobs
    method: GET
    data_selector: jobs
- name: project_admin
  endpoint:
    path: /projects/admin
    method: GET
- name: team_manager
  endpoint:
    path: /projects/manager
    method: GET
- name: reviewer
  endpoint:
    path: /projects/reviewer
    method: GET
- name: labeler
  endpoint:
    path: /projects/labeler
    method: GET
- name: transcription_jobs
  endpoint:
    path: /transcription/jobs
    method: GET
- name: annotations
  endpoint:
    path: /v1/annotations
    method: GET
    data_selector: annotations
    params: {}
- name: video_assets
  endpoint:
    path: /api/v1/video_assets
    method: GET
    data_selector: data
    params: {}
- name: object_entity_relation
  endpoint:
    path: /api/v1/object-entity-relation
    method: GET
    data_selector: records
- name: geospatial_images
  endpoint:
    path: /geospatial/images
    method: POST
    data_selector: data
    params: {}
- name: geospatial_images
  endpoint:
    path: /geospatial/images
    method: POST
    data_selector: data
    params: {}
- name: pose_estimation
  endpoint:
    path: /api/pose-estimation
    method: POST
    data_selector: annotations
    params: {}
- name: video_assets
  endpoint:
    path: /api/v1/video_assets
    method: GET
    data_selector: data
    params: {}
- name: geospatial_images
  endpoint:
    path: /api/v1/geospatial_images
    method: POST
    data_selector: data
    params: {}
- name: projects
  endpoint:
    path: /kili/projects
    method: GET
    data_selector: projects
- name: assets
  endpoint:
    path: /kili/assets
    method: GET
    data_selector: assets
- name: labels
  endpoint:
    path: /kili/labels
    method: GET
    data_selector: labels
- name: geospatial_images
  endpoint:
    path: /geospatial/images
    method: POST
    data_selector: data
    params: {}
- name: Asset
  endpoint:
    path: /api/assets
    method: POST
    data_selector: assets
    params: {}
- name: asset
  endpoint:
    path: /assets
    method: GET
    data_selector: records
- name: projects
  endpoint:
    path: /api/v1/projects
    method: GET
    data_selector: data
- name: assets
  endpoint:
    path: /api/v1/assets
    method: GET
    data_selector: data
- name: projects
  endpoint:
    path: /api/projects
    method: GET
    data_selector: data
    params: {}
- name: assets
  endpoint:
    path: /api/assets
    method: GET
    data_selector: data
    params: {}
- name: projects
  endpoint:
    path: /kili.projects
    method: GET
    data_selector: projects
    params:
      fields: workflowVersion
- name: assets
  endpoint:
    path: /kili.assets
    method: GET
    data_selector: assets
    params:
      step_name_in: Label
      step_status_in: TO_DO
- name: labels
  endpoint:
    path: /kili.labels
    method: GET
    data_selector: labels
    params:
      asset_step_name_in: Review
      asset_step_status_in: DONE
- name: append_labels
  endpoint:
    path: /kili.append_labels
    method: POST
    data_selector: response
    params:
      label_type: DEFAULT
      step_name: Label
- name: Asset
  endpoint:
    path: /graphql
    method: POST
    data_selector: data.assets
    params: {}
- name: Asset
  endpoint:
    path: /assets
    method: GET
    data_selector: records
- name: annotations
  endpoint:
    path: annotations
    method: GET
- name: apiKeys
  endpoint:
    path: apiKeys
    method: GET
- name: assets
  endpoint:
    path: assets
    method: GET
- name: comments
  endpoint:
    path: comments
    method: GET
- name: dataConnections
  endpoint:
    path: dataConnections
    method: GET
- name: dataIntegrations
  endpoint:
    path: dataIntegrations
    method: GET
- name: issues
  endpoint:
    path: issues
    method: GET
- name: labels
  endpoint:
    path: labels
    method: GET
- name: notifications
  endpoint:
    path: notifications
    method: GET
- name: organizations
  endpoint:
    path: organizations
    method: GET
- name: projects
  endpoint:
    path: projects
    method: GET
- name: users
  endpoint:
    path: users
    method: GET
- name: project
  endpoint:
    path: /projects
    method: GET
- name: projectUser
  endpoint:
    path: /projectUsers
    method: GET
- name: projectVersion
  endpoint:
    path: /projectVersions
    method: GET
- name: OBJECT_DETECTION_JOB
  endpoint:
    path: /reference/json-object_detection-jobs
    method: GET
    data_selector: OBJECT_DETECTION_JOB
    params: {}
- name: OBJECT_RELATION_JOB
  endpoint:
    path: /OBJECT_RELATION_JOB
    method: POST
    data_selector: content
- name: NAMED_ENTITIES_RECOGNITION
  endpoint:
    path: /reference/json-named_entities_recognition-jobs
    method: GET
    data_selector: content
    params: {}
- name: NAMED_ENTITIES_RELATION_JOB
  endpoint:
    path: /NAMED_ENTITIES_RELATION_JOB
    method: GET
    data_selector: content
    params: {}
- name: TRANSCRIPTION_JOB
  endpoint:
    path: /transcription_jobs
    method: POST
    data_selector: content
    params: {}
- name: standard_object_detection
  endpoint:
    path: /geospatialtiled-imagery
    method: GET
    data_selector: annotations
- name: object_detection_video
  endpoint:
    path: /object_detection/video
    method: POST
    data_selector: annotations
    params: {}
- name: semantic_object_geospatial
  endpoint:
    path: /semantic_object/geospatial
    method: POST
    data_selector: annotations
    params: {}
- name: pose_estimation
  endpoint:
    path: /pose_estimation
    method: POST
    data_selector: annotations
    params: {}
- name: named_entity_recognition
  endpoint:
    path: /named_entity/recognition
    method: POST
    data_selector: annotations
    params: {}
- name: annotations
  endpoint:
    path: /ner/pdf/annotations
    method: GET
    data_selector: annotations
    params: {}
- name: json_response
  endpoint:
    path: /reference/export-transcription
    method: GET
    data_selector: annotations
    params: {}
- name: annotations
  endpoint:
    path: /annotations
    method: GET
    data_selector: annotations
- name: apiKeys
  endpoint:
    path: /apiKeys
    method: GET
    data_selector: apiKeys
- name: assets
  endpoint:
    path: /assets
    method: GET
    data_selector: assets
- name: comments
  endpoint:
    path: /comments
    method: GET
    data_selector: comments
- name: dataConnections
  endpoint:
    path: /dataConnections
    method: GET
    data_selector: dataConnections
- name: issues
  endpoint:
    path: /issues
    method: GET
    data_selector: issues
- name: labels
  endpoint:
    path: /labels
    method: GET
    data_selector: labels
- name: notifications
  endpoint:
    path: /notifications
    method: GET
    data_selector: notifications
- name: organizations
  endpoint:
    path: /organizations
    method: GET
    data_selector: organizations
- name: projects
  endpoint:
    path: /projects
    method: GET
    data_selector: projects
- name: users
  endpoint:
    path: /users
    method: GET
    data_selector: users
- name: UsageMetricsOverTime
  endpoint:
    path: /usagemetricsover
    method: GET
    data_selector: details
- name: User
  endpoint:
    path: /user
    method: GET
    data_selector: users
- name: Vertice
  endpoint:
    path: /vertice
    method: GET
    data_selector: vertices
- name: VideoClassificationAnnotation
  endpoint:
    path: /videoclassificationannotation
    method: GET
    data_selector: annotations
- name: VideoObjectDetectionAnnotation
  endpoint:
    path: /videoobjectdetectionannotation
    method: GET
    data_selector: annotations
- name: VideoTranscriptionAnnotation
  endpoint:
    path: /videotranscriptionannotation
    method: GET
    data_selector: annotations
- name: CreateOrganizationData
  endpoint:
    path: /CreateOrganizationData
    method: POST
    data_selector: data
    params: {}
- name: CreatePluginData
  endpoint:
    path: /CreatePluginData
    method: POST
    data_selector: data
    params: {}
- name: CreatePluginRunnerData
  endpoint:
    path: /CreatePluginRunnerData
    method: POST
    data_selector: data
    params: {}
- name: CreatePredictionsData
  endpoint:
    path: /CreatePredictionsData
    method: POST
    data_selector: data
    params: {}
- name: CreateProjectData
  endpoint:
    path: /CreateProjectData
    method: POST
    data_selector: data
    params: {}
- name: CreateUserData
  endpoint:
    path: /CreateUserData
    method: POST
    data_selector: data
    params: {}
- name: CreateWebhookData
  endpoint:
    path: /CreateWebhookData
    method: POST
    data_selector: data
    params: {}
- name: DataConnectionComputeDifferencesPayload
  endpoint:
    path: /DataConnectionComputeDifferencesPayload
    method: POST
    data_selector: data
    params: {}
- name: DataConnectionIdWhere
  endpoint:
    path: /DataConnectionIdWhere
    method: POST
    data_selector: data
    params: {}
- name: DataConnectionInput
  endpoint:
    path: /DataConnectionInput
    method: POST
    data_selector: data
    params: {}
- name: DataConnectionsWhere
  endpoint:
    path: /DataConnectionsWhere
    method: POST
    data_selector: data
    params: {}
- name: DataDifferenceData
  endpoint:
    path: /DataDifferenceData
    method: POST
    data_selector: data
    params: {}
- name: DataDifferenceWhere
  endpoint:
    path: /DataDifferenceWhere
    method: POST
    data_selector: data
    params: {}
- name: DataIntegrationData
  endpoint:
    path: /DataIntegrationData
    method: POST
    data_selector: data
    params: {}
- name: DataIntegrationWhere
  endpoint:
    path: /DataIntegrationWhere
    method: POST
    data_selector: data
    params: {}
- name: DeclineAdmissionRequest
  endpoint:
    path: /DeclineAdmissionRequest
    method: POST
    data_selector: data
    params: {}
- name: DeleteLocksInput
  endpoint:
    path: /DeleteLocksInput
    method: POST
    data_selector: data
    params: {}
- name: DeletePluginWhere
  endpoint:
    path: /DeletePluginWhere
    method: POST
    data_selector: data
    params: {}
- name: FetchAndUpdateOCRJsonMetadataData
  endpoint:
    path: /FetchAndUpdateOCRJsonMetadataData
    method: POST
    data_selector: data
    params: {}
- name: FrameIntervalInput
  endpoint:
    path: /FrameIntervalInput
    method: POST
    data_selector: data
    params: {}
- name: GenerateUpdateUrlData
  endpoint:
    path: /GenerateUpdateUrlData
    method: POST
    data_selector: data
    params: {}
- name: GetPluginBuildErrorsData
  endpoint:
    path: /GetPluginBuildErrorsData
    method: POST
    data_selector: data
    params: {}
- name: OBJECT_DETECTION_JOB
  endpoint:
    path: /reference/json-object_detection-jobs
    method: GET
    data_selector: OBJECT_DETECTION_JOB
    params: {}
- name: OBJECT_RELATION_JOB
  endpoint:
    path: /reference/json-object_relation-jobs
    method: GET
    data_selector: content
    params: {}
- name: NAMED_ENTITIES_RECOGNITION_JOB
  endpoint:
    path: /reference/json-named_entities_recognition-jobs
    method: GET
    data_selector: content
- name: NAMED_ENTITIES_RELATION_JOB
  endpoint:
    path: /named_entities_relation_jobs
    method: POST
    data_selector: content
    params: {}
- name: TRANSCRIPTION_JOB
  endpoint:
    path: /reference/json-transcription-jobs
    method: GET
    data_selector: content
    params: {}
- name: annotations
  endpoint:
    path: /geospatial/annotations
    method: GET
    data_selector: annotations
    params: {}
- name: object_detection_video
  endpoint:
    path: /object_detection/video
    method: GET
    data_selector: jsonResponse
- name: semantic_object_geospatial
  endpoint:
    path: /semantic/object/geospatial
    method: GET
    data_selector: jsonResponse
- name: pose_estimation
  endpoint:
    path: /pose/estimation
    method: GET
    data_selector: jsonResponse
- name: named_entity_recognition
  endpoint:
    path: /named/entity/recognition
    method: GET
    data_selector: json_response
- name: annotations
  endpoint:
    path: /ner/pdfs/annotations
    method: GET
    data_selector: NAMED_ENTITIES_RECOGNITION_JOB.annotations
    params: {}
- name: transcription_jobs
  endpoint:
    path: /reference/export-transcription
    method: GET
    data_selector: json_response
    params: {}
notes:
- A Kili API key has a one-year lifespan. You will be warned 30 days before the expiry
  of your api key that you must create a new one.
- Requires setup of connected app in Kili
- Kili Technology provides tools for creating annotations on Images, Videos, PDFs,
  and Text.
- Users belong to an organization and can create projects.
- Deactivated users cannot log in to Kili Technology.
- OAuth2 with refresh token is required for API access.
- Ad blockers with strict configuration can cause Kili app to malfunction.
- Some extensions may interfere with Kili app (resulting in various features not working).
- Other browsers may still work with Kili; we do not guarantee that everything will
  be working correctly, though.
- Minimum configuration for 20 labelers or 5 reviewers requires a Kubernetes cluster
  of at least 3 nodes for high availability (4 CPU and 12 GB RAM per node).
- PostgreSQL v14 server (4 CPU, 16GB RAM, 100GB storage) with TimescaleDB plugin community
  edition version 2.19.x installed is required for the database.
- Kili Technology is optimized to run on Google Chrome and other Chromium-based browsers.
- Standard authentication method is secure multi-factor authentication using e-mail,
  password and an authenticator app.
- You can also authenticate using the SSO options provided by GitHub or Google.
- Minimum configuration for 20 labelers or 5 reviewers includes a Kubernetes cluster
  of at least 3 nodes for high availability (4 CPU and 12 GB RAM per node).
- For increased security, after one hour of inactivity you will be logged out and
  have to log back in.
- Maximum number of assets in a project is 25,000.
- Maximum number of members per project is limited to 50.
- Creating large projects with lots of labeling jobs is not efficient.
- Projects are created inside an organization.
- Only invited users can contribute.
- Some API responses may contain null values in certain fields
- Requires API key for authentication
- Uses OAuth2 with refresh token — requires setup of connected app in Kili
- Some objects may return nulls in deeply nested fields
- Uses API key for authentication
- Reviewers and labelers can only access analytics data about their own work.
- Available actions may differ depending on user role.
- Only organization members with role set to admin can create projects.
- From the Kili landing page (list of projects), you can search for any asset located
  in any project that you have access to by using the asset’s name (external id).
- The maximum number of assets in a project is 25,000.
- For video projects, to have a smooth interface, work on videos with less than 1,000
  frames.
- Only organization members with role set to `admin` can create projects.
- Asset type is a critical choice. You won't be able to change it later.
- Using Kili API requires proper cloud CORS settings for image hosting.
- Check CORS settings for cloud-hosted images used in asset metadata
- When you import video assets, Kili runs some backend checks on the files (for example,
  to determine the frame rate). In on-prem configurations where the Kili app and video
  files are hosted in different places and Kili backend has no access to these files
  the video upload fails.
- If the local server is down, you will lose access to your data while using Kili
  Technology.
- To provide external users access to the data and to set up localhost as your file
  server, it's necessary to display your localhost on the Internet.
- Only organization admins can manage remote integrations.
- This integration uses Blob Storage only.
- If you’re using a cloud service to host the images used for asset metadata, check
  if your cloud CORS settings are configured properly.
- When dealing with multiple AWS integrations in Kili, you can make AWS IAM admin
  tasks easier by reusing a common role (and so using a unique role external id) or
  updating a common policy to list all buckets used in Kili.
- If more than 1,000 folders exist in the same directory, Kili won't be able to list
  them all.
- CORS permissions need to be set to allow Kili front-end to fetch files.
- If you’re using a cloud service to host the images used for asset metadata, check
  if your cloud CORS settings are configured properly. If the CORS settings are misconfigured,
  the images will not show on screen.
- Path restrictions are not yet available for GCP.
- 'To streamline your cloud storage synchronization process, leverage the following
  filters: prefix, include, and exclude.'
- Maximum number of members per project is limited to 100.
- Customization can be done through UI-based interface builder or JSON settings.
- Smart tools like interactive segmentation are not supported in this mode.
- If this option is available, enable Internet access (without public access).
- To reuse your JSON settings with a different project, simply copy file contents
  and paste them in the other project.
- You must set up CORS on the bucket. Otherwise assets will not load in the Kili UI.
- If your project is linked to a cloud storage, the exported file will only contain
  labels, no assets.
- Prefix filter must be complete and end with a /.
- Wildcard support isn't available in the prefix field.
- The default export type is a JSON file, with Google API format (`jsonResponse`).
- You can anonymize labelers’ and reviewers’ names.
- YOLO v4 format only works with Image or Video asset type projects that contain bounding
  box annotations. Exporting other annotation types to YOLOv4 will fail.
- YOLO v5 to v8 format only works with Image asset type projects that contain bounding
  box annotations. Exporting other annotation types to YOLOv5 to v8 will fail.
- From the SDK, dedicated options are available for each version. Refer to Kili SDK
  documentation.
- If you want to export labels created using polygons and semantic object detection,
  you must use the Kili SDK.
- PASCAL VOC format only works with Image or Video asset type projects that contain
  bounding box annotations. Exporting other annotation types to PASCAL VOC will fail.
- This format is also not supported when using Cloud Storage.
- You can customize your interface through the UI-based interface builder or through
  JSON settings.
- Currently, some customizations can only be done using the JSON interface.
- Only project admins and project managers have access to this feature.
- To improve the quality of generated labels, we recommend annotating some assets
  manually before pre-annotating the dataset with ChatGPT, and avoiding categories
  that are too ambiguous like 'other' or 'miscellaneous'.
- All users, including labelers can use project tags to quickly filter the list of
  visible projects.
- You can write instructions in a public web document (for example, a Google Doc,
  a Notion page, an Office 365 document, a web page, etc.) and add the link here.
- We do not yet offer hosting for this content.
- Adding metadata for transcription jobs is not supported.
- If an asset is sent back to queue, it gets top labeling priority.
- PASCAL VOC format only works with Image or Video asset type projects that contain
  bounding box annotations.
- Exporting other annotation types to PASCAL VOC will fail.
- Kili app manages a queue for each project.
- Deleting the project is irreversible. All project-related data will be removed from
  the database. If the project data may be useful in the future, we recommend archiving
  it.
- Metrics related to a deleted project are still aggregated and kept for billing purposes.
- Ensure to handle OAuth token expiration properly.
- Active learning reduces the number of samples to label by up to 50%
- Increases accuracy from 78% to 85% in demo use case
- You can run custom search queries to retrieve specific assets.
- By default, when you select several filters, the result will be a combined filter
  (AND behavior).
- This type of filtering does not work with transcription jobs.
- If you change the consensus settings in an ongoing project, only the unlabeled assets
  (with status `TODO`) will be distributed to labelers according to the new setup.
- Honeypot works by interspersing assets with defined ground truth label in the annotation
  queue.
- You can decide whether or not a specific labeling job is taken into account when
  calculating honeypot, by using the isIgnoredForMetricsComputations settings.
- To get best results, set up honeypot before labelers start working on a project.
- Assets with no labels ('To do' status) cannot be set as honeypot.
- To speed up the review for images or short bits of text, you can open your Text
  or Image project in the thumbnail view.
- You can select a portion of the labeled assets to be randomly selected for review.
- This feature is currently in private beta and is not enabled by default.
- In some Kili configurations, users are not allowed to create, archive, or delete
  projects.
- Note that assets with no labels ('To do' status) cannot be set as honeypot.
- Availability of specific job types depends on your project asset type.
- For relation labeling to work properly, you must configure at least one relation.
- If an asset’s status changes to 'To review', labelers are no longer allowed to make
  any changes to the labels in that asset.
- You can copy the contents of a text entity by double-clicking on it in the job viewer.
  You'll be able to paste it somewhere else, without the need for manual text input.
- When finished with Named Entity Recognition, you can perform another related task
  called Named Entities Relation.
- Pose estimation annotation is about detecting the position and orientation of an
  object.
- Before you start labeling, make sure that you configured your interface correctly.
- For geospatial/tiled imagery, same labeling tools apply as with standard Image-type
  projects.
- The API supports a variety of video formats.
- Some tools may have a limited feature set.
- Some transcription jobs may impose limits on the allowed input types. For example,
  allowing only numbers or dates.
- Geospatial projects are currently in beta upon request.
- Supports geospatial data with high resolution and large file sizes.
- Maximum file size for uploads is 1 GB.
- To quickly modify the class of an entity, without losing the related relations,
  you can just click on the entity, and select the new token to identify it. The relation
  will be updated accordingly.
- To control how relations are displayed, adjust your visibility settings for your
  labeling environment.
- Access is limited to a restricted group of users as we continue to refine and improve
  the experience.
- Make sure that you configured your interface correctly.
- Geospatial projects are currently available in Private beta.
- Geospatial projects support GeoTIFF-based formats, including .tif, .jp2, and .ntf.
- Recommended file size for optimal performance is under 5GB.
- Kili's Video interface offers many additional video-specific features and workflows
  to easily process the labels that were added.
- An API key has a one-year lifespan. You will be warned 30 days before the expiry
  of your api key that you must create a new one.
- Our API implements a dual complexity system to ensure optimal performance and prevent
  resource exhaustion.
- New Geospatial Projects are available in beta upon request.
- The new workflow will only apply to newly created projects.
- Supports GeoTiff images, including .tif, .jp2, and .ntf files.
- Maximum file size is 1 GB per file.
- Supports EPSG4326 and EPSG3857 projection systems.
- Private Beta feature — access is limited to a restricted group of users.
- Create and copy a Kili API key
- Add the KILI_API_KEY variable in your bash environment
- Geospatial projects are currently available in Private beta. To request access,
  please contact our team.
- While launching commands, you can also provide you API key through the `--api-key`
  option.
- Larger files are supported thanks to dynamic tiling and streaming, but performance
  may vary based on connection speed and system resources.
- Ensure to have the correct permissions set on your API key.
- Renaming jobs and/or categories after a project has started is currently not supported
  by Kili. The existing labels refer to the pre-change interface, so there will very
  likely be a mismatch.
- If you still want to edit the project owner, contact support@kili-technology.com.
- Tiles are dynamically loaded from the image source, so loading time may vary based
  on several factors.
- Requires authentication via OAuth2
- Queries with static complexity > 5,000 are rejected.
- When dynamic complexity exceeds a threshold during execution, the query is terminated
  with an error.
- User must use the Kili Solution in accordance with Kili Terms and Conditions.
- Kili may suspend or terminate User’s access if obligations under the AUP are violated.
- You only need Python 3.9 or higher.
- Asset data can be images, text, videos, or pdf.
- While launching commands, you can also provide your API key through the --api-key
  option.
- Renaming jobs and/or categories after a project has started is currently not supported
  by Kili.
- Uses OAuth2 with refresh token — requires setup of connected app in api
- Some objects like Contact may return nulls in deeply nested fields
- API key required for access
- Ensure to set up OAuth2 credentials for accessing the API.
- Uses API key for authentication.
- Refer to documentation for detailed API usage.
- Requires setup of a connected app in Kili
- Some API responses may have specific data format requirements
- Some projects may require specific permissions for data access
- Some API methods may have rate limits
- For information on how to use object relation in real-life labeling projects, refer
  to Object/entity relation jobs.
- Refer to Generic JSON template for general information on the JSON structure.
- Requires API key for access
- Annotations work with coordinates of the polygon that the data belongs to and the
  page number.
- Some responses may contain nulls in deeply nested fields
- For information on how to use object detection in real-life labeling projects, refer
  to Object/entity detection jobs.
- Refer to Object/entity relation jobs for information on how to use object relation
  in real-life labeling projects.
- For information on how to use named entities recognition in real-life labeling projects,
  refer to Object/entity detection jobs.
- The structure of the transcription type job does not contain any categories.
- 'In Image semantic segmentation projects, the interactive segmentation tool does
  not work with the following formats: .ico, .webp, .gif, .tif/.tiff, .ntf, .jp2'
- If you want to use the CSV format, you must upload it programmatically.
errors:
- 'REQUEST_LIMIT_EXCEEDED: Throttle API calls or reduce frequency'
- '401 Unauthorized: Recheck OAuth scopes or token expiration'
- '401 Unauthorized: Check your API key or OAuth token.'
- '404 Not Found: Verify the endpoint or resource ID.'
- '404 Not Found: Check if the resource exists'
- '401 Unauthorized: Check your credentials or token expiration.'
- '404 Not Found: The requested resource could not be found.'
- Some labeling projects require more resources than others.
- 'QUERY_TIMEOUT: Break down filters or add selectivity'
- '401 Unauthorized: Recheck API key or token expiration'
- '401 Unauthorized: Check your credentials or token.'
- 'FILE_SIZE_EXCEEDED: Ensure file is under 1 GB.'
- 'UNSUPPORTED_FORMAT: Check if the file format is supported.'
- 'Query is too complex: [complexity_score]. Maximum allowed complexity: 5,000'
- 'Dynamic complexity limit exceeded: query is too complex, try to reduce the number
  of nested fields or the amount of data requested.'
- '403 Forbidden: Check your permissions or API key.'
- '400 Bad Request: Ensure your request parameters are valid.'
- 'PROJECT_NOT_FOUND: Check the project ID.'
- 'INVALID_PARAMETER: Verify the parameters supplied.'
- 'UNAUTHORIZED: Check your API key or authentication method.'
- '400 Bad Request: Check the format and size of the uploaded file.'
- '401 Unauthorized: Recheck OAuth tokens or permissions.'
- '413 Payload Too Large: Reduce the size of the uploaded file.'
- '403: request not authorized'
- '404: resource not found'
- '401 Unauthorized: Recheck OAuth tokens or scopes.'
- '403 Forbidden: Check user permissions for the requested resource.'
- '404 Not Found: Ensure the endpoint exists and is correctly specified.'
- Some objects located in an S3 bucket are not being detected
- .ogv; .mpeg
auth_info:
  mentioned_objects:
  - OauthToken
  - AuthProvider
  - NamedCredential
  - User
  - Project
  - Auth0
  - oauth2
client:
  base_url: https://api.kili-technology.com
  auth:
    type: oauth2
    flow: refresh_token
    token_url: https://login.kili-technology.com/oauth/token
    client_id: '{{ dlt.secrets[''kili_client_id''] }}'
    client_secret: '{{ dlt.secrets[''kili_client_secret''] }}'
    refresh_token: '{{ dlt.secrets[''kili_refresh_token''] }}'
    location: header
    header_name: Authorization
  headers:
    Accept: application/json
source_metadata: null
