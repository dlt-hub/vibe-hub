resources:
- name: check_gate
  endpoint:
    path: /check_gate
    method: GET
- name: gates
  endpoint:
    path: /console/v1/gates
    method: GET
    params:
      type: STALE
      limit: 10
- name: custom_unit_ids
  endpoint:
    path: /custom_unit_ids
    method: GET
    data_selector: customUnitIDs
    params: {}
- name: experiments
  endpoint:
    path: /experiments
    method: GET
    data_selector: experiments
    params: {}
- name: otlp
  endpoint:
    path: /otlp
    method: POST
    data_selector: telemetry
- name: Feature Gates
  endpoint:
    path: /feature-flags
    method: GET
    data_selector: records
- name: Feature Gates
  endpoint:
    path: /feature-gates
    method: GET
    data_selector: gates
- name: Dynamic Configs
  endpoint:
    path: /dynamic-configs
    method: GET
    data_selector: configs
- name: Experiments
  endpoint:
    path: /experiments
    method: GET
    data_selector: experiments
- name: Layers
  endpoint:
    path: /layers
    method: GET
    data_selector: layers
- name: log_event
  endpoint:
    path: /v1/rgstr
    method: POST
    data_selector: events
    params: {}
- name: initialize
  endpoint:
    path: /v1/initialize
    method: POST
    data_selector: initialization
    params: {}
- name: feature_gate
  endpoint:
    path: /feature-gates
    method: GET
    data_selector: gates
    params: {}
- name: dynamic_config
  endpoint:
    path: /dynamic-configs
    method: GET
    data_selector: configs
    params: {}
- name: experiment_layer
  endpoint:
    path: /experiments
    method: GET
    data_selector: experiments
    params: {}
- name: log_event
  endpoint:
    path: /v1/log_event
    method: POST
- name: initialize
  endpoint:
    path: /v1/initialize
    method: POST
- name: feature_gate
  endpoint:
    path: /feature-gate
    method: GET
    data_selector: feature_gate
- name: dynamic_config
  endpoint:
    path: /dynamic-config
    method: GET
    data_selector: dynamic_config
- name: experiment
  endpoint:
    path: /experiment
    method: GET
    data_selector: experiment
- name: Feature Gates
  endpoint:
    path: /checkGate
    method: GET
    data_selector: gate
    params: {}
- name: Dynamic Configs
  endpoint:
    path: /getConfig
    method: GET
    data_selector: config
    params: {}
- name: Layers/Experiments
  endpoint:
    path: /getLayer
    method: GET
    data_selector: layer
    params: {}
- name: Log Events
  endpoint:
    path: /logEvent
    method: POST
    data_selector: event
    params: {}
- name: feature_gate
  endpoint:
    path: /v1/gates
    method: GET
    data_selector: gates
- name: dynamic_config
  endpoint:
    path: /v1/configs
    method: GET
    data_selector: configs
- name: experiment
  endpoint:
    path: /v1/experiments
    method: GET
    data_selector: experiments
- name: layer
  endpoint:
    path: /v1/layers
    method: GET
    data_selector: layers
- name: feature_gate
  endpoint:
    path: /feature-gates
    method: GET
- name: dynamic_config
  endpoint:
    path: /dynamic-configs
    method: GET
- name: layer
  endpoint:
    path: /layers
    method: GET
- name: event_logging
  endpoint:
    path: /events
    method: POST
- name: Feature Gates
  endpoint:
    path: /gates
    method: GET
- name: Dynamic Configs
  endpoint:
    path: /configs
    method: GET
- name: Layers/Experiments
  endpoint:
    path: /layers
    method: GET
- name: Logging Events
  endpoint:
    path: /events
    method: POST
- name: checkGate
  endpoint:
    path: /checkGate
    method: GET
    data_selector: boolean
- name: getDynamicConfig
  endpoint:
    path: /getDynamicConfig
    method: GET
    data_selector: DynamicConfig
- name: getExperiment
  endpoint:
    path: /getExperiment
    method: GET
    data_selector: DynamicConfig
- name: getLayer
  endpoint:
    path: /getLayer
    method: GET
    data_selector: Layer
- name: getFeatureGate
  endpoint:
    path: /getFeatureGate
    method: GET
    data_selector: FeatureGate
- name: getParameterStore
  endpoint:
    path: /getParameterStore
    method: GET
    data_selector: ParameterStore
- name: getPrompt
  endpoint:
    path: /getPrompt
    method: GET
    data_selector: Prompt
- name: getPromptSet
  endpoint:
    path: /getPromptSet
    method: GET
    data_selector: PromptSet
- name: logEvent
  endpoint:
    path: /logEvent
    method: POST
    data_selector: void
- name: forwardLogLineEvent
  endpoint:
    path: /forwardLogLineEvent
    method: POST
    data_selector: void
- name: manuallyLogGateExposure
  endpoint:
    path: /manuallyLogGateExposure
    method: POST
    data_selector: void
- name: manuallyLogDynamicConfigExposure
  endpoint:
    path: /manuallyLogDynamicConfigExposure
    method: POST
    data_selector: void
- name: manuallyLogExperimentExposure
  endpoint:
    path: /manuallyLogExperimentExposure
    method: POST
    data_selector: void
- name: manuallyLogLayerParameterExposure
  endpoint:
    path: /manuallyLogLayerParameterExposure
    method: POST
    data_selector: void
- name: getClientInitializeResponse
  endpoint:
    path: /getClientInitializeResponse
    method: GET
    data_selector: ClientInitializeResponse
- name: shutdown
  endpoint:
    path: /shutdown
    method: POST
    data_selector: void
- name: feature_gate
  endpoint:
    path: /feature_gate
    method: GET
    data_selector: gate
- name: dynamic_config
  endpoint:
    path: /dynamic_config
    method: GET
    data_selector: config
- name: experiment
  endpoint:
    path: /experiment
    method: GET
    data_selector: experiment
- name: prompt
  endpoint:
    path: /prompt
    method: GET
    data_selector: prompt
- name: prompt_set
  endpoint:
    path: /prompt_set
    method: GET
    data_selector: prompt_set
- name: parameter_store
  endpoint:
    path: /parameter_store
    method: GET
    data_selector: parameter_store
- name: log_event
  endpoint:
    path: /log_event
    method: POST
    data_selector: records
- name: forward_log_line_event
  endpoint:
    path: /forward_log_line_event
    method: POST
    data_selector: records
- name: check_gate
  endpoint:
    path: /check_gate
    method: POST
    data_selector: records
- name: log_event
  endpoint:
    path: /log_event
    method: POST
    data_selector: records
- name: forward_log_line_event
  endpoint:
    path: /forward_log_line_event
    method: POST
    data_selector: records
- name: user_fields_for_gate
  endpoint:
    path: /getFieldsNeededForGate
    method: GET
    data_selector: ''
    params: {}
- name: user_fields_for_dynamic_config
  endpoint:
    path: /getFieldsNeededForDynamicConfig
    method: GET
    data_selector: ''
    params: {}
- name: user_fields_for_experiment
  endpoint:
    path: /getFieldsNeededForExperiment
    method: GET
    data_selector: ''
    params: {}
- name: user_fields_for_layer
  endpoint:
    path: /getFieldsNeededForLayer
    method: GET
    data_selector: ''
    params: {}
- name: feature_gate
  endpoint:
    path: /feature-gates
    method: GET
    data_selector: gates
    params: {}
- name: dynamic_config
  endpoint:
    path: /dynamic-configs
    method: GET
    data_selector: configs
    params: {}
- name: get_experiment
  endpoint:
    path: /api/v1/experiment
    method: GET
    data_selector: experiment_data
- name: get_dynamic_config
  endpoint:
    path: /api/v1/dynamic_config
    method: GET
    data_selector: config_data
- name: get_layer
  endpoint:
    path: /api/v1/layer
    method: GET
    data_selector: layer_data
- name: feature_gate
  endpoint:
    path: /feature-gate
    method: GET
- name: dynamic_config
  endpoint:
    path: /dynamic-config
    method: GET
- name: layer
  endpoint:
    path: /layer
    method: GET
- name: feature_gate
  endpoint:
    path: /v1/feature_gate
    method: GET
    data_selector: feature_gate
- name: dynamic_config
  endpoint:
    path: /v1/dynamic_config
    method: GET
    data_selector: dynamic_config
- name: layer_experiment
  endpoint:
    path: /v1/layer
    method: GET
    data_selector: layer
- name: prompt
  endpoint:
    path: /v1/prompt
    method: GET
    data_selector: prompt
- name: prompt_set
  endpoint:
    path: /v1/prompt_set
    method: GET
    data_selector: prompt_set
- name: feature_gate
  endpoint:
    path: /v1/feature_gate
    method: GET
    data_selector: data
    params: {}
- name: dynamic_config
  endpoint:
    path: /v1/dynamic_config
    method: GET
    data_selector: data
    params: {}
- name: layer
  endpoint:
    path: /v1/layer
    method: GET
    data_selector: data
    params: {}
- name: prompt
  endpoint:
    path: /v1/prompt
    method: GET
    data_selector: data
    params: {}
- name: Feature Gates
  endpoint:
    path: /v1/feature_gate
    method: GET
    data_selector: gate
    params: {}
- name: Dynamic Configs
  endpoint:
    path: /v1/dynamic_config
    method: GET
    data_selector: config
    params: {}
- name: Experiments
  endpoint:
    path: /v1/experiment
    method: GET
    data_selector: experiment
    params: {}
- name: Layers
  endpoint:
    path: /v1/layer
    method: GET
    data_selector: layer
    params: {}
- name: feature_gate
  endpoint:
    path: /feature_gate
    method: GET
    data_selector: gate
- name: dynamic_config
  endpoint:
    path: /dynamic_config
    method: GET
    data_selector: config
- name: layer_experiment
  endpoint:
    path: /layer_experiment
    method: GET
    data_selector: layer
- name: client_initialize_response
  endpoint:
    path: /statsig-bootstrap
    method: GET
    data_selector: statsigValues
- name: feature_gate
  endpoint:
    path: /feature_gate
    method: GET
    data_selector: gate
- name: dynamic_config
  endpoint:
    path: /dynamic_config
    method: GET
    data_selector: config
- name: experiment
  endpoint:
    path: /experiment
    method: GET
    data_selector: experiment
- name: layer
  endpoint:
    path: /layer
    method: GET
    data_selector: layer
- name: prompt
  endpoint:
    path: /prompt
    method: GET
    data_selector: prompt
- name: parameter_store
  endpoint:
    path: /parameter_store
    method: GET
    data_selector: parameter
- name: feature_gate
  endpoint:
    path: /v1/feature_gate
    method: GET
    data_selector: feature
    params: {}
- name: dynamic_config
  endpoint:
    path: /v1/dynamic_config
    method: GET
    data_selector: config
    params: {}
- name: event_logging
  endpoint:
    path: /v1/log_event
    method: POST
    data_selector: event
    params: {}
- name: layer_experiment
  endpoint:
    path: /v1/layer_experiment
    method: GET
    data_selector: layer
    params: {}
- name: Feature Gate
  endpoint:
    path: /check_gate
    method: POST
    data_selector: result
- name: Dynamic Config
  endpoint:
    path: /get_config
    method: POST
    data_selector: result
- name: Layer/Experiment
  endpoint:
    path: /get_layer
    method: POST
    data_selector: result
- name: Log Event
  endpoint:
    path: /log_event
    method: POST
    data_selector: result
- name: event
  endpoint:
    path: /event
    method: POST
    data_selector: event
    params: {}
- name: feature_gate
  endpoint:
    path: /feature_gate
    method: GET
    data_selector: feature_gate
    params: {}
- name: dynamic_config
  endpoint:
    path: /dynamic_config
    method: GET
    data_selector: dynamic_config
    params: {}
- name: download_config_specs
  endpoint:
    path: /v2/download_config_specs/
    method: GET
- name: log_event
  endpoint:
    path: /v1/log_event
    method: POST
- name: get_id_lists
  endpoint:
    path: /v1/get_id_lists
    method: GET
- name: feature_gate
  endpoint:
    path: /feature_gate
    method: GET
    data_selector: records
- name: dynamic_config
  endpoint:
    path: /dynamic_config
    method: GET
    data_selector: records
- name: experiment
  endpoint:
    path: /experiment
    method: GET
    data_selector: records
- name: event_logging
  endpoint:
    path: /log_event
    method: POST
    data_selector: records
- name: feature_gate
  endpoint:
    path: /feature_gate
    method: GET
    data_selector: gate
    params: {}
- name: dynamic_config
  endpoint:
    path: /dynamic_config
    method: GET
    data_selector: config
    params: {}
- name: experiment
  endpoint:
    path: /experiment
    method: GET
    data_selector: experiment
    params: {}
- name: layer
  endpoint:
    path: /layer
    method: GET
    data_selector: layer
    params: {}
- name: log_event
  endpoint:
    path: /log_event
    method: POST
    data_selector: event
    params: {}
- name: Feature Gate
  endpoint:
    path: /feature-gate
    method: GET
    data_selector: gate
    params: {}
- name: Dynamic Config
  endpoint:
    path: /dynamic-config
    method: GET
    data_selector: config
    params: {}
- name: Layer
  endpoint:
    path: /layer
    method: GET
    data_selector: layer
    params: {}
- name: Feature Gates
  endpoint:
    path: /v1/gates
    method: GET
    data_selector: gates
- name: Dynamic Configs
  endpoint:
    path: /v1/configs
    method: GET
    data_selector: configs
- name: Experiments
  endpoint:
    path: /v1/experiment
    method: GET
    data_selector: experiments
- name: feature_gate
  endpoint:
    path: /feature-gate
    method: GET
    data_selector: gate
    params: {}
- name: dynamic_config
  endpoint:
    path: /dynamic-config
    method: GET
    data_selector: config
    params: {}
- name: experiment
  endpoint:
    path: /experiment
    method: GET
    data_selector: experiment
    params: {}
- name: feature_gate
  endpoint:
    path: /feature_gate
    method: GET
    data_selector: feature_gate
- name: dynamic_config
  endpoint:
    path: /dynamic_config
    method: GET
    data_selector: dynamic_config
- name: experiment
  endpoint:
    path: /experiment
    method: GET
    data_selector: experiment
- name: layer
  endpoint:
    path: /layer
    method: GET
    data_selector: layer
- name: log_event
  endpoint:
    path: /v1/log_event
    method: POST
    data_selector: events
- name: Sidecar
  endpoint:
    path: /guides/sidecar-experiments
    method: GET
    data_selector: experiments
- name: event_logging
  endpoint:
    path: /v1/log_event
    method: POST
    data_selector: events
- name: events
  endpoint:
    path: /events
    method: POST
    data_selector: events
- name: user
  endpoint:
    path: /identify-users
    method: POST
    data_selector: userObject
- name: identify_users
  endpoint:
    path: /identify_users
    method: POST
    data_selector: user
    params: {}
- name: feature_gate
  endpoint:
    path: /gates
    method: GET
    data_selector: gates
    params: {}
- name: client_api_key
  endpoint:
    path: /api_keys
    method: GET
    data_selector: api_keys
    params: {}
- name: experiment
  endpoint:
    path: /experiments
    method: GET
    data_selector: experiments
- name: feature_gate
  endpoint:
    path: /gates
    method: GET
    data_selector: gates
- name: api_key
  endpoint:
    path: /api_keys
    method: GET
    data_selector: api_keys
- name: experiment
  endpoint:
    path: /experiments
    method: GET
    data_selector: experiments
- name: user
  endpoint:
    path: /sdk/user
    method: POST
    data_selector: user
    params: {}
- name: user
  endpoint:
    path: /api/v1/user
    method: POST
    data_selector: data
    params: {}
- name: client_initialization
  endpoint:
    path: /client/concepts/initialize
    method: GET
- name: data
  endpoint:
    path: /http-api/overview
    method: GET
    data_selector: records
- name: feature_gate
  endpoint:
    path: /check_gate
    method: POST
    data_selector: data
- name: dynamic_config
  endpoint:
    path: /get_dynamic_config
    method: POST
    data_selector: data
- name: experiment
  endpoint:
    path: /get_experiment
    method: POST
    data_selector: data
- name: parameter_store
  endpoint:
    path: /get_parameter_store
    method: POST
    data_selector: data
- name: feature_gate
  endpoint:
    path: /feature_gate
    method: GET
    data_selector: records
- name: dynamic_config
  endpoint:
    path: /dynamic_config
    method: GET
    data_selector: records
- name: experiment
  endpoint:
    path: /experiment
    method: GET
    data_selector: records
- name: parameter_store
  endpoint:
    path: /parameter_store
    method: GET
    data_selector: records
- name: Feature Gates
  endpoint:
    path: /api/feature_gate
    method: GET
- name: Dynamic Configs
  endpoint:
    path: /api/dynamic_config
    method: GET
- name: Layers/Experiments
  endpoint:
    path: /api/layer
    method: GET
- name: Logging Events
  endpoint:
    path: /api/log_event
    method: POST
- name: feature_gate
  endpoint:
    path: /v1/check_gate
    method: POST
    data_selector: gate_value
- name: dynamic_config
  endpoint:
    path: /v1/get_dynamic_config
    method: POST
    data_selector: config
- name: experiment
  endpoint:
    path: /v1/get_experiment
    method: POST
    data_selector: experiment
- name: layer
  endpoint:
    path: /v1/get_layer
    method: POST
    data_selector: layer
- name: log_event
  endpoint:
    path: /v1/log_event
    method: POST
    data_selector: log_result
- name: download_config_specs
  endpoint:
    path: /v2/download_config_specs/
    method: GET
- name: log_event
  endpoint:
    path: /v1/log_event
    method: POST
- name: get_id_lists
  endpoint:
    path: /v1/get_id_lists
    method: GET
- name: EvaluationOptions
  endpoint:
    path: /options
    method: GET
    data_selector: options
    params: {}
- name: ClientInitResponseOptions
  endpoint:
    path: /clientInitResponseOptions
    method: GET
    data_selector: clientInitResponseOptions
    params: {}
- name: feature_gate
  endpoint:
    path: /v1/check_gate
    method: POST
    data_selector: gate_value
- name: dynamic_config
  endpoint:
    path: /v1/get_dynamic_config
    method: POST
    data_selector: config
- name: experiment
  endpoint:
    path: /v1/get_experiment
    method: POST
    data_selector: experiment
- name: layer
  endpoint:
    path: /v1/get_layer
    method: POST
    data_selector: layer
- name: log_event
  endpoint:
    path: /v1/log_event
    method: POST
    data_selector: event_response
- name: persistent_storage
  endpoint:
    path: /client/concepts/persistent_assignment
    method: GET
    data_selector: persistent_storage
    params: {}
- name: persistent_assignment
  endpoint:
    path: /client/concepts/persistent_assignment
    method: GET
    data_selector: records
- name: DataAdapter
  endpoint:
    path: /v1/download_config_specs
    method: GET
    data_selector: config_specs
- name: id_lists
  endpoint:
    path: /v1/get_id_lists
    method: GET
    data_selector: id_lists
- name: gates
  endpoint:
    path: /gates
    method: GET
    data_selector: gates
    params: {}
- name: experiments
  endpoint:
    path: /experiments
    method: GET
    data_selector: experiments
    params: {}
- name: dynamic_configs
  endpoint:
    path: /dynamic_configs
    method: GET
    data_selector: dynamic_configs
    params: {}
- name: segments
  endpoint:
    path: /segments
    method: GET
    data_selector: segments
    params: {}
- name: gates
  endpoint:
    path: /gates
    method: GET
    data_selector: gates
- name: gates
  endpoint:
    path: /gates
    method: POST
    data_selector: response
    params: {}
- name: feature_gates
  endpoint:
    path: /feature-gates/check-feature-gates
    method: POST
    data_selector: data
- name: topline_alerts
  endpoint:
    path: /console/v1/alerts
    method: GET
    data_selector: data
    params:
      limit: '10'
      page: '1'
- name: user
  endpoint:
    path: /v1/user
    method: GET
    data_selector: data
    params: {}
- name: audit_logs
  endpoint:
    path: /audit_logs
    method: GET
    data_selector: data
    params: {}
- name: audit_logs
  endpoint:
    path: /v1/audit_logs
    method: GET
    data_selector: data
    params: {}
- name: autotunes
  endpoint:
    path: /autotunes
    method: GET
    data_selector: data
    params:
      limit: '10'
      page: '1'
- name: topline_alerts
  endpoint:
    path: /alerts
    method: GET
    data_selector: data
    params: {}
- name: audit_logs
  endpoint:
    path: /console/v1/audit_logs
    method: GET
    data_selector: data
- name: audit_logs
  endpoint:
    path: /v1/audit_logs
    method: GET
    data_selector: data
    params:
      limit: '10'
- name: autotunes
  endpoint:
    path: /autotunes
    method: GET
    data_selector: data
    params:
      limit: '10'
      page: '1'
notes:
- Mutation requests (POST/PATCH/PUT/DELETE) to the Console API are limited to ~ 100
  requests / 10 seconds and ~ 900 requests / 15 minutes, per project.
- Ship, measure, & learn with the same tools as the world’s largest Tech companies.
- Layers are key to improving engineering efficiency and iteration velocity for product
  teams.
- Statsig recommends a small holdout percentage to limit the number of customers who
  don’t see new features.
- Statsig recommends operating holdouts for a period of three to six months, and then
  releasing the holdout.
- Prompts allow you to evaluate and roll out prompts in production without deploying
  code.
- Grader is the evaluation component that scores or judges the output of an AI system
  against a desired standard.
- Parameter Stores decouple your code from configuration, indefinitely
- Allows you to run experiments, adjust gating, or change values on the fly
- Device-level experiments are ideal in scenarios such as anonymous or first-time
  users.
- If you rely on stableID, it is only generated by Statsig client SDKs.
- Custom ID types allow for flexibility in experiments and feature gates.
- Default environments—Development, Staging, and Production—share the same server
  and client-side API keys.
- Requests are authenticated using request header `statsig-api-key` and a valid SDK
  Server Secret key generated from console.statsig.com.
- Overrides are excluded from Pulse analysis to maintain unbiased results.
- Non-production events appear in diagnostics but are excluded from Pulse results
  to ensure production data is prioritized in final analyses.
- Call `statsig.flush()` before shutdown to ensure events are flushed.
- Gradually deploy a feature over time by setting up a Feature Gate as a Scheduled
  Rollout.
- API keys are safe to embed in a client application.
- Uses localStorage for storing Stable ID and experiment assignments.
- Ensure to use your client SDK key for initialization.
- The keys are safe to embed in a client application.
- Default timeout for requests is 10 seconds.
- 'Avoid iOS 18.4 on Simulator: Apple introduced a networking bug in iOS 18.4 that
  causes requests to fail when running in the Simulator.'
- The NEXT_PUBLIC_ prefix is required for the client key.
- Supports both App Router and Pages Router for integration.
- Uses StatsigClient for interaction with the API
- SDK keys are safe to embed in a client application.
- Avoid iOS 18.4 on Simulator due to networking bug.
- Client SDK key is safe to embed in a client application.
- These keys are safe to embed in a client application.
- Make sure API calls to Statsig are made from the main thread.
- Operations that take longer like network requests are made asynchronously.
- Server Secret Keys should always be kept private.
- The SDK initialization is asynchronous.
- Uses API key for authentication
- Server Secret Keys should always be kept private. If you expose one, you can disable
  and recreate it in the Statsig console.
- Use environment variables to store sensitive information like server secret keys.
- Statsig requires a Server Secret Key for initialization.
- Never fork processes after calling statsig.initialize() to avoid undefined state.
- SDK requires a Server Secret Key from the Statsig console.
- Never fork processes after calling initialize() — may cause deadlocks and unpredictable
  behavior.
- Ensure to call shutdown() before your app/server shuts down to flush all logged
  events.
- Do NOT embed your Server Secret Key in client-side applications.
- Feature Gates can be used to create logic branches in code.
- Do NOT embed your Server Secret Key in client-side applications, or expose it in
  any external-facing documents.
- Requires setup of connected app in Statsig.
- UserID or customID is required for evaluating Feature Gates.
- The interval to poll for changes to your Statsig configuration is 10 seconds.
- The interval to poll for changes to id lists is 60 seconds.
- Local Overrides are a way to override the values of gates, configs, experiments,
  and layers for testing purposes.
- localMode is a boolean parameter in StatsigOptions when initializing the SDK. It
  restricts all network traffic, so the SDK operates offline and only returns default
  or override values.
- StatsigLocalFile Adapters rely on cron jobs and files.
- The PHP SDK expects an adapter to be provided for both logging and saving config
  specs, given the stateless nature of PHP.
- Ensure to use a valid Server Secret Key during SDK initialization.
- Uses OAuth2 with refresh token — requires setup of connected app in api
- If you are experiencing performance issues, particularly with long initialization
  times, you can disable user agent parsing and country lookup to improve performance.
- Do NOT expose the Server Secret Key in client-side applications.
- ID Lists are currently not supported in the C++ server SDK.
- Uses Statsig SDK for feature evaluation
- Events may not be sent when application shuts down
- Verify that the Sidecar script tag is correctly placed in the <head> section of
  your Webflow site.
- Check the browser’s console for any JavaScript errors that may indicate problems
  with the script.
- Do NOT embed your Server Secret Key in client-side applications
- ID Lists are currently not supported in the C++ server SDK
- Utilizes a custom pixel framework for event tracking.
- Sidecar Chrome extension allows for UX experimentation without code.
- Identify calls are only supported for syncing Segment Engage Audiences with Statsig
  Segments
- If you have Segment Replay, you can send Statsig your historical events for analysis
- Values passed in properties.statsigCustomIDs will take precedence over mapped identifiers.
- All events are treated as production events by default.
- You should subscribe to the various events and event metadata necessary for your
  experimentation practices.
- Enabling the Hightouch integration allows you to send events and keep segments up-to-date
  in Statsig via Hightouch.
- Identify calls are only supported for syncing Segment Engage Audiences with Statsig
  Segments.
- You’ll have to be on the “mini” site plan or above to enable custom code.
- Initialization requires a network request, which you fire by calling the initialize()
  method.
- You must be on the mini site plan or above to enable custom code.
- Feature Gates are enabled by default but require targeting rules to pass users.
- Experiment parameters and groups cannot be configured after launching an experiment.
- Feature Gates are enabled by default until targeted rules are added
- Statsig offers over 20 client and server-side SDKs
- Uses OAuth2 for authentication
- 'Statsig’s SDKs abstract the complexity away: caching, retry mechanisms, networking,
  etc.'
- 'Statsig''s SDKs encourage best practice: built around parameters & language-specific
  best practice.'
- 'Statsig''s SDKs support broad deployment: 30+ SDKs across clients, servers, the
  edge, and more.'
- At the moment, Statsig does not provide a way to deduplicate custom events that
  you log.
- Technically speaking, Statsig can accept any type of name convention - E.g.; 'Page
  View', 'PageView', 'Page-view' and 'page_view'. Practically speaking, we recommend
  using 'page_view' — that is, to avoid spacing, and to use all lowercase characters.
- We recommend providing as much info as practical, as every additional field can
  enrich your analyses and expand targeting possibilities.
- Statsig evaluates gates and experiment buckets based only on the information you
  provide when you check something.
- Statsig's SDKs abstract the complexity away, handling caching, retry mechanisms,
  networking, etc.
- Statsig's SDKs encourage best practice, built around parameters & language-specific
  best practice.
- Client SDK initialization can have more impact on user experience.
- Asynchronous initialization ensures latest assignments but requires a loading state.
- Uses OAuth2 with refresh token — requires setup of connected app in Statsig
- If you have sensitive user PII data that should not be logged, use the privateAttributes
  field.
- Client SDKs run in code that executes on end-user devices, like a website, mobile
  app, video game, or smart TV app.
- Server SDKs run on your servers (typically in the cloud), like a web server or API
  server.
- Statsig collects only the data that you configure to be sent to Statsig.
- SDKs inherit their environment from initialization options.
- Configuration persists until next `initialize` or `updateUser` call
- Recommended to call `initialize` at the start of each user session
- You need to replace `YOUR_CLIENT_API_KEY` with your actual client API key from the
  Project Settings > API Keys.
- Statsig uses randomly generated IDs for user identification.
- SDK requires a Server Secret Key for initialization.
- Uses secret key for initialization
- Requires SDK initialization with a server secret key.
- The local override API is not designed to be a full mock. They are only a convenient
  way to override the value of the gate/config/etc.
- SDK requires a server secret key for initialization
- Exposure logging can be disabled using EvaluationOptions
- The SDK supports localMode which restricts all network traffic.
- Server core SDKs are available on an opt-in basis.
- Event logging architecture is designed to stream events freely to Statsig servers.
- Persistent storage takes an adapter approach, allowing you to plug in a storage
  solution of your choice.
- Overrides persist for the lifetime of the Statsig instance and affect all evaluations
  unless a specific user ID is provided.
- Providing a storage adapter on Statsig initialization will give the SDK access to
  read & write on your custom storage
- Server core SDKs, starting in v0.4.0+, have a new event logging architecture.
- Certain environments, like the edge, aren’t friendly to this new build process.
- The local evaluation adapter is for Enterprise and Pro Tier companies only.
- Your server SDK will continue to operate normally, serving the most recent set of
  known values in response to calls like `checkGate`, `getConfig`, `getExperiment`,
  and `getLayer`.
- Persisted Value will be deleted when experiment is not active
- Direct API access deprecation by October 31, 2025
- Most DataAdapters are currently only used for the initialize path for getting a
  project definition.
- The walkthrough guide assumes you have Statsig CLI installed and configured with
  the right API keys.
- Direct API access for Server SDKs will be deprecated by October 31, 2025.
- An API key is required in every API request
- Server-side secret Key should never be exposed in client-side code
- 'Configure the API keys by running: $ siggy config -c <console-api-key> $ siggy
  config -k <client-api-key>'
- You can retrieve these keys from your Statsig project.
- Use simple if/else gate checks for short lived gates that you can quickly clean
  up after the release.
- Implement client-side feature gates to select users where most context is available.
- Prevent incidents by managing feature gate lifecycles
- Maintain a healthy codebase by cleaning up unnecessary feature gates
- Reduce mental load for developers by tracking feature statuses
- Pagination data includes nextPage and previousPage
- Optional header to respect review settings for mutation endpoints.
- 'A gate can be in one of four statuses: In Progress, Launched, Disabled, Archived.'
- Pagination is supported
- Pagination metadata for checking if there is next page.
errors:
- 'INVALID_API_KEY: Check your API key for correctness.'
- 'UNKNOWN_GATE: The feature gate does not exist.'
- 'TIMEOUT: The request took too long to complete.'
- 'REQUEST_TIMEOUT: The request took longer than the allotted time.'
- 'INVALID_REQUEST: Check your request parameters.'
- '403 Forbidden: Check your client key and permissions.'
- '404 Not Found: Ensure the resource path is correct.'
- '400 Bad Request: Ensure request body is valid'
- '401 Unauthorized: Check your SDK key'
- '500 Internal Server Error: Check server status'
- '404 Not Found: Ensure the endpoint is valid'
- '401 Unauthorized: Recheck API key or token expiration'
- 'INVALID_SDK_KEY: Check if the SDK key is correct'
- 'EVENT_LOGGING_DISABLED: Ensure logging is enabled in the options'
- '400 Bad Request: Check your request payload'
- '401 Unauthorized: Check your API key'
- '500 Internal Server Error: Try again later'
- '401 Unauthorized: Ensure the server secret key is valid.'
- 'REQUEST_LIMIT_EXCEEDED: Throttle API calls or reduce frequency'
- 'QUERY_TIMEOUT: Break down filters or add selectivity'
- '401 Unauthorized: Recheck OAuth scopes or token expiration'
- '400 Bad Request: Check for required fields in the request body.'
- '401 Unauthorized: Verify client credentials or token expiration.'
- '429 Too Many Requests: Rate limit exceeded.'
- '401 Unauthorized: Recheck API key or access permissions'
- 'Unauthorized: Check your API key.'
- 'Invalid Request: Ensure required parameters are provided.'
- '400 Bad Request: Invalid request format or data.'
- '401 Unauthorized: Check API key or permissions.'
- '401 Unauthorized: Recheck API key or OAuth token.'
- '401 Unauthorized: Check if the API key is valid'
- '401 Unauthorized: Recheck API key permissions'
- '404 Not Found: Verify endpoint path'
- 'Statsig drops events that match this regex/contain this character set: ''\[\]{}<>#=;&$%|\u0000\n\r''.'
- 'InvalidBootstrap: Bootstrap values were generated for a different user profile'
- 'BootstrapStableIDMismatch: StableID differed between bootstrap and runtime user'
- '400 Bad Request: Check the request format and required fields.'
- '401 Unauthorized: Recheck OAuth scopes or token expiration.'
- 'INVALID_SECRET_KEY: Check the provided secret key.'
- 'PERMISSION_DENIED: Ensure that the API key has the necessary permissions.'
- 'INVALID_SECRET_KEY: Check if the server secret key is correct'
- 'RATE_LIMIT_EXCEEDED: Reduce the frequency of API calls'
- 'TIMEOUT: Check network connectivity or increase init timeout'
- '3: Number of times to retry sending a batch of failed log events.'
- '400 Bad Request: Check request parameters and payload'
- '401 Unauthorized: Check the provided API key'
- '404 Not Found: Check the endpoint URL'
- 'Unauthorized: Recheck API key or permissions'
- Ensure gates are not included in any active Holdouts before removing reference
- '403: Access Denied'
- '200: List Alerts success response'
- 'REQUEST_LIMIT_EXCEEDED: Throttle API calls or reduce frequency.'
- '403 Forbidden: Check API key and permissions'
- '401 Unauthorized: Recheck API key'
- '401 Unauthorized: Check if the API key is valid.'
auth_info:
  mentioned_objects:
  - StatsigUser
  - StatsigOptions
  - Server Secret Key
  - Options
  - Environment
  - User
client:
  base_url: https://console.statsig.com
source_metadata: null
