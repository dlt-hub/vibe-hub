resources:
- name: org
  endpoint:
    path: /org/get
    method: GET
    data_selector: data
- name: update
  endpoint:
    path: /org/update
    method: POST
    data_selector: data
    params: {}
- name: list_records
  endpoint:
    path: /object/list
    method: POST
    data_selector: data
    params:
      object_type: sample_table
      sort: number_field desc
      page: 1
      size: '100'
      select:
      - name
- name: fetch_specific_record
  endpoint:
    path: /object/describe
    method: POST
    data_selector: data
    params:
      object_type: sample_table
      id: 1
      summarized: true
      select:
      - name
- name: update_record
  endpoint:
    path: /object/update
    method: POST
    data_selector: object
    params: {}
- name: delete_record
  endpoint:
    path: /object/delete
    method: POST
    data_selector: object
    params: {}
- name: create_record
  endpoint:
    path: /object/create
    method: POST
    data_selector: object
    params: {}
- name: upload_base64_file
  endpoint:
    path: /uploads/upload-base64
    method: POST
    data_selector: object
    params: {}
- name: table_email
  endpoint:
    path: /tables/email
    method: GET
    data_selector: records
- name: card_email
  endpoint:
    path: /cards/email
    method: GET
    data_selector: records
- name: Seats
  endpoint:
    path: /docs/user-types
    method: GET
    data_selector: records
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: data_import
  endpoint:
    path: /migration-import-your-data-and-create-a-new-table
    method: POST
    data_selector: records
    params: {}
- name: update_table
  endpoint:
    path: /update_table
    method: POST
    data_selector: records
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: Car Plate
  endpoint:
    path: /docs/car-plate-field
    method: GET
- name: checkbox_field
  endpoint:
    path: /checkbox/field
    method: GET
    data_selector: records
- name: connected_table
  endpoint:
    path: /connected-table
    method: GET
- name: date
  endpoint:
    path: /date
    method: GET
    data_selector: records
- name: date_range
  endpoint:
    path: /date-range
    method: GET
    data_selector: data
    params: {}
- name: Email
  endpoint:
    path: /docs/email
    method: GET
    data_selector: records
- name: files
  endpoint:
    path: /files
    method: GET
    data_selector: files
    params: {}
- name: Functions
  endpoint:
    path: /functions
    method: GET
    data_selector: functions
    params: {}
- name: Basic operators
  endpoint:
    path: /operators
    method: GET
    data_selector: operators
    params: {}
- name: Common use cases
  endpoint:
    path: /use_cases
    method: GET
    data_selector: use_cases
    params: {}
- name: ID - CNPJ
  endpoint:
    path: /docs/id-cnpj-field
    method: GET
    data_selector: records
- name: ID - CPF
  endpoint:
    path: /id-cpf-field
    method: GET
    data_selector: records
- name: pictures
  endpoint:
    path: /pictures
    method: GET
    data_selector: records
- name: last_edited_by
  endpoint:
    path: /last-edited-by
    method: GET
    data_selector: records
- name: Multiple Users
  endpoint:
    path: /multiple-users
    method: GET
    data_selector: users
    params: {}
- name: number_field
  endpoint:
    path: /number-field
    method: GET
    data_selector: records
    params: {}
- name: percentage
  endpoint:
    path: /percentage
    method: GET
    data_selector: records
- name: phone_number
  endpoint:
    path: /docs/phone-number-field
    method: GET
    data_selector: records
- name: Record Attribution
  endpoint:
    path: /docs/record-attribution-field
    method: GET
- name: Record Database ID
  endpoint:
    path: /record-database-id
    method: GET
    data_selector: records
- name: Switch Field
  endpoint:
    path: /docs/switch-button
    method: GET
- name: time_in_a_section
  endpoint:
    path: /docs/time-in-a-status-field
    method: GET
    data_selector: records
    params: {}
- name: time_since_update
  endpoint:
    path: /docs/time-since-update-field
    method: GET
    data_selector: records
- name: User
  endpoint:
    path: /users
    method: GET
    data_selector: records
- name: history_log_view
  endpoint:
    path: /history_log
    method: GET
    data_selector: records
- name: super_form
  endpoint:
    path: /app/id
    method: GET
    params: {}
- name: button
  endpoint:
    path: /docs/buttons-component
    method: GET
- name: Order
  endpoint:
    path: /order
    method: GET
    data_selector: records
- name: Products
  endpoint:
    path: /products
    method: GET
    data_selector: records
- name: Services
  endpoint:
    path: /services
    method: GET
    data_selector: records
- name: Order Items
  endpoint:
    path: /order-items
    method: GET
    data_selector: records
- name: date_manipulation
  endpoint:
    path: /manipulating-dates
    method: GET
    data_selector: date_outputs
- name: webhook
  endpoint:
    path: /webhook/endpoint
    method: POST
    data_selector: payload
    params: {}
- name: when_to_do_list_items_are_created
  endpoint:
    path: /docs/when-to-do-list-items-are-created
    method: GET
- name: when_all_to_do_list_items_completed
  endpoint:
    path: /when-all-to-do-list-items-are-completed
    method: GET
    data_selector: trigger
    params: {}
- name: when_a_checklist_is_created_at_100_positive
  endpoint:
    path: /when-a-checklist-is-created-at-100-positive
    method: GET
    data_selector: records
- name: when_a_button_field_is_clicked
  endpoint:
    path: /when-a-button-field-is-clicked
    method: GET
- name: single_automation
  endpoint:
    path: /api/automation/single
    method: POST
    data_selector: data
    params: {}
- name: automation_trigger
  endpoint:
    path: /docs/when-a-switch-is-set-to-off-nocode-automation
    method: GET
    data_selector: content
    params: {}
- name: checkbox_action
  endpoint:
    path: /docs/when-a-checkbox-is-unchecked-nocode-automation
    method: GET
    data_selector: records
- name: when_a_card_leaves_a_stage
  endpoint:
    path: /when-a-card-leaves-a-stage
    method: GET
- name: Activate Timer
  endpoint:
    path: /activate-timer
    method: POST
    data_selector: action
    params: {}
- name: Add tag to record
  endpoint:
    path: /docs/add-tag-to-record-nocode-automation
    method: GET
    data_selector: tags
    params: {}
- name: Assign owner to record
  endpoint:
    path: /assign-owner-to-record
    method: GET
    data_selector: records
- name: Assign Tags
  endpoint:
    path: /assign-tags
    method: GET
    data_selector: tags
    params: {}
- name: change_card_stage
  endpoint:
    path: /change-card-stage
    method: GET
    data_selector: records
    params: {}
- name: change_a_date
  endpoint:
    path: /docs/change-a-date-nocode-automation
    method: GET
    data_selector: records
- name: change_text_field
  endpoint:
    path: /change-a-text-field
    method: GET
    data_selector: records
- name: change_numeric_field
  endpoint:
    path: /docs/change-numeric-field-nocode-automation
    method: GET
    data_selector: ''
    params: {}
- name: html_table
  endpoint:
    path: /create-html-table
    method: GET
    data_selector: records
- name: Count No. of Records
  endpoint:
    path: /docs/count-no-of-records-no-code-automation
    method: GET
- name: Generate PDF
  endpoint:
    path: /generate-pdf
    method: POST
    data_selector: document
    params: {}
- name: connect_record
  endpoint:
    path: /connect-a-record-based-on-a-key-create-if-not-found
    method: GET
- name: create_record
  endpoint:
    path: /create-a-new-record
    method: POST
    data_selector: record
    params: {}
- name: create_task
  endpoint:
    path: /create/microsoft-task
    method: POST
- name: create_task
  endpoint:
    path: /create-task
    method: POST
    data_selector: task
    params: {}
- name: create_todo_items
  endpoint:
    path: /create/todo/items
    method: POST
    data_selector: items
    params: {}
- name: send_message
  endpoint:
    path: /discord/send_message
    method: POST
    data_selector: message
    params: {}
- name: IF Conditions
  endpoint:
    path: /docs/if-conditions-no-code-automation
    method: GET
    data_selector: conditions
    params: {}
- name: create_issue
  endpoint:
    path: /repos/{owner}/{repo}/issues
    method: POST
- name: Move card to the last stage
  endpoint:
    path: /docs/move-card-to-the-last-stage-nocode-automation
    method: GET
    data_selector: action
    params: {}
- name: move_to_next_stage
  endpoint:
    path: /move-to-next-stage
    method: GET
- name: Recurring Payables/Receivables
  endpoint:
    path: /docs/recurring-payablesreceivables-br-standard-no-code-automation
    method: GET
- name: remove_tags_action
  endpoint:
    path: /remove-tags-from-records
    method: POST
    data_selector: records
- name: remove_owner
  endpoint:
    path: /remove-owner-from-record
    method: GET
    data_selector: current_user
    params: {}
- name: Reset Checklist
  endpoint:
    path: /reset-checklist
    method: GET
- name: Run a Low-code function
  endpoint:
    path: /run-a-function
    method: GET
- name: schedule_a_date_to_future
  endpoint:
    path: /schedule-a-date-to-future
    method: GET
    data_selector: records
- name: Send Notification
  endpoint:
    path: /send-notification
    method: GET
    data_selector: notification
    params: {}
- name: send_email
  endpoint:
    path: /send-email-via-outlook
    method: POST
    data_selector: response
    params: {}
- name: WhatsApp message
  endpoint:
    path: /send-whatsapp-message
    method: GET
- name: set_a_date_field_to_now
  endpoint:
    path: /docs/set-a-date-field-to-now-nocode-automation
    method: GET
    data_selector: records
    params: {}
- name: set_time_field_to_now
  endpoint:
    path: /set-a-time-field-to-now
    method: GET
    data_selector: action
    params: {}
- name: set_tags_to_record
  endpoint:
    path: /set-tags-to-record
    method: POST
    data_selector: result
    params: {}
- name: send_message
  endpoint:
    path: /api/chat.postMessage
    method: POST
    data_selector: message
    params:
      channel: C1234567890
      text: Hello, World!
- name: Stop Automations and Show Message
  endpoint:
    path: /stop-automations-and-show-message
    method: GET
- name: Send message in Microsoft Teams channel
  endpoint:
    path: /send-message-in-a-teams-channel
    method: GET
- name: turn_off_switch
  endpoint:
    path: /docs/turn-off-a-switch-nocode-automation
    method: GET
    data_selector: record
    params: {}
- name: turn_on_a_switch
  endpoint:
    path: /turn-on-a-switch
    method: GET
    data_selector: records
    params: {}
- name: turn_off_a_switch
  endpoint:
    path: /turn-off-a-switch
    method: GET
    data_selector: records
    params: {}
- name: uncheck_checkbox_field
  endpoint:
    path: /uncheck-a-checkbox-field
    method: GET
    data_selector: records
- name: Update Quantities (from connected tables)
  endpoint:
    path: /update-quantities-from-connected-tables-nocode-automation
    method: GET
- name: update_record
  endpoint:
    path: /update-a-record
    method: POST
    data_selector: record
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
- name: clients
  endpoint:
    path: /clients
    method: GET
    data_selector: records
- name: new_leads
  endpoint:
    path: /new_leads
    method: GET
    data_selector: records
- name: triggers
  endpoint:
    path: /triggers
    method: GET
    data_selector: ''
    params: {}
- name: fetch
  endpoint:
    path: /native-methods#jestorfetch
    method: GET
    data_selector: data
    params: {}
- name: count
  endpoint:
    path: /native-methods#jestorcount
    method: GET
    data_selector: data
    params: {}
- name: fetchUsers
  endpoint:
    path: /native-methods#jestorfetchusers
    method: GET
    data_selector: data
    params: {}
- name: fetchTasks
  endpoint:
    path: /native-methods#jestorfetchtasks
    method: GET
    data_selector: data
    params: {}
- name: createUser
  endpoint:
    path: /native-methods#jestorcreateuser
    method: POST
    data_selector: data
    params: {}
- name: create
  endpoint:
    path: /native-methods#jestorcreate
    method: POST
    data_selector: data
    params: {}
- name: error
  endpoint:
    path: /native-methods#jestorerror
    method: POST
    data_selector: data
    params: {}
- name: update
  endpoint:
    path: /native-methods#jestorupdate
    method: POST
    data_selector: data
    params: {}
- name: loadData
  endpoint:
    path: /native-methods#jestorloaddata
    method: GET
    data_selector: data
    params: {}
- name: remove
  endpoint:
    path: /native-methods#jestorremove
    method: DELETE
    data_selector: data
    params: {}
- name: createNewFile
  endpoint:
    path: /native-methods#jestorcreatenewfile
    method: POST
    data_selector: data
    params: {}
- name: downloadFile
  endpoint:
    path: /native-methods#jestordownloadfile
    method: GET
    data_selector: data
    params: {}
- name: getContentFile
  endpoint:
    path: /native-methods#jestorgetcontentfile
    method: GET
    data_selector: data
    params: {}
- name: loadXml
  endpoint:
    path: /native-methods#jestorloadxml
    method: GET
    data_selector: data
    params: {}
- name: respondWith
  endpoint:
    path: /native-methods#jestorrespondwith
    method: POST
    data_selector: data
    params: {}
- name: get
  endpoint:
    path: /native-methods#jestorget
    method: GET
    data_selector: data
    params: {}
- name: post
  endpoint:
    path: /native-methods#jestorpost
    method: POST
    data_selector: data
    params: {}
- name: curlCall
  endpoint:
    path: /native-methods#jestorcurlcall
    method: POST
    data_selector: data
    params: {}
- name: files
  endpoint:
    path: /native-methods#jestorfiles
    method: GET
    data_selector: data
    params: {}
- name: getObject
  endpoint:
    path: /native-methods#jestorgetobject
    method: GET
    data_selector: data
    params: {}
- name: fetch
  endpoint:
    path: /fetch
    method: GET
    data_selector: records
    params:
      limit: 100
- name: count
  endpoint:
    path: /count
    method: GET
    data_selector: count
    params: {}
- name: fetchUsers
  endpoint:
    path: /fetchUsers
    method: GET
    data_selector: users
    params:
      limit: 100
- name: fetchTasks
  endpoint:
    path: /fetchTasks
    method: GET
    data_selector: tasks
    params:
      limit: 100
- name: createUser
  endpoint:
    path: /createUser
    method: POST
    data_selector: newUser
    params: {}
- name: create
  endpoint:
    path: /create
    method: POST
    data_selector: createdRecord
    params: {}
- name: update
  endpoint:
    path: /update
    method: POST
    data_selector: updatedRecord
    params: {}
- name: remove
  endpoint:
    path: /remove
    method: DELETE
    data_selector: deletedRecord
    params: {}
- name: getObject
  endpoint:
    path: /getObject
    method: GET
    data_selector: fields
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: create_record
  endpoint:
    path: /table
    method: POST
    data_selector: result
    params: {}
- name: edit_record
  endpoint:
    path: /table
    method: PUT
    data_selector: result
    params: {}
- name: delete_record
  endpoint:
    path: /table
    method: DELETE
    data_selector: result
    params: {}
- name: list_records
  endpoint:
    path: /table
    method: GET
    data_selector: result
    params: {}
- name: count_records
  endpoint:
    path: /table/count
    method: GET
    data_selector: total
    params: {}
- name: create_user
  endpoint:
    path: /user
    method: POST
    data_selector: result
    params: {}
- name: list_users
  endpoint:
    path: /user
    method: GET
    data_selector: result
    params: {}
- name: list_tasks
  endpoint:
    path: /tasks
    method: GET
    data_selector: result
    params: {}
- name: create_record
  endpoint:
    path: /create_record
    method: POST
    data_selector: results.data
- name: edit_record
  endpoint:
    path: /edit_record
    method: PUT
    data_selector: results.data
- name: delete_record
  endpoint:
    path: /delete_record
    method: DELETE
- name: list_records
  endpoint:
    path: /list_records
    method: GET
    data_selector: dados.data
- name: create_user
  endpoint:
    path: /create_user
    method: POST
- name: inactive_user
  endpoint:
    path: /inactive_user
    method: POST
- name: list_users
  endpoint:
    path: /list_users
    method: GET
- name: download_file
  endpoint:
    path: /download_file
    method: GET
- name: generate_pdf
  endpoint:
    path: /generate_pdf
    method: POST
- name: create_new_file
  endpoint:
    path: /create_new_file
    method: POST
- name: create_new_file_base64
  endpoint:
    path: /create_new_file_base64
    method: POST
- name: get_content_file
  endpoint:
    path: /get_content_file
    method: GET
- name: user
  endpoint:
    path: /user
    method: GET
    data_selector: results
- name: table
  endpoint:
    path: /table
    method: GET
    data_selector: results
- name: list_records
  endpoint:
    path: /tables
    method: GET
    data_selector: list
    params:
      limit: 100
      page: 1
- name: create_user
  endpoint:
    path: /user
    method: POST
    data_selector: newUser
    params: {}
- name: list_users
  endpoint:
    path: /user
    method: GET
    data_selector: list
    params:
      limit: 100
      page: 1
- name: users
  endpoint:
    path: /user
    method: GET
    data_selector: result
    params:
      limit: 100
      page: 1
- name: tasks
  endpoint:
    path: /tasks
    method: GET
    data_selector: result
    params:
      limit: 10
      page: 1
- name: pending_invoices
  endpoint:
    path: /manage/billing/pending_invoices
    method: GET
    data_selector: invoices
- name: past_invoices
  endpoint:
    path: /manage/billing/past_invoices
    method: GET
    data_selector: invoices
- name: Automation Run Log
  endpoint:
    path: /automation/run/log
    method: GET
    data_selector: records
    params: {}
- name: 'Usage Reports: Automation Runs'
  endpoint:
    path: /usage/automation/runs
    method: GET
    data_selector: records
    params: {}
- name: 'Usage Reports: Low-code Processing'
  endpoint:
    path: /usage/low-code/processing
    method: GET
    data_selector: records
    params: {}
notes:
- All requests must be authenticated using an API token.
- The name of the table to insert records defaults to sample_table.
- Search for or create tools and features within the platform.
- Hundreds of native automations and numerous ways to automate or integrate your processes.
- Integrate seamlessly with tools like Slack, Gmail, Outlook, Teams, and many more.
- Requires setup of connected app in Jestor
- Most usage features are expandable with add-ons.
- Get in touch with our sales team for more information.
- Seats should not be used as permissioning
- Members cannot be super-root admins
- An automation sequence may activate other automation sequences.
- Automations will count towards your limit even if they fail.
- Requests that exceed one minute will hit a timeout.
- If you hit rate limits, you may be blocked from performing actions.
- Uses OAuth2 with refresh token — requires setup of connected app in api
- Some objects like Contact may return nulls in deeply nested fields
- Spreadsheets heavily encourage the use of formulas for everything, from calculations
  to searches.
- 'VLOOKUP merely copies text through a position based search: you''re not connecting
  data, merely replicating it.'
- These characteristics of relational databases ensure that not only are they inherently
  more organized than a spreadsheet, but also more error-proof.
- Jestor will update an existing Jestor table with data from your spreadsheet.
- You'll be able to keep track of past importations.
- Many to many connections should be used only when many elements could be linked
  to many others elements.
- It's a field with a progress bar where you can track your progress for OKRs, sales
  quotas, or deadlines and dates for projects using numbers, currencies, dates, and
  percentages as a result.
- Select many users in one field
- Automatically pre-defined with all users in your company's account
- It's an unique identification of the record
- Users can only access cards that they attributed to.
- Automatically attribute records to the same user that has created them.
- Create custom to-do lists for each record
- Add activities and track their progress with intuitive charts
- Replicate to-do lists for all records automatically
- Add as many different to-do lists as you want
- Measure time between tasks, consulting services, product production and more.
- Measure time, laps, and total time with a play/stop button.
- Spaces must be replaced by %20 in the URL
- We don’t recommend using public apps. Instead, use the Viewer role.
- Public apps do not offer the same level of control and security as apps within Jestor.
- App pages created after September 24th, 2024, no longer allow direct public record
  editing.
- Older app pages will stop allowing direct editing on March 1st, 2025.
- Mobile friendly.
- Add comments, tasks, and edit your info.
- In Jestor you can make a no-code automation and integration with just a few clicks,
  it's really fast and there's no technical knowledge required.
- An API token is required, found in the 'Automations' section.
- Organization information is needed, defined when creating the jestor account.
- We’ve developed a native connector for Looker.
- 'You can use the option''s label (the text that shows in the interface) by using
  the scheme below: {{field|option("label","separator")}}'
- 'You can use the option''s id (the true value in the field) by using the scheme
  below: {{field|option("id","separator")}}'
- You can hide fields based on set conditions in the chosen table.
- It will only work when updating records, not creating them.
- This trigger will check if all to do list items were completed
- It will only work when updating records, not creating them
- 'Trigger -> Action: When the condition (trigger) happens, then do (action).'
- Connect your Calendar account via Outlook
- You can create a new record in Jestor automatically when the chosen trigger is activated.
- Connect your Outlook account and give all necessary permissions
- Choose the field that holds the amount to be divided by installments (such as Total
  Amount $)
- 'Practical example: a $100 sale with 2 installments will create two records of $50'
- Each subsequent installment will be incremented by one month
- 'Choose the tab where the installments will be created (for example: Accounts Receivable)'
- This is the field on the tab of installments that will receive the 'Amount/Installment'
  value
- This is the field on the tab of installments that will receive the due dates
- This is an optional field to link the installment back to the sale or purchase (for
  example, if you have a 'Sale' record in the 'Accounts Receivable' table)
- Select the id of the record to be stored in the field above
- This will be the record's description (name) followed by the installment number.
  Otherwise, it will default to 'Installments' and the installment number.
- Connect your MailChimp account and give all the necessary permissions
- Create PDFs from fields and files in your record automatically when the chosen trigger
  is activated.
- You can set things like margin and backgroud, base color of your PDF
- Inside de body you set style of container that will receive the PDF data
- You can set size of your personal logo
- If your PDF has images you can set size and margin
- If your PDF has total amount you can set the style
- Requires OAuth2 authentication to send messages
- Ensure the bot has permissions to post in the specified channel
- 'Whenever you create, update or delete information through the interface, jestor
  automatically stores them into two separate variables: $objectNew and $objectOld.'
- $objectNew contains all the information the record will have after creation or updating.
- $objectOld contains all the information the record had before updating or deleting.
- Only fetch records from tab that logged user can view.
- If you're using Jestor in Brazilian Portuguese, standard date formatting on a field
  will be dd/mm/yyyy instead of mm/dd/yyyy, and you should take this into account
  when creating triggers and functions.
- It's a good practice to always use dates in the standard ISO Y-m-d format when saving
  information, as it will always work regardless of the account's region.
- If you're using Jestor in Brazilian Portuguese, be aware that strtotime() will not
  convert dd/mm/yyyy dates properly.
- A common practice would be to convert the format to dd-mm-yyyy with a str_replace()
  function, which will then be accepted in strtotime() properly.
- As asynchronous automations run in parallel to the user's experience, Jestor.error()
  will work differently from synchronous automations.
- When you're running synchronous automations, there's a 30 second limit for automations
  to run. Do note that this is a time limit for the whole sequence of automations,
  not only the specific trigger you're writing.
- In case you're running asynchronous automations, there's a considerably larger time
  limit of 900 seconds (15 min) before timeouts.
- Supports low-code automation for records and users.
- Use filters for listing records and tasks.
- To use Jestor SDK you need to pass your org (account name) and API token.
- The Multi-Factor Authentication (MFA) feature can only be activated when your Jestor
  account is in Fun Mode.
- System reports are specific, built-in reports available in Jestor. They differ from
  table reports, which have customizable fields.
- They are available in the interface for most plans, but only exportable with the
  Expert plan.
- Members can delete and recover records, but only builders can permanently delete
  them—provided they have access to the table.
- To clear your usage numbers, you need to permanently delete the records in the trash
  bin.
- To ensure the security, stability, and performance of our platform, Jestor only
  accepts uploads in a restricted list of file types. This limitation is in place
  to prevent the execution of malicious code, reduce the risk of security breaches,
  and maintain a safe and efficient environment for all users.
- In jestor, you can create custom pages in which everything is created by you, even
  the interface.
errors:
- '400: Bad Request'
- 'REQUEST_LIMIT_EXCEEDED: Throttle API calls or reduce frequency'
- '401 Unauthorized: Recheck OAuth scopes or token expiration'
- Infinite loops may hurt user experience and tend to be resource draining.
- If you hit your account's rate limits, you may end up losing data.
- 'QUERY_TIMEOUT: Break down filters or add selectivity'
- 'invalid_auth: The authentication token is invalid'
- 'channel_not_found: Channel does not exist'
- 'not_in_channel: Bot is not a member of the channel'
auth_info:
  mentioned_objects:
  - OauthToken
  - AuthProvider
  - NamedCredential
client:
  base_url: https://jestor.com
  headers:
    Accept: application/json
source_metadata: null
