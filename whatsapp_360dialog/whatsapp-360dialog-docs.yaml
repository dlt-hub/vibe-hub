resources:
- name: authSuccess
  endpoint:
    path: /api/apps/private/87cf50f2-2db4-4e05-a8fd-135ad24f9c08/6683e1680f160e8654ffd46b/authSuccess
    method: GET
- name: incoming
  endpoint:
    path: /api/apps/private/87cf50f2-2db4-4e05-a8fd-135ad24f9c08/6683e1680f160e8654ffd46b/incoming
    method: POST
- name: templateMessage
  endpoint:
    path: /api/apps/private/87cf50f2-2db4-4e05-a8fd-135ad24f9c08/6683e1680f160e8654ffd46b/templateMessage
    method: POST
- name: get-sidebar-icon
  endpoint:
    path: /api/apps/public/87cf50f2-2db4-4e05-a8fd-135ad24f9c08/get-sidebar-icon
    method: GET
- name: messages
  endpoint:
    path: /api/v1/chat.getMessages
    method: GET
    data_selector: messages
    params: {}
- name: rocket_chat
  endpoint:
    path: /docker/rocketchat
    method: GET
    data_selector: images
    params: {}
- name: mongodb
  endpoint:
    path: /docker/mongodb
    method: GET
    data_selector: images
    params: {}
- name: Enterprise plan
  endpoint:
    path: /v1/docs/our-plans#enterprise-plan
    method: GET
    data_selector: key features
- name: Pro plan
  endpoint:
    path: /v1/docs/our-plans#pro-plan
    method: GET
    data_selector: key features
- name: Starter plan
  endpoint:
    path: /v1/docs/our-plans#starter-plan
    method: GET
    data_selector: key features
- name: Community workspaces
  endpoint:
    path: /v1/docs/our-plans#community
    method: GET
    data_selector: key features
- name: incoming_webhook
  endpoint:
    path: /hooks/{webhook_id}
    method: POST
    data_selector: message
    params: {}
- name: outgoing_webhook
  endpoint:
    path: /hooks/{webhook_id}
    method: POST
    data_selector: message
    params: {}
- name: incoming_webhook
  endpoint:
    path: /api/v1/chat.postMessage
    method: POST
    data_selector: message
- name: outgoing_webhook
  endpoint:
    path: /api/v1/chat.postMessage
    method: POST
    data_selector: message
- name: instances
  endpoint:
    path: /v1/instances
    method: GET
    data_selector: instances
- name: statistics
  endpoint:
    path: /v1/statistics
    method: GET
    data_selector: statistics
- name: email_configuration
  endpoint:
    path: /v1/configure-email
    method: POST
    data_selector: data
    params: {}
- name: Custom User Status API
  endpoint:
    path: /apidocs/custom-user-status-api
    method: GET
- name: rooms
  endpoint:
    path: /v1/docs/rooms
    method: GET
- name: edit_room
  endpoint:
    path: /v1/docs/manage-room-members
    method: POST
- name: delete_room
  endpoint:
    path: /v1/docs/rooms
    method: DELETE
- name: mailer
  endpoint:
    path: /mailer/send
    method: POST
    data_selector: email
    params: {}
- name: managers
  endpoint:
    path: /v1/docs/omnichannel/managers
    method: GET
- name: agents
  endpoint:
    path: /v1/docs/omnichannel/agents
    method: GET
- name: monitors
  endpoint:
    path: /v1/docs/omnichannel/monitors
    method: GET
- name: mandatory_environment_variables
  endpoint:
    path: /v1/docs/deployment-environment-variables#mandatory-environment-variables
    method: GET
    data_selector: variables
    params: {}
- name: optional_environment_variables
  endpoint:
    path: /v1/docs/deployment-environment-variables#optional-environment-variables
    method: GET
    data_selector: variables
    params: {}
- name: users
  endpoint:
    path: /api/v1/users.list
    method: GET
    data_selector: users
    params: {}
- name: channels
  endpoint:
    path: /api/v1/channels.list
    method: GET
    data_selector: channels
    params: {}
- name: notifications
  endpoint:
    path: /api/apps/private/6a7b5a37-b9bb-4d49-ae38-c6ebcb3fe479/ejDjQ9Kyh2wBgrSwt/webhook
    method: POST
    data_selector: event
    params: {}
- name: repositories
  endpoint:
    path: /repositories
    method: GET
    data_selector: values
- name: webhook
  endpoint:
    path: /repositories/{workspace}/{repo_slug}/hooks
    method: POST
    data_selector: hook
    params: {}
- name: poll
  endpoint:
    path: /v1/poll
    method: POST
    data_selector: polls
    params: {}
- name: word_cloud_api
  endpoint:
    path: http://quickchart.io/documentation/word-cloud-api/
    method: GET
- name: files
  endpoint:
    path: /files
    method: GET
    data_selector: files
    params:
      incremental: modifiedTime
- name: messages
  endpoint:
    path: /chat.getMessages
    method: GET
    data_selector: messages
    params: {}
- name: agentic_pipeline
  endpoint:
    path: /rocketchat-ai-app#agentic-pipeline-configuration-details
    method: POST
    data_selector: ''
    params: {}
- name: messages
  endpoint:
    path: /v1/messages
    method: GET
    data_selector: messages
    params: {}
- name: users
  endpoint:
    path: /v1/users
    method: GET
    data_selector: users
    params: {}
- name: messages
  endpoint:
    path: /api/v1/chat.getMessages
    method: GET
    data_selector: messages
- name: channels
  endpoint:
    path: /api/v1/channels.list
    method: GET
    data_selector: channels
- name: New channel
  endpoint:
    path: /new_channel
    method: POST
- name: New message posted anywhere
  endpoint:
    path: /new_message_anywhere
    method: POST
- name: New message posted on public channel
  endpoint:
    path: /new_message_public_channel
    method: POST
- name: New message posted on private channel
  endpoint:
    path: /new_message_private_channel
    method: POST
- name: Message pinned anywhere
  endpoint:
    path: /message_pinned_anywhere
    method: POST
- name: New private channel
  endpoint:
    path: /new_private_channel
    method: POST
- name: Starred message anywhere
  endpoint:
    path: /starred_message_anywhere
    method: POST
- name: New user
  endpoint:
    path: /new_user
    method: POST
- name: Mentioned on public channel
  endpoint:
    path: /mentioned_public_channel
    method: POST
- name: Create channel
  endpoint:
    path: /create_channel
    method: POST
- name: Invite user to channel
  endpoint:
    path: /invite_user_to_channel
    method: POST
- name: Create private channel
  endpoint:
    path: /create_private_channel
    method: POST
- name: Send channel message
  endpoint:
    path: /send_channel_message
    method: POST
- name: Send direct message
  endpoint:
    path: /send_direct_message
    method: POST
- name: Send private channel message
  endpoint:
    path: /send_private_channel_message
    method: POST
- name: Add reminder
  endpoint:
    path: /add_reminder
    method: POST
- name: Set status
  endpoint:
    path: /set_status
    method: POST
- name: Find channel
  endpoint:
    path: /find_channel
    method: GET
- name: Find private channel
  endpoint:
    path: /find_private_channel
    method: GET
- name: Find user by username
  endpoint:
    path: /find_user_by_username
    method: GET
- name: Custom Fields Validation
  endpoint:
    path: /v1/docs/message-settings
    method: POST
    data_selector: properties
    params: {}
- name: collaboard
  endpoint:
    path: /api/collaboard
    method: POST
- name: github-app-callback
  endpoint:
    path: /api/apps/public/826f0d95-9e25-48a6-a781-a32f147230a5/github-app-callback
    method: GET
- name: channels
  endpoint:
    path: /channels
    method: GET
    data_selector: channels
    params: {}
- name: repository_actions
  endpoint:
    path: /github/subscribe
    method: POST
- name: repository_overview
  endpoint:
    path: /github/<username>/<repository name>/repo
    method: GET
- name: list_repository_issues
  endpoint:
    path: /github/<username>/<repository name>/issues
    method: GET
- name: list_repository_contributors
  endpoint:
    path: /github/<username>/<repository name>/contributors
    method: GET
- name: list_pull_requests
  endpoint:
    path: /github/<username>/<repository name>/pulls
    method: GET
- name: review_pull_request
  endpoint:
    path: /github/<username>/<repository name>/pulls/<pull number>
    method: GET
- name: Settings
  endpoint:
    path: /v1/docs/data-loss-prevention-user-guide
    method: GET
    data_selector: settings
    params: {}
- name: github-app-callback
  endpoint:
    path: /api/apps/public/{app_id}/github-app-callback
    method: GET
- name: GitHub Authentication
  endpoint:
    path: /github/login
    method: POST
- name: GitHub Issue Management
  endpoint:
    path: /github/issue
    method: POST
- name: GitHub Repository Actions
  endpoint:
    path: /github/subscribe
    method: POST
- name: files
  endpoint:
    path: /files
    method: GET
    data_selector: files
    params:
      fields: nextPageToken, files(id, name)
- name: conference_call
  endpoint:
    path: /conference-call-admin-guide
    method: GET
- name: conference_call_users_guide
  endpoint:
    path: /v1/docs/conference-call-users-guide
    method: GET
- name: rooms
  endpoint:
    path: /api/v1/rooms
    method: GET
    data_selector: rooms
- name: mentions
  endpoint:
    path: /api/v1/mentions
    method: GET
    data_selector: mentions
- name: google_drive_files
  endpoint:
    path: /v1/docs/using-the-google-drive-app#list-and-view-your-files
- name: messages
  endpoint:
    path: /v1/messages
    method: POST
    data_selector: data
    params: {}
- name: service_configuration
  endpoint:
    path: /api/apps/public/7fc612f5-b585-xxxx-xxxx-6d2c13e2f451/policy/v1/service/configuration
    method: GET
- name: events_sink
  endpoint:
    path: /api/apps/public/7fc612f5-b585-xxxx-xxxx-6d2c13e2f451/events
    method: POST
- name: conference_call
  endpoint:
    path: /v1/docs/conference-call
    method: POST
- name: conference_call
  endpoint:
    path: /conference-call
    method: GET
    data_selector: settings
    params: {}
- name: conference_call
  endpoint:
    path: /v1/conference-call
    method: GET
- name: conference_call
  endpoint:
    path: /settings/conference-call
    method: GET
    data_selector: settings
    params: {}
- name: Dialogflow
  endpoint:
    path: /v1/docs/dialogflow-app
    method: GET
- name: Dialogflow
  endpoint:
    path: /v1/docs/dialogflow-app
    method: GET
    data_selector: records
- name: sms_incoming
  endpoint:
    path: /api/v1/livechat/sms-incoming/twilio
    method: POST
- name: Salesforce CRM Integration
  endpoint:
    path: /services/oauth2/token
    method: POST
- name: managers
  endpoint:
    path: /v1/docs/omnichannel/managers
    method: GET
- name: agents
  endpoint:
    path: /v1/docs/omnichannel/agents
    method: GET
- name: monitors
  endpoint:
    path: /v1/docs/omnichannel/monitors
    method: GET
- name: sms_incoming
  endpoint:
    path: /api/v1/livechat/sms-incoming/twilio
    method: POST
- name: managers
  endpoint:
    path: /v1/docs/omnichannel/managers
    method: GET
    data_selector: managers
    params: {}
- name: agents
  endpoint:
    path: /v1/docs/omnichannel/agents
    method: GET
    data_selector: agents
    params: {}
- name: monitors
  endpoint:
    path: /v1/docs/omnichannel/monitors
    method: GET
    data_selector: monitors
    params: {}
- name: service_configuration
  endpoint:
    path: /api/apps/public/7fc612f5-b585-xxxx-xxxx-6d2c13e2f451/policy/v1/service/configuration
    method: GET
- name: events_sink
  endpoint:
    path: /api/apps/public/7fc612f5-b585-xxxx-xxxx-6d2c13e2f451/events
    method: POST
- name: messages
  endpoint:
    path: /api/v1/chat.getMessages
    method: GET
    data_selector: messages
    params:
      incremental: updatedAt
- name: service_configuration
  endpoint:
    path: /api/apps/public/7fc612f5-b585-xxxx-xxxx-6d2c13e2f451
    method: GET
    data_selector: configuration
    params: {}
- name: events_sink
  endpoint:
    path: /api/apps/public/7fc612f5-b585-xxxx-xxxx-6d2c13e2f451/events
    method: POST
    data_selector: events
    params: {}
- name: telegram_bot
  endpoint:
    path: /bot<your-unique-token>/
    method: GET
- name: Telegram Bot Token
  endpoint:
    path: /generate-bot-token
    method: GET
    data_selector: token
    params: {}
- name: boards
  endpoint:
    path: /1/boards
    method: GET
    data_selector: boards
    params: {}
- name: cards
  endpoint:
    path: /1/cards
    method: GET
    data_selector: cards
    params: {}
- name: boards
  endpoint:
    path: /1/boards
    method: GET
    data_selector: boards
    params: {}
- name: cards
  endpoint:
    path: /1/cards
    method: GET
    data_selector: cards
    params: {}
- name: ClamAV Integration
  endpoint:
    path: /apps/clamav
    method: POST
    data_selector: settings
    params:
      server_host: ClamAV Server Host
      server_port: ClamAV Server Port
- name: Dialogflow Configuration
  endpoint:
    path: /v1/docs/dialogflow-app
    method: POST
    data_selector: settings
- name: ClamAV Integration
  endpoint:
    path: /integration/clamav
    method: POST
    data_selector: settings
    params:
      ClamAV_Server_Host: your_clamav_server_host
      ClamAV_Server_Port: your_clamav_server_port
- name: bot_user_configuration
  endpoint:
    path: /Administration/Workspace/Users
    method: POST
    data_selector: users
    params: {}
- name: dialogflow_app_configuration
  endpoint:
    path: /Dialogflow/App/Info
    method: PUT
    data_selector: settings
    params: {}
- name: message_box_options
  endpoint:
    path: /v1/docs/rooms
    method: GET
- name: direct_message
  endpoint:
    path: /v1/docs/create-a-new-direct-message
    method: GET
- name: messages
  endpoint:
    path: /api/v1/chat.getMessages
    method: GET
    data_selector: messages
- name: incoming_message
  endpoint:
    path: /incoming
    method: POST
- name: template_message
  endpoint:
    path: /templateMessage
    method: POST
- name: get_sidebar_icon
  endpoint:
    path: /get-sidebar-icon
    method: GET
- name: OpenAI API Key
  endpoint:
    path: /api/v1/chatgpt
    method: POST
- name: omnichannel_queues
  endpoint:
    path: /v1/docs/omnichannel-admins-guide#routing-settings
    method: GET
- name: incoming_message
  endpoint:
    path: /incoming
    method: POST
- name: template_message
  endpoint:
    path: /templateMessage
    method: POST
- name: get_sidebar_icon
  endpoint:
    path: /get-sidebar-icon
    method: GET
- name: Auto selection
  endpoint:
    path: /v1/docs/omnichannel-admins-guide#routing-settings
    method: GET
- name: Manual selection
  endpoint:
    path: /v1/docs/omnichannel-admins-guide#routing-settings
    method: GET
- name: External service
  endpoint:
    path: /v1/docs/omnichannel-admins-guide#routing-settings
    method: GET
- name: customer_data
  endpoint:
    path: /v1/customer/data
    method: GET
    data_selector: data
    params: {}
- name: messages
  endpoint:
    path: /api/v1/chat.postMessage
    method: POST
    data_selector: data
    params: {}
- name: channels
  endpoint:
    path: /api/v1/channels.list
    method: GET
    data_selector: channels
    params: {}
- name: ISO 27001 certification
  endpoint:
    path: /compliance/iso27001
    method: GET
    data_selector: details
    params: {}
- name: SOC 2 compliance
  endpoint:
    path: /compliance/soc2
    method: GET
    data_selector: details
    params: {}
- name: Infrastructure subprocessors
  endpoint:
    path: /subprocessors/infrastructure
    method: GET
    data_selector: entities
    params: {}
- name: Service-specific subprocessors
  endpoint:
    path: /subprocessors/service-specific
    method: GET
    data_selector: entities
    params: {}
- name: Innovation service-specific subprocessors
  endpoint:
    path: /subprocessors/innovation-specific
    method: GET
    data_selector: entities
    params: {}
- name: Rocket.Chat affiliates
  endpoint:
    path: /subprocessors/affiliates
    method: GET
    data_selector: entities
    params: {}
- name: Partners joint processors or subprocessors
  endpoint:
    path: /subprocessors/partners
    method: GET
    data_selector: entities
    params: {}
- name: channels
  endpoint:
    path: /channels
    method: GET
    data_selector: channels
- name: users
  endpoint:
    path: /users
    method: GET
    data_selector: users
- name: e2e.setUserPublicAndPrivateKeys
  endpoint:
    path: /e2e.setUserPublicAndPrivateKeys
    method: POST
    data_selector: key
    params: {}
- name: fetchMyKeys
  endpoint:
    path: /fetchMyKeys
    method: POST
    data_selector: key
    params: {}
- name: e2e.getUsersOfRoomWithoutKey
  endpoint:
    path: /e2e.getUsersOfRoomWithoutKey
    method: POST
    data_selector: users
    params: {}
- name: e2e.setRoomKeyId
  endpoint:
    path: /e2e.setRoomKeyId
    method: POST
    data_selector: {}
    params: {}
- name: e2e.updateGroupKey
  endpoint:
    path: /e2e.updateGroupKey
    method: POST
    data_selector: {}
    params: {}
- name: e2e.acceptSuggestedGroupKey
  endpoint:
    path: /e2e.acceptSuggestedGroupKey
    method: POST
    data_selector: {}
    params: {}
- name: e2e.rejectSuggestedGroupKey
  endpoint:
    path: /e2e.rejectSuggestedGroupKey
    method: POST
    data_selector: {}
    params: {}
- name: e2e.provideUsersWithSuggestedGroupKeys
  endpoint:
    path: /e2e.provideUsersWithSuggestedGroupKeys
    method: POST
    data_selector: {}
    params: {}
- name: e2e.resetRoomKey
  endpoint:
    path: /e2e.resetRoomKey
    method: POST
    data_selector: {}
    params: {}
- name: setUserPublicAndPrivateKeys
  endpoint:
    path: /e2e.setUserPublicAndPrivateKeys
    method: POST
- name: fetchMyKeys
  endpoint:
    path: /fetchMyKeys
    method: GET
- name: getUsersOfRoomWithoutKey
  endpoint:
    path: /e2e.getUsersOfRoomWithoutKey
    method: GET
- name: setRoomKeyId
  endpoint:
    path: /e2e.setRoomKeyId
    method: POST
- name: updateGroupKey
  endpoint:
    path: /e2e.updateGroupKey
    method: POST
- name: acceptSuggestedGroupKey
  endpoint:
    path: /e2e.acceptSuggestedGroupKey
    method: POST
- name: rejectSuggestedGroupKey
  endpoint:
    path: /e2e.rejectSuggestedGroupKey
    method: POST
- name: provideUsersWithSuggestedGroupKeys
  endpoint:
    path: /e2e.provideUsersWithSuggestedGroupKeys
    method: POST
- name: resetRoomKey
  endpoint:
    path: /e2e.resetRoomKey
    method: POST
- name: ISO 27001 certification
  endpoint:
    path: /compliance/iso27001
    method: GET
    data_selector: certifications
    params: {}
- name: SOC 2 compliance
  endpoint:
    path: /compliance/soc2
    method: GET
    data_selector: complianceReports
    params: {}
- name: instances
  endpoint:
    path: /v1/instances
    method: GET
    data_selector: instances
- name: statistics
  endpoint:
    path: /v1/statistics
    method: GET
    data_selector: statistics
- name: channels
  endpoint:
    path: /channels
    method: GET
    data_selector: channels
    params: {}
- name: users
  endpoint:
    path: /users
    method: GET
    data_selector: users
    params: {}
- name: mongodb_setup
  endpoint:
    path: /v1/docs/running-multiple-instances#set-up-mongodb
    method: GET
- name: rocket_chat_deployment
  endpoint:
    path: /v1/docs/running-multiple-instances#deploy-rocketchat-servers
    method: GET
- name: reverse_proxy_configuration
  endpoint:
    path: /v1/docs/running-multiple-instances#configure-reverse-proxy
    method: GET
- name: e2e.setUserPublicAndPrivateKeys
  endpoint:
    path: /e2e.setUserPublicAndPrivateKeys
    method: POST
    data_selector: records
- name: fetchMyKeys
  endpoint:
    path: /fetchMyKeys
    method: GET
    data_selector: records
- name: e2e.getUsersOfRoomWithoutKey
  endpoint:
    path: /e2e.getUsersOfRoomWithoutKey
    method: GET
    data_selector: records
- name: e2e.setRoomKeyId
  endpoint:
    path: /e2e.setRoomKeyId
    method: POST
    data_selector: records
- name: e2e.updateGroupKey
  endpoint:
    path: /e2e.updateGroupKey
    method: POST
    data_selector: records
- name: e2e.acceptSuggestedGroupKey
  endpoint:
    path: /e2e.acceptSuggestedGroupKey
    method: POST
    data_selector: records
- name: e2e.rejectSuggestedGroupKey
  endpoint:
    path: /e2e.rejectSuggestedGroupKey
    method: POST
    data_selector: records
- name: e2e.provideUsersWithSuggestedGroupKeys
  endpoint:
    path: /e2e.provideUsersWithSuggestedGroupKeys
    method: POST
    data_selector: records
- name: e2e.resetRoomKey
  endpoint:
    path: /e2e.resetRoomKey
    method: POST
    data_selector: records
- name: add_guest_user
  endpoint:
    path: /api/v1/method.call/authorization:addPermissionToRole
    method: POST
    data_selector: message
    params: {}
- name: remove_guest_user_permission
  endpoint:
    path: /api/v1/method.call/authorization:removeRoleFromPermission
    method: POST
    data_selector: message
    params: {}
- name: instances
  endpoint:
    path: /v1/docs/running-multiple-instances
    method: GET
- name: statistics
  endpoint:
    path: /v1/docs/statistics-management-api
    method: GET
- name: mongodb_setup
  endpoint:
    path: /v1/docs/running-multiple-instances#set-up-mongodb
    method: GET
    data_selector: mongodb_setup
    params: {}
- name: rocketchat_deploy
  endpoint:
    path: /v1/docs/running-multiple-instances#deploy-rocketchat-servers
    method: GET
    data_selector: rocketchat_deploy
    params: {}
- name: nginx_setup
  endpoint:
    path: /v1/docs/running-multiple-instances#configure-reverse-proxy
    method: GET
    data_selector: nginx_setup
    params: {}
- name: add_guest_user
  endpoint:
    path: /api/v1/method.call/authorization:addPermissionToRole
    method: POST
    data_selector: message
    params: {}
- name: remove_guest_user_permission
  endpoint:
    path: /api/v1/method.call/authorization:removeRoleFromPermission
    method: POST
    data_selector: message
    params: {}
notes:
- As of December 15, 2023, Rocket.Chat has ceased support for connections from cloud
  services and official mobile/desktop apps to workspaces running legacy versions
  outside our support window.
- If you're using a firewall, you may need to whitelist certain URLs to ensure Rocket.Chat
  can communicate with our cloud services.
- Rocket.Chat follows a structured release lifecycle, adhering to semantic versioning
  (Major.Minor.Patch) for its version numbers.
- Uses OAuth2 with refresh token — requires setup of connected app in Rocket.Chat
- Some messages may return nulls in deeply nested fields
- Ensure that Docker is installed and operational on all servers.
- Editing the configurations in the compose.yml file is not recommended.
- Update `<registry_ip_address:5000>` with the IP address of your registry host server
  and the appropriate port number, if your registry container is not running on port
  5000.
- Rocket.Chat versions receive support for six months after release.
- Rocket.Chat is committed to ensuring digital accessibility for people with disabilities.
- Our digital services partially conform to Level AA of the Web Content Accessibility
  Guidelines (WCAG) 2.1.
- The Agreement will be enforced to the fullest extent permitted under applicable
  law.
- Ensure that your workspaces are updated to the latest stable versions.
- Each release of Rocket.Chat is supported for six months after its release date.
- Users with the Access marketplace permission can access the Rocket.Chat marketplace
  and request for any app they need in the workspace.
- If you are using a firewall, you need to whitelist the marketplace.rocket.chat URL
  to list and install marketplace apps.
- Some apps are subscription-based, and you must purchase them before installing.
- Webhooks are simple event notifications via HTTP POST.
- Webhook URL and Token values are generated upon creating the integration.
- The following list of permissions is not comprehensive.
- This configuration is only available for self-managed workspaces.
- Cloud-hosted workspaces already have this pre-configured.
- Premium plans do not have a presence service limit.
- Workspaces on the community plan have a maximum limit of 200 concurrent connections.
- All workspaces must be registered on Rocket.Chat cloud and within our support window
  to access cloud services.
- If you are using a firewall, you need to whitelist the cloud.rocket.chat URL for
  workspace registration and syncing the license.
- The email body must have an unsubscribe link.
- API may have rate limits; consider implementing backoff strategies.
- Encrypted messages will not appear in search results
- Encrypted content cannot be audited
- Bots may not be able to access encrypted messages unless explicitly supported
- If you are using a firewall, you may have to allow traffic to port 3000.
- To communicate with Rocket.Chat Cloud services, you need to whitelist specific URLs
  in your server’s firewall configuration.
- If you provide a CDN prefix that is not live or incorrect, you may lose access to
  your Rocket.Chat instance as the required assets will not be found.
- Starting with Rocket.Chat Version 7.0, the ability to upload private apps is restricted
  to our premium plans (Starter, Pro, and Enterprise).
- Workspaces with an expired premium license will have all their apps disabled if
  they exceed the community workspace’s limit.
- Free to use, modify, and distribute, with source code available on GitHub.
- Requires setup of OAuth application in Rocket.Chat
- The Bamboo integration doesn't support every Build/Deployment event.
- The Bamboo integration doesn't support every Build/Deployment event. Rocket.Chat
  won't send any notifications in response to unsupported events.
- Requires OAuth2 authentication setup in Bitbucket.
- Ensure that the channel you connected is a public channel for notifications to appear.
- Admin access on Jira Cloud is required to set up this integration.
- The default value for timezone setting is UTC.
- Word Cloud feature requires Internet access and enforces rate-limiting of 60 requests
  per minute per IP.
- Requires proper scope permission for file access
- Rate limits apply based on user and application
- The Google Drive app is currently in Beta. Some features may not function as expected.
- Your workspace must be on a publicly available domain.
- A Google Cloud project is required to obtain the OAuth2 credentials.
- With the Microsoft Teams Bridge, you can exchange up to 500 messages per month across
  Rocket.Chat and MS Teams at no additional cost.
- Requires OAuth2 setup for authentication
- The app summarizes up to a 100 messages.
- API keys are only available on the Collaboard Enterprise plan.
- For multiple users to create Zoom meetings in the workspace, a paid Zoom account
  is required.
- Users must have same email accounts on both Rocket.Chat and Zoom to enable meeting
  creation.
- Users must be in the same organization on Zoom to enable meeting creation.
- Requires setup of connected app in Rocket.Chat
- You are required to have your workspace on a secured publicly available domain.
- Admins can create a list of regular expressions to be monitored in Rocket.Chat
- Once a regular expression is detected, it appears blurred in the room where it was
  originally written
- A Server-to-Server OAuth app must be created on the Zoom marketplace prior to integration.
- Admins can create a list of regular expressions to be monitored in Rocket.Chat.
- Once a regular expression is detected, it appears blurred in the room where it was
  originally written.
- Uses OAuth2 with refresh token — requires setup of connected app in Rocket Chat
- You may be required to re-authenticate periodically when your authentication token
  expires.
- Uses OAuth2 with refresh token — requires setup of connected app in api
- The app is currently in Beta, and some features may not function as expected.
- This integration works exclusively with Google business accounts, so users must
  be part of your organization and logged in to their Google accounts.
- Requires OAuth2 setup in Google Cloud Console
- Ensure correct scopes are set for file access
- If you get an error joining the call, confirm that you're using a Google business
  account from the same organization.
- Rocket.Chat’s REST API endpoints enable you to send and manage chats.
- Ensure that the Rocket.Chat external policy server can connect to the Pexip Infinity
  Conferencing Nodes over HTTPS on port 443.
- Users do not need to be present in the call to participate in the discussion room,
  as long as they have access to it within the workspace.
- This app can also work in a fully air-gapped environment.
- When using mobile apps to join a public server, Jitsi may redirect users to a browser
  to complete authentication before joining calls.
- A BigBlueButton server is required for this integration.
- Ensure that discussions are enabled in your workspace.
- This integration works exclusively with Google business accounts.
- You must have the Omnichannel feature enabled and have agents and managers assigned
  to receive and send Omnichannel messages.
- You cannot receive messages on Rocket.Chat if you have a country restriction set
  on Instagram.
- Options marked with a red asterisk (*) are mandatory.
- Requires setup of Instagram App for API access
- Instagram users contact you via Instagram Direct messages, and you answer chats
  from your Rocket.Chat workspace.
- Ensure the dropdown next to the Webhook URL field is set to HTTP POST.
- Omnichannel managers can monitor and see analytics of Omnichannel activities.
- A monitor can only view analytics or activities of a department if they are assigned
  to a unit.
- Requires Rocket.Chat workspace on a premium plan
- Pexip Infinity v35+ required
- The Telegram app is used specifically for Omnichannel conversations.
- You will only receive messages if you have set up a department.
- Only agents assigned to that department will be able to receive and respond to Telegram
  chats.
- You will only receive messages if you have set up a department. Only agents assigned
  to that department will be able to receive and respond to Telegram chats.
- Requires OAuth2 authentication — ensure Trello app is set up correctly
- Uses OAuth2 with refresh token — requires setup of Trello API key and token
- This error occurs when the NVIDIA GPU architecture is less than the `sm_80`. Refer
  to [this website](https://arnon.dk/matching-sm-architectures-arch-and-gencode-for-various-nvidia-cards/)
  for the supported GPU with architectures `sm_80` and above.
- Requires setup of connected app in Rocket Chat
- OAuth2 authentication is required for accessing the API.
- The ChatGPT app is currently in Beta, and some features may not function as expected.
- ChatGPT app will only be available to workspaces running version 6.3.0 and higher.
- API key used when configuring the app is applied to the entire workspace. Users
  in your workspace don't need to get their own API keys.
- Requires a valid OAuth2 setup in Rocket.Chat
- You must enable the Omnichannel feature with agents and managers assigned to receive
  and send Omnichannel messages.
- You cannot share media files within the Sandbox environment.
- Administrators are responsible for users' privacy.
- We cannot access Customer user-generated data in a Self-Hosted instance of Rocket.Chat.
- Rocket.Chat sends a `GET` request to the `External Queue Service URL` and the `Secret
  Token` is sent as a header `X-RocketChat-Secret-Token`.
- You must comply with all applicable laws and governmental regulations, including,
  but not limited to, all intellectual property, data, privacy, and export control
  laws and regulations promulgated by any government agencies.
- Ensure to follow rate limits to avoid throttling
- Rocket.Chat is committed to maintaining the highest information security and regulatory
  compliance standards.
- Active customers with signed customer terms should contact the compliance team for
  reports.
- Ensure you have valid OAuth credentials.
- Estamos firmemente comprometidos em proteger sua privacidade e seus direitos sob
  a LGPD.
- Rocket.Chat is certified under ISO 27001, valid from June 2023 to June 2026.
- Rocket.Chat has obtained a SOC 2 Type I attestation report, valid until October
  2025.
- In air-gapped environments, Rocket.Chat adheres to strict data privacy standards
  by not collecting account data, usage data, app data, user content, and tracking
  of cookies.
- E2E encryption functionality includes notable restrictions that workspace owners
  should carefully consider before activating this feature.
- Encrypted messages of encrypted rooms will not be found by search operations.
- Bots may not be able to see encrypted messages until they implement support for
  it.
- Requires OAuth2 setup in Rocket.Chat
- Ensure correct permissions are granted
- Ensure nodes can communicate for optimal functionality.
- It is essential to verify your database as a critical component of this setup.
- Rocket.Chat is committed to protecting privacy under LGPD.
- Guest role permissions cannot be modified for Rocket.Chat workspaces on version
  6.0 and above subscribed to the Enterprise plan.
- You must be an administrator to manage guest users in your workspace.
- In air-gapped environments, no tracking technologies or cookies are employed to
  gather user information.
- Features like the marketplace, OmniGateway, push notifications, and other cloud-dependent
  add-ons are unavailable.
- Ensure that each server's `compose.yml` file includes its specific IP or hostname
  as `<current-rocketchat-ip-or-hostname>`, and lists all Rocket.Chat servers IP/hostname
  under `extra_hosts`.
errors:
- 'REQUEST_LIMIT_EXCEEDED: Throttle API calls or reduce frequency'
- 'QUERY_TIMEOUT: Break down filters or add selectivity'
- '401 Unauthorized: Recheck OAuth scopes or token expiration'
- 'error-not-allowed: The bot user does not have access to the specified channel.'
- '401 Unauthorized: Check API key and permissions.'
- '429 Too Many Requests: Rate limit exceeded.'
- '401 Unauthorized: Check your token'
- '403 Forbidden: Insufficient permissions'
- '403 Forbidden: Check permissions for the requested resource.'
- '404 Not Found: Verify the endpoint or resource ID is correct.'
- '403 Forbidden: Check user permissions'
- '404 Not Found: Verify file ID'
- '401 Unauthorized: Token may be expired or invalid'
- '401 Unauthorized: Check client ID and secret'
- '429 Too Many Requests: Slow down your requests'
- An unexpected error occurred, please try again
- '401 Unauthorized: Check your OAuth configuration'
- '403 Forbidden: You do not have permission to access this resource'
- '403 Forbidden: Check file permissions'
- '401 Unauthorized: Verify OAuth token validity'
- '401 Unauthorized: Check client ID, secret, and token'
- '401 Unauthorized: Check API key and token permissions'
- '429 Too Many Requests: Rate limit exceeded, slow down requests'
- '403 Forbidden: Check permissions for the resource'
- '404 Not Found: Verify resource ID or URL'
- '404 Not Found: Verify the endpoint and parameters'
- '500 Internal Server Error: Retry the request'
- If Rocket.Chat receives a response status other than `200`, it will retry up to
  10 times.
- 'Bad Request: Invalid parameters'
- 'Unauthorized: Check your authentication credentials'
- 'Not Found: The requested resource does not exist'
- '401 Unauthorized: Check your credentials.'
- '429 Too Many Requests: Rate limit exceeded, try again later.'
- '401 Unauthorized: Check client credentials'
- '429 Too Many Requests: Rate limit exceeded'
auth_info:
  mentioned_objects:
  - OauthToken
  - AuthProvider
  - NamedCredential
  - OAuth2
  - AccessToken
  - RefreshToken
  - DPO
client:
  base_url: https://rocket.chat
  auth:
    type: oauth2
    flow: refresh_token
    token_url: https://login.rocket.chat/oauth/token
    client_id: '{{ dlt.secrets[''rocket_chat_client_id''] }}'
    client_secret: '{{ dlt.secrets[''rocket_chat_client_secret''] }}'
    refresh_token: '{{ dlt.secrets[''rocket_chat_refresh_token''] }}'
    location: header
    header_name: Authorization
  headers:
    Accept: application/json
source_metadata: null
