resources:
- name: userinfo
  endpoint:
    path: /v2/oauth/userinfo
    method: GET
    data_selector: ''
    params: {}
- name: user_info
  endpoint:
    path: /v2/oauth/userinfo
    method: GET
    data_selector: data
- name: jwks
  endpoint:
    path: /v2/.well-known/jwks.json
    method: GET
    data_selector: keys
- name: openid_configuration
  endpoint:
    path: /v2/.well-known/openid-configuration
    method: GET
    data_selector: ''
- name: userinfo
  endpoint:
    path: /v2/oauth/userinfo
    method: GET
    data_selector: data
- name: user_info
  endpoint:
    path: /v2/oauth/userinfo
    method: GET
    data_selector: data
- name: public_keys
  endpoint:
    path: /v2/.well-known/jwks.json
    method: GET
    data_selector: keys
- name: openid_configuration
  endpoint:
    path: /v2/.well-known/openid-configuration
    method: GET
    data_selector: ''
- name: myinfo
  endpoint:
    path: /myinfo
    method: GET
- name: pocdex
  endpoint:
    path: /pocdex
    method: GET
- name: myinfo
  endpoint:
    path: /myinfo
    method: GET
    data_selector: data
    params: {}
notes:
- sgID is completely free to use! There are no integration or usage costs associated
  with sgID.
- Load your sgID credentials in a secure way using environment variables instead of
  hard-coding them into your app.
- sgID only supports the S256 code challenge method
- Each end user's unique identifier is different for each sgID client
- User data is transmitted in encrypted form.
- Decrypt the key received from the user info response with your client's private
  key to obtain the block key.
- Decrypt the data received from the user info response with the block key.
- sgID only supports the authorization code flow.
- On certain cloud providers, reading the private key as an environment variables
  may result in this error message. This happens when newline characters \n are escaped
  and transformed to \n.
- sgID's protocol builds on top of the OIDC protocol to provide end-to-end encryption
- sgID only supports confidential clients due to the requirement of keeping a secret
  for end-to-end encryption.
- As part of sgID's privacy-preserving measures, user data is transmitted in encrypted
  form.
- The data is encrypted with a block key, which itself is encrypted with your client's
  public key.
- To obtain the user data in plaintext, you will need to decrypt the key received
  from the user info response with your client's private key.
- sgID does not support public clients like standalone SPAs or native mobile applications.
- Deprecation of v1 SDK will take place in 31st December 2023
- PKCE is introduced and its implementation is mandated.
- Deprecation of the v1.x SDK will take place in 31st December 2023.
- sgID only supports the authorization code flow
- For public sector employees, access to additional data fields is possible upon request.
- On certain cloud providers, reading the private key as an environment variables
  may result in this error message. This happens when newline characters `\n` are
  escaped and transformed to `\n`.
- sgID gets government officer information from HR systems through a centralised database.
- sgID is publicly available for integration.
- sgID is completely free to use!
- sgID only supports authorization code flow for confidential clients
- Do not reuse the same PKCE pairs for any requests.
- sub is now required in userinfo() calls.
- Uses OAuth2 with refresh token â€” requires setup of connected app in api
- sgID does not support username-password logins.
- The sgID SDK is meant to be used within server-side code
errors:
- '401 Unauthorized: Recheck OAuth credentials or scopes'
- '400: Invalid request due to missing parameters or invalid grant.'
- '401: Invalid client credentials.'
- '500: Server error.'
- '401 Unauthorized: Recheck OAuth scopes or token expiration'
- '400: Invalid request due to one of the following errors: Invalid grant type, Missing
  parameters in the request body, Invalid grant'
- '401: Invalid client credentials'
- '500: Server error'
auth_info:
  mentioned_objects:
  - client ID
  - client secret
  - scopes
  - publicKey
  - privateKey
  - SgidClient
  - Authorization Code Flow
  - OauthToken
  - AuthProvider
  - NamedCredential
client:
  base_url: https://api.id.gov.sg
  auth:
    type: oauth2
source_metadata: null
