resources:
- name: index_view
  endpoint:
    path: /index
    method: GET
- name: simple_form_view
  endpoint:
    path: /simple_form
    method: GET
- name: public_form_view
  endpoint:
    path: /public_form
    method: GET
- name: model_view
  endpoint:
    path: /model
    method: GET
- name: multiple_view
  endpoint:
    path: /multiple_view
    method: GET
- name: master_detail_view
  endpoint:
    path: /master_detail
    method: GET
- name: activation
  endpoint:
    path: /activation
    method: POST
    data_selector: activation
- name: add_registration
  endpoint:
    path: /add_registration
    method: POST
    data_selector: registration
- name: BaseView
  endpoint:
    path: /myview/method1/<string:param1>
    method: GET
    data_selector: records
    params: {}
- name: BaseView
  endpoint:
    path: /myview/method2/<string:param1>
    method: GET
    data_selector: records
    params: {}
- name: ContactGroup
  endpoint:
    path: /api/contactgroup
    method: GET
    data_selector: records
- name: Contact
  endpoint:
    path: /api/contact
    method: GET
    data_selector: records
- name: GroupModelView
  endpoint:
    path: /api
    method: GET
- name: ContactModelView
  endpoint:
    path: /api/read
    method: GET
- name: get_item
  endpoint:
    path: /api/get-item
    method: GET
- name: lists_and_queries
  endpoint:
    path: /api/lists-and-queries
    method: GET
- name: updates_and_partial_updates
  endpoint:
    path: /api/updates-and-partial-updates
    method: POST
- name: group
  endpoint:
    path: /api/v1/group
    method: POST
    data_selector: result
    params: {}
- name: group
  endpoint:
    path: /api/v1/group/<PK>
    method: GET
    data_selector: result
    params: {}
- name: group
  endpoint:
    path: /api/v1/group/<PK>
    method: PUT
    data_selector: result
    params: {}
- name: group
  endpoint:
    path: /api/v1/group/<PK>
    method: DELETE
    data_selector: message
    params: {}
- name: private
  endpoint:
    path: /api/v1/example/private
    method: GET
    data_selector: message
    params: {}
- name: group
  endpoint:
    path: /group
    method: POST
    data_selector: result
- name: group_item
  endpoint:
    path: /group/{id}
    method: GET
    data_selector: result
- name: group
  endpoint:
    path: /group
    method: POST
    data_selector: message
- name: tag
  endpoint:
    path: /tag
    method: POST
    data_selector: result
- name: contact
  endpoint:
    path: /contact
    method: POST
    data_selector: result
- name: ContactGroup
  endpoint:
    path: /api/contactgroup
    method: GET
    data_selector: records
    params: {}
- name: Contact
  endpoint:
    path: /api/contact
    method: GET
    data_selector: records
    params: {}
- name: CountryDirectChartView
  endpoint:
    path: /api
    method: GET
    data_selector: definitions
    params: {}
- name: Country
  endpoint:
    path: /country
    method: GET
    data_selector: records
    params: {}
- name: CountryStats
  endpoint:
    path: /country_stats
    method: GET
    data_selector: records
    params: {}
- name: Person
  endpoint:
    path: /api/person
    method: GET
    data_selector: records
    params: {}
- name: employee
  endpoint:
    path: /api/employee
    method: GET
    data_selector: records
- name: department
  endpoint:
    path: /api/department
    method: GET
    data_selector: records
- name: function
  endpoint:
    path: /api/function
    method: GET
    data_selector: records
- name: GroupModelView
  endpoint:
    path: /api/group
    method: GET
    data_selector: records
    params: {}
- name: MyModel
  endpoint:
    path: /api/my_model
    method: GET
    data_selector: records
    params: {}
- name: ContactModelView
  endpoint:
    path: ./your_project/app/templates/list_contacts.html
    method: GET
    data_selector: records
- name: ContactModelView
  endpoint:
    path: ./your_project/app/templates/add_contacts.html
    method: GET
    data_selector: records
- name: ContactModelView
  endpoint:
    path: ./your_project/app/templates/edit_contacts.html
    method: GET
    data_selector: records
- name: ContactModelView
  endpoint:
    path: ./your_project/app/templates/show_contacts.html
    method: GET
    data_selector: records
- name: ps_command
  endpoint:
    path: /api
    method: GET
    data_selector: output
- name: Model1
  endpoint:
    path: /api/model1
    method: GET
    data_selector: records
    params: {}
- name: Model2
  endpoint:
    path: /api/model2
    method: GET
    data_selector: records
    params: {}
- name: Model3
  endpoint:
    path: /api/model3
    method: GET
    data_selector: records
    params: {}
- name: user_registration
  endpoint:
    path: /api/register
    method: POST
    data_selector: user
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
notes:
- Will allow flask-login cookie authorization on the API default is False.
- If using flask-wtf CSRFProtect exempt the API from check
- Does not register routes for a set of builtin ModelRestApi functions.
- The activation template, shown when the user is activated.
- The message shown on an unsuccessful registration.
- Includes Database support for SQLAlchemy and MongoDB.
- Supports multiple authentication methods including OAuth, OpenID, Database, LDAP.
- The skeleton application is not actually needed for you to run AppBuilder, but it’s
  a good way to start.
- Since version 1.3.0 no admin user is automatically created, you must use flask fab
  cli to do it.
- Command line manager is integrated with Flask cli.
- The old fabmanager command line is now deprecated.
- Make sure you set your own SECRET_KEY to something unique and secret.
- Update redirect on version 0.10.3 was reviewed and uses session cookies to keep
  5 records of navigation history.
- Since version 1.3.0, you must render all your views templates like self.render_template.
- Update redirect, on version 0.10.3, the redirect algorithm was reviewed, and uses
  session cookies to keep 5 records of navigation history.
- Since version 1.3.0, you must render all your views templates like *self.render_template*.
- REST API provides various endpoints for item retrieval, lists, and updates.
- Default API authentication method is done using JSON Web Tokens (JWT).
- Accessing private methods requires a valid JWT.
- The API supports dynamic rendering of forms for add and edit operations.
- Meta information can be fetched using the _info endpoint.
- Name must start with an A for group creation.
- This kind of chart inherits from BaseChartView that has some properties that you
  can configure.
- Uses Flask AppBuilder for chart views
- Aggregation functions available for count, sum, and average
- Images will be saved on the server with their filename concatenated by a UUID's.
  Additionally will be resized for optimization.
- Uses SQLite for the database, no need to install anything.
- Default authentication method will be database.
- Composite keys is supported for SQLAlchemy only, you can reference them using SQLAlchemy
  ‘relationship’.
- 'Base available permission are: can_add, can_edit, can_delete, can_list, can_show.'
- Readonly select fields are a special case, but it’s solved in a simpler way.
- 'AJAXSelectField is expecting the following parameters for the constructor: label,
  description, datamodel, col_name, widget, endpoint.'
- F.A.B comes with bootswatch themes ready to use, to change bootstrap default theme
  just change the APP_THEME key’s value.
- Using label argument is optional for view name or category, but it’s advised for
  internationalization, if you use it with Babel’s lazy_gettext function it will automate
  translation’s extraction.
- F.A.B. has support for 15 languages (planning for some more)
- You can add your own translations for your application, using Flask-Babel.
- Session is preserved and encrypted using Flask-Login
- OpenID requires Flask-OpenID
- force users to re-auth after 30min of inactivity (to keep roles in sync)
- Uses OAuth2 with refresh token — requires setup of connected app in api
- Some objects like Contact may return nulls in deeply nested fields
- 'This is a must have if your using the factory app pattern, on the config declare
  your class the following way: FAB_SECURITY_MANAGER_CLASS=''app.security.MySecurityManager''.'
- Enabling and using the default implementation is easy just configure the following
  global config keys on config.py
- If you are using OAuth for authentication, this release will break your logins.
- There was a Fix for the oauth_user_info_getter decorator also, now it will obey
  the doc definition.
- OAuth dependency changed from flask-oauth to authlib
errors:
- '400: Bad request'
- '401: Unauthorized'
- '403: Forbidden'
- '404: Not found'
- '422: Could not process entity'
- '500: Fatal error'
- '400: $ref: ‘#/components/responses/400’'
- '401: $ref: ‘#/components/responses/401’'
- '422: $ref: ‘#/components/responses/422’'
- '500: $ref: ‘#/components/responses/500’'
- 'Invalid command: Check the command name and parameters.'
- 'Database upgrade required: Run upgrade-db command.'
- '401 Unauthorized: Missing Authorization Header'
- '404 Not found: Resource not found'
- '404 Not found: The requested resource does not exist.'
- '401 Unauthorized: Invalid or missing authentication token.'
- 'HTTP 422: Unprocessable Entity'
- 'REQUEST_LIMIT_EXCEEDED: Throttle API calls or reduce frequency'
- 'QUERY_TIMEOUT: Break down filters or add selectivity'
- '401 Unauthorized: Recheck OAuth scopes or token expiration'
- Not possible to register you at the moment, try again later
auth_info:
  mentioned_objects:
  - OauthToken
  - AuthProvider
  - NamedCredential
  - JWT
  - AUTH_DB
  - AUTH_LDAP
  - AUTH_OAUTH
  - AUTH_OID
  - AUTH_REMOTE_USER
  - BaseSecurityManager
client:
  base_url: http://localhost:8080
  headers:
    Accept: application/json
source_metadata: null
