resources:
- name: Tyk Gateway
  endpoint:
    path: /tyk-oss-gateway/
    method: GET
- name: Tyk Pump
  endpoint:
    path: /tyk-pump/
    method: GET
- name: Tyk Identity Broker
  endpoint:
    path: /api-management/external-service-integration/#what-is-tyk-identity-broker-tib
    method: GET
- name: Tyk Helm Chart
  endpoint:
    path: /product-stack/tyk-charts/overview/
    method: GET
- name: import_apis
  endpoint:
    path: /admin/apis/import
    method: POST
- name: import_organisations
  endpoint:
    path: /admin/organisations/import
    method: POST
- name: import_policies
  endpoint:
    path: /admin/policies/import
    method: POST
- name: import_apis
  endpoint:
    path: /admin/apis/import
    method: POST
- name: import_organisations
  endpoint:
    path: /admin/organisations/import
    method: POST
- name: import_policies
  endpoint:
    path: /admin/policies/import
    method: POST
- name: users
  endpoint:
    path: /admin/users
    method: POST
- name: user_details
  endpoint:
    path: /admin/users/{userId}
    method: GET
- name: update_user
  endpoint:
    path: /admin/users/{userId}
    method: PUT
- name: allow_reset_passwords
  endpoint:
    path: /admin/users/{userId}/actions/allow_reset_passwords
    method: PUT
- name: disallow_reset_passwords
  endpoint:
    path: /admin/users/{userId}/actions/disallow_reset_passwords
    method: PUT
- name: reload_dashboard_urls
  endpoint:
    path: /admin/system/reload
    method: GET
- name: organisations
  endpoint:
    path: /admin/organisations
    method: GET
- name: create_organisation
  endpoint:
    path: /admin/organisations
    method: POST
- name: delete_organisation
  endpoint:
    path: /admin/organisations/{orgID}
    method: DELETE
- name: retrieve_organisation
  endpoint:
    path: /admin/organisations/{orgID}
    method: GET
- name: update_organisation
  endpoint:
    path: /admin/organisations/{orgID}
    method: PUT
- name: generate_portals
  endpoint:
    path: /admin/organisations/{orgID}/generate-portals
    method: POST
- name: generate_authentication_token
  endpoint:
    path: /admin/sso
    method: POST
- name: purge_oauth_tokens
  endpoint:
    path: /admin/oauth/tokens
    method: DELETE
- name: list_keys
  endpoint:
    path: /admin/org/keys
    method: GET
- name: create_key
  endpoint:
    path: /admin/org/keys
    method: POST
- name: delete_key
  endpoint:
    path: /admin/org/keys/{keyId}
    method: DELETE
- name: get_key_details
  endpoint:
    path: /admin/org/keys/{keyId}
    method: GET
- name: update_key
  endpoint:
    path: /admin/org/keys/{keyId}
    method: PUT
- name: dataplanes
  endpoint:
    path: /dataplanes
    method: GET
    data_selector: null
    params: {}
- name: health
  endpoint:
    path: /health
    method: GET
    data_selector: null
    params: {}
- name: readiness
  endpoint:
    path: /readiness
    method: GET
    data_selector: null
    params: {}
- name: liveness
  endpoint:
    path: /liveness
    method: GET
    data_selector: null
    params: {}
- name: pprof_profile
  endpoint:
    path: /debug/pprof/profile
    method: GET
    data_selector: null
    params: {}
- name: pprof
  endpoint:
    path: /debug/pprof/{profileType}
    method: GET
    data_selector: null
    params: {}
- name: config
  endpoint:
    path: /config
    method: GET
    data_selector: null
    params: {}
- name: env
  endpoint:
    path: /env
    method: GET
    data_selector: null
    params: {}
- name: users
  endpoint:
    path: /admin/users
    method: POST
- name: user_details
  endpoint:
    path: /admin/users/{userId}
    method: GET
- name: update_user
  endpoint:
    path: /admin/users/{userId}
    method: PUT
- name: allow_reset_passwords
  endpoint:
    path: /admin/users/{userId}/actions/allow_reset_passwords
    method: PUT
- name: disallow_reset_passwords
  endpoint:
    path: /admin/users/{userId}/actions/disallow_reset_passwords
    method: PUT
- name: reload_dashboard_urls
  endpoint:
    path: /admin/system/reload
    method: GET
- name: organisations
  endpoint:
    path: /admin/organisations
    method: GET
- name: create_organisation
  endpoint:
    path: /admin/organisations
    method: POST
- name: delete_organisation
  endpoint:
    path: /admin/organisations/{orgID}
    method: DELETE
- name: retrieve_organisation
  endpoint:
    path: /admin/organisations/{orgID}
    method: GET
- name: update_organisation
  endpoint:
    path: /admin/organisations/{orgID}
    method: PUT
- name: generate_portals
  endpoint:
    path: /admin/organisations/{orgID}/generate-portals
    method: POST
- name: generate_auth_token
  endpoint:
    path: /admin/sso
    method: POST
- name: purge_oauth_tokens
  endpoint:
    path: /admin/oauth/tokens
    method: DELETE
- name: list_keys
  endpoint:
    path: /admin/org/keys
    method: GET
- name: create_key
  endpoint:
    path: /admin/org/keys
    method: POST
- name: delete_key
  endpoint:
    path: /admin/org/keys/{keyId}
    method: DELETE
- name: get_key_details
  endpoint:
    path: /admin/org/keys/{keyId}
    method: GET
- name: update_key
  endpoint:
    path: /admin/org/keys/{keyId}
    method: PUT
- name: data_planes
  endpoint:
    path: /dataplanes
    method: GET
    data_selector: data
    params: {}
- name: health_check
  endpoint:
    path: /health
    method: GET
    data_selector: status
    params: {}
- name: readiness_check
  endpoint:
    path: /readiness
    method: GET
    data_selector: status
    params: {}
- name: liveness_check
  endpoint:
    path: /liveness
    method: GET
    data_selector: status
    params: {}
- name: cpu_profiling
  endpoint:
    path: /debug/pprof/profile
    method: GET
    data_selector: profile_data
    params: {}
- name: pprof_data
  endpoint:
    path: /debug/pprof/{profileType}
    method: GET
    data_selector: pprof_data
    params: {}
- name: current_configuration
  endpoint:
    path: /config
    method: GET
    data_selector: config_status
    params: {}
- name: environment_variables
  endpoint:
    path: /env
    method: GET
    data_selector: env_variables
    params: {}
- name: list_apis
  endpoint:
    path: /api/apis/
    method: GET
- name: search_apis
  endpoint:
    path: /api/apis/search
    method: GET
- name: retrieve_api
  endpoint:
    path: /api/apis/{id}
    method: GET
- name: delete_api
  endpoint:
    path: /api/apis/{id}
    method: DELETE
- name: create_api_definition
  endpoint:
    path: /api/apis/
    method: POST
- name: update_api_definition
  endpoint:
    path: /api/apis/{internal_or_external_id}
    method: PUT
- name: import_data_source
  endpoint:
    path: /api/data-graphs/data-sources/import
    method: POST
- name: analytics_api_key
  endpoint:
    path: /api/activity/keys/endpoint/{keyHash}/{startDay}/{startMonth}/{startYear}/{EndDay}/{EndMonth}/{EndYear}
    method: GET
- name: analytics_oauth_client
  endpoint:
    path: /api/activity/oauthid/endpoint/{OAuthClientID}/{startDay}/{startMonth}/{startYear}/{EndDay}/{EndMonth}/{EndYear}
    method: GET
- name: get_user
  endpoint:
    path: /admin/users/{USER_ID}
    method: GET
- name: add_user
  endpoint:
    path: /admin/users
    method: POST
- name: update_user
  endpoint:
    path: /admin/users/{USER_ID}
    method: PUT
- name: list_user_groups
  endpoint:
    path: /api/usergroups
    method: GET
- name: get_user_group
  endpoint:
    path: /api/usergroups/{user_group-id}
    method: GET
- name: add_user_group
  endpoint:
    path: /api/usergroups
    method: POST
- name: update_user_group
  endpoint:
    path: /api/usergroups/{user_group-id}
    method: PUT
- name: delete_user_group
  endpoint:
    path: /api/usergroups/{user_group-id}
    method: DELETE
- name: list_additional_permissions
  endpoint:
    path: /api/org/permissions
    method: GET
- name: update_additional_permissions
  endpoint:
    path: /api/org/permissions
    method: PUT
- name: get_list_of_apis
  endpoint:
    path: /api/apis/
    method: GET
- name: search_apis_by_name
  endpoint:
    path: /api/apis/search
    method: GET
- name: retrieve_single_api_by_id
  endpoint:
    path: /api/apis/{id}
    method: GET
- name: delete_api_by_id
  endpoint:
    path: /api/apis/{id}
    method: DELETE
- name: create_api_definition
  endpoint:
    path: /api/apis/
    method: POST
- name: update_api_definition
  endpoint:
    path: /api/apis/{internal_or_external_id}
    method: PUT
- name: import_data_sources
  endpoint:
    path: /api/data-graphs/data-sources/import
    method: POST
- name: get_keys
  endpoint:
    path: /api/apis/{api-id}/keys
    method: GET
- name: get_specific_key
  endpoint:
    path: /api/apis/{api-id}/keys/{key-id}
    method: GET
- name: create_custom_key
  endpoint:
    path: /api/keys/{custom-key-id}
    method: POST
- name: generate_key
  endpoint:
    path: /api/keys
    method: POST
- name: update_key
  endpoint:
    path: /api/apis/{api-id}/keys/{keyId}
    method: PUT
- name: delete_key
  endpoint:
    path: /api/apis/{api-id}/keys/{keyId}
    method: DELETE
- name: create_basic_auth_user
  endpoint:
    path: /api/apis/keys/basic/{username}
    method: POST
- name: Analytics of API Key
  endpoint:
    path: /api/activity/keys/endpoint/{keyHash}/{startDay}/{startMonth}/{startYear}/{EndDay}/{EndMonth}/{EndYear}
    method: GET
- name: Analytics of OAuth Client
  endpoint:
    path: /api/activity/oauthid/endpoint/{OAuthClientID}/{startDay}/{startMonth}/{startYear}/{EndDay}/{EndMonth}/{EndYear}
    method: GET
- name: Get User
  endpoint:
    path: /admin/users/{USER_ID}
    method: GET
- name: Add user
  endpoint:
    path: /admin/users
    method: POST
- name: Update User
  endpoint:
    path: /admin/users/{USER_ID}
    method: PUT
- name: List User Groups
  endpoint:
    path: /api/usergroups
    method: GET
- name: Get User Group
  endpoint:
    path: /api/usergroups/{user_group-id}
    method: GET
- name: Add User Group
  endpoint:
    path: /api/usergroups
    method: POST
- name: Update User Group
  endpoint:
    path: /api/usergroups/{user_group-id}
    method: PUT
- name: Delete User Group
  endpoint:
    path: /api/usergroups/{user_group-id}
    method: DELETE
- name: List Additional Permissions
  endpoint:
    path: /api/org/permissions
    method: GET
- name: Add/Delete/Update Additional Permission
  endpoint:
    path: /api/org/permissions
    method: PUT
- name: Create OAuth Client
  endpoint:
    path: /api/apis/oauth/{{api-id}}
    method: POST
- name: List OAuth Clients
  endpoint:
    path: /api/apis/oauth/{{api-id}}
    method: GET
- name: Get OAuth Client
  endpoint:
    path: /api/apis/oauth/{{api-id}}/{{client_id}}
    method: GET
- name: Delete OAuth Client
  endpoint:
    path: /api/apis/oauth/{{api-id}}/{{client_id}}
    method: DELETE
- name: Retrieve Current Tokens
  endpoint:
    path: /api/apis/oauth/{apiID}/{oauthClientId}/tokens
    method: GET
- name: Revoke Single Token
  endpoint:
    path: /api/apis/oauth/{oauthClientId}/revoke
    method: POST
- name: Revoke All Tokens
  endpoint:
    path: /api/apis/oauth/{oauthClientId}/revoke_all
    method: POST
- name: Authorization Code
  endpoint:
    path: /api/apis/oauth/{{api_id}}/authorize-client/
    method: POST
- name: Generate Authentication Token
  endpoint:
    path: /admin/sso
    method: POST
- name: List Web Hooks
  endpoint:
    path: /api/hooks
    method: GET
- name: Get Single Web Hook
  endpoint:
    path: /api/hooks/{hook-id}
    method: GET
- name: Add Hook
  endpoint:
    path: /api/hooks
    method: POST
- name: Update Hook
  endpoint:
    path: /api/hooks/{hook-id}
    method: PUT
- name: Delete Web Hook
  endpoint:
    path: /api/hooks/{hook-id}
    method: DELETE
- name: get_keys
  endpoint:
    path: /api/apis/{api-id}/keys
    method: GET
- name: get_specific_key
  endpoint:
    path: /api/apis/{api-id}/keys/{key-id}
    method: GET
- name: create_custom_key
  endpoint:
    path: /api/keys/{custom-key-id}
    method: POST
- name: generate_key
  endpoint:
    path: /api/keys
    method: POST
- name: update_key
  endpoint:
    path: /api/apis/{api-id}/keys/{keyId}
    method: PUT
- name: delete_key
  endpoint:
    path: /api/apis/{api-id}/keys/{keyId}
    method: DELETE
- name: graphql_api
  endpoint:
    path: /graphql
    method: POST
- name: create_basic_auth_user
  endpoint:
    path: /api/apis/keys/basic/{username}
    method: POST
- name: List OPA rules and settings
  endpoint:
    path: /api/org/opa
    method: GET
- name: Update OPA rules and settings
  endpoint:
    path: /api/org/permission
    method: PUT
- name: Retrieve a single Organization
  endpoint:
    path: /admin/organisations/{org-id}
    method: GET
- name: Retrieve all Organizations
  endpoint:
    path: /admin/organisations/
    method: GET
- name: Create an Organization
  endpoint:
    path: /admin/organisations/
    method: POST
- name: Update an Organization
  endpoint:
    path: /admin/organisations/{id}
    method: PUT
- name: Delete an Organization
  endpoint:
    path: /admin/organisations/{id}
    method: DELETE
- name: Get User
  endpoint:
    path: /admin/users/{USER_ID}
    method: GET
- name: Add user
  endpoint:
    path: /admin/users
    method: POST
- name: Update User
  endpoint:
    path: /admin/users/{USER_ID}
    method: PUT
- name: Generate authentication token
  endpoint:
    path: /admin/sso
    method: POST
- name: Reload the Dashboard URLs
  endpoint:
    path: /admin/system/reload
    method: GET
- name: Export Organizations
  endpoint:
    path: /admin/organisations/{ORG-ID}
    method: GET
- name: Create OAuth Client
  endpoint:
    path: /api/apis/oauth/{{api-id}}
    method: POST
- name: List OAuth Clients
  endpoint:
    path: /api/apis/oauth/{{api-id}}
    method: GET
- name: Get OAuth Client
  endpoint:
    path: /api/apis/oauth/{{api-id}}/{{client_id}}
    method: GET
- name: Delete OAuth Client
  endpoint:
    path: /api/apis/oauth/{{api-id}}/{{client_id}}
    method: DELETE
- name: Retrieve All Current Tokens
  endpoint:
    path: /api/apis/oauth/{apiID}/{oauthClientId}/tokens
    method: GET
- name: Revoke Single OAuth Client Token
  endpoint:
    path: /api/apis/oauth/{oauthClientId}/revoke
    method: POST
- name: Revoke All OAuth Client Tokens
  endpoint:
    path: /api/apis/oauth/{oauthClientId}/revoke_all
    method: POST
- name: OAuth2.0 Authorization Code
  endpoint:
    path: /api/apis/oauth/{{api_id}}/authorize-client/
    method: POST
- name: Generate Authentication Token
  endpoint:
    path: /admin/sso
    method: POST
- name: List Web Hooks
  endpoint:
    path: /api/hooks
    method: GET
- name: Get Single Web Hook
  endpoint:
    path: /api/hooks/{hook-id}
    method: GET
- name: Add Hook
  endpoint:
    path: /api/hooks
    method: POST
- name: Update Hook
  endpoint:
    path: /api/hooks/{hook-id}
    method: PUT
- name: Delete Web Hook
  endpoint:
    path: /api/hooks/{hook-id}
    method: DELETE
- name: import_organization
  endpoint:
    path: /admin/organisations/import
    method: POST
- name: import_apis
  endpoint:
    path: /admin/apis/import
    method: POST
- name: import_policies
  endpoint:
    path: /admin/policies/import
    method: POST
- name: list_opa_rules_settings
  endpoint:
    path: /api/org/opa
    method: GET
- name: update_opa_rules_settings
  endpoint:
    path: /api/org/permission
    method: PUT
- name: retrieve_single_organization
  endpoint:
    path: /admin/organisations/{org-id}
    method: GET
- name: retrieve_all_organizations
  endpoint:
    path: /admin/organisations/
    method: GET
- name: create_organization
  endpoint:
    path: /admin/organisations/
    method: POST
- name: update_organization
  endpoint:
    path: /admin/organisations/{id}
    method: PUT
- name: delete_organization
  endpoint:
    path: /admin/organisations/{id}
    method: DELETE
- name: get_user
  endpoint:
    path: /admin/users/{USER_ID}
    method: GET
- name: add_user
  endpoint:
    path: /admin/users
    method: POST
- name: update_user
  endpoint:
    path: /admin/users/{USER_ID}
    method: PUT
- name: generate_authentication_token
  endpoint:
    path: /admin/sso
    method: POST
- name: reload_dashboard_urls
  endpoint:
    path: /admin/system/reload
    method: GET
- name: export_organizations
  endpoint:
    path: /admin/organisations/{ORG-ID}
    method: GET
- name: Import Organization
  endpoint:
    path: admin/organisations/import
    method: POST
    data_selector: ''
    params: {}
- name: Import APIs
  endpoint:
    path: admin/apis/import
    method: POST
    data_selector: ''
    params: {}
- name: Import Policies
  endpoint:
    path: admin/policies/import
    method: POST
    data_selector: ''
    params: {}
- name: assets
  endpoint:
    path: /api/assets
    method: POST
    data_selector: Status
    params: {}
- name: oas_import
  endpoint:
    path: /apis/oas/import
    method: POST
    data_selector: Status
    params: {}
- name: oas
  endpoint:
    path: /apis/oas
    method: POST
    data_selector: Status
    params: {}
- name: register_template
  endpoint:
    path: /api/assets
    method: POST
    data_selector: Status
    params: {}
- name: import_openapi
  endpoint:
    path: /apis/oas/import
    method: POST
    data_selector: Status
    params: {}
- name: import_tyk_oas
  endpoint:
    path: /apis/oas
    method: POST
    data_selector: Status
    params: {}
- name: open_policy
  endpoint:
    path: /open_policy
    method: GET
    data_selector: open_policy
    params: {}
- name: additional_permissions
  endpoint:
    path: /additional_permissions
    method: GET
    data_selector: additional_permissions
    params: {}
- name: get_list_of_apis
  endpoint:
    path: /api/apis/
    method: GET
    data_selector: apis
    params:
      incremental: p
- name: search_apis
  endpoint:
    path: /api/apis/search
    method: GET
    data_selector: apis
    params: {}
- name: retrieve_api_by_id
  endpoint:
    path: /api/apis/{id}
    method: GET
    data_selector: api_model
    params: {}
- name: create_api_definition
  endpoint:
    path: /api/apis/
    method: POST
    data_selector: Status
    params: {}
- name: update_api_definition
  endpoint:
    path: /api/apis/{internal_or_external_id}
    method: PUT
    data_selector: Status
    params: {}
- name: delete_api_by_id
  endpoint:
    path: /api/apis/{id}
    method: DELETE
    data_selector: Message
    params: {}
- name: list_apis
  endpoint:
    path: /api/apis/
    method: GET
    data_selector: apis
    params:
      p: 0
- name: search_apis
  endpoint:
    path: /api/apis/search
    method: GET
    data_selector: apis
    params: {}
- name: retrieve_api_by_id
  endpoint:
    path: /api/apis/{id}
    method: GET
    data_selector: api_model
    params: {}
- name: create_api_definition
  endpoint:
    path: /api/apis/
    method: POST
    data_selector: Status
    params: {}
- name: update_api_definition
  endpoint:
    path: /api/apis/{internal_or_external_id}
    method: PUT
    data_selector: Status
    params: {}
- name: delete_api_by_id
  endpoint:
    path: /api/apis/{id}
    method: DELETE
    data_selector: Status
    params: {}
- name: import_document
  endpoint:
    path: /api/data-graphs/data-sources/import
    method: POST
    data_selector: data
    params: {}
- name: analytics_api_key
  endpoint:
    path: /api/activity/keys/endpoint/{keyHash}/{startDay}/{startMonth}/{startYear}/{EndDay}/{EndMonth}/{EndYear}
    method: GET
    data_selector: data
    params: {}
- name: analytics_oauth_client
  endpoint:
    path: /api/activity/oauthid/endpoint/{OAuthClientID}/{startDay}/{startMonth}/{startYear}/{EndDay}/{EndMonth}/{EndYear}
    method: GET
    data_selector: data
    params: {}
- name: list_users
  endpoint:
    path: /api/users
    method: GET
    data_selector: users
    params: {}
- name: get_user
  endpoint:
    path: /api/users/{USER_ID}
    method: GET
    data_selector: user
    params: {}
- name: add_user
  endpoint:
    path: /api/users
    method: POST
    data_selector: user
    params: {}
- name: update_user
  endpoint:
    path: /api/users/{USER_ID}
    method: PUT
    data_selector: user
    params: {}
- name: delete_user
  endpoint:
    path: /api/users/{USER_ID}
    method: DELETE
    data_selector: user
    params: {}
- name: list_user_groups
  endpoint:
    path: /api/usergroups
    method: GET
    data_selector: groups
    params: {}
- name: get_user_group
  endpoint:
    path: /api/usergroups/{user_group-id}
    method: GET
    data_selector: group
    params: {}
- name: add_user_group
  endpoint:
    path: /api/usergroups
    method: POST
    data_selector: group
    params: {}
- name: additional_permissions
  endpoint:
    path: /api/org/permissions
    method: GET
- name: add_delete_update_additional_permission
  endpoint:
    path: /api/org/permissions
    method: PUT
- name: get_keys
  endpoint:
    path: /api/apis/{api-id}/keys
    method: GET
- name: get_specific_key
  endpoint:
    path: /api/apis/{api-id}/keys/{key-id}
    method: GET
- name: create_custom_key
  endpoint:
    path: /api/keys/{custom-key-id}
    method: POST
- name: generate_key
  endpoint:
    path: /api/keys
    method: POST
- name: update_key
  endpoint:
    path: /api/apis/{api-id}/keys/{keyId}
    method: PUT
- name: delete_key
  endpoint:
    path: /api/apis/{api-id}/keys/{keyId}
    method: DELETE
- name: create_user
  endpoint:
    path: /api/apis/keys/basic/{username}
    method: POST
- name: create_oauth_client
  endpoint:
    path: /api/apis/oauth/{{api-id}}
    method: POST
- name: list_oauth_clients
  endpoint:
    path: /api/apis/oauth/{{api-id}}
    method: GET
- name: import_document
  endpoint:
    path: /api/data-graphs/data-sources/import
    method: POST
    data_selector: null
    params:
      Content-Type: application/json
- name: import_openapi_document
  endpoint:
    path: /api/data-graphs/data-sources/import
    method: POST
    data_selector: null
    params:
      Content-Type: application/vnd.tyk.udg.v2.openapi
- name: import_asyncapi_document
  endpoint:
    path: /api/data-graphs/data-sources/import
    method: POST
    data_selector: null
    params:
      Content-Type: application/vnd.tyk.udg.v2.asyncapi
- name: analytics_api_key
  endpoint:
    path: /api/activity/keys/endpoint/{keyHash}/{startDay}/{startMonth}/{startYear}/{EndDay}/{EndMonth}/{EndYear}
    method: GET
    data_selector: null
    params: {}
- name: analytics_oauth_client
  endpoint:
    path: /api/activity/oauthid/endpoint/{OAuthClientID}/{startDay}/{startMonth}/{startYear}/{EndDay}/{EndMonth}/{EndYear}
    method: GET
    data_selector: null
    params: {}
- name: list_users
  endpoint:
    path: /api/users
    method: GET
    data_selector: users
    params: {}
- name: get_user
  endpoint:
    path: /api/users/{USER_ID}
    method: GET
    data_selector: null
    params: {}
- name: add_user
  endpoint:
    path: /api/users
    method: POST
    data_selector: null
    params: {}
- name: update_user
  endpoint:
    path: /api/users/{USER_ID}
    method: PUT
    data_selector: null
    params: {}
- name: delete_user
  endpoint:
    path: /api/users/{USER_ID}
    method: DELETE
    data_selector: null
    params: {}
- name: list_user_groups
  endpoint:
    path: /api/usergroups
    method: GET
    data_selector: groups
    params: {}
- name: get_user_group
  endpoint:
    path: /api/usergroups/{user_group-id}
    method: GET
    data_selector: null
    params: {}
- name: add_user_group
  endpoint:
    path: /api/usergroups
    method: POST
    data_selector: null
    params: {}
- name: user_group
  endpoint:
    path: /api/usergroups/{user_group-id}
    method: PUT
- name: additional_permissions
  endpoint:
    path: /api/org/permissions
    method: GET
- name: access_keys
  endpoint:
    path: /api/apis/{api-id}/keys
    method: GET
- name: create_custom_key
  endpoint:
    path: /api/keys/{custom-key-id}
    method: POST
- name: oauth_client
  endpoint:
    path: /api/apis/oauth/{{api-id}}/{{client_id}}
    method: GET
- name: current_tokens
  endpoint:
    path: /api/apis/oauth/{apiID}/{oauthClientId}/tokens
    method: GET
- name: revoke_token
  endpoint:
    path: /api/apis/oauth/{oauthClientId}/revoke
    method: POST
- name: revoke_all_tokens
  endpoint:
    path: /api/apis/oauth/{oauthClientId}/revoke_all
    method: POST
- name: authorize_client
  endpoint:
    path: /api/apis/oauth/{{api_id}}/authorize-client/
    method: POST
- name: generate_auth_token
  endpoint:
    path: /api/sso
    method: POST
- name: list_web_hooks
  endpoint:
    path: /api/hooks
    method: GET
- name: get_single_web_hook
  endpoint:
    path: /api/hooks/{hook-id}
    method: GET
- name: add_hook
  endpoint:
    path: /api/hooks
    method: POST
- name: update_hook
  endpoint:
    path: /api/hooks/{hook-id}
    method: PUT
- name: delete_web_hook
  endpoint:
    path: /api/hooks/{hook-id}
    method: DELETE
- name: list_opa_rules
  endpoint:
    path: /api/org/opa
    method: GET
- name: update_opa_rules
  endpoint:
    path: /api/org/opa
    method: PUT
- name: retrieve_organization
  endpoint:
    path: /admin/organisations/{org-id}
    method: GET
- name: organizations
  endpoint:
    path: /admin/organisations/
    method: GET
    data_selector: organisations
- name: create_organization
  endpoint:
    path: /admin/organisations/
    method: POST
    data_selector: ''
    params: {}
- name: update_organization
  endpoint:
    path: /admin/organisations/{id}
    method: PUT
    data_selector: ''
    params: {}
- name: delete_organization
  endpoint:
    path: /admin/organisations/{id}
    method: DELETE
    data_selector: ''
    params: {}
- name: get_user
  endpoint:
    path: /admin/users/{USER_ID}
    method: GET
    data_selector: ''
    params: {}
- name: add_user
  endpoint:
    path: /admin/users
    method: POST
    data_selector: ''
    params: {}
- name: update_user
  endpoint:
    path: /admin/users/{USER_ID}
    method: PUT
    data_selector: ''
    params: {}
- name: generate_auth_token
  endpoint:
    path: /admin/sso
    method: POST
    data_selector: ''
    params: {}
- name: reload_dashboard_urls
  endpoint:
    path: /admin/system/reload
    method: GET
    data_selector: ''
    params: {}
- name: oauth_client
  endpoint:
    path: /api/apis/oauth/{{api-id}}/{{client_id}}
    method: GET
- name: delete_oauth_client
  endpoint:
    path: /api/apis/oauth/{{api-id}}/{{client_id}}
    method: DELETE
- name: tokens
  endpoint:
    path: /api/apis/oauth/{apiID}/{oauthClientId}/tokens
    method: GET
- name: revoke_token
  endpoint:
    path: /api/apis/oauth/{oauthClientId}/revoke
    method: POST
- name: revoke_all_tokens
  endpoint:
    path: /api/apis/oauth/{oauthClientId}/revoke_all
    method: POST
- name: authorize_client
  endpoint:
    path: /api/apis/oauth/{{api_id}}/authorize-client/
    method: POST
- name: sso
  endpoint:
    path: /api/sso
    method: POST
- name: webhooks
  endpoint:
    path: /api/hooks
    method: GET
- name: single_webhook
  endpoint:
    path: /api/hooks/{hook-id}
    method: GET
- name: add_hook
  endpoint:
    path: /api/hooks
    method: POST
- name: update_hook
  endpoint:
    path: /api/hooks/{hook-id}
    method: PUT
- name: delete_webhook
  endpoint:
    path: /api/hooks/{hook-id}
    method: DELETE
- name: opa_rules
  endpoint:
    path: /api/org/opa
    method: GET
- name: update_opa_rules
  endpoint:
    path: /api/org/opa
    method: PUT
- name: organization
  endpoint:
    path: /admin/organisations/{org-id}
    method: GET
- name: anythingget
  endpoint:
    path: /anything
    method: GET
    data_selector: records
    params: {}
- name: track_endpoints
  endpoint:
    path: /anything
    method: GET
- name: organizations
  endpoint:
    path: /admin/organisations/
    method: GET
- name: create_organization
  endpoint:
    path: /admin/organisations/
    method: POST
- name: update_organization
  endpoint:
    path: /admin/organisations/{id}
    method: PUT
- name: delete_organization
  endpoint:
    path: /admin/organisations/{id}
    method: DELETE
- name: users
  endpoint:
    path: /admin/users/
    method: POST
- name: get_user
  endpoint:
    path: /admin/users/{USER_ID}
    method: GET
- name: update_user
  endpoint:
    path: /admin/users/{USER_ID}
    method: PUT
- name: sso
  endpoint:
    path: /admin/sso
    method: POST
- name: reload_dashboard
  endpoint:
    path: /admin/system/reload
    method: GET
- name: xml
  endpoint:
    path: /xml
    method: GET
    data_selector: responses
    params: {}
- name: anything
  endpoint:
    path: /anything
    method: POST
    data_selector: responses
    params: {}
- name: Default
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params: {}
- name: Test Policy
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: audit_logs
  endpoint:
    path: /api/audit
    method: GET
    data_selector: logs
    params: {}
- name: xml
  endpoint:
    path: /xml
    method: GET
    data_selector: ''
    params: {}
- name: anything
  endpoint:
    path: /anything
    method: POST
    data_selector: ''
    params: {}
- name: open_policy
  endpoint:
    path: /basic-config-and-security/security
    method: GET
    data_selector: open_policy
    params: {}
- name: liveness
  endpoint:
    path: /liveness
    method: GET
    data_selector: status
    params: {}
- name: readiness
  endpoint:
    path: /readiness
    method: GET
    data_selector: status
    params: {}
- name: health
  endpoint:
    path: /health
    method: GET
    data_selector: status
    params: {}
- name: audit
  endpoint:
    path: /api/audit
    method: GET
    data_selector: ''
    params: {}
- name: analytics
  endpoint:
    path: /tyk-pump/analytics
    method: POST
    data_selector: records
    params: {}
- name: health_check_liveness
  endpoint:
    path: /liveness
    method: GET
    data_selector: ''
    params: {}
- name: health_check_readiness
  endpoint:
    path: /readiness
    method: GET
    data_selector: ''
    params: {}
- name: health_check
  endpoint:
    path: /health
    method: GET
    data_selector: ''
    params: {}
- name: mongo-graph
  endpoint:
    path: /tyk_graph_analytics
    method: POST
    data_selector: meta
    params: {}
- name: sql-graph
  endpoint:
    path: /tyk_analytics_graph
    method: POST
    data_selector: meta
    params: {}
- name: csv
  endpoint:
    path: ./your_directory_here
    method: POST
    data_selector: meta
    params: {}
- name: elasticsearch
  endpoint:
    path: /tyk_analytics
    method: POST
    data_selector: meta
    params: {}
- name: mongo-pump-aggregate
  endpoint:
    path: /mongo-pump-aggregate
    method: GET
    data_selector: analytics
    params: {}
- name: sql
  endpoint:
    path: /sql
    method: GET
    data_selector: analytics
    params: {}
- name: moesif
  endpoint:
    path: /api/analytics
    method: POST
    data_selector: data
    params: {}
- name: create_organization_quota
  endpoint:
    path: /tyk/org/keys/{org-id}
    method: POST
    data_selector: ''
    params: {}
- name: mongo-graph
  endpoint:
    path: /mongo/tyk_graph_analytics
    method: POST
    data_selector: records
- name: sql-graph
  endpoint:
    path: /sql/tyk_analytics_graph
    method: POST
    data_selector: records
- name: elasticsearch
  endpoint:
    path: /elasticsearch/tyk_analytics
    method: POST
    data_selector: records
- name: csv
  endpoint:
    path: /csv/your_directory_here
    method: POST
    data_selector: records
- name: dogstatsd
  endpoint:
    path: /dogstatsd
    method: POST
    data_selector: records
- name: moesif
  endpoint:
    path: /pumps/moesif
    method: POST
    data_selector: meta.application_id
- name: site_reliability_engineer
  endpoint:
    path: /current-vacancies/site-reliability-engineer/
    method: GET
- name: finance_associate
  endpoint:
    path: /current-vacancies/finance-associate/
    method: GET
- name: mid_level_full_stack_engineer
  endpoint:
    path: /current-vacancies/mid-level-full-stack-engineer-react-go/
    method: GET
- name: enterprise_account_executive
  endpoint:
    path: /current-vacancies/account-executive/
    method: GET
- name: prometheus_metrics
  endpoint:
    path: /metrics
    method: GET
- name: incident_updates
  endpoint:
    path: /api/incidents
    method: GET
    data_selector: incidents
- name: maintenance_status
  endpoint:
    path: /api/maintenance
    method: GET
    data_selector: maintenance
- name: current_vacancies
  endpoint:
    path: /api/v1/current_vacancies
    method: GET
    data_selector: vacancies
- name: Current Vacancies
  endpoint:
    path: /current-vacancies
    method: GET
    data_selector: vacancies
- name: status
  endpoint:
    path: /status
    method: GET
    data_selector: components
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: api_management
  endpoint:
    path: /api-management
    method: GET
    data_selector: data
- name: api_management
  endpoint:
    path: /api_management
    method: GET
    data_selector: data
- name: api_management
  endpoint:
    path: /services/data/vXX.X/sobjects/APIManagement
    method: GET
    data_selector: records
- name: api_management
  endpoint:
    path: /api-management
    method: GET
    data_selector: records
- name: api_gateway
  endpoint:
    path: /api-gateway
    method: GET
    data_selector: records
- name: events
  endpoint:
    path: /events
    method: GET
    data_selector: records
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: events
  endpoint:
    path: /events
    method: GET
    data_selector: records
    params: {}
- name: api_management
  endpoint:
    path: /api/v1/manage
    method: GET
    data_selector: data
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: I’curity
  endpoint:
    path: /partners/icurity
    method: GET
    data_selector: partner_info
- name: Prodigio
  endpoint:
    path: /partners/prodigio
    method: GET
    data_selector: partner_info
- name: Kalamuna
  endpoint:
    path: /partners/kalamuna
    method: GET
    data_selector: partner_info
- name: SHI
  endpoint:
    path: /partners/shi
    method: GET
    data_selector: partner_info
- name: Continuum
  endpoint:
    path: /partners/continuum
    method: GET
    data_selector: partner_info
- name: Insight
  endpoint:
    path: /partners/insight
    method: GET
    data_selector: partner_info
- name: Allied Globetech
  endpoint:
    path: /partners/allied-globetech
    method: GET
    data_selector: partner_info
- name: Coforge
  endpoint:
    path: /partners/coforge
    method: GET
    data_selector: partner_info
- name: Wipro
  endpoint:
    path: /partners/wipro
    method: GET
    data_selector: partner_info
- name: NTT Data
  endpoint:
    path: /partners/ntt-data
    method: GET
    data_selector: partner_info
- name: Dkatalis
  endpoint:
    path: /partners/dkatalis
    method: GET
    data_selector: partner_info
- name: Qast
  endpoint:
    path: /partners/qast
    method: GET
    data_selector: partner_info
- name: Quandatics
  endpoint:
    path: /partners/quandatics
    method: GET
    data_selector: partner_info
- name: NEC
  endpoint:
    path: /partners/nec
    method: GET
    data_selector: partner_info
- name: Ogya
  endpoint:
    path: /partners/ogya
    method: GET
    data_selector: partner_info
- name: Loxley Orbit
  endpoint:
    path: /partners/loxley-orbit
    method: GET
    data_selector: partner_info
- name: Zies Tekno
  endpoint:
    path: /partners/zies-tekno
    method: GET
    data_selector: partner_info
- name: Argo Pacific
  endpoint:
    path: /partners/argo-pacific
    method: GET
    data_selector: partner_info
- name: NCS Group
  endpoint:
    path: /partners/ncs-group
    method: GET
    data_selector: partner_info
- name: Techzert
  endpoint:
    path: /partners/techzert
    method: GET
    data_selector: partner_info
- name: Ufinity
  endpoint:
    path: /partners/ufinity
    method: GET
    data_selector: partner_info
- name: Cateina
  endpoint:
    path: /partners/cateina
    method: GET
    data_selector: partner_info
- name: Fusion Consulting Services
  endpoint:
    path: /partners/fusion-consulting
    method: GET
    data_selector: partner_info
- name: Liip
  endpoint:
    path: /partners/liip
    method: GET
    data_selector: partner_info
- name: Axpe Consulting
  endpoint:
    path: /partners/axpe-consulting
    method: GET
    data_selector: partner_info
- name: Crayon
  endpoint:
    path: /partners/crayon
    method: GET
    data_selector: partner_info
- name: Actendo
  endpoint:
    path: /partners/actendo
    method: GET
    data_selector: partner_info
- name: COTI
  endpoint:
    path: /partners/coti
    method: GET
    data_selector: partner_info
- name: CloudAPPi
  endpoint:
    path: /partners/cloudappi
    method: GET
    data_selector: partner_info
- name: 6point6
  endpoint:
    path: /partners/6point6
    method: GET
    data_selector: partner_info
- name: EnableU
  endpoint:
    path: /partners/enableu
    method: GET
    data_selector: partner_info
- name: Velvet Consulting
  endpoint:
    path: /partners/velvet-consulting
    method: GET
    data_selector: partner_info
- name: Newage
  endpoint:
    path: /partners/newage
    method: GET
    data_selector: partner_info
- name: Savyint
  endpoint:
    path: /partners/savyint
    method: GET
    data_selector: partner_info
- name: Contact
  endpoint:
    path: /contact
    method: GET
- name: dashboard
  endpoint:
    path: /dashboard-svc-tyk-tyk-dashboard
    method: GET
- name: gateway
  endpoint:
    path: /gateway-svc-tyk-tyk-gateway.tyk.svc
    method: GET
- name: dashboard
  endpoint:
    path: /dashboard-svc-tyk-tyk-dashboard
    method: GET
- name: gateway
  endpoint:
    path: /gateway-svc-tyk-tyk-gateway.tyk.svc
    method: GET
- name: Dashboard
  endpoint:
    path: /dashboard
    method: GET
    data_selector: records
    params: {}
- name: Pump
  endpoint:
    path: /pump
    method: GET
    data_selector: records
    params: {}
- name: redis
  endpoint:
    path: /redis
    method: GET
    data_selector: records
    params: {}
- name: mongodb
  endpoint:
    path: /mongodb
    method: GET
    data_selector: records
    params: {}
- name: pgsql
  endpoint:
    path: /pgsql
    method: GET
    data_selector: records
    params: {}
- name: dashboard
  endpoint:
    path: /dashboard
    method: GET
    data_selector: records
    params: {}
- name: gateway
  endpoint:
    path: /gateway
    method: GET
    data_selector: records
    params: {}
- name: tyk_dashboard
  endpoint:
    path: /opt/tyk-dashboard/install/setup.sh
    method: POST
    data_selector: setup
    params:
      listenport: 3000
      redishost: <hostname>
      redisport: 6379
      mongo: mongodb://<IP Address>/tyk_analytics
      tyk_api_hostname: $HOSTNAME
      tyk_node_hostname: http://localhost
      tyk_node_port: 8080
      portal_root: /portal
      domain: '"XXX.XXX.XXX.XXX"'
- name: Gateway App
  endpoint:
    path: /heroku/create
    method: POST
    data_selector: app_name
    params: {}
- name: Dashboard App
  endpoint:
    path: /heroku/create
    method: POST
    data_selector: app_name
    params: {}
- name: Tyk Gateway
  endpoint:
    path: /tyk-gateway
    method: GET
    data_selector: records
    params: {}
- name: Tyk Dashboard
  endpoint:
    path: /tyk-dashboard
    method: GET
    data_selector: records
    params: {}
- name: tyk_dashboard
  endpoint:
    path: /opt/tyk-dashboard/install/setup.sh
    method: GET
    data_selector: setup
- name: redis
  endpoint:
    path: /tyk-redis-master.tyk.svc.cluster.local:6379
    method: GET
- name: mongo
  endpoint:
    path: /tyk-mongo-mongodb.tyk.svc.cluster.local
    method: GET
- name: postgres
  endpoint:
    path: /tyk-postgres-postgresql.tyk.svc.cluster.local
    method: GET
- name: redis
  endpoint:
    path: /redis
    method: GET
    data_selector: records
- name: mongodb
  endpoint:
    path: /mongodb
    method: GET
    data_selector: records
- name: postgresql
  endpoint:
    path: /postgresql
    method: GET
    data_selector: records
- name: postgresql_databases
  endpoint:
    params:
      postgresql_databases[]:
      - name: tyk_analytics
- name: postgresql_users
  endpoint:
    params:
      postgresql_users[]:
      - name: default
        password: topsecretpassword
- name: postgresql_global_config_options
  endpoint:
    params:
      postgresql_global_config_options[]:
      - option: listen_addresses
        value: '*'
- name: postgresql_hba_entries
  endpoint:
    params:
      postgresql_hba_entries[]:
      - type: host
        database: tyk_analytics
        user: default
        address: 0.0.0.0/0
        auth_method: md5
- name: postgresql_databases
  endpoint:
    params:
      postgresql_databases:
      - name: tyk_analytics
- name: postgresql_users
  endpoint:
    params:
      postgresql_users:
      - name: default
        password: topsecretpassword
- name: postgresql_global_config_options
  endpoint:
    params:
      postgresql_global_config_options:
      - option: listen_addresses
        value: '*'
- name: postgresql_hba_entries
  endpoint:
    params:
      postgresql_hba_entries:
      - type: host
        database: tyk_analytics
        user: default
        address: 0.0.0.0/0
        auth_method: md5
- name: Gateway
  endpoint:
    path: /
    method: GET
- name: tyk_dashboard
  endpoint:
    path: /opt/tyk-dashboard/install/setup.sh
    method: POST
    data_selector: install
- name: tyk_gateway
  endpoint:
    path: /install
    method: GET
- name: MongoDB Installation
  endpoint:
    path: /install-mongodb-on-ubuntu/
    method: GET
    data_selector: steps
    params: {}
- name: tyk-dashboard
  endpoint:
    path: /opt/tyk-dashboard/install/setup.sh
    method: POST
    data_selector: setup
    params:
      listenport: 3000
      redishost: <Redis Hostname>
      redisport: 6379
      mongo: mongodb://<Mongo IP Address>:<Mongo Port>/tyk_analytics
      tyk_api_hostname: $HOSTNAME
      tyk_node_hostname: http://localhost
      tyk_node_port: 8080
      portal_root: /portal
      domain: XXX.XXX.XXX.XXX
- name: tyk_dashboard
  endpoint:
    path: /tyk-dashboard
    method: GET
    data_selector: dashboard_data
- name: tyk_pump
  endpoint:
    path: /tyk-pump
    method: GET
    data_selector: pump_data
- name: tyk-gateway
  endpoint:
    path: /install
    method: GET
    data_selector: records
- name: Tyk Gateway Installation
  endpoint:
    path: /install/tyk-gateway
    method: GET
    data_selector: installation_steps
    params: {}
- name: tyk_dashboard
  endpoint:
    path: /tyk-dashboard
    method: GET
- name: tyk_pump
  endpoint:
    path: /tyk-pump
    method: GET
- name: tyk-gateway
  endpoint:
    path: /install
    method: GET
    data_selector: installation_steps
- name: backup
  endpoint:
    path: /backup
    method: POST
    data_selector: response
    params: {}
- name: restore
  endpoint:
    path: /restore
    method: POST
    data_selector: response
    params: {}
- name: TykOasApiDefinition
  endpoint:
    path: /api/tyk-oas
    method: GET
    data_selector: data
- name: ApiDefinition
  endpoint:
    path: /api/classic
    method: GET
    data_selector: data
- name: TykStreamsApiDefinition
  endpoint:
    path: /api/streams
    method: GET
    data_selector: data
- name: SecurityPolicy
  endpoint:
    path: /api/security-policy
    method: GET
    data_selector: data
- name: SubGraph
  endpoint:
    path: /api/subgraph
    method: GET
    data_selector: data
- name: SuperGraph
  endpoint:
    path: /api/supergraph
    method: GET
    data_selector: data
- name: OperatorContext
  endpoint:
    path: /api/operator-context
    method: GET
    data_selector: data
- name: Dashboard Configuration File
  endpoint:
    path: /opt/tyk-dashboard/tyk_analytics.conf
- name: Gateway Configuration File
  endpoint:
    path: /opt/tyk-gateway/tyk.conf
- name: Pump Configuration File
  endpoint:
    path: /opt/tyk-pump/pump.conf
- name: apidefinition
  endpoint:
    path: /tyk/apis
    method: GET
    data_selector: status
    params: {}
- name: TykOasApiDefinition
  endpoint:
    path: /tyk/tyk-oas-api-definition
    method: POST
    data_selector: data
- name: ApiDefinition
  endpoint:
    path: /tyk/api-definition
    method: POST
    data_selector: data
- name: TykStreamsApiDefinition
  endpoint:
    path: /tyk/streams-api-definition
    method: POST
    data_selector: data
- name: SecurityPolicy
  endpoint:
    path: /tyk/security-policy
    method: POST
    data_selector: data
- name: SubGraph
  endpoint:
    path: /tyk/subgraph
    method: POST
    data_selector: data
- name: SuperGraph
  endpoint:
    path: /tyk/supergraph
    method: POST
    data_selector: data
- name: OperatorContext
  endpoint:
    path: /tyk/operator-context
    method: POST
    data_selector: data
- name: TykOasApiDefinition
  endpoint:
    path: /tyk/tyk.io/v1alpha1/TykOasApiDefinition
    method: GET
- name: ApiDefinition
  endpoint:
    path: /tyk/tyk.io/v1alpha1/ApiDefinition
    method: GET
- name: TykStreamsApiDefinition
  endpoint:
    path: /tyk/tyk.io/v1alpha1/TykStreamsApiDefinition
    method: GET
- name: SecurityPolicy
  endpoint:
    path: /tyk/tyk.io/v1alpha1/SecurityPolicy
    method: GET
- name: SubGraph
  endpoint:
    path: /tyk/tyk.io/v1alpha1/SubGraph
    method: GET
- name: SuperGraph
  endpoint:
    path: /tyk/tyk.io/v1alpha1/SuperGraph
    method: GET
- name: OperatorContext
  endpoint:
    path: /tyk/tyk.io/v1alpha1/OperatorContext
    method: GET
- name: inactive-api
  endpoint:
    path: /inactive
    method: GET
- name: existing-api
  endpoint:
    path: /existing
    method: GET
- name: 'my-classic-api #global #staging'
  endpoint:
    path: /categorized
    method: GET
- name: order-api
  endpoint:
    path: /order-api
    method: GET
- name: order-api-v2
  endpoint:
    path: /order-api-v2
    method: GET
- name: petstore
  endpoint:
    path: /petstore/
    method: GET
- name: httpbin
  endpoint:
    path: /httpbin
    method: GET
- name: httpbin
  endpoint:
    path: /httpbin
    method: GET
    data_selector: records
    params: {}
- name: TykOasApiDefinition
  endpoint:
    path: /apis/oas
    method: POST
    data_selector: data
    params: {}
- name: ApiDefinition
  endpoint:
    path: /apis/classic
    method: POST
    data_selector: data
    params: {}
- name: TykStreamsApiDefinition
  endpoint:
    path: /apis/streams
    method: POST
    data_selector: data
    params: {}
- name: SecurityPolicy
  endpoint:
    path: /policies
    method: POST
    data_selector: data
    params: {}
- name: SubGraph
  endpoint:
    path: /subgraphs
    method: POST
    data_selector: data
    params: {}
- name: SuperGraph
  endpoint:
    path: /supergraphs
    method: POST
    data_selector: data
    params: {}
- name: OperatorContext
  endpoint:
    path: /context
    method: POST
    data_selector: data
    params: {}
- name: admin_sso
  endpoint:
    path: /admin/sso
    method: GET
- name: api_sso
  endpoint:
    path: /api/sso
    method: GET
- name: tap
  endpoint:
    path: /tap
    method: GET
- name: httpbin
  endpoint:
    path: /httpbin
    method: GET
- name: order-api
  endpoint:
    path: /order-api
    method: GET
- name: order-api-v2
  endpoint:
    path: /order-api-v2
    method: GET
- name: dump
  endpoint:
    path: /dump
    method: POST
    data_selector: output-directory
    params:
      dashboard_secret: dashboard-secret
- name: sync
  endpoint:
    path: /sync
    method: POST
    data_selector: sync
    params: {}
- name: publish
  endpoint:
    path: /publish
    method: POST
    data_selector: publish
    params: {}
- name: update
  endpoint:
    path: /update
    method: POST
    data_selector: update
    params: {}
- name: admin_sso
  endpoint:
    path: /admin/sso
    method: GET
- name: api_sso
  endpoint:
    path: /api/sso
    method: GET
- name: tap
  endpoint:
    path: /tap
    method: GET
    params:
      nonce: valid_nonce
notes:
- Tyk Cloud requires setup of connected app in Tyk
- 'Last updated: Jan 21, 2025'
- Tyk provides a powerful solution for companies looking to streamline API operations,
  enforce robust security standards, and gain deep visibility into their API usage.
- Tyk’s AI management solutions are designed to help enterprises integrate, control,
  and scale AI applications while maintaining compliance and security.
- Integrating AI into existing systems requires a structured architecture that connects
  models, APIs, and specialised tools securely and efficiently.
- Tyk supports a wide array of security protocols, including OAuth2.0, JWT, HMAC,
  and OpenID Connect.
- Tyk enables organizations to enforce fine-grained access control policies, rate
  limiting, and quotas.
- Uses OAuth2 with refresh token — requires setup of connected app in api
- Tyk supports OAuth2, JWT, OpenID Connect, and other protocols to secure APIs.
- Tyk supports both REST and GraphQL, so choose based on the complexity and data needs.
- Tyk offers tools to implement any authentication methods effectively.
- Tyk supports multiple deployment environments, allowing you to easily transition
  between development, staging, and production.
- The Tyk Team has created and maintains the following components, which are fully
  Open Source and available under Mozilla Public License 2.0 (MPL).
- Ensure that these are changed before deploying to production.
- GW `secret` and DB `tyk_api_config.secret` must match
- GW `node_secret` and DB `shared_node_secret` must match
- Change all the shared secrets before deploying to production.
- Health checks are expensive.
- 'Tyk is CPU-bound: you will get exponentially better performance the more cores
  you throw at Tyk.'
- Tyk Gateway is provided ‘Batteries-included’, with no feature lockout.
- Ideal for Open Banking, building software in the clouds as well as exposing APIs
  to teams, partners & consumers.
- Authorization header must be added to each request.
- API definitions are wrapped inside an `api_definition` field.
- ID’s (both `id` and `api_id`) are auto-generated by Tyk and cannot be set by the
  user.
- API uses an authorization header for authentication
- This will not work with a hashed key set.
- Basic Auth users are essentially a form of API token.
- Only Admin role Dashboard users are authorized to use it.
- Minimum required versions for the Gateway and Dashboard are v2.3 and v1.3.1.2, respectively.
- Uses API Templates for streamlined API creation
- API categories can be defined and managed for better organization
- API Templates are exclusive to Tyk OAS APIs.
- In a production environment, you must change the default `admin_Secret` in the`tyk_analytics.conf`
  file.
- API categorization is a governance feature provided within the Tyk Dashboard that
  helps you to manage a portfolio of APIs.
- API Templates are an API governance feature provided to streamline the process of
  creating Tyk OAS APIs.
- By default the Dashboard OPA engine is turned off, and you need to explicitly enable
  it via your Dashboard tyk_analytics.conf file.
- With the OPA turned on, the majority of the security rules will be dynamically evaluated
  based on these rules.
- The Tyk Dashboard API Access Credentials `Authorization` key can be found within
  the Dashboard UI at the bottom of the Edit User section for a user.
- Admin Dashboard users will be authorized to use the API.
- The track endpoint middleware has been configured for requests to the GET /anything
  endpoint.
- From Tyk v5.1 the Geographic Distribution screen will not be visible to a user if
  they are assigned the Owned Analytics permission.
- From Tyk v5.1 the Errors by Category data will not be visible to a user if they
  are assigned the Owned Analytics permission.
- From Tyk v5.1 the Traffic per OAuth Client ID charts will not be visible to a user
  if they are assigned the Owned Analytics permission.
- OPA rules can only be accessed by admin role users in the Dashboard.
- Some objects may return nulls in deeply nested fields
- API Editors not allowed to create APIs.
- From Tyk v5.1 (and LTS patches v4.0.14 and v5.0.3) the Geographic Distribution screen
  will not be visible to a user if they are assigned the Owned Analytics permission.
- From Tyk v5.1 (and LTS patches v4.0.14 and v5.0.3) the Errors by Category data will
  not be visible to a user if they are assigned the Owned Analytics permission.
- From Tyk v5.1 (and LTS patches v4.0.14 and v5.0.3) the Traffic per OAuth Client
  ID charts will not be visible to a user if they are assigned the Owned Analytics
  permission.
- Audit logs can be stored in files or in the database.
- In order to process API requests the worker Gateways need resources such as API
  keys, certificates, and OAuth clients.
- To ensure high availability these resources need to be synchronised in worker Gateways.
- Health checks are available via the HTTP port defined by http_port configuration
  setting and defaults to 8181.
- The /health endpoint is available on v2.7.0 or later for backward compatibility.
- Uses JSON format for audit logs if enabled
- Audit logs can be written to either files or database
- The Tyk Pump is not currently configurable in our Tyk Cloud solution.
- This change improves resilience in case the MDCB link or controller Gateway is unavailable.
- Tyk no longer supports SQLite as of Tyk 5.7.0. Please transition to PostgreSQL or
  MongoDB.
- Upgrade to v2.7.0 and later to have more accurate health checking.
- This will enable detailed recording globally, across all APIs.
- Tyk no longer supports SQLite as of Tyk 5.7.0. Please transition to PostgreSQL,
  MongoDB, or one of the listed compatible alternatives.
- Enable detailed analytics recording in Tyk Gateway to log HTTP headers and body.
- Tyk Pump svc is disabled by default. Set it to true to enable it.
- Detailed recording is needed for GraphQL information parsing.
- Gateway must be restarted after updating configuration parameters.
- Ensure analytics is enabled globally across all APIs.
- Restart Tyk Pump to pickup the Moesif config.
- Tyk offers a flexible, usage-based pricing model available for Cloud, Self-managed,
  and Hybrid deployments.
- Professional plan removes usage limits with flat-rate pricing.
- Requires setup of connected app in Tyk
- Real time visibility over Tyk Cloud components, incidents and maintenance events.
- OAuth2 authentication is required.
- Ensure correct setup of API gateway.
- Our people team is committed to respond to EVERY application.
- Securely expose and monetize real-time events and async APIs
- Take charge of your REST and GraphQL APIs on your terms
- 'Tyk offers three pricing tiers: Core, Professional, and Enterprise, with a free
  trial.'
- This privacy policy was last updated on 10th July 2025.
- Securely expose and monetize real-time events and async APIs.
- Some objects like Contact may return nulls in deeply nested fields
- Tyk provides a customizable API gateway for secure API management.
- We can provide you with a copy of these terms and conditions on request.
- You may opt out at any time from allowing further access by us to your location
  data by disabling cookies on your browser.
- Tyk is committed to conducting its business in accordance with all applicable Data
  Protection laws and regulations.
- We maintain an ISO 27001 compliant Information Security Management System.
- Uses OAuth2 with refresh token — requires setup of connected app in Tyk
- Tyk supports open standards natively, for seamless integrations with no vendor lock-in.
- Tyk offers flexible options for implementing robust access control and defense against
  attacks.
- Tyk offers a streamlined onboarding process that lets you set up your API gateway
  quickly and easily—often getting you up and running in minutes.
- Tyk offers real-time analytics at every level, from API performance monitoring in
  the Tyk Dashboard.
- Powerful, customizable API gateway for secure, simple APIM
- Supports integration with existing identity management systems
- Tyk API Gateway can be used with multiple API protocols.
- Supports business growth without introducing significant costs.
- Tyk Streams extends existing Tyk Gateway security features to streaming APIs.
- Tyk provides standardized security for REST, GraphQL and event-driven async APIs,
  including native support for OAuth.
- Event-native APIMNEW! Securely expose and monetize real-time events and async APIs
- 'Robust security: Protect your APIs from vulnerabilities and breaches with powerful,
  standardized security for REST, GraphQL and event-driven APIs.'
- 'Appropriate governance: Streamline compliance with automation and efficiency for
  secure API access and CI/CD pipeline integration.'
- Tyk is fully customizable, with templates and features that support PCI, HIPAA,
  SOC2, and ISO 27001/9001 compliance.
- Tyk Streams applies existing Tyk Gateway security features to streaming APIs, including
  all authentication methods, IP allow-listing, and MTLS.
- Tyk provides native support for OAuth.
- Tyk integrates smoothly with identity provider solutions.
- 'No vendor lock-in: We are OAS-native and don’t lock you in with proprietary specifications.'
- 'Design governance and consistency: Set a blueprint for your APIs with API templates
  to enforce governance policies.'
- Supports various deployment options including Cloud, Self-Managed, and Hybrid.
- Fully customizable with templates and features that support PCI, HIPAA, SOC2, and
  ISO 27001/9001 compliance.
- Tyk offers API management for both REST and GraphQL protocols.
- Tyk’s native OTel support simplifies integration, ensures compatibility and futureproofs
  observability of your REST and GraphQL APIs.
- Trusted by global enterprises
- Easy observability
- Tyk provides a powerful, customizable API gateway.
- Tyk provides a simple solution for working with multiple API protocols including
  REST, GraphQL, SOAP, and asynchronous, event-driven APIs.
- Embrace efficiency & automation with Tyk
- Easy API mocking reduces dependency on backend developers, allowing you to start
  testing before creating the backend.
- Tyk Developer Portal is OAS-native and can automatically create documentation from
  your API’s OpenAPI Specification (OAS) document.
- The portal offers highly flexible subscription plan creation capabilities, allowing
  you to bundle and evolve your API products to best meet your consumers’ needs.
- Tyk provides a comprehensive platform to create API products, make them available
  to consumers, and associate them with subscription plans.
- Tyk’s enterprise developer portal allows you to catalog and display your APIs, making
  them easy for consumers to discover and purchase.
- Tyk supports all BI tools with seamless integration
- Tyk provides a user-friendly dashboard for monitoring API analytics
- Supports OAuth 2.0/OIDC authentication
- Tyk automatically configures the API proxy from the definitions in the OAS document.
- Tyk works directly with your existing OAS documents, requiring minimal modifications.
- Tyk enables you to create and manage multi-tiered subscription plans tailored for
  different user segments.
- Tyk provides powerful flexibility in logging, allowing you to obfuscate logs to
  avoid storing personally identifiable information (PII).
- Tyk allows you to fully customize traces to meet your specific monitoring and compliance
  needs.
- API managementUnified API management with one platform for all protocols
- Tyk provides tailored authentication, authorization and request validation for GraphQL
  schemas.
- Observability and troubleshooting are harder for GraphQL than REST.
- Uses OAuth2 for authentication.
- Tyk's open source API gateway is free to use.
- Tyk's gateway is designed to mold around your existing stack.
- OpenTelemetry enhances API monitoring and troubleshooting.
- Tyk integrates natively with OpenTelemetry to provide end-to-end distributed tracing
  across your API ecosystem.
- Tyk can easily connect to your existing alerting systems to trigger emails, Slack
  messages, and other notifications as soon as something goes wrong.
- Tyk AI Studio provides a centralized AI management approach.
- Ensure compliance with global privacy regulations through customizable data flow
  management.
- This guide focuses on getting started with Tyk Cloud
- Tyk’s Open Source API Gateway is free to use.
- Tyk Gateway embraces open standards including the OpenAPI Specification (OAS), OAuth,
  Open Policy Agent (OPA), and OpenTelemetry (OTel).
- Setting this to Active will publish your API and make it public.
- Setting this to External will keep your API accessible to external services.
- Easy compliance – security, consistency and standardisation to keep your regulators
  happy without stifling innovation.
- Supports multi-cloud and hybrid environments.
- Tyk provides security specific to REST, GraphQL, async APIs and more.
- Tyk is open standards native, supporting OpenAPI Specification, OAuth, Open Policy
  Agent, and OpenTelemetry.
- Tyk can be deployed on cloud, on your infrastructure or through open source.
- Tyk supports horizontal and vertical scaling.
- 'Centralized governance and control: Bring consistency, security and governance
  to every AI interaction across your organization.'
- 'Strengthened security: Enjoy the peace of mind that stems from strict access controls,
  secure interactions and region-specific compliance.'
- 'Simplified workflows: Benefit from reduced complexity and enhanced efficiency while
  supporting your developers and less technical users to work with multiple LLMs,
  data models and tools.'
- Deploy Tyk in any region, getting close to your users and respecting local data
  sovereignty and compliance requirements with easy data sharding that balances local
  transactions with centralised control and deployment.
- Tyk is open source and compliant with open standards, such as OpenAPI Specification.
- Implement robust security with just a few clicks through the user-friendly Tyk Dashboard.
- Set Gateway Status to Active to publish your API.
- Set Access to External to make your API accessible to external services.
- Security you can trust
- Everything you need for trusted security, automated testing, performance optimisation,
  outstanding observability and more is included as a standard.
- Tyk offers a comprehensive solution for API management.
- Implement health checks for routine API monitoring and use native integrations with
  Slack and PagerDuty for notifications if something unusual occurs.
- Use circuit breakers to protect your services, handle failures gracefully, prevent
  cascading failures and maintain overall system resilience.
- Update your APIs using Tyk Sync or Tyk Operator (for Kubernetes) to change configurations
  in production.
- Supports JWT, OpenID, OAuth 2.0, and mTLS for client and upstream authentication.
- Federated identity management, Single Sign-On (SSO) and dynamic client registration
  (DCR) via integration with identity providers.
- Deploy Tyk anywhere – on our cloud, on your infrastructure or by downloading our
  free open source API gateway.
- Enjoy uncomplicated growth with horizontal or vertical scaling and boost performance
  with added caching.
- Centralized governance in your CI/CD pipeline and GitOps integration lets developers
  move fast without breaking things.
- Use Tyk’s developer portal for self-service access to API keys.
- Open standards compliant
- Security options include Bearer Tokens, HMAC, JWT, Multi Chained Authentication,
  OAuth 2.0 or OpenID Connect
- Tyk Cloud comes with a 99.9% availability SLA
- Fully managed — no infrastructure to manage
- ISO27001 certified — deploy in-region to meet data residency requirements
- Version control can be a pain.
- Data synchronisation between different environments.
- Thoroughly tested APIs to catch any issues before deployment.
- Implementing efficient and effective API monitoring is essential if you want to
  provide reliable, consistently performant APIs.
- You need full visibility of API health metrics, plus some kind of automation to
  alert you to any issues requiring troubleshooting.
- Tyk Self-Managed offers control and security over APIs.
- Tyk provides full audit logging, RBAC for admin access, and compliance-ready features
  to help meet regulatory requirements.
- Powerful, flexible API management for multi-cloud and hybrid environments
- Highly performant
- Flexible and powerful
- Open source
- Tyk holds ISO 27001, ISO 9001 and SOC2 certification and is deployed in PCI compliant
  environments around the globe.
- No vendor lock-ins or set patterns
- Superb resilience, low latency
- Tyk Cloud provides secure, publish and maintain APIs at any scale, anywhere in the
  world.
- 99.9% availability SLA
- ISO27001 certified
- 'Tyk offers three pricing tiers: Core, Professional, and Enterprise, with a free
  trial so you can test Tyk’s full features with no commitment.'
- Tyk is fully compatible with your infrastructure, giving you complete data compliance
  and security with no lock-in.
- Self-hosted API gateways provide full control over infrastructure and customization.
- Flexible and powerful API management that can be deployed across multiple data centers,
  with auto-scaling and a single dashboard for granular control.
- Kubernetes-native API management with Tyk Operator
- API management for your multi-region API consumers
- Tyk provides global scale and centralized governance for agile control wherever
  you deploy.
- Easily manage all clusters from a single control plane.
- Tyk contributes to your GitOps strategy
- With Tyk you can expose your APIs via GitOps workflows securely and enforce authentication
  and rate limiting.
- Tyk offers a fully self-hosted, on-premise API gateway for regulated industries.
- Tyk provides a flexible API management platform.
- Uses OAuth2 with refresh token — requires setup of connected app in API
- Tyk supports both REST and GraphQL APIs.
- Tyk provides API management for REST and GraphQL APIs.
- Some endpoints may have rate limits
- Webinars are recorded and available for viewing later.
- Tyk API Management platform can be found in every sector, at every scale, across
  every continent of the globe.
- Feel free to test any integrations by accessing the OpenSource Tyk Gateway from
  our Tyk GitHub repository
- Fully remote – you can work from anywhere in the world, from your bed or from a
  beach, whatever suits you best, as long as the job is done.
- We don’t control or monitor working hours. Instead, we trust you to give your best.
- Tyk provides a powerful API management platform.
- Tyk is built for every use case so you can connect everything, easily.
- Tyk has been operating since 2016.
- ISO, HIPAA and SOC2 compliance.
- Tyk is platform agnostic and cloud native.
- Tyk fits into the way you operate today, putting your existing team in control.
- Tyk provides everything you need, straight out of the box. No features hidden behind
  paywalls or nasty, unexpected bills.
- Tyk provides everything you need, straight out of the box.
- No features hidden behind paywalls or nasty, unexpected bills.
- Tyk provides a comprehensive API management platform.
- Tyk empowers you to secure, transform, integrate and govern your APIs simply, efficiently
  and cost-effectively.
- Tyk provides API management with support for both REST and GraphQL.
- Comprehensive security filtering and faster API exposure
- Tyk delivers powerful security that scales with your business.
- Tyk’s advanced Universal Data Graph provides ultimate flexibility.
- Tyk API Management provides a flexible API management platform.
- For those with complex requirements or operating in regulated environments, work
  directly with our architects on a tailored Proof of Concept.
- Tyk Dashboard requires a persistent datastore for its operations. By default MongoDB
  is used. From Tyk v4.0, we also support PostgreSQL.
- Installing Tyk on Kubernetes requires a multi-node Tyk license.
- This deployment is NOT designed for production use or performance testing.
- Tyk Dashboard requires a persistent datastore for its operations. By default MongoDB
  is used.
- From Tyk v4.0, we also support PostgreSQL.
- Ensure that the Gateway’s resource kind is Deployment and the replica count to your
  license node limit.
- There may be intermittent issues on the new pods during the rolling update process.
- Tyk requires a multi-node license for Kubernetes installation.
- For a production environment, we recommend that the Gateway, Dashboard and Pump
  are installed on separate machines.
- If installing multiple Gateways, you should install each on a separate machine.
- Tyk Helm chart is the preferred and easiest way to install Tyk Self-Managed on Kubernetes.
- To use the geographic log distribution feature in the Dashboard please supply the
  GeoLite2 DB in the gateway directory, uncomment the marked line in Dockerfile.web
  and set the analytics_config.enable_geo_ip setting to true.
- Apps in private spaces don’t enable SSL/TLS by default. It needs to be configured
  in the app settings along with the domain name for it.
- Set the TYK_PLUGINS Heroku config option to either python or lua depending on the
  type of plugins used.
- You can choose to not install Redis, MongoDB or PostgreSQL by removing the corresponding
  flags.
- Ensure port 3000 is available for the Tyk Dashboard
- Use actual DNS hostname or public IP for domain binding
- Data stored in hobby plans on Heroku Redis are not persisted.
- To use the geographic log distribution feature in the Dashboard please supply the
  GeoLite2 DB in the gateway directory.
- The minimal Heroku Redis add-on plan that installs into your private space is currently
  private-7.
- Tyk Gateway can run independently with only a Redis database and can scale horizontally.
- Tyk Self-Managed requires a multi-node Tyk license for Kubernetes installation.
- Ensure port 3000 is available for Tyk Dashboard.
- Replace <hostname> and <IP Address> with actual values in setup commands.
- Tyk Gateway requires Redis for its operations.
- Please make sure you are installing Redis versions that are supported by Tyk.
- Bitnami MongoDB images is not supported on darwin/arm64 architecture.
- Please make sure you are installing PostgreSQL versions that are supported by Tyk.
- 'Upstart 0.6.x and SysVinit: log files are located in /var/logs for every respective
  service, e.g. /var/logs/tyk-gateway.stderr and /var/logs/tyk-gateway.stdout'
- 'Upstart 1.x: by default everything is stored in /var/logs/upstart directory, e.g.
  /var/logs/upstart/tyk-gateway.log'
- systemd utilizes its own logging mechanism called journald, which is usable via
  the journalctl command, e.g. journalctl -u tyk-gateway
- To use the geographic log distribution feature in the Dashboard please supply the
  GeoLite2 DB in the gateway directory, uncomment the marked line in Dockerfile.web
  and set the analytics_config.enable_geo_ip setting (or TYK_GW_ANALYTICSCONFIG_ENABLEGEOIP
  env var) to true.
- 'Ensure port 3000 is open: This is used by the Dashboard to provide the GUI and
  the Classic Developer Portal.'
- You need to replace <Redis Hostname>, <Mongo IP Address> and <Mongo Port> with your
  own values to run this script.
- Ensure port 8080 is available. This is used in this guide for Gateway traffic (API
  traffic to be proxied).
- You have MongoDB and Redis installed.
- You have installed firstly the Tyk Dashboard, then the Tyk Pump.
- Installing Tyk on Ubuntu is very straightforward using our APT repositories.
- Ensure port 3000 is open for the Dashboard
- Redis must be running for the Dashboard to function
- Replace <hostname> and <IP Address> with actual values in setup scripts.
- Ensure port 8080 is available.
- Ensure port 8080 is available for API traffic.
- You need to replace <hostname> for --redishost=<hostname> with your own value.
- 'Tyk offers three pricing tiers: Core, Professional, and Enterprise.'
- Includes a free 48-hour trial of Tyk Cloud.
- Ensure port 3000 is available for the Tyk Dashboard.
- Use the actual DNS hostname or the public IP of your instance as the last parameter.
- Ensure port 8080 is available for Gateway traffic.
- Tyk no longer supports SQLite as of Tyk 5.7.0. To avoid disruption, please transition
  to PostgreSQL, MongoDB, or one of the listed compatible alternatives.
- Upgrade order is crucial for a smooth and successful upgrade.
- Ensure control plane is upgraded before data plane.
- Backup configuration files before upgrading.
- Tyk offers a fully self hosted, on premise API gateway.
- These commands are provided as general guidelines and should be used with caution.
  It’s advisable to consult with your system administrator or seek assistance from
  a qualified professional before executing any system-level commands.
- Before executing the upgrade, ensure that you have consulted and performed all the
  necessary steps in the pre upgrade checklist.
- Adhere to the provided upgrade sequence for a smooth and successful upgrade.
- Backup your configuration files and databases before upgrading.
- Upgrade order for Tyk components is Tyk Dashboard, Tyk Gateway, Tyk Pump.
- For Enterprise customers, upgrade MDCB first, then Tyk Pump, Tyk Dashboard, Tyk
  Gateway.
- Backup your Gateway config file before upgrading.
- Check the log to see that the new version is used and if the gateway is up and running.
- Ensure that you have thoroughly reviewed and completed the steps outlined in the
  upgrade guidelines.
- Uses APT for Debian and YUM for RedHat for package management
- Configuration files need to be backed up before upgrade
- Health check on upgraded Tyk components is required
- Follow the instructions in the upgrade guidelines for a smooth and successful upgrade.
- Tyk Operator manages Tyk Custom Resources.
- Backup your gateway config file (`tyk.conf` or the name you chose for it)
- Check that the gateway is healthy
- API definitions are stored in either Postgres or MongoDB, as specified in the database
  settings.
- If using Tyk OSS, configurations are stored as files in the /apps directory of the
  Gateway.
- Tyk Operator is designed to work within a Kubernetes environment.
- Tyk Operator manages multiple custom resources to help users create and maintain
  their API configurations.
- API configurations are stored in either Postgres or MongoDB for Tyk Dashboard or
  as files in the /apps directory for Tyk OSS.
- Tyk Operator is a Kubernetes Controller that manages Tyk Custom Resources (CRs)
  such as API Definitions and Security Policies.
- API categories can be specified through the categories field in TykOasApiDefinition
  CRD.
- Tyk Operator changes not applied may require checking the latestTransaction status
  subresource.
- Tyk Operator is designed to work within a Kubernetes environment
- You can manage multiple Tyk installations by creating separate OperatorContext resources
- If you use Tyk Operator to manage your APIs, you should set up RBAC such that human
  users cannot have the 'write' permission on the API definition endpoints using Tyk
  Dashboard.
- Tyk Sync is designed to dump API configurations from a Tyk Dashboard.
- The Dashboard serves as the central configuration repository in the Tyk architecture.
- TIB is built-in to the dashboard, no need to install separately.
- Ensure that the identity_broker.enabled is set to true in the Dashboard’s config
  file.
- Tyk Operator integrates with Kubernetes for API management.
- OperatorContext allows isolated management environments.
- The admin API requires admin-auth header which should be same with admin-secret
  parameter in tyk_analytics.conf
- The regular API requires authorization header which should be same with the user
  authentication token
- Tyk supports detailed recording for API traffic logs.
- CORS settings can be managed for cross-domain requests.
- API versioning can be configured via ApiDefinition custom resource definition.
- Tyk Operator allows you to manage multiple Tyk installations.
- Tyk Sync enables you to export and import Tyk configurations directly from Git,
  keeping environments aligned without manual configuration updates.
- Tyk Sync requires setup of dashboard URL and API secret
- TIB is built-in to the dashboard, no need to install it separately.
- Temporary authentication token is valid for 60 seconds.
- Set 'sso_enable_user_lookup' to true for re-using existing dashboard users.
errors:
- '400 Bad Request: Malformed fetched request body.'
- '500 Internal Server Error: Programming or network error.'
- '400 Bad Request: If the fetched request body is malformed'
- '500 Internal Server Error: Programming or network error'
- Key updated
- Key deleted successfully
- User is not active
- Unknown action
- '401 Unauthorized: Recheck Authorization header.'
- '401 Unauthorized: Recheck OAuth scopes or token expiration'
- 'Access Denied: API Editors not allowed to create APIs.'
- 'REQUEST_LIMIT_EXCEEDED: Throttle API calls or reduce frequency'
- 'QUERY_TIMEOUT: Break down filters or add selectivity'
- Access Denied
- 'HTTP 200 OK: Service is operational.'
- Service may not be ready for use if dependent components are offline.
- '400 Bad Request: Check your request format.'
- '401 Unauthorized: Ensure your application ID is correct.'
- '401 Unauthorized: Check OAuth credentials.'
- '404 Not Found: Verify endpoint path.'
- 'REQUEST_LIMIT_EXCEEDED: Throttle API calls or reduce frequency.'
- Throttle API calls or reduce frequency
- Break down filters or add selectivity
- Unresponsive APIs, APIs behaving unusually, traffic spikes and error response codes
  relating to your APIs will all need swift attention.
- 'QUERY_TIMEOUT: Break down filters or add selectivity.'
- '401 Unauthorized: Recheck OAuth scopes or token expiration.'
- 'Invalid license key: Check for extra spaces between quotes.'
- Node maintenance may be blocked if MongoDB replica count is 1.
- Ensure MongoDB and Redis services are running before proceeding
- '404 Not Found: Check the endpoint path or URL.'
- '500 Internal Server Error: Server issue, try again later.'
- 'failed SASL auth (FATAL: password authentication failed for user...): Follow the
  steps to modify pg_hba.conf'
- 'failed SASL auth (FATAL: password authentication failed for user...): Ensure correct
  password in pg_hba.conf'
- 'Error initializing system: couldn''t unmarshal config: invalid character'
- '401 Unauthorized: Recheck API key or user permissions'
- '401 Unauthorized: Recheck API secret or access permissions'
- '404 Not Found: Check if the API endpoint is correct.'
- '403 Forbidden: Ensure the API key has the necessary permissions.'
- '400 Bad Request: Validate the request payload format.'
- '404 Not Found: Verify the endpoint path.'
- '401 Unauthorized: Check credentials and permissions.'
- '401 Unauthorized: Recheck API secret or permissions'
auth_info:
  mentioned_objects:
  - Authorization
  - OauthToken
  - AuthProvider
  - NamedCredential
  - OpenAPI Specification
  - OAuth
  - Open Policy Agent
  - OAuth2
  - OpenID Connect
  - SAML
  - tyk-operator-conf
  - OperatorContext
  - TYK_MODE
  - TYK_URL
  - TYK_ORG
  - TYK_AUTH
  - ApiDefinition
  - TykOasApiDefinition
  - TykStreamsApiDefinition
  - SecurityPolicy
  - SubGraph
  - SuperGraph
client:
  base_url: https://tyk.io
  headers:
    Accept: application/json
source_metadata: null
