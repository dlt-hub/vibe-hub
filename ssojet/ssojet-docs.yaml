resources:
- name: user_info
  endpoint:
    path: /api/v1/userinfo
    method: GET
    data_selector: version
- name: authorize
  endpoint:
    path: /api/v1/authorize
    method: GET
- name: get_token
  endpoint:
    path: /api/v1/oauth2/token
    method: POST
- name: resend_email_otp
  endpoint:
    path: /api/v1/email-otp/resend
    method: POST
- name: send_email_otp
  endpoint:
    path: /api/v1/email-otp/send
    method: POST
- name: verify_email_otp
  endpoint:
    path: /api/v1/email-otp/verify
    method: POST
- name: resend_magic_link
  endpoint:
    path: /api/v1/magic-link/resend
    method: POST
- name: magic_link_status
  endpoint:
    path: /magic-link/status
    method: GET
    data_selector: access_token
    params:
      session_id: string
- name: otp_resend
  endpoint:
    path: /otp/resend
    method: POST
    data_selector: version
    params: {}
- name: phone_otp_resend
  endpoint:
    path: /phone-otp/resend
    method: POST
    data_selector: version
    params:
      session_id: string
- name: phone_otp_send
  endpoint:
    path: /phone-otp/send
    method: POST
    data_selector: version
    params: {}
- name: phone_otp_verify
  endpoint:
    path: /phone-otp/verify
    method: POST
    data_selector: version
    params: {}
- name: permissions
  endpoint:
    path: /permissions
    method: GET
    data_selector: tenants
    params:
      client_id: string
      cursor: string
      limit: integer
- name: create_permission
  endpoint:
    path: /permissions
    method: POST
    data_selector: version
    params: {}
- name: retrieve_permission
  endpoint:
    path: /permissions/{permissionId}
    method: GET
    data_selector: version
    params:
      client_id: string
- name: update_permission
  endpoint:
    path: /permissions/{permissionId}
    method: PUT
    data_selector: version
    params:
      client_id: string
- name: roles
  endpoint:
    path: /roles
    method: GET
    data_selector: tenants
    params:
      client_id: required
- name: tenants
  endpoint:
    path: /tenants
    method: GET
    data_selector: tenants
    params:
      client_id: required
- name: tenants
  endpoint:
    path: /tenants
    method: GET
    data_selector: tenants
- name: tenant_by_id
  endpoint:
    path: /tenants/{tenantid}
    method: GET
    data_selector: version
- name: tenant_users
  endpoint:
    path: /tenants/{tenantid}/users
    method: GET
    data_selector: tenants
- name: tenant_roles
  endpoint:
    path: /tenants/{tenantid}/users/{userid}/roles
    method: GET
    data_selector: version
- name: users
  endpoint:
    path: /users
    method: GET
    data_selector: tenants
    params: {}
- name: create_user
  endpoint:
    path: /users
    method: POST
    data_selector: ''
    params: {}
- name: assign_roles
  endpoint:
    path: /tenants/{tenantid}/users/{userid}/roles
    method: POST
    data_selector: ''
    params: {}
- name: revoke_sso_config
  endpoint:
    path: /tenants/{tenantid}/admin-access-token/revoke
    method: DELETE
    data_selector: ''
    params: {}
- name: generate_sso_link
  endpoint:
    path: /tenants/{tenantid}/admin-session
    method: POST
    data_selector: ''
    params: {}
- name: get_directories
  endpoint:
    path: /tenants/{tenantid}/directories
    method: GET
    data_selector: ''
    params: {}
- name: get_directory_by_id
  endpoint:
    path: /tenants/{tenantid}/directories/{directoryId}
    method: GET
    data_selector: ''
    params: {}
- name: get_directory_groups
  endpoint:
    path: /tenants/{tenantid}/directories/{directoryId}/groups
    method: GET
    data_selector: ''
    params: {}
- name: get_users_in_directory
  endpoint:
    path: /tenants/{tenantid}/directories/{directoryId}/users
    method: GET
    data_selector: ''
    params: {}
- name: get_user_by_id
  endpoint:
    path: /tenants/{tenantid}/directories/{directoryId}/users/{userId}
    method: GET
    data_selector: ''
    params: {}
- name: get_user
  endpoint:
    path: /users/{userid}
    method: GET
    data_selector: tenants
    params:
      client_id: string
- name: get_user_login_logs
  endpoint:
    path: /users/{userid}/loginlogs
    method: GET
    data_selector: tenants
    params:
      client_id: string
      event: login
- name: get_user_organizations
  endpoint:
    path: /users/{userid}/tenants
    method: GET
    data_selector: tenants
    params:
      client_id: string
- name: get_application_current_version
  endpoint:
    path: /version
    method: GET
    data_selector: version
    params: {}
- name: project_creation
  endpoint:
    path: /projects/create
    method: POST
    data_selector: project
    params: {}
- name: environment_selection
  endpoint:
    path: /projects/environments
    method: GET
    data_selector: environments
    params: {}
- name: region_selection
  endpoint:
    path: /projects/regions
    method: GET
    data_selector: regions
    params: {}
- name: get_user_info
  endpoint:
    path: /api/v1/userinfo
    method: GET
    data_selector: records
- name: authorize
  endpoint:
    path: /api/v1/authorize
    method: GET
    data_selector: records
- name: get_token
  endpoint:
    path: /api/v1/oauth2/token
    method: POST
    data_selector: records
- name: resend_email_otp
  endpoint:
    path: /api/v1/email-otp/resend
    method: POST
    data_selector: records
- name: send_email_otp
  endpoint:
    path: /api/v1/email-otp/send
    method: POST
    data_selector: records
- name: verify_email_otp
  endpoint:
    path: /api/v1/email-otp/verify
    method: POST
    data_selector: records
- name: resend_magic_link
  endpoint:
    path: /api/v1/magic-link/resend
    method: POST
    data_selector: records
- name: magic_link_status
  endpoint:
    path: /magic-link/status
    method: GET
    data_selector: access_token
    params:
      session_id: required
- name: otp_resend
  endpoint:
    path: /otp/resend
    method: POST
    data_selector: version
    params: {}
- name: phone_otp_resend
  endpoint:
    path: /phone-otp/resend
    method: POST
    data_selector: version
    params: {}
- name: phone_otp_send
  endpoint:
    path: /phone-otp/send
    method: POST
    data_selector: version
    params: {}
- name: phone_otp_verify
  endpoint:
    path: /phone-otp/verify
    method: POST
    data_selector: version
    params: {}
- name: permissions
  endpoint:
    path: /permissions
    method: GET
    data_selector: permissions
    params:
      client_id: required
      limit: '10'
- name: create_permission
  endpoint:
    path: /permissions
    method: POST
    data_selector: version
    params: {}
- name: retrieve_permission
  endpoint:
    path: /permissions/{permissionId}
    method: GET
    data_selector: permission_details
    params:
      client_id: required
- name: update_permission
  endpoint:
    path: /permissions/{permissionId}
    method: PUT
    data_selector: version
    params:
      client_id: required
- name: tenants
  endpoint:
    path: /api/v1/tenants
    method: GET
    data_selector: tenants
    params:
      client_id: required
- name: roles
  endpoint:
    path: /api/v1/roles
    method: GET
    data_selector: roles
    params:
      client_id: required
- name: tenants
  endpoint:
    path: /tenants
    method: GET
    data_selector: tenants
    params:
      client_id: string
- name: tenant_by_id
  endpoint:
    path: /tenants/{tenantid}
    method: GET
    data_selector: version
    params:
      client_id: string
- name: update_tenant
  endpoint:
    path: /tenants/{tenantid}
    method: PUT
    data_selector: version
    params:
      client_id: string
- name: remove_team_invitation
  endpoint:
    path: /tenants/{tenantid}/invitations
    method: DELETE
    data_selector: version
    params:
      client_id: string
      invitation_id: string
- name: create_team_invitation
  endpoint:
    path: /tenants/{tenantid}/invitations
    method: POST
    data_selector: version
    params:
      client_id: string
- name: get_tenant_users
  endpoint:
    path: /tenants/{tenantid}/users
    method: GET
    data_selector: tenants
    params:
      client_id: string
      cursor: string
      limit: integer
- name: users
  endpoint:
    path: /users
    method: GET
    data_selector: tenants
    params: {}
- name: create_user
  endpoint:
    path: /users
    method: POST
    data_selector: ''
    params: {}
- name: tenant_directories
  endpoint:
    path: /tenants/{tenantid}/directories
    method: GET
    data_selector: tenants
    params: {}
- name: get_user_profile
  endpoint:
    path: /users/{userid}
    method: GET
    data_selector: tenants
- name: get_user_login_logs
  endpoint:
    path: /users/{userid}/loginlogs
    method: GET
    data_selector: tenants
- name: get_user_organizations
  endpoint:
    path: /users/{userid}/tenants
    method: GET
    data_selector: tenants
- name: get_application_version
  endpoint:
    path: /version
    method: GET
    data_selector: version
- name: delete_user
  endpoint:
    path: /users/{userid}
    method: DELETE
    data_selector: null
- name: update_user
  endpoint:
    path: /users/{userid}
    method: PUT
    data_selector: null
notes:
- Refer to the API documentation for specific endpoint details and example requests.
- Some objects may return nulls in deeply nested fields
- Flexible Hosted UI for customizable authentication screens.
- Enterprise Auth includes Single sign-on, passkeys, and social authentication.
- Requires client_id in the header for all requests.
- Uses OAuth2 with refresh token â€” requires setup of connected app in api
- Flexible Hosted UI for customizable authentication screens
- Enterprise Auth includes single sign-on, passkeys, social authentication
- Enterprise SSO requires integration with existing auth system
- Production environment has strict security controls
- SSO integration typically requires 3-6 weeks of dedicated engineering time per protocol.
- SSO implementation involves critical security considerations.
- 'Multi-tenant Architecture Limitations: Ensuring proper isolation between customer
  SSO configurations'
- 'Performance at Scale: Maintaining authentication speed with increasing numbers
  of users and requests'
- 'Session Management: Properly handling user sessions across distributed systems'
- 'Extended Sales Cycles: Enterprise deals can stall for weeks or months during SSO
  implementation'
- 'Competitive Disadvantage: Companies without robust SSO support may lose deals to
  competitors'
- 'Customer Satisfaction: Poor SSO implementation leads to frustrated users and IT
  teams'
- 'Technical Debt: Quick, short-term SSO solutions often create significant technical
  debt'
- All API requests must be authenticated using Bearer token authentication.
- Uses Bearer token for authentication.
- Seamless, customizable hosted authentication screens that match your brand and grow
  with your needs.
- Single sign-on, passkeys, social authentication, and more.
errors:
- '404: Not Found'
- '400: Bad Request'
- '401: Unauthorized'
- '500: Internal Server Error'
- '400 Bad Request: Check request parameters'
- '401 Unauthorized: Bearer token missing or invalid'
- '404 Not Found: Resource could not be found'
- '200: Successful response'
- '200'
- '400'
- '401'
- '404'
- '500'
auth_info:
  mentioned_objects:
  - client_id
  - Authorization
client:
  base_url: https://api.ssojet.com/api/v1
  headers:
    Content-Type: application/json
source_metadata: null
