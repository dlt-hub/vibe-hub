resources:
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: team_member
  endpoint:
    path: /services/data/vXX.X/sobjects/TeamMember
    method: POST
    data_selector: records
    params: {}
- name: CSV file
  endpoint:
    path: /path/to/your/csv/file
    method: GET
    data_selector: data
    params: {}
- name: Model Activity Log
  endpoint:
    path: /model-activity-log
    method: GET
    data_selector: activity_log
    params: {}
- name: Activity Log
  endpoint:
    path: /model-activity-log
    method: GET
    data_selector: timeline
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: sync_model
  endpoint:
    path: /api/sync/model
    method: POST
    data_selector: data
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
- name: Model Sync Activity Log
  endpoint:
    path: /model-sync-activity-log
    method: GET
    data_selector: changes
- name: Resync
  endpoint:
    path: /bulk-resync-tables
    method: POST
- name: Partial Resync
  endpoint:
    path: /partial-resync-tables
    method: POST
- name: Incremental Partial Sync
  endpoint:
    path: /incremental-partial-sync-tables
    method: POST
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: user_roles
  endpoint:
    path: /docs/default-user-roles
    method: GET
    data_selector: roles
    params: {}
- name: Connections
  endpoint:
    path: /api/connections
    method: GET
    data_selector: records
    params: {}
- name: Models
  endpoint:
    path: /api/models
    method: GET
    data_selector: records
    params: {}
- name: default_user_roles
  endpoint:
    path: /docs/default-user-roles
    method: GET
    data_selector: roles
- name: Connections
  endpoint:
    path: /api/connections
    method: POST
    data_selector: data
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: campaign_member
  endpoint:
    path: /v1/campaign_member
    method: GET
    data_selector: data
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /v1/contact
    method: GET
    data_selector: data
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: data
  endpoint:
    path: /api/v1/data
    method: GET
    data_selector: records
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: Duplicate Identities
  endpoint:
    path: /saleforceduplicate_records
    method: GET
    data_selector: records
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: SCIM
  endpoint:
    path: /scim/v2
    method: GET
    data_selector: users
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
- name: github_app
  endpoint:
    path: /connect/dbtprojectrepository
    method: POST
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: GitHub App
  endpoint:
    path: /connect/dbtprojectrepository
    method: POST
- name: Google Sheets Picker
  endpoint:
    path: /connect/gsheets
    method: GET
- name: analytics_reports
  endpoint:
    path: /analytics/reports
    method: GET
- name: sales_reports
  endpoint:
    path: /sales/reports
    method: GET
- name: resulting_table
  endpoint:
    path: ''
    method: ''
    data_selector: ''
    params:
      collection_name: resulting SQL table in your data warehouse
      file_format: CSV or JSON
      skip_first_lines: number of lines to skip
- name: Azure Synapse
  endpoint:
    params:
      Server: SQL endpoint
      Username: user credentials
      Password: user credentials
      Database: Database
      Port: Port
- name: Botpress
  endpoint:
    path: /
    method: GET
- name: API Key
  endpoint:
    path: /api_keys
    method: POST
- name: AWS Access ID
  endpoint:
    path: ''
    method: POST
    data_selector: ''
    params: {}
- name: AWS Secret Access Key
  endpoint:
    path: ''
    method: POST
    data_selector: ''
    params: {}
- name: AWS region
  endpoint:
    path: ''
    method: POST
    data_selector: ''
    params: {}
- name: AWS S3 output bucket
  endpoint:
    path: ''
    method: POST
    data_selector: ''
    params: {}
- name: dynamodb
  endpoint:
    path: /amazon-dynamodb
    method: POST
    data_selector: records
    params: {}
- name: calls
  endpoint:
    path: /calls
    method: GET
- name: call_details
  endpoint:
    path: /call_details
    method: GET
- name: scorecards
  endpoint:
    path: /scorecards
    method: GET
- name: topics
  endpoint:
    path: /topics
    method: GET
- name: users
  endpoint:
    path: /users
    method: GET
- name: Cloudflare Logs
  endpoint:
    path: /cloudflare/logs
    method: GET
    data_selector: logs
- name: S3 bucket
  endpoint:
    path: /s3
    method: POST
- name: csv_data
  endpoint:
    path: /csv-url-endpoint
    method: GET
    data_selector: data
    params: {}
- name: people
  endpoint:
    path: /api/v1/people
    method: POST
- name: custom_objects
  endpoint:
    path: /api/v1/custom_objects
    method: POST
- name: segments
  endpoint:
    path: /api/v1/segments
    method: POST
- name: person_events
  endpoint:
    path: /api/v1/events
    method: POST
- name: people_devices
  endpoint:
    path: /api/v1/devices
    method: POST
- name: Blob Data
  endpoint:
    path: /{account_name}/{container_name}
    method: GET
- name: warehouse_exports
  endpoint:
    path: /customerio/warehouse_exports
    method: POST
    data_selector: exports
    params: {}
- name: web_services
  endpoint:
    path: /webservices
    method: GET
- name: Calls
- name: Call Details
- name: Scorecards
- name: Topics
- name: Users
- name: Dittofeed
  endpoint:
    path: /dashboard/settings#write-key
    method: POST
- name: Cloudflare Logpush
  endpoint:
    path: /logs
    method: POST
- name: people
  endpoint:
    path: /api/v1/people
    method: POST
- name: custom_objects
  endpoint:
    path: /api/v1/custom_objects
    method: POST
- name: segments
  endpoint:
    path: /api/v1/segments
    method: POST
- name: person_events
  endpoint:
    path: /api/v1/events
    method: POST
- name: people_devices
  endpoint:
    path: /api/v1/devices
    method: POST
- name: analytics_reports
  endpoint:
    path: /analytics/reports
    method: GET
- name: custom_reports
  endpoint:
    path: /analytics/custom_reports
    method: GET
- name: raw_events
  endpoint:
    path: /analytics/raw_events
    method: GET
- name: csv_files
  endpoint:
    path: /v1/b/{bucket}/o
    method: GET
    data_selector: items
    params: {}
- name: json_files
  endpoint:
    path: /v1/b/{bucket}/o
    method: GET
    data_selector: items
    params: {}
- name: dbt_exposures
  endpoint:
    path: /models/polytomic_sync_exposures.yml
    method: POST
    data_selector: exposures
- name: bank_statements
  endpoint:
    path: /bank_statements
    method: GET
- name: end_users
  endpoint:
    path: /end_users
    method: GET
- name: profit_and_loss_report
  endpoint:
    path: /profit_and_loss_report
    method: GET
- name: accounts
  endpoint:
    path: /v1/accounts
    method: GET
- name: audit_log
  endpoint:
    path: /v1/audit_log
    method: GET
- name: campaigns
  endpoint:
    path: /v1/campaigns
    method: GET
- name: campaign_daily_analytics
  endpoint:
    path: /v1/campaign_daily_analytics
    method: GET
- name: custom_tags
  endpoint:
    path: /v1/custom_tags
    method: GET
- name: emails
  endpoint:
    path: /v1/emails
    method: GET
- name: leads
  endpoint:
    path: /v1/leads
    method: GET
- name: lead_labels
  endpoint:
    path: /v1/lead_labels
    method: GET
- name: lead_lists
  endpoint:
    path: /v1/lead_lists
    method: GET
- name: user_properties
  endpoint:
    path: /api/user_properties
    method: POST
- name: Web Service REST Endpoint
  endpoint:
    path: /webservices/rest/v1/
    method: GET
- name: bank_statements
  endpoint:
    path: /bank_statements
    method: GET
- name: end_users
  endpoint:
    path: /end_users
    method: GET
- name: profit_and_loss_report
  endpoint:
    path: /profit_and_loss_report
    method: GET
- name: CDC replication
  endpoint:
    path: /docs/cdc-replication-microsoft-sql-server
    method: GET
    data_selector: records
    params: {}
- name: People
  endpoint:
    path: /api/people
    method: GET
- name: Events
  endpoint:
    path: /api/events
    method: GET
- name: Accounts
- name: Audit Log
- name: Campaigns
- name: Campaign Daily Analytics
- name: Custom Tags
- name: Emails
- name: Leads
- name: Lead Labels
- name: Lead Lists
- name: Integration
  endpoint:
    path: /services/rest/record/v1/integration
    method: GET
    data_selector: records
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: Accounts
  endpoint:
    path: /api/accounts
    method: GET
- name: Profiles
  endpoint:
    path: /api/profiles
    method: GET
- name: Lists
  endpoint:
    path: /api/lists
    method: GET
- name: Events
  endpoint:
    path: /api/events
    method: GET
- name: Account
  endpoint:
    path: /services/rest/record/v1/account
    method: GET
- name: Role
  endpoint:
    path: /services/rest/record/v1/role
    method: GET
- name: Client
  endpoint:
    path: /services/rest/record/v1/client
    method: GET
- name: Orders
  endpoint:
    path: /reference/post_orders
- name: Spend
  endpoint:
    path: /reference/post_spend
- name: Hourly Spend
  endpoint:
    path: /reference/post_spend-hourly
- name: Accounts
  endpoint:
    method: POST
- name: Prospects
  endpoint:
    method: POST
- name: Sequences
  endpoint:
    method: POST
- name: Bulk Syncs
  endpoint:
    path: /bulk-syncs
    method: GET
    data_selector: records
- name: Connections
  endpoint:
    path: /connections
    method: GET
    data_selector: records
- name: Models
  endpoint:
    path: /models
    method: GET
    data_selector: records
- name: Organizations
  endpoint:
    path: /organizations
    method: GET
    data_selector: records
- name: polytomic_user
  endpoint:
    path: /connections/microsoft-sql-server
    method: POST
    data_selector: user
    params: {}
- name: polytomic_user
  endpoint:
    path: /postgresql/user
    method: POST
    data_selector: user
    params: {}
- name: people
  endpoint:
    path: /api/2.0/people
    method: GET
- name: events
  endpoint:
    path: /api/2.0/events
    method: GET
- name: transactions
  endpoint:
    path: /services/rest/record/v1/transaction
    method: GET
    data_selector: records
- name: customers
  endpoint:
    path: /services/rest/record/v1/customer
    method: GET
    data_selector: records
- name: Account
  endpoint:
    path: /services/data/vXX.X/sobjects/Account
    method: GET
- name: Role
  endpoint:
    path: /services/data/vXX.X/sobjects/Role
    method: GET
- name: Client
  endpoint:
    path: /services/data/vXX.X/sobjects/Client
    method: GET
- name: Certificate
  endpoint:
    path: /services/data/vXX.X/sobjects/Certificate
    method: GET
- name: metadata
  endpoint:
    path: /services/data/vXX.X/tooling
    method: GET
    data_selector: records
- name: Accounts
  endpoint: {}
- name: People
  endpoint: {}
- name: Cadences
  endpoint: {}
- name: Teams
  endpoint: {}
- name: Users
  endpoint: {}
- name: sftp_files
  endpoint:
    path: /sftp/files
    method: GET
    data_selector: files
    params: {}
- name: Bulk Syncs
  endpoint:
    path: /bulk_syncs
    method: GET
    data_selector: records
- name: Bulk Sync Executions
  endpoint:
    path: /bulk_sync_executions
    method: GET
    data_selector: records
- name: Connections
  endpoint:
    path: /connections
    method: GET
    data_selector: records
- name: Models
  endpoint:
    path: /models
    method: GET
    data_selector: records
- name: Model Syncs
  endpoint:
    path: /model_syncs
    method: GET
    data_selector: records
- name: Organizations
  endpoint:
    path: /organizations
    method: GET
    data_selector: records
- name: polytomic_user
  endpoint:
    path: /postgresql_user
    method: CREATE
    data_selector: user_creation
    params: {}
- name: bulk_sync
  endpoint:
    path: /bulk_sync
    method: POST
    data_selector: bulk_syncs
    params: {}
- name: messages
  endpoint:
    path: /api/conversations.history
    method: GET
- name: threads
  endpoint:
    path: /api/conversations.replies
    method: GET
- name: campaigns
  endpoint:
    path: /api/campaigns
    method: GET
    data_selector: data
    params: {}
- name: clients
  endpoint:
    path: /api/clients
    method: GET
    data_selector: data
    params: {}
- name: leads
  endpoint:
    path: /api/leads
    method: GET
    data_selector: data
    params: {}
- name: message_history
  endpoint:
    path: /api/message-history
    method: GET
    data_selector: data
    params: {}
- name: campaign_statistics
  endpoint:
    path: /api/campaign-statistics
    method: GET
    data_selector: data
    params: {}
- name: Company ID
  endpoint:
    path: /app/accountsettings?p=company_billing
    method: GET
- name: autotunes
- name: dynamic_configs
- name: experiments
- name: gates
- name: holdouts
- name: layers
- name: segments
- name: users
- name: AD Clicks Daily Statistics
- name: AD Clicks Report
- name: AD Payments Daily Statistics
- name: AD Payments Report
- name: AD Revenues Daily Statistics
- name: AD Revenues Report
- name: AD Transactions Daily Statistics
- name: AD Transactions Report
- name: Advertisers
- name: data_export
  endpoint:
    path: /data_export
    method: GET
- name: formula_fields
  endpoint:
    path: /services/data/vXX.X/sobjects/FormulaFields
    method: GET
- name: tooling_api_objects
  endpoint:
    path: /services/data/vXX.X/tooling/
    method: GET
- name: API Key
  endpoint:
    path: /api/v1/keys
    method: GET
- name: API V2
  endpoint:
    path: /api/v2
    method: GET
- name: merchant_reviews
  endpoint:
    path: /merchant_reviews
    method: GET
    data_selector: records
- name: questions
  endpoint:
    path: /questions
    method: GET
    data_selector: records
- name: reviews
  endpoint:
    path: /reviews
    method: GET
    data_selector: records
- name: review_updates
  endpoint:
    path: /review_updates
    method: GET
    data_selector: records
- name: messages
  endpoint:
    path: /api/conversations.history
    method: GET
- name: threads
  endpoint:
    path: /api/conversations.replies
    method: GET
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: campaigns
  endpoint:
    path: /api/campaigns
    method: GET
- name: campaign_statistics
  endpoint:
    path: /api/campaign_statistics
    method: GET
- name: clients
  endpoint:
    path: /api/clients
    method: GET
- name: leads
  endpoint:
    path: /api/leads
    method: GET
- name: message_history
  endpoint:
    path: /api/message_history
    method: GET
- name: autotunes
- name: dynamic_configs
- name: experiments
- name: gates
- name: holdouts
- name: layers
- name: segments
- name: users
- name: AD Clicks Daily Statistics
  endpoint:
    path: /ad_clicks_daily_statistics
    method: GET
- name: AD Clicks Report
  endpoint:
    path: /ad_clicks_report
    method: GET
- name: AD Payments Daily Statistics
  endpoint:
    path: /ad_payments_daily_statistics
    method: GET
- name: AD Payments Report
  endpoint:
    path: /ad_payments_report
    method: GET
- name: AD Revenues Daily Statistics
  endpoint:
    path: /ad_revenues_daily_statistics
    method: GET
- name: AD Revenues Report
  endpoint:
    path: /ad_revenues_report
    method: GET
- name: AD Transactions Daily Statistics
  endpoint:
    path: /ad_transactions_daily_statistics
    method: GET
- name: AD Transactions Report
  endpoint:
    path: /ad_transactions_report
    method: GET
- name: Advertisers
  endpoint:
    path: /advertisers
    method: GET
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: Merchant Reviews
  endpoint:
    path: /merchant_reviews
    method: GET
- name: Questions
  endpoint:
    path: /questions
    method: GET
- name: Reviews
  endpoint:
    path: /reviews
    method: GET
- name: Review Updates
  endpoint:
    path: /review_updates
    method: GET
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: campaign_member
  endpoint:
    path: /api/v1/campaign_member
    method: GET
    data_selector: data
    params: {}
- name: contact
  endpoint:
    path: /api/v1/contact
    method: GET
    data_selector: data
    params: {}
- name: destination_objects
  endpoint:
    path: /services/data/vXX.X/sobjects/DestinationObject
    method: GET
    data_selector: records
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: data
  endpoint:
    path: /api/v1/data
    method: GET
    data_selector: records
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
notes:
- Uses OAuth2 with refresh token — requires setup of connected app in api
- Some objects like Contact may return nulls in deeply nested fields
- When connecting Polytomic to your databases, you may need to whitelist our IP addresses.
- Connecting to databases via SSH is supported.
- At this time, the admin panel only supports a single SSO/SAML configuration.
- You can see a live status of Polytomic's systems at https://status.polytomic.com.
- Added team members get the Editor role by default, though this can be modified after
  their addition.
- Commonly, HTTP APIs provide only a subset of the total results at a time.
- All Polytomic models can be enriched with data from external providers like ZoomInfo,
  Apollo.io, Harmonic, and others.
- Some objects may require specific permissions to access.
- Uses OAuth2 with refresh token — requires setup of connected app in Polytomic
- Polytomic supports various scheduling options for Model Syncs.
- Manual sync triggers through a button or API call.
- By default, Polytomic's Model Syncs are differential.
- Adding new field mappings in your sync configuration also counts as a change.
- Supports manual, continuous, hourly, daily, weekly, custom schedule, cron expression,
  sync after, and dbt Cloud run for sync scheduling.
- Filters can be set on incoming datasets to process data before it is written to
  storage.
- Supports manual, continuous, hourly, daily, weekly, custom schedule, and cron expression
  for bulk syncs.
- Tracking fields do not propagate deletes
- For a source table to sync incrementally, it must have a primary key.
- 'By default, Polytomic will create three datetime columns in your destination store
  for each bulk sync table: ''_polytomic_created_at'', ''_polytomic_updated_at'',
  ''_polytomic_deleted_at''.'
- You can turn off the writing of these columns by going to Advanced settings in Stage
  4 of your sync configuration and ticking the Exclude Polytomic timestamp columns
  box.
- 'Polytomic supports the following scheduling options for Bulk Syncs: Manual, Continuous,
  Hourly, Daily, Weekly, Custom schedule, Cron expression, Multiple schedules.'
- 'Different levels of resyncing: Resync, Resync and truncate, Resync and rebuild.'
- Default first sync run is Resync and rebuild.
- Tracking fields do not propagate deletes.
- 'Default behaviour emulates a naming convention that is common when specifying database
  schemas: the only valid characters are alphanumeric and underscore characters with
  consistent casing (lowercase except for Snowflake which employs uppercase as a convention).'
- 'By default, Polytomic will create three datetime columns in your destination store
  for each bulk sync table: _polytomic_created_at, _polytomic_updated_at, _polytomic_deleted_at.'
- The value for the _polytomic_deleted_at column remains null if the row is only soft-deleted
  in the source system.
- 'Automatically add new fields/columns on selected tables/objects (default: on)'
- 'Automatically add new tables/objects (default: off)'
- 'Truncate destination table when source table does not have a primary key (default:
  off)'
- 'Prefix table names with (default: empty)'
- 'Propagate hard deletes instead of soft deletes (default: off)'
- 'Exclude Polytomic timestamp columns (default: off)'
- Some fields in Affinity CRM are only writeable once they have value. For these you
  may need to override the sync type on a per-field basis.
- See the status of all your syncs in one dashboard
- All Polytomic models are supported no matter where they come from (even arbitrary
  HTTP API models)
- Bulk operations, automatic backoff, and other API-call-conservation methods are
  of course automatically handled by Polytomic.
- Polytomic has an event stream that fires events for state transitions of syncs.
- Enrichment fields are first-class just like your other model fields.
- The ability to define custom roles and policies is a paid add-on.
- You can subscribe to an email digest of count statistics for all your syncs. This
  digest can be either daily or weekly.
- Built-in policy that restricts the ability to create, edit, and delete connections.
- Role management required to assign user permissions.
- Defines a custom policy for restricting sync to Snowflake.
- This is a built-in policy that is automatically attached (thus enforced) to all
  models in Polytomic.
- This API allows only Query Runner operations for specific roles.
- This error happens when the source(s) produce multiple records with the same identity
  value.
- The order of the duplicates does not guarantee which value(s) will be written.
- Define a custom role and policy to allow only Query Runner operations.
- 'Enrichment failed for records: API Key does not have the correct permissions. Please
  use a master key.'
- While enrichment might fail, the latest version of the record will still be sent
  to the destination system.
- 'Enrichment failed for 6 records: API Key does not have the correct permissions.
  Please use a master key.'
- Required field filter dropped 5 rows
- This happens when Salesforce rejects a record update/create because an invalid value
  was written to a relationship field.
- It is possible to receive this error if the field does not support nulls (/empty
  values), but you attempt to write an empty value into it.
- This warning happens when a Salesforce rejects a record because writing the record
  would violate your Salesforce instance settings with respect to duplicate records.
- Salesforce has a default rule settings for Leads and Contacts.
- Some resources may be marked as needed to be updated in-place in the terraform plan.
  It is safe to apply those changes.
- This warning happens when Polytomic receives multiple records for a single identity
  value during an update-only sync.
- Add your Polytomic API key as a new repository secret named `POLYTOMIC_API_KEY`.
- In Salesforce, it is possible that certain fields contain links to other records.
  If such a field is setup, it must contain a valid reference to another record. If
  Salesforce cannot locate a record for the related entity type, and null values are
  not permitted, this error will be emitted.
- A Google OAuth client for authentication is necessary.
- Polytomic requires network-connected storage in order to function correctly.
- Polytomic uses an API key to authorize SCIM requests.
- Okta does not support enabling SCIM for OIDC applications.
- Salesforce rejected the record because it detected duplicate. This can happen if
  you attempt to create a record that violates your Salesforce instances's duplicate
  detection rules.
- Review the records present in your Salesforce based on which records you're trying
  to transmit. By default, Salesforce has a default rule settings for Leads and Contacts.
- Set environment variables as specified in the setup instructions.
- Your valid redirect URLs must include {POLYTOMIC_URL}/connect/front.
- Obtain a Google Developer token.
- Create an OAuth client in your Google Console.
- Enable the Google Analytics API in your Google Console
- Set environment variables in the Polytomic deployment
- Ability to run Docker containers.
- Ability to expose running Polytomic container to external traffic with SSL/TLS termination.
- The Google Drive API and Google Sheets API must be enabled for the associated project.
- Your valid redirect URLs must include {POLYTOMIC_URL}/connect/gsheets.
- 'We currently support four options for network connected storage: AWS S3, Google
  Cloud Storage, Azure Blob Storage, NFS mounts.'
- Hubspot does not support private applications — register for a Hubspot App Developer
  account to set up a new OAuth application.
- Polytomic's default on-premise login mechanism is Google OAuth.
- SCIM allows you to manage Polytomic users directly from your identity provider.
- Obtain an OAuth Client ID and Client Secret pair from Microsoft.
- Set environment variables MSADS_CLIENT_ID, MSADS_CLIENT_SECRET, and MSADS_DEVELOPER_TOKEN
  in the Polytomic deployment.
- Requires setup of a Connected App in Salesforce
- Set environment variables for GitHub client ID and secret.
- Requires access to the Facebook Login and Marketing API.
- Set the valid OAuth Redirect URI to '{POLYTOMIC_URL}/connect/fbaudience'.
- Requires setup of connected app in Polytomic
- You can skip step 1 below if you already have a Google Developer token.
- Ask the engineer on your team that deployed Polytomic to carry out this step.
- The number of API calls consumed for the sync duration will be about twice as much
  as a sync without these fields.
- The sync will also take about twice as long as a sync without them.
- Obtain your Amplitude keys by going to the Settings → Projects → General tab.
- 'Apollo''s default rate limits are low: 1000 enrichments per hour.'
- Your valid redirect URLs must include {POLYTOMIC_URL}/connect/hubspot.
- Hubspot does not support private applications, so you will need to register for
  a Hubspot App Developer account.
- Obtain an OAuth Client ID and Client Secret pair by following Microsoft's instructions.
- Obtain a Microsoft Ads Developer Token by following Microsoft's instructions.
- Set the environment variables in the Polytomic deployment.
- Please ensure that the Attio user account your connecting with has all the required
  read/write permissions within Attio to the objects you care about.
- AWS Access ID and AWS Secret Access Key are required for authentication.
- AWS region (e.g. `us-west-1`) and AWS S3 output bucket must be provided.
- Requires setup of Connected App in Salesforce
- Refresh token policy must be set to 'Refresh token is valid until revoked'
- Create an OAuth client in your Zendesk Chat console.
- Make sure your valid redirect URLs include `{YOUR_POLYTOMIC_URL}/connect/zendesk_chat`.
- Restart your Polytomic instance so that it can pick up the new environment variables.
- Whitelist Zendesk's IP addresses to ensure that it can communicate with Polytomic.
- By default, DynamoDB's read model is an eventually consistent one.
- You can override this within Polytomic to have strongly consistent reads.
- Enter AWS Access ID, AWS Secret Access Key, and AWS region (e.g. `us-west-1`)
- Polytomic requires specific permissions when writing to S3 buckets.
- You can interpolate Polytomic datetime expressions in your subfolder name using
  the format {{expression}}.
- In the App Store Connect portal, generate a private API key by following Apple's
  instructions.
- Add your private key from step 1.
- Enter your App Store Connect private key ID.
- Enter your App Store Connect Issuer ID.
- Enter your App Store Connect vendor number.
- We recommend creating a dedicated user for Polytomic to ensure proper access control
  and audit trail visibility.
- Polytomic connects to Ascend using an Ascend API key.
- Ensure that the Attio user account your connecting with has all the required read/write
  permissions within Attio to the objects you care about.
- In your Barbour ABI console click on your initials in the top right then go to Settings
  → Developer and generate an API key.
- Enter your Barbour ABI username, Barbour ABI password, and API key.
- In your Chargebee Portal obtain the API key by going to Settings → API Keys → Add
  API Key.
- Use DynamoDB Streams for bulk syncs to avoid full table scans.
- In your Circle community, create your API key by going to Developers → Token. Select
  Admin V2 as your token type.
- To have Polytomic carry out strongly consistent reads, tick the `Strongly consistent
  reads` box in your Polytomic model editor.
- Clari Copilot's rate limits allow syncing 10 records per second and 100k per week.
- 'Polytomic uses the following IAM Actions when reading from AWS OpenSearch: es:ESHttpGet,
  es:ESHttpHead.'
- S3 bucket name may contain an optional path which will limit access to a subset
  of the bucket.
- Files are time-based snapshots setting must be turned on to concatenate files
- Specify collection name for resulting SQL table
- Specify file format for concatenation (CSV or JSON)
- Specify number of lines to skip in CSVs before headers
- A trust policy must allow Polytomic to assume the role.
- You can specify an optional output subfolder for Polytomic to create and store your
  output files in.
- 'Only one sync mode is support for devices: append mode.'
- Requires Account Name and Container Name from Azure Blob Storage portal.
- Polytomic automatically handles coalescing the Customer.io file fragments in your
  S3 buckets into single tables
- Cosmos DB supports many different APIs, but you must connect Polytomic to Cosmos
  DB using a SQL API.
- Databricks requires that your Azure storage account is Data Lake Gen2 compatible.
- When creating a new storage account, enable the 'Hierarchical Namespaces' feature
  on the Advanced setting tab.
- While not required, we recommend you create a user exclusively for Polytomic so
  that the audit logs distinguish all Polytomic activity.
- You can override the global retention policy per bulk sync by going to Advanced
  settings at the bottom of your bulk sync configuration and turning on the Configure
  data retention for tables setting.
- You can choose to limit the number of concurrent queries Polytomic issues on Databricks
  by turning on the Concurrency query limit option.
- Polytomic will create new schemas and tables as needed; Polytomic's user will be
  owner of any newly created schemas and tables.
- In addition to configuring Polytomic, you may also need to configure a Storage Credential
  which Databricks will use when reading data from the staging bucket.
- Generate a Botpress Personal Access Token by going to the Profile Settings section
  of your Botpress account.
- Polytomic connects to Datadog using a Datadog API key.
- Enter your Chargebee Site, your Product Catalog version, API Key, and Maximum Requests
  per Minute.
- Make sure this token has Job Viewer and Webhooks permissions.
- Polytomic connects to a GitHub dbt project repository using the Polytomic GitHub
  application.
- 'Obtain a Clerk secret key from your Clerk admin console: go to Configure → API
  keys then copy your secret key.'
- 'The following collections are not available to sync from when using OAuth: Agent
  Status Events, SMS Events, Webhook.'
- The Users collection is only available to sync from if the authenticated OAuth user
  is a Dialpad Company Admin.
- Dialpad's SMS Messages collection provides no way to obtain historical data.
- We recommend you authenticate with token authentication.
- 'Select the following permissions from the list: `ads_management`, `ads_read`, `business_management`,
  `read_insights`.'
- In your Freshdesk portal, obtain your Freshdesk API key by going to Profile Settings
  → Your API Key in the sidebar on the right.
- In your Freshservice portal, obtain your Freshservice API key by going to Profile
  Settings → Your API Key in the sidebar on the right.
- In Front, obtain your Front API token by going to Settings → Developers → go to
  the API Tokens tab → click Create API token. Be sure to at least enable the Shared
  resources scope.
- Obtain your FullStory API key, in FullStory go Company Settings → Integrations →
  API Keys → Create key.
- Polytomic is only able to access repositories for which your GitHub account has
  read, write, or admin permissions.
- Only Gong admins will be able to authenticate.
- When bulk-syncing from Gong, you have the option of syncing calls and transcripts
  incrementally if you're willing to tolerate some outdated data.
- Your Google user account must have access to at least one Google Ads account.
- When sending user lists to Google Ads, note that it can take 5 to 48 hours for Google
  Ads to process those changes after Polytomic has sent the data.
- Polytomic connects to a specific Databricks warehouse using the server hostname
  and HTTP path.
- Polytomic may modify field names in order to comply with BigQuery field naming rules.
- Setting a partition key will increase your query speed on the resulting data.
- By default, Polytomic will propagate deletes from your source as soft-deletes.
- You may also need to configure a Storage Credential which Databricks will use when
  reading data from the staging bucket.
- If your staging bucket is not configured as an External Location in Databricks,
  you'll need to provide Polytomic with the name of the Storage Credential in the
  connection configuration.
- Polytomic ignores malformed CSVs.
- Files are time-based snapshots setting must be turned on for concatenation.
- Google Sheets columns have no inherent type information. Thus, by default when syncing
  from Google Sheets, Polytomic will treat all fields as strings.
- Polytomic needs read access to Organizational Units and Users.
- 'Obtain your Harmonic API key from your Harmonic Usage Dashboard: https://console.harmonic.ai/docs/dashboard'
- Polytomic has the ability to commit dbt exposures to your GitHub dbt repository.
- The identity value is case-sensitive.
- If a Heap user does not exist with your supplied identity value, Heap will create
  a new user with that identity.
- 'Note that the following collections are not available to sync from when using OAuth:
  Agent Status Events, SMS Events, Webhook'
- Obtain your Highlevel Private Integration Token by following Highlevel's instructions.
- Obtain a Honeycomb API key by following Honeycomb's documentation.
- 'Find your Dittofeed Write Key in the Dittofeed console here: https://app.dittofeed.com/dashboard/settings#write-key.'
- Polytomic connects to HeyReach using a HeyReach API key.
- You can use Polytomic's Bulk Syncs to sync ad and campaign performance reports from
  Facebook Ads to your data warehouse, databases, and cloud storage systems.
- Polytomic supports GET and POST requests
- JSON responses
- Pagination ('next page' tokens or URIs; page size support)
- Extracting elements based on a JSONPath expression
- Custom HTTP headers/parameters
- Select 'Never' for token expiration to avoid the need to generate a new token every
  60 days.
- Polytomic connects to HubSpot using OAuth and requires a HubSpot account with read-write
  permissions.
- While not required, we recommend you create a user in HubSpot exclusively for Polytomic
  so that the import logs in HubSpot distinguish Polytomic syncs from manual uploads.
- In your Freskdesk portal, obtain your Freshdesk API key by going to Profile Settings
  → Your API Key in the sidebar on the right.
- Obtain your Front API token by going to Settings → Developers → API Tokens tab →
  click Create API token. Be sure to enable the Shared resources scope.
- Generate an authorization token in Intellimize by going to Account Settings → Offline
  conversions tracking authorization token → Add.
- You must have Ironclad's API add-on for this to be visible on your instance.
- Authorization Code should be unselected.
- Iterable only allows API Keys to be managed by Org Admins or members with the Project
  Configuration > Data Feeds, Third-Party Integrations, API Keys and Webhooks permission
- 'Obtain your Jira API token in Jira by going to https://id.atlassian.com/manage-profile/security/api-tokens.
  Ensure that these scopes are set for your API token: read:account, read:jira-user,
  read:jira-work, read:me, read:servicedesk-request'
- If you are running Jira On-Premise, you will need to connect with a Jira Personal
  Access Token.
- Uses OAuth2 or Google service account for authentication.
- 'Optional: you can fill in the Location field if you want to restrict Polytomic
  to creating data in a particular region (for example: EU).'
- In the Kustomer portal, obtain your Kustomer API key by going to Settings → Security
  → API Keys → Add API Key.
- 'If your database network-access policy requires whitelisting our IPs first, you
  can them here: https://docs.polytomic.com/docs/whitelist-ips.'
- Polytomic can connect to Google Cloud SQL databases using a service account key.
- When using Polytomic's Bulk Sync functionality to sync from Google Cloud Storage,
  you have the option of having Polytomic concatenate all CSV or JSON files in your
  bucket into one table in your data warehouse.
- Polytomic connects to Airtable using a Linear personal API key.
- Columns have no inherent type information.
- Polytomic will treat all fields as strings by default.
- When syncing to the 'Country' field in LinkedIn Ad Audiences, per LinkedIn's expectations
  make sure to send the two-letter country code rather than the full country name.
- Polytomic connects to Lob using a Lob API key.
- Loop's API limits are particularly low, meaning that pull large collections from
  it can take a long time.
- Pulling from the Customer Details collection is particularly slow.
- Polytomic connects to Google Workspace using a Service Account.
- Obtain your API key from the Loops dashboard under Settings → API → API keys.
- Marketo imposes a daily limit of 500MB for data exports.
- Obtain an API Key by creating one in HeyReach
- We recommend creating a dedicated SQL Server user for Polytomic to maintain clear
  audit trails and follow security best practices.
- Polytomic supports connecting to Microsoft SQL Server via SSH.
- Pagination ("next page" tokens or URIs; page size support)
- CDC replication from Microsoft SQL Server is only available for Bulk Syncs.
- By default, Polytomic will propagate deletes from your source as soft-deletes by
  marking the __polytomic_deleted_at column for each destination table with a datetime
  reflecting deletion time.
- Polytomic connects to MotherDuck using a MotherDuck Access Token
- Create a read-only account on your MongoDB database. You will supply this account's
  credentials to Polytomic.
- If you want the Polytomic sync to create a new collection rather than updating an
  existing one, make sure to select the Create new collection option in your sync
  configuration.
- Make sure Authorization Code is unselected.
- 'If your database network-access policy requires whitelisting our IPs first, you
  can find them here: https://docs.polytomic.com/docs/whitelist-ips.'
- CDC replication from MySQL is only available for Bulk Syncs.
- Recommended setting for log retention is at least 24 hours.
- Polytomic requires that web service-related features be enabled for your NetSuite
  account
- Token-based Authentication must be enabled
- 'Ensure that the following scopes are set for your API token: read:account, read:jira-user,
  read:jira-work, read:me, read:servicedesk-request'
- Polytomic requires that web service-related features be enabled for your NetSuite
  account.
- A dedicated user for Polytomic is recommended.
- NetSuite instance may have IP address restrictions.
- Polytomic connects to Lago using a Lago API key.
- Obtain your Linear personal API key from your Linear API settings page.
- Ensure that the connecting user's profile is Admin.
- When syncing objects from a large Outreach instance, you can set a history cutoff
  date.
- In Polytomic, go to Connections → Add Connection → Pardot.
- 'Polytomic supports syncing both to and from Parquet files on the major cloud storage
  providers: Amazon S3, Google Cloud Storage, Azure Blob Storage.'
- In general, you should use Bulk Syncs to sync to Parquet files.
- Polytomic connects to PartnerPage using a PartnerPage API key.
- In your Loops dashboard, obtain your API key by going to Settings → API → API keys.
- Generate a Plain API key by following Plain's instructions.
- Only sync from Marketo once a day.
- Be selective about the data you export from Marketo; only export what you need.
- 'Obtain your PlusVibe API key from your PlusVibe console: https://app.plusvibe.ai/v2/settings/api-access.'
- Polytomic supports connecting to PostgreSQL via SSH.
- To enable CDC, run EXEC sys.sp_cdc_enable_db for the database and EXEC sys.sp_cdc_enable_table
  for each table.
- CDC replication from PostgreSQL is only available for Bulk Syncs.
- Polytomic requires a replication slot for each bulk sync.
- Manually specifying a replication slot is only supported when reading from the primary
  database.
- Polytomic's default behaviour is to manage the replication slot for you.
- The replication slot must be created with the pgoutput plugin.
- Disabling a table that has completed syncing at least once and then enabling it
  again will resume CDC updates but does not result in an automatic resync.
- Incremental CDC updates are not supported for tables without primary keys.
- Polytomic ignores the setting of Mirror table without a unique identifier when replicating
  tables with primary keys.
- Polytomic connects to PredictLeads using a PredictLeads API Token and a PredictLeads
  API Key.
- Polytomic supports connecting to MySQL via SSH.
- Log retention period determines how log replication data is retained before it's
  deleted.
- If you already have a Reddit Ads Conversion Pixel ID, copy it from the Reddit Events
  Manager console.
- 'Optional: enter your Reddit Ads Conversion Pixel ID if you want to enable syncing
  conversion events to Reddit Ads.'
- Requires Token-based Authentication.
- Ensure web service features are enabled in NetSuite.
- AWS Access Key/Secret Key and Bucket configuration are only required if you plan
  to use Redshift as a destination.
- In NetSuite OpenAir, add a new application by following steps 1 to 5 in the Adding
  a New Application section of OpenAir's documentation.
- Enter Polytomic as the Application name and https://app.polytomic.com/connect/netsuiteopenair
  as the Redirect URI.
- The AWS Access Key/Secret Key and Bucket configuration are only required if you
  plan to use Redshift as a destination.
- Redshift Serverless may use either the Redshift Data API or a VPC endpoint to access
  data stored in Redshift.
- The IAM Policy must have permission to read, write, and list objects in the bucket.
- Polytomic will use an S3 bucket to stage data that will be loaded into Redshift;
  if you are also using Redshift as a source with UNLOAD, the same bucket and permissions
  will suffice.
- The IAM role must have permission to access the S3 bucket.
- Polytomic connects to Salesforce using OAuth and requires a Salesforce account with
  read-write permissions.
- The Polytomic user in Salesforce organizations with API Access Control enabled will
  need to enable the Use any API client permission.
- Polytomic connects to Outreach using OAuth.
- If you will often be sending over 250 record updates to Outreach on each sync run,
  you can speed up this process by ensuring that Polytomic is enabled to use Outreach's
  bulk APIs for sending it data.
- 'Polytomic''s first sync is always a full one: all records from the source model(s)
  are synced to Salesforce (i.e. a backfill takes place). Subsequent syncs are then
  differential.'
- Enter your Business Unit ID, which you can find in Pardot by going to Setup → Pardot
  Account Setup.
- 'Ingestion API: Bulk'
- 'Bulk batch size: 100'
- Set Concurrency mode to Serial if encountering errors after adjusting settings.
- Use Bulk Syncs to sync from Pipedrive to your data warehouses, databases, and cloud
  storage buckets like S3.
- Use Model Syncs to sync from Pipedrive to your SaaS apps, spreadsheets, and webhooks.
- The Segment write key is a unique identifier for each Source.
- Files are time-based snapshots — check the box if you want to concatenate files
  into one table.
- If your database network-access policy requires whitelisting our IPs first, check
  the documentation.
- Supports connecting to PostgreSQL via SSH.
- To authorize Polytomic to read data from Shopify, you first need to create a private
  app within your Shopify store and obtain its Admin API access token.
- Only a user with the owner role for a table may add it to the publication.
- Requires setup of a Slack app and Bot User OAuth Access Token.
- Add Polytomic app to channels for data visibility.
- This option is not possible on read replicas
- Polytomic's default behaviour is to manage the replication slot for you
- Incremental CDC updates are not supported for tables without primary keys
- Polytomic ignores this setting when replicating tables with primary keys
- Generate a PostHog personal API key by going to https://us.posthog.com/settings/user-api-keys.
- 'Assign permissions to the API key: Organization & project access: All-access, Batch
  export: Write, Event definition: Read, Organization: Read, User: Read.'
- Polytomic's integration requires that your Productboard subscription be at least
  a Pro plan.
- Strongly recommend using key pair authentication.
- If saving the connection results in an error, verify the names of your database,
  schema, and compute warehouse.
- 'The Polytomic role that the user falls under needs to have the following permissions:
  USAGE on the relevant schemas, SELECT on the relevant tables.'
- Verify that no schema parameter is set in the Additional parameters Polytomic Snowflake
  connection field, as that instructs the Polytomic user to only access the specified
  schema.
- Polytomic will sometimes generate temporary tables during a sync. These tables are
  automatically removed when the sync completes.
- You can specify a specific schema for Polytomic to generate these temporary tables
  in.
- Polytomic's default behaviour is to create all tables as Fail-safe.
- You can set Polytomic to write tables as transient instead for cost savings.
- Make sure to run a full resync for the setting to take effect if you turn this on
  for existing tables.
- Incremental syncs are not possible for Advertisers due to Strackr limitations.
- Recommended lookback period for transactions is not greater than 120.
- Use Model Syncs to sync to Stripe objects from your data warehouses, databases,
  SaaS applications, spreadsheet, and APIs.
- Use Bulk Syncs to sync from Stripe objects to your data warehouses, databases, and
  cloud storage like S3.
- The role should have permission for specific IAM actions including redshift-data:CancelStatement,
  redshift-data:DescribeStatement, redshift-data:DescribeTable, redshift-data:ExecuteStatement,
  redshift-data:GetStatementResult, redshift-data:ListDatabases, redshift-data:ListSchemas,
  redshift-data:ListTables, redshift-serverless:GetCredentials.
- The role's trust policy must allow Polytomic (AWS Account ID 568237466542) to assume
  the role.
- Polytomic connects to Towbook using a Towbook API token.
- Resyncing your data will thus delete all history except that of one week ago, so
  if you’d like all history preserved make sure to copy your synced table regularly.
- We recommend setting your sync schedule to daily to minimise the data accumulating
  in Towbook.
- Polytomic represents Salesforce formula and rollup fields as any other field.
- Enable support for Tooling API to sync metadata objects.
- 'Salesforce Enternal ID requirement: ensure the relationship field on the target
  object is marked as an External ID in Salesforce.'
- Polytomic connects to Airtable using an Unbounce API key.
- In UpPromote, go to Settings → Integration → API → Create API Key to create an UpPromote
  API key.
- If you still encounter errors, then set Concurrency mode to Serial.
- You can use Polytomic to enrich your IP datasets with fraud scores from Scamalytics.
- Polytomic delivers payloads as a gzipped response to minimize bandwidth use.
- Your client likely supports decoding this automatically.
- In Seal Subscriptions, go to Settings → General Settings → API to generate your
  Seal Token.
- Paste your Seal Token write key in Polytomic's Seal Token field.
- Review Updates is a collection updated from review creation and update events emitted
  by Yotpo's webhooks. As a result, there is no way to resync all past history as
  Yotpo's APIs do not supply it.
- Polytomic's Full Resync operation will clear the table's schema and regenerate it,
  then continue ingesting Yotpo's updates as they come in.
- Polytomic enforces a limit of 100 API requests per minute.
- Use Bulk Syncs to sync files from SFTP servers to your data warehouses, databases,
  and cloud storage buckets like S3.
- If you would like the files in your SFTP directory concatenated into one table in
  your destination, you should check the Files are time-based snapshots box.
- Polytomic enforces a limit of 100 Zendesk API requests per minute.
- Requires creating a Slack app and adding it to the channels to sync messages.
- Ensure that the Polytomic Snowflake user has the above permissions for the specified
  schema.
- If you turn on transient tables for existing tables, make sure to run a full resync
  for the setting to take effect.
- Only BINARY fields can be encrypted.
- New fields will be created as BINARY columns.
- Each sync run will only sync data newly-created in Strackr since the last sync.
- When syncing from Strackr transactions, do not set the lookback period greater than
  120.
- Polytomic connects to Stripe using a Stripe API key.
- The default value for the lookback period is 0.
- When exporting Towbook's accounting report for the first time, Polytomic will populate
  data going back one week.
- Connects to Unbounce using an API key.
- Obtain your API Key by going to Settings → Integration → UserVoice API keys → Add
  API Client.
- Your API should return `200 OK` on receipt of the payload.
- Review Updates is a collection updated from review creation and update events emitted
  by Yotpo's webhooks.
- SSO/SAML configuration may be required for some integrations.
- Some objects may return nulls in deeply nested fields
- Requires OAuth2 setup for authentication.
errors:
- 'REQUEST_LIMIT_EXCEEDED: Throttle API calls or reduce frequency'
- 'QUERY_TIMEOUT: Break down filters or add selectivity'
- '401 Unauthorized: Recheck OAuth scopes or token expiration'
- '403 Forbidden: Check user permissions for access'
- '500 Internal Server Error: Retry the request after some time'
- 6 records with duplicate identities sent
- 'Enrichment failed for 6 records: API Key does not have the correct permissions.'
- 'Foreign key external ID: not found for field Some_Custom_Field__c in entity Account'
- 'DUPLICATES_DETECTED: Use one of these records?:--'
- Salesforce rejected the record because it detected duplicates.
- Duplicate Salesforce records
- Foreign key external ID not found for field Some_Custom_Field__c in entity Account
- 'Salesforce rejected the record because it detected duplicates. Duplicate rule ''STANDARD_RULE''
  matched records: 00Q5f000005hR7ObbZ, 00Q5f000005A19ABbZ.'
- 'Permission denied: Check IAM policy permissions.'
- 'Role assumption failure: Verify trust policy.'
- 'failed to execute query: Invalid OperationHandle'
- Failure to set the replica identity will cause errors when attempting to update
  or delete rows.
- Check the **Use replication for bulk syncs** box in your Polytomic MySQL connection
  configuration and click **Save**.
- '401 Unauthorized: Recheck credentials or token expiration'
- 'Salesforce objects or fields are not listed in Polytomic: This is almost always
  because the Salesforce user connected in Polytomic does not have permissions to
  read the corresponding objects or fields in Salesforce. Ask your Salesforce admin
  to double-check the user''s permissions.'
- 'UNABLE_TO_LOCK_ROW errors when syncing to Salesforce: These are errors emitted
  by your Salesforce instance when too many flows are firing, resulting in Salesforce
  unable to write the data Polytomic sent it because the corresponding records are
  locked to receive Salesforce flow results. The way to get around this is to tell
  Polytomic to lower the rate of data it sending to Salesforce.'
- 'UNABLE_TO_LOCK_ROW errors when syncing to Salesforce: These are errors emitted
  by your Salesforce instance when too many flows are firing, resulting in Salesforce
  unable to write the data Polytomic sent it because the corresponding records are
  locked to receive Salesforce flow results.'
- 4xx or 5xx error will cause the sync to appear as a failure.
- '401 Unauthorized: Check your credentials.'
- '429 Too Many Requests: Rate limit exceeded.'
auth_info:
  mentioned_objects:
  - OauthToken
  - AuthProvider
  - NamedCredential
  - GitHub App
  - Facebook App
  - OAuth Redirect URIs
  - FRONT_CLIENT_ID
  - FRONT_CLIENT_SECRET
  - Google Developer token
  - OAuth client
  - GOOGLEANALYTICS_CLIENT_ID
  - GOOGLEANALYTICS_CLIENT_SECRET
  - Connected App
  - GitHub Apps
  - OAuth Client ID
  - OAuth
  - Consumer Key
  - Consumer Secret
  - USE CATALOG
  - USE SCHEMA
  - SELECT
  - CREATE SCHEMA
  - CREATE TABLE
  - MODIFY
  - CREATE EXTERNAL TABLE
  - READ FILES
  - READ VOLUME
  - Integration record
  - OAuth 2.0
  - User role
  - Access Token
  - Integration Record
  - User Role
  - Username
  - Client ID
  - Private API key
client:
  base_url: https://www.polytomic.com
  headers:
    Accept: application/json
source_metadata: null
