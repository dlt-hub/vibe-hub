resources:
- name: bower_upload
  endpoint:
    path: /F/yourfeedname/bower/upload
    method: POST
- name: MyGet Feed
  endpoint:
    path: /F/your-feed-name/maven
    method: GET
- name: gem
  endpoint:
    path: /F/<your_feed_name>/gem/upload
    method: POST
    data_selector: data
- name: python_feed
  endpoint:
    path: /F/<your_feed_name>/python/upload
    method: POST
    data_selector: data
    params: {}
- name: paket
  endpoint:
    path: /F/paket-demo/api/v2
    method: GET
    data_selector: dependencies
- name: Chuck Norris Feed
  endpoint:
    path: https://www.myget.org/F/chucknorris
    method: GET
    data_selector: packageSources
- name: Customer X
  endpoint:
    path: https://www.myget.org/F/customerx
    method: GET
    data_selector: packageSources
- name: Our Cool Framework
  endpoint:
    path: https://www.myget.org/F/ourcoolframework
    method: GET
    data_selector: packageSources
- name: PowerShell Module
  endpoint:
    path: /F/<feed-name-goes-here>/api/v2/package
    method: POST
    data_selector: module
    params: {}
- name: NuGet
  endpoint:
    path: /api/v1/Packages
    method: POST
- name: paket
  endpoint:
    path: /F/paket-demo/api/v2
    method: GET
    data_selector: records
- name: build_services
  endpoint:
    path: /docs/reference/build-services
    method: GET
- name: custom_build_scripts
  endpoint:
    path: /docs/reference/custom-build-scripts
    method: GET
- name: googleanalyticstracker
  endpoint:
    path: /F/googleanalyticstracker/
    method: GET
    data_selector: apis
    params: {}
- name: googleanalyticstracker_v1
  endpoint:
    path: /F/googleanalyticstracker/api/v1/
    method: GET
    data_selector: apis
    params: {}
- name: Chocolatey Package
  endpoint:
    path: /build/chocolatey
    method: POST
- name: .NET Core Library
  endpoint:
    path: /build/dotnetcore
    method: POST
- name: feed
  endpoint:
    path: /gallery/feed
    method: GET
    data_selector: feeds
    params: {}
- name: licenses
  endpoint:
    path: /licenses
    method: GET
    data_selector: licenses
- name: upstream_sources
  endpoint:
    path: /api/v2
    method: GET
    data_selector: sources
    params: {}
- name: googleanalyticstracker
  endpoint:
    path: /F/googleanalyticstracker/
    method: GET
    data_selector: service
    params: {}
- name: googleanalyticstracker_v1
  endpoint:
    path: /F/googleanalyticstracker/api/v1/
    method: GET
    data_selector: service
    params: {}
- name: googleanalyticstracker_push
  endpoint:
    path: /F/googleanalyticstracker/
    method: POST
    data_selector: service
    params: {}
- name: googleanalyticstracker_symbols_push
  endpoint:
    path: /F/googleanalyticstracker/symbols/api/v2/package
    method: POST
    data_selector: service
    params: {}
- name: bower_registry
  endpoint:
    path: /F/your-feed-name/bower/
    method: GET
    data_selector: packages
    params: {}
- name: webhook_events
  endpoint:
    path: /webhook/events
    method: POST
    data_selector: Payload
    params: {}
- name: email_webhook
  endpoint:
    path: /webhooks/email
    method: POST
    data_selector: webhook_data
    params: {}
- name: hipchat_webhook
  endpoint:
    path: /webhooks/hipchat
    method: POST
    data_selector: webhook_data
    params: {}
- name: slack_webhook
  endpoint:
    path: /webhooks/slack
    method: POST
    data_selector: webhook_data
    params: {}
- name: microsoft_teams_webhook
  endpoint:
    path: /webhooks/microsoft_teams
    method: POST
    data_selector: webhook_data
    params: {}
- name: twilio_webhook
  endpoint:
    path: /webhooks/twilio
    method: POST
    data_selector: webhook_data
    params: {}
- name: twitter_webhook
  endpoint:
    path: /webhooks/twitter
    method: POST
    data_selector: webhook_data
    params: {}
- name: vulnerabilities
  endpoint:
    path: /vulnerabilities
    method: GET
    data_selector: records
- name: bower_registry
  endpoint:
    path: /F/your-feed-name/bower/
    method: GET
    data_selector: packages
    params: {}
- name: nuget_v3
  endpoint:
    path: /F/<your-feed-name>/api/v3/index.json
    method: GET
    data_selector: records
- name: nuget_v2
  endpoint:
    path: /F/<your-feed-name>/api/v2
    method: GET
    data_selector: records
- name: nuget_v2_push
  endpoint:
    path: /F/<your-feed-name>/api/v2/package
    method: POST
    data_selector: records
- name: nuget_v1
  endpoint:
    path: /F/<your-feed-name>/api/v1
    method: GET
    data_selector: records
- name: symbols
  endpoint:
    path: /F/<your-feed-name>/symbols
    method: GET
    data_selector: records
- name: npm
  endpoint:
    path: /F/<your-feed-name>/npm
    method: GET
    data_selector: records
- name: bower
  endpoint:
    path: /F/<your-feed-name>/bower
    method: GET
    data_selector: records
- name: vsix
  endpoint:
    path: /F/<your-feed-name>/vsix
    method: GET
    data_selector: records
- name: composer
  endpoint:
    path: /F/<your-feed-name>/composer
    method: GET
    data_selector: records
- name: python
  endpoint:
    path: /F/<your-feed-name>/python
    method: GET
    data_selector: records
- name: rubygems
  endpoint:
    path: /F/<your-feed-name>/geminstall
    method: GET
    data_selector: records
- name: complete_feed_state
  endpoint:
    path: /F/{feedname}/api/v2/feed-state
    method: GET
    data_selector: packages
- name: updated_feed_state
  endpoint:
    path: /F/{feedname}/api/v2/feed-state
    method: GET
    params:
      since: '{lastupdate}'
- name: Ping
  endpoint:
    path: /webhooks/ping
    method: POST
    data_selector: Payload
    params: {}
- name: Package added
  endpoint:
    path: /webhooks/package-added
    method: POST
    data_selector: Payload
    params: {}
- name: Package deleted
  endpoint:
    path: /webhooks/package-deleted
    method: POST
    data_selector: Payload
    params: {}
- name: Package listed/unlisted
  endpoint:
    path: /webhooks/package-listed-unlisted
    method: POST
    data_selector: Payload
    params: {}
- name: Package pinned/unpinned
  endpoint:
    path: /webhooks/package-pinned-unpinned
    method: POST
    data_selector: Payload
    params: {}
- name: Package pushed
  endpoint:
    path: /webhooks/package-pushed
    method: POST
    data_selector: Payload
    params: {}
- name: Build queued
  endpoint:
    path: /webhooks/build-queued
    method: POST
    data_selector: Payload
    params: {}
- name: Build started
  endpoint:
    path: /webhooks/build-started
    method: POST
    data_selector: Payload
    params: {}
- name: Build finished
  endpoint:
    path: /webhooks/build-finished
    method: POST
    data_selector: Payload
    params: {}
- name: build_services
  endpoint:
    path: /docs/reference/build-services
    method: GET
    data_selector: services
- name: MyGet
  endpoint:
    path: /Account/SsoLogin
    method: GET
    data_selector: ''
    params: {}
- name: Email
  endpoint:
    path: /webhooks/email
    method: POST
    data_selector: event
    params:
      Host: SMTP server hostname
      Port: SMTP server port
      Use TLS?: whether to use TLS or not
      SMTP Username: SMTP server username
      SMTP password: SMTP server password
      From: sender of the message
      To: recipients of the message (separated by semicolon)
      Body: type of email body (raw JSON, plain text, HTML)
- name: HipChat
  endpoint:
    path: /webhooks/hipchat
    method: POST
    data_selector: event
    params:
      AuthToken: auth token
      Room: room to send notification
      Server: HipChat server URL
      Color: background color for the notification
      Color build events based on status: color message based on build status
      Notify participants: whether room participants should get a notification
- name: Slack
  endpoint:
    path: /webhooks/slack
    method: POST
    data_selector: event
    params:
      Webhook URL: Slack incoming webhook URL
      Channel: channel to send notification
- name: Microsoft Teams
  endpoint:
    path: /webhooks/teams
    method: POST
    data_selector: event
    params:
      Webhook URL: incoming webhook URL for Teams
- name: Twilio
  endpoint:
    path: /webhooks/twilio
    method: POST
    data_selector: event
    params:
      AccountSid: Twilio account SID
      AuthenticationToken: Twilio account authentication token
      From: number sending the message
      To: number to which the message will be sent
- name: Twitter
  endpoint:
    path: /webhooks/twitter
    method: POST
    data_selector: event
    params:
      OAuth consumer key: OAuth consumer key (API key)
      OAuth consumer secret: OAuth consumer secret (API secret)
      OAuth token: OAuth token
      OAuth token secret: OAuth token secret
- name: package
  endpoint:
    path: /api/v2/package
    method: POST
    data_selector: package
    params: {}
- name: NuGet Feed
  endpoint:
    path: /F/{feed name}/api/v3/index.json
    method: GET
    data_selector: packages
    params: {}
- name: Push Package
  endpoint:
    path: /F/{feed name}/api/v2/package
    method: POST
    data_selector: result
    params: {}
- name: NuGet v3 API
  endpoint:
    path: /F/<your-feed-name>/api/v3/index.json
    method: GET
- name: NuGet v2 API
  endpoint:
    path: /F/<your-feed-name>/api/v2
    method: GET
- name: NuGet v2 Package (Push)
  endpoint:
    path: /F/<your-feed-name>/api/v2/package
    method: PUT
- name: NuGet v1 API
  endpoint:
    path: /F/<your-feed-name>/api/v1
    method: GET
- name: Symbols Package Publish
  endpoint:
    path: /F/<your-feed-name>/api/v2/package
    method: PUT
- name: Symbols Server
  endpoint:
    path: /F/<your-feed-name>/symbols
    method: GET
- name: npm API
  endpoint:
    path: /F/<your-feed-name>/npm
    method: GET
- name: Bower API
  endpoint:
    path: /F/<your-feed-name>/bower
    method: GET
- name: VSIX Atom Feed API
  endpoint:
    path: /F/<your-feed-name>/vsix
    method: GET
- name: PHP Composer Registry API
  endpoint:
    path: /F/<your-feed-name>/composer
    method: GET
- name: Python API
  endpoint:
    path: /F/<your-feed-name>/python
    method: GET
- name: Ruby Gems Install
  endpoint:
    path: /F/<your-feed-name>/geminstall
    method: GET
- name: complete_feed_state
  endpoint:
    path: /F/{feedname}/api/v2/feed-state
    method: GET
    data_selector: packages
    params: {}
- name: updated_feed_state
  endpoint:
    path: /F/{feedname}/api/v2/feed-state
    method: GET
    data_selector: packages
    params:
      since: '{lastupdate}'
- name: packages
  endpoint:
    path: /api/v1/packages
    method: GET
    data_selector: packages
- name: MyGet
  endpoint:
    path: /Account/SsoLogin
    method: GET
    data_selector: records
    params: {}
- name: CredentialProvider
  endpoint:
    path: /docs/reference/credential-provider-for-visual-studio
    method: GET
notes:
- Uses OAuth2 with refresh token — requires setup of connected app in api
- If a MyGet npm feed is marked as private, it will always require authentication.
- Important! Make sure to add auth.json to your .gitignore/.hgignore/... file to prevent
  accidental leaking of credentials via source control.
- To work with a private Vsix feed, you'll have to use the pre-authenticated feed
  URL.
- Make sure to add auth.json to your .gitignore/.hgignore/... file to prevent accidental
  leaking of credentials via source control.
- Currently MyGet does not support hosting tar.gz packages.
- If you try to install a package that is not present on your MyGet feed, the tool
  will fetch that package from the main repository.
- MyGet emulates a gem server repository for Ruby gems.
- Bulk upload is typically the easiest way to migrate packages to a MyGet feed.
- MyGet does not support hosting tar.gz packages.
- When consuming NuGet packages from an authenticated feed during a build on TeamCity,
  avoid adding credentials for connecting to the feed to source control.
- Uses API key for authentication.
- MyGet Build Services has a 5 minute cooldown period between builds during which
  you can't trigger a build, manually or otherwise.
- TeamCity 8 and 9 provide a build feature which enables you to consume packages from
  feeds that require authentication.
- In older versions of TeamCity, two additional buildsteps can be added.
- It is also possible to make use of a pre-authenticated feed URL.
- NuGet can walk an entire tree of configuration files and fetch settings from those.
- All clients start with a NuGet.config in the current directory and then walk up
  to the drive root.
- This method of scanning vulnerabilities is outdated. Check out our integrated vulnerability
  report for a better way of analyzing potential vulnerabilities.
- When using multiple feeds, configure NuGet to use the aggregate package source.
- Distributing a NuGet.config file with sources simplifies working with multiple feeds.
- When Two-Factor authentication is enabled on GitHub, consuming git from the commandline
  will require this personal access token to be entered.
- Use the generated personal access token for configuring the MyGet build.
- PowerShellGet has a -Credential parameter for private feeds.
- Basic authentication should be enabled on your service to be able to use it with
  MyGet Build Services.
- It is possible to make use of a pre-authenticated feed URL.
- NuGet package restore is always enabled.
- Build services supports various frameworks and SDKs.
- PowerShellGet also has the -Credential parameter which can be used with private
  feeds.
- All environment variables described in the Build Services Reference can be used
  in build.bat files.
- Create a new feed in MyGet that you would like to serve as your target package repository.
- If you are building an app with .NET Core or .NET standard packages, you should
  use a .NET Core task instead of the NuGet task.
- NuGet package restore is enabled by default.
- Build services supports a variety of frameworks and SDKs.
- Build scripts can be customized using PowerShell or batch files.
- No need to know or learn about NuGet.Config files or nuget.exe commands to modify
  them
- No need to use API keys (or access tokens) when working within Visual Studio
- Service messages are strings that have a specific format that MyGet recognizes and
  can parse.
- NuGet.exe sometimes behaves strange when packaging FSharp applications or libraries.
- A workaround is to add a <PropertyGroup> element in the *.fsproj* file.
- By default, we keep all package versions available on your feed.
- Be very careful with password managers and browser add-ons providing auto-completion
  of credentials!
- Avoid configuring multiple upstream source proxies on a single feed.
- -rootFolder is required.
- -solutionFile is required.
- -nugetExe is required.
- -project is required.
- -outputFolder is required.
- -config is required.
- -version is required.
- -platform is required.
- -target is required.
- -targetFrameworks is required.
- -projects is required.
- -platforms is required.
- 'Could not find nuspec: $nuspecFilename'
- 'Could not find csproj: $projectPath'
- 'Could not find solution: $solutionFile'
- TODO
- Automatically updates packages from the upstream source.
- Update interval can be specified up to every 30 minutes on a Professional subscription.
- Uses OAuth2 for authentication.
- Vendors and open source projects can add their own schema to the PSD discovery document.
- Only public and community feeds can be listed in the MyGet Gallery
- 'Access tokens can be given a short description: this will help keeping track of
  where you used the access token and revoke it if necessary.'
- Access tokens can be scoped to allow access only to a specific feed - limiting the
  surcace area to which a given access token can push packages.
- MyGet supports NuGet symbols packages to help MyGet users debug their NuGet packages,
  step through their source code, and integrate with Visual Studio and tools like
  WinDbg.
- MyGet comes with its own symbol server that supports .snupkg and legacy .symbols.nupkg
  symbols, as well as consuming symbols and source indexing. Both managed and native
  assemblies and symbols are supported.
- Package retention policies can be configured to overcome this growth and perform
  some automatic housekeeping.
- If a package changed license over time, it will be listed twice.
- MyGet provides autocompletion on known OSI licenses, but a proprietary license name
  can be entered.
- Be careful with password managers and browser add-ons providing auto-completion
  of credentials.
- Upstream sources make it easy to pull in packages from other package sources onto
  your downstream MyGet feeds.
- This feature is currently in preview.
- Upstream sources can be configured to automatically check for package updates.
- 'If you have any special characters in your username or password, such as an @ or
  a space, make sure to use the URL encoded value (e.g. %40 for @, %23 for #, %2F
  for / and so on).'
- When working with private npm registries, it is required to run `npm login` to store
  authentication details into a `.npmrc` file in your user profile folder.
- If a MyGet Bower feed is marked as private, it will always require authentication.
- Make sure to use a pre-authenticated URL or include credentials in the registry
  URL if you want to register a package.
- Only feed owners and co-owners can manage webhooks for a feed.
- Webhook deliveries can be inspected, including full logs, as well as redelivered.
- Access tokens can be generated from your profile page.
- Access tokens can be scoped to allow access only to a specific feed.
- Starting with NuGet.exe 3.5, regular packages and symbols packages can be pushed
  with one single command.
- MyGet is an eventually consistent system.
- To resolve 401 Unauthorized issues, ensure the //www.myget.org/F/your-feed-name/:always-auth=
  setting is set to true in .npmrc.
- If you have any special characters in your username or password, make sure to use
  the URL encoded value.
- Pre-authenticated feed URLs contain sensitive information and should be used with
  caution.
- MyGet Enterprise provides support for external authentication modules to sign in
  to the web application.
- ADFS is a federated identity service, so ADFS integration does not provide MyGet
  with access to user accounts.
- MyGet Build Services has a 5 minute cooldown period between builds during which
  you can't trigger a build.
- We do not support SMS-based authentication.
- The first login to MyGet will ask for additional profile details such as e-mail
  address.
- SymbolSource support has ended on November 1, 2016. We recommend using the MyGet
  symbol server instead.
- The NuGet protocol has no v3 push API yet. You have to use the api/v2/package endpoint
  instead.
- Currently only support Git repositories (no TFVC support yet).
- MyGet is now also available in the GitHub Marketplace.
- In light of upcoming EU General Data Protection Regulation, MyGet is taking proactive
  action to verify we are compliant.
- Private feeds require basic authentication
- Pre-authenticated feed URLs contain sensitive information
- Uses OAuth for authentication against MyGet feeds.
- Opt-in support for expiring access tokens (API keys)
- Packages mirrored from proxied package sources can be unlisted in the resulting
  feed
- Support for multiple API keys
- Support for traditional username/password registration on the MyGet Web site
- Specifying credentials can be done by removing and adding the build configuration
  again.
- Minimum length for usernames has been decreased to 3 characters.
- Dashes and underscores in feed names are supported.
- Feed Sync support has ended on November 1, 2016.
- MyGet introduced two-factor authentication (2FA) for MyGet.org and MyGet Enterprise
  accounts.
- The first login to MyGet will ask for additional profile details such as e-mail
  address and so forth. Every user will have to provide these details once.
- The easiest way to publish NuGet package artifacts from VSTS to MyGet is to enable
  VSTS integration and configure Visual Studio Team Services as an upstream package
  source.
- DO NOT USE YOUR PERSONAL MYGET PASSWORD! Instead, you can use a scoped MyGet access
  token to be used in the Password field.
- We currently only support Git repositories (no TFVC support yet).
- Pushing to MyGet from VSTS fails with 'Forbidden' if VSTS incorrectly uses the API
  key configured.
- MyGet is now available in the GitHub Marketplace.
- User sign-ups by default opt-out of marketing communications or newsletters.
- Supports token authentication for NPM
- Supports OAuth authentication
- opt-in support for expiring access tokens (API keys)
- Support for BitBucket API v2.0 and switch to OAuth 2.0
- This 2015.1 release of MyGet adds brand new functionality to the service.
- 'Build Services: Builds now fail immediately for feeds that return a 4XX or 5XX
  status code'
- 'Build Services: No longer ignore *Test*.nuspec files when packaging'
- Support for Package Source Discovery
- Minimum length for usernames has been decreased to 3 characters (previously 6).
  Shorter usernames are now possible.
- Dashes and underscores in feed names are supported. Feeds can be named foo-prod
  for example.
- Uses GitHub OAuth credentials instead of username/password.
- Avoid configuring multiple upstream source proxies on a single feed, or in a chain
  of feeds.
- MyGet feeds can automatically fetch package updates made available through the upstream
  sources.
errors:
- 'REQUEST_LIMIT_EXCEEDED: Throttle API calls or reduce frequency'
- '401 Unauthorized: Recheck API key or permissions'
- 'Unauthorized: Check the access token.'
- 'REQUEST_LIMIT_EXCEEDED: Throttle API calls or reduce frequency.'
- 'QUERY_TIMEOUT: Break down filters or add selectivity.'
- '401 Unauthorized: Recheck API key or permissions.'
- The value "" of the "Project" attribute in element <Import> is invalid.
- package restore failures on MyGet Build Services
- upstream packages are no longer available downstream
- 'Could not find nuspec: $nuspecFilename'
- 'Could not find csproj: $projectPath'
- 'Could not find solution: $solutionFile'
- Package version cannot be empty
- '401 Unauthorized: Check your credentials and permissions.'
- '401 Unauthorized: Recheck API key or authentication method'
- 'QUERY_TIMEOUT: Break down filters or add selectivity'
- '401 Unauthorized: Recheck OAuth scopes or token expiration'
- '401 Unauthorized: Recheck upstream source credentials'
- '403 Forbidden: A common cause are special characters in your username or password.'
- '401 Unauthorized: Make sure `//www.myget.org/F/your-feed-name/:always-auth=` setting
  is set to true.'
- 'CERT_UNTRUSTED: Run `npm config set ca ""` to work around this issue.'
- '401 Unauthorized: Check API key and permissions.'
- '401 Unauthorized: Check API key or user permissions'
- '402 Payment Required: The private feed is locked because the feed owner''s subscription
  has expired.'
- '409 Conflict: The package size is too large for the current subscription.'
- '413 RequestEntityTooLarge: The package is too large according to your subscription
  quota.'
- '403 Forbidden: Special characters in username or password may cause this error.'
- '401 Unauthorized: Ensure that npm login has been executed and the .npmrc file is
  correctly configured.'
- 'Request failed due to invalid credentials: Check username and password.'
- '200: Request succeeded and a response is returned'
- '404: No feed with the name in the base URL exists'
- '403: API key used has no write access to the feed'
- '409: Feed''s subscription has expired'
- '412: Since date is older than one month'
- '402 Payment Required: Private feed is locked due to expired subscription'
- '409 Conflict: Package size is too large or feed is over quota'
- '413 RequestEntityTooLarge: Package is too large according to subscription quota'
- '403 Forbidden: Check your access token or permissions'
- '403 Forbidden: Ensure correct API key is used and service connections are configured
  properly.'
- '200: Request succeeded'
- '403: API key has no write access to the feed'
- Pushing to MyGet from VSTS fails with 'Forbidden'
- '403 Forbidden: Response status code does not indicate success'
- Feed statistics are not updated in some situations.
- 'Build Services: building from protected SVN repositories isn''t always working.'
- Visual Studio asks for credentials twice for some private feeds.
- Package restore failures on MyGet Build Services may occur due to outdated credentials
  in auto-complete tools.
auth_info:
  mentioned_objects:
  - Auth0
  - Azure Active Directory
  - GitHub
  - Google
  - Microsoft Account
  - Okta
  - StackExchange
  - WS-Federation (ADFS)
  - apiKey
  - NuGet-ApiKey
  - ADFS
  - MyGet Credential Provider
client:
  base_url: https://www.myget.org
  auth:
    type: oauth2
    location: header
    header_name: Authorization
source_metadata: null
