resources:
- name: user_profile
  endpoint:
    path: /profile/v1/me
    method: GET
    data_selector: records
- name: profile
  endpoint:
    path: /profile/v1/me
    method: GET
    data_selector: ''
- name: subscription
  endpoint:
    path: /events/v4/subscriptions/webhook
    method: PUT
    data_selector: ''
    params: {}
- name: topics
  endpoint:
    path: /events/v4/topics
    method: GET
    data_selector: ''
    params: {}
- name: create_subscription
  endpoint:
    path: /events/v4/subscriptions/webhook
    method: PUT
    data_selector: ''
    params: {}
- name: browse_available_topics
  endpoint:
    path: /events/v4/topics
    method: GET
    data_selector: ''
    params: {}
- name: verify_subscription
  endpoint:
    path: /events/v4/subscriptions/my-unique-subscription-id
    method: GET
    data_selector: ''
    params: {}
- name: browse_existing_subscriptions
  endpoint:
    path: /events/v4/subscriptions
    method: GET
    data_selector: ''
    params: {}
- name: delete_subscription
  endpoint:
    path: /events/v4/subscriptions/my-unique-subscription-id
    method: DELETE
    data_selector: ''
    params: {}
- name: test_connection
  endpoint:
    path: /system/v1.0/testconnection
    method: GET
- name: find_attendee
  endpoint:
    path: /attendee/v1.0/find
    method: GET
- name: test_connection
  endpoint:
    path: /system/v1.0/testconnection
    method: GET
- name: service_endpoint
  endpoint:
    path: /attendee/v1.0/find
    method: GET
- name: auth_token
  endpoint:
    path: /profile-service/v1/keys/principals/<companyId>/authtoken/
    method: POST
    data_selector: token
- name: authToken
  endpoint:
    path: /profile-service/v1/keys/principals/<companyId>/authtoken/
    method: POST
    data_selector: token
- name: fiscal_year
  endpoint:
    path: /budget/v4/fiscalYear/{id}
    method: DELETE
    data_selector: ''
    params: {}
- name: fiscal_year
  endpoint:
    path: /budget/v4/fiscalYear/{id}
    method: DELETE
    data_selector: null
    params: {}
- name: fiscal_year
  endpoint:
    path: /budget/v4/fiscalYear/{id}
    method: DELETE
    data_selector: response
    params: {}
- name: fiscal_year
  endpoint:
    path: /budget/v4/fiscalYear/{id}
    method: DELETE
    data_selector: records
    params: {}
- name: budget_category
  endpoint:
    path: /budget/v4/budgetCategory/expenseTypes
    method: GET
    data_selector: records
- name: budget_category
  endpoint:
    path: /budget/v4/budgetCategory/expenseTypes
    method: GET
    data_selector: records
- name: expense_types
  endpoint:
    path: /budget/v4/budgetCategory/expenseTypes
    method: GET
    data_selector: response
    params: {}
- name: expenseTypes
  endpoint:
    path: /budget/v4/budgetCategory/expenseTypes
    method: GET
    data_selector: records
    params: {}
- name: budget_item
  endpoint:
    path: /budget/v4/budgetItemHeader/{id}
    method: DELETE
    data_selector: success
    params: {}
- name: budget_item
  endpoint:
    path: /budget/v4/budgetItemHeader/{id}
    method: DELETE
    data_selector: success
    params: {}
- name: budget_item_header
  endpoint:
    path: /budget/v4/budgetItemHeader/{id}
    method: DELETE
    data_selector: success
    params: {}
- name: budget_item_header
  endpoint:
    path: /budget/v4/budgetItemHeader/{id}
    method: DELETE
- name: BudgetItem
  endpoint:
    path: /budget/items
    method: GET
    data_selector: records
    params: {}
- name: BudgetItemHeaderSaveResponse
  endpoint:
    path: /budget/item/header/save
    method: POST
    data_selector: records
    params: {}
- name: ErrorResponse
  endpoint:
    path: /budget/item/error
    method: GET
    data_selector: errorMessageList
    params: {}
- name: FiscalPeriod
  endpoint:
    path: /fiscalPeriod
    method: GET
    data_selector: records
    params: {}
- name: DateRange
  endpoint:
    path: /dateRange
    method: GET
    data_selector: records
    params: {}
- name: DetailDashboardBudgetItemAdjustment
  endpoint:
    path: /detailDashboardBudgetItemAdjustment
    method: GET
    data_selector: records
    params: {}
- name: BudgetItemResponse
  endpoint:
    path: /budgetItemResponse
    method: GET
    data_selector: records
    params: {}
- name: BudgetItemHeaderSaveResponse
  endpoint:
    path: /budgetItemHeaderSaveResponse
    method: GET
    data_selector: records
    params: {}
- name: ErrorResponse
  endpoint:
    path: /errorResponse
    method: GET
    data_selector: records
    params: {}
- name: budget_tracking_field
  endpoint:
    path: /budget/v4/budgetTrackingField
    method: GET
    data_selector: records
    params: {}
- name: budget_tracking_field
  endpoint:
    path: /budget/v4/budgetTrackingField
    method: GET
    data_selector: fields
    params: {}
- name: budget_tracking_field
  endpoint:
    path: /budget/v4/budgetTrackingField
    method: GET
    data_selector: records
    params: {}
- name: budget_tracking_field
  endpoint:
    path: /budget/v4/budgetTrackingField
    method: GET
    data_selector: ''
    params: {}
- name: budget_adjustment
  endpoint:
    path: /budget/v4/adjustments
    method: POST
    data_selector: Budget Adjustments
    params:
      useMonthlyRollingUpdate: boolean
- name: budget_adjustments
  endpoint:
    path: /budget/v4/adjustments
    method: POST
    data_selector: Success
    params:
      useMonthlyRollingUpdate: 'true'
- name: budget_adjustment
  endpoint:
    path: /budget/v4/adjustments
    method: POST
    data_selector: records
    params:
      useMonthlyRollingUpdate: 'false'
- name: budget_adjustments
  endpoint:
    path: /budget/v4/adjustments
    method: POST
    data_selector: records
    params:
      useMonthlyRollingUpdate: 'false'
- name: delete_notification
  endpoint:
    path: /notification/{notificationID}
    method: DELETE
    data_selector: HTTP Status Code
    params:
      notificationID: required
- name: delete_notification_requests
  endpoint:
    path: /notification/{notificationID}
    method: DELETE
    data_selector: response
    params: {}
- name: send_notification
  endpoint:
    path: /concur/v1.0/notify
    method: POST
- name: send_notification
  endpoint:
    path: /concur/v1.0/notify
    method: POST
- name: fetch_attendee
  endpoint:
    path: /attendee/v2.0/fetch
    method: GET
- name: fetch_attendee
  endpoint:
    path: /attendee/v2.0/fetch
    method: GET
- name: notification
  endpoint:
    path: /notifications/v1.0/notification
    method: GET
    data_selector: NotificationList
    params:
      status: failed
- name: Launch External URL
  endpoint:
    path: /api-reference/callouts/v4.launch-external-url.html
    method: GET
- name: notification
  endpoint:
    path: /notifications/v1.0/notification
    method: GET
    data_selector: NotificationList
    params:
      status: failed
- name: Launch External URL
  endpoint:
    path: /api-reference/request/v4.endpoints.request-resources.html
    method: POST
- name: event_notification
  endpoint:
    path: /concur/v1.0/notify
    method: POST
    data_selector: Notification
- name: attendee_search
  endpoint:
    path: /concur/attendee/v2.0/fetch
    method: POST
    data_selector: AttendeeSearchResponse
- name: event_notification
  endpoint:
    path: /notify
    method: POST
    data_selector: Notification
- name: attendee_search
  endpoint:
    path: /attendee/search
    method: POST
    data_selector: AttendeeSearchResponse
- name: fetch_list
  endpoint:
    path: /list/v1.2/fetch
    method: POST
    data_selector: fetch-list-response
    params:
      num-to-return: 80
      lang-code: EN
- name: attendee_search
  endpoint:
    path: /attendee/v2.0/fetch
    method: POST
    data_selector: AttendeeSearchResponse
- name: attendee_search
  endpoint:
    path: /attendee/search
    method: POST
    data_selector: AttendeeSearchResponse
    params: {}
- name: Account
  endpoint:
    path: /api/cards/v4/account
    method: POST
    data_selector: null
    params: {}
- name: Transaction
  endpoint:
    path: /api/cards/v4/transaction
    method: POST
    data_selector: null
    params: {}
- name: Bulk Request
  endpoint:
    path: /api/cards/v4/bulkrequest
    method: GET
    data_selector: null
    params: {}
- name: fetch_list
  endpoint:
    path: /list/v1.2/fetch
    method: POST
    data_selector: fetch-list-response
    params:
      num-to-return: '80'
- name: bulk_request
  endpoint:
    path: /cards/v4/companies/{companyId}/bulkrequests/{requestId}
    method: GET
    data_selector: Bulk Request
    params:
      companyId: string
      requestId: string
- name: bulk_request
  endpoint:
    path: /cards/v4/companies/{companyId}/bulkrequests/{requestId}
    method: GET
    data_selector: Bulk Request
    params: {}
- name: create_card_accounts
  endpoint:
    path: /cards/v4/companies/{companyId}/accounts/bulk
    method: POST
    data_selector: Bulk API Response
    params:
      companyId: string
- name: create_card_accounts_bulk
  endpoint:
    path: /companies/{companyId}/accounts/bulk
    method: POST
- name: create_card_accounts_bulk
  endpoint:
    path: /cards/v4/companies/1700f4bc-4166-4516-bffe-91d7ae423189/accounts/bulk
    method: POST
    data_selector: accounts
- name: create_card_accounts_bulk
  endpoint:
    path: /cards/v4/companies/{company_id}/accounts/bulk
    method: POST
    data_selector: accounts
    params: {}
- name: create_card_transactions
  endpoint:
    path: /cards/v4/companies/{companyId}/transactions/bulk
    method: POST
- name: create_card_transactions
  endpoint:
    path: /cards/v4/companies/{companyId}/transactions/bulk
    method: POST
- name: transactions
  endpoint:
    path: /cards/v4/companies/{company_id}/transactions/bulk
    method: POST
    data_selector: transactions
- name: transactions
  endpoint:
    path: /cards/v4/companies/{company_id}/transactions/bulk
    method: POST
    data_selector: transactions
- name: create_account
  endpoint:
    path: /v4/accounts
    method: POST
    data_selector: accounts
- name: create_transaction
  endpoint:
    path: /v4/transactions
    method: POST
    data_selector: transactions
- name: create_account
  endpoint:
    path: /api/v4/accounts
    method: POST
    data_selector: accounts
    params: {}
- name: create_transaction
  endpoint:
    path: /api/v4/transactions
    method: POST
    data_selector: transactions
    params: {}
- name: Bulk Request
  endpoint:
    path: /bulk/request
    method: POST
    params:
      receivedAt: required
      requestId: required
      status: required
      totalElements: required
      type: required
- name: Create Transaction
  endpoint:
    path: /create/transaction
    method: POST
    data_selector: transaction
    params: {}
- name: Transaction Account Reference
  endpoint:
    path: /transaction/account/reference
    method: GET
    data_selector: account_reference
    params: {}
- name: Car Rental
  endpoint:
    path: /car/rental
    method: GET
    data_selector: car_rental_data
    params: {}
- name: travel
  endpoint:
    path: /api/travel
    method: GET
    data_selector: records
- name: travel_detail
  endpoint:
    path: /api/travel/detail
    method: GET
    data_selector: records
- name: issue_cash_advance
  endpoint:
    path: /cashadvance/v4.1/cashadvances/{cashAdvanceId}/issue
    method: POST
    data_selector: issuedDate
    params:
      cashAdvanceId: string
- name: retrieve_cash_advance
  endpoint:
    path: /cashadvance/v4.1/cashadvances/{cashAdvanceId}/issue
    method: GET
    data_selector: issuedDate
    params:
      cashAdvanceId: string
- name: cashadvance
  endpoint:
    path: /cashadvance/v4.1/cashadvances/{cashAdvanceId}/issue
    method: GET
    data_selector: records
    params: {}
- name: Create Cash Advance
  endpoint:
    path: /create/cashAdvance
    method: POST
    data_selector: cashAdvanceId
- name: Get Cash Advance
  endpoint:
    path: /get/cashAdvance
    method: GET
    data_selector: cashAdvanceId
- name: Issue Cash Advance
  endpoint:
    path: /issue/cashAdvance
    method: POST
    data_selector: status
- name: Create Cash Advance
  endpoint:
    path: /createCashAdvance
    method: POST
    data_selector: cashAdvanceId
- name: Get Cash Advance
  endpoint:
    path: /getCashAdvance
    method: GET
    data_selector: cashAdvanceId
- name: Issue Cash Advance
  endpoint:
    path: /issueCashAdvance
    method: POST
    data_selector: status
- name: tax_documents
  endpoint:
    path: /document-compliance-gateway/v4/tax-documents/{documentId}
    method: PUT
    data_selector: digitalTaxDocument
- name: tax_documents
  endpoint:
    path: /document-compliance-gateway/v4/tax-documents/{documentId}
    method: PUT
    data_selector: DocumentId
- name: tax_documents
  endpoint:
    path: /document-compliance-gateway/v4/tax-documents/{documentId}
    method: PUT
    data_selector: DocumentId
- name: tax_documents
  endpoint:
    path: /document-compliance-gateway/v4/tax-documents/{documentId}
    method: PUT
    data_selector: DocumentId
    params: {}
- name: financial_transactions
  endpoint:
    path: /transactiontypes/{docType}/transactions/paymentconfirmations
    method: GET
    data_selector: transactions
    params:
      docType: expense
- name: financial_transactions
  endpoint:
    path: /companies/transactiontypes/{docType}/transactions/paymentconfirmations
    method: GET
    data_selector: transactions
    params:
      docType: expense
- name: payment_confirmations
  endpoint:
    path: /financialintegration/fi/v4/companies/transactiontypes/{docType}/transactions/paymentconfirmations
    method: POST
    data_selector: processingConfirmation
    params:
      docType: expense
- name: payment_confirmations
  endpoint:
    path: /financialintegration/fi/v4/companies/transactiontypes/{docType}/transactions/paymentconfirmations
    method: POST
    data_selector: processingConfirmation
    params:
      docType: expense
- name: payment_confirmations
  endpoint:
    path: /financialintegration/fi/v4/companies/transactiontypes/{docType}/transactions/paymentconfirmations
    method: POST
    data_selector: processingConfirmation
    params:
      docType: expense
- name: payment_confirmations
  endpoint:
    path: /financialintegration/fi/v4/companies/transactiontypes/{docType}/transactions/paymentconfirmations
    method: POST
- name: posting_confirmation_response
  endpoint:
    path: /postingConfirmationResponse
    method: POST
    data_selector: PostingConfirmationResponse
    params: {}
- name: payment_confirmation_response
  endpoint:
    path: /paymentConfirmationResponse
    method: POST
    data_selector: PaymentConfirmationResponse
    params: {}
- name: invoice
  endpoint:
    path: /invoice
    method: GET
    data_selector: requestHeader
- name: cash_advance
  endpoint:
    path: /cashAdvance
    method: GET
    data_selector: cashAdvanceData
- name: Invoice
  endpoint:
    path: /invoices
    method: POST
    data_selector: requestHeader
    params: {}
- name: Cash Advance
  endpoint:
    path: /cash-advances
    method: POST
    data_selector: cashAdvanceData
    params: {}
- name: expense_posting_example
  endpoint:
    path: /api/financial-integration/expense/posting
    method: POST
    data_selector: posting_records
- name: expense_posting
  endpoint:
    path: /api/expense/posting
    method: POST
    data_selector: postingRecord
    params: {}
- name: Funds Reservation
  endpoint:
    path: /api-reference/financial-integration/v4.financial-integration.html#post-financial-transaction-acknowledgements-
    method: POST
    data_selector: requestPayload
    params:
      instruction: obligate
- name: Funds Check
  endpoint:
    path: /api-reference/financial-integration/v4.financial-integration.html#post-financial-transaction-acknowledgements-
    method: POST
    data_selector: requestPayload
    params:
      instruction: fundsCheck
- name: Expense Posting
  endpoint:
    path: /v4/expense-posting
    method: POST
    data_selector: postingRecord
- name: Cash Advances
  endpoint:
    path: /v4/cash-advances
    method: POST
    data_selector: cashAdvanceRecord
- name: Employee Paid Credit Card
  endpoint:
    path: /v4/employee-paid-credit-card
    method: POST
    data_selector: creditCardRecord
- name: Company Paid Credit Card
  endpoint:
    path: /v4/company-paid-credit-card
    method: POST
    data_selector: companyCreditCardRecord
- name: Funds Reservation
  endpoint:
    path: /api-reference/financial-integration/v4.financial-integration.html#post-financial-transactions-confirmations-
    method: POST
    data_selector: payload
    params:
      instruction: obligate
- name: Funds Check
  endpoint:
    path: /api-reference/financial-integration/v4.financial-integration.html#post-financial-transactions-confirmations-
    method: POST
    data_selector: payload
    params:
      instruction: fundsCheck
- name: simple_expense_posting
  endpoint:
    path: /financial-integration/v4/expense-posting
    method: POST
    data_selector: records
- name: expense_posting
  endpoint:
    path: /expense/posting
    method: GET
    data_selector: records
    params: {}
- name: cash_advance
  endpoint:
    path: /cash/advance
    method: GET
    data_selector: records
    params: {}
- name: credit_card_payment
  endpoint:
    path: /credit/card/payment
    method: GET
    data_selector: records
    params: {}
- name: expense_posting
  endpoint:
    path: /expense_posting
    method: GET
    data_selector: records
- name: cash_advances
  endpoint:
    path: /cash_advances
    method: GET
    data_selector: records
- name: credit_card_types
  endpoint:
    path: /credit_card_types
    method: GET
    data_selector: records
- name: employee_expenses
  endpoint:
    path: /employee/expenses
    method: GET
    data_selector: expenses
    params: {}
- name: Expense - Employee
  endpoint:
    path: /api/expense/employee
    method: GET
    data_selector: records
    params: {}
- name: expense_report
  endpoint:
    path: /v1/expense_reports
    method: GET
    data_selector: reports
    params: {}
- name: employee
  endpoint:
    path: /expense/employee
    method: GET
    data_selector: records
    params: {}
- name: Expense - Report
  endpoint:
    path: /expense/report
    method: GET
    data_selector: records
- name: Expense - expenseEntry
  endpoint:
    path: /expense/expenseEntry
    method: GET
    data_selector: records
- name: Expense - Allocation
  endpoint:
    path: /expense/allocation
    method: GET
    data_selector: records
- name: Expense - Journal
  endpoint:
    path: /expense/journal
    method: GET
    data_selector: records
- name: Expense - cashAdvanceApplication
  endpoint:
    path: /expense/cashAdvanceApplication
    method: GET
    data_selector: records
- name: Payroll
  endpoint:
    path: /payroll
    method: GET
    data_selector: records
- name: expense_report
  endpoint:
    path: /expense/report
    method: GET
    data_selector: reports
    params: {}
- name: expense_entry
  endpoint:
    path: /expense/entry
    method: GET
    data_selector: entries
    params: {}
- name: allocation
  endpoint:
    path: /expense/allocation
    method: GET
    data_selector: allocations
    params: {}
- name: journal
  endpoint:
    path: /expense/journal
    method: GET
    data_selector: journals
    params: {}
- name: cash_advance_application
  endpoint:
    path: /expense/cashAdvanceApplication
    method: GET
    data_selector: cashAdvanceApplications
    params: {}
- name: payroll
  endpoint:
    path: /payroll
    method: GET
    data_selector: payrollData
    params: {}
- name: employee
  endpoint:
    path: /payroll/employee
    method: GET
    data_selector: employeeData
- name: report
  endpoint:
    path: /payroll/report
    method: GET
    data_selector: reportData
- name: expenseEntry
  endpoint:
    path: /payroll/expenseEntry
    method: GET
    data_selector: expenseEntryData
- name: cashAdvanceUtilizationData
  endpoint:
    path: /payroll/cashAdvanceUtilizationData
    method: GET
    data_selector: cashAdvanceData
- name: itineraryResultDetail
  endpoint:
    path: /payroll/itineraryResultDetail
    method: GET
    data_selector: itineraryData
- name: Employee
  endpoint:
    path: /payroll/employee
    method: GET
    data_selector: records
- name: Report
  endpoint:
    path: /payroll/report
    method: GET
    data_selector: records
- name: ExpenseEntry
  endpoint:
    path: /payroll/expenseEntry
    method: GET
    data_selector: records
- name: CashAdvanceUtilizationData
  endpoint:
    path: /payroll/cashAdvanceUtilizationData
    method: GET
    data_selector: records
- name: ItineraryResultDetail
  endpoint:
    path: /payroll/itineraryResultDetail
    method: GET
    data_selector: records
- name: DailyAllowanceRateTypeDetail
  endpoint:
    path: /payroll/travelallowances/dailyallowanceratetype
    method: GET
    data_selector: records
    params: {}
- name: CalculationDetail
  endpoint:
    path: /payroll/travelallowances/calculationdetail
    method: GET
    data_selector: records
    params: {}
- name: Deduction
  endpoint:
    path: /payroll/travelallowances/deduction
    method: GET
    data_selector: records
    params: {}
- name: ItineraryResultHeader
  endpoint:
    path: /payroll/travelallowances/itineraryresultheader
    method: GET
    data_selector: records
    params: {}
- name: UserProfile
  endpoint:
    path: /payroll/userprofile
    method: GET
    data_selector: records
    params: {}
- name: employeeData
  endpoint:
    path: /employeeData
    method: GET
    data_selector: records
- name: cashAdvanceData
  endpoint:
    path: /cashAdvanceData
    method: GET
    data_selector: records
- name: journalData
  endpoint:
    path: /journalData
    method: GET
    data_selector: records
- name: requestObligation
  endpoint:
    path: /requestObligation
    method: POST
    data_selector: records
- name: employeeData
  endpoint:
    path: /employeeData
    method: GET
    data_selector: employeeData
    params: {}
- name: cashAdvanceData
  endpoint:
    path: /cashAdvanceData
    method: GET
    data_selector: cashAdvanceData
    params: {}
- name: journalData
  endpoint:
    path: /journalData
    method: GET
    data_selector: journalData
    params: {}
- name: requestObligation
  endpoint:
    path: /requestObligation
    method: POST
    data_selector: requestObligation
    params: {}
- name: confirmation_event
  endpoint:
    path: /confirmation
    method: POST
    data_selector: confirmationData
- name: report_obligation
  endpoint:
    path: /report
    method: POST
    data_selector: reportData
- name: confirmation
  endpoint:
    path: /confirmation
    method: POST
    data_selector: systemMessages
    params: {}
- name: report_obligation
  endpoint:
    path: /report_obligation
    method: POST
    data_selector: report
    params: {}
- name: Report Allocation Journal
  endpoint:
    path: /report/allocation/journal
    method: GET
    data_selector: records
- name: Report Allocation Tax
  endpoint:
    path: /report/allocation/tax
    method: GET
    data_selector: records
- name: Report Cash Advance Application
  endpoint:
    path: /report/cashAdvance/application
    method: GET
    data_selector: records
- name: Posting Documents Details
  endpoint:
    path: /posting/documents/details
    method: GET
    data_selector: records
- name: Mileage
  endpoint:
    path: /mileage
    method: GET
    data_selector: records
- name: Report Allocation Journal
  endpoint:
    path: /report/allocation/journal
    method: GET
    data_selector: records
- name: Report Allocation Tax
  endpoint:
    path: /report/allocation/tax
    method: GET
    data_selector: records
- name: Report Cash Advance Application
  endpoint:
    path: /report/cashAdvance/application
    method: GET
    data_selector: records
- name: Posting Documents Details
  endpoint:
    path: /posting/documents/details
    method: GET
    data_selector: records
- name: Mileage
  endpoint:
    path: /mileage
    method: GET
    data_selector: records
- name: latest_bookings
  endpoint:
    path: /api-reference/insights/latest-bookings-resource.html
    method: GET
- name: latest_bookings
  endpoint:
    path: /api-reference/insights/latest-bookings-resource.html
    method: GET
- name: latest_bookings
  endpoint:
    path: /api/v3.0/insights/latestbookings/
    method: GET
    data_selector: Latest Booking
    params:
      user: string
- name: latest_bookings
  endpoint:
    path: /insights/latestbookings/
    method: GET
    data_selector: ''
    params:
      user: string
- name: opportunities
  endpoint:
    path: /insights/opportunities
    method: GET
    data_selector: Items
    params: {}
- name: opportunities
  endpoint:
    path: /insights/opportunities
    method: GET
    data_selector: Items
    params: {}
- name: payment_request_digests
  endpoint:
    path: /invoice/paymentrequestdigests
    method: GET
    data_selector: Items
    params:
      id: required
- name: payment_request_digest_by_id
  endpoint:
    path: /invoice/paymentrequestdigests/{id}
    method: GET
    data_selector: PaymentRequestDigest
    params:
      id: required
- name: invoice_payment_request_digests
  endpoint:
    path: /api/v3.0/invoice/paymentrequestdigests
    method: GET
    data_selector: Items
- name: invoice_payment_request_digest_by_id
  endpoint:
    path: /api/v3.0/invoice/paymentrequestdigests/{id}
    method: GET
    data_selector: PaymentRequestDigest
- name: retrieve_invoice
  endpoint:
    path: /invoice/paymentrequest/{id}
    method: GET
    data_selector: invoice
    params:
      id: string
- name: create_invoice
  endpoint:
    path: /invoice/paymentrequest
    method: POST
    data_selector: paymentrequest
    params: {}
- name: update_invoice
  endpoint:
    path: /invoice/paymentrequest
    method: PUT
    data_selector: paymentrequest
    params: {}
- name: retrieve_invoice
  endpoint:
    path: /invoice/paymentrequest/{id}
    method: GET
    data_selector: ''
    params: {}
- name: create_invoice
  endpoint:
    path: /invoice/paymentrequest
    method: POST
    data_selector: ''
    params: {}
- name: update_invoice
  endpoint:
    path: /invoice/paymentrequest
    method: PUT
    data_selector: ''
    params: {}
- name: PaymentRequest
  endpoint:
    path: /invoice/v3/payment-request
    method: GET
    data_selector: records
    params: {}
- name: PaymentRequest
  endpoint:
    path: /invoice/paymentrequest
    method: GET
    data_selector: records
- name: payments
  endpoint:
    path: /invoice/provider-payment/v4/payments/bulkUpdate
    method: POST
    data_selector: payments
- name: payments
  endpoint:
    path: /invoice/provider-payment/v4/payments/bulkUpdate
    method: POST
- name: payments_bulk_update
  endpoint:
    path: /invoice/provider-payment/v4/payments/bulkUpdate
    method: POST
- name: payments
  endpoint:
    path: /invoice/provider-payment/v4/payments/bulkUpdate
    method: POST
    data_selector: successfulPayments
    params: {}
- name: bulk_payment_update
  endpoint:
    path: /invoice/provider-payment/v4/payments/bulkUpdate
    method: POST
- name: bulk_update_payments
  endpoint:
    path: /invoice/provider-payment/v4/payments/bulkUpdate
    method: POST
    data_selector: successfulPayments
    params: {}
- name: payments
  endpoint:
    path: /payments/bulkUpdate
    method: POST
- name: payments
  endpoint:
    path: /invoice/provider-payment/v4/payments/bulkUpdate
    method: POST
    data_selector: successfulPayments
    params: {}
- name: payment_update_result
  endpoint:
    path: /payment/update/result
    method: GET
    data_selector: successfulPayments
    params: {}
- name: bulk_update_payment
  endpoint:
    path: /payment/bulk/update
    method: POST
    data_selector: bulkUpdateRequestDTOList
    params: {}
- name: bulk_update_payment_result
  endpoint:
    path: /payment/bulk/update/result
    method: GET
    data_selector: failedPayments
    params: {}
- name: payment_update_result
  endpoint:
    path: /api/payments/update/result
    method: POST
    data_selector: successfulPayments
    params: {}
- name: bulk_update_payment
  endpoint:
    path: /api/payments/bulk/update
    method: POST
    data_selector: bulkUpdateRequestDTOList
    params: {}
- name: Retrieve New Invoice Payments
  endpoint:
    path: /invoice/payment-confirmation/v4/payments/bulkUpdate
    method: POST
- name: retrieve_new_invoice_payments
  endpoint:
    path: /invoice/payment-confirmation/v4/payments/bulkUpdate
    method: POST
    data_selector: results
- name: bulkUpdatePayments
  endpoint:
    path: /invoice/payment-confirmation/v4/payments/bulkUpdate
    method: POST
    data_selector: successfulPayments
    params: {}
- name: payments
  endpoint:
    path: /invoice/payment-confirmation/v4/payments/bulkUpdate
    method: POST
    data_selector: successfulPayments
- name: payments
  endpoint:
    path: /invoice/payment-confirmation/v4/payments/bulkUpdate
    method: POST
    data_selector: successfulPayments
    params: {}
- name: bulk_update_payments
  endpoint:
    path: /invoice/payment-confirmation/v4/payments/bulkUpdate
    method: POST
    data_selector: successfulPayments
    params: {}
- name: purchase_order
  endpoint:
    path: /invoice/purchaseorders
    method: POST
    data_selector: purchaseOrder
- name: update_purchase_order
  endpoint:
    path: /invoice/purchaseorders
    method: PUT
    data_selector: purchaseOrder
- name: get_purchase_order
  endpoint:
    path: /invoice/purchaseorders/{id}
    method: GET
    data_selector: purchaseOrder
    params:
      id: string
- name: purchase_orders
  endpoint:
    path: /api/v3.0/invoice/purchaseorders
    method: POST
    data_selector: purchaseOrder
- name: update_purchase_order
  endpoint:
    path: /api/v3.0/invoice/purchaseorders
    method: PUT
    data_selector: purchaseOrder
- name: get_purchase_order
  endpoint:
    path: /api/v3.0/invoice/purchaseorders/{id}
    method: GET
    data_selector: purchaseOrder
- name: update_purchase_order_receipts
  endpoint:
    path: /api/v3.0/invoice/purchaseorderreceipts
    method: PUT
    data_selector: purchaseOrder
- name: purchaseOrder
  endpoint:
    path: /purchaseOrder
    method: GET
    data_selector: records
- name: purchaseOrder
  endpoint:
    path: /purchaseOrders
    method: GET
    data_selector: records
- name: purchase_request
  endpoint:
    path: /purchaserequest
    method: POST
- name: retrieve_purchase_request
  endpoint:
    path: /purchaserequest
    method: GET
- name: purchase_request
  endpoint:
    path: /purchaserequest
    method: POST
- name: retrieve_purchase_requests
  endpoint:
    path: /purchaserequest
    method: GET
- name: purchase_request
  endpoint:
    path: /purchaserequest/v4/purchaserequests/{id}
    method: GET
    data_selector: purchaseRequestDetails
    params:
      mode: COMPACT
- name: purchase_request_details
  endpoint:
    path: /purchaserequest/v4/purchaserequests/{id}
    method: GET
    data_selector: purchaseRequestId
    params:
      mode: COMPACT
- name: purchase_requests
  endpoint:
    path: /purchaserequest/v4/purchaserequests
    method: GET
    data_selector: purchaseRequests
- name: purchase_requests
  endpoint:
    path: /purchaserequest/v4/purchaserequests
    method: GET
    data_selector: purchaseRequests
- name: purchase_order_receipt
  endpoint:
    path: /purchaseorderreceipts
    method: POST
    data_selector: response
    params: {}
- name: update_purchase_order_receipt
  endpoint:
    path: /purchaseorderreceipts
    method: PUT
    data_selector: response
    params: {}
- name: get_purchase_order_receipt
  endpoint:
    path: /purchaseorderreceipts
    method: GET
    data_selector: purchaseOrderReceipt
    params:
      purchaseOrderNumber: '{purchaseOrderNumber}'
      lineItemExternalID: '{lineItemExternalID}'
      goodsReceiptNumber: '{goodsReceiptNumber}'
- name: delete_purchase_order_receipt
  endpoint:
    path: /purchaseorderreceipts
    method: DELETE
    data_selector: response
    params:
      purchaseOrderNumber: '{purchaseOrderNumber}'
      lineItemExternalID: '{lineItemExternalID}'
      goodsReceiptNumber: '{goodsReceiptNumber}'
- name: purchase_order_receipts
  endpoint:
    path: /api/v3.0/invoice/purchaseorderreceipts
    method: POST
    data_selector: 'null'
    params: {}
- name: update_purchase_order_receipts
  endpoint:
    path: /api/v3.0/invoice/purchaseorderreceipts
    method: PUT
    data_selector: 'null'
    params: {}
- name: get_existing_purchase_order_receipts
  endpoint:
    path: /api/v3.0/invoice/purchaseorderreceipts
    method: GET
    data_selector: 'null'
    params:
      purchaseOrderNumber: PO1
      lineItemExternalID: L1
      goodsReceiptNumber: GRN1
- name: delete_existing_purchase_order_receipts
  endpoint:
    path: /api/v3.0/invoice/purchaseorderreceipts
    method: DELETE
    data_selector: 'null'
    params:
      purchaseOrderNumber: PO1
      lineItemExternalID: L1
      goodsReceiptNumber: GRN1
- name: salestaxvalidationrequest
  endpoint:
    path: /invoice/salestaxvalidationrequest
    method: GET
    data_selector: Items
    params: {}
- name: Invoices
  endpoint:
    path: /invoice/salestaxvalidationrequest
    method: GET
    data_selector: Items
    params: {}
- name: Invoice
  endpoint:
    path: /invoices
    method: GET
    data_selector: invoices
- name: Invoice
  endpoint:
    path: /path/to/invoice/endpoint
    method: GET
    data_selector: records
    params: {}
- name: vendors
  endpoint:
    path: /api/v3.1/invoice/vendors
    method: GET
    data_selector: Vendor Group Schema
    params:
      vendorCode: string
      addressCode: string
      groupName: string
- name: create_vendors
  endpoint:
    path: /api/v3.1/invoice/vendors
    method: POST
    data_selector: Vendor Group Schema
    params:
      vendorCode: string
      addressCode: string
      groupName: string
- name: update_existing_vendors
  endpoint:
    path: /api/v3.1/invoice/vendors
    method: PUT
    data_selector: Vendor Group Schema
    params:
      vendorCode: string
      addressCode: string
      groupName: string
- name: delete_vendor
  endpoint:
    path: /api/v3.1/invoice/vendors
    method: DELETE
    data_selector: Vendor Group Schema
    params:
      vendorCode: string
      addressCode: string
      groupName: string
- name: add_update_vendor_banking
  endpoint:
    path: /api/v3.1/invoice/vendor/banks
    method: PUT
    data_selector: Vendor Group Schema
    params:
      vendorCode: string
      addressCode: string
      groupName: string
- name: add_vendor_group
  endpoint:
    path: /api/v3.1/invoice/vendor/groups
    method: PUT
    data_selector: Vendor Group Schema
    params:
      vendorCode: string
      addressCode: string
      groupName: string
- name: delete_vendor_group
  endpoint:
    path: /api/v3.1/invoice/vendor/groups
    method: DELETE
    data_selector: Vendor Group Schema
    params:
      vendorCode: string
      addressCode: string
      groupName: string
- name: Vendor
  endpoint:
    path: /vendors
    method: GET
    data_selector: Vendor
    params: {}
- name: VendorBank
  endpoint:
    path: /vendorBanks
    method: GET
    data_selector: VendorBank
    params: {}
- name: VendorGroup
  endpoint:
    path: /vendorGroups
    method: GET
    data_selector: VendorGroup
    params: {}
- name: vendors
  endpoint:
    path: /vendors
    method: GET
    data_selector: vendors
    params:
      vendorCode: string
      addressCode: string
      groupName: string
- name: create_vendors
  endpoint:
    path: /vendors
    method: POST
    data_selector: vendors
    params:
      vendorCode: string
      addressCode: string
      groupName: string
- name: update_vendors
  endpoint:
    path: /vendors
    method: PUT
    data_selector: vendors
    params:
      vendorCode: string
      addressCode: string
      groupName: string
- name: delete_vendors
  endpoint:
    path: /vendors
    method: DELETE
    data_selector: vendors
    params:
      vendorCode: string
      addressCode: string
      groupName: string
- name: add_update_vendor_banking
  endpoint:
    path: /vendor/banks
    method: PUT
    data_selector: vendor_banking
    params:
      vendorCode: string
      addressCode: string
      groupName: string
- name: add_vendor_group
  endpoint:
    path: /vendor/groups
    method: PUT
    data_selector: vendor_groups
    params:
      vendorCode: string
      addressCode: string
      groupName: string
- name: delete_vendor_group
  endpoint:
    path: /vendor/groups
    method: DELETE
    data_selector: vendor_groups
    params:
      vendorCode: string
      addressCode: string
      groupName: string
- name: Vendor
  endpoint:
    path: /vendor
    method: GET
    data_selector: Vendor
    params: {}
- name: VendorBank
  endpoint:
    path: /vendorBank
    method: GET
    data_selector: VendorBank
    params: {}
- name: VendorGroup
  endpoint:
    path: /vendorGroup
    method: GET
    data_selector: VendorGroup
    params: {}
- name: receipt
  endpoint:
    path: /receipts/v4/users/{USER_ID}
    method: POST
    data_selector: null
    params: {}
- name: receipts
  endpoint:
    path: /receipts/v4/users/{USER_ID}
    method: POST
- name: receipts
  endpoint:
    path: /v4
    method: GET
    data_selector: links
- name: receipt_status
  endpoint:
    path: /v4/status/:receiptId
    method: GET
    data_selector: status
- name: receipts
  endpoint:
    path: /receipts/v4
    method: GET
    data_selector: links
- name: receipt_status
  endpoint:
    path: /v4/status/:receiptId
    method: GET
    data_selector: status
- name: schemas
  endpoint:
    path: /schemas
    method: GET
    data_selector: receiptSchemas
- name: post_receipt
  endpoint:
    path: /v4/users/:userId
    method: POST
- name: get_receipt_status
  endpoint:
    path: /v4/status/:receiptId
    method: GET
- name: get_receipt_by_id
  endpoint:
    path: /v4/:receiptId
    method: GET
- name: get_receipts_by_userid
  endpoint:
    path: /v4/users/:userId
    method: GET
- name: get_receipt_image
  endpoint:
    path: /v4/:receiptId/image
    method: GET
- name: schemas
  endpoint:
    path: /schemas
    method: GET
    data_selector: receiptSchemas
- name: get_receipt_status
  endpoint:
    path: /v4/status/:receiptId
    method: GET
    data_selector: status
- name: post_receipt
  endpoint:
    path: /v4/users/:userId
    method: POST
    data_selector: receipt
- name: get_receipt_by_id
  endpoint:
    path: /v4/:receiptId
    method: GET
    data_selector: receipt
- name: get_receipts_by_userId
  endpoint:
    path: /v4/users/:userId
    method: GET
    data_selector: receipts
- name: get_receipt_image
  endpoint:
    path: /v4/:receiptId/image
    method: GET
- name: image_only_receipts_by_userId
  endpoint:
    path: /v4/users/:userId/image-only-receipts
    method: GET
    data_selector: receiptsImages
    params: {}
- name: image_only_receipt_by_id
  endpoint:
    path: /v4/image-only-receipts/:receiptId
    method: GET
    data_selector: ''
    params: {}
- name: post_image_only_receipt
  endpoint:
    path: /v4/users/:userId/image-only-receipts
    method: POST
    data_selector: ''
    params: {}
- name: image_only_receipts
  endpoint:
    path: /v4/users/:userId/image-only-receipts
    method: POST
    data_selector: receiptsImages
    params: {}
- name: image_only_receipt_by_id
  endpoint:
    path: /v4/image-only-receipts/:receiptId
    method: GET
    data_selector: metadata
    params: {}
- name: get_receipt_image
  endpoint:
    path: /v4/image-only-receipts/:receiptId/image
    method: GET
    data_selector: image
    params: {}
- name: Air Receipt
  endpoint:
    path: /receipts/air
    method: GET
    data_selector: AirReceipt
- name: Air Receipt
  endpoint:
    path: /api-reference/receipts/air-receipt
    method: GET
    data_selector: schema
    params: {}
- name: car_rental_receipt
  endpoint:
    path: /car_rental_receipt
    method: GET
    data_selector: records
- name: hotel_receipt
  endpoint:
    path: /hotel_receipt
    method: GET
    data_selector: records
- name: ground_transport_receipt
  endpoint:
    path: /ground_transport_receipt
    method: GET
    data_selector: records
- name: general_receipt
  endpoint:
    path: /general_receipt
    method: GET
    data_selector: records
- name: icCardSegment
  endpoint:
    path: /icCardSegment
    method: GET
    data_selector: records
- name: lineItem
  endpoint:
    path: /lineItem
    method: GET
    data_selector: records
- name: location
  endpoint:
    path: /location
    method: GET
    data_selector: records
- name: merchant
  endpoint:
    path: /merchant
    method: GET
    data_selector: records
- name: payments
  endpoint:
    path: /payments
    method: GET
    data_selector: records
- name: railReceipt
  endpoint:
    path: /railReceipt
    method: GET
    data_selector: records
- name: railTickets
  endpoint:
    path: /railTickets
    method: GET
    data_selector: records
- name: segments
  endpoint:
    path: /segments
    method: GET
    data_selector: records
- name: receipts
  endpoint:
    path: /receipts/sample-receipts
    method: GET
    data_selector: sampleReceipts
- name: icCardSegment
  endpoint:
    path: /icCardSegment
    method: GET
    data_selector: records
- name: lineItem
  endpoint:
    path: /lineItem
    method: GET
    data_selector: records
- name: location
  endpoint:
    path: /location
    method: GET
    data_selector: records
- name: merchant
  endpoint:
    path: /merchant
    method: GET
    data_selector: records
- name: payments
  endpoint:
    path: /payments
    method: GET
    data_selector: records
- name: railReceipt
  endpoint:
    path: /railReceipt
    method: GET
    data_selector: records
- name: railTickets
  endpoint:
    path: /railTickets
    method: GET
    data_selector: records
- name: receipt
  endpoint:
    path: /receipts
    method: GET
    data_selector: receipts
    params: {}
- name: receipt
  endpoint:
    path: /receipts
    method: GET
    data_selector: receipts
- name: car_rental
  endpoint:
    path: /car_rental
    method: GET
    data_selector: receipts
    params: {}
- name: hotel
  endpoint:
    path: /hotel
    method: GET
    data_selector: receipts
    params: {}
- name: ground_transport
  endpoint:
    path: /ground_transport
    method: GET
    data_selector: receipts
    params: {}
- name: rail
  endpoint:
    path: /rail
    method: GET
    data_selector: receipts
    params: {}
- name: car_rental
  endpoint:
    path: /car-rental
    method: GET
    data_selector: receiptData
- name: hotel
  endpoint:
    path: /hotel
    method: GET
    data_selector: receiptData
- name: ground_transport
  endpoint:
    path: /ground-transport
    method: GET
    data_selector: receiptData
- name: rail_multiple_tickets
  endpoint:
    path: /rail/multiple-tickets
    method: GET
    data_selector: receiptData
- name: receipt
  endpoint:
    path: /receipt/{imageId}
    method: GET
    data_selector: Image
    params: {}
- name: expenseentry
  endpoint:
    path: /expenseentry/{entryId}
    method: GET
    data_selector: Image
    params: {}
- name: invoice
  endpoint:
    path: /invoice/{requestId}
    method: GET
    data_selector: Image
    params: {}
- name: report
  endpoint:
    path: /report/{imageId}
    method: GET
    data_selector: Image
    params: {}
- name: expenseentry
  endpoint:
    path: /api/image/v1.0/expenseentry
    method: GET
- name: receipt
  endpoint:
    path: /receipt/{imageId}
    method: GET
    data_selector: Image
    params: {}
- name: expenseentry
  endpoint:
    path: /expenseentry/{entryId}
    method: GET
    data_selector: Image
    params: {}
- name: invoice
  endpoint:
    path: /invoice/{requestId}
    method: GET
    data_selector: Image
    params: {}
- name: report
  endpoint:
    path: /report/{imageId}
    method: GET
    data_selector: Image
    params: {}
- name: expenseentry
  endpoint:
    path: /api/image/v1.0/expenseentry/A2C40CEE415B43B2A0BE
    method: GET
- name: retrieve_receipt_images
  endpoint:
    path: /api/v3.0/expense/receiptimages
    method: GET
    data_selector: Items
- name: retrieve_receipt_image_by_id
  endpoint:
    path: /api/v3.0/expense/receiptimages/{id}
    method: GET
    data_selector: Items
- name: create_receipt_image
  endpoint:
    path: /api/v3.0/expense/receiptimages
    method: POST
    data_selector: Items
- name: append_receipt_image
  endpoint:
    path: /api/v3.0/expense/receiptimages/{id}
    method: PUT
    data_selector: Items
- name: delete_receipt_image
  endpoint:
    path: /api/v3.0/expense/receiptimages/{id}
    method: DELETE
    data_selector: Items
- name: receipt_image
  endpoint:
    path: /receipt-image/v3
    method: GET
    data_selector: ReceiptImages
    params: {}
- name: receipt_images
  endpoint:
    path: /expense/receiptimages
    method: GET
    data_selector: Items
- name: receipt_image_by_id
  endpoint:
    path: /expense/receiptimages/{id}
    method: GET
    data_selector: Items
- name: create_receipt_image
  endpoint:
    path: /expense/receiptimages
    method: POST
- name: append_receipt_image
  endpoint:
    path: /expense/receiptimages/{id}
    method: PUT
- name: delete_receipt_image
  endpoint:
    path: /expense/receiptimages/{id}
    method: DELETE
- name: Receipt Image
  endpoint:
    path: /receipt_image
    method: GET
    data_selector: records
    params: {}
- name: exceptions
  endpoint:
    path: /travelrequest/v4/requests/{requestUuid}/exceptions
    method: GET
    data_selector: exceptions
    params:
      requestUuid: string
      userId: string
- name: exceptions
  endpoint:
    path: /travelrequest/v4/requests/{requestUuid}/exceptions
    method: GET
    data_selector: records
    params:
      requestUuid: string
      userId: string
- name: exceptions
  endpoint:
    path: /travelrequest/v4/requests/{requestUuid}/exceptions
    method: GET
    data_selector: exceptions
    params:
      requestUuid: string
      userId: string
- name: exceptions
  endpoint:
    path: /travelrequest/v4/requests/{requestUuid}/exceptions
    method: GET
    data_selector: records
    params:
      requestUuid: string
      userId: string
- name: cash_advances
  endpoint:
    path: /travelrequest/v4/requests/{requestUuid}/exceptions
    method: GET
    data_selector: records
    params:
      requestUuid: string
      userId: string
- name: exceptions
  endpoint:
    path: /travelrequest/v4/requests/{requestUuid}/exceptions
    method: GET
    data_selector: records
    params:
      requestUuid: string
      userId: string
- name: requests
  endpoint:
    path: /requests/{requestUuid}/{action}
    method: POST
    data_selector: Request
    params:
      requestUuid: string
      action: string
      comment: string
      userId: string
      companyID: string
- name: exceptions
  endpoint:
    path: /travelrequest/v4/requests/{requestUuid}/exceptions
    method: GET
    data_selector: records
    params:
      requestUuid: string
      userId: string
- name: travel_request
  endpoint:
    path: /travelrequest/v4/requests/{id}/submit
    method: POST
    data_selector: href
    params: {}
- name: request
  endpoint:
    path: /requests/{requestUuid}/{action}
    method: POST
    data_selector: Request
    params:
      requestUuid: string
      action: string
      comment: string
      userId: string
      companyID: string
- name: expected_expense_comments
  endpoint:
    path: /travelrequest/v4/expenses/{expenseUuid}/comments
    method: GET
    data_selector: comments
    params:
      expenseUuid: string
      userId: string
- name: travel_request
  endpoint:
    path: /travelrequest/v4/requests/{requestId}/submit
    method: POST
    data_selector: response
    params: {}
- name: comments
  endpoint:
    path: /travelrequest/v4/expenses/{expenseUuid}/comments
    method: GET
    data_selector: comments
    params:
      expenseUuid: string
      userId: string
- name: expected_expense_comments
  endpoint:
    path: /travelrequest/v4/expenses/{expenseUuid}/comments
    method: GET
    data_selector: comments
    params:
      expenseUuid: string
      userId: string
- name: comments
  endpoint:
    path: /travelrequest/v4/expenses/B5FB8991E390474E875D6FD5BB1FDAF1/comments
    method: GET
    data_selector: comments
    params: {}
- name: comments
  endpoint:
    path: /travelrequest/v4/expenses/{expenseUuid}/comments
    method: GET
    data_selector: comments
    params:
      expenseUuid: string
      userId: string
- name: comments
  endpoint:
    path: /travelrequest/v4/expenses/{expenseId}/comments
    method: GET
    data_selector: ''
- name: allocation
  endpoint:
    path: /travelrequest/v4/requests/{requestUuid}/allocations/{allocationUuid}
    method: PUT
    data_selector: Allocation
    params: {}
- name: allocation
  endpoint:
    path: /travelrequest/v4/requests/{requestId}/allocations/{allocationId}
    method: PUT
    data_selector: records
- name: allocations
  endpoint:
    path: /travelrequest/v4/requests/{requestUuid}/allocations/{allocationUuid}
    method: PUT
    data_selector: Allocation
    params:
      requestUuid: string
      allocationUuid: string
      userId: string
- name: cash_advances
  endpoint:
    path: /travelrequest/v4/cashadvances/{cashAdvanceUuid}
    method: GET
    data_selector: records
    params:
      cashAdvanceUuid: string
- name: allocations
  endpoint:
    path: /travelrequest/v4/requests/{request_id}/allocations/{allocation_id}
    method: PUT
    data_selector: records
- name: userpolicies
  endpoint:
    path: /travelrequest/v4/userpolicies
    method: GET
    data_selector: records
    params:
      userId: required
- name: cash_advance
  endpoint:
    path: /travelrequest/v4/cashadvances/{cashAdvanceUuid}
    method: GET
    data_selector: '[]'
    params:
      cashAdvanceUuid: string
- name: travel_agency
  endpoint:
    path: /travelrequest/v4/travelagencies/{agencyUuid}
    method: GET
    data_selector: ''
- name: userpolicies
  endpoint:
    path: /travelrequest/v4/userpolicies
    method: GET
    data_selector: records
    params:
      userId: required
- name: agency_proposals
  endpoint:
    path: /requests/{requestUuid}/agencyproposals
    method: GET
    data_selector: agency_proposals
    params:
      requestUuid: string
- name: travel_agency
  endpoint:
    path: /travelrequest/v4/travelagencies/{agencyUuid}
    method: GET
    data_selector: href
    params: {}
- name: agency_proposals
  endpoint:
    path: /travelrequest/v4/requests/{requestUuid}/agencyproposals
    method: GET
- name: agency_proposals
  endpoint:
    path: /requests/{requestUuid}/agencyproposals
    method: GET
    data_selector: agency proposals
    params:
      requestUuid: string
- name: agency_proposals
  endpoint:
    path: /requests/{requestUuid}/agencyproposals
    method: GET
    data_selector: agency_proposals
    params:
      requestUuid: string
- name: agency_proposals
  endpoint:
    path: /travelrequest/v4/requests/{requestUuid}/agencyproposals
    method: GET
    data_selector: records
- name: agency_proposals
  endpoint:
    path: /travelrequest/v4/requests/{requestUuid}/agencyproposals
    method: GET
    data_selector: null
    params: {}
- name: agency_proposals
  endpoint:
    path: /requests/{requestUuid}/agencyproposals
    method: GET
    data_selector: agency proposals
- name: agency_proposals
  endpoint:
    path: /agency/proposals
    method: GET
    data_selector: agencyProposalEntries
    params: {}
- name: agency_proposals
  endpoint:
    path: /agency_proposals
    method: GET
    data_selector: proposals
    params: {}
- name: agency_proposals
  endpoint:
    path: /travelrequest/v4/requests/{requestUuid}/agencyproposals
    method: GET
    data_selector: records
- name: agency_proposals
  endpoint:
    path: /api/agency_proposals
    method: GET
    data_selector: agencyProposalEntries
- name: request
  endpoint:
    path: /api/v4/request
    method: GET
    data_selector: requests
- name: agency_proposal
  endpoint:
    path: /agency/proposals
    method: GET
    data_selector: proposals
    params: {}
- name: agency_proposals
  endpoint:
    path: /agency-proposals
    method: GET
- name: request
  endpoint:
    path: /api/request/v4
    method: GET
    data_selector: requests
- name: segment_type
  endpoint:
    path: /segment_type
    method: GET
- name: travel_agency
  endpoint:
    path: /travel_agency
    method: GET
- name: travel_allowance
  endpoint:
    path: /travel_allowance
    method: GET
- name: trip_data
  endpoint:
    path: /trip_data
    method: GET
- name: vendor
  endpoint:
    path: /vendor
    method: GET
- name: agency_proposals
  endpoint:
    path: /agency_proposals
    method: GET
- name: agency_proposal_entry
  endpoint:
    path: /agency_proposal_entry
    method: GET
- name: agency_proposal_segment
  endpoint:
    path: /agency_proposal_segment
    method: GET
- name: agency_proposal_air_segment
  endpoint:
    path: /agency_proposal_air_segment
    method: GET
- name: agency_proposal_rail_segment
  endpoint:
    path: /agency_proposal_rail_segment
    method: GET
- name: agency_proposal_car_segment
  endpoint:
    path: /agency_proposal_car_segment
    method: GET
- name: agency_proposal_hotel_segment
  endpoint:
    path: /agency_proposal_hotel_segment
    method: GET
- name: agency_proposal_misc_segment
  endpoint:
    path: /agency_proposal_misc_segment
    method: GET
- name: upload_receipt
  endpoint:
    path: /api-reference/spend-documents/post-receipt.html
    method: POST
- name: get_receipt
  endpoint:
    path: /api-reference/spend-documents/get-receipt.html
    method: GET
- name: get_receipt
  endpoint:
    path: /spend-documents/v4/receipts/{receiptId}/representations
    method: GET
    data_selector: image byte stream
    params:
      type: display or compliance
- name: get_receipt_by_image_and_company
  endpoint:
    path: /spend-documents/v4/receipts
    method: GET
    data_selector: image byte stream
    params:
      imageId: '{imageId}'
      companyId: '{companyId}'
      type: display or compliance
- name: amount
  endpoint:
    path: /amount
    method: GET
    data_selector: amount
    params: {}
- name: approval_status
  endpoint:
    path: /approval_status
    method: GET
    data_selector: approval_status
    params: {}
- name: cash_advance
  endpoint:
    path: /cash_advance
    method: GET
    data_selector: cash_advance
    params: {}
- name: cash_advance_approval_status
  endpoint:
    path: /cash_advance_approval_status
    method: GET
    data_selector: cash_advance_approval_status
    params: {}
- name: comments
  endpoint:
    path: /comments
    method: GET
    data_selector: comments
    params: {}
- name: employee
  endpoint:
    path: /employee
    method: GET
    data_selector: employee
    params: {}
- name: exceptions
  endpoint:
    path: /exceptions
    method: GET
    data_selector: exceptions
    params: {}
- name: exception_source
  endpoint:
    path: /exception_source
    method: GET
    data_selector: exception_source
    params: {}
- name: extension_of
  endpoint:
    path: /extension_of
    method: GET
    data_selector: extension_of
    params: {}
- name: link
  endpoint:
    path: /link
    method: GET
    data_selector: link
    params: {}
- name: list_of_request
  endpoint:
    path: /list_of_request
    method: GET
    data_selector: list_of_request
    params: {}
- name: list_of_request_policies
  endpoint:
    path: /list_of_request_policies
    method: GET
    data_selector: list_of_request_policies
    params: {}
- name: location
  endpoint:
    path: /location
    method: GET
    data_selector: location
    params: {}
- name: payment_type
  endpoint:
    path: /payment_type
    method: GET
    data_selector: payment_type
    params: {}
- name: resource_link
  endpoint:
    path: /resource_link
    method: GET
    data_selector: resource_link
    params: {}
- name: request_policy
  endpoint:
    path: /request_policy
    method: GET
    data_selector: request_policy
    params: {}
- name: request_type
  endpoint:
    path: /request_type
    method: GET
    data_selector: request_type
    params: {}
- name: expected_expense
  endpoint:
    path: /expected_expense
    method: GET
    data_selector: expected_expense
    params: {}
- name: allocation
  endpoint:
    path: /allocation
    method: GET
    data_selector: allocation
    params: {}
- name: exchange_rate
  endpoint:
    path: /exchange_rate
    method: GET
    data_selector: exchange_rate
    params: {}
- name: expense_type
  endpoint:
    path: /expense_type
    method: GET
    data_selector: expense_type
    params: {}
- name: list_item_field
  endpoint:
    path: /list_item_field
    method: GET
    data_selector: list_item_field
    params: {}
- name: segment_leg
  endpoint:
    path: /segment_leg
    method: GET
    data_selector: segment_leg
    params: {}
- name: receipt_representation
  endpoint:
    path: /spend-documents/v4/receipts/{imageId}/representations
    method: GET
    data_selector: image byte stream
    params:
      type: display
- name: receipt_representation_compliance
  endpoint:
    path: /spend-documents/v4/receipts
    method: GET
    data_selector: image byte stream
    params:
      imageId: 2AB8D2C8078C4E38A5E7F18A6DE5558D
      companyId: 71f74b81-bb57-4c54-8985-5d7c42f6feb1
      type: compliance
- name: Trip Data
  endpoint:
    path: /api/v4/tripdata
    method: GET
    data_selector: tripDetails
- name: Agency proposals
  endpoint:
    path: /api/v4/agencyproposals
    method: GET
    data_selector: proposals
- name: receipt
  endpoint:
    path: /spend-documents/v4/receipts
    method: POST
    data_selector: id
- name: get_receipt
  endpoint:
    path: /spend-documents/v4/receipts/{receiptId}/representations
    method: GET
    data_selector: image byte stream
    params:
      type: display or compliance
- name: get_receipt_by_image_id
  endpoint:
    path: /spend-documents/v4/receipts
    method: GET
    data_selector: image byte stream
    params:
      imageId: '{imageId}'
      companyId: '{companyId}'
      type: display or compliance
- name: itinerary
  endpoint:
    path: /api-reference/travelallowance/v4.travelallowance-itinerary-endpoints.html
    method: GET
    data_selector: ''
    params: {}
- name: calculation_results
  endpoint:
    path: /api-reference/travelallowance/v4.travelallowance-calculationresults-endpoints.html
    method: GET
    data_selector: ''
    params: {}
- name: configuration
  endpoint:
    path: /api-reference/travelallowance/v4.travelallowance-configuration-endpoints.html
    method: GET
    data_selector: ''
    params: {}
- name: itinerary
  endpoint:
    path: /travelallowance/v4/users/{userId}/itineraries
    method: POST
    data_selector: header
    params: {}
- name: receipts
  endpoint:
    path: /spend-documents/v4/receipts
    method: POST
    data_selector: id
- name: itinerary_assignments
  endpoint:
    path: /travelallowance/v4/users/{userId}/itineraries/{itineraryId}/assignments
    method: GET
    data_selector: itineraryPeriodAssignments
    params:
      userId: string
      itineraryId: integer
- name: itinerary_update
  endpoint:
    path: /travelallowance/v4/users/{userId}/itineraries/{itineraryId}
    method: PUT
    data_selector: header
    params:
      userId: string
      itineraryId: integer
- name: itinerary
  endpoint:
    path: /api-reference/travelallowance/v4.travelallowance-itinerary-endpoints.html
    method: GET
    data_selector: Itinerary data
- name: calculation_results
  endpoint:
    path: /api-reference/travelallowance/v4.travelallowance-calculationresults-endpoints.html
    method: GET
    data_selector: Calculation Results
- name: configuration
  endpoint:
    path: /api-reference/travelallowance/v4.travelallowance-configuration-endpoints.html
    method: GET
    data_selector: Travel Allowance Configuration
- name: itinerary_simulation
  endpoint:
    path: /travelallowance/v4/users/{userId}/itinerarySimulation
    method: POST
    data_selector: segments
    params:
      userId: string
- name: itinerary
  endpoint:
    path: /travelallowance/v4/users/{userId}/itineraries
    method: POST
    data_selector: header
    params:
      userId: string
- name: itinerary_delete
  endpoint:
    path: /travelallowance/v4/users/{userId}/itineraries/{itineraryId}
    method: DELETE
    data_selector: null
    params: {}
- name: itinerary_day_properties_retrieve
  endpoint:
    path: /travelallowance/v4/users/{userId}/itineraries/{itineraryId}/assignments
    method: GET
    data_selector: null
    params: {}
- name: itinerary_day_properties_update
  endpoint:
    path: /travelallowance/v4/users/{userId}/itineraries/{itineraryId}/dayProperties
    method: PUT
    data_selector: null
    params: {}
- name: itinerary_assignments_retrieve
  endpoint:
    path: /travelallowance/v4/users/{userId}/itineraries/{itineraryId}/assignments
    method: GET
    data_selector: null
    params: {}
- name: itinerary_assignments_update
  endpoint:
    path: /travelallowance/v4/users/{userId}/itineraries/{itineraryId}/assignments
    method: PUT
    data_selector: null
    params: {}
- name: itinerary_assignments
  endpoint:
    path: /travelallowance/v4/users/{userId}/itineraries/{itineraryId}/assignments
    method: GET
    data_selector: itineraryPeriodAssignments
    params:
      userId: string
      itineraryId: integer
- name: itinerary_update
  endpoint:
    path: /travelallowance/v4/users/{userId}/itineraries/{itineraryId}
    method: PUT
    data_selector: header
    params:
      userId: string
      itineraryId: integer
- name: itinerary
  endpoint:
    path: /itinerary
    method: GET
    data_selector: segmentList
- name: itinerary_simulation
  endpoint:
    path: /itinerary/simulation
    method: POST
    data_selector: segmentList
- name: itinerary_simulation
  endpoint:
    path: /travelallowance/v4/users/{userId}/itinerarySimulation
    method: POST
    data_selector: Itinerary Result Detail
    params:
      userId: string
- name: calculation_results
  endpoint:
    path: /travelallowance/v4/users/{userId}/contexts/{context}/{contextId}/calculationresultdetails
    method: GET
    data_selector: calculationResults
    params:
      itineraryId: string
      userId: uuid
      context: string
      contextId: string
- name: itinerary_day_properties
  endpoint:
    path: /travelallowance/v4/users/{userId}/itineraries/{itineraryId}/dayProperties
    method: PUT
    data_selector: content
    params:
      userId: string
      itineraryId: integer
- name: itinerary_assignments
  endpoint:
    path: /travelallowance/v4/users/{userId}/itineraries/{itineraryId}/assignments
    method: GET
    data_selector: itineraryPeriodAssignments
    params:
      userId: string
      itineraryId: integer
- name: calculation_result_details
  endpoint:
    path: /travelallowance/v4/users/{user_id}/contexts/{context}/calculationresultdetails
    method: GET
    data_selector: itineraryResultDetails
- name: itinerary_derived_data
  endpoint:
    path: /itinerary/derived/data
    method: GET
    data_selector: itineraryData
    params: {}
- name: rate_category_totals_header
  endpoint:
    path: /rate/category/totals/header
    method: GET
    data_selector: rateCategoryTotals
    params: {}
- name: itinerary
  endpoint:
    path: /itinerary
    method: POST
    data_selector: itinerary
- name: itinerary_assignments
  endpoint:
    path: /itinerary/assignments
    method: GET
    data_selector: assignments
- name: itinerary_simulation
  endpoint:
    path: /itinerary/simulate
    method: POST
    data_selector: simulation
- name: configuration_summaries
  endpoint:
    path: /travelallowance/v4/configurationsummaries
    method: GET
    data_selector: content
    params:
      configurationCode: ''
      pageId: ''
- name: calculation_results
  endpoint:
    path: /travelallowance/v4/users/{userId}/contexts/{context}/{contextId}/calculationresultdetails
    method: GET
    data_selector: calculationResults
    params:
      itineraryId: string
      userId: uuid
      context: string
      contextId: string
- name: calculation_result_details
  endpoint:
    path: /travelallowance/v4/users/{userId}/contexts/{context}/calculationresultdetails
    method: GET
    data_selector: itineraryResultDetails
    params: {}
- name: Profile v2
  endpoint:
    path: /api-reference/travel-profile/v2.profile-resource.html
    method: GET
- name: Loyalty Program v1
  endpoint:
    path: /api-reference/travel-profile/v1.loyalty-program-resource.html
    method: POST
- name: Itinerary
  endpoint:
    path: /calculation-results
    method: GET
    data_selector: data
    params: {}
- name: Get Travel Profile
  endpoint:
    path: /profile
    method: GET
    data_selector: ProfileSummary
    params:
      userid_type: Path
      userid_value: Path
- name: Create/Update Travel Profile
  endpoint:
    path: /profile
    method: POST
    data_selector: ProfileSummary
- name: configuration_summary
  endpoint:
    path: /travelallowance/v4/configurationsummaries
    method: GET
    data_selector: content
    params: {}
- name: travel_profile_summary
  endpoint:
    path: /summary
    method: GET
    data_selector: Data.ProfileSummary
    params:
      LastModifiedDate: required
- name: profile
  endpoint:
    path: /profile
    method: GET
    data_selector: ProfileSummary
    params: {}
- name: create_update_profile
  endpoint:
    path: /profile
    method: POST
    data_selector: ProfileSummary
    params: {}
- name: loyalty
  endpoint:
    path: /loyalty
    method: POST
    data_selector: LoyaltyMembershipUpdate
- name: travel_profile_summary
  endpoint:
    path: /api/travelprofile/v2.0/summary
    method: GET
    data_selector: Data.ProfileSummary
    params:
      LastModifiedDate: '2020-01-01T01:00:00'
      Active: '1'
- name: Users
  endpoint:
    path: /profile/v4/Schemas
    method: GET
    data_selector: null
    params: {}
- name: Users
  endpoint:
    path: /profile/v4/Schemas
    method: GET
- name: user
  endpoint:
    path: /Users
    method: PUT
    data_selector: schemas
    params: {}
- name: bulk
  endpoint:
    path: /Bulk
    method: POST
    data_selector: Operations
    params: {}
- name: profile
  endpoint:
    path: /profile/v4/Schemas
    method: GET
    data_selector: schemas
    params: {}
- name: users
  endpoint:
    path: /Users
    method: PUT
- name: bulk
  endpoint:
    path: /Bulk
    method: POST
- name: schemas
  endpoint:
    path: /profile/v4/Schemas
    method: GET
- name: user_profile
  endpoint:
    path: /profile/identity/v4.1/Users/{ID}
    method: GET
- name: user
  endpoint:
    path: /api/v1/users
    method: GET
    data_selector: users
    params: {}
- name: enterprise_user
  endpoint:
    path: /api/v1/enterprise_users
    method: GET
    data_selector: enterprise_users
    params: {}
- name: spend_user
  endpoint:
    path: /api/v1/spend_users
    method: GET
    data_selector: spend_users
    params: {}
- name: user
  endpoint:
    path: /services/data/vXX.X/sobjects/User
    method: GET
    data_selector: records
    params: {}
- name: enterprise_user
  endpoint:
    path: /services/data/vXX.X/sobjects/EnterpriseUser
    method: GET
    data_selector: records
    params: {}
- name: spend_user
  endpoint:
    path: /services/data/vXX.X/sobjects/SpendUser
    method: GET
    data_selector: records
    params: {}
- name: Schemas
  endpoint:
    path: /Schemas/{ID}
    method: GET
    data_selector: attributes
- name: Schemas
  endpoint:
    path: /Schemas/{ID}
    method: GET
- name: Schemas
  endpoint:
    path: /Schemas/{ID}
    method: GET
    data_selector: schemas
    params: {}
- name: Schemas
  endpoint:
    path: /Schemas/{ID}
    method: GET
    data_selector: schemas
    params: {}
- name: schemas
  endpoint:
    path: /profile/identity/v4.1/Schemas/{id}
    method: GET
    data_selector: schemas
    params: {}
- name: Schemas
  endpoint:
    path: /Schemas/{id}
    method: GET
    data_selector: Schemas
- name: Schemas
  endpoint:
    path: /profile/identity/v4.1/Schemas/{id}
    method: GET
    data_selector: schemas
    params: {}
- name: resource_type
  endpoint:
    path: /Users
    method: GET
- name: Schemas
  endpoint:
    path: /Schemas/{id}
    method: GET
    data_selector: schemas
    params:
      id: string
- name: spend_category_codes
  endpoint:
    path: /api/reference/spend-category-codes
    method: GET
    data_selector: codes
    params: {}
- name: attendees
  endpoint:
    path: /expense/attendees
    method: GET
    data_selector: Items
    params: {}
- name: entryattendeeassociations
  endpoint:
    path: /expense/entryattendeeassociations
    method: POST
    data_selector: ''
    params: {}
- name: attendeetypes
  endpoint:
    path: /expense/attendeetypes
    method: GET
    data_selector: Items
    params: {}
- name: eReceipt
  endpoint:
    path: /receipts/v4/users/{UUID}
    method: POST
    data_selector: records
- name: Quick Expense
  endpoint:
    path: /expenses/v1/quick
    method: POST
    data_selector: records
- name: quick_expense
  endpoint:
    path: /quickexpense/v4/users/{UUID}/context/TRAVELER/quickexpenses
    method: POST
    data_selector: mobileEntryKeyUri
    params: {}
- name: Get Reports To Approve
  endpoint:
    path: /api-reference/expense/expense-report/v4.reports.html#get-reports-to-approve
    method: GET
- name: Cost Objects for Approver
  endpoint:
    path: /api-reference/expense/expense-report/v4.workflows.html
    method: GET
- name: expense_report
  endpoint:
    path: /goto/expense-report/{reportID}
    method: GET
    params:
      companyUUID: '{companyUUID}'
      context: '{CONTEXT}'
- name: attend
  endpoint:
    path: /api-reference/expense/attendees/v2.attendees.html
    method: GET
- name: attendee.admin.read
  endpoint:
    path: /api-reference/common/attendees/v4.admin-attendee-types.html
    method: GET
- name: attendee.read
  endpoint:
    path: /api-reference/common/attendees/v4.attendees.html
    method: GET
- name: attendee.write
  endpoint:
    path: /api-reference/common/attendees/v4.attendees.html
    method: GET
- name: attendee.writeonly
  endpoint:
    path: /api-reference/common/attendees/v4.attendees.html
    method: GET
- name: BANK
  endpoint:
    path: /api-reference/expense/expense-report/expense-report-get.html#employeebankaccount-elements
    method: GET
- name: budgetitem.read
  endpoint:
    path: /api-reference/budget/getting-started.html
    method: GET
- name: budgetitem.write
  endpoint:
    path: /api-reference/budget/getting-started.html
    method: GET
- name: cards.account.writeonly
  endpoint:
    path: /api-reference/cards/v4.cards-get-started.html
    method: GET
- name: cards.bulkrequest.read
  endpoint:
    path: /api-reference/cards/v4.cards-get-started.html
    method: GET
- name: cards.transaction.writeonly
  endpoint:
    path: /api-reference/cards/v4.cards-get-started.html
    method: GET
- name: CCARD
  endpoint:
    path: /api-reference/expense/expense-report/company-card-transaction-resource.html
    method: GET
- name: COMPD
  endpoint:
    path: /api-reference/travel-profile/v2.profile-resource.html#General
    method: GET
- name: company.read
  endpoint:
    path: /api-reference/profile/v1.getting-started.html
    method: GET
- name: company.write
  endpoint:
    path: /api-reference/profile/v1.getting-started.html
    method: GET
- name: CONFIG
  endpoint:
    path: /api-reference/expense/expense-report/v1dot1.expense-group-configurations.html
    method: GET
- name: CONREQ
  endpoint:
    path: /api-reference/common/connection-requests/connection-requests-resource.html
    method: GET
- name: EMERG
  endpoint:
    path: /api-reference/travel-profile/v2.profile-resource.html#EmergencyContact
    method: GET
- name: events.topic.read
  endpoint:
    path: /api-reference/ess/v4.event-subscription.html
    method: GET
- name: expense.config.attendeetypes.restricted.read
  endpoint:
    path: https://developer.concur.com/api-reference/expense/expense-config/v4.expense.config.html
    method: GET
- name: expense.config.groups.restricted.read
  endpoint:
    path: https://developer.concur.com/api-reference/expense/expense-config/v4.expense.config.html
    method: GET
- name: expense.config.policies.restricted.read
  endpoint:
    path: /api-reference/expense/expense-config/v4.expense.config.html
    method: GET
- name: expense.config.expensetypes.restricted.read
  endpoint:
    path: /api-reference/expense/expense-config/v4.expense.config.html
    method: GET
- name: expense.config.paymenttypes.restricted.read
  endpoint:
    path: /api-reference/expense/expense-config/v4.expense.config.html
    method: GET
- name: expense.exchangerate.writeonly
  endpoint:
    path: /api-reference/expense/exchange-rate/v4.exchange-rate.html
    method: GET
- name: expense.report.read
  endpoint:
    path: /api-reference/expense/expense-report/v4.comments.html
    method: GET
- name: expense.report.readwrite
  endpoint:
    path: /api-reference/expense/expense-report/v4.comments.html
    method: GET
- name: expense.report.tax.readwrite
  endpoint:
    path: /api-reference/expense/expense-report/v4.expense-tax.html
    method: GET
- name: expense.report.workflowstatus.write
  endpoint:
    path: /api-reference/expense/expense-report/v4.comments.html
    method: GET
- name: EXPRPT
  endpoint:
    path: /api-reference/expense/allocations/expense-allocations.html
    method: GET
- name: EXTRCT
  endpoint:
    path: /api-reference/common/extracts/v1.extracts.html
    method: GET
- name: fiscalcalendar.read
  endpoint:
    path: /api-reference/budget/getting-started.html
    method: GET
- name: fiscalcalendar.write
  endpoint:
    path: /api-reference/budget/getting-started.html
    method: GET
- name: FISVC
  endpoint:
    path: /api-reference/financial-integration/v4.financial-integration.html
    method: GET
- name: identity.user.core.read
  endpoint:
    path: /api-reference/profile/v4.identity.html
    method: GET
- name: identity.user.coresensitive.read
  endpoint:
    path: /api-reference/profile/v4.identity.html
    method: GET
- name: identity.user.emails.verified.writeonly
  endpoint:
    path: /api-reference/profile/v4.identity.html
    method: GET
- name: identity.user.enterprise.read
  endpoint:
    path: /api-reference/profile/v4.identity.html
    method: GET
- name: identity.user.coreenterprise.writeonly
  endpoint:
    path: /api-reference/profile/v4.identity.html
    method: GET
- name: identity.user.externalID.writeonly
  endpoint:
    path: /api-reference/profile/v4.identity.html
    method: GET
- name: identity.user.ids.read
  endpoint:
    path: /api-reference/profile/v4.identity.html
    method: GET
- name: identity.user.sap.read
  endpoint:
    path: /api-reference/profile/v4.identity.html
    method: GET
- name: identity.user.sap.writeonly
  endpoint:
    path: /api-reference/profile/v4.identity.html
    method: GET
- name: event_topics
  endpoint:
    path: /events/v4/topics
    method: GET
    data_selector: ''
    params: {}
- name: subscriptions
  endpoint:
    path: /events/v4/subscriptions
    method: GET
    data_selector: ''
    params: {}
- name: subscription_create
  endpoint:
    path: /v4/subscriptions/webhook
    method: PUT
    data_selector: ''
    params: {}
- name: subscription_delete
  endpoint:
    path: /v4/subscriptions/{subscription_id}
    method: DELETE
    data_selector: ''
    params: {}
- name: attendees
  endpoint:
    path: /expense/attendees
    method: GET
    data_selector: Items
- name: entryattendeeassociations
  endpoint:
    path: /expense/entryattendeeassociations
    method: POST
    data_selector: null
- name: attendeetypes
  endpoint:
    path: /expense/attendeetypes
    method: GET
    data_selector: Items
- name: financial_transactions
  endpoint:
    path: /financial/transactions
    method: GET
- name: financial_transaction_acknowledgements
  endpoint:
    path: /financial/transactions/acknowledge
    method: POST
- name: financial_transaction_confirmations
  endpoint:
    path: /financial/transactions/confirm
    method: POST
- name: financial_payment_confirmations
  endpoint:
    path: /financial/payments/confirm
    method: POST
- name: Receipt
  endpoint:
    path: /api/receipts
    method: POST
    data_selector: receipt_data
- name: Quick Expense
  endpoint:
    path: /api/quick-expense
    method: POST
    data_selector: quick_expense_data
- name: Extracts
  endpoint:
    path: /api-reference/common/extracts/v1.extracts.html
    method: GET
    data_selector: records
    params: {}
- name: Payment Batches
  endpoint:
    path: /api-reference/expense/payment-batch/v1.payment-batches.html
    method: GET
    data_selector: records
    params: {}
- name: Vendor
  endpoint:
    path: /api-reference/invoice/v3.vendor.html#put
    method: PUT
- name: Payment Request
  endpoint:
    path: /api-reference/invoice/v3.payment-request.html#get
    method: GET
- name: Invoice
  endpoint:
    path: /api-reference/invoice/v1.invoice-pay.html
    method: GET
- name: quick_expense
  endpoint:
    path: /quickexpense/v4/users/{UUID}/context/TRAVELER/quickexpenses
    method: POST
    data_selector: mobileEntryKeyUri
    params: {}
- name: Users
  endpoint:
    path: /profile/identity/v4.1/Users/.search
    method: POST
    data_selector: Resources
    params:
      schemas: urn:ietf:params:scim:api:messages:concur:2.0:SearchRequest
- name: event_subscription
  endpoint:
    path: /event-topics/expense/v4.expense-events.html
    method: GET
- name: get_reports_to_approve
  endpoint:
    path: /api-reference/expense/expense-report/v4.reports.html#get-reports-to-approve
    method: GET
- name: cost_objects_for_approver
  endpoint:
    path: /api-reference/expense/expense-report/v4.workflows.html
    method: GET
- name: Users
  endpoint:
    path: /profile/identity/v4.1/Users/.search
    method: POST
    data_selector: Resources
    params:
      count: 100
- name: expense_report
  endpoint:
    path: /goto/expense-report/{reportID}
    method: GET
    data_selector: null
    params:
      companyUUID: '{companyUUID}'
      context: '{CONTEXT}'
- name: deeplink_url
  endpoint:
    path: /goto/travel-request/{requestUuid}
    method: GET
    data_selector: request
    params:
      companyUUID: query
      context: query
- name: event_topics
  endpoint:
    path: /events/v4/topics
    method: GET
    data_selector: topics
- name: subscriptions
  endpoint:
    path: /events/v4/subscriptions
    method: GET
    data_selector: subscriptions
- name: subscription_creation
  endpoint:
    path: /v4/subscriptions/webhook
    method: PUT
    data_selector: message
- name: itinerary
  endpoint:
    path: /api-guides/tmc/itinerary-v1-guide.html
    method: POST
- name: profile
  endpoint:
    path: /api-guides/tmc/profile-v2-guide.html
    method: POST
- name: receipts
  endpoint:
    path: /api-guides/tmc/receipts-v4-guide.html
    method: POST
- name: request
  endpoint:
    path: /api-guides/tmc/request-v4-guide.html
    method: POST
- name: users
  endpoint:
    path: /users
    method: GET
    data_selector: Items
    params:
      isactive: 'true'
- name: itinerary
  endpoint:
    path: /api/travel/trip/v1.1/
    method: POST
    data_selector: Itinerary
    params:
      userid_type: login_id
      userid_value: user@domain.com
- name: Extracts v1 API ERP Integration
  endpoint:
    path: /api-reference/common/extracts/v1.extracts.html#erp-integration
    method: GET
- name: Payment Batches v1 API ERP Integration
  endpoint:
    path: /api-reference/expense/payment-batch/v1.payment-batches.html#erp-integration
    method: GET
- name: Image v1 API
  endpoint:
    path: /api-reference/image/v1.image.html#get-image-url
    method: GET
- name: Vendor Update
  endpoint:
    path: /api-reference/invoice/v3.vendor.html#put
    method: PUT
- name: Payment Request
  endpoint:
    path: /api-reference/invoice/v3.payment-request.html#get
    method: GET
- name: Updating a payment with status
  endpoint:
    path: /api-reference/invoice/v4.invoice-pay.html#schema-payment-update
    method: PATCH
- name: update_itinerary
  endpoint:
    path: /trip/v1.1/
    method: POST
    data_selector: Itinerary
    params: {}
- name: cancel_itinerary
  endpoint:
    path: /trip/v1.1/cancel
    method: POST
    data_selector: Message
    params: {}
- name: retrieve_trip_summaries_by_date
  endpoint:
    path: /trip/v1.1/
    method: GET
    data_selector: ItineraryInfoList
    params:
      userid_type: login
      userid_value: ALL
      lastModifiedDate: YYYY-MM-DDT00:00:00
      includeMetadata: 'true'
      ItemsPerPage: 100
      Page: 1
- name: retrieve_trip_summaries_by_traveler
  endpoint:
    path: /trip/v1.1/
    method: GET
    data_selector: ItineraryInfoList
    params:
      userid_type: login
      userid_value: logindID@domain.com
      lastModifiedDate: YYYY-MM-DDT00:00:00
      includeMetadata: 'true'
      ItemsPerPage: 10
      Page: 1
- name: retrieve_trip_details
  endpoint:
    path: /trip/v1.1/{tripid}
    method: GET
    data_selector: Itinerary
    params: {}
- name: users_search
  endpoint:
    path: /profile/identity/v4.1/Users/.search
    method: POST
    data_selector: Resources
    params:
      schemas: urn:ietf:params:scim:api:messages:concur:2.0:SearchRequest
- name: travel_profile_summary
  endpoint:
    path: /api/travelprofile/v2.0/summary
    method: GET
    data_selector: TravelProfileResponseMessage
    params:
      Status: Active
      userid_type: login
      userid_value: ALL
      includeMetadata: 'true'
- name: travel_profile
  endpoint:
    path: /api/travelprofile/v2.0/profile
    method: GET
    data_selector: TravelProfileResponseMessage
    params:
      userid_type: login
- name: Users
  endpoint:
    path: /Users/.search
    method: POST
    data_selector: Resources
    params:
      count: 100
- name: deeplink_url
  endpoint:
    path: /goto/travel-request/{requestUuid}
    method: GET
    data_selector: request
    params:
      companyUUID: string
      context: string
- name: Travel Itinerary
  endpoint:
    path: /api-guides/travel/get-itinerary.html
    method: POST
    data_selector: itineraries
    params: {}
- name: user_information
  endpoint:
    path: /users
    method: GET
    data_selector: Items
- name: itinerary
  endpoint:
    path: /api/travelprofile/v2.0/profile
    method: GET
- name: itinerary
  endpoint:
    path: /api/travel/trip/v1.1/
    method: POST
    data_selector: Itinerary
    params:
      userid_type: login_id
      userid_value: user@domain.com
- name: update_itinerary
  endpoint:
    path: /api/travel/trip/v1.1/
    method: POST
- name: cancel_itinerary
  endpoint:
    path: /api/travel/trip/v1.1/cancel
    method: POST
- name: retrieve_trip_summaries_by_date
  endpoint:
    path: /api/travel/trip/v1.1/
    method: GET
    params:
      ItemsPerPage: 100
      Page: 1
- name: retrieve_trip_summaries_by_traveler
  endpoint:
    path: /api/travel/trip/v1.1/
    method: GET
    params:
      ItemsPerPage: 10
      Page: 1
- name: retrieve_trip_details
  endpoint:
    path: /api/travel/trip/v1.1/{tripid}
    method: GET
- name: travel_profile_summary
  endpoint:
    path: /api/travelprofile/v2.0/summary
    method: GET
    data_selector: TravelProfileResponseMessage
    params:
      Status: Active
      userid_type: login
      userid_value: ALL
      includeMetadata: 'true'
- name: travel_profile
  endpoint:
    path: /api/travelprofile/v2.0/profile
    method: POST
    data_selector: ProfileResponse
- name: profile
  endpoint:
    path: /api/travelprofile/v2.0/profile
    method: POST
- name: form_of_payment
  endpoint:
    path: /api/travelprofile/v2.0/fop
    method: POST
- name: create_receipt
  endpoint:
    path: /receipts/v4/users/{uuid}
    method: POST
    data_selector: null
- name: retrieve_receipts
  endpoint:
    path: /receipts/v4/users/{uuid}
    method: GET
    data_selector: null
- name: receipt
  endpoint:
    path: /receipts/v4/{receiptID}
    method: GET
    data_selector: stateModifiedAt
    params: {}
- name: image_only_receipt
  endpoint:
    path: /receipts/v4/{receiptID}/image
    method: GET
    data_selector: ''
    params: {}
- name: travel_request
  endpoint:
    path: /travelrequest/v4/requests
    method: GET
    data_selector: data
    params:
      view: SUBMITTED
- name: travel_profile
  endpoint:
    path: /api/travelprofile/v2.0/profile
    method: GET
    data_selector: ProfileResponse
- name: travel_expenses
  endpoint:
    path: /travelrequest/v4/expenses
    method: GET
    data_selector: expenses
- name: expense_type_details
  endpoint:
    path: /expenseconfig/v4/users/613cd9cd-9145-4806-ae6c-bfc7da54c9ab/context/TRAVELER/expensetypes/{ExpenseType_id}
    method: GET
    data_selector: expenseTypeId
    params: {}
- name: proposals
  endpoint:
    path: /proposals
    method: POST
    data_selector: data
    params:
      ProposalBatchSize: 3
      ProposalSequenceIndex: null
- name: flight_search
  endpoint:
    path: /goto/air-shop
    method: GET
    data_selector: search_results
    params:
      departurelocation: string
      departuredate: YYYY-MM-DD
      departuretime: hh:mm
      returnlocation: string
      returndate: YYYY-MM-DD
      returntime: hh:mm
      cabintype: string
      companyuuid: UUID
- name: car_search
  endpoint:
    path: /goto/car-shop
    method: GET
    data_selector: search_results
    params:
      pickuplocation: string
      pickupdate: YYYY-MM-DD
      pickuptime: hh:mm
      dropofflocation: string
      dropoffdate: YYYY-MM-DD
      dropofftime: hh:mm
      companyuuid: UUID
- name: hotel_search
  endpoint:
    path: /goto/hotel-shop
    method: GET
    params:
      checkindate: YYYY-MM-DD
      checkoutdate: YYYY-MM-DD
      location: string
      locationsource: string
      distance: integer
      unit: string
      companyuuid: UUID
- name: add_hotel_to_trip
  endpoint:
    path: /goto/hotel-shop
    method: GET
    params:
      tripid: UUID
      location: string
      locationsource: string
      distance: integer
      unit: string
      companyuuid: UUID
- name: train_search
  endpoint:
    path: /goto/rail-shop
    method: GET
    params:
      departurelocation: string
      departuredate: YYYY-MM-DD
      departuretime: hh:mm
      returnlocation: string
      returndate: YYYY-MM-DD
      returntime: hh:mm
      companyuuid: UUID
- name: itinerary
  endpoint:
    path: /goto/trip/{tripid}
    method: GET
    params:
      tripid: UUID
      companyuuid: UUID
- name: flight_search
  endpoint:
    path: /goto/air-shop
    method: GET
    data_selector: search_results
    params:
      departurelocation: string
      departuredate: YYYY-MM-DD
      departuretime: hh:mm
      returnlocation: string
      returndate: YYYY-MM-DD
      returntime: hh:mm
      cabintype: string
      companyuuid: UUID
- name: car_search
  endpoint:
    path: /goto/car-shop
    method: GET
    data_selector: search_results
    params:
      pickuplocation: string
      pickupdate: YYYY-MM-DD
      pickuptime: hh:mm
      dropofflocation: string
      dropoffdate: YYYY-MM-DD
      dropofftime: hh:mm
      companyuuid: UUID
- name: itinerary_lookup
  endpoint:
    path: /goto/trip/{tripid}
    method: GET
    data_selector: itinerary_details
    params:
      tripid: UUID
      companyuuid: UUID
- name: Event Subscription Service
  endpoint:
    path: /api-reference/ess/v4.event-subscription.html
    method: GET
- name: Itinerary V4 API
  endpoint:
    path: /api-reference/travel/itinerary-v4/v4.itinerary.html
    method: GET
- name: Identity V4 API
  endpoint:
    path: /profile/identity/v4/users/{userId}
    method: GET
- name: itinerary
  endpoint:
    path: /travel/trip/v1.1
    method: GET
    data_selector: tripSummaries
- name: trip_details
  endpoint:
    path: /travel/trip/v1.1/{TripID}
    method: GET
    data_selector: itinerary
- name: hotel_search
  endpoint:
    path: /goto/hotel-shop
    method: GET
    data_selector: results
    params:
      checkindate: ''
      checkoutdate: ''
      location: ''
      locationsource: ''
      distance: '5'
      unit: mi
      companyuuid: ''
- name: add_hotel_to_existing_trip
  endpoint:
    path: /goto/hotel-shop
    method: GET
    data_selector: results
    params:
      tripid: ''
      location: ''
      locationsource: ''
      distance: '5'
      unit: mi
      companyuuid: ''
- name: train_search
  endpoint:
    path: /goto/rail-shop
    method: GET
    data_selector: results
    params:
      departurelocation: ''
      departuredate: ''
      departuretime: ''
      returnlocation: ''
      returndate: ''
      returntime: ''
      companyuuid: ''
- name: itinerary
  endpoint:
    path: /goto/trip/{tripid}
    method: GET
    data_selector: results
    params:
      companyuuid: ''
- name: company_notification_subscription
  endpoint:
    path: /company/v1.0/subscribe
    method: POST
    params:
      type: itinerary
- name: unsubscribe
  endpoint:
    path: /company/v1.0/unsubscribe
    method: GET
    params:
      type: itinerary
- name: itinerary
  endpoint:
    path: /api/travel/trip/v1.1
    method: GET
- name: itinerary
  endpoint:
    path: /api/travel/trip/v1.1/
    method: GET
    data_selector: Data.ItineraryInfoList
    params:
      createdAfterDate: 2012/02/01
      includeMetadata: 'true'
      ItemsPerPage: '2'
      Page: '1'
- name: Itinerary
  endpoint:
    path: /api/travel/itinerary/v4
    method: GET
- name: subscribe
  endpoint:
    path: /company/v1.0/subscribe
    method: POST
    params:
      type: itinerary
- name: unsubscribe
  endpoint:
    path: /company/v1.0/unsubscribe
    method: GET
    params:
      type: itinerary
- name: itinerary
  endpoint:
    path: /travel/trip/v1.1/
    method: GET
    data_selector: Data.ItineraryInfoList.ItineraryInfo
    params:
      createdAfterDate: 2012/02/01
      includeMetadata: 'true'
      ItemsPerPage: 2
      Page: 1
- name: expense_report
  endpoint:
    path: /api-reference/expense/expense-report/v3.reports.html
    method: GET
    data_selector: reports
    params:
      paymentStatusCode: P_PAID
      paidDateBefore: '2018-01-27'
      paidDateAfter: '2018-01-25'
- name: invoice
  endpoint:
    path: /api-reference/invoice/v3.payment-request-digest.html
    method: GET
    data_selector: invoices
    params:
      extractedDateBefore: '2018-01-27'
      extractedDateAfter: '2018-01-25'
- name: Itinerary
  endpoint:
    path: /api-reference/travel/itinerary-v4/v4.itinerary.html
    method: GET
- name: Expense Report
  endpoint:
    path: /api-reference/expense/expense-report/v3.reports.html
    method: GET
    data_selector: reports
    params:
      paymentStatusCode: P_PAID
      paidDateBefore: '2018-01-27'
      paidDateAfter: '2018-01-25'
- name: Invoice
  endpoint:
    path: /api-reference/invoice/v3.payment-request-digest.html
    method: GET
    data_selector: invoices
    params:
      extractedDateBefore: '2018-01-27'
      extractedDateAfter: '2018-01-25'
- name: common_lists
  endpoint:
    path: /common/lists
    method: GET
    data_selector: Items
    params:
      limit: 25
      offset: ''
- name: create_list
  endpoint:
    path: /common/lists
    method: POST
    data_selector: ID
    params: {}
- name: get_list_by_id
  endpoint:
    path: /common/lists/{id}
    method: GET
    data_selector: ID
    params:
      id: ''
- name: update_list
  endpoint:
    path: /common/lists/{id}
    method: PUT
    data_selector: ''
    params:
      id: ''
- name: allocations
  endpoint:
    path: /expense/allocations
    method: GET
    data_selector: Items
    params:
      limit: '25'
      offset: '0'
- name: allocation_by_id
  endpoint:
    path: /expense/allocations/{id}
    method: GET
    data_selector: Items
- name: allocation
  endpoint:
    path: /api/v3.0/allocations/{id}
    method: GET
    data_selector: records
    params:
      user: string
- name: common_lists
  endpoint:
    path: /common/lists
    method: GET
    data_selector: Items
    params:
      limit: 25
      offset: ''
- name: create_list
  endpoint:
    path: /common/lists
    method: POST
    data_selector: ID
    params: {}
- name: get_list_by_id
  endpoint:
    path: /common/lists/{id}
    method: GET
    data_selector: ID
    params: {}
- name: update_list
  endpoint:
    path: /common/lists/{id}
    method: PUT
    data_selector: ''
    params: {}
- name: digital_tax_invoices
  endpoint:
    path: /expense/digitaltaxinvoices
    method: GET
    data_selector: Items
    params:
      limit: '25'
- name: single_digital_tax_invoice
  endpoint:
    path: /expense/digitaltaxinvoices/{id}
    method: GET
    data_selector: AccountID
    params: {}
- name: update_digital_tax_invoice
  endpoint:
    path: /expense/digitaltaxinvoices/{id}
    method: PUT
    data_selector: Void
    params: {}
- name: allocations
  endpoint:
    path: /expense/allocations
    method: GET
    data_selector: Items
    params:
      limit: '25'
      offset: ''
      reportID: ''
      entryID: ''
      itemizationID: ''
      user: ''
- name: allocation_by_id
  endpoint:
    path: /expense/allocations/{id}
    method: GET
    data_selector: Items
    params: {}
- name: allocation
  endpoint:
    path: /api/v3.0/allocations/{id}
    method: GET
    data_selector: records
    params:
      user: string
- name: entries
  endpoint:
    path: /expense/entries
    method: GET
    data_selector: Items
    params: {}
- name: digital_tax_invoices
  endpoint:
    path: /expense/digitaltaxinvoices
    method: GET
    data_selector: Items
    params:
      limit: '25'
- name: single_digital_tax_invoice
  endpoint:
    path: /expense/digitaltaxinvoices/{id}
    method: GET
    data_selector: AccountID
    params: {}
- name: update_digital_tax_invoice
  endpoint:
    path: /expense/digitaltaxinvoices/{id}
    method: PUT
    data_selector: Void
    params: {}
- name: expense_entry
  endpoint:
    path: /expense/entries
    method: GET
    data_selector: Items
    params:
      reportID: ''
      paymentTypeID: ''
      batchID: ''
      isBillable: 'true'
      hasAttendees: 'true'
      hasVAT: 'true'
      expenseTypeCode: ''
      attendeeID: ''
      offset: ''
      limit: ''
- name: expense_entries
  endpoint:
    path: /expense/entries/{id}
    method: GET
    data_selector: records
    params:
      user: string
- name: entries
  endpoint:
    path: /expense/entries
    method: GET
    data_selector: Items
- name: expense_entries
  endpoint:
    path: /expense/entries
    method: GET
    data_selector: Items
    params:
      limit: '25'
      isBillable: 'true'
      hasAttendees: 'true'
      hasVAT: 'true'
- name: expense_entry
  endpoint:
    path: /expense/entries/{id}
    method: PUT
- name: expense_entries
  endpoint:
    path: /expense/entries/{id}
    method: GET
    data_selector: records
    params: {}
- name: entries
  endpoint:
    path: /entries
    method: PUT
    data_selector: records
    params:
      user: string
- name: expense_entry
  endpoint:
    path: /expense/entries/{id}
    method: PUT
    data_selector: '{}'
    params:
      id: string
      user: string
- name: entry_attendee_associations
  endpoint:
    path: /expense/entryattendeeassociations
    method: GET
    data_selector: Items
    params:
      limit: 25
- name: entry_attendee_association
  endpoint:
    path: /expense/entryattendeeassociations/{id}
    method: GET
    data_selector: Items
    params: {}
- name: expense_entry
  endpoint:
    path: /api/v3.0/entries
    method: PUT
    data_selector: entries
    params:
      user: string
- name: expense_itemizations
  endpoint:
    path: /expense/itemizations
    method: GET
- name: entry_attendee_associations
  endpoint:
    path: /expense/entryattendeeassociations
    method: GET
    data_selector: Items
    params:
      limit: 25
- name: entry_attendee_association
  endpoint:
    path: /expense/entryattendeeassociations/{id}
    method: GET
    data_selector: Items
    params: {}
- name: itemizations
  endpoint:
    path: /expense/itemizations
    method: GET
    data_selector: Items
- name: expense_itemizations
  endpoint:
    path: /expense/itemizations
    method: GET
    data_selector: Items
    params:
      reportID: ''
      entryID: ''
      expenseTypeCode: ''
      offset: ''
      limit: ''
      user: ''
- name: create_expense_itemization
  endpoint:
    path: /expense/itemizations
    method: POST
    data_selector: ID
    params:
      content: application/json
- name: delete_expense_itemization
  endpoint:
    path: /expense/itemizations/{id}
    method: DELETE
    data_selector: ''
    params: {}
- name: expense_itemizations
  endpoint:
    path: /expense/itemizations
    method: GET
    data_selector: Items
    params:
      limit: 25
- name: create_expense_itemization
  endpoint:
    path: /expense/itemizations
    method: POST
    data_selector: CreateResponse
- name: delete_expense_itemization
  endpoint:
    path: /expense/itemizations/{id}
    method: DELETE
    data_selector: Void
- name: expense_itemization
  endpoint:
    path: /expense/itemizations/{id}
    method: GET
    data_selector: ItemizationGet
    params:
      id: string
      user: string
- name: update_expense_itemization
  endpoint:
    path: /expense/itemizations/{id}
    method: PUT
    data_selector: Void
    params:
      id: string
- name: expense_itemization
  endpoint:
    path: /expense/itemizations/{id}
    method: GET
    data_selector: ItemizationGet
    params:
      id: path
      user: query
- name: update_expense_itemization
  endpoint:
    path: /expense/itemizations/{id}
    method: PUT
    data_selector: Void
    params:
      id: path
- name: itemization
  endpoint:
    path: /api/v3.0/itemization
    method: PUT
    data_selector: itemization
    params:
      user: string
- name: itemization
  endpoint:
    path: /api/v3.0/itemizations/{id}
    method: PUT
    data_selector: itemization
    params:
      user: string
- name: latest_bookings
  endpoint:
    path: /insights/latestbookings/
    method: GET
    data_selector: LatestBooking
    params:
      user: string
- name: latest_bookings
  endpoint:
    path: /insights/latestbookings/
    method: GET
    data_selector: LatestBooking
    params:
      user: ''
- name: invoice_localizeddata
  endpoint:
    path: /invoice/localizeddata
    method: GET
    data_selector: LocalizationData
    params: {}
- name: invoice_localizeddata
  endpoint:
    path: /invoice/localizeddata
    method: GET
    data_selector: LocalizationData
    params: {}
- name: locations
  endpoint:
    path: /common/locations
    method: GET
    data_selector: Items
    params:
      limit: 25
- name: location_by_id
  endpoint:
    path: /common/locations/{id}
    method: GET
    data_selector: Location
    params: {}
- name: locations
  endpoint:
    path: /common/locations
    method: GET
    data_selector: Items
    params:
      limit: 25
- name: location_by_id
  endpoint:
    path: /common/locations/{id}
    method: GET
    data_selector: Location
    params: {}
- name: opportunities
  endpoint:
    path: /insights/opportunities
    method: GET
    data_selector: Items
    params: {}
- name: payment_request
  endpoint:
    path: /invoice/paymentrequest/{id}
    method: GET
    data_selector: PaymentRequest
    params: {}
- name: opportunities
  endpoint:
    path: /insights/opportunities
    method: GET
    data_selector: Items
    params:
      tripId: ''
      opportunityType: ''
      fromUtc: ''
      toUtc: ''
- name: payment_request
  endpoint:
    path: /invoice/paymentrequest
    method: POST
    data_selector: CreateResponse
    params: {}
- name: paymentRequest
  endpoint:
    path: /paymentRequest
    method: POST
    data_selector: PaymentRequest
    params: {}
- name: payment_request
  endpoint:
    path: /invoice/paymentrequest/{id}
    method: GET
    data_selector: PaymentRequest
- name: payment_request
  endpoint:
    path: /invoice/paymentrequest
    method: POST
    data_selector: CreateResponse
- name: Titles
  endpoint:
    path: /titles
    method: GET
    data_selector: records
    params: {}
- name: PaymentRequest
  endpoint:
    path: /payment/requests
    method: POST
    data_selector: PaymentRequest
    params: {}
- name: payment_request
  endpoint:
    path: /invoice/paymentrequest
    method: PUT
- name: PaymentRequest
  endpoint:
    path: /paymentRequest
    method: POST
    data_selector: PaymentRequest
    params: {}
- name: paymentRequest
  endpoint:
    path: /paymentRequest
    method: PUT
    data_selector: PaymentRequest
    params: {}
- name: invoices
  endpoint:
    path: /invoices
    method: GET
    data_selector: records
- name: invoice
  endpoint:
    path: /services/data/vXX.X/sobjects/Invoice
    method: GET
    data_selector: records
    params: {}
- name: payment_request_digest
  endpoint:
    path: /invoice/paymentrequestdigests/{id}
    method: GET
    data_selector: Items
    params: {}
- name: payment_request_digests
  endpoint:
    path: /invoice/paymentrequestdigests
    method: GET
    data_selector: Items
    params: {}
- name: payment_request_digest
  endpoint:
    path: /invoice/paymentrequestdigests/{id}
    method: GET
- name: payment_request_digests
  endpoint:
    path: /invoice/paymentrequestdigests
    method: GET
- name: purchase_order_receipts
  endpoint:
    path: /invoice/purchaseorderreceipts
    method: GET
    data_selector: Items
    params: {}
- name: create_purchase_order_receipt
  endpoint:
    path: /invoice/purchaseorderreceipts
    method: POST
    data_selector: PurchaseOrderReceiptResult
    params: {}
- name: update_purchase_order_receipt
  endpoint:
    path: /invoice/purchaseorderreceipts
    method: PUT
    data_selector: PurchaseOrderReceiptResult
    params: {}
- name: delete_purchase_order_receipt
  endpoint:
    path: /invoice/purchaseorderreceipts
    method: DELETE
    data_selector: Void
    params: {}
- name: purchase_order_receipts
  endpoint:
    path: /invoice/purchaseorderreceipts
    method: GET
    data_selector: Items
- name: purchase_orders
  endpoint:
    path: /invoice/purchaseorders
    method: POST
    data_selector: PurchaseOrderResult
    params: {}
- name: purchase_order
  endpoint:
    path: /purchaseOrder
    method: POST
    data_selector: purchaseOrder
- name: purchase_order
  endpoint:
    path: /purchase_orders
    method: GET
    data_selector: records
- name: purchase_orders
  endpoint:
    path: /invoice/purchaseorders
    method: POST
    data_selector: PurchaseOrderResult
    params: {}
- name: purchaseorders
  endpoint:
    path: /invoice/purchaseorders
    method: PUT
- name: purchase_order
  endpoint:
    path: /purchase_order
    method: POST
    data_selector: PurchaseOrder
    params: {}
- name: purchase_order
  endpoint:
    path: /purchaseOrder
    method: POST
    data_selector: purchaseOrder
    params: {}
- name: purchase_order
  endpoint:
    path: /purchase_order
    method: GET
    data_selector: records
- name: purchase_order
  endpoint:
    path: /purchase_order
    method: GET
    data_selector: records
- name: purchase_order
  endpoint:
    path: /invoice/purchaseorders/{id}
    method: GET
- name: purchaseOrder
  endpoint:
    path: /purchaseOrder
    method: POST
    data_selector: purchaseOrder
    params: {}
- name: purchase_order
  endpoint:
    path: /api/v3.0/purchase_orders/{id}
    method: GET
    data_selector: records
    params:
      id: ''
- name: purchase_order
  endpoint:
    path: /purchase_order
    method: GET
    data_selector: records
    params: {}
- name: purchase_order
  endpoint:
    path: /invoice/purchaseorders/{id}
    method: GET
    data_selector: PurchaseOrder
    params: {}
- name: purchase_order
  endpoint:
    path: /api/v3.0/purchase_orders/{id}
    method: GET
    data_selector: records
    params:
      id: ''
- name: receipt_images
  endpoint:
    path: /expense/receiptimages
    method: GET
    data_selector: Items
    params:
      limit: '25'
- name: create_receipt_image
  endpoint:
    path: /expense/receiptimages
    method: POST
    data_selector: ID
    params: {}
- name: delete_receipt_image
  endpoint:
    path: /expense/receiptimages/{id}
    method: DELETE
    data_selector: Void
    params: {}
- name: get_receipt_image
  endpoint:
    path: /expense/receiptimages/{id}
    method: GET
    data_selector: ID
    params: {}
- name: append_receipt_image
  endpoint:
    path: /expense/receiptimages/{id}
    method: PUT
    data_selector: Void
    params: {}
- name: expense_reports
  endpoint:
    path: /expense/reports
    method: GET
    data_selector: Items
    params: {}
- name: receipt_images
  endpoint:
    path: /expense/receiptimages
    method: GET
    data_selector: Items
    params:
      limit: '25'
- name: create_receipt_image
  endpoint:
    path: /expense/receiptimages
    method: POST
    data_selector: ID
    params: {}
- name: delete_receipt_image
  endpoint:
    path: /expense/receiptimages/{id}
    method: DELETE
    data_selector: null
    params:
      id: ''
- name: get_receipt_image
  endpoint:
    path: /expense/receiptimages/{id}
    method: GET
    data_selector: URI
    params:
      id: ''
- name: append_receipt_image
  endpoint:
    path: /expense/receiptimages/{id}
    method: PUT
    data_selector: null
    params:
      id: ''
- endpoint:
    params:
      offset: ''
      limit: ''
      user: ''
      approvalStatusCode: ''
      paymentStatusCode: ''
      currencyCode: ''
      paymentType: ''
      reimbursementMethod: ''
      approverLoginID: ''
      expenseTypeCode: ''
      attendeeTypeCode: ''
      countryCode: ''
      batchID: ''
      vendorName: ''
      hasVAT: 'true'
      hasImages: 'true'
      hasAttendees: 'true'
      hasBillableExpenses: 'true'
      isTestUser: 'true'
      expenseGroupConfigID: ''
      entryTransactionDateBefore: ''
      entryTransactionDateAfter: ''
      createDateBefore: ''
      createDateAfter: ''
      userDefinedDateBefore: ''
      userDefinedDateAfter: ''
      submitDateBefore: ''
      submitDateAfter: ''
      processingPaymentDateBefore: ''
      processingPaymentDateAfter: ''
      paidDateBefore: ''
      paidDateAfter: ''
      modifiedDateBefore: ''
      modifiedDateAfter: ''
- name: expense_reports
  endpoint:
    path: /expense/reports
    method: GET
    data_selector: Items
    params: {}
- name: update_report
  endpoint:
    path: /expense/reports/{id}
    method: PUT
- name: sales_tax_validation_request
  endpoint:
    path: /invoice/salestaxvalidationrequest
    method: get
    data_selector: Items
    params:
      limit: 1000
- name: update_sales_tax_validation_request
  endpoint:
    path: /invoice/salestaxvalidationrequest
    method: put
    data_selector: InvoiceStatus
    params: {}
- name: expense_reports
  endpoint:
    path: /expense/reports/{id}
    method: PUT
    data_selector: '{}'
- name: suppliers
  endpoint:
    path: /common/suppliers
    method: GET
    data_selector: Items
    params: {}
- name: supplier_by_id
  endpoint:
    path: /common/suppliers/{id}
    method: GET
    data_selector: SupplierSingle
    params: {}
- name: SalesTaxValidationRequest
  endpoint:
    path: /invoice/salestaxvalidationrequest
    method: GET
    data_selector: Items
    params:
      limit: '1000'
- name: UpdateSalesTaxValidationRequest
  endpoint:
    path: /invoice/salestaxvalidationrequest
    method: PUT
    data_selector: Code
    params: {}
- name: request_group_configurations
  endpoint:
    path: /travelrequest/requestgroupconfigurations
    method: GET
    data_selector: Items
    params:
      user: ''
      offset: ''
      limit: ''
- name: suppliers
  endpoint:
    path: /common/suppliers
    method: GET
    data_selector: Items
    params: {}
- name: supplier_by_id
  endpoint:
    path: /common/suppliers/{id}
    method: GET
    data_selector: SupplierSingle
    params: {}
- name: invoice_vendor_banks
  endpoint:
    path: /invoice/vendor/banks
    method: PUT
    data_selector: VendorBankCollection
- name: Request group configuration
  endpoint:
    path: /travelrequest/requestgroupconfigurations
    method: GET
    data_selector: Items
- name: vendor_group
  endpoint:
    path: /invoice/vendor/groups
    method: DELETE
    data_selector: VendorGroup
    params: {}
- name: vendor_group
  endpoint:
    path: /invoice/vendor/groups
    method: PUT
    data_selector: VendorGroup
    params: {}
- name: vendors
  endpoint:
    path: /invoice/vendors
    method: DELETE
- name: vendor_bank
  endpoint:
    path: /invoice/vendor/banks
    method: PUT
    data_selector: VendorBank
    params: {}
- name: Vendor
  endpoint:
    path: /invoice/vendors
    method: GET
    data_selector: Vendor
- name: Vendor
  endpoint:
    path: /invoice/vendors
    method: POST
    data_selector: Vendor
    params: {}
- name: vendor_group
  endpoint:
    path: /invoice/vendor/groups
    method: DELETE
    data_selector: VendorGroup
    params: {}
- name: vendor_group
  endpoint:
    path: /invoice/vendor/groups
    method: PUT
    data_selector: VendorGroup
    params: {}
- name: Vendor
  endpoint:
    path: /vendor
    method: GET
    data_selector: Items
- name: vendors
  endpoint:
    path: /invoice/vendors
    method: DELETE
- name: Vendor
  endpoint:
    path: ''
    method: ''
    data_selector: ''
    params: {}
- name: vendor
  endpoint:
    path: /invoice/vendors
    method: PUT
- name: Vendor
  endpoint:
    path: /invoice/vendors
    method: GET
    data_selector: Vendor
    params: {}
- name: vendor
  endpoint:
    path: /Vendor
    method: GET
    data_selector: Items
- name: Vendor
  endpoint:
    path: /invoice/vendors
    method: POST
    data_selector: Vendor
    params: {}
- name: Vendor
  endpoint:
    path: /vendor
    method: POST
    data_selector: Vendor
    params: {}
- name: Vendor
  endpoint:
    path: /vendor
    method: GET
    data_selector: Items
- name: Vendor
  endpoint:
    path: /Vendor
    method: GET
    data_selector: Items
    params: {}
- name: connection_requests
  endpoint:
    path: /common/connectionrequests
    method: GET
    data_selector: Items
    params:
      limit: '5'
      offset: '0'
- name: connection_request_by_id
  endpoint:
    path: /common/connectionrequests/{id}
    method: GET
    data_selector: ConnectionRequestGet
    params: {}
- name: vendors
  endpoint:
    path: /invoice/vendors
    method: put
    data_selector: VendorCollection
    params: {}
- name: vendor
  endpoint:
    path: /api/vendor
    method: GET
    data_selector: Items
    params: {}
- name: Vendor
  endpoint:
    path: /vendors
    method: GET
    data_selector: Items
    params: {}
- name: hotel_details
  endpoint:
    path: /hotels/details
    method: POST
    data_selector: hotelDetailsList
- name: rate_details
  endpoint:
    path: /hotels/ratedetails
    method: POST
    data_selector: roomRates
- name: rates
  endpoint:
    path: /hotels/rates
    method: POST
    data_selector: hotelRates
- name: reservation
  endpoint:
    path: /hotels/reservation
    method: POST
    data_selector: reservationDetails
    params: {}
- name: connection_requests
  endpoint:
    path: /common/connectionrequests
    method: GET
    data_selector: Items
    params:
      limit: 5
      offset: 0
- name: connection_request_by_id
  endpoint:
    path: /common/connectionrequests/{id}
    method: GET
    data_selector: firstName
- name: create_connection_request
  endpoint:
    path: /common/connectionrequests
    method: POST
- name: update_connection_request
  endpoint:
    path: /common/connectionrequests/{id}
    method: PUT
- name: Hotel
  endpoint:
    path: /api-explorer/v4-0/HotelService.html
    method: GET
    data_selector: records
- name: cancel_reservation
  endpoint:
    path: /hotels/reservation/cancel
    method: POST
    data_selector: cancellationRemarks
    params: {}
- name: modify_reservation
  endpoint:
    path: /hotels/reservation/modify
    method: POST
    data_selector: confirmationCodes
    params: {}
- name: reservation
  endpoint:
    path: /hotels/reservation/read
    method: POST
    data_selector: confirmationCodes
- name: hotel_details
  endpoint:
    path: /hotels/details
    method: POST
    data_selector: hotelDetailsList
- name: rate_details
  endpoint:
    path: /hotels/ratedetails
    method: POST
    data_selector: roomRates
- name: hotel_rates
  endpoint:
    path: /hotels/rates
    method: POST
    data_selector: hotelRates
- name: hotel_properties
  endpoint:
    path: /hotels/search
    method: POST
    data_selector: hotelProperties
- name: hotel_rates
  endpoint:
    path: /hotels/rates
    method: POST
    data_selector: hotelRates
    params: {}
- name: hotel_reservation
  endpoint:
    path: /hotels/reservation
    method: POST
    data_selector: reservationDetails
    params: {}
- name: HotelSearch
  endpoint:
    path: /search
    method: POST
    data_selector: records
- name: reservation
  endpoint:
    path: /hotels/reservation/read
    method: POST
    data_selector: ReservationDetails
- name: list_items
  endpoint:
    path: /common/listitems
    method: GET
    data_selector: Items
    params:
      limit: ''
      offset: ''
      listId: ''
      name: ''
      parentId: ''
      level1Code: ''
      level2Code: ''
      level3Code: ''
      level4Code: ''
      level5Code: ''
      level6Code: ''
      level7Code: ''
      level8Code: ''
      level9Code: ''
      level10Code: ''
- name: list_item
  endpoint:
    path: /common/listitems/{id}
    method: PUT
    data_selector: Void {}
- name: hotel_properties
  endpoint:
    path: /hotels/search
    method: POST
    data_selector: hotelProperties
- name: create_subscription
  endpoint:
    path: /events/v4/subscriptions/webhook
    method: PUT
    data_selector: message
- name: verify_subscription
  endpoint:
    path: /events/v4/subscriptions/my-unique-subscription-id
    method: GET
    data_selector: id
- name: browse_subscriptions
  endpoint:
    path: /events/v4/subscriptions
    method: GET
    data_selector: id
- name: delete_subscription
  endpoint:
    path: /events/v4/subscriptions/my-unique-subscription-id
    method: DELETE
    data_selector: message
- name: list_items
  endpoint:
    path: /common/listitems
    method: GET
    data_selector: Items
    params:
      limit: 25
      offset: 0
- name: create_list_item
  endpoint:
    path: /common/listitems
    method: POST
    data_selector: ID
- name: delete_list_item
  endpoint:
    path: /common/listitems/{id}
    method: DELETE
- name: get_list_item
  endpoint:
    path: /common/listitems/{id}
    method: GET
    data_selector: ID
- name: document_tax_compliance_event
  endpoint:
    path: /event-topics/expense/v4.document-compliance-events.html
    method: GET
    data_selector: facts
    params: {}
- name: list_item
  endpoint:
    path: /common/listitems/{id}
    method: PUT
    data_selector: Void {}
- name: expense_report
  endpoint:
    path: /event-topics/expense/v4.expense-events.html
    method: GET
    data_selector: events
- name: expense_report
  endpoint:
    path: /expensereports/v4/users/{user_id}/context/{context}/reports/{report_id}
    method: GET
    data_selector: facts
- name: subscriptions
  endpoint:
    path: /events/v4/subscriptions/webhook
    method: PUT
    data_selector: message
- name: available_topics
  endpoint:
    path: /events/v4/topics
    method: GET
    data_selector: ''
- name: Document Tax Compliance Read Event
  endpoint:
    path: /event-topics/expense/v4.document-compliance-events.html
    method: GET
    data_selector: facts
    params: {}
- name: itinerary_event
  endpoint:
    path: /event-topics/travel/v4.itinerary-events
    method: GET
    data_selector: events
    params: {}
- name: air_search_event
  endpoint:
    path: /event-topics/travel/v4.air-search-events
    method: GET
    data_selector: facts
- name: hotel_search_event
  endpoint:
    path: /event-topics/travel/v4.hotel-search-events
    method: GET
    data_selector: facts
- name: reportCreated
  endpoint:
    path: /event-topics/expense/v4.expense-events.html
    method: GET
    data_selector: facts
    params: {}
- name: reportUpdated
  endpoint:
    path: /event-topics/expense/v4.expense-events.html
    method: GET
    data_selector: facts
    params: {}
- name: reportDeleted
  endpoint:
    path: /event-topics/expense/v4.expense-events.html
    method: GET
    data_selector: facts
    params: {}
- name: statusChanged
  endpoint:
    path: /event-topics/expense/v4.expense-events.html
    method: GET
    data_selector: facts
    params: {}
- name: expense_report
  endpoint:
    path: /expensereports/v4
    method: GET
    data_selector: facts
- name: expense_readyForIntegration
  endpoint:
    path: /public/concur/financialintegration/expense.readyForIntegration
    method: POST
    data_selector: facts
- name: invoice_readyForIntegration
  endpoint:
    path: /public/concur/financialintegration/invoice.readyForIntegration
    method: POST
    data_selector: facts
- name: payroll_readyForIntegration
  endpoint:
    path: /public/concur/financialintegration/payroll.readyForIntegration
    method: POST
    data_selector: facts
- name: cashadvance_readyForIntegration
  endpoint:
    path: /public/concur/financialintegration/cashadvance.readyForIntegration
    method: POST
    data_selector: facts
- name: requestObligation_readyForIntegration
  endpoint:
    path: /public/concur/financialintegration/requestObligation.readyForIntegration
    method: POST
    data_selector: facts
- name: reportObligation_readyForIntegration
  endpoint:
    path: /public/concur/financialintegration/reportObligation.readyForIntegration
    method: POST
    data_selector: facts
- name: itinerary_event
  endpoint:
    path: /public.concur.travel.itinerary
    method: GET
    data_selector: events
- name: statusChanged
  endpoint:
    path: /travelrequest/v4/requests
    method: GET
    data_selector: facts
- name: air_search_event
  endpoint:
    path: /event-topics/travel/v4.travel-search-events
    method: GET
    data_selector: facts
    params: {}
- name: hotel_search_event
  endpoint:
    path: /event-topics/travel/v4.travel-search-events
    method: GET
    data_selector: facts
    params: {}
- name: TravelProfileCreated
  endpoint:
    path: public.concur.user.travel.profile
    method: POST
    data_selector: eventType
    params: {}
- name: TravelProfileUpdated
  endpoint:
    path: public.concur.user.travel.profile
    method: POST
    data_selector: eventType
    params: {}
- name: TravelProfileDeleted
  endpoint:
    path: public.concur.user.travel.profile
    method: DELETE
    data_selector: eventType
    params: {}
- name: expense_readyForIntegration
  endpoint:
    path: /event/expense.readyForIntegration
    method: POST
    data_selector: facts
    params: {}
- name: invoice_readyForIntegration
  endpoint:
    path: /event/invoice.readyForIntegration
    method: POST
    data_selector: facts
    params: {}
- name: payroll_readyForIntegration
  endpoint:
    path: /event/payroll.readyForIntegration
    method: POST
    data_selector: facts
    params: {}
- name: cashadvance_readyForIntegration
  endpoint:
    path: /event/cashadvance.readyForIntegration
    method: POST
    data_selector: facts
    params: {}
- name: requestObligation_readyForIntegration
  endpoint:
    path: /event/requestObligation.readyForIntegration
    method: POST
    data_selector: facts
    params: {}
- name: reportObligation_readyForIntegration
  endpoint:
    path: /event/reportObligation.readyForIntegration
    method: POST
    data_selector: facts
    params: {}
- name: Request Status Changed Event
  endpoint:
    path: /travelrequest/v4/requests
    method: GET
    data_selector: data
    params: {}
- name: Travel Profile Events
  endpoint:
    path: /event-topics/profile/v4.travel-events.html
    method: GET
    data_selector: events
    params: {}
notes:
- Steps 1, 2, and 3 in combination, is a one-time process based on the nature of your
  integration or the requirements of the event topic.
- First time requesting an accessToken returns a refreshToken.
- Username should equal the Company UUID for company level authentication.
- Access Tokens have a default One hour lifetime.
- Refresh Tokens have a default 6 month lifetime.
- Fields may be added to an API for a variety of reasons. Please ensure that your
  application’s code is robust enough to handle non-breaking changes.
- The Client Credentials JWT has a lifetime of 60 minutes.
- Users should be provided with a method to disconnect within your portal.
- Please see documentation for revoking a token on the Developer Portal.
- For issues with a partner app, please contact the partner’s support desk.
- Company Administrators access the FAQ and other resources to get the help you need.
- Pass the JWT in the Post Header when making calls to the ESS API.
- Must support a form factor of 800x600.
- Should be Section 508 compliant.
- The application connector must have a certificate signed by a Certificate Authority
  (CA) installed.
- If you are an SAP Concur CUSTOMER seeking support, be aware that this link and alias
  are meant for App Center, Endorsed Apps, and Solution Extensions PARTNERS only.
- An accessToken has a one hour lifetime.
- A refresh token has a six month lifetime.
- The application connector must have a certificate signed by a Certificate Authority
  (CA).
- Credentials are stored in the appropriate web configuration file for your platform.
- A successful Test Connection request is required to set the connector to 'Verified'
  before it can be used for any of the callout services.
- When a geolocation is sent to your application as a query parameter, that value
  can also be used to form a proper base URI.
- Client-side calls should use the www- variant of the base URI.
- Auth tokens are valid only for 24 hours.
- Partners can use the temporary auth token multiple times within the 24 hours.
- All Rights Reserved.
- Privacy Policy available at https://www.concur.com/en-us/privacy-policy
- The new OAuth2 accessToken has a one hour lifetime.
- Before making a call to any of the new v4 APIs, it is advisable to request for a
  new accessToken.
- Temporary auth token is required for obtaining access and refresh tokens.
- The Company Request Token expires after 24 hours.
- The Access Token has a lifetime of 1 hour and can be used to call SAP Concur APIs.
- If the Refresh Token is lost, expires, or is revoked, you must generate a new request
  token.
- 'This API requires one or more of the following scopes: budgetitem.read, budgetitem.write,
  fiscalcalendar.read, fiscalcalendar.write.'
- The user needs to have the Budget Administrator role in order to access the API.
- Access to this documentation does not provide access to the API.
- Fiscal years cannot overlap. Fiscal periods cannot overlap and are limited to 24
  per fiscal year.
- Fiscal years cannot overlap.
- Fiscal periods cannot overlap and are limited to 24 per fiscal year.
- Fiscal years may be created for the future or the past
- Unless there is a need to do so, the client should only specify monthly fiscal periods
  when creating/updating a fiscal year. The system will auto-generate the quarterly
  and yearly fiscal periods.
- 'This API call requires one of the following scopes: budgetitem.read, budgetitem.write.'
- The list for REQUEST expense types is identical to the list for EXPENSE expense
  types and similarly PURCHASE_REQUEST is identical to PAYMENT_REQUEST.
- Due to performance considerations, we support header payload with maximum of 200
  budget item details.
- Use responseSchema=compact if you need to call this API frequently.
- Refer to Scope Usage for full details.
- Uses OAuth2 with refresh token — requires setup of connected app in api
- Response contains various headers for technical support and caching.
- The status of fiscal periods must be unique for this entity.
- Uses OAuth2 with Bearer token for authorization.
- Adjustments may not be deleted or updated via the API.
- Partner developers must determine which configurations are required for their solution
  prior to the review process.
- Expense or Travel Request will not be able to connect to the application connector
  until a certificate signed by a Certificate Authority (CA) is installed in the application
  connector.
- The results list is limited to 100 records.
- If the application connector does not respond or returns an error, the user is notified
  in a popup window.
- Expense must have a list field configured to use an external source before this
  callout can be used.
- Authentication between the SAP Concur platform and the application connector is
  performed using HTTP Basic Authentication.
- If this Fetch List callout is made inactive and then subsequently saved on the System
  page, any lists that have been added to this Fetch List as a Configured List will
  be deleted from that Fetch List service.
- The Launch External URL callout is not supported for expense entry bulk editing.
- Only the Employee role can interact with the Launch External URL configured field.
- The Launch External URL currently only works with Professional Edition.
- The Launch External URL is available to be configured at the Expense Report Header,
  Entry, or Allocations-level fields.
- This Callout cannot be used with Standard Edition clients or from a Travel or Invoice
  field.
- Launch External URL v4 is not currently supported in the China Datacenter.
- If Expense Assistant is used to create reports and the Launch External URL field
  is employed at the Report Header level, clients may consider creating a mandatory
  field for the Report Header to ensure users interact with the Launch External URL
  field.
- Users must be logged into their SAP Concur account for this process to work correctly.
- Launch External URL currently only works with Professional Edition.
- The Launch External URL is available to be configured at the Request Header, Entry,
  or Allocations-level fields.
- Authorization header with Basic authorization for endpoint is required.
- Search logic should use logical AND between fields.
- When implementing the search logic, the search criteria should use logical AND between
  the fields, not logical OR.
- If the application connector does not respond or returns an error, the user is notified
  in a popup window within Expense.
- Cards v4 APIs are available in all data centers except China and CCPS and only to
  partners who have been granted access.
- Maximum number of accounts / transactions per call is 1000.
- A bulk request represents the processing of an asynchronous bulk APIs such as POST
  /.../accounts/bulk or POST /.../transactions/bulk.
- concur-correlationid is a specific custom header used for technical support
- This API can only be used for creating new accounts.
- Accounts with accountType `V` must reference a billingAccount via `externalId`.
- Test users are not supported and cannot be assigned to accounts sent via this API.
- This API can only be used for creating new transactions. If the same externalId
  is sent a second time, it will be ignored with an error during processing.
- 'Maximum number of accounts per call: 1000'
- 'Maximum number of transactions per call: 1000'
- This API is not available in Implementation environments.
- Cash Advance APIs supports single Cash Advance Creation, Retrieval and Issuance.
  Create Cash Advance API currently does not support receipt upload.
- Access to this documentation does not provide access to the API. This API is not
  available in Implementation environments.
- This direct connect was originally designed to work with Limo providers, but can
  support all types of ground transportation.
- ESS delivers events to your endpoint.
- ESS requires a caller to have a proper JWT and scopes.
- Requests will come from us.api.concursolutions.com, emea.api.concursolutions.com,
  or cn.api.concursolutions.com.
- Connection will always be established using a mutual TLS with webhook.api.concursolutions.com
  x509 certificate.
- Requests will always have a digital signature.
- Request will be retried until delivery OR event retention period expiration.
- Event retention period is 72 hours from the time of event being published.
- 'Requests will be retried when the subscriber responds with HTTP Response Code(s):
  5xx, 401, 403, or 429.'
- 'Requests will not be retried when subscriber responds with HTTP Response Code(s):
  2xx – Indicates successful receipt of the event, 4xx – Indicates posted event is
  unexpected or incorrectly formatted.'
- Events are not archived, but all of the event delivery attempts/responses are logged
  and retained for 30 days.
- This API only supports company-level access tokens.
- Only one type of transaction can be retrieved at a time.
- Allows financial posting results to be sent to SAP Concur.
- An app should execute the POST request immediately after the GET request.
- The financial document type to return is required.
- 'Only one type of transaction can be retrieved at a time. Currently supported: expense.'
- The JSON from the Financial Integration Service will provide all the required data
  to support all potential financial use cases.
- Uses JSON format for posting records
- Expense records may include multiple tax lines
- Requires setup of connected app in API
- Personal expenses paid by a corporate card will not be included in the JSON when
  a non-offsetting payment is used
- Extract file excerpts are a reference point for developers transitioning from extract
  files to Financial Integration Service.
- The extract file excerpts in this document are a reference point for those developers
  who have used those files for prior financial integrations.
- Custom fields may not have data, depending on the configuration.
- Maximum lengths for fields are specified.
- API requires setup of OAuth2 credentials.
- The Invoice creation attempt will fail if more than one vendor matches the information
  provided.
- The country code is required.
- The total invoice amount is required.
- The invoice name is required.
- The vendor remittance identifier is required.
- This API is only available for use by payment partners who will be processing invoice
  payments.
- This API can accept a maximum of 10,000 requests per minute across all payment providers.
- This API is available only in the North America and EMEA Data Center.
- Uses OAuth2 for authentication
- Payment providers can use this endpoint to provide updates to the status of payments.
- Payment providers can use this endpoint to provide updates to the status of multiple
  payments at once.
- Uses OAuth2 with bearer token for authorization.
- The value is always PAYPVD which means that the client wants to pay using a payment
  provider.
- This API is only available for direct integrations with an existing Concur Invoice
  client.
- This API supports only JSON.
- This API is not available in the China Data Center.
- A maximum of 500 records can be returned at a time.
- New invoice payments that have not been retrieved/extracted are excluded.
- Authorization token is required in the header as a bearer token.
- Authorization must be in the format 'BEARER {token}'
- This API is not available in the China Data center.
- This API can only be used to create new purchase requests and get the details of
  the created purchase request.
- Batch processing is not available using the Purchase Order API.
- Supported mode is COMPACT, which returns basic info about the purchase request along
  with any exceptions.
- The supported mode is COMPACT, which returns basic info about the purchase request
  along with any exceptions.
- Some fields may not have data, depending on the configuration.
- Not available for PUT for OrgUnit and Custom fields
- SAP Concur clients must purchase Concur Invoice in order to use this API.
- The Receipts V4 API only provides GET access to individual or user’s receipts that
  have been submitted through this API.
- Only the receipts will be returned, there will not be any corresponding entry data.
- Creating a receipt requires JSON data about the transaction and optionally an image
  of the receipt.
- Successful POST requests will receive a response of 201 Created.
- The API is not designed to obtain receipt images attached to an expense report.
- The API is not designed to obtain the receipt images attached to an expense report.
- Multiple ticket handling for rail receipts.
- Receipts API version 4 includes support for multiple types of receipts.
- The maximum file size allowed is 10 MB.
- The URL is valid for 15 minutes after the request.
- The URL for the image will need to be unencoded before use.
- This API is not designed to obtain the receipt images attached to an expense report.
- Requires setup of connected app for authentication
- concur-correlationid is a specific custom header used for technical support in the
  form of a UUID.
- Requires setup of connected app in api
- concur-correlationid is a specific custom header used for technical support.
- Specific custom header 'concur-correlationid' is used for technical support.
- concur-correlationid is a specific custom header used for technical support in the
  form of a RFC 4122 A Universally Unique IDentifier (UUID) URN Namespace.
- Authorization is required with a Bearer token
- The request ID must be provided in the path
- 'Required Scope: travelrequest.write'
- 'Required Scope: travelrequest.externalsystemworkflow.write'
- Requires the travelrequest.write scope.
- Specific custom header 'concur-correlationid' used for technical support
- Required userId when connecting with a Company token.
- Custom header 'concur-correlationid' is used for technical support
- Authorization header requires Bearer token
- This cash advance detail endpoint is provided within the Concur Request API for
  feature parity purpose only.
- Uses OAuth2 with bearer token
- Concur-CorrelationId is a specific custom header used for technical support.
- It is highly recommended to rely only on the list of cash advances link available
  in the Request payload response, and not on this cash advance detail URI presented
  below, which will be deprecated in the future.
- Some objects may return nulls in deeply nested fields
- agencyProposalType is API
- booked indicates if the proposal is booked
- The API provides access to agency proposals and their entries.
- The Request must be approved by the specified date.
- Proposal segments may vary in details.
- Some fields may be empty or null.
- Some fields may not have data depending on the configuration.
- Access to this documentation does not provide access to the API. To submit electronic
  receipts (eReceipts) please use the Receipts v4 APIs.
- Requires specific userId and itineraryId parameters for requests.
- Requires unique identifier of a traveler(user)
- Ensure to set the appropriate scopes for access.
- 'Scopes: travelallowance.itinerary.read'
- The API requires a user ID and context for accessing calculation result details.
- Requires setup of proper authorization to access user contexts.
- If translations are available the endpoint returns these texts in the language provided
  in the request header.
- This function is only available to travel suppliers who have completed the SAP Concur
  application review process.
- Access to this documentation does not provide access to the API. This API is available
  in US and EMEA data centers.
- Using the PUT method erases existing user data and replaces data from the payload.
  Profile data must be supplied within the payload or values will be replaced with
  system default or null.
- Limited to 100 operations or record size of 400KB per request.
- Using the PUT operation erases existing user data and replaces data from the payload.
- Some fields are marked as required for certain user types.
- In order to be delegated as a delegate, the user itself must have the same corresponding
  value of spend role for each product as the user delegated for.
- Some objects like Contact may return nulls in deeply nested fields
- One scope may have access to more than one API/Endpoint.
- One scope may have both read and write access unless otherwise specified.
- The partner application does not necessarily use all the APIs that are available
  for a scope.
- The access_token is valid only for one hour.
- The refresh_token is valid for six months from the day and time issued.
- An access_token is valid only for one hour.
- A refresh_token is valid for six months.
- Requires the use of Authorization Grant for user authentication.
- Users must purchase Concur Expense in order to use this integration capability.
- This integration is only available to partners who have been granted access and
  to customers who either use username/password or SSO SAML2 implementation for authenticating.
- Used for intra SAP service communication
- Use of the List API is required for the Invoice integration.
- Use of the List API is not required for the Expense integration at this time.
- The External ID is the unique identifier assigned by the system of record for the
  attendees.
- Real-time integration into the ERP.
- Requires acknowledgement of each Document ID obtained.
- Access tokens are valid for one hour.
- Refresh tokens are valid for six months.
- Access token is valid only for one hour.
- Refresh token is valid for six months.
- Test User functionality only applies to Professional Edition customers.
- The checkbox field, 'Is a Test User' in the employee profile must be checked for
  each test profile used in the testing before clicking Save.
- Your app should have the retry logic for any API call timeout. For example, retry
  for every 30 seconds if you get the API call timeout and retry 5 ~ 10 times.
- Scopes must be assigned to the requesting authentication application to access the
  identity endpoints.
- User authentication and authorization is done via regular 3-legged OAuth2 grant.
- When totalResults is equal to itemsPerPage, there will not be a nextCursor in the
  response.
- When the caller reaches the last page, there will be no nextCursor in the response.
- Users must purchase Concur Request in order to use this integration capability.
- This integration is only available to partners who have been granted access.
- Requires access token to perform API calls.
- Your application will obtain and store one company-level OAuth refresh token for
  each company that opts to use your application.
- The refresh token will be used repeatedly to obtain 60-minute access tokens that
  your application will use to conduct transaction API calls to and from the SAP Concur
  platform.
- Remove `charset=utf-8` from content-type header in your request.
- Ensure your web servers are not configured with TLS V1.1.
- Use of the List API is required for the Invoice integration (e.g. for the custom
  list values that are part of the Vendor Master records).
- FIS requires a post of the status of the ERP integration back into the SAP Concur
  solution, per report or invoice.
- For existing SAP Concur customers, enabling FIS also requires change management
  discussions regarding expense reports and invoices in process during the switch.
- Store the concur-correlationid value returned in the header response for logging,
  troubleshooting, or case escalation purposes
- Make note of the geolocation where the company user exists.
- Submitting itinerary data with similar travel dates and trip data will result in
  multiple itineraries for the traveler if login_id is the only parameter used.
- Store the returned TripID. This value is required for itinerary updates or cancellations.
- For additional itinerary samples, please contact your Platform Enablement PM.
- Store the concur-correlationid value returned in the header response for logging,
  troubleshooting, or case escalation purposes.
- We recommend using data from FIS whenever possible due to the efficiency and advantages
  it has over batched extract files.
- The result will produce a URL that the ERP Partner can use in a separate browser
  session to render the image. This URL is short-lived (15 minutes).
- The scopes related to this documentation are currently limited to Early Access developers
  at this time.
- The Test User functionality only applies to Professional Edition customers.
- A PSE is hosted in the production environment but is a separate site from the customer’s
  production entity.
- Use login ID and the original trip ID from the initial response as request parameters
  to update or modify an existing itinerary.
- Avoid submitting requests for date ranges beyond one calendar month.
- The number of requests per minute from a specific domain should not exceed 4000
  requests per minute or 240,000 requests per hour.
- Your application must be authorized and registered in our Supplier system before
  submitting itineraries on behalf of a traveler with your company level token.
- Users who omit LastModifiedDate will receive an error.
- To create or update a traveler’s profile with program loyalty information, your
  application must be registered in the Travel Supplier system.
- The access_token is valid for sixty minutes.
- Refresh tokens are good for a minimum of six months.
- Avoid retrieving trip details in bulk during business hours.
- The retrieval interval should never be less than ten minutes or six requests per
  hour.
- The LastModifiedDate parameter is required for profile retrieval.
- Omitting required parameters will result in an error.
- To retrieve, create, or update a traveler’s form of payment, your application must
  be registered in our Travel Supplier system.
- A minimum 100x100 pixel image file of your organization’s logo should be submitted.
- Make note of the geolocation where the company user exists to POST the eReceipt
  correctly.
- 'Travel applications normally have the following scopes registered: openid, travelrequest.write,
  user.read, company.read, user_read, FOP, GHOST, ITINER, TRVREQ, TRVPRF, PASSV, EMERG,
  TSAI, TMCSP, MEDIC, UNUTX, USER, NOTIF, COMPD, COMPANY'
- If you wish to have your application include additional scopes or endpoints, you
  must have your application recertified.
- If no value for status is indicated, then by default it will return the response
  for 'ALL ACTIVE' travel requests.
- Deeplink Integration currently only supports flight, car, hotel, train search, and
  itinerary lookup.
- When using SAML2 IdP-Initiated flow, IdP must support setting `relayState`.
- This integration and the use of the event-driven Itinerary V4 API applies only to
  DoC partners.
- Use the Itinerary scope for authentication.
- Ensure that your dates are recent.
- Users can omit unit or distance or both when they want to use default values.
- If searching for a train one-way trip, they must inform departure information and
  destination location; however, they shouldn’t provide a return date or time.
- 'The user must have one of the following user roles: Company Administrator or Web
  Services Administrator for Professional, or Can Administer for Standard.'
- Use the Itinerary scope. More details available in the API documentation.
- Manually adding a new itinerary allows for creating trips in the sandbox.
- Notification subscription requires an OAuth token for an administrative user.
- Clients must provision the core and enterprise extensions prior to, or with spend
  and/or Travel extensions.
- Verifying the status of the request is required to determine success or failures.
- Requires setup of connected app in Concur
- Data sources can be differentiated by source, documented in the References for Enumeration
  Types section.
- Some sources of travel data are indirect or only signal traveler intent, it is not
  uncommon for records to be incomplete.
- You must securely store last received refresh_token to use on subsequent calls.
- You must revoke the tokens for the inactive users or disconnected users.
- Must log Error Code / Error Description.
- You should not obtain an access_token until customer has completed all actions on
  the Landing Page.
- If you’re not yet a SAP Concur App Center partner please contact our Business Development
  team to discuss an agreement.
- The default limit is 25 and the maximum is 100.
- Uses OAuth2 with refresh token — requires setup of connected app in Concur
- Some fields may return null values
- Default value for limit is 25
- Gets all expense entries owned by the user.
- Updates the specified expense entry. Only the fields provided in the supplied object
  are updated. Missing fields will not be altered.
- Expense Entry Itemizations are children of an expense entry that subdivide the expense.
- The user must have the Web Services Admin role to use certain parameters.
- The user must have the Web Services Admin role to use the user parameter.
- The valid city location codes in SAP Concur vary by client and cannot be used across
  multiple clients.
- Gets all relevant information (Payment Request Header, Payment Request Line Item
  and Payment Request Allocation) of a Payment Request.
- Creates a new Payment Request with all relevant details including line items and
  associated allocations.
- Ensure to handle null values in nested fields
- Purchase order receipts are records that the purchase order was completed.
- Purchase orders are requests for a vendor to supply goods or services.
- The details of the purchase order are required in application/json or application/xml
  format.
- Returns all reports owned by the user based on the search criteria.
- Updates the report specified in the URL. Only the provided fields will be updated,
  missing fields will not be altered.
- Get the Request group configuration owned by the specified user, or all Request
  group configurations for the company.
- If two or more records include identical Vendor Code and Vendor Name values, then
  this record must also be identical for each record; otherwise leave this record
  blank.
- The Tax ID will not be encrypted in the database.
- The Vendor Code must be unique for the specified Vendor Code.
- The 2-character country code must be upper case and is required to be populated.
- Maximum length for most fields is specified in the documentation.
- 'Response Content Type: application/json, application/xml'
- Creates a new vendor and returns the status of creation.
- Maximum 48 characters each; case insensitive for custom fields.
- If no value is provided for PaymentMethodType, the default is CLIENT.
- If left with a blank value, the field defaults to US for CountryCode and USD for
  CurrencyAlphaCode.
- The Vendor object has multiple optional fields that can be utilized.
- Retrieve hotel property information
- Retrieve hotel rate details for rates of a property
- Requires authentication to access the Hotel Service API.
- Read reservation details. Used in a process of reserving a hotel to acknowledge
  receipt of booking confirmation.
- Requires setup of API access for Concur OBT.
- This unique code can be used during troubleshooting as it identifies the API call
  in the log files.
- JWT has a lifetime of 60 minutes.
- Requires scope 'events.topic.read' to access the ESS API.
- The default limit for records is 25 and the maximum is 100.
- Access to this documentation does not provide access to the subscription.
- Event data includes status changes for expense reports
- Apps eligible for connection utilize OAuth 2.0 Company-Level Authorization
- The authorized SAP Concur Administrator can connect to the application using the
  'Connect' button on the listing.
errors:
- '401 Unauthorized: Ensure proper scopes and valid JWT.'
- Subscription 'my-unique-subscription-id' saved successfully
- Subscription 'my-unique-subscription-id' marked for deletion
- 'HTTP 503: During downtime, any request to the SAP Concur Platform will receive
  an HTTP 503 error code.'
- '401 Unauthorized: Recheck OAuth scopes or token expiration'
- 400 Bad Request `(error, error_description, code)`
- 401 Unauthorized `(error, error_description, code)`
- 403 Forbidden `(error, error_description, code)`
- 404 Not Found `(error, error_description, code)`
- 500 Server Error, error message is in body.
- 503 Server Timed Out, error message is in body.
- 'invalid_grant: Incorrect Credentials. Please Retry'
- '400: Bad Request `(error, error_description, code)`'
- '401: Unauthorized `(error, error_description, code)`'
- '403: Forbidden `(error, error_description, code)`'
- '404: Not Found `(error, error_description, code)`'
- '500: Server Error, error message is in body.'
- '503: Server Timed Out, error message is in body.'
- '400: Bad Request - see list of responses below.'
- '401: Unauthorized - Invalid credentials'
- '403: Forbidden'
- '404: Not Found'
- 'invalid_grant: Incorrect credentials. Please Retry'
- 'invalid_grant: Account is disabled. Please contact support'
- 'invalid_grant: Logon Denied. Please contact support'
- '400 Bad Request: The request was determined to be invalid by the server.'
- '403 Forbidden: The user does not have the necessary permissions to perform the
  request.'
- '404 Not Found: The resource could not be found or does not exist.'
- '500 Internal Server Error: Error message in response body.'
- '504 Gateway Timeout: Error message in response body.'
- 'REQUEST_LIMIT_EXCEEDED: Throttle API calls or reduce frequency'
- 'QUERY_TIMEOUT: Break down filters or add selectivity'
- '200 OK: Successful request'
- '401 Unauthorized: Check your API token'
- 'ERROR: Invalid budget item ID.'
- 'WARNING: Budget item not found.'
- 'BUDGET.BUDGET_PERIOD_REQUIRED: Record 1) Budget period is missing'
- 'BUDGET.BUDGET_PERIOD_REQUIRED: Budget period is missing'
- '400 Bad Request: The request is malformed. Check the API document and verify the
  request uses the correct format.'
- '403 Forbidden: The OAuth Consumer doesn’t have a required role. Check the API documentation
  to learn the required roles.'
- '200 Success: Notification successfully deleted.'
- '401 Unauthorized: Authorization header with OAuth token for valid SAP Concur user
  is required.'
- Refer to the HTTP Codes page for details of the common responses and errors.
- HTTPS 200 Success
- '200 (OK): Successful response'
- '200 OK: In case of success'
- '400 (Bad Request): invalidRequest, invalidJson'
- '400 Bad Request: The request contains errors'
- 'invalidCountryCode: Value is not a valid ISO 3166-1 Alpha-2 country code'
- 'invalidEnum: Value is not one of the allowed values'
- 'missingRequiredField: Missing required field'
- 'invalidRequest: The request contains errors'
- '400 (Bad Request): invalidRequest'
- '400 (Bad Request): invalidJson'
- 'invalidFieldSize: size must be between 1 and 50'
- invalidRequest - The request contains errors (usually contains a detailed error
  list)
- invalidJson - The request body is not a valid JSON
- 401 Unauthorized - The request is not authenticated. Missing or invalid authorization
  header.
- '401 Unauthorized: Invalid access token'
- '404 Not Found: Cash advance not found'
- 'errorCode: Unique identifier of the error.'
- 'errorMessage: Message associated with the error.'
- 'errorCode: unique identifier of the error'
- 'errorMessage: message associated with the error'
- '400: Validation errors in request body.'
- '401: Unauthorized (invalid JWT or expired, etc.)'
- '404: DCG Company Not Found'
- '410: Resource Not Available (Document Deleted)'
- '500: Internal Server Error'
- '503: Service Unavailable'
- '502: Bad Gateway'
- If application has only the events.topic.read scope an empty list of topics will
  always be returned.
- '5xx: Requests will be retried.'
- '401: Requests will be retried.'
- '403: Requests will be retried.'
- '429: Requests will be retried.'
- '2xx: Indicates successful receipt of the event.'
- '4xx: Indicates posted event is unexpected or incorrectly formatted.'
- '400 Bad Request: Check the request format and parameters.'
- '500 Internal Server Error: Check the server response for issues.'
- '400 Bad Request: Review request parameters and body.'
- '500 Internal Server Error: Contact support for assistance.'
- '400 Bad Request: Check the request format and required fields.'
- '500 Internal Server Error: Try again later or contact support.'
- '500 Internal Server Error: Retry the request after some time.'
- '400 Bad Request: Invalid request - this same request will not work if tried again.'
- '500 Internal Server Error: Unknown error, please try again later.'
- '400 Bad Request: Invalid request data.'
- '500 Internal Server Error: An unexpected error occurred.'
- 'Invalid Posting Record: Ensure all required fields are populated'
- 'Unauthorized Access: Check API permissions and authentication'
- 'Transaction Limit Exceeded: Reduce the number of items in the request'
- '401 Unauthorized: Check client credentials or access token.'
- '400 Bad Request: Verify request parameters.'
- '400 Bad Request: Check request payload or parameters.'
- '403 Forbidden: Ensure correct permissions and access token.'
- '404 Not Found: Verify endpoint URL.'
- '500 Internal Server Error: Retry the request.'
- '400 Bad Request: Check the request payload for errors.'
- '403 Forbidden: Ensure proper permissions and access.'
- '404 Not Found: Verify the endpoint and resource.'
- '400 Bad Request: Check the request payload'
- '403 Forbidden: Check API permissions'
- '404 Not Found: Ensure the endpoint is correct'
- '400 Bad Request: Payment status cannot be null'
- '403 Forbidden: Check permissions'
- '404 Not Found: Verify endpoint and resource'
- '500 Internal Server Error: Retry the request'
- 400 Bad Request
- 403 Forbidden
- 404 Not Found
- 500 Internal Server Error
- '400 BAD REQUEST: Payment status cannot be null'
- '403 FORBIDDEN: Access denied'
- '404 NOT FOUND: The requested resource could not be found'
- '500 INTERNAL SERVER ERROR: An unexpected error occurred'
- '400 BAD REQUEST: Check payment details and try again.'
- '207 MULTI STATUS: Some payments were successful, others failed.'
- 'errorCode: required'
- 'errorMessage: required'
- 'errorCode: Required machine readable code associated with the error.'
- 'errorMessage: Required human readable message associated with the error.'
- '400 BAD REQUEST: Request does not have a Payment Status of Extracted'
- '207 MULTI STATUS: Some payments were successful while others failed'
- '400 BAD REQUEST: Check request parameters and structure.'
- '207 MULTI STATUS: Some payments were processed successfully while others failed.'
- '400 BAD REQUEST: No request found for requestId Y042925D892D4725BF23'
- '207 MULTI_STATUS: Contains both valid and invalid payments.'
- '400 BAD REQUEST: Invalid request data'
- '207 MULTI STATUS: Some payments were successful, some failed'
- '401 Unauthorized: Ensure valid access token and permissions'
- '1000: The PO number is missing or invalid.'
- '2000: There was no vendor found for the supplied Vendor Code and Vendor Address
  Code.'
- '3000: The Currency Code is missing or invalid.'
- '4000: There was no policy found matching the supplied External Id.'
- '4001: The policy does not support purchase orders.'
- '4002: The policy cannot be changed on the purchase order.'
- '5000: The purchase order does not contain any line items.'
- '5001: The line item must contain expense type or account code, but not both.'
- '5002: The line item expense type is invalid.'
- '5003: The line item account code is invalid.'
- '5004: The line item tax and unit price must both match positive or negative.'
- '5500: The line item contains an allocation, but no allocation form is defined.'
- '5501: The line item allocation amounts exceed the line item total.'
- '5502: The distribution amounts for a line item must match the line item amount
  positive or negative.'
- '5503: The distribution amounts for a line item cannot be zero.'
- '5600: The external id for the line item is not unique across the purchase order.'
- '6000: The Ship To Address is missing or invalid.'
- '6001: The Bill To Address is missing or invalid.'
- '8000: A required field is missing.'
- '8001: A field’s value exceeds the maximum length allowed.'
- '8002: A field’s value is not the correct data type.'
- '8003: A field’s value is an invalid list item.'
- '8004: A field’s value is an invalid connected list item.'
- '8005: The Country Code is missing or invalid.'
- '8006: A value was supplied for a field that is not part of the form.'
- '9999: An unexpected error occurred.'
- '404 Not Found: The specified purchase request ID does not exist.'
- '500 Internal Server Error: An unexpected error occurred on the server.'
- '503 Service Unavailable: The service is temporarily unavailable.'
- '404 Not Found: Check the purchase request ID'
- '500 Internal Server Error: Retry after some time'
- '503 Service Unavailable: Service is temporarily down'
- 'missingRequestBody: Missing request body.'
- 'invalidRequestBody: Passed request body is invalid.'
- 'missingUserInfo: Either `userID` or `userEmail` or `userLoginId` is required.'
- 'invalidUserInfo: Either `userID` or `userEmail` or `userLoginId` is invalid, or
  user does not have access to this resource.'
- 'provideOneUserInformation: Either `userID` or `userEmail` or `userLoginId` is required.'
- 'missingCurrencyCode: `currencyCode` is missing.'
- 'invalidCurrencyCode: `currencyCode` is invalid.'
- 'invalidPolicyInformation: Cannot find a purchase order policy with the supplied
  `policyExternalId`.'
- 'missingLineItems: `lineItems` are missing.'
- 'invalidPurchaseType: `purchaseType` is invalid.'
- 'missingPurchaseType: `purchaseType` is required.'
- 'missingVendorAddressCode: `vendorAddressCode` is required.'
- 'missingVendorCode: `vendorCode` is required.'
- 'invalidVendor: Vendor / Address code combination is invalid.'
- 'missingDescription: Line item `description` is required.'
- 'missingQuantity: Line item `quantity` is required.'
- 'invalidQuantity: Line item `quantity` is invalid.'
- 'missingUnitPrice: `unitPrice` is required.'
- 'invalidUnitPrice: `unitPrice` is invalid.'
- 'invalidDateFormat: Expected a date in the format YYYY-MM-DD.'
- '1001: The External ID is missing or invalid.'
- '1002: The Is Received is invalid. It must be either empty, Y/N, or y/n.'
- '1003: The Received Quantity is invalid. It must be either empty or numeric.'
- '1004: The Received Date is invalid. It must be either empty or date formatted YYYY-MM-DD.'
- '1005: The Unit Of Measure code is invalid. It must be either empty or Valid with
  less than 10 chars in length.'
- '1006: The Received Quantity is invalid, for Receipt Type WQTY on Purchase Order,
  Quantity is required. Sorry.'
- '1007: The field is not part of the form'
- '1008: The value exceeds the maximum length allowed for the field.'
- '1009: The value is the wrong data type for the field.'
- '1011: The invalid value expression.'
- '10010: The required field is missing.'
- '1007: The field is not part of the form.'
- '202 Accepted: Successful POST request.'
- '401 Unauthorized: Recheck OAuth token.'
- '400 Bad Request: validationErrors JSON object'
- '401 Unauthorized: User ID in the URL must match the ID in the sub claim of the
  JWT'
- '403 Forbidden: None'
- '404 Not Found: None'
- '413 Max file size exceeded: None'
- '415 Unsupported Media Type: Specified Content-Type is not supported'
- '500 Internal Server Error: Internal error'
- '400 Bad Request: An error occurred while validating your post against the JSON
  schema.'
- '401 Unauthorized: User ID in the URL must match the ID in the sub claim of the
  JWT.'
- '403 Forbidden: Authentication failed for some reason.'
- '404 Not Found: The receipt(s) you requested could not be found.'
- '413 Max file size exceeded: The image you posted exceeded the limit of 5MB.'
- '415 Unsupported Media Type: Specified Content-Type is not supported.'
- '500 Internal Server Error: Something went wrong, and we’re probably already trying
  to fix it!'
- 200 OK
- REQUEST_LIMIT_EXCEEDED
- QUERY_TIMEOUT
- '400 missingRequiredParam: userId is required when connecting with a Company token'
- '400 missingRequiredParam: If userId is empty when connecting with a Company token.'
- '400 missingRequiredParam: UserId is required when connecting with a Company token'
- 400 missingRequiredParam
- '400 missingRequiredParam: Required parameters are not provided.'
- '400 missingRequiredParam: UserId is required when connecting with a Company token
  for traveler and Non traveler actions'
- '400 missingRequiredParam: userId is required when connecting with a Company token.'
- '400 missingRequiredParam: User ID is required when connecting with a Company token'
- '400 Bad Request: Invalid parameters'
- '401 Unauthorized: Missing or invalid token'
- '400 missingRequiredParam: If userId is empty.'
- '400 missingRequiredParam: UserId is required when connecting with a Company token.'
- '400 Bad Request: Check request parameters and data format.'
- '400 Bad Request: Invalid request parameters'
- '403 Forbidden: Insufficient permissions'
- '404 Not Found: Resource not found'
- '500 Internal Server Error: A server error occurred'
- '503 Internal Service Unavailable: Service is temporarily unavailable'
- 401 Unauthorized
- 503 Internal Service Unavailable
- '400 Bad Request: Check request parameters'
- '401 Unauthorized: Check token validity'
- '403 Forbidden: Verify permissions'
- '404 Not Found: Verify receipt or image ID'
- '500 Internal Server Error: Try again later'
- '503 Internal Service Unavailable: Service might be down'
- '204 No Content: Successfully processed the request.'
- '401 Unauthorized: Recheck OAuth scopes or token expiration.'
- '404 Not Found: Check the user ID and context.'
- 'Error in XML Document: There is an error in XML document (1, 147)'
- '401 Unauthorized: Check your authentication credentials'
- 'E001: No access to user data.'
- 'E002: Required Field Missing.'
- 'E003: User was not found in database.'
- 'E004: User is not a company admin.'
- 'E005: User is not an agency admin.'
- 'E006: Application UUID is null.'
- 'Error in XML Document: There is an error in XML document (1, 147).'
- 'ERROR: Details of the error will be provided.'
- 'E003: The user was not found in database.'
- 'E004: The user is not a company admin.'
- 'E005: The user is not an agency admin.'
- 'Status: ERROR - The details of the error.'
- '200: The extension completed the request successfully.'
- '200: The extension was not required to update a record for the request or an upstream
  process did not complete which blocked the extension.'
- 'HTTP Error code: An issue with the request operation. UPS will respond with an
  error code and message.'
- 'success: 200'
- 'no-op: 200'
- 'error: HTTP Error code'
- '400 Bad Request: Check the request parameters for correctness.'
- '401 Unauthorized: Ensure valid authentication credentials are provided.'
- '404 Not Found: The requested resource could not be found.'
- 501 Not Implemented
- 502 Bad Gateway
- 503 Service Unavailable
- 504 Gateway Timeout
- '400 Bad Request: Check the request parameters'
- '401 Unauthorized: Check the authentication credentials'
- '404 Not Found: Verify the endpoint and resource'
- '400: Bad Request'
- '401: Unauthorized'
- '409: Conflict'
- '429: Too Many Requests'
- '500: Internal Server Error/Not Closed'
- 'HTTP 400 Bad Request: user lives elsewhere'
- '401: Invalid or expired token'
- '403: Missing or invalid JWT'
- '404: Receipt not found'
- '500: Internal server error, retry 3 times'
- '503: Service unavailable, retry 3 times'
- '400 Bad Request: Indicates a problem with the request, such as missing context,
  incomplete review, invalid action, or missing approver.'
- '401 Unauthorized: Missing authorization header.'
- '403 Forbidden: User is not authorized to read the report.'
- '404 Not Found: Report ID not found.'
- '500 Internal Server Error: An error occurred on the server.'
- 'POST_FAILED: Ensure the document ID is acknowledged.'
- 'VALIDATION_ERROR: Check the data format in the request.'
- '400 Bad Request: user lives elsewhere'
- '401: Authentication related error. A 401 will be returned when the JWT used for
  authentication is valid, but doesn’t match the correct user.'
- '403: Authentication related error. A 403 will be returned if there is no JWT in
  the authorization header of the request, or if the JWT is invalid or expired.'
- '404: The receipt(s) you requested could not be found. Check that the receipt and/or
  user ID are correct.'
- '500: Internal server error. If you receive an error 500 while posting an eReceipt,
  you should retry the API at least 3 times.'
- '400 Bad Request: Check the filter syntax or request format'
- '401 Unauthorized: Verify token or scopes'
- '404 Not Found: Check the endpoint path'
- '400 Bad Request: Indicates a problem with the request.'
- '400 Bad Request: Invalid request format'
- '401 Unauthorized: Invalid or missing authentication token'
- '401 Unauthorized: Recheck OAuth credentials.'
- 'invalid request: user lives elsewhere'
- '16: invalid request, user lives elsewhere'
- '500/503: Provide retry logic for timeouts'
- 'Financial Posting Failed: Posting Failed'
- 'Posting Feedback: Posting Feedback'
- '400 Bad Request: Verify parameters and values in the request.'
- '401 Unauthorized: Check the token and scopes.'
- '404 Not Found: Ensure the endpoint URL is correct.'
- 'LastModifiedDate is required: Users who omit LastModifiedDate will receive an error.'
- '400 Bad Request: Check the request body for errors.'
- '401 Unauthorized: Recheck OAuth token or scopes.'
- 200 Success
- Cancelled Successfully
- 'S001: Success, no errors or warnings reported'
- 'E001: Cannot update this element: General/HasOpenBooking'
- 'W007: Required field not populated.'
- 'W011: Field cannot be changed.'
- '201 Created: Receipt successfully created.'
- '401 Unauthorized: Ensure the OAuth consumer has the proper user roles.'
- Sorry, you don’t have the right permissions to shop travel
- The link you followed to start your travel search was not properly formatted
- The property requested was not found
- No offers found for your search criteria
- 'HTTP/1.1 401 Unauthorized: Recheck OAuth scopes or token expiration'
- '400 Bad Request: Check the request parameters.'
- '400: Bad request'
- '400: Invalid client request. Request shouldn''t be retried without changing it.'
- '500: Error while processing the request. Request can be retried as is at a later
  time.'
- 400 Invalid client request. Request shouldn't be retried without changing it.
- 500 Error while processing the request. Request can be retried as is at a later
  time.
- '404: Reservation record not found'
- '501: Endpoint not implemented'
- '400 Bad Request: Some required parameters are missing or invalid.'
- '400 Bad Request: Check your request parameters or body.'
- '401 Unauthorized: Ensure your JWT is valid and not expired.'
auth_info:
  mentioned_objects:
  - OAuth 2.0
  - OauthToken
  - AuthProvider
  - NamedCredential
  - Oauth2
  - Scope
  - Web Services Administrator
  - App Management
  - Password grant
  - Client ID
  - Client Secret
  - Company Request Token
  - budgetitem.read
  - budgetitem.write
  - cards.bulkrequest.read
  - Bearer token
  - Bearer Token
  - travelrequest.write
  - travelrequest.externalsystemworkflow.write
  - spenddocs.receipts.read
  - spenddocs.compliance.read
  - spenddocs.receipts.write
  - spenddocs.receipts.writeOnly
  - travelallowance.itinerary.writeonly
  - travelallowance.itinerary.read
  - travelallowance.itineraryresult.read
  - travelallowance.configuration.read
  - access_token
  - refresh_token
  - Company JWT
  - User JWT
  - id_token
  - Authorization Grant
  - Company Level Authentication
  - client_credentials
  - TravelProfile
  - OAuthToken
  - UUID
  - provisioning request ID
  - JWT
  - Client Credentials
  - events.topic.read
  - travel.profile.user.event.read
  - Web Service Administrator
client:
  base_url: https://us.api.concursolutions.com
  auth:
    type: oauth2
    flow: password
    token_url: https://us.api.concursolutions.com/oauth2/v0/token
    client_id: <clientId>
    client_secret: <clientSecret>
source_metadata: null
