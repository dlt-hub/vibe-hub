resources:
- name: app_version
  endpoint:
    path: /app-version
    method: GET
- name: auth
  endpoint:
    path: /auth
    method: GET
- name: billing
  endpoint:
    path: /billing
    method: GET
- name: client
  endpoint:
    path: /client
    method: GET
- name: client_user
  endpoint:
    path: /client-user
    method: GET
- name: github
  endpoint:
    path: /github
    method: GET
- name: gitlab
  endpoint:
    path: /gitlab
    method: GET
- name: project
  endpoint:
    path: /project
    method: GET
- name: project_env
  endpoint:
    path: /project-env
    method: GET
- name: public_http_routing
  endpoint:
    path: /public-http-routing
    method: GET
- name: public_port_routing
  endpoint:
    path: /public-port-routing
    method: GET
- name: service_stack
  endpoint:
    path: /service-stack
    method: GET
- name: settings
  endpoint:
    path: /settings
    method: GET
- name: user
  endpoint:
    path: /user
    method: GET
- name: user_data
  endpoint:
    path: /user-data
    method: GET
- name: user_notification
  endpoint:
    path: /user-notification
    method: GET
- name: user_token
  endpoint:
    path: /user-token
    method: GET
- name: app_version
  endpoint:
    path: /app-version
    method: GET
- name: auth
  endpoint:
    path: /auth
    method: GET
- name: billing
  endpoint:
    path: /billing
    method: GET
- name: client
  endpoint:
    path: /client
    method: GET
- name: client_user
  endpoint:
    path: /client-user
    method: GET
- name: github
  endpoint:
    path: /github
    method: GET
- name: gitlab
  endpoint:
    path: /gitlab
    method: GET
- name: project
  endpoint:
    path: /project
    method: GET
- name: project_env
  endpoint:
    path: /project-env
    method: GET
- name: public_http_routing
  endpoint:
    path: /public-http-routing
    method: GET
- name: public_port_routing
  endpoint:
    path: /public-port-routing
    method: GET
- name: service_stack
  endpoint:
    path: /service-stack
    method: GET
- name: settings
  endpoint:
    path: /settings
    method: GET
- name: user
  endpoint:
    path: /user
    method: GET
- name: user_data
  endpoint:
    path: /user-data
    method: GET
- name: user_notification
  endpoint:
    path: /user-notification
    method: GET
- name: user_token
  endpoint:
    path: /user-token
    method: GET
- name: build
  endpoint:
    path: /features/pipeline
    method: GET
    data_selector: pipeline_data
- name: deployment
  endpoint:
    path: /features/deployment
    method: GET
    data_selector: deployment_data
- name: build_pipeline
  endpoint:
    path: /features/pipeline
    method: GET
    data_selector: pipelineData
    params: {}
- name: backup_management
  endpoint:
    path: /features/backup
    method: GET
    data_selector: backups
    params: {}
- name: nodejs_service
  endpoint:
    path: /projects/import
    method: POST
    data_selector: project
    params: {}
- name: CDN Management API
  endpoint:
    path: /api/rest/public/service-stack/{id}/cdn
    method: PUT
- name: Cache Purge API
  endpoint:
    path: /api/rest/public/project/{id}/purge-cdn/static/{domain}/{path}
    method: PUT
- name: my-first-project
  endpoint:
    path: /import-project
    method: POST
    data_selector: ''
    params: {}
- name: app
  endpoint:
    path: /services/app
    method: GET
    data_selector: records
    params: {}
- name: my-first-project
  endpoint:
    path: /import-project
    method: POST
    data_selector: project
    params: {}
- name: recipe-nodejs
  endpoint:
    path: /api/nodejs
    method: GET
    data_selector: records
    params: {}
- name: my-first-project
  endpoint:
    path: /go/how-to/create
    method: POST
    data_selector: services
    params:
      hostname: helloworld
      type: go@latest
      minContainers: 1
      maxContainers: 3
      buildFromGit: https://github.com/zeropsio/recipe-go-hello-world@main
      enableSubdomainAccess: true
- name: project
  endpoint:
    path: /projects
    method: POST
    data_selector: project
    params: {}
- name: service
  endpoint:
    path: /services
    method: POST
    data_selector: services
    params: {}
- name: my-first-project
  endpoint:
    path: /dotnet/how-to/create
    method: POST
    data_selector: project
- name: project
  endpoint:
    path: /import-project
    method: POST
    data_selector: project
    params: {}
- name: my-first-project
  endpoint:
    path: /import-project
    method: POST
    data_selector: project
    params: {}
- name: project
  endpoint:
    path: /import-project
    method: POST
    data_selector: project
- name: project
  endpoint:
    path: /import-project
    method: POST
    data_selector: projects
    params: {}
- name: service
  endpoint:
    path: /create-java-service
    method: POST
    data_selector: services
    params: {}
- name: my-first-project
  endpoint:
    path: /dotnet/how-to/create
    method: GET
    data_selector: projects
    params: {}
- name: project
  endpoint:
    path: /import-project
    method: POST
    data_selector: project
    params: {}
- name: recipe-bun
  endpoint:
    path: /api
    method: GET
    data_selector: message
    params: {}
- name: elixir_service
  endpoint:
    path: /elixir/overview
    method: GET
    data_selector: services
    params: {}
- name: my-first-project
  endpoint:
    path: /import-project
    method: POST
    data_selector: project
    params:
      project: my-first-project
- name: recipe-gleam
  endpoint:
    path: /gleam/how-to/create
    method: GET
    data_selector: projects
    params: {}
- name: Deno service
  endpoint:
    path: /deno/how-to/create
    method: POST
    data_selector: services
    params: {}
- name: PostgreSQL database
  endpoint:
    path: /postgresql@16
    method: POST
    data_selector: databases
    params: {}
- name: custom_redirects
  endpoint:
    path: /static/overview#custom-routing-configuration
    method: GET
    data_selector: redirects
    params: {}
- name: recipe-bun
  endpoint:
    path: /recipe-bun
    method: GET
    data_selector: message
    params: {}
- name: recipe-elixir
  endpoint:
    path: /elixir/how-to/create
    method: GET
    data_selector: message
    params: {}
- name: recipe-gleam
  endpoint:
    path: /api
    method: GET
    data_selector: message
- name: redirects
  endpoint:
    path: /static/routing/redirects
    method: GET
    data_selector: records
- name: cors
  endpoint:
    path: /static/routing/cors
    method: GET
    data_selector: records
- name: headers
  endpoint:
    path: /static/routing/headers
    method: GET
    data_selector: records
- name: routing
  endpoint:
    path: /routing
    method: GET
    data_selector: redirects
    params: {}
- name: docker_service
  endpoint:
    path: /docker/service
    method: GET
    data_selector: records
    params: {}
- name: static_service
  endpoint:
    path: /static/overview
    method: GET
    data_selector: records
- name: redirects
  endpoint:
    path: /static/overview#redirects
    method: GET
    data_selector: redirects
- name: routing
  endpoint:
    path: /static/overview#routing
    method: GET
    data_selector: routing
- name: cors
  endpoint:
    path: /static/overview#cors
    method: GET
    data_selector: cors
- name: headers
  endpoint:
    path: /static/overview#headers
    method: GET
    data_selector: headers
- name: Docker
  endpoint:
    path: /docker/overview
    method: GET
    data_selector: services
    params: {}
- name: app
  endpoint:
    path: /setup/app
    method: GET
    data_selector: records
- name: api
  endpoint:
    path: /setup/api
    method: GET
    data_selector: records
- name: app
  endpoint:
    path: /services/data/vXX.X/sobjects/App
    method: GET
- name: api
  endpoint:
    path: /services/data/vXX.X/sobjects/API
    method: GET
- name: app
  endpoint:
    path: /services/data/vXX.X/sobjects/App
    method: GET
- name: api
  endpoint:
    path: /services/data/vXX.X/sobjects/Api
    method: GET
- name: app
  endpoint:
    path: /services/data/vXX.X/sobjects/App
    method: GET
    data_selector: records
- name: api
  endpoint:
    path: /services/data/vXX.X/sobjects/Api
    method: GET
    data_selector: records
- name: app
  endpoint:
    path: /services/app
    method: POST
    data_selector: records
- name: api
  endpoint:
    path: /services/api
    method: GET
    data_selector: records
- name: app
  endpoint:
    path: /services/data/vXX.X/sobjects/App
    method: GET
    data_selector: records
- name: api
  endpoint:
    path: /services/data/vXX.X/sobjects/API
    method: GET
    data_selector: records
- name: app
  endpoint:
    path: /api/v1/app
    method: POST
- name: api
  endpoint:
    path: /api/v1/api
    method: GET
- name: app
  endpoint:
    path: /services/data/vXX.X/sobjects/App
    method: GET
- name: app
  endpoint:
    path: /services/data/vXX.X/sobjects/App
    method: GET
    data_selector: records
- name: api
  endpoint:
    path: /services/data/vXX.X/sobjects/API
    method: GET
    data_selector: records
- name: Bun
  endpoint:
    path: /bun
    method: GET
    data_selector: versions
    params: {}
- name: Deno
  endpoint:
    path: /deno
    method: GET
    data_selector: versions
    params: {}
- name: .NET
  endpoint:
    path: /dotnet
    method: GET
    data_selector: versions
    params: {}
- name: Elixir
  endpoint:
    path: /elixir
    method: GET
    data_selector: versions
    params: {}
- name: Gleam
  endpoint:
    path: /gleam
    method: GET
    data_selector: versions
    params: {}
- name: Go
  endpoint:
    path: /go
    method: GET
    data_selector: versions
    params: {}
- name: Java
  endpoint:
    path: /java
    method: GET
    data_selector: versions
    params: {}
- name: Node.js
  endpoint:
    path: /nodejs
    method: GET
    data_selector: versions
    params: {}
- name: Python
  endpoint:
    path: /python
    method: GET
    data_selector: versions
    params: {}
- name: Rust
  endpoint:
    path: /rust
    method: GET
    data_selector: versions
    params: {}
- name: PHP + Apache
  endpoint:
    path: /php-apache
    method: GET
    data_selector: versions
    params: {}
- name: PHP + nginx
  endpoint:
    path: /php-nginx
    method: GET
    data_selector: versions
    params: {}
- name: nginx
  endpoint:
    path: /nginx
    method: GET
    data_selector: versions
    params: {}
- name: static
  endpoint:
    path: /static
    method: GET
    data_selector: versions
    params: {}
- name: Alpine
  endpoint:
    path: /alpine
    method: GET
    data_selector: versions
    params: {}
- name: Ubuntu
  endpoint:
    path: /ubuntu
    method: GET
    data_selector: versions
    params: {}
- name: app
  endpoint:
    path: /zerops.yaml
    method: GET
- name: crontab
  endpoint:
    path: ''
    method: POST
    data_selector: ''
    params: {}
- name: runtime_services
  endpoint:
    path: /zerops-yaml/base-list/runtime-services
    method: GET
    data_selector: services
    params: {}
- name: static_services
  endpoint:
    path: /zerops-yaml/base-list/static-services
    method: GET
    data_selector: services
    params: {}
- name: containers_and_virtual_machines
  endpoint:
    path: /zerops-yaml/base-list/containers-and-virtual-machines
    method: GET
    data_selector: services
    params: {}
- name: cron_job
  endpoint:
    path: /run/crontab
    method: POST
    data_selector: jobs
    params: {}
- name: help
  endpoint:
    path: /zsc/help
    method: GET
    data_selector: commands
    params: {}
- name: backup-create
  endpoint:
    path: /backup-create
    method: POST
    data_selector: stackName
    params:
      stackName: <stackName>
- name: cdn
  endpoint:
    path: /cdn
    method: POST
    data_selector: command
    params: {}
- name: crontab
  endpoint:
    path: /crontab
    method: POST
    data_selector: command
    params: {}
- name: cdn
  endpoint:
    path: /cdn
    method: POST
- name: execOnce
  endpoint:
    path: /zsc/execOnce
    method: POST
- name: commands
  endpoint:
    path: /zsc/commands
    method: GET
    data_selector: commands
- name: backup
  endpoint:
    path: /zsc/backup
    method: POST
    data_selector: backups
- name: cdn
  endpoint:
    path: /zsc/cdn
    method: GET
    data_selector: cdn
- name: crontab
  endpoint:
    path: /zsc/crontab
    method: GET
    data_selector: crontab
- name: execOnce
  endpoint:
    path: /zsc/execOnce
    method: POST
    data_selector: executions
- name: install
  endpoint:
    path: /zsc/install
    method: POST
    data_selector: installations
- name: noop
  endpoint:
    path: /zsc/noop
    method: GET
    data_selector: noop
- name: object-storage
  endpoint:
    path: /zsc/object-storage
    method: GET
    data_selector: object_storage
- name: resources
  endpoint:
    path: /zsc/resources
    method: GET
    data_selector: resources
- name: scale
  endpoint:
    path: /zsc/scale
    method: POST
    data_selector: scaling
- name: setSecretEnv
  endpoint:
    path: /zsc/setSecretEnv
    method: POST
    data_selector: secrets
- name: mount
  endpoint:
    path: /shared-storage/mount
    method: POST
    data_selector: result
    params: {}
- name: unmount
  endpoint:
    path: /shared-storage/unmount
    method: POST
    data_selector: result
    params: {}
- name: wait
  endpoint:
    path: /shared-storage/wait
    method: POST
    data_selector: result
    params: {}
- name: backup-create
  endpoint:
    path: /zsc/backup-create
    method: POST
    data_selector: backup
    params: {}
- name: cdn
  endpoint:
    path: /zsc/cdn
    method: POST
    data_selector: cdn
    params: {}
- name: crontab
  endpoint:
    path: /zsc/crontab
    method: POST
    data_selector: crontab
    params: {}
- name: execOnce
  endpoint:
    path: /zsc/execOnce
    method: POST
    data_selector: execOnce
    params: {}
- name: install
  endpoint:
    path: /zsc/install
    method: POST
    data_selector: install
    params: {}
- name: noop
  endpoint:
    path: /zsc/noop
    method: POST
    data_selector: noop
    params: {}
- name: object-storage
  endpoint:
    path: /zsc/object-storage
    method: POST
    data_selector: object-storage
    params: {}
- name: resources
  endpoint:
    path: /zsc/resources
    method: GET
    data_selector: resources
    params: {}
- name: scale
  endpoint:
    path: /zsc/scale
    method: POST
    data_selector: scale
    params: {}
- name: setSecretEnv
  endpoint:
    path: /zsc/setSecretEnv
    method: POST
    data_selector: setSecretEnv
    params: {}
- name: backup_create
  endpoint:
    path: /backup-create
    method: POST
    data_selector: stackName
    params: {}
- name: cdn
  endpoint:
    path: /cdn
    method: POST
    data_selector: command
    params: {}
- name: crontab
  endpoint:
    path: /crontab
    method: POST
    data_selector: command
    params: {}
- name: cdn
  endpoint:
    path: /cdn
    method: POST
    data_selector: purge
    params: {}
- name: object-storage
  endpoint:
    path: /object-storage
    method: POST
    data_selector: backup
    params: {}
- name: shared_storage_commands
  endpoint:
    path: /shared-storage
    method: GET
    data_selector: commands
    params: {}
- name: list_backups
  endpoint:
    path: /object-storage/list
    method: GET
    data_selector: backups
    params: {}
- name: create_backup
  endpoint:
    path: /object-storage/backup
    method: POST
    data_selector: backup
    params: {}
- name: restore_backup
  endpoint:
    path: /object-storage/restore
    method: POST
    data_selector: restore
    params: {}
- name: truncate_backups
  endpoint:
    path: /object-storage/truncate
    method: POST
    data_selector: truncate
    params: {}
- name: execOnce
  endpoint:
    path: /zsc/execOnce
    method: POST
    data_selector: response
    params: {}
- name: backup-create
  endpoint:
    path: /zsc/backup-create
    method: POST
    data_selector: response
    params: {}
- name: cdn
  endpoint:
    path: /zsc/cdn
    method: POST
    data_selector: response
    params: {}
- name: crontab
  endpoint:
    path: /zsc/crontab
    method: POST
    data_selector: response
    params: {}
- name: fail-me
  endpoint:
    path: /zsc/fail-me
    method: POST
    data_selector: response
    params: {}
- name: install
  endpoint:
    path: /zsc/install
    method: POST
    data_selector: response
    params: {}
- name: backup-create
  endpoint:
    path: /backup-create
    method: POST
    data_selector: backup
    params: {}
- name: cdn
  endpoint:
    path: /cdn
    method: POST
    data_selector: cdn
    params: {}
- name: crontab
  endpoint:
    path: /crontab
    method: POST
    data_selector: crontab
    params: {}
- name: execOnce
  endpoint:
    path: /execOnce
    method: POST
    data_selector: execOnce
    params: {}
- name: install
  endpoint:
    path: /install
    method: POST
    data_selector: install
    params: {}
- name: noop
  endpoint:
    path: /noop
    method: POST
    data_selector: noop
    params: {}
- name: object-storage
  endpoint:
    path: /object-storage
    method: POST
    data_selector: object-storage
    params: {}
- name: resources
  endpoint:
    path: /resources
    method: GET
    data_selector: resources
    params: {}
- name: scale
  endpoint:
    path: /scale
    method: POST
    data_selector: scale
    params: {}
- name: setSecretEnv
  endpoint:
    path: /setSecretEnv
    method: POST
    data_selector: setSecretEnv
    params: {}
- name: backup-create
  endpoint:
    path: /zsc/backup-create
    method: POST
    data_selector: backup
    params: {}
- name: cdn
  endpoint:
    path: /zsc/cdn
    method: POST
    data_selector: cdn
    params: {}
- name: crontab
  endpoint:
    path: /zsc/crontab
    method: POST
    data_selector: crontab
    params: {}
- name: execOnce
  endpoint:
    path: /zsc/execOnce
    method: POST
    data_selector: execOnce
    params: {}
- name: install
  endpoint:
    path: /zsc/install
    method: POST
    data_selector: install
    params: {}
- name: noop
  endpoint:
    path: /zsc/noop
    method: POST
    data_selector: noop
    params: {}
- name: object-storage
  endpoint:
    path: /zsc/object-storage
    method: POST
    data_selector: object-storage
    params: {}
- name: resources
  endpoint:
    path: /zsc/resources
    method: GET
    data_selector: resources
    params: {}
- name: scale
  endpoint:
    path: /zsc/scale
    method: POST
    data_selector: scale
    params: {}
- name: setSecretEnv
  endpoint:
    path: /zsc/setSecretEnv
    method: POST
    data_selector: setSecretEnv
    params: {}
- name: mount
  endpoint:
    path: /shared-storage/mount
    method: POST
- name: unmount
  endpoint:
    path: /shared-storage/unmount
    method: POST
- name: wait
  endpoint:
    path: /shared-storage/wait
    method: POST
- name: list
  endpoint:
    path: /object-storage/list
    method: GET
    params:
      storage: <storage-name>
      name: <backup-name>
- name: backup
  endpoint:
    path: /object-storage/backup
    method: POST
    params:
      storage: <storage-name>
      name: <backup-name>
- name: restore
  endpoint:
    path: /object-storage/restore
    method: POST
    params:
      storage: <storage-name>
      name: <backup-name>
- name: truncate
  endpoint:
    path: /object-storage/truncate
    method: POST
    params:
      storage: <storage-name>
      name: <backup-name>
- name: backup-create
  endpoint:
    path: /zsc/backup-create
    method: POST
    data_selector: backup
    params: {}
- name: cdn
  endpoint:
    path: /zsc/cdn
    method: POST
    data_selector: cdn_commands
    params: {}
- name: crontab
  endpoint:
    path: /zsc/crontab
    method: POST
    data_selector: crontab_commands
    params: {}
- name: execOnce
  endpoint:
    path: /zsc/execOnce
    method: POST
    data_selector: exec_commands
    params: {}
- name: install
  endpoint:
    path: /zsc/install
    method: POST
    data_selector: installation_commands
    params: {}
- name: object-storage
  endpoint:
    path: /zsc/object-storage
    method: POST
    data_selector: object_storage_commands
    params: {}
- name: resources
  endpoint:
    path: /zsc/resources
    method: GET
    data_selector: resource_scaling
    params: {}
- name: scale
  endpoint:
    path: /zsc/scale
    method: POST
    data_selector: scaling_commands
    params: {}
- name: setSecretEnv
  endpoint:
    path: /zsc/setSecretEnv
    method: POST
    data_selector: secret_env_commands
    params: {}
- name: mount
  endpoint:
    path: /shared-storage/mount
    method: POST
- name: unmount
  endpoint:
    path: /shared-storage/unmount
    method: POST
- name: wait
  endpoint:
    path: /shared-storage/wait
    method: GET
- name: backup-create
  endpoint:
    path: /backup-create
    method: POST
- name: cdn
  endpoint:
    path: /cdn
    method: POST
- name: crontab
  endpoint:
    path: /crontab
    method: POST
- name: execOnce
  endpoint:
    path: /execOnce
    method: POST
- name: install
  endpoint:
    path: /install
    method: POST
- name: noop
  endpoint:
    path: /noop
    method: POST
- name: object-storage
  endpoint:
    path: /object-storage
    method: POST
- name: resources
  endpoint:
    path: /resources
    method: GET
- name: scale
  endpoint:
    path: /scale
    method: POST
- name: setSecretEnv
  endpoint:
    path: /setSecretEnv
    method: POST
- name: commands
  endpoint:
    path: /zsc/commands
    method: GET
    data_selector: commands
- name: resources
  endpoint:
    path: /zsc/resources
    method: GET
    data_selector: resources
- name: mount
  endpoint:
    path: /shared-storage/mount
    method: POST
- name: unmount
  endpoint:
    path: /shared-storage/unmount
    method: POST
- name: wait
  endpoint:
    path: /shared-storage/wait
    method: POST
- name: mount
  endpoint:
    path: /shared-storage/mount
    method: POST
    data_selector: result
- name: unmount
  endpoint:
    path: /shared-storage/unmount
    method: POST
    data_selector: result
- name: wait
  endpoint:
    path: /shared-storage/wait
    method: POST
    data_selector: result
- name: backup-create
  endpoint:
    path: /zsc/backup-create
    method: POST
    data_selector: backup
    params: {}
- name: cdn
  endpoint:
    path: /zsc/cdn
    method: POST
    data_selector: cdn
    params: {}
- name: crontab
  endpoint:
    path: /zsc/crontab
    method: POST
    data_selector: crontab
    params: {}
- name: install
  endpoint:
    path: /zsc/install
    method: POST
    data_selector: install
    params: {}
- name: object-storage
  endpoint:
    path: /zsc/object-storage
    method: POST
    data_selector: object-storage
    params: {}
- name: resources
  endpoint:
    path: /zsc/resources
    method: GET
    data_selector: resources
    params: {}
- name: scale
  endpoint:
    path: /zsc/scale
    method: POST
    data_selector: scale
    params: {}
- name: setSecretEnv
  endpoint:
    path: /zsc/setSecretEnv
    method: POST
    data_selector: setSecretEnv
    params: {}
- name: backup-create
  endpoint:
    path: /zsc/backup-create
    method: POST
    data_selector: result
    params: {}
- name: cdn
  endpoint:
    path: /zsc/cdn
    method: POST
    data_selector: result
    params: {}
- name: crontab
  endpoint:
    path: /zsc/crontab
    method: POST
    data_selector: result
    params: {}
- name: execOnce
  endpoint:
    path: /zsc/execOnce
    method: POST
    data_selector: result
    params: {}
- name: fail-me
  endpoint:
    path: /zsc/fail-me
    method: POST
    data_selector: result
    params: {}
- name: install
  endpoint:
    path: /zsc/install
    method: POST
    data_selector: result
    params: {}
- name: noop
  endpoint:
    path: /zsc/noop
    method: POST
    data_selector: result
    params: {}
- name: object-storage
  endpoint:
    path: /zsc/object-storage
    method: POST
    data_selector: result
    params: {}
- name: resources
  endpoint:
    path: /zsc/resources
    method: GET
    data_selector: result
    params: {}
- name: scale
  endpoint:
    path: /zsc/scale
    method: POST
    data_selector: result
    params: {}
- name: setSecretEnv
  endpoint:
    path: /zsc/setSecretEnv
    method: POST
    data_selector: result
    params: {}
- name: mount
  endpoint:
    path: /shared-storage/mount
    method: POST
    data_selector: response
    params: {}
- name: unmount
  endpoint:
    path: /shared-storage/unmount
    method: POST
    data_selector: response
    params: {}
- name: wait
  endpoint:
    path: /shared-storage/wait
    method: GET
    data_selector: response
    params: {}
- name: mount
  endpoint:
    path: /shared-storage/mount
    method: POST
    data_selector: result
    params: {}
- name: unmount
  endpoint:
    path: /shared-storage/unmount
    method: POST
    data_selector: result
    params: {}
- name: wait
  endpoint:
    path: /shared-storage/wait
    method: GET
    data_selector: result
    params: {}
- name: DNS Record Configuration
  endpoint:
    path: /networking/cloudflare/dns-record-configuration
    method: GET
    data_selector: records
- name: SSL/TLS Configuration
  endpoint:
    path: /networking/cloudflare/ssltls-configuration
    method: GET
    data_selector: records
- name: backup-create
  endpoint:
    path: backup-create
    method: POST
    data_selector: backup
    params: {}
- name: cdn
  endpoint:
    path: cdn
    method: POST
    data_selector: cdn
    params: {}
- name: crontab
  endpoint:
    path: crontab
    method: GET
    data_selector: crontab
    params: {}
- name: execOnce
  endpoint:
    path: execOnce
    method: POST
    data_selector: execOnce
    params: {}
- name: install
  endpoint:
    path: install
    method: POST
    data_selector: install
    params: {}
- name: noop
  endpoint:
    path: noop
    method: POST
    data_selector: noop
    params: {}
- name: object-storage
  endpoint:
    path: object-storage
    method: POST
    data_selector: object-storage
    params: {}
- name: resources
  endpoint:
    path: resources
    method: GET
    data_selector: resources
    params: {}
- name: scale
  endpoint:
    path: scale
    method: POST
    data_selector: scale
    params: {}
- name: setSecretEnv
  endpoint:
    path: setSecretEnv
    method: POST
    data_selector: setSecretEnv
    params: {}
- name: dns_record
  endpoint:
    path: /dns_records
    method: GET
    data_selector: records
    params: {}
- name: mount
  endpoint:
    path: /shared-storage/mount
    method: POST
- name: unmount
  endpoint:
    path: /shared-storage/unmount
    method: POST
- name: wait
  endpoint:
    path: /shared-storage/wait
    method: GET
- name: backup-create
  endpoint:
    path: /backup-create
    method: POST
    data_selector: backup
    params: {}
- name: cdn
  endpoint:
    path: /cdn
    method: POST
    data_selector: cdn
    params: {}
- name: crontab
  endpoint:
    path: /crontab
    method: POST
    data_selector: crontab
    params: {}
- name: execOnce
  endpoint:
    path: /execOnce
    method: POST
    data_selector: execOnce
    params: {}
- name: install
  endpoint:
    path: /install
    method: POST
    data_selector: install
    params: {}
- name: noop
  endpoint:
    path: /noop
    method: POST
    data_selector: noop
    params: {}
- name: object-storage
  endpoint:
    path: /object-storage
    method: POST
    data_selector: object-storage
    params: {}
- name: resources
  endpoint:
    path: /resources
    method: GET
    data_selector: resources
    params: {}
- name: scale
  endpoint:
    path: /scale
    method: POST
    data_selector: scale
    params: {}
- name: setSecretEnv
  endpoint:
    path: /setSecretEnv
    method: POST
    data_selector: setSecretEnv
    params: {}
- name: mount
  endpoint:
    path: /shared-storage/mount
    method: POST
    data_selector: result
    params: {}
- name: unmount
  endpoint:
    path: /shared-storage/unmount
    method: POST
    data_selector: result
    params: {}
- name: wait
  endpoint:
    path: /shared-storage/wait
    method: POST
    data_selector: result
    params: {}
- name: connection_handling
  endpoint:
    path: /config/connection
    method: GET
    data_selector: settings
    params: {}
- name: client_request_settings
  endpoint:
    path: /config/client-request
    method: GET
    data_selector: settings
    params: {}
- name: buffer_settings
  endpoint:
    path: /config/buffer
    method: GET
    data_selector: settings
    params: {}
- name: proxy_settings
  endpoint:
    path: /config/proxy
    method: GET
    data_selector: settings
    params: {}
- name: performance_optimization
  endpoint:
    path: /config/performance
    method: GET
    data_selector: settings
    params: {}
- name: file_cache_settings
  endpoint:
    path: /config/cache
    method: GET
    data_selector: settings
    params: {}
- name: security_settings
  endpoint:
    path: /config/security
    method: GET
    data_selector: settings
    params: {}
- name: advanced_routing_features
  endpoint:
    path: /config/routing
    method: GET
    data_selector: settings
    params: {}
- name: project
  endpoint:
    path: /projects
    method: GET
    data_selector: projects
- name: service
  endpoint:
    path: /services
    method: GET
    data_selector: services
- name: backup-create
  endpoint:
    path: /backup-create
    method: POST
    data_selector: backup
    params: {}
- name: cdn
  endpoint:
    path: /cdn
    method: POST
    data_selector: cdn
    params: {}
- name: crontab
  endpoint:
    path: /crontab
    method: POST
    data_selector: crontab
    params: {}
- name: execOnce
  endpoint:
    path: /execOnce
    method: POST
    data_selector: execOnce
    params: {}
- name: install
  endpoint:
    path: /install
    method: POST
    data_selector: install
    params: {}
- name: noop
  endpoint:
    path: /noop
    method: POST
    data_selector: noop
    params: {}
- name: object-storage
  endpoint:
    path: /object-storage
    method: POST
    data_selector: object-storage
    params: {}
- name: resources
  endpoint:
    path: /resources
    method: GET
    data_selector: resources
    params: {}
- name: scale
  endpoint:
    path: /scale
    method: POST
    data_selector: scale
    params: {}
- name: setSecretEnv
  endpoint:
    path: /setSecretEnv
    method: POST
    data_selector: setSecretEnv
    params: {}
- name: project
  endpoint:
    path: /api/projects
    method: POST
    data_selector: project
    params: {}
- name: services
  endpoint:
    path: /api/services
    method: POST
    data_selector: services
    params: {}
- name: mount
  endpoint:
    path: /shared-storage/mount
    method: POST
- name: unmount
  endpoint:
    path: /shared-storage/unmount
    method: POST
- name: wait
  endpoint:
    path: /shared-storage/wait
    method: POST
- name: project
  endpoint:
    path: /projects
    method: GET
    data_selector: projects
    params: {}
- name: services
  endpoint:
    path: /services
    method: GET
    data_selector: services
    params: {}
- name: project
  endpoint:
    path: /api/projects
    method: POST
    data_selector: project
    params: {}
- name: service
  endpoint:
    path: /api/services
    method: POST
    data_selector: service
    params: {}
- name: DNS Configuration
  endpoint:
    path: /references/networking/dns
    method: GET
    data_selector: records
    params: {}
- name: dns_record_configuration
  endpoint:
    path: /references/networking/cloudflare#dns-record-configuration
    method: GET
    data_selector: records
    params: {}
- name: wildcard_domain_configuration
  endpoint:
    path: /references/networking/cloudflare#wildcard-domain-configuration
    method: GET
    data_selector: records
    params: {}
- name: ssl_certificate_problems
  endpoint:
    path: /references/networking/cloudflare#ssl-certificate-problems
    method: GET
    data_selector: records
    params: {}
- name: cloudflare_ssl_tls_configuration
  endpoint:
    path: /references/networking/cloudflare#cloudflare-ssltls-configuration
    method: GET
    data_selector: records
    params: {}
- name: DNS Record Configuration
  endpoint:
    path: /networking/cloudflare#dns-record-configuration
    method: GET
    data_selector: records
    params: {}
- name: Wildcard Domain Configuration
  endpoint:
    path: /networking/cloudflare#wildcard-domain-configuration
    method: GET
    data_selector: records
    params: {}
- name: SSL/TLS Configuration
  endpoint:
    path: /networking/cloudflare#cloudflare-ssltls-configuration
    method: GET
    data_selector: records
    params: {}
- name: mount_shared_storage
  endpoint:
    path: /references/import#service-mount-shared-storage
    method: GET
    data_selector: mount
    params: {}
- name: nginx_configuration
  endpoint:
    path: /references/import#service-nginx-configuration
    method: GET
    data_selector: nginxConfig
    params: {}
- name: zerops_yaml_configuration
  endpoint:
    path: /references/import#service-zerops.yaml-configuration
    method: GET
    data_selector: zeropsYaml
    params: {}
- name: GitHub Integration
  endpoint:
    path: /settings/token-management
    method: GET
- name: connection_handling
  endpoint:
    path: /connection-handling
    method: GET
    data_selector: settings
    params: {}
- name: client_request_settings
  endpoint:
    path: /client-request-settings
    method: GET
    data_selector: settings
    params: {}
- name: buffer_settings
  endpoint:
    path: /buffer-settings
    method: GET
    data_selector: settings
    params: {}
- name: proxy_settings
  endpoint:
    path: /proxy-settings
    method: GET
    data_selector: settings
    params: {}
- name: performance_optimization
  endpoint:
    path: /performance-optimization
    method: GET
    data_selector: settings
    params: {}
- name: file_cache_settings
  endpoint:
    path: /file-cache-settings
    method: GET
    data_selector: settings
    params: {}
- name: security_settings
  endpoint:
    path: /security-settings
    method: GET
    data_selector: settings
    params: {}
- name: advanced_routing_features
  endpoint:
    path: /advanced-routing-features
    method: GET
    data_selector: features
    params: {}
- name: email_sending
  endpoint:
    path: /send/email
    method: POST
    data_selector: response
    params: {}
- name: project
  endpoint:
    path: /projects
    method: GET
    data_selector: projects
- name: service
  endpoint:
    path: /services
    method: GET
    data_selector: services
- name: project_core_plans
  endpoint:
    path: /company/pricing#project-core-plans
    method: GET
    data_selector: plans
    params: {}
- name: resource_pricing
  endpoint:
    path: /company/pricing#resource-pricing
    method: GET
    data_selector: resources
    params: {}
- name: additional_services
  endpoint:
    path: /company/pricing#additional-services
    method: GET
    data_selector: services
    params: {}
- name: overage_costs
  endpoint:
    path: /company/pricing#overage-costs
    method: GET
    data_selector: overages
    params: {}
- name: project
  endpoint:
    path: /projects
    method: POST
    data_selector: project
    params: {}
- name: service
  endpoint:
    path: /services
    method: POST
    data_selector: services
    params: {}
- name: project
  endpoint:
    path: /api/v1/projects
    method: POST
    data_selector: project
    params: {}
- name: service
  endpoint:
    path: /api/v1/services
    method: POST
    data_selector: service
    params: {}
- name: project
  endpoint:
    path: /project
    method: GET
    data_selector: data
- name: service
  endpoint:
    path: /service
    method: GET
    data_selector: data
- name: project
  endpoint:
    path: /projects
    method: POST
    data_selector: projects
- name: service
  endpoint:
    path: /services
    method: POST
    data_selector: services
- name: mount_shared_storage
  endpoint:
    path: /references/import#service-mount-shared-storage
    method: GET
    data_selector: services
    params: {}
- name: nginx_configuration
  endpoint:
    path: /references/import#service-nginx-configuration
    method: GET
    data_selector: services
    params: {}
- name: zerops_yaml_configuration
  endpoint:
    path: /references/import#service-zeropsyaml-configuration
    method: GET
    data_selector: services
    params: {}
- name: Lightweight Core
  endpoint:
    path: /company/pricing#lightweight-core---free
    method: GET
    data_selector: resources
    params: {}
- name: Serious Core
  endpoint:
    path: /company/pricing#serious-core---10--30-days
    method: GET
    data_selector: resources
    params: {}
- name: Zerops Assets
  endpoint:
    path: /brand/zerops-assets.zip
    method: GET
- name: Brand Guidelines
  endpoint:
    path: /company/branding#brand-guidelines
    method: GET
notes:
- Uses a customizable build and runtime environment
- Supports continuous and on-demand deployment
- By default, your services are not publicly accessible until you configure external
  access.
- Internal communication between services within the same project works automatically.
- Zerops provides a customizable build and runtime environment for your application.
- Your application must be redeployed when updating environmental variables in `zerops.yaml`.
- Services need to be reloaded when updating secret variables.
- Backup data is automated, secure, and runs daily between 00:00:00 UTC and 01:00:00
  UTC.
- Backups with protected tags and the minimum required time-based backups will always
  be kept.
- Wildcard Domains Not Supported
- Static CDN cannot be activated for wildcard domains (e.g., *.example.com). You must
  use specific domain names.
- New Zerops accounts receive $15 in free credits for testing.
- After verifying your account with a $10 initial payment, you'll get an additional
  $50 in credits.
- Backup frequency is daily between 00:00:00 UTC and 01:00:00 UTC by default.
- Manual backups don't get automatic time-based tags.
- A subdomain should have been enabled and visible in the project's IP addressed &
  Public Routing Overview box.
- The format of the subdomain URL should look similar to this https://helloworld-24-8080.prg1.zerops.app.
- Subdomain access is enabled for the project.
- Uses Zerops GUI for service configuration
- A subdomain is enabled and visible in the project's IP addressed & Public Routing
  Overview box.
- This is a simple Elixir application running on Zerops.io.
- SPAs work out of the box without any additional configuration.
- 'The cors directive has a special case: if you specify just "*", it''s automatically
  converted to ''*'''
- A subdomain should be enabled and visible in the project's IP addressed & Public
  Routing Overview box.
- Single Page Applications work out of the box without any additional configuration.
- When using preservePath with wildcards, ensure the to path ends with a / to maintain
  proper path concatenation.
- If you specify Access-Control headers in the headers directive, they will override
  the ones set by cors for that specific path.
- Always use specific version tags (like 1.0.0) instead of :latest. Zerops caches
  the prepareCommands output, which means a new :latest image won't be automatically
  pulled on subsequent deployments unless the cache is manually cleared or the commands
  change.
- Requires Restart
- Changes to HEAP_PERCENT require a service restart to take effect.
- CORS is enabled by default, allowing direct access from browser-based clients.
- 'CORS directive has a special case: if you specify just ''*'' it’s converted to
  ''*'' automatically.'
- Store sensitive keys (`masterKey`, `defaultAdminKey`) securely in backend services
- Use `defaultSearchKey` or custom keys with minimal permissions for frontend
- Rotate custom keys periodically
- Uses specific version tags instead of :latest for Docker images.
- VM overhead must be considered in resource planning.
- API key authentication is required for both HTTP and gRPC API calls.
- Service automatically installs specified plugins during initialization
- Changes to HEAP_PERCENT require a service restart to take effect
- Configuration changes require a service restart to take effect.
- Disabling JetStream can reduce resource utilization for applications that don't
  require message persistence.
- CORS is enabled by default
- The master API key cannot be modified after generation
- Use for development or non-critical data only, as data loss may occur due to container
  volatility.
- Deployment mode is selected during service creation and cannot be changed later.
- Use for development purposes or non-critical data only. Make sure to have backups
  enabled if using in production, as you can lose your data due to container volatility.
- Never expose masterKey in application code or frontend
- Use defaultSearchKey for frontend implementations
- The zerops.yaml file is crucial for defining how Zerops should build and deploy
  your application.
- Use HA mode for all production deployments
- Single node instances are suitable for development and testing
- Multiple services can be defined in a single zerops.yaml.
- The zerops.yaml file must be added to the root of your repository.
- Health checks continuously monitor your running application, while readiness checks
  verify if a new deployment is ready to receive traffic.
- Cron jobs are scheduled commands that execute automatically inside a service's containers
  based on defined timing rules.
- Personal tokens allow you to securely access Zerops directly.
- You may delete an access token anytime.
- Zerops Setup Control is a command-line utility automatically installed in all Zerops
  containers.
- This command must be executed in any container within the project that has the CDN-enabled
  domain active
- Currently, the purge command only works for the Static Mode CDN
- Zerops Setup Control provides essential capabilities for container management.
- Commands can be executed manually or automated using zerops.yaml.
- Zerops Setup Control (zsc) is a command-line utility for container management.
- Resource adjustments take effect within approximately 10 seconds
- The container cannot be scaled above or below its max/min resources set in the vertical
  autoscaling configuration
- If you scale to a value that exceeds the maximum set limit (e.g., 10GB RAM when
  max is 5GB), the container will only receive the maximum allowed resources
- If service limits are changed while custom scaling is active, the container will
  automatically adjust to the new boundaries
- If the service auto-scaling configuration is updated, you must call the scale command
  again to apply custom scaling
- 'Caution: If there are insufficient resources on the current server, the container
  might be moved to another node with available resources, which will reset the scale
  duration'
- The container will scale down automatically if resources are not utilized, or if
  the scale command duration expires
- Do not use `https://` when communicating between runtime services in the same project.
- The internal communication is done over a private network and is isolated from other
  projects.
- Uses wildcard domains to route all subdomains to your project.
- Cloudflare handles IPv4 to IPv6 translation, making your service accessible to both
  IPv4 and IPv6 users.
- Do not add a proxied A record with shared IPv4 when using this setup, as it would
  prevent proper IPv4 traffic routing.
- Zerops supports wildcard domains (`*.<your-domain>`).
- Never use Flexible mode - this will cause redirect loops.
- Always use Full (strict) SSL mode for production
- Do not add a proxied A record with shared IPv4 when using IPv6 only setup
- First-time zcli vpn up usage requires installing the Zerops VPN daemon.
- Only one project connection is possible at a time.
- SSH access is available only for runtime services and web servers.
- Database services, message brokers, and object storage are not accessible via SSH.
- No restrictions on UDP ports
- 'TCP ports 1-1024: 22 (SSH), 53 (DNS), 80 (HTTP), 123 (NTP), 443 (HTTPS), 587 (SMTP
  with STARTTLS) are allowed; all other TCP ports in this range are blocked'
- 'TCP ports 1025-65535: No restrictions'
- The Zerops YAML configuration can be used to create or replicate services in Zerops.
- Both methods provide straightforward ways to migrate or replicate infrastructure
  as needed.
- Zerops Setup Control is a command-line utility for managing container environments.
- Commands can be executed manually or as part of the zerops.yaml configuration file.
- The corePackage value can be upgraded later from Lightweight to Serious Core, but
  cannot be downgraded.
- The Zerops YAML configuration provides powerful capabilities for both importing
  and exporting projects and services.
- Do not use https:// when communicating between runtime services in the same project.
- No environment variables are available when connected through VPN.
- Make sure your proxy service supports IPv4 to IPv6 translation for this configuration
  to work for both IPv4 and IPv6 users.
- Adding AAAA record is essential for shared IPv4 configuration as it serves as a
  security measure to prevent unauthorized domain claims.
- Do not add a proxied A record with shared IPv4 when using IPv6 only setup.
- Ensure Always Use HTTPS is properly configured.
- Cloudflare handles IPv4 to IPv6 translation.
- Both A + AAAA records are required for shared IPv4 configuration.
- Adding the AAAA record allows visitors with IPv6 support to connect directly via
  IPv6.
- Both A + AAAA Required for shared IPv4 configuration as it serves as a security
  measure to prevent unauthorized domain claims.
- Web Terminal access is never blocked by these rules and remains available as an
  emergency access method.
- Zerops requires full access to your repository in order to configure webhooks and
  pull the latest code changes.
- Keep your access token secure and never commit it directly to your repository.
- Zerops requires full access to configure webhooks and download your code. Your source
  code is not stored after the build process.
- To skip triggering a build for a specific commit, you can include `ci skip` or `skip
  ci` in your commit message (case insensitive).
- Port 587 is mandatory for all SMTP configurations in Zerops.
- Ports 25 and 465 are blocked for security reasons.
- Zerops automatically collects logs from all services in your project through a built-in
  logger service.
- No restrictions on UDP ports.
- TCP ports 1-1024 have specific ports allowed; all others are blocked for security
  reasons.
- For additional port access, contact Zerops support.
- Zerops provides a straightforward pricing structure based on your project type and
  resource usage.
- Credits are deducted hourly based on actual usage.
- Don't modify the logos or badges in any way
- Maintain adequate spacing around the assets
- Use the provided color versions (light/dark) as appropriate
- Don't use the Zerops logo or badges in a way that suggests partnership or endorsement
  without permission
- Don't use the assets as your own branding or as part of your logo
- The project name must be unique.
- Environment variables are defined at the project level.
- Zerops does not store your source code unless explicitly specified by you.
- Other ports (25, 465) are blocked for security reasons.
- Resources are allocated per service and billed by the minute.
- You're only charged for what you use, calculated down to the minute.
errors:
- 'REQUEST_LIMIT_EXCEEDED: Throttle API calls or reduce frequency'
- 'QUERY_TIMEOUT: Break down filters or add selectivity'
- High backup frequency, long retention periods, or many protected tags can lead to
  exceeding free tier limits or approaching technical maximums.
- '404 Not Found: Check URL structure and content at origin.'
- '401 Unauthorized: Recheck OAuth scopes or token expiration'
- '503 Not Ready or Lagging: Requests may temporarily receive this response during
  node failures.'
- '500 Could not find a leader: Requests may temporarily receive this response during
  leader transitions.'
- Check if your instance is in the correct environment mode
- Ensure your API keys have the necessary permissions
- Confirm your service is running and healthy in the Zerops dashboard
- '503 Not Ready or Lagging: Requests may temporarily receive this response during
  leader transitions'
- '500 Could not find a leader: This state resolves automatically once consensus is
  reestablished'
- Verify you're using the correct key type for your operation (search vs. admin)
- 'Too many redirects: Verify SSL/TLS mode is set to Full or Full (strict), not Flexible'
- 'Domain not resolving: Confirm DNS records are correctly configured in Cloudflare'
- 'ERR /opt/homebrew/bin/wg-quick up /opt/homebrew/etc/wireguard/zerops.conf: [+]
  Interface for zerops is utun6 wg-quick: ''zerops'' already exists as ''utun6'''
- 'could not translate host name ''hostname'' to address: nodename nor servname provided,
  or not known'
- Be careful with block rules - they can prevent expected SSH access even when allow
  rules are present.
- 'Interface for zerops is utun6 wg-quick: ''zerops'' already exists as ''utun6'''
- Unauthorized use of infrastructure for spam or network attacks.
- Potential security threats.
- Non-compliance with security best practices.
auth_info:
  mentioned_objects:
  - objectstorage_apiUrl
  - objectstorage_accessKeyId
  - objectstorage_secretAccessKey
  - objectstorage_bucketName
client:
  base_url: https://app.zerops.io
  headers:
    Accept: application/json
source_metadata: null
