resources:
- name: automate_chrome_firefox
  endpoint:
    path: /automate/chrome-firefox
    method: GET
    data_selector: features
- name: puppeteer_features_not_supported
  endpoint:
    path: /puppeteer/features/not_supported
    method: GET
    data_selector: features
- name: puppeteer_features_fully_supported
  endpoint:
    path: /puppeteer/features/fully_supported
    method: GET
    data_selector: features
- name: puppeteer
  endpoint:
    path: /
    method: GET
    data_selector: records
    params: {}
- name: launch
  endpoint:
    path: /next/api/puppeteer.puppeteernode.launch
    method: GET
    data_selector: methods
    params: {}
- name: connect
  endpoint:
    path: /next/api/puppeteer.puppeteernode.connect
    method: GET
    data_selector: methods
    params: {}
- name: defaultArgs
  endpoint:
    path: /next/api/puppeteer.puppeteernode.defaultargs
    method: GET
    data_selector: methods
    params: {}
- name: executablePath
  endpoint:
    path: /next/api/puppeteer.puppeteernode.executablepath
    method: GET
    data_selector: methods
    params: {}
- name: trimCache
  endpoint:
    path: /next/api/puppeteer.puppeteernode.trimcache
    method: GET
    data_selector: methods
    params: {}
- name: Accessibility
  endpoint:
    path: /next/api/puppeteer.accessibility
    method: GET
- name: Accessibility.snapshot
  endpoint:
    path: /next/api/puppeteer.accessibility.snapshot
    method: GET
- name: browser_contexts
  endpoint:
    path: /next/api/puppeteer.browser.browsercontexts
    method: GET
    data_selector: contexts
- name: close
  endpoint:
    path: /next/api/puppeteer.browser.close
    method: POST
    data_selector: close
- name: cookies
  endpoint:
    path: /next/api/puppeteer.browser.cookies
    method: GET
    data_selector: cookies
- name: create_browser_context
  endpoint:
    path: /next/api/puppeteer.browser.createbrowsercontext
    method: POST
    data_selector: context
- name: default_browser_context
  endpoint:
    path: /next/api/puppeteer.browser.defaultbrowsercontext
    method: GET
    data_selector: defaultContext
- name: disconnect
  endpoint:
    path: /next/api/puppeteer.browser.disconnect
    method: POST
    data_selector: disconnect
- name: new_page
  endpoint:
    path: /next/api/puppeteer.browser.newpage
    method: POST
    data_selector: page
- name: pages
  endpoint:
    path: /next/api/puppeteer.browser.pages
    method: GET
    data_selector: pages
- name: user_agent
  endpoint:
    path: /next/api/puppeteer.browser.useragent
    method: GET
    data_selector: userAgent
- name: version
  endpoint:
    path: /next/api/puppeteer.browser.version
    method: GET
    data_selector: version
- name: BrowserContext
  endpoint:
    path: /next/api/puppeteer.browsercontext
    method: GET
- name: Browser
  endpoint:
    path: /next/api/puppeteer.browser
    method: GET
- name: Page
  endpoint:
    path: /next/api/puppeteer.page
    method: GET
- name: browser_context
  endpoint:
    path: /next/api/puppeteer.browsercontext
    method: GET
    data_selector: properties
    params: {}
- name: Browser
  endpoint:
    path: /next/api/puppeteer.browser
    method: GET
- name: PuppeteerNode
  endpoint:
    path: /next/api/puppeteer.puppeteernode
    method: GET
- name: browser
  endpoint:
    path: /api/puppeteer/browser
    method: GET
    data_selector: properties
- name: page
  endpoint:
    path: /api/puppeteer/page
    method: GET
    data_selector: methods
- name: Page
  endpoint:
    path: /next/api/puppeteer.page
    method: GET
- name: BrowserContext
  endpoint:
    path: /next/api/puppeteer.browsercontext
    method: GET
- name: Browser
  endpoint:
    path: /next/api/puppeteer.browser
    method: GET
- name: Page
  endpoint:
    path: /next/api/puppeteer.page
    method: GET
- name: Locator
  endpoint:
    path: /next/api/puppeteer.locator
    method: GET
- name: Page
  endpoint:
    path: /next/api/puppeteer.page
    method: GET
- name: WebWorker
  endpoint:
    path: /next/api/puppeteer.webworker
    method: GET
- name: Locator
  endpoint:
    path: /next/api/puppeteer.locator
    method: GET
- name: snapshot
  endpoint:
    path: /next/api/puppeteer.snapshot
    method: GET
    data_selector: null
    params: {}
- name: snapshot
  endpoint:
    path: /accessibility/snapshot
    method: POST
    data_selector: SerializedAXNode
- name: Keyboard
  endpoint:
    path: /api/puppeteer.keyboard
    method: GET
- name: Touchscreen
  endpoint:
    path: /api/puppeteer.touchscreen
    method: GET
- name: tracing
  endpoint:
    path: /next/api/puppeteer.tracing
    method: GET
    data_selector: methods
    params: {}
- name: Touchscreen
  endpoint:
    path: /api/puppeteer.touchscreen
    method: GET
- name: Dialog
  endpoint:
    path: /api/puppeteer.dialog
    method: GET
- name: ConsoleMessage
  endpoint:
    path: /api/puppeteer.consolemessage
    method: GET
- name: JSHandle
  endpoint:
    path: /api/puppeteer.jshandle
    method: GET
- name: ElementHandle
  endpoint:
    path: /api/puppeteer.elementhandle
    method: GET
- name: Frame
  endpoint:
    path: /next/api/puppeteer.frame
    method: GET
- name: FrameEvents
  endpoint:
    path: /next/api/puppeteer.frameevents
    method: GET
    data_selector: events
    params: {}
- name: Page
  endpoint:
    path: /next/api/puppeteer.page
    method: GET
    data_selector: pages
    params: {}
- name: HTTPRequest
  endpoint:
    path: /next/api/puppeteer.httprequest
    method: GET
- name: HTTPResponse
  endpoint:
    path: /next/api/puppeteer.httpresponse
    method: GET
    data_selector: records
- name: HTTPRequest
  endpoint:
    path: /next/api/puppeteer.httprequest
    method: GET
- name: Target
  endpoint:
    path: /api/puppeteer.target
    method: GET
- name: CDPSession
  endpoint:
    path: /next/api/puppeteer.cdpsession
    method: GET
- name: HTTPResponse
  endpoint:
    path: /next/api/puppeteer.httpresponse
    method: GET
- name: Target
  endpoint:
    path: /next/api/puppeteer.target
    method: GET
- name: CDPSession
  endpoint:
    path: /next/api/puppeteer.cdpsession
    method: GET
- name: Animation
  endpoint:
    path: /Animation
    method: POST
    data_selector: response
- name: WebWorker
  endpoint:
    path: /next/api/puppeteer.webworker
    method: GET
- name: connect
  endpoint:
    path: /api/puppeteer.connect
    method: POST
    data_selector: browser_instance
    params: {}
- name: clearCustomQueryHandlers
  endpoint:
    path: /next/api/puppeteer.puppeteer.clearcustomqueryhandlers
    method: GET
- name: customQueryHandlerNames
  endpoint:
    path: /customQueryHandlerNames
    method: GET
    data_selector: string[]
    params: {}
- name: connect
  endpoint:
    path: /next/api/puppeteer.puppeteer.connect
    method: GET
- name: connect
  endpoint:
    path: /puppeteer/connect
    method: POST
    data_selector: browser_instance
    params: {}
- name: registerCustomQueryHandler
  endpoint:
    path: /next/api/puppeteer.puppeteer.registercustomqueryhandler
    method: GET
- name: registerCustomQueryHandler
  endpoint:
    path: /next/api/puppeteer.registercustomqueryhandler
    method: POST
    data_selector: void
    params: {}
- name: connect
  endpoint:
    path: /connect
    method: POST
    data_selector: browser
- name: unregisterCustomQueryHandler
  endpoint:
    path: /unregisterCustomQueryHandler
    method: POST
    data_selector: void
    params:
      name: string
- name: custom_query_handler_names
  endpoint:
    path: /customQueryHandlerNames
    method: GET
    data_selector: string[]
- name: PuppeteerNode.launch
  endpoint:
    path: /next/api/puppeteer.puppeteernode.launch
    method: GET
- name: launch
  endpoint:
    path: /next/api/puppeteer.launch
    method: POST
    data_selector: Promise<Browser>
    params:
      options: LaunchOptions
- name: launch
  endpoint:
    path: /api/puppeteer.launch
    method: POST
    data_selector: Browser
    params:
      options: LaunchOptions
- name: unregister_custom_query_handler
  endpoint:
    path: /api/puppeteer/unregisterCustomQueryHandler
    method: POST
    data_selector: void
    params:
      name: string
- name: connect
  endpoint:
    path: /connect
    method: POST
    data_selector: browser
    params: {}
- name: defaultArgs
  endpoint:
    path: /next/api/puppeteer.defaultArgs
    method: GET
    data_selector: string[]
    params: {}
- name: launch
  endpoint:
    path: /next/api/puppeteer.puppeteernode.launch
    method: POST
- name: launch
  endpoint:
    path: /next/api/puppeteer.launch
    method: POST
    data_selector: options
- name: executablePath
  endpoint:
    path: /executablePath
    method: GET
    data_selector: string
- name: launch
  endpoint:
    path: /api/puppeteer.launch
    method: POST
    data_selector: Promise<Browser>
    params: {}
- name: trimCache
  endpoint:
    path: /next/api/puppeteer.puppeteernode.trimcache
    method: GET
    data_selector: records
- name: trimCache
  endpoint:
    path: /PuppeteerNode/trimCache
    method: Promise
    data_selector: void
    params: {}
- name: connect
  endpoint:
    path: /next/api/puppeteer.connect
    method: POST
    data_selector: Promise<Browser>
    params: {}
- name: LaunchOptions
  endpoint:
    path: /next/api/puppeteer.launchoptions
    method: GET
    data_selector: records
    params: {}
- name: defaultArgs
  endpoint:
    path: /next/api/puppeteer.defaultArgs
    method: GET
    data_selector: defaultArguments
    params: {}
- name: executablePath
  endpoint:
    path: /next/api/puppeteer.executablepath
    method: GET
    data_selector: string
- name: EventEmitter
  endpoint:
    path: /next/api/puppeteer.eventemitter
    method: GET
- name: emit
  endpoint:
    path: /next/api/puppeteer.eventemitter.emit
    method: GET
    data_selector: returns
    params: {}
- name: trimCache
  endpoint:
    path: /PuppeteerNode/trimCache
    method: POST
    data_selector: Promise<void>
    params: {}
- name: EventEmitter
  endpoint:
    path: /next/api/puppeteer.eventemitter
    method: GET
    data_selector: listenerCount
- name: listenerCount
  endpoint:
    path: /next/api/puppeteer.eventemitter.listenerCount
    method: GET
    data_selector: number
    params:
      type: keyof EventsWithWildcard<Events>
- name: 'off'
  endpoint:
    path: /next/api/puppeteer.eventemitter.off
    method: GET
    data_selector: this
    params: {}
- name: emit
  endpoint:
    path: /next/api/puppeteer.eventemitter.emit
    method: GET
    data_selector: returns
    params: {}
- name: 'on'
  endpoint:
    path: /next/api/puppeteer.eventemitter.on
    method: GET
    data_selector: this
    params: {}
- name: once
  endpoint:
    path: /next/api/puppeteer.eventemitter.once
    method: GET
    data_selector: this
    params: {}
- name: removeAllListeners
  endpoint:
    path: /removeAllListeners
    method: GET
    data_selector: this
    params: {}
- name: 'on'
  endpoint:
    path: /next/api/puppeteer.eventemitter.on
    method: GET
    data_selector: handler
    params: {}
- name: once
  endpoint:
    path: /next/api/puppeteer.eventemitter.once
    method: GET
- name: removeAllListeners
  endpoint:
    path: /removeAllListeners
    method: GET
    data_selector: this
    params:
      type: keyof EventsWithWildcard<Events>
- name: Disconnected
  endpoint:
    path: /api/puppeteer.browser.disconnect
    method: GET
    data_selector: emitted
    params: {}
- name: TargetChanged
  endpoint:
    path: /api/puppeteer.target
    method: GET
    data_selector: emitted
    params: {}
- name: TargetCreated
  endpoint:
    path: /api/puppeteer.browser.newpage
    method: GET
    data_selector: emitted
    params: {}
- name: TargetDestroyed
  endpoint:
    path: /api/puppeteer.target
    method: GET
    data_selector: emitted
    params: {}
- name: creditCard
  endpoint:
    path: /autofill/creditCard
    method: GET
    data_selector: creditCard
    params: {}
- name: Disconnected
  endpoint:
    path: /api/puppeteer.browser.disconnect
    method: GET
    data_selector: description
    params: {}
- name: TargetChanged
  endpoint:
    path: /api/puppeteer.target
    method: GET
    data_selector: description
    params: {}
- name: TargetCreated
  endpoint:
    path: /api/puppeteer.browser.newpage
    method: GET
    data_selector: description
    params: {}
- name: TargetDestroyed
  endpoint:
    path: /api/puppeteer.target
    method: GET
    data_selector: description
    params: {}
- name: BoundingBox
  endpoint:
    path: /next/api/puppeteer.boundingbox
    method: GET
    data_selector: properties
    params: {}
- name: properties
  endpoint:
    path: /next/api/puppeteer.boxmodel
    method: GET
    data_selector: properties
    params: {}
- name: BoundingBox
  endpoint:
    path: /next/api/puppeteer.boundingbox
    method: GET
    data_selector: properties
    params: {}
- name: BrowserLauncher
  endpoint:
    path: /api/puppeteer.browserlauncher
    method: GET
- name: BrowserLauncher
  endpoint:
    path: /next/api/puppeteer.browserlauncher
    method: GET
- name: downloadBaseUrl
  endpoint:
    path: https://storage.googleapis.com/chrome-for-testing-public
    method: GET
- name: skipDownload
  endpoint:
    path: 'false'
    method: GET
- name: version
  endpoint:
    path: The pinned browser version supported by the current Puppeteer version.
    method: GET
- name: cdp_session_events
  endpoint:
    path: /api/puppeteer.cdpsessionevents
    method: GET
- name: downloadBaseUrl
  endpoint:
    path: /chrome/downloadBaseUrl
    method: GET
    data_selector: url
- name: version
  endpoint:
    path: /chrome/version
    method: GET
    data_selector: version
- name: downloadBaseUrl
  endpoint:
    path: /downloadBaseUrl
    method: GET
    data_selector: url
    params: {}
- name: version
  endpoint:
    path: /version
    method: GET
    data_selector: version
    params: {}
- name: cookie
  endpoint:
    path: /next/api/puppeteer.cookiedata
    method: GET
    data_selector: properties
    params: {}
- name: cookie_properties
  endpoint:
    path: /next/api/puppeteer/cookie
    method: GET
    data_selector: properties
    params: {}
- name: cookie_param
  endpoint:
    path: /next/api/puppeteer/cookieparam
    method: GET
- name: cookie_properties
  endpoint:
    path: /next/api/puppeteer.cookiedata
    method: GET
    data_selector: properties
    params: {}
- name: cookie
  endpoint:
    path: /next/api/puppeteer/cookie
    method: GET
    data_selector: properties
    params: {}
- name: CookieParam
  endpoint:
    path: /api/puppeteer.cookieparam
    method: GET
- name: cookie_param
  endpoint:
    path: /next/api/puppeteer/cookieparam
    method: GET
    data_selector: properties
    params: {}
- name: cookiepartitionkey
  endpoint:
    path: /api/puppeteer.cookiepartitionkey
    method: GET
- name: CoverageEntry
  endpoint:
    path: /api/puppeteer/CoverageEntry
    method: GET
    data_selector: properties
    params: {}
- name: CSSCoverage
  endpoint:
    path: /api/puppeteer.csscoverage
    method: GET
    data_selector: properties
    params: {}
- name: CoverageEntry
  endpoint:
    path: /api/puppeteer.coverageentry
    method: GET
- name: CoverageEntry
  endpoint:
    path: /api/coverageEntry
    method: GET
    data_selector: properties
    params: {}
- name: pendingProtocolErrors
  endpoint:
    path: /
    method: GET
    data_selector: Error[]
    params: {}
- name: start
  endpoint:
    path: /next/api/puppeteer.csscoverage.start
    method: POST
- name: stop
  endpoint:
    path: /next/api/puppeteer.csscoverage.stop
    method: POST
- name: CSSCoverage
  endpoint:
    path: /api/puppeteer/csscoverage
    method: GET
    data_selector: properties
    params: {}
- name: cookies
  endpoint:
    path: /next/api/puppeteer/deleteCookies
    method: POST
    data_selector: cookies
    params: {}
- name: devices
  endpoint:
    path: /next/api/puppeteer.devicerequestprompt
    method: GET
    data_selector: devices
- name: deleteCookiesRequest
  endpoint:
    path: /api/puppeteer.deletecookiesrequest
    method: POST
- name: DownloadBehavior
  endpoint:
    path: /next/api/puppeteer.downloadbehavior
    method: GET
    data_selector: properties
    params: {}
- name: DeleteCookiesRequest
  endpoint:
    path: /next/api/puppeteer/deleteCookies
    method: POST
    data_selector: properties
- name: DeviceRequestPrompt
  endpoint:
    path: /next/api/puppeteer.devicerequestprompt
    method: GET
    data_selector: devices
- name: download
  endpoint:
    path: /next/api/puppeteer.downloadbehavior
    method: GET
    data_selector: properties
    params: {}
- name: ElementScreenshotOptions
  endpoint:
    path: /next/api/puppeteer.screenshotoptions
    method: GET
- name: geolocation
  endpoint:
    path: /geolocation
    method: GET
    data_selector: properties
    params: {}
- name: properties
  endpoint:
    path: /next/api/puppeteer.frameaddstyletagoptions
    method: GET
    data_selector: properties
    params: {}
- name: Geolocation
  endpoint:
    path: /geolocation
    method: GET
    data_selector: properties
    params: {}
- name: enum_members
  endpoint:
    path: /api/puppeteer/interceptresolutionaction
    method: GET
    data_selector: members
    params: {}
- name: NetworkConditions
  endpoint:
    path: /next/api/puppeteer.networkconditions
    method: GET
    data_selector: properties
    params: {}
- name: InterceptResolutionAction
  endpoint:
    path: /api/puppeteer/interceptresolutionaction
    method: GET
    data_selector: members
    params: {}
- name: InterceptResolutionState
  endpoint:
    path: /next/api/interceptresolutionstate
    method: GET
    data_selector: properties
    params: {}
- name: KnownDevices
  endpoint:
    path: /api/puppeteer.knowndevices
    method: GET
- name: launch
  endpoint:
    path: /api/puppeteer.launch
    method: POST
    data_selector: Promise<PuppeteerCore.Browser>
    params:
      options: PuppeteerCore.LaunchOptions
- name: Properties
  endpoint:
    path: /next/api/puppeteer.keyboardtypeoptions
    method: GET
    data_selector: properties
    params: {}
- name: Action
  endpoint:
    path: LocatorEvent/action
    method: GET
    data_selector: description
    params: {}
- name: KnownDevices
  endpoint:
    path: /api/puppeteer.knowndevices
    method: GET
- name: launch
  endpoint:
    path: /next/api/puppeteer.launch
    method: POST
    data_selector: Promise
    params: {}
- name: metrics
  endpoint:
    path: /api/metrics
    method: GET
    data_selector: properties
    params: {}
- name: MouseClickOptions
  endpoint:
    path: /next/api/puppeteer.mouseclickoptions
    method: GET
    data_selector: properties
    params: {}
- name: MouseMoveOptions
  endpoint:
    path: /api/MouseMoveOptions
    method: GET
    data_selector: properties
    params: {}
- name: properties
  endpoint:
    path: /api/media-feature/properties
    method: GET
    data_selector: properties
    params: {}
- name: metrics
  endpoint:
    path: /api/metrics
    method: GET
    data_selector: metrics_data
    params: {}
- name: MouseClickOptions
  endpoint:
    path: /next/api/puppeteer.mouseclickoptions
    method: GET
    data_selector: properties
    params: {}
- name: MouseMoveOptions
  endpoint:
    path: /api/puppeteer.mousemoveoptions
    method: GET
    data_selector: properties
    params: {}
- name: PageEvent
  endpoint:
    path: N/A
    method: N/A
    data_selector: N/A
    params: {}
- name: PageEvents
  endpoint:
    path: /api/puppeteer.pageevents
    method: GET
    data_selector: events
- name: download
  endpoint:
    path: ''
    method: ''
    data_selector: ''
    params: {}
- name: latency
  endpoint:
    path: ''
    method: ''
    data_selector: ''
    params: {}
- name: offline
  endpoint:
    path: ''
    method: ''
    data_selector: ''
    params: {}
- name: upload
  endpoint:
    path: ''
    method: ''
    data_selector: ''
    params: {}
- name: PDFOptions
  endpoint:
    path: /api/puppeteer.pdfoptions
    method: GET
- name: Offset
  endpoint:
    path: /api/puppeteer/offset
    method: GET
    data_selector: properties
    params: {}
- name: PageEventEnum
  endpoint:
    path: /next/api/puppeteer.pageevent
    method: GET
    data_selector: enumeration_members
    params: {}
- name: PredefinedNetworkConditions
  endpoint:
    path: /api/puppeteer.predefinednetworkconditions
    method: GET
- name: PageEvents
  endpoint:
    path: /next/api/puppeteer.pageevents
    method: GET
- name: Slow 3G
  endpoint: {}
- name: Fast 3G
  endpoint: {}
- name: Slow 4G
  endpoint: {}
- name: Fast 4G
  endpoint: {}
- name: PageEvents
  endpoint:
    path: /next/api/puppeteer.pageevents
    method: GET
    data_selector: properties
    params: {}
- name: PaperFormat
  endpoint:
    path: /api/puppeteer.paperformat
    method: GET
- name: ProtocolError
  endpoint:
    path: /api/puppeteer.protocolerror
    method: GET
- name: properties
  endpoint:
    path: /api/puppeteer.pdfmargin
    method: GET
    data_selector: properties
- name: PDFOptions
  endpoint:
    path: /next/api/puppeteer.pdfoptions
    method: GET
- name: PredefinedNetworkConditions
  endpoint:
    path: /api/puppeteer.predefinednetworkconditions
    method: GET
- name: Slow 3G
  endpoint:
    path: /Slow 3G
    method: GET
    data_selector: NetworkConditions
- name: Fast 3G
  endpoint:
    path: /Fast 3G
    method: GET
    data_selector: NetworkConditions
- name: Slow 4G
  endpoint:
    path: /Slow 4G
    method: GET
    data_selector: NetworkConditions
- name: Fast 4G
  endpoint:
    path: /Fast 4G
    method: GET
    data_selector: NetworkConditions
- name: ResourceType
  endpoint:
    path: /next/api/puppeteer.resourcetype
    method: GET
- name: ResponseForRequest
  endpoint:
    path: /next/api/puppeteer.resourcetype
    method: GET
    data_selector: body
    params: {}
- name: screencast_options
  endpoint:
    path: /next/api/screencast-options
    method: GET
    data_selector: options
    params: {}
- name: ScreenRecorder
  endpoint:
    path: /next/api/puppeteer.screenrecorder
    method: GET
- name: BoundingBox
  endpoint:
    path: /next/api/puppeteer.boundingbox
    method: GET
    data_selector: properties
    params: {}
- name: properties
  endpoint:
    path: /api/puppeteer/remoteaddress
    method: GET
    data_selector: properties
    params: {}
- name: Screenshot
  endpoint:
    path: /next/api/puppeteer.screenshot
    method: POST
    data_selector: screenshotOptions
    params: {}
- name: ResourceType
  endpoint:
    path: /next/api/puppeteer.resourcetype
    method: GET
- name: ResponseForRequest
  endpoint:
    path: /api/ResponseForRequest
    method: GET
    data_selector: body
    params: {}
- name: ScreencastOptions
- name: screencast_options
  endpoint:
    path: /screencast/options
    method: GET
    data_selector: properties
    params: {}
- name: ScreenshotClip
  endpoint:
    path: /next/api/puppeteer.screenshotclip
    method: GET
    data_selector: properties
    params: {}
- name: screenshot_options
  endpoint:
    path: /next/api/screenshotOptions
    method: GET
    data_selector: properties
    params: {}
- name: background_page
  endpoint: {}
- name: browser
  endpoint: {}
- name: other
  endpoint: {}
- name: page
  endpoint: {}
- name: service_worker
  endpoint: {}
- name: shared_worker
  endpoint: {}
- name: webview
  endpoint: {}
- name: SerializedAXNode
  endpoint:
    path: /api/puppeteer.serializedaxnode
    method: GET
- name: puppeteer_toucherror
  endpoint:
    path: /api/puppeteer.toucherror
    method: GET
- name: VisibilityOption
  endpoint:
    path: /api/puppeteer.visibilityoption
    method: GET
    data_selector: records
- name: touchend
  endpoint:
    path: /next/api/puppeteer.touchhandle.end
    method: POST
- name: touchMove
  endpoint:
    path: /next/api/puppeteer.touchhandle.move
    method: POST
- name: WaitForNetworkIdleOptions
  endpoint:
    path: /next/api/puppeteer.waitfornetworkidleoptions
    method: GET
    data_selector: properties
    params: {}
- name: properties
  endpoint:
    data_selector: optional
- name: Browser.disconnect
  endpoint:
    path: /next/api/puppeteer.browser.disconnect
    method: GET
- name: VisibilityOption
  endpoint:
    path: /next/api/puppeteer.visibilityoption
    method: GET
- name: Browser.newPage
  endpoint:
    path: /next/api/puppeteer.browser.newpage
    method: GET
- name: createBrowserContext
  endpoint:
    path: /next/api/puppeteer.browser.createbrowsercontext
    method: GET
- name: createBrowserContext
  endpoint:
    path: /next/api/puppeteer.createBrowserContext
    method: POST
    data_selector: Promise<BrowserContext>
    params: {}
- name: createBrowserContext
  endpoint:
    path: /api/puppeteer.createBrowserContext
    method: POST
    data_selector: Promise<BrowserContext>
    params: {}
- name: waitForSelectorOptions
  endpoint:
    path: /next/api/puppeteer.waitforselectoroptions
    method: GET
- name: browser_contexts
  endpoint:
    path: /next/api/puppeteer.browser.browserContexts
    method: GET
- name: Browser.close
  endpoint:
    path: /next/api/puppeteer.browser.close
    method: GET
- name: cookies
  endpoint:
    path: /next/api/puppeteer.browser.cookies
    method: GET
- name: timeout
  endpoint:
    data_selector: timeout
    params:
      default: 30000
- name: cookies
  endpoint:
    path: /cookies
    method: GET
    data_selector: Cookie[]
    params: {}
- name: Browser
  endpoint:
    path: /next/api/puppeteer.browser
    method: GET
- name: Browser.disconnect
  endpoint:
    path: /next/api/puppeteer.browser.disconnect
    method: GET
- name: Browser.defaultBrowserContext
  endpoint:
    path: /next/api/puppeteer.browser.defaultbrowsercontext
    method: GET
- name: disconnect
  endpoint:
    path: /disconnect
    method: POST
    data_selector: void
    params: {}
- name: Browser.deleteCookie
  endpoint:
    path: /next/api/puppeteer.browser.deletecookie
    method: GET
- name: deleteCookie
  endpoint:
    path: /api/puppeteer/browser/deleteCookie
    method: POST
    data_selector: Promise<void>
    params: {}
- name: Browser.newPage
  endpoint:
    path: /next/api/puppeteer.browser.newpage
    method: GET
- name: newPage
  endpoint:
    path: /newPage
    method: GET
    data_selector: Promise<Page>
    params: {}
- name: deleteMatchingCookies
  endpoint:
    path: /next/api/puppeteer.browser.deletematchingcookies
    method: DELETE
- name: deleteMatchingCookies
  endpoint:
    path: /next/api/puppeteer.deleteMatchingCookies
    method: POST
    data_selector: Promise<void>
    params: {}
- name: Browser.createBrowserContext
  endpoint:
    path: /next/api/puppeteer.browser.createbrowsercontext
    method: GET
    data_selector: records
- name: createBrowserContext
  endpoint:
    path: /next/api/puppeteer.createBrowserContext
    method: POST
    data_selector: BrowserContext
    params: {}
- name: Browser.installExtension
  endpoint:
    path: /next/api/puppeteer.browser.installextension
    method: GET
- name: install_extension
  endpoint:
    path: /installExtension
    method: POST
    data_selector: Promise<string>
    params:
      path: string
- name: browser_contexts
  endpoint:
    path: /next/api/puppeteer.browser.browsercontexts
    method: GET
- name: browser_contexts
  endpoint:
    path: /browserContexts
    method: GET
    data_selector: BrowserContext[]
    params: {}
- name: Browser.pages
  endpoint:
    path: /next/api/puppeteer.browser.pages
    method: GET
- name: Browser.close
  endpoint:
    path: /next/api/puppeteer.browser.close
    method: GET
- name: process
  endpoint:
    path: /api/puppeteer.browser.process
    method: GET
    data_selector: ChildProcess | null
    params: {}
- name: cookies
  endpoint:
    path: /next/api/puppeteer.browser.cookies
    method: GET
    data_selector: cookies
- name: cookies
  endpoint:
    path: cookies
    method: GET
    data_selector: Cookie[]
    params: {}
- name: Browser.setCookie
  endpoint:
    path: /next/api/puppeteer.browser.setcookie
    method: GET
- name: setCookie
  endpoint:
    path: /next/api/puppeteer.browser.setcookie
    method: POST
    data_selector: cookies
    params: {}
- name: Browser
  endpoint:
    path: /next/api/puppeteer.browser
    method: GET
- name: Browser.target
  endpoint:
    path: /next/api/puppeteer.browser.target
    method: GET
- name: deletecookie
  endpoint:
    path: /api/puppeteer.browser.deletecookie
    method: DELETE
- name: target
  endpoint:
    path: /next/api/puppeteer.target
    method: GET
    data_selector: Target
    params: {}
- name: Browser.deleteCookie
  endpoint:
    path: /next/api/puppeteer.browser.deletecookie
    method: GET
- name: Browser.targets
  endpoint:
    path: /next/api/puppeteer.browser.targets
    method: GET
- name: deleteCookie
  endpoint:
    path: /deleteCookie
    method: POST
    data_selector: Promise<void>
    params: {}
- name: targets
  endpoint:
    path: /next/api/puppeteer.targets
    method: GET
    data_selector: Target[]
    params: {}
- name: delete_matching_cookies
  endpoint:
    path: /next/api/puppeteer.browser.deletematchingcookies
    method: DELETE
- name: deleteMatchingCookies
  endpoint:
    path: /next/api/puppeteer.deleteMatchingCookies
    method: DELETE
    data_selector: filters
- name: uninstallExtension
  endpoint:
    path: /uninstallExtension
    method: POST
    data_selector: Promise<void>
    params:
      id: string
- name: install_extension
  endpoint:
    path: /installExtension
    method: POST
    data_selector: Promise<string>
    params:
      path: string
- name: userAgent
  endpoint:
    path: /next/api/puppeteer.browser.useragent
    method: GET
    data_selector: userAgent
- name: userAgent
  endpoint:
    path: /userAgent
    method: GET
    data_selector: Promise<string>
    params: {}
- name: Browser
  endpoint:
    path: /next/api/puppeteer.browser
    method: GET
- name: Browser.pages
  endpoint:
    path: /next/api/puppeteer.browser.pages
    method: GET
- name: pages
  endpoint:
    path: /next/api/puppeteer.pages
    method: GET
    data_selector: Page[]
- name: waitForTarget
  endpoint:
    path: /next/api/puppeteer.browser.waitfortarget
    method: GET
- name: waitForTarget
  endpoint:
    path: /next/api/puppeteer.waitfortarget
    method: GET
    data_selector: Promise<Target>
    params: {}
- name: Browser.process
  endpoint:
    path: /next/api/puppeteer.browser.process
    method: GET
- name: Browser.wsEndpoint
  endpoint:
    path: /next/api/puppeteer.browser.wsendpoint
    method: GET
- name: Browser
  endpoint:
    path: /next/api/puppeteer.browser.setcookie
    method: GET
- name: wsEndpoint
  endpoint:
    path: /devtools/browser/<id>
    method: GET
    data_selector: string
- name: setCookie
  endpoint:
    path: /next/api/puppeteer.browser.setCookie
    method: POST
    data_selector: cookies
    params: {}
- name: browserContext
  endpoint:
    path: /next/api/puppeteer.browsercontext
    method: GET
    data_selector: BrowserContext
    params: {}
- name: Browser
  endpoint:
    path: /next/api/puppeteer.browser
    method: GET
- name: Browser.target
  endpoint:
    path: /next/api/puppeteer.browser.target
    method: GET
- name: browserContext
  endpoint:
    path: /api/puppeteer.browsercontext
    method: GET
- name: targets
  endpoint:
    path: /next/api/puppeteer.browser.targets
    method: GET
- name: targets
  endpoint:
    path: /api/puppeteer.targets
    method: GET
    data_selector: Target[]
- name: Page
  endpoint:
    path: /next/api/puppeteer.page
    method: GET
    data_selector: null
    params: {}
- name: Page.$
  endpoint:
    path: /next/api/puppeteer.page.$
    method: GET
    data_selector: Promise<ElementHandle<NodeFor<Selector>> | null>
    params: {}
- name: uninstallExtension
  endpoint:
    path: /uninstallExtension
    method: POST
    data_selector: void
    params:
      id: string
- name: Page.$$
  endpoint:
    path: /next/api/puppeteer.page.$$
    method: GET
    data_selector: ElementHandle
    params: {}
- name: Browser
  endpoint:
    path: /next/api/puppeteer.browser
    method: GET
    data_selector: userAgent
- name: userAgent
  endpoint:
    path: /class/Browser/userAgent
    method: GET
    data_selector: Promise<string>
    params: {}
- name: $$eval
  endpoint:
    path: /api/puppeteer.page.$$eval
    method: GET
    data_selector: records
    params: {}
- name: version
  endpoint:
    path: /version
    method: GET
    data_selector: Promise<string>
- name: $eval
  endpoint:
    path: /$eval
    method: GET
    data_selector: result
    params: {}
- name: page
  endpoint:
    path: /api/puppeteer.page.addscripttag
    method: POST
- name: Browser.waitForTarget
  endpoint:
    path: /next/api/puppeteer.browser.waitfortarget
    method: GET
- name: waitForTarget
  endpoint:
    path: /next/api/puppeteer.waitfortarget
    method: POST
    data_selector: Promise<Target>
    params: {}
- name: addScriptTag
  endpoint:
    path: /next/api/puppeteer.frame.addscripttag
    method: POST
    data_selector: options
- name: addStyleTag
  endpoint:
    path: /next/api/puppeteer.page.addstyletag
    method: POST
    data_selector: options
    params: {}
- name: Browser.wsEndpoint
  endpoint:
    path: /next/api/puppeteer.browser.wsendpoint
    method: GET
    data_selector: webSocketDebuggerUrl
- name: Page.browserContext
  endpoint:
    path: /next/api/puppeteer.page.browsercontext
    method: GET
- name: Page.bringToFront
  endpoint:
    path: /next/api/puppeteer.page.bringtofront
    method: GET
- name: Page
  endpoint:
    path: /next/api/puppeteer.page
    method: GET
- name: Page.$
  endpoint:
    path: /next/api/puppeteer.page._
    method: GET
- name: Page.$
  endpoint:
    path: /next/api/puppeteer.page.$
    method: GET
    data_selector: ElementHandle
    params: {}
- name: Page.click
  endpoint:
    path: /next/api/puppeteer.page.click
    method: GET
- name: click
  endpoint:
    path: Page.click
    method: POST
    data_selector: Promise<void>
    params: {}
- name: close
  endpoint:
    path: /api/puppeteer.page.close
    method: POST
    data_selector: Promise<void>
    params:
      options:
        runBeforeUnload: boolean
- name: $$eval
  endpoint:
    path: /next/api/puppeteer.page.$$eval
    method: GET
    data_selector: Promise<Awaited<ReturnType<Func>>>
    params: {}
- name: $eval
  endpoint:
    path: /$eval
    method: GET
    data_selector: result
    params: {}
- name: cookies
  endpoint:
    path: /next/api/puppeteer.cookies
    method: GET
    data_selector: Promise<Cookie[]>
    params: {}
- name: Page.addScriptTag
  endpoint:
    path: /next/api/puppeteer.page.addscripttag
    method: GET
- name: addScriptTag
  endpoint:
    path: /next/api/puppeteer.frameaddscripttag
    method: POST
    data_selector: ElementHandle<HTMLScriptElement>
    params: {}
- name: page_add_style_tag
  endpoint:
    path: /api/puppeteer.page.addstyletag
    method: GET
- name: Page.createCDPSession
  endpoint:
    path: /next/api/puppeteer.page.createcdpsession
    method: GET
- name: addStyleTag
  endpoint:
    path: /next/api/puppeteer.page.addstyletag
    method: GET
- name: createPDFStream
  endpoint:
    path: /next/api/puppeteer.page.createPDFStream
    method: POST
    data_selector: Promise<ReadableStream<Uint8Array>>
    params:
      options: PDFOptions
- name: Page
  endpoint:
    path: /next/api/puppeteer.page
    method: GET
- name: Page.deleteCookie
  endpoint:
    path: /next/api/puppeteer.page.deletecookie
    method: GET
- name: deleteCookie
  endpoint:
    path: /deleteCookie
    method: POST
- name: Page
  endpoint:
    path: /next/api/puppeteer.page
    method: GET
- name: emulate
  endpoint:
    path: /next/api/puppeteer.page.emulate
    method: POST
    data_selector: Promise<void>
    params: {}
- name: browser
  endpoint:
    path: /next/api/puppeteer.browser
    method: GET
    data_selector: Browser
    params: {}
- name: Page.click
  endpoint:
    path: /next/api/puppeteer.page.click
    method: GET
- name: click
  endpoint:
    path: /click
    method: POST
    data_selector: Promise<void>
- name: emulateCPUThrottling
  endpoint:
    path: /api/puppeteer.page.emulateCPUThrottling
    method: POST
    data_selector: Promise<void>
    params:
      factor: number | null
- name: Page
  endpoint:
    path: /next/api/puppeteer.page
    method: GET
- name: close
  endpoint:
    path: /next/api/puppeteer.page.close
    method: POST
    data_selector: Promise<void>
    params:
      options: '{ runBeforeUnload?: boolean }'
- name: emulateIdleState
  endpoint:
    path: /emulateIdleState
    method: POST
    data_selector: Promise<void>
    params:
      overrides:
        isUserActive: boolean
        isScreenUnlocked: boolean
- name: Page.content
  endpoint:
    path: /next/api/puppeteer.page.content
    method: GET
- name: emulateMediaFeatures
  endpoint:
    path: /next/api/puppeteer.page.emulatemediafeatures
    method: POST
    data_selector: features
    params: {}
- name: cookies
  endpoint:
    path: /next/api/puppeteer.cookies
    method: GET
    data_selector: Cookie[]
    params: {}
- name: emulateMediaType
  endpoint:
    path: /emulateMediaType
    method: POST
    data_selector: Promise<void>
    params: {}
- name: Page.createCDPSession
  endpoint:
    path: /next/api/puppeteer.page.createcdpsession
    method: GET
- name: Page.emulateNetworkConditions
  endpoint:
    path: /next/api/puppeteer.page.emulatenetworkconditions
    method: GET
- name: createCDPSession
  endpoint:
    path: /next/api/puppeteer.createCDPSession
    method: POST
    data_selector: Promise<CDPSession>
- name: emulateNetworkConditions
  endpoint:
    path: /next/api/puppeteer.emulateNetworkConditions
    method: POST
    data_selector: networkConditions
    params: {}
- name: Page.createPDFStream
  endpoint:
    path: /next/api/puppeteer.page.createpdfstream
    method: GET
- name: emulateTimezone
  endpoint:
    path: /Page/emulateTimezone
    method: POST
    data_selector: Promise<void>
    params:
      timezoneId: string
- name: createPDFStream
  endpoint:
    path: /next/api/puppeteer.createPDFStream
    method: POST
    data_selector: Promise<ReadableStream<Uint8Array>>
    params:
      options: PDFOptions
- name: emulateVisionDeficiency
  endpoint:
    path: /emulateVisionDeficiency
    method: POST
    data_selector: type
    params: {}
- name: deleteCookie
  endpoint:
    path: /next/api/puppeteer.deleteCookie
    method: POST
    data_selector: ''
    params: {}
- name: Page
  endpoint:
    path: /next/api/puppeteer.page
    method: GET
- name: Page.evaluate
  endpoint:
    path: /next/api/puppeteer.page.evaluate
    method: GET
- name: evaluate
  endpoint:
    path: /next/api/puppeteer.page.evaluate
    method: GET
    data_selector: Promise<Awaited<ReturnType<Func>>>
    params: {}
- name: Page
  endpoint:
    path: /next/api/puppeteer.page
    method: GET
- name: emulate
  endpoint:
    path: /next/api/puppeteer.page.emulate
    method: POST
    data_selector: Promise<void>
    params: {}
- name: evaluateHandle
  endpoint:
    path: /next/api/puppeteer.page.evaluateHandle
    method: GET
    data_selector: HandleFor<Awaited<ReturnType<Func>>>
    params: {}
- name: emulateCPUThrottling
  endpoint:
    path: /emulateCPUThrottling
    method: POST
    data_selector: Promise<void>
    params:
      factor: number | null
- name: evaluateOnNewDocument
  endpoint:
    path: /next/api/puppeteer.page.evaluateonnewdocument
    method: GET
    data_selector: Promise<NewDocumentScriptEvaluation>
    params: {}
- name: Page.emulateIdleState
  endpoint:
    path: /next/api/puppeteer.page.emulateidlestate
    method: GET
- name: emulateIdleState
  endpoint:
    path: emulateIdleState
    method: POST
    data_selector: overrides
- name: Page.exposeFunction
  endpoint:
    path: /next/api/puppeteer.page.exposefunction
    method: GET
- name: emulateMediaFeatures
  endpoint:
    path: emulateMediaFeatures
    method: POST
    data_selector: Promise<void>
    params: {}
- name: Page.focus
  endpoint:
    path: /next/api/puppeteer.page.focus
    method: GET
- name: focus
  endpoint:
    path: class/Page/focus
    method: POST
    data_selector: Promise<void>
    params:
      selector: string
- name: emulateMediaType
  endpoint:
    path: /emulateMediaType
    method: POST
    data_selector: Promise<void>
    params:
      type: string
- name: frames
  endpoint:
    path: /next/api/puppeteer.page.frames
    method: GET
    data_selector: frames
- name: Page
  endpoint:
    path: /next/api/puppeteer.page
    method: GET
- name: emulateNetworkConditions
  endpoint:
    path: /emulateNetworkConditions
    method: POST
    data_selector: 'null'
    params: {}
- name: frames
  endpoint:
    path: /next/api/puppeteer.frames
    method: GET
    data_selector: Frame[]
- name: emulateTimezone
  endpoint:
    path: /emulateTimezone
    method: POST
    data_selector: Promise<void>
    params:
      timezoneId: string
- name: Page.emulateVisionDeficiency
  endpoint:
    path: /next/api/puppeteer.page.emulatevisiondeficiency
    method: GET
- name: emulateVisionDeficiency
  endpoint:
    path: /emulateVisionDeficiency
    method: POST
    data_selector: type
    params: {}
- name: Page.getDefaultTimeout
  endpoint:
    path: /next/api/puppeteer.page.getdefaulttimeout
    method: GET
- name: Page
  endpoint:
    path: /next/api/puppeteer.page
    method: GET
- name: Page.evaluate
  endpoint:
    path: /next/api/puppeteer.page.evaluate
    method: GET
- name: Page.evaluate
  endpoint:
    path: /next/api/puppeteer.page.evaluate
    method: GET
- name: Page.goForward
  endpoint:
    path: /next/api/puppeteer.page.goforward
    method: GET
- name: evaluateHandle
  endpoint:
    path: /next/api/puppeteer.page.evaluateHandle
    method: GET
    data_selector: HandleFor
    params: {}
- name: goForward
  endpoint:
    path: /next/api/puppeteer.page.goForward
    method: GET
    data_selector: HTTPResponse
    params: {}
- name: Page.evaluateOnNewDocument
  endpoint:
    path: /next/api/puppeteer.page.evaluateonnewdocument
    method: GET
    data_selector: records
- name: Page
  endpoint:
    path: /next/api/puppeteer.page.goto
    method: GET
- name: HTTPResponse
  endpoint:
    path: /next/api/puppeteer.httpresponse
    method: Promise
    data_selector: null
    params: {}
- name: evaluateOnNewDocument
  endpoint:
    path: /next/api/puppeteer.newdocumentscriptevaluation
    method: GET
    data_selector: NewDocumentScriptEvaluation
    params: {}
- name: Page.hover
  endpoint:
    path: /next/api/puppeteer.page.hover
    method: GET
- name: Page
  endpoint:
    path: /next/api/puppeteer.page
    method: GET
- name: Page.exposeFunction
  endpoint:
    path: /next/api/puppeteer.page.exposefunction
    method: GET
- name: hover
  endpoint:
    path: /hover
    method: POST
    data_selector: Promise<void>
    params:
      selector: string
- name: exposeFunction
  endpoint:
    path: /exposeFunction
    method: POST
    data_selector: function
- name: Page.focus
  endpoint:
    path: /next/api/puppeteer.page.focus
    method: GET
- name: focus
  endpoint:
    path: class/Page/focus
    method: Promise<void>
    data_selector: selector
    params: {}
- name: Page.frames
  endpoint:
    path: /next/api/puppeteer.page.frames
    method: GET
- name: frames
  endpoint:
    path: /next/api/puppeteer.frames
    method: GET
    data_selector: Frame[]
    params: {}
- name: Page
  endpoint:
    path: /next/api/puppeteer.page
    method: GET
    data_selector: records
    params: {}
- name: Page.getDefaultNavigationTimeout
  endpoint:
    path: /next/api/puppeteer.page.getdefaultnavigationtimeout
    method: GET
- name: Page.isServiceWorkerBypassed
  endpoint:
    path: /next/api/puppeteer.page.isserviceworkerbypassed
    method: GET
- name: Page.getDefaultTimeout
  endpoint:
    path: /next/api/puppeteer.page.getdefaulttimeout
    method: GET
- name: locator
  endpoint:
    path: /next/api/puppeteer.locator
    method: GET
    data_selector: Locator<NodeFor<Selector>>
    params: {}
- name: Page
  endpoint:
    path: /next/api/puppeteer.page
    method: GET
- name: Page.mainFrame
  endpoint:
    path: /next/api/puppeteer.page.mainframe
    method: GET
- name: goBack
  endpoint:
    path: /goBack
    method: GET
    data_selector: HTTPResponse
    params: {}
- name: mainFrame
  endpoint:
    path: /next/api/puppeteer.mainFrame
    method: GET
    data_selector: Frame
    params: {}
- name: Page.metrics
  endpoint:
    path: /next/api/puppeteer.page.metrics
    method: GET
    data_selector: metrics
- name: Page.goForward
  endpoint:
    path: /next/api/puppeteer.page.goforward
    method: GET
- name: goForward
  endpoint:
    path: /next/api/puppeteer.page.goforward
    method: GET
- name: metrics
  endpoint:
    path: /next/api/puppeteer.metrics
    method: GET
    data_selector: Metrics
    params: {}
- name: Page.goto
  endpoint:
    path: /next/api/puppeteer.page.goto
    method: GET
- name: Page.pdf
  endpoint:
    path: /next/api/puppeteer.page.pdf
    method: GET
- name: goto
  endpoint:
    path: /next/api/puppeteer.gotooptions
    method: POST
    data_selector: HTTPResponse
    params: {}
- name: pdf
  endpoint:
    path: /method/Page.pdf
    method: POST
    data_selector: Uint8Array
    params:
      options: PDFOptions
- name: Page.hover
  endpoint:
    path: /next/api/puppeteer.page.hover
    method: GET
- name: Page.queryObjects
  endpoint:
    path: /next/api/puppeteer.page.queryobjects
    method: GET
- name: Page.hover
  endpoint:
    path: /next/api/puppeteer.page.hover
    method: GET
    data_selector: Promise<void>
    params: {}
- name: query_objects
  endpoint:
    path: /next/api/puppeteer.queryObjects
    method: POST
    data_selector: Promise<JSHandle<Prototype[]>>
    params:
      prototypeHandle: JSHandle<Prototype>
- name: Page.reload
  endpoint:
    path: /next/api/puppeteer.page.reload
    method: GET
- name: page
  endpoint:
    path: /api/puppeteer.page.isdraginterceptionenabled
    method: GET
- name: removeScriptToEvaluateOnNewDocument
  endpoint:
    path: removeScriptToEvaluateOnNewDocument
    method: POST
    data_selector: Promise<void>
    params:
      identifier: string
- name: Page
  endpoint:
    path: /next/api/puppeteer.page
    method: GET
    data_selector: ''
    params: {}
- name: Page.screencast
  endpoint:
    path: /next/api/puppeteer.page.screencast
    method: GET
- name: Page
  endpoint:
    path: /next/api/puppeteer.page.isserviceworkerbypassed
    method: GET
- name: screencast
  endpoint:
    path: /next/api/puppeteer.screencast
    method: POST
    data_selector: Promise<ScreenRecorder>
    params: {}
- name: locator
  endpoint:
    path: /next/api/puppeteer.locator
    method: GET
    data_selector: Locator<NodeFor<Selector>>
    params: {}
- name: screenshot_with_base64_encoding
  endpoint:
    path: /next/api/puppeteer.page.screenshot
    method: POST
    data_selector: Promise<string>
    params: {}
- name: screenshot_with_uint8array
  endpoint:
    path: /next/api/puppeteer.page.screenshot
    method: POST
    data_selector: Promise<Uint8Array>
    params: {}
- name: Page.mainFrame
  endpoint:
    path: /next/api/puppeteer.page.mainframe
    method: GET
- name: Page.select
  endpoint:
    path: /next/api/puppeteer.page.select
    method: GET
    data_selector: null
    params: {}
- name: mainFrame
  endpoint:
    path: /next/api/puppeteer.mainFrame
    method: GET
    data_selector: Frame
    params: {}
- name: Page.select
  endpoint:
    path: /next/api/puppeteer.page.select
    method: GET
    data_selector: Promise<string[]>
    params: {}
- name: Page
  endpoint:
    path: /next/api/puppeteer.page
    method: GET
- name: Page.metrics
  endpoint:
    path: /next/api/puppeteer.page.metrics
    method: GET
- name: Page.metrics
  endpoint:
    path: /next/api/puppeteer.page.metrics
    method: GET
- name: metrics
  endpoint:
    path: /next/api/puppeteer.metrics
    method: GET
    data_selector: Metrics
    params: {}
- name: Page.pdf
  endpoint:
    path: /next/api/puppeteer.page.pdf
    method: GET
- name: pdf
  endpoint:
    path: /pdf
    method: POST
    data_selector: Uint8Array
    params:
      options: PDFOptions
- name: Page.queryObjects
  endpoint:
    path: /next/api/puppeteer.page.queryobjects
    method: GET
- name: Page.reload
  endpoint:
    path: /next/api/puppeteer.page.reload
    method: GET
- name: reload
  endpoint:
    path: /reload
    method: POST
    data_selector: HTTPResponse
    params: {}
- name: removeExposedFunction
  endpoint:
    path: /removeExposedFunction
    method: POST
    data_selector: Promise<void>
    params:
      name: string
- name: Page.removeScriptToEvaluateOnNewDocument
  endpoint:
    path: /next/api/puppeteer.page.removescripttoevaluateonnewdocument
    method: GET
- name: removeScriptToEvaluateOnNewDocument
  endpoint:
    path: /api/puppeteer.page.removescripttoevaluateonnewdocument
    method: POST
    data_selector: Promise<void>
    params:
      identifier: string
- name: Page.screencast
  endpoint:
    path: /next/api/puppeteer.page.screencast
    method: GET
- name: screenshot
  endpoint:
    path: /next/api/puppeteer.page.screenshot
    method: GET
    data_selector: Promise<string>
    params: {}
- name: Page.select
  endpoint:
    path: /next/api/puppeteer.page.select
    method: GET
    data_selector: records
- name: select
  endpoint:
    path: /next/api/puppeteer.page.select
    method: GET
    data_selector: Promise<string[]>
notes:
- Puppeteer runs in the headless (no visible UI) by default
- Requires root privileges.
- When installed, it downloads a version of Chrome, which it then drives using puppeteer-core.
- Uses Puppeteer's API to manipulate browser pages
- Uses OAuth2 with refresh token — requires setup of connected app in api
- WebDriver BiDi enables bi-directional communication, making it fast by default.
- When launching Firefox with Puppeteer, the WebDriver BiDi Protocol is enabled by
  default.
- When launching Chrome, CDP is still used by default since not all CDP features are
  supported by WebDriver BiDi yet.
- Synchronize puppeteer versions
- Some features may require additional setup or configuration.
- The following workspace dependencies were updated
- Some objects like Contact may return nulls in deeply nested fields
- Puppeteer can also be used to control the Chrome browser, but it works best with
  the version of Chrome for Testing downloaded by default.
- Launching the system browsers is only possible for Chrome/Chromium.
- Puppeteer uses a custom test runner on top of Mocha that consults the TestExpectations.json
  to see if a given test result is expected or not.
- To keep this page up-to-date we largely rely on community contributions.
- The current Chromium version in Alpine 3.20 is causing timeout issues with Puppeteer.
  Downgrading to Alpine 3.19 fixes the issue.
- Chrome currently does not provide arm64 binaries for Linux.
- In high security environments a more restrictive SID should be used such as one
  from the installer.
- This is unreleased documentation for Puppeteer Next version.
- Accessibility is a very platform-specific thing.
- By default, Puppeteer tries to approximate filtering, exposing only the interesting
  nodes of the tree.
- Google App Engine caches your node_modules between builds. Specifying the Puppeteer
  cache as subdirectory of node_modules mitigates an issue in which Puppeteer can't
  find the browser executable due to postinstall not being run.
- Google Cloud Functions caches your node_modules between builds. Specifying the puppeteer
  cache as subdirectory of node_modules mitigates an issue in which the puppeteer
  install process does not run when the cache is hit.
- Most of the accessibility tree gets filtered out when converting from Blink AX Tree
  to Platform-specific AX-Tree or by assistive technologies themselves.
- By default, Puppeteer tries to approximate this filtering, exposing only the 'interesting'
  nodes of the tree.
- Accessibility is a very platform-specific thing. On different platforms, there are
  different screen readers that might have wildly different output.
- The constructor for this class is marked as internal. Third-party code should not
  call the constructor directly or create subclasses that extend the Accessibility
  class.
- The Chrome accessibility tree contains nodes that go unused on most platforms and
  by most screen readers.
- Puppeteer will discard them as well for an easier to process tree, unless `interestingOnly`
  is set to `false`.
- The constructor for this class is marked as internal. Third-party code should not
  call the constructor directly.
- One Browser instance might have multiple Page instances.
- The constructor for this class is marked as internal. Third-party code should not
  call the constructor directly or create subclasses that extend the `Page` class.
- In Chrome all non-default contexts are incognito, and default browser context might
  be incognito if you provide the `--incognito` argument when launching the browser.
- The constructor for this class is marked as internal. Third-party code should not
  call the constructor directly or create subclasses that extend the BrowserContext
  class.
- The constructor for this class is marked as internal. Third-party code should not
  call the constructor directly or create subclasses that extend the Page class.
- Used for nominally typing Locator.
- The Chrome accessibility tree contains nodes that go unused on most platforms and
  by most screen readers. Puppeteer will discard them as well for an easier to process
  tree, unless `interestingOnly` is set to `false`.
- The mouse events trigger synthetic MouseEvents. This means that it does not fully
  replicate the functionality of what a normal user would be able to do with their
  mouse.
- On macOS, keyboard shortcuts like `⌘ A` -> Select All do not work.
- The constructor for this class is marked as internal. Third-party code should not
  call the constructor directly or create subclasses that extend the `Keyboard` class.
- The constructor for this class is marked as internal. Third-party code should not
  call the constructor directly or create subclasses that extend the Touchscreen class.
- Only one trace can be active at a time per browser.
- If you want access to the clipboard API, you have to give it permission to do so.
- In browsers, only one file chooser can be opened at a time.
- All file choosers must be accepted or canceled.
- The constructor for this class is marked as internal. Third-party code should not
  call the constructor directly or create subclasses that extend the Frame class.
- HTTP Error responses, such as 404 or 503, are still successful responses from HTTP
  standpoint, so request will complete with `requestfinished` event.
- The constructor for this class is marked as internal. Third-party code should not
  call the constructor directly or create subclasses that extend the HTTPResponse
  class.
- The constructor for this class is marked as internal. Third-party code should not
  call the constructor directly or create subclasses that extend the Coverage class.
- TimeoutError is emitted whenever certain operations are terminated due to timeout.
- Puppeteer's documentation site uses cookies from Google to deliver and enhance the
  quality of its services and to analyze traffic.
- Example operations are page.waitForSelector or puppeteer.launch
- Whether to ignore HTTPS errors during navigation.
- Experimental setting to disable monitoring network events by default.
- Puppeteer works best with the version of Chrome for Testing downloaded by default.
- No guarantee it will work with any other version of Chrome.
- The method does not check if any other Puppeteer versions installed on the host
  that use the same cache directory require the non-current binaries.
- If this is set to true, then headless will be forced to false.
- Puppeteer is only guaranteed to work with the bundled browser, so use this setting
  at your own risk.
- If this is set to `true`, then `headless` will be forced to `false`.
- '* `true` launches the browser in the new headless mode.'
- '* `''shell''` launches shell known as the old headless mode.'
- Returns true if there are any listeners, false if there are not.
- The constructor for this class is marked as internal. Third-party code should not
  call the constructor directly or create subclasses that extend the BrowserLauncher
  class.
- Defines the directory to be used by Puppeteer for caching. Can be overridden by
  PUPPETEER_CACHE_DIR.
- Specifies which browser you'd like Puppeteer to use. Can be overridden by PUPPETEER_BROWSER.
- Specifies an executable path to be used in puppeteer.launch. Can be overridden by
  PUPPETEER_EXECUTABLE_PATH.
- Tells Puppeteer to not download during installation. Can be overridden by PUPPETEER_SKIP_DOWNLOAD.
- Defines the directory to be used by Puppeteer for creating temporary files. Can
  be overridden by PUPPETEER_TMP_DIR.
- DEFAULT_INTERCEPT_RESOLUTION_PRIORITY variable
- The constructor for this class is marked as internal. Third-party code should not
  call the constructor directly or create subclasses that extend the DeviceRequestPromptDevice
  class.
- Default value for scrollIntoView is true
- Setting downloadPath is required if behavior is set to allow or allowAndName.
- Setting policy to allowAndName will name all files according to their download guids.
- Experimental ExtensionTransport allows establishing a connection via chrome.debugger
  API if Puppeteer runs in an extension.
- Since Chrome DevTools Protocol is restricted for extensions, the transport implements
  missing commands and events.
- Maximum time to wait in milliseconds defaults to 30000 (30 seconds). Pass 0 to disable
  the timeout.
- Maximum time to wait in milliseconds. Defaults to 30000 (30 seconds). Pass 0 to
  disable the timeout.
- Parameters for launch function are optional.
- Count is optional with a default value of 1
- Delay is optional but no default value is provided
- Determines the number of movements to make from the current mouse position to the
  new one.
- Number of clicks to perform defaults to 1.
- Delay for mouse release after press is optional.
- Enumeration Members describe events emitted by the page.
- 'The sizes of each format are as follows: Letter: 8.5in x 11in / 21.59cm x 27.94cm,
  Legal: 8.5in x 14in / 21.59cm x 35.56cm, Tabloid: 11in x 17in / 27.94cm x 43.18cm,
  Ledger: 17in x 11in / 43.18cm x 27.94cm, A0: 33.1102in x 46.811in / 84.1cm x 118.9cm,
  A1: 23.3858in x 33.1102in / 59.4cm x 84.1cm, A2: 16.5354in x 23.3858in / 42cm x
  59.4cm, A3: 11.6929in x 16.5354in / 29.7cm x 42cm, A4: 8.2677in x 11.6929in / 21cm
  x 29.7cm, A5: 5.8268in x 8.2677in / 14.8cm x 21cm, A6: 4.1339in x 5.8268in / 10.5cm
  x 14.8cm'
- If the path is relative, it's resolved relative to the current working directory.
- Sizes of each format are detailed in the remarks section.
- Specifies the maximum number of palette colors to quantize, with GIF limited to
  256.
- Specifies whether to overwrite output file, or exit immediately if it already exists.
- scale is optional with a default value of 1
- The constructor for this class is marked as internal. Third-party code should not
  call the constructor directly or create subclasses that extend the ScreenRecorder
  class.
- Default scale is 1
- TouchError is thrown when an attempt is made to move or end a touch that does not
  exist.
- If true, gets accessibility trees for each of the iframes in the frame subtree.
- Prune uninteresting nodes from the tree.
- Puppeteer will throw this error if a method is not supported by the currently used
  protocol
- Maximum number concurrent of network connections to be considered inactive is 0
- Time (in milliseconds) the network should be idle is 500
- Maximum wait time can be changed using Page.setDefaultTimeout or Page.setDefaultNavigationTimeout
  methods.
- Maximum time to wait in milliseconds is 30_000 (30 seconds).
- Maximum wait time in milliseconds. Pass `0` to disable the timeout.
- Maximum wait time in milliseconds can be set using the Page.setDefaultTimeout()
  or Page.setDefaultNavigationTimeout() methods.
- Default timeout value is 30000.
- Default waitUntil event is 'load'.
- Maximum wait time in milliseconds is 30_000. Pass 0 to disable the timeout.
- The default value can be changed by using the Page.setDefaultTimeout() method.
- The default browser context cannot be closed.
- This API is now obsolete.
- 'In Chrome, this is only available if the browser was created using `pipe: true`
  and the `--enable-unsafe-extension-debugging` flag is set.'
- If no element is found matching selector, the method will throw an error.
- If pageFunction returns a promise $eval will wait for the promise to resolve and
  then return its value.
- Request interception will be turned on behind the scenes to implement authentication.
  This might affect performance.
- If pageFunction returns a promise $eval will wait for the promise to resolve.
- Page-level cookie API is deprecated. Use Browser.cookies() or BrowserContext.cookies()
  instead.
- To generate a PDF with the screen media type, call page.emulateMediaType('screen')
  before calling page.pdf()
- By default, page.pdf() generates a pdf with modified colors for printing. Use the
  -webkit-print-color-adjust property to force rendering of exact colors.
- To disable authentication, pass null.
- Page-level cookie API is deprecated. Use Browser.deleteCookie, BrowserContext.deleteCookie,
  Browser.deleteMatchingCookies or BrowserContext.deleteMatchingCookies instead.
- Passing null disables timezone emulation.
- Page-level cookie API is deprecated. Use Browser.deleteCookie, BrowserContext.deleteCookie
  or Browser.deleteMatchingCookies instead.
- This method fetches an element with `selector` and focuses it. If there's no element
  matching `selector`, the method throws an error.
- 'All timestamps are in monotonic time: monotonically increasing time in seconds
  since an arbitrary point in the past.'
- Headless shell mode doesn't support navigation to a PDF document.
- In headless shell, this method will not throw an error when any valid HTTP status
  code is returned by the remote server, including 404 'Not Found' and 500 'Internal
  Server Error'.
- Shortcut for page.mainFrame().hover(selector)
- We no longer support intercepting drag payloads. Use the new drag APIs found on
  ElementHandle to drag (or just use the Page.mouse).
- By default, all recordings will be WebM format using the VP9 video codec, with a
  frame rate of 30 FPS.
- You must have ffmpeg installed on your system.
- Triggers a change and input event once all the provided options have been selected.
- If there's no <select> element matching selector, the method throws an error.
errors:
- 'REQUEST_LIMIT_EXCEEDED: Throttle API calls or reduce frequency'
- 'QUERY_TIMEOUT: Break down filters or add selectivity'
- '401 Unauthorized: Recheck OAuth scopes or token expiration'
- aborted
- accessdenied
- addressunreachable
- blockedbyclient
- blockedbyresponse
- connectionaborted
- connectionclosed
- connectionfailed
- connectionrefused
- connectionreset
- internetdisconnected
- namenotresolved
- timedout
- failed
auth_info:
  mentioned_objects:
  - CDPSession
  - CDPEvents
  - EventType
  - KeyDownOptions
  - KeyboardTypeOptions
  - ConsoleMessage
  - Dialog
  - Frame
  - Metrics
  - HTTPRequest
  - HTTPResponse
  - WebWorker
client:
  base_url: https://github.com/puppeteer/puppeteer/blob
  headers:
    Accept: application/json
source_metadata: null
