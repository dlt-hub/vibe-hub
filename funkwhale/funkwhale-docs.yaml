resources:
- name: import_files
  endpoint:
    path: /funkwhale-manage/import_files
    method: POST
    data_selector: results
    params:
      library_id: 769a2bc3
      music_directory: data/music
      options: --recursive --noinput
- name: import_music
  endpoint:
    path: /import_files
    method: POST
    data_selector: files
    params: {}
- name: import_music
  endpoint:
    path: /import/music
    method: POST
    data_selector: files
    params: {}
- name: import_music
  endpoint:
    path: /import/music
    method: POST
    data_selector: results
- name: import_music
  endpoint:
    path: /import/music
    method: POST
    data_selector: data
    params: {}
- name: import_music
  endpoint:
    path: /import_files
    method: POST
    data_selector: import_results
- name: activity
  endpoint:
    path: /federation/activities
    method: POST
    data_selector: data
    params: {}
- name: library
  endpoint:
    path: /federation/libraries
    method: GET
    data_selector: libraries
    params: {}
- name: audio
  endpoint:
    path: /federation/audio
    method: GET
    data_selector: audio
    params: {}
- name: Library
  endpoint:
    path: /federation/music/libraries
    method: GET
- name: Audio
  endpoint:
    path: /federation/music/uploads
    method: GET
- name: Library
  endpoint:
    path: /federation/music/libraries
    method: GET
    data_selector: records
- name: Audio
  endpoint:
    path: /federation/music/uploads
    method: GET
    data_selector: records
- name: Artist
  endpoint:
    path: /federation/music/artists
    method: GET
    data_selector: records
- name: Album
  endpoint:
    path: /federation/music/albums
    method: GET
    data_selector: records
- name: Track
  endpoint:
    path: /federation/music/tracks
    method: GET
    data_selector: records
- name: collections
  endpoint:
    path: /api/collections
    method: GET
    data_selector: collections
- name: uploaded_content
  endpoint:
    path: /api/uploaded_content
    method: GET
    data_selector: uploaded_content
- name: nodeinfo
  endpoint:
    path: /api/v2/instance/nodeinfo/2.1
    method: GET
- name: collections
  endpoint:
    path: /api/collections
    method: GET
    data_selector: collections
    params: {}
- name: quality_filter
  endpoint:
    path: /api/v2/quality_filter
    method: GET
    data_selector: data
    params: {}
- name: nodeinfo
  endpoint:
    path: /api/v2/instance/nodeinfo/2.1
    method: GET
    data_selector: metadata
- name: follow_user
  endpoint:
    path: /api/v2/users/{id}/follow
    method: POST
- name: unfollow_user
  endpoint:
    path: /api/v2/users/{id}/unfollow
    method: POST
- name: block_user
  endpoint:
    path: /api/v2/users/{id}/block
    method: POST
- name: unblock_user
  endpoint:
    path: /api/v2/users/{id}/unblock
    method: POST
- name: quality_filter
  endpoint:
    path: /api/v2/quality_filter
    method: GET
    data_selector: data
    params: {}
- name: follow_user
  endpoint:
    path: /api/v2/users/{id}/follow
    method: POST
- name: unfollow_user
  endpoint:
    path: /api/v2/users/{id}/unfollow
    method: POST
- name: block_user
  endpoint:
    path: /api/v2/users/{id}/block
    method: POST
- name: unblock_user
  endpoint:
    path: /api/v2/users/{id}/unblock
    method: POST
- name: libraries
  endpoint:
    path: /api/v1/libraries
    method: GET
    data_selector: libraries
    params:
      scope: me
- name: libraries
  endpoint:
    path: /api/v1/libraries
    method: GET
    data_selector: accessible libraries
    params:
      scope: me
- name: artists
  endpoint:
    path: /api/v1/artists
    method: GET
    data_selector: records
- name: tracks
  endpoint:
    path: /api/v1/tracks
    method: GET
    data_selector: records
- name: albums
  endpoint:
    path: /api/v1/albums
    method: GET
    data_selector: records
- name: import_requests
  endpoint:
    path: /api/v1/requests/import-requests
    method: GET
    data_selector: records
- name: instance_information
  endpoint:
    path: /api/v1/instance/nodeinfo/2.0/
    method: GET
    data_selector: instance_data
- name: createPlaylist
  endpoint:
    path: /rest/createPlaylist.view
    method: POST
- name: deletePlaylist
  endpoint:
    path: /rest/deletePlaylist.view
    method: POST
- name: getAlbum
  endpoint:
    path: /rest/getAlbum.view
    method: GET
- name: getAlbumList2
  endpoint:
    path: /rest/getAlbumList2.view
    method: GET
- name: getArtist
  endpoint:
    path: /rest/getArtist.view
    method: GET
- name: getArtistInfo2
  endpoint:
    path: /rest/getArtistInfo2.view
    method: GET
- name: getArtists
  endpoint:
    path: /rest/getArtists.view
    method: GET
- name: getAvatar
  endpoint:
    path: /rest/getAvatar.view
    method: GET
- name: getCoverArt
  endpoint:
    path: /rest/getCoverArt.view
    method: GET
- name: getIndexes
  endpoint:
    path: /rest/getIndexes.view
    method: GET
- name: getLicense
  endpoint:
    path: /rest/getLicense.view
    method: GET
- name: getMusicFolders
  endpoint:
    path: /rest/getMusicFolders.view
    method: GET
- name: getPlaylist
  endpoint:
    path: /rest/getPlaylist.view
    method: GET
- name: getPlaylists
  endpoint:
    path: /rest/getPlaylists.view
    method: GET
- name: getRandomSongs
  endpoint:
    path: /rest/getRandomSongs.view
    method: GET
- name: getSong
  endpoint:
    path: /rest/getSong.view
    method: GET
- name: getStarred
  endpoint:
    path: /rest/getStarred.view
    method: GET
- name: getStarred2
  endpoint:
    path: /rest/getStarred2.view
    method: GET
- name: getUser
  endpoint:
    path: /rest/getUser.view
    method: GET
- name: ping
  endpoint:
    path: /rest/ping.view
    method: GET
- name: scrobble
  endpoint:
    path: /rest/scrobble.view
    method: POST
- name: search3
  endpoint:
    path: /rest/search3.view
    method: GET
- name: star
  endpoint:
    path: /rest/star.view
    method: POST
- name: stream
  endpoint:
    path: /rest/stream.view
    method: GET
- name: unstar
  endpoint:
    path: /rest/unstar.view
    method: POST
- name: updatePlaylist
  endpoint:
    path: /rest/updatePlaylist.view
    method: POST
- name: createPlaylist
  endpoint:
    path: /rest/createPlaylist.view
    method: GET
- name: deletePlaylist
  endpoint:
    path: /rest/deletePlaylist.view
    method: GET
- name: getAlbum
  endpoint:
    path: /rest/getAlbum.view
    method: GET
- name: getAlbumList2
  endpoint:
    path: /rest/getAlbumList2.view
    method: GET
- name: getArtist
  endpoint:
    path: /rest/getArtist.view
    method: GET
- name: getArtistInfo2
  endpoint:
    path: /rest/getArtistInfo2.view
    method: GET
- name: getArtists
  endpoint:
    path: /rest/getArtists.view
    method: GET
- name: getAvatar
  endpoint:
    path: /rest/getAvatar.view
    method: GET
- name: getCoverArt
  endpoint:
    path: /rest/getCoverArt.view
    method: GET
- name: getIndexes
  endpoint:
    path: /rest/getIndexes.view
    method: GET
- name: getLicense
  endpoint:
    path: /rest/getLicense.view
    method: GET
- name: getMusicFolders
  endpoint:
    path: /rest/getMusicFolders.view
    method: GET
- name: getPlaylist
  endpoint:
    path: /rest/getPlaylist.view
    method: GET
- name: getPlaylists
  endpoint:
    path: /rest/getPlaylists.view
    method: GET
- name: getRandomSongs
  endpoint:
    path: /rest/getRandomSongs.view
    method: GET
- name: getSong
  endpoint:
    path: /rest/getSong.view
    method: GET
- name: getStarred
  endpoint:
    path: /rest/getStarred.view
    method: GET
- name: getStarred2
  endpoint:
    path: /rest/getStarred2.view
    method: GET
- name: getUser
  endpoint:
    path: /rest/getUser.view
    method: GET
- name: ping
  endpoint:
    path: /rest/ping.view
    method: GET
- name: scrobble
  endpoint:
    path: /rest/scrobble.view
    method: GET
- name: search3
  endpoint:
    path: /rest/search3.view
    method: GET
- name: star
  endpoint:
    path: /rest/star.view
    method: GET
- name: stream
  endpoint:
    path: /rest/stream.view
    method: GET
- name: unstar
  endpoint:
    path: /rest/unstar.view
    method: GET
- name: updatePlaylist
  endpoint:
    path: /rest/updatePlaylist.view
    method: GET
notes:
- Access tokens are valid for 10 hours
- Refresh tokens must be updated each time an access token is requested
- 'Funkwhale supports the following import methods: Copy (default) and In-place import.'
- Funkwhale supports both copy and in-place import methods.
- Funkwhale supports copy and in-place import methods.
- For some administration you need to access data that isn’t available on the frontend.
- If you have the Library permission, you can change content on your pod. Use this
  permission to hide copyrighted content and remove offensive material.
- Funkwhale pods can share information between one another.
- Crawling library pages requires authentication and an approved follow unless the
  library is public.
- Accessing audio files requires authentication and an approved follow for the containing
  library unless the library is public.
- A real-time preview of the documentation is available on http://0.0.0.1:8001
- The NodeInfo endpoint must contain all mandatory elements listed in the specification.
- A new NodeInfo endpoint will be created that sits alongside the existing v1 endpoint
  for backwards-compatibility.
- A new NodeInfo endpoint will be created that sits alongside the existing `v1` endpoint
  for backwards-compatibility.
- The app needs to detect when it has gone offline.
- All interactive elements should be visibly disabled when offline.
- If the target user has configured their profile to be public, all Follows are Accepted
  immediately.
- Uses OAuth2 with refresh token — requires setup of connected app in api
- Some objects may return nulls in deeply nested fields
- The API actions and endpoint names are placeholders.
- Upgrade instructions are available at https://docs.funkwhale.audio/administrator/upgrade/index.html
- JWT deprecation
- Enforce authentication when viewing remote channels, profiles and libraries
- API Authentication using JWT is deprecated and will be removed in Funkwhale 1.0.
  Please use OAuth or application tokens
- OAuth2 authorization for better integration with third-party apps
- This change is disabled by default, but should be enabled by default starting in
  Funkwhale 0.21.
- Rate-limiting on the API is enabled by default.
- To allow easier crawling of public libraries on a pod, we had to make a slight breaking
  change to the behaviour of GET /api/v1/libraries.
- Rate-limiting on the API is enabled by default, with high enough limits to ensure
  regular users of the app aren’t affected.
- On docker setups, edit your /srv/funkwhale/nginx/funkwhale.template and replace
  the location /api/ and location / blocks by the provided snippets.
- On non-docker setups, edit your /etc/nginx/sites-available/funkwhale.conf file,
  and replace the location /api/ and location / blocks by the provided snippets.
- Funkwhale now supports LDAP as an authentication source.
- Funkwhale now support the OAuth2 authorization and authentication protocol which
  will allow third-party apps to interact with Funkwhale on behalf of users.
- Better error handling and display during import.
- Upgrade instructions are available at https://docs.funkwhale.audio/upgrading.html
- This release is dedicated to Naomi, an early contributor and beta tester of Funkwhale.
- Upgrade instructions are available at https://docs.funkwhale.audio/administrator/upgrade/index.html.
- Funkwhale now support LDAP as an authentication source.
- Never run the makemigrations command yourself.
- The API is still not stable and may evolve again in the future.
- The Subsonic can be disabled at the instance level from the django admin.
- Because of Subsonic’s API design which assumes cleartext storing of user passwords,
  we chose to have a dedicated, separate password for that purpose.
- The API is still not stable and may evolve again in the future. API freeze will
  come at a later point.
- Subsonic API is enabled by default but requires an additional endpoint to be added
  in your reverse-proxy configuration.
- Federation of music libraries is one of the most asked feature. While there is still
  a lot of work to do, this version includes the foundation that will enable funkwhale
  servers to communicate between each others, and with other federated software, such
  as Mastodon.
- Federation of music libraries is one of the most asked feature.
- Funkwhale will use ActivityPub as its federation protocol.
- Anonymous (unauthenticated) requests are subject to lower limits than authenticated
  requests
- PUT, DELETE, PUT, POST, and PATCH requests are subject to lower limits than GET
  requests
- 'By default, rate limits follow these rules: Anonymous (unauthenticated) requests
  are subject to lower limits than authenticated requests'
errors:
- 'REQUEST_LIMIT_EXCEEDED: Throttle API calls or reduce frequency'
- 'QUERY_TIMEOUT: Break down filters or add selectivity'
- '401 Unauthorized: Recheck OAuth scopes or token expiration'
- '429 Too Many Requests: Requests beyond allowed limits are answered with this error.'
- '429 Too Many Requests: Requests beyond allowed limits are answered with a 429 HTTP
  error.'
- Ensure empty but optional fields in file metadata don’t error during import (#850)
- Fix broken upload for specific files when using S3 storage (#857)
- '429: Too Many Requests'
auth_info:
  mentioned_objects:
  - LDAP
client:
  base_url: https://docs.funkwhale.audio
  headers:
    Accept: application/json
source_metadata: null
