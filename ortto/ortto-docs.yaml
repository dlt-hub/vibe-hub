resources:
- name: account
  endpoint:
    path: /v1/instance-schema/get
    method: GET
- name: activities
  endpoint:
    path: /v1/activities/create
    method: POST
- name: activity
  endpoint:
    path: /v1/definitions/activity/create
    method: POST
- name: audiences
  endpoint:
    path: /v1/audience/subscribe
    method: POST
- name: campaign
  endpoint:
    path: /v1/assets/get-html
    method: GET
- name: custom-field
  endpoint:
    path: /v1/accounts/custom-field/create
    method: POST
- name: knowledge-base
  endpoint:
    path: /v1/kb/get-articles
    method: GET
- name: tags
  endpoint:
    path: /v1/tags/get
    method: GET
- name: transactional
  endpoint:
    path: /v1/transactional/send
    method: POST
- name: articles
  endpoint:
    path: /articles
    method: GET
    data_selector: articles
    params: {}
- name: campaign
  endpoint:
    path: /api/campaigns
    method: POST
    data_selector: campaigns
    params: {}
- name: webhook_response
  endpoint:
    path: /webhook/response
    method: POST
    data_selector: fields
    params: {}
- name: sms_campaign
  endpoint:
    path: /v1/sms/campaigns
    method: POST
    data_selector: data
    params: {}
- name: Bounced SMS
  endpoint:
    path: /bounced_sms
    method: GET
    data_selector: Reason
- name: person
  endpoint:
    path: /v1/person/merge
    method: POST
    data_selector: SMS permission
    params: {}
- name: Create record
  endpoint:
    path: /services/data/vXX.X/sobjects/CreateRecord
    method: POST
    data_selector: records
- name: Update record
  endpoint:
    path: /services/data/vXX.X/sobjects/UpdateRecord
    method: PATCH
    data_selector: records
- name: Create or update record
  endpoint:
    path: /services/data/vXX.X/sobjects/CreateOrUpdateRecord
    method: PUT
    data_selector: records
- name: Change campaign status
  endpoint:
    path: /services/data/vXX.X/sobjects/ChangeCampaignStatus
    method: PATCH
    data_selector: records
- name: Add to campaign
  endpoint:
    path: /services/data/vXX.X/sobjects/AddToCampaign
    method: POST
    data_selector: records
- name: Remove from campaign
  endpoint:
    path: /services/data/vXX.X/sobjects/RemoveFromCampaign
    method: DELETE
    data_selector: records
- name: embeddable_form
  endpoint:
    path: /marketing/capture/new_widget
    method: GET
    data_selector: forms
    params: {}
- name: in_app_notifications
  endpoint:
    path: /capture/widgets/in_app_notifications
    method: POST
    data_selector: widget
    params: {}
- name: capture_widget
  endpoint:
    path: /form
    method: GET
    data_selector: form_fields
    params: {}
- name: capture_widget
  endpoint:
    path: /api/v1/capture_widgets
    method: GET
    data_selector: widgets
    params: {}
- name: people
  endpoint:
    path: /c-42-people
    method: GET
    data_selector: records
    params: {}
- name: person
  endpoint:
    path: /api/v1/person
    method: GET
    data_selector: data
    params: {}
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
- name: lead
  endpoint:
    path: /services/data/vXX.X/sobjects/Lead
    method: GET
    data_selector: records
- name: campaign
  endpoint:
    path: /services/data/vXX.X/sobjects/Campaign
    method: GET
    data_selector: records
- name: opportunity
  endpoint:
    path: /services/data/vXX.X/sobjects/Opportunity
    method: GET
    data_selector: records
- name: abandoned_checkout
  endpoint:
    path: /abandoned_checkout
    method: GET
    data_selector: records
- name: abandoned_cart
  endpoint:
    path: /abandoned_cart
    method: GET
    data_selector: records
- name: added_product_to_cart
  endpoint:
    path: /added_product_to_cart
    method: GET
    data_selector: records
- name: back_in_stock
  endpoint:
    path: /back_in_stock
    method: GET
    data_selector: records
- name: checkout_started
  endpoint:
    path: /checkout_started
    method: GET
    data_selector: records
- name: placed_order
  endpoint:
    path: /placed_order
    method: GET
    data_selector: records
- name: updated_order
  endpoint:
    path: /updated_order
    method: GET
    data_selector: records
- name: price_dropped
  endpoint:
    path: /price_dropped
    method: GET
    data_selector: records
- name: ordered_product
  endpoint:
    path: /ordered_product
    method: GET
    data_selector: records
- name: viewed_product
  endpoint:
    path: /viewed_product
    method: GET
    data_selector: records
- name: waiting_on_stock
  endpoint:
    path: /waiting_on_stock
    method: GET
    data_selector: records
- name: created_customer
  endpoint:
    path: /customers
    method: POST
- name: updated_customer
  endpoint:
    path: /customers
    method: PUT
- name: created_draft_order
  endpoint:
    path: /draft_orders
    method: POST
- name: updated_draft_order
  endpoint:
    path: /draft_orders
    method: PUT
- name: added_to_cart
  endpoint:
    path: /activities/added_to_cart
    method: GET
- name: cart_abandoned
  endpoint:
    path: /activities/cart_abandoned
    method: GET
- name: checkout_abandoned
  endpoint:
    path: /activities/checkout_abandoned
    method: GET
- name: back_in_stock
  endpoint:
    path: /activities/back_in_stock
    method: GET
- name: checkout_started
  endpoint:
    path: /activities/checkout_started
    method: GET
- name: order_created
  endpoint:
    path: /activities/order_created
    method: GET
- name: order_modified
  endpoint:
    path: /activities/order_modified
    method: GET
- name: order_refunded
  endpoint:
    path: /activities/order_refunded
    method: GET
- name: price_dropped
  endpoint:
    path: /activities/price_dropped
    method: GET
- name: review_created
  endpoint:
    path: /activities/review_created
    method: GET
- name: review_modified
  endpoint:
    path: /activities/review_modified
    method: GET
- name: ordered_product
  endpoint:
    path: /activities/ordered_product
    method: GET
- name: viewed_product
  endpoint:
    path: /activities/viewed_product
    method: GET
- name: waiting_on_stock
  endpoint:
    path: /activities/waiting_on_stock
    method: GET
- name: campaign
  endpoint:
    path: /services/data/vXX.X/sobjects/Campaign
    method: GET
    data_selector: records
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
- name: lead
  endpoint:
    path: /services/data/vXX.X/sobjects/Lead
    method: GET
    data_selector: records
- name: opportunity
  endpoint:
    path: /services/data/vXX.X/sobjects/Opportunity
    method: GET
    data_selector: records
- name: attribution_window
  endpoint:
    path: /attribution/window
    method: GET
    data_selector: attribution_window
    params: {}
- name: attribution_model
  endpoint:
    path: /attribution/model
    method: GET
    data_selector: attribution_model
    params: {}
- name: touch_triggers
  endpoint:
    path: /touch/triggers
    method: GET
    data_selector: touch_triggers
    params: {}
- name: activities
  endpoint:
    path: /activities
    method: GET
    data_selector: activities
    params: {}
- name: activity_attributes
  endpoint:
    path: /activity/attributes
    method: GET
    data_selector: activity_attributes
    params: {}
- name: value_label
  endpoint:
    path: /value/label
    method: GET
    data_selector: value_label
    params: {}
- name: templates
  endpoint:
    path: /c-303-email/templates
    method: GET
    data_selector: templates
    params: {}
- name: custom_domains
  endpoint:
    path: /c-310-custom-domains
    method: GET
    data_selector: domains
    params: {}
- name: sms_numbers
  endpoint:
    path: /sms/numbers
    method: GET
- name: iOS_in_app_notifications
  endpoint:
    path: /in-app-notifications/ios
    method: GET
- name: Android_in_app_notifications
  endpoint:
    path: /in-app-notifications/android
    method: GET
- name: Talk messenger
  endpoint:
    path: /c-16-talk-messenger
    method: GET
    data_selector: conversations
    params: {}
- name: scores
  endpoint:
    path: /scores
    method: GET
    data_selector: data
    params: {}
- name: fields
  endpoint:
    path: /fields
    method: GET
    data_selector: fields
    params: {}
- name: users
  endpoint:
    path: /users
    method: GET
    data_selector: users
    params: {}
- name: accounts
  endpoint:
    path: /v1/accounts/merge
    method: POST
    data_selector: accounts
    params:
      merge_by:
      - str:o:name
      merge_strategy: 2
- name: add_people_to_account
  endpoint:
    path: /v1/organizations/contacts/add
    method: PUT
    data_selector: inclusion_ids
    params: {}
- name: remove_people_from_account
  endpoint:
    path: /v1/organizations/contacts/remove
    method: PUT
    data_selector: inclusion_ids
    params: {}
- name: audience_members
  endpoint:
    path: /v1/person/get
    method: POST
    data_selector: contacts
    params:
      limit: 100
      sort_by_field_id: str::last
      sort_order: asc
      offset: 0
      fields:
      - str::first
      - str::last
      - str::email
      - str:cm:job-title
- name: activities
  endpoint:
    path: /v1/activities/create
    method: POST
    data_selector: activities
    params: {}
- name: person_merge
  endpoint:
    path: /person/merge
    method: POST
    data_selector: people
- name: person_get
  endpoint:
    path: /person/get
    method: POST
    data_selector: people
- name: activities
  endpoint:
    path: /v1/activities/create
    method: POST
    data_selector: activities
- name: activities
  endpoint:
    path: /v1/activities/create
    method: POST
    data_selector: activities
- name: archive_person
  endpoint:
    path: /v1/person/archive
    method: PUT
- name: restore_person
  endpoint:
    path: /v1/person/restore
    method: PUT
- name: delete_person
  endpoint:
    path: /v1/person/delete
    method: DELETE
- name: archive_organizations
  endpoint:
    path: /v1/organizations/archive
    method: PUT
    data_selector: ''
    params: {}
- name: restore_organizations
  endpoint:
    path: /v1/organizations/restore
    method: PUT
    data_selector: ''
    params: {}
- name: delete_organizations
  endpoint:
    path: /v1/organizations/delete
    method: DELETE
    data_selector: ''
    params: {}
- name: send_email
  endpoint:
    path: /v1/transactional/send
    method: POST
    data_selector: null
    params: {}
- name: transactional_send
  endpoint:
    path: /v1/transactional/send
    method: POST
    data_selector: emails
    params: {}
- name: transactional_send
  endpoint:
    path: /v1/transactional/send
    method: POST
- name: transactional_email
  endpoint:
    path: /api/v1/send_email
    method: POST
    data_selector: emails
    params: {}
- name: transactional_sms
  endpoint:
    path: /v1/transactional/send-sms
    method: POST
    data_selector: asset
    params: {}
- name: person
  endpoint:
    path: /v1/person/merge
    method: POST
    data_selector: people
    params:
      merge_by:
      - str::ei
      - str::email
      merge_strategy: 2
      async: false
- name: person
  endpoint:
    path: /v1/person/merge
    method: POST
    data_selector: people
- name: subscriptions
  endpoint:
    path: /v1/person/subscriptions
    method: POST
    data_selector: people
    params: {}
- name: audience_subscribe
  endpoint:
    path: /v1/audience/subscribe
    method: PUT
    data_selector: people
    params: {}
- name: person_merge
  endpoint:
    path: /v1/person/merge
    method: POST
    data_selector: people
- name: person_get
  endpoint:
    path: /v1/person/get
    method: POST
    data_selector: contacts
- name: person
  endpoint:
    path: /v1/person/get
    method: POST
    data_selector: contacts
    params:
      limit: 100
      sort_by_field_id: str::last
      sort_order: asc
      offset: 0
      fields:
      - str::first
      - str::last
      - str::email
      - str:cm:job-title
      filter:
        $has_any_value:
          field_id: str::first
- name: contacts
  endpoint:
    path: /person/get
    method: POST
    data_selector: contacts
    params: {}
- name: person
  endpoint:
    path: /v1/person/get
    method: POST
    data_selector: contacts
    params:
      offset: 0
      fields:
      - str::first
      - str::last
      - str::email
      - str:cm:job-title
      filter:
        $str::is:
          field_id: str::ei
          value: c533532fe5d16c7d4fa4c7f0
- name: push_notifications
  endpoint:
    path: /notifications
    method: POST
- name: push_notifications
  endpoint:
    path: /push/notifications
    method: POST
    data_selector: notifications
    params: {}
- name: push_notifications
  endpoint:
    path: /push_notifications/setup
    method: POST
- name: popup_widget
  endpoint:
    path: /settings/in-app-notifications/ios
    method: GET
    data_selector: widgets
    params: {}
- name: talk_session
  endpoint:
    path: /v1/talk/session
    method: POST
    data_selector: session_id
    params: {}
- name: talk_messenger
  endpoint:
    path: /talk
    method: GET
    data_selector: methods
    params: {}
- name: instance_schema
  endpoint:
    path: /v1/instance-schema/get
    method: POST
    data_selector: namespaces
- name: person_merge
  endpoint:
    path: /v1/person/merge
    method: POST
- name: person_get
  endpoint:
    path: /v1/person/get
    method: POST
- name: person_subscriptions
  endpoint:
    path: /v1/person/subscriptions
    method: POST
- name: person_get_activities
  endpoint:
    path: /v1/person/get/activities
    method: POST
- name: person_archive
  endpoint:
    path: /v1/person/archive
    method: PUT
- name: person_restore
  endpoint:
    path: /v1/person/restore
    method: PUT
- name: person_delete
  endpoint:
    path: /v1/person/delete
    method: DELETE
- name: person_merge
  endpoint:
    path: /v1/person/merge
    method: POST
    data_selector: people
    params: {}
- name: person
  endpoint:
    path: /v1/person/get
    method: POST
    data_selector: records
    params: {}
- name: person_by_ids
  endpoint:
    path: /v1/person/get-by-ids
    method: POST
    data_selector: records
    params: {}
- name: contacts
  endpoint:
    path: /contacts
    method: GET
    data_selector: contacts
    params: {}
- name: subscriptions
  endpoint:
    path: /v1/person/subscriptions
    method: POST
    data_selector: people
- name: archive_person
  endpoint:
    path: /v1/person/archive
    method: PUT
- name: restore_person
  endpoint:
    path: /v1/person/restore
    method: PUT
- name: delete_person
  endpoint:
    path: /v1/person/delete
    method: DELETE
- name: activities
  endpoint:
    path: /v1/person/get/activities
    method: POST
    data_selector: activities
- name: suppression_list_get
  endpoint:
    path: /v1/suppression-list/email/get
    method: POST
- name: suppression_list_add
  endpoint:
    path: /v1/suppression-list/email/add
    method: PUT
- name: suppression_list_remove
  endpoint:
    path: /v1/suppression-list/email/remove
    method: PUT
- name: update_contact_email
  endpoint:
    path: /api/update_contact_email
    method: POST
    data_selector: people
    params: {}
- name: retrieve_contact_ids
  endpoint:
    path: /api/retrieve_contact_ids
    method: GET
    data_selector: contacts
    params: {}
- name: accounts
  endpoint:
    path: /a-276-accounts-previously-organizations
    method: GET
- name: create_or_update_accounts
  endpoint:
    path: /a-278-create-or-update-one-or-more-organizations-merge
    method: POST
- name: archive_restore_delete_accounts
  endpoint:
    path: /a-279-archive-restore-and-delete-organizations-archive-restore-delete
    method: DELETE
- name: manage_association
  endpoint:
    path: /a-280-manage-organization-association-add-remove
    method: POST
- name: tagging_untagging_accounts
  endpoint:
    path: /a-784-tagging-and-untagging-organizations
    method: POST
- name: get_accounts
  endpoint:
    path: /v1/accounts/get
    method: POST
- name: merge_accounts
  endpoint:
    path: /v1/accounts/merge
    method: POST
- name: archive_account
  endpoint:
    path: /v1/accounts/archive
    method: PUT
- name: restore_account
  endpoint:
    path: /v1/accounts/restore
    method: PUT
- name: delete_account
  endpoint:
    path: /v1/accounts/delete
    method: DELETE
- name: add_contact_to_account
  endpoint:
    path: /v1/accounts/contacts/add
    method: PUT
- name: remove_contact_from_account
  endpoint:
    path: /v1/accounts/contacts/remove
    method: PUT
- name: accounts_merge
  endpoint:
    path: /v1/accounts/merge
    method: POST
    data_selector: accounts
- name: accounts
  endpoint:
    path: /v1/accounts/get
    method: POST
    data_selector: accounts
    params: {}
- name: accounts_by_ids
  endpoint:
    path: /v1/accounts/get-by-ids
    method: POST
    data_selector: accounts
    params: {}
- name: archive_accounts
  endpoint:
    path: /v1/accounts/archive
    method: PUT
    data_selector: ''
    params: {}
- name: restore_accounts
  endpoint:
    path: /v1/accounts/restore
    method: PUT
    data_selector: ''
    params: {}
- name: delete_accounts
  endpoint:
    path: /v1/accounts/delete
    method: DELETE
    data_selector: ''
    params: {}
- name: add_contacts_to_account
  endpoint:
    path: /v1/accounts/contacts/add
    method: PUT
    data_selector: response
    params: {}
- name: remove_contacts_from_account
  endpoint:
    path: /v1/accounts/contacts/remove
    method: PUT
    data_selector: response
    params: {}
- name: accounts_merge
  endpoint:
    path: /v1/accounts/merge
    method: POST
    data_selector: accounts
- name: accounts_get
  endpoint:
    path: /v1/accounts/get
    method: POST
    data_selector: accounts
- name: get_audiences
  endpoint:
    path: /v1/audiences/get
    method: POST
    data_selector: audiences
    params: {}
- name: subscribe_audience
  endpoint:
    path: /v1/audience/subscribe
    method: PUT
    data_selector: response
    params: {}
- name: audiences
  endpoint:
    path: /audiences/get
    method: POST
    data_selector: audiences
    params: {}
- name: subscribe
  endpoint:
    path: /v1/audience/subscribe
    method: PUT
    data_selector: ''
    params: {}
- name: create_custom_contact_field
  endpoint:
    path: /v1/person/custom-field/create
    method: POST
    data_selector: null
    params: {}
- name: update_multi_select_person_field_options
  endpoint:
    path: /v1/person/custom-field/update
    method: PUT
    data_selector: null
    params: {}
- name: update_multi_select_account_field_options
  endpoint:
    path: /v1/accounts/custom-field/update
    method: PUT
    data_selector: null
    params: {}
- name: create_custom_account_field
  endpoint:
    path: /v1/accounts/custom-field/create
    method: POST
    data_selector: null
    params: {}
- name: retrieve_custom_contact_fields
  endpoint:
    path: /v1/person/custom-field/get
    method: POST
    data_selector: null
    params: {}
- name: retrieve_custom_account_fields
  endpoint:
    path: /v1/accounts/custom-field/get
    method: POST
    data_selector: null
    params: {}
- name: custom_contact_field
  endpoint:
    path: /v1/person/custom-field/create
    method: POST
    data_selector: data
    params: {}
- name: custom_account_field
  endpoint:
    path: /v1/accounts/custom-field/create
    method: POST
    data_selector: data
    params: {}
- name: custom_contact_fields
  endpoint:
    path: /v1/person/custom-field/get
    method: POST
    data_selector: fields
    params: {}
- name: custom_account_fields
  endpoint:
    path: /v1/accounts/custom-field/get
    method: POST
    data_selector: fields
    params: {}
- name: custom_field_update
  endpoint:
    path: /v1/person/custom-field/update
    method: PUT
    data_selector: response
    params: {}
- name: custom_organization_field_update
  endpoint:
    path: /v1/organizations/custom-field/update
    method: PUT
    data_selector: response
    params: {}
- name: create_activity_event
  endpoint:
    path: /v1/activities/create
    method: POST
    data_selector: activities
- name: create_account_activity_event
  endpoint:
    path: /v1/accounts/activities/create
    method: POST
    data_selector: activities
- name: create_custom_activity
  endpoint:
    path: /a-273-create-a-custom-activity-definition-create
    method: POST
- name: modify_custom_activity
  endpoint:
    path: /a-274-modify-a-custom-activity-definition-modify
    method: PUT
- name: delete_custom_activity
  endpoint:
    path: /a-275-delete-a-custom-activity
    method: DELETE
- name: create_activity_definition
  endpoint:
    path: /v1/definitions/activity/create
    method: POST
- name: modify_activity_definition
  endpoint:
    path: /v1/definitions/activity/modify
    method: PUT
- name: delete_activity_definition
  endpoint:
    path: /v1/definitions/activity/delete
    method: DELETE
- name: create_custom_activity_definition
  endpoint:
    path: /v1/definitions/activity/create
    method: POST
    data_selector: custom_activity
- name: modify_custom_activity
  endpoint:
    path: /v1/definitions/activity/modify
    method: PUT
    data_selector: null
    params: {}
- name: delete_custom_activity
  endpoint:
    path: /v1/definitions/activity/delete
    method: DELETE
    data_selector: archived_activity
    params: {}
- name: tags
  endpoint:
    path: /v1/tags/get
    method: POST
    data_selector: tags
    params: {}
- name: tags
  endpoint:
    path: /v1/tags/get
    method: POST
    data_selector: ''
- name: campaign_reports
  endpoint:
    path: /v1/campaign/reports/get
    method: POST
- name: sent_campaigns
  endpoint:
    path: /v1/campaign/calendar
    method: POST
- name: campaign_report
  endpoint:
    path: /v1/campaign/reports/get
    method: POST
    data_selector: report
    params: {}
- name: campaign_report
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignReport
    method: GET
    data_selector: records
- name: calendar
  endpoint:
    path: /v1/campaign/calendar
    method: POST
    data_selector: campaigns
    params: {}
- name: get_html
  endpoint:
    path: /v1/assets/get-html
    method: POST
    data_selector: html
    params: {}
- name: get-sms
  endpoint:
    path: /v1/assets/get-sms
    method: POST
    data_selector: ''
- name: send_transactional_email
  endpoint:
    path: /v1/transactional/send
    method: POST
- name: transactional_push_notifications
  endpoint:
    path: /transactional/send-push
    method: POST
    data_selector: pushes
- name: campaign
  endpoint:
    path: /campaign/get-all
    method: POST
    data_selector: campaigns
    params:
      limit: 50
- name: compose_talk_conversation
  endpoint:
    path: /v1/talk/compose
    method: POST
    data_selector: conversation_id
    params: {}
- name: get_one_article
  endpoint:
    path: /v1/kb/get-one-article
    method: POST
- name: get_articles
  endpoint:
    path: /v1/kb/get-articles
    method: POST
- name: get_one_article
  endpoint:
    path: /v1/kb/get-one-article
    method: POST
    data_selector: ''
    params: {}
- name: articles
  endpoint:
    path: /v1/kb/get-articles
    method: POST
    data_selector: articles
    params: {}
- name: accounts
  endpoint:
    path: /v1/accounts/get
    method: POST
- name: accounts_merge
  endpoint:
    path: /v1/accounts/merge
    method: POST
- name: accounts_archive
  endpoint:
    path: /v1/accounts/archive
    method: PUT
- name: accounts_restore
  endpoint:
    path: /v1/accounts/restore
    method: PUT
- name: accounts_delete
  endpoint:
    path: /v1/accounts/delete
    method: DELETE
- name: accounts_contacts_add
  endpoint:
    path: /v1/accounts/contacts/add
    method: PUT
- name: accounts_contacts_remove
  endpoint:
    path: /v1/accounts/contacts/remove
    method: PUT
- name: accounts
  endpoint:
    path: /accounts
    method: GET
    data_selector: records
    params: {}
notes:
- You can send an empty JSON response (containing {} at minimum), but we do require
  a JSON payload for the response to be considered successful.
- 'The field sync option, which controls data ingestion queuing, is optional and defaults
  to false. We recommend setting sync: true to ensure that a contact waits for the
  fields to update before moving on.'
- Gmail does not support custom fonts, which can lead to the loss of button colors
  and images.
- Delivery load distribution is not available when running an A/B test.
- Sender ID may not be supported in all countries.
- Rate limiting is enforced for large recipient bases.
- When connected to TallBob, the Reason attribute for Bounced SMS activity will be
  available in both Ortto and your TallBob account.
- Non-deliveries can also point to problems with how you send SMS, especially if there's
  a rise in bounces or complaints.
- Avoiding non-deliveries and complaints is key for maintaining good SMS delivery
  rates.
- Push notifications are not currently supported for iOS web browsers (Safari/Chrome/Firefox).
- You can send a maximum of 10 notifications per contact per day.
- 'If you select the Object type: Opportunity, Ortto will update only the latest opportunity
  associated with a contact.'
- A status update won't be made if the value is already set in Salesforce.
- If an action in a journey temporarily fails, it will automatically retry up to 12
  times before being marked as failed.
- All capture widgets have support with number-based actions in a text block with
  either tel:// or sms:// followed by the number.
- If two or more widgets share the same priority, one will be randomly selected to
  display first.
- To make the embedded form work with Ortto, add the tracking code to the <head> section
  of any page where the form appears.
- All ecommerce integrations in Ortto automatically include the tracking code.
- If you're using an ecommerce integration set up through Ortto, tracking is added
  automatically.
- If you update your form on your website, you’ll need to re-scan it in Ortto.
- If your page has multiple forms, Ortto will detect all of them — just choose which
  one you'd like to connect.
- Tracked forms don’t support pre-fill or visibility settings in Ortto.
- 'Supported file types include: JPEG, JPG, BMP, GIF, PNG, TIFF, PDF, CSV, DOC, DOCX,
  XLS, and XLSX.'
- If the button is inside a form, users can only download the file after completing
  all required fields.
- If a contact is using a VPN, their location may appear as a different country, even
  though they are actually in a different location.
- Uses OAuth2 with refresh token — requires setup of connected app in Salesforce
- 'Rate limits apply to client-side activities: 20 events per contact per day, 100
  events per hour, per activity IP address.'
- The Back in stock activity is automatically created and associated with relevant
  contacts when the item inventory value changes from 0 to at least 1.
- For Waiting on stock, there is a default data retention period of 90 days.
- Waiting on stock activity data is retained for 90 days by default.
- All activities are based on the objects you chose to be synced during the Ortto/Salesforce
  integration process.
- Most of the attributes within this activity are derived from Salesforce.
- Others managed internally by Ortto or a part of its CDP.
- If you remove the default footer, ensure you include an unsubscribe link and your
  organization's postal address as required.
- Custom domains are accessible across all plans, with limits varying per plan level.
- You can connect the same custom domain to multiple Ortto accounts.
- Domain verification can take up to 24—48 hours.
- Apex domains don't allow setting a CNAME record, try using a subdomain instead.
- SMScustom domains are accessible across all plans, with a limit of 1 domain per
  plan.
- While it's possible to use the same custom domain for both email and SMS, we recommend
  using different domains for each to mitigate potential issues.
- SMS functionality can be added to any plan as an add-on feature.
- There are no limits to the amount of numbers users can purchase per plan.
- Ortto’s native phone number feature supports only long codes (standard 10-digit
  numbers), not short codes.
- You can only configure one regulatory bundle per country at a time.
- To ensure your regulatory bundle is accepted, your supporting documents must match
  the types listed on this page.
- Any recent documents such as bills and receipts must be issued within the last three
  months.
- Web notifications are accessible across all plans.
- Web notifications are supported on desktop and laptop browsers, as well as Android
  Chrome.
- However, Safari on iOS (MacBook) does not support web notifications for versions
  older than 16.0 of Safari and 13.0 of macOS.
- Web notifications are not supported on iPhone browsers at this time.
- Immediate storage may result in duplicate contacts if visitors are later identified
  through other means.
- Ensure your CSP supports the Talk messenger widget.
- Adjusting your CSP requires caution to avoid issues with your website's JavaScript
  functionality.
- Scores are accessible across all plans, with limits varying per plan level.
- Scores are calculated once every 24 hours at midnight in the account's timezone.
- Custom fields are accessible across all plans, with limits varying per plan level.
- Using OKTA single-sign-on disables 2FA options selection.
- Only users with an Admin role are authorized to add and manage other users within
  the account.
- If you get an error saying a user couldn't be invited because they already exist,
  check your revoked users.
- Autopilot will continue working as usual and can be accessed from the Ortto navigation
  drawer.
- Some Autopilot accounts may be set in restricted mode where users can only login
  via the Ortto login page.
- Your plan allows 10 users (seats) in your account.
- You can enable two factor or multi-factor authentication (2FA or MFA) for your account.
- Merge tags from Autopilot are not supported in Ortto. You must adjust the merge
  tags correctly before uploading.
- Assigned variables must begin with `var` in order for Ortto to recognize them.
- All non-transactional emails are required to include an unsubscribe link.
- Each custom API key is unique and tied to a single Ortto account.
- The custom API key should be treated as a private key.
- Ortto customers who have their instance region set to Australia or Europe will need
  to use specific service endpoints relative to the region.
- Ortto customers in Australia or Europe need to use specific service endpoints based
  on their region.
- Each Custom API data source has its own API Key associated with it.
- A request can send up to 100 activities in one payload.
- If you provide the same pair for key and created multiple times, it will merge those
  requests so you do not get duplicate activities created.
- Activities with a backdated date older than 90 days may take up to 2 hours to be
  processed and recorded in Ortto.
- You should update your tracking code
- Rate limits are subject to change at any time.
- If your request is rate limited you will receive a 429 status code response.
- Geolocating by address (address lookup) costs extra
- Address lookup is only available on Business plans or higher
- Ortto customers who have their instance region set to Australia or Europe will need
  to use specific service endpoints relative to the region
- Archived people will automatically be deleted after 29 days
- Specific service endpoints are required for Australia and Europe
- You can archive up to 100 accounts at a time.
- Ortto customers with their instance region set to Australia or Europe will need
  to use specific service endpoints.
- Ortto customers in Australia or Europe must use specific service endpoints relative
  to their region.
- You can send different variations of an email to a particular person by providing
  an 'asset' per person in your 'emails' array.
- You can do this for up to 100 people per payload.
- Total request size limit is 6MB
- Individual attachment limit is 1MB
- Individual email size limit is 2MB
- Emails per request limit is 100
- CCs per email limit is 5
- 'JSON values object name changes depending on context: ''static_json_values'' for
  campaigns and ''json_values'' for contacts.'
- Transactional SMS messages are only available on selected Ortto plans.
- Requires approval from Ortto support team for sending transactional SMS.
- The <Ortto_Application_Key> and <API_Endpoint> values can be found in your Ortto
  account Settings under either In-app notifications or Push notifications.
- 'Ortto’s default push API service endpoint is: https://capture-api.autopilotapp.com/.'
- 'Australia: https://capture-api.au.autopilotapp.com/'
- 'Europe: https://capture-api.eu.autopilotapp.com/'
- Ortto customers with instance region set to Australia or Europe will need to use
  specific service endpoints relative to the region.
- People are not auto-subscribed to SMS for compliance reasons.
- Uses X-API-KEY for authentication
- Pagination is handled via offset and limit
- Ortto customers with their instance region set to Australia or Europe need to use
  specific service endpoints.
- 'Ortto’s default push API service endpoint is: https://capture-api.autopilotapp.com/'
- Push notifications only work on physical devices and the iOS simulator will not
  be able to register for push notifications from Apple.
- Elements Datasource ID, Capture JS URL and API Endpoint are found in your Ortto
  account's settings at Settings > In-app notifications > Android in-app notifications.
- In-app notifications do not require customer opt-in.
- Elements 'Datasource ID', 'Capture JS URL', and 'API Endpoint' are found in Ortto
  account settings.
- Uses OAuth2 with refresh token — requires setup of connected app in api
- Some objects like Contact may return nulls in deeply nested fields
- Talk messenger widget must be enabled in Ortto settings
- Up to 150 fields can be sent in a single request
- The total number of custom fields you can have in an Ortto account/instance depends
  on your plan.
- Ortto customers with their instance region set to Australia or Europe will need
  to use specific service endpoints relative to the region.
- Contacts must be archived before they can be restored or deleted.
- The rate limit for this endpoint is 1 request per second.
- Between 1 to 100 people can be updated in a single request.
- The find strategy is only relevant if you have 2 merge_by fields provided.
- When you have only 1 field, this setting makes no difference to the outcome.
- Ortto customers with instance region set to Australia or Europe need to use specific
  service endpoints.
- Accounts must be archived before they can be restored or deleted.
- Up to 100 custom fields can be added to an Ortto account/instance.
- Ortto customers in Australia or Europe must use specific service endpoints relative
  to the region.
- Up to 100 activities can be sent in one payload.
- The amount of custom activities you can create depends on your Ortto plan.
- Ortto customers with their instance region set to Australia or Europe need to use
  specific service endpoints relative to the region.
- This request can only be made for campaigns which have been sent – it cannot retrieve
  data on campaigns which are scheduled or in a draft state.
- There is a report request limit of 60 requests per 10 minutes.
- Reports can include various performance metrics depending on the campaign type.
- Ortto customers in Australia or Europe need to use specific service endpoints relative
  to their region.
- Ortto customers with instance region in Australia or Europe must use specific service
  endpoints.
- In addition to using the email HTML, transactional emails can also be sent using
  campaign and asset IDs for existing messages on the account.
- Ortto customers with their instance region set to Australia or Europe will use specific
  service endpoints relative to the region.
- The default limit for articles is 50.
- If there are more articles to view, the next-offset value indicates the starting
  point for retrieving the next set of articles.
errors:
- '400 Bad Request: Check the parameters for the SMS campaign.'
- '401 Unauthorized: Ensure your OAuth token is valid.'
- 'Blacklisted: This can occur due to the following reasons: Contact is unsubscribed
  with the SMS provider e.g. Twilio/Tall Bob.'
- 'Contact not found: Contact with the ID provided for sending has not been found.'
- 'Contact was opted out: Contact is globally unsubscribed from SMS.'
- 'Duplicate: Caused by repeated attempts at triggering the same send to the same
  contact.'
- 'Fatal-error: Kudosity provider responded with ''Bad sender ID'' or ''Payment required''.'
- 'Invalid: An internal error while getting the contact''s data or failure to generate
  SMS text content.'
- 'Invalid phone number: Either we failed to parse the contact''s phone number or
  the provider responded with ''invalid phone number''.'
- 'Message cannot be sent with the current combination of ''To'' and/or ''From'' parameters:
  Twilio responded that the SMS can''t be sent with this combination of from/to phone
  numbers.'
- 'No mobile number for country: There is no phone number available for the contact’s
  phone number country code.'
- 'No phone numbers: Instance has no phone numbers, which is required.'
- 'SMS blocked outside of waking hours: Tried to send SMS outside of contact''s waking
  hours.'
- 'SMS prevention limit reached: The SMS limit set in your account has been reached.'
- 'Temp-error: An unexpected error from the SMS provider or a sending rate limit has
  been reached.'
- 'Unsupported phone number: Using Ortto’s native SMS and the recipient''s phone number’s
  country code is not supported.'
- 'over-sms-limit: The account is over the number of SMS credits supported for its
  plan.'
- 'Unable to obtain exclusive access to this record or 1 records: A process was attempting
  to lock a record for 10 seconds before failing. Multiple processes may be interacting
  with the record simultaneously.'
- 'Failed to update [Object] record, reference not found. Make sure object exists:
  The record has not been created in Salesforce yet.'
- 'Failed to create [Object] for Contact [Contact Name]. Issue with [Field]: Required
  Salesforce fields for the object were missing.'
- 'Duplicate Detected: The contact already exists in Salesforce.'
- 'Action is missing campaign id: The Add to Campaign ID shape was used without providing
  a campaign ID value.'
- 'Received Action Once: Duplicate: The shape is configured to execute only once.'
- 'Updates can’t be made during maintenance. Try again when maintenance is complete:
  Salesforce is undergoing maintenance, affecting the activity submission.'
- 'Invalid Cross Reference Key: The request references an invalid or nonexistent relationship.'
- 'Entity is deleted: The reference item for the activity has been deleted in Salesforce.'
- 'Operation performed with inactive user [User ID] as owner of [Object]: The owner
  assigned to this contact is no longer active in Salesforce.'
- 'Already a campaign member: The contact is already a member of the Salesforce campaign.'
- 'Required fields are missing: [field]: The object has a field marked as required
  that is not being provided in the request.'
- 'REQUEST_LIMIT_EXCEEDED: Throttle API calls or reduce frequency'
- 'QUERY_TIMEOUT: Break down filters or add selectivity'
- '401 Unauthorized: Recheck OAuth scopes or token expiration'
- 'Couldn’t verify domain: Failed to lookup CNAME'
- CNAME rule has invalid or missing value
- Duplicated domain detected
- 'invalid: A field needed to identify or create the person was not provided.'
- 'created: A person was created for this activity as it did not previously exist.'
- 'merged: A person already existed based on your data source merge criteria.'
- 'skipped: A person already existed and was not updated based on the fields provided.'
- '400: Created date is more than 90 days ago'
- '400: Created date is outside of activity cold storage'
- '404: Activity not created or not enabled for tracking'
- '429: rate limit'
- '500 Internal Server Error: Invalid timezone provided.'
- Address lookup will fail on plans lower than Business
- '403: instance myinstance: transactional email feature not activated'
- '202: Request accepted but not sent due to recipient not subscribed to SMS.'
- 'Invalid: Send marked as invalid for the recipient.'
- '400: Bad Request: The request could not be understood or was missing required parameters.'
- '401: Unauthorized: Authentication failed or user does not have permissions for
  the requested operation.'
- '403: Forbidden: Authentication succeeded, but the authenticated user does not have
  access to the resource.'
- '404: Unknown endpoint or method: The requested resource could not be found.'
- '405: Method Not Allowed: The requested method is not supported for the specified
  resource.'
- '406: Not Acceptable: The server cannot produce a response matching the list of
  acceptable values defined in the request''s headers.'
- '408: Request Timeout: The server timed out waiting for the request.'
- '409: Conflict: The request could not be completed due to a conflict with the current
  state of the resource.'
- '410: Gone: The requested resource is no longer available at the server.'
- '429: Too Many Requests: Too many requests were sent in a given amount of time.'
- '500: Internal Server Error: The server has encountered an unexpected error.'
- '501: Not Implemented: The request method is not supported by the server and cannot
  be handled.'
- '502: Bad Gateway: The server received an invalid response from the upstream server.'
- '503: Service Unavailable: The server is not ready to handle the request.'
- '504: Gateway Timeout: The server did not receive a timely response from the upstream
  server.'
- '507: Insufficient Storage: The server is unable to store the representation needed
  to complete the request.'
auth_info:
  mentioned_objects:
  - OauthToken
  - AuthProvider
  - NamedCredential
client:
  base_url: https://api.ap3api.com/
source_metadata: null
