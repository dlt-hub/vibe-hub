resources:
- name: expenses
  endpoint:
    path: /expenses/submit
    method: POST
    data_selector: null
    params: {}
- name: user_registration
  endpoint:
    path: /webhooks/user-signup
    method: POST
    data_selector: payload
    params: {}
- name: order_processing
  endpoint:
    path: /webhooks/orders
    method: POST
    data_selector: payload
    params: {}
- name: payment_processing
  endpoint:
    path: /webhooks/payments
    method: POST
    data_selector: payload
    params: {}
- name: data_sync
  endpoint:
    path: /webhooks/data-sync
    method: POST
    data_selector: payload
    params: {}
- name: orders_create
  endpoint:
    path: /webhooks/orders/create
    method: POST
    data_selector: payload
    params: {}
- name: user-onboarding
  endpoint:
    path: /webhooks/user-signup
    method: POST
    data_selector: payload
    params: {}
- name: order-processing
  endpoint:
    path: /webhooks/orders
    method: POST
- name: fetch-user
  endpoint:
    path: /api/users
    method: GET
- name: process-order
  endpoint:
    path: /api/orders
    method: POST
- name: webhook_orders
  endpoint:
    path: /webhooks/orders
    method: POST
- name: schedule_trigger
  endpoint:
    path: ''
    method: ''
    data_selector: ''
    params: {}
- name: event_trigger_user_registered
  endpoint:
    path: ''
    method: ''
    data_selector: ''
    params: {}
- name: manual_trigger
  endpoint:
    path: ''
    method: ''
    data_selector: ''
    params: {}
- name: global_state
  endpoint:
    path: /global_state
    method: POST
    data_selector: data
- name: workflow_state
  endpoint:
    path: /workflow_state
    method: POST
    data_selector: data
- name: state_stats
  endpoint:
    path: /state_stats
    method: GET
    data_selector: stats
- name: cleanup_expired_state
  endpoint:
    path: /cleanup_expired_state
    method: DELETE
    data_selector: cleanup
- name: workflow_hooks
  endpoint:
    path: /hooks
    method: GET
    data_selector: hooks
    params: {}
- name: order_processing
  endpoint:
    path: /webhooks/orders
    method: POST
    data_selector: payload
    params: {}
- name: payment_processing
  endpoint:
    path: /webhooks/stripe
    method: POST
    data_selector: payload
    params: {}
- name: user_registration
  endpoint:
    path: /webhooks/users
    method: POST
    data_selector: payload
    params: {}
- name: analytics_processing
  endpoint:
    path: /webhooks/analytics
    method: POST
    data_selector: payload
    params: {}
- name: notification_sending
  endpoint:
    path: /webhooks/notifications
    method: POST
    data_selector: payload
    params: {}
- name: inventory_update
  endpoint:
    path: /webhooks/inventory
    method: POST
    data_selector: payload
    params: {}
- name: data_processing
  endpoint:
    path: /webhooks/data
    method: POST
    data_selector: payload
    params: {}
- name: error_handling
  endpoint:
    path: /webhooks/error-test
    method: POST
    data_selector: payload
    params: {}
- name: webhook-orders
  endpoint:
    path: /webhooks/orders
    method: POST
    data_selector: data
- name: webhook-data
  endpoint:
    path: /webhooks/data
    method: POST
    data_selector: data
- name: webhook-secure
  endpoint:
    path: /webhooks/secure
    method: POST
    data_selector: data
- name: webhook-validated
  endpoint:
    path: /webhooks/validated
    method: POST
    data_selector: data
- name: webhook-error-handling
  endpoint:
    path: /webhooks/error-handling
    method: POST
    data_selector: data
- name: monitored_trigger
  endpoint:
    path: /webhooks/monitored
    method: POST
    data_selector: data
    params: {}
- name: global_state
  endpoint:
    path: /api/getGlobalState
    method: GET
    data_selector: value
    params: {}
- name: set_global_state
  endpoint:
    path: /api/setGlobalState
    method: POST
    data_selector: value
    params: {}
- name: increment_global_state
  endpoint:
    path: /api/incrGlobalState
    method: POST
    data_selector: newCount
    params: {}
- name: delete_global_state
  endpoint:
    path: /api/deleteGlobalState
    method: DELETE
    data_selector: success
    params: {}
- name: workflow_state
  endpoint:
    path: /api/getWorkflowState
    method: GET
    data_selector: value
    params: {}
- name: set_workflow_state
  endpoint:
    path: /api/setWorkflowState
    method: POST
    data_selector: success
    params: {}
- name: increment_workflow_state
  endpoint:
    path: /api/incrWorkflowState
    method: POST
    data_selector: newCount
    params: {}
- name: delete_workflow_state
  endpoint:
    path: /api/deleteWorkflowState
    method: DELETE
    data_selector: success
    params: {}
- name: state_stats
  endpoint:
    path: /api/getStateStats
    method: GET
    data_selector: stats
    params: {}
- name: cleanup_expired_state
  endpoint:
    path: /api/cleanupExpiredState
    method: POST
    data_selector: success
    params: {}
- name: executeStep
  endpoint:
    path: /cronflow/executeStep
    method: POST
- name: executeStepFunction
  endpoint:
    path: /cronflow/executeStepFunction
    method: POST
- name: executeJobFunction
  endpoint:
    path: /cronflow/executeJobFunction
    method: POST
- name: replay
  endpoint:
    path: /cronflow/replay
    method: POST
- name: paused_workflows
  endpoint:
    path: /listPausedWorkflows
    method: GET
    data_selector: workflows
    params: {}
- name: paused_workflow
  endpoint:
    path: /getPausedWorkflow
    method: GET
    data_selector: workflow
    params:
      token: approval_token
- name: resume_workflow
  endpoint:
    path: /resume
    method: POST
    data_selector: result
    params:
      token: approval_token
      payload: approval_data
- name: executeWorkflowHook
  endpoint:
    path: /cronflow/executeWorkflowHook
    method: POST
    data_selector: result
    params: {}
- name: registerHookHandler
  endpoint:
    path: /cronflow/registerHookHandler
    method: POST
    data_selector: result
    params: {}
- name: getHookHandler
  endpoint:
    path: /cronflow/getHookHandler
    method: GET
    data_selector: result
    params: {}
- name: core_status
  endpoint:
    path: /api/core-status-performance
    method: GET
- name: benchmark
  endpoint:
    path: /api/benchmark
    method: POST
- name: webhook
  endpoint:
    path: /webhooks/stripe
    method: POST
- name: schedule
  endpoint:
    path: ''
    method: GET
    data_selector: cronString
- name: interval
  endpoint:
    path: ''
    method: GET
    data_selector: interval
- name: event
  endpoint:
    path: ''
    method: GET
    data_selector: eventName
- name: manual
  endpoint:
    path: ''
    method: GET
notes:
- Handles new user registration with validation
- Checks inventory and processes payments for orders
- Webhooks can trigger workflows.
- Workflows are defined with cronflow.define()
- Rate limiting can be configured to manage execution frequency
- Steps are the primary units of work in Cronflow workflows.
- Each step can define individual operations that can be executed, retried, and monitored.
- Actions are designed for operations where the output is ignored or not needed.
- Actions support the same configuration options as steps.
- State management is essential for building complex workflows that need to persist
  data across runs and share information between different parts of your application.
- Custom steps are powerful tools for building maintainable, reusable workflow components.
- Hooks are powerful tools for adding observability, monitoring, and cross-cutting
  concerns to your workflows without cluttering the main business logic.
- Cronflow provides comprehensive error handling mechanisms to build robust, fault-tolerant
  workflows.
- Steps can throw errors to indicate failure.
- Handle errors at the step level.
- Configure automatic retries for failed steps.
- Implement circuit breaker pattern for external dependencies.
- Return fallback value on error.
- Use specific error types for error handling.
- Implement graceful degradation.
- Use appropriate retry strategies.
- Provide meaningful error messages.
- Cronflow is designed for exceptional performance, delivering 94x faster execution
  than traditional workflow tools.
- Parallel execution capabilities allow running multiple operations simultaneously.
- Cronflow integrates with various Node.js frameworks for webhook handling and workflow
  management.
- Actions are designed to run in the background, allowing you to perform side effects
  without blocking the main workflow execution.
- Handles human-in-the-loop workflows for approvals and reviews.
- Log error but don't fail the entire workflow
- Batch processed in duration ms
- Advanced control flow features include loops, subflows, and sophisticated branching
  logic.
- Always have a termination condition
- 'Avoid: No clear termination condition'
- Processes incoming orders with payment validation
errors:
- User already exists
- Product not found
- Order already exists
- Payment failed
- Error handling should be implemented for graceful failure responses
- User not found
- User account is suspended
- Circuit breaker open - too many failures
- Rate limit exceeded
- Authentication failed
- Order must contain at least one item
- Order amount must be greater than zero
auth_info:
  mentioned_objects: []
client:
  base_url: http://localhost:3001/api
  headers:
    Content-Type: application/json
source_metadata: null
