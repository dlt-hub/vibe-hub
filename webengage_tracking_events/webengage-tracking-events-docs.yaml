resources:
- name: events
  endpoint:
    path: /events
    method: POST
    data_selector: eventData
- name: events
  endpoint:
    path: /events
    method: POST
    data_selector: response
    params:
      eventName: string
- name: users
  endpoint:
    path: /api/v1/users
    method: GET
    data_selector: users
- name: system_attributes
  endpoint:
    path: /users/system_attributes
    method: GET
    data_selector: attributes
    params: {}
- name: custom_attributes
  endpoint:
    path: /users/custom_attributes
    method: GET
    data_selector: attributes
    params: {}
- name: users
  endpoint:
    path: /api/v1/users
    method: GET
- name: system_events
  endpoint:
    path: /system/events
    method: GET
    data_selector: events
    params: {}
- name: custom_events
  endpoint:
    path: /custom/events
    method: GET
    data_selector: events
    params: {}
- name: system_attributes
  endpoint:
    path: /users/system_attributes
    method: GET
    data_selector: attributes
- name: custom_attributes
  endpoint:
    path: /users/custom_attributes
    method: GET
    data_selector: attributes
- name: system_events
  endpoint:
    path: /system/events
    method: GET
    data_selector: events
- name: custom_events
  endpoint:
    path: /custom/events
    method: GET
    data_selector: custom_events
- name: hotel_booking_events
  endpoint:
    path: /events/hotel_booking
    method: GET
    data_selector: events
- name: flight_booking_events
  endpoint:
    path: /events/flight_booking
    method: GET
    data_selector: events
- name: gaming_events
  endpoint:
    path: /events/gaming
    method: GET
    data_selector: events
- name: insurance_events
  endpoint:
    path: /events/insurance
    method: GET
    data_selector: events
- name: hotel_booking
  endpoint:
    path: /hotel_booking/events
    method: GET
    data_selector: events
    params: {}
- name: flight_booking
  endpoint:
    path: /flight_booking/events
    method: GET
    data_selector: events
    params: {}
- name: gaming_events
  endpoint:
    path: /gaming/events
    method: GET
    data_selector: events
    params: {}
- name: insurance_events
  endpoint:
    path: /insurance/events
    method: GET
    data_selector: events
    params: {}
- name: webengage
  endpoint:
    path: /sdk/v1/webengage
    method: GET
    data_selector: data
    params: {}
- name: webengage_script
  endpoint:
    path: /js/webengage-min-v-6.0.js
    method: GET
    data_selector: webengage
    params: {}
- name: users
  endpoint:
    path: /api/users
    method: GET
    data_selector: records
- name: events
  endpoint:
    path: /api/events
    method: GET
    data_selector: records
- name: user
  endpoint:
    path: /api/user
    method: POST
    data_selector: data
- name: Custom Events
  endpoint:
    path: /docs/rest-api-tracking-events
    method: POST
    data_selector: events
    params: {}
- name: webpush_configuration
  endpoint:
    path: /web-push
    method: GET
    data_selector: configurations
    params: {}
- name: on_site_notification
  endpoint:
    path: /api/on-site-notification
    method: POST
    data_selector: notifications
    params: {}
- name: on-site notification
  endpoint:
    path: /docs/web-on-site-notification
    method: GET
    data_selector: notification properties
    params: {}
- name: notification_clear
  endpoint:
    path: /notification/clear
    method: POST
    data_selector: result
    params: {}
- name: survey_properties
  endpoint:
    path: /rest-api/on-site-survey
    method: GET
    data_selector: surveyProperties
    params: {}
- name: survey_properties
  endpoint:
    path: /rest-api-on-site-survey
    method: GET
    data_selector: surveyProperties
    params: {}
- name: survey
  endpoint:
    path: /survey
    method: POST
    data_selector: data
- name: survey_render
  endpoint:
    path: /survey/render
    method: POST
    data_selector: surveyId
    params: {}
- name: survey_clear
  endpoint:
    path: /survey/clear
    method: POST
    data_selector: ''
    params: {}
- name: survey_opened
  endpoint:
    path: /survey/onOpen
    method: POST
    data_selector: data
- name: survey_closed
  endpoint:
    path: /survey/onClose
    method: POST
    data_selector: data
- name: survey_submit
  endpoint:
    path: /survey/onSubmit
    method: POST
    data_selector: data
- name: survey_complete
  endpoint:
    path: /survey/onComplete
    method: POST
    data_selector: data
- name: feedback_opened
  endpoint:
    path: /feedback/onOpen
    method: POST
    data_selector: data
- name: feedback_closed
  endpoint:
    path: /feedback/onClose
    method: POST
    data_selector: data
- name: feedback_submitted
  endpoint:
    path: /feedback/onSubmit
    method: POST
    data_selector: data
- name: amp_analytics
  endpoint:
    path: /amp-analytics
    method: POST
    data_selector: analytics
    params: {}
- name: survey_opened
  endpoint:
    path: /survey/onOpen
    method: POST
    data_selector: data
- name: survey_closed
  endpoint:
    path: /survey/onClose
    method: POST
    data_selector: data
- name: survey_submit
  endpoint:
    path: /survey/onSubmit
    method: POST
    data_selector: data
- name: survey_complete
  endpoint:
    path: /survey/onComplete
    method: POST
    data_selector: data
- name: feedback_opened
  endpoint:
    path: /feedback/onOpen
    method: POST
    data_selector: data
- name: feedback_closed
  endpoint:
    path: /feedback/onClose
    method: POST
    data_selector: data
- name: feedback_submitted
  endpoint:
    path: /feedback/onSubmit
    method: POST
    data_selector: data
- name: web_push_notification_permission_prompt_viewed
  endpoint:
    path: /webpush/onWindowViewed
    method: POST
    data_selector: data
- name: web_push_notification_permission_granted
  endpoint:
    path: /webpush/onWindowAllowed
    method: POST
    data_selector: data
- name: web_push_notification_permission_denied
  endpoint:
    path: /webpush/onWindowDenied
    method: POST
    data_selector: data
- name: web_push_notification_permission_granted_first_time
  endpoint:
    path: /webpush/onPushRegistered
    method: POST
    data_selector: data
- name: web_push_notification_permission_revoked
  endpoint:
    path: /webpush/onPushUnregistered
    method: POST
    data_selector: data
- name: events
  endpoint:
    path: /events
    method: POST
    data_selector: events
- name: events
  endpoint:
    path: /api/events
    method: GET
    data_selector: records
    params: {}
- name: users
  endpoint:
    path: /api/users
    method: GET
    data_selector: records
    params: {}
- name: events_tracking
  endpoint:
    path: /events/tracking
    method: POST
    data_selector: events
    params: {}
- name: session_timeout
  endpoint:
    path: /session/timeout
    method: POST
    data_selector: sessionConfig
    params:
      sessionDestroyTime: 40
- name: advertising_id_tracking
  endpoint:
    path: /advertising-id/tracking
    method: POST
    data_selector: trackingConfig
    params:
      autoGAIDTracking: false
- name: users
  endpoint:
    path: /api/v1/users
    method: GET
    data_selector: records
    params: {}
- name: events
  endpoint:
    path: /api/v1/events
    method: GET
    data_selector: records
    params: {}
- name: users
  endpoint:
    path: /api/v1/users
    method: GET
    data_selector: users
- name: events
  endpoint:
    path: /api/v1/events
    method: GET
    data_selector: events
- name: tracking_events
  endpoint:
    path: /api/tracking/events
    method: POST
    data_selector: events
- name: tracking_events
  endpoint:
    path: /api/v1/events
    method: POST
    data_selector: events
- name: custom_events
  endpoint:
    path: /api/v1/custom_events
    method: POST
    data_selector: custom_events
- name: Xiaomi Push SDK
  endpoint:
    path: /docs/xiaomi-push-integration
    method: GET
    data_selector: content
    params: {}
- name: Push Kit
  endpoint:
    path: /api/push
    method: POST
    data_selector: response
    params:
      app_id: '{{App ID}}'
      app_secret: '{{App Secret}}'
- name: push_kit
  endpoint:
    path: /push/kit
    method: POST
    data_selector: response
    params: {}
- name: notification_messages
  endpoint:
    path: /getNotificationList
    method: GET
    data_selector: messageList
- name: unread_notification_count
  endpoint:
    path: /getUserNotificationCount
    method: GET
    data_selector: countStr
- name: we_inbox_message
  endpoint:
    path: /we/inbox/messages
    method: GET
    data_selector: messageList
- name: unread_notification_count
  endpoint:
    path: /notification/unread/count
    method: GET
    data_selector: count
- name: notification_messages
  endpoint:
    path: /notification/messages
    method: GET
    data_selector: messages
- name: we_inbox_message
  endpoint:
    path: /getMessageList
    method: GET
    data_selector: weInboxMessageList
    params: {}
- name: push_channel_configuration
  endpoint:
    path: /setNotificationChannelGroup
    method: POST
    data_selector: pushChannelConfiguration
    params:
      group_id: GROUP_ID
- name: push_channel_configuration
  endpoint:
    path: /api/push_channel_configuration
    method: POST
    data_selector: channel_configuration
    params: {}
- name: push_channel_configuration
  endpoint:
    path: /setNotificationChannelGroup
    method: POST
    data_selector: properties
    params:
      ID: we_wk_push_channel
      Name: Marketing
      Importance: IMPORTANCE_DEFAULT
      Lock screen visibility: VISIBILITY_PUBLIC
      Show badge: true
      Sound: System default
      Vibration: true
- name: in_line_content
  endpoint:
    path: /docs/android-app-in-line-content
    method: GET
    data_selector: content
    params: {}
- name: Analytics
  endpoint:
    path: /analytics/screenNavigated
    method: POST
    data_selector: screenData
    params: {}
- name: in_line_content
  endpoint:
    path: /api/in-line-content
    method: GET
    data_selector: content
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: event_reporting_strategy
  endpoint:
    path: /event/reporting/strategy
    method: POST
    data_selector: strategy
    params: {}
- name: webengage_configuration
  endpoint:
    path: /webengage/configuration
    method: GET
    data_selector: configuration
    params: {}
- name: WEGLicenseCode
  endpoint:
    path: /docs/ios-troubleshooting#section-1-where-do-i-find-webengage-license-code-required-for-sdk-integration-
    method: GET
- name: UIBackgroundModes
  endpoint:
    path: fetch, location
    method: GET
- name: WEGEnableLocationAuthorizationRequest
  endpoint:
    path: ALWAYS / IN_USE / NO
    method: GET
- name: NSLocationAlwaysUsageDescription
  endpoint:
    path: App specific description
    method: GET
- name: NSLocationWhenInUseUsageDescription
  endpoint:
    path: App specific description
    method: GET
- name: WEGLogLevel
  endpoint:
    path: DEFAULT / VERBOSE
    method: GET
- name: WEGEnvironment
  endpoint:
    path: DEFAULT / IN / KSA
    method: GET
- name: WEGAlternateAppSupport
  endpoint:
    path: YES / NO
    method: GET
- name: WebEngageSDK
  endpoint:
    path: /docs/overview
    method: GET
    data_selector: ''
    params: {}
- name: users
  endpoint:
    path: /rest-api-tracking-users
    method: GET
    data_selector: records
- name: events
  endpoint:
    path: /rest-api-tracking-events
    method: GET
    data_selector: records
- name: Info.plist
  endpoint:
    path: /configure/Info.plist
    method: POST
    data_selector: properties
    params: {}
- name: tracking_events
  endpoint:
    path: /tracking/events
    method: POST
    data_selector: eventData
- name: users
  endpoint:
    path: /api/v1/users
    method: GET
- name: events
  endpoint:
    path: /api/v1/events
    method: POST
- name: track_event
  endpoint:
    path: /track/event
    method: POST
    data_selector: attributes
    params: {}
- name: push_notifications
  endpoint:
    path: /api/push/notifications
    method: POST
    data_selector: notifications
- name: Tracking Events
  endpoint:
    path: /rest-api/tracking-events
    method: POST
    data_selector: eventData
    params: {}
- name: Tracking Custom Events
  endpoint:
    path: /rest-api/tracking-custom-events
    method: POST
    data_selector: customEventData
    params: {}
- name: track_event
  endpoint:
    path: /track_event
    method: POST
    data_selector: attributes
    params: {}
- name: push_notifications
  endpoint:
    path: /push
    method: POST
- name: push_notifications
  endpoint:
    path: /push
    method: POST
    data_selector: notifications
    params: {}
- name: ContentExtension
  endpoint:
    path: /ContentExtension
    method: POST
    data_selector: data
    params: {}
- name: NotificationService
  endpoint:
    path: /NotificationService
    method: GET
    data_selector: records
    params: {}
- name: Push Notifications
  endpoint:
    path: /push/notifications
    method: POST
- name: NotificationViewController
  endpoint:
    path: Info.plist
    method: GET
    data_selector: NSExtension
    params: {}
- name: NotificationService
  endpoint:
    path: Info.plist
    method: GET
    data_selector: NSExtension
    params: {}
- name: NotificationService
  endpoint:
    path: /NotificationService
    method: GET
- name: ContentExtension
  endpoint:
    path: /ContentExtension
    method: GET
- name: NotificationViewController
  endpoint:
    path: /services/data/vXX.X/sobjects/NotificationViewController
    method: GET
    data_selector: records
    params: {}
- name: ContentExtension
  endpoint:
    path: /NotificationViewController
    method: GET
    data_selector: NotificationData
    params: {}
- name: custom_push_notifications
  endpoint:
    path: /docs/customizing-push-notifications
    method: GET
    data_selector: content
    params: {}
- name: push_notifications
  endpoint:
    path: /api/push_notifications
    method: POST
    data_selector: notifications
    params: {}
- name: notification_messages
  endpoint:
    path: /notification/messages
    method: GET
    data_selector: data
- name: unread_notification_count
  endpoint:
    path: /notification/unread/count
    method: GET
    data_selector: count
- name: notification_messages
  endpoint:
    path: /api/notification/messages
    method: GET
    data_selector: data
- name: unread_notification_count
  endpoint:
    path: /api/user/notification/count
    method: GET
    data_selector: count
- name: notification_events
  endpoint:
    path: /markNotificationEvents
    method: POST
    data_selector: events
    params: {}
- name: track_views
  endpoint:
    path: /trackViews
    method: POST
    data_selector: views
    params: {}
- name: track_clicks
  endpoint:
    path: /trackClicks
    method: POST
    data_selector: clicks
    params: {}
- name: message
  endpoint:
    path: /weinbox/message
    method: GET
    data_selector: messageList
- name: notification_events
  endpoint:
    path: /weinbox/notification/events
    method: POST
    data_selector: eventsList
- name: callbacks
  endpoint:
    path: /callbacks
    method: GET
    data_selector: callbacks
    params: {}
- name: Push Message Callbacks
  endpoint:
    path: /webengage/callbacks/push
    method: GET
    data_selector: callbacks
    params: {}
- name: In-app Message Callbacks
  endpoint:
    path: /webengage/callbacks/in-app
    method: GET
    data_selector: callbacks
    params: {}
- name: PlaceholderCallbacks
  endpoint:
    path: /callbacks/WEPlaceholderCallback
    method: GET
    data_selector: callbacks
    params: {}
- name: CampaignCallbacks
  endpoint:
    path: /callbacks/WECampaignCallback
    method: GET
    data_selector: callbacks
    params: {}
- name: WEPlaceholderCallback
  endpoint:
    path: /callbacks/weplaceholdercallback
    method: GET
    data_selector: data
- name: WECampaignCallback
  endpoint:
    path: /callbacks/wecampaigncallback
    method: GET
    data_selector: data
- name: location_tracking
  endpoint:
    path: /location/tracking
    method: POST
    data_selector: location
    params:
      accuracy: WEGLocationAccuracyForCity
- name: WEGManualIntegration
  endpoint:
    path: /WEGManualIntegration
    method: POST
    data_selector: response
    params: {}
- name: WEGUserDataEncryption
  endpoint:
    path: /WEGUserDataEncryption
    method: POST
    data_selector: response
    params: {}
- name: in_app_notifications
  endpoint:
    path: /in-app/notifications
    method: GET
    data_selector: notifications
- name: sms_campaign
  endpoint:
    path: /api/sms/campaigns
    method: POST
    data_selector: data
    params: {}
- name: dlt_registration
  endpoint:
    path: /docs/trai-sms-dlt-regulations-india
    method: GET
    data_selector: content
    params: {}
- name: Content Template Registration
  endpoint:
    path: /dlt/content-template
    method: POST
    data_selector: template
    params: {}
- name: DLT Scrubbing
  endpoint:
    path: /dlt/scrubbing
    method: POST
    data_selector: scrubbing
    params: {}
- name: Sinch Mobile
  endpoint:
    path: /sms/sinch
    method: POST
- name: WebEngage Tracker Endpoint URL for Global Data Center
  endpoint:
    path: https://st.webengage.com/tracking/amazon-pinpoint-events
- name: WebEngage Tracker Endpoint URL for India Data Center
  endpoint:
    path: https://st.in.webengage.com/tracking/amazon-pinpoint-events
- name: WebEngage Tracker Endpoint URL for Saudi Arabia Data Center
  endpoint:
    path: https://st.ksa.webengage.com/tracking/amazon-pinpoint-events
- name: integration_validation_errors
  endpoint:
    path: /integration/validation/errors
    method: GET
    data_selector: errors
    params: {}
- name: delivery_failure_status
  endpoint:
    path: /delivery/failure/status
    method: GET
    data_selector: failures
    params: {}
- name: CEQUENS Transactional
  endpoint:
    path: /
    method: POST
    data_selector: data
    params: {}
- name: CEQUENS Pipeline
  endpoint:
    path: /
    method: POST
    data_selector: data
    params: {}
- name: Delivery Status Notifications
  endpoint:
    path: /tracking/amazon-pinpoint-events
    method: POST
    data_selector: notifications
- name: DeviceBook Configuration
  endpoint:
    path: /devicebook/configuration
    method: POST
    data_selector: configuration
    params: {}
- name: Dove Soft Configuration
  endpoint:
    path: /dove-soft/configuration
    method: POST
    data_selector: configuration
    params: {}
- name: DeviceBook
  endpoint:
    path: /devicebook
    method: POST
    data_selector: response
    params: {}
- name: SSP Configuration
  endpoint:
    path: /eocean/ssp/configuration
    method: POST
    data_selector: configuration
    params: {}
- name: Dove Soft Promo
  endpoint:
    path: /dove-soft/configuration
    method: POST
- name: sms
  endpoint:
    path: /api/v1/sms/send
    method: POST
- name: sms_configuration
  endpoint:
    path: /sms/configuration
    method: POST
    data_selector: response
    params: {}
- name: SMS Service Provider
  endpoint:
    path: /gupshup
    method: POST
    data_selector: response
    params: {}
- name: Helo Promo
  endpoint:
    path: /your-endpoint-path
    method: POST
    data_selector: data
    params:
      api_key: your_api_key
- name: IMImobile
  endpoint:
    path: /imimobile
    method: POST
- name: IMImobile
  endpoint:
    path: /imimobile
    method: POST
- name: Kaleyra
  endpoint:
    path: /kalyera-self-serve
    method: POST
    data_selector: configuration
    params: {}
- name: API Key
  endpoint:
    path: /dashboard
    method: GET
    data_selector: api_key
    params: {}
- name: Principal Entity ID
  endpoint:
    path: /dlt/registration
    method: POST
    data_selector: principal_entity_id
    params: {}
- name: API Key
  endpoint:
    path: ''
    method: ''
    data_selector: ''
    params: {}
- name: Principal Entity ID
  endpoint:
    path: ''
    method: ''
    data_selector: ''
    params: {}
- name: Webhook URL
  endpoint:
    path: ''
    method: ''
    data_selector: ''
    params: {}
- name: Kavenegar
  endpoint:
    path: /kavenegar
    method: POST
- name: SMS Service Provider
  endpoint:
    path: /api/v1/sms
    method: POST
    data_selector: data
    params: {}
- name: SMS Service Provider
  endpoint:
    path: /mgage
    method: POST
    data_selector: status
    params: {}
- name: mGage Configuration
  endpoint:
    path: /mGage/configuration
    method: POST
    data_selector: configuration
    params: {}
- name: api_key
  endpoint:
    path: /developer/access-tokens
    method: GET
- name: Movile Messaging Configuration
  endpoint:
    path: /movile-messaging/configuration
    method: POST
- name: MOB texting configuration
  endpoint:
    path: /api/access_tokens
    method: POST
    data_selector: access_token
- name: Monty Mobile Configuration
  endpoint:
    path: /monty-mobile/configuration
    method: POST
- name: Movile Messaging Configuration
  endpoint:
    path: /movile-messaging/configuration
    method: POST
    data_selector: configuration
    params: {}
- name: SMS Service Provider
  endpoint:
    path: /docs/netcore-1
    method: GET
- name: mTalkz Configuration
  endpoint:
    path: /mtalkz/configuration
    method: POST
- name: Pinnacle Configuration
  endpoint:
    path: /pinnacle/configuration
    method: POST
    data_selector: configuration
    params: {}
- name: Netcore
  endpoint:
    path: /netcore
    method: POST
    data_selector: configuration
    params: {}
- name: Plivo Configuration
  endpoint:
    path: /configurations/plivo
    method: POST
    data_selector: configuration
    params:
      account_id: your_account_id
      auth_token: your_auth_token
- name: Pinnacle
  endpoint:
    path: /pinnacle
    method: POST
- name: sms_campaign
  endpoint:
    path: /api/sms_campaigns
    method: POST
- name: configuration
  endpoint:
    path: /sms/configuration
    method: POST
    data_selector: data
    params:
      account_id: your_account_id
      auth_token: your_auth_token
- name: Rahyab Configuration
  endpoint:
    path: /sms/rahyab
    method: POST
- name: sms_campaign
  endpoint:
    path: /sms/campaigns
    method: POST
    data_selector: campaign
    params: {}
- name: RouteMobile Integration
  endpoint:
    path: /routemobile/integration
    method: POST
    data_selector: integration_details
- name: SMS Service Provider
  endpoint:
    path: /smartping
    method: POST
    data_selector: response
    params: {}
- name: SmartPing Configuration
  endpoint:
    path: /api/smartping/configuration
    method: POST
    data_selector: config
    params: {}
- name: configuration
  endpoint:
    path: /docs/telecard
    method: GET
- name: Telecard Configuration
  endpoint:
    path: /telecard/configuration
    method: POST
    data_selector: configuration
    params: {}
- name: configuration
  endpoint:
    path: /sms/configuration
    method: POST
- name: SMS Campaigns
  endpoint:
    path: /sms/send
    method: POST
- name: sms_campaign
  endpoint:
    path: /sms/campaigns
    method: POST
- name: v_connect_sms
  endpoint:
    path: /vconnect/sms
    method: POST
    data_selector: response
    params: {}
- name: SMS Service Provider
  endpoint:
    path: /sms/service-provider
    method: POST
    data_selector: response
    params: {}
- name: SMS
  endpoint:
    path: /sms
    method: POST
- name: Valueleaf
  endpoint:
    path: /valueleaf
    method: POST
- name: Valueleaf Configuration
  endpoint:
    path: /valueleaf/setup
    method: POST
    data_selector: configuration
    params: {}
- name: sms_campaign
  endpoint:
    path: /sms/send
    method: POST
    data_selector: response
    params: {}
- name: SMS Service Provider
  endpoint:
    path: /v3/?at_category=2factor&at_event_action=spr&service=BULK-SMS-OTP-SERVICE-PROVIDER
    method: GET
- name: Private SSP API
  endpoint:
    path: /private-ssp
    method: POST
    data_selector: response
    params: {}
- name: hashed PII
  endpoint:
    path: /path/to/hashed/pii
    method: POST
    data_selector: response
    params: {}
- name: request_sms
  endpoint:
    path: /services/sms/request
    method: POST
    data_selector: smsData
    params: {}
- name: delivery_status_notification
  endpoint:
    path: /services/sms/delivery_status
    method: POST
    data_selector: status
    params: {}
- name: delivery_status_notification
  endpoint:
    path: /private-ssp/delivery-status
    method: POST
    data_selector: status
    params: {}
- name: SMPP Configuration
  endpoint:
    path: /smpp/configuration
    method: POST
    data_selector: configuration
    params: {}
- name: SMPP Configuration
  endpoint:
    path: /configure/smpp
    method: POST
    data_selector: configuration
- name: SMS Service Provider
  endpoint:
    path: /sms
    method: POST
    data_selector: response
    params:
      apps_id: your_apps_id
- name: on_site_notifications
  endpoint:
    path: /on-site/notifications
    method: GET
- name: surveys
  endpoint:
    path: /on-site/surveys
    method: GET
- name: User Responses
  endpoint:
    path: /api/user/responses
    method: POST
    data_selector: responses
    params: {}
- name: on_site_notifications
  endpoint:
    path: /on-site-notification
    method: GET
    data_selector: notifications
- name: surveys
  endpoint:
    path: /on-site-survey
    method: GET
    data_selector: surveys
- name: Web Push Notifications
  endpoint:
    path: /web-push
    method: GET
- name: amp-web-push
  endpoint:
    path: /amp-web-push
    method: GET
    data_selector: notifications
    params: {}
- name: web_push
  endpoint:
    path: /amp-web-push
    method: POST
    data_selector: notifications
    params: {}
- name: service_worker_global_data_center
  endpoint:
    path: /js/service-worker.js
    method: GET
    data_selector: service_worker_global_data_center
- name: service_worker_india_data_center
  endpoint:
    path: /js/service-worker.js
    method: GET
    data_selector: service_worker_india_data_center
- name: service_worker_ksa_data_center
  endpoint:
    path: /js/service-worker.js
    method: GET
    data_selector: service_worker_ksa_data_center
- name: permission_control_widget
  endpoint:
    path: /docs/web-push-enabling-2-step-opt-in
    method: GET
    data_selector: widget_code
- name: email_service_providers
  endpoint:
    path: /docs/email
    method: GET
    data_selector: esps
    params: {}
- name: service_worker_registration
  endpoint:
    path: /docs/web-push
    method: POST
    data_selector: notifications
    params: {}
- name: email
  endpoint:
    path: /email/send
    method: POST
    data_selector: response
    params: {}
- name: Elastic Email Configuration
  endpoint:
    path: /api/email/configuration
    method: POST
    data_selector: configuration
    params: {}
- name: email_service_providers
  endpoint:
    path: /docs/email
    method: GET
    data_selector: integrated_ESPs
- name: API Key
  endpoint:
    path: /api/key
    method: POST
    data_selector: api_key
- name: email_configuration
  endpoint:
    path: /aws-ses/configuration
    method: POST
    data_selector: configurationDetails
    params: {}
- name: iCubesPro Configuration
  endpoint:
    path: /api/icubespro/config
    method: POST
    data_selector: response
    params: {}
- name: ESP Configuration
  endpoint:
    path: /api/v1/esp/configure
    method: POST
    data_selector: configuration
    params: {}
- name: Kenscio Configuration
  endpoint:
    path: /api/kenscio/configuration
    method: POST
    data_selector: configuration
    params: {}
- name: Email Campaigns
  endpoint:
    path: /v3/{domain}/messages
    method: POST
    data_selector: message
    params: {}
- name: mGage Promo
  endpoint:
    path: /services/data/vXX.X/sobjects/mGagePromo
    method: POST
    data_selector: response
    params: {}
- name: Infobip Email Configuration
  endpoint:
    path: /api/v1/email/configuration
    method: POST
    data_selector: configuration
    params: {}
- name: Netcore
  endpoint:
    path: /v1/netcore
    method: POST
    data_selector: result
- name: email_campaign
  endpoint:
    path: /api/2.0/email/campaigns/send.json
    method: POST
    data_selector: response
- name: mGage Configuration
  endpoint:
    path: /email/configure/mgage
    method: POST
- name: WebEngage Webhook
  endpoint:
    method: POST
- name: hashed_pii
  endpoint:
    path: /private-esp
    method: POST
- name: Delivery Status Notification
  endpoint:
    path: /delivery_status_notification
    method: POST
    data_selector: status
    params: {}
- name: SMTP Configuration
  endpoint:
    path: /smtp/configuration
    method: POST
    data_selector: configuration
    params: {}
- name: hashed_pii
  endpoint:
    path: /private-esp
    method: POST
    data_selector: hashed_values
    params: {}
- name: WhatsApp Templates
  endpoint:
    path: /whatsapp/templates
    method: POST
    data_selector: templates
- name: smtp_configuration
  endpoint:
    path: /smtp/configuration
    method: POST
    data_selector: configuration
    params: {}
- name: WhatsApp Business Account
  endpoint:
    path: /whatsapp/business/account
    method: POST
    data_selector: account_details
- name: WhatsApp Service Provider
  endpoint:
    path: /whatsapp/service-provider
    method: POST
    data_selector: serviceProvider
    params: {}
- name: WhatsApp Templates
  endpoint:
    path: /whatsapp/templates
    method: POST
    data_selector: template
    params: {}
- name: WhatsApp Templates
  endpoint:
    path: /whatsapp/templates
    method: POST
    data_selector: templates
- name: WhatsApp Service Provider
  endpoint:
    path: /whatsapp/service-provider
    method: POST
    data_selector: service_provider
    params: {}
- name: WhatsApp Templates
  endpoint:
    path: /whatsapp/templates
    method: POST
    data_selector: template
    params: {}
- name: WhatsApp Service Provider
  endpoint:
    path: /vconnect/wsp
    method: POST
    data_selector: response
    params: {}
- name: WhatsApp Templates
  endpoint:
    path: /vconnect/templates
    method: POST
    data_selector: response
    params: {}
- name: WhatsApp Campaigns
  endpoint:
    path: /v1/whatsapp/campaigns
    method: POST
    data_selector: data
- name: WhatsApp Templates
  endpoint:
    path: /v1/whatsapp/templates
    method: POST
    data_selector: data
- name: WhatsApp Templates
  endpoint:
    path: /whatsapp/templates
    method: POST
- name: WhatsApp Service Provider
  endpoint:
    path: /whatsapp/service-provider
    method: POST
    data_selector: service_provider
- name: WhatsApp Templates
  endpoint:
    path: /whatsapp/templates
    method: POST
    data_selector: templates
- name: WhatsApp Service Provider
  endpoint:
    path: /add-whatsapp-service-provider
    method: POST
    data_selector: serviceProvider
    params: {}
- name: WhatsApp Templates
  endpoint:
    path: /whatsapp/templates
    method: POST
- name: Private WSP API
  endpoint:
    path: /private-wsp-api
    method: POST
    data_selector: delivery_status
    params: {}
- name: send_personalization_variables
  endpoint:
    path: /send_personalization_variables
    method: POST
    data_selector: whatsAppData
    params: {}
- name: send_entire_message
  endpoint:
    path: /send_entire_message
    method: POST
    data_selector: whatsAppData
    params: {}
- name: whatsapp_message
  endpoint:
    path: <PRIVATE-WSP-API-END-POINT>
    method: POST
    data_selector: whatsAppData
    params: {}
- name: send_personalization_variables
  endpoint:
    path: /send_personalization_variables
    method: POST
    data_selector: whatsAppData
    params: {}
- name: send_entire_message
  endpoint:
    path: /send_entire_message
    method: POST
    data_selector: whatsAppData
    params: {}
- name: Private RSP API Endpoint
  endpoint:
    path: /your-endpoint-path
    method: POST
    data_selector: response
    params:
      messageId: UUID
- name: Delivery Status Notification
  endpoint:
    path: <STATIC-DSN-END-POINT-OF-WEBENGAGE>
    method: POST
    data_selector: messageId
- name: Private RSP API Endpoint
  endpoint:
    path: /your/api/endpoint
    method: POST
    data_selector: response
- name: rcs_request
  endpoint:
    path: /<PRIVATE-RSP-API-END-POINT>
    method: POST
    data_selector: ''
    params: {}
- name: dsn
  endpoint:
    path: /<STATIC-DSN-END-POINT-OF-WEBENGAGE>
    method: POST
    data_selector: ''
    params: {}
- name: RCS Request
  endpoint:
    path: <PRIVATE-RSP-API-END-POINT>
    method: POST
    data_selector: rcsData
    params: {}
- name: Delivery Status Notification
  endpoint:
    path: <STATIC-DSN-END-POINT-OF-WEBENGAGE>
    method: POST
    data_selector: status
    params: {}
- name: RSP Configuration
  endpoint:
    path: /configure/rsp/tanla
    method: POST
- name: configuration
  endpoint:
    path: /api/configuration
    method: POST
    data_selector: data
    params: {}
- name: RCS Service Provider
  endpoint:
    path: /rcs/karix
    method: POST
    data_selector: response
    params: {}
- name: RSP Configuration
  endpoint:
    path: /configuring/rsp/tanla/platforms
    method: POST
- name: RCS Configuration
  endpoint:
    path: /trustsignal/configuration
    method: POST
    data_selector: response
    params: {}
- name: RCS Service Provider
  endpoint:
    path: /rcs/karix
    method: POST
- name: ad_account
  endpoint:
    path: /adaccounts
    method: GET
- name: business_account
  endpoint:
    path: /businesses
    method: GET
    data_selector: businesses
- name: Ad Account
  endpoint:
    path: /business/facebook/ad_account
    method: POST
    data_selector: data
    params: {}
- name: tiktok_account
  endpoint:
    path: /integrations/channels/tiktok
    method: POST
    data_selector: account_details
- name: user_tracking
  endpoint:
    path: /api/user-tracking
    method: POST
    data_selector: data
    params: {}
- name: event_tracking
  endpoint:
    path: /api/event-tracking
    method: POST
    data_selector: data
    params: {}
- name: users
  endpoint:
    path: /docs/users
    method: GET
    data_selector: user_profiles
    params: {}
- name: events
  endpoint:
    path: /docs/events
    method: GET
    data_selector: event_records
    params: {}
- name: user_attributes
  endpoint:
    path: /setAttribute
    method: POST
    data_selector: attributes
    params: {}
- name: user
  endpoint:
    path: /user
    method: POST
    data_selector: userData
- name: tracking_events
  endpoint:
    path: /docs/rest-api-tracking-events
    method: GET
    data_selector: records
- name: custom_events
  endpoint:
    path: /api/v1/custom_events
    method: POST
    data_selector: data
    params: {}
- name: push_notifications
  endpoint:
    path: /api/push-notifications
    method: POST
    data_selector: notifications
    params: {}
- name: push_notification_clicked
  endpoint:
    path: /callbacks/push_notification_clicked
    method: POST
    data_selector: callback_data
    params: {}
- name: in_app_notification_prepared
  endpoint:
    path: /callbacks/in_app_notification_prepared
    method: POST
    data_selector: callback_data
    params: {}
- name: in_app_notification_shown
  endpoint:
    path: /callbacks/in_app_notification_shown
    method: POST
    data_selector: callback_data
    params: {}
- name: in_app_notification_dismissed
  endpoint:
    path: /callbacks/in_app_notification_dismissed
    method: POST
    data_selector: callback_data
    params: {}
- name: in_app_campaigns
  endpoint:
    path: /docs/creating-in-app-campaigns
    method: GET
    data_selector: campaigns
    params: {}
- name: in_app_notification
  endpoint:
    path: /in-app/notification
    method: POST
    data_selector: actions
    params: {}
- name: location_tracking_android
  endpoint:
    path: /config/android/location_tracking
    method: POST
    data_selector: locationTracking
    params: {}
- name: location_tracking_ios
  endpoint:
    path: /config/ios/location_tracking
    method: POST
    data_selector: locationTracking
    params: {}
- name: push_notification_clicked
  endpoint:
    path: /sdk/push/callbacks/clicked
    method: POST
    data_selector: callback_data
- name: in_app_notification_prepared
  endpoint:
    path: /sdk/inapp/callbacks/prepared
    method: POST
    data_selector: inAppData
- name: in_app_notification_shown
  endpoint:
    path: /sdk/inapp/callbacks/shown
    method: POST
    data_selector: inAppData
- name: in_app_notification_dismissed
  endpoint:
    path: /sdk/inapp/callbacks/dismissed
    method: POST
    data_selector: inAppData
- name: users
  endpoint:
    path: /users
    method: GET
    data_selector: users
- name: events
  endpoint:
    path: /events
    method: GET
    data_selector: events
- name: users
  endpoint:
    path: /api/users
    method: POST
    data_selector: data
- name: events
  endpoint:
    path: /api/events
    method: POST
    data_selector: data
- name: custom_events
  endpoint:
    path: /events/custom
    method: POST
    data_selector: eventData
- name: push_messaging
  endpoint:
    path: /docs/react-native-push-messaging
    method: GET
    data_selector: messages
    params: {}
- name: tracking_events
  endpoint:
    path: /docs/rest-api-tracking-events
    method: GET
    data_selector: events
    params: {}
- name: in_app_payload
  endpoint:
    path: /in-app/payload
    method: POST
    data_selector: actions
    params: {}
- name: push_payload
  endpoint:
    path: /push/payload
    method: POST
    data_selector: userData
    params: {}
- name: users
  endpoint:
    path: /api/users
    method: GET
- name: events
  endpoint:
    path: /api/events
    method: POST
- name: WECampaignCallback
  endpoint:
    path: /callbacks/WECampaign
    method: POST
    data_selector: callbacks
    params: {}
- name: WEPlaceholderCallback
  endpoint:
    path: /callbacks/WEPlaceholder
    method: POST
    data_selector: callbacks
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: android_integration
  endpoint:
    path: /android-integration
    method: GET
    data_selector: integration_steps
    params: {}
- name: ios_integration
  endpoint:
    path: /ios-integration
    method: GET
    data_selector: integration_steps
    params: {}
- name: inline_content
  endpoint:
    path: /docs/react-native-app-in-line-content
    method: GET
    data_selector: content
    params: {}
- name: user
  endpoint:
    path: /api/user
    method: POST
    data_selector: user_data
- name: user
  endpoint:
    path: /api/user
    method: POST
    data_selector: records
- name: set_user_email
  endpoint:
    path: /setUserEmail
    method: POST
    data_selector: response
    params: {}
- name: set_user_hashed_email
  endpoint:
    path: /setUserHashedEmail
    method: POST
    data_selector: response
    params: {}
- name: set_user_birth_date
  endpoint:
    path: /setUserBirthDate
    method: POST
    data_selector: response
    params: {}
- name: set_user_phone
  endpoint:
    path: /setUserPhone
    method: POST
    data_selector: response
    params: {}
- name: set_user_hashed_phone
  endpoint:
    path: /setUserHashedPhone
    method: POST
    data_selector: response
    params: {}
- name: set_user_gender
  endpoint:
    path: /setUserGender
    method: POST
    data_selector: response
    params: {}
- name: set_user_first_name
  endpoint:
    path: /setUserFirstName
    method: POST
    data_selector: response
    params: {}
- name: set_user_last_name
  endpoint:
    path: /setUserLastName
    method: POST
    data_selector: response
    params: {}
- name: set_user_company
  endpoint:
    path: /setUserCompany
    method: POST
    data_selector: response
    params: {}
- name: set_user_opt_in
  endpoint:
    path: /setUserOptIn
    method: POST
    data_selector: response
    params: {}
- name: set_user_location
  endpoint:
    path: /setUserLocation
    method: POST
    data_selector: response
    params: {}
- name: set_user_attribute
  endpoint:
    path: /setUserAttribute
    method: POST
    data_selector: response
    params: {}
- name: set_user_attributes
  endpoint:
    path: /setUserAttributes
    method: POST
    data_selector: response
    params: {}
- name: custom_event
  endpoint:
    path: /track/event
    method: POST
    data_selector: data
- name: custom_events
  endpoint:
    path: /api/v1/events
    method: POST
    data_selector: data
    params: {}
- name: FirebaseMessagingService
  endpoint:
    path: /firebase/messaging/service
    method: POST
    data_selector: data
    params: {}
- name: firebase_messaging_service
  endpoint:
    path: /services/firebase/messaging
    method: POST
    data_selector: data
- name: notification_list
  endpoint:
    path: /notifications
    method: GET
    data_selector: notificationData
- name: notification_count
  endpoint:
    path: /notifications/count
    method: GET
    data_selector: count
- name: mark_read
  endpoint:
    path: /markRead
    method: POST
    data_selector: notificationItem
    params: {}
- name: mark_unread
  endpoint:
    path: /markUnread
    method: POST
    data_selector: notificationItem
    params: {}
- name: mark_delete
  endpoint:
    path: /markDelete
    method: POST
    data_selector: notificationItem
    params: {}
- name: read_all
  endpoint:
    path: /readAll
    method: POST
    data_selector: notificationList
    params: {}
- name: unread_all
  endpoint:
    path: /unReadAll
    method: POST
    data_selector: notificationList
    params: {}
- name: delete_all
  endpoint:
    path: /deleteAll
    method: POST
    data_selector: notificationList
    params: {}
- name: track_click
  endpoint:
    path: /trackClick
    method: POST
    data_selector: notificationItem
    params: {}
- name: track_view
  endpoint:
    path: /trackView
    method: POST
    data_selector: notificationItem
    params: {}
- name: markRead
  endpoint:
    path: /markRead
    method: POST
    data_selector: notificationItem
    params: {}
- name: markUnread
  endpoint:
    path: /markUnread
    method: POST
    data_selector: notificationItem
    params: {}
- name: markDelete
  endpoint:
    path: /markDelete
    method: POST
    data_selector: notificationItem
    params: {}
- name: readAll
  endpoint:
    path: /readAll
    method: POST
    data_selector: notificationList
    params: {}
- name: unReadAll
  endpoint:
    path: /unReadAll
    method: POST
    data_selector: notificationList
    params: {}
- name: deleteAll
  endpoint:
    path: /deleteAll
    method: POST
    data_selector: notificationList
    params: {}
- name: trackClick
  endpoint:
    path: /trackClick
    method: POST
    data_selector: notificationItem
    params: {}
- name: trackView
  endpoint:
    path: /trackView
    method: POST
    data_selector: notificationItem
    params: {}
- name: push_callbacks
  endpoint:
    path: /docs/web-callbacks
    method: GET
    data_selector: callbacks
    params: {}
- name: App In-line Content
  endpoint:
    path: /docs/flutter-app-in-line-content
    method: GET
    data_selector: content
- name: in_app_notification_callbacks
  endpoint:
    path: /in-app/notification/callbacks
    method: POST
    data_selector: ' callbacks'
    params: {}
- name: anonymous_id_change_callbacks
  endpoint:
    path: /anonymous/id/change/callbacks
    method: POST
    data_selector: callbacks
    params: {}
- name: screen_tracking
  endpoint:
    path: /screen/tracking
    method: POST
    data_selector: data
    params: {}
- name: Inline Content
  endpoint:
    path: /api/v1/inline-content
    method: GET
    data_selector: data
    params: {}
- name: UserTracking
  endpoint:
    path: /tracking/users
    method: POST
    data_selector: records
- name: EventTracking
  endpoint:
    path: /tracking/events
    method: POST
    data_selector: records
- name: user_properties
  endpoint:
    path: /v1/user/properties
    method: GET
    data_selector: data
    params: {}
- name: user_events
  endpoint:
    path: /v1/event
    method: POST
    data_selector: data
    params: {}
- name: tracking_events
  endpoint:
    path: /api/tracking/events
    method: POST
    data_selector: events
- name: users
  endpoint:
    path: /api/users
    method: GET
    data_selector: users
    params: {}
- name: events
  endpoint:
    path: /api/events
    method: GET
    data_selector: events
    params: {}
- name: push_integration
  endpoint:
    path: /data-platform/integrations/push-setup
    method: POST
    data_selector: data
- name: Screen Data
  endpoint:
    path: /docs/rest-api-tracking-users
    method: GET
    data_selector: screenData
    params: {}
- name: Push Setup
  endpoint:
    path: /Data Platform/Integrations/Push Setup
    method: POST
    data_selector: response
    params: {}
- name: Tracking Users
  endpoint:
    path: /docs/rest-api-tracking-users
    method: GET
- name: Tracking Events
  endpoint:
    path: /docs/rest-api-tracking-events
    method: GET
- name: installation
  endpoint:
    path: /docs/integration-of-webengage-ios-sdk
    method: GET
    data_selector: Installation steps
- name: initialization
  endpoint:
    path: /docs/integration-of-webengage-ios-sdk
    method: GET
    data_selector: Initialization steps
- name: additional_steps
  endpoint:
    path: /docs/xamarin-ios-advanced
    method: GET
    data_selector: Additional Steps
- name: user
  endpoint:
    path: /api/user
    method: POST
    data_selector: user_data
- name: event_reporting_strategy
  endpoint:
    path: /docs/rest-api-tracking-users
    method: GET
    data_selector: WebEngageConfig
    params: {}
- name: location_tracking
  endpoint:
    path: /docs/xamarin-android-getting-started
    method: GET
    data_selector: location_tracking
    params: {}
- name: tracking_events
  endpoint:
    path: /tracking/events
    method: POST
    data_selector: event_data
- name: WebEngageSDK
  endpoint:
    path: /docs/ios-troubleshooting#section-1-where-do-i-find-webengage-license-code-required-for-sdk-integration
    method: GET
    data_selector: license_code
    params: {}
- name: Push Messaging
  endpoint:
    path: /docs/push
    method: GET
    data_selector: notifications
    params: {}
- name: Rich Push Notifications
  endpoint:
    path: /docs/web-push
    method: GET
    data_selector: notifications
    params: {}
- name: user
  endpoint:
    path: /api/v1/user
    method: GET
    data_selector: records
    params: {}
- name: event
  endpoint:
    path: /api/v1/event
    method: GET
    data_selector: records
    params: {}
- name: in_app_campaigns
  endpoint:
    path: /docs/creating-in-app-campaigns
    method: GET
    data_selector: campaigns
    params: {}
- name: Unity.Android
  endpoint:
    path: /unity/android/sdk
    method: GET
    data_selector: data
- name: tagging_app_screens
  endpoint:
    path: /docs/in-app/tagging-app-screens
    method: GET
    data_selector: screens
    params: {}
- name: tracking_screen_data
  endpoint:
    path: /docs/in-app/tracking-screen-data
    method: GET
    data_selector: screenData
    params: {}
- name: users
  endpoint:
    path: /api/users
    method: GET
    data_selector: data
- name: events
  endpoint:
    path: /api/events
    method: POST
    data_selector: data
- name: callbacks
  endpoint:
    path: /callbacks
    method: GET
    data_selector: callbacks
- name: custom_event
  endpoint:
    path: /tracking/events
    method: POST
    data_selector: event
    params: {}
- name: webengage_sdk
  endpoint:
    path: /sdk/webengage-android-sdk
    method: GET
    data_selector: sdk
- name: screens
  endpoint:
    path: /in-app/message-targeting
    method: GET
    data_selector: screens
- name: screen_data
  endpoint:
    path: /in-app/screen-data
    method: POST
    data_selector: screen_data
- name: users
  endpoint:
    path: /api/users
    method: POST
    data_selector: users
- name: events
  endpoint:
    path: /api/events
    method: POST
    data_selector: events
- name: custom_event
  endpoint:
    path: /track/custom-event
    method: POST
    data_selector: event
- name: custom_event
  endpoint:
    path: /docs/rest-api-tracking-events
    method: POST
    data_selector: event
    params: {}
- name: Push Notifications
  endpoint:
    path: /docs/android-push-not messaging
    method: GET
    data_selector: records
    params: {}
- name: in_app_messaging
  endpoint:
    path: /in-app
    method: GET
    data_selector: messages
    params: {}
- name: WebEngageSDK
  endpoint:
    path: /unity-ios
    method: POST
    data_selector: data
    params: {}
- name: users
  endpoint:
    path: /api/users
    method: GET
    data_selector: data
- name: events
  endpoint:
    path: /api/events
    method: GET
    data_selector: data
- name: users
  endpoint:
    path: /api/users
    method: GET
- name: events
  endpoint:
    path: /api/events
    method: POST
- name: custom_event
  endpoint:
    path: /api/v1/events
    method: POST
    data_selector: event
- name: tracking_events
  endpoint:
    path: /api/tracking/events
    method: POST
    data_selector: data
    params: {}
- name: push_notification_callbacks
  endpoint:
    path: /webengage/callbacks/push
    method: POST
    data_selector: callbacks
- name: in_app_notification_callbacks
  endpoint:
    path: /webengage/callbacks/in_app
    method: POST
    data_selector: callbacks
- name: iOS Info.plist
  endpoint:
    path: /docs/ios-getting-started#3-configure-infoplist
    method: GET
    data_selector: properties
    params: {}
- name: Android AndroidManifest.xml
  endpoint:
    path: /docs/android-getting-started
    method: GET
    data_selector: meta-data
    params: {}
- name: push_notification_clicked
  endpoint:
    path: /callbacks/push_notification_clicked
    method: POST
    data_selector: callback
    params: {}
- name: in_app_notification_prepared
  endpoint:
    path: /callbacks/in_app_notification_prepared
    method: POST
    data_selector: callback
    params: {}
- name: in_app_notification_shown
  endpoint:
    path: /callbacks/in_app_notification_shown
    method: POST
    data_selector: callback
    params: {}
- name: in_app_notification_dismissed
  endpoint:
    path: /callbacks/in_app_notification_dismissed
    method: POST
    data_selector: callback
    params: {}
- name: in_app_notification
  endpoint:
    path: /in-app/notification/clicked
    method: POST
    data_selector: actions
    params: {}
- name: user_attributes
  endpoint:
    path: /user/attributes
    method: POST
    data_selector: attributes
    params: {}
- name: user
  endpoint:
    path: /v1/accounts/<YOUR_WEBENGAGE_LICENSE_CODE>/users
    method: POST
    data_selector: null
    params: {}
- name: users
  endpoint:
    path: /users
    method: GET
- name: events
  endpoint:
    path: /events
    method: GET
- name: transaction
  endpoint:
    path: /transaction
    method: GET
- name: survey_response
  endpoint:
    path: /survey/response/
    method: GET
- name: Push Messaging
  endpoint:
    path: /docs/ionic-capacitor-push-messaging
    method: GET
    data_selector: null
    params: {}
- name: users
  endpoint:
    path: /users
    method: POST
    data_selector: result
- name: in_app_campaigns
  endpoint:
    path: /creating-in-app-campaigns
    method: GET
    data_selector: campaigns
    params: {}
- name: users
  endpoint:
    path: /users
    method: POST
- name: transaction
  endpoint:
    path: /transaction
    method: POST
    data_selector: null
    params: {}
- name: user
  endpoint:
    path: /v1/accounts/<YOUR_WEBENGAGE_LICENSE_CODE>/users
    method: POST
    data_selector: null
    params: {}
- name: transaction
  endpoint:
    path: /transaction
    method: POST
    data_selector: response.data
    params: {}
- name: users
  endpoint:
    path: /users
    method: GET
- name: events
  endpoint:
    path: /events
    method: GET
- name: transaction
  endpoint:
    path: /transaction
    method: GET
- name: survey_response
  endpoint:
    path: /survey/response/
    method: GET
- name: survey_response
  endpoint:
    path: /survey/response/<ResponseId>
    method: GET
    data_selector: response
    params: {}
- name: users
  endpoint:
    path: /users
    method: POST
    data_selector: users
    params: {}
- name: survey_response
  endpoint:
    path: /survey/response/
    method: GET
    data_selector: response.data
    params: {}
- name: users
  endpoint:
    path: /users
    method: POST
    data_selector: response
    params: {}
- name: bulk_users
  endpoint:
    path: /bulk-users
    method: POST
    data_selector: response
    params: {}
- name: bulk_events
  endpoint:
    path: /bulk-events
    method: POST
    data_selector: response
    params: {}
- name: transaction
  endpoint:
    path: /transaction
    method: POST
    data_selector: null
    params:
      userId: string
      ttl: number
      dedupe.ttl: number
      txnId: string
      overrideData.email: string
      overrideData.phone: string
      overrideData.context.token: json
- name: transaction
  endpoint:
    path: /transaction
    method: POST
    data_selector: response.data
    params: {}
- name: manual_upload
  endpoint:
    path: /recommendation/manual/upload
    method: POST
    data_selector: recommendationMeta
    params: {}
- name: recommendation_upload
  endpoint:
    path: /api/v1/accounts/{{licenseCode}}/recommendation/manual/upload
    method: POST
    data_selector: recommendationMeta
    params: {}
- name: survey_response
  endpoint:
    path: /survey/response/<ResponseId>
    method: GET
    data_selector: response
    params: {}
- name: survey_response
  endpoint:
    path: /survey/response/
    method: GET
    data_selector: response.data
    params: {}
- name: webhook_requests
  endpoint:
    path: /webhooks
    method: POST
    data_selector: events
    params: {}
- name: bulk_users
  endpoint:
    path: /bulk-users
    method: POST
    data_selector: response
    params: {}
- name: push_notification_accepted
  endpoint:
    path: /push_notification_accepted
    method: POST
    data_selector: event_data
    params: {}
- name: push_notification_rejected
  endpoint:
    path: /push_notification_rejected
    method: POST
    data_selector: event_data
    params: {}
- name: journey_activated
  endpoint:
    path: /journey_activated
    method: POST
    data_selector: event_data
    params: {}
- name: bulk_events
  endpoint:
    path: /bulk-events
    method: POST
    data_selector: response
    params: {}
- name: manual_upload
  endpoint:
    path: /api/v1/accounts/{{licenseCode}}/recommendation/manual/upload
    method: POST
    data_selector: recommendationMeta
    params: {}
- name: product_viewed
  endpoint:
    path: /path/to/product_viewed
    method: GET
    data_selector: attributes
    params: {}
- name: searched_product
  endpoint:
    path: /path/to/searched_product
    method: GET
    data_selector: attributes
    params: {}
- name: category_viewed
  endpoint:
    path: /path/to/category_viewed
    method: GET
    data_selector: attributes
    params: {}
- name: added_to_cart
  endpoint:
    path: /path/to/added_to_cart
    method: GET
    data_selector: attributes
    params: {}
- name: removed_from_cart
  endpoint:
    path: /path/to/removed_from_cart
    method: GET
    data_selector: attributes
    params: {}
- name: customer_registered
  endpoint:
    path: /path/to/customer_registered
    method: GET
    data_selector: attributes
    params: {}
- name: checkout_button_clicked
  endpoint:
    path: /path/to/checkout_button_clicked
    method: GET
    data_selector: attributes
    params: {}
- name: checkout_created
  endpoint:
    path: /path/to/checkout_created
    method: GET
    data_selector: attributes
    params: {}
- name: checkout_updated
  endpoint:
    path: /path/to/checkout_updated
    method: GET
    data_selector: attributes
    params: {}
- name: order_created
  endpoint:
    path: /path/to/order_created
    method: GET
    data_selector: attributes
    params: {}
- name: recommendation_upload
  endpoint:
    path: /api/v1/accounts/{{licenseCode}}/recommendation/manual/upload
    method: POST
    data_selector: recommendationMeta
    params: {}
- name: webhook_requests
  endpoint:
    path: /webhooks
    method: POST
    data_selector: event-specific data
- name: order_completed
  endpoint:
    path: /order_completed
    method: GET
    data_selector: records
- name: order_updated
  endpoint:
    path: /order_updated
    method: GET
    data_selector: records
- name: order_fulfilled
  endpoint:
    path: /order_fulfilled
    method: GET
    data_selector: records
- name: order_partially_fulfilled
  endpoint:
    path: /order_partially_fulfilled
    method: GET
    data_selector: records
- name: order_cancelled
  endpoint:
    path: /order_cancelled
    method: GET
    data_selector: records
- name: newsletter_subscribed
  endpoint:
    path: /newsletter_subscribed
    method: GET
    data_selector: records
- name: cart_viewed
  endpoint:
    path: /cart_viewed
    method: GET
    data_selector: records
- name: cart_updated
  endpoint:
    path: /cart_updated
    method: GET
    data_selector: records
- name: push_notification_accepted
  endpoint:
    path: /push_notification_accepted
    method: POST
    data_selector: event_data
- name: push_notification_rejected
  endpoint:
    path: /push_notification_rejected
    method: POST
    data_selector: event_data
- name: journey_activated
  endpoint:
    path: /journey_activated
    method: POST
    data_selector: event_data
- name: track_event
  endpoint:
    path: /track
    method: POST
    data_selector: event
    params: {}
- name: identify_user
  endpoint:
    path: /identify
    method: POST
    data_selector: user
    params: {}
- name: api_key
  endpoint:
    path: /rest-api-troubleshooting#section-2-where-do-i-find-webengage-api-key-for-rest-api-integration
    method: GET
- name: tracked_user_attributes
  endpoint:
    path: /user/attributes
    method: GET
    data_selector: attributes
- name: product_viewed
  endpoint:
    path: /events/product_viewed
    method: GET
    data_selector: events
- name: searched_product
  endpoint:
    path: /events/searched_product
    method: GET
    data_selector: events
- name: category_viewed
  endpoint:
    path: /events/category_viewed
    method: GET
    data_selector: events
- name: added_to_cart
  endpoint:
    path: /events/added_to_cart
    method: GET
    data_selector: events
- name: removed_from_cart
  endpoint:
    path: /events/removed_from_cart
    method: GET
    data_selector: events
- name: customer_registered
  endpoint:
    path: /events/customer_registered
    method: GET
    data_selector: events
- name: checkout_button_clicked
  endpoint:
    path: /events/checkout_button_clicked
    method: GET
    data_selector: events
- name: checkout_created
  endpoint:
    path: /events/checkout_created
    method: GET
    data_selector: events
- name: checkout_updated
  endpoint:
    path: /events/checkout_updated
    method: GET
    data_selector: events
- name: order_created
  endpoint:
    path: /events/order_created
    method: GET
    data_selector: events
- name: order_completed
  endpoint:
    path: /order_completed
    method: GET
    data_selector: records
- name: order_updated
  endpoint:
    path: /order_updated
    method: GET
    data_selector: records
- name: order_fulfilled
  endpoint:
    path: /order_fulfilled
    method: GET
    data_selector: records
- name: order_partially_fulfilled
  endpoint:
    path: /order_partially_fulfilled
    method: GET
    data_selector: records
- name: order_cancelled
  endpoint:
    path: /order_cancelled
    method: GET
    data_selector: records
- name: newsletter_subscribed
  endpoint:
    path: /newsletter_subscribed
    method: GET
    data_selector: records
- name: cart_viewed
  endpoint:
    path: /cart_viewed
    method: GET
    data_selector: records
- name: cart_updated
  endpoint:
    path: /cart_updated
    method: GET
    data_selector: records
- name: User Attributes
  endpoint:
    path: /users/attributes
    method: POST
    data_selector: attributes
    params: {}
- name: Event Tracking
  endpoint:
    path: /events/track
    method: POST
    data_selector: events
    params: {}
- name: user_data
  endpoint:
    path: /users
    method: GET
- name: events_data
  endpoint:
    path: /events
    method: GET
- name: users
  endpoint:
    path: /docs/users
    method: GET
    data_selector: records
    params: {}
- name: events
  endpoint:
    path: /docs/events
    method: GET
    data_selector: records
    params: {}
- name: webengage_integration
  endpoint:
    path: /data-platform/integrations/rest-api
    method: POST
    data_selector: data
    params: {}
- name: Adjust
  endpoint:
    path: /data-platform/integrations/rest-api
    method: GET
- name: connection
  endpoint:
    path: /data_destinations/mixpanel
    method: POST
    data_selector: connection_details
- name: export
  endpoint:
    path: /data_exports/mixpanel
    method: POST
    data_selector: export_details
- name: users
  endpoint:
    path: /users
    method: GET
    data_selector: records
    params: {}
- name: events
  endpoint:
    path: /events
    method: GET
    data_selector: records
    params: {}
- name: Cohorts
  endpoint:
    path: /api/cohorts
    method: POST
    data_selector: cohorts
    params: {}
- name: Events
  endpoint:
    path: /api/events
    method: POST
    data_selector: events
    params: {}
- name: events
  endpoint:
    path: /export/events
    method: POST
    data_selector: event_records
- name: WebEngage API Key
  endpoint:
    path: /DataPlatform/Integrations/RestAPI
    method: GET
    data_selector: API Key
- name: Delivery Status Notifications
  endpoint:
    path: /tracking/events
    method: POST
    data_selector: ''
    params: {}
- name: Delivery Status Notifications
  endpoint:
    path: /tracking/events
    method: POST
    data_selector: event
    params: {}
- name: WebEngage API Key
  endpoint:
    path: /DataPlatform/Integrations/RestAPI
    method: GET
- name: events_export
  endpoint:
    path: /data_exports
    method: POST
    data_selector: exports
    params: {}
- name: whatsapp_message
  endpoint:
    path: /wsp-api/send
    method: POST
    data_selector: whatsAppData
    params: {}
- name: whatsAppData
  endpoint:
    path: ''
    method: POST
    data_selector: ''
    params: {}
- name: users
  endpoint:
    path: /api/users
    method: GET
    data_selector: records
- name: events
  endpoint:
    path: /api/events
    method: GET
    data_selector: records
- name: Delivery Status Notification
  endpoint:
    path: /tracking/events
    method: POST
- name: Cohorts
  endpoint:
    path: /api/cohorts
    method: POST
    data_selector: cohort_data
- name: Events
  endpoint:
    path: /api/events
    method: POST
    data_selector: event_data
- name: rcs_campaign
  endpoint:
    path: /
    method: POST
    data_selector: rcsData
    params: {}
- name: dsn
  endpoint:
    path: /tracking/events
    method: POST
    data_selector: messageId
    params: {}
- name: Delivery Status Notifications
  endpoint:
    path: /tracking/events
    method: POST
    data_selector: DSN
    params: {}
- name: sso_configuration
  endpoint:
    path: /sso/configuration
    method: POST
    data_selector: configuration
    params: {}
- name: sms_request
  endpoint:
    path: /api/send-sms
    method: POST
    data_selector: response
    params: {}
- name: Delivery Status Notifications
  endpoint:
    path: /tracking/events
    method: POST
- name: GDPR Requests
  endpoint:
    path: /rest-api-gdpr-requests
    method: GET
    data_selector: data
    params: {}
- name: Users
  endpoint:
    path: /rest-api-tracking-users
    method: GET
    data_selector: data
    params: {}
- name: opengdpr_requests
  endpoint:
    path: /v1/accounts/<YOUR_WEBENGAGE_LICENSE_CODE>/opengdpr_requests
    method: POST
    data_selector: ''
    params: {}
- name: retrieve_gdpr_request_status
  endpoint:
    path: /v1/accounts/<YOUR_WEBENGAGE_LICENSE_CODE>/opengdpr_requests/{requestId}
    method: GET
    data_selector: ''
    params: {}
- name: cancel_gdpr_request
  endpoint:
    path: /v1/accounts/<YOUR_WEBENGAGE_LICENSE_CODE>/opengdpr_requests/{requestId}
    method: DELETE
    data_selector: ''
    params: {}
- name: whatsapp_data
  endpoint:
    path: /whatsapp/send
    method: POST
    data_selector: whatsAppData
    params: {}
- name: opengdpr_requests
  endpoint:
    path: /opengdpr_requests/{requestId}
    method: DELETE
    data_selector: null
    params: {}
- name: whatsapp_request
  endpoint:
    path: ''
    method: POST
    data_selector: ''
    params: {}
- name: delivery_status_notification
  endpoint:
    path: /tracking/events
    method: POST
- name: webengage.notification.render
  endpoint:
    path: /notification/render
    method: POST
    data_selector: options
- name: webengage.notification.clear
  endpoint:
    path: /notification/clear
    method: POST
    data_selector: null
- name: rcs_message
  endpoint:
    path: /<RSP-API-END-POINT>
    method: POST
    data_selector: rcsData
    params: {}
- name: dsn
  endpoint:
    path: /<STATIC-DSN-END-POINT-OF-WEBENGAGE>
    method: POST
    data_selector: messageId
    params: {}
- name: widget_configuration
  endpoint:
    path: /widget/configuration
    method: GET
    data_selector: properties
- name: survey_configuration
  endpoint:
    path: /survey/configuration
    method: GET
    data_selector: properties
- name: feedback
  endpoint:
    path: /feedback
    method: POST
    data_selector: response
- name: notification
  endpoint:
    path: /notification
    method: POST
    data_selector: response
- name: notification_render
  endpoint:
    path: /webengage/notification/render
    method: POST
    data_selector: options
- name: notification_clear
  endpoint:
    path: /webengage/notification/clear
    method: POST
    data_selector: options
- name: GDPR Requests
  endpoint:
    path: /rest-api-gdpr-requests
    method: GET
    data_selector: data
    params: {}
- name: Export User Profile
  endpoint:
    path: /rest-api-gdpr-requests#section-opengdpr_requests
    method: GET
    data_selector: data
    params: {}
- name: Erasure Request
  endpoint:
    path: /rest-api-gdpr-requests#section-opengdpr_requests
    method: POST
    data_selector: data
    params: {}
- name: opengdpr_requests
  endpoint:
    path: /opengdpr_requests
    method: POST
    data_selector: ''
    params: {}
- name: get_opengdpr_requests
  endpoint:
    path: /opengdpr_requests/{requestId}
    method: GET
    data_selector: ''
    params: {}
- name: delete_opengdpr_requests
  endpoint:
    path: /opengdpr_requests/{requestId}
    method: DELETE
    data_selector: ''
    params: {}
- name: opengdpr_requests
  endpoint:
    path: /opengdpr_requests/{requestId}
    method: DELETE
    data_selector: null
    params: {}
- name: users
  endpoint:
    path: /api/v2/users
    method: GET
    data_selector: data
- name: events
  endpoint:
    path: /api/v2/events
    method: GET
    data_selector: data
- name: webengage.notification.render
  endpoint:
    path: /webengage/notification/render
    method: POST
    data_selector: options
    params: {}
- name: webengage.notification.clear
  endpoint:
    path: /webengage/notification/clear
    method: POST
    data_selector: ''
    params: {}
- name: widget_configuration
  endpoint:
    path: /widget/configuration
    method: GET
    data_selector: properties
    params: {}
- name: survey_settings
  endpoint:
    path: /survey/settings
    method: GET
    data_selector: properties
    params: {}
- name: feedback
  endpoint:
    path: /feedback
    method: POST
    data_selector: feedbackData
- name: notification
  endpoint:
    path: /notification
    method: POST
    data_selector: notificationData
- name: WebEngage Android SDK
  endpoint:
    path: /docs/changelogs-android
    method: GET
- name: users
  endpoint:
    path: /api/users
    method: GET
    data_selector: data
- name: events
  endpoint:
    path: /api/events
    method: GET
    data_selector: data
- name: on_site_notifications
  endpoint:
    path: /on-site-notifications
    method: POST
    data_selector: notifications
- name: surveys
  endpoint:
    path: /surveys
    method: POST
    data_selector: surveys
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: feedback_responses
  endpoint:
    path: /api/feedback/responses
    method: POST
    data_selector: responses
- name: survey_responses
  endpoint:
    path: /api/survey/responses
    method: POST
    data_selector: responses
- name: user
  endpoint:
    path: /user
    method: GET
    data_selector: records
    params: {}
- name: WebEngage Android SDK
  endpoint:
    path: /docs/changelogs-android
    method: GET
    data_selector: records
    params: {}
- name: on_site_notifications
  endpoint:
    path: /api/on-site/notifications
    method: GET
- name: surveys
  endpoint:
    path: /api/on-site/surveys
    method: GET
- name: feedback_responses
  endpoint:
    path: /api/v1/feedback
    method: POST
    data_selector: responses
    params: {}
- name: survey_responses
  endpoint:
    path: /api/v1/survey
    method: POST
    data_selector: responses
    params: {}
notes:
- 'Default API call rate limit: 5,000 per minute'
- Custom User Attribute names are case sensitive and must be less than 50 characters
  long.
- Values of attributes can be of one of Boolean, Number, String, Date, Map and Array.
- System Events are automatically tracked post integration.
- User Login and User Logout are not automatically tracked and require SDK function
  calls.
- The integration code loads and initializes WebEngage SDK asynchronously.
- The script URLs in the integration code are protocol relative.
- Replace YOUR_WEBENGAGE_LICENSE_CODE with your WebEngage license code found under
  Account Setup in your dashboard.
- A user ID can have a maximum of 100 characters.
- A user ID cannot be changed once it has been assigned.
- All user related APIs are part of WebEngage Web SDK's `user` object.
- Value of String type attributes must be less than 1000 characters long. Additional
  characters will be truncated.
- User Attribute names are case sensitive and must be less than 50 characters long.
  String attribute values must be less than 1000 characters long. Any characters beyond
  that will be truncated.
- You can create a maximum of 25 Custom User Attributes of each data type.
- userAttributeName must not start with we_. Names starting with we_ are reserved
  exclusively for internal use at WebEngage.
- The first datapoint synced to WebEngage defines the data type for that user attribute.
  Thus, data types must be consistent with the value that you want to store against
  the attribute.
- String type attributes must be less than 1000 characters long. Additional characters
  will be truncated.
- User Attribute names are case sensitive and must be less than 50 characters long.
- Custom Event names are case sensitive and must be less than 50 characters long.
- Event Attribute names are case sensitive too and must be less than 50 characters
  long. String attribute values must be less than 1000 characters long.
- Custom Event names are case sensitive must be less than 50 characters long.
- Custom Event Attribute names are case sensitive too and must be less than 50 characters
  long. String attribute values must be less than 1000 characters long.
- If set to `true`, an unsubscribed visitor will not be automatically shown any opt-in
  prompts.
- If set to `false`, WebEngage will not automatically register the service worker
  script.
- If set to true, an unsubscribed visitor will not be automatically shown any opt-in
  prompts.
- In custom rules section on the targeting page of WebEngage dashboard, you can use
  the 'day' variable to create targeting rules.
- This method clears any rendered notification.
- If `surveyId` is specified, only that survey will be shown.
- If set to true, targeting rules specified in the dashboard for the active surveys
  are not executed.
- A visitor lifecycle depends on a long term cookie installed for your website on
  a browser.
- WebEngage Web SDK is integrated
- SDK authentication is enabled
- The survey ID is optional when rendering a survey.
- Uses OAuth2 with refresh token — requires setup of connected app in WebEngage
- Users visiting AMP pages will be treated as anonymous.
- Tracking of system and custom user attributes is limited by the AMP framework.
- Ensure the WebEngage amp-analytics tag is added only once on an AMP page.
- Uses OAuth2 with refresh token — requires setup of connected app in api
- Some objects like Contact may return nulls in deeply nested fields
- Must read associated concepts related to Users and Events before proceeding.
- Ensure that you replace YOUR_PROJECT_LICENSE_CODE with your WebEngage license code.
- Your License Code might start with tilde (`~`).
- If you support Android API level less than 14 then use alternative initialization
  instead of the above approach.
- Please ensure that the WebEngage amp-analytics tag is added only once on an AMP
  page.
- Session inactivity time limit can be configured up to 60 min.
- If your WebEngage dashboard URL starts with dashboard.webengage.com, then it means
  you're using our Global Data Center.
- If you have specifically asked for your data to be stored in our India Data Center
  in your contract with WebEngage, then your dashboard url will start with dashboard.in.webengage.com.
- If you have specifically asked for your data to be stored in our Saudi Arabia Data
  Center in your contract with WebEngage, then your dashboard url will start with
  dashboard.ksa.webengage.com.
- This capability is currently supported for Native - Android and iOS, React native
  and Flutter.
- All user related APIs are part of WebEngage Android SDK's User object.
- The value of `String` type attributes must be less than 1000 characters long. Additional
  characters will be truncated.
- User Attribute names are case sensitive and must be less than 50 characters long.
  `String` attribute values must be less than 1000 characters long. Additional characters
  will be truncated.
- You can create a maximum of 25 *Custom User Attributes* of each data type.
- '`userAttributeName` must not start with `we_`. Names starting with `we_` are reserved
  exclusively for internal use at WebEngage.'
- The first datapoint synced to WebEngage defines the data type for that user attribute.
- The `String` phoneNumber must be in E.164 format, eg. +551155256325, +917850009678.
- WebEngage sends all events data periodically in batches to minimize network usage
  and maximize mobile battery life for your users.
- Events accumulate over time, and WebEngage sends events in batches periodically
  to minimize network usage and maximize battery life of the device.
- High priority events are reported more frequently than batched events, which may
  drain the user's device battery faster.
- Please ensure that you have completed all the platform integration steps listed
  under Getting started before proceeding.
- If you want to do customization on push, kindly follow the doc.
- Event priority allows you to override batching behaviour of the SDK.
- 'Mandatory Step: It is also mandatory that you pass Firebase token to WebEngage
  from onCreate of your Application class.'
- FCM’s HTTPS legacy APIs are deprecated and will be removed in June 2024.
- If using App Secret, upload Private Key as FCM HTTPS legacy APIs are deprecated
  and will be removed in June 2024.
- Mi Push service outside Mainland China has been shut down by Xiaomi from 12:00 AM
  on April 2, 2024.
- Integrate Mi Push SDK v5.0.6 or above
- Integrate WebEngage core Android SDK v.4.2.0 or above
- For few devices, MI SDK throws an error asking the app to register a region first.
- To avoid the error, set the default region to either Global or India based on your
  app geography.
- Requires setup of connected app in Huawei AppGallery Connect
- For few devices, MI SDK throws an error asking the app to register a region first
  for MI SDK.
- In Android 11, if targetSdkVersion is 30 or later, add the queries element in the
  manifest to allow your app to access HMS Core.
- Enables sending messages to Huawei Mobile users through Push Kit.
- Requires App ID and App Secret from Huawei AppGallery Connect.
- You can now successfully send push notifications using Huawei push service.
- WebEngage Android SDK version 4.4.1 or above is required.
- SDK authentication must be enabled.
- Sample Notification Inbox module is a plug-and-play solution.
- WebEngage SDKs 2.7.0 and above support Android push notification channels.
- All push notifications sent via WebEngage are bundled in a single channel.
- Requires setup of connected app in webengage
- By default, ID is 'we_wk_push_channel'
- By default, Name is 'Marketing'
- By default, Description is not assigned
- By default, Importance is 'IMPORTANCE_DEFAULT'
- By default, Light color is disabled
- By default, Lock screen visibility is 'VISIBILITY_PUBLIC'
- By default, Show badge is true
- By default, Sound is system default
- By default, Vibration is true
- By default, Group is not assigned
- 'Custom push render callbacks are only called when you provide we_custom_render:
  true in the custom key-values while creating push campaign from WebEngage dashboard.'
- Default importance level is 3 which displays everywhere, makes noise, but doesn't
  visually intrude on the user.
- Any PendingIntents used in the push notification which is not provided by the above
  specified APIs, will not be tracked by the WebEngage Android SDK and hence will
  not be seen on the campaign stats page in your WebEngage dashboard.
- Push notifications may take up to 15 minutes to be delivered after being triggered
  to be sent.
- If none of the above steps help, it is possible that you are not receiving updates
  from Google's Push Notification Service.
- Some devices (Xiaomi, Lenovo) do not show push notifications if you force kill the
  app.
- App In-line Content allows you to insert content directly into your app's screen
  without disturbing the user experience.
- Tracking Impressions and Clicks for Custom Views are mandatory steps for Custom
  View campaigns.
- If push notification is not showing up on your device, then please check the following
  parameters
- Make sure that WebEngage SDK is successfully integrated
- Make sure you have integrated FCM
- Make sure you have entered the correct FCM Server Key and package name under the
  Data Platform > Integrations> Push Steup (Configure)> Push section in your dashboard
- Make sure that you wait for at least 10 minutes after installing your application
  as it take some time for the device to become push reachable after its first launch
- If testing on an emulator, try cleaning and rebuilding your project, and restarting
  ADB
- Some devices (Xiaomi, Lenovo) do not show push notifications if you force kill the
  app. In such devices you need to grant extra permissions so that your app can restart
  in the background
- If you have implemented push notification callbacks then make sure that you are
  not doing anything that might cause an Exception in onPushNotificationReceived method
- Make sure that the user is not opted out from receiving push notifications from
  WebEngage
- Make sure that the current status of your push notification campaign on dashboard
  is Ended
- Before continuing, please ensure that you have added the WebEngage SDK to your app.
- It is recommended to register StateChangeCallbacks after SDK initialization.
- WebEngage Personalization SDK is required for inline campaign processing.
- Though `WEInlineView` is recommended for property creation, you can also use other
  native `ViewGroup` such as `LinearLayout`, `FrameLayout`, and `RelativeLayout.
- This approach is supported only for Custom templates (Not supported for Text and
  Banner templates).
- Make sure to track [Impressions](/docs/android-app-in-line-content#record-viewed-impression)
  and [Clicks](/docs/android-app-in-line-content#record-click-impression) of these
  Custom Views to analyze your campaigns.
- Make sure to Register the placeholder to start getting callbacks.
- This step is just as important as registering for the placeholder and campaign callbacks.
- By default, the reporting strategy is set to ReportingStrategy.BUFFER.
- setEventReportingStrategy is to be called only once in a session. The SDK remembers
  this setting unless your app is restarted.
- Callbacks are useful for understanding the lifecycle stages of WebEngage messages.
- If you are seeing 'Events successfully Logged to server, scheduling next sync' in
  your logs, then the events are being successfully reported to WebEngage servers
  and should be reflected on your dashboard within 2-3 mins.
- Your app is using the Webengage SDK, which collects Advertiser ID and Android ID.
- Make sure to use the latest WebEngage SDK version.
- Make sure you replace YOUR_WEBENGAGE_LICENSE_CODE with your WebEngage license code.
- Avoid use_frameworks! declaration in your Podfile. Contact us at support@webengage.com
  if you face any issue.
- To check whether the integration is successful or not, you can monitor debug logs
  from WebEngage SDK in Android Studio.
- Default value of meta-data com.webengage.sdk.android.auto_gcm_registration has been
  changed from true to false.
- WebEngage.get().setRegistrationID(String registrationID, String projectNumber) has
  been deprecated.
- Mandatory properties include WEGLicenseCode, NSLocationAlwaysUsageDescription, NSLocationWhenInUseUsageDescription,
  and WEGEnvironment.
- Optional properties include UIBackgroundModes, WEGEnableLocationAuthorizationRequest,
  WEGLogLevel, and WEGAlternateAppSupport.
- The value of NSString type attributes must be less than 1000 characters long. Additional
  characters will be truncated.
- WebEngage provides a pre-built binary XCFramework distribution for users who want
  to integrate WebEngage without using a dependency manager.
- Custom Event and Custom Event Attribute names are case sensitive and must be less
  than 50 characters long.
- String attribute values must be less than 1000 characters long.
- All user related APIs are part of WebEngage iOS SDK's WEGUser object.
- The NSString type attributes must be less than 1000 characters long. Additional
  characters will be truncated.
- You need to upload the APNs Auth Key on WebEngage to enable push notifications.
- WebEngage sends all events data periodically in batches to minimize network usage
  and maximize mobile battery life.
- Requires iOS 12.0+ & WebEngage SDK Version 5.0.0+
- Choose either Swift Package Manager or CocoaPods for integrating the library into
  your Service Extension. Mixing both methods might lead to conflicts or inconsistency
  in your project setup.
- Choose Either SPM or CocoaPods for integrating the library into your Service Extension.
- Requires APNs Auth Key or APNs Certificate for push notifications
- Choose either SPM or CocoaPods for integrating the library into your Service Extension
- Use either SPM or CocoaPods for library integration — mixing both may cause conflicts.
- Before continuing, please ensure that you have completed all of the steps in Getting
  started.
- WebEngage uses background modes to track when push messages are received on a user's
  device before the message is opened.
- WebEngage push messaging can be integrated using Apple Push Notification service.
- Not required if you are sure that image URLs provided for push on WebEngage dashboard
  will always use https.
- Choose Either SPM or CocoaPods for integrating the library
- Uses WebEngage Content Extension for rich push notifications.
- Requires setup of connected app in WebEngage
- Testing in the Simulator doesn't work.
- Push notifications don't work in the simulator. You should use a real device for
  testing the same.
- Custom push notifications allow businesses to style Push Notifications based on
  their business requirements.
- All UI customizations will only be available in the notification content extension.
- All the notification's impressions will be recorded automatically by WebEngage SDK.
- The Simple click on a Notification will be tracked automatically by WebEngage SDK.
- UNNotificationActions provided to custom categories will be tracked automatically
  by WebEngage SDK.
- Custom buttons and behaviours on custom content extension UI will not be tracked
  automatically by WebEngage SDK; you must manually track these occurrences.
- Custom push notifications allow styling based on business requirements.
- All UI customizations are available only in the notification content extension due
  to iOS platform restrictions.
- This will register default CTA's received from the WebEngage dashboard and the list
  won't have dismissed type of button so you need to manually add them as required.
- WebEngage iOS SDK v6.3.2 or higher is required.
- Supports marking notifications as Read, Unread, and Delete.
- Provides tracking for views and clicks on notifications.
- The WebEngage iOS SDK does not require APIs to pass the device registration token
  or APNs message.
- If your app needs to use the application:didReceiveRemoteNotification:fetchCompletionHandler
  method, refer to the Troubleshooting section.
- Session started callbacks are triggered whenever any new session gets created
- State change callbacks are triggered whenever the state of the SDK changes
- This callback is invoked when the Anonymous ID of the user is changed
- The WebEngage iOS SDK does not require APIs to pass the device registration token.
- If your app needs to use application:didReceiveRemoteNotification:fetchCompletionHandler,
  refer to the Troubleshooting section.
- Anonymous ID changed callback is invoked when the Anonymous ID of the user is changed
- You may use the In-line Campaigns to change areas of your app or show banner ads
  based on live triggers and segmentation.
- For WebEngage Personalization SDK to support inline campaign processing, the parent
  WebEngage SDK version must be 6.2.0 or higher.
- This callback is generally recommended for registering properties.
- Callback registration is mandatory in viewWillAppear.
- Unregister callbacks in viewWillDisappear.
- No additional steps are required for enabling In-app Notifications.
- Screens are the mobile equivalent of web pages, which can have associated properties.
- Before continuing, please ensure that you have added the WebEngage SDK to your app
- User Data Encryption strengthens the security of user information by encrypting
  it before storing it on the device.
- This feature is supported on iOS SDK version 6.15.0 or above.
- Double-check your license code in the Info.plist (WEGLicenseCode key) against the
  WebEngage dashboard.
- Some objects may return nulls in deeply nested fields
- Currently, the iOS SDK requires clients to add the NSLocationAlwaysAndWhenInUseUsageDescription
  & NSLocationWhenInUseUsageDescription keys along with a placeholder purpose string
  in the Info.plist, even if their app does not use location services.
- Uses WebEngage SDK to track user data.
- Having an FCM integration is mandatory to enable these service for your app.
- You can download the Auth Key file from the Certificates, Identifiers & Profiles
  > Keys section in the Apple Developer Console.
- The Team ID is located under Membership > Team ID in the Apple Developer Console.
- The Bundle Identifier can be found in Xcode.
- To test Push integration for an iOS app that's currently under development, select
  Development.
- To start sending Push Notifications to all users who have downloaded your iOS app,
  select Production.
- The APNs Push Certificate can be created through the Certificates, Identifiers &
  Profile > Identifiers > App ID section in the Apple Developer Console.
- Select Development to test Push integration for an iOS app that's currently under
  development (not available for download at the app store).
- Select Production to start sending Push Notifications to all users who have downloaded
  your iOS app.
- Tag all app screens with a Screen Name to ensure correct display of In-app Notifications.
- This is an access controlled feature. Kindly contact your CSM or reach out to support@webengage.com
  to get this feature enabled.
- Recommended Android core SDK v3.20.5 and iOS core SDK v5.2.11
- Ensure that your apps are integrated with WebEngage before proceeding.
- Transactional SMSes override all international DND regulations.
- Promotional SMSes are strictly regulated by national do not call lists.
- Applicable only if you are sending messages to users located in India via domestic
  messaging pipeline.
- International messaging routes remain unaffected.
- Content Template Registration is mandatory.
- Brand Name is compulsory in all kinds of SMS content.
- Content Template Registration is mandatory on the DLT platform.
- 'Brand Name is compulsory in all kinds of SMS content: Promotional, Transactional,
  and OTPs.'
- This is a developing guideline. TRAI is working with operators and other stakeholders
  to come up with guidelines acceptable to all parties. Solutions proposed here are
  as per current visibility, subject to change as mandate evolves.
- PE-TM Chain Binding is applicable only for clients sending DLT based SMSs in India
  and have active SMS agreement with WebEngage.
- If TM is not added & approved on your DLT portal, your SMSs will be Rejected from
  1st December 2024.
- Please get in touch with your relationship manager at Sinch Mobile if these authentication
  headers aren't readily available in your dashboard.
- Ensure that Delivery Status Notifications like SMS Sent, Queued, Failed are tracked
  through the Amazon Kinesis Data Firehose Stream linked to the Pinpoint account.
- SMS CTA Whitelisting Guidelines are applicable to all who send DLT based SMSs in
  India.
- This is a developing guideline. TRAI is working with operators and other stakeholders
  to come up with guidelines acceptable to all parties.
- Ensure that AWS Pinpoint and Amazon Kinesis Data Firehose accounts are configured.
- Link Pinpoint Project with Kinesis Data Firehose Stream to send delivery status
  notifications.
- Add the telephone country code of the location to which you'll be sending the SMSes.
- If the Country Code is not present with SSP credentials settings then there are
  high chances that the message delivery will fail.
- A mismatch in Region will cause configuration failure.
- Ensure that the selected Region during configuration matches the one for which Pinpoint
  and the linked Delivery Stream have been configured.
- You must be registered on a DLT portal as a business entity to obtain a Principal
  Entity ID.
- Add your PE ID during configuration to ensure it is relayed for each SMS sent to
  Indian phone numbers.
- Add WebEngage Webhook URL in CM Dashboard for delivery status notifications.
- Please get in touch with your relationship manager at Dove Soft if these authentication
  headers aren't readily available in your dashboard.
- As per TRAI's latest SMS Marketing regulations for India, you must be registered
  on a DLT portal as a business entity.
- Add a user-friendly name that enables you to identify the right SSP for a campaign.
- Get in touch with your relationship manager at EOcean for authentication headers.
- As per TRAI's latest SMS Marketing regulations for India, a unique Principle Entity
  ID (PE ID) must be sent in the payload of each SMS message being sent to Indian
  phone numbers.
- It is mandatory for all SSPs to pass a PE ID in the payload of each SMS message
  being sent to Indian phone numbers.
- Get in touch with your relationship manager at Helo (VivaConnect) for authentication
  headers.
- Add your PE ID during configuration - we will ensure that it is relayed to the SSP
  for each SMS sent to your users.
- 'Pre-requisite: Prefix Customer Phone Numbers With Country Code'
- New Rules of SMS Marketing in India - Important!
- TRAI has mandated the registration of SMS templates, Business entities, Sender IDs
  & User consent with mobile operator owned DLT portals.
- Mandatory to pass a PE ID in the payload of each SMS message being sent to Indian
  phone numbers as per TRAI's regulations.
- Add custom header with param callbackurl for tracking DSN.
- Adding the WebEngage Webhook in Future will enable us to receive delivery status
  notifications for each user.
- Must register on a DLT portal as a business entity to obtain Principal Entity ID.
- API Key is required for configuration.
- Please get in touch with your relationship manager at Kavenegar if these authentication
  headers aren't readily available in your Kavenegar dashboard.
- Navigate to your MessageBird dashboard to find your API Key.
- Navigate to your mGage dashboard to find Host, Port, Aid, PIN.
- Adding the WebEngage Webhook in MOB texting will enable receiving delivery status
  notifications.
- 'As per MSG91''s Guidelines: Use 91 if you''re only sending messages to users in
  India. Use 1 if you''re only sending messages to users in the US. Use 0 if you''re
  sending messages to international users.'
- Adding the WebEngage Webhook in MSG91 will enable us to receive delivery status
  notifications for each user.
- You can test the integration by creating a test SMS campaign and sending it to a
  group of internal users (aka your teammates).
- Navigate to your Precise Communications dashboard to find your credentials.
- Please get in touch with your relationship manager at Precise Communications if
  these authentication headers aren't readily available in your dashboard.
- Navigate to your Rahyab dashboard to find your credentials.
- Please add a user-friendly name that enables you to identify the right SSP for a
  campaign while creating it.
- You can test the integration by creating a test SMS campaign and sending it to a
  group of internal users.
- Applicable only if sending messages to users in India via domestic messaging pipeline
  requires a Principal Entity ID.
- Must be registered on a DLT portal as a business entity to obtain a unique Principal
  Entity ID (PE ID) for domestic messaging in India.
- Add Custom headers only for US AND KSA environments
- Add Principal Entity ID if sending messages to users located in India via domestic
  messaging pipeline
- Must be registered on a DLT portal as a business entity for sending messages to
  users located in India.
- You must be registered on a DLT portal as a business entity to obtain a unique Principal
  Entity ID (PE ID) for SMS messaging in India.
- W.e.f from Nov 19, 2020, it is mandatory for all SSPs to pass a PE ID in the payload
  of each SMS message being sent to Indian phone numbers.
- Adding the WebEngage Webhook in 2Factor will enable us to receive delivery status
  notifications for each user.
- The message payload will contain the hashed phone identifiers, message body, and
  some more associated data.
- WebEngage expects a JSON response at that instance denoting synchronous result (request
  success/failure).
- WebEngage expects a JSON response denoting synchronous result (request success/failure).
- The encrypted value can be a maximum of 512 characters. Additional characters will
  be truncated.
- Uses a unique ID passed as UUID for each SMS.
- Please add a user-friendly name that enables you to identify the right SSP for a
  campaign.
- Unifonic requires all phone numbers to be prefixed with a country code without +
  sign.
- Ensure that your website is integrated with WebEngage before proceeding
- Highly recommended to add WebEngage Webhook URL in Unifonic Dashboard for delivery
  status notifications.
- Web Push does not work in Incognito Mode, Private Browsing Mode, and Guest Browser
  Mode.
- Ensure your website is integrated with WebEngage before proceeding
- Using the WebEngage Web SDK, you can track user interactions and page details as
  Website Data Attributes.
- You can easily relay Survey responses to your server through our Rest APIs.
- Please ensure your website is integrated with WebEngage.
- Web Push must be enabled in your dashboard.
- The Native Prompt will appear on all browsers except Firefox 72+ due to certain
  permission restrictions.
- Web Push Opt-in has been set up for your account! You can now start creating Web
  Push campaigns for all your subscribers.
- Web Push Opt-in has been set up for your account.
- Native Prompt will appear on all browsers except Firefox 72+ due to certain permission
  restrictions.
- If your service worker is located in another directory (and not the root directory)
  like `xyz`, then the WebEngage Web Push Notification will work only for that specific
  directory.
- Web Push Opt-in has been set up for your account
- Web Push notifications are only available for HTTPS websites.
- Ensure SDK setup for AMP pages is completed before configuring Web Push.
- Web Push does not work in Incognito Mode, Private Browsing Mode, and Guest Browser
  Mode
- Web Push Notifications are available only for HTTPS websites.
- Ensure SDK setup for AMP pages is completed as a pre-requisite.
- iOS device should be on version 16.4 or above
- Safari browser version should be 16+
- Update the WebEngage SDK snippet
- Your website should be PWA (progressive web app)
- Make sure the service-worker.js file is in the root directory.
- iOS device (iPhone or iOS) should be on version 16.4 or above
- Avoid using AWS SES account in Sandbox Mode while integrating it with WebEngage.
- If using dedicated IPs for email marketing, create a Configuration Set in your AWS
  SES account.
- Users can integrate multiple ESPs for email delivery.
- Please add a user-friendly name that enables you to identify the right ESP for a
  campaign while creating it.
- Navigate to your Kenscio dashboard to find and copy your API Account Name, Auth
  Token, Message-ID.
- Please verify all the Sender IDs you'll be using for Email marketing in your Elastic
  Email dashboard before proceeding.
- Please verify all the Sender IDs you'll be using for Email marketing in your Mailgun
  dashboard before proceeding.
- Please verify all the Sender IDs you'll be using for Email marketing in your Mailercloud
  dashboard before proceeding.
- Please add a user-friendly name that enables you to identify the right ESP for a
  campaign.
- Please verify all the Sender IDs you'll be using for Email marketing in your Madrill
  dashboard before proceeding.
- Please ensure that the Mandrill API Key being used to integrate WebEngage has Full
  Access.
- Highly recommended to add WebEngage Webhook in Netcore dashboard for delivery status
  notifications.
- Navigate to your Octane dashboard to find and copy your API Key and username.
- Ensure that the Mandrill API Key has Full Access.
- Please verify all the Sender IDs you'll be using for Email marketing in your Sendgrid
  dashboard before proceeding.
- Restricting access to the aforementioned aspects can cause integration failure.
- SendinBlue has a limit of 2,000 API requests per minute.
- Please verify all the Sender IDs you'll be using for Email marketing in your Netcore
  dashboard before proceeding.
- Please verify all the Sender IDs you'll be using for Email marketing in your SparkPost
  dashboard before proceeding.
- Choose an API Key Name and select All against API Permissions.
- You can test the integration by creating a test Email campaign and sending it to
  a group of internal users (aka your teammates).
- Private ESP acts as a proxy layer that decrypts email addresses of an Email campaign's
  target audience before sending it to your ESP for delivery.
- Highly recommend giving WebEngage Full Access across all permission categories for
  the API Key.
- Delivery Status Notification parameters must include the previously received TrackerId.
- Ensure that all Sender IDs are verified in the SparkPost dashboard before integration.
- Select 'All' against API Permissions when creating or using an existing API Key.
- Add a user-friendly name for the configuration to identify the ESP account used
  during email campaign creation.
- Strict guidelines laid down by Facebook control WhatsApp marketing
- Many businesses are averse to sharing contact details of their users with third-party
  platforms like WebEngage.
- Ensure that the actual email address is never passed through this method.
- Please ensure that you opt-in only those users who have explicitly provided consent.
  Violating Facebook's user opt-in policies may put you at the risk of having your
  WhatsApp business account suspended.
- Currently only Infobip WSP supports auto-approval
- Kindly add env as US if your WebEngage dashboard is located in the US server and
  IN if it is located in the India server or KSA for Saudi Arabia server.
- Strict guidelines laid down by Facebook control WhatsApp marketing.
- This integration only works for Gupshup Enterprise accounts, and not for Gupshup
  self-service accounts.
- Interakts default plans currently allows sending 600 messages/minute.
- If you are planning to use Interakt via WebEngage, then you need to contact Interakt
  team to increase the rate limit to 1000 messages/minute.
- Adding the WebEngage Webhook in Karix will enable us to receive delivery status
  notifications for each user.
- Interakts default plans currently allows sending 600 messages/minute (which is lower
  than WebEngage's minimum limit of 1000 messages/minute).
- Make sure for all WhatsApp campaigns the throttling limit is set to 1000 messages/minute.
- You can test the integration by creating a test WhatsApp campaign and sending it
  to a group of internal users (aka your teammates).
- Adding the WebEngage Webhook in Kaleyra will enable us to receive delivery status
  notifications for each user.
- Adding the WebEngage Webhook in LimeChat is highly recommended for receiving delivery
  status notifications.
- Connect with your Karix Account Manager if these authentication headers aren't readily
  available in your dashboard.
- Adding the WebEngage Webhook in ValueFirst is highly recommended to receive delivery
  status notifications.
- Please connect with your LimeChat Account Manager if these authentication headers
  aren't readily available in your dashboard.
- You can test the integration by creating a test WhatsApp campaign and sending it
  to a group of internal users.
- Verloop WhatsApp Plugin is enabled only for selected accounts. If you wish to use
  this plugin, kindly reach out to support@webengage.com to get this plugin enabled
  for your account.
- Kindly refer to this section to note important pointers when using Verloop plugin.
- Adding a name enables you to identify the appropriate WSP for a campaign.
- Adding the WebEngage Webhook in ValueFirst is highly recommended.
- Verloop plugin has a specific format for creating Template.
- If a user blocks your business number, Verloop currently doesnt pass the same to
  WebEngage and you may be get a delivered status for that user.
- Kindly refer to the documentation for important pointers when using Verloop plugin.
- Kindly add Env as US if your WebEngage dashboard is located in the US server and
  IN if it is located in the India server or KSA if it is located in Saudi Arabia
  server.
- Kindly add 'Env' as 'US' if your WebEngage dashboard is located in the US server
  and 'IN' if it is located in the India server or 'KSA' if it is located in Saudi
  Arabia server.
- If you are not sure which server your account is on, kindly check the URL of your
  dashboard.
- Add 'Env' as 'US' if your WebEngage dashboard is located in the US server and 'IN'
  if it is located in the India server or 'KSA' for Saudi Arabia server.
- Add custom headers only for US and KSA environments
- Use hashed PII data for sending WhatsApp campaigns without sharing phone numbers.
- Ensure delivery status notifications are relayed for each message.
- Adding a name enables you to identify the appropriate WSP for a campaign while creating
  it.
- Kindly add Env as US if your WebEngage dashboard is located in the US server and
  IN if it is located in the India server or KSA for Saudi Arabia server.
- 'WebEngage will add ''Content-Type'': ''application/json'' by default as a header
  in the POST call.'
- Adding the WebEngage Webhook in TrustSignal is highly recommended for receiving
  delivery status notifications.
- Add Custom headers only for US AND KSA environments.
- The values passed against hashed_phone must be encrypted in a format that you can
  decrypt later through the Private SSP.
- Please ensure that the actual phone number is never passed through this method.
- Uses JSON payload for requests
- Templates can be of various types including TEXT, VIDEO, IMAGE, DOCUMENT, LOCATION,
  and CAROUSEL
- 'WebEngage will add ‘Content-Type’: ‘application/json’ by default as a header in
  the POST call.'
- Dynamic CallToAction requires buttonUrlParam.
- All personalization variables are supported in customdata.
- While you can add links in customdata, link wrapping is not supported. Thus, clicks
  will not be tracked in your dashboard for links specified in Key-Value pairs.
- Engage users offline with personalized and actionable messages to create seamless
  brand experiences.
- WebEngage will put `ContentType:` `application/json` as default header in POST Request
  to Private RSP API.
- Link wrapping is not supported for links specified in Key-Value pairs.
- 'WebEngage will put ContentType: application/json as default header in POST Request
  to Private RSP API.'
- The token will remain the same and should not be shared.
- The token will remain the same and should not be shared to ensure security.
- To connect your account with WebEngage, please contact the support team at support@routemobile.com
  or reach out to your respective Business Manager to obtain the AUTH token.
- Add custom headers only for US and KSA environments.
- Admin Access to Ads Needed in Facebook Business Account
- Please ensure that your website & apps are integrated with WebEngage before proceeding
- Integration status can be Active or Pending based on permissions granted.
- Customer Match is supported only for whitelisted accounts.
- '''View Campaigns and Use Planning Tools'' Access Needed in Google Ads'
- Ensure that you have Read Only / Standard / Admin access in Google Ads before proceeding.
- All integrated accounts are listed under the section, Facebook Ad Accounts.
- 'Integration can have statuses: Active or Pending.'
- 'WebEngage need following access permission to your TikTok account to authenticate
  integration: Ad Account Management, Audience Management, TikTok Accounts.'
- Please Ensure That Your Website & Apps Are Integrated with WebEngage Before Proceeding
- 'WebEngage needs following access permission to your TikTok account to authenticate
  integration: Ad Account Management, Audience Management, TikTok Accounts.'
- Highly recommend completing authority verification immediately after adding TikTok
  account details to your dashboard.
- Ensure appropriate access as mentioned in TikTok Authorization step before proceeding.
- Integration of WebEngage SDK with hybrid app requires specific setup steps.
- Ensure to enable Push Notifications in the app capabilities.
- Debug logs from WebEngage SDK are printed if the value of com.webengage.sdk.android.debug
  tag is true for Android.
- The value of the WEGLogLevel tag is VERBOSE for iOS.
- Default value of the corresponding tags is false for Android and DEFAULT for iOS.
- User IDs can be a maximum of 100 characters
- User IDs cannot be changed once assigned
- Custom Event names must be less than 50 characters long.
- Custom Event Attribute names are case sensitive and must be less than 50 characters
  long.
- The `String` we_phone must be in E.164 format, eg. +551155256325, +917850009678.
- userAttributeName must not start with we_. Names starting with we_ are reserved
  exclusively for internal use at WebEngage. Thus, to avoid data contamination for
  your account, such data will be ignored if used for your Custom User Attributes.
- The first datapoint synced to WebEngage defines the data type for that user attribute.
  Thus, data types must be consistent with the value that you want to store against
  the attribute. If the data type is changed at a later date, then Custom Users Attribute
  data will stop flowing to your WebEngage dashboard.
- Clients need to explicitly ask for permissions from the end user to send push notifications
  starting from Android 13.
- Enable Push Notifications under capabilities tab in your Xcode.
- Add WEGApnsAutoRegister to info.plist with value true in config.xml file.
- Ensure that you have added the WebEngage SDK to your app
- Pass the boolean value true or false depending on the permission the user has specified.
- Enable Push Notifications under capabilities tab in your Xcode
- Add WEGApnsAutoRegister to info.plist with value true in config.xml file
- Screens are web pages in the hybrid app which can have associated properties.
- A hybrid app can have multiple screens and vice versa is also possible.
- Ensure that you finish the Android Integration steps before proceeding with the
  SDK setup.
- All user related APIs are part of WebEngage React Native SDK's `user` object.
- For Android, add <meta-data android:name="com.webengage.sdk.android.location_tracking"
  android:value="true" /> to AndroidManifest.xml.
- For iOS, add <string>location</string> to UIBackgroundModes in *Info.plist.
- The String we_phone must be in E.164 format, eg. +551155256325, +917850009678.
- User Attribute names are case sensitive and must be less than 50 characters long.
  String attribute values must be less than 1000 characters long. Additional characters
  will be truncated.
- All user related APIs are part of WebEngage React Native SDK's user object.
- The value of String type attributes must be less than 1000 characters long.
- String attribute values must be less than 1000 characters long. Additional characters
  will be truncated.
- To make sure your app is compatible with Android 13 changes, kindly follow the official
  Google documentation.
- For optimal integration, we recommend utilising the `@react-native-firebase/messaging`
  library exclusively for Android platform.
- Uses Firebase Cloud Messaging to obtain tokens and pass them to WebEngage.
- Requires handling of permissions for push notifications in Android 13.
- Before proceeding, please ensure that the react-native-webengage version is 1.2.2
  or above.
- Currently, the iOS SDK requires clients to add the NSLocationAlwaysAndWhenInUseUsageDescription
  & NSLocationWhenInUseUsageDescription keys in the Info.plist.
- Supported from React Native SDK v1.3.0
- Callbacks will be available unless the component is unmounted and is deregistered
  from the campaign callbacks.
- Tracking impression and tracking clicks are mandatory steps for Custom View campaigns.
- Users must integrate WebEngage with their Flutter apps to send user session data.
- All user-related APIs are part of the WebEngage Hybrid SDK's `user` object.
- WebEngage Plugin 1.0.3 and above supports Flutter 2.2 (null-safety).
- Use 1.0.2, if your application does not support Flutter null-safety.
- Identifying Your Data Center based on dashboard URL.
- 'For Global Data Center: Use ''us'', for India: Use ''in'', for Saudi Arabia: Use
  ''ksa''.'
- All user-related APIs are part of the WebEngage Hybrid SDK's user object.
- The value of String type attributes must be less than 1000 characters long. Additional
  characters will be truncated.
- Version should be 1.6.0 or Later
- Passing Firebase tokens to WebEngage from the onCreate method of your Application
  class ensures that changes in the user’s Firebase token are communicated to WebEngage.
- Clients will have to explicitly ask permissions from end user to send push notifications
  from Android 13 onwards.
- Passing Firebase tokens to WebEngage is highly recommended.
- From Android 13 onwards, permissions must be explicitly asked from users to send
  push notifications.
- Make sure that SDK authentication is enabled.
- Tracking Views and tracking clicks are mandatory steps. If not added then view impression
  and click data for these campaigns will not be recorded.
- Callbacks will be automatically attached as expected after adding the changes.
- Assign pushNotificationDelegate before initialising the SDK as shown in above code
  snippet.
- Supported from Flutter SDK v1.2.3.
- Assign pushNotificationDelegate before initialising the SDK
- Tracking impressions and clicks for custom views is mandatory.
- Tracking screen is a mandatory step to make sure In-line campaigns are rendered.
- Tracking Impression and tracking Clicks are mandatory steps for Custom view campaigns.
- Ensure to use WebEngage Xamarin Android Library version 0.4.0.0 or above.
- User ID (CUID) can have a maximum of 100 characters and cannot be changed once assigned.
- Recommended to use system generated user IDs instead of changeable information like
  email addresses.
- Make sure you replace YOUR_WEBENGAGE_LICENSE_CODE with your WebEngage license code
- App Installed event and First Acquisition Details data in user profile will not
  be tracked unless the Install Referrer library is integrated
- Each user is assigned a unique ID (LUID) automatically.
- You can assign a unique ID (CUID) at signup, login, or when user context changes.
- The phone number must be passed in E.164 format, eg. +551155256325, +917850009678.
- Event priority allows you to override the behavior of the SDK.
- High priority events are reported more frequently than batched events, which may
  drain battery faster.
- Ensure to add the WebEngage SDK to your app
- Enter the application package name and FCM/GCM server key in the WebEngage dashboard
- By default, the reporting strategy is set to ReportingStrategy.Buffer.
- Screens are mobile equivalent of web pages, which can have associated properties.
- If you have multiple apps, then you can use the same license code for all of them.
- WebEngage supports running multiple apps within the same License Code.
- All user related APIs are part of WebEngage Xamarin.iOS SDK's `WEGUser` object.
- WebEngage SDK allows you to define location tracking accuracy, or to disable location
  tracking.
- Apps targeting Android Marshmallow and above would need to request location permission
  from user.
- Mandatory properties must be added to the Info.plist file for SDK integration.
- Optional properties are available for enhanced functionality, like location tracking.
- Ensure that you have added the WebEngage SDK to your app.
- User IDs cannot be changed once assigned.
- Recommended to use system generated user IDs.
- WebEngage Xamarin.iOS SDK does not require APIs to pass the device registration
  token or APNs message.
- State change callbacks are triggered whenever the state of the SDK changes.
- If AutoTrackUserLocationWithAccuracy is not called, then the SDK will track user
  location only if your app has permission to read the device location, with default
  accuracy WEGLocationAccuracy.ForCity.
- This Unity Package is only for Android and will not work on any other platform
- App Installed event and First Acquisition Details data in user profile will not
  be tracked on your Android app unless you follow the above step.
- It may take up to a few minutes for data to reflect in your dashboard.
- User attributes can be of 2 types - System User Attributes and Custom User Attributes.
- User attribute names are case sensitive and must be less than 50 characters long.
- Xamarin.iOS SDK handles device registration token automatically
- Anonymous ID Changed callback is invoked when the Anonymous ID of the user is changed.
- Calling this method after initializing the SDK will force every launch of your app
  to track location with the given accuracy.
- Event Attribute names are case sensitive and must be less than 50 characters long.
- eventName or eventAttributeName must not start with we_.
- You can create a maximum of 25 Event Attributes of each data type for a Custom Event.
- This Unity Package is only for Android and will not work on any other platform.
- Using this method, Push Notifications will work as expected when the app is in foreground.
  However, they will not be shown when the app is in background.
- This Unity Package is only for iOS and will not work on any other platform.
- Custom Event Attribute names are case sensitive and must be less than 50 characters
  long. String attribute values must be less than 1000 characters long.
- eventName or eventAttributeName must not start with we_. Names starting with we_
  are reserved exclusively for internal use at WebEngage.
- Ensure to add the WebEngage SDK to your app.
- This script is for removing unsupported architectures while exporting the build
  OR submitting the app to the app store.
- Callbacks are useful for understanding the lifecycle stages of WebEngage events.
- Uses autoGAIDTracking to track advertising ID for specific users.
- User attributes can be of System User Attributes and Custom User Attributes.
- Callbacks are called on the main thread.
- Check your package.json for "@capacitor/push-notifications" dependency
- If you have other push notification providers integrated, please follow Approach
  2
- Clients will have to explicitly ask permissions from end user to send push notifications.
- The push permission prompt trigger should be managed by the app, either through
  the native Android approach or the Capacitor approach.
- Ensure WebEngage runs immediately when the app launches.
- All user-related APIs are part of the WebEngage Capacitor library’s user object.
- If an Event Attribute value is Array or Object, then it cannot be used to create
  segments. It can only be used to personalise campaigns.
- An ID can have a maximum of 100 characters.
- Once assigned, a user ID cannot be changed.
- Clients must explicitly ask permissions from end user to send push notifications
  on Android 13.
- If the user denies the permission, they will not receive push notifications.
- Data received from in-app callbacks adheres to the specified JSON format.
- Please ensure that you replace <HOST> with the host mentioned here.
- Replace <YOUR_WEBENGAGE_LICENSE_CODE> with your WebEngage license code.
- Replace <YOUR_API_KEY> with your WebEngage API key.
- Replace <EXPERIMENT_ID> with the ID of the campaign which you would like to trigger
  via this API.
- Bearer Authentication Scheme for API access.
- API key is valid for the entire lifetime of an Account Admin.
- Make sure you replace HOST in all the code snippets with the host mentioned in the
  documentation.
- Files can be downloaded by accessing the fileAccessUrl with your API credentials.
- Default API call rate limit is 5,000 per minute.
- Find your WebEngage License Code and API Key
- Rate limit is 500 requests per minute.
- Limit of 25 users/events per API call.
- API can be used only for triggering Transactional campaigns which are in Running
  state.
- User can add a maximum of 5 recommendations per item or user ID
- File size for uploading is restricted to 200mb
- XML file format is not supported
- Webhook requests will be posted to a URL configured by you.
- Webhook Secret Key for your account can be found in the Data Platform > Integrations
  > Webhooks section of WebEngage dashboard.
- Only one event can be added at a time.
- Responses with HTTP Status 200 will be treated as successful posts.
- Our Segment.com integration works only for native iOS and Android apps.
- It cannot be used for integrating mobile apps built on React Native, Flutter, Xamarin
  and Unity.
- Integration does not support Push and In-app Messaging.
- Currently, WeEngage supports the following Segment APIs - track, identify and page.
- Sending page events via server side integration is not supported.
- Custom User Attributes names are case sensitive and must be less than 50 characters
  long.
- User Attribute values must be less than 1000 characters long. Additional characters
  will be truncated.
- Replace _YOUR_LICENSE_CODE_ with your account's license code.
- Basic Integration does not support Push Notifications and In-app Messages.
- Integration via this method does not support Push and In-app Messaging.
- You can integrate only one source at once, hence you will need to repeat these steps
  for integrating other sources.
- eventName or eventAttributeName must not start with we_. Names starting with we_
  are reserved for internal use.
- 'Must Read: We recommend that you get yourself acquainted with all the concepts
  related to Users and Events before proceeding.'
- For apps integrated with WebEngage's IN environment iOS SDK, add the appropriate
  key-value under info.plist file of your application.
- For apps integrated with WebEngage's KSA environment iOS SDK, add the appropriate
  key-value under info.plist file of your application.
- If your WebEngage dashboard URL starts with, 'dashboard.webengage.com', then it
  means that you're using our US data center.
- If your WebEngage dashboard link starts with, 'dashboard.in.webengage.com', then
  it means that you're using our India data center.
- If your WebEngage dashboard link starts with, 'dashboard.ksa.webengage.com', then
  it means that you're using our Saudi Arabia data center.
- You can use macros in these URLs, which are dynamically populated with the appropriate
  values that Attribution Analytics collects from the device.
- 'Choose to host data at three data centers: US, Saudi Arabia, or India.'
- eventName or eventAttributeName must not start with we_. Names starting with we_
  are reserved exclusively for internal use at WebEngage. Thus, to avoid data contamination
  for your account, such data will be ignored if used for your Custom Events.
- The first datapoint synced to WebEngage defines the data type for that event attribute.
  Thus, data types must be consistent with the value that you want to store against
  the attribute. If the data type is changed at a later date, then Custom Event Attribute
  data will stop flowing to your WebEngage dashboard.
- Mixpanel only exports identified user profiles to match to WebEngage - users without
  user profiles will not export.
- The exported users are properly mapped in WebEngage's system only if the distinct_id
  in Mixpanel and the user ID in WebEngage have the same value.
- Event Attribute value of List or Map cannot be used to create segments.
- You must enable this integration in each Amplitude project that you want to use
  it in.
- You need a paid WebEngage plan to enable this integration.
- 'Custom Event Attributes can be of these data types: NSString, NSNumber, NSDate,
  NSArray.'
- Maximum of 25 Event Attributes of each data type for a Custom Event.
- If an Event Attribute value is NSArray or NSDictionary, then it cannot be used to
  create segments.
- File generated would have new-line delimited JSON format
- Attributes with null values will not be exported
- 'Region (case-sensitive): IN (for India Data Center), US (for USA Data Center),
  KSA (for Saudi Arabia Data Center)'
- The service provider is required to POST Delivery Status Notifications (DSNs) on
  the static endpoint.
- The service provider will be provided with a security token which needs to be included
  as a Authorization header in the POST request of DSNs.
- You can use macros in these URLs, which are dynamically populated with the appropriate
  values that Attribution Analytics collects from the device (or receives on click,
  etc.).
- Please ensure that you replace WEBENGAGE_API_KEY (placed at the end of the URL)
  with your WebEngage API Key.
- If your WebEngage dashboard URL starts with, `dashboard.webengage.com`, then it
  means that you're using our US/ Global data center.
- If your WebEngage dashboard link starts with, `dashboard.in.webengage.com`, then
  it means that you're using our India data center.
- If your WebEngage dashboard link starts with, `dashboard.ksa.webengage.com`, then
  it means that you're using our Saudi Arabia data center.
- You can host all your data at three data centers - the US, Saudi Arabia or India.
- If your WebEngage dashboard URL starts with, dashboard.webengage.com, then it means
  that you're using our US data center.
- If your WebEngage dashboard link starts with, dashboard.in.webengage.com, then it
  means that you're using our India data center.
- If your WebEngage dashboard link starts with, dashboard.ksa.webengage.com, then
  it means that you're using our Saudi Arabia data center.
- Service provider's integration should be able to ignore additional fields passed
  as metadata.
- Dynamic CTA buttons are supported.
- WSP is required to POST DSN on the static endpoint.
- The DSN Token will be provided once the integration and testing are done by the
  WebEngage team.
- File generated would have new-line delimited JSON format - Each exported record’s
  JSON will occupy a single line and separated using a new line.
- Attributes with null values will not be exported. No option to include null values.
- Service providers will consume the WebEngage API explained here to receive the messages
  and to send the delivery notification to WebEngage in the defined format.
- Uses API key for authentication — ensure proper security measures.
- WebEngage supports SSO using the SAML2 protocol.
- Minor misconfigurations in SAML2 might result in the login not working.
- Content-Type header will always be application/json
- The service provider will continue to function in private beta mode for mutual clients
  and will be later made public after ensuring the QoS and functionality tests.
- WebEngage is fully GDPR compliant.
- Deleting an end user from the WebEngage services will permanently delete WebEngage's
  user profile for that user along with events data stored in WebEngage.
- The request authentication method can be Basic authentication or Bearer authentication.
- WSP will reply back to WebEngage webhook for the delivery report (i.e. Delivery
  Status Notification (DSN)) asynchronously.
- Default rate limit for GDPR API is 100 per minute.
- Uses WhatsApp templates for sending messages
- Campaign type can be either PROMOTIONAL or TRANSACTIONAL
- 'Message Accepted Successfully: status is whatsapp_accepted with statusCode 0'
- 'Message Cannot be Sent further: if status code is not 0, send message property
  too'
- 'Payload Not Acceptable: in case there is mismatch in payload version of API contract'
- The API must be initialized before making any calls.
- You will need your WebEngage registered website's licenseCode to initialize the
  API.
- 'It is necessary that the DSN is configured for all servers: Saudi Arabia, India
  and US.'
- RSP must reply synchronously to the message with Status Codes.
- RSP will reply back to WebEngage webhook asynchronously for delivery report.
- Uses Bearer Token for authentication — token should not be shared.
- Property used only at the init time, changing this property later will have no effect
- We do not support two-way certificates at this point.
- Uses a license code for authentication.
- Optimized SDK authentication flow.
- Ensure to replace YOUR_WEBENGAGE_LICENSE_CODE with your actual license code
- WebEngage SDK automatically starts tracking user data.
- Data is stored on the device and uploaded in batches.
- Upload behavior can be changed during runtime.
- The one time integration code will load and initialize the JavaScript API.
- '''WEGAlternateAppSupport'' flag that was being used for multi-app support in the
  same project is deprecated from this version'
- Allows customization of notifications via parameters like notificationId, skipRuleExecution,
  delay, and data.
- Viber channel dependencies added.
- GAID changes to support for Google Families Policy restriction where advertising
  ID cannot be tracked for users of unknown age and children.
- Fixes and optimizations relation to In-app notifications.
- Debug logs from WebEngage SDK are printed if the value of the debug tag is true.
  Default value of this tag is false.
- String type attribute values must be less than 1000 characters long.
- Attribute names must be less than 50 characters long.
- User attribute names are case sensitive.
- Attribute name must not start with 'we_'.
- Event names are case sensitive.
- eventName must not start with 'we_'.
- Location based features will work as long as the app has requisite permissions,
  whether those permissions were triggered by WebEngage SDK or the app itself.
- Ensure to configure license code for proper functioning.
- Handle custom data correctly for both feedback and notification.
- WebEngage SDK now compatible with Android Oreo and above.
- All callbacks implementation must reside in the main package of the application.
- Renamed 'ActionButton' class to 'CallToAction'.
- Removed default exception catching from 'onPushNotificationReceived' and 'onInAppNotificationPrepared'
  methods.
- Added check for the prefix 'we_' in custom event name.
- Ensure that your website is integrated with WebEngage before proceeding.
- Ensure to set up tracking for Website Data Attributes to utilize advanced features.
- WebEngage allows you to change the event reporting behavior during runtime.
- Support added for session_timeout configuration via Info.plist.
- Collapse key Support.
- Bug fixes and optimizations.
- All user related APIs are part of WebEngage Hybrid SDK's user object.
- String type attribute values must be less than 1000 characters long. Any characters
  beyond that will be truncated.
- Track user interactions and page details as Website Data Attributes.
errors:
- Avoid creating Custom Events of the same name as that of System Events
- 'Error: userId and anonymousId cannot be empty.'
- '401 Unauthorized: Check your API key and permissions.'
- '429 Too Many Requests: Throttle your requests.'
- '401 Unauthorized: Check your authentication credentials.'
- '404 Not Found: The requested resource could not be found.'
- 'INVALID_EVENT_NAME: Ensure event names do not start with ''we_'''
- 'DATA_TYPE_MISMATCH: Ensure that the data type for event attributes is consistent
  with the value stored.'
- 'REQUEST_LIMIT_EXCEEDED: Throttle API calls or reduce frequency'
- 'QUERY_TIMEOUT: Break down filters or add selectivity'
- In case the rate limit is exceeded WebEngage tries again with a delay.
- '401 Unauthorized: Recheck OAuth scopes or token expiration'
- 'Not Registered: Make sure users were not created while testing the integration
  on a simulator.'
- 'APNs Registration Failed: Check the error_description attribute in the APNs Registration
  Failed event.'
- 'timeout: The campaign failed to render in a set time.'
- 'missingTargetView: Target property missing.'
- 'campaignFetchingFailed: Campaign fetching failed.'
- 'resourceFetchingFailed: Resource fetching failed.'
- SDK Integration is not complete. Validations failed
- Error while reporting the event to network
- 'Error: Timeout occurred while waiting for events response in flush'
- 'Wrong Content-Type Selected: Your SMS content should be applied under service implicit
  or explicit category only.'
- 'Brand Name not Added: Adding Brand name in an SMS content template is mandatory
  and should be explicitly mentioned in the SMS body.'
- 'No header associated with the brand name: This implies that you do not have a Header/
  Sender Id of the brand name you wish to have a template of.'
- '2001: Pinpoint account is not accessible for the Region specified during configuration.'
- '2002: Pinpoint account is not linked to a Kinesis Firehose Data Stream.'
- '2003: The Kinesis Firehose Data Stream linked to your Pinpoint account was not
  found.'
- '2004: The linked Kinesis Firehose Data Stream is Inactive.'
- '2005: No HTTP destination has been configured in the Kinesis Firehose Data Stream
  linked to your Pinpoint account.'
- '2006: The HTTP destination configured for your Kinesis Firehose Data Stream does
  not match the WebEngage tracker endpoint URL.'
- '2000: Insufficient Credits.'
- '2003: Invalid Mobile Number.'
- '2006: User Registered for NDNC.'
- '2008: Message Expired.'
- '2009: Undelivered.'
- '2015: Message was Rejected.'
- '2016: Time to Live Expired (DND Queue Drop / FC Queue Drop).'
- '2020: Throttling Error.'
- '2021: Duplicate.'
- '9988: Other Failures.'
- '2001: The IP has not been whitelisted'
- '2002: Empty message body'
- '2003: Invalid mobile number'
- '2004: Invalid Sender ID'
- '2005: Authorization failure'
- '2007: Maximum length of the message body has been exceeded'
- '2010: Unsupported payload version'
- '2006: Phone number is registered in a National DND List'
- Web Push Notifications cannot be delivered in private browsing sessions.
- '1000: Success'
- '9002: Message sending quota exceeded'
- '9022: Unsupported or unknown version'
- '0: Message delivery is successful!'
- '2000: Insufficient credit balance'
- '2004: Invalid Business Number'
- '2006: User blocked the Business Number'
- '2008: The message has expired'
- '2009: The message was not delivered by the operator'
- '2010: Payload version unsupported.'
- '2011: Authentication failure (e.g. mobile number might be unverified)'
- '2014: Maximum number of retries to send the message have been exhausted.'
- '2015: Throttling error.'
- '2019: The message format is invalid'
- '2021: Template Missing'
- '2022: Template Parameter Format Mismatch'
- '2023: Template did not match'
- '2024: User isn''t opted in for template message'
- '2025: User is not Opted in and is inactive'
- '9988: For outcomes not covered above.'
- '2010: Payload version unsupported'
- '2011: Authentication failure'
- '2015: Throttling error'
- '0: To be sent in case of success'
- '1000: Insufficient credit balance'
- '1001: Number is RCS Disabled'
- '1002: Entity was not found'
- '1003: Template code with bot doesn’t exist'
- '9988: For outcomes not covered, include the appropriate error description in the
  ''message'' field of the response'
- '2019: Credit Insufficient'
- '2020: Message Empty'
- '2021: Mobile Number Invalid'
- '2022: Sender Id is Invalid'
- '2006: Exceeding max length'
- '2007: Expired'
- '2008: Undelivered'
- '2009: Version Unsupported'
- '2017: Invalid Message Format'
- '2011: Others'
- '2012: DND Time'
- '2013: Maximum Retries Exhausted'
- '2014: Rate Limit Exceeded'
- '2015: TTL Expired'
- '2016: Retries Expired'
- '2023: Template Missing'
- '2024: Template Parameter Format Mismatch'
- '2025: User not Opted in or Inactive'
- '401 Unauthorized: Recheck your OAuth token'
- 'Invalid event name: Ensure event names are less than 50 characters.'
- 'Unable to receive Push Notifications: Ensure integration steps were followed.'
- 'timeout: Campaign failed to render in set time.'
- 'USER_NOT_FOUND: The specified user ID does not exist.'
- Fetching FCM registration token failed.
- '401 Unauthorized: Check if the OAuth token is valid.'
- '400 Bad Request: Ensure request parameters are correct.'
- 'INVALID_USER_ID: Ensure the user ID is unique and properly formatted.'
- 'USER_NOT_FOUND: Check if the user ID exists in the system.'
- 'Unauthorized: Recheck OAuth credentials.'
- 'Invalid Event Name: Ensure event names do not start with ''we_'' and are less than
  50 characters.'
- '401 Unauthorized: Check your authentication details.'
- '401 Unauthorized: Recheck API key'
- '404 Not Found: Check your license code'
- '400: Invalid resource/parameters'
- '401: Invalid authentication/access'
- '404: Invalid URL'
- userId and anonymousId cannot be empty.
- 'REQUEST_LIMIT_EXCEEDED: Default API call rate limit is 100 per minute.'
- '401 Unauthorized: Recheck API key or permissions'
- '404 Not Found: Ensure correct License Code is used'
- '400: The request was not in an acceptable format. Possible reasons are missing
  parameters, bad structure etc.'
- '404: The request resources do not exist. Possible reasons are user does not exist,
  invalid campaign ID etc.'
- '408: The TTL of the request expired while calling the WebEngage API.'
- '412: Certain conditional checks failed for this request. One of the reasons can
  be that user is not reachable on that channel.'
- '5xx: Something went wrong at WebEngage''s end. Please reach out to support@webengage.com
  in case you encounter this issue'
- queued
- 'HTTP Status 200: Successful posts'
- 'Other HTTP Status: Logged as failed webhook posts'
- 'Invalid API Key: Check your API Key in the settings'
- 'Missing eventName: eventName is required'
- 'User ID or Anonymous ID required: At least one of userId or anonymousId must be
  provided'
- 'USER_ID_NOT_FOUND: Ensure the Amplitude user_id field matches the WebEngage CUID
  field to avoid user duplication.'
- '2006: User under DND'
- '2008: The message has been expired'
- '3000: Recipient Blacklisted'
- '9988: For outcomes not covered above'
- 'whatsapp_accepted: Message Accepted Successfully'
- 'whatsapp_rejected: Message Cannot be Sent further'
- 'Version not supported: Payload Not Acceptable'
- 'USER_ID_NOT_FOUND: Ensure the Amplitude user_id matches the WebEngage CUID field.'
- '400 Bad Request: Check the request parameters.'
- '404 Not Found: User profile does not exist.'
- '400 Bad request: If the request status is not Pending.'
- '404 Not Found: GDPR request not found.'
- '500 Server error: Unforeseen service issues.'
- 'Version not supported: supportedVersion is mandatory in case of statusCode 2010'
- '400 Bad request: If the request status is not `Pending`.'
- '401 Unauthorized: Check your OAuth token'
- '404 Not Found: Endpoint does not exist'
- Token Personalization Bug fix.
- Fixed the app rejection issue due to privacy manifest.
- Event names must be less than 50 characters long.
- Event attribute names must be less than 50 characters long. String type attribute
  values must be less than 1000 characters long.
- '400 Bad Request: Check the request format and parameters.'
- '401 Unauthorized: Verify API key and permissions.'
auth_info:
  mentioned_objects:
  - User
  - OauthToken
  - AuthProvider
  - NamedCredential
  - Auth token
  - IPushNotificationCallbacks
  - IInAppNotificationCallbacks
  - WEGUser
  - Account Admin
  - API Key
  - License Code
  - WebEngage
client:
  base_url: https://webengage.com
  headers:
    Accept: application/json
source_metadata: null
