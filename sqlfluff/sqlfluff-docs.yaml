resources:
- name: lint
  endpoint:
    path: /lint
    method: POST
    data_selector: violations
    params: {}
- name: fix
  endpoint:
    path: /fix
    method: POST
    data_selector: fixed_sql
    params: {}
- name: parse
  endpoint:
    path: /parse
    method: POST
    data_selector: parsed_tree
    params: {}
- name: lint
  endpoint:
    path: /lint
    method: POST
    data_selector: violations
- name: fix
  endpoint:
    path: /fix
    method: POST
    data_selector: fixed_sql
- name: parse
  endpoint:
    path: /parse
    method: POST
    data_selector: parsed_tree
- name: lint
  endpoint:
    path: /lint
    method: POST
    data_selector: lint_results
- name: fix
  endpoint:
    path: /fix
    method: POST
    data_selector: fixed_string
- name: parse
  endpoint:
    path: /parse
    method: POST
    data_selector: parsed_tree
- name: lint
  endpoint:
    path: /lint
    method: POST
    data_selector: violations
    params: {}
- name: fix
  endpoint:
    path: /fix
    method: POST
    data_selector: fixed_sql
    params: {}
- name: parse
  endpoint:
    path: /parse
    method: POST
    data_selector: parsed_structure
    params: {}
- name: core_rules
  endpoint:
    path: /rules/core
    method: GET
    data_selector: rules
    params: {}
- name: inline_error_ignoring
  endpoint:
    path: /rules/inline_ignoring
    method: GET
    data_selector: examples
    params: {}
- name: ignoring_line_ranges
  endpoint:
    path: /rules/ignoring_line_ranges
    method: GET
    data_selector: examples
    params: {}
- name: aliasing.table
  endpoint:
    path: /rules/aliasing.table
    method: GET
- name: aliasing.column
  endpoint:
    path: /rules/aliasing.column
    method: GET
- name: aliasing.expression
  endpoint:
    path: /rules/aliasing.expression
    method: GET
- name: aliasing.unique.table
  endpoint:
    path: /rules/aliasing.unique.table
    method: GET
- name: aliasing.unused
  endpoint:
    path: /rules/aliasing.unused
    method: GET
- name: aliasing.length
  endpoint:
    path: /rules/aliasing.length
    method: GET
- name: aliasing.forbid
  endpoint:
    path: /rules/aliasing.forbid
    method: GET
- name: aliasing.unique.column
  endpoint:
    path: /rules/aliasing.unique.column
    method: GET
- name: aliasing.self_alias.column
  endpoint:
    path: /rules/aliasing.self_alias.column
    method: GET
- name: ambiguous.distinct
  endpoint:
    path: /rules/ambiguous.distinct
    method: GET
- name: ambiguous.union
  endpoint:
    path: /rules/ambiguous.union
    method: GET
- name: ambiguous.order_by
  endpoint:
    path: /rules/ambiguous.order_by
    method: GET
- name: ambiguous.column_count
  endpoint:
    path: /rules/ambiguous.column_count
    method: GET
- name: ambiguous.join
  endpoint:
    path: /rules/ambiguous.join
    method: GET
- name: ambiguous.column_references
  endpoint:
    path: /rules/ambiguous.column_references
    method: GET
- name: ambiguous.set_columns
  endpoint:
    path: /rules/ambiguous.set_columns
    method: GET
- name: aliasing.table
  endpoint:
    path: aliasing.table
    method: GET
    data_selector: rules
    params: {}
- name: aliasing.column
  endpoint:
    path: aliasing.column
    method: GET
    data_selector: rules
    params: {}
- name: aliasing.expression
  endpoint:
    path: aliasing.expression
    method: GET
    data_selector: rules
    params: {}
- name: aliasing.unique.table
  endpoint:
    path: aliasing.unique.table
    method: GET
    data_selector: rules
    params: {}
- name: aliasing.unused
  endpoint:
    path: aliasing.unused
    method: GET
    data_selector: rules
    params: {}
- name: aliasing.length
  endpoint:
    path: aliasing.length
    method: GET
    data_selector: rules
    params: {}
- name: aliasing.forbid
  endpoint:
    path: aliasing.forbid
    method: GET
    data_selector: rules
    params: {}
- name: aliasing.unique.column
  endpoint:
    path: aliasing.unique.column
    method: GET
    data_selector: rules
    params: {}
- name: aliasing.self_alias.column
  endpoint:
    path: aliasing.self_alias.column
    method: GET
    data_selector: rules
    params: {}
- name: ambiguous.distinct
  endpoint:
    path: ambiguous.distinct
    method: GET
    data_selector: rules
    params: {}
- name: ambiguous.union
  endpoint:
    path: ambiguous.union
    method: GET
    data_selector: rules
    params: {}
- name: ambiguous.order_by
  endpoint:
    path: ambiguous.order_by
    method: GET
    data_selector: rules
    params: {}
- name: ambiguous.column_count
  endpoint:
    path: ambiguous.column_count
    method: GET
    data_selector: rules
    params: {}
- name: ambiguous.join
  endpoint:
    path: ambiguous.join
    method: GET
    data_selector: rules
    params: {}
- name: ambiguous.column_references
  endpoint:
    path: ambiguous.column_references
    method: GET
    data_selector: rules
    params: {}
- name: ambiguous.set_columns
  endpoint:
    path: ambiguous.set_columns
    method: GET
    data_selector: rules
    params: {}
- name: capitalisation.keywords
  endpoint:
    path: capitalisation.keywords
    method: GET
    data_selector: configuration
    params: {}
- name: capitalisation.identifiers
  endpoint:
    path: capitalisation.identifiers
    method: GET
    data_selector: configuration
    params: {}
- name: capitalisation.functions
  endpoint:
    path: capitalisation.functions
    method: GET
    data_selector: configuration
    params: {}
- name: capitalisation.literals
  endpoint:
    path: capitalisation.literals
    method: GET
    data_selector: configuration
    params: {}
- name: capitalisation.types
  endpoint:
    path: capitalisation.types
    method: GET
    data_selector: configuration
    params: {}
- name: capitalisation.keywords
  endpoint:
    path: ''
    method: ''
    data_selector: ''
    params: {}
- name: capitalisation.identifiers
  endpoint:
    path: ''
    method: ''
    data_selector: ''
    params: {}
- name: capitalisation.functions
  endpoint:
    path: ''
    method: ''
    data_selector: ''
    params: {}
- name: capitalisation.literals
  endpoint:
    path: ''
    method: ''
    data_selector: ''
    params: {}
- name: capitalisation.types
  endpoint:
    path: ''
    method: ''
    data_selector: ''
    params: {}
- name: convention.not_equal
- name: convention.coalesce
- name: convention.select_trailing_comma
- name: convention.count_rows
- name: convention.is_null
- name: convention.terminator
- name: convention.statement_brackets
- name: convention.left_join
- name: convention.blocked_words
- name: convention.quoted_literals
- name: convention.casting_style
- name: jinja.padding
- name: convention.not_equal
  endpoint:
    path: /rules/convention/not_equal
    method: GET
- name: convention.coalesce
  endpoint:
    path: /rules/convention/coalesce
    method: GET
- name: convention.select_trailing_comma
  endpoint:
    path: /rules/convention/select_trailing_comma
    method: GET
- name: convention.count_rows
  endpoint:
    path: /rules/convention/count_rows
    method: GET
- name: convention.is_null
  endpoint:
    path: /rules/convention/is_null
    method: GET
- name: convention.terminator
  endpoint:
    path: /rules/convention/terminator
    method: GET
- name: convention.statement_brackets
  endpoint:
    path: /rules/convention/statement_brackets
    method: GET
- name: convention.left_join
  endpoint:
    path: /rules/convention/left_join
    method: GET
- name: convention.blocked_words
  endpoint:
    path: /rules/convention/blocked_words
    method: GET
- name: convention.quoted_literals
  endpoint:
    path: /rules/convention/quoted_literals
    method: GET
- name: convention.casting_style
  endpoint:
    path: /rules/convention/casting_style
    method: GET
- name: jinja.padding
  endpoint:
    path: /rules/jinja/padding
    method: GET
- name: layout.spacing
  endpoint:
    path: /layout/spacing
    method: GET
- name: layout.indent
  endpoint:
    path: /layout/indent
    method: GET
- name: layout.operators
  endpoint:
    path: /layout/operators
    method: GET
- name: layout.commas
  endpoint:
    path: /layout/commas
    method: GET
- name: layout.long_lines
  endpoint:
    path: /layout/long_lines
    method: GET
- name: layout.functions
  endpoint:
    path: /layout/functions
    method: GET
- name: layout.cte_bracket
  endpoint:
    path: /layout/cte_bracket
    method: GET
- name: layout.cte_newline
  endpoint:
    path: /layout/cte_newline
    method: GET
- name: layout.select_targets
  endpoint:
    path: /layout/select_targets
    method: GET
- name: layout.select_modifiers
  endpoint:
    path: /layout/select_modifiers
    method: GET
- name: layout.set_operators
  endpoint:
    path: /layout/set_operators
    method: GET
- name: layout.end_of_file
  endpoint:
    path: /layout/end_of_file
    method: GET
- name: layout.start_of_file
  endpoint:
    path: /layout/start_of_file
    method: GET
- name: layout.spacing
  endpoint:
    path: /rules/layout.spacing
    method: GET
    data_selector: records
    params: {}
- name: layout.indent
  endpoint:
    path: /rules/layout.indent
    method: GET
    data_selector: records
    params: {}
- name: layout.operators
  endpoint:
    path: /rules/layout.operators
    method: GET
    data_selector: records
    params: {}
- name: layout.commas
  endpoint:
    path: /rules/layout.commas
    method: GET
    data_selector: records
    params: {}
- name: layout.long_lines
  endpoint:
    path: /rules/layout.long_lines
    method: GET
    data_selector: records
    params: {}
- name: layout.functions
  endpoint:
    path: /rules/layout.functions
    method: GET
    data_selector: records
    params: {}
- name: layout.cte_bracket
  endpoint:
    path: /rules/layout.cte_bracket
    method: GET
    data_selector: records
    params: {}
- name: layout.cte_newline
  endpoint:
    path: /rules/layout.cte_newline
    method: GET
    data_selector: records
    params: {}
- name: layout.select_targets
  endpoint:
    path: /rules/layout.select_targets
    method: GET
    data_selector: records
    params: {}
- name: layout.select_modifiers
  endpoint:
    path: /rules/layout.select_modifiers
    method: GET
    data_selector: records
    params: {}
- name: layout.set_operators
  endpoint:
    path: /rules/layout.set_operators
    method: GET
    data_selector: records
    params: {}
- name: layout.end_of_file
  endpoint:
    path: /rules/layout.end_of_file
    method: GET
    data_selector: records
    params: {}
- name: layout.start_of_file
  endpoint:
    path: /rules/layout.start_of_file
    method: GET
    data_selector: records
    params: {}
- name: references.from
  endpoint:
    path: /rules/references/from
    method: GET
    data_selector: rules
    params: {}
- name: references.qualification
  endpoint:
    path: /rules/references/qualification
    method: GET
    data_selector: rules
    params: {}
- name: references.consistent
  endpoint:
    path: /rules/references/consistent
    method: GET
    data_selector: rules
    params: {}
- name: references.keywords
  endpoint:
    path: /rules/references/keywords
    method: GET
    data_selector: rules
    params: {}
- name: references.special_chars
  endpoint:
    path: /rules/references/special_chars
    method: GET
    data_selector: rules
    params: {}
- name: references.quoting
  endpoint:
    path: /rules/references/quoting
    method: GET
    data_selector: rules
    params: {}
- name: references.from
  endpoint:
    path: /rule/references/from
    method: GET
    data_selector: records
- name: references.qualification
  endpoint:
    path: /rule/references/qualification
    method: GET
    data_selector: records
- name: references.consistent
  endpoint:
    path: /rule/references/consistent
    method: GET
    data_selector: records
- name: references.keywords
  endpoint:
    path: /rule/references/keywords
    method: GET
    data_selector: records
- name: references.special_chars
  endpoint:
    path: /rule/references/special_chars
    method: GET
    data_selector: records
- name: references.quoting
  endpoint:
    path: /rule/references/quoting
    method: GET
    data_selector: records
- name: structure.else_null
  endpoint:
    path: /rules/structure/else_null
    method: GET
- name: structure.simple_case
  endpoint:
    path: /rules/structure/simple_case
    method: GET
- name: structure.unused_cte
  endpoint:
    path: /rules/structure/unused_cte
    method: GET
- name: structure.nested_case
  endpoint:
    path: /rules/structure/nested_case
    method: GET
- name: structure.subquery
  endpoint:
    path: /rules/structure/subquery
    method: GET
- name: structure.column_order
  endpoint:
    path: /rules/structure/column_order
    method: GET
- name: structure.using
  endpoint:
    path: /rules/structure/using
    method: GET
- name: structure.distinct
  endpoint:
    path: /rules/structure/distinct
    method: GET
- name: structure.join_condition_order
  endpoint:
    path: /rules/structure/join_condition_order
    method: GET
- name: tsql.sp_prefix
  endpoint:
    path: /rules/tsql/sp_prefix
    method: GET
- name: structure.else_null
  endpoint:
    path: /rule/structure.else_null
    method: GET
- name: structure.simple_case
  endpoint:
    path: /rule/structure.simple_case
    method: GET
- name: structure.unused_cte
  endpoint:
    path: /rule/structure.unused_cte
    method: GET
- name: structure.nested_case
  endpoint:
    path: /rule/structure.nested_case
    method: GET
- name: structure.subquery
  endpoint:
    path: /rule/structure.subquery
    method: GET
- name: structure.column_order
  endpoint:
    path: /rule/structure.column_order
    method: GET
- name: structure.using
  endpoint:
    path: /rule/structure.using
    method: GET
- name: structure.distinct
  endpoint:
    path: /rule/structure.distinct
    method: GET
- name: structure.join_condition_order
  endpoint:
    path: /rule/structure.join_condition_order
    method: GET
- name: tsql.sp_prefix
  endpoint:
    path: /rule/tsql.sp_prefix
    method: GET
- name: ANSI
  endpoint:
    path: /dialects/ansi
    method: GET
- name: Athena
  endpoint:
    path: /dialects/athena
    method: GET
- name: BigQuery
  endpoint:
    path: /dialects/bigquery
    method: GET
- name: ClickHouse
  endpoint:
    path: /dialects/clickhouse
    method: GET
- name: Databricks
  endpoint:
    path: /dialects/databricks
    method: GET
- name: Db2
  endpoint:
    path: /dialects/db2
    method: GET
- name: DuckDB
  endpoint:
    path: /dialects/duckdb
    method: GET
- name: Exasol
  endpoint:
    path: /dialects/exasol
    method: GET
- name: Greenplum
  endpoint:
    path: /dialects/greenplum
    method: GET
- name: Hive
  endpoint:
    path: /dialects/hive
    method: GET
- name: Materialize
  endpoint:
    path: /dialects/materialize
    method: GET
- name: MySQL
  endpoint:
    path: /dialects/mysql
    method: GET
- name: Oracle
  endpoint:
    path: /dialects/oracle
    method: GET
- name: PostgreSQL
  endpoint:
    path: /dialects/postgresql
    method: GET
- name: Redshift
  endpoint:
    path: /dialects/redshift
    method: GET
- name: Snowflake
  endpoint:
    path: /dialects/snowflake
    method: GET
- name: SOQL
  endpoint:
    path: /dialects/soql
    method: GET
- name: SparkSQL
  endpoint:
    path: /dialects/sparksql
    method: GET
- name: SQLite
  endpoint:
    path: /dialects/sqlite
    method: GET
- name: T-SQL
  endpoint:
    path: /dialects/t-sql
    method: GET
- name: Teradata
  endpoint:
    path: /dialects/teradata
    method: GET
- name: Trino
  endpoint:
    path: /dialects/trino
    method: GET
- name: Vertica
  endpoint:
    path: /dialects/vertica
    method: GET
- name: ANSI
  endpoint:
    path: /dialects/ansi
    method: GET
- name: Athena
  endpoint:
    path: /dialects/athena
    method: GET
- name: BigQuery
  endpoint:
    path: /dialects/bigquery
    method: GET
- name: ClickHouse
  endpoint:
    path: /dialects/clickhouse
    method: GET
- name: Databricks
  endpoint:
    path: /dialects/databricks
    method: GET
- name: Db2
  endpoint:
    path: /dialects/db2
    method: GET
- name: DuckDB
  endpoint:
    path: /dialects/duckdb
    method: GET
- name: Exasol
  endpoint:
    path: /dialects/exasol
    method: GET
- name: Greenplum
  endpoint:
    path: /dialects/greenplum
    method: GET
- name: Hive
  endpoint:
    path: /dialects/hive
    method: GET
- name: Materialize
  endpoint:
    path: /dialects/materialize
    method: GET
- name: MySQL
  endpoint:
    path: /dialects/mysql
    method: GET
- name: Oracle
  endpoint:
    path: /dialects/oracle
    method: GET
- name: PostgreSQL
  endpoint:
    path: /dialects/postgresql
    method: GET
- name: Redshift
  endpoint:
    path: /dialects/redshift
    method: GET
- name: Snowflake
  endpoint:
    path: /dialects/snowflake
    method: GET
- name: SOQL
  endpoint:
    path: /dialects/soql
    method: GET
- name: SparkSQL
  endpoint:
    path: /dialects/sparksql
    method: GET
- name: SQLite
  endpoint:
    path: /dialects/sqlite
    method: GET
- name: T-SQL
  endpoint:
    path: /dialects/t-sql
    method: GET
- name: Teradata
  endpoint:
    path: /dialects/teradata
    method: GET
- name: Trino
  endpoint:
    path: /dialects/trino
    method: GET
- name: Vertica
  endpoint:
    path: /dialects/vertica
    method: GET
- name: sqlfluff
  endpoint:
    path: /sqlfluff
    method: GET
    data_selector: records
- name: sqlfluff
  endpoint:
    path: /sqlfluff
    method: GET
    data_selector: records
    params: {}
- name: sqlfluff
  endpoint:
    path: /sqlfluff
    method: GET
    data_selector: config
    params: {}
- name: rules
  endpoint:
    path: /rules
    method: GET
    data_selector: rules
- name: sqlfluff
  endpoint:
    path: /sqlfluff
    method: GET
    data_selector: records
- name: templater
  endpoint:
    path: /sqlfluff/templater
    method: GET
    data_selector: templating
- name: rules
  endpoint:
    path: /sqlfluff/rules
    method: GET
    data_selector: rules
- name: rules
  endpoint:
    path: /sqlfluff/rules
    method: GET
    data_selector: rules
    params: {}
- name: dialects
  endpoint:
    path: /sqlfluff/dialects
    method: GET
    data_selector: dialects
    params: {}
- name: configuration
  endpoint:
    path: /configuration
    method: GET
    data_selector: records
- name: sqlfluff
  endpoint:
    path: /sqlfluff
    method: GET
    data_selector: records
    params: {}
- name: capitalisation.keywords
  endpoint:
    params:
      capitalisation_policy: lower
- name: capitalisation.identifiers
  endpoint:
    params:
      extended_capitalisation_policy: lower
- name: capitalisation.functions
  endpoint:
    params:
      extended_capitalisation_policy: lower
- name: capitalisation.literals
  endpoint:
    params:
      capitalisation_policy: lower
- name: capitalisation.types
  endpoint:
    params:
      extended_capitalisation_policy: lower
- name: convention.not_equal
  endpoint:
    params:
      preferred_not_equal_style: c_style
- name: rules
  endpoint:
    path: /rules
    method: GET
    data_selector: records
- name: capitalisation.keywords
  endpoint:
    path: '[sqlfluff:rules:capitalisation.keywords]'
    method: SET
    data_selector: capitalisation_policy
    params: {}
- name: capitalisation.identifiers
  endpoint:
    path: '[sqlfluff:rules:capitalisation.identifiers]'
    method: SET
    data_selector: extended_capitalisation_policy
    params: {}
- name: capitalisation.functions
  endpoint:
    path: '[sqlfluff:rules:capitalisation.functions]'
    method: SET
    data_selector: extended_capitalisation_policy
    params: {}
- name: capitalisation.literals
  endpoint:
    path: '[sqlfluff:rules:capitalisation.literals]'
    method: SET
    data_selector: capitalisation_policy
    params: {}
- name: capitalisation.types
  endpoint:
    path: '[sqlfluff:rules:capitalisation.types]'
    method: SET
    data_selector: extended_capitalisation_policy
    params: {}
- name: convention.not_equal
  endpoint:
    path: '[sqlfluff:rules:convention.not_equal]'
    method: SET
    data_selector: preferred_not_equal_style
    params: {}
- name: capitalisation.keywords
  endpoint:
    params:
      capitalisation_policy: lower
- name: capitalisation.identifiers
  endpoint:
    params:
      extended_capitalisation_policy: lower
- name: capitalisation.functions
  endpoint:
    params:
      extended_capitalisation_policy: lower
- name: capitalisation.literals
  endpoint:
    params:
      capitalisation_policy: lower
- name: capitalisation.types
  endpoint:
    params:
      extended_capitalisation_policy: lower
- name: convention.not_equal
  endpoint:
    params:
      preferred_not_equal_style: c_style
- name: capitalisation.keywords
  endpoint:
    path: rules/capitalisation.keywords
    method: GET
    data_selector: capitalisation_policy
    params: {}
- name: sqlfluff
  endpoint:
    path: /sqlfluff
    method: GET
    data_selector: records
    params: {}
- name: templater
  endpoint:
    path: /templater
    method: GET
    data_selector: records
    params: {}
- name: indentation
  endpoint:
    path: /indentation
    method: GET
    data_selector: records
    params: {}
- name: rules
  endpoint:
    path: /rules
    method: GET
    data_selector: records
    params: {}
- name: sqlfluff
  endpoint:
    path: /sqlfluff
    method: GET
    data_selector: records
    params: {}
- name: templater
  endpoint:
    path: /sqlfluff
    method: GET
    data_selector: templater
    params: {}
- name: rules
  endpoint:
    path: /sqlfluff/rules
    method: GET
    data_selector: rules
    params: {}
- name: templater
  endpoint:
    path: /templater
    method: GET
    data_selector: records
- name: indentation
  endpoint:
    path: /indentation
    method: GET
    data_selector: records
- name: rules
  endpoint:
    path: /rules
    method: GET
    data_selector: records
- name: rules
  endpoint:
    path: /rules
    method: GET
    data_selector: rules
- name: templater
  endpoint:
    path: /templater
    method: GET
    data_selector: templater
- name: sqlfluff
  endpoint:
    path: /sqlfluff
    method: GET
    data_selector: records
    params: {}
- name: ReflowSequence
  endpoint:
    path: /utils/reflow/ReflowSequence
    method: GET
    data_selector: elements
- name: ReflowPoint
  endpoint:
    path: /utils/reflow/ReflowPoint
    method: GET
    data_selector: segments
- name: ReflowBlock
  endpoint:
    path: /utils/reflow/ReflowBlock
    method: GET
    data_selector: segments
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
notes:
- 'The simple API can be configured in three ways: limited keyword arguments, providing
  a path to a config file, or providing a preconfigured FluffConfig object.'
- The simple API presents only a fraction of the functionality present within the
  core SQLFluff library.
- Uses simple API with limited functionality.
- First stable release, no major changes to take advantage of a point of relative
  stability.
- Recode of rules, whitespace fixing consolidation, sqlfluff format and removal of
  support for dbt versions pre 1.1.
- Bored of not having a good SQL linter that works with whichever dialect you’re working
  with? Fluff is an extensible and modular linter designed to help you write good
  SQL and catch errors and bad SQL before it hits your database.
- Uses OAuth2 with refresh token — requires setup of connected app in api
- Some objects like Contact may return nulls in deeply nested fields
- Hanging indents have been supported in SQLFluff up to the 1.x versions, however
  they will no longer by supported from 2.0.0 onwards.
- When fixing issues with comment indentation, SQLFluff will attempt to keep comments
  in their original position but if line length concerns make this difficult, it will
  either abandon the fix, or move same line comments up and before the line they are
  currently on.
- SQLFluff supports both of the templating methods outlined above, as well as dbt
  projects, to allow you to still lint these 'dynamic' SQL files as part of your CI/CD
  pipeline.
- By setting values in the sqlfluff:indentation section of your config file you can
  control how this is parsed.
- There is a similar indented_using_on config (defaulted to True) which can be set
  to False to prevent the USING or ON clause from being indented.
- For some users, the additional line break after ON is unexpected, and this is a
  good example of an implicit indent.
- By default, SQLFluff aims to follow the most common approach to indentation.
- Core rules can also make it easier to roll out SQLFluff to a team by only needing
  to follow a ‘common sense’ subset of rules initially.
- Ignoring TMP and PRS errors can lead to incorrect sqlfluff lint and sqfluff fix
  results.
- Should the need arise, not specifying specific rules to ignore will ignore all rules
  on the given line.
- SQLFluff accepts configuration either through the command line or through configuration
  files.
- There is rough parity between the two approaches with the exception that templating
  configuration must be done via a file.
- Uses configuration files such as setup.cfg, tox.ini, pep8.ini, .sqlfluff, pyproject.toml
- Configuration can be done through command line or configuration files.
- Recommended to keep configuration file minimal for new projects.
- Common rule configurations can be set in the [sqlfluff:rules] section.
- SQLFluff does not automatically have access to the same environment used in production
  template setup.
- Throughout the templating process whitespace will still be treated rigorously, and
  this includes newlines.
- SQLFluff supports templated sections in SQL.
- Uses Jinja templater.
- Template loop tokens shouldn't dictate spacing around them.
- To use the dbt templater, you must set templater = dbt in the .sqlfluff config file
  in the directory where sqlfluff is run.
- The templater cannot be changed in .sqlfluff files in subdirectories.
- SQLFluff accepts configuration through command line or configuration files.
- Configuration files include setup.cfg, tox.ini, pep8.ini, .sqlfluff, pyproject.toml.
- In SQLFluff 0.4.0 using the dbt templater requires that all files within the root
  and child directories of the dbt project must be part of the project.
- SQLFluff supports macros to enable it to parse templated sql without it being a
  blocker.
- Whitespace will be treated rigorously, including newlines.
- The config file should act as a form of documentation for your team.
- We do not recommend that users copy this whole config as the starter config file
  for their project.
- Uses SQLFluff for SQL linting and formatting.
- SQLFluff has a tighter integration with dbt through the dbt templater
- We do not recommend that users copy this whole config as the starter config file
  for their project
- The config file should act as a form of documentation for your team
- Recommended to keep configuration file fairly minimal.
- Use nesting of configuration files for efficient configuration.
- Configuration files are read in order with later files overwriting earlier values.
- SQLFluff supports multiple templating engines including Jinja, Placeholder, and
  Python.
- If you have not overridden a config setting in your project, we can easily update
  the default config to match your expected behaviour over time.
- Uses Jinja templater for rendering SQL.
- Disabled by default for all dialects unless explicitly enabled.
- Uses a templater configuration to define SQL formatting and linting rules.
- Only define config settings where they differ from the defaults.
- SQLFluff has now a tighter integration with dbt through the 'dbt' templater.
- Special characters in identifiers are not allowed.
- Unquoted identifiers policy is set to all.
- Quoted identifiers policy is set to all.
- Spaces in identifiers are not allowed.
- Additional allowed characters are set to None.
- The default configuration for capitalisation rules is 'consistent' which will auto-detect
  the setting from the rest of the file.
- This release makes a couple of potentially breaking changes
- It drops support for python 3.7, which reached end of life in June 2023
- The default annotation_level set by the --annotation-level option on the sqlfluff
  lint command has been changed from notice to warning
- By default, allow subqueries in from clauses, but not join clauses
- Drops support for python 3.7, which reached end of life in June 2023.
- Migrates to pyproject.toml rather than setup.cfg as the python packaging configuration
  file.
- Default annotation_level set by the --annotation-level option on the sqlfluff lint
  command has been changed from notice to warning.
- We recommend that the module in a plugin which defines all of the hook implementations
  (anything using the @hookimpl decorator) must be able to fully import before any
  rule implementations are imported.
- Each plugin can implement multiple Rules or Templaters.
- We recommend that the name of a plugin should start with “sqlfluff-” to be clear
  on the purpose of your plugin.
- 'A plugin may need to include a default configuration if its rules are configurable:
  use plugin default configurations only for that reason!'
- 'This module aims to achieve several things: Less code duplication by implementing
  reflow logic in only one place.'
- We recommend that the module in a plugin which defines all of the hook implementations
  must be able to fully import before any rule implementations are imported.
- Run `pip install -e .`, inside the plugin folder so custom rules in linting are
  included.
errors:
- '400 Bad Request: Check the SQL syntax or parameters provided.'
- '400 Bad Request: Check SQL syntax and parameters.'
- '500 Internal Server Error: Contact support for assistance.'
- 'REQUEST_LIMIT_EXCEEDED: Throttle API calls or reduce frequency'
- 'QUERY_TIMEOUT: Break down filters or add selectivity'
- '401 Unauthorized: Recheck OAuth scopes or token expiration'
- Configuration errors may occur if the required files are not found.
- 'Invalid configuration: Check the syntax of your config files.'
- 'Unsupported dialect: Ensure the dialect is supported by SQLFluff.'
auth_info:
  mentioned_objects:
  - OauthToken
  - AuthProvider
  - NamedCredential
client:
  base_url: https://api.sqlfluff.com
source_metadata: null
