resources:
- name: freeze
  endpoint:
    path: /tmuxp/cli/freeze
    method: GET
- name: workspace
  endpoint:
    path: /workspace
    method: GET
    data_selector: session_config
- name: is_workspace_file
  endpoint:
    path: tmuxp.workspace.finders.is_workspace_file
    method: GET
    data_selector: return_type
    params: {}
- name: in_dir
  endpoint:
    path: tmuxp.workspace.finders.in_dir
    method: GET
    data_selector: return_type
    params: {}
- name: in_cwd
  endpoint:
    path: tmuxp.workspace.finders.in_cwd
    method: GET
    data_selector: return_type
    params: {}
- name: get_workspace_dir
  endpoint:
    path: tmuxp.workspace.finders.get_workspace_dir
    method: GET
    data_selector: return_type
    params: {}
- name: find_workspace_file
  endpoint:
    path: tmuxp.workspace.finders.find_workspace_file
    method: GET
    data_selector: return_type
    params: {}
- name: is_pure_name
  endpoint:
    path: tmuxp.workspace.finders.is_pure_name
    method: GET
    data_selector: return_type
    params: {}
- name: freeze
  endpoint:
    path: tmuxp.workspace.freezer.freeze
    method: POST
    data_selector: workspace
    params:
      session: libtmux.Session
- name: inline
  endpoint:
    path: tmuxp.workspace.freezer.inline
    method: POST
    data_selector: workspace
    params:
      workspace_dict: dict
- name: freeze
  endpoint:
    path: /tmuxp/cli/freeze
    method: GET
- name: import_tmuxinator
  endpoint:
    path: /import_tmuxinator
    method: POST
    data_selector: dict
- name: import_teamocil
  endpoint:
    path: /import_teamocil
    method: POST
    data_selector: dict
- name: workspace_files
  endpoint:
    path: /cli/load
    method: GET
- name: workspace
  endpoint:
    path: /tmuxp/workspace/builder
    method: GET
    data_selector: session_config
    params: {}
- name: TmuxpException
  endpoint:
    path: tmuxp.exc.TmuxpException
    method: GET
    data_selector: null
    params: {}
- name: WorkspaceError
  endpoint:
    path: tmuxp.exc.WorkspaceError
    method: GET
    data_selector: null
    params: {}
- name: SessionNotFound
  endpoint:
    path: tmuxp.exc.SessionNotFound
    method: GET
    data_selector: null
    params: {}
- name: WindowNotFound
  endpoint:
    path: tmuxp.exc.WindowNotFound
    method: GET
    data_selector: null
    params: {}
- name: PaneNotFound
  endpoint:
    path: tmuxp.exc.PaneNotFound
    method: GET
    data_selector: null
    params: {}
- name: EmptyWorkspaceException
  endpoint:
    path: tmuxp.exc.EmptyWorkspaceException
    method: GET
    data_selector: null
    params: {}
- name: SessionMissingWorkspaceException
  endpoint:
    path: tmuxp.exc.SessionMissingWorkspaceException
    method: GET
    data_selector: null
    params: {}
- name: ActiveSessionMissingWorkspaceException
  endpoint:
    path: tmuxp.exc.ActiveSessionMissingWorkspaceException
    method: GET
    data_selector: null
    params: {}
- name: TmuxpPluginException
  endpoint:
    path: tmuxp.exc.TmuxpPluginException
    method: GET
    data_selector: null
    params: {}
- name: BeforeLoadScriptNotExists
  endpoint:
    path: tmuxp.exc.BeforeLoadScriptNotExists
    method: GET
    data_selector: null
    params: {}
- name: BeforeLoadScriptError
  endpoint:
    path: tmuxp.exc.BeforeLoadScriptError
    method: GET
    data_selector: null
    params: {}
- name: is_workspace_file
  endpoint:
    path: tmuxp.workspace.finders.is_workspace_file
    method: GET
    data_selector: return
    params: {}
- name: in_dir
  endpoint:
    path: tmuxp.workspace.finders.in_dir
    method: GET
    data_selector: return
    params: {}
- name: in_cwd
  endpoint:
    path: tmuxp.workspace.finders.in_cwd
    method: GET
    data_selector: return
    params: {}
- name: get_workspace_dir
  endpoint:
    path: tmuxp.workspace.finders.get_workspace_dir
    method: GET
    data_selector: return
    params: {}
- name: find_workspace_file
  endpoint:
    path: tmuxp.workspace.finders.find_workspace_file
    method: GET
    data_selector: return
    params: {}
- name: is_pure_name
  endpoint:
    path: tmuxp.workspace.finders.is_pure_name
    method: GET
    data_selector: return
    params: {}
- name: plugin
  endpoint:
    path: /plugin
    method: GET
    data_selector: records
- name: SchemaValidationError
  endpoint:
    path: tmuxp.workspace.validation.SchemaValidationError
    method: GET
- name: SessionNameMissingValidationError
  endpoint:
    path: tmuxp.workspace.validation.SessionNameMissingValidationError
    method: GET
- name: WindowListMissingValidationError
  endpoint:
    path: tmuxp.workspace.validation.WindowListMissingValidationError
    method: GET
- name: WindowNameMissingValidationError
  endpoint:
    path: tmuxp.workspace.validation.WindowNameMissingValidationError
    method: GET
- name: InvalidPluginsValidationError
  endpoint:
    path: tmuxp.workspace.validation.InvalidPluginsValidationError
    method: GET
- name: session
  endpoint:
    path: /session
    method: GET
    data_selector: session_name
    params: {}
- name: TmuxpException
  endpoint:
    path: tmuxp.exc.TmuxpException
    method: GET
    data_selector: records
- name: WorkspaceError
  endpoint:
    path: tmuxp.exc.WorkspaceError
    method: GET
    data_selector: records
- name: SessionNotFound
  endpoint:
    path: tmuxp.exc.SessionNotFound
    method: GET
    data_selector: records
- name: WindowNotFound
  endpoint:
    path: tmuxp.exc.WindowNotFound
    method: GET
    data_selector: records
- name: PaneNotFound
  endpoint:
    path: tmuxp.exc.PaneNotFound
    method: GET
    data_selector: records
- name: EmptyWorkspaceException
  endpoint:
    path: tmuxp.exc.EmptyWorkspaceException
    method: GET
    data_selector: records
- name: SessionMissingWorkspaceException
  endpoint:
    path: tmuxp.exc.SessionMissingWorkspaceException
    method: GET
    data_selector: records
- name: ActiveSessionMissingWorkspaceException
  endpoint:
    path: tmuxp.exc.ActiveSessionMissingWorkspaceException
    method: GET
    data_selector: records
- name: TmuxpPluginException
  endpoint:
    path: tmuxp.exc.TmuxpPluginException
    method: GET
    data_selector: records
- name: BeforeLoadScriptNotExists
  endpoint:
    path: tmuxp.exc.BeforeLoadScriptNotExists
    method: GET
    data_selector: records
- name: BeforeLoadScriptError
  endpoint:
    path: tmuxp.exc.BeforeLoadScriptError
    method: GET
    data_selector: records
- name: log
  endpoint:
    path: /tmuxp/log
    method: GET
    data_selector: log_records
- name: tmux_session
  endpoint:
    path: /api/sessions
    method: GET
    data_selector: sessions
- name: tmux_window
  endpoint:
    path: /api/windows
    method: GET
    data_selector: windows
- name: tmux_pane
  endpoint:
    path: /api/panes
    method: GET
    data_selector: panes
- name: session
  endpoint:
    path: /session
    method: GET
- name: window
  endpoint:
    path: /window
    method: GET
- name: pane
  endpoint:
    path: /pane
    method: GET
- name: pane
  endpoint:
    path: /
    method: GET
    data_selector: panes
    params: {}
notes:
- Uses OAuth2 with refresh token â€” requires setup of connected app in api
- Some objects like Contact may return nulls in deeply nested fields
- Builds are done on master and pull requests and can be viewed on the gh build site
- Internal APIs are not covered by version policies. They can break or be removed
  between minor versions!
- Minimum version of tmux required to run libtmux is 1.8
- Minimum version of libtmux required to run libtmux is 0.8.3
- Minimum version of tmuxp required to use plugins is 1.6.0
- Maintenance only, no bug fixes or new features
- All panes have the `remain-on-exit` setting on.
- When you exit out of the shell or application, the panes will remain.
- Use tmux command `:kill-pane` to remove the pane.
- Use tmux command `:respawn-pane` to restart the shell in the pane.
- Use <Escape> and then `:q!` to get out of this vim window.
- tmux is packaged on most Linux and BSD systems.
- For the freshest results on how to get tmux installed on your system, 'How to install
  tmux on <my distro>' will do.
- Minimum version of tmux required to run libtmux is '1.8'
- Minimum version of libtmux required to run libtmux is '0.8.3'
- Minimum version of tmuxp required to use plugins is '1.6.0'
- Tmux is geared for developers and admins who interact regularly with CLI.
- Tmux can be configured via a tmux(1) configuration at ~/.tmux.conf.
errors:
- 'SessionNameMissingValidationError: Tmuxp configuration error for session name missing.'
- 'WindowListMissingValidationError: Tmuxp configuration error for window list missing.'
- 'WindowNameMissingValidationError: Tmuxp configuration error for missing window_name.'
- 'InvalidPluginsValidationError: Tmuxp configuration error for invalid plugins.'
auth_info:
  mentioned_objects: []
client:
  base_url: https://github.com/tmux-python/tmuxp
  headers:
    Accept: application/json
source_metadata: null
