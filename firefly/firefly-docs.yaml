resources:
- name: login
  endpoint:
    path: /v2/login
    method: POST
    data_selector: response
    params: {}
- name: cloud_assets
  endpoint:
    path: /api/v1/cloud_assets
    method: GET
    data_selector: assets
- name: cloud_resources
  endpoint:
    path: /api/cloud_resources
    method: GET
    data_selector: resources
- name: policy
  endpoint:
    path: /api/v1/policy
    method: GET
- name: compliance
  endpoint:
    path: /api/v1/compliance
    method: GET
- name: dashboard
  endpoint:
    path: /services/data/vXX.X/sobjects/Dashboard
    method: GET
    data_selector: records
- name: inventory
  endpoint:
    path: /services/data/vXX.X/sobjects/Inventory
    method: GET
    data_selector: records
- name: inventory
  endpoint:
    path: /api/inventory
    method: GET
    data_selector: assets
- name: assets
  endpoint:
    path: /api/assets
    method: GET
    data_selector: inventory
    params: {}
- name: Drifted assets
  endpoint:
    path: /drifted-assets
    method: GET
    data_selector: assets
    params: {}
- name: Excluded Drifts
  endpoint:
    path: /excluded-drifts
    method: GET
    data_selector: rules
    params: {}
- name: IaC-Ignore Rules
  endpoint:
    path: /detailed-guides/cloud-asset-inventory/creating-iac-ignore-rules
    method: GET
    data_selector: rules
    params: {}
- name: governance
  endpoint:
    path: /governance
    method: GET
- name: policies
  endpoint:
    path: /api/policies
    method: GET
    data_selector: policies
    params: {}
- name: violations
  endpoint:
    path: /api/violations
    method: GET
    data_selector: violations
    params: {}
- name: policy_violations
  endpoint:
    path: /governance/policy_violations
    method: GET
    data_selector: violations
- name: projects
  endpoint:
    path: /api/projects
    method: GET
    data_selector: projects
    params: {}
- name: workflows
  endpoint:
    path: /api/v1/workflows
    method: GET
    data_selector: workflows
    params: {}
- name: guardrails
  endpoint:
    path: /api/v1/guardrails
    method: GET
    data_selector: guardrails
    params: {}
- name: projects
  endpoint:
    path: /api/v1/projects
    method: GET
    data_selector: projects
    params: {}
- name: projects
  endpoint:
    path: /projects
    method: POST
    data_selector: project
    params: {}
- name: workspaces
  endpoint:
    path: /workspaces
    method: POST
    data_selector: workspace
- name: project_level_variables
  endpoint:
    path: /api/project_level_variables
    method: GET
    data_selector: variables
    params: {}
- name: project_assigned_variable_sets
  endpoint:
    path: /api/project_assigned_variable_sets
    method: GET
    data_selector: variable_sets
    params: {}
- name: guardrail_rules
  endpoint:
    path: /api/v1/guardrail_rules
    method: POST
    data_selector: rules
    params: {}
- name: guardrail_rule
  endpoint:
    path: /api/guardrail/rules
    method: POST
    data_selector: rules
    params: {}
- name: workspaces
  endpoint:
    path: /api/v1/workspaces
    method: GET
    data_selector: data
    params: {}
- name: workspace_deployment
  endpoint:
    path: /workflows/deploy
    method: POST
    data_selector: deployment_results
    params: {}
- name: workspace_deployment
  endpoint:
    path: /deploy/workspace
    method: POST
    data_selector: deployment_result
    params: {}
- name: ClickOps Events
  endpoint:
    path: /event-center/clickops
    method: GET
    data_selector: events
- name: CLI/SDK Events
  endpoint:
    path: /event-center/cli-sdk
    method: GET
    data_selector: events
- name: Mutation Events
  endpoint:
    path: /event-center/mutation
    method: GET
    data_selector: events
- name: deleted_assets
  endpoint:
    path: /inventory/deleted
    method: GET
    data_selector: assets
- name: mutation_logs
  endpoint:
    path: /event_center/mutations
    method: GET
    data_selector: mutations
- name: codification
  endpoint:
    path: /api/codification
    method: POST
    data_selector: data
    params: {}
- name: self_service_flows
  endpoint:
    path: /self-service/flows
    method: GET
    data_selector: flows
    params: {}
- name: drift_detection
  endpoint:
    path: /notifications/drift_detection
    method: POST
    data_selector: notification
    params: {}
- name: policy_violation
  endpoint:
    path: /notifications/policy_violation
    method: POST
    data_selector: notification
    params: {}
- name: clickops_event
  endpoint:
    path: /notifications/clickops_event
    method: POST
    data_selector: notification
    params: {}
- name: workspace_run
  endpoint:
    path: /notifications/workspace_run
    method: POST
    data_selector: notification
    params: {}
- name: workspace_guardrail_violation
  endpoint:
    path: /notifications/workspace_guardrail_violation
    method: POST
    data_selector: notification
    params: {}
- name: SSO Application
  endpoint:
    path: /sso/application
    method: POST
    data_selector: application
    params: {}
- name: Drift Detection
  endpoint:
    path: /notifications/drift-detection
    method: POST
    data_selector: notification
    params: {}
- name: Policy Violation
  endpoint:
    path: /notifications/policy-violation
    method: POST
    data_selector: notification
    params: {}
- name: ClickOps Event
  endpoint:
    path: /notifications/clickops-event
    method: POST
    data_selector: notification
    params: {}
- name: Workspace Run
  endpoint:
    path: /notifications/workspace-run
    method: POST
    data_selector: notification
    params: {}
- name: Workspace Guardrail Violation
  endpoint:
    path: /notifications/workspace-guardrail-violation
    method: POST
    data_selector: notification
    params: {}
- name: AWS
  endpoint:
    path: /integrations/data-sources/aws
    method: GET
- name: Azure
  endpoint:
    path: /integrations/data-sources/azure
    method: GET
- name: Google Cloud
  endpoint:
    path: /integrations/data-sources/google-cloud
    method: GET
- name: Oracle Cloud Infrastructure
  endpoint:
    path: /integrations/data-sources/oracle-cloud-infrastructure
    method: GET
- name: Datadog
  endpoint:
    path: /integrations/data-sources/datadog
    method: GET
- name: New Relic
  endpoint:
    path: /integrations/data-sources/new-relic
    method: GET
- name: Okta
  endpoint:
    path: /integrations/data-sources/okta
    method: GET
- name: HashiCorp Vault
  endpoint:
    path: /integrations/data-sources/hashicorp-vault
    method: GET
- name: Kubernetes
  endpoint:
    path: /integrations/data-sources/kubernetes
    method: GET
- name: Cloudflare
  endpoint:
    path: /integrations/data-sources/cloudflare
    method: GET
- name: MongoDB Atlas
  endpoint:
    path: /integrations/data-sources/mongodb-atlas
    method: GET
- name: PagerDuty
  endpoint:
    path: /integrations/data-sources/pagerduty
    method: GET
- name: NS1
  endpoint:
    path: /integrations/data-sources/ns1
    method: GET
- name: GitHub
  endpoint:
    path: /integrations/data-sources/github
    method: GET
- name: Akamai
  endpoint:
    path: /integrations/data-sources/akamai
    method: GET
- name: AWS
  endpoint:
    path: /integrations/data-sources/aws
    method: GET
- name: Azure
  endpoint:
    path: /integrations/data-sources/azure
    method: GET
- name: Google Cloud
  endpoint:
    path: /integrations/data-sources/google-cloud
    method: GET
- name: Kubernetes
  endpoint:
    path: /integrations/data-sources/kubernetes
    method: GET
- name: Oracle Cloud Infrastructure
  endpoint:
    path: /integrations/data-sources/oracle-cloud-infrastructure
    method: GET
- name: Datadog
  endpoint:
    path: /integrations/data-sources/datadog
    method: GET
- name: New Relic
  endpoint:
    path: /integrations/data-sources/new-relic
    method: GET
- name: PagerDuty
  endpoint:
    path: /integrations/data-sources/pagerduty
    method: GET
- name: Okta
  endpoint:
    path: /integrations/data-sources/okta
    method: GET
- name: Hashicorp Vault
  endpoint:
    path: /integrations/data-sources/hashicorp-vault
    method: GET
- name: Cloudflare
  endpoint:
    path: /integrations/data-sources/cloudflare
    method: GET
- name: Akamai
  endpoint:
    path: /integrations/data-sources/akamai
    method: GET
- name: NS1
  endpoint:
    path: /integrations/data-sources/ns1
    method: GET
- name: MongoDB Atlas
  endpoint:
    path: /integrations/data-sources/mongodb-atlas
    method: GET
- name: cluster_resources
  endpoint:
    path: /api/v1/namespaces/firefly
    method: GET
    data_selector: resources
    params: {}
- name: cloud_resources
  endpoint:
    path: /v1/projects/{project_id}/locations/-/resources
    method: GET
    data_selector: resources
    params: {}
- name: akamai_assets
  endpoint:
    path: /path/to/akamai/assets
    method: GET
    data_selector: assets
- name: kubernetes_cluster
  endpoint:
    path: /kubernetes/cluster
    method: POST
    data_selector: resources
    params:
      incremental: updated_at
- name: applications
  endpoint:
    path: /api/v1/apps
    method: GET
    data_selector: applications
- name: groups
  endpoint:
    path: /api/v1/groups
    method: GET
    data_selector: groups
- name: users
  endpoint:
    path: /api/v1/users
    method: GET
    data_selector: users
- name: repositories
  endpoint:
    path: /repos
    method: GET
- name: organizations
  endpoint:
    path: /orgs
    method: GET
- name: Google Cloud Storage
  endpoint:
    path: /integrations/iac-remote-state/google-cloud-storage
    method: GET
- name: Terraform Cloud
  endpoint:
    path: /integrations/iac-remote-state/terraform-cloud
    method: GET
- name: env0
  endpoint:
    path: /integrations/iac-remote-state/env0
    method: GET
- name: HashiCorp Consul
  endpoint:
    path: /integrations/iac-remote-state/hashicorp-consul
    method: GET
- name: Firefly States Redactor
  endpoint:
    path: /integrations/iac-remote-state/states-redactor
    method: GET
- name: google_cloud_storage
  endpoint:
    path: /integrations/iac-remote-state/google-cloud-storage
    method: GET
- name: terraform_cloud
  endpoint:
    path: /integrations/iac-remote-state/terraform-cloud
    method: GET
- name: env0
  endpoint:
    path: /integrations/iac-remote-state/env0
    method: GET
- name: hashicorp_consul
  endpoint:
    path: /integrations/iac-remote-state/hashicorp-consul
    method: GET
- name: firefly_states_redactor
  endpoint:
    path: /integrations/iac-remote-state/states-redactor
    method: GET
- name: redactor
  endpoint:
    path: /api/redactor
    method: POST
    data_selector: data
- name: GitHub
  endpoint:
    path: /integrations/version-control/github
    method: GET
- name: GitLab
  endpoint:
    path: /integrations/version-control/gitlab
    method: GET
- name: Bitbucket
  endpoint:
    path: /integrations/version-control/bitbucket
    method: GET
- name: Azure DevOps
  endpoint:
    path: /integrations/version-control/azuredevops
    method: GET
- name: Terraform Cloud
  endpoint:
    path: /terraform/cloud
    method: GET
- name: S3 Bucket
  endpoint:
    path: /s3/bucket
    method: GET
- name: GitHub
  endpoint:
    path: /integrations/version-control/github
    method: GET
- name: GitLab
  endpoint:
    path: /integrations/version-control/gitlab
    method: GET
- name: Bitbucket
  endpoint:
    path: /integrations/version-control/bitbucket
    method: GET
- name: Azure DevOps
  endpoint:
    path: /integrations/version-control/azuredevops
    method: GET
- name: repositories
  endpoint:
    path: /services/data/vXX.X/repositories
    method: GET
    data_selector: records
- name: Slack
  endpoint:
    path: /integrations/notifications/slack
    method: GET
- name: Microsoft Teams
  endpoint:
    path: /integrations/notifications/microsoft-teams
    method: GET
- name: Google Chat
  endpoint:
    path: /integrations/notifications/google-chat
    method: GET
- name: Webex
  endpoint:
    path: /integrations/notifications/webex
    method: GET
- name: PagerDuty
  endpoint:
    path: /integrations/notifications/pagerduty
    method: GET
- name: Opsgenie
  endpoint:
    path: /integrations/notifications/opsgenie
    method: GET
- name: Torq
  endpoint:
    path: /integrations/notifications/torq
    method: GET
- name: Webhook
  endpoint:
    path: /integrations/notifications/webhook
    method: GET
- name: slack
  endpoint:
    path: /integrations/notifications/slack
    method: GET
- name: microsoft_teams
  endpoint:
    path: /integrations/notifications/microsoft-teams
    method: GET
- name: google_chat
  endpoint:
    path: /integrations/notifications/google-chat
    method: GET
- name: webex
  endpoint:
    path: /integrations/notifications/webex
    method: GET
- name: pagerduty
  endpoint:
    path: /integrations/notifications/pagerduty
    method: GET
- name: opsgenie
  endpoint:
    path: /integrations/notifications/opsgenie
    method: GET
- name: torq
  endpoint:
    path: /integrations/notifications/torq
    method: GET
- name: webhook
  endpoint:
    path: /integrations/notifications/webhook
    method: GET
- name: Slack App
  endpoint:
    path: /integrations/notifications/slack#slack-app
    method: POST
- name: Slack Webhook
  endpoint:
    path: /integrations/notifications/slack#slack-webhook
    method: POST
- name: notifications
  endpoint:
    path: /integrations/notifications/microsoft-teams
    method: POST
    data_selector: notifications
    params: {}
- name: Teams Integration
  endpoint:
    path: /integrations/notifications/microsoft-teams
    method: POST
    data_selector: notifications
    params: {}
- name: notifications
  endpoint:
    path: /integrations/notifications/pagerduty
    method: POST
- name: alert_management
  endpoint:
    path: /v2/alerts
    method: POST
- name: alert_management
  endpoint:
    path: /api/v2/alerts
    method: POST
- name: incident_response
  endpoint:
    path: /api/v2/incidents
    method: POST
- name: team_notifications
  endpoint:
    path: /api/v2/teams
    method: POST
- name: Torq Integration
  endpoint:
    path: /integrations/notifications/torq
    method: POST
    data_selector: response
    params: {}
- name: notifications
  endpoint:
    path: /integrations/notifications/google-chat
    method: POST
    data_selector: alerts
- name: webhook_payload
  endpoint:
    path: /webhook
    method: POST
    data_selector: samples
- name: Jira
  endpoint:
    path: /integrations/project-management/jira
    method: GET
- name: ServiceNow
  endpoint:
    path: /integrations/project-management/servicenow
    method: GET
- name: jira_issues
  endpoint:
    path: /rest/api/2/issue
    method: POST
- name: notifications
  endpoint:
    path: /integrations/notifications/google-chat
    method: POST
- name: webhook_payload
  endpoint:
    path: /webhook
    method: POST
    data_selector: samples
- name: FireFly CMDB Inventory
  endpoint:
    path: /api/x_w4f_firefly_conn_firefly_cmdb_inventory
    method: GET
    data_selector: records
- name: Firefly Governance Policy
  endpoint:
    path: /api/x_w4f_firefly_conn_firefly_governance_policy
    method: GET
    data_selector: records
- name: Jira
  endpoint:
    path: /integrations/project-management/jira
    method: GET
- name: ServiceNow
  endpoint:
    path: /integrations/project-management/servicenow
    method: GET
- name: issues
  endpoint:
    path: /rest/api/3/issue
    method: POST
- name: firefly_workflows
  endpoint:
    path: /workflows
    method: POST
    data_selector: data
    params: {}
- name: FireFly CMDB Inventory
  endpoint:
    path: /api/x_w4f_firefly_conn_firefly_cmdb_inventory
    method: GET
    data_selector: records
    params: {}
- name: Firefly Governance Policy
  endpoint:
    path: /api/x_w4f_firefly_conn_firefly_governance_policy
    method: GET
    data_selector: records
    params: {}
- name: post-apply
  endpoint:
    path: /post-apply
    method: POST
    data_selector: apply_log
    params:
      workspace: <YOUR_UNIQUE_WORKSPACE_NAME>
- name: post-plan
  endpoint:
    path: /post-plan
    method: POST
    data_selector: plan_output
    params:
      workspace: <YOUR_UNIQUE_WORKSPACE_NAME>
- name: assets
  endpoint:
    path: /api/assets
    method: GET
- name: cloud_accounts
  endpoint:
    path: /api/cloud_accounts
    method: GET
- name: assets
  endpoint:
    path: /assets
    method: GET
    data_selector: assets
- name: workspaces
  endpoint:
    path: /v2/workspaces/search
    method: POST
    data_selector: all
    params:
      page: 0
      pageSize: 25
- name: workspace
  endpoint:
    path: /v2/workspaces/{workspaceId}
    method: DELETE
    data_selector: status
- name: workspace_labels
  endpoint:
    path: /v2/workspaces/{workspaceId}/labels
    method: PUT
    data_selector: id
- name: workspace_runs
  endpoint:
    path: /v2/workspaces/{workspaceId}/runs/search
    method: POST
    data_selector: all
    params:
      page: 0
      pageSize: 25
- name: run_resources
  endpoint:
    path: /v2/workspaces/{workspaceId}/runs/{runId}/resources/search
    method: POST
    data_selector: one
    params:
      page: 0
      pageSize: 25
- name: run_changed_code
  endpoint:
    path: /v2/workspaces/{workspaceId}/runs/{runId}/changed-files-code/search
    method: POST
    data_selector: object
    params:
      page: 0
      pageSize: 25
- name: workspaces
  endpoint:
    path: /v2/workspaces/search
    method: POST
    data_selector: all
    params:
      page: 0
      pageSize: 25
- name: delete_workspace
  endpoint:
    path: /v2/workspaces/{workspaceId}
    method: DELETE
    data_selector: status
- name: update_workspace_labels
  endpoint:
    path: /v2/workspaces/{workspaceId}/labels
    method: PUT
    data_selector: id
- name: workspace_runs
  endpoint:
    path: /v2/workspaces/{workspaceId}/runs/search
    method: POST
    data_selector: all
    params:
      page: 0
      pageSize: 25
- name: run_resources
  endpoint:
    path: /v2/workspaces/{workspaceId}/runs/{runId}/resources/search
    method: POST
    data_selector: one
    params:
      page: 0
      pageSize: 25
- name: run_changed_code
  endpoint:
    path: /v2/workspaces/{workspaceId}/runs/{runId}/changed-files-code/search
    method: POST
    data_selector: object
    params:
      page: 0
      pageSize: 25
- name: guardrails_search
  endpoint:
    path: /v2/guardrails/search
    method: POST
    data_selector: object
    params: {}
- name: create_guardrail
  endpoint:
    path: /v2/guardrails
    method: POST
    data_selector: object
    params: {}
- name: update_guardrail
  endpoint:
    path: /v2/guardrails/{ruleId}
    method: PATCH
    data_selector: object
    params: {}
- name: delete_guardrail
  endpoint:
    path: /v2/guardrails/{ruleId}
    method: DELETE
    data_selector: object
    params: {}
- name: create_project
  endpoint:
    path: /v2/runners/projects
    method: POST
    data_selector: object
    params: {}
- name: get_project
  endpoint:
    path: /v2/runners/projects/{projectId}
    method: GET
    data_selector: object
    params: {}
- name: update_project
  endpoint:
    path: /v2/runners/projects/{projectId}
    method: PATCH
    data_selector: object
    params: {}
- name: delete_project
  endpoint:
    path: /v2/runners/projects/{projectId}
    method: DELETE
    data_selector: object
    params: {}
- name: list_projects_flat
  endpoint:
    path: /v2/runners/projects/list
    method: GET
    data_selector: object
    params: {}
- name: list_projects_tree
  endpoint:
    path: /v2/runners/projects/tree
    method: GET
    data_selector: object
    params: {}
- name: guardrail_rules
  endpoint:
    path: /v2/guardrails/search
    method: POST
    data_selector: application/json
- name: create_guardrail_rule
  endpoint:
    path: /v2/guardrails
    method: POST
    data_selector: application/json
- name: update_guardrail_rule
  endpoint:
    path: /v2/guardrails/{ruleId}
    method: PATCH
    data_selector: application/json
- name: delete_guardrail_rule
  endpoint:
    path: /v2/guardrails/{ruleId}
    method: DELETE
    data_selector: application/json
- name: create_project
  endpoint:
    path: /v2/runners/projects
    method: POST
    data_selector: application/json
- name: get_project
  endpoint:
    path: /v2/runners/projects/{projectId}
    method: GET
    data_selector: application/json
- name: update_project
  endpoint:
    path: /v2/runners/projects/{projectId}
    method: PATCH
    data_selector: application/json
- name: delete_project
  endpoint:
    path: /v2/runners/projects/{projectId}
    method: DELETE
    data_selector: application/json
- name: list_projects_flat
  endpoint:
    path: /v2/runners/projects/list
    method: GET
    data_selector: application/json
- name: list_projects_tree
  endpoint:
    path: /v2/runners/projects/tree
    method: GET
    data_selector: application/json
- name: project_members
  endpoint:
    path: /v2/runners/projects/{projectId}/members
    method: GET
    data_selector: object[]
- name: add_project_members
  endpoint:
    path: /v2/runners/projects/{projectId}/members
    method: POST
    data_selector: object[]
- name: remove_project_members
  endpoint:
    path: /v2/runners/projects/{projectId}/members
    method: DELETE
    data_selector: No content
- name: project_workspaces
  endpoint:
    path: /v2/runners/projects/{projectId}/workspaces
    method: GET
    data_selector: object[]
- name: project_labels
  endpoint:
    path: /v2/runners/projects/labels
    method: GET
    data_selector: string[]
- name: project_variables
  endpoint:
    path: /v2/runners/variables/projects/{projectId}
    method: GET
    data_selector: object[]
- name: upsert_project_variables
  endpoint:
    path: /v2/runners/variables/projects/{projectId}/variables
    method: POST
    data_selector: object[]
- name: delete_project_variables
  endpoint:
    path: /v2/runners/variables/projects/{projectId}/variables
    method: DELETE
    data_selector: No content
- name: workspace_variables
  endpoint:
    path: /v2/runners/variables/workspaces/{workspaceId}/variables
    method: GET
    data_selector: object[]
- name: upsert_workspace_variables
  endpoint:
    path: /v2/runners/variables/workspaces/{workspaceId}/variables
    method: POST
    data_selector: object[]
- name: delete_workspace_variables
  endpoint:
    path: /v2/runners/variables/workspaces/{workspaceId}/variables
    method: DELETE
    data_selector: No content
- name: variable_sets
  endpoint:
    path: /v2/runners/variables/variable-sets
    method: GET
    data_selector: object[]
- name: create_variable_set
  endpoint:
    path: /v2/runners/variables/variable-sets
    method: POST
    data_selector: object
- name: get_variable_set
  endpoint:
    path: /v2/runners/variables/variable-sets/{variableSetId}
    method: GET
    data_selector: object
- name: update_variable_set
  endpoint:
    path: /v2/runners/variables/variable-sets/{variableSetId}
    method: PUT
    data_selector: object
- name: delete_variable_set
  endpoint:
    path: /v2/runners/variables/variable-sets/{variableSetId}
    method: DELETE
    data_selector: No content
- name: variable_set_variables
  endpoint:
    path: /v2/runners/variables/variable-sets/{variableSetId}/variables
    method: GET
    data_selector: object[]
- name: upsert_variable_set_variables
  endpoint:
    path: /v2/runners/variables/variable-sets/{variableSetId}/variables
    method: POST
    data_selector: object[]
- name: project_members
  endpoint:
    path: /v2/runners/projects/{projectId}/members
    method: GET
    data_selector: object[]
- name: add_project_members
  endpoint:
    path: /v2/runners/projects/{projectId}/members
    method: POST
    data_selector: object[]
- name: remove_project_members
  endpoint:
    path: /v2/runners/projects/{projectId}/members
    method: DELETE
    data_selector: No content
- name: project_workspaces
  endpoint:
    path: /v2/runners/projects/{projectId}/workspaces
    method: GET
    data_selector: object[]
- name: project_labels
  endpoint:
    path: /v2/runners/projects/labels
    method: GET
    data_selector: string[]
- name: project_variables
  endpoint:
    path: /v2/runners/variables/projects/{projectId}
    method: GET
    data_selector: object[]
- name: upsert_project_variables
  endpoint:
    path: /v2/runners/variables/projects/{projectId}/variables
    method: POST
    data_selector: object[]
- name: delete_project_variables
  endpoint:
    path: /v2/runners/variables/projects/{projectId}/variables
    method: DELETE
    data_selector: No content
- name: workspace_variables
  endpoint:
    path: /v2/runners/variables/workspaces/{workspaceId}/variables
    method: GET
    data_selector: object[]
- name: upsert_workspace_variables
  endpoint:
    path: /v2/runners/variables/workspaces/{workspaceId}/variables
    method: POST
    data_selector: object[]
- name: delete_workspace_variables
  endpoint:
    path: /v2/runners/variables/workspaces/{workspaceId}/variables
    method: DELETE
    data_selector: No content
- name: variable_sets
  endpoint:
    path: /v2/runners/variables/variable-sets
    method: GET
    data_selector: object[]
- name: create_variable_set
  endpoint:
    path: /v2/runners/variables/variable-sets
    method: POST
    data_selector: object
- name: get_variable_set
  endpoint:
    path: /v2/runners/variables/variable-sets/{variableSetId}
    method: GET
    data_selector: object
- name: update_variable_set
  endpoint:
    path: /v2/runners/variables/variable-sets/{variableSetId}
    method: PUT
    data_selector: object
- name: delete_variable_set
  endpoint:
    path: /v2/runners/variables/variable-sets/{variableSetId}
    method: DELETE
    data_selector: No content
- name: list_variables_in_set
  endpoint:
    path: /v2/runners/variables/variable-sets/{variableSetId}/variables
    method: GET
    data_selector: object[]
- name: upsert_variables_in_set
  endpoint:
    path: /v2/runners/variables/variable-sets/{variableSetId}/variables
    method: POST
    data_selector: object[]
- name: delete_variable
  endpoint:
    path: /runners/variables/variable-sets/{variableSetId}/variables
    method: DELETE
    data_selector: No content
- name: attach_variable_set
  endpoint:
    path: /runners/variables/projects/{projectId}/variable-sets/{variableSetId}/attach
    method: POST
    data_selector: No content
    params:
      consume: true
- name: detach_variable_set
  endpoint:
    path: /runners/variables/projects/{projectId}/variable-sets/{variableSetId}/detach
    method: POST
    data_selector: No content
- name: bind_variable_set
  endpoint:
    path: /runners/variables/workspaces/{workspaceId}/variable-sets/{variableSetId}/bind
    method: POST
    data_selector: No content
- name: unbind_variable_set
  endpoint:
    path: /runners/variables/workspaces/{workspaceId}/variable-sets/{variableSetId}/unbind
    method: POST
    data_selector: No content
- name: create_workspace
  endpoint:
    path: /runners/workspaces
    method: POST
    data_selector: Workspace created successfully
    params:
      runnerType: firefly_runners
      iacType: terraform
      workspaceName: my-workspace
      description: Production environment workspace
      labels:
      - production
      - terraform
      vcsId: 5fd126f5744410407fbc552f
      repo: infralight/appiac
      defaultBranch: main
      vcsType: github
      workDir: terraform/production
- name: list_workspace_labels
  endpoint:
    path: /runners/workspaces/labels
    method: GET
    data_selector: List of workspace labels
- name: get_workspace_details
  endpoint:
    path: /runners/workspaces/{workspaceId}
    method: GET
    data_selector: Workspace details retrieved successfully
- name: deploy_workspace
  endpoint:
    path: /runners/workspaces/{workspaceId}
    method: POST
    data_selector: Workspace deployed successfully
    params:
      taskType: plan
- name: update_workspace
  endpoint:
    path: /runners/workspaces/{workspaceId}
    method: PUT
    data_selector: Workspace updated successfully
- name: delete_variable
  endpoint:
    path: /v2/runners/variables/variable-sets/{variableSetId}/variables
    method: DELETE
    data_selector: '204'
    params: {}
- name: attach_variable_set
  endpoint:
    path: /v2/runners/variables/projects/{projectId}/variable-sets/{variableSetId}/attach
    method: POST
    data_selector: '204'
    params: {}
- name: detach_variable_set
  endpoint:
    path: /v2/runners/variables/projects/{projectId}/variable-sets/{variableSetId}/detach
    method: POST
    data_selector: '204'
    params: {}
- name: bind_variable_set
  endpoint:
    path: /v2/runners/variables/workspaces/{workspaceId}/variable-sets/{variableSetId}/bind
    method: POST
    data_selector: '204'
    params: {}
- name: unbind_variable_set
  endpoint:
    path: /v2/runners/variables/workspaces/{workspaceId}/variable-sets/{variableSetId}/unbind
    method: POST
    data_selector: '204'
    params: {}
- name: create_workspace
  endpoint:
    path: /v2/runners/workspaces
    method: POST
    data_selector: '201'
    params: {}
- name: list_workspace_labels
  endpoint:
    path: /v2/runners/workspaces/labels
    method: GET
    data_selector: '200'
    params: {}
- name: get_workspace_details
  endpoint:
    path: /v2/runners/workspaces/{workspaceId}
    method: GET
    data_selector: '200'
    params: {}
- name: deploy_workspace
  endpoint:
    path: /v2/runners/workspaces/{workspaceId}
    method: POST
    data_selector: '200'
    params: {}
- name: update_workspace
  endpoint:
    path: /v2/runners/workspaces/{workspaceId}
    method: PUT
    data_selector: '200'
    params: {}
- name: insight
  endpoint:
    path: /governance/insights
    method: POST
    data_selector: insights
    params: {}
- name: insight_update
  endpoint:
    path: /governance/insights/{id}
    method: PUT
    data_selector: updated_insight
    params: {}
- name: insight_delete
  endpoint:
    path: /governance/insights/{id}
    method: DELETE
    data_selector: deleted_insight
    params: {}
- name: insights
  endpoint:
    path: /v2/governance/insights
    method: POST
    data_selector: data
- name: create_insight
  endpoint:
    path: /v2/governance/insights/create
    method: POST
    data_selector: data
- name: update_insight
  endpoint:
    path: /v2/governance/insights/{id}
    method: PUT
    data_selector: data
- name: delete_insight
  endpoint:
    path: /v2/governance/insights/{id}
    method: DELETE
    data_selector: data
- name: insights
  endpoint:
    path: /v2/governance/insights
    method: POST
    data_selector: data
    params: {}
- name: create_insight
  endpoint:
    path: /v2/governance/insights/create
    method: POST
    data_selector: data
    params: {}
- name: update_insight
  endpoint:
    path: /v2/governance/insights/{id}
    method: PUT
    data_selector: data
    params: {}
- name: delete_insight
  endpoint:
    path: /v2/governance/insights/{id}
    method: DELETE
    data_selector: data
    params: {}
notes:
- Requires setup of connected app in Firefly
- Infrastructure-as-Code Orchestration provides automated management and governance
  for your Terraform, OpenTofu, and Terragrunt deployments.
- 'Firefly supports multiple deployment models: Firefly-Managed, Self-Hosted Runners,
  and CI/CD Integration.'
- Real-time inventory updates with continuous scanning
- Firefly continuously scans your environment to keep the inventory current.
- New resources are discovered within minutes, and any changes (drifts, new tags,
  deletions) are reflected.
- Drift Detection is a core feature of Firefly.
- Drift Detection is real-time and event-driven.
- Firefly generates remediation steps or code to resolve detected drifts.
- By implementing policies as code, you ensure that compliance is proactive and automated.
- Firefly includes cost management features that bring transparency to cloud spending
  and help eliminate waste.
- Firefly's approach to cost optimization is to first make costs visible at the resource
  level, and then to highlight and remediate inefficiencies.
- Firefly provides a single policy enforcement framework across all clouds and IaC
  tools.
- The AI Assistant allows you to ask questions in plain English about your cloud and
  get instant answers.
- Cloud costs can spiral due to forgotten resources or over-provisioning.
- Follow the on-screen steps in each section of the wizard to provide the necessary
  credentials or permissions for each integration.
- Firefly will guide you through an Onboarding Wizard.
- Firefly supports several categories of integrations, allowing you to expand its
  capabilities and tailor it to your specific operational needs.
- 'Firefly can send notifications to various channels: you can integrate Slack, Microsoft
  Teams, PagerDuty, email, or create Jira tickets, among others.'
- Setting up notifications early ensures you have near real-time visibility.
- Total assets count represents the sum of all assets excluding the assets created
  by Firefly integration.
- Uses OAuth2 with refresh token — requires setup of connected app in api
- Some objects may return nulls in deeply nested fields
- Firefly automatically classifies every resource as codified, drifted, unmanaged,
  or ghost.
- Requires integration with cloud providers to access inventory data.
- Dashboard provides a view of the health and state of your cloud environment.
- Fixing drifts promptly helps maintain security, compliance, and operational consistency.
- Allows exporting up to 10,000 assets based on current filters
- Deleting assets is a destructive action. Always double-check your selection before
  proceeding.
- Creating IaC-Ignore rules helps exclude unmanaged assets from IaC tracking.
- Firefly comes with built-in rules for some default cloud resources.
- Drift exclusions are a governance tool to fine-tune what you consider a real issue.
- Firefly's governance engine is built on the Open Policy Agent (OPA) framework.
- Policies are continuously updated by the Firefly team.
- They should be used sparingly and reviewed periodically.
- Firefly provides two approaches for creating custom compliance and security policies
  that will be enforced across your cloud infrastructure and IaC deployments.
- After creating a policy, you can view violations in the Governance dashboard.
- Promptly addressing policy violations reduces risk and helps maintain compliance.
- Integration with development workflows includes pre-deployment scanning.
- Firefly comes with built-in policies for many common use cases.
- Firefly Workflows are designed to manage and automate your Terraform, OpenTofu,
  and Terragrunt deployments.
- Supports complex organizational structures with up to 5 levels of project hierarchy.
- Projects can nest up to 5 levels deep.
- Users assigned to parent projects automatically inherit access to sub-projects.
- Firefly Workflows are designed to work seamlessly with Terraform, OpenTofu, and
  Terragrunt.
- 'Plan Your Hierarchy: Design your project structure before creating projects. Consider
  your organization''s structure, deployment patterns, and access control requirements.'
- 'Use Meaningful Names: Choose descriptive names that clearly indicate the project''s
  purpose and scope.'
- 'Leverage Labels: Use consistent labeling conventions to enable effective filtering
  and organization.'
- 'Design Variable Inheritance: Plan your variable inheritance strategy to minimize
  duplication and ensure consistency.'
- 'Start Simple: Begin with a basic project structure and expand as your needs grow.'
- 'Document Your Structure: Maintain documentation explaining your project hierarchy
  and naming conventions.'
- 'Regular Review: Periodically review and optimize your project structure as your
  organization evolves.'
- 'Use Periodic Plan for Drift Detection Wisely: Configure appropriate drift detection
  schedules that balance monitoring needs with resource consumption.'
- 'Consider Compliance: Ensure your project structure supports any regulatory or compliance
  requirements.'
- Projects serve as the primary boundary for access control, resource organization,
  and operational management within Firefly Workflows.
- Centralized management of variable sets
- Supports hierarchical inheritance for variable scope
- 'Plan Your Inheritance Strategy: Design your variable set hierarchy before creating
  sets to avoid conflicts and ensure efficient inheritance.'
- 'Use Meaningful Names: Choose descriptive names that clearly indicate the variable
  set''s purpose and scope.'
- 'Leverage Inheritance: Use variable set inheritance to create base configurations
  that can be extended for specific use cases.'
- 'Manage Sensitive Values: Always mark sensitive variables appropriately and avoid
  exposing secrets in logs or UI.'
- 'Document Your Sets: Use descriptions to explain the purpose and intended usage
  of each variable set.'
- 'Regular Review: Periodically review variable sets to remove unused variables and
  optimize inheritance chains.'
- 'Test Inheritance: Verify that variable inheritance works as expected by checking
  effective variables at the workspace level.'
- 'Avoid Deep Inheritance: Keep inheritance chains shallow to maintain clarity and
  avoid complex conflict resolution.'
- 'Use Project Assignment: Assign variable sets to specific projects to implement
  proper access control.'
- 'Monitor Usage: Track which workspaces consume each variable set to understand impact
  before making changes.'
- Variable Sets provide centralized management of configuration variables.
- Firefly Runners support fully managed IaC operations.
- Workspace names must be unique within your assigned project.
- 'Automatic Triggers: Pull requests and merges will trigger IaC operations.'
- 'Drift Detection: Periodic plans will monitor for configuration changes.'
- 'Security: Sensitive variables are encrypted and redacted from logs.'
- 'Audit Trail: Complete history of all infrastructure changes.'
- Always mark sensitive variables appropriately and avoid exposing secrets in logs
  or UI.
- Regularly rotate sensitive values and update variable sets accordingly.
- Guardrails provide automated checks and balances for IaC deployments.
- 'Activation: The rule becomes active immediately or as per its configuration.'
- 'Evaluation: Firefly analyzes the plan output when a plan is executed for a Workspace
  covered by the Guardrail rule.'
- Firefly supports managed and self-hosted runners for IaC operations.
- Ensure your VCS provider is integrated with Firefly for seamless workflow triggers.
- Use feature branches for testing and main/master for production deployments.
- Run plan-only executions before applying changes to production environments.
- Use manual apply rules for critical infrastructure changes.
- Guardrails ensure Terraform, OpenTofu, and Terragrunt deployments adhere to organizational
  standards.
- The rule becomes active immediately or as per its configuration and will be evaluated
  against new terraform plan, tofu plan, or terragrunt plan operations that fall within
  its defined scope.
- The scope acts as a set of AND conditions. A deployment must match all specified
  scope criteria for the Guardrail rule to be evaluated against it.
- Event Center provides a chronological log of events across integrated cloud accounts.
- Users can filter events based on multiple criteria to drill down into specific changes.
- Proactive prevention is key to avoiding disasters.
- Firefly enables you to set up notifications and subscribe to insights that alert
  you to risky configurations or changes.
- Codification helps convert existing cloud resources into Infrastructure-as-Code
  definitions.
- Self-Service allows users to generate IaC configurations without preexisting resources.
- Notifications can be tailored to your needs, choose which events trigger alerts,
  where they are sent, and who receives them.
- You can also send notifications to your team via email.
- The IaC Explorer provides a comprehensive view of your Infrastructure-as-Code landscape
  across multiple IaC types.
- Granular RBAC (such as limiting a user's access to only specific cloud accounts
  or projects) is will be soon available in the platform.
- The Event Center provides a centralized and chronological view of all cloud events.
- Automated backups and configuration history (coming soon).
- Firefly uses Terraform modules to create and configure your SSO integration.
- If using Okta IdP, contact Firefly to receive a certificate.
- Each tenant maintains full separation from others, ensuring data privacy, security
  boundaries, and independent governance policies.
- Firefly is working to expand its RBAC system in the near future.
- If you'd like Firefly to sync users roles from your IdP, please ensure users are
  assigned to specific and dedicated admins group.
- Use a dedicated AWS account (or at least a separate IAM role) for Firefly's access.
- Grant only the minimum read permissions (Firefly's provided template covers what's
  needed).
- Monitor the Firefly integration user/role in AWS to ensure it's not being used elsewhere.
- Verify you have enabled the Recommender API.
- Firefly can discover multiple Google Cloud projects under one integration if the
  service account is given organization-level viewer rights.
- Use the same service account key to simultaneously integrate multiple Google Cloud
  projects.
- ORM Stack should be deployed in your tenancy's home region.
- The ORM stack provides automated deployment through the OCI Console.
- Ensure the service principal has read access to all resource groups you want scanned.
- Use dedicated service principals for Firefly's access rather than sharing with other
  applications.
- Firefly scans by default every 15 minutes.
- Supports monitoring of Kubernetes resources.
- Supports drift detection and manifest tracking.
- Verify you have enabled the Recommender API to utilize Google Cloud Insights.
- Firefly scans every 8 hours by default for SaaS data.
- Your Akamai configurations list will stay updated automatically.
- Use Terraform v0.13 or later
- The ORM stack should be deployed in your tenancy's home region.
- Supports monitoring of Datadog monitors, dashboards, and alerts.
- Your New Relic configurations list will stay updated automatically.
- You can enforce IaC or policies on your New Relic assets.
- Your Okta configurations list will stay updated automatically.
- You can enforce IaC or policies on your Datadog assets.
- Your GitHub repositories list will stay updated automatically.
- You can enforce IaC or policies on your GitHub assets.
- Supports monitoring of GitHub repositories, organizations.
- Your Personal Access Token is stored securely and encrypted.
- Supports monitoring of Cloudflare DNS, CDN configurations and more.
- Your NS1 DNS records list will stay updated automatically.
- You can enforce IaC or policies on your NS1 assets.
- Supports monitoring of NS1 DNS records and zones.
- A PagerDuty account with administrative access is required.
- Read-Only API Access Key is needed.
- User Token REST API Key is optional for enhanced functionality.
- Your MongoDB Atlas configurations list will stay updated automatically.
- You can enforce IaC or policies on your MongoDB Atlas assets.
- Supports monitoring of MongoDB Atlas clusters, databases, and configuration details.
- Your Cloudflare configurations list will stay updated automatically.
- You can enforce IaC or policies on your Cloudflare assets.
- This integration focuses on tracking Vault's configuration and setup, not the secrets
  themselves.
- Integration supports both Read-Only API Access Keys and User Token REST API Keys
  for enhanced functionality.
- After adding a remote state integration, it may take a few minutes for Firefly to
  initially fetch your state files.
- State files are automatically refreshed periodically to ensure your infrastructure
  state remains up-to-date.
- MongoDB Atlas account with administrative access required.
- Ability to create API keys with Organization Read Only permissions required.
- Firefly scans your workspaces tfstate files by default every 4 hours.
- Your Terraform Cloud workspaces state files list will stay updated automatically.
- Firefly scans your Google Cloud Storage buckets by default every 4 hours.
- Your Google Cloud Storage buckets state files list will stay updated automatically.
- Firefly scans your env0 state files by default every 4 hours.
- Your env0 state files list will stay updated automatically.
- Firefly scans your Consul key-value store by default every 4 hours.
- Fetches Terraform state files from supported remote sources (e.g., S3, Terraform
  Cloud, ArgoCD).
- Identifies and redacts sensitive data within state files.
- After adding a version control integration, it may take a few minutes for Firefly
  to initially fetch your repositories and related assets.
- All assets are automatically refreshed every few hours to ensure your data in Firefly
  remains up-to-date.
- A GitHub account with access to your infrastructure repositories is required.
- Appropriate permissions to install GitHub Apps or create Personal Access Tokens
  are needed.
- An Azure DevOps account with access to your infrastructure repositories is required.
- Appropriate permissions to create Personal Access Tokens are necessary.
- An AWS account with access to your infrastructure repositories in CodeCommit is
  required.
- Appropriate permissions to create IAM roles and CloudFormation stacks are necessary.
- Requires appropriate permissions to create App passwords
- Repositories should contain Terraform, CloudFormation, or other IaC files
- Requires setup of personal access token with api and read_repository scopes
- Requires setup of Personal Access Token (PAT) in Azure DevOps
- Requires a Bitbucket account with access to infrastructure repositories.
- Appropriate permissions to create App passwords are necessary.
- This integration is deprecated. We recommend using the Slack App integration.
- A Microsoft Teams workspace with administrative access is required.
- Appropriate permissions to create webhooks are required.
- Use the notification test button to test the integration.
- For optimal integration, we recommend using an Integration Key instead of the General
  Access REST API Key.
- For optimal integration, we recommend using an Integration Key instead.
- In the integration settings page, use the notification test button to test the integration.
- In the integration settings page, use the notifcation test button to test the integration.
- A Google Workspace account with administrative access is required.
- Appropriate permissions to create webhooks are necessary.
- 'Flexible Authentication: Support for custom credentials.'
- Requires a Google Workspace account with administrative access.
- Webhook URL must be generated from Google Chat space.
- 'Rich Payload: Detailed event information in JSON format.'
- Requires setup of a dedicated integration user with specific roles.
- The `fireflyci` tool must be authenticated using an Access Key and a Secret Key.
- Using Docker is generally recommended for CI/CD environments for consistency and
  ease of setup.
- Integration with existing CI/CD pipelines for Terraform and OpenTofu.
- Uses Access Key and Secret Key for authentication.
- When running fireflyci inside a Docker container, pass environment variables using
  the -e VAR_NAME flag.
- Firefly should hit the ServiceNow scripted API with Inventory and Policy Data.
- Environment Variables are recommended for CI/CD integration
- Firefly Workflows can be integrated into existing CI/CD pipelines for Terraform
  and OpenTofu.
- Integration primarily uses the fireflyci tool.
- Ensure FIREFLY_ACCESS_KEY and FIREFLY_SECRET_KEY are set as environment variables.
- Set environment variables FIREFLY_ACCESS_KEY and FIREFLY_SECRET_KEY in your CI/CD
  system.
- FIREFLY_ACCESS_KEY and FIREFLY_SECRET_KEY are set as environment variables.
- Using the Docker image is generally recommended for CI/CD environments for consistency
  and ease of setup.
- Ensure FIREFLY_ACCESS_KEY and FIREFLY_SECRET_KEY are set as environment variables
- 'Automatic Updates: Periodic checks for new assets (configurable interval)'
- Configure appropriate filters to limit the number of imported resources
- Use consistent tagging across your cloud resources to improve correlation
- Set a reasonable interval for periodic checks based on your infrastructure change
  frequency
- YOUR_AUTH_TOKEN will be provided by the Firefly UI. It is a sensitive value and
  should be kept secret.
- Periodic checks for new assets configurable interval
- Check the Firefly Status Page for Firefly's current status.
- Firefly uses least-privilege IAM roles.
- All data is stored encrypted.
- This token contains your authentication credentials and should never be shared publicly
  or committed to version control systems.
- No ability to modify infrastructure directly.
- This documentation is a work in progress (WIP). The Codification API endpoints are
  currently being developed and this documentation will be updated with complete details
  soon.
- Uses JWT for authentication and requires a valid token.
- Authorization token is required for all requests
- The Self-Service API endpoints are currently being developed and this documentation
  will be updated with complete details soon.
- Requires setup of connected app in api
- This documentation is a work in progress (WIP). The IaC Explorer API endpoints are
  currently being developed and this documentation will be updated with complete details
  soon.
- This documentation is a work in progress (WIP). The Event Center API endpoints are
  currently being developed and this documentation will be updated with complete details
  soon.
- This documentation is a work in progress (WIP). The Integrations API endpoints are
  currently being developed and this documentation will be updated with complete details
  soon.
- This documentation is a work in progress (WIP). The Identity & Access Management
  API endpoints are currently being developed and this documentation will be updated
  with complete details soon.
- Firefly is SOC 2 Type II certified.
- Firefly aligns with ISO 27001 and GDPR.
- 'Before contacting support, it helps to gather relevant information: the specific
  asset or stack ID (if applicable), timestamps of the issue, error messages, and
  steps to reproduce the problem.'
- Firefly offers flexible pricing plans designed to meet the needs of organizations
  of all sizes, from small teams to large enterprises.
- Higher tiers offer expanded capabilities, increased scalability, and access to advanced
  features.
errors:
- '401 Unauthorized: Error'
- '401 Unauthorized: Recheck OAuth scopes or token expiration'
- 'REQUEST_LIMIT_EXCEEDED: Throttle API calls or reduce frequency'
- 'QUERY_TIMEOUT: Break down filters or add selectivity'
- '401 Unauthorized: Check OAuth credentials or access rights.'
- '404 Not Found: Verify the endpoint path or resource existence.'
- '429 Too Many Requests: Reduce the frequency of API calls.'
- 'REQUEST_LIMIT_EXCEEDED: Throttle API calls'
- '401 Unauthorized: Recheck your credentials'
- 'POLICY_VIOLATION: Review the details for compliance.'
- '400 Bad Request: Check the request payload for errors.'
- '401 Unauthorized: Verify your authentication tokens.'
- '404 Not Found: The requested resource could not be found.'
- '401 Unauthorized: Recheck API key or token.'
- '403 Forbidden: Check permissions for the requested resource.'
- '401 Unauthorized: Ensure Access Key and Secret Key are correctly set.'
- '400: Bad Request Error'
- '401: Unauthorized Error'
- '403: Insufficient permissions'
- '404: Not Found Error'
- '500: Internal Server Error'
- 400 Bad Request Error
- 401 Unauthorized Error
- 403 Insufficient permissions
- 404 Not Found Error
- 500 Internal Server Error
- 400 Bad request - missing required parameters
- 401 Unauthorized
- 404 Insight not found
- 500 Internal server error
- 'REQUEST_LIMIT_EXCEEDED: Throttle API calls or reduce frequency.'
- 'QUERY_TIMEOUT: Break down filters or add selectivity.'
- '401 Unauthorized: Recheck OAuth scopes or token expiration.'
auth_info:
  mentioned_objects:
  - OauthToken
  - AuthProvider
  - NamedCredential
  - Access Key
  - Secret Key
client:
  base_url: https://api.firefly.ai
  auth:
    type: apikey
source_metadata: null
