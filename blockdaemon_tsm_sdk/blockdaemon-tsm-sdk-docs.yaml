resources:
- name: management_api
  endpoint:
    path: /management/docs
    method: GET
- name: openapi_yaml
  endpoint:
    path: /management/openapi.yaml
    method: GET
- name: ECDSA Key Generation
  endpoint:
    path: /generate/key
    method: POST
    data_selector: keyID
- name: ECDSA Sign
  endpoint:
    path: /sign/message
    method: POST
    data_selector: signature
- name: Ecdsa
  endpoint:
    path: /ecdsa
    method: POST
    data_selector: results
    params: {}
- name: ECDSA
  endpoint:
    path: /api/v1/ecdsa
    method: POST
    data_selector: result
    params: {}
- name: MPC Node 0
  endpoint:
    path: /ping
    method: GET
    data_selector: Pong
- name: MPC Node 1
  endpoint:
    path: /ping
    method: GET
    data_selector: Pong
- name: MPC Node 2
  endpoint:
    path: /ping
    method: GET
    data_selector: Pong
- name: KMS Stack
  endpoint:
    path: /docs/kms-stack
    method: GET
- name: Core Stack
  endpoint:
    path: /docs/core-stack
    method: GET
- name: Expansion Node Stack
  endpoint:
    path: /docs/expansion-node-stack
    method: GET
- name: health_status
  endpoint:
    path: /ping
    method: GET
    data_selector: status
    params: {}
- name: Key Export
  endpoint:
    path: /api/key-export
    method: POST
    data_selector: wrappedKeyShare
- name: Key Export
  endpoint:
    path: /api/v1/KeyExport
    method: POST
    data_selector: keyExportResult
    params: {}
- name: Key Import
  endpoint:
    path: /api/v1/KeyImport
    method: POST
    data_selector: keyImportResult
    params: {}
- name: export_key_share
  endpoint:
    path: /export/key/share
    method: POST
    data_selector: wrappedKeyShare
    params: {}
- name: import_key_share
  endpoint:
    path: /import/key/share
    method: POST
    data_selector: restoredKeyID
    params: {}
- name: wrapping_key
  endpoint:
    path: /wrapping/key
    method: GET
    data_selector: wrappingKey
    params: {}
- name: Emergency Recovery
  endpoint:
    path: /docs/emergency-recovery
    method: GET
    data_selector: data
    params: {}
- name: Emergency Recovery (ECDSA)
  endpoint:
    path: /docs/emergency-recovery-ecdsa
    method: GET
    data_selector: data
    params: {}
- name: Emergency Recovery (EdDSA)
  endpoint:
    path: /docs/emergency-recovery-eddsa
    method: GET
    data_selector: data
    params: {}
- name: recovery_data
  endpoint:
    path: /docs/emergency-recovery-ecdsa
    method: GET
    data_selector: recoveryData
    params: {}
- name: MPC Node Multi-Tenancy
  endpoint:
    path: /docs/dynamic-node-configuration
    method: GET
    data_selector: MPC node configurations
- name: node0
  endpoint:
    path: /config/config.toml
    method: GET
    data_selector: config
    params: {}
- name: node1
  endpoint:
    path: /config/config.toml
    method: GET
    data_selector: config
    params: {}
- name: node2
  endpoint:
    path: /config/config.toml
    method: GET
    data_selector: config
    params: {}
- name: key_import
  endpoint:
    path: /docs/key-import
    method: GET
    data_selector: key_import_data
- name: key_export
  endpoint:
    path: /docs/key-export
    method: GET
    data_selector: key_export_data
- name: signing
  endpoint:
    path: /docs/signing
    method: GET
    data_selector: signing_data
- name: decrypting
  endpoint:
    path: /docs/decrypting
    method: GET
    data_selector: decrypting_data
- name: key_generation
  endpoint:
    path: /aes/key/generate
    method: POST
    data_selector: keyID
- name: key_import
  endpoint:
    path: /aes/key/import
    method: POST
    data_selector: keyID
- name: key_export
  endpoint:
    path: /aes/key/export
    method: POST
    data_selector: wrappedKeyShare
- name: aes_ctr
  endpoint:
    path: /aes/ctr
    method: POST
    data_selector: keyStream
- name: aes_cbc
  endpoint:
    path: /aes/cbc
    method: POST
    data_selector: ciphertext
- name: aes_gcm
  endpoint:
    path: /aes/gcm
    method: POST
    data_selector: ciphertext
- name: solana_node
  endpoint:
    path: /solana/testnet/native
    method: GET
- name: ECDSA
  endpoint:
    path: /ecdsa
    method: POST
    data_selector: signature
    params: {}
- name: Player
  endpoint:
    path: /config/player
    method: GET
    data_selector: records
- name: Database
  endpoint:
    path: /config/database
    method: GET
    data_selector: records
- name: MPCTCPServer
  endpoint:
    path: /config/mpctcpserver
    method: GET
    data_selector: records
- name: Authentication
  endpoint:
    path: /config/authentication
    method: GET
    data_selector: records
- name: Database
  endpoint:
    path: /path/to/database
    method: GET
    data_selector: records
    params: {}
- name: MPCAMQPServer
  endpoint:
    path: ''
    method: ''
    data_selector: ''
    params:
      ServerURL: ''
      RetryDelay: 5s
      ChannelPoolSize: 2
      PublisherConfirms: false
      PersistMessages: false
      DynamicQueues: false
      SkipSetup: false
- name: MPCRedisServer
  endpoint:
    path: ''
    method: ''
    data_selector: ''
    params:
      ServerURL: ''
      SendBatchSize: 20
      ReceiveBatchSize: 20
      MaxMessageReceivers: 30
      MaxSessions: 10000
      ExpireKeys: false
      ClusterMode: false
- name: Player
  endpoint:
    path: /players
    method: GET
- name: DKLS19
  endpoint:
    path: /dkls19
    method: GET
    data_selector: records
    params: {}
- name: SEPH18S
  endpoint:
    path: /seph18s
    method: GET
    data_selector: records
    params: {}
- name: MRZ15
  endpoint:
    path: /mrz15
    method: GET
    data_selector: records
    params: {}
- name: WRK17
  endpoint:
    path: /wrk17
    method: GET
    data_selector: records
    params: {}
- name: BROADCAST
  endpoint:
    path: /broadcast
    method: GET
    data_selector: records
    params: {}
- name: example_plugins
  endpoint:
    path: /docs/example-plugins
    method: GET
    data_selector: plugins
    params: {}
- name: OpenAPI docs
  endpoint:
    path: /management/docs
    method: GET
- name: OpenAPI yaml
  endpoint:
    path: /management/openapi.yaml
    method: GET
- name: Health information
  endpoint:
    path: /management/health
    method: GET
    params:
      permissions: HEALTH
- name: Metrics
  endpoint:
    path: /management/metrics
    method: GET
    params:
      permissions: METRICS
- name: Authentication methods info
  endpoint:
    path: /management/configuration/authinfo
    method: GET
    params:
      permissions: TSMINFO
- name: Audit signing public key
  endpoint:
    path: /management/configuration/auditsigningpublickey
    method: GET
    params:
      permissions: TSMINFO
- name: Create API Key
  endpoint:
    path: /management/apikey
    method: POST
    data_selector: applicationId, description
    params:
      permissions: APIKEY
- name: Delete API Key
  endpoint:
    path: /management/apikey/{apiKeyID}
    method: DELETE
    params:
      permissions: APIKEY
- name: List API Keys
  endpoint:
    path: /management/apikey
    method: GET
    params:
      permissions: APIKEY
- name: logs
  endpoint:
    path: /logs
    method: GET
    data_selector: records
    params: {}
- name: audit_logs
  endpoint:
    path: /audit
    method: POST
    data_selector: log_entries
- name: PKCS11Features
  endpoint:
    path: /PKCS11/Features
    method: GET
    data_selector: features
    params: {}
- name: Library
  endpoint:
    path: /pkcs11/library
    method: GET
    data_selector: Configuration Label
    params: {}
- name: Node 0
  endpoint:
    path: /pkcs11/nodes/0
    method: GET
    data_selector: Address
    params:
      APIKey: apikey0
- name: Node 1
  endpoint:
    path: /pkcs11/nodes/1
    method: GET
    data_selector: Address
    params:
      APIKey: apikey1
- name: Node 2
  endpoint:
    path: /pkcs11/nodes/2
    method: GET
    data_selector: Address
    params:
      APIKey: apikey2
notes:
- Uses OAuth2 with refresh token â€” requires setup of connected app in api
- Authenticate the SDK upon initiation to control each MPC node.
- Unauthenticated access can be granted by specifying an empty API key under the management
  server API keys.
- Unauthenticated access to Management API can be granted by specifying an empty API
  key.
- DynamicAPIKeys option is disabled by default.
- Numerous institutions trust our Builder Vault to enhance wallet security and enable
  multi-party approval mechanisms called Blockdaemon Advanced MPC.
- HTTP is not recommended in production unless the communication channel is secured
  in some other way
- The Builder Vault SDKv1 has entered maintenance mode and will receive patch updates
  until 2027-03-14.
- Some objects like Contact may return nulls in deeply nested fields
- When the management server is enabled, it now includes Swagger UI documentation,
  and a URL for downloading the OpenAPI yaml definitions.
- The Hosted Sandbox provides a hands-on environment for users to explore and evaluate
  our TSM-enabled wallet solution without local installation.
- This sandbox is for demonstration purposes only and is not intended to replicate
  a production environment.
- Ensure the SDK version matches the MPC node version.
- When connecting to the Builder Vault, ensure the SDK version matches the Builder
  Vault TSM version.
- Remember to replace the MPC node URLs and API keys above with the URLs and API keys
  for the actual Builder Vault TSM instance you use.
- The WASM SDK will not work with mTLS authentication, as TLS is not yet well supported
  in WASM.
- Make sure to replace private keys and passwords with your own.
- All protocol features are enabled; only enable features that are actually used in
  production.
- This system is available for evaluation purposes only and should not be used for
  commercial or personal services.
- The data on the nodes undergoes a regular reset, meaning that it should not be treated
  as a dependable replication of a production environment.
- The max ping rate 80/s for the keygen operation and 95/s for the signing operation.
- While various configurations can achieve operational Builder Vault, such setups
  change inherent security considerations. The ideal configuration depends on the
  trust distribution among Builder Vault admins within your organization.
- DNS name server zone delegations may require up to one business day for completion,
  depending on the authoritative zone settings.
- The following deploys all nodes of the Builder Vault instance locally. This is acceptable
  for testing, debugging, and demo, but in production the nodes should be deployed
  in separate locations to provide adequate security.
- One person can have multiple roles or a dedicated role. The greater the separation
  of roles, the higher security.
- We highly recommend for you to NOT assign one person to be multiple Node Administrators
  as this does not represent a true MPC Configuration.
- To ensure the highest security level, deploy KMS stacks in separate AWS accounts
  from the node infrastructure, with a strong recommendation for each KMS stack to
  reside in its own account.
- The MarketPlace installation is expected to take 30 mins to deploy.
- Ensure that organizational AWS policies do not restrict the use of these technologies.
- A nitro status of `1` means that your nodes are online and health checks passing
  `0` or lower would signify that the nodes are not healthy.
- 200 - OK indicates success; others like **503 - service** unavailable suggest possible
  issues.
- SDK authentication using an API key requires that the MPC node has been configured
  to accept the API key
- Authentication with a client certificate requires that the CA that issued the client
  certificate has been registered in the MPC node configuration
- The MPC node can be configured to accept Microsoft accounts, or Google accounts
  from a particular application domain, or a custom OIDC provider
- The default timeout is 10 seconds, which can be configured in the MPC node configuration
  files.
- According to the BIP32 standard, the master key and chain code are both derived
  from a master seed (or a BIP39 passphrase).
- The key generation protocol ensures that honest players, whose operation succeeds,
  will end up with the correct key share and the correct public key.
- Limited Support for hardened BIP32 key derivation for ECDSA keys in the DKLS19 and
  DKLS23 protocols, and only for limited security thresholds.
- Presignature generation can be done in batches.
- Creating an SDK with an embedded MPC node can be done as described in the usage
  section.
- The project demonstrates both how an MPC node can run embedded in a library on a
  mobile device (iOS, Android) and how the MPC node running on the mobile device can
  be dynamically configured.
- Key import/export is an MPC operation that requires all MPC nodes to interact with
  each other.
- Chain Code is Optional
- The TSM does not currently support BIP39
- Importing an EdDSA key from an external key store or wallet works much like importing
  an external ECDSA key.
- The current import and export methods require that the MPC destination nodes have
  the same player indices as the source MPC nodes.
- The security threshold of the key sharing among the destination nodes will be the
  same as the security threshold of the sharing among the source nodes.
- Key share import/export is a local operation on a single MPC node, requiring no
  communication with other nodes.
- The recovery data contains a zero-knowledge proof that allows anyone to validate
  it without being able to decrypt it.
- Validation does not require access to any MPC nodes.
- Dynamic node configuration is useful for implementing MPC node multi-tenancy.
- If an MPC node has the public key for another MPC node configured statically in
  its configuration file, and it receives a request for an MPC session in which the
  same node is also dynamically configured, the MPC node will choose the public key
  from its static configuration and ignore the dynamic public key.
- All three nodes run in docker containers.
- Builder Vault does not currently provide methods for RSA key generation in MPC.
- Make sure that all MPC nodes successfully completed the key import MPC session before
  using the imported key.
- Builder Vault uses one of the most efficient general purpose MPC protocols.
- AES key sharing supports a security threshold of one with two or three MPC nodes.
- Builder Vault currently only supports HMAC keys shared with a security threshold
  of one among two or three MPC nodes.
- Computing HMAC in a threshold wallet requires the use of so-called general purpose
  MPC.
- Blockdaemon offers an API Suite with packaged solutions specifically designed to
  meet your unique needs.
- When you run this example the first time, a new random account will be created,
  and the balance will be 0 DOT. This will cause the program to print out the account
  address and stop. To actually transfer funds, you will need to first insert some
  test funds on the account address and then run the program again.
- When you run this example the first time, a new random account will be created,
  and the balance will be 0 SOL.
- To actually transfer funds, you will need to first insert some test funds on the
  account address and then run the program again.
- The Starknet blockchain uses ECDSA signatures over the StarkCurve.
- Builder Vault supports ECDSA for Starknet.
- The Zilliqa blockchain uses a variant of Schnorr signatures over the secp256k1 curve.
- Builder Vault supports this scheme and you can therefore use Builder Vault to build
  an MPC wallet for Zilliqa.
- The keys and passwords in the above example are only intended for demonstration.
  Generate your own keys and strong passwords if you deploy a TSM in production.
- Each configuration file must also contain a base64 encoded private key, which the
  MPC node uses for secure communication with the other MPC nodes.
- The configuration file must also specify a database.
- The supported databases are SQLite3, PostgreSQL, MariaDB, MySQL.
- The MPC nodes can be configured to communicate with each other using direct node-to-node
  connections.
- Only the MPC node with the smallest player index, namely index 0, can be dynamically
  configured.
- Do not use the same OIDC access token for authenticating towards different TSM nodes.
- MPC node system logging can be configured in the MPC node's configuration file.
- Set to true to log the filename and line number where the logging operation occurred.
- ReportCaller = true
- All environment variable replacements take place at once, when the MPC node starts
  up.
- For the injection from AWS Secrets Manager to work, the MPC node must be allowed
  to perform the IAM action `secretsmanager:GetSecretValue`.
- DKLS23 is a state-of-the-art MPC protocol for computing ECDSA keys and signatures
  based on the research paper https://eprint.iacr.org/2023/765.
- Set DeactivatedPlayersCache = "database" if your setup involves more than five instances
  of the MPC node.
- Unauthenticated access can be granted by specifying an empty API key.
- An MPC node can be configured to do audit logging.
- It is important that the audit log is kept separate from the MPC node itself.
- Basic authentication is required to query the server.
- The JSON format allows using the audit validation described in the documentation.
- If JSON is not used, then the fields will need to be reconstructed.
- Horizontal scaling with direct TLS connections is not compatible with the use of
  client certificates for SDK authentication.
- For security reasons, Builder Vault ensures that presignatures are deleted after
  use, in order to prevent signing twice with the same presignature.
- If you restore the MPC node databases from an old backup, make sure to call `DeleteAllPresigs()`
  before backing up, or when restoring the database. This prevents accidental reuse
  of a presignature.
- Backup methods include database backup, key share backup, service launch scripts,
  and external encryption recovery.
- Always perform a backup of the database before migrating.
- A database migration may take a significant amount of time if there are many keys
  in the system, and all keys must be encrypted.
- When a migration is in process, no other TSM nodes should access the database. In
  the scenario where one or more TSM nodes share the same database (for load balancing
  or failover purposes), ALL nodes must be stopped during database migration.
- Do not use the following keys in production!
- This will typically be encountered when starting to use the SDK to call the TSM
  nodes, or when making changes.
- 'If running in a multi-tenant setting, the following log entry should also be present
  in the non-mobile nodes: tenant public key for sessionID <SessionID> registered.'
- XCode is really slow to handle OS Signals. When a signal occurs some communication
  is done between the app and the XCode development environment.
- 'When running in XCode set the environment variable: GODEBUG=asyncpreemptoff=1'
- 'The general symptom is a failed operation and a log message like this: error receiving
  handshake message from player <PlayerID> for session id <SessionID>: metadata disagreement
  with player <PlayerID>'
- The problem stems from the nodes being in disagreement on what they are trying to
  do.
- Different operations, e.g. Key Generation on one node and Presignature Generation
  on another.
- The nodes have different threshold.
- Different Curve is used, e.g. Key Generation with secp256k1 on one and P-256 on
  another.
- The public key does not match, if using different keys for e.g. Presignature Generation.
- The number of Presignature that are being generated are different.
- If the protocols are different, e.g. one node is configured with SEPH18S and another
  with DKLS19.
- If the protocol versions are different and the nodes are not able to correct for
  this.
- If a reshare operation encountered a partial failure, the nodes may end up in a
  state where the nodes disagree on the key to use.
- To resolve this, you must run a new reshare operation until all nodes succeed.
- Until the issue is resolved, the nodes may experience metadata disagreements.
- This occurs because the servers track changes using an Epoch, which may differ in
  the metadata across nodes.
- 'The SDK will return an error that contains the HTTP error code: invalid tsm input
  ; node returned 404: 404 page not found'
- The 404 error means that the endpoint is not found. If the SDK is the same version
  as the MPC node, this will only happen if the endpoint is not enabled in the node.
- TSM supports running inside AWS Nitro with cryptographic attestation allowing secure
  sensitive key material injection and configuration provisioning.
- Configuration protected at rest
- 'PKCS #11 attributes stored and validated on each MPC node'
- Key shared across MPC nodes
- 'The PKCS #11 library currently supports the following mechanisms: CKM_AES_KEY_GEN,
  CKM_AES_GCM, CKM_AES_CBC, CKM_AES_CBC_PAD.'
- Is the mechanism you need not listed? We are currently in the process of extending
  the library to include other algorithms, so reach out to our support team and ask
  for information.
- Import functionality is used to support C_CreateObject.
- The Builder Vault PKCS#11 interface only supports the CKM_AES_GCM (0x1087) mechanism.
errors:
- 'REQUEST_LIMIT_EXCEEDED: Throttle API calls or reduce frequency'
- 'QUERY_TIMEOUT: Break down filters or add selectivity'
- '401 Unauthorized: Recheck OAuth scopes or token expiration'
- 'Invalid API Key: Check that the API key is correct.'
- 'Connection Refused: Ensure the MPC node is running.'
- One of the threads failed executing command
- 'Invalid Public Key for Player: Check the public key format or API key.'
- 'Authentication Problems: Ensure the API key is correct.'
- '401 Unauthorized: Recheck API key or permissions'
- Refrain from using the root user for installations. Adhere to AWS's recommended
  practices for root user management.
- '401 Unauthorized: Recheck API key'
- Ensure that the public wrapping key is whitelisted in the source MPC node configuration.
- 'Error during key generation: Check session configuration and parameters.'
- 'Error during key import: Ensure threshold and checksum match.'
- 'Error during key export: Ensure export is enabled in node configuration.'
- 'Invalid API key: Ensure the API key is correct and has the necessary permissions.'
- '400 (Bad request): invalid tsm input ; node returned 404: 404 page not found'
- '403 (Forbidden): The key does not exist or belong to a different user'
- '500 (Internal error): Any error that cannot be attributed to bad values sent in
  the command.'
- '503 (Service unavailable): Problems communicating with the other MPC nodes.'
- 'communication failed: TLS handshake failed: invalid public key for player'
- 'tsm operation failed ; node 0 returned 500: Internal Server Error'
- 'endpoint error: an error occurred during key generation: timed out while creating
  channels sessionID=<SessionID>'
- 'endpoint error: an error occurred during key generation: EOF sessionID=<SessionID>'
- closing unclaimed channel for session id <SessionID>
- tsm authentication failed
- oidc access token unauthorized
- 'unable to fetch protocol information: tsm authentication failed: unauthorized API
  key'
- 'unable to fetch protocol information: tsm authentication failed: unauthorized certificate'
- 'unable to fetch protocol information: tsm authentication failed: unauthorized OIDC
  access token'
- 'token validation failed: invalid token'
- invalid API key
- certificate is not valid
- 'unable to validate access token: <cause>'
- Received bearer token but token authentication is not enabled
- Received API key but API key authentication is not enabled
- Received client certificate but TLS authentication is not enabled
- Received token but oidc access token authentication is not enabled
- 'invalid tsm input ; node returned 404: 404 page not found'
- 'Invalid Public Key for Player: Check the public key format.'
- 'Authentication Problems: Verify the token and permissions.'
auth_info:
  mentioned_objects:
  - APIKey
  - MPC Node
  - API Key
  - OIDC
  - APIKeys
  - OauthToken
  - AuthProvider
client:
  base_url: https://www.blockdaemon.com/
  headers:
    Accept: application/json
source_metadata: null
