resources:
- name: agent
  endpoint:
    path: /reference/agent
    method: GET
- name: agent
  endpoint:
    path: /api-reference/agent/get-an-agent-by-name
    method: GET
- name: auditctx
  endpoint:
    path: /api-reference/auditctx/get-all-audit-contexts
    method: GET
- name: cloudaccount
  endpoint:
    path: /api-reference/cloudaccount/get-all-cloud-accounts
    method: GET
- name: domain
  endpoint:
    path: /api-reference/domain/get-all-domains
    method: GET
- name: group
  endpoint:
    path: /api-reference/group/get-all-groups
    method: GET
- name: gvc
  endpoint:
    path: /api-reference/gvc/get-all-gvcs
    method: GET
- name: identity
  endpoint:
    path: /api-reference/identity/get-all-identities-in-a-gvc
    method: GET
- name: image
  endpoint:
    path: /api-reference/image/get-all-images
    method: GET
- name: location
  endpoint:
    path: /api-reference/location/get-all-locations
    method: GET
- name: org
  endpoint:
    path: /api-reference/org/get-all-orgs
    method: GET
- name: policy
  endpoint:
    path: /api-reference/policy/get-all-policies
    method: GET
- name: quota
  endpoint:
    path: /api-reference/quota/get-all-quotas
    method: GET
- name: secret
  endpoint:
    path: /api-reference/secret/get-all-secrets
    method: GET
- name: serviceaccount
  endpoint:
    path: /api-reference/serviceaccount/get-all-service-accounts
    method: GET
- name: task
  endpoint:
    path: /api-reference/task/get-all-tasks
    method: GET
- name: user
  endpoint:
    path: /api-reference/user/get-all-users
    method: GET
- name: volumeset
  endpoint:
    path: /api-reference/volumeset/get-all-volumesets
    method: GET
- name: workload
  endpoint:
    path: /api-reference/workload/get-all-workloads
    method: GET
- name: domain
  endpoint:
    path: /reference/domain
    method: POST
    data_selector: domain
    params: {}
- name: workload
  endpoint:
    path: /reference/workload
    method: GET
    data_selector: workload
    params: {}
- name: GVC
  endpoint:
    path: /gvc
    method: POST
    data_selector: gvc_data
- name: Workload
  endpoint:
    path: /workload
    method: POST
    data_selector: workload_data
- name: GVC
  endpoint:
    path: /gvc
    method: POST
    data_selector: data
- name: Workload
  endpoint:
    path: /workload
    method: POST
    data_selector: data
- name: users
  endpoint:
    path: /reference/user
    method: GET
    data_selector: records
- name: service_accounts
  endpoint:
    path: /reference/serviceaccount
    method: GET
    data_selector: records
- name: groups
  endpoint:
    path: /reference/group
    method: GET
    data_selector: records
- name: identity
  endpoint:
    path: /reference/identity
    method: GET
    data_selector: records
- name: external_logging
  endpoint:
    path: /external-logging
    method: GET
    data_selector: logs
    params: {}
- name: S3 Logging
  endpoint:
    path: /external-logging/s3
    method: POST
    data_selector: logs
    params: {}
- name: cloudWatch
  endpoint:
    path: /external-logging/cloudwatch
    method: GET
- name: logging
  endpoint:
    path: /external-logging/coralogix
    method: POST
- name: logging
  endpoint:
    path: /dashboard/settings/manage-tokens/data-shipping
    method: GET
    data_selector: logs
- name: logging
  endpoint:
    path: /external-logging/stackdriver
    method: POST
    data_selector: logs
    params:
      location: us-east1
      credentials: //secret/GCP_SECRET
- name: generic-mk8s-example
  endpoint:
    path: /mk8s/generic
    method: POST
    data_selector: cluster
    params: {}
- name: Kubernetes Cluster
  endpoint:
    path: /mk8s/aws
    method: POST
    data_selector: cluster
    params: {}
- name: hetzner-mk8s-example
  endpoint:
    path: /mk8s/hetzner
    method: POST
    data_selector: spec
    params: {}
- name: BYOK Location
  endpoint:
    path: /byok/location
    method: POST
    data_selector: locations
    params: {}
- name: Install BYOK Location
  endpoint:
    path: /byok/location/install
    method: POST
    data_selector: installStatus
    params: {}
- name: Uninstall BYOK Location
  endpoint:
    path: /byok/location/uninstall
    method: DELETE
    data_selector: uninstallStatus
    params: {}
- name: GVC
  endpoint:
    path: /gvc
    method: POST
    data_selector: result
- name: audit_context
  endpoint:
    path: /reference/auditctx
    method: GET
    data_selector: audit
    params: {}
- name: audit_trail
  endpoint:
    path: /audit
    method: GET
    data_selector: actions
- name: account
  endpoint:
    path: /account
    method: GET
    data_selector: accounts
    params: {}
- name: account_get
  endpoint:
    path: /account/get
    method: GET
    data_selector: accounts
    params:
      max: 50
- name: agent_access_report
  endpoint:
    path: /agent/access-report
    method: GET
    data_selector: report
    params: {}
- name: agent_create
  endpoint:
    path: /agent/create
    method: POST
    data_selector: agent
    params:
      name: AGENT_NAME
- name: agent_delete
  endpoint:
    path: /agent/delete
    method: DELETE
    data_selector: deleted
    params:
      ref: []
- name: agent_edit
  endpoint:
    path: /agent/edit
    method: PATCH
    data_selector: updated_agent
    params:
      ref: AGENT_REFERENCE
- name: agent_eventlog
  endpoint:
    path: /agent/eventlog
    method: GET
    data_selector: event_log
    params:
      ref: AGENT_REFERENCE
- name: agent_get
  endpoint:
    path: /agent/get
    method: GET
    data_selector: agents
    params:
      ref: []
- name: agent_info
  endpoint:
    path: /agent/info
    method: GET
    data_selector: agent_info
    params:
      ref: AGENT_REFERENCE
- name: agent_manifest
  endpoint:
    path: /agent/manifest
    method: POST
    data_selector: manifest
    params:
      bootstrap_file: FILE_NAME
      namespace: NAME_SPACE
- name: agent_patch
  endpoint:
    path: /agent/patch
    method: PATCH
    data_selector: patched_agent
    params:
      ref: AGENT_REFERENCE
      file: FILE_NAME
- name: agent_permissions
  endpoint:
    path: /agent/permissions
    method: GET
    data_selector: permissions
    params: {}
- name: agent_query
  endpoint:
    path: /agent/query
    method: GET
    data_selector: query_results
    params:
      QUERY_OPTIONS: {}
- name: agent_tag
  endpoint:
    path: /agent/tag
    method: POST
    data_selector: tagged_agents
    params:
      ref: []
      tag: KEY=VALUE
- name: apply
  endpoint:
    path: /apply
    method: POST
    data_selector: results
    params:
      file: action.json
- name: access-report
  endpoint:
    path: /auditctx/access-report
    method: GET
    data_selector: report
    params: {}
- name: clone
  endpoint:
    path: /auditctx/clone
    method: POST
    data_selector: clone
    params: {}
- name: create
  endpoint:
    path: /auditctx/create
    method: POST
    data_selector: context
    params: {}
- name: edit
  endpoint:
    path: /auditctx/edit
    method: PUT
    data_selector: context
    params: {}
- name: eventlog
  endpoint:
    path: /auditctx/eventlog
    method: GET
    data_selector: eventlog
    params: {}
- name: get
  endpoint:
    path: /auditctx/get
    method: GET
    data_selector: contexts
    params: {}
- name: patch
  endpoint:
    path: /auditctx/patch
    method: PATCH
    data_selector: context
    params: {}
- name: permissions
  endpoint:
    path: /auditctx/permissions
    method: GET
    data_selector: permissions
    params: {}
- name: query
  endpoint:
    path: /auditctx/query
    method: GET
    data_selector: queryResults
    params: {}
- name: tag
  endpoint:
    path: /auditctx/tag
    method: POST
    data_selector: tags
    params: {}
- name: audit_context
  endpoint:
    path: /auditctx/update
    method: POST
    data_selector: properties
    params: {}
- name: cloudaccount access-report
  endpoint:
    path: /cloudaccount/access-report
    method: GET
    data_selector: access_report
    params:
      ref: <ref>
      org: <org>
- name: cloudaccount create-aws
  endpoint:
    path: /cloudaccount/create-aws
    method: POST
    data_selector: create_aws_response
    params:
      name: ACCOUNT_NAME
      role-arn: ROLE_ARN
      org: <org>
- name: cloudaccount create-azure
  endpoint:
    path: /cloudaccount/create-azure
    method: POST
    data_selector: create_azure_response
    params:
      name: ACCOUNT_NAME
      secret: AZURE_SECRET
      url: https://function.app.url
      code: code
      org: <org>
- name: cloudaccount create-gcp
  endpoint:
    path: /cloudaccount/create-gcp
    method: POST
    data_selector: create_gcp_response
    params:
      name: ACCOUNT_NAME
      project-id: PROJECT_ID
      org: <org>
- name: cloudaccount create-ngs
  endpoint:
    path: /cloudaccount/create-ngs
    method: POST
    data_selector: create_ngs_response
    params:
      name: ACCOUNT_NAME
      secret: SECRET_REFERENCE
- name: cloudaccount delete
  endpoint:
    path: /cloudaccount/delete
    method: DELETE
    data_selector: delete_response
    params:
      ref: <ref...>
      org: <org>
- name: cloudaccount edit
  endpoint:
    path: /cloudaccount/edit
    method: PATCH
    data_selector: edit_response
    params:
      ref: <ref>
- name: cloudaccount eventlog
  endpoint:
    path: /cloudaccount/eventlog
    method: GET
    data_selector: event_log
    params:
      ref: <ref>
      org: <org>
- name: cloudaccount get
  endpoint:
    path: /cloudaccount/get
    method: GET
    data_selector: get_response
    params:
      ref: <ref...>
      org: <org>
- name: cloudaccount patch
  endpoint:
    path: /cloudaccount/patch
    method: PATCH
    data_selector: patch_response
    params:
      ref: <ref>
      file: FILE_NAME
- name: access-report
  endpoint:
    path: /domain/access-report
    method: GET
    data_selector: report
    params:
      ref: required
- name: create
  endpoint:
    path: /domain/create
    method: POST
    data_selector: result
    params:
      name: required
- name: delete
  endpoint:
    path: /domain/delete
    method: DELETE
    data_selector: result
    params:
      ref: required
- name: edit
  endpoint:
    path: /domain/edit
    method: PUT
    data_selector: result
    params:
      ref: required
- name: eventlog
  endpoint:
    path: /domain/eventlog
    method: GET
    data_selector: log
    params:
      ref: required
- name: get
  endpoint:
    path: /domain/get
    method: GET
    data_selector: domains
    params:
      ref: optional
- name: patch
  endpoint:
    path: /domain/patch
    method: PATCH
    data_selector: result
    params:
      ref: required
      file: required
- name: permissions
  endpoint:
    path: /domain/permissions
    method: GET
    data_selector: permissions
- name: query
  endpoint:
    path: /domain/query
    method: GET
    data_selector: query_results
- name: tag
  endpoint:
    path: /domain/tag
    method: POST
    data_selector: result
    params:
      ref: required
      tag: optional
- name: access-report
  endpoint:
    path: /group/access-report
    method: GET
- name: add-member
  endpoint:
    path: /group/add-member
    method: POST
- name: clone
  endpoint:
    path: /group/clone
    method: POST
- name: create
  endpoint:
    path: /group/create
    method: POST
- name: delete
  endpoint:
    path: /group/delete
    method: DELETE
- name: edit
  endpoint:
    path: /group/edit
    method: PUT
- name: eventlog
  endpoint:
    path: /group/eventlog
    method: GET
- name: get
  endpoint:
    path: /group/get
    method: GET
- name: patch
  endpoint:
    path: /group/patch
    method: PATCH
- name: permissions
  endpoint:
    path: /group/permissions
    method: GET
- name: query
  endpoint:
    path: /group/query
    method: GET
- name: access-report
  endpoint:
    path: /gvc/access-report
    method: GET
    data_selector: report
    params: {}
- name: add-location
  endpoint:
    path: /gvc/add-location
    method: POST
    data_selector: location
    params:
      location: aws-eu-central-1|aws-us-west-2|azure-eastus2|gcp-us-east1
- name: clone
  endpoint:
    path: /gvc/clone
    method: POST
    data_selector: clone
    params:
      name: CLONE_NAME
- name: create
  endpoint:
    path: /gvc/create
    method: POST
    data_selector: gvc
    params:
      name: GVC_NAME
      location: aws-eu-central-1|aws-us-west-2|azure-eastus2|gcp-us-east1
- name: delete
  endpoint:
    path: /gvc/delete
    method: DELETE
    data_selector: gvc
    params: {}
- name: delete-all-workloads
  endpoint:
    path: /gvc/delete-all-workloads
    method: DELETE
    data_selector: workloads
    params: {}
- name: edit
  endpoint:
    path: /gvc/edit
    method: PUT
    data_selector: edit
    params: {}
- name: eventlog
  endpoint:
    path: /gvc/eventlog
    method: GET
    data_selector: eventlog
    params: {}
- name: get
  endpoint:
    path: /gvc/get
    method: GET
    data_selector: gvc
    params: {}
- name: patch
  endpoint:
    path: /gvc/patch
    method: PATCH
    data_selector: patch
    params:
      file: FILE_NAME
- name: helm_get_all
  endpoint:
    path: /get/all
    method: GET
    data_selector: all
    params:
      release: <release>
- name: helm_get_manifest
  endpoint:
    path: /get/manifest
    method: GET
    data_selector: manifest
    params:
      release: <release>
- name: helm_get_notes
  endpoint:
    path: /get/notes
    method: GET
    data_selector: notes
    params:
      release: <release>
- name: helm_get_values
  endpoint:
    path: /get/values
    method: GET
    data_selector: values
    params:
      release: <release>
- name: helm_history
  endpoint:
    path: /history
    method: GET
    data_selector: history
    params:
      release: <release>
- name: helm_install
  endpoint:
    path: /install
    method: POST
    data_selector: install
    params:
      release: <release>
      chart: <chart>
- name: helm_list
  endpoint:
    path: /list
    method: GET
    data_selector: list
- name: helm_rollback
  endpoint:
    path: /rollback
    method: POST
    data_selector: rollback
    params:
      release: <release>
      revision: <revision>
- name: helm_template
  endpoint:
    path: /template
    method: POST
    data_selector: template
    params:
      release: <release>
      chart: <chart>
- name: helm_uninstall
  endpoint:
    path: /uninstall
    method: DELETE
    data_selector: uninstall
    params:
      release: <release>
- name: access-report
  endpoint:
    path: /identity/access-report
    method: GET
    data_selector: report
    params:
      ref: required
- name: create
  endpoint:
    path: /identity/create
    method: POST
    data_selector: identity
    params:
      name: required
      description: optional
      tag: optional
- name: delete
  endpoint:
    path: /identity/delete
    method: DELETE
    data_selector: deleted
    params:
      ref: required
- name: edit
  endpoint:
    path: /identity/edit
    method: PUT
    data_selector: updated_identity
    params:
      ref: required
- name: eventlog
  endpoint:
    path: /identity/eventlog
    method: GET
    data_selector: event_log
    params:
      ref: required
- name: get
  endpoint:
    path: /identity/get
    method: GET
    data_selector: identities
    params:
      ref: optional
- name: patch
  endpoint:
    path: /identity/patch
    method: PATCH
    data_selector: updated_identity
    params:
      ref: required
      file: required
- name: permissions
  endpoint:
    path: /identity/permissions
    method: GET
    data_selector: permissions
- name: query
  endpoint:
    path: /identity/query
    method: GET
    data_selector: identities
    params:
      query_options: optional
- name: tag
  endpoint:
    path: /identity/tag
    method: POST
    data_selector: tagged_identities
    params:
      ref: required
      tag: optional
- name: account
  endpoint:
    path: /account
    method: GET
    data_selector: accounts
    params: {}
- name: image_access_report
  endpoint:
    path: /image/access-report
    method: GET
- name: image_build
  endpoint:
    path: /image/build
    method: POST
- name: image_copy
  endpoint:
    path: /image/copy
    method: POST
- name: image_delete
  endpoint:
    path: /image/delete
    method: DELETE
- name: image_docker_login
  endpoint:
    path: /image/docker-login
    method: POST
- name: image_edit
  endpoint:
    path: /image/edit
    method: PUT
- name: image_get
  endpoint:
    path: /image/get
    method: GET
- name: image_patch
  endpoint:
    path: /image/patch
    method: PATCH
- name: image_permissions
  endpoint:
    path: /image/permissions
    method: GET
- name: image_query
  endpoint:
    path: /image/query
    method: GET
- name: access-report
  endpoint:
    path: /agent/access-report
    method: GET
- name: create
  endpoint:
    path: /agent/create
    method: POST
- name: delete
  endpoint:
    path: /agent/delete
    method: DELETE
- name: edit
  endpoint:
    path: /agent/edit
    method: PATCH
- name: eventlog
  endpoint:
    path: /agent/eventlog
    method: GET
- name: get
  endpoint:
    path: /agent/get
    method: GET
- name: info
  endpoint:
    path: /agent/info
    method: GET
- name: manifest
  endpoint:
    path: /agent/manifest
    method: POST
- name: patch
  endpoint:
    path: /agent/patch
    method: PATCH
- name: permissions
  endpoint:
    path: /agent/permissions
    method: GET
- name: query
  endpoint:
    path: /agent/query
    method: GET
- name: tag
  endpoint:
    path: /agent/tag
    method: POST
- name: access-report
  endpoint:
    path: /location/access-report
    method: GET
- name: create
  endpoint:
    path: /location/create
    method: POST
- name: delete
  endpoint:
    path: /location/delete
    method: DELETE
- name: edit
  endpoint:
    path: /location/edit
    method: PUT
- name: get
  endpoint:
    path: /location/get
    method: GET
- name: install
  endpoint:
    path: /location/install
    method: GET
- name: patch
  endpoint:
    path: /location/patch
    method: PATCH
- name: permissions
  endpoint:
    path: /location/permissions
    method: GET
- name: query
  endpoint:
    path: /location/query
    method: GET
- name: tag
  endpoint:
    path: /location/tag
    method: POST
- name: apply
  endpoint:
    path: /apply
    method: POST
    data_selector: result
    params:
      file: action.json
- name: location_tag
  endpoint:
    path: /location/tag
    method: POST
    data_selector: output
    params:
      org: demo-cpln-organization
      tag: multiple-locations=demo-location
- name: location_uninstall
  endpoint:
    path: /location/uninstall
    method: POST
    data_selector: output
    params:
      ref: demo-byok-location
      org: demo-cpln-organization
- name: access-report
  endpoint:
    path: /auditctx/access-report
    method: GET
- name: clone
  endpoint:
    path: /auditctx/clone
    method: POST
- name: create
  endpoint:
    path: /auditctx/create
    method: POST
- name: edit
  endpoint:
    path: /auditctx/edit
    method: PUT
- name: eventlog
  endpoint:
    path: /auditctx/eventlog
    method: GET
- name: get
  endpoint:
    path: /auditctx/get
    method: GET
- name: patch
  endpoint:
    path: /auditctx/patch
    method: PATCH
- name: permissions
  endpoint:
    path: /auditctx/permissions
    method: GET
- name: query
  endpoint:
    path: /auditctx/query
    method: GET
- name: tag
  endpoint:
    path: /auditctx/tag
    method: POST
- name: audit_context
  endpoint:
    path: /auditctx
    method: POST
    data_selector: audit_context
    params: {}
- name: access_report
  endpoint:
    path: /mk8s/access-report
    method: GET
- name: clone
  endpoint:
    path: /mk8s/clone
    method: POST
- name: dashboard
  endpoint:
    path: /mk8s/dashboard
    method: GET
- name: delete
  endpoint:
    path: /mk8s/delete
    method: DELETE
- name: edit
  endpoint:
    path: /mk8s/edit
    method: PUT
- name: eventlog
  endpoint:
    path: /mk8s/eventlog
    method: GET
- name: get
  endpoint:
    path: /mk8s/get
    method: GET
- name: join
  endpoint:
    path: /mk8s/join
    method: POST
- name: kubeconfig
  endpoint:
    path: /mk8s/kubeconfig
    method: POST
- name: patch
  endpoint:
    path: /mk8s/patch
    method: PATCH
- name: permissions
  endpoint:
    path: /mk8s/permissions
    method: GET
- name: query
  endpoint:
    path: /mk8s/query
    method: GET
- name: access-report
  endpoint:
    path: /cloudaccount/access-report
    method: GET
- name: create-aws
  endpoint:
    path: /cloudaccount/create-aws
    method: POST
- name: create-azure
  endpoint:
    path: /cloudaccount/create-azure
    method: POST
- name: create-gcp
  endpoint:
    path: /cloudaccount/create-gcp
    method: POST
- name: create-ngs
  endpoint:
    path: /cloudaccount/create-ngs
    method: POST
- name: delete
  endpoint:
    path: /cloudaccount/delete
    method: DELETE
- name: edit
  endpoint:
    path: /cloudaccount/edit
    method: PATCH
- name: eventlog
  endpoint:
    path: /cloudaccount/eventlog
    method: GET
- name: get
  endpoint:
    path: /cloudaccount/get
    method: GET
- name: patch
  endpoint:
    path: /cloudaccount/patch
    method: PATCH
- name: tag
  endpoint:
    path: /mk8s/tag
    method: POST
- name: update
  endpoint:
    path: /mk8s/update
    method: POST
- name: operator_install
  endpoint:
    path: /operator/install
    method: POST
    data_selector: results
    params:
      serviceaccount: required
      serviceaccount-group: superusers
      export: boolean
- name: operator_uninstall
  endpoint:
    path: /operator/uninstall
    method: POST
    data_selector: results
    params: {}
- name: access-report
  endpoint:
    path: /domain/access-report
    method: GET
    data_selector: access report
    params: {}
- name: create
  endpoint:
    path: /domain/create
    method: POST
    data_selector: create domain
    params:
      name: DOMAIN_NAME
- name: delete
  endpoint:
    path: /domain/delete
    method: DELETE
    data_selector: delete domain
    params:
      ref: []
- name: edit
  endpoint:
    path: /domain/edit
    method: PUT
    data_selector: edit domain
    params:
      ref: domain reference
- name: eventlog
  endpoint:
    path: /domain/eventlog
    method: GET
    data_selector: event log
    params:
      ref: domain reference
- name: get
  endpoint:
    path: /domain/get
    method: GET
    data_selector: retrieve domains
    params:
      ref: []
- name: patch
  endpoint:
    path: /domain/patch
    method: PATCH
    data_selector: patch domain
    params:
      ref: domain reference
      file: FILE_NAME
- name: permissions
  endpoint:
    path: /domain/permissions
    method: GET
    data_selector: grantable permissions
    params: {}
- name: query
  endpoint:
    path: /domain/query
    method: GET
    data_selector: query domains
    params: {}
- name: tag
  endpoint:
    path: /domain/tag
    method: POST
    data_selector: manage tags
    params:
      ref: []
      tag: KEY=VALUE
- name: access_report
  endpoint:
    path: /org/access-report
    method: GET
    data_selector: access_report
    params:
      ref: <ref>
- name: create_organization
  endpoint:
    path: /org/create
    method: POST
    data_selector: organization
    params:
      accountId: <accountId>
      name: <ORG_NAME>
      invitee: <user_email>
- name: edit_organization
  endpoint:
    path: /org/edit
    method: PATCH
    data_selector: organization
    params:
      ref: <ref>
- name: eventlog
  endpoint:
    path: /org/eventlog
    method: GET
    data_selector: eventlog
    params:
      ref: <ref>
- name: get_organizations
  endpoint:
    path: /org/get
    method: GET
    data_selector: organizations
    params:
      ref: <ref>
- name: patch_organization
  endpoint:
    path: /org/patch
    method: PATCH
    data_selector: organization
    params:
      ref: <ref>
      file: <FILE_NAME>
- name: permissions
  endpoint:
    path: /org/permissions
    method: GET
    data_selector: permissions
- name: query
  endpoint:
    path: /org/query
    method: GET
    data_selector: query_results
    params:
      QUERY_OPTIONS: <options>
- name: tag
  endpoint:
    path: /org/tag
    method: POST
    data_selector: tag_results
    params:
      ref: <ref>
      tag: <KEY=VALUE>
- name: update_organization
  endpoint:
    path: /org/update
    method: PATCH
    data_selector: organization
    params:
      ref: <ref>
      set: <UPDATE_PROPERTY>
- name: access_report
  endpoint:
    path: /policy/access-report
    method: GET
- name: add_binding
  endpoint:
    path: /policy/add-binding
    method: POST
- name: clone
  endpoint:
    path: /policy/clone
    method: POST
- name: create
  endpoint:
    path: /policy/create
    method: POST
- name: delete
  endpoint:
    path: /policy/delete
    method: DELETE
- name: edit
  endpoint:
    path: /policy/edit
    method: PATCH
- name: eventlog
  endpoint:
    path: /policy/eventlog
    method: GET
- name: get
  endpoint:
    path: /policy/get
    method: GET
- name: patch
  endpoint:
    path: /policy/patch
    method: PATCH
- name: permissions
  endpoint:
    path: /policy/permissions
    method: GET
- name: query
  endpoint:
    path: /policy/query
    method: GET
- name: access_report
  endpoint:
    path: /group/access-report
    method: GET
- name: add_member
  endpoint:
    path: /group/add-member
    method: POST
- name: clone
  endpoint:
    path: /group/clone
    method: POST
- name: create
  endpoint:
    path: /group/create
    method: POST
- name: delete
  endpoint:
    path: /group/delete
    method: DELETE
- name: edit
  endpoint:
    path: /group/edit
    method: PATCH
- name: eventlog
  endpoint:
    path: /group/eventlog
    method: GET
- name: get
  endpoint:
    path: /group/get
    method: GET
- name: patch
  endpoint:
    path: /group/patch
    method: PATCH
- name: permissions
  endpoint:
    path: /group/permissions
    method: GET
- name: query
  endpoint:
    path: /group/query
    method: GET
- name: policy_query
  endpoint:
    path: /cpln/policy/query
    method: GET
    data_selector: QUERY_OPTIONS
    params: {}
- name: policy_remove_binding
  endpoint:
    path: /cpln/policy/remove-binding
    method: POST
    data_selector: COMMAND_OPTIONS
    params: {}
- name: policy_tag
  endpoint:
    path: /cpln/policy/tag
    method: POST
    data_selector: COMMAND_OPTIONS
    params: {}
- name: policy_update
  endpoint:
    path: /cpln/policy/update
    method: POST
    data_selector: UPDATE_PROPERTY
    params: {}
- name: quota
  endpoint:
    path: /quota
    method: GET
    data_selector: records
    params: {}
- name: access_report
  endpoint:
    path: /gvc/access-report
    method: GET
    data_selector: report
    params: {}
- name: add_location
  endpoint:
    path: /gvc/add-location
    method: POST
    data_selector: location
    params: {}
- name: clone
  endpoint:
    path: /gvc/clone
    method: POST
    data_selector: clone
    params: {}
- name: create
  endpoint:
    path: /gvc/create
    method: POST
    data_selector: gvc
    params: {}
- name: delete
  endpoint:
    path: /gvc/delete
    method: DELETE
    data_selector: deleted
    params: {}
- name: delete_all_workloads
  endpoint:
    path: /gvc/delete-all-workloads
    method: DELETE
    data_selector: deleted_workloads
    params: {}
- name: edit
  endpoint:
    path: /gvc/edit
    method: PATCH
    data_selector: edited
    params: {}
- name: eventlog
  endpoint:
    path: /gvc/eventlog
    method: GET
    data_selector: event_log
    params: {}
- name: get
  endpoint:
    path: /gvc/get
    method: GET
    data_selector: gvcs
    params: {}
- name: patch
  endpoint:
    path: /gvc/patch
    method: PATCH
    data_selector: patched
    params: {}
- name: create
  endpoint:
    path: /org
    method: POST
- name: delete
  endpoint:
    path: /org/demo-cpln-organization/gvc/demo-gvc
    method: DELETE
- name: edit
  endpoint:
    path: /org/demo-cpln-organization
    method: PATCH
- name: get
  endpoint:
    path: /org/demo-cpln-organization
    method: GET
- name: put
  endpoint:
    path: /org/demo-cpln-organization
    method: PUT
- name: gvc_permissions
  endpoint:
    path: /gvc/permissions
    method: GET
- name: gvc_query
  endpoint:
    path: /gvc/query
    method: GET
- name: gvc_remove_location
  endpoint:
    path: /gvc/remove-location
    method: POST
- name: gvc_tag
  endpoint:
    path: /gvc/tag
    method: POST
- name: gvc_update
  endpoint:
    path: /gvc/update
    method: POST
- name: get_all
  endpoint:
    path: /helm/get/all
    method: GET
    data_selector: all
    params:
      release: <release>
      revision: number
- name: get_manifest
  endpoint:
    path: /helm/get/manifest
    method: GET
    data_selector: manifest
    params:
      release: <release>
      revision: number
- name: get_notes
  endpoint:
    path: /helm/get/notes
    method: GET
    data_selector: notes
    params:
      release: <release>
- name: get_values
  endpoint:
    path: /helm/get/values
    method: GET
    data_selector: values
    params:
      release: <release>
      all: boolean
      revision: number
- name: history
  endpoint:
    path: /helm/history
    method: GET
    data_selector: history
    params:
      release: <release>
- name: install
  endpoint:
    path: /helm/install
    method: POST
    data_selector: install
    params:
      release: <release>
      chart: <chart>
- name: list
  endpoint:
    path: /helm/list
    method: GET
    data_selector: list
    params: {}
- name: rollback
  endpoint:
    path: /helm/rollback
    method: POST
    data_selector: rollback
    params:
      release: <release>
      revision: revision
- name: template
  endpoint:
    path: /helm/template
    method: POST
    data_selector: template
    params:
      release: <release>
      chart: <chart>
- name: uninstall
  endpoint:
    path: /helm/uninstall
    method: DELETE
    data_selector: uninstall
    params:
      release: <release>
- name: access-report
  endpoint:
    path: /serviceaccount/access-report
    method: GET
    data_selector: report_data
    params:
      ref: required
- name: add-key
  endpoint:
    path: /serviceaccount/add-key
    method: POST
    data_selector: key_data
    params:
      ref: required
      description: required
- name: clone
  endpoint:
    path: /serviceaccount/clone
    method: POST
    data_selector: clone_data
    params:
      ref: required
      name: required
- name: create
  endpoint:
    path: /serviceaccount/create
    method: POST
    data_selector: service_account_data
    params:
      name: required
      description: optional
      tag: optional
- name: delete
  endpoint:
    path: /serviceaccount/delete
    method: DELETE
    data_selector: delete_response
    params:
      ref: required
- name: edit
  endpoint:
    path: /serviceaccount/edit
    method: PATCH
    data_selector: edit_response
    params:
      ref: required
- name: eventlog
  endpoint:
    path: /serviceaccount/eventlog
    method: GET
    data_selector: event_log_data
    params:
      ref: required
- name: get
  endpoint:
    path: /serviceaccount/get
    method: GET
    data_selector: service_accounts_data
    params:
      ref: optional
- name: patch
  endpoint:
    path: /serviceaccount/patch
    method: PATCH
    data_selector: patch_response
    params:
      ref: required
      file: required
- name: permissions
  endpoint:
    path: /serviceaccount/permissions
    method: GET
    data_selector: permissions_data
- name: query
  endpoint:
    path: /serviceaccount/query
    method: GET
    data_selector: query_results_data
    params:
      QUERY_OPTIONS: optional
- name: access_report
  endpoint:
    path: /identity/access-report
    method: GET
    data_selector: report
    params: {}
- name: create_identity
  endpoint:
    path: /identity/create
    method: POST
    data_selector: identity
    params: {}
- name: delete_identity
  endpoint:
    path: /identity/delete
    method: DELETE
    data_selector: result
    params: {}
- name: edit_identity
  endpoint:
    path: /identity/edit
    method: PATCH
    data_selector: updated_identity
    params: {}
- name: eventlog
  endpoint:
    path: /identity/eventlog
    method: GET
    data_selector: event_log
    params: {}
- name: get_identity
  endpoint:
    path: /identity/get
    method: GET
    data_selector: identities
    params: {}
- name: patch_identity
  endpoint:
    path: /identity/patch
    method: PATCH
    data_selector: updated_identity
    params: {}
- name: permissions
  endpoint:
    path: /identity/permissions
    method: GET
    data_selector: permissions
    params: {}
- name: query
  endpoint:
    path: /identity/query
    method: GET
    data_selector: query_results
    params: {}
- name: tag_identity
  endpoint:
    path: /identity/tag
    method: POST
    data_selector: updated_tags
    params: {}
- name: user_access_report
  endpoint:
    path: /user/access-report
    method: GET
- name: user_delete
  endpoint:
    path: /user/delete
    method: DELETE
- name: user_edit
  endpoint:
    path: /user/edit
    method: PUT
- name: user_eventlog
  endpoint:
    path: /user/eventlog
    method: GET
- name: user_get
  endpoint:
    path: /user/get
    method: GET
- name: user_invite
  endpoint:
    path: /user/invite
    method: POST
- name: user_patch
  endpoint:
    path: /user/patch
    method: PATCH
- name: user_permissions
  endpoint:
    path: /user/permissions
    method: GET
- name: user_query
  endpoint:
    path: /user/query
    method: GET
- name: user_tag
  endpoint:
    path: /user/tag
    method: POST
- name: user_update
  endpoint:
    path: /user/update
    method: PUT
- name: access_report
  endpoint:
    path: /image/access-report
    method: GET
- name: build
  endpoint:
    path: /image/build
    method: POST
- name: copy
  endpoint:
    path: /image/copy
    method: POST
- name: delete
  endpoint:
    path: /image/delete
    method: DELETE
- name: docker_login
  endpoint:
    path: /image/docker-login
    method: POST
- name: edit
  endpoint:
    path: /image/edit
    method: PATCH
- name: get
  endpoint:
    path: /image/get
    method: GET
- name: patch
  endpoint:
    path: /image/patch
    method: PATCH
- name: permissions
  endpoint:
    path: /image/permissions
    method: GET
- name: query
  endpoint:
    path: /image/query
    method: GET
- name: volumeset_access_report
  endpoint:
    path: /volumeset/access-report
    method: GET
    data_selector: access_report
    params: {}
- name: volumeset_create
  endpoint:
    path: /volumeset/create
    method: POST
    data_selector: create_volume_set
    params:
      name: NAME
- name: volumeset_delete
  endpoint:
    path: /volumeset/delete
    method: DELETE
    data_selector: delete_volume_set
    params:
      ref: []
- name: volumeset_edit
  endpoint:
    path: /volumeset/edit
    method: PUT
    data_selector: edit_volume_set
    params:
      ref: reference
- name: volumeset_eventlog
  endpoint:
    path: /volumeset/eventlog
    method: GET
    data_selector: event_log
    params:
      ref: reference
- name: volumeset_expand
  endpoint:
    path: /volumeset/expand
    method: POST
    data_selector: expand_volume
    params:
      ref: reference
      new_size: new_size
- name: volumeset_get
  endpoint:
    path: /volumeset/get
    method: GET
    data_selector: get_volume_set
    params:
      ref: []
- name: volumeset_patch
  endpoint:
    path: /volumeset/patch
    method: PATCH
    data_selector: patch_volume_set
    params:
      ref: reference
      file: FILE_NAME
- name: volumeset_permissions
  endpoint:
    path: /volumeset/permissions
    method: GET
    data_selector: permissions
    params: {}
- name: volumeset_query
  endpoint:
    path: /volumeset/query
    method: GET
    data_selector: query_volume_set
    params: {}
- name: volumeset_snapshot
  endpoint:
    path: /volumeset/snapshot
    method: POST
    data_selector: snapshot_volume_set
    params: {}
- name: access_report
  endpoint:
    path: /location/access-report
    method: GET
- name: create_location
  endpoint:
    path: /location/create
    method: POST
- name: delete_location
  endpoint:
    path: /location/delete
    method: DELETE
- name: edit_location
  endpoint:
    path: /location/edit
    method: PATCH
- name: get_location
  endpoint:
    path: /location/get
    method: GET
- name: install_location
  endpoint:
    path: /location/install
    method: GET
- name: patch_location
  endpoint:
    path: /location/patch
    method: PATCH
- name: permissions_location
  endpoint:
    path: /location/permissions
    method: GET
- name: query_location
  endpoint:
    path: /location/query
    method: GET
- name: tag_location
  endpoint:
    path: /location/tag
    method: POST
- name: location_tag
  endpoint:
    path: /location/tag
    method: POST
    data_selector: output
    params:
      org: demo-cpln-organization
      tag: multiple-locations=demo-location
- name: location_uninstall
  endpoint:
    path: /location/uninstall
    method: POST
    data_selector: output
    params:
      ref: demo-byok-location
      org: demo-cpln-organization
- name: logs
  endpoint:
    path: /logs
    method: GET
    data_selector: entries
- name: volumeset_snapshot_create
  endpoint:
    path: volumeset/snapshot/create
    method: POST
    data_selector: snapshots
    params:
      snapshot-name: required
      location: optional
      volume-index: optional
- name: volumeset_snapshot_delete
  endpoint:
    path: volumeset/snapshot/delete
    method: DELETE
    data_selector: snapshots
    params:
      snapshot-name: required
      location: optional
      volume-index: optional
- name: volumeset_snapshot_get
  endpoint:
    path: volumeset/snapshot/get
    method: GET
    data_selector: snapshots
    params:
      snapshot-name: optional
      location: optional
      volume-index: optional
- name: volumeset_snapshot_restore
  endpoint:
    path: volumeset/snapshot/restore
    method: POST
    data_selector: snapshots
    params:
      snapshot-name: required
      location: required
      volume-index: required
- name: volumeset_tag
  endpoint:
    path: volumeset/tag
    method: POST
    data_selector: tags
    params:
      tag: required
      remove: optional
- name: volumeset_update
  endpoint:
    path: volumeset/update
    method: PUT
    data_selector: updates
    params:
      set: required
- name: volumeset_volume_delete
  endpoint:
    path: volumeset/volume/delete
    method: DELETE
    data_selector: volumes
    params:
      location: optional
      volume-index: optional
- name: volumeset_volume_get
  endpoint:
    path: volumeset/volume/get
    method: GET
    data_selector: volumes
    params:
      location: optional
      volume-index: optional
- name: access_report
  endpoint:
    path: /workloads/access-report
    method: GET
    data_selector: report
    params:
      ref: workload_reference
- name: clone
  endpoint:
    path: /workloads/clone
    method: POST
    data_selector: clone_info
    params:
      ref: workload_reference
      name: CLONE_NAME
- name: connect
  endpoint:
    path: /workloads/connect
    method: POST
    data_selector: connection_info
    params:
      ref: workload_reference
      location: LOCATION
- name: create
  endpoint:
    path: /workloads/create
    method: POST
    data_selector: workload_info
    params:
      name: WORKLOAD_NAME
      image: IMAGE_NAME
- name: cron
  endpoint:
    path: /workloads/cron
    method: GET
    data_selector: cron_jobs
    params:
      ref: workload_reference
- name: delete
  endpoint:
    path: /workloads/delete
    method: DELETE
    data_selector: deletion_info
    params:
      ref: workload_references
- name: access-report
  endpoint:
    path: /mk8s/access-report
    method: GET
    data_selector: report
    params:
      ref: required
- name: clone
  endpoint:
    path: /mk8s/clone
    method: POST
    data_selector: clone
    params:
      ref: required
      name: required
- name: dashboard
  endpoint:
    path: /mk8s/dashboard
    method: GET
    data_selector: dashboard
    params:
      ref: required
- name: delete
  endpoint:
    path: /mk8s/delete
    method: DELETE
    data_selector: deleted
    params:
      ref: required
- name: edit
  endpoint:
    path: /mk8s/edit
    method: PUT
    data_selector: edited
    params:
      ref: required
- name: eventlog
  endpoint:
    path: /mk8s/eventlog
    method: GET
    data_selector: eventlog
    params:
      ref: required
- name: get
  endpoint:
    path: /mk8s/get
    method: GET
    data_selector: clusters
    params: {}
- name: join
  endpoint:
    path: /mk8s/join
    method: POST
    data_selector: joined
    params:
      ref: required
- name: kubeconfig
  endpoint:
    path: /mk8s/kubeconfig
    method: POST
    data_selector: kubeconfig
    params:
      ref: required
- name: patch
  endpoint:
    path: /mk8s/patch
    method: PATCH
    data_selector: patched
    params:
      ref: required
      file: required
- name: permissions
  endpoint:
    path: /mk8s/permissions
    method: GET
    data_selector: permissions
    params: {}
- name: query
  endpoint:
    path: /mk8s/query
    method: GET
    data_selector: clusters
    params: {}
- name: tag
  endpoint:
    path: /mk8s/tag
    method: POST
- name: update
  endpoint:
    path: /mk8s/update
    method: POST
- name: operator_install
  endpoint:
    path: /operator/install
    method: POST
    data_selector: response
    params:
      serviceaccount: required
      serviceaccount-group: superusers
      export: boolean
- name: operator_uninstall
  endpoint:
    path: /operator/uninstall
    method: POST
    data_selector: response
    params: {}
- name: domain
  endpoint:
    path: /api/domains
    method: GET
    data_selector: domains
- name: access_report
  endpoint:
    path: /org/access-report
    method: GET
    data_selector: report
- name: create_organization
  endpoint:
    path: /org/create
    method: POST
    data_selector: organization
    params:
      name: ORG_NAME
      accountId: ACCOUNT_ID
      invitee: EMAIL
- name: edit_organization
  endpoint:
    path: /org/edit
    method: PATCH
    data_selector: organization
- name: eventlog
  endpoint:
    path: /org/eventlog
    method: GET
    data_selector: event_log
- name: get_organizations
  endpoint:
    path: /org/get
    method: GET
    data_selector: organizations
- name: patch_organization
  endpoint:
    path: /org/patch
    method: PATCH
    data_selector: organization
- name: permissions
  endpoint:
    path: /org/permissions
    method: GET
    data_selector: permissions
- name: query
  endpoint:
    path: /org/query
    method: GET
    data_selector: query_results
- name: tag
  endpoint:
    path: /org/tag
    method: POST
    data_selector: tags
- name: update_organization
  endpoint:
    path: /org/update
    method: PUT
    data_selector: organization
- name: my-vault
  endpoint:
    path: https://myvault.com:6443
    method: GET
    data_selector: syncInterval
    params: {}
- name: my-param-store
  endpoint:
    path: https://myvault.com:6443
    method: GET
    data_selector: awsParameterStore
    params:
      region: us-west-2
- name: my-secret-manager
  endpoint:
    path: https://myvault.com:6443
    method: GET
    data_selector: awsSecretManager
    params:
      region: us-west-2
- name: my-1password
  endpoint:
    path: https://myvault.com:6443
    method: GET
    data_selector: onePassword
    params: {}
- name: my-doppler
  endpoint:
    path: https://myvault.com:6443
    method: GET
    data_selector: doppler
    params: {}
- name: access_report
  endpoint:
    path: /policy/access-report
    method: GET
    data_selector: access_report
    params: {}
- name: add_binding
  endpoint:
    path: /policy/add-binding
    method: POST
    data_selector: add_binding
    params: {}
- name: clone
  endpoint:
    path: /policy/clone
    method: POST
    data_selector: clone
    params: {}
- name: create
  endpoint:
    path: /policy/create
    method: POST
    data_selector: create
    params: {}
- name: delete
  endpoint:
    path: /policy/delete
    method: DELETE
    data_selector: delete
    params: {}
- name: edit
  endpoint:
    path: /policy/edit
    method: PUT
    data_selector: edit
    params: {}
- name: eventlog
  endpoint:
    path: /policy/eventlog
    method: GET
    data_selector: eventlog
    params: {}
- name: get
  endpoint:
    path: /policy/get
    method: GET
    data_selector: get
    params: {}
- name: patch
  endpoint:
    path: /policy/patch
    method: PATCH
    data_selector: patch
    params: {}
- name: permissions
  endpoint:
    path: /policy/permissions
    method: GET
    data_selector: permissions
    params: {}
- name: query
  endpoint:
    path: /policy/query
    method: GET
    data_selector: query
    params: {}
- name: built_in_groups
  endpoint:
    path: /api/built_in_groups
    method: GET
    data_selector: groups
    params: {}
- name: gvc_configuration
  endpoint:
    path: /gvc/configuration
    method: GET
    data_selector: spec
    params: {}
- name: policy_query
  endpoint:
    path: /policy/query
    method: GET
    data_selector: results
    params:
      match: any
- name: policy_remove_binding
  endpoint:
    path: /policy/remove-binding
    method: POST
    data_selector: results
    params: {}
- name: policy_tag
  endpoint:
    path: /policy/tag
    method: POST
    data_selector: results
    params: {}
- name: policy_update
  endpoint:
    path: /policy/update
    method: POST
    data_selector: results
    params: {}
- name: aws
  endpoint:
    cloudAccountLink: /org/my-org/cloudaccount/aws-prod
- name: gcp
  endpoint:
    cloudAccountLink: /org/my-org/cloudaccount/gcp-prod
- name: azure
  endpoint:
    cloudAccountLink: /org/my-org/cloudaccount/azure-prod
- name: nats
  endpoint:
    cloudAccountLink: /org/my-org/cloudaccount/nats-prod
- name: image
  endpoint:
    path: /images
    method: GET
    data_selector: items
- name: quota_edit
  endpoint:
    path: /quota/edit
    method: POST
    params:
      ref: required
      replace: 'false'
- name: quota_get
  endpoint:
    path: /quota/get
    method: GET
    params:
      ref: []
- name: quota_patch
  endpoint:
    path: /quota/patch
    method: PATCH
    params:
      ref: required
      file: required
- name: quota_permissions
  endpoint:
    path: /quota/permissions
    method: GET
    params: {}
- name: quota_query
  endpoint:
    path: /quota/query
    method: GET
    params:
      match: all
      property: ''
      tag: ''
      rel: ''
- name: ipSet
  endpoint:
    path: /ipset
    method: GET
    data_selector: ipSets
    params: {}
- name: logs
  endpoint:
    path: /logs
    method: GET
    data_selector: records
- name: create
  endpoint:
    path: /org
    method: POST
- name: delete
  endpoint:
    path: /org/demo-cpln-organization/gvc/demo-gvc
    method: DELETE
- name: edit
  endpoint:
    path: /org/demo-cpln-organization
    method: PATCH
- name: get
  endpoint:
    path: /org/demo-cpln-organization
    method: GET
- name: post
  endpoint:
    path: /org
    method: POST
- name: put
  endpoint:
    path: /org/demo-cpln-organization
    method: PUT
- name: secret_tag
  endpoint:
    path: /secret/tag
    method: POST
    data_selector: results
- name: secret_update
  endpoint:
    path: /secret/update
    method: POST
    data_selector: results
- name: agents
  endpoint:
    path: /reference/agent
    method: GET
    data_selector: resources
    params: {}
- name: domains
  endpoint:
    path: /reference/domain
    method: GET
    data_selector: resources
    params: {}
- name: identities-per-gvc
  endpoint:
    path: /reference/identity
    method: GET
    data_selector: resources
    params: {}
- name: workloads-per-gvc
  endpoint:
    path: /reference/workload
    method: GET
    data_selector: resources
    params: {}
- name: access-report
  endpoint:
    path: /serviceaccount/access-report
    method: GET
    data_selector: report
    params: {}
- name: add-key
  endpoint:
    path: /serviceaccount/add-key
    method: POST
    data_selector: key
    params: {}
- name: clone
  endpoint:
    path: /serviceaccount/clone
    method: POST
    data_selector: clone
    params: {}
- name: create
  endpoint:
    path: /serviceaccount/create
    method: POST
    data_selector: service_account
    params: {}
- name: delete
  endpoint:
    path: /serviceaccount/delete
    method: DELETE
    data_selector: deleted_accounts
    params: {}
- name: edit
  endpoint:
    path: /serviceaccount/edit
    method: PATCH
    data_selector: edited_account
    params: {}
- name: eventlog
  endpoint:
    path: /serviceaccount/eventlog
    method: GET
    data_selector: event_log
    params: {}
- name: get
  endpoint:
    path: /serviceaccount/get
    method: GET
    data_selector: service_accounts
    params: {}
- name: patch
  endpoint:
    path: /serviceaccount/patch
    method: PATCH
    data_selector: patched_account
    params: {}
- name: permissions
  endpoint:
    path: /serviceaccount/permissions
    method: GET
    data_selector: permissions
    params: {}
- name: query
  endpoint:
    path: /serviceaccount/query
    method: GET
    data_selector: queried_accounts
    params: {}
- name: Keypair
  endpoint:
    path: /keypair
    method: POST
    data_selector: secrets
    params: {}
- name: Opaque
  endpoint:
    path: /opaque
    method: POST
    data_selector: secrets
    params: {}
- name: NATS Account
  endpoint:
    path: /nats-account
    method: POST
    data_selector: secrets
    params: {}
- name: TLS
  endpoint:
    path: /tls
    method: POST
    data_selector: secrets
    params: {}
- name: Username & Password
  endpoint:
    path: /username-password
    method: POST
    data_selector: secrets
    params: {}
- name: serviceaccount_remove_key
  endpoint:
    path: /serviceaccount/remove-key
    method: POST
- name: serviceaccount_tag
  endpoint:
    path: /serviceaccount/tag
    method: POST
- name: controlplane
  endpoint:
    path: /service_accounts/controlplane
    method: GET
    data_selector: resources
- name: User
  endpoint:
    path: /reference/user
    method: GET
- name: volume_set
  endpoint:
    path: /volumeset
    method: GET
    data_selector: volumes
    params: {}
- name: create_volume_snapshot
  endpoint:
    path: /volumeset/-command
    method: POST
    data_selector: snapshot
    params: {}
- name: delete_volume
  endpoint:
    path: /volumeset/-command
    method: POST
    data_selector: deleteVolume
    params: {}
- name: expand_volume
  endpoint:
    path: /volumeset/-command
    method: POST
    data_selector: expandVolume
    params: {}
- name: restore_volume
  endpoint:
    path: /volumeset/-command
    method: POST
    data_selector: restoreVolume
    params: {}
- name: user access-report
  endpoint:
    path: /user/access-report
    method: GET
    data_selector: report
    params: {}
- name: user delete
  endpoint:
    path: /user/delete
    method: DELETE
    data_selector: confirmation
    params: {}
- name: user edit
  endpoint:
    path: /user/edit
    method: PATCH
    data_selector: edited_user
    params: {}
- name: user eventlog
  endpoint:
    path: /user/eventlog
    method: GET
    data_selector: event_logs
    params: {}
- name: user get
  endpoint:
    path: /user/get
    method: GET
    data_selector: users
    params: {}
- name: user invite
  endpoint:
    path: /user/invite
    method: POST
    data_selector: invited_user
    params: {}
- name: user patch
  endpoint:
    path: /user/patch
    method: PATCH
    data_selector: updated_user
    params: {}
- name: user permissions
  endpoint:
    path: /user/permissions
    method: GET
    data_selector: permissions
    params: {}
- name: user query
  endpoint:
    path: /user/query
    method: GET
    data_selector: queried_users
    params: {}
- name: user tag
  endpoint:
    path: /user/tag
    method: POST
    data_selector: tagged_user
    params: {}
- name: user update
  endpoint:
    path: /user/update
    method: PUT
    data_selector: updated_properties
    params: {}
- name: access_report
  endpoint:
    path: /volumeset/access-report
    method: GET
    data_selector: report
    params:
      ref: <ref>
- name: create_volume_set
  endpoint:
    path: /volumeset/create
    method: POST
    data_selector: volume_set
    params:
      name: NAME
      description: Optional description, defaults to the name if not set
      performance_class: general-purpose-ssd
      file_system_type: xfs
      initial_capacity: 10
      enable_autoscaling: false
      max_capacity: 10
      min_free_percentage: 1
      scaling_factor: 1.1
      create_final_snapshot: true
      retention_duration: 7d
      schedule: Snapshot Schedule (UTC)
      tag: Attach tags (e.g., --tag drink=water)
- name: delete_volume_set
  endpoint:
    path: /volumeset/delete
    method: DELETE
    data_selector: deleted
    params:
      ref: <ref...>
- name: edit_volume_set
  endpoint:
    path: /volumeset/edit
    method: PUT
    data_selector: edited
    params:
      ref: <ref>
      replace: false
- name: eventlog_volume_set
  endpoint:
    path: /volumeset/eventlog
    method: GET
    data_selector: event_log
    params:
      ref: <ref>
- name: expand_volume_set
  endpoint:
    path: /volumeset/expand
    method: POST
    data_selector: expanded
    params:
      ref: <ref>
      new_size: <new-size>
      location: A global virtual cloud location
      volume_index: The index of the volume of which a snapshot should be taken
- name: get_volume_set
  endpoint:
    path: /volumeset/get
    method: GET
    data_selector: volume_sets
    params:
      ref: <ref...>
- name: patch_volume_set
  endpoint:
    path: /volumeset/patch
    method: PATCH
    data_selector: patched
    params:
      ref: <ref>
      file: <FILE_NAME>
- name: permissions_volume_set
  endpoint:
    path: /volumeset/permissions
    method: GET
    data_selector: permissions
- name: query_volume_set
  endpoint:
    path: /volumeset/query
    method: GET
    data_selector: query_results
    params:
      QUERY_OPTIONS: <QUERY_OPTIONS>
- name: snapshot_volume_set
  endpoint:
    path: /volumeset/snapshot
    method: POST
    data_selector: snapshot
    params: {}
- name: snapshot_create
  endpoint:
    path: /volumeset/snapshot/create
    method: POST
    data_selector: ''
    params:
      snapshot_name: ''
      location: ''
      volume_index: ''
      tag: ''
- name: snapshot_delete
  endpoint:
    path: /volumeset/snapshot/delete
    method: DELETE
    data_selector: ''
    params:
      snapshot_name: ''
      location: ''
      volume_index: ''
- name: snapshot_get
  endpoint:
    path: /volumeset/snapshot/get
    method: GET
    data_selector: ''
    params:
      snapshot_name: ''
      location: ''
      volume_index: ''
- name: snapshot_restore
  endpoint:
    path: /volumeset/snapshot/restore
    method: POST
    data_selector: ''
    params:
      snapshot_name: ''
      location: ''
      volume_index: ''
- name: tag
  endpoint:
    path: /volumeset/tag
    method: POST
    data_selector: ''
    params:
      tag: ''
      remove: ''
- name: update
  endpoint:
    path: /volumeset/update
    method: PATCH
    data_selector: ''
    params:
      set: ''
- name: volume_delete
  endpoint:
    path: /volumeset/volume/delete
    method: DELETE
    data_selector: ''
    params:
      location: ''
      volume_index: ''
- name: volume_get
  endpoint:
    path: /volumeset/volume/get
    method: GET
    data_selector: ''
    params:
      location: ''
      volume_index: ''
- name: access-report
  endpoint:
    path: /workload/access-report
    method: GET
    data_selector: report
    params: {}
- name: clone
  endpoint:
    path: /workload/clone
    method: POST
    data_selector: clone
    params: {}
- name: connect
  endpoint:
    path: /workload/connect
    method: POST
    data_selector: connection
    params: {}
- name: create
  endpoint:
    path: /workload/create
    method: POST
    data_selector: workload
    params: {}
- name: delete
  endpoint:
    path: /workload/delete
    method: DELETE
    data_selector: deletion
    params: {}
- name: edit
  endpoint:
    path: /workload/edit
    method: PUT
    data_selector: edit
    params: {}
- name: eventlog
  endpoint:
    path: /workload/eventlog
    method: GET
    data_selector: event_log
    params: {}
- name: get
  endpoint:
    path: /workload/get
    method: GET
    data_selector: workloads
    params: {}
- name: get-deployments
  endpoint:
    path: /workload/get-deployments
    method: GET
    data_selector: deployments
    params: {}
- name: start
  endpoint:
    path: /workload/start
    method: POST
    data_selector: start
    params: {}
- name: stop
  endpoint:
    path: /workload/stop
    method: POST
    data_selector: stop
    params: {}
- name: AWS Details
  endpoint:
    path: /reference/cloudaccount/aws
    method: GET
    data_selector: details
    params: {}
- name: Azure Details
  endpoint:
    path: /reference/cloudaccount/azure
    method: GET
    data_selector: details
    params: {}
- name: GCP Details
  endpoint:
    path: /reference/cloudaccount/gcp
    method: GET
    data_selector: details
    params: {}
- name: domain
  endpoint:
    path: /api/domains
    method: GET
    data_selector: domains
    params: {}
- name: hello
  endpoint:
    path: /v1/secret/data/app
    method: GET
    data_selector: data
    params: {}
- name: hello2
  endpoint:
    path: /path/to/secret
    method: GET
    data_selector: user
    params: {}
- name: hello3
  endpoint:
    path: /path/to/secret
    method: GET
    data_selector: ''
    params: {}
- name: one-password-secret
  endpoint:
    path: /vault/item/password
    method: GET
    data_selector: ''
    params: {}
- name: doppler-secret
  endpoint:
    path: /project/config/secret
    method: GET
    data_selector: ''
    params: {}
- name: groups
  endpoint:
    path: /groups
    method: GET
- name: gvc
  endpoint:
    path: /gvc
    method: POST
    data_selector: spec
- name: aws_identity
  endpoint:
    path: /org/my-org/cloudaccount/aws-prod
    method: GET
    data_selector: identity
- name: gcp_identity
  endpoint:
    path: /org/my-org/cloudaccount/gcp-prod
    method: GET
    data_selector: identity
- name: azure_identity
  endpoint:
    path: /org/my-org/cloudaccount/azure-prod
    method: GET
    data_selector: identity
- name: nats_identity
  endpoint:
    path: /org/my-org/cloudaccount/nats-prod
    method: GET
    data_selector: identity
- name: ip_set
  endpoint:
    path: /ipset
    method: GET
    data_selector: ipSets
    params: {}
- name: locations
  endpoint:
    path: /locations
    method: GET
    data_selector: locations
- name: Agent
  endpoint:
    path: /reference/cli#agent-permissions
- name: Audit Context
  endpoint:
    path: /reference/cli#auditctx-permissions
- name: Cloud Account
  endpoint:
    path: /reference/cli#cloudaccount-permissions
- name: Domain
  endpoint:
    path: /reference/cli#domain-permissions
- name: Group
  endpoint:
    path: /reference/cli#group-permissions
- name: GVC
  endpoint:
    path: /reference/cli#gvc-permissions
- name: Identity
  endpoint:
    path: /reference/cli#identity-permissions
- name: Image
  endpoint:
    path: /reference/cli#image-permissions
- name: Location
  endpoint:
    path: /reference/cli#location-permissions
- name: Org
  endpoint:
    path: /reference/cli#org-permissions
- name: Policy
  endpoint:
    path: /reference/cli#policy-permissions
- name: Quota
  endpoint:
    path: /reference/cli#quota-permissions
- name: Secret
  endpoint:
    path: /reference/cli#secret-permissions
- name: Service Account
  endpoint:
    path: /reference/cli#serviceaccount-permissions
- name: User
  endpoint:
    path: /reference/cli#user-permissions
- name: Volume Set
  endpoint:
    path: /reference/cli#volumeset-permissions
- name: Workload
  endpoint:
    path: /reference/cli#workload-permissions
- name: quotas
  endpoint:
    path: /reference/quota
    method: GET
    data_selector: resources
- name: keypair
  endpoint:
    path: /reference/workload#environment-variables
    method: GET
    data_selector: records
    params: {}
- name: opaque
  endpoint:
    path: /reference/workload#environment-variables
    method: GET
    data_selector: records
    params: {}
- name: nats_account
  endpoint:
    path: /reference/workload#environment-variables
    method: GET
    data_selector: records
    params: {}
- name: tls
  endpoint:
    path: /reference/workload#environment-variables
    method: GET
    data_selector: records
    params: {}
- name: username_password
  endpoint:
    path: /reference/workload#environment-variables
    method: GET
    data_selector: records
    params: {}
- name: controlplane
  endpoint:
    path: /api/service-accounts/controlplane
    method: GET
    data_selector: resources
- name: org
  endpoint:
    path: /reference/org
    method: GET
- name: group
  endpoint:
    path: /reference/group
    method: GET
- name: policy
  endpoint:
    path: /reference/policy
    method: GET
- name: access_report
  endpoint:
    path: /reference/access_report
    method: GET
- name: volume_set
  endpoint:
    path: /volumeset
    method: GET
    data_selector: volumesets
    params: {}
notes:
- Agents run in active-passive mode. If an active agent misses a set amount of heartbeats,
  it is considered offline and replaced by a redundant agent.
- The recommended method to configure a highly available agent deployment is by using
  an instance group.
- 'New workload subcommands: connect: Connect to a replica of the workload.'
- 'get-replicas: Get the replicas of the referenced workload in a given location.'
- A running Workload is required to configure a domain.
- Domain name must be accessible to update DNS records.
- The CLI requires you to log in before executing any commands.
- Workloads are hardened by default and do not allow access from other Workloads without
  firewall configuration.
- Each org can have multiple GVCs, each with its own unique set of locations.
- Default domain name cpln.app will be used if an org does not have any domains configured.
- Multi-Factor Authentication (MFA) is recommended.
- 'The prefix will be the folder where the logs will be written. The folder structure
  will follow the format: PREFIX/ORG_NAME/YEAR/MONTH/DAY/HOUR/MINUTE/LOG_FILE.jsonl.
  The .jsonl file will contain ~1-3k of single line log entries in JSON.'
- AWS credentials are required to ship logs to CloudWatch.
- After the configuration is complete, log entries will be available at CloudWatch
  within a few minutes.
- Requires an authorization token to process data and logs
- Listener Host value is needed for configuration
- Managed Kubernetes handles the tasks required to maintain a healthy Kubernetes cluster.
- Kubernetes version 1.28.2
- 'IAM Role naming pattern: cpln-mk8s-${ORG}'
- 'IAM Policy naming pattern: cpln-mk8s-${ORG}'
- 'Cluster region: eu-central-1'
- 'Kubernetes version: 1.30.3'
- Cluster’s Kubernetes control plane will be managed in the gcp-us-east1 location.
- Utilizes the Default rule, allowing public access to the Kubernetes API.
- Label at least one nodegroup in the cluster with `cpln.io/nodeType=core`.
- Minimum 2 CPUs per node (4 CPUs or more recommended)
- Minimum 8 GB of RAM per node (16 GB or more recommended)
- Minimum 2 nodes per cluster (3 or more recommended)
- Full network connectivity between all nodes in the cluster (either public or private
  network)
- Enable egress access for all nodes
- Exclude service-mesh from your cluster.
- A working load balancer controller so that at least one service of type LoadBalancer
  is able to obtain a public or private ip address
- Requires setup of connected app in api
- To enable SAML authentication for your organization in Control Plane, you will need
  the assistance of our support team.
- Requires Node.js version 16+
- Most of the commands require that the org and/or the GVC be referred to using the
  --org and/or --gvc options.
- Built-in tags, which begin with cpln/*, can’t be modified.
- 'The --set option allows the modification of the following audit context properties:
  description and tags.'
- Maximum number of records to show is 50 by default.
- Requests can override the authorization token
- Requests can ignore TLS errors
- The default profile can be set using the `cpln profile set-default` command or by
  setting the CPLN_PROFILE environment variable
- The default organization can be set in your profile by using the `cpln profile update`
  command
- The default global virtual cloud can be set in your profile by using the `cpln profile
  update` command
- 'The --set option allows the modification of the following agent properties: description
  and tags.'
- Command options require specific parameters such as --file and --protocol.
- The resource reference is usually the name of the resource.
- Default output format is json
- Default maximum records to show is 50
- Default colorize option is true
- Only accepts IP addresses or localhost as a value for addresses.
- If localhost is supplied, cpln will try to bind on both 127.0.0.1 and ::1.
- Uses OAuth2 with refresh token — requires setup of connected app in api
- Some objects like Contact may return nulls in deeply nested fields
- Default output format is JSON.
- Use --max to control the number of records returned.
- Assuming there is a docker compose project in the current directory
- 'The `--set` option allows the modification of the following identity properties:
  description and tags.'
- The `--set` option allows the modification of the following user properties
- Some objects may return nulls in deeply nested fields
- The ratio between CPU to Memory can be at most 1/8.
- The service account name for the operator is required.
- When creating a cloud account, instructions are provided on how to create a bridge
  account at the cloud provider with minimum access permissions.
- Domains are scoped to an Org and are associated with one GVC.
- Domains configured at Control Plane are automatically secured using TLS certificates.
- 'The default TLS protocol version is minProtocolVersion: TLSV1_2.'
- The minimum TLS protocol version is TLSV1_0.
- The minimum version should be set as high as possible, with a maximum supported
  value of TLSV1_3.
- Client certificates included in a request to a Domain can be configured to be forwarded
  to the destination Workload.
- Dedicated load balancer can cause a brief period of connectivity failure during
  DNS propagation.
- KEDA must be enabled for workloads to scale based on external events.
- The default profile can be set using the `cpln profile set-default` command or by
  setting the CPLN_PROFILE environment variable.
- The default organization can be set in your profile by using the `cpln profile update`
  command.
- No Pull Secrets are required when configuring your workload.
- Locations are scoped to an org and the org administrator can turn off/on the locations
  that are permitted when configuring a GVC.
- The log retention period for logs stored at Control Plane is 30 days by default
  and can be adjusted for each Org.
- The quotas page will display the currently used and allowed allocation of Control
  Plane resources for your org.
- A keypair secret consists of a secret key, public key, and passphrase (if encrypted).
- Opaque secrets can perform base64 decode at runtime.
- NATS Account secrets consist of an Account ID and Private Key.
- TLS secrets consist of a Key, Certificate, and optional Chain Certificate.
- The shared filesystem does not support snapshots.
- Volumes cannot be expanded to a smaller size.
- Cloud accounts are scoped to an org and used in conjunction with identities to set
  up cloud access rules.
- Workloads can access cloud resources without additional setup.
- Domains are automatically secured using TLS certificates, load balanced, and DNS
  geo-routed.
- If there is an attempt to disable the TLS settings on a domain, it will always revert
  to the default configuration unless the domain is using a non-standard port and
  a non-HTTP protocol.
- Uses OAuth2 for authentication
- IP addresses must be explicitly released once they are no longer needed.
- An IP address will not be released unless it is no longer in use.
- The list of IPs may change when underlying infrastructure changes.
- A user can be a member of one or more Orgs.
- The shared filesystem does not support snapshots
- Volume capacity cannot be decreased
errors:
- '502 Bad Gateway: Indicates that the client cannot connect to the server'
- 'REQUEST_LIMIT_EXCEEDED: Throttle API calls or reduce frequency'
- 'QUERY_TIMEOUT: Break down filters or add selectivity'
- '401 Unauthorized: Recheck OAuth scopes or token expiration'
- '401 Unauthorized: Recheck API key or token expiration'
- Maximum number of records to show is less than 1 will return all records.
- '401 Unauthorized: Recheck authorization token.'
- '400 Bad Request: Check your input parameters.'
- 'Domain name validation failed: Check if the domain name follows standard DNS rules.'
- 'Certificate Renewal Blocked: The Domain’s certificate renewal is blocked.'
- 'Domain Used by GVC: This Domain is currently in use by a GVC using the legacy configuration
  of the GVC `spec.domain` property.'
- 'Invalid GVC: At least one of the configured routes does not map to a valid GVC.'
- 'No Valid Routes Configured: No valid routes are configured for the Domain.'
- 'Disallowed Port or Protocol: A port other than 443 or 80 is used, or the protocol
  is set to TCP and the GVC assigned is not configured with a dedicated load balancer.'
- 'Invalid Workload: A route is not mapped to a valid workload and will not be included
  in the configuration.'
- 'HostPrefix Ignored: If the GVC does not have dedicated load balancer enabled and
  the Domain is not configured for wildcard support, any hostPrefix for a route is
  ignored.'
- 'Error: exitCode: 1 message: standard_init_linux.go:228: exec user process caused:
  exec format error'
- 'Volume not found: Check volume index or location.'
- 'Insufficient capacity: Ensure maxCapacity is not exceeded.'
- '401 Unauthorized: Recheck permissions for the user.'
- Maximum of 150 routes per domain
- Routes must be unique (no duplicate prefix/regex and host combinations)
- All routes must reference workloads within the same GVC
- Maximum of 10 ports per domain
- Each port can have a maximum of 150 routes
- 'Apex domains can only use CNAME mode (dnsMode: cname)'
- NS mode requires DNS-01 certificate challenge type
- CNAME mode with subdomain routing requires custom server certificate
- Cannot configure both gvcLink and workloadLink on the same domain
auth_info:
  mentioned_objects:
  - Service Account
  - User
  - Group
  - Workload Identities
  - Entity ID
  - SSO URL
  - Certificate
  - ServiceAccount
  - Policy
  - Identity
client:
  base_url: https://console.cpln.io
  auth:
    type: oauth2
source_metadata: null
