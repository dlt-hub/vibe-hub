resources:
- name: event_summary
  endpoint:
    path: /api/v1/event/summary.json
    method: POST
    data_selector: events_chart_stats
    params: {}
- name: event_summary
  endpoint:
    path: /api/v1/event/summary.json
    method: POST
    data_selector: object
- name: campaign
  endpoint:
    path: /reference/get_api-v2-campaigns-json
    method: GET
- name: event
  endpoint:
    path: /reference/get_api-v1-event-debug
    method: GET
- name: customer
  endpoint:
    path: /reference/get_api-v1-customers
    method: GET
- name: segment
  endpoint:
    path: /reference/get_api-v1-segments-list
    method: GET
- name: adapter
  endpoint:
    path: /reference/get_api-v1-account-adapters
    method: GET
- name: campaigns
  endpoint:
    path: /api/v1/campaigns/execute
    method: POST
    data_selector: null
    params: {}
- name: customer
  endpoint:
    path: /api/v1/customers
    method: GET
    data_selector: records
    params: {}
- name: create_catalog
  endpoint:
    path: /api/v1/catalogs
    method: POST
    data_selector: catalog_uuid
- name: add_items_to_catalog
  endpoint:
    path: /api/v1/catalogs/<CATALOG UUID>.json
    method: PUT
    data_selector: products
- name: event
  endpoint:
    path: /api/v1/event
    method: POST
    data_selector: events
- name: bulk_events
  endpoint:
    path: /api/v1/bulkevents
    method: POST
    data_selector: events
- name: event_attributes
  endpoint:
    path: /event-attributes
    method: POST
    data_selector: data
    params: {}
- name: Firebase Cloud Messaging
  endpoint:
    path: /docs/cloud-messaging/android/client
    method: GET
    data_selector: permissions
    params: {}
- name: android_app_registration
  endpoint:
    path: /docs/register-your-android-app-with-blueshift
    method: POST
    data_selector: registration_info
- name: event
  endpoint:
    path: /events
    method: POST
    data_selector: records
- name: events
  endpoint:
    path: /track/events
    method: POST
    data_selector: events
    params: {}
- name: mobile_inbox
  endpoint:
    path: /mobile/inbox
    method: GET
    data_selector: messages
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: customer_data
  endpoint:
    path: /api/customer
    method: GET
    data_selector: data
    params: {}
- name: event_data
  endpoint:
    path: /api/event
    method: POST
    data_selector: data
    params: {}
- name: single_app_account
  endpoint:
    path: /register-ios-app
    method: POST
    data_selector: adapter
    params:
      application_name: unique_app_name
      bundle_id: unique_bundle_id
      environment: Production
      pem_file: path_to_pem_file
      pem_file_password: password_for_pem_file
- name: multi_app_account
  endpoint:
    path: /register-ios-app
    method: POST
    data_selector: adapter
    params:
      application_name: unique_app_name
      bundle_id: unique_bundle_id
      environment: Production
      pem_file: path_to_pem_file
      pem_file_password: password_for_pem_file
- name: user_info
  endpoint:
    path: /user/info
    method: POST
    data_selector: user
    params: {}
- name: identify_user
  endpoint:
    path: /user/identify
    method: POST
    data_selector: identify
    params: {}
- name: track_event
  endpoint:
    path: /track/event
    method: POST
    data_selector: event_data
    params: {}
- name: live_content
  endpoint:
    path: /fetch/live-content
    method: GET
    data_selector: content
    params: {}
- name: customer_data
  endpoint:
    path: /services/data/vXX.X/sobjects/CustomerData
    method: GET
    data_selector: records
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: mobile_inbox
  endpoint:
    path: /inbox
    method: GET
    data_selector: messages
    params: {}
- name: push_notifications
  endpoint:
    path: /api/push_notifications
    method: POST
    data_selector: notifications
    params: {}
- name: in_app_messages
  endpoint:
    path: /in-app-messages
    method: GET
    data_selector: records
    params: {}
- name: push_notifications
  endpoint:
    path: /api/push_notifications
    method: POST
    data_selector: response
    params: {}
- name: in_app_messages
  endpoint:
    path: /api/in_app_messages
    method: GET
    data_selector: messages
    params: {}
- name: deep_links
  endpoint:
    path: /api/deep_links
    method: GET
    data_selector: links
    params: {}
- name: cordova_plugin
  endpoint:
    path: /blueshifts-cordova-plugin
    method: GET
    data_selector: plugin_data
- name: in_app_messages
  endpoint:
    path: /in_app_messages
    method: GET
    data_selector: messages
- name: live_content
  endpoint:
    path: /live_content
    method: GET
    data_selector: content
- name: campaigns
  endpoint:
    path: /reference/get_api-v2-campaigns-json
    method: GET
    data_selector: records
- name: events
  endpoint:
    path: /reference/get_api-v1-event-debug
    method: GET
    data_selector: records
- name: customers
  endpoint:
    path: /reference/get_api-v1-customers
    method: GET
    data_selector: records
- name: segments
  endpoint:
    path: /reference/get_api-v1-segments-list
    method: GET
    data_selector: records
- name: adapters
  endpoint:
    path: /reference/get_api-v1-account-adapters
    method: GET
    data_selector: records
- name: tags
  endpoint:
    path: /reference/get_api-v1-tag-contexts-list
    method: GET
    data_selector: records
- name: campaigns_execute
  endpoint:
    path: /api/v1/campaigns/execute
    method: POST
- name: campaigns
  endpoint:
    path: /reference/get_api-v2-campaigns-json
    method: GET
- name: events
  endpoint:
    path: /reference/get_api-v1-event-debug
    method: GET
- name: customers
  endpoint:
    path: /reference/get_api-v1-customers
    method: GET
- name: segments
  endpoint:
    path: /reference/get_api-v1-segments-list
    method: GET
- name: campaigns
  endpoint:
    path: /reference/get_api-v2-campaigns-json
    method: GET
- name: event
  endpoint:
    path: /reference/get_api-v1-event-history
    method: GET
- name: customer
  endpoint:
    path: /reference/get_api-v1-customers-uuid
    method: GET
- name: create_campaign
  endpoint:
    path: /api/v1/campaigns/{campaign_type}
    method: POST
- name: campaign
  endpoint:
    path: /campaigns
    method: POST
    data_selector: campaign
    params: {}
- name: update_campaign_schedule
  endpoint:
    path: /api/v1/campaigns/{campaign_uuid}/update_schedule
    method: PATCH
    data_selector: success
    params:
      campaign_uuid: string
      startdate: string (ISO 8601)
- name: launch_campaign
  endpoint:
    path: /api/v1/campaigns/{campaign_uuid}/launch
    method: PATCH
    data_selector: ''
    params: {}
- name: pause_campaign
  endpoint:
    path: /api/v1/campaigns/{campaign_uuid}/pause
    method: PATCH
- name: trigger_campaign
  endpoint:
    path: /api/v1/campaigns/execute
    method: POST
    data_selector: response
    params: {}
- name: bulk_trigger_campaigns
  endpoint:
    path: /api/v1/campaigns/bulk_execute
    method: POST
- name: performance_summary
  endpoint:
    path: /api/v1/campaigns.json
    method: GET
    data_selector: performance_data
    params:
      start_time: date-time
      end_time: date-time
      status: string
- name: campaigns
  endpoint:
    path: /api/v1/campaigns.json
    method: GET
    data_selector: campaigns
- name: detailed_report
  endpoint:
    path: /api/v1/campaigns/{campaign_uuid}/detail.json
    method: GET
    data_selector: records
    params:
      campaign_uuid: string
      end_time: date-time
      start_time: date-time
- name: detailed_report_without_stats
  endpoint:
    path: /api/v1/campaigns/{campaign_uuid}.json
    method: GET
- name: detailed_report
  endpoint:
    path: /api/v1/campaigns/{campaign_uuid}.json
    method: GET
    data_selector: response
- name: campaigns
  endpoint:
    path: /api/v2/campaigns.json
    method: GET
- name: campaigns
  endpoint:
    path: /api/v2/campaigns.json
    method: GET
    data_selector: array of objects
    params: {}
- name: archive_campaign
  endpoint:
    path: /api/v1/campaigns/{campaign_uuid}/archive
    method: PUT
- name: unarchive_campaign
  endpoint:
    path: /api/v1/campaigns/{campaign_uuid}/unarchive
    method: PUT
- name: bulk_archive_campaigns
  endpoint:
    path: /api/v1/campaigns/bulk_archive
    method: PUT
    data_selector: failed
    params: {}
- name: bulk_unarchive_campaigns
  endpoint:
    path: /api/v1/campaigns/bulk_unarchive
    method: PUT
    data_selector: failed
    params: {}
- name: campaign_execution_status_webhook
  endpoint:
    path: /reference/webhook-for-campaign-execution-status
    method: POST
- name: campaign_execution_status
  endpoint:
    path: /reference/webhook-for-campaign-execution-status
    method: POST
    data_selector: payload
    params: {}
- name: event
  endpoint:
    path: /api/v1/event
    method: POST
    data_selector: status
- name: bulk_events
  endpoint:
    path: /api/v1/bulkevents
    method: POST
- name: most_recent_event
  endpoint:
    path: /api/v1/event/debug
    method: GET
    data_selector: events
- name: event_debug
  endpoint:
    path: /api/v1/event/debug
    method: GET
    data_selector: object
- name: debug_event_exports
  endpoint:
    path: /api/v1/data_connectors/:data_connector_uuid/debug
    method: GET
    data_selector: events
- name: success_events
  endpoint:
    path: /success_events
    method: POST
    data_selector: success
    params: {}
- name: failure_events
  endpoint:
    path: /failure_events
    method: POST
    data_selector: failures
    params: {}
- name: debug_event_exports
  endpoint:
    path: /api/v1/data_connectors/:data_connector_uuid/debug
    method: GET
    data_selector: success
- name: event_history
  endpoint:
    path: /api/v1/event/history
    method: GET
    data_selector: event_history
    params:
      event_name: app_install
      limit: 50
- name: live_content
  endpoint:
    path: /reference/post_live
    method: POST
- name: slots
  endpoint:
    path: /reference/get_api-v1-onsite-slots-json
    method: GET
- name: event_history
  endpoint:
    path: /reference/get_api-v1-event-history
    method: GET
    data_selector: records
- name: live_content
  endpoint:
    path: /reference/live-content
    method: POST
    data_selector: records
- name: live_content
  endpoint:
    path: /live
    method: POST
- name: live_content_slots
  endpoint:
    path: /api/v1/onsite_slots.json
    method: GET
    data_selector: ''
    params: {}
- name: live_content_slots
  endpoint:
    path: /api/v1/onsite_slots.json
    method: GET
- name: email_templates
  endpoint:
    path: /api/v1/email_templates.json
    method: GET
    data_selector: templates
    params: {}
- name: email_template
  endpoint:
    path: /api/v1/email_templates.json
    method: GET
    data_selector: templates
- name: email_template
  endpoint:
    path: /api/v1/email_templates.json
    method: POST
- name: email_template
  endpoint:
    path: /api/v1/email_templates.json
    method: POST
    data_selector: ''
    params:
      skip_user_on_external_fetch_error: true
- name: email_template
  endpoint:
    path: /api/v1/email_templates/{TEMPLATE_UUID}.json
    method: GET
- name: email_template
  endpoint:
    path: /api/v1/email_templates/TEMPLATE_UUID.json
    method: GET
- name: email_template
  endpoint:
    path: /api/v1/email_templates/{TEMPLATE_UUID}.json
    method: PUT
- name: update_email_template
  endpoint:
    path: /api/v1/email_templates/{TEMPLATE_UUID}.json
    method: PUT
    data_selector: null
    params: {}
- name: send_test_mail
  endpoint:
    path: /api/v1/email_templates/test_send.json
    method: POST
- name: test_mail
  endpoint:
    path: /api/v1/email_templates/test_send.json
    method: POST
    data_selector: template
    params: {}
- name: push_templates
  endpoint:
    path: /api/v1/push_templates.json
    method: GET
    data_selector: templates
    params: {}
- name: push_templates
  endpoint:
    path: /api/v1/push_templates.json
    method: GET
    data_selector: templates
    params: {}
- name: push_template
  endpoint:
    path: /api/v1/push_templates.json
    method: POST
- name: push_template
  endpoint:
    path: /api/v1/push_templates.json
    method: POST
    data_selector: push_template
- name: push_test_message
  endpoint:
    path: /api/v1/push_templates/test_push.json
    method: POST
- name: test_push
  endpoint:
    path: /api/v1/push_templates/test_push.json
    method: POST
- name: push_template
  endpoint:
    path: /api/v1/push_templates/{template_uuid}
    method: PUT
- name: push_template
  endpoint:
    path: /api/v1/push_templates/{template_uuid}
    method: PUT
    data_selector: push_template
    params: {}
- name: sms_template
  endpoint:
    path: /api/v1/sms_templates.json
    method: GET
- name: sms_template
  endpoint:
    path: /api/v1/sms_templates.json
    method: GET
    data_selector: array of objects
- name: sms_templates
  endpoint:
    path: /api/v1/sms_templates.json
    method: POST
- name: sms_template
  endpoint:
    path: /api/v1/sms_templates/{template_uuid}
    method: PUT
- name: send_test_sms
  endpoint:
    path: /api/v1/sms_templates/test_send.json
    method: POST
- name: test_sms
  endpoint:
    path: /api/v1/sms_templates/test_send.json
    method: POST
    data_selector: response
    params: {}
- name: shared_assets
  endpoint:
    path: /api/v1/shared_assets.json
    method: GET
    data_selector: assets
- name: shared_assets
  endpoint:
    path: /shared_assets.json
    method: GET
    data_selector: array of objects
- name: catalog
  endpoint:
    path: /api/v1/catalogs
    method: POST
    data_selector: catalog_uuid
- name: catalogs
  endpoint:
    path: /api/v1/catalogs
    method: POST
- name: catalogs
  endpoint:
    path: /api/v1/catalogs
    method: GET
    data_selector: catalogs
- name: catalogs
  endpoint:
    path: /catalogs
    method: GET
    data_selector: items
- name: add_items_to_catalog
  endpoint:
    path: /api/v1/catalogs/{catalog_uuid}.json
    method: PUT
- name: catalog_details
  endpoint:
    path: /api/v1/catalogs/{catalog_uuid}.json
    method: GET
- name: customer
  endpoint:
    path: /api/v1/customers
    method: GET
    data_selector: user
    params:
      email: string
- name: customer
  endpoint:
    path: /api/v1/customers
    method: POST
    data_selector: ''
    params: {}
- name: customer
  endpoint:
    path: /api/v1/customers
    method: POST
    data_selector: object
    params: {}
- name: customer_search
  endpoint:
    path: /api/v1/customers
    method: GET
    data_selector: object
    params: {}
- name: customer
  endpoint:
    path: /api/v1/customers/{uuid}
    method: GET
    data_selector: details
    params: {}
- name: customer
  endpoint:
    path: /api/v1/customers/{uuid}
    method: GET
    data_selector: object
- name: bulk_create_update_customer
  endpoint:
    path: /api/v1/customers/bulk
    method: POST
- name: stop_tracking_customer
  endpoint:
    path: /api/v1/customers/forget
    method: POST
- name: stop_tracking_customer
  endpoint:
    path: /api/v1/customers/forget
    method: POST
    data_selector: response
    params: {}
- name: start_tracking_customer
  endpoint:
    path: /api/v1/customers/unforget
    method: POST
- name: start_tracking_customer
  endpoint:
    path: /api/v1/customers/unforget
    method: POST
    data_selector: response
- name: delete_customer
  endpoint:
    path: /api/v1/customers/delete
    method: POST
    data_selector: response
    params: {}
- name: merge_customers
  endpoint:
    path: /api/v1/customers/merge
    method: POST
- name: segments
  endpoint:
    path: /api/v1/segments/list
    method: GET
    data_selector: segments
    params: {}
- name: segments
  endpoint:
    path: /api/v1/segments/list
    method: GET
    data_selector: segments
- name: segment_membership_counts
  endpoint:
    path: /api/v1/segments/{segment_uuid}/matching_users.json
    method: GET
    params:
      refresh: boolean
      channels: string
      bypass_global: boolean
- name: create_empty_list
  endpoint:
    path: /api/v1/custom_user_lists/create
    method: POST
- name: add_user_to_list
  endpoint:
    path: /api/v1/custom_user_lists/add_user_to_list/{list_id}
    method: PUT
    data_selector: responses
    params: {}
- name: remove_user_from_list
  endpoint:
    path: /api/v1/custom_user_lists/remove_user_from_list/{list_id}
    method: PUT
    data_selector: responses
    params: {}
- name: overwrite_users_in_a_list
  endpoint:
    path: /api/v1/custom_user_lists/overwrite_list/{list_id}
    method: PUT
- name: overwrite_users
  endpoint:
    path: /api/v1/custom_user_lists/overwrite_list/{list_id}
    method: PUT
    data_selector: response
    params:
      list_id: integer
      s3_file_path: string
- name: seed_lists
  endpoint:
    path: /api/v1/custom_user_lists/seed_lists
    method: GET
    data_selector: ''
- name: seed_lists
  endpoint:
    path: /api/v1/custom_user_lists/seed_lists
    method: GET
- name: customer_list_details
  endpoint:
    path: /api/v1/custom_user_lists/id/{custom_user_list_id}
    method: GET
- name: bulk_add_users_to_list
  endpoint:
    path: /api/v1/custom_user_lists/bulk_add_users_to_list/{list_id}
    method: PUT
- name: bulk_add_users_to_list
  endpoint:
    path: /api/v1/custom_user_lists/bulk_add_users_to_list/{list_id}
    method: PUT
    data_selector: ADD
    params: {}
- name: bulk_remove_users_from_list
  endpoint:
    path: /api/v1/custom_user_lists/bulk_remove_users_from_list/{list_id}
    method: PUT
- name: bulk_remove_users_from_list
  endpoint:
    path: /api/v1/custom_user_lists/bulk_remove_users_from_list/{list_id}
    method: PUT
- name: adapters
  endpoint:
    path: /api/v1/account_adapters
    method: GET
- name: adapters
  endpoint:
    path: /api/v1/account_adapters
    method: GET
    data_selector: object
- name: tags
  endpoint:
    path: /api/v1/tag_contexts/list
    method: GET
- name: tag_contexts
  endpoint:
    path: /api/v1/tag_contexts/list
    method: GET
    data_selector: array of objects
- name: customer_events
  endpoint:
    path: /api/v1/customer_search/show_events
    method: GET
    params:
      uuid: string
- name: customer_events
  endpoint:
    path: /api/v1/customer_search/show_events
    method: GET
    data_selector: array of objects
- name: Interest Alerts
  endpoint:
    path: /reference/interest-alerts
    method: GET
- name: subscribe_interest
  endpoint:
    path: /reference/subscribe-to-a-topic
    method: POST
- name: alert_api
  endpoint:
    path: /reference/post_api-v1-interests-alert
    method: POST
- name: Campaigns
  endpoint:
    path: /reference/post_api-v1-create-a-campaign
    method: POST
- name: Event
  endpoint:
    path: /reference/post_api-v1-event
    method: POST
- name: Live content
  endpoint:
    path: /reference/post_live
    method: POST
- name: Email template
  endpoint:
    path: /reference/post_api-v1-email-templates-json
    method: POST
- name: Push template
  endpoint:
    path: /reference/post_api-v1-push-templates-json
    method: POST
- name: SMS template
  endpoint:
    path: /reference/post_api-v1-sms-templates-json
    method: POST
- name: Shared assets
  endpoint:
    path: /reference/get_api-v1-list-shared-assets
    method: GET
- name: Catalog
  endpoint:
    path: /reference/post_api-v1-catalogs
    method: POST
- name: Customer
  endpoint:
    path: /reference/post_api-v1-customers
    method: POST
- name: Segments
  endpoint:
    path: /reference/get_api-v1-segments-list
    method: GET
- name: Custom user lists
  endpoint:
    path: /reference/post_api-v1-custom-user-lists-create
    method: POST
- name: Adapters
  endpoint:
    path: /reference/get_api-v1-account-adapters
    method: GET
- name: Tags
  endpoint:
    path: /reference/get_api-v1-tag-contexts-list
    method: GET
- name: Search
  endpoint:
    path: /reference/get_api-v1-customer-search-show-events
    method: GET
- name: Interest Alerts
  endpoint:
    path: /reference/interest-alerts
    method: GET
- name: External Fetch
  endpoint:
    path: /reference/get_api-v1-external-fetches-json
    method: GET
- name: Promotions
  endpoint:
    path: /reference/put_api-v1-promotions-promotion-uuid-add-promocodes
    method: PUT
- name: Email Validation
  endpoint:
    path: /reference/get_api-v1-emails-validate
    method: GET
- name: event
  endpoint:
    path: /api/v1/event
    method: POST
    data_selector: event
    params: {}
- name: update_alert_customers
  endpoint:
    path: /api/v1/interests/alert
    method: POST
- name: campaigns
  endpoint:
    path: /reference/get_api-v2-campaigns-json
    method: GET
- name: customers
  endpoint:
    path: /reference/get_api-v1-customers
    method: GET
- name: unsubscribe_interest
  endpoint:
    path: /reference/post_api-v1-event
    method: POST
    data_selector: event
    params: {}
- name: customer_subscriptions
  endpoint:
    path: /reference/get_api-v1-interests-user-subscriptions
    method: GET
    data_selector: subscriptions
    params: {}
- name: customer_subscriptions
  endpoint:
    path: /api/v1/interests/user_subscriptions
    method: GET
    data_selector: topics
    params: {}
- name: external_fetch_templates
  endpoint:
    path: /api/v1/external_fetches.json
    method: GET
    data_selector: records
    params: {}
- name: external_fetches
  endpoint:
    path: /api/v1/external_fetches.json
    method: GET
- name: external_fetch_template
  endpoint:
    path: /api/v1/external_fetches.json
    method: POST
- name: external_fetch_template
  endpoint:
    path: /api/v1/external_fetches.json
    method: POST
    data_selector: response
    params: {}
- name: external_fetch_template
  endpoint:
    path: /api/v1/external_fetches/{template_uuid}
    method: PUT
- name: external_fetch_template
  endpoint:
    path: /api/v1/external_fetches/{template_uuid}
    method: PUT
    data_selector: response
    params: {}
- name: add_promo_codes
  endpoint:
    path: /api/v1/promotions/{promotion_uuid}/add_promocodes
    method: PUT
- name: overwrite_promo_codes
  endpoint:
    path: /api/v1/promotions/{promotion_uuid}/overwrite
    method: PUT
- name: email_validation
  endpoint:
    path: /api/v1/emails/validate
    method: GET
    data_selector: result
    params:
      email: string
- name: email_validation
  endpoint:
    path: /api/v1/emails/validate
    method: GET
- name: email_validation
  endpoint:
    path: /api/v1/emails/bulk_validate
    method: POST
    data_selector: result
    params: {}
- name: email_validation
  endpoint:
    path: /api/v1/emails/bulk_validate
    method: POST
- name: create_campaign
  endpoint:
    path: /api/v1/campaigns/{campaign_type}
    method: POST
- name: campaign
  endpoint:
    path: /campaigns
    method: POST
    data_selector: campaign
    params: {}
- name: live_content
  endpoint:
    path: /reference/post_live
    method: POST
- name: event_history
  endpoint:
    path: /reference/get_api-v1-event-history
    method: GET
- name: live_content
  endpoint:
    path: /reference/live-content
    method: POST
- name: email_templates
  endpoint:
    path: /api/v1/email_templates.json
    method: GET
    data_selector: records
    params: {}
- name: email_template
  endpoint:
    path: /api/v1/email_templates.json
    method: GET
    data_selector: templates
    params: {}
- name: push_templates
  endpoint:
    path: /api/v1/push_templates.json
    method: GET
    data_selector: templates
- name: push_templates
  endpoint:
    path: /push_templates.json
    method: GET
    data_selector: array of objects
- name: sms_template
  endpoint:
    path: /api/v1/sms_templates.json
    method: GET
    data_selector: templates
    params: {}
- name: shared_assets
  endpoint:
    path: /api/v1/shared_assets.json
    method: GET
    data_selector: assets
    params: {}
- name: shared_assets
  endpoint:
    path: /shared_assets.json
    method: GET
    data_selector: array of objects
    params: {}
- name: catalog
  endpoint:
    path: /api/v1/catalogs
    method: POST
    data_selector: catalog_uuid
- name: catalogs
  endpoint:
    path: /api/v1/catalogs
    method: POST
- name: customer
  endpoint:
    path: /api/v1/customers
    method: GET
    data_selector: user
    params:
      email: ''
- name: customers
  endpoint:
    path: /api/v1/customers
    method: GET
    data_selector: users
    params: {}
- name: segments
  endpoint:
    path: /api/v1/segments/list
    method: GET
    data_selector: segments
- name: custom_user_list
  endpoint:
    path: /api/v1/custom_user_lists/create
    method: POST
- name: adapters
  endpoint:
    path: /api/v1/account_adapters
    method: GET
- name: adapters
  endpoint:
    path: /api/v1/account_adapters
    method: GET
    data_selector: object
- name: tags
  endpoint:
    path: /api/v1/tag_contexts/list
    method: GET
- name: tag_contexts
  endpoint:
    path: /api/v1/tag_contexts/list
    method: GET
    data_selector: array of objects
- name: customer_events
  endpoint:
    path: /api/v1/customer_search/show_events
    method: GET
    params:
      uuid: string
- name: customer_events
  endpoint:
    path: /api/v1/customer_search/show_events
    method: GET
- name: external_fetch_templates
  endpoint:
    path: /api/v1/external_fetches.json
    method: GET
    data_selector: records
    params:
      per_page: ''
      page: ''
- name: add_promo_codes_to_promotion
  endpoint:
    path: /api/v1/promotions/{promotion_uuid}/add_promocodes
    method: PUT
- name: email_validation
  endpoint:
    path: /api/v1/emails/validate
    method: GET
    data_selector: result
    params:
      email: string
- name: email_validation
  endpoint:
    path: /api/v1/emails/validate
    method: GET
notes:
- Uses OAuth2 with refresh token — requires setup of connected app in api
- API is based on REST/JSON and authenticated with your API key.
- You have to pass one of the API keys to authorize requests.
- API requires a user API key for authentication.
- You can add multiple items to a catalog in batches of 25 items at a time.
- Limit the number of API calls to 5 per second.
- The maximum size of a payload is 1MB or 100 events per payload.
- Ensure that the phone_number includes the country code and starts with a +
- An email must not have more than 256 characters
- gender should be either male/female/unknown
- unsubscribed is true/false (lower case)
- joined_at must be in ISO8601 format
- Blueshift’s pre-built integrations require adding and validating the vendor's authentication
  credentials in the integration settings within the Blueshift UI.
- Sending the right device and customer attributes in your events data helps you to
  build accurate customer profiles and run efficient campaigns that target the right
  customers.
- Uses API key for authentication.
- Android SDK uses Firebase Cloud Messaging (FCM) to send push messages
- 'Minimum Firebase versions for SDK version 2.0.2 or later: 16.0.6 (core) and 17.3.4
  (messaging)'
- Firebase will discontinue support for Authorization Key starting 20th June 2024.
- Ensure that you set the API key before proceeding. The integration fails if you
  don't specify the API key here.
- The SDK must be initialized from your Application file's `onCreate()` method.
- Ensure that you trigger an identify event so that we don't push messages to the
  customer that you specify.
- The SDK can automatically fire an app_open event of every app start (from the killed
  state).
- Push notifications require the SDK to be integrated in the application.
- Enabling manual mode provides full control over the display of in-app messages.
- Your app must use Blueshift’s Android SDK version 3.4.0 and above to save in-app
  messages to the inbox.
- The navigation title is displayed only if the app has support for ActionBar.
- Ensure that you replace links.clientdomain.com with the cname-record value that
  points to links.getblueshift.com.
- Some objects like Contact may return nulls in deeply nested fields
- SDK setup requires either CocoaPods or Carthage.
- The SDK is installed and is ready to configure
- The Push notification adapters are set for sending push notifications.
- Integration of BlueShift_iOS_Extension_SDK.xcframework is optional.
- The Swift package manager is supported for SDK versions 2.1.14 and above.
- Blueshift can have only one APNS configuration per push adapter.
- The Development build requires the Sandbox environment to be set for the push adaptor.
- A .pem file is a prerequisite if you want to use Blueshift to send notifications
  to your users.
- APNs uses the certificate in the .pem file to validate if the push notification
  request comes from a server that is authorized to do so.
- Device ID is auto-generated by SDK.
- Custom device IDs must not be empty or contain spaces/special characters.
- Uses custom authorization options for push notifications.
- The SDK is configured to send identify calls.
- Requires SDK integration to track events
- Device ID is primary identifier for users
- The default automaticAppOpenTimeInterval is set to 24 hours, so SDK will fire only
  one app_open event in 24 hours.
- App Group allows the sharing of data between the main application target and other
  application targets such as notification content extension.
- Your app must use Blueshift’s iOS SDK version 2.4.0 and above to save in-app messages
  to an inbox.
- Uses the SDK for customization of mobile inbox.
- You must provide a slot name with the API call to get its content.
- The Blueshift deep link domain should have a cname record that points to links.getblueshift.com.
- Ensure that the user is not pasting the links in the browser. The best way to test
  the Blueshift's deep links is to open it from an email.
- Ensure that you have your AASA file hosted and it's correct.
- Ensure that you have Associated Domain capability enabled in the XCode project setting,
  and it has an entry of applinks with your universal links domain.
- Blueshift uses paths /z/* and /track for email rewriting which can be used to filter
  the paths.
- Ensure that the app is working as it was before integrating with the SDK
- Uses Blueshift SDK for integration
- Uses API key for authentication — requires setup in Blueshift
- Ensure to handle push notifications and in-app messaging appropriately
- Automatic integration is not recommended if you are using Firebase SDK or any other
  SDK with auto integration along with Blueshift.
- Before you can start to integrate, you must generate the native Android and iOS
  projects using expo prebuild.
- To save in-app messages to an inbox, your app must utilize Blueshift's Flutter Plugin
  version 1.1.0 or above.
- Uses Firebase Cloud Messaging to send push notifications to Android devices.
- Internet permission is required to send events, get notifications and in-app messages.
- Uses Automatic Integration for Blueshift Flutter SDK.
- In-app messages are disabled by default and must be enabled in the SDK config.
- Deep links of in-app notifications will be delivered to Flutter.
- If you have integrated the plugin using the automatic integration, your setup is
  completed here.
- If you have opted for Manual integration, you must complete the following steps
  to integrate the Blueshift Plugin.
- Ensure that the user is not pasting the links in the browser. The best way to test
  the Blueshift's deep links is to open it from an email. You can send a test email
  with Blueshift's deep links by creating the templates and test campaigns.
- Ensure that you have your AASA file hosted and it's correct. To check the hosted
  AASA file, go to https://<<yourdomain>>/.well-known/apple-app-site-association.
- The plugin comes with a set of default configurations that gives you services like
  event reporting and push notification out of the box.
- Requires passing API key for authorization.
- 'To test an API, complete the following steps: Obtain the required API keys. Paste
  the API key in the Username field for Authentication. Leave the Password field blank.'
- Campaigns cannot be modified using this API after creation (e.g., adding triggers).
- Filters or delays cannot be applied to campaign triggers via this API.
- The endpoint works for campaigns that are set to trigger using an API call.
- Campaign metrics noted on the UI are calculated using the account time zone. If
  you want the metrics from the report API to match that of the metrics you see on
  the UI, edit start/end date to reflect this.
- Add the user API key as the username and leave the password field blank.
- You can archive or unarchive up to 100 campaigns (UUIDs) in a single request.
- This feature is supported only for event-triggered campaigns, including API triggered
  campaigns.
- Your webhook URL should handle a POST request with a JSON body.
- It needs to respond with a 200 HTTP status code on success.
- The bulk API call is network efficient. This API call reduces the number of connections
  needed.
- You can send multiple events in bulk as a part of an array.
- The maximum size of a payload is 1MB or 30 events per payload.
- We recommend you to limit the number of bulk calls to 5 per second (or 150 events/sec).
- Add the User API key as the Username and leave the Password field blank.
- Use the endpoint to debug events
- Event data for both success and error events are sent in batches at every five-minute
  interval.
- The API saves only the first five events (in the order they happened) and not all
  historical events in a batch.
- Live content campaign may not return content immediately for newly created users.
- Handle any timeouts or errors so that your app/website can render a page correctly
  in case of Blueshift server timeouts.
- Message is not sent to user if the external fetch encounters an error or does not
  return any data
- Message is not sent to user if the external fetch encounters an error or does not
  return any data.
- The `users` array may return multiple matches for the search query.
- The `user` object represents the most relevant match and can be used directly.
- Limit the calls to this endpoint to 50 per second.
- The maximum number of users is limited to 50 per call.
- We recommend that you limit the number of bulk calls to 5 calls per sec (or 250
  users per second).
- You can specify either `email` or `customer_id` of a customer to forget the customer
  and exclude the customer from the campaigns.
- It takes a couple of hours to delete the customer's data.
- This action is irreversible and all customer data will be permanently deleted.
- If a customer was previously forgotten, an API call to this endpoint does not restore
  any previous data for the customer.
- If there are multiple profile matches, this endpoint deletes the first matching
  customer.
- To delete all matching profiles, set delete_all_matching_customers=true in the API
  call.
- A request to this API endpoint can delete up to 50 profiles.
- It takes a couple of hours to delete the customer data.
- This action is irreversible and all customer data for the specified customer will
  be permanently deleted.
- The Merge customers endpoint is throttled at 1500 calls/minute.
- Use the User API key as the Username and leave the Password field blank.
- Use tags to organize your entities.
- This API endpoint is provided for debugging purposes only and supports a maximum
  of 10 calls per hour.
- Use the metadata parameter to add custom attributes to provide more information
  about the update.
- 'Ensure that you specify values in at least one of the following fields: email,
  uuid, customer_id, phone_number, or device_id.'
- The API can update a maximum of 1000 promo codes per request. If an API call includes
  more than 1000 promo codes, a 400 error will be returned.
- API requests require authentication using HTTP Basic Authentication with an API
  key.
- Live content campaign may not return results if user identifiers are missing or
  not found.
- If no query parameters are applied, the API retrieves all shared assets in the account,
  including both active and archived assets across all supported types.
- Use your API key as the Username and leave the Password field blank.
- Ensure that the name that you specify is unique.
- The API can update a maximum of 1000 promo codes per request.
errors:
- 'es_index_error: Indexing Error. This usually happens when there is a data type
  mismatch between the event payload and our backend system.'
- 'event_name_missing: The event is missing the required attribute (''event'').'
- 'event_verification_error: The event signature verification has failed.'
- 'invalid_customer_id: The customer_id is invalid.'
- 'invalid_device_id: The device is invalid.'
- 'invalid_email: Email is invalid.'
- 'invalid_event_attributes: There are some invalid attributes in the event payload.'
- 'invalid_product: Product not found in catalog.'
- 'invalid_user_attributes: Payload has invalid user attributes.'
- 'missing_identifier: Missing customer identifier.'
- 'missing_product: A whitelisted product/catalog event is missing the product/catalog_ids.'
- 'parsing_error: Blueshift was unable to parse the JSON payload.'
- 'transaction_indexing_error: There was an error while updating the transaction record.'
- 'unknown_error: Some unexpected processing error, contact Blueshift for more information.'
- 'user_lock_error: We were unable to acquire a lock on the user.'
- 'user_not_found_error: The user was not found in our system.'
- '401 Unauthorized: Check your API key'
- '404 Not Found: Ensure the endpoint path is correct'
- 'can''t be blank: product_id'
- 'can''t be blank: title'
- '400 Bad Request: Check the request payload for errors.'
- '401 Unauthorized: Verify your API key.'
- '429 Too Many Requests: Limit the number of bulk calls to 5 per second.'
- 'REQUEST_LIMIT_EXCEEDED: Throttle API calls or reduce frequency'
- 'QUERY_TIMEOUT: Break down filters or add selectivity'
- '401 Unauthorized: Recheck OAuth scopes or token expiration'
- '400 Bad Request: Check event parameters and data format'
- '401 Unauthorized: Verify API key or authentication token'
- '429 Too Many Requests: Rate limit exceeded'
- Verify that your SDK is configured properly
- '400 Bad Request: Check the request format and parameters'
- '401 Unauthorized: API key may be invalid or missing'
- '404 Not Found: The requested resource could not be found'
- '401 Unauthorized: Recheck API key or permissions'
- '404 Not Found: Check endpoint path or parameters'
- Firebase method swizzling needs to be disabled for using the Blueshift plugin with
  Firebase Messaging.
- '200: OK - API call completed successfully.'
- '400: Bad Request - The request was invalid or cannot be otherwise served. An accompanying
  error message will explain further.'
- '413: Payload too large'
- '422: Unprocessable Entity - Some portion of payload had invalid data'
- '429: Rate limit exceeded'
- '500: Internal server error - File a ticket with support@blueshift.com for technical
  help'
- '502: Service unavailable, please retry - Bad Gateway'
- '504: Service unavailable, please retry - Gateway Timeout'
- '400 Bad Request: The request is invalid due to missing or incorrect parameters.'
- '401 Unauthorized: API authentication failed due to an invalid or missing API key.'
- '403 Forbidden: The API key does not have sufficient permissions to perform this
  action.'
- '404 Not Found: The specified campaign was not found.'
- '422 Unprocessable Entity: The campaign cannot be paused due to its current status.'
- '429 Too Many Requests: The request limit has been exceeded.'
- '500 Internal Server Error: An unexpected server error occurred.'
- '502 Bad Gateway: The server received an invalid response.'
- '503 Service Unavailable: The service is temporarily unavailable.'
- '504 Gateway Timeout: The server took too long to respond.'
- '400: Bad Request - The request is invalid due to missing or incorrect parameters.'
- '401: Unauthorized - API authentication failed due to an invalid or missing API
  key.'
- '403: Forbidden - The API key does not have sufficient permissions to perform this
  action.'
- '404: Not Found - The specified campaign was not found. Verify the campaign UUID.'
- '422: Unprocessable Entity - The campaign cannot be paused due to its current status.'
- '429: Too Many Requests - The request limit has been exceeded. Reduce request frequency.'
- '500: Internal Server Error - An unexpected server error occurred. Contact support
  if the issue persists.'
- '502: Bad Gateway - The server received an invalid response. Retry the request.'
- '503: Service Unavailable - The service is temporarily unavailable. Try again later.'
- '504: Gateway Timeout - The server took too long to respond. Retry the request with
  exponential backoff.'
- '400: Bad Request - The request is invalid due to missing or incorrect parameters.
  This includes missing fields, invalid values, formatting issues, or conflicts such
  as duplicate data.'
- '422: Unprocessable Entity - The campaign cannot be paused due to its current status
  (e.g., already completed or archived). One or more scheduling parameters may be
  invalid (if applicable).'
- '500: Internal Server Error - An unexpected server error occurred.'
- '504: Gateway Timeout - The server took too long to respond. Retry the request.'
- '404 Not Found: The specified campaign was not found. Verify the campaign UUID.'
- '400: Bad request - Invalid parameters or request conditions.'
- '401: Unauthorized - Invalid or missing API key.'
- '404: Resource not found - The specified campaign UUID was not found.'
- 400 Bad request - Invalid parameters or request conditions.
- 401 Unauthorized - Invalid or missing API key.
- 404 Resource not found - One or more campaigns not found.
- '404: Resource not found - One or more campaigns not found.'
- 400 Bad request
- 400 Bad Request - The request was invalid or cannot be otherwise served. An accompanying
  error message will explain further.
- 413 - You can upload upto 100 products in an api call. The server is refusing to
  process a request because the request payload is larger than the server is willing
  or able to process.
- 422 - Unprocessable Entity - Some/all of the products have invalid data, please
  check the response for more information on.
- 429 - Rate limit exceeded - Too many requests
- 500 - Internal Server Error - Please contact blueshift for more information
- 502 - Service unavailable, please retry - Bad Gateway, re-try with exponential backoff
- 503 - Service unavailable, please retry - Service Unavailable, re-try with exponential
  backoff
- 504 - Service unavailable, please retry - Gateway Timeout, please re-try with exponential
  backoff
- 413 You can upload maximum 100 products in one api call - The server is refusing
  to process a request because the request payload is larger than the server is willing
  or able to process.
- 422 Unprocessable Entity - Some/all of the products have invalid data, please check
  the response for more information on.
- 429 Rate limit exceeded - Too many requests
- 500 Internal Server Error - Please contact blueshift for more information
- 502 Service unavailable, please retry - Bad Gateway, re-try with exponential backoff
- 503 Service unavailable, please retry - Service Unavailable, re-try with exponential
  backoff
- 504 Service unavailable, please retry - Gateway Timeout, please re-try with exponential
  backoff
- User identifier not found at index - 1
- 401 Unauthorized - The User API key was incorrect or this feature is not enabled
  for your account.
- 404 Resource not found. This can happen due to resource conflicts. Retry with exponential
  backoff.
- '400 Bad Request: The request is invalid due to a missing or incorrect parameter,
  such as event_name.'
- '404 Not Found: The specified resource or event was not found.'
- '422 Unprocessable Entity: The request was well-formed but could not be processed
  due to validation or state errors.'
- '400: Bad request – The request is invalid due to missing or incorrect parameters.'
- '401: Unauthorized – API authentication failed due to an invalid or missing API
  key.'
- '403: Forbidden – The API key does not have sufficient permissions to perform this
  action.'
- '404: Not found – The specified resource was not found.'
- '422: Unprocessable entity – The request was well-formed but could not be processed
  due to validation or state errors.'
- '429: Rate limit exceeded – Too many requests. Reduce request frequency.'
- '500: Internal server error – An unexpected server error occurred. Contact Blueshift
  support if the issue persists.'
- '502: Bad gateway – The server received an invalid response. Retry the request.'
- '503: Service unavailable – The service is temporarily unavailable. Try again later.'
- '504: Gateway timeout – The server took too long to respond. Retry with exponential
  backoff.'
- '400: The request was invalid or cannot be otherwise served.'
- '404: Resource not found. This can happen due to resource conflicts. Retry with
  exponential backoff.'
- '409: Conflict error, please retry. The request could not be completed due to a
  conflict with the current state of the target resource. Re-try with exponential
  backoff.'
- '429: Rate limit exceeded. Too many requests.'
- '500: Internal server error. Contact Blueshift for more information.'
- '502: Service unavailable, please retry. Bad gateway.'
- '503: Service unavailable, please retry. Service unavailable.'
- '504: Service unavailable, please retry. Gateway timeout.'
- '404: Resource not found. This can happen due to resource conflicts. Retry with
  exponential backoff. If the issue persists, contact Blueshift.'
- '429: Rate limit exceeded. Too many requests. Contact us on support@blueshift.com
  for recommended throughput.'
- '502: Service unavailable, please retry. Bad gateway. Retry with exponential backoff.'
- '503: Service unavailable, please retry. Service unavailable. Retry with exponential
  backoff.'
- '504: Service unavailable, please retry. Gateway timeout. Retry with exponential
  backoff.'
- '400: The request was invalid or cannot be otherwise served. An accompanying error
  message will explain further.'
- '400: Bad request – The request is invalid.'
- '404: Not found – The requested resource does not exist or is unavailable.'
- '409: Conflict – The request conflicts with the current state of the resource. Retry
  with exponential backoff.'
- '413: Payload too large – The request size exceeds the server limit.'
- '429: Too many requests – Rate limit exceeded. Retry with exponential backoff.'
- '500: Internal server error – An unexpected error occurred on the server.'
- '502: Bad gateway – Temporary error. Retry with exponential backoff.'
- '503: Service unavailable – The service is temporarily unavailable. Retry with exponential
  backoff.'
- '400: Bad request - The request was invalid or cannot be otherwise served.'
- '404: Resource not found - Can happen due to resource conflicts. Re-try with exponential
  backoff.'
- '409: Conflict error, please retry - The request could not be completed due to a
  conflict with the current state of the target resource, re-try with exponential
  backoff.'
- '413: Payload too large - The server is refusing to process a request because the
  request payload is larger than the server is willing or able to process.'
- '429: Rate limit exceeded - Too many requests.'
- '500: Internal Server Error - Please contact Blueshift for more information.'
- '502: Service unavailable, please retry - Bad Gateway, re-try with exponential backoff.'
- '503: Service unavailable, please retry - Service Unavailable, re-try with exponential
  backoff.'
- '504: Service unavailable, please retry - Gateway Timeout, please re-try with exponential
  backoff.'
- '400: Bad request - The request was invalid or cannot be otherwise served. An accompanying
  error message will explain further.'
- '404: Resource not found - Can happen due to resource conflicts. Re-try with exponential
  backoff. Contact us on support@blueshift.com if the issue persists.'
- '413: You can upload maximum 50 users in one api call - The server is refusing to
  process a request because the request payload is larger than the server is willing
  or able to process.'
- '429: Rate limit exceeded - Too many requests. Contact us on support@blueshift.com
  for recommended throughput.'
- '500: Internal Server Error - Please contact blueshift for more information.'
- 400 Bad Request - The request was invalid or cannot be otherwise served.
- 413 - You can upload maximum 100 products in one api call.
- 413 - You can upload maximum 100 products in one api call - The server is refusing
  to process a request because the request payload is larger than the server is willing
  or able to process.
- '409: Conflict error, please retry - The request could not be completed due to a
  conflict with the current state of the target resource.'
- '413: You can upload up to 50 users in an API call.'
- '404: Resource not found.'
- '409: Conflict error, please retry.'
- '429: Rate limit exceeded.'
- '500: Internal server error.'
- '502: Service unavailable, please retry.'
- '503: Service unavailable, please retry.'
- '504: Service unavailable, please retry.'
- '404: Resource not found. This can happen due to resource conflicts.'
- 400 Bad request - The request was invalid or cannot be otherwise served.
- 404 Resource not found - Can happen due to resource conflicts. Re-try with exponential
  backoff.
- 409 Conflict error, please retry - The request could not be completed due to a conflict
  with the current state of the target resource, re-try with exponential backoff.
- 429 Rate limit exceeded - Too many requests. Contact us on support@blueshift.com
  for recommended throughput.
- 500 Internal Server Error - Please contact blueshift for more information.
- 502 Service unavailable, please retry - Bad Gateway, re-try with exponential backoff.
- 503 Service unavailable, please retry - Service Unavailable, re-try with exponential
  backoff.
- 504 Service unavailable, please retry - Gateway Timeout, please re-try with exponential
  backoff.
- '404: Resource not found - Can happen due to resource conflicts.'
- '502: Service unavailable, please retry - Bad Gateway.'
- '503: Service unavailable, please retry - Service Unavailable.'
- '504: Service unavailable, please retry - Gateway Timeout.'
- '404: Resource not found - The customer list you are looking for could not be found.'
- '400: Input params not valid.'
- '404: The list has been deleted.'
- '413: You can add maximum 25 users in one API call.'
- '422: Functionality not supported for old list.'
- '429: Rate limit exceeded - Too many requests'
- '500: Internal Server Error - Please contact blueshift for more information'
- '502: Service unavailable, please retry - Bad Gateway, re-try with exponential backoff'
- '503: Service unavailable, please retry - Service Unavailable, re-try with exponential
  backoff'
- '504: Service unavailable, please retry - Gateway Timeout, please re-try with exponential
  backoff'
- 404 Resource not found. Ensure that you are using the correct API endpoint. This
  can happen due to resource conflicts. Retry with exponential backoff. If the issue
  persists, contact Blueshift.
- '400: Bad Request - More than 1000 promo codes in one request'
- '400: Invalid request - too many promo codes'
- '404: Resource not found - The specified promotion ID was not found.'
- '500: Internal Server Error - Please contact support for more information.'
- '502: Bad Gateway - Please retry the request.'
- '504: Gateway Timeout - The server took too long to respond. Retry with exponential
  backoff.'
- '400 Bad Request: Missing or invalid email address.'
- '403 Forbidden: The API key does not have sufficient permissions.'
- '404 Not Found: The requested API endpoint does not exist.'
- '400 Bad Request: Missing or malformed payload.'
- '413 Payload Too Large: More than 30 email addresses were submitted.'
- '400: More than 1000 promo codes included in the request.'
auth_info:
  mentioned_objects:
  - OauthToken
  - AuthProvider
  - NamedCredential
  - BlueshiftUserInfo
  - BlueshiftPluginManager
  - BlueShiftConfig
  - BlueshiftUniversalLinksDelegate
  - BlueShift
client:
  base_url: https://api.getblueshift.com
  auth:
    type: apikey
    location: header
    header_name: Username
source_metadata: null
