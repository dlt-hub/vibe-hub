resources:
- name: test_authentication
  endpoint:
    path: /data/testAuthentication
    method: GET
    data_selector: message
- name: upload_file
  endpoint:
    path: /upload
    method: POST
- name: retrieve_file
  endpoint:
    path: /retrieve/{cid}
    method: GET
- name: upload
  endpoint:
    path: /upload
    method: POST
    data_selector: upload
    params: {}
- name: retrieve_file
  endpoint:
    path: /gateways/public/get/{cid}
    method: GET
    data_selector: data
    params: {}
- name: upload_file
  endpoint:
    path: /upload
    method: POST
    data_selector: upload
    params: {}
- name: retrieve_file
  endpoint:
    path: /retrieve
    method: GET
    data_selector: data
    params: {}
- name: test_authentication
  endpoint:
    path: /data/testAuthentication
    method: GET
    data_selector: message
- name: webhook_event
  endpoint:
    path: /webhooks
    method: POST
- name: test_authentication
  endpoint:
    path: /data/testAuthentication
    method: GET
    data_selector: message
- name: webhook
  endpoint:
    path: /account-management/webhooks
    method: POST
- name: upload_file
  endpoint:
    path: /v3/files
    method: POST
    data_selector: id
- name: pin_by_cid
  endpoint:
    path: /v3/pinByCid
    method: POST
    data_selector: request_id
- name: upload_file
  endpoint:
    path: /v3/files
    method: POST
    data_selector: data
    params: {}
- name: create_signed_url
  endpoint:
    path: /v3/files
    method: GET
    data_selector: url
    params:
      expires: 30
- name: create_signed_url
  endpoint:
    path: /upload/public/create-signed-url
    method: POST
    data_selector: url
- name: create_signed_url
  endpoint:
    path: /upload/public/create-signed-url
    method: POST
    data_selector: url
    params:
      expires: 30
- name: list_files
  endpoint:
    path: /files/list
    method: GET
    data_selector: files
    params: {}
- name: files
  endpoint:
    path: /files/list
    method: GET
    data_selector: files
- name: delete_files
  endpoint:
    path: /files/delete
    method: POST
    data_selector: result
    params: {}
- name: list_files
  endpoint:
    path: /files/list
    method: GET
    data_selector: items
    params: {}
- name: delete_files
  endpoint:
    path: /files/public/delete
    method: POST
    data_selector: result
    params: {}
- name: list_files
  endpoint:
    path: /files/public/list
    method: GET
    data_selector: items
    params: {}
- name: public_files
  endpoint:
    path: /ipfs/{cid}
    method: GET
- name: private_files
  endpoint:
    path: /gateways/private/get
    method: GET
- name: public_files
  endpoint:
    path: /ipfs/{cid}
    method: GET
- name: private_files
  endpoint:
    path: /gateways/private/get
    method: GET
- name: groups
  endpoint:
    path: /sdk/groups/public/list
    method: GET
    data_selector: groups
- name: public_files
  endpoint:
    path: /files/public/list
    method: GET
- name: private_files
  endpoint:
    path: /files/private/list
    method: GET
- name: create_access_link
  endpoint:
    path: /gateways/private/createAccessLink
    method: POST
    data_selector: url
- name: signatures
  endpoint:
    path: /sdk/signatures/public/add
    method: POST
    data_selector: signature
- name: get_signature
  endpoint:
    path: /sdk/signatures/public/get
    method: GET
    data_selector: signature
- name: remove_signature
  endpoint:
    path: /sdk/signatures/public/delete
    method: DELETE
    data_selector: status
- name: upload
  endpoint:
    path: /upload
    method: POST
- name: files
  endpoint:
    path: /files
    method: GET
- name: groups
  endpoint:
    path: /groups
    method: GET
- name: keys
  endpoint:
    path: /keys
    method: GET
- name: swaps
  endpoint:
    path: /swaps
    method: GET
- name: group
  endpoint:
    path: /groups/public/create
    method: POST
    data_selector: id
    params: {}
- name: add_files_to_group
  endpoint:
    path: /groups/public/add-files
    method: POST
    data_selector: upload
    params: {}
- name: remove_files_from_group
  endpoint:
    path: /groups/public/remove-files
    method: POST
    data_selector: upload
    params: {}
- name: get_group
  endpoint:
    path: /groups/public/get
    method: GET
    data_selector: group
    params: {}
- name: list_groups
  endpoint:
    path: /groups/public/list
    method: GET
    data_selector: groups
    params: {}
- name: update_group
  endpoint:
    path: /groups/public/update
    method: POST
    data_selector: id
    params: {}
- name: delete_group
  endpoint:
    path: /groups/public/delete
    method: DELETE
    data_selector: OK
    params: {}
- name: gateway_access_controls
  endpoint:
    path: /gateways/gateway-access-controls
    method: GET
    data_selector: access_controls
    params: {}
- name: image_optimizations
  endpoint:
    path: /files/{cid}
    method: GET
    data_selector: files
- name: public_files
  endpoint:
    path: /files/public/list
    method: GET
- name: private_files
  endpoint:
    path: /files/private/list
    method: GET
- name: private_access_link
  endpoint:
    path: /gateways/private/createAccessLink
    method: POST
- name: upload
  endpoint:
    path: /presigned_url
    method: GET
    data_selector: url
    params: {}
- name: vectorize_on_upload
  endpoint:
    path: /files/uploading-files
    method: POST
    data_selector: upload
    params: {}
- name: vectorize_after_upload
  endpoint:
    path: /files/vectorize
    method: POST
    data_selector: update
    params: {}
- name: query_vectors
  endpoint:
    path: /files/queryVectors
    method: POST
    data_selector: results
    params: {}
- name: delete_vectors
  endpoint:
    path: /files/deleteVectors
    method: POST
    data_selector: update
    params: {}
- name: files
  endpoint:
    path: /api/files
    method: POST
    data_selector: url
- name: upload_url
  endpoint:
    path: /api/url
    method: GET
    data_selector: url
- name: presigned_url
  endpoint:
    path: /presigned_url
    method: GET
    data_selector: url
- name: signatures
  endpoint:
    path: /sdk/signatures/public/add
    method: POST
    data_selector: signature
    params: {}
- name: get_signature
  endpoint:
    path: /sdk/signatures/public/get
    method: GET
    data_selector: signature
    params: {}
- name: remove_signature
  endpoint:
    path: /sdk/signatures/public/delete
    method: DELETE
    data_selector: status
    params: {}
- name: presigned_url
  endpoint:
    path: /presigned_url
    method: GET
    data_selector: url
- name: upload_file
  endpoint:
    path: /files
    method: POST
    data_selector: url
- name: files
  endpoint:
    path: /files
    method: GET
- name: groups
  endpoint:
    path: /groups
    method: GET
- name: swaps
  endpoint:
    path: /swaps
    method: GET
- name: upload
  endpoint:
    path: /api/upload
    method: POST
    data_selector: data
- name: upload_file
  endpoint:
    path: /upload/public/file
    method: POST
    data_selector: url
- name: image_optimizations
  endpoint:
    path: /files/{cid}
    method: GET
    params: {}
- name: upload_file
  endpoint:
    path: /files
    method: POST
    data_selector: data
    params: {}
- name: upload_file
  endpoint:
    path: /api/files
    method: POST
    data_selector: url
- name: get_signed_url
  endpoint:
    path: /api/url
    method: GET
    data_selector: url
- name: create_signed_upload_url
  endpoint:
    path: /v3/files/sign
    method: POST
    data_selector: data
- name: list_files
  endpoint:
    path: /files/{network}
    method: GET
    data_selector: data.files
    params: {}
- name: presigned_url
  endpoint:
    path: /presigned_url
    method: GET
    data_selector: url
- name: get_file_by_id
  endpoint:
    path: /v3/files/{network}/{id}
    method: GET
    data_selector: data
    params: {}
- name: create_download_link
  endpoint:
    path: /v3/files/private/download_link
    method: POST
    data_selector: data
- name: upload
  endpoint:
    path: /api/upload
    method: POST
    data_selector: data
- name: update_file
  endpoint:
    path: /files/{network}/{id}
    method: PUT
    data_selector: data
- name: upload_file
  endpoint:
    path: /upload
    method: POST
    data_selector: url
- name: delete_file_by_id
  endpoint:
    path: /v3/files/{network}/{id}
    method: DELETE
    data_selector: data
    params: {}
- name: vectorize_file
  endpoint:
    path: /v3/vectorize/files/{file_id}
    method: POST
    data_selector: success
- name: upload_file
  endpoint:
    path: /files
    method: POST
    data_selector: data
    params: {}
- name: query_file_vectors
  endpoint:
    path: /v3/vectorize/groups/{group_id}/query
    method: POST
    data_selector: data.matches
    params: {}
- name: create_signed_upload_url
  endpoint:
    path: /v3/files/sign
    method: POST
    data_selector: data
- name: delete_file_vectors
  endpoint:
    path: /v3/vectorize/files/{file_id}
    method: DELETE
    data_selector: success
- name: list_files
  endpoint:
    path: /files/{network}
    method: GET
    data_selector: data.files
    params: {}
- name: create_group
  endpoint:
    path: /v3/groups/{network}
    method: POST
    data_selector: data
    params: {}
- name: get_file_by_id
  endpoint:
    path: /v3/files/{network}/{id}
    method: GET
    data_selector: data
    params: {}
- name: get_group
  endpoint:
    path: /v3/groups/{network}/{id}
    method: GET
    data_selector: data
    params: {}
- name: groups
  endpoint:
    path: /v3/groups/{network}
    method: GET
    data_selector: data.groups
    params: {}
- name: create_download_link
  endpoint:
    path: /v3/files/private/download_link
    method: POST
    data_selector: data
    params: {}
- name: add_file_to_group
  endpoint:
    path: /v3/groups/{network}/{id}/ids/{file_id}
    method: PUT
    data_selector: data
    params: {}
- name: update_file
  endpoint:
    path: /v3/files/{network}/{id}
    method: PUT
    data_selector: data
    params: {}
- name: remove_file_from_group
  endpoint:
    path: /v3/groups/{network}/{id}/ids/{file_id}
    method: DELETE
    data_selector: data
    params: {}
- name: delete_file_by_id
  endpoint:
    path: /v3/files/{network}/{id}
    method: DELETE
    data_selector: data
    params: {}
- name: update_group
  endpoint:
    path: /v3/groups/{network}/{id}
    method: PUT
    data_selector: data
    params: {}
- name: vectorize_file
  endpoint:
    path: /v3/vectorize/files/{file_id}
    method: POST
    data_selector: success
- name: delete_group
  endpoint:
    path: /v3/groups/{network}/{id}
    method: DELETE
    data_selector: data
- name: query_file_vectors
  endpoint:
    path: /v3/vectorize/groups/{group_id}/query
    method: POST
    data_selector: data.matches
    params: {}
- name: pin_by_cid
  endpoint:
    path: /v3/files/public/pin_by_cid
    method: POST
    data_selector: data
    params: {}
- name: delete_file_vectors
  endpoint:
    path: /v3/vectorize/files/{file_id}
    method: DELETE
    data_selector: success
    params: {}
- name: query_pin_requests
  endpoint:
    path: /v3/files/public/pin_by_cid
    method: GET
    data_selector: data.jobs
    params: {}
- name: cancel_pin_by_cid
  endpoint:
    path: /files/public/pin_by_cid/{id}
    method: DELETE
    data_selector: data
- name: create_group
  endpoint:
    path: /v3/groups/{network}
    method: POST
    data_selector: data
    params: {}
- name: get_group
  endpoint:
    path: /v3/groups/{network}
    method: GET
    data_selector: data
    params: {}
- name: list_groups
  endpoint:
    path: /v3/groups
    method: GET
    data_selector: data
    params: {}
- name: add_swap
  endpoint:
    path: /v3/files/{network}/swap/{cid}
    method: PUT
    data_selector: data
    params: {}
- name: get_group
  endpoint:
    path: /v3/groups/{network}/{id}
    method: GET
    data_selector: data
    params: {}
- name: swap_history
  endpoint:
    path: /v3/files/{network}/swap/{cid}
    method: GET
    data_selector: data
    params:
      network: public
      cid: string
- name: groups
  endpoint:
    path: /v3/groups/{network}
    method: GET
    data_selector: data.groups
- name: remove_swap
  endpoint:
    path: /v3/files/{network}/swap/{cid}
    method: DELETE
    data_selector: data
    params: {}
- name: add_file_to_group
  endpoint:
    path: /v3/groups/{network}/{id}/ids/{file_id}
    method: PUT
    data_selector: data
    params: {}
- name: remove_file_from_group
  endpoint:
    path: /v3/groups/{network}/{id}/ids/{file_id}
    method: DELETE
    data_selector: data
    params: {}
- name: create_api_key
  endpoint:
    path: /v3/api_keys
    method: POST
    data_selector: JWT
    params: {}
- name: list_api_keys
  endpoint:
    path: /v3/list/api_keys
    method: GET
    data_selector: keys
    params: {}
- name: revoke_api_key
  endpoint:
    path: /v3/revoke/api_key
    method: DEL
    data_selector: result
    params: {}
- name: list_api_keys
  endpoint:
    path: /v3/api_keys
    method: GET
    data_selector: keys
    params: {}
- name: update_group
  endpoint:
    path: /v3/groups/{network}/{id}
    method: PUT
    data_selector: data
- name: revoke_api_key
  endpoint:
    path: /v3/api_keys/{key}
    method: DELETE
    data_selector: Revoked
- name: delete_group
  endpoint:
    path: /v3/groups/{network}/{id}
    method: DELETE
    data_selector: data
    params: {}
- name: get_signature_for_a_cid
  endpoint:
    path: /v3/files/{network}/signature/{cid}
    method: GET
    data_selector: data
    params: {}
- name: pin_by_cid
  endpoint:
    path: /v3/files/public/pin_by_cid
    method: POST
    data_selector: data
    params: {}
- name: add_signature_to_cid
  endpoint:
    path: /v3/files/{network}/signature/{cid}
    method: POST
    data_selector: data
    params: {}
- name: remove_signature
  endpoint:
    path: /v3/files/{network}/signature/{cid}
    method: DELETE
    data_selector: data
    params: {}
- name: query_pin_requests
  endpoint:
    path: /v3/files/public/pin_by_cid
    method: GET
    data_selector: data.jobs
- name: cancel_request
  endpoint:
    path: /v3/files/public/pin_by_cid/{id}
    method: DELETE
    data_selector: data
    params: {}
- name: add_swap
  endpoint:
    path: /v3/files/{network}/swap/{cid}
    method: PUT
    data_selector: data
- name: swap_history
  endpoint:
    path: /v3/files/{network}/swap/{cid}
    method: GET
    data_selector: data
    params:
      domain: required
- name: remove_swap
  endpoint:
    path: /v3/files/{network}/swap/{cid}
    method: DELETE
    data_selector: data
    params: {}
- name: create_api_key
  endpoint:
    path: /v3/api_keys
    method: POST
    data_selector: JWT
    params: {}
- name: list_api_keys
  endpoint:
    path: /v3/list-api-keys
    method: GET
    data_selector: keys
    params: {}
- name: revoke_api_key
  endpoint:
    path: /v3/revoke-api-key
    method: DEL
    data_selector: result
    params: {}
- name: api_keys
  endpoint:
    path: /v3/api_keys
    method: GET
    data_selector: keys
- name: revoke_api_key
  endpoint:
    path: /v3/api_keys/{key}
    method: DELETE
- name: get_signature_for_cid
  endpoint:
    path: /v3/files/{network}/signature/{cid}
    method: GET
    data_selector: data
    params: {}
- name: add_signature
  endpoint:
    path: /v3/files/{network}/signature/{cid}
    method: POST
    data_selector: data
    params: {}
- name: remove_signature
  endpoint:
    path: /v3/files/{network}/signature/{cid}
    method: DELETE
    data_selector: data
    params: {}
notes:
- Webhook signatures let you verify that webhook messages are actually sent by Pinata
  and not a malicious actor.
- Once API keys have been created, you will not be able to see the secret or JWT again.
- Files that are over 100MB will require using resumable uploads to complete.
- Beyond 100MB the max file size is 25GB at this time.
- While the upload limit is 25GB we would recommend only uploading up to 15GB per
  file/folder for reliability reasons.
- There is no aggregate limit for uploads, but each individual upload (whether it
  is a file or a folder) is limited to 25 GB.
- There is also a file limit size of 10MB for the pinJSONToIPFS API endpoint.
- Uploads must be done through multipart/form-data requests.
- Resumable uploads must be smaller than 50MB chunks.
- Uploads are done through multipart/form-data requests.
- Folder uploads are currently only supported on Public IPFS.
- Usage will require passing in a file object and the version of the CID you want
  to predict.
- Usage will just require passing in a file object and the version of the CID you
  want to predict.
- Creating signed upload URLs can be done with either the Files SDK or the API.
- The list method has an auto pagination feature
- You can filter results based on various attributes like name, group ID, CID, etc.
- The SDK has a delete method that allows deleting files by id.
- You can delete multiple files using the Auto Paginate feature.
- Uses JWT for authentication
- Can delete multiple files by ID
- Uses API key for authentication.
- Deleting a Group that has CIDs inside of it will not unpin/delete the files.
- The file vectors feature is still in beta and is only available on Private IPFS.
- The CID being signed must be owned and uploaded by the signer.
- All Pinata Dedicated Gateways are restricted by default.
- The key-value system will automatically detect if you are replacing an existing
  value for a given key.
- By default, your Dedicated Gateway is restricted, it will only serve content pinned
  to your account.
- Content served through your gateway will only be served successfully if the key
  is present with the request.
- At least one option must be specified for image optimizations.
- Pinata Expo Hooks are still under development and will only work in iOS and Android
  at the moment.
- File vectors feature is still in beta and is only available on Private IPFS.
- Requires setup of Pinata JWT for authentication.
- The API keys are only shown once, be sure to copy them somewhere safe!
- Set a default IPFS network, can be either public or private.
- API keys are only shown once, be sure to copy them somewhere safe.
- Keep in mind that using the gateway key in the request header may not work in a
  client side application.
- The V3 Upload endpoint currently does not support folder uploads.
- Next.js has a file size limit for what can be passed through API routes.
- Temporary signed upload URLs are valid for 30 seconds.
- Authorization is required in the form 'Bearer <token>'
- The JWT is required for authentication and should be set in the environment variable
  PINATA_JWT.
- The Gateway URL is required and should be set in the environment variable GATEWAY_URL.
- Uses Presigned URLs for file uploads
- Make sure the server is running at http://localhost:8787 to get Presigned URLs
- Make sure our code is deployed server side.
- Uses API Key for authentication
- Requires multipart/form-data for file uploads
- 404 errors indicate that the requested page could not be found.
- Authorization header of the form 'Bearer <token>' is required.
- Authorization header requires Bearer token
- Authorization header of the form Bearer <token> is required.
- Bearer authentication header of the form 'Bearer <token>', where '<token>' is your
  auth token.
- Authorization header of the form 'Bearer <token>'
- Authorization header must be of the form 'Bearer <token>'
- Authorization header of the form Bearer <token>, where <token> is your auth token.
- Authorization required in the form of Bearer <token>
- Authorization token must be included in the header as 'Bearer <token>'
- Authorization is required in the header as Bearer token.
- Authorization required as Bearer token
- Authorization header must be in the form 'Bearer <token>'
- Authorization required in the form 'Bearer <token>'
- Authorization header of the form `Bearer <token>` is required.
- Requires Bearer authentication header with token.
- Bearer authentication header of the form `Bearer <token>`
- 'Authorization: Bearer <token>'
- Target either the public or private IPFS network
- Bearer authentication header of the form 'Bearer <token>' is required.
- Authorization header of the form 'Bearer <token>', where '<token>' is your auth
  token.
errors:
- 'Rate limit exceeded: Throttle API calls or reduce frequency.'
- 'over_free_limit: Pinning this object would put you over the free tier limit.'
- 'over_max_size: This object is too large of an item to pin.'
- '401 Unauthorized: Recheck Pinata JWT.'
- 'over_free_limit: Please add a credit card to continue pinning content.'
- 'REQUEST_LIMIT_EXCEEDED: Throttle API calls or reduce frequency'
- 'QUERY_TIMEOUT: Break down filters or add selectivity'
- '401 Unauthorized: Recheck OAuth scopes or token expiration'
- '401 Unauthorized: Invalid or missing API key.'
- '400: You must provide a file to upload'
- '500: Internal Server Error'
- '400: Missing file'
- '200: Successful response'
- '404: Page Not Found'
- '401 Unauthorized: Recheck your Bearer token.'
- '500 - application/json: Internal Server Error'
- '401 Unauthorized: Recheck the authentication token'
- '404 Not Found: Check the endpoint and parameters'
- '401 Unauthorized: Recheck Bearer token.'
- '401 Unauthorized: Invalid or expired token'
- '400 Bad Request: Check request body and parameters'
- '200 - application/json: OK'
- '200: OK'
- 200 - 'Revoked'
auth_info:
  mentioned_objects:
  - Bearer authentication
  - Authorization
client:
  base_url: https://api.pinata.cloud
  auth:
    type: apikey
    location: header
    header_name: authorization
  headers:
    accept: application/json
source_metadata: null
