resources:
- name: events
  endpoint:
    path: /api/v0/{tenant}/icc
    method: GET
    data_selector: content
    params:
      page: 0
      size: 20
      lang: EN_SG
- name: Get Event Show Date & Time
  endpoint:
    path: /api/v0/{tenant}/icc/{internetContentCode}
    method: GET
- name: Get Event Show Date & Time (Without Availability)
  endpoint:
    path: /api/v0/{tenant}/icc/{internetContentCode}/products
    method: GET
- name: Get Event Show Availability Status
  endpoint:
    path: /api/v0/{tenant}/icc/{internetContentCode}/products/availability
    method: POST
    data_selector: availabilityList
- name: Get Event Overview Seat Map
  endpoint:
    path: /api/v0/{tenant}/products/{productId}/seatmap/overview
    method: GET
    data_selector: seatSectionList
- name: Get Seat Section Availability
  endpoint:
    path: /api/v0/{tenant}/products/{productId}/seatmap/availability
    method: GET
    data_selector: ''
- name: seatmap_availability
  endpoint:
    path: /api/v0/{tenant}/products/{productId}/seatmap/availability
    method: GET
    data_selector: reservedTime
    params:
      priceCatId: '{priceCatId}'
      seatSectionId: '{seatSectionId}'
      mode: '{mode}'
      quantity: '{quantity}'
      2DSeatmap: '1'
- name: release_seat
  endpoint:
    path: /api/v0/{tenant}/products/{productId}/seats
    method: POST
    data_selector: statusMessage
    params: {}
- name: ticket_type
  endpoint:
    path: /{tenant}/products/{productId}/tickettype
    method: GET
    data_selector: priceClassList
    params:
      priceCatId: priceCatId
- name: cart
  endpoint:
    path: /{tenant}/cart
    method: POST
    data_selector: httpStatus
    params: {}
- name: cart
  endpoint:
    path: /cart/{cartGuid}
    method: GET
    data_selector: lineItemList
- name: delete_cart_item
  endpoint:
    path: /cart/{cartGuid}
    method: DELETE
    data_selector: statusMessage
- name: submit_pre_payment_order
  endpoint:
    path: /api/v0/{tenant}/orders
    method: POST
    data_selector: lineItemList
    params: {}
- name: confirm_cancel_order
  endpoint:
    path: /{tenant}/orders/{transactionRefNo}
    method: POST
- name: get_transactions
  endpoint:
    path: /{tenant}/transaction
    method: POST
- name: txnProductTickets
  endpoint:
    path: /{tenant}/transaction/txnproducts
    method: POST
    data_selector: txnProductList
- name: updateTxnProductTickets
  endpoint:
    path: /{tenant}/transaction/txnproducts
    method: PUT
    data_selector: txnProductList
- name: patron_transaction_history
  endpoint:
    path: /patrons/account/transactions
    method: GET
    data_selector: transactions
- name: get_package_list
  endpoint:
    path: /api/v0/{tenant}/package/{internetContentCode}
    method: GET
    data_selector: packageList
    params: {}
- name: get_package_rules_and_requirement
  endpoint:
    path: /api/v0/{tenant}/package/{packageId}/packageInfo
    method: GET
    data_selector: packageReqList
    params: {}
- name: package_product_option
  endpoint:
    path: /package/productOption/
    method: POST
- name: confirm_release_seats
  endpoint:
    path: /products/seats
    method: POST
- name: cartProductPackage
  endpoint:
    path: /api/v0/SISTIC/cart/cartProductPackage
    method: POST
    data_selector: null
    params: {}
- name: add_to_cart
  endpoint:
    path: /api/v0/{tenant}/cart/cartProductPackage
    method: POST
    data_selector: cartGuid
    params: {}
- name: get_cart
  endpoint:
    path: /api/v0/{tenant}/cart/cartProductPackage
    method: GET
    data_selector: cart
    params: {}
- name: remove_from_cart
  endpoint:
    path: /api/v0/{tenant}/cart/cartProductPackage
    method: DELETE
    data_selector: statusMessage
    params: {}
- name: events
  endpoint:
    path: /api/v0/{tenant}/icc
    method: GET
    data_selector: content
    params:
      page: 0
      size: 20
      lang: EN_SG
- name: Get Event Show Date & Time
  endpoint:
    path: /SISTIC/icc/{internetContentCode}
    method: GET
    data_selector: showTimingList
- name: Get Event Show Date & Time (Without Availability)
  endpoint:
    path: /SISTIC/icc/{internetContentCode}/products
    method: GET
    data_selector: showTimingList
- name: Get Event Show Availability Status
  endpoint:
    path: /SISTIC/{tenant}/icc/{internetContentCode}/products/availability
    method: POST
    data_selector: availabilityList
    params:
      productIdList: []
- name: Get Event Overview Seat Map
  endpoint:
    path: /SISTIC/{tenant}/products/{productId}/seatmap/overview
    method: GET
    data_selector: seatSectionList
- name: Get Seat Section Availability
  endpoint:
    path: /SISTIC/products/{productId}/seatmap/availability
    method: GET
    data_selector: ''
- name: seatmap_availability
  endpoint:
    path: /api/v0/{tenant}/products/{productId}/seatmap/availability
    method: GET
    data_selector: reservedTime
    params:
      tenant: '{tenant}'
      productId: '{productId}'
      priceCatId: '{priceCatId}'
      seatSectionId: '{seatSectionId}'
      mode: '{mode}'
      quantity: '{quantity}'
      2DSeatmap: '1'
- name: release_seat
  endpoint:
    path: /api/v0/{tenant}/products/{productId}/seats
    method: POST
    data_selector: statusMessage
    params:
      tenant: '{tenant}'
      productId: '{productId}'
- name: ticket_type
  endpoint:
    path: /{tenant}/products/{productId}/tickettype
    method: GET
- name: cart
  endpoint:
    path: /{tenant}/cart
    method: POST
- name: cart
  endpoint:
    path: /cart/{cartGuid}
    method: GET
- name: delete_cart_item
  endpoint:
    path: /cart/{cartGuid}
    method: DELETE
- name: pre_payment_order
  endpoint:
    path: /api/v0/{tenant}/orders
    method: POST
- name: Confirm/Cancel Order
  endpoint:
    path: /{tenant}/orders/{transactionRefNo}
    method: POST
- name: Get Transactions
  endpoint:
    path: /{tenant}/transaction
    method: POST
- name: txn_product_tickets
  endpoint:
    path: /{tenant}/transaction/txnproducts
    method: POST
    data_selector: transactionRefNo
    params: {}
- name: update_txn_product_tickets
  endpoint:
    path: /{tenant}/transaction/txnproducts
    method: PUT
    data_selector: txnProductList
    params: {}
- name: patron_transaction_history
  endpoint:
    path: /patrons/account/transactions
    method: GET
    data_selector: transactions
    params:
      pageNo: 1
      pageSize: 10
      email: ''
      externalCustomerID: ''
      patronType: I
      hideExpiredEvent: false
      productAttribute: ''
      sort: transactionRefNo
      order: asc
- name: get_package_list
  endpoint:
    path: /api/v0/{tenant}/package/{internetContentCode}
    method: GET
    data_selector: packageList
    params: {}
- name: get_package_rules
  endpoint:
    path: /api/v0/{tenant}/package/{packageId}/packageInfo
    method: GET
    data_selector: packageRuleList
    params: {}
- name: package_product_option
  endpoint:
    path: /SISTIC/package/productOption/
    method: POST
    data_selector: showTimingList
- name: confirm_release_seats
  endpoint:
    path: /SISTIC/products/seats
    method: POST
    data_selector: statusMessage
- name: cartProductPackage
  endpoint:
    path: /api/v0/SISTIC/cart/cartProductPackage
    method: POST
    data_selector: httpStatus
    params: {}
- name: Add to Cart
  endpoint:
    path: /api/v0/{tenant}/cart/cartProductPackage
    method: POST
    data_selector: ''
    params:
      tenant: required
- name: cart
  endpoint:
    path: /2.8/Add/Get/Delete Cart
    method: POST
    data_selector: data
    params: {}
- name: patron_transaction_history
  endpoint:
    path: /2.14/Patron Transaction History
    method: GET
    data_selector: transactions
    params: {}
- name: confirm_cancel_order
  endpoint:
    path: /2.10/Confirm/Cancel Order
    method: POST
    data_selector: order
    params: {}
- name: submit_pre_payment_order
  endpoint:
    path: /2.9/Submit Pre Payment Order
    method: POST
    data_selector: payment
    params: {}
- name: events
  endpoint:
    path: /api/v0/{tenant}/icc
    method: GET
    data_selector: content
    params:
      tenant: REQUIRED
      page: OPTIONAL
      size: OPTIONAL
      lang: OPTIONAL
- name: event_show_date_time
  endpoint:
    path: /{tenant}/icc/{internetContentCode}
    method: GET
- name: event_overview_seat_map
  endpoint:
    path: /{tenant}/products/{productId}/seatmap/overview
    method: GET
- name: seat_section_availability
  endpoint:
    path: /api/v0/{tenant}/products/{productId}/seatmap/availability
    method: GET
    data_selector: seatAvailibilityList
    params: {}
- name: seat_offer
  endpoint:
    path: /api/v0/{tenant}/products/{productId}/seatmap/availability
    method: GET
    data_selector: setsReservedList
    params: {}
- name: release_seat
  endpoint:
    path: /api/v0/{tenant}/products/{productId}/seats
    method: POST
    data_selector: status
    params: {}
- name: ticket_type
  endpoint:
    path: /api/v0/{tenant}/products/{productId}/tickettype
    method: GET
    data_selector: priceClassId
    params: {}
- name: Get Delivery Methods
  endpoint:
    path: /{tenant}/cart/deliverymethods
    method: GET
    data_selector: delivery method
    params:
      tenant: required
- name: Get Payment Methods
  endpoint:
    path: /{tenant}/cart/paymentmethods
    method: GET
    data_selector: paymentMethodList
    params:
      tenant: required
- name: orders
  endpoint:
    path: /api/v0/{tenant}/orders/
    method: POST
- name: Confirm Order
  endpoint:
    path: /{transactionRefNo}
    method: POST
    data_selector: ''
    params: {}
- name: Cancel Order
  endpoint:
    path: /{transactionRefNo}
    method: POST
    data_selector: ''
    params: {}
- name: transactions
  endpoint:
    path: /transaction
    method: POST
    data_selector: content
    params:
      page: 0
      size: 10
- name: txnProductTickets
  endpoint:
    path: /transaction/txnproducts
    method: POST
    data_selector: txnProductList
- name: updateTxnProductTickets
  endpoint:
    path: /transaction/txnproducts
    method: PUT
    data_selector: txnProductList
- name: Get Common Delivery Methods
  endpoint:
    path: /2.8/get-delivery-payment-methods
    method: GET
- name: Get Common Payment Methods
  endpoint:
    path: /2.8/get-delivery-payment-methods
    method: GET
- name: Get Transactions
  endpoint:
    path: /2.11/get-transactions
    method: GET
- name: Get TxnProduct Tickets
  endpoint:
    path: /2.12/get-txnproduct-tickets
    method: POST
- name: Update TxnProduct
  endpoint:
    path: /2.13/update-txnproduct-tickets
    method: POST
- name: events
  endpoint:
    path: /api/v0/{tenant}/icc
    method: GET
    data_selector: content
    params:
      tenant: <tenant>
      page: '0'
      size: '20'
      lang: EN_SG
- name: event_show_date_time
  endpoint:
    path: /{tenant}/icc/{internetContentCode}
    method: GET
- name: event_overview_seat_map
  endpoint:
    path: /{tenant}/products/{productId}/seatmap/overview
    method: GET
- name: seat_section_availability
  endpoint:
    path: /api/v0/{tenant}/products/{productId}/seatmap/availability
    method: GET
    data_selector: seatAvailibilityList
- name: seat_offer
  endpoint:
    path: /api/v0/{tenant}/products/{productId}/seatmap/availability
    method: GET
    data_selector: setsReservedList
- name: release_seat
  endpoint:
    path: /api/v0/{tenant}/products/{productId}/seats
    method: POST
    data_selector: statusMessage
- name: ticket_type
  endpoint:
    path: /api/v0/{tenant}/products/{productId}/tickettype
    method: GET
    data_selector: priceClassId
- name: Submit Pre Payment Order
  endpoint:
    path: /api/v0/{tenant}/orders/
    method: POST
    data_selector: lineItemList
- name: confirm_cancel_order
  endpoint:
    path: /{tenant}/orders/{transactionRefNo}
    method: POST
    data_selector: ''
    params: {}
- name: events
  endpoint:
    path: /{tenant}/icc
    method: GET
    data_selector: content
    params:
      page: 0
      size: 20
      lang: EN_SG
- name: event_show_date_time
  endpoint:
    path: /api/v0/{tenant}/icc/{internetContentCode}
    method: GET
- name: event_overview_seat_map
  endpoint:
    path: /api/v0/{tenant}/products/{productId}/seatmap/overview
    method: GET
- name: seat_section_availability
  endpoint:
    path: /api/v0/{tenant}/products/{productId}/seatmap/availability
    method: GET
    data_selector: seatAvailibilityList
    params: {}
- name: seatmap_availability
  endpoint:
    path: /api/v0/{tenant}/products/{productId}/seatmap/availability
    method: GET
    data_selector: setsReservedList
    params:
      priceCatId: '{priceCatId}'
      seatSectionId: '{seatSectionId}'
      mode: '{mode}'
      quantity: '{quantity}'
      2DSeatmap: '1'
- name: release_seat
  endpoint:
    path: /api/v0/{tenant}/products/{productId}/seats
    method: POST
    data_selector: statusMessage
    params: {}
- name: ticket_type
  endpoint:
    path: /api/v0/{tenant}/products/{productId}/tickettype
    method: GET
    data_selector: priceClassList
    params:
      tenant: ''
      productId: ''
      priceCatId: ''
- name: cart
  endpoint:
    path: /api/v0/{tenant}/cart
    method: POST
    data_selector: ''
    params:
      tenant: ''
- name: cart
  endpoint:
    path: /cart/{cartGuid}
    method: GET
    data_selector: lineItemList
    params:
      tenant: required
      cartGuid: required
- name: delete_cart_item
  endpoint:
    path: /cart/{cartGuid}
    method: DELETE
    data_selector: ''
    params:
      tenant: required
      cartGuid: required
- name: submit_pre_payment_order
  endpoint:
    path: /api/v0/{tenant}/orders
    method: POST
    data_selector: response
    params: {}
- name: Confirm Order
  endpoint:
    path: /orders/{transactionRefNo}
    method: POST
- name: Get Transactions
  endpoint:
    path: /transaction
    method: POST
- name: TxnProduct Tickets
  endpoint:
    path: /{tenant}/transaction/txnproducts
    method: POST
    data_selector: transactionRefNo
    params: {}
- name: Update TxnProduct Tickets
  endpoint:
    path: /{tenant}/transaction/txnproducts
    method: PUT
    data_selector: txnProductList
    params: {}
- name: patron_transaction_history
  endpoint:
    path: /patrons/account/transactions
    method: GET
    data_selector: transactions
    params:
      pageNo: 1
      pageSize: 10
- name: product
  endpoint:
    path: /2.14/patron-transaction-history
    method: GET
    data_selector: records
- name: monetary
  endpoint:
    path: /2.14/patron-transaction-history
    method: GET
    data_selector: records
- name: ticketInfo
  endpoint:
    path: /2.14/patron-transaction-history
    method: GET
    data_selector: records
- name: errorResponse
  endpoint:
    path: /2.14/patron-transaction-history
    method: GET
    data_selector: records
- name: events
  endpoint:
    path: /icc
    method: GET
    data_selector: content
    params: {}
- name: Get Event Show Date & Time
  endpoint:
    path: /api/v0/{tenant}/icc/{internetContentCode}
    method: GET
    params:
      tenant: required
      internetContentCode: required
      startDate: optional
      numOfDays: optional
      promoCode: optional
- name: get_event_overview_seat_map
  endpoint:
    path: /{tenant}/products/{productId}/seatmap/overview
    method: GET
    data_selector: records
- name: get_seat_section_availability
  endpoint:
    path: /{tenant}/products/{productId}/seatmap/availability
    method: GET
    data_selector: seatAvailibilityList
- name: seatmap_availability
  endpoint:
    path: /api/v0/{tenant}/products/{productId}/seatmap/availability
    method: GET
    data_selector: records
    params:
      priceCatId: '{priceCatId}'
      seatSectionId: '{seatSectionId}'
      mode: '{mode}'
      quantity: '{quantity}'
      2DSeatmap: '1'
- name: release_seat
  endpoint:
    path: /api/v0/{tenant}/products/{productId}/seats
    method: POST
    data_selector: ''
    params: {}
- name: ticket_type
  endpoint:
    path: /api/v0/{tenant}/products/{productId}/tickettype
    method: GET
    data_selector: records
    params: {}
- name: cart
  endpoint:
    path: /api/v0/{tenant}/cart
    method: POST
- name: get_cart
  endpoint:
    path: /api/v0/{tenant}/cart/{cartGuid}
    method: GET
- name: cart
  endpoint:
    path: /cart
    method: POST
    data_selector: ''
    params: {}
- name: delete_cart_item
  endpoint:
    path: /cart/{cartGuid}
    method: DELETE
    data_selector: ''
    params: {}
- name: submit_pre_payment_order
  endpoint:
    path: /api/v0/{tenant}/orders
    method: POST
    data_selector: records
- name: confirm_order
  endpoint:
    path: /api/v0/{tenant}/orders/{transactionRefNo}
    method: POST
    data_selector: transaction
    params: {}
- name: get_transactions
  endpoint:
    path: /api/v0/{tenant}/transaction
    method: POST
    data_selector: content
    params: {}
- name: txnProduct
  endpoint:
    path: /api/v0/{tenant}/transaction/txnproducts
    method: POST
    data_selector: txnProductList
- name: update_txnProduct
  endpoint:
    path: /api/v0/{tenant}/transaction/txnproducts
    method: PUT
    data_selector: txnProductList
- name: patron_transaction_history
  endpoint:
    path: /patrons/account/transactions
    method: GET
    data_selector: transactions
    params:
      pageNo: 1
      pageSize: 10
      email: ''
      externalCustomerID: ''
      patronType: I
      hideExpiredEvent: false
      productAttribute: ''
      sort: transactionRefNo
      order: asc
- name: patron_transaction_history
  endpoint:
    path: /2.14/patron_transaction_history
    method: GET
    data_selector: transactions
    params: {}
- name: events
  endpoint:
    path: /icc
    method: GET
    data_selector: content
    params:
      tenant: required
      page: optional
      size: optional
      lang: optional
- name: event_show_date_time
  endpoint:
    path: /api/v0/{tenant}/icc/{internetContentCode}
    method: GET
- name: event_overview_seat_map
  endpoint:
    path: /{tenant}/products/{productId}/seatmap/overview
    method: GET
    data_selector: ''
    params: {}
- name: seat_section_availability
  endpoint:
    path: /{tenant}/products/{productId}/seatmap/availability
    method: GET
    data_selector: ''
    params: {}
- name: seatmap_availability
  endpoint:
    path: /{tenant}/products/{productId}/seatmap/availability
    method: GET
    params:
      priceCatId: '{priceCatId}'
      seatSectionId: '{seatSectionId}'
      mode: '{mode}'
      quantity: '{quantity}'
      2DSeatmap: '1'
- name: release_seat
  endpoint:
    path: /{tenant}/products/{productId}/seats
    method: POST
    params: {}
- name: ticket_type
  endpoint:
    path: /{tenant}/products/{productId}/tickettype
    method: GET
    params:
      priceCatId: '{priceCatId}'
- name: delivery_methods
  endpoint:
    path: /{tenant}/cart/deliverymethods
    method: POST
- name: payment_methods
  endpoint:
    path: /{tenant}/cart/paymentmethods
    method: POST
- name: orders
  endpoint:
    path: /api/v0/{tenant}/orders/
    method: POST
    data_selector: data
    params:
      tenant: required
- name: confirm_cancel_order
  endpoint:
    path: /api/v0/{tenant}/orders/{transactionRefNo}
    method: POST
    data_selector: data
    params:
      tenant: required
      transactionRefNo: required
- name: Get Transactions
  endpoint:
    path: /SISTIC/transaction
    method: POST
    data_selector: content
    params:
      page: 0
      size: 10
- name: Get TxnProduct Tickets
  endpoint:
    path: /SISTIC/transaction/txnproducts
    method: POST
    data_selector: ''
    params: {}
- name: Update TxnProduct Tickets
  endpoint:
    path: /SISTIC/transaction/txnproducts
    method: PUT
    data_selector: ''
    params: {}
- name: TxnProduct
  endpoint:
    path: /TxnProduct
    method: POST
    data_selector: txnProductList
    params: {}
- name: Get Transactions
  endpoint:
    path: /GetTransactions
    method: GET
    data_selector: transactions
    params: {}
- name: Get TxnProduct Tickets
  endpoint:
    path: /GetTxnProductTickets
    method: POST
    data_selector: ticketList
    params: {}
- name: Update TxnProduct
  endpoint:
    path: /UpdateTxnProduct
    method: PUT
    data_selector: updatedTxnProducts
    params: {}
notes:
- Social distancing feature is in Beta version and currently supports Best Available(BA)
  or HS seat offer mode with 1 set of seat only.
- Amount passed in will be used for validation purpose only.
- Seats will be reserved for up to 15 or 30 minutes depending on the system configuration.
- Transaction will be expired when timeLeftSeconds equals to 0.
- Payment to be handled on client side and periodic settlement will be made by client
  as per agreement.
- eticket url is generated but no email will be sent to patron. Email with eticket
  information needed to be handled by client.
- All tickets sold are subject to SISTIC terms and conditions.
- When the total payment amount is $0 dollar, both credit card and payment method
  objects are not required.
- Seat number will not be returned if the event section type is ‘GA’ (General Admission).
- E-Ticket download URL will only be available if the delivery method chosen is E-Ticket.
- Only one main package item can be added to the cart at a time.
- Only those events/shows available for sale by the specific client will be retrieved
- The return list includes both current and future events.
- Transaction will be expired when timeLeftSecond equals to 0.
- Eticket url is generated but no email will be sent to patron.
- The request for add to cart need to be in a list format.
- There should be at least one attribute in the request for transactions.
- Only support FGL Ticket Type for ticketPrintType.
- You must replace tenant with your tenant code.
- Tenant ID is required for both delivery and payment methods.
- 'Note: There should be at least one search condition for transactions.'
- 'Note: Only support FGL Ticket Type for ticket printing.'
- Moved externalTransactionId from 2.9 to 2.10
- Added ccNumber in 2.10 Confirm Order
errors:
- '500: Internal Server Error'
- '400: Invalid Internet Content Code.'
- '500: NullPointerException.'
- '400: Missing or empty productIdList field in the request body'
- '500: NullPointerException'
- '400: System is busy allocating seat the seat please try again'
- '400: Missing seatmap properties - coordinates'
- '400: Missing seatmap properties - seat angles'
- '500: Internal Server Issue'
- '400: Invalid Package Type Class Type'
- '400: Add to Cart Failed.'
- '400: unable to retrieve inventories due to inventoryId/productId/sectionId/priceCatId
  mismatch'
- '400: Failed to find seats for GA.'
- '400: Invalid Promo Code entered!'
- '400: Exceeded quota for cart'
- '400: Cart not found.'
- '400: Invalid cart item id.'
- '400: Invalid price class code.'
- '400: Patron type is null or invalid.'
- '400: Patron password is invalid.'
- '400: Patron email is null or invalid.'
- '400: Delivery method is invalid.'
- '400: There should be at least one search condition'
- '400: Order ref no. 20180405-000024 not found or expired.'
- '400: Order ref no 20180405-000024 paid amount mismatch, expected amount is 358.5'
- '400: Invalid payment method'
- '500: NullPointerException: '
- 'httpStatus: 400'
- 'errorCode: error.transaction.invalid-update-txn-ticket-request'
- 'errorCode: error.transaction.ticket-not-found'
- 'errorCode: error.transaction.ticket-already-printed'
- '400: Your page no/page size is invalid. Please correct it.'
- '401: Invalid access token'
- '401: Access token expired'
- '400: Unable to retrieve Package Info.'
- '400: Unable to retrieve Package requirement Info.'
- '400: error.product.option.not.found: Unable to retrieve Product Option.'
- '400: error.package.promopassword.not.validated: Unable to retrieve validated products
  for package promoPassword.'
- '400: error.package.promopassword.required: Unable to retrieve products, package
  promoPassword is required.'
- '400: error.package.promopassword.quota.reached: Quota exceeded for this promo password.'
- '400: error.invalid.request.parameter: Invalid request parameter.'
- '400: error.release.seats.not.found: Provided release seats not found.'
- '400: error.reserved.seats.not.found: Provided reserved seats not found.'
- '400: error.product.seats.reserve: Error reserving seats'
- '400: error.product.seats.release: Error releasing seats'
- '400: error.product.seats.singleseat: Please do not leave a single seat in between
  or beside your seat selection.'
- '400: error.product.survey.mix: Error mix events with survey and non survey.'
- 'error.cart.package.validations.rule.package-requirements-not-found: Package requirements
  not found'
- 'error.cart.package.validations.rule.package-not-found: Package not found'
- 'error.cart.package.validations.rule.cart-has-mix-package: Cart has mix package'
- 'error.cart.package.validations.rule.price-not-found: Price not found'
- 'error.cart.package.validations.rule.min-req-failed: Minimum requirements rule failed'
- 'error.cart.package.validations.rule.max-req-failed: Maximum requirements rule failed'
- 'error.cart.package.validations.rule.min-amt-failed: Minimum amount rule failed'
- 'error.cart.package.validations.rule.max-amt-failed: Maximum amount rule failed'
- 'error.cart.package.validations.rule.min-qty-failed: Minimum quantity rule failed'
- 'error.cart.package.validations.rule.exact-qty-failed: Exact quantity rule failed'
- 'error.cart.package.validations.rule.max-qty-failed: Maximum quantity rule failed'
- 'error.cart.package.requirement.validations.rule.cart-items-missing-package-requirements:
  Cart items does not have package requirements'
- 'error.cart.package.requirement.validations.rule.product-not-found: Product not
  found'
- 'error.cart.package.requirement.validations.rule.same-qty-failed: Same quantity
  rule failed'
- 'error.cart.package.requirement.validations.rule.same-price-cat-failed: Same price
  category rule failed'
- 'error.cart.package.requirement.validations.rule.same-time-failed: Same time rule
  failed'
- 'error.cart.package.requirement.validations.rule.same-date-failed: Same date rule
  failed'
- 'error.cart.package.requirement.validations.rule.min-products-failed: Minimum products
  rule failed'
- 'error.cart.package.requirement.validations.rule.max-products-failed: Maximum products
  rule failed'
- 'error.cart.package.requirement.validations.rule.min-qty-per-products-failed: Minimum
  quantity per product rule failed'
- 'error.cart.package.requirement.validations.rule.exact-qty-per-products-failed:
  Exact quantity per product rule failed'
- 'error.cart.package.requirement.validations.rule.max-qty-per-products-failed: Maximum
  quantity per product rule failed'
- 'error.cart.add-to-cart.quota-reached: You have exceeded the max number of tickets
  allowed for this event.'
- 'error.cart.postcommit.generic: Validate price model template failed!'
- 'error.cart.postcommit.exceed-allocation: Exceeded allocation for cart'
- 'error.cart.postcommit.exceed-max-qty: Exceeded max quantity for price class'
- 'error.cart.inventory.empty: Inventory list is empty.'
- 'error.cart.inventory.duplicates: Duplicates found in cart.'
- 'error.cart.inventory.quantity-price-class.mismatch: Inventory and price class map
  quantities do not tally!'
- 'error.cart.inventory.retrieve.fail: unable to retrieve inventories due to inventoryId/productId/sectionId/priceCatId
  mismatch'
- 'error.cart.inventory.check.fail: Error when evaluating inventories.'
- 'error.cart.postcommit.exceed-quota: Exceeded quota for cart'
- 'error.cart.sales-quota.global.exceeded: Exceeded global quota'
- 'error.cart.sales-quota.transaction.exceeded: Exceeded transaction quota'
- 'error.cart.sales-quota.patron-email.exceeded: exceeded patron email quota'
- 'error.cart.promo.code.popup.text: Invalid Promo Code entered!'
- '400: error.cart.package.mix-cart.fail: Package cannot be added to the cart with
  other purchases. Please complete your current purchases before continuing.'
- '400: error.cart.add-event.mix-not-allowed: Please complete purchase of existing
  shopping cart items before proceeding to purchase tickets for the event: {0}.'
- '400: error.cart.new-event.mix-not-allowed: {0} cannot be purchased with other events.
  Please complete your transaction before adding this event to your shopping cart.'
- '400: error.cart.add-to-cart.redemption.quota-exceeded: Total quantity selected
  for discount has exceeded maximum limit entitled for this event.'
- 'httpStatus: 400, statusMessage: System is busy allocating seat the seat please
  try again'
- 'httpStatus: 400, statusMessage: Missing seatmap properties - coordinates'
- 'httpStatus: 400, statusMessage: Missing seatmap properties - seat angles'
- 'httpStatus: 500, statusMessage: NullPointerException: '
- 'error.cart.not-found: Cart not found.'
- 'error.cart.delete-item.item-id.invalid: Invalid cart item id.'
- 'error.cart.delete-item.price-class-code.invalid: Invalid price class code.'
- '400: Invalid request'
- '400: printStatus must be valid. 1 - Printed. 6 - Not Printed'
- '400: Ticket Id not found.'
- '400: Ticket already printed.'
- '400: User has requested an invalid page no/page size'
- '400: Invalid Internet Content Code'
- '400: Unable to retrieve Package Info'
- '400: Unable to retrieve Package requirement Info'
- 'error.product.option.not.found: Unable to retrieve Product Option.'
- 'error.package.promopassword.not.validated: Unable to retrieve validated products
  for package promoPassword.'
- 'error.package.promopassword.required: Unable to retrieve products, package promoPassword
  is required.'
- 'error.package.promopassword.quota.reached: Quota exceeded for this promo password.'
- 'error.invalid.request.parameter: Invalid request parameter.'
- 'error.release.seats.not.found: Provided release seats not found.'
- 'error.reserved.seats.not.found: Provided reserved seats not found.'
- 'error.product.seats.reserve: Error reserving seats'
- 'error.product.seats.release: Error releasing seats'
- 'error.product.seats.singleseat: Please do not leave a single seat in between or
  beside your seat selection.'
- 'error.product.survey.mix: Error mix events with survey and non survey.'
- 'error.cart.package.mix-cart.fail: Package cannot be added to the cart with other
  purchases. Please complete your current purchases before continuing.'
- 'error.cart.add-event.mix-not-allowed: Please complete purchase of existing shopping
  cart items before proceeding to purchase tickets for the event: {0}.'
- 'error.cart.new-event.mix-not-allowed: {0} cannot be purchased with other events.
  Please complete your transaction before adding this event to your shopping cart.'
- 'error.cart.add-to-cart.redemption.quota-exceeded: Total quantity selected for discount
  has exceeded maximum limit entitled for this event.'
- '500: Internal System Error'
- '400: The list of product id is null or invalid.'
- '400: The list product ids is null or invalid.'
- '400: Seats not available for product.'
- '400: Product total amount mismatch for product'
- '400: Failed to process your order. Please try again later.'
- '400: Cart Item total amount mismatch, expected amount is'
- '400: Delivery charge not matched. Expected delivery fee is'
- '400: The list of cart line items are null or empty.'
- '400: The total cart items is invalid.'
- '400: External transaction id is already submitted'
- '400: Product id and Inventory Id values mismatch.'
- '400: Validate price model template failed!'
- 'error.cart.order.not-found-expired: Order ref no. not found or expired.'
- 'error.cart.order.paid-amount.mismatch: Order paid amount mismatch.'
- 'error.cart.order.transaction.submitted: Order is already submitted.'
- 'error.cart.precommit.payment-method.invalid: Invalid payment method'
- '400: transaction-seach-conditon-invalid: There is at the least a search condition.'
- '400: error.transaction.invalid-update-txn-ticket-request: Invalid request'
- '400: error.transaction.ticket-not-found: Ticket Id not found.'
- '400: error.transaction.ticket-already-printed: Ticket already printed.'
- 'httpStatus: 400, errorCode: error.cart.order.seat.not-available'
- 'httpStatus: 400, errorCode: error.cart.order.product-total-amount.mismatch'
- 'httpStatus: 400, errorCode: error.cart.order.generic'
- 'httpStatus: 400, errorCode: error.cart.order.delivery-charge.mismatch'
- 'httpStatus: 400, exceptionName: org.springframework.web.bind.MethodArgumentNotValidException,
  statusMessage: Patron type is null or invalid.'
- 'httpStatus: 400, exceptionName: org.springframework.web.bind.MethodArgumentNotValidException,
  statusMessage: Patron password is invalid.'
- 'httpStatus: 400, exceptionName: org.springframework.web.bind.MethodArgumentNotValidException,
  statusMessage: Patron email is null or invalid.'
- 'httpStatus: 400, exceptionName: org.springframework.web.bind.MethodArgumentNotValidException,
  statusMessage: The list of cart line items are null or empty.'
- 'httpStatus: 400, exceptionName: org.springframework.web.bind.MethodArgumentNotValidException,
  statusMessage: The total cart items is invalid.'
- 'httpStatus: 400, exceptionName: org.springframework.web.bind.MethodArgumentNotValidException,
  statusMessage: Delivery method is invalid.'
- 'httpStatus: 400, errorCode: error.cart.order.external.transaction.submitted'
- 'httpStatus: 400, errorCode: error.cart.product.inventory-id.mismatch'
- 'httpStatus: 400, errorCode: error.cart.order.delivery-method.invalid'
- 'httpStatus: 400, exceptionName: com.stixcloud.cart.AddToCartException, errorTime:
  2018-04-27T14:00:59.943+07:00'
- 'httpStatus: 400, errorCode: error.cart.inventory.seat.insufficient'
- 'httpStatus: 400, errorCode: error.cart.postcommit.generic'
- 'httpStatus: 500, exceptionName: org.springframework.data.redis.RedisConnectionFailureException,
  statusMessage: SocketTimeoutException: Read timed out'
- 'httpStatus: 400, errorCode: error.cart.order.not-found-expired'
- 'httpStatus: 400, errorCode: error.cart.order.paid-amount.mismatch'
- 'httpStatus: 400, errorCode: error.cart.order.transaction.submitted'
- 'httpStatus: 400, errorCode: error.cart.precommit.payment-method.invalid'
- 'httpStatus: 500'
- '500 Internal Server Error: NullPointerException'
- '400: error.cart.order.not-found-expired'
- '400: error.cart.order.paid-amount.mismatch'
- '400: error.cart.order.transaction.submitted'
- '400: error.cart.precommit.payment-method.invalid'
- '400: error.cart.order.external.transaction.submitted'
- 'httpStatus: 400, Error generating overview seatmap'
- 'httpStatus: 500, Internal Server Error'
- '400: Invalid Package Type Class Type: Invalid Package Class Type.'
- '500: Internal System Error: Internal system error. Please try again later'
- '400: error.cart.add-to-cart.fail: Add to Cart Failed.'
- '400: error.cart.not-found: Cart not found.'
- '400: error.cart.delete-item.item-id.invalid: Invalid cart item id.'
- '400: error.cart.delete-item.price-class-code.invalid: Invalid price class code.'
- '400: transaction-seach-conditon-invalid: There should be at least one search condition'
- '400: error.cart.order.not-found-expired: Order ref no. {transactionRefNo} not found
  or expired.'
- '400: error.cart.order.paid-amount.mismatch: Order ref no {transactionRefNo} paid
  amount mismatch, expected amount is {lineItemTotal}'
- '400: error.cart.order.transaction.submitted: Order ref no. {transactionRefNo} is
  already submitted'
- '400: error.cart.precommit.payment-method.invalid: Invalid payment method'
- '400: error.cart.order.external.transaction.submitted: External transaction id is
  already submitted'
- '400: org.springframework.web.bind.MethodArgumentNotValidException: External transaction
  id is missing.'
- '500: java.lang.NullPointerException: NullPointerException: '
- error.transaction.invalid-update-txn-ticket-request
- error.transaction.ticket-not-found
- error.transaction.ticket-already-printed
- '400: Error generating overview seatmap'
- 'error.cart.order.seat.not-available: Seats not available for product.'
- 'error.cart.order.product-total-amount.mismatch: Product total amount mismatch for
  product.'
- 'error.cart.order.generic: Failed to process your order. Please try again later.'
- 'error.cart.order.cart-total-amount.mismatch: Cart Item total amount mismatch, expected
  amount is'
- 'error.cart.order.delivery-charge.mismatch: Delivery charge not matched. Expected
  delivery fee is'
- 'error.cart.add-event.mix-not-allowed: Please complete purchase of existing shopping
  cart items before proceeding to purchase tickets for the event.'
- 'error.cart.order.delivery-method.invalid: Delivery method is invalid.'
- 'error.cart.product.inventory-id.mismatch: Product id and Inventory Id values mismatch.'
- 'error.cart.inventory.seat.insufficient: Failed to find seats for GA.'
- 'error.cart.promo.password.quota-reached: Invalid Promo Code entered!'
- 'error.cart.promo.password.empty: Invalid Promo Code entered!'
- 'error.cart.promo.password.incorrect: Invalid Promo Code entered!'
- '400: Order ref no. not found or expired.'
- '400: Order ref no. paid amount mismatch, expected amount is.'
- '400: Order ref no. is already submitted.'
- '400: Invalid payment method.'
- '400: External transaction id is already submitted.'
- '400: External transaction id is missing.'
- '400: transaction-seach-conditon-invalid: There should be at least one search condition.'
- '400 Bad Request: Check request parameters'
- '500 Internal Server Error: Service issue'
auth_info:
  mentioned_objects: []
client:
  base_url: https://api.stixcloud.com/api/v0/{tenant}
  auth:
    type: oauth2
    flow: client_credentials
    token_url: https://auth.stixcloud.com/auth/v0/{tenant}/oauth/token
    client_id: <client_id>
    client_secret: <client_secret>
  headers:
    Content-Type: application/json
    Authorization: Bearer
source_metadata: null
