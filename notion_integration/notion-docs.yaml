resources:
- name: page
  endpoint:
    path: /pages/{page_id}
    method: PATCH
    data_selector: .
  schema:
    columns:
      id:
        data_type: string
        nullable: false
      created_time:
        data_type: timestamp
        nullable: false
      last_edited_time:
        data_type: timestamp
        nullable: false
      created_by:
        data_type: object
        nullable: false
      last_edited_by:
        data_type: object
        nullable: false
      cover:
        data_type: object
        nullable: true
      icon:
        data_type: object
        nullable: true
      parent:
        data_type: object
        nullable: false
      archived:
        data_type: boolean
        nullable: false
      in_trash:
        data_type: boolean
        nullable: false
      properties:
        data_type: object
        nullable: false
      url:
        data_type: string
        nullable: false
- name: block
  endpoint:
    path: /v1/blocks/{block_id}
    method: GET
  schema:
    columns:
      object:
        data_type: string
        nullable: false
      id:
        data_type: string
        nullable: false
      type:
        data_type: string
        nullable: false
      created_time:
        data_type: string
        nullable: false
      last_edited_time:
        data_type: string
        nullable: false
      has_children:
        data_type: boolean
        nullable: false
      archived:
        data_type: boolean
        nullable: true
      in_trash:
        data_type: boolean
        nullable: false
- name: database
  endpoint:
    path: /v1/databases/{database_id}
    method: GET
  schema:
    columns:
      database_id:
        data_type: string
        nullable: false
- name: page
  endpoint:
    path: /v1/pages/{page_id}
    method: GET
  schema:
    columns:
      page_id:
        data_type: string
        nullable: false
- name: block
  endpoint:
    path: /v1/blocks/{block_id}
    method: GET
  schema:
    columns:
      block_id:
        data_type: string
        nullable: false
- name: page_properties
  endpoint:
    path: /v1/pages/{page_id}/properties
    method: GET
  schema:
    columns:
      page_id:
        data_type: string
        nullable: false
- name: block_children
  endpoint:
    path: /v1/blocks/{block_id}/children
    method: GET
  schema:
    columns:
      block_id:
        data_type: string
        nullable: false
      parent:
        data_type: string
        nullable: true
- name: database_relations
  endpoint:
    path: /v1/databases/{database_id}/relations
    method: GET
  schema:
    columns:
      database_id:
        data_type: string
        nullable: false
      relation_type:
        data_type: string
        enum:
        - single_property
        - dual_property
        nullable: false
- name: comment
  endpoint:
    path: /comments
    method: GET
    data_selector: results
    params:
      discussion_id: '{{ discussion_id }}'
  schema:
    columns:
      id:
        data_type: string
        nullable: false
      created_time:
        data_type: timestamp
        nullable: false
      last_edited_time:
        data_type: timestamp
        nullable: true
      parent:
        type:
          data_type: string
          nullable: false
        page_id:
          data_type: string
          nullable: true
        block_id:
          data_type: string
          nullable: true
      discussion_id:
        data_type: string
        nullable: false
      created_by:
        object:
          data_type: string
          nullable: false
        id:
          data_type: string
          nullable: false
      rich_text:
        data_type: json
        nullable: false
  incremental:
    field: last_edited_time
    param_name: last_edited_time
    format: iso8601
- name: complete_file_upload
  endpoint:
    path: /v1/file_uploads/{file_upload_id}/complete
    method: POST
    params:
      mode: multi_part
  schema: {}
- name: comment
  endpoint:
    path: /v1/comments
    method: POST
    data_selector: comment object
    params:
      parent_page_id:
        required: true
        type: string
      discussion_id:
        required: true
        type: string
  schema:
    columns:
      parent_page_id:
        data_type: string
        nullable: false
      discussion_id:
        data_type: string
        nullable: false
- name: database
  endpoint:
    path: /v1/databases
    method: POST
    params:
      parent_type:
        description: The parent of a new database must be a Notion page or a wiki
          database.
        required: true
        type: string
      properties_schema:
        description: Specifies properties schema for the new database.
        required: true
        type: json
- name: file_upload
  endpoint:
    path: /v1/file_uploads
    method: POST
  schema:
    columns:
      status:
        data_type: string
        nullable: false
- name: create_token
  endpoint:
    path: /v1/oauth/token
    method: POST
    params:
      redirect_uri:
        required: true
        condition: if set in Authorization URL or multiple in settings
- name: database
  endpoint:
    path: /v1/databases/{{database_id}}
    method: GET
    data_selector: properties
  schema:
    columns:
      id:
        data_type: string
        nullable: false
      object:
        data_type: string
        nullable: false
      created_time:
        data_type: timestamp
        nullable: false
      last_edited_time:
        data_type: timestamp
        nullable: false
      title:
        data_type: string
        nullable: true
      url:
        data_type: string
        nullable: false
      archived:
        data_type: boolean
        nullable: false
      in_trash:
        data_type: boolean
        nullable: false
      is_inline:
        data_type: boolean
        nullable: false
      public_url:
        data_type: string
        nullable: true
- name: delete_block
  endpoint:
    path: /v1/blocks/{block_id}
    method: DELETE
    params:
      archived:
        data_type: boolean
        required: true
  on_error: skip
- name: emoji
  endpoint:
    path: /pages
    method: POST
    data_selector: icon
    params:
      parent:
        page_id: string
      properties:
        title:
        - type: text
          text:
            content: string
            link: nullable
      icon:
        type: emoji
        emoji: string
  incremental: false
  schema:
    columns:
      type:
        data_type: string
        nullable: false
      emoji:
        data_type: string
        nullable: false
- name: custom_emoji
  endpoint:
    path: /pages
    method: PATCH
    data_selector: icon
    params:
      icon:
        type: custom_emoji
        custom_emoji:
          id: string
  incremental: false
  schema:
    columns:
      type:
        data_type: string
        nullable: false
      custom_emoji:
        id:
          data_type: string
          nullable: false
        name:
          data_type: string
          nullable: true
        url:
          data_type: string
          nullable: true
- name: file
  endpoint:
    path: /files/{id}
    method: GET
    data_selector: file
  schema:
    columns:
      url:
        data_type: string
        nullable: false
      expiry_time:
        data_type: timestamp
        nullable: false
- name: file_upload
  endpoint:
    path: /file_uploads/{id}
    method: GET
    data_selector: file_upload
  schema:
    columns:
      id:
        data_type: string
        nullable: false
- name: external_file
  endpoint:
    path: /external_files/{id}
    method: GET
    data_selector: external
  schema:
    columns:
      url:
        data_type: string
        nullable: false
- name: file_upload
  endpoint:
    path: /v1/files/upload
    method: POST
    data_selector: FileUpload
  incremental:
    field: last_edited_time
    param_name: lastEditedTime
    format: iso8601
  schema:
    columns:
      id:
        data_type: string
        nullable: false
      created_time:
        data_type: timestamp
        nullable: false
      last_edited_time:
        data_type: timestamp
        nullable: false
      expiry_time:
        data_type: timestamp
        nullable: true
      status:
        data_type: string
        nullable: false
      filename:
        data_type: string
        nullable: true
      content_type:
        data_type: string
        nullable: true
      content_length:
        data_type: integer
        nullable: true
      upload_url:
        data_type: string
        nullable: true
      complete_url:
        data_type: string
        nullable: true
      file_import_result:
        data_type: string
        nullable: true
  on_error: skip
- name: block_children
  endpoint:
    path: /v1/blocks/{block_id}/children
    method: GET
    data_selector: results
    params:
      block_id:
        data_type: string
        required: true
  paginator:
    type: cursor
    cursor_path: next_cursor
    cursor_param: start_cursor
    page_size_param: page_size
    default_page_size: unspecified
- name: databases
  endpoint:
    path: /v1/databases
    method: GET
    params: {}
  incremental:
    field: null
    param_name: null
    format: null
  schema:
    columns: {}
  on_error: skip
- name: bot_user
  endpoint:
    path: /v1/users/me
    method: GET
    data_selector: user
- name: user
  endpoint:
    path: /v1/users/{user_id}
    method: GET
  schema:
    columns:
      user_id:
        data_type: string
        nullable: false
- name: users
  endpoint:
    path: /v1/users
    method: GET
    data_selector: results
    params: {}
  schema:
    columns:
      object:
        data_type: string
        nullable: false
      id:
        data_type: string
        nullable: false
      name:
        data_type: string
        nullable: true
      type:
        data_type: string
        nullable: true
  on_error: skip
- name: users
  endpoint:
    path: /v1/users
    method: GET
    data_selector: results
  schema:
    columns:
      object:
        data_type: string
        nullable: false
      type:
        data_type: string
        nullable: false
      id:
        data_type: string
        nullable: false
- name: block_children
  endpoint:
    path: /v1/blocks/{block_id}/children
    method: GET
    data_selector: results
  schema:
    columns:
      object:
        data_type: string
        nullable: false
      type:
        data_type: string
        nullable: false
      id:
        data_type: string
        nullable: false
- name: comment
  endpoint:
    path: /v1/comments/{comment_id}
    method: GET
    data_selector: results
  schema:
    columns:
      object:
        data_type: string
        nullable: false
      type:
        data_type: string
        nullable: false
      id:
        data_type: string
        nullable: false
- name: page_property_item
  endpoint:
    path: /v1/pages/{page_id}/properties/{property_id}
    method: GET
    data_selector: results
  schema:
    columns:
      object:
        data_type: string
        nullable: false
      type:
        data_type: string
        nullable: false
      id:
        data_type: string
        nullable: false
- name: database_query
  endpoint:
    path: /v1/databases/{database_id}/query
    method: POST
    data_selector: results
  schema:
    columns:
      object:
        data_type: string
        nullable: false
      type:
        data_type: string
        nullable: false
      id:
        data_type: string
        nullable: false
- name: search
  endpoint:
    path: /v1/search
    method: POST
    data_selector: results
  schema:
    columns:
      object:
        data_type: string
        nullable: false
      type:
        data_type: string
        nullable: false
      id:
        data_type: string
        nullable: false
- name: introspect_token
  endpoint:
    path: /v1/oauth/introspect
    method: POST
    data_selector: .
    params: {}
  schema:
    columns:
      active:
        data_type: boolean
        nullable: false
      scope:
        data_type: string
        nullable: true
      issued_at:
        data_type: timestamp
        nullable: true
- name: file_uploads
  endpoint:
    path: /v1/file_uploads
    method: GET
    data_selector: file_uploads
  schema:
    columns:
      file_id:
        data_type: string
        nullable: false
      upload_time:
        data_type: timestamp
        nullable: false
- name: page
  endpoint:
    path: /v1/pages/{page_id}
    method: GET
  schema:
    columns:
      id:
        data_type: string
        nullable: false
      object:
        data_type: string
        nullable: true
      created_time:
        data_type: timestamp
        nullable: true
      last_edited_time:
        data_type: timestamp
        nullable: true
      title:
        data_type: string
        nullable: true
      icon:
        data_type: string
        nullable: true
      cover:
        data_type: string
        nullable: true
      properties:
        data_type: json
        nullable: true
  on_error: skip
- name: page
  endpoint:
    path: /v1/pages/{page_id}
    method: GET
    data_selector: properties
    params:
      page_id: '{{ page_id }}'
  schema:
    columns:
      id:
        data_type: string
        nullable: false
      created_time:
        data_type: timestamp
        nullable: false
      last_edited_time:
        data_type: timestamp
        nullable: false
      created_by:
        data_type: string
        nullable: false
      last_edited_by:
        data_type: string
        nullable: false
      archived:
        data_type: boolean
        nullable: false
      in_trash:
        data_type: boolean
        nullable: false
      properties:
        data_type: object
        nullable: true
      url:
        data_type: string
        nullable: false
      public_url:
        data_type: string
        nullable: true
- name: generic_paginated_endpoint
  endpoint:
    method: GET
    params:
      start_cursor:
        type: string
        required: false
        default: undefined
      page_size:
        type: number
        required: false
        default: 100
        maximum: 100
  incremental:
    field: not_specified
    param_name: start_cursor
  schema:
    columns:
      has_more:
        data_type: boolean
      next_cursor:
        data_type: string
      results:
        data_type: array
  on_error: skip
- name: database_parent
  endpoint:
    path: /databases/{database_id}
    method: GET
    params:
      type: database_id
      database_id: string
  schema:
    columns:
      type:
        data_type: string
        nullable: false
      database_id:
        data_type: string
        nullable: false
- name: page_parent
  endpoint:
    path: /pages/{page_id}
    method: GET
    params:
      type: page_id
      page_id: string
  schema:
    columns:
      type:
        data_type: string
        nullable: false
      page_id:
        data_type: string
        nullable: false
- name: workspace_parent
  endpoint:
    path: /workspaces/{workspace_id}
    method: GET
    params:
      type: workspace
      workspace: boolean
  schema:
    columns:
      type:
        data_type: string
        nullable: false
      workspace:
        data_type: boolean
        nullable: false
- name: block_parent
  endpoint:
    path: /blocks/{block_id}
    method: GET
    params:
      type: block_id
      block_id: string
  schema:
    columns:
      type:
        data_type: string
        nullable: false
      block_id:
        data_type: string
        nullable: false
- name: append_block_children
  endpoint:
    path: /v1/blocks/{block_id}/children
    method: PATCH
    params:
      after:
        data_type: string
        required: false
        description: ID of the block after which to append the new block
  schema:
    columns:
      block_id:
        data_type: string
        nullable: false
      children:
        data_type: array
        max_items: 100
- name: update_page_properties
  endpoint:
    path: /v1/pages/{page_id}
    method: PATCH
  schema:
    columns:
      page_id:
        data_type: string
        nullable: false
      properties:
        data_type: object
        nullable: true
      icon:
        data_type: string
        nullable: true
      cover:
        data_type: string
        nullable: true
- name: database_query
  endpoint:
    path: /databases/{database_id}/query
    method: POST
  params:
    filter: {}
    sorts: []
  incremental:
    field: last_edited_time
    param_name: timestamp
    format: iso8601
  schema:
    columns:
      property:
        data_type: string
        nullable: false
      checkbox:
        data_type: object
        nullable: true
      date:
        data_type: object
        nullable: true
      files:
        data_type: object
        nullable: true
      formula:
        data_type: object
        nullable: true
      multi_select:
        data_type: object
        nullable: true
      number:
        data_type: object
        nullable: true
      people:
        data_type: object
        nullable: true
      phone_number:
        data_type: string
        nullable: true
      relation:
        data_type: object
        nullable: true
      rich_text:
        data_type: object
        nullable: true
      select:
        data_type: object
        nullable: true
      status:
        data_type: object
        nullable: true
      timestamp:
        data_type: object
        nullable: true
      ID:
        data_type: object
        nullable: true
- name: database_entries
  endpoint:
    path: /v1/databases/{{database_id}}/query
    method: POST
    data_selector: results
    params:
      sorts:
      - property: Name
        direction: ascending
      - property: Food group
        direction: descending
  schema:
    columns:
      id:
        data_type: string
        nullable: false
      created_time:
        data_type: timestamp
        nullable: false
      last_edited_time:
        data_type: timestamp
        nullable: false
      Name:
        data_type: string
        nullable: true
      Food_group:
        data_type: string
        nullable: true
- name: database_query
  endpoint:
    path: /v1/databases/{database_id}/query
    method: POST
    data_selector: results
    params:
      filter_properties: array
  schema:
    columns:
      property:
        data_type: string
        nullable: true
      checkbox:
        data_type: boolean
        nullable: true
      equals:
        data_type: boolean
        nullable: true
      contains:
        data_type: string
        nullable: true
  on_error: skip
- name: page
  endpoint:
    path: /v1/pages
    method: POST
  schema:
    columns:
      title:
        data_type: string
        nullable: true
      properties:
        data_type: object
        nullable: true
      children:
        data_type: array
        nullable: true
- name: search
  endpoint:
    path: /v1/search
    method: POST
    params:
      query:
        required: false
        type: string
      filter:
        required: false
        type: string
- name: property_item
  endpoint:
    path: /v1/pages/{page_id}/properties/{property_id}
    method: GET
    data_selector: results
    params:
      page_size: '{{ dlt.config[''page_size''] }}'
  schema:
    columns:
      id:
        data_type: string
        nullable: false
      type:
        data_type: string
        nullable: false
  on_error: skip
- name: database_properties
  endpoint:
    path: /v1/databases/{database_id}/properties
    method: GET
  schema:
    columns:
      id:
        data_type: string
        nullable: false
      name:
        data_type: string
        nullable: false
      type:
        data_type: string
        nullable: false
      description:
        data_type: string
        nullable: true
- name: property_schema_object
  endpoint:
    path: /v1/databases/{database_id}/properties
    method: GET
    data_selector: results
  schema:
    columns:
      title:
        data_type: string
        nullable: false
      rich_text:
        data_type: string
        nullable: true
      number:
        data_type: integer
        nullable: true
      select:
        data_type: string
        nullable: true
      multi_select:
        data_type: array
        nullable: true
      date:
        data_type: date
        nullable: true
      people:
        data_type: array
        nullable: true
      files:
        data_type: array
        nullable: true
      checkbox:
        data_type: boolean
        nullable: true
      url:
        data_type: string
        nullable: true
      email:
        data_type: string
        nullable: true
      phone_number:
        data_type: string
        nullable: true
      formula:
        data_type: string
        nullable: true
      relation:
        data_type: string
        nullable: true
      rollup:
        data_type: string
        nullable: true
      created_time:
        data_type: timestamp
        nullable: true
      created_by:
        data_type: string
        nullable: true
      last_edited_time:
        data_type: timestamp
        nullable: true
      last_edited_by:
        data_type: string
        nullable: true
- name: page_property
  endpoint:
    path: /retrievePageProperty
    method: GET
  schema:
    columns:
      id:
        data_type: string
        nullable: false
      type:
        data_type: string
        nullable: true
      title:
        data_type: array
        nullable: true
      rich_text:
        data_type: array
        nullable: true
      number:
        data_type: integer
        nullable: true
      select:
        data_type: object
        nullable: true
      multi_select:
        data_type: array
        nullable: true
      status:
        data_type: object
        nullable: true
      date:
        data_type: object
        nullable: true
      formula:
        data_type: object
        nullable: true
      relation:
        data_type: array
        nullable: true
      rollup:
        data_type: object
        nullable: true
      people:
        data_type: array
        nullable: true
      files:
        data_type: array
        nullable: true
      checkbox:
        data_type: boolean
        nullable: true
      url:
        data_type: string
        nullable: true
      email:
        data_type: string
        nullable: true
      phone_number:
        data_type: string
        nullable: true
      created_time:
        data_type: string
        nullable: true
      created_by:
        data_type: object
        nullable: true
      last_edited_time:
        data_type: string
        nullable: true
      last_edited_by:
        data_type: object
        nullable: true
  on_error: skip
- name: rich_text_object
  endpoint:
    path: /v1/pages
    method: POST
    data_selector: properties
  schema:
    columns:
      text_content:
        data_type: string
        nullable: true
        max_length: 2000
      text_link_url:
        data_type: string
        nullable: true
        max_length: 2000
      equation_expression:
        data_type: string
        nullable: true
        max_length: 1000
  on_error: skip
- name: block_array
  endpoint:
    path: /v1/blocks
    method: POST
    data_selector: children
  schema:
    columns:
      block_elements:
        data_type: array
        nullable: true
        max_length: 100
- name: block
  endpoint:
    path: /v1/blocks/{block_id}
    method: GET
    data_selector: Block object
  schema:
    columns:
      block_id:
        data_type: string
        nullable: false
      has_children:
        data_type: boolean
        nullable: true
- name: comments
  endpoint:
    path: /v1/comments
    method: GET
    data_selector: results
  incremental: null
  schema:
    columns:
      id:
        data_type: string
        nullable: false
      object:
        data_type: string
        nullable: false
      created_time:
        data_type: timestamp
        nullable: false
      last_edited_time:
        data_type: timestamp
        nullable: false
  on_error: skip
- name: database
  endpoint:
    path: /v1/databases/{database_id}
    method: GET
    data_selector: database_object
    params:
      database_id:
        data_type: string
        required: true
        description: 32 characters alphanumeric string
  schema:
    columns:
      database_id:
        data_type: string
        nullable: false
  on_error: skip
- name: file_upload
  endpoint:
    path: /v1/file_uploads/{file_upload_id}
    method: GET
    data_selector: File Upload
    params:
      file_upload_id:
        data_type: string
        required: true
- name: property_item
  endpoint:
    path: /v1/pages/{page_id}/properties/{property_id}
    method: GET
  schema:
    columns:
      type:
        data_type: string
        nullable: false
      value:
        data_type: object
        nullable: true
- name: page
  endpoint:
    path: /v1/pages/{page_id}
    method: GET
    data_selector: properties
    params:
      page_id:
        required: true
  schema:
    columns:
      title:
        data_type: string
        nullable: false
      people:
        data_type: array
        nullable: true
      relation:
        data_type: array
        nullable: true
      rich_text:
        data_type: array
        nullable: true
  on_error: skip
  notes:
  - Endpoint not suitable for properties with more than 25 references.
  - For properties over 25 references, use Retrieve a page property endpoint.
- name: revoke_token
  endpoint:
    path: /v1/oauth/revoke
    method: POST
  schema: {}
- name: block
  endpoint:
    path: /v1/blocks/{block_id}
    method: GET
    data_selector: rich_text
    params:
      block_id: string
  schema:
    columns:
      type:
        data_type: string
        nullable: false
      plain_text:
        data_type: string
        nullable: false
      href:
        data_type: string
        nullable: true
- name: block_children
  endpoint:
    path: /v1/blocks/{block_id}/children
    method: GET
    data_selector: rich_text
    params:
      block_id: string
  schema:
    columns:
      type:
        data_type: string
        nullable: false
      plain_text:
        data_type: string
        nullable: false
      href:
        data_type: string
        nullable: true
- name: search
  endpoint:
    path: /v1/search
    method: GET
    params:
      query: string
      object: string
  incremental: false
  schema:
    columns:
      id:
        data_type: string
        nullable: false
      name:
        data_type: string
        nullable: false
  on_error: skip
- name: send_file_upload
  endpoint:
    path: /v1/file_uploads/{file_upload_id}/send
    method: POST
  schema:
    columns:
      file_upload_id:
        data_type: string
        nullable: false
      file:
        data_type: file
        nullable: false
- name: link_preview
  endpoint:
    path: /v1/unfurls
    method: POST
    data_selector: unfurl_attribute_objects
  schema:
    columns:
      id:
        data_type: string
        nullable: false
      name:
        data_type: string
        nullable: false
      type:
        data_type: string
        nullable: false
      value:
        data_type: string
        nullable: true
      section:
        data_type: string
        nullable: false
- name: block
  endpoint:
    path: /v1/blocks/{block_id}
    method: PATCH
    params:
      block_id:
        data_type: string
        required: true
  schema:
    columns:
      block_id:
        data_type: string
        nullable: false
      type:
        data_type: string
        nullable: false
      content:
        data_type: string
        nullable: true
  on_error: skip
- name: database
  endpoint:
    path: /v1/databases/{database_id}
    method: PATCH
    data_selector: database
    params:
      properties: {}
  schema:
    columns:
      title:
        data_type: string
        nullable: true
      description:
        data_type: string
        nullable: true
      properties:
        data_type: object
        nullable: true
  on_error: skip
- name: update_database_properties
  endpoint:
    path: /v1/databases/{id}
    method: PATCH
    data_selector: properties
    params:
      properties: {}
  schema:
    columns:
      name:
        data_type: string
        nullable: true
      type:
        data_type: string
        nullable: true
      description:
        data_type: string
        nullable: true
      example_value:
        data_type: string
        nullable: true
  on_error: unspecified
- name: remove_property
  endpoint:
    path: /v1/databases/{id}
    method: PATCH
    data_selector: properties
    params:
      properties: {}
  schema:
    columns:
      propertyToDelete:
        data_type: object
        nullable: true
  on_error: unspecified
- name: rename_property
  endpoint:
    path: /v1/databases/{id}
    method: PATCH
    data_selector: properties
    params:
      properties: {}
  schema:
    columns:
      Old Property Name:
        data_type: string
        nullable: true
      New Property Name:
        data_type: string
        nullable: true
  on_error: unspecified
- name: user
  endpoint:
    path: /v1/users/{user_id}
    method: GET
    data_selector: user
  schema:
    columns:
      id:
        data_type: string
        nullable: false
      object:
        data_type: string
        nullable: false
      type:
        data_type: string
        nullable: true
      name:
        data_type: string
        nullable: true
      avatar_url:
        data_type: string
        nullable: true
      person.email:
        data_type: string
        nullable: true
      bot.owner.type:
        data_type: string
        nullable: true
      bot.workspace_name:
        data_type: string
        nullable: true
- name: webhook_events
  endpoint:
    path: /webhooks/events
    method: GET
    data_selector: events
  schema:
    columns:
      id:
        data_type: string
        nullable: false
      timestamp:
        data_type: string
        nullable: false
      workspace_id:
        data_type: string
        nullable: false
      subscription_id:
        data_type: string
        nullable: false
      integration_id:
        data_type: string
        nullable: false
      type:
        data_type: string
        nullable: false
      authors:
        data_type: array
        nullable: true
      accessible_by:
        data_type: array
        nullable: true
      attempt_number:
        data_type: integer
        nullable: false
      entity:
        data_type: object
        nullable: false
      data:
        data_type: object
        nullable: true
- name: page_content_updated
  endpoint:
    path: /webhooks/page_content_updated
    method: POST
  schema:
    columns:
      page_id:
        data_type: string
        nullable: false
      event_type:
        data_type: string
        nullable: false
      timestamp:
        data_type: timestamp
        nullable: false
- name: comment_created
  endpoint:
    path: /webhooks/comment_created
    method: POST
  schema:
    columns:
      comment_id:
        data_type: string
        nullable: false
      page_id:
        data_type: string
        nullable: false
      event_type:
        data_type: string
        nullable: false
      timestamp:
        data_type: timestamp
        nullable: false
- name: database_schema_updated
  endpoint:
    path: /webhooks/database_schema_updated
    method: POST
  schema:
    columns:
      database_id:
        data_type: string
        nullable: false
      event_type:
        data_type: string
        nullable: false
      timestamp:
        data_type: timestamp
        nullable: false
notes:
- API uses bearer token authentication
- Supports patch method to archive or restore pages by changing 'archived' or 'in_trash'
  status
- Responses include detailed object information and status codes
- Uses bearer token authorization, requires managing tokens securely
- Integrations are attributed to a bot within Notion
- API uses bearer tokens for authentication.
- Not all block types are supported. Unsupported block types are marked as 'unsupported'.
- Response times from third-party services like iFramely can affect embed blocks.
- Integration capabilities limit API access and actions
- Capabilities must be explicitly set for the desired operations on content and users
- User information granularity can be adjusted in the integration settings
- Breaking changes in API versions need careful handling when upgrading
- Property types and structures might differ between versions
- Handling null values for certain types is necessary
- Requires OAuth2 authentication with authorization code flow.
- Need to enable 'read comments' or 'insert comments' capabilities for integration.
- Comments can be associated with either page or block but not other types.
- Rich text field supports formatting, links, and mentions but handling might be complex
  due to JSON structure.
- Uses OAuth2 for authentication
- Requires integration to have insert comment capabilities
- Endpoint allows creating comments either on a page or in a discussion thread
- Only one of parent.page_id or discussion_id should be provided, not both
- Cannot create new status database properties.
- Requires integration to have insert content capabilities.
- Uses REST API for initiating file uploads
- Response includes a File Upload object with a status of "pending"
- Redirect URI requirements vary based on the integration's settings and the Authorization
  URL parameters.
- Authentication required using OAuth2.
- Maximum schema size recommendation is 50KB to maintain performance.
- Requires integration with update content capabilities
- Handles archiving by setting 'archived: true' on blocks
- Requires API key for authentication
- The Notion API version must be specified in headers
- Refer to the status codes documentation for an up-to-date list of error codes.
- Error responses contain 'code' and 'message' properties for detail.
- Notion-hosted file URLs expire in 1 hour, refresh by re-fetching the file object.
- File Uploads can be reused across multiple Notion pages or blocks.
- External file links are permanent and do not expire.
- Requires OAuth2 authentication
- Supports only REST API interactions
- File uploads transition through various statuses like "pending", "uploaded", "expired",
  "failed"
- Expiry time is nullable and indicates the deadline to attach the file to a block
  or other object
- Endpoint returns only the first level of children for the specified block.
- Requires read content capabilities, otherwise returns HTTP 403.
- See Pagination guide for cursor use.
- Response may contain fewer than page_size of results.
- Endpoint is deprecated; use Search API instead
- Cannot filter results on this endpoint
- Only returns explicitly shared databases
- Requires integration with read content capabilities
- Endpoint accessible by integrations with any level of capabilities.
- User object limitations depend on integration's capabilities.
- Requires integration with user information capabilities to avoid HTTP 403 errors
- Endpoint requires integration to have user information capabilities.
- Does not support filtering by email or name.
- Guests are not included in the response.
- See Pagination for cursor usage details.
- Requires an integration token for authentication
- Supports cursor-based pagination
- All API requests must be sent over HTTPS
- API follows RESTful conventions
- Temporal values are encoded in ISO 8601
- Empty string values are not supported, use null instead
- Uses OAuth2 with refresh token
- Ensure proper OAuth scopes are setup for file upload access
- Requires OAuth2 for authentication
- Pagination via cursor using 'next_url'
- Limited to 25 inline references for certain properties like title or rich_text
- Requires OAuth2 authentication with read content capabilities.
- API returns only property IDs in the latest version, prior versions included values.
- Pagination uses cursor-based method.
- Pagination uses cursor-based approach, with optional 'start_cursor' and 'page_size'
  parameters
- Response may contain 'has_more' boolean and 'next_cursor' to facilitate further
  pagination
- This page has been deprecated and is no longer maintained
- Parenting rules may vary when creating pages, databases, or blocks via the API.
- Parent objects consistently represent the hierarchical structure in the API responses.
- Requires integration to have insert content capabilities
- Up to two levels of nesting allowed in a single request
- Limit of 100 block children per request
- Endpoint used to update properties of a page within a database
- Cannot update rollup property values or change a page's parent
- Requires specific capabilities set in My integrations dashboard
- Requires Notion integration setup with appropriate permissions
- Pagination supported
- Filters can be deeply nested up to two levels
- Supports multiple property data types for advanced querying
- Sorting can be either on property or timestamp
- Nested sorting is possible where order of sorts in list determines precedence
- Requires sharing the database with the integration before querying
- Pagination implemented via cursors
- Only supports querying databases shared with the integration
- Filters and sorts are similar to those provided in the Notion UI
- Supports querying with single or compound filters
- Some page properties are not editable via the API such as rollup, created_by, created_time,
  last_edited_by, last_edited_time
- Requires Insert Content capabilities on the target parent page or database
- Requires OAuth authentication with specific scopes for integration
- Supports pagination for large datasets
- Use specific endpoints for querying single databases rather than search for efficiency
- Uses OAuth2 for authentication, credentials must be managed securely.
- API requests are paginated, consider pagination handling for large data sets.
- Rate limits are enforced; throttle requests accordingly.
- API does not allow updating of certain database property types like status and title.
- Relations must be shared with your integration to retrieve or update properties.
- No authentication required for accessing public API endpoints
- Handling of multiple data types and structures within the same endpoint
- Ensure correct database ID is used in the request
- API supports a variety of property types including text, number, select, multi-select,
  and more.
- Pagination might be needed for endpoints returning more than 25 references.
- Handles rate limits using HTTP 429 responses and 'Retry-After' header
- Variable rate limits based on demand and reliability
- Future rate limit adjustments are possible
- Size limits for specific property types and overall payload size
- Strategies suggested for handling oversized requests
- Requires integration to have read content capabilities
- Use "Retrieve block children" for blocks with children
- See capabilities guide for more details on integration capabilities
- Integration capabilities for commenting must be enabled
- Endpoint requires read comment capabilities
- Notion API does not support retrieving linked databases
- Related databases must be shared with your integration to retrieve database properties
  from database relations
- Uses OAuth2 for authentication, ensure valid token is used
- Endpoint requires read content capabilities
- Supports pagination for properties with more than 25 references
- Rollup properties are handled differently based on aggregation
- This endpoint returns a maximum of 25 references per page property.
- Requires read content capabilities for integration.
- API handles various types of rich text objects, some with optional fields like href
- Pagination might be required for retrieving block children if the number exceeds
  the single request limit
- Search endpoint not optimized for exhaustive document enumeration
- Indexing is not immediate; may not return newly shared documents instantly
- Recommended to share pages/databases directly with integration for immediate availability
- Unique use of multipart/form-data only for this endpoint
- Requires boundary in Content-Type header as per RFC 2388
- Supports concurrent and out-of-order transmission of multipart segments
- API uses OAuth 2.0 for authentication.
- Detailed error messages are provided in the response body under "code" and "message".
- No authentication required for sending data to create Link Previews.
- Customizable sections and attributes for displaying content in Notion.
- Supports embedding rich media like images, videos, and audio.
- Requires integration to have update content capabilities
- Endpoint does not allow direct updates to children of a block, use Append block
  children instead
- REST API does not support updating database rows; use other endpoints for that.
- Not all property types can be seamlessly changed; some conversions might result
  in data loss.
- Schema size limit is 50KB to maintain performance.
- Certain properties like 'formula', 'select', 'status', and 'multi_select' options
  cannot be updated.
- Title property type cannot be changed.
- Name or options of status property cannot be updated via API.
- Unsupported rollup aggregations and formula depth limitations exist.
- Object not found and property value inconsistency after pagination are possible
  errors.
- Supports OAuth2 authentication
- User objects contain essential identifiers and optional informational fields
- SCIM API available for enterprise users for user and group provisioning
- Single Sign-On (SSO) configurable for enterprise workspaces
- Versioning is named for the date of release and is only for backwards incompatible
  changes.
- Notion-Version header is required in all REST API requests.
- v1 in URL is not related to API versioning.
- Events are aggregated to reduce noise and improve efficiency.
- Delivery may be delayed up to a minute for aggregated events.
- Events may arrive out of order; use timestamp to reorder.
- Webhook delivery retries up to 8 times with exponential backoff.
- Notion webhooks require HMAC verification for security.
- Endpoint must be SSL secured and publicly available.
- Supports real-time updates, reducing the need for polling.
- Verification of webhook subscription is required.
- Event type subscription can be configured and changed.
errors:
- Refer to the error codes documentation for possible errors
- 401 Unauthorized: Check the validity of the bearer token
- 401 Unauthorized: Invalid or expired token.
- 404 Not Found: Block not found or access denied.
- Unauthorized Access: Ensure correct OAuth scopes and tokens are used
- Capability Limit Exceeded: Check if the integration's capabilities match the required
    API operations
- Generic Error: Check API endpoint path and parameters
- 401 Unauthorized: Ensure that OAuth tokens are valid and integration capabilities
    are correctly set.
- 404 Not Found: Check if the targeted page or block exists and is accessible by the
    API.
- 403 Forbidden: Check if insert comment capabilities are enabled
- 400: Incorrectly formatted request.
- 403: Integration does not have insert content capabilities.
- 404: Specified parent page does not exist or integration does not have access.
- 429: Request exceeds the request limits.
- REQUEST_LIMIT_EXCEEDED: Throttle API calls or reduce frequency
- 401 Unauthorized: Recheck OAuth scopes or token expiration
- description: Refer to the Error codes section of the Status codes documentation
    for descriptions of each error code.
- '401 Unauthorized: Check OAuth credentials or token expiration.'
- 'Schema too large: Reduce the schema size as per recommendations.'
- 403: Integration doesn't have update content capabilities
- 404: Block doesn't exist or integration doesn't have access
- 400: Bad request, check parameters
- 429: Request limit exceeded
- Invalid_request: Check JSON body and parameters compatibility
- Unauthorized: Validate API key and permissions
- code: invalid_json
  http_status: 400
  description: The request body could not be decoded as JSON.
- code: invalid_request_url
  http_status: 400
  description: The request URL is not valid.
- code: invalid_request
  http_status: 400
  description: This request is not supported.
- code: validation_error
  http_status: 400
  description: The request body does not match the schema for the expected parameters.
- code: missing_version
  http_status: 400
  description: The request is missing the required Notion-Version header.
- code: unauthorized
  http_status: 401
  description: The bearer token is not valid.
- code: restricted_resource
  http_status: 403
  description: Client doesn't have permission to perform this operation with the given
    bearer token.
- code: object_not_found
  http_status: 404
  description: The resource does not exist or has not been shared with the owner of
    the bearer token.
- code: conflict_error
  http_status: 409
  description: Transaction could not be completed, potentially due to a data collision.
- code: rate_limited
  http_status: 429
  description: This request exceeds the number of requests allowed.
- code: internal_server_error
  http_status: 500
  description: An unexpected error occurred.
- code: service_unavailable
  http_status: 503
  description: Notion is unavailable. Try again later.
- code: database_connection_unavailable
  http_status: 503
  description: Notion's database is unavailable or in an unqueryable state.
- code: gateway_timeout
  http_status: 504
  description: Notion timed out while attempting to complete this request.
- UPLOAD_FAILED: Check the file size or network issues
- EXPIRED: Ensure the file is attached before the expiry time
- 401 Unauthorized: Recheck OAuth credentials or token validity
- 403 Forbidden: Check read content capabilities.
- 404 Not Found: Verify block ID.
- 400 Bad Request: General client-side error.
- 429 Too Many Requests: Exceeding request limits.
- 429 Too Many Requests: Request exceeds the request limits
- 403 Forbidden: Missing read content capabilities
- See Error codes section of the Status codes documentation for possible error codes.
- 403 Forbidden: Ensure integration capabilities are correctly set up
- 403 Forbidden: Check integration capabilities or user permissions.
- Invalid_request: Check if all required fields including the integration token are
    correctly provided
- Pagination_error: Ensure cursor values are correctly handled in pagination
- 401 Unauthorized: Check OAuth token and scopes
- 400 Bad Request: Check payload and headers
- 401 Unauthorized: Check OAuth credentials and scopes
- 429 Too Many Requests: Implement rate limiting and retry logic
- 401 Unauthorized: Check OAuth credentials and permissions.
- 404 Not Found: Page ID might be incorrect or does not exist.
- Invalid Parent Type: Ensure the parent type is correct for the operation being performed.
- Unauthorized Access: Verify API key or permissions if authentication was required.
- 400 Bad Request: Request exceeds the request limits
- 403 Forbidden: Integration doesn't have insert content capabilities
- 404 Not Found: Block specified by id doesn't exist or integration doesn't have access
- 403 Forbidden: Lack of update content capabilities
- validation_error: Check JSON structure and data types
- auth_error: Ensure API key is valid and has necessary permissions
- 401 Unauthorized: Check OAuth credentials or token validity
- 404: Database not shared or not found
- 400: Bad Request
- 403: Integration lacks required read content capabilities
- 403 Forbidden: Check Insert Content capabilities or authentication
- Common error codes as per Notion API documentation
- 429 Too Many Requests: Reduce request rate or handle retries with exponential backoff.
- 400 Bad Request: Validate request parameters before sending.
- 401 Unauthorized: Ensure access token is valid and has necessary permissions.
- Invalid Request: Check for correct database_id and property configurations.
- Authentication Error: Ensure API access and permissions are configured correctly.
- 404 Not Found: Check if the database ID is correct and accessible
- 500 Internal Server Error: Retry the request or contact support if persistent
- Errors related to exceeding the maximum number of references or API limits are managed
  by the client.
- rate_limited: Handle by respecting Retry-After or implementing backoff mechanism
- validation_error: Verify limits for size and type of data in requests
- 403 Unauthorized: Integration does not have read content capabilities
- 404 Not Found: Block does not exist or integration lacks access
- 400 Bad Request: Request error
- 429 Too Many Requests: Request limit exceeded
- 403 Forbidden: Check integration capabilities for reading comments
- Generic error codes: See the Error codes section of the Status codes documentation
- 401 Unauthorized: Check if OAuth token is valid and has necessary permissions
- 403 Forbidden: Integration does not have read content capabilities
- 404 Not Found: Page or property does not exist
- 400 Bad Request: Request exceeds limits
- 429 Too Many Requests: Request exceeds limits
- 404: Page doesn't exist or integration doesn't have access.
- 400: Request exceeds the limits.
- 429: Request rate limit exceeded.
- 403: Integration lacks read content capabilities.
- 400 Bad Request: Ensure request parameters are correct and valid
- 404 Not Found: Check if block_id is correct and exists
- 429 Too Many Requests: Implement request throttling or retry logic with exponential
    backoff
- QUERY_TIMEOUT: Simplify query or reduce page_size
- 401 Unauthorized: Verify OAuth token and permissions
- REQUEST_LIMIT_EXCEEDED: Adhere to Notion API rate limits
- invalid_json: Error parsing JSON body.
- invalid_request_url: Invalid request URL.
- invalid_request: Unsupported request.
- invalid_grant: Invalid code; this code has been revoked.
- validation_error: body failed validation.
- missing_version: Notion-Version header failed validation.
- unauthorized: API token is invalid.
- restricted_resource: API token does not have access to this resource.
- object_not_found: Could not find database with ID.
- conflict_error: Conflict occurred while saving.
- rate_limited: You have been rate limited.
- internal_server_error: Unexpected error occurred.
- bad_gateway: Bad Gateway.
- service_unavailable: Notion is unavailable.
- database_connection_unavailable: Notion is unavailable.
- gateway_timeout: Gateway Timeout.
- INVALID_REQUEST: Check JSON structure and required fields.
- UNSUPPORTED_MEDIA_TYPE: Ensure content-type is set correctly.
- 400: Incorrect type for the block or incorrect input for a given field
- 403: Integration does not have access to update content
- 404: Block does not exist, has been archived, or integration does not have access
    to the page
- 429: Request exceeds the request limits
- Error codes are detailed in the Status codes documentation.
- validation_error: Handle formula depth exceeding limits.
- object_not_found: Check permissions for related pages.
- 401 Unauthorized: Verify OAuth2 configuration and token validity
- If Notion-Version header is missing or incorrect, responses may not align with code
  expectations.
- 401 Unauthorized: Check the OAuth credentials and scopes.
- 429 Too Many Requests: Implement backoff logic and respect API rate limits.
- NOT_RECEIVING_EVENTS: Check access permissions and capabilities.
- VERIFICATION_FAILED: Ensure the verification token is correctly handled.
auth_info:
  mentioned_objects:
  - BearerToken
  - OauthToken
  - IntegrationCapabilities
  - OAuthToken
  - Integration
  - Capabilities
  - File Upload
  - AuthProvider
  - NamedCredential
  - API token
  - Integration capabilities
  - integration_token
  - oauth
  - user
  - integration
  - update_content_capabilities
  - Insert Content capabilities
  - Notion UI
  - unspecified
  - integration_capabilities
  - oauth2
  - Bearer
  - verification_token
client:
  base_url: https://api.notion.com/v1
  auth:
    type: bearer
    location: header
    header_name: Authorization
  headers:
    Content-Type: application/json
    Notion-Version: 2022-06-28
source_metadata: null
