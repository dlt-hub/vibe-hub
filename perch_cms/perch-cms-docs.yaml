resources:
- name: editor_plugins
  endpoint:
    path: /api/editors
    method: GET
    data_selector: plugins
    params: {}
- name: addons
  endpoint:
    path: /api/addons
    method: GET
- name: resources
  endpoint:
    path: /perch/resources
    method: GET
    data_selector: resources
    params: {}
- name: tag_attributes
  endpoint:
    path: /api/tag_attributes
    method: GET
    data_selector: attributes
- name: Field Types
  endpoint:
    path: /api/field-types
    method: GET
    data_selector: types
    params: {}
- name: field_group
  endpoint:
    path: /api/field_groups
    method: GET
    data_selector: field_groups
- name: blocks
  endpoint:
    path: /api/blocks
    method: GET
    data_selector: blocks
- name: categories
  endpoint:
    path: /perch/templates/categories/
    method: GET
    data_selector: categories
    params: {}
- name: conditional_tags
  endpoint:
    path: /api/conditional_tags
    method: GET
    data_selector: tags
    params: {}
- name: form_tags
  endpoint:
    path: /api/form_tags
    method: GET
    data_selector: tags
    params: {}
- name: no_results_tag
  endpoint:
    path: /templates/noresults/
    method: GET
    data_selector: content
    params: {}
- name: pagination_options
  endpoint:
    params:
      paginate: 'true'
      count: Integer
      pagination-var: page
      page-links: 'true'
      page-link-template: template
      page-link-style: shortened or all
- name: repeater
  endpoint:
    path: /templates/repeaters/
    method: GET
    data_selector: attributes
- name: search_tags
  endpoint:
    path: /api/search_tags
    method: GET
    data_selector: results
- name: Show All Tag
  endpoint:
    path: /api/show_all
    method: GET
    data_selector: content
- name: layouts
  endpoint:
    path: /perch/templates/layouts
    method: GET
    data_selector: layouts
    params: {}
- name: perch_mailchimp_campaign_content
  endpoint:
    path: /functions/mailchimp/perch_mailchimp_campaign_content
    method: GET
- name: perch_mailchimp_campaigns
  endpoint:
    path: /functions/mailchimp/perch_mailchimp_campaigns
    method: GET
- name: perch_mailchimp_form
  endpoint:
    path: /functions/mailchimp/perch_mailchimp_form
    method: GET
- name: navigation_functions
  endpoint:
    path: /functions/navigation/
    method: GET
    data_selector: functions
- name: podcasts
  endpoint:
    path: /api/podcasts
    method: GET
- name: episodes
  endpoint:
    path: /api/podcasts/episodes
    method: GET
- name: search
  endpoint:
    path: /api/search
    method: GET
    data_selector: results
    params: {}
- name: perch_shop_categories
  endpoint:
    path: /functions/shop-paypal/perch-shop-categories/
    method: GET
- name: perch_shop_custom
  endpoint:
    path: /functions/shop-paypal/perch-shop-custom/
    method: GET
- name: perch_shop_product_field
  endpoint:
    path: /functions/shop-paypal/perch-shop-product-field/
    method: GET
- name: perch_shop_product
  endpoint:
    path: /functions/shop-paypal/perch-shop-product/
    method: GET
- name: perch_shop_products_by_category
  endpoint:
    path: /functions/shop-paypal/perch-shop-products-by-category/
    method: GET
- name: cart
  endpoint:
    path: /functions/shop/cart/
    method: GET
- name: checkout
  endpoint:
    path: /functions/shop/checkout/
    method: GET
- name: customers
  endpoint:
    path: /functions/shop/customers/
    method: GET
- name: orders
  endpoint:
    path: /functions/shop/orders/
    method: GET
- name: products
  endpoint:
    path: /functions/shop/products/
    method: GET
- name: shipping
  endpoint:
    path: /functions/shop/shipping/
    method: GET
- name: collections
  endpoint:
    path: /api/collections
    method: GET
    data_selector: data
    params: {}
- name: import
  endpoint:
    path: /api/import
    method: POST
    data_selector: data
    params: {}
- name: apps
  endpoint:
    path: /api/apps/
    method: GET
    data_selector: records
- name: auth
  endpoint:
    path: /api/auth/
    method: GET
    data_selector: records
- name: buckets
  endpoint:
    path: /api/buckets/
    method: GET
    data_selector: records
- name: dashboard
  endpoint:
    path: /api/dashboard/
    method: GET
    data_selector: records
- name: events
  endpoint:
    path: /api/events/
    method: GET
    data_selector: records
- name: templates
  endpoint:
    path: /api/templates/
    method: GET
    data_selector: records
- name: UI Customisations
  endpoint:
    path: /api/custom-ui/
    method: GET
    data_selector: customisations
    params: {}
- name: dashboard_widget
  endpoint:
    path: /api/dashboard/
    method: GET
    data_selector: widgets
    params: {}
- name: template_handler
  endpoint:
    path: /api/templates/
    method: GET
    data_selector: handlers
    params: {}
- name: form_validators
  endpoint:
    path: /api/validators/
    method: GET
    data_selector: validators
    params: {}
- name: search_handler
  endpoint:
    path: /api/search/
    method: POST
    data_selector: results
- name: twitter
  endpoint:
    path: https://publish.twitter.com/oembed
    method: GET
    data_selector: html
    params: {}
- name: instagram
  endpoint:
    path: https://api.instagram.com/oembed/
    method: GET
    data_selector: html
    params: {}
- name: collections
  endpoint:
    path: /api/import/collections/
    method: POST
- name: assets
  endpoint:
    path: /api/import/assets/
    method: POST
- name: categories
  endpoint:
    path: /api/import/categories/
    method: POST
- name: products
  endpoint:
    path: /api/import/shop/products/
    method: POST
- name: editor_plugins
  endpoint:
    path: /api/editors
    method: GET
    data_selector: plugins
    params: {}
- name: UI Customisations
  endpoint:
    path: /api/custom-ui/
    method: GET
- name: form_validators
  endpoint:
    path: /api/validators
    method: GET
    data_selector: validators
    params: {}
- name: event_hooks
  endpoint:
    path: /api/events
    method: GET
    data_selector: events
- name: dashboard_widget
  endpoint:
    path: /api/dashboard/
    method: GET
    data_selector: widgets
    params: {}
- name: template_handler
  endpoint:
    path: /api/templates/
    method: GET
    data_selector: handlers
    params: {}
- name: search_handler
  endpoint:
    path: /api/search/
    method: GET
    data_selector: results
- name: cloudsquirrel
  endpoint:
    path: /api/buckets/cloudsquirrel
    method: POST
    data_selector: buckets
    params: {}
notes:
- Perch uses the jQuery library on its pages.
- Template tags used to use XML-style self-closing tags. The requirement has been
  removed.
- Attributes that have no value are assumed to be true.
- Perch Support happens in our forum.
- If you post to the forum and your software is out of date, the first thing we will
  do is ask you to update.
- Perch has a debug mode.
- You won’t break anything, try it and see what happens.
- If you cannot access the log then you need to ask your host.
- If your error says Permission denied then you need to find out how to set permissions
  for PHP to be able to create files.
- You need to enable PHP Sessions in some way, or if this was previously working it
  may be that your Sessions folder is full.
- If you are trying to upload and process large images - see the details about Assets
  in this document for more help.
- If a live site suddenly stops connecting to the database and you haven’t changed
  anything this will not have anything to do with Perch.
- If you see something like this and recently updated Perch it is likely the App you
  are using needs updating to match.
- You might see this if you are trying to upload and process large images.
- If you have one of these and are still having a problem try to resize a very small
  and simple image.
- To keep your site nice and fast we cache the output of your template plus the content
  you enter when the content is saved.
- By default, resources are stored in the perch/resources folder.
- Resource clean-up isn’t immediate due to undo history, which saves 30 steps.
- Perch 3 requires a newer version of PHP. We recommend PHP 7, but the very minimum
  is PHP 5.4.
- Before making any changes, make a backup of your files and your database.
- We don’t recommend upgrading a live site in-place.
- Template tags used to use XML-style self-closing tags.
- This requirement has been removed.
- Field groups are an experimental feature added to Perch 3.1.
- If you reorder fields using the order attribute, or repeat a field outside and before
  the group, the results may not be as you expect.
- Navigation falls under the page management aspects of Perch and therefore uses the
  namespace `perch:pages`.
- When using perch_content_custom() to paginate the returned data you must also add
  some markup to your template to display the paging.
- You can set an number of options to configure how the pagination behaves.
- This will only work if the template is processed as the page loads, so it won’t
  work with perch_content() as that renders the template when the content is edited.
- Use perch_content_custom() instead.
- Your search is likely to need pagination, in which case take a look at the Pagination
  template documentation for more details.
- This Add-on has been deprecated. If you want to build a store we would suggest looking
  at our fully-featured Shop Add-on
- Perch is a PHP and MySQL Content Management System (CMS) designed as a “drop-in”
  solution for small websites.
- Assets must first be temporarily uploaded to your site before being transferred
  to storage, so your default resource bucket still needs to be configured and writable.
- Headless CMS responds with pure data, often structured as JSON or XML.
- Make sure that the collection uses title on one or more fields
- Designed primarily for staging sites, site behind login enables you to deny access
  to pages of your site to any user who is not logged in to the Runway control panel.
- When PERCH_SITE_BEHIND_LOGIN is set to true, any page views that are not authenticated
  will receive an HTTP 403 response.
- An authentication plugin is a class that implements key methods such as log_user_in
  and log_user_out.
- The plugin class should implement the log_user_in, log_user_out and resume_session
  methods.
- Uploaded assets are stored in resource buckets, which are managed through the user’s
  bucket list.
- Runway can write to the local or network file system, and includes handlers for
  Dropbox, Cloudfiles and Amazon S3.
- Customisations are made by placing your files in the perch/addons/plugins/ui folder.
- Be sure to test your changes after updating Perch in case anything that affects
  you has changed.
- Widgets can be created as part of an app, or as standalone widgets.
- You must create a folder in perch/addons/apps to store your widget.
- Perch uses a publisher/subscriber model of custom events to enable loose interaction
  between add-ons without each needing to know about the other.
- Template filters are not enabled by default. To enable them, set the PERCH_TEMPLATE_FILTERS
  config option to true.
- A template handler is a PHP class that extends the PerchAPI_TemplateHandler base
  class.
- The tag mask is crucial to specify - without it the template engine won’t know about
  your tags.
- Validators don’t need to be registered, you just need a class with a static method
  that can be called when the field is validated.
- An app can include its data as part of the search by exposing a class which implements
  the PerchAPI_SearchHandler interface and registering it at runtime.
- Perch Feathers are a way to manage front-end assets such as CSS and JavaScript through
  Perch.
- 'Perch ships with three in-built editors: MarkItUp, SimpleMDE and Redactor.'
- Both log_user_in and resume_session should return an array with the user’s email
  address (as an identifier) and the slug of the Perch user role that the user should
  be assigned.
- Widgets can be created as part of an app or as standalone widgets
- 'Minimum of 2 files required: dashboard.php and admin.php'
- Template handlers allow for custom tag processing in Perch CMS.
- You can add support for alternative backends using a bucket handler.
- If the service you need to integrate with already has PHP stream wrappers available,
  then the process of making it available in Runway should be very simple.
errors:
- Blank page / white screen
- A 500 error
- HTML output that seems to cut off
- 'PHP Catchable fatal error: Argument 2 passed to PerchFieldType::__construct() must
  be an instance of PerchXMLTag'
- 'Warning: move_uploaded_file(...) [function.move-uploaded-file]: failed to open
  stream: Permission denied'
- 'Warning: Cannot modify header information - headers already sent by ...'
- 'HTTP 403: Access denied for unauthorized users'
- 'HTTP 503: Service unavailable when site is offline'
auth_info:
  mentioned_objects: []
client:
  base_url: https://grabaperch.com
  headers:
    Accept: application/json
source_metadata: null
