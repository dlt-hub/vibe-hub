resources:
- name: account_activities
  endpoint:
    path: /AccountInformation/getAccountActivities
    method: GET
- name: account_activities
  endpoint:
    path: /accounts/{accountId}/activities
    method: GET
    data_selector: data
    params:
      userId: string
      userSecret: string
- name: API Status
  endpoint:
    path: /reference/API%20Status/ApiStatus_check
    method: GET
- name: Register user
  endpoint:
    path: /reference/Authentication/Authentication_registerSnapTradeUser
    method: POST
- name: List all users
  endpoint:
    path: /reference/Authentication/Authentication_listSnapTradeUsers
    method: GET
- name: Delete user
  endpoint:
    path: /reference/Authentication/Authentication_deleteSnapTradeUser
    method: DELETE
- name: Rotate user secret
  endpoint:
    path: /reference/Authentication/Authentication_resetSnapTradeUserSecret
    method: POST
- name: Generate Connection Portal URL
  endpoint:
    path: /reference/Authentication/Authentication_loginSnapTradeUser
    method: POST
- name: List accounts
  endpoint:
    path: /reference/Account%20Information/AccountInformation_listUserAccounts
    method: GET
- name: List account positions
  endpoint:
    path: /reference/Account%20Information/AccountInformation_getUserAccountPositions
    method: GET
- name: List account balances
  endpoint:
    path: /reference/Account%20Information/AccountInformation_getUserAccountBalance
    method: GET
- name: List account orders
  endpoint:
    path: /reference/Account%20Information/AccountInformation_getUserAccountOrders
    method: GET
- name: Get equity symbol quotes
  endpoint:
    path: /reference/Trading/Trading_getUserAccountQuotes
    method: GET
- name: Check equity order impact
  endpoint:
    path: /reference/Trading/Trading_getOrderImpact
    method: POST
- name: Place checked equity order
  endpoint:
    path: /reference/Trading/Trading_placeOrder
    method: POST
- name: Refresh holdings for a connection
  endpoint:
    path: /reference/Connections/Connections_refreshBrokerageAuthorization
    method: POST
- name: API Status
  endpoint:
    path: /reference/API%20Status/ApiStatus_check
    method: GET
- name: Register user
  endpoint:
    path: /reference/Authentication/Authentication_registerSnapTradeUser
    method: POST
- name: List all users
  endpoint:
    path: /reference/Authentication/Authentication_listSnapTradeUsers
    method: GET
- name: Delete user
  endpoint:
    path: /reference/Authentication/Authentication_deleteSnapTradeUser
    method: DELETE
- name: Rotate user secret
  endpoint:
    path: /reference/Authentication/Authentication_resetSnapTradeUserSecret
    method: POST
- name: Generate Connection Portal URL
  endpoint:
    path: /reference/Authentication/Authentication_loginSnapTradeUser
    method: POST
- name: List accounts
  endpoint:
    path: /reference/Account%20Information/AccountInformation_listUserAccounts
    method: GET
- name: List account positions
  endpoint:
    path: /reference/Account%20Information/AccountInformation_getUserAccountPositions
    method: GET
- name: List account balances
  endpoint:
    path: /reference/Account%20Information/AccountInformation_getUserAccountBalance
    method: GET
- name: List account orders
  endpoint:
    path: /reference/Account%20Information/AccountInformation_getUserAccountOrders
    method: GET
- name: Get equity symbol quotes
  endpoint:
    path: /reference/Trading/Trading_getUserAccountQuotes
    method: GET
- name: Check equity order impact
  endpoint:
    path: /reference/Trading/Trading_getOrderImpact
    method: POST
- name: Place checked equity order
  endpoint:
    path: /reference/Trading/Trading_placeOrder
    method: POST
- name: Refresh holdings for a connection
  endpoint:
    path: /reference/Connections/Connections_refreshBrokerageAuthorization
    method: POST
- name: API Status
  endpoint:
    path: /reference/API%20Status/ApiStatus_check
    method: GET
- name: Register user
  endpoint:
    path: /reference/Authentication/Authentication_registerSnapTradeUser
    method: POST
- name: List all users
  endpoint:
    path: /reference/Authentication/Authentication_listSnapTradeUsers
    method: GET
- name: Delete user
  endpoint:
    path: /reference/Authentication/Authentication_deleteSnapTradeUser
    method: DELETE
- name: Rotate user secret
  endpoint:
    path: /reference/Authentication/Authentication_resetSnapTradeUserSecret
    method: POST
- name: List accounts
  endpoint:
    path: /reference/Account%20Information/AccountInformation_listUserAccounts
    method: GET
- name: List account positions
  endpoint:
    path: /reference/Account%20Information/AccountInformation_getUserAccountPositions
    method: GET
- name: List account balances
  endpoint:
    path: /reference/Account%20Information/AccountInformation_getUserAccountBalance
    method: GET
- name: List account orders
  endpoint:
    path: /reference/Account%20Information/AccountInformation_getUserAccountOrders
    method: GET
- name: Get equity symbol quotes
  endpoint:
    path: /reference/Trading/Trading_getUserAccountQuotes
    method: GET
- name: Check equity order impact
  endpoint:
    path: /reference/Trading/Trading_getOrderImpact
    method: POST
- name: Place checked equity order
  endpoint:
    path: /reference/Trading/Trading_placeOrder
    method: POST
- name: Refresh holdings for a connection
  endpoint:
    path: /reference/Connections/Connections_refreshBrokerageAuthorization
    method: POST
- name: tradable_asset_pairs
  endpoint:
    path: /reference/Trading/Trading_searchCryptocurrencyPairInstruments
    method: GET
- name: crypto_pair_quote
  endpoint:
    path: /reference/Trading/Trading_getCryptocurrencyPairQuote
    method: GET
- name: place_crypto_order
  endpoint:
    path: /reference/Trading/Trading_placeCryptoOrder
    method: POST
- name: tradable_asset_pairs
  endpoint:
    path: /reference/Trading/Trading_searchCryptocurrencyPairInstruments
    method: GET
- name: crypto_pair_quote
  endpoint:
    path: /reference/Trading/Trading_getCryptocurrencyPairQuote
    method: GET
- name: place_crypto_order
  endpoint:
    path: /reference/Trading/Trading_placeCryptoOrder
    method: POST
- name: user_registered
  endpoint:
    path: /registerUser/
    method: POST
    data_selector: webhookId
- name: user_deleted
  endpoint:
    path: /deleteUser/
    method: POST
    data_selector: userId
- name: connection_attempted
  endpoint:
    path: /connectionAttempted/
    method: POST
    data_selector: webhookId
- name: connection_added
  endpoint:
    path: /connectionAdded/
    method: POST
    data_selector: webhookId
- name: connection_deleted
  endpoint:
    path: /connectionDeleted/
    method: POST
    data_selector: webhookId
- name: connection_broken
  endpoint:
    path: /connectionBroken/
    method: POST
    data_selector: webhookId
- name: connection_fixed
  endpoint:
    path: /connectionFixed/
    method: POST
    data_selector: webhookId
- name: connection_updated
  endpoint:
    path: /connectionUpdated/
    method: POST
    data_selector: webhookId
- name: connection_failed
  endpoint:
    path: /connectionFailed/
    method: POST
    data_selector: webhookId
- name: new_account_available
  endpoint:
    path: /newAccountAvailable/
    method: POST
    data_selector: webhookId
- name: account_transactions_initial_update
  endpoint:
    path: /accountTransactionsInitialUpdate/
    method: POST
    data_selector: webhookId
- name: account_transactions_updated
  endpoint:
    path: /accountTransactionsUpdated/
    method: POST
    data_selector: webhookId
- name: account_removed
  endpoint:
    path: /accountRemoved/
    method: POST
    data_selector: webhookId
- name: trades_placed
  endpoint:
    path: /tradesPlaced/
    method: POST
    data_selector: webhookId
- name: account_holdings_updated
  endpoint:
    path: /accountHoldingsUpdated/
    method: POST
    data_selector: webhookId
- name: USER_REGISTERED
  endpoint:
    path: /registerUser/
    method: POST
    data_selector: webhookId
    params: {}
- name: USER_DELETED
  endpoint:
    path: /deleteUser/
    method: POST
    data_selector: userId
    params: {}
- name: CONNECTION_ATTEMPTED
  endpoint:
    path: /connectionAttempt/
    method: POST
    data_selector: connectionAttemptedResult
    params: {}
- name: CONNECTION_ADDED
  endpoint:
    path: /addConnection/
    method: POST
    data_selector: webhookId
    params: {}
- name: CONNECTION_DELETED
  endpoint:
    path: /deleteConnection/
    method: POST
    data_selector: webhookId
    params: {}
- name: CONNECTION_BROKEN
  endpoint:
    path: /connectionBroken/
    method: POST
    data_selector: webhookId
    params: {}
- name: CONNECTION_FIXED
  endpoint:
    path: /connectionFixed/
    method: POST
    data_selector: webhookId
    params: {}
- name: CONNECTION_UPDATED
  endpoint:
    path: /updateConnection/
    method: POST
    data_selector: webhookId
    params: {}
- name: CONNECTION_FAILED
  endpoint:
    path: /connectionFailed/
    method: POST
    data_selector: webhookId
    params: {}
- name: NEW_ACCOUNT_AVAILABLE
  endpoint:
    path: /newAccount/
    method: POST
    data_selector: webhookId
    params: {}
- name: ACCOUNT_TRANSACTIONS_INITIAL_UPDATE
  endpoint:
    path: /accountTransactionsInitialUpdate/
    method: POST
    data_selector: webhookId
    params: {}
- name: ACCOUNT_TRANSACTIONS_UPDATED
  endpoint:
    path: /accountTransactionsUpdated/
    method: POST
    data_selector: webhookId
    params: {}
- name: ACCOUNT_REMOVED
  endpoint:
    path: /accountRemoved/
    method: POST
    data_selector: webhookId
    params: {}
- name: TRADES_PLACED
  endpoint:
    path: /tradesPlaced/
    method: POST
    data_selector: webhookId
    params: {}
- name: ACCOUNT_HOLDINGS_UPDATED
  endpoint:
    path: /accountHoldingsUpdated/
    method: POST
    data_selector: webhookId
    params: {}
- name: account_details
  endpoint:
    path: /reference/Account%20Information/AccountInformation_getUserAccountDetails
    method: GET
- name: positions
  endpoint:
    path: /reference/Account%20Information/AccountInformation_getUserAccountPositions
    method: GET
- name: balances
  endpoint:
    path: /reference/Account%20Information/AccountInformation_getUserAccountBalance
    method: GET
- name: orders
  endpoint:
    path: /reference/Account%20Information/AccountInformation_getUserAccountOrders
    method: GET
- name: activities
  endpoint:
    path: /reference/Account%20Information/AccountInformation_getAccountActivities
    method: GET
- name: account_details
  endpoint:
    path: /reference/Account%20Information/AccountInformation_getUserAccountDetails
    method: GET
- name: account_positions
  endpoint:
    path: /reference/Account%20Information/AccountInformation_getUserAccountPositions
    method: GET
- name: account_balances
  endpoint:
    path: /reference/Account%20Information/AccountInformation_getUserAccountBalance
    method: GET
- name: account_orders
  endpoint:
    path: /reference/Account%20Information/AccountInformation_getUserAccountOrders
    method: GET
- name: account_recent_orders
  endpoint:
    path: /reference/Account%20Information/AccountInformation_getUserAccountRecentOrders
    method: GET
- name: account_activities
  endpoint:
    path: /reference/Account%20Information/AccountInformation_getAccountActivities
    method: GET
- name: Connections
  endpoint:
    path: /reference/Connections/Connections_listBrokerageAuthorizations
    method: GET
- name: Authentication
  endpoint:
    path: /reference/Authentication/Authentication_loginSnapTradeUser
    method: POST
- name: user_accounts
  endpoint:
    path: /accounts
    method: GET
- name: account_activities
  endpoint:
    path: /accounts/{account_id}/activities
    method: GET
- name: place_order
  endpoint:
    path: /accounts/{account_id}/orders
    method: POST
- name: user_accounts
  endpoint:
    path: /reference/Account%20Information/AccountInformation_listUserAccounts
    method: GET
- name: account_activities
  endpoint:
    path: /reference/Account%20Information/AccountInformation_getAccountActivities
    method: GET
- name: place_order
  endpoint:
    path: /reference/Trading/Trading_placeForceOrder
    method: POST
- name: API Status
  endpoint:
    path: /
    method: GET
    data_selector: object
- name: API Status
  endpoint:
    path: /
    method: GET
    data_selector: object
    params: {}
- name: register_user
  endpoint:
    path: /api/v1/snapTrade/registerUser
    method: POST
- name: register_user
  endpoint:
    path: /api/v1/snapTrade/registerUser
    method: POST
- name: list_users
  endpoint:
    path: /api/v1/snapTrade/listUsers
    method: GET
    data_selector: array of strings
- name: list_users
  endpoint:
    path: /api/v1/snapTrade/listUsers
    method: GET
    data_selector: array of strings
- name: delete_user
  endpoint:
    path: /api/v1/snapTrade/deleteUser
    method: DELETE
    data_selector: object
    params:
      userId: string
- name: delete_user
  endpoint:
    path: /snapTrade/deleteUser
    method: DELETE
    data_selector: object
    params:
      userId: string
- name: rotate_user_secret
  endpoint:
    path: /api/v1/snapTrade/resetUserSecret
    method: POST
- name: rotate_user_secret
  endpoint:
    path: /snapTrade/resetUserSecret
    method: POST
- name: Generate Connection Portal URL
  endpoint:
    path: /api/v1/snapTrade/login
    method: POST
- name: Generate Connection Portal URL
  endpoint:
    path: /api/v1/snapTrade/login
    method: POST
    data_selector: redirectURI
    params: {}
- name: accounts
  endpoint:
    path: /accounts
    method: GET
    data_selector: array of objects
    params:
      userId: string required
      userSecret: string required
- name: accounts
  endpoint:
    path: /accounts
    method: GET
    data_selector: data
- name: account_positions
  endpoint:
    path: /api/v1/accounts/{accountId}/positions
    method: GET
    params:
      userId: string
      userSecret: string
- name: account_positions
  endpoint:
    path: /api/v1/accounts/{accountId}/positions
    method: GET
- name: account_balances
  endpoint:
    path: /accounts/{accountId}/balances
    method: GET
    data_selector: array of objects
    params:
      userId: string
      userSecret: string
- name: account_orders
  endpoint:
    path: /Account%20Information/AccountInformation_getUserAccountOrders
    method: GET
- name: account_balances
  endpoint:
    path: /api/v1/accounts/{accountId}/balances
    method: GET
    data_selector: array of objects
    params:
      accountId: 'string (format: uuid)'
      userId: string
      userSecret: string
- name: account_orders
  endpoint:
    path: /reference/Account%20Information/AccountInformation_getUserAccountOrders
    method: GET
- name: account_orders
  endpoint:
    path: /api/v1/accounts/{accountId}/orders
    method: GET
    data_selector: array of objects
- name: brokerage_order
  endpoint:
    path: /brokerage/orders
    method: GET
    data_selector: orders
- name: account_orders
  endpoint:
    path: /api/v1/accounts/{accountId}/orders
    method: GET
    data_selector: array of objects
    params:
      userId: string
      userSecret: string
      state: all
      days: integer
- name: equity_symbol_quotes
  endpoint:
    path: /api/v1/accounts/{accountId}/quotes
    method: GET
    params:
      userId: string
      userSecret: string
      symbols: string
- name: brokerage_order
  endpoint:
    path: /brokerage_order
    method: GET
    data_selector: records
- name: check_equity_order_impact
  endpoint:
    path: /api/v1/trade/impact
    method: POST
- name: equity_symbol_quotes
  endpoint:
    path: /api/v1/accounts/{accountId}/quotes
    method: GET
    data_selector: data
    params:
      userId: userId
      userSecret: userSecret
      symbols: symbols
      use_ticker: use_ticker
- name: account_information
  endpoint:
    path: /reference/Account%20Information/AccountInformation_listUserAccounts
    method: GET
- name: options
  endpoint:
    path: /reference/Options/Options_listOptionHoldings
    method: GET
- name: trading
  endpoint:
    path: /reference/Trading/Trading_placeOrder
    method: POST
- name: reference_data
  endpoint:
    path: /reference/Reference%20Data/ReferenceData_getPartnerInfo
    method: GET
- name: Check equity order impact
  endpoint:
    path: /api/v1/trade/impact
    method: POST
- name: place_order
  endpoint:
    path: /api/v1/trade/{tradeId}
    method: POST
    data_selector: data
    params: {}
- name: brokerage_order
  endpoint:
    path: /brokerage/orders
    method: GET
    data_selector: orders
- name: refresh_holdings
  endpoint:
    path: /api/v1/authorizations/{authorizationId}/refresh
    method: POST
    params:
      authorizationId: 'string (format: uuid)'
      userId: string
      userSecret: string
- name: place_order
  endpoint:
    path: /trade/{tradeId}
    method: POST
    data_selector: object
    params: {}
- name: brokerage_order
  endpoint:
    path: /brokerage/orders
    method: GET
    data_selector: records
    params: {}
- name: connections
  endpoint:
    path: /api/v1/authorizations
    method: GET
    data_selector: array of objects
    params:
      userId: string required
      userSecret: string required
- name: refresh_holdings
  endpoint:
    path: /api/v1/authorizations/{authorizationId}/refresh
    method: POST
- name: delete_connection
  endpoint:
    path: /api/v1/authorizations/{authorizationId}
    method: DELETE
    params:
      authorizationId: 'string (format: uuid)'
      userId: string
      userSecret: string
- name: connections
  endpoint:
    path: /api/v1/authorizations
    method: GET
    data_selector: array of objects
    params:
      userId: string
      userSecret: string
- name: connection_detail
  endpoint:
    path: /api/v1/authorizations/{authorizationId}
    method: GET
    data_selector: data
    params:
      authorizationId: 'string (format: uuid)'
      userId: string
      userSecret: string
- name: force_disable_connection
  endpoint:
    path: /api/v1/authorizations/{authorizationId}/disable
    method: POST
    data_selector: detail
    params:
      authorizationId: 'string (format: uuid)'
      userId: string
      userSecret: string
- name: connection_detail
  endpoint:
    path: /api/v1/authorizations/{authorizationId}
    method: GET
    data_selector: object
    params:
      userId: string
      userSecret: string
- name: force_disable_connection
  endpoint:
    path: /api/v1/authorizations/{authorizationId}/disable
    method: POST
    data_selector: detail
    params: {}
- name: account_holdings
  endpoint:
    path: /reference/Account%20Information/AccountInformation_getUserHoldings
    method: GET
- name: user_accounts
  endpoint:
    path: /reference/Account%20Information/AccountInformation_listUserAccounts
    method: GET
- name: account_details
  endpoint:
    path: /reference/Account%20Information/AccountInformation_getUserAccountDetails
    method: GET
- name: account_balances
  endpoint:
    path: /reference/Account%20Information/AccountInformation_getUserAccountBalance
    method: GET
- name: account_positions
  endpoint:
    path: /reference/Account%20Information/AccountInformation_getUserAccountPositions
    method: GET
- name: account_orders
  endpoint:
    path: /reference/Account%20Information/AccountInformation_getUserAccountOrders
    method: GET
- name: recent_orders
  endpoint:
    path: /reference/Account%20Information/AccountInformation_getUserAccountRecentOrders
    method: GET
- name: account_activities
  endpoint:
    path: /reference/Account%20Information/AccountInformation_getAccountActivities
    method: GET
- name: account_holdings
  endpoint:
    path: /Account%20Information/AccountInformation_getUserHoldings
    method: GET
- name: account_holdings
  endpoint:
    path: /accounts/{accountId}/holdings
    method: GET
- name: account_holdings
  endpoint:
    path: /accounts/{accountId}/holdings
    method: GET
- name: option_price
  endpoint:
    path: /api/v1/options
    method: GET
    data_selector: options
    params: {}
- name: orders
  endpoint:
    path: /api/v1/orders
    method: GET
    data_selector: orders
    params: {}
- name: orders
  endpoint:
    path: /orders
    method: GET
    data_selector: orders
    params: {}
- name: account_detail
  endpoint:
    path: /accounts/{accountId}
    method: GET
- name: account_detail
  endpoint:
    path: /api/v1/accounts/{accountId}
    method: GET
    data_selector: data
    params:
      userId: string
      userSecret: string
- name: recent_orders
  endpoint:
    path: /reference/Account%20Information/AccountInformation_getUserAccountRecentOrders
    method: GET
- name: account_recent_orders
  endpoint:
    path: /reference/Account%20Information/AccountInformation_getUserAccountRecentOrders
    method: GET
- name: recent_orders
  endpoint:
    path: /api/v1/accounts/{accountId}/recentOrders
    method: GET
    data_selector: orders
    params:
      userId: ''
      userSecret: ''
      only_executed: 'true'
- name: recent_orders
  endpoint:
    path: /accounts/{accountId}/recentOrders
    method: GET
    data_selector: orders
    params:
      userId: string
      userSecret: string
      only_executed: boolean
- name: orders
  endpoint:
    path: /orders
    method: GET
    data_selector: orders
- name: orders
  endpoint:
    path: /orders
    method: GET
    data_selector: orders
    params: {}
- name: account_option_positions
  endpoint:
    path: /api/v1/accounts/{accountId}/options
    method: GET
- name: account_option_positions
  endpoint:
    path: /api/v1/accounts/{accountId}/options
    method: GET
    data_selector: array of objects
- name: list_all_connections
  endpoint:
    path: /reference/Connections/Connections_listBrokerageAuthorizations
    method: GET
- name: list_accounts
  endpoint:
    path: /reference/Account%20Information/AccountInformation_listUserAccounts
    method: GET
- name: get_client_info
  endpoint:
    path: /reference/Reference%20Data/ReferenceData_getPartnerInfo
    method: GET
- name: account_information
  endpoint:
    path: /reference/Account%20Information/AccountInformation_listUserAccounts
    method: GET
- name: connections
  endpoint:
    path: /reference/Connections/Connections_listBrokerageAuthorizations
    method: GET
- name: trading
  endpoint:
    path: /reference/Trading/Trading_placeOrder
    method: POST
- name: reference_data
  endpoint:
    path: /reference/Reference%20Data/ReferenceData_getPartnerInfo
    method: GET
- name: place_order
  endpoint:
    path: /trade/place
    method: POST
    data_selector: object
    params: {}
- name: place_order
  endpoint:
    path: /trade/place
    method: POST
    data_selector: object
- name: brokerage_order
  endpoint:
    path: /brokerage/orders
    method: GET
    data_selector: orders
    params: {}
- name: brokerage_order
  endpoint:
    path: /brokerage/orders
    method: GET
    data_selector: orders
    params: {}
- name: place_bracket_order
  endpoint:
    path: /reference/Trading/Trading_placeBracketOrder
    method: GET
- name: bracket_order
  endpoint:
    path: /accounts/{accountId}/trading/bracket
    method: POST
- name: connections
  endpoint:
    path: /reference/Connections/Connections_listBrokerageAuthorizations
    method: GET
- name: account_information
  endpoint:
    path: /reference/Account%20Information/AccountInformation_listUserAccounts
    method: GET
- name: trading
  endpoint:
    path: /reference/Trading/Trading_placeOrder
    method: POST
- name: brokerage_order
  endpoint:
    path: /brokerage/orders
    method: GET
    data_selector: orders
    params: {}
- name: bracket_order
  endpoint:
    path: /accounts/{accountId}/trading/bracket
    method: POST
- name: brokerage_order
  endpoint:
    path: /brokerage/orders
    method: GET
    data_selector: records
    params: {}
- name: place_option_order
  endpoint:
    path: /reference/Trading/Trading_placeMlegOrder
    method: POST
- name: option_order
  endpoint:
    path: /accounts/{accountId}/trading/options
    method: POST
    data_selector: object
    params: {}
- name: orders
  endpoint:
    path: /orders
    method: GET
    data_selector: orders
- name: crypto_pairs
  endpoint:
    path: /api/v1/accounts/{accountId}/trading/instruments/cryptocurrencyPairs
    method: GET
    params:
      userId: string
      userSecret: string
      base: string
      quote: string
- name: list_all_connections
  endpoint:
    path: /reference/Connections/Connections_listBrokerageAuthorizations
    method: GET
- name: get_connection_detail
  endpoint:
    path: /reference/Connections/Connections_detailBrokerageAuthorization
    method: GET
- name: list_accounts
  endpoint:
    path: /reference/Account%20Information/AccountInformation_listUserAccounts
    method: GET
- name: list_account_holdings
  endpoint:
    path: /reference/Account%20Information/AccountInformation_getUserHoldings
    method: GET
- name: get_account_detail
  endpoint:
    path: /reference/Account%20Information/AccountInformation_getUserAccountDetails
    method: GET
- name: list_account_balances
  endpoint:
    path: /reference/Account%20Information/AccountInformation_getUserAccountBalance
    method: GET
- name: list_account_positions
  endpoint:
    path: /reference/Account%20Information/AccountInformation_getUserAccountPositions
    method: GET
- name: list_account_orders
  endpoint:
    path: /reference/Account%20Information/AccountInformation_getUserAccountOrders
    method: GET
- name: list_account_recent_orders
  endpoint:
    path: /reference/Account%20Information/AccountInformation_getUserAccountRecentOrders
    method: GET
- name: list_account_activities
  endpoint:
    path: /reference/Account%20Information/AccountInformation_getAccountActivities
    method: GET
- name: list_account_option_positions
  endpoint:
    path: /reference/Options/Options_listOptionHoldings
    method: GET
- name: get_equity_symbol_quotes
  endpoint:
    path: /reference/Trading/Trading_getUserAccountQuotes
    method: GET
- name: check_equity_order_impact
  endpoint:
    path: /reference/Trading/Trading_getOrderImpact
    method: GET
- name: place_checked_equity_order
  endpoint:
    path: /reference/Trading/Trading_placeOrder
    method: POST
- name: cancel_order
  endpoint:
    path: /reference/Trading/Trading_cancelOrder
    method: DELETE
- name: get_client_info
  endpoint:
    path: /reference/Reference%20Data/ReferenceData_getPartnerInfo
    method: GET
- name: place_option_order
  endpoint:
    path: /accounts/{accountId}/trading/options
    method: POST
- name: crypto_pair_quote
  endpoint:
    path: /api/v1/accounts/{accountId}/trading/instruments/cryptocurrencyPairs/{instrumentSymbol}/quote
    method: GET
    data_selector: data
    params:
      userId: snaptrade-user-123
      userSecret: adf2aa34-8219-40f7-a6b3-60156985cc61
- name: brokerage_order
  endpoint:
    path: /brokerage/orders
    method: GET
    data_selector: orders
- name: preview_crypto_order
  endpoint:
    path: /api/v1/accounts/{accountId}/trading/crypto/preview
    method: POST
- name: crypto_pairs
  endpoint:
    path: /api/v1/accounts/{accountId}/trading/instruments/cryptocurrencyPairs
    method: GET
    data_selector: items
    params:
      userId: ''
      userSecret: ''
      base: ''
      quote: ''
- name: crypto_order
  endpoint:
    path: /reference/Trading/Trading_placeCryptoOrder
    method: POST
- name: crypto_pair_quote
  endpoint:
    path: /reference/Trading/Trading_getCryptocurrencyPairQuote
    method: GET
- name: crypto_pairs
  endpoint:
    path: /reference/Trading/Trading_searchCryptocurrencyPairInstruments
    method: GET
- name: crypto_pair_quote
  endpoint:
    path: /api/v1/accounts/{accountId}/trading/instruments/cryptocurrencyPairs/{instrumentSymbol}/quote
    method: GET
    data_selector: object
    params:
      userId: string
      userSecret: string
- name: crypto_order
  endpoint:
    path: /api/v1/accounts/{accountId}/trading/crypto
    method: POST
- name: preview_crypto_order
  endpoint:
    path: /api/v1/accounts/{accountId}/trading/crypto/preview
    method: POST
- name: order
  endpoint:
    path: /orders
    method: GET
    data_selector: orders
    params: {}
- name: account_information
  endpoint:
    path: /reference/Account%20Information/AccountInformation_listUserAccounts
    method: GET
- name: trading
  endpoint:
    path: /reference/Trading/Trading_placeCryptoOrder
    method: POST
- name: cancel_order
  endpoint:
    path: /api/v1/accounts/{accountId}/trading/cancel
    method: POST
    data_selector: data
    params: {}
- name: crypto_order
  endpoint:
    path: /api/v1/accounts/{accountId}/trading/crypto
    method: POST
    data_selector: object
    params:
      userId: userId
      userSecret: userSecret
- name: brokerage_order
  endpoint:
    path: /api/v1/brokerage_orders
    method: GET
    data_selector: orders
    params: {}
- name: user_accounts
  endpoint:
    path: /reference/Account%20Information/AccountInformation_listUserAccounts
    method: GET
- name: account_holdings
  endpoint:
    path: /reference/Account%20Information/AccountInformation_getUserHoldings
    method: GET
- name: account_details
  endpoint:
    path: /reference/Account%20Information/AccountInformation_getUserAccountDetails
    method: GET
- name: account_balances
  endpoint:
    path: /reference/Account%20Information/AccountInformation_getUserAccountBalance
    method: GET
- name: account_positions
  endpoint:
    path: /reference/Account%20Information/AccountInformation_getUserAccountPositions
    method: GET
- name: account_orders
  endpoint:
    path: /reference/Account%20Information/AccountInformation_getUserAccountOrders
    method: GET
- name: recent_orders
  endpoint:
    path: /reference/Account%20Information/AccountInformation_getUserAccountRecentOrders
    method: GET
- name: account_activities
  endpoint:
    path: /reference/Account%20Information/AccountInformation_getAccountActivities
    method: GET
- name: replace_order
  endpoint:
    path: /accounts/{accountId}/trading/replace
    method: POST
    data_selector: object
    params: {}
- name: cancel_order
  endpoint:
    path: /api/v1/accounts/{accountId}/trading/cancel
    method: POST
- name: brokerage_order
  endpoint:
    path: /orders
    method: GET
    data_selector: orders
    params: {}
- name: connections
  endpoint:
    path: /reference/Connections/Connections_listBrokerageAuthorizations
    method: GET
- name: account_information
  endpoint:
    path: /reference/Account%20Information/AccountInformation_listUserAccounts
    method: GET
- name: trading
  endpoint:
    path: /reference/Trading/Trading_placeOrder
    method: POST
- name: reference_data
  endpoint:
    path: /reference/Reference%20Data/ReferenceData_getPartnerInfo
    method: GET
- name: client_info
  endpoint:
    path: /snapTrade/partners
    method: GET
    data_selector: object
    params: {}
- name: search_account_symbols
  endpoint:
    path: /api/v1/accounts/{accountId}/symbols
    method: POST
- name: replace_order
  endpoint:
    path: /accounts/{accountId}/trading/replace
    method: POST
    data_selector: object
    params:
      accountId: 'string (format: uuid)'
      userId: string
      userSecret: string
      brokerage_order_id: string
      action: string
      order_type: string
      time_in_force: string
      price: number or null
      symbol: string
      stop: number or null
      units: number or null
- name: order
  endpoint:
    path: /orders
    method: GET
    data_selector: orders
    params: {}
- name: brokerage_instruments
  endpoint:
    path: /api/v1/brokerages/{slug}/instruments
    method: GET
    data_selector: instruments
    params:
      slug: string
- name: client_info
  endpoint:
    path: /api/v1/snapTrade/partners
    method: GET
    data_selector: object
    params: {}
- name: security_types
  endpoint:
    path: /api/v1/securityTypes
    method: GET
    data_selector: array of objects
    params: {}
- name: symbols
  endpoint:
    path: /api/v1/symbols
    method: POST
- name: search_account_symbols
  endpoint:
    path: /api/v1/accounts/{accountId}/symbols
    method: POST
- name: brokerage_instruments
  endpoint:
    path: /api/v1/brokerages/{slug}/instruments
    method: GET
    data_selector: instruments
    params:
      slug: string
- name: symbol_detail
  endpoint:
    path: /symbols/{query}
    method: GET
- name: security_types
  endpoint:
    path: /securityTypes
    method: GET
    data_selector: array of objects
- name: symbols
  endpoint:
    path: /api/v1/symbols
    method: POST
    data_selector: array of objects
- name: symbol_detail
  endpoint:
    path: /api/v1/symbols/{query}
    method: GET
notes:
- The endpoint will return a maximum of 1000 transactions per request.
- Transaction are returned in reverse chronological order, using the trade_date field.
- Your API key consists of a clientId and consumerKey.
- The consumerKey is sensitive information and should be kept secure.
- Enable immediateRedirect by setting it to true within the login link to automatically
  redirect users back to your application upon successfully connecting or in the case
  of a connection failure.
- API keys consist of clientId and consumerKey.
- The userSecret is sensitive information and should be kept secure.
- 'Soft Rate Limit: We recommend that you limit trade requests to 1 trade per second
  per account to maximize the chances that they are all executed without error.'
- Enable immediateRedirect by setting it to true within the login link to automatically
  redirect users back to your application.
- 'Soft Rate Limit: Limit trade requests to 1 trade per second per account to maximize
  chances of execution without error.'
- Limit trade requests to 1 trade per second per account to maximize execution chances.
- Every SnapTrade client is ratelimited to 250 requests per minute by default.
- You don't call the Holdings API more than 4 times per day per user in the background.
- You don't call the activities (transactions) endpoint more than once per account
  every 24 hours for an account.
- If you run a daily job to pull data, you spread the calls out as much as possible
  over the period.
- The ability to view and delete existing connections is critical to allow users to
  manage their authorizations.
- Sending many requests in quick succession might trigger error responses that show
  up as HTTP status code 429.
- Access tokens typically expire after a few weeks and need to be reauthorized occasionally.
- Access tokens usually have some sort of expiry associated with them, so that users
  occasionally need to reauthorize access.
- Responses to the Account Data APIs are always cached.
- Daily sync process refreshes all account data for all connections at least once
  every 24 hours.
- When an access token is no longer valid, SnapTrade considered this to be a disabled
  connection which will no longer provide live data until it is repaired by the user.
- Each SnapTrade API request has an associated request identifier.
- It is important that users are directed to fix connections rather than they create
  new ones.
- Changing the connection in a reconnect is not permitted and will return an error.
- If you lose the userSecret the easiest thing to do is create a new user and ask
  the end user to reconnect.
- The connection is probably disabled, this happens when the access token is no longer
  valid.
- Deletes a registered user and all associated data. This action is irreversible.
- The returned URL expires in 5 minutes.
- The data returned here is cached. How long the data is cached for varies by brokerage.
- Data is cached. If you need real-time data, please use the manual refresh endpoint.
- The data returned here is cached.
- The Trade object returned expires after 5 minutes.
- This endpoint does not work for options quotes.
- This endpoint is disabled for free plans by default.
- Any order placed using an expired Trade will be rejected.
- It's recommended to trigger a manual refresh of the account after placing an order.
- The time the order was executed is not always available from the brokerage.
- The time the order expires is not always available from the brokerage.
- The symbol field is deprecated and should not be used.
- Connection and Brokerage Authorization are interchangeable, but Connection is preferred.
- SnapTrade performs de-duping on connections for a given user.
- Please contact support before use. Because of the cost of refreshing a connection,
  each call to this endpoint incurs an additional charge.
- Connection and Brokerage Authorization are interchangeable, but the term Connection
  is preferred.
- Authorization requires a unique user ID and secret.
- This endpoint is available on test keys. If you would like it enabled on production
  keys as well, please contact support as it is disabled by default.
- A connection is usually tied to a single login at a brokerage.
- The data returned is cached. How long the data is cached for varies by brokerage.
- Each call to this endpoint incurs an additional charge.
- The order could be rejected by the brokerage if it is invalid or if the account
  does not have sufficient funds.
- This endpoint does not compute the impact to the account balance from the order
  and any potential commissions before submitting the order to the brokerage.
- Refrain from usage of the deprecated symbol field.
- The `symbol` field is deprecated and should not be used.
- The 'symbol' field is deprecated and should not be used.
- Only supported on certain option trading brokerages.
- The time the order was executed in the brokerage system is not always available
  from the brokerage.
- This endpoint does not compute the impact to the account balance from the order
  before submitting the order.
- The order is valid only for the trading day on which it is placed.
- The order must be executed in its entirety immediately or be canceled completely.
- Only supported on some brokerages
- The Time in Force indicates how long the order will remain active before it is executed
  or expires.
- Returns configurations for your SnapTrade Client ID, including allowed brokerages
  and data access.
- Only the first 20 results are returned.
errors:
- '429: Too Many Requests'
- '429: Sending many requests in quick succession might trigger error responses'
- 'Unable to verify signature sent: The API call is failing when comparing the expected
  signature to the signature provided by your client.'
- '401 Unauthorized: Recheck OAuth scopes or token expiration'
- '400: Bad Request - Invalid userId'
- '404: Not Found - User not found'
- 'REQUEST_LIMIT_EXCEEDED: Throttle API calls or reduce frequency'
- '401 Unauthorized: Recheck clientId or userSecret'
- '400: Bad Request'
- '401: Unauthorized'
- '403: Forbidden'
- '404: Not Found'
- '401 Unauthorized: Ensure user credentials are correct.'
- '401 Unauthorized: Recheck userId or userSecret'
- '400 Bad Request: Check required fields and their formats'
- '401 Unauthorized: Ensure clientId and consumerKey are correct'
- '403 Forbidden: Check user permissions or account status'
- 'Invalid order type: Ensure the order type is one of Market, Limit, Stop, StopLimit.'
- 'Invalid time in force: Verify the time in force value.'
- 'QUERY_TIMEOUT: Break down filters or add selectivity'
- '401 Unauthorized: Check your API key and permissions.'
- '404 Not Found: The requested resource does not exist.'
- '500: Internal Server Error'
auth_info:
  mentioned_objects:
  - clientId
  - consumerKey
  - OauthToken
  - AuthProvider
client:
  base_url: https://api.snaptrade.com
  auth:
    type: oauth2
source_metadata: null
