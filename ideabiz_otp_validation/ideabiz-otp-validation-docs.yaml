resources:
- name: send_code
  endpoint:
    path: /apicall/openapi/one-time-password-sms/v1/send-code
    method: POST
- name: validate_code
  endpoint:
    path: /apicall/openapi/one-time-password-sms/v1/validate-code
    method: POST
- name: send_code
  endpoint:
    path: /apicall/openapi/one-time-password-sms/v1/send-code
    method: POST
    data_selector: data
    params: {}
- name: validate_code
  endpoint:
    path: /apicall/openapi/one-time-password-sms/v1/validate-code
    method: POST
    data_selector: data
    params: {}
- name: location_verification
  endpoint:
    path: ''
    method: POST
    data_selector: verificationResult
    params: {}
- name: device_location_verification
  endpoint:
    path: /
    method: POST
    data_selector: verificationResult
    params: {}
- name: send_code
  endpoint:
    path: /apicall/openapi/one-time-password-sms/v1/send-code
    method: POST
    data_selector: data
    params: {}
- name: validate_code
  endpoint:
    path: /apicall/openapi/one-time-password-sms/v1/validate-code
    method: POST
    data_selector: data
    params: {}
- name: send_code
  endpoint:
    path: /apicall/openapi/one-time-password-sms/v1/send-code
    method: POST
    data_selector: data
    params: {}
- name: validate_code
  endpoint:
    path: /apicall/openapi/one-time-password-sms/v1/validate-code
    method: POST
    data_selector: data
    params: {}
- name: charge_subscriber
  endpoint:
    path: /{version}/{msisdn}/transactions/amount
    method: POST
    data_selector: amountTransaction
- name: charging_a_subscriber
  endpoint:
    path: /payment/{version}/{msisdn}/transactions/amount
    method: POST
    data_selector: amountTransaction
- name: subscription
  endpoint:
    path: /subscription/v1/subscribe
    method: POST
- name: Send SMS
  endpoint:
    path: /SMS/SMSMessagingRequest
    method: POST
    data_selector: SMS
    params: {}
- name: SMS Subscription
  endpoint:
    path: /apicall/subscription/v1/subscribe
    method: POST
- name: search_subscriber
  endpoint:
    path: /adminapi/
    method: POST
    data_selector: data.subscription
    params:
      action: STATE_CHECK
      appID: APP_001
- name: subscriber_history
  endpoint:
    path: /adminapi/
    method: POST
    data_selector: subscriberHistory
    params:
      action: HISTORY
      appID: APP001
      limit: 10
- name: subscribe_user
  endpoint:
    path: /adminapi/
    method: POST
    data_selector: status
    params:
      action: STATE_CHANGE
      method: WEB
      status: SUBSCRIBED
- name: unsubscribe_user
  endpoint:
    path: /adminapi/
    method: POST
    data_selector: status
    params:
      action: STATE_CHANGE
      method: WEB
      status: UNSUBSCRIBED
- name: search_subscribers
  endpoint:
    path: /
    method: POST
    data_selector: data.subscription
    params: {}
- name: subscriber_history
  endpoint:
    path: /
    method: POST
    data_selector: subscriberHistory
    params: {}
- name: subscribe_user
  endpoint:
    path: /
    method: POST
    data_selector: status
    params: {}
- name: unsubscribe_user
  endpoint:
    path: /
    method: POST
    data_selector: status
    params: {}
- name: subscriber
  endpoint:
    path: /adminapi/subscriber/{number}
    method: GET
    data_selector: ''
    params: {}
- name: search_subscribers
  endpoint:
    path: /subscriber/{number}
    method: GET
    data_selector: records
    params: {}
- name: subscription
  endpoint:
    path: /subscriber/{number}
    method: GET
    data_selector: subscription
- name: subscriberHistory
  endpoint:
    path: /subscriber/{number}/history/{offset}/{limit}
    method: GET
    data_selector: subscriberHistory
- name: unsubscribe
  endpoint:
    path: /subscriber/{number}/unsubscribe/via/{method}
    method: POST
    data_selector: subscription
- name: microSubscription
  endpoint:
    path: /subscriber/{number}/{action}/via/{method}/serviceID/{serviceID}
    method: POST
    data_selector: micrSubscription
- name: subscription
  endpoint:
    path: /subscriber/{number}
    method: GET
    data_selector: subscription
    params: {}
- name: subscriber_history
  endpoint:
    path: /subscriber/{number}/history/{offset}/{limit}
    method: GET
    data_selector: subscriberHistory
    params: {}
- name: unsubscribe_subscriber
  endpoint:
    path: /subscriber/{number}/unsubscribe/via/{method}
    method: POST
    data_selector: subscription
    params: {}
- name: subscribe_subscriber
  endpoint:
    path: /subscriber/{number}/subscribe/via/{method}
    method: POST
    data_selector: subscription
    params: {}
- name: micro_subscription
  endpoint:
    path: /subscriber/{number}/{action}/via/{method}/serviceID/{serviceID}
    method: POST
    data_selector: micrSubscription
    params: {}
- name: micro_service_history
  endpoint:
    path: /subscriber/{number}/history/serviceID/{serviceID}/{offset}/{limit}
    method: GET
    data_selector: subscriberHistory
    params: {}
- name: subscriber
  endpoint:
    path: /subscriber/{number}
    method: GET
    data_selector: subscription
    params: {}
- name: subscriber_history
  endpoint:
    path: /subscriber/{number}/history/{offset}/{limit}
    method: GET
    data_selector: subscriberHistory
    params: {}
- name: unsubscribe_subscriber
  endpoint:
    path: /subscriber/{number}/{action}/via/{method}
    method: POST
    data_selector: subscription
    params: {}
- name: micro_subscription_history
  endpoint:
    path: /subscriber/{number}/history/serviceID/{serviceID}/{offset}/{limit}
    method: GET
    data_selector: subscriberHistory
    params: {}
- name: search_subscriber
  endpoint:
    path: /subscriber/{number}
    method: GET
    data_selector: subscription
    params: {}
- name: subscriber_history
  endpoint:
    path: /subscriber/{number}/history/{offset}/{limit}
    method: GET
    data_selector: subscriberHistory
    params: {}
- name: unsubscribe_subscriber
  endpoint:
    path: /subscriber/{number}/{action}/via/{method}
    method: POST
    data_selector: subscription
    params: {}
- name: micro_service_history
  endpoint:
    path: /subscriber/{number}/history/serviceID/{serviceID}/{offset}/{limit}
    method: GET
    data_selector: subscriberHistory
    params: {}
- name: smsmessaging
  endpoint:
    path: /smsmessaging/v2/outbound/87721/requests
    method: POST
    data_selector: outboundSMSMessageRequest
- name: subscribe
  endpoint:
    path: /apicall/subscription/v3/subscribe
    method: POST
    data_selector: subscribeResponse
    params: {}
- name: unsubscribe
  endpoint:
    path: /apicall/subscription/v3/unsubscribe
    method: POST
    data_selector: subscribeResponse
    params: {}
- name: individual_subscription_check
  endpoint:
    path: /apicall/subscription/v3/status/{msisdn}
    method: GET
    data_selector: subscribeResponse
    params: {}
- name: get_subscriber_base
  endpoint:
    path: /apicall/subscription/v3/info/currentBase
    method: GET
    data_selector: currentBase
    params: {}
- name: get_daily_user_info
  endpoint:
    path: /apicall/subscription/v3/info/daily/{date}
    method: GET
    data_selector: data
    params: {}
- name: multiple_service_id_check
  endpoint:
    path: /apicall/subscription/v3/status/
    method: POST
    data_selector: subscribeResponse
    params: {}
- name: subscribe
  endpoint:
    path: /subscribe
    method: POST
- name: unsubscribe
  endpoint:
    path: /unsubscribe
    method: POST
- name: individual_subscription_check
  endpoint:
    path: /status/{msisdn}
    method: GET
- name: get_subscriber_base
  endpoint:
    path: /info/currentBase
    method: GET
- name: get_daily_user_info
  endpoint:
    path: /info/daily/{date}
    method: GET
- name: send_sms
  endpoint:
    path: /v3/outbound/{port}/requests
    method: POST
    data_selector: outboundSMSMessageRequest
- name: receive_sms
  endpoint:
    path: /inbound/{port}/notifications
    method: POST
    data_selector: inboundSMSMessageNotification
- name: delivery_notifications
  endpoint:
    path: /delivery/notifications
    method: POST
    data_selector: deliveryInfoNotification
- name: send_sms
  endpoint:
    path: /outbound/{port}/requests
    method: POST
- name: receive_sms
  endpoint:
    path: /inbound/{port}/notifications
    method: GET
- name: charging_subscriber
  endpoint:
    path: /payment/{version}/{msisdn}/transactions/amount
    method: POST
    data_selector: amountTransaction
- name: charge_subscriber
  endpoint:
    path: /payment/{version}/{msisdn}/transactions/amount
    method: POST
    data_selector: amountTransaction
    params: {}
- name: balance_check_v3
  endpoint:
    path: /apicall/balancecheck/v3/{MSISDN}/transactions/amount/balance
    method: GET
    data_selector: accountInfo
- name: balance_check_v4
  endpoint:
    path: /apicall/balancecheck/v4/{MSISDN}/transactions/amount/balance
    method: GET
    data_selector: accountInfo
- name: balance_check_v3
  endpoint:
    path: /apicall/balancecheck/v3/{MSISDN}/transactions/amount/balance
    method: GET
    data_selector: accountInfo
- name: balance_check_v4
  endpoint:
    path: /apicall/balancecheck/v4/{MSISDN}/transactions/amount/balance
    method: GET
    data_selector: accountInfo
- name: initiate_mobile_terminated_ussd
  endpoint:
    path: /apicall/ussd/{version}/outbound/{Subscriber Number}
    method: POST
    data_selector: outboundUSSDMessageRequest
    params: {}
- name: receive_mobile_originated_ussd
  endpoint:
    path: /apicall/ussd/{version}/outbound/{Subscriber Number}
    method: POST
    data_selector: inboundUSSDMessageRequest
    params: {}
- name: Initiate mobile terminated USSD
  endpoint:
    path: /{version}/outbound/{Subscriber Number}
    method: POST
- name: Receive mobile originated USSD
  endpoint:
    path: /{version}/inbound
    method: POST
- name: subscribe
  endpoint:
    path: /apicall/pin/subscription/v1/subscribe
    method: POST
- name: submitPin
  endpoint:
    path: /apicall/pin/subscription/v1/submitPin
    method: POST
- name: verify_pin
  endpoint:
    path: /apicall/pin/verify/v1/verify
    method: POST
    data_selector: data
- name: submit_pin
  endpoint:
    path: /apicall/pin/verify/v1/submitPin
    method: POST
    data_selector: data
- name: charge_request
  endpoint:
    path: /apicall/pin/payment/v1/charge
    method: GET
    data_selector: data
- name: submit_pin
  endpoint:
    path: /apicall/pin/payment/v1/submitPin
    method: GET
    data_selector: data
- name: status_check
  endpoint:
    path: /apicall/pin/payment/v1/status/{Server Ref}
    method: GET
    data_selector: data
- name: subscribe
  endpoint:
    path: /subscribe
    method: POST
- name: submitPin
  endpoint:
    path: /submitPin
    method: POST
- name: msisdn
  endpoint:
    path: /header_enrichment
    method: POST
    data_selector: msisdn
- name: verify_pin
  endpoint:
    path: /apicall/pin/verify/v1/verify
    method: POST
    data_selector: data
- name: submit_pin
  endpoint:
    path: /apicall/pin/verify/v1/submitPin
    method: POST
    data_selector: data
- name: location_query
  endpoint:
    path: /location/v1/queries/location
    method: GET
    params:
      address: '{Subscriber Number}'
      requestedAccuracy: '1000'
- name: charge_request
  endpoint:
    path: /charge
    method: GET
- name: submit_pin
  endpoint:
    path: /submitPin
    method: GET
- name: status_check
  endpoint:
    path: /status/{Server Ref}
    method: GET
- name: encrypted_msisdn
  endpoint:
    path: /header/enrichment/encrypted_msisdn
    method: GET
    data_selector: msisdn
- name: plain_msisdn
  endpoint:
    path: /header/enrichment/plain_msisdn
    method: GET
    data_selector: msisdn
- name: generate_rewards_token
  endpoint:
    path: /rewards/{msisdn}/
    method: POST
    data_selector: rewardsRedeemResponse
    params:
      msisdn: Mobile number of the subscriber
      pin: Unique PIN to redeem a generated token
      clientCorrelator: uniquely identifies this request
      notifyURL: the URL to which you would like to send the notification of redemption
      callbackData: will be passed back in this notification
- name: redeem_rewards_token
  endpoint:
    path: /rewards/{msisdn}/
    method: POST
    data_selector: rewardsRedeemResponse
    params:
      msisdn: Mobile number of the subscriber
      pin: Unique PIN to redeem a generated token
      clientCorrelator: uniquely identifies this request
      notifyURL: the URL to which you would like to send the notification of redemption
      callbackData: will be passed back in this notification
- name: apply_rewards
  endpoint:
    path: /rewards/{msisdn}/apply
    method: POST
    data_selector: rewardsApplyResponse
    params:
      msisdn: Mobile number of the subscriber
      type: the type of reward
      amount: the value of the amount parameter
      clientCorrelator: uniquely identifies this request
      notifyURL: the URL to which you would like to send the notification of redemption
      callbackData: will be passed back in this notification
      smsText: Full SMS notification message
- name: location_query_single
  endpoint:
    path: /location/v1/queries/location
    method: GET
    data_selector: terminalLocationList
    params:
      address: '{Subscriber Number}'
      requestedAccuracy: '1000'
- name: earnStarpoints
  endpoint:
    path: /earnStarpoints
    method: POST
    data_selector: response
    params: {}
- name: burnStarpointsWithAuth
  endpoint:
    path: /burnStarpointsWithAuth
    method: POST
    data_selector: response
    params: {}
- name: burnStarpoints
  endpoint:
    path: /burnStarpoints
    method: POST
    data_selector: response
    params: {}
- name: balanceCheck
  endpoint:
    path: /balanceCheck
    method: POST
    data_selector: response
    params: {}
- name: starpointsEarnReversal
  endpoint:
    path: /starpointsEarnReversal
    method: POST
    data_selector: response
    params: {}
- name: starpointsBurnReversal
  endpoint:
    path: /starpointsBurnReversal
    method: POST
    data_selector: response
    params: {}
- name: starpointsBurnReversalByBillNo
  endpoint:
    path: /starpointsBurnReversalByBillNo
    method: POST
    data_selector: response
    params: {}
- name: profileRegister
  endpoint:
    path: /profileRegister
    method: POST
    data_selector: response
    params: {}
- name: profileRegisterCommit
  endpoint:
    path: /profileRegisterCommit
    method: POST
    data_selector: response
    params: {}
- name: generate_rewards_token
  endpoint:
    path: /rewards/{msisdn}/
    method: POST
    data_selector: rewardsRedeemResponse
    params:
      msisdn: Mobile number of the subscriber
      pin: Unique PIN to redeem a generated token
      clientCorrelator: uniquely identifies this request
      notifyURL: the URL to which you would like to send the notification of redemption
      callbackData: will be passed back in this notification
- name: redeem_rewards_token
  endpoint:
    path: /rewards/{msisdn}/
    method: POST
    data_selector: rewardsRedeemResponse
    params:
      msisdn: Mobile number of the subscriber
      pin: Unique PIN to redeem a generated token
      clientCorrelator: uniquely identifies this request
      notifyURL: the URL to which you would like to send the notification of redemption
      callbackData: will be passed back in this notification
- name: apply_rewards
  endpoint:
    path: /rewards/{msisdn}/apply
    method: POST
    data_selector: rewardsApplyResponse
    params:
      msisdn: Mobile number of the subscriber
      type: the type of reward
      amount: the value of the amount parameter
      clientCorrelator: uniquely identifies this request
      notifyURL: the URL to which you would like to send the notification of redemption
      callbackData: will be passed back in this notification
      smsText: Full SMS notification message
- name: sendAuthCodeToCustomer
  endpoint:
    path: /sendAuthCodeToCustomer
    method: POST
    data_selector: response
    params: {}
- name: validateCustomerAuthentication
  endpoint:
    path: /validateCustomerAuthentication
    method: POST
    data_selector: response
    params: {}
- name: transferStarpoints
  endpoint:
    path: /transferStarpoints
    method: POST
    data_selector: response
    params: {}
- name: starpointsDonate
  endpoint:
    path: /starpointsDonate
    method: POST
    data_selector: response
    params: {}
- name: starpointRedemption
  endpoint:
    path: /starpointsRedemption
    method: POST
    data_selector: response
    params: {}
- name: notifyCustomerEvent
  endpoint:
    path: /notifyCustomerEvent
    method: POST
    data_selector: response
    params: {}
- name: earnStarpoints
  endpoint:
    path: /earnStarpoints
    method: POST
    data_selector: response
    params: {}
- name: burnStarpointsWithAuth
  endpoint:
    path: /burnStarpointsWithAuth
    method: POST
    data_selector: response
    params: {}
- name: burnStarpoints
  endpoint:
    path: /burnStarpoints
    method: POST
    data_selector: response
    params: {}
- name: balanceCheck
  endpoint:
    path: /balanceCheck
    method: POST
    data_selector: response
    params: {}
- name: starpointsEarnReversal
  endpoint:
    path: /starpointsEarnReversal
    method: POST
    data_selector: response
    params: {}
- name: starpointsBurnReversal
  endpoint:
    path: /starpointsBurnReversal
    method: POST
    data_selector: response
    params: {}
- name: starpointsBurnReversalByBillNo
  endpoint:
    path: /starpointsBurnReversalByBillNo
    method: POST
    data_selector: response
    params: {}
- name: profileRegister
  endpoint:
    path: /profileRegister
    method: POST
    data_selector: response
    params: {}
- name: profileRegisterCommit
  endpoint:
    path: /profileRegisterCommit
    method: POST
    data_selector: response
    params: {}
- name: subscription
  endpoint:
    path: /new
    method: POST
    data_selector: null
    params: {}
- name: user_verification
  endpoint:
    path: /valid/V1.0
    method: POST
    data_selector: statusDetails
    params: {}
- name: sendAuthCodeToCustomer
  endpoint:
    path: /sendAuthCodeToCustomer
    method: POST
    data_selector: response
    params: {}
- name: validateCustomerAuthentication
  endpoint:
    path: /validateCustomerAuthentication
    method: POST
    data_selector: response
    params: {}
- name: transferStarpoints
  endpoint:
    path: /transferStarpoints
    method: POST
    data_selector: response
    params: {}
- name: starpointsDonate
  endpoint:
    path: /starpointsDonate
    method: POST
    data_selector: response
    params: {}
- name: starpointRedemption
  endpoint:
    path: /starpointsRedemption
    method: POST
    data_selector: response
    params: {}
- name: notifyCustomerEvent
  endpoint:
    path: /notifyCustomerEvent
    method: POST
    data_selector: response
    params: {}
- name: validation_token
  endpoint:
    path: /web/widget/token
    method: GET
- name: subscription
  endpoint:
    path: /new
    method: POST
    data_selector: subscription
    params: {}
- name: governance_check
  endpoint:
    path: /apicall/governance/v1/check
    method: POST
    data_selector: governanceResponse
- name: user_verification
  endpoint:
    path: /valid/V1.0
    method: POST
    data_selector: statusDetails
    params: {}
- name: subscribing_new_users
  endpoint:
    path: /pnm/v1.0
    method: POST
    data_selector: response
    params: {}
- name: removing_added_users
  endpoint:
    path: /pnm/v1.0/drop-user
    method: POST
    data_selector: response
    params: {}
- name: validation_token
  endpoint:
    path: /web/widget/token
    method: GET
- name: governance_check
  endpoint:
    path: /apicall/governance/v1/check
    method: POST
    data_selector: governanceResponse
    params: {}
- name: submit_transaction_request
  endpoint:
    path: /submitTransactionRequest
    method: POST
    data_selector: submitTransactionRequestResponse.return
    params: {}
- name: transaction_status
  endpoint:
    path: /transactionStatusViaRequestId
    method: POST
    data_selector: getTransactionStatusViaRequestIdResponse.return
    params: {}
- name: subscriber_balance
  endpoint:
    path: /subscriberBalance
    method: POST
    data_selector: getSubscriberBalanceResponse.return
    params: {}
- name: subscribing_new_users
  endpoint:
    path: /v1.0
    method: POST
    data_selector: response
    params: {}
- name: removing_added_users
  endpoint:
    path: /v1.0/drop-user
    method: POST
    data_selector: response
    params: {}
- name: submit_transaction_request
  endpoint:
    path: /submitTransactionRequest
    method: POST
    data_selector: response
    params: {}
- name: submitTransactionRequest
  endpoint:
    path: /submitTransactionRequest
    method: POST
    data_selector: null
    params: {}
- name: transactionStatusViaRequestId
  endpoint:
    path: /transactionStatusViaRequestId
    method: POST
    data_selector: null
    params: {}
- name: submitTransactionRequest
  endpoint:
    path: /submitTransactionRequest
    method: POST
    data_selector: submitTransactionRequestResponse.return
    params: {}
- name: transactionStatusViaRequestId
  endpoint:
    path: /transactionStatusViaRequestId
    method: POST
    data_selector: getTransactionStatusViaRequestIdResponse.return
    params: {}
- name: subscriberBalance
  endpoint:
    path: /subscriberBalance
    method: POST
    data_selector: getSubscriberBalanceResponse.return
    params: {}
- name: submit_transaction_request
  endpoint:
    path: /submitTransactionRequest
    method: POST
    data_selector: response
    params: {}
- name: submitTransactionRequest
  endpoint:
    path: /submitTransactionRequest
    method: POST
- name: transactionStatusViaRequestId
  endpoint:
    path: /transactionStatusViaRequestId
    method: POST
- name: subscriberBalance
  endpoint:
    path: /subscriberBalance
    method: POST
- name: submitTransactionRequest
  endpoint:
    path: /submitTransactionRequest
    method: POST
    data_selector: null
    params: {}
- name: transactionStatusViaRequestId
  endpoint:
    path: /transactionStatusViaRequestId
    method: POST
    data_selector: null
    params: {}
- name: initiate_push_transaction
  endpoint:
    path: /axipay/external/merchant/transaction/initiate/qr
    method: POST
- name: get_transaction_status
  endpoint:
    path: /axipay/external/merchant/transaction/getstatus
    method: POST
- name: cancel_transaction
  endpoint:
    path: /axipay/external/merchant/transaction/cancel
    method: POST
- name: query_transactions
  endpoint:
    path: /axipay/external/merchant/transaction/query
    method: POST
- name: submitTransactionRequest
  endpoint:
    path: /submitTransactionRequest
    method: POST
    data_selector: submitTransactionRequestResponse.return
    params: {}
- name: transactionStatusViaRequestId
  endpoint:
    path: /transactionStatusViaRequestId
    method: POST
    data_selector: getTransactionStatusViaRequestIdResponse.return
    params: {}
- name: subscriberBalance
  endpoint:
    path: /subscriberBalance
    method: POST
    data_selector: getSubscriberBalanceResponse.return
    params: {}
- name: Payment-Widget
  endpoint:
    path: /apicall/widget/pin/pay/v1/status/{ref}
    method: GET
- name: InitCall
  endpoint:
    path: /apicall/rtc/v1/init/metadata/{SrNumber}/
    method: GET
- name: CallMetaData
  endpoint:
    path: /apicall/rtc/v1/init/metadata/{SrNumber}/
    method: GET
- name: image_upload
  endpoint:
    path: /imageUpload
    method: POST
    data_selector: status
    params: {}
- name: campaign_details
  endpoint:
    path: /bulkPush
    method: POST
    data_selector: status
    params: {}
- name: billing_info
  endpoint:
    path: /connections/{refaccount}/bill/info
    method: GET
    params:
      lob: '{lob}'
- name: initiate_push_transaction
  endpoint:
    path: /axipay/external/merchant/transaction/initiate/qr
    method: POST
    data_selector: response.transactionList
    params:
      merchantPgIdentifier: String
      externalMerchantTransactionId: String
      genieTransactionId: String
      fromDate: String
      toDate: String
      outletId: String
      counterId: String
      pageStart: String
      pageEnd: String
- name: get_transaction_status
  endpoint:
    path: /axipay/external/merchant/transaction/getstatus
    method: POST
    data_selector: response.transactionList
    params:
      merchantPgIdentifier: String
      externalMerchantTransactionId: String
      genieTransactionId: String
      fromDate: String
      toDate: String
      outletId: String
      counterId: String
      pageStart: String
      pageEnd: String
- name: cancel_transaction
  endpoint:
    path: /axipay/external/merchant/transaction/cancel
    method: POST
    data_selector: response.transactionList
    params:
      merchantPgIdentifier: String
      externalMerchantTransactionId: String
      genieTransactionId: String
      fromDate: String
      toDate: String
      outletId: String
      counterId: String
      pageStart: String
      pageEnd: String
- name: query_transactions
  endpoint:
    path: /axipay/external/merchant/transaction/query
    method: POST
    data_selector: response.transactionList
    params:
      merchantPgIdentifier: String
      externalMerchantTransactionId: String
      genieTransactionId: String
      fromDate: String
      toDate: String
      outletId: String
      counterId: String
      pageStart: String
      pageEnd: String
- name: BillInfoAPI
  endpoint:
    path: /bill/billInfo/{refaccount}
    method: GET
    data_selector: getAllBillingInfoResponse
- name: LOBAPI
  endpoint:
    path: /lob/check/{refaccount}
    method: GET
    data_selector: msisdn
- name: CcbsAPI
  endpoint:
    path: /ccbs/basicInfo/{refaccount}
    method: GET
    data_selector: statusReasonObj
- name: BalanceCheckAPI
  endpoint:
    path: /balance/balanceCheck/{msisdn}
    method: GET
    data_selector: accountInfo
- name: DataUsageAPI
  endpoint:
    path: /dpi/usage/{refAccount}/{serviceName}
    method: GET
    data_selector: Response.DPIUsageInfo
- name: DataPackAPI
  endpoint:
    path: /add/data
    method: PUT
- name: LTECustomerProfileAPI
  endpoint:
    path: /customer/profile/{LTENo}
    method: GET
- name: Payment-Widget
  endpoint:
    path: /apicall/widget/pin/pay/v1/status/{ref}
    method: GET
    data_selector: status
- name: location
  endpoint:
    path: /OnDemand_API
    method: GET
    data_selector: response
- name: notification
  endpoint:
    path: /OnDemand_API
    method: POST
    data_selector: response
- name: InitCall API
  endpoint:
    path: /apicall/rtc/v1/init
    method: GET
    data_selector: response
    params: {}
- name: CallMetaData API
  endpoint:
    path: /apicall/rtc/v1/init/metadata/{SrNumber}/
    method: GET
    data_selector: response
    params: {}
- name: GetActiveRoamingList
  endpoint:
    path: /{applicationName}/{requestedUser}/Roaming/Lst/GetActiveRoamingList
    method: GET
    data_selector: activeRoamingList
    params:
      mobileNo: mandatory
- name: image_upload
  endpoint:
    path: /imageUpload
    method: POST
    data_selector: ''
    params: {}
- name: campaign_details
  endpoint:
    path: /bulkPush
    method: POST
    data_selector: ''
    params: {}
- name: billing_information
  endpoint:
    path: /connections/{refaccount}/bill/info
    method: GET
    data_selector: getAllBillingInfoResponse
    params: {}
- name: securemanagesubscription
  endpoint:
    path: /securemanagesubscription/{act,dact}
    method: PUT
    data_selector: desc
    params:
      msisdn: mandatory
      offer_id: mandatory
      rent: optional
      app_id: optional
      expire_time: optional
      channel: mandatory
- name: BillInfoAPI
  endpoint:
    path: /bill/billInfo/{refaccount}
    method: GET
    data_selector: getAllBillingInfoResponse
- name: LOBAPI
  endpoint:
    path: /lob/check/{refaccount}
    method: GET
    data_selector: msisdn
- name: CcbsAPI
  endpoint:
    path: /ccbs/basicInfo/{refaccount}
    method: GET
    data_selector: statusReasonObj
- name: BalanceCheckAPI
  endpoint:
    path: /balance/balanceCheck/{msisdn}
    method: GET
    data_selector: accountInfo
- name: DataUsageAPI
  endpoint:
    path: /dpi/usage/{refAccount}/{serviceName}
    method: GET
    data_selector: Response
- name: DataPackAPI
  endpoint:
    path: /add/data
    method: PUT
- name: LTECustomerProfileAPI
  endpoint:
    path: /customer/profile/{LTENo}
    method: GET
- name: location
  endpoint:
    path: /OnDemand_API
    method: GET
    data_selector: response
    params: {}
- name: registration
  endpoint:
    path: /dapsubscription/v1.0/registration
    method: POST
    data_selector: responseData
    params: {}
- name: application_update
  endpoint:
    path: /dapsubscription/v1.0/update
    method: POST
    data_selector: responseData
    params: {}
- name: unregistration
  endpoint:
    path: /dapsubscription/v1.0/unregistration
    method: POST
    data_selector: responseData
    params: {}
- name: vehicle_create
  endpoint:
    path: /dapvehicle/v1.0/create
    method: POST
    data_selector: responseData
    params: {}
- name: vehicle_location
  endpoint:
    path: /dapvehicle/v1.0/update_location
    method: POST
    data_selector: responseData
    params: {}
- name: vehicle_rename
  endpoint:
    path: /dapvehicle/v1.0/rename
    method: POST
    data_selector: responseData
    params: {}
- name: vehicle_view
  endpoint:
    path: /dapvehicle/v1.0/get
    method: POST
    data_selector: responseData
    params: {}
- name: active_roaming_services
  endpoint:
    path: /{applicationName}/{requestedUser}/Roaming/Lst/GetActiveRoamingList
    method: GET
    data_selector: activeRoamingList
    params:
      mobileNo: mandatory
- name: subscription_management
  endpoint:
    path: /securemanagesubscription/{act,dact}
    method: PUT
    data_selector: desc
    params:
      msisdn: mandatory
      offer_id: mandatory
      rent: optional
      app_id: optional
      expire_time: optional
      channel: mandatory
- name: Vehicle Remove
  endpoint:
    path: /dapvehicle/v1.0/remove
    method: POST
    data_selector: responseData
    params:
      applicationId: required
      vehicleId: required
- name: Route Create
  endpoint:
    path: /dapvehicle/v1.0/create
    method: POST
    data_selector: responseData
    params:
      applicationId: required
      routeName: required
      jsonPath: required
- name: Route Get
  endpoint:
    path: /daproute/v1.0/get
    method: POST
    data_selector: responseData
    params:
      applicationId: required
      routeId: required
- name: Route Update
  endpoint:
    path: /daproute/v1.0/update
    method: POST
    data_selector: responseData
    params:
      applicationId: required
      routeId: required
      routeName: required
      jsonPath: required
- name: Add Pickup Point
  endpoint:
    path: /daproute/v1.0/pickup_point/add
    method: POST
    data_selector: responseData
    params:
      applicationId: required
      routeId: required
      pickupPointName: required
      lat: required
      lng: required
- name: Remove Pickup Point
  endpoint:
    path: /daproute/v1.0/pickup_point/remove
    method: POST
    data_selector: responseData
    params:
      applicationId: required
      routeId: required
      pickupPointId: required
- name: Route Remove
  endpoint:
    path: /daproute/v1.0/remove
    method: POST
    data_selector: responseData
    params:
      applicationId: required
      routeId: required
- name: registration
  endpoint:
    path: /dapsubscription/v1.0/registration
    method: POST
    data_selector: responseData
    params: {}
- name: application_update
  endpoint:
    path: /dapsubscription/v1.0/update
    method: POST
    data_selector: responseData
    params: {}
- name: unregistration
  endpoint:
    path: /dapsubscription/v1.0/unregistration
    method: POST
    data_selector: responseData
    params: {}
- name: vehicle_create
  endpoint:
    path: /dapvehicle/v1.0/create
    method: POST
    data_selector: responseData
    params: {}
- name: vehicle_location
  endpoint:
    path: /dapvehicle/v1.0/update_location
    method: POST
    data_selector: responseData
    params: {}
- name: vehicle_rename
  endpoint:
    path: /dapvehicle/v1.0/rename
    method: POST
    data_selector: responseData
    params: {}
- name: vehicle_view
  endpoint:
    path: /dapvehicle/v1.0/get
    method: POST
    data_selector: responseData
    params: {}
- name: circular_geofence_create
  endpoint:
    path: /dapgeofence/v1.0/circular/create
    method: POST
    data_selector: responseData
    params:
      applicationId: required
      geofenceName: required
      lat: required
      lng: required
      radius: required
- name: circular_geofence_edit
  endpoint:
    path: /dapgeofence/v1.0/circular/edit
    method: POST
    data_selector: responseData
    params:
      applicationId: required
      geofenceId: required
      lat: required
      lng: required
      radius: required
- name: vehicle_remove
  endpoint:
    path: /dapvehicle/v1.0/remove
    method: POST
    data_selector: responseData
    params:
      applicationId: required
      vehicleId: required
- name: route_create
  endpoint:
    path: /dapvehicle/v1.0/create
    method: POST
    data_selector: responseData
    params:
      applicationId: required
      routeName: required
      jsonPath: required
- name: route_get
  endpoint:
    path: /daproute/v1.0/get
    method: POST
    data_selector: responseData
    params:
      applicationId: required
      routeId: required
- name: route_update
  endpoint:
    path: /daproute/v1.0/update
    method: POST
    data_selector: responseData
    params:
      applicationId: required
      routeId: required
      routeName: required
      jsonPath: required
- name: add_pickup_point
  endpoint:
    path: /daproute/v1.0/pickup_point/add
    method: POST
    data_selector: responseData
    params:
      applicationId: required
      routeId: required
      pickupPointName: required
      lat: required
      lng: required
- name: remove_pickup_point
  endpoint:
    path: /daproute/v1.0/pickup_point/remove
    method: POST
    data_selector: responseData
    params:
      applicationId: required
      routeId: required
      pickupPointId: required
- name: route_remove
  endpoint:
    path: /daproute/v1.0/remove
    method: POST
    data_selector: responseData
    params:
      applicationId: required
      routeId: required
- name: circular_geofence_view
  endpoint:
    path: /circular/get
    method: POST
    data_selector: responseData
    params:
      applicationId: required
      geofenceId: required
- name: circular_geofence_remove
  endpoint:
    path: /circular/remove
    method: POST
    data_selector: responseData
    params:
      applicationId: required
      geofenceId: required
- name: polygon_geofence_create
  endpoint:
    path: /polygon/create
    method: POST
    data_selector: responseData
    params:
      applicationId: required
      geofenceId: required
      pointArray: required
- name: polygon_geofence_update
  endpoint:
    path: /polygon/update
    method: POST
    data_selector: responseData
    params:
      applicationId: required
      geofenceId: required
      geofenceName: required
      pointArray: required
- name: polygon_geofence_view
  endpoint:
    path: /polygon/get
    method: POST
    data_selector: responseData
    params:
      applicationId: required
      geofenceId: optional
- name: polygon_geofence_remove
  endpoint:
    path: /polygon/remove
    method: POST
    data_selector: responseData
    params:
      applicationId: required
      geofenceId: required
- name: transactions
  endpoint:
    path: /GetTransactions
    method: GET
    data_selector: transactions
    params: {}
- name: service_login
  endpoint:
    path: /serviceLogin
    method: POST
    data_selector: token
    params: {}
- name: query_transaction_card_details
  endpoint:
    path: /trnCardDetail
    method: POST
    data_selector: data
    params: {}
- name: card_status_update
  endpoint:
    path: /CardStatusChange
    method: POST
    data_selector: data
    params: {}
- name: circular_geofence_create
  endpoint:
    path: /dapgeofence/v1.0/circular/create
    method: POST
    data_selector: responseData
    params: {}
- name: circular_geofence_edit
  endpoint:
    path: /dapgeofence/v1.0/circular/edit
    method: POST
    data_selector: responseData
    params: {}
- name: schedule_create
  endpoint:
    path: /dapschedule/v1.0/create
    method: POST
    data_selector: responseData
    params: {}
- name: schedule_update
  endpoint:
    path: /dapschedule/v1.0/create/update
    method: POST
    data_selector: responseData
    params: {}
- name: schedule_start
  endpoint:
    path: /dapschedule/v1.0/create/start
    method: POST
    data_selector: responseData
    params: {}
- name: schedule_end
  endpoint:
    path: /dapschedule/v1.0/create/end
    method: POST
    data_selector: responseData
    params: {}
- name: schedule_status
  endpoint:
    path: /dapschedule/v1.0/create/get
    method: POST
    data_selector: responseData
    params: {}
- name: add_employee
  endpoint:
    path: /employee
    method: PUT
    data_selector: body
    params: {}
- name: update_employee
  endpoint:
    path: /employee/{employeeKey}
    method: POST
    data_selector: body
    params: {}
- name: delete_employee
  endpoint:
    path: /employee/{employeeKey}
    method: DELETE
    data_selector: body
    params: {}
- name: validate_card
  endpoint:
    path: /card/validate
    method: POST
    data_selector: body
    params: {}
- name: retrieve_card_info
  endpoint:
    path: /card/retrieve/did
    method: POST
    data_selector: status
    params: {}
- name: validate_card
  endpoint:
    path: /rest/v1/card/validate
    method: POST
    data_selector: status
    params: {}
- name: circular_geofence_view
  endpoint:
    path: /circular/get
    method: POST
    data_selector: responseData
    params:
      applicationId: required
      geofenceId: required
- name: circular_geofence_remove
  endpoint:
    path: /circular/remove
    method: POST
    data_selector: responseData
    params:
      applicationId: required
      geofenceId: required
- name: polygon_geofence_create
  endpoint:
    path: /polygon/create
    method: POST
    data_selector: responseData
    params:
      applicationId: required
      geofenceId: required
      pointArray: required
- name: polygon_geofence_update
  endpoint:
    path: /polygon/update
    method: POST
    data_selector: responseData
    params:
      applicationId: required
      geofenceId: required
      geofenceName: required
      pointArray: required
- name: polygon_geofence_view
  endpoint:
    path: /polygon/get
    method: POST
    data_selector: responseData
    params:
      applicationId: required
      geofenceId: optional
- name: polygon_geofence_remove
  endpoint:
    path: /polygon/remove
    method: POST
    data_selector: responseData
    params:
      applicationId: required
      geofenceId: required
- name: transactions
  endpoint:
    path: /GetTransactions
    method: GET
    data_selector: transactions
    params:
      pin: <UserID>
      pass: <Password>
      type: <Transacton_Types>
      id: <Last_Received_Transaction_Id>
- name: current_status
  endpoint:
    path: /current_status
    method: POST
    data_selector: deviceResponse
    params: {}
- name: get_almanac
  endpoint:
    path: /get_almanac
    method: POST
    data_selector: deviceResponse
    params: {}
- name: get_daily_forecast
  endpoint:
    path: /get_daily_forecast
    method: POST
    data_selector: deviceResponse
    params: {}
- name: service_login
  endpoint:
    path: /serviceLogin
    method: POST
    data_selector: status
    params: {}
- name: query_transaction_card_details
  endpoint:
    path: /trnCardDetail
    method: POST
    data_selector: data
    params: {}
- name: card_status_update
  endpoint:
    path: /CardStatusChange
    method: POST
    data_selector: data
    params: {}
- name: getForecastDataByLoc
  endpoint:
    path: /getForecastDataByLoc
    method: POST
    data_selector: deviceResponse.hourlyForecastPeriod
    params:
      period: hourly
      lon: 78.9
      lat: 6.92
- name: getForecastDataByCity
  endpoint:
    path: /getForecastDataByCity
    method: POST
    data_selector: deviceResponse.hourlyForecastPeriod
    params:
      cityId: CEXXK0003
      period: hourly
- name: getLightningAlerts
  endpoint:
    path: /getLightningAlerts
    method: POST
    data_selector: deviceResponse.response
    params:
      nwlon: -78.0
      nwlat: 100.3
      selon: -59.6
      selat: -33.2
- name: work_order_status_update
  endpoint:
    path: /apicall/WomWoStatusUpdate/V1.0/{channel}
    method: PUT
    data_selector: Description
    params:
      OrderId: mandatory
      Status: mandatory
      ClosedUser: mandatory if status is Closed, Closed AP, Closed ERF, Failed
      Reason: mandatory if status is Incomplete, On Hold, Initial, Failed
- name: employee
  endpoint:
    path: /employee
    method: PUT
    data_selector: state
    params: {}
- name: validate_card
  endpoint:
    path: /card/validate
    method: POST
    data_selector: status
    params: {}
- name: delete_employee
  endpoint:
    path: /employee/{employeeKey}
    method: DELETE
    data_selector: ''
    params: {}
- name: activate_internet_card
  endpoint:
    path: /activateInternetCard/v1.0/<msisdn>/<Internet_card_Value>
    method: GET
    data_selector: response
    params: {}
- name: retrieve_card_info
  endpoint:
    path: /CEPM/1.0/card/retrieve/did
    method: POST
    data_selector: status
    params: {}
- name: validate_card
  endpoint:
    path: /card/validate
    method: POST
    data_selector: status
    params: {}
- name: DebitFromAnyAccount
  endpoint:
    path: /ACCOUNT
    method: POST
    data_selector: resCode
    params: {}
- name: device_control
  endpoint:
    path: /process
    method: POST
- name: device_status
  endpoint:
    path: /status
    method: POST
- name: Get Current Status
  endpoint:
    path: /callActiondev
    method: POST
    data_selector: deviceResponse
    params: {}
- name: Get Almanac
  endpoint:
    path: /callActiondev
    method: POST
    data_selector: deviceResponse
    params: {}
- name: Get Daily Forecast
  endpoint:
    path: /callActiondev
    method: POST
    data_selector: deviceResponse
    params: {}
- name: msisdn
  endpoint:
    path: /APIs/Header_Enrichment
    method: POST
    data_selector: msisdn
    params: {}
- name: getForecastDataByLoc
  endpoint:
    path: /getForecastDataByLoc
    method: POST
    data_selector: deviceResponse
    params:
      period: hourly
      lon: 78.9
      lat: 6.92
- name: getForecastDataByCity
  endpoint:
    path: /getForecastDataByCity
    method: POST
    data_selector: deviceResponse
    params:
      cityId: CEXXK0003
      period: hourly
- name: getLightningAlerts
  endpoint:
    path: /getLightningAlerts
    method: POST
    data_selector: deviceResponse
    params:
      nwlon: -78.0
      nwlat: 100.3
      selon: -59.6
      selat: -33.2
- name: work_order_status
  endpoint:
    path: /apicall/WomWoStatusUpdate/V1.0/{channel}
    method: PUT
    data_selector: Description
    params:
      OrderId: mandatory
      Status: mandatory
      ClosedUser: mandatory if Closed
      Reason: mandatory if Incomplete, On Hold, Initial, Failed
- name: activate_internet_card
  endpoint:
    path: /<msisdn>/<Internet_card_Value>
    method: GET
    data_selector: response
    params: {}
- name: getDeviceList
  endpoint:
    path: /getDeviceList/{msisdn}
    method: GET
    data_selector: records
- name: getCurrentLocation
  endpoint:
    path: /getCurrentLocation/{msisdn}
    method: GET
    data_selector: records
- name: getLocationHistory
  endpoint:
    path: /getLocationHistory/{msisdn}
    method: GET
    data_selector: records
- name: getEventLog
  endpoint:
    path: /getEventLog/{msisdn}
    method: GET
    data_selector: records
- name: getDistanceReport
  endpoint:
    path: /getDistanceReport/{msisdn}
    method: GET
    data_selector: records
- name: getProximityLocations
  endpoint:
    path: /getProximityLocations/{msisdn}
    method: GET
    data_selector: records
- name: addProximityLocation
  endpoint:
    path: /addProximityLocation/{msisdn}
    method: PUT
    data_selector: locationId
- name: changeProximityLocation
  endpoint:
    path: /changeProximityLocation/{msisdn}
    method: POST
    data_selector: locationId
- name: deleteProximityLocation
  endpoint:
    path: /deleteProximityLocation/{msisdn}
    method: DELETE
    data_selector: msg
- name: getSharees
  endpoint:
    path: /getSharees/{msisdn}
    method: GET
    data_selector: records
- name: removeSharee
  endpoint:
    path: /removeSharee/{msisdn}
    method: DELETE
    data_selector: msg
- name: addSharee
  endpoint:
    path: /addSharee/{msisdn}
    method: PUT
    data_selector: name
- name: getDeviceSharees
  endpoint:
    path: /getDeviceSharees/{msisdn}
    method: GET
    data_selector: name
- name: unshareDevice
  endpoint:
    path: /unshareDevice/{msisdn}
    method: DELETE
    data_selector: msg
- name: shareDevice
  endpoint:
    path: /shareDevice/{msisdn}
    method: POST
    data_selector: name
- name: updateDevice
  endpoint:
    path: /updateDevice/{msisdn}
    method: POST
    data_selector: name
- name: DebitFromAnyAccount
  endpoint:
    path: /ACCOUNT
    method: POST
- name: rules
  endpoint:
    path: /rules
    method: POST
- name: process
  endpoint:
    path: /process
    method: POST
- name: status
  endpoint:
    path: /status
    method: POST
- name: msisdn
  endpoint:
    path: /Header_Enrichment
    method: GET
    data_selector: msisdn
    params: {}
- name: getNoUpdateAlertSetting
  endpoint:
    path: /apicall/iLocate/v1/getNoUpdateAlertSetting
    method: GET
    data_selector: enabled
    params: {}
- name: setNoUpdateAlert
  endpoint:
    path: /apicall/iLocate/v1/setNoUpdateAlert
    method: POST
    data_selector: msg
    params: {}
- name: getDeviceChargingMode
  endpoint:
    path: /apicall/iLocate/v1/getDeviceChargingMode
    method: GET
    data_selector: chargingMode
    params: {}
- name: setDeviceChargingMode
  endpoint:
    path: /apicall/iLocate/v1/setDeviceChargingMode
    method: POST
    data_selector: chargingMode
    params: {}
- name: getAccountChargingNumber
  endpoint:
    path: /apicall/iLocate/v1/getAccountChargingNumber
    method: GET
    data_selector: chargingNumber
    params: {}
- name: setAccountChargingNumber
  endpoint:
    path: /apicall/iLocate/v1/setAccountChargingNumber
    method: POST
    data_selector: chargingNumber
    params: {}
- name: reactivateDevice
  endpoint:
    path: /apicall/iLocate/v1/reactivateDevice
    method: POST
    data_selector: msg
    params: {}
- name: subscribeForUpdates
  endpoint:
    path: /apicall/iLocate/v1/subscribeForUpdates
    method: POST
    data_selector: deviceList
    params: {}
- name: unsubscribeForUpdates
  endpoint:
    path: /apicall/iLocate/v1/unsubscribeFromUpdates
    method: POST
    data_selector: msg
    params: {}
- name: SubscribeProximityAlerts
  endpoint:
    path: /apicall/iLocate/v1/subscribeProximityAlerts
    method: POST
    data_selector: callbackUrl
    params: {}
- name: UnsubscribeProximityAlerts
  endpoint:
    path: /apicall/iLocate/v1/unsubscribeProximityAlerts
    method: POST
    data_selector: msg
    params: {}
- name: getDeviceList
  endpoint:
    path: /getDeviceList/{number}
    method: GET
    data_selector: ''
- name: getCurrentLocation
  endpoint:
    path: /getCurrentLocation/{number}
    method: GET
    data_selector: ''
- name: getLocationHistory
  endpoint:
    path: /getLocationHistory/{number}
    method: GET
    data_selector: ''
- name: getEventLog
  endpoint:
    path: /getEventLog/{device}
    method: GET
    data_selector: ''
- name: getDistanceReport
  endpoint:
    path: /getDistanceReport/{device}
    method: GET
    data_selector: ''
- name: getProximityLocations
  endpoint:
    path: /getProximityLocations/{device}
    method: GET
    data_selector: ''
- name: addProximityLocation
  endpoint:
    path: /addProximityLocation/{device}
    method: PUT
    data_selector: ''
- name: changeProximityLocation
  endpoint:
    path: /changeProximityLocation/{device}
    method: POST
    data_selector: ''
- name: deleteProximityLocation
  endpoint:
    path: /deleteProximityLocation/{device}
    method: DELETE
    data_selector: ''
- name: getSharees
  endpoint:
    path: /getSharees/{device}
    method: GET
    data_selector: ''
- name: removeSharee
  endpoint:
    path: /removeSharee/{device}
    method: DELETE
    data_selector: ''
- name: addSharee
  endpoint:
    path: /addSharee/{device}
    method: PUT
    data_selector: ''
- name: getDeviceSharees
  endpoint:
    path: /getDeviceSharees/{device}
    method: GET
    data_selector: ''
- name: unshareDevice
  endpoint:
    path: /unshareDevice/{device}
    method: DELETE
    data_selector: ''
- name: shareDevice
  endpoint:
    path: /shareDevice/{device}
    method: POST
    data_selector: ''
- name: updateDevice
  endpoint:
    path: /updateDevice/{device}
    method: POST
    data_selector: ''
- name: serviceLogin
  endpoint:
    path: /serviceLogin/1.0
    method: POST
- name: getProfileByDID
  endpoint:
    path: /getProfileByDID/
    method: POST
- name: addProfile
  endpoint:
    path: /addProfile/
    method: POST
- name: getProfileByIdentification
  endpoint:
    path: /getProfileByIdentification/
    method: POST
- name: getWalletBalance
  endpoint:
    path: /getWalletBalance/
    method: POST
- name: updateWalletTopUp
  endpoint:
    path: /updateWalletTopUp/1.0
    method: POST
    data_selector: updateBalance
    params: {}
- name: Query Roaming rates
  endpoint:
    path: /roaminginfor/v0.1/<MCC>/<MNC>/<MSISDN>/<Home Location ID>/<Local Location
      ID>/<Destination Location ID>
    method: GET
    data_selector: response
- name: Query Roaming Usage
  endpoint:
    path: /roaminginfor/v0.1/<MCC>/<MNC>/<MSISDN>
    method: POST
    data_selector: response
- name: Query Account Information
  endpoint:
    path: /roamingservice/v0.1/<MCC>/<MNC>/<msisdn>
    method: GET
    data_selector: response
- name: Roaming service Activation
  endpoint:
    path: /roamingservice/v0.1/<MCC>/<MNC>/<msisdn>/<PackageID>/<Operation>
    method: POST
    data_selector: response
- name: getNoUpdateAlertSetting
  endpoint:
    path: /getNoUpdateAlertSetting/{device_id}
    method: GET
    data_selector: enabled
    params: {}
- name: setNoUpdateAlert
  endpoint:
    path: /setNoUpdateAlert/{device_id}
    method: POST
    data_selector: msg
    params: {}
- name: getDeviceChargingMode
  endpoint:
    path: /getDeviceChargingMode/{device_id}
    method: GET
    data_selector: chargingMode
    params: {}
- name: setDeviceChargingMode
  endpoint:
    path: /setDeviceChargingMode/{device_id}
    method: POST
    data_selector: chargingMode
    params: {}
- name: getAccountChargingNumber
  endpoint:
    path: /getAccountChargingNumber/{device_id}
    method: GET
    data_selector: chargingNumber
    params: {}
- name: setAccountChargingNumber
  endpoint:
    path: /setAccountChargingNumber/{device_id}
    method: POST
    data_selector: chargingNumber
    params: {}
- name: reactivateDevice
  endpoint:
    path: /reactivateDevice/{device_id}
    method: POST
    data_selector: msg
    params: {}
- name: subscribeForUpdates
  endpoint:
    path: /subscribeForUpdates/{device_id}
    method: POST
    data_selector: interval
    params: {}
- name: unsubscribeForUpdates
  endpoint:
    path: /unsubscribeFromUpdates/{device_id}
    method: POST
    data_selector: msg
    params: {}
- name: subscribeProximityAlerts
  endpoint:
    path: /subscribeProximityAlerts/{device_id}
    method: POST
    data_selector: callbackUrl
    params: {}
- name: unsubscribeProximityAlerts
  endpoint:
    path: /unsubscribeProximityAlerts/{device_id}
    method: POST
    data_selector: msg
    params: {}
- name: Securely Send SMS
  endpoint:
    path: /
    method: POST
    data_selector: null
    params:
      msisdn: encrypted MSISDN
      msg: Message Content
- name: serviceLogin
  endpoint:
    path: /serviceLogin/1.0
    method: POST
- name: getProfileByDID
  endpoint:
    path: /getProfileByDID/1.0
    method: POST
- name: addProfile
  endpoint:
    path: /addProfile/1.0
    method: POST
- name: getProfileByIdentification
  endpoint:
    path: /getProfileByIdentification/1.0
    method: POST
- name: getWalletBalance
  endpoint:
    path: /getWalletBalance/1.0
    method: POST
- name: access_group
  endpoint:
    path: /accessgroup/getall/{regionId}
    method: GET
- name: visitor_check_in
  endpoint:
    path: /visitor/in
    method: POST
- name: visitor_check_out
  endpoint:
    path: /visitor/out
    method: POST
- name: payment
  endpoint:
    path: /transaction/{user}/payment
    method: POST
    data_selector: makePayment
    params: {}
- name: refund
  endpoint:
    path: /{user}/refund
    method: POST
    data_selector: refundTransaction
    params: {}
- name: updateWalletTopUp
  endpoint:
    path: /apicall/TouchGateway/updateWalletTopUp/1.0
    method: POST
    data_selector: updateBalance
- name: Query Roaming Rates
  endpoint:
    path: /roaminginfor/v0.1/<MCC>/<MNC>/<MSISDN>/<Home Location ID>/<Local Location
      ID>/<Destination Location ID>
    method: GET
- name: Query Roaming Usage
  endpoint:
    path: /roaminginfor/v0.1/<MCC>/<MNC>/<MSISDN>
    method: POST
- name: Query Account Information
  endpoint:
    path: /roamingservice/v0.1/<MCC>/<MNC>/<msisdn>
    method: GET
- name: Roaming service Activation
  endpoint:
    path: /roamingservice/v0.1/<MCC>/<MNC>/<msisdn>/<PackageID>/<Operation>
    method: POST
- name: Get Session Confirmation Number
  endpoint:
    path: /SessionConfirmationActor/getSessionConfirmationNumber
    method: GET
    data_selector: success
- name: Logout Users
  endpoint:
    path: /userprofiling/ProfileActor/logout
    method: GET
    data_selector: success
- name: User Login/ Registration
  endpoint:
    path: /userprofiling/ProfileActor/loginUser
    method: POST
    data_selector: success
- name: Add Item To Order
  endpoint:
    path: /commerce/order/purchase/CartModifierActor/addItemToOrder
    method: POST
    data_selector: success
- name: Checkout Items
  endpoint:
    path: /commerce/order/purchase/CartModifierActor/secureCheckout
    method: POST
    data_selector: success
- name: Deliver item to the given address
  endpoint:
    path: /commerce/order/purchase/ShippingGroupActor/shipToNewAddress
    method: POST
    data_selector: success
- name: Apply payments as COD
  endpoint:
    path: /commerce/order/purchase/PaymentGroupActor/applyPaymentsForCOD
    method: POST
    data_selector: success
- name: Order Confirmation
  endpoint:
    path: /commerce/order/purchase/ConfirmOrderActor/confirmOrder
    method: POST
    data_selector: success
- name: send_sms
  endpoint:
    path: /securesendsms/<port>/
    method: POST
    data_selector: null
    params:
      msisdn: encrypted MSISDN
      msg: message content
- name: access_group
  endpoint:
    path: /apicall/nfc/1.0/accessgroup/getall/{regionId}
    method: GET
- name: visitor_check_in
  endpoint:
    path: /apicall/nfc/1.0/visitor/in
    method: POST
- name: visitor_check_out
  endpoint:
    path: /apicall/nfc/1.0/visitor/out
    method: POST
- name: add_job
  endpoint:
    path: /add/{Channel}
    method: POST
    data_selector: response
    params:
      OrderId: mandatory
      DepotId: mandatory
      TeamId: mandatory
      StartDateTime: mandatory
      EndDateTime: mandatory
      JobAddedUser: mandatory
      Remark: optional
- name: reschedule_job
  endpoint:
    path: /reschedule/{Channel}
    method: POST
    data_selector: response
    params:
      OrderId: mandatory
      DepotId: mandatory
      JobId: mandatory
      TeamId: mandatory
      StartDateTime: mandatory
      EndDateTime: mandatory
      JobAddedUser: mandatory
      Remark: optional
- name: cancel_job
  endpoint:
    path: /cancel/{Channel}
    method: POST
    data_selector: response
    params:
      OrderId: mandatory
      DepotId: mandatory
      JobId: mandatory
      TeamId: mandatory
      JobAddedUser: mandatory
      Remark: optional
- name: update_job
  endpoint:
    path: /{Channel}
    method: PUT
    data_selector: response
    params:
      OrderId: mandatory
      DepotId: mandatory
      JobId: mandatory
      TeamId: mandatory
      JobStatus: mandatory
      JobCompletionStatus: mandatory
      Remark: optional
- name: payment
  endpoint:
    path: /transaction/{user}/payment
    method: POST
    data_selector: makePayment
    params: {}
- name: refund
  endpoint:
    path: /{user}/refund
    method: POST
    data_selector: refundTransaction
    params: {}
- name: create_team
  endpoint:
    path: /WomTeam/V1.0
    method: POST
    data_selector: records
    params:
      TeamId: TEST_A
      RegionCode: COL
      TeamLeader: CLOSED
      Ownership: Contractor
      VehicleType: VAN
      DepotId: 1
- name: update_team
  endpoint:
    path: /WomTeam/V1.0
    method: PUT
    data_selector: records
    params:
      TeamId: TEST_A
      DepotId: 1
      RegionCode: COL
      TeamLeader: John Snow
      Ownership: Dialog
      VehicleType: VAN
      Email: john@d.lk
- name: get_team_details
  endpoint:
    path: /WomTeam/V1.0
    method: GET
    data_selector: Records.details
    params:
      DepotId: '{DEPOTID}'
      TeamId: '{TEAMID}'
      channel: '{channel}'
- name: Get Session Confirmation Number
  endpoint:
    path: /SessionConfirmationActor/getSessionConfirmationNumber
    method: GET
- name: Logout Users
  endpoint:
    path: /userprofiling/ProfileActor/logout
    method: GET
- name: User Login/ Registration
  endpoint:
    path: /userprofiling/ProfileActor/loginUser
    method: GET
- name: Add Item To Order
  endpoint:
    path: /commerce/order/purchase/CartModifierActor/addItemToOrder
    method: GET
- name: Checkout Items
  endpoint:
    path: /commerce/order/purchase/CartModifierActor/secureCheckout
    method: GET
- name: Deliver item to the given address
  endpoint:
    path: /commerce/order/purchase/ShippingGroupActor/shipToNewAddress
    method: GET
- name: Apply payments as COD
  endpoint:
    path: /commerce/order/purchase/PaymentGroupActor/applyPaymentsForCOD
    method: GET
- name: Order Confirmation
  endpoint:
    path: /commerce/order/purchase/ConfirmOrderActor/confirmOrder
    method: GET
- name: location_verification
  endpoint:
    path: /
    method: POST
    data_selector: verificationResult
- name: add_job
  endpoint:
    path: /add/{Channel}
    method: POST
- name: reschedule_job
  endpoint:
    path: /reschedule/{Channel}
    method: POST
- name: cancel_job
  endpoint:
    path: /cancel/{Channel}
    method: POST
- name: update_job
  endpoint:
    path: /{Channel}
    method: PUT
- name: create_team
  endpoint:
    path: /WomTeam/V1.0
    method: POST
    data_selector: records
- name: update_team
  endpoint:
    path: /WomTeam/V1.0
    method: PUT
    data_selector: records
- name: get_team_details
  endpoint:
    path: /WomTeam/V1.0
    method: GET
    data_selector: records
- name: send_code
  endpoint:
    path: /apicall/openapi/one-time-password-sms/v1/send-code
    method: POST
- name: validate_code
  endpoint:
    path: /apicall/openapi/one-time-password-sms/v1/validate-code
    method: POST
- name: location_verification
  endpoint:
    path: /
    method: POST
    data_selector: verificationResult
    params: {}
- name: charging_a_subscriber
  endpoint:
    path: /{version}/{msisdn}/transactions/amount
    method: POST
- name: send_code
  endpoint:
    path: /apicall/openapi/one-time-password-sms/v1/send-code
    method: POST
    data_selector: data
    params: {}
- name: validate_code
  endpoint:
    path: /apicall/openapi/one-time-password-sms/v1/validate-code
    method: POST
    data_selector: data
    params: {}
- name: charging_a_subscriber
  endpoint:
    path: /payment/{version}/{msisdn}/transactions/amount
    method: POST
notes:
- In order to create an application, first you should sign up for an Ideabiz account.
- All API call request to ideabiz.lk required Authorization headers.
- You should sign up for an Ideabiz account.
- Token should be refreshed ONLY when the existing token expires.
- Access Token will expire in 1 hour.
- Create Authorization Code with Base64 Encode using Consumer key & Consumer Secret.
- This library needs NEWTON JSON library. Please install it.
- Save token and credentials to Ideabiz.settings.
- Token must be refreshed ONLY when the existing token expires.
- Build Request method builds a SMS request in one line.
- ToJSON method returns json text of object.
- Save token and credentials to Ideabiz.settings
- Make config.json and lib/data.json writable
- To receive a refresh token, use the token API with username
- In order to fill the filed number 2 and 3 user need to request for the ports manually
  via an email.
- You can verify source using above source IP.
- Use applicationId and applicationname to identify each and apps
- 'Source IP : 202.69.200.34'
- Notifications can be received whenever subscribers' status change.
- Pagination available for history
- Dialog reserves the right to change these Terms of Service in any way and at any
  time at its sole discretion.
- You shall be responsible for the End Users’ access to the Services and the platforms
  including the terms of use and privacy.
- You shall adhere to any and all laws, rules, regulations, recommendations and policies;
  communicated by DIALOG time to time; as enforced by the Telecommunications Regulatory
  Commission of Sri Lanka.
- In Ideabiz, you need to verify all servlets.
- Token will expire in a specific time.
- Once the token expires, you need to refresh your existing token using refresh token.
- Developer Support team who will be able to assist you on technical queries
- Token is only valid for 1hour by default
- Our proxy maximum response time is 15sec
- Standard SMS messages limited to 160 characters.
- Unicode SMS limited to approx. 70 characters.
- Standard SMS messages are limited to 160 characters. Unicode messages are limited
  to approx. 70 characters.
- If sending a unicode string, set Content-Type charset to UTF-8.
- Please do not use the 'serviceID' parameter if you're using Payment v3.
- All API call requests to ideabiz.lk require Authorization headers.
- This widget is compatible with encrypted header enrichment as well.
- Please append `etel:+9477-` before the MSISDN in the API request body.
- Because of user privacy, we don't provide plain MSISDN for Header Enrichment feature.
- MSISDN is provided in base64 format and must be decoded and URL encoded before use
  in request body or URL.
- Due to user privacy, plain MSISDN is not provided.
- All API call requests require Authorization headers.
- Requires counterAlias and counterAuth for all operations.
- All API call requests to ideabiz.lk required Authorization headers.
- Note that fall back charging is not possible in this scenario.
- All API call requests to ideabiz.lk requires Authorization headers.
- APP-KEY in the URL will be provided by support team
- If callback URL is there, we will redirect user to callback URL with `serverRef`
  param after transaction has completed
- If you provide notificationURL, we will send API call to your notifyURL with status
  of transaction
- APP-KEY will be provided by support team
- If callback URL is there, redirect user to callback URL with serverRef param after
  transaction completion
- Notification URL will send API call with transaction status
- The OnDemand API acts as a middleware, handling inbound SMS and USSD requests from
  Dialog customers to send their location to third-party service providers.
- All routes and vehicles will be disabled after unregistration
- Request headers require Username, Password, and UnitCode
- Request body requires unitCode, cardUID, and serviceCode
- MSISDN is provided in base64 format
- User privacy prevents access to plain MSISDN
- Last updated on 10th Sep 2018
- Please base64 decode the 'msisdn' header to obtain the MSISDN.
- Do not append '+' when appending 'etel:' to the MSISDN.
- All API calls require Authorization headers.
- Update topup value after writes to the card.
- For all APIs, add the parameter _dynSessConf with the session number.
- For all the APIs, add the required parameter '_dynSessConf' when getting called.
errors:
- 'INVALID_ARGUMENT: Client specified an invalid argument, request body or query param'
- 'ONE_TIME_PASSWORD_SMS.VERIFICATION_EXPIRED: The authenticationId is no longer valid'
- 'ONE_TIME_PASSWORD_SMS.VERIFICATION_FAILED: The maximum number of attempts for this
  authenticationId was exceeded without providing a valid OTP'
- 'ONE_TIME_PASSWORD_SMS.INVALID_OTP: The provided OTP is not valid for this authenticationId'
- 'UNAUTHENTICATED: Request not authenticated due to missing, invalid, or expired
  credentials'
- 'PERMISSION_DENIED: Client does not have sufficient permissions to perform this
  action'
- 'ONE_TIME_PASSWORD_SMS.MAX_OTP_CODES_EXCEEDED: Too many OTPs have been requested
  for this MSISDN. Try later.'
- 'ONE_TIME_PASSWORD_SMS.PHONE_NUMBER_NOT_ALLOWED: Phone_number can''t receive an
  SMS due to business reasons in the operator'
- 'ONE_TIME_PASSWORD_SMS.PHONE_NUMBER_BLOCKED: Phone_number is blocked to receive
  SMS due to any blocking business reason in the operator'
- 'NOT_FOUND: A specified resource is not found'
- 'METHOD_NOT_ALLOWED: The requested method is not allowed/supported on the target
  resource'
- 'NOT_ACCEPTABLE: The server can''t produce a response matching the content requested
  by the client through Accept-* headers'
- 'UNSUPPORTED_MEDIA_TYPE: The server refuses to accept the request because the payload
  format is in an unsupported format'
- 'TOO_MANY_REQUESTS: Either out of resource quota or reaching rate limiting'
- 'INTERNAL: Server error'
- 'UNAVAILABLE: Service unavailable'
- 'TIMEOUT: Request timeout exceeded. Try later.'
- '400: INVALID_INPUT - Expected property is missing: {property}'
- '401: UNAUTHORIZED - No authorization to invoke operation'
- '403: FORBIDDEN - Operation not allowed'
- '404: NOT_FOUND - Not found'
- '500: INTERNAL_SERVER_ERROR - Internal server error'
- '503: SERVICE_UNAVAILABLE - Service unavailable'
- 400 – Bad request; check the error message for details
- 401 – Authentication failure, check your authentication details
- 403 – Forbidden; please provide authentication credentials
- '404 – Not found: mistake in the host or path of the service URI'
- '405 – Method not supported: for example you mistakenly used a HTTP GET instead
  of a POST'
- 500 – The server encountered an unexpected condition. This could be wrong authentication
  details or limited user permission
- 503 – Server busy and service unavailable. Please retry the request
- 201 – Success!
- 503 – Server busy and service unavailable. Please retry the request.
- '900903: Access Token Expired'
- '900904: Access Token Inactive'
- AuthenticationException
- ConnectionException
- 'NOTFOUND: User subscription not found'
- 'ERROR: Unable to process request'
- '400 Bad Request: Incorrect credentials'
- '401 Unauthorized: Incorrect Auth Code'
- '503 Service Unavailable: Exceeded the TPS value assigned to the API'
- '401 Unauthorized: Your subscription to the API is inactive'
- '401 Unauthorized: Incorrect credentials'
- '401 Unauthorized: Using an old access token'
- '503: Server busy and service unavailable. Please retry the request.'
- '401: Authentication failure, check your authentication details'
- '403: Forbidden; please provide authentication credentials'
- '404: Not found: mistake in the host or path of the service URI'
- '405: Method not supported: for example you mistakenly used a HTTP GET instead of
  a POST'
- '500: The server encountered an unexpected condition. This could be wrong authentication
  details or limited user permission'
- '200: Success!'
- '201: Success!'
- '401 Unauthorized: Invalid Credentials'
- '401 Unauthorized: Recheck OAuth scopes or token expiration'
- '900901: Invalid Credentials'
- '900909: The subscription to the API is inactive Access failure for API'
- 'Access Token Expired: Use a scheduler action to request a new access token before
  the token expires.'
- 'Application Suspended: Contact the Developer Support Team'
- 'Application Terminated: Contact the Developer Support Team'
- 'MSISDN Blacklisted all services: This user has been blacklisted for all your services.
  You cannot subscribe any services for this number'
- 'MSISDN Blacklisted for your application: This user has been blacklisted for your
  service. You cannot subscribe your application for this number'
- '400: Bad request; check the error message for details'
- '500: The server encountered an unexpected condition.'
- '503: Server busy and service unavailable.'
- '503: Server busy and service unavailable. Please retry the request'
- 'ERROR: Wrong PIN'
- 'ERROR: Max attempt exceeded'
- 'SVC0001: A service error occurred. Error code is %1'
- 'SVC0002: Invalid input value for message part %1'
- 'SVC0003: Invalid input value for message part %1, valid values are %2'
- 'SVC0004: No valid addresses provided in message part %1'
- 'SVC0005: Correlator %1 specified in message part %2 is a duplicate'
- 'SVC0006: Group %1 in message part %2 is not a valid group'
- 'SVC0007: Invalid charging information'
- 'SVC0008: Overlapped criteria %1'
- 'SVC1000: No resources'
- 'SVC0280: Message too long. Maximum length is %1 characters'
- 'SCV0283: Delivery receipt notification not supported'
- 'SVC0284: Address format is invalid. Expected format is %1'
- 'SVC0285: Message Not Delivered %1'
- 'SVC0270: Charging operation failed, the charge was not applied'
- 'SVC0271: endUserId format invalid. Expected format is %1'
- 'POL0001: Policy error occurred.'
- 'POL0002: Privacy verification failed for address %1, request is refused'
- 'POL0003: Too many addresses specified in message part %1'
- 'POL0004: Unlimited notification request not supported'
- 'POL0005: Too many notifications requested'
- 'POL0006: Group specified in message part %1 not allowed'
- 'POL0007: Nested groups specified in message part %1 not allowed'
- 'POL0008: Charging is not supported'
- 'POL0009: Invalid frequency requested'
- 'POL0010: Requested information unavailable as the retention time interval has expired'
- 'POL0011: Media type not supported'
- 'POL0012: Too many description entries specified in message part %1'
- 'POL0013: Duplicated addresses %1'
- 'POL0253: Payment operation refused by user'
- 'POL0254: The amount exceeds the operator limit for a single charge'
- 'POL0255: Address format invalid. Expected format is %1'
- 'POL0256: Invalid currency specified. %1'
- 'POL0257: Message not delivered %1'
- 'POL0299: Unexpected Errors'
- 'POL1000: User has insufficient credit for transaction'
- 'POL1001: The %1 operator charging limit for this user has been exceeded'
- 'POL1007: Refunds not supported'
- 'POL1009: User has not been provisioned for %1'
- 'POL1010: User has been suspended from %1'
- 'errorCode: Defined status for particular Error'
- 'errorDescription: Description of the error code'
- '200: ValidInfo'
- '403: Invalid Details'
- '503: Error'
- 400 - Bad request; check the error message for details
- 401 - Authentication failure, check your authentication details
- 403 - Forbidden; please provide authentication credentials
- '404 - Not found: mistake in the host or path of the service URI'
- '405 - Method not supported: for example you mistakenly used a HTTP GET instead
  of a POST'
- 500 - The server encountered an unexpected condition. This could be wrong authentication
  details or limited user permission
- 503 - Server busy and service unavailable. Please retry the request
- '405: Method not supported: for example you mistakenly used an HTTP GET instead
  of a POST'
- '500: The server encountered an unexpected condition. This could be wrong authentication
  details or limited user permission.'
- '6: Transaction Failure'
- '12: Invalid Agent Status'
- '16: Invalid Recipient Status'
- '25: Unauthorized Transaction Type'
- '26: Unauthorized Recipient Type'
- '37: Invalid Agent Pin'
- '40: Invalid Transaction Type'
- '41: Invalid Initiator'
- '63: Invalid username/password'
- '64: Duplicate Request ID'
- '51: Invalid Recipient'
- '55: Account is blocked due to invalid pin retries'
- '17: Amount less than the minimum value allowed'
- '18: Amount exceed the maximum value allowed'
- '19: Amount exceed the daily transaction capping'
- '20: Amount less than the minimum limit allow for compartment'
- '21: Amount exceed the daily out capping'
- '22: Insufficient amount balance'
- '23: Amount exceed the max limit for compartment allowed'
- '24: Amount exceed the daily in capping'
- '68: Missing or incorrect requested parameters'
- '200 OK: Transaction successful'
- '5000: ExternalMerchantTransactionId must unique for transactions'
- '5001: Lack of necessary details'
- '5002: Merchant does not exist'
- '5003: Your Wallet has been blocked. Please go to Menu>Contact Us and lodge a request
  to unblock'
- '5004: This user account is inactive, please contact the call centre for more information'
- '5005: Customer does not exist'
- '5006: Cannot change status of this transaction, This transaction is already processed'
- '5007: Cannot change to this status'
- '5008: You have not permission to change status of this transaction'
- '5009: Cannot find transaction'
- '5010: The user account is inactive'
- '5011: User permissions error, Please log in as a merchant admin user to perform
  the action'
- '5012: You have not permission to get this transaction details'
- '5013: User does not exist'
- '5014: No transactions for searching parameters'
- '5015: Required parameter missing - {Parameter Name}'
- 'Authorization failed: Recheck access token'
- 400 Bad request
- 409 Conflict
- 500 System error
- 'E101: <parameter> not found or empty in the request'
- 'E102: applicationId not found or empty in the request'
- 'E103: Application for application id : <applicationId> not found'
- 'E104: Application for application id : <applicationId> already unregistered'
- 'E130: No application found for application id : <applicationId>'
- 'E201: Application id or vehicle name not found or empty in the request'
- 'E202: Vehicle name : <vehicleName> should be less than 10 characters'
- 'E210: <parameter> not found or empty in the request'
- 'E211: Error in date time format : <timeString>'
- 'E212: No running schedule is configured for the vehicle : <vehicleId>'
- 'E260: No vehicle found for application id : <applicationId> vehicle id : <vehicleId>'
- 'E220: <parameter> not found or empty in the request'
- 'E230: <parameter> not found or empty in the request'
- '200 OK: Successfully Activated'
- 'E130: No application found for application id'
- 'E240: parameter not found or empty in the request'
- 'E250: There are pending or running schedules for the vehicleId'
- 'E315: No route found for application id and route id'
- 'E340: parameter not found or empty in the request'
- 'E312: Error in format lat and lng'
- 'E501: parameter not found or empty in the request'
- 'E1001: Error in format: Radius is not a float number'
- 'E260: No vehicle found for application id and vehicle id'
- 'E301: parameter not found or empty in the request'
- 'E350: parameter not found in the request'
- 'E370: Route already removed'
- 'E504: <parameter> not found or empty in the request'
- 'E540: No circular geofence found for application id : <applicationId> geofence
  id : <geofenceId>'
- 'E511: <parameter> not found or empty in the request'
- 'E535: Error in pointArray format <pointArray>'
- 'E512: <parameter> not found or empty in the request'
- 'E513: <parameter> not found or empty in the request'
- '401 Unauthorized: Unauthorized Request'
- '400 Bad Request: Bad Request'
- '500 Internal Server Error: Internal Server Error'
- 401 Unauthorized Request
- 400 Validation Failure
- 500 Unknown error
- 'E312: Error in format lat : < lat > lng : < lng >'
- 'E501: <parameter> not found or empty in the request'
- 'E1001: Error in format : Radius is not a float number < value >'
- '0: Success'
- '1: Unauthorized'
- '2: Validation Failed'
- '3: Unknown error'
- '200: Ok'
- '401: Unauthorized Request'
- '400: Validation Failure'
- '500: Unknown error'
- 'E510: <parameter> not found or empty in the request'
- 'E550: Both geofenceName and pointArray are not in the request'
- 400 Bad Request
- 500 Internal Server Error
- 200 – Success
- 417 – Bad request; check the error message for details
- 500 – Internal server error
- '400 Validation Failure: Validation Failure'
- '500 Unknown error: Unknown error'
- 'Status code  : 201'
- '400 Bad Request: Check request parameters for validity.'
- '401 Unauthorized: Verify authorization headers.'
- '404 Not Found: Ensure the endpoint exists.'
- 200 OK
- 406 Not acceptable (Invalid inputs)
- 407 Invalid system ID
- 408 Balance not sufficient
- 500 Internal Error
- '400 Bad Request: Check required fields in the request body'
- '401 Unauthorized: Verify username and password'
- '500 Internal Server Error: Contact support for assistance'
- 401 Un-authorized
- 409 Error while processing
- 402 Balance insufficient
- '001: Device Not Found'
- '002: Invalid radius'
- '003: Invalid Lat/Lon value'
- '004: Error saving proximity location'
- '005: Proximity location with same name exists'
- '006: Proximity location does not exist'
- '007: Error deleting proximity location'
- '008: Error removing sharee'
- '009: Sharee entry not found'
- '010: Error adding sharee'
- '011: Sharee entry already exists'
- '012: Sharee / device not found'
- '013: Error unsharing device'
- '014: Device not shared with this customer'
- '015: Device already shared with the customer'
- '016: Error sharing device'
- '017: Error updating device'
- '018: Error updating alert setting'
- '019: alertInHours should be a positive integer'
- '020: Error updating account charging number'
- '021: Charging number should be a Dialog number'
- '022: Device already active'
- '023: Unable to reactivate device'
- '024: One or more devices in the list are not found'
- '025: Invalid callback URL'
- '026: Interval should be a positive integer'
- '027: Interval should be between XX and YY'
- '028: Error subscribing to location updates'
- '029: Error unsubscribing from location updates'
- '030: Error subscribing to proximity alerts'
- '031: Error unsubscribing to proximity alerts'
- '032: Subscription blocked by admin'
- '400: Bad Request'
- '401: Unauthorized'
- '402: Payment Required'
- '403: Forbidden'
- '404: Not Found'
- '409: Conflict'
- '500: Internal Server Error'
- '501: Not Implemented'
- '405: Method Not Allowed'
- 201 – OK, SMS Send Successful
- 400 – Bad request
- 500 – System error
- '200: ''OK'''
- '401: ''Unauthorized'''
- '404: ''Not Found'''
- '500: ''Internal Server Error'''
- 400 - Bad request
- 500 - System error
- 'Status code  : 200'
- '401 Unauthorized: Recheck your Authorization headers.'
- 'Status code  : 201: Successfully created the team'
- 'Status code  : 200: Query Successful'
- 'INVALID_INPUT: Expected property is missing: {property}'
- 'UNAUTHORIZED: No authorization to invoke operation'
- 'FORBIDDEN: Operation not allowed'
- 'NOT_FOUND: Not found'
- 'INTERNAL_SERVER_ERROR: Internal server error'
- 'SERVICE_UNAVAILABLE: Service unavailable'
auth_info:
  mentioned_objects:
  - applicationId
  - applicationname
  - Access Token
  - Username
  - Password
  - UnitCode
client:
  base_url: https://ideabiz.lk/apicall/openapi/location/v1/
  headers:
    Content-Type: application/json
    Accept: application/json
source_metadata: null
