resources:
- name: batch_publish
  endpoint:
    path: /messages
    method: POST
- name: batch_presence
  endpoint:
    path: /presence
    method: GET
- name: service_time
  endpoint:
    path: /time
    method: GET
- name: device_registrations
  endpoint:
    path: /push/deviceRegistrations
    method: GET
    data_selector: records
    params:
      limit: 100
- name: channel_subscriptions
  endpoint:
    path: /push/channelSubscriptions
    method: GET
    data_selector: records
    params:
      limit: 100
- name: channels
  endpoint:
    path: /push/channels
    method: GET
    data_selector: records
- name: message_history
  endpoint:
    path: /channels/<channelId>/messages
    method: GET
    data_selector: messages
    params:
      limit: '100'
      direction: backwards
- name: presence
  endpoint:
    path: /channels/<channelId>/presence
    method: GET
    data_selector: members
    params:
      limit: '100'
- name: presence_history
  endpoint:
    path: /channels/<channelId>/presence/history
    method: GET
    data_selector: presence_history
    params:
      limit: '100'
      direction: backwards
- name: channel_metadata
  endpoint:
    path: /channels/<channelId>
    method: GET
    data_selector: channel_details
- name: active_channels
  endpoint:
    path: /channels
    method: GET
    data_selector: channels
    params:
      limit: '100'
- name: device_registration
  endpoint:
    path: /push/deviceRegistrations
    method: POST
    data_selector: device_details
- name: batch_publish
  endpoint:
    path: /messages
    method: POST
- name: batch_presence
  endpoint:
    path: /presence
    method: GET
- name: service_time
  endpoint:
    path: /time
    method: GET
- name: deviceRegistrations
  endpoint:
    path: /push/deviceRegistrations
    method: GET
    data_selector: '[]'
- name: channelSubscriptions
  endpoint:
    path: /push/channelSubscriptions
    method: GET
    data_selector: '[]'
- name: channels
  endpoint:
    path: /push/channels
    method: GET
    data_selector: '[]'
- name: stats
  endpoint:
    path: /stats
    method: GET
    data_selector: '{}'
- name: message_history
  endpoint:
    path: /channels/<channelId>/messages
    method: GET
    params:
      limit: 100
- name: presence_status
  endpoint:
    path: /channels/<channelId>/presence
    method: GET
    params:
      limit: 100
- name: presence_history
  endpoint:
    path: /channels/<channelId>/presence/history
    method: GET
    params:
      limit: 100
- name: channel_metadata
  endpoint:
    path: /channels/<channelId>
    method: GET
- name: active_channels
  endpoint:
    path: /channels
    method: GET
    params:
      limit: 100
- name: device_registration
  endpoint:
    path: /push/deviceRegistrations
    method: POST
- name: update_device_registration
  endpoint:
    path: /push/deviceRegistrations/<deviceId>
    method: PUT
- name: get_device_registration
  endpoint:
    path: /push/deviceRegistrations/<deviceId>
    method: GET
- name: device_registrations
  endpoint:
    path: /push/deviceRegistrations
    method: GET
    data_selector: '[]'
- name: channel_subscriptions
  endpoint:
    path: /push/channelSubscriptions
    method: GET
    data_selector: '[]'
- name: channels
  endpoint:
    path: /push/channels
    method: GET
    data_selector: '[]'
- name: stats
  endpoint:
    path: /stats
    method: GET
    data_selector: '{}'
- name: message_history
  endpoint:
    path: /channels/<channelId>/messages
    method: GET
    data_selector: items
    params:
      limit: 100
- name: presence
  endpoint:
    path: /channels/<channelId>/presence
    method: GET
    data_selector: items
    params:
      limit: 100
- name: presence_history
  endpoint:
    path: /channels/<channelId>/presence/history
    method: GET
    data_selector: items
    params:
      limit: 100
- name: channel_metadata
  endpoint:
    path: /channels/<channelId>
    method: GET
    data_selector: channelDetails
- name: enumerate_channels
  endpoint:
    path: /channels
    method: GET
    data_selector: channels
    params:
      limit: 100
- name: device_registration
  endpoint:
    path: /push/deviceRegistrations
    method: POST
    data_selector: deviceDetails
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: rooms
  endpoint:
    path: /chat/rooms
    method: GET
    data_selector: rooms
    params: {}
- name: messages
  endpoint:
    path: /chat/rooms/history
    method: GET
    data_selector: messages
    params: {}
- name: channel
  endpoint:
    path: /channels
    method: GET
    data_selector: channels
- name: messages
  endpoint:
    path: /messages
    method: POST
    data_selector: message
- name: channel
  endpoint:
    path: /channels
    method: GET
    data_selector: channels
- name: connection_state
  endpoint:
    path: /connect/states
    method: GET
    data_selector: states
- name: space
  endpoint:
    path: /spaces
    method: GET
- name: member
  endpoint:
    path: /spaces/avatar
    method: POST
- name: spaces.get
  endpoint:
    path: /spaces
    method: GET
    data_selector: space
- name: space.member.subscribe
  endpoint:
    path: /spaces/locking/subscribe
    method: POST
    data_selector: member
- name: space.enter
  endpoint:
    path: /spaces/space/enter
    method: POST
    data_selector: enter_event
- name: space.locks.acquire
  endpoint:
    path: /spaces/locking/acquire
    method: POST
    data_selector: lock
- name: channels.get
  endpoint:
    path: /channels
    method: GET
    data_selector: channel
- name: channel.subscribe
  endpoint:
    path: /channels/subscribe
    method: POST
    data_selector: subscription
- name: channel.publish
  endpoint:
    path: /channels/publish
    method: POST
    data_selector: publish
- name: spaces
  endpoint:
    path: /spaces
    method: GET
- name: locations
  endpoint:
    path: /locations
    method: GET
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: before_publish
  endpoint:
    path: /moderation/before-publish
    method: POST
- name: after_publish
  endpoint:
    path: /moderation/after-publish
    method: POST
- name: channels
  endpoint:
    path: /channels
    method: GET
- name: messages
  endpoint:
    path: /messages
    method: GET
- name: channels
  endpoint:
    path: /channels
    method: GET
- name: channel_states
  endpoint:
    path: /channels/states
    method: GET
- name: presence
  endpoint:
    path: /presence
    method: GET
- name: presence
  endpoint:
    path: /presence
    method: GET
    data_selector: presence
- name: occupancy
  endpoint:
    path: /occupancy
    method: GET
    data_selector: occupancyMetrics
    params: {}
- name: '[meta]occupancy'
  endpoint:
    path: /channels/occupancy
    method: GET
    data_selector: metrics
- name: ChannelDetails
  endpoint:
    path: /channels/details
    method: GET
    data_selector: metrics
- name: channel_history
  endpoint:
    path: /history
    method: GET
    data_selector: items
    params:
      limit: 100
- name: presence_history
  endpoint:
    path: /presence/history
    method: GET
    data_selector: items
    params: {}
- name: app_statistics
  endpoint:
    path: /v1/apps/${APP_ID}/stats
    method: GET
    data_selector: entries
    params:
      unit: hour
      limit: 1
- name: account_statistics
  endpoint:
    path: /v1/accounts/${ACCOUNT_ID}/stats
    method: GET
    data_selector: statistics
    params:
      unit: minute
      limit: 2
- name: me
  endpoint:
    path: /v1/me
    method: GET
    data_selector: account_id
    params: {}
- name: messages.outbound.realtime.all
  endpoint:
    path: /messages/outbound/realtime/all
    method: GET
    data_selector: records
- name: messages.outbound.rest.all
  endpoint:
    path: /messages/outbound/rest/all
    method: GET
    data_selector: records
- name: messages.outbound.webhook.all
  endpoint:
    path: /messages/outbound/webhook/all
    method: GET
    data_selector: records
- name: messages.outbound.sharedQueue.all
  endpoint:
    path: /messages/outbound/sharedQueue/all
    method: GET
    data_selector: records
- name: messages.outbound.externalQueue.all
  endpoint:
    path: /messages/outbound/externalQueue/all
    method: GET
    data_selector: records
- name: messages.outbound.httpEvent.all
  endpoint:
    path: /messages/outbound/httpEvent/all
    method: GET
    data_selector: records
- name: messages.outbound.push.all
  endpoint:
    path: /messages/outbound/push/all
    method: GET
    data_selector: records
- name: messages.outbound.all
  endpoint:
    path: /messages/outbound/all
    method: GET
    data_selector: records
- name: stats
  endpoint:
    path: /sse
    method: GET
    data_selector: data
    params:
      channel: '[meta]stats:minute'
      v: '1.2'
- name: Realtime SDK
  endpoint:
    path: /docs/api/realtime-sdk
    method: GET
- name: REST SDK
  endpoint:
    path: /docs/api/rest-sdk
    method: GET
- name: REST API
  endpoint:
    path: /docs/api/rest-api
    method: GET
- name: SSE API
  endpoint:
    path: /docs/api/sse
    method: GET
- name: Control API
  endpoint:
    path: /docs/api/control-api
    method: GET
- name: stats
  endpoint:
    path: /stats
    method: GET
    data_selector: entries
- name: event-stream
  endpoint:
    path: /event-stream
    method: GET
    data_selector: data
    params:
      channels: example
      v: '1.2'
- name: event-stream
  endpoint:
    path: /event-stream
    method: GET
    data_selector: stream
    params:
      channels: ''
      v: '1.2'
- name: sse
  endpoint:
    path: /sse
    method: GET
    data_selector: stream
    params:
      channels: ''
      v: '1.2'
- name: channels
  endpoint:
    path: /channels
    method: GET
    data_selector: data
    params: {}
- name: stats
  endpoint:
    path: /stats
    method: GET
    data_selector: stats
- name: channels
  endpoint:
    path: /channels
    method: GET
    data_selector: records
    params: {}
- name: messages
  endpoint:
    path: /messages
    method: GET
    data_selector: records
    params: {}
- name: channel
  endpoint:
    path: /channels
    method: GET
- name: channels
  endpoint:
    path: /channels
    method: GET
    data_selector: records
    params: {}
- name: message_history
  endpoint:
    path: /channels/:channelName/history
    method: GET
    data_selector: items
    params:
      limit: 5
- name: presence
  endpoint:
    path: /channels/my-first-channel/presence
    method: GET
    data_selector: presenceData
- name: message_history
  endpoint:
    path: /channels/my-first-channel/history
    method: GET
    data_selector: items
    params:
      limit: 5
- name: channel
  endpoint:
    path: /channels/my-first-channel
    method: GET
    data_selector: messages
- name: channel
  endpoint:
    path: /channels
    method: GET
    data_selector: messages
- name: messages
  endpoint:
    path: /channels/my-first-channel/messages
    method: GET
    data_selector: data
- name: presence
  endpoint:
    path: /channels/my-first-channel/presence
    method: GET
    data_selector: data
- name: message_history
  endpoint:
    path: /channels/my-first-channel/history
    method: GET
    data_selector: items
    params:
      limit: 5
- name: channel
  endpoint:
    path: /channels/my-first-channel
    method: GET
    data_selector: messages
- name: channels
  endpoint:
    path: /channels
    method: GET
    data_selector: messages
    params: {}
- name: presence
  endpoint:
    path: /presence
    method: GET
    data_selector: messages
    params: {}
- name: history
  endpoint:
    path: /history
    method: GET
    data_selector: messages
    params: {}
- name: channel
  endpoint:
    path: /channels
    method: GET
    data_selector: messages
- name: channel
  endpoint:
    path: /channels
    method: GET
    data_selector: messages
- name: channel
  endpoint:
    path: /channels
    method: GET
    data_selector: messages
- name: channel_messages
  endpoint:
    path: /channels/:channelName/messages
    method: GET
    data_selector: items
- name: presence
  endpoint:
    path: /channels/:channelName/presence
    method: GET
    data_selector: items
- name: message_history
  endpoint:
    path: /channels/:channelName/messages/history
    method: GET
    data_selector: items
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
notes:
- Using the REST API directly is fully supported, Ably recommends that customers should
  use the Ably REST client libraries SDKs.
- The REST API defaults to returning results and expects request bodies in JSON format.
- Responses may have unbounded size and are paginated.
- Responses may contain links relating to the current query.
- Envelope responses are only supported for JSON, JSONP and HTML formats.
- 'Auth required: yes (basic or token authentication with push-admin capability)'
- Auth required for all endpoints, with either basic or token authentication.
- Uses token authentication — requires setup of application key in Ably dashboard
- Auth required for batch publish and batch presence.
- 'Auth required: yes ([basic](#basic-authentication) or [token](#token-authentication)
  with `push-admin` capability)'
- Uses bearer token for authentication
- Some operations may return 204 status with no response body
- 'Auth required: yes ([basic](#basic-authentication) or [token](#token-authentication))'
- Requires push-admin capability for various operations
- Some objects may return nulls in deeply nested fields
- Auth required for all endpoints
- Rate-limited for enumerating channels
- Uses OAuth2 with refresh token — requires setup of connected app in api
- Some objects like Contact may return nulls in deeply nested fields
- Some features may require specific settings in the API console
- Message history enables users to view messages that have been previously sent to
  the chat room.
- Update the value of VITE_ABLY_KEY to be your Ably API key.
- LiveMap is implemented using Ably LiveObjects.
- LiveObjects is a feature of Ably Pub/Sub.
- Connection state is preserved by Ably during periods of brief disconnection to provide
  message continuity to clients.
- Occupancy enables you to retrieve high level metrics about the clients attached
  to a channel.
- 'You own your data: should you request it, we will send you your data or delete
  it.'
- We will do our best to help you with implementation and provide support.
- Uses soft delete for message deletion.
- Understand token authentication before going to production.
- The JavaScript SDK can be used with React and React Native.
- Ably SDKs provide a consistent and idiomatic API across a variety of supported platforms.
- Requires setup of authentication for token-based access.
- Basic authentication is only recommended for server-side use.
- Private API keys should never be shared with untrusted parties, and as such, should
  only be used by your trusted secure servers when authenticating with Ably.
- Token authentication is the recommended authentication method to use client-side
  as it provides more fine-grained access control and limits the risk of credentials
  being exposed.
- Token revocation can be enforced immediately or postponed by 30 seconds.
- By default allowReauthMargin is set to false.
- Tokens created from an API key with revocable tokens enabled are restricted to a
  maximum TTL of 1 hour.
- Identifying a client varies depending on whether they are authenticating with basic
  authentication or token authentication.
- Token authentication is recommended in most instances so that clients authenticate
  using short-lived tokens and do not have access to API keys.
- An authenticated client has a means to authenticate with Ably, but may not have
  an identity.
- Clients are assigned a trusted identity with a clientId for operations.
- Channel mode flags enable a client to specify a subset of the capabilities granted
  by their token or API key as channel options.
- API keys are long-lived, secret and typically not shared with clients.
- Ably-compatible tokens are designed to be shared with untrusted clients, are short-lived,
  and can be configured and issued programmatically.
- It isn't possible to share a connection between browser tabs.
- Once a client has been disconnected for more than two minutes, the SDK moves into
  the suspended state indicating that the connection state is lost.
- Ably provides continuity of message delivery between a client and the service provided
  that a dropped connection is re-established by the client within a limited interval
  (typically around two minutes).
- 'API key: DEMO ONLY'
- Channels are used to separate messages into different topics.
- 'Clients require the subscribe capability for one of the following resources in
  order to receive messages from a subscription filter: [filter]<channel name>, [*]<channel
  name>, [*]*'
- Be aware that when registering listeners for channel state changes, certain repeating
  states may add new listeners each time.
- Message conflation is mutually exclusive with server-side batching on a channel,
  or channel namespace.
- Messages are counted in 5KiB chunks.
- Server-side batching doesn't support idempotency due to how messages are grouped
  on the server.
- Clients must be identified by having a ClientId in order to be present on a channel.
- They also require the presence capability to enter the presence set, and the subscribe
  capability to subscribe to presence events.
- API key is demo only
- There is a cost associated with storing messages for longer than the minimum time
  period.
- Ably stores all messages for two minutes by default.
- This can be increased up to a year, or longer, depending on your account package.
- Two minutes of message history is available to retrieve by default.
- History can return up to 1000 messages in a single call, as a paginated list.
- Each page of history contains up to 100 messages.
- The 'untilAttach' option can be used only when the channel is attached.
- Access using the push-admin capabilities grants full API access.
- Access using the push-subscribe capabilities designates a client as a push target
  device or browser.
- Direct publishing sends push notifications directly to individual devices via the
  Ably SDK, bypassing the intermediary of channels.
- The APP_ID can be found in the Settings tab of an application within your dashboard.
- Statistics are aggregated by minute, hour, day, and month.
- The most recent statistics can be delayed by up to six seconds.
- SSE allows subscribe-only functionality. This means you can't publish, enter presence,
  query the existing presence set, attach and detach from channels without restarting
  the stream.
- SSE is an excellent alternative to Ably SDK in memory-limited environments.
- Token auth is recommended for client-side use.
- Connection state is retained for two minutes.
- Using the MQTT adapter will be a little slower than using an Ably SDK.
- Only supports MQTT 3.1.1 clients only.
- Publishing supports QoS 0 or 1.
- Subscribing only supports QoS 0.
- Session resumption is supported within the usual Ably time limit of two minutes.
- Doesn't support any MQTT features that aren't normally supported by Ably.
- Using an adapter introduces some latency and is slower than using an Ably SDK
- The Pusher Adapter provides some of the advantages of Ably, such as inter-regional
  message federation
- You should only use your Ably API key name, not the full API key.
- PubNub uses different API keys for publishing and subscribing.
- Ensure the connection uses SSL.
- Using an adapter introduces some latency and is slower than using an Ably SDK, however
  the impact is typically in the low milliseconds.
- Many of the advantages associated with using Ably, such as the use of WebSockets
  rather than long polling, continuity guarantees, and fallback host support are only
  available when using an Ably SDK.
- OAuth2 with token-based authentication is used
- Use the private API key for Basic authentication.
- Requires a valid Ably account and API key.
- The Realtime library needs to have credentials to be able to authenticate with the
  Ably service.
- Uses token authentication — requires API key for access
- Uses OAuth2 with refresh token — requires setup of connected app in Ably
- Uses token authentication.
- Uses token-based authentication.
- Use token authentication in a production app.
- Explicitly closing connections when they are no longer needed is good practice.
- Uses token authentication — requires setup of token providers
- Use token authentication in production environments.
- Ably stores all messages for 2 minutes by default.
- Keep the Realtime client initialization outside of any React component to prevent
  it from being recreated on re-renders.
- Uses API key for authentication, but token authentication is recommended for production.
- Requires API key with publish, subscribe, presence and history capabilities.
- While using an API key is fine for the purposes of this guide, you should use token
  authentication in production environments.
- Connections are automatically closed approximately two minutes after the last channel
  is detached.
- Uses API key for authentication — should use token authentication in production.
- Use token authentication in production apps.
- Requires setup of connected app in Ably
- Use an API key for simplicity, but you should use token authentication in a production
  app.
- Uses token authentication — requires setup of API keys in Ably dashboard
- Explicitly closing connections when they are no longer needed is good practice to
  help save costs.
- The code examples in this guide include a demo API key. If you wish to interact
  with the Ably CLI and view outputs within your Ably account, ensure that you replace
  them with your own API key.
- Uses token authentication
- Code examples include a demo API key. Replace with your own API key for interaction.
- Use token-based authentication for API calls.
- Using API keys directly is fine for server-side environments like PHP.
- For frontend clients, use token authentication instead of exposing API keys.
- Client-specified message ID restrictions for multiple messages published atomically
- Can I send messages between clients without using channels?
- Ably Messages are billed in 2KiB chunks.
- Client-side filtering of messages has no effect on message counting.
- Push notification delivered to a device counts as one message.
- Uses TLS by default for secure communication
- Unencrypted communication is disallowed under certain conditions
- Messages are sent and received securely using TLS.
- Common questions and issues with the Realtime API
- Potential errors, issues, and problems encountered when trying to set up Ably
- Common misconceptions around Ably History
- How do I enable history? My messages are not being stored for longer than a few
  minutes.
- Authenticated and identified clients
- Token and Basic authentication
- Debugging Ably Push Notifications
- Why are my Push Notifications duplicated?
- Why can I not publish push notifications on channels?
- Common errors when setting up queues.
- Are Ably Queues appropriate for Production?
- Encryption is automatically enabled if you provide a secret key to the client library
  when instantiating a channel.
- All communication with Ably can be over TLS (with 2048 bit asymmetric encryption).
- Authentication can be done using either API key or auth token.
- All client libraries support Message Pack, which is an efficient binary protocol.
errors:
- 'REQUEST_LIMIT_EXCEEDED: Throttle API calls or reduce frequency'
- 'QUERY_TIMEOUT: Break down filters or add selectivity'
- '401 Unauthorized: Recheck authentication credentials'
- '42912: Only a single in-flight channel enumeration call is permitted.'
- '40011: Pagination sequence may become invalid.'
- '401 Unauthorized: Recheck API key or token validity'
- '401 Unauthorized: Recheck token validity'
- '40020: Partial success'
- '400: Failed request'
- '42912: Rate limit exceeded'
- '40011: Invalid pagination sequence'
- '401 Unauthorized: Recheck OAuth scopes or token expiration'
- '40141: An error occurred; invalidated token.'
- '401 Unauthorized: Recheck API key or permissions'
- 'Channel failed, reason: '
- Non-fatal errors
- '401: Token expired'
- '400: Batched response includes errors'
- '401 Unauthorized: Token expired'
- '40020: Batched response includes errors'
- 'Rate limit exceeded: Reduce frequency of requests.'
- 'Invalid API key: Check your API key and retry.'
- Client-returned errors will not be published to the [meta]log:push channel.
- '401 Unauthorized: Token-related errors identified by codes in the range of 40140
  to 40150.'
- '40160: Require identification is enabled.'
- '401 Unauthorized: Token expired. (See https://help.ably.io/error/40142 for help.)'
- '401 Unauthorized: Check your API key and permissions.'
- '429 Too Many Requests: Rate limit exceeded.'
- '401 Unauthorized: Check your API key or token'
- '429 Too Many Requests: Reduce the frequency of requests'
- '401 Unauthorized: Check your API key and token.'
- 'Error publishing message: Handle by logging the error.'
- '401 Unauthorized: Check API key or permissions.'
- '401 Unauthorized: Check your token or authentication method.'
- 'Channel Region Inactive: Check the channel region settings'
- 'History Call Limit Exceeded: Reduce the number of channels in a single call'
- Error 40125 - maximum number of rules per application exceeded
- 'Error code: 20000 - General Error Code'
- 'Error code: 10000 - No Error'
- 'Error code: 40127 - maximum number of keys per application exceeded'
- 'Error code: 40003 - invalid parameter value'
- 'Error code: 40000 - Bad request'
- 'Error code: 40001 - Invalid request body'
- 'Error code: 40005 - Invalid credentials'
- 'Error code: 40006 - Invalid Connection ID'
- 'Error code: 40009 - Maximum message length exceeded'
- 'Error code: 40010 - Invalid Channel Name'
- 'Error code: 40012 - Invalid client ID'
- 'Error code: 40013 - Invalid Message Data or Encoding'
- 'Error code: 40030 - Invalid publish request (unspecified)'
- 'Error code: 40032 - Invalid publish request (impermissible extras field)'
- 'Error code: 40100 - Unauthorized'
- 'Error Code: 40101 - Invalid credentials'
- 'Error code: 40102 - Incompatible Credentials'
- 'Error code: 40103 - Invalid use of Basic auth over non-TLS transport'
- 'Error Code: 40104 Timestamp not current'
- 'Error Code: 40105 Nonce value replayed'
- 'Error code: 40111 - Connection Limits Exceeded'
- 'Error code: 40112 - Account blocked (message limits exceeded)'
- 'Error code: 40114 - Account wide peak channel limit exceeded'
- 'Error code: 40115 - Account restricted (request limit exceeded)'
- 'Error code: 40131 - Key revoked'
- 'Error code: 40142 - Token expired code'
- 'Error code: 40143 - Token unrecognised'
- 'Error Code: 40144 - Unexpected error decoding JWT; decode exception'
- 'Error code: 40160 - action not permitted'
- 'Error code: 40161 - Access denied to channel: namespace requires identified clients'
- 'Error code: 40171 - No means provided to renew auth token'
- 'Error code: 40300 - Forbidden'
- 'Error code: 40400 - Not found'
- 'Error code: 42910 - Rate limit exceeded; request rejected'
- 'Error code: 42911 - Maximum account-wide instantaneous messages rate exceeded'
- Error 40106 - Unable to obtain credentials from given parameters
- Error code 40170 - error from client token callback
- 'Error code: 40016 - Invalid message name'
- 'Error code: 42922 - Rate limit exceeded; too many requests'
- 'Error code : 40133 - Wrong key; cannot revoke tokens with a different key to the
  one that issued them'
- 'Error code : 40141 - Token Revoked'
- 'Error code: 40020 in REST Response'
- 'Error code: 40017 - Unsupported protocol version or Invalid API version specified'
- 'Error code: 500 - Internal error'
- 'Error code: 42912 - Channel iteration call already in progress'
- 'Error code: 50000 - Internal error'
- 'Error code: 50001- Internal channel error'
- 'Error code: 50003 - Timeout error'
- 'Error code: 50002 - Internal connection error'
- 'Error code: 50305 - Ably''s routing layer was unable to service this request'
- 'Error code: 70002 - Reactor operation failed (post operation returned unexpected
  code)'
- 'Error code: 70001 - Reactor operation failed (post operation returned unexpected
  code)'
- 'Error code: 72000 - Ingress operation failed'
- 'Error code: 72002 - Ingress table is unhealthy'
- 'Error code: 72003 - Ingress cannot connect to database'
- 'Error code: 72007 - Unable to store change stream resume token'
- 'Error code: 72004 - Ingress cannot identify channel, no _ablyChannel field'
- 'Error code: 72006 - Unable to resume from change stream'
- 'Error code: 72005 - Ingress invalid pipeline'
- 'Error code : 80018 - Invalid connection id (invalid format)'
- 'Error code: 80000 - Connection failed'
- 'Error code: 80002 - Connection suspended'
- 'Error code: 80003 - Generic Disconnection Error'
- 'Error code: 80008 - Unable to recover connection (connection expired)'
- 'Error code: 80016 - Operation on superseded connection'
- 'Error code: 80017 - Connection closed'
- 'Error code: 80019 - Auth Server Rejecting Request'
- 'Error code: 80021 - Max New Connections Rate Exceeded'
- Error code 80022 - Unable to find connection
- Error code 80014 - connection timed out
- 'Error code: 80020 - Continuity loss due to maximum subscribe message rate exceeded'
- 'Error code: 40311 - operation requires tls connection'
- 'Error code: 80023 - Unable to resume connection from a different site'
- Error 91003 - maximum member limit exceeded
- Error 90003 - unable to recover channel (messages expired)
- 'Error code: 90001 - Channel operation failed (invalid channel state)'
- 'Error code: 90007 - Channel didn''t attach within 00:00:10'
- 'Error code: 90010 - Maximum number of channels per connection exceeded'
- 'Error code: 90021 - Max Channel Creation Rate Exceeded'
- 'Error code: 91000 - Unable to enter presence channel (no clientId)'
- 'Error code: 91001 - Unable to enter presence channel (invalid channel state)'
- 'Error code: 91005 - Presence state is out of sync'
- 'Error code: 90004 - unable to recover channel (message limit exceeded)'
- Error code 101000 - Space name missing
- Error code 101001 - Not entered space
- Error code 101002 - Lock request exists
- Error code 101003 - Lock is locked
- Error code 101004 - Lock invalidated
- Error code 40022 - Invalid resource
- 'Error code: 61002 - Activation failed: Present clientId is not compatible with
  existing device registration'
- 'Error code: 40015 - Invalid device id'
- 'Error code : 92000 - Invalid object message'
- 'Error code : 92001 - objects limit exceeded'
- 'Error code : 92002 - Unable to submit operation on tombstone object'
- 'Error code : 92003 - Unable to fetch object tree with tombstone object as root'
- 'Error code : 92004 - object not found'
- 'Error code : 92005 - No objects found matching operation path'
- 'Error code : 92006 - Unable to perform operation without objectId or path'
- 'Error code : 92007 - Operation not processable on path'
auth_info:
  mentioned_objects:
  - basic
  - token
  - OauthToken
  - AuthProvider
  - NamedCredential
  - push-admin
  - push-subscribe
client:
  base_url: https://ably.com
  auth:
    type: token
    location: header
    header_name: Authorization
source_metadata: null
