resources:
- name: schema
  endpoint:
    path: /docs/studio/schema-types
    method: GET
    data_selector: types
    params: {}
- name: deployment
  endpoint:
    path: /docs/studio/deployment
    method: GET
    data_selector: records
- name: field_group
  endpoint:
    path: /docs/studio/field-groups
    method: GET
- name: book
  endpoint:
    path: /structure
    method: GET
    data_selector: templates
- name: author
  endpoint:
    path: /author
    method: GET
    data_selector: authors
- name: body
  endpoint:
    path: /path/to/resource
    method: POST
    data_selector: insert
    params: {}
- name: documents
  endpoint:
    path: /api/v1/documents
    method: GET
    data_selector: results
    params:
      incremental: updatedAt
- name: comments
  endpoint:
    path: /v1/comments
    method: GET
    data_selector: comments
    params: {}
- name: structure_tool
  endpoint:
    path: /structure-tool
    method: GET
- name: documentTypeList
  endpoint:
    path: /documentTypeList
    method: GET
    data_selector: documents
    params: {}
- name: documentList
  endpoint:
    path: /documentList
    method: GET
    data_selector: documents
    params: {}
- name: form
  endpoint:
    path: /views/form
    method: GET
    data_selector: views
    params: {}
- name: component
  endpoint:
    path: /views/component
    method: GET
    data_selector: views
    params: {}
- name: google_maps_input
  endpoint:
    path: /defineLocaleResourceBundle
    method: POST
    data_selector: resources
    params: {}
- name: photos
  endpoint:
    path: /photos
    method: POST
    data_selector: items
    params:
      incremental: updated_at
- name: field_actions
  endpoint:
    path: /studio/ai-assist-field-actions
    method: GET
- name: employees
  endpoint:
    path: /employees
    method: GET
    data_selector: employees
    params: {}
- name: categorySet
  endpoint:
    path: /categorySet
    method: GET
    data_selector: categorySet
    params: {}
- name: example
  endpoint:
    path: /example
    method: GET
    data_selector: example
    params: {}
- name: image_asset
  endpoint:
    path: /images/3do82whm/production/223c27c1f0e75fe1ef494333738e2d16a8539e6a-1365x1364.svg
    method: GET
    data_selector: url
    params: {}
- name: actions
  endpoint:
    path: /actions
    method: GET
- name: badges
  endpoint:
    path: /badges
    method: GET
- name: productionUrl
  endpoint:
    path: /productionUrl
    method: GET
- name: newDocumentOptions
  endpoint:
    path: /newDocumentOptions
    method: GET
- name: drafts
  endpoint:
    path: /drafts
    method: GET
- name: client
  endpoint:
    path: /api/client
    method: GET
- name: dataset
  endpoint:
    path: /api/dataset
    method: GET
- name: project
  endpoint:
    path: /api/project
    method: GET
- name: documents
  endpoint:
    path: /v1/documents
    method: GET
    data_selector: result
    params: {}
- name: assets
  endpoint:
    path: /v1/assets
    method: GET
    data_selector: results
- name: mutations
  endpoint:
    path: /v1/mutations
    method: POST
    data_selector: mutations
- name: releases
  endpoint:
    path: /v2025-03-01/data/mutate/<dataset>
    method: POST
    data_selector: mutations
- name: documents
  endpoint:
    path: /vX/data/query/<dataset>
    method: GET
    data_selector: result
    params:
      query: '*[_type == ''movie'']{ _id }'
- name: mutate
  endpoint:
    path: /v2025-03-01/data/mutate/<dataset>
    method: POST
    data_selector: mutations
- name: product
  endpoint:
    path: /products
    method: GET
    data_selector: products
- name: collection
  endpoint:
    path: /collections
    method: GET
    data_selector: collections
- name: product_variant
  endpoint:
    path: /shopifyProductVariant
    method: GET
    data_selector: store
    params: {}
- name: collection
  endpoint:
    path: /shopifyCollection
    method: GET
    data_selector: store
    params: {}
- name: mutation
  endpoint:
    path: /docs/http-reference/mutation
    method: GET
    data_selector: records
notes:
- Schemas are the foundation of how content is structured, stored, and presented in
  the Sanity ecosystem.
- The Content Lake itself is schema-less (providing flexibility for content storage).
- Sanity Studio v4 is live! Learn more about the Node.js 20+ requirement, and upgrade
  today.
- 'The schema configuration accepts an object with two properties: templates and types.'
- Sanity Studio always connects to a dataset in the hosted Content Lake, also when
  run locally.
- You can safely change schemas with the confidence that no existing content will
  be changed.
- The server that delivers the Sanity Studio files needs to be configured for single-page
  application routing.
- The domain for where the Studio is hosted must be added as a valid domain in the
  project's CORS settings.
- Logged-in access to your Studio, and private data in your Content Lake, is always
  secured by authentication.
- Using field groups in a document or object does not change the structure of the
  document, it only affects how and where fields appear in the Studio.
- Uses OAuth2 with refresh token — requires setup of connected app in api
- Sanity Studio v4 requires Node.js 20+.
- 'Experimental feature: APIs described are subject to change and the documentation
  may not be completely accurate.'
- Uses OAuth2 with refresh token — requires setup of connected app in Sanity
- Some queries may return nulls in specific fields
- Sanity Studio is a real-time application.
- Collaborative editing model to avoid overwriting changes.
- This is a paid feature available in the Growth plan.
- Comments are stored parallel to your content in a complimentary dataset.
- The Structure tool's document list has a limited view of 2000 documents.
- Custom views cannot directly modify document content outside of the standard form
  fields without additional configuration.
- Complex custom structures may impact performance, especially in projects with large
  numbers of documents.
- Selecting a custom sort order in the Studio will override defaultOrdering and retain
  that custom sort order in local storage.
- Your Studio needs to be v3.23.0 or later to work with the internationalization (i18n)
  APIs.
- Minimum Sanity peer dependency is required for plugins to work with i18n.
- Needs at least 4, at most 100 items
- This is a paid feature
- AI Assist plugin (`@sanity/assist`) v4.3.0 or higher is required to enable custom
  field actions.
- Some objects may return nulls in deeply nested fields
- These changes are only about UI affordances, and doesn't imply any form of write
  protection for the actual data.
- Disabling add will also implicitly disable addBefore and addAfter, thus disable
  inserting new items to the array entirely.
- Uses image fields with accept options for different image types
- The sanity package provides utility hooks for creating custom components in your
  studio.
- The tools config property accepts an array of appropriately shaped objects or a
  callback function returning the same.
- Consider disabling any webhooks that might cause high volumes of traffic during
  data import.
- Keep in mind that changing the schema in your local Sanity studio does not automatically
  change the GraphQL API
- Dataset names with dashes '-' in the name currently list incorrectly in the 'sanity
  graphql list' command
- Authenticated users see only the documents they have access to.
- Your GraphQL schema is public, so all types and fields will be introspectable by
  anonymous users.
- Requires setup of OAuth2 credentials in Sanity.
- Common content migration patterns that can be run by the Sanity CLI
- Patches should be the smallest possible for efficient merging.
- Field names starting with digits must use bracket notation.
- If you run `sanity --help` outside a folder with a project configuration file and
  without a specified `projectId` flag, you will only see the subset of commands that's
  non project specific.
- The examples below use a variety of APIs to cover common patterns.
- Using Sanity clients or other integrations, you'll need to configure them with an
  appropriate token and permissions to view unpublished content.
- Use the mutations API for updates to documents.
- Do not use the CDN for draft/release previewing
- Default perspective is 'published'
- All products sync from Shopify into Sanity under the `store` property.
- Typically, you want to set these fields as `readOnly` or `hidden` in your Sanity
  Studio schemas.
errors:
- You need to provide an authorization token using the SANITY_AUTH_TOKEN environment
  variable.
- 'Unauthorized: Recheck OAuth scopes or token expiration'
- 'REQUEST_LIMIT_EXCEEDED: Throttle API calls or reduce frequency'
- 'QUERY_TIMEOUT: Break down filters or add selectivity'
- '401 Unauthorized: Recheck OAuth scopes or token expiration'
- '429 Too Many Requests: Throttle API calls or reduce frequency'
- '400 Bad Request: Check the request format or parameters'
- 'ASSET_NOT_FOUND: Ensure the asset exists at the specified path'
- GraphQL API is not an atomic operation
- '401 Unauthorized: Check your API token and permissions.'
- '404 Not Found: Verify the endpoint and resource path.'
- '400 Bad Request: Check the patch format and syntax.'
- '404 Not Found: Verify the document ID.'
- '401 Unauthorized: Check OAuth token and scopes.'
- '401 Unauthorized: Check API token validity.'
- '404 Not Found: Verify the endpoint URL and dataset.'
- Failed to unpublish document if it is referenced by another document.
auth_info:
  mentioned_objects:
  - OauthToken
  - AuthProvider
client:
  base_url: https://www.sanity.io
  headers:
    Accept: application/json
source_metadata: null
