resources:
- name: email_template
  endpoint:
    path: /createEmailTemplate
    method: POST
- name: email_templates
  endpoint:
    path: /getEmailTemplates
    method: GET
- name: email_template_update
  endpoint:
    path: /updateEmailTemplate
    method: PUT
- name: single_email_template
  endpoint:
    path: /getEmailTemplate
    method: GET
- name: delete_email_template
  endpoint:
    path: /deleteEmailTemplate
    method: DELETE
- name: find_objects
  endpoint:
    path: /findObjects
    method: GET
- name: governance_rules
  endpoint:
    path: /getGovernanceRules
    method: GET
- name: governance_rule
  endpoint:
    path: /getGovernanceRule
    method: GET
- name: create_governance_rule
  endpoint:
    path: /createGovernanceRule
    method: POST
- name: update_governance_rule
  endpoint:
    path: /updateGovernanceRule
    method: PUT
- name: delete_governance_rule
  endpoint:
    path: /deleteGovernanceRule
    method: DELETE
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: createEmailTemplate
  endpoint:
    path: /createEmailTemplate
    method: POST
- name: getEmailTemplates
  endpoint:
    path: /getEmailTemplates
    method: GET
- name: updateEmailTemplate
  endpoint:
    path: /updateEmailTemplate
    method: PUT
- name: getEmailTemplate
  endpoint:
    path: /getEmailTemplate
    method: GET
- name: deleteEmailTemplate
  endpoint:
    path: /deleteEmailTemplate
    method: DELETE
- name: findObjects
  endpoint:
    path: /findObjects
    method: GET
- name: createGovernanceRule
  endpoint:
    path: /createGovernanceRule
    method: POST
- name: getGovernanceRules
  endpoint:
    path: /getGovernanceRules
    method: GET
- name: updateGovernanceRule
  endpoint:
    path: /updateGovernanceRule
    method: PUT
- name: getGovernanceRule
  endpoint:
    path: /getGovernanceRule
    method: GET
- name: deleteGovernanceRule
  endpoint:
    path: /deleteGovernanceRule
    method: DELETE
- name: events
  endpoint:
    path: /events
    method: POST
- name: events_batch
  endpoint:
    path: /events/batch
    method: POST
- name: events
  endpoint:
    path: /v1/actions
    method: POST
    data_selector: action_name
    params: {}
- name: actions
  endpoint:
    path: /v1/actions
    method: POST
    data_selector: action
    params: {}
- name: events
  endpoint:
    path: /search/~/search/events
    method: POST
    data_selector: hits.hits
    params:
      from: -1d
      to: now
- name: count_events
  endpoint:
    path: /search/~/count/events
    method: POST
    data_selector: hits.hits
    params:
      from: -1M
      to: now
- name: createEmailTemplate
  endpoint:
    path: /createEmailTemplate
    method: POST
- name: getEmailTemplates
  endpoint:
    path: /getEmailTemplates
    method: GET
- name: updateEmailTemplate
  endpoint:
    path: /updateEmailTemplate
    method: PUT
- name: getEmailTemplate
  endpoint:
    path: /getEmailTemplate
    method: GET
- name: deleteEmailTemplate
  endpoint:
    path: /deleteEmailTemplate
    method: DELETE
- name: findObjects
  endpoint:
    path: /findObjects
    method: GET
- name: getGovernanceRules
  endpoint:
    path: /getGovernanceRules
    method: GET
- name: updateGovernanceRule
  endpoint:
    path: /updateGovernanceRule
    method: PUT
- name: getGovernanceRule
  endpoint:
    path: /getGovernanceRule
    method: GET
- name: deleteGovernanceRule
  endpoint:
    path: /deleteGovernanceRule
    method: DELETE
- name: events_batch
  endpoint:
    path: /v1/events/batch
    method: POST
- name: events
  endpoint:
    path: /events
    method: POST
    data_selector: request
    params: {}
- name: actions
  endpoint:
    path: /v1/actions
    method: POST
    data_selector: action
    params: {}
- name: actions_batch
  endpoint:
    path: /v1/actions/batch
    method: POST
    data_selector: actions
    params: {}
- name: users
  endpoint:
    path: /v1/users
    method: POST
    data_selector: user
    params: {}
- name: log_api_call
  endpoint:
    path: /events
    method: POST
- name: reviews
  endpoint:
    path: /items/reviews/
    method: PATCH
    data_selector: null
    params: {}
- name: actions
  endpoint:
    path: /v1/actions
    method: POST
    data_selector: ''
    params: {}
- name: users
  endpoint:
    path: /v1/users
    method: POST
    data_selector: ''
    params: {}
- name: users
  endpoint:
    path: /v1/users
    method: POST
    data_selector: null
    params: {}
- name: users_batch
  endpoint:
    path: /v1/users/batch
    method: POST
    data_selector: null
    params: {}
- name: companies
  endpoint:
    path: /v1/companies
    method: POST
    data_selector: ''
    params: {}
- name: companies_batch
  endpoint:
    path: /v1/companies/batch
    method: POST
    data_selector: ''
    params: {}
- name: billing_reports_properties
  endpoint:
    path: /v1/search/~/billing/reports/properties
    method: GET
    data_selector: ''
    params: {}
- name: billing_reports
  endpoint:
    path: /v1/~/billing/reports
    method: GET
    data_selector: ''
    params: {}
- name: billing_reports_metrics
  endpoint:
    path: /v1/~/billing/reports/metrics
    method: GET
    data_selector: ''
    params: {}
- name: update_companies_batch
  endpoint:
    path: /v1/search/~/companies/batch
    method: POST
    data_selector: ''
    params: {}
- name: get_company
  endpoint:
    path: /v1/search/~/companies/{id}
    method: GET
    data_selector: ''
    params: {}
- name: delete_company
  endpoint:
    path: /v1/search/~/companies/{id}
    method: DELETE
    data_selector: ''
    params: {}
- name: count_companies
  endpoint:
    path: /v1/search/~/count/companies
    method: POST
    data_selector: ''
    params:
      app_id: string
- name: billing_reports_metrics
  endpoint:
    path: /~/billing/reports/metrics
    method: GET
    data_selector: buckets
    params:
      from: string(date-time)
      to: string(date-time)
- name: billing_reports_properties
  endpoint:
    path: /~/billing/reports/properties/{field}
    method: GET
    data_selector: values
    params:
      from: string(date-time)
      to: string(date-time)
- name: update_companies
  endpoint:
    path: /search/~/companies
    method: POST
    data_selector: success
    params: {}
- name: count_companies
  endpoint:
    path: /search/~/count/companies
    method: POST
- name: search_company_metrics
  endpoint:
    path: /search/~/search/companymetrics/companies
    method: POST
- name: get_company_subscriptions
  endpoint:
    path: /search/~/companies/{id}/subscriptions
    method: GET
- name: create_subscription
  endpoint:
    path: /search/~/subscriptions
    method: POST
- name: subscriptions
  endpoint:
    path: /v1/search/~/subscriptions
    method: POST
    data_selector: body
- name: subscription
  endpoint:
    path: /v1/search/~/subscriptions
    method: POST
    data_selector: records
- name: subscriptions
  endpoint:
    path: /v1/search/~/subscriptions/batch
    method: POST
    data_selector: items
    params: {}
- name: subscriptions
  endpoint:
    path: /v1/search/~/subscriptions/batch
    method: POST
    data_selector: ''
    params: {}
- name: subscriptions_batch
  endpoint:
    path: /search/~/subscriptions/batch
    method: POST
    data_selector: items
    params: {}
- name: get_subscription
  endpoint:
    path: /search/~/subscriptions/{id}
    method: GET
    data_selector: subscription
    params: {}
- name: count_events
  endpoint:
    path: /search/~/count/events
    method: POST
    params:
      from: '2019-08-24T14:15:22Z'
      to: '2019-08-24T14:15:22Z'
- name: get_event
  endpoint:
    path: /search/~/events/{id}
    method: GET
    params:
      event_time: '2019-08-24T14:15:22Z'
- name: search_events
  endpoint:
    path: /search/~/search/events
    method: POST
    params:
      from: '2019-08-24T14:15:22Z'
      to: '2019-08-24T14:15:22Z'
- name: search_events
  endpoint:
    path: /v1/search/~/search/events
    method: POST
    params:
      from: string(date-time)
      to: string(date-time)
- name: search_public_workspaces
  endpoint:
    path: /v1/search/~/workspaces/{workspaceId}/search
    method: POST
    params:
      from: string(date-time)
      to: string(date-time)
      workspaceId: string
- name: count_users
  endpoint:
    path: /v1/search/~/count/users
    method: POST
    params:
      app_id: string
- name: usermetrics_users
  endpoint:
    path: /search/~/search/usermetrics/users
    method: POST
    data_selector: response
    params: {}
- name: update_users
  endpoint:
    path: /search/~/users
    method: POST
    data_selector: response
    params: {}
- name: batch_update_users
  endpoint:
    path: /search/~/users/batch
    method: POST
    data_selector: response
    params: {}
- name: update_users_batch
  endpoint:
    path: /v1/search/~/users/batch
    method: POST
    data_selector: ''
    params: {}
- name: get_user
  endpoint:
    path: /v1/search/~/users/{id}
    method: GET
    data_selector: ''
    params: {}
- name: delete_user
  endpoint:
    path: /v1/search/~/users/{id}
    method: DELETE
    data_selector: ''
    params: {}
- name: subscriptions
  endpoint:
    path: /v1/subscriptions/batch
    method: POST
    data_selector: ''
    params: {}
- name: companies
  endpoint:
    path: /v1/companies
    method: POST
    data_selector: company_id
    params: {}
- name: subscriptions
  endpoint:
    path: /v1/subscriptions/batch
    method: POST
    data_selector: subscription_id
    params: {}
- name: config
  endpoint:
    path: /config
    method: GET
    data_selector: sample_rate
    params: {}
- name: createEmailTemplate
  endpoint:
    path: /createEmailTemplate
    method: POST
- name: getEmailTemplates
  endpoint:
    path: /getEmailTemplates
    method: GET
- name: updateEmailTemplate
  endpoint:
    path: /updateEmailTemplate
    method: PUT
- name: getEmailTemplate
  endpoint:
    path: /getEmailTemplate
    method: GET
- name: deleteEmailTemplate
  endpoint:
    path: /deleteEmailTemplate
    method: DELETE
- name: findObjects
  endpoint:
    path: /findObjects
    method: GET
- name: createGovernanceRule
  endpoint:
    path: /createGovernanceRule
    method: POST
- name: getGovernanceRules
  endpoint:
    path: /getGovernanceRules
    method: GET
- name: updateGovernanceRule
  endpoint:
    path: /updateGovernanceRule
    method: PUT
- name: getGovernanceRule
  endpoint:
    path: /getGovernanceRule
    method: GET
- name: deleteGovernanceRule
  endpoint:
    path: /deleteGovernanceRule
    method: DELETE
- name: events
  endpoint:
    path: /search/~/search/events
    method: POST
    data_selector: hits.hits
    params:
      from: -1d
      to: now
- name: count_events
  endpoint:
    path: /search/~/count/events
    method: POST
    data_selector: hits.hits
    params:
      from: -1M
      to: now
- name: event
  endpoint:
    path: /v1/events/batch
    method: POST
    data_selector: '[]'
- name: events
  endpoint:
    path: /events
    method: POST
- name: users
  endpoint:
    path: /v1/users
    method: POST
    data_selector: ''
    params: {}
- name: users_batch
  endpoint:
    path: /v1/users/batch
    method: POST
    data_selector: ''
    params: {}
- name: actions
  endpoint:
    path: /v1/actions
    method: POST
    data_selector: action_name
- name: actions_batch
  endpoint:
    path: /v1/actions/batch
    method: POST
    data_selector: action_name
- name: users
  endpoint:
    path: /v1/users
    method: POST
    data_selector: user
- name: companies
  endpoint:
    path: /v1/companies
    method: POST
    data_selector: ''
    params: {}
- name: companies_batch
  endpoint:
    path: /v1/companies/batch
    method: POST
    data_selector: ''
    params: {}
- name: billing_reports_properties
  endpoint:
    path: /v1/search/~/billing/reports/properties
    method: GET
    data_selector: response
- name: getBillingReports
  endpoint:
    path: /getBillingReports
    method: GET
    data_selector: buckets
    params:
      from: query
      to: query
- name: MoesifPlan
  endpoint:
    path: /moesif/plans
    method: GET
    data_selector: plans
- name: ChargebeeBillingParams
  endpoint:
    path: /chargebee/billing
    method: GET
    data_selector: billing
- name: CreditBalanceMetric
  endpoint:
    path: /credit/balance
    method: GET
    data_selector: balance
- name: createEmailTemplate
  endpoint:
    path: /createEmailTemplate
    method: POST
- name: getEmailTemplates
  endpoint:
    path: /getEmailTemplates
    method: GET
- name: updateEmailTemplate
  endpoint:
    path: /updateEmailTemplate
    method: PUT
- name: getEmailTemplate
  endpoint:
    path: /getEmailTemplate
    method: GET
- name: deleteEmailTemplate
  endpoint:
    path: /deleteEmailTemplate
    method: DELETE
- name: findObjects
  endpoint:
    path: /findObjects
    method: GET
- name: createGovernanceRule
  endpoint:
    path: /createGovernanceRule
    method: POST
- name: getGovernanceRules
  endpoint:
    path: /getGovernanceRules
    method: GET
- name: updateGovernanceRule
  endpoint:
    path: /updateGovernanceRule
    method: PUT
- name: getGovernanceRule
  endpoint:
    path: /getGovernanceRule
    method: GET
- name: deleteGovernanceRule
  endpoint:
    path: /deleteGovernanceRule
    method: DELETE
- name: events
  endpoint:
    path: /search/~/search/events
    method: POST
    data_selector: hits.hits
    params:
      from: -1d
      to: now
- name: count_events
  endpoint:
    path: /search/~/count/events
    method: POST
    data_selector: count
    params:
      from: -1M
      to: now
- name: events
  endpoint:
    path: /events
    method: POST
    data_selector: events
- name: events_batch
  endpoint:
    path: /v1/events/batch
    method: POST
    data_selector: '[]'
- name: actions
  endpoint:
    path: /v1/actions
    method: POST
- name: actions_batch
  endpoint:
    path: /v1/actions/batch
    method: POST
- name: users
  endpoint:
    path: /v1/users
    method: POST
- name: users
  endpoint:
    path: /v1/users
    method: POST
    data_selector: null
    params: {}
- name: users_batch
  endpoint:
    path: /v1/users/batch
    method: POST
    data_selector: null
    params: {}
- name: companies
  endpoint:
    path: /v1/companies
    method: POST
    data_selector: companies
- name: companies_batch
  endpoint:
    path: /v1/companies/batch
    method: POST
    data_selector: companies
- name: billing_reports_properties
  endpoint:
    path: /v1/search/~/billing/reports/properties
    method: GET
    data_selector: properties
    params: {}
- name: billing_reports
  endpoint:
    path: /v1/~/billing/reports
    method: GET
    data_selector: reports
    params: {}
- name: billing_reports_metrics
  endpoint:
    path: /v1/~/billing/reports/metrics
    method: GET
    data_selector: metrics
    params: {}
- name: billing_reports_metrics
  endpoint:
    path: /~/billing/reports/metrics
    method: GET
    data_selector: buckets
    params:
      from: string(date-time)
      to: string(date-time)
- name: billing_reports_properties
  endpoint:
    path: /~/billing/reports/properties/{field}
    method: GET
    data_selector: values
    params:
      from: string(date-time)
      to: string(date-time)
- name: update_companies
  endpoint:
    path: /search/~/companies
    method: POST
    data_selector: success
    params: {}
- name: companies_batch_update
  endpoint:
    path: /search/~/companies/batch
    method: POST
    data_selector: ''
    params: {}
- name: get_company
  endpoint:
    path: /search/~/companies/{id}
    method: GET
    data_selector: ''
    params: {}
- name: delete_company
  endpoint:
    path: /search/~/companies/{id}
    method: DELETE
    data_selector: ''
    params: {}
- name: CreditBalanceMetric
  endpoint:
    path: /credit_balance
    method: GET
    data_selector: current_balance
- name: MoesifPlan
  endpoint:
    path: /moesif_plan
    method: GET
    data_selector: prices
- name: ChargebeeBillingParams
  endpoint:
    path: /billing_params
    method: GET
    data_selector: item_plan
- name: CreditBalanceMetric
  endpoint:
    path: /v1/credit_balance
    method: GET
    data_selector: balance
- name: batchCreateSubscriptions
  endpoint:
    path: /v1/subscriptions/batch_create
    method: POST
    data_selector: subscriptions
    params:
      starting_unit: required
      ending_unit: optional
      price: required
- name: MoesifPlan
  endpoint:
    path: /plans
    method: GET
    data_selector: prices
    params: {}
- name: ChargebeeBillingParams
  endpoint:
    path: /billing-params
    method: GET
    data_selector: item_plan
    params: {}
- name: searchEvents
  endpoint:
    path: /events/search
    method: POST
    data_selector: events
    params: {}
- name: events
  endpoint:
    path: /search/~/search/events
    method: POST
    data_selector: hits
    params:
      from: -1d
      to: now
- name: count_events
  endpoint:
    path: /search/~/count/events
    method: POST
    data_selector: hits
- name: getEmailTemplates
  endpoint:
    path: /getEmailTemplates
    method: GET
- name: createEmailTemplate
  endpoint:
    path: /createEmailTemplate
    method: POST
- name: updateEmailTemplate
  endpoint:
    path: /updateEmailTemplate
    method: PUT
- name: getEmailTemplate
  endpoint:
    path: /getEmailTemplate
    method: GET
- name: deleteEmailTemplate
  endpoint:
    path: /deleteEmailTemplate
    method: DELETE
- name: findObjects
  endpoint:
    path: /findObjects
    method: GET
- name: getGovernanceRules
  endpoint:
    path: /getGovernanceRules
    method: GET
- name: createGovernanceRule
  endpoint:
    path: /createGovernanceRule
    method: POST
- name: updateGovernanceRule
  endpoint:
    path: /updateGovernanceRule
    method: PUT
- name: getGovernanceRule
  endpoint:
    path: /getGovernanceRule
    method: GET
- name: deleteGovernanceRule
  endpoint:
    path: /deleteGovernanceRule
    method: DELETE
- name: events
  endpoint:
    path: /events
    method: POST
    data_selector: request
    params: {}
- name: event
  endpoint:
    path: /v1/events/batch
    method: POST
    data_selector: request
    params: {}
- name: users
  endpoint:
    path: /v1/users
    method: POST
    data_selector: ''
    params: {}
- name: users_batch
  endpoint:
    path: /v1/users/batch
    method: POST
    data_selector: ''
    params: {}
- name: actions
  endpoint:
    path: /v1/actions
    method: POST
    data_selector: action
    params: {}
- name: actions_batch
  endpoint:
    path: /v1/actions/batch
    method: POST
    data_selector: actions
    params: {}
- name: users
  endpoint:
    path: /v1/users
    method: POST
    data_selector: user
    params: {}
- name: companies
  endpoint:
    path: /v1/companies
    method: POST
    data_selector: ''
    params: {}
- name: companies_batch
  endpoint:
    path: /v1/companies/batch
    method: POST
    data_selector: ''
    params: {}
- name: billing_reports_properties
  endpoint:
    path: /v1/search/~/billing/reports/properties
    method: GET
    data_selector: null
    params: {}
- name: billing_reports
  endpoint:
    path: /v1/~/billing/reports
    method: GET
    data_selector: null
    params: {}
- name: billing_reports_metrics
  endpoint:
    path: /v1/~/billing/reports/metrics
    method: GET
    data_selector: null
    params:
      from: null
      to: null
- name: billing_reports_metrics
  endpoint:
    path: /~/billing/reports/metrics
    method: GET
    data_selector: buckets
    params:
      from: '2025-03-18T20:21:32.116Z'
      to: '2025-03-18T20:21:32.116Z'
- name: billing_reports_properties
  endpoint:
    path: /~/billing/reports/properties/{field}
    method: GET
    data_selector: values
    params:
      from: '2025-03-18T20:21:32.116Z'
      to: '2025-03-18T20:21:32.116Z'
- name: update_companies
  endpoint:
    path: /search/~/companies
    method: POST
    data_selector: success
    params: {}
- name: companies_batch_update
  endpoint:
    path: /search/~/companies/batch
    method: POST
    data_selector: null
    params: {}
- name: get_company
  endpoint:
    path: /search/~/companies/{id}
    method: GET
    data_selector: null
    params: {}
- name: delete_company
  endpoint:
    path: /search/~/companies/{id}
    method: DELETE
    data_selector: null
    params: {}
- name: count_companies
  endpoint:
    path: /search/~/count/companies
    method: POST
    data_selector: null
    params:
      app_id: string
- name: subscriptions
  endpoint:
    path: /v1/search/~/subscriptions
    method: POST
    data_selector: subscriptions
- name: count_companies
  endpoint:
    path: /search/~/count/companies
    method: POST
    data_selector: null
    params: {}
- name: search_company_metrics
  endpoint:
    path: /search/~/search/companymetrics/companies
    method: POST
    data_selector: null
    params: {}
- name: company_subscriptions
  endpoint:
    path: /search/~/companies/{id}/subscriptions
    method: GET
    data_selector: null
    params: {}
- name: create_subscription
  endpoint:
    path: /search/~/subscriptions
    method: POST
    data_selector: null
    params: {}
- name: subscription
  endpoint:
    path: /search/~/subscriptions
    method: POST
    data_selector: subscription
    params: {}
- name: subscriptions
  endpoint:
    path: /v1/search/~/subscriptions/batch
    method: POST
    data_selector: subscriptions
    params: {}
- name: subscriptions_batch
  endpoint:
    path: /v1/search/~/subscriptions/batch
    method: POST
    data_selector: data
    params: {}
- name: subscriptions_batch
  endpoint:
    path: /search/~/subscriptions/batch
    method: POST
    data_selector: items
    params: {}
- name: subscription
  endpoint:
    path: /search/~/subscriptions/{id}
    method: GET
    data_selector: items
    params: {}
- name: count_events
  endpoint:
    path: /v1/search/~/count/events
    method: POST
    params:
      from: '2019-08-24T14:15:22Z'
      to: '2019-08-24T14:15:22Z'
- name: get_event
  endpoint:
    path: /v1/search/~/events/{id}
    method: GET
    params:
      event_time: '2019-08-24T14:15:22Z'
- name: search_events
  endpoint:
    path: /v1/search/~/search/events
    method: POST
    params:
      from: '2019-08-24T14:15:22Z'
      to: '2019-08-24T14:15:22Z'
- name: search_events
  endpoint:
    path: /search/~/search/events
    method: POST
    data_selector: hits.hits
    params:
      from: string(date-time)
      to: string(date-time)
- name: search_public_workspaces
  endpoint:
    path: /search/~/workspaces/{workspaceId}/search
    method: POST
    data_selector: hits.hits
    params:
      from: string(date-time)
      to: string(date-time)
- name: item_plan
  endpoint:
    path: /item_plan
    method: GET
    data_selector: records
- name: item_price
  endpoint:
    path: /item_price
    method: GET
    data_selector: records
- name: item_prices
  endpoint:
    path: /item_prices
    method: GET
    data_selector: records
- name: billing_reports
  endpoint:
    path: /management-api/billing-reports
    method: GET
    data_selector: reports
- name: EmailTemplate
  endpoint:
    path: /createEmailTemplate
    method: POST
- name: EmailTemplates
  endpoint:
    path: /getEmailTemplates
    method: GET
- name: EmailTemplateUpdate
  endpoint:
    path: /updateEmailTemplate
    method: PUT
- name: SingleEmailTemplate
  endpoint:
    path: /getEmailTemplate
    method: GET
- name: DeleteEmailTemplate
  endpoint:
    path: /deleteEmailTemplate
    method: DELETE
- name: events
  endpoint:
    path: /events
    method: POST
    data_selector: event
    params: {}
- name: events
  endpoint:
    path: /search/~/search/events
    method: POST
    data_selector: hits.hits
    params: {}
- name: count
  endpoint:
    path: /search/~/count/events
    method: POST
    data_selector: hits.hits
    params: {}
- name: reviews
  endpoint:
    path: /items/reviews/
    method: PATCH
    data_selector: body
    params: {}
- name: actions
  endpoint:
    path: /v1/actions
    method: POST
- name: actions_batch
  endpoint:
    path: /v1/actions/batch
    method: POST
- name: users
  endpoint:
    path: /v1/users
    method: POST
- name: users
  endpoint:
    path: /v1/users
    method: POST
    data_selector: null
    params: {}
- name: users_batch
  endpoint:
    path: /v1/users/batch
    method: POST
    data_selector: null
    params: {}
- name: companies
  endpoint:
    path: /v1/companies
    method: POST
    data_selector: ''
    params: {}
- name: companies_batch
  endpoint:
    path: /v1/companies/batch
    method: POST
    data_selector: ''
    params: {}
- name: billing_reports_properties
  endpoint:
    path: /search/~/billing/reports/properties
    method: GET
- name: billing_reports
  endpoint:
    path: /~/billing/reports
    method: GET
- name: billing_reports_metrics
  endpoint:
    path: /~/billing/reports/metrics
    method: GET
- name: billing_reports_metrics
  endpoint:
    path: /~/billing/reports/metrics
    method: GET
    data_selector: buckets
    params:
      from: string(date-time)
      to: string(date-time)
- name: billing_reports_properties
  endpoint:
    path: /~/billing/reports/properties/{field}
    method: GET
    data_selector: values
    params:
      from: string(date-time)
      to: string(date-time)
- name: update_companies
  endpoint:
    path: /search/~/companies
    method: POST
    data_selector: success
    params: {}
- name: update_companies
  endpoint:
    path: /search/~/companies/batch
    method: POST
    data_selector: ''
    params: {}
- name: get_company
  endpoint:
    path: /search/~/companies/{id}
    method: GET
    data_selector: ''
    params: {}
- name: delete_company
  endpoint:
    path: /search/~/companies/{id}
    method: DELETE
    data_selector: ''
    params: {}
- name: count_companies
  endpoint:
    path: /search/~/count/companies
    method: POST
    data_selector: ''
    params:
      app_id: string
- name: count_companies
  endpoint:
    path: /search/~/count/companies
    method: POST
    data_selector: null
- name: search_company_metrics
  endpoint:
    path: /search/~/search/companymetrics/companies
    method: POST
    data_selector: null
- name: get_company_subscriptions
  endpoint:
    path: /search/~/companies/{id}/subscriptions
    method: GET
    data_selector: null
- name: create_subscription
  endpoint:
    path: /search/~/subscriptions
    method: POST
    data_selector: null
- name: subscriptions
  endpoint:
    path: /search/~/subscriptions
    method: POST
    data_selector: ''
    params: {}
- name: subscription
  endpoint:
    path: /search/~/subscriptions
    method: POST
    data_selector: records
- name: batchCreateSubscriptions
  endpoint:
    path: /batch
    method: POST
    data_selector: items
- name: subscriptions
  endpoint:
    path: /v1/search/~/subscriptions/batch
    method: POST
    data_selector: result
    params: {}
- name: subscriptions_batch
  endpoint:
    path: /search/~/subscriptions/batch
    method: POST
    data_selector: items
- name: get_subscription
  endpoint:
    path: /search/~/subscriptions/{id}
    method: GET
    data_selector: subscription
- name: count_events
  endpoint:
    path: /search/~/count/events
    method: POST
    params:
      from: '2019-08-24T14:15:22Z'
      to: '2019-08-24T14:15:22Z'
- name: get_event
  endpoint:
    path: /search/~/events/{id}
    method: GET
    params:
      event_time: '2019-08-24T14:15:22Z'
- name: search_events
  endpoint:
    path: /search/~/search/events
    method: POST
    params:
      from: '2019-08-24T14:15:22Z'
      to: '2019-08-24T14:15:22Z'
- name: search_events
  endpoint:
    path: /search/~/search/events
    method: POST
    data_selector: hits
    params:
      from: string(date-time)
      to: string(date-time)
- name: search_workspace
  endpoint:
    path: /search/~/workspaces/{workspaceId}/search
    method: POST
    data_selector: hits
    params:
      from: string(date-time)
      to: string(date-time)
      workspaceId: string
- name: count_users
  endpoint:
    path: /search/~/count/users
    method: POST
    data_selector: hits
    params:
      app_id: string
- name: CreditBalance
  endpoint:
    path: /credit_balance
    method: GET
    data_selector: current_balance
- name: email_templates
  endpoint:
    path: /email/templates
    method: GET
    data_selector: templates
- name: governance_rules
  endpoint:
    path: /governance/rules
    method: GET
    data_selector: rules
- name: billing_reports
  endpoint:
    path: /billing/reports
    method: GET
    data_selector: records
- name: users
  endpoint:
    path: /users
    method: GET
    data_selector: records
- name: events
  endpoint:
    path: /events
    method: POST
- name: events
  endpoint:
    path: /search/~/search/events
    method: POST
    data_selector: hits.hits
    params:
      from: -7d
      to: now
- name: count
  endpoint:
    path: /search/~/count/events
    method: POST
    data_selector: hits.hits
- name: event
  endpoint:
    path: /v1/events/batch
    method: POST
    data_selector: '[]'
- name: actions
  endpoint:
    path: /v1/actions
    method: POST
    data_selector: action
    params: {}
- name: actions_batch
  endpoint:
    path: /v1/actions/batch
    method: POST
    data_selector: actions
    params: {}
- name: users
  endpoint:
    path: /v1/users
    method: POST
    data_selector: user
    params: {}
- name: users
  endpoint:
    path: /v1/users
    method: POST
    data_selector: ''
    params: {}
- name: users_batch
  endpoint:
    path: /v1/users/batch
    method: POST
    data_selector: ''
    params: {}
- name: update_users_batch
  endpoint:
    path: /v1/users/batch
    method: POST
    data_selector: users
    params: {}
- name: update_company
  endpoint:
    path: /v1/companies
    method: POST
    data_selector: company
    params: {}
- name: update_companies_batch
  endpoint:
    path: /v1/companies/batch
    method: POST
    data_selector: companies
    params: {}
- name: billing_reports_properties
  endpoint:
    path: /v1/search/~/billing/reports/properties
    method: GET
    data_selector: records
- name: billing_reports
  endpoint:
    path: /v1/~/billing/reports
    method: GET
    data_selector: records
- name: billing_reports_metrics
  endpoint:
    path: /~/billing/reports/metrics
    method: GET
    data_selector: buckets
    params:
      from: string(date-time)
      to: string(date-time)
- name: billing_reports_properties
  endpoint:
    path: /~/billing/reports/properties/{field}
    method: GET
    data_selector: values
    params:
      from: string(date-time)
      to: string(date-time)
- name: update_companies
  endpoint:
    path: /search/~/companies
    method: POST
    data_selector: success
    params: {}
- name: batch_update_companies
  endpoint:
    path: /search/~/companies/batch
    method: POST
    data_selector: body
- name: get_company
  endpoint:
    path: /search/~/companies/{id}
    method: GET
    data_selector: body
- name: delete_company
  endpoint:
    path: /search/~/companies/{id}
    method: DELETE
    data_selector: body
- name: count_companies
  endpoint:
    path: /search/~/count/companies
    method: POST
    data_selector: body
- name: subscriptions
  endpoint:
    path: /search/~/subscriptions
    method: POST
    data_selector: results
- name: count_companies
  endpoint:
    path: /search/~/count/companies
    method: POST
    data_selector: None
- name: search_company_metrics
  endpoint:
    path: /search/~/search/companymetrics/companies
    method: POST
    data_selector: None
- name: get_company_subscriptions
  endpoint:
    path: /search/~/companies/{id}/subscriptions
    method: GET
    data_selector: None
- name: create_subscription
  endpoint:
    path: /search/~/subscriptions
    method: POST
    data_selector: None
- name: subscriptions
  endpoint:
    path: /search/~/subscriptions
    method: POST
    data_selector: body
- name: subscriptions
  endpoint:
    path: /v1/search/~/subscriptions/batch
    method: POST
    data_selector: subscription
    params: {}
- name: subscriptions_batch
  endpoint:
    path: /~/subscriptions/batch
    method: POST
    data_selector: response
    params: {}
- name: subscriptions_batch
  endpoint:
    path: /search/~/subscriptions/batch
    method: POST
- name: get_subscription
  endpoint:
    path: /search/~/subscriptions/{id}
    method: GET
- name: count_events
  endpoint:
    path: /search/~/count/events
    method: POST
    params:
      from: '2019-08-24T14:15:22Z'
      to: '2019-08-24T14:15:22Z'
- name: get_event
  endpoint:
    path: /search/~/events/{id}
    method: GET
    params:
      event_time: '2019-08-24T14:15:22Z'
- name: search_events
  endpoint:
    path: /search/~/search/events
    method: POST
    params:
      from: '2019-08-24T14:15:22Z'
      to: '2019-08-24T14:15:22Z'
- name: search_events
  endpoint:
    path: /search/~/search/events
    method: POST
    data_selector: hits
    params:
      from: string(date-time)
      to: string(date-time)
- name: search_public_workspaces
  endpoint:
    path: /search/~/workspaces/{workspaceId}/search
    method: POST
    data_selector: hits
    params:
      from: string(date-time)
      to: string(date-time)
      workspaceId: string
- name: count_users
  endpoint:
    path: /search/~/count/users
    method: POST
    data_selector: hits
    params:
      app_id: string
- name: usermetrics_users
  endpoint:
    path: /v1/search/~/search/usermetrics/users
    method: POST
- name: users
  endpoint:
    path: /v1/search/~/users
    method: POST
- name: batchUpdateUsers
  endpoint:
    path: /v1/search/~/users/batch
    method: POST
- name: update_users_batch
  endpoint:
    path: /v1/search/~/users/batch
    method: POST
    data_selector: records
- name: get_user
  endpoint:
    path: /v1/search/~/users/{id}
    method: GET
    data_selector: _source
- name: delete_user
  endpoint:
    path: /v1/search/~/users/{id}
    method: DELETE
- name: ChargebeeBillingParams
  endpoint:
    path: /chargebee/billing_params
    method: GET
- name: CreditBalanceMetric
  endpoint:
    path: /credit_balance
    method: GET
- name: item_plan
  endpoint:
    path: /item_plan
    method: GET
    data_selector: item_plan
- name: item_price
  endpoint:
    path: /item_price
    method: GET
    data_selector: item_price
- name: item_prices
  endpoint:
    path: /item_prices
    method: GET
    data_selector: item_prices
- name: reporting
  endpoint:
    path: /reporting
    method: GET
    data_selector: reporting
- name: events
  endpoint:
    path: /search/~/search/events
    method: POST
    data_selector: hits.hits
    params:
      from: -1d
      to: now
- name: count_events
  endpoint:
    path: /search/~/count/events
    method: POST
    data_selector: hits.hits
    params:
      from: -1M
      to: now
- name: createEmailTemplate
  endpoint:
    path: /api/email-templates/create
    method: POST
- name: getEmailTemplates
  endpoint:
    path: /api/email-templates
    method: GET
- name: updateEmailTemplate
  endpoint:
    path: /api/email-templates/update
    method: PUT
- name: getEmailTemplate
  endpoint:
    path: /api/email-templates/{id}
    method: GET
- name: deleteEmailTemplate
  endpoint:
    path: /api/email-templates/delete/{id}
    method: DELETE
- name: findObjects
  endpoint:
    path: /api/find-objects
    method: GET
- name: getGovernanceRules
  endpoint:
    path: /api/governance-rules
    method: GET
- name: createGovernanceRule
  endpoint:
    path: /api/governance-rules/create
    method: POST
- name: updateGovernanceRule
  endpoint:
    path: /api/governance-rules/update
    method: PUT
- name: getGovernanceRule
  endpoint:
    path: /api/governance-rules/{id}
    method: GET
- name: deleteGovernanceRule
  endpoint:
    path: /api/governance-rules/delete/{id}
    method: DELETE
- name: events
  endpoint:
    path: /events
    method: POST
    data_selector: request
    params: {}
- name: event
  endpoint:
    path: /events/batch
    method: POST
    data_selector: '[]'
- name: actions
  endpoint:
    path: /v1/actions
    method: POST
    data_selector: action
    params: {}
- name: actions_batch
  endpoint:
    path: /v1/actions/batch
    method: POST
    data_selector: actions
    params: {}
- name: users
  endpoint:
    path: /v1/users
    method: POST
    data_selector: user
    params: {}
- name: users
  endpoint:
    path: /v1/users
    method: POST
    data_selector: ''
    params: {}
- name: users_batch
  endpoint:
    path: /v1/users/batch
    method: POST
    data_selector: ''
    params: {}
- name: companies
  endpoint:
    path: /v1/companies
    method: POST
    data_selector: ''
    params: {}
- name: companies_batch
  endpoint:
    path: /v1/companies/batch
    method: POST
    data_selector: ''
    params: {}
- name: billing_reports_properties
  endpoint:
    path: /v1/search/~/billing/reports/properties
    method: GET
- name: billing_reports
  endpoint:
    path: /v1/~/billing/reports
    method: GET
- name: billing_reports_metrics
  endpoint:
    path: /v1/~/billing/reports/metrics
    method: GET
- name: batch_companies
  endpoint:
    path: /v1/search/~/companies/batch
    method: POST
    data_selector: ''
    params: {}
- name: get_company
  endpoint:
    path: /v1/search/~/companies/{id}
    method: GET
    data_selector: ''
    params: {}
- name: delete_company
  endpoint:
    path: /v1/search/~/companies/{id}
    method: DELETE
    data_selector: ''
    params: {}
- name: count_companies
  endpoint:
    path: /v1/search/~/count/companies
    method: POST
    data_selector: ''
    params:
      app_id: string
- name: billing_reports_metrics
  endpoint:
    path: /~/billing/reports/metrics
    method: GET
    data_selector: buckets
    params:
      from: string(date-time)
      to: string(date-time)
- name: billing_reports_properties
  endpoint:
    path: /~/billing/reports/properties/{field}
    method: GET
    data_selector: values
    params:
      from: string(date-time)
      to: string(date-time)
- name: update_companies
  endpoint:
    path: /search/~/companies
    method: POST
    data_selector: ''
    params: {}
- name: subscriptions
  endpoint:
    path: /v1/search/~/subscriptions
    method: POST
    data_selector: body
- name: count_companies
  endpoint:
    path: /search/~/count/companies
    method: POST
    data_selector: none
- name: search_company_metrics
  endpoint:
    path: /search/~/search/companymetrics/companies
    method: POST
    data_selector: none
- name: company_subscriptions
  endpoint:
    path: /search/~/companies/{id}/subscriptions
    method: GET
    data_selector: none
- name: create_subscription
  endpoint:
    path: /search/~/subscriptions
    method: POST
    data_selector: none
- name: subscriptions
  endpoint:
    path: /v1/search/~/subscriptions
    method: POST
    data_selector: null
    params: {}
- name: subscriptions
  endpoint:
    path: /v1/search/~/subscriptions/batch
    method: POST
    data_selector: body
    params: {}
- name: subscriptions
  endpoint:
    path: /v1/search/~/subscriptions/batch
    method: POST
    data_selector: null
    params: {}
- name: subscriptions_batch
  endpoint:
    path: /search/~/subscriptions/batch
    method: POST
    data_selector: items
    params: {}
- name: get_subscription
  endpoint:
    path: /search/~/subscriptions/{id}
    method: GET
    data_selector: ''
    params: {}
- name: count_events
  endpoint:
    path: /v1/search/~/count/events
    method: POST
    params:
      from: string(date-time)
      to: string(date-time)
- name: get_event
  endpoint:
    path: /v1/search/~/events/{id}
    method: GET
    params:
      event_time: string(date-time)
- name: search_events
  endpoint:
    path: /v1/search/~/search/events
    method: POST
    params:
      from: string(date-time)
      to: string(date-time)
- name: search_events
  endpoint:
    path: /search/~/search/events
    method: POST
    data_selector: result.hits
    params:
      from: string(date-time)
      to: string(date-time)
- name: search_workspace_events
  endpoint:
    path: /search/~/workspaces/{workspaceId}/search
    method: POST
    data_selector: result.hits
    params:
      from: string(date-time)
      to: string(date-time)
      workspaceId: string
- name: count_users
  endpoint:
    path: /search/~/count/users
    method: POST
    data_selector: result
    params:
      app_id: string
- name: user_metrics
  endpoint:
    path: /v1/search/~/search/usermetrics/users
    method: POST
    data_selector: null
    params: {}
- name: update_user
  endpoint:
    path: /v1/search/~/users
    method: POST
    data_selector: null
    params: {}
- name: batch_update_users
  endpoint:
    path: /v1/search/~/users/batch
    method: POST
    data_selector: null
    params: {}
- name: update_user_batch
  endpoint:
    path: /v1/search/~/users/batch
    method: POST
    data_selector: ''
    params: {}
- name: get_user
  endpoint:
    path: /v1/search/~/users/{id}
    method: GET
    data_selector: ''
    params: {}
- name: delete_user
  endpoint:
    path: /v1/search/~/users/{id}
    method: DELETE
    data_selector: ''
    params: {}
- name: get_properties
  endpoint:
    path: /v1/search/~/mappings/users/properties
    method: GET
    data_selector: ''
    params:
      app_id: string
- name: user_property_mappings
  endpoint:
    path: /v1/search/~/mappings/users/properties
    method: GET
    data_selector: response
    params:
      app_id: string
- name: event_request_body_property_mappings
  endpoint:
    path: /v1/search/~/mappings/events/request/body/properties
    method: GET
    data_selector: response
    params:
      app_id: string
      from: string(date-time)
      to: string(date-time)
- name: event_response_body_property_mappings
  endpoint:
    path: /v1/search/~/mappings/events/response/body/properties
    method: GET
    data_selector: response
    params:
      app_id: string
      from: string(date-time)
      to: string(date-time)
- name: workspace_access_token
  endpoint:
    path: /v1/workspaces/access_token
    method: GET
    data_selector: response
    params: {}
- name: public_workspace
  endpoint:
    path: /v1/workspaces/public/{id}
    method: GET
    data_selector: response
    params: {}
- name: workspace
  endpoint:
    path: /workspaces/public/{id}
    method: GET
    data_selector: body
    params: {}
- name: create_workspace
  endpoint:
    path: /~/workspaces
    method: POST
    data_selector: body
    params: {}
- name: workspaces
  endpoint:
    path: /~/workspaces
    method: POST
    data_selector: response
    params: {}
- name: CreditBalanceMetric
  endpoint:
    path: /credit_balance
    method: GET
    data_selector: current_balance
    params: {}
- name: item_plan
  endpoint:
    path: /item_plan
    method: GET
    data_selector: item_plan
    params: {}
- name: item_price
  endpoint:
    path: /item_price
    method: GET
    data_selector: item_price
    params: {}
- name: item_prices
  endpoint:
    path: /item_prices
    method: GET
    data_selector: item_prices
    params: {}
- name: credit_balance_metric
  endpoint:
    path: /credit_balance_metric
    method: GET
    data_selector: credit_balance_metric
    params: {}
- name: events
  endpoint:
    path: /search/~/search/events
    method: POST
    data_selector: hits.hits
    params: {}
- name: count_events
  endpoint:
    path: /search/~/count/events
    method: POST
    data_selector: hits.hits
    params: {}
- name: createEmailTemplate
  endpoint:
    path: /createEmailTemplate
    method: POST
- name: getEmailTemplates
  endpoint:
    path: /getEmailTemplates
    method: GET
- name: updateEmailTemplate
  endpoint:
    path: /updateEmailTemplate
    method: PUT
- name: getEmailTemplate
  endpoint:
    path: /getEmailTemplate
    method: GET
- name: deleteEmailTemplate
  endpoint:
    path: /deleteEmailTemplate
    method: DELETE
- name: findObjects
  endpoint:
    path: /findObjects
    method: GET
- name: createGovernanceRule
  endpoint:
    path: /createGovernanceRule
    method: POST
- name: getGovernanceRules
  endpoint:
    path: /getGovernanceRules
    method: GET
- name: updateGovernanceRule
  endpoint:
    path: /updateGovernanceRule
    method: PUT
- name: getGovernanceRule
  endpoint:
    path: /getGovernanceRule
    method: GET
- name: deleteGovernanceRule
  endpoint:
    path: /deleteGovernanceRule
    method: DELETE
- name: events
  endpoint:
    path: /events
    method: POST
    data_selector: request
    params: {}
- name: reviews
  endpoint:
    path: /items/reviews/
    method: PATCH
    data_selector: items
- name: users
  endpoint:
    path: /v1/users
    method: POST
    data_selector: users
- name: users_batch
  endpoint:
    path: /v1/users/batch
    method: POST
    data_selector: users
- name: actions
  endpoint:
    path: /v1/actions
    method: POST
    data_selector: action
    params: {}
- name: actions_batch
  endpoint:
    path: /v1/actions/batch
    method: POST
    data_selector: actions
    params: {}
- name: users
  endpoint:
    path: /v1/users
    method: POST
    data_selector: user
    params: {}
- name: update_company
  endpoint:
    path: /v1/companies
    method: POST
    data_selector: company
    params: {}
- name: update_companies_batch
  endpoint:
    path: /v1/companies/batch
    method: POST
    data_selector: companies
    params: {}
- name: billing_reports_properties
  endpoint:
    path: /v1/search/~/billing/reports/properties
    method: GET
    data_selector: null
    params: {}
- name: billing_reports
  endpoint:
    path: /v1/~/billing/reports
    method: GET
    data_selector: null
    params: {}
- name: billing_reports_metrics
  endpoint:
    path: /v1/~/billing/reports/metrics
    method: GET
    data_selector: null
    params: {}
- name: billing_reports_metrics
  endpoint:
    path: /~/billing/reports/metrics
    method: GET
    data_selector: buckets
    params:
      from: string(date-time)
      to: string(date-time)
- name: billing_reports_properties
  endpoint:
    path: /~/billing/reports/properties/{field}
    method: GET
    data_selector: values
    params:
      from: string(date-time)
      to: string(date-time)
- name: update_companies
  endpoint:
    path: /search/~/companies
    method: POST
    data_selector: success
    params: {}
- name: companies_batch
  endpoint:
    path: /v1/search/~/companies/batch
    method: POST
- name: company
  endpoint:
    path: /v1/search/~/companies/{id}
    method: GET
- name: delete_company
  endpoint:
    path: /v1/search/~/companies/{id}
    method: DELETE
- name: count_companies
  endpoint:
    path: /v1/search/~/count/companies
    method: POST
- name: count_companies
  endpoint:
    path: /search/~/count/companies
    method: POST
    data_selector: None
- name: search_company_metrics
  endpoint:
    path: /search/~/search/companymetrics/companies
    method: POST
    data_selector: None
- name: get_company_subscriptions
  endpoint:
    path: /search/~/companies/{id}/subscriptions
    method: GET
    data_selector: None
- name: subscriptions
  endpoint:
    path: /v1/search/~/subscriptions
    method: POST
    data_selector: body
- name: subscriptions
  endpoint:
    path: /v1/search/~/subscriptions
    method: POST
    data_selector: subscriptions
- name: subscriptions
  endpoint:
    path: /v1/search/~/subscriptions/batch
    method: POST
    data_selector: items
- name: subscriptions_batch
  endpoint:
    path: /v1/search/~/subscriptions/batch
    method: POST
    data_selector: null
    params: {}
- name: subscriptions_batch
  endpoint:
    path: /search/~/subscriptions/batch
    method: POST
    data_selector: items
    params: {}
- name: get_subscription
  endpoint:
    path: /search/~/subscriptions/{id}
    method: GET
    data_selector: subscription
    params: {}
- name: count_events
  endpoint:
    path: /v1/search/~/count/events
    method: POST
    params:
      from: '2019-08-24T14:15:22Z'
      to: '2019-08-24T14:15:22Z'
- name: get_event
  endpoint:
    path: /v1/search/~/events/{id}
    method: GET
    params:
      event_time: '2019-08-24T14:15:22Z'
- name: search_events
  endpoint:
    path: /search/~/search/events
    method: POST
    data_selector: hits
    params:
      from: string(date-time)
      to: string(date-time)
- name: search_users
  endpoint:
    path: /search/~/count/users
    method: POST
    data_selector: hits
    params:
      app_id: string
- name: usermetrics
  endpoint:
    path: /v1/search/~/search/usermetrics/users
    method: POST
    data_selector: null
    params: {}
- name: updateUser
  endpoint:
    path: /v1/search/~/users
    method: POST
    data_selector: null
    params: {}
- name: batchUpdateUsers
  endpoint:
    path: /v1/search/~/users/batch
    method: POST
    data_selector: null
    params: {}
- name: update_users_batch
  endpoint:
    path: /search/~/users/batch
    method: POST
    data_selector: ''
    params: {}
- name: get_user
  endpoint:
    path: /search/~/users/{id}
    method: GET
    data_selector: ''
    params: {}
- name: delete_user
  endpoint:
    path: /search/~/users/{id}
    method: DELETE
    data_selector: ''
    params: {}
- name: get_properties
  endpoint:
    path: /search/~/mappings/users/properties
    method: GET
    data_selector: ''
    params:
      app_id: string
- name: user_property_mappings
  endpoint:
    path: /v1/search/~/mappings/users/properties
    method: GET
    data_selector: null
    params:
      app_id: string
- name: event_request_body_properties
  endpoint:
    path: /v1/search/~/mappings/events/request/body/properties
    method: GET
    data_selector: null
    params:
      app_id: string
      from: string(date-time)
      to: string(date-time)
- name: event_response_body_properties
  endpoint:
    path: /v1/search/~/mappings/events/response/body/properties
    method: GET
    data_selector: null
    params:
      app_id: string
      from: string(date-time)
      to: string(date-time)
- name: workspace_access_token
  endpoint:
    path: /v1/workspaces/access_token
    method: GET
    data_selector: null
    params: {}
- name: workspaces
  endpoint:
    path: /v1/workspaces/public/{id}
    method: GET
    data_selector: records
    params: {}
- name: create_workspace
  endpoint:
    path: /v1/~/workspaces
    method: POST
    data_selector: result
    params: {}
- name: workspaces
  endpoint:
    path: /~/workspaces
    method: POST
    data_selector: none
    params: {}
- name: workspace_templates
  endpoint:
    path: /~/workspaces/templates
    method: GET
    data_selector: none
    params: {}
- name: workspace_templates
  endpoint:
    path: /~/workspaces/templates
    method: GET
    data_selector: anonymous
- name: update_workspace
  endpoint:
    path: /~/workspaces/{id}
    method: POST
    data_selector: anonymous
- name: workspace
  endpoint:
    path: /~/workspaces/{id}
    method: POST
    data_selector: ''
    params:
      id: path
- name: workspace
  endpoint:
    path: /~/workspaces/{id}
    method: GET
    data_selector: ''
    params:
      id: path
- name: CreditBalanceMetric
  endpoint:
    path: /credit_balance_metric
    method: GET
    data_selector: current_balance
- name: createComment
  endpoint:
    path: /create_comment
    method: POST
    data_selector: comment
    params:
      starting_unit: required
      price: required
- name: getComments
  endpoint:
    path: /get_comments
    method: GET
    data_selector: comments
    params:
      starting_unit: required
- name: getEmailTemplates
  endpoint:
    path: /getEmailTemplates
    method: GET
- name: getGovernanceRules
  endpoint:
    path: /getGovernanceRules
    method: GET
- name: events
  endpoint:
    path: /events
    method: POST
    data_selector: null
    params: {}
- name: search_events
  endpoint:
    path: /search/~/search/events
    method: POST
    data_selector: hits.hits
    params:
      from: -1d
      to: now
- name: search_count
  endpoint:
    path: /search/~/count/events
    method: POST
    data_selector: hits.hits
    params:
      from: -1M
      to: now
- name: events
  endpoint:
    path: /v1/events/batch
    method: POST
    data_selector: events
    params: {}
- name: actions
  endpoint:
    path: /v1/actions
    method: POST
    data_selector: ''
    params: {}
- name: actions_batch
  endpoint:
    path: /v1/actions/batch
    method: POST
    data_selector: ''
    params: {}
- name: users
  endpoint:
    path: /v1/users
    method: POST
    data_selector: ''
    params: {}
- name: users
  endpoint:
    path: /v1/users
    method: POST
    data_selector: null
    params: {}
- name: users_batch
  endpoint:
    path: /v1/users/batch
    method: POST
    data_selector: null
    params: {}
- name: companies
  endpoint:
    path: /v1/companies
    method: POST
    data_selector: companies
- name: companies_batch
  endpoint:
    path: /v1/companies/batch
    method: POST
    data_selector: companies_batch
- name: billing_reports_properties
  endpoint:
    path: /v1/search/~/billing/reports/properties
    method: GET
    data_selector: records
- name: billing_reports
  endpoint:
    path: /v1/~/billing/reports
    method: GET
    data_selector: records
- name: billing_reports_metrics
  endpoint:
    path: /~/billing/reports/metrics
    method: GET
    data_selector: buckets
    params:
      from: string(date-time)
      to: string(date-time)
- name: billing_reports_properties
  endpoint:
    path: /~/billing/reports/properties/{field}
    method: GET
    data_selector: values
    params:
      from: string(date-time)
      to: string(date-time)
- name: update_companies
  endpoint:
    path: /search/~/companies
    method: POST
    data_selector: null
    params: {}
- name: update_companies_batch
  endpoint:
    path: /search/~/companies/batch
    method: POST
    data_selector: ''
    params: {}
- name: get_company
  endpoint:
    path: /search/~/companies/{id}
    method: GET
    data_selector: ''
    params: {}
- name: delete_company
  endpoint:
    path: /search/~/companies/{id}
    method: DELETE
    data_selector: ''
    params: {}
- name: count_companies
  endpoint:
    path: /search/~/count/companies
    method: POST
    data_selector: ''
    params:
      app_id: string
- name: count_companies
  endpoint:
    path: /search/~/count/companies
    method: POST
    data_selector: none
- name: search_company_metrics
  endpoint:
    path: /search/~/search/companymetrics/companies
    method: POST
    data_selector: none
- name: get_company_subscriptions
  endpoint:
    path: /search/~/companies/{id}/subscriptions
    method: GET
    data_selector: none
- name: subscriptions
  endpoint:
    path: /v1/search/~/subscriptions
    method: POST
    data_selector: body
- name: subscription
  endpoint:
    path: /search/~/subscriptions
    method: POST
    data_selector: records
- name: subscriptions
  endpoint:
    path: /v1/search/~/subscriptions/batch
    method: POST
    data_selector: subscription
    params: {}
- name: subscriptions_batch
  endpoint:
    path: /~/subscriptions/batch
    method: POST
- name: subscriptions_batch
  endpoint:
    path: /search/~/subscriptions/batch
    method: POST
    data_selector: items
    params: {}
- name: get_subscription
  endpoint:
    path: /search/~/subscriptions/{id}
    method: GET
    data_selector: subscription
    params: {}
- name: count_events
  endpoint:
    path: /v1/search/~/count/events
    method: POST
    params:
      from: '2019-08-24T14:15:22Z'
      to: '2019-08-24T14:15:22Z'
- name: get_event
  endpoint:
    path: /v1/search/~/events/{id}
    method: GET
    params:
      event_time: '2019-08-24T14:15:22Z'
- name: search_events
  endpoint:
    path: /v1/search/~/search/events
    method: POST
    params:
      from: '2019-08-24T14:15:22Z'
      to: '2019-08-24T14:15:22Z'
- name: search_events
  endpoint:
    path: /search/~/search/events
    method: POST
    data_selector: hits
    params:
      from: string(date-time)
      to: string(date-time)
- name: search_public_workspaces
  endpoint:
    path: /search/~/workspaces/{workspaceId}/search
    method: POST
    data_selector: hits
    params:
      from: string(date-time)
      to: string(date-time)
      workspaceId: string
- name: count_users
  endpoint:
    path: /search/~/count/users
    method: POST
    data_selector: hits
    params:
      app_id: string
- name: usermetrics_users
  endpoint:
    path: /v1/search/~/search/usermetrics/users
    method: POST
- name: update_users
  endpoint:
    path: /v1/search/~/users
    method: POST
- name: batch_update_users
  endpoint:
    path: /v1/search/~/users/batch
    method: POST
- name: users_batch_update
  endpoint:
    path: /v1/search/~/users/batch
    method: POST
    data_selector: body
    params: {}
- name: get_user
  endpoint:
    path: /v1/search/~/users/{id}
    method: GET
    data_selector: _source
    params: {}
- name: delete_user
  endpoint:
    path: /v1/search/~/users/{id}
    method: DELETE
    data_selector: null
    params: {}
- name: workspace
  endpoint:
    path: /v1/workspaces/public/{id}
    method: GET
    data_selector: data
    params: {}
- name: create_workspace
  endpoint:
    path: /v1/~/workspaces
    method: POST
    data_selector: data
    params: {}
- name: user_properties
  endpoint:
    path: /v1/search/~/mappings/users/properties
    method: GET
    params:
      app_id: string
- name: event_request_body_properties
  endpoint:
    path: /v1/search/~/mappings/events/request/body/properties
    method: GET
    params:
      app_id: string
      from: string(date-time)
      to: string(date-time)
- name: event_response_body_properties
  endpoint:
    path: /v1/search/~/mappings/events/response/body/properties
    method: GET
    params:
      app_id: string
      from: string(date-time)
      to: string(date-time)
- name: workspace_token
  endpoint:
    path: /v1/workspaces/access_token
    method: GET
    params: {}
- name: public_workspace
  endpoint:
    path: /v1/workspaces/public/{id}
    method: GET
    params: {}
- name: workspaces
  endpoint:
    path: /~/workspaces
    method: POST
    data_selector: ''
    params: {}
- name: getWorkspaces
  endpoint:
    path: /~/workspaces
    method: GET
    data_selector: ''
    params:
      take: integer(int32)
      access: array[string]
- name: getWorkspaceTemplates
  endpoint:
    path: /~/workspaces/templates
    method: GET
    data_selector: ''
    params: {}
- name: workspace_templates
  endpoint:
    path: /~/workspaces/templates
    method: GET
    data_selector: '*'
- name: update_workspace
  endpoint:
    path: /~/workspaces/{id}
    method: POST
    data_selector: '*'
- name: workspace
  endpoint:
    path: /~/workspaces/{id}
    method: GET
    data_selector: response
    params: {}
- name: update_workspace
  endpoint:
    path: /~/workspaces/{id}
    method: POST
    data_selector: response
    params: {}
- name: delete_workspace
  endpoint:
    path: /~/workspaces/{id}
    method: DELETE
    data_selector: response
    params: {}
- name: create_comment
  endpoint:
    path: /~/workspaces/{id}/comments
    method: POST
    data_selector: response
    params: {}
- name: comments
  endpoint:
    path: /~/workspaces/{id}/comments
    method: POST
    data_selector: None
    params:
      id: path
      body: body
- name: comments
  endpoint:
    path: /~/workspaces/{id}/comments
    method: GET
    data_selector: None
    params:
      id: path
- name: update_comment
  endpoint:
    path: /~/workspaces/{id}/comments/{commentId}
    method: POST
    data_selector: None
    params:
      id: path
      commentId: path
      body: body
- name: CreditBalanceMetric
  endpoint:
    path: /credit_balance
    method: GET
    data_selector: current_balance
    params: {}
- name: ChargebeeBillingParams
  endpoint:
    path: /chargebee_billing_params
    method: GET
    data_selector: item_plan
    params: {}
- name: MoesifPlan
  endpoint:
    path: /moesif_plan
    method: GET
    data_selector: name
    params: {}
- name: createEmailTemplate
  endpoint:
    path: /createEmailTemplate
    method: POST
- name: getEmailTemplates
  endpoint:
    path: /getEmailTemplates
    method: GET
- name: updateEmailTemplate
  endpoint:
    path: /updateEmailTemplate
    method: PUT
- name: getEmailTemplate
  endpoint:
    path: /getEmailTemplate
    method: GET
- name: deleteEmailTemplate
  endpoint:
    path: /deleteEmailTemplate
    method: DELETE
- name: findObjects
  endpoint:
    path: /findObjects
    method: GET
- name: getGovernanceRules
  endpoint:
    path: /getGovernanceRules
    method: GET
- name: createGovernanceRule
  endpoint:
    path: /createGovernanceRule
    method: POST
- name: updateGovernanceRule
  endpoint:
    path: /updateGovernanceRule
    method: PUT
- name: getGovernanceRule
  endpoint:
    path: /getGovernanceRule
    method: GET
- name: deleteGovernanceRule
  endpoint:
    path: /deleteGovernanceRule
    method: DELETE
- name: events
  endpoint:
    path: /search/~/search/events
    method: POST
    data_selector: hits.hits
    params: {}
- name: count
  endpoint:
    path: /search/~/count/events
    method: POST
    data_selector: hits.hits
    params: {}
- name: events_batch
  endpoint:
    path: /v1/events/batch
    method: POST
- name: events
  endpoint:
    path: /events
    method: POST
    data_selector: request
    params: {}
- name: actions
  endpoint:
    path: /v1/actions
    method: POST
    data_selector: null
    params: {}
- name: actions_batch
  endpoint:
    path: /v1/actions/batch
    method: POST
    data_selector: null
    params: {}
- name: users
  endpoint:
    path: /v1/users
    method: POST
    data_selector: null
    params: {}
- name: users
  endpoint:
    path: /v1/users
    method: POST
    data_selector: user
    params: {}
- name: users_batch
  endpoint:
    path: /v1/users/batch
    method: POST
    data_selector: users
    params: {}
- name: companies
  endpoint:
    path: /v1/companies
    method: POST
    data_selector: null
    params: {}
- name: companies_batch
  endpoint:
    path: /v1/companies/batch
    method: POST
    data_selector: null
    params: {}
- name: billing_reports_properties
  endpoint:
    path: /v1/search/~/billing/reports/properties
    method: GET
    data_selector: records
- name: billing_reports
  endpoint:
    path: /v1/~/billing/reports
    method: GET
    data_selector: records
- name: billing_reports_metrics
  endpoint:
    path: /~/billing/reports/metrics
    method: GET
    data_selector: buckets
    params:
      from: string(date-time)
      to: string(date-time)
- name: billing_reports_properties
  endpoint:
    path: /~/billing/reports/properties/{field}
    method: GET
    data_selector: values
    params:
      from: string(date-time)
      to: string(date-time)
- name: update_companies
  endpoint:
    path: /search/~/companies
    method: POST
    data_selector: success
    params: {}
- name: companies_batch_update
  endpoint:
    path: /v1/search/~/companies/batch
    method: POST
    data_selector: ''
    params: {}
- name: get_company
  endpoint:
    path: /v1/search/~/companies/{id}
    method: GET
    data_selector: ''
    params: {}
- name: delete_company
  endpoint:
    path: /v1/search/~/companies/{id}
    method: DELETE
    data_selector: ''
    params: {}
- name: count_companies
  endpoint:
    path: /v1/search/~/count/companies
    method: POST
    data_selector: ''
    params:
      app_id: string
- name: count_companies
  endpoint:
    path: /search/~/count/companies
    method: POST
- name: search_company_metrics
  endpoint:
    path: /search/~/search/companymetrics/companies
    method: POST
- name: get_company_subscriptions
  endpoint:
    path: /search/~/companies/{id}/subscriptions
    method: GET
- name: create_subscription
  endpoint:
    path: /search/~/subscriptions
    method: POST
- name: subscription
  endpoint:
    path: /search/~/subscriptions
    method: POST
    data_selector: response
    params: {}
- name: subscriptions
  endpoint:
    path: /v1/search/~/subscriptions
    method: POST
    data_selector: subscriptions
- name: subscriptions_batch
  endpoint:
    path: /~/subscriptions/batch
    method: POST
    data_selector: null
    params: {}
- name: subscriptions
  endpoint:
    path: /v1/search/~/subscriptions/batch
    method: POST
    data_selector: items
- name: subscriptions_batch
  endpoint:
    path: /search/~/subscriptions/batch
    method: POST
    data_selector: items
    params: {}
- name: get_subscription
  endpoint:
    path: /search/~/subscriptions/{id}
    method: GET
    data_selector: ''
    params: {}
- name: count_events
  endpoint:
    path: /search/~/count/events
    method: POST
    data_selector: null
    params:
      from: '2019-08-24T14:15:22Z'
      to: '2019-08-24T14:15:22Z'
- name: get_event
  endpoint:
    path: /search/~/events/{id}
    method: GET
    data_selector: null
    params:
      event_time: '2019-08-24T14:15:22Z'
- name: search_events
  endpoint:
    path: /search/~/search/events
    method: POST
    data_selector: null
    params:
      from: '2019-08-24T14:15:22Z'
      to: '2019-08-24T14:15:22Z'
- name: search_events
  endpoint:
    path: /search/~/search/events
    method: POST
    data_selector: hits
    params:
      from: string(date-time)
      to: string(date-time)
- name: search_users_count
  endpoint:
    path: /search/~/count/users
    method: POST
    data_selector: count
    params:
      app_id: string
- name: usermetrics
  endpoint:
    path: /v1/search/~/search/usermetrics/users
    method: POST
- name: updateUsers
  endpoint:
    path: /v1/search/~/users
    method: POST
- name: batchUpdateUsers
  endpoint:
    path: /v1/search/~/users/batch
    method: POST
- name: users_batch_update
  endpoint:
    path: /v1/search/~/users/batch
    method: POST
    data_selector: '[]'
- name: get_user
  endpoint:
    path: /v1/search/~/users/{id}
    method: GET
    data_selector: '{}'
- name: delete_user
  endpoint:
    path: /v1/search/~/users/{id}
    method: DELETE
    data_selector: '{}'
- name: get_properties
  endpoint:
    path: /v1/search/~/mappings/users/properties
    method: GET
    data_selector: '{}'
- name: workspace
  endpoint:
    path: /workspaces/public/{id}
    method: GET
    data_selector: ''
    params: {}
- name: create_workspace
  endpoint:
    path: /~/workspaces
    method: POST
    data_selector: ''
    params: {}
- name: user_properties
  endpoint:
    path: /v1/search/~/mappings/users/properties
    method: GET
    data_selector: null
    params:
      app_id: string
- name: event_request_body_properties
  endpoint:
    path: /v1/search/~/mappings/events/request/body/properties
    method: GET
    data_selector: null
    params:
      app_id: string
      from: string(date-time)
      to: string(date-time)
- name: event_response_body_properties
  endpoint:
    path: /v1/search/~/mappings/events/response/body/properties
    method: GET
    data_selector: null
    params:
      app_id: string
      from: string(date-time)
      to: string(date-time)
- name: workspace_access_token
  endpoint:
    path: /v1/workspaces/access_token
    method: GET
    data_selector: null
    params: {}
- name: workspace_templates
  endpoint:
    path: /~/workspaces/templates
    method: GET
    data_selector: anonymous
- name: update_workspace
  endpoint:
    path: /~/workspaces/{id}
    method: POST
    data_selector: none
- name: workspaces
  endpoint:
    path: /~/workspaces
    method: POST
    data_selector: body
    params: {}
- name: get_workspaces
  endpoint:
    path: /~/workspaces
    method: GET
    data_selector: ''
    params:
      take: '0'
      access:
      - string
- name: get_workspace_templates
  endpoint:
    path: /~/workspaces/templates
    method: GET
    data_selector: ''
    params: {}
- name: workspace
  endpoint:
    path: /~/workspaces/{id}
    method: POST
    data_selector: ''
    params: {}
- name: workspace
  endpoint:
    path: /~/workspaces/{id}
    method: GET
    data_selector: ''
    params: {}
- name: workspace
  endpoint:
    path: /~/workspaces/{id}
    method: DELETE
    data_selector: ''
    params: {}
- name: comment
  endpoint:
    path: /~/workspaces/{id}/comments
    method: POST
    data_selector: ''
    params: {}
- name: comments
  endpoint:
    path: /~/workspaces/{id}/comments
    method: GET
    data_selector: results
- name: create_comment
  endpoint:
    path: /~/workspaces/{id}/comments
    method: POST
    data_selector: results
- name: update_comment
  endpoint:
    path: /~/workspaces/{id}/comments/{commentId}
    method: POST
    data_selector: results
- name: delete_comment
  endpoint:
    path: /~/workspaces/{id}/comments/{commentId}
    method: DELETE
    data_selector: results
- name: item_plan
  endpoint:
    path: /item_plan
    method: GET
    data_selector: item_plan
    params: {}
- name: item_price
  endpoint:
    path: /item_price
    method: GET
    data_selector: item_price
    params: {}
- name: add_app
  endpoint:
    path: /~/apps
    method: POST
    data_selector: result
- name: delete_acl_permissions
  endpoint:
    path: /~/workspaces/{id}/policy/acl
    method: DELETE
    data_selector: result
    params:
      id: path
      grantee: query
- name: add_acl_permission
  endpoint:
    path: /~/workspaces/{id}/policy/acl
    method: POST
    data_selector: result
    params:
      id: path
      grantee: query
      permission: query
- name: item_plan
  endpoint:
    path: /item_plan
    method: GET
    data_selector: item_plan
    params: {}
- name: item_price
  endpoint:
    path: /item_price
    method: GET
    data_selector: item_price
    params: {}
- name: item_prices
  endpoint:
    path: /item_prices
    method: GET
    data_selector: item_prices
    params: {}
- name: reporting
  endpoint:
    path: /reporting
    method: GET
    data_selector: reporting
    params: {}
- name: item_plan
  endpoint:
    path: /item_plan
    method: GET
- name: item_price
  endpoint:
    path: /item_price
    method: GET
- name: item_prices
  endpoint:
    path: /item_prices
    method: GET
- name: reporting
  endpoint:
    path: /reporting
    method: GET
- name: item_plan
  endpoint:
    path: /item_plan
    method: GET
    data_selector: item_plan
- name: item_price
  endpoint:
    path: /item_price
    method: GET
    data_selector: item_price
- name: item_prices
  endpoint:
    path: /item_prices
    method: GET
    data_selector: item_prices
- name: reporting
  endpoint:
    path: /reporting
    method: GET
    data_selector: reporting
- name: MoesifPlan
  endpoint:
    path: /path/to/moesifplan
    method: GET
- name: item_plan
  endpoint:
    path: /item_plan
    method: GET
    data_selector: item_plan
- name: item_price
  endpoint:
    path: /item_price
    method: GET
    data_selector: item_price
- name: item_prices
  endpoint:
    path: /item_prices
    method: GET
    data_selector: item_prices
- name: credit_balance_metric
  endpoint:
    path: /credit_balance_metric
    method: GET
    data_selector: credit_balance_metric
- name: events
  endpoint:
    path: /events
    method: POST
    data_selector: request
    params: {}
- name: events
  endpoint:
    path: /search/~/search/events
    method: POST
    data_selector: hits.hits
    params:
      from: -1d
      to: now
- name: count
  endpoint:
    path: /search/~/count/events
    method: POST
    data_selector: hits.hits
    params:
      from: -1M
      to: now
- name: events_batch
  endpoint:
    path: /v1/events/batch
    method: POST
- name: actions
  endpoint:
    path: /v1/actions
    method: POST
    data_selector: ''
    params: {}
- name: users
  endpoint:
    path: /v1/users
    method: POST
    data_selector: ''
    params: {}
- name: companies
  endpoint:
    path: /v1/companies
    method: POST
    data_selector: ''
    params: {}
- name: companies_batch
  endpoint:
    path: /v1/companies/batch
    method: POST
    data_selector: ''
    params: {}
- name: users
  endpoint:
    path: /v1/users
    method: POST
    data_selector: ''
    params: {}
- name: users_batch
  endpoint:
    path: /v1/users/batch
    method: POST
    data_selector: ''
    params: {}
- name: billing_reports_properties
  endpoint:
    path: /v1/search/~/billing/reports/properties
    method: GET
    data_selector: records
    params: {}
- name: billing_reports
  endpoint:
    path: /v1/~/billing/reports
    method: GET
    data_selector: records
    params: {}
- name: billing_reports_metrics
  endpoint:
    path: /~/billing/reports/metrics
    method: GET
    data_selector: buckets
    params:
      from: string(date-time)
      to: string(date-time)
- name: billing_reports_properties
  endpoint:
    path: /~/billing/reports/properties/{field}
    method: GET
    data_selector: values
    params:
      from: string(date-time)
      to: string(date-time)
- name: update_companies
  endpoint:
    path: /search/~/companies
    method: POST
    data_selector: success
    params: {}
- name: companies_batch_update
  endpoint:
    path: /v1/search/~/companies/batch
    method: POST
    data_selector: records
- name: get_company
  endpoint:
    path: /v1/search/~/companies/{id}
    method: GET
    data_selector: records
- name: delete_company
  endpoint:
    path: /v1/search/~/companies/{id}
    method: DELETE
    data_selector: records
- name: count_companies
  endpoint:
    path: /v1/search/~/count/companies
    method: POST
    data_selector: records
- name: count_companies
  endpoint:
    path: /search/~/count/companies
    method: POST
    data_selector: None
- name: search_company_metrics
  endpoint:
    path: /search/~/search/companymetrics/companies
    method: POST
    data_selector: None
- name: get_company_subscriptions
  endpoint:
    path: /search/~/companies/{id}/subscriptions
    method: GET
    data_selector: None
- name: subscriptions
  endpoint:
    path: /v1/search/~/subscriptions
    method: POST
    data_selector: subscriptions
- name: subscription
  endpoint:
    path: /v1/search/~/subscriptions
    method: POST
    data_selector: subscription
    params: {}
- name: subscriptions
  endpoint:
    path: /search/~/subscriptions/batch
    method: POST
    data_selector: subscriptions
- name: subscriptions
  endpoint:
    path: /v1/search/~/subscriptions/batch
    method: POST
    data_selector: subscriptions
    params: {}
- name: subscriptions_batch
  endpoint:
    path: /search/~/subscriptions/batch
    method: POST
    data_selector: items
    params: {}
- name: get_subscription
  endpoint:
    path: /search/~/subscriptions/{id}
    method: GET
    data_selector: subscription
    params: {}
- name: count_events
  endpoint:
    path: /v1/search/~/count/events
    method: POST
    params:
      from: '2025-03-18T20:21:32.116Z'
      to: '2025-03-18T20:21:32.116Z'
- name: get_event
  endpoint:
    path: /v1/search/~/events/{id}
    method: GET
    params:
      event_time: '2025-03-18T20:21:32.116Z'
- name: search_events
  endpoint:
    path: /search/~/search/events
    method: POST
    data_selector: hits
    params:
      from: string(date-time)
      to: string(date-time)
- name: search_workspaces
  endpoint:
    path: /search/~/workspaces/{workspaceId}/search
    method: POST
    data_selector: hits
    params:
      from: string(date-time)
      to: string(date-time)
      workspaceId: string
- name: count_users
  endpoint:
    path: /search/~/count/users
    method: POST
    data_selector: hits
    params:
      app_id: string
- name: usermetrics_users
  endpoint:
    path: /v1/search/~/search/usermetrics/users
    method: POST
    data_selector: body
    params: {}
- name: update_users
  endpoint:
    path: /v1/search/~/users
    method: POST
    data_selector: body
    params: {}
- name: batch_update_users
  endpoint:
    path: /v1/search/~/users/batch
    method: POST
    data_selector: body
    params: {}
- name: batch_users
  endpoint:
    path: /search/~/users/batch
    method: POST
    data_selector: '[]'
- name: get_user
  endpoint:
    path: /search/~/users/{id}
    method: GET
    data_selector: '{}'
- name: delete_user
  endpoint:
    path: /search/~/users/{id}
    method: DELETE
    data_selector: '{}'
- name: user_properties
  endpoint:
    path: /search/~/mappings/users/properties
    method: GET
    data_selector: '{}'
- name: workspace
  endpoint:
    path: /workspaces/public/{id}
    method: GET
    data_selector: records
- name: create_workspace
  endpoint:
    path: /~/workspaces
    method: POST
    data_selector: records
- name: user_properties
  endpoint:
    path: /v1/search/~/mappings/users/properties
    method: GET
    data_selector: ''
    params:
      app_id: string
- name: events_request_body_properties
  endpoint:
    path: /v1/search/~/mappings/events/request/body/properties
    method: GET
    data_selector: ''
    params:
      app_id: string
      from: string(date-time)
      to: string(date-time)
- name: events_response_body_properties
  endpoint:
    path: /v1/search/~/mappings/events/response/body/properties
    method: GET
    data_selector: ''
    params:
      app_id: string
      from: string(date-time)
      to: string(date-time)
- name: workspaces_access_token
  endpoint:
    path: /v1/workspaces/access_token
    method: GET
    data_selector: ''
    params: {}
- name: public_workspace
  endpoint:
    path: /v1/workspaces/public/{id}
    method: GET
    data_selector: ''
    params: {}
- name: workspaces_templates
  endpoint:
    path: /~/workspaces/templates
    method: GET
    data_selector: '*'
- name: update_workspace
  endpoint:
    path: /~/workspaces/{id}
    method: POST
    data_selector: '*'
- name: workspaces
  endpoint:
    path: /~/workspaces
    method: POST
    data_selector: null
    params: {}
- name: workspaces_get
  endpoint:
    path: /~/workspaces
    method: GET
    data_selector: null
    params:
      take: integer(int32)
      access: array[string]
- name: workspace_templates
  endpoint:
    path: /~/workspaces/templates
    method: GET
    data_selector: null
    params: {}
- name: workspace
  endpoint:
    path: /~/workspaces/{id}
    method: GET
- name: update_workspace
  endpoint:
    path: /~/workspaces/{id}
    method: POST
- name: delete_workspace
  endpoint:
    path: /~/workspaces/{id}
    method: DELETE
- name: create_comment
  endpoint:
    path: /~/workspaces/{id}/comments
    method: POST
- name: comments
  endpoint:
    path: /~/workspaces/{id}/comments
    method: GET
    data_selector: comments
    params:
      id: path
- name: create_comment
  endpoint:
    path: /~/workspaces/{id}/comments
    method: POST
    data_selector: comment
    params:
      id: path
      body: body
- name: update_comment
  endpoint:
    path: /~/workspaces/{id}/comments/{commentId}
    method: POST
    data_selector: comment
    params:
      id: path
      commentId: path
      body: body
- name: delete_comment
  endpoint:
    path: /~/workspaces/{id}/comments/{commentId}
    method: DELETE
    data_selector: comment
    params:
      id: path
      commentId: path
- name: add_acl_permission
  endpoint:
    path: /~/workspaces/{id}/policy/acl
    method: POST
    data_selector: none
    params:
      id: path
      grantee: query
      permission: query
- name: delete_acl_permission
  endpoint:
    path: /~/workspaces/{id}/policy/acl
    method: DELETE
    data_selector: none
    params:
      id: path
      grantee: query
- name: create_app
  endpoint:
    path: /~/apps
    method: POST
    data_selector: none
    params: {}
- name: get_apps
  endpoint:
    path: /~/apps
    method: GET
    data_selector: none
    params:
      take: query
      before_id: query
- name: apps
  endpoint:
    path: /~/apps/{id}
    method: POST
    data_selector: string
    params: {}
- name: delete_app
  endpoint:
    path: /~/apps/{id}
    method: DELETE
    data_selector: string
    params: {}
- name: create_moesif_plan
  endpoint:
    path: /~/billing/catalog/plans
    method: POST
    data_selector: string
    params:
      provider: string
- name: plans
  endpoint:
    path: /~/billing/catalog/plans
    method: POST
    data_selector: name
    params: {}
- name: list_plans
  endpoint:
    path: /~/billing/catalog/plans
    method: GET
    data_selector: name
    params: {}
- name: plans
  endpoint:
    path: /~/billing/catalog/plans/{id}
    method: PUT
    data_selector: response
    params:
      provider: string
- name: moesif_plan
  endpoint:
    path: /~/billing/catalog/plans/{id}
    method: GET
    data_selector: records
    params:
      provider: string
- name: delete_moesif_plan
  endpoint:
    path: /~/billing/catalog/plans/{id}
    method: DELETE
    params:
      provider: string
- name: update_moesif_plan
  endpoint:
    path: /~/billing/catalog/plans/{id}
    method: PUT
    params:
      provider: string
- name: prices
  endpoint:
    path: /~/billing/catalog/prices
    method: POST
    data_selector: string
    params:
      provider: string
- name: list_prices
  endpoint:
    path: /~/billing/catalog/prices
    method: GET
    data_selector: string
    params:
      provider: string
      limit: integer
- name: moesif_price
  endpoint:
    path: /~/billing/catalog/prices/{id}
    method: GET
    data_selector: anonymous
    params:
      provider: string
- name: delete_moesif_price
  endpoint:
    path: /~/billing/catalog/prices/{id}
    method: DELETE
    data_selector: null
    params:
      provider: string
- name: update_moesif_price
  endpoint:
    path: /~/billing/catalog/prices/{id}
    method: PUT
    data_selector: null
    params:
      provider: string
- name: billing_catalog_prices
  endpoint:
    path: /~/billing/catalog/prices/{id}
    method: PUT
- name: billing_catalog_uom
  endpoint:
    path: /~/billing/catalog/uom
    method: GET
- name: billing_meters
  endpoint:
    path: /~/billing/meters
    method: POST
- name: billing_meter
  endpoint:
    path: /v1/~/billing/meters/{meterId}
    method: POST
    data_selector: inputBody
    params: {}
- name: billing_meter
  endpoint:
    path: /~/billing/meters
    method: POST
    data_selector: null
    params: {}
- name: list_billing_meters
  endpoint:
    path: /~/billing/meters
    method: GET
    data_selector: null
    params: {}
- name: billing_meter
  endpoint:
    path: /~/billing/meters/{meterId}
    method: POST
    data_selector: ''
    params: {}
- name: billing_meter
  endpoint:
    path: /~/billing/meters/{meterId}
    method: POST
    data_selector: null
    params: {}
- name: billing_meter
  endpoint:
    path: /~/billing/meters/{meterId}
    method: GET
    data_selector: null
    params: {}
- name: item_plan
  endpoint:
    path: /item_plan
    method: POST
    data_selector: item_plan
    params: {}
- name: item_price
  endpoint:
    path: /item_price
    method: POST
    data_selector: item_price
    params: {}
- name: item_prices
  endpoint:
    path: /item_prices
    method: POST
    data_selector: item_prices
    params: {}
- name: billing_custom_plan
  endpoint:
    path: /billing/custom_plan
    method: GET
    data_selector: anonymous
- name: moesif_plan
  endpoint:
    path: /moesif/plan
    method: GET
    data_selector: anonymous
- name: chargebee_billing_params
  endpoint:
    path: /chargebee/billing_params
    method: GET
    data_selector: item_plan
- name: credit_balance_metric
  endpoint:
    path: /credit/balance
    method: GET
    data_selector: current_balance
- name: createEmailTemplate
  endpoint:
    path: /createEmailTemplate
    method: POST
- name: getEmailTemplates
  endpoint:
    path: /getEmailTemplates
    method: GET
- name: updateEmailTemplate
  endpoint:
    path: /updateEmailTemplate
    method: PUT
- name: getEmailTemplate
  endpoint:
    path: /getEmailTemplate
    method: GET
- name: deleteEmailTemplate
  endpoint:
    path: /deleteEmailTemplate
    method: DELETE
- name: findObjects
  endpoint:
    path: /findObjects
    method: GET
- name: createGovernanceRule
  endpoint:
    path: /createGovernanceRule
    method: POST
- name: getGovernanceRules
  endpoint:
    path: /getGovernanceRules
    method: GET
- name: updateGovernanceRule
  endpoint:
    path: /updateGovernanceRule
    method: PUT
- name: getGovernanceRule
  endpoint:
    path: /getGovernanceRule
    method: GET
- name: deleteGovernanceRule
  endpoint:
    path: /deleteGovernanceRule
    method: DELETE
- name: events
  endpoint:
    path: /events
    method: POST
    data_selector: event
    params: {}
- name: events_batch
  endpoint:
    path: /v1/events/batch
    method: POST
- name: actions
  endpoint:
    path: /v1/actions
    method: POST
    data_selector: action
    params: {}
- name: actions_batch
  endpoint:
    path: /v1/actions/batch
    method: POST
    data_selector: actions
    params: {}
- name: users
  endpoint:
    path: /v1/users
    method: POST
    data_selector: user
    params: {}
- name: users
  endpoint:
    path: /v1/users
    method: POST
    data_selector: ''
    params: {}
- name: users_batch
  endpoint:
    path: /v1/users/batch
    method: POST
    data_selector: ''
    params: {}
- name: companies
  endpoint:
    path: /v1/companies
    method: POST
    data_selector: companies
- name: companies_batch
  endpoint:
    path: /v1/companies/batch
    method: POST
    data_selector: companies
- name: billing_reports_properties
  endpoint:
    path: /search/~/billing/reports/properties
    method: GET
    data_selector: records
- name: billing_reports
  endpoint:
    path: /~/billing/reports
    method: GET
    data_selector: records
- name: billing_reports_metrics
  endpoint:
    path: /~/billing/reports/metrics
    method: GET
    data_selector: records
- name: billing_reports_metrics
  endpoint:
    path: /~/billing/reports/metrics
    method: GET
    data_selector: buckets
    params:
      from: string(date-time)
      to: string(date-time)
- name: billing_reports_properties
  endpoint:
    path: /~/billing/reports/properties/{field}
    method: GET
    data_selector: values
    params:
      from: string(date-time)
      to: string(date-time)
- name: update_companies
  endpoint:
    path: /search/~/companies
    method: POST
    data_selector: success
    params: {}
- name: batch_companies
  endpoint:
    path: /search/~/companies/batch
    method: POST
    data_selector: records
- name: company
  endpoint:
    path: /search/~/companies/{id}
    method: GET
    data_selector: records
- name: delete_company
  endpoint:
    path: /search/~/companies/{id}
    method: DELETE
    data_selector: records
- name: count_companies
  endpoint:
    path: /search/~/count/companies
    method: POST
    data_selector: records
- name: subscriptions
  endpoint:
    path: /search/~/subscriptions
    method: POST
    data_selector: body
- name: count_companies
  endpoint:
    path: /search/~/count/companies
    method: POST
    data_selector: None
    params: {}
- name: search_company_metrics
  endpoint:
    path: /search/~/search/companymetrics/companies
    method: POST
    data_selector: None
    params: {}
- name: get_company_subscriptions
  endpoint:
    path: /search/~/companies/{id}/subscriptions
    method: GET
    data_selector: None
    params:
      id: path
- name: create_subscription
  endpoint:
    path: /search/~/subscriptions
    method: POST
    data_selector: None
    params: {}
- name: subscription
  endpoint:
    path: /search/~/subscriptions
    method: POST
    data_selector: subscription
    params: {}
- name: subscriptions
  endpoint:
    path: /v1/search/~/subscriptions/batch
    method: POST
    data_selector: subscriptions
- name: subscriptions
  endpoint:
    path: /search/~/subscriptions/batch
    method: POST
    data_selector: records
    params: {}
- name: batch_subscriptions
  endpoint:
    path: /search/~/subscriptions/batch
    method: POST
    data_selector: items
    params: {}
- name: get_subscription
  endpoint:
    path: /search/~/subscriptions/{id}
    method: GET
    data_selector: subscription
    params: {}
- name: count_events
  endpoint:
    path: /v1/search/~/count/events
    method: POST
    params:
      from: '2019-08-24T14:15:22Z'
      to: '2019-08-24T14:15:22Z'
- name: get_event
  endpoint:
    path: /v1/search/~/events/{id}
    method: GET
    params:
      event_time: '2019-08-24T14:15:22Z'
- name: search_events
  endpoint:
    path: /v1/search/~/search/events
    method: POST
    params:
      from: '2019-08-24T14:15:22Z'
      to: '2019-08-24T14:15:22Z'
- name: search_events
  endpoint:
    path: /search/~/search/events
    method: POST
    data_selector: hits
    params:
      from: string(date-time)
      to: string(date-time)
- name: search_workspaces
  endpoint:
    path: /search/~/workspaces/{workspaceId}/search
    method: POST
    data_selector: hits
    params:
      from: string(date-time)
      to: string(date-time)
- name: count_users
  endpoint:
    path: /search/~/count/users
    method: POST
    data_selector: hits
    params:
      app_id: string
- name: user_metrics
  endpoint:
    path: /search/~/search/usermetrics/users
    method: POST
    data_selector: None
    params: {}
- name: update_user
  endpoint:
    path: /search/~/users
    method: POST
    data_selector: None
    params: {}
- name: batch_update_users
  endpoint:
    path: /search/~/users/batch
    method: POST
    data_selector: None
    params: {}
- name: update_users_batch
  endpoint:
    path: /v1/search/~/users/batch
    method: POST
    data_selector: '[]'
- name: get_user
  endpoint:
    path: /v1/search/~/users/{id}
    method: GET
    data_selector: '{}'
- name: delete_user
  endpoint:
    path: /v1/search/~/users/{id}
    method: DELETE
    data_selector: '{}'
- name: get_properties
  endpoint:
    path: /v1/search/~/mappings/users/properties
    method: GET
    data_selector: '{}'
- name: users_properties
  endpoint:
    path: /v1/search/~/mappings/users/properties
    method: GET
    data_selector: records
    params:
      app_id: string
- name: events_request_body_properties
  endpoint:
    path: /v1/search/~/mappings/events/request/body/properties
    method: GET
    data_selector: records
    params:
      app_id: string
      from: string(date-time)
      to: string(date-time)
- name: events_response_body_properties
  endpoint:
    path: /v1/search/~/mappings/events/response/body/properties
    method: GET
    data_selector: records
    params:
      app_id: string
      from: string(date-time)
      to: string(date-time)
- name: workspace_access_token
  endpoint:
    path: /v1/workspaces/access_token
    method: GET
    data_selector: records
    params: {}
- name: workspaces
  endpoint:
    path: /workspaces/public/{id}
    method: GET
    data_selector: records
    params: {}
- name: create_workspace
  endpoint:
    path: /~/workspaces
    method: POST
    data_selector: records
    params: {}
- name: workspaces
  endpoint:
    path: /~/workspaces
    method: POST
    data_selector: ''
    params: {}
- name: getWorkspaces
  endpoint:
    path: /~/workspaces
    method: GET
    data_selector: ''
    params:
      take: integer(int32)
      access: array[string]
- name: getWorkspaceTemplates
  endpoint:
    path: /~/workspaces/templates
    method: GET
    data_selector: ''
    params: {}
- name: workspace_templates
  endpoint:
    path: /~/workspaces/templates
    method: GET
    data_selector: '*'
- name: update_workspace
  endpoint:
    path: /~/workspaces/{id}
    method: POST
    data_selector: '*'
- name: workspace
  endpoint:
    path: /~/workspaces/{id}
    method: GET
    data_selector: null
- name: workspace_comment
  endpoint:
    path: /~/workspaces/{id}/comments
    method: POST
    data_selector: null
- name: delete_workspace
  endpoint:
    path: /~/workspaces/{id}
    method: DELETE
    data_selector: null
- name: comments
  endpoint:
    path: /~/workspaces/{id}/comments
    method: GET
    data_selector: records
    params:
      id: '{id}'
- name: create_comment
  endpoint:
    path: /~/workspaces/{id}/comments
    method: POST
    data_selector: None
    params:
      id: '{id}'
      body: '[CommentItem]'
- name: update_comment
  endpoint:
    path: /~/workspaces/{id}/comments/{commentId}
    method: POST
    data_selector: None
    params:
      id: '{id}'
      commentId: '{commentId}'
      body: '[CommentItem]'
- name: delete_comment
  endpoint:
    path: /~/workspaces/{id}/comments/{commentId}
    method: DELETE
    data_selector: None
    params:
      id: '{id}'
      commentId: '{commentId}'
- name: addApp
  endpoint:
    path: /~/apps
    method: POST
    data_selector: response
    params: {}
- name: getApps
  endpoint:
    path: /~/apps
    method: GET
    data_selector: response
    params:
      take: '0'
- name: deleteACLPermissions
  endpoint:
    path: /~/workspaces/{id}/policy/acl
    method: DELETE
    data_selector: response
    params:
      grantee: string
- name: apps
  endpoint:
    path: /~/apps/{id}
    method: POST
    data_selector: ''
    params: {}
- name: billing_catalog_plans
  endpoint:
    path: /~/billing/catalog/plans
    method: POST
    data_selector: ''
    params:
      provider: string
- name: plans
  endpoint:
    path: /~/billing/catalog/plans
    method: POST
    data_selector: ''
    params: {}
- name: plans
  endpoint:
    path: /~/billing/catalog/plans
    method: GET
    data_selector: ''
    params: {}
- name: moesif_plan
  endpoint:
    path: /~/billing/catalog/plans/{id}
    method: GET
    data_selector: ''
    params:
      provider: string
- name: delete_moesif_plan
  endpoint:
    path: /~/billing/catalog/plans/{id}
    method: DELETE
    data_selector: ''
    params:
      provider: string
- name: update_moesif_plan
  endpoint:
    path: /~/billing/catalog/plans/{id}
    method: PUT
    data_selector: ''
    params:
      provider: string
- name: billing_catalog_plans
  endpoint:
    path: /~/billing/catalog/plans/{id}
    method: PUT
    data_selector: response
    params:
      provider: string
- name: prices
  endpoint:
    path: /~/billing/catalog/prices
    method: POST
    data_selector: null
    params:
      provider: string
- name: prices_list
  endpoint:
    path: /~/billing/catalog/prices
    method: GET
    data_selector: null
    params: {}
- name: moesif_price
  endpoint:
    path: /~/billing/catalog/prices/{id}
    method: GET
    data_selector: anonymous
    params:
      provider: string
- name: moesif_price_delete
  endpoint:
    path: /~/billing/catalog/prices/{id}
    method: DELETE
    params:
      provider: string
- name: moesif_price_update
  endpoint:
    path: /~/billing/catalog/prices/{id}
    method: PUT
    params:
      provider: string
- name: billing_meter
  endpoint:
    path: /~/billing/meters
    method: POST
- name: billing_catalog_prices
  endpoint:
    path: /~/billing/catalog/prices/{id}
    method: PUT
    data_selector: body
    params:
      provider: string
- name: billing_catalog_uom
  endpoint:
    path: /~/billing/catalog/uom
    method: GET
    data_selector: body
    params:
      provider: string
- name: billing_meter
  endpoint:
    path: /v1/~/billing/meters/{meterId}
    method: POST
    data_selector: null
    params: {}
- name: billing_meter
  endpoint:
    path: /~/billing/meters
    method: POST
    data_selector: none
    params: {}
- name: list_billing_meters
  endpoint:
    path: /~/billing/meters
    method: GET
    data_selector: none
    params: {}
- name: billing_meter
  endpoint:
    path: /~/billing/meters/{meterId}
    method: POST
    data_selector: billing_meter
    params: {}
- name: billing_meter_get
  endpoint:
    path: /~/billing/meters/{meterId}
    method: GET
    data_selector: billing_meter
    params: {}
- name: billing_meter_delete
  endpoint:
    path: /~/billing/meters/{meterId}
    method: DELETE
    data_selector: billing_meter
    params: {}
- name: billing_meter_webhook
  endpoint:
    path: /~/billing/meters/{meterId}/webhooks/channels/test
    method: POST
    data_selector: response_body
    params: {}
- name: billing_custom_plan
  endpoint:
    path: /~/billing/plans
    method: POST
    data_selector: response_body
    params: {}
- name: list_billing_plans
  endpoint:
    path: /~/billing/plans
    method: GET
    data_selector: response_body
    params: {}
- name: billing_custom_plan
  endpoint:
    path: /~/billing/plans
    method: GET
    data_selector: anonymous
- name: update_billing_custom_plan
  endpoint:
    path: /~/billing/plans/{planId}
    method: POST
    data_selector: none
- name: get_billing_custom_plan_by_id
  endpoint:
    path: /~/billing/plans/{planId}
    method: GET
    data_selector: none
- name: item_plan
  endpoint:
    path: /path/to/item_plan
    method: POST
    data_selector: item_plan
    params:
      planId: string
- name: item_price
  endpoint:
    path: /path/to/item_price
    method: POST
    data_selector: item_price
    params: {}
- name: item_plan
  endpoint:
    path: /item_plan
    method: GET
    data_selector: item_plan
    params: {}
- name: item_price
  endpoint:
    path: /item_price
    method: GET
    data_selector: item_price
    params: {}
- name: credit_balance_metric
  endpoint:
    path: /credit_balance_metric
    method: GET
    data_selector: credit_balance_metric
    params: {}
- name: moesif_plan
  endpoint:
    path: /moesif_plan
    method: GET
    data_selector: moesif_plan
    params: {}
- name: events
  endpoint:
    path: /search/~/search/events
    method: POST
    data_selector: ''
    params:
      from: -1d
      to: now
- name: count_events
  endpoint:
    path: /search/~/count/events
    method: POST
    data_selector: ''
    params:
      from: -1M
      to: now
- name: createEmailTemplate
  endpoint:
    path: /createEmailTemplate
    method: POST
- name: getEmailTemplates
  endpoint:
    path: /getEmailTemplates
    method: GET
- name: updateEmailTemplate
  endpoint:
    path: /updateEmailTemplate
    method: PUT
- name: getEmailTemplate
  endpoint:
    path: /getEmailTemplate
    method: GET
- name: deleteEmailTemplate
  endpoint:
    path: /deleteEmailTemplate
    method: DELETE
- name: findObjects
  endpoint:
    path: /findObjects
    method: GET
- name: createGovernanceRule
  endpoint:
    path: /createGovernanceRule
    method: POST
- name: getGovernanceRules
  endpoint:
    path: /getGovernanceRules
    method: GET
- name: updateGovernanceRule
  endpoint:
    path: /updateGovernanceRule
    method: PUT
- name: getGovernanceRule
  endpoint:
    path: /getGovernanceRule
    method: GET
- name: deleteGovernanceRule
  endpoint:
    path: /deleteGovernanceRule
    method: DELETE
- name: events
  endpoint:
    path: /events
    method: POST
    data_selector: events
- name: events
  endpoint:
    path: /v1/events/batch
    method: POST
    data_selector: '[]'
- name: users
  endpoint:
    path: /v1/users
    method: POST
    data_selector: ''
    params: {}
- name: users_batch
  endpoint:
    path: /v1/users/batch
    method: POST
    data_selector: ''
    params: {}
- name: actions
  endpoint:
    path: /v1/actions
    method: POST
    data_selector: ''
    params: {}
- name: actions_batch
  endpoint:
    path: /v1/actions/batch
    method: POST
    data_selector: ''
    params: {}
- name: users
  endpoint:
    path: /v1/users
    method: POST
    data_selector: ''
    params: {}
- name: companies
  endpoint:
    path: /v1/companies
    method: POST
    data_selector: null
    params: {}
- name: companies_batch
  endpoint:
    path: /v1/companies/batch
    method: POST
    data_selector: null
    params: {}
- name: billing_reports_properties
  endpoint:
    path: /v1/search/~/billing/reports/properties
    method: GET
    data_selector: ''
    params: {}
- name: billing_reports
  endpoint:
    path: /v1/~/billing/reports
    method: GET
    data_selector: ''
    params: {}
- name: billing_reports_metrics
  endpoint:
    path: /v1/~/billing/reports/metrics
    method: GET
    data_selector: ''
    params: {}
- name: billing_reports_metrics
  endpoint:
    path: /~/billing/reports/metrics
    method: GET
    data_selector: buckets
    params:
      from: string(date-time)
      to: string(date-time)
- name: billing_reports_properties
  endpoint:
    path: /~/billing/reports/properties/{field}
    method: GET
    data_selector: values
    params:
      from: string(date-time)
      to: string(date-time)
- name: update_companies
  endpoint:
    path: /search/~/companies
    method: POST
    data_selector: 'null'
    params: {}
- name: update_companies_batch
  endpoint:
    path: /v1/search/~/companies/batch
    method: POST
    data_selector: none
    params: {}
- name: get_company
  endpoint:
    path: /v1/search/~/companies/{id}
    method: GET
    data_selector: none
    params: {}
- name: delete_company
  endpoint:
    path: /v1/search/~/companies/{id}
    method: DELETE
    data_selector: none
    params: {}
- name: count_companies
  endpoint:
    path: /v1/search/~/count/companies
    method: POST
    data_selector: none
    params:
      app_id: string
- name: subscriptions
  endpoint:
    path: /v1/search/~/subscriptions
    method: POST
    data_selector: body
- name: count_companies
  endpoint:
    path: /search/~/count/companies
    method: POST
    data_selector: None
- name: search_company_metrics
  endpoint:
    path: /search/~/search/companymetrics/companies
    method: POST
    data_selector: None
- name: get_company_subscriptions
  endpoint:
    path: /search/~/companies/{id}/subscriptions
    method: GET
    data_selector: None
- name: create_subscription
  endpoint:
    path: /search/~/subscriptions
    method: POST
    data_selector: None
- name: subscription
  endpoint:
    path: /v1/search/~/subscriptions
    method: POST
    data_selector: response
    params: {}
- name: subscriptions
  endpoint:
    path: /v1/search/~/subscriptions/batch
    method: POST
    data_selector: inputBody
- name: subscriptions
  endpoint:
    path: /v1/search/~/subscriptions/batch
    method: POST
    data_selector: items
    params: {}
- name: subscriptions_batch
  endpoint:
    path: /search/~/subscriptions/batch
    method: POST
    data_selector: items
    params: {}
- name: get_subscription
  endpoint:
    path: /search/~/subscriptions/{id}
    method: GET
    data_selector: subscription
    params: {}
- name: count_events
  endpoint:
    path: /v1/search/~/count/events
    method: POST
    data_selector: null
    params:
      from: '2019-08-24T14:15:22Z'
      to: '2019-08-24T14:15:22Z'
- name: get_event
  endpoint:
    path: /v1/search/~/events/{id}
    method: GET
    data_selector: null
    params:
      event_time: '2019-08-24T14:15:22Z'
- name: search_events
  endpoint:
    path: /v1/search/~/search/events
    method: POST
    data_selector: null
    params:
      from: '2019-08-24T14:15:22Z'
      to: '2019-08-24T14:15:22Z'
- name: search_events
  endpoint:
    path: /v1/search/~/search/events
    method: POST
    data_selector: ''
    params:
      from: string(date-time)
      to: string(date-time)
- name: search_public_workspaces
  endpoint:
    path: /v1/search/~/workspaces/{workspaceId}/search
    method: POST
    data_selector: ''
    params:
      from: string(date-time)
      to: string(date-time)
      workspaceId: string
- name: count_users
  endpoint:
    path: /v1/search/~/count/users
    method: POST
    data_selector: ''
    params:
      app_id: string
- name: usermetrics
  endpoint:
    path: /v1/search/~/search/usermetrics/users
    method: POST
- name: updateUsers
  endpoint:
    path: /v1/search/~/users
    method: POST
- name: batchUpdateUsers
  endpoint:
    path: /v1/search/~/users/batch
    method: POST
- name: users_batch_update
  endpoint:
    path: /search/~/users/batch
    method: POST
    data_selector: records
- name: user_get
  endpoint:
    path: /search/~/users/{id}
    method: GET
    data_selector: _source
- name: user_delete
  endpoint:
    path: /search/~/users/{id}
    method: DELETE
- name: user_properties
  endpoint:
    path: /search/~/mappings/users/properties
    method: GET
- name: workspaces
  endpoint:
    path: /workspaces/public/{id}
    method: GET
    data_selector: workspace
    params: {}
- name: create_workspace
  endpoint:
    path: /~/workspaces
    method: POST
    data_selector: workspace
    params: {}
- name: user_property_mapping
  endpoint:
    path: /v1/search/~/mappings/users/properties
    method: GET
    data_selector: null
    params:
      app_id: string
- name: event_request_body_property_mapping
  endpoint:
    path: /v1/search/~/mappings/events/request/body/properties
    method: GET
    data_selector: null
    params:
      app_id: string
      from: string(date-time)
      to: string(date-time)
- name: event_response_body_property_mapping
  endpoint:
    path: /v1/search/~/mappings/events/response/body/properties
    method: GET
    data_selector: null
    params:
      app_id: string
      from: string(date-time)
      to: string(date-time)
- name: workspace_access_token
  endpoint:
    path: /v1/workspaces/access_token
    method: GET
    data_selector: null
    params: {}
- name: public_workspace
  endpoint:
    path: /v1/workspaces/public/{id}
    method: GET
    data_selector: null
    params: {}
- name: workspace_templates
  endpoint:
    path: /~/workspaces/templates
    method: GET
    data_selector: '*'
- name: workspaces
  endpoint:
    path: /~/workspaces
    method: POST
    data_selector: ''
    params: {}
- name: get_workspaces
  endpoint:
    path: /~/workspaces
    method: GET
    data_selector: ''
    params:
      take: integer(int32)
      access: array[string]
- name: get_workspace_templates
  endpoint:
    path: /~/workspaces/templates
    method: GET
    data_selector: ''
    params: {}
- name: workspace
  endpoint:
    path: /~/workspaces/{id}
    method: GET
    data_selector: records
    params: {}
- name: create_comment
  endpoint:
    path: /~/workspaces/{id}/comments
    method: POST
    data_selector: records
    params: {}
- name: delete_workspace
  endpoint:
    path: /~/workspaces/{id}
    method: DELETE
    data_selector: records
    params: {}
- name: comments
  endpoint:
    path: /~/workspaces/{id}/comments
    method: GET
    data_selector: comments
- name: create_comment
  endpoint:
    path: /~/workspaces/{id}/comments
    method: POST
    data_selector: createdComment
- name: update_comment
  endpoint:
    path: /~/workspaces/{id}/comments/{commentId}
    method: POST
    data_selector: updatedComment
- name: delete_comment
  endpoint:
    path: /~/workspaces/{id}/comments/{commentId}
    method: DELETE
    data_selector: deletedComment
- name: apps
  endpoint:
    path: /~/apps/{id}
    method: POST
- name: apps_delete
  endpoint:
    path: /~/apps/{id}
    method: DELETE
- name: billing_catalog_plans
  endpoint:
    path: /~/billing/catalog/plans
    method: POST
- name: addApp
  endpoint:
    path: /~/apps
    method: POST
    data_selector: body
- name: getApps
  endpoint:
    path: /~/apps
    method: GET
    data_selector: body
    params:
      take: '0'
- name: deleteACLPermissions
  endpoint:
    path: /~/workspaces/{id}/policy/acl
    method: DELETE
    data_selector: body
    params:
      grantee: string
- name: moesif_plan
  endpoint:
    path: /~/billing/catalog/plans
    method: POST
    data_selector: created_at
    params: {}
- name: list_moesif_plans
  endpoint:
    path: /~/billing/catalog/plans
    method: GET
    data_selector: records
    params: {}
- name: moesif_plan
  endpoint:
    path: /~/billing/catalog/plans/{id}
    method: GET
    data_selector: records
    params:
      provider: string
- name: delete_moesif_plan
  endpoint:
    path: /~/billing/catalog/plans/{id}
    method: DELETE
    params:
      provider: string
- name: update_moesif_plan
  endpoint:
    path: /~/billing/catalog/plans/{id}
    method: PUT
    params:
      provider: string
- name: billing_catalog_plans
  endpoint:
    path: /~/billing/catalog/plans/{id}
    method: PUT
    data_selector: response
    params:
      provider: string
- name: prices
  endpoint:
    path: /~/billing/catalog/prices
    method: POST
    data_selector: response
    params:
      provider: string
- name: list_prices
  endpoint:
    path: /~/billing/catalog/prices
    method: GET
    data_selector: response
    params: {}
- name: MoesifPrice
  endpoint:
    path: /~/billing/catalog/prices/{id}
    method: GET
    data_selector: anonymous
    params:
      provider: string
- name: deleteMoesifPrice
  endpoint:
    path: /~/billing/catalog/prices/{id}
    method: DELETE
    params:
      provider: string
- name: updateMoesifPrice
  endpoint:
    path: /~/billing/catalog/prices/{id}
    method: PUT
    params:
      provider: string
- name: billing_meters
  endpoint:
    path: /~/billing/meters
    method: POST
    data_selector: null
    params: {}
- name: billing_catalog_prices
  endpoint:
    path: /~/billing/catalog/prices/{id}
    method: PUT
    data_selector: body
    params:
      provider: string
- name: billing_catalog_uom
  endpoint:
    path: /~/billing/catalog/uom
    method: GET
    data_selector: body
    params:
      provider: string
- name: billing_meters
  endpoint:
    path: /~/billing/meters
    method: POST
    data_selector: body
    params: {}
- name: billing_meter
  endpoint:
    path: /~/billing/meters
    method: POST
    data_selector: ''
    params: {}
- name: list_billing_meters
  endpoint:
    path: /~/billing/meters
    method: GET
    data_selector: ''
    params: {}
- name: updateMeter
  endpoint:
    path: /~/billing/meters/{meterId}
    method: POST
- name: billing_meter
  endpoint:
    path: /~/billing/meters/{meterId}
    method: POST
- name: billing_meter_get
  endpoint:
    path: /~/billing/meters/{meterId}
    method: GET
- name: billing_meter_delete
  endpoint:
    path: /~/billing/meters/{meterId}
    method: DELETE
- name: billing_meter_webhook_channels_test
  endpoint:
    path: /~/billing/meters/{meterId}/webhooks/channels/test
    method: POST
    data_selector: response_body
    params: {}
- name: billing_plans
  endpoint:
    path: /~/billing/plans
    method: POST
    data_selector: response_body
    params: {}
- name: list_billing_plans
  endpoint:
    path: /~/billing/plans
    method: GET
    data_selector: response_body
    params: {}
- name: billing_custom_plan
  endpoint:
    path: /~/billing/plans
    method: GET
    data_selector: ''
    params: {}
- name: update_billing_custom_plan
  endpoint:
    path: /~/billing/plans/{planId}
    method: POST
    data_selector: ''
    params: {}
- name: get_billing_custom_plan
  endpoint:
    path: /~/billing/plans/{planId}
    method: GET
    data_selector: ''
    params: {}
- name: delete_billing_custom_plan
  endpoint:
    path: /~/billing/plans/{planId}
    method: DELETE
    data_selector: ''
    params: {}
- name: create_balance_transaction
  endpoint:
    path: /~/billing/reports/balance_transactions
    method: POST
    data_selector: ''
    params: {}
- name: balance_transactions
  endpoint:
    path: /~/billing/reports/balance_transactions
    method: POST
    data_selector: none
    params: {}
- name: chats
  endpoint:
    path: /~/chats
    method: GET
    data_selector: none
    params: {}
- name: update_chat
  endpoint:
    path: /~/chats/{chat_id}
    method: POST
    data_selector: none
    params: {}
- name: chat
  endpoint:
    path: /~/chats/{chat_id}
    method: POST
    data_selector: response
    params: {}
- name: chat
  endpoint:
    path: /~/chats/{chat_id}
    method: GET
    data_selector: response
    params: {}
- name: chat
  endpoint:
    path: /~/chats/{chat_id}
    method: DELETE
    data_selector: response
    params: {}
- name: MoesifPlan
  endpoint:
    path: /moesif/plans
    method: GET
    data_selector: plans
- name: ChargebeeBillingParams
  endpoint:
    path: /chargebee/billing-params
    method: GET
    data_selector: billing_params
- name: email_template
  endpoint:
    path: /email-templates
    method: GET
    data_selector: templates
- name: governance_rule
  endpoint:
    path: /governance-rules
    method: GET
    data_selector: rules
- name: events
  endpoint:
    path: /events
    method: POST
- name: events
  endpoint:
    path: /search/~/search/events
    method: POST
    data_selector: events
- name: count
  endpoint:
    path: /search/~/count/events
    method: POST
    data_selector: count
- name: items_reviews
  endpoint:
    path: /items/reviews/
    method: PATCH
    data_selector: items
- name: actions
  endpoint:
    path: /v1/actions
    method: POST
- name: actions_batch
  endpoint:
    path: /v1/actions/batch
    method: POST
- name: users
  endpoint:
    path: /v1/users
    method: POST
- name: users
  endpoint:
    path: /v1/users
    method: POST
    data_selector: users
    params: {}
- name: batch_users
  endpoint:
    path: /v1/users/batch
    method: POST
    data_selector: users
    params: {}
- name: companies
  endpoint:
    path: /v1/companies
    method: POST
    data_selector: companies
    params: {}
- name: companies_batch
  endpoint:
    path: /v1/companies/batch
    method: POST
    data_selector: companies
    params: {}
- name: subscriptions
  endpoint:
    path: /subscriptions
    method: POST
    data_selector: ''
    params: {}
- name: subscriptions_batch
  endpoint:
    path: /subscriptions/batch
    method: POST
    data_selector: ''
    params: {}
- name: config
  endpoint:
    path: /config
    method: GET
    data_selector: ''
    params: {}
- name: rules
  endpoint:
    path: /rules
    method: GET
    data_selector: ''
    params: {}
- name: billing_reports_properties
  endpoint:
    path: /v1/search/~/billing/reports/properties
    method: GET
    data_selector: anonymous
- name: billing_reports
  endpoint:
    path: /v1/~/billing/reports
    method: GET
    data_selector: anonymous
- name: billing_reports_metrics
  endpoint:
    path: /v1/~/billing/reports/metrics
    method: GET
    data_selector: anonymous
- name: billing_reports_metrics
  endpoint:
    path: /~/billing/reports/metrics
    method: GET
    data_selector: buckets
    params:
      from: string(date-time)
      to: string(date-time)
- name: billing_reports_properties
  endpoint:
    path: /~/billing/reports/properties/{field}
    method: GET
    data_selector: values
    params:
      from: string(date-time)
      to: string(date-time)
- name: update_companies
  endpoint:
    path: /search/~/companies
    method: POST
    data_selector: null
    params: {}
- name: companies_batch_update
  endpoint:
    path: /search/~/companies/batch
    method: POST
    data_selector: ''
    params: {}
- name: get_company
  endpoint:
    path: /search/~/companies/{id}
    method: GET
    data_selector: ''
    params: {}
- name: delete_company
  endpoint:
    path: /search/~/companies/{id}
    method: DELETE
    data_selector: ''
    params: {}
- name: count_companies
  endpoint:
    path: /search/~/count/companies
    method: POST
    data_selector: ''
    params:
      app_id: string
- name: count_companies
  endpoint:
    path: /search/~/count/companies
    method: POST
- name: search_company_metrics
  endpoint:
    path: /search/~/search/companymetrics/companies
    method: POST
- name: get_company_subscriptions
  endpoint:
    path: /search/~/companies/{id}/subscriptions
    method: GET
- name: create_subscription
  endpoint:
    path: /search/~/subscriptions
    method: POST
- name: subscriptions
  endpoint:
    path: /v1/search/~/subscriptions
    method: POST
- name: subscription
  endpoint:
    path: /v1/search/~/subscriptions
    method: POST
    data_selector: data
- name: batchCreateSubscriptions
  endpoint:
    path: /v1/search/~/subscriptions/batch
    method: POST
    data_selector: subscriptions
- name: subscription
  endpoint:
    path: /v1/search/~/subscriptions/batch
    method: POST
    data_selector: subscriptions
    params: {}
- name: subscriptions_batch
  endpoint:
    path: /search/~/subscriptions/batch
    method: POST
    data_selector: items
- name: get_subscription
  endpoint:
    path: /search/~/subscriptions/{id}
    method: GET
    data_selector: subscription
- name: count_events
  endpoint:
    path: /search/~/count/events
    method: POST
    params:
      from: '2019-08-24T14:15:22Z'
      to: '2019-08-24T14:15:22Z'
- name: get_event
  endpoint:
    path: /search/~/events/{id}
    method: GET
    params:
      event_time: '2019-08-24T14:15:22Z'
- name: search_events
  endpoint:
    path: /search/~/search/events
    method: POST
    params:
      from: '2019-08-24T14:15:22Z'
      to: '2019-08-24T14:15:22Z'
- name: search_events
  endpoint:
    path: /search/~/search/events
    method: POST
    data_selector: response.hits
    params:
      from: string(date-time)
      to: string(date-time)
- name: search_public_workspaces
  endpoint:
    path: /search/~/workspaces/{workspaceId}/search
    method: POST
    data_selector: response.hits
    params:
      from: string(date-time)
      to: string(date-time)
      workspaceId: string
- name: count_users
  endpoint:
    path: /search/~/count/users
    method: POST
    data_selector: response
    params:
      app_id: string
- name: user_metrics
  endpoint:
    path: /v1/search/~/search/usermetrics/users
    method: POST
    data_selector: response
    params: {}
- name: update_user
  endpoint:
    path: /v1/search/~/users
    method: POST
    data_selector: response
    params: {}
- name: batch_update_users
  endpoint:
    path: /v1/search/~/users/batch
    method: POST
    data_selector: response
    params: {}
- name: update_users_batch
  endpoint:
    path: /search/~/users/batch
    method: POST
    data_selector: ''
    params: {}
- name: get_user
  endpoint:
    path: /search/~/users/{id}
    method: GET
    data_selector: ''
    params: {}
- name: delete_user
  endpoint:
    path: /search/~/users/{id}
    method: DELETE
    data_selector: ''
    params: {}
- name: get_user_properties
  endpoint:
    path: /search/~/mappings/users/properties
    method: GET
    data_selector: ''
    params:
      app_id: string
- name: user_properties
  endpoint:
    path: /v1/search/~/mappings/users/properties
    method: GET
    data_selector: ''
    params:
      app_id: string
- name: events_request_body_properties
  endpoint:
    path: /v1/search/~/mappings/events/request/body/properties
    method: GET
    data_selector: ''
    params:
      app_id: string
      from: string(date-time)
      to: string(date-time)
- name: events_response_body_properties
  endpoint:
    path: /v1/search/~/mappings/events/response/body/properties
    method: GET
    data_selector: ''
    params:
      app_id: string
      from: string(date-time)
      to: string(date-time)
- name: workspace_access_token
  endpoint:
    path: /v1/workspaces/access_token
    method: GET
    data_selector: ''
    params: {}
- name: public_workspace
  endpoint:
    path: /v1/workspaces/public/{id}
    method: GET
    data_selector: ''
    params: {}
- name: workspace
  endpoint:
    path: /workspaces/public/{id}
    method: GET
    data_selector: workspace
- name: workspaces
  endpoint:
    path: /~/workspaces
    method: POST
    data_selector: string
    params: {}
- name: getWorkspaces
  endpoint:
    path: /~/workspaces
    method: GET
    data_selector: string
    params:
      take: integer(int32)
      access: array[string]
- name: getWorkspaceTemplates
  endpoint:
    path: /~/workspaces/templates
    method: GET
    data_selector: string
    params: {}
- name: workspace_templates
  endpoint:
    path: /~/workspaces/templates
    method: GET
    data_selector: '*'
- name: workspace
  endpoint:
    path: /~/workspaces/{id}
    method: GET
    data_selector: ''
    params: {}
- name: create_comment
  endpoint:
    path: /~/workspaces/{id}/comments
    method: POST
    data_selector: ''
    params: {}
- name: delete_workspace
  endpoint:
    path: /~/workspaces/{id}
    method: DELETE
    data_selector: ''
    params: {}
- name: comments
  endpoint:
    path: /~/workspaces/{id}/comments
    method: GET
    data_selector: comments
    params: {}
- name: create_comment
  endpoint:
    path: /~/workspaces/{id}/comments
    method: POST
    data_selector: comment
    params: {}
- name: update_comment
  endpoint:
    path: /~/workspaces/{id}/comments/{commentId}
    method: POST
    data_selector: comment
    params: {}
- name: delete_comment
  endpoint:
    path: /~/workspaces/{id}/comments/{commentId}
    method: DELETE
    data_selector: comment
    params: {}
- name: update_app
  endpoint:
    path: /~/apps/{id}
    method: POST
    data_selector: body
- name: delete_app
  endpoint:
    path: /~/apps/{id}
    method: DELETE
    data_selector: body
- name: create_moesif_plan
  endpoint:
    path: /~/billing/catalog/plans
    method: POST
    data_selector: body
- name: addApp
  endpoint:
    path: /~/apps
    method: POST
    data_selector: response
    params: {}
- name: getApps
  endpoint:
    path: /~/apps
    method: GET
    data_selector: response
    params:
      take: integer(int32)
- name: deleteACLPermissions
  endpoint:
    path: /~/workspaces/{id}/policy/acl
    method: DELETE
    data_selector: response
    params:
      grantee: string
- name: addACLPermission
  endpoint:
    path: /~/workspaces/{id}/policy/acl
    method: POST
    data_selector: response
    params: {}
- name: billing_plans
  endpoint:
    path: /~/billing/catalog/plans
    method: POST
    data_selector: ''
    params: {}
- name: list_billing_plans
  endpoint:
    path: /~/billing/catalog/plans
    method: GET
    data_selector: ''
    params: {}
- name: moesif_plan
  endpoint:
    path: /v1/~/billing/catalog/plans/{id}
    method: GET
    params:
      provider: string
- name: moesif_plan_delete
  endpoint:
    path: /v1/~/billing/catalog/plans/{id}
    method: DELETE
    params:
      provider: string
- name: moesif_plan_update
  endpoint:
    path: /v1/~/billing/catalog/plans/{id}
    method: PUT
    params:
      provider: string
- name: billing_catalog_plans
  endpoint:
    path: /~/billing/catalog/plans/{id}
    method: PUT
    data_selector: ''
    params:
      provider: string
- name: prices
  endpoint:
    path: /~/billing/catalog/prices
    method: POST
    data_selector: price
    params:
      provider: string
- name: list_prices
  endpoint:
    path: /~/billing/catalog/prices
    method: GET
    data_selector: prices
    params: {}
- name: moesif_price
  endpoint:
    path: /~/billing/catalog/prices/{id}
    method: GET
    data_selector: anonymous
    params:
      provider: string
- name: delete_moesif_price
  endpoint:
    path: /~/billing/catalog/prices/{id}
    method: DELETE
    params:
      provider: string
- name: update_moesif_price
  endpoint:
    path: /~/billing/catalog/prices/{id}
    method: PUT
    params:
      provider: string
- name: billing_catalog_prices
  endpoint:
    path: /~/billing/catalog/prices/{id}
    method: PUT
    data_selector: ''
    params:
      provider: string
- name: billing_catalog_uom
  endpoint:
    path: /~/billing/catalog/uom
    method: GET
    data_selector: ''
    params:
      provider: string
- name: billing_meters
  endpoint:
    path: /~/billing/meters
    method: POST
    data_selector: result
- name: billing_meter
  endpoint:
    path: /~/billing/meters
    method: POST
    data_selector: null
    params: {}
- name: list_billing_meters
  endpoint:
    path: /~/billing/meters
    method: GET
    data_selector: null
    params: {}
- name: billing_meters
  endpoint:
    path: /v1/~/billing/meters/{meterId}
    method: POST
    data_selector: string
    params: {}
- name: billing_meters
  endpoint:
    path: /~/billing/meters/{meterId}
    method: POST
- name: billing_meter
  endpoint:
    path: /~/billing/meters/{meterId}
    method: POST
    data_selector: null
    params: {}
- name: billing_meter_get
  endpoint:
    path: /~/billing/meters/{meterId}
    method: GET
    data_selector: null
    params: {}
- name: billing_meter_delete
  endpoint:
    path: /~/billing/meters/{meterId}
    method: DELETE
    data_selector: null
    params: {}
- name: billing_meters_webhook
  endpoint:
    path: /~/billing/meters/{meterId}/webhooks/channels/test
    method: POST
    data_selector: response_body
- name: billing_plans
  endpoint:
    path: /~/billing/plans
    method: POST
    data_selector: response_body
- name: list_billing_plans
  endpoint:
    path: /~/billing/plans
    method: GET
    data_selector: response_body
- name: billing_custom_plan
  endpoint:
    path: /~/billing/plans
    method: GET
    data_selector: anonymous
- name: billing_custom_plan_update
  endpoint:
    path: /~/billing/plans/{planId}
    method: POST
    data_selector: none
- name: billing_custom_plan_by_id
  endpoint:
    path: /~/billing/plans/{planId}
    method: GET
    data_selector: none
- name: delete_billing_custom_plan
  endpoint:
    path: /~/billing/plans/{planId}
    method: DELETE
    data_selector: none
- name: balance_transactions
  endpoint:
    path: /~/billing/reports/balance_transactions
    method: POST
    data_selector: none
    params: {}
- name: chats
  endpoint:
    path: /~/chats
    method: GET
    data_selector: none
    params: {}
- name: update_chat
  endpoint:
    path: /~/chats/{chat_id}
    method: POST
    data_selector: none
    params: {}
- name: cohort
  endpoint:
    path: /~/cohorts
    method: POST
    data_selector: ''
    params: {}
- name: chats
  endpoint:
    path: /~/chats/{chat_id}
    method: POST
- name: get_chat
  endpoint:
    path: /~/chats/{chat_id}
    method: GET
- name: delete_chat
  endpoint:
    path: /~/chats/{chat_id}
    method: DELETE
- name: create_cohort
  endpoint:
    path: /~/cohorts
    method: POST
- name: ChargebeeBillingParams
  endpoint:
    params:
      cohort_type: query
- name: events
  endpoint:
    path: /events
    method: POST
    data_selector: event
    params: {}
- name: events
  endpoint:
    path: /search/~/search/events
    method: POST
    data_selector: hits.hits
    params:
      from: -1d
      to: now
- name: count_events
  endpoint:
    path: /search/~/count/events
    method: POST
    data_selector: count
    params:
      from: -1M
      to: now
- name: events_batch
  endpoint:
    path: /v1/events/batch
    method: POST
- name: users
  endpoint:
    path: /v1/users
    method: POST
    data_selector: ''
    params: {}
- name: batch_users
  endpoint:
    path: /v1/users/batch
    method: POST
    data_selector: ''
    params: {}
- name: actions
  endpoint:
    path: /v1/actions
    method: POST
    data_selector: action_name
- name: actions_batch
  endpoint:
    path: /v1/actions/batch
    method: POST
    data_selector: action_name
- name: users
  endpoint:
    path: /v1/users
    method: POST
    data_selector: user
- name: companies
  endpoint:
    path: /v1/companies
    method: POST
    data_selector: null
    params: {}
- name: companies_batch
  endpoint:
    path: /v1/companies/batch
    method: POST
    data_selector: null
    params: {}
- name: billing_reports_properties
  endpoint:
    path: /v1/search/~/billing/reports/properties
    method: GET
- name: billing_reports
  endpoint:
    path: /v1/~/billing/reports
    method: GET
- name: billing_reports_metrics
  endpoint:
    path: /v1/~/billing/reports/metrics
    method: GET
- name: billing_reports_metrics
  endpoint:
    path: /~/billing/reports/metrics
    method: GET
    params:
      from: string(date-time)
      to: string(date-time)
- name: billing_reports_properties
  endpoint:
    path: /~/billing/reports/properties/{field}
    method: GET
    params:
      from: string(date-time)
      to: string(date-time)
- name: update_companies
  endpoint:
    path: /search/~/companies
    method: POST
    params: {}
- name: companies_batch_update
  endpoint:
    path: /v1/search/~/companies/batch
    method: POST
    data_selector: null
    params: {}
- name: get_company
  endpoint:
    path: /v1/search/~/companies/{id}
    method: GET
    data_selector: null
    params: {}
- name: delete_company
  endpoint:
    path: /v1/search/~/companies/{id}
    method: DELETE
    data_selector: null
    params: {}
- name: count_companies
  endpoint:
    path: /v1/search/~/count/companies
    method: POST
    data_selector: null
    params:
      app_id: string
- name: subscriptions
  endpoint:
    path: /v1/search/~/subscriptions
    method: POST
    data_selector: body
- name: count_companies
  endpoint:
    path: /search/~/count/companies
    method: POST
    data_selector: None
- name: search_company_metrics
  endpoint:
    path: /search/~/search/companymetrics/companies
    method: POST
    data_selector: None
- name: company_subscriptions
  endpoint:
    path: /search/~/companies/{id}/subscriptions
    method: GET
    data_selector: None
- name: create_subscription
  endpoint:
    path: /search/~/subscriptions
    method: POST
    data_selector: None
- name: subscription
  endpoint:
    path: /search/~/subscriptions
    method: POST
    data_selector: subscription
    params: {}
- name: subscriptions
  endpoint:
    path: /v1/search/~/subscriptions/batch
    method: POST
    data_selector: subscription
    params: {}
- name: subscriptions_batch
  endpoint:
    path: /search/~/subscriptions/batch
    method: POST
    data_selector: items
    params: {}
- name: get_subscription
  endpoint:
    path: /search/~/subscriptions/{id}
    method: GET
    data_selector: subscription
    params: {}
- name: subscriptions
  endpoint:
    path: /v1/search/~/subscriptions/batch
    method: POST
    data_selector: null
    params: {}
- name: search_events
  endpoint:
    path: /search/~/search/events
    method: POST
    params:
      from: string(date-time)
      to: string(date-time)
- name: search_workspaces
  endpoint:
    path: /search/~/workspaces/{workspaceId}/search
    method: POST
    params:
      from: string(date-time)
      to: string(date-time)
      workspaceId: string
- name: count_users
  endpoint:
    path: /search/~/count/users
    method: POST
    params:
      app_id: string
- name: count_events
  endpoint:
    path: /v1/search/~/count/events
    method: POST
    params:
      from: '2019-08-24T14:15:22Z'
      to: '2019-08-24T14:15:22Z'
- name: get_event
  endpoint:
    path: /v1/search/~/events/{id}
    method: GET
    params:
      event_time: '2019-08-24T14:15:22Z'
- name: search_events
  endpoint:
    path: /v1/search/~/search/events
    method: POST
    params:
      from: '2019-08-24T14:15:22Z'
      to: '2019-08-24T14:15:22Z'
- name: user_metrics
  endpoint:
    path: /search/~/search/usermetrics/users
    method: POST
    data_selector: response
    params: {}
- name: update_user
  endpoint:
    path: /search/~/users
    method: POST
    data_selector: response
    params: {}
- name: batch_update_users
  endpoint:
    path: /search/~/users/batch
    method: POST
    data_selector: response
    params: {}
- name: update_users
  endpoint:
    path: /v1/search/~/users/batch
    method: POST
- name: get_user
  endpoint:
    path: /v1/search/~/users/{id}
    method: GET
- name: delete_user
  endpoint:
    path: /v1/search/~/users/{id}
    method: DELETE
- name: get_properties
  endpoint:
    path: /v1/search/~/mappings/users/properties
    method: GET
- name: workspaces
  endpoint:
    path: /workspaces/public/{id}
    method: GET
    data_selector: records
    params: {}
- name: user_properties
  endpoint:
    path: /search/~/mappings/users/properties
    method: GET
    data_selector: None
    params:
      app_id: string
- name: event_request_body_properties
  endpoint:
    path: /search/~/mappings/events/request/body/properties
    method: GET
    data_selector: None
    params:
      app_id: string
      from: '2019-08-24T14:21:32Z'
      to: '2019-08-24T14:21:32Z'
- name: event_response_body_properties
  endpoint:
    path: /search/~/mappings/events/response/body/properties
    method: GET
    data_selector: None
    params:
      app_id: string
      from: '2019-08-24T14:21:32Z'
      to: '2019-08-24T14:21:32Z'
- name: workspace_access_token
  endpoint:
    path: /workspaces/access_token
    method: GET
    data_selector: None
    params: {}
- name: public_workspace
  endpoint:
    path: /workspaces/public/{id}
    method: GET
    data_selector: None
    params: {}
- name: workspaces
  endpoint:
    path: /~/workspaces
    method: POST
    data_selector: ''
    params: {}
- name: workspaces_get
  endpoint:
    path: /~/workspaces
    method: GET
    data_selector: ''
    params:
      take: '0'
      access:
      - string
- name: workspaces_templates
  endpoint:
    path: /~/workspaces/templates
    method: GET
    data_selector: ''
    params: {}
- name: workspace_templates
  endpoint:
    path: /~/workspaces/templates
    method: GET
- name: update_workspace
  endpoint:
    path: /~/workspaces/{id}
    method: POST
- name: workspace
  endpoint:
    path: /~/workspaces/{id}
    method: GET
    data_selector: response
    params: {}
- name: workspace_update
  endpoint:
    path: /~/workspaces/{id}
    method: POST
    data_selector: response
    params: {}
- name: workspace_delete
  endpoint:
    path: /~/workspaces/{id}
    method: DELETE
    data_selector: response
    params: {}
- name: create_comment
  endpoint:
    path: /~/workspaces/{id}/comments
    method: POST
    data_selector: response
    params: {}
- name: comments
  endpoint:
    path: /~/workspaces/{id}/comments
    method: GET
    data_selector: ''
    params:
      id: path
- name: create_comment
  endpoint:
    path: /~/workspaces/{id}/comments
    method: POST
    data_selector: ''
    params:
      id: path
      body: body
- name: update_comment
  endpoint:
    path: /~/workspaces/{id}/comments/{commentId}
    method: POST
    data_selector: ''
    params:
      id: path
      commentId: path
      body: body
- name: delete_comment
  endpoint:
    path: /~/workspaces/{id}/comments/{commentId}
    method: DELETE
    data_selector: ''
    params:
      id: path
      commentId: path
- name: addApp
  endpoint:
    path: /~/apps
    method: POST
    data_selector: success
    params: {}
- name: getApps
  endpoint:
    path: /~/apps
    method: GET
    data_selector: success
    params:
      take: '0'
- name: deleteACLPermissions
  endpoint:
    path: /~/workspaces/{id}/policy/acl
    method: DELETE
    data_selector: success
    params:
      grantee: string
- name: update_app
  endpoint:
    path: /~/apps/{id}
    method: POST
    data_selector: body
- name: delete_app
  endpoint:
    path: /~/apps/{id}
    method: DELETE
    data_selector: body
- name: create_moesif_plan
  endpoint:
    path: /~/billing/catalog/plans
    method: POST
    data_selector: body
- name: billing_catalog_plans
  endpoint:
    path: /~/billing/catalog/plans
    method: POST
    data_selector: created_at
    params: {}
- name: list_billing_catalog_plans
  endpoint:
    path: /~/billing/catalog/plans
    method: GET
    data_selector: records
    params: {}
- name: billing_catalog_plans
  endpoint:
    path: /~/billing/catalog/plans/{id}
    method: PUT
    data_selector: response
    params:
      provider: string
- name: moesif_plan
  endpoint:
    path: /~/billing/catalog/plans/{id}
    method: GET
    data_selector: plan
    params:
      provider: string
- name: delete_moesif_plan
  endpoint:
    path: /~/billing/catalog/plans/{id}
    method: DELETE
    data_selector: plan
    params:
      provider: string
- name: update_moesif_plan
  endpoint:
    path: /~/billing/catalog/plans/{id}
    method: PUT
    data_selector: plan
    params:
      provider: string
- name: billing_catalog_prices
  endpoint:
    path: /~/billing/catalog/prices
    method: POST
    data_selector: null
    params:
      provider: string
- name: list_billing_catalog_prices
  endpoint:
    path: /~/billing/catalog/prices
    method: GET
    data_selector: null
    params:
      provider: string
      limit: null
- name: moesif_price
  endpoint:
    path: /~/billing/catalog/prices/{id}
    method: GET
    data_selector: '*'
    params:
      provider: string
- name: delete_moesif_price
  endpoint:
    path: /~/billing/catalog/prices/{id}
    method: DELETE
    data_selector: null
    params:
      provider: string
- name: update_moesif_price
  endpoint:
    path: /~/billing/catalog/prices/{id}
    method: PUT
    data_selector: null
    params:
      provider: string
- name: billing_meters
  endpoint:
    path: /v1/~/billing/meters
    method: POST
- name: billing_catalog_prices
  endpoint:
    path: /~/billing/catalog/prices/{id}
    method: PUT
- name: billing_catalog_uom
  endpoint:
    path: /~/billing/catalog/uom
    method: GET
- name: billing_meter
  endpoint:
    path: /~/billing/meters
    method: POST
    data_selector: null
    params: {}
- name: list_billing_meters
  endpoint:
    path: /~/billing/meters
    method: GET
    data_selector: null
    params: {}
- name: update_meter
  endpoint:
    path: /~/billing/meters/{meterId}
    method: POST
    data_selector: response
    params: {}
- name: billing_meter
  endpoint:
    path: /~/billing/meters/{meterId}
    method: POST
- name: billing_meter
  endpoint:
    path: /~/billing/meters/{meterId}
    method: POST
- name: billing_meter_get
  endpoint:
    path: /~/billing/meters/{meterId}
    method: GET
- name: billing_meter_delete
  endpoint:
    path: /~/billing/meters/{meterId}
    method: DELETE
- name: billing_plans
  endpoint:
    path: /~/billing/plans
    method: GET
    data_selector: records
- name: billing_plan
  endpoint:
    path: /~/billing/plans/{planId}
    method: GET
    data_selector: records
- name: create_balance_transaction
  endpoint:
    path: /~/billing/reports/balance_transactions
    method: POST
    data_selector: records
- name: billing_meters_webhook_channels_test
  endpoint:
    path: /~/billing/meters/{meterId}/webhooks/channels/test
    method: POST
    data_selector: response_body
    params: {}
- name: billing_plans
  endpoint:
    path: /~/billing/plans
    method: POST
    data_selector: response_body
    params: {}
- name: list_billing_plans
  endpoint:
    path: /~/billing/plans
    method: GET
    data_selector: response_body
    params: {}
- name: balance_transactions
  endpoint:
    path: /~/billing/reports/balance_transactions
    method: POST
    data_selector: none
    params: {}
- name: chats
  endpoint:
    path: /~/chats
    method: GET
    data_selector: none
    params: {}
- name: chats
  endpoint:
    path: /~/chats/{chat_id}
    method: POST
- name: chats_get
  endpoint:
    path: /~/chats/{chat_id}
    method: GET
- name: chats_delete
  endpoint:
    path: /~/chats/{chat_id}
    method: DELETE
- name: cohorts
  endpoint:
    path: /~/cohorts
    method: POST
- name: cohorts
  endpoint:
    path: /~/cohorts/{cohortId}
    method: GET
    params:
      cohort_type: string
- name: delete_cohort
  endpoint:
    path: /~/cohorts/{cohortId}
    method: DELETE
    params: {}
- name: cohorts
  endpoint:
    path: /~/cohorts
    method: POST
    data_selector: ''
    params: {}
- name: get_cohorts
  endpoint:
    path: /~/cohorts
    method: GET
    data_selector: ''
    params:
      cohort_type: string
- name: update_cohort
  endpoint:
    path: /~/cohorts/{cohortId}
    method: POST
    data_selector: ''
    params: {}
- name: billing_reports
  endpoint:
    path: /billing/reports
    method: GET
    data_selector: records
    params: {}
- name: users
  endpoint:
    path: /users
    method: GET
    data_selector: records
    params: {}
- name: createEmailTemplate
  endpoint:
    path: /createEmailTemplate
    method: POST
- name: getEmailTemplates
  endpoint:
    path: /getEmailTemplates
    method: GET
- name: updateEmailTemplate
  endpoint:
    path: /updateEmailTemplate
    method: PUT
- name: getEmailTemplate
  endpoint:
    path: /getEmailTemplate
    method: GET
- name: deleteEmailTemplate
  endpoint:
    path: /deleteEmailTemplate
    method: DELETE
- name: findObjects
  endpoint:
    path: /findObjects
    method: GET
- name: getGovernanceRules
  endpoint:
    path: /getGovernanceRules
    method: GET
- name: updateGovernanceRule
  endpoint:
    path: /updateGovernanceRule
    method: PUT
- name: getGovernanceRule
  endpoint:
    path: /getGovernanceRule
    method: GET
- name: deleteGovernanceRule
  endpoint:
    path: /deleteGovernanceRule
    method: DELETE
- name: events
  endpoint:
    path: /events
    method: POST
    data_selector: event
    params: {}
- name: events
  endpoint:
    path: /search/~/search/events
    method: POST
    data_selector: ''
    params:
      from: -1d
      to: now
- name: count_events
  endpoint:
    path: /search/~/count/events
    method: POST
    data_selector: ''
    params:
      from: -1M
      to: now
- name: event
  endpoint:
    path: /events/batch
    method: POST
    data_selector: '[]'
    params: {}
- name: actions
  endpoint:
    path: /v1/actions
    method: POST
- name: actions_batch
  endpoint:
    path: /v1/actions/batch
    method: POST
- name: users
  endpoint:
    path: /v1/users
    method: POST
- name: users
  endpoint:
    path: /v1/users
    method: POST
    data_selector: user_id
    params: {}
- name: users_batch
  endpoint:
    path: /v1/users/batch
    method: POST
    data_selector: user_id
    params: {}
- name: companies
  endpoint:
    path: /v1/companies
    method: POST
    data_selector: null
    params: {}
- name: companies_batch
  endpoint:
    path: /v1/companies/batch
    method: POST
    data_selector: null
    params: {}
- name: billing_reports_properties
  endpoint:
    path: /v1/search/~/billing/reports/properties
    method: GET
- name: billing_reports
  endpoint:
    path: /v1/~/billing/reports
    method: GET
- name: billing_reports_metrics
  endpoint:
    path: /v1/~/billing/reports/metrics
    method: GET
- name: billing_reports_metrics
  endpoint:
    path: /~/billing/reports/metrics
    method: GET
    data_selector: buckets
    params:
      from: '2025-03-18T20:21:32.116Z'
      to: '2025-03-18T20:21:32.116Z'
- name: billing_reports_properties
  endpoint:
    path: /~/billing/reports/properties/{field}
    method: GET
    data_selector: values
    params:
      from: '2025-03-18T20:21:32.116Z'
      to: '2025-03-18T20:21:32.116Z'
- name: update_companies
  endpoint:
    path: /search/~/companies
    method: POST
    data_selector: success
    params: {}
- name: companies_batch
  endpoint:
    path: /search/~/companies/batch
    method: POST
    data_selector: none
    params: {}
- name: get_company
  endpoint:
    path: /search/~/companies/{id}
    method: GET
    data_selector: none
    params: {}
- name: delete_company
  endpoint:
    path: /search/~/companies/{id}
    method: DELETE
    data_selector: none
    params: {}
- name: count_companies
  endpoint:
    path: /search/~/count/companies
    method: POST
    data_selector: none
    params:
      app_id: string
- name: count_companies
  endpoint:
    path: /search/~/count/companies
    method: POST
    data_selector: response
    params: {}
- name: search_company_metrics
  endpoint:
    path: /search/~/search/companymetrics/companies
    method: POST
    data_selector: response
    params: {}
- name: get_company_subscriptions
  endpoint:
    path: /search/~/companies/{id}/subscriptions
    method: GET
    data_selector: response
    params:
      id: path
- name: create_subscription
  endpoint:
    path: /search/~/subscriptions
    method: POST
    data_selector: response
    params: {}
- name: subscriptions
  endpoint:
    path: /v1/search/~/subscriptions
    method: POST
    data_selector: subscription
    params: {}
- name: subscription
  endpoint:
    path: /search/~/subscriptions
    method: POST
    data_selector: subscription
    params: {}
- name: subscriptions
  endpoint:
    path: /batch
    method: POST
    data_selector: items
- name: subscriptions
  endpoint:
    path: /v1/search/~/subscriptions/batch
    method: POST
    data_selector: result
    params: {}
- name: subscriptions
  endpoint:
    path: /search/~/subscriptions/batch
    method: POST
    data_selector: items
- name: get_subscription
  endpoint:
    path: /search/~/subscriptions/{id}
    method: GET
    data_selector: ''
- name: count_events
  endpoint:
    path: /search/~/count/events
    method: POST
    params:
      from: '2019-08-24T14:15:22Z'
      to: '2019-08-24T14:15:22Z'
- name: get_event
  endpoint:
    path: /search/~/events/{id}
    method: GET
    params:
      event_time: '2019-08-24T14:15:22Z'
- name: search_events
  endpoint:
    path: /search/~/search/events
    method: POST
    params:
      from: '2019-08-24T14:15:22Z'
      to: '2019-08-24T14:15:22Z'
- name: search_events
  endpoint:
    path: /search/~/search/events
    method: POST
    data_selector: ''
    params:
      from: string(date-time)
      to: string(date-time)
- name: search_workspace_events
  endpoint:
    path: /search/~/workspaces/{workspaceId}/search
    method: POST
    data_selector: ''
    params:
      from: string(date-time)
      to: string(date-time)
      workspaceId: string
- name: count_users
  endpoint:
    path: /search/~/count/users
    method: POST
    data_selector: ''
    params:
      app_id: string
- name: usermetrics_users
  endpoint:
    path: /v1/search/~/search/usermetrics/users
    method: POST
    data_selector: body
- name: update_users
  endpoint:
    path: /v1/search/~/users
    method: POST
    data_selector: body
- name: batch_update_users
  endpoint:
    path: /v1/search/~/users/batch
    method: POST
    data_selector: body
- name: update_users
  endpoint:
    path: /v1/search/~/users/batch
    method: POST
    data_selector: ''
    params: {}
- name: get_user
  endpoint:
    path: /v1/search/~/users/{id}
    method: GET
    data_selector: ''
    params: {}
- name: delete_user
  endpoint:
    path: /v1/search/~/users/{id}
    method: DELETE
    data_selector: ''
    params: {}
- name: get_properties
  endpoint:
    path: /v1/search/~/mappings/users/properties
    method: GET
    data_selector: ''
    params:
      app_id: string
- name: workspace
  endpoint:
    path: /workspaces/public/{id}
    method: GET
    data_selector: data
    params: {}
- name: create_workspace
  endpoint:
    path: /~/workspaces
    method: POST
    data_selector: data
    params: {}
- name: user_property_mappings
  endpoint:
    path: /v1/search/~/mappings/users/properties
    method: GET
    data_selector: properties
    params:
      app_id: string
- name: event_request_body_properties
  endpoint:
    path: /v1/search/~/mappings/events/request/body/properties
    method: GET
    data_selector: properties
    params:
      app_id: string
      from: string(date-time)
      to: string(date-time)
- name: event_response_body_properties
  endpoint:
    path: /v1/search/~/mappings/events/response/body/properties
    method: GET
    data_selector: properties
    params:
      app_id: string
      from: string(date-time)
      to: string(date-time)
- name: workspace_access_token
  endpoint:
    path: /v1/workspaces/access_token
    method: GET
    data_selector: token
    params: {}
- name: public_workspace
  endpoint:
    path: /v1/workspaces/public/{id}
    method: GET
    data_selector: workspace
    params: {}
- name: workspace_templates
  endpoint:
    path: /~/workspaces/templates
    method: GET
    data_selector: anonymous
- name: update_workspace
  endpoint:
    path: /~/workspaces/{id}
    method: POST
    data_selector: body
- name: workspaces
  endpoint:
    path: /~/workspaces
    method: POST
    data_selector: ''
    params: {}
- name: get_workspaces
  endpoint:
    path: /~/workspaces
    method: GET
    data_selector: ''
    params:
      take: '0'
      access:
      - string
- name: get_workspace_templates
  endpoint:
    path: /~/workspaces/templates
    method: GET
    data_selector: ''
    params: {}
- name: workspace
  endpoint:
    path: /~/workspaces/{id}
    method: GET
    data_selector: ''
    params: {}
- name: create_workspace
  endpoint:
    path: /~/workspaces/{id}
    method: POST
    data_selector: ''
    params: {}
- name: delete_workspace
  endpoint:
    path: /~/workspaces/{id}
    method: DELETE
    data_selector: ''
    params: {}
- name: create_comment
  endpoint:
    path: /~/workspaces/{id}/comments
    method: POST
    data_selector: ''
    params: {}
- name: comments
  endpoint:
    path: /~/workspaces/{id}/comments
    method: GET
    data_selector: comments
    params:
      id: '{id}'
- name: create_comment
  endpoint:
    path: /~/workspaces/{id}/comments
    method: POST
    data_selector: comment
    params:
      id: '{id}'
      body: CommentItem
- name: update_comment
  endpoint:
    path: /~/workspaces/{id}/comments/{commentId}
    method: POST
    data_selector: comment
    params:
      id: '{id}'
      commentId: '{commentId}'
      body: CommentItem
- name: delete_comment
  endpoint:
    path: /~/workspaces/{id}/comments/{commentId}
    method: DELETE
    data_selector: comment
    params:
      id: '{id}'
      commentId: '{commentId}'
- name: create_app
  endpoint:
    path: /~/apps
    method: POST
    data_selector: none
    params: {}
- name: get_apps
  endpoint:
    path: /~/apps
    method: GET
    data_selector: none
    params:
      take: '0'
- name: delete_acl_permissions
  endpoint:
    path: /~/workspaces/{id}/policy/acl
    method: DELETE
    data_selector: none
    params:
      grantee: string
- name: apps
  endpoint:
    path: /~/apps/{id}
    method: POST
    data_selector: body
    params: {}
- name: delete_app
  endpoint:
    path: /~/apps/{id}
    method: DELETE
    data_selector: body
    params: {}
- name: billing_catalog_plans
  endpoint:
    path: /~/billing/catalog/plans
    method: POST
    data_selector: body
    params:
      provider: string
- name: plans
  endpoint:
    path: /~/billing/catalog/plans
    method: POST
    data_selector: name
    params:
      provider: string
- name: list_plans
  endpoint:
    path: /~/billing/catalog/plans
    method: GET
    data_selector: '[]'
- name: moesif_plan
  endpoint:
    path: /~/billing/catalog/plans/{id}
    method: GET
    data_selector: records
    params:
      provider: string
- name: moesif_plan_delete
  endpoint:
    path: /~/billing/catalog/plans/{id}
    method: DELETE
    data_selector: records
    params:
      provider: string
- name: moesif_plan_update
  endpoint:
    path: /~/billing/catalog/plans/{id}
    method: PUT
    data_selector: records
    params:
      provider: string
- name: billing_catalog_plan
  endpoint:
    path: /~/billing/catalog/plans/{id}
    method: PUT
    data_selector: records
    params:
      provider: string
- name: prices
  endpoint:
    path: /~/billing/catalog/prices
    method: POST
    data_selector: ''
    params:
      provider: string
- name: list_prices
  endpoint:
    path: /~/billing/catalog/prices
    method: GET
    data_selector: ''
    params:
      provider: string
      limit: ''
- name: update_price
  endpoint:
    path: /~/billing/catalog/prices/{id}
    method: PUT
    data_selector: null
    params:
      provider: string
- name: get_uom
  endpoint:
    path: /~/billing/catalog/uom
    method: GET
    data_selector: null
    params:
      provider: string
- name: moesif_price
  endpoint:
    path: /~/billing/catalog/prices/{id}
    method: GET
    data_selector: ''
    params:
      provider: string
- name: delete_moesif_price
  endpoint:
    path: /~/billing/catalog/prices/{id}
    method: DELETE
    data_selector: ''
    params:
      provider: string
- name: update_moesif_price
  endpoint:
    path: /~/billing/catalog/prices/{id}
    method: PUT
    data_selector: ''
    params:
      provider: string
- name: billing_meter
  endpoint:
    path: /~/billing/meters
    method: POST
    data_selector: response
- name: billing_meters
  endpoint:
    path: /~/billing/meters
    method: POST
    data_selector: ''
    params: {}
- name: list_billing_meters
  endpoint:
    path: /~/billing/meters
    method: GET
    data_selector: ''
    params: {}
- name: billing_meter
  endpoint:
    path: /~/billing/meters/{meterId}
    method: POST
    data_selector: ''
    params: {}
- name: billing_meter
  endpoint:
    path: /{meterId}
    method: POST
- name: billing_meter
  endpoint:
    path: /~/billing/meters/{meterId}
    method: POST
    data_selector: null
    params: {}
- name: billing_meter
  endpoint:
    path: /~/billing/meters/{meterId}
    method: GET
    data_selector: null
    params: {}
- name: billing_meter
  endpoint:
    path: /~/billing/meters/{meterId}
    method: DELETE
    data_selector: null
    params: {}
- name: billing_meters_webhooks
  endpoint:
    path: /~/billing/meters/{meterId}/webhooks/channels/test
    method: POST
    data_selector: response_body
- name: billing_plans
  endpoint:
    path: /~/billing/plans
    method: POST
    data_selector: response_body
- name: list_billing_plans
  endpoint:
    path: /~/billing/plans
    method: GET
    data_selector: response_body
- name: billing_custom_plan
  endpoint:
    path: /~/billing/plans
    method: GET
    data_selector: records
- name: update_billing_custom_plan
  endpoint:
    path: /~/billing/plans/{planId}
    method: POST
    data_selector: response
- name: get_billing_custom_plan
  endpoint:
    path: /~/billing/plans/{planId}
    method: GET
    data_selector: response
- name: delete_billing_custom_plan
  endpoint:
    path: /~/billing/plans/{planId}
    method: DELETE
    data_selector: response
- name: balance_transactions
  endpoint:
    path: /~/billing/reports/balance_transactions
    method: POST
    data_selector: none
    params: {}
- name: chats
  endpoint:
    path: /~/chats
    method: GET
    data_selector: none
    params: {}
- name: chats
  endpoint:
    path: /~/chats/{chat_id}
    method: POST
    data_selector: null
    params: {}
- name: chats
  endpoint:
    path: /~/chats/{chat_id}
    method: GET
    data_selector: null
    params: {}
- name: chats
  endpoint:
    path: /~/chats/{chat_id}
    method: DELETE
    data_selector: null
    params: {}
- name: cohorts
  endpoint:
    path: /~/cohorts
    method: POST
    data_selector: null
    params: {}
- name: cohorts
  endpoint:
    path: /~/cohorts
    method: POST
    data_selector: none
    params: {}
- name: get_cohorts
  endpoint:
    path: /~/cohorts
    method: GET
    data_selector: none
    params:
      cohort_type: string
- name: update_cohort
  endpoint:
    path: /~/cohorts/{cohortId}
    method: POST
    data_selector: none
    params: {}
- name: dashboard_copy
  endpoint:
    path: /~/dashboard/{id}/copy
    method: POST
    data_selector: ''
    params:
      id: path
- name: dashboards
  endpoint:
    path: /~/dashboards
    method: GET
    data_selector: ''
    params: {}
- name: cohorts
  endpoint:
    path: /~/cohorts/{cohortId}
    method: GET
    data_selector: records
    params:
      cohort_type: string
- name: delete_cohort
  endpoint:
    path: /~/cohorts/{cohortId}
    method: DELETE
    data_selector: null
    params: {}
- name: delete_sample_rate
  endpoint:
    path: /~/cohorts/{cohortId}/sample_rate
    method: DELETE
    data_selector: null
    params: {}
- name: delete_dashboard
  endpoint:
    path: /~/dashboard/{dashId}
    method: DELETE
    data_selector: null
    params: {}
- name: updateDashboard
  endpoint:
    path: /updateDashboard
    method: POST
    params:
      starting_unit: 0
      price: 0
- name: CreditBalanceMetric
  endpoint:
    path: /creditBalance
    method: GET
- name: search_events
  endpoint:
    path: /search/~/search/events
    method: POST
    data_selector: null
    params: {}
- name: search_count
  endpoint:
    path: /search/~/search/count
    method: POST
    data_selector: null
    params: {}
- name: getEmailTemplates
  endpoint:
    path: /api/email/templates
    method: GET
- name: createEmailTemplate
  endpoint:
    path: /api/email/templates
    method: POST
- name: updateEmailTemplate
  endpoint:
    path: /api/email/templates/{id}
    method: PUT
- name: getEmailTemplate
  endpoint:
    path: /api/email/templates/{id}
    method: GET
- name: deleteEmailTemplate
  endpoint:
    path: /api/email/templates/{id}
    method: DELETE
- name: getGovernanceRules
  endpoint:
    path: /api/governance/rules
    method: GET
- name: createGovernanceRule
  endpoint:
    path: /api/governance/rules
    method: POST
- name: updateGovernanceRule
  endpoint:
    path: /api/governance/rules/{id}
    method: PUT
- name: getGovernanceRule
  endpoint:
    path: /api/governance/rules/{id}
    method: GET
- name: deleteGovernanceRule
  endpoint:
    path: /api/governance/rules/{id}
    method: DELETE
- name: events
  endpoint:
    path: /events
    method: POST
    data_selector: event
    params: {}
- name: event
  endpoint:
    path: /v1/events/batch
    method: POST
    data_selector: request
    params: {}
- name: actions
  endpoint:
    path: /v1/actions
    method: POST
    data_selector: ''
    params: {}
- name: batch_actions
  endpoint:
    path: /v1/actions/batch
    method: POST
    data_selector: ''
    params: {}
- name: users
  endpoint:
    path: /v1/users
    method: POST
    data_selector: ''
    params: {}
- name: users
  endpoint:
    path: /v1/users
    method: POST
    data_selector: null
    params: {}
- name: users_batch
  endpoint:
    path: /v1/users/batch
    method: POST
    data_selector: null
    params: {}
- name: companies
  endpoint:
    path: /v1/companies
    method: POST
    data_selector: companies
- name: companies_batch
  endpoint:
    path: /v1/companies/batch
    method: POST
    data_selector: companies
- name: billing_reports_properties
  endpoint:
    path: /v1/search/~/billing/reports/properties
    method: GET
- name: billing_reports
  endpoint:
    path: /v1/~/billing/reports
    method: GET
- name: billing_reports_metrics
  endpoint:
    path: /~/billing/reports/metrics
    method: GET
    data_selector: buckets
    params:
      from: string(date-time)
      to: string(date-time)
- name: billing_reports_properties
  endpoint:
    path: /~/billing/reports/properties/{field}
    method: GET
    data_selector: values
    params:
      from: string(date-time)
      to: string(date-time)
- name: update_companies
  endpoint:
    path: /search/~/companies
    method: POST
    data_selector: success
    params: {}
- name: update_companies
  endpoint:
    path: /search/~/companies/batch
    method: POST
    data_selector: ''
    params: {}
- name: get_company
  endpoint:
    path: /search/~/companies/{id}
    method: GET
    data_selector: ''
    params: {}
- name: delete_company
  endpoint:
    path: /search/~/companies/{id}
    method: DELETE
    data_selector: ''
    params: {}
- name: count_companies
  endpoint:
    path: /search/~/count/companies
    method: POST
    data_selector: ''
    params:
      app_id: string
- name: subscriptions
  endpoint:
    path: /~/subscriptions
    method: POST
    data_selector: body
- name: count_companies
  endpoint:
    path: /search/~/count/companies
    method: POST
- name: search_company_metrics
  endpoint:
    path: /search/~/search/companymetrics/companies
    method: POST
- name: get_company_subscriptions
  endpoint:
    path: /search/~/companies/{id}/subscriptions
    method: GET
- name: create_subscription
  endpoint:
    path: /search/~/subscriptions
    method: POST
- name: subscription
  endpoint:
    path: /search/~/subscriptions
    method: POST
    data_selector: none
    params: {}
- name: batchCreateSubscriptions
  endpoint:
    path: /v1/search/~/subscriptions/batch
    method: POST
    data_selector: subscriptions
- name: create_or_update_subscriptions_batch
  endpoint:
    path: /search/~/subscriptions/batch
    method: POST
    data_selector: items
- name: get_subscription
  endpoint:
    path: /search/~/subscriptions/{id}
    method: GET
    data_selector: ''
- name: subscriptions
  endpoint:
    path: /~/subscriptions/batch
    method: POST
    data_selector: subscriptions
    params: {}
- name: search_events
  endpoint:
    path: /search/~/search/events
    method: POST
    data_selector: hits
    params:
      from: string(date-time)
      to: string(date-time)
- name: count_users
  endpoint:
    path: /search/~/count/users
    method: POST
    data_selector: result
    params:
      app_id: string
- name: count_events
  endpoint:
    path: /v1/search/~/count/events
    method: POST
    data_selector: null
    params:
      from: '2019-08-24T14:15:22Z'
      to: '2019-08-24T14:15:22Z'
- name: get_event
  endpoint:
    path: /v1/search/~/events/{id}
    method: GET
    data_selector: null
    params:
      event_time: '2019-08-24T14:15:22Z'
- name: search_events
  endpoint:
    path: /v1/search/~/search/events
    method: POST
    data_selector: null
    params:
      from: '2019-08-24T14:15:22Z'
      to: '2019-08-24T14:15:22Z'
- name: user_metrics
  endpoint:
    path: /v1/search/~/search/usermetrics/users
    method: POST
- name: update_user
  endpoint:
    path: /v1/search/~/users
    method: POST
- name: batch_update_users
  endpoint:
    path: /v1/search/~/users/batch
    method: POST
- name: update_users_batch
  endpoint:
    path: /v1/search/~/users/batch
    method: POST
    data_selector: '[]'
- name: get_user
  endpoint:
    path: /v1/search/~/users/{id}
    method: GET
    data_selector: '{}'
- name: delete_user
  endpoint:
    path: /v1/search/~/users/{id}
    method: DELETE
    data_selector: '{}'
- name: get_properties
  endpoint:
    path: /v1/search/~/mappings/users/properties
    method: GET
    data_selector: '{}'
- name: workspace
  endpoint:
    path: /v1/workspaces/public/{id}
    method: GET
    data_selector: response
    params: {}
- name: create_workspace
  endpoint:
    path: /v1/~/workspaces
    method: POST
    data_selector: response
    params: {}
- name: user_properties
  endpoint:
    path: /v1/search/~/mappings/users/properties
    method: GET
    data_selector: result
    params:
      app_id: string
- name: event_request_body_properties
  endpoint:
    path: /v1/search/~/mappings/events/request/body/properties
    method: GET
    data_selector: result
    params:
      app_id: string
      from: string(date-time)
      to: string(date-time)
- name: event_response_body_properties
  endpoint:
    path: /v1/search/~/mappings/events/response/body/properties
    method: GET
    data_selector: result
    params:
      app_id: string
      from: string(date-time)
      to: string(date-time)
- name: workspace_token
  endpoint:
    path: /v1/workspaces/access_token
    method: GET
    data_selector: result
    params: {}
- name: public_workspace
  endpoint:
    path: /v1/workspaces/public/{id}
    method: GET
    data_selector: result
    params: {}
- name: workspaces_templates
  endpoint:
    path: /~/workspaces/templates
    method: GET
    data_selector: '*'
- name: update_workspace
  endpoint:
    path: /~/workspaces/{id}
    method: POST
    data_selector: '*'
- name: workspaces
  endpoint:
    path: /~/workspaces
    method: POST
    data_selector: ''
    params:
      expiration: ''
- name: workspaces
  endpoint:
    path: /~/workspaces
    method: GET
    data_selector: ''
    params:
      take: ''
      before_id: ''
      type: ''
      access: ''
- name: workspace_templates
  endpoint:
    path: /~/workspaces/templates
    method: GET
    data_selector: ''
    params: {}
- name: workspaces
  endpoint:
    path: /~/workspaces/{id}
    method: GET
- name: create_comment
  endpoint:
    path: /~/workspaces/{id}/comments
    method: POST
- name: delete_workspace
  endpoint:
    path: /~/workspaces/{id}
    method: DELETE
- name: comments
  endpoint:
    path: /~/workspaces/{id}/comments
    method: POST
    data_selector: None
    params:
      id: path
- name: get_comments
  endpoint:
    path: /~/workspaces/{id}/comments
    method: GET
    data_selector: None
    params:
      id: path
- name: update_comment
  endpoint:
    path: /~/workspaces/{id}/comments/{commentId}
    method: POST
    data_selector: None
    params:
      id: path
      commentId: path
- name: delete_comment
  endpoint:
    path: /~/workspaces/{id}/comments/{commentId}
    method: DELETE
    data_selector: None
    params:
      id: path
      commentId: path
- name: create_app
  endpoint:
    path: /~/apps
    method: POST
    data_selector: response
    params: {}
- name: get_apps
  endpoint:
    path: /~/apps
    method: GET
    data_selector: response
    params:
      take: '0'
- name: delete_acl_permissions
  endpoint:
    path: /~/workspaces/{id}/policy/acl
    method: DELETE
    data_selector: response
    params:
      grantee: string
- name: add_acl_permission
  endpoint:
    path: /~/workspaces/{id}/policy/acl
    method: POST
    data_selector: response
    params: {}
- name: update_app
  endpoint:
    path: /~/apps/{id}
    method: POST
    data_selector: ''
    params: {}
- name: delete_app
  endpoint:
    path: /~/apps/{id}
    method: DELETE
    data_selector: ''
    params: {}
- name: create_moesif_plan
  endpoint:
    path: /~/billing/catalog/plans
    method: POST
    data_selector: ''
    params:
      provider: string
- name: billing_catalog_plans
  endpoint:
    path: /~/billing/catalog/plans
    method: POST
    data_selector: response
    params:
      provider: string
- name: list_billing_catalog_plans
  endpoint:
    path: /~/billing/catalog/plans
    method: GET
    data_selector: response
    params: {}
- name: moesif_plan
  endpoint:
    path: /v1/~/billing/catalog/plans/{id}
    method: GET
    data_selector: body
    params:
      provider: string
- name: delete_moesif_plan
  endpoint:
    path: /v1/~/billing/catalog/plans/{id}
    method: DELETE
    data_selector: body
    params:
      provider: string
- name: update_moesif_plan
  endpoint:
    path: /v1/~/billing/catalog/plans/{id}
    method: PUT
    data_selector: body
    params:
      provider: string
- name: billing_catalog_plans
  endpoint:
    path: /~/billing/catalog/plans/{id}
    method: PUT
    data_selector: results
    params:
      provider: string
- name: create_price
  endpoint:
    path: /~/billing/catalog/prices
    method: POST
    data_selector: ''
    params:
      provider: string
- name: list_prices
  endpoint:
    path: /~/billing/catalog/prices
    method: GET
    data_selector: ''
    params:
      provider: string
      limit: ''
- name: MoesifPrice
  endpoint:
    path: /~/billing/catalog/prices/{id}
    method: GET
    data_selector: '*'
    params:
      provider: string
- name: DeleteMoesifPrice
  endpoint:
    path: /~/billing/catalog/prices/{id}
    method: DELETE
    data_selector: '*'
    params:
      provider: string
- name: UpdateMoesifPrice
  endpoint:
    path: /~/billing/catalog/prices/{id}
    method: PUT
    data_selector: '*'
    params:
      provider: string
- name: prices
  endpoint:
    path: /~/billing/catalog/prices/{id}
    method: PUT
- name: unit_of_measures
  endpoint:
    path: /~/billing/catalog/uom
    method: GET
- name: billing_meters
  endpoint:
    path: /v1/~/billing/meters
    method: POST
- name: billing_meter
  endpoint:
    path: /~/billing/meters
    method: POST
    data_selector: null
    params: {}
- name: list_billing_meters
  endpoint:
    path: /~/billing/meters
    method: GET
    data_selector: null
    params: {}
- name: billing_meter
  endpoint:
    path: /v1/~/billing/meters/{meterId}
    method: POST
    data_selector: inputBody
- name: billing_meter
  endpoint:
    path: /~/billing/meters/{meterId}
    method: POST
    data_selector: response
    params: {}
- name: billing_meter
  endpoint:
    path: /~/billing/meters/{meterId}
    method: POST
    data_selector: billing_meter
    params: {}
- name: billing_meter_get
  endpoint:
    path: /~/billing/meters/{meterId}
    method: GET
    data_selector: billing_meter
    params: {}
- name: billing_meter_delete
  endpoint:
    path: /~/billing/meters/{meterId}
    method: DELETE
    data_selector: billing_meter
    params: {}
- name: billing_meters_webhooks
  endpoint:
    path: /~/billing/meters/{meterId}/webhooks/channels/test
    method: POST
    data_selector: response_body
    params: {}
- name: billing_plans
  endpoint:
    path: /~/billing/plans
    method: POST
    data_selector: ''
    params: {}
- name: balance_transactions
  endpoint:
    path: /~/billing/reports/balance_transactions
    method: POST
    data_selector: none
    params: {}
- name: chats
  endpoint:
    path: /~/chats
    method: GET
    data_selector: none
    params: {}
- name: billing_custom_plan
  endpoint:
    path: /~/billing/plans
    method: GET
    data_selector: '[]'
- name: update_billing_custom_plan
  endpoint:
    path: /~/billing/plans/{planId}
    method: POST
    data_selector: none
- name: get_billing_custom_plan
  endpoint:
    path: /~/billing/plans/{planId}
    method: GET
    data_selector: none
- name: delete_billing_custom_plan
  endpoint:
    path: /~/billing/plans/{planId}
    method: DELETE
    data_selector: none
- name: create_balance_transaction
  endpoint:
    path: /~/billing/reports/balance_transactions
    method: POST
    data_selector: none
- name: chats
  endpoint:
    path: /~/chats/{chat_id}
    method: POST
- name: chats_by_id
  endpoint:
    path: /~/chats/{chat_id}
    method: GET
- name: delete_chat
  endpoint:
    path: /~/chats/{chat_id}
    method: DELETE
- name: cohorts
  endpoint:
    path: /~/cohorts
    method: POST
- name: cohorts
  endpoint:
    path: /~/cohorts
    method: POST
    data_selector: ''
    params: {}
- name: cohort_details
  endpoint:
    path: /~/cohorts/{cohortId}
    method: POST
    data_selector: ''
    params: {}
- name: cohorts
  endpoint:
    path: /~/cohorts/{cohortId}
    method: GET
    params:
      cohort_type: string
- name: delete_cohort
  endpoint:
    path: /~/cohorts/{cohortId}
    method: DELETE
    params: {}
- name: delete_sample_rate
  endpoint:
    path: /~/cohorts/{cohortId}/sample_rate
    method: DELETE
    params: {}
- name: delete_dashboard
  endpoint:
    path: /~/dashboard/{dashId}
    method: DELETE
    params: {}
- name: copy_dashboard
  endpoint:
    path: /~/dashboard/{id}/copy
    method: POST
- name: create_dashboard
  endpoint:
    path: /~/dashboards
    method: POST
- name: get_dashboards
  endpoint:
    path: /~/dashboards
    method: GET
- name: copy_all_dashboards
  endpoint:
    path: /~/dashboards/copy
    method: POST
- name: update_dashboard
  endpoint:
    path: /~/dashboards/{dashId}
    method: POST
- name: CreditBalanceMetric
  endpoint:
    data_selector: current_balance
- name: update_dashboard
  endpoint:
    path: /~/dashboards/{dashId}
    method: POST
- name: delete_dashboard
  endpoint:
    path: /~/dashboards/{dashId}
    method: DELETE
- name: cascade_delete_dashboard
  endpoint:
    path: /~/dashboards/{dashId}/cascade
    method: DELETE
- name: add_acl_permissions
  endpoint:
    path: /~/dashboards/{id}/policy/acl
    method: POST
- name: events
  endpoint:
    path: /search/~/search/events
    method: POST
    data_selector: null
    params:
      from: -1d
      to: now
- name: count
  endpoint:
    path: /search/~/count/events
    method: POST
    data_selector: null
    params:
      from: -1M
      to: now
- name: events
  endpoint:
    path: /events
    method: POST
    data_selector: event
    params: {}
- name: event
  endpoint:
    path: /v1/events/batch
    method: POST
- name: actions
  endpoint:
    path: /v1/actions
    method: POST
- name: actions_batch
  endpoint:
    path: /v1/actions/batch
    method: POST
- name: users
  endpoint:
    path: /v1/users
    method: POST
- name: users
  endpoint:
    path: /v1/users
    method: POST
    data_selector: ''
    params: {}
- name: users_batch
  endpoint:
    path: /v1/users/batch
    method: POST
    data_selector: ''
    params: {}
- name: companies
  endpoint:
    path: /v1/companies
    method: POST
    data_selector: '[]'
- name: companies_batch
  endpoint:
    path: /v1/companies/batch
    method: POST
    data_selector: '[]'
- name: billing_reports_properties
  endpoint:
    path: /v1/search/~/billing/reports/properties
    method: GET
    data_selector: properties
- name: billing_reports
  endpoint:
    path: /v1/~/billing/reports
    method: GET
    data_selector: reports
- name: billing_reports_metrics
  endpoint:
    path: /v1/~/billing/reports/metrics
    method: GET
    data_selector: metrics
- name: update_companies
  endpoint:
    path: /search/~/companies/batch
    method: POST
    data_selector: ''
    params: {}
- name: get_company
  endpoint:
    path: /search/~/companies/{id}
    method: GET
    data_selector: ''
    params: {}
- name: delete_company
  endpoint:
    path: /search/~/companies/{id}
    method: DELETE
    data_selector: ''
    params: {}
- name: count_companies
  endpoint:
    path: /search/~/count/companies
    method: POST
    data_selector: ''
    params:
      app_id: string
- name: billing_reports_metrics
  endpoint:
    path: /~/billing/reports/metrics
    method: GET
    data_selector: buckets
    params:
      from: string(date-time)
      to: string(date-time)
- name: billing_reports_properties
  endpoint:
    path: /~/billing/reports/properties/{field}
    method: GET
    data_selector: values
    params:
      from: string(date-time)
      to: string(date-time)
- name: update_companies
  endpoint:
    path: /search/~/companies
    method: POST
    data_selector: success
    params: {}
- name: subscriptions
  endpoint:
    path: /search/~/subscriptions
    method: POST
    data_selector: body
- name: count_companies
  endpoint:
    path: /search/~/count/companies
    method: POST
- name: search_company_metrics
  endpoint:
    path: /search/~/search/companymetrics/companies
    method: POST
- name: get_company_subscriptions
  endpoint:
    path: /search/~/companies/{id}/subscriptions
    method: GET
- name: create_subscription
  endpoint:
    path: /search/~/subscriptions
    method: POST
- name: subscriptions
  endpoint:
    path: /search/~/subscriptions
    method: POST
    data_selector: ''
    params: {}
- name: subscriptions
  endpoint:
    path: /v1/search/~/subscriptions/batch
    method: POST
    data_selector: null
    params: {}
- name: subscriptions
  endpoint:
    path: /search/~/subscriptions/batch
    method: POST
    data_selector: subscriptions
    params: {}
- name: subscriptions_batch
  endpoint:
    path: /search/~/subscriptions/batch
    method: POST
    data_selector: items
    params: {}
- name: get_subscription
  endpoint:
    path: /search/~/subscriptions/{id}
    method: GET
    data_selector: ''
    params: {}
- name: count_events
  endpoint:
    path: /v1/search/~/count/events
    method: POST
    data_selector: none
    params:
      from: '2019-08-24T14:15:22Z'
      to: '2019-08-24T14:15:22Z'
- name: get_event
  endpoint:
    path: /v1/search/~/events/{id}
    method: GET
    data_selector: none
    params:
      event_time: '2019-08-24T14:15:22Z'
- name: search_events
  endpoint:
    path: /v1/search/~/search/events
    method: POST
    data_selector: none
    params:
      from: '2019-08-24T14:15:22Z'
      to: '2019-08-24T14:15:22Z'
- name: search_events
  endpoint:
    path: /search/~/search/events
    method: POST
    data_selector: response
    params:
      from: string(date-time)
      to: string(date-time)
- name: search_public_workspaces
  endpoint:
    path: /search/~/workspaces/{workspaceId}/search
    method: POST
    data_selector: response
    params:
      from: string(date-time)
      to: string(date-time)
      workspaceId: string
- name: count_users
  endpoint:
    path: /search/~/count/users
    method: POST
    data_selector: response
    params:
      app_id: string
- name: usermetrics_users
  endpoint:
    path: /v1/search/~/search/usermetrics/users
    method: POST
- name: update_user
  endpoint:
    path: /v1/search/~/users
    method: POST
- name: batch_update_users
  endpoint:
    path: /v1/search/~/users/batch
    method: POST
- name: update_users_batch
  endpoint:
    path: /search/~/users/batch
    method: POST
    data_selector: ''
    params: {}
- name: get_user
  endpoint:
    path: /search/~/users/{id}
    method: GET
    data_selector: ''
    params: {}
- name: delete_user
  endpoint:
    path: /search/~/users/{id}
    method: DELETE
    data_selector: ''
    params: {}
- name: workspaces
  endpoint:
    path: /workspaces/public/{id}
    method: GET
    data_selector: response
    params: {}
- name: user_property_mappings
  endpoint:
    path: /v1/search/~/mappings/users/properties
    method: GET
    data_selector: null
    params:
      app_id: string
- name: event_request_body_property_mappings
  endpoint:
    path: /v1/search/~/mappings/events/request/body/properties
    method: GET
    data_selector: null
    params:
      app_id: string
      from: string(date-time)
      to: string(date-time)
- name: event_response_body_property_mappings
  endpoint:
    path: /v1/search/~/mappings/events/response/body/properties
    method: GET
    data_selector: null
    params:
      app_id: string
      from: string(date-time)
      to: string(date-time)
- name: workspace_access_token
  endpoint:
    path: /v1/workspaces/access_token
    method: GET
    data_selector: null
    params: {}
- name: public_workspace
  endpoint:
    path: /v1/workspaces/public/{id}
    method: GET
    data_selector: null
    params: {}
- name: workspace_templates
  endpoint:
    path: /~/workspaces/templates
    method: GET
    data_selector: anonymous
- name: update_workspace
  endpoint:
    path: /~/workspaces/{id}
    method: POST
    data_selector: input_payload
- name: workspaces
  endpoint:
    path: /~/workspaces
    method: POST
    data_selector: ''
    params:
      expiration: query
- name: workspaces
  endpoint:
    path: /~/workspaces
    method: GET
    data_selector: ''
    params:
      take: query
      before_id: query
      type: query
      access: query
- name: workspace_templates
  endpoint:
    path: /~/workspaces/templates
    method: GET
    data_selector: ''
    params: {}
- name: workspace
  endpoint:
    path: /~/workspaces/{id}
    method: GET
    data_selector: records
- name: create_workspace_comment
  endpoint:
    path: /~/workspaces/{id}/comments
    method: POST
    data_selector: ''
- name: delete_workspace
  endpoint:
    path: /~/workspaces/{id}
    method: DELETE
    data_selector: ''
- name: comments
  endpoint:
    path: /~/workspaces/{id}/comments
    method: GET
    data_selector: None
    params:
      id: path
- name: create_comment
  endpoint:
    path: /~/workspaces/{id}/comments
    method: POST
    data_selector: None
    params:
      id: path
      body: body
- name: update_comment
  endpoint:
    path: /~/workspaces/{id}/comments/{commentId}
    method: POST
    data_selector: None
    params:
      id: path
      commentId: path
      body: body
- name: delete_comment
  endpoint:
    path: /~/workspaces/{id}/comments/{commentId}
    method: DELETE
    data_selector: None
    params:
      id: path
      commentId: path
- name: update_app
  endpoint:
    path: /~/apps/{id}
    method: POST
    data_selector: ''
    params: {}
- name: delete_app
  endpoint:
    path: /~/apps/{id}
    method: DELETE
    data_selector: ''
    params: {}
- name: create_moesif_plan
  endpoint:
    path: /~/billing/catalog/plans
    method: POST
    data_selector: ''
    params:
      provider: string
- name: add_acl_permission
  endpoint:
    path: /~/workspaces/{id}/policy/acl
    method: POST
    data_selector: none
    params:
      id: path
      grantee: query
      permission: query
- name: delete_acl_permission
  endpoint:
    path: /~/workspaces/{id}/policy/acl
    method: DELETE
    data_selector: none
    params:
      id: path
      grantee: query
- name: create_app
  endpoint:
    path: /~/apps
    method: POST
    data_selector: none
    params:
      body: AppCreate
- name: get_apps
  endpoint:
    path: /~/apps
    method: GET
    data_selector: none
    params:
      take: query
      before_id: query
- name: billing_catalog_plans
  endpoint:
    path: /~/billing/catalog/plans
    method: POST
    data_selector: body
    params:
      provider: string
- name: list_billing_catalog_plans
  endpoint:
    path: /~/billing/catalog/plans
    method: GET
    data_selector: body
    params:
      provider: string
      includes: string
      limit: integer
- name: moesif_plan
  endpoint:
    path: /~/billing/catalog/plans/{id}
    method: GET
    data_selector: records
    params:
      provider: string
- name: delete_moesif_plan
  endpoint:
    path: /~/billing/catalog/plans/{id}
    method: DELETE
    data_selector: records
    params:
      provider: string
- name: update_moesif_plan
  endpoint:
    path: /~/billing/catalog/plans/{id}
    method: PUT
    data_selector: records
    params:
      provider: string
- name: billing_catalog_plans
  endpoint:
    path: /~/billing/catalog/plans/{id}
    method: PUT
    data_selector: responses
    params:
      provider: string
- name: prices
  endpoint:
    path: /~/billing/catalog/prices
    method: POST
    data_selector: ''
    params:
      provider: string
- name: list_prices
  endpoint:
    path: /~/billing/catalog/prices
    method: GET
    data_selector: ''
    params:
      provider: string
- name: moesif_price
  endpoint:
    path: /~/billing/catalog/prices/{id}
    method: GET
    data_selector: '*'
    params:
      provider: string
- name: moesif_price_delete
  endpoint:
    path: /~/billing/catalog/prices/{id}
    method: DELETE
    data_selector: '*'
    params:
      provider: string
- name: moesif_price_update
  endpoint:
    path: /~/billing/catalog/prices/{id}
    method: PUT
    data_selector: '*'
    params:
      provider: string
- name: billing_catalog_prices
  endpoint:
    path: /~/billing/catalog/prices/{id}
    method: PUT
    data_selector: body
    params:
      provider: string
- name: billing_catalog_uom
  endpoint:
    path: /~/billing/catalog/uom
    method: GET
    data_selector: body
    params:
      provider: string
- name: billing_meter
  endpoint:
    path: /~/billing/meters
    method: POST
- name: billing_meter
  endpoint:
    path: /~/billing/meters
    method: POST
    data_selector: null
    params: {}
- name: list_billing_meters
  endpoint:
    path: /~/billing/meters
    method: GET
    data_selector: null
    params: {}
- name: billing_meter
  endpoint:
    path: /v1/~/billing/meters/{meterId}
    method: POST
    data_selector: meter
    params: {}
- name: billing_meter
  endpoint:
    path: /~/billing/meters/{meterId}
    method: GET
    data_selector: ''
    params: {}
- name: billing_meter_update
  endpoint:
    path: /~/billing/meters/{meterId}
    method: POST
    data_selector: ''
    params: {}
- name: billing_meter_delete
  endpoint:
    path: /~/billing/meters/{meterId}
    method: DELETE
    data_selector: ''
    params: {}
- name: billing_meters_webhook_channels_test
  endpoint:
    path: /~/billing/meters/{meterId}/webhooks/channels/test
    method: POST
    data_selector: response_body
    params: {}
- name: billing_plans
  endpoint:
    path: /~/billing/plans
    method: POST
    data_selector: success
    params: {}
- name: list_billing_plans
  endpoint:
    path: /~/billing/plans
    method: GET
    data_selector: response_body
    params: {}
- name: billing_custom_plan
  endpoint:
    path: /~/billing/plans
    method: GET
    data_selector: anonymous
- name: update_billing_custom_plan
  endpoint:
    path: /~/billing/plans/{planId}
    method: POST
    data_selector: null
- name: get_billing_custom_plan
  endpoint:
    path: /~/billing/plans/{planId}
    method: GET
    data_selector: null
- name: delete_billing_custom_plan
  endpoint:
    path: /~/billing/plans/{planId}
    method: DELETE
    data_selector: null
- name: balance_transactions
  endpoint:
    path: /~/billing/reports/balance_transactions
    method: POST
    data_selector: none
    params: {}
- name: chats
  endpoint:
    path: /~/chats
    method: GET
    data_selector: none
    params: {}
- name: chats
  endpoint:
    path: /~/chats/{chat_id}
    method: POST
    data_selector: null
    params: {}
- name: chats
  endpoint:
    path: /~/chats/{chat_id}
    method: GET
    data_selector: null
    params: {}
- name: chats
  endpoint:
    path: /~/chats/{chat_id}
    method: DELETE
    data_selector: null
    params: {}
- name: cohorts
  endpoint:
    path: /~/cohorts
    method: POST
    data_selector: null
    params: {}
- name: cohorts
  endpoint:
    path: /~/cohorts
    method: POST
    data_selector: none
    params: {}
- name: getCohorts
  endpoint:
    path: /~/cohorts
    method: GET
    data_selector: none
    params:
      cohort_type: string
- name: updateCohort
  endpoint:
    path: /~/cohorts/{cohortId}
    method: POST
    data_selector: none
    params: {}
- name: cohorts
  endpoint:
    path: /~/cohorts/{cohortId}
    method: GET
    params:
      cohort_type: string
- name: delete_cohort
  endpoint:
    path: /~/cohorts/{cohortId}
    method: DELETE
    params: {}
- name: delete_sample_rate
  endpoint:
    path: /~/cohorts/{cohortId}/sample_rate
    method: DELETE
    params: {}
- name: delete_dashboard
  endpoint:
    path: /~/dashboard/{dashId}
    method: DELETE
    params: {}
- name: dashboard_copy
  endpoint:
    path: /~/dashboard/{id}/copy
    method: POST
- name: dashboards
  endpoint:
    path: /~/dashboards
    method: POST
- name: get_dashboards
  endpoint:
    path: /~/dashboards
    method: GET
- name: copy_all_dashboards
  endpoint:
    path: /~/dashboards/copy
    method: POST
- name: update_dashboard
  endpoint:
    path: /~/dashboards/{dashId}
    method: POST
- name: dashboard
  endpoint:
    path: /~/dashboards/{dashId}
    method: POST
    data_selector: ''
    params: {}
- name: delete_dashboard
  endpoint:
    path: /~/dashboards/{dashId}
    method: DELETE
    data_selector: ''
    params: {}
- name: cascade_delete_dashboard
  endpoint:
    path: /~/dashboards/{dashId}/cascade
    method: DELETE
    data_selector: ''
    params: {}
- name: add_acl_permissions
  endpoint:
    path: /~/dashboards/{id}/policy/acl
    method: POST
    data_selector: ''
    params: {}
- name: delete_dashboard_acl
  endpoint:
    path: /~/dashboards/{id}/policy/acl
    method: DELETE
    params:
      grantee: string
- name: create_email_template
  endpoint:
    path: /~/emails/templates
    method: POST
    data_selector: body
- name: get_email_templates
  endpoint:
    path: /~/emails/templates
    method: GET
- name: emails_templates
  endpoint:
    path: /~/emails/templates
    method: GET
- name: getEmailTemplate
  endpoint:
    path: /getEmailTemplate
    method: GET
    data_selector: properties
    params:
      cohort_id: query
- name: createEmailTemplate
  endpoint:
    path: /createEmailTemplate
    method: POST
- name: getEmailTemplates
  endpoint:
    path: /getEmailTemplates
    method: GET
- name: updateEmailTemplate
  endpoint:
    path: /updateEmailTemplate
    method: PUT
- name: getEmailTemplate
  endpoint:
    path: /getEmailTemplate
    method: GET
- name: deleteEmailTemplate
  endpoint:
    path: /deleteEmailTemplate
    method: DELETE
- name: findObjects
  endpoint:
    path: /findObjects
    method: POST
- name: createGovernanceRule
  endpoint:
    path: /createGovernanceRule
    method: POST
- name: getGovernanceRules
  endpoint:
    path: /getGovernanceRules
    method: GET
- name: updateGovernanceRule
  endpoint:
    path: /updateGovernanceRule
    method: PUT
- name: getGovernanceRule
  endpoint:
    path: /getGovernanceRule
    method: GET
- name: deleteGovernanceRule
  endpoint:
    path: /deleteGovernanceRule
    method: DELETE
- name: log_event
  endpoint:
    path: /events
    method: POST
    data_selector: request
- name: events
  endpoint:
    path: /v1/events/batch
    method: POST
    data_selector: events
    params: {}
- name: actions
  endpoint:
    path: /v1/actions
    method: POST
- name: actions_batch
  endpoint:
    path: /v1/actions/batch
    method: POST
- name: users
  endpoint:
    path: /v1/users
    method: POST
- name: users
  endpoint:
    path: /v1/users
    method: POST
    data_selector: ''
    params: {}
- name: users_batch
  endpoint:
    path: /v1/users/batch
    method: POST
    data_selector: ''
    params: {}
- name: companies
  endpoint:
    path: /v1/companies
    method: POST
    data_selector: ''
    params: {}
- name: companies_batch
  endpoint:
    path: /v1/companies/batch
    method: POST
    data_selector: ''
    params: {}
- name: subscriptions
  endpoint:
    path: /subscriptions
    method: POST
    data_selector: ''
    params: {}
- name: config
  endpoint:
    path: /config
    method: GET
    data_selector: ''
    params: {}
- name: rules
  endpoint:
    path: /rules
    method: GET
    data_selector: ''
    params: {}
- name: billing_reports_properties
  endpoint:
    path: /v1/search/~/billing/reports/properties
    method: GET
    data_selector: null
    params: {}
- name: billing_reports
  endpoint:
    path: /v1/~/billing/reports
    method: GET
    data_selector: null
    params: {}
- name: billing_reports_metrics
  endpoint:
    path: /v1/~/billing/reports/metrics
    method: GET
    data_selector: null
    params: {}
- name: companies_batch
  endpoint:
    path: /v1/search/~/companies/batch
    method: POST
    data_selector: records
- name: get_company
  endpoint:
    path: /v1/search/~/companies/{id}
    method: GET
    data_selector: records
- name: delete_company
  endpoint:
    path: /v1/search/~/companies/{id}
    method: DELETE
- name: count_companies
  endpoint:
    path: /v1/search/~/count/companies
    method: POST
    data_selector: records
- name: billing_reports_metrics
  endpoint:
    path: /~/billing/reports/metrics
    method: GET
    data_selector: buckets
    params:
      from: string(date-time)
      to: string(date-time)
- name: billing_reports_properties
  endpoint:
    path: /~/billing/reports/properties/{field}
    method: GET
    data_selector: values
    params:
      from: string(date-time)
      to: string(date-time)
- name: update_companies
  endpoint:
    path: /search/~/companies
    method: POST
    data_selector: null
    params: {}
- name: subscriptions
  endpoint:
    path: /search/~/subscriptions
    method: POST
    data_selector: null
    params: {}
- name: count_companies
  endpoint:
    path: /search/~/count/companies
    method: POST
- name: company_metrics
  endpoint:
    path: /search/~/search/companymetrics/companies
    method: POST
- name: company_subscriptions
  endpoint:
    path: /search/~/companies/{id}/subscriptions
    method: GET
- name: create_subscription
  endpoint:
    path: /search/~/subscriptions
    method: POST
- name: subscription
  endpoint:
    path: /v1/search/~/subscriptions
    method: POST
    data_selector: subscription
- name: subscriptions
  endpoint:
    path: /v1/search/~/subscriptions/batch
    method: POST
    data_selector: subscriptions
- name: subscriptions
  endpoint:
    path: /v1/search/~/subscriptions/batch
    method: POST
    data_selector: items
- name: subscriptions_batch
  endpoint:
    path: /search/~/subscriptions/batch
    method: POST
    data_selector: items
    params: {}
- name: get_subscription
  endpoint:
    path: /search/~/subscriptions/{id}
    method: GET
    data_selector: ''
    params: {}
- name: count_events
  endpoint:
    path: /v1/search/~/count/events
    method: POST
    params:
      from: '2019-08-24T14:15:22Z'
      to: '2019-08-24T14:15:22Z'
- name: get_event
  endpoint:
    path: /v1/search/~/events/{id}
    method: GET
    params:
      event_time: '2019-08-24T14:15:22Z'
- name: search_events
  endpoint:
    path: /v1/search/~/search/events
    method: POST
    params:
      from: '2019-08-24T14:15:22Z'
      to: '2019-08-24T14:15:22Z'
- name: search_events
  endpoint:
    path: /search/~/search/events
    method: POST
    data_selector: response
    params:
      from: string(date-time)
      to: string(date-time)
- name: search_workspaces
  endpoint:
    path: /search/~/workspaces/{workspaceId}/search
    method: POST
    data_selector: response
    params:
      from: string(date-time)
      to: string(date-time)
      workspaceId: string
- name: count_users
  endpoint:
    path: /search/~/count/users
    method: POST
    data_selector: response
    params:
      app_id: string
- name: usermetrics_users
  endpoint:
    path: /v1/search/~/search/usermetrics/users
    method: POST
    data_selector: ''
    params: {}
- name: users
  endpoint:
    path: /v1/search/~/users
    method: POST
    data_selector: ''
    params: {}
- name: batchUpdateUsers
  endpoint:
    path: /v1/search/~/users/batch
    method: POST
    data_selector: ''
    params: {}
- name: update_users_batch
  endpoint:
    path: /v1/search/~/users/batch
    method: POST
    data_selector: ''
    params: {}
- name: get_user
  endpoint:
    path: /v1/search/~/users/{id}
    method: GET
    data_selector: ''
    params: {}
- name: delete_user
  endpoint:
    path: /v1/search/~/users/{id}
    method: DELETE
    data_selector: ''
    params: {}
- name: get_properties
  endpoint:
    path: /v1/search/~/mappings/users/properties
    method: GET
    data_selector: ''
    params:
      app_id: string
- name: workspace
  endpoint:
    path: /workspaces/public/{id}
    method: GET
    data_selector: ''
- name: create_workspace
  endpoint:
    path: /~/workspaces
    method: POST
    data_selector: ''
- name: user_property_mapping
  endpoint:
    path: /v1/search/~/mappings/users/properties
    method: GET
    data_selector: response
    params:
      app_id: string
- name: events_request_body_mapping
  endpoint:
    path: /v1/search/~/mappings/events/request/body/properties
    method: GET
    data_selector: response
    params:
      app_id: string
      from: string(date-time)
      to: string(date-time)
- name: events_response_body_mapping
  endpoint:
    path: /v1/search/~/mappings/events/response/body/properties
    method: GET
    data_selector: response
    params:
      app_id: string
      from: string(date-time)
      to: string(date-time)
- name: workspace_access_token
  endpoint:
    path: /v1/workspaces/access_token
    method: GET
    data_selector: response
    params: {}
- name: public_workspace
  endpoint:
    path: /v1/workspaces/public/{id}
    method: GET
    data_selector: response
    params: {}
- name: workspace_templates
  endpoint:
    path: /~/workspaces/templates
    method: GET
    data_selector: '*'
- name: update_workspace
  endpoint:
    path: /~/workspaces/{id}
    method: POST
    data_selector: '*'
- name: workspaces
  endpoint:
    path: /~/workspaces
    method: POST
    data_selector: ''
    params: {}
- name: getWorkspaces
  endpoint:
    path: /~/workspaces
    method: GET
    data_selector: ''
    params:
      take: integer(int32)
      access: array[string]
- name: getWorkspaceTemplates
  endpoint:
    path: /~/workspaces/templates
    method: GET
    data_selector: ''
    params: {}
- name: workspace
  endpoint:
    path: /~/workspaces/{id}
    method: GET
- name: workspace_comment
  endpoint:
    path: /~/workspaces/{id}/comments
    method: POST
- name: delete_workspace
  endpoint:
    path: /~/workspaces/{id}
    method: DELETE
- name: comments
  endpoint:
    path: /~/workspaces/{id}/comments
    method: GET
    data_selector: ''
    params:
      id: path
- name: create_comment
  endpoint:
    path: /~/workspaces/{id}/comments
    method: POST
    data_selector: ''
    params:
      id: path
      body: body
- name: update_comment
  endpoint:
    path: /~/workspaces/{id}/comments/{commentId}
    method: POST
    data_selector: ''
    params:
      id: path
      commentId: path
      body: body
- name: delete_comment
  endpoint:
    path: /~/workspaces/{id}/comments/{commentId}
    method: DELETE
    data_selector: ''
    params:
      id: path
      commentId: path
- name: addApp
  endpoint:
    path: /~/apps
    method: POST
    data_selector: response
    params: {}
- name: getApps
  endpoint:
    path: /~/apps
    method: GET
    data_selector: response
    params:
      take: '0'
- name: deleteACLPermissions
  endpoint:
    path: /~/workspaces/{id}/policy/acl
    method: DELETE
    data_selector: response
    params:
      grantee: string
- name: update_app
  endpoint:
    path: /~/apps/{id}
    method: POST
    data_selector: response
    params: {}
- name: delete_app
  endpoint:
    path: /~/apps/{id}
    method: DELETE
    data_selector: response
    params: {}
- name: create_moesif_plan
  endpoint:
    path: /~/billing/catalog/plans
    method: POST
    data_selector: response
    params:
      provider: string
- name: plans
  endpoint:
    path: /~/billing/catalog/plans
    method: POST
    data_selector: name
    params:
      provider: string
- name: list_plans
  endpoint:
    path: /~/billing/catalog/plans
    method: GET
    data_selector: '[]'
    params:
      provider: string
      includes: string
      limit: integer
- name: moesif_plan
  endpoint:
    path: /~/billing/catalog/plans/{id}
    method: GET
    data_selector: records
    params:
      provider: string
- name: delete_moesif_plan
  endpoint:
    path: /~/billing/catalog/plans/{id}
    method: DELETE
    params:
      provider: string
- name: update_moesif_plan
  endpoint:
    path: /~/billing/catalog/plans/{id}
    method: PUT
    params:
      provider: string
- name: plans
  endpoint:
    path: /~/billing/catalog/plans/{id}
    method: PUT
    data_selector: response
    params:
      provider: string
- name: prices
  endpoint:
    path: /prices
    method: POST
    data_selector: response
    params:
      provider: string
- name: list_prices
  endpoint:
    path: /prices
    method: GET
    data_selector: response
    params: {}
- name: MoesifPrice
  endpoint:
    path: /~/billing/catalog/prices/{id}
    method: GET
    data_selector: anonymous
    params:
      provider: string
- name: MoesifPrice
  endpoint:
    path: /~/billing/catalog/prices/{id}
    method: DELETE
    data_selector: null
    params:
      provider: string
- name: MoesifPrice
  endpoint:
    path: /~/billing/catalog/prices/{id}
    method: PUT
    data_selector: null
    params:
      provider: string
- name: billing_meter
  endpoint:
    path: /~/billing/meters
    method: POST
- name: billing_catalog_prices
  endpoint:
    path: /~/billing/catalog/prices/{id}
    method: PUT
    data_selector: response
    params:
      provider: string
- name: billing_catalog_uom
  endpoint:
    path: /~/billing/catalog/uom
    method: GET
    data_selector: response
    params:
      provider: string
- name: billing_meters
  endpoint:
    path: /~/billing/meters
    method: POST
    data_selector: billing_meter
    params: {}
- name: list_billing_meters
  endpoint:
    path: /~/billing/meters
    method: GET
    data_selector: billing_meters
    params: {}
- name: billing_meters
  endpoint:
    path: /v1/~/billing/meters/{meterId}
    method: POST
    data_selector: null
    params: {}
- name: billing_meter
  endpoint:
    path: /v1/~/billing/meters/{meterId}
    method: POST
- name: billing_meter
  endpoint:
    path: /~/billing/meters/{meterId}
    method: POST
- name: billing_meter_get
  endpoint:
    path: /~/billing/meters/{meterId}
    method: GET
- name: billing_meter_delete
  endpoint:
    path: /~/billing/meters/{meterId}
    method: DELETE
- name: billing_meters_webhook
  endpoint:
    path: /~/billing/meters/{meterId}/webhooks/channels/test
    method: POST
    data_selector: response_body
    params: {}
- name: billing_plans
  endpoint:
    path: /~/billing/plans
    method: GET
    data_selector: response_body
    params: {}
- name: billing_custom_plan
  endpoint:
    path: /~/billing/plans
    method: GET
    data_selector: anonymous
- name: update_billing_custom_plan
  endpoint:
    path: /~/billing/plans/{planId}
    method: POST
    data_selector: null
- name: get_billing_custom_plan
  endpoint:
    path: /~/billing/plans/{planId}
    method: GET
    data_selector: null
- name: delete_billing_custom_plan
  endpoint:
    path: /~/billing/plans/{planId}
    method: DELETE
    data_selector: null
- name: create_balance_transaction
  endpoint:
    path: /~/billing/reports/balance_transactions
    method: POST
    data_selector: null
- name: balance_transactions
  endpoint:
    path: /~/billing/reports/balance_transactions
    method: POST
    data_selector: none
    params: {}
- name: chats
  endpoint:
    path: /~/chats
    method: GET
    data_selector: none
    params: {}
- name: update_chat
  endpoint:
    path: /~/chats/{chat_id}
    method: POST
    data_selector: none
    params:
      app_id: string
- name: chats
  endpoint:
    path: /~/chats/{chat_id}
    method: POST
    data_selector: none
    params: {}
- name: chats
  endpoint:
    path: /~/chats/{chat_id}
    method: GET
    data_selector: none
    params: {}
- name: chats
  endpoint:
    path: /~/chats/{chat_id}
    method: DELETE
    data_selector: none
    params: {}
- name: cohorts
  endpoint:
    path: /~/cohorts
    method: POST
    data_selector: none
    params: {}
- name: create_cohort
  endpoint:
    path: /~/cohorts
    method: POST
    data_selector: null
    params: {}
- name: get_cohorts
  endpoint:
    path: /~/cohorts
    method: GET
    data_selector: null
    params:
      cohort_type: string
- name: update_cohort
  endpoint:
    path: /~/cohorts/{cohortId}
    method: POST
    data_selector: null
    params: {}
- name: get_cohort
  endpoint:
    path: /~/cohorts/{cohortId}
    method: GET
    data_selector: null
    params: {}
- name: cohort
  endpoint:
    path: /~/cohorts/{cohortId}
    method: GET
    params:
      cohort_type: string
- name: delete_cohort
  endpoint:
    path: /~/cohorts/{cohortId}
    method: DELETE
    params: {}
- name: delete_sample_rate
  endpoint:
    path: /~/cohorts/{cohortId}/sample_rate
    method: DELETE
    params: {}
- name: delete_dashboard
  endpoint:
    path: /~/dashboard/{dashId}
    method: DELETE
    params: {}
- name: dashboard
  endpoint:
    path: /~/dashboards/{dashId}
    method: POST
- name: dashboard_cascade
  endpoint:
    path: /~/dashboards/{dashId}/cascade
    method: DELETE
- name: dashboard_acl
  endpoint:
    path: /~/dashboards/{id}/policy/acl
    method: POST
- name: dashboards
  endpoint:
    path: /~/dashboards
    method: POST
    data_selector: null
    params: {}
- name: copy_dashboard
  endpoint:
    path: /~/dashboards/copy
    method: POST
    data_selector: null
    params: {}
- name: get_dashboards
  endpoint:
    path: /~/dashboards
    method: GET
    data_selector: null
    params: {}
- name: update_dashboard
  endpoint:
    path: /~/dashboards/{dashId}
    method: POST
    data_selector: null
    params: {}
- name: delete_dashboard_acl
  endpoint:
    path: /~/dashboards/{id}/policy/acl
    method: DELETE
    params:
      grantee: string
- name: create_email_template
  endpoint:
    path: /~/emails/templates
    method: POST
    data_selector: body
- name: get_email_templates
  endpoint:
    path: /~/emails/templates
    method: GET
- name: email_templates
  endpoint:
    path: /~/emails/templates
    method: GET
    data_selector: None
    params: {}
- name: update_email_template
  endpoint:
    path: /~/emails/templates/{id}
    method: POST
    data_selector: None
    params: {}
- name: email_template
  endpoint:
    path: /~/emails/templates/{id}
    method: GET
    params:
      id: path
- name: delete_email_template
  endpoint:
    path: /~/emails/templates/{id}
    method: DELETE
    params:
      id: path
- name: item_plan
  endpoint:
    path: /item_plan
    method: GET
- name: item_price
  endpoint:
    path: /item_price
    method: GET
- name: item_prices
  endpoint:
    path: /item_prices
    method: GET
- name: events
  endpoint:
    path: /search/~/search/events
    method: POST
    data_selector: hits.hits
    params:
      from: -1d
      to: now
- name: count_events
  endpoint:
    path: /search/~/count/events
    method: POST
    data_selector: hits.hits
    params:
      from: -1M
      to: now
- name: createEmailTemplate
  endpoint:
    path: /createEmailTemplate
    method: POST
- name: getEmailTemplates
  endpoint:
    path: /getEmailTemplates
    method: GET
- name: updateEmailTemplate
  endpoint:
    path: /updateEmailTemplate
    method: PUT
- name: getEmailTemplate
  endpoint:
    path: /getEmailTemplate
    method: GET
- name: deleteEmailTemplate
  endpoint:
    path: /deleteEmailTemplate
    method: DELETE
- name: findObjects
  endpoint:
    path: /findObjects
    method: GET
- name: createGovernanceRule
  endpoint:
    path: /createGovernanceRule
    method: POST
- name: getGovernanceRules
  endpoint:
    path: /getGovernanceRules
    method: GET
- name: updateGovernanceRule
  endpoint:
    path: /updateGovernanceRule
    method: PUT
- name: getGovernanceRule
  endpoint:
    path: /getGovernanceRule
    method: GET
- name: deleteGovernanceRule
  endpoint:
    path: /deleteGovernanceRule
    method: DELETE
- name: events_batch
  endpoint:
    path: /v1/events/batch
    method: POST
- name: actions
  endpoint:
    path: /v1/actions
    method: POST
    data_selector: action
    params: {}
- name: users
  endpoint:
    path: /v1/users
    method: POST
    data_selector: user
    params: {}
- name: events
  endpoint:
    path: /events
    method: POST
    data_selector: request
    params: {}
- name: companies
  endpoint:
    path: /v1/companies
    method: POST
    data_selector: ''
    params: {}
- name: companies_batch
  endpoint:
    path: /v1/companies/batch
    method: POST
    data_selector: ''
    params: {}
- name: users
  endpoint:
    path: /v1/users
    method: POST
    data_selector: ''
    params: {}
- name: users_batch
  endpoint:
    path: /v1/users/batch
    method: POST
    data_selector: ''
    params: {}
- name: billing_reports_properties
  endpoint:
    path: /search/~/billing/reports/properties
    method: GET
    data_selector: records
    params: {}
- name: billing_reports
  endpoint:
    path: /~/billing/reports
    method: GET
    data_selector: records
    params: {}
- name: billing_reports_metrics
  endpoint:
    path: /~/billing/reports/metrics
    method: GET
    data_selector: records
    params: {}
- name: billing_reports_metrics
  endpoint:
    path: /~/billing/reports/metrics
    method: GET
    data_selector: buckets
    params:
      from: string(date-time)
      to: string(date-time)
- name: billing_reports_properties
  endpoint:
    path: /~/billing/reports/properties/{field}
    method: GET
    data_selector: values
    params:
      from: string(date-time)
      to: string(date-time)
- name: update_companies
  endpoint:
    path: /search/~/companies
    method: POST
    data_selector: success
    params: {}
- name: companies_batch
  endpoint:
    path: /search/~/companies/batch
    method: POST
    data_selector: records
    params: {}
- name: get_company
  endpoint:
    path: /search/~/companies/{id}
    method: GET
    data_selector: records
    params: {}
- name: delete_company
  endpoint:
    path: /search/~/companies/{id}
    method: DELETE
    data_selector: records
    params: {}
- name: count_companies
  endpoint:
    path: /search/~/count/companies
    method: POST
    data_selector: records
    params: {}
- name: count_companies
  endpoint:
    path: /search/~/count/companies
    method: POST
    data_selector: None
- name: search_company_metrics
  endpoint:
    path: /search/~/search/companymetrics/companies
    method: POST
    data_selector: None
- name: get_company_subscriptions
  endpoint:
    path: /search/~/companies/{id}/subscriptions
    method: GET
    data_selector: None
- name: create_subscription
  endpoint:
    path: /search/~/subscriptions
    method: POST
    data_selector: None
- name: subscriptions
  endpoint:
    path: /v1/search/~/subscriptions
    method: POST
    data_selector: records
- name: subscription
  endpoint:
    path: /v1/search/~/subscriptions
    method: POST
    data_selector: records
- name: batchCreateSubscriptions
  endpoint:
    path: /search/~/subscriptions/batch
    method: POST
    data_selector: subscription
    params: {}
- name: subscriptions_batch
  endpoint:
    path: /~/subscriptions/batch
    method: POST
    data_selector: null
    params: {}
- name: subscriptions_batch
  endpoint:
    path: /search/~/subscriptions/batch
    method: POST
    data_selector: items
    params: {}
- name: get_subscription
  endpoint:
    path: /search/~/subscriptions/{id}
    method: GET
    data_selector: subscription
    params: {}
- name: count_events
  endpoint:
    path: /v1/search/~/count/events
    method: POST
    params:
      from: '2019-08-24T14:15:22Z'
      to: '2019-08-24T14:15:22Z'
- name: get_event
  endpoint:
    path: /v1/search/~/events/{id}
    method: GET
    params:
      event_time: '2019-08-24T14:15:22Z'
- name: search_events
  endpoint:
    path: /search/~/search/events
    method: POST
    data_selector: results
    params:
      from: string(date-time)
      to: string(date-time)
- name: search_workspaces
  endpoint:
    path: /search/~/workspaces/{workspaceId}/search
    method: POST
    data_selector: results
    params:
      from: string(date-time)
      to: string(date-time)
- name: count_users
  endpoint:
    path: /search/~/count/users
    method: POST
    data_selector: results
    params:
      app_id: string
- name: usermetrics
  endpoint:
    path: /v1/search/~/search/usermetrics/users
    method: POST
    data_selector: response
    params: {}
- name: update_user
  endpoint:
    path: /v1/search/~/users
    method: POST
    data_selector: response
    params: {}
- name: batch_update_users
  endpoint:
    path: /v1/search/~/users/batch
    method: POST
    data_selector: response
    params: {}
- name: batch_user_update
  endpoint:
    path: /search/~/users/batch
    method: POST
    data_selector: ''
    params: {}
- name: get_user
  endpoint:
    path: /search/~/users/{id}
    method: GET
    data_selector: ''
    params: {}
- name: delete_user
  endpoint:
    path: /search/~/users/{id}
    method: DELETE
    data_selector: ''
    params: {}
- name: get_properties
  endpoint:
    path: /search/~/mappings/users/properties
    method: GET
    data_selector: ''
    params:
      app_id: string
- name: user_property_mappings
  endpoint:
    path: /v1/search/~/mappings/users/properties
    method: GET
    data_selector: results
    params:
      app_id: string
- name: event_request_body_property_mappings
  endpoint:
    path: /v1/search/~/mappings/events/request/body/properties
    method: GET
    data_selector: results
    params:
      app_id: string
      from: string(date-time)
      to: string(date-time)
- name: event_response_body_property_mappings
  endpoint:
    path: /v1/search/~/mappings/events/response/body/properties
    method: GET
    data_selector: results
    params:
      app_id: string
      from: string(date-time)
      to: string(date-time)
- name: workspace_access_token
  endpoint:
    path: /v1/workspaces/access_token
    method: GET
    data_selector: results
    params: {}
- name: public_workspace
  endpoint:
    path: /v1/workspaces/public/{id}
    method: GET
    data_selector: results
    params: {}
- name: workspace
  endpoint:
    path: /workspaces/public/{id}
    method: GET
    data_selector: workspace
    params: {}
- name: create_workspace
  endpoint:
    path: /~/workspaces
    method: POST
    data_selector: workspace
    params: {}
- name: workspaces
  endpoint:
    path: /~/workspaces
    method: POST
    data_selector: ''
    params: {}
- name: getWorkspaces
  endpoint:
    path: /~/workspaces
    method: GET
    data_selector: ''
    params:
      take: required
- name: getWorkspaceTemplates
  endpoint:
    path: /~/workspaces/templates
    method: GET
    data_selector: ''
    params: {}
- name: workspaces_templates
  endpoint:
    path: /~/workspaces/templates
    method: GET
- name: update_workspace
  endpoint:
    path: /~/workspaces/{id}
    method: POST
- name: workspace
  endpoint:
    path: /~/workspaces/{id}
    method: GET
    data_selector: response
    params: {}
- name: create_workspace_comment
  endpoint:
    path: /~/workspaces/{id}/comments
    method: POST
    data_selector: response
    params: {}
- name: delete_workspace
  endpoint:
    path: /~/workspaces/{id}
    method: DELETE
    data_selector: response
    params: {}
- name: create_comment
  endpoint:
    path: /~/workspaces/{id}/comments
    method: POST
    data_selector: None
    params:
      id: path
- name: get_comments
  endpoint:
    path: /~/workspaces/{id}/comments
    method: GET
    data_selector: None
    params:
      id: path
- name: update_comment
  endpoint:
    path: /~/workspaces/{id}/comments/{commentId}
    method: POST
    data_selector: None
    params:
      id: path
      commentId: path
- name: delete_comment
  endpoint:
    path: /~/workspaces/{id}/comments/{commentId}
    method: DELETE
    data_selector: None
    params:
      id: path
      commentId: path
- name: add_acl_permissions
  endpoint:
    path: /~/workspaces/{id}/policy/acl
    method: POST
    data_selector: None
    params:
      id: path
- name: addApp
  endpoint:
    path: /~/apps
    method: POST
    data_selector: body
- name: getApps
  endpoint:
    path: /~/apps
    method: GET
    data_selector: response
    params:
      take: '0'
- name: deleteACLPermissions
  endpoint:
    path: /~/workspaces/{id}/policy/acl
    method: DELETE
    params:
      grantee: string
- name: plans
  endpoint:
    path: /~/billing/catalog/plans
    method: POST
    data_selector: null
    params: {}
- name: list_plans
  endpoint:
    path: /~/billing/catalog/plans
    method: GET
    data_selector: null
    params: {}
- name: apps
  endpoint:
    path: /~/apps/{id}
    method: POST
    data_selector: body
- name: delete_app
  endpoint:
    path: /~/apps/{id}
    method: DELETE
    data_selector: body
- name: billing_catalog_plans
  endpoint:
    path: /~/billing/catalog/plans
    method: POST
    data_selector: body
    params:
      provider: string
- name: billing_catalog_plans
  endpoint:
    path: /~/billing/catalog/plans/{id}
    method: PUT
    data_selector: response
    params:
      provider: string
- name: prices
  endpoint:
    path: /~/billing/catalog/prices
    method: POST
    data_selector: ''
    params:
      provider: string
- name: list_prices
  endpoint:
    path: /~/billing/catalog/prices
    method: GET
    data_selector: ''
    params: {}
- name: moesif_plan
  endpoint:
    path: /~/billing/catalog/plans/{id}
    method: GET
    data_selector: body
    params:
      provider: string
- name: delete_moesif_plan
  endpoint:
    path: /~/billing/catalog/plans/{id}
    method: DELETE
    params:
      provider: string
- name: update_moesif_plan
  endpoint:
    path: /~/billing/catalog/plans/{id}
    method: PUT
    params:
      provider: string
- name: MoesifPrice
  endpoint:
    path: /~/billing/catalog/prices/{id}
    method: GET
    data_selector: '*'
    params:
      provider: string
- name: DeleteMoesifPrice
  endpoint:
    path: /~/billing/catalog/prices/{id}
    method: DELETE
    data_selector: null
    params:
      provider: string
- name: UpdateMoesifPrice
  endpoint:
    path: /~/billing/catalog/prices/{id}
    method: PUT
    data_selector: null
    params:
      provider: string
- name: billing_catalog_prices
  endpoint:
    path: /~/billing/catalog/prices/{id}
    method: PUT
    data_selector: response
    params:
      provider: string
- name: billing_catalog_uom
  endpoint:
    path: /~/billing/catalog/uom
    method: GET
    data_selector: response
    params:
      provider: string
- name: billing_meter
  endpoint:
    path: /~/billing/meters
    method: POST
    data_selector: response
- name: billing_meter
  endpoint:
    path: /~/billing/meters
    method: POST
    data_selector: ''
    params: {}
- name: list_billing_meters
  endpoint:
    path: /~/billing/meters
    method: GET
    data_selector: ''
    params: {}
- name: updateMeter
  endpoint:
    path: /~/billing/meters/{meterId}
    method: POST
    data_selector: null
    params: {}
- name: billing_meter
  endpoint:
    path: /~/billing/meters/{meterId}
    method: POST
- name: billing_meter_get
  endpoint:
    path: /~/billing/meters/{meterId}
    method: GET
- name: billing_meter_delete
  endpoint:
    path: /~/billing/meters/{meterId}
    method: DELETE
- name: billing_meter_test
  endpoint:
    path: /~/billing/meters/{meterId}/webhooks/channels/test
    method: POST
    data_selector: response_body
    params: {}
- name: billing_plans
  endpoint:
    path: /~/billing/plans
    method: GET
    data_selector: plans
    params: {}
- name: billing_custom_plan
  endpoint:
    path: /~/billing/plans
    method: GET
    data_selector: '*'
- name: update_billing_custom_plan
  endpoint:
    path: /~/billing/plans/{planId}
    method: POST
    data_selector: '*'
- name: get_billing_custom_plan
  endpoint:
    path: /~/billing/plans/{planId}
    method: GET
    data_selector: '*'
- name: delete_billing_custom_plan
  endpoint:
    path: /~/billing/plans/{planId}
    method: DELETE
    data_selector: '*'
- name: create_balance_transaction
  endpoint:
    path: /~/billing/reports/balance_transactions
    method: POST
    data_selector: '*'
- name: balance_transactions
  endpoint:
    path: /~/billing/reports/balance_transactions
    method: POST
    data_selector: none
    params: {}
- name: chats
  endpoint:
    path: /~/chats
    method: GET
    data_selector: none
    params: {}
- name: update_chat
  endpoint:
    path: /~/chats/{chat_id}
    method: POST
    data_selector: none
    params:
      app_id: string
- name: chats
  endpoint:
    path: /~/chats/{chat_id}
    method: POST
    data_selector: null
    params: {}
- name: chats_get
  endpoint:
    path: /~/chats/{chat_id}
    method: GET
    data_selector: null
    params: {}
- name: chats_delete
  endpoint:
    path: /~/chats/{chat_id}
    method: DELETE
    data_selector: null
    params: {}
- name: cohorts
  endpoint:
    path: /~/cohorts
    method: POST
    data_selector: null
    params: {}
- name: cohorts
  endpoint:
    path: /~/cohorts
    method: POST
    data_selector: ''
    params: {}
- name: cohorts
  endpoint:
    path: /~/cohorts/{cohortId}
    method: POST
    data_selector: ''
    params: {}
- name: cohorts
  endpoint:
    path: /~/cohorts
    method: GET
    data_selector: ''
    params:
      cohort_type: string
- name: cohort
  endpoint:
    path: /~/cohorts/{cohortId}
    method: GET
    data_selector: ''
    params:
      cohort_type: string
- name: dashboard
  endpoint:
    path: /~/dashboard/{dashId}
    method: DELETE
    data_selector: ''
    params: {}
- name: copy_dashboard
  endpoint:
    path: /~/dashboard/{id}/copy
    method: POST
    data_selector: None
- name: create_dashboard
  endpoint:
    path: /~/dashboards
    method: POST
    data_selector: None
- name: get_dashboards
  endpoint:
    path: /~/dashboards
    method: GET
    data_selector: None
- name: copy_all_dashboards
  endpoint:
    path: /~/dashboards/copy
    method: POST
    data_selector: None
- name: update_dashboard
  endpoint:
    path: /~/dashboards/{dashId}
    method: POST
    data_selector: None
- name: dashboard
  endpoint:
    path: /~/dashboards/{dashId}
    method: POST
    data_selector: ''
    params: {}
- name: dashboard_cascade
  endpoint:
    path: /~/dashboards/{dashId}/cascade
    method: DELETE
    data_selector: ''
    params: {}
- name: dashboard_acl
  endpoint:
    path: /~/dashboards/{id}/policy/acl
    method: POST
    data_selector: ''
    params: {}
- name: delete_dashboard_acl
  endpoint:
    path: /~/dashboards/{id}/policy/acl
    method: DELETE
    params:
      id: path
      grantee: query
- name: create_email_template
  endpoint:
    path: /~/emails/templates
    method: POST
    data_selector: body
- name: get_email_templates
  endpoint:
    path: /~/emails/templates
    method: GET
- name: email_templates
  endpoint:
    path: /~/emails/templates
    method: GET
    data_selector: ''
    params: {}
- name: update_email_template
  endpoint:
    path: /~/emails/templates/{id}
    method: POST
    data_selector: ''
    params: {}
- name: get_email_template
  endpoint:
    path: /~/emails/templates/{id}
    method: GET
    data_selector: ''
    params: {}
- name: email_template
  endpoint:
    path: /~/emails/templates/{id}
    method: GET
    data_selector: null
    params:
      id: path
- name: delete_email_template
  endpoint:
    path: /~/emails/templates/{id}
    method: DELETE
    data_selector: null
    params:
      id: path
- name: find_objects
  endpoint:
    path: /~/find
    method: POST
    data_selector: null
    params: {}
- name: item_plan
  endpoint:
    path: /item_plan
    method: GET
    data_selector: records
- name: item_price
  endpoint:
    path: /item_price
    method: GET
    data_selector: records
- name: item_prices
  endpoint:
    path: /item_prices
    method: GET
    data_selector: records
- name: billing_reports
  endpoint:
    path: /management-api/billing-reports
    method: GET
    data_selector: responses
    params: {}
- name: companies
  endpoint:
    path: /management-api/companies
    method: GET
    data_selector: responses
    params: {}
- name: createEmailTemplate
  endpoint:
    path: /createEmailTemplate
    method: POST
- name: getEmailTemplates
  endpoint:
    path: /getEmailTemplates
    method: GET
- name: updateEmailTemplate
  endpoint:
    path: /updateEmailTemplate
    method: PUT
- name: getEmailTemplate
  endpoint:
    path: /getEmailTemplate
    method: GET
- name: deleteEmailTemplate
  endpoint:
    path: /deleteEmailTemplate
    method: DELETE
- name: findObjects
  endpoint:
    path: /findObjects
    method: GET
- name: createGovernanceRule
  endpoint:
    path: /createGovernanceRule
    method: POST
- name: getGovernanceRules
  endpoint:
    path: /getGovernanceRules
    method: GET
- name: updateGovernanceRule
  endpoint:
    path: /updateGovernanceRule
    method: PUT
- name: getGovernanceRule
  endpoint:
    path: /getGovernanceRule
    method: GET
- name: deleteGovernanceRule
  endpoint:
    path: /deleteGovernanceRule
    method: DELETE
- name: events
  endpoint:
    path: /events
    method: POST
- name: events
  endpoint:
    path: /search/~/search/events
    method: POST
    data_selector: hits.hits
    params:
      from: -1d
      to: now
- name: count
  endpoint:
    path: /search/~/count/events
    method: POST
    data_selector: hits.hits
    params:
      from: -1M
      to: now
- name: event
  endpoint:
    path: /events/batch
    method: POST
    data_selector: '[]'
- name: actions
  endpoint:
    path: /v1/actions
    method: POST
    data_selector: ''
    params: {}
- name: users
  endpoint:
    path: /v1/users
    method: POST
    data_selector: ''
    params: {}
- name: users
  endpoint:
    path: /v1/users
    method: POST
    data_selector: ''
    params: {}
- name: batch_users
  endpoint:
    path: /v1/users/batch
    method: POST
    data_selector: ''
    params: {}
- name: companies
  endpoint:
    path: /v1/companies
    method: POST
    data_selector: null
    params: {}
- name: companies_batch
  endpoint:
    path: /v1/companies/batch
    method: POST
    data_selector: null
    params: {}
- name: billing_reports_properties
  endpoint:
    path: /v1/search/~/billing/reports/properties
    method: GET
    data_selector: records
    params: {}
- name: billing_reports
  endpoint:
    path: /v1/~/billing/reports
    method: GET
    data_selector: records
    params: {}
- name: billing_reports_metrics
  endpoint:
    path: /v1/~/billing/reports/metrics
    method: GET
    data_selector: records
    params: {}
- name: billing_reports_metrics
  endpoint:
    path: /~/billing/reports/metrics
    method: GET
    data_selector: buckets
    params:
      from: string(date-time)
      to: string(date-time)
- name: billing_reports_properties
  endpoint:
    path: /~/billing/reports/properties/{field}
    method: GET
    data_selector: values
    params:
      from: string(date-time)
      to: string(date-time)
- name: update_companies
  endpoint:
    path: /search/~/companies
    method: POST
    data_selector: null
    params: {}
- name: update_companies_batch
  endpoint:
    path: /search/~/companies/batch
    method: POST
    data_selector: records
- name: get_company
  endpoint:
    path: /search/~/companies/{id}
    method: GET
    data_selector: records
- name: delete_company
  endpoint:
    path: /search/~/companies/{id}
    method: DELETE
- name: count_companies
  endpoint:
    path: /search/~/count/companies
    method: POST
- name: count_companies
  endpoint:
    path: /search/~/count/companies
    method: POST
    data_selector: response
    params: {}
- name: search_company_metrics
  endpoint:
    path: /search/~/search/companymetrics/companies
    method: POST
    data_selector: response
    params: {}
- name: get_company_subscriptions
  endpoint:
    path: /search/~/companies/{id}/subscriptions
    method: GET
    data_selector: response
    params:
      id: path
- name: create_subscription
  endpoint:
    path: /search/~/subscriptions
    method: POST
    data_selector: response
    params: {}
- name: subscriptions
  endpoint:
    path: /v1/search/~/subscriptions
    method: POST
    data_selector: data
- name: subscription
  endpoint:
    path: /search/~/subscriptions
    method: POST
    data_selector: ''
    params: {}
- name: subscriptions
  endpoint:
    path: /v1/search/~/subscriptions/batch
    method: POST
    data_selector: items
    params: {}
- name: subscriptions
  endpoint:
    path: /v1/search/~/subscriptions/batch
    method: POST
    data_selector: subscriptions
- name: subscriptions_batch
  endpoint:
    path: /search/~/subscriptions/batch
    method: POST
    data_selector: items
    params: {}
- name: get_subscription
  endpoint:
    path: /search/~/subscriptions/{id}
    method: GET
    data_selector: ''
    params: {}
- name: count_events
  endpoint:
    path: /v1/search/~/count/events
    method: POST
    params:
      from: '2019-08-24T14:15:22Z'
      to: '2019-08-24T14:15:22Z'
- name: get_event
  endpoint:
    path: /v1/search/~/events/{id}
    method: GET
    params:
      event_time: '2019-08-24T14:15:22Z'
- name: search_events
  endpoint:
    path: /v1/search/~/search/events
    method: POST
    params:
      from: '2019-08-24T14:15:22Z'
      to: '2019-08-24T14:15:22Z'
- name: search_events
  endpoint:
    path: /search/~/search/events
    method: POST
    data_selector: ''
    params:
      from: string(date-time)
      to: string(date-time)
- name: search_public_workspaces
  endpoint:
    path: /search/~/workspaces/{workspaceId}/search
    method: POST
    data_selector: ''
    params:
      from: string(date-time)
      to: string(date-time)
      workspaceId: string
- name: count_users
  endpoint:
    path: /search/~/count/users
    method: POST
    data_selector: ''
    params:
      app_id: string
- name: usermetrics_users
  endpoint:
    path: /v1/search/~/search/usermetrics/users
    method: POST
    data_selector: ''
    params: {}
- name: users
  endpoint:
    path: /v1/search/~/users
    method: POST
    data_selector: ''
    params: {}
- name: batch_update_users
  endpoint:
    path: /v1/search/~/users/batch
    method: POST
    data_selector: ''
    params: {}
- name: update_users_batch
  endpoint:
    path: /v1/search/~/users/batch
    method: POST
    data_selector: '[]'
- name: get_user
  endpoint:
    path: /v1/search/~/users/{id}
    method: GET
    data_selector: '{}'
- name: delete_user
  endpoint:
    path: /v1/search/~/users/{id}
    method: DELETE
    data_selector: '{}'
- name: get_properties
  endpoint:
    path: /v1/search/~/mappings/users/properties
    method: GET
    data_selector: '{}'
- name: user_properties
  endpoint:
    path: /v1/search/~/mappings/users/properties
    method: GET
    params:
      app_id: string
- name: event_request_body_properties
  endpoint:
    path: /v1/search/~/mappings/events/request/body/properties
    method: GET
    params:
      app_id: string
      from: string(date-time)
      to: string(date-time)
- name: event_response_body_properties
  endpoint:
    path: /v1/search/~/mappings/events/response/body/properties
    method: GET
    params:
      app_id: string
      from: string(date-time)
      to: string(date-time)
- name: workspace_token
  endpoint:
    path: /v1/workspaces/access_token
    method: GET
    params: {}
- name: public_workspace
  endpoint:
    path: /v1/workspaces/public/{id}
    method: GET
    params: {}
- name: workspace
  endpoint:
    path: /workspaces/public/{id}
    method: GET
    data_selector: response
    params: {}
- name: create_workspace
  endpoint:
    path: /~/workspaces
    method: POST
    data_selector: response
    params: {}
- name: workspace_templates
  endpoint:
    path: /~/workspaces/templates
    method: GET
    data_selector: ''
    params: {}
- name: update_workspace
  endpoint:
    path: /~/workspaces/{id}
    method: POST
    data_selector: ''
    params: {}
- name: workspaces
  endpoint:
    path: /~/workspaces
    method: POST
    data_selector: none
    params: {}
- name: get_workspaces
  endpoint:
    path: /~/workspaces
    method: GET
    data_selector: none
    params:
      take: integer(int32)
      access: array[string]
- name: workspace_templates
  endpoint:
    path: /~/workspaces/templates
    method: GET
    data_selector: none
    params: {}
- name: workspace
  endpoint:
    path: /~/workspaces/{id}
    method: GET
    data_selector: response
    params: {}
- name: workspace_comment
  endpoint:
    path: /~/workspaces/{id}/comments
    method: POST
    data_selector: response
    params: {}
- name: delete_workspace
  endpoint:
    path: /~/workspaces/{id}
    method: DELETE
    data_selector: response
    params: {}
- name: comments
  endpoint:
    path: /~/workspaces/{id}/comments
    method: GET
    data_selector: records
- name: create_comment
  endpoint:
    path: /~/workspaces/{id}/comments
    method: POST
    data_selector: none
- name: update_comment
  endpoint:
    path: /~/workspaces/{id}/comments/{commentId}
    method: POST
    data_selector: none
- name: delete_comment
  endpoint:
    path: /~/workspaces/{id}/comments/{commentId}
    method: DELETE
    data_selector: none
- name: update_app
  endpoint:
    path: /v1/~/apps/{id}
    method: POST
- name: delete_app
  endpoint:
    path: /v1/~/apps/{id}
    method: DELETE
- name: create_moesif_plan
  endpoint:
    path: /v1/~/billing/catalog/plans
    method: POST
- name: addApp
  endpoint:
    path: /~/apps
    method: POST
    data_selector: body
    params: {}
- name: getApps
  endpoint:
    path: /~/apps
    method: GET
    data_selector: anonymous
    params:
      take: '0'
- name: deleteACLPermissions
  endpoint:
    path: /~/workspaces/{id}/policy/acl
    method: DELETE
    data_selector: body
    params:
      grantee: string
- name: plans
  endpoint:
    path: /~/billing/catalog/plans
    method: POST
    data_selector: name
    params: {}
- name: list_plans
  endpoint:
    path: /~/billing/catalog/plans
    method: GET
    data_selector: '[]'
    params: {}
- name: moesif_plan
  endpoint:
    path: /v1/~/billing/catalog/plans/{id}
    method: GET
    params:
      provider: string
- name: delete_moesif_plan
  endpoint:
    path: /v1/~/billing/catalog/plans/{id}
    method: DELETE
    params:
      provider: string
- name: update_moesif_plan
  endpoint:
    path: /v1/~/billing/catalog/plans/{id}
    method: PUT
    params:
      provider: string
- name: plans
  endpoint:
    path: /~/billing/catalog/plans/{id}
    method: PUT
    data_selector: data
    params:
      provider: string
- name: prices
  endpoint:
    path: /~/billing/catalog/prices
    method: POST
    data_selector: created_at
    params:
      provider: string
- name: list_prices
  endpoint:
    path: /~/billing/catalog/prices
    method: GET
    data_selector: prices
    params:
      provider: string
- name: moesif_price
  endpoint:
    path: /~/billing/catalog/prices/{id}
    method: GET
    data_selector: anonymous
    params:
      provider: string
- name: moesif_price_delete
  endpoint:
    path: /~/billing/catalog/prices/{id}
    method: DELETE
    params:
      provider: string
- name: moesif_price_update
  endpoint:
    path: /~/billing/catalog/prices/{id}
    method: PUT
    params:
      provider: string
- name: billing_catalog_prices
  endpoint:
    path: /~/billing/catalog/prices/{id}
    method: PUT
- name: billing_catalog_uom
  endpoint:
    path: /~/billing/catalog/uom
    method: GET
- name: billing_meters
  endpoint:
    path: /~/billing/meters
    method: POST
    data_selector: null
    params: {}
- name: billing_meter
  endpoint:
    path: /~/billing/meters
    method: POST
    data_selector: null
    params: {}
- name: billing_meters_list
  endpoint:
    path: /~/billing/meters
    method: GET
    data_selector: null
    params: {}
- name: updateMeter
  endpoint:
    path: /~/billing/meters/{meterId}
    method: POST
- name: billing_meter
  endpoint:
    path: /~/billing/meters/{meterId}
    method: POST
- name: get_billing_meter
  endpoint:
    path: /~/billing/meters/{meterId}
    method: GET
- name: delete_billing_meter
  endpoint:
    path: /~/billing/meters/{meterId}
    method: DELETE
- name: billing_meter_webhook
  endpoint:
    path: /~/billing/meters/{meterId}/webhooks/channels/test
    method: POST
    data_selector: response_body
    params: {}
- name: billing_plans
  endpoint:
    path: /~/billing/plans
    method: POST
    data_selector: response_body
    params: {}
- name: list_billing_plans
  endpoint:
    path: /~/billing/plans
    method: GET
    data_selector: response_body
    params: {}
- name: billing_custom_plan
  endpoint:
    path: /~/billing/plans
    method: GET
    data_selector: ''
    params: {}
- name: update_billing_custom_plan
  endpoint:
    path: /~/billing/plans/{planId}
    method: POST
    data_selector: ''
    params: {}
- name: get_billing_custom_plan
  endpoint:
    path: /~/billing/plans/{planId}
    method: GET
    data_selector: ''
    params: {}
- name: delete_billing_custom_plan
  endpoint:
    path: /~/billing/plans/{planId}
    method: DELETE
    data_selector: ''
    params: {}
- name: create_balance_transaction
  endpoint:
    path: /~/billing/reports/balance_transactions
    method: POST
    data_selector: ''
    params: {}
- name: balance_transactions
  endpoint:
    path: /~/billing/reports/balance_transactions
    method: POST
    data_selector: none
    params: {}
- name: chats
  endpoint:
    path: /~/chats
    method: GET
    data_selector: none
    params: {}
- name: chats
  endpoint:
    path: /~/chats/{chat_id}
    method: POST
- name: chats
  endpoint:
    path: /~/chats/{chat_id}
    method: GET
- name: chats
  endpoint:
    path: /~/chats/{chat_id}
    method: DELETE
- name: cohorts
  endpoint:
    path: /~/cohorts
    method: POST
- name: cohort
  endpoint:
    path: /~/cohorts
    method: POST
    data_selector: ''
    params: {}
- name: get_cohorts
  endpoint:
    path: /~/cohorts
    method: GET
    data_selector: ''
    params:
      cohort_type: string
- name: update_cohort
  endpoint:
    path: /~/cohorts/{cohortId}
    method: POST
    data_selector: ''
    params: {}
- name: cohort
  endpoint:
    path: /~/cohorts/{cohortId}
    method: GET
    params:
      cohort_type: string
- name: delete_cohort
  endpoint:
    path: /~/cohorts/{cohortId}
    method: DELETE
    params: {}
- name: delete_sample_rate
  endpoint:
    path: /~/cohorts/{cohortId}/sample_rate
    method: DELETE
    params: {}
- name: delete_dashboard
  endpoint:
    path: /~/dashboard/{dashId}
    method: DELETE
    params: {}
- name: copy_dashboard
  endpoint:
    path: /~/dashboard/{id}/copy
    method: POST
- name: create_dashboard
  endpoint:
    path: /~/dashboards
    method: POST
- name: get_dashboards
  endpoint:
    path: /~/dashboards
    method: GET
- name: copy_all_dashboards
  endpoint:
    path: /~/dashboards/copy
    method: POST
- name: update_dashboard
  endpoint:
    path: /~/dashboards/{dashId}
    method: POST
- name: dashboard
  endpoint:
    path: /~/dashboards/{dashId}
    method: POST
    data_selector: response
    params: {}
- name: dashboard_cascade
  endpoint:
    path: /~/dashboards/{dashId}/cascade
    method: DELETE
    data_selector: response
    params: {}
- name: dashboard_acl
  endpoint:
    path: /~/dashboards/{id}/policy/acl
    method: POST
    data_selector: response
    params: {}
- name: delete_dashboard_acl
  endpoint:
    path: /~/dashboards/{id}/policy/acl
    method: DELETE
    data_selector: null
    params:
      id: path
      grantee: query
- name: create_email_template
  endpoint:
    path: /~/emails/templates
    method: POST
    data_selector: null
    params: {}
- name: get_email_templates
  endpoint:
    path: /~/emails/templates
    method: GET
    data_selector: null
    params: {}
- name: email_templates
  endpoint:
    path: /~/emails/templates
    method: GET
    data_selector: null
    params: {}
- name: update_email_template
  endpoint:
    path: /~/emails/templates/{id}
    method: POST
    data_selector: null
    params: {}
- name: get_email_template
  endpoint:
    path: /~/emails/templates/{id}
    method: GET
    data_selector: null
    params: {}
- name: email_template
  endpoint:
    path: /~/emails/templates/{id}
    method: GET
    data_selector: none
    params: {}
- name: delete_email_template
  endpoint:
    path: /~/emails/templates/{id}
    method: DELETE
    data_selector: none
    params: {}
- name: find_objects
  endpoint:
    path: /~/find
    method: POST
    data_selector: none
    params: {}
- name: governance_rules
  endpoint:
    path: /~/governance/rules
    method: POST
    data_selector: none
    params: {}
- name: governance_rules
  endpoint:
    path: /~/governance/rules
    method: POST
    data_selector: body
    params: {}
- name: governance_rules
  endpoint:
    path: /~/governance/rules
    method: GET
    data_selector: body
    params: {}
- name: item_plan
  endpoint:
    path: /item_plan
    method: GET
- name: item_price
  endpoint:
    path: /item_price
    method: GET
- name: item_prices
  endpoint:
    path: /item_prices
    method: GET
- name: reporting
  endpoint:
    path: /reporting
    method: GET
- name: item_plan
  endpoint:
    path: /item_plan
    method: POST
    data_selector: item_plan
    params:
      id: required
- name: item_price
  endpoint:
    path: /item_price
    method: POST
    data_selector: item_price
    params: {}
- name: MoesifPlan
  endpoint:
    path: /moesif/plans
    method: GET
    data_selector: plans
    params: {}
- name: item_plan
  endpoint:
    path: /services/data/vXX.X/sobjects/ItemPlan
    method: GET
    data_selector: records
- name: item_price
  endpoint:
    path: /services/data/vXX.X/sobjects/ItemPrice
    method: GET
    data_selector: records
- name: item_prices
  endpoint:
    path: /services/data/vXX.X/sobjects/ItemPrices
    method: GET
    data_selector: records
- name: reporting
  endpoint:
    path: /services/data/vXX.X/sobjects/Reporting
    method: GET
    data_selector: records
- name: MoesifPlan
  endpoint:
    path: /path/to/moesif_plan
    method: GET
    data_selector: records
    params: {}
- name: ChargebeeBillingParams
  endpoint:
    path: /path/to/chargebee_billing_params
    method: GET
    data_selector: records
    params: {}
- name: billing_params
  endpoint:
    path: /billing_params
    method: GET
    data_selector: item_plan
    params: {}
- name: meter_update_item
  endpoint:
    path: /meter_update_item
    method: GET
    data_selector: billing_plan
    params: {}
- name: credit_balance_metric
  endpoint:
    path: /credit_balance_metric
    method: GET
    data_selector: current_balance
    params: {}
- name: custom_plan_update_item
  endpoint:
    path: /custom_plan_update_item
    method: GET
    data_selector: _id
    params: {}
- name: moesif_plan
  endpoint:
    path: /moesif_plan
    method: GET
    data_selector: name
    params: {}
- name: item_plan
  endpoint:
    path: /item_plan
    method: GET
    data_selector: item_plan
    params: {}
- name: item_price
  endpoint:
    path: /item_price
    method: GET
    data_selector: item_price
    params: {}
- name: item_prices
  endpoint:
    path: /item_prices
    method: GET
    data_selector: item_prices
    params: {}
- name: reporting
  endpoint:
    path: /reporting
    method: GET
    data_selector: reporting
    params: {}
- name: BillingMeterDocument
  endpoint:
    path: /billing/meter
    method: POST
    data_selector: billing_plan
    params: {}
- name: BillingReportProperty
  endpoint:
    path: /billing/report
    method: GET
    data_selector: values
    params: {}
- name: recurly_params
  endpoint:
    path: /billing/recurly_params
    method: GET
    data_selector: params
- name: chargebee_params
  endpoint:
    path: /billing/chargebee_params
    method: GET
    data_selector: params
- name: stripe_params
  endpoint:
    path: /billing/stripe_params
    method: GET
    data_selector: params
- name: zuora_params
  endpoint:
    path: /billing/zuora_params
    method: GET
    data_selector: params
- name: RecurlyPlanAddOn
  endpoint:
    path: /recurly/addon
    method: POST
    data_selector: add_on
    params: {}
- name: DrawingItem
  endpoint:
    path: /drawing/item
    method: POST
    data_selector: item
    params: {}
- name: ChartItem
  endpoint:
    path: /chart/item
    method: POST
    data_selector: chart_item
    params: {}
- name: RecurlyAddOnPercentageTiers
  endpoint:
    path: /recurly/addon/percentage_tiers
    method: POST
    data_selector: percentage_tiers
    params: {}
- name: BillingReport
  endpoint:
    path: /billing/report
    method: GET
    data_selector: billing_report
    params: {}
- name: ACLItem
  endpoint:
    path: /acl/item
    method: POST
    data_selector: acl_item
    params: {}
- name: ZuoraBillingParams
  endpoint:
    path: /zuora/billing/params
    method: POST
    data_selector: billing_params
    params: {}
- name: CohortConfig
  endpoint:
    path: /cohort/config
    method: POST
    data_selector: cohort_config
    params: {}
- name: RegexRule
  endpoint:
    path: /regex/rule
    method: POST
    data_selector: regex_rule
    params: {}
- name: GovernanceRulesVariables
  endpoint:
    path: /governance/rules/variables
    method: POST
    data_selector: governance_variables
    params: {}
- name: TransformQuantity
  endpoint:
    path: /transform/quantity
    method: POST
    data_selector: transform_quantity
    params: {}
- name: ChannelRequest
  endpoint:
    path: /channel/request
    method: POST
    data_selector: channel_request
    params: {}
- name: WorkspaceDocument
  endpoint:
    path: /workspace/document
    method: POST
    data_selector: workspace_document
    params: {}
- name: FindObjectFilters
  endpoint:
    path: /find/objects/filters
    method: POST
    data_selector: find_filters
    params: {}
- name: MoesifPriceTier
  endpoint:
    path: /moesif/price/tier
    method: POST
    data_selector: price_tier
    params: {}
- name: NotificationRule
  endpoint:
    path: /NotificationRule
    method: GET
    data_selector: records
- name: WebhookValidationResponse
  endpoint:
    path: /billing.webhook.WebhookValidationResponse
    method: GET
    data_selector: records
- name: TemplateItem
  endpoint:
    path: /TemplateItem
    method: GET
    data_selector: records
- name: Summary
  endpoint:
    path: /Summary
    method: GET
    data_selector: records
- name: GovernanceRuleUpdateItem
  endpoint:
    path: /GovernanceRuleUpdateItem
    method: GET
    data_selector: records
- name: BillingCustomPlanCreateItem
  endpoint:
    path: /BillingCustomPlanCreateItem
    method: GET
    data_selector: records
- name: WorkspaceUpdateItem
  endpoint:
    path: /WorkspaceUpdateItem
    method: GET
    data_selector: records
- name: BillingWebhookParams
  endpoint:
    path: /BillingWebhookParams
    method: GET
    data_selector: records
- name: searchUsersResponse
  endpoint:
    path: /searchUsersResponse
    method: GET
    data_selector: records
- name: Subscription
  endpoint:
    path: /Subscription
    method: GET
    data_selector: records
- name: searchEventsResponse
  endpoint:
    path: /searchEventsResponse
    method: GET
    data_selector: records
- name: searchcompanysResponse
  endpoint:
    path: /searchcompanysResponse
    method: GET
    data_selector: records
- name: UserUpdate
  endpoint:
    path: /UserUpdate
    method: GET
    data_selector: records
- name: userResponse
  endpoint:
    path: /user
    method: GET
    data_selector: _source
    params: {}
- name: subscriptionBalance
  endpoint:
    path: /subscription/balance
    method: GET
    data_selector: available_balance
    params: {}
- name: eventResponse
  endpoint:
    path: /event
    method: GET
    data_selector: _source
    params: {}
- name: addSubscription
  endpoint:
    path: /subscription/add
    method: POST
    data_selector: subscription_id
    params: {}
- name: companyUpdate
  endpoint:
    path: /company/update
    method: PUT
    data_selector: company_id
    params: {}
- name: billing_webhook_params
  endpoint:
    path: /billing/webhook/params
    method: GET
    data_selector: params
    params:
      company_id: required
- name: company
  endpoint:
    path: /api/company
    method: GET
    data_selector: companies
    params:
      company_id: required
- name: Track Action API
  endpoint:
    path: /docs/api#track-custom-actions-in-batch
    method: POST
- name: users
  endpoint:
    path: /users
    method: GET
- name: companies
  endpoint:
    path: /companies
    method: GET
- name: alert_rules
  endpoint:
    path: /api/alert_rules
    method: GET
    data_selector: alertRules
- name: notification_channels
  endpoint:
    path: /api/notification_channels
    method: GET
    data_selector: channels
- name: prebuilt_dashboards
  endpoint:
    path: /dashboards/prebuilt
    method: GET
    data_selector: dashboards
- name: workspace_types
  endpoint:
    path: /workspaces/types
    method: GET
    data_selector: types
- name: plans
  endpoint:
    path: /api/plans
    method: GET
    data_selector: records
- name: prices
  endpoint:
    path: /api/prices
    method: GET
    data_selector: records
- name: Auth0
  endpoint:
    path: /docs/developer-portal/configure-auth0-for-identity/
    method: GET
- name: Okta
  endpoint:
    path: /docs/developer-portal/configure-okta-for-identity/
    method: GET
- name: Stripe
  endpoint:
    path: /docs/developer-portal/configure-stripe-for-checkout/
    method: GET
- name: Auth0 M2M
  endpoint:
    path: /docs/developer-portal/setup-auth0-m2m-plugin/
    method: GET
- name: JWT
  endpoint:
    path: /docs/developer-portal/setup-custom-provisioning/
    method: GET
- name: Kong Gateway
  endpoint:
    path: /docs/developer-portal/setup-kong-gateway-plugin/
    method: GET
- name: Kong Konnect
  endpoint:
    path: /docs/developer-portal/setup-kong-konnect-plugin/
    method: GET
- name: Tyk Gateway
  endpoint:
    path: /docs/developer-portal/setup-tyk-plugin/
    method: GET
- name: Functionality
  endpoint:
    path: /
    method: GET
- name: Performance
  endpoint:
    path: /
    method: GET
- name: Advertising
  endpoint:
    path: /
    method: GET
- name: custom_actions
  endpoint:
    path: /implementation/log-http-calls-from-actions-api
    method: GET
- name: api_usage
  endpoint:
    path: /implementation/overview
    method: GET
- name: API Monitoring
  endpoint:
    path: /api/monitoring
    method: GET
    data_selector: data
- name: API Traces
  endpoint:
    path: /api/traces
    method: GET
- name: api_usage_metrics
  endpoint:
    path: /api/usage/metrics
    method: GET
- name: billing_integration
  endpoint:
    path: /api/billing/integration
    method: POST
- name: product_catalog
  endpoint:
    path: /product-catalog
    method: GET
    data_selector: records
- name: prepaid_credits
  endpoint:
    path: /solutions/prepaid-credits-and-balance
    method: GET
    data_selector: records
- name: behavioral_emails
  endpoint:
    path: /behavioral-emails
    method: GET
    data_selector: records
- name: api_usage
  endpoint:
    path: /api/usage
    method: GET
    data_selector: data
- name: api_metrics
  endpoint:
    path: /api/metrics
    method: GET
    data_selector: metrics
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: events
  endpoint:
    path: /api/events
    method: GET
    data_selector: records
    params: {}
- name: api_usage
  endpoint:
    path: /api/usage
    method: GET
    data_selector: data
- name: api_logs
  endpoint:
    path: /api/logs
    method: GET
    data_selector: data
- name: api_usage
  endpoint:
    path: /api/usage
    method: GET
    data_selector: records
- name: api_errors
  endpoint:
    path: /api/errors
    method: GET
    data_selector: records
- name: api_usage
  endpoint:
    path: /api/usage
    method: GET
    data_selector: usageData
- name: api_logs
  endpoint:
    path: /api/logs
    method: GET
    data_selector: logsData
- name: api_usage
  endpoint:
    path: /api/usage
    method: GET
    data_selector: data
    params: {}
- name: sub_processors
  endpoint:
    path: /subprocessors
    method: GET
- name: security_measures
  endpoint:
    path: /security
    method: GET
notes:
- Uses OAuth2 with refresh token — requires setup of connected app in api
- Some objects like Contact may return nulls in deeply nested fields
- Retrieve your Collector Application Id by logging into Moesif and going to *API
  keys* from bottom left menu.
- Generate a Management API key by logging into Moesif and going to *API keys* from
  bottom left menu.
- Moesif does not rate limit data ingestion via the collector APIs.
- Moesif can process events that are up to 30 days in the past.
- Moesif's official SDKs and plugins only use HTTPS, but the API does support HTTP
  for very specific applications like legacy embedded devices (uncommon).
- It's strongly recommended to ensure all communication is HTTPS.
- Requires setup of connected app in api
- Use valid Application Id for authentication.
- Maximum batch size is 50MB.
- Moesif recommends using the same Application Id for all integrations within the
  same application environment.
- Requires setup of collector application ID
- The maximum batch size is 15MB.
- If the user does not exist, Moesif will create a new one.
- CORS is enabled on this API. Access-Control-Allow-Origin is set to *
- The maximum batch size is 50MB. Break up larger batches into smaller batches.
- If you call both identifyUser() and identifyCompany() in the same session, then
  Moesif will automatically associate the user with the company.
- Requires managementAPIToken with scopes read:billing_meters read:billing_reports
- For update_companies, a body with company details is required
- The subscription creation requires a body payload containing trial_start, company_id,
  start_date, and other fields.
- Create or Update a Subscription
- You must be authenticated by means of managementAPIToken.
- 'To perform this operation, you must be authenticated by means of managementAPIToken
  (Scopes: create:subscriptions update:subscriptions)'
- 'To perform this operation, you must be authenticated by means of one of the following
  methods: managementAPIToken ( Scopes: read:subscriptions )'
- 'Must be authenticated by means of managementAPIToken (Scopes: create:users update:users)'
- 'To perform this operation, you must be authenticated by means of one of the following
  methods: managementAPIToken (Scopes: create:users update:users)'
- Subscriptions in Moesif are identified via a subscription_id and should be a permanent
  and robust identifier.
- If a subscription does not exist, a new one will be created. If a subscription exists,
  it will be merged on top of existing fields.
- Only company_id is required for creating or updating companies.
- Subscription IDs should be permanent identifiers.
- 'Your Management API token must be added to the request Authorization header using
  the format: Authorization: Bearer YOUR_MANAGEMENT_API_KEY'
- Uses OAuth2 with refresh token â€” requires setup of connected app in api
- Moesif uses API keys for authentication.
- Only company_id is required.
- metadata can be any custom object
- If domain is set, Moesif will enrich your profiles with publicly available info
- 'To perform this operation, you must be authenticated by means of one of the following
  methods: managementAPIToken ( Scopes: create:companies update:companies )'
- Actions can be tracked from your frontend app using moesif-browser-js or directly
  from your backend using this API.
- The maximum batch size for actions is 15MB.
- 'To perform operations, you must be authenticated by means of managementAPIToken
  (Scopes: read:billing_meters read:billing_reports).'
- To perform operations, you must be authenticated by means of managementAPIToken.
- Moesif recommends using HTTPS for all communications.
- The maximum batch size is 50MB.
- Ensure to replace YOUR_COLLECTOR_APPLICATION_ID with your real Application Id for
  all requests
- A company is your direct customer paying for your service.
- If a company does not exist, a new one will be created.
- Uses managementAPIToken for authentication.
- 'To perform this operation, you must be authenticated by means of one of the following
  methods: managementAPIToken ( Scopes: create:subscriptions update:subscriptions
  )'
- 'To perform this operation, you must be authenticated by means of one of the following
  methods: managementAPIToken ( Scopes: read:events )'
- The maximum batch size is 15MB. Break up larger batches into smaller batches.
- Only user_id is required for updating users.
- If a company exists, the new company properties will be merged with the existing
  properties recursively.
- Requires management API token with appropriate scopes.
- Requires management API key for authorization
- Requires a valid Bearer token for authorization.
- You must be authenticated by means of managementAPIToken
- 'You must be authenticated by means of managementAPIToken with scopes: create:subscriptions
  update:subscriptions'
- Uses OAuth2 with refresh token - requires setup of connected app in moesif
- Some endpoints may have rate limits
- Moesif does not rate limit data ingestion via the collector APIs. However, you can
  still be throttled due to security reasons to protect Moesif infrastructure.
- Requires an application ID for API calls.
- You cannot save a batch of users with moesif-browser-js.
- To perform operations, you must be authenticated by means of managementAPIToken
  with appropriate scopes.
- Requires a valid management API key for authorization
- 'To perform operations, you must be authenticated by means of managementAPIToken
  with scopes: read:companies'
- 'Uses managementAPIToken for authentication with scopes: create:subscriptions update:subscriptions'
- 'To perform these operations, you must be authenticated by means of managementAPIToken
  (Scopes: read:events, read:users)'
- To perform operations, authentication with managementAPIToken is required.
- 'To perform operations, you must be authenticated by means of managementAPIToken
  (Scopes: create:users update:users for batch update, read:users for getting user,
  and delete:users for deleting user)'
- Moesif recommends using the same Application Id for all integrations within the
  same application environment
- Maximum batch size is 50MB. Break up larger batches into smaller batches.
- Maximum batch size for actions is 15MB.
- 'To perform this operation, you must be authenticated by means of one of the following
  methods: managementAPIToken (Scopes: read:billing_reports read:companies)'
- Requires managementAPIToken with scopes read:billing_meters, read:billing_reports,
  create:companies, update:companies
- 'You must be authenticated by means of managementAPIToken (Scopes: create:subscriptions
  update:subscriptions)'
- 'To perform these operations, you must be authenticated by means of managementAPIToken
  with Scopes: read:events'
- To perform these operations, you must be authenticated using managementAPIToken.
- To perform these operations, you must be authenticated with a management API token.
- 'To perform this operation, you must be authenticated by means of one of the following
  methods: managementAPIToken ( Scopes: read:public_workspaces )'
- Moesif recommends using the same Application Id for all integrations.
- To perform operations, you must be authenticated by managementAPIToken with appropriate
  scopes.
- Input payload must be in JSON format.
- Subscription creation or update requires specific fields in the payload.
- 'To perform this operation, you must be authenticated by means of one of the following
  methods: managementAPIToken (Scopes: read:users, create:users, update:users)'
- To perform workspace operations, you must be authenticated using managementAPIToken
  with appropriate scopes.
- 'To perform this operation, you must be authenticated by means of one of the following
  methods: managementAPIToken (Scopes: read:workspaces)'
- Requires authentication with managementAPIToken
- Maximum size of single event is 1MB.
- If a company does not exist, a new one will be created. If a company exists, the
  new company properties will be merged with the existing properties recursively.
- 'Requires scopes: read:billing_reports read:companies'
- 'To perform operations, you must be authenticated by means of managementAPIToken
  (Scopes: read:companies)'
- POST request to create or update a subscription
- Requires setup of management API key
- To perform operations, you must be authenticated by means of managementAPIToken
  with scopes read:events.
- 'To perform this operation, you must be authenticated by means of managementAPIToken
  (Scopes: read:events, read:users).'
- 'To perform operations, you must be authenticated by means of managementAPIToken
  with scopes: read:users, create:users, update:users.'
- 'To perform this operation, you must be authenticated by means of one of the following
  methods: managementAPIToken ( Scopes: create:workspaces create:public_workspaces
  )'
- 'To perform this operation, you must be authenticated by means of one of the following
  methods: managementAPIToken ( Scopes: read:workspaces )'
- To perform operations, authentication is required using managementAPIToken.
- Users are identified via a user_id and should be a permanent identifier.
- Metadata can be any custom object.
- 'Scopes: read:billing_reports read:companies'
- Requires managementAPIToken with scopes read:billing_meters read:billing_reports
  for GET requests.
- Requires managementAPIToken with scopes create:companies update:companies for POST
  requests.
- To perform operations, you must be authenticated by means of the managementAPIToken.
- Requires management API key for authorization.
- Requires setup of a management API key.
- Uses managementAPIToken for authentication
- 'To perform user operations, you must be authenticated by means of managementAPIToken
  (Scopes: create:users, update:users, read:users, delete:users)'
- Requires managementAPIToken for authentication with read:public_workspaces scope.
- To perform this operation, you must be authenticated by means of managementAPIToken.
- 'To perform operations, you must be authenticated by means of managementAPIToken
  (Scopes: update:workspaces, read:workspaces, delete:workspaces)'
- Pricing models may vary based on provider.
- Ensure to check for nulls in optional fields.
- Requires token with read:prices scope
- Requires setup of connected app in Chargebee
- Replace *YOUR_COLLECTOR_APPLICATION_ID* with your real Application Id found by logging
  into Moesif and selecting API keys from bottom left menu.
- 'Requires managementAPIToken with scopes: read:billing_reports, read:companies'
- The API requires a management API key for authorization.
- 'To perform this operation, you must be authenticated by means of one of the following
  methods: managementAPIToken (Scopes: create:subscriptions update:subscriptions)'
- To perform these operations, you must be authenticated using a management API token.
- 'You must use managementAPIToken for authentication with scopes: read:users, create:users,
  update:users.'
- 'To perform this operation, you must be authenticated by means of one of the following
  methods: managementAPIToken (Scopes: update:plans)'
- 'To perform this operation, you must be authenticated by means of one of the following
  methods: managementAPIToken (Scopes: read:prices)'
- 'To perform this operation, you must be authenticated by means of one of the following
  methods: managementAPIToken ( Scopes: read:billing_meters )'
- 'To perform this operation, you must be authenticated by means of managementAPIToken
  (Scopes: create:billing_meters)'
- 'To perform this operation, you must be authenticated by means of one of the following
  methods: managementAPIToken (Scopes: create:billing_meters)'
- Creates and logs a batch of API calls to Moesif.
- Maximum batch size is 15MB.
- A company can have one or more users and one or more subscriptions.
- 'Requires managementAPIToken for authentication with scopes: read:billing_meters
  read:billing_reports'
- 'For updating companies, requires managementAPIToken with scopes: create:companies
  update:companies'
- Requires managementAPIToken with read:companies scope
- To perform operations, you must be authenticated using managementAPIToken with the
  appropriate scopes.
- 'To perform this operation, you must be authenticated by means of one of the following
  methods: managementAPIToken (Scopes: read:public_workspaces)'
- Uses management API token for authentication.
- 'To perform this operation, you must be authenticated by means of one of the following
  methods: managementAPIToken ( Scopes: create:workspaces, delete:workspaces, create:apps,
  read:apps)'
- 'To perform this operation, you must be authenticated by means of one of the following
  methods: managementAPIToken (Scopes: create:plans)'
- 'To perform operations, you must be authenticated by means of managementAPIToken
  (Scopes: read:plans, delete:plans)'
- 'You must be authenticated by means of managementAPIToken (Scopes: update:plans)'
- 'To perform this operation, you must be authenticated by means of one of the following
  methods: managementAPIToken (Scopes: update:prices)'
- Requires setup of API key for authorization
- 'To perform this operation, you must be authenticated by means of one of the following
  methods: managementAPIToken ( Scopes: create:billing_meters )'
- 'To perform these operations, you must be authenticated using managementAPIToken
  (Scopes: read:billing_meters read:billing_reports).'
- Requires a valid Bearer token for authorization
- 'To perform this operation, you must be authenticated by means of one of the following
  methods: managementAPIToken ( Scopes: create:users update:users )'
- Management API Token required for authentication.
- To perform operations, you must be authenticated using managementAPIToken.
- 'To perform operations, you must authenticate using managementAPIToken (Scopes:
  read:plans, delete:plans)'
- 'To perform this operation, you must be authenticated by means of one of the following
  methods: managementAPIToken (Scopes: create:prices)'
- 'To perform this operation, you must be authenticated by means of one of the following
  methods: managementAPIToken ( Scopes: read:prices )'
- 'To perform this operation, you must be authenticated by means of one of the following
  methods: managementAPIToken ( Scopes: delete:prices )'
- 'To perform this operation, you must be authenticated by means of one of the following
  methods: managementAPIToken ( Scopes: update:prices )'
- 'Requires managementAPIToken with scopes: update:prices for updating prices.'
- 'Requires managementAPIToken with scopes: read:prices for retrieving UOM.'
- To perform this operation, you must be authenticated by means of managementAPIToken
  with scope create:billing_meters.
- Actions can be tracked within your UI or from your backend.
- Only user_id is required. Metadata can be any custom object.
- Requires managementAPIToken with scopes read:billing_reports, read:companies.
- 'To perform operations, authenticate with managementAPIToken (Scopes: read:billing_meters
  read:billing_reports; create:companies update:companies).'
- 'To perform this operation, you must be authenticated by means of one of the following
  methods: managementAPIToken (Scopes: create:companies update:companies)'
- 'To perform this operation, you must be authenticated by means of one of the following
  methods: managementAPIToken (Scopes: read:companies)'
- 'To perform this operation, you must be authenticated by means of one of the following
  methods: managementAPIToken (Scopes: delete:companies)'
- The API requires a valid management API key for authorization.
- 'To perform operations, you must be authenticated by managementAPIToken (Scopes:
  read:events, read:users)'
- 'You must be authenticated by means of managementAPIToken (Scopes: create:users
  update:users)'
- 'You must be authenticated by means of managementAPIToken (Scopes: read:public_workspaces)'
- Requires management API token with scopes update:workspaces and read:workspaces.
- To perform operations, you must be authenticated using managementAPIToken with appropriate
  scopes.
- 'To perform this operation, you must be authenticated by means of one of the following
  methods: managementAPIToken ( Scopes: create:plans )'
- 'To perform these operations, you must authenticate with managementAPIToken (Scopes:
  read:prices, delete:prices)'
- Requires authentication via managementAPIToken
- Requires managementAPIToken with specific scopes for each endpoint.
- Moesif supports idempotent requests to prevent duplicate events.
- Events older than 30 days are rejected by the collector API.
- Only user_id is required for creating or updating a user.
- 'To perform this operation, you must be authenticated by means of one of the following
  methods: managementAPIToken (Scopes: read:billing_meters read:billing_reports)'
- 'To perform this operation, you must be authenticated by means of one of the following
  methods: managementAPIToken (Scopes: read:events, read:users)'
- 'To perform operations, you must be authenticated with managementAPIToken (Scopes:
  read:subscriptions)'
- 'To perform these operations, you must be authenticated by means of managementAPIToken
  with scopes: read:users, create:users, update:users.'
- To perform operations, you must be authenticated by means of managementAPIToken
  with specific scopes.
- Requires managementAPIToken with appropriate scopes
- 'To perform operations, you must be authenticated by means of managementAPIToken
  (Scopes: read:prices, delete:prices)'
- 'You must be authenticated by means of managementAPIToken (Scopes: read:billing_meters)'
- To perform these operations, you must be authenticated by means of managementAPIToken.
- 'To perform this operation, you must be authenticated by means of one of the following
  methods: managementAPIToken (Scopes: create:cohorts)'
- 'To perform this operation, you must be authenticated by means of one of the following
  methods: managementAPIToken (Scopes: read:cohorts)'
- 'To perform this operation, you must be authenticated by means of one of the following
  methods: managementAPIToken (Scopes: update:cohorts)'
- If a user does not exist, Moesif will create a new one.
- If a user exists, the new user properties will be merged with the existing properties
  recursively.
- Requires management API key for authentication
- 'Requires managementAPIToken with scopes: read:billing_meters read:billing_reports'
- 'Requires managementAPIToken with scopes: create:companies update:companies'
- The trial_start, start_date, current_period_start, cancel_time, trial_end, current_period_end,
  and created fields are in ISO 8601 format.
- To perform this operation, you must be authenticated by means of managementAPIToken
  with scopes create:subscriptions update:subscriptions.
- 'To perform operations, you must be authenticated by means of managementAPIToken
  (Scopes: read:events, read:users)'
- Requires managementAPIToken with appropriate scopes.
- 'To perform this operation, you must be authenticated by means of one of the following
  methods: managementAPIToken ( Scopes: create:apps )'
- 'To perform this operation, you must be authenticated by means of one of the following
  methods: managementAPIToken ( Scopes: read:apps )'
- 'To perform this operation, you must be authenticated by means of one of the following
  methods: managementAPIToken ( Scopes: delete:workspaces )'
- 'To perform operations, you must be authenticated by means of one of the following
  methods: managementAPIToken (Scopes: read:plans, delete:plans)'
- Requires managementAPIToken for authentication.
- 'To perform this operation, you must be authenticated by means of managementAPIToken
  (Scopes: create:dashboards)'
- If using the Moesif secure proxy, the base URL is http://localhost:9500/api/v1 assuming
  it's running on port 9500.
- 'To perform these operations, you must be authenticated by means of managementAPIToken
  (Scopes: read:companies)'
- 'Requires managementAPIToken with scopes: create:subscriptions update:subscriptions'
- Payload must be in JSON format.
- To perform these operations, you must be authenticated by means of a management
  API token.
- To perform these operations, you must be authenticated by means of managementAPIToken
  with appropriate scopes.
- Requires setup of management API token with read permission for public workspaces.
- 'Requires managementAPIToken with scopes: create:workspaces create:public_workspaces'
- 'Requires managementAPIToken with scopes: read:workspaces'
- 'Requires managementAPI token with scopes: update:workspaces, read:workspaces, delete:workspaces'
- Requires management API token to authenticate requests.
- 'You must be authenticated by means of managementAPIToken with scopes: create:plans'
- 'To perform this operation, you must be authenticated by means of managementAPIToken
  (Scopes: read:prices, delete:prices)'
- 'To perform this operation, you must be authenticated by means of managementAPIToken
  (Scopes: read:billing_meters, create:billing_meters)'
- 'To perform this operation, you must be authenticated by means of one of the following
  methods: managementAPIToken (Scopes: create:cohorts, update:cohorts)'
- Moesif's official SDKs and plugins only use HTTPS, but the API does support HTTP
  for very specific applications like legacy embedded devices.
- If a user does not exist, Moesif will create a new one. If a user exists, the new
  user properties will be merged with the existing properties recursively.
- Only company_id is required for updating companies.
- If company does not exist, a new one will be created.
- If domain is set, Moesif will enrich your profiles with publicly available info.
- You must be authenticated by means of a managementAPIToken.
- 'To perform this operation, you must be authenticated by means of one of the following
  methods: managementAPIToken ( Scopes: update:workspaces update:public_workspaces
  )'
- Requires setup of management API token with appropriate scopes.
- You must be authenticated by means of managementAPIToken with appropriate scopes.
- To perform operations, you must be authenticated by means of a managementAPIToken
- 'To perform this operation, you must be authenticated by means of one of the following
  methods: managementAPIToken (Scopes: create:cohorts, read:cohorts, update:cohorts)'
- To perform operations, managementAPIToken is required with appropriate scopes.
- To perform operations, authentication is required using managementAPIToken with
  specific scopes.
- 'To perform the DELETE operation, you must be authenticated by means of managementAPIToken
  with the scope: delete:dashboards.'
- 'To perform the POST operation, you must be authenticated by means of managementAPIToken
  with the scope: create:email_templates.'
- Maximum batch size is 50MB
- POST request to create or update a subscription.
- Payload contains subscription details including trial dates, company ID, and items.
- 'To perform this operation, you must be authenticated by means of managementAPIToken
  (Scopes: read:events, read:users)'
- To perform these operations, you must be authenticated by means of a managementAPIToken.
- 'To perform this operation, you must be authenticated by means of one of the following
  methods: managementAPIToken (Scopes: read:plans)'
- To perform the delete operation, you must have delete:plans scope.
- Requires managementAPIToken with update:plans scope.
- 'To perform this operation, you must be authenticated by means of one of the following
  methods: managementAPIToken ( Scopes: create:prices )'
- 'To perform this operation, you must be authenticated by means of one of the following
  methods: managementAPIToken (Scopes: create:billing_meters create:billing_reports)'
- 'To perform this operation, you must be authenticated by means of one of the following
  methods: managementAPIToken (Scopes: read:chats read:events)'
- 'To perform operations, you must be authenticated by means of managementAPIToken
  (Scopes: create:dashboards, read:dashboards)'
- To perform operations, you must be authenticated by managementAPIToken.
- Actions represent events that occur within your application.
- User properties can be stored via the metadata object.
- Uses managementAPIToken for authentication with scopes read:billing_meters read:billing_reports
  create:companies update:companies
- Requires management API key in Authorization header
- To perform batch updates, ensure your payload follows the specified structure.
- Management API token required for all operations.
- You must be authenticated by means of managementAPIToken with scope read:public_workspaces
- To perform actions, you must be authenticated by means of managementAPIToken.
- GET requests to /~/billing/catalog/uom require a provider query parameter.
- 'To perform operations, you must be authenticated with managementAPIToken (Scopes:
  read:billing_meters, create:billing_meters)'
- 'To perform operations on chats, you must be authenticated with managementAPIToken
  (Scopes: update:chats read:events)'
- 'To perform operations on cohorts, you must be authenticated with managementAPIToken
  (Scopes: create:cohorts read:events)'
- Requires proper configuration for billing and pricing models.
- Requires setup of connected app in Moesif.
- Requires management API token with specific scopes.
- To perform these operations, you must be authenticated.
- Payload includes trial_start, company_id, start_date, collection_method, provider,
  items, current_period_start, company_external_id, payment_status, cancel_time, status,
  trial_end, external_id, currency, metadata, subscription_id, version_id, current_period_end,
  created.
- To perform this operation, you must be authenticated by means of managementAPIToken
- 'To perform operations, you must be authenticated by means of managementAPIToken
  (Scopes: create:workspaces, read:workspaces).'
- Requires managementAPIToken for authentication
- To perform operations, you must be authenticated using managementAPIToken with required
  scopes.
- 'To perform this operation, you must be authenticated by means of one of the following
  methods: managementAPIToken'
- To perform operations, you must be authenticated by means of a management API token.
- To perform operations, authentication is required via managementAPIToken.
- Requires setup of management API token
- Requires setup of connected app in API
- Some fields may return nulls
- company_id is a required field.
- Moesif designed with enterprise security and privacy in mind.
- Real-time alerting is available only on paid plans.
- Moesif recommends creating multiple apps such as “Staging” and “Production” to isolate
  data.
- You can include arbitrary metadata with an action which enables you to create billable
  metrics, usage reporting, and more.
- Client-side integrations automatically collect context from the customer’s session
  such marketing attribution and UTM tracking, their browser version, etc.
- Search API allows you to build custom solutions using your data, such as custom
  dashboards, reports, analytics, and so on.
- 'AI Explain is available in for the following User and Company analysis types: Funnels,
  Retention, Composition.'
- To use AI Explain, you must have a paid Moesif plan in Growth or Enterprise.
- Search API allows you to build custom solutions using your data, such as custom
  dashboards, reports, analytics.
- Alert rules enable you to monitor your APIs for issues impacting customers and be
  more proactive in ensuring a great customer experience.
- Moesif organizes dashboards in a tree-like structure.
- Moesif supports direct integration with your favorite billing providers for metered
  billing.
- You can also connect Moesif to a custom provider via webhooks if your billing provider
  is not natively supported by Moesif.
- We recommended that you create different plans when the package has significant
  differences in terms of its offerings and nature.
- We recommend that you create multiple prices under the same plan to model different
  price points.
- Moesif doesn’t enforce any sending restrictions for Behavioral Emails.
- Behavioral Emails works out-of-the-box with SMTP-compatible email providers.
- Moesif ingests event data from your API products and traditional web based applications
  via the Collector API.
- Moesif can sync usage records to customer data platforms like Segment and HubSpot.
- Your use of this Website and the services made available on the Site is subject
  to these Terms of Service.
- Moesif has not sold your Personal Data over the last twelve (12) months and Moesif
  does not sell Personal Data.
- Javascript is required to use Moesif.
- Moesif uses cookies and web beacons to enhance visitor experience and understand
  usage.
- All Collector API tokens for data ingestion are write only tokens that are signed
  using HMAC SHA-256.
- Management API tokens are also signed using the HMAC SHA-256 algorithm and can be
  limited to specific resource scopes.
- Integrations support on-premises APIs. They don't open any ports and support a local
  relay if your app can't access the internet.
- Javascript is required to use Moesif
- Moesif supports major billing providers like Stripe.
- Automatically notify customers of important API issues like approaching rate limits,
  over plan quotas, using deprecated endpoints.
- Moesif provides out-of-the-box plugins for various gateways.
- Moesif doesn't charge for skipped API calls, yet will intelligently extrapolate
  metrics for accurate reporting.
- Moesif's collection network has points of presence across the globe to reliably
  log API calls at scale.
- Moesif maintains an active SOC 2 Type 2 attestation.
- All data is encrypted at rest/in motion in ISO/IEC 27001 and ISO/IEC 27017 compliant
  data centers.
- Uses OAuth2 with refresh token — requires setup of connected app in Moesif
- Handles sensitive data with client-side encryption
- Ensure customers integrate quickly and efficiently.
- Automatically identify and fix bad integrations or unintentional misuse.
- Moesif has been acquired by WSO2 and will operate as an independent subsidiary.
- Moesif is designed with security and privacy in mind to keep your customer data
  private.
- Moesif maintains an active SOC 2 Type 2 attestation available in the Moesif Trust
  Center.
- All data is encrypted at rest / in motion in ISO/IEC 27001 and ISO/IEC 27017 compliant
  data centers.
- Detect suspicious API behavioral flows that slip through static firewalls.
- Identify suspicious user behaviors and prevent repeat offenders.
- Moesif processes Personal Data for the purpose of providing the Services.
- The data importer shall process the personal data only for the specific purpose(s)
  of the transfer.
- The data importer shall cooperate with the data exporter to erase or rectify the
  data if it becomes aware that the personal data it has received is inaccurate.
- Data Importer provides hosted business analytics applications.
- You should only use your publishable application id in untrusted apps like client-side
  javascript.
errors:
- 'REQUEST_LIMIT_EXCEEDED: Throttle API calls or reduce frequency'
- 'QUERY_TIMEOUT: Break down filters or add selectivity'
- '401 Unauthorized: Recheck OAuth scopes or token expiration'
- '400: Bad Request -- Your request has an incorrect parameter'
- '401: Unauthorized -- Your `X-Moesif-Application-Id` or `Authorization` header is
  incorrect or missing required scopes'
- '429: Too Many Requests -- You are hitting a rate limit such as too many queries
  at same time.'
- 'InvalidArgumentException: Missing field location'
- '429: Too Many Requests -- You are hitting a rate limit such as too many queries
  at the same time.'
- '500: Internal Server Error - Check server logs for more details'
- '400 Bad Request: Check that required fields are included'
- '401 Unauthorized: Recheck application ID'
- '401: Unauthorized -- Your X-Moesif-Application-Id or Authorization header is incorrect
  or missing required scopes'
- '500: Internal Server Error'
- '401 Unauthorized: Check managementAPIToken validity'
- '400 Bad Request: Validate request body structure'
- '401 Unauthorized: Recheck API key or token expiration'
- '401 Unauthorized: Check your management API key.'
- '200: success'
- '401 Unauthorized: Check your API key or application ID.'
- '400 Bad Request: Ensure all required fields are provided.'
- 'InvalidArgumentException: Missing field field_a'
- '400 Bad Request: Check your request payload for errors.'
- '401 Unauthorized: Ensure your application ID is correct.'
- '429 Too Many Requests: Throttle your API calls.'
- '401 Unauthorized: Recheck API key or token expiration.'
- '401 Unauthorized: Recheck management API token or scopes'
- '404: Not Found -- The specified endpoint could not be found'
- '500: InvalidArgumentException: Missing field location'
- '400 Bad Request: Check the request payload for errors.'
- '401 Unauthorized: Recheck application ID.'
- '404 Not Found: Ensure the endpoint is correct.'
- '401 Unauthorized: Recheck API key and scopes'
- '500 Internal Server Error: Check if the request format is correct and required
  fields are included.'
- '400 Bad Request: Check the request body for correct formatting.'
- '401 Unauthorized: Verify the application ID.'
- '401 Unauthorized: Recheck management API token or scopes.'
- '200 OK: success'
- '500: InvalidArgumentException: Missing field field_a'
- '400 Bad Request: Check request formatting or required fields.'
- '401 Unauthorized: Verify API key or application ID.'
- '429 Too Many Requests: Rate limit exceeded, try again later.'
- '400 Bad Request: Check the input payload format'
- '401 Unauthorized: Check your API key'
- '404 Not Found: Verify the endpoint URL'
- '400 Bad Request: Invalid input data'
- '401 Unauthorized: Invalid Application Id'
- '403 Forbidden: Access denied'
- '401 Unauthorized: Check API key or token'
- '400 Bad Request: Check request format or required fields'
- '401 Unauthorized: Check your management API token or scopes.'
- '200: OK'
- '500: InvalidArgumentException - Missing field location'
- '401 Unauthorized: Ensure the application ID is correct.'
- '500 Internal Server Error: Retry the request.'
- '401 Unauthorized: Check API key or permissions.'
- '401 Unauthorized: Recheck API key or permissions'
- '401 Unauthorized: Ensure your management API key is valid.'
- '401 Unauthorized: Check your management API key and scopes.'
- '401 Unauthorized: Ensure correct API key is used'
- '401 Unauthorized: Recheck API key'
- '400 Bad Request: Invalid input data.'
- '401 Unauthorized: Invalid Application Id.'
- '404 Not Found: Resource does not exist.'
- '400 Bad Request: Check if the request parameters are correct.'
- '401 Unauthorized: Ensure the management API key is valid.'
- '404 Not Found: The requested resource was not found.'
- '401 Unauthorized: Recheck API key or token'
- '401 Unauthorized: Check your management API token.'
- '401 Unauthorized: Invalid API Key'
- '404 Not Found: Workspace or Comment not found'
- '400 Bad Request: Missing required fields'
- 'InvalidArgumentException: Missing field'
- '500: Internal Server Error - Check if the request body is correct.'
- '401 Unauthorized: Recheck API key or access permissions.'
- '400 Bad Request: Check your request parameters.'
- '401: Unauthorized - Check your API key.'
- '400: Bad Request - Check the request body.'
- '401 Unauthorized: Recheck API key or token.'
- '404 Not Found: Check if the resource exists.'
- '401 Unauthorized: Check your API key.'
- '400 Bad Request: Check your input parameters.'
- '400 Bad Request: Check your input parameters'
- '401 Unauthorized: Ensure your managementAPIToken is valid'
- '404 Not Found: Resource does not exist'
- '404 Not Found: Ensure the company_id exists.'
- '401 Unauthorized: Check your API key and permissions.'
- '404 Not Found: Ensure the workspace or comment ID exists.'
- '401 Unauthorized: Invalid API key or token'
- '401 Unauthorized: Recheck API key validity'
- '401 Unauthorized: Recheck API token or scopes'
- '401 Unauthorized: Recheck API key.'
- '401 Unauthorized: Invalid management API key'
- '401 Unauthorized: Check API key or token.'
- '400 Bad Request: Validate request payload.'
- '401 Unauthorized: Recheck management API token'
- '403 Forbidden: Check if the token has the required scopes'
- '401 Unauthorized: Check management API token or scopes'
- '401 Unauthorized: Recheck authentication token'
- '204 No Content: success, no content and BillingReports were created or updated'
- '500: Internal Server Error - Check the request format and required fields.'
- '401 Unauthorized: Invalid API key'
- '401 Unauthorized: Recheck API key or permission scopes.'
- '401 Unauthorized: Recheck API key or scopes.'
- '401 Unauthorized: Invalid API key or token.'
- '404 Not Found: Resource not found.'
- '204 No Content: Successful deletion.'
- '403 Forbidden: Insufficient permissions for the operation'
- '404 Not Found: The specified resource could not be found'
- '401 Unauthorized: Recheck your management API key.'
- '401 Unauthorized: Check API key or token expiration.'
- '401 Unauthorized: Check management API key and scopes.'
- '201: Created'
- '400 Bad Request: Check the request payload for correct structure.'
- '401 Unauthorized: Ensure the Application ID is correct.'
- '409 Conflict: Company already exists or data conflict.'
- '401 Unauthorized: Check if the API key is valid.'
- '401 Unauthorized: You must be authenticated by means of one of the following methods:
  managementAPIToken ( Scopes: read:workspaces )'
- '404 Not Found: Resource not found'
- '400 Bad Request: Check your request body or parameters.'
- '404 Not Found: The requested resource could not be found.'
- 200 OK
- '500 Internal Server Error: Check the request body and headers for correctness.'
- '400 Bad Request: Check the request parameters and body for correctness'
- '401 Unauthorized: Ensure your application ID is correct and has permissions'
- '404 Not Found: User not found for the given user_id'
- '400 Bad Request: Verify that the request body conforms to the API specs.'
- '401 Unauthorized: Check your application ID and permissions.'
- '404 Not Found: The specified resource could not be found.'
- '401 Unauthorized: Check your API key or permissions.'
- '404 Not Found: Ensure the workspace and comment IDs are correct.'
- '400 Bad Request: Invalid input parameters.'
- '201 Created: Plan successfully created'
- '200 OK: Plans retrieved successfully'
- '201 Created: success'
- '400 Bad Request: Review request payload for required fields.'
- 'Unauthorized: Check if the management API token is valid or has required scopes.'
- '500: Internal Server Error - Check server logs for details'
- '401 Unauthorized: Check your API key and permissions'
- '200: OK - success'
- '401 Unauthorized: Recheck management API Key or token expiration'
- '401 Unauthorized: Ensure the management API token is valid and has the required
  scopes.'
- '400 Bad Request: Check request parameters and body'
- '404 Not Found: Ensure endpoint and resource ID are correct'
- '401 Unauthorized: Ensure API key is valid and has the necessary scopes.'
- '401 Unauthorized: Invalid token or insufficient scopes.'
- '404 Not Found: User or resource not found.'
- '400 Bad Request: Invalid parameters or payload.'
- '204 No Content: Successful deletion'
- '401 Unauthorized: Recheck management API key or its scopes.'
- '401 Unauthorized: Recheck API key or scopes'
- '401 Unauthorized: Check your management API key'
- '402: Payment Required -- Your subscription is not active or has been cancelled'
- '405: Method Not Allowed -- You tried to access a resource with an invalid HTTP
  method'
- '406: Not Acceptable -- You requested a format that is not JSON format, Moesif''s
  API supports JSON'
- '410: Gone -- The resource requested has been removed from our servers'
- '500: Internal Server Error -- We had a problem with our server.'
- '502: Bad Gateway -- A transient error when no server is available to handle your
  request.'
- '503: Service Unavailable -- A transient error when no server is available to handle
  your request.'
- '401 Unauthorized: Check API key validity or permissions.'
- '400 Bad Request: Check request parameters.'
- '401 Unauthorized: Ensure API key is valid.'
- '404 Not Found: Check if the specified workspace ID exists.'
- '401 Unauthorized: Check your management API key or permissions.'
- '404 Not Found: The specified resource was not found.'
- '400 Bad Request: Check input parameters'
- '401 Unauthorized: Recheck API token'
- '404 Not Found: Validate endpoint'
- '401 Unauthorized: Verify your authentication credentials.'
- 'RATE_LIMIT_EXCEEDED: Throttle API calls or reduce frequency.'
- 'QUERY_TIMEOUT: Break down filters or add selectivity.'
- 'REQUEST_LIMIT_EXCEEDED: Throttle API calls or reduce frequency.'
- '401 Unauthorized: Recheck OAuth scopes or token expiration.'
auth_info:
  mentioned_objects:
  - OauthToken
  - AuthProvider
  - NamedCredential
  - X-Moesif-Application-Id
  - MoesifAPIClient
  - managementAPIToken
  - Authorization
  - GovernanceRuleUpdateItem
client:
  base_url: https://api.moesif.com/v1
  auth:
    type: oauth2
    flow: password
    token_url: https://api.moesif.com/v1/:orgId/oauth/access_tokens
source_metadata: null
