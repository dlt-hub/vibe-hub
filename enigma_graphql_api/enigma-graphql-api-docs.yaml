resources:
- name: website_technology
  endpoint:
    path: /websiteTechnologiesUsed
    method: GET
    data_selector: edges
    params: {}
- name: WebsiteTechnologiesUsed
  endpoint:
    path: /graphql
    method: POST
    data_selector: data.WebsiteTechnologiesUsed
    params: {}
- name: search
  endpoint:
    path: /search
    method: POST
    data_selector: data
    params: {}
- name: search
  endpoint:
    path: /search
    method: POST
    data_selector: data.search
    params: {}
- name: brand
  endpoint:
    path: /search
    method: POST
    data_selector: data.search
    params: {}
- name: operating_location
  endpoint:
    path: /search
    method: POST
    data_selector: data.search
    params: {}
- name: search
  endpoint:
    path: /search
    method: POST
    data_selector: data.search
    params: {}
- name: BrandCardTransaction
  endpoint:
    path: /graphql
    method: POST
    data_selector: data.brandCardTransaction
    params: {}
- name: BrandIsMarketable
  endpoint:
    path: /graphql
    method: POST
    data_selector: data.brandIsMarketable
    params: {}
- name: billingEventDetails
  endpoint:
    path: billingEventDetails
    method: GET
    data_selector: edges
    params: {}
- name: metrics
  endpoint:
    path: metrics
    method: GET
    data_selector: edges
    params: {}
- name: registered_entity
  endpoint:
    path: /registered_entity
    method: POST
    data_selector: data
    params: {}
- name: registration
  endpoint:
    path: /registration
    method: POST
    data_selector: data
    params: {}
- name: review_summary
  endpoint:
    path: /review_summary
    method: POST
    data_selector: data
    params: {}
- name: role
  endpoint:
    path: /role
    method: POST
    data_selector: data
    params: {}
- name: tinLegalEntities
  endpoint:
    path: /tinLegalEntities
    method: POST
    data_selector: data
    params: {}
- name: watchlistEntries
  endpoint:
    path: /watchlistEntries
    method: POST
    data_selector: data
    params: {}
- name: websites
  endpoint:
    path: /websites
    method: POST
    data_selector: data
    params: {}
- name: search
  endpoint:
    path: /search
    method: POST
    data_selector: results
- name: addresses
  endpoint:
    path: /search/addresses
    method: GET
    data_selector: edges
    params: {}
- name: cardTransactions
  endpoint:
    path: /search/cardTransactions
    method: GET
    data_selector: edges
    params: {}
- name: names
  endpoint:
    path: /search/names
    method: GET
    data_selector: edges
    params: {}
- name: search
  endpoint:
    path: /graphql
    method: POST
    data_selector: data.search
    params: {}
- name: brands
  endpoint:
    path: /graphql
    method: POST
    data_selector: data.search
    params:
      limit: 6
- name: operating_location
  endpoint:
    path: /aggregate
    method: POST
    data_selector: aggregate
    params:
      entityType: OPERATING_LOCATION
      filter:
        EQ:
        - operatingStatuses.operatingStatus
        - Open
- name: technologies_used
  endpoint:
    path: /graphql
    method: POST
    data_selector: data.technologiesUsed
    params: {}
- name: search
  endpoint:
    path: /search
    method: POST
    data_selector: data
    params: {}
- name: brand
  endpoint:
    path: /search
    method: POST
    data_selector: data.search
    params:
      limit: '1'
- name: search
  endpoint:
    path: /search
    method: POST
    data_selector: data.search
    params: {}
- name: search
  endpoint:
    path: /search
    method: POST
    data_selector: data.search
    params: {}
- name: search
  endpoint:
    path: /search
    method: POST
    data_selector: data.search
- name: background_task
  endpoint:
    path: /backgroundTask
    method: POST
    data_selector: backgroundTask
    params: {}
- name: brand
  endpoint:
    path: /brands
    method: POST
    data_selector: data
    params: {}
- name: transaction
  endpoint:
    path: /transactions
    method: GET
    data_selector: data
    params: {}
- name: materialization_metric
  endpoint:
    path: /metrics
    method: GET
    data_selector: edges
    params: {}
- name: billing_event_detail
  endpoint:
    path: /billingEventDetails
    method: GET
    data_selector: edges
    params: {}
- name: address
  endpoint:
    path: /reference/attribute_reference/entity_attributes/address/
    method: GET
    data_selector: records
- name: brand
  endpoint:
    path: /reference/attribute_reference/entity_attributes/brand/
    method: GET
    data_selector: records
- name: email_address
  endpoint:
    path: /reference/attribute_reference/entity_attributes/email_address/
    method: GET
    data_selector: records
- name: legal_entity
  endpoint:
    path: /reference/attribute_reference/entity_attributes/legal_entity/
    method: GET
    data_selector: records
- name: operating_location
  endpoint:
    path: /reference/attribute_reference/entity_attributes/operating_location/
    method: GET
    data_selector: records
- name: person
  endpoint:
    path: /reference/attribute_reference/entity_attributes/person/
    method: GET
    data_selector: records
- name: phone_number
  endpoint:
    path: /reference/attribute_reference/entity_attributes/phone_number/
    method: GET
    data_selector: records
- name: registered_entity
  endpoint:
    path: /reference/attribute_reference/entity_attributes/registered_entity/
    method: GET
    data_selector: records
- name: registration
  endpoint:
    path: /reference/attribute_reference/entity_attributes/registration/
    method: GET
    data_selector: records
- name: review_summary
  endpoint:
    path: /reference/attribute_reference/entity_attributes/review_summary/
    method: GET
    data_selector: records
- name: role
  endpoint:
    path: /reference/attribute_reference/entity_attributes/role/
    method: GET
    data_selector: records
- name: tin
  endpoint:
    path: /reference/attribute_reference/entity_attributes/tin/
    method: GET
    data_selector: records
- name: watchlist_entry
  endpoint:
    path: /reference/attribute_reference/entity_attributes/watchlist_entry/
    method: GET
    data_selector: records
- name: website
  endpoint:
    path: /reference/attribute_reference/entity_attributes/website/
    method: GET
    data_selector: records
- name: website_content
  endpoint:
    path: /reference/attribute_reference/entity_attributes/website_content/
    method: GET
    data_selector: records
- name: RegisteredEntity
  endpoint:
    path: /graphql
    method: POST
    data_selector: data.registeredEntities
    params: {}
- name: Registration
  endpoint:
    path: /graphql
    method: POST
    data_selector: data.registrations
    params: {}
- name: ReviewSummary
  endpoint:
    path: /graphql
    method: POST
    data_selector: data.reviewSummaries
    params: {}
- name: Role
  endpoint:
    path: /graphql
    method: POST
    data_selector: data.roles
    params: {}
- name: TinLegalEntityConnection
  endpoint:
    path: /tin/legal-entities
    method: POST
    data_selector: edges
    params:
      first: 100
- name: TxnMerchantConnection
  endpoint:
    path: /txn/merchants
    method: POST
    data_selector: edges
    params:
      first: 100
- name: WatchlistEntry
  endpoint:
    path: /watchlist/entries
    method: POST
    data_selector: edges
    params:
      first: 100
- name: WebsiteOnlinePresenceConnection
  endpoint:
    path: /website/online-presences
    method: POST
    data_selector: edges
    params:
      first: 100
- name: WebsiteTechnologiesUsedConnection
  endpoint:
    path: /website/technologies-used
    method: POST
    data_selector: edges
    params:
      first: 100
- name: search
  endpoint:
    path: /search
    method: POST
    data_selector: data
    params: {}
- name: addresses
  endpoint:
    path: /search/addresses
    method: GET
    data_selector: edges.node.fullAddress
- name: cardTransactions
  endpoint:
    path: /search/cardTransactions
    method: GET
    data_selector: edges.node
    params:
      period: cardTransactions.period
- name: names
  endpoint:
    path: /search/names
    method: GET
    data_selector: edges.node.name
- name: brand
  endpoint:
    path: /search
    method: POST
    data_selector: data.search
    params: {}
- name: operating_location
  endpoint:
    path: /search
    method: POST
    data_selector: data.search
    params: {}
- name: search
  endpoint:
    path: /graphql
    method: POST
    data_selector: data.search
    params: {}
- name: brand
  endpoint:
    path: /search
    method: POST
    data_selector: data.search
    params: {}
- name: aggregate
  endpoint:
    path: /aggregate
    method: POST
    data_selector: data
    params:
      filter:
        EQ:
        - operatingStatuses.operatingStatus
        - Open
- name: business_search
  endpoint:
    path: /graphql
    method: POST
    data_selector: data.search
    params: {}
- name: brand_locations
  endpoint:
    path: /graphql
    method: POST
    data_selector: data.search
    params: {}
- name: legal_entities
  endpoint:
    path: /graphql
    method: POST
    data_selector: data.search
    params: {}
- name: schema_extended
  endpoint:
    path: /graphql
    method: POST
    data_selector: _schemaExtended
    params: {}
- name: search
  endpoint:
    path: /search
    method: POST
    data_selector: data.search
    params: {}
- name: search
  endpoint:
    path: /graphql
    method: POST
    data_selector: data.search
    params: {}
notes:
- All API requests to the GraphQL API must include an x-api-key header with your API
  key.
- The search query is for discovering and retrieving entities from Enigma's data.
- Segmentation searches will return a 202 Accepted response status code.
- Polling status requires querying backgroundTask with the task ID.
- Requires OAuth2 setup for data access
- Data may have null values in certain fields
- Requires setup of connected app in TIN service.
- The prompt field is only supported for the entity type BRAND.
- Search requests must have either id, name, or website specified; otherwise, specify
  prompt with output
- Requires setup of OAuth2 with refresh token for API access
- All API requests require an API key. Include it in the x-api-key header.
- Total credits used for the example is 51.
- Uses cursor-based pagination following the Relay Connection specification
- Segmentation searches should be performed asynchronously.
- To output results of a search as a file, specify the output parameter.
- 'Response code: 202'
- Polling is required to check the status of background tasks
- Beta version of Model Context Protocol (MCP) is currently in beta.
- Enigma's card revenue data shows strong accuracy, with 67% of brands having error
  rates within ±30% of ground truth data.
- Matching at the correct level is crucial for accurate comparison.
- Requires setup of OAuth2 credentials.
- Pagination is based on cursors.
- Data sourced from Secretary of State registrations.
- Incorporates both domestic and foreign registrations.
- Uses OAuth2 with refresh token — requires setup of connected app in api
- Uses cursor-based pagination following the Relay Connection specification.
- Requires querying for brands with specific operating locations and conditions.
- The aggregate query only supports the entityType OPERATING_LOCATION.
- Enigma's data model captures complex business relationships and entities.
- All API requests require an API key.
- Attribute pricing tiers are subject to change.
- Credits are deducted from the billing account linked to your API key.
- Multiple pricing tiers based on attributes used in queries
- This example cost 51 credits.
- The response contains Brand.names which is a core pricing tier attribute.
- Beta
errors:
- '202 Accepted: Background task initiated'
- '401 Unauthorized: Check OAuth credentials'
- '401 Unauthorized: Check OAuth token'
- '404 Not Found: Verify endpoint path'
- '500 Internal Server Error: Retry the request'
- 'INVALID_TIN: The TIN provided is invalid.'
- 'NOT_ISSUED: The TIN has not been issued by IRS.'
- '401 Unauthorized: Check your OAuth configuration.'
- 'REQUEST_LIMIT_EXCEEDED: Throttle API calls or reduce frequency'
- 'QUERY_TIMEOUT: Break down filters or add selectivity'
- '401 Unauthorized: Recheck OAuth scopes or token expiration'
- '202 Accepted: Background task initiated.'
- '400 Bad Request: Review your searchInput structure.'
- '202 Accepted: Request is being processed'
- 'INVALID_REQUEST: Ensure all required fields are provided.'
- 'UNAUTHORIZED: Check your authentication credentials.'
- 'FORBIDDEN: You do not have permission to access this resource.'
- '202 Accepted: Background task created for large result set'
auth_info:
  mentioned_objects:
  - OauthToken
  - AuthProvider
client:
  base_url: https://developers.enigma.com
  auth:
    type: oauth2
source_metadata: null
