resources:
- name: delete_application_commands
  endpoint:
    path: /delete_application_commands
    method: DELETE
- name: add_all_application_commands
  endpoint:
    path: /add_all_application_commands
    method: POST
- name: add_all_cog_commands
  endpoint:
    path: /add_all_cog_commands
    method: POST
- name: parse_mentions
  endpoint:
    path: /parse_mentions
    method: GET
- name: get_interaction
  endpoint:
    path: /get_interaction
    method: GET
- name: add_application_command_check
  endpoint:
    path: /add_application_command_check
    method: POST
- name: remove_application_command_check
  endpoint:
    path: /remove_application_command_check
    method: DELETE
- name: application_command_check
  endpoint:
    path: /application_command_check
    method: POST
- name: application_command_before_invoke
  endpoint:
    path: /application_command_before_invoke
    method: POST
- name: application_command_after_invoke
  endpoint:
    path: /application_command_after_invoke
    method: POST
- name: create_application_emoji
  endpoint:
    path: /create_application_emoji
    method: POST
- name: fetch_application_emojis
  endpoint:
    path: /fetch_application_emojis
    method: GET
- name: fetch_application_emoji
  endpoint:
    path: /fetch_application_emoji
    method: GET
- name: guild
  endpoint:
    path: /guilds
    method: GET
    data_selector: guilds
- name: channel
  endpoint:
    path: /channels
    method: GET
    data_selector: channels
- name: TeamMember
  endpoint:
    path: /teammember
    method: GET
    data_selector: attributes
- name: VoiceClient
  endpoint:
    path: /voiceclient
    method: GET
    data_selector: attributes
- name: VoiceProtocol
  endpoint:
    path: /voiceprotocol
    method: GET
    data_selector: attributes
- name: AudioSource
  endpoint:
    path: /audiosource
    method: GET
    data_selector: attributes
- name: PCMAudio
  endpoint:
    path: /pcmaudio
    method: GET
    data_selector: attributes
- name: FFmpegAudio
  endpoint:
    path: /FFmpegAudio
    method: POST
- name: FFmpegPCMAudio
  endpoint:
    path: /FFmpegPCMAudio
    method: POST
- name: FFmpegOpusAudio
  endpoint:
    path: /FFmpegOpusAudio
    method: POST
- name: fetch_template
  endpoint:
    path: /fetch_template
    method: GET
    data_selector: Template
- name: fetch_guild
  endpoint:
    path: /fetch_guild/{guild_id}
    method: GET
    data_selector: Guild
- name: create_guild
  endpoint:
    path: /create_guild
    method: POST
    data_selector: Guild
- name: fetch_invite
  endpoint:
    path: /fetch_invite/{url}
    method: GET
    data_selector: Invite
- name: VoiceClient
  endpoint:
    path: /voiceclient
    method: GET
    data_selector: voice_state
    params: {}
- name: AudioSource
  endpoint:
    path: /audiosource
    method: GET
    data_selector: audio_data
    params: {}
- name: probe
  endpoint:
    path: probe
    method: await
    data_selector: returns
    params: {}
- name: audit_log_entry
  endpoint:
    path: /Guild.audit_logs
    method: GET
- name: audit_log_diff
  endpoint:
    path: /audit-log-diff
    method: GET
    data_selector: attributes
- name: webhook
  endpoint:
    path: url
    method: POST
    data_selector: webhook_data
- name: edit
  endpoint:
    path: /edit
    method: POST
    data_selector: message
    params: {}
- name: delete
  endpoint:
    path: /delete
    method: DELETE
    data_selector: message
    params: {}
- name: webhook
  endpoint:
    path: /webhooks/{guild_id}/{webhook_id}
    method: GET
    data_selector: webhook
    params: {}
- name: SyncWebhookMessage
  endpoint:
    path: /sync/webhook/message
    method: GET
    data_selector: message
- name: guild_channel
  endpoint:
    path: /api/guilds/{guild_id}/channels
    method: GET
    data_selector: channels
- name: message_history
  endpoint:
    path: /channel/history
    method: GET
    data_selector: messages
    params:
      limit: 100
- name: typing
  endpoint:
    path: /channel/typing
    method: POST
    data_selector: typing
    params: {}
- name: add_modal
  endpoint:
    path: /add_modal
    method: POST
    data_selector: modal
- name: remove_modal
  endpoint:
    path: /remove_modal
    method: POST
    data_selector: modal
- name: views
  endpoint:
    path: /views
    method: GET
    data_selector: views
- name: process_application_commands
  endpoint:
    path: /process_application_commands
    method: POST
    data_selector: interaction
- name: get_application_command
  endpoint:
    path: /get_application_command
    method: GET
    data_selector: command
- name: sync_all_application_commands
  endpoint:
    path: /sync_all_application_commands
    method: POST
    data_selector: sync_data
- name: register_new_application_commands
  endpoint:
    path: /register_new_application_commands
    method: POST
    data_selector: commands
- name: voice_client
  endpoint:
    path: /voice
    method: POST
    data_selector: voiceState
    params: {}
- name: AuditLogEntry
  endpoint:
    path: /audit_logs
    method: GET
    data_selector: entries
- name: audit_log_change
  endpoint:
    path: /audit/log/change
    method: GET
    data_selector: changes
    params: {}
- name: webhook
  endpoint:
    path: /webhooks
    method: POST
    data_selector: webhooks
    params: {}
- name: webhook
  endpoint:
    path: /webhooks/{webhook.id}/{webhook.token}
    method: POST
    data_selector: webhook
    params: {}
- name: SyncWebhookMessage
  endpoint:
    path: /webhook/message
    method: POST
    data_selector: message
    params: {}
- name: channel_create
  endpoint:
    path: /audit-log/channel_create
    method: GET
- name: channel_update
  endpoint:
    path: /audit-log/channel_update
    method: GET
- name: channel_delete
  endpoint:
    path: /audit-log/channel_delete
    method: GET
- name: overwrite_create
  endpoint:
    path: /audit-log/overwrite_create
    method: GET
- name: overwrite_update
  endpoint:
    path: /audit-log/overwrite_update
    method: GET
- name: overwrite_delete
  endpoint:
    path: /audit-log/overwrite_delete
    method: GET
- name: kick
  endpoint:
    path: /audit-log/kick
    method: GET
- name: member_prune
  endpoint:
    path: /audit-log/member_prune
    method: GET
- name: ban
  endpoint:
    path: /audit-log/ban
    method: GET
- name: unban
  endpoint:
    path: /audit-log/unban
    method: GET
- name: member_update
  endpoint:
    path: /audit-log/member_update
    method: GET
- name: member_role_update
  endpoint:
    path: /audit-log/member_role_update
    method: GET
- name: member_move
  endpoint:
    path: /audit-log/member_move
    method: GET
- name: member_disconnect
  endpoint:
    path: /audit-log/member_disconnect
    method: GET
- name: bot_add
  endpoint:
    path: /audit-log/bot_add
    method: GET
- name: role_create
  endpoint:
    path: /audit-log/role_create
    method: GET
- name: role_update
  endpoint:
    path: /audit-log/role_update
    method: GET
- name: role_delete
  endpoint:
    path: /audit-log/role_delete
    method: GET
- name: invite_create
  endpoint:
    path: /audit-log/invite_create
    method: GET
- name: invite_update
  endpoint:
    path: /audit-log/invite_update
    method: GET
- name: invite_delete
  endpoint:
    path: /audit-log/invite_delete
    method: GET
- name: webhook_create
  endpoint:
    path: /audit-log/webhook_create
    method: GET
- name: webhook_update
  endpoint:
    path: /audit-log/webhook_update
    method: GET
- name: webhook_delete
  endpoint:
    path: /audit-log/webhook_delete
    method: GET
- name: channel
  endpoint:
    path: /channels
    method: GET
    data_selector: channels
    params: {}
- name: message
  endpoint:
    path: /messages
    method: POST
    data_selector: message
    params: {}
- name: guild_sticker
  endpoint:
    path: /guilds/{guild_id}/stickers
    method: GET
    data_selector: stickers
    params: {}
- name: ChannelType
  endpoint:
    path: /nextcord/ChannelType
    method: GET
- name: MessageType
  endpoint:
    path: /nextcord/MessageType
    method: GET
- name: VoiceRegion
  endpoint:
    path: /nextcord/VoiceRegion
    method: GET
- name: VerificationLevel
  endpoint:
    path: /nextcord/VerificationLevel
    method: GET
- name: ContentFilter
  endpoint:
    path: /nextcord/ContentFilter
    method: GET
- name: Status
  endpoint:
    path: /nextcord/Status
    method: GET
- name: audit_log_entry
  endpoint:
    path: /audit_logs
    method: GET
    data_selector: entries
- name: AuditLogDiff
  endpoint:
    path: /audit_logs/diff
    method: GET
    data_selector: changes
    params: {}
- name: webhook
  endpoint:
    path: /webhooks
    method: POST
    data_selector: webhooks
    params: {}
- name: webhook
  endpoint:
    path: /webhook
    method: POST
    data_selector: webhook_data
    params: {}
- name: SyncWebhookMessage
  endpoint:
    path: /sync/webhook/message
    method: POST
    data_selector: message
    params: {}
- name: channel_create
  endpoint:
    path: /channel_create
    method: POST
    data_selector: attributes
- name: channel_update
  endpoint:
    path: /channel_update
    method: POST
    data_selector: attributes
- name: channel_delete
  endpoint:
    path: /channel_delete
    method: DELETE
    data_selector: attributes
- name: overwrite_create
  endpoint:
    path: /overwrite_create
    method: POST
    data_selector: attributes
- name: overwrite_update
  endpoint:
    path: /overwrite_update
    method: POST
    data_selector: attributes
- name: overwrite_delete
  endpoint:
    path: /overwrite_delete
    method: DELETE
    data_selector: attributes
- name: kick
  endpoint:
    path: /kick
    method: POST
    data_selector: attributes
- name: member_prune
  endpoint:
    path: /member_prune
    method: POST
    data_selector: attributes
- name: ban
  endpoint:
    path: /ban
    method: POST
    data_selector: attributes
- name: unban
  endpoint:
    path: /unban
    method: POST
    data_selector: attributes
- name: member_update
  endpoint:
    path: /member_update
    method: POST
    data_selector: attributes
- name: member_role_update
  endpoint:
    path: /member_role_update
    method: POST
    data_selector: attributes
- name: member_move
  endpoint:
    path: /member_move
    method: POST
    data_selector: attributes
- name: member_disconnect
  endpoint:
    path: /member_disconnect
    method: POST
    data_selector: attributes
- name: bot_add
  endpoint:
    path: /bot_add
    method: POST
    data_selector: attributes
- name: role_create
  endpoint:
    path: /role_create
    method: POST
    data_selector: attributes
- name: role_update
  endpoint:
    path: /role_update
    method: POST
    data_selector: attributes
- name: role_delete
  endpoint:
    path: /role_delete
    method: DELETE
    data_selector: attributes
- name: invite_create
  endpoint:
    path: /invite_create
    method: POST
    data_selector: attributes
- name: invite_update
  endpoint:
    path: /invite_update
    method: POST
    data_selector: attributes
- name: invite_delete
  endpoint:
    path: /invite_delete
    method: DELETE
    data_selector: attributes
- name: webhook_create
  endpoint:
    path: /webhook_create
    method: POST
    data_selector: attributes
- name: webhook_update
  endpoint:
    path: /webhook_update
    method: POST
    data_selector: attributes
- name: webhook_delete
  endpoint:
    path: /webhook_delete
    method: DELETE
    data_selector: attributes
- name: permissions
  endpoint:
    path: /permissions
    method: GET
    data_selector: permissions
    params: {}
- name: delete_channel
  endpoint:
    path: /channels/{channel_id}
    method: DELETE
    data_selector: response
    params:
      reason: Optional reason for deleting this channel
- name: set_permissions
  endpoint:
    path: /channels/{channel_id}/permissions/{target}
    method: PUT
    data_selector: response
    params:
      overwrite: Optional PermissionOverwrite object
      reason: Optional reason for setting permissions
- name: create_invite
  endpoint:
    path: /channels/{channel_id}/invites
    method: POST
    data_selector: invite
    params:
      max_age: Default is 0
      max_uses: Default is 0
      temporary: Default is false
      unique: Default is true
      reason: Optional reason for creating this invite
- name: send_message
  endpoint:
    path: /send_message
    method: POST
    data_selector: message
    params: {}
- name: forward_message
  endpoint:
    path: /forward_message
    method: POST
    data_selector: message
    params: {}
- name: trigger_typing
  endpoint:
    path: /trigger_typing
    method: POST
    data_selector: typing
    params: {}
- name: fetch_message
  endpoint:
    path: /fetch_message
    method: GET
    data_selector: message
    params: {}
- name: User
  endpoint:
    path: /users
    method: GET
    data_selector: User
    params: {}
- name: attachment
  endpoint:
    path: /nextcord/attachments
    method: GET
    data_selector: attachments
    params: {}
- name: Asset
  endpoint:
    path: /assets
    method: GET
    data_selector: assets
- name: message
  endpoint:
    path: /messages
    method: GET
    data_selector: records
- name: ChannelType
  endpoint:
    path: /nextcord/ChannelType
    method: GET
    data_selector: types
    params: {}
- name: MessageType
  endpoint:
    path: /nextcord/MessageType
    method: GET
    data_selector: types
    params: {}
- name: VoiceRegion
  endpoint:
    path: /nextcord/VoiceRegion
    method: GET
    data_selector: regions
    params: {}
- name: VerificationLevel
  endpoint:
    path: /nextcord/VerificationLevel
    method: GET
    data_selector: levels
    params: {}
- name: ContentFilter
  endpoint:
    path: /nextcord/ContentFilter
    method: GET
    data_selector: filters
    params: {}
- name: Status
  endpoint:
    path: /nextcord/Status
    method: GET
    data_selector: statuses
    params: {}
- name: audit_log_entry
  endpoint:
    path: /audit_logs
    method: GET
    data_selector: entries
    params: {}
- name: audit_log_diff
  endpoint:
    path: /audit_log_diff
    method: GET
    data_selector: changes
    params: {}
- name: webhook
  endpoint:
    path: /webhooks
    method: POST
    data_selector: webhooks
    params: {}
- name: webhook
  endpoint:
    path: /webhook
    method: POST
    data_selector: webhook
- name: SyncWebhookMessage
  endpoint:
    path: /webhook/message
    method: POST
    data_selector: message
    params: {}
- name: channel_create
  endpoint:
    path: /AuditLogAction/channel_create
    method: GET
    data_selector: attributes
- name: channel_update
  endpoint:
    path: /AuditLogAction/channel_update
    method: GET
    data_selector: attributes
- name: channel_delete
  endpoint:
    path: /AuditLogAction/channel_delete
    method: GET
    data_selector: attributes
- name: overwrite_create
  endpoint:
    path: /AuditLogAction/overwrite_create
    method: GET
    data_selector: attributes
- name: overwrite_update
  endpoint:
    path: /AuditLogAction/overwrite_update
    method: GET
    data_selector: attributes
- name: overwrite_delete
  endpoint:
    path: /AuditLogAction/overwrite_delete
    method: GET
    data_selector: attributes
- name: kick
  endpoint:
    path: /AuditLogAction/kick
    method: GET
    data_selector: attributes
- name: member_prune
  endpoint:
    path: /AuditLogAction/member_prune
    method: GET
    data_selector: attributes
- name: ban
  endpoint:
    path: /AuditLogAction/ban
    method: GET
    data_selector: attributes
- name: unban
  endpoint:
    path: /AuditLogAction/unban
    method: GET
    data_selector: attributes
- name: member_update
  endpoint:
    path: /AuditLogAction/member_update
    method: GET
    data_selector: attributes
- name: member_role_update
  endpoint:
    path: /AuditLogAction/member_role_update
    method: GET
    data_selector: attributes
- name: member_move
  endpoint:
    path: /AuditLogAction/member_move
    method: GET
    data_selector: attributes
- name: member_disconnect
  endpoint:
    path: /AuditLogAction/member_disconnect
    method: GET
    data_selector: attributes
- name: bot_add
  endpoint:
    path: /AuditLogAction/bot_add
    method: GET
    data_selector: attributes
- name: role_create
  endpoint:
    path: /AuditLogAction/role_create
    method: GET
    data_selector: attributes
- name: role_update
  endpoint:
    path: /AuditLogAction/role_update
    method: GET
    data_selector: attributes
- name: role_delete
  endpoint:
    path: /AuditLogAction/role_delete
    method: GET
    data_selector: attributes
- name: invite_create
  endpoint:
    path: /AuditLogAction/invite_create
    method: GET
    data_selector: attributes
- name: invite_update
  endpoint:
    path: /AuditLogAction/invite_update
    method: GET
    data_selector: attributes
- name: invite_delete
  endpoint:
    path: /AuditLogAction/invite_delete
    method: GET
    data_selector: attributes
- name: webhook_create
  endpoint:
    path: /AuditLogAction/webhook_create
    method: GET
    data_selector: attributes
- name: webhook_update
  endpoint:
    path: /AuditLogAction/webhook_update
    method: GET
    data_selector: attributes
- name: webhook_delete
  endpoint:
    path: /AuditLogAction/webhook_delete
    method: GET
    data_selector: attributes
- name: User
  endpoint:
    path: /nextcord/User
    method: GET
    data_selector: user_data
- name: attachment
  endpoint:
    path: /nextcord/Attachment
    method: GET
    data_selector: records
- name: asset
  endpoint:
    path: /nextcord/Asset
    method: GET
    data_selector: records
- name: guild
  endpoint:
    path: /guilds/{guild.id}
    method: GET
    data_selector: guild
    params: {}
- name: members
  endpoint:
    path: /guild/members
    method: GET
    data_selector: members
    params:
      limit: 1000
- name: audit_logs
  endpoint:
    path: /guild/audit_logs
    method: GET
    data_selector: audit_logs
    params:
      limit: 100
- name: guild
  endpoint:
    path: /guild
    method: GET
    data_selector: guild_info
    params: {}
- name: member
  endpoint:
    path: /guild/members
    method: GET
    data_selector: members
    params: {}
- name: text_channel
  endpoint:
    path: /guild/text_channels
    method: POST
    data_selector: channel
    params: {}
- name: voice_channel
  endpoint:
    path: /guild/voice_channels
    method: POST
    data_selector: channel
    params: {}
- name: stage_channel
  endpoint:
    path: /guild/stage_channels
    method: POST
    data_selector: channel
    params: {}
- name: category_channel
  endpoint:
    path: /guild/category_channels
    method: POST
    data_selector: channel
    params: {}
- name: forum_channel
  endpoint:
    path: /guild/forum_channels
    method: POST
    data_selector: channel
    params: {}
- name: edit_role_positions
  endpoint:
    path: /guilds/{guild_id}/roles
    method: PATCH
    data_selector: roles
    params: {}
- name: kick
  endpoint:
    path: /guilds/{guild_id}/members/{user_id}
    method: DELETE
    data_selector: user
    params: {}
- name: ban
  endpoint:
    path: /guilds/{guild_id}/bans/{user_id}
    method: PUT
    data_selector: user
    params: {}
- name: bulk_ban
  endpoint:
    path: /guilds/{guild_id}/bans
    method: PUT
    data_selector: users
    params: {}
- name: unban
  endpoint:
    path: /guilds/{guild_id}/bans/{user_id}
    method: DELETE
    data_selector: user
    params: {}
- name: fetch_scheduled_events
  endpoint:
    path: /guilds/{guild_id}/scheduled-events
    method: GET
    data_selector: events
    params: {}
- name: fetch_scheduled_event
  endpoint:
    path: /guilds/{guild_id}/scheduled-events/{event_id}
    method: GET
    data_selector: event
    params: {}
- name: scheduled_event
  endpoint:
    path: /create_scheduled_event
    method: POST
    data_selector: event
    params: {}
- name: application_commands
  endpoint:
    path: /get_application_commands
    method: GET
    data_selector: commands
    params: {}
- name: auto_moderation_rules
  endpoint:
    path: /auto_moderation_rules
    method: GET
    data_selector: rules
    params: {}
- name: fetch_auto_moderation_rule
  endpoint:
    path: /fetch_auto_moderation_rule
    method: GET
    data_selector: rule
    params: {}
- name: create_auto_moderation_rule
  endpoint:
    path: /create_auto_moderation_rule
    method: POST
    data_selector: rule
    params: {}
- name: interaction
  endpoint:
    path: /interactions
    method: POST
    data_selector: data
- name: defer
  endpoint:
    path: /defer
    method: POST
- name: edit_message
  endpoint:
    path: /edit_message
    method: POST
- name: is_done
  endpoint:
    path: /is_done
    method: GET
- name: pong
  endpoint:
    path: /pong
    method: POST
- name: send_autocomplete
  endpoint:
    path: /send_autocomplete
    method: POST
- name: send_message
  endpoint:
    path: /send_message
    method: POST
- name: send_modal
  endpoint:
    path: /send_modal
    method: POST
- name: PartialInteractionMessage
  endpoint:
    path: /nextcord/PartialInteractionMessage
    method: GET
    data_selector: attributes
    params: {}
- name: MessageInteraction
  endpoint:
    path: /nextcord/MessageInteraction
    method: GET
    data_selector: attributes
    params: {}
- name: MessageInteractionMetadata
  endpoint:
    path: /nextcord/MessageInteractionMetadata
    method: GET
    data_selector: attributes
    params: {}
- name: member
  endpoint:
    path: /nextcord/member
    method: GET
    data_selector: attributes
    params: {}
- name: fetch_template
  endpoint:
    path: /fetch_template
    method: GET
    data_selector: template
    params: {}
- name: fetch_guild
  endpoint:
    path: /fetch_guild
    method: GET
    data_selector: guild
    params:
      with_counts: 'true'
- name: application_command
  endpoint:
    path: /applications/{application.id}/guilds/{guild.id}/commands
    method: POST
    data_selector: commands
    params: {}
- name: fetch_application_emojis
  endpoint:
    path: /applications/{application.id}/emojis
    method: GET
    data_selector: emojis
    params: {}
- name: FFmpegOpusAudio
  endpoint:
    path: /FFmpegOpusAudio
    method: GET
    data_selector: instance
    params: {}
- name: PCMVolumeTransformer
  endpoint:
    path: /PCMVolumeTransformer
    method: GET
    data_selector: instance
    params: {}
- name: opus
  endpoint:
    path: /opus
    method: GET
    data_selector: instance
    params: {}
- name: webhook
  endpoint:
    path: /webhooks
    method: POST
    data_selector: webhook
    params: {}
- name: webhook
  endpoint:
    path: /webhooks/{webhook.id}/{webhook.token}
    method: POST
    data_selector: webhook_message
- name: SyncWebhookMessage
  endpoint:
    path: /webhooks/messages
    method: POST
    data_selector: message
    params: {}
- name: channel_create
  endpoint:
    path: /audit_logs/channel_create
    method: GET
- name: channel_update
  endpoint:
    path: /audit_logs/channel_update
    method: GET
- name: channel_delete
  endpoint:
    path: /audit_logs/channel_delete
    method: GET
- name: overwrite_create
  endpoint:
    path: /audit_logs/overwrite_create
    method: GET
- name: overwrite_update
  endpoint:
    path: /audit_logs/overwrite_update
    method: GET
- name: overwrite_delete
  endpoint:
    path: /audit_logs/overwrite_delete
    method: GET
- name: kick
  endpoint:
    path: /audit_logs/kick
    method: GET
- name: member_prune
  endpoint:
    path: /audit_logs/member_prune
    method: GET
- name: ban
  endpoint:
    path: /audit_logs/ban
    method: GET
- name: unban
  endpoint:
    path: /audit_logs/unban
    method: GET
- name: member_update
  endpoint:
    path: /audit_logs/member_update
    method: GET
- name: member_role_update
  endpoint:
    path: /audit_logs/member_role_update
    method: GET
- name: member_move
  endpoint:
    path: /audit_logs/member_move
    method: GET
- name: member_disconnect
  endpoint:
    path: /audit_logs/member_disconnect
    method: GET
- name: bot_add
  endpoint:
    path: /audit_logs/bot_add
    method: GET
- name: role_create
  endpoint:
    path: /audit_logs/role_create
    method: GET
- name: role_update
  endpoint:
    path: /audit_logs/role_update
    method: GET
- name: role_delete
  endpoint:
    path: /audit_logs/role_delete
    method: GET
- name: invite_create
  endpoint:
    path: /audit_logs/invite_create
    method: GET
- name: invite_update
  endpoint:
    path: /audit_logs/invite_update
    method: GET
- name: invite_delete
  endpoint:
    path: /audit_logs/invite_delete
    method: GET
- name: webhook_create
  endpoint:
    path: /audit_logs/webhook_create
    method: GET
- name: webhook_update
  endpoint:
    path: /audit_logs/webhook_update
    method: GET
- name: webhook_delete
  endpoint:
    path: /audit_logs/webhook_delete
    method: GET
- name: User
  endpoint:
    path: /users
    method: GET
    data_selector: user_data
- name: Message
  endpoint:
    path: /nextcord/message
    method: GET
- name: attachment
  endpoint:
    path: /attachment
    method: GET
    data_selector: attachments
    params: {}
- name: asset
  endpoint:
    path: /asset
    method: GET
    data_selector: assets
    params: {}
- name: guild
  endpoint:
    path: /guilds
    method: GET
    data_selector: guilds
- name: member
  endpoint:
    path: /get_member/{user_id}
    method: GET
    data_selector: member
    params: {}
- name: role
  endpoint:
    path: /get_role/{role_id}
    method: GET
    data_selector: role
    params: {}
- name: stage_instance
  endpoint:
    path: /get_stage_instance/{stage_instance_id}
    method: GET
    data_selector: stage_instance
    params: {}
- name: guild_features
  endpoint:
    path: /guilds/{guild_id}/features
    method: GET
    data_selector: features
- name: guild_premium_tier
  endpoint:
    path: /guilds/{guild_id}/premium-tier
    method: GET
    data_selector: premium_tier
- name: guild_premium_subscription_count
  endpoint:
    path: /guilds/{guild_id}/premium-subscription-count
    method: GET
    data_selector: premium_subscription_count
- name: guild_preferred_locale
  endpoint:
    path: /guilds/{guild_id}/preferred-locale
    method: GET
    data_selector: preferred_locale
- name: guild_nsfw_level
  endpoint:
    path: /guilds/{guild_id}/nsfw-level
    method: GET
    data_selector: nsfw_level
- name: guild_approximate_member_count
  endpoint:
    path: /guilds/{guild_id}/approximate-member-count
    method: GET
    data_selector: approximate_member_count
- name: guild_approximate_presence_count
  endpoint:
    path: /guilds/{guild_id}/approximate-presence-count
    method: GET
    data_selector: approximate_presence_count
- name: guild_max_stage_video_channel_users
  endpoint:
    path: /guilds/{guild_id}/max-stage-video-channel-users
    method: GET
    data_selector: max_stage_video_channel_users
- name: forum_channel
  endpoint:
    path: /create_forum_channel
    method: POST
- name: category_channel
  endpoint:
    path: /create_category_channel
    method: POST
- name: leave_guild
  endpoint:
    path: /leave
    method: POST
- name: delete_guild
  endpoint:
    path: /delete
    method: POST
- name: edit_guild
  endpoint:
    path: /edit
    method: POST
- name: fetch_channels
  endpoint:
    path: /fetch_channels
    method: GET
- name: active_threads
  endpoint:
    path: /active_threads
    method: GET
- name: fetch_member
  endpoint:
    path: /fetch_member
    method: GET
- name: fetch_ban
  endpoint:
    path: /fetch_ban
    method: GET
- name: bans
  endpoint:
    path: /guilds/{guild_id}/bans
    method: GET
    data_selector: bans
    params:
      limit: 1000
- name: prune_members
  endpoint:
    path: /guilds/{guild_id}/prune
    method: POST
    data_selector: pruned_count
- name: templates
  endpoint:
    path: /guilds/{guild_id}/templates
    method: GET
    data_selector: templates
- name: webhooks
  endpoint:
    path: /guilds/{guild_id}/webhooks
    method: GET
    data_selector: webhooks
- name: integrations
  endpoint:
    path: /guilds/{guild_id}/integrations
    method: GET
    data_selector: integrations
- name: fetch_stickers
  endpoint:
    path: /guilds/{guild_id}/stickers
    method: GET
    data_selector: stickers
- name: fetch_emojis
  endpoint:
    path: /guilds/{guild_id}/emojis
    method: GET
    data_selector: emojis
- name: scheduled_events
  endpoint:
    path: /guilds/{guild_id}/scheduled-events
    method: GET
    data_selector: events
    params: {}
- name: auto_moderation_rules
  endpoint:
    path: /guilds/{guild_id}/auto-moderation/rules
    method: GET
    data_selector: rules
    params: {}
- name: interaction_response
  endpoint:
    path: /nextcord/InteractionResponse
    method: GET
    data_selector: response
- name: BulkBan
  endpoint:
    path: /bulk_ban
    method: POST
    data_selector: banned_users
    params: {}
- name: GuildPreview
  endpoint:
    path: /guild_preview
    method: GET
    data_selector: guild
    params: {}
- name: Integration
  endpoint:
    path: /integration
    method: GET
    data_selector: integration
    params: {}
- name: StreamIntegration
  endpoint:
    path: /stream_integration
    method: GET
    data_selector: stream_integration
    params: {}
- name: Interaction
  endpoint:
    path: /interaction
    method: POST
    data_selector: interaction
    params: {}
- name: PartialInteractionMessage
  endpoint:
    path: /nextcord/PartialInteractionMessage
    method: GET
    data_selector: attributes
    params: {}
- name: message
  endpoint:
    path: /channels/{channel_id}/messages
    method: POST
    data_selector: message
    params: {}
- name: member
  endpoint:
    path: /api/v1/members
    method: GET
    data_selector: members
- name: emoji
  endpoint:
    path: /emoji
    method: GET
    data_selector: emoji_data
    params: {}
- name: PartialEmoji
  endpoint:
    path: /nextcord/PartialEmoji
    method: GET
    data_selector: attributes
    params: {}
- name: Role
  endpoint: {}
- name: GuildSticker
  endpoint: {}
- name: ApplicationIntegrationTypeConfig
  endpoint:
    path: /application/integration/type/config
    method: GET
- name: AppInfo
  endpoint:
    path: /app/info
    method: GET
- name: PartialAppInfo
  endpoint:
    path: /partial/app/info
    method: GET
- name: Team
  endpoint:
    path: /team
    method: GET
- name: TeamMember
  endpoint:
    path: /team/member
    method: GET
- name: channel_type
  endpoint:
    path: /api/v2/channel/type
    method: GET
    data_selector: channel_types
- name: message_type
  endpoint:
    path: /api/v2/message/type
    method: GET
    data_selector: message_types
- name: voice_region
  endpoint:
    path: /api/v2/voice/region
    method: GET
    data_selector: voice_regions
- name: verification_level
  endpoint:
    path: /api/v2/verification/level
    method: GET
    data_selector: verification_levels
- name: content_filter
  endpoint:
    path: /api/v2/content/filter
    method: GET
    data_selector: content_filters
- name: status
  endpoint:
    path: /api/v2/status
    method: GET
    data_selector: statuses
- name: invite_create
  endpoint:
    path: /on_invite_create
    method: CALL
    data_selector: invite
    params: {}
- name: invite_delete
  endpoint:
    path: /on_invite_delete
    method: CALL
    data_selector: invite
    params: {}
- name: group_join
  endpoint:
    path: /on_group_join
    method: CALL
    data_selector: channel,user
    params: {}
- name: group_remove
  endpoint:
    path: /on_group_remove
    method: CALL
    data_selector: channel,user
    params: {}
- name: guild_scheduled_event_create
  endpoint:
    path: /on_guild_scheduled_event_create
    method: CALL
    data_selector: event
    params: {}
- name: guild_scheduled_event_update
  endpoint:
    path: /on_guild_scheduled_event_update
    method: CALL
    data_selector: before,after
    params: {}
- name: guild_scheduled_event_delete
  endpoint:
    path: /on_guild_scheduled_event_delete
    method: CALL
    data_selector: event
    params: {}
- name: guild_scheduled_event_user_add
  endpoint:
    path: /on_guild_scheduled_event_user_add
    method: CALL
    data_selector: event,user
    params: {}
- name: guild_scheduled_event_user_remove
  endpoint:
    path: /on_guild_scheduled_event_user_remove
    method: CALL
    data_selector: event,user
    params: {}
- name: auto_moderation_rule_create
  endpoint:
    path: /on_auto_moderation_rule_create
    method: CALL
    data_selector: rule
    params: {}
- name: auto_moderation_rule_update
  endpoint:
    path: /on_auto_moderation_rule_update
    method: CALL
    data_selector: rule
    params: {}
- name: auto_moderation_rule_delete
  endpoint:
    path: /on_auto_moderation_rule_delete
    method: CALL
    data_selector: rule
    params: {}
- name: auto_moderation_action_execution
  endpoint:
    path: /on_auto_moderation_action_execution
    method: CALL
    data_selector: execution
    params: {}
- name: guild_audit_log_entry_create
  endpoint:
    path: /on_guild_audit_log_entry_create
    method: CALL
    data_selector: entry
    params: {}
- name: webhook
  endpoint:
    path: /webhooks
    method: POST
    data_selector: webhook_data
- name: webhook
  endpoint:
    path: /webhooks/{webhook_id}/{webhook_token}
    method: POST
- name: channel_create
  endpoint:
    path: /audit_log/channel_create
    method: GET
    data_selector: records
- name: channel_update
  endpoint:
    path: /audit_log/channel_update
    method: GET
    data_selector: records
- name: channel_delete
  endpoint:
    path: /audit_log/channel_delete
    method: GET
    data_selector: records
- name: overwrite_create
  endpoint:
    path: /audit_log/overwrite_create
    method: GET
    data_selector: records
- name: overwrite_update
  endpoint:
    path: /audit_log/overwrite_update
    method: GET
    data_selector: records
- name: overwrite_delete
  endpoint:
    path: /audit_log/overwrite_delete
    method: GET
    data_selector: records
- name: kick
  endpoint:
    path: /audit_log/kick
    method: GET
    data_selector: records
- name: member_prune
  endpoint:
    path: /audit_log/member_prune
    method: GET
    data_selector: records
- name: ban
  endpoint:
    path: /audit_log/ban
    method: GET
    data_selector: records
- name: unban
  endpoint:
    path: /audit_log/unban
    method: GET
    data_selector: records
- name: member_update
  endpoint:
    path: /audit_log/member_update
    method: GET
    data_selector: records
- name: member_role_update
  endpoint:
    path: /audit_log/member_role_update
    method: GET
    data_selector: records
- name: member_move
  endpoint:
    path: /audit_log/member_move
    method: GET
    data_selector: records
- name: member_disconnect
  endpoint:
    path: /audit_log/member_disconnect
    method: GET
    data_selector: records
- name: bot_add
  endpoint:
    path: /audit_log/bot_add
    method: GET
    data_selector: records
- name: role_create
  endpoint:
    path: /audit_log/role_create
    method: GET
    data_selector: records
- name: role_update
  endpoint:
    path: /audit_log/role_update
    method: GET
    data_selector: records
- name: role_delete
  endpoint:
    path: /audit_log/role_delete
    method: GET
    data_selector: records
- name: invite_create
  endpoint:
    path: /audit_log/invite_create
    method: GET
    data_selector: records
- name: invite_update
  endpoint:
    path: /audit_log/invite_update
    method: GET
    data_selector: records
- name: invite_delete
  endpoint:
    path: /audit_log/invite_delete
    method: GET
    data_selector: records
- name: webhook_create
  endpoint:
    path: /audit_log/webhook_create
    method: GET
    data_selector: records
- name: webhook_update
  endpoint:
    path: /audit_log/webhook_update
    method: GET
    data_selector: records
- name: webhook_delete
  endpoint:
    path: /audit_log/webhook_delete
    method: GET
    data_selector: records
- name: message
  endpoint:
    path: /messages
    method: POST
    data_selector: message
- name: forward
  endpoint:
    path: /messages/forward
    method: POST
    data_selector: message
- name: fetch_message
  endpoint:
    path: /messages/{id}
    method: GET
    data_selector: message
- name: User
  endpoint:
    path: /nextcord/user
    method: GET
    data_selector: users
- name: asset
  endpoint:
    path: /asset
    method: GET
    data_selector: bytes
- name: message
  endpoint:
    path: /message
    method: GET
    data_selector: Message
- name: message
  endpoint:
    path: /messages
    method: GET
    data_selector: messages
- name: guild
  endpoint:
    path: /guilds
    method: GET
    data_selector: guilds
- name: guild
  endpoint:
    path: /guilds
    method: GET
    data_selector: guilds
- name: member
  endpoint:
    path: /get_member/{user_id}
    method: GET
    data_selector: member
    params: {}
- name: role
  endpoint:
    path: /get_role/{role_id}
    method: GET
    data_selector: role
    params: {}
- name: stage_instance
  endpoint:
    path: /get_stage_instance/{stage_instance_id}
    method: GET
    data_selector: stage_instance
    params: {}
- name: member_named
  endpoint:
    path: /get_member_named/{name}
    method: GET
    data_selector: member
    params: {}
- name: create_forum_channel
  endpoint:
    path: /create_forum_channel
    method: POST
- name: create_category_channel
  endpoint:
    path: /create_category_channel
    method: POST
- name: leave
  endpoint:
    path: /leave
    method: POST
- name: delete
  endpoint:
    path: /delete
    method: POST
- name: edit
  endpoint:
    path: /edit
    method: POST
- name: fetch_channels
  endpoint:
    path: /fetch_channels
    method: GET
- name: active_threads
  endpoint:
    path: /active_threads
    method: GET
- name: fetch_member
  endpoint:
    path: /fetch_member
    method: GET
- name: fetch_ban
  endpoint:
    path: /fetch_ban
    method: GET
- name: bans
  endpoint:
    path: /guilds/{guild_id}/bans
    method: GET
    data_selector: bans
    params:
      limit: 1000
- name: fetch_channel
  endpoint:
    path: /guilds/{guild_id}/channels/{channel_id}
    method: GET
    data_selector: channel
    params: {}
- name: prune_members
  endpoint:
    path: /guilds/{guild_id}/prune
    method: POST
    data_selector: prune_count
    params:
      days: 30
- name: fetch_stickers
  endpoint:
    path: /guilds/{guild_id}/stickers
    method: GET
    data_selector: stickers
    params: {}
- name: fetch_emojis
  endpoint:
    path: /guilds/{guild_id}/emojis
    method: GET
    data_selector: emojis
    params: {}
- name: members
  endpoint:
    params:
      limit: 5-100
      presences: 'False'
      cache: 'True'
- name: scheduled_events
  endpoint:
    path: /fetch_scheduled_events
    method: GET
    params:
      with_users: 'False'
- name: auto_moderation_rules
  endpoint:
    path: /auto_moderation_rules
    method: GET
    params: {}
- name: interaction
  endpoint:
    path: /interactions
    method: POST
    data_selector: data
- name: InteractionMessage
  endpoint:
    path: /interaction/message
    method: GET
    data_selector: message
- name: member
  endpoint:
    path: /nextcord/member
    method: GET
    data_selector: member_data
- name: remove_roles
  endpoint:
    path: /roles/remove
    method: POST
    data_selector: roles
- name: fetch_message
  endpoint:
    path: /messages/{id}
    method: GET
    data_selector: message
- name: forward
  endpoint:
    path: /messages/forward
    method: POST
    data_selector: message
- name: send
  endpoint:
    path: /messages/send
    method: POST
    data_selector: sent_message
- name: trigger_typing
  endpoint:
    path: /typing
    method: POST
    data_selector: typing_trigger
- name: partial_messageable
  endpoint:
    path: /partial_messageable
    method: GET
    data_selector: messageable
    params: {}
- name: text_channel
  endpoint:
    path: /nextcord/text_channel
    method: GET
    data_selector: attributes
    params: {}
- name: ApplicationIntegrationTypeConfig
  endpoint:
    path: /application/integration-type-config
    method: GET
    data_selector: oauth2_install_params
- name: AppInfo
  endpoint:
    path: /app/info
    method: GET
    data_selector: app_info
- name: PartialAppInfo
  endpoint:
    path: /app/partial-info
    method: GET
    data_selector: partial_app_info
- name: Team
  endpoint:
    path: /team/info
    method: GET
    data_selector: team_info
- name: TeamMember
  endpoint:
    path: /team/member
    method: GET
    data_selector: team_member_info
- name: FFmpegOpusAudio
  endpoint:
    path: /FFmpegOpusAudio
    method: GET
    data_selector: source
    params: {}
- name: PCMVolumeTransformer
  endpoint:
    path: /PCMVolumeTransformer
    method: GET
    data_selector: original
    params: {}
- name: opus
  endpoint:
    path: /opus
    method: GET
    data_selector: name
    params: {}
- name: DefaultAvatar
  endpoint:
    path: /nextcord/DefaultAvatar
    method: GET
    data_selector: records
    params: {}
- name: NotificationLevel
  endpoint:
    path: /nextcord/NotificationLevel
    method: GET
    data_selector: records
    params: {}
- name: AuditLogActionCategory
  endpoint:
    path: /nextcord/AuditLogActionCategory
    method: GET
    data_selector: records
    params: {}
- name: UserFlags
  endpoint:
    path: /nextcord/UserFlags
    method: GET
    data_selector: records
    params: {}
- name: ActivityType
  endpoint:
    path: /nextcord/ActivityType
    method: GET
    data_selector: records
    params: {}
- name: TeamMembershipState
  endpoint:
    path: /nextcord/TeamMembershipState
    method: GET
    data_selector: records
    params: {}
- name: WebhookType
  endpoint:
    path: /nextcord/WebhookType
    method: GET
    data_selector: records
    params: {}
- name: ExpireBehaviour
  endpoint:
    path: /nextcord/ExpireBehaviour
    method: GET
    data_selector: records
    params: {}
- name: StickerType
  endpoint:
    path: /nextcord/StickerType
    method: GET
    data_selector: records
    params: {}
- name: StickerFormatType
  endpoint:
    path: /nextcord/StickerFormatType
    method: GET
    data_selector: records
    params: {}
- name: InviteTarget
  endpoint:
    path: /nextcord/InviteTarget
    method: GET
    data_selector: records
    params: {}
- name: InteractionType
  endpoint:
    path: /nextcord/InteractionType
    method: GET
    data_selector: records
    params: {}
- name: InteractionResponseType
  endpoint:
    path: /nextcord/InteractionResponseType
    method: GET
    data_selector: records
    params: {}
- name: Locale
  endpoint:
    path: /nextcord/Locale
    method: GET
    data_selector: records
    params: {}
- name: audit_log_entry
  endpoint:
    path: /audit/logs
    method: GET
    data_selector: audit_logs
- name: AuditLogDiff
  endpoint:
    path: /audit-log/diff
    method: GET
- name: channel_create
  endpoint:
    path: /audit_logs/channel_create
    method: GET
    data_selector: records
- name: channel_update
  endpoint:
    path: /audit_logs/channel_update
    method: GET
    data_selector: records
- name: channel_delete
  endpoint:
    path: /audit_logs/channel_delete
    method: GET
    data_selector: records
- name: overwrite_create
  endpoint:
    path: /audit_logs/overwrite_create
    method: GET
    data_selector: records
- name: overwrite_update
  endpoint:
    path: /audit_logs/overwrite_update
    method: GET
    data_selector: records
- name: overwrite_delete
  endpoint:
    path: /audit_logs/overwrite_delete
    method: GET
    data_selector: records
- name: kick
  endpoint:
    path: /audit_logs/kick
    method: GET
    data_selector: records
- name: member_prune
  endpoint:
    path: /audit_logs/member_prune
    method: GET
    data_selector: records
- name: ban
  endpoint:
    path: /audit_logs/ban
    method: GET
    data_selector: records
- name: unban
  endpoint:
    path: /audit_logs/unban
    method: GET
    data_selector: records
- name: member_update
  endpoint:
    path: /audit_logs/member_update
    method: GET
    data_selector: records
- name: member_role_update
  endpoint:
    path: /audit_logs/member_role_update
    method: GET
    data_selector: records
- name: member_move
  endpoint:
    path: /audit_logs/member_move
    method: GET
    data_selector: records
- name: member_disconnect
  endpoint:
    path: /audit_logs/member_disconnect
    method: GET
    data_selector: records
- name: bot_add
  endpoint:
    path: /audit_logs/bot_add
    method: GET
    data_selector: records
- name: role_create
  endpoint:
    path: /audit_logs/role_create
    method: GET
    data_selector: records
- name: role_update
  endpoint:
    path: /audit_logs/role_update
    method: GET
    data_selector: records
- name: role_delete
  endpoint:
    path: /audit_logs/role_delete
    method: GET
    data_selector: records
- name: invite_create
  endpoint:
    path: /audit_logs/invite_create
    method: GET
    data_selector: records
- name: invite_update
  endpoint:
    path: /audit_logs/invite_update
    method: GET
    data_selector: records
- name: invite_delete
  endpoint:
    path: /audit_logs/invite_delete
    method: GET
    data_selector: records
- name: webhook_create
  endpoint:
    path: /audit_logs/webhook_create
    method: GET
    data_selector: records
- name: webhook_update
  endpoint:
    path: /audit_logs/webhook_update
    method: GET
    data_selector: records
- name: webhook_delete
  endpoint:
    path: /audit_logs/webhook_delete
    method: GET
    data_selector: records
- name: webhook
  endpoint:
    path: /webhooks/{guild_id}/{id}
    method: POST
    data_selector: webhook
    params: {}
- name: SyncWebhookMessage
  endpoint:
    path: /webhook/message
    method: POST
    data_selector: message
- name: User
  endpoint:
    path: /users
    method: GET
    data_selector: users
- name: attachment
  endpoint:
    path: /attachment
    method: GET
- name: asset
  endpoint:
    path: /asset
    method: GET
- name: message
  endpoint:
    path: /nextcord/message
    method: GET
    data_selector: content
    params: {}
- name: member
  endpoint:
    path: get_member/{user_id}
    method: GET
- name: role
  endpoint:
    path: get_role/{role_id}
    method: GET
- name: stage_instance
  endpoint:
    path: get_stage_instance/{stage_instance_id}
    method: GET
- name: member_named
  endpoint:
    path: get_member_named/{name}
    method: GET
- name: text_channel
  endpoint:
    path: create_text_channel/{name}
    method: POST
- name: voice_channel
  endpoint:
    path: create_voice_channel/{name}
    method: POST
- name: stage_channel
  endpoint:
    path: create_stage_channel/{name}
    method: POST
- name: category_channel
  endpoint:
    path: create_category/{name}
    method: POST
- name: guild_features
  endpoint:
    path: /guild/features
    method: GET
    data_selector: features
- name: premium_tier
  endpoint:
    path: /guild/premium_tier
    method: GET
    data_selector: premium_tier
- name: premium_subscription_count
  endpoint:
    path: /guild/premium_subscription_count
    method: GET
    data_selector: premium_subscription_count
- name: preferred_locale
  endpoint:
    path: /guild/preferred_locale
    method: GET
    data_selector: preferred_locale
- name: nsfw_level
  endpoint:
    path: /guild/nsfw_level
    method: GET
    data_selector: nsfw_level
- name: approximate_member_count
  endpoint:
    path: /guild/approximate_member_count
    method: GET
    data_selector: approximate_member_count
- name: approximate_presence_count
  endpoint:
    path: /guild/approximate_presence_count
    method: GET
    data_selector: approximate_presence_count
- name: max_stage_video_channel_users
  endpoint:
    path: /guild/max_stage_video_channel_users
    method: GET
    data_selector: max_stage_video_channel_users
- name: create_forum_channel
  endpoint:
    path: /create_forum_channel
    method: POST
- name: create_category_channel
  endpoint:
    path: /create_category_channel
    method: POST
- name: leave
  endpoint:
    path: /leave
    method: POST
- name: delete
  endpoint:
    path: /delete
    method: POST
- name: edit
  endpoint:
    path: /edit
    method: POST
- name: fetch_channels
  endpoint:
    path: /fetch_channels
    method: GET
- name: active_threads
  endpoint:
    path: /active_threads
    method: GET
- name: fetch_member
  endpoint:
    path: /fetch_member
    method: GET
- name: fetch_ban
  endpoint:
    path: /fetch_ban
    method: GET
- name: bans
  endpoint:
    path: /guilds/{guild_id}/bans
    method: GET
    data_selector: bans
    params:
      limit: 1000
- name: prune_members
  endpoint:
    path: /guilds/{guild_id}/prune
    method: POST
    data_selector: pruned_count
    params:
      days: null
      compute_prune_count: true
- name: templates
  endpoint:
    path: /guilds/{guild_id}/templates
    method: GET
    data_selector: templates
- name: webhooks
  endpoint:
    path: /guilds/{guild_id}/webhooks
    method: GET
    data_selector: webhooks
- name: fetch_stickers
  endpoint:
    path: /guilds/{guild_id}/stickers
    method: GET
    data_selector: stickers
- name: fetch_emojis
  endpoint:
    path: /guilds/{guild_id}/emojis
    method: GET
    data_selector: emojis
- name: BulkBan
  endpoint:
    path: /bulk_ban
    method: POST
    data_selector: banned_users
- name: GuildPreview
  endpoint:
    path: /guild_preview
    method: GET
    data_selector: guilds
- name: Integration
  endpoint:
    path: /integration
    method: GET
    data_selector: integrations
- name: StreamIntegration
  endpoint:
    path: /stream_integration
    method: GET
    data_selector: integrations
- name: Interaction
  endpoint:
    path: /interaction
    method: POST
    data_selector: interactions
- name: interaction_response
  endpoint:
    path: /nextcord/interaction/response
    method: GET
    data_selector: data
    params: {}
- name: send_message
  endpoint:
    path: /send_message
    method: POST
    data_selector: content
- name: edit_message
  endpoint:
    path: /edit_message
    method: PATCH
    data_selector: content
- name: delete_message
  endpoint:
    path: /delete_message
    method: DELETE
    data_selector: message_id
- name: create_emoji
  endpoint:
    path: /create_emoji
    method: POST
    data_selector: emoji
    params: {}
- name: delete_emoji
  endpoint:
    path: /delete_emoji
    method: DELETE
    data_selector: emoji
    params: {}
- name: fetch_roles
  endpoint:
    path: /fetch_roles
    method: GET
    data_selector: roles
    params:
      cache: 'False'
- name: fetch_role
  endpoint:
    path: /fetch_role
    method: GET
    data_selector: role
    params: {}
- name: create_role
  endpoint:
    path: /create_role
    method: POST
    data_selector: role
    params: {}
- name: edit_role_positions
  endpoint:
    path: /edit_role_positions
    method: POST
    data_selector: roles
    params: {}
- name: kick
  endpoint:
    path: /kick
    method: POST
    data_selector: kick_result
    params: {}
- name: ban
  endpoint:
    path: /ban
    method: POST
    data_selector: ban_result
    params: {}
- name: bulk_ban
  endpoint:
    path: /bulk_ban
    method: POST
    data_selector: bulk_ban_result
    params: {}
- name: unban
  endpoint:
    path: /unban
    method: POST
    data_selector: unban_result
    params: {}
- name: vanity_invite
  endpoint:
    path: /vanity_invite
    method: GET
    data_selector: vanity_invite
    params: {}
- name: widget
  endpoint:
    path: /widget
    method: GET
    data_selector: widget
    params: {}
- name: edit_widget
  endpoint:
    path: /edit_widget
    method: POST
    data_selector: widget_edit_result
    params: {}
- name: chunk
  endpoint:
    path: /chunk
    method: GET
    data_selector: members
    params:
      cache: 'True'
- name: query_members
  endpoint:
    path: /query_members
    method: GET
    data_selector: queried_members
    params:
      limit: 5
- name: member
  endpoint:
    path: /member
    method: GET
    data_selector: records
- name: emoji
  endpoint:
    path: /emoji
    method: GET
    data_selector: emojis
- name: partial_emoji
  endpoint:
    path: /partial_emoji
    method: GET
    data_selector: partial_emojis
- name: PartialMessageable
  endpoint:
    path: /nextcord/PartialMessageable
    method: GET
    data_selector: records
    params: {}
- name: TextChannel
  endpoint:
    path: /nextcord/TextChannel
    method: GET
    data_selector: records
    params: {}
- name: channel_flags
  endpoint:
    path: /nextcord/TextChannel/flags
    method: GET
    data_selector: flags
- name: channel_nsfw
  endpoint:
    path: /nextcord/TextChannel/nsfw
    method: GET
    data_selector: nsfw
- name: default_auto_archive_duration
  endpoint:
    path: /nextcord/TextChannel/default_auto_archive_duration
    method: GET
    data_selector: default_auto_archive_duration
- name: default_thread_slowmode_delay
  endpoint:
    path: /nextcord/TextChannel/default_thread_slowmode_delay
    method: GET
    data_selector: default_thread_slowmode_delay
- name: overwrites_for
  endpoint:
    path: /overwrites_for
    method: GET
    data_selector: overwrites
- name: pins
  endpoint:
    path: /pins
    method: GET
    data_selector: messages
- name: send
  endpoint:
    path: /send
    method: POST
    data_selector: message
- name: set_permissions
  endpoint:
    path: /set_permissions
    method: POST
    data_selector: permissions
- name: thread
  endpoint:
    path: /threads
    method: GET
    data_selector: threads
- name: view
  endpoint:
    path: /nextcord/ui/View
    method: GET
- name: modal
  endpoint:
    path: /nextcord/ui/Modal
    method: GET
- name: application_commands
  endpoint:
    path: /applications/{application.id}/commands
    method: POST
    data_selector: command_data
    params: {}
- name: application_emojis
  endpoint:
    path: /applications/{application.id}/emojis
    method: GET
    data_selector: emojis
    params: {}
- name: VoiceClient
  endpoint:
    path: /nextcord/VoiceClient
    method: GET
    data_selector: voice_client_data
- name: VoiceProtocol
  endpoint:
    path: /nextcord/VoiceProtocol
    method: GET
    data_selector: voice_protocol_data
- name: AudioSource
  endpoint:
    path: /nextcord/AudioSource
    method: GET
    data_selector: audio_source_data
- name: audit_log_change
  endpoint:
    path: /audit_log_changes
    method: GET
    data_selector: changes
- name: webhook
  endpoint:
    path: /webhooks/{webhook.id}/{webhook.token}
    method: POST
    data_selector: webhook
    params: {}
- name: webhook
  endpoint:
    path: /webhooks/{guild_id}/{id}
    method: POST
    data_selector: webhook
- name: SyncWebhookMessage
  endpoint:
    path: /webhook/message
    method: POST
    data_selector: message
    params: {}
- name: channel_create
  endpoint:
    path: /audit-log/channel_create
    method: GET
- name: channel_update
  endpoint:
    path: /audit-log/channel_update
    method: GET
- name: channel_delete
  endpoint:
    path: /audit-log/channel_delete
    method: GET
- name: overwrite_create
  endpoint:
    path: /audit-log/overwrite_create
    method: GET
- name: overwrite_update
  endpoint:
    path: /audit-log/overwrite_update
    method: GET
- name: overwrite_delete
  endpoint:
    path: /audit-log/overwrite_delete
    method: GET
- name: kick
  endpoint:
    path: /audit-log/kick
    method: GET
- name: member_prune
  endpoint:
    path: /audit-log/member_prune
    method: GET
- name: ban
  endpoint:
    path: /audit-log/ban
    method: GET
- name: unban
  endpoint:
    path: /audit-log/unban
    method: GET
- name: member_update
  endpoint:
    path: /audit-log/member_update
    method: GET
- name: member_role_update
  endpoint:
    path: /audit-log/member_role_update
    method: GET
- name: member_move
  endpoint:
    path: /audit-log/member_move
    method: GET
- name: member_disconnect
  endpoint:
    path: /audit-log/member_disconnect
    method: GET
- name: bot_add
  endpoint:
    path: /audit-log/bot_add
    method: GET
- name: role_create
  endpoint:
    path: /audit-log/role_create
    method: GET
- name: role_update
  endpoint:
    path: /audit-log/role_update
    method: GET
- name: role_delete
  endpoint:
    path: /audit-log/role_delete
    method: GET
- name: invite_create
  endpoint:
    path: /audit-log/invite_create
    method: GET
- name: invite_update
  endpoint:
    path: /audit-log/invite_update
    method: GET
- name: invite_delete
  endpoint:
    path: /audit-log/invite_delete
    method: GET
- name: webhook_create
  endpoint:
    path: /audit-log/webhook_create
    method: GET
- name: webhook_update
  endpoint:
    path: /audit-log/webhook_update
    method: GET
- name: webhook_delete
  endpoint:
    path: /audit-log/webhook_delete
    method: GET
- name: message
  endpoint:
    path: /messages
    method: POST
    data_selector: message
    params: {}
- name: channel
  endpoint:
    path: /channels
    method: GET
    data_selector: channels
    params: {}
- name: channel_permissions
  endpoint:
    path: /permissions
    method: GET
    data_selector: permissions
- name: channel_invites
  endpoint:
    path: /invites
    method: GET
    data_selector: invites
- name: message_history
  endpoint:
    path: /messages/history
    method: GET
    data_selector: messages
- name: User
  endpoint:
    path: /user
    method: GET
    data_selector: user
- name: message
  endpoint:
    path: /nextcord/message
    method: GET
- name: attachment
  endpoint:
    path: /attachment
    method: GET
    data_selector: attachments
    params: {}
- name: asset
  endpoint:
    path: /asset
    method: GET
    data_selector: assets
    params: {}
- name: members
  endpoint:
    path: /guilds/{guild_id}/members
    method: GET
    data_selector: members
- name: audit_logs
  endpoint:
    path: /guilds/{guild_id}/audit-logs
    method: GET
    data_selector: audit_logs
- name: channels
  endpoint:
    path: /guilds/{guild_id}/channels
    method: GET
    data_selector: channels
- name: member
  endpoint:
    path: /get_member/{user_id}
    method: GET
    data_selector: member
    params: {}
- name: role
  endpoint:
    path: /get_role/{role_id}
    method: GET
    data_selector: role
    params: {}
- name: stage_instance
  endpoint:
    path: /get_stage_instance/{stage_instance_id}
    method: GET
    data_selector: stage_instance
    params: {}
- name: create_text_channel
  endpoint:
    path: /create_text_channel/{name}
    method: POST
    data_selector: channel
    params: {}
- name: create_voice_channel
  endpoint:
    path: /create_voice_channel/{name}
    method: POST
    data_selector: channel
    params: {}
- name: create_stage_channel
  endpoint:
    path: /create_stage_channel/{name}
    method: POST
    data_selector: channel
    params: {}
- name: create_category
  endpoint:
    path: /create_category/{name}
    method: POST
    data_selector: channel
    params: {}
- name: members
  endpoint:
    path: /members
    method: GET
    data_selector: list
    params:
      limit: number between 5 and 100
      presences: 'false'
      cache: 'true'
- name: scheduled_events
  endpoint:
    path: /scheduled_events
    method: GET
    data_selector: events
    params:
      with_users: 'false'
- name: auto_moderation_rules
  endpoint:
    path: /auto_moderation_rules
    method: GET
    data_selector: rules
    params: {}
- name: BulkBan
  endpoint:
    path: /bulk_ban
    method: POST
    data_selector: banned_users
- name: GuildPreview
  endpoint:
    path: /guilds/{guild_id}/preview
    method: GET
    data_selector: guild_preview
- name: Integration
  endpoint:
    path: /integrations/{integration_id}
    method: GET
    data_selector: integration
- name: interaction
  endpoint:
    path: /interactions
    method: POST
    data_selector: data
    params: {}
- name: create_emoji
  endpoint:
    path: /create_emoji
    method: POST
- name: delete_emoji
  endpoint:
    path: /delete_emoji
    method: DELETE
- name: fetch_roles
  endpoint:
    path: /fetch_roles
    method: GET
- name: fetch_role
  endpoint:
    path: /fetch_role
    method: GET
- name: create_role
  endpoint:
    path: /create_role
    method: POST
- name: edit_role_positions
  endpoint:
    path: /edit_role_positions
    method: PATCH
- name: kick
  endpoint:
    path: /kick
    method: POST
- name: ban
  endpoint:
    path: /ban
    method: POST
- name: bulk_ban
  endpoint:
    path: /bulk_ban
    method: POST
- name: unban
  endpoint:
    path: /unban
    method: POST
- name: vanity_invite
  endpoint:
    path: /vanity_invite
    method: GET
- name: widget
  endpoint:
    path: /widget
    method: GET
- name: edit_widget
  endpoint:
    path: /edit_widget
    method: PATCH
- name: chunk
  endpoint:
    path: /chunk
    method: GET
- name: query_members
  endpoint:
    path: /query_members
    method: GET
- name: PartialInteractionMessage
  endpoint:
    path: /partial_interaction_message
    method: GET
    data_selector: message
- name: member
  endpoint:
    path: /members
    method: GET
    data_selector: members
- name: removal_roles
  endpoint:
    path: /roles/remove
    method: POST
    data_selector: roles
- name: fetch_message
  endpoint:
    path: /messages/{id}
    method: GET
    data_selector: message
- name: forward_message
  endpoint:
    path: /messages/forward
    method: POST
    data_selector: forwarded_message
- name: send_message
  endpoint:
    path: /messages/send
    method: POST
    data_selector: sent_message
- name: Role
  endpoint:
    path: /roles
    method: GET
    data_selector: roles
- name: RoleTags
  endpoint:
    path: /role_tags
    method: GET
    data_selector: role_tags
- name: history
  endpoint:
    path: history
    method: GET
    data_selector: messages
    params:
      limit: 100
- name: webhooks
  endpoint:
    path: webhooks
    method: GET
    data_selector: webhooks
    params: {}
- name: partial_messageable
  endpoint:
    path: /nextcord/PartialMessageable
    method: GET
    data_selector: partial_messageable
- name: text_channel
  endpoint:
    path: /nextcord/TextChannel
    method: GET
    data_selector: text_channel
- name: thread_history
  endpoint:
    path: /threads/{thread_id}/history
    method: GET
    data_selector: messages
    params:
      limit: 100
- name: thread_typing
  endpoint:
    path: /threads/{thread_id}/typing
    method: POST
    data_selector: result
    params: {}
- name: overwrites_for
  endpoint:
    path: /overwrites_for
    method: GET
    data_selector: overwrites
- name: pins
  endpoint:
    path: /pins
    method: GET
    data_selector: messages
- name: send
  endpoint:
    path: /send
    method: POST
    data_selector: message
- name: set_permissions
  endpoint:
    path: /set_permissions
    method: POST
    data_selector: permissions
- name: trigger_typing
  endpoint:
    path: /trigger_typing
    method: POST
    data_selector: typing
- name: thread_member
  endpoint:
    path: /thread_member
    method: GET
    data_selector: thread_members
    params: {}
- name: voice_channel
  endpoint:
    path: /voice_channel
    method: GET
    data_selector: attributes
- name: add_user_to_thread
  endpoint:
    path: /add_user_to_thread
    method: POST
- name: remove_user_from_thread
  endpoint:
    path: /remove_user_from_thread
    method: POST
- name: fetch_members
  endpoint:
    path: /fetch_members
    method: GET
- name: delete_thread
  endpoint:
    path: /delete_thread
    method: DELETE
- name: get_partial_message
  endpoint:
    path: /get_partial_message
    method: GET
- name: fetch_message
  endpoint:
    path: /fetch_message
    method: GET
- name: forward_message
  endpoint:
    path: /forward_message
    method: POST
- name: pins
  endpoint:
    path: /pins
    method: GET
- name: send_message
  endpoint:
    path: /send_message
    method: POST
- name: trigger_typing
  endpoint:
    path: /trigger_typing
    method: POST
- name: guild_sticker
  endpoint:
    path: /guilds/{guild_id}/stickers
    method: GET
    data_selector: stickers
- name: AppInfo
  endpoint:
    path: /app-info
    method: GET
    data_selector: app_info
- name: Team
  endpoint:
    path: /team
    method: GET
    data_selector: team_info
- name: VoiceClient
  endpoint:
    path: /voice-client
    method: GET
    data_selector: voice_info
- name: ChannelType
  endpoint:
    path: /nextcord/ChannelType
    method: GET
- name: MessageType
  endpoint:
    path: /nextcord/MessageType
    method: GET
- name: VoiceRegion
  endpoint:
    path: /nextcord/VoiceRegion
    method: GET
- name: VerificationLevel
  endpoint:
    path: /nextcord/VerificationLevel
    method: GET
- name: ContentFilter
  endpoint:
    path: /nextcord/ContentFilter
    method: GET
- name: Status
  endpoint:
    path: /nextcord/Status
    method: GET
- name: invite_create
  endpoint:
    path: /on_invite_create
    method: CALL
    data_selector: invite
- name: invite_delete
  endpoint:
    path: /on_invite_delete
    method: CALL
    data_selector: invite
- name: group_join
  endpoint:
    path: /on_group_join
    method: CALL
    data_selector: channel,user
- name: group_remove
  endpoint:
    path: /on_group_remove
    method: CALL
    data_selector: channel,user
- name: guild_scheduled_event_create
  endpoint:
    path: /on_guild_scheduled_event_create
    method: CALL
    data_selector: event
- name: guild_scheduled_event_update
  endpoint:
    path: /on_guild_scheduled_event_update
    method: CALL
    data_selector: before,after
- name: guild_scheduled_event_delete
  endpoint:
    path: /on_guild_scheduled_event_delete
    method: CALL
    data_selector: event
- name: guild_scheduled_event_user_add
  endpoint:
    path: /on_guild_scheduled_event_user_add
    method: CALL
    data_selector: event,user
- name: guild_scheduled_event_user_remove
  endpoint:
    path: /on_guild_scheduled_event_user_remove
    method: CALL
    data_selector: event,user
- name: auto_moderation_rule_create
  endpoint:
    path: /on_auto_moderation_rule_create
    method: CALL
    data_selector: rule
- name: auto_moderation_rule_update
  endpoint:
    path: /on_auto_moderation_rule_update
    method: CALL
    data_selector: rule
- name: auto_moderation_rule_delete
  endpoint:
    path: /on_auto_moderation_rule_delete
    method: CALL
    data_selector: rule
- name: auto_moderation_action_execution
  endpoint:
    path: /on_auto_moderation_action_execution
    method: CALL
    data_selector: execution
- name: guild_audit_log_entry_create
  endpoint:
    path: /on_guild_audit_log_entry_create
    method: CALL
    data_selector: entry
- name: audit_log_entry
  endpoint:
    path: /guilds/{guild_id}/audit-logs
    method: GET
    data_selector: audit_log_entries
    params: {}
- name: webhook
  endpoint:
    path: /webhooks
    method: POST
    data_selector: webhooks
    params: {}
- name: webhook
  endpoint:
    path: /webhooks/{guild_id}/{webhook_id}
    method: GET
    data_selector: webhook
    params: {}
- name: channel_create
  endpoint:
    path: /channel_create
    method: POST
- name: channel_update
  endpoint:
    path: /channel_update
    method: POST
- name: channel_delete
  endpoint:
    path: /channel_delete
    method: DELETE
- name: overwrite_create
  endpoint:
    path: /overwrite_create
    method: POST
- name: overwrite_update
  endpoint:
    path: /overwrite_update
    method: POST
- name: overwrite_delete
  endpoint:
    path: /overwrite_delete
    method: DELETE
- name: kick
  endpoint:
    path: /kick
    method: POST
- name: member_prune
  endpoint:
    path: /member_prune
    method: POST
- name: ban
  endpoint:
    path: /ban
    method: POST
- name: unban
  endpoint:
    path: /unban
    method: POST
- name: member_update
  endpoint:
    path: /member_update
    method: POST
- name: member_role_update
  endpoint:
    path: /member_role_update
    method: POST
- name: member_move
  endpoint:
    path: /member_move
    method: POST
- name: member_disconnect
  endpoint:
    path: /member_disconnect
    method: POST
- name: bot_add
  endpoint:
    path: /bot_add
    method: POST
- name: role_create
  endpoint:
    path: /role_create
    method: POST
- name: role_update
  endpoint:
    path: /role_update
    method: POST
- name: role_delete
  endpoint:
    path: /role_delete
    method: DELETE
- name: invite_create
  endpoint:
    path: /invite_create
    method: POST
- name: invite_update
  endpoint:
    path: /invite_update
    method: POST
- name: invite_delete
  endpoint:
    path: /invite_delete
    method: DELETE
- name: webhook_create
  endpoint:
    path: /webhook_create
    method: POST
- name: webhook_update
  endpoint:
    path: /webhook_update
    method: POST
- name: webhook_delete
  endpoint:
    path: /webhook_delete
    method: DELETE
- name: delete_message
  endpoint:
    path: /delete_message/{message_id}
    method: DELETE
    data_selector: message
    params: {}
- name: edit_message
  endpoint:
    path: /edit_message/{message_id}
    method: PATCH
    data_selector: message
    params: {}
- name: channel_permissions
  endpoint:
    path: /permissions
    method: GET
    data_selector: permissions
- name: delete_channel
  endpoint:
    path: /channels/{channel_id}
    method: DELETE
    data_selector: deleted
- name: set_permissions
  endpoint:
    path: /channels/{channel_id}/permissions/{target_id}
    method: PUT
    data_selector: permissions
- name: create_invite
  endpoint:
    path: /channels/{channel_id}/invites
    method: POST
    data_selector: invite
- name: get_invites
  endpoint:
    path: /channels/{channel_id}/invites
    method: GET
    data_selector: invites
- name: User
  endpoint:
    path: /users/@me
    method: GET
    data_selector: user
- name: members
  endpoint:
    path: /guilds/{guild_id}/members
    method: GET
    data_selector: members
    params:
      limit: 1000
- name: audit_logs
  endpoint:
    path: /guilds/{guild_id}/audit-logs
    method: GET
    data_selector: audit_logs
    params:
      limit: 100
- name: member
  endpoint:
    path: /get_member
    method: GET
    data_selector: member
    params: {}
- name: role
  endpoint:
    path: /get_role
    method: GET
    data_selector: role
    params: {}
- name: stage_instance
  endpoint:
    path: /get_stage_instance
    method: GET
    data_selector: stage_instance
    params: {}
- name: bans
  endpoint:
    path: /guilds/{guild_id}/bans
    method: GET
    data_selector: bans
    params:
      limit: 1000
- name: fetch_channel
  endpoint:
    path: /channels/{channel_id}
    method: GET
    data_selector: channel
    params: {}
- name: prune_members
  endpoint:
    path: /guilds/{guild_id}/prune
    method: POST
    data_selector: pruned_count
    params: {}
- name: templates
  endpoint:
    path: /guilds/{guild_id}/templates
    method: GET
    data_selector: templates
    params: {}
- name: webhooks
  endpoint:
    path: /guilds/{guild_id}/webhooks
    method: GET
    data_selector: webhooks
    params: {}
- name: fetch_stickers
  endpoint:
    path: /guilds/{guild_id}/stickers
    method: GET
    data_selector: stickers
    params: {}
- name: fetch_emojis
  endpoint:
    path: /guilds/{guild_id}/emojis
    method: GET
    data_selector: emojis
    params: {}
- name: members
  endpoint:
    params:
      limit: 100
- name: scheduled_events
  endpoint:
    path: /scheduled_events
    method: GET
    data_selector: events
- name: auto_moderation_rules
  endpoint:
    path: /auto_moderation/rules
    method: GET
    data_selector: rules
- name: interaction
  endpoint:
    path: /interactions
    method: POST
    data_selector: data
- name: create_emoji
  endpoint:
    path: /create_emoji
    method: POST
    data_selector: emoji
    params: {}
- name: delete_emoji
  endpoint:
    path: /delete_emoji
    method: DELETE
    data_selector: emoji
    params: {}
- name: fetch_roles
  endpoint:
    path: /fetch_roles
    method: GET
    data_selector: roles
    params:
      cache: 'False'
- name: fetch_role
  endpoint:
    path: /fetch_role
    method: GET
    data_selector: role
    params: {}
- name: create_role
  endpoint:
    path: /create_role
    method: POST
    data_selector: role
    params: {}
- name: edit_role_positions
  endpoint:
    path: /edit_role_positions
    method: PATCH
    data_selector: roles
    params: {}
- name: kick
  endpoint:
    path: /kick
    method: POST
    data_selector: user
    params: {}
- name: ban
  endpoint:
    path: /ban
    method: POST
    data_selector: user
    params: {}
- name: bulk_ban
  endpoint:
    path: /bulk_ban
    method: POST
    data_selector: users
    params: {}
- name: unban
  endpoint:
    path: /unban
    method: POST
    data_selector: user
    params: {}
- name: vanity_invite
  endpoint:
    path: /vanity_invite
    method: GET
    data_selector: invite
    params: {}
- name: widget
  endpoint:
    path: /widget
    method: GET
    data_selector: widget
    params: {}
- name: edit_widget
  endpoint:
    path: /edit_widget
    method: PATCH
    data_selector: widget
    params: {}
- name: chunk
  endpoint:
    path: /chunk
    method: GET
    data_selector: members
    params:
      cache: 'True'
- name: query_members
  endpoint:
    path: /query_members
    method: GET
    data_selector: members
    params:
      limit: 5
      presences: 'False'
      cache: 'True'
- name: member
  endpoint:
    path: /nextcord/member
    method: GET
    data_selector: member_data
- name: PartialMessageable
  endpoint:
    path: /PartialMessageable
    method: GET
    data_selector: messageable
    params: {}
- name: TextChannel
  endpoint:
    path: /TextChannel
    method: GET
    data_selector: channel
    params: {}
- name: history
  endpoint:
    path: /history
    method: GET
    data_selector: messages
    params:
      limit: 100
- name: webhooks
  endpoint:
    path: /webhooks
    method: GET
    data_selector: webhooks
    params: {}
- name: overwrites_for
  endpoint:
    path: /overwrites_for
    method: GET
- name: permissions_synced
  endpoint:
    path: /permissions_synced
    method: GET
- name: pins
  endpoint:
    path: /pins
    method: GET
- name: send
  endpoint:
    path: /send
    method: POST
- name: set_permissions
  endpoint:
    path: /set_permissions
    method: POST
- name: trigger_typing
  endpoint:
    path: /trigger_typing
    method: POST
- name: voice_channel
  endpoint:
    path: /voice/channel
    method: GET
    data_selector: channel_data
- name: stage_channel
  endpoint:
    path: /stage_channel
    method: GET
- name: guild_sticker
  endpoint:
    path: /guilds/{guild_id}/stickers
    method: GET
    data_selector: stickers
- name: overwrites
  endpoint:
    path: /overwrites
    method: GET
    data_selector: overwrites
    params: {}
- name: permissions_for
  endpoint:
    path: /permissions_for
    method: GET
    data_selector: permissions
    params: {}
- name: set_permissions
  endpoint:
    path: /set_permissions
    method: POST
    data_selector: set_permissions
    params: {}
- name: send
  endpoint:
    path: /send
    method: POST
    data_selector: message
    params: {}
- name: trigger_typing
  endpoint:
    path: /trigger_typing
    method: POST
    data_selector: typing
    params: {}
- name: ApplicationIntegrationTypeConfig
  endpoint:
    path: /application/integration/type/config
    method: GET
- name: AppInfo
  endpoint:
    path: /app/info
    method: GET
- name: PartialAppInfo
  endpoint:
    path: /app/partial/info
    method: GET
- name: Team
  endpoint:
    path: /team
    method: GET
- name: TeamMember
  endpoint:
    path: /team/member
    method: GET
- name: ChannelType
  endpoint:
    path: /nextcord/ChannelType
    method: GET
    data_selector: value
- name: MessageType
  endpoint:
    path: /nextcord/MessageType
    method: GET
    data_selector: value
- name: VoiceRegion
  endpoint:
    path: /nextcord/VoiceRegion
    method: GET
    data_selector: value
- name: VerificationLevel
  endpoint:
    path: /nextcord/VerificationLevel
    method: GET
    data_selector: value
- name: ContentFilter
  endpoint:
    path: /nextcord/ContentFilter
    method: GET
    data_selector: value
- name: Status
  endpoint:
    path: /nextcord/Status
    method: GET
    data_selector: value
- name: audit_log_change
  endpoint:
    path: /audit-log/change
    method: GET
    data_selector: changes
    params: {}
- name: webhook
  endpoint:
    path: /webhooks
    method: POST
    data_selector: webhooks
    params: {}
- name: webhook
  endpoint:
    path: /webhook
    method: POST
- name: channel_create
  endpoint:
    path: /channel_create
    method: POST
- name: channel_update
  endpoint:
    path: /channel_update
    method: POST
- name: channel_delete
  endpoint:
    path: /channel_delete
    method: DELETE
- name: overwrite_create
  endpoint:
    path: /overwrite_create
    method: POST
- name: overwrite_update
  endpoint:
    path: /overwrite_update
    method: POST
- name: overwrite_delete
  endpoint:
    path: /overwrite_delete
    method: DELETE
- name: kick
  endpoint:
    path: /kick
    method: POST
- name: member_prune
  endpoint:
    path: /member_prune
    method: POST
- name: ban
  endpoint:
    path: /ban
    method: POST
- name: unban
  endpoint:
    path: /unban
    method: POST
- name: member_update
  endpoint:
    path: /member_update
    method: POST
- name: member_role_update
  endpoint:
    path: /member_role_update
    method: POST
- name: member_move
  endpoint:
    path: /member_move
    method: POST
- name: member_disconnect
  endpoint:
    path: /member_disconnect
    method: POST
- name: bot_add
  endpoint:
    path: /bot_add
    method: POST
- name: role_create
  endpoint:
    path: /role_create
    method: POST
- name: role_update
  endpoint:
    path: /role_update
    method: POST
- name: role_delete
  endpoint:
    path: /role_delete
    method: DELETE
- name: invite_create
  endpoint:
    path: /invite_create
    method: POST
- name: invite_update
  endpoint:
    path: /invite_update
    method: POST
- name: invite_delete
  endpoint:
    path: /invite_delete
    method: DELETE
- name: webhook_create
  endpoint:
    path: /webhook_create
    method: POST
- name: webhook_update
  endpoint:
    path: /webhook_update
    method: POST
- name: webhook_delete
  endpoint:
    path: /webhook_delete
    method: DELETE
- name: SyncWebhookMessage
  endpoint:
    path: /syncwebhook/message
    method: POST
    data_selector: message
    params: {}
- name: channel_permissions
  endpoint:
    path: /channel/permissions
    method: GET
    data_selector: permissions
- name: delete_channel
  endpoint:
    path: /channel/delete
    method: DELETE
    data_selector: result
- name: set_permissions
  endpoint:
    path: /channel/set_permissions
    method: POST
    data_selector: result
- name: clone_channel
  endpoint:
    path: /channel/clone
    method: POST
    data_selector: channel
- name: move_channel
  endpoint:
    path: /channel/move
    method: POST
    data_selector: result
- name: create_invite
  endpoint:
    path: /channel/create_invite
    method: POST
    data_selector: invite
- name: get_invites
  endpoint:
    path: /channel/invites
    method: GET
    data_selector: invites
- name: message
  endpoint:
    path: /messages
    method: POST
    data_selector: message
    params: {}
- name: message_forward
  endpoint:
    path: /messages/forward
    method: POST
    data_selector: message
    params: {}
- name: typing_indicator
  endpoint:
    path: /typing
    method: POST
    data_selector: typing
    params: {}
- name: fetch_message
  endpoint:
    path: /messages/{id}
    method: GET
    data_selector: message
    params: {}
- name: User
  endpoint:
    path: /nextcord/User
    method: GET
    data_selector: records
- name: guild_info
  endpoint:
    path: /guilds/{guild_id}
    method: GET
    data_selector: guild
    params: {}
- name: guild_members
  endpoint:
    path: /guilds/{guild_id}/members
    method: GET
    data_selector: members
    params:
      limit: 1000
- name: member
  endpoint:
    path: /get_member/{user_id}
    method: GET
    data_selector: member
    params: {}
- name: role
  endpoint:
    path: /get_role/{role_id}
    method: GET
    data_selector: role
    params: {}
- name: stage_instance
  endpoint:
    path: /get_stage_instance/{stage_instance_id}
    method: GET
    data_selector: stage_instance
    params: {}
- name: fetch_scheduled_events
  endpoint:
    path: /guilds/{guild_id}/scheduled-events
    method: GET
    data_selector: scheduled_events
- name: create_scheduled_event
  endpoint:
    path: /guilds/{guild_id}/scheduled-events
    method: POST
    data_selector: scheduled_event
- name: auto_moderation_rules
  endpoint:
    path: /guilds/{guild_id}/auto-moderation/rules
    method: GET
    data_selector: rules
- name: create_auto_moderation_rule
  endpoint:
    path: /guilds/{guild_id}/auto-moderation/rules
    method: POST
    data_selector: rule
- name: BulkBan
  endpoint:
    path: /bulk_ban
    method: POST
    data_selector: banned_users
    params: {}
- name: GuildPreview
  endpoint:
    path: /guild_preview
    method: GET
    data_selector: guilds
    params: {}
- name: Integration
  endpoint:
    path: /integration
    method: GET
    data_selector: integrations
    params: {}
- name: StreamIntegration
  endpoint:
    path: /stream_integration
    method: GET
    data_selector: streams
    params: {}
- name: Interaction
  endpoint:
    path: /interaction
    method: POST
    data_selector: interactions
    params: {}
- name: create_emoji
  endpoint:
    path: /emoji/create
    method: POST
    data_selector: emoji
- name: delete_emoji
  endpoint:
    path: /emoji/delete
    method: DELETE
    data_selector: emoji
- name: fetch_roles
  endpoint:
    path: /roles
    method: GET
    data_selector: roles
- name: fetch_role
  endpoint:
    path: /roles/{role_id}
    method: GET
    data_selector: role
- name: create_role
  endpoint:
    path: /roles/create
    method: POST
    data_selector: role
- name: edit_role_positions
  endpoint:
    path: /roles/positions
    method: PATCH
    data_selector: roles
- name: kick
  endpoint:
    path: /guilds/{guild_id}/kick
    method: POST
    data_selector: user
- name: ban
  endpoint:
    path: /guilds/{guild_id}/ban
    method: POST
    data_selector: user
- name: bulk_ban
  endpoint:
    path: /guilds/{guild_id}/ban/bulk
    method: POST
    data_selector: users
- name: unban
  endpoint:
    path: /guilds/{guild_id}/unban
    method: POST
    data_selector: user
- name: vanity_invite
  endpoint:
    path: /guilds/{guild_id}/vanity_invite
    method: GET
    data_selector: invite
- name: widget
  endpoint:
    path: /guilds/{guild_id}/widget
    method: GET
    data_selector: widget
- name: edit_widget
  endpoint:
    path: /guilds/{guild_id}/widget/edit
    method: PATCH
    data_selector: widget
- name: chunk
  endpoint:
    path: /guilds/{guild_id}/chunk
    method: GET
    data_selector: members
- name: query_members
  endpoint:
    path: /guilds/{guild_id}/members/query
    method: GET
    data_selector: members
- name: PartialInteractionMessage
  endpoint:
    path: /partial_interaction_message
    method: GET
    data_selector: message
- name: MessageInteraction
  endpoint:
    path: /message_interaction
    method: GET
    data_selector: data
- name: MessageInteractionMetadata
  endpoint:
    path: /message_interaction_metadata
    method: GET
    data_selector: data
- name: Member
  endpoint:
    path: /member
    method: GET
    data_selector: data
- name: member
  endpoint:
    path: /members
    method: GET
    data_selector: members
- name: send_message
  endpoint:
    path: /send_message
    method: POST
    data_selector: response
    params: {}
- name: send_modal
  endpoint:
    path: /send_modal
    method: POST
    data_selector: response
    params: {}
- name: edit_message
  endpoint:
    path: /edit_message
    method: PATCH
    data_selector: response
    params: {}
- name: add_reaction
  endpoint:
    path: /add_reaction
    method: POST
    data_selector: response
    params: {}
- name: clear_reaction
  endpoint:
    path: /clear_reaction
    method: DELETE
    data_selector: response
    params: {}
- name: create_thread
  endpoint:
    path: /create_thread
    method: POST
    data_selector: response
    params: {}
- name: PartialMessageable
  endpoint:
    path: /nextcord/PartialMessageable
    method: GET
    data_selector: records
    params: {}
- name: TextChannel
  endpoint:
    path: /nextcord/TextChannel
    method: GET
    data_selector: records
    params: {}
- name: channel_flags
- name: nsfw
- name: default_auto_archive_duration
- name: default_thread_slowmode_delay
- name: history
- name: typing
- name: type
- name: permissions_for
- name: members
- name: threads
- name: is_nsfw
- name: is_news
- name: last_message
- name: edit
- name: clone
- name: delete_messages
- name: purge
- name: webhooks
- name: create_webhook
- name: webhook
  endpoint:
    path: /webhooks
    method: POST
    data_selector: webhook
- name: thread
  endpoint:
    path: /threads
    method: POST
    data_selector: thread
- name: invite
  endpoint:
    path: /invites
    method: POST
    data_selector: invite
- name: overwrites_for
  endpoint:
    path: /overwrites_for
    method: GET
    data_selector: overwrites
- name: pins
  endpoint:
    path: /pins
    method: GET
    data_selector: messages
- name: send
  endpoint:
    path: /send
    method: POST
    data_selector: message
- name: set_permissions
  endpoint:
    path: /set_permissions
    method: POST
    data_selector: permissions
- name: thread_history
  endpoint:
    path: /threads/history
    method: GET
    data_selector: messages
    params:
      limit: 100
- name: thread_typing
  endpoint:
    path: /threads/typing
    method: POST
    data_selector: typing
    params: {}
- name: thread_edit
  endpoint:
    path: /threads/edit
    method: PATCH
    data_selector: edited_thread
    params: {}
- name: voice_channel
  endpoint:
    path: /voice_channels
    method: GET
    data_selector: channels
- name: invites
  endpoint:
    path: /channels/{channel_id}/invites
    method: GET
    data_selector: invites
- name: history
  endpoint:
    path: /channels/{channel_id}/messages
    method: GET
    data_selector: messages
    params:
      limit: 100
- name: stage_instance
  endpoint:
    path: /stage_instances
    method: GET
    data_selector: instances
- name: CategoryChannel
  endpoint:
    path: /category_channel
    method: GET
    data_selector: channels
- name: DMChannel
  endpoint:
    path: /dmchannel
    method: GET
    data_selector: messages
- name: message
  endpoint:
    path: /send
    method: POST
    data_selector: message
    params: {}
- name: GroupChannel
  endpoint:
    path: /groupchannel
    method: GET
    data_selector: channel
    params: {}
- name: forum_channel
  endpoint:
    path: /nextcord/forum_channel
    method: GET
    data_selector: records
- name: GuildSticker
  endpoint:
    path: /guilds/{guild_id}/stickers
    method: GET
    data_selector: stickers
- name: Invite
  endpoint:
    path: /invites/{invite_code}
    method: GET
    data_selector: invite
- name: GuildSticker
  endpoint:
    path: /guilds/stickers
    method: GET
    data_selector: stickers
- name: WidgetMember
  endpoint:
    path: /guilds/widget/members
    method: GET
    data_selector: members
- name: Widget
  endpoint:
    path: /guilds/widget
    method: GET
    data_selector: widget
- name: StickerPack
  endpoint:
    path: /stickerpack
    method: GET
    data_selector: stickerPacks
- name: GuildSticker
  endpoint:
    path: /guildsticker
    method: GET
    data_selector: guildStickers
- name: StandardSticker
  endpoint:
    path: /standardsticker
    method: GET
    data_selector: standardStickers
- name: RawMessageDeleteEvent
  endpoint:
    path: /rawmessagedeleteevent
    method: GET
    data_selector: rawMessageDeleteEvents
- name: scheduled_event
  endpoint:
    path: /scheduled_events
    method: GET
    data_selector: events
- name: scheduled_event_user
  endpoint:
    path: /scheduled_event_users
    method: GET
    data_selector: users
- name: RawBulkMessageDeleteEvent
  endpoint:
    path: /on_raw_bulk_message_delete
    method: GET
    data_selector: message_ids
- name: RawMessageUpdateEvent
  endpoint:
    path: /on_raw_message_edit
    method: GET
    data_selector: data
- name: RawReactionActionEvent
  endpoint:
    path: /on_raw_reaction_add
    method: GET
    data_selector: event_type
- name: RawReactionClearEvent
  endpoint:
    path: /on_raw_reaction_clear
    method: GET
    data_selector: message_id
- name: RawReactionClearEmojiEvent
  endpoint:
    path: /on_raw_reaction_clear_emoji
    method: GET
    data_selector: emoji
- name: RawIntegrationDeleteEvent
  endpoint:
    path: /on_raw_integration_delete
    method: GET
    data_selector: integration_id
- name: PartialWebhookGuild
  endpoint:
    path: /webhook_guild
    method: GET
    data_selector: id
- name: PartialWebhookChannel
  endpoint:
    path: /webhook_channel
    method: GET
    data_selector: id
- name: AutoModerationRule
  endpoint:
    path: /automoderation/rules
    method: GET
    data_selector: records
- name: AutoModerationActionExecution
  endpoint:
    path: /automoderation/actions/execution
    method: GET
    data_selector: records
- name: Embed
  endpoint:
    path: /nextcord/Embed
    method: GET
    data_selector: attributes
    params: {}
- name: AllowedMentions
  endpoint:
    path: /nextcord/AllowedMentions
    method: GET
    data_selector: attributes
    params: {}
- name: MessageReference
  endpoint:
    path: /nextcord/MessageReference
    method: GET
    data_selector: attributes
- name: MessageSnapshot
  endpoint:
    path: /nextcord/MessageSnapshot
    method: GET
    data_selector: attributes
- name: PartialMessage
  endpoint:
    path: /PartialMessage
    method: GET
- name: Colour
  endpoint:
    path: /Colour
    method: GET
    data_selector: attributes
- name: BaseActivity
  endpoint:
    path: /BaseActivity
    method: GET
    data_selector: attributes
- name: Permissions
  endpoint:
    path: /permissions
    method: GET
    data_selector: permissions
- name: PublicUserFlags
  endpoint:
    path: /public_user_flags
    method: GET
    data_selector: flags
- name: MemberFlags
  endpoint:
    path: /member_flags
    method: GET
    data_selector: flags
- name: ChannelFlags
  endpoint:
    path: /channel_flags
    method: GET
    data_selector: flags
- name: AutoModerationTriggerMetadata
  endpoint:
    path: /automoderation_trigger_metadata
    method: GET
    data_selector: metadata
- name: AutoModerationActionMetadata
  endpoint:
    path: /automoderation_action_metadata
    method: GET
    data_selector: metadata
- name: modal
  endpoint:
    path: /nextcord/ui/Modal
    method: GET
    data_selector: records
- name: item
  endpoint:
    path: /nextcord/ui/Item
    method: GET
    data_selector: records
- name: button
  endpoint:
    path: /nextcord/ui/Button
    method: GET
    data_selector: records
- name: TextInput
  endpoint:
    path: /nextcord/ui/TextInput
    method: GET
    data_selector: attributes
- name: StringSelect
  endpoint:
    path: /nextcord/ui/StringSelect
    method: GET
    data_selector: attributes
- name: UserSelect
  endpoint:
    path: /nextcord/ui/UserSelect
    method: GET
    data_selector: attributes
    params: {}
- name: RoleSelect
  endpoint:
    path: /nextcord/ui/RoleSelect
    method: GET
    data_selector: attributes
    params: {}
- name: MentionableSelect
  endpoint:
    path: /nextcord/ui/MentionableSelect
    method: GET
    data_selector: attributes
    params: {}
- name: ChannelSelect
  endpoint:
    path: /nextcord/ui/ChannelSelect
    method: GET
    data_selector: attributes
    params: {}
- name: description
  endpoint:
    path: /nextcord/SlashApplicationCommand/description
    method: GET
- name: SlashApplicationCommand
  endpoint:
    path: /application-commands
    method: POST
    data_selector: command_ids
- name: SlashApplicationSubcommand
  endpoint:
    path: /subcommands
    method: POST
    data_selector: children
- name: ChannelType
  endpoint:
    path: /nextcord/ChannelType
    method: GET
    data_selector: types
    params: {}
- name: MessageType
  endpoint:
    path: /nextcord/MessageType
    method: GET
    data_selector: types
    params: {}
- name: VoiceRegion
  endpoint:
    path: /nextcord/VoiceRegion
    method: GET
    data_selector: regions
    params: {}
- name: VerificationLevel
  endpoint:
    path: /nextcord/VerificationLevel
    method: GET
    data_selector: levels
    params: {}
- name: ContentFilter
  endpoint:
    path: /nextcord/ContentFilter
    method: GET
    data_selector: filters
    params: {}
- name: Status
  endpoint:
    path: /nextcord/Status
    method: GET
    data_selector: statuses
    params: {}
- name: audit_log_entry
  endpoint:
    path: /guilds/{guild_id}/audit-logs
    method: GET
    data_selector: audit_log_entries
- name: audit_log_diff
  endpoint:
    path: /audit-log/diff
    method: GET
    data_selector: diff
    params: {}
- name: webhook
  endpoint:
    path: /webhook
    method: POST
    data_selector: webhook
    params: {}
- name: webhook
  endpoint:
    path: /webhooks/{webhook.id}/{webhook.token}
    method: POST
    data_selector: webhook
    params: {}
- name: channel_create
  endpoint:
    path: /channel_create
    method: POST
    data_selector: target
- name: channel_update
  endpoint:
    path: /channel_update
    method: POST
    data_selector: target
- name: channel_delete
  endpoint:
    path: /channel_delete
    method: POST
    data_selector: target
- name: overwrite_create
  endpoint:
    path: /overwrite_create
    method: POST
    data_selector: target
- name: overwrite_update
  endpoint:
    path: /overwrite_update
    method: POST
    data_selector: target
- name: overwrite_delete
  endpoint:
    path: /overwrite_delete
    method: POST
    data_selector: target
- name: kick
  endpoint:
    path: /kick
    method: POST
    data_selector: target
- name: member_prune
  endpoint:
    path: /member_prune
    method: POST
    data_selector: target
- name: ban
  endpoint:
    path: /ban
    method: POST
    data_selector: target
- name: unban
  endpoint:
    path: /unban
    method: POST
    data_selector: target
- name: member_update
  endpoint:
    path: /member_update
    method: POST
    data_selector: target
- name: member_role_update
  endpoint:
    path: /member_role_update
    method: POST
    data_selector: target
- name: member_move
  endpoint:
    path: /member_move
    method: POST
    data_selector: target
- name: member_disconnect
  endpoint:
    path: /member_disconnect
    method: POST
    data_selector: target
- name: bot_add
  endpoint:
    path: /bot_add
    method: POST
    data_selector: target
- name: role_create
  endpoint:
    path: /role_create
    method: POST
    data_selector: target
- name: role_update
  endpoint:
    path: /role_update
    method: POST
    data_selector: target
- name: role_delete
  endpoint:
    path: /role_delete
    method: POST
    data_selector: target
- name: invite_create
  endpoint:
    path: /invite_create
    method: POST
    data_selector: target
- name: invite_update
  endpoint:
    path: /invite_update
    method: POST
    data_selector: target
- name: invite_delete
  endpoint:
    path: /invite_delete
    method: POST
    data_selector: target
- name: webhook_create
  endpoint:
    path: /webhook_create
    method: POST
    data_selector: target
- name: webhook_update
  endpoint:
    path: /webhook_update
    method: POST
    data_selector: target
- name: webhook_delete
  endpoint:
    path: /webhook_delete
    method: POST
    data_selector: target
- name: SyncWebhookMessage
  endpoint:
    path: /webhook/message
    method: POST
    data_selector: message
    params: {}
- name: messageable
  endpoint:
    path: /messageable
    method: GET
    data_selector: messages
    params: {}
- name: channel
  endpoint:
    path: /channel
    method: GET
    data_selector: channels
    params: {}
- name: User
  endpoint:
    path: /nextcord/User
    method: GET
    data_selector: records
- name: message
  endpoint:
    path: /message
    method: GET
    data_selector: content
- name: reaction
  endpoint:
    path: /nextcord/reactions
    method: GET
    data_selector: reactions
    params: {}
- name: guild
  endpoint:
    path: /nextcord/guilds
    method: GET
    data_selector: guilds
    params: {}
- name: members
  endpoint:
    path: /guilds/{guild_id}/members
    method: GET
    data_selector: members
- name: audit_logs
  endpoint:
    path: /guilds/{guild_id}/audit-logs
    method: GET
    data_selector: audit_logs
- name: create_forum_channel
  endpoint:
    path: /create_forum_channel
    method: POST
- name: create_category_channel
  endpoint:
    path: /create_category_channel
    method: POST
- name: leave
  endpoint:
    path: /leave
    method: POST
- name: delete
  endpoint:
    path: /delete
    method: POST
- name: edit
  endpoint:
    path: /edit
    method: POST
- name: fetch_channels
  endpoint:
    path: /fetch_channels
    method: GET
- name: active_threads
  endpoint:
    path: /active_threads
    method: GET
- name: fetch_member
  endpoint:
    path: /fetch_member
    method: GET
- name: fetch_ban
  endpoint:
    path: /fetch_ban
    method: GET
- name: interaction
  endpoint:
    path: /interactions
    method: POST
    data_selector: data
    params: {}
- name: bans
  endpoint:
    path: /guilds/{guild_id}/bans
    method: GET
    data_selector: bans
    params:
      limit: 1000
- name: fetch_channel
  endpoint:
    path: /channels/{channel_id}
    method: GET
    data_selector: channel
    params: {}
- name: prune_members
  endpoint:
    path: /guilds/{guild_id}/prune
    method: POST
    data_selector: pruned_count
    params:
      days: 30
- name: templates
  endpoint:
    path: /guilds/{guild_id}/templates
    method: GET
    data_selector: templates
    params: {}
- name: webhooks
  endpoint:
    path: /guilds/{guild_id}/webhooks
    method: GET
    data_selector: webhooks
    params: {}
- name: estimate_pruned_members
  endpoint:
    path: /guilds/{guild_id}/prune
    method: GET
    data_selector: estimated_pruned_count
    params:
      days: 30
- name: invites
  endpoint:
    path: /guilds/{guild_id}/invites
    method: GET
    data_selector: invites
    params: {}
- name: create_template
  endpoint:
    path: /guilds/{guild_id}/templates
    method: POST
    data_selector: template
    params: {}
- name: create_integration
  endpoint:
    path: /guilds/{guild_id}/integrations
    method: POST
    data_selector: integration
    params: {}
- name: fetch_stickers
  endpoint:
    path: /guilds/{guild_id}/stickers
    method: GET
    data_selector: stickers
    params: {}
- name: fetch_sticker
  endpoint:
    path: /guilds/{guild_id}/stickers/{sticker_id}
    method: GET
    data_selector: sticker
    params: {}
- name: create_sticker
  endpoint:
    path: /guilds/{guild_id}/stickers
    method: POST
    data_selector: sticker
    params: {}
- name: delete_sticker
  endpoint:
    path: /guilds/{guild_id}/stickers/{sticker_id}
    method: DELETE
    data_selector: deleted_sticker
    params: {}
- name: fetch_emojis
  endpoint:
    path: /guilds/{guild_id}/emojis
    method: GET
    data_selector: emojis
    params: {}
- name: fetch_emoji
  endpoint:
    path: /guilds/{guild_id}/emojis/{emoji_id}
    method: GET
    data_selector: emoji
    params: {}
- name: create_custom_emoji
  endpoint:
    path: /guilds/{guild_id}/emojis
    method: POST
    data_selector: emoji
    params: {}
- name: MessageInteraction
  endpoint:
    path: /messageInteraction
    method: GET
    data_selector: data
- name: MessageInteractionMetadata
  endpoint:
    path: /messageInteractionMetadata
    method: GET
    data_selector: data
- name: Member
  endpoint:
    path: /member
    method: GET
    data_selector: data
- name: remove_roles
  endpoint:
    path: /remove_roles
    method: POST
- name: fetch_message
  endpoint:
    path: /fetch_message
    method: GET
- name: send_message
  endpoint:
    path: /send
    method: POST
- name: forward_message
  endpoint:
    path: /forward
    method: POST
- name: get_role
  endpoint:
    path: /get_role
    method: GET
- name: trigger_typing
  endpoint:
    path: /trigger_typing
    method: POST
- name: TextChannel
  endpoint:
    path: /textchannel
    method: GET
    data_selector: channels
    params: {}
- name: history
  endpoint:
    path: /threads/history
    method: GET
    data_selector: messages
    params:
      limit: 100
- name: thread_member
  endpoint:
    path: /nextcord/ThreadMember
    method: GET
    data_selector: thread_members
    params: {}
- name: voice_channel
  endpoint:
    path: /nextcord/VoiceChannel
    method: GET
    data_selector: voice_channels
    params: {}
- name: voice_channel
  endpoint:
    path: /voice/channel
    method: GET
    data_selector: channel_data
- name: stage_channel
  endpoint:
    path: /stage/channel
    method: GET
- name: invite_creation
  endpoint:
    path: /invites
    method: POST
    data_selector: invite
    params:
      max_age: 0
      max_uses: 0
      temporary: false
      unique: true
- name: message_history
  endpoint:
    path: /messages/history
    method: GET
    data_selector: messages
    params:
      limit: 100
- name: stage_instance
  endpoint:
    path: /stage-instance
    method: GET
    data_selector: stageInstances
- name: category_channel
  endpoint:
    path: /category_channel
    method: GET
    data_selector: channels
- name: DMChannel
  endpoint:
    path: /dmchannels
    method: GET
    data_selector: channels
- name: GroupChannel
  endpoint:
    path: /channels/{channel_id}
    method: GET
    data_selector: channel
    params: {}
- name: ForumChannel
  endpoint:
    path: /forum_channel
    method: GET
- name: PartialInviteGuild
  endpoint:
    path: /PartialInviteGuild
    method: GET
    data_selector: attributes
- name: PartialInviteChannel
  endpoint:
    path: /PartialInviteChannel
    method: GET
    data_selector: attributes
- name: Invite
  endpoint:
    path: /Invite
    method: GET
    data_selector: attributes
- name: invite
  endpoint:
    path: /invites
    method: GET
    data_selector: invites
- name: template
  endpoint:
    path: /templates
    method: GET
    data_selector: templates
- name: widget_channel
  endpoint:
    path: /widget/channels
    method: GET
    data_selector: widget_channels
- name: widget_member
  endpoint:
    path: /widget/members
    method: GET
    data_selector: widget_members
- name: Widget
  endpoint:
    path: /widget
    method: GET
- name: StickerPack
  endpoint:
    path: /sticker-pack
    method: GET
- name: StickerItem
  endpoint:
    path: /sticker-item
    method: GET
- name: Sticker
  endpoint:
    path: /sticker
    method: GET
- name: GuildSticker
  endpoint:
    path: /guild-sticker
    method: GET
- name: ScheduledEvent
  endpoint:
    path: /scheduledevents
    method: GET
    data_selector: events
- name: AutoModerationRule
  endpoint:
    path: /automoderationrules
    method: GET
    data_selector: rules
- name: RawTypingEvent
  endpoint:
    path: /raw_typing_event
    method: GET
    data_selector: attributes
- name: RawMessageDeleteEvent
  endpoint:
    path: /raw_message_delete_event
    method: GET
    data_selector: attributes
- name: RawBulkMessageDeleteEvent
  endpoint:
    path: /raw_bulk_message_delete_event
    method: GET
    data_selector: attributes
- name: RawMessageUpdateEvent
  endpoint:
    path: /raw_message_update_event
    method: GET
    data_selector: attributes
- name: RawReactionActionEvent
  endpoint:
    path: /raw_reaction_action_event
    method: GET
    data_selector: attributes
- name: RawReactionClearEvent
  endpoint:
    path: /raw_reaction_clear_event
    method: GET
    data_selector: attributes
- name: RawReactionClearEmojiEvent
  endpoint:
    path: /raw_reaction_clear_emoji_event
    method: GET
    data_selector: attributes
- name: RawIntegrationDeleteEvent
  endpoint:
    path: /raw_integration_delete_event
    method: GET
    data_selector: attributes
- name: AutoModerationActionExecution
  endpoint:
    path: /automoderation/action/execution
    method: GET
    data_selector: action
- name: File
  endpoint:
    path: /nextcord/File
    method: GET
    data_selector: attributes
    params: {}
- name: Colour
  endpoint:
    path: /nextcord/Colour
    method: GET
    data_selector: attributes
    params: {}
- name: BaseActivity
  endpoint:
    path: /nextcord/BaseActivity
    method: GET
    data_selector: attributes
    params: {}
- name: Activity
  endpoint:
    path: /nextcord/Activity
    method: GET
    data_selector: attributes
    params: {}
- name: view
  endpoint:
    path: nextcord/ui/View
    method: GET
- name: modal
  endpoint:
    path: nextcord/ui/Modal
    method: GET
- name: item
  endpoint:
    path: nextcord/ui/Item
    method: GET
- name: button
  endpoint:
    path: nextcord/ui/Button
    method: GET
- name: string_select
  endpoint:
    path: /nextcord/ui/string_select
    method: GET
    data_selector: values
    params:
      min_values: 1
      max_values: 1
      disabled: false
- name: user_select
  endpoint:
    path: /nextcord/ui/user_select
    method: GET
    data_selector: values
    params:
      min_values: 1
      max_values: 1
      disabled: false
- name: role_select
  endpoint:
    path: /nextcord/ui/role_select
    method: GET
    data_selector: values
    params:
      min_values: 1
      max_values: 1
      disabled: false
- name: slash_command
  endpoint:
    path: /api/v1/slash_commands
    method: POST
    data_selector: command
- name: MessageApplicationCommand
  endpoint:
    path: /nextcord/MessageApplicationCommand
    method: GET
- name: reaction
  endpoint:
    path: /Message.add_reaction
    method: POST
    data_selector: reaction
    params: {}
- name: guilds
  endpoint:
    path: /guilds
    method: GET
    data_selector: guilds
    params: {}
- name: channels
  endpoint:
    path: /channels
    method: GET
    data_selector: channels
    params: {}
- name: application_commands
  endpoint:
    path: /application-commands
    method: POST
    data_selector: application_commands
    params: {}
- name: AutoShardedClient
  endpoint:
    path: /gateway/bot
    method: GET
    data_selector: null
    params: {}
notes:
- Default timeout for heartbeat is 60 seconds.
- Default timeout for guild ready is 2 seconds.
- Non-persistent views can now be stored during the lifetime of the bot.
- Non-persistent views can now be removed from storage.
- Requires OAuth2 authentication for API access.
- You must have the ffmpeg or avconv executable in your path environment variable
  in order for this to work.
- This is a client similar to Client except it handles the complications of sharding
  for the user into a more manageable and transparent single process bot.
- It is recommended to use this client only if you have surpassed at least 1000 guilds.
- The audio source reads are done in a separate thread.
- Must have the ffmpeg or avconv executable in your path environment variable.
- Invalid probe method, must be 'native' or 'fallback'.
- Invalid value for probe parameter, must be str or a callable.
- Uses OAuth2 with refresh token — requires setup of connected app in api
- Webhooks are a form to send messages to channels in Discord without a bot user or
  authentication.
- If the webhook was received without authentication then this will be None.
- This is a lower level interface to WebhookMessage.delete() in case you only have
  an ID.
- Voice channels will always be sorted below text channels.
- New in version 3.0.
- This client handles sharding automatically for users with more than 1000 guilds.
- This class allows you to implement a protocol to allow for an external method of
  sending voice, such as Lavalink or a native library implementation.
- This requires setting the `enable_debug_events` setting in the [`Client`](#nextcord.Client
  'nextcord.Client').
- This requires [`Intents.typing`](#nextcord.Intents.typing 'nextcord.Intents.typing')
  to be enabled.
- This requires [`Intents.messages`](#nextcord.Intents.messages 'nextcord.Intents.messages')
  to be enabled.
- This requires [`Intents.reactions`](#nextcord.Intents.reactions 'nextcord.Intents.reactions')
  to be enabled.
- This requires [`Intents.guilds`](#nextcord.Intents.guilds 'nextcord.Intents.guilds')
  to be enabled.
- This requires Intents.guilds to be enabled.
- This requires Intents.members to be enabled.
- This requires Intents.integrations to be enabled.
- This requires Intents.webhooks to be enabled.
- This requires Intents.emojis_and_stickers to be enabled.
- This requires Intents.voice_states to be enabled.
- This requires Intents.bans to be enabled.
- Webhooks require an authentication token to make requests.
- Webhook functionality can vary based on type.
- This module uses the Python logging module to log diagnostic and errors in an output-independent
  way.
- Classes are read-only and not intended to be created by users.
- This returns only up to 128 most recent private channels due to an internal working
  on how Discord deals with private channels.
- This does not include role or channel mentions.
- Only cached users will be returned.
- The bitness of the library must match the bitness of your python interpreter.
- Requires setting the `enable_debug_events` setting in the [`Client`](#nextcord.Client
  'nextcord.Client').
- This requires `Intents.guilds` to be enabled.
- This requires `Intents.members` to be enabled.
- This requires `Intents.integrations` to be enabled.
- This requires `Intents.emojis_and_stickers` to be enabled.
- This requires `Intents.voice_states` to be enabled.
- This requires `Intents.bans` to be enabled.
- You must have the manage_channels permission to receive this.
- This requires Intents.invites to be enabled.
- This webhook does not have a token associated with it.
- The discriminator field is deprecated.
- New in version 1.6.
- New in version 2.0.
- New in version 2.4.
- Represents a CDN asset on Discord.
- Represents a message from Discord.
- You must have the `send_messages` permission to publish this message.
- You must have the `manage_messages` permission to pin the message.
- This client is recommended only if you have surpassed at least 1000 guilds.
- All the events must be a coroutine. If they aren’t, then you might get unexpected
  errors.
- This requires setting the `enable_debug_events` setting in the [`Client`](#nextcord.Client
  "nextcord.Client").
- This requires [`Intents.typing`](#nextcord.Intents.typing "nextcord.Intents.typing")
  to be enabled.
- This requires [`Intents.messages`](#nextcord.Intents.messages "nextcord.Intents.messages")
  to be enabled.
- This requires [`Intents.reactions`](#nextcord.Intents.reactions "nextcord.Intents.reactions")
  to be enabled.
- This requires [`Intents.guilds`](#nextcord.Intents.guilds "nextcord.Intents.guilds")
  to be enabled.
- There is a rare possibility that the Invite.guild and Invite.channel attributes
  will be of Object rather than the respective models.
- Webhook cannot be used to make requests if the token is None.
- This is referred to as a 'server' in the official Discord UI.
- Requires the `manage_channels` permission to create channels.
- Requires manage_guild permissions to get templates.
- Requires manage_webhooks permissions to get webhooks.
- Requires manage_guild permissions to get active instant invites.
- Requires manage_guild permissions to create templates.
- Requires manage_guild permissions to attach integrations.
- Requires manage_guild permissions to fetch integrations.
- Requires manage_emojis_and_stickers permissions to create stickers.
- Requires manage_emojis_and_stickers permissions to delete stickers.
- Requires manage_emojis permissions to create custom emojis.
- Requires manage_emojis permissions to delete emojis.
- Requires manage_roles permissions to create roles.
- New in version 2.1.
- Requires OAuth2 with proper scopes for functionality.
- This requires setting the enable_debug_events setting in the Client.
- If you are on Windows and don’t have ffprobe installed, use the fallback method
  to probe using ffmpeg instead.
- This requires Intents.presences to be enabled.
- Webhooks are now comparable and hashable.
- New in version 1.7.
- New in version 2.6.
- Requires permission to access guild features.
- Version 2.1 introduced new features for scheduled events and auto moderation.
- This API supports message interactions and sending messages.
- This client is recommended if you have surpassed at least 1000 guilds.
- Requires setting the `enable_debug_events` setting in the `Client`.
- Requires Intents.guilds to be enabled.
- Requires Intents.members to be enabled.
- Requires Intents.integrations to be enabled.
- Requires Intents.emojis_and_stickers to be enabled.
- Requires Intents.voice_states to be enabled.
- Requires Intents.bans to be enabled.
- Webhook cannot be used to make requests if token is None.
- You must have [`manage_channels`](#nextcord.Permissions.manage_channels "nextcord.Permissions.manage_channels")
  permission to use this.
- You must have [`create_instant_invite`](#nextcord.Permissions.create_instant_invite
  "nextcord.Permissions.create_instant_invite") permission to do this.
- You must have [`read_message_history`](#nextcord.Permissions.read_message_history
  "nextcord.Permissions.read_message_history") permissions to use this.
- Requires specific permissions to access certain endpoints.
- Member count requires Intents.members to be specified.
- Requires specific permissions for each endpoint.
- A client similar to Client except it handles the complications of sharding.
- This requires setting the `enable_debug_events` setting in the `Client`.
- If ffprobe is not installed on Windows, use the fallback method to probe using ffmpeg.
- This requires `Intents.webhooks` to be enabled.
- Requires setup of connected app in api
- Must be a maximum of 10 embeds.
- Must be a maximum of 3 stickers.
- New in version 1.4.
- Changed in version 2.1.
- New in version 2.2.
- You must have appropriate permissions to perform certain actions.
- It is not possible to forward messages through interactions.
- You must have the manage_messages permission to do this in a non-private channel
  context.
- Some properties may return None based on the user's status or settings.
- Represents a Discord role in a Guild.
- Represents a Discord thread.
- Supports multiple guild registrations.
- Rate limits apply per shard.
- This library requires ffmpeg or avconv executable in your path environment variable.
- Audio sources can be Opus encoded or must be 16-bit 48KHz stereo PCM.
- Requires setting up intents for specific events
- Requires setup of a Discord webhook.
- Represents a message sent from your webhook.
- You must have `manage_channels` permission to perform certain actions.
- Some methods may raise HTTPException for various reasons.
- This library represents a Discord attachment and asset.
- Attachments can be images, videos, or audio files.
- You must have the `manage_messages` permission to delete, pin, and unpin messages.
- You must have the `send_messages` permission to publish messages.
- You must have the `create_public_threads` permission to create threads.
- The approximate member count is available only when using fetch_guild with with_counts=True.
- Some features require specific intents to be enabled.
- This function is a coroutine.
- The category parameter is not supported in this function since categories cannot
  have categories.
- Requires manage_guild permission to fetch guild data.
- The token to continue the interaction is valid for 15 minutes.
- Represents a partial messageable to aid with working messageable channels when only
  a channel ID are present.
- This class is trimmed down and has no rich attributes.
- You must have read_message_history permissions to use history method.
- This API allows for managing channel permissions and sending messages.
- Represents a Discord guild voice channel.
- Requires manage_emojis_and_stickers permission to edit or delete stickers.
- A client similar to Client except it handles the complications of sharding for the
  user into a more manageable and transparent single process bot.
- Uses OAuth2 with installation parameters for permissions.
- On Windows, the .dll extension is not necessary.
- On Linux, the full extension is required to load the library.
- You must have the appropriate permissions to perform these actions.
- To retrieve members, Intents.members must be enabled.
- Fetching audit logs requires the view_audit_log permission.
- Requires setup of intents to access member count
- You cannot leave the guild that you own, you must delete it instead via delete().
- Tokens for interactions are valid for 15 minutes.
- You must have manage_emojis permission to create emojis.
- You must have manage_roles permission to create roles.
- You must have the read_message_history permission to use this.
- You need the manage_messages permission to remove all the reactions.
- Some properties may return None if unavailable.
- You must have `read_message_history` permissions to use the history API.
- Requires `manage_webhooks` permissions to create or fetch webhooks.
- You must have read_message_history permissions to use this.
- Requires manage_messages permission to delete messages.
- The channel’s permission overwrites are returned as a dictionary.
- Requires manage_webhooks permissions to create a webhook.
- Requires manage_messages permissions to delete messages.
- Defaults for max_age, max_uses, temporary, unique are 0, 0, False, True respectively.
- Represents a Discord guild stage channel.
- You must have the `manage_channels` permission to use this.
- Edits are no longer in-place, the newly edited channel is returned instead.
- You must have manage_emojis_and_stickers permission to edit or delete stickers.
- This client handles sharding for the user into a more manageable and transparent
  single process bot.
- Requires setting enable_debug_events in the Client.
- Webhook requires a valid authentication token to make requests.
- This API allows for sending messages, forwarding messages, and triggering typing
  indicators.
- Fetch members requires Intents.members to be enabled.
- Guild's NSFW level and premium tier are only available in version 2.0 and above.
- Requires Intents.members to be specified for accurate member count.
- The `category` parameter is not supported in create_category_channel since categories
  cannot have categories.
- Requires manage_guild permissions to access certain functions.
- The `image` parameter now accepts File, Attachment, and Asset.
- You must have manage_emojis permission to create or delete emojis.
- You must have manage_roles permission to create, edit or delete roles.
- You must have ban_members permission to ban users.
- This class is deprecated, use Message.interaction_metadata instead.
- Only applicable to stage channels.
- Creating the webhook requires permissions.
- You must have permissions to create and manage threads.
- You must have `send_messages` and `use_threads` to add a user to a public thread.
  If the thread is private then `send_messages` and either `use_private_threads` or
  `manage_messages` is required to add a user to the thread.
- Requires manage_channels permission to clone or edit channels.
- Requires manage_webhooks permission to create webhooks.
- Represents a stage instance of a stage channel in a guild.
- Requires manage_channels permission to use certain features.
- New features and changes introduced in version 2.0 and 3.0.
- The sticker’s new name must be at least 2 characters.
- You must have manage_channels permission to revoke invites.
- This intent is required to connect to voice.
- The random algorithm works by choosing a colour with a random hue but with maxed
  out saturation and value.
- The properties provided are two way. You can set and retrieve individual bits using
  the properties as if they were regular bools.
- Represents a Discord modal popup.
- The only items that are currently supported are TextInputs.
- Uses the Python logging module for logging diagnostic and errors.
- The default timeout is 60 seconds.
- The default timeout is 2 seconds.
- If this is set to True, the default, then the library uses the time to reset a rate
  limit bucket given by Discord.
- If this is set to False then your system clock is used to calculate how long to
  sleep for.
- Defaults to False.
- Defaults to True.
- Defaults to None.
- Bot accounts in more than 10 guilds are not allowed to create guilds.
- If no shard_count is provided, the library will use the Bot Gateway endpoint call
  to figure out how many shards to use.
- You must have the manage_channels permission to receive certain events.
- Intents.invites must be enabled to receive invite-related events.
- Requires setup of connected app in API
- You must have the manage_guild permission to edit the guild.
- You cannot leave the guild that you own, you must delete it instead.
- DM channels are not resolved since there is no data to complete them.
- Requires various permissions for different endpoints.
- Must be a maximum of 10 files to upload.
- Must be a maximum of 3 stickers to upload.
- Represents a Discord guild forum channel.
- 'New in version 2.0: Includes support for invites and widgets.'
- Currently, this requires opting in explicitly via the developer portal as well.
- Bots in over 100 guilds will need to apply to Discord for verification.
- Uses slash commands for interaction.
- If you want to use unicode emoji, you must pass a valid unicode code point in a
  string.
- You cannot send ':thumbsup:' style shorthands.
- Uses async/await for coroutine handling.
- Uses OAuth2 with refresh token — requires setup of connected app in Discord
- nextcord works with Python 3.12 or higher
- It is strongly recommended that the logging module is configured, as no errors or
  warnings will be output if it is not set up.
- This is recommended, especially at verbose levels such as INFO and DEBUG, as there
  are a lot of events logged and it would clog the stdout of your program.
- Bot token should never be shared as it is essentially the bot's password.
- Enabling privileged intents when your bot is in over 100 guilds requires going through
  bot verification.
- Even if you enable intents through the developer portal, you still have to enable
  the intents through code as well.
- To enable privileged intents, you must go to the developer portal and manually enable
  it.
- Members and presences will no longer be retrieved due to an API change.
- Fetching offline members is disabled if the members intent is not enabled.
- Uses OAuth2 with authorization code flow.
- Some endpoints may have rate limits.
- The `Member.roles` cache introduced in v1.3 was reverted due to issues caused.
- Webhook objects are now comparable and hashable.
- Some more API requests got a `reason` parameter for audit logs.
- Uses OAuth2 with refresh token — requires setup of connected app in discord
- Rate limits are in place and should be adhered to.
- The sharded client does not support user accounts.
- The concept of a default channel was removed from Discord.
- Certain events have gone through some changes.
- Python 3.8 or newer is required.
- User accounts (userbots) are no longer supported.
- Changing to v2.0 represents different breaking changes we needed to make.
errors:
- '401 Unauthorized: Invalid token or missing scopes.'
- '403 Forbidden: Insufficient permissions to access the resource.'
- 'ClientException: The subprocess failed to be created.'
- 'ClientException: You are not connected.'
- 'opus.OpusError: Encoding the data failed.'
- 'AttributeError: Invalid probe method, must be ''native'' or ''fallback''.'
- 'TypeError: Invalid value for probe parameter, must be str or a callable.'
- 'HTTPException: Sending the message failed.'
- 'NotFound: This webhook was not found or has expired.'
- 'Forbidden: The authorization token for the webhook is incorrect.'
- 'InvalidArgument: You specified both `embed` and `embeds` or `file` and `files`.'
- 'ValueError: The length of `embeds` was invalid.'
- 'HTTPException: Could not fetch the webhook'
- 'NotFound: Could not find the webhook by this ID'
- 'InvalidArgument: This webhook does not have a token associated with it.'
- 'HTTPException: Editing the message failed.'
- 'Forbidden: Edited a message that is not yours.'
- 'InvalidArgument: You specified both embed and embeds or file and files.'
- 'ValueError: The length of embeds was invalid.'
- 'InvalidArgument: There was no token associated with this webhook.'
- 'NotFound: This webhook was not found.'
- 'Forbidden: You do not have proper permissions to delete the channel.'
- 'NotFound: The channel was not found or was already deleted.'
- 'HTTPException: Deleting the channel failed.'
- 'Forbidden: You do not have permissions to get channel message history.'
- 'HTTPException: The request to get message history failed.'
- 'HTTPException: Editing the webhook failed.'
- 'NotFound: This webhook does not exist.'
- 'InvalidArgument: This webhook does not have a token associated with it or it tried
  editing a channel without authentication.'
- 'NotFound: The specified message was not found.'
- 'HTTPException: Sending the message failed'
- 'Forbidden: You do not have the proper permissions to send the message'
- 'InvalidArgument: The files list is not of the appropriate size'
- 'Forbidden: You are not allowed to edit/delete stickers.'
- 'HTTPException: An error occurred editing/deleting the sticker.'
- 'Forbidden: You do not have the permissions required to get a message.'
- 'HTTPException: Retrieving the message failed.'
- 'HTTPException: Editing the message failed'
- 'Forbidden: Edited a message that is not yours'
- 'InvalidArgument: You specified both embed and embeds or file and files'
- 'ValueError: The length of embeds was invalid'
- 'InvalidArgument: There was no token associated with this webhook'
- 'Forbidden: You do not have the proper permissions to send the message.'
- 'InvalidArgument: The files list is not of the appropriate size.'
- 'InvalidArgument: The `files` list is not of the appropriate size, you specified
  both `file` and `files`, or you specified both `embed` and `embeds`, or the `reference`
  object is not a [`Message`](#nextcord.Message "nextcord.Message"), [`MessageReference`](#nextcord.MessageReference
  "nextcord.MessageReference") or [`PartialMessage`](#nextcord.PartialMessage "nextcord.PartialMessage")'
- 'Forbidden: You do not have the proper permissions to publish this message.'
- 'HTTPException: Publishing the message failed.'
- Invalid probe method, must be 'native' or 'fallback'.
- Invalid value for probe parameter, must be str or a callable.
- 'NotFound: The specified webhook was not found.'
- 'Forbidden: You do not have permissions to edit channel specific permissions.'
- 'HTTPException: Editing channel specific permissions failed.'
- 'NotFound: The role or member being edited is not part of the guild.'
- 'InvalidArgument: The overwrite parameter invalid or the target type was not Role
  or Member.'
- 'Forbidden: You do not have the proper permissions to create this channel.'
- 'HTTPException: Creating the channel failed.'
- 'InvalidArgument: An invalid position was given or a bad mix of arguments were passed.'
- 'Forbidden: You do not have permissions to move the channel.'
- 'HTTPException: Moving the channel failed.'
- 'HTTPException: Invite creation failed.'
- 'NotFound: The channel that was passed is a category or an invalid channel.'
- 'Forbidden: You do not have proper permissions to get the information.'
- 'DiscordException: There was no internal connection state.'
- 'HTTPException: Downloading the asset failed.'
- 'NotFound: The asset was deleted.'
- 'HTTPException: Getting the users for the reaction failed'
- 'Forbidden: You do not have the proper permissions to remove the reaction'
- 'NotFound: The user you specified, or the reaction’s message was not found'
- 'InvalidArgument: The emoji parameter is invalid'
- 'HTTPException: Leaving the guild failed.'
- 'HTTPException: Deleting the guild failed.'
- 'Forbidden: You do not have permissions to delete the guild.'
- 'Forbidden: You do not have permissions to edit the guild.'
- 'HTTPException: Editing the guild failed.'
- 'InvalidArgument: The image format passed in to icon is invalid. It must be PNG
  or JPG.'
- 'Forbidden: You do not have access to the guild.'
- 'HTTPException: Fetching the member failed.'
- 'NotFound: This user is not banned.'
- 'HTTPException: An error occurred while fetching the information.'
- 'InvalidData: An unknown channel type was received from Discord.'
- 'HTTPException: Retrieving the channel failed.'
- 'NotFound: Invalid Channel ID.'
- 'Forbidden: You do not have permissions to prune members.'
- 'HTTPException: An error occurred while pruning members.'
- 'InvalidArgument: An integer was not passed for days.'
- 'Forbidden: You do not have permission to create auto moderation rules.'
- 'HTTPException: Creating the rule failed.'
- 'InvalidArgument: An invalid type was passed for an argument.'
- '400 Bad Request: Check the request parameters.'
- '401 Unauthorized: Recheck OAuth token.'
- '404 Not Found: Resource does not exist.'
- 'InvalidArgument: The files list is not of the appropriate size, you specified both
  file and files, or you specified both embed and embeds, or the reference object
  is not a Message, MessageReference or PartialMessage'
- 'InvalidArgument: The `files` list is not of the appropriate size.'
- 'InvalidArgument: The permission overwrite information is not in proper form.'
- 'HTTPException: Getting the events failed.'
- 'Forbidden: You do not have permission to fetch the auto moderation rules.'
- '400 Bad Request: Invalid request parameters.'
- '401 Unauthorized: Invalid access token.'
- '404 Not Found: The requested resource was not found.'
- 'Forbidden: You do not have permissions to add these roles.'
- 'HTTPException: Adding roles failed.'
- 'HTTPException: Forwarding/sending the message failed.'
- 'GatewayNotFound: If the gateway to connect to Discord is not found.'
- 'ConnectionClosed: The websocket connection has been terminated.'
- 'REQUEST_LIMIT_EXCEEDED: Throttle API calls or reduce frequency'
- 'QUERY_TIMEOUT: Break down filters or add selectivity'
- '401 Unauthorized: Recheck OAuth scopes or token expiration'
- '[**Forbidden**](#nextcord.Forbidden "nextcord.Forbidden") – You do not have proper
  permissions to delete the channel.'
- '[**NotFound**](#nextcord.NotFound "nextcord.NotFound") – The channel was not found
  or was already deleted.'
- '[**HTTPException**](#nextcord.HTTPException "nextcord.HTTPException") – Deleting
  the channel failed.'
- '[**HTTPException**](#nextcord.HTTPException "nextcord.HTTPException") – Invite
  creation failed.'
- '[**NotFound**](#nextcord.NotFound "nextcord.NotFound") – The channel that was passed
  is a category or an invalid channel.'
- '[**Forbidden**](#nextcord.Forbidden "nextcord.Forbidden") – You do not have permissions
  to move the channel.'
- '[**InvalidArgument**](#nextcord.InvalidArgument "nextcord.InvalidArgument") – An
  invalid position was given or a bad mix of arguments were passed.'
- 'HTTPException: An error occurred with the HTTP request.'
- 'Forbidden: You do not have the proper permissions to perform this action.'
- 'NotFound: The specified resource was not found.'
- 'HTTPException: Getting the users for the reaction failed.'
- 'Forbidden: You do not have the proper permissions to remove the reaction.'
- 'NotFound: The user you specified, or the reaction’s message was not found.'
- 'Forbidden: You do not have the proper permissions'
- 'HTTPException: An error occurred while processing the request'
- 'InvalidArgument: The argument provided is not valid'
- 'HTTPException: An error occurred while fetching data.'
- 'Forbidden: You do not have permission to perform this action.'
- 'asyncio.TimeoutError: The query timed out waiting for the members.'
- 'ValueError: Invalid parameters were passed to the function'
- 'ClientException: The presences intent is not enabled.'
- 'NotFound: The interaction has expired.'
- Recursion possible if bot replies to its own messages.
- 'InteractionResponded: This interaction has already been responded to before.'
- 'Forbidden: You do not have the proper permissions.'
- 'HTTPException: An error occurred.'
- Forbidden – You do not have permissions to add these roles.
- HTTPException – Adding roles failed.
- Forbidden – You do not have permissions to remove these roles.
- HTTPException – Removing the roles failed.
- NotFound – The specified message was not found.
- Forbidden – You do not have the permissions required to get a message.
- HTTPException – Retrieving the message failed.
- HTTPException – Forwarding/sending the message failed.
- Forbidden – You do not have the proper permissions to send the message.
- InvalidArgument – The files list is not of the appropriate size, you specified both
  file and files, or you specified both embed and embeds, or the reference object
  is not a Message, MessageReference or PartialMessage
- 'Forbidden: You do not have permissions to change the role.'
- 'HTTPException: Editing the role failed.'
- 'InvalidArgument: An invalid position was given or the default role was asked to
  be moved.'
- 'HTTPException: Retrieving the pinned messages failed.'
- '400 Bad Request: Check request parameters.'
- '401 Unauthorized: Invalid token.'
- 'Forbidden: You do not have proper permissions for this action.'
- 'NotFound: The requested resource was not found.'
- 'HTTPException: An error occurred while processing the request.'
- 'InvalidArgument: The specified files list is not of the appropriate size.'
- 'Forbidden: You do not have proper permissions.'
- 'NotFound: The message or channel was not found or deleted.'
- 'HTTPException: The action failed.'
- '403 Forbidden: You do not have permissions to access this resource.'
- '404 NotFound: The requested resource could not be found.'
- 'Forbidden: You are not allowed to create emojis.'
- 'HTTPException: An error occurred creating an emoji.'
- 'Forbidden: You are not allowed to delete emojis.'
- 'HTTPException: An error occurred deleting the emoji.'
- 'HTTPException: Retrieving the roles failed.'
- 'HTTPException: Retrieving the role failed.'
- 'Forbidden: You do not have permissions to create the role.'
- 'HTTPException: Creating the role failed.'
- 'Forbidden: You do not have permissions to move the roles.'
- 'HTTPException: Moving the roles failed.'
- 'Forbidden: You do not have the proper permissions to kick.'
- 'HTTPException: Kicking failed.'
- 'Forbidden: You do not have the proper permissions to ban.'
- 'HTTPException: Banning failed.'
- 'Forbidden: You do not have the proper permissions to bulk ban.'
- 'HTTPException: Bulk banning failed.'
- 'Forbidden: You do not have permission to get this.'
- 'HTTPException: Retrieving the vanity invite failed.'
- 'Forbidden: The widget for this guild is disabled.'
- 'HTTPException: Retrieving the widget failed.'
- 'Forbidden: You do not have permission to edit the widget.'
- 'HTTPException: Editing the widget failed.'
- 'ClientException: The members intent is not enabled.'
- 'Forbidden: You do not have permissions'
- 'HTTPException: Operation failed'
- 'InvalidArgument: The parameters provided are not valid.'
- 'Forbidden: You do not have permissions to add the user to the thread.'
- 'HTTPException: Adding the user to the thread failed.'
- 'Forbidden: You do not have permissions to remove the user from the thread.'
- 'HTTPException: Removing the user from the thread failed.'
- 'HTTPException: Retrieving the members failed.'
- 'Forbidden: You do not have permissions to delete this thread.'
- 'HTTPException: Deleting the thread failed.'
- 'Forbidden: You don’t have permissions to get the webhooks.'
- 'asyncio.TimeoutError: Could not connect to the voice channel in time.'
- 'ClientException: You are already connected to a voice channel.'
- 'OpusNotLoaded: The opus library has not been loaded.'
- 'Forbidden: You are not allowed to edit or delete stickers.'
- 'HTTPException: An error occurred editing or deleting the sticker.'
- Your bot’s own messages and private messages are sent through this event. This can
  lead cases of ‘recursion’ depending on how your bot was programmed.
- 'Forbidden: You do not have permissions to perform this action.'
- 'NotFound: The channel was not found.'
- '403 Forbidden: You do not have the proper permissions to create this channel.'
- 'HTTPException: Deferring the interaction failed.'
- '403 Forbidden: You are not allowed to create emojis.'
- '403 Forbidden: You do not have permissions to create the role.'
- 'Forbidden: You do not have the proper permissions to react to the message.'
- 'NotFound: The emoji you specified was not found.'
- 'InvalidArgument: The parameters provided are invalid.'
- 'HTTPException: The operation failed.'
- 'InvalidArgument: The `files` list is not of the appropriate size, you specified
  both `file` and `files`, or you specified both `embed` and `embeds`, or the `reference`
  object is not a Message, MessageReference or PartialMessage.'
- 'Forbidden: You do not have permissions to edit the channel.'
- 'HTTPException: Editing the channel failed.'
- 'InvalidArgument: The provided arguments are not valid.'
- '404 Not Found: Check if the guild ID is correct.'
- '403 Forbidden: You do not have permission to access this guild.'
- 'Forbidden: You are not allowed to perform this action.'
- 'HTTPException: An error occurred during the action.'
- 'Forbidden: You do not have permissions to create a webhook.'
- 'HTTPException: Creating the webhook failed.'
- 'ClientException: The parent channel was not cached and returned None.'
- 'HTTPException: Invite creation failed'
- 'NotFound: The channel that was passed is a category or an invalid channel'
- 'Forbidden: You do not have proper permissions to delete the channel'
- 'InvalidArgument: If the `privacy_level` parameter is not the proper type.'
- 'Forbidden: You do not have permissions to edit the stage instance.'
- 'HTTPException: Editing a stage instance failed.'
- 'HTTPException: An error occurred while fetching the information'
- 'NotFound: The channel was not found or was already deleted'
- 'InvalidArgument: The files list is not of the appropriate size, you specified both
  file and files, or you specified both embed and embeds.'
- 'Forbidden: You do not have permissions to create a thread.'
- 'HTTPException: Starting the thread failed.'
- 'InvalidArgument: You cannot pass both embed and embeds parameters.'
- 'NotFound: The invite is invalid or expired.'
- 'HTTPException: An error occurred during the request.'
- 'Forbidden: You do not have proper permissions to delete the message.'
- 'NotFound: The message was deleted already'
- 'HTTPException: Deleting the message failed.'
- 'Forbidden: You do not have proper permissions'
- 'HTTPException: An error occurred'
- '403 Forbidden: You do not have permission to view this resource'
- '404 Not Found: The guild was not found'
- 'InvalidArgument: If the privacy_level parameter is not the proper type.'
- 'InvalidArgument: If position is less than 0 or greater than the number of channels,
  or if the permission overwrite information is not in proper form.'
- 'Forbidden: You do not have permission to edit this rule.'
- 'HTTPException: Editing the rule failed.'
- 'InvalidArgument: An incorrect type was passed.'
- Unauthorized
- Forbidden
- NotFound
- DiscordServerError
- Missing permissions to send message to that channel
- Rate limit of 120 requests per 60 seconds.
- 'DiscordServerError: Raise when reaching 503s repeatedly'
- '401 Unauthorized: Invalid token or missing credentials.'
- '429 Too Many Requests: Rate limit exceeded.'
- '401 Unauthorized: Check your authentication credentials.'
- '404 Not Found: The requested resource does not exist.'
auth_info:
  mentioned_objects:
  - OauthToken
  - AuthProvider
  - Webhook
  - Guild
  - TextChannel
  - WebhookType
  - PartialWebhookChannel
  - PartialWebhookGuild
  - Permissions
  - ApplicationIntegrationTypeConfig
  - AppInfo
  - PartialAppInfo
  - Team
  - TeamMember
  - VoiceClient
  - Intents.guilds
  - Intents.members
  - Intents.integrations
  - Intents.webhooks
  - Intents.presences
  - Intents.voice_states
  - Intents.bans
  - Intents.emojis_and_stickers
  - BaseApplicationCommand
  - Interaction
  - Intents
  - BaseActivity
  - Status
  - Client
  - Emoji
  - SyncWebhook
  - NamedCredential
client:
  base_url: https://discord.com/api/v10
  auth:
    type: oauth2
    flow: authorization_code
    token_url: https://discord.com/api/oauth2/token
    client_id: '{{ dlt.secrets[''discord_client_id''] }}'
    client_secret: '{{ dlt.secrets[''discord_client_secret''] }}'
    location: header
    header_name: Authorization
  headers:
    Accept: application/json
source_metadata: null
