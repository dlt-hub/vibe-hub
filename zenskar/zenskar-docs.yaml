resources:
- name: Auth0
  endpoint:
    path: /data-source-connector-for-auth0
    method: GET
- name: AWS Athena
  endpoint:
    path: /data-source-connector-for-aws-athena
    method: GET
- name: BigQuery
  endpoint:
    path: /data-source-connector-for-bigquery
    method: GET
- name: ClickHouse
  endpoint:
    path: /data-source-connector-for-clickhouse
    method: GET
- name: CockroachDB
  endpoint:
    path: /data-source-connector-for-cockroachdb
    method: GET
- name: Databricks Lakehouse
  endpoint:
    path: /databricks-lakehouse
    method: GET
- name: Google Sheets
  endpoint:
    path: /data-source-connector-for-google-sheets
    method: GET
- name: Looker
  endpoint:
    path: /looker
    method: GET
- name: Metabase
  endpoint:
    path: /data-source-connector-for-metabase
    method: GET
- name: MongoDB
  endpoint:
    path: /data-source-connector-for-mongodb
    method: GET
- name: MySQL
  endpoint:
    path: /data-source-connector-for-mysql
    method: GET
- name: PostgreSQL
  endpoint:
    path: /data-source-connector-for-postgresql
    method: GET
- name: QuickBooks
  endpoint:
    path: /data-source-connector-for-quickbooks
    method: GET
- name: Redshift
  endpoint:
    path: /data-source-connector-for-redshift
    method: GET
- name: Shopify
  endpoint:
    path: /data-source-connector-for-shopify
    method: GET
- name: Snowflake
  endpoint:
    path: /data-source-connector-for-snowflake
    method: GET
- name: accounts
  endpoint:
    path: /reference/get-accounts
    method: GET
- name: contacts
  endpoint:
    path: /reference/list-contacts
    method: GET
- name: jobs
  endpoint:
    path: /reference/list-jobs
    method: GET
- name: payments
  endpoint:
    path: /reference/get-invoice-payments
    method: GET
- name: contacts
  endpoint:
    path: /reference/list-contacts
    method: GET
- name: customers
  endpoint:
    path: /reference/list-customers-with-filtering-and-pagination
    method: GET
- name: invoices
  endpoint:
    path: /reference/list-invoices
    method: GET
- name: payments
  endpoint:
    path: /reference/get-invoice-payments
    method: GET
- name: jobs
  endpoint:
    path: /reference/list-jobs
    method: GET
- name: products
  endpoint:
    path: /reference/list-products
    method: GET
- name: tags
  endpoint:
    path: /reference/list-tags
    method: GET
- name: usage_events
  endpoint:
    path: /reference/list-usage-events
    method: GET
- name: checkout_sessions
  endpoint:
    path: /reference/list-checkout-sessions-with-filtering-and-pagination
    method: GET
- name: contacts
  endpoint:
    path: /reference/contacts
    method: GET
- name: accounts
  endpoint:
    path: /reference/get-accounts
    method: GET
- name: invoices
  endpoint:
    path: /reference/list-invoices
    method: GET
- name: jobs
  endpoint:
    path: /reference/list-jobs
    method: GET
- name: payments
  endpoint:
    path: /reference/get-payments
    method: GET
- name: products
  endpoint:
    path: /reference/list-products
    method: GET
- name: chart_of_accounts
  endpoint:
    path: /accounting_new/chart_of_accounts
    method: GET
- name: account
  endpoint:
    path: /accounting_new/accounts
    method: POST
- name: accounts
  endpoint:
    path: /accounting_new/accounts
    method: GET
- name: create_close_date
  endpoint:
    path: /accounting_new/close_date
    method: POST
- name: close_date
  endpoint:
    path: /accounting_new/close_date
    method: GET
- name: update_close_date
  endpoint:
    path: /accounting_new/close_date
    method: PATCH
- name: journal_entry
  endpoint:
    path: /accounting_new/journal_entry
    method: POST
- name: journal_entry
  endpoint:
    path: /accounting_new/journal_entry/{journal_entry_id}
    method: PUT
- name: journal_entry
  endpoint:
    path: /accounting_new/journal_entry/{journal_entry_id}
    method: GET
- name: income_statement
  endpoint:
    path: /income_statement/v2
    method: GET
- name: billable_metrics
  endpoint:
    path: /aggregates
    method: GET
- name: billable_metric
  endpoint:
    path: /aggregates
    method: POST
- name: delete_aggregate
  endpoint:
    path: /aggregates/{aggregate_id}
    method: DELETE
- name: credit_note
  endpoint:
    path: /credit_notes
    method: GET
- name: custom_attribute_definition
  endpoint:
    path: /custom_attributes/{definition_id}
    method: PATCH
- name: custom_attribute_definition
  endpoint:
    path: /custom_attributes/{definition_id}
    method: DELETE
- name: customer
  endpoint:
    path: /customers
    method: POST
- name: customer
  endpoint:
    path: /customers/{customer_id}
    method: PATCH
- name: customers
  endpoint:
    path: /customers/{customer_id}
    method: DELETE
- name: list_customers_with_filtering_and_pagination
  endpoint:
    path: /reference/list-customers-with-filtering-and-pagination
    method: GET
- name: get_customer_by_ID
  endpoint:
    path: /reference/get-customer-by-id
    method: GET
- name: customer_connector
  endpoint:
    path: /customers/{customer_id}/connector
    method: PATCH
- name: payment_method
  endpoint:
    path: /customers/{customer_id}/payment_methods
    method: POST
- name: delete_connector
  endpoint:
    path: /customers/connector/{customer_id}
    method: DELETE
- name: customer_relationships
  endpoint:
    path: /customers/{customer_id}/relationships
    method: POST
- name: customers
  endpoint:
    path: /customers
    method: GET
    data_selector: customers
- name: customer
  endpoint:
    path: /customers/{customer_id}
    method: GET
- name: customer_connector_details
  endpoint:
    path: /customers/{customer_id}/connector/{connector_name}
    method: GET
- name: data_source_connectors
  endpoint:
    path: /datasources
    method: GET
    data_selector: results
    params:
      order: -created_at
- name: data_source_connector
  endpoint:
    path: /datasources
    method: GET
- name: data_source_connector
  endpoint:
    path: /datasources
    method: POST
- name: data-source
  endpoint:
    path: /datasources/{datasource_id}
    method: GET
- name: data-source connector
  endpoint:
    path: /datasources/{datasource_id}
    method: PATCH
- name: entitlement
  endpoint:
    path: /entitlements
    method: POST
- name: entitlement
  endpoint:
    path: /entitlements/{entitlement_id}
    method: GET
- name: entitlement
  endpoint:
    path: /entitlements/{entitlement_id}
    method: PATCH
- name: entitlement
  endpoint:
    path: /entitlements/{entitlement_id}
    method: DELETE
- name: entitlement_customer
  endpoint:
    path: /entitlements/{entitlement_id}/customer
    method: POST
- name: entitlements_for_customer
  endpoint:
    path: /entitlements/{entitlement_id}/customer/{customer_id}
    method: GET
- name: total_customer_entitlements
  endpoint:
    path: /entitlements/{entitlement_id}/customer/{customer_id}/total
    method: GET
- name: customer_entitlements
  endpoint:
    path: /entitlements/customer/{customer_id}
    method: GET
- name: unique_entitlements_for_customer
  endpoint:
    path: /entitlements/customer/unique/{customer_id}
    method: GET
- name: get_entitlement_customer
  endpoint:
    path: /entitlements/{entitlement_id}/customer/{customer_id}/{ec_id}
    method: GET
- name: update_customer_entitlement
  endpoint:
    path: /entitlements/{entitlement_id}/customer/{customer_id}/{ec_id}
    method: PATCH
- name: delete_customer_entitlement
  endpoint:
    path: /entitlements/{entitlement_id}/customer/{customer_id}/{ec_id}
    method: DELETE
- name: entitlement
  endpoint:
    path: /entitlements/entitlement_id/customer/customer_id/ec_id
    method: DELETE
- name: customer_entitlement
  endpoint:
    path: /entitlements/entitlement_customer/{ec_id}
    method: GET
    data_selector: object
    params:
      ec_id: uuid
- name: customer_entitlement_balances
  endpoint:
    path: /entitlements/customers_balances
    method: GET
    data_selector: results
    params: {}
- name: customer_entitlement_balances
  endpoint:
    path: /entitlements/customers_balances
    method: GET
- name: invoices
  endpoint:
    path: /invoices
    method: GET
    data_selector: results
    params: {}
- name: invoices
  endpoint:
    path: /invoices
    method: GET
- name: invoice
  endpoint:
    path: /invoices/{invoice_id}
    method: GET
- name: invoices
  endpoint:
    path: /invoices/invoice_id
    method: GET
- name: invoice
  endpoint:
    path: /invoices/external_id/external_id
    method: GET
- name: approve_invoice
  endpoint:
    path: /invoices/{invoice_id}/approve
    method: PATCH
- name: invoice_line_items
  endpoint:
    path: /invoices/{invoice_id}/line_items
    method: GET
- name: void_invoice
  endpoint:
    path: /invoices/{invoice_id}/void
    method: PATCH
- name: create_credit_note
  endpoint:
    path: /invoices/{invoice_id}/create_credit_note
    method: PATCH
- name: invoice
  endpoint:
    path: /invoices/invoice_id/create_credit_note
    method: PATCH
- name: jobs
  endpoint:
    path: /jobs
    method: GET
    data_selector: results
    params: {}
- name: jobs
  endpoint:
    path: /jobs
    method: GET
- name: job
  endpoint:
    path: /jobs/{job_id}
    method: GET
- name: jobs
  endpoint:
    path: /jobs
    method: GET
    data_selector: results
    params:
      limit: 10
      order: -created_at
- name: jobs
  endpoint:
    path: /jobs/job_id
    method: GET
- name: jobs
  endpoint:
    path: /jobs
    method: GET
- name: job
  endpoint:
    path: /jobs/{job_id}
    method: GET
- name: job_outcomes
  endpoint:
    path: /jobs/joboutcomes/logs
    method: GET
- name: jobs
  endpoint:
    path: /jobs/job_id
    method: GET
- name: job_outcomes
  endpoint:
    path: /jobs/{job_id}/logs
    method: GET
- name: job_outcomes
  endpoint:
    path: /jobs/joboutcomes/logs
    method: GET
- name: payment
  endpoint:
    path: /payments/{payment_id}
    method: GET
- name: job_outcomes
  endpoint:
    path: /jobs/{job_id}/logs
    method: GET
- name: payments
  endpoint:
    path: /payments/{payment_id}
    method: PATCH
- name: payment
  endpoint:
    path: /payments/{payment_id}
    method: GET
    data_selector: payment_details
- name: delete_manual_payment
  endpoint:
    path: /payments/{payment_id}
    method: DELETE
- name: payments
  endpoint:
    path: /payments/{payment_id}
    method: PATCH
- name: payments
  endpoint:
    path: /payments
    method: GET
- name: delete_manual_payment
  endpoint:
    path: /payments/{payment_id}
    method: DELETE
- name: product_pricings
  endpoint:
    path: /reference/get-product-pricings
    method: GET
- name: payments
  endpoint:
    path: /payments
    method: GET
    data_selector: payments
- name: product_pricings
  endpoint:
    path: /products/{product_id}/pricing
    method: GET
- name: product_pricing
  endpoint:
    path: /reference/get-product-pricings
    method: GET
- name: product_pricings
  endpoint:
    path: /products/{product_id}/pricing
    method: GET
- name: invoice_payments
  endpoint:
    path: /payments/invoice/{invoice_id}
    method: GET
- name: invoice_payments
  endpoint:
    path: /payments/invoice/{invoice_id}
    method: GET
- name: plans
  endpoint:
    path: /plans
    method: GET
- name: plans
  endpoint:
    path: /plans
    method: GET
- name: products
  endpoint:
    path: /products
    method: GET
- name: products
  endpoint:
    path: /products
    method: GET
- name: tags
  endpoint:
    path: /tags/{holder}/{item_id}
    method: GET
- name: tags
  endpoint:
    path: /tags/{holder}/{item_id}
    method: GET
- name: usage_events
  endpoint:
    path: /rawmetrics
    method: GET
- name: usage_events
  endpoint:
    path: /rawmetrics
    method: GET
- name: checkout_session
  endpoint:
    path: /checkout
    method: GET
    data_selector: checkout_sessions
    params:
      incremental: created_at
- name: checkout_session
  endpoint:
    path: /checkout
    method: GET
    data_selector: checkout_sessions
    params: {}
- name: customer
  endpoint:
    path: /api/customers
    method: POST
    data_selector: customer
    params: {}
- name: compute_events
  endpoint:
    path: /usage/compute_events
    method: POST
    data_selector: data
    params: {}
- name: storage_events
  endpoint:
    path: /usage/storage_events
    method: POST
    data_selector: data
    params: {}
- name: compute_events
  endpoint:
    path: /compute_events
    method: GET
    data_selector: records
- name: storage_events
  endpoint:
    path: /storage_events
    method: GET
    data_selector: records
- name: contract
  endpoint:
    path: /api/v1/contracts
    method: POST
    data_selector: data
    params: {}
- name: product
  endpoint:
    path: /api/v1/products
    method: POST
    data_selector: data
    params: {}
- name: invoice
  endpoint:
    path: /generate-invoice
    method: POST
    data_selector: invoice_details
- name: Auth0
  endpoint:
    path: /docs/data-source-connector-for-auth0
    method: GET
- name: AWS Athena
  endpoint:
    path: /docs/data-source-connector-for-aws-athena
    method: GET
- name: BigQuery
  endpoint:
    path: /docs/data-source-connector-for-bigquery
    method: GET
- name: ClickHouse
  endpoint:
    path: /docs/data-source-connector-for-clickhouse
    method: GET
- name: CockroachDB
  endpoint:
    path: /docs/data-source-connector-for-cockroachdb
    method: GET
- name: Databricks Lakehouse
  endpoint:
    path: /docs/databricks-lakehouse
    method: GET
- name: Google Sheets
  endpoint:
    path: /docs/data-source-connector-for-google-sheets
    method: GET
- name: Looker
  endpoint:
    path: /docs/looker
    method: GET
- name: Metabase
  endpoint:
    path: /docs/data-source-connector-for-metabase
    method: GET
- name: MongoDB
  endpoint:
    path: /docs/data-source-connector-for-mongodb
    method: GET
- name: MySQL
  endpoint:
    path: /docs/data-source-connector-for-mysql
    method: GET
- name: PostgreSQL
  endpoint:
    path: /docs/data-source-connector-for-postgresql
    method: GET
- name: QuickBooks
  endpoint:
    path: /docs/data-source-connector-for-quickbooks
    method: GET
- name: Redshift
  endpoint:
    path: /docs/data-source-connector-for-redshift
    method: GET
- name: Shopify
  endpoint:
    path: /docs/data-source-connector-for-shopify
    method: GET
- name: Snowflake
  endpoint:
    path: /docs/data-source-connector-for-snowflake
    method: GET
- name: customer
  endpoint:
    path: /customers
    method: POST
    data_selector: customer
    params: {}
- name: customers
  endpoint:
    path: /reference/create-customer
    method: POST
    data_selector: customers
    params: {}
- name: contracts
  endpoint:
    path: /docs/contracts
    method: POST
    data_selector: contracts
    params: {}
- name: usage_events
  endpoint:
    path: /reference/create-usage-event
    method: POST
    data_selector: usage_events
    params: {}
- name: invoices
  endpoint:
    path: /docs/invoices-explainer
    method: POST
    data_selector: invoices
    params: {}
- name: revenue_recognition
  endpoint:
    path: /docs/revenue-recognition
    method: POST
    data_selector: revenue_recognition
    params: {}
- name: receivables
  endpoint:
    path: /docs/receivables
    method: POST
    data_selector: receivables
    params: {}
- name: entitlements
  endpoint:
    path: /docs/entitlements
    method: POST
    data_selector: entitlements
    params: {}
- name: analytics
  endpoint:
    path: /docs/analytics-reference
    method: GET
    data_selector: analytics
    params: {}
- name: compute_events
  endpoint:
    path: /usage/compute_events
    method: POST
    data_selector: data
    params: {}
- name: storage_events
  endpoint:
    path: /usage/storage_events
    method: POST
    data_selector: data
    params: {}
- name: compute_events
  endpoint:
    data_selector: cpu_hours_consumed
- name: storage_events
  endpoint:
    data_selector: storage_gb_month
- name: usage_events
  endpoint:
    path: /api/v1/usage_events
    method: POST
    data_selector: data
    params: {}
- name: contracts
  endpoint:
    path: /api/v1/contracts
    method: GET
    data_selector: data
    params: {}
- name: customers
  endpoint:
    path: /reference/create-customer
    method: POST
- name: usage_data
  endpoint:
    path: /reference/create-usage-event
    method: POST
- name: contracts
  endpoint:
    path: /reference/create-contract
    method: POST
- name: invoices
  endpoint:
    path: /api/invoices
    method: POST
    data_selector: invoices
    params: {}
- name: payments
  endpoint:
    path: /api/payments
    method: POST
    data_selector: payments
    params: {}
- name: contract
  endpoint:
    path: /contracts
    method: POST
    data_selector: contract
    params:
      customer: ACME Inc.
      contract_name: ACME Inc. Direct Billing Contract
      contract_period_start: July 01, 2025
      contract_period_end: June 30, 2026
      start_billing_cycle_on: July 01, 2025
      currency: USD
      contract_renewal_policy: don't renew automatically
- name: compute_usage_product
  endpoint:
    path: /products
    method: POST
    data_selector: product
    params:
      product_name: Compute Usage
      pricing_model: per unit
      currency: USD
      price: 0.05
      usage: Metered
      billable_metric: Total CPU Hours
      unit: per CPU hour
      billing_cadence: recurring
      billing_cadence_frequency: every 1 month
- name: storage_usage_product
  endpoint:
    path: /products
    method: POST
    data_selector: product
    params:
      product_name: Storage Usage
      pricing_model: per unit
      currency: USD
      price: 0.05
      usage: Metered
      billable_metric: Total Storage GB-Months
      unit: per GB-Month
      billing_cadence: recurring
      billing_cadence_frequency: every 1 month
- name: invoice
  endpoint:
    path: /invoices/generate
    method: POST
    data_selector: invoice
    params: {}
- name: plans
  endpoint:
    path: /api/plans
    method: GET
    data_selector: data
    params: {}
- name: customers
  endpoint:
    path: /reference/create-customer
    method: POST
- name: usage_data
  endpoint:
    path: /reference/create-usage-event
    method: POST
- name: contracts
  endpoint:
    path: /reference/create-contract
    method: POST
- name: products
  endpoint:
    path: /api/products
    method: GET
    data_selector: products
- name: invoices
  endpoint:
    path: /invoices
    method: POST
    data_selector: data
- name: payments
  endpoint:
    path: /payments
    method: POST
    data_selector: data
- name: usage_event
  endpoint:
    path: /usage/event
    method: POST
    data_selector: events
    params: {}
- name: plan
  endpoint:
    path: /api/v1/plans
    method: GET
    data_selector: plans
    params: {}
- name: usage_event
  endpoint:
    path: /api/v1/usage_events
    method: POST
    data_selector: data
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: billable_metrics
  endpoint:
    path: /billable_metrics
    method: GET
    data_selector: records
- name: revenue_distribution_methods
  endpoint:
    path: /docs/revenue-distribution-methods
    method: GET
    data_selector: methods
- name: revenue_redistribution_methods
  endpoint:
    path: /docs/revenue-redistribution-methods
    method: GET
    data_selector: methods
- name: Performance obligation policies
  endpoint:
    path: /performance-obligation-policies
    method: GET
    data_selector: policies
    params: {}
- name: performance_obligation_policies
  endpoint:
    path: /performance-obligation-policies
    method: GET
    data_selector: policies
    params: {}
- name: invoices
  endpoint:
    path: /api/v1/invoices
    method: GET
    data_selector: data
    params: {}
- name: payments
  endpoint:
    path: /api/v1/payments
    method: GET
    data_selector: data
    params: {}
- name: customers
  endpoint:
    path: /api/v1/customers
    method: GET
    data_selector: data
    params: {}
- name: contracts
  endpoint:
    path: /api/v1/contracts
    method: GET
    data_selector: data
    params: {}
- name: products
  endpoint:
    path: /api/v1/products
    method: GET
    data_selector: data
    params: {}
- name: invoices
  endpoint:
    path: /invoices
    method: GET
    data_selector: records
- name: payments
  endpoint:
    path: /payments
    method: GET
    data_selector: records
- name: customers
  endpoint:
    path: /customers
    method: GET
    data_selector: records
- name: contracts
  endpoint:
    path: /contracts
    method: GET
    data_selector: records
- name: products
  endpoint:
    path: /products
    method: GET
    data_selector: records
- name: customers
  endpoint:
    path: /reference/get-customers-in-paginated-form
    method: GET
- name: create_customer
  endpoint:
    path: /update/reference/create-customer
    method: POST
- name: customers
  endpoint:
    path: /reference/get-customers-in-paginated-form
    method: GET
    data_selector: customers
- name: usage_events
  endpoint:
    path: /api/v1/usage_events
    method: POST
    data_selector: data
- name: usage_events
  endpoint:
    path: /api/v1/usage_events
    method: POST
    data_selector: data
    params: {}
- name: usage_events
  endpoint:
    path: /usage/compute_hours
    method: POST
    data_selector: data
- name: usage_event
  endpoint:
    path: /usage/compute_hours
    method: POST
    data_selector: null
    params: {}
- name: Auth0
  endpoint:
    path: /data-source-connector-for-auth0
    method: GET
- name: BigQuery
  endpoint:
    path: /data-source-connector-for-bigquery
    method: GET
- name: CockroachDB
  endpoint:
    path: /data-source-connector-for-cockroachdb
    method: GET
- name: Google Sheets
  endpoint:
    path: /data-source-connector-for-google-sheets
    method: GET
- name: Looker
  endpoint:
    path: /looker
    method: GET
- name: Metabase
  endpoint:
    path: /data-source-connector-for-metabase
    method: GET
- name: MongoDB
  endpoint:
    path: /data-source-connector-for-mongodb
    method: GET
- name: MySQL
  endpoint:
    path: /data-source-connector-for-mysql
    method: GET
- name: PostgreSQL
  endpoint:
    path: /data-source-connector-for-postgresql
    method: GET
- name: QuickBooks
  endpoint:
    path: /data-source-connector-for-quickbooks
    method: GET
- name: Snowflake
  endpoint:
    path: /data-source-connector-for-snowflake
    method: GET
- name: Redshift
  endpoint:
    path: /data-source-connector-for-redshift
    method: GET
- name: telephone_usage
  endpoint:
    path: /usage_events/telephone_usage
    method: GET
    data_selector: records
    params: {}
- name: billable_metrics
  endpoint:
    path: /billable_metrics
    method: POST
    data_selector: data
- name: telephone_usage
  endpoint:
    path: /usage/telephone
    method: GET
    data_selector: records
    params: {}
- name: raw_metrics
  endpoint:
    path: /usage/loan_demo
    method: POST
    data_selector: data
- name: aggregates
  endpoint:
    path: /aggregates
    method: GET
    data_selector: data
- name: usage_event
  endpoint:
    path: /usage/events
    method: POST
    data_selector: data
    params: {}
- name: usage_event
  endpoint:
    path: /api/usage_event
    method: POST
    data_selector: data
    params: {}
- name: deduction_event
  endpoint:
    path: /api/deduction_event
    method: POST
    data_selector: data
    params: {}
- name: raw_metric_loan
  endpoint:
    path: /usage/loan_demo
    method: POST
    data_selector: data
- name: contracts
  endpoint:
    path: /update/reference/create-contract
    method: POST
- name: usage_event
  endpoint:
    path: /api/usage-events
    method: POST
    data_selector: data
    params: {}
- name: contracts
  endpoint:
    path: /contracts
    method: POST
    data_selector: contracts
    params: {}
- name: features
  endpoint:
    path: /features
    method: POST
    data_selector: features
    params: {}
- name: products
  endpoint:
    path: /products
    method: POST
    data_selector: products
    params: {}
- name: usage_events
  endpoint:
    path: /usage/events
    method: POST
    data_selector: data
- name: deduction_events
  endpoint:
    path: /deduction/events
    method: POST
    data_selector: data
- name: contract
  endpoint:
    path: /update/reference/create-contract
    method: POST
- name: contracts
  endpoint:
    path: /contracts
    method: GET
    data_selector: records
- name: trial_phase
  endpoint:
    path: /api/trial_phase
    method: POST
    data_selector: trial_phases
    params: {}
- name: Products
  endpoint:
    path: /products
    method: GET
    data_selector: products
- name: trial_phase
  endpoint:
    path: /contracts/trial_phase
    method: POST
    data_selector: trialPhase
- name: products
  endpoint:
    path: /products
    method: GET
- name: discount
  endpoint:
    path: /feature/discount
    method: GET
    data_selector: discounts
- name: payment_terms
  endpoint:
    path: /docs/payment-terms
    method: GET
- name: currency_codes
  endpoint:
    path: /currency/codes
    method: GET
    data_selector: codes
    params: {}
- name: currency
  endpoint:
    path: /currency_codes
    method: GET
    data_selector: records
- name: service_fee
  endpoint:
    path: /service_fee
    method: GET
    data_selector: service_fee_data
    params: {}
- name: generate_invoice
  endpoint:
    path: /generate-invoice
    method: POST
    data_selector: invoice_data
    params: {}
- name: view_invoice
  endpoint:
    path: /view-invoice
    method: GET
    data_selector: invoice_details
    params: {}
- name: invoice_lifecycle
  endpoint:
    path: /docs/life-cycle-of-an-invoice
    method: GET
    data_selector: state_diagram
- name: invoices
  endpoint:
    path: /invoices
    method: GET
    data_selector: invoices
    params: {}
- name: invoice_lifecycle
  endpoint:
    path: /docs/life-cycle-of-an-invoice
    method: GET
    data_selector: state_diagram
    params: {}
- name: one_off_invoices
  endpoint:
    path: /invoices/one-off
    method: POST
    data_selector: invoice
    params: {}
- name: invoices
  endpoint:
    path: /api/invoices
    method: POST
    data_selector: invoice
    params: {}
- name: credit_notes
  endpoint:
    path: /credit-notes
    method: GET
    data_selector: credit_notes
    params: {}
- name: one_off_invoice
  endpoint:
    path: /invoices/create_one_off
    method: POST
    data_selector: invoice
    params: {}
- name: credit_note
  endpoint:
    path: /credit-notes
    method: GET
    data_selector: credit_notes
- name: payment_methods
  endpoint:
    path: /payment-methods
    method: GET
    data_selector: paymentMethods
- name: payment_gateway
  endpoint:
    path: /payment-gateway
    method: GET
    data_selector: paymentGateways
- name: revenue_recognition_rule
  endpoint:
    path: /create/revenue/recognition/rule
    method: POST
    data_selector: rule
    params: {}
- name: monitor
  endpoint:
    path: /monitor
    method: GET
    data_selector: monitors
    params: {}
- name: entitlements
  endpoint:
    path: /entitlements
    method: GET
    data_selector: entitlements
- name: email_templates
  endpoint:
    path: /communications/email_templates
    method: GET
- name: entitlements
  endpoint:
    path: /entitlements
    method: GET
    data_selector: entitlements
- name: email_templates
  endpoint:
    path: /communications/email-templates
    method: GET
    data_selector: templates
    params: {}
- name: email_alerts
  endpoint:
    path: /docs/email-alerts
    method: GET
    data_selector: alerts
    params: {}
- name: email_alerts
  endpoint:
    path: /docs/email-alerts
    method: GET
    data_selector: alerts
- name: document_templates
  endpoint:
    path: /document/templates
    method: GET
    data_selector: templates
- name: usage_alerts
  endpoint:
    path: /communications/usage_alerts
    method: GET
    data_selector: alerts
- name: invoice_summary
  endpoint:
    path: /invoice/summary
    method: GET
    data_selector: summary
    params: {}
- name: invoice
  endpoint:
    path: /invoice
    method: GET
    data_selector: invoice_data
    params: {}
- name: document_templates
  endpoint:
    path: /document-templates
    method: GET
    data_selector: templates
- name: document_template
  endpoint:
    path: /document-templates
    method: GET
    data_selector: templates
    params: {}
- name: document_template
  endpoint:
    path: /document/templates
    method: GET
    data_selector: templates
- name: create_segment
  endpoint:
    path: /communications/segments/create
    method: POST
- name: edit_segment
  endpoint:
    path: /communications/segments/edit
    method: PUT
- name: use_segment
  endpoint:
    path: /communications/configurations/add
    method: POST
- name: segments
  endpoint:
    path: /communications/segments
    method: GET
    data_selector: segments
    params: {}
- name: users
  endpoint:
    path: /users
    method: GET
    data_selector: users
    params: {}
- name: user
  endpoint:
    path: /users
    method: GET
    data_selector: users
    params: {}
- name: roles
  endpoint:
    path: /api/roles
    method: GET
    data_selector: roles
- name: webhook_alerts
  endpoint:
    path: /webhook-alerts
    method: POST
    data_selector: payload
    params: {}
- name: webhook_alerts
  endpoint:
    path: /webhook-alerts
    method: POST
    data_selector: event_info
- name: customer_session
  endpoint:
    path: /customer/session
    method: POST
    data_selector: redirect_url
    params:
      organisation: Navigate to **Settings** > **General**.
      customer_id: UUID from the customer's details page
      return_url: https://zenskar.com
      idle_timeout: 86400
- name: customer_session
  endpoint:
    path: /customer/session
    method: POST
    data_selector: redirect_url
    params:
      organisation: c3b949f8-633f-4fec-9105-e2b3a4d06b98
      customer_id: 063f8b97-f795-4f0b-89b4-88b114c83f44
      return_url: https://zenskar.com
      idle_timeout: 86400
- name: business_entity
  endpoint:
    path: /settings/business_entity
    method: GET
    data_selector: entities
- name: payment_instructions
  endpoint:
    path: /settings/payment_instructions
    method: GET
    data_selector: instructions
- name: business_entity
  endpoint:
    path: /business_entities
    method: GET
    data_selector: entities
- name: monthly_recurring_revenue
  endpoint:
    path: /analytics/monthly-recurring-revenue
    method: GET
    data_selector: data
    params: {}
- name: net_revenue_retention
  endpoint:
    path: /analytics/net-revenue-retention
    method: GET
    data_selector: data
    params: {}
- name: gross_revenue_retention
  endpoint:
    path: /analytics/gross-revenue-retention
    method: GET
    data_selector: data
    params: {}
- name: monthly_recurring_revenue
  endpoint:
    path: /api/v1/monthly_recurring_revenue
    method: GET
    data_selector: data
    params: {}
- name: monthly_recurring_revenue
  endpoint:
    path: /api/mrr
    method: GET
    data_selector: data
    params: {}
- name: monthly_recurring_revenue
  endpoint:
    path: /docs/monthly-recurring-revenue-by-product
    method: GET
    data_selector: records
- name: monthly_recurring_revenue
  endpoint:
    path: /docs/monthly-recurring-revenue
    method: GET
    data_selector: data
    params: {}
- name: gross_revenue_retention
  endpoint:
    path: /docs/gross-revenue-retention
    method: GET
    data_selector: data
    params: {}
- name: monthly_recurring_revenue
  endpoint:
    path: /docs/monthly-recurring-revenue
    method: GET
    data_selector: data
- name: gross_revenue_retention
  endpoint:
    path: /docs/gross-revenue-retention
    method: GET
    data_selector: data
- name: gross_revenue_retention
  endpoint:
    path: /docs/gross-revenue-retention
    method: GET
    data_selector: GRR
    params: {}
- name: MRR customer waterfall
  endpoint:
    path: /mrr-customer-waterfall
    method: GET
    data_selector: data
    params: {}
- name: net_annual_recurring_revenue
  endpoint:
    path: /path/to/net-annual-recurring-revenue
    method: GET
    data_selector: records
- name: mrr_customer_waterfall
  endpoint:
    path: /mrr-customer-waterfall
    method: GET
    data_selector: data
    params: {}
- name: Net ARR
  endpoint:
    path: /path/to/net_arr
    method: GET
    data_selector: records
- name: invoices
  endpoint:
    path: /api/v1/invoices
    method: GET
    data_selector: data
    params: {}
- name: aging_report
  endpoint:
    path: /aging_report
    method: GET
    data_selector: data
    params: {}
- name: invoice_count_status
  endpoint:
    path: /invoice_count_status
    method: GET
    data_selector: data
    params: {}
- name: dso_wip
  endpoint:
    path: /dso_wip
    method: GET
    data_selector: data
    params: {}
- name: payments_summary
  endpoint:
    path: /payments/summary
    method: GET
    data_selector: summary
    params: {}
- name: payments_by_status
  endpoint:
    path: /payments/status
    method: GET
    data_selector: status_records
    params: {}
- name: payments_by_customers
  endpoint:
    path: /payments/customers
    method: GET
    data_selector: customer_records
    params: {}
- name: payments_summary_by_period
  endpoint:
    path: /payments/summary/period
    method: GET
    data_selector: period_records
    params: {}
- name: chart_of_accounts
  endpoint:
    path: /accounts/chart
    method: GET
    data_selector: accounts
    params: {}
- name: invoice_summary
  endpoint:
    path: /invoices/summary
    method: GET
    data_selector: invoice_summary
    params: {}
- name: outstanding_balances
  endpoint:
    path: /invoices/outstanding_balances
    method: GET
    data_selector: outstanding_balances
    params: {}
- name: invoice_summary_by_customers
  endpoint:
    path: /invoices/summary_by_customers
    method: GET
    data_selector: invoice_summary_by_customers
    params: {}
- name: top_debtors
  endpoint:
    path: /invoices/top_debtors
    method: GET
    data_selector: top_debtors
    params: {}
- name: revenue_adjustment_methods
  endpoint:
    path: /docs/revenue-adjustment-methods
    method: GET
    data_selector: methods
- name: Aging report
  endpoint:
    path: /api/aging_report
    method: GET
- name: Invoice count and status
  endpoint:
    path: /api/invoice_count_status
    method: GET
- name: Days sales outstanding
  endpoint:
    path: /api/days_sales_outstanding
    method: GET
- name: pricing_models
  endpoint:
    path: /pricing-models
    method: GET
    data_selector: models
    params: {}
- name: products
  endpoint:
    path: /docs/products
    method: GET
- name: payments_summary
  endpoint:
    path: /payments/summary
    method: GET
    data_selector: summary
    params: {}
- name: payments_by_status
  endpoint:
    path: /payments/status
    method: GET
    data_selector: status_summary
    params: {}
- name: payments_by_customers
  endpoint:
    path: /payments/customers
    method: GET
    data_selector: customer_payments
    params: {}
- name: payments_summary_by_period
  endpoint:
    path: /payments/summary/period
    method: GET
    data_selector: period_summary
    params: {}
- name: number_of_payments_by_period
  endpoint:
    path: /payments/count/period
    method: GET
    data_selector: period_count
    params: {}
- name: package_pricing
  endpoint:
    path: /docs/package-pricing
    method: GET
    data_selector: package_pricing_data
- name: add_product
  endpoint:
    path: /docs/add-a-product-based-on-package-pricing
    method: GET
    data_selector: add_product_data
- name: chart_of_accounts
  endpoint:
    path: /api/chart_of_accounts
    method: GET
    data_selector: accounts
    params: {}
- name: percent_pricing
  endpoint:
    path: /percent-pricing
    method: POST
    data_selector: data
    params: {}
- name: adjustment_methods
  endpoint:
    path: /docs/revenue-adjustment-methods
    method: GET
    data_selector: methods
    params: {}
- name: volume_pricing
  endpoint:
    path: /volume-pricing
    method: GET
    data_selector: records
    params: {}
- name: contracts
  endpoint:
    path: /contracts
    method: POST
    data_selector: contract
    params: {}
- name: products
  endpoint:
    path: /products
    method: GET
    data_selector: products
    params: {}
- name: Flat-fee pricing
  endpoint:
    path: /docs/flat-fee-pricing
    method: GET
- name: Matrix pricing
  endpoint:
    path: /docs/matrix-pricing
    method: GET
- name: Package pricing
  endpoint:
    path: /docs/package-pricing
    method: GET
- name: Per-unit pricing
  endpoint:
    path: /docs/per-unit-pricing
    method: GET
- name: Percent pricing
  endpoint:
    path: /docs/percent-pricing
    method: GET
- name: Step pricing
  endpoint:
    path: /docs/step-pricing
    method: GET
- name: Tiered pricing
  endpoint:
    path: /docs/tiered-pricing
    method: GET
- name: Tiered pricing with flat fee
  endpoint:
    path: /docs/tiered-pricing-with-flat-fee
    method: GET
- name: Two-dimensional tiered pricing
  endpoint:
    path: /docs/two-dimensional-tiered-pricing
    method: GET
- name: Volume pricing
  endpoint:
    path: /docs/volume-pricing
    method: GET
- name: Volume pricing with flat fee
  endpoint:
    path: /docs/volume-pricing-with-flat-fee
    method: GET
- name: matrix_pricing
  endpoint:
    path: /docs/matrix-pricing
    method: GET
    data_selector: details
    params: {}
- name: contract
  endpoint:
    path: /contracts
    method: POST
    data_selector: contract
    params: {}
- name: product
  endpoint:
    path: /products
    method: GET
    data_selector: products
    params: {}
- name: package_pricing
  endpoint:
    path: /docs/package-pricing
    method: GET
    data_selector: records
    params: {}
- name: add_product_based_on_package_pricing
  endpoint:
    path: /docs/add-a-product-based-on-package-pricing
    method: GET
    data_selector: records
    params: {}
- name: contract
  endpoint:
    path: /contracts
    method: GET
    data_selector: records
- name: customers
  endpoint:
    path: /customers
    method: GET
    data_selector: records
- name: products
  endpoint:
    path: /products
    method: GET
    data_selector: records
- name: product_creation
  endpoint:
    path: /products/create
    method: POST
- name: product_assignment
  endpoint:
    path: /products/assign
    method: POST
- name: products
  endpoint:
    path: /products
    method: POST
    data_selector: product
    params: {}
- name: usage_aggregates
  endpoint:
    path: /usage-aggregates
    method: POST
    data_selector: aggregate
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: volume_pricing
  endpoint:
    path: /volume-pricing-with-flat-fee
    method: GET
    data_selector: pricing_details
- name: deals
  endpoint:
    path: /deals
    method: GET
    data_selector: data
    params: {}
- name: contacts
  endpoint:
    path: /persons
    method: GET
    data_selector: data
    params: {}
- name: contract_template
  endpoint:
    path: /contracts/templates
    method: POST
    data_selector: template
    params: {}
- name: create_contract
  endpoint:
    path: /contracts
    method: POST
    data_selector: contract
    params: {}
- name: ZenskarEndpoint
  endpoint:
    path: /services/data/vXX.X/sobjects/ZenskarEndpoint
    method: GET
    data_selector: records
- name: ZenskarStagingEndpoint
  endpoint:
    path: /services/data/vXX.X/sobjects/ZenskarStagingEndpoint
    method: GET
    data_selector: records
- name: contract_template
  endpoint:
    path: /contracts/templates
    method: POST
    data_selector: template
- name: create_contract
  endpoint:
    path: /contracts
    method: POST
    data_selector: contract
- name: contract
  endpoint:
    path: /contracts
    method: GET
- name: customers
  endpoint:
    path: /customers
    method: GET
- name: products
  endpoint:
    path: /products
    method: GET
- name: ZenskarCustomer
  endpoint:
    path: /api/customers
    method: POST
    data_selector: customer
    params: {}
- name: ZenskarContract
  endpoint:
    path: /api/contracts
    method: POST
    data_selector: contract
    params: {}
- name: ZenskarEndpoint
  endpoint:
    path: /services/data/vXX.X/sobjects/ZenskarEndpoint
    method: GET
    data_selector: records
- name: ZenskarStagingEndpoint
  endpoint:
    path: /services/data/vXX.X/sobjects/ZenskarStagingEndpoint
    method: GET
    data_selector: records
- name: ZenskarPricing
  endpoint:
    path: /ZenskarPricing
    method: GET
    data_selector: zenskarPricing
    params: {}
- name: ZenskarPricingAndProductId
  endpoint:
    path: /ZenskarPricingAndProductId
    method: GET
    data_selector: zenskarPricingAndProductId
    params: {}
- name: ZenskarProduct
  endpoint:
    path: /ZenskarProduct
    method: GET
    data_selector: zenskarProduct
    params: {}
- name: ZenskarQuantity
  endpoint:
    path: /ZenskarQuantity
    method: GET
    data_selector: zenskarQuantity
    params: {}
- name: ZenskarTags
  endpoint:
    path: /ZenskarTags
    method: GET
    data_selector: zenskarTags
    params: {}
- name: account_mapping
  endpoint:
    path: /connectors/xero/account_mapping
    method: GET
    data_selector: account_mapping_data
- name: ZenskarCustomer
  endpoint:
    path: /path/to/customer/endpoint
    method: GET
    data_selector: ZenskarCustomer
    params: {}
- name: ZenskarContract
  endpoint:
    path: /path/to/contract/endpoint
    method: GET
    data_selector: ZenskarContract
    params: {}
- name: zenskar_pricing
  endpoint:
    path: /zenskar/pricing
    method: GET
    data_selector: zenskarPricing
    params: {}
- name: zenskar_pricing_and_product_id
  endpoint:
    path: /zenskar/pricingAndProductId
    method: GET
    data_selector: zenskarPricingAndProductId
    params: {}
- name: zenskar_product
  endpoint:
    path: /zenskar/product
    method: GET
    data_selector: zenskarProduct
    params: {}
- name: zenskar_quantity
  endpoint:
    path: /zenskar/quantity
    method: GET
    data_selector: zenskarQuantity
    params: {}
- name: zenskar_tags
  endpoint:
    path: /zenskar/tags
    method: GET
    data_selector: zenskarTags
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: Avalara Tax Connector
  endpoint:
    path: /api/v1/avalara/tax-connector
    method: POST
- name: account_mapping
  endpoint:
    path: /connectors/xero/account_mapping
    method: GET
- name: journal_entries
  endpoint:
    path: /connectors/xero/journal_entries
    method: POST
- name: clients
  endpoint:
    path: /api/v2/clients
    method: GET
    data_selector: clients
- name: organizations
  endpoint:
    path: /api/v2/organizations
    method: GET
    data_selector: organizations
- name: organization_members
  endpoint:
    path: /api/v2/organizations/{id}/members
    method: GET
    data_selector: members
- name: organization_member_roles
  endpoint:
    path: /api/v2/organizations/{id}/members/{member_id}/roles
    method: GET
    data_selector: roles
- name: users
  endpoint:
    path: /api/v2/users
    method: GET
    data_selector: users
- name: data
  endpoint:
    path: /data
    method: POST
    data_selector: records
- name: database
  endpoint:
    path: /
    method: GET
    data_selector: tables
- name: Avalara Tax Connector
  endpoint:
    path: /integrations/sales-tax/avalara-tax-connector
    method: POST
    data_selector: connection
    params: {}
- name: spreadsheet
  endpoint:
    params:
      row_batch_size: 200
- name: clients
  endpoint:
    path: /api/management/v2/clients
    method: GET
    data_selector: clients
- name: organizations
  endpoint:
    path: /api/management/v2/organizations
    method: GET
    data_selector: organizations
- name: organization_members
  endpoint:
    path: /api/management/v2/organizations/members
    method: GET
    data_selector: members
- name: organization_member_roles
  endpoint:
    path: /api/management/v2/organizations/member_roles
    method: GET
    data_selector: roles
- name: users
  endpoint:
    path: /api/management/v2/users
    method: GET
    data_selector: users
- name: data_source
  endpoint:
    path: /data/source/athena
    method: POST
    data_selector: data
    params: {}
- name: color_collections
  endpoint:
    path: /api-and-integration/api-reference/v3.1/color-collection/get_all_color_collections
    method: GET
- name: connections
  endpoint:
    path: /api-and-integration/api-reference/v3.1/connection/get_all_connections
    method: GET
- name: content_metadata
  endpoint:
    path: /api-and-integration/api-reference/v3.1/content/get_all_content_metadatas
    method: GET
- name: dashboards
  endpoint:
    path: /api-and-integration/api-reference/v3.1/dashboard/get_all_dashboards
    method: GET
- name: looks
  endpoint:
    path: /api-and-integration/api-reference/v3.1/look/get_all_looks
    method: GET
- name: users
  endpoint:
    path: /api-and-integration/api-reference/v3.1/user/get_all_users
    method: GET
- name: card
  endpoint:
    path: /api/card
    method: GET
- name: collections
  endpoint:
    path: /api/collection
    method: GET
- name: dashboard
  endpoint:
    path: /api/dashboard
    method: GET
- name: user
  endpoint:
    path: /api/user
    method: GET
- name: databases
  endpoint:
    path: /api/user
    method: GET
- name: native_query_snippet
  endpoint:
    path: /api/native-query-snippet
    method: GET
- name: Google Sheets Spreadsheet
  endpoint:
    params:
      row_batch_size: 200
- name: data_source
  endpoint:
    path: /data-sources
    method: POST
    data_selector: data
    params: {}
- name: data_source
  endpoint:
    path: /data-source
    method: POST
    data_selector: data
    params: {}
- name: card
  endpoint:
    path: /card
    method: GET
- name: collections
  endpoint:
    path: /collection
    method: GET
- name: dashboard
  endpoint:
    path: /dashboard
    method: GET
- name: user
  endpoint:
    path: /user
    method: GET
- name: databases
  endpoint:
    path: /user
    method: GET
- name: native_query_snippet
  endpoint:
    path: /native-query-snippet
    method: GET
- name: Accounts
  endpoint:
    path: /api/accounting/v1/accounts
    method: GET
- name: BillPayments
  endpoint:
    path: /api/accounting/v1/billpayments
    method: GET
- name: Budgets
  endpoint:
    path: /api/accounting/v1/budgets
    method: GET
- name: Bills
  endpoint:
    path: /api/accounting/v1/bills
    method: GET
- name: Classes
  endpoint:
    path: /api/accounting/v1/classes
    method: GET
- name: CreditMemos
  endpoint:
    path: /api/accounting/v1/creditmemos
    method: GET
- name: Customers
  endpoint:
    path: /api/accounting/v1/customers
    method: GET
- name: Departments
  endpoint:
    path: /api/accounting/v1/departments
    method: GET
- name: Deposits
  endpoint:
    path: /api/accounting/v1/deposits
    method: GET
- name: Employees
  endpoint:
    path: /api/accounting/v1/employees
    method: GET
- name: Estimates
  endpoint:
    path: /api/accounting/v1/estimates
    method: GET
- name: Invoices
  endpoint:
    path: /api/accounting/v1/invoices
    method: GET
- name: Items
  endpoint:
    path: /api/accounting/v1/items
    method: GET
- name: JournalEntries
  endpoint:
    path: /api/accounting/v1/journalentries
    method: GET
- name: Payments
  endpoint:
    path: /api/accounting/v1/payments
    method: GET
- name: PaymentMethods
  endpoint:
    path: /api/accounting/v1/paymentmethods
    method: GET
- name: Purchases
  endpoint:
    path: /api/accounting/v1/purchases
    method: GET
- name: PurchaseOrders
  endpoint:
    path: /api/accounting/v1/purchaseorders
    method: GET
- name: RefundReceipts
  endpoint:
    path: /api/accounting/v1/refundreceipts
    method: GET
- name: SalesReceipts
  endpoint:
    path: /api/accounting/v1/salesreceipts
    method: GET
- name: TaxAgencies
  endpoint:
    path: /api/accounting/v1/taxagencies
    method: GET
- name: TaxCodes
  endpoint:
    path: /api/accounting/v1/taxcodes
    method: GET
- name: TaxRates
  endpoint:
    path: /api/accounting/v1/taxrates
    method: GET
- name: Terms
  endpoint:
    path: /api/accounting/v1/terms
    method: GET
- name: TimeActivities
  endpoint:
    path: /api/accounting/v1/timeactivities
    method: GET
- name: Transfers
  endpoint:
    path: /api/accounting/v1/transfers
    method: GET
- name: VendorCredits
  endpoint:
    path: /api/accounting/v1/vendorcredits
    method: GET
- name: Vendors
  endpoint:
    path: /api/accounting/v1/vendors
    method: GET
- name: Abandoned Checkouts
  endpoint:
    path: /admin/api/2024-04/abandoned_checkouts.json
    method: GET
- name: Articles
  endpoint:
    path: /admin/api/2024-04/articles.json
    method: GET
- name: Balance Transactions
  endpoint:
    path: /admin/api/2024-04/transactions.json
    method: GET
- name: Blogs
  endpoint:
    path: /admin/api/2024-04/blogs.json
    method: GET
- name: Collects
  endpoint:
    path: /admin/api/2024-04/collects.json
    method: GET
- name: Collections (GraphQL)
  endpoint:
    path: /admin/api/2024-04/graphql.json
    method: POST
- name: Countries
  endpoint:
    path: /admin/api/2024-04/countries.json
    method: GET
- name: Custom Collections
  endpoint:
    path: /admin/api/2024-04/custom_collections.json
    method: GET
- name: Customers
  endpoint:
    path: /admin/api/2024-04/customers.json
    method: GET
- name: Draft Orders
  endpoint:
    path: /admin/api/2024-04/draft_orders.json
    method: GET
- name: Discount Codes (GraphQL)
  endpoint:
    path: /admin/api/2024-04/graphql.json
    method: POST
- name: Disputes
  endpoint:
    path: /admin/api/2024-04/disputes.json
    method: GET
- name: Fulfillments
  endpoint:
    path: /admin/api/2024-04/fulfillments.json
    method: GET
- name: Fulfillment Orders (GraphQL)
  endpoint:
    path: /admin/api/2024-04/graphql.json
    method: POST
- name: Inventory Items (GraphQL)
  endpoint:
    path: /admin/api/2024-04/graphql.json
    method: POST
- name: Inventory Levels (GraphQL)
  endpoint:
    path: /admin/api/2024-04/graphql.json
    method: POST
- name: Locations
  endpoint:
    path: /admin/api/2024-04/locations.json
    method: GET
- name: Metafields (GraphQL)
  endpoint:
    path: /admin/api/2024-04/graphql.json
    method: POST
- name: Orders
  endpoint:
    path: /admin/api/2024-04/orders.json
    method: GET
- name: Order Refunds
  endpoint:
    path: /admin/api/2024-04/refunds.json
    method: GET
- name: Pages
  endpoint:
    path: /admin/api/2024-04/pages.json
    method: GET
- name: Price Rules
  endpoint:
    path: /admin/api/2024-04/price_rules.json
    method: GET
- name: Products (GraphQL)
  endpoint:
    path: /admin/api/2024-04/graphql.json
    method: POST
- name: Shop
  endpoint:
    path: /admin/api/2024-04/shop.json
    method: GET
- name: Smart Collections
  endpoint:
    path: /admin/api/2024-04/smart_collections.json
    method: GET
- name: Transactions
  endpoint:
    path: /admin/api/2024-04/transactions.json
    method: GET
- name: Accounts
  endpoint:
    path: /v3/company/{realmId}/account
    method: GET
- name: BillPayments
  endpoint:
    path: /v3/company/{realmId}/billpayment
    method: GET
- name: Budgets
  endpoint:
    path: /v3/company/{realmId}/budget
    method: GET
- name: Bills
  endpoint:
    path: /v3/company/{realmId}/bill
    method: GET
- name: Classes
  endpoint:
    path: /v3/company/{realmId}/class
    method: GET
- name: CreditMemos
  endpoint:
    path: /v3/company/{realmId}/creditmemo
    method: GET
- name: Customers
  endpoint:
    path: /v3/company/{realmId}/customer
    method: GET
- name: Departments
  endpoint:
    path: /v3/company/{realmId}/department
    method: GET
- name: Deposits
  endpoint:
    path: /v3/company/{realmId}/deposit
    method: GET
- name: Employees
  endpoint:
    path: /v3/company/{realmId}/employee
    method: GET
- name: Estimates
  endpoint:
    path: /v3/company/{realmId}/estimate
    method: GET
- name: Invoices
  endpoint:
    path: /v3/company/{realmId}/invoice
    method: GET
- name: Items
  endpoint:
    path: /v3/company/{realmId}/item
    method: GET
- name: JournalEntries
  endpoint:
    path: /v3/company/{realmId}/journalentry
    method: GET
- name: Payments
  endpoint:
    path: /v3/company/{realmId}/payment
    method: GET
- name: PaymentMethods
  endpoint:
    path: /v3/company/{realmId}/paymentmethod
    method: GET
- name: Purchases
  endpoint:
    path: /v3/company/{realmId}/purchase
    method: GET
- name: PurchaseOrders
  endpoint:
    path: /v3/company/{realmId}/purchaseorder
    method: GET
- name: RefundReceipts
  endpoint:
    path: /v3/company/{realmId}/refundreceipt
    method: GET
- name: SalesReceipts
  endpoint:
    path: /v3/company/{realmId}/salesreceipt
    method: GET
- name: TaxAgencies
  endpoint:
    path: /v3/company/{realmId}/taxagency
    method: GET
- name: TaxCodes
  endpoint:
    path: /v3/company/{realmId}/taxcode
    method: GET
- name: TaxRates
  endpoint:
    path: /v3/company/{realmId}/taxrate
    method: GET
- name: Terms
  endpoint:
    path: /v3/company/{realmId}/term
    method: GET
- name: TimeActivities
  endpoint:
    path: /v3/company/{realmId}/timeactivity
    method: GET
- name: Transfers
  endpoint:
    path: /v3/company/{realmId}/transfer
    method: GET
- name: VendorCredits
  endpoint:
    path: /v3/company/{realmId}/vendorcredit
    method: GET
- name: Vendors
  endpoint:
    path: /v3/company/{realmId}/vendor
    method: GET
- name: zenskar_role
  endpoint:
    path: /create_role
    method: POST
    data_selector: role_created
- name: zenskar_user
  endpoint:
    path: /create_user
    method: POST
    data_selector: user_created
- name: zenskar_warehouse
  endpoint:
    path: /create_warehouse
    method: POST
    data_selector: warehouse_created
- name: zenskar_database
  endpoint:
    path: /create_database
    method: POST
    data_selector: database_created
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: customers
  endpoint:
    path: /reference/customers
    method: GET
    data_selector: records
- name: contracts
  endpoint:
    path: /reference/contracts
    method: GET
    data_selector: records
- name: invoices
  endpoint:
    path: /reference/invoices-explainer
    method: GET
    data_selector: records
- name: Abandoned Checkouts
  endpoint:
    path: /admin/rest/2024-04/abandoned_checkouts.json
    method: GET
- name: Articles
  endpoint:
    path: /admin/rest/2024-04/articles.json
    method: GET
- name: Balance Transactions
  endpoint:
    path: /admin/rest/2024-04/balance_transactions.json
    method: GET
- name: Blogs
  endpoint:
    path: /admin/rest/2024-04/blogs.json
    method: GET
- name: Collects
  endpoint:
    path: /admin/rest/2024-04/collects.json
    method: GET
- name: Collections
  endpoint:
    path: /admin/graphql/2024-04/collections
    method: GET
- name: Countries
  endpoint:
    path: /admin/rest/2024-04/countries.json
    method: GET
- name: Custom Collections
  endpoint:
    path: /admin/rest/2024-04/custom_collections.json
    method: GET
- name: Customers
  endpoint:
    path: /admin/rest/2024-04/customers.json
    method: GET
- name: Draft Orders
  endpoint:
    path: /admin/rest/2024-04/draft_orders.json
    method: GET
- name: Discount Codes
  endpoint:
    path: /admin/graphql/2024-04/discount_codes
    method: GET
- name: Disputes
  endpoint:
    path: /admin/rest/2024-04/disputes.json
    method: GET
- name: Fulfillments
  endpoint:
    path: /admin/rest/2024-04/fulfillments.json
    method: GET
- name: Fulfillment Orders
  endpoint:
    path: /admin/graphql/2024-04/fulfillment_orders
    method: GET
- name: Inventory Items
  endpoint:
    path: /admin/graphql/2024-04/inventory_items
    method: GET
- name: Inventory Levels
  endpoint:
    path: /admin/graphql/2024-04/inventory_levels
    method: GET
- name: Locations
  endpoint:
    path: /admin/rest/2024-04/locations.json
    method: GET
- name: Metafields
  endpoint:
    path: /admin/graphql/2024-04/metafields
    method: GET
- name: Orders
  endpoint:
    path: /admin/rest/2024-04/orders.json
    method: GET
- name: Order Refunds
  endpoint:
    path: /admin/rest/2024-04/refunds.json
    method: GET
- name: Pages
  endpoint:
    path: /admin/rest/2024-04/pages.json
    method: GET
- name: Price Rules
  endpoint:
    path: /admin/rest/2024-04/price_rules.json
    method: GET
- name: Products
  endpoint:
    path: /admin/graphql/2024-04/products
    method: GET
- name: Shop
  endpoint:
    path: /admin/rest/2024-04/shop.json
    method: GET
- name: Smart Collections
  endpoint:
    path: /admin/rest/2024-04/smart_collections.json
    method: GET
- name: Transactions
  endpoint:
    path: /admin/rest/2024-04/transactions.json
    method: GET
- name: create_role
  endpoint:
    path: /create_role
    method: POST
    data_selector: result
    params: {}
- name: create_user
  endpoint:
    path: /create_user
    method: POST
    data_selector: result
    params: {}
- name: create_warehouse
  endpoint:
    path: /create_warehouse
    method: POST
    data_selector: result
    params: {}
- name: create_database
  endpoint:
    path: /create_database
    method: POST
    data_selector: result
    params: {}
- name: grant_usage_access
  endpoint:
    path: /grant_usage_access
    method: POST
    data_selector: result
    params: {}
- name: SAML Configuration
  endpoint:
    path: /settings/saml
    method: GET
- name: tables
  endpoint:
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: customers
  endpoint:
    path: /reference/customers
    method: GET
- name: contracts
  endpoint:
    path: /reference/contracts
    method: GET
- name: invoices
  endpoint:
    path: /reference/invoices-explainer
    method: GET
notes:
- Zenskar APIs expects the timestamp field to be in DateTime64 or DateTime36 format
  without timezone offsets.
- 'The expected structure is: YYYY-MM-DD HH:MM:SS'
- List aggregates with optional filtering, sorting, and pagination.
- Retrieve customers with rich filtering, sorting, and pagination.
- Customer must belong to the authenticated organization
- Valid UUID format required for customer_id
- Returns 404 if customer doesn't exist or is not accessible
- List datasource given a `next` or `previous` cursor and a limit. If cursor is not
  provided you will get the beginning of the search set.
- List jobs given a next or previous cursor and a limit. If cursor is not provided
  you will get the beginning of the search set.
- Retrieve checkout sessions with rich filtering, sorting, and pagination.
- Filter by status, dates, customer, and contract.
- Uses OAuth2 with refresh token — requires setup of connected app in api
- All IDs generated by Zenskar are UUIDs.
- Billable metrics aggregate specific data points over a defined period using aggregation
  functions.
- Products are configured for usage-based billing.
- The pilot program will involve end-to-end testing of a couple of different types
  of contracts to get a sense of how well Zenskar interacts with your internal systems.
- Implementation typically takes 2–4 weeks for small companies.
- Migrating historical data can be done via API or CSV upload.
- Zenskar captures and manages the commercial structure of a contract, but it does
  not assess its legal enforceability.
- Plans in Zenskar help standardize and scale your commercial operations.
- Phases in Zenskar help break down a contract into logical, time-based segments.
- Products are foundational in Zenskar.
- Start with a well-organized product catalog.
- Some objects like Contact may return nulls in deeply nested fields
- Performance obligations are not always explicitly stated in a contract but are derived
  through a detailed analysis of the terms and promises made between the entity and
  the customer.
- Revenue is recognized when it is earned — i.e., when the entity has completed its
  part of the deal and the customer has control over the good or service.
- Billable metrics are derived values built from usage events.
- They abstract the complexity of raw event data into meaningful quantities that directly
  drive pricing and invoicing logic.
- Only those revenue distribution methods that are available end-to-end have been
  described in this document. A few work-in-progress methods are also available in
  the UI.
- Revenue is earned, not received
- Dashboards are created using Metabase.
- Ensure that the customer details entered are exactly the same as in other systems
  from where they are being imported.
- Ensure that the customer details entered are exactly the same as the details in
  the other systems.
- Zenskar allows real-time ingestion for billing, metrics, and reporting via APIs.
- Zenskar lets you push usage events or pre-aggregated data via REST APIs into its
  ingestion layer.
- customer_id and timestamp are required and read-only.
- Zenskar uses timestamp to order incoming records.
- 'Manual entry via web form is for small-scale use only. If you have larger data
  volumes, consider using: CSV upload, Data-source connectors, Usage events API'
- Bulk ingestion without engineering effort
- Manual process—may not suit recurring uploads
- Backfill any period of data quickly
- Needs careful handling of duplicates
- Supports aggregates for immediate billing
- Validation errors may require file updates
- Real-time access to metric computations without transferring or storing raw usage
  events.
- Zenskar allows you to derive billable metrics by running queries directly on your
  production databases or data warehouses—without transferring or storing any raw
  usage events within Zenskar.
- A database user with read-only access is required.
- 'If a usage event does not show up in Zenskar, the assumption is often that it was
  lost by our system. In reality, ingestion can fail in two main ways: Rejected by
  Zenskar due to validation errors and Event never reached Zenskar.'
- Implementing a dead letter queue (DLQ) is recommended to capture failed events so
  that they can be retried or examined later.
- You must configure a data source or a usage events before trying to create billable
  metrics.
- If a usage event does not show up in Zenskar, the assumption is often that it was
  lost by our system.
- Implement a dead letter queue (DLQ) to capture failed events so that they can be
  retried or examined later.
- You must add and configure usage events (or data sources) like telephone usage.
- The Zenskar columns email, external_id, and customer name are created when you add
  your customer to Zenskar.
- Aggregate query is optional if your source data already contains aggregates (not
  raw metrics).
- You must add and configure usage events (or data sources) like telephone usage.
  Zenskar will transform all usage events (or data sources) into database tables like
  telephone_usage.
- The `{{start_date}}` and `{{end_date}}` are determined by the SQL template engine
  at the time of contract execution.
- You must not manipulate the special variables `{{start_date}}` and `{{end_date}}`.
- Editing historical data should be approached with caution, as it can affect data
  integrity and accuracy.
- Special variables {{start_date}} and {{end_date}} are determined by the SQL template
  engine at the time of contract execution.
- Contract period defines the start and end dates during which the agreed-upon commercial
  terms are valid.
- The start billing cycle controls when the first billing period starts.
- The extraction model works best on clear, structured PDFs (not scans or images).
- While Zenskar AI reduces manual work, it is important to review the draft contract.
- No billing occurs during the free trial phase.
- Automatic transition after the trial ends, billing will commence for the paid phase.
- The payment terms feature helps ensure clarity in customer expectations and supports
  flexible billing workflows.
- Automatic transition to paid phase after trial ends.
- 'Zenskar supports two tax modes: manual tax and Avalara integration.'
- Minimum Spend ensures a base level of revenue is guaranteed from the customer.
- Maximum Spend provides flexibility to customers while preventing costs from exceeding
  a threshold.
- The default currency used for invoice generation in Zenskar is the US Dollar (USD).
- Discounts are scoped to a single product within a specific phase.
- The same product in a different phase may have no discount or a different discount.
- Discounts affect both invoicing and revenue recognition.
- Multiple discounts cannot be stacked at this level—only one discount per feature
  per phase is allowed.
- The service fee feature allows you to apply additional charges to a contract on
  top of standard product pricing.
- Contract renewal can be optionally automated in Zenskar. This helps you to streamline
  contract management by reducing manual efforts.
- Zenskar helps you manage billing at scale irrespective of the complexity of the
  pricing structures in your contracts.
- One-off invoices are raised manually for specific scenarios.
- Zenskar helps manage billing at scale irrespective of the complexity of the pricing
  structures in your contracts.
- Zenskar allows you to add multiple payment methods for each customer.
- The system automatically tries an alternative payment method if the default payment
  method fails.
- Payment methods include Cards, Direct Debit Payments, Credit Transfer, Offline Payments,
  Netbanking, and UPI.
- Flexibility to make credit/debit adjustments from the customers page.
- Balance on the customer's account can be applied to future invoices.
- Uses OAuth2 with refresh token — requires setup of connected app in Zenskar
- The flexibility to make credit/debit adjustments empowers you to handle various
  scenarios, such as refunds, promotional credits, or outstanding payments seamlessly.
- Entitlements refer to services or products that your customers are entitled to.
- 'Currently, Zenskar supports creation of the following two types of email alerts:
  before due date and after due date.'
- 'Alerts can be sent only to one segment of customers: all customers.'
- Entitlement-usage alerts are supported.
- 'Currently, Zenskar supports creation of two types of email alerts: before due date
  and after due date.'
- Recommended to copy the HTML from the form and paste it into a code editor for better
  editing experience.
- Domain ownership verification can take 24 hours or more.
- Senders can send emails even when your domain ownership has not been verified.
- Only a user with `Can Write User` permission can add a new user.
- Only a user with `Can Delete User` permission can delete a user.
- Access to a resource is protected by both authentication and authorization.
- The option to choose all permissions must be used with caution.
- Must store secret key in a secure location.
- Webhook status is determined by the response received from the endpoint URL.
- Must store your secret key in a secure location that only your system can access.
- A newly customer is automatically assigned to the default business entity.
- Monthly recurring revenue is the predictable revenue a business can expect each
  month from active subscriptions.
- This metric is automatically calculated and updated in real-time based on your subscription
  data and contract changes.
- NRR is automatically calculated based on your subscription data and customer activity.
- Historical data allows for trend analysis and benchmarking.
- GRR measures pure retention without the influence of upsells or add-ons.
- A GRR of 100% means you retained all revenue from existing customers.
- The MRR customer waterfall provides a detailed view of monthly recurring revenue
  by individual customers.
- The report provides a granular view of how different products contribute to your
  company's monthly recurring revenue over a specified period.
- Metric calculates Net ARR using a rolling average of MRR.
- Net ARR is useful for subscription or usage-based businesses.
- Net ARR is computed as 12 * rolling average monthly revenue.
- All charts and metrics update in near real-time based on invoice and payment data
  synced into Zenskar.
- The dashboard supports filters for customer, time period, and customer type.
- Exports are available in CSV format for offline reporting.
- Revenue recognition is rarely a straight line.
- Zenskar manages the entire revenue lifecycle.
- Any adjustment >5% of period revenue must be front loaded immediately per SEC and
  accounting standards.
- Inconsistent methods – Using different methods for similar adjustments without justification
- Missing documentation – Failing to document why a method was selected
- Ignoring the 5% rule – Not front loading material adjustments
- Delayed recognition – Holding adjustments until year-end
- Override without support – Changing system-recommended methods without documentation
- Custom account functionality for Income accounts is fully functional.
- Accounts in other categories can be created but are not yet functional.
- Zenskar manages the entire revenue lifecycle, from distribution to adjustments,
  in a way that is compliant with ASC 606 / IFRS 15.
- Refer to the products documentation to learn more about the concept of products
  in Zenskar.
- This pricing model is available only for metered products.
- Volume pricing adjusts the price based on the quantity purchased.
- Typically, as the quantity increases, the price per unit decreases.
- Volume pricing with flat fee is a pricing strategy where a flat fee is charged,
  and additional usage is billed based on predefined volume tiers.
- This model is commonly used in SaaS, cloud services, and subscription-based platforms.
- Products created directly in a contract template are not available in the products
  module.
- Per-unit pricing is a strategy in which you charge your customer for each unit of
  service or product you sell.
- For a contract, export works only if the contract was created in HubSpot.
- Make sure that you use the labels listed for properties without any modifications.
- Creating raw SQL queries for complex scenarios is the job of an engineer proficient
  in SQL.
- Volume pricing is a pricing strategy in which the price of a service or product
  is adjusted based on the quantity purchased.
- The API uses API key for authentication.
- Currently, products are created directly in the contract template. This means, products
  created directly in a contract template are not available in the products module.
- 'The mandatory step: Installation and setup of Zenskar''s Salesforce package.'
- You must login with an account credential that has the required permissions to install
  the package.
- Creating a contract from scratch is similar to creating a contract template.
- Successful completion of this activity will make all Zenskar fields available when
  you create or edit an account on Salesforce.
- Steps 1-8 can be repeated to show custom fields in layout for Opportunity, Product,
  and PricebookEntry.
- The Contract Start Date is required.
- Make sure that you use the labels listed for internal names without any modifications.
- You can use Package Components to create Flows tailored to your Workflows and Setup.
- You must have permission to install packages in your Salesforce account.
- LinkID (Zenskar) acts as the Reference ID on Zenskar.
- If you choose to use Salesforce fields, update Flows accordingly.
- Xero does not allow you to create entries with line amount equal to zero.
- The actual Accounts Receivable and other system accounts cannot be used to create
  Journals.
- Taxes are not synced from Zenskar to Zoho. Taxes will be applied by Zoho depending
  on how your configuration.
- 'Note: There are custom fields available in package, you show them on layout and
  use that in flows.'
- Zenskar uses token-based authentication (TBA) for connecting with a NetSuite account.
- Ensure the user has all the necessary permissions to use Rest Web Services.
- QuickBooks does not allow allocation of credit notes to invoices that have no outstanding
  amount.
- Ensure that a credit note is less than or equal to the total outstanding amount
  for the invoice.
- The connector is restricted by Auth0 rate limits.
- The policy used by the user or the role must have access to AWS Lake Formation,
  AWS Glue, and AWS S3.
- Zenskar requires the Service Account keys to leverage the role-based permissions
  granted to the Service Account.
- Currently, Zenskar supports only JSON keys.
- A dedicated read-only Zenskar user with access to all tables needed for replication
  is recommended.
- Ensure the user has access to all tables needed for replication
- Using a dedicated read-only user is highly recommended
- You must use Unity Catalog to use this connector.
- Full Refresh syncs are supported.
- Zenskar needs credentials for a Service Account with the BigQuery User and BigQuery
  Data Editor roles.
- ClickHouse version 21.3.10.1 or later is required.
- A dedicated read-only Zenskar user with access to all tables is recommended.
- Create a dedicated read-only Zenskar user with access to all tables needed for replication
- The default port number for CockroachDB is 26257
- Credential tokens expire after 14 days by default.
- Setting bindIP to 0.0.0.0 will allow connections to database from any IP address.
- Only authenticated users will be able to access the database.
- The Google API rate limit is 100 requests per 100 seconds per user and 500 requests
  per 100 seconds per project.
- You must allow inbound traffic from Zenskar IP addresses.
- Any database or table encoding combination of charset and collation is supported.
- Charset setting however will not be carried over to destination and data will be
  encoded with whatever is configured by the destination.
- Please note that byte arrays are not yet supported.
- You must re-run the commands for each schema from which you expect to replicate
  data.
- The Zenskar UI currently allows selecting any tables for CDC.
- This is the operating system username and not the PostgreSQL username.
- This is the operating system password and not the PostgreSQL password.
- The connector will alert you of an invalid or expired session token by returning
  a 401 Unauthorized response status code.
- 'Ensure that the user has appropriate access levels: read-only privileges.'
- Any database or table encoding combination of charset and collation is supported.
  Charset setting however will not be carried over to destination and data will be
  encoded with whatever is configured by the destination. Please note that byte arrays
  are not yet supported.
- You must re-run the above command for each schema from which you expect to replicate
  data.
- While setting up the PostgreSQL source connector, select SSH Key Authentication
  or Password Authentication.
- SSH Connection Port default is 22.
- The Redshift source supports Full Refresh syncs.
- Incremental Sync is cursor-based, using ORDER BY on a user-defined cursor column.
- Shopify has some rate limit restrictions.
- If you encounter access errors while using OAuth2.0 authentication, please make
  sure you've followed the Shopify Article to request the access to the client's store
  first.
- Incremental Sync is supported using a user-defined cursor column.
- 'You must allow inbound traffic from the following Zenskar IP addresses: 184.73.234.173'
- Invoice consolidation is an advanced feature that must be enabled by contacting
  support.
- Requires setup of custom application in Shopify with read_ scopes enabled
- Shopify has some rate limit restrictions. Typically, there should not be issues
  with throttling or exceeding the rate limits but, in some edge cases, you may encounter
  a '429 - Rate Limit Exceeded' HTTP error.
- Two-factor authentication (2FA) strengthens access security by requiring two authentication
  factors to verify your identity.
- 2FA protects against phishing, social engineering and password brute-force attacks.
- SAML is best suited for enterprise environments where centralized identity management
  is required.
- SAML relies on browser redirects, making it more applicable to web-based applications
  rather than mobile or desktop apps.
- Contact support@zenskar.com to obtain a signing certificate.
- Supports single sign-on (SSO) via SAML 2.0 with Microsoft Entra ID.
- 2FA protects against phishing, social engineering and password brute-force attacks
  and secures your logins from attackers exploiting weak or stolen credentials.
- To use Sign in with Google, you need a Google account.
- Obtain signing certificate from Zenskar to enable SAML-based SSO.
- Zenskar supports single sign-on (SSO) via SAML 2.0, allowing organizations to authenticate
  users through their existing identity provider.
errors:
- 'Invalid type for key: timestamp. Expected Date32/DateTime64, got string'
- '400: Validation error or duplicate customer'
- '422: Schema validation error'
- '500: Internal server error'
- '404: Customer not found'
- '400: No integration found for the specified connector'
- '400: Integration no longer available (resource deleted on connector)'
- '400: General processing error'
- '422: Invalid UUID format'
- 400 Bad request - invalid parameters
- 422 Unprocessable Entity - invalid query parameters
- '401 Unauthorized: Recheck OAuth scopes or token expiration'
- 'REQUEST_LIMIT_EXCEEDED: Throttle API calls or reduce frequency'
- 'QUERY_TIMEOUT: Break down filters or add selectivity'
- '400 Bad Request: Ensure your data format is correct.'
- '401 Unauthorized: Check your OAuth token.'
- '429 Too Many Requests: Throttle your API calls.'
- '404 Not Found: The request body is not valid JSON and cannot be parsed.'
- '413 Payload Too Large: The request body exceeds 1MB in size.'
- '422 Unprocessable Entity: The request body is valid JSON, but fails schema validation.'
- '400 Bad Request: Check the request payload for errors.'
- '401 Unauthorized: Ensure valid OAuth token.'
- '404 Not Found: The specified resource could not be found.'
- '404 Not Found: Check the endpoint path.'
- '401 Unauthorized: Invalid API key.'
- '401 Unauthorized: Invalid or expired session token.'
- '429 - Rate Limit Exceeded: Caught retryable error ''<some_error> or null'' after
  <some_number> tries.'
- '429 - Rate Limit Exceeded: Caught retryable error after some tries. Waiting some
  seconds then retrying.'
auth_info:
  mentioned_objects:
  - OauthToken
  - AuthProvider
  - NamedCredential
client:
  base_url: https://api.zenskar.com
  headers:
    Accept: application/json
source_metadata: null
