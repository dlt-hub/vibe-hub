resources:
- name: clusterctl
  endpoint:
    path: /downloads
    method: GET
    data_selector: releases
- name: clusterawsadm
  endpoint:
    path: /cluster-api-provider-aws/releases
    method: GET
    data_selector: releases
- name: scaleway_credentials
  endpoint:
    path: /scaleway/credentials
    method: POST
    data_selector: credentials
    params: {}
- name: management_cluster
  endpoint:
    path: /init
    method: POST
    data_selector: output
    params: {}
- name: clusterctl
  endpoint:
    path: /clusterctl
    method: GET
    data_selector: version
    params: {}
- name: clusterawsadm
  endpoint:
    path: /clusterawsadm
    method: GET
    data_selector: version
    params: {}
- name: scaleway-secret
  endpoint:
    path: /api/v1/namespaces/kube-system/secrets
    method: POST
    data_selector: status
    params: {}
- name: linode
  endpoint:
    params:
      LINODE_REGION: us-ord
      LINODE_TOKEN: <your linode PAT>
      LINODE_CONTROL_PLANE_MACHINE_TYPE: g6-standard-2
      LINODE_MACHINE_TYPE: g6-standard-2
- name: aws
  endpoint:
    params:
      AWS_REGION: us-east-1
      AWS_SSH_KEY_NAME: default
      AWS_CONTROL_PLANE_MACHINE_TYPE: t3.large
      AWS_NODE_MACHINE_TYPE: t3.large
- name: azure
  endpoint:
    params:
      AZURE_LOCATION: centralus
      AZURE_CONTROL_PLANE_MACHINE_TYPE: Standard_D2s_v3
      AZURE_NODE_MACHINE_TYPE: Standard_D2s_v3
      AZURE_RESOURCE_GROUP: <ResourceGroupName>
- name: cloudstack
  endpoint:
    params:
      CLOUDSTACK_ZONE_NAME: <zone name>
      CLOUDSTACK_NETWORK_NAME: <network name>
      CLUSTER_ENDPOINT_IP: <cluster endpoint address>
      CLUSTER_ENDPOINT_PORT: <cluster endpoint port>
      CLOUDSTACK_CONTROL_PLANE_MACHINE_OFFERING: <control plane service offering name>
      CLOUDSTACK_WORKER_MACHINE_OFFERING: <worker node service offering name>
      CLOUDSTACK_TEMPLATE_NAME: <template name>
      CLOUDSTACK_SSH_KEY_NAME: <ssh key name>
- name: digitalocean
  endpoint:
    params:
      DO_REGION: nyc1
      DO_SSH_KEY_FINGERPRINT: <your-ssh-key-fingerprint>
      DO_CONTROL_PLANE_MACHINE_TYPE: s-2vcpu-2gb
      DO_CONTROL_PLANE_MACHINE_IMAGE: <your-capi-image-id>
      DO_NODE_MACHINE_TYPE: s-2vcpu-2gb
      DO_NODE_MACHINE_IMAGE: <your-capi-image-id>
- name: gcp
  endpoint:
    params:
      GCP_REGION: <GCP_REGION>
      GCP_PROJECT: <GCP_PROJECT>
      KUBERNETES_VERSION: 1.23.3
      IMAGE_ID: projects/$GCP_PROJECT/global/images/<built image>
      GCP_CONTROL_PLANE_MACHINE_TYPE: n1-standard-2
      GCP_NODE_MACHINE_TYPE: n1-standard-2
      GCP_NETWORK_NAME: <GCP_NETWORK_NAME or default>
      CLUSTER_NAME: <CLUSTER_NAME>
- name: harvester
  endpoint:
    params:
      CONTROL_PLANE_MACHINE_COUNT: '3'
      NAMESPACE: test
      POD_CIDR: 10.42.0.0/16
      SERVICE_CIDR: 10.43.0.0/16
      SSH_KEYPAIR: default/ssk-key-pair
      TARGET_HARVESTER_NAMESPACE: default
      VM_DISK_SIZE: 50Gi
      VM_IMAGE_NAME: default/jammy-server
      VM_NETWORK: default/untagged
      VM_SSH_USER: ubuntu
      WORKER_MACHINE_COUNT: '2'
- name: huawei
  endpoint:
    params:
      HC_REGION: cn-east-1
      HC_SSH_KEY_NAME: default
      KUBERNETES_VERSION: 1.32.0
      CONTROL_PLANE_MACHINE_COUNT: '1'
      WORKER_MACHINE_COUNT: '1'
      HC_CONTROL_PLANE_MACHINE_TYPE: x1e.2u.4g
      HC_NODE_MACHINE_TYPE: x1e.2u.4g
      ECS_IMAGE_ID: 218ca5t7-bxf3-5dg0-852p-y703c9fe1a52
- name: ibm
  endpoint:
    params:
      IBMVPC_REGION: us-south
      IBMVPC_ZONE: us-south-1
      IBMVPC_RESOURCEGROUP: <your-resource-group-id>
      IBMVPC_NAME: ibm-vpc-0
      IBMVPC_IMAGE_ID: <you-image-id>
      IBMVPC_PROFILE: bx2-4x16
      IBMVPC_SSHKEY_ID: <your-sshkey-id>
      IBMPOWERVS_SSHKEY_NAME: <your-ssh-key>
      IBMPOWERVS_VIP: <internal-ip>
      IBMPOWERVS_VIP_EXTERNAL: <external-ip>
      IBMPOWERVS_VIP_CIDR: '29'
      IBMPOWERVS_IMAGE_NAME: <your-capi-image-name>
      IBMPOWERVS_SERVICE_INSTANCE_ID: <service-instance-id>
      IBMPOWERVS_NETWORK_NAME: <your-capi-network-name>
- name: ionos
  endpoint:
    params:
      IONOS_TOKEN: <your-token>
      IONOSCLOUD_DATACENTER_ID: <your-datacenter-id>
      CONTROL_PLANE_ENDPOINT_IP: 10.10.10.4
      CONTROL_PLANE_ENDPOINT_LOCATION: de/txl
      IONOSCLOUD_MACHINE_IMAGE_ID: <your-image-id>
      IONOSCLOUD_MACHINE_SSH_KEYS: <your-ssh-key>
- name: k0smotron
  endpoint:
    params:
      KKZONE: ''
      USER_NAME: <your-linux-user>
      PASSWORD: <your-linux-user-password>
      INSTANCES: <your-linux-ip-address>
      CONTROL_PLANE_ENDPOINT_IP: <your-control-plane-virtual-ip>
- name: kubevirt
  endpoint:
    params:
      NODE_VM_IMAGE_TEMPLATE: quay.io/capk/ubuntu-2404-container-disk:v1.32.1
      CAPK_GUEST_K8S_VERSION: ${NODE_VM_IMAGE_TEMPLATE/*:/}
      CRI_PATH: unix:///var/run/containerd/containerd.sock
- name: nutanix
  endpoint:
    params:
      NUTANIX_IMAGE_LIBRARY: your-nutanix-image-library
      NUTANIX_CAPI_IMAGE: <your-capi-image-id>
- name: opennebula
  endpoint:
    params:
      ONE_XMLRPC: http://10.2.11.40:2633/RPC2
      ONE_AUTH: oneadmin:opennebula
      MACHINE_TEMPLATE_NAME: capone131
      ROUTER_TEMPLATE_NAME: capone131-vr
      PUBLIC_NETWORK_NAME: service
      PRIVATE_NETWORK_NAME: private
      CLUSTER_NAME: one
      CCM_IMG: ghcr.io/opennebula/cloud-provider-opennebula:latest
      CONTROL_PLANE_MACHINE_COUNT: '1'
      WORKER_MACHINE_COUNT: '1'
- name: openstack
  endpoint:
    params:
      OPENSTACK_DNS_NAMESERVERS: <dns nameserver>
      OPENSTACK_FAILURE_DOMAIN: <availability zone name>
      OPENSTACK_CONTROL_PLANE_MACHINE_FLAVOR: <flavor>
      OPENSTACK_NODE_MACHINE_FLAVOR: <flavor>
      OPENSTACK_SSH_KEY_NAME: <ssh key pair name>
      OPENSTACK_EXTERNAL_NETWORK_ID: <external network ID>
- name: outscale
  endpoint:
    params:
      OSC_IOPS: <IOPS>
      OSC_VOLUME_SIZE: <VOLUME_SIZE>
      OSC_VOLUME_TYPE: <VOLUME_TYPE>
      OSC_KEYPAIR_NAME: <KEYPAIR_NAME>
      OSC_SUBREGION_NAME: <SUBREGION_NAME>
      OSC_VM_TYPE: <VM_TYPE>
      OSC_IMAGE_NAME: <IMAGE_NAME>
- name: proxmox
  endpoint:
    params:
      PROXMOX_SOURCENODE: pve
      TEMPLATE_VMID: '100'
      VM_SSH_KEYS: ssh-ed25519 ..., ssh-ed25519 ...
      CONTROL_PLANE_ENDPOINT_IP: 10.10.10.4
      NODE_IP_RANGES: '[10.10.10.5-10.10.10.50, 10.10.10.55-10.10.10.70]'
      IP_PREFIX: '24'
      BRIDGE: vmbr1
      DNS_SERVERS: '[8.8.8.8,8.8.4.4]'
      ALLOWED_NODES: '[pve1,pve2,pve3]'
- name: scaleway
  endpoint:
    params:
      SCW_ACCESS_KEY: <ACCESS_KEY>
      SCW_SECRET_KEY: <SECRET_KEY>
      SCW_PROJECT_ID: <PROJECT_ID>
      SCW_REGION: fr-par
- name: vcluster
  endpoint:
    path: /clusterctl/generate/cluster/capi-quickstart
    method: GET
    data_selector: records
    params: {}
- name: clusterctl
  endpoint:
    path: /releases/download/v1.11.2/clusterctl-linux-ppc64le
    method: GET
- name: clusterawsadm
  endpoint:
    path: /releases/download/v2.9.2/clusterawsadm-linux-amd64
    method: GET
- name: cloud-config
  endpoint:
    path: /cloud-config
    method: POST
    data_selector: cloud.conf
    params: {}
- name: scaleway-secret
  endpoint:
    path: /scaleway-secret
    method: POST
    data_selector: scaleway-secret
    params: {}
- name: clusterawsadm
  endpoint:
    path: /clusterawsadm-linux-amd64
    method: GET
    data_selector: downloads
    params: {}
- name: scaleway_credentials
  endpoint:
    path: /scaleway/credentials
    method: GET
    data_selector: credentials
    params: {}
- name: vcd_environment_variables
  endpoint:
    path: /vcd/environment_variables
    method: GET
    data_selector: environment_variables
    params: {}
- name: virtink_environment_variables
  endpoint:
    path: /virtink/environment_variables
    method: GET
    data_selector: environment_variables
    params: {}
- name: vsphere_environment_variables
  endpoint:
    path: /vsphere/environment_variables
    method: GET
    data_selector: environment_variables
    params: {}
- name: vultr_environment_variables
  endpoint:
    path: /vultr/environment_variables
    method: GET
    data_selector: environment_variables
    params: {}
- name: scaleway-secret
  endpoint:
    path: /scaleway/secret
    method: POST
- name: core_provider
  endpoint:
    path: /api/v1alpha2/coreproviders
    method: POST
    data_selector: metadata
    params: {}
- name: infrastructure_provider
  endpoint:
    path: /api/v1alpha2/infrastructureproviders
    method: POST
    data_selector: metadata
    params: {}
- name: certificate_management
  endpoint:
    path: /tasks/certs/
    method: GET
    data_selector: certificates
    params: {}
- name: MicroK8sControlPlane
  endpoint:
    path: /controlplane.cluster.x-k8s.io/v1beta1/MicroK8sControlPlane
    method: GET
    data_selector: spec
    params: {}
- name: MachineDeployment
  endpoint:
    path: /cluster.x-k8s.io/v1beta2/MachineDeployment
    method: GET
    data_selector: spec
    params: {}
- name: MicroK8sConfigTemplate
  endpoint:
    path: /bootstrap.cluster.x-k8s.io/v1beta1/MicroK8sConfigTemplate
    method: GET
    data_selector: spec
    params: {}
- name: KubeadmControlPlane
  endpoint:
    path: /kubeadmcontrolplane
    method: GET
    data_selector: spec.rollout.after
    params: {}
- name: MachineDeployment
  endpoint:
    path: /machinedeployment
    method: GET
    data_selector: spec
    params: {}
- name: etcd_client_certificate
  endpoint:
    path: /etc/kubernetes/pki/apiserver-etcd-client.crt
    method: GET
    data_selector: certificates
    params: {}
- name: etcd_client_key
  endpoint:
    path: /etc/kubernetes/pki/apiserver-etcd-client.key
    method: GET
    data_selector: keys
    params: {}
- name: etcd_ca_certificate
  endpoint:
    path: /etc/kubernetes/pki/etcd/ca.crt
    method: GET
    data_selector: ca_certificates
    params: {}
- name: infrastructure_machine_template
  endpoint:
    path: /tasks/updating-machine-templates
    method: GET
    data_selector: templates
    params: {}
- name: bootstrap_template
  endpoint:
    path: /tasks/updating-bootstrap-templates
    method: GET
    data_selector: templates
    params: {}
- name: argoCD
  endpoint:
    path: /argocd
    method: GET
    data_selector: applications
    params: {}
- name: guestbook
  endpoint:
    path: /guestbook
    method: GET
    data_selector: applications
    params: {}
- name: MachineDeployment
  endpoint:
    path: /v1alpha4/machinedeployments
    method: GET
    data_selector: items
    params: {}
- name: MachineSet
  endpoint:
    path: /v1alpha4/machinesets
    method: GET
    data_selector: items
    params: {}
- name: MachinePool
  endpoint:
    path: /v1alpha4/machinepools
    method: GET
    data_selector: items
    params: {}
- name: MachineHealthCheck
  endpoint:
    path: /api/v1beta2/machinehealthchecks
    method: GET
    data_selector: items
    params: {}
- name: KubeadmControlPlane
  endpoint:
    path: /api/v1beta2/kubeadmcontrolplanes
    method: GET
    data_selector: items
    params: {}
- name: MachineHealthCheck
  endpoint:
    path: /apis/cluster.x-k8s.io/v1beta2/machinehealthchecks
    method: POST
    data_selector: items
    params: {}
- name: KubeadmControlPlane
  endpoint:
    path: /apis/cluster.x-k8s.io/v1beta2/kubeadmcontrolplanes
    method: POST
    data_selector: items
    params: {}
- name: DrainingSucceeded condition
  endpoint:
    path: /conditions/DrainingSucceeded
    method: GET
    data_selector: conditions
    params: {}
- name: Pod eviction logs
  endpoint:
    path: /logs/pod-eviction
    method: GET
    data_selector: logs
    params: {}
- name: MachinePool
  endpoint:
    path: /tasks/experimental-features/machine-pools
    method: GET
- name: MachineSetPreflightChecks
  endpoint:
    path: /tasks/experimental-features/machineset-preflight-checks
    method: GET
- name: ClusterTopology
  endpoint:
    path: /tasks/experimental-features/cluster-class/
    method: GET
- name: RuntimeSDK
  endpoint:
    path: /tasks/experimental-features/runtime-sdk/
    method: GET
- name: Ignition Bootstrap configuration
  endpoint:
    path: /tasks/experimental-features/ignition
    method: GET
- name: cluster-api-controller
  endpoint:
    path: /cluster-api/cluster-api-controller
    method: GET
- name: metrics
  endpoint:
    path: /metrics
    method: GET
    data_selector: ''
    params: {}
- name: pprof
  endpoint:
    path: /debug/pprof/
    method: GET
    data_selector: ''
    params: {}
- name: log_level
  endpoint:
    path: /debug/flags/v
    method: PUT
    data_selector: ''
    params: {}
- name: ClusterClass
  endpoint:
    path: /cluster.x-k8s.io/v1beta2/ClusterClass
    method: POST
    data_selector: spec
    params: {}
- name: alpha_rollout
  endpoint:
    path: /clusterctl/commands/alpha-rollout
    method: GET
- name: completion
  endpoint:
    path: /clusterctl/commands/completion
    method: GET
- name: config
  endpoint:
    path: /clusterctl/commands/additional-commands#clusterctl-config-repositories
    method: GET
- name: delete
  endpoint:
    path: /clusterctl/commands/delete
    method: GET
- name: describe_cluster
  endpoint:
    path: /clusterctl/commands/describe-cluster
    method: GET
- name: generate_cluster
  endpoint:
    path: /clusterctl/commands/generate-cluster
    method: GET
- name: generate_provider
  endpoint:
    path: /clusterctl/commands/generate-provider
    method: GET
- name: generate_yaml
  endpoint:
    path: /clusterctl/commands/generate-yaml
    method: GET
- name: get_kubeconfig
  endpoint:
    path: /clusterctl/commands/get-kubeconfig
    method: GET
- name: help
  endpoint:
    path: /clusterctl/commands/additional-commands#clusterctl-help
    method: GET
- name: init
  endpoint:
    path: /clusterctl/commands/init
    method: GET
- name: init_list_images
  endpoint:
    path: /clusterctl/commands/additional-commands#clusterctl-init-list-images
    method: GET
- name: move
  endpoint:
    path: /clusterctl/commands/move
    method: GET
- name: upgrade_plan
  endpoint:
    path: /clusterctl/commands/upgrade#upgrade-plan
    method: GET
- name: upgrade_apply
  endpoint:
    path: /clusterctl/commands/upgrade#upgrade-apply
    method: GET
- name: version
  endpoint:
    path: /clusterctl/commands/additional-commands#clusterctl-version
    method: GET
- name: providers
  endpoint:
    path: /clusterctl/config/repositories
    method: GET
    data_selector: providers
    params: {}
- name: cluster_template
  endpoint:
    path: /clusterctl/generate/cluster
    method: POST
    data_selector: templates
- name: provider_components
  endpoint:
    path: /generate/provider
    method: GET
- name: yaml_processor
  endpoint:
    path: /clusterctl/generate/yaml
    method: POST
    data_selector: configuration
    params: {}
- name: kubeadmcontrolplanes
  endpoint:
    path: /kubeadmcontrolplanes
    method: GET
- name: machinedeployments
  endpoint:
    path: /machinedeployments
    method: GET
- name: my-infra-provider
  endpoint:
    path: https://github.com/myorg/myrepo/releases/latest/infrastructure-components.yaml
    method: GET
    data_selector: ''
    params: {}
- name: cluster-api
  endpoint:
    path: https://github.com/myorg/myforkofclusterapi/releases/latest/core-components.yaml
    method: GET
    data_selector: ''
    params: {}
- name: my-other-infra-provider
  endpoint:
    path: https://gitlab.example.com/api/v4/projects/myorg%2Fmyrepo/packages/generic/myrepo/v1.2.3/infrastructure-components.yaml
    method: GET
    data_selector: ''
    params: {}
- name: kubeadm
  endpoint:
    path: https://gitlab.example.com/api/v4/projects/external-packages%2Fcluster-api/packages/generic/cluster-api/v1.1.3/bootstrap-components.yaml
    method: GET
    data_selector: ''
    params: {}
- name: cluster
  endpoint:
    path: /api/v1/clusters
    method: GET
    data_selector: items
- name: machine
  endpoint:
    path: /api/v1/machines
    method: GET
    data_selector: items
- name: capi-quickstart
  endpoint:
    path: /get/kubeconfig
    method: GET
    data_selector: kubeconfig
    params: {}
- name: plugin
  endpoint:
    path: /clusterctl/plugins
    method: GET
- name: plugin
  endpoint:
    path: /plugin
    method: GET
    data_selector: plugins
    params: {}
- name: kind_cluster
  endpoint:
    path: /kind/cluster
    method: POST
    data_selector: cluster_info
- name: tilt_settings
  endpoint:
    path: /tilt/settings
    method: POST
    data_selector: settings
- name: kind-cluster
  endpoint:
    path: /kind-cluster
    method: POST
    data_selector: status
- name: tilt-settings
  endpoint:
    path: /tilt-settings
    method: GET
    data_selector: settings
- name: kind_cluster
  endpoint:
    path: /kind-cluster
    method: POST
    data_selector: cluster_info
    params: {}
- name: tilt_settings
  endpoint:
    path: /tilt-settings
    method: GET
    data_selector: settings
    params: {}
- name: Cluster
  endpoint:
    path: /api/v1/cluster
    method: GET
    data_selector: items
- name: Machine
  endpoint:
    path: /api/v1/machine
    method: GET
    data_selector: items
- name: logging
  endpoint:
    path: /explore
    method: GET
    data_selector: logs
    params: {}
- name: end_to_end_tests
  endpoint:
    path: /end-to-end-tests
    method: GET
    data_selector: tests
    params: {}
- name: supported_labels
  endpoint:
    path: /api/labels
    method: GET
    data_selector: labels
    params: {}
- name: annotations
  endpoint:
    path: /supported-annotations
    method: GET
    data_selector: annotations
    params: {}
- name: KubeadmControlPlane
  endpoint:
    path: /kubeadmcontrolplane
    method: GET
    data_selector: items
    params: {}
- name: ClusterResourceSet
  endpoint:
    path: /clusterresourcesets
    method: GET
    data_selector: items
    params: {}
- name: cert-manager
  endpoint:
    path: /install/cert-manager
    method: GET
- name: cluster-api
  endpoint:
    path: /install/cluster-api
    method: GET
- name: kubeadm-bootstrap
  endpoint:
    path: /install/kubeadm-bootstrap
    method: GET
- name: kubeadm-control-plane
  endpoint:
    path: /install/kubeadm-control-plane
    method: GET
- name: infrastructure-docker
  endpoint:
    path: /install/infrastructure-docker
    method: GET
- name: management_cluster
  endpoint:
    path: /management-cluster
    method: POST
    data_selector: cluster
- name: clusterctl
  endpoint:
    path: /init
    method: POST
- name: Cluster
  endpoint:
    path: /services/data/vXX.X/sobjects/Cluster
    method: GET
- name: vpc
  endpoint:
    path: /v1/vpcs
    method: GET
- name: powervs
  endpoint:
    path: /v1/powervs
    method: GET
- name: workload_cluster
  endpoint:
    path: /clusters
    method: POST
    data_selector: clusters
    params: {}
- name: cloud-controller-manager
  endpoint:
    path: /manifests/controller-manager/cloud-controller-manager-roles.yaml
    method: GET
- name: scaleway-secret
  endpoint:
    path: /secrets/scaleway-secret
    method: POST
- name: KubeadmConfig
  endpoint:
    path: /kubeadm/config
    method: GET
    data_selector: items
- name: DockerMachine
  endpoint:
    path: /docker/machine
    method: GET
    data_selector: items
- name: Cluster
  endpoint:
    path: /cluster
    method: GET
    data_selector: items
- name: kubelet_configuration
  endpoint:
    path: /tasks/bootstrap/kubeadm-bootstrap/kubelet-config
    method: GET
    data_selector: files
    params: {}
- name: management cluster
  endpoint:
    path: /init
    method: POST
    data_selector: response
    params: {}
- name: kind cluster
  endpoint:
    path: /create
    method: POST
    data_selector: response
    params: {}
- name: IONOS Cloud
  endpoint:
    path: /cloud
    method: GET
- name: kubelet_configuration
  endpoint:
    path: /kubelet/configuration
    method: GET
    data_selector: configuration
    params: {}
- name: scaleway-secret
  endpoint:
    path: /api/v1/namespaces/kube-system/secrets
    method: POST
    data_selector: stringData
    params: {}
- name: KubeadmConfig
  endpoint:
    path: /api/v1/kubeadmconfigs
    method: GET
    data_selector: items
    params: {}
- name: DockerCluster
  endpoint:
    path: /api/v1/dockerclusters
    method: GET
    data_selector: items
    params: {}
- name: Machine
  endpoint:
    path: /api/v1/machines
    method: GET
    data_selector: items
    params: {}
- name: KubeletConfiguration
  endpoint:
    path: /etc/kubernetes/kubelet/config.yaml
    method: PUT
    data_selector: content
    params: {}
- name: vpc
  endpoint:
    path: /v1/vpcs
    method: GET
- name: cluster
  endpoint:
    path: /generate/cluster
    method: POST
    data_selector: cluster
    params: {}
- name: scaleway-secret
  endpoint:
    path: /api/v1/namespaces/kube-system/secrets/scaleway-secret
    method: GET
- name: KubeadmConfig
  endpoint:
    path: /kubeadm-config
    method: GET
    data_selector: items
    params: {}
- name: DockerCluster
  endpoint:
    path: /docker-cluster
    method: GET
    data_selector: items
    params: {}
- name: KubeadmConfigTemplate
  endpoint:
    path: /kubeadmconfigtemplate
    method: GET
    data_selector: items
    params: {}
- name: KubeadmControlPlaneTemplate
  endpoint:
    path: /kubeadmcontrolplanetemplate
    method: GET
    data_selector: items
    params: {}
- name: IONOS Cloud
  endpoint:
    path: /
    method: GET
    data_selector: data
    params: {}
- name: clusters
  endpoint:
    path: /clusters
    method: GET
    data_selector: records
- name: scaleway-secret
  endpoint:
    path: /kubectl
    method: POST
    data_selector: metadata
- name: KubeadmConfig
  endpoint:
    path: /kubeadm/config
    method: POST
    data_selector: configurations
    params: {}
- name: DockerCluster
  endpoint:
    path: /docker/cluster
    method: POST
    data_selector: clusters
    params: {}
- name: Machine
  endpoint:
    path: /machine
    method: POST
    data_selector: machines
    params: {}
- name: kubelet_configuration
  endpoint:
    path: /etc/kubernetes/kubelet/config.yaml
    method: PUT
    data_selector: content
    params: {}
- name: kubelet_configuration
  endpoint:
    path: /etc/kubernetes/patches/kubeletconfiguration0+strategic.json
    method: GET
    data_selector: content
    params: {}
- name: management_cluster
  endpoint:
    path: /cluster-api/v1alpha4/management-cluster
    method: POST
    data_selector: status
    params: {}
- name: VPC
  endpoint:
    params:
      IBMVPC_REGION: us-south
      IBMVPC_ZONE: us-south-1
      IBMVPC_RESOURCEGROUP: <your-resource-group-id>
      IBMVPC_NAME: ibm-vpc-0
      IBMVPC_IMAGE_ID: <you-image-id>
      IBMVPC_PROFILE: bx2-4x16
      IBMVPC_SSHKEY_ID: <your-sshkey-id>
- name: PowerVS
  endpoint:
    params:
      IBMPOWERVS_SSHKEY_NAME: <your-ssh-key>
      IBMPOWERVS_VIP: <internal-ip>
      IBMPOWERVS_VIP_EXTERNAL: <external-ip>
      IBMPOWERVS_VIP_CIDR: 29
      IBMPOWERVS_IMAGE_NAME: <your-capi-image-name>
      IBMPOWERVS_SERVICE_INSTANCE_ID: <service-instance-id>
      IBMPOWERVS_NETWORK_NAME: <your-capi-network-name>
- name: scaleway-secret
  endpoint:
    path: /api/v1/namespaces/kube-system/secrets
    method: POST
    data_selector: metadata.name
    params: {}
- name: KubeadmConfig
  endpoint:
    path: /kubeadm/config
    method: GET
    data_selector: items
- name: Cluster
  endpoint:
    path: /clusters
    method: GET
    data_selector: items
- name: kubelet_configuration
  endpoint:
    path: /etc/kubernetes/kubelet/config.yaml
    method: PUT
    data_selector: content
    params: {}
- name: kubelet_patch
  endpoint:
    path: /etc/kubernetes/patches/kubeletconfiguration0+strategic.json
    method: PUT
    data_selector: content
    params: {}
- name: MicroK8sControlPlane
  endpoint:
    path: /controlplane.cluster.x-k8s.io/v1beta1
    method: POST
    data_selector: spec
    params:
      replicas: 3
      version: v1.23.0
- name: MachineDeployment
  endpoint:
    path: /cluster.x-k8s.io/v1beta2
    method: POST
    data_selector: spec
    params:
      replicas: 2
      version: v1.23.0
- name: management_cluster
  endpoint:
    path: /init
    method: POST
    data_selector: cluster
    params: {}
- name: IONOS Cloud
  endpoint:
    path: /cloud/api
    method: GET
- name: Workload Clusters
  endpoint:
    path: /RPC2
    method: POST
    data_selector: response
    params: {}
- name: scaleway-secret
  endpoint:
    path: /kube-system/secrets/scaleway-secret
    method: GET
    data_selector: stringData
- name: KubeadmConfig
  endpoint:
    path: /kubeadm/config
    method: POST
    data_selector: data
    params: {}
- name: DockerCluster
  endpoint:
    path: /docker/cluster
    method: POST
    data_selector: data
    params: {}
- name: Machine
  endpoint:
    path: /machine
    method: POST
    data_selector: data
    params: {}
- name: MicroK8sControlPlane
  endpoint:
    path: /api/v1beta1/microk8scontrolplane
    method: GET
    data_selector: spec
    params: {}
- name: MachineDeployment
  endpoint:
    path: /api/v1beta1/machinedeployment
    method: GET
    data_selector: spec
    params: {}
- name: MachineDeployment
  endpoint:
    path: /tasks/updating-machine-templates
    method: GET
    data_selector: MachineDeployments
    params: {}
- name: etcd
  endpoint:
    path: /support-for-external-etcd
    method: GET
    data_selector: etcd
    params: {}
- name: KubeadmConfig
  endpoint:
    path: /configuring-cabpk
    method: GET
    data_selector: KubeadmConfig
    params: {}
- name: IONOSCloudCluster
  endpoint:
    path: /services/data/vXX.X/sobjects/IONOSCloudCluster
    method: GET
- name: workload_cluster
  endpoint:
    path: /cluster
    method: POST
    data_selector: results
    params: {}
- name: scaleway-secret
  endpoint:
    path: /api/v1/secrets/scaleway-secret
    method: POST
    data_selector: stringData
- name: KubeadmConfig
  endpoint:
    path: /kubeadmconfig
    method: GET
    data_selector: items
    params: {}
- name: DockerCluster
  endpoint:
    path: /dockercluster
    method: GET
    data_selector: items
    params: {}
- name: Machine
  endpoint:
    path: /machine
    method: GET
    data_selector: items
    params: {}
- name: MicroK8sControlPlane
  endpoint:
    path: /api/v1beta2/microk8scontrolplanes
    method: GET
    data_selector: items
    params: {}
- name: MachineDeployment
  endpoint:
    path: /api/v1beta2/machinedeployments
    method: GET
    data_selector: items
    params: {}
- name: KubeadmControlPlane
  endpoint:
    path: /KubeadmControlPlane
    method: GET
    data_selector: records
    params: {}
- name: MachineDeployment
  endpoint:
    path: /MachineDeployment
    method: GET
    data_selector: records
    params: {}
- name: MachineDeployment
  endpoint:
    path: /path/to/machine/deployment
    method: POST
    data_selector: result
    params: {}
- name: MachineHealthCheck
  endpoint:
    path: /path/to/machine/healthcheck
    method: POST
    data_selector: result
    params: {}
- name: cluster
  endpoint:
    path: /clusters
    method: GET
    data_selector: clusters
- name: scaleway-secret
  endpoint:
    path: /api/v1/secrets/scaleway-secret
    method: POST
- name: KubeadmConfig
  endpoint:
    path: /api/v1/namespaces/default/kubeadmconfigs
    method: GET
    data_selector: items
    params: {}
- name: DockerCluster
  endpoint:
    path: /api/v1/namespaces/default/dockerclusters
    method: GET
    data_selector: items
    params: {}
- name: Machine
  endpoint:
    path: /api/v1/namespaces/default/machines
    method: GET
    data_selector: items
    params: {}
- name: MicroK8sControlPlane
  endpoint:
    path: /controlplane.cluster.x-k8s.io/v1beta1/MicroK8sControlPlane
    method: POST
    data_selector: spec.controlPlaneConfig
    params: {}
- name: MachineDeployment
  endpoint:
    path: /cluster.x-k8s.io/v1beta2/MachineDeployment
    method: POST
    data_selector: spec.template.spec
    params: {}
- name: KubeadmControlPlane
  endpoint:
    path: /kubeadmcontrolplane
    method: GET
    data_selector: spec
    params: {}
- name: MachineDeployment
  endpoint:
    path: /machinedeployment
    method: GET
    data_selector: spec
    params: {}
- name: MachineHealthCheck
  endpoint:
    path: /cluster.x-k8s.io/v1beta2/MachineHealthCheck
    method: GET
    data_selector: spec
    params: {}
- name: KubeadmControlPlane
  endpoint:
    path: /cluster.x-k8s.io/v1beta2/KubeadmControlPlane
    method: GET
    data_selector: spec
    params: {}
- name: MachinePools
  endpoint:
    path: /tasks/experimental-features/machine-pools
    method: GET
- name: ClusterClass
  endpoint:
    path: /tasks/experimental-features/cluster-class/
    method: GET
- name: Ignition Bootstrap configuration
  endpoint:
    path: /tasks/experimental-features/ignition
    method: GET
- name: Runtime SDK
  endpoint:
    path: /tasks/experimental-features/runtime-sdk/
    method: GET
- name: Cluster
  endpoint:
    path: /api/v1/cluster
    method: POST
    data_selector: spec.topology.classRef
    params: {}
- name: vpc
  endpoint:
    path: /v1/vpcs
    method: GET
- name: power_vs
  endpoint:
    path: /v1/power-vs
    method: GET
- name: workload_clusters
  endpoint:
    path: /workload_clusters
    method: POST
    data_selector: clusters
    params: {}
- name: scaleway-secret
  endpoint:
    path: /v1/secret
    method: POST
    data_selector: data
- name: MicroK8sControlPlane
  endpoint:
    path: /controlplane.cluster.x-k8s.io/v1beta1/microk8scontrolplanes
    method: GET
    data_selector: items
    params: {}
- name: MachineDeployment
  endpoint:
    path: /cluster.x-k8s.io/v1beta2/machinedeployments
    method: GET
    data_selector: items
    params: {}
- name: MicroK8sConfigTemplate
  endpoint:
    path: /bootstrap.cluster.x-k8s.io/v1beta1/microk8sconfigtemplates
    method: GET
    data_selector: items
    params: {}
- name: MachineDeployment
  endpoint:
    path: /services/data/vXX.X/sobjects/MachineDeployment
    method: GET
    data_selector: records
    params: {}
- name: MachineSet
  endpoint:
    path: /services/data/vXX.X/sobjects/MachineSet
    method: GET
    data_selector: records
    params: {}
- name: MachinePool
  endpoint:
    path: /services/data/vXX.X/sobjects/MachinePool
    method: GET
    data_selector: records
    params: {}
- name: MachineHealthCheck
  endpoint:
    path: /apis/cluster.x-k8s.io/v1beta2/machinehealthchecks
    method: POST
    data_selector: items
- name: KubeadmControlPlane
  endpoint:
    path: /apis/cluster.x-k8s.io/v1beta2/kubeadmcontrolplanes
    method: POST
    data_selector: items
- name: Cluster
  endpoint:
    path: /cluster
    method: GET
- name: ClusterClass
  endpoint:
    path: /clusterclass
    method: GET
- name: management_cluster
  endpoint:
    path: /init
    method: POST
    data_selector: cluster
    params: {}
- name: VM
  endpoint:
    path: /RPC2
    method: POST
    data_selector: VM
    params:
      MACHINE_TEMPLATE_NAME: capone131
      ROUTER_TEMPLATE_NAME: capone131-vr
      PUBLIC_NETWORK_NAME: service
      PRIVATE_NETWORK_NAME: private
      CLUSTER_NAME: one
      CCM_IMG: ghcr.io/opennebula/cloud-provider-opennebula:latest
      CONTROL_PLANE_MACHINE_COUNT: '1'
      WORKER_MACHINE_COUNT: '1'
- name: KubeadmConfig
  endpoint:
    path: /kubeadmconfig
    method: POST
    data_selector: items
    params: {}
- name: DockerCluster
  endpoint:
    path: /dockercluster
    method: POST
    data_selector: items
    params: {}
- name: Machine
  endpoint:
    path: /machine
    method: POST
    data_selector: items
    params: {}
- name: MicroK8sControlPlane
  endpoint:
    path: /controlplane.cluster.x-k8s.io/v1beta1/MicroK8sControlPlane
    method: GET
    data_selector: spec.controlPlaneConfig
    params: {}
- name: MachineDeployment
  endpoint:
    path: /cluster.x-k8s.io/v1beta2/MachineDeployment
    method: GET
    data_selector: spec
    params: {}
- name: MachineTemplate
  endpoint:
    path: /path/to/machinetemplate
    method: POST
    data_selector: template
    params: {}
- name: KubeadmControlPlane
  endpoint:
    path: /path/to/kubeadmcontrolplane
    method: PATCH
    data_selector: spec
    params: {}
- name: MachineDeployment
  endpoint:
    path: /api/v1/MachineDeployment
    method: GET
    data_selector: items
    params: {}
- name: MachineSet
  endpoint:
    path: /api/v1/MachineSet
    method: GET
    data_selector: items
    params: {}
- name: MachinePool
  endpoint:
    path: /api/v1/MachinePool
    method: GET
    data_selector: items
    params: {}
- name: MachineHealthCheck
  endpoint:
    path: /apis/cluster.x-k8s.io/v1beta2/machinehealthchecks
    method: POST
    data_selector: items
    params: {}
- name: KubeadmControlPlane
  endpoint:
    path: /apis/cluster.x-k8s.io/v1beta2/kubeadmcontrolplanes
    method: POST
    data_selector: items
    params: {}
- name: my-docker-cluster
  endpoint:
    path: /api/v1/namespaces/default/clusters/my-docker-cluster
    method: GET
    data_selector: spec.topology
    params: {}
- name: httpProxy
  endpoint:
    path: /spec/template/spec/httpProxy/url
    method: add
    data_selector: url
    params: {}
- name: mdConfig
  endpoint:
    path: /spec/template/spec/customImage
    method: add
    data_selector: osImage
    params: {}
- name: dnsServers
  endpoint:
    path: /spec/template/spec/dnsServers
    method: add
    data_selector: dnsServers
    params: {}
- name: dnsServer
  endpoint:
    path: /spec/template/spec/dnsServer
    method: add
    data_selector: dnsServers[0]
    params: {}
- name: local
  endpoint:
    path: /spec/template/spec/kubeadmConfigSpec/clusterConfiguration/imageRepository
    method: add
    data_selector: value
    params: {}
- name: management_cluster
  endpoint:
    path: /clusterctl/init
    method: POST
- name: IONOS Cloud
  endpoint:
    path: /
    method: POST
    data_selector: data
    params:
      token: <your-token>
      datacenter_id: <your-datacenter-id>
- name: vm
  endpoint:
    path: /v1/vm
    method: GET
    data_selector: records
    params: {}
- name: router
  endpoint:
    path: /v1/router
    method: GET
    data_selector: records
    params: {}
- name: scaleway-secret
  endpoint:
    path: /v1/secrets
    method: POST
    data_selector: data
    params: {}
- name: MicroK8sControlPlane
  endpoint:
    path: /kind/MicroK8sControlPlane
    method: POST
    data_selector: spec
    params: {}
- name: MachineDeployment
  endpoint:
    path: /kind/MachineDeployment
    method: POST
    data_selector: spec
    params: {}
- name: MicroK8sConfigTemplate
  endpoint:
    path: /kind/MicroK8sConfigTemplate
    method: POST
    data_selector: spec
    params: {}
- name: MachineTemplate
  endpoint:
    path: /services/data/vXX.X/sobjects/MachineTemplate
    method: POST
- name: KubeadmControlPlane
  endpoint:
    path: /services/data/vXX.X/sobjects/KubeadmControlPlane
    method: PATCH
- name: MachineDeployment
  endpoint:
    path: /services/data/vXX.X/sobjects/MachineDeployment
    method: PATCH
- name: MachineDeployment
  endpoint:
    path: /v1alpha4/machinedeployments
    method: POST
    data_selector: items
- name: MachineHealthCheck
  endpoint:
    path: /apis/cluster.x-k8s.io/v1beta2/machinehealthchecks
    method: GET
    data_selector: items
    params: {}
- name: KubeadmControlPlane
  endpoint:
    path: /apis/cluster.x-k8s.io/v1beta2/kubeadmcontrolplanes
    method: GET
    data_selector: items
    params: {}
- name: Cluster
  endpoint:
    path: /clusters
    method: POST
    data_selector: metadata.name
- name: ClusterClass
  endpoint:
    path: /clusterclasses
    method: POST
    data_selector: metadata.name
- name: httpProxy
  endpoint:
    path: /spec/template/spec/httpProxy/url
    method: add
    data_selector: url
    params: {}
- name: mdConfig
  endpoint:
    path: /spec/template/spec/customImage
    method: add
    data_selector: osImage
    params: {}
- name: dnsServers
  endpoint:
    path: /spec/template/spec/dnsServers
    method: add
    data_selector: dnsServers
    params: {}
- name: dnsServer
  endpoint:
    path: /spec/template/spec/dnsServer
    method: add
    data_selector: dnsServers[0]
    params: {}
- name: vpc
  endpoint:
    params:
      IBMVPC_REGION: us-south
      IBMVPC_ZONE: us-south-1
      IBMVPC_RESOURCEGROUP: <your-resource-group-id>
      IBMVPC_NAME: ibm-vpc-0
      IBMVPC_IMAGE_ID: <you-image-id>
      IBMVPC_PROFILE: bx2-4x16
      IBMVPC_SSHKEY_ID: <your-sshkey-id>
- name: powervs
  endpoint:
    params:
      IBMPOWERVS_SSHKEY_NAME: <your-ssh-key>
      IBMPOWERVS_VIP: <internal-ip>
      IBMPOWERVS_VIP_EXTERNAL: <external-ip>
      IBMPOWERVS_VIP_CIDR: 29
      IBMPOWERVS_IMAGE_NAME: <your-capi-image-name>
      IBMPOWERVS_SERVICE_INSTANCE_ID: <service-instance-id>
      IBMPOWERVS_NETWORK_NAME: <your-capi-network-name>
- name: ionos-cloud
  endpoint:
    params:
      IONOS_TOKEN: <your-token>
      IONOSCLOUD_DATACENTER_ID: <your-datacenter-id>
      CONTROL_PLANE_ENDPOINT_IP: 10.10.10.4
      CONTROL_PLANE_ENDPOINT_LOCATION: de/txl
      IONOSCLOUD_MACHINE_IMAGE_ID: <your-image-id>
      IONOSCLOUD_MACHINE_SSH_KEYS: <your-ssh-key>
- name: cluster
  endpoint:
    path: /clusters
    method: GET
    data_selector: clusters
- name: DockerCluster
  endpoint:
    path: /infrastructure.cluster.x-k8s.io/v1beta2/DockerClusters
    method: GET
    data_selector: items
- name: Cluster
  endpoint:
    path: /cluster.x-k8s.io/v1beta2/Clusters
    method: GET
    data_selector: items
- name: KubeadmConfig
  endpoint:
    path: /bootstrap.cluster.x-k8s.io/v1beta2/KubeadmConfigs
    method: GET
    data_selector: items
- name: DockerMachine
  endpoint:
    path: /infrastructure.cluster.x-k8s.io/v1beta2/DockerMachines
    method: GET
    data_selector: items
- name: Machine
  endpoint:
    path: /cluster.x-k8s.io/v1beta2/Machines
    method: GET
    data_selector: items
- name: MicroK8sControlPlane
  endpoint:
    path: /api/v1beta1/microk8scontrolplanes
    method: POST
    data_selector: spec
    params: {}
- name: MachineDeployment
  endpoint:
    path: /api/v1beta1/machinedeployments
    method: POST
    data_selector: spec
    params: {}
- name: MicroK8sConfigTemplate
  endpoint:
    path: /api/v1beta1/microk8sconfigtemplates
    method: POST
    data_selector: spec
    params: {}
- name: machine_health_check
  endpoint:
    path: /services/data/vXX.X/machineHealthCheck
    method: GET
    data_selector: records
    params: {}
- name: Cluster
  endpoint:
    path: /apis/cluster.x-k8s.io/v1beta2/clusters
    method: POST
    data_selector: spec
- name: ClusterClass
  endpoint:
    path: /apis/cluster.x-k8s.io/v1beta2/clusterclasses
    method: POST
    data_selector: spec
- name: docker-clusterclass
  endpoint:
    path: /clusterclasses/docker-clusterclass-v0.1.0
    method: GET
    data_selector: spec
    params: {}
- name: azure-clusterclass
  endpoint:
    path: /clusterclasses/azure-clusterclass-v0.1.0
    method: GET
    data_selector: spec
    params: {}
- name: before-cluster-create
  endpoint:
    path: /before-cluster-create
    method: POST
    data_selector: request
    params: {}
- name: before-cluster-upgrade
  endpoint:
    path: /before-cluster-upgrade
    method: POST
    data_selector: request
    params: {}
- name: management_cluster
  endpoint:
    path: /cluster-api/management
    method: POST
    data_selector: clusters
    params: {}
- name: vpc
  endpoint:
    path: /v1/vpcs
    method: GET
- name: powerVS
  endpoint:
    path: /v1/powervs
    method: GET
- name: workload_clusters
  endpoint:
    path: /workload_clusters
    method: GET
    data_selector: records
- name: scaleway-secret
  endpoint:
    path: /scaleway/secret
    method: POST
    data_selector: data
- name: DockerCluster
  endpoint:
    path: /api/v1beta2/DockerCluster
    method: GET
    data_selector: items
- name: Cluster
  endpoint:
    path: /api/v1beta2/Cluster
    method: GET
    data_selector: items
- name: KubeadmConfig
  endpoint:
    path: /api/v1beta2/KubeadmConfig
    method: GET
    data_selector: items
- name: DockerMachine
  endpoint:
    path: /api/v1beta2/DockerMachine
    method: GET
    data_selector: items
- name: Machine
  endpoint:
    path: /api/v1beta2/Machine
    method: GET
    data_selector: items
- name: MicroK8sControlPlane
  endpoint:
    path: /api/v1beta1/microk8scontrolplanes
    method: GET
    data_selector: items
    params: {}
- name: MachineDeployment
  endpoint:
    path: /api/v1beta1/machinedeployments
    method: GET
    data_selector: items
    params: {}
- name: KubeadmControlPlane
  endpoint:
    path: /kubeadmcontrolplane
    method: GET
    data_selector: spec
    params: {}
- name: MachineDeployment
  endpoint:
    path: /machinedeployment
    method: GET
    data_selector: spec
    params: {}
- name: MachineHealthCheck
  endpoint:
    path: /machinehealthcheck
    method: GET
    data_selector: spec
    params: {}
- name: MachineDeployment
  endpoint:
    annotations:
      cluster.x-k8s.io/cluster-api-autoscaler-node-group-max-size: '5'
      cluster.x-k8s.io/cluster-api-autoscaler-node-group-min-size: '0'
      capacity.cluster-autoscaler.kubernetes.io/memory: 128G
      capacity.cluster-autoscaler.kubernetes.io/cpu: '16'
      capacity.cluster-autoscaler.kubernetes.io/ephemeral-disk: 100Gi
      capacity.cluster-autoscaler.kubernetes.io/maxPods: '200'
      capacity.cluster-autoscaler.kubernetes.io/gpu-type: nvidia.com/gpu
      capacity.cluster-autoscaler.kubernetes.io/gpu-count: '2'
- name: MachineSet
  endpoint:
    annotations:
      cluster.x-k8s.io/cluster-api-autoscaler-node-group-max-size: '5'
      cluster.x-k8s.io/cluster-api-autoscaler-node-group-min-size: '0'
      capacity.cluster-autoscaler.kubernetes.io/memory: 128G
      capacity.cluster-autoscaler.kubernetes.io/cpu: '16'
      capacity.cluster-autoscaler.kubernetes.io/labels: key1=value1,key2=value2
      capacity.cluster-autoscaler.kubernetes.io/taints: key1=value1:NoSchedule,key2=value2:NoExecute
- name: MachineHealthCheck
  endpoint:
    path: /api/v1beta2/MachineHealthCheck
    method: GET
    data_selector: items
    params: {}
- name: KubeadmControlPlane
  endpoint:
    path: /api/v1beta2/KubeadmControlPlane
    method: GET
    data_selector: items
    params: {}
- name: MachinePool
  endpoint:
    path: /tasks/experimental-features/machine-pools
    method: GET
    data_selector: records
    params: {}
- name: MachineSetPreflightChecks
  endpoint:
    path: /tasks/experimental-features/machineset-preflight-checks
    method: GET
    data_selector: records
    params: {}
- name: ClusterClass
  endpoint:
    path: /tasks/experimental-features/cluster-class/
    method: GET
    data_selector: records
    params: {}
- name: Cluster
  endpoint:
    path: /api/v1/cluster
    method: GET
    data_selector: items
- name: ClusterClass
  endpoint:
    path: /api/v1/clusterclass
    method: GET
    data_selector: items
- name: ClusterClass
  endpoint:
    path: /clusterclasses
    method: GET
    data_selector: items
- name: cluster
  endpoint:
    path: /spec/topology
    method: PATCH
    data_selector: spec
    params: {}
- name: BeforeClusterCreate
  endpoint:
    path: /hooks.runtime.cluster.x-k8s.io/v1alpha1/BeforeClusterCreate
    method: POST
- name: BeforeClusterUpgrade
  endpoint:
    path: /hooks.runtime.cluster.x-k8s.io/v1alpha1/BeforeClusterUpgrade
    method: POST
- name: AfterControlPlaneUpgrade
  endpoint:
    path: /hooks.runtime.cluster.x-k8s.io/v1alpha1/AfterControlPlaneUpgrade
    method: POST
- name: AfterClusterUpgrade
  endpoint:
    path: /hooks.runtime.cluster.x-k8s.io/v1alpha1/AfterClusterUpgrade
    method: POST
- name: BeforeClusterDelete
  endpoint:
    path: /hooks.runtime.cluster.x-k8s.io/v1alpha1/BeforeClusterDelete
    method: POST
- name: IONOSCloudCluster
  endpoint:
    path: /
    method: POST
- name: ironics
  endpoint:
    path: /images/ironic-python-agent.kernel
    method: GET
    data_selector: kernel_url
- name: ironic_inspector
  endpoint:
    path: /images/ironic-python-agent.initramfs
    method: GET
    data_selector: ramdisk_url
- name: ironic
  endpoint:
    path: /v1/
    method: GET
    data_selector: ironic_url
- name: ironic_inspector_endpoint
  endpoint:
    path: /v1/
    method: GET
    data_selector: ironic_inspector_url
- name: scaleway-secret
  endpoint:
    path: /api/v1/secrets/scaleway-secret
    method: GET
    data_selector: data
    params: {}
- name: MicroK8sControlPlane
  endpoint:
    path: /api/v1beta1/microk8scontrolplanes
    method: POST
    data_selector: spec.controlPlaneConfig
    params: {}
- name: MachineDeployment
  endpoint:
    path: /api/v1beta2/machinedeployments
    method: POST
    data_selector: spec.template.spec
    params: {}
- name: KubeadmControlPlane
  endpoint:
    path: /kubeadmcontrolplane
    method: POST
    data_selector: spec
    params: {}
- name: MachineDeployment
  endpoint:
    path: /machinedeployment
    method: POST
    data_selector: spec
    params: {}
- name: MachineDeployment
  endpoint:
    annotations:
      cluster.x-k8s.io/cluster-api-autoscaler-node-group-max-size: '5'
      cluster.x-k8s.io/cluster-api-autoscaler-node-group-min-size: '0'
      capacity.cluster-autoscaler.kubernetes.io/memory: 128G
      capacity.cluster-autoscaler.kubernetes.io/cpu: '16'
      capacity.cluster-autoscaler.kubernetes.io/ephemeral-disk: 100Gi
      capacity.cluster-autoscaler.kubernetes.io/maxPods: '200'
      capacity.cluster-autoscaler.kubernetes.io/gpu-type: nvidia.com/gpu
      capacity.cluster-autoscaler.kubernetes.io/gpu-count: '2'
- name: Cluster
  endpoint:
    spec:
      topology:
        class: quick-start
        version: v1.24.0
        controlPlane:
          replicas: 1
        workers:
          machineDeployments:
          - class: default-worker
            name: linux
- name: MachineHealthCheck
  endpoint:
    path: /apis/cluster.x-k8s.io/v1beta2/machinehealthchecks
    method: GET
    data_selector: items
    params: {}
- name: KubeadmControlPlane
  endpoint:
    path: /apis/cluster.x-k8s.io/v1beta2/kubeadmcontrolplanes
    method: GET
    data_selector: items
    params: {}
- name: my-docker-cluster
  endpoint:
    path: /api/v1/namespaces/default/clusters/my-docker-cluster
    method: GET
    data_selector: spec.topology
    params: {}
- name: docker-clusterclass
  endpoint:
    path: /cluster.x-k8s.io/v1beta2/docker-clusterclass
    method: GET
- name: azure-clusterclass
  endpoint:
    path: /cluster.x-k8s.io/v1beta2/azure-clusterclass
    method: GET
- name: ExtensionConfig
  endpoint:
    path: /api/v1/namespaces/default/services/https:webhook-service:443/proxy/hooks.runtime.cluster.x-k8s.io/v1alpha1/discovery
    method: POST
    data_selector: items
    params: {}
- name: BeforeClusterCreate
  endpoint:
    path: /hooks/runtime/cluster.x-k8s.io/v1alpha1/BeforeClusterCreate
    method: POST
    data_selector: status
    params: {}
- name: AfterControlPlaneInitialized
  endpoint:
    path: /hooks/runtime/cluster.x-k8s.io/v1alpha1/AfterControlPlaneInitialized
    method: POST
    data_selector: status
    params: {}
- name: BeforeClusterUpgrade
  endpoint:
    path: /hooks/runtime/cluster.x-k8s.io/v1alpha1/BeforeClusterUpgrade
    method: POST
    data_selector: status
    params:
      fromKubernetesVersion: v1.21.2
      toKubernetesVersion: v1.22.0
- name: AfterControlPlaneUpgrade
  endpoint:
    path: /hooks/runtime/cluster.x-k8s.io/v1alpha1/AfterControlPlaneUpgrade
    method: POST
    data_selector: status
    params:
      kubernetesVersion: v1.22.0
- name: AfterClusterUpgrade
  endpoint:
    path: /hooks/runtime/cluster.x-k8s.io/v1alpha1/AfterClusterUpgrade
    method: POST
    data_selector: status
    params:
      kubernetesVersion: v1.22.0
- name: BeforeClusterDelete
  endpoint:
    path: /hooks/runtime/cluster.x-k8s.io/v1alpha1/BeforeClusterDelete
    method: POST
    data_selector: status
    params: {}
- name: Cluster
  endpoint:
    path: /clusters
    method: GET
    data_selector: items
- name: cluster
  endpoint:
    path: /v1/clusters
    method: POST
    data_selector: cluster
    params:
      IBMCLOUD_API_KEY: <your_api_key>
- name: workload_cluster
  endpoint:
    path: /clusterctl/generate
    method: POST
    data_selector: cluster
    params:
      cluster_name: capi-quickstart
      kubernetes_version: v1.34.0
      control_plane_machine_count: '3'
      worker_machine_count: '3'
- name: MicroK8sControlPlane
  endpoint:
    path: /api/v1/microk8s/controlplane
    method: GET
    data_selector: controlPlaneConfig
    params: {}
- name: MachineDeployment
  endpoint:
    path: /api/v1/microk8s/machinedeployment
    method: GET
    data_selector: spec
    params: {}
- name: MachineDeployment
  endpoint:
    params:
      annotations:
        cluster.x-k8s.io/cluster-api-autoscaler-node-group-max-size: '5'
        cluster.x-k8s.io/cluster-api-autoscaler-node-group-min-size: '0'
        capacity.cluster-autoscaler.kubernetes.io/memory: 128G
        capacity.cluster-autoscaler.kubernetes.io/cpu: '16'
        capacity.cluster-autoscaler.kubernetes.io/ephemeral-disk: 100Gi
        capacity.cluster-autoscaler.kubernetes.io/maxPods: '200'
        capacity.cluster-autoscaler.kubernetes.io/gpu-type: nvidia.com/gpu
        capacity.cluster-autoscaler.kubernetes.io/gpu-count: '2'
- name: capi-quickstart-node-unhealthy-5m
  endpoint:
    path: /apis/cluster.x-k8s.io/v1beta2/machinehealthchecks
    method: POST
    data_selector: spec
    params: {}
- name: capi-quickstart-kcp-unhealthy-5m
  endpoint:
    path: /apis/cluster.x-k8s.io/v1beta2/machinehealthchecks
    method: POST
    data_selector: spec
    params: {}
- name: cluster
  endpoint:
    path: /api/v1/clusters
    method: GET
    data_selector: clusters
    params: {}
- name: clusterclass
  endpoint:
    path: /api/v1/clusterclasses
    method: GET
    data_selector: clusterclasses
    params: {}
- name: httpProxy
  endpoint:
    path: /spec/template/spec/httpProxy/url
    method: add
    data_selector: url
    params: {}
- name: mdConfig
  endpoint:
    path: /spec/template/spec/customImage
    method: add
    data_selector: osImage
    params: {}
- name: dnsServers
  endpoint:
    path: /spec/template/spec/dnsServers
    method: add
    data_selector: dnsServers
    params: {}
- name: BeforeClusterCreateRequest
  endpoint:
    path: /hooks.runtime.cluster.x-k8s.io/v1alpha1/beforeclustercreate
    method: POST
    data_selector: settings
- name: AfterControlPlaneInitializedRequest
  endpoint:
    path: /hooks.runtime.cluster.x-k8s.io/v1alpha1/aftercontrolplaneinitialized
    method: POST
    data_selector: settings
- name: BeforeClusterUpgradeRequest
  endpoint:
    path: /hooks.runtime.cluster.x-k8s.io/v1alpha1/beforeclusterupgrade
    method: POST
    data_selector: settings
- name: AfterControlPlaneUpgradeRequest
  endpoint:
    path: /hooks.runtime.cluster.x-k8s.io/v1alpha1/aftercontrolplaneupgrade
    method: POST
    data_selector: settings
- name: AfterClusterUpgradeRequest
  endpoint:
    path: /hooks.runtime.cluster.x-k8s.io/v1alpha1/afterclusterupgrade
    method: POST
    data_selector: settings
- name: BeforeClusterDeleteRequest
  endpoint:
    path: /hooks.runtime.cluster.x-k8s.io/v1alpha1/beforeclusterdelete
    method: POST
    data_selector: settings
- name: workload_cluster
  endpoint:
    path: /api/v1/namespaces/kube-system/services/kube-dns:dns/proxy
    method: GET
    data_selector: cluster_info
- name: metrics
  endpoint:
    path: /metrics
    method: GET
- name: pprof
  endpoint:
    path: /debug/pprof
    method: GET
- name: loglevel
  endpoint:
    path: /debug/flags/v
    method: PUT
- name: management_cluster
  endpoint:
    path: /clusterctl/init
    method: POST
- name: providers
  endpoint:
    path: /reference/providers
    method: GET
- name: IONOS Cloud
  endpoint:
    path: /
    method: GET
    data_selector: resources
    params: {}
- name: workload_clusters
  endpoint:
    path: /workload_clusters
    method: GET
    data_selector: clusters
    params: {}
- name: scaleway-secret
  endpoint:
    path: /api/v1/namespaces/kube-system/secrets/scaleway-secret
    method: POST
    data_selector: stringData
    params: {}
- name: KubeadmConfig
  endpoint:
    path: /kubeadm/config
    method: GET
    data_selector: items
- name: DockerCluster
  endpoint:
    path: /dockercluster
    method: GET
    data_selector: items
- name: Machine
  endpoint:
    path: /machine
    method: GET
    data_selector: items
- name: MicroK8sControlPlane
  endpoint:
    path: /api/v1/microk8scontrolplanes
    method: GET
    data_selector: items
- name: MachineDeployment
  endpoint:
    path: /api/v1/machinedeployments
    method: GET
    data_selector: items
- name: MachineDeployment
  endpoint:
    path: /machines/deployments
    method: POST
    data_selector: metadata.annotations
    params:
      annotations:
        cluster.x-k8s.io/cluster-api-autoscaler-node-group-max-size: '5'
        cluster.x-k8s.io/cluster-api-autoscaler-node-group-min-size: '0'
        capacity.cluster-autoscaler.kubernetes.io/memory: 128G
        capacity.cluster-autoscaler.kubernetes.io/cpu: '16'
        capacity.cluster-autoscaler.kubernetes.io/ephemeral-disk: 100Gi
        capacity.cluster-autoscaler.kubernetes.io/maxPods: '200'
        capacity.cluster-autoscaler.kubernetes.io/gpu-type: nvidia.com/gpu
        capacity.cluster-autoscaler.kubernetes.io/gpu-count: '2'
- name: MachineSet
  endpoint:
    path: /machines/sets
    method: POST
    data_selector: metadata.annotations
    params: {}
- name: MachineHealthCheck
  endpoint:
    path: /cluster-api/machinehealthchecks
    method: POST
    data_selector: spec
    params: {}
- name: KubeadmControlPlane
  endpoint:
    path: /cluster-api/kubeadmcontrolplanes
    method: POST
    data_selector: spec
    params: {}
- name: MachinePool
  endpoint:
    path: /tasks/experimental-features/machine-pools
    method: GET
    data_selector: records
    params: {}
- name: MachineSetPreflightChecks
  endpoint:
    path: /tasks/experimental-features/machineset-preflight-checks
    method: GET
    data_selector: records
    params: {}
- name: ClusterTopology
  endpoint:
    path: /tasks/experimental-features/cluster-class/
    method: GET
    data_selector: records
    params: {}
- name: RuntimeSDK
  endpoint:
    path: /tasks/experimental-features/runtime-sdk/
    method: GET
    data_selector: records
    params: {}
- name: Ignition
  endpoint:
    path: /tasks/experimental-features/ignition
    method: GET
    data_selector: records
    params: {}
- name: Cluster
  endpoint:
    path: /api/v1/namespaces/default/clusters/my-docker-cluster
    method: GET
    data_selector: spec
    params: {}
- name: ClusterClass
  endpoint:
    path: /api/v1/namespaces/default/clusterclasses/docker-clusterclass-v0.1.0
    method: GET
    data_selector: spec
    params: {}
- name: httpProxy
  endpoint:
    path: /spec/template/spec/httpProxy/url
    method: add
    data_selector: url
    params: {}
- name: mdConfig
  endpoint:
    path: /spec/template/spec/customImage
    method: add
    data_selector: osImage
    params: {}
- name: dnsServers
  endpoint:
    path: /spec/template/spec/dnsServers
    method: add
    data_selector: dnsServers
    params: {}
- name: firstDnsServer
  endpoint:
    path: /spec/template/spec/dnsServer
    method: add
    data_selector: dnsServers[0]
    params: {}
- name: BeforeClusterCreateRequest
  endpoint:
    path: /hooks.runtime.cluster.x-k8s.io/v1alpha1
    method: POST
    data_selector: status
    params: {}
- name: AfterControlPlaneInitializedRequest
  endpoint:
    path: /hooks.runtime.cluster.x-k8s.io/v1alpha1
    method: POST
    data_selector: status
    params: {}
- name: BeforeClusterUpgradeRequest
  endpoint:
    path: /hooks.runtime.cluster.x-k8s.io/v1alpha1
    method: POST
    data_selector: status
    params: {}
- name: AfterControlPlaneUpgradeRequest
  endpoint:
    path: /hooks.runtime.cluster.x-k8s.io/v1alpha1
    method: POST
    data_selector: status
    params: {}
- name: AfterClusterUpgradeRequest
  endpoint:
    path: /hooks.runtime.cluster.x-k8s.io/v1alpha1
    method: POST
    data_selector: status
    params: {}
- name: BeforeClusterDeleteRequest
  endpoint:
    path: /hooks.runtime.cluster.x-k8s.io/v1alpha1
    method: POST
    data_selector: status
    params: {}
- name: GeneratePatchesRequest
  endpoint:
    path: /hooks.runtime.cluster.x-k8s.io/v1alpha1
    method: POST
    data_selector: items
    params: {}
- name: ValidateTopologyRequest
  endpoint:
    path: /hooks.runtime.cluster.x-k8s.io/v1alpha1
    method: POST
    data_selector: status
    params: {}
- name: DiscoverVariablesRequest
  endpoint:
    path: /hooks.runtime.cluster.x-k8s.io/v1alpha1
    method: POST
    data_selector: settings
    params: {}
- name: DiscoverVariablesResponse
  endpoint:
    path: /hooks.runtime.cluster.x-k8s.io/v1alpha1
    method: GET
    data_selector: variables
    params: {}
- name: metrics
  endpoint:
    path: /metrics
    method: GET
    data_selector: ''
    params: {}
- name: pprof
  endpoint:
    path: /debug/pprof/*
    method: GET
    data_selector: ''
    params: {}
- name: log_level
  endpoint:
    path: /debug/flags/v
    method: PUT
    data_selector: ''
    params: {}
- name: ClusterClass
  endpoint:
    path: /cluster.x-k8s.io/v1beta2/ClusterClass
    method: GET
- name: Cluster
  endpoint:
    path: /cluster.x-k8s.io/v1beta2/Cluster
    method: GET
- name: management_cluster
  endpoint:
    path: /cluster-api/management-cluster
    method: POST
    data_selector: cluster
- name: vpc
  endpoint:
    path: /v1/vpcs
    method: GET
    data_selector: resources
    params: {}
- name: powervs
  endpoint:
    path: /v1/powervs
    method: GET
    data_selector: resources
    params: {}
- name: workload_clusters
  endpoint:
    path: /clusters
    method: GET
    data_selector: clusters
    params: {}
- name: scaleway-secret
  endpoint:
    path: /api/v1/namespaces/kube-system/secrets
    method: POST
    data_selector: metadata.name
    params: {}
- name: KubeadmConfig
  endpoint:
    path: /api/bootstrap.cluster.x-k8s.io/v1beta2/kubeadmconfigs
    method: GET
    data_selector: items
    params: {}
- name: DockerCluster
  endpoint:
    path: /api/infrastructure.cluster.x-k8s.io/v1beta2/dockerclusters
    method: GET
    data_selector: items
    params: {}
- name: Cluster
  endpoint:
    path: /api/cluster.x-k8s.io/v1beta2/clusters
    method: GET
    data_selector: items
    params: {}
- name: Machine
  endpoint:
    path: /api/cluster.x-k8s.io/v1beta2/machines
    method: GET
    data_selector: items
    params: {}
- name: MicroK8sControlPlane
  endpoint:
    path: /controlplane.cluster.x-k8s.io/v1beta1/microk8scontrolplanes
    method: POST
    data_selector: spec
    params: {}
- name: MachineDeployment
  endpoint:
    path: /cluster.x-k8s.io/v1beta2/machinedeployments
    method: POST
    data_selector: spec
    params: {}
- name: MachineTemplate
  endpoint:
    path: /api/v1/machinetemplates
    method: GET
    data_selector: items
    params: {}
- name: KubeadmControlPlane
  endpoint:
    path: /api/v1/kubeadmcontrolplanes
    method: GET
    data_selector: items
    params: {}
- name: MachineDeployment
  endpoint:
    path: /api/v1/machinedeployments
    method: GET
    data_selector: items
    params: {}
- name: MachineSet
  endpoint:
    path: /api/v1/machinesets
    method: GET
    data_selector: items
    params: {}
- name: MachineDeployment
  endpoint:
    path: /cluster-api/machine-deployment
    method: POST
    data_selector: machineDeployments
    params: {}
- name: MachineSet
  endpoint:
    path: /cluster-api/machine-set
    method: POST
    data_selector: machineSets
    params: {}
- name: MachineHealthCheck
  endpoint:
    path: /cluster-api/machine-health-check
    method: POST
    data_selector: machineHealthChecks
    params: {}
- name: MachineHealthCheck
  endpoint:
    path: /services/data/vXX.X/sobjects/MachineHealthCheck
    method: GET
    data_selector: records
- name: KubeadmControlPlane
  endpoint:
    path: /services/data/vXX.X/sobjects/KubeadmControlPlane
    method: GET
    data_selector: records
- name: machine_pool
  endpoint:
    path: /tasks/experimental-features/machine-pools
    method: GET
    data_selector: records
- name: machine_set_preflight_checks
  endpoint:
    path: /tasks/experimental-features/machineset-preflight-checks
    method: GET
    data_selector: records
- name: cluster_class
  endpoint:
    path: /tasks/experimental-features/cluster-class
    method: GET
    data_selector: records
- name: Cluster
  endpoint:
    path: /cluster
    method: GET
    data_selector: items
- name: ClusterClass
  endpoint:
    path: /clusterclass
    method: GET
    data_selector: items
- name: ClusterClass
  endpoint:
    path: /clusterClasses
    method: GET
    data_selector: items
- name: KubeadmConfigTemplate
  endpoint:
    path: /kubeadmConfigTemplates
    method: GET
    data_selector: items
- name: BeforeClusterCreateRequest
  endpoint:
    path: /hooks/runtime/cluster/x-k8s.io/v1alpha1/before-cluster-create
    method: POST
    data_selector: status
    params: {}
- name: AfterControlPlaneInitializedRequest
  endpoint:
    path: /hooks/runtime/cluster/x-k8s.io/v1alpha1/after-control-plane-initialized
    method: POST
    data_selector: status
    params: {}
- name: BeforeClusterUpgradeRequest
  endpoint:
    path: /hooks/runtime/cluster/x-k8s.io/v1alpha1/before-cluster-upgrade
    method: POST
    data_selector: status
    params: {}
- name: AfterControlPlaneUpgradeRequest
  endpoint:
    path: /hooks/runtime/cluster/x-k8s.io/v1alpha1/after-control-plane-upgrade
    method: POST
    data_selector: status
    params: {}
- name: AfterClusterUpgradeRequest
  endpoint:
    path: /hooks/runtime/cluster/x-k8s.io/v1alpha1/after-cluster-upgrade
    method: POST
    data_selector: status
    params: {}
- name: BeforeClusterDeleteRequest
  endpoint:
    path: /hooks/runtime/cluster/x-k8s.io/v1alpha1/before-cluster-delete
    method: POST
    data_selector: status
    params: {}
- name: metrics
  endpoint:
    path: /metrics
    method: GET
    data_selector: metrics
- name: pprof
  endpoint:
    path: /debug/pprof/
    method: GET
    data_selector: pprof
- name: loglevel
  endpoint:
    path: /debug/flags/v
    method: PUT
    data_selector: loglevel
- name: ClusterClass
  endpoint:
    path: /clusterclasses
    method: GET
    data_selector: items
- name: Cluster
  endpoint:
    path: /clusters
    method: GET
    data_selector: items
- name: provider
  endpoint:
    path: /generate/provider
    method: GET
    data_selector: resources
    params: {}
- name: cluster
  endpoint:
    path: /generate/cluster
    method: GET
    data_selector: resources
    params: {}
- name: management_cluster
  endpoint:
    path: /initialize
    method: POST
    data_selector: result
    params: {}
- name: VPC
  endpoint:
    params:
      IBMVPC_REGION: us-south
      IBMVPC_ZONE: us-south-1
      IBMVPC_RESOURCEGROUP: <your-resource-group-id>
      IBMVPC_NAME: ibm-vpc-0
      IBMVPC_IMAGE_ID: <you-image-id>
      IBMVPC_PROFILE: bx2-4x16
      IBMVPC_SSHKEY_ID: <your-sshkey-id>
- name: PowerVS
  endpoint:
    params:
      IBMPOWERVS_SSHKEY_NAME: <your-ssh-key>
      IBMPOWERVS_VIP: <internal-ip>
      IBMPOWERVS_VIP_EXTERNAL: <external-ip>
      IBMPOWERVS_VIP_CIDR: 29
      IBMPOWERVS_IMAGE_NAME: <your-capi-image-name>
      IBMPOWERVS_SERVICE_INSTANCE_ID: <service-instance-id>
      IBMPOWERVS_NETWORK_NAME: <your-capi-network-name>
- name: opennebula
  endpoint:
    path: /RPC2
    method: POST
    data_selector: response
    params:
      ONE_AUTH: oneadmin:opennebula
- name: scaleway-secret
  endpoint:
    path: /api/v1/namespaces/kube-system/secrets
    method: POST
    data_selector: stringData
    params: {}
- name: MicroK8sControlPlane
  endpoint:
    path: /controlPlaneRef
    method: GET
    data_selector: spec.controlPlaneConfig
    params: {}
- name: MachineDeployment
  endpoint:
    path: /MachineDeployment
    method: GET
    data_selector: spec
    params: {}
- name: MachineDeployment
  endpoint:
    path: /cluster-api/MachineDeployment
    method: GET
    data_selector: records
    params: {}
- name: MachineSet
  endpoint:
    path: /cluster-api/MachineSet
    method: GET
    data_selector: records
    params: {}
- name: MachinePool
  endpoint:
    path: /cluster-api/MachinePool
    method: GET
    data_selector: records
    params: {}
- name: MachineHealthCheck
  endpoint:
    path: /api/v1/machinehealthchecks
    method: POST
    data_selector: data
    params: {}
- name: docker-cluster
  endpoint:
    path: /api/v1/clusters
    method: POST
    data_selector: spec.topology
    params: {}
- name: ClusterClass
  endpoint:
    path: /cluster-classes
    method: GET
    data_selector: items
- name: BeforeClusterCreate
  endpoint:
    path: /hooks/runtime/cluster.x-k8s.io/v1alpha1/beforeClusterCreate
    method: POST
- name: AfterControlPlaneInitialized
  endpoint:
    path: /hooks/runtime/cluster.x-k8s.io/v1alpha1/afterControlPlaneInitialized
    method: POST
- name: BeforeClusterUpgrade
  endpoint:
    path: /hooks/runtime/cluster.x-k8s.io/v1alpha1/beforeClusterUpgrade
    method: POST
- name: AfterControlPlaneUpgrade
  endpoint:
    path: /hooks/runtime/cluster.x-k8s.io/v1alpha1/afterControlPlaneUpgrade
    method: POST
- name: AfterClusterUpgrade
  endpoint:
    path: /hooks/runtime/cluster.x-k8s.io/v1alpha1/afterClusterUpgrade
    method: POST
- name: BeforeClusterDelete
  endpoint:
    path: /hooks/runtime/cluster.x-k8s.io/v1alpha1/beforeClusterDelete
    method: POST
- name: GeneratePatches
  endpoint:
    path: /hooks/runtime/cluster.x-k8s.io/v1alpha1/generatePatches
    method: POST
- name: ValidateTopology
  endpoint:
    path: /hooks/runtime/cluster.x-k8s.io/v1alpha1/validateTopology
    method: POST
- name: DiscoverVariablesRequest
  endpoint:
    path: /hooks/runtime/cluster/x-k8s.io/v1alpha1/DiscoverVariablesRequest
    method: POST
- name: DiscoverVariablesResponse
  endpoint:
    path: /hooks/runtime/cluster/x-k8s.io/v1alpha1/DiscoverVariablesResponse
    method: GET
- name: metrics
  endpoint:
    path: /metrics
    method: GET
    data_selector: metrics
    params: {}
- name: pprof
  endpoint:
    path: /debug/pprof
    method: GET
    data_selector: pprof
    params: {}
- name: log_level
  endpoint:
    path: /debug/flags/v
    method: PUT
    data_selector: log_level
    params: {}
- name: ClusterClass
  endpoint:
    path: /cluster.x-k8s.io/v1beta2
    method: GET
    data_selector: spec.patches
    params: {}
- name: Cluster
  endpoint:
    path: /cluster.x-k8s.io/v1beta2
    method: GET
    data_selector: spec.topology
    params: {}
- name: my-infra-provider
  endpoint:
    path: https://github.com/myorg/myrepo/releases/latest/infrastructure-components.yaml
    method: GET
- name: cluster-api
  endpoint:
    path: https://github.com/myorg/myforkofclusterapi/releases/latest/core-components.yaml
    method: GET
- name: my-other-infra-provider
  endpoint:
    path: https://gitlab.example.com/api/v4/projects/myorg%2Fmyrepo/packages/generic/myrepo/v1.2.3/infrastructure-components.yaml
    method: GET
- name: kubeadm
  endpoint:
    path: https://gitlab.example.com/api/v4/projects/external-packages%2Fcluster-api/packages/generic/cluster-api/v1.1.3/bootstrap-components.yaml
    method: GET
- name: ionos_cloud
  endpoint:
    path: /ionoscloud
    method: GET
- name: image
  endpoint:
    path: /images
    method: GET
    data_selector: images
    params: {}
- name: cluster
  endpoint:
    path: /clusters
    method: GET
    data_selector: clusters
    params: {}
- name: KubeadmConfig
  endpoint:
    path: /kubeadmconfigs
    method: GET
    data_selector: items
    params: {}
- name: DockerCluster
  endpoint:
    path: /dockerclusters
    method: GET
    data_selector: items
    params: {}
- name: Machine
  endpoint:
    path: /machines
    method: GET
    data_selector: items
    params: {}
- name: MicroK8sControlPlane
  endpoint:
    path: /api/v1beta1/microk8scontrolplanes
    method: GET
    data_selector: items
    params: {}
- name: MachineDeployment
  endpoint:
    path: /api/v1beta2/machinedeployments
    method: GET
    data_selector: items
    params: {}
- name: MachineTemplate
  endpoint:
    path: /services/data/vXX.X/sobjects/MachineTemplate
    method: POST
    data_selector: records
- name: KubeadmControlPlane
  endpoint:
    path: /services/data/vXX.X/sobjects/KubeadmControlPlane
    method: PATCH
    data_selector: spec.Version
- name: MachineDeployment
  endpoint:
    path: /services/data/vXX.X/sobjects/MachineDeployment
    method: PATCH
    data_selector: spec.rollout.after
- name: MachineDeployment
  endpoint:
    path: /api/v1/MachineDeployment
    method: POST
    data_selector: metadata.annotations
    params: {}
- name: MachineSet
  endpoint:
    path: /api/v1/MachineSet
    method: POST
    data_selector: metadata.annotations
    params: {}
- name: MachinePool
  endpoint:
    path: /api/v1/MachinePool
    method: POST
    data_selector: metadata.annotations
    params: {}
- name: MachineHealthCheck
  endpoint:
    path: /machinehealthchecks
    method: POST
    data_selector: status
    params: {}
- name: KubeadmControlPlane
  endpoint:
    path: /kubeadmcontrolplanes
    method: POST
    data_selector: status
    params: {}
- name: Cluster
  endpoint:
    path: /api/v1beta2/Cluster
    method: GET
    data_selector: items
- name: ClusterClass
  endpoint:
    path: /api/v1beta2/ClusterClass
    method: GET
    data_selector: items
- name: httpProxy
  endpoint:
    path: /spec/template/spec/httpProxy/url
    method: add
    data_selector: url
    params: {}
- name: mdConfig
  endpoint:
    path: /spec/template/spec/customImage
    method: add
    data_selector: osImage
    params: {}
- name: dnsServers
  endpoint:
    path: /spec/template/spec/dnsServers
    method: add
    data_selector: dnsServers
    params: {}
- name: firstDnsServer
  endpoint:
    path: /spec/template/spec/dnsServer
    method: add
    data_selector: dnsServers[0]
    params: {}
- name: ExtensionConfig
  endpoint:
    path: /api/v1/namespaces/default/services/https:webhook-service:443/proxy/hooks.runtime.cluster.x-k8s.io/v1alpha1/discovery
    method: POST
    data_selector: apiVersion
    params: {}
- name: BeforeClusterCreate
  endpoint:
    path: /before-cluster-create
    method: POST
    data_selector: status
    params: {}
- name: AfterControlPlaneInitialized
  endpoint:
    path: /after-control-plane-initialized
    method: POST
    data_selector: status
    params: {}
- name: BeforeClusterUpgrade
  endpoint:
    path: /before-cluster-upgrade
    method: POST
    data_selector: status
    params:
      fromKubernetesVersion: v1.21.2
      toKubernetesVersion: v1.22.0
- name: AfterControlPlaneUpgrade
  endpoint:
    path: /after-control-plane-upgrade
    method: POST
    data_selector: status
    params:
      kubernetesVersion: v1.22.0
- name: AfterClusterUpgrade
  endpoint:
    path: /after-cluster-upgrade
    method: POST
    data_selector: status
    params:
      kubernetesVersion: v1.22.0
- name: BeforeClusterDelete
  endpoint:
    path: /before-cluster-delete
    method: POST
    data_selector: status
    params: {}
- name: DiscoverVariablesRequest
  endpoint:
    path: /hooks/runtime/cluster/x-k8s.io/v1alpha1/DiscoverVariablesRequest
    method: POST
    data_selector: variables
- name: DiscoverVariablesResponse
  endpoint:
    path: /hooks/runtime/cluster/x-k8s.io/v1alpha1/DiscoverVariablesResponse
    method: GET
    data_selector: variables
- name: metrics
  endpoint:
    path: /metrics
    method: GET
    data_selector: data
    params: {}
- name: pprof
  endpoint:
    path: /debug/pprof/
    method: GET
    data_selector: data
    params: {}
- name: log_level
  endpoint:
    path: /debug/flags/v
    method: PUT
    data_selector: data
    params: {}
- name: ClusterClass
  endpoint:
    path: /cluster.x-k8s.io/v1beta2/clusterclasses
    method: GET
    data_selector: items
    params: {}
- name: Cluster
  endpoint:
    path: /cluster.x-k8s.io/v1beta2/clusters
    method: GET
    data_selector: items
    params: {}
- name: my-infra-provider
  endpoint:
    path: https://github.com/myorg/myrepo/releases/latest/infrastructure-components.yaml
    method: GET
- name: cluster-api
  endpoint:
    path: https://github.com/myorg/myforkofclusterapi/releases/latest/core-components.yaml
    method: GET
- name: my-other-infra-provider
  endpoint:
    path: https://gitlab.example.com/api/v4/projects/myorg%2Fmyrepo/packages/generic/myrepo/v1.2.3/infrastructure-components.yaml
    method: GET
- name: kubeadm
  endpoint:
    path: https://gitlab.example.com/api/v4/projects/external-packages%2Fcluster-api/packages/generic/cluster-api/v1.1.3/bootstrap-components.yaml
    method: GET
- name: kind_cluster
  endpoint:
    path: /kind/cluster
    method: POST
    data_selector: cluster
- name: docker_registry
  endpoint:
    path: /docker/registry
    method: POST
    data_selector: registry
- name: IONOSCloudCluster
  endpoint:
    params: {}
- name: workload_clusters
  endpoint:
    path: /workload_clusters
    method: GET
    data_selector: clusters
    params: {}
- name: scaleway-secret
  endpoint:
    path: /kube-system/secrets/scaleway-secret
    method: GET
- name: KubeadmConfig
  endpoint:
    path: /kubeadm/config
    method: POST
    data_selector: metadata
    params: {}
- name: MicroK8sControlPlane
  endpoint:
    path: /api/v1beta1/microk8scontrolplane
    method: GET
    data_selector: items
    params: {}
- name: MachineDeployment
  endpoint:
    path: /api/v1beta1/machinedeployments
    method: GET
    data_selector: items
    params: {}
- name: MachineDeployment
  endpoint:
    path: /api/v1alpha4/machinedeployments
    method: GET
    data_selector: items
    params: {}
- name: MachineHealthCheck
  endpoint:
    path: /api/v1beta2/machinehealthchecks
    method: GET
    data_selector: items
    params: {}
- name: Cluster
  endpoint:
    path: /cluster
    method: GET
    data_selector: items
    params: {}
- name: ClusterClass
  endpoint:
    path: /clusterclass
    method: GET
    data_selector: items
    params: {}
- name: ClusterClass
  endpoint:
    path: /cluster/classes
    method: GET
    data_selector: items
- name: BeforeClusterCreateRequest
  endpoint:
    path: /hooks.runtime.cluster.x-k8s.io/v1alpha1/BeforeClusterCreateRequest
    method: POST
    data_selector: settings
    params: {}
- name: AfterControlPlaneInitializedRequest
  endpoint:
    path: /hooks.runtime.cluster.x-k8s.io/v1alpha1/AfterControlPlaneInitializedRequest
    method: POST
    data_selector: settings
    params: {}
- name: BeforeClusterUpgradeRequest
  endpoint:
    path: /hooks.runtime.cluster.x-k8s.io/v1alpha1/BeforeClusterUpgradeRequest
    method: POST
    data_selector: settings
    params: {}
- name: AfterControlPlaneUpgradeRequest
  endpoint:
    path: /hooks.runtime.cluster.x-k8s.io/v1alpha1/AfterControlPlaneUpgradeRequest
    method: POST
    data_selector: settings
    params: {}
- name: AfterClusterUpgradeRequest
  endpoint:
    path: /hooks.runtime.cluster.x-k8s.io/v1alpha1/AfterClusterUpgradeRequest
    method: POST
    data_selector: settings
    params: {}
- name: BeforeClusterDeleteRequest
  endpoint:
    path: /hooks.runtime.cluster.x-k8s.io/v1alpha1/BeforeClusterDeleteRequest
    method: POST
    data_selector: settings
    params: {}
- name: GeneratePatchesRequest
  endpoint:
    path: /hooks.runtime.cluster.x-k8s.io/v1alpha1/GeneratePatchesRequest
    method: POST
    data_selector: settings
    params: {}
- name: ValidateTopologyRequest
  endpoint:
    path: /hooks.runtime.cluster.x-k8s.io/v1alpha1/ValidateTopologyRequest
    method: POST
    data_selector: settings
    params: {}
- name: metrics
  endpoint:
    path: /metrics
    method: GET
- name: pprof
  endpoint:
    path: /debug/pprof/*
    method: GET
- name: loglevel
  endpoint:
    path: /debug/flags/v
    method: PUT
- name: ClusterClass
  endpoint:
    path: /cluster-api/clusterclass
    method: GET
    data_selector: items
- name: Cluster
  endpoint:
    path: /cluster-api/cluster
    method: GET
    data_selector: items
- name: my-infra-provider
  endpoint:
    path: https://github.com/myorg/myrepo/releases/latest/infrastructure-components.yaml
    method: GET
    data_selector: ''
    params: {}
- name: cluster-api
  endpoint:
    path: https://github.com/myorg/myforkofclusterapi/releases/latest/core-components.yaml
    method: GET
    data_selector: ''
    params: {}
- name: my-other-infra-provider
  endpoint:
    path: https://gitlab.example.com/api/v4/projects/myorg%2Fmyrepo/packages/generic/myrepo/v1.2.3/infrastructure-components.yaml
    method: GET
    data_selector: ''
    params: {}
- name: kubeadm
  endpoint:
    path: https://gitlab.example.com/api/v4/projects/external-packages%2Fcluster-api/packages/generic/cluster-api/v1.1.3/bootstrap-components.yaml
    method: GET
    data_selector: ''
    params: {}
- name: kustomize_substitutions
  endpoint:
    path: /kustomize_substitutions
    method: POST
- name: workload_cluster
  endpoint:
    path: /cluster
    method: POST
    data_selector: cluster
    params: {}
- name: scaleway-secret
  endpoint:
    path: /kubectl/api/v1/namespaces/kube-system/secrets/scaleway-secret
    method: GET
- name: KubeadmConfig
  endpoint:
    path: /kubeadm/config
    method: GET
    data_selector: items
    params: {}
- name: DockerCluster
  endpoint:
    path: /docker/cluster
    method: GET
    data_selector: items
    params: {}
- name: Machine
  endpoint:
    path: /machine
    method: GET
    data_selector: items
    params: {}
- name: MicroK8sControlPlane
  endpoint:
    path: /api/v1beta2/microk8scontrolplanes
    method: GET
    data_selector: items
    params: {}
- name: MachineDeployment
  endpoint:
    path: /api/v1beta2/machinedeployments
    method: GET
    data_selector: items
    params: {}
- name: KubeadmControlPlane
  endpoint:
    path: /kubeadmcontrolplanes
    method: GET
- name: MachineDeployment
  endpoint:
    path: /machinedeployments
    method: GET
- name: MachineDeployment
  endpoint:
    path: /apis/cluster.x-k8s.io/v1alpha4/machinedeployments
    method: GET
    data_selector: items
- name: MachineSet
  endpoint:
    path: /apis/cluster.x-k8s.io/v1alpha4/machinesets
    method: GET
    data_selector: items
- name: MachineHealthCheck
  endpoint:
    path: /machines/health-checks
    method: GET
    data_selector: items
    params: {}
- name: KubeadmControlPlane
  endpoint:
    path: /kubeadm/control-plane
    method: GET
    data_selector: items
    params: {}
- name: my-docker-cluster
  endpoint:
    path: /my-docker-cluster
    method: GET
    data_selector: spec.topology
    params: {}
- name: docker-clusterclass-v0.1.0
  endpoint:
    path: /docker-clusterclass-v0.1.0
    method: GET
    data_selector: spec.workers
    params: {}
- name: docker-clusterclass
  endpoint:
    path: /cluster-class/docker-clusterclass-v0.1.0
    method: GET
- name: azure-clusterclass
  endpoint:
    path: /cluster-class/azure-clusterclass-v0.1.0
    method: GET
- name: BeforeClusterCreateRequest
  endpoint:
    path: /hooks.runtime.cluster.x-k8s.io/v1alpha1/before-cluster-create
    method: POST
    data_selector: status
    params: {}
- name: AfterControlPlaneInitializedRequest
  endpoint:
    path: /hooks.runtime.cluster.x-k8s.io/v1alpha1/after-control-plane-initialized
    method: POST
    data_selector: status
    params: {}
- name: BeforeClusterUpgradeRequest
  endpoint:
    path: /hooks.runtime.cluster.x-k8s.io/v1alpha1/before-cluster-upgrade
    method: POST
    data_selector: status
    params: {}
- name: AfterControlPlaneUpgradeRequest
  endpoint:
    path: /hooks.runtime.cluster.x-k8s.io/v1alpha1/after-control-plane-upgrade
    method: POST
    data_selector: status
    params: {}
- name: AfterClusterUpgradeRequest
  endpoint:
    path: /hooks.runtime.cluster.x-k8s.io/v1alpha1/after-cluster-upgrade
    method: POST
    data_selector: status
    params: {}
- name: BeforeClusterDeleteRequest
  endpoint:
    path: /hooks.runtime.cluster.x-k8s.io/v1alpha1/before-cluster-delete
    method: POST
    data_selector: status
    params: {}
- name: GeneratePatchesRequest
  endpoint:
    path: /hooks.runtime.cluster.x-k8s.io/v1alpha1/generate-patches
    method: POST
    data_selector: status
    params: {}
- name: ValidateTopologyRequest
  endpoint:
    path: /hooks.runtime.cluster.x-k8s.io/v1alpha1/validate-topology
    method: POST
    data_selector: status
    params: {}
- name: DiscoverVariablesRequest
  endpoint:
    path: /hooks.runtime.cluster.x-k8s.io/v1alpha1/discover-variables
    method: POST
    data_selector: status
    params: {}
- name: metrics
  endpoint:
    path: /metrics
    method: GET
    data_selector: metrics
    params: {}
- name: pprof
  endpoint:
    path: /debug/pprof
    method: GET
    data_selector: pprof
    params: {}
- name: loglevel
  endpoint:
    path: /debug/flags/v
    method: PUT
    data_selector: loglevel
    params: {}
- name: podSecurityStandard
  endpoint:
    path: /spec/template/spec/kubeadmConfigSpec/clusterConfiguration/apiServer/extraArgs
    method: add
    data_selector: admission-control-config-file
    params: {}
- name: extraVolumes
  endpoint:
    path: /spec/template/spec/kubeadmConfigSpec/clusterConfiguration/apiServer/extraVolumes
    method: add
    data_selector:
      name: admission-pss
      hostPath: /etc/kubernetes/kube-apiserver-admission-pss.yaml
      mountPath: /etc/kubernetes/kube-apiserver-admission-pss.yaml
      readOnly: true
      pathType: File
    params: {}
- name: files
  endpoint:
    path: /spec/template/spec/kubeadmConfigSpec/files
    method: add
    data_selector:
      content:
        apiVersion: apiserver.config.k8s.io/v1
        kind: AdmissionConfiguration
        plugins:
        - name: PodSecurity
          configuration:
            apiVersion: pod-security.admission.config.k8s.io/v1
            kind: PodSecurityConfiguration
            defaults:
              enforce: '{{ .podSecurity.enforce }}'
              enforce-version: latest
              audit: '{{ .podSecurity.audit }}'
              audit-version: latest
              warn: '{{ .podSecurity.warn }}'
              warn-version: latest
            exemptions:
              usernames: []
              runtimeClasses: []
              namespaces:
              - kube-system
      path: /etc/kubernetes/kube-apiserver-admission-pss.yaml
    params: {}
- name: my-infra-provider
  endpoint:
    path: https://github.com/myorg/myrepo/releases/latest/infrastructure-components.yaml
    method: GET
- name: cluster-api
  endpoint:
    path: https://github.com/myorg/myforkofclusterapi/releases/latest/core-components.yaml
    method: GET
- name: my-other-infra-provider
  endpoint:
    path: https://gitlab.example.com/api/v4/projects/myorg%2Fmyrepo/packages/generic/myrepo/v1.2.3/infrastructure-components.yaml
    method: GET
- name: kubeadm
  endpoint:
    path: https://gitlab.example.com/api/v4/projects/external-packages%2Fcluster-api/packages/generic/cluster-api/v1.1.3/bootstrap-components.yaml
    method: GET
- name: Docker
  endpoint:
    path: /test/infrastructure/docker
    method: GET
- name: KubeVirt
  endpoint:
    path: /kubernetes-sigs/cluster-api-provider-kubevirt
    method: GET
- name: vpc
  endpoint:
    path: /v1/vpcs
    method: GET
- name: powerVS
  endpoint:
    path: /v1/powerVS
    method: GET
- name: cluster
  endpoint:
    path: /cluster
    method: GET
    data_selector: clusters
- name: machine
  endpoint:
    path: /machine
    method: GET
    data_selector: machines
- name: scaleway-secret
  endpoint:
    path: /api/v1/namespaces/kube-system/secrets
    method: POST
    data_selector: data
    params: {}
- name: DockerCluster
  endpoint:
    path: /infrastructure.cluster.x-k8s.io/v1beta2
    method: POST
    data_selector: items
- name: Cluster
  endpoint:
    path: /cluster.x-k8s.io/v1beta2
    method: POST
    data_selector: items
- name: KubeadmConfig
  endpoint:
    path: /bootstrap.cluster.x-k8s.io/v1beta2
    method: POST
    data_selector: items
- name: DockerMachine
  endpoint:
    path: /infrastructure.cluster.x-k8s.io/v1beta2
    method: POST
    data_selector: items
- name: Machine
  endpoint:
    path: /cluster.x-k8s.io/v1beta2
    method: POST
    data_selector: items
- name: MicroK8sControlPlane
  endpoint:
    path: /api/v1beta1/microk8scontrolplanes
    method: GET
    data_selector: items
    params: {}
- name: MachineDeployment
  endpoint:
    path: /api/v1beta1/machinedeployments
    method: GET
    data_selector: items
    params: {}
- name: MicroK8sConfigTemplate
  endpoint:
    path: /api/v1beta1/microk8sconfigtemplates
    method: GET
    data_selector: items
    params: {}
- name: KubeadmControlPlane
  endpoint:
    path: /kubeadmcontrolplane
    method: GET
    data_selector: items
    params: {}
- name: MachineDeployment
  endpoint:
    path: /machinedeployments
    method: GET
    data_selector: items
    params: {}
- name: MachineDeployment
  endpoint:
    path: /machines/deployments
    method: GET
    data_selector: items
- name: MachineSet
  endpoint:
    path: /machines/sets
    method: GET
    data_selector: items
- name: MachinePool
  endpoint:
    path: /machines/pools
    method: GET
    data_selector: items
- name: MachineHealthCheck
  endpoint:
    path: /cluster.x-k8s.io/v1beta2/MachineHealthCheck
    method: POST
    data_selector: spec
    params: {}
- name: KubeadmControlPlane
  endpoint:
    path: /cluster.x-k8s.io/v1beta2/KubeadmControlPlane
    method: POST
    data_selector: spec
    params: {}
- name: ClusterClass
  endpoint:
    path: /clusterclass
    method: GET
    data_selector: items
    params: {}
- name: Cluster
  endpoint:
    path: /clusters
    method: GET
    data_selector: items
    params: {}
- name: docker-clusterclass
  endpoint:
    path: /cluster/x-k8s.io/v1beta2/dockers
    method: GET
    data_selector: spec
    params: {}
- name: azure-clusterclass
  endpoint:
    path: /cluster/x-k8s.io/v1beta2/azure
    method: GET
    data_selector: spec
    params: {}
- name: BeforeClusterCreateRequest
  endpoint:
    path: /hooks.runtime.cluster.x-k8s.io/v1alpha1/before-cluster-create
    method: POST
    data_selector: status
    params: {}
- name: AfterControlPlaneInitializedRequest
  endpoint:
    path: /hooks.runtime.cluster.x-k8s.io/v1alpha1/after-control-plane-initialized
    method: POST
    data_selector: status
    params: {}
- name: BeforeClusterUpgradeRequest
  endpoint:
    path: /hooks.runtime.cluster.x-k8s.io/v1alpha1/before-cluster-upgrade
    method: POST
    data_selector: status
    params: {}
- name: AfterControlPlaneUpgradeRequest
  endpoint:
    path: /hooks.runtime.cluster.x-k8s.io/v1alpha1/after-control-plane-upgrade
    method: POST
    data_selector: status
    params: {}
- name: AfterClusterUpgradeRequest
  endpoint:
    path: /hooks.runtime.cluster.x-k8s.io/v1alpha1/after-cluster-upgrade
    method: POST
    data_selector: status
    params: {}
- name: BeforeClusterDeleteRequest
  endpoint:
    path: /hooks.runtime.cluster.x-k8s.io/v1alpha1/before-cluster-delete
    method: POST
    data_selector: status
    params: {}
- name: GeneratePatchesRequest
  endpoint:
    path: /hooks.runtime.cluster.x-k8s.io/v1alpha1/generate-patches
    method: POST
    data_selector: status
    params: {}
- name: ValidateTopologyRequest
  endpoint:
    path: /hooks.runtime.cluster.x-k8s.io/v1alpha1/validate-topology
    method: POST
    data_selector: status
    params: {}
- name: DiscoverVariablesRequest
  endpoint:
    path: /hooks.runtime.cluster.x-k8s.io/v1alpha1/discover-variables
    method: POST
    data_selector: status
    params: {}
- name: workload_cluster
  endpoint:
    path: /cluster
    method: GET
    data_selector: clusters
    params: {}
- name: metrics
  endpoint:
    path: /metrics
    method: GET
    data_selector: metrics
    params: {}
- name: pprof
  endpoint:
    path: /debug/pprof/*
    method: GET
    data_selector: pprof
    params: {}
- name: log_level
  endpoint:
    path: /debug/flags/v
    method: PUT
    data_selector: log level
    params: {}
- name: podSecurityStandard
  endpoint:
    path: /spec/template/spec/kubeadmConfigSpec/clusterConfiguration/apiServer/extraArgs
    method: add
    data_selector: value
    params:
      admission-control-config-file: /etc/kubernetes/kube-apiserver-admission-pss.yaml
- name: extraVolumes
  endpoint:
    path: /spec/template/spec/kubeadmConfigSpec/clusterConfiguration/apiServer/extraVolumes
    method: add
    data_selector: value
    params:
      name: admission-pss
      hostPath: /etc/kubernetes/kube-apiserver-admission-pss.yaml
      mountPath: /etc/kubernetes/kube-apiserver-admission-pss.yaml
      readOnly: true
      pathType: File
- name: files
  endpoint:
    path: /spec/template/spec/kubeadmConfigSpec/files
    method: add
    data_selector: valueFrom.template
    params:
      content: "apiVersion: apiserver.config.k8s.io/v1\nkind: AdmissionConfiguration\n\
        plugins:\n- name: PodSecurity\n  configuration:\n    apiVersion: pod-security.admission.config.k8s.io/v1\n\
        \    kind: PodSecurityConfiguration\n    defaults:\n      enforce: \"{{ .podSecurity.enforce\
        \ }}\"\n      enforce-version: \"latest\"\n      audit: \"{{ .podSecurity.audit\
        \ }}\"\n      audit-version: \"latest\"\n      warn: \"{{ .podSecurity.warn\
        \ }}\"\n      warn-version: \"latest\"\n    exemptions:\n      usernames:\
        \ []\n      runtimeClasses: []\n      namespaces: [kube-system]\n"
      path: /etc/kubernetes/kube-apiserver-admission-pss.yaml
- name: my-infra-provider
  endpoint:
    path: https://github.com/myorg/myrepo/releases/latest/infrastructure-components.yaml
    method: GET
- name: cluster-api
  endpoint:
    path: https://github.com/myorg/myforkofclusterapi/releases/latest/core-components.yaml
    method: GET
- name: my-other-infra-provider
  endpoint:
    path: https://gitlab.example.com/api/v4/projects/myorg%2Fmyrepo/packages/generic/myrepo/v1.2.3/infrastructure-components.yaml
    method: GET
- name: kubeadm
  endpoint:
    path: https://gitlab.example.com/api/v4/projects/external-packages%2Fcluster-api/packages/generic/cluster-api/v1.1.3/bootstrap-components.yaml
    method: GET
- name: kind_cluster
  endpoint:
    path: /create/kind-cluster
    method: POST
    data_selector: cluster_info
- name: tilt_settings
  endpoint:
    path: /create/tilt-settings
    method: POST
    data_selector: settings_info
- name: kustomize_substitutions
  endpoint:
    path: /kustomize/substitutions
    method: GET
    data_selector: records
    params: {}
- name: management_cluster
  endpoint:
    path: /cluster-api/management-cluster
    method: POST
    data_selector: cluster
- name: ibmcloud
  endpoint:
    path: /v1/ibmcloud
    method: GET
- name: ionoscloud
  endpoint:
    path: /v1/ionoscloud
    method: GET
- name: k0sproject
  endpoint:
    path: /v1/k0sproject
    method: GET
- name: kubekey
  endpoint:
    path: /v1/kubekey
    method: GET
- name: kubevirt
  endpoint:
    path: /v1/kubevirt
    method: GET
- name: metal3
  endpoint:
    path: /v1/metal3
    method: GET
- name: opennebula
  endpoint:
    path: /v1/opennebula
    method: GET
- name: openstack
  endpoint:
    path: /v1/openstack
    method: GET
- name: outscale
  endpoint:
    path: /v1/outscale
    method: GET
- name: proxmox
  endpoint:
    path: /v1/proxmox
    method: GET
- name: scaleway
  endpoint:
    path: /v1/scaleway
    method: GET
- name: vcd
  endpoint:
    path: /v1/vcd
    method: GET
- name: vcluster
  endpoint:
    path: /v1/vcluster
    method: GET
- name: virtink
  endpoint:
    path: /v1/virtink
    method: GET
- name: vsphere
  endpoint:
    path: /v1/vsphere
    method: GET
- name: vultr
  endpoint:
    path: /v1/vultr
    method: GET
- name: workload_cluster
  endpoint:
    path: /RPC2
    method: POST
    data_selector: result
    params: {}
- name: scaleway-secret
  endpoint:
    path: /api/v1/namespaces/kube-system/secrets
    method: POST
    data_selector: metadata
    params: {}
- name: MicroK8sControlPlane
  endpoint:
    path: /api/v1/MicroK8sControlPlane
    method: GET
    data_selector: spec.controlPlaneConfig
    params: {}
- name: MachineDeployment
  endpoint:
    path: /api/v1/MachineDeployment
    method: GET
    data_selector: spec.template.spec
    params: {}
- name: MachineTemplate
  endpoint:
    path: /services/data/vXX.X/sobjects/MachineTemplate
    method: GET
    data_selector: records
    params: {}
- name: KubeadmControlPlane
  endpoint:
    path: /services/data/vXX.X/sobjects/KubeadmControlPlane
    method: GET
    data_selector: records
    params: {}
- name: MachineDeployment
  endpoint:
    path: /api/v1/machineDeployments
    method: POST
    data_selector: items
    params: {}
- name: MachineSet
  endpoint:
    path: /api/v1/machineSets
    method: POST
    data_selector: items
    params: {}
- name: MachineHealthCheck
  endpoint:
    path: /api/v1beta2/machinehealthchecks
    method: POST
    data_selector: status
    params:
      clusterName: capi-quickstart
      maxUnhealthy: 40%
      nodeStartupTimeout: 10m
      selector:
        matchLabels:
          nodepool: nodepool-0
      unhealthyNodeConditions:
      - type: Ready
        status: Unknown
        timeout: 300s
      - type: Ready
        status: 'False'
        timeout: 300s
- name: KubeadmControlPlane
  endpoint:
    path: /api/v1beta2/kubeadmcontrolplanes
    method: POST
    data_selector: status
    params:
      remediationStrategy:
        maxRetry: 5
        retryPeriod: 2m
        minHealthyPeriod: 2h
- name: cluster
  endpoint:
    path: /cluster
    method: GET
    data_selector: items
    params: {}
- name: clusterclass
  endpoint:
    path: /clusterclass
    method: GET
    data_selector: items
    params: {}
- name: docker-clusterclass
  endpoint:
    path: /cluster.x-k8s.io/v1beta2/ClusterClass/docker-clusterclass-v0.1.0
    method: GET
    data_selector: spec
    params: {}
- name: azure-clusterclass
  endpoint:
    path: /cluster.x-k8s.io/v1beta2/ClusterClass/azure-clusterclass-v0.1.0
    method: GET
    data_selector: spec
    params: {}
- name: Cluster
  endpoint:
    path: /clusters
    method: PATCH
    data_selector: spec
    params: {}
- name: ControlPlane
  endpoint:
    path: /controlplane
    method: PATCH
    data_selector: spec
    params: {}
- name: MachineDeployment
  endpoint:
    path: /machinedeployments
    method: PATCH
    data_selector: spec
    params: {}
- name: BeforeClusterCreate
  endpoint:
    path: /hooks/runtime/cluster.x-k8s.io/v1alpha1/BeforeClusterCreateRequest
    method: POST
    data_selector: status
    params: {}
- name: AfterControlPlaneInitialized
  endpoint:
    path: /hooks/runtime/cluster.x-k8s.io/v1alpha1/AfterControlPlaneInitializedRequest
    method: POST
    data_selector: status
    params: {}
- name: BeforeClusterUpgrade
  endpoint:
    path: /hooks/runtime/cluster.x-k8s.io/v1alpha1/BeforeClusterUpgradeRequest
    method: POST
    data_selector: status
    params: {}
- name: AfterControlPlaneUpgrade
  endpoint:
    path: /hooks/runtime/cluster.x-k8s.io/v1alpha1/AfterControlPlaneUpgradeRequest
    method: POST
    data_selector: status
    params: {}
- name: AfterClusterUpgrade
  endpoint:
    path: /hooks/runtime/cluster.x-k8s.io/v1alpha1/AfterClusterUpgradeRequest
    method: POST
    data_selector: status
    params: {}
- name: BeforeClusterDelete
  endpoint:
    path: /hooks/runtime/cluster.x-k8s.io/v1alpha1/BeforeClusterDeleteRequest
    method: POST
    data_selector: status
    params: {}
- name: discover_variables
  endpoint:
    path: /hooks.runtime.cluster.x-k8s.io/v1alpha1/discover-variables
    method: POST
    data_selector: variables
    params: {}
- name: metrics
  endpoint:
    path: /metrics
    method: GET
    data_selector: metrics
    params: {}
- name: pprof
  endpoint:
    path: /debug/pprof/
    method: GET
    data_selector: pprof
    params: {}
- name: loglevel
  endpoint:
    path: /debug/flags/v
    method: PUT
    data_selector: loglevel
    params: {}
- name: cluster
  endpoint:
    path: /cluster-api
    method: POST
    data_selector: spec
- name: my-infra-provider
  endpoint:
    path: https://github.com/myorg/myrepo/releases/latest/infrastructure-components.yaml
    method: GET
- name: cluster-api
  endpoint:
    path: https://github.com/myorg/myforkofclusterapi/releases/latest/core-components.yaml
    method: GET
- name: my-other-infra-provider
  endpoint:
    path: https://gitlab.example.com/api/v4/projects/myorg%2Fmyrepo/packages/generic/myrepo/v1.2.3/infrastructure-components.yaml
    method: GET
- name: kubeadm
  endpoint:
    path: https://gitlab.example.com/api/v4/projects/external-packages%2Fcluster-api/packages/generic/cluster-api/v1.1.3/bootstrap-components.yaml
    method: GET
- name: kind_cluster
  endpoint:
    path: /create-a-kind-cluster
    method: GET
- name: docker_registry
  endpoint:
    path: /docker-registry
    method: GET
- name: kustomize_substitutions
  endpoint:
    path: /kustomize-substitutions
    method: GET
- name: kustomize_substitutions
  endpoint:
    path: /kustomize_substitutions
    method: POST
    data_selector: substitutions
    params: {}
- name: deploy_observability
  endpoint:
    path: /deploy_observability
    method: POST
    data_selector: observability
    params: {}
- name: additional_kustomizations
  endpoint:
    path: /additional_kustomizations
    method: POST
    data_selector: kustomizations
    params: {}
- name: debug
  endpoint:
    path: /debug
    method: POST
    data_selector: debug_config
    params: {}
- name: VPC
  endpoint:
    params:
      IBMVPC_REGION: us-south
      IBMVPC_ZONE: us-south-1
      IBMVPC_RESOURCEGROUP: <your-resource-group-id>
      IBMVPC_NAME: ibm-vpc-0
      IBMVPC_IMAGE_ID: <you-image-id>
      IBMVPC_PROFILE: bx2-4x16
      IBMVPC_SSHKEY_ID: <your-sshkey-id>
- name: PowerVS
  endpoint:
    params:
      IBMPOWERVS_SSHKEY_NAME: <your-ssh-key>
      IBMPOWERVS_VIP: <internal-ip>
      IBMPOWERVS_VIP_EXTERNAL: <external-ip>
      IBMPOWERVS_VIP_CIDR: 29
      IBMPOWERVS_IMAGE_NAME: <your-capi-image-name>
      IBMPOWERVS_SERVICE_INSTANCE_ID: <service-instance-id>
      IBMPOWERVS_NETWORK_NAME: <your-capi-network-name>
- name: IONOS Cloud
  endpoint:
    params:
      IONOS_TOKEN: <your-token>
      IONOSCLOUD_DATACENTER_ID: <your-datacenter-id>
      CONTROL_PLANE_ENDPOINT_IP: 10.10.10.4
      CONTROL_PLANE_ENDPOINT_LOCATION: de/txl
      IONOSCLOUD_MACHINE_IMAGE_ID: <your-image-id>
      IONOSCLOUD_MACHINE_SSH_KEYS: <your-ssh-key>
- name: workload_cluster
  endpoint:
    path: /workload/cluster
    method: POST
    data_selector: cluster
    params: {}
- name: MicroK8sControlPlane
  endpoint:
    path: /api/v1beta1/microk8scontrolplane
    method: POST
    data_selector: spec
    params: {}
- name: MachineDeployment
  endpoint:
    path: /api/v1beta1/machinedeployment
    method: POST
    data_selector: spec
    params: {}
- name: MachineTemplate
  endpoint:
    path: /services/data/v1/machineTemplate
    method: POST
    data_selector: machineTemplate
    params: {}
- name: MachineDeployment
  endpoint:
    path: /services/data/v1/machineDeployment
    method: PATCH
    data_selector: machineDeployment
    params: {}
- name: MachineDeployment
  endpoint:
    path: /cluster-api/MachineDeployment
    method: GET
    data_selector: items
- name: MachineSet
  endpoint:
    path: /cluster-api/MachineSet
    method: GET
    data_selector: items
- name: MachineHealthCheck
  endpoint:
    path: /cluster-api/MachineHealthCheck
    method: GET
    data_selector: items
- name: MachineHealthCheck
  endpoint:
    path: /v1beta2/machinehealthchecks
    method: GET
    data_selector: items
    params: {}
- name: KubeadmControlPlane
  endpoint:
    path: /v1beta2/kubeadmcontrolplanes
    method: GET
    data_selector: items
    params: {}
- name: Cluster
  endpoint:
    path: /v1beta2/Cluster
    method: GET
- name: ClusterClass
  endpoint:
    path: /v1beta2/ClusterClass
    method: GET
- name: ClusterClass
  endpoint:
    path: /cluster.x-k8s.io/v1beta2/ClusterClass
    method: GET
    data_selector: items
    params: {}
- name: Cluster
  endpoint:
    path: /clusters
    method: PATCH
    data_selector: spec.topology
    params: {}
- name: BeforeClusterCreate
  endpoint:
    path: /hooks.runtime.cluster.x-k8s.io/v1alpha1/before-cluster-create
    method: POST
    data_selector: status
    params: {}
- name: AfterControlPlaneInitialized
  endpoint:
    path: /hooks.runtime.cluster.x-k8s.io/v1alpha1/after-control-plane-initialized
    method: POST
    data_selector: status
    params: {}
- name: BeforeClusterUpgrade
  endpoint:
    path: /hooks.runtime.cluster.x-k8s.io/v1alpha1/before-cluster-upgrade
    method: POST
    data_selector: status
    params: {}
- name: AfterControlPlaneUpgrade
  endpoint:
    path: /hooks.runtime.cluster.x-k8s.io/v1alpha1/after-control-plane-upgrade
    method: POST
    data_selector: status
    params: {}
- name: AfterClusterUpgrade
  endpoint:
    path: /hooks.runtime.cluster.x-k8s.io/v1alpha1/after-cluster-upgrade
    method: POST
    data_selector: status
    params: {}
- name: BeforeClusterDelete
  endpoint:
    path: /hooks.runtime.cluster.x-k8s.io/v1alpha1/before-cluster-delete
    method: POST
    data_selector: status
    params: {}
- name: GeneratePatches
  endpoint:
    path: /hooks.runtime.cluster.x-k8s.io/v1alpha1/generate-patches
    method: POST
    data_selector: status
    params: {}
- name: ValidateTopology
  endpoint:
    path: /hooks.runtime.cluster.x-k8s.io/v1alpha1/validate-topology
    method: POST
    data_selector: status
    params: {}
- name: DiscoverVariablesRequest
  endpoint:
    path: /hooks.runtime.cluster.x-k8s.io/v1alpha1/DiscoverVariablesRequest
    method: POST
    data_selector: variables
    params: {}
- name: DiscoverVariablesResponse
  endpoint:
    path: /hooks.runtime.cluster.x-k8s.io/v1alpha1/DiscoverVariablesResponse
    method: GET
    data_selector: status
    params: {}
- name: metrics
  endpoint:
    path: /metrics
    method: GET
- name: pprof
  endpoint:
    path: /debug/pprof/*
    method: GET
- name: loglevel
  endpoint:
    path: /debug/flags/v
    method: PUT
- name: cluster
  endpoint:
    path: /api/v1/namespaces/{namespace}/clusters
    method: GET
    data_selector: items
- name: my-infra-provider
  endpoint:
    path: /api/v4/projects/myorg%2Fmyrepo/packages/generic/myrepo/v1.2.3/infrastructure-components.yaml
    method: GET
    data_selector: records
    params: {}
- name: cluster-api
  endpoint:
    path: /api/v4/projects/external-packages%2Fcluster-api/packages/generic/cluster-api/v1.1.3/bootstrap-components.yaml
    method: GET
    data_selector: records
    params: {}
- name: docker
  endpoint:
    params: {}
- name: kubevirt
  endpoint:
    params: {}
- name: kustomize_substitutions
  endpoint:
    path: /kustomize_substitutions
    method: POST
    data_selector: substitutions
    params: {}
- name: bootstrap
  endpoint:
    path: ~/bootstrap
    method: GET
- name: controlplane
  endpoint:
    path: ~/controlplane
    method: GET
- name: cluster_api_provider_docker
  endpoint:
    path: ~/test/infrastructure/docker
    method: GET
- name: clusterctl_cli
  endpoint:
    path: ~/cmd/clusterctl
    method: GET
- name: manifest_generation
  endpoint:
    path: ~/config
    method: GET
- name: controllers
  endpoint:
    path: ~/controllers
    method: GET
- name: documentation
  endpoint:
    path: ~/docs
    method: GET
- name: tools
  endpoint:
    path: ~/hack
    method: GET
- name: util_feature_and_errors
  endpoint:
    path: ~/util
    method: GET
- name: experimental_features
  endpoint:
    path: ~/exp
    method: GET
- name: webhooks
  endpoint:
    path: ~/webhooks
    method: GET
- name: MachineDeployment
  endpoint:
    path: /machinedeployments
    method: GET
    data_selector: items
- name: MachineHealthCheck
  endpoint:
    path: /machinehealthchecks
    method: GET
    data_selector: items
- name: IONOSCloudCluster
  endpoint:
    path: /v1/ionoscloud/cluster
    method: POST
    data_selector: data
- name: workload_clusters
  endpoint:
    path: /workload_clusters
    method: GET
    data_selector: clusters
    params: {}
- name: MicroK8sControlPlane
  endpoint:
    path: /api/v1/microk8scontrolplanes
    method: POST
    data_selector: spec
    params: {}
- name: MachineDeployment
  endpoint:
    path: /api/v1/machinedeployments
    method: POST
    data_selector: spec
    params: {}
- name: KubeadmControlPlane
  endpoint:
    path: /services/data/vXX.X/sobjects/KubeadmControlPlane
    method: GET
    data_selector: records
    params: {}
- name: MachineDeployment
  endpoint:
    path: /services/data/vXX.X/sobjects/MachineDeployment
    method: GET
    data_selector: records
    params: {}
- name: MachineDeployment
  endpoint:
    path: /api/v1alpha4/machinedeployments
    method: GET
    data_selector: items
- name: MachineSet
  endpoint:
    path: /api/v1alpha4/machinesets
    method: GET
    data_selector: items
- name: MachineHealthCheck
  endpoint:
    path: /machineHealthChecks
    method: POST
    data_selector: spec
    params: {}
- name: KubeadmControlPlane
  endpoint:
    path: /kubeadmControlPlanes
    method: POST
    data_selector: spec
    params: {}
- name: Disruptions
  endpoint:
    path: /tasks/experimental-features/machine-pools
    method: GET
    data_selector: records
- name: ClusterClass
  endpoint:
    path: /tasks/experimental-features/cluster-class/
    method: GET
    data_selector: records
- name: API-initiated eviction
  endpoint:
    path: /concepts/scheduling-eviction/api-eviction/
    method: GET
    data_selector: records
- name: Cluster
  endpoint:
    path: /clusters
    method: GET
    data_selector: items
    params: {}
- name: ClusterClass
  endpoint:
    path: /clusterclasses
    method: GET
    data_selector: items
    params: {}
- name: docker-clusterclass
  endpoint:
    path: /cluster-class/docker-clusterclass-v0.1.0
    method: GET
    data_selector: spec
    params: {}
- name: azure-clusterclass
  endpoint:
    path: /cluster-class/azure-clusterclass-v0.1.0
    method: GET
    data_selector: spec
    params: {}
- name: BeforeClusterCreateRequest
  endpoint:
    path: /hooks/runtime/cluster.x-k8s.io/v1alpha1/before-cluster-create
    method: POST
    data_selector: status
    params: {}
- name: AfterControlPlaneInitializedRequest
  endpoint:
    path: /hooks/runtime/cluster.x-k8s.io/v1alpha1/after-control-plane-initialized
    method: POST
    data_selector: status
    params: {}
- name: BeforeClusterUpgradeRequest
  endpoint:
    path: /hooks/runtime/cluster.x-k8s.io/v1alpha1/before-cluster-upgrade
    method: POST
    data_selector: status
    params: {}
- name: AfterControlPlaneUpgradeRequest
  endpoint:
    path: /hooks/runtime/cluster.x-k8s.io/v1alpha1/after-control-plane-upgrade
    method: POST
    data_selector: status
    params: {}
- name: AfterClusterUpgradeRequest
  endpoint:
    path: /hooks/runtime/cluster.x-k8s.io/v1alpha1/after-cluster-upgrade
    method: POST
    data_selector: status
    params: {}
- name: BeforeClusterDeleteRequest
  endpoint:
    path: /hooks/runtime/cluster.x-k8s.io/v1alpha1/before-cluster-delete
    method: POST
    data_selector: status
    params: {}
- name: GeneratePatchesRequest
  endpoint:
    path: /hooks/runtime/cluster.x-k8s.io/v1alpha1/generate-patches
    method: POST
    data_selector: items
    params: {}
- name: ValidateTopologyRequest
  endpoint:
    path: /hooks/runtime/cluster.x-k8s.io/v1alpha1/validate-topology
    method: POST
    data_selector: status
    params: {}
- name: DiscoverVariables
  endpoint:
    path: /hooks/runtime/cluster.x-k8s.io/v1alpha1/discover-variables
    method: POST
    data_selector: variables
    params: {}
- name: DiscoverVariablesRequest
  endpoint:
    path: /hooks/runtime/cluster/x-k8s.io/v1alpha1/discover-variables
    method: POST
    data_selector: variables
    params: {}
- name: metrics
  endpoint:
    path: /metrics
    method: GET
- name: pprof
  endpoint:
    path: /debug/pprof
    method: GET
- name: log_level
  endpoint:
    path: /debug/flags/v
    method: PUT
- name: podSecurityStandard
  endpoint:
    path: /spec/template/spec/kubeadmConfigSpec/clusterConfiguration/apiServer/extraArgs
    method: add
    data_selector: value
    params: {}
- name: admission-pss
  endpoint:
    path: /spec/template/spec/kubeadmConfigSpec/clusterConfiguration/apiServer/extraVolumes
    method: add
    data_selector: value
    params: {}
- name: admissionConfiguration
  endpoint:
    path: /spec/template/spec/kubeadmConfigSpec/files
    method: add
    data_selector: valueFrom.template
    params: {}
- name: kind-cluster
  endpoint:
    path: /kind/cluster
    method: POST
- name: docker-cluster
  endpoint:
    path: /docker/cluster
    method: POST
- name: vsp
  endpoint:
    path: ''
    method: ''
    data_selector: ''
    params: {}
- name: MachinePool
  endpoint:
    path: /machinepool
    method: GET
    data_selector: records
    params: {}
- name: Contracts
  endpoint:
    path: /contracts
    method: GET
    data_selector: records
    params: {}
- name: InfrastructureMachinePool
  endpoint:
    path: /infrastructure/machinepool
    method: GET
    data_selector: status
    params: {}
- name: IONOSCloudCluster
  endpoint:
    path: /api/ionoscloud/cluster
    method: GET
- name: workload_cluster
  endpoint:
    path: /RPC2
    method: POST
    data_selector: response
    params:
      cluster_name: one
- name: scaleway-secret
  endpoint:
    path: /api/v1/secrets/scaleway-secret
    method: CREATE
    data_selector: stringData
    params: {}
- name: KubeadmConfig
  endpoint:
    path: /api/bootstrap.cluster.x-k8s.io/v1beta2/kubeadmconfigs
    method: GET
    data_selector: items
    params: {}
- name: DockerCluster
  endpoint:
    path: /api/infrastructure.cluster.x-k8s.io/v1beta2/dockerclusters
    method: GET
    data_selector: items
    params: {}
- name: Machine
  endpoint:
    path: /api/cluster.x-k8s.io/v1beta2/machines
    method: GET
    data_selector: items
    params: {}
- name: MicroK8sControlPlane
  endpoint:
    path: /api/v1beta1/microk8scontrolplanes
    method: POST
    data_selector: spec
    params: {}
- name: MachineDeployment
  endpoint:
    path: /api/v1beta1/machinedeployments
    method: POST
    data_selector: spec
    params: {}
- name: MachineTemplate
  endpoint:
    path: /services/data/vXX.X/sobjects/MachineTemplate
    method: POST
- name: KubeadmControlPlane
  endpoint:
    path: /services/data/vXX.X/sobjects/KubeadmControlPlane
    method: PUT
- name: MachineDeployment
  endpoint:
    path: /services/data/vXX.X/sobjects/MachineDeployment
    method: PATCH
- name: MachineDeployment
  endpoint:
    path: /services/data/vXX.X/sobjects/MachineDeployment
    method: GET
    data_selector: records
    params:
      annotations:
        cluster.x-k8s.io/cluster-api-autoscaler-node-group-max-size: '5'
        cluster.x-k8s.io/cluster-api-autoscaler-node-group-min-size: '0'
        capacity.cluster-autoscaler.kubernetes.io/memory: 128G
        capacity.cluster-autoscaler.kubernetes.io/cpu: '16'
        capacity.cluster-autoscaler.kubernetes.io/ephemeral-disk: 100Gi
        capacity.cluster-autoscaler.kubernetes.io/maxPods: '200'
        capacity.cluster-autoscaler.kubernetes.io/gpu-type: nvidia.com/gpu
        capacity.cluster-autoscaler.kubernetes.io/gpu-count: '2'
- name: MachineHealthCheck
  endpoint:
    path: /api/v1beta2/machinehealthchecks
    method: GET
    data_selector: items
    params: {}
- name: KubeadmControlPlane
  endpoint:
    path: /api/v1beta2/kubeadmcontrolplanes
    method: GET
    data_selector: items
    params: {}
- name: machineDeployments
  endpoint:
    path: /services/data/vXX.X/sobjects/MachineDeployment
    method: GET
    data_selector: records
    params: {}
- name: docker-clusterclass
  endpoint:
    path: /cluster.x-k8s.io/v1beta2/ClusterClass
    method: GET
    data_selector: items
- name: azure-clusterclass
  endpoint:
    path: /cluster.x-k8s.io/v1beta2/ClusterClass
    method: GET
    data_selector: items
- name: BeforeClusterCreate
  endpoint:
    path: /before-cluster-create
    method: POST
    data_selector: settings
- name: AfterControlPlaneInitialized
  endpoint:
    path: /after-control-plane-initialized
    method: POST
    data_selector: settings
- name: BeforeClusterUpgrade
  endpoint:
    path: /before-cluster-upgrade
    method: POST
    data_selector: settings
- name: AfterControlPlaneUpgrade
  endpoint:
    path: /after-control-plane-upgrade
    method: POST
    data_selector: settings
- name: AfterClusterUpgrade
  endpoint:
    path: /after-cluster-upgrade
    method: POST
    data_selector: settings
- name: BeforeClusterDelete
  endpoint:
    path: /before-cluster-delete
    method: POST
    data_selector: settings
- name: DiscoverVariablesRequest
  endpoint:
    path: /hooks/runtime/cluster/v1alpha1/discoverVariables
    method: POST
    data_selector: variables
- name: DiscoverVariablesResponse
  endpoint:
    path: /hooks/runtime/cluster/v1alpha1/discoverVariablesResponse
    method: GET
    data_selector: status
- name: metrics
  endpoint:
    path: /metrics
    method: GET
- name: pprof
  endpoint:
    path: /debug/pprof
    method: GET
- name: log_level
  endpoint:
    path: /debug/flags/v
    method: PUT
- name: podSecurityStandard
  endpoint:
    path: /spec/template/spec/kubeadmConfigSpec/clusterConfiguration/apiServer/extraArgs
    method: add
    data_selector: admission-control-config-file
    params:
      value: /etc/kubernetes/kube-apiserver-admission-pss.yaml
- name: extraVolumes
  endpoint:
    path: /spec/template/spec/kubeadmConfigSpec/clusterConfiguration/apiServer/extraVolumes
    method: add
    data_selector: admission-pss
    params:
      hostPath: /etc/kubernetes/kube-apiserver-admission-pss.yaml
      mountPath: /etc/kubernetes/kube-apiserver-admission-pss.yaml
      readOnly: true
      pathType: File
- name: files
  endpoint:
    path: /spec/template/spec/kubeadmConfigSpec/files
    method: add
    data_selector: AdmissionConfiguration
    params:
      content: "apiVersion: apiserver.config.k8s.io/v1\nkind: AdmissionConfiguration\n\
        plugins:\n- name: PodSecurity\n  configuration:\n    apiVersion: pod-security.admission.config.k8s.io/v1\n\
        \    kind: PodSecurityConfiguration\n    defaults:\n      enforce: \"{{ .podSecurity.enforce\
        \ }}\"\n      enforce-version: \"latest\"\n      audit: \"{{ .podSecurity.audit\
        \ }}\"\n      audit-version: \"latest\"\n      warn: \"{{ .podSecurity.warn\
        \ }}\"\n      warn-version: \"latest\"\n    exemptions:\n      usernames:\
        \ []\n      runtimeClasses: []\n      namespaces: [kube-system]\n"
      path: /etc/kubernetes/kube-apiserver-admission-pss.yaml
- name: infrastructure-aws
  endpoint:
    path: /api/v4/projects/myorg%2Fmyrepo/packages/generic/myrepo/v1.2.3/infrastructure-components.yaml
    method: GET
- name: cluster-api
  endpoint:
    path: /api/v4/projects/myorg/myforkofclusterapi/releases/latest/core-components.yaml
    method: GET
- name: bootstrap-kubeadm
  endpoint:
    path: /api/v4/projects/external-packages%2Fcluster-api/packages/generic/cluster-api/v1.1.3/bootstrap-components.yaml
    method: GET
- name: kustomize_substitutions
  endpoint:
    path: ''
    method: POST
    data_selector: ''
    params: {}
- name: IONOS Cloud
  endpoint:
    path: /cloud/instances
    method: POST
    data_selector: instances
    params:
      token: IONOS_TOKEN
      datacenter_id: IONOSCLOUD_DATACENTER_ID
      control_plane_endpoint_ip: CONTROL_PLANE_ENDPOINT_IP
      control_plane_endpoint_location: CONTROL_PLANE_ENDPOINT_LOCATION
      machine_image_id: IONOSCLOUD_MACHINE_IMAGE_ID
      machine_ssh_keys: IONOSCLOUD_MACHINE_SSH_KEYS
- name: workload_clusters
  endpoint:
    path: /workload_clusters
    method: GET
    data_selector: clusters
    params: {}
- name: scaleway-secret
  endpoint:
    path: /v1/secret
    method: POST
    data_selector: stringData
    params: {}
- name: KubeadmConfig
  endpoint:
    path: /bootstrap.cluster.x-k8s.io/v1beta2/kubeadmconfigs
    method: GET
    data_selector: items
    params: {}
- name: DockerCluster
  endpoint:
    path: /infrastructure.cluster.x-k8s.io/v1beta2/dockerclusters
    method: GET
    data_selector: items
    params: {}
- name: Machine
  endpoint:
    path: /cluster.x-k8s.io/v1beta2/machines
    method: GET
    data_selector: items
    params: {}
- name: MicroK8sControlPlane
  endpoint:
    path: /controlplane.cluster.x-k8s.io/v1beta1/MicroK8sControlPlane
    method: GET
    data_selector: spec
    params: {}
- name: MachineDeployment
  endpoint:
    path: /cluster.x-k8s.io/v1beta2/MachineDeployment
    method: GET
    data_selector: spec
    params: {}
- name: MicroK8sConfigTemplate
  endpoint:
    path: /bootstrap.cluster.x-k8s.io/v1beta1/MicroK8sConfigTemplate
    method: GET
    data_selector: spec
    params: {}
- name: KubeadmControlPlane
  endpoint:
    path: /kubeadmcontrolplane
    method: GET
    data_selector: resources
    params: {}
- name: MachineDeployment
  endpoint:
    path: /machinedeployment
    method: GET
    data_selector: resources
    params: {}
- name: MachineHealthCheck
  endpoint:
    path: /machinehealthcheck
    method: GET
    data_selector: resources
    params: {}
- name: MachineDeployment
  endpoint:
    path: /api/v1/MachineDeployment
    method: GET
    data_selector: items
    params:
      incremental: spec.replicas
- name: MachineSet
  endpoint:
    path: /api/v1/MachineSet
    method: GET
    data_selector: items
    params: {}
- name: MachinePool
  endpoint:
    path: /api/v1/MachinePool
    method: GET
    data_selector: items
    params: {}
- name: MachineHealthCheck
  endpoint:
    path: /api/v1beta2/machinehealthchecks
    method: POST
    data_selector: items
    params: {}
- name: KubeadmControlPlane
  endpoint:
    path: /api/v1beta2/kubeadmcontrolplanes
    method: POST
    data_selector: items
    params: {}
- name: Cluster
  endpoint:
    path: /clusters
    method: GET
    data_selector: items
    params: {}
- name: ClusterClass
  endpoint:
    path: /clusterclasses
    method: GET
    data_selector: items
    params: {}
- name: docker-clusterclass-v0.1.0
  endpoint:
    path: /cluster.x-k8s.io/v1beta2/ClusterClass
    method: GET
    data_selector: items
    params: {}
- name: azure-clusterclass-v0.1.0
  endpoint:
    path: /cluster.x-k8s.io/v1beta2/ClusterClass
    method: GET
    data_selector: items
    params: {}
- name: BeforeClusterCreate
  endpoint:
    path: /hooks/runtime/cluster.x-k8s.io/v1alpha1/before-cluster-create
    method: POST
    data_selector: status
    params: {}
- name: AfterControlPlaneInitialized
  endpoint:
    path: /hooks/runtime/cluster.x-k8s.io/v1alpha1/after-control-plane-initialized
    method: POST
    data_selector: status
    params: {}
- name: BeforeClusterUpgrade
  endpoint:
    path: /hooks/runtime/cluster.x-k8s.io/v1alpha1/before-cluster-upgrade
    method: POST
    data_selector: status
    params: {}
- name: AfterControlPlaneUpgrade
  endpoint:
    path: /hooks/runtime/cluster.x-k8s.io/v1alpha1/after-control-plane-upgrade
    method: POST
    data_selector: status
    params: {}
- name: AfterClusterUpgrade
  endpoint:
    path: /hooks/runtime/cluster.x-k8s.io/v1alpha1/after-cluster-upgrade
    method: POST
    data_selector: status
    params: {}
- name: BeforeClusterDelete
  endpoint:
    path: /hooks/runtime/cluster.x-k8s.io/v1alpha1/before-cluster-delete
    method: POST
    data_selector: status
    params: {}
- name: GeneratePatches
  endpoint:
    path: /hooks/runtime/cluster.x-k8s.io/v1alpha1/generate-patches
    method: POST
    data_selector: status
    params: {}
- name: ValidateTopology
  endpoint:
    path: /hooks/runtime/cluster.x-k8s.io/v1alpha1/validate-topology
    method: POST
    data_selector: status
    params: {}
- name: DiscoverVariables
  endpoint:
    path: /hooks/runtime/cluster.x-k8s.io/v1alpha1/discover-variables
    method: POST
    data_selector: status
    params: {}
- name: DiscoverVariablesRequest
  endpoint:
    path: /hooks.runtime.cluster.x-k8s.io/v1alpha1/DiscoverVariablesRequest
    method: GET
    data_selector: variables
- name: DiscoverVariablesResponse
  endpoint:
    path: /hooks.runtime.cluster.x-k8s.io/v1alpha1/DiscoverVariablesResponse
    method: GET
    data_selector: status
- name: podSecurityStandard
  endpoint:
    path: /spec/template/spec/kubeadmConfigSpec/clusterConfiguration/apiServer/extraArgs
    method: add
    data_selector: admission-control-config-file
    params:
      value: /etc/kubernetes/kube-apiserver-admission-pss.yaml
- name: extraVolumes
  endpoint:
    path: /spec/template/spec/kubeadmConfigSpec/clusterConfiguration/apiServer/extraVolumes
    method: add
    data_selector: admission-pss
    params:
      name: admission-pss
      hostPath: /etc/kubernetes/kube-apiserver-admission-pss.yaml
      mountPath: /etc/kubernetes/kube-apiserver-admission-pss.yaml
      readOnly: true
      pathType: File
- name: files
  endpoint:
    path: /spec/template/spec/kubeadmConfigSpec/files
    method: add
    data_selector: AdmissionConfiguration
    params:
      content: "apiVersion: apiserver.config.k8s.io/v1\nkind: AdmissionConfiguration\n\
        plugins:\n- name: PodSecurity\n  configuration:\n    apiVersion: pod-security.admission.config.k8s.io/v1\n\
        \    kind: PodSecurityConfiguration\n    defaults:\n      enforce: \"{{ .podSecurity.enforce\
        \ }}\"\n      enforce-version: \"latest\"\n      audit: \"{{ .podSecurity.audit\
        \ }}\"\n      audit-version: \"latest\"\n      warn: \"{{ .podSecurity.warn\
        \ }}\"\n      warn-version: \"latest\"\n    exemptions:\n      usernames:\
        \ []\n      runtimeClasses: []\n      namespaces: [kube-system]\n"
      path: /etc/kubernetes/kube-apiserver-admission-pss.yaml
- name: my-infra-provider
  endpoint:
    path: /api/v4/projects/myorg%2Fmyrepo/packages/generic/myrepo/v1.2.3/infrastructure-components.yaml
    method: GET
- name: cluster-api
  endpoint:
    path: /api/v4/projects/external-packages%2Fcluster-api/packages/generic/cluster-api/v1.1.3/bootstrap-components.yaml
    method: GET
- name: Cluster
  endpoint:
    path: /clusters
    method: GET
    data_selector: clusters
- name: MachineDeployment
  endpoint:
    path: /machinedeployments
    method: GET
    data_selector: machineDeployments
- name: MachineSet
  endpoint:
    path: /machinesets
    method: GET
    data_selector: machineSets
- name: Machine
  endpoint:
    path: /machines
    method: GET
    data_selector: machines
- name: KubeadmControlPlane
  endpoint:
    path: /kubeadmcontrolplanes
    method: GET
    data_selector: kubeadmControlPlanes
- name: KubeadmBootstrapConfig
  endpoint:
    path: /kubeadmbootstrapconfigs
    method: GET
    data_selector: kubeadmBootstrapConfigs
- name: InfrastructureMachinePool
  endpoint:
    path: /infrastructureMachinePool
    method: GET
    data_selector: spec
    params: {}
- name: MachineHealthCheck
  endpoint:
    path: /machineHealthCheck
    method: GET
    data_selector: main responsibilities
    params: {}
- name: fuzz_testing_api_conversion
  endpoint:
    path: /fuzz-testing/api/conversion
    method: GET
    data_selector: records
- name: oss_fuzz_continuous_fuzzing
  endpoint:
    path: /oss-fuzz/continuous-fuzzing
    method: GET
    data_selector: records
- name: management_cluster
  endpoint:
    path: /init
    method: POST
    data_selector: providers
- name: vpc
  endpoint:
    path: /v1/vpcs
    method: GET
- name: powervs
  endpoint:
    path: /v1/powervs
    method: GET
- name: workload_cluster
  endpoint:
    path: /clusters
    method: POST
    data_selector: cluster
    params: {}
- name: scaleway-secret
  endpoint:
    path: /api/v1/secrets/scaleway-secret
    method: POST
    data_selector: metadata
    params: {}
- name: MicroK8sControlPlane
  endpoint:
    path: /api/v1beta1/microk8scontrolplanes
    method: GET
    data_selector: items
    params: {}
- name: MachineDeployment
  endpoint:
    path: /api/v1beta1/machinedeployments
    method: GET
    data_selector: items
    params: {}
- name: MachineDeployment
  endpoint:
    path: /cluster-api/machine-deployment
    method: GET
    data_selector: spec
    params: {}
- name: KubeadmConfig
  endpoint:
    path: /cluster-api/kubeadm-config
    method: GET
    data_selector: spec
    params: {}
- name: MachineDeployment
  endpoint:
    path: /api/v1beta1/machinedeployments
    method: GET
    data_selector: items
    params: {}
- name: MachineHealthCheck
  endpoint:
    path: /api/v1beta2/machinehealthchecks
    method: POST
    data_selector: spec
    params: {}
- name: KubeadmControlPlane
  endpoint:
    path: /api/v1beta2/kubeadmcontrolplanes
    method: POST
    data_selector: spec
    params: {}
- name: Cluster
  endpoint:
    path: /api/v1/cluster
    method: GET
- name: ClusterClass
  endpoint:
    path: /api/v1/clusterclass
    method: GET
- name: httpProxy
  endpoint:
    path: /spec/template/spec/httpProxy/url
    method: add
    data_selector: url
- name: mdConfig
  endpoint:
    path: /spec/template/spec/customImage
    method: add
    data_selector: osImage
- name: dnsServers
  endpoint:
    path: /spec/template/spec/dnsServers
    method: add
    data_selector: dnsServers
- name: firstDnsServer
  endpoint:
    path: /spec/template/spec/dnsServer
    method: add
    data_selector: dnsServers[0]
- name: BeforeClusterCreate
  endpoint:
    path: /hooks/runtime/cluster.x-k8s.io/v1alpha1/BeforeClusterCreate
    method: POST
    data_selector: settings
- name: AfterControlPlaneInitialized
  endpoint:
    path: /hooks/runtime/cluster.x-k8s.io/v1alpha1/AfterControlPlaneInitialized
    method: POST
    data_selector: settings
- name: BeforeClusterUpgrade
  endpoint:
    path: /hooks/runtime/cluster.x-k8s.io/v1alpha1/BeforeClusterUpgrade
    method: POST
    data_selector: settings
- name: AfterControlPlaneUpgrade
  endpoint:
    path: /hooks/runtime/cluster.x-k8s.io/v1alpha1/AfterControlPlaneUpgrade
    method: POST
    data_selector: settings
- name: AfterClusterUpgrade
  endpoint:
    path: /hooks/runtime/cluster.x-k8s.io/v1alpha1/AfterClusterUpgrade
    method: POST
    data_selector: settings
- name: BeforeClusterDelete
  endpoint:
    path: /hooks/runtime/cluster.x-k8s.io/v1alpha1/BeforeClusterDelete
    method: POST
    data_selector: settings
- name: cluster
  endpoint:
    path: /clusters
    method: GET
    data_selector: clusters
- name: node
  endpoint:
    path: /nodes
    method: GET
    data_selector: nodes
- name: metrics
  endpoint:
    path: /metrics
    method: GET
    data_selector: metrics
    params: {}
- name: pprof
  endpoint:
    path: /debug/pprof
    method: GET
    data_selector: pprof
    params: {}
- name: log_level
  endpoint:
    path: /debug/flags/v
    method: PUT
    data_selector: log_level
    params: {}
- name: podSecurityStandard
  endpoint:
    path: /spec/template/spec/kubeadmConfigSpec/clusterConfiguration/apiServer/extraArgs
    method: add
    data_selector: admission-control-config-file
    params: {}
- name: admission-pss
  endpoint:
    path: /spec/template/spec/kubeadmConfigSpec/clusterConfiguration/apiServer/extraVolumes
    method: add
    data_selector: hostPath
    params: {}
- name: files
  endpoint:
    path: /spec/template/spec/kubeadmConfigSpec/files
    method: add
    data_selector: content
    params: {}
- name: my-infra-provider
  endpoint:
    path: /api/v4/projects/myorg%2Fmyrepo/packages/generic/myrepo/v1.2.3/infrastructure-components.yaml
    method: GET
    data_selector: records
- name: cluster-api
  endpoint:
    path: /api/v4/projects/external-packages%2Fcluster-api/packages/generic/cluster-api/v1.1.3/bootstrap-components.yaml
    method: GET
    data_selector: records
- name: bootstrap
  endpoint:
    path: /bootstrap
    method: GET
    data_selector: records
- name: controlplane
  endpoint:
    path: /controlplane
    method: GET
    data_selector: records
- name: cluster
  endpoint:
    path: /cluster
    method: GET
    data_selector: records
- name: InfrastructureMachinePool
  endpoint:
    path: /infrastructureMachinePool
    method: GET
    data_selector: instances
    params: {}
- name: e2e_tests
  endpoint:
    path: /test/e2e
    method: GET
    data_selector: tests
    params: {}
- name: MailgunCluster
  endpoint:
    path: /clusters
    method: POST
    data_selector: data
- name: MailgunMachine
  endpoint:
    path: /machines
    method: POST
    data_selector: data
- name: mailgun
  endpoint:
    path: /v3/messages
    method: POST
    data_selector: data
    params: {}
- name: management_cluster
  endpoint:
    path: /path/to/management_cluster
    method: POST
    data_selector: resources
- name: provider_components
  endpoint:
    path: /path/to/provider_components
    method: GET
    data_selector: resources
- name: IBM Cloud
  endpoint:
    path: /v1/resource_groups
    method: GET
- name: IONOS Cloud
  endpoint:
    path: /v1/data_centers
    method: GET
- name: workload_cluster
  endpoint:
    path: /create
    method: POST
    data_selector: cluster
    params: {}
- name: scaleway-secret
  endpoint:
    path: /scaleway
    method: POST
    data_selector: stringData
    params: {}
- name: KubeadmConfig
  endpoint:
    path: /api/bootstrap.cluster.x-k8s.io/v1beta2/kubeadmconfigs
    method: GET
    data_selector: items
    params: {}
- name: DockerCluster
  endpoint:
    path: /api/infrastructure.cluster.x-k8s.io/v1beta2/dockerclusters
    method: GET
    data_selector: items
    params: {}
- name: Machine
  endpoint:
    path: /api/cluster.x-k8s.io/v1beta2/machines
    method: GET
    data_selector: items
    params: {}
- name: MicroK8sControlPlane
  endpoint:
    path: /api/v1/microk8scontrolplanes
    method: GET
    data_selector: items
    params: {}
- name: MachineDeployment
  endpoint:
    path: /api/v1/machinedeployments
    method: GET
    data_selector: items
    params: {}
- name: MachineTemplate
  endpoint:
    path: /services/data/vXX.X/MachineTemplate
    method: POST
    data_selector: template
    params: {}
- name: KubeadmControlPlane
  endpoint:
    path: /services/data/vXX.X/KubeadmControlPlane
    method: GET
    data_selector: spec
    params: {}
- name: MachineHealthCheck
  endpoint:
    path: /services/data/vXX.X/sobjects/MachineHealthCheck
    method: POST
    data_selector: status
    params: {}
- name: Cluster
  endpoint:
    path: /clusters
    method: GET
    data_selector: items
    params: {}
- name: MachineDeployment
  endpoint:
    path: /machinedeployments
    method: GET
    data_selector: items
    params: {}
- name: MachinePool
  endpoint:
    path: /machinepools
    method: GET
    data_selector: items
    params: {}
- name: httpProxy
  endpoint:
    path: /spec/template/spec/httpProxy/url
    method: add
    data_selector: url
- name: mdConfig
  endpoint:
    path: /spec/template/spec/customImage
    method: add
    data_selector: osImage
- name: dnsServers
  endpoint:
    path: /spec/template/spec/dnsServers
    method: add
    data_selector: dnsServers
- name: cluster
  endpoint:
    path: /clusters
    method: PATCH
    data_selector: spec.topology
    params: {}
- name: BeforeClusterCreate
  endpoint:
    path: /hooks/runtime/cluster/v1alpha1/before-cluster-create
    method: POST
- name: AfterControlPlaneInitialized
  endpoint:
    path: /hooks/runtime/cluster/v1alpha1/after-control-plane-initialized
    method: POST
- name: BeforeClusterUpgrade
  endpoint:
    path: /hooks/runtime/cluster/v1alpha1/before-cluster-upgrade
    method: POST
- name: AfterControlPlaneUpgrade
  endpoint:
    path: /hooks/runtime/cluster/v1alpha1/after-control-plane-upgrade
    method: POST
- name: AfterClusterUpgrade
  endpoint:
    path: /hooks/runtime/cluster/v1alpha1/after-cluster-upgrade
    method: POST
- name: BeforeClusterDelete
  endpoint:
    path: /hooks/runtime/cluster/v1alpha1/before-cluster-delete
    method: POST
- name: GeneratePatches
  endpoint:
    path: /hooks/runtime/cluster/v1alpha1/generate-patches
    method: POST
- name: ValidateTopology
  endpoint:
    path: /hooks/runtime/cluster/v1alpha1/validate-topology
    method: POST
- name: DiscoverVariables
  endpoint:
    path: /hooks/runtime/cluster/v1alpha1/discover-variables
    method: POST
- name: workload_cluster
  endpoint:
    path: /clusters/ignition-cluster
    method: GET
    data_selector: status
- name: metrics
  endpoint:
    path: /metrics
    method: GET
    data_selector: metrics
    params: {}
- name: pprof
  endpoint:
    path: /debug/pprof
    method: GET
    data_selector: pprof
    params: {}
- name: ClusterClass
  endpoint:
    path: /cluster.x-k8s.io/v1beta2/ClusterClass
    method: GET
    data_selector: items
- name: Cluster
  endpoint:
    path: /cluster.x-k8s.io/v1beta2/Cluster
    method: GET
    data_selector: items
- name: bootstrap
  endpoint:
    path: /bootstrap
    method: GET
    data_selector: records
    params: {}
- name: controlplane
  endpoint:
    path: /controlplane
    method: GET
    data_selector: records
    params: {}
- name: docker
  endpoint:
    path: /docker
    method: GET
    data_selector: records
    params: {}
- name: clusterctl
  endpoint:
    path: /clusterctl
    method: GET
    data_selector: records
    params: {}
- name: manifest_generation
  endpoint:
    path: /manifest_generation
    method: GET
    data_selector: records
    params: {}
- name: controllers
  endpoint:
    path: /controllers
    method: GET
    data_selector: records
    params: {}
- name: webhooks
  endpoint:
    path: /webhooks
    method: GET
    data_selector: records
    params: {}
- name: InfrastructureMachinePool
  endpoint:
    path: /infrastructureMachinePools
    method: GET
    data_selector: items
    params: {}
- name: MailgunCluster
  endpoint:
    path: /clusters
    method: POST
    data_selector: data
    params: {}
- name: MailgunMachine
  endpoint:
    path: /machines
    method: POST
    data_selector: data
    params: {}
- name: MailgunCluster
  endpoint:
    path: /clusters
    method: POST
    data_selector: response
- name: InfraCluster
  endpoint:
    path: /path/to/InfraCluster
    method: GET
    data_selector: records
- name: InfraClusterList
  endpoint:
    path: /path/to/InfraClusterList
    method: GET
    data_selector: records
- name: IONOSCloudCluster
  endpoint:
    path: /v1/ionoscloud/cluster
    method: POST
- name: Kubernetes Image
  endpoint:
    path: /images/ironic-python-agent.kernel
    method: GET
    data_selector: images
    params: {}
- name: OpenNebula API
  endpoint:
    path: /RPC2
    method: GET
    data_selector: api
    params: {}
- name: ClusterAPI
  endpoint:
    path: /generate/cluster
    method: POST
    data_selector: cluster
    params: {}
- name: scaleway-secret
  endpoint:
    path: /api/v1/namespaces/kube-system/secrets/scaleway-secret
    method: GET
    data_selector: stringData
- name: DockerCluster
  endpoint:
    path: /infrastructure.cluster.x-k8s.io/v1beta2/DockerCluster
    method: POST
    data_selector: metadata.name
- name: Cluster
  endpoint:
    path: /cluster.x-k8s.io/v1beta2/Cluster
    method: POST
    data_selector: metadata.name
- name: KubeadmConfig
  endpoint:
    path: /bootstrap.cluster.x-k8s.io/v1beta2/KubeadmConfig
    method: POST
    data_selector: metadata.name
- name: DockerMachine
  endpoint:
    path: /infrastructure.cluster.x-k8s.io/v1beta2/DockerMachine
    method: POST
    data_selector: metadata.name
- name: Machine
  endpoint:
    path: /cluster.x-k8s.io/v1beta2/Machine
    method: POST
    data_selector: metadata.name
- name: MicroK8sControlPlane
  endpoint:
    path: /api/v1beta1/microk8scontrolplane
    method: POST
    data_selector: spec
    params:
      version: v1.23.0
      replicas: 3
- name: MachineDeployment
  endpoint:
    path: /api/v1beta2/machinedeployment
    method: POST
    data_selector: spec
    params:
      replicas: 2
      clusterName: capi-aws
- name: MachineTemplate
  endpoint:
    path: /services/data/vXX.X/sobjects/MachineTemplate
    method: POST
    data_selector: spec
    params: {}
- name: KubeadmControlPlane
  endpoint:
    path: /services/data/vXX.X/sobjects/KubeadmControlPlane
    method: PATCH
    data_selector: spec
    params: {}
- name: MachineDeployment
  endpoint:
    path: /api/v1/machine-deployment
    method: POST
    data_selector: items
    params: {}
- name: MachineHealthCheck
  endpoint:
    path: /api/v1beta2/machinehealthchecks
    method: GET
    data_selector: items
    params: {}
- name: cluster
  endpoint:
    path: /api/v1/clusters
    method: GET
    data_selector: items
- name: docker-clusterclass
  endpoint:
    path: /docker-clusterclass
    method: GET
    data_selector: spec
    params: {}
- name: azure-clusterclass
  endpoint:
    path: /azure-clusterclass
    method: GET
    data_selector: spec
    params: {}
- name: ExtensionConfig
  endpoint:
    path: /api/v1/namespaces/default/services/https:webhook-service:443/proxy/hooks.runtime.cluster.x-k8s.io/v1alpha1/discovery
    method: POST
    data_selector: extensions
- name: BeforeClusterCreate
  endpoint:
    path: /hooks/runtime/cluster.x-k8s.io/v1alpha1/before-cluster-create
    method: POST
    data_selector: status
    params: {}
- name: AfterControlPlaneInitialized
  endpoint:
    path: /hooks/runtime/cluster.x-k8s.io/v1alpha1/after-control-plane-initialized
    method: POST
    data_selector: status
    params: {}
- name: BeforeClusterUpgrade
  endpoint:
    path: /hooks/runtime/cluster.x-k8s.io/v1alpha1/before-cluster-upgrade
    method: POST
    data_selector: status
    params: {}
- name: AfterControlPlaneUpgrade
  endpoint:
    path: /hooks/runtime/cluster.x-k8s.io/v1alpha1/after-control-plane-upgrade
    method: POST
    data_selector: status
    params: {}
- name: AfterClusterUpgrade
  endpoint:
    path: /hooks/runtime/cluster.x-k8s.io/v1alpha1/after-cluster-upgrade
    method: POST
    data_selector: status
    params: {}
- name: BeforeClusterDelete
  endpoint:
    path: /hooks/runtime/cluster.x-k8s.io/v1alpha1/before-cluster-delete
    method: POST
    data_selector: status
    params: {}
- name: DiscoverVariablesRequest
  endpoint:
    path: /DiscoverVariablesRequest
    method: GET
    data_selector: variables
    params: {}
- name: DiscoverVariablesResponse
  endpoint:
    path: /DiscoverVariablesResponse
    method: GET
    data_selector: variables
    params: {}
- name: metrics
  endpoint:
    path: /metrics
    method: GET
    data_selector: ''
    params: {}
- name: pprof
  endpoint:
    path: /debug/pprof/*
    method: GET
    data_selector: ''
    params: {}
- name: log_level
  endpoint:
    path: /debug/flags/v
    method: PUT
    data_selector: ''
    params: {}
- name: podSecurityStandard
  endpoint:
    path: /spec/template/spec/kubeadmConfigSpec/clusterConfiguration/apiServer/extraArgs
    method: add
    data_selector: admission-control-config-file
    params:
      value: /etc/kubernetes/kube-apiserver-admission-pss.yaml
- name: extraVolumes
  endpoint:
    path: /spec/template/spec/kubeadmConfigSpec/clusterConfiguration/apiServer/extraVolumes
    method: add
    data_selector: admission-pss
    params:
      name: admission-pss
      hostPath: /etc/kubernetes/kube-apiserver-admission-pss.yaml
      mountPath: /etc/kubernetes/kube-apiserver-admission-pss.yaml
      readOnly: true
      pathType: File
- name: files
  endpoint:
    path: /spec/template/spec/kubeadmConfigSpec/files
    method: add
    data_selector: AdmissionConfiguration
    params:
      content: "apiVersion: apiserver.config.k8s.io/v1\nkind: AdmissionConfiguration\n\
        plugins:\n- name: PodSecurity\n  configuration:\n    apiVersion: pod-security.admission.config.k8s.io/v1\n\
        \    kind: PodSecurityConfiguration\n    defaults:\n      enforce: \"{{ .podSecurity.enforce\
        \ }}\"\n      enforce-version: \"latest\"\n      audit: \"{{ .podSecurity.audit\
        \ }}\"\n      audit-version: \"latest\"\n      warn: \"{{ .podSecurity.warn\
        \ }}\"\n      warn-version: \"latest\"\n    exemptions:\n      usernames:\
        \ []\n      runtimeClasses: []\n      namespaces: [kube-system]"
      path: /etc/kubernetes/kube-apiserver-admission-pss.yaml
- name: CAPD
  endpoint:
    path: /test/infrastructure/docker
    method: GET
    data_selector: records
    params: {}
- name: CAPK
  endpoint:
    path: /cluster-api-provider-kubevirt
    method: GET
    data_selector: records
    params: {}
- name: test
  endpoint:
    path: /test
    method: GET
    data_selector: results
    params: {}
- name: MailgunCluster
  endpoint:
    path: /cluster-api/mailgunclusters
    method: POST
    data_selector: MailgunCluster
    params: {}
- name: MailgunMachine
  endpoint:
    path: /cluster-api/mailgunmachines
    method: POST
    data_selector: MailgunMachine
    params: {}
- name: MailgunCluster
  endpoint:
    path: /clusters
    method: POST
    data_selector: data
- name: InfraCluster
  endpoint:
    path: /infrastructure/mailgun
    method: POST
    data_selector: items
    params: {}
- name: InfraClusterList
  endpoint:
    path: /infrastructure/mailgun/list
    method: GET
    data_selector: items
    params: {}
- name: InfraCluster
  endpoint:
    path: status.failureDomains
    method: GET
    data_selector: failureDomains
- name: management_cluster
  endpoint:
    path: /cluster-api/management-cluster
    method: POST
    data_selector: results
    params: {}
- name: vpc
  endpoint:
    path: /v1/vpcs
    method: GET
- name: powervs
  endpoint:
    path: /v1/power-vs
    method: GET
- name: workload_cluster
  endpoint:
    path: /RPC2
    method: POST
    data_selector: cluster
    params: {}
- name: scaleway-secret
  endpoint:
    path: /v1/secret
    method: POST
    data_selector: secret
    params: {}
- name: DockerCluster
  endpoint:
    path: /infrastructure.cluster.x-k8s.io/v1beta2/DockerCluster
    method: POST
    data_selector: metadata
    params: {}
- name: Cluster
  endpoint:
    path: /cluster.x-k8s.io/v1beta2/Cluster
    method: POST
    data_selector: metadata
    params: {}
- name: KubeadmConfig
  endpoint:
    path: /bootstrap.cluster.x-k8s.io/v1beta2/KubeadmConfig
    method: POST
    data_selector: metadata
    params: {}
- name: DockerMachine
  endpoint:
    path: /infrastructure.cluster.x-k8s.io/v1beta2/DockerMachine
    method: POST
    data_selector: metadata
    params: {}
- name: Machine
  endpoint:
    path: /cluster.x-k8s.io/v1beta2/Machine
    method: POST
    data_selector: metadata
    params: {}
- name: MicroK8sControlPlane
  endpoint:
    path: /api/v1/namespaces/default/microk8scontrolplanes
    method: GET
    data_selector: items
    params: {}
- name: MachineDeployment
  endpoint:
    path: /api/v1/namespaces/default/machinedeployments
    method: GET
    data_selector: items
    params: {}
- name: MachineTemplate
  endpoint:
    path: ''
    method: ''
    data_selector: ''
    params: {}
- name: KubeadmControlPlane
  endpoint:
    path: ''
    method: ''
    data_selector: ''
    params: {}
- name: MachineDeployment
  endpoint:
    path: ''
    method: ''
    data_selector: ''
    params: {}
- name: MachineDeployment
  endpoint:
    path: /apis/cluster.x-k8s.io/v1beta1/machinedeployments
    method: GET
    data_selector: items
    params: {}
- name: MachineSet
  endpoint:
    path: /apis/cluster.x-k8s.io/v1beta1/machinesets
    method: GET
    data_selector: items
    params: {}
- name: MachineHealthCheck
  endpoint:
    path: /api/v1/machinehealthchecks
    method: POST
    data_selector: metadata
    params: {}
- name: KubeadmControlPlane
  endpoint:
    path: /api/v1/kubeadmcontrolplanes
    method: POST
    data_selector: metadata
    params: {}
- name: Cluster
  endpoint:
    path: /api/v1beta2/cluster
    method: POST
    data_selector: cluster
    params: {}
- name: ClusterClass
  endpoint:
    path: /api/v1beta2/clusterclass
    method: POST
    data_selector: clusterClass
    params: {}
- name: ClusterClass
  endpoint:
    path: /clusterclasses
    method: GET
    data_selector: items
- name: cluster
  endpoint:
    path: /clusters
    method: PATCH
    data_selector: clusters
    params: {}
- name: BeforeClusterCreate
  endpoint:
    path: /before-cluster-create
    method: POST
    data_selector: status
    params: {}
- name: AfterControlPlaneInitialized
  endpoint:
    path: /after-control-plane-initialized
    method: POST
    data_selector: status
    params: {}
- name: BeforeClusterUpgrade
  endpoint:
    path: /before-cluster-upgrade
    method: POST
    data_selector: status
    params:
      fromKubernetesVersion: v1.21.2
      toKubernetesVersion: v1.22.0
- name: AfterControlPlaneUpgrade
  endpoint:
    path: /after-control-plane-upgrade
    method: POST
    data_selector: status
    params:
      kubernetesVersion: v1.22.0
- name: AfterClusterUpgrade
  endpoint:
    path: /after-cluster-upgrade
    method: POST
    data_selector: status
    params:
      kubernetesVersion: v1.22.0
- name: BeforeClusterDelete
  endpoint:
    path: /before-cluster-delete
    method: POST
    data_selector: status
    params: {}
- name: GeneratePatches
  endpoint:
    path: /generate-patches
    method: POST
    data_selector: status
    params: {}
- name: ValidateTopology
  endpoint:
    path: /validate-topology
    method: POST
    data_selector: status
    params: {}
- name: DiscoverVariables
  endpoint:
    path: /discover-variables
    method: POST
    data_selector: status
    params: {}
- name: DiscoverVariablesRequest
  endpoint:
    path: /hooks.runtime.cluster.x-k8s.io/v1alpha1/DiscoverVariables
    method: POST
    data_selector: variables
    params: {}
- name: DiscoverVariablesResponse
  endpoint:
    path: /hooks.runtime.cluster.x-k8s.io/v1alpha1/DiscoverVariablesResponse
    method: GET
    data_selector: status
    params: {}
- name: metrics
  endpoint:
    path: /metrics
    method: GET
- name: pprof
  endpoint:
    path: /debug/pprof/*
    method: GET
- name: log_level
  endpoint:
    path: /debug/flags/v
    method: PUT
- name: podSecurityStandard
  endpoint:
    path: /spec/template/spec/kubeadmConfigSpec/clusterConfiguration/apiServer/extraArgs
    method: add
    data_selector: value
    params:
      admission-control-config-file: /etc/kubernetes/kube-apiserver-admission-pss.yaml
- name: extraVolumes
  endpoint:
    path: /spec/template/spec/kubeadmConfigSpec/clusterConfiguration/apiServer/extraVolumes
    method: add
    data_selector: value
    params:
      name: admission-pss
      hostPath: /etc/kubernetes/kube-apiserver-admission-pss.yaml
      mountPath: /etc/kubernetes/kube-apiserver-admission-pss.yaml
      readOnly: true
      pathType: File
- name: files
  endpoint:
    path: /spec/template/spec/kubeadmConfigSpec/files
    method: add
    data_selector: valueFrom.template
    params:
      content: "apiVersion: apiserver.config.k8s.io/v1\nkind: AdmissionConfiguration\n\
        plugins:\n- name: PodSecurity\n  configuration:\n    apiVersion: pod-security.admission.config.k8s.io/v1\n\
        \    kind: PodSecurityConfiguration\n    defaults:\n      enforce: \"{{ .podSecurity.enforce\
        \ }}\"\n      enforce-version: \"latest\"\n      audit: \"{{ .podSecurity.audit\
        \ }}\"\n      audit-version: \"latest\"\n      warn: \"{{ .podSecurity.warn\
        \ }}\"\n      warn-version: \"latest\"\n    exemptions:\n      usernames:\
        \ []\n      runtimeClasses: []\n      namespaces: [kube-system]"
      path: /etc/kubernetes/kube-apiserver-admission-pss.yaml
- name: my-infra-provider
  endpoint:
    path: https://github.com/myorg/myrepo/releases/latest/infrastructure-components.yaml
    method: GET
- name: cluster-api
  endpoint:
    path: https://github.com/myorg/myforkofclusterapi/releases/latest/core-components.yaml
    method: GET
- name: my-other-infra-provider
  endpoint:
    path: https://gitlab.example.com/api/v4/projects/myorg%2Fmyrepo/packages/generic/myrepo/v1.2.3/infrastructure-components.yaml
    method: GET
- name: kubeadm
  endpoint:
    path: https://gitlab.example.com/api/v4/projects/external-packages%2Fcluster-api/packages/generic/cluster-api/v1.1.3/bootstrap-components.yaml
    method: GET
- name: Docker
  endpoint:
    path: /test/infrastructure/docker
    method: GET
    data_selector: records
- name: KubeVirt
  endpoint:
    path: /kubernetes-sigs/cluster-api-provider-kubevirt
    method: GET
    data_selector: records
- name: kustomize_substitutions
  endpoint:
    path: /services/data/vXX.X/sobjects/KustomizeSubstitutions
    method: GET
    data_selector: records
- name: Cluster
  endpoint:
    path: /clusters
    method: GET
    data_selector: clusters
- name: Machine
  endpoint:
    path: /machines
    method: GET
    data_selector: machines
- name: MachineSet
  endpoint:
    path: /machinesets
    method: GET
    data_selector: machinesets
- name: MachineDeployment
  endpoint:
    path: /machinedeployments
    method: GET
    data_selector: machinedeployments
- name: MachinePool
  endpoint:
    path: /machinepools
    method: GET
    data_selector: machinepools
- name: MachinePool
  endpoint:
    path: /infrastructureMachinePool
    method: GET
    data_selector: status
    params: {}
- name: MailgunCluster
  endpoint:
    path: /v3/mailgunclusters
    method: POST
    data_selector: data
    params: {}
- name: Cluster
  endpoint:
    path: /cluster-api
    method: GET
    data_selector: items
- name: MailgunCluster
  endpoint:
    path: /infrastructure.cluster.x-k8s.io/v1alpha1/mailgunclusters
    method: GET
    data_selector: items
- name: FailureDomains
  endpoint:
    path: /status/failureDomains
    method: GET
    data_selector: failureDomains
- name: FooClusterStatus
  endpoint:
    path: /status/initialization/provisioned
    method: GET
    data_selector: initialization
    params: {}
- name: FooClusterInitializationStatus
  endpoint:
    path: /initialization
    method: GET
    data_selector: provisioned
    params: {}
- name: workload_cluster
  endpoint:
    path: /v1/cluster
    method: POST
    data_selector: data
- name: scaleway-secret
  endpoint:
    path: /api/v1/secrets/scaleway-secret
    method: POST
    data_selector: metadata
    params: {}
- name: KubeadmConfig
  endpoint:
    path: /kubeadmconfigs
    method: GET
    data_selector: items
    params: {}
- name: DockerCluster
  endpoint:
    path: /dockerclusters
    method: GET
    data_selector: items
    params: {}
- name: Machine
  endpoint:
    path: /machines
    method: GET
    data_selector: items
    params: {}
- name: MicroK8sControlPlane
  endpoint:
    path: /api/v1beta1/microk8scontrolplane
    method: GET
    data_selector: spec.controlPlaneConfig
    params: {}
- name: MachineDeployment
  endpoint:
    path: /api/v1beta2/machinedeployment
    method: GET
    data_selector: spec
    params: {}
- name: machine_health_check
  endpoint:
    path: /cluster.x-k8s.io/v1beta2/machinehealthchecks
    method: POST
    data_selector: spec
    params: {}
- name: my-docker-cluster
  endpoint:
    path: /api/v1/clusters/my-docker-cluster
    method: GET
- name: docker-clusterclass-v0.1.0
  endpoint:
    path: /api/v1/clusterclasses/docker-clusterclass-v0.1.0
    method: GET
- name: docker-clusterclass
  endpoint:
    path: /clusterclasses/docker-clusterclass-v0.1.0
    method: GET
    data_selector: spec
    params: {}
- name: azure-clusterclass
  endpoint:
    path: /clusterclasses/azure-clusterclass-v0.1.0
    method: GET
    data_selector: spec
    params: {}
- name: BeforeClusterCreate
  endpoint:
    path: /hooks/runtime/cluster.x-k8s.io/v1alpha1/before-cluster-create
    method: POST
    data_selector: status
    params: {}
- name: AfterControlPlaneInitialized
  endpoint:
    path: /hooks/runtime/cluster.x-k8s.io/v1alpha1/after-control-plane-initialized
    method: POST
    data_selector: status
    params: {}
- name: BeforeClusterUpgrade
  endpoint:
    path: /hooks/runtime/cluster.x-k8s.io/v1alpha1/before-cluster-upgrade
    method: POST
    data_selector: status
    params: {}
- name: AfterControlPlaneUpgrade
  endpoint:
    path: /hooks/runtime/cluster.x-k8s.io/v1alpha1/after-control-plane-upgrade
    method: POST
    data_selector: status
    params: {}
- name: AfterClusterUpgrade
  endpoint:
    path: /hooks/runtime/cluster.x-k8s.io/v1alpha1/after-cluster-upgrade
    method: POST
    data_selector: status
    params: {}
- name: BeforeClusterDelete
  endpoint:
    path: /hooks/runtime/cluster.x-k8s.io/v1alpha1/before-cluster-delete
    method: POST
    data_selector: status
    params: {}
- name: GeneratePatches
  endpoint:
    path: /hooks/runtime/cluster.x-k8s.io/v1alpha1/generate-patches
    method: POST
    data_selector: items
    params: {}
- name: ValidateTopology
  endpoint:
    path: /hooks/runtime/cluster.x-k8s.io/v1alpha1/validate-topology
    method: POST
    data_selector: status
    params: {}
- name: DiscoverVariables
  endpoint:
    path: /hooks/runtime/cluster.x-k8s.io/v1alpha1/discover-variables
    method: POST
    data_selector: variables
    params: {}
- name: DiscoverVariablesRequest
  endpoint:
    path: /hooks/runtime/cluster/x-k8s.io/v1alpha1/DiscoverVariablesRequest
    method: POST
    data_selector: variables
- name: DiscoverVariablesResponse
  endpoint:
    path: /hooks/runtime/cluster/x-k8s.io/v1alpha1/DiscoverVariablesResponse
    method: GET
    data_selector: variables
- name: metrics
  endpoint:
    path: /metrics
    method: GET
    data_selector: data
    params: {}
- name: pprof
  endpoint:
    path: /debug/pprof
    method: GET
    data_selector: data
    params: {}
- name: podSecurityStandard
  endpoint:
    path: /spec/template/spec/kubeadmConfigSpec/clusterConfiguration/apiServer/extraArgs
    method: add
    data_selector: admission-control-config-file
    params:
      value: /etc/kubernetes/kube-apiserver-admission-pss.yaml
- name: admission-pss
  endpoint:
    path: /spec/template/spec/kubeadmConfigSpec/clusterConfiguration/apiServer/extraVolumes
    method: add
    data_selector: hostPath
    params:
      name: admission-pss
      hostPath: /etc/kubernetes/kube-apiserver-admission-pss.yaml
      mountPath: /etc/kubernetes/kube-apiserver-admission-pss.yaml
      readOnly: true
      pathType: File
- name: files
  endpoint:
    path: /spec/template/spec/kubeadmConfigSpec/files
    method: add
    data_selector: template
    params:
      content: "apiVersion: apiserver.config.k8s.io/v1\nkind: AdmissionConfiguration\n\
        plugins:\n- name: PodSecurity\n  configuration:\n    apiVersion: pod-security.admission.config.k8s.io/v1beta1\n\
        \    kind: PodSecurityConfiguration\n    defaults:\n      enforce: \"{{ .podSecurity.enforce\
        \ }}\"\n      enforce-version: \"latest\"\n      audit: \"{{ .podSecurity.audit\
        \ }}\"\n      audit-version: \"latest\"\n      warn: \"{{ .podSecurity.warn\
        \ }}\"\n      warn-version: \"latest\"\n    exemptions:\n      usernames:\
        \ []\n      runtimeClasses: []\n      namespaces: [kube-system]\n"
- name: kustomize_substitutions
  endpoint:
    path: kustomize_substitutions
    method: POST
    data_selector: substitutions
- name: InfrastructureMachinePool
  endpoint:
    path: /infrastructure-machine-pools
    method: GET
    data_selector: items
    params: {}
- name: MailgunCluster
  endpoint:
    path: /infrastructure/mailgunclusters
    method: GET
    data_selector: items
- name: MailgunMachine
  endpoint:
    path: /infrastructure/mailgunmachines
    method: GET
    data_selector: items
- name: MailgunCluster
  endpoint:
    path: /v3/mailgunclusters
    method: POST
    data_selector: data
    params: {}
- name: InfraCluster
  endpoint:
    path: /infraCluster
    method: POST
    data_selector: items
    params: {}
- name: InfraClusterList
  endpoint:
    path: /infraClusterList
    method: GET
    data_selector: items
    params: {}
- name: IONOSCloudCluster
  endpoint:
    path: /clusterctl/init/ionoscloud-ionoscloud
    method: POST
- name: workload_cluster
  endpoint:
    path: /RPC2
    method: POST
    data_selector: cluster
    params: {}
- name: scaleway-secret
  endpoint:
    path: /kube-system/scaleway-secret
    method: POST
- name: KubeadmConfig
  endpoint:
    path: /kubeadmconfig
    method: GET
    data_selector: items
- name: DockerCluster
  endpoint:
    path: /dockercluster
    method: GET
    data_selector: items
- name: Machine
  endpoint:
    path: /machine
    method: GET
    data_selector: items
- name: MicroK8sControlPlane
  endpoint:
    path: /microk8s/control-plane
    method: GET
    data_selector: spec
    params: {}
- name: MachineDeployment
  endpoint:
    path: /microk8s/machine-deployment
    method: GET
    data_selector: spec
    params: {}
- name: MachineDeployment
  endpoint:
    path: /v1alpha4/MachineDeployment
    method: GET
    data_selector: items
    params: {}
- name: MachineSet
  endpoint:
    path: /v1alpha4/MachineSet
    method: GET
    data_selector: items
    params: {}
- name: MachineHealthCheck
  endpoint:
    path: /path/to/machinehealthcheck
    method: POST
    data_selector: status
    params: {}
- name: KubeadmControlPlane
  endpoint:
    path: /path/to/kubeadmcontrolplane
    method: POST
    data_selector: status
    params: {}
- name: my-docker-cluster
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
- name: httpProxy
  endpoint:
    path: /spec/template/spec/httpProxy/url
    method: add
    data_selector: url
    params: {}
- name: mdConfig
  endpoint:
    path: /spec/template/spec/customImage
    method: add
    data_selector: osImage
    params: {}
- name: dnsServers
  endpoint:
    path: /spec/template/spec/dnsServers
    method: add
    data_selector: dnsServers
    params: {}
- name: dnsServer
  endpoint:
    path: /spec/template/spec/dnsServer
    method: add
    data_selector: dnsServers[0]
    params: {}
- name: controlPlane
  endpoint:
    path: /spec/topology/controlPlane
    method: PATCH
    data_selector: controlPlane
    params: {}
- name: machineDeployments
  endpoint:
    path: /spec/topology/workers/machineDeployments
    method: PATCH
    data_selector: machineDeployments
    params: {}
- name: BeforeClusterCreate
  endpoint:
    path: /beforeClusterCreate
    method: POST
    data_selector: status
    params: {}
- name: AfterControlPlaneInitialized
  endpoint:
    path: /afterControlPlaneInitialized
    method: POST
    data_selector: status
    params: {}
- name: BeforeClusterUpgrade
  endpoint:
    path: /beforeClusterUpgrade
    method: POST
    data_selector: status
    params: {}
- name: AfterControlPlaneUpgrade
  endpoint:
    path: /afterControlPlaneUpgrade
    method: POST
    data_selector: status
    params: {}
- name: AfterClusterUpgrade
  endpoint:
    path: /afterClusterUpgrade
    method: POST
    data_selector: status
    params: {}
- name: BeforeClusterDelete
  endpoint:
    path: /beforeClusterDelete
    method: POST
    data_selector: status
    params: {}
- name: GeneratePatches
  endpoint:
    path: /generatePatches
    method: POST
    data_selector: status
    params: {}
- name: ValidateTopology
  endpoint:
    path: /validateTopology
    method: POST
    data_selector: status
    params: {}
- name: DiscoverVariables
  endpoint:
    path: /discoverVariables
    method: POST
    data_selector: status
    params: {}
- name: DiscoverVariablesRequest
  endpoint:
    path: /hooks.runtime.cluster.x-k8s.io/v1alpha1/DiscoverVariablesRequest
    method: POST
    data_selector: settings
- name: DiscoverVariablesResponse
  endpoint:
    path: /hooks.runtime.cluster.x-k8s.io/v1alpha1/DiscoverVariablesResponse
    method: GET
    data_selector: variables
- name: metrics
  endpoint:
    path: /metrics
    method: GET
    data_selector: data
- name: pprof
  endpoint:
    path: /debug/pprof/*
    method: GET
    data_selector: data
- name: log_level
  endpoint:
    path: /debug/flags/v
    method: PUT
    data_selector: data
- name: podSecurityStandard
  endpoint:
    path: /spec/template/spec/kubeadmConfigSpec/clusterConfiguration/apiServer/extraArgs
    method: add
    data_selector: value
    params:
      admission-control-config-file: /etc/kubernetes/kube-apiserver-admission-pss.yaml
- name: extraVolumes
  endpoint:
    path: /spec/template/spec/kubeadmConfigSpec/clusterConfiguration/apiServer/extraVolumes
    method: add
    data_selector: value
    params:
      name: admission-pss
      hostPath: /etc/kubernetes/kube-apiserver-admission-pss.yaml
      mountPath: /etc/kubernetes/kube-apiserver-admission-pss.yaml
      readOnly: true
      pathType: File
- name: files
  endpoint:
    path: /spec/template/spec/kubeadmConfigSpec/files
    method: add
    data_selector: valueFrom/template
    params:
      content: "apiVersion: apiserver.config.k8s.io/v1\nkind: AdmissionConfiguration\n\
        plugins:\n- name: PodSecurity\n  configuration:\n    apiVersion: pod-security.admission.config.k8s.io/v1\n\
        \    kind: PodSecurityConfiguration\n    defaults:\n      enforce: \"{{ .podSecurity.enforce\
        \ }}\"\n      enforce-version: \"latest\"\n      audit: \"{{ .podSecurity.audit\
        \ }}\"\n      audit-version: \"latest\"\n      warn: \"{{ .podSecurity.warn\
        \ }}\"\n      warn-version: \"latest\"\n    exemptions:\n      usernames:\
        \ []\n      runtimeClasses: []\n      namespaces: [kube-system]\n"
      path: /etc/kubernetes/kube-apiserver-admission-pss.yaml
- name: my-infra-provider
  endpoint:
    path: https://github.com/myorg/myrepo/releases/latest/infrastructure-components.yaml
    method: GET
- name: cluster-api
  endpoint:
    path: https://github.com/myorg/myforkofclusterapi/releases/latest/core-components.yaml
    method: GET
- name: my-other-infra-provider
  endpoint:
    path: https://gitlab.example.com/api/v4/projects/myorg%2Fmyrepo/packages/generic/myrepo/v1.2.3/infrastructure-components.yaml
    method: GET
- name: kubeadm
  endpoint:
    path: https://gitlab.example.com/api/v4/projects/external-packages%2Fcluster-api/packages/generic/cluster-api/v1.1.3/bootstrap-components.yaml
    method: GET
- name: kustomize_substitutions
  endpoint:
    path: /kustomize/substitutions
    method: POST
- name: Bootstrap
  endpoint:
    path: /bootstrap
    method: GET
- name: ControlPlane
  endpoint:
    path: /controlplane
    method: GET
- name: Cluster API Provider Docker
  endpoint:
    path: /cluster-api-provider-docker
    method: GET
- name: Clusterctl CLI
  endpoint:
    path: /clusterctl
    method: GET
- name: Manifest Generation
  endpoint:
    path: /manifest-generation
    method: GET
- name: Controllers
  endpoint:
    path: /controllers
    method: GET
- name: MailgunCluster
  endpoint:
    path: /api/infrastructure/v1alpha1/mailgunclusters
    method: GET
    data_selector: items
    params: {}
- name: MailgunMachine
  endpoint:
    path: /api/infrastructure/v1alpha1/mailgunmachines
    method: GET
    data_selector: items
    params: {}
- name: MailgunCluster
  endpoint:
    path: /mailgunclusters
    method: GET
    data_selector: items
- name: FooCluster
  endpoint:
    path: /fooclusters
    method: POST
    data_selector: items
- name: FooClusterList
  endpoint:
    path: /fooclusters
    method: GET
    data_selector: items
- name: management_cluster
  endpoint:
    path: /api/management_cluster
    method: POST
    data_selector: cluster
    params: {}
- name: VPC
  endpoint:
    params:
      IBMVPC_REGION: us-south
      IBMVPC_ZONE: us-south-1
      IBMVPC_RESOURCEGROUP: <your-resource-group-id>
      IBMVPC_NAME: ibm-vpc-0
      IBMVPC_IMAGE_ID: <you-image-id>
      IBMVPC_PROFILE: bx2-4x16
      IBMVPC_SSHKEY_ID: <your-sshkey-id>
- name: PowerVS
  endpoint:
    params:
      IBMPOWERVS_SSHKEY_NAME: <your-ssh-key>
      IBMPOWERVS_VIP: <internal-ip>
      IBMPOWERVS_VIP_EXTERNAL: <external-ip>
      IBMPOWERVS_VIP_CIDR: 29
      IBMPOWERVS_IMAGE_NAME: <your-capi-image-name>
      IBMPOWERVS_SERVICE_INSTANCE_ID: <service-instance-id>
      IBMPOWERVS_NETWORK_NAME: <your-capi-network-name>
- name: IONOS Cloud
  endpoint:
    params:
      IONOS_TOKEN: <your-token>
      IONOSCLOUD_DATACENTER_ID: <your-datacenter-id>
      CONTROL_PLANE_ENDPOINT_IP: 10.10.10.4
      CONTROL_PLANE_ENDPOINT_LOCATION: de/txl
      IONOSCLOUD_MACHINE_IMAGE_ID: <your-image-id>
      IONOSCLOUD_MACHINE_SSH_KEYS: <your-ssh-key>
- name: cluster
  endpoint:
    path: /api/v1/clusters
    method: GET
    data_selector: clusters
- name: instances
  endpoint:
    path: /api/v1/instances
    method: GET
    data_selector: instances
- name: scaleway-secret
  endpoint:
    path: /api/v1/namespaces/kube-system/secrets
    method: POST
    data_selector: metadata
    params: {}
- name: KubeadmConfig
  endpoint:
    path: /api/bootstrap.cluster.x-k8s.io/v1beta2/kubeadmconfigs
    method: GET
    data_selector: items
    params: {}
- name: DockerCluster
  endpoint:
    path: /api/infrastructure.cluster.x-k8s.io/v1beta2/dockerclusters
    method: GET
    data_selector: items
    params: {}
- name: Cluster
  endpoint:
    path: /api/cluster.x-k8s.io/v1beta2/clusters
    method: GET
    data_selector: items
    params: {}
- name: Machine
  endpoint:
    path: /api/cluster.x-k8s.io/v1beta2/machines
    method: GET
    data_selector: items
    params: {}
- name: MicroK8sControlPlane
  endpoint:
    path: /api/v1beta2/controlplane.cluster.x-k8s.io/microk8scontrolplanes
    method: POST
    data_selector: spec
    params: {}
- name: MachineDeployment
  endpoint:
    path: /api/v1beta2/machinedeployments
    method: POST
    data_selector: spec
    params: {}
- name: KubeadmControlPlane
  endpoint:
    path: /api/v1alpha3/kubeadmcontrolplanes
    method: GET
    data_selector: items
    params: {}
- name: MachineDeployment
  endpoint:
    path: /api/v1alpha3/machinedeployments
    method: GET
    data_selector: items
    params: {}
- name: MachineDeployment
  endpoint:
    path: /v1alpha4/machinedeployments
    method: GET
    data_selector: items
    params: {}
- name: MachineSet
  endpoint:
    path: /v1alpha4/machinesets
    method: GET
    data_selector: items
    params: {}
- name: MachineHealthCheck
  endpoint:
    path: /cluster.x-k8s.io/v1beta2/machinehealthchecks
    method: POST
    data_selector: metadata
    params: {}
- name: KubeadmControlPlane
  endpoint:
    path: /cluster.x-k8s.io/v1beta2/kubeadmcontrolplanes
    method: POST
    data_selector: metadata
    params: {}
- name: my-docker-cluster
  endpoint:
    path: /spec/topology/version
    method: GET
- name: ClusterClass
  endpoint:
    path: /cluster/x-k8s.io/v1beta2/ClusterClass
    method: GET
    data_selector: items
    params: {}
- name: BeforeClusterCreate
  endpoint:
    path: /hooks/runtime/cluster.x-k8s.io/v1alpha1/BeforeClusterCreateRequest
    method: POST
    data_selector: status
    params: {}
- name: AfterControlPlaneInitialized
  endpoint:
    path: /hooks/runtime/cluster.x-k8s.io/v1alpha1/AfterControlPlaneInitializedRequest
    method: POST
    data_selector: status
    params: {}
- name: BeforeClusterUpgrade
  endpoint:
    path: /hooks/runtime/cluster.x-k8s.io/v1alpha1/BeforeClusterUpgradeRequest
    method: POST
    data_selector: status
    params: {}
- name: AfterControlPlaneUpgrade
  endpoint:
    path: /hooks/runtime/cluster.x-k8s.io/v1alpha1/AfterControlPlaneUpgradeRequest
    method: POST
    data_selector: status
    params: {}
- name: AfterClusterUpgrade
  endpoint:
    path: /hooks/runtime/cluster.x-k8s.io/v1alpha1/AfterClusterUpgradeRequest
    method: POST
    data_selector: status
    params: {}
- name: BeforeClusterDelete
  endpoint:
    path: /hooks/runtime/cluster.x-k8s.io/v1alpha1/BeforeClusterDeleteRequest
    method: POST
    data_selector: status
    params: {}
- name: workload_cluster
  endpoint:
    path: /api/v1/namespaces/kube-system/services/kube-dns:dns/proxy
    method: GET
    data_selector: cluster_info
    params: {}
- name: metrics
  endpoint:
    path: /metrics
    method: GET
    data_selector: ''
    params: {}
- name: pprof
  endpoint:
    path: /debug/pprof
    method: GET
    data_selector: ''
    params: {}
- name: loglevel
  endpoint:
    path: /debug/flags/v
    method: PUT
    data_selector: ''
    params: {}
- name: bootstrap
  endpoint:
    path: /bootstrap
    method: GET
    data_selector: records
- name: controlplane
  endpoint:
    path: /controlplane
    method: GET
    data_selector: records
- name: cluster_api_provider_docker
  endpoint:
    path: /cluster-api-provider-docker
    method: GET
    data_selector: records
- name: clusterctl
  endpoint:
    path: /clusterctl
    method: GET
    data_selector: records
- name: manifest_generation
  endpoint:
    path: /manifest-generation
    method: GET
    data_selector: records
- name: controllers
  endpoint:
    path: /controllers
    method: GET
    data_selector: records
- name: util
  endpoint:
    path: /util
    method: GET
    data_selector: records
- name: feature
  endpoint:
    path: /feature
    method: GET
    data_selector: records
- name: errors
  endpoint:
    path: /errors
    method: GET
    data_selector: records
- name: experimental_features
  endpoint:
    path: /experimental-features
    method: GET
    data_selector: records
- name: webhooks
  endpoint:
    path: /webhooks
    method: GET
    data_selector: records
- name: MachinePool
  endpoint:
    path: /infrastructureMachinePool
    method: GET
    data_selector: spec
    params: {}
- name: mailgun_cluster
  endpoint:
    path: /mailgun/clusters
    method: POST
    data_selector: response
    params: {}
- name: InfraCluster
  endpoint:
    path: /infraClusters
    method: POST
    data_selector: items
    params: {}
- name: FooCluster
  endpoint:
    path: /fooclusters
    method: POST
    data_selector: items
    params: {}
- name: FooClusterTemplate
  endpoint:
    path: /fooclustertemplates
    method: GET
    data_selector: items
- name: FooClusterTemplateList
  endpoint:
    path: /fooclustertemplates
    method: GET
    data_selector: items
- name: cluster
  endpoint:
    path: /v1/clusters
    method: GET
- name: workload_cluster
  endpoint:
    path: /clusters
    method: GET
    data_selector: clusters
- name: scaleway-secret
  endpoint:
    path: /api/v1/namespaces/kube-system/secrets/scaleway-secret
    method: GET
- name: MicroK8sControlPlane
  endpoint:
    path: /api/v1beta1/controlplanes/microk8s
    method: POST
    data_selector: spec.controlPlaneConfig
    params: {}
- name: MachineDeployment
  endpoint:
    path: /api/v1beta1/machinedeployments
    method: POST
    data_selector: spec.template.spec
    params: {}
- name: KubeadmControlPlane
  endpoint:
    path: /kubeadmcontrolplanes
    method: POST
    data_selector: spec
    params: {}
- name: MachineDeployment
  endpoint:
    path: /machinedeployments
    method: POST
    data_selector: spec
    params: {}
- name: MachineHealthCheck
  endpoint:
    path: /machinehealthchecks
    method: POST
    data_selector: spec
    params: {}
- name: MachineDeployment
  endpoint:
    path: /apis/cluster.x-k8s.io/v1beta1/machinedeployments
    method: GET
    data_selector: items
- name: MachineSet
  endpoint:
    path: /apis/cluster.x-k8s.io/v1beta1/machinesets
    method: GET
    data_selector: items
- name: MachineHealthCheck
  endpoint:
    path: /apis/cluster.x-k8s.io/v1beta1/machinehealthchecks
    method: GET
    data_selector: items
- name: Cluster
  endpoint:
    path: /clusters
    method: POST
    data_selector: items
    params: {}
- name: ClusterClass
  endpoint:
    path: /clusterclasses
    method: POST
    data_selector: items
    params: {}
- name: ClusterClass
  endpoint:
    path: /v1beta2/ClusterClass
    method: GET
    data_selector: items
    params: {}
- name: BeforeClusterCreate
  endpoint:
    path: /BeforeClusterCreate
    method: POST
    data_selector: status
    params: {}
- name: AfterControlPlaneInitialized
  endpoint:
    path: /AfterControlPlaneInitialized
    method: POST
    data_selector: status
    params: {}
- name: BeforeClusterUpgrade
  endpoint:
    path: /BeforeClusterUpgrade
    method: POST
    data_selector: status
    params: {}
- name: AfterControlPlaneUpgrade
  endpoint:
    path: /AfterControlPlaneUpgrade
    method: POST
    data_selector: status
    params: {}
- name: AfterClusterUpgrade
  endpoint:
    path: /AfterClusterUpgrade
    method: POST
    data_selector: status
    params: {}
- name: BeforeClusterDelete
  endpoint:
    path: /BeforeClusterDelete
    method: POST
    data_selector: status
    params: {}
- name: GeneratePatches
  endpoint:
    path: /GeneratePatches
    method: POST
    data_selector: status
    params: {}
- name: ValidateTopology
  endpoint:
    path: /ValidateTopology
    method: POST
    data_selector: status
    params: {}
- name: DiscoverVariables
  endpoint:
    path: /DiscoverVariables
    method: POST
    data_selector: status
    params: {}
- name: metrics
  endpoint:
    path: /metrics
    method: GET
    data_selector: metrics
- name: pprof
  endpoint:
    path: /debug/pprof
    method: GET
    data_selector: pprof
- name: log_level
  endpoint:
    path: /debug/flags/v
    method: PUT
    data_selector: log_level
- name: ClusterClass
  endpoint:
    path: /cluster.x-k8s.io/v1beta2
    method: GET
    data_selector: spec.patches
    params: {}
- name: Cluster
  endpoint:
    path: /cluster.x-k8s.io/v1beta2
    method: GET
    data_selector: spec.topology
    params: {}
- name: my-infra-provider
  endpoint:
    path: https://github.com/myorg/myrepo/releases/latest/infrastructure-components.yaml
    method: GET
- name: cluster-api
  endpoint:
    path: https://github.com/myorg/myforkofclusterapi/releases/latest/core-components.yaml
    method: GET
- name: my-other-infra-provider
  endpoint:
    path: https://gitlab.example.com/api/v4/projects/myorg%2Fmyrepo/packages/generic/myrepo/v1.2.3/infrastructure-components.yaml
    method: GET
- name: kubeadm
  endpoint:
    path: https://gitlab.example.com/api/v4/projects/external-packages%2Fcluster-api/packages/generic/cluster-api/v1.1.3/bootstrap-components.yaml
    method: GET
- name: kustomize_substitutions
  endpoint:
    path: /kustomize_substitutions
    method: POST
    data_selector: substitutions
- name: MailgunCluster
  endpoint:
    path: /clusters
    method: POST
    data_selector: clusters
    params: {}
- name: InfraCluster
  endpoint:
    path: /infrastructure.cluster.x-k8s.io/v1alpha1/infraclusters
    method: GET
    data_selector: items
- name: InfraClusterList
  endpoint:
    path: /infrastructure.cluster.x-k8s.io/v1alpha1/infraclusterlists
    method: GET
    data_selector: items
- name: FooMachine
  endpoint:
    path: /foomachines
    method: GET
    data_selector: items
- name: FooMachineList
  endpoint:
    path: /foomachines
    method: GET
    data_selector: items
- name: addresses
  endpoint:
    path: /status/addresses
    method: GET
    data_selector: addresses
    params: {}
- name: initialization
  endpoint:
    path: /status/initialization
    method: GET
    data_selector: initialization
    params: {}
- name: IONOSCloudCluster
  endpoint:
    path: /services/data/vXX.X/IONOSCloudCluster
    method: GET
- name: workload_cluster
  endpoint:
    path: /RPC2
    method: POST
    data_selector: data
    params: {}
- name: scaleway-secret
  endpoint:
    path: /api/v1/namespaces/kube-system/secrets
    method: POST
    data_selector: metadata
    params: {}
- name: KubeadmConfig
  endpoint:
    path: /bootstrap.cluster.x-k8s.io/v1beta2/kubeadmconfigs
    method: GET
    data_selector: items
- name: DockerCluster
  endpoint:
    path: /infrastructure.cluster.x-k8s.io/v1beta2/dockerclusters
    method: GET
    data_selector: items
- name: Machine
  endpoint:
    path: /cluster.x-k8s.io/v1beta2/machines
    method: GET
    data_selector: items
- name: MicroK8sControlPlane
  endpoint:
    path: /api/v1beta1/microk8scontrolplanes
    method: POST
    data_selector: spec.controlPlaneConfig
    params: {}
- name: MachineDeployment
  endpoint:
    path: /api/v1beta2/machinedeployments
    method: POST
    data_selector: spec.template.spec
    params: {}
- name: KubeadmControlPlane
  endpoint:
    path: /kubeadmcontrolplane
    method: GET
    data_selector: spec
    params: {}
- name: MachineDeployment
  endpoint:
    path: /machinedeployment
    method: GET
    data_selector: spec
    params: {}
- name: MachineDeployment
  endpoint:
    path: /apis/cluster.x-k8s.io/v1beta1/machinedeployments
    method: GET
    data_selector: items
    params: {}
- name: MachineSet
  endpoint:
    path: /apis/cluster.x-k8s.io/v1beta1/machinesets
    method: GET
    data_selector: items
    params: {}
- name: Cluster
  endpoint:
    path: /apis/cluster.x-k8s.io/v1beta1/clusters
    method: GET
    data_selector: items
    params: {}
- name: MachineHealthCheck
  endpoint:
    path: /api/v1beta2/machinehealthchecks
    method: GET
    data_selector: items
    params: {}
- name: KubeadmControlPlane
  endpoint:
    path: /api/v1beta2/kubeadmcontrolplanes
    method: GET
    data_selector: items
    params: {}
- name: Cluster
  endpoint:
    path: /api/v1beta2/Cluster
    method: GET
    data_selector: spec.topology
    params: {}
- name: ClusterClass
  endpoint:
    path: /api/v1beta2/ClusterClass
    method: GET
    data_selector: spec
    params: {}
- name: ClusterClass
  endpoint:
    path: /clusterclasses
    method: GET
    data_selector: items
- name: ExtensionConfig
  endpoint:
    path: /api/v1/namespaces/default/services/https:webhook-service:443/proxy/hooks.runtime.cluster.x-k8s.io/v1alpha1/discovery
    method: POST
    data_selector: apiVersion
    params: {}
- name: BeforeClusterCreate
  endpoint:
    path: /v1alpha1/hooks.runtime.cluster.x-k8s.io/before-cluster-create
    method: POST
    data_selector: status
    params: {}
- name: AfterControlPlaneInitialized
  endpoint:
    path: /v1alpha1/hooks.runtime.cluster.x-k8s.io/after-control-plane-initialized
    method: POST
    data_selector: status
    params: {}
- name: BeforeClusterUpgrade
  endpoint:
    path: /v1alpha1/hooks.runtime.cluster.x-k8s.io/before-cluster-upgrade
    method: POST
    data_selector: status
    params: {}
- name: AfterControlPlaneUpgrade
  endpoint:
    path: /v1alpha1/hooks.runtime.cluster.x-k8s.io/after-control-plane-upgrade
    method: POST
    data_selector: status
    params: {}
- name: AfterClusterUpgrade
  endpoint:
    path: /v1alpha1/hooks.runtime.cluster.x-k8s.io/after-cluster-upgrade
    method: POST
    data_selector: status
    params: {}
- name: BeforeClusterDelete
  endpoint:
    path: /v1alpha1/hooks.runtime.cluster.x-k8s.io/before-cluster-delete
    method: POST
    data_selector: status
    params: {}
- name: GeneratePatches
  endpoint:
    path: /v1alpha1/hooks.runtime.cluster.x-k8s.io/generate-patches
    method: POST
    data_selector: status
    params: {}
- name: ValidateTopology
  endpoint:
    path: /v1alpha1/hooks.runtime.cluster.x-k8s.io/validate-topology
    method: POST
    data_selector: status
    params: {}
- name: metrics
  endpoint:
    path: /metrics
    method: GET
- name: pprof
  endpoint:
    path: /debug/pprof/*
    method: GET
- name: loglevel
  endpoint:
    path: /debug/flags/v
    method: PUT
- name: ClusterClass
  endpoint:
    path: /cluster.x-k8s.io/v1beta2
    method: GET
- name: Cluster
  endpoint:
    path: /cluster.x-k8s.io/v1beta2
    method: GET
- name: my-infra-provider
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
- name: cluster-api
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
- name: kustomize_substitutions
  endpoint:
    path: ''
    method: POST
    data_selector: ''
    params: {}
- name: Cluster
  endpoint:
    path: /clusters
    method: GET
    data_selector: items
- name: Machine
  endpoint:
    path: /machines
    method: GET
    data_selector: items
- name: MachineSet
  endpoint:
    path: /machinesets
    method: GET
    data_selector: items
- name: MachineDeployment
  endpoint:
    path: /machinedeployments
    method: GET
    data_selector: items
- name: InfrastructureMachinePool
  endpoint:
    path: /infrastructureMachinePools
    method: GET
    data_selector: items
    params: {}
- name: MachineHealthCheck
  endpoint:
    path: /machineHealthChecks
    method: GET
    data_selector: items
    params: {}
- name: MailgunCluster
  endpoint:
    path: /clusters
    method: POST
    data_selector: data
    params: {}
- name: FooCluster
  endpoint:
    path: /fooclusters
    method: GET
    data_selector: items
- name: FooClusterList
  endpoint:
    path: /fooclusters
    method: GET
    data_selector: items
- name: FooClusterStatus
  endpoint:
    path: /status
    method: GET
    data_selector: status.failureDomains
- name: FooClusterInitializationStatus
  endpoint:
    path: /initialization
    method: GET
    data_selector: initialization.provisioned
- name: FooMachine
  endpoint:
    path: /foomachines
    method: GET
    data_selector: items
- name: FooMachineList
  endpoint:
    path: /foomachines
    method: GET
    data_selector: items
- name: IONOSCloudCluster
  endpoint:
    path: /services/ionoscloud/cluster
    method: POST
- name: workload_cluster
  endpoint:
    path: /workload_cluster
    method: POST
    data_selector: cluster
    params:
      name: one
- name: scaleway-secret
  endpoint:
    path: /api/v1/secrets
    method: POST
    data_selector: data
    params: {}
- name: MicroK8sControlPlane
  endpoint:
    path: /api/v1beta2/microk8scontrolplanes
    method: GET
    data_selector: items
    params: {}
- name: MachineDeployment
  endpoint:
    path: /api/v1beta2/machinedeployments
    method: GET
    data_selector: items
    params: {}
- name: MicroK8sConfigTemplate
  endpoint:
    path: /api/v1beta1/microk8sconfigtemplates
    method: GET
    data_selector: items
    params: {}
- name: KubeadmControlPlane
  endpoint:
    path: /api/v1alpha3/kubeadmcontrolplanes
    method: POST
    data_selector: items
    params: {}
- name: MachineDeployment
  endpoint:
    path: /api/v1alpha3/machinedeployments
    method: POST
    data_selector: items
    params: {}
- name: MachineDeployment
  endpoint:
    path: /v1alpha4/machinedeployments
    method: GET
    data_selector: items
- name: MachineSet
  endpoint:
    path: /v1alpha4/machinesets
    method: GET
    data_selector: items
- name: MachinePool
  endpoint:
    path: /v1alpha4/machinepools
    method: GET
    data_selector: items
- name: machine_health_check
  endpoint:
    path: /api/v1beta2/machinehealthchecks
    method: POST
    data_selector: spec
    params: {}
- name: kubeadm_control_plane
  endpoint:
    path: /api/v1beta2/kubeadmcontrolplanes
    method: POST
    data_selector: spec
    params: {}
- name: MachinePool
  endpoint:
    path: /tasks/experimental-features/machine-pools
    method: GET
    data_selector: records
- name: MachineSetPreflightChecks
  endpoint:
    path: /tasks/experimental-features/machineset-preflight-checks
    method: GET
    data_selector: records
- name: ClusterClass
  endpoint:
    path: /tasks/experimental-features/cluster-class/
    method: GET
    data_selector: records
- name: my-docker-cluster
  endpoint:
    path: /clusters/my-docker-cluster
    method: GET
    data_selector: spec.topology
    params: {}
- name: docker-cluster
  endpoint:
    path: /clusters/docker-cluster
    method: GET
    data_selector: spec.topology
    params: {}
- name: ClusterClass
  endpoint:
    path: /clusterclass
    method: GET
    data_selector: items
    params: {}
- name: ExtensionConfig
  endpoint:
    path: /api/v1/namespaces/default/services/https:webhook-service:443/proxy/hooks.runtime.cluster.x-k8s.io/v1alpha1/discovery
    method: POST
    data_selector: apiVersion
    params: {}
- name: BeforeClusterCreate
  endpoint:
    path: /api/v1alpha1/hooks/runtime/cluster/beforeclustercreate
    method: POST
    data_selector: status
    params: {}
- name: AfterControlPlaneInitialized
  endpoint:
    path: /api/v1alpha1/hooks/runtime/cluster/aftercontrolplaneinitialized
    method: POST
    data_selector: status
    params: {}
- name: BeforeClusterUpgrade
  endpoint:
    path: /api/v1alpha1/hooks/runtime/cluster/beforeclusterupgrade
    method: POST
    data_selector: status
    params: {}
- name: AfterControlPlaneUpgrade
  endpoint:
    path: /api/v1alpha1/hooks/runtime/cluster/aftercontrolplaneupgrade
    method: POST
    data_selector: status
    params: {}
- name: AfterClusterUpgrade
  endpoint:
    path: /api/v1alpha1/hooks/runtime/cluster/afterclusterupgrade
    method: POST
    data_selector: status
    params: {}
- name: BeforeClusterDelete
  endpoint:
    path: /api/v1alpha1/hooks/runtime/cluster/beforeclusterdelete
    method: POST
    data_selector: status
    params: {}
- name: metrics
  endpoint:
    path: /metrics
    method: GET
- name: pprof
  endpoint:
    path: /debug/pprof/*
    method: GET
- name: loglevel
  endpoint:
    path: /debug/flags/v
    method: PUT
- name: podSecurityStandard
  endpoint:
    path: /spec/template/spec/kubeadmConfigSpec/clusterConfiguration/apiServer/extraArgs
    method: add
    data_selector: admission-control-config-file
    params:
      value: /etc/kubernetes/kube-apiserver-admission-pss.yaml
- name: admission-pss
  endpoint:
    path: /spec/template/spec/kubeadmConfigSpec/clusterConfiguration/apiServer/extraVolumes
    method: add
    data_selector: name
    params:
      hostPath: /etc/kubernetes/kube-apiserver-admission-pss.yaml
      mountPath: /etc/kubernetes/kube-apiserver-admission-pss.yaml
      readOnly: true
      pathType: File
- name: AdmissionConfiguration
  endpoint:
    path: /spec/template/spec/kubeadmConfigSpec/files
    method: add
    data_selector: content
    params:
      apiVersion: apiserver.config.k8s.io/v1
      kind: AdmissionConfiguration
      plugins:
      - name: PodSecurity
        configuration:
          apiVersion: pod-security.admission.config.k8s.io/v1
          kind: PodSecurityConfiguration
          defaults:
            enforce: '{{ .podSecurity.enforce }}'
            enforce-version: latest
            audit: '{{ .podSecurity.audit }}'
            audit-version: latest
            warn: '{{ .podSecurity.warn }}'
            warn-version: latest
          exemptions:
            usernames: []
            runtimeClasses: []
            namespaces:
            - kube-system
- name: my-infra-provider
  endpoint:
    path: https://github.com/myorg/myrepo/releases/latest/infrastructure-components.yaml
    method: GET
- name: cluster-api
  endpoint:
    path: https://github.com/myorg/myforkofclusterapi/releases/latest/core-components.yaml
    method: GET
- name: my-other-infra-provider
  endpoint:
    path: https://gitlab.example.com/api/v4/projects/myorg%2Fmyrepo/packages/generic/myrepo/v1.2.3/infrastructure-components.yaml
    method: GET
- name: kubeadm
  endpoint:
    path: https://gitlab.example.com/api/v4/projects/external-packages%2Fcluster-api/packages/generic/cluster-api/v1.1.3/bootstrap-components.yaml
    method: GET
- name: Cluster
  endpoint:
    path: /clusters
    method: GET
    data_selector: clusters
    params: {}
- name: MachineDeployment
  endpoint:
    path: /machinedeployments
    method: GET
    data_selector: machineDeployments
    params: {}
- name: MachineSet
  endpoint:
    path: /machinesets
    method: GET
    data_selector: machineSets
    params: {}
- name: Machine
  endpoint:
    path: /machines
    method: GET
    data_selector: machines
    params: {}
- name: InfrastructureMachinePool
  endpoint:
    path: /infrastructureMachinePools
    method: GET
    data_selector: items
- name: MachineHealthCheck
  endpoint:
    path: /machineHealthChecks
    method: GET
    data_selector: items
- name: mailgun_cluster
  endpoint:
    path: /clusters
    method: POST
    data_selector: response
- name: FooCluster
  endpoint:
    path: /fooclusters
    method: GET
    data_selector: items
- name: FooClusterTemplate
  endpoint:
    path: /fooclustertemplates
    method: GET
    data_selector: items
- name: FooClusterTemplateList
  endpoint:
    path: /fooclustertemplatelists
    method: GET
    data_selector: items
- name: InfraMachineTemplate
  endpoint:
    path: /foomachinetemplates
    method: GET
    data_selector: items
- name: InfraMachineTemplateList
  endpoint:
    path: /foomachinetemplatelists
    method: GET
    data_selector: items
- name: BootstrapConfig
  endpoint:
    path: /fooconfig
    method: GET
    data_selector: items
- name: BootstrapConfigList
  endpoint:
    path: /fooconfiglists
    method: GET
    data_selector: items
- name: IONOSCloudCluster
  endpoint:
    path: /clusters
    method: POST
- name: workload_cluster
  endpoint:
    path: /workload-cluster
    method: POST
    data_selector: cluster
    params:
      name: one
- name: scaleway_secret
  endpoint:
    path: /scaleway/secret
    method: POST
    data_selector: secret_data
- name: KubeadmConfig
  endpoint:
    path: /kubeadm/config
    method: GET
    data_selector: items
    params: {}
- name: DockerCluster
  endpoint:
    path: /docker/cluster
    method: GET
    data_selector: items
    params: {}
- name: Machine
  endpoint:
    path: /machine
    method: GET
    data_selector: items
    params: {}
- name: MicroK8sControlPlane
  endpoint:
    path: /api/v1beta2/controlplane.cluster.x-k8s.io/microk8scontrolplanes
    method: POST
    data_selector: items
    params: {}
- name: MachineDeployment
  endpoint:
    path: /api/v1beta2/machinedeployments
    method: POST
    data_selector: items
    params: {}
- name: KubeadmControlPlane
  endpoint:
    path: /kubeadmcontrolplanes
    method: GET
    data_selector: items
- name: MachineDeployment
  endpoint:
    path: /machinedeployments
    method: GET
    data_selector: items
- name: MachineSet
  endpoint:
    path: /machinesets
    method: GET
    data_selector: items
- name: Machine
  endpoint:
    path: /machines
    method: GET
    data_selector: items
- name: MachineDeployment
  endpoint:
    path: /cluster-api/machine-deployments
    method: POST
    data_selector: machines
    params:
      incremental: replicas
- name: MachineSet
  endpoint:
    path: /cluster-api/machine-sets
    method: POST
    data_selector: machines
    params:
      incremental: replicas
- name: machine_health_check
  endpoint:
    path: /api/v1beta2/machinehealthchecks
    method: GET
    data_selector: items
    params: {}
- name: MachinePool
  endpoint:
    path: /tasks/experimental-features/machine-pools
    method: GET
    data_selector: records
    params: {}
- name: ClusterClass
  endpoint:
    path: /tasks/experimental-features/cluster-class/
    method: GET
    data_selector: records
    params: {}
- name: my-docker-cluster
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
- name: my-aws-cluster
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
- name: httpProxy
  endpoint:
    path: /spec/template/spec/httpProxy/url
    method: add
    data_selector: url
    params: {}
- name: mdConfig
  endpoint:
    path: /spec/template/spec/customImage
    method: add
    data_selector: osImage
    params: {}
- name: dnsServers
  endpoint:
    path: /spec/template/spec/dnsServers
    method: add
    data_selector: dnsServers
    params: {}
- name: firstDnsServer
  endpoint:
    path: /spec/template/spec/dnsServer
    method: add
    data_selector: dnsServers[0]
    params: {}
- name: BeforeClusterCreateRequest
  endpoint:
    path: /hooks/runtime/cluster.x-k8s.io/v1alpha1/before-cluster-create
    method: POST
    data_selector: status
    params: {}
- name: AfterControlPlaneInitializedRequest
  endpoint:
    path: /hooks/runtime/cluster.x-k8s.io/v1alpha1/after-control-plane-initialized
    method: POST
    data_selector: status
    params: {}
- name: BeforeClusterUpgradeRequest
  endpoint:
    path: /hooks/runtime/cluster.x-k8s.io/v1alpha1/before-cluster-upgrade
    method: POST
    data_selector: status
    params: {}
- name: AfterControlPlaneUpgradeRequest
  endpoint:
    path: /hooks/runtime/cluster.x-k8s.io/v1alpha1/after-control-plane-upgrade
    method: POST
    data_selector: status
    params: {}
- name: AfterClusterUpgradeRequest
  endpoint:
    path: /hooks/runtime/cluster.x-k8s.io/v1alpha1/after-cluster-upgrade
    method: POST
    data_selector: status
    params: {}
- name: BeforeClusterDeleteRequest
  endpoint:
    path: /hooks/runtime/cluster.x-k8s.io/v1alpha1/before-cluster-delete
    method: POST
    data_selector: status
    params: {}
- name: GeneratePatchesRequest
  endpoint:
    path: /hooks/runtime/cluster.x-k8s.io/v1alpha1/generate-patches
    method: POST
    data_selector: status
    params: {}
- name: ValidateTopologyRequest
  endpoint:
    path: /hooks/runtime/cluster.x-k8s.io/v1alpha1/validate-topology
    method: POST
    data_selector: status
    params: {}
- name: DiscoverVariables
  endpoint:
    path: /hooks/runtime/cluster.x-k8s.io/v1alpha1/discover-variables
    method: POST
    data_selector: status
    params: {}
- name: DiscoverVariablesRequest
  endpoint:
    path: /hooks/runtime/cluster/x-k8s.io/v1alpha1/DiscoverVariablesRequest
    method: POST
    data_selector: variables
    params: {}
- name: DiscoverVariablesResponse
  endpoint:
    path: /hooks/runtime/cluster/x-k8s.io/v1alpha1/DiscoverVariablesResponse
    method: GET
    data_selector: status
    params: {}
- name: metrics
  endpoint:
    path: /metrics
    method: GET
- name: pprof
  endpoint:
    path: /debug/pprof/*
    method: GET
- name: loglevel
  endpoint:
    path: /debug/flags/v
    method: PUT
- name: ClusterClass
  endpoint:
    path: /api/v1beta2/clusterclasses
    method: GET
    data_selector: items
    params: {}
- name: Cluster
  endpoint:
    path: /api/v1beta2/clusters
    method: GET
    data_selector: items
    params: {}
- name: kustomize_substitutions
  endpoint:
    params:
      AZURE_SUBSCRIPTION_ID_B64: '$(echo "${AZURE_SUBSCRIPTION_ID}" | tr -d ''

        '' | base64 | tr -d ''

        '')'
      AZURE_TENANT_ID_B64: '$(echo "${AZURE_TENANT_ID}" | tr -d ''

        '' | base64 | tr -d ''

        '')'
      AZURE_CLIENT_SECRET_B64: '$(echo "${AZURE_CLIENT_SECRET}" | tr -d ''

        '' | base64 | tr -d ''

        '')'
      AZURE_CLIENT_ID_B64: '$(echo "${AZURE_CLIENT_ID}" | tr -d ''

        '' | base64 | tr -d ''

        '')'
- name: kustomize_substitutions
  endpoint:
    params:
      GCP_B64ENCODED_CREDENTIALS: your credentials here
- name: kustomize_substitutions
  endpoint:
    params:
      VSPHERE_USERNAME: administrator@vsphere.local
      VSPHERE_PASSWORD: Admin123
- name: Cluster
  endpoint:
    path: /clusters
    method: GET
    data_selector: items
- name: Machine
  endpoint:
    path: /machines
    method: GET
    data_selector: items
- name: MachineSet
  endpoint:
    path: /machinesets
    method: GET
    data_selector: items
- name: MachineDeployment
  endpoint:
    path: /machinedeployments
    method: GET
    data_selector: items
- name: infrastructure_machine_pool
  endpoint:
    path: /infrastructure/machinepool
    method: GET
    data_selector: status
    params: {}
- name: MailgunCluster
  endpoint:
    path: /v3/{domain}/messages
    method: POST
    data_selector: response
    params: {}
- name: InfraCluster
  endpoint:
    path: /api/v1/InfraCluster
    method: GET
    data_selector: items
    params: {}
- name: InfraClusterList
  endpoint:
    path: /api/v1/InfraClusterList
    method: GET
    data_selector: items
    params: {}
- name: failureDomains
  endpoint:
    path: /status/failureDomains
    method: GET
    data_selector: failureDomains
- name: initialization
  endpoint:
    path: /status/initialization
    method: GET
    data_selector: initialization
- name: FooMachine
  endpoint:
    path: /foomachines
    method: GET
- name: FooMachineList
  endpoint:
    path: /foomachinelist
    method: GET
- name: FooMachineTemplate
  endpoint:
    path: /foomachinetemplates
    method: GET
- name: FooMachineTemplateList
  endpoint:
    path: /foomachinetemplatelist
    method: GET
- name: BootstrapConfig
  endpoint:
    path: /bootstrapconfigs
    method: GET
    data_selector: items
- name: BootstrapConfigList
  endpoint:
    path: /bootstrapconfiglists
    method: GET
    data_selector: items
- name: IONOS Cloud
  endpoint:
    path: /api/v1/datacenters
    method: GET
- name: workload_cluster
  endpoint:
    path: /cluster
    method: GET
    data_selector: clusters
    params: {}
- name: scaleway-secret
  endpoint:
    path: /
    method: POST
- name: MicroK8sControlPlane
  endpoint:
    path: /api/v1beta1/controlplane.cluster.x-k8s.io/microk8scontrolplanes
    method: GET
    data_selector: items
    params: {}
- name: MachineDeployment
  endpoint:
    path: /api/v1beta2/machinedeployments
    method: GET
    data_selector: items
    params: {}
- name: MachineDeployment
  endpoint:
    path: /apis/cluster.x-k8s.io/v1alpha4/machinedeployments
    method: GET
    data_selector: items
    params: {}
- name: MachineSet
  endpoint:
    path: /apis/cluster.x-k8s.io/v1alpha4/machinesets
    method: GET
    data_selector: items
    params: {}
- name: MachinePool
  endpoint:
    path: /apis/cluster.x-k8s.io/v1alpha4/machinepools
    method: GET
    data_selector: items
    params: {}
- name: MachineHealthCheck
  endpoint:
    path: /machinehealthchecks
    method: GET
    data_selector: items
    params: {}
- name: KubeadmControlPlane
  endpoint:
    path: /kubeadmcontrolplanes
    method: GET
    data_selector: items
    params: {}
- name: cluster
  endpoint:
    path: /api/v1/clusters
    method: POST
    data_selector: spec
    params: {}
- name: clusterclass
  endpoint:
    path: /api/v1/clusterclasses
    method: POST
    data_selector: spec
    params: {}
- name: docker-clusterclass
  endpoint:
    path: /clusterClasses/docker-clusterclass-v0.1.0
    method: GET
- name: azure-clusterclass
  endpoint:
    path: /clusterClasses/azure-clusterclass-v0.1.0
    method: GET
- name: BeforeClusterCreateRequest
  endpoint:
    path: /hooks/runtime/cluster/x-k8s.io/v1alpha1/before-cluster-create
    method: POST
- name: AfterControlPlaneInitializedRequest
  endpoint:
    path: /hooks/runtime/cluster/x-k8s.io/v1alpha1/after-control-plane-initialized
    method: POST
- name: BeforeClusterUpgradeRequest
  endpoint:
    path: /hooks/runtime/cluster/x-k8s.io/v1alpha1/before-cluster-upgrade
    method: POST
- name: AfterControlPlaneUpgradeRequest
  endpoint:
    path: /hooks/runtime/cluster/x-k8s.io/v1alpha1/after-control-plane-upgrade
    method: POST
- name: AfterClusterUpgradeRequest
  endpoint:
    path: /hooks/runtime/cluster/x-k8s.io/v1alpha1/after-cluster-upgrade
    method: POST
- name: BeforeClusterDeleteRequest
  endpoint:
    path: /hooks/runtime/cluster/x-k8s.io/v1alpha1/before-cluster-delete
    method: POST
- name: GeneratePatchesRequest
  endpoint:
    path: /hooks/runtime/cluster/x-k8s.io/v1alpha1/generate-patches
    method: POST
- name: ValidateTopologyRequest
  endpoint:
    path: /hooks/runtime/cluster/x-k8s.io/v1alpha1/validate-topology
    method: POST
- name: metrics
  endpoint:
    path: /metrics
    method: GET
    data_selector: metrics
    params: {}
- name: pprof
  endpoint:
    path: /debug/pprof
    method: GET
    data_selector: pprof
    params: {}
- name: loglevel
  endpoint:
    path: /debug/flags/v
    method: PUT
    data_selector: loglevel
    params: {}
- name: podSecurityStandard
  endpoint:
    path: /spec/template/spec/kubeadmConfigSpec/clusterConfiguration/apiServer/extraArgs
    method: POST
    data_selector: value
    params: {}
- name: my-infra-provider
  endpoint:
    path: https://github.com/myorg/myrepo/releases/latest/infrastructure-components.yaml
    method: GET
    data_selector: records
- name: cluster-api
  endpoint:
    path: https://github.com/myorg/myforkofclusterapi/releases/latest/core-components.yaml
    method: GET
    data_selector: records
- name: my-other-infra-provider
  endpoint:
    path: https://gitlab.example.com/api/v4/projects/myorg%2Fmyrepo/packages/generic/myrepo/v1.2.3/infrastructure-components.yaml
    method: GET
    data_selector: records
- name: kubeadm
  endpoint:
    path: https://gitlab.example.com/api/v4/projects/external-packages%2Fcluster-api/packages/generic/cluster-api/v1.1.3/bootstrap-components.yaml
    method: GET
    data_selector: records
- name: kustomize_substitutions
  endpoint:
    path: /kustomize_substitutions
    method: POST
    data_selector: substitutions
    params: {}
- name: gcp_credentials
  endpoint:
    path: /gcp/credentials
    method: POST
    data_selector: credentials
    params: {}
- name: vsphere_credentials
  endpoint:
    path: /vsphere/credentials
    method: POST
    data_selector: credentials
    params:
      username: administrator@vsphere.local
      password: Admin123
- name: Cluster
  endpoint:
    path: /clusters
    method: GET
    data_selector: items
    params: {}
- name: Machine
  endpoint:
    path: /machines
    method: GET
    data_selector: items
    params: {}
- name: machine_pool
  endpoint:
    path: /infrastructureMachinePool
    method: GET
    data_selector: status
    params: {}
- name: fuzz_testing_api_conversion
  endpoint:
    path: /fuzz-testing/api/conversion
    method: GET
    data_selector: data
    params: {}
- name: oss_fuzz_continuous_fuzzing
  endpoint:
    path: /oss-fuzz/continuous-fuzzing
    method: GET
    data_selector: data
    params: {}
- name: test_maintainability
  endpoint:
    path: /test/maintainability
    method: GET
    data_selector: data
    params: {}
- name: running_unit_and_integration_tests
  endpoint:
    path: /running/unit/integration/tests
    method: GET
    data_selector: data
    params: {}
- name: running_end_to_end_tests
  endpoint:
    path: /running/end/to/end/tests
    method: GET
    data_selector: data
    params: {}
- name: tips_for_testing
  endpoint:
    path: /tips/testing
    method: GET
    data_selector: data
    params: {}
- name: troubleshooting_end_to_end_tests
  endpoint:
    path: /troubleshooting/end/to/end/tests
    method: GET
    data_selector: data
    params: {}
- name: known_issues
  endpoint:
    path: /known/issues
    method: GET
    data_selector: data
    params: {}
- name: MailgunCluster
  endpoint:
    path: /clusters
    method: POST
    data_selector: data
- name: InfraCluster
  endpoint:
    path: /infrastructure.cluster.x-k8s.io/v1alpha1/infraclusters
    method: GET
    data_selector: items
    params: {}
- name: InfraClusterList
  endpoint:
    path: /infrastructure.cluster.x-k8s.io/v1alpha1/infraclusters/list
    method: GET
    data_selector: items
    params: {}
- name: failureDomains
  endpoint:
    path: /status/failureDomains
    method: GET
    data_selector: failureDomains
    params: {}
- name: initialization
  endpoint:
    path: /status/initialization
    method: GET
    data_selector: initialization
    params: {}
- name: conditions
  endpoint:
    path: /status/conditions
    method: GET
    data_selector: conditions
    params: {}
- name: FooMachine
  endpoint:
    path: /foomachines
    method: GET
- name: FooMachineList
  endpoint:
    path: /foomachines
    method: GET
- name: FooMachineTemplate
  endpoint:
    path: /foomachinetemplates
    method: GET
- name: FooMachineTemplateList
  endpoint:
    path: /foomachinetemplates
    method: GET
- name: BootstrapConfig
  endpoint:
    path: /bootstrapconfig
    method: POST
    data_selector: ''
    params: {}
- name: BootstrapConfigList
  endpoint:
    path: /bootstrapconfiglist
    method: GET
    data_selector: ''
    params: {}
- name: VPC
  endpoint:
    path: /v1/vpcs
    method: GET
- name: PowerVS
  endpoint:
    path: /v1/powervs
    method: GET
- name: workload_cluster
  endpoint:
    path: /clusters
    method: POST
    data_selector: cluster
    params: {}
- name: scaleway-secret
  endpoint:
    path: /kube-system/scaleway-secret
    method: POST
    data_selector: stringData
- name: MicroK8sControlPlane
  endpoint:
    path: /api/v1/microk8s/controlplane
    method: POST
    data_selector: spec
    params: {}
- name: MachineDeployment
  endpoint:
    path: /api/v1/microk8s/machinedeployment
    method: POST
    data_selector: spec
    params: {}
- name: MachineDeployment
  endpoint:
    path: /api/v1/MachineDeployment
    method: POST
    data_selector: items
    params:
      annotations:
        cluster.x-k8s.io/cluster-api-autoscaler-node-group-max-size: '5'
        cluster.x-k8s.io/cluster-api-autoscaler-node-group-min-size: '0'
        capacity.cluster-autoscaler.kubernetes.io/memory: 128G
        capacity.cluster-autoscaler.kubernetes.io/cpu: '16'
        capacity.cluster-autoscaler.kubernetes.io/ephemeral-disk: 100Gi
        capacity.cluster-autoscaler.kubernetes.io/maxPods: '200'
        capacity.cluster-autoscaler.kubernetes.io/gpu-type: nvidia.com/gpu
        capacity.cluster-autoscaler.kubernetes.io/gpu-count: '2'
- name: Cluster
  endpoint:
    path: /api/v1/Cluster
    method: POST
    data_selector: items
    params:
      metadata:
        name: my-cluster
        namespace: default
      spec:
        clusterNetwork:
          services:
            cidrBlocks:
            - 10.128.0.0/12
          pods:
            cidrBlocks:
            - 192.168.0.0/16
          serviceDomain: cluster.local
        topology:
          class: quick-start
          version: v1.24.0
          controlPlane:
            replicas: 1
          workers:
            machineDeployments:
            - class: default-worker
              name: linux
- name: MachineHealthCheck
  endpoint:
    path: /api/v1/machinehealthcheck
    method: POST
    data_selector: spec
    params: {}
- name: KubeadmControlPlane
  endpoint:
    path: /api/v1/kubeadmcontrolplane
    method: POST
    data_selector: spec
    params: {}
- name: my-docker-cluster
  endpoint:
    path: /my-docker-cluster
    method: GET
- name: docker-clusterclass-v0.1.0
  endpoint:
    path: /docker-clusterclass-v0.1.0
    method: GET
- name: ClusterClass
  endpoint:
    path: /cluster.x-k8s.io/v1beta2/ClusterClass
    method: GET
- name: KubeadmConfigTemplate
  endpoint:
    path: /bootstrap.cluster.x-k8s.io/v1beta2/KubeadmConfigTemplate
    method: GET
- name: controlPlane
  endpoint:
    path: /spec/topology/controlPlane
    method: PATCH
    data_selector: ''
    params: {}
- name: machineDeployments
  endpoint:
    path: /spec/topology/workers/machineDeployments
    method: PATCH
    data_selector: ''
    params: {}
- name: variables
  endpoint:
    path: /spec/topology/variables
    method: PATCH
    data_selector: ''
    params: {}
- name: ExtensionConfig
  endpoint:
    path: /api/v1/namespaces/default/services/https:webhook-service:443/proxy/hooks.runtime.cluster.x-k8s.io/v1alpha1/discovery
    method: POST
    data_selector: discoveryRequest
- name: BeforeClusterCreate
  endpoint:
    path: /hooks/runtime/cluster/x-k8s.io/v1alpha1/beforeClusterCreate
    method: POST
    data_selector: status
    params: {}
- name: AfterControlPlaneInitialized
  endpoint:
    path: /hooks/runtime/cluster/x-k8s.io/v1alpha1/afterControlPlaneInitialized
    method: POST
    data_selector: status
    params: {}
- name: BeforeClusterUpgrade
  endpoint:
    path: /hooks/runtime/cluster/x-k8s.io/v1alpha1/beforeClusterUpgrade
    method: POST
    data_selector: status
    params: {}
- name: AfterControlPlaneUpgrade
  endpoint:
    path: /hooks/runtime/cluster/x-k8s.io/v1alpha1/afterControlPlaneUpgrade
    method: POST
    data_selector: status
    params: {}
- name: AfterClusterUpgrade
  endpoint:
    path: /hooks/runtime/cluster/x-k8s.io/v1alpha1/afterClusterUpgrade
    method: POST
    data_selector: status
    params: {}
- name: BeforeClusterDelete
  endpoint:
    path: /hooks/runtime/cluster/x-k8s.io/v1alpha1/beforeClusterDelete
    method: POST
    data_selector: status
    params: {}
- name: podSecurityStandard
  endpoint:
    path: /spec/template/spec/kubeadmConfigSpec/clusterConfiguration/apiServer/extraArgs
    method: add
    data_selector: value
    params: {}
- name: admissionConfiguration
  endpoint:
    path: /spec/template/spec/kubeadmConfigSpec/files
    method: add
    data_selector: valueFrom
    params: {}
- name: my-infra-provider
  endpoint:
    path: https://github.com/myorg/myrepo/releases/latest/infrastructure-components.yaml
    method: GET
- name: cluster-api
  endpoint:
    path: https://github.com/myorg/myforkofclusterapi/releases/latest/core-components.yaml
    method: GET
- name: my-other-infra-provider
  endpoint:
    path: https://gitlab.example.com/api/v4/projects/myorg%2Fmyrepo/packages/generic/myrepo/v1.2.3/infrastructure-components.yaml
    method: GET
- name: kubeadm
  endpoint:
    path: https://gitlab.example.com/api/v4/projects/external-packages%2Fcluster-api/packages/generic/cluster-api/v1.1.3/bootstrap-components.yaml
    method: GET
- name: kustomize_substitutions
  endpoint:
    params:
      AZURE_TENANT_ID_B64: '$(echo "${AZURE_TENANT_ID}" | tr -d ''

        '' | base64 | tr -d ''

        '')'
      AZURE_CLIENT_SECRET_B64: '$(echo "${AZURE_CLIENT_SECRET}" | tr -d ''

        '' | base64 | tr -d ''

        '')'
      AZURE_CLIENT_ID_B64: '$(echo "${AZURE_CLIENT_ID}" | tr -d ''

        '' | base64 | tr -d ''

        '')'
- name: GCP_B64ENCODED_CREDENTIALS
  endpoint:
    params:
      GCP_B64ENCODED_CREDENTIALS: your credentials here
- name: VSPHERE
  endpoint:
    params:
      VSPHERE_USERNAME: administrator@vsphere.local
      VSPHERE_PASSWORD: Admin123
- name: MachineHealthCheck
  endpoint:
    path: /MachineHealthCheck
    method: GET
    data_selector: items
    params: {}
- name: MailgunCluster
  endpoint:
    path: /v3/mailgunclusters
    method: POST
    data_selector: data
    params: {}
- name: InfraCluster
  endpoint:
    path: /infrastructure.cluster.x-k8s.io/v1beta2/infraclusters
    method: POST
    data_selector: items
- name: InfraClusterList
  endpoint:
    path: /infrastructure.cluster.x-k8s.io/v1beta2/infraclusterlists
    method: GET
    data_selector: items
- name: FooClusterStatus
  endpoint:
    path: /status
    method: GET
    data_selector: status.failureDomains
    params: {}
- name: FooClusterInitializationStatus
  endpoint:
    path: /initialization
    method: GET
    data_selector: initialization.provisioned
    params: {}
- name: FooMachine
  endpoint:
    path: /foomachines
    method: GET
- name: FooMachineList
  endpoint:
    path: /foomachines
    method: GET
- name: FooMachineTemplate
  endpoint:
    path: /foomachinetemplates
    method: GET
- name: FooMachineTemplateList
  endpoint:
    path: /foomachinetemplates
    method: GET
- name: FooConfigTemplate
  endpoint:
    path: /fooconfigtemplates
    method: GET
    data_selector: items
- name: FooConfigTemplateList
  endpoint:
    path: /fooconfigtemplatels
    method: GET
    data_selector: items
- name: FooControlPlane
  endpoint:
    path: /foocontrolplanes
    method: GET
    data_selector: items
- name: FooControlPlaneList
  endpoint:
    path: /foocontrolplanelist
    method: GET
    data_selector: items
- name: IONOSCloudCluster
  endpoint:
    path: /path/to/IONOSCloudCluster
    method: GET
- name: OpenNebula
  endpoint:
    path: /RPC2
    method: GET
    data_selector: records
    params:
      ONE_XMLRPC: http://10.2.11.40:2633/RPC2
      ONE_AUTH: oneadmin:opennebula
- name: scaleway-secret
  endpoint:
    path: /api/v1/secrets
    method: POST
    data_selector: stringData
- name: MicroK8sControlPlane
  endpoint:
    path: /api/v1beta2/microk8scontrolplanes
    method: POST
    data_selector: spec
    params: {}
- name: MachineDeployment
  endpoint:
    path: /api/v1beta2/machinedeployments
    method: POST
    data_selector: spec
    params: {}
- name: KubeadmControlPlane
  endpoint:
    path: /kubeadmcontrolplane
    method: POST
    data_selector: spec
- name: MachineDeployment
  endpoint:
    path: /machinedeployment
    method: POST
    data_selector: spec
- name: MachineDeployment
  endpoint:
    path: /api/v1/MachineDeployment
    method: POST
    data_selector: metadata.annotations
    params:
      cluster.x-k8s.io/cluster-api-autoscaler-node-group-max-size: '5'
      cluster.x-k8s.io/cluster-api-autoscaler-node-group-min-size: '0'
      capacity.cluster-autoscaler.kubernetes.io/memory: 128G
      capacity.cluster-autoscaler.kubernetes.io/cpu: '16'
      capacity.cluster-autoscaler.kubernetes.io/ephemeral-disk: 100Gi
      capacity.cluster-autoscaler.kubernetes.io/maxPods: '200'
      capacity.cluster-autoscaler.kubernetes.io/gpu-type: nvidia.com/gpu
      capacity.cluster-autoscaler.kubernetes.io/gpu-count: '2'
- name: MachineSet
  endpoint:
    path: /api/v1/MachineSet
    method: POST
    data_selector: metadata.annotations
    params:
      cluster.x-k8s.io/cluster-api-autoscaler-node-group-max-size: '5'
      cluster.x-k8s.io/cluster-api-autoscaler-node-group-min-size: '0'
- name: machine_health_check
  endpoint:
    path: /api/v1beta2/machinehealthchecks
    method: GET
    data_selector: items
    params: {}
- name: kubeadm_control_plane
  endpoint:
    path: /api/v1beta2/kubeadmcontrolplanes
    method: GET
    data_selector: items
    params: {}
- name: Cluster
  endpoint:
    path: /api/v1beta2/clusters
    method: GET
    data_selector: items
- name: ClusterClass
  endpoint:
    path: /api/v1beta2/clusterclasses
    method: GET
    data_selector: items
- name: httpProxy
  endpoint:
    path: /spec/template/spec/httpProxy/url
    method: add
    data_selector: url
- name: mdConfig
  endpoint:
    path: /spec/template/spec/customImage
    method: add
    data_selector: osImage
- name: dnsServers
  endpoint:
    path: /spec/template/spec/dnsServers
    method: add
    data_selector: dnsServers
- name: firstDnsServer
  endpoint:
    path: /spec/template/spec/dnsServer
    method: add
    data_selector: dnsServers[0]
- name: ExtensionConfig
  endpoint:
    path: /api/v1/namespaces/default/services/https:webhook-service:443/proxy/hooks.runtime.cluster.x-k8s.io/v1alpha1/discovery
    method: POST
    data_selector: apiVersion
- name: BeforeClusterCreate
  endpoint:
    path: /hooks/runtime/cluster/x-k8s.io/v1alpha1/before-cluster-create
    method: POST
- name: AfterControlPlaneInitialized
  endpoint:
    path: /hooks/runtime/cluster/x-k8s.io/v1alpha1/after-control-plane-initialized
    method: POST
- name: BeforeClusterUpgrade
  endpoint:
    path: /hooks/runtime/cluster/x-k8s.io/v1alpha1/before-cluster-upgrade
    method: POST
- name: AfterControlPlaneUpgrade
  endpoint:
    path: /hooks/runtime/cluster/x-k8s.io/v1alpha1/after-control-plane-upgrade
    method: POST
- name: AfterClusterUpgrade
  endpoint:
    path: /hooks/runtime/cluster/x-k8s.io/v1alpha1/after-cluster-upgrade
    method: POST
- name: BeforeClusterDelete
  endpoint:
    path: /hooks/runtime/cluster/x-k8s.io/v1alpha1/before-cluster-delete
    method: POST
- name: GeneratePatches
  endpoint:
    path: /hooks/runtime/cluster/x-k8s.io/v1alpha1/generate-patches
    method: POST
- name: ValidateTopology
  endpoint:
    path: /hooks/runtime/cluster/x-k8s.io/v1alpha1/validate-topology
    method: POST
- name: metrics
  endpoint:
    path: /metrics
    method: GET
    data_selector: metrics
    params: {}
- name: pprof
  endpoint:
    path: /debug/pprof/*
    method: GET
    data_selector: pprof
    params: {}
- name: log_level
  endpoint:
    path: /debug/flags/v
    method: PUT
    data_selector: log_level
    params: {}
- name: podSecurityStandard
  endpoint:
    path: /spec/template/spec/kubeadmConfigSpec/clusterConfiguration/apiServer/extraArgs
    method: add
    data_selector: value
    params:
      admission-control-config-file: /etc/kubernetes/kube-apiserver-admission-pss.yaml
- name: extraVolumes
  endpoint:
    path: /spec/template/spec/kubeadmConfigSpec/clusterConfiguration/apiServer/extraVolumes
    method: add
    data_selector: value
    params:
      name: admission-pss
      hostPath: /etc/kubernetes/kube-apiserver-admission-pss.yaml
      mountPath: /etc/kubernetes/kube-apiserver-admission-pss.yaml
      readOnly: true
      pathType: File
- name: files
  endpoint:
    path: /spec/template/spec/kubeadmConfigSpec/files
    method: add
    data_selector: valueFrom
    params:
      template:
      - content:
          apiVersion: apiserver.config.k8s.io/v1
          kind: AdmissionConfiguration
          plugins:
          - name: PodSecurity
            configuration:
              apiVersion: pod-security.admission.config.k8s.io/v1
              kind: PodSecurityConfiguration
              defaults:
                enforce: '{{ .podSecurity.enforce }}'
                enforce-version: latest
                audit: '{{ .podSecurity.audit }}'
                audit-version: latest
                warn: '{{ .podSecurity.warn }}'
                warn-version: latest
              exemptions:
                usernames: []
                runtimeClasses: []
                namespaces:
                - kube-system
        path: /etc/kubernetes/kube-apiserver-admission-pss.yaml
- name: provider
  endpoint:
    path: /generate/provider
    method: POST
- name: cluster
  endpoint:
    path: /generate/cluster
    method: POST
- name: kubeconfig
  endpoint:
    path: /get/kubeconfig
    method: GET
- name: my-infra-provider
  endpoint:
    path: https://github.com/myorg/myrepo/releases/latest/infrastructure-components.yaml
    method: GET
- name: cluster-api
  endpoint:
    path: https://github.com/myorg/myforkofclusterapi/releases/latest/core-components.yaml
    method: GET
- name: my-other-infra-provider
  endpoint:
    path: https://gitlab.example.com/api/v4/projects/myorg%2Fmyrepo/packages/generic/myrepo/v1.2.3/infrastructure-components.yaml
    method: GET
- name: kubeadm
  endpoint:
    path: https://gitlab.example.com/api/v4/projects/external-packages%2Fcluster-api/packages/generic/cluster-api/v1.1.3/bootstrap-components.yaml
    method: GET
- name: MailgunCluster
  endpoint:
    path: /v1/mailgunclusters
    method: POST
    data_selector: data
- name: failureDomains
  endpoint:
    path: /failureDomains
    method: GET
    data_selector: failureDomains
    params: {}
- name: initialization
  endpoint:
    path: /initialization
    method: GET
    data_selector: initialization
    params: {}
- name: conditions
  endpoint:
    path: /conditions
    method: GET
    data_selector: conditions
    params: {}
- name: FooMachine
  endpoint:
    path: /foomachines
    method: GET
    data_selector: items
- name: FooMachineList
  endpoint:
    path: /foomachinemachines
    method: GET
    data_selector: items
- name: FooMachineTemplate
  endpoint:
    path: /foomachinetemplates
    method: GET
    data_selector: items
- name: FooMachineTemplateList
  endpoint:
    path: /foomachinetemplatelists
    method: GET
    data_selector: items
- name: BootstrapConfig
  endpoint:
    path: /bootstrapconfigs
    method: POST
    data_selector: items
    params: {}
- name: BootstrapConfigTemplate
  endpoint:
    path: /bootstrapconfigtemplates
    method: POST
    data_selector: items
    params: {}
- name: ControlPlane
  endpoint:
    path: /controlplane
    method: GET
    data_selector: items
    params: {}
- name: ControlPlaneList
  endpoint:
    path: /controlplane/list
    method: GET
    data_selector: items
    params: {}
- name: machines
  endpoint:
    path: /controlplane/machines
    method: POST
    data_selector: machines
    params: {}
- name: IONOSCloudCluster
  endpoint:
    path: /services/data/v1/ionoscloud-cluster
    method: POST
- name: workload_cluster
  endpoint:
    path: /RPC2
    method: POST
    data_selector: response
    params:
      auth: oneadmin:opennebula
- name: scaleway-secret
  endpoint:
    path: /api/v1/secrets
    method: POST
- name: KubeadmConfig
  endpoint:
    path: /apis/bootstrap.cluster.x-k8s.io/v1beta2/kubeadmconfigs
    method: GET
    data_selector: items
    params: {}
- name: Cluster
  endpoint:
    path: /apis/cluster.x-k8s.io/v1beta2/clusters
    method: GET
    data_selector: items
    params: {}
- name: Machine
  endpoint:
    path: /apis/cluster.x-k8s.io/v1beta2/machines
    method: GET
    data_selector: items
    params: {}
- name: MicroK8sControlPlane
  endpoint:
    path: /api/v1beta1/microk8scontrolplanes
    method: GET
    data_selector: items
- name: MachineDeployment
  endpoint:
    path: /api/v1beta2/machinedeployments
    method: GET
    data_selector: items
- name: MachineTemplate
  endpoint:
    path: /services/data/v1beta1/MachineTemplate
    method: POST
    data_selector: template
    params: {}
- name: KubeadmControlPlane
  endpoint:
    path: /services/data/v1beta1/KubeadmControlPlane
    method: PATCH
    data_selector: spec
    params: {}
- name: MachineDeployment
  endpoint:
    path: /api/v1alpha4/MachineDeployment
    method: POST
    data_selector: metadata.annotations
    params: {}
- name: MachineSet
  endpoint:
    path: /api/v1alpha4/MachineSet
    method: POST
    data_selector: metadata.annotations
    params: {}
- name: MachineHealthCheck
  endpoint:
    path: /api/v1/machinehealthcheck
    method: POST
    data_selector: spec
    params:
      clusterName: capi-quickstart
      maxUnhealthy: 40%
      nodeStartupTimeout: 10m
      selector:
        matchLabels:
          nodepool: nodepool-0
      unhealthyNodeConditions:
      - type: Ready
        status: Unknown
        timeout: 300s
      - type: Ready
        status: 'False'
        timeout: 300s
- name: Cluster
  endpoint:
    path: /clusters
    method: GET
    data_selector: items
- name: MachineDeployment
  endpoint:
    path: /machinedeployments
    method: GET
    data_selector: items
- name: MachinePool
  endpoint:
    path: /machinepools
    method: GET
    data_selector: items
- name: ClusterClass
  endpoint:
    path: /cluster-classes
    method: GET
    data_selector: items
    params: {}
- name: Cluster
  endpoint:
    path: /clusters
    method: PATCH
    data_selector: spec
    params: {}
- name: BeforeClusterCreate
  endpoint:
    path: /hooks/runtime/cluster/x-k8s.io/v1alpha1/before-cluster-create
    method: POST
    data_selector: status
    params: {}
- name: AfterControlPlaneInitialized
  endpoint:
    path: /hooks/runtime/cluster/x-k8s.io/v1alpha1/after-control-plane-initialized
    method: POST
    data_selector: status
    params: {}
- name: BeforeClusterUpgrade
  endpoint:
    path: /hooks/runtime/cluster/x-k8s.io/v1alpha1/before-cluster-upgrade
    method: POST
    data_selector: status
    params: {}
- name: AfterControlPlaneUpgrade
  endpoint:
    path: /hooks/runtime/cluster/x-k8s.io/v1alpha1/after-control-plane-upgrade
    method: POST
    data_selector: status
    params: {}
- name: AfterClusterUpgrade
  endpoint:
    path: /hooks/runtime/cluster/x-k8s.io/v1alpha1/after-cluster-upgrade
    method: POST
    data_selector: status
    params: {}
- name: BeforeClusterDelete
  endpoint:
    path: /hooks/runtime/cluster/x-k8s.io/v1alpha1/before-cluster-delete
    method: POST
    data_selector: status
    params: {}
- name: metrics
  endpoint:
    path: /metrics
    method: GET
- name: pprof
  endpoint:
    path: /debug/pprof/*
    method: GET
- name: loglevel
  endpoint:
    path: /debug/flags/v
    method: PUT
- name: podSecurityStandard
  endpoint:
    path: /spec/template/spec/kubeadmConfigSpec/clusterConfiguration/apiServer/extraArgs
    method: add
    data_selector: admission-control-config-file
    params:
      value: /etc/kubernetes/kube-apiserver-admission-pss.yaml
- name: extraVolumes
  endpoint:
    path: /spec/template/spec/kubeadmConfigSpec/clusterConfiguration/apiServer/extraVolumes
    method: add
    data_selector: admission-pss
    params:
      hostPath: /etc/kubernetes/kube-apiserver-admission-pss.yaml
      mountPath: /etc/kubernetes/kube-apiserver-admission-pss.yaml
      readOnly: true
      pathType: File
- name: files
  endpoint:
    path: /spec/template/spec/kubeadmConfigSpec/files
    method: add
    data_selector: AdmissionConfiguration
    params:
      content: "apiVersion: apiserver.config.k8s.io/v1\nkind: AdmissionConfiguration\n\
        plugins:\n- name: PodSecurity\n  configuration:\n    apiVersion: pod-security.admission.config.k8s.io/v1\n\
        \    kind: PodSecurityConfiguration\n    defaults:\n      enforce: \"{{ .podSecurity.enforce\
        \ }}\"\n      enforce-version: \"latest\"\n      audit: \"{{ .podSecurity.audit\
        \ }}\"\n      audit-version: \"latest\"\n      warn: \"{{ .podSecurity.warn\
        \ }}\"\n      warn-version: \"latest\"\n    exemptions:\n      usernames:\
        \ []\n      runtimeClasses: []\n      namespaces: [kube-system]\n"
      path: /etc/kubernetes/kube-apiserver-admission-pss.yaml
- name: my-infra-provider
  endpoint:
    path: https://github.com/myorg/myrepo/releases/latest/infrastructure-components.yaml
    method: GET
- name: cluster-api
  endpoint:
    path: https://github.com/myorg/myforkofclusterapi/releases/latest/core-components.yaml
    method: GET
- name: my-other-infra-provider
  endpoint:
    path: https://gitlab.example.com/api/v4/projects/myorg%2Fmyrepo/packages/generic/myrepo/v1.2.3/infrastructure-components.yaml
    method: GET
- name: kubeadm
  endpoint:
    path: https://gitlab.example.com/api/v4/projects/external-packages%2Fcluster-api/packages/generic/cluster-api/v1.1.3/bootstrap-components.yaml
    method: GET
- name: kind-cluster
  endpoint:
    path: /create-a-kind-cluster
    method: POST
- name: docker-cluster
  endpoint:
    path: /create-a-docker-cluster
    method: POST
- name: kustomize_substitutions
  endpoint:
    path: kustomize_substitutions
    method: POST
    data_selector: kustomize_substitutions
    params: {}
- name: Cluster
  endpoint:
    path: /path/to/cluster
    method: GET
    data_selector: records
- name: MachineDeployment
  endpoint:
    path: /path/to/machinedeployment
    method: GET
    data_selector: records
- name: MachineSet
  endpoint:
    path: /path/to/machineset
    method: GET
    data_selector: records
- name: Machine
  endpoint:
    path: /path/to/machine
    method: GET
    data_selector: records
- name: MachinePool
  endpoint:
    path: /infrastructure/cluster.x-k8s.io/v1alpha3/machinepools
    method: GET
    data_selector: items
    params: {}
- name: MailgunCluster
  endpoint:
    path: /api/v1alpha1/mailgunclusters
    method: GET
    data_selector: items
- name: MailgunMachine
  endpoint:
    path: /api/v1alpha1/mailgunmachines
    method: GET
    data_selector: items
- name: InfraCluster
  endpoint:
    path: /infra-cluster
    method: GET
    data_selector: items
- name: FooCluster
  endpoint:
    path: /fooclusters
    method: GET
    data_selector: items
- name: FooCluster
  endpoint:
    path: /api/v1/FooCluster
    method: GET
    data_selector: status
    params: {}
- name: FooMachine
  endpoint:
    path: /foomachines
    method: GET
- name: FooMachineList
  endpoint:
    path: /foomachines
    method: GET
- name: FooMachineTemplate
  endpoint:
    path: /foomachinetemplates
    method: GET
- name: FooMachineTemplateList
  endpoint:
    path: /foomachinetemplates
    method: GET
- name: BootstrapConfig
  endpoint:
    path: /bootstrapconfigs
    method: GET
    data_selector: items
    params: {}
- name: BootstrapConfigTemplate
  endpoint:
    path: /bootstrapconfigtemplates
    method: GET
    data_selector: items
    params: {}
- name: ControlPlane
  endpoint:
    path: /controlplane
    method: POST
    data_selector: items
    params: {}
- name: ControlPlaneList
  endpoint:
    path: /controlplanes
    method: GET
    data_selector: items
    params: {}
- name: FooControlPlaneMachineTemplateSpec
  endpoint:
    path: /spec/machineTemplate/spec
    method: GET
- name: FooControlPlaneMachineTemplateDeletionSpec
  endpoint:
    path: /spec/machineTemplate/spec/deletion
    method: GET
- name: FooControlPlaneStatus
  endpoint:
    path: ''
    method: ''
    data_selector: ''
    params: {}
- name: FooControlPlaneInitializationStatus
  endpoint:
    path: ''
    method: ''
    data_selector: ''
    params: {}
- name: IONOSCloudCluster
  endpoint:
    path: /v1beta1/ionoscloudclusters
    method: POST
    data_selector: data
    params: {}
- name: workload_cluster
  endpoint:
    path: /clusters
    method: GET
    data_selector: clusters
- name: MicroK8sControlPlane
  endpoint:
    path: /microk8s/controlplane
    method: POST
    data_selector: controlPlaneConfig
    params: {}
- name: MachineDeployment
  endpoint:
    path: /microk8s/machinedeployment
    method: POST
    data_selector: spec
    params: {}
- name: KubeadmControlPlane
  endpoint:
    path: /api/v1alpha3/kubeadmcontrolplanes
    method: GET
    data_selector: items
- name: MachineDeployment
  endpoint:
    path: /api/v1alpha3/machinedeployments
    method: GET
    data_selector: items
- name: MachineDeployment
  endpoint:
    path: /apis/cluster.x-k8s.io/v1alpha4/machinedeployments
    method: GET
    data_selector: items
    params: {}
- name: MachineSet
  endpoint:
    path: /apis/cluster.x-k8s.io/v1alpha4/machinesets
    method: GET
    data_selector: items
    params: {}
- name: MachinePool
  endpoint:
    path: /apis/cluster.x-k8s.io/v1alpha4/machinepools
    method: GET
    data_selector: items
    params: {}
- name: MachineHealthCheck
  endpoint:
    path: /apis/cluster.x-k8s.io/v1beta2/machinehealthchecks
    method: GET
    data_selector: items
    params: {}
- name: KubeadmControlPlane
  endpoint:
    path: /apis/cluster.x-k8s.io/v1beta2/kubeadmcontrolplanes
    method: GET
    data_selector: items
    params: {}
- name: Cluster
  endpoint:
    path: /api/v1beta2/cluster
    method: POST
    data_selector: spec
    params: {}
- name: ClusterClass
  endpoint:
    path: /api/v1beta2/clusterclass
    method: POST
    data_selector: spec
    params: {}
- name: docker-clusterclass-v0.1.0
  endpoint:
    path: /clusterclass/docker-clusterclass-v0.1.0
    method: GET
- name: azure-clusterclass-v0.1.0
  endpoint:
    path: /clusterclass/azure-clusterclass-v0.1.0
    method: GET
- name: BeforeClusterCreateRequest
  endpoint:
    path: /before-cluster-create
    method: POST
    data_selector: settings
- name: AfterControlPlaneInitializedRequest
  endpoint:
    path: /after-control-plane-initialized
    method: POST
    data_selector: settings
- name: BeforeClusterUpgradeRequest
  endpoint:
    path: /before-cluster-upgrade
    method: POST
    data_selector: settings
- name: AfterControlPlaneUpgradeRequest
  endpoint:
    path: /after-control-plane-upgrade
    method: POST
    data_selector: settings
- name: AfterClusterUpgradeRequest
  endpoint:
    path: /after-cluster-upgrade
    method: POST
    data_selector: settings
- name: BeforeClusterDeleteRequest
  endpoint:
    path: /before-cluster-delete
    method: POST
    data_selector: settings
- name: GeneratePatchesRequest
  endpoint:
    path: /generate-patches
    method: POST
    data_selector: items
- name: ValidateTopologyRequest
  endpoint:
    path: /validate-topology
    method: POST
    data_selector: items
- name: DiscoverVariablesRequest
  endpoint:
    path: /discover-variables
    method: POST
    data_selector: variables
- name: ClusterClass
  endpoint:
    path: /cluster.x-k8s.io/v1beta2/ClusterClass
    method: GET
    data_selector: items
- name: Cluster
  endpoint:
    path: /cluster.x-k8s.io/v1beta2/Cluster
    method: GET
    data_selector: items
- name: my-infra-provider
  endpoint:
    path: https://github.com/myorg/myrepo/releases/latest/infrastructure-components.yaml
    method: GET
- name: cluster-api
  endpoint:
    path: https://github.com/myorg/myforkofclusterapi/releases/latest/core-components.yaml
    method: GET
- name: my-other-infra-provider
  endpoint:
    path: https://gitlab.example.com/api/v4/projects/myorg%2Fmyrepo/packages/generic/myrepo/v1.2.3/infrastructure-components.yaml
    method: GET
- name: kubeadm
  endpoint:
    path: https://gitlab.example.com/api/v4/projects/external-packages%2Fcluster-api/packages/generic/cluster-api/v1.1.3/bootstrap-components.yaml
    method: GET
- name: kustomize_substitutions
  endpoint:
    params:
      AZURE_SUBSCRIPTION_ID_B64: '$(echo "${AZURE_SUBSCRIPTION_ID}" | tr -d ''

        '' | base64 | tr -d ''

        '')'
      AZURE_TENANT_ID_B64: '$(echo "${AZURE_TENANT_ID}" | tr -d ''

        '' | base64 | tr -d ''

        '')'
      AZURE_CLIENT_SECRET_B64: '$(echo "${AZURE_CLIENT_SECRET}" | tr -d ''

        '' | base64 | tr -d ''

        '')'
      AZURE_CLIENT_ID_B64: '$(echo "${AZURE_CLIENT_ID}" | tr -d ''

        '' | base64 | tr -d ''

        '')'
- name: GCP_B64ENCODED_CREDENTIALS
  endpoint:
    params: {}
- name: VSPHERE
  endpoint:
    params:
      VSPHERE_USERNAME: administrator@vsphere.local
      VSPHERE_PASSWORD: Admin123
- name: bootstrap
  endpoint:
    path: /bootstrap
    method: GET
    data_selector: records
- name: controlplane
  endpoint:
    path: /controlplane
    method: GET
    data_selector: records
- name: machine
  endpoint:
    path: /machine
    method: GET
    data_selector: records
- name: machineset
  endpoint:
    path: /machineset
    method: GET
    data_selector: records
- name: machinedeployment
  endpoint:
    path: /machinedeployment
    method: GET
    data_selector: records
- name: machinepool
  endpoint:
    path: /machinepool
    method: GET
    data_selector: records
- name: MachineHealthCheck
  endpoint:
    path: /machineHealthChecks
    method: GET
- name: MailgunCluster
  endpoint:
    path: /clusters
    method: POST
    data_selector: response
- name: InfraCluster
  endpoint:
    path: /infraCluster
    method: GET
    data_selector: items
- name: InfraClusterList
  endpoint:
    path: /infraClusterList
    method: GET
    data_selector: items
- name: FooMachine
  endpoint:
    path: /foomachines
    method: GET
- name: FooMachineList
  endpoint:
    path: /foomachines
    method: GET
- name: FooMachineTemplate
  endpoint:
    path: /foomachinetemplates
    method: GET
- name: FooMachineTemplateList
  endpoint:
    path: /foomachinetemplates
    method: GET
- name: BootstrapConfig
  endpoint:
    path: /bootstrapconfig
    method: PATCH
    data_selector: status
    params: {}
- name: BootstrapConfigList
  endpoint:
    path: /bootstrapconfiglist
    method: GET
    data_selector: items
    params: {}
- name: BootstrapConfigTemplate
  endpoint:
    path: /bootstrapconfigtemplate
    method: PATCH
    data_selector: status
    params: {}
- name: BootstrapConfigTemplateList
  endpoint:
    path: /bootstrapconfigtemplatelist
    method: GET
    data_selector: items
    params: {}
- name: ControlPlane
  endpoint:
    path: /controlplane
    method: GET
    data_selector: items
- name: ControlPlaneList
  endpoint:
    path: /controlplane/list
    method: GET
    data_selector: items
- name: FooControlPlaneMachineTemplateSpec
  endpoint:
    params:
      infrastructureRef: required
- name: FooControlPlaneMachineTemplateDeletionSpec
  endpoint:
    params:
      nodeDrainTimeoutSeconds: optional
      nodeVolumeDetachTimeoutSeconds: optional
      nodeDeletionTimeoutSeconds: optional
- name: FooControlPlaneInitializationStatus
  endpoint:
    params:
      controlPlaneInitialized: optional
- name: Cluster
  endpoint:
    path: /clusters
    method: GET
    data_selector: clusters
    params: {}
- name: Machine
  endpoint:
    path: /machines
    method: GET
    data_selector: machines
    params: {}
- name: management_cluster
  endpoint:
    path: /init
    method: POST
    data_selector: cluster
    params: {}
- name: IBMCLOUD_API_KEY
  endpoint:
    path: ''
    method: ''
    data_selector: ''
    params: {}
- name: IONOSCloudCluster
  endpoint:
    path: ''
    method: ''
    data_selector: ''
    params: {}
- name: workload_clusters
  endpoint:
    path: /clusters
    method: GET
    data_selector: clusters
    params: {}
- name: MicroK8sControlPlane
  endpoint:
    path: /api/v1beta2/controlplane.cluster.x-k8s.io/microk8scontrolplanes
    method: GET
    data_selector: items
    params: {}
- name: MachineDeployment
  endpoint:
    path: /api/v1beta2/machinedeployments
    method: GET
    data_selector: items
    params: {}
- name: MicroK8sConfigTemplate
  endpoint:
    path: /api/v1beta1/microk8sconfigtemplates
    method: GET
    data_selector: items
    params: {}
- name: MachineTemplate
  endpoint:
    path: /path/to/machine/template
    method: POST
    data_selector: template_data
    params: {}
- name: KubeadmControlPlane
  endpoint:
    path: /path/to/kubeadm/control/plane
    method: PATCH
    data_selector: control_plane_data
    params: {}
- name: MachineDeployment
  endpoint:
    path: /v1alpha4/MachineDeployment
    method: POST
    data_selector: metadata.annotations
    params:
      cluster.x-k8s.io/cluster-api-autoscaler-node-group-max-size: '5'
      cluster.x-k8s.io/cluster-api-autoscaler-node-group-min-size: '0'
      capacity.cluster-autoscaler.kubernetes.io/memory: 128G
      capacity.cluster-autoscaler.kubernetes.io/cpu: '16'
      capacity.cluster-autoscaler.kubernetes.io/ephemeral-disk: 100Gi
      capacity.cluster-autoscaler.kubernetes.io/maxPods: '200'
      capacity.cluster-autoscaler.kubernetes.io/gpu-type: nvidia.com/gpu
      capacity.cluster-autoscaler.kubernetes.io/gpu-count: '2'
- name: MachineHealthCheck
  endpoint:
    path: /services/data/vXX.X/sobjects/MachineHealthCheck
    method: GET
    data_selector: records
    params: {}
- name: KubeadmControlPlane
  endpoint:
    path: /services/data/vXX.X/sobjects/KubeadmControlPlane
    method: GET
    data_selector: records
    params: {}
- name: Cluster
  endpoint:
    path: /api/v1/namespaces/default/clusters/my-docker-cluster
    method: GET
    data_selector: spec
    params: {}
- name: ClusterClass
  endpoint:
    path: /api/v1/namespaces/default/clusterclasses/docker-clusterclass-v0.1.0
    method: GET
    data_selector: spec
    params: {}
- name: httpProxy
  endpoint:
    path: /spec/template/spec/httpProxy/url
    method: add
    data_selector: 'variable: httpProxy.url'
    params: {}
- name: mdConfig
  endpoint:
    path: /spec/template/spec/customImage
    method: add
    data_selector: 'template: "{{ (index .mdConfig .builtin.machineDeployment.class).osImage
      }}"'
    params: {}
- name: dnsServers
  endpoint:
    path: /spec/template/spec/dnsServers
    method: add
    data_selector: 'variable: dnsServers'
    params: {}
- name: firstDnsServer
  endpoint:
    path: /spec/template/spec/dnsServer
    method: add
    data_selector: 'variable: dnsServers[0]'
    params: {}
- name: etcdImageTag
  endpoint:
    path: /spec/template/spec/kubeadmConfigSpec/clusterConfiguration/etcd
    method: add
    data_selector: "template: | local:\n              imageTag: {{ .etcdImageTag }}"
    params: {}
- name: imageRepository
  endpoint:
    path: /spec/template/spec/kubeadmConfigSpec/clusterConfiguration/imageRepository
    method: add
    data_selector: 'value: "my.custom.registry"'
    params: {}
- name: cluster
  endpoint:
    path: /clusters
    method: PATCH
    data_selector: spec
    params: {}
- name: ExtensionConfig
  endpoint:
    path: /api/v1/namespaces/{namespace}/extensionconfigs
    method: POST
    data_selector: status
    params: {}
- name: BeforeClusterCreateRequest
  endpoint:
    path: /hooks/runtime/cluster.x-k8s.io/v1alpha1/BeforeClusterCreateRequest
    method: POST
    data_selector: settings
    params: {}
- name: BeforeClusterCreateResponse
  endpoint:
    path: /hooks/runtime/cluster.x-k8s.io/v1alpha1/BeforeClusterCreateResponse
    method: POST
    data_selector: status
    params: {}
- name: AfterControlPlaneInitializedRequest
  endpoint:
    path: /hooks/runtime/cluster.x-k8s.io/v1alpha1/AfterControlPlaneInitializedRequest
    method: POST
    data_selector: settings
    params: {}
- name: AfterControlPlaneInitializedResponse
  endpoint:
    path: /hooks/runtime/cluster.x-k8s.io/v1alpha1/AfterControlPlaneInitializedResponse
    method: POST
    data_selector: status
    params: {}
- name: BeforeClusterUpgradeRequest
  endpoint:
    path: /hooks/runtime/cluster.x-k8s.io/v1alpha1/BeforeClusterUpgradeRequest
    method: POST
    data_selector: settings
    params: {}
- name: BeforeClusterUpgradeResponse
  endpoint:
    path: /hooks/runtime/cluster.x-k8s.io/v1alpha1/BeforeClusterUpgradeResponse
    method: POST
    data_selector: status
    params: {}
- name: AfterControlPlaneUpgradeRequest
  endpoint:
    path: /hooks/runtime/cluster.x-k8s.io/v1alpha1/AfterControlPlaneUpgradeRequest
    method: POST
    data_selector: settings
    params: {}
- name: AfterControlPlaneUpgradeResponse
  endpoint:
    path: /hooks/runtime/cluster.x-k8s.io/v1alpha1/AfterControlPlaneUpgradeResponse
    method: POST
    data_selector: status
    params: {}
- name: AfterClusterUpgradeRequest
  endpoint:
    path: /hooks.runtime.cluster.x-k8s.io/v1alpha1/AfterClusterUpgradeRequest
    method: POST
    data_selector: settings
    params: {}
- name: AfterClusterUpgradeResponse
  endpoint:
    path: /hooks.runtime.cluster.x-k8s.io/v1alpha1/AfterClusterUpgradeResponse
    method: POST
    data_selector: status
    params: {}
- name: BeforeClusterDeleteRequest
  endpoint:
    path: /hooks/runtime/cluster.x-k8s.io/v1alpha1/BeforeClusterDeleteRequest
    method: POST
    data_selector: settings
    params: {}
- name: BeforeClusterDeleteResponse
  endpoint:
    path: /hooks/runtime/cluster.x-k8s.io/v1alpha1/BeforeClusterDeleteResponse
    method: POST
    data_selector: status
    params: {}
- name: DiscoverVariablesRequest
  endpoint:
    path: /hooks/runtime/cluster/x-k8s.io/v1alpha1/DiscoverVariablesRequest
    method: GET
- name: DiscoverVariablesResponse
  endpoint:
    path: /hooks/runtime/cluster/x-k8s.io/v1alpha1/DiscoverVariablesResponse
    method: GET
- name: metrics
  endpoint:
    path: /metrics
    method: GET
- name: pprof
  endpoint:
    path: /debug/pprof/goroutine
    method: GET
- name: profile
  endpoint:
    path: /debug/pprof/profile
    method: GET
- name: log_level
  endpoint:
    path: /debug/flags/v
    method: PUT
- name: podSecurityStandard
  endpoint:
    path: /spec/template/spec/kubeadmConfigSpec/clusterConfiguration/apiServer/extraArgs
    method: add
    data_selector: admission-control-config-file
    params:
      value: /etc/kubernetes/kube-apiserver-admission-pss.yaml
- name: admission-pss
  endpoint:
    path: /spec/template/spec/kubeadmConfigSpec/clusterConfiguration/apiServer/extraVolumes/-
    method: add
    data_selector: name
    params:
      hostPath: /etc/kubernetes/kube-apiserver-admission-pss.yaml
      mountPath: /etc/kubernetes/kube-apiserver-admission-pss.yaml
      readOnly: true
      pathType: File
- name: AdmissionConfiguration
  endpoint:
    path: /spec/template/spec/kubeadmConfigSpec/files
    method: add
    data_selector: content
    params:
      apiVersion: apiserver.config.k8s.io/v1
      kind: AdmissionConfiguration
      plugins:
      - name: PodSecurity
        configuration:
          apiVersion: pod-security.admission.config.k8s.io/v1
          kind: PodSecurityConfiguration
          defaults:
            enforce: '{{ .podSecurity.enforce }}'
            enforce-version: latest
            audit: '{{ .podSecurity.audit }}'
            audit-version: latest
            warn: '{{ .podSecurity.warn }}'
            warn-version: latest
          exemptions:
            usernames: []
            runtimeClasses: []
            namespaces:
            - kube-system
      path: /etc/kubernetes/kube-apiserver-admission-pss.yaml
- name: my-infra-provider
  endpoint:
    path: https://github.com/myorg/myrepo/releases/latest/infrastructure-components.yaml
    method: GET
- name: cluster-api
  endpoint:
    path: https://github.com/myorg/myforkofclusterapi/releases/latest/core-components.yaml
    method: GET
- name: my-other-infra-provider
  endpoint:
    path: https://gitlab.example.com/api/v4/projects/myorg%2Fmyrepo/packages/generic/myrepo/v1.2.3/infrastructure-components.yaml
    method: GET
- name: kubeadm
  endpoint:
    path: https://gitlab.example.com/api/v4/projects/external-packages%2Fcluster-api/packages/generic/cluster-api/v1.1.3/bootstrap-components.yaml
    method: GET
- name: Machine
  endpoint:
    path: /machine
    method: GET
    data_selector: records
- name: Cluster
  endpoint:
    path: /cluster
    method: GET
    data_selector: records
- name: MachineSet
  endpoint:
    path: /machinesets
    method: GET
    data_selector: records
- name: MachineDeployment
  endpoint:
    path: /machinedeployments
    method: GET
    data_selector: records
- name: MachinePool
  endpoint:
    path: /infrastructure/machinepool
    method: GET
    data_selector: status
    params: {}
- name: MailgunCluster
  endpoint:
    path: /v3/mailgunclusters
    method: POST
    data_selector: records
- name: FooCluster
  endpoint:
    path: /fooclusters
    method: GET
    data_selector: items
- name: FooClusterList
  endpoint:
    path: /fooclusterlists
    method: GET
    data_selector: items
- name: FooClusterStatus
  endpoint:
    path: /fooClusterStatus
    method: GET
    data_selector: status
    params: {}
- name: FooClusterTemplate
  endpoint:
    path: /fooClusterTemplates
    method: GET
    data_selector: items
    params: {}
- name: FooClusterTemplateList
  endpoint:
    path: /fooClusterTemplateLists
    method: GET
    data_selector: items
    params: {}
- name: FooMachine
  endpoint:
    path: /foomachines
    method: GET
    data_selector: items
- name: FooMachineList
  endpoint:
    path: /foomachinemanaged
    method: GET
    data_selector: items
- name: FooMachineTemplate
  endpoint:
    path: /foomachinetemplates
    method: GET
    data_selector: items
- name: FooMachineTemplateList
  endpoint:
    path: /foomachinetemplatesmanaged
    method: GET
    data_selector: items
- name: BootstrapConfig
  endpoint:
    path: /bootstrapconfigs
    method: GET
    data_selector: items
    params: {}
- name: BootstrapConfigTemplate
  endpoint:
    path: /bootstrapconfigtemplates
    method: GET
    data_selector: items
    params: {}
- name: ControlPlane
  endpoint:
    path: /controlplane
    method: POST
    data_selector: controlPlanes
    params: {}
- name: ControlPlaneList
  endpoint:
    path: /controlplane
    method: GET
    data_selector: controlPlaneList
    params: {}
- name: FooControlPlaneMachineTemplate
  endpoint:
    path: /FooControlPlaneMachineTemplate
    method: GET
- name: ionos_cloud
  endpoint:
    path: /services/data/v1/ionoscloud
    method: GET
- name: cluster
  endpoint:
    path: /cluster
    method: GET
    data_selector: clusters
    params: {}
- name: vm
  endpoint:
    path: /vm
    method: GET
    data_selector: vms
    params: {}
- name: scaleway-secret
  endpoint:
    path: /api/v1/namespaces/kube-system/secrets/scaleway-secret
    method: CREATE
    data_selector: stringData
    params: {}
- name: KubeadmConfig
  endpoint:
    path: /kubeadmconfig
    method: GET
    data_selector: items
- name: DockerCluster
  endpoint:
    path: /dockerclusters
    method: GET
    data_selector: items
- name: Machine
  endpoint:
    path: /machines
    method: GET
    data_selector: items
- name: MicroK8sControlPlane
  endpoint:
    path: /api/v1beta2/controlplane.cluster.x-k8s.io/MicroK8sControlPlane
    method: GET
    data_selector: spec
    params: {}
- name: MachineDeployment
  endpoint:
    path: /api/v1beta2/machine.x-k8s.io/MachineDeployment
    method: GET
    data_selector: spec
    params: {}
- name: KubeadmControlPlane
  endpoint:
    path: /kubeadmcontrolplanes
    method: GET
- name: MachineDeployment
  endpoint:
    path: /machinedeployments
    method: GET
- name: MachineDeployment
  endpoint:
    path: /api/v1/MachineDeployment
    method: GET
    data_selector: items
    params: {}
- name: MachineSet
  endpoint:
    path: /api/v1/MachineSet
    method: GET
    data_selector: items
    params: {}
- name: MachinePool
  endpoint:
    path: /api/v1/MachinePool
    method: GET
    data_selector: items
    params: {}
- name: MachineHealthCheck
  endpoint:
    path: /machinehealthchecks
    method: GET
    data_selector: items
    params: {}
- name: KubeadmControlPlane
  endpoint:
    path: /kubeadmcontrolplanes
    method: GET
    data_selector: items
    params: {}
- name: Cluster
  endpoint:
    path: /api/v1/cluster
    method: GET
    data_selector: items
    params: {}
- name: ClusterClass
  endpoint:
    path: /api/v1/clusterclass
    method: GET
    data_selector: items
    params: {}
- name: docker-clusterclass
  endpoint:
    path: /clusterclasses/docker-clusterclass-v0.1.0
    method: GET
- name: azure-clusterclass
  endpoint:
    path: /clusterclasses/azure-clusterclass-v0.1.0
    method: GET
- name: cluster
  endpoint:
    path: /clusters
    method: GET
    data_selector: items
    params: {}
- name: machinedeployment
  endpoint:
    path: /machinedeployments
    method: GET
    data_selector: items
    params: {}
- name: BeforeClusterCreate
  endpoint:
    path: /hooks/runtime/cluster/x-k8s.io/v1alpha1/before-cluster-create
    method: POST
    data_selector: status
    params: {}
- name: AfterControlPlaneInitialized
  endpoint:
    path: /hooks/runtime/cluster/x-k8s.io/v1alpha1/after-control-plane-initialized
    method: POST
    data_selector: status
    params: {}
- name: BeforeClusterUpgrade
  endpoint:
    path: /hooks/runtime/cluster/x-k8s.io/v1alpha1/before-cluster-upgrade
    method: POST
    data_selector: status
    params: {}
- name: AfterControlPlaneUpgrade
  endpoint:
    path: /hooks/runtime/cluster/x-k8s.io/v1alpha1/after-control-plane-upgrade
    method: POST
    data_selector: status
    params: {}
- name: AfterClusterUpgrade
  endpoint:
    path: /hooks/runtime/cluster/x-k8s.io/v1alpha1/after-cluster-upgrade
    method: POST
    data_selector: status
    params: {}
- name: BeforeClusterDelete
  endpoint:
    path: /hooks/runtime/cluster/x-k8s.io/v1alpha1/before-cluster-delete
    method: POST
    data_selector: status
    params: {}
- name: metrics
  endpoint:
    path: /metrics
    method: GET
    data_selector: records
- name: pprof
  endpoint:
    path: /debug/pprof/*
    method: GET
    data_selector: records
- name: log_level
  endpoint:
    path: /debug/flags/v
    method: PUT
    data_selector: records
- name: podSecurityStandard
  endpoint:
    path: /spec/template/spec/kubeadmConfigSpec/clusterConfiguration/apiServer/extraArgs
    method: add
    data_selector: value
    params:
      admission-control-config-file: /etc/kubernetes/kube-apiserver-admission-pss.yaml
- name: extraVolumes
  endpoint:
    path: /spec/template/spec/kubeadmConfigSpec/clusterConfiguration/apiServer/extraVolumes
    method: add
    data_selector: value
    params:
    - name: admission-pss
      hostPath: /etc/kubernetes/kube-apiserver-admission-pss.yaml
      mountPath: /etc/kubernetes/kube-apiserver-admission-pss.yaml
      readOnly: true
      pathType: File
- name: files
  endpoint:
    path: /spec/template/spec/kubeadmConfigSpec/files
    method: add
    data_selector: valueFrom
    params:
      template:
      - content: "apiVersion: apiserver.config.k8s.io/v1\nkind: AdmissionConfiguration\n\
          plugins:\n- name: PodSecurity\n  configuration:\n    apiVersion: pod-security.admission.config.k8s.io/v1\n\
          \    kind: PodSecurityConfiguration\n    defaults:\n      enforce: \"{{\
          \ .podSecurity.enforce }}\"\n      enforce-version: \"latest\"\n      audit:\
          \ \"{{ .podSecurity.audit }}\"\n      audit-version: \"latest\"\n      warn:\
          \ \"{{ .podSecurity.warn }}\"\n      warn-version: \"latest\"\n    exemptions:\n\
          \      usernames: []\n      runtimeClasses: []\n      namespaces: [kube-system]"
        path: /etc/kubernetes/kube-apiserver-admission-pss.yaml
- name: infrastructure-provider
  endpoint:
    path: /api/v4/projects/myorg%2Fmyrepo/packages/generic/myrepo/v1.2.3/infrastructure-components.yaml
    method: GET
- name: core-provider
  endpoint:
    path: /api/v4/projects/myorg%2Fmyforkofclusterapi/packages/generic/cluster-api/v1.1.3/core-components.yaml
    method: GET
- name: bootstrap-provider
  endpoint:
    path: /api/v4/projects/external-packages%2Fcluster-api/packages/generic/cluster-api/v1.1.3/bootstrap-components.yaml
    method: GET
- name: kustomize_substitutions
  endpoint:
    path: /kustomize/substitutions
    method: POST
    data_selector: substitutions
    params: {}
- name: MachineHealthCheck
  endpoint:
    path: /machinehealthcheck
    method: GET
    data_selector: status
    params: {}
- name: mailgun_cluster
  endpoint:
    path: /v1/mailgunclusters
    method: POST
    data_selector: message
    params: {}
- name: InfraCluster
  endpoint:
    path: /developer/providers/contracts/infra-cluster
    method: GET
    data_selector: resources
    params: {}
- name: InfraClusterList
  endpoint:
    path: /developer/providers/contracts/infra-cluster
    method: GET
    data_selector: resources
    params: {}
- name: failureDomains
  endpoint:
    path: /status/failureDomains
    method: GET
    data_selector: failureDomains
    params: {}
- name: initialization
  endpoint:
    path: /status/initialization
    method: GET
    data_selector: initialization
    params: {}
- name: conditions
  endpoint:
    path: /status/conditions
    method: GET
    data_selector: conditions
    params: {}
- name: FooMachine
  endpoint:
    path: /foomachines
    method: GET
- name: FooMachineList
  endpoint:
    path: /foomachines
    method: GET
- name: FooMachineTemplate
  endpoint:
    path: /foomachinetemplates
    method: GET
- name: FooMachineTemplateList
  endpoint:
    path: /foomachinetemplates
    method: GET
- name: BootstrapConfig
  endpoint:
    path: /bootstrapconfig
    method: GET
    data_selector: items
- name: BootstrapConfigTemplate
  endpoint:
    path: /bootstrapconfigtemplates
    method: GET
    data_selector: items
- name: ControlPlane
  endpoint:
    path: /controlplane
    method: GET
- name: ControlPlaneList
  endpoint:
    path: /controlplaneList
    method: GET
- name: FooControlPlaneMachineTemplateSpec
  endpoint:
    data_selector: infrastructureRef
- name: ControlPlaneTemplate
  endpoint:
    path: /foocontrolplanetemplates
    method: GET
    data_selector: items
- name: ControlPlaneTemplateList
  endpoint:
    path: /foocontrolplanetemplateslist
    method: GET
    data_selector: items
- name: ionos_cloud
  endpoint:
    path: /
    method: GET
- name: k0sproject
  endpoint:
    path: /
    method: GET
- name: workload_clusters
  endpoint:
    path: /RPC2
    method: POST
    data_selector: result
    params: {}
- name: scaleway-secret
  endpoint:
    path: /api/v1/namespaces/kube-system/secrets
    method: POST
    data_selector: metadata
    params: {}
- name: KubeadmConfig
  endpoint:
    path: /bootstrap.cluster.x-k8s.io/v1beta2/kubeadmconfigs
    method: GET
    data_selector: items
- name: DockerCluster
  endpoint:
    path: /infrastructure.cluster.x-k8s.io/v1beta2/dockerclusters
    method: GET
    data_selector: items
- name: Machine
  endpoint:
    path: /cluster.x-k8s.io/v1beta2/machines
    method: GET
    data_selector: items
- name: MicroK8sControlPlane
  endpoint:
    path: /apis/controlplane.cluster.x-k8s.io/v1beta1/microk8scontrolplanes
    method: GET
    data_selector: items
    params: {}
- name: MachineDeployment
  endpoint:
    path: /apis/cluster.x-k8s.io/v1beta2/machinedeployments
    method: GET
    data_selector: items
    params: {}
- name: MachineDeployment
  endpoint:
    path: /api/v1/MachineDeployment
    method: POST
    data_selector: metadata.annotations
    params: {}
- name: MachineSet
  endpoint:
    path: /api/v1/MachineSet
    method: POST
    data_selector: metadata.annotations
    params: {}
- name: MachinePool
  endpoint:
    path: /api/v1/MachinePool
    method: POST
    data_selector: metadata.annotations
    params: {}
- name: MachineHealthCheck
  endpoint:
    path: /apis/cluster.x-k8s.io/v1beta2/machinehealthchecks
    method: GET
    data_selector: items
    params: {}
- name: KubeadmControlPlane
  endpoint:
    path: /apis/cluster.x-k8s.io/v1beta2/kubeadmcontrolplanes
    method: GET
    data_selector: items
    params: {}
- name: Cluster
  endpoint:
    path: /api/v1/namespaces/default/clusters/my-docker-cluster
    method: GET
- name: ClusterClass
  endpoint:
    path: /api/v1/namespaces/default/clusterclasses/docker-clusterclass-v0.1.0
    method: GET
- name: httpProxy
  endpoint:
    path: /spec/template/spec/httpProxy/url
    method: add
    data_selector: 'variable: httpProxy.url'
- name: mdConfig
  endpoint:
    path: /spec/template/spec/customImage
    method: add
    data_selector: 'template: "{{ (index .mdConfig .builtin.machineDeployment.class).osImage
      }}"'
- name: dnsServers
  endpoint:
    path: /spec/template/spec/dnsServers
    method: add
    data_selector: 'variable: dnsServers'
- name: firstDnsServer
  endpoint:
    path: /spec/template/spec/dnsServer
    method: add
    data_selector: 'variable: dnsServers[0]'
- name: ExtensionConfig
  endpoint:
    path: /api/v1/namespaces/default/services/https:webhook-service:443/proxy/hooks.runtime.cluster.x-k8s.io/v1alpha1/discovery
    method: POST
    data_selector: apiVersion
    params: {}
- name: BeforeClusterCreate
  endpoint:
    path: /hooks.runtime.cluster.x-k8s.io/v1alpha1/before-cluster-create
    method: POST
    data_selector: status
    params: {}
- name: AfterControlPlaneInitialized
  endpoint:
    path: /hooks.runtime.cluster.x-k8s.io/v1alpha1/after-control-plane-initialized
    method: POST
    data_selector: status
    params: {}
- name: BeforeClusterUpgrade
  endpoint:
    path: /hooks.runtime.cluster.x-k8s.io/v1alpha1/before-cluster-upgrade
    method: POST
    data_selector: status
    params: {}
- name: AfterControlPlaneUpgrade
  endpoint:
    path: /hooks.runtime.cluster.x-k8s.io/v1alpha1/after-control-plane-upgrade
    method: POST
    data_selector: status
    params: {}
- name: AfterClusterUpgrade
  endpoint:
    path: /hooks.runtime.cluster.x-k8s.io/v1alpha1/after-cluster-upgrade
    method: POST
    data_selector: status
    params: {}
- name: BeforeClusterDelete
  endpoint:
    path: /hooks.runtime.cluster.x-k8s.io/v1alpha1/before-cluster-delete
    method: POST
    data_selector: status
    params: {}
- name: GeneratePatches
  endpoint:
    path: /hooks.runtime.cluster.x-k8s.io/v1alpha1/generate-patches
    method: POST
    data_selector: status
    params: {}
- name: ValidateTopology
  endpoint:
    path: /hooks.runtime.cluster.x-k8s.io/v1alpha1/validate-topology
    method: POST
    data_selector: status
    params: {}
- name: DiscoverVariables
  endpoint:
    path: /hooks.runtime.cluster.x-k8s.io/v1alpha1/discover-variables
    method: POST
    data_selector: status
    params: {}
- name: metrics
  endpoint:
    path: /metrics
    method: GET
- name: pprof
  endpoint:
    path: /debug/pprof/*
    method: GET
- name: loglevel
  endpoint:
    path: /debug/flags/v
    method: PUT
- name: ClusterClass
  endpoint:
    path: /cluster.x-k8s.io/v1beta2/ClusterClass
    method: GET
    data_selector: spec.patches
    params: {}
- name: Cluster
  endpoint:
    path: /cluster.x-k8s.io/v1beta2/Cluster
    method: GET
    data_selector: spec.topology.classRef
    params: {}
- name: kustomize_substitutions
  endpoint:
    params:
      AZURE_SUBSCRIPTION_ID_B64: '$(echo "${AZURE_SUBSCRIPTION_ID}" | tr -d ''

        '' | base64 | tr -d ''

        '')'
      AZURE_TENANT_ID_B64: '$(echo "${AZURE_TENANT_ID}" | tr -d ''

        '' | base64 | tr -d ''

        '')'
      AZURE_CLIENT_SECRET_B64: '$(echo "${AZURE_CLIENT_SECRET}" | tr -d ''

        '' | base64 | tr -d ''

        '')'
      AZURE_CLIENT_ID_B64: '$(echo "${AZURE_CLIENT_ID}" | tr -d ''

        '' | base64 | tr -d ''

        '')'
- name: GCP_B64ENCODED_CREDENTIALS
  endpoint:
    params:
      GCP_B64ENCODED_CREDENTIALS: your credentials here
- name: VSPHERE_USERNAME
  endpoint:
    params:
      VSPHERE_USERNAME: administrator@vsphere.local
      VSPHERE_PASSWORD: Admin123
- name: Cluster
  endpoint:
    path: /api/v1/clusters
    method: GET
    data_selector: items
- name: MachineDeployment
  endpoint:
    path: /api/v1/machinedeployments
    method: GET
    data_selector: items
- name: MachineSet
  endpoint:
    path: /api/v1/machinesets
    method: GET
    data_selector: items
- name: InfrastructureMachinePool
  endpoint:
    path: /infrastructureMachinePool
    method: GET
    data_selector: status
    params: {}
- name: MachineHealthCheck
  endpoint:
    path: /machineHealthCheck
    method: GET
    data_selector: status
    params: {}
- name: mailgun_cluster
  endpoint:
    path: /mailgunclusters
    method: POST
    data_selector: response
- name: InfraCluster
  endpoint:
    path: /infrastructure/cluster.x-k8s.io/v1beta2/infraclusters
    method: GET
    data_selector: items
- name: InfraClusterList
  endpoint:
    path: /infrastructure/cluster.x-k8s.io/v1beta2/infraclusterlists
    method: GET
    data_selector: items
- name: failureDomains
  endpoint:
    path: /status/failureDomains
    method: GET
    data_selector: failureDomains
    params: {}
- name: initialization
  endpoint:
    path: /status/initialization
    method: GET
    data_selector: initialization
    params: {}
- name: FooMachine
  endpoint:
    path: /foomachines
    method: GET
    data_selector: items
- name: FooMachineList
  endpoint:
    path: /foomachineslist
    method: GET
    data_selector: items
- name: FooMachineTemplate
  endpoint:
    path: /foomachinetemplates
    method: GET
    data_selector: items
- name: FooMachineTemplateList
  endpoint:
    path: /foomachinetemplateslist
    method: GET
    data_selector: items
- name: BootstrapConfig
  endpoint:
    path: /developer/providers/contracts/bootstrap-config#bootstrapconfig-bootstrapconfiglist-resource-definition
    method: GET
    data_selector: records
    params: {}
- name: BootstrapConfigTemplate
  endpoint:
    path: /developer/providers/contracts/bootstrap-config#bootstrapconfigtemplate-bootstrapconfigtemplatelist-resource-definition
    method: GET
    data_selector: records
    params: {}
- name: ControlPlane
  endpoint:
    path: /controlplanes
    method: GET
    data_selector: items
- name: ControlPlaneList
  endpoint:
    path: /controlplanes
    method: GET
    data_selector: items
- name: FooControlPlaneMachineTemplate
  endpoint:
    method: GET
- name: IONOS Cloud
  endpoint:
    params:
      token: <your-token>
      datacenter_id: <your-datacenter-id>
      control_plane_endpoint_ip: 10.10.10.4
      control_plane_endpoint_location: de/txl
      machine_image_id: <your-image-id>
      machine_ssh_keys: <your-ssh-key>
- name: environment_variables
  endpoint:
    params:
      KKZONE: ''
      USER_NAME: <your-linux-user>
      PASSWORD: <your-linux-user-password>
      INSTANCES: <your-linux-ip-address>
      CONTROL_PLANE_ENDPOINT_IP: <your-control-plane-virtual-ip>
      DEPLOY_KERNEL_URL: http://172.22.0.1:6180/images/ironic-python-agent.kernel
      DEPLOY_RAMDISK_URL: http://172.22.0.1:6180/images/ironic-python-agent.initramfs
      IRONIC_URL: http://172.22.0.1:6385/v1/
      IRONIC_INSPECTOR_URL: http://172.22.0.1:5050/v1/
      IRONIC_NO_CA_CERT: 'true'
      IRONIC_NO_BASIC_AUTH: 'true'
      IRONIC_INSPECTOR_NO_BASIC_AUTH: 'true'
      ONE_XMLRPC: http://10.2.11.40:2633/RPC2
      ONE_AUTH: oneadmin:opennebula
      MACHINE_TEMPLATE_NAME: capone131
      ROUTER_TEMPLATE_NAME: capone131-vr
      PUBLIC_NETWORK_NAME: service
      PRIVATE_NETWORK_NAME: private
      CLUSTER_NAME: one
      CCM_IMG: ghcr.io/opennebula/cloud-provider-opennebula:latest
      CONTROL_PLANE_MACHINE_COUNT: '1'
      WORKER_MACHINE_COUNT: '1'
- name: OpenStack_environment_variables
  endpoint:
    params:
      OPENSTACK_DNS_NAMESERVERS: <dns nameserver>
      OPENSTACK_FAILURE_DOMAIN: <availability zone name>
      OPENSTACK_CONTROL_PLANE_MACHINE_FLAVOR: <flavor>
      OPENSTACK_NODE_MACHINE_FLAVOR: <flavor>
      OPENSTACK_IMAGE_NAME: <image name>
      OPENSTACK_SSH_KEY_NAME: <ssh key pair name>
      OPENSTACK_EXTERNAL_NETWORK_ID: <external network ID>
- name: Outscale_environment_variables
  endpoint:
    params:
      OSC_IOPS: <IOPS>
      OSC_VOLUME_SIZE: <VOLUME_SIZE>
      OSC_VOLUME_TYPE: <VOLUME_TYPE>
      OSC_KEYPAIR_NAME: <KEYPAIR_NAME>
      OSC_SUBREGION_NAME: <SUBREGION_NAME>
      OSC_VM_TYPE: <VM_TYPE>
      OSC_IMAGE_NAME: <IMAGE_NAME>
- name: Proxmox_environment_variables
  endpoint:
    params:
      PROXMOX_SOURCENODE: pve
      TEMPLATE_VMID: '100'
      VM_SSH_KEYS: ssh-ed25519 ..., ssh-ed25519 ...
      CONTROL_PLANE_ENDPOINT_IP: 10.10.10.4
      NODE_IP_RANGES: '[10.10.10.5-10.10.10.50, 10.10.10.55-10.10.10.70]'
      GATEWAY: 10.10.10.1
      IP_PREFIX: '24'
      BRIDGE: vmbr1
      DNS_SERVERS: '[8.8.8.8,8.8.4.4]'
      ALLOWED_NODES: '[pve1,pve2,pve3]'
- name: Scaleway_environment_variables
  endpoint:
    params:
      SCW_ACCESS_KEY: <ACCESS_KEY>
      SCW_SECRET_KEY: <SECRET_KEY>
      SCW_PROJECT_ID: <PROJECT_ID>
      SCW_REGION: fr-par
      CONTROL_PLANE_MACHINE_IMAGE: <IMAGE_NAME>
      WORKER_MACHINE_IMAGE: <IMAGE_NAME>
- name: VCD_environment_variables
  endpoint:
    params:
      CLUSTER_NAME: kind
      CLUSTER_NAMESPACE: vcluster
      KUBERNETES_VERSION: 1.23.4
      HELM_VALUES: "service:\n  type: NodePort"
- name: Virtink_environment_variables
  endpoint:
    params: {}
- name: vSphere_environment_variables
  endpoint:
    params:
      VSPHERE_SERVER: 10.0.0.1
      VSPHERE_DATACENTER: SDDC-Datacenter
      VSPHERE_DATASTORE: vsanDatastore
      VSPHERE_NETWORK: VM Network
      VSPHERE_RESOURCE_POOL: '*/Resources'
      VSPHERE_FOLDER: vm
      VSPHERE_TEMPLATE: ubuntu-1804-kube-v1.17.3
      VSPHERE_SSH_AUTHORIZED_KEY: ssh-rsa AAAAB3N...
      VSPHERE_TLS_THUMBPRINT: 97:48:03:8D:78:A9...
      VSPHERE_STORAGE_POLICY: policy-one
      CONTROL_PLANE_ENDPOINT_IP: 1.2.3.4
- name: Vultr_environment_variables
  endpoint:
    params:
      CLUSTER_NAME: <clustername>
      KUBERNETES_VERSION: v1.28.9
      CONTROL_PLANE_MACHINE_COUNT: '1'
      CONTROL_PLANE_PLANID: <plan_id>
      WORKER_MACHINE_COUNT: '1'
      WORKER_PLANID: <plan_id>
      MACHINE_IMAGE: <snapshot_id>
      REGION: <region>
      PLANID: <plan_id>
      VPCID: <vpc_id>
      SSHKEY_ID: <sshKey_id>
- name: MicroK8sControlPlane
  endpoint:
    path: /api/v1beta2/MicroK8sControlPlane
    method: POST
    data_selector: spec
    params: {}
- name: MachineDeployment
  endpoint:
    path: /api/v1beta2/MachineDeployment
    method: POST
    data_selector: spec
    params: {}
- name: MachineDeployment
  endpoint:
    path: /cluster-api/machine-deployment
    method: POST
    data_selector: metadata.annotations
    params:
      min_size: '0'
      max_size: '5'
      capacity:
        memory: 128G
        cpu: '16'
        ephemeral_disk: 100Gi
        maxPods: '200'
        gpu_type: nvidia.com/gpu
        gpu_count: '2'
- name: MachineHealthCheck
  endpoint:
    path: /api/v1/machinehealthchecks
    method: GET
    data_selector: items
    params: {}
- name: Cluster
  endpoint:
    path: /api/v1/namespaces/default/clusters/my-docker-cluster
    method: GET
- name: ClusterClass
  endpoint:
    path: /api/v1/namespaces/default/clusterclasses/docker-clusterclass-v0.1.0
    method: GET
- name: docker-clusterclass
  endpoint:
    path: /cluster.x-k8s.io/v1beta2/docker-clusterclass
    method: GET
    data_selector: spec
    params: {}
- name: azure-clusterclass
  endpoint:
    path: /cluster.x-k8s.io/v1beta2/azure-clusterclass
    method: GET
    data_selector: spec
    params: {}
- name: cluster
  endpoint:
    path: /clusters
    method: GET
    data_selector: items
    params: {}
- name: BeforeClusterCreate
  endpoint:
    path: /v1alpha1/BeforeClusterCreateRequest
    method: POST
    data_selector: status
    params: {}
- name: AfterControlPlaneInitialized
  endpoint:
    path: /v1alpha1/AfterControlPlaneInitializedRequest
    method: POST
    data_selector: status
    params: {}
- name: BeforeClusterUpgrade
  endpoint:
    path: /v1alpha1/BeforeClusterUpgradeRequest
    method: POST
    data_selector: status
    params:
      fromKubernetesVersion: v1.21.2
      toKubernetesVersion: v1.22.0
- name: AfterControlPlaneUpgrade
  endpoint:
    path: /v1alpha1/AfterControlPlaneUpgradeRequest
    method: POST
    data_selector: status
    params:
      kubernetesVersion: v1.22.0
- name: AfterClusterUpgrade
  endpoint:
    path: /v1alpha1/AfterClusterUpgradeRequest
    method: POST
    data_selector: status
    params:
      kubernetesVersion: v1.22.0
- name: BeforeClusterDelete
  endpoint:
    path: /v1alpha1/BeforeClusterDeleteRequest
    method: POST
    data_selector: status
    params: {}
- name: GeneratePatches
  endpoint:
    path: /v1alpha1/GeneratePatchesRequest
    method: POST
    data_selector: status
    params: {}
- name: ValidateTopology
  endpoint:
    path: /v1alpha1/ValidateTopologyRequest
    method: POST
    data_selector: status
    params: {}
- name: DiscoverVariablesRequest
  endpoint:
    path: /hooks/runtime/cluster/x-k8s.io/v1alpha1/discoverVariables
    method: GET
    data_selector: variables
    params: {}
- name: metrics
  endpoint:
    path: /metrics
    method: GET
- name: pprof
  endpoint:
    path: /debug/pprof/
    method: GET
- name: log_level
  endpoint:
    path: /debug/flags/v
    method: PUT
- name: podSecurityStandard
  endpoint:
    path: /spec/template/spec/kubeadmConfigSpec/clusterConfiguration/apiServer/extraArgs
    method: add
    data_selector: value
    params:
      admission-control-config-file: /etc/kubernetes/kube-apiserver-admission-pss.yaml
- name: extraVolumes
  endpoint:
    path: /spec/template/spec/kubeadmConfigSpec/clusterConfiguration/apiServer/extraVolumes
    method: add
    data_selector: value
    params:
      name: admission-pss
      hostPath: /etc/kubernetes/kube-apiserver-admission-pss.yaml
      mountPath: /etc/kubernetes/kube-apiserver-admission-pss.yaml
      readOnly: true
      pathType: File
- name: files
  endpoint:
    path: /spec/template/spec/kubeadmConfigSpec/files
    method: add
    data_selector: valueFrom
    params:
      template:
        content:
          apiVersion: apiserver.config.k8s.io/v1
          kind: AdmissionConfiguration
          plugins:
          - name: PodSecurity
            configuration:
              apiVersion: pod-security.admission.config.k8s.io/v1
              kind: PodSecurityConfiguration
              defaults:
                enforce: '{{ .podSecurity.enforce }}'
                enforce-version: latest
                audit: '{{ .podSecurity.audit }}'
                audit-version: latest
                warn: '{{ .podSecurity.warn }}'
                warn-version: latest
              exemptions:
                usernames: []
                runtimeClasses: []
                namespaces:
                - kube-system
        path: /etc/kubernetes/kube-apiserver-admission-pss.yaml
- name: kustomize_substitutions
  endpoint:
    path: /kustomize_substitutions
    method: GET
    data_selector: substitutions
- name: Cluster
  endpoint:
    path: /api/v1/cluster
    method: GET
    data_selector: clusters
    params: {}
- name: MachineDeployment
  endpoint:
    path: /api/v1/machinedeployments
    method: GET
    data_selector: machineDeployments
    params: {}
- name: MachineSet
  endpoint:
    path: /api/v1/machinesets
    method: GET
    data_selector: machineSets
    params: {}
- name: Machine
  endpoint:
    path: /api/v1/machines
    method: GET
    data_selector: machines
    params: {}
- name: MachinePool
  endpoint:
    path: /infrastructure/machinepool
    method: GET
    data_selector: machines
    params: {}
- name: mailgun_cluster
  endpoint:
    path: /mailgun/cluster
    method: POST
    data_selector: response
- name: InfraCluster
  endpoint:
    path: /infra-cluster
    method: POST
    data_selector: items
    params: {}
- name: InfraClusterList
  endpoint:
    path: /infra-cluster-list
    method: GET
    data_selector: items
    params: {}
- name: FooMachine
  endpoint:
    path: /foomachines
    method: GET
- name: FooMachineList
  endpoint:
    path: /foomachines
    method: GET
- name: FooMachineTemplate
  endpoint:
    path: /foomachinetemplates
    method: GET
- name: FooMachineTemplateList
  endpoint:
    path: /foomachinetemplates
    method: GET
- name: ControlPlane
  endpoint:
    path: /controlplane
    method: GET
    data_selector: resources
    params: {}
- name: ControlPlaneList
  endpoint:
    path: /controlplane/list
    method: GET
    data_selector: resources
    params: {}
- name: FooControlPlaneMachineTemplate
  endpoint:
    path: /foocontrolplanemachinetemplates
    method: GET
- name: FooControlPlaneMachineTemplateList
  endpoint:
    path: /foocontrolplanemachinetemplatelists
    method: GET
- name: Metadata
  endpoint:
    path: /clusterctl/metadata
    method: GET
    data_selector: releaseSeries
    params: {}
- name: OpenNebula API
  endpoint:
    path: /RPC2
    method: GET
    data_selector: records
    params: {}
- name: Nutanix Image
  endpoint:
    path: /images
    method: GET
    data_selector: records
    params: {}
- name: scaleway-secret
  endpoint:
    path: /v1/secret
    method: POST
- name: MicroK8sControlPlane
  endpoint:
    path: /api/v1/microk8s/controlplane
    method: GET
    data_selector: controlPlaneConfig
    params: {}
- name: MachineDeployment
  endpoint:
    path: /api/v1/machineDeployment
    method: GET
    data_selector: template.spec
    params: {}
- name: KubeadmControlPlane
  endpoint:
    path: /kubeadmcontrolplane
    method: GET
    data_selector: spec
    params: {}
- name: MachineDeployment
  endpoint:
    path: /machinedeployment
    method: GET
    data_selector: spec
    params: {}
- name: MachineDeployment
  endpoint:
    path: /api/v1alpha4/machinedeployments
    method: GET
    data_selector: items
    params: {}
- name: MachineSet
  endpoint:
    path: /api/v1alpha4/machinesets
    method: GET
    data_selector: items
    params: {}
- name: MachinePool
  endpoint:
    path: /api/v1alpha4/machinepools
    method: GET
    data_selector: items
    params: {}
- name: MachineHealthCheck
  endpoint:
    path: /machinehealthchecks
    method: GET
    data_selector: items
    params: {}
- name: KubeadmControlPlane
  endpoint:
    path: /kubeadmcontrolplanes
    method: GET
    data_selector: items
    params: {}
- name: Cluster
  endpoint:
    path: /cluster
    method: POST
    data_selector: cluster
    params: {}
- name: ClusterClass
  endpoint:
    path: /clusterclass
    method: POST
    data_selector: clusterClass
    params: {}
- name: ClusterClass
  endpoint:
    path: /cluster/class
    method: GET
    data_selector: items
- name: BeforeClusterCreateRequest
  endpoint:
    path: /hooks.runtime.cluster.x-k8s.io/v1alpha1
    method: POST
    data_selector: status
- name: AfterControlPlaneInitializedRequest
  endpoint:
    path: /hooks.runtime.cluster.x-k8s.io/v1alpha1
    method: POST
    data_selector: status
- name: BeforeClusterUpgradeRequest
  endpoint:
    path: /hooks.runtime.cluster.x-k8s.io/v1alpha1
    method: POST
    data_selector: status
- name: AfterControlPlaneUpgradeRequest
  endpoint:
    path: /hooks.runtime.cluster.x-k8s.io/v1alpha1
    method: POST
    data_selector: status
- name: AfterClusterUpgradeRequest
  endpoint:
    path: /hooks.runtime.cluster.x-k8s.io/v1alpha1
    method: POST
    data_selector: status
- name: BeforeClusterDeleteRequest
  endpoint:
    path: /hooks.runtime.cluster.x-k8s.io/v1alpha1
    method: POST
    data_selector: status
- name: metrics
  endpoint:
    path: /metrics
    method: GET
    data_selector: metrics
    params: {}
- name: pprof
  endpoint:
    path: /debug/pprof/*
    method: GET
    data_selector: pprof
    params: {}
- name: log_level
  endpoint:
    path: /debug/flags/v
    method: PUT
    data_selector: log_level
    params: {}
- name: my-infra-provider
  endpoint:
    path: /api/v4/projects/myorg%2Fmyrepo/packages/generic/myrepo/v1.2.3/infrastructure-components.yaml
- name: cluster-api
  endpoint:
    path: /api/v4/projects/myorg/myforkofclusterapi/releases/latest/core-components.yaml
- name: kubeadm
  endpoint:
    path: /api/v4/projects/external-packages%2Fcluster-api/packages/generic/cluster-api/v1.1.3/bootstrap-components.yaml
- name: kustomize_substitutions
  endpoint:
    params:
      AZURE_SUBSCRIPTION_ID_B64: '$(echo "${AZURE_SUBSCRIPTION_ID}" | tr -d ''

        '' | base64 | tr -d ''

        '')'
      AZURE_TENANT_ID_B64: '$(echo "${AZURE_TENANT_ID}" | tr -d ''

        '' | base64 | tr -d ''

        '')'
      AZURE_CLIENT_SECRET_B64: '$(echo "${AZURE_CLIENT_SECRET}" | tr -d ''

        '' | base64 | tr -d ''

        '')'
      AZURE_CLIENT_ID_B64: '$(echo "${AZURE_CLIENT_ID}" | tr -d ''

        '' | base64 | tr -d ''

        '')'
- name: GCP_B64ENCODED_CREDENTIALS
  endpoint:
    params: {}
- name: VSPHERE_USERNAME
  endpoint:
    params:
      VSPHERE_USERNAME: administrator@vsphere.local
- name: VSPHERE_PASSWORD
  endpoint:
    params:
      VSPHERE_PASSWORD: Admin123
- name: infrastructure_machine_pool
  endpoint:
    path: /infrastructure/machinepool
    method: GET
    data_selector: status
    params: {}
- name: MailgunCluster
  endpoint:
    path: /mailgunclusters
    method: POST
    data_selector: data
    params: {}
- name: InfraCluster
  endpoint:
    path: /infrastructure.cluster.x-k8s.io/v1alpha1/infraclusters
    method: GET
    data_selector: items
- name: FooCluster
  endpoint:
    path: /infrastructure.foo.com/v1/fooclusters
    method: GET
    data_selector: items
- name: BootstrapConfig
  endpoint:
    path: /bootstrapconfigs
    method: POST
    data_selector: items
    params: {}
- name: BootstrapConfigTemplate
  endpoint:
    path: /bootstrapconfigtemplates
    method: POST
    data_selector: items
    params: {}
- name: ControlPlane
  endpoint:
    path: /controlplane
    method: POST
    data_selector: resources
    params: {}
- name: ControlPlaneList
  endpoint:
    path: /controlplanes
    method: GET
    data_selector: resources
    params: {}
- name: FooControlPlaneMachineTemplate
  endpoint:
    path: /foocontrolplanemachinetemplates
    method: POST
- name: FooControlPlaneTemplateList
  endpoint:
    path: /foocontrolplanetemplatelists
    method: GET
- name: management_cluster
  endpoint:
    path: /cluster-api/management-cluster
    method: POST
    data_selector: cluster
    params: {}
- name: IONOS Cloud
  endpoint:
    path: /api/v1/datacenters
    method: GET
- name: workload_cluster
  endpoint:
    path: /RPC2
    method: POST
    data_selector: cluster
    params: {}
- name: scaleway-secret
  endpoint:
    path: /api/v1/secrets/scaleway-secret
    method: GET
    data_selector: secrets
    params: {}
- name: MicroK8sControlPlane
  endpoint:
    path: /api/v1/microk8s/controlplane
    method: GET
    data_selector: items
    params: {}
- name: MachineDeployment
  endpoint:
    path: /api/v1/microk8s/machinedeployment
    method: GET
    data_selector: items
    params: {}
- name: KubeadmControlPlane
  endpoint:
    path: /controlplane/kubeadm
    method: POST
    data_selector: spec
    params: {}
- name: MachineDeployment
  endpoint:
    path: /machinedeployments
    method: POST
    data_selector: spec
    params: {}
- name: MachineDeployment
  endpoint:
    path: /api/v1/MachineDeployment
    method: POST
    data_selector: metadata.annotations
    params: {}
- name: MachineSet
  endpoint:
    path: /api/v1/MachineSet
    method: POST
    data_selector: metadata.annotations
    params: {}
- name: machine_health_check
  endpoint:
    path: /services/data/vXX.X/sobjects/MachineHealthCheck
    method: GET
    data_selector: records
    params: {}
- name: MachinePool
  endpoint:
    path: /tasks/experimental-features/machine-pools
    method: GET
    data_selector: records
- name: ClusterClass
  endpoint:
    path: /tasks/experimental-features/cluster-class/
    method: GET
    data_selector: records
- name: my-docker-cluster
  endpoint:
    path: /api/v1/namespaces/default/clusters/my-docker-cluster
    method: GET
- name: ClusterClass
  endpoint:
    path: /clusterclass
    method: GET
    data_selector: items
    params: {}
- name: BeforeClusterCreate
  endpoint:
    path: /v1alpha1/BeforeClusterCreateRequest
    method: POST
    data_selector: status
    params: {}
- name: AfterControlPlaneInitialized
  endpoint:
    path: /v1alpha1/AfterControlPlaneInitializedRequest
    method: POST
    data_selector: status
    params: {}
- name: BeforeClusterUpgrade
  endpoint:
    path: /v1alpha1/BeforeClusterUpgradeRequest
    method: POST
    data_selector: status
    params:
      fromKubernetesVersion: v1.21.2
      toKubernetesVersion: v1.22.0
- name: AfterControlPlaneUpgrade
  endpoint:
    path: /v1alpha1/AfterControlPlaneUpgradeRequest
    method: POST
    data_selector: status
    params:
      kubernetesVersion: v1.22.0
- name: AfterClusterUpgrade
  endpoint:
    path: /v1alpha1/AfterClusterUpgradeRequest
    method: POST
    data_selector: status
    params:
      kubernetesVersion: v1.22.0
- name: BeforeClusterDelete
  endpoint:
    path: /v1alpha1/BeforeClusterDeleteRequest
    method: POST
    data_selector: status
    params: {}
- name: GeneratePatches
  endpoint:
    path: /v1alpha1/GeneratePatchesRequest
    method: POST
    data_selector: items
    params: {}
- name: ValidateTopology
  endpoint:
    path: /v1alpha1/ValidateTopologyRequest
    method: POST
    data_selector: status
    params: {}
- name: DiscoverVariablesRequest
  endpoint:
    path: /hooks/runtime/cluster/x-k8s.io/v1alpha1/discoverVariables
    method: POST
    data_selector: variables
- name: DiscoverVariablesResponse
  endpoint:
    path: /hooks/runtime/cluster/x-k8s.io/v1alpha1/discoverVariables
    method: GET
    data_selector: status
- name: metrics
  endpoint:
    path: /metrics
    method: GET
- name: pprof
  endpoint:
    path: /debug/pprof/
    method: GET
- name: loglevel
  endpoint:
    path: /debug/flags/v
    method: PUT
- name: podSecurityStandard
  endpoint:
    path: /spec/template/spec/kubeadmConfigSpec/clusterConfiguration/apiServer/extraArgs
    method: ADD
    data_selector: value
    params: {}
- name: extraVolumes
  endpoint:
    path: /spec/template/spec/kubeadmConfigSpec/clusterConfiguration/apiServer/extraVolumes
    method: ADD
    data_selector: value
    params: {}
- name: files
  endpoint:
    path: /spec/template/spec/kubeadmConfigSpec/files
    method: ADD
    data_selector: valueFrom/template
    params: {}
- name: my-infra-provider
  endpoint:
    path: /api/v4/projects/myorg%2Fmyrepo/packages/generic/myrepo/v1.2.3/infrastructure-components.yaml
    method: GET
    data_selector: records
- name: cluster-api
  endpoint:
    path: /api/v4/projects/external-packages%2Fcluster-api/packages/generic/cluster-api/v1.1.3/bootstrap-components.yaml
    method: GET
    data_selector: records
- name: MachineHealthCheck
  endpoint:
    path: /machineHealthCheck
    method: GET
- name: mailgun_cluster
  endpoint:
    path: /clusters
    method: POST
    data_selector: response
    params: {}
- name: cluster
  endpoint:
    path: /api/v1/clusters
    method: POST
    data_selector: metadata.name
    params: {}
- name: failure_domains
  endpoint:
    path: /status/failureDomains
    method: GET
    data_selector: failureDomains
    params: {}
- name: initialization
  endpoint:
    path: /status/initialization
    method: GET
    data_selector: initialization
    params: {}
- name: conditions
  endpoint:
    path: /status/conditions
    method: GET
    data_selector: conditions
    params: {}
- name: FooMachine
  endpoint:
    path: /foomachines
    method: GET
- name: FooMachineList
  endpoint:
    path: /foomachines
    method: GET
- name: FooMachineTemplate
  endpoint:
    path: /foomachinetemplates
    method: GET
- name: FooMachineTemplateList
  endpoint:
    path: /foomachinetemplates
    method: GET
- name: BootstrapConfig
  endpoint:
    path: /bootstrapconfig
    method: GET
    data_selector: items
    params: {}
- name: BootstrapConfigTemplate
  endpoint:
    path: /bootstrapconfigtemplates
    method: GET
    data_selector: items
    params: {}
- name: ControlPlane
  endpoint:
    path: /controlplane
    method: GET
    data_selector: items
- name: ControlPlaneList
  endpoint:
    path: /controlplane/list
    method: GET
    data_selector: items
- name: FooControlPlaneMachineTemplate
  endpoint:
    path: /foocontrolplanetemplates
    method: GET
- name: FooControlPlaneTemplateList
  endpoint:
    path: /foocontrolplanetemplatelists
    method: GET
- name: Cluster
  endpoint:
    path: /cluster
    method: GET
- name: MachineDeployment
  endpoint:
    path: /machinedeployment
    method: GET
- name: v1beta1
  endpoint:
    path: /cluster.x-k8s.io/v1beta1/machineset
    method: GET
    data_selector: metadata
    params: {}
- name: v1beta2
  endpoint:
    path: /cluster.x-k8s.io/v1beta2/machineset
    method: GET
    data_selector: metadata
    params: {}
- name: v1beta1
  endpoint:
    path: /cluster.x-k8s.io/v1beta1
    method: GET
    data_selector: conditions
    params: {}
- name: v1beta2
  endpoint:
    path: /cluster.x-k8s.io/v1beta2
    method: GET
    data_selector: conditions
    params: {}
- name: kubeadmControlPlane
  endpoint:
    path: /kubeadmControlPlane
    method: GET
- name: management_cluster
  endpoint:
    path: /init
    method: POST
- name: IONOSCloudCluster
  endpoint:
    path: /services/cluster/ionos
    method: POST
    data_selector: cluster
- name: ProxmoxCluster
  endpoint:
    path: /services/cluster/proxmox
    method: POST
    data_selector: cluster
- name: workload_cluster
  endpoint:
    path: /clusters
    method: POST
    data_selector: clusters
    params:
      incremental: created_at
- name: scaleway-secret
  endpoint:
    path: /
    method: POST
    data_selector: stringData
    params: {}
- name: MicroK8sControlPlane
  endpoint:
    path: /api/v1/MicroK8sControlPlane
    method: GET
    data_selector: items
    params: {}
- name: MachineDeployment
  endpoint:
    path: /api/v1/MachineDeployment
    method: GET
    data_selector: items
    params: {}
- name: MachineDeployment
  endpoint:
    path: /cluster-api/MachineDeployment
    method: GET
- name: MachineSet
  endpoint:
    path: /cluster-api/MachineSet
    method: GET
- name: MachinePool
  endpoint:
    path: /cluster-api/MachinePool
    method: GET
- name: MachineHealthCheck
  endpoint:
    path: /api/v1beta2/machinehealthchecks
    method: POST
    data_selector: spec
    params: {}
- name: KubeadmControlPlane
  endpoint:
    path: /api/v1beta2/kubeadmcontrolplanes
    method: POST
    data_selector: spec
    params: {}
- name: Cluster
  endpoint:
    path: /cluster
    method: GET
- name: ClusterClass
  endpoint:
    path: /clusterclass
    method: GET
- name: ClusterClass
  endpoint:
    path: /clusters
    method: GET
    data_selector: items
- name: BeforeClusterCreateRequest
  endpoint:
    path: /hooks.runtime.cluster.x-k8s.io/v1alpha1/before-cluster-create
    method: POST
    data_selector: status
    params: {}
- name: AfterControlPlaneInitializedRequest
  endpoint:
    path: /hooks.runtime.cluster.x-k8s.io/v1alpha1/after-control-plane-initialized
    method: POST
    data_selector: status
    params: {}
- name: BeforeClusterUpgradeRequest
  endpoint:
    path: /hooks.runtime.cluster.x-k8s.io/v1alpha1/before-cluster-upgrade
    method: POST
    data_selector: status
    params: {}
- name: AfterControlPlaneUpgradeRequest
  endpoint:
    path: /hooks.runtime.cluster.x-k8s.io/v1alpha1/after-control-plane-upgrade
    method: POST
    data_selector: status
    params: {}
- name: AfterClusterUpgradeRequest
  endpoint:
    path: /hooks.runtime.cluster.x-k8s.io/v1alpha1/after-cluster-upgrade
    method: POST
    data_selector: status
    params: {}
- name: BeforeClusterDeleteRequest
  endpoint:
    path: /hooks.runtime.cluster.x-k8s.io/v1alpha1/before-cluster-delete
    method: POST
    data_selector: status
    params: {}
- name: GeneratePatchesRequest
  endpoint:
    path: /hooks.runtime.cluster.x-k8s.io/v1alpha1/generate-patches
    method: POST
    data_selector: status
    params: {}
- name: ValidateTopologyRequest
  endpoint:
    path: /hooks.runtime.cluster.x-k8s.io/v1alpha1/validate-topology
    method: POST
    data_selector: status
    params: {}
- name: metrics
  endpoint:
    path: /metrics
    method: GET
- name: pprof
  endpoint:
    path: /debug/pprof
    method: GET
- name: flags
  endpoint:
    path: /debug/flags/v
    method: PUT
- name: ClusterClass
  endpoint:
    path: /cluster.x-k8s.io/v1beta2/ClusterClass
    method: GET
    data_selector: spec.patches
- name: Cluster
  endpoint:
    path: /cluster.x-k8s.io/v1beta2/Cluster
    method: GET
    data_selector: metadata
- name: cluster-api
  endpoint:
    path: /services/data/v1.10/sobjects/ClusterAPI
    method: GET
    data_selector: resources
    params: {}
- name: bootstrap-kubeadm
  endpoint:
    path: /services/data/v1.10/sobjects/BootstrapKubeadm
    method: GET
    data_selector: resources
    params: {}
- name: control-plane-kubeadm
  endpoint:
    path: /services/data/v1.10/sobjects/ControlPlaneKubeadm
    method: GET
    data_selector: resources
    params: {}
- name: infrastructure-aws
  endpoint:
    path: /services/data/v1.10/sobjects/InfrastructureAWS
    method: GET
    data_selector: resources
    params: {}
- name: infrastructure-docker
  endpoint:
    path: /services/data/v1.10/sobjects/InfrastructureDocker
    method: GET
    data_selector: resources
    params: {}
- name: kustomize_substitutions
  endpoint:
    path: kustomize_substitutions
    method: POST
- name: Cluster
  endpoint:
    path: /clusters
    method: GET
    data_selector: items
- name: Machine
  endpoint:
    path: /machines
    method: GET
    data_selector: items
- name: mailgun_cluster
  endpoint:
    path: /mailgunclusters
    method: POST
    data_selector: response
- name: InfraCluster
  endpoint:
    path: /infrastructure.cluster.x-k8s.io/v1alpha1/infraclusters
    method: GET
    data_selector: items
- name: InfraClusterList
  endpoint:
    path: /infrastructure.cluster.x-k8s.io/v1alpha1/infraclusterlists
    method: GET
    data_selector: items
- name: FooClusterStatus
  endpoint:
    path: /fooclusters/status
    method: GET
    data_selector: status
    params: {}
- name: InfraCluster
  endpoint:
    path: /infraclusters
    method: GET
    data_selector: items
    params: {}
- name: FooMachine
  endpoint:
    path: /foomachines
    method: GET
    data_selector: items
- name: FooMachineList
  endpoint:
    path: /foomachines
    method: GET
    data_selector: items
- name: FooMachineTemplate
  endpoint:
    path: /foomachinetemplates
    method: GET
    data_selector: items
- name: FooMachineTemplateList
  endpoint:
    path: /foomachinetemplates
    method: GET
    data_selector: items
- name: BootstrapConfig
  endpoint:
    path: /bootstrapconfig
    method: GET
    data_selector: items
    params: {}
- name: BootstrapConfigTemplate
  endpoint:
    path: /bootstrapconfigtemplates
    method: GET
    data_selector: items
    params: {}
- name: ControlPlane
  endpoint:
    path: /controlplane
    method: GET
    data_selector: items
- name: BootstrapConfig
  endpoint:
    path: /bootstrapconfig
    method: GET
    data_selector: items
- name: FooControlPlaneMachineTemplate
  endpoint:
    path: /foocontrolplanemachinetemplates
    method: GET
    data_selector: items
- name: FooControlPlaneTemplate
  endpoint:
    path: /foocontrolplanetemplates
    method: GET
    data_selector: items
- name: FooControlPlaneTemplateList
  endpoint:
    path: /foocontrolplanetemplates
    method: GET
    data_selector: items
- name: MachineSet
  endpoint:
    path: /cluster/machineset
    method: GET
    data_selector: status
    params: {}
- name: MachinePool
  endpoint:
    path: /cluster/machinepool
    method: GET
    data_selector: status
    params: {}
- name: Machine
  endpoint:
    path: /cluster/machine
    method: GET
    data_selector: status
    params: {}
- name: MachineHealthCheck
  endpoint:
    path: /cluster/machinehealthcheck
    method: GET
    data_selector: status
    params: {}
- name: KubeadmConfig
  endpoint:
    path: /kubeadm/config
    method: GET
    data_selector: spec
    params: {}
- name: clusters
  endpoint:
    path: /clusters
    method: GET
    data_selector: clusters
    params: {}
- name: machines
  endpoint:
    path: /machines
    method: GET
    data_selector: machines
    params: {}
- name: machineSets
  endpoint:
    path: /machineSets
    method: GET
    data_selector: machineSets
    params: {}
- name: cluster
  endpoint:
    path: /init
    method: POST
    data_selector: cluster_data
- name: cluster
  endpoint:
    path: /clusters
    method: GET
    data_selector: clusters
- name: vm_template
  endpoint:
    path: /vm-templates
    method: GET
    data_selector: templates
- name: MicroK8sControlPlane
  endpoint:
    path: /api/v1beta1/microk8scontrolplanes
    method: POST
    data_selector: items
    params: {}
- name: MachineDeployment
  endpoint:
    path: /api/v1beta1/machinedeployments
    method: POST
    data_selector: items
    params: {}
- name: MicroK8sConfigTemplate
  endpoint:
    path: /api/v1beta1/microk8sconfigtemplates
    method: POST
    data_selector: items
    params: {}
- name: MachineDeployment
  endpoint:
    path: /api/v1/machine-deployments
    method: GET
    data_selector: items
    params: {}
- name: MachineSet
  endpoint:
    path: /api/v1/machine-sets
    method: GET
    data_selector: items
    params: {}
- name: MachinePool
  endpoint:
    path: /api/v1/machine-pools
    method: GET
    data_selector: items
    params: {}
- name: MachineHealthCheck
  endpoint:
    path: /clusters/{clusterName}/machinehealthchecks
    method: POST
    data_selector: machineHealthChecks
    params: {}
- name: KubeadmControlPlane
  endpoint:
    path: /kubeadmcontrolplanes
    method: POST
    data_selector: kubeadmControlPlanes
    params: {}
- name: Cluster
  endpoint:
    path: /cluster
    method: POST
    data_selector: spec
    params: {}
- name: ClusterClass
  endpoint:
    path: /clusterclass
    method: POST
    data_selector: spec
    params: {}
- name: ClusterClass
  endpoint:
    path: /clusterapi/v1/ClusterClass
    method: GET
    data_selector: items
- name: ExtensionConfig
  endpoint:
    path: /api/v1/namespaces/default/services/https:webhook-service:443/proxy/hooks.runtime.cluster.x-k8s.io/v1alpha1/discovery
    method: POST
    data_selector: apiVersion
    params: {}
- name: BeforeClusterCreate
  endpoint:
    path: /hooks/runtime/cluster.x-k8s.io/v1alpha1/before-cluster-create
    method: POST
    data_selector: status
    params: {}
- name: AfterControlPlaneInitialized
  endpoint:
    path: /hooks/runtime/cluster.x-k8s.io/v1alpha1/after-control-plane-initialized
    method: POST
    data_selector: status
    params: {}
- name: BeforeClusterUpgrade
  endpoint:
    path: /hooks/runtime/cluster.x-k8s.io/v1alpha1/before-cluster-upgrade
    method: POST
    data_selector: status
    params: {}
- name: AfterControlPlaneUpgrade
  endpoint:
    path: /hooks/runtime/cluster.x-k8s.io/v1alpha1/after-control-plane-upgrade
    method: POST
    data_selector: status
    params: {}
- name: AfterClusterUpgrade
  endpoint:
    path: /hooks/runtime/cluster.x-k8s.io/v1alpha1/after-cluster-upgrade
    method: POST
    data_selector: status
    params: {}
- name: BeforeClusterDelete
  endpoint:
    path: /hooks/runtime/cluster.x-k8s.io/v1alpha1/before-cluster-delete
    method: POST
    data_selector: status
    params: {}
- name: DiscoverVariablesRequest
  endpoint:
    path: /hooks.runtime.cluster.x-k8s.io/v1alpha1/DiscoverVariablesRequest
    method: GET
    data_selector: variables
- name: DiscoverVariablesResponse
  endpoint:
    path: /hooks.runtime.cluster.x-k8s.io/v1alpha1/DiscoverVariablesResponse
    method: GET
    data_selector: status
- name: metrics
  endpoint:
    path: /metrics
    method: GET
    data_selector: metrics
    params: {}
- name: pprof
  endpoint:
    path: /debug/pprof
    method: GET
    data_selector: pprof
    params: {}
- name: log_level
  endpoint:
    path: /debug/flags/v
    method: PUT
    data_selector: log_level
    params: {}
- name: ClusterClass
  endpoint:
    path: /api/cluster.x-k8s.io/v1beta2/clusterclasses
    method: GET
    data_selector: items
    params: {}
- name: Cluster
  endpoint:
    path: /api/cluster.x-k8s.io/v1beta2/clusters
    method: GET
    data_selector: items
    params: {}
- name: my-infra-provider
  endpoint:
    path: https://github.com/myorg/myrepo/releases/latest/infrastructure-components.yaml
    method: GET
- name: kubeadm
  endpoint:
    path: https://gitlab.example.com/api/v4/projects/external-packages%2Fcluster-api/packages/generic/cluster-api/v1.1.3/bootstrap-components.yaml
    method: GET
- name: kustomize_substitutions
  endpoint:
    path: /kustomize/substitutions
    method: POST
- name: Cluster
  endpoint:
    path: /clusters
    method: GET
    data_selector: clusters
    params: {}
- name: MachineDeployment
  endpoint:
    path: /machinedeployments
    method: GET
    data_selector: machineDeployments
    params: {}
- name: MachineSet
  endpoint:
    path: /machinesets
    method: GET
    data_selector: machineSets
    params: {}
- name: Machine
  endpoint:
    path: /machines
    method: GET
    data_selector: machines
    params: {}
- name: namespace
  endpoint:
    path: /api/v1/namespaces
    method: POST
    data_selector: metadata
    params: {}
- name: cluster
  endpoint:
    path: /apis/clusterv1.clusters/v1/clusters
    method: POST
    data_selector: metadata
    params: {}
- name: mailgun_cluster
  endpoint:
    path: /v1/mailgunclusters
    method: POST
    data_selector: response
    params: {}
- name: InfraCluster
  endpoint:
    path: /infrastructure/cluster
    method: POST
    data_selector: items
    params: {}
- name: InfraClusterList
  endpoint:
    path: /infrastructure/cluster/list
    method: GET
    data_selector: items
    params: {}
- name: FooClusterStatus
  endpoint:
    path: /status
    method: GET
    data_selector: status.failureDomains
    params: {}
- name: FooClusterInitializationStatus
  endpoint:
    path: /initialization
    method: GET
    data_selector: initialization.provisioned
    params: {}
- name: FooMachine
  endpoint:
    path: /foomachines
    method: GET
- name: FooMachineList
  endpoint:
    path: /foomachines
    method: GET
- name: FooMachineTemplate
  endpoint:
    path: /foomachinetemplates
    method: GET
- name: FooMachineTemplateList
  endpoint:
    path: /foomachinetemplates
    method: GET
- name: ControlPlane
  endpoint:
    path: /controlplane
    method: POST
    data_selector: items
    params: {}
- name: FooControlPlaneMachineTemplate
  endpoint:
    path: /foocontrolplanemachinetemplates
    method: GET
    data_selector: items
- name: FooControlPlaneTemplate
  endpoint:
    path: /foocontrolplanetemplates
    method: GET
    data_selector: items
- name: FooControlPlaneTemplateList
  endpoint:
    path: /foocontrolplanetemplateLists
    method: GET
    data_selector: items
- name: Cluster
  endpoint:
    path: /clusters
    method: GET
    data_selector: clusters
    params: {}
- name: MachineDeployment
  endpoint:
    path: /machinedeployments
    method: GET
    data_selector: machineDeployments
    params: {}
- name: MachineSet
  endpoint:
    path: /machinesets
    method: GET
    data_selector: machineSets
    params: {}
- name: KubeadmControlPlane
  endpoint:
    path: /controlplane.cluster.x-k8s.io/v1beta2/kubeadmcontrolplanes
    method: GET
    data_selector: items
    params: {}
- name: KubeadmControlPlaneTemplate
  endpoint:
    path: /controlplane.cluster.x-k8s.io/v1beta2/kubeadmcontrolplanetemplates
    method: GET
    data_selector: items
    params: {}
- name: ClusterResourceSet
  endpoint:
    path: /clustersets.cluster.x-k8s.io/v1beta2/clusterresourcesets
    method: GET
    data_selector: items
    params: {}
- name: IONOSCloudCluster
  endpoint:
    path: /cluster-api-provider-ionoscloud
    method: GET
- name: workload_cluster
  endpoint:
    path: /cluster
    method: POST
    data_selector: clusters
    params: {}
- name: scaleway-secret
  endpoint:
    path: /scaleway/secret
    method: POST
    data_selector: data
    params: {}
- name: KubeadmConfig
  endpoint:
    path: /kubeadmconfig
    method: GET
    data_selector: items
    params: {}
- name: DockerCluster
  endpoint:
    path: /dockercluster
    method: GET
    data_selector: items
    params: {}
- name: Machine
  endpoint:
    path: /machine
    method: GET
    data_selector: items
    params: {}
- name: MicroK8sControlPlane
  endpoint:
    path: /api/v1beta1/microk8scontrolplanes
    method: GET
    data_selector: items
    params: {}
- name: MachineDeployment
  endpoint:
    path: /api/v1beta1/machinedeployments
    method: GET
    data_selector: items
    params: {}
- name: MachineDeployment
  endpoint:
    path: /apis/cluster.x-k8s.io/v1alpha4/machinedeployments
    method: POST
    data_selector: items
    params: {}
- name: MachineSet
  endpoint:
    path: /apis/cluster.x-k8s.io/v1alpha4/machinesets
    method: POST
    data_selector: items
    params: {}
- name: MachineHealthCheck
  endpoint:
    path: /api/v1beta2/machinehealthchecks
    method: POST
    data_selector: spec
- name: KubeadmControlPlane
  endpoint:
    path: /api/v1beta2/kubeadmcontrolplanes
    method: POST
    data_selector: spec
- name: MachinePool
  endpoint:
    path: /tasks/experimental-features/machine-pools
    method: GET
    data_selector: records
- name: MachineSetPreflightChecks
  endpoint:
    path: /tasks/experimental-features/machineset-preflight-checks
    method: GET
    data_selector: records
- name: ClusterTopology
  endpoint:
    path: /tasks/experimental-features/cluster-class/
    method: GET
    data_selector: records
- name: RuntimeSDK
  endpoint:
    path: /tasks/experimental-features/runtime-sdk/
    method: GET
    data_selector: records
- name: Ignition
  endpoint:
    path: /tasks/experimental-features/ignition
    method: GET
    data_selector: records
- name: Cluster
  endpoint:
    path: /clusters
    method: GET
    data_selector: items
    params: {}
- name: ClusterClass
  endpoint:
    path: /clusterclasses
    method: GET
    data_selector: items
    params: {}
- name: ClusterClass
  endpoint:
    path: /cluster-api/v1beta2/ClusterClass
    method: GET
    data_selector: items
    params: {}
- name: ExtensionConfig
  endpoint:
    path: /api/v1/namespaces/default/services/https:webhook-service:443/proxy/hooks.runtime.cluster.x-k8s.io/v1alpha1/discovery
    method: POST
    data_selector: apiVersion
    params: {}
- name: BeforeClusterCreateRequest
  endpoint:
    path: /hooks/runtime/cluster.x-k8s.io/v1alpha1/before-cluster-create
    method: POST
    data_selector: status
- name: AfterControlPlaneInitializedRequest
  endpoint:
    path: /hooks/runtime/cluster.x-k8s.io/v1alpha1/after-control-plane-initialized
    method: POST
    data_selector: status
- name: BeforeClusterUpgradeRequest
  endpoint:
    path: /hooks/runtime/cluster.x-k8s.io/v1alpha1/before-cluster-upgrade
    method: POST
    data_selector: status
- name: AfterControlPlaneUpgradeRequest
  endpoint:
    path: /hooks/runtime/cluster.x-k8s.io/v1alpha1/after-control-plane-upgrade
    method: POST
    data_selector: status
- name: AfterClusterUpgradeRequest
  endpoint:
    path: /hooks/runtime/cluster.x-k8s.io/v1alpha1/after-cluster-upgrade
    method: POST
    data_selector: status
- name: BeforeClusterDeleteRequest
  endpoint:
    path: /hooks/runtime/cluster.x-k8s.io/v1alpha1/before-cluster-delete
    method: POST
    data_selector: status
- name: GeneratePatchesRequest
  endpoint:
    path: /hooks/runtime/cluster.x-k8s.io/v1alpha1/generate-patches
    method: POST
    data_selector: status
- name: ValidateTopologyRequest
  endpoint:
    path: /hooks/runtime/cluster.x-k8s.io/v1alpha1/validate-topology
    method: POST
    data_selector: status
- name: metrics
  endpoint:
    path: /metrics
    method: GET
    data_selector: metrics
    params: {}
- name: pprof
  endpoint:
    path: /debug/pprof/goroutine
    method: GET
    data_selector: profiles
    params: {}
- name: log_level
  endpoint:
    path: /debug/flags/v
    method: PUT
    data_selector: log_level
    params: {}
- name: podSecurityStandard
  endpoint:
    path: /spec/template/spec/kubeadmConfigSpec/clusterConfiguration/apiServer/extraArgs
    method: add
    data_selector: value
    params:
      admission-control-config-file: /etc/kubernetes/kube-apiserver-admission-pss.yaml
- name: extraVolumes
  endpoint:
    path: /spec/template/spec/kubeadmConfigSpec/clusterConfiguration/apiServer/extraVolumes
    method: add
    data_selector: value
    params:
      name: admission-pss
      hostPath: /etc/kubernetes/kube-apiserver-admission-pss.yaml
      mountPath: /etc/kubernetes/kube-apiserver-admission-pss.yaml
      readOnly: true
      pathType: File
- name: files
  endpoint:
    path: /spec/template/spec/kubeadmConfigSpec/files
    method: add
    data_selector: valueFrom
    params:
      template: "content:\n  apiVersion: apiserver.config.k8s.io/v1\n  kind: AdmissionConfiguration\n\
        \  plugins:\n  - name: PodSecurity\n    configuration:\n      apiVersion:\
        \ pod-security.admission.config.k8s.io/v1\n      kind: PodSecurityConfiguration\n\
        \      defaults:\n        enforce: \"{{ .podSecurity.enforce }}\"\n      \
        \  enforce-version: \"latest\"\n        audit: \"{{ .podSecurity.audit }}\"\
        \n        audit-version: \"latest\"\n        warn: \"{{ .podSecurity.warn\
        \ }}\"\n        warn-version: \"latest\"\n      exemptions:\n        usernames:\
        \ []\n        runtimeClasses: []\n        namespaces: [kube-system]\npath:\
        \ /etc/kubernetes/kube-apiserver-admission-pss.yaml"
- name: my-infra-provider
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
- name: cluster-api
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
- name: kustomize_substitutions
  endpoint:
    path: /services/data/vXX.X/sobjects/KustomizeSubstitutions
    method: GET
    data_selector: records
- name: deploy_observability
  endpoint:
    path: /services/data/vXX.X/sobjects/DeployObservability
    method: GET
    data_selector: records
- name: InfrastructureMachinePool
  endpoint:
    path: /infrastructureMachinePools
    method: GET
    data_selector: items
- name: MachineHealthCheck
  endpoint:
    path: /machineHealthChecks
    method: GET
    data_selector: items
- name: MailgunCluster
  endpoint:
    path: /v1/cluster
    method: POST
    data_selector: response
- name: cluster
  endpoint:
    path: /api/v1/clusters
    method: GET
- name: mailgun_cluster
  endpoint:
    path: /api/v1beta2/infrastructure/mailgunclusters
    method: POST
- name: FooCluster
  endpoint:
    path: /fooclusters
    method: GET
    data_selector: items
- name: FooClusterTemplate
  endpoint:
    path: /fooclustertemplates
    method: GET
    data_selector: items
- name: FooMachine
  endpoint:
    path: /foomachines
    method: GET
- name: FooMachineList
  endpoint:
    path: /foomachines
    method: GET
- name: FooMachineTemplate
  endpoint:
    path: /foomachinetemplates
    method: GET
- name: FooMachineTemplateList
  endpoint:
    path: /foomachinetemplates
    method: GET
- name: BootstrapConfig
  endpoint:
    path: /bootstrapconfigs
    method: GET
    data_selector: items
    params: {}
- name: BootstrapConfigTemplate
  endpoint:
    path: /bootstrapconfigtemplates
    method: GET
    data_selector: items
    params: {}
- name: ControlPlane
  endpoint:
    path: /controlplane
    method: GET
    data_selector: items
- name: ControlPlaneList
  endpoint:
    path: /controlplanes
    method: GET
    data_selector: items
- name: Cluster
  endpoint:
    path: /cluster
    method: GET
    data_selector: metadata
    params: {}
- name: MachineDeployment
  endpoint:
    path: /machinedeployment
    method: GET
    data_selector: metadata
    params: {}
- name: MachineSet
  endpoint:
    path: /machineset
    method: GET
    data_selector: metadata
    params: {}
- name: MachineSet
  endpoint:
    path: /cluster.x-k8s.io/v1beta2/MachineSet
    method: GET
    data_selector: conditions
    params: {}
- name: MachinePool
  endpoint:
    path: /cluster.x-k8s.io/v1beta2/MachinePool
    method: GET
    data_selector: conditions
    params: {}
- name: Machine
  endpoint:
    path: /cluster.x-k8s.io/v1beta2/Machine
    method: GET
    data_selector: conditions
    params: {}
- name: MachineHealthCheck
  endpoint:
    path: /cluster.x-k8s.io/v1beta2/MachineHealthCheck
    method: GET
    data_selector: conditions
    params: {}
- name: KubeadmConfig
  endpoint:
    path: /kubeadmconfig
    method: GET
- name: workload_cluster
  endpoint:
    path: /RPC2
    method: POST
    data_selector: result
    params:
      incremental: updated_at
- name: scaleway-cloud-controller-manager
  endpoint:
    path: /scaleway-cloud-controller-manager
    method: GET
- name: DockerCluster
  endpoint:
    path: /infrastructure.cluster.x-k8s.io/v1beta2/DockerCluster
    method: GET
    data_selector: items
    params: {}
- name: Cluster
  endpoint:
    path: /cluster.x-k8s.io/v1beta2/Cluster
    method: GET
    data_selector: items
    params: {}
- name: KubeadmConfig
  endpoint:
    path: /bootstrap.cluster.x-k8s.io/v1beta2/KubeadmConfig
    method: GET
    data_selector: items
    params: {}
- name: DockerMachine
  endpoint:
    path: /infrastructure.cluster.x-k8s.io/v1beta2/DockerMachine
    method: GET
    data_selector: items
    params: {}
- name: Machine
  endpoint:
    path: /cluster.x-k8s.io/v1beta2/Machine
    method: GET
    data_selector: items
    params: {}
- name: MicroK8sControlPlane
  endpoint:
    path: /controlplane
    method: GET
    data_selector: spec
    params: {}
- name: MachineDeployment
  endpoint:
    path: /machinedeployment
    method: GET
    data_selector: spec
    params: {}
- name: MachineTemplate
  endpoint:
    path: /services/data/vXX.X/sobjects/MachineTemplate
    method: POST
    data_selector: records
    params: {}
- name: KubeadmControlPlane
  endpoint:
    path: /services/data/vXX.X/sobjects/KubeadmControlPlane
    method: PUT
    data_selector: records
    params: {}
- name: MachineDeployment
  endpoint:
    path: /services/data/vXX.X/sobjects/MachineDeployment
    method: PATCH
    data_selector: records
    params: {}
- name: MachineDeployment
  endpoint:
    path: /cluster-api/machinedeployments
    method: GET
    data_selector: items
    params: {}
- name: MachineSet
  endpoint:
    path: /cluster-api/machinesets
    method: GET
    data_selector: items
    params: {}
- name: MachinePool
  endpoint:
    path: /cluster-api/machinepools
    method: GET
    data_selector: items
    params: {}
- name: MachineHealthCheck
  endpoint:
    path: /apis/cluster.x-k8s.io/v1beta2/machinehealthchecks
    method: GET
    data_selector: items
    params: {}
- name: KubeadmControlPlane
  endpoint:
    path: /apis/cluster.x-k8s.io/v1beta2/kubeadmcontrolplanes
    method: GET
    data_selector: items
    params: {}
- name: Cluster
  endpoint:
    path: /api/v1beta2/Cluster
    method: GET
    data_selector: spec
    params: {}
- name: ClusterClass
  endpoint:
    path: /api/v1beta2/ClusterClass
    method: GET
    data_selector: spec
    params: {}
- name: httpProxy
  endpoint:
    path: /spec/template/spec/httpProxy/url
    method: add
    data_selector: url
    params: {}
- name: mdConfig
  endpoint:
    path: /spec/template/spec/customImage
    method: add
    data_selector: osImage
    params: {}
- name: dnsServers
  endpoint:
    path: /spec/template/spec/dnsServers
    method: add
    data_selector: dnsServers
    params: {}
- name: firstDnsServer
  endpoint:
    path: /spec/template/spec/dnsServer
    method: add
    data_selector: dnsServers[0]
    params: {}
- name: BeforeClusterCreate
  endpoint:
    path: /hooks/runtime/cluster/x-k8s.io/v1alpha1/before-cluster-create
    method: POST
    data_selector: status
    params: {}
- name: AfterControlPlaneInitialized
  endpoint:
    path: /hooks/runtime/cluster/x-k8s.io/v1alpha1/after-control-plane-initialized
    method: POST
    data_selector: status
    params: {}
- name: BeforeClusterUpgrade
  endpoint:
    path: /hooks/runtime/cluster/x-k8s.io/v1alpha1/before-cluster-upgrade
    method: POST
    data_selector: status
    params:
      fromKubernetesVersion: v1.21.2
      toKubernetesVersion: v1.22.0
- name: AfterControlPlaneUpgrade
  endpoint:
    path: /hooks/runtime/cluster/x-k8s.io/v1alpha1/after-control-plane-upgrade
    method: POST
    data_selector: status
    params:
      kubernetesVersion: v1.22.0
- name: AfterClusterUpgrade
  endpoint:
    path: /hooks/runtime/cluster/x-k8s.io/v1alpha1/after-cluster-upgrade
    method: POST
    data_selector: status
    params:
      kubernetesVersion: v1.22.0
- name: BeforeClusterDelete
  endpoint:
    path: /hooks/runtime/cluster/x-k8s.io/v1alpha1/before-cluster-delete
    method: POST
    data_selector: status
    params: {}
- name: GeneratePatches
  endpoint:
    path: /hooks/runtime/cluster/x-k8s.io/v1alpha1/generate-patches
    method: POST
    data_selector: items
    params: {}
- name: ValidateTopology
  endpoint:
    path: /hooks/runtime/cluster/x-k8s.io/v1alpha1/validate-topology
    method: POST
    data_selector: status
    params: {}
- name: workload_cluster
  endpoint:
    path: /clusters
    method: GET
    data_selector: clusters
    params: {}
- name: metrics
  endpoint:
    path: /metrics
    method: GET
- name: pprof
  endpoint:
    path: /debug/pprof/*
    method: GET
- name: log_level
  endpoint:
    path: /debug/flags/v
    method: PUT
- name: podSecurityStandard
  endpoint:
    path: /spec/template/spec/kubeadmConfigSpec/clusterConfiguration/apiServer/extraArgs
    method: add
    data_selector: value
    params: {}
- name: my-infra-provider
  endpoint:
    path: https://github.com/myorg/myrepo/releases/latest/infrastructure-components.yaml
    method: GET
- name: cluster-api
  endpoint:
    path: https://github.com/myorg/myforkofclusterapi/releases/latest/core-components.yaml
    method: GET
- name: my-other-infra-provider
  endpoint:
    path: https://gitlab.example.com/api/v4/projects/myorg%2Fmyrepo/packages/generic/myrepo/v1.2.3/infrastructure-components.yaml
    method: GET
- name: kubeadm
  endpoint:
    path: https://gitlab.example.com/api/v4/projects/external-packages%2Fcluster-api/packages/generic/cluster-api/v1.1.3/bootstrap-components.yaml
    method: GET
- name: bootstrap
  endpoint:
    path: /bootstrap
    method: GET
    data_selector: resources
    params: {}
- name: controlplane
  endpoint:
    path: /controlplane
    method: GET
    data_selector: resources
    params: {}
- name: machineset
  endpoint:
    path: /machineset
    method: GET
    data_selector: resources
    params: {}
- name: machinedeployment
  endpoint:
    path: /machinedeployment
    method: GET
    data_selector: resources
    params: {}
- name: machine
  endpoint:
    path: /machine
    method: GET
    data_selector: resources
    params: {}
- name: machinepool
  endpoint:
    path: /machinepool
    method: GET
    data_selector: resources
    params: {}
- name: MachinePool
  endpoint:
    path: /infrastructure/machinepool
    method: GET
    data_selector: items
- name: MailgunCluster
  endpoint:
    path: /api/v1alpha1/mailgunclusters
    method: GET
    data_selector: items
- name: MailgunMachine
  endpoint:
    path: /api/v1alpha1/mailgunmachines
    method: GET
    data_selector: items
- name: mailgun_cluster
  endpoint:
    path: /clusters
    method: POST
    data_selector: clusters
    params: {}
- name: Cluster
  endpoint:
    path: /cluster
    method: GET
- name: MailgunCluster
  endpoint:
    path: /mailgunCluster
    method: GET
- name: failureDomains
  endpoint:
    path: /failureDomains
    method: GET
    data_selector: status.failureDomains
- name: initialization
  endpoint:
    path: /initialization
    method: GET
    data_selector: status.initialization
- name: conditions
  endpoint:
    path: /conditions
    method: GET
    data_selector: status.conditions
- name: InfraMachine
  endpoint:
    path: /foomachines
    method: GET
    data_selector: items
- name: InfraMachineList
  endpoint:
    path: /foomachineslist
    method: GET
    data_selector: items
- name: InfraMachineTemplate
  endpoint:
    path: /foomachinetemplates
    method: GET
    data_selector: items
- name: InfraMachineTemplateList
  endpoint:
    path: /foomachinetemplateslist
    method: GET
    data_selector: items
- name: BootstrapConfig
  endpoint:
    path: /bootstrapconfigs
    method: GET
    data_selector: items
    params: {}
- name: BootstrapConfigTemplate
  endpoint:
    path: /bootstrapconfigtemplates
    method: GET
    data_selector: items
    params: {}
- name: ControlPlane
  endpoint:
    path: /controlplane
    method: GET
    data_selector: items
- name: ControlPlaneList
  endpoint:
    path: /controlplanes
    method: GET
    data_selector: items
- name: FooControlPlaneMachineTemplate
  endpoint:
    path: /foocontrolplanemachinetemplates
    method: GET
- name: FooControlPlaneTemplateList
  endpoint:
    path: /foocontrolplanetemplatelists
    method: GET
- name: provider repository
  endpoint:
    path: /provider/repository
    method: GET
    data_selector: repositories
    params: {}
- name: metadata YAML
  endpoint:
    path: /metadata/yaml
    method: GET
    data_selector: metadata
    params: {}
- name: components YAML
  endpoint:
    path: /components/yaml
    method: GET
    data_selector: components
    params: {}
- name: cluster templates
  endpoint:
    path: /cluster/templates
    method: GET
    data_selector: templates
    params: {}
- name: ClusterClass definitions
  endpoint:
    path: /cluster/class/definitions
    method: GET
    data_selector: definitions
    params: {}
- name: Cluster
  endpoint:
    path: /clusters
    method: GET
    data_selector: items
- name: MachineDeployment
  endpoint:
    path: /machinedeployments
    method: GET
    data_selector: items
- name: MachineSet
  endpoint:
    path: /machinesets
    method: GET
    data_selector: items
- name: MachineSet
  endpoint:
    path: /v1beta2/MachineSet
    method: GET
    data_selector: conditions
    params: {}
- name: MachinePool
  endpoint:
    path: /v1beta2/MachinePool
    method: GET
    data_selector: conditions
    params: {}
- name: Machine
  endpoint:
    path: /v1beta2/Machine
    method: GET
    data_selector: conditions
    params: {}
- name: MachineHealthCheck
  endpoint:
    path: /v1beta2/MachineHealthCheck
    method: GET
    data_selector: conditions
    params: {}
- name: KubeadmConfig
  endpoint:
    path: /kubeadmconfig
    method: GET
    data_selector: conditions
    params: {}
- name: KubeadmControlPlane
  endpoint:
    path: /api/v1beta2/kubeadmcontrolplanes
    method: GET
- name: cluster
  endpoint:
    path: /clusters
    method: GET
    data_selector: items
- name: machine
  endpoint:
    path: /machines
    method: GET
    data_selector: items
- name: machineset
  endpoint:
    path: /machinesets
    method: GET
    data_selector: items
- name: machinedeployment
  endpoint:
    path: /machinedeployments
    method: GET
    data_selector: items
- name: management_cluster
  endpoint:
    path: /init
    method: POST
    data_selector: result
    params: {}
- name: vpc
  endpoint:
    path: /v1/vpc
    method: GET
- name: powervs
  endpoint:
    path: /v1/powervs
    method: GET
- name: opennebula
  endpoint:
    path: /RPC2
    method: GET
    data_selector: oneadmin:opennebula
- name: KubeadmConfig
  endpoint:
    path: /kubeadm/config
    method: POST
    data_selector: items
    params: {}
- name: DockerCluster
  endpoint:
    path: /docker/cluster
    method: POST
    data_selector: items
    params: {}
- name: Machine
  endpoint:
    path: /machine
    method: POST
    data_selector: items
    params: {}
- name: MicroK8sControlPlane
  endpoint:
    path: /api/v1beta1/microk8scontrolplane
    method: GET
    data_selector: spec.controlPlaneConfig
- name: MachineDeployment
  endpoint:
    path: /api/v1beta2/machinedeployment
    method: GET
    data_selector: spec
- name: KubeadmControlPlane
  endpoint:
    path: /controlplane/kubeadmcontrolplane
    method: POST
    data_selector: spec
    params: {}
- name: MachineDeployment
  endpoint:
    path: /machinedeployment
    method: POST
    data_selector: spec
    params: {}
- name: MachineHealthCheck
  endpoint:
    path: /machinehealthcheck
    method: POST
    data_selector: spec
    params: {}
- name: MachineDeployment
  endpoint:
    path: /api/v1/MachineDeployment
    method: POST
    data_selector: items
    params: {}
- name: MachineSet
  endpoint:
    path: /api/v1/MachineSet
    method: POST
    data_selector: items
    params: {}
- name: MachineHealthCheck
  endpoint:
    path: /api/v1beta2/machinehealthchecks
    method: GET
    data_selector: items
    params: {}
- name: KubeadmControlPlane
  endpoint:
    path: /api/v1beta2/kubeadmcontrolplanes
    method: GET
    data_selector: items
    params: {}
- name: Cluster
  endpoint:
    path: /clusters
    method: GET
    data_selector: items
    params: {}
- name: ClusterClass
  endpoint:
    path: /clusterclasses
    method: GET
    data_selector: items
    params: {}
- name: docker-clusterclass
  endpoint:
    path: /cluster/classes/docker-clusterclass
    method: GET
    data_selector: classes
    params: {}
- name: azure-clusterclass
  endpoint:
    path: /cluster/classes/azure-clusterclass
    method: GET
    data_selector: classes
    params: {}
- name: controlPlane
  endpoint:
    path: /spec/topology/controlPlane
    method: PATCH
    data_selector: replicas
    params: {}
- name: machineDeployments
  endpoint:
    path: /spec/topology/workers/machineDeployments
    method: PATCH
    data_selector: replicas
    params: {}
- name: BeforeClusterCreate
  endpoint:
    path: /hooks/runtime/cluster.x-k8s.io/v1alpha1/before-cluster-create
    method: POST
    data_selector: status
    params: {}
- name: AfterControlPlaneInitialized
  endpoint:
    path: /hooks/runtime/cluster.x-k8s.io/v1alpha1/after-control-plane-initialized
    method: POST
    data_selector: status
    params: {}
- name: BeforeClusterUpgrade
  endpoint:
    path: /hooks/runtime/cluster.x-k8s.io/v1alpha1/before-cluster-upgrade
    method: POST
    data_selector: status
    params:
      fromKubernetesVersion: v1.21.2
      toKubernetesVersion: v1.22.0
- name: AfterControlPlaneUpgrade
  endpoint:
    path: /hooks/runtime/cluster.x-k8s.io/v1alpha1/after-control-plane-upgrade
    method: POST
    data_selector: status
    params:
      kubernetesVersion: v1.22.0
- name: AfterClusterUpgrade
  endpoint:
    path: /hooks/runtime/cluster.x-k8s.io/v1alpha1/after-cluster-upgrade
    method: POST
    data_selector: status
    params:
      kubernetesVersion: v1.22.0
- name: BeforeClusterDelete
  endpoint:
    path: /hooks/runtime/cluster.x-k8s.io/v1alpha1/before-cluster-delete
    method: POST
    data_selector: status
    params: {}
- name: GeneratePatches
  endpoint:
    path: /hooks/runtime/cluster.x-k8s.io/v1alpha1/generate-patches
    method: POST
    data_selector: status
    params: {}
- name: ValidateTopology
  endpoint:
    path: /hooks/runtime/cluster.x-k8s.io/v1alpha1/validate-topology
    method: POST
    data_selector: status
    params: {}
- name: DiscoverVariablesRequest
  endpoint:
    path: /hooks.runtime.cluster.x-k8s.io/v1alpha1/discoverVariables
    method: GET
    data_selector: variables
- name: metrics
  endpoint:
    path: /metrics
    method: GET
    data_selector: metrics
    params: {}
- name: pprof
  endpoint:
    path: /debug/pprof
    method: GET
    data_selector: pprof
    params: {}
- name: log_level
  endpoint:
    path: /debug/flags/v
    method: PUT
    data_selector: log_level
    params: {}
- name: podSecurityStandard
  endpoint:
    path: /spec/template/spec/kubeadmConfigSpec/clusterConfiguration/apiServer/extraArgs
    method: add
    data_selector: value
    params: {}
- name: extraVolumes
  endpoint:
    path: /spec/template/spec/kubeadmConfigSpec/clusterConfiguration/apiServer/extraVolumes
    method: add
    data_selector: value
    params: {}
- name: files
  endpoint:
    path: /spec/template/spec/kubeadmConfigSpec/files
    method: add
    data_selector: valueFrom
    params: {}
- name: kind
  endpoint:
    path: /kind
    method: POST
    data_selector: kind
- name: docker
  endpoint:
    path: /docker
    method: POST
    data_selector: docker
- name: kubevirt
  endpoint:
    path: /kubevirt
    method: POST
    data_selector: kubevirt
- name: bootstrap
  endpoint:
    path: /bootstrap
    method: GET
    data_selector: resources
    params: {}
- name: controlplane
  endpoint:
    path: /controlplane
    method: GET
    data_selector: resources
    params: {}
- name: machine
  endpoint:
    path: /machine
    method: GET
    data_selector: resources
    params: {}
- name: MachinePool
  endpoint:
    path: /infrastructureMachinePool
    method: GET
    data_selector: status
    params: {}
- name: mailguncluster
  endpoint:
    path: /v3/mailgunclusters
    method: POST
    data_selector: response
    params: {}
- name: InfraCluster
  endpoint:
    path: /developer/providers/contracts/infra-cluster
    method: GET
    data_selector: resources
- name: InfraClusterList
  endpoint:
    path: /developer/providers/contracts/infra-cluster
    method: GET
    data_selector: resources
- name: failureDomains
  endpoint:
    path: /status/failureDomains
    method: GET
    data_selector: failureDomains
    params: {}
- name: initialization
  endpoint:
    path: /status/initialization
    method: GET
    data_selector: initialization
    params: {}
- name: conditions
  endpoint:
    path: /status/conditions
    method: GET
    data_selector: conditions
    params: {}
- name: FooMachine
  endpoint:
    path: /foomachines
    method: GET
    data_selector: items
- name: FooMachineList
  endpoint:
    path: /foomachines
    method: GET
    data_selector: items
- name: FooMachineTemplate
  endpoint:
    path: /foomachinetemplates
    method: GET
    data_selector: items
- name: FooMachineTemplateList
  endpoint:
    path: /foomachinetemplates
    method: GET
    data_selector: items
- name: BootstrapConfig
  endpoint:
    path: /bootstrapconfigs
    method: GET
    data_selector: items
    params: {}
- name: BootstrapConfigTemplate
  endpoint:
    path: /bootstrapconfigtemplates
    method: GET
    data_selector: items
    params: {}
- name: FooControlPlaneMachineTemplate
  endpoint:
    method: GET
- name: Cluster
  endpoint:
    path: /api/v1beta1/clusters
    method: GET
    data_selector: items
    params: {}
- name: MachineDeployment
  endpoint:
    path: /api/v1beta2/machinedeployments
    method: GET
    data_selector: items
    params: {}
- name: MachineSet
  endpoint:
    path: /api/v1beta2/machinesets
    method: GET
    data_selector: items
    params: {}
- name: MachineSet
  endpoint:
    path: /v1beta2/MachineSet
    method: GET
    data_selector: conditions
    params: {}
- name: MachinePool
  endpoint:
    path: /v1beta2/MachinePool
    method: GET
    data_selector: conditions
    params: {}
- name: Machine
  endpoint:
    path: /v1beta2/Machine
    method: GET
    data_selector: conditions
    params: {}
- name: MachineHealthCheck
  endpoint:
    path: /v1beta2/MachineHealthCheck
    method: GET
    data_selector: conditions
    params: {}
- name: ClusterClass
  endpoint:
    path: /api/cluster.x-k8s.io/v1beta1/ClusterClass
    method: GET
    data_selector: items
- name: KubeadmConfig
  endpoint:
    path: /api/cluster.x-k8s.io/v1beta1/KubeadmConfig
    method: GET
    data_selector: items
- name: kubeadmControlPlane
  endpoint:
    path: /controlplane.cluster.x-k8s.io/v1beta2/kubeadmControlPlanes
    method: GET
    data_selector: items
    params: {}
- name: ClusterResourceSet
  endpoint:
    path: /ClusterResourceSet
    method: GET
- name: ClusterResourceSetBinding
  endpoint:
    path: /ClusterResourceSetBinding
    method: GET
- name: ExtensionConfig
  endpoint:
    path: /ExtensionConfig
    method: GET
- name: IPAddress
  endpoint:
    path: /IPAddress
    method: GET
- name: IPAddressClaim
  endpoint:
    path: /IPAddressClaim
    method: GET
- name: before-upgrade.hook.cluster.cluster.x-k8s.io
  endpoint:
    path: /before-upgrade.hook.cluster.cluster.x-k8s.io
    method: GET
    data_selector: annotations
    params: {}
- name: cluster.x-k8s.io/annotations-from-machine
  endpoint:
    path: /cluster.x-k8s.io/annotations-from-machine
    method: GET
    data_selector: annotations
    params: {}
- name: cluster.x-k8s.io/cloned-from-groupkind
  endpoint:
    path: /cluster.x-k8s.io/cloned-from-groupkind
    method: GET
    data_selector: annotations
    params: {}
- name: cluster.x-k8s.io/cloned-from-name
  endpoint:
    path: /cluster.x-k8s.io/cloned-from-name
    method: GET
    data_selector: annotations
    params: {}
- name: cluster.x-k8s.io/cluster-name
  endpoint:
    path: /cluster.x-k8s.io/cluster-name
    method: GET
    data_selector: annotations
    params: {}
- name: cluster.x-k8s.io/cluster-namespace
  endpoint:
    path: /cluster.x-k8s.io/cluster-namespace
    method: GET
    data_selector: annotations
    params: {}
- name: cluster.x-k8s.io/delete-machine
  endpoint:
    path: /cluster.x-k8s.io/delete-machine
    method: GET
    data_selector: annotations
    params: {}
- name: cluster.x-k8s.io/disable-machine-create
  endpoint:
    path: /cluster.x-k8s.io/disable-machine-create
    method: GET
    data_selector: annotations
    params: {}
- name: cluster.x-k8s.io/labels-from-machine
  endpoint:
    path: /cluster.x-k8s.io/labels-from-machine
    method: GET
    data_selector: annotations
    params: {}
- name: cluster.x-k8s.io/managed-by
  endpoint:
    path: /cluster.x-k8s.io/managed-by
    method: GET
    data_selector: annotations
    params: {}
- name: cluster.x-k8s.io/machine
  endpoint:
    path: /cluster.x-k8s.io/machine
    method: GET
    data_selector: annotations
    params: {}
- name: cluster.x-k8s.io/owner-kind
  endpoint:
    path: /cluster.x-k8s.io/owner-kind
    method: GET
    data_selector: annotations
    params: {}
- name: cluster.x-k8s.io/owner-name
  endpoint:
    path: /cluster.x-k8s.io/owner-name
    method: GET
    data_selector: annotations
    params: {}
- name: cluster.x-k8s.io/paused
  endpoint:
    path: /cluster.x-k8s.io/paused
    method: GET
    data_selector: annotations
    params: {}
- name: cluster.x-k8s.io/remediate-machine
  endpoint:
    path: /cluster.x-k8s.io/remediate-machine
    method: GET
    data_selector: annotations
    params: {}
- name: cluster.x-k8s.io/replicas-managed-by
  endpoint:
    path: /cluster.x-k8s.io/replicas-managed-by
    method: GET
    data_selector: annotations
    params: {}
- name: cluster.x-k8s.io/skip-remediation
  endpoint:
    path: /cluster.x-k8s.io/skip-remediation
    method: GET
    data_selector: annotations
    params: {}
- name: clusterctl.cluster.x-k8s.io/block-move
  endpoint:
    path: /clusterctl.cluster.x-k8s.io/block-move
    method: GET
    data_selector: annotations
    params: {}
- name: clusterctl.cluster.x-k8s.io/delete-for-move
  endpoint:
    path: /clusterctl.cluster.x-k8s.io/delete-for-move
    method: GET
    data_selector: annotations
    params: {}
- name: clusterctl.cluster.x-k8s.io/skip-crd-name-preflight-check
  endpoint:
    path: /clusterctl.cluster.x-k8s.io/skip-crd-name-preflight-check
    method: GET
    data_selector: annotations
    params: {}
- name: controlplane.cluster.x-k8s.io/kubeadm-cluster-configuration
  endpoint:
    path: /controlplane.cluster.x-k8s.io/kubeadm-cluster-configuration
    method: GET
    data_selector: annotations
    params: {}
- name: controlplane.cluster.x-k8s.io/remediation-for
  endpoint:
    path: /controlplane.cluster.x-k8s.io/remediation-for
    method: GET
    data_selector: annotations
    params: {}
- name: controlplane.cluster.x-k8s.io/remediation-in-progress
  endpoint:
    path: /controlplane.cluster.x-k8s.io/remediation-in-progress
    method: GET
    data_selector: annotations
    params: {}
- name: controlplane.cluster.x-k8s.io/skip-coredns
  endpoint:
    path: /controlplane.cluster.x-k8s.io/skip-coredns
    method: GET
    data_selector: annotations
    params: {}
- name: controlplane.cluster.x-k8s.io/skip-kube-proxy
  endpoint:
    path: /controlplane.cluster.x-k8s.io/skip-kube-proxy
    method: GET
    data_selector: annotations
    params: {}
- name: crd-migration.cluster.x-k8s.io/observed-generation
  endpoint:
    path: /crd-migration.cluster.x-k8s.io/observed-generation
    method: GET
    data_selector: annotations
    params: {}
- name: machine.cluster.x-k8s.io/certificates-expiry
  endpoint:
    path: /machine.cluster.x-k8s.io/certificates-expiry
    method: GET
    data_selector: annotations
    params: {}
- name: machine.cluster.x-k8s.io/exclude-node-draining
  endpoint:
    path: /machine.cluster.x-k8s.io/exclude-node-draining
    method: GET
    data_selector: annotations
    params: {}
- name: machine.cluster.x-k8s.io/exclude-wait-for-node-volume-detach
  endpoint:
    path: /machine.cluster.x-k8s.io/exclude-wait-for-node-volume-detach
    method: GET
    data_selector: annotations
    params: {}
- name: machinedeployment.clusters.x-k8s.io/desired-replicas
  endpoint:
    path: /machinedeployment.clusters.x-k8s.io/desired-replicas
    method: GET
    data_selector: annotations
    params: {}
- name: machinedeployment.clusters.x-k8s.io/max-replicas
  endpoint:
    path: /machinedeployment.clusters.x-k8s.io/max-replicas
    method: GET
    data_selector: annotations
    params: {}
- name: machinedeployment.clusters.x-k8s.io/revision
  endpoint:
    path: /machinedeployment.clusters.x-k8s.io/revision
    method: GET
    data_selector: annotations
    params: {}
- name: machineset.cluster.x-k8s.io/skip-preflight-checks
  endpoint:
    path: /machineset.cluster.x-k8s.io/skip-preflight-checks
    method: GET
    data_selector: annotations
    params: {}
- name: pre-drain.delete.hook.machine.cluster.x-k8s.io
  endpoint:
    path: /pre-drain.delete.hook.machine.cluster.x-k8s.io
    method: GET
    data_selector: annotations
    params: {}
- name: pre-terminate.delete.hook.machine.cluster.x-k8s.io
  endpoint:
    path: /pre-terminate.delete.hook.machine.cluster.x-k8s.io
    method: GET
    data_selector: annotations
    params: {}
- name: topology.cluster.x-k8s.io/defer-upgrade
  endpoint:
    path: /topology.cluster.x-k8s.io/defer-upgrade
    method: GET
    data_selector: annotations
    params: {}
- name: topology.cluster.x-k8s.io/dry-run
  endpoint:
    path: /topology.cluster.x-k8s.io/dry-run
    method: GET
    data_selector: annotations
    params: {}
- name: topology.cluster.x-k8s.io/hold-upgrade-sequence
  endpoint:
    path: /topology.cluster.x-k8s.io/hold-upgrade-sequence
    method: GET
    data_selector: annotations
    params: {}
- name: topology.cluster.x-k8s.io/upgrade-concurrency
  endpoint:
    path: /topology.cluster.x-k8s.io/upgrade-concurrency
    method: GET
    data_selector: annotations
    params: {}
- name: unsafe.topology.cluster.x-k8s.io/disable-update-class-name-check
  endpoint:
    path: /unsafe.topology.cluster.x-k8s.io/disable-update-class-name-check
    method: GET
    data_selector: annotations
    params: {}
- name: unsafe.topology.cluster.x-k8s.io/disable-update-version-check
  endpoint:
    path: /unsafe.topology.cluster.x-k8s.io/disable-update-version-check
    method: GET
    data_selector: annotations
    params: {}
- name: IONOS Cloud
  endpoint:
    path: /v1/instances
    method: GET
- name: cluster
  endpoint:
    path: /cluster
    method: POST
    data_selector: clusters
    params: {}
- name: image
  endpoint:
    path: /image
    method: GET
    data_selector: images
    params: {}
- name: MicroK8sControlPlane
  endpoint:
    path: /controlplane.cluster.x-k8s.io/v1beta1/microk8scontrolplanes
    method: GET
    data_selector: items
    params: {}
- name: MachineDeployment
  endpoint:
    path: /cluster.x-k8s.io/v1beta2/machinedeployments
    method: GET
    data_selector: items
    params: {}
- name: MicroK8sConfigTemplate
  endpoint:
    path: /bootstrap.cluster.x-k8s.io/v1beta1/microk8sconfigtemplates
    method: GET
    data_selector: items
    params: {}
- name: MachineDeployment
  endpoint:
    path: /tasks/updating-machine-templates
    method: GET
    data_selector: spec
    params: {}
- name: MachineHealthCheck
  endpoint:
    path: /tasks/adding-machinehealthcheck
    method: GET
    data_selector: spec
    params: {}
- name: MachineDeployment
  endpoint:
    path: /apis/cluster.x-k8s.io/v1alpha4/machinedeployments
    method: GET
- name: MachineHealthCheck
  endpoint:
    path: /api/machinehealthcheck
    method: POST
    data_selector: spec
- name: Cluster
  endpoint:
    path: /clusters
    method: GET
    data_selector: items
- name: ClusterClass
  endpoint:
    path: /clusterclasses
    method: GET
    data_selector: items
- name: httpProxy
  endpoint:
    path: /spec/template/spec/httpProxy/url
    method: add
    data_selector: url
    params: {}
- name: mdConfig
  endpoint:
    path: /spec/template/spec/customImage
    method: add
    data_selector: osImage
    params: {}
- name: dnsServers
  endpoint:
    path: /spec/template/spec/dnsServers
    method: add
    data_selector: dnsServers
    params: {}
- name: BeforeClusterCreate
  endpoint:
    path: /api/v1alpha1/BeforeClusterCreateRequest
    method: POST
- name: AfterControlPlaneInitialized
  endpoint:
    path: /api/v1alpha1/AfterControlPlaneInitializedRequest
    method: POST
- name: BeforeClusterUpgrade
  endpoint:
    path: /api/v1alpha1/BeforeClusterUpgradeRequest
    method: POST
- name: AfterControlPlaneUpgrade
  endpoint:
    path: /api/v1alpha1/AfterControlPlaneUpgradeRequest
    method: POST
- name: AfterClusterUpgrade
  endpoint:
    path: /api/v1alpha1/AfterClusterUpgradeRequest
    method: POST
- name: BeforeClusterDelete
  endpoint:
    path: /api/v1alpha1/BeforeClusterDeleteRequest
    method: POST
- name: GeneratePatches
  endpoint:
    path: /api/v1alpha1/GeneratePatchesRequest
    method: POST
- name: ValidateTopology
  endpoint:
    path: /api/v1alpha1/ValidateTopologyRequest
    method: POST
- name: DiscoverVariables
  endpoint:
    path: /api/v1alpha1/DiscoverVariablesRequest
    method: POST
- name: DiscoverVariablesRequest
  endpoint:
    path: /hooks/runtime/cluster.x-k8s.io/v1alpha1/DiscoverVariablesRequest
    method: POST
    data_selector: variables
    params: {}
- name: DiscoverVariablesResponse
  endpoint:
    path: /hooks/runtime/cluster.x-k8s.io/v1alpha1/DiscoverVariablesResponse
    method: GET
    data_selector: status
    params: {}
- name: metrics
  endpoint:
    path: /metrics
    method: GET
    data_selector: metrics
- name: pprof
  endpoint:
    path: /debug/pprof/
    method: GET
    data_selector: profiles
- name: loglevel
  endpoint:
    path: /debug/flags/v
    method: PUT
    data_selector: loglevel
- name: podSecurityStandard
  endpoint:
    path: /spec/template/spec/kubeadmConfigSpec/clusterConfiguration/apiServer/extraArgs
    method: ADD
    data_selector: admission-control-config-file
    params: {}
- name: extraVolumes
  endpoint:
    path: /spec/template/spec/kubeadmConfigSpec/clusterConfiguration/apiServer/extraVolumes
    method: ADD
    data_selector: admission-pss
    params: {}
- name: files
  endpoint:
    path: /spec/template/spec/kubeadmConfigSpec/files
    method: ADD
    data_selector: AdmissionConfiguration
    params: {}
- name: my-infra-provider
  endpoint:
    path: https://github.com/myorg/myrepo/releases/latest/infrastructure-components.yaml
    method: GET
- name: cluster-api
  endpoint:
    path: https://github.com/myorg/myforkofclusterapi/releases/latest/core-components.yaml
    method: GET
- name: my-other-infra-provider
  endpoint:
    path: https://gitlab.example.com/api/v4/projects/myorg%2Fmyrepo/packages/generic/myrepo/v1.2.3/infrastructure-components.yaml
    method: GET
- name: kubeadm
  endpoint:
    path: https://gitlab.example.com/api/v4/projects/external-packages%2Fcluster-api/packages/generic/cluster-api/v1.1.3/bootstrap-components.yaml
    method: GET
- name: cluster
  endpoint:
    path: /create-cluster
    method: POST
- name: kind-cluster
  endpoint:
    path: /kind-cluster
    method: GET
- name: Cluster
  endpoint:
    path: /api/v1/clusters
    method: GET
    data_selector: items
    params: {}
- name: MachineDeployment
  endpoint:
    path: /api/v1/machinedeployments
    method: GET
    data_selector: items
    params: {}
- name: MachineSet
  endpoint:
    path: /api/v1/machinesets
    method: GET
    data_selector: items
    params: {}
- name: machine_pool
  endpoint:
    path: /infrastructure-machine-pool
    method: GET
    data_selector: status
    params: {}
- name: MailgunCluster
  endpoint:
    path: /clusters
    method: POST
    data_selector: clusters
    params: {}
- name: MailgunMachine
  endpoint:
    path: /machines
    method: POST
    data_selector: machines
    params: {}
- name: MailgunCluster
  endpoint:
    path: /mailgunclusters
    method: POST
    data_selector: response
- name: infra_cluster
  endpoint:
    path: /infrastructure/cluster
    method: GET
    data_selector: items
- name: infra_cluster_list
  endpoint:
    path: /infrastructure/cluster/list
    method: GET
    data_selector: items
- name: failureDomains
  endpoint:
    path: /status/failureDomains
    method: GET
    data_selector: status.failureDomains
- name: initialization
  endpoint:
    path: /status/initialization
    method: GET
    data_selector: status.initialization
- name: conditions
  endpoint:
    path: /status/conditions
    method: GET
    data_selector: status.conditions
- name: FooMachine
  endpoint:
    path: /foomachines
    method: GET
    data_selector: items
- name: FooMachineList
  endpoint:
    path: /foomachines
    method: GET
    data_selector: items
- name: FooMachineTemplate
  endpoint:
    path: /foomachinetemplates
    method: GET
    data_selector: items
- name: FooMachineTemplateList
  endpoint:
    path: /foomachinetemplates
    method: GET
    data_selector: items
- name: BootstrapConfig
  endpoint:
    path: /bootstrapConfig
    method: POST
    data_selector: status
    params: {}
- name: BootstrapConfigTemplate
  endpoint:
    path: /bootstrapConfigTemplates
    method: POST
    data_selector: status
    params: {}
- name: FooControlPlaneMachineTemplate
  endpoint:
    path: /foocontrolplanetemplates
    method: GET
- name: provider_repository
  endpoint:
    path: /provider/repository
    method: GET
- name: Cluster
  endpoint:
    path: /cluster
    method: GET
    data_selector: metadata
    params: {}
- name: MachineDeployment
  endpoint:
    path: /machinedeployment
    method: GET
    data_selector: metadata
    params: {}
- name: MachineSet
  endpoint:
    path: /machineset
    method: GET
    data_selector: metadata
    params: {}
- name: MachineSet
  endpoint:
    path: /v1beta2/MachineSet
    method: GET
    data_selector: conditions
- name: MachinePool
  endpoint:
    path: /v1beta2/MachinePool
    method: GET
    data_selector: conditions
- name: Machine
  endpoint:
    path: /v1beta2/Machine
    method: GET
    data_selector: conditions
- name: MachineHealthCheck
  endpoint:
    path: /v1beta2/MachineHealthCheck
    method: GET
    data_selector: conditions
- name: ClusterClass
  endpoint:
    path: /v1beta1/ClusterClass
    method: GET
- name: ClusterClass
  endpoint:
    path: /v1beta2/ClusterClass
    method: GET
- name: KubeadmConfig
  endpoint:
    path: /kubeadm/config
    method: GET
    data_selector: items
- name: ClusterResourceSet
  endpoint:
    path: /clusters/resourceset
    method: GET
    data_selector: resources
- name: ClusterResourceSetBinding
  endpoint:
    path: /clusters/resourceset/binding
    method: GET
    data_selector: bindings
- name: ExtensionConfig
  endpoint:
    path: /extensions/config
    method: GET
    data_selector: extensions
- name: IPAddress
  endpoint:
    path: /ipam/ipaddress
    method: GET
    data_selector: addresses
- name: IPAddressClaim
  endpoint:
    path: /ipam/ipaddressclaim
    method: GET
    data_selector: claims
- name: cluster
  endpoint:
    path: /cluster-api/clusters
    method: GET
- name: machine
  endpoint:
    path: /cluster-api/machines
    method: GET
- name: machineset
  endpoint:
    path: /cluster-api/machinesets
    method: GET
- name: machinedeployment
  endpoint:
    path: /cluster-api/machinedeployments
    method: GET
- name: kubeadmcontrolplane
  endpoint:
    path: /cluster-api/kubeadmcontrolplanes
    method: GET
- name: IONOSCloudCluster
  endpoint:
    path: /v1/ionoscloud/cluster
    method: POST
    data_selector: cluster
    params: {}
- name: K0smotron
  endpoint:
    path: /v1/k0smotron/cluster
    method: POST
    data_selector: cluster
    params: {}
- name: workload_cluster
  endpoint:
    path: /RPC2
    method: GET
    data_selector: clusters
    params: {}
- name: scaleway-secret
  endpoint:
    path: /api/v1/namespaces/kube-system/secrets
    method: POST
    data_selector: metadata.name
    params: {}
- name: MicroK8sControlPlane
  endpoint:
    path: /controlplane.cluster.x-k8s.io/v1beta1/MicroK8sControlPlane
    method: GET
    data_selector: spec
    params: {}
- name: MachineDeployment
  endpoint:
    path: /cluster.x-k8s.io/v1beta2/MachineDeployment
    method: GET
    data_selector: spec
    params: {}
- name: MachineTemplate
  endpoint:
    path: /services/data/vXX.X/sobjects/MachineTemplate
    method: POST
- name: MachineDeployment
  endpoint:
    path: /v1alpha4/machinedeployments
    method: GET
    data_selector: items
    params: {}
- name: MachineSet
  endpoint:
    path: /v1alpha4/machinesets
    method: GET
    data_selector: items
    params: {}
- name: MachinePool
  endpoint:
    path: /v1alpha4/machinepools
    method: GET
    data_selector: items
    params: {}
- name: MachineHealthCheck
  endpoint:
    path: /api/v1/machinehealthchecks
    method: GET
    data_selector: items
    params: {}
- name: KubeadmControlPlane
  endpoint:
    path: /api/v1/kubeadmcontrolplanes
    method: GET
    data_selector: items
    params: {}
- name: docker-cluster
  endpoint:
    path: /api/v1/clusters
    method: POST
    data_selector: clusters
    params: {}
- name: ClusterClass
  endpoint:
    path: /clusterClasses
    method: GET
    data_selector: items
    params: {}
- name: ExtensionConfig
  endpoint:
    path: /api/v1/namespaces/default/services/https:webhook-service:443/proxy/hooks.runtime.cluster.x-k8s.io/v1alpha1/discovery
    method: POST
    data_selector: apiVersion
    params: {}
- name: BeforeClusterCreate
  endpoint:
    path: /v1alpha1/BeforeClusterCreateRequest
    method: POST
    data_selector: status
    params: {}
- name: AfterControlPlaneInitialized
  endpoint:
    path: /v1alpha1/AfterControlPlaneInitializedRequest
    method: POST
    data_selector: status
    params: {}
- name: BeforeClusterUpgrade
  endpoint:
    path: /v1alpha1/BeforeClusterUpgradeRequest
    method: POST
    data_selector: status
    params:
      fromKubernetesVersion: v1.21.2
      toKubernetesVersion: v1.22.0
- name: AfterControlPlaneUpgrade
  endpoint:
    path: /v1alpha1/AfterControlPlaneUpgradeRequest
    method: POST
    data_selector: status
    params:
      kubernetesVersion: v1.22.0
- name: AfterClusterUpgrade
  endpoint:
    path: /v1alpha1/AfterClusterUpgradeRequest
    method: POST
    data_selector: status
    params:
      kubernetesVersion: v1.22.0
- name: BeforeClusterDelete
  endpoint:
    path: /v1alpha1/BeforeClusterDeleteRequest
    method: POST
    data_selector: status
    params: {}
- name: metrics
  endpoint:
    path: /metrics
    method: GET
- name: pprof
  endpoint:
    path: /debug/pprof
    method: GET
- name: loglevel
  endpoint:
    path: /debug/flags/v
    method: PUT
- name: podSecurityStandard
  endpoint:
    path: /spec/template/spec/kubeadmConfigSpec/clusterConfiguration/apiServer/extraArgs
    method: add
    data_selector: admission-control-config-file
    params:
      value: /etc/kubernetes/kube-apiserver-admission-pss.yaml
- name: extraVolumes
  endpoint:
    path: /spec/template/spec/kubeadmConfigSpec/clusterConfiguration/apiServer/extraVolumes
    method: add
    data_selector: admission-pss
    params:
      hostPath: /etc/kubernetes/kube-apiserver-admission-pss.yaml
      mountPath: /etc/kubernetes/kube-apiserver-admission-pss.yaml
      readOnly: true
      pathType: File
- name: files
  endpoint:
    path: /spec/template/spec/kubeadmConfigSpec/files
    method: add
    data_selector: AdmissionConfiguration
    params:
      content:
        apiVersion: apiserver.config.k8s.io/v1
        kind: AdmissionConfiguration
        plugins:
        - name: PodSecurity
          configuration:
            apiVersion: pod-security.admission.config.k8s.io/v1
            kind: PodSecurityConfiguration
            defaults:
              enforce: '{{ .podSecurity.enforce }}'
              enforce-version: latest
              audit: '{{ .podSecurity.audit }}'
              audit-version: latest
              warn: '{{ .podSecurity.warn }}'
              warn-version: latest
            exemptions:
              usernames: []
              runtimeClasses: []
              namespaces:
              - kube-system
      path: /etc/kubernetes/kube-apiserver-admission-pss.yaml
- name: my-infra-provider
  endpoint:
    path: https://github.com/myorg/myrepo/releases/latest/infrastructure-components.yaml
    method: GET
    data_selector: ''
    params: {}
- name: cluster-api
  endpoint:
    path: https://github.com/myorg/myforkofclusterapi/releases/latest/core-components.yaml
    method: GET
    data_selector: ''
    params: {}
- name: my-other-infra-provider
  endpoint:
    path: https://gitlab.example.com/api/v4/projects/myorg%2Fmyrepo/packages/generic/myrepo/v1.2.3/infrastructure-components.yaml
    method: GET
    data_selector: ''
    params: {}
- name: kubeadm
  endpoint:
    path: https://gitlab.example.com/api/v4/projects/external-packages%2Fcluster-api/packages/generic/cluster-api/v1.1.3/bootstrap-components.yaml
    method: GET
    data_selector: ''
    params: {}
- name: bootstrap
  endpoint:
    path: /bootstrap
    method: GET
    data_selector: resources
    params: {}
- name: controlplane
  endpoint:
    path: /controlplane
    method: GET
    data_selector: resources
    params: {}
- name: cluster
  endpoint:
    path: /cluster
    method: GET
    data_selector: resources
    params: {}
- name: MachinePool
  endpoint:
    path: /infrastructure/machinepool
    method: GET
    data_selector: items
- name: MailgunCluster
  endpoint:
    path: /apis/infrastructure.cluster.x-k8s.io/v1alpha1/mailgunclusters
    method: GET
    data_selector: items
    params: {}
- name: MailgunMachine
  endpoint:
    path: /apis/infrastructure.cluster.x-k8s.io/v1alpha1/mailgunmachines
    method: GET
    data_selector: items
    params: {}
- name: mailgun_cluster
  endpoint:
    path: /v1/clusters
    method: POST
    data_selector: cluster
    params: {}
- name: failureDomains
  endpoint:
    path: /status/failureDomains
    method: GET
    data_selector: failureDomains
- name: initialization
  endpoint:
    path: /status/initialization
    method: GET
    data_selector: initialization
- name: conditions
  endpoint:
    path: /status/conditions
    method: GET
    data_selector: conditions
- name: FooMachine
  endpoint:
    path: /foomachines
    method: GET
- name: FooMachineList
  endpoint:
    path: /foomachines
    method: GET
- name: FooMachineTemplate
  endpoint:
    path: /foomachinetemplates
    method: GET
- name: FooMachineTemplateList
  endpoint:
    path: /foomachinetemplates
    method: GET
- name: BootstrapConfig
  endpoint:
    path: /bootstrapconfig
    method: POST
    data_selector: items
    params: {}
- name: BootstrapConfigList
  endpoint:
    path: /bootstrapconfiglist
    method: GET
    data_selector: items
    params: {}
- name: BootstrapConfigTemplate
  endpoint:
    path: /bootstrapconfigtemplate
    method: POST
    data_selector: items
    params: {}
- name: BootstrapConfigTemplateList
  endpoint:
    path: /bootstrapconfigtemplatelist
    method: GET
    data_selector: items
    params: {}
- name: ControlPlane
  endpoint:
    path: /controlplane
    method: GET
    data_selector: items
- name: ControlPlaneList
  endpoint:
    path: /controlplane/list
    method: GET
    data_selector: items
- name: FooControlPlaneMachineTemplate
  endpoint:
    path: /foocontrolplanemachinetemplates
    method: GET
- name: FooControlPlaneTemplate
  endpoint:
    path: /foocontrolplanetemplates
    method: GET
- name: provider_repository
  endpoint:
    path: /provider/repositories
    method: GET
    data_selector: repositories
    params: {}
- name: provider_metadata
  endpoint:
    path: /provider/metadata
    method: GET
    data_selector: metadata
    params: {}
- name: cluster_template
  endpoint:
    path: /cluster/templates
    method: GET
    data_selector: templates
    params: {}
- name: cluster_class_definition
  endpoint:
    path: /cluster/class
    method: GET
    data_selector: class_definitions
    params: {}
- name: Cluster
  endpoint:
    path: /clusters
    method: GET
- name: MachineDeployment
  endpoint:
    path: /machinedeployments
    method: GET
- name: MachineSet
  endpoint:
    path: /machinesets
    method: GET
- name: MachineSet
  endpoint:
    path: /api/v1beta2/machinesets
    method: GET
    data_selector: items
- name: MachinePool
  endpoint:
    path: /api/v1beta2/machinepools
    method: GET
    data_selector: items
- name: Machine
  endpoint:
    path: /api/v1beta2/machines
    method: GET
    data_selector: items
- name: MachineHealthCheck
  endpoint:
    path: /api/v1beta2/machinehealthchecks
    method: GET
    data_selector: items
- name: ClusterClass
  endpoint:
    path: /clusterclasses
    method: GET
- name: KubeadmConfig
  endpoint:
    path: /kubeadmconfigs
    method: GET
    data_selector: items
- name: KubeadmConfigTemplate
  endpoint:
    path: /kubeadmconfigtemplates
    method: GET
    data_selector: items
- name: KubeadmControlPlane
  endpoint:
    path: /kubeadmcontrolplanes
    method: GET
    data_selector: items
- name: Cluster
  endpoint:
    path: /clusters
    method: GET
    data_selector: clusters
    params: {}
- name: Node
  endpoint:
    path: /nodes
    method: GET
    data_selector: nodes
    params: {}
- name: management_cluster
  endpoint:
    path: /clusterctl/init
    method: POST
    data_selector: resources
    params: {}
- name: IONOS Cloud
  endpoint:
    params:
      token: <your-token>
      datacenter_id: <your-datacenter-id>
      control_plane_endpoint_ip: 10.10.10.4
      control_plane_endpoint_location: de/txl
      machine_image_id: <your-image-id>
      machine_ssh_keys: <your-ssh-key>
- name: cluster
  endpoint:
    path: /clusters
    method: GET
    data_selector: clusters
- name: KubeadmConfig
  endpoint:
    path: /kubeadmconfig
    method: GET
    data_selector: items
- name: DockerCluster
  endpoint:
    path: /dockercluster
    method: GET
    data_selector: items
- name: Machine
  endpoint:
    path: /machine
    method: GET
    data_selector: items
- name: MicroK8sControlPlane
  endpoint:
    path: /api/v1beta1/microk8scontrolplanes
    method: GET
    data_selector: items
    params: {}
- name: MachineDeployment
  endpoint:
    path: /api/v1beta1/machinedeployments
    method: GET
    data_selector: items
    params: {}
- name: KubeadmControlPlane
  endpoint:
    method: GET
    params: {}
- name: MachineDeployment
  endpoint:
    method: GET
    params: {}
- name: MachineDeployment
  endpoint:
    path: /services/data/vXX.X/sobjects/MachineDeployment
    method: GET
    data_selector: records
    params: {}
- name: MachineSet
  endpoint:
    path: /services/data/vXX.X/sobjects/MachineSet
    method: GET
    data_selector: records
    params: {}
- name: MachinePool
  endpoint:
    path: /services/data/vXX.X/sobjects/MachinePool
    method: GET
    data_selector: records
    params: {}
- name: capi-quickstart-node-unhealthy-5m
  endpoint:
    path: /services/data/vXX.X/sobjects/MachineHealthCheck
    method: GET
    data_selector: records
    params: {}
- name: my-control-plane
  endpoint:
    path: /services/data/vXX.X/sobjects/KubeadmControlPlane
    method: GET
    data_selector: records
    params: {}
- name: Cluster
  endpoint:
    path: /api/v1beta2/clusters
    method: GET
    data_selector: items
- name: ClusterClass
  endpoint:
    path: /api/v1beta2/clusterclasses
    method: GET
    data_selector: items
- name: ClusterClass
  endpoint:
    path: /v1beta2/ClusterClass
    method: GET
    data_selector: items
    params: {}
- name: BeforeClusterCreateRequest
  endpoint:
    path: /hooks.runtime.cluster.x-k8s.io/v1alpha1/before-cluster-create
    method: POST
    data_selector: settings
- name: AfterControlPlaneInitializedRequest
  endpoint:
    path: /hooks.runtime.cluster.x-k8s.io/v1alpha1/after-control-plane-initialized
    method: POST
    data_selector: settings
- name: BeforeClusterUpgradeRequest
  endpoint:
    path: /hooks.runtime.cluster.x-k8s.io/v1alpha1/before-cluster-upgrade
    method: POST
    data_selector: settings
- name: AfterControlPlaneUpgradeRequest
  endpoint:
    path: /hooks.runtime.cluster.x-k8s.io/v1alpha1/after-control-plane-upgrade
    method: POST
    data_selector: settings
- name: AfterClusterUpgradeRequest
  endpoint:
    path: /hooks.runtime.cluster.x-k8s.io/v1alpha1/after-cluster-upgrade
    method: POST
    data_selector: settings
- name: BeforeClusterDeleteRequest
  endpoint:
    path: /hooks.runtime.cluster.x-k8s.io/v1alpha1/before-cluster-delete
    method: POST
    data_selector: settings
- name: GeneratePatchesRequest
  endpoint:
    path: /hooks.runtime.cluster.x-k8s.io/v1alpha1/generate-patches
    method: POST
    data_selector: settings
- name: ValidateTopologyRequest
  endpoint:
    path: /hooks.runtime.cluster.x-k8s.io/v1alpha1/validate-topology
    method: POST
    data_selector: settings
- name: DiscoverVariablesRequest
  endpoint:
    path: /hooks.runtime.cluster.x-k8s.io/v1alpha1/discoverVariables
    method: POST
- name: DiscoverVariablesResponse
  endpoint:
    path: /hooks.runtime.cluster.x-k8s.io/v1alpha1/discoverVariablesResponse
    method: GET
- name: metrics
  endpoint:
    path: /metrics
    method: GET
    data_selector: metrics
- name: pprof
  endpoint:
    path: /debug/pprof/
    method: GET
    data_selector: profiles
- name: log_level
  endpoint:
    path: /debug/flags/v
    method: PUT
    data_selector: log_level
- name: podSecurityStandard
  endpoint:
    path: /spec/template/spec/kubeadmConfigSpec/clusterConfiguration/apiServer/extraArgs
    method: add
    data_selector: value
    params: {}
- name: admission-pss
  endpoint:
    path: /spec/template/spec/kubeadmConfigSpec/clusterConfiguration/apiServer/extraVolumes
    method: add
    data_selector: value
    params: {}
- name: files
  endpoint:
    path: /spec/template/spec/kubeadmConfigSpec/files
    method: add
    data_selector: valueFrom.template
    params: {}
- name: my-infra-provider
  endpoint:
    path: https://github.com/myorg/myrepo/releases/latest/infrastructure-components.yaml
    method: GET
- name: cluster-api
  endpoint:
    path: https://github.com/myorg/myforkofclusterapi/releases/latest/core-components.yaml
    method: GET
- name: my-other-infra-provider
  endpoint:
    path: https://gitlab.example.com/api/v4/projects/myorg%2Fmyrepo/packages/generic/myrepo/v1.2.3/infrastructure-components.yaml
    method: GET
- name: kubeadm
  endpoint:
    path: https://gitlab.example.com/api/v4/projects/external-packages%2Fcluster-api/packages/generic/cluster-api/v1.1.3/bootstrap-components.yaml
    method: GET
- name: MachinePool
  endpoint:
    path: /infrastructure-machine-pool
    method: GET
    data_selector: status
    params: {}
- name: MailgunCluster
  endpoint:
    path: /v3/mailgunclusters
    method: POST
    data_selector: response
    params: {}
- name: InfraCluster
  endpoint:
    path: /infrastructure.cluster.x-k8s.io/v1alpha1/infraclusters
    method: GET
    data_selector: items
- name: InfraClusterList
  endpoint:
    path: /infrastructure.cluster.x-k8s.io/v1alpha1/infraclusterlists
    method: GET
    data_selector: items
- name: failureDomains
  endpoint:
    path: /status/failureDomains
    method: GET
    data_selector: failureDomains
- name: initialization
  endpoint:
    path: /status/initialization
    method: GET
    data_selector: initialization
- name: conditions
  endpoint:
    path: /status/conditions
    method: GET
    data_selector: conditions
- name: FooMachine
  endpoint:
    path: /foomachines
    method: GET
    data_selector: items
- name: FooMachineList
  endpoint:
    path: /foomachines
    method: GET
    data_selector: items
- name: FooMachineTemplate
  endpoint:
    path: /foomachinetemplates
    method: GET
    data_selector: items
- name: FooMachineTemplateList
  endpoint:
    path: /foomachinetemplates
    method: GET
    data_selector: items
- name: BootstrapConfig
  endpoint:
    path: /bootstrapconfig
    method: GET
    data_selector: items
- name: BootstrapConfigTemplate
  endpoint:
    path: /bootstrapconfigtemplates
    method: GET
    data_selector: items
- name: ControlPlane
  endpoint:
    path: /controlplane
    method: POST
    data_selector: items
    params: {}
- name: ControlPlaneList
  endpoint:
    path: /controlplane/list
    method: GET
    data_selector: items
    params: {}
- name: FooControlPlaneMachineTemplate
  endpoint:
    path: /foocontrolplanetemplates
    method: GET
    data_selector: items
- name: FooControlPlaneTemplateList
  endpoint:
    path: /foocontrolplanetemplates
    method: GET
    data_selector: items
- name: Cluster
  endpoint:
    path: /clusters
    method: GET
    data_selector: items
- name: MachineDeployment
  endpoint:
    path: /machinedeployments
    method: GET
    data_selector: items
- name: MachineSet
  endpoint:
    path: /machinesets
    method: GET
    data_selector: items
- name: ClusterClass
  endpoint:
    path: cluster.x-k8s.io/v1beta2
    method: GET
- name: clusterConfiguration
  endpoint:
    path: spec.clusterConfiguration
    method: GET
    data_selector: conditions
    params: {}
- name: initConfiguration
  endpoint:
    path: spec.initConfiguration
    method: GET
    data_selector: bootstrapTokens
    params: {}
- name: joinConfiguration
  endpoint:
    path: spec.joinConfiguration
    method: GET
    data_selector: nodeRegistration
    params: {}
- name: kubeadmControlPlane
  endpoint:
    path: /v1beta2/kubeadmControlPlanes
    method: GET
- name: ClusterResourceSet
  endpoint:
    path: /api/v1beta1/ClusterResourceSet
    method: GET
    data_selector: items
    params: {}
- name: ClusterResourceSetBinding
  endpoint:
    path: /api/v1beta1/ClusterResourceSetBinding
    method: GET
    data_selector: items
    params: {}
- name: ExtensionConfig
  endpoint:
    path: /api/v1beta1/ExtensionConfig
    method: GET
    data_selector: items
    params: {}
- name: IPAddress
  endpoint:
    path: /api/v1beta1/IPAddress
    method: GET
    data_selector: items
    params: {}
- name: IPAddressClaim
  endpoint:
    path: /api/v1beta1/IPAddressClaim
    method: GET
    data_selector: items
    params: {}
- name: IONOS Cloud
  endpoint:
    params:
      token: <your-token>
      datacenter_id: <your-datacenter-id>
      control_plane_endpoint_ip: 10.10.10.4
      control_plane_endpoint_location: de/txl
      machine_image_id: <your-image-id>
      machine_ssh_keys: <your-ssh-key>
- name: machines
  endpoint:
    path: /machines
    method: GET
    data_selector: machines
    params: {}
- name: vms
  endpoint:
    path: /vms
    method: GET
    data_selector: vms
    params: {}
- name: scaleway-secret
  endpoint:
    path: /api/v1/namespaces/kube-system/secrets/scaleway-secret
    method: GET
    data_selector: stringData
    params: {}
- name: KubeadmConfig
  endpoint:
    path: /kubeadm/config
    method: POST
    data_selector: items
- name: DockerCluster
  endpoint:
    path: /docker/cluster
    method: POST
    data_selector: items
- name: Machine
  endpoint:
    path: /machines
    method: POST
    data_selector: items
- name: MicroK8sControlPlane
  endpoint:
    path: /api/v1beta1/MicroK8sControlPlane
    method: GET
    data_selector: spec.controlPlaneConfig
    params: {}
- name: MachineDeployment
  endpoint:
    path: /api/v1beta1/MachineDeployment
    method: GET
    data_selector: spec.template.spec
    params: {}
- name: KubeadmControlPlane
  endpoint:
    path: /kubeadmcontrolplanes
    method: GET
- name: MachineDeployment
  endpoint:
    path: /machinedeployments
    method: GET
- name: MachineHealthCheck
  endpoint:
    path: /machinehealthchecks
    method: GET
- name: MachineDeployment
  endpoint:
    path: /services/data/v1alpha4/MachineDeployment
    method: POST
    data_selector: annotations
    params: {}
- name: MachineSet
  endpoint:
    path: /services/data/v1alpha4/MachineSet
    method: POST
    data_selector: annotations
    params: {}
- name: MachinePool
  endpoint:
    path: /services/data/v1alpha4/MachinePool
    method: POST
    data_selector: annotations
    params: {}
- name: MachineHealthCheck
  endpoint:
    path: /services/data/vXX.X/sobjects/MachineHealthCheck
    method: POST
    data_selector: records
    params: {}
- name: my-docker-cluster
  endpoint:
    path: /clusters/my-docker-cluster
    method: GET
    data_selector: spec.topology
    params: {}
- name: docker-clusterclass-v0.1.0
  endpoint:
    path: /clusterclasses/docker-clusterclass-v0.1.0
    method: GET
    data_selector: spec
    params: {}
- name: docker-clusterclass
  endpoint:
    path: /cluster.x-k8s.io/v1beta2
    method: GET
    data_selector: spec
    params: {}
- name: azure-clusterclass
  endpoint:
    path: /cluster.x-k8s.io/v1beta2
    method: GET
    data_selector: spec
    params: {}
- name: BeforeClusterCreate
  endpoint:
    path: /before-cluster-create
    method: POST
    data_selector: settings
    params: {}
- name: AfterControlPlaneInitialized
  endpoint:
    path: /after-control-plane-initialized
    method: POST
    data_selector: settings
    params: {}
- name: BeforeClusterUpgrade
  endpoint:
    path: /before-cluster-upgrade
    method: POST
    data_selector: settings
    params: {}
- name: AfterControlPlaneUpgrade
  endpoint:
    path: /after-control-plane-upgrade
    method: POST
    data_selector: settings
    params: {}
- name: AfterClusterUpgrade
  endpoint:
    path: /after-cluster-upgrade
    method: POST
    data_selector: settings
    params: {}
- name: BeforeClusterDelete
  endpoint:
    path: /before-cluster-delete
    method: POST
    data_selector: settings
    params: {}
- name: DiscoverVariablesRequest
  endpoint:
    path: /hooks/runtime/cluster/x-k8s.io/v1alpha1/DiscoverVariablesRequest
    method: GET
    data_selector: variables
- name: DiscoverVariablesResponse
  endpoint:
    path: /hooks/runtime/cluster/x-k8s.io/v1alpha1/DiscoverVariablesResponse
    method: GET
    data_selector: variables
- name: metrics
  endpoint:
    path: /metrics
    method: GET
    data_selector: metrics
    params: {}
- name: pprof
  endpoint:
    path: /debug/pprof/*
    method: GET
    data_selector: pprof
    params: {}
- name: log_level
  endpoint:
    path: /debug/flags/v
    method: PUT
    data_selector: log_level
    params: {}
- name: podSecurityStandard
  endpoint:
    path: /spec/template/spec/kubeadmConfigSpec/clusterConfiguration/apiServer/extraArgs
    method: add
    data_selector: admission-control-config-file
    params:
      value: /etc/kubernetes/kube-apiserver-admission-pss.yaml
- name: extraVolumes
  endpoint:
    path: /spec/template/spec/kubeadmConfigSpec/clusterConfiguration/apiServer/extraVolumes
    method: add
    data_selector: admission-pss
    params:
      hostPath: /etc/kubernetes/kube-apiserver-admission-pss.yaml
      mountPath: /etc/kubernetes/kube-apiserver-admission-pss.yaml
      readOnly: true
      pathType: File
- name: files
  endpoint:
    path: /spec/template/spec/kubeadmConfigSpec/files
    method: add
    data_selector: AdmissionConfiguration
    params:
      content: "apiVersion: apiserver.config.k8s.io/v1\nkind: AdmissionConfiguration\n\
        plugins:\n- name: PodSecurity\n  configuration:\n    apiVersion: pod-security.admission.config.k8s.io/v1\n\
        \    kind: PodSecurityConfiguration\n    defaults:\n      enforce: \"{{ .podSecurity.enforce\
        \ }}\"\n      enforce-version: \"latest\"\n      audit: \"{{ .podSecurity.audit\
        \ }}\"\n      audit-version: \"latest\"\n      warn: \"{{ .podSecurity.warn\
        \ }}\"\n      warn-version: \"latest\"\n    exemptions:\n      usernames:\
        \ []\n      runtimeClasses: []\n      namespaces: [kube-system]"
- name: my-infra-provider
  endpoint:
    path: https://github.com/myorg/myrepo/releases/latest/infrastructure-components.yaml
    method: GET
- name: cluster-api
  endpoint:
    path: https://github.com/myorg/myforkofclusterapi/releases/latest/core-components.yaml
    method: GET
- name: my-other-infra-provider
  endpoint:
    path: https://gitlab.example.com/api/v4/projects/myorg%2Fmyrepo/packages/generic/myrepo/v1.2.3/infrastructure-components.yaml
    method: GET
- name: kubeadm
  endpoint:
    path: https://gitlab.example.com/api/v4/projects/external-packages%2Fcluster-api/packages/generic/cluster-api/v1.1.3/bootstrap-components.yaml
    method: GET
- name: kustomize_substitutions
  endpoint:
    path: /kustomize_substitutions
    method: POST
    data_selector: substitutions
- name: deploy_observability
  endpoint:
    path: /deploy_observability
    method: POST
    data_selector: observability
- name: bootstrap
  endpoint:
    path: /bootstrap
    method: GET
    data_selector: records
- name: controlplane
  endpoint:
    path: /controlplane
    method: GET
    data_selector: records
- name: clusterapi_provider_docker
  endpoint:
    path: /clusterapi_provider_docker
    method: GET
    data_selector: records
- name: clusterctl_cli
  endpoint:
    path: /clusterctl_cli
    method: GET
    data_selector: records
- name: manifest_generation
  endpoint:
    path: /manifest_generation
    method: GET
    data_selector: records
- name: controllers
  endpoint:
    path: /controllers
    method: GET
    data_selector: records
- name: webhooks
  endpoint:
    path: /webhooks
    method: GET
    data_selector: records
- name: mailgun_cluster
  endpoint:
    path: /mailgunclusters
    method: POST
    data_selector: data
    params: {}
- name: InfraCluster
  endpoint:
    path: /api/v1/InfraCluster
    method: POST
    data_selector: items
    params: {}
- name: InfraClusterList
  endpoint:
    path: /api/v1/InfraClusterList
    method: GET
    data_selector: items
    params: {}
- name: failureDomains
  endpoint:
    path: ''
    method: ''
    data_selector: ''
    params: {}
- name: initialization
  endpoint:
    path: ''
    method: ''
    data_selector: ''
    params: {}
- name: conditions
  endpoint:
    path: ''
    method: ''
    data_selector: ''
    params: {}
- name: FooMachine
  endpoint:
    path: /foomachines
    method: GET
- name: FooMachineList
  endpoint:
    path: /foomachineslist
    method: GET
- name: FooMachineTemplate
  endpoint:
    path: /foomachinetemplates
    method: GET
- name: FooMachineTemplateList
  endpoint:
    path: /foomachinetemplateslist
    method: GET
- name: BootstrapConfig
  endpoint:
    path: /bootstrapconfigs
    method: GET
    data_selector: items
    params: {}
- name: BootstrapConfigTemplate
  endpoint:
    path: /bootstrapconfigtemplates
    method: GET
    data_selector: items
    params: {}
- name: ControlPlane
  endpoint:
    path: /controlplane
    method: GET
    data_selector: ''
    params: {}
- name: ControlPlaneList
  endpoint:
    path: /controlplanes
    method: GET
    data_selector: ''
    params: {}
- name: FooControlPlaneMachineTemplate
  endpoint:
    path: /foocontrolplanetemplates
    method: GET
    data_selector: items
- name: FooControlPlaneTemplateList
  endpoint:
    path: /foocontrolplanetemplates
    method: GET
    data_selector: items
- name: Cluster
  endpoint:
    path: /clusters
    method: GET
    data_selector: clusters
    params: {}
- name: MachineDeployment
  endpoint:
    path: /machinedeployments
    method: GET
    data_selector: machinedeployments
    params: {}
- name: MachineSet
  endpoint:
    path: /machinesets
    method: GET
    data_selector: machinesets
    params: {}
- name: ClusterClass
  endpoint:
    path: /v1beta2/ClusterClass
    method: GET
    data_selector: items
    params: {}
- name: kubeadm_config
  endpoint:
    path: /kubeadm/config
    method: GET
    data_selector: statuses
    params: {}
- name: cluster
  endpoint:
    path: /cluster
    method: GET
    data_selector: clusters
    params: {}
- name: machine
  endpoint:
    path: /machines
    method: GET
    data_selector: machines
    params: {}
- name: cluster
  endpoint:
    path: /clusters
    method: GET
    data_selector: items
- name: machine
  endpoint:
    path: /machines
    method: GET
    data_selector: items
- name: machineset
  endpoint:
    path: /machinesets
    method: GET
    data_selector: items
- name: machinedeployment
  endpoint:
    path: /machinedeployments
    method: GET
    data_selector: items
- name: IONOSCloudCluster
  endpoint:
    path: /clusters
    method: POST
    data_selector: result
    params:
      incremental: control_plane_endpoint_ip
- name: workload_clusters
  endpoint:
    path: /workload_clusters
    method: POST
    data_selector: results
- name: KubeadmConfig
  endpoint:
    path: /kubeadmconfig
    method: POST
    data_selector: items
    params: {}
- name: DockerCluster
  endpoint:
    path: /dockercluster
    method: POST
    data_selector: items
    params: {}
- name: Machine
  endpoint:
    path: /machine
    method: POST
    data_selector: items
    params: {}
- name: MicroK8sControlPlane
  endpoint:
    path: /api/v1/MicroK8sControlPlane
    method: GET
    data_selector: spec.controlPlaneConfig
    params: {}
- name: MachineDeployment
  endpoint:
    path: /api/v1/MachineDeployment
    method: GET
    data_selector: spec
    params: {}
- name: MicroK8sConfigTemplate
  endpoint:
    path: /api/v1/MicroK8sConfigTemplate
    method: GET
    data_selector: spec.template.spec
    params: {}
- name: MachineTemplate
  endpoint:
    path: /services/data/vXX.X/sobjects/MachineTemplate
    method: POST
    data_selector: records
    params: {}
- name: KubeadmControlPlane
  endpoint:
    path: /services/data/vXX.X/sobjects/KubeadmControlPlane
    method: PATCH
    data_selector: records
    params: {}
- name: MachineDeployment
  endpoint:
    path: /api/v1/MachineDeployment
    method: GET
    data_selector: items
    params: {}
- name: MachineSet
  endpoint:
    path: /api/v1/MachineSet
    method: GET
    data_selector: items
    params: {}
- name: MachinePool
  endpoint:
    path: /api/v1/MachinePool
    method: GET
    data_selector: items
    params: {}
- name: MachineHealthCheck
  endpoint:
    path: /cluster.x-k8s.io/v1beta2/MachineHealthCheck
    method: GET
    data_selector: items
    params: {}
- name: KubeadmControlPlane
  endpoint:
    path: /cluster.x-k8s.io/v1beta2/KubeadmControlPlane
    method: GET
    data_selector: items
    params: {}
- name: Cluster
  endpoint:
    path: /api/v1/cluster
    method: POST
    data_selector: metadata
    params: {}
- name: ClusterClass
  endpoint:
    path: /api/v1/clusterclass
    method: POST
    data_selector: metadata
    params: {}
- name: docker-clusterclass
  endpoint:
    path: /clusterclass/docker-clusterclass-v0.1.0
    method: GET
    data_selector: spec
    params: {}
- name: azure-clusterclass
  endpoint:
    path: /clusterclass/azure-clusterclass-v0.1.0
    method: GET
    data_selector: spec
    params: {}
- name: cluster
  endpoint:
    path: /spec/topology
    method: PATCH
    data_selector: spec
    params: {}
- name: machine_deployment
  endpoint:
    path: /spec/topology/workers/machineDeployments
    method: PATCH
    data_selector: spec
    params: {}
- name: control_plane
  endpoint:
    path: /spec/topology/controlPlane
    method: PATCH
    data_selector: spec
    params: {}
- name: BeforeClusterCreate
  endpoint:
    path: /hooks/runtime/cluster.x-k8s.io/v1alpha1/before-cluster-create
    method: POST
    data_selector: settings
- name: AfterControlPlaneInitialized
  endpoint:
    path: /hooks/runtime/cluster.x-k8s.io/v1alpha1/after-control-plane-initialized
    method: POST
    data_selector: settings
- name: BeforeClusterUpgrade
  endpoint:
    path: /hooks/runtime/cluster.x-k8s.io/v1alpha1/before-cluster-upgrade
    method: POST
    data_selector: settings
- name: AfterControlPlaneUpgrade
  endpoint:
    path: /hooks/runtime/cluster.x-k8s.io/v1alpha1/after-control-plane-upgrade
    method: POST
    data_selector: settings
- name: AfterClusterUpgrade
  endpoint:
    path: /hooks/runtime/cluster.x-k8s.io/v1alpha1/after-cluster-upgrade
    method: POST
    data_selector: settings
- name: BeforeClusterDelete
  endpoint:
    path: /hooks/runtime/cluster.x-k8s.io/v1alpha1/before-cluster-delete
    method: POST
    data_selector: settings
- name: DiscoverVariablesRequest
  endpoint:
    path: /v1alpha1/DiscoverVariablesRequest
    method: POST
    data_selector: variables
- name: DiscoverVariablesResponse
  endpoint:
    path: /v1alpha1/DiscoverVariablesResponse
    method: GET
    data_selector: status
- name: metrics
  endpoint:
    path: /metrics
    method: GET
- name: pprof
  endpoint:
    path: /debug/pprof/*
    method: GET
- name: log_level
  endpoint:
    path: /debug/flags/v
    method: PUT
- name: podSecurityStandard
  endpoint:
    path: /spec/template/spec/kubeadmConfigSpec/clusterConfiguration/apiServer/extraArgs
    method: ADD
    data_selector: value
    params: {}
- name: extraVolumes
  endpoint:
    path: /spec/template/spec/kubeadmConfigSpec/clusterConfiguration/apiServer/extraVolumes
    method: ADD
    data_selector: value
    params: {}
- name: files
  endpoint:
    path: /spec/template/spec/kubeadmConfigSpec/files
    method: ADD
    data_selector: valueFrom
    params: {}
- name: my-infra-provider
  endpoint:
    path: https://github.com/myorg/myrepo/releases/latest/infrastructure-components.yaml
    method: GET
- name: cluster-api
  endpoint:
    path: https://github.com/myorg/myforkofclusterapi/releases/latest/core-components.yaml
    method: GET
- name: my-other-infra-provider
  endpoint:
    path: https://gitlab.example.com/api/v4/projects/myorg%2Fmyrepo/packages/generic/myrepo/v1.2.3/infrastructure-components.yaml
    method: GET
- name: kubeadm
  endpoint:
    path: https://gitlab.example.com/api/v4/projects/external-packages%2Fcluster-api/packages/generic/cluster-api/v1.1.3/bootstrap-components.yaml
    method: GET
- name: kustomize_substitutions
  endpoint:
    path: ''
    method: ''
    data_selector: ''
    params: {}
- name: Cluster
  endpoint:
    path: /clusters
    method: GET
    data_selector: items
- name: MachineDeployment
  endpoint:
    path: /machinedeployments
    method: GET
    data_selector: items
- name: MachineSet
  endpoint:
    path: /machinesets
    method: GET
    data_selector: items
- name: Machine
  endpoint:
    path: /machines
    method: GET
    data_selector: items
- name: InfrastructureMachinePool
  endpoint:
    path: /infrastructureMachinePools
    method: GET
    data_selector: items
    params: {}
- name: test
  endpoint:
    path: /test/e2e
    method: GET
    data_selector: test_records
- name: mailgun_cluster
  endpoint:
    path: /v3/mailgunclusters
    method: POST
    data_selector: data
    params: {}
- name: InfraCluster
  endpoint:
    path: /infrastructure.cluster.x-k8s.io/v1alpha1/infraclusters
    method: GET
    data_selector: items
    params: {}
- name: InfraClusterList
  endpoint:
    path: /infrastructure.cluster.x-k8s.io/v1alpha1/infraclusterlist
    method: GET
    data_selector: items
    params: {}
- name: failureDomains
  endpoint:
    path: /status/failureDomains
    method: GET
    data_selector: failureDomains
- name: initialization
  endpoint:
    path: /status/initialization
    method: GET
    data_selector: initialization
- name: conditions
  endpoint:
    path: /status/conditions
    method: GET
    data_selector: conditions
- name: FooMachine
  endpoint:
    path: /foomachines
    method: GET
    data_selector: items
- name: FooMachineList
  endpoint:
    path: /foomachines
    method: GET
    data_selector: items
- name: FooMachineTemplate
  endpoint:
    path: /foomachinetemplates
    method: GET
    data_selector: items
- name: FooMachineTemplateList
  endpoint:
    path: /foomachinetemplates
    method: GET
    data_selector: items
- name: BootstrapConfig
  endpoint:
    path: /bootstrapconfigs
    method: GET
    data_selector: items
    params: {}
- name: BootstrapConfigTemplate
  endpoint:
    path: /bootstrapconfigtemplates
    method: GET
    data_selector: items
    params: {}
- name: ControlPlane
  endpoint:
    path: /controlplane
    method: POST
    data_selector: status
    params: {}
- name: FooControlPlaneMachineTemplate
  endpoint:
    path: /foocontrolplanemachinetemplates
    method: POST
- name: FooControlPlaneTemplateList
  endpoint:
    path: /foocontrolplanetemplatelists
    method: GET
- name: Cluster
  endpoint:
    path: /clusters
    method: GET
    data_selector: items
- name: MachineDeployment
  endpoint:
    path: /machinedeployments
    method: GET
    data_selector: items
- name: MachineSet
  endpoint:
    path: /machinesets
    method: GET
    data_selector: items
- name: MachineSet
  endpoint:
    path: /v1beta2/MachineSet
    method: GET
    data_selector: conditions
    params: {}
- name: MachinePool
  endpoint:
    path: /v1beta2/MachinePool
    method: GET
    data_selector: conditions
    params: {}
- name: Machine
  endpoint:
    path: /v1beta2/Machine
    method: GET
    data_selector: conditions
    params: {}
- name: MachineHealthCheck
  endpoint:
    path: /v1beta2/MachineHealthCheck
    method: GET
    data_selector: conditions
    params: {}
- name: ClusterClass
  endpoint:
    path: /clusterclass
    method: GET
- name: KubeadmConfig
  endpoint:
    path: /kubeadmconfig
    method: GET
- name: kubeadmConfig
  endpoint:
    path: /KubeadmConfig
    method: GET
    data_selector: spec
    params: {}
- name: KubeadmControlPlane
  endpoint:
    path: /api/v1beta2/kubeadmcontrolplanes
    method: GET
- name: KubeadmControlPlaneTemplate
  endpoint:
    path: /api/v1beta2/kubeadmcontrolplanetemplates
    method: GET
- name: ClusterResourceSet
  endpoint:
    path: /api/v1beta2/clusterresourcesets
    method: GET
- name: ClusterResourceSet
  endpoint:
    path: /addons.cluster.x-k8s.io/v1beta1/ClusterResourceSet
    method: GET
- name: ClusterResourceSetBinding
  endpoint:
    path: /addons.cluster.x-k8s.io/v1beta1/ClusterResourceSetBinding
    method: GET
- name: ExtensionConfig
  endpoint:
    path: /runtime.cluster.x-k8s.io/v1beta2/ExtensionConfig
    method: GET
- name: IPAddress
  endpoint:
    path: /ipam.cluster.x-k8s.io/v1beta2/IPAddress
    method: GET
- name: IPAddressClaim
  endpoint:
    path: /ipam.cluster.x-k8s.io/v1beta2/IPAddressClaim
    method: GET
- name: cluster
  endpoint:
    path: /cluster/api/v1
    method: GET
    data_selector: items
- name: machine
  endpoint:
    path: /machine/api/v1
    method: GET
    data_selector: items
- name: machineset
  endpoint:
    path: /machineset/api/v1
    method: GET
    data_selector: items
- name: machinedeployment
  endpoint:
    path: /machinedeployment/api/v1
    method: GET
    data_selector: items
- name: IONOSCloudCluster
  endpoint:
    path: /clusterctl/init
    method: POST
    data_selector: resources
    params: {}
- name: workload_clusters
  endpoint:
    path: /RPC2
    method: POST
    data_selector: result
    params:
      MACHINE_TEMPLATE_NAME: capone131
      ROUTER_TEMPLATE_NAME: capone131-vr
      PUBLIC_NETWORK_NAME: service
      PRIVATE_NETWORK_NAME: private
      CLUSTER_NAME: one
      CCM_IMG: ghcr.io/opennebula/cloud-provider-opennebula:latest
      CONTROL_PLANE_MACHINE_COUNT: '1'
      WORKER_MACHINE_COUNT: '1'
- name: KubeadmConfig
  endpoint:
    path: /kubeadm/config
    method: POST
    data_selector: status
    params: {}
- name: DockerCluster
  endpoint:
    path: /docker/cluster
    method: POST
    data_selector: status
    params: {}
- name: Machine
  endpoint:
    path: /machine
    method: POST
    data_selector: status
    params: {}
- name: MicroK8sControlPlane
  endpoint:
    path: /api/v1beta2/controlplane.cluster.x-k8s.io/microk8scontrolplanes
    method: POST
    data_selector: spec
    params: {}
- name: MachineDeployment
  endpoint:
    path: /api/v1beta2/machinedeployments
    method: POST
    data_selector: spec
    params: {}
- name: MachineDeployment
  endpoint:
    path: /api/v1/machineDeployments
    method: POST
    data_selector: items
    params: {}
- name: MachineSet
  endpoint:
    path: /api/v1/machineSets
    method: POST
    data_selector: items
    params: {}
- name: MachineHealthCheck
  endpoint:
    path: /machinehealthcheck
    method: GET
    data_selector: items
    params:
      clusterName: capi-quickstart
      maxUnhealthy: 40%
      nodeStartupTimeout: 10m
      selector:
        matchLabels:
          nodepool: nodepool-0
      unhealthyNodeConditions:
      - type: Ready
        status: Unknown
        timeout: 300s
      - type: Ready
        status: 'False'
        timeout: 300s
- name: Cluster
  endpoint:
    path: /api/v1/namespaces/default/clusters
    method: POST
    data_selector: metadata.name
- name: ClusterClass
  endpoint:
    path: /api/v1/namespaces/default/clusterclasses
    method: POST
    data_selector: metadata.name
- name: ClusterClass
  endpoint:
    path: /clusterClasses
    method: GET
    data_selector: items
    params: {}
- name: cluster
  endpoint:
    path: /clusters
    method: PATCH
    data_selector: spec
    params: {}
- name: ExtensionConfig
  endpoint:
    path: /api/v1/namespaces/default/services/https:webhook-service:443/proxy/hooks.runtime.cluster.x-k8s.io/v1alpha1/discovery
    method: POST
    data_selector: apiVersion
    params: {}
- name: BeforeClusterCreate
  endpoint:
    path: /hooks/runtime/cluster.x-k8s.io/v1alpha1/before-cluster-create
    method: POST
    data_selector: status
    params: {}
- name: AfterControlPlaneInitialized
  endpoint:
    path: /hooks/runtime/cluster.x-k8s.io/v1alpha1/after-control-plane-initialized
    method: POST
    data_selector: status
    params: {}
- name: BeforeClusterUpgrade
  endpoint:
    path: /hooks/runtime/cluster.x-k8s.io/v1alpha1/before-cluster-upgrade
    method: POST
    data_selector: status
    params: {}
- name: AfterControlPlaneUpgrade
  endpoint:
    path: /hooks/runtime/cluster.x-k8s.io/v1alpha1/after-control-plane-upgrade
    method: POST
    data_selector: status
    params: {}
- name: AfterClusterUpgrade
  endpoint:
    path: /hooks/runtime/cluster.x-k8s.io/v1alpha1/after-cluster-upgrade
    method: POST
    data_selector: status
    params: {}
- name: BeforeClusterDelete
  endpoint:
    path: /hooks.runtime/cluster.x-k8s.io/v1alpha1/before-cluster-delete
    method: POST
    data_selector: status
    params: {}
- name: GeneratePatches
  endpoint:
    path: /hooks.runtime/cluster.x-k8s.io/v1alpha1/generate-patches
    method: POST
    data_selector: status
    params: {}
- name: ValidateTopology
  endpoint:
    path: /hooks.runtime/cluster.x-k8s.io/v1alpha1/validate-topology
    method: POST
    data_selector: status
    params: {}
- name: DiscoverVariables
  endpoint:
    path: /hooks.runtime/cluster.x-k8s.io/v1alpha1/discover-variables
    method: POST
    data_selector: status
    params: {}
- name: metrics
  endpoint:
    path: /metrics
    method: GET
    data_selector: metrics
- name: pprof
  endpoint:
    path: /debug/pprof/
    method: GET
    data_selector: profiles
- name: loglevel
  endpoint:
    path: /debug/flags/v
    method: PUT
    data_selector: log level
- name: ClusterClass
  endpoint:
    path: /cluster.x-k8s.io/v1beta2
    method: GET
    data_selector: spec.patches
    params: {}
- name: Cluster
  endpoint:
    path: /cluster.x-k8s.io/v1beta2
    method: GET
    data_selector: metadata.name
    params: {}
- name: my-infra-provider
  endpoint:
    path: https://github.com/myorg/myrepo/releases/latest/infrastructure-components.yaml
    method: GET
- name: cluster-api
  endpoint:
    path: https://github.com/myorg/myforkofclusterapi/releases/latest/core-components.yaml
    method: GET
- name: my-other-infra-provider
  endpoint:
    path: https://gitlab.example.com/api/v4/projects/myorg%2Fmyrepo/packages/generic/myrepo/v1.2.3/infrastructure-components.yaml
    method: GET
- name: kubeadm
  endpoint:
    path: https://gitlab.example.com/api/v4/projects/external-packages%2Fcluster-api/packages/generic/cluster-api/v1.1.3/bootstrap-components.yaml
    method: GET
- name: Bootstrap
  endpoint:
    path: /bootstrap
    method: GET
    data_selector: records
- name: ControlPlane
  endpoint:
    path: /controlplane
    method: GET
    data_selector: records
- name: Cluster API Provider Docker
  endpoint:
    path: /cluster-api-provider-docker
    method: GET
    data_selector: records
- name: Clusterctl CLI
  endpoint:
    path: /clusterctl
    method: GET
    data_selector: records
- name: MachineDeployment
  endpoint:
    path: /machinedeployment
    method: GET
    data_selector: records
- name: MachineSet
  endpoint:
    path: /machineset
    method: GET
    data_selector: records
- name: Machine
  endpoint:
    path: /machine
    method: GET
    data_selector: records
- name: MachinePool
  endpoint:
    path: /machinepool
    method: GET
    data_selector: records
- name: InfrastructureMachinePool
  endpoint:
    path: /infrastructureMachinePools
    method: GET
    data_selector: items
    params: {}
- name: MailgunCluster
  endpoint:
    path: /mailgunclusters
    method: POST
    data_selector: data
- name: InfraCluster
  endpoint:
    path: /infra-cluster
    method: POST
    data_selector: items
    params: {}
- name: InfraClusterList
  endpoint:
    path: /infra-cluster-list
    method: GET
    data_selector: items
    params: {}
- name: failureDomains
  endpoint:
    path: /failureDomains
    method: GET
    data_selector: status.failureDomains
- name: initialization
  endpoint:
    path: /initialization
    method: GET
    data_selector: status.initialization
- name: FooMachine
  endpoint:
    path: /foomachines
    method: GET
    data_selector: items
- name: FooMachineList
  endpoint:
    path: /foomachineslist
    method: GET
    data_selector: items
- name: FooMachineTemplate
  endpoint:
    path: /foomachinetemplates
    method: GET
    data_selector: items
- name: FooMachineTemplateList
  endpoint:
    path: /foomachinetemplateslist
    method: GET
    data_selector: items
- name: BootstrapConfig
  endpoint:
    path: /bootstrapconfig
    method: GET
    data_selector: items
    params: {}
- name: BootstrapConfigTemplate
  endpoint:
    path: /bootstrapconfigtemplates
    method: GET
    data_selector: items
    params: {}
- name: ControlPlane
  endpoint:
    path: /controlplane
    method: GET
    data_selector: items
- name: ControlPlaneList
  endpoint:
    path: /controlplanes
    method: GET
    data_selector: items
- name: FooControlPlaneTemplate
  endpoint:
    path: /foocontrolplanetemplates
    method: GET
    data_selector: items
- name: FooControlPlaneTemplateList
  endpoint:
    path: /foocontrolplanetemplates
    method: GET
    data_selector: items
- name: Cluster
  endpoint:
    path: /cluster
    method: GET
- name: MachineDeployment
  endpoint:
    path: /machinedeployment
    method: GET
- name: MachineSet
  endpoint:
    path: /machineset
    method: GET
- name: MachineSet
  endpoint:
    path: /v1beta2/MachineSet
    method: GET
    data_selector: conditions
    params: {}
- name: MachinePool
  endpoint:
    path: /v1beta2/MachinePool
    method: GET
    data_selector: conditions
    params: {}
- name: Machine
  endpoint:
    path: /v1beta2/Machine
    method: GET
    data_selector: conditions
    params: {}
- name: MachineHealthCheck
  endpoint:
    path: /v1beta2/MachineHealthCheck
    method: GET
    data_selector: conditions
    params: {}
- name: ClusterClass
  endpoint:
    path: /clusterclasses
    method: GET
    data_selector: conditions
    params: {}
- name: KubeadmConfig
  endpoint:
    path: /KubeadmConfig
    method: GET
    data_selector: items
    params: {}
- name: kubeadm_control_plane
  endpoint:
    path: /controlplane.cluster.x-k8s.io/v1beta2/kubeadmcontrolplanes
    method: GET
    data_selector: items
- name: ClusterResourceSet
  endpoint:
    path: /v1beta2/ClusterResourceSet
    method: GET
- name: ClusterResourceSetBinding
  endpoint:
    path: /v1beta2/ClusterResourceSetBinding
    method: GET
- name: ExtensionConfig
  endpoint:
    path: /v1beta2/ExtensionConfig
    method: GET
- name: IPAddress
  endpoint:
    path: /v1beta2/IPAddress
    method: GET
- name: IPAddressClaim
  endpoint:
    path: /v1beta2/IPAddressClaim
    method: GET
- name: cluster
  endpoint:
    path: /cluster
    method: GET
    data_selector: clusters
    params: {}
- name: machine
  endpoint:
    path: /machines
    method: GET
    data_selector: machines
    params: {}
- name: docker_logs
  endpoint:
    path: /docker/logs
    method: GET
    data_selector: logs
    params: {}
- name: before-upgrade.hook.cluster.cluster.x-k8s.io
  endpoint:
    path: /before-upgrade.hook.cluster.cluster.x-k8s.io
    method: GET
    data_selector: annotations
    params: {}
- name: cluster.x-k8s.io/annotations-from-machine
  endpoint:
    path: /cluster.x-k8s.io/annotations-from-machine
    method: GET
    data_selector: annotations
    params: {}
- name: cluster.x-k8s.io/cloned-from-groupkind
  endpoint:
    path: /cluster.x-k8s.io/cloned-from-groupkind
    method: GET
    data_selector: annotations
    params: {}
- name: cluster.x-k8s.io/cloned-from-name
  endpoint:
    path: /cluster.x-k8s.io/cloned-from-name
    method: GET
    data_selector: annotations
    params: {}
- name: cluster.x-k8s.io/cluster-name
  endpoint:
    path: /cluster.x-k8s.io/cluster-name
    method: GET
    data_selector: annotations
    params: {}
- name: cluster.x-k8s.io/cluster-namespace
  endpoint:
    path: /cluster.x-k8s.io/cluster-namespace
    method: GET
    data_selector: annotations
    params: {}
- name: cluster.x-k8s.io/delete-machine
  endpoint:
    path: /cluster.x-k8s.io/delete-machine
    method: GET
    data_selector: annotations
    params: {}
- name: cluster.x-k8s.io/disable-machine-create
  endpoint:
    path: /cluster.x-k8s.io/disable-machine-create
    method: GET
    data_selector: annotations
    params: {}
- name: cluster.x-k8s.io/labels-from-machine
  endpoint:
    path: /cluster.x-k8s.io/labels-from-machine
    method: GET
    data_selector: annotations
    params: {}
- name: cluster.x-k8s.io/managed-by
  endpoint:
    path: /cluster.x-k8s.io/managed-by
    method: GET
    data_selector: annotations
    params: {}
- name: cluster.x-k8s.io/machine
  endpoint:
    path: /cluster.x-k8s.io/machine
    method: GET
    data_selector: annotations
    params: {}
- name: cluster.x-k8s.io/owner-kind
  endpoint:
    path: /cluster.x-k8s.io/owner-kind
    method: GET
    data_selector: annotations
    params: {}
- name: cluster.x-k8s.io/owner-name
  endpoint:
    path: /cluster.x-k8s.io/owner-name
    method: GET
    data_selector: annotations
    params: {}
- name: cluster.x-k8s.io/paused
  endpoint:
    path: /cluster.x-k8s.io/paused
    method: GET
    data_selector: annotations
    params: {}
- name: cluster.x-k8s.io/remediate-machine
  endpoint:
    path: /cluster.x-k8s.io/remediate-machine
    method: GET
    data_selector: annotations
    params: {}
- name: cluster.x-k8s.io/replicas-managed-by
  endpoint:
    path: /cluster.x-k8s.io/replicas-managed-by
    method: GET
    data_selector: annotations
    params: {}
- name: cluster.x-k8s.io/skip-remediation
  endpoint:
    path: /cluster.x-k8s.io/skip-remediation
    method: GET
    data_selector: annotations
    params: {}
- name: clusterctl.cluster.x-k8s.io/block-move
  endpoint:
    path: /clusterctl.cluster.x-k8s.io/block-move
    method: GET
    data_selector: annotations
    params: {}
- name: clusterctl.cluster.x-k8s.io/delete-for-move
  endpoint:
    path: /clusterctl.cluster.x-k8s.io/delete-for-move
    method: GET
    data_selector: annotations
    params: {}
- name: clusterctl.cluster.x-k8s.io/skip-crd-name-preflight-check
  endpoint:
    path: /clusterctl.cluster.x-k8s.io/skip-crd-name-preflight-check
    method: GET
    data_selector: annotations
    params: {}
- name: controlplane.cluster.x-k8s.io/kubeadm-cluster-configuration
  endpoint:
    path: /controlplane.cluster.x-k8s.io/kubeadm-cluster-configuration
    method: GET
    data_selector: annotations
    params: {}
- name: controlplane.cluster.x-k8s.io/remediation-for
  endpoint:
    path: /controlplane.cluster.x-k8s.io/remediation-for
    method: GET
    data_selector: annotations
    params: {}
- name: controlplane.cluster.x-k8s.io/remediation-in-progress
  endpoint:
    path: /controlplane.cluster.x-k8s.io/remediation-in-progress
    method: GET
    data_selector: annotations
    params: {}
- name: controlplane.cluster.x-k8s.io/skip-coredns
  endpoint:
    path: /controlplane.cluster.x-k8s.io/skip-coredns
    method: GET
    data_selector: annotations
    params: {}
- name: controlplane.cluster.x-k8s.io/skip-kube-proxy
  endpoint:
    path: /controlplane.cluster.x-k8s.io/skip-kube-proxy
    method: GET
    data_selector: annotations
    params: {}
- name: crd-migration.cluster.x-k8s.io/observed-generation
  endpoint:
    path: /crd-migration.cluster.x-k8s.io/observed-generation
    method: GET
    data_selector: annotations
    params: {}
- name: machine.cluster.x-k8s.io/certificates-expiry
  endpoint:
    path: /machine.cluster.x-k8s.io/certificates-expiry
    method: GET
    data_selector: annotations
    params: {}
- name: machine.cluster.x-k8s.io/exclude-node-draining
  endpoint:
    path: /machine.cluster.x-k8s.io/exclude-node-draining
    method: GET
    data_selector: annotations
    params: {}
- name: machine.cluster.x-k8s.io/exclude-wait-for-node-volume-detach
  endpoint:
    path: /machine.cluster.x-k8s.io/exclude-wait-for-node-volume-detach
    method: GET
    data_selector: annotations
    params: {}
- name: machinedeployment.clusters.x-k8s.io/desired-replicas
  endpoint:
    path: /machinedeployment.clusters.x-k8s.io/desired-replicas
    method: GET
    data_selector: annotations
    params: {}
- name: machinedeployment.clusters.x-k8s.io/max-replicas
  endpoint:
    path: /machinedeployment.clusters.x-k8s.io/max-replicas
    method: GET
    data_selector: annotations
    params: {}
- name: machinedeployment.clusters.x-k8s.io/revision
  endpoint:
    path: /machinedeployment.clusters.x-k8s.io/revision
    method: GET
    data_selector: annotations
    params: {}
- name: machineset.cluster.x-k8s.io/skip-preflight-checks
  endpoint:
    path: /machineset.cluster.x-k8s.io/skip-preflight-checks
    method: GET
    data_selector: annotations
    params: {}
- name: pre-drain.delete.hook.machine.cluster.x-k8s.io
  endpoint:
    path: /pre-drain.delete.hook.machine.cluster.x-k8s.io
    method: GET
    data_selector: annotations
    params: {}
- name: pre-terminate.delete.hook.machine.cluster.x-k8s.io
  endpoint:
    path: /pre-terminate.delete.hook.machine.cluster.x-k8s.io
    method: GET
    data_selector: annotations
    params: {}
- name: topology.cluster.x-k8s.io/defer-upgrade
  endpoint:
    path: /topology.cluster.x-k8s.io/defer-upgrade
    method: GET
    data_selector: annotations
    params: {}
- name: topology.cluster.x-k8s.io/dry-run
  endpoint:
    path: /topology.cluster.x-k8s.io/dry-run
    method: GET
    data_selector: annotations
    params: {}
- name: topology.cluster.x-k8s.io/hold-upgrade-sequence
  endpoint:
    path: /topology.cluster.x-k8s.io/hold-upgrade-sequence
    method: GET
    data_selector: annotations
    params: {}
- name: topology.cluster.x-k8s.io/upgrade-concurrency
  endpoint:
    path: /topology.cluster.x-k8s.io/upgrade-concurrency
    method: GET
    data_selector: annotations
    params: {}
- name: unsafe.topology.cluster.x-k8s.io/disable-update-class-name-check
  endpoint:
    path: /unsafe.topology.cluster.x-k8s.io/disable-update-class-name-check
    method: GET
    data_selector: annotations
    params: {}
- name: unsafe.topology.cluster.x-k8s.io/disable-update-version-check
  endpoint:
    path: /unsafe.topology.cluster.x-k8s.io/disable-update-version-check
    method: GET
    data_selector: annotations
    params: {}
- name: OpenNebula
  endpoint:
    path: /RPC2
    method: GET
    data_selector: oneadmin:opennebula
    params: {}
- name: calico
  endpoint:
    path: /manifests/calico.yaml
    method: GET
- name: docker-creds
  endpoint:
    path: /create/secret/generic
    method: POST
- name: KubeadmConfig
  endpoint:
    path: /api/bootstrap.cluster.x-k8s.io/v1beta2/kubeadmconfig
    method: GET
    data_selector: items
    params: {}
- name: DockerCluster
  endpoint:
    path: /api/infrastructure.cluster.x-k8s.io/v1beta2/dockerclusters
    method: GET
    data_selector: items
    params: {}
- name: Machine
  endpoint:
    path: /api/cluster.x-k8s.io/v1beta2/machines
    method: GET
    data_selector: items
    params: {}
- name: MicroK8sControlPlane
  endpoint:
    path: /api/v1alpha1/microk8scontrolplanes
    method: GET
    data_selector: items
    params: {}
- name: MachineDeployment
  endpoint:
    path: /api/v1alpha1/machinedeployments
    method: GET
    data_selector: items
    params: {}
- name: MachineTemplate
  endpoint:
    path: /services/data/vXX.X/sobjects/MachineTemplate
    method: GET
- name: KubeadmControlPlane
  endpoint:
    path: /services/data/vXX.X/sobjects/KubeadmControlPlane
    method: GET
- name: MachineDeployment
  endpoint:
    path: /services/data/vXX.X/sobjects/MachineDeployment
    method: GET
- name: MachineDeployment
  endpoint:
    path: /v1alpha4/MachineDeployment
    method: GET
    data_selector: items
    params: {}
- name: MachineSet
  endpoint:
    path: /v1alpha4/MachineSet
    method: GET
    data_selector: items
    params: {}
- name: MachinePool
  endpoint:
    path: /v1alpha4/MachinePool
    method: GET
    data_selector: items
    params: {}
- name: MachineHealthCheck
  endpoint:
    path: /apis/cluster.x-k8s.io/v1beta2/machinehealthchecks
    method: GET
    data_selector: items
- name: KubeadmControlPlane
  endpoint:
    path: /apis/cluster.x-k8s.io/v1beta2/kubeadmcontrolplanes
    method: GET
    data_selector: items
- name: my-docker-cluster
  endpoint:
    path: /api/v1/clusters/my-docker-cluster
    method: GET
- name: httpProxy
  endpoint:
    path: /spec/template/spec/httpProxy/url
    method: add
    data_selector: url
- name: mdConfig
  endpoint:
    path: /spec/template/spec/customImage
    method: add
    data_selector: osImage
- name: dnsServers
  endpoint:
    path: /spec/template/spec/dnsServers
    method: add
    data_selector: dnsServers
- name: BeforeClusterCreate
  endpoint:
    path: /hooks/runtime/cluster.x-k8s.io/v1alpha1/BeforeClusterCreate
    method: POST
    data_selector: status
    params: {}
- name: AfterControlPlaneInitialized
  endpoint:
    path: /hooks/runtime/cluster.x-k8s.io/v1alpha1/AfterControlPlaneInitialized
    method: POST
    data_selector: status
    params: {}
- name: BeforeClusterUpgrade
  endpoint:
    path: /hooks/runtime/cluster.x-k8s.io/v1alpha1/BeforeClusterUpgrade
    method: POST
    data_selector: status
    params:
      fromKubernetesVersion: v1.21.2
      toKubernetesVersion: v1.22.0
- name: AfterControlPlaneUpgrade
  endpoint:
    path: /hooks/runtime/cluster.x-k8s.io/v1alpha1/AfterControlPlaneUpgrade
    method: POST
    data_selector: status
    params:
      kubernetesVersion: v1.22.0
- name: AfterClusterUpgrade
  endpoint:
    path: /hooks/runtime/cluster.x-k8s.io/v1alpha1/AfterClusterUpgrade
    method: POST
    data_selector: status
    params:
      kubernetesVersion: v1.22.0
- name: BeforeClusterDelete
  endpoint:
    path: /hooks/runtime/cluster.x-k8s.io/v1alpha1/BeforeClusterDelete
    method: POST
    data_selector: status
    params: {}
- name: GeneratePatches
  endpoint:
    path: /hooks/runtime/cluster.x-k8s.io/v1alpha1/GeneratePatches
    method: POST
    data_selector: status
    params: {}
- name: ValidateTopology
  endpoint:
    path: /hooks/runtime/cluster.x-k8s.io/v1alpha1/ValidateTopology
    method: POST
    data_selector: status
    params: {}
- name: DiscoverVariables
  endpoint:
    path: /hooks/runtime/cluster.x-k8s.io/v1alpha1/DiscoverVariables
    method: POST
    data_selector: status
    params: {}
- name: DiscoverVariablesRequest
  endpoint:
    path: /hooks/runtime/cluster/x-k8s.io/v1alpha1/discover-variables
    method: GET
    data_selector: variables
    params: {}
- name: DiscoverVariablesResponse
  endpoint:
    path: /hooks/runtime/cluster/x-k8s.io/v1alpha1/discover-variables-response
    method: GET
    data_selector: variables
    params: {}
- name: metrics
  endpoint:
    path: /metrics
    method: GET
- name: pprof
  endpoint:
    path: /debug/pprof
    method: GET
- name: loglevel
  endpoint:
    path: /debug/flags/v
    method: PUT
- name: podSecurityStandard
  endpoint:
    path: /spec/template/spec/kubeadmConfigSpec/clusterConfiguration/apiServer/extraArgs
    method: add
    data_selector: admission-control-config-file
    params:
      value: /etc/kubernetes/kube-apiserver-admission-pss.yaml
- name: extraVolumes
  endpoint:
    path: /spec/template/spec/kubeadmConfigSpec/clusterConfiguration/apiServer/extraVolumes
    method: add
    data_selector: volumes
    params:
      value:
      - name: admission-pss
        hostPath: /etc/kubernetes/kube-apiserver-admission-pss.yaml
        mountPath: /etc/kubernetes/kube-apiserver-admission-pss.yaml
        readOnly: true
        pathType: File
- name: files
  endpoint:
    path: /spec/template/spec/kubeadmConfigSpec/files
    method: add
    data_selector: content
    params:
      valueFrom:
        template:
        - content: "apiVersion: apiserver.config.k8s.io/v1\nkind: AdmissionConfiguration\n\
            plugins:\n- name: PodSecurity\n  configuration:\n    apiVersion: pod-security.admission.config.k8s.io/v1\n\
            \    kind: PodSecurityConfiguration\n    defaults:\n      enforce: \"\
            {{ .podSecurity.enforce }}\"\n      enforce-version: \"latest\"\n    \
            \  audit: \"{{ .podSecurity.audit }}\"\n      audit-version: \"latest\"\
            \n      warn: \"{{ .podSecurity.warn }}\"\n      warn-version: \"latest\"\
            \n    exemptions:\n      usernames: []\n      runtimeClasses: []\n   \
            \   namespaces: [kube-system]"
          path: /etc/kubernetes/kube-apiserver-admission-pss.yaml
- name: MachinePool
  endpoint:
    path: /infrastructure-machine-pool
    method: GET
    data_selector: spec
    params: {}
- name: Cluster
  endpoint:
    path: /api/v1/clusters
    method: GET
    data_selector: items
    params: {}
- name: MailgunCluster
  endpoint:
    path: /api/infrastructure/v1alpha1/mailgunclusters
    method: GET
    data_selector: items
    params: {}
- name: MailgunMachine
  endpoint:
    path: /api/infrastructure/v1alpha1/mailgunmachines
    method: GET
    data_selector: items
    params: {}
- name: mailgun_cluster
  endpoint:
    path: /clusters
    method: POST
    data_selector: cluster
    params: {}
- name: Cluster
  endpoint:
    path: /clusters
    method: POST
    data_selector: data
    params: {}
- name: failureDomains
  endpoint:
    path: /status/failureDomains
    method: GET
    data_selector: failureDomains
    params: {}
- name: initialization
  endpoint:
    path: /status/initialization
    method: GET
    data_selector: initialization
    params: {}
- name: conditions
  endpoint:
    path: /status/conditions
    method: GET
    data_selector: conditions
    params: {}
- name: InfraMachine
  endpoint:
    path: /foomachines
    method: GET
    data_selector: items
- name: InfraMachineList
  endpoint:
    path: /foomachineslist
    method: GET
    data_selector: items
- name: InfraMachineTemplate
  endpoint:
    path: /foomachinetemplates
    method: GET
    data_selector: items
- name: InfraMachineTemplateList
  endpoint:
    path: /foomachinetemplateslist
    method: GET
    data_selector: items
- name: BootstrapConfig
  endpoint:
    path: /bootstrapconfigs
    method: GET
    data_selector: items
    params: {}
- name: BootstrapConfigTemplate
  endpoint:
    path: /bootstrapconfigtemplates
    method: GET
    data_selector: items
    params: {}
- name: FooControlPlaneMachineTemplate
  endpoint:
    path: /foocontrolplanemachinetemplates
    method: GET
- name: MachineSet
  endpoint:
    path: /api/v1beta2/machinesets
    method: GET
    data_selector: items
- name: MachinePool
  endpoint:
    path: /api/v1beta2/machinepools
    method: GET
    data_selector: items
- name: Machine
  endpoint:
    path: /api/v1beta2/machines
    method: GET
    data_selector: items
- name: MachineHealthCheck
  endpoint:
    path: /api/v1beta2/machinehealthchecks
    method: GET
    data_selector: items
- name: ClusterClass
  endpoint:
    path: /cluster/class
    method: GET
    data_selector: conditions
- name: kubeadm_config
  endpoint:
    path: /kubeadm/configs
    method: GET
    data_selector: items
- name: management_cluster
  endpoint:
    path: /clusterctl/init
    method: POST
    data_selector: result
- name: cluster
  endpoint:
    path: /v1/clusters
    method: POST
    data_selector: clusters
    params: {}
- name: workload_clusters
  endpoint:
    path: /clusters
    method: GET
    data_selector: clusters
    params: {}
- name: KubeadmConfig
  endpoint:
    path: /kubeadmconfig
    method: GET
    data_selector: items
    params: {}
- name: DockerCluster
  endpoint:
    path: /dockercluster
    method: GET
    data_selector: items
    params: {}
- name: Machine
  endpoint:
    path: /machine
    method: GET
    data_selector: items
    params: {}
- name: MicroK8sControlPlane
  endpoint:
    path: /controlplane.cluster.x-k8s.io/v1beta1/microk8scontrolplanes
    method: GET
    data_selector: items
    params: {}
- name: MachineDeployment
  endpoint:
    path: /cluster.x-k8s.io/v1beta2/machinedeployments
    method: GET
    data_selector: items
    params: {}
- name: KubeadmControlPlane
  endpoint:
    path: /kubeadmcontrolplane
    method: GET
- name: MachineDeployment
  endpoint:
    path: /machinedeployment
    method: GET
- name: MachineHealthCheck
  endpoint:
    path: /machinehealthcheck
    method: GET
- name: MachineDeployment
  endpoint:
    path: /api/v1/MachineDeployment
    method: GET
    data_selector: items
    params: {}
- name: MachineSet
  endpoint:
    path: /api/v1/MachineSet
    method: GET
    data_selector: items
    params: {}
- name: MachinePool
  endpoint:
    path: /api/v1/MachinePool
    method: GET
    data_selector: items
    params: {}
- name: MachineHealthCheck
  endpoint:
    path: /services/data/vXX.X/sobjects/MachineHealthCheck
    method: GET
    data_selector: records
- name: KubeadmControlPlane
  endpoint:
    path: /services/data/vXX.X/sobjects/KubeadmControlPlane
    method: GET
    data_selector: records
- name: Cluster
  endpoint:
    path: /cluster
    method: POST
    data_selector: spec
    params: {}
- name: ClusterClass
  endpoint:
    path: /clusterclass
    method: POST
    data_selector: spec
    params: {}
- name: docker-clusterclass
  endpoint:
    path: /clusterclasses/docker-clusterclass-v0.1.0
    method: GET
- name: azure-clusterclass
  endpoint:
    path: /clusterclasses/azure-clusterclass-v0.1.0
    method: GET
- name: BeforeClusterCreate
  endpoint:
    path: /hooks/runtime/cluster/x-k8s.io/v1alpha1/BeforeClusterCreateRequest
    method: POST
    data_selector: settings
- name: AfterControlPlaneInitialized
  endpoint:
    path: /hooks/runtime/cluster/x-k8s.io/v1alpha1/AfterControlPlaneInitializedRequest
    method: POST
    data_selector: settings
- name: BeforeClusterUpgrade
  endpoint:
    path: /hooks/runtime/cluster/x-k8s.io/v1alpha1/BeforeClusterUpgradeRequest
    method: POST
    data_selector: settings
- name: AfterControlPlaneUpgrade
  endpoint:
    path: /hooks/runtime/cluster/x-k8s.io/v1alpha1/AfterControlPlaneUpgradeRequest
    method: POST
    data_selector: settings
- name: AfterClusterUpgrade
  endpoint:
    path: /hooks/runtime/cluster/x-k8s.io/v1alpha1/AfterClusterUpgradeRequest
    method: POST
    data_selector: settings
- name: BeforeClusterDelete
  endpoint:
    path: /hooks/runtime/cluster/x-k8s.io/v1alpha1/BeforeClusterDeleteRequest
    method: POST
    data_selector: settings
- name: DiscoverVariablesRequest
  endpoint:
    path: /hooks/runtime/cluster.x-k8s.io/v1alpha1/discover-variables
    method: POST
    data_selector: variables
    params: {}
- name: DiscoverVariablesResponse
  endpoint:
    path: /hooks/runtime/cluster.x-k8s.io/v1alpha1/discover-variables
    method: GET
    data_selector: status
    params: {}
- name: metrics
  endpoint:
    path: /metrics
    method: GET
- name: pprof
  endpoint:
    path: /debug/pprof
    method: GET
- name: loglevel
  endpoint:
    path: /debug/flags/v
    method: PUT
- name: ClusterClass
  endpoint:
    path: /cluster.x-k8s.io/v1beta2/ClusterClass
    method: GET
    data_selector: items
- name: Cluster
  endpoint:
    path: /cluster.x-k8s.io/v1beta2/Cluster
    method: GET
    data_selector: items
- name: my-infra-provider
  endpoint:
    path: https://github.com/myorg/myrepo/releases/latest/infrastructure-components.yaml
    method: GET
- name: cluster-api
  endpoint:
    path: https://github.com/myorg/myforkofclusterapi/releases/latest/core-components.yaml
    method: GET
- name: my-other-infra-provider
  endpoint:
    path: https://gitlab.example.com/api/v4/projects/myorg%2Fmyrepo/packages/generic/myrepo/v1.2.3/infrastructure-components.yaml
    method: GET
- name: kubeadm
  endpoint:
    path: https://gitlab.example.com/api/v4/projects/external-packages%2Fcluster-api/packages/generic/cluster-api/v1.1.3/bootstrap-components.yaml
    method: GET
- name: machine_pool
  endpoint:
    path: /infrastructure/machine_pool
    method: GET
    data_selector: status
    params: {}
- name: mailgun_cluster
  endpoint:
    path: /clusters
    method: POST
    data_selector: response
    params: {}
- name: InfraCluster
  endpoint:
    path: /infrastructure.cluster.x-k8s.io/v1beta2/infraclusters
    method: GET
    data_selector: items
- name: InfraClusterList
  endpoint:
    path: /infrastructure.cluster.x-k8s.io/v1beta2/infraclusterlists
    method: GET
    data_selector: items
- name: failureDomains
  endpoint:
    path: /status/failureDomains
    method: GET
    data_selector: failureDomains
- name: initialization
  endpoint:
    path: /status/initialization
    method: GET
    data_selector: initialization
- name: conditions
  endpoint:
    path: /status/conditions
    method: GET
    data_selector: conditions
- name: FooMachine
  endpoint:
    path: /foomachines
    method: GET
- name: FooMachineList
  endpoint:
    path: /foomachines
    method: GET
- name: FooMachineTemplate
  endpoint:
    path: /foomachinetemplates
    method: GET
- name: FooMachineTemplateList
  endpoint:
    path: /foomachinetemplates
    method: GET
- name: BootstrapConfig
  endpoint:
    path: /bootstrapconfigs
    method: POST
    data_selector: items
    params: {}
- name: BootstrapConfigTemplate
  endpoint:
    path: /bootstrapconfigtemplates
    method: POST
    data_selector: items
    params: {}
- name: ControlPlane
  endpoint:
    path: /controlplane
    method: GET
    data_selector: items
- name: ControlPlaneList
  endpoint:
    path: /controlplanelist
    method: GET
    data_selector: items
- name: FooControlPlaneMachineTemplate
  endpoint:
    path: /foocontrolplanemachinetemplates
    method: GET
- name: FooControlPlaneTemplateList
  endpoint:
    path: /foocontrolplanetemplatelists
    method: GET
- name: ClusterClass
  endpoint:
    path: /clusterClass
    method: GET
    data_selector: conditions
    params: {}
- name: kubeadm_config
  endpoint:
    path: /kubeadm/config
    method: GET
    data_selector: status.v1beta2.conditions
- name: management_cluster
  endpoint:
    path: /cluster-api/management
    method: POST
    data_selector: data
    params: {}
- name: workload_cluster
  endpoint:
    path: /workload_clusters
    method: POST
    data_selector: cluster
    params: {}
- name: KubeadmConfig
  endpoint:
    path: /kubeadm/config
    method: POST
    data_selector: config
- name: DockerCluster
  endpoint:
    path: /docker/cluster
    method: POST
    data_selector: cluster
- name: Machine
  endpoint:
    path: /machine
    method: POST
    data_selector: machine
- name: MicroK8sControlPlane
  endpoint:
    path: /controlplane.cluster.x-k8s.io/v1beta1/MicroK8sControlPlane
    method: POST
    data_selector: spec
    params: {}
- name: MachineDeployment
  endpoint:
    path: /cluster.x-k8s.io/v1beta2/MachineDeployment
    method: POST
    data_selector: spec
    params: {}
- name: MicroK8sConfigTemplate
  endpoint:
    path: /bootstrap.cluster.x-k8s.io/v1beta1/MicroK8sConfigTemplate
    method: POST
    data_selector: spec
    params: {}
- name: MachineTemplate
  endpoint:
    path: /services/data/vXX.X/sobjects/MachineTemplate
    method: POST
    data_selector: records
- name: KubeadmControlPlane
  endpoint:
    path: /services/data/vXX.X/sobjects/KubeadmControlPlane
    method: GET
    data_selector: records
- name: MachineDeployment
  endpoint:
    path: /api/v1/MachineDeployments
    method: GET
    data_selector: items
    params: {}
- name: capi-quickstart-node-unhealthy-5m
  endpoint:
    path: /apis/cluster.x-k8s.io/v1beta2/machinehealthchecks
    method: POST
    data_selector: spec
    params: {}
- name: capi-quickstart-kcp-unhealthy-5m
  endpoint:
    path: /apis/cluster.x-k8s.io/v1beta2/machinehealthchecks
    method: POST
    data_selector: spec
    params: {}
- name: cluster
  endpoint:
    path: /cluster
    method: GET
    data_selector: spec.topology
    params: {}
- name: clusterclass
  endpoint:
    path: /clusterclass
    method: GET
    data_selector: spec.topology
    params: {}
- name: ClusterClass
  endpoint:
    path: /cluster-class
    method: GET
    data_selector: items
    params: {}
- name: ExtensionConfig
  endpoint:
    path: /runtime.cluster.x-k8s.io/v1alpha1/ExtensionConfig
    method: POST
    data_selector: spec
    params: {}
- name: BeforeClusterCreate
  endpoint:
    path: /hooks/runtime/cluster.x-k8s.io/v1alpha1/BeforeClusterCreate
    method: POST
- name: AfterControlPlaneInitialized
  endpoint:
    path: /hooks/runtime/cluster.x-k8s.io/v1alpha1/AfterControlPlaneInitialized
    method: POST
- name: BeforeClusterUpgrade
  endpoint:
    path: /hooks/runtime/cluster.x-k8s.io/v1alpha1/BeforeClusterUpgrade
    method: POST
- name: AfterControlPlaneUpgrade
  endpoint:
    path: /hooks/runtime/cluster.x-k8s.io/v1alpha1/AfterControlPlaneUpgrade
    method: POST
- name: AfterClusterUpgrade
  endpoint:
    path: /hooks/runtime/cluster.x-k8s.io/v1alpha1/AfterClusterUpgrade
    method: POST
- name: BeforeClusterDelete
  endpoint:
    path: /hooks/runtime/cluster.x-k8s.io/v1alpha1/BeforeClusterDelete
    method: POST
- name: DiscoverVariablesRequest
  endpoint:
    path: /hooks/runtime/cluster/v1alpha1/discover-variables
    method: POST
    data_selector: variables
- name: DiscoverVariablesResponse
  endpoint:
    path: /hooks/runtime/cluster/v1alpha1/discover-variables-response
    method: GET
    data_selector: variables
- name: metrics
  endpoint:
    path: /metrics
    method: GET
- name: pprof
  endpoint:
    path: /debug/pprof/
    method: GET
- name: log_level
  endpoint:
    path: /debug/flags/v
    method: PUT
- name: podSecurityStandard
  endpoint:
    path: /spec/template/spec/kubeadmConfigSpec/clusterConfiguration/apiServer/extraArgs
    method: add
    data_selector: value
    params: {}
- name: extraVolumes
  endpoint:
    path: /spec/template/spec/kubeadmConfigSpec/clusterConfiguration/apiServer/extraVolumes
    method: add
    data_selector: value
    params: {}
- name: files
  endpoint:
    path: /spec/template/spec/kubeadmConfigSpec/files
    method: add
    data_selector: valueFrom
    params: {}
- name: my-infra-provider
  endpoint:
    path: https://github.com/myorg/myrepo/releases/latest/infrastructure-components.yaml
    method: GET
- name: cluster-api
  endpoint:
    path: https://github.com/myorg/myforkofclusterapi/releases/latest/core-components.yaml
    method: GET
- name: my-other-infra-provider
  endpoint:
    path: https://gitlab.example.com/api/v4/projects/myorg%2Fmyrepo/packages/generic/myrepo/v1.2.3/infrastructure-components.yaml
    method: GET
- name: kubeadm
  endpoint:
    path: https://gitlab.example.com/api/v4/projects/external-packages%2Fcluster-api/packages/generic/cluster-api/v1.1.3/bootstrap-components.yaml
    method: GET
- name: kustomize_substitutions
  endpoint:
    path: /kustomize/substitutions
    method: POST
    data_selector: substitutions
    params: {}
- name: Bootstrap
  endpoint:
    path: /bootstrap
    method: GET
- name: ControlPlane
  endpoint:
    path: /controlplane
    method: GET
- name: Cluster API Provider Docker
  endpoint:
    path: /cluster-api-provider-docker
    method: GET
- name: Clusterctl CLI
  endpoint:
    path: /clusterctl
    method: GET
- name: Manifest Generation
  endpoint:
    path: /manifest-generation
    method: GET
- name: Controllers
  endpoint:
    path: /controllers
    method: GET
- name: Documentation
  endpoint:
    path: /documentation
    method: GET
- name: Tools
  endpoint:
    path: /tools
    method: GET
- name: Util, Feature and Errors
  endpoint:
    path: /util-feature-errors
    method: GET
- name: Experimental features
  endpoint:
    path: /experimental-features
    method: GET
- name: Webhooks
  endpoint:
    path: /webhooks
    method: GET
- name: InfrastructureMachinePool
  endpoint:
    path: /infrastructure/machinepool
    method: GET
    data_selector: status
    params: {}
- name: MailgunCluster
  endpoint:
    path: /v1/mailgunclusters
    method: POST
    data_selector: data
- name: InfraCluster
  endpoint:
    path: /infrastructure.cluster.x-k8s.io/v1alpha1/infraclusters
    method: GET
    data_selector: items
- name: InfraClusterList
  endpoint:
    path: /infrastructure.cluster.x-k8s.io/v1alpha1/infraclusterlists
    method: GET
    data_selector: items
- name: FooClusterStatus
  endpoint:
    path: /FooClusterStatus
    method: GET
    data_selector: status.failureDomains
    params: {}
- name: FooClusterInitializationStatus
  endpoint:
    path: /FooClusterInitializationStatus
    method: GET
    data_selector: initialization.provisioned
    params: {}
- name: FooMachine
  endpoint:
    path: /foomachines
    method: GET
- name: FooMachineList
  endpoint:
    path: /foomachines
    method: GET
- name: FooMachineTemplate
  endpoint:
    path: /foomachinetemplates
    method: GET
- name: FooMachineTemplateList
  endpoint:
    path: /foomachinetemplates
    method: GET
- name: BootstrapConfig
  endpoint:
    path: /bootstrapconfigs
    method: GET
    data_selector: items
    params: {}
- name: BootstrapConfigTemplate
  endpoint:
    path: /bootstrapconfigtemplates
    method: GET
    data_selector: items
    params: {}
- name: ControlPlane
  endpoint:
    path: /controlplane
    method: POST
    data_selector: status
    params: {}
- name: Machine
  endpoint:
    path: /machine
    method: GET
    data_selector: items
    params: {}
- name: FooControlPlaneMachineTemplate
  endpoint:
    path: /foocontrolplanemachinetemplates
    method: GET
    data_selector: items
- name: FooControlPlaneTemplateList
  endpoint:
    path: /foocontrolplanetemplatelists
    method: GET
    data_selector: items
- name: MachineSet
  endpoint:
    path: /v1beta2/MachineSet
    method: GET
    data_selector: conditions
    params: {}
- name: MachinePool
  endpoint:
    path: /v1beta2/MachinePool
    method: GET
    data_selector: conditions
    params: {}
- name: Machine
  endpoint:
    path: /v1beta2/Machine
    method: GET
    data_selector: conditions
    params: {}
- name: MachineHealthCheck
  endpoint:
    path: /v1beta2/MachineHealthCheck
    method: GET
    data_selector: conditions
    params: {}
- name: ClusterClass
  endpoint:
    path: /clusterclass
    method: GET
    data_selector: conditions
    params: {}
- name: kubeadm_config
  endpoint:
    path: /kubeadm/config
    method: GET
- name: Cluster
  endpoint:
    path: /cluster/capi-quickstart
    method: GET
    data_selector: status
    params: {}
- name: Machine
  endpoint:
    path: /machine/capi-quickstart-6587k
    method: GET
    data_selector: conditions
    params: {}
- name: management_cluster
  endpoint:
    path: /clusterctl/init
    method: POST
- name: OpenNebula
  endpoint:
    path: /RPC2
    method: POST
    data_selector: response
    params:
      ONE_XMLRPC: http://10.2.11.40:2633/RPC2
      ONE_AUTH: oneadmin:opennebula
- name: MicroK8sControlPlane
  endpoint:
    path: /api/v1/MicroK8sControlPlane
    method: POST
    data_selector: spec
    params: {}
- name: MachineDeployment
  endpoint:
    path: /api/v1/MachineDeployment
    method: POST
    data_selector: spec
    params: {}
- name: MachineDeployment
  endpoint:
    params:
      annotations:
        cluster.x-k8s.io/cluster-api-autoscaler-node-group-max-size: '5'
        cluster.x-k8s.io/cluster-api-autoscaler-node-group-min-size: '0'
        capacity.cluster-autoscaler.kubernetes.io/memory: 128G
        capacity.cluster-autoscaler.kubernetes.io/cpu: '16'
        capacity.cluster-autoscaler.kubernetes.io/ephemeral-disk: 100Gi
        capacity.cluster-autoscaler.kubernetes.io/maxPods: '200'
        capacity.cluster-autoscaler.kubernetes.io/gpu-type: nvidia.com/gpu
        capacity.cluster-autoscaler.kubernetes.io/gpu-count: '2'
- name: MachineSet
  endpoint:
    params:
      annotations:
        cluster.x-k8s.io/cluster-api-autoscaler-node-group-max-size: '5'
        cluster.x-k8s.io/cluster-api-autoscaler-node-group-min-size: '0'
        capacity.cluster-autoscaler.kubernetes.io/memory: 128G
        capacity.cluster-autoscaler.kubernetes.io/cpu: '16'
        capacity.cluster-autoscaler.kubernetes.io/maxPods: '200'
- name: MachineHealthCheck
  endpoint:
    path: /api/v1beta2/machinehealthchecks
    method: POST
    data_selector: status
    params: {}
- name: KubeadmControlPlane
  endpoint:
    path: /api/v1beta2/kubeadmcontrolplanes
    method: POST
    data_selector: status
    params: {}
- name: Cluster
  endpoint:
    path: /cluster
    method: GET
    data_selector: spec
    params: {}
- name: ClusterClass
  endpoint:
    path: /clusterclass
    method: GET
    data_selector: spec
    params: {}
- name: docker-clusterclass
  endpoint:
    path: /clusterclasses/docker-clusterclass-v0.1.0
    method: GET
    data_selector: spec
    params: {}
- name: azure-clusterclass
  endpoint:
    path: /clusterclasses/azure-clusterclass-v0.1.0
    method: GET
    data_selector: spec
    params: {}
- name: ExtensionConfig
  endpoint:
    path: /api/v1/namespaces/default/services/https:webhook-service:443/proxy/hooks.runtime.cluster.x-k8s.io/v1alpha1/discovery
    method: POST
    data_selector: apiVersion
    params: {}
- name: BeforeClusterCreateRequest
  endpoint:
    path: /before-cluster-create
    method: POST
    data_selector: status
    params: {}
- name: AfterControlPlaneInitializedRequest
  endpoint:
    path: /after-control-plane-initialized
    method: POST
    data_selector: status
    params: {}
- name: BeforeClusterUpgradeRequest
  endpoint:
    path: /before-cluster-upgrade
    method: POST
    data_selector: status
    params: {}
- name: AfterControlPlaneUpgradeRequest
  endpoint:
    path: /after-control-plane-upgrade
    method: POST
    data_selector: status
    params: {}
- name: AfterClusterUpgradeRequest
  endpoint:
    path: /after-cluster-upgrade
    method: POST
    data_selector: status
    params: {}
- name: BeforeClusterDeleteRequest
  endpoint:
    path: /before-cluster-delete
    method: POST
    data_selector: status
    params: {}
- name: DiscoverVariablesRequest
  endpoint:
    path: /hooks/runtime/cluster/x-k8s.io/v1alpha1/DiscoverVariablesRequest
    method: GET
    data_selector: variables
    params: {}
- name: DiscoverVariablesResponse
  endpoint:
    path: /hooks/runtime/cluster/x-k8s.io/v1alpha1/DiscoverVariablesResponse
    method: GET
    data_selector: variables
    params: {}
- name: metrics
  endpoint:
    path: /metrics
    method: GET
    data_selector: data
    params: {}
- name: pprof
  endpoint:
    path: /debug/pprof/*
    method: GET
    data_selector: data
    params: {}
- name: log_level
  endpoint:
    path: /debug/flags/v
    method: PUT
    data_selector: data
    params: {}
- name: cluster
  endpoint:
    path: /api/v1beta2/clusters
    method: GET
    data_selector: items
    params: {}
- name: kubeadmControlPlaneTemplate
  endpoint:
    path: /api/v1beta1/kubeadmcontrolplanetemplates
    method: GET
    data_selector: items
    params: {}
- name: my-infra-provider
  endpoint:
    path: https://github.com/myorg/myrepo/releases/latest/infrastructure-components.yaml
    method: GET
- name: cluster-api
  endpoint:
    path: https://github.com/myorg/myforkofclusterapi/releases/latest/core-components.yaml
    method: GET
- name: my-other-infra-provider
  endpoint:
    path: https://gitlab.example.com/api/v4/projects/myorg%2Fmyrepo/packages/generic/myrepo/v1.2.3/infrastructure-components.yaml
    method: GET
- name: kubeadm
  endpoint:
    path: https://gitlab.example.com/api/v4/projects/external-packages%2Fcluster-api/packages/generic/cluster-api/v1.1.3/bootstrap-components.yaml
    method: GET
- name: kind-cluster
  endpoint:
    path: /kind-cluster
    method: POST
- name: docker
  endpoint:
    path: /docker
    method: POST
- name: kustomize_substitutions
  endpoint:
    path: kustomize_substitutions
    method: POST
- name: Cluster
  endpoint:
    path: /clusters
    method: GET
- name: MachineDeployment
  endpoint:
    path: /machinedeployments
    method: GET
- name: MachineSet
  endpoint:
    path: /machinesets
    method: GET
- name: Machine
  endpoint:
    path: /machines
    method: GET
- name: MachinePool
  endpoint:
    path: /machinepools
    method: GET
- name: InfrastructureMachinePool
  endpoint:
    path: /infrastructureMachinePool
    method: GET
    data_selector: spec
    params: {}
- name: fuzz_testing_for_api_conversion
  endpoint:
    path: /fuzz-testing-for-api-conversion
    method: GET
    data_selector: records
    params: {}
- name: oss_fuzz_continuous_fuzzing
  endpoint:
    path: /oss-fuzz-continuous-fuzzing
    method: GET
    data_selector: records
    params: {}
- name: test_maintainability
  endpoint:
    path: /test-maintainability
    method: GET
    data_selector: records
    params: {}
- name: running_unit_and_integration_tests
  endpoint:
    path: /running-unit-and-integration-tests
    method: GET
    data_selector: records
    params: {}
- name: end_to_end_tests
  endpoint:
    path: /end-to-end-tests
    method: GET
    data_selector: records
    params: {}
- name: running_specific_tests
  endpoint:
    path: /running-specific-tests
    method: GET
    data_selector: records
    params: {}
- name: MailgunCluster
  endpoint:
    path: /clusters
    method: POST
    data_selector: clusters
- name: InfraCluster
  endpoint:
    path: /infrastructure.cluster.x-k8s.io/v1alpha1/infraclusters
    method: GET
    data_selector: items
    params: {}
- name: FooCluster
  endpoint:
    path: /infrastructure.foo.com/v1/fooclusters
    method: GET
    data_selector: items
    params: {}
- name: FooMachine
  endpoint:
    path: /foomachines
    method: GET
    data_selector: items
- name: FooMachineList
  endpoint:
    path: /foomachines
    method: GET
    data_selector: items
- name: FooMachineTemplate
  endpoint:
    path: /foomachinetemplates
    method: GET
    data_selector: items
- name: FooMachineTemplateList
  endpoint:
    path: /foomachinetemplates
    method: GET
    data_selector: items
- name: BootstrapConfig
  endpoint:
    path: /bootstrapconfig
    method: POST
    data_selector: items
    params: {}
- name: BootstrapConfigTemplate
  endpoint:
    path: /bootstrapconfigtemplates
    method: POST
    data_selector: items
    params: {}
- name: ControlPlane
  endpoint:
    path: /controlplane
    method: POST
    data_selector: items
- name: ControlPlaneList
  endpoint:
    path: /controlplanes
    method: GET
    data_selector: items
- name: FooControlPlaneMachineTemplate
  endpoint:
    path: /foocontrolplanemachinetemplates
    method: GET
- name: Cluster
  endpoint:
    path: /api/v1beta2/clusters
    method: GET
    data_selector: items
- name: MachineDeployment
  endpoint:
    path: /api/v1beta2/machinedeployments
    method: GET
    data_selector: items
- name: MachineSet
  endpoint:
    path: /api/v1beta2/machinesets
    method: GET
    data_selector: items
- name: ClusterClass
  endpoint:
    path: /clusterclasses
    method: GET
    data_selector: items
    params: {}
- name: KubeadmControlPlane
  endpoint:
    path: /controlplane.cluster.x-k8s.io/v1beta2/kubeadmcontrolplanes
    method: GET
- name: Cluster
  endpoint:
    path: /cluster
    method: GET
    data_selector: status
    params: {}
- name: Machine
  endpoint:
    path: /machines
    method: GET
    data_selector: status
    params: {}
- name: instances
  endpoint:
    path: /RPC2
    method: POST
    data_selector: result
    params: {}
- name: KubeadmConfig
  endpoint:
    path: /api/bootstrap.cluster.x-k8s.io/v1beta2/kubeadmconfigs
    method: GET
    data_selector: items
    params: {}
- name: DockerCluster
  endpoint:
    path: /api/infrastructure.cluster.x-k8s.io/v1beta2/dockerclusters
    method: GET
    data_selector: items
    params: {}
- name: Machine
  endpoint:
    path: /api/cluster.x-k8s.io/v1beta2/machines
    method: GET
    data_selector: items
    params: {}
- name: MicroK8sControlPlane
  endpoint:
    path: /api/v1/MicroK8sControlPlane
    method: POST
    data_selector: spec
    params: {}
- name: MachineDeployment
  endpoint:
    path: /api/v1/MachineDeployment
    method: POST
    data_selector: spec
    params: {}
- name: MicroK8sConfigTemplate
  endpoint:
    path: /api/v1/MicroK8sConfigTemplate
    method: POST
    data_selector: spec
    params: {}
- name: MachineDeployment
  endpoint:
    path: /MachineDeployment
    method: GET
- name: KubeadmConfig
  endpoint:
    path: /KubeadmConfig
    method: GET
- name: MachineDeployment
  endpoint:
    path: /v1beta1/machinedeployments
    method: GET
    data_selector: items
    params: {}
- name: MachineSet
  endpoint:
    path: /v1beta1/machinesets
    method: GET
    data_selector: items
    params: {}
- name: MachinePool
  endpoint:
    path: /v1beta1/machinepools
    method: GET
    data_selector: items
    params: {}
- name: MachineHealthCheck
  endpoint:
    path: /api/v1beta2/machinehealthchecks
    method: GET
    data_selector: items
    params: {}
- name: KubeadmControlPlane
  endpoint:
    path: /api/v1beta2/kubeadmcontrolplanes
    method: GET
    data_selector: items
    params: {}
- name: Cluster
  endpoint:
    path: /clusters
    method: GET
    data_selector: items
    params: {}
- name: ClusterClass
  endpoint:
    path: /clusterclasses
    method: GET
    data_selector: items
    params: {}
- name: docker-clusterclass
  endpoint:
    path: /clusterclass/docker-clusterclass-v0.1.0
    method: GET
- name: azure-clusterclass
  endpoint:
    path: /clusterclass/azure-clusterclass-v0.1.0
    method: GET
- name: cluster
  endpoint:
    path: /clusters
    method: PATCH
    data_selector: spec
    params: {}
- name: BeforeClusterCreate
  endpoint:
    path: /hooks.runtime.cluster.x-k8s.io/v1alpha1/BeforeClusterCreate
    method: POST
    data_selector: status
    params: {}
- name: AfterControlPlaneInitialized
  endpoint:
    path: /hooks.runtime.cluster.x-k8s.io/v1alpha1/AfterControlPlaneInitialized
    method: POST
    data_selector: status
    params: {}
- name: BeforeClusterUpgrade
  endpoint:
    path: /hooks.runtime.cluster.x-k8s.io/v1alpha1/BeforeClusterUpgrade
    method: POST
    data_selector: status
    params: {}
- name: AfterControlPlaneUpgrade
  endpoint:
    path: /hooks.runtime.cluster.x-k8s.io/v1alpha1/AfterControlPlaneUpgrade
    method: POST
    data_selector: status
    params: {}
- name: AfterClusterUpgrade
  endpoint:
    path: /hooks.runtime.cluster.x-k8s.io/v1alpha1/AfterClusterUpgrade
    method: POST
    data_selector: status
    params: {}
- name: BeforeClusterDelete
  endpoint:
    path: /hooks.runtime.cluster.x-k8s.io/v1alpha1/BeforeClusterDelete
    method: POST
    data_selector: status
    params: {}
- name: GeneratePatches
  endpoint:
    path: /hooks.runtime.cluster.x-k8s.io/v1alpha1/GeneratePatches
    method: POST
    data_selector: status
    params: {}
- name: ValidateTopology
  endpoint:
    path: /hooks.runtime.cluster.x-k8s.io/v1alpha1/ValidateTopology
    method: POST
    data_selector: status
    params: {}
- name: metrics
  endpoint:
    path: /metrics
    method: GET
    data_selector: metrics
    params: {}
- name: pprof
  endpoint:
    path: /debug/pprof/
    method: GET
    data_selector: pprof
    params: {}
- name: log_level
  endpoint:
    path: /debug/flags/v
    method: PUT
    data_selector: log_level
    params: {}
- name: podSecurityStandard
  endpoint:
    path: /spec/template/spec/kubeadmConfigSpec/clusterConfiguration/apiServer/extraArgs
    method: add
    data_selector: value
    params: {}
- name: extraVolumes
  endpoint:
    path: /spec/template/spec/kubeadmConfigSpec/clusterConfiguration/apiServer/extraVolumes
    method: add
    data_selector: value
    params: {}
- name: files
  endpoint:
    path: /spec/template/spec/kubeadmConfigSpec/files
    method: add
    data_selector: valueFrom.template
    params: {}
- name: infrastructure-aws
  endpoint:
    path: /infrastructure-components.yaml
    method: GET
    data_selector: components
- name: bootstrap-kubeadm
  endpoint:
    path: /bootstrap-components.yaml
    method: GET
    data_selector: components
- name: control-plane-kubeadm
  endpoint:
    path: /control-plane-components.yaml
    method: GET
    data_selector: components
- name: cluster-api
  endpoint:
    path: /core-components.yaml
    method: GET
    data_selector: components
- name: infrastructure-docker
  endpoint:
    path: /infrastructure-components.yaml
    method: GET
    data_selector: components
- name: InfrastructureMachinePool
  endpoint:
    path: ''
    method: ''
    data_selector: ''
    params: {}
- name: MailgunCluster
  endpoint:
    path: /v1/mailgunclusters
    method: POST
    data_selector: response
    params: {}
- name: InfraCluster
  endpoint:
    path: /infra-cluster
    method: POST
    data_selector: items
    params: {}
- name: InfraClusterList
  endpoint:
    path: /infra-cluster-list
    method: GET
    data_selector: items
    params: {}
- name: failureDomains
  endpoint:
    path: /status/failureDomains
    method: GET
    data_selector: status.failureDomains
- name: initialization
  endpoint:
    path: /status/initialization
    method: GET
    data_selector: status.initialization
- name: conditions
  endpoint:
    path: /status/conditions
    method: GET
    data_selector: status.conditions
- name: FooMachine
  endpoint:
    path: /foomachines
    method: GET
- name: FooMachineList
  endpoint:
    path: /foomachines
    method: GET
- name: FooMachineTemplate
  endpoint:
    path: /foomachinetemplates
    method: GET
- name: FooMachineTemplateList
  endpoint:
    path: /foomachinetemplates
    method: GET
- name: BootstrapConfig
  endpoint:
    path: /bootstrapconfig
    method: POST
    data_selector: metadata
    params: {}
- name: BootstrapConfigTemplate
  endpoint:
    path: /bootstrapconfigtemplates
    method: POST
    data_selector: metadata
    params: {}
- name: ControlPlane
  endpoint:
    path: /controlplane
    method: GET
    data_selector: ''
    params: {}
- name: ControlPlaneList
  endpoint:
    path: /controlplanes
    method: GET
    data_selector: ''
    params: {}
- name: FooControlPlaneMachineTemplate
  endpoint:
    path: /foocontrolplanemachinetemplates
    method: GET
- name: FooControlPlaneTemplateList
  endpoint:
    path: /foocontrolplanetemplates
    method: GET
- name: Cluster
  endpoint:
    path: /cluster
    method: GET
    data_selector: items
    params: {}
- name: MachineDeployment
  endpoint:
    path: /machinedeployment
    method: GET
    data_selector: items
    params: {}
- name: MachineSet
  endpoint:
    path: /machineset
    method: GET
    data_selector: items
    params: {}
- name: MachineSet
  endpoint:
    path: /api/v1beta2/machinesets
    method: GET
    data_selector: items
- name: MachinePool
  endpoint:
    path: /api/v1beta2/machinepools
    method: GET
    data_selector: items
- name: Machine
  endpoint:
    path: /api/v1beta2/machines
    method: GET
    data_selector: items
- name: MachineHealthCheck
  endpoint:
    path: /api/v1beta2/machinehealthchecks
    method: GET
    data_selector: items
- name: ClusterClass
  endpoint:
    path: /cluster-classes
    method: GET
    data_selector: items
- name: clusterConfiguration
  endpoint:
    path: /bootstrap/cluster.x-k8s.io/v1beta2
    method: GET
    data_selector: conditions
    params: {}
- name: kubeadmControlPlane
  endpoint:
    path: /kubeadmcontrolplanes
    method: GET
- name: IONOSCloudCluster
  endpoint:
    path: /services/data/vXX.X/sobjects/IONOSCloudCluster
    method: GET
- name: workload_cluster
  endpoint:
    path: /images/ironic-python-agent.kernel
    method: GET
    data_selector: images
    params: {}
- name: KubeadmConfig
  endpoint:
    path: /api/bootstrap.cluster.x-k8s.io/v1beta2/kubeadmconfigs
    method: GET
    data_selector: items
    params: {}
- name: Cluster
  endpoint:
    path: /apis/cluster.x-k8s.io/v1beta2/clusters
    method: GET
    data_selector: items
    params: {}
- name: DockerCluster
  endpoint:
    path: /apis/infrastructure.cluster.x-k8s.io/v1beta2/dockerclusters
    method: GET
    data_selector: items
    params: {}
- name: Machine
  endpoint:
    path: /apis/cluster.x-k8s.io/v1beta2/machines
    method: GET
    data_selector: items
    params: {}
- name: MicroK8sControlPlane
  endpoint:
    path: /api/v1/microk8s/controlplane
    method: GET
    data_selector: items
    params: {}
- name: MachineDeployment
  endpoint:
    path: /api/v1/microk8s/machinedeployment
    method: GET
    data_selector: items
    params: {}
- name: MachineDeployment
  endpoint:
    path: /api/v1alpha4/machinedeployments
    method: GET
    data_selector: items
    params: {}
- name: MachineSet
  endpoint:
    path: /api/v1alpha4/machinesets
    method: GET
    data_selector: items
    params: {}
- name: MachinePool
  endpoint:
    path: /api/v1alpha4/machinepools
    method: GET
    data_selector: items
    params: {}
- name: Cluster
  endpoint:
    path: /api/v1beta1/clusters
    method: GET
    data_selector: items
    params: {}
- name: MachineHealthCheck
  endpoint:
    path: /apis/cluster.x-k8s.io/v1beta2/machinehealthchecks
    method: GET
    data_selector: items
    params: {}
- name: KubeadmControlPlane
  endpoint:
    path: /apis/cluster.x-k8s.io/v1beta2/kubeadmcontrolplanes
    method: GET
    data_selector: items
    params: {}
- name: MachinePool
  endpoint:
    path: /tasks/experimental-features/machine-pools
    method: GET
    data_selector: records
- name: MachineSetPreflightChecks
  endpoint:
    path: /tasks/experimental-features/machineset-preflight-checks
    method: GET
    data_selector: records
- name: ClusterClass
  endpoint:
    path: /tasks/experimental-features/cluster-class
    method: GET
    data_selector: records
- name: Cluster
  endpoint:
    path: /clusters
    method: GET
    data_selector: items
- name: ClusterClass
  endpoint:
    path: /clusterclasses
    method: GET
    data_selector: items
- name: docker-clusterclass
  endpoint:
    path: /clusterclasses/docker-clusterclass-v0.1.0
    method: GET
- name: azure-clusterclass
  endpoint:
    path: /clusterclasses/azure-clusterclass-v0.1.0
    method: GET
- name: BeforeClusterCreate
  endpoint:
    path: /hooks/runtime/cluster.x-k8s.io/v1alpha1/before-cluster-create
    method: POST
    data_selector: settings
- name: AfterControlPlaneInitialized
  endpoint:
    path: /hooks/runtime/cluster.x-k8s.io/v1alpha1/after-control-plane-initialized
    method: POST
    data_selector: settings
- name: BeforeClusterUpgrade
  endpoint:
    path: /hooks/runtime/cluster.x-k8s.io/v1alpha1/before-cluster-upgrade
    method: POST
    data_selector: settings
- name: AfterControlPlaneUpgrade
  endpoint:
    path: /hooks/runtime/cluster.x-k8s.io/v1alpha1/after-control-plane-upgrade
    method: POST
    data_selector: settings
- name: AfterClusterUpgrade
  endpoint:
    path: /hooks/runtime/cluster.x-k8s.io/v1alpha1/after-cluster-upgrade
    method: POST
    data_selector: settings
- name: BeforeClusterDelete
  endpoint:
    path: /hooks/runtime/cluster.x-k8s.io/v1alpha1/before-cluster-delete
    method: POST
    data_selector: settings
- name: metrics
  endpoint:
    path: /metrics
    method: GET
    data_selector: metrics
    params: {}
- name: pprof
  endpoint:
    path: /debug/pprof
    method: GET
    data_selector: profiles
    params: {}
- name: podSecurityStandard
  endpoint:
    path: /spec/template/spec/kubeadmConfigSpec/clusterConfiguration/apiServer/extraArgs
    method: add
    data_selector: value
    params: {}
- name: extraVolumes
  endpoint:
    path: /spec/template/spec/kubeadmConfigSpec/clusterConfiguration/apiServer/extraVolumes
    method: add
    data_selector: value
    params: {}
- name: files
  endpoint:
    path: /spec/template/spec/kubeadmConfigSpec/files
    method: add
    data_selector: valueFrom
    params: {}
- name: my-infra-provider
  endpoint:
    path: /api/v4/projects/myorg%2Fmyrepo/packages/generic/myrepo/v1.2.3/infrastructure-components.yaml
    method: GET
- name: cluster-api
  endpoint:
    path: /api/v4/projects/external-packages%2Fcluster-api/packages/generic/cluster-api/v1.1.3/bootstrap-components.yaml
    method: GET
- name: bootstrap
  endpoint:
    path: /bootstrap
    method: GET
- name: controlplane
  endpoint:
    path: /controlplane
    method: GET
- name: cluster
  endpoint:
    path: /cluster
    method: GET
- name: machinedeployment
  endpoint:
    path: /machinedeployment
    method: GET
- name: machineset
  endpoint:
    path: /machineset
    method: GET
- name: machine
  endpoint:
    path: /machine
    method: GET
- name: machinepool
  endpoint:
    path: /machinepool
    method: GET
- name: InfrastructureMachine
  endpoint:
    path: /infrastructureMachinePool
    method: GET
    data_selector: status
    params: {}
- name: MailgunCluster
  endpoint:
    path: /clusters
    method: POST
    data_selector: data
    params: {}
- name: InfraCluster
  endpoint:
    path: /infrastructure.cluster.x-k8s.io/v1alpha1/infraclusters
    method: GET
    data_selector: items
    params: {}
- name: FooCluster
  endpoint:
    path: /infrastructure.foo.com/v1/fooClusters
    method: GET
    data_selector: items
    params: {}
- name: failureDomains
  endpoint:
    path: /status/failureDomains
    method: GET
    data_selector: failureDomains
- name: initialization
  endpoint:
    path: /status/initialization
    method: GET
    data_selector: initialization
- name: FooMachine
  endpoint:
    path: /foomachines
    method: GET
    data_selector: items
- name: FooMachineList
  endpoint:
    path: /foomachines
    method: GET
    data_selector: items
- name: FooMachineTemplate
  endpoint:
    path: /foomachinetemplates
    method: GET
    data_selector: items
- name: FooMachineTemplateList
  endpoint:
    path: /foomachinetemplates
    method: GET
    data_selector: items
- name: BootstrapConfig
  endpoint:
    path: /bootstrapconfig
    method: GET
    data_selector: items
    params: {}
- name: BootstrapConfigList
  endpoint:
    path: /bootstrapconfiglist
    method: GET
    data_selector: items
    params: {}
- name: BootstrapConfigTemplate
  endpoint:
    path: /bootstrapconfigtemplate
    method: GET
    data_selector: items
    params: {}
- name: BootstrapConfigTemplateList
  endpoint:
    path: /bootstrapconfigtemplatelist
    method: GET
    data_selector: items
    params: {}
- name: ControlPlane
  endpoint:
    path: /controlplane
    method: GET
    data_selector: items
    params: {}
- name: ControlPlaneList
  endpoint:
    path: /controlplanelist
    method: GET
    data_selector: items
    params: {}
- name: FooControlPlaneMachineTemplate
  endpoint:
    path: /foocontrolplanemachinetemplates
    method: GET
- name: FooControlPlaneTemplate
  endpoint:
    path: /foocontrolplanetemplates
    method: GET
- name: MachineSet
  endpoint:
    path: /v1beta2/MachineSet
    method: GET
    data_selector: conditions
    params: {}
- name: MachinePool
  endpoint:
    path: /v1beta2/MachinePool
    method: GET
    data_selector: conditions
    params: {}
- name: Machine
  endpoint:
    path: /v1beta2/Machine
    method: GET
    data_selector: conditions
    params: {}
- name: MachineHealthCheck
  endpoint:
    path: /v1beta2/MachineHealthCheck
    method: GET
    data_selector: conditions
    params: {}
- name: ClusterClass
  endpoint:
    path: /clusterclass
    method: GET
    data_selector: conditions
    params: {}
- name: kubeadmConfig
  endpoint:
    path: /kubeadm/config
    method: GET
- name: kubeadmControlPlane
  endpoint:
    path: /kubeadmControlPlane
    method: GET
    data_selector: status
    params: {}
- name: vpc
  endpoint:
    path: /v1/vpcs
    method: GET
- name: powerVS
  endpoint:
    path: /v1/power-vs
    method: GET
- name: workload_clusters
  endpoint:
    path: /workload_clusters
    method: GET
    data_selector: clusters
    params: {}
- name: scaleway-secret
  endpoint:
    path: /v1/secrets
    method: POST
    data_selector: secrets
    params: {}
- name: KubeadmConfig
  endpoint:
    path: /kubeadm/config
    method: GET
    data_selector: items
    params: {}
- name: DockerCluster
  endpoint:
    path: /dockercluster
    method: GET
    data_selector: items
    params: {}
- name: MicroK8sControlPlane
  endpoint:
    path: /api/v1beta1/microk8scontrolplane
    method: POST
    data_selector: spec
    params: {}
- name: MachineDeployment
  endpoint:
    path: /api/v1beta2/machinedeployment
    method: POST
    data_selector: spec
    params: {}
- name: KubeadmControlPlane
  endpoint:
    path: /kubeadmcontrolplane
    method: POST
- name: MachineDeployment
  endpoint:
    path: /machinedeployment
    method: POST
- name: etcd
  endpoint:
    path: /etcd
    method: GET
- name: MachineDeployment
  endpoint:
    path: /cluster-api/v1beta1/machineDeployments
    method: GET
    data_selector: items
- name: MachineSet
  endpoint:
    path: /cluster-api/v1beta1/machineSets
    method: GET
    data_selector: items
- name: MachineHealthCheck
  endpoint:
    path: /api/v1/machinehealthcheck
    method: POST
    data_selector: spec
    params: {}
- name: my-docker-cluster
  endpoint:
    path: /my-docker-cluster
    method: GET
- name: ClusterClass
  endpoint:
    path: /api/v1beta2/ClusterClass
    method: GET
    data_selector: items
    params: {}
- name: Cluster
  endpoint:
    path: /spec/topology
    method: PATCH
    data_selector: spec.topology
    params: {}
- name: ExtensionConfig
  endpoint:
    path: /api/v1/namespaces/default/services/https:webhook-service:443/proxy/hooks.runtime.cluster.x-k8s.io/v1alpha1/discovery
    method: POST
    data_selector: DiscoveryRequest
    params: {}
- name: BeforeClusterCreate
  endpoint:
    path: /hooks/runtime/cluster/x-k8s.io/v1alpha1/beforeClusterCreate
    method: POST
    data_selector: status
    params: {}
- name: AfterControlPlaneInitialized
  endpoint:
    path: /hooks/runtime/cluster/x-k8s.io/v1alpha1/afterControlPlaneInitialized
    method: POST
    data_selector: status
    params: {}
- name: BeforeClusterUpgrade
  endpoint:
    path: /hooks/runtime/cluster/x-k8s.io/v1alpha1/beforeClusterUpgrade
    method: POST
    data_selector: status
    params: {}
- name: AfterControlPlaneUpgrade
  endpoint:
    path: /hooks/runtime/cluster/x-k8s.io/v1alpha1/afterControlPlaneUpgrade
    method: POST
    data_selector: status
    params: {}
- name: AfterClusterUpgrade
  endpoint:
    path: /hooks/runtime/cluster/x-k8s.io/v1alpha1/afterClusterUpgrade
    method: POST
    data_selector: status
    params: {}
- name: BeforeClusterDelete
  endpoint:
    path: /hooks/runtime/cluster/x-k8s.io/v1alpha1/beforeClusterDelete
    method: POST
    data_selector: status
    params: {}
- name: GeneratePatches
  endpoint:
    path: /hooks/runtime/cluster/x-k8s.io/v1alpha1/generatePatches
    method: POST
    data_selector: status
    params: {}
- name: ValidateTopology
  endpoint:
    path: /hooks/runtime/cluster/x-k8s.io/v1alpha1/validateTopology
    method: POST
    data_selector: status
    params: {}
- name: DiscoverVariablesRequest
  endpoint:
    path: /hooks/runtime/discover-variables
    method: POST
- name: DiscoverVariablesResponse
  endpoint:
    path: /hooks/runtime/discover-variables-response
    method: GET
- name: metrics
  endpoint:
    path: /metrics
    method: GET
- name: pprof
  endpoint:
    path: /debug/pprof
    method: GET
- name: log_level
  endpoint:
    path: /debug/flags/v
    method: PUT
- name: podSecurityStandard
  endpoint:
    path: /spec/template/spec/kubeadmConfigSpec/clusterConfiguration/apiServer/extraArgs
    method: add
    data_selector: value
    params: {}
- name: extraVolumes
  endpoint:
    path: /spec/template/spec/kubeadmConfigSpec/clusterConfiguration/apiServer/extraVolumes
    method: add
    data_selector: value
    params: {}
- name: files
  endpoint:
    path: /spec/template/spec/kubeadmConfigSpec/files
    method: add
    data_selector: valueFrom
    params: {}
- name: my-infra-provider
  endpoint:
    path: https://github.com/myorg/myrepo/releases/latest/infrastructure-components.yaml
    method: GET
- name: cluster-api
  endpoint:
    path: https://github.com/myorg/myforkofclusterapi/releases/latest/core-components.yaml
    method: GET
- name: my-other-infra-provider
  endpoint:
    path: https://gitlab.example.com/api/v4/projects/myorg%2Fmyrepo/packages/generic/myrepo/v1.2.3/infrastructure-components.yaml
    method: GET
- name: kubeadm
  endpoint:
    path: https://gitlab.example.com/api/v4/projects/external-packages%2Fcluster-api/packages/generic/cluster-api/v1.1.3/bootstrap-components.yaml
    method: GET
- name: Docker
  endpoint:
    path: /test/infrastructure/docker
    method: GET
    data_selector: templates
    params: {}
- name: KubeVirt
  endpoint:
    path: /kubernetes-sigs/cluster-api-provider-kubevirt
    method: GET
    data_selector: templates
    params: {}
- name: kustomize_substitutions
  endpoint:
    path: /kustomize_substitutions
    method: POST
    data_selector: substitutions
    params: {}
- name: Cluster
  endpoint:
    path: /v1/clusters
    method: GET
    data_selector: items
- name: MachineDeployment
  endpoint:
    path: /v1/machinedeployments
    method: GET
    data_selector: items
- name: MachineSet
  endpoint:
    path: /v1/machinesets
    method: GET
    data_selector: items
- name: Machine
  endpoint:
    path: /v1/machines
    method: GET
    data_selector: items
- name: MachinePool
  endpoint:
    path: /v1/machinepools
    method: GET
    data_selector: items
- name: InfrastructureMachinePool
  endpoint:
    path: ''
    method: ''
    data_selector: ''
    params: {}
- name: mailgun_cluster
  endpoint:
    path: /mailgunclusters
    method: POST
    data_selector: response
- name: Cluster
  endpoint:
    path: /clusters
    method: GET
    data_selector: items
- name: InfraCluster
  endpoint:
    path: /infraclusters
    method: GET
    data_selector: items
- name: failureDomains
  endpoint:
    path: /status/failureDomains
    method: GET
    data_selector: failureDomains
- name: initialization
  endpoint:
    path: /status/initialization
    method: GET
    data_selector: initialization
- name: conditions
  endpoint:
    path: /status/conditions
    method: GET
    data_selector: conditions
- name: FooMachine
  endpoint:
    path: /foomachines
    method: GET
    data_selector: items
- name: FooMachineList
  endpoint:
    path: /foomachines
    method: GET
    data_selector: items
- name: FooMachineTemplate
  endpoint:
    path: /foomachinetemplates
    method: GET
    data_selector: items
- name: FooMachineTemplateList
  endpoint:
    path: /foomachinetemplates
    method: GET
    data_selector: items
- name: BootstrapConfig
  endpoint:
    path: /bootstrapconfig
    method: POST
    data_selector: status
    params: {}
- name: BootstrapConfigTemplate
  endpoint:
    path: /bootstrapconfigtemplates
    method: POST
    data_selector: status
    params: {}
- name: ControlPlane
  endpoint:
    path: /controlplanes
    method: GET
    data_selector: items
- name: ControlPlaneList
  endpoint:
    path: /controlplanes
    method: GET
    data_selector: items
- name: FooControlPlaneMachineTemplate
  endpoint:
    path: /foocontrolplanemachinetemplates
    method: GET
- name: FooControlPlaneTemplate
  endpoint:
    path: /foocontrolplanetemplates
    method: GET
- name: MachineSet
  endpoint:
    path: /v1beta1/machinesets
    method: GET
- name: MachinePool
  endpoint:
    path: /v1beta1/machinepools
    method: GET
- name: Machine
  endpoint:
    path: /v1beta1/machines
    method: GET
- name: MachineHealthCheck
  endpoint:
    path: /v1beta1/machinehealthchecks
    method: GET
- name: ClusterClass
  endpoint:
    path: /clusterClass
    method: GET
    data_selector: conditions
    params: {}
- name: kubeadm_config
  endpoint:
    path: /kubeadm/config
    method: GET
- name: kubeadm_control_plane
  endpoint:
    path: /kubeadmcontrolplane
    method: GET
    data_selector: spec
    params: {}
- name: ClusterResourceSet
  endpoint:
    path: /v1beta2/ClusterResourceSet
    method: GET
- name: ClusterResourceSetBinding
  endpoint:
    path: /v1beta2/ClusterResourceSetBinding
    method: GET
- name: ExtensionConfig
  endpoint:
    path: /v1beta2/ExtensionConfig
    method: GET
- name: IPAddress
  endpoint:
    path: /v1beta2/IPAddress
    method: GET
- name: IPAddressClaim
  endpoint:
    path: /v1beta2/IPAddressClaim
    method: GET
- name: management_cluster
  endpoint:
    path: /clusterctl/init
    method: POST
    data_selector: providers
    params: {}
- name: management_cluster
  endpoint:
    path: /clusterctl/init
    method: POST
    data_selector: providers
- name: image-builder
  endpoint:
    path: /image-builder
    method: GET
    data_selector: records
    params: {}
- name: cluster
  endpoint:
    path: /cluster
    method: GET
    data_selector: records
    params: {}
- name: management_cluster
  endpoint:
    path: /api/v1/management
    method: GET
    data_selector: clusters
    params: {}
- name: deploy_kernel
  endpoint:
    path: /images/ironic-python-agent.kernel
    method: GET
- name: deploy_ramdisk
  endpoint:
    path: /images/ironic-python-agent.initramfs
    method: GET
- name: ironic
  endpoint:
    path: /v1/
    method: GET
- name: ironic_inspector
  endpoint:
    path: /v1/
    method: GET
- name: aws
  endpoint:
    path: /clusterawsadm/bootstrap/iam/create-cloudformation-stack
    method: POST
- name: azure
  endpoint:
    path: /clusterctl/init
    method: POST
- name: digitalocean
  endpoint:
    path: /clusterctl/init
    method: POST
- name: packet
  endpoint:
    path: /clusterctl/init
    method: POST
- name: management_cluster
  endpoint:
    path: /clusterctl/init
    method: POST
    data_selector: providers
- name: packet
  endpoint:
    path: /init/packet
    method: POST
    data_selector: response
    params: {}
- name: vsphere
  endpoint:
    path: /init/vsphere
    method: POST
    data_selector: response
    params: {}
- name: openstack
  endpoint:
    path: /init/openstack
    method: POST
    data_selector: response
    params: {}
- name: docker
  endpoint:
    path: /init/docker
    method: POST
    data_selector: response
    params: {}
- name: gcp
  endpoint:
    path: /init/gcp
    method: POST
    data_selector: response
    params: {}
- name: digitalocean
  endpoint:
    path: /init/digitalocean
    method: POST
    data_selector: response
    params: {}
- name: azure
  endpoint:
    path: /init/azure
    method: POST
    data_selector: response
    params: {}
- name: aws
  endpoint:
    path: /init/aws
    method: POST
    data_selector: response
    params: {}
- name: workload_cluster
  endpoint:
    path: /clusterctl/generate/cluster
    method: POST
    data_selector: cluster
    params:
      kubernetes-version: v1.22.0
      control-plane-machine-count: 3
      worker-machine-count: 3
- name: management_cluster
  endpoint:
    path: /clusterctl/init
    method: POST
    data_selector: providers
    params: {}
- name: workload_cluster
  endpoint:
    path: /clusterctl/generate/cluster
    method: GET
    data_selector: clusterTemplate
    params: {}
- name: control_plane
  endpoint:
    path: /v2/droplets
    method: GET
    data_selector: droplets
- name: node
  endpoint:
    path: /v2/droplets
    method: GET
    data_selector: droplets
- name: proxmox_vm
  endpoint:
    path: /nodes/{node}/qemu/{vmid}
    method: GET
- name: vultr
  endpoint:
    path: /clusterctl/init/vultr
    method: POST
- name: gcp
  endpoint:
    path: /clusterctl/init/gcp
    method: POST
- name: harvester
  endpoint:
    path: /clusterctl/init/harvester
    method: POST
- name: azure
  endpoint:
    path: /clusterctl/init/azure
    method: POST
- name: docker
  endpoint:
    path: /clusterctl/init/docker
    method: POST
- name: openstack
  endpoint:
    path: /clusterctl/init/openstack
    method: POST
- name: cloudstack
  endpoint:
    path: /clusterctl/init/cloudstack
    method: POST
- name: kubevirt
  endpoint:
    path: /clusterctl/init/kubevirt
    method: POST
- name: ibmcloud
  endpoint:
    path: /clusterctl/init/ibmcloud
    method: POST
- name: clusterctl
  endpoint:
    path: /releases/download/v1.11.2/clusterctl-linux-ppc64le
    method: GET
- name: clusterawsadm
  endpoint:
    path: /releases/download/v2.9.2/clusterawsadm-linux-amd64
    method: GET
- name: cluster
  endpoint:
    path: /init
    method: POST
    data_selector: cluster
    params: {}
- name: vm_template
  endpoint:
    path: /vm/template
    method: GET
    data_selector: records
- name: cluster_nodes
  endpoint:
    path: /cluster/nodes
    method: GET
    data_selector: records
- name: linode
  endpoint:
    params:
      LINODE_REGION: us-ord
      LINODE_TOKEN: <your linode PAT>
      LINODE_CONTROL_PLANE_MACHINE_TYPE: g6-standard-2
      LINODE_MACHINE_TYPE: g6-standard-2
- name: aws
  endpoint:
    params:
      AWS_REGION: us-east-1
      AWS_SSH_KEY_NAME: default
      AWS_CONTROL_PLANE_MACHINE_TYPE: t3.large
      AWS_NODE_MACHINE_TYPE: t3.large
- name: azure
  endpoint:
    params:
      AZURE_LOCATION: centralus
      AZURE_CONTROL_PLANE_MACHINE_TYPE: Standard_D2s_v3
      AZURE_NODE_MACHINE_TYPE: Standard_D2s_v3
      AZURE_RESOURCE_GROUP: <ResourceGroupName>
- name: cloudstack
  endpoint:
    params:
      CLOUDSTACK_ZONE_NAME: <zone name>
      CLOUDSTACK_NETWORK_NAME: <network name>
      CLUSTER_ENDPOINT_IP: <cluster endpoint address>
      CLUSTER_ENDPOINT_PORT: <cluster endpoint port>
      CLOUDSTACK_CONTROL_PLANE_MACHINE_OFFERING: <control plane service offering name>
      CLOUDSTACK_WORKER_MACHINE_OFFERING: <worker node service offering name>
      CLOUDSTACK_TEMPLATE_NAME: <template name>
      CLOUDSTACK_SSH_KEY_NAME: <ssh key name>
- name: digitalocean
  endpoint:
    params:
      DO_REGION: nyc1
      DO_SSH_KEY_FINGERPRINT: <your-ssh-key-fingerprint>
      DO_CONTROL_PLANE_MACHINE_TYPE: s-2vcpu-2gb
      DO_CONTROL_PLANE_MACHINE_IMAGE: <your-capi-image-id>
      DO_NODE_MACHINE_TYPE: s-2vcpu-2gb
      DO_NODE_MACHINE_IMAGE: <your-capi-image-id>
- name: gcp
  endpoint:
    params:
      GCP_REGION: <GCP_REGION>
      GCP_PROJECT: <GCP_PROJECT>
      KUBERNETES_VERSION: 1.23.3
      IMAGE_ID: projects/$GCP_PROJECT/global/images/<built image>
      GCP_CONTROL_PLANE_MACHINE_TYPE: n1-standard-2
      GCP_NODE_MACHINE_TYPE: n1-standard-2
      GCP_NETWORK_NAME: <GCP_NETWORK_NAME or default>
      CLUSTER_NAME: <CLUSTER_NAME>
- name: harvester
  endpoint:
    params:
      CONTROL_PLANE_MACHINE_COUNT: '3'
      NAMESPACE: test
      POD_CIDR: 10.42.0.0/16
      SERVICE_CIDR: 10.43.0.0/16
      SSH_KEYPAIR: default/ssk-key-pair
      TARGET_HARVESTER_NAMESPACE: default
      VM_DISK_SIZE: 50Gi
      VM_IMAGE_NAME: default/jammy-server
      VM_NETWORK: default/untagged
      VM_SSH_USER: ubuntu
      WORKER_MACHINE_COUNT: '2'
- name: huawei
  endpoint:
    params:
      HC_REGION: cn-east-1
      HC_SSH_KEY_NAME: default
      KUBERNETES_VERSION: 1.32.0
      CONTROL_PLANE_MACHINE_COUNT: '1'
      WORKER_MACHINE_COUNT: '1'
      HC_CONTROL_PLANE_MACHINE_TYPE: x1e.2u.4g
      HC_NODE_MACHINE_TYPE: x1e.2u.4g
      ECS_IMAGE_ID: 218ca5t7-bxf3-5dg0-852p-y703c9fe1a52
- name: ibmcloud
  endpoint:
    params:
      IBMVPC_REGION: us-south
      IBMVPC_ZONE: us-south-1
      IBMVPC_RESOURCEGROUP: <your-resource-group-id>
      IBMVPC_NAME: ibm-vpc-0
      IBMVPC_IMAGE_ID: <you-image-id>
      IBMVPC_PROFILE: bx2-4x16
      IBMVPC_SSHKEY_ID: <your-sshkey-id>
      IBMPOWERVS_SSHKEY_NAME: <your-ssh-key>
      IBMPOWERVS_VIP: <internal-ip>
      IBMPOWERVS_VIP_EXTERNAL: <external-ip>
      IBMPOWERVS_VIP_CIDR: '29'
      IBMPOWERVS_IMAGE_NAME: <your-capi-image-name>
      IBMPOWERVS_SERVICE_INSTANCE_ID: <service-instance-id>
      IBMPOWERVS_NETWORK_NAME: <your-capi-network-name>
- name: ionos
  endpoint:
    params:
      IONOS_TOKEN: <your-token>
      IONOSCLOUD_DATACENTER_ID: <your-datacenter-id>
      CONTROL_PLANE_ENDPOINT_IP: 10.10.10.4
      CONTROL_PLANE_ENDPOINT_LOCATION: de/txl
      IONOSCLOUD_MACHINE_IMAGE_ID: <your-image-id>
      IONOSCLOUD_MACHINE_SSH_KEYS: <your-ssh-key>
- name: k0smotron
  endpoint:
    params:
      KKZONE: ''
      USER_NAME: <your-linux-user>
      PASSWORD: <your-linux-user-password>
      INSTANCES: <your-linux-ip-address>
      CONTROL_PLANE_ENDPOINT_IP: <your-control-plane-virtual-ip>
- name: kubekey
  endpoint:
    params:
      NODE_VM_IMAGE_TEMPLATE: quay.io/capk/ubuntu-2404-container-disk:v1.32.1
      CAPK_GUEST_K8S_VERSION: ${NODE_VM_IMAGE_TEMPLATE/*:/}
      CRI_PATH: unix:///var/run/containerd/containerd.sock
- name: metal3
  endpoint:
    params: {}
- name: nutanix
  endpoint:
    params: {}
- name: opennebula
  endpoint:
    params:
      ONE_XMLRPC: http://10.2.11.40:2633/RPC2
      ONE_AUTH: oneadmin:opennebula
      MACHINE_TEMPLATE_NAME: capone131
      ROUTER_TEMPLATE_NAME: capone131-vr
      PUBLIC_NETWORK_NAME: service
      PRIVATE_NETWORK_NAME: private
      CLUSTER_NAME: one
      CCM_IMG: ghcr.io/opennebula/cloud-provider-opennebula:latest
      CONTROL_PLANE_MACHINE_COUNT: '1'
      WORKER_MACHINE_COUNT: '1'
- name: openstack
  endpoint:
    params: {}
- name: outscale
  endpoint:
    params: {}
- name: proxmox
  endpoint:
    params:
      PROXMOX_SOURCENODE: pve
      TEMPLATE_VMID: 100
      VM_SSH_KEYS: ssh-ed25519 ..., ssh-ed25519 ...
      CONTROL_PLANE_ENDPOINT_IP: 10.10.10.4
      NODE_IP_RANGES: '[10.10.10.5-10.10.10.50, 10.10.10.55-10.10.10.70]'
      IP_PREFIX: 24
      BRIDGE: vmbr1
      DNS_SERVERS: '[8.8.8.8,8.8.4.4]'
      ALLOWED_NODES: '[pve1,pve2,pve3]'
- name: scaleway
  endpoint:
    params:
      SCW_ACCESS_KEY: <ACCESS_KEY>
      SCW_SECRET_KEY: <SECRET_KEY>
      SCW_PROJECT_ID: <PROJECT_ID>
      SCW_REGION: fr-par
- name: cluster
  endpoint:
    path: /clusterctl/generate/cluster
    method: POST
    data_selector: cluster
    params:
      infrastructure: vcd
- name: clusterctl
  endpoint:
    path: /clusterctl
    method: GET
    data_selector: version
    params: {}
- name: linode
  endpoint:
    path: /linode
    method: GET
    data_selector: records
    params:
      LINODE_REGION: us-ord
      LINODE_TOKEN: <your linode PAT>
      LINODE_CONTROL_PLANE_MACHINE_TYPE: g6-standard-2
      LINODE_MACHINE_TYPE: g6-standard-2
- name: aws
  endpoint:
    path: /aws
    method: GET
    data_selector: records
    params:
      AWS_REGION: us-east-1
      AWS_SSH_KEY_NAME: default
      AWS_CONTROL_PLANE_MACHINE_TYPE: t3.large
      AWS_NODE_MACHINE_TYPE: t3.large
- name: azure
  endpoint:
    path: /azure
    method: GET
    data_selector: records
    params:
      AZURE_LOCATION: centralus
      AZURE_CONTROL_PLANE_MACHINE_TYPE: Standard_D2s_v3
      AZURE_NODE_MACHINE_TYPE: Standard_D2s_v3
      AZURE_RESOURCE_GROUP: <ResourceGroupName>
- name: cloudstack
  endpoint:
    path: /cloudstack
    method: GET
    data_selector: records
    params:
      CLOUDSTACK_ZONE_NAME: <zone name>
      CLOUDSTACK_NETWORK_NAME: <network name>
      CLUSTER_ENDPOINT_IP: <cluster endpoint address>
      CLUSTER_ENDPOINT_PORT: <cluster endpoint port>
      CLOUDSTACK_CONTROL_PLANE_MACHINE_OFFERING: <control plane service offering name>
      CLOUDSTACK_WORKER_MACHINE_OFFERING: <worker node service offering name>
      CLOUDSTACK_TEMPLATE_NAME: <template name>
      CLOUDSTACK_SSH_KEY_NAME: <ssh key name>
- name: digitalocean
  endpoint:
    path: /digitalocean
    method: GET
    data_selector: records
    params:
      DO_REGION: nyc1
      DO_SSH_KEY_FINGERPRINT: <your-ssh-key-fingerprint>
      DO_CONTROL_PLANE_MACHINE_TYPE: s-2vcpu-2gb
      DO_CONTROL_PLANE_MACHINE_IMAGE: <your-capi-image-id>
      DO_NODE_MACHINE_TYPE: s-2vcpu-2gb
      DO_NODE_MACHINE_IMAGE: <your-capi-image-id>
- name: gcp
  endpoint:
    path: /gcp
    method: GET
    data_selector: records
    params:
      GCP_REGION: <GCP_REGION>
      GCP_PROJECT: <GCP_PROJECT>
      KUBERNETES_VERSION: 1.23.3
      IMAGE_ID: projects/$GCP_PROJECT/global/images/<built image>
      GCP_CONTROL_PLANE_MACHINE_TYPE: n1-standard-2
      GCP_NODE_MACHINE_TYPE: n1-standard-2
      GCP_NETWORK_NAME: <GCP_NETWORK_NAME or default>
      CLUSTER_NAME: <CLUSTER_NAME>
- name: harvester
  endpoint:
    path: /harvester
    method: GET
    data_selector: records
    params:
      CLOUD_CONFIG_KUBECONFIG_B64: ''
      CLUSTER_NAME: <CLUSTER_NAME>
      CONTROL_PLANE_MACHINE_COUNT: '3'
      HARVESTER_ENDPOINT: ''
      HARVESTER_KUBECONFIG_B64: <HARVESTER_KUBECONFIG_ENCODED_IN_BASE64>
      NAMESPACE: test
      POD_CIDR: 10.42.0.0/16
      SERVICE_CIDR: 10.43.0.0/16
      SSH_KEYPAIR: default/ssk-key-pair
      TARGET_HARVESTER_NAMESPACE: default
      VM_DISK_SIZE: 50Gi
      VM_IMAGE_NAME: default/jammy-server
      VM_NETWORK: default/untagged
      VM_SSH_USER: ubuntu
      WORKER_MACHINE_COUNT: '2'
- name: huawei
  endpoint:
    path: /huawei
    method: GET
    data_selector: records
    params:
      HC_REGION: cn-east-1
      HC_SSH_KEY_NAME: default
      KUBERNETES_VERSION: 1.32.0
      CONTROL_PLANE_MACHINE_COUNT: '1'
      WORKER_MACHINE_COUNT: '1'
      HC_CONTROL_PLANE_MACHINE_TYPE: x1e.2u.4g
      HC_NODE_MACHINE_TYPE: x1e.2u.4g
      ECS_IMAGE_ID: 218ca5t7-bxf3-5dg0-852p-y703c9fe1a52
- name: ibm
  endpoint:
    path: /ibm
    method: GET
    data_selector: records
    params:
      IBMVPC_REGION: us-south
      IBMVPC_ZONE: us-south-1
      IBMVPC_RESOURCEGROUP: <your-resource-group-id>
      IBMVPC_NAME: ibm-vpc-0
      IBMVPC_IMAGE_ID: <you-image-id>
      IBMVPC_PROFILE: bx2-4x16
      IBMVPC_SSHKEY_ID: <your-sshkey-id>
      IBMPOWERVS_SSHKEY_NAME: <your-ssh-key>
      IBMPOWERVS_VIP: <internal-ip>
      IBMPOWERVS_VIP_EXTERNAL: <external-ip>
      IBMPOWERVS_VIP_CIDR: '29'
      IBMPOWERVS_IMAGE_NAME: <your-capi-image-name>
      IBMPOWERVS_SERVICE_INSTANCE_ID: <service-instance-id>
      IBMPOWERVS_NETWORK_NAME: <your-capi-network-name>
- name: ionos
  endpoint:
    path: /ionos
    method: GET
    data_selector: records
    params:
      IONOS_TOKEN: <your-token>
      IONOSCLOUD_DATACENTER_ID: <your-datacenter-id>
      CONTROL_PLANE_ENDPOINT_IP: 10.10.10.4
      CONTROL_PLANE_ENDPOINT_LOCATION: de/txl
      IONOSCLOUD_MACHINE_IMAGE_ID: <your-image-id>
      IONOSCLOUD_MACHINE_SSH_KEYS: <your-ssh-key>
- name: k0smotron
  endpoint:
    path: /k0smotron
    method: GET
    data_selector: records
    params:
      KKZONE: ''
      USER_NAME: <your-linux-user>
      PASSWORD: <your-linux-user-password>
      INSTANCES: <your-linux-ip-address>
      CONTROL_PLANE_ENDPOINT_IP: <your-control-plane-virtual-ip>
- name: kubekey
  endpoint:
    path: /kubekey
    method: GET
    data_selector: records
    params:
      NODE_VM_IMAGE_TEMPLATE: quay.io/capk/ubuntu-2404-container-disk:v1.32.1
      CAPK_GUEST_K8S_VERSION: ${NODE_VM_IMAGE_TEMPLATE/*:}
      CRI_PATH: unix:///var/run/containerd/containerd.sock
- name: metal3
  endpoint:
    path: /metal3
    method: GET
    data_selector: records
    params:
      DEPLOY_KERNEL_URL: http://172.22.0.1:6180/images/ironic-python-agent.kernel
      DEPLOY_RAMDISK_URL: http://172.22.0.1:6180/images/ironic-python-agent.initramfs
      IRONIC_URL: http://172.22.0.1:6385/v1/
      IRONIC_INSPECTOR_URL: http://172.22.0.1:5050/v1/
      IRONIC_NO_CA_CERT: 'true'
      IRONIC_NO_BASIC_AUTH: 'true'
      IRONIC_INSPECTOR_NO_BASIC_AUTH: 'true'
- name: nutanix
  endpoint:
    path: /nutanix
    method: GET
    data_selector: records
    params: {}
- name: opennebula
  endpoint:
    path: /opennebula
    method: GET
    data_selector: records
    params:
      ONE_XMLRPC: http://10.2.11.40:2633/RPC2
      ONE_AUTH: oneadmin:opennebula
      MACHINE_TEMPLATE_NAME: capone131
      ROUTER_TEMPLATE_NAME: capone131-vr
      PUBLIC_NETWORK_NAME: service
      PRIVATE_NETWORK_NAME: private
      CLUSTER_NAME: one
      CCM_IMG: ghcr.io/opennebula/cloud-provider-opennebula:latest
      CONTROL_PLANE_MACHINE_COUNT: '1'
      WORKER_MACHINE_COUNT: '1'
- name: openstack
  endpoint:
    path: /openstack
    method: GET
    data_selector: records
    params:
      OPENSTACK_DNS_NAMESERVERS: <dns nameserver>
      OPENSTACK_FAILURE_DOMAIN: <availability zone name>
      OPENSTACK_CONTROL_PLANE_MACHINE_FLAVOR: <flavor>
      OPENSTACK_NODE_MACHINE_FLAVOR: <flavor>
      OPENSTACK_IMAGE_NAME: <image name>
      OPENSTACK_SSH_KEY_NAME: <ssh key pair name>
      OPENSTACK_EXTERNAL_NETWORK_ID: <external network ID>
- name: outscale
  endpoint:
    path: /outscale
    method: GET
    data_selector: records
    params:
      OSC_IOPS: <IOPS>
      OSC_VOLUME_SIZE: <VOLUME_SIZE>
      OSC_VOLUME_TYPE: <VOLUME_TYPE>
      OSC_KEYPAIR_NAME: <KEYPAIR_NAME>
      OSC_SUBREGION_NAME: <SUBREGION_NAME>
      OSC_VM_TYPE: <VM_TYPE>
      OSC_IMAGE_NAME: <IMAGE_NAME>
- name: proxmox
  endpoint:
    path: /proxmox
    method: GET
    data_selector: records
    params: {}
- name: cluster
  endpoint:
    path: /proxmox/api2/json/nodes
    method: GET
- name: scaleway-secret
  endpoint:
    path: /kube-system/scaleway-secret
    method: POST
    data_selector: stringData
    params: {}
- name: management_cluster
  endpoint:
    path: /user/quick-start
    method: GET
    data_selector: records
    params: {}
- name: kind
  endpoint:
    path: /tasks/bootstrap/microk8s-bootstrap
    method: GET
    data_selector: records
    params: {}
- name: clusterawsadm
  endpoint:
    path: /clusterawsadm-linux-amd64
    method: GET
- name: clusterctl
  endpoint:
    path: /clusterctl-linux-ppc64le
    method: GET
- name: cluster
  endpoint:
    path: /api2/json/nodes
    method: GET
    data_selector: data
- name: vm_template
  endpoint:
    path: /api/v1/vm_template
    method: GET
    data_selector: data
- name: core_provider
  endpoint:
    path: /api/v1alpha2/coreprovider
    method: POST
    data_selector: metadata
    params: {}
- name: infrastructure_provider
  endpoint:
    path: /api/v1alpha2/infrastructureprovider
    method: POST
    data_selector: metadata
    params:
      version: v2.1.4
- name: kubeadm_control_plane
  endpoint:
    path: /controlplane.cluster.x-k8s.io/v1beta2/kubeadmcontrolplanes
    method: POST
    data_selector: spec
    params: {}
- name: MicroK8sControlPlane
  endpoint:
    path: /api/v1beta2/controlPlane
    method: POST
    data_selector: spec.controlPlaneConfig
    params: {}
- name: MachineDeployment
  endpoint:
    path: /api/v1beta2/machineDeployments
    method: POST
    data_selector: spec
    params: {}
- name: MicroK8sConfigTemplate
  endpoint:
    path: /api/v1beta1/microK8sConfigTemplates
    method: POST
    data_selector: spec.template.spec
    params: {}
- name: KubeadmControlPlane
  endpoint:
    path: /kubeadmcontrolplanes
    method: GET
    data_selector: items
- name: MachineDeployment
  endpoint:
    path: /machinedeployments
    method: GET
    data_selector: items
- name: etcd
  endpoint:
    path: /etcd
    method: GET
    data_selector: endpoints
    params: {}
- name: MachineHealthCheck
  endpoint:
    path: /tasks/adding-a-machinehealthcheck-for-a-workload-cluster
    method: GET
    data_selector: workload-mhc.yaml
    params: {}
- name: infrastructure_machine_template
  endpoint:
    path: /tasks/updating-infrastructure-machine-templates
    method: GET
    data_selector: templates
    params: {}
- name: bootstrap_template
  endpoint:
    path: /tasks/updating-bootstrap-templates
    method: GET
    data_selector: templates
    params: {}
- name: HelmChartProxy
  endpoint:
    path: /addons.cluster.x-k8s.io/v1alpha1/HelmChartProxy
    method: POST
    data_selector: metadata
    params: {}
- name: MachineDeployment
  endpoint:
    path: /machines/deployment
    method: GET
    data_selector: machines
    params: {}
- name: MachineSet
  endpoint:
    path: /machines/set
    method: GET
    data_selector: machines
    params: {}
- name: MachinePool
  endpoint:
    path: /machines/pool
    method: GET
    data_selector: machines
    params: {}
- name: MachineHealthCheck
  endpoint:
    path: /machinehealthchecks
    method: POST
    data_selector: items
    params: {}
- name: KubeadmControlPlane
  endpoint:
    path: /kubeadmcontrolplanes
    method: POST
    data_selector: items
    params: {}
- name: MachineHealthCheck
  endpoint:
    path: /apis/cluster.x-k8s.io/v1beta2/machinehealthchecks
    method: GET
    data_selector: items
- name: KubeadmControlPlane
  endpoint:
    path: /apis/cluster.x-k8s.io/v1beta2/kubeadmcontrolplanes
    method: GET
    data_selector: items
- name: MachinePool
  endpoint:
    path: /tasks/experimental-features/machine-pools
    method: GET
- name: MachineSetPreflightChecks
  endpoint:
    path: /tasks/experimental-features/machineset-preflight-checks
    method: GET
- name: ClusterTopology
  endpoint:
    path: /tasks/experimental-features/cluster-class/
    method: GET
- name: Ignition Bootstrap configuration
  endpoint:
    path: /tasks/experimental-features/ignition
    method: GET
- name: Runtime SDK
  endpoint:
    path: /tasks/experimental-features/runtime-sdk/
    method: GET
- name: workload_cluster
  endpoint:
    path: /user/quick-start
    method: GET
    data_selector: clusters
    params: {}
- name: cluster-api-controller
  endpoint:
    path: /cluster-api/cluster-api-controller
    method: verify
    data_selector: signatures
    params:
      image: registry.k8s.io/cluster-api/cluster-api-controller:v1.5.0
      certificate-identity: krel-trust@k8s-releng-prod.iam.gserviceaccount.com
      certificate-oidc-issuer: https://accounts.google.com
- name: metrics
  endpoint:
    path: /metrics
    method: GET
    data_selector: ''
    params: {}
- name: pprof
  endpoint:
    path: /debug/pprof/
    method: GET
    data_selector: ''
    params: {}
- name: log_level
  endpoint:
    path: /debug/flags/v
    method: PUT
    data_selector: ''
    params: {}
- name: ClusterClass
  endpoint:
    path: /cluster-classes
    method: POST
    data_selector: spec
    params: {}
- name: Cluster
  endpoint:
    path: /clusters
    method: POST
    data_selector: spec
    params: {}
- name: alpha_rollout
  endpoint:
    path: /clusterctl/commands/alpha-rollout
    method: GET
- name: completion
  endpoint:
    path: /clusterctl/commands/completion
    method: GET
- name: config
  endpoint:
    path: /clusterctl/commands/additional-commands#clusterctl-config-repositories
    method: GET
- name: delete
  endpoint:
    path: /clusterctl/commands/delete
    method: GET
- name: describe_cluster
  endpoint:
    path: /clusterctl/commands/describe-cluster
    method: GET
- name: generate_cluster
  endpoint:
    path: /clusterctl/commands/generate-cluster
    method: GET
- name: generate_provider
  endpoint:
    path: /clusterctl/commands/generate-provider
    method: GET
- name: generate_yaml
  endpoint:
    path: /clusterctl/commands/generate-yaml
    method: GET
- name: get_kubeconfig
  endpoint:
    path: /clusterctl/commands/get-kubeconfig
    method: GET
- name: init
  endpoint:
    path: /clusterctl/commands/init
    method: GET
- name: move
  endpoint:
    path: /clusterctl/commands/move
    method: GET
- name: upgrade_plan
  endpoint:
    path: /clusterctl/commands/upgrade#upgrade-plan
    method: GET
- name: upgrade_apply
  endpoint:
    path: /clusterctl/commands/upgrade#upgrade-apply
    method: GET
- name: version
  endpoint:
    path: /clusterctl/commands/additional-commands#clusterctl-version
    method: GET
- name: cluster
  endpoint:
    path: /clusterctl/generate/cluster
    method: GET
    data_selector: template
- name: provider
  endpoint:
    path: /clusterctl/generate/provider
    method: GET
- name: kubeconfig
  endpoint:
    path: /get/kubeconfig
    method: GET
    data_selector: stdout
    params: {}
- name: Cluster
  endpoint:
    path: /cluster
    method: POST
    data_selector: spec
    params: {}
- name: Machines
  endpoint:
    path: /machines
    method: GET
    data_selector: items
    params: {}
- name: MachineDeployments
  endpoint:
    path: /machinedeployments
    method: GET
    data_selector: items
    params: {}
- name: upgrade
  endpoint:
    path: /clusterctl/upgrade
    method: POST
    data_selector: upgrade_info
    params: {}
- name: upgrade_plan
  endpoint:
    path: /clusterctl/upgrade/plan
    method: GET
    data_selector: upgrade_plan_info
    params: {}
- name: apply_upgrade
  endpoint:
    path: /clusterctl/upgrade/apply
    method: POST
    data_selector: apply_info
    params: {}
- name: delete_provider_components
  endpoint:
    path: /clusterctl/delete
    method: DELETE
    data_selector: components
    params:
      infrastructure: aws
- name: kubeadmcontrolplanes
  endpoint:
    path: /kubeadmcontrolplanes
    method: GET
- name: machinedeployments
  endpoint:
    path: /machinedeployments
    method: GET
- name: providers
  endpoint:
    path: /clusterctl/providers
    method: GET
    data_selector: providers
    params: {}
- name: plugin
  endpoint:
    path: /clusterctl/plugins
    method: GET
    data_selector: plugins
    params: {}
- name: kind_cluster
  endpoint:
    path: /kind-cluster
    method: GET
- name: tilt_settings
  endpoint:
    path: /tilt-settings.yaml
    method: GET
- name: kind_cluster
  endpoint:
    path: /kind-cluster
    method: POST
- name: tilt_settings
  endpoint:
    path: /tilt-settings
    method: POST
- name: kind-cluster
  endpoint:
    path: /tasks/create-a-kind-cluster
    method: POST
    data_selector: cluster
    params: {}
- name: kustomize_substitutions
  endpoint:
    path: /kustomize_substitutions
    method: POST
    data_selector: substitutions
- name: e2e_tests
  endpoint:
    path: /test/e2e
    method: GET
    data_selector: tests
    params: {}
- name: Cluster
  endpoint:
    path: /cluster
    method: GET
- name: Machine
  endpoint:
    path: /machine
    method: GET
- name: supported_labels
  endpoint:
    path: /reference/api/labels-and-annotations
    method: GET
    data_selector: labels
- name: KubeadmControlPlane
  endpoint:
    path: /kubeadmcontrolplanes
    method: GET
- name: KubeadmConfig
  endpoint:
    path: /kubeadmconfigs
    method: GET
- name: ClusterResourceSet
  endpoint:
    path: /clusterresourcesets
    method: GET
- name: MachineDeployment
  endpoint:
    path: /machinedeployments
    method: GET
- name: MachineSet
  endpoint:
    path: /machinesets
    method: GET
- name: Machine
  endpoint:
    path: /machines
    method: GET
- name: MachineHealthCheck
  endpoint:
    path: /machinehealthchecks
    method: GET
- name: diagnostics-address
  endpoint:
    path: /diagnostics
    method: GET
- name: webhook
  endpoint:
    path: /webhook
    method: GET
- name: health
  endpoint:
    path: /health
    method: GET
- name: profiler
  endpoint:
    path: /profiler
    method: GET
- name: Control Plane
  endpoint:
    params:
      CONTROL_PLANE_MACHINE_COUNT: '3'
- name: Worker Nodes
  endpoint:
    params:
      WORKER_MACHINE_COUNT: '2'
- name: scaleway_credentials
  endpoint:
    path: /scaleway/credentials
    method: POST
    data_selector: credentials
    params:
      SCW_ACCESS_KEY: <ACCESS_KEY>
      SCW_SECRET_KEY: <SECRET_KEY>
      SCW_PROJECT_ID: <PROJECT_ID>
      SCW_REGION: fr-par
- name: vcenter
  endpoint:
    path: /vcenter
    method: POST
    data_selector: vcenter_data
    params:
      VSPHERE_SERVER: 10.0.0.1
      VSPHERE_DATACENTER: SDDC-Datacenter
      VSPHERE_DATASTORE: vsanDatastore
      VSPHERE_NETWORK: VM Network
      VSPHERE_RESOURCE_POOL: '*/Resources'
      VSPHERE_FOLDER: vm
      VSPHERE_TEMPLATE: ubuntu-1804-kube-v1.17.3
      VSPHERE_SSH_AUTHORIZED_KEY: ssh-rsa AAAAB3N...
      VSPHERE_TLS_THUMBPRINT: 97:48:03:8D:78:A9...
      VSPHERE_STORAGE_POLICY: policy-one
      CONTROL_PLANE_ENDPOINT_IP: 1.2.3.4
- name: workload_cluster
  endpoint:
    path: /clusterctl/generate
    method: POST
    data_selector: cluster
    params:
      kubernetes_version: v1.34.0
      control_plane_machine_count: '1'
      worker_machine_count: '1'
- name: credentials-secret
  endpoint:
    path: /secrets
    method: POST
    data_selector: metadata.name
    params: {}
- name: core-provider
  endpoint:
    path: /core-provider
    method: POST
    data_selector: metadata.name
    params: {}
- name: infrastructure-provider
  endpoint:
    path: /infrastructure-provider
    method: POST
    data_selector: metadata.name
    params: {}
- name: KubeadmConfig
  endpoint:
    path: /
    method: POST
    data_selector: metadata.name
    params: {}
- name: DockerCluster
  endpoint:
    path: /
    method: POST
    data_selector: metadata.name
    params: {}
- name: Machine
  endpoint:
    path: /
    method: POST
    data_selector: metadata.name
    params: {}
- name: kubelet_configuration
  endpoint:
    path: /etc/kubernetes/kubelet/config.yaml
    method: PUT
    data_selector: content
    params: {}
- name: management_cluster
  endpoint:
    path: /api/v1/managing_cluster
    method: POST
    data_selector: cluster
    params: {}
- name: vpc
  endpoint:
    path: /v1/vpcs
    method: GET
- name: powervs
  endpoint:
    path: /v1/powervs
    method: GET
- name: ionoscloud
  endpoint:
    path: /v1/ionoscloud
    method: GET
- name: KubeletConfiguration
  endpoint:
    path: /kubelet/config
    method: POST
- name: scaleway-secret
  endpoint:
    path: /api/v1/namespaces/kube-system/secrets/scaleway-secret
    method: POST
    data_selector: stringData
    params: {}
- name: KubeadmConfig
  endpoint:
    path: /kubeadm/config
    method: GET
    data_selector: items
- name: DockerCluster
  endpoint:
    path: /dockercluster
    method: GET
    data_selector: items
- name: Cluster
  endpoint:
    path: /cluster
    method: GET
    data_selector: items
- name: Machine
  endpoint:
    path: /machine
    method: GET
    data_selector: items
- name: KubeletConfiguration
  endpoint:
    path: /etc/kubernetes/kubelet/config.yaml
    method: PUT
    data_selector: content
    params: {}
- name: cluster
  endpoint:
    path: /cluster
    method: POST
    data_selector: cluster
    params: {}
- name: image
  endpoint:
    path: /images
    method: GET
    data_selector: images
    params: {}
- name: scaleway-cloud-controller-manager
  endpoint:
    path: https://raw.githubusercontent.com/scaleway/scaleway-cloud-controller-manager/master/examples/k8s-scaleway-ccm-latest.yml
    method: GET
- name: calico
  endpoint:
    path: https://raw.githubusercontent.com/projectcalico/calico/v3.29.1/manifests/calico.yaml
    method: GET
- name: KubeadmConfigTemplate
  endpoint:
    path: /kubeadmConfigTemplate
    method: GET
    data_selector: metadata
    params: {}
- name: KubeadmControlPlaneTemplate
  endpoint:
    path: /kubeadmControlPlaneTemplate
    method: GET
    data_selector: metadata
    params: {}
- name: vpc
  endpoint:
    path: /v1/vpcs
    method: GET
    data_selector: vpcs
- name: powerVS
  endpoint:
    path: /v1/power-vs
    method: GET
    data_selector: instances
- name: cluster
  endpoint:
    path: /cluster
    method: POST
    data_selector: cluster
- name: KubeadmConfig
  endpoint:
    path: /kubeadm-config
    method: GET
    data_selector: items
    params: {}
- name: DockerCluster
  endpoint:
    path: /docker-cluster
    method: GET
    data_selector: items
    params: {}
- name: Machine
  endpoint:
    path: /machines
    method: GET
    data_selector: items
    params: {}
- name: KubeletConfiguration
  endpoint:
    path: /etc/kubernetes/kubelet/config.yaml
    method: PUT
    data_selector: content
- name: kubelet_extra_args
  endpoint:
    path: /etc/kubernetes/patches/kubeletconfiguration0+strategic.json
    method: GET
    data_selector: content
    params: {}
- name: management_cluster
  endpoint:
    path: /init
    method: POST
    data_selector: management_cluster_data
    params: {}
- name: vpc
  endpoint:
    params:
      IBMVPC_REGION: us-south
      IBMVPC_ZONE: us-south-1
      IBMVPC_RESOURCEGROUP: <your-resource-group-id>
      IBMVPC_NAME: ibm-vpc-0
      IBMVPC_IMAGE_ID: <you-image-id>
      IBMVPC_PROFILE: bx2-4x16
      IBMVPC_SSHKEY_ID: <your-sshkey-id>
- name: powervs
  endpoint:
    params:
      IBMPOWERVS_SSHKEY_NAME: <your-ssh-key>
      IBMPOWERVS_VIP: <internal-ip>
      IBMPOWERVS_VIP_EXTERNAL: <external-ip>
      IBMPOWERVS_VIP_CIDR: 29
      IBMPOWERVS_IMAGE_NAME: <your-capi-image-name>
      IBMPOWERVS_SERVICE_INSTANCE_ID: <service-instance-id>
      IBMPOWERVS_NETWORK_NAME: <your-capi-network-name>
- name: environment_variables
  endpoint:
    path: /environment/variables
    method: GET
    data_selector: variables
- name: KubeadmControlPlaneTemplate
  endpoint:
    path: /tasks/bootstrap/kubeadm-bootstrap/kubelet-config#kubeadmcontrolplanetemplate
    method: GET
    data_selector: records
    params: {}
- name: KubeadmConfigTemplate
  endpoint:
    path: /tasks/bootstrap/kubeadm-bootstrap/kubelet-config#kubeadmconfigtemplate
    method: GET
    data_selector: records
    params: {}
- name: MicroK8sControlPlane
  endpoint:
    path: /controlplane.cluster.x-k8s.io/v1beta1/MicroK8sControlPlane
    method: GET
    data_selector: spec
    params: {}
- name: MachineDeployment
  endpoint:
    path: /cluster.x-k8s.io/v1beta2/MachineDeployment
    method: GET
    data_selector: spec
    params: {}
- name: vpc
  endpoint:
    path: /v1/vpc
    method: GET
- name: powervs
  endpoint:
    path: /v1/powervs
    method: GET
- name: workload_cluster
  endpoint:
    path: /RPC2
    method: POST
    data_selector: result
    params: {}
- name: scaleway_secret
  endpoint:
    path: /v1/secret
    method: POST
- name: KubeadmConfig
  endpoint:
    path: /kubeadmconfig
    method: GET
    data_selector: items
    params: {}
- name: DockerCluster
  endpoint:
    path: /dockercluster
    method: GET
    data_selector: items
    params: {}
- name: Cluster
  endpoint:
    path: /clusters
    method: GET
    data_selector: items
    params: {}
- name: Machine
  endpoint:
    path: /machines
    method: GET
    data_selector: items
    params: {}
- name: MicroK8sControlPlane
  endpoint:
    path: /api/v1beta2/microk8scontrolplanes
    method: POST
    data_selector: items
    params: {}
- name: MachineDeployment
  endpoint:
    path: /api/v1beta2/machinedeployments
    method: POST
    data_selector: items
    params: {}
- name: MachineDeployment
  endpoint:
    path: /machinedeployments
    method: GET
    data_selector: items
    params: {}
- name: etcd
  endpoint:
    path: /etcd
    method: GET
    data_selector: items
    params: {}
- name: management_cluster
  endpoint:
    path: /cluster-api/management
    method: GET
    data_selector: clusters
    params: {}
- name: VPC
  endpoint:
    path: /v1/vpcs
    method: GET
    data_selector: vpcs
    params: {}
- name: PowerVS
  endpoint:
    path: /v1/powervs
    method: GET
    data_selector: instances
    params: {}
- name: workload_cluster
  endpoint:
    path: /RPC2
    method: POST
    data_selector: cluster_data
    params:
      cluster_name: one
- name: scaleway-secret
  endpoint:
    path: /v1/secret/scaleway-secret
    method: GET
    data_selector: data
    params: {}
- name: MicroK8sControlPlane
  endpoint:
    path: /api/v1beta1/microk8scontrolplane
    method: POST
    data_selector: spec
    params: {}
- name: MachineDeployment
  endpoint:
    path: /api/v1beta1/machinedeployment
    method: POST
    data_selector: spec
    params: {}
- name: MicroK8sConfigTemplate
  endpoint:
    path: /api/v1beta1/microk8sconfigtemplate
    method: POST
    data_selector: spec
    params: {}
- name: MachineTemplate
  endpoint:
    path: /api/v1/machineTemplates
    method: POST
- name: KubeadmControlPlane
  endpoint:
    path: /api/v1/kubeadmControlPlanes
    method: PATCH
- name: MachineDeployment
  endpoint:
    path: /api/v1/machineDeployments
    method: PATCH
- name: machine_health_check_worker_nodes
  endpoint:
    path: /api/v1/machinehealthchecks/worker
    method: POST
    data_selector: spec
    params:
      clusterName: capi-quickstart
      maxUnhealthy: 40%
      nodeStartupTimeout: 10m
      selector:
        matchLabels:
          nodepool: nodepool-0
      unhealthyNodeConditions:
      - type: Ready
        status: Unknown
        timeout: 300s
      - type: Ready
        status: 'False'
        timeout: 300s
- name: machine_health_check_control_plane_nodes
  endpoint:
    path: /api/v1/machinehealthchecks/controlplane
    method: POST
    data_selector: spec
    params:
      clusterName: capi-quickstart
      maxUnhealthy: 100%
      selector:
        matchLabels:
          cluster.x-k8s.io/control-plane: ''
      unhealthyNodeConditions:
      - type: Ready
        status: Unknown
        timeout: 300s
      - type: Ready
        status: 'False'
        timeout: 300s
- name: kubeadm_control_plane
  endpoint:
    path: /api/v1/kubeadmcontrolplane
    method: POST
    data_selector: spec
    params:
      remediationStrategy:
        maxRetry: 5
        retryPeriod: 2m
        minHealthyPeriod: 2h
- name: management cluster
  endpoint:
    path: /clusterctl/init
    method: POST
- name: kind
  endpoint:
    path: /kind/create
    method: POST
- name: vpc
  endpoint:
    path: /v1/vpcs
    method: GET
    data_selector: vpcs
    params: {}
- name: powervs
  endpoint:
    path: /v1/powervs
    method: GET
    data_selector: powervs
    params: {}
- name: cluster
  endpoint:
    path: /generate/cluster
    method: GET
- name: scaleway-secret
  endpoint:
    path: /v1alpha1/secrets
    method: CREATE
    data_selector: secrets
    params: {}
- name: MicroK8sControlPlane
  endpoint:
    path: /api/v1/microk8s/controlplane
    method: GET
    data_selector: spec
    params: {}
- name: MachineDeployment
  endpoint:
    path: /api/v1/microk8s/machinedeployment
    method: GET
    data_selector: spec
    params: {}
- name: KubeadmControlPlane
  endpoint:
    path: /kubeadmcontrolplanes
    method: GET
    data_selector: items
- name: MachineDeployment
  endpoint:
    path: /machinedeployments
    method: GET
    data_selector: items
- name: MachineDeployment
  endpoint:
    path: /api/v1/MachineDeployment
    method: POST
    data_selector: metadata.annotations
- name: MachineHealthCheck
  endpoint:
    path: /api/v1/machinehealthcheck
    method: POST
- name: KubeadmControlPlane
  endpoint:
    path: /api/v1/kubeadmcontrolplane
    method: POST
- name: ClusterClass
  endpoint:
    path: /api/v1/clusterclass
    method: GET
- name: Cluster
  endpoint:
    path: /api/v1/cluster
    method: GET
- name: VPC
  endpoint:
    path: /v1/vpcs
    method: GET
    data_selector: vpcs
- name: PowerVS
  endpoint:
    path: /v1/powervs
    method: GET
    data_selector: powervs
- name: workload_cluster
  endpoint:
    path: /clusters
    method: GET
    data_selector: clusters
    params: {}
- name: scaleway_secret
  endpoint:
    path: /services/data/vXX.X/sobjects/Secret
    method: POST
    data_selector: records
- name: cluster
  endpoint:
    path: /clusters
    method: GET
    data_selector: clusters
    params: {}
- name: machine
  endpoint:
    path: /machines
    method: GET
    data_selector: machines
    params: {}
- name: MicroK8sControlPlane
  endpoint:
    path: /api/v1beta2/controlplane.cluster.x-k8s.io/microk8s
    method: GET
    data_selector: spec
    params: {}
- name: MachineDeployment
  endpoint:
    path: /api/v1beta2/machine.deployment.cluster.x-k8s.io
    method: GET
    data_selector: spec
    params: {}
- name: KubeadmControlPlane
  endpoint:
    path: /kubeadmcontrolplanes
    method: GET
- name: MachineDeployment
  endpoint:
    path: /machinedeployments
    method: GET
- name: MachineHealthCheck
  endpoint:
    path: /machinehealthchecks
    method: GET
- name: KubeadmControlPlane
  endpoint:
    path: /spec/machineTemplate/metadata/labels
    method: GET
    data_selector: records
    params: {}
- name: machine_health_check
  endpoint:
    path: /api/machine_health_checks
    method: POST
    data_selector: spec
    params:
      clusterName: capi-quickstart
      maxUnhealthy: 40%
      nodeStartupTimeout: 10m
      selector:
        matchLabels:
          nodepool: nodepool-0
      unhealthyNodeConditions:
      - type: Ready
        status: Unknown
        timeout: 300s
      - type: Ready
        status: 'False'
        timeout: 300s
- name: ClusterClass
  endpoint:
    path: /clusterclasses
    method: GET
    data_selector: items
- name: Cluster
  endpoint:
    path: /clusters
    method: GET
    data_selector: items
- name: clusterName
  endpoint:
    path: /spec/template/spec/kubeadmConfigSpec/clusterConfiguration/controllerManager/extraArgs/cluster-name
    method: add
    data_selector: valueFrom
    params: {}
- name: customImage
  endpoint:
    path: /spec/template/spec/customImage
    method: add
    data_selector: valueFrom
    params: {}
- name: httpProxy
  endpoint:
    path: /spec/template/spec/httpProxy/url
    method: add
    data_selector: valueFrom
    params: {}
- name: dnsServers
  endpoint:
    path: /spec/template/spec/dnsServers
    method: add
    data_selector: valueFrom
    params: {}
- name: ibmcloud
  endpoint:
    path: /init
    method: POST
    data_selector: response
    params:
      IBMCLOUD_API_KEY: <your_api_key>
- name: ionoscloud
  endpoint:
    path: /init
    method: POST
    data_selector: response
- name: k0sproject-k0smotron
  endpoint:
    path: /init
    method: POST
    data_selector: response
- name: kubekey
  endpoint:
    path: /init
    method: POST
    data_selector: response
- name: opennebula
  endpoint:
    path: /init
    method: POST
    data_selector: response
- name: openstack
  endpoint:
    path: /init
    method: POST
    data_selector: response
- name: outscale
  endpoint:
    path: /init
    method: POST
    data_selector: response
    params:
      OSC_SECRET_KEY: <your-secret-key>
      OSC_ACCESS_KEY: <your-access-key>
      OSC_REGION: <you-region>
- name: proxmox
  endpoint:
    path: /init
    method: POST
    data_selector: response
    params:
      PROXMOX_URL: https://pve.example:8006
      PROXMOX_TOKEN: root@pam!capi
      PROXMOX_SECRET: 1234-1234-1234-1234
- name: scaleway
  endpoint:
    path: /init
    method: POST
    data_selector: response
- name: vcd
  endpoint:
    path: /init
    method: POST
    data_selector: response
- name: vcluster
  endpoint:
    path: /init
    method: POST
    data_selector: response
- name: virtink
  endpoint:
    path: /init
    method: POST
    data_selector: response
- name: vsphere
  endpoint:
    path: /init
    method: POST
    data_selector: response
    params:
      VSPHERE_USERNAME: vi-admin@vsphere.local
      VSPHERE_PASSWORD: admin!23
- name: vultr
  endpoint:
    path: /init
    method: POST
    data_selector: response
    params:
      VULTR_API_KEY: <your-vultr-api-key>
- name: workload_clusters
  endpoint:
    path: /v1/clusters
    method: GET
    data_selector: clusters
    params: {}
- name: scaleway-secret
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: POST
    data_selector: records
    params: {}
- name: KubeadmConfig
  endpoint:
    path: /kubeadmconfig
    method: POST
    data_selector: data
    params: {}
- name: DockerCluster
  endpoint:
    path: /dockercluster
    method: POST
    data_selector: data
    params: {}
- name: Machine
  endpoint:
    path: /machine
    method: POST
    data_selector: data
    params: {}
- name: MicroK8sControlPlane
  endpoint:
    path: /api/v1beta2/MicroK8sControlPlane
    method: POST
    data_selector: spec
    params: {}
- name: MachineDeployment
  endpoint:
    path: /api/v1beta2/MachineDeployment
    method: POST
    data_selector: spec
    params: {}
- name: MicroK8sConfigTemplate
  endpoint:
    path: /api/v1beta1/MicroK8sConfigTemplate
    method: POST
    data_selector: spec
    params: {}
- name: MachineTemplate
  endpoint:
    path: /services/data/vXX.X/sobjects/MachineTemplate
    method: POST
    data_selector: records
- name: KubeadmControlPlane
  endpoint:
    path: /services/data/vXX.X/sobjects/KubeadmControlPlane
    method: PATCH
    data_selector: records
- name: MachineDeployment
  endpoint:
    path: /api/v1/MachineDeployment
    method: GET
    data_selector: items
    params: {}
- name: MachineSet
  endpoint:
    path: /api/v1/MachineSet
    method: GET
    data_selector: items
    params: {}
- name: MachinePool
  endpoint:
    path: /api/v1/MachinePool
    method: GET
    data_selector: items
    params: {}
- name: MachineHealthCheck
  endpoint:
    path: /apis/cluster.x-k8s.io/v1beta2/machinehealthchecks
    method: GET
    data_selector: items
- name: KubeadmControlPlane
  endpoint:
    path: /apis/cluster.x-k8s.io/v1beta2/kubeadmcontrolplanes
    method: GET
    data_selector: items
- name: docker-clusterclass-v0.1.0
  endpoint:
    path: /cluster-class
    method: GET
- name: my-docker-cluster
  endpoint:
    path: /clusters/my-docker-cluster
    method: GET
- name: customImage
  endpoint:
    path: /spec/template/spec/customImage
    method: add
    data_selector: valueFrom.template
    params: {}
- name: httpProxy
  endpoint:
    path: /spec/template/spec/httpProxy/url
    method: add
    data_selector: valueFrom.variable
    params: {}
- name: mdConfig
  endpoint:
    path: /spec/template/spec/customImage
    method: add
    data_selector: valueFrom.template
    params: {}
- name: dnsServers
  endpoint:
    path: /spec/template/spec/dnsServers
    method: add
    data_selector: valueFrom.variable
    params: {}
- name: dnsServer
  endpoint:
    path: /spec/template/spec/dnsServer
    method: add
    data_selector: valueFrom.variable
    params: {}
- name: VPC
  endpoint:
    path: /v1/vpcs
    method: GET
    data_selector: vpcs
- name: PowerVS
  endpoint:
    path: /v1/power-vs
    method: GET
    data_selector: powervs
- name: cluster
  endpoint:
    path: /clusters
    method: GET
    data_selector: clusters
    params: {}
- name: images
  endpoint:
    path: /images
    method: GET
    data_selector: images
    params: {}
- name: scaleway-secret
  endpoint:
    path: /
    method: apply
    data_selector: stringData
    params: {}
- name: calico
  endpoint:
    path: /
    method: apply
    data_selector: helm
    params: {}
- name: KubeadmConfig
  endpoint:
    path: /kubeadm/config
    method: GET
    data_selector: items
    params: {}
- name: DockerCluster
  endpoint:
    path: /docker/cluster
    method: GET
    data_selector: items
    params: {}
- name: Machine
  endpoint:
    path: /machines
    method: GET
    data_selector: items
    params: {}
- name: MicroK8sControlPlane
  endpoint:
    path: /api/v1beta1/microk8scontrolplanes
    method: POST
    data_selector: spec
    params: {}
- name: MachineDeployment
  endpoint:
    path: /api/v1beta2/machinedeployments
    method: POST
    data_selector: spec
    params: {}
- name: MachineTemplate
  endpoint:
    path: /path/to/machinetemplate
    method: POST
- name: KubeadmControlPlane
  endpoint:
    path: /path/to/kubeadmcontrolplane
    method: PATCH
- name: MachineDeployment
  endpoint:
    path: /path/to/machinedeployment
    method: PATCH
- name: MachineDeployment
  endpoint:
    path: /api/v1/MachineDeployment
    method: POST
    data_selector: items
- name: MachineHealthCheck
  endpoint:
    path: /api/v1beta2/machinehealthchecks
    method: POST
    data_selector: status
    params: {}
- name: ClusterClass
  endpoint:
    path: /cluster/class
    method: GET
- name: Cluster
  endpoint:
    path: /cluster
    method: GET
- name: customImage
  endpoint:
    path: /spec/template/spec/customImage
    method: add
    data_selector: valueFrom.template
    params: {}
- name: httpProxy
  endpoint:
    path: /spec/template/spec/httpProxy/url
    method: add
    data_selector: valueFrom.variable
    params: {}
- name: mdConfig
  endpoint:
    path: /spec/template/spec/customImage
    method: add
    data_selector: valueFrom.template
    params: {}
- name: dnsServers
  endpoint:
    path: /spec/template/spec/dnsServers
    method: add
    data_selector: valueFrom.variable
    params: {}
- name: dnsServer
  endpoint:
    path: /spec/template/spec/dnsServer
    method: add
    data_selector: valueFrom.variable
    params: {}
- name: etcdImageTag
  endpoint:
    path: /spec/template/spec/kubeadmConfigSpec/clusterConfiguration/etcd
    method: add
    data_selector: valueFrom.template
    params: {}
- name: imageRepository
  endpoint:
    path: /spec/template/spec/kubeadmConfigSpec/clusterConfiguration/imageRepository
    method: add
    data_selector: value
    params: {}
- name: management_cluster
  endpoint:
    path: /init
    method: POST
    data_selector: providers
    params: {}
- name: vpc
  endpoint:
    path: /v1/vpcs
    method: GET
    data_selector: vpcs
- name: powervs
  endpoint:
    path: /v1/power-vs
    method: GET
    data_selector: powervs
- name: vm_template
  endpoint:
    path: /RPC2
    method: POST
    data_selector: result
    params: {}
- name: network
  endpoint:
    path: /RPC2
    method: POST
    data_selector: result
    params: {}
- name: scaleway-secret
  endpoint:
    path: /kube-system/scaleway-secret
    method: GET
    data_selector: stringData
    params: {}
- name: MicroK8sControlPlane
  endpoint:
    path: /cluster.x-k8s.io/v1beta2/microk8scontrolplanes
    method: GET
    data_selector: items
    params: {}
- name: MachineDeployment
  endpoint:
    path: /cluster.x-k8s.io/v1beta2/machinedeployments
    method: GET
    data_selector: items
    params: {}
- name: MicroK8sConfigTemplate
  endpoint:
    path: /bootstrap.cluster.x-k8s.io/v1beta1/microk8sconfigtemplates
    method: GET
    data_selector: items
    params: {}
- name: MachineDeployment
  endpoint:
    path: /machine-deployments
    method: GET
    data_selector: items
    params: {}
- name: MachineSet
  endpoint:
    path: /machine-sets
    method: GET
    data_selector: items
    params: {}
- name: MachineHealthCheck
  endpoint:
    path: /services/data/vXX.X/sobjects/MachineHealthCheck
    method: GET
    data_selector: records
    params: {}
- name: cluster
  endpoint:
    path: /api/v1beta2/clusters
    method: GET
    data_selector: items
    params: {}
- name: customImage
  endpoint:
    path: /spec/template/spec/customImage
    method: add
    data_selector: valueFrom.template
    params: {}
- name: httpProxy
  endpoint:
    path: /spec/template/spec/httpProxy/url
    method: add
    data_selector: valueFrom.variable
    params: {}
- name: mdConfig
  endpoint:
    path: /spec/template/spec/customImage
    method: add
    data_selector: valueFrom.template
    params: {}
- name: dnsServers
  endpoint:
    path: /spec/template/spec/dnsServers
    method: add
    data_selector: valueFrom.variable
    params: {}
- name: firstDnsServer
  endpoint:
    path: /spec/template/spec/dnsServer
    method: add
    data_selector: valueFrom.variable
    params: {}
- name: etcdImageTag
  endpoint:
    path: /spec/template/spec/kubeadmConfigSpec/clusterConfiguration/etcd
    method: add
    data_selector: valueFrom.template
    params: {}
- name: imageRepository
  endpoint:
    path: /spec/template/spec/kubeadmConfigSpec/clusterConfiguration/imageRepository
    method: add
    data_selector: value
    params: {}
- name: MachineDeployment
  endpoint:
    path: /spec/topology/workers/machineDeployments
    method: PATCH
    data_selector: metadata
    params: {}
- name: ControlPlane
  endpoint:
    path: /spec/topology/controlPlane
    method: PATCH
    data_selector: metadata
    params: {}
- name: Cluster
  endpoint:
    path: /spec/topology
    method: PATCH
    data_selector: metadata
    params: {}
- name: before-cluster-create
  endpoint:
    path: /before-cluster-create
    method: POST
    data_selector: request
    params: {}
- name: before-cluster-upgrade
  endpoint:
    path: /before-cluster-upgrade
    method: POST
    data_selector: request
    params: {}
- name: management_cluster
  endpoint:
    path: /management_cluster
    method: POST
    data_selector: data
- name: infrastructure_provider
  endpoint:
    path: /infrastructure_provider
    method: GET
    data_selector: providers
- name: workload_cluster
  endpoint:
    path: /workload
    method: GET
    data_selector: clusters
    params: {}
- name: scaleway-secret
  endpoint:
    path: /kubernetes/v1/secret
    method: POST
    data_selector: metadata
    params: {}
- name: KubeadmConfig
  endpoint:
    path: /kubeadmconfig
    method: GET
    data_selector: items
    params: {}
- name: DockerCluster
  endpoint:
    path: /dockercluster
    method: GET
    data_selector: items
    params: {}
- name: Machine
  endpoint:
    path: /machines
    method: GET
    data_selector: items
    params: {}
- name: MicroK8sControlPlane
  endpoint:
    path: /controlplane.cluster.x-k8s.io/v1beta1/MicroK8sControlPlane
    method: POST
    data_selector: spec
    params: {}
- name: MachineDeployment
  endpoint:
    path: /cluster.x-k8s.io/v1beta2/MachineDeployment
    method: POST
    data_selector: spec
    params: {}
- name: MicroK8sConfigTemplate
  endpoint:
    path: /bootstrap.cluster.x-k8s.io/v1beta1/MicroK8sConfigTemplate
    method: POST
    data_selector: spec
    params: {}
- name: MachineDeployment
  endpoint:
    path: /apis/cluster.x-k8s.io/v1alpha4/machinedeployments
    method: POST
    data_selector: items
    params: {}
- name: MachineSet
  endpoint:
    path: /apis/cluster.x-k8s.io/v1alpha4/machinesets
    method: POST
    data_selector: items
    params: {}
- name: MachinePool
  endpoint:
    path: /apis/cluster.x-k8s.io/v1alpha4/machinepools
    method: POST
    data_selector: items
    params: {}
- name: machine_health_check
  endpoint:
    path: /api/v1/machinehealthchecks
    method: POST
    data_selector: status
    params:
      clusterName: capi-quickstart
      maxUnhealthy: 40%
      nodeStartupTimeout: 10m
      selector:
        matchLabels:
          nodepool: nodepool-0
      unhealthyNodeConditions:
      - type: Ready
        status: Unknown
        timeout: 300s
      - type: Ready
        status: 'False'
        timeout: 300s
- name: ClusterClass
  endpoint:
    path: /clusterclasses
    method: GET
    data_selector: items
- name: Cluster
  endpoint:
    path: /clusters
    method: GET
    data_selector: items
- name: docker-clusterclass
  endpoint:
    path: /v1beta2/ClusterClass
    method: GET
    data_selector: items
    params: {}
- name: BeforeClusterCreate
  endpoint:
    path: /api/v1/namespaces/default/services/https:webhook-service:443/proxy/hooks.runtime.cluster.x-k8s.io/v1alpha1/before-cluster-create
    method: POST
    data_selector: status
    params: {}
- name: BeforeClusterUpgrade
  endpoint:
    path: /api/v1/namespaces/default/services/https:webhook-service:443/proxy/hooks.runtime.cluster.x-k8s.io/v1alpha1/before-cluster-upgrade
    method: POST
    data_selector: status
    params: {}
- name: AfterControlPlaneUpgrade
  endpoint:
    path: /api/v1/namespaces/default/services/https:webhook-service:443/proxy/hooks.runtime.cluster.x-k8s.io/v1alpha1/after-control-plane-upgrade
    method: POST
    data_selector: status
    params: {}
- name: vpc
  endpoint:
    path: /v1/vpcs
    method: GET
- name: workload_cluster
  endpoint:
    path: /v1/cluster
    method: POST
    data_selector: cluster
    params:
      name: one
- name: scaleway_secret
  endpoint:
    path: /v1/secret
    method: POST
    data_selector: secret
    params: {}
- name: MicroK8sControlPlane
  endpoint:
    path: /controlplane.cluster.x-k8s.io/v1beta1/MicroK8sControlPlane
    method: POST
    data_selector: spec
    params: {}
- name: MachineDeployment
  endpoint:
    path: /cluster.x-k8s.io/v1beta2/MachineDeployment
    method: POST
    data_selector: spec
    params: {}
- name: MachineDeployment
  endpoint:
    path: /api/v1/MachineDeployment
    method: POST
    data_selector: metadata.annotations
- name: MachineSet
  endpoint:
    path: /api/v1/MachineSet
    method: POST
    data_selector: metadata.annotations
- name: MachineHealthCheck
  endpoint:
    path: /api/v1beta2/machinehealthchecks
    method: GET
    data_selector: items
    params: {}
- name: KubeadmControlPlane
  endpoint:
    path: /api/v1beta2/kubeadmcontrolplanes
    method: GET
    data_selector: items
    params: {}
- name: ClusterClass
  endpoint:
    path: /clusterclasses
    method: GET
    data_selector: items
    params: {}
- name: Cluster
  endpoint:
    path: /clusters
    method: GET
    data_selector: items
    params: {}
- name: ClusterClass
  endpoint:
    path: /ClusterClass
    method: GET
    data_selector: items
    params: {}
- name: BeforeClusterCreate
  endpoint:
    path: /before-cluster-create
    method: POST
    data_selector: settings
    params: {}
- name: AfterControlPlaneInitialized
  endpoint:
    path: /after-control-plane-initialized
    method: POST
    data_selector: settings
    params: {}
- name: BeforeClusterUpgrade
  endpoint:
    path: /before-cluster-upgrade
    method: POST
    data_selector: settings
    params:
      fromKubernetesVersion: v1.21.2
      toKubernetesVersion: v1.22.0
- name: AfterControlPlaneUpgrade
  endpoint:
    path: /after-control-plane-upgrade
    method: POST
    data_selector: settings
    params:
      kubernetesVersion: v1.22.0
- name: AfterClusterUpgrade
  endpoint:
    path: /after-cluster-upgrade
    method: POST
    data_selector: settings
    params:
      kubernetesVersion: v1.22.0
- name: BeforeClusterDelete
  endpoint:
    path: /before-cluster-delete
    method: POST
    data_selector: settings
    params: {}
- name: Cluster
  endpoint:
    path: /clusters
    method: GET
    data_selector: items
    params: {}
- name: management_cluster
  endpoint:
    path: /init
    method: POST
    data_selector: results
- name: control_plane
  endpoint:
    path: /cluster/control_plane
    method: POST
- name: worker
  endpoint:
    path: /cluster/worker
    method: POST
- name: MicroK8sControlPlane
  endpoint:
    path: /api/v1/MicroK8sControlPlane
    method: GET
    data_selector: controlPlaneConfig
    params: {}
- name: MachineDeployment
  endpoint:
    path: /api/v1/MachineDeployment
    method: GET
    data_selector: template
    params: {}
- name: MachineDeployment
  endpoint:
    path: /api/v1/MachineDeployment
    method: POST
    data_selector: metadata.annotations
    params: {}
- name: machine_health_check
  endpoint:
    path: /machineHealthChecks
    method: GET
    data_selector: items
    params: {}
- name: cluster
  endpoint:
    path: /api/v1/clusters
    method: GET
    data_selector: items
    params: {}
- name: customImage
  endpoint:
    path: /spec/template/spec/customImage
    method: add
- name: httpProxy
  endpoint:
    path: /spec/template/spec/httpProxy/url
    method: add
- name: mdConfig
  endpoint:
    path: /spec/template/spec/customImage
    method: add
- name: dnsServers
  endpoint:
    path: /spec/template/spec/dnsServers
    method: add
- name: controlPlane
  endpoint:
    path: /controlPlane
    method: PATCH
    data_selector: spec
    params: {}
- name: workers
  endpoint:
    path: /workers
    method: PATCH
    data_selector: spec
    params: {}
- name: BeforeClusterCreate
  endpoint:
    path: /hooks/runtime/cluster/x-k8s.io/v1alpha1/BeforeClusterCreateRequest
    method: POST
    data_selector: settings
    params: {}
- name: AfterControlPlaneInitialized
  endpoint:
    path: /hooks/runtime/cluster/x-k8s.io/v1alpha1/AfterControlPlaneInitializedRequest
    method: POST
    data_selector: settings
    params: {}
- name: BeforeClusterUpgrade
  endpoint:
    path: /hooks/runtime/cluster/x-k8s.io/v1alpha1/BeforeClusterUpgradeRequest
    method: POST
    data_selector: settings
    params:
      fromKubernetesVersion: v1.21.2
      toKubernetesVersion: v1.22.0
- name: AfterControlPlaneUpgrade
  endpoint:
    path: /hooks/runtime/cluster/x-k8s.io/v1alpha1/AfterControlPlaneUpgradeRequest
    method: POST
    data_selector: settings
    params:
      kubernetesVersion: v1.22.0
- name: AfterClusterUpgrade
  endpoint:
    path: /hooks/runtime/cluster/x-k8s.io/v1alpha1/AfterClusterUpgradeRequest
    method: POST
    data_selector: settings
    params:
      kubernetesVersion: v1.22.0
- name: BeforeClusterDelete
  endpoint:
    path: /hooks/runtime/cluster/x-k8s.io/v1alpha1/BeforeClusterDeleteRequest
    method: POST
    data_selector: settings
    params: {}
- name: GeneratePatches
  endpoint:
    path: /hooks/runtime/cluster/x-k8s.io/v1alpha1/GeneratePatchesRequest
    method: POST
    data_selector: variables
    params: {}
- name: ValidateTopology
  endpoint:
    path: /hooks/runtime/cluster/x-k8s.io/v1alpha1/ValidateTopologyRequest
    method: POST
    data_selector: variables
    params: {}
- name: DiscoverVariables
  endpoint:
    path: /hooks/runtime/cluster/x-k8s.io/v1alpha1/DiscoverVariablesRequest
    method: POST
    data_selector: settings
    params: {}
- name: ignition-cluster
  endpoint:
    path: /cluster-api/ignition-cluster
    method: POST
    data_selector: variables
    params: {}
- name: default-metrics
  endpoint:
    path: /metrics
    method: GET
    data_selector: ''
    params: {}
- name: default-pprof
  endpoint:
    path: /debug/pprof/*
    method: GET
    data_selector: ''
    params: {}
- name: default-loglevel
  endpoint:
    path: /debug/flags/v
    method: PUT
    data_selector: ''
    params: {}
- name: VPC
  endpoint:
    path: /v1/volumes
    method: GET
    data_selector: volumes
- name: workload_cluster
  endpoint:
    path: /cluster
    method: POST
- name: scaleway-secret
  endpoint:
    path: /api/v1/namespaces/kube-system/secrets
    method: POST
    data_selector: metadata
    params: {}
- name: calico
  endpoint:
    path: /api/v1/namespaces/tigera-operator/deployments
    method: POST
    data_selector: metadata
    params: {}
- name: MicroK8sControlPlane
  endpoint:
    path: /controlplane.cluster.x-k8s.io/v1beta1/MicroK8sControlPlane
    method: GET
    data_selector: spec
    params: {}
- name: MachineDeployment
  endpoint:
    path: /cluster.x-k8s.io/v1beta2/MachineDeployment
    method: GET
    data_selector: spec
    params: {}
- name: KubeadmControlPlane
  endpoint:
    path: /kubeadmcontrolplane
    method: GET
- name: MachineDeployment
  endpoint:
    path: /machinedeployment
    method: GET
- name: MachineDeployment
  endpoint:
    path: /api/v1/MachineDeployment
    method: POST
    data_selector: items
    params: {}
- name: MachineSet
  endpoint:
    path: /api/v1/MachineSet
    method: POST
    data_selector: items
    params: {}
- name: MachineHealthCheck
  endpoint:
    path: /api/v1beta2/machinehealthchecks
    method: GET
    data_selector: items
    params: {}
- name: KubeadmControlPlane
  endpoint:
    path: /api/v1beta2/kubeadmcontrolplanes
    method: GET
    data_selector: items
    params: {}
- name: ClusterClass
  endpoint:
    path: /cluster.x-k8s.io/v1beta2
    method: GET
    data_selector: spec
    params: {}
- name: Cluster
  endpoint:
    path: /cluster.x-k8s.io/v1beta2
    method: GET
    data_selector: spec
    params: {}
- name: customImage
  endpoint:
    path: /spec/template/spec/customImage
    method: add
    data_selector: valueFrom.template
    params: {}
- name: httpProxy
  endpoint:
    path: /spec/template/spec/httpProxy/url
    method: add
    data_selector: valueFrom.variable
    params: {}
- name: mdConfig
  endpoint:
    path: /spec/template/spec/customImage
    method: add
    data_selector: valueFrom.template
    params: {}
- name: dnsServers
  endpoint:
    path: /spec/template/spec/dnsServers
    method: add
    data_selector: valueFrom.variable
    params: {}
- name: dnsServer
  endpoint:
    path: /spec/template/spec/dnsServer
    method: add
    data_selector: valueFrom.variable
    params: {}
- name: etcdImageTag
  endpoint:
    path: /spec/template/spec/kubeadmConfigSpec/clusterConfiguration/etcd
    method: add
    data_selector: valueFrom.template
    params: {}
- name: imageRepository
  endpoint:
    path: /spec/template/spec/kubeadmConfigSpec/clusterConfiguration/imageRepository
    method: add
    data_selector: value
    params: {}
- name: httpProxy
  endpoint:
    path: /spec/template/spec/httpProxy
    method: add
    data_selector: enabledIf
    params: {}
- name: ExtensionConfig
  endpoint:
    path: /api/v1/namespaces/default/services/https:webhook-service:443/proxy/hooks.runtime.cluster.x-k8s.io/v1alpha1/discovery
    method: POST
    data_selector: items
    params: {}
- name: BeforeClusterCreate
  endpoint:
    path: /before-cluster-create
    method: POST
    data_selector: settings
    params: {}
- name: AfterControlPlaneInitialized
  endpoint:
    path: /after-control-plane-initialized
    method: POST
    data_selector: settings
    params: {}
- name: BeforeClusterUpgrade
  endpoint:
    path: /before-cluster-upgrade
    method: POST
    data_selector: settings
    params:
      fromKubernetesVersion: v1.21.2
      toKubernetesVersion: v1.22.0
- name: AfterControlPlaneUpgrade
  endpoint:
    path: /after-control-plane-upgrade
    method: POST
    data_selector: settings
    params:
      kubernetesVersion: v1.22.0
- name: AfterClusterUpgrade
  endpoint:
    path: /after-cluster-upgrade
    method: POST
    data_selector: settings
    params:
      kubernetesVersion: v1.22.0
- name: BeforeClusterDelete
  endpoint:
    path: /before-cluster-delete
    method: POST
    data_selector: settings
    params: {}
- name: DiscoverVariablesRequest
  endpoint:
    path: /hooks.runtime.cluster.x-k8s.io/v1alpha1
    method: GET
    data_selector: variables
    params: {}
- name: DiscoverVariablesResponse
  endpoint:
    path: /hooks.runtime.cluster.x-k8s.io/v1alpha1
    method: GET
    data_selector: variables
    params: {}
- name: ClusterClass
  endpoint:
    path: /cluster-classes
    method: POST
    data_selector: metadata
    params: {}
- name: podSecurityStandard
  endpoint:
    path: /spec/template/spec/kubeadmConfigSpec/clusterConfiguration/apiServer/extraArgs
    method: POST
    data_selector: value
    params: {}
- name: extraVolumes
  endpoint:
    path: /spec/template/spec/kubeadmConfigSpec/clusterConfiguration/apiServer/extraVolumes
    method: POST
    data_selector: value
    params: {}
- name: files
  endpoint:
    path: /spec/template/spec/kubeadmConfigSpec/files
    method: POST
    data_selector: valueFrom.template
    params: {}
- name: VPC
  endpoint:
    path: /v1/vpcs
    method: GET
    data_selector: vpcs
- name: PowerVS
  endpoint:
    path: /v1/power-vs
    method: GET
    data_selector: instances
- name: cluster
  endpoint:
    path: /cluster
    method: POST
    data_selector: cluster_data
    params: {}
- name: KubeadmConfig
  endpoint:
    path: /kubeadmconfig
    method: GET
    data_selector: items
    params: {}
- name: DockerCluster
  endpoint:
    path: /dockercluster
    method: GET
    data_selector: items
    params: {}
- name: Machine
  endpoint:
    path: /machine
    method: GET
    data_selector: items
    params: {}
- name: MicroK8sControlPlane
  endpoint:
    path: /controlplane.cluster.x-k8s.io/v1beta1/MicroK8sControlPlane
    method: POST
    data_selector: spec
    params: {}
- name: MachineDeployment
  endpoint:
    path: /cluster.x-k8s.io/v1beta2/MachineDeployment
    method: POST
    data_selector: spec
    params: {}
- name: MicroK8sConfigTemplate
  endpoint:
    path: /bootstrap.cluster.x-k8s.io/v1beta1/MicroK8sConfigTemplate
    method: POST
    data_selector: spec
    params: {}
- name: KubeadmControlPlane
  endpoint:
    path: /kubeadmcontrolplanes
    method: POST
    data_selector: items
    params: {}
- name: MachineDeployment
  endpoint:
    path: /machinedeployments
    method: POST
    data_selector: items
    params: {}
- name: MachineDeployment
  endpoint:
    path: /apis/cluster.x-k8s.io/v1beta1/machinedeployments
    method: GET
    data_selector: items
- name: MachineSet
  endpoint:
    path: /apis/cluster.x-k8s.io/v1beta1/machinesets
    method: GET
    data_selector: items
- name: MachineHealthCheck
  endpoint:
    path: ''
    method: ''
    data_selector: ''
    params: {}
- name: KubeadmControlPlane
  endpoint:
    path: ''
    method: ''
    data_selector: ''
    params: {}
- name: ClusterClass
  endpoint:
    path: /clusterclass
    method: GET
    data_selector: items
    params: {}
- name: Cluster
  endpoint:
    path: /clusters
    method: GET
    data_selector: items
    params: {}
- name: docker-clusterclass
  endpoint:
    path: /cluster.x-k8s.io/v1beta2/ClusterClass
    method: GET
    data_selector: metadata.name
    params: {}
- name: cluster
  endpoint:
    path: /clusters
    method: GET
    data_selector: items
    params: {}
- name: ExtensionConfig
  endpoint:
    path: /api/v1/namespaces/default/services/https:webhook-service:443/proxy/hooks.runtime.cluster.x-k8s.io/v1alpha1/discovery
    method: POST
    data_selector: apiVersion
    params: {}
- name: BeforeClusterCreate
  endpoint:
    path: /before-cluster-create
    method: POST
    data_selector: status
    params: {}
- name: AfterControlPlaneInitialized
  endpoint:
    path: /after-control-plane-initialized
    method: POST
    data_selector: status
    params: {}
- name: BeforeClusterUpgrade
  endpoint:
    path: /before-cluster-upgrade
    method: POST
    data_selector: status
    params: {}
- name: AfterControlPlaneUpgrade
  endpoint:
    path: /after-control-plane-upgrade
    method: POST
    data_selector: status
    params: {}
- name: AfterClusterUpgrade
  endpoint:
    path: /after-cluster-upgrade
    method: POST
    data_selector: status
    params: {}
- name: BeforeClusterDelete
  endpoint:
    path: /before-cluster-delete
    method: POST
    data_selector: status
    params: {}
- name: GeneratePatches
  endpoint:
    path: /generate-patches
    method: POST
    data_selector: status
    params: {}
- name: ValidateTopology
  endpoint:
    path: /validate-topology
    method: POST
    data_selector: status
    params: {}
- name: DiscoverVariables
  endpoint:
    path: /discover-variables
    method: POST
    data_selector: variables
    params: {}
- name: etcdImageTag
  endpoint:
    path: /etcdImageTag
    method: GET
    data_selector: schema
- name: preLoadImages
  endpoint:
    path: /preLoadImages
    method: GET
    data_selector: schema
- name: podSecurityStandard
  endpoint:
    path: /podSecurityStandard
    method: GET
    data_selector: schema
- name: metrics
  endpoint:
    path: /metrics
    method: GET
- name: pprof
  endpoint:
    path: /debug/pprof
    method: GET
- name: log_level
  endpoint:
    path: /debug/flags/v
    method: PUT
- name: podSecurityStandard
  endpoint:
    path: /spec/template/spec/kubeadmConfigSpec/clusterConfiguration/apiServer/extraArgs
    method: add
    data_selector: value
    params: {}
- name: admission-pss
  endpoint:
    path: /spec/template/spec/kubeadmConfigSpec/clusterConfiguration/apiServer/extraVolumes
    method: add
    data_selector: value
    params: {}
- name: files
  endpoint:
    path: /spec/template/spec/kubeadmConfigSpec/files
    method: add
    data_selector: valueFrom
    params: {}
- name: Provider
  endpoint:
    path: /clusterctl/Provider
    method: GET
    data_selector: providers
    params: {}
- name: provider
  endpoint:
    path: /generate/provider
    method: GET
    data_selector: components
- name: kubeconfig
  endpoint:
    path: /get/kubeconfig
    method: GET
    data_selector: kubeconfig
- name: VPC
  endpoint:
    path: /v1/vpcs
    method: GET
- name: PowerVS
  endpoint:
    path: /v1/powervs
    method: GET
- name: workload_cluster
  endpoint:
    path: /api/v1/cluster
    method: GET
    data_selector: clusters
    params: {}
- name: scaleway-secret
  endpoint:
    path: /kube-system/secrets/scaleway-secret
    method: POST
    data_selector: stringData
    params: {}
- name: KubeadmConfig
  endpoint:
    path: /kubeadmconfigs
    method: GET
    data_selector: items
    params: {}
- name: DockerCluster
  endpoint:
    path: /dockerclusters
    method: GET
    data_selector: items
    params: {}
- name: Machine
  endpoint:
    path: /machines
    method: GET
    data_selector: items
    params: {}
- name: MicroK8sControlPlane
  endpoint:
    path: /api/v1beta2/microk8scontrolplanes
    method: GET
    data_selector: items
    params: {}
- name: MachineDeployment
  endpoint:
    path: /api/v1beta2/machinedeployments
    method: GET
    data_selector: items
    params: {}
- name: MachineDeployment
  endpoint:
    path: /services/data/v1alpha4/MachineDeployment
    method: GET
    data_selector: records
    params: {}
- name: MachineSet
  endpoint:
    path: /services/data/v1alpha4/MachineSet
    method: GET
    data_selector: records
    params: {}
- name: MachinePool
  endpoint:
    path: /services/data/v1alpha4/MachinePool
    method: GET
    data_selector: records
    params: {}
- name: MachineHealthCheck
  endpoint:
    path: /apis/cluster.x-k8s.io/v1beta2/machinehealthchecks
    method: GET
    data_selector: items
    params: {}
- name: ClusterClass
  endpoint:
    path: /clusterclass
    method: GET
    data_selector: items
    params: {}
- name: Cluster
  endpoint:
    path: /clusters
    method: GET
    data_selector: items
    params: {}
- name: docker-clusterclass-v0.1.0
  endpoint:
    path: /clusterClasses/docker-clusterclass-v0.1.0
    method: GET
    data_selector: spec
    params: {}
- name: azure-clusterclass-v0.1.0
  endpoint:
    path: /clusterClasses/azure-clusterclass-v0.1.0
    method: GET
    data_selector: spec
    params: {}
- name: Cluster
  endpoint:
    path: /clusters
    method: PATCH
    data_selector: spec
    params: {}
- name: BeforeClusterCreate
  endpoint:
    path: /before-cluster-create
    method: POST
    data_selector: status
    params: {}
- name: AfterControlPlaneInitialized
  endpoint:
    path: /after-control-plane-initialized
    method: POST
    data_selector: status
    params: {}
- name: BeforeClusterUpgrade
  endpoint:
    path: /before-cluster-upgrade
    method: POST
    data_selector: status
    params: {}
- name: AfterControlPlaneUpgrade
  endpoint:
    path: /after-control-plane-upgrade
    method: POST
    data_selector: status
    params: {}
- name: AfterClusterUpgrade
  endpoint:
    path: /after-cluster-upgrade
    method: POST
    data_selector: status
    params: {}
- name: BeforeClusterDelete
  endpoint:
    path: /before-cluster-delete
    method: POST
    data_selector: status
    params: {}
- name: GeneratePatches
  endpoint:
    path: /generate-patches
    method: POST
    data_selector: status
    params: {}
- name: ValidateTopology
  endpoint:
    path: /validate-topology
    method: POST
    data_selector: status
    params: {}
- name: DiscoverVariables
  endpoint:
    path: /discover-variables
    method: POST
    data_selector: status
    params: {}
- name: metrics
  endpoint:
    path: /metrics
    method: GET
- name: pprof
  endpoint:
    path: /debug/pprof
    method: GET
- name: loglevel
  endpoint:
    path: /debug/flags/v
    method: PUT
- name: podSecurityStandard
  endpoint:
    path: /spec/template/spec/kubeadmConfigSpec/clusterConfiguration/apiServer/extraArgs
    method: add
    data_selector: value
    params: {}
- name: extraVolumes
  endpoint:
    path: /spec/template/spec/kubeadmConfigSpec/clusterConfiguration/apiServer/extraVolumes
    method: add
    data_selector: value
    params: {}
- name: files
  endpoint:
    path: /spec/template/spec/kubeadmConfigSpec/files
    method: add
    data_selector: valueFrom.template
    params: {}
- name: kubeadmcontrolplanes
  endpoint:
    path: /kubeadmcontrolplanes
    method: GET
- name: machinedeployments
  endpoint:
    path: /machinedeployments
    method: GET
- name: providers
  endpoint:
    path: /clusterctl/config/repositories
    method: GET
    data_selector: providers
- name: OpenNebula
  endpoint:
    path: /RPC2
    method: POST
    data_selector: response
    params:
      ONE_XMLRPC: http://10.2.11.40:2633/RPC2
      ONE_AUTH: oneadmin:opennebula
- name: scaleway-secret
  endpoint:
    path: /api/v1/namespaces/kube-system/secrets
    method: POST
    data_selector: metadata.name
    params: {}
- name: KubeadmConfig
  endpoint:
    path: /kubeadmconfig
    method: GET
    data_selector: items
    params: {}
- name: DockerCluster
  endpoint:
    path: /dockercluster
    method: GET
    data_selector: items
    params: {}
- name: Machine
  endpoint:
    path: /machine
    method: GET
    data_selector: items
    params: {}
- name: MicroK8sControlPlane
  endpoint:
    path: /api/v1/namespaces/default/microk8scontrolplanes
    method: POST
    data_selector: items
    params: {}
- name: MachineDeployment
  endpoint:
    path: /api/v1/namespaces/default/machinedeployments
    method: POST
    data_selector: items
    params: {}
- name: MachineTemplate
  endpoint:
    path: /services/data/vXX.X/sobjects/MachineTemplate
    method: POST
- name: KubeadmControlPlane
  endpoint:
    path: /services/data/vXX.X/sobjects/KubeadmControlPlane
    method: PATCH
- name: MachineTemplate
  endpoint:
    path: /clusters/{cluster}/machines
    method: GET
    data_selector: items
- name: MachineDeployment
  endpoint:
    path: /apis/cluster.x-k8s.io/v1beta1/machinedeployments
    method: GET
    data_selector: items
    params: {}
- name: MachineSet
  endpoint:
    path: /apis/cluster.x-k8s.io/v1beta1/machinesets
    method: GET
    data_selector: items
    params: {}
- name: MachinePool
  endpoint:
    path: /apis/cluster.x-k8s.io/v1beta1/machinepools
    method: GET
    data_selector: items
    params: {}
- name: machine_health_check
  endpoint:
    path: /MachineHealthCheck
    method: GET
    data_selector: items
    params: {}
- name: cluster
  endpoint:
    path: /api/cluster
    method: GET
    data_selector: clusters
    params: {}
- name: customImage
  endpoint:
    path: /spec/template/spec/customImage
    method: ADD
    data_selector: null
    params: {}
- name: httpProxy
  endpoint:
    path: /spec/template/spec/httpProxy/url
    method: ADD
    data_selector: null
    params: {}
- name: mdConfig
  endpoint:
    path: /spec/template/spec/customImage
    method: ADD
    data_selector: null
    params: {}
- name: dnsServers
  endpoint:
    path: /spec/template/spec/dnsServers
    method: ADD
    data_selector: null
    params: {}
- name: etcdImageTag
  endpoint:
    path: /spec/template/spec/kubeadmConfigSpec/clusterConfiguration/etcd
    method: ADD
    data_selector: null
    params: {}
- name: imageRepository
  endpoint:
    path: /spec/template/spec/kubeadmConfigSpec/clusterConfiguration/imageRepository
    method: ADD
    data_selector: null
    params: {}
- name: ExtensionConfig
  endpoint:
    path: /api/v1/namespaces/default/services/https:webhook-service:443/proxy/hooks.runtime.cluster.x-k8s.io/v1alpha1/discovery
    method: POST
    data_selector: apiVersion
    params: {}
- name: BeforeClusterCreate
  endpoint:
    path: /before-cluster-create
    method: POST
    data_selector: status
    params: {}
- name: AfterControlPlaneInitialized
  endpoint:
    path: /after-control-plane-initialized
    method: POST
    data_selector: status
    params: {}
- name: BeforeClusterUpgrade
  endpoint:
    path: /before-cluster-upgrade
    method: POST
    data_selector: status
    params:
      fromKubernetesVersion: v1.21.2
      toKubernetesVersion: v1.22.0
- name: AfterControlPlaneUpgrade
  endpoint:
    path: /after-control-plane-upgrade
    method: POST
    data_selector: status
    params:
      kubernetesVersion: v1.22.0
- name: AfterClusterUpgrade
  endpoint:
    path: /after-cluster-upgrade
    method: POST
    data_selector: status
    params:
      kubernetesVersion: v1.22.0
- name: BeforeClusterDelete
  endpoint:
    path: /before-cluster-delete
    method: POST
    data_selector: status
    params: {}
- name: GeneratePatches
  endpoint:
    path: /generate-patches
    method: POST
    data_selector: status
    params: {}
- name: ValidateTopology
  endpoint:
    path: /validate-topology
    method: POST
    data_selector: status
    params: {}
- name: DiscoverVariables
  endpoint:
    path: /discover-variables
    method: POST
    data_selector: definitions
    params: {}
- name: metrics
  endpoint:
    path: /metrics
    method: GET
    data_selector: metrics
- name: pprof
  endpoint:
    path: /debug/pprof/*
    method: GET
    data_selector: pprof
- name: log_level
  endpoint:
    path: /debug/flags/v
    method: PUT
    data_selector: log_level
- name: podSecurityStandard
  endpoint:
    path: /spec/template/spec/kubeadmConfigSpec/clusterConfiguration/apiServer/extraArgs
    method: add
    data_selector: value
    params:
      admission-control-config-file: /etc/kubernetes/kube-apiserver-admission-pss.yaml
- name: extraVolumes
  endpoint:
    path: /spec/template/spec/kubeadmConfigSpec/clusterConfiguration/apiServer/extraVolumes
    method: add
    data_selector: value
    params:
      name: admission-pss
      hostPath: /etc/kubernetes/kube-apiserver-admission-pss.yaml
      mountPath: /etc/kubernetes/kube-apiserver-admission-pss.yaml
      readOnly: true
      pathType: File
- name: files
  endpoint:
    path: /spec/template/spec/kubeadmConfigSpec/files
    method: add
    data_selector: valueFrom.template
    params:
      content: "apiVersion: apiserver.config.k8s.io/v1\nkind: AdmissionConfiguration\n\
        plugins:\n- name: PodSecurity\n  configuration:\n    apiVersion: pod-security.admission.config.k8s.io/v1\n\
        \    kind: PodSecurityConfiguration\n    defaults:\n      enforce: \"{{ .podSecurity.enforce\
        \ }}\"\n      enforce-version: \"latest\"\n      audit: \"{{ .podSecurity.audit\
        \ }}\"\n      audit-version: \"latest\"\n      warn: \"{{ .podSecurity.warn\
        \ }}\"\n      warn-version: \"latest\"\n    exemptions:\n      usernames:\
        \ []\n      runtimeClasses: []\n      namespaces: [kube-system]"
      path: /etc/kubernetes/kube-apiserver-admission-pss.yaml
- name: kubeadmcontrolplanes
  endpoint:
    path: /kubeadmcontrolplanes
    method: GET
- name: machinedeployments
  endpoint:
    path: /machinedeployments
    method: GET
- name: vpc
  endpoint:
    path: /v1/vpcs
    method: GET
- name: workload_cluster
  endpoint:
    path: /v1/cluster
    method: POST
    data_selector: cluster
    params: {}
- name: scaleway-secret
  endpoint:
    path: /api/v1/namespaces/kube-system/secrets
    method: POST
    data_selector: metadata.name
    params: {}
- name: MicroK8sControlPlane
  endpoint:
    path: /api/v1beta1/microk8scontrolplanes
    method: POST
    data_selector: spec
    params: {}
- name: MachineDeployment
  endpoint:
    path: /api/v1beta2/machinedeployments
    method: POST
    data_selector: spec
    params: {}
- name: MicroK8sConfigTemplate
  endpoint:
    path: /api/v1beta1/microk8sconfigtemplates
    method: POST
    data_selector: spec
    params: {}
- name: MachineHealthCheck
  endpoint:
    path: /v1beta2/machinehealthchecks
    method: GET
    data_selector: items
- name: MachineDeployment
  endpoint:
    path: /services/data/vXX.X/machineDeployment
    method: GET
    data_selector: records
    params:
      incremental: replicas
- name: MachineSet
  endpoint:
    path: /services/data/vXX.X/machineSet
    method: GET
    data_selector: records
    params: {}
- name: MachineHealthCheck
  endpoint:
    path: /api/v1beta2/machinehealthchecks
    method: GET
    data_selector: items
    params: {}
- name: KubeadmControlPlane
  endpoint:
    path: /api/v1beta2/kubeadmcontrolplanes
    method: GET
    data_selector: items
    params: {}
- name: ClusterClass
  endpoint:
    path: /clusterclass
    method: GET
- name: Cluster
  endpoint:
    path: /clusters
    method: GET
- name: customImage
  endpoint:
    path: /spec/template/spec/customImage
    method: add
    data_selector: valueFrom.template
    params: {}
- name: httpProxy
  endpoint:
    path: /spec/template/spec/httpProxy/url
    method: add
    data_selector: valueFrom.variable
    params: {}
- name: mdConfig
  endpoint:
    path: /spec/template/spec/customImage
    method: add
    data_selector: valueFrom.template
    params: {}
- name: dnsServers
  endpoint:
    path: /spec/template/spec/dnsServers
    method: add
    data_selector: valueFrom.variable
    params: {}
- name: firstDnsServer
  endpoint:
    path: /spec/template/spec/dnsServer
    method: add
    data_selector: valueFrom.variable
    params: {}
- name: BeforeClusterCreate
  endpoint:
    path: /hooks/runtime/cluster/v1alpha1/before-cluster-create
    method: POST
    data_selector: status
    params: {}
- name: AfterControlPlaneInitialized
  endpoint:
    path: /hooks/runtime/cluster/v1alpha1/after-control-plane-initialized
    method: POST
    data_selector: status
    params: {}
- name: BeforeClusterUpgrade
  endpoint:
    path: /hooks/runtime/cluster/v1alpha1/before-cluster-upgrade
    method: POST
    data_selector: status
    params: {}
- name: AfterControlPlaneUpgrade
  endpoint:
    path: /hooks/runtime/cluster/v1alpha1/after-control-plane-upgrade
    method: POST
    data_selector: status
    params: {}
- name: AfterClusterUpgrade
  endpoint:
    path: /hooks/runtime/cluster/v1alpha1/after-cluster-upgrade
    method: POST
    data_selector: status
    params: {}
- name: BeforeClusterDelete
  endpoint:
    path: /hooks/runtime/cluster/v1alpha1/before-cluster-delete
    method: POST
    data_selector: status
    params: {}
- name: GeneratePatches
  endpoint:
    path: /hooks/runtime/cluster/v1alpha1/generate-patches
    method: POST
    data_selector: status
    params: {}
- name: ValidateTopology
  endpoint:
    path: /hooks/runtime/cluster/v1alpha1/validate-topology
    method: POST
    data_selector: status
    params: {}
- name: DiscoverVariables
  endpoint:
    path: /hooks/runtime/cluster/v1alpha1/discover-variables
    method: POST
    data_selector: status
    params: {}
- name: metrics
  endpoint:
    path: /metrics
    method: GET
    data_selector: ''
    params: {}
- name: pprof
  endpoint:
    path: /debug/pprof/goroutine
    method: GET
    data_selector: ''
    params: {}
- name: profile
  endpoint:
    path: /debug/pprof/profile
    method: GET
    data_selector: ''
    params: {}
- name: log_level
  endpoint:
    path: /debug/flags/v
    method: PUT
    data_selector: ''
    params: {}
- name: podSecurityStandard
  endpoint:
    path: /spec/template/spec/kubeadmConfigSpec/clusterConfiguration/apiServer/extraArgs
    method: add
    data_selector: admission-control-config-file
    params:
      value: /etc/kubernetes/kube-apiserver-admission-pss.yaml
- name: extraVolumes
  endpoint:
    path: /spec/template/spec/kubeadmConfigSpec/clusterConfiguration/apiServer/extraVolumes
    method: add
    data_selector: ''
    params:
      value:
      - name: admission-pss
        hostPath: /etc/kubernetes/kube-apiserver-admission-pss.yaml
        mountPath: /etc/kubernetes/kube-apiserver-admission-pss.yaml
        readOnly: true
        pathType: File
- name: files
  endpoint:
    path: /spec/template/spec/kubeadmConfigSpec/files
    method: add
    data_selector: ''
    params:
      valueFrom:
        template:
        - content: "apiVersion: apiserver.config.k8s.io/v1\nkind: AdmissionConfiguration\n\
            plugins:\n- name: PodSecurity\n  configuration:\n    apiVersion: pod-security.admission.config.k8s.io/v1\n\
            \    kind: PodSecurityConfiguration\n    defaults:\n      enforce: \"\
            {{ .podSecurity.enforce }}\"\n      enforce-version: \"latest\"\n    \
            \  audit: \"{{ .podSecurity.audit }}\"\n      audit-version: \"latest\"\
            \n      warn: \"{{ .podSecurity.warn }}\"\n      warn-version: \"latest\"\
            \n    exemptions:\n      usernames: []\n      runtimeClasses: []\n   \
            \   namespaces: [kube-system]"
          path: /etc/kubernetes/kube-apiserver-admission-pss.yaml
- name: kubeadmcontrolplanes
  endpoint:
    path: /kubeadmcontrolplanes
    method: GET
- name: machinedeployments
  endpoint:
    path: /machinedeployments
    method: GET
- name: management_cluster
  endpoint:
    path: /services/data/vXX.X/sobjects/ManagementCluster
    method: GET
    data_selector: records
- name: provider_component
  endpoint:
    path: /services/data/vXX.X/sobjects/ProviderComponent
    method: GET
    data_selector: records
- name: VPC
  endpoint:
    params:
      IBMVPC_REGION: us-south
      IBMVPC_ZONE: us-south-1
      IBMVPC_RESOURCEGROUP: <your-resource-group-id>
      IBMVPC_NAME: ibm-vpc-0
      IBMVPC_IMAGE_ID: <you-image-id>
      IBMVPC_PROFILE: bx2-4x16
      IBMVPC_SSHKEY_ID: <your-sshkey-id>
- name: PowerVS
  endpoint:
    params:
      IBMPOWERVS_SSHKEY_NAME: <your-ssh-key>
      IBMPOWERVS_VIP: <internal-ip>
      IBMPOWERVS_VIP_EXTERNAL: <external-ip>
      IBMPOWERVS_VIP_CIDR: '29'
      IBMPOWERVS_IMAGE_NAME: <your-capi-image-name>
      IBMPOWERVS_SERVICE_INSTANCE_ID: <service-instance-id>
      IBMPOWERVS_NETWORK_NAME: <your-capi-network-name>
- name: workload_cluster
  endpoint:
    path: /workload_cluster
    method: POST
    data_selector: cluster
    params:
      cluster_name: one
      public_network_name: service
      private_network_name: private
      machine_template_name: capone131
      router_template_name: capone131-vr
      control_plane_machine_count: '1'
      worker_machine_count: '1'
      ccm_img: ghcr.io/opennebula/cloud-provider-opennebula:latest
- name: MicroK8sControlPlane
  endpoint:
    path: /controlplane.cluster.x-k8s.io/v1beta1/microk8scontrolplanes
    method: GET
    data_selector: items
    params: {}
- name: MachineDeployment
  endpoint:
    path: /cluster.x-k8s.io/v1beta2/machinedeployments
    method: GET
    data_selector: items
    params: {}
- name: MachineDeployment
  endpoint:
    path: /path/to/machinedeployment
    method: GET
    data_selector: items
    params: {}
- name: KubeadmControlPlane
  endpoint:
    path: /path/to/kubeadmcontrolplane
    method: GET
    data_selector: items
    params: {}
- name: MachineDeployment
  endpoint:
    path: /apis/cluster.x-k8s.io/v1beta1/machinedeployments
    method: GET
    data_selector: items
- name: MachineSet
  endpoint:
    path: /apis/cluster.x-k8s.io/v1beta1/machinesets
    method: GET
    data_selector: items
- name: capi-quickstart-node-unhealthy-5m
  endpoint:
    path: /services/data/vXX.X/sobjects/MachineHealthCheck
    method: GET
    data_selector: spec
    params:
      clusterName: capi-quickstart
      maxUnhealthy: 40%
      nodeStartupTimeout: 10m
      selector:
        matchLabels:
          nodepool: nodepool-0
      unhealthyNodeConditions:
      - type: Ready
        status: Unknown
        timeout: 300s
      - type: Ready
        status: 'False'
        timeout: 300s
- name: capi-quickstart-kcp-unhealthy-5m
  endpoint:
    path: /services/data/vXX.X/sobjects/KubeadmControlPlane
    method: GET
    data_selector: spec
    params:
      remediationStrategy:
        maxRetry: 5
        retryPeriod: 2m
        minHealthyPeriod: 2h
- name: ClusterClass
  endpoint:
    path: /cluster-class
    method: GET
    data_selector: items
- name: Cluster
  endpoint:
    path: /clusters
    method: GET
    data_selector: items
- name: customImage
  endpoint:
    path: /spec/template/spec/customImage
    method: add
    data_selector: valueFrom
    params: {}
- name: httpProxy
  endpoint:
    path: /spec/template/spec/httpProxy/url
    method: add
    data_selector: valueFrom.variable
    params: {}
- name: mdConfig
  endpoint:
    path: /spec/template/spec/customImage
    method: add
    data_selector: valueFrom.template
    params: {}
- name: dnsServers
  endpoint:
    path: /spec/template/spec/dnsServers
    method: add
    data_selector: valueFrom.variable
    params: {}
- name: dnsServer
  endpoint:
    path: /spec/template/spec/dnsServer
    method: add
    data_selector: valueFrom.variable
    params: {}
- name: etcdImageTag
  endpoint:
    path: /spec/template/spec/kubeadmConfigSpec/clusterConfiguration/etcd
    method: add
    data_selector: valueFrom.template
    params: {}
- name: imageRepository
  endpoint:
    path: /spec/template/spec/kubeadmConfigSpec/clusterConfiguration/imageRepository
    method: add
    data_selector: value
    params: {}
- name: BeforeClusterCreate
  endpoint:
    path: /hooks/runtime/cluster/x-k8s.io/v1alpha1/before-cluster-create
    method: POST
    data_selector: status
    params: {}
- name: AfterControlPlaneInitialized
  endpoint:
    path: /hooks/runtime/cluster/x-k8s.io/v1alpha1/after-control-plane-initialized
    method: POST
    data_selector: status
    params: {}
- name: BeforeClusterUpgrade
  endpoint:
    path: /hooks/runtime/cluster/x-k8s.io/v1alpha1/before-cluster-upgrade
    method: POST
    data_selector: status
    params: {}
- name: AfterControlPlaneUpgrade
  endpoint:
    path: /hooks/runtime/cluster/x-k8s.io/v1alpha1/after-control-plane-upgrade
    method: POST
    data_selector: status
    params: {}
- name: AfterClusterUpgrade
  endpoint:
    path: /hooks/runtime/cluster/x-k8s.io/v1alpha1/after-cluster-upgrade
    method: POST
    data_selector: status
    params: {}
- name: BeforeClusterDelete
  endpoint:
    path: /hooks/runtime/cluster/x-k8s.io/v1alpha1/before-cluster-delete
    method: POST
    data_selector: status
    params: {}
- name: metrics
  endpoint:
    path: /metrics
    method: GET
- name: pprof
  endpoint:
    path: /debug/pprof/*
    method: GET
- name: loglevel
  endpoint:
    path: /debug/flags/v
    method: PUT
- name: podSecurityStandard
  endpoint:
    path: /spec/template/spec/kubeadmConfigSpec/clusterConfiguration/apiServer/extraArgs
    method: add
    data_selector: admission-control-config-file
    params:
      value: /etc/kubernetes/kube-apiserver-admission-pss.yaml
- name: admission-pss
  endpoint:
    path: /spec/template/spec/kubeadmConfigSpec/clusterConfiguration/apiServer/extraVolumes
    method: add
    data_selector: extraVolumes
    params:
      name: admission-pss
      hostPath: /etc/kubernetes/kube-apiserver-admission-pss.yaml
      mountPath: /etc/kubernetes/kube-apiserver-admission-pss.yaml
      readOnly: true
      pathType: File
- name: vpc
  endpoint:
    path: /v1/vpcs
    method: GET
    data_selector: vpcs
    params: {}
- name: iam
  endpoint:
    path: /v1/iam
    method: GET
    data_selector: iam
    params: {}
- name: cluster
  endpoint:
    path: /services/data/v1.32.1/cluster
    method: GET
    data_selector: clusters
    params: {}
- name: MicroK8sControlPlane
  endpoint:
    path: /api/v1beta2/controlplane
    method: POST
    data_selector: spec
    params: {}
- name: MachineDeployment
  endpoint:
    path: /api/v1beta2/machinedeployments
    method: POST
    data_selector: spec
    params: {}
- name: MicroK8sConfigTemplate
  endpoint:
    path: /api/v1beta1/microk8sconfigtemplates
    method: POST
    data_selector: spec
    params: {}
- name: MachineTemplate
  endpoint:
    path: /services/data/vXX.X/sobjects/MachineTemplate
    method: POST
- name: KubeadmControlPlane
  endpoint:
    path: /services/data/vXX.X/sobjects/KubeadmControlPlane
    method: PATCH
- name: MachineDeployment
  endpoint:
    path: /services/data/vXX.X/sobjects/MachineDeployment
    method: PATCH
- name: MachineDeployment
  endpoint:
    path: /apis/cluster.x-k8s.io/v1alpha4/machinedeployments
    method: GET
    data_selector: items
- name: MachineSet
  endpoint:
    path: /apis/cluster.x-k8s.io/v1alpha4/machinesets
    method: GET
    data_selector: items
- name: MachineHealthCheck
  endpoint:
    path: /api/v1beta2/machinehealthchecks
    method: POST
    data_selector: spec
    params:
      clusterName: capi-quickstart
      maxUnhealthy: 40%
      nodeStartupTimeout: 10m
      selector:
        matchLabels:
          nodepool: nodepool-0
      unhealthyNodeConditions:
      - type: Ready
        status: Unknown
        timeout: 300s
      - type: Ready
        status: 'False'
        timeout: 300s
- name: KubeadmControlPlane
  endpoint:
    path: /api/v1beta2/kubeadmcontrolplanes
    method: POST
    data_selector: spec
    params:
      remediationStrategy:
        maxRetry: 5
        retryPeriod: 2m
        minHealthyPeriod: 2h
- name: ClusterClass
  endpoint:
    path: /cluster.x-k8s.io/v1beta2/ClusterClass
    method: GET
    data_selector: items
- name: Cluster
  endpoint:
    path: /cluster.x-k8s.io/v1beta2/Cluster
    method: GET
    data_selector: items
- name: customImage
  endpoint:
    path: /spec/template/spec/customImage
    method: add
    data_selector: definitions
    params: {}
- name: httpProxy
  endpoint:
    path: /spec/template/spec/httpProxy/url
    method: add
    data_selector: variables
    params: {}
- name: mdConfig
  endpoint:
    path: /spec/template/spec/customImage
    method: add
    data_selector: variables
    params: {}
- name: dnsServers
  endpoint:
    path: /spec/template/spec/dnsServers
    method: add
    data_selector: variables
    params: {}
- name: dnsServer
  endpoint:
    path: /spec/template/spec/dnsServer
    method: add
    data_selector: variables
    params: {}
- name: etcdImageTag
  endpoint:
    path: /spec/template/spec/kubeadmConfigSpec/clusterConfiguration/etcd
    method: add
    data_selector: patches
    params: {}
- name: imageRepository
  endpoint:
    path: /spec/template/spec/kubeadmConfigSpec/clusterConfiguration/imageRepository
    method: add
    data_selector: patches
    params: {}
- name: cluster
  endpoint:
    path: /api/v1/clusters
    method: GET
    data_selector: clusters
    params: {}
- name: BeforeClusterCreate
  endpoint:
    path: /v1alpha1/before-cluster-create
    method: POST
    data_selector: status
    params: {}
- name: AfterControlPlaneInitialized
  endpoint:
    path: /v1alpha1/after-control-plane-initialized
    method: POST
    data_selector: status
    params: {}
- name: BeforeClusterUpgrade
  endpoint:
    path: /v1alpha1/before-cluster-upgrade
    method: POST
    data_selector: status
    params: {}
- name: AfterControlPlaneUpgrade
  endpoint:
    path: /v1alpha1/after-control-plane-upgrade
    method: POST
    data_selector: status
    params: {}
- name: AfterClusterUpgrade
  endpoint:
    path: /v1alpha1/after-cluster-upgrade
    method: POST
    data_selector: status
    params: {}
- name: BeforeClusterDelete
  endpoint:
    path: /v1alpha1/before-cluster-delete
    method: POST
    data_selector: status
    params: {}
- name: GeneratePatches
  endpoint:
    path: /v1alpha1/generate-patches
    method: POST
    data_selector: status
    params: {}
- name: ValidateTopology
  endpoint:
    path: /v1alpha1/validate-topology
    method: POST
    data_selector: status
    params: {}
- name: DiscoverVariables
  endpoint:
    path: /v1alpha1/discover-variables
    method: POST
    data_selector: status
    params: {}
- name: metrics
  endpoint:
    path: /metrics
    method: GET
    data_selector: metrics
    params: {}
- name: pprof
  endpoint:
    path: /debug/pprof/*
    method: GET
    data_selector: pprof
    params: {}
- name: loglevel
  endpoint:
    path: /debug/flags/v
    method: PUT
    data_selector: loglevel
    params: {}
- name: podSecurityStandard
  endpoint:
    path: /spec/template/spec/kubeadmConfigSpec/clusterConfiguration/apiServer/extraArgs
    method: ADD
    data_selector: value
    params: {}
- name: admission-pss
  endpoint:
    path: /spec/template/spec/kubeadmConfigSpec/clusterConfiguration/apiServer/extraVolumes
    method: ADD
    data_selector: value
    params: {}
- name: files
  endpoint:
    path: /spec/template/spec/kubeadmConfigSpec/files
    method: ADD
    data_selector: valueFrom
    params: {}
- name: kubeadmcontrolplanes
  endpoint:
    path: /kubeadmcontrolplanes
    method: GET
- name: machinedeployments
  endpoint:
    path: /machinedeployments
    method: GET
- name: management_cluster
  endpoint:
    path: /init
    method: POST
    data_selector: results
- name: VPC
  endpoint:
    path: /v1/vpcs
    method: GET
- name: PowerVS
  endpoint:
    path: /v1/powervs
    method: GET
- name: workload_cluster
  endpoint:
    path: /workload
    method: POST
    data_selector: cluster
    params: {}
- name: KubeadmConfig
  endpoint:
    path: /v1beta2/kubeadmconfigs
    method: GET
    data_selector: items
    params: {}
- name: DockerCluster
  endpoint:
    path: /v1beta2/dockerclusters
    method: GET
    data_selector: items
    params: {}
- name: Machine
  endpoint:
    path: /v1beta2/machines
    method: GET
    data_selector: items
    params: {}
- name: MicroK8sControlPlane
  endpoint:
    path: /api/v1/MicroK8sControlPlane
    method: GET
    data_selector: items
- name: MachineDeployment
  endpoint:
    path: /api/v1/MachineDeployment
    method: GET
    data_selector: items
- name: MachineDeployment
  endpoint:
    path: /api/v1beta1/MachineDeployments
    method: GET
    data_selector: items
    params: {}
- name: MachineSet
  endpoint:
    path: /api/v1beta1/MachineSets
    method: GET
    data_selector: items
    params: {}
- name: MachineHealthCheck
  endpoint:
    path: /api/v1beta2/machinehealthchecks
    method: GET
    data_selector: items
    params: {}
- name: KubeadmControlPlane
  endpoint:
    path: /api/v1beta2/kubeadmcontrolplanes
    method: GET
    data_selector: items
    params: {}
- name: ClusterClass
  endpoint:
    path: /cluster-classes
    method: GET
    data_selector: items
- name: Cluster
  endpoint:
    path: /clusters
    method: GET
    data_selector: items
- name: docker-clusterclass
  endpoint:
    path: /cluster.x-k8s.io/v1beta2/ClusterClass
    method: GET
    data_selector: spec
    params: {}
- name: azure-clusterclass
  endpoint:
    path: /cluster.x-k8s.io/v1beta2/ClusterClass
    method: GET
    data_selector: spec
    params: {}
- name: BeforeClusterCreate
  endpoint:
    path: /hooks/runtime/cluster.x-k8s.io/v1alpha1/before-cluster-create
    method: POST
    data_selector: status
    params: {}
- name: AfterControlPlaneInitialized
  endpoint:
    path: /hooks/runtime/cluster.x-k8s.io/v1alpha1/after-control-plane-initialized
    method: POST
    data_selector: status
    params: {}
- name: BeforeClusterUpgrade
  endpoint:
    path: /hooks/runtime/cluster.x-k8s.io/v1alpha1/before-cluster-upgrade
    method: POST
    data_selector: status
    params: {}
- name: AfterControlPlaneUpgrade
  endpoint:
    path: /hooks/runtime/cluster.x-k8s.io/v1alpha1/after-control-plane-upgrade
    method: POST
    data_selector: status
    params: {}
- name: AfterClusterUpgrade
  endpoint:
    path: /hooks/runtime/cluster.x-k8s.io/v1alpha1/after-cluster-upgrade
    method: POST
    data_selector: status
    params: {}
- name: BeforeClusterDelete
  endpoint:
    path: /hooks/runtime/cluster.x-k8s.io/v1alpha1/before-cluster-delete
    method: POST
    data_selector: status
    params: {}
- name: metrics
  endpoint:
    path: /metrics
    method: GET
- name: pprof
  endpoint:
    path: /debug/pprof/*
    method: GET
- name: log_level
  endpoint:
    path: /debug/flags/v
    method: PUT
- name: ClusterClass
  endpoint:
    path: /cluster.x-k8s.io/v1beta2
    method: GET
    data_selector: spec.patches
    params: {}
- name: Cluster
  endpoint:
    path: /cluster.x-k8s.io/v1beta2
    method: POST
    data_selector: spec.topology.classRef
    params: {}
- name: kubeadmcontrolplanes
  endpoint:
    path: /kubeadmcontrolplanes
    method: GET
- name: machinedeployments
  endpoint:
    path: /machinedeployments
    method: GET
- name: management_cluster
  endpoint:
    path: /initiate
    method: POST
    data_selector: data
    params: {}
- name: bootstrap_cluster
  endpoint:
    path: /bootstrap
    method: POST
    data_selector: data
    params: {}
- name: vpc
  endpoint:
    path: /v1/vpcs
    method: GET
    data_selector: vpcs
- name: instances
  endpoint:
    path: /v1/instances
    method: GET
    data_selector: instances
- name: workload_cluster
  endpoint:
    path: /RPC2
    method: POST
    data_selector: result
    params:
      incremental: updated_at
- name: scaleway-secret
  endpoint:
    path: /api/v1/namespaces/kube-system/secrets
    method: POST
    data_selector: metadata.name
    params: {}
- name: KubeadmConfig
  endpoint:
    path: /kubeadm/config
    method: GET
    data_selector: items
    params: {}
- name: DockerCluster
  endpoint:
    path: /docker/cluster
    method: GET
    data_selector: items
    params: {}
- name: MicroK8sControlPlane
  endpoint:
    path: /api/v1/microk8scontrolplanes
    method: GET
    data_selector: items
    params: {}
- name: MachineDeployment
  endpoint:
    path: /api/v1/machinedeployments
    method: GET
    data_selector: items
    params: {}
- name: KubeadmControlPlane
  endpoint:
    path: /kubeadmcontrolplanes
    method: GET
    data_selector: items
- name: MachineDeployment
  endpoint:
    path: /machinedeployments
    method: GET
    data_selector: items
- name: MachineDeployment
  endpoint:
    annotations:
      cluster.x-k8s.io/cluster-api-autoscaler-node-group-max-size: '5'
      cluster.x-k8s.io/cluster-api-autoscaler-node-group-min-size: '0'
      capacity.cluster-autoscaler.kubernetes.io/memory: 128G
      capacity.cluster-autoscaler.kubernetes.io/cpu: '16'
      capacity.cluster-autoscaler.kubernetes.io/ephemeral-disk: 100Gi
      capacity.cluster-autoscaler.kubernetes.io/maxPods: '200'
      capacity.cluster-autoscaler.kubernetes.io/gpu-type: nvidia.com/gpu
      capacity.cluster-autoscaler.kubernetes.io/gpu-count: '2'
- name: Cluster
  endpoint:
    annotations:
      cluster.x-k8s.io/autoscaling-options-scaledownutilizationthreshold: '0.5'
      cluster.x-k8s.io/autoscaling-options-scaledowngpuutilizationthreshold: '0.5'
      cluster.x-k8s.io/autoscaling-options-scaledownunneededtime: 10m0s
      cluster.x-k8s.io/autoscaling-options-scaledownunreadytime: 20m0s
      cluster.x-k8s.io/autoscaling-options-maxnodeprovisiontime: 20m0s
- name: MachineHealthCheck
  endpoint:
    path: /api/v1beta2/machinehealthchecks
    method: POST
    data_selector: metadata
    params:
      clusterName: capi-quickstart
      maxUnhealthy: 40%
      nodeStartupTimeout: 10m
      selector:
        matchLabels:
          nodepool: nodepool-0
      unhealthyNodeConditions:
      - type: Ready
        status: Unknown
        timeout: 300s
      - type: Ready
        status: 'False'
        timeout: 300s
- name: KubeadmControlPlane
  endpoint:
    path: /api/v1beta2/kubeadmcontrolplanes
    method: POST
    data_selector: metadata
    params:
      remediationStrategy:
        maxRetry: 5
        retryPeriod: 2m
        minHealthyPeriod: 2h
- name: ClusterClass
  endpoint:
    path: /clusterclass
    method: GET
    data_selector: items
- name: Cluster
  endpoint:
    path: /clusters
    method: GET
    data_selector: items
- name: docker-clusterclass
  endpoint:
    path: /cluster.x-k8s.io/v1beta2/ClusterClass
    method: GET
- name: BeforeClusterCreate
  endpoint:
    path: /hooks.runtime.cluster.x-k8s.io/v1alpha1/beforeClusterCreate
    method: POST
    data_selector: status
    params: {}
- name: AfterControlPlaneInitialized
  endpoint:
    path: /hooks.runtime.cluster.x-k8s.io/v1alpha1/afterControlPlaneInitialized
    method: POST
    data_selector: status
    params: {}
- name: BeforeClusterUpgrade
  endpoint:
    path: /hooks.runtime.cluster.x-k8s.io/v1alpha1/beforeClusterUpgrade
    method: POST
    data_selector: status
    params:
      fromKubernetesVersion: v1.21.2
      toKubernetesVersion: v1.22.0
- name: AfterControlPlaneUpgrade
  endpoint:
    path: /hooks.runtime.cluster.x-k8s.io/v1alpha1/afterControlPlaneUpgrade
    method: POST
    data_selector: status
    params:
      kubernetesVersion: v1.22.0
- name: AfterClusterUpgrade
  endpoint:
    path: /hooks.runtime.cluster.x-k8s.io/v1alpha1/afterClusterUpgrade
    method: POST
    data_selector: status
    params:
      kubernetesVersion: v1.22.0
- name: BeforeClusterDelete
  endpoint:
    path: /hooks.runtime.cluster.x-k8s.io/v1alpha1/beforeClusterDelete
    method: POST
    data_selector: status
    params: {}
- name: metrics
  endpoint:
    path: /metrics
    method: GET
    data_selector: metrics
    params: {}
- name: pprof
  endpoint:
    path: /debug/pprof
    method: GET
    data_selector: profiles
    params: {}
- name: podSecurityStandard
  endpoint:
    path: /spec/template/spec/kubeadmConfigSpec/clusterConfiguration/apiServer/extraArgs
    method: ADD
    data_selector: value
    params: {}
- name: extraVolumes
  endpoint:
    path: /spec/template/spec/kubeadmConfigSpec/clusterConfiguration/apiServer/extraVolumes
    method: ADD
    data_selector: value
    params: {}
- name: files
  endpoint:
    path: /spec/template/spec/kubeadmConfigSpec/files
    method: ADD
    data_selector: valueFrom
    params: {}
- name: provider
  endpoint:
    path: /provider
    method: GET
    data_selector: providers
    params: {}
- name: cluster
  endpoint:
    path: /cluster
    method: GET
    data_selector: clusters
    params: {}
- name: kubeadmcontrolplanes
  endpoint:
    path: /alpha/rollout/kubeadmcontrolplanes
    method: POST
- name: machinedeployments
  endpoint:
    path: /alpha/rollout/machinedeployments
    method: POST
- name: cluster
  endpoint:
    path: /api/v1/clusters
    method: GET
    data_selector: items
- name: control_plane
  endpoint:
    path: /api/v1/controlplanes
    method: GET
    data_selector: items
- name: infra_cluster
  endpoint:
    path: /api/v1/infraclusters
    method: GET
    data_selector: items
- name: management_cluster
  endpoint:
    path: /init
    method: POST
    data_selector: providers
- name: workload_clusters
  endpoint:
    path: /clusters
    method: POST
    data_selector: clusters
    params: {}
- name: KubeadmConfig
  endpoint:
    path: /kubeadm/config
    method: GET
    data_selector: items
- name: DockerCluster
  endpoint:
    path: /docker/cluster
    method: GET
    data_selector: items
- name: Machine
  endpoint:
    path: /machines
    method: GET
    data_selector: items
- name: MicroK8sControlPlane
  endpoint:
    path: /api/v1beta1/microk8scontrolplanes
    method: GET
    data_selector: items
    params: {}
- name: MachineDeployment
  endpoint:
    path: /api/v1beta1/machinedeployments
    method: GET
    data_selector: items
    params: {}
- name: KubeadmControlPlane
  endpoint:
    path: /kubeadmcontrolplane
    method: GET
    data_selector: spec
    params: {}
- name: MachineDeployment
  endpoint:
    path: /machinedeployment
    method: GET
    data_selector: spec
    params: {}
- name: MachineTemplate
  endpoint:
    path: /api/v1/machineTemplates
    method: GET
    data_selector: items
    params: {}
- name: KubeadmControlPlane
  endpoint:
    path: /api/v1/kubeadmControlPlanes
    method: GET
    data_selector: items
    params: {}
- name: BootstrapTemplate
  endpoint:
    path: /api/v1/bootstrapTemplates
    method: GET
    data_selector: items
    params: {}
- name: MachineDeployment
  endpoint:
    path: /api/v1beta1/machinedeployments
    method: GET
    data_selector: items
    params: {}
- name: MachineSet
  endpoint:
    path: /api/v1beta1/machinesets
    method: GET
    data_selector: items
    params: {}
- name: Cluster
  endpoint:
    path: /api/v1beta1/clusters
    method: GET
    data_selector: items
    params: {}
- name: MachineHealthCheck
  endpoint:
    path: /cluster-api/machinehealthchecks
    method: GET
    data_selector: items
- name: KubeadmControlPlane
  endpoint:
    path: /cluster-api/kubeadmcontrolplanes
    method: GET
    data_selector: items
- name: ClusterClass
  endpoint:
    path: /clusterclass
    method: GET
    data_selector: items
- name: Cluster
  endpoint:
    path: /clusters
    method: GET
    data_selector: items
- name: docker-clusterclass
  endpoint:
    path: /cluster.x-k8s.io/v1beta2/docker-clusterclass
    method: GET
    data_selector: spec
    params: {}
- name: azure-clusterclass
  endpoint:
    path: /cluster.x-k8s.io/v1beta2/azure-clusterclass
    method: GET
    data_selector: spec
    params: {}
- name: Cluster
  endpoint:
    path: /clusters
    method: PATCH
    data_selector: spec
    params: {}
- name: ExtensionConfig
  endpoint:
    path: /api/v1/namespaces/default/services/https:webhook-service:443/proxy/hooks.runtime.cluster.x-k8s.io/v1alpha1/discovery
    method: POST
    data_selector: apiVersion
    params: {}
- name: BeforeClusterCreate
  endpoint:
    path: /hooks/runtime/cluster/x-k8s.io/v1alpha1/BeforeClusterCreate
    method: POST
    data_selector: status
    params: {}
- name: AfterControlPlaneInitialized
  endpoint:
    path: /hooks/runtime/cluster/x-k8s.io/v1alpha1/AfterControlPlaneInitialized
    method: POST
    data_selector: status
    params: {}
- name: BeforeClusterUpgrade
  endpoint:
    path: /hooks/runtime/cluster/x-k8s.io/v1alpha1/BeforeClusterUpgrade
    method: POST
    data_selector: status
    params: {}
- name: AfterControlPlaneUpgrade
  endpoint:
    path: /hooks/runtime/cluster/x-k8s.io/v1alpha1/AfterControlPlaneUpgrade
    method: POST
    data_selector: status
    params: {}
- name: AfterClusterUpgrade
  endpoint:
    path: /hooks/runtime/cluster/x-k8s.io/v1alpha1/AfterClusterUpgrade
    method: POST
    data_selector: status
    params: {}
- name: BeforeClusterDelete
  endpoint:
    path: /hooks/runtime/cluster/x-k8s.io/v1alpha1/BeforeClusterDelete
    method: POST
    data_selector: status
    params: {}
- name: GeneratePatches
  endpoint:
    path: /hooks/runtime/cluster/x-k8s.io/v1alpha1/GeneratePatches
    method: POST
    data_selector: status
    params: {}
- name: ValidateTopology
  endpoint:
    path: /hooks/runtime/cluster/x-k8s.io/v1alpha1/ValidateTopology
    method: POST
    data_selector: status
    params: {}
- name: DiscoverVariables
  endpoint:
    path: /hooks/runtime/cluster/x-k8s.io/v1alpha1/DiscoverVariables
    method: POST
    data_selector: status
    params: {}
- name: workload_cluster
  endpoint:
    path: /clusters/ignition-cluster
    method: GET
    data_selector: status
    params: {}
- name: metrics
  endpoint:
    path: /metrics
    method: GET
    data_selector: metrics
    params: {}
- name: pprof
  endpoint:
    path: /debug/pprof
    method: GET
    data_selector: pprof
    params: {}
- name: podSecurityStandard
  endpoint:
    path: /spec/template/spec/kubeadmConfigSpec/clusterConfiguration/apiServer/extraArgs
    method: add
    data_selector: admission-control-config-file
    params: {}
- name: extraVolumes
  endpoint:
    path: /spec/template/spec/kubeadmConfigSpec/clusterConfiguration/apiServer/extraVolumes
    method: add
    data_selector: admission-pss
    params: {}
- name: files
  endpoint:
    path: /spec/template/spec/kubeadmConfigSpec/files
    method: add
    data_selector: AdmissionConfiguration
    params: {}
- name: provider
  endpoint:
    path: /generate/provider
    method: POST
    data_selector: template
    params: {}
- name: cluster
  endpoint:
    path: /generate/cluster
    method: POST
    data_selector: template
    params: {}
- name: kubeadmcontrolplanes
  endpoint:
    path: /clusterctl/alpha/rollout/kubeadmcontrolplanes
    method: POST
- name: machinedeployments
  endpoint:
    path: /clusterctl/alpha/rollout/machinedeployments
    method: POST
- name: Cluster
  endpoint:
    path: /api/v1/clusters
    method: GET
    data_selector: items
    params: {}
- name: MachineDeployment
  endpoint:
    path: /machinedeployments
    method: GET
    data_selector: items
    params: {}
- name: MachineSet
  endpoint:
    path: /machinesets
    method: GET
    data_selector: items
    params: {}
- name: MachineHealthCheck
  endpoint:
    path: /machinehealthchecks
    method: GET
    data_selector: items
    params: {}
- name: management_cluster
  endpoint:
    path: /cluster-management
    method: POST
    data_selector: cluster
    params: {}
- name: vpc
  endpoint:
    path: /v1/vpcs
    method: GET
- name: machine_pool
  endpoint:
    path: /machine_pool
    method: GET
    data_selector: records
- name: contracts
  endpoint:
    path: /contracts
    method: GET
    data_selector: records
- name: scaleway-secret
  endpoint:
    path: /api/v1/namespaces/kube-system/secrets/scaleway-secret
    method: POST
    data_selector: metadata
    params: {}
- name: KubeadmConfig
  endpoint:
    path: /api/v1/namespaces/default/kubeadmconfigs
    method: GET
    data_selector: items
    params: {}
- name: MicroK8sControlPlane
  endpoint:
    path: /apis/controlplane.cluster.x-k8s.io/v1beta1/microk8scontrolplanes
    method: POST
    data_selector: spec
    params: {}
- name: MachineDeployment
  endpoint:
    path: /apis/cluster.x-k8s.io/v1beta2/machinedeployments
    method: POST
    data_selector: spec
    params: {}
- name: KubeadmControlPlane
  endpoint:
    path: /kubeadmcontrolplane
    method: GET
    data_selector: spec
    params: {}
- name: MachineDeployment
  endpoint:
    path: /machinedeployment
    method: GET
    data_selector: spec
    params: {}
- name: MachineDeployment
  endpoint:
    path: /apis/cluster.x-k8s.io/v1alpha4/machinedeployments
    method: GET
    data_selector: items
    params: {}
- name: MachineSet
  endpoint:
    path: /apis/cluster.x-k8s.io/v1alpha4/machinesets
    method: GET
    data_selector: items
    params: {}
- name: MachineHealthCheck
  endpoint:
    path: /apis/cluster.x-k8s.io/v1alpha4/machinehealthchecks
    method: GET
    data_selector: items
    params: {}
- name: MachineHealthCheck
  endpoint:
    path: /api/v1/machinehealthchecks
    method: POST
    data_selector: status
    params: {}
- name: KubeadmControlPlane
  endpoint:
    path: /api/v1/kubeadmcontrolplanes
    method: POST
    data_selector: status
    params: {}
- name: ClusterClass
  endpoint:
    path: /clusterclass
    method: GET
    data_selector: items
    params: {}
- name: Cluster
  endpoint:
    path: /clusters
    method: GET
    data_selector: items
    params: {}
- name: patches
  endpoint:
    path: /spec/patches
    method: POST
- name: variables
  endpoint:
    path: /spec/variables
    method: GET
- name: BeforeClusterCreate
  endpoint:
    path: /hooks/runtime/cluster.x-k8s.io/v1alpha1/before-cluster-create
    method: POST
    data_selector: status
    params: {}
- name: AfterControlPlaneInitialized
  endpoint:
    path: /hooks/runtime/cluster.x-k8s.io/v1alpha1/after-control-plane-initialized
    method: POST
    data_selector: status
    params: {}
- name: BeforeClusterUpgrade
  endpoint:
    path: /hooks/runtime/cluster.x-k8s.io/v1alpha1/before-cluster-upgrade
    method: POST
    data_selector: status
    params: {}
- name: AfterControlPlaneUpgrade
  endpoint:
    path: /hooks/runtime/cluster.x-k8s.io/v1alpha1/after-control-plane-upgrade
    method: POST
    data_selector: status
    params: {}
- name: AfterClusterUpgrade
  endpoint:
    path: /hooks/runtime/cluster.x-k8s.io/v1alpha1/after-cluster-upgrade
    method: POST
    data_selector: status
    params: {}
- name: BeforeClusterDelete
  endpoint:
    path: /hooks.runtime/cluster.x-k8s.io/v1alpha1/before-cluster-delete
    method: POST
    data_selector: status
    params: {}
- name: metrics
  endpoint:
    path: /metrics
    method: GET
    data_selector: metrics
- name: pprof
  endpoint:
    path: /debug/pprof
    method: GET
    data_selector: profiles
- name: podSecurityStandard
  endpoint:
    path: /spec/template/spec/kubeadmConfigSpec/clusterConfiguration/apiServer/extraArgs
    method: add
    data_selector: value
    params: {}
- name: admission-pss
  endpoint:
    path: /spec/template/spec/kubeadmConfigSpec/clusterConfiguration/apiServer/extraVolumes
    method: add
    data_selector: value
    params: {}
- name: admissionConfiguration
  endpoint:
    path: /spec/template/spec/kubeadmConfigSpec/files
    method: add
    data_selector: valueFrom
    params: {}
- name: Cluster
  endpoint:
    path: /clusters
    method: GET
    data_selector: clusters
- name: MachineSet
  endpoint:
    path: /machinesets
    method: GET
    data_selector: machinesets
- name: MachineDeployment
  endpoint:
    path: /machinedeployments
    method: GET
    data_selector: machinedeployments
- name: BootstrapConfig
  endpoint:
    path: /developer/providers/contracts/bootstrap-config
    method: GET
    data_selector: status
    params: {}
- name: InfrastructureMachinePool
  endpoint:
    path: /developer/providers/contracts/infrastructure-provider
    method: GET
    data_selector: status
    params: {}
- name: logs
  endpoint:
    path: /logs
    method: GET
    data_selector: log_records
- name: VPC
  endpoint:
    path: /v1/vpcs
    method: GET
    data_selector: vpcs
- name: PowerVS
  endpoint:
    path: /v1/powervs
    method: GET
    data_selector: powervs
- name: workload_cluster
  endpoint:
    path: /v1/workload
    method: POST
    data_selector: cluster
    params: {}
- name: Cluster
  endpoint:
    path: /cluster/api/v1/cluster
    method: GET
    data_selector: data
    params: {}
- name: Machine
  endpoint:
    path: /machine/api/v1/machine
    method: GET
    data_selector: data
    params: {}
- name: MicroK8sControlPlane
  endpoint:
    path: /api/v1/MicroK8sControlPlane
    method: POST
    data_selector: spec
    params: {}
- name: MachineDeployment
  endpoint:
    path: /api/v1/MachineDeployment
    method: POST
    data_selector: spec
    params: {}
- name: MicroK8sConfigTemplate
  endpoint:
    path: /api/v1/MicroK8sConfigTemplate
    method: POST
    data_selector: spec
    params: {}
- name: KubeadmControlPlane
  endpoint:
    path: /kubeadmcontrolplanes
    method: GET
- name: MachineDeployment
  endpoint:
    path: /machinedeployments
    method: GET
- name: MachineDeployment
  endpoint:
    path: /machine-deployment
    method: GET
    data_selector: deployments
    params: {}
- name: Cluster
  endpoint:
    path: /cluster
    method: GET
    data_selector: clusters
    params: {}
- name: MachineHealthCheck
  endpoint:
    path: /api/v1/MachineHealthCheck
    method: GET
    data_selector: items
- name: KubeadmControlPlane
  endpoint:
    path: /api/v1/KubeadmControlPlane
    method: GET
    data_selector: items
- name: MachinePool
  endpoint:
    path: /tasks/experimental-features/machine-pools
    method: GET
    data_selector: records
- name: ClusterClass
  endpoint:
    path: /tasks/experimental-features/cluster-class/
    method: GET
    data_selector: records
- name: ClusterClass
  endpoint:
    path: /clusterclass
    method: GET
    data_selector: classes
- name: Cluster
  endpoint:
    path: /clusters
    method: GET
    data_selector: clusters
- name: docker-clusterclass
  endpoint:
    path: /clusterclasses/docker-clusterclass-v0.1.0
    method: GET
- name: azure-clusterclass
  endpoint:
    path: /clusterclasses/azure-clusterclass-v0.1.0
    method: GET
- name: Cluster
  endpoint:
    path: /spec/topology
    method: PATCH
    data_selector: spec
    params: {}
- name: BeforeClusterCreate
  endpoint:
    path: /hooks.runtime.cluster.x-k8s.io/v1alpha1/BeforeClusterCreate
    method: POST
    data_selector: status
    params: {}
- name: AfterControlPlaneInitialized
  endpoint:
    path: /hooks.runtime.cluster.x-k8s.io/v1alpha1/AfterControlPlaneInitialized
    method: POST
    data_selector: status
    params: {}
- name: BeforeClusterUpgrade
  endpoint:
    path: /hooks.runtime.cluster.x-k8s.io/v1alpha1/BeforeClusterUpgrade
    method: POST
    data_selector: status
    params: {}
- name: AfterControlPlaneUpgrade
  endpoint:
    path: /hooks.runtime.cluster.x-k8s.io/v1alpha1/AfterControlPlaneUpgrade
    method: POST
    data_selector: status
    params: {}
- name: AfterClusterUpgrade
  endpoint:
    path: /hooks.runtime.cluster.x-k8s.io/v1alpha1/AfterClusterUpgrade
    method: POST
    data_selector: status
    params: {}
- name: BeforeClusterDelete
  endpoint:
    path: /hooks.runtime.cluster.x-k8s.io/v1alpha1/BeforeClusterDelete
    method: POST
    data_selector: status
    params: {}
- name: etcdImageTag
  endpoint:
    path: /path/to/etcdImageTag
    method: GET
    data_selector: etcdImageTag
    params:
      required: true
- name: preLoadImages
  endpoint:
    path: /path/to/preLoadImages
    method: GET
    data_selector: preLoadImages
    params:
      required: false
- name: podSecurityStandard
  endpoint:
    path: /path/to/podSecurityStandard
    method: GET
    data_selector: podSecurityStandard
    params:
      required: false
- name: metrics
  endpoint:
    path: /metrics
    method: GET
    data_selector: metrics
    params: {}
- name: pprof
  endpoint:
    path: /debug/pprof
    method: GET
    data_selector: profiles
    params: {}
- name: loglevel
  endpoint:
    path: /debug/flags/v
    method: PUT
    data_selector: loglevel
    params: {}
- name: podSecurityStandard
  endpoint:
    path: /spec/template/spec/kubeadmConfigSpec/clusterConfiguration/apiServer/extraArgs
    method: add
    data_selector: value
    params: {}
- name: kubeadmcontrolplanes
  endpoint:
    path: /kubeadmcontrolplanes
    method: POST
    data_selector: data
- name: machinedeployments
  endpoint:
    path: /machinedeployments
    method: POST
    data_selector: data
- name: Cluster
  endpoint:
    path: /clusters
    method: GET
    data_selector: clusters
- name: Machine
  endpoint:
    path: /machines
    method: GET
    data_selector: machines
- name: MachineSet
  endpoint:
    path: /machinesets
    method: GET
    data_selector: machinesets
- name: MachineDeployment
  endpoint:
    path: /machinedeployments
    method: GET
    data_selector: machinedeployments
- name: Machine
  endpoint:
    path: /machine
    method: POST
    data_selector: status
    params: {}
- name: MachinePool
  endpoint:
    path: /machinepool
    method: POST
    data_selector: status
    params: {}
- name: logs
  endpoint:
    path: /api/logs
    method: GET
    data_selector: msg
    params: {}
- name: management_cluster
  endpoint:
    path: /init
    method: POST
    data_selector: cluster
- name: provider_components
  endpoint:
    path: /providers
    method: GET
    data_selector: components
- name: VPC
  endpoint:
    path: /v1/vpcs
    method: GET
- name: PowerVS
  endpoint:
    path: /v1/powervs
    method: GET
- name: workload_cluster
  endpoint:
    path: /RPC2
    method: POST
    data_selector: result
    params: {}
- name: scaleway-secret
  endpoint:
    path: /kube-system/scaleway-secret
    method: POST
    data_selector: stringData
    params: {}
- name: KubeadmConfig
  endpoint:
    path: /kubeadmconfig
    method: GET
    data_selector: items
    params: {}
- name: DockerCluster
  endpoint:
    path: /dockercluster
    method: GET
    data_selector: items
    params: {}
- name: Cluster
  endpoint:
    path: /clusters
    method: GET
    data_selector: items
    params: {}
- name: Machine
  endpoint:
    path: /machines
    method: GET
    data_selector: items
    params: {}
- name: MicroK8sControlPlane
  endpoint:
    path: /api/v1beta1/microk8scontrolplanes
    method: GET
    data_selector: items
    params: {}
- name: MachineDeployment
  endpoint:
    path: /api/v1beta2/machinedeployments
    method: GET
    data_selector: items
    params: {}
- name: MachineDeployment
  endpoint:
    path: /cluster-api/machine-deployments
    method: GET
    data_selector: items
    params: {}
- name: MachineSet
  endpoint:
    path: /cluster-api/machine-sets
    method: GET
    data_selector: items
    params: {}
- name: MachinePool
  endpoint:
    path: /cluster-api/machine-pools
    method: GET
    data_selector: items
    params: {}
- name: MachineHealthCheck
  endpoint:
    path: /api/v1/machinehealthchecks
    method: POST
    data_selector: items
    params: {}
- name: KubeadmControlPlane
  endpoint:
    path: /api/v1/kubeadmcontrolplanes
    method: POST
    data_selector: items
    params: {}
- name: cluster
  endpoint:
    path: /clusters
    method: GET
    data_selector: items
    params: {}
- name: clusterclass
  endpoint:
    path: /clusterclasses
    method: GET
    data_selector: items
    params: {}
- name: docker-clusterclass-v0.1.0
  endpoint:
    path: /cluster.x-k8s.io/v1beta2
    method: GET
- name: cluster
  endpoint:
    path: /spec/topology
    method: PATCH
    data_selector: spec
    params: {}
- name: BeforeClusterCreate
  endpoint:
    path: /beforeClusterCreate
    method: POST
    data_selector: status
    params: {}
- name: AfterControlPlaneInitialized
  endpoint:
    path: /afterControlPlaneInitialized
    method: POST
    data_selector: status
    params: {}
- name: BeforeClusterUpgrade
  endpoint:
    path: /beforeClusterUpgrade
    method: POST
    data_selector: status
    params: {}
- name: AfterControlPlaneUpgrade
  endpoint:
    path: /afterControlPlaneUpgrade
    method: POST
    data_selector: status
    params: {}
- name: AfterClusterUpgrade
  endpoint:
    path: /afterClusterUpgrade
    method: POST
    data_selector: status
    params: {}
- name: BeforeClusterDelete
  endpoint:
    path: /beforeClusterDelete
    method: POST
    data_selector: status
    params: {}
- name: metrics
  endpoint:
    path: /metrics
    method: GET
    data_selector: metrics
    params: {}
- name: pprof
  endpoint:
    path: /debug/pprof/*
    method: GET
    data_selector: profiles
    params: {}
- name: log level
  endpoint:
    path: /debug/flags/v
    method: PUT
    data_selector: log level change
    params: {}
- name: ClusterClass
  endpoint:
    path: /api/v1beta2/clusterclasses
    method: GET
    data_selector: items
    params: {}
- name: Cluster
  endpoint:
    path: /api/v1beta2/clusters
    method: GET
    data_selector: items
    params: {}
- name: kubeadmcontrolplanes
  endpoint:
    path: /alpha/rollout/kubeadmcontrolplanes
    method: POST
- name: machinedeployments
  endpoint:
    path: /alpha/rollout/machinedeployments
    method: POST
- name: Cluster
  endpoint:
    path: /api/clusters
    method: GET
    data_selector: clusters
- name: Machine
  endpoint:
    path: /api/machines
    method: GET
    data_selector: machines
- name: Machine
  endpoint:
    path: /api/machine
    method: POST
    data_selector: status
    params: {}
- name: MachinePool
  endpoint:
    path: /api/machinepool
    method: POST
    data_selector: status
    params: {}
- name: workload_cluster
  endpoint:
    path: /clusters
    method: POST
    data_selector: clusters
    params: {}
- name: scaleway-secret
  endpoint:
    path: /api/v1/secrets/scaleway-secret
    method: POST
- name: KubeadmConfig
  endpoint:
    path: /kubeadmconfig
    method: GET
    data_selector: items
    params: {}
- name: DockerCluster
  endpoint:
    path: /dockercluster
    method: GET
    data_selector: items
    params: {}
- name: Machine
  endpoint:
    path: /machine
    method: GET
    data_selector: items
    params: {}
- name: MicroK8sControlPlane
  endpoint:
    path: /api/v1beta1/microk8scontrolplanes
    method: GET
    data_selector: items
    params: {}
- name: MachineDeployment
  endpoint:
    path: /api/v1beta1/machinedeployments
    method: GET
    data_selector: items
    params: {}
- name: MachineDeployment
  endpoint:
    path: /api/v1/machinedeployments
    method: GET
    data_selector: items
- name: MachineSet
  endpoint:
    path: /api/v1/machinesets
    method: GET
    data_selector: items
- name: MachinePool
  endpoint:
    path: /api/v1/machinepools
    method: GET
    data_selector: items
- name: MachineHealthCheck
  endpoint:
    path: /api/v1/machinehealthchecks
    method: POST
    data_selector: status
    params: {}
- name: cluster
  endpoint:
    path: /api/v1/namespaces/default/clusters/my-docker-cluster
    method: GET
    data_selector: spec.topology
    params: {}
- name: ClusterClass
  endpoint:
    path: /clusterclasses
    method: GET
    data_selector: items
    params: {}
- name: DockerMachineTemplate
  endpoint:
    path: /dockermachinetemplates
    method: GET
    data_selector: items
    params: {}
- name: BeforeClusterCreate
  endpoint:
    path: /hooks/runtime/cluster/x-k8s.io/v1alpha1/BeforeClusterCreate
    method: POST
    data_selector: settings
    params: {}
- name: AfterControlPlaneInitialized
  endpoint:
    path: /hooks/runtime/cluster/x-k8s.io/v1alpha1/AfterControlPlaneInitialized
    method: POST
    data_selector: settings
    params: {}
- name: BeforeClusterUpgrade
  endpoint:
    path: /hooks/runtime/cluster/x-k8s.io/v1alpha1/BeforeClusterUpgrade
    method: POST
    data_selector: settings
    params: {}
- name: AfterControlPlaneUpgrade
  endpoint:
    path: /hooks/runtime/cluster/x-k8s.io/v1alpha1/AfterControlPlaneUpgrade
    method: POST
    data_selector: settings
    params: {}
- name: AfterClusterUpgrade
  endpoint:
    path: /hooks/runtime/cluster/x-k8s.io/v1alpha1/AfterClusterUpgrade
    method: POST
    data_selector: settings
    params: {}
- name: BeforeClusterDelete
  endpoint:
    path: /hooks/runtime/cluster/x-k8s.io/v1alpha1/BeforeClusterDelete
    method: POST
    data_selector: settings
    params: {}
- name: metrics
  endpoint:
    path: /metrics
    method: GET
    data_selector: metrics
- name: pprof
  endpoint:
    path: /debug/pprof/*
    method: GET
    data_selector: pprof
- name: loglevel
  endpoint:
    path: /debug/flags/v
    method: PUT
    data_selector: loglevel
- name: podSecurityStandard
  endpoint:
    path: /spec/template/spec/kubeadmConfigSpec/clusterConfiguration/apiServer/extraArgs
    method: add
    data_selector: value
    params:
      admission-control-config-file: /etc/kubernetes/kube-apiserver-admission-pss.yaml
- name: admission-pss
  endpoint:
    path: /spec/template/spec/kubeadmConfigSpec/clusterConfiguration/apiServer/extraVolumes
    method: add
    data_selector: value
    params:
      name: admission-pss
      hostPath: /etc/kubernetes/kube-apiserver-admission-pss.yaml
      mountPath: /etc/kubernetes/kube-apiserver-admission-pss.yaml
      readOnly: true
      pathType: File
- name: AdmissionConfiguration
  endpoint:
    path: /spec/template/spec/kubeadmConfigSpec/files
    method: add
    data_selector: valueFrom.template
    params:
      content: "apiVersion: apiserver.config.k8s.io/v1\nkind: AdmissionConfiguration\n\
        plugins:\n- name: PodSecurity\nconfiguration:\n  apiVersion: pod-security.admission.config.k8s.io/v1\n\
        \  kind: PodSecurityConfiguration\n  defaults:\n    enforce: \"{{ .podSecurity.enforce\
        \ }}\"\n    enforce-version: \"latest\"\n    audit: \"{{ .podSecurity.audit\
        \ }}\"\n    audit-version: \"latest\"\n    warn: \"{{ .podSecurity.warn }}\"\
        \n    warn-version: \"latest\"\n  exemptions:\n    usernames: []\n    runtimeClasses:\
        \ []\n    namespaces: [kube-system]"
      path: /etc/kubernetes/kube-apiserver-admission-pss.yaml
- name: kubeadmcontrolplanes
  endpoint:
    path: /kubeadmcontrolplanes
    method: GET
- name: machinedeployments
  endpoint:
    path: /machinedeployments
    method: GET
- name: Machine
  endpoint:
    path: /developer/providers/contracts/bootstrap-config#bootstrapconfig-data-secret
    method: GET
    data_selector: Status.initialization.dataSecretCreated
    params: {}
- name: MachinePool
  endpoint:
    path: /developer/providers/contracts/bootstrap-config#bootstrapconfig-conditions
    method: GET
    data_selector: Status.Ready
    params: {}
- name: cluster_logs
  endpoint:
    path: /logs
    method: GET
    data_selector: logs
    params:
      cluster_name: my-cluster
      reconcileID: 6f6ad971-bdb6-4fa3-b803-ef81c5c8f9d0
      controller: cluster
- name: provider_logs
  endpoint:
    path: /logs/providers
    method: GET
    data_selector: logs
    params:
      cluster_name: my-cluster
      machine_name: my-cluster-linux-worker-1
- name: MailgunCluster
  endpoint:
    path: /infrastructure.cluster.x-k8s.io/v1alpha1/mailgunclusters
    method: GET
    data_selector: MailgunCluster
    params: {}
- name: MailgunMachine
  endpoint:
    path: /infrastructure.cluster.x-k8s.io/v1alpha1/mailgunmachines
    method: GET
    data_selector: MailgunMachine
    params: {}
- name: MailgunCluster
  endpoint:
    path: MailgunCluster
    method: GET
    data_selector: cluster
    params: {}
- name: vpc
  endpoint:
    path: /v1/vpcs
    method: GET
- name: cluster
  endpoint:
    path: /clusters
    method: POST
    data_selector: clusters
    params: {}
- name: scaleway-secret
  endpoint:
    path: /api/v1/secret
    method: POST
    data_selector: data
    params: {}
- name: MicroK8sControlPlane
  endpoint:
    path: /controlplane.cluster.x-k8s.io/v1beta1/MicroK8sControlPlane
    method: GET
    data_selector: spec.controlPlaneConfig
    params: {}
- name: MachineDeployment
  endpoint:
    path: /machine.x-k8s.io/v1beta2/MachineDeployment
    method: GET
    data_selector: spec.template.spec
    params: {}
- name: MachineDeployment
  endpoint:
    path: /v1alpha4/machinedeployments
    method: GET
    data_selector: items
    params: {}
- name: MachineSet
  endpoint:
    path: /v1alpha4/machinesets
    method: GET
    data_selector: items
    params: {}
- name: Cluster
  endpoint:
    path: /v1beta1/clusters
    method: GET
    data_selector: items
    params: {}
- name: MachineHealthCheck
  endpoint:
    path: /apis/cluster.x-k8s.io/v1beta2/machinehealthchecks
    method: GET
    data_selector: items
    params: {}
- name: KubeadmControlPlane
  endpoint:
    path: /apis/cluster.x-k8s.io/v1beta2/kubeadmcontrolplanes
    method: GET
    data_selector: items
    params: {}
- name: ClusterClass
  endpoint:
    path: /cluster-class
    method: GET
    data_selector: items
    params: {}
- name: Cluster
  endpoint:
    path: /clusters
    method: GET
    data_selector: items
    params: {}
- name: customImage
  endpoint:
    path: /spec/template/spec/customImage
    method: add
    data_selector: valueFrom.template
    params: {}
- name: httpProxy
  endpoint:
    path: /spec/template/spec/httpProxy/url
    method: add
    data_selector: valueFrom.variable
    params: {}
- name: mdConfig
  endpoint:
    path: /spec/template/spec/customImage
    method: add
    data_selector: valueFrom.template
    params: {}
- name: dnsServers
  endpoint:
    path: /spec/template/spec/dnsServers
    method: add
    data_selector: valueFrom.variable
    params: {}
- name: dnsServer
  endpoint:
    path: /spec/template/spec/dnsServer
    method: add
    data_selector: valueFrom.variable
    params: {}
- name: etcdImageTag
  endpoint:
    path: /spec/template/spec/kubeadmConfigSpec/clusterConfiguration/etcd
    method: add
    data_selector: valueFrom.template
    params: {}
- name: imageRepository
  endpoint:
    path: /spec/template/spec/kubeadmConfigSpec/clusterConfiguration/imageRepository
    method: add
    data_selector: value
    params: {}
- name: cluster
  endpoint:
    path: /clusters
    method: PATCH
    data_selector: spec
    params: {}
- name: BeforeClusterCreate
  endpoint:
    path: /hooks/runtime/cluster.x-k8s.io/v1alpha1/before-cluster-create
    method: POST
    data_selector: status
    params: {}
- name: AfterControlPlaneInitialized
  endpoint:
    path: /hooks/runtime/cluster.x-k8s.io/v1alpha1/after-control-plane-initialized
    method: POST
    data_selector: status
    params: {}
- name: BeforeClusterUpgrade
  endpoint:
    path: /hooks/runtime/cluster.x-k8s.io/v1alpha1/before-cluster-upgrade
    method: POST
    data_selector: status
    params: {}
- name: AfterControlPlaneUpgrade
  endpoint:
    path: /hooks/runtime/cluster.x-k8s.io/v1alpha1/after-control-plane-upgrade
    method: POST
    data_selector: status
    params: {}
- name: AfterClusterUpgrade
  endpoint:
    path: /hooks/runtime/cluster.x-k8s.io/v1alpha1/after-cluster-upgrade
    method: POST
    data_selector: status
    params: {}
- name: BeforeClusterDelete
  endpoint:
    path: /hooks/runtime/cluster.x-k8s.io/v1alpha1/before-cluster-delete
    method: POST
    data_selector: status
    params: {}
- name: GeneratePatches
  endpoint:
    path: /hooks/runtime/cluster.x-k8s.io/v1alpha1/generate-patches
    method: POST
    data_selector: status
    params: {}
- name: ValidateTopology
  endpoint:
    path: /hooks/runtime/cluster.x-k8s.io/v1alpha1/validate-topology
    method: POST
    data_selector: status
    params: {}
- name: DiscoverVariables
  endpoint:
    path: /hooks/runtime/cluster.x-k8s.io/v1alpha1/discover-variables
    method: POST
    data_selector: status
    params: {}
- name: DiscoverVariablesRequest
  endpoint:
    path: /v1alpha1/discover-variables
    method: POST
    data_selector: variables
- name: DiscoverVariablesResponse
  endpoint:
    path: /v1alpha1/discover-variables-response
    method: GET
    data_selector: status
- name: metrics
  endpoint:
    path: /metrics
    method: GET
    data_selector: metrics
- name: pprof
  endpoint:
    path: /debug/pprof/*
    method: GET
    data_selector: pprof
- name: loglevel
  endpoint:
    path: /debug/flags/v
    method: PUT
    data_selector: loglevel
- name: podSecurityStandard
  endpoint:
    path: /spec/template/spec/kubeadmConfigSpec/clusterConfiguration/apiServer/extraArgs
    method: add
    data_selector: value
    params: {}
- name: extraVolumes
  endpoint:
    path: /spec/template/spec/kubeadmConfigSpec/clusterConfiguration/apiServer/extraVolumes
    method: add
    data_selector: value
    params: {}
- name: files
  endpoint:
    path: /spec/template/spec/kubeadmConfigSpec/files
    method: add
    data_selector: valueFrom.template
    params: {}
- name: capd-controller-manager
  endpoint:
    path: /capd-controller-manager
    method: GET
- name: capi-kubeadm-bootstrap-controller-manager
  endpoint:
    path: /capi-kubeadm-bootstrap-controller-manager
    method: GET
- name: capi-kubeadm-control-plane-controller-manager
  endpoint:
    path: /capi-kubeadm-control-plane-controller-manager
    method: GET
- name: capi-controller-manager
  endpoint:
    path: /capi-controller-manager
    method: GET
- name: cert-manager
  endpoint:
    path: /cert-manager
    method: GET
- name: cert-manager-cainjector
  endpoint:
    path: /cert-manager-cainjector
    method: GET
- name: cert-manager-webhook
  endpoint:
    path: /cert-manager-webhook
    method: GET
- name: Cluster
  endpoint:
    path: /api/v1/cluster
    method: GET
    data_selector: clusters
    params: {}
- name: Machine
  endpoint:
    path: /api/v1/machine
    method: GET
    data_selector: machines
    params: {}
- name: Machine
  endpoint:
    path: /api/v1/machines
    method: POST
    data_selector: items
- name: MachinePool
  endpoint:
    path: /api/v1/machinepools
    method: POST
    data_selector: items
- name: logs
  endpoint:
    path: /logs
    method: GET
    data_selector: msg
    params: {}
- name: envtest
  endpoint:
    path: /pkg/envtest
    method: GET
    data_selector: records
- name: fakeclient
  endpoint:
    path: /pkg/client/fake
    method: GET
    data_selector: records
- name: ginkgo
  endpoint:
    path: /ginkgo
    method: GET
    data_selector: records
- name: gomega
  endpoint:
    path: /gomega
    method: GET
    data_selector: records
- name: MailgunCluster
  endpoint:
    path: /services/data/v1alpha1/sobjects/MailgunCluster
    method: GET
    data_selector: records
- name: MailgunMachine
  endpoint:
    path: /services/data/v1alpha1/sobjects/MailgunMachine
    method: GET
    data_selector: records
- name: mailgun_cluster
  endpoint:
    path: /v3/mailgun/cluster
    method: POST
    data_selector: data
    params: {}
- name: vpc
  endpoint:
    params:
      IBMVPC_REGION: us-south
      IBMVPC_ZONE: us-south-1
      IBMVPC_RESOURCEGROUP: <your-resource-group-id>
      IBMVPC_NAME: ibm-vpc-0
      IBMVPC_IMAGE_ID: <you-image-id>
      IBMVPC_PROFILE: bx2-4x16
      IBMVPC_SSHKEY_ID: <your-sshkey-id>
- name: powervs
  endpoint:
    params:
      IBMPOWERVS_SSHKEY_NAME: <your-ssh-key>
      IBMPOWERVS_VIP: <internal-ip>
      IBMPOWERVS_VIP_EXTERNAL: <external-ip>
      IBMPOWERVS_VIP_CIDR: 29
      IBMPOWERVS_IMAGE_NAME: <your-capi-image-name>
      IBMPOWERVS_SERVICE_INSTANCE_ID: <service-instance-id>
      IBMPOWERVS_NETWORK_NAME: <your-capi-network-name>
- name: machine_template
  endpoint:
    path: /machine_templates
    method: GET
    data_selector: machine_templates
    params: {}
- name: router_template
  endpoint:
    path: /router_templates
    method: GET
    data_selector: router_templates
    params: {}
- name: scaleway-secret
  endpoint:
    path: /
    method: POST
    data_selector: stringData
    params: {}
- name: KubeadmConfig
  endpoint:
    path: /v1beta2/kubeadmconfigs
    method: GET
    data_selector: items
    params: {}
- name: Machine
  endpoint:
    path: /v1beta2/machines
    method: GET
    data_selector: items
    params: {}
- name: DockerCluster
  endpoint:
    path: /v1beta2/dockerclusters
    method: GET
    data_selector: items
    params: {}
- name: MicroK8sControlPlane
  endpoint:
    path: /api/v1beta1/microk8scontrolplanes
    method: POST
    data_selector: items
    params: {}
- name: MachineDeployment
  endpoint:
    path: /api/v1beta2/machinedeployments
    method: POST
    data_selector: items
    params: {}
- name: KubeadmControlPlane
  endpoint:
    path: /kubeadmcontrolplanes
    method: GET
    data_selector: items
- name: MachineDeployment
  endpoint:
    path: /machinedeployments
    method: GET
    data_selector: items
- name: MachineDeployment
  endpoint:
    path: /api/v1/MachineDeployment
    method: POST
    data_selector: spec
    params: {}
- name: MachineSet
  endpoint:
    path: /api/v1/MachineSet
    method: POST
    data_selector: spec
    params: {}
- name: machine_health_check
  endpoint:
    path: /api/v1beta2/machinehealthchecks
    method: GET
    data_selector: items
    params: {}
- name: my-docker-cluster
  endpoint:
    path: /kind/Cluster
    method: GET
    data_selector: spec.topology
    params: {}
- name: customImage
  endpoint:
    path: /spec/template/spec/customImage
    method: add
    data_selector: valueFrom.template
    params: {}
- name: httpProxy
  endpoint:
    path: /spec/template/spec/httpProxy/url
    method: add
    data_selector: valueFrom.variable
    params: {}
- name: etcdImageTag
  endpoint:
    path: /spec/template/spec/kubeadmConfigSpec/clusterConfiguration/etcd
    method: add
    data_selector: valueFrom.template
    params: {}
- name: imageRepository
  endpoint:
    path: /spec/template/spec/kubeadmConfigSpec/clusterConfiguration/imageRepository
    method: add
    data_selector: value
    params: {}
- name: cluster
  endpoint:
    path: /spec/topology
    method: PATCH
    data_selector: spec
    params: {}
- name: before_cluster_create
  endpoint:
    path: /before_cluster_create
    method: POST
    data_selector: status
    params: {}
- name: after_control_plane_initialized
  endpoint:
    path: /after_control_plane_initialized
    method: POST
    data_selector: status
    params: {}
- name: before_cluster_upgrade
  endpoint:
    path: /before_cluster_upgrade
    method: POST
    data_selector: status
    params:
      fromKubernetesVersion: v1.21.2
      toKubernetesVersion: v1.22.0
- name: after_control_plane_upgrade
  endpoint:
    path: /after_control_plane_upgrade
    method: POST
    data_selector: status
    params:
      kubernetesVersion: v1.22.0
- name: after_cluster_upgrade
  endpoint:
    path: /after_cluster_upgrade
    method: POST
    data_selector: status
    params:
      kubernetesVersion: v1.22.0
- name: before_cluster_delete
  endpoint:
    path: /before_cluster_delete
    method: POST
    data_selector: status
    params: {}
- name: workload_cluster
  endpoint:
    path: /workload-cluster
    method: POST
    data_selector: cluster
    params: {}
- name: podSecurityStandard
  endpoint:
    path: /spec/template/spec/kubeadmConfigSpec/clusterConfiguration/apiServer/extraArgs
    method: ADD
    data_selector: value
    params: {}
- name: extraVolumes
  endpoint:
    path: /spec/template/spec/kubeadmConfigSpec/clusterConfiguration/apiServer/extraVolumes
    method: ADD
    data_selector: value
    params: {}
- name: files
  endpoint:
    path: /spec/template/spec/kubeadmConfigSpec/files
    method: ADD
    data_selector: valueFrom.template.content
    params: {}
- name: kubeadmcontrolplanes
  endpoint:
    path: /kubeadmcontrolplanes
    method: GET
- name: machinedeployments
  endpoint:
    path: /machinedeployments
    method: GET
- name: BootstrapConfig
  endpoint:
    path: /bootstrap/config
    method: GET
    data_selector: status
    params: {}
- name: capi-controller-manager
  endpoint:
    path: /services/data/vXX.X/sobjects/CapiControllerManager
    method: GET
    data_selector: logs
    params: {}
- name: MailgunCluster
  endpoint:
    path: /clusters
    method: POST
    data_selector: clusters
- name: MailgunMachine
  endpoint:
    path: /machines
    method: POST
    data_selector: machines
- name: mailgun_cluster
  endpoint:
    path: /v3/mailgun.org/messages
    method: POST
    data_selector: message
    params: {}
- name: InfraCluster
  endpoint:
    path: ''
    method: ''
    data_selector: ''
    params: {}
- name: InfraClusterList
  endpoint:
    path: ''
    method: ''
    data_selector: ''
    params: {}
- name: vpc
  endpoint:
    path: /v1/vpcs
    method: GET
    data_selector: vpcs
- name: workload_clusters
  endpoint:
    path: /workload_clusters
    method: GET
    data_selector: clusters
- name: DockerCluster
  endpoint:
    path: /infrastructure.cluster.x-k8s.io/v1beta2/DockerCluster
    method: GET
    data_selector: items
- name: KubeadmConfig
  endpoint:
    path: /bootstrap.cluster.x-k8s.io/v1beta2/KubeadmConfig
    method: GET
    data_selector: items
- name: Machine
  endpoint:
    path: /cluster.x-k8s.io/v1beta2/Machine
    method: GET
    data_selector: items
- name: Cluster
  endpoint:
    path: /cluster.x-k8s.io/v1beta2/Cluster
    method: GET
    data_selector: items
- name: MicroK8sControlPlane
  endpoint:
    path: /controlplane.cluster.x-k8s.io/v1beta1/microk8scontrolplanes
    method: POST
    data_selector: spec
    params: {}
- name: MachineDeployment
  endpoint:
    path: /cluster.x-k8s.io/v1beta2/machinedeployments
    method: POST
    data_selector: spec
    params: {}
- name: KubeadmControlPlane
  endpoint:
    path: /kubeadmcontrolplanes
    method: GET
    data_selector: items
- name: MachineDeployment
  endpoint:
    path: /machinedeployments
    method: GET
    data_selector: items
- name: MachineHealthCheck
  endpoint:
    path: /machinehealthchecks
    method: GET
    data_selector: items
- name: MachineDeployment
  endpoint:
    annotations:
      cluster.x-k8s.io/cluster-api-autoscaler-node-group-max-size: '5'
      cluster.x-k8s.io/cluster-api-autoscaler-node-group-min-size: '0'
      capacity.cluster-autoscaler.kubernetes.io/memory: 128G
      capacity.cluster-autoscaler.kubernetes.io/cpu: '16'
      capacity.cluster-autoscaler.kubernetes.io/ephemeral-disk: 100Gi
      capacity.cluster-autoscaler.kubernetes.io/maxPods: '200'
      capacity.cluster-autoscaler.kubernetes.io/gpu-type: nvidia.com/gpu
      capacity.cluster-autoscaler.kubernetes.io/gpu-count: '2'
- name: MachineHealthCheck
  endpoint:
    path: /apis/cluster.x-k8s.io/v1beta2/machinehealthchecks
    method: POST
    data_selector: items
    params:
      clusterName: capi-quickstart
      maxUnhealthy: 40%
- name: KubeadmControlPlane
  endpoint:
    path: /apis/cluster.x-k8s.io/v1beta2/kubeadmcontrolplanes
    method: POST
    data_selector: items
    params:
      remediationStrategy:
        maxRetry: 5
        retryPeriod: 2m
        minHealthyPeriod: 2h
- name: cluster
  endpoint:
    path: /api/v1/clusters
    method: GET
    data_selector: clusters
- name: ClusterClass
  endpoint:
    path: /clusterclasses
    method: GET
    data_selector: items
- name: Cluster
  endpoint:
    path: /clusters
    method: PATCH
    data_selector: spec
    params: {}
- name: ExtensionConfig
  endpoint:
    path: /api/v1/namespaces/default/services/https:webhook-service:443/proxy/hooks.runtime.cluster.x-k8s.io/v1alpha1/discovery
    method: POST
    data_selector: apiVersion
    params: {}
- name: BeforeClusterCreate
  endpoint:
    path: /hooks/runtime/cluster.x-k8s.io/v1alpha1/before-cluster-create
    method: POST
    data_selector: status
    params: {}
- name: AfterControlPlaneInitialized
  endpoint:
    path: /hooks/runtime/cluster.x-k8s.io/v1alpha1/after-control-plane-initialized
    method: POST
    data_selector: status
    params: {}
- name: BeforeClusterUpgrade
  endpoint:
    path: /hooks/runtime/cluster.x-k8s.io/v1alpha1/before-cluster-upgrade
    method: POST
    data_selector: status
    params: {}
- name: AfterControlPlaneUpgrade
  endpoint:
    path: /hooks/runtime/cluster.x-k8s.io/v1alpha1/after-control-plane-upgrade
    method: POST
    data_selector: status
    params: {}
- name: AfterClusterUpgrade
  endpoint:
    path: /hooks/runtime/cluster.x-k8s.io/v1alpha1/after-cluster-upgrade
    method: POST
    data_selector: status
    params: {}
- name: BeforeClusterDelete
  endpoint:
    path: /hooks/runtime/cluster.x-k8s.io/v1alpha1/before-cluster-delete
    method: POST
    data_selector: status
    params: {}
- name: GeneratePatches
  endpoint:
    path: /hooks/runtime/cluster.x-k8s.io/v1alpha1/generate-patches
    method: POST
    data_selector: status
    params: {}
- name: ValidateTopology
  endpoint:
    path: /hooks/runtime/cluster.x-k8s.io/v1alpha1/validate-topology
    method: POST
    data_selector: status
    params: {}
- name: DiscoverVariables
  endpoint:
    path: /hooks/runtime/cluster.x-k8s.io/v1alpha1/discover-variables
    method: POST
    data_selector: status
    params: {}
- name: workload_cluster
  endpoint:
    path: /api/v1/clusters
    method: POST
    data_selector: clusters
    params: {}
- name: metrics
  endpoint:
    path: /metrics
    method: GET
- name: pprof
  endpoint:
    path: /debug/pprof/*
    method: GET
- name: log_level
  endpoint:
    path: /debug/flags/v
    method: PUT
- name: podSecurityStandard
  endpoint:
    path: /spec/template/spec/kubeadmConfigSpec/clusterConfiguration/apiServer/extraArgs
    method: ADD
    data_selector: value
    params: {}
- name: admission-pss
  endpoint:
    path: /spec/template/spec/kubeadmConfigSpec/clusterConfiguration/apiServer/extraVolumes
    method: ADD
    data_selector: value
    params: {}
- name: AdmissionConfiguration
  endpoint:
    path: /spec/template/spec/kubeadmConfigSpec/files
    method: ADD
    data_selector: valueFrom
    params: {}
- name: kubeadmcontrolplanes
  endpoint:
    path: /kubeadmcontrolplanes
    method: GET
- name: machinedeployments
  endpoint:
    path: /machinedeployments
    method: GET
- name: Cluster
  endpoint:
    path: /clusters
    method: GET
    data_selector: clusters
- name: Machine
  endpoint:
    path: /machines
    method: GET
    data_selector: machines
- name: Machine
  endpoint:
    path: /machines
    method: GET
    data_selector: machines
    params: {}
- name: MachinePool
  endpoint:
    path: /machinepools
    method: GET
    data_selector: machinePools
    params: {}
- name: MachineHealthCheck
  endpoint:
    path: /machinehealthchecks
    method: GET
    data_selector: machineHealthChecks
    params: {}
- name: logs
  endpoint:
    path: /capi-controller-manager/logs
    method: GET
    data_selector: message
    params: {}
- name: MailgunCluster
  endpoint:
    path: /v1/mailgunclusters
    method: POST
    data_selector: data
    params: {}
- name: MailgunMachine
  endpoint:
    path: /v1/mailgunmachines
    method: POST
    data_selector: data
    params: {}
- name: mailgun_cluster
  endpoint:
    path: /clusters
    method: POST
    data_selector: data
    params: {}
- name: mailgun_message
  endpoint:
    path: /messages
    method: POST
    data_selector: data
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: failure_domains
  endpoint:
    path: /status/failureDomains
    method: GET
    data_selector: failureDomains
- name: initialization
  endpoint:
    path: /status/initialization
    method: GET
    data_selector: initialization
- name: cloud_provider
  endpoint:
    path: /v1/cloud_provider
    method: GET
- name: workload_cluster
  endpoint:
    path: /workload_clusters
    method: GET
    data_selector: clusters
    params: {}
- name: KubeadmConfig
  endpoint:
    path: /kubeadm-config
    method: POST
    data_selector: configurations
    params: {}
- name: Cluster
  endpoint:
    path: /clusters
    method: GET
    data_selector: clusters
    params: {}
- name: MicroK8sControlPlane
  endpoint:
    path: /api/v1beta1/microk8scontrolplanes
    method: GET
    data_selector: items
    params: {}
- name: MachineDeployment
  endpoint:
    path: /api/v1beta2/machinedeployments
    method: GET
    data_selector: items
    params: {}
- name: KubeadmConfig
  endpoint:
    path: /api/bootstrap.cluster.x-k8s.io/v1alpha3/kubeadmconfigs
    method: GET
    data_selector: items
- name: MachineDeployment
  endpoint:
    path: /api/cluster.x-k8s.io/v1beta2/machinedeployments
    method: GET
    data_selector: items
- name: MachineHealthCheck
  endpoint:
    path: /api/cluster.x-k8s.io/v1beta2/machinehealthchecks
    method: GET
    data_selector: items
- name: MachineDeployment
  endpoint:
    path: /cluster-api/MachineDeployment
    method: POST
    data_selector: items
    params: {}
- name: MachineSet
  endpoint:
    path: /cluster-api/MachineSet
    method: POST
    data_selector: items
    params: {}
- name: MachineHealthCheck
  endpoint:
    path: /cluster-api/MachineHealthCheck
    method: POST
    data_selector: items
    params: {}
- name: capi-quickstart-node-unhealthy-5m
  endpoint:
    path: /services/data/vXX.X/sobjects/MachineHealthCheck
    method: POST
    data_selector: spec
    params:
      clusterName: capi-quickstart
      maxUnhealthy: 40%
      nodeStartupTimeout: 10m
      selector:
        matchLabels:
          nodepool: nodepool-0
      unhealthyNodeConditions:
      - type: Ready
        status: Unknown
        timeout: 300s
      - type: Ready
        status: 'False'
        timeout: 300s
- name: capi-quickstart-kcp-unhealthy-5m
  endpoint:
    path: /services/data/vXX.X/sobjects/MachineHealthCheck
    method: POST
    data_selector: spec
    params:
      clusterName: capi-quickstart
      maxUnhealthy: 100%
      selector:
        matchLabels:
          cluster.x-k8s.io/control-plane: ''
      unhealthyNodeConditions:
      - type: Ready
        status: Unknown
        timeout: 300s
      - type: Ready
        status: 'False'
        timeout: 300s
- name: ClusterClass
  endpoint:
    path: /clusterclass
    method: GET
    data_selector: items
- name: Cluster
  endpoint:
    path: /clusters
    method: GET
    data_selector: items
- name: customImage
  endpoint:
    path: /spec/template/spec/customImage
    method: add
    data_selector: valueFrom
    params: {}
- name: httpProxy
  endpoint:
    path: /spec/template/spec/httpProxy/url
    method: add
    data_selector: valueFrom.variable
    params: {}
- name: mdConfig
  endpoint:
    path: /spec/template/spec/customImage
    method: add
    data_selector: valueFrom.template
    params: {}
- name: dnsServers
  endpoint:
    path: /spec/template/spec/dnsServers
    method: add
    data_selector: valueFrom.variable
    params: {}
- name: dnsServer
  endpoint:
    path: /spec/template/spec/dnsServer
    method: add
    data_selector: valueFrom.variable
    params: {}
- name: controlPlane
  endpoint:
    path: /spec/topology/controlPlane
    method: PATCH
    data_selector: metadata
    params: {}
- name: machineDeployments
  endpoint:
    path: /spec/topology/workers/machineDeployments
    method: PATCH
    data_selector: metadata
    params: {}
- name: BeforeClusterCreate
  endpoint:
    path: /hooks/runtime/cluster/x-k8s.io/v1alpha1/beforeClusterCreate
    method: POST
    data_selector: status
    params: {}
- name: AfterControlPlaneInitialized
  endpoint:
    path: /hooks/runtime/cluster/x-k8s.io/v1alpha1/afterControlPlaneInitialized
    method: POST
    data_selector: status
    params: {}
- name: BeforeClusterUpgrade
  endpoint:
    path: /hooks/runtime/cluster/x-k8s.io/v1alpha1/beforeClusterUpgrade
    method: POST
    data_selector: status
    params: {}
- name: AfterControlPlaneUpgrade
  endpoint:
    path: /hooks/runtime/cluster/x-k8s.io/v1alpha1/afterControlPlaneUpgrade
    method: POST
    data_selector: status
    params: {}
- name: AfterClusterUpgrade
  endpoint:
    path: /hooks/runtime/cluster/x-k8s.io/v1alpha1/afterClusterUpgrade
    method: POST
    data_selector: status
    params: {}
- name: BeforeClusterDelete
  endpoint:
    path: /hooks/runtime/cluster/x-k8s.io/v1alpha1/beforeClusterDelete
    method: POST
    data_selector: status
    params: {}
- name: metrics
  endpoint:
    path: /metrics
    method: GET
- name: pprof
  endpoint:
    path: /debug/pprof/*
    method: GET
- name: loglevel
  endpoint:
    path: /debug/flags/v
    method: PUT
- name: podSecurityStandard
  endpoint:
    path: /spec/template/spec/kubeadmConfigSpec/clusterConfiguration/apiServer/extraArgs
    method: POST
    data_selector: admission-control-config-file
    params: {}
- name: cluster
  endpoint:
    path: /generate/cluster
    method: POST
    data_selector: template
    params:
      kubernetes-version: v1.28.0
      control-plane-machine-count: 3
      worker-machine-count: 3
- name: provider
  endpoint:
    path: /generate/provider
    method: POST
    data_selector: template
    params:
      infrastructure: aws
- name: kubeadmcontrolplanes
  endpoint:
    path: /kubeadmcontrolplanes
    method: GET
- name: machinedeployments
  endpoint:
    path: /machinedeployments
    method: GET
- name: Cluster
  endpoint:
    path: /api/v1/cluster
    method: GET
    data_selector: clusters
- name: MachineDeployment
  endpoint:
    path: /api/v1/machinedeployments
    method: GET
    data_selector: machinedeployments
- name: MachineSet
  endpoint:
    path: /api/v1/machinesets
    method: GET
    data_selector: machinesets
- name: Machine
  endpoint:
    path: /api/v1/machines
    method: GET
    data_selector: machines
- name: MachinePool
  endpoint:
    path: /api/v1/machinepools
    method: GET
    data_selector: machinePools
- name: logs
  endpoint:
    path: /logs
    method: GET
- name: MailgunCluster
  endpoint:
    path: /clusters
    method: POST
    data_selector: response
    params: {}
- name: MailgunMachine
  endpoint:
    path: /machines
    method: POST
    data_selector: response
    params: {}
- name: MailgunCluster
  endpoint:
    path: /v3/clusters
    method: POST
    data_selector: cluster
- name: fooclusters
  endpoint:
    path: /fooclusters
    method: GET
    data_selector: items
- name: fooclustertemplates
  endpoint:
    path: /fooclustertemplates
    method: GET
    data_selector: items
- name: management_cluster
  endpoint:
    path: /management/cluster
    method: POST
    data_selector: cluster
    params: {}
- name: workload_cluster
  endpoint:
    path: /clusters
    method: GET
    data_selector: clusters
    params: {}
- name: KubeadmConfig
  endpoint:
    path: /kubeadm/config
    method: GET
    data_selector: items
    params: {}
- name: DockerCluster
  endpoint:
    path: /docker/cluster
    method: GET
    data_selector: items
    params: {}
- name: Machine
  endpoint:
    path: /machine
    method: GET
    data_selector: items
    params: {}
- name: MicroK8sControlPlane
  endpoint:
    path: /api/v1beta1/microk8scontrolplane
    method: POST
    data_selector: spec
    params: {}
- name: MachineDeployment
  endpoint:
    path: /api/v1beta1/machinedeployment
    method: POST
    data_selector: spec
    params: {}
- name: MachineHealthCheck
  endpoint:
    path: /cluster.x-k8s.io/v1beta2/machinehealthchecks
    method: POST
    data_selector: items
    params: {}
- name: MachineDeployment
  endpoint:
    path: /cluster-api/v1alpha4/machinedeployments
    method: GET
    data_selector: items
- name: MachineSet
  endpoint:
    path: /cluster-api/v1alpha4/machinesets
    method: GET
    data_selector: items
- name: MachineHealthCheck
  endpoint:
    path: /api/v1/machinehealthchecks
    method: POST
    data_selector: items
    params: {}
- name: KubeadmControlPlane
  endpoint:
    path: /api/v1/kubeadmcontrolplanes
    method: POST
    data_selector: items
    params: {}
- name: ClusterClass
  endpoint:
    path: /api/v1/clusterclass
    method: GET
    data_selector: items
    params: {}
- name: Cluster
  endpoint:
    path: /api/v1/cluster
    method: GET
    data_selector: items
    params: {}
- name: docker-clusterclass
  endpoint:
    path: /cluster.x-k8s.io/v1beta2/docker-clusterclass
    method: GET
    data_selector: records
- name: azure-clusterclass
  endpoint:
    path: /cluster.x-k8s.io/v1beta2/azure-clusterclass
    method: GET
    data_selector: records
- name: Cluster
  endpoint:
    path: /clusters
    method: PATCH
    data_selector: spec.topology
    params: {}
- name: MachineDeployment
  endpoint:
    path: /machinedeployments
    method: PATCH
    data_selector: spec.topology.workers.machineDeployments
    params: {}
- name: ControlPlane
  endpoint:
    path: /controlplanes
    method: PATCH
    data_selector: spec.topology.controlPlane
    params: {}
- name: BeforeClusterCreate
  endpoint:
    path: /hooks/runtime/cluster.x-k8s.io/v1alpha1/before-cluster-create
    method: POST
    data_selector: status
    params: {}
- name: AfterControlPlaneInitialized
  endpoint:
    path: /hooks/runtime/cluster.x-k8s.io/v1alpha1/after-control-plane-initialized
    method: POST
    data_selector: status
    params: {}
- name: BeforeClusterUpgrade
  endpoint:
    path: /hooks/runtime/cluster.x-k8s.io/v1alpha1/before-cluster-upgrade
    method: POST
    data_selector: status
    params: {}
- name: AfterControlPlaneUpgrade
  endpoint:
    path: /hooks/runtime/cluster.x-k8s.io/v1alpha1/after-control-plane-upgrade
    method: POST
    data_selector: status
    params: {}
- name: AfterClusterUpgrade
  endpoint:
    path: /hooks/runtime/cluster.x-k8s.io/v1alpha1/after-cluster-upgrade
    method: POST
    data_selector: status
    params: {}
- name: BeforeClusterDelete
  endpoint:
    path: /hooks/runtime/cluster.x-k8s.io/v1alpha1/before-cluster-delete
    method: POST
    data_selector: status
    params: {}
- name: GeneratePatches
  endpoint:
    path: /hooks/runtime/cluster.x-k8s.io/v1alpha1/generate-patches
    method: POST
    data_selector: items
    params: {}
- name: ValidateTopology
  endpoint:
    path: /hooks/runtime/cluster.x-k8s.io/v1alpha1/validate-topology
    method: POST
    data_selector: status
    params: {}
- name: DiscoverVariables
  endpoint:
    path: /hooks/runtime/cluster.x-k8s.io/v1alpha1/discover-variables
    method: POST
    data_selector: variables
    params: {}
- name: workload_cluster
  endpoint:
    path: /clusters
    method: GET
    data_selector: clusters
    params: {}
- name: metrics
  endpoint:
    path: /metrics
    method: GET
    data_selector: metrics
    params: {}
- name: pprof
  endpoint:
    path: /debug/pprof
    method: GET
    data_selector: pprof
    params: {}
- name: log_level
  endpoint:
    path: /debug/flags/v
    method: PUT
    data_selector: log level
    params: {}
- name: podSecurityStandard
  endpoint:
    path: /spec/template/spec/kubeadmConfigSpec/clusterConfiguration/apiServer/extraArgs
    method: add
    data_selector: value
    params:
      admission-control-config-file: /etc/kubernetes/kube-apiserver-admission-pss.yaml
- name: admission-pss
  endpoint:
    path: /spec/template/spec/kubeadmConfigSpec/clusterConfiguration/apiServer/extraVolumes
    method: add
    data_selector: value
    params:
      name: admission-pss
      hostPath: /etc/kubernetes/kube-apiserver-admission-pss.yaml
      mountPath: /etc/kubernetes/kube-apiserver-admission-pss.yaml
      readOnly: true
      pathType: File
- name: files
  endpoint:
    path: /spec/template/spec/kubeadmConfigSpec/files
    method: add
    data_selector: valueFrom
    params:
      template:
        content:
          apiVersion: apiserver.config.k8s.io/v1
          kind: AdmissionConfiguration
          plugins:
          - name: PodSecurity
            configuration:
              apiVersion: pod-security.admission.config.k8s.io/v1
              kind: PodSecurityConfiguration
              defaults:
                enforce: '{{ .podSecurity.enforce }}'
                enforce-version: latest
                audit: '{{ .podSecurity.audit }}'
                audit-version: latest
                warn: '{{ .podSecurity.warn }}'
                warn-version: latest
              exemptions:
                usernames: []
                runtimeClasses: []
                namespaces:
                - kube-system
        path: /etc/kubernetes/kube-apiserver-admission-pss.yaml
- name: kubeadmcontrolplanes
  endpoint:
    path: /clusterctl/alpha/rollout/kubeadmcontrolplanes
    method: POST
- name: machinedeployments
  endpoint:
    path: /clusterctl/alpha/rollout/machinedeployments
    method: POST
- name: Cluster
  endpoint:
    path: /api/v1/clusters
    method: GET
    data_selector: items
- name: Machine
  endpoint:
    path: /api/v1/machines
    method: GET
    data_selector: items
- name: MachineSet
  endpoint:
    path: /api/v1/machineSets
    method: GET
    data_selector: items
- name: MachineDeployment
  endpoint:
    path: /api/v1/machineDeployments
    method: GET
    data_selector: items
- name: ClusterClass
  endpoint:
    path: /api/v1/clusterClasses
    method: GET
    data_selector: items
- name: Machine
  endpoint:
    path: /api/v1/machines
    method: GET
    data_selector: items
- name: MachinePool
  endpoint:
    path: /api/v1/machinepools
    method: GET
    data_selector: items
- name: MailgunCluster
  endpoint:
    path: /clusters
    method: POST
    data_selector: results
    params: {}
- name: MailgunMachine
  endpoint:
    path: /machines
    method: POST
    data_selector: results
    params: {}
- name: MailgunCluster
  endpoint:
    path: /v3/mailgun/cluster
    method: POST
    data_selector: data
    params: {}
- name: FooCluster
  endpoint:
    path: /fooclusters
    method: GET
- name: FooClusterList
  endpoint:
    path: /fooclusterslist
    method: GET
- name: VPC
  endpoint:
    path: /v1/vpcs
    method: GET
- name: PowerVS
  endpoint:
    path: /v1/powervs
    method: GET
- name: ironic
  endpoint:
    path: /v1/images
    method: GET
    data_selector: images
    params: {}
- name: scaleway-secret
  endpoint:
    path: /api/v1/namespaces/kube-system/secrets
    method: POST
    data_selector: metadata.name
    params: {}
- name: MicroK8sControlPlane
  endpoint:
    path: /api/v1beta1/microk8scontrolplane
    method: GET
    data_selector: spec.controlPlaneConfig
    params: {}
- name: MachineDeployment
  endpoint:
    path: /api/v1beta2/machinedeployment
    method: GET
    data_selector: spec.template.spec
    params: {}
- name: MachineTemplate
  endpoint:
    path: /services/data/vXX.X/MachineTemplate
    method: POST
    data_selector: template
    params: {}
- name: KubeadmControlPlane
  endpoint:
    path: /services/data/vXX.X/KubeadmControlPlane
    method: PUT
    data_selector: spec
    params: {}
- name: MachineDeployment
  endpoint:
    path: /apis/cluster.x-k8s.io/v1beta1/machinedeployments
    method: GET
    data_selector: items
    params: {}
- name: MachineSet
  endpoint:
    path: /apis/cluster.x-k8s.io/v1beta1/machinesets
    method: GET
    data_selector: items
    params: {}
- name: MachineHealthCheck
  endpoint:
    path: /cluster-api/v1beta2/machinehealthchecks
    method: POST
    data_selector: status
    params: {}
- name: KubeadmControlPlane
  endpoint:
    path: /cluster-api/v1beta2/kubeadmcontrolplanes
    method: POST
    data_selector: status
    params: {}
- name: ClusterClass
  endpoint:
    path: /clusterclasses
    method: GET
    data_selector: items
- name: Cluster
  endpoint:
    path: /clusters
    method: GET
    data_selector: items
- name: docker-clusterclass
  endpoint:
    path: /cluster-classes/docker-clusterclass
    method: GET
- name: azure-clusterclass
  endpoint:
    path: /cluster-classes/azure-clusterclass
    method: GET
- name: BeforeClusterCreate
  endpoint:
    path: /hooks/runtime/cluster/x-k8s.io/v1alpha1/beforeClusterCreate
    method: POST
    data_selector: status
    params: {}
- name: AfterControlPlaneInitialized
  endpoint:
    path: /hooks/runtime/cluster/x-k8s.io/v1alpha1/afterControlPlaneInitialized
    method: POST
    data_selector: status
    params: {}
- name: BeforeClusterUpgrade
  endpoint:
    path: /hooks/runtime/cluster/x-k8s.io/v1alpha1/beforeClusterUpgrade
    method: POST
    data_selector: status
    params: {}
- name: AfterControlPlaneUpgrade
  endpoint:
    path: /hooks/runtime/cluster/x-k8s.io/v1alpha1/afterControlPlaneUpgrade
    method: POST
    data_selector: status
    params: {}
- name: AfterClusterUpgrade
  endpoint:
    path: /hooks/runtime/cluster/x-k8s.io/v1alpha1/afterClusterUpgrade
    method: POST
    data_selector: status
    params: {}
- name: BeforeClusterDelete
  endpoint:
    path: /hooks/runtime/cluster/x-k8s.io/v1alpha1/beforeClusterDelete
    method: POST
    data_selector: status
    params: {}
- name: etcdImageTag
  endpoint:
    path: /api/v1/etcdImageTag
    method: GET
    data_selector: records
- name: preLoadImages
  endpoint:
    path: /api/v1/preLoadImages
    method: GET
    data_selector: records
- name: podSecurityStandard
  endpoint:
    path: /api/v1/podSecurityStandard
    method: GET
    data_selector: records
- name: metrics
  endpoint:
    path: /metrics
    method: GET
    data_selector: metrics
    params: {}
- name: pprof
  endpoint:
    path: /debug/pprof/
    method: GET
    data_selector: profiles
    params: {}
- name: podSecurityStandard
  endpoint:
    path: /spec/template/spec/kubeadmConfigSpec/clusterConfiguration/apiServer/extraArgs
    method: add
    data_selector: value
    params:
      admission-control-config-file: /etc/kubernetes/kube-apiserver-admission-pss.yaml
- name: extraVolumes
  endpoint:
    path: /spec/template/spec/kubeadmConfigSpec/clusterConfiguration/apiServer/extraVolumes
    method: add
    data_selector: value
    params:
      name: admission-pss
      hostPath: /etc/kubernetes/kube-apiserver-admission-pss.yaml
      mountPath: /etc/kubernetes/kube-apiserver-admission-pss.yaml
      readOnly: true
      pathType: File
- name: files
  endpoint:
    path: /spec/template/spec/kubeadmConfigSpec/files
    method: add
    data_selector: valueFrom
    params:
      template:
      - content: "apiVersion: apiserver.config.k8s.io/v1\nkind: AdmissionConfiguration\n\
          plugins:\n- name: PodSecurity\n  configuration:\n    apiVersion: pod-security.admission.config.k8s.io/v1\n\
          \    kind: PodSecurityConfiguration\n    defaults:\n      enforce: \"{{\
          \ .podSecurity.enforce }}\"\n      enforce-version: \"latest\"\n      audit:\
          \ \"{{ .podSecurity.audit }}\"\n      audit-version: \"latest\"\n      warn:\
          \ \"{{ .podSecurity.warn }}\"\n      warn-version: \"latest\"\n    exemptions:\n\
          \      usernames: []\n      runtimeClasses: []\n      namespaces: [kube-system]"
        path: /etc/kubernetes/kube-apiserver-admission-pss.yaml
- name: kubeadmcontrolplanes
  endpoint:
    path: /kubeadmcontrolplanes
    method: GET
- name: machinedeployments
  endpoint:
    path: /machinedeployments
    method: GET
- name: Cluster
  endpoint:
    path: /api/v1/cluster
    method: GET
    data_selector: items
    params: {}
- name: MachineDeployment
  endpoint:
    path: /api/v1/machinedeployment
    method: GET
    data_selector: items
    params: {}
- name: MachineSet
  endpoint:
    path: /api/v1/machineset
    method: GET
    data_selector: items
    params: {}
- name: Machine
  endpoint:
    path: /api/v1/machines
    method: GET
    data_selector: items
- name: MachinePool
  endpoint:
    path: /api/v1/machinepools
    method: GET
    data_selector: items
- name: cluster_logs
  endpoint:
    path: /logs/capi-controller-manager
    method: GET
    data_selector: logs
    params: {}
- name: provider_logs
  endpoint:
    path: /logs/providers
    method: GET
    data_selector: logs
    params:
      app: capd-controller-manager|capi-kubeadm-bootstrap-controller-manager|capi-kubeadm-control-plane-controller-manager
- name: envtest
  endpoint:
    path: /envtest
    method: GET
    data_selector: tests
    params: {}
- name: fakeclient
  endpoint:
    path: /fakeclient
    method: GET
    data_selector: clients
    params: {}
- name: ginkgo
  endpoint:
    path: /ginkgo
    method: GET
    data_selector: tests
    params: {}
- name: gomega
  endpoint:
    path: /gomega
    method: GET
    data_selector: matchers
    params: {}
- name: go test
  endpoint:
    path: /go-test
    method: GET
    data_selector: tests
    params: {}
- name: MailgunCluster
  endpoint:
    path: /clusters
    method: POST
    data_selector: data
    params: {}
- name: MailgunMachine
  endpoint:
    path: /machines
    method: POST
    data_selector: data
    params: {}
- name: MailgunCluster
  endpoint:
    path: /v3/mailgun/cluster
    method: POST
    data_selector: data
    params: {}
- name: FooClusterTemplate
  endpoint:
    path: /fooclustertemplates
    method: GET
    data_selector: items
- name: FooClusterTemplateList
  endpoint:
    path: /fooclustertemplates
    method: GET
    data_selector: items
- name: FooMachine
  endpoint:
    path: /foomachines
    method: GET
    data_selector: items
- name: FooMachineList
  endpoint:
    path: /foomachines
    method: GET
    data_selector: items
- name: IBM VPC
  endpoint:
    path: /vpc/resources
    method: GET
    data_selector: resources
    params: {}
- name: PowerVS
  endpoint:
    path: /powervs/resources
    method: GET
    data_selector: resources
    params: {}
- name: instance
  endpoint:
    path: /RPC2
    method: POST
    data_selector: response
    params:
      incremental: updated_at
- name: scaleway-secret
  endpoint:
    path: /
    method: POST
    data_selector: stringData
    params: {}
- name: microk8s_control_plane
  endpoint:
    path: /api/v1/microk8s/controlplane
    method: GET
    data_selector: controlPlaneConfig
    params: {}
- name: microk8s_config_template
  endpoint:
    path: /api/v1/microk8s/configtemplate
    method: GET
    data_selector: template
    params: {}
- name: MachineDeployment
  endpoint:
    path: /machinedeployments
    method: GET
    data_selector: items
- name: MachineSet
  endpoint:
    path: /machinesets
    method: GET
    data_selector: items
- name: MachinePool
  endpoint:
    path: /machinepools
    method: GET
    data_selector: items
- name: MachineHealthCheck
  endpoint:
    path: /cluster.x-k8s.io/v1beta2/machinehealthchecks
    method: POST
    data_selector: status
    params: {}
- name: ClusterClass
  endpoint:
    path: /v1beta2/ClusterClass
    method: GET
    data_selector: items
    params: {}
- name: Cluster
  endpoint:
    path: /v1beta2/Cluster
    method: GET
    data_selector: items
    params: {}
- name: ClusterClass
  endpoint:
    path: /v1beta2/ClusterClass
    method: GET
    data_selector: items
    params: {}
- name: MachineDeployment
  endpoint:
    path: /spec/topology/workers/machineDeployments
    method: PATCH
    data_selector: spec.topology.workers.machineDeployments
    params: {}
- name: ControlPlane
  endpoint:
    path: /spec/topology/controlPlane
    method: PATCH
    data_selector: spec.topology.controlPlane
    params: {}
- name: Cluster
  endpoint:
    path: /spec/topology
    method: PATCH
    data_selector: spec.topology
    params: {}
- name: BeforeClusterCreate
  endpoint:
    path: /beforeClusterCreate
    method: POST
    data_selector: status
    params: {}
- name: AfterControlPlaneInitialized
  endpoint:
    path: /afterControlPlaneInitialized
    method: POST
    data_selector: status
    params: {}
- name: BeforeClusterUpgrade
  endpoint:
    path: /beforeClusterUpgrade
    method: POST
    data_selector: status
    params: {}
- name: AfterControlPlaneUpgrade
  endpoint:
    path: /afterControlPlaneUpgrade
    method: POST
    data_selector: status
    params: {}
- name: AfterClusterUpgrade
  endpoint:
    path: /afterClusterUpgrade
    method: POST
    data_selector: status
    params: {}
- name: BeforeClusterDelete
  endpoint:
    path: /beforeClusterDelete
    method: POST
    data_selector: status
    params: {}
- name: GeneratePatches
  endpoint:
    path: /generatePatches
    method: POST
    data_selector: status
    params: {}
- name: ValidateTopology
  endpoint:
    path: /validateTopology
    method: POST
    data_selector: status
    params: {}
- name: DiscoverVariables
  endpoint:
    path: /discoverVariables
    method: POST
    data_selector: variables
    params: {}
- name: DiscoverVariablesRequest
  endpoint:
    path: /v1alpha1/DiscoverVariablesRequest
    method: POST
    data_selector: variables
- name: DiscoverVariablesResponse
  endpoint:
    path: /v1alpha1/DiscoverVariablesResponse
    method: GET
    data_selector: variables
- name: metrics
  endpoint:
    path: /metrics
    method: GET
    data_selector: data
    params: {}
- name: pprof
  endpoint:
    path: /debug/pprof/*
    method: GET
    data_selector: data
    params: {}
- name: podSecurityStandard
  endpoint:
    path: /spec/template/spec/kubeadmConfigSpec/clusterConfiguration/apiServer/extraArgs
    method: add
    data_selector: value
    params: {}
- name: extraVolumes
  endpoint:
    path: /spec/template/spec/kubeadmConfigSpec/clusterConfiguration/apiServer/extraVolumes
    method: add
    data_selector: value
    params: {}
- name: files
  endpoint:
    path: /spec/template/spec/kubeadmConfigSpec/files
    method: add
    data_selector: valueFrom
    params: {}
- name: kubeadmcontrolplanes
  endpoint:
    path: alpha/rollout/kubeadmcontrolplanes
    method: POST
    data_selector: resources
- name: machinedeployments
  endpoint:
    path: alpha/rollout/machinedeployments
    method: POST
    data_selector: resources
- name: Cluster
  endpoint:
    path: /api/v1/cluster
    method: GET
- name: Machine
  endpoint:
    path: /api/v1/machine
    method: GET
- name: BootstrapConfig
  endpoint:
    path: /bootstrap/config
    method: GET
    data_selector: status
    params: {}
- name: Machine
  endpoint:
    path: /machine
    method: GET
    data_selector: status
    params: {}
- name: MachinePool
  endpoint:
    path: /machinepool
    method: GET
    data_selector: status
    params: {}
- name: MailgunCluster
  endpoint:
    path: /clusters
    method: POST
    data_selector: items
    params: {}
- name: MailgunMachine
  endpoint:
    path: /machines
    method: POST
    data_selector: items
    params: {}
- name: MailgunCluster
  endpoint:
    path: /v3/mailgun/clusters
    method: POST
    data_selector: cluster
    params: {}
- name: capi-foo-clusters
  endpoint:
    path: /fooclusters
    method: GET
    data_selector: items
    params: {}
- name: fooclustertemplates
  endpoint:
    path: /fooclustertemplates
    method: GET
    data_selector: items
    params: {}
- name: InfraMachine
  endpoint:
    path: /v1/infraMachines
    method: GET
    data_selector: items
    params: {}
- name: InfraMachineList
  endpoint:
    path: /v1/infraMachineLists
    method: GET
    data_selector: items
    params: {}
- name: addresses
  endpoint:
    path: status.addresses
    method: GET
- name: initialization
  endpoint:
    path: status.initialization
    method: GET
- name: VPC
  endpoint:
    params:
      IBMVPC_REGION: us-south
      IBMVPC_ZONE: us-south-1
      IBMVPC_RESOURCEGROUP: <your-resource-group-id>
      IBMVPC_NAME: ibm-vpc-0
      IBMVPC_IMAGE_ID: <you-image-id>
      IBMVPC_PROFILE: bx2-4x16
      IBMVPC_SSHKEY_ID: <your-sshkey-id>
- name: PowerVS
  endpoint:
    params:
      IBMPOWERVS_SSHKEY_NAME: <your-ssh-key>
      IBMPOWERVS_VIP: <internal-ip>
      IBMPOWERVS_VIP_EXTERNAL: <external-ip>
      IBMPOWERVS_VIP_CIDR: 29
      IBMPOWERVS_IMAGE_NAME: <your-capi-image-name>
      IBMPOWERVS_SERVICE_INSTANCE_ID: <service-instance-id>
      IBMPOWERVS_NETWORK_NAME: <your-capi-network-name>
- name: workload_clusters
  endpoint:
    path: /RPC2
    method: POST
    data_selector: result
    params: {}
- name: scaleway-secret
  endpoint:
    path: /api/v1/secrets/scaleway-secret
    method: POST
- name: MicroK8sControlPlane
  endpoint:
    path: /api/v1beta1/microk8scontrolplanes
    method: POST
    data_selector: spec
    params: {}
- name: MachineDeployment
  endpoint:
    path: /api/v1beta2/machinedeployments
    method: POST
    data_selector: spec
    params: {}
- name: KubeadmControlPlane
  endpoint:
    path: /kubeadmcontrolplane
    method: POST
    data_selector: spec
    params: {}
- name: MachineDeployment
  endpoint:
    path: /machinedeployment
    method: POST
    data_selector: spec
    params: {}
- name: MachineHealthCheck
  endpoint:
    path: /machinehealthcheck
    method: POST
    data_selector: spec
    params: {}
- name: MachineDeployment
  endpoint:
    path: /v1alpha4/machinedeployments
    method: GET
    data_selector: items
    params: {}
- name: MachineSet
  endpoint:
    path: /v1alpha4/machinesets
    method: GET
    data_selector: items
    params: {}
- name: MachinePool
  endpoint:
    path: /v1alpha4/machinepools
    method: GET
    data_selector: items
    params: {}
- name: MachineHealthCheck
  endpoint:
    path: /api/v1/machinehealthchecks
    method: POST
    data_selector: spec
    params: {}
- name: MachinePool
  endpoint:
    path: /tasks/experimental-features/machine-pools
    method: GET
    data_selector: records
- name: MachineSetPreflightChecks
  endpoint:
    path: /tasks/experimental-features/machineset-preflight-checks
    method: GET
    data_selector: records
- name: ClusterClass
  endpoint:
    path: /tasks/experimental-features/cluster-class/
    method: GET
    data_selector: records
- name: ClusterClass
  endpoint:
    path: /cluster.x-k8s.io/v1beta2/ClusterClass
    method: GET
    data_selector: items
    params: {}
- name: Cluster
  endpoint:
    path: /cluster.x-k8s.io/v1beta2/Cluster
    method: GET
    data_selector: items
    params: {}
- name: docker-clusterclass
  endpoint:
    path: /docker-clusterclass
    method: GET
    data_selector: spec
    params: {}
- name: azure-clusterclass
  endpoint:
    path: /azure-clusterclass
    method: GET
    data_selector: spec
    params: {}
- name: BeforeClusterCreate
  endpoint:
    path: /hooks/runtime/cluster.x-k8s.io/v1alpha1/before-cluster-create
    method: POST
    data_selector: status
    params: {}
- name: AfterControlPlaneInitialized
  endpoint:
    path: /hooks/runtime/cluster.x-k8s.io/v1alpha1/after-control-plane-initialized
    method: POST
    data_selector: status
    params: {}
- name: BeforeClusterUpgrade
  endpoint:
    path: /hooks/runtime/cluster.x-k8s.io/v1alpha1/before-cluster-upgrade
    method: POST
    data_selector: status
    params: {}
- name: AfterControlPlaneUpgrade
  endpoint:
    path: /hooks/runtime/cluster.x-k8s.io/v1alpha1/after-control-plane-upgrade
    method: POST
    data_selector: status
    params: {}
- name: AfterClusterUpgrade
  endpoint:
    path: /hooks/runtime/cluster.x-k8s.io/v1alpha1/after-cluster-upgrade
    method: POST
    data_selector: status
    params: {}
- name: BeforeClusterDelete
  endpoint:
    path: /hooks/runtime/cluster.x-k8s.io/v1alpha1/before-cluster-delete
    method: POST
    data_selector: status
    params: {}
- name: GeneratePatches
  endpoint:
    path: /hooks/runtime/cluster.x-k8s.io/v1alpha1/generate-patches
    method: POST
    data_selector: status
    params: {}
- name: ValidateTopology
  endpoint:
    path: /hooks/runtime/cluster.x-k8s.io/v1alpha1/validate-topology
    method: POST
    data_selector: status
    params: {}
- name: DiscoverVariables
  endpoint:
    path: /hooks/runtime/cluster.x-k8s.io/v1alpha1/discover-variables
    method: POST
    data_selector: status
    params: {}
- name: DiscoverVariablesRequest
  endpoint:
    path: /hooks/runtime/cluster/x-k8s.io/v1alpha1/DiscoverVariablesRequest
    method: GET
    data_selector: variables
    params: {}
- name: metrics
  endpoint:
    path: /metrics
    method: GET
- name: pprof
  endpoint:
    path: /debug/pprof
    method: GET
- name: log level
  endpoint:
    path: /debug/flags/v
    method: PUT
- name: podSecurityStandard
  endpoint:
    path: /spec/template/spec/kubeadmConfigSpec/clusterConfiguration/apiServer/extraArgs
    method: add
    data_selector: ''
    params:
      admission-control-config-file: /etc/kubernetes/kube-apiserver-admission-pss.yaml
- name: extraVolumes
  endpoint:
    path: /spec/template/spec/kubeadmConfigSpec/clusterConfiguration/apiServer/extraVolumes
    method: add
    data_selector: ''
    params:
      name: admission-pss
      hostPath: /etc/kubernetes/kube-apiserver-admission-pss.yaml
      mountPath: /etc/kubernetes/kube-apiserver-admission-pss.yaml
      readOnly: true
      pathType: File
- name: files
  endpoint:
    path: /spec/template/spec/kubeadmConfigSpec/files
    method: add
    data_selector: ''
    params:
      content:
        apiVersion: apiserver.config.k8s.io/v1
        kind: AdmissionConfiguration
        plugins:
        - name: PodSecurity
          configuration:
            apiVersion: pod-security.admission.config.k8s.io/v1
            kind: PodSecurityConfiguration
            defaults:
              enforce: '{{ .podSecurity.enforce }}'
              enforce-version: latest
              audit: '{{ .podSecurity.audit }}'
              audit-version: latest
              warn: '{{ .podSecurity.warn }}'
              warn-version: latest
            exemptions:
              usernames: []
              runtimeClasses: []
              namespaces:
              - kube-system
      path: /etc/kubernetes/kube-apiserver-admission-pss.yaml
- name: kubeadmcontrolplanes
  endpoint:
    path: /kubeadmcontrolplanes
    method: POST
    data_selector: resources
    params: {}
- name: machinedeployments
  endpoint:
    path: /machinedeployments
    method: POST
    data_selector: resources
    params: {}
- name: aws
  endpoint:
    provider_repos:
    - ../cluster-api-provider-aws
    enable_providers:
    - aws
    - kubeadm-bootstrap
    - kubeadm-control-plane
- name: Machine
  endpoint:
    path: /machine
    method: GET
    data_selector: machines
    params: {}
- name: MachinePool
  endpoint:
    path: /machinepool
    method: GET
    data_selector: machinePools
    params: {}
- name: BootstrapConfig
  endpoint:
    path: /bootstrapconfig
    method: GET
    data_selector: bootstrapConfigs
    params: {}
- name: InfrastructureMachinePool
  endpoint:
    path: /infrastructuremachinepool
    method: GET
    data_selector: infrastructureMachinePools
    params: {}
- name: MailgunCluster
  endpoint:
    path: /clusters
    method: POST
- name: MailgunMachine
  endpoint:
    path: /machines
    method: POST
- name: mailgunCluster
  endpoint:
    path: /v1/mailgun/cluster
    method: POST
    data_selector: data
    params: {}
- name: fooclusters
  endpoint:
    path: /fooclusters
    method: GET
- name: fooclustertemplates
  endpoint:
    path: /fooclustertemplates
    method: GET
- name: InfraMachine
  endpoint:
    path: /infraMachines
    method: GET
    data_selector: items
    params: {}
- name: InfraMachineList
  endpoint:
    path: /infraMachineLists
    method: GET
    data_selector: items
    params: {}
- name: vpc
  endpoint:
    path: /v1/vpcs
    method: GET
    data_selector: vpcs
- name: network
  endpoint:
    path: /v1/networks
    method: GET
    data_selector: networks
- name: workload_clusters
  endpoint:
    path: /workload_clusters
    method: GET
    data_selector: clusters
    params: {}
- name: MicroK8sControlPlane
  endpoint:
    path: /api/v1beta1/microk8scontrolplanes
    method: GET
    data_selector: items
    params: {}
- name: MachineDeployment
  endpoint:
    path: /api/v1beta2/machinedeployments
    method: GET
    data_selector: items
    params: {}
- name: KubeadmControlPlane
  endpoint:
    path: /kubeadmcontrolplane
    method: POST
- name: MachineDeployment
  endpoint:
    path: /machinedeployment
    method: POST
- name: MachineDeployment
  endpoint:
    path: /cluster-api/machinedeployments
    method: GET
    data_selector: items
    params: {}
- name: MachineSet
  endpoint:
    path: /cluster-api/machinesets
    method: GET
    data_selector: items
    params: {}
- name: MachinePool
  endpoint:
    path: /cluster-api/machinepools
    method: GET
    data_selector: items
    params: {}
- name: MachineHealthCheck
  endpoint:
    path: /cluster-api/machinehealthchecks
    method: GET
    data_selector: items
    params: {}
- name: MachineHealthCheck
  endpoint:
    path: /api/v1beta2/machinehealthchecks
    method: GET
    data_selector: items
    params: {}
- name: KubeadmControlPlane
  endpoint:
    path: /api/v1beta2/kubeadmcontrolplanes
    method: GET
    data_selector: items
    params: {}
- name: ClusterClass
  endpoint:
    path: /clusterclass
    method: GET
    data_selector: items
    params: {}
- name: Cluster
  endpoint:
    path: /clusters
    method: GET
    data_selector: items
    params: {}
- name: docker-clusterclass
  endpoint:
    path: /cluster.x-k8s.io/v1beta2
    method: GET
- name: Cluster
  endpoint:
    path: /clusters
    method: PATCH
    data_selector: spec.topology
    params: {}
- name: MachineDeployment
  endpoint:
    path: /machinedeployments
    method: PATCH
    data_selector: spec.topology.workers.machineDeployments
    params: {}
- name: ExtensionConfig
  endpoint:
    path: /api/v1/namespaces/default/services/https:webhook-service:443/proxy/hooks.runtime.cluster.x-k8s.io/v1alpha1/discovery
    method: POST
    data_selector: apiVersion
    params: {}
- name: BeforeClusterCreate
  endpoint:
    path: /hooks.runtime.cluster.x-k8s.io/v1alpha1/BeforeClusterCreate
    method: POST
    data_selector: status
    params: {}
- name: AfterControlPlaneInitialized
  endpoint:
    path: /hooks.runtime.cluster.x-k8s.io/v1alpha1/AfterControlPlaneInitialized
    method: POST
    data_selector: status
    params: {}
- name: BeforeClusterUpgrade
  endpoint:
    path: /hooks.runtime.cluster.x-k8s.io/v1alpha1/BeforeClusterUpgrade
    method: POST
    data_selector: status
    params: {}
- name: AfterControlPlaneUpgrade
  endpoint:
    path: /hooks.runtime.cluster.x-k8s.io/v1alpha1/AfterControlPlaneUpgrade
    method: POST
    data_selector: status
    params: {}
- name: AfterClusterUpgrade
  endpoint:
    path: /hooks.runtime.cluster.x-k8s.io/v1alpha1/AfterClusterUpgrade
    method: POST
    data_selector: status
    params: {}
- name: BeforeClusterDelete
  endpoint:
    path: /hooks.runtime.cluster.x-k8s.io/v1alpha1/BeforeClusterDelete
    method: POST
    data_selector: status
    params: {}
- name: metrics
  endpoint:
    path: /metrics
    method: GET
    data_selector: data
    params: {}
- name: pprof
  endpoint:
    path: /debug/pprof
    method: GET
    data_selector: data
    params: {}
- name: log_level
  endpoint:
    path: /debug/flags/v
    method: PUT
    data_selector: data
    params: {}
- name: podSecurityStandard
  endpoint:
    path: /spec/template/spec/kubeadmConfigSpec/clusterConfiguration/apiServer/extraArgs
    method: add
    data_selector: value
    params:
      admission-control-config-file: /etc/kubernetes/kube-apiserver-admission-pss.yaml
- name: extraVolumes
  endpoint:
    path: /spec/template/spec/kubeadmConfigSpec/clusterConfiguration/apiServer/extraVolumes
    method: add
    data_selector: value
    params:
      name: admission-pss
      hostPath: /etc/kubernetes/kube-apiserver-admission-pss.yaml
      mountPath: /etc/kubernetes/kube-apiserver-admission-pss.yaml
      readOnly: true
      pathType: File
- name: files
  endpoint:
    path: /spec/template/spec/kubeadmConfigSpec/files
    method: add
    data_selector: valueFrom.template
    params:
      content: "apiVersion: apiserver.config.k8s.io/v1\nkind: AdmissionConfiguration\n\
        plugins:\n- name: PodSecurity\n  configuration:\n    apiVersion: pod-security.admission.config.k8s.io/v1\n\
        \    kind: PodSecurityConfiguration\n    defaults:\n      enforce: \"{{ .podSecurity.enforce\
        \ }}\"\n      enforce-version: \"latest\"\n      audit: \"{{ .podSecurity.audit\
        \ }}\"\n      audit-version: \"latest\"\n      warn: \"{{ .podSecurity.warn\
        \ }}\"\n      warn-version: \"latest\"\n    exemptions:\n      usernames:\
        \ []\n      runtimeClasses: []\n      namespaces: [kube-system]"
      path: /etc/kubernetes/kube-apiserver-admission-pss.yaml
- name: provider
  endpoint:
    path: /clusterctl/generate/provider
    method: GET
    data_selector: providers
- name: cluster
  endpoint:
    path: /clusterctl/generate/cluster
    method: GET
    data_selector: clusters
- name: kubeadmcontrolplanes
  endpoint:
    path: /kubeadmcontrolplanes
    method: GET
- name: machinedeployments
  endpoint:
    path: /machinedeployments
    method: GET
- name: Cluster
  endpoint:
    path: /api/cluster
    method: GET
    data_selector: clusters
- name: Machine
  endpoint:
    path: /api/machine
    method: GET
    data_selector: machines
- name: MailgunCluster
  endpoint:
    path: /apis/infrastructure.cluster.x-k8s.io/v1alpha1/mailgunclusters
    method: POST
    data_selector: items
    params: {}
- name: MailgunMachine
  endpoint:
    path: /apis/infrastructure.cluster.x-k8s.io/v1alpha1/mailgunmachines
    method: POST
    data_selector: items
    params: {}
- name: mailgun_cluster
  endpoint:
    path: /v1/mailgun/clusters
    method: POST
    data_selector: cluster
- name: fooclusters
  endpoint:
    path: /fooclusters
    method: GET
    data_selector: items
- name: fooclustertemplates
  endpoint:
    path: /fooclustertemplates
    method: GET
    data_selector: items
- name: InfraMachine
  endpoint:
    path: /inframachines
    method: GET
    data_selector: items
- name: InfraMachineList
  endpoint:
    path: /inframachines
    method: GET
    data_selector: items
- name: management_cluster
  endpoint:
    path: /init
    method: POST
    data_selector: cluster
- name: vpc
  endpoint:
    path: /v1/vpcs
    method: GET
    data_selector: vpcs
- name: powervs
  endpoint:
    path: /v1/power-vs
    method: GET
    data_selector: instances
- name: workload_clusters
  endpoint:
    path: /workload_clusters
    method: GET
    data_selector: clusters
- name: scaleway-secret
  endpoint:
    path: /scw_access_key
    method: POST
- name: KubeadmConfig
  endpoint:
    path: /bootstrap.cluster.x-k8s.io/v1beta2/kubeadmconfigs
    method: GET
    data_selector: items
- name: DockerCluster
  endpoint:
    path: /infrastructure.cluster.x-k8s.io/v1beta2/dockerclusters
    method: GET
    data_selector: items
- name: Machine
  endpoint:
    path: /cluster.x-k8s.io/v1beta2/machines
    method: GET
    data_selector: items
- name: MicroK8sControlPlane
  endpoint:
    path: /api/v1beta1/microk8scontrolplanes
    method: GET
    data_selector: items
    params: {}
- name: MachineDeployment
  endpoint:
    path: /api/v1beta2/machinedeployments
    method: GET
    data_selector: items
    params: {}
- name: KubeadmControlPlane
  endpoint:
    path: /kubeadmcontrolplanes
    method: GET
    data_selector: items
    params: {}
- name: MachineDeployment
  endpoint:
    path: /machinedeployments
    method: GET
    data_selector: items
    params: {}
- name: MachineDeployment
  endpoint:
    path: /api/v1/MachineDeployment
    method: POST
    data_selector: metadata.annotations
    params: {}
- name: MachineSet
  endpoint:
    path: /api/v1/MachineSet
    method: POST
    data_selector: metadata.annotations
    params: {}
- name: capi-quickstart-node-unhealthy-5m
  endpoint:
    path: /machinehealthcheck/capi-quickstart-node-unhealthy-5m
    method: GET
    data_selector: spec
    params: {}
- name: capi-quickstart-kcp-unhealthy-5m
  endpoint:
    path: /machinehealthcheck/capi-quickstart-kcp-unhealthy-5m
    method: GET
    data_selector: spec
    params: {}
- name: ClusterClass
  endpoint:
    path: /clusterclasses
    method: GET
    data_selector: items
- name: Cluster
  endpoint:
    path: /clusters
    method: GET
    data_selector: items
- name: customImage
  endpoint:
    path: /spec/template/spec/customImage
    method: add
    data_selector: valueFrom.template
    params: {}
- name: httpProxy
  endpoint:
    path: /spec/template/spec/httpProxy/url
    method: add
    data_selector: valueFrom.variable
    params: {}
- name: mdConfig
  endpoint:
    path: /spec/template/spec/customImage
    method: add
    data_selector: valueFrom.template
    params: {}
- name: dnsServers
  endpoint:
    path: /spec/template/spec/dnsServers
    method: add
    data_selector: valueFrom.variable
    params: {}
- name: etcdImageTag
  endpoint:
    path: /spec/template/spec/kubeadmConfigSpec/clusterConfiguration/etcd
    method: add
    data_selector: valueFrom.template
    params: {}
- name: imageRepository
  endpoint:
    path: /spec/template/spec/kubeadmConfigSpec/clusterConfiguration/imageRepository
    method: add
    data_selector: value
    params: {}
- name: cluster
  endpoint:
    path: /clusters
    method: GET
    data_selector: clusters
    params: {}
- name: machinedeployment
  endpoint:
    path: /machinedeployments
    method: GET
    data_selector: machineDeployments
    params: {}
- name: controlplane
  endpoint:
    path: /controlplanes
    method: GET
    data_selector: controlPlanes
    params: {}
- name: BeforeClusterCreate
  endpoint:
    path: /before-cluster-create
    method: POST
    data_selector: settings
- name: AfterControlPlaneInitialized
  endpoint:
    path: /after-control-plane-initialized
    method: POST
    data_selector: settings
- name: BeforeClusterUpgrade
  endpoint:
    path: /before-cluster-upgrade
    method: POST
    data_selector: settings
- name: AfterControlPlaneUpgrade
  endpoint:
    path: /after-control-plane-upgrade
    method: POST
    data_selector: settings
- name: AfterClusterUpgrade
  endpoint:
    path: /after-cluster-upgrade
    method: POST
    data_selector: settings
- name: BeforeClusterDelete
  endpoint:
    path: /before-cluster-delete
    method: POST
    data_selector: settings
- name: GeneratePatches
  endpoint:
    path: /generate-patches
    method: POST
    data_selector: items
- name: ValidateTopology
  endpoint:
    path: /validate-topology
    method: POST
    data_selector: items
- name: DiscoverVariables
  endpoint:
    path: /discover-variables
    method: POST
    data_selector: variables
- name: DiscoverVariablesRequest
  endpoint:
    path: /v1alpha1/DiscoverVariablesRequest
    method: POST
    data_selector: variables
- name: DiscoverVariablesResponse
  endpoint:
    path: /v1alpha1/DiscoverVariablesResponse
    method: GET
    data_selector: status
- name: metrics
  endpoint:
    path: /metrics
    method: GET
    data_selector: metrics
    params: {}
- name: pprof
  endpoint:
    path: /debug/pprof/
    method: GET
    data_selector: pprof
    params: {}
- name: podSecurityStandard
  endpoint:
    path: /spec/template/spec/kubeadmConfigSpec/clusterConfiguration/apiServer/extraArgs
    method: add
    data_selector: value
    params: {}
- name: extraVolumes
  endpoint:
    path: /spec/template/spec/kubeadmConfigSpec/clusterConfiguration/apiServer/extraVolumes
    method: add
    data_selector: value
    params: {}
- name: files
  endpoint:
    path: /spec/template/spec/kubeadmConfigSpec/files
    method: add
    data_selector: valueFrom
    params: {}
- name: kubeadmcontrolplanes
  endpoint:
    path: /kubeadmcontrolplanes
    method: GET
    data_selector: resources
- name: machinedeployments
  endpoint:
    path: /machinedeployments
    method: GET
    data_selector: resources
- name: capd-controller-manager
  endpoint:
    path: /capd-controller-manager
    method: GET
    data_selector: records
- name: capi-kubeadm-bootstrap-controller-manager
  endpoint:
    path: /capi-kubeadm-bootstrap-controller-manager
    method: GET
    data_selector: records
- name: capi-kubeadm-control-plane-controller-manager
  endpoint:
    path: /capi-kubeadm-control-plane-controller-manager
    method: GET
    data_selector: records
- name: capi-controller-manager
  endpoint:
    path: /capi-controller-manager
    method: GET
    data_selector: records
- name: cert-manager
  endpoint:
    path: /cert-manager
    method: GET
    data_selector: records
- name: cert-manager-cainjector
  endpoint:
    path: /cert-manager-cainjector
    method: GET
    data_selector: records
- name: cert-manager-webhook
  endpoint:
    path: /cert-manager-webhook
    method: GET
    data_selector: records
- name: Cluster
  endpoint:
    path: /api/v1/cluster
    method: GET
    data_selector: items
    params: {}
- name: Machine
  endpoint:
    path: /api/v1/machine
    method: GET
    data_selector: items
    params: {}
- name: MachineSet
  endpoint:
    path: /api/v1/machineset
    method: GET
    data_selector: items
    params: {}
- name: MachineDeployment
  endpoint:
    path: /api/v1/machinedeployment
    method: GET
    data_selector: items
    params: {}
- name: Machine
  endpoint:
    path: /machines
    method: GET
- name: MachinePool
  endpoint:
    path: /machinepools
    method: GET
- name: mailgun_cluster
  endpoint:
    path: /v1/mailgunclusters
    method: POST
    data_selector: data
- name: mailgun_machine
  endpoint:
    path: /v1/mailgunmachines
    method: POST
    data_selector: data
- name: MailgunCluster
  endpoint:
    path: /clusters
    method: POST
    data_selector: cluster
    params: {}
- name: fooclusters
  endpoint:
    path: /fooclusters
    method: GET
- name: fooclustertemplates
  endpoint:
    path: /fooclustertemplates
    method: GET
- name: InfraMachine
  endpoint:
    path: /infra-machines
    method: GET
    data_selector: items
- name: InfraMachineList
  endpoint:
    path: /infra-machines-list
    method: GET
    data_selector: items
- name: FooConfigStatus
  endpoint:
    path: /status
    method: GET
    data_selector: status
    params: {}
- name: FooConfigInitializationStatus
  endpoint:
    path: /initialization
    method: GET
    data_selector: initialization
    params: {}
- name: VPC
  endpoint:
    params:
      IBMVPC_REGION: us-south
      IBMVPC_ZONE: us-south-1
      IBMVPC_RESOURCEGROUP: <your-resource-group-id>
      IBMVPC_NAME: ibm-vpc-0
      IBMVPC_IMAGE_ID: <you-image-id>
      IBMVPC_PROFILE: bx2-4x16
      IBMVPC_SSHKEY_ID: <your-sshkey-id>
- name: PowerVS
  endpoint:
    params:
      IBMPOWERVS_SSHKEY_NAME: <your-ssh-key>
      IBMPOWERVS_VIP: <internal-ip>
      IBMPOWERVS_VIP_EXTERNAL: <external-ip>
      IBMPOWERVS_VIP_CIDR: 29
      IBMPOWERVS_IMAGE_NAME: <your-capi-image-name>
      IBMPOWERVS_SERVICE_INSTANCE_ID: <service-instance-id>
      IBMPOWERVS_NETWORK_NAME: <your-capi-network-name>
- name: workload_cluster
  endpoint:
    path: /RPC2
    method: POST
    data_selector: result
    params: {}
- name: KubeadmConfig
  endpoint:
    path: /kubeadm/config
    method: GET
    data_selector: items
    params: {}
- name: DockerMachine
  endpoint:
    path: /docker-machine
    method: GET
    data_selector: items
    params: {}
- name: MicroK8sControlPlane
  endpoint:
    path: /api/v1beta1/MicroK8sControlPlane
    method: GET
    data_selector: items
    params: {}
- name: MachineDeployment
  endpoint:
    path: /api/v1beta1/MachineDeployment
    method: GET
    data_selector: items
    params: {}
- name: KubeadmControlPlane
  endpoint:
    path: /v1alpha3/kubeadmcontrolplanes
    method: GET
    data_selector: items
    params: {}
- name: MachineDeployment
  endpoint:
    path: /v1alpha3/machinedeployments
    method: GET
    data_selector: items
    params: {}
- name: machine_health_check
  endpoint:
    path: /services/data/vXX.X/sobjects/MachineHealthCheck
    method: GET
    data_selector: records
- name: cluster
  endpoint:
    path: /api/v1beta2/clusters
    method: GET
    data_selector: items
    params: {}
- name: docker-clusterclass
  endpoint:
    path: /v1beta2/clusterclass
    method: GET
- name: ClusterClass
  endpoint:
    path: /cluster/classes
    method: GET
    data_selector: items
- name: BeforeClusterCreate
  endpoint:
    path: /before-cluster-create
    method: POST
    data_selector: settings
- name: AfterControlPlaneInitialized
  endpoint:
    path: /after-control-plane-initialized
    method: POST
    data_selector: settings
- name: BeforeClusterUpgrade
  endpoint:
    path: /before-cluster-upgrade
    method: POST
    data_selector: settings
- name: AfterControlPlaneUpgrade
  endpoint:
    path: /after-control-plane-upgrade
    method: POST
    data_selector: settings
- name: AfterClusterUpgrade
  endpoint:
    path: /after-cluster-upgrade
    method: POST
    data_selector: settings
- name: BeforeClusterDelete
  endpoint:
    path: /before-cluster-delete
    method: POST
    data_selector: settings
- name: GeneratePatches
  endpoint:
    path: /generate-patches
    method: POST
    data_selector: items
- name: ValidateTopology
  endpoint:
    path: /validate-topology
    method: POST
    data_selector: items
- name: DiscoverVariables
  endpoint:
    path: /discover-variables
    method: POST
    data_selector: variables
- name: metrics
  endpoint:
    path: /metrics
    method: GET
    data_selector: metrics
    params: {}
- name: pprof
  endpoint:
    path: /debug/pprof/
    method: GET
    data_selector: profiles
    params: {}
- name: log_level
  endpoint:
    path: /debug/flags/v
    method: PUT
    data_selector: log_level
    params: {}
- name: podSecurityStandard
  endpoint:
    path: /spec/template/spec/kubeadmConfigSpec/clusterConfiguration/apiServer/extraArgs
    method: ADD
    data_selector: value
    params: {}
- name: kubeadmcontrolplanes
  endpoint:
    path: /kubeadmcontrolplanes
    method: GET
- name: machinedeployments
  endpoint:
    path: /machinedeployments
    method: GET
- name: Cluster
  endpoint:
    path: /api/v1/clusters
    method: GET
    data_selector: items
- name: Machine
  endpoint:
    path: /api/v1/machines
    method: GET
    data_selector: items
- name: Machine
  endpoint:
    path: /machine
    method: GET
    data_selector: status
    params: {}
- name: MachinePool
  endpoint:
    path: /machinepool
    method: GET
    data_selector: status
    params: {}
- name: MailgunCluster
  endpoint:
    path: /api/mailguncluster
    method: POST
    data_selector: clusters
    params: {}
- name: MailgunMachine
  endpoint:
    path: /api/mailgunmachine
    method: POST
    data_selector: machines
    params: {}
- name: mailgun_cluster
  endpoint:
    path: /v1/clusters
    method: POST
- name: fooclusters
  endpoint:
    path: /fooclusters
    method: GET
- name: fooclustertemplates
  endpoint:
    path: /fooclustertemplates
    method: GET
- name: InfraMachine
  endpoint:
    path: /infra-machines
    method: POST
    data_selector: items
    params: {}
- name: InfraMachineTemplate
  endpoint:
    path: /infra-machine-templates
    method: POST
    data_selector: items
    params: {}
- name: FooConfig
  endpoint:
    path: /fooconfig
    method: GET
    data_selector: items
- name: FooConfigList
  endpoint:
    path: /fooconfigs
    method: GET
    data_selector: items
- name: management_cluster
  endpoint:
    path: /clusterctl/init
    method: POST
    data_selector: results
- name: VPC
  endpoint:
    params:
      resource_group_id: <your-resource-group-id>
      vpc_name: ibm-vpc-0
      image_id: <you-image-id>
      profile: bx2-4x16
      sshkey_id: <your-sshkey-id>
- name: workload_cluster
  endpoint:
    path: /RPC2
    method: POST
    data_selector: result
    params: {}
- name: scaleway-secret
  endpoint:
    path: /api/v1/namespaces/kube-system/secrets
    method: POST
    data_selector: metadata.name
    params: {}
- name: MicroK8sControlPlane
  endpoint:
    path: /api/v1beta1/microk8scontrolplane
    method: GET
    data_selector: items
- name: MachineDeployment
  endpoint:
    path: /api/v1beta1/machinedeployment
    method: GET
    data_selector: items
- name: KubeadmControlPlane
  endpoint:
    path: /kubeadmcontrolplane
    method: GET
    data_selector: spec
    params: {}
- name: MachineDeployment
  endpoint:
    path: /machinedeployments
    method: GET
    data_selector: spec
    params: {}
- name: MachineHealthCheck
  endpoint:
    path: /machinehealthchecks
    method: GET
    data_selector: spec
    params: {}
- name: MachineDeployment
  endpoint:
    path: /v1alpha4/machinedeployments
    method: POST
    data_selector: items
    params: {}
- name: MachineSet
  endpoint:
    path: /v1alpha4/machinesets
    method: POST
    data_selector: items
    params: {}
- name: machine_health_check
  endpoint:
    path: /api/v1beta2/machinehealthchecks
    method: GET
    data_selector: items
    params: {}
- name: cluster
  endpoint:
    path: /services/data/vXX.X/sobjects/Cluster
    method: GET
    data_selector: records
- name: clusterclass
  endpoint:
    path: /services/data/vXX.X/sobjects/ClusterClass
    method: GET
    data_selector: records
- name: customImage
  endpoint:
    path: /spec/template/spec/customImage
    method: add
    data_selector: valueFrom.template
    params: {}
- name: httpProxy
  endpoint:
    path: /spec/template/spec/httpProxy/url
    method: add
    data_selector: valueFrom.variable
    params: {}
- name: mdConfig
  endpoint:
    path: /spec/template/spec/customImage
    method: add
    data_selector: valueFrom.template
    params: {}
- name: dnsServers
  endpoint:
    path: /spec/template/spec/dnsServers
    method: add
    data_selector: valueFrom.variable
    params: {}
- name: dnsServer
  endpoint:
    path: /spec/template/spec/dnsServer
    method: add
    data_selector: valueFrom.variable
    params: {}
- name: etcdImageTag
  endpoint:
    path: /spec/template/spec/kubeadmConfigSpec/clusterConfiguration/etcd
    method: add
    data_selector: valueFrom.template
    params: {}
- name: imageRepository
  endpoint:
    path: /spec/template/spec/kubeadmConfigSpec/clusterConfiguration/imageRepository
    method: add
    data_selector: value
    params: {}
- name: BeforeClusterCreate
  endpoint:
    path: /BeforeClusterCreate
    method: POST
    data_selector: status
    params: {}
- name: AfterControlPlaneInitialized
  endpoint:
    path: /AfterControlPlaneInitialized
    method: POST
    data_selector: status
    params: {}
- name: BeforeClusterUpgrade
  endpoint:
    path: /BeforeClusterUpgrade
    method: POST
    data_selector: status
    params: {}
- name: AfterControlPlaneUpgrade
  endpoint:
    path: /AfterControlPlaneUpgrade
    method: POST
    data_selector: status
    params: {}
- name: AfterClusterUpgrade
  endpoint:
    path: /AfterClusterUpgrade
    method: POST
    data_selector: status
    params: {}
- name: BeforeClusterDelete
  endpoint:
    path: /BeforeClusterDelete
    method: POST
    data_selector: status
    params: {}
- name: GeneratePatches
  endpoint:
    path: /GeneratePatches
    method: POST
    data_selector: status
    params: {}
- name: ValidateTopology
  endpoint:
    path: /ValidateTopology
    method: POST
    data_selector: status
    params: {}
- name: DiscoverVariables
  endpoint:
    path: /DiscoverVariables
    method: POST
    data_selector: status
    params: {}
- name: DiscoverVariablesRequest
  endpoint:
    path: /hooks/runtime/cluster.x-k8s.io/v1alpha1/DiscoverVariablesRequest
    method: GET
    data_selector: variables
    params: {}
- name: DiscoverVariablesResponse
  endpoint:
    path: /hooks/runtime/cluster.x-k8s.io/v1alpha1/DiscoverVariablesResponse
    method: GET
    data_selector: variables
    params: {}
- name: metrics
  endpoint:
    path: /metrics
    method: GET
    data_selector: metrics
    params: {}
- name: pprof
  endpoint:
    path: /debug/pprof/
    method: GET
    data_selector: pprof
    params: {}
- name: log_level
  endpoint:
    path: /debug/flags/v
    method: PUT
    data_selector: log level
    params: {}
- name: ClusterClass
  endpoint:
    path: /cluster-api/ClusterClass
    method: POST
    data_selector: items
- name: Cluster
  endpoint:
    path: /cluster-api/Cluster
    method: POST
    data_selector: items
- name: kubeadmcontrolplanes
  endpoint:
    path: /kubeadmcontrolplanes
    method: GET
- name: machinedeployments
  endpoint:
    path: /machinedeployments
    method: GET
- name: capi-kubeadm-bootstrap-system
  endpoint:
    path: /capd-system/capi-kubeadm-bootstrap-controller-manager
    method: GET
- name: capi-kubeadm-control-plane-system
  endpoint:
    path: /capi-kubeadm-control-plane-controller-manager
    method: GET
- name: capi-system
  endpoint:
    path: /capi-controller-manager
    method: GET
- name: cert-manager
  endpoint:
    path: /cert-manager
    method: GET
- name: Cluster
  endpoint:
    path: /api/v1/clusters
    method: GET
    data_selector: clusters
    params: {}
- name: MachineDeployment
  endpoint:
    path: /api/v1/machinedeployments
    method: GET
    data_selector: machinedeployments
    params: {}
- name: Machine
  endpoint:
    path: /bootstrap/config/machine
    method: POST
    data_selector: machines
    params: {}
- name: MachinePool
  endpoint:
    path: /bootstrap/config/machinepool
    method: POST
    data_selector: machinePools
    params: {}
- name: logs
  endpoint:
    path: /logs
    method: GET
    data_selector: message
    params:
      Cluster_name: my-cluster
      reconcileID: 6f6ad971-bdb6-4fa3-b803-ef81c5c8f9d0
      controller: cluster
- name: provider_logs
  endpoint:
    path: /provider_logs
    method: GET
    data_selector: message
    params:
      Cluster_name: my-cluster
      Machine_name: my-cluster-linux-worker-1
- name: envtest
  endpoint:
    path: /envtest
    method: GET
    data_selector: records
- name: fakeclient
  endpoint:
    path: /fakeclient
    method: GET
    data_selector: records
- name: ginkgo
  endpoint:
    path: /ginkgo
    method: GET
    data_selector: records
- name: gomega
  endpoint:
    path: /gomega
    method: GET
    data_selector: records
- name: go test
  endpoint:
    path: /go-test
    method: GET
    data_selector: records
- name: MailgunCluster
  endpoint:
    path: /clusters
    method: POST
    data_selector: data
    params: {}
- name: MailgunMachine
  endpoint:
    path: /machines
    method: POST
    data_selector: data
    params: {}
- name: MailgunCluster
  endpoint:
    path: /clusters
    method: POST
    data_selector: data
- name: fooclusters
  endpoint:
    path: /fooclusters
    method: GET
    data_selector: items
- name: fooclustertemplates
  endpoint:
    path: /fooclustertemplates
    method: GET
    data_selector: items
- name: InfraMachine
  endpoint:
    path: /developer/providers/contracts/infra-machine#inframachine-inframachinelist-resource-definition
    method: GET
    data_selector: resources
    params: {}
- name: InfraMachineTemplate
  endpoint:
    path: /developer/providers/contracts/infra-machine#inframachinetemplate-inframachinetemplatelist-resource-definition
    method: GET
    data_selector: resources
    params: {}
- name: machine_template
  endpoint:
    path: /images/ironic-python-agent.kernel
    method: GET
    data_selector: kernel
- name: ramdisk
  endpoint:
    path: /images/ironic-python-agent.initramfs
    method: GET
    data_selector: ramdisk
- name: scaleway-secret
  endpoint:
    path: /api/v1/secret/scaleway-secret
    method: GET
    data_selector: stringData
- name: DockerCluster
  endpoint:
    path: /api/v1beta2/DockerCluster
    method: GET
    data_selector: items
    params: {}
- name: KubeadmConfig
  endpoint:
    path: /api/v1beta2/KubeadmConfig
    method: GET
    data_selector: items
    params: {}
- name: Machine
  endpoint:
    path: /api/v1beta2/Machine
    method: GET
    data_selector: items
    params: {}
- name: MicroK8sControlPlane
  endpoint:
    path: /controlplane.cluster.x-k8s.io/v1beta1/MicroK8sControlPlane
    method: POST
    data_selector: spec
    params: {}
- name: MachineDeployment
  endpoint:
    path: /cluster.x-k8s.io/v1beta2/MachineDeployment
    method: POST
    data_selector: spec
    params: {}
- name: KubeadmControlPlane
  endpoint:
    method: POST
    path: /apis/controlplane.cluster.x-k8s.io/v1alpha3/kubeadmcontrolplanes
    data_selector: items
- name: MachineDeployment
  endpoint:
    method: POST
    path: /apis/cluster.x-k8s.io/v1beta2/machinedeployments
    data_selector: items
- name: MachineHealthCheck
  endpoint:
    path: /v1beta2/machinehealthchecks
    method: POST
    data_selector: spec
    params: {}
- name: KubeadmControlPlane
  endpoint:
    path: /v1beta2/kubeadmcontrolplanes
    method: POST
    data_selector: spec
    params: {}
- name: ClusterClass
  endpoint:
    path: /clusterclasses
    method: GET
    data_selector: items
- name: Cluster
  endpoint:
    path: /clusters
    method: GET
    data_selector: items
- name: customImage
  endpoint:
    path: /spec/template/spec/customImage
    method: add
    data_selector: ''
    params: {}
- name: httpProxy
  endpoint:
    path: /spec/template/spec/httpProxy/url
    method: add
    data_selector: ''
    params: {}
- name: mdConfig
  endpoint:
    path: /spec/template/spec/customImage
    method: add
    data_selector: ''
    params: {}
- name: dnsServers
  endpoint:
    path: /spec/template/spec/dnsServers
    method: add
    data_selector: ''
    params: {}
- name: dnsServer
  endpoint:
    path: /spec/template/spec/dnsServer
    method: add
    data_selector: ''
    params: {}
- name: etcdImageTag
  endpoint:
    path: /spec/template/spec/kubeadmConfigSpec/clusterConfiguration/etcd
    method: add
    data_selector: ''
    params: {}
- name: imageRepository
  endpoint:
    path: /spec/template/spec/kubeadmConfigSpec/clusterConfiguration/imageRepository
    method: add
    data_selector: ''
    params: {}
- name: Cluster
  endpoint:
    path: /spec/topology
    method: PATCH
    data_selector: spec
    params: {}
- name: BeforeClusterCreate
  endpoint:
    path: /beforeClusterCreate
    method: POST
    data_selector: status
    params: {}
- name: AfterControlPlaneInitialized
  endpoint:
    path: /afterControlPlaneInitialized
    method: POST
    data_selector: status
    params: {}
- name: BeforeClusterUpgrade
  endpoint:
    path: /beforeClusterUpgrade
    method: POST
    data_selector: status
    params: {}
- name: AfterControlPlaneUpgrade
  endpoint:
    path: /afterControlPlaneUpgrade
    method: POST
    data_selector: status
    params: {}
- name: AfterClusterUpgrade
  endpoint:
    path: /afterClusterUpgrade
    method: POST
    data_selector: status
    params: {}
- name: BeforeClusterDelete
  endpoint:
    path: /beforeClusterDelete
    method: POST
    data_selector: status
    params: {}
- name: GeneratePatches
  endpoint:
    path: /generatePatches
    method: POST
    data_selector: status
    params: {}
- name: ValidateTopology
  endpoint:
    path: /validateTopology
    method: POST
    data_selector: status
    params: {}
- name: DiscoverVariables
  endpoint:
    path: /discoverVariables
    method: POST
    data_selector: status
    params: {}
- name: metrics
  endpoint:
    path: /metrics
    method: GET
- name: pprof
  endpoint:
    path: /debug/pprof
    method: GET
- name: log_level
  endpoint:
    path: /debug/flags/v
    method: PUT
- name: podSecurityStandard
  endpoint:
    path: /spec/template/spec/kubeadmConfigSpec/clusterConfiguration/apiServer/extraArgs
    method: add
    data_selector: value
    params: {}
- name: extraVolumes
  endpoint:
    path: /spec/template/spec/kubeadmConfigSpec/clusterConfiguration/apiServer/extraVolumes
    method: add
    data_selector: value
    params: {}
- name: files
  endpoint:
    path: /spec/template/spec/kubeadmConfigSpec/files
    method: add
    data_selector: valueFrom
    params: {}
- name: kubeadmcontrolplanes
  endpoint:
    path: /kubeadmcontrolplanes
    method: GET
- name: machinedeployments
  endpoint:
    path: /machinedeployments
    method: GET
- name: Cluster
  endpoint:
    path: /api/v1/clusters
    method: GET
    data_selector: clusters
    params: {}
- name: MachineDeployment
  endpoint:
    path: /api/v1/machinedeployments
    method: GET
    data_selector: machineDeployments
    params: {}
- name: MachineSet
  endpoint:
    path: /api/v1/machinesets
    method: GET
    data_selector: machineSets
    params: {}
- name: Machine
  endpoint:
    path: /machines
    method: GET
    data_selector: machines
- name: MachinePool
  endpoint:
    path: /machinepools
    method: GET
    data_selector: machinePools
- name: logs
  endpoint:
    path: /logs
    method: GET
    data_selector: msg
    params:
      Cluster_name: my-cluster
      reconcileID: 6f6ad971-bdb6-4fa3-b803-ef81c5c8f9d0
- name: provider_logs
  endpoint:
    path: /provider_logs
    method: GET
    data_selector: msg
    params:
      Cluster_name: my-cluster
      Machine_name: my-cluster-linux-worker-1
- name: envtest
  endpoint:
    path: /test/envtest
    method: GET
    data_selector: records
    params: {}
- name: fakeclient
  endpoint:
    path: /test/fakeclient
    method: GET
    data_selector: records
    params: {}
- name: ginkgo
  endpoint:
    path: /test/ginkgo
    method: GET
    data_selector: records
    params: {}
- name: gomega
  endpoint:
    path: /test/gomega
    method: GET
    data_selector: records
    params: {}
- name: go test
  endpoint:
    path: /test/go-test
    method: GET
    data_selector: records
    params: {}
- name: MailgunCluster
  endpoint:
    path: /api/v1alpha1/mailgunclusters
    method: POST
    data_selector: data
    params: {}
- name: MailgunMachine
  endpoint:
    path: /api/v1alpha1/mailgunmachines
    method: POST
    data_selector: data
    params: {}
- name: MailgunCluster
  endpoint:
    path: /v3/mailgun-cluster
    method: POST
    data_selector: cluster
    params: {}
- name: fooclusters
  endpoint:
    path: /fooclusters
    method: GET
    data_selector: items
- name: fooclustertemplates
  endpoint:
    path: /fooclustertemplates
    method: GET
    data_selector: items
- name: InfraMachine
  endpoint:
    path: /inframachines
    method: GET
    data_selector: items
    params: {}
- name: InfraMachineList
  endpoint:
    path: /inframachines/list
    method: GET
    data_selector: items
    params: {}
- name: InfraMachineTemplate
  endpoint:
    path: /inframachinetemplates
    method: GET
    data_selector: items
    params: {}
- name: InfraMachineTemplateList
  endpoint:
    path: /inframachinetemplates/list
    method: GET
    data_selector: items
    params: {}
- name: BootstrapConfigTemplate
  endpoint:
    path: /fooconfigtemplates
    method: GET
    data_selector: items
- name: BootstrapConfigTemplateList
  endpoint:
    path: /fooconfigtemplatess
    method: GET
    data_selector: items
- name: management_cluster
  endpoint:
    path: /cluster-api/v1alpha4/management-cluster
    method: POST
    data_selector: status
    params: {}
- name: ibmcloud
  endpoint:
    path: /clusterctl/init/ibmcloud
    method: POST
- name: ionoscloud
  endpoint:
    path: /clusterctl/init/ionoscloud-ionoscloud
    method: POST
- name: k0sproject
  endpoint:
    path: /clusterctl/init/k0sproject-k0smotron
    method: POST
- name: kubekey
  endpoint:
    path: /clusterctl/init/kubekey
    method: POST
- name: opennebula
  endpoint:
    path: /clusterctl/init/opennebula
    method: POST
- name: openstack
  endpoint:
    path: /clusterctl/init/openstack
    method: POST
- name: outscale
  endpoint:
    path: /clusterctl/init/outscale
    method: POST
- name: proxmo
  endpoint:
    path: /clusterctl/init/proxmox
    method: POST
- name: scaleway
  endpoint:
    path: /clusterctl/init/scaleway
    method: POST
- name: vcd
  endpoint:
    path: /clusterctl/init/vcd
    method: POST
- name: vcluster
  endpoint:
    path: /clusterctl/init/vcluster
    method: POST
- name: virtink
  endpoint:
    path: /clusterctl/init/virtink
    method: POST
- name: vsphere
  endpoint:
    path: /clusterctl/init/vsphere
    method: POST
- name: vultr
  endpoint:
    path: /clusterctl/init/vultr-vultr
    method: POST
- name: workload_cluster
  endpoint:
    path: /workload_cluster
    method: POST
    data_selector: results
- name: scaleway_secret
  endpoint:
    path: /v1/secret
    method: POST
    data_selector: data
    params: {}
- name: KubeadmConfig
  endpoint:
    path: /api/bootstrap.cluster.x-k8s.io/v1beta2/kubeadmconfigs
    method: GET
    data_selector: items
- name: DockerCluster
  endpoint:
    path: /api/infrastructure.cluster.x-k8s.io/v1beta2/dockerclusters
    method: GET
    data_selector: items
- name: Machine
  endpoint:
    path: /api/cluster.x-k8s.io/v1beta2/machines
    method: GET
    data_selector: items
- name: MicroK8sControlPlane
  endpoint:
    path: /api/v1beta1/MicroK8sControlPlane
    method: GET
    data_selector: spec.controlPlaneConfig
    params: {}
- name: MachineDeployment
  endpoint:
    path: /api/v1beta2/MachineDeployment
    method: GET
    data_selector: spec.template.spec
    params: {}
- name: MachineTemplate
  endpoint:
    path: /services/data/vXX.X/sobjects/MachineTemplate
    method: POST
    data_selector: records
- name: KubeadmControlPlane
  endpoint:
    path: /services/data/vXX.X/sobjects/KubeadmControlPlane
    method: PATCH
    data_selector: records
- name: MachineDeployment
  endpoint:
    path: /services/data/vXX.X/sobjects/MachineDeployment
    method: PATCH
    data_selector: records
- name: MachineDeployment
  endpoint:
    path: /machine-deployments
    method: GET
    data_selector: items
    params: {}
- name: MachineSet
  endpoint:
    path: /machine-sets
    method: GET
    data_selector: items
    params: {}
- name: MachinePool
  endpoint:
    path: /machine-pools
    method: GET
    data_selector: items
    params: {}
- name: Cluster
  endpoint:
    path: /clusters
    method: GET
    data_selector: items
    params: {}
- name: MachineHealthCheck
  endpoint:
    path: /cluster.x-k8s.io/v1beta2/MachineHealthCheck
    method: POST
    data_selector: spec
    params: {}
- name: KubeadmControlPlane
  endpoint:
    path: /cluster.x-k8s.io/v1beta2/KubeadmControlPlane
    method: POST
    data_selector: spec
    params: {}
- name: ClusterClass
  endpoint:
    path: /cluster-classes
    method: GET
    data_selector: items
    params: {}
- name: Cluster
  endpoint:
    path: /clusters
    method: GET
    data_selector: items
    params: {}
- name: docker-clusterclass
  endpoint:
    path: /v1beta2/clusterclass
    method: GET
    data_selector: items
- name: dockerMachineTemplate
  endpoint:
    path: /v1beta2/dockermachinetemplates
    method: GET
    data_selector: items
- name: cluster
  endpoint:
    path: /clusters
    method: PATCH
    data_selector: spec
    params: {}
- name: machinedeployment
  endpoint:
    path: /machinedeployments
    method: PATCH
    data_selector: spec
    params: {}
- name: BeforeClusterCreate
  endpoint:
    path: /hooks/runtime/cluster/v1alpha1/before-cluster-create
    method: POST
    data_selector: status
    params: {}
- name: AfterControlPlaneInitialized
  endpoint:
    path: /hooks/runtime/cluster/v1alpha1/after-control-plane-initialized
    method: POST
    data_selector: status
    params: {}
- name: BeforeClusterUpgrade
  endpoint:
    path: /hooks/runtime/cluster/v1alpha1/before-cluster-upgrade
    method: POST
    data_selector: status
    params: {}
- name: AfterControlPlaneUpgrade
  endpoint:
    path: /hooks/runtime/cluster/v1alpha1/after-control-plane-upgrade
    method: POST
    data_selector: status
    params: {}
- name: AfterClusterUpgrade
  endpoint:
    path: /hooks/runtime/cluster/v1alpha1/after-cluster-upgrade
    method: POST
    data_selector: status
    params: {}
- name: BeforeClusterDelete
  endpoint:
    path: /hooks/runtime/cluster/v1alpha1/before-cluster-delete
    method: POST
    data_selector: status
    params: {}
- name: metrics
  endpoint:
    path: /metrics
    method: GET
- name: pprof
  endpoint:
    path: /debug/pprof
    method: GET
- name: loglevel
  endpoint:
    path: /debug/flags/v
    method: PUT
- name: podSecurityStandard
  endpoint:
    path: /spec/template/spec/kubeadmConfigSpec/clusterConfiguration/apiServer/extraArgs
    method: add
    data_selector: value
    params:
      admission-control-config-file: /etc/kubernetes/kube-apiserver-admission-pss.yaml
- name: extraVolumes
  endpoint:
    path: /spec/template/spec/kubeadmConfigSpec/clusterConfiguration/apiServer/extraVolumes
    method: add
    data_selector: value
    params:
      name: admission-pss
      hostPath: /etc/kubernetes/kube-apiserver-admission-pss.yaml
      mountPath: /etc/kubernetes/kube-apiserver-admission-pss.yaml
      readOnly: true
      pathType: File
- name: files
  endpoint:
    path: /spec/template/spec/kubeadmConfigSpec/files
    method: add
    data_selector: valueFrom
    params:
      content: "apiVersion: apiserver.config.k8s.io/v1\nkind: AdmissionConfiguration\n\
        plugins:\n- name: PodSecurity\n  configuration:\n    apiVersion: pod-security.admission.config.k8s.io/v1\n\
        \    kind: PodSecurityConfiguration\n    defaults:\n      enforce: \"{{ .podSecurity.enforce\
        \ }}\"\n      enforce-version: \"latest\"\n      audit: \"{{ .podSecurity.audit\
        \ }}\"\n      audit-version: \"latest\"\n      warn: \"{{ .podSecurity.warn\
        \ }}\"\n      warn-version: \"latest\"\n    exemptions:\n      usernames:\
        \ []\n      runtimeClasses: []\n      namespaces: [kube-system]"
      path: /etc/kubernetes/kube-apiserver-admission-pss.yaml
- name: kubeadmcontrolplanes
  endpoint:
    path: /alpha/rollout/kubeadmcontrolplanes
    method: POST
- name: machinedeployments
  endpoint:
    path: /alpha/rollout/machinedeployments
    method: POST
- name: capd-controller-manager
  endpoint:
    path: /capd-controller-manager
    method: GET
- name: capi-kubeadm-bootstrap-system
  endpoint:
    path: /capi-kubeadm-bootstrap-controller-manager
    method: GET
- name: capi-kubeadm-control-plane-system
  endpoint:
    path: /capi-kubeadm-control-plane-controller-manager
    method: GET
- name: capi-system
  endpoint:
    path: /capi-controller-manager
    method: GET
- name: cert-manager
  endpoint:
    path: /cert-manager
    method: GET
- name: cert-manager-cainjector
  endpoint:
    path: /cert-manager-cainjector
    method: GET
- name: cert-manager-webhook
  endpoint:
    path: /cert-manager-webhook
    method: GET
- name: Cluster
  endpoint:
    path: /api/v1/clusters
    method: GET
    data_selector: items
- name: MachineDeployment
  endpoint:
    path: /api/v1/machinedeployments
    method: GET
    data_selector: items
- name: bootstrap_data_secret
  endpoint:
    path: /developer/providers/contracts/bootstrap-config#bootstrapconfig-data-secret
    method: GET
    data_selector: records
- name: initialization_completed
  endpoint:
    path: /developer/providers/contracts/bootstrap-config#bootstrapconfig-initialization-completed
    method: GET
    data_selector: records
- name: conditions
  endpoint:
    path: /developer/providers/contracts/bootstrap-config#bootstrapconfig-conditions
    method: GET
    data_selector: records
- name: terminal_failures
  endpoint:
    path: /developer/providers/contracts/bootstrap-config#bootstrapconfig-terminal-failures
    method: GET
    data_selector: records
- name: taint_nodes_creation
  endpoint:
    path: /developer/providers/contracts/bootstrap-config#taint-nodes-at-creation
    method: GET
    data_selector: records
- name: sentinel_file
  endpoint:
    path: /developer/providers/contracts/bootstrap-config#sentinel-file
    method: GET
    data_selector: records
- name: capi-controller-manager
  endpoint:
    path: /api/v1/namespaces/default/pods
    method: GET
    data_selector: logs
- name: MailgunCluster
  endpoint:
    path: /v1/mailgunclusters
    method: POST
    data_selector: data
    params: {}
- name: MailgunMachine
  endpoint:
    path: /v1/mailgunmachines
    method: POST
    data_selector: data
    params: {}
- name: MailgunCluster
  endpoint:
    path: /v3/mailgun-cluster
    method: POST
- name: fooclusters
  endpoint:
    path: /fooclusters
    method: GET
    data_selector: items
- name: fooclustertemplates
  endpoint:
    path: /fooclustertemplates
    method: GET
    data_selector: items
- name: InfraMachine
  endpoint:
    path: /infraMachines
    method: GET
    data_selector: items
- name: InfraMachineTemplate
  endpoint:
    path: /infraMachineTemplates
    method: GET
    data_selector: items
- name: control_plane_endpoint
  endpoint:
    path: /controlPlaneEndpoint
    method: GET
    data_selector: controlPlaneEndpoint
    params: {}
- name: VPC
  endpoint:
    path: /v1/vpcs
    method: GET
- name: workload_clusters
  endpoint:
    path: /RPC2
    method: POST
    data_selector: response
    params: {}
- name: scaleway-secret
  endpoint:
    path: /v1/secret
    method: POST
- name: KubeadmConfig
  endpoint:
    path: /kubeadmconfigs
    method: GET
    data_selector: items
    params: {}
- name: Machine
  endpoint:
    path: /machines
    method: GET
    data_selector: items
    params: {}
- name: DockerCluster
  endpoint:
    path: /dockerclusters
    method: GET
    data_selector: items
    params: {}
- name: MicroK8sControlPlane
  endpoint:
    path: /api/v1/microk8s/controlplane
    method: POST
    data_selector: spec
    params: {}
- name: MachineDeployment
  endpoint:
    path: /api/v1/machine-deployment
    method: POST
    data_selector: spec
    params: {}
- name: KubeadmControlPlane
  endpoint:
    path: /kubeadmcontrolplanes
    method: GET
- name: MachineDeployment
  endpoint:
    path: /machinedeployments
    method: GET
- name: MachineDeployment
  endpoint:
    annotations:
      cluster.x-k8s.io/cluster-api-autoscaler-node-group-max-size: '5'
      cluster.x-k8s.io/cluster-api-autoscaler-node-group-min-size: '0'
      capacity.cluster-autoscaler.kubernetes.io/memory: 128G
      capacity.cluster-autoscaler.kubernetes.io/cpu: '16'
      capacity.cluster-autoscaler.kubernetes.io/ephemeral-disk: 100Gi
      capacity.cluster-autoscaler.kubernetes.io/maxPods: '200'
      capacity.cluster-autoscaler.kubernetes.io/gpu-type: nvidia.com/gpu
      capacity.cluster-autoscaler.kubernetes.io/gpu-count: '2'
- name: machine_health_check
  endpoint:
    path: /api/v1beta2/machinehealthchecks
    method: GET
    data_selector: items
    params: {}
- name: ClusterClass
  endpoint:
    path: /api/v1beta2/ClusterClass
    method: GET
    data_selector: items
- name: Cluster
  endpoint:
    path: /api/v1beta2/Cluster
    method: GET
    data_selector: items
- name: customImage
  endpoint:
    path: /spec/template/spec/customImage
    method: add
    data_selector: valueFrom.template
    params: {}
- name: httpProxy
  endpoint:
    path: /spec/template/spec/httpProxy/url
    method: add
    data_selector: valueFrom.variable
    params: {}
- name: mdConfig
  endpoint:
    path: /spec/template/spec/customImage
    method: add
    data_selector: valueFrom.template
    params: {}
- name: dnsServers
  endpoint:
    path: /spec/template/spec/dnsServers
    method: add
    data_selector: valueFrom.variable
    params: {}
- name: dnsServer
  endpoint:
    path: /spec/template/spec/dnsServer
    method: add
    data_selector: valueFrom.variable
    params: {}
- name: etcdImageTag
  endpoint:
    path: /spec/template/spec/kubeadmConfigSpec/clusterConfiguration/etcd
    method: add
    data_selector: valueFrom.template
    params: {}
- name: imageRepository
  endpoint:
    path: /spec/template/spec/kubeadmConfigSpec/clusterConfiguration/imageRepository
    method: add
    data_selector: value
    params: {}
- name: metrics
  endpoint:
    path: /metrics
    method: GET
- name: pprof
  endpoint:
    path: /debug/pprof
    method: GET
- name: loglevel
  endpoint:
    path: /debug/flags/v
    method: PUT
- name: podSecurityStandard
  endpoint:
    path: /spec/template/spec/kubeadmConfigSpec/clusterConfiguration/apiServer/extraArgs
    method: ADD
    data_selector: value
    params: {}
- name: extraVolumes
  endpoint:
    path: /spec/template/spec/kubeadmConfigSpec/clusterConfiguration/apiServer/extraVolumes
    method: ADD
    data_selector: value
    params: {}
- name: files
  endpoint:
    path: /spec/template/spec/kubeadmConfigSpec/files
    method: ADD
    data_selector: valueFrom
    params: {}
- name: kubeadmcontrolplanes
  endpoint:
    path: /kubeadmcontrolplanes
    method: GET
- name: machinedeployments
  endpoint:
    path: /machinedeployments
    method: GET
- name: Machine
  endpoint:
    path: /machine
    method: POST
    data_selector: status
    params: {}
- name: MachinePool
  endpoint:
    path: /machinepool
    method: POST
    data_selector: status
    params: {}
- name: MailgunCluster
  endpoint:
    path: /cluster
    method: POST
    data_selector: cluster
- name: MailgunMachine
  endpoint:
    path: /machine
    method: POST
    data_selector: machine
- name: MailgunCluster
  endpoint:
    path: /v1/clusters
    method: POST
    data_selector: data
- name: fooclusters
  endpoint:
    path: /fooclusters
    method: GET
    data_selector: items
- name: fooclustertemplates
  endpoint:
    path: /fooclustertemplates
    method: GET
    data_selector: items
- name: InfraMachine
  endpoint:
    path: /developer/providers/contracts/infra-machine#inframachine-inframachinelist-resource-definition
    method: GET
    data_selector: records
- name: InfraMachineTemplate
  endpoint:
    path: /developer/providers/contracts/infra-machine#inframachinetemplate-inframachinetemplatelist-resource-definition
    method: GET
    data_selector: records
- name: BootstrapConfig
  endpoint:
    path: /bootstrapconfigs
    method: POST
    data_selector: items
    params: {}
- name: BootstrapConfigList
  endpoint:
    path: /bootstrapconfiglists
    method: GET
    data_selector: items
    params: {}
- name: FooControlPlaneSpec
  endpoint:
    path: /controlplane/spec
    method: POST
    data_selector: spec
    params: {}
- name: FooControlPlaneStatus
  endpoint:
    path: /controlplane/status
    method: GET
    data_selector: status
    params: {}
- name: VPC
  endpoint:
    path: /v1/vpcs
    method: GET
    data_selector: vpcs
- name: PowerVS
  endpoint:
    path: /v1/powervs
    method: GET
    data_selector: powervs
- name: machine_template
  endpoint:
    path: /templates/machine
    method: GET
    data_selector: machine_templates
    params: {}
- name: cluster
  endpoint:
    path: /clusters
    method: GET
    data_selector: clusters
    params: {}
- name: scaleway-secret
  endpoint:
    path: /api/v1/secrets
    method: POST
    data_selector: stringData
- name: MicroK8sControlPlane
  endpoint:
    path: /api/v1beta2/microk8scontrolplanes
    method: GET
    data_selector: items
- name: MachineDeployment
  endpoint:
    path: /api/v1beta2/machinedeployments
    method: GET
    data_selector: items
- name: MachineHealthCheck
  endpoint:
    path: /machinehealthchecks
    method: GET
    data_selector: items
    params: {}
- name: KubeadmControlPlane
  endpoint:
    path: /kubeadmcontrolplanes
    method: GET
    data_selector: items
    params: {}
- name: ClusterClass
  endpoint:
    path: /cluster.x-k8s.io/v1beta2/ClusterClass
    method: GET
    data_selector: items
    params: {}
- name: Cluster
  endpoint:
    path: /cluster.x-k8s.io/v1beta2/Cluster
    method: GET
    data_selector: items
    params: {}
- name: docker-clusterclass
  endpoint:
    path: /docker-clusterclass
    method: GET
- name: azure-clusterclass
  endpoint:
    path: /azure-clusterclass
    method: GET
- name: BeforeClusterCreate
  endpoint:
    path: /before-cluster-create
    method: POST
    data_selector: status
    params: {}
- name: AfterControlPlaneInitialized
  endpoint:
    path: /after-control-plane-initialized
    method: POST
    data_selector: status
    params: {}
- name: BeforeClusterUpgrade
  endpoint:
    path: /before-cluster-upgrade
    method: POST
    data_selector: status
    params: {}
- name: AfterControlPlaneUpgrade
  endpoint:
    path: /after-control-plane-upgrade
    method: POST
    data_selector: status
    params: {}
- name: AfterClusterUpgrade
  endpoint:
    path: /after-cluster-upgrade
    method: POST
    data_selector: status
    params: {}
- name: BeforeClusterDelete
  endpoint:
    path: /before-cluster-delete
    method: POST
    data_selector: status
    params: {}
- name: GeneratePatches
  endpoint:
    path: /generate-patches
    method: POST
    data_selector: status
    params: {}
- name: ValidateTopology
  endpoint:
    path: /validate-topology
    method: POST
    data_selector: status
    params: {}
- name: DiscoverVariables
  endpoint:
    path: /discover-variables
    method: POST
    data_selector: status
    params: {}
- name: metrics
  endpoint:
    path: /metrics
    method: GET
- name: pprof
  endpoint:
    path: /debug/pprof/
    method: GET
- name: log_level
  endpoint:
    path: /debug/flags/v
    method: PUT
- name: podSecurityStandard
  endpoint:
    path: /spec/template/spec/kubeadmConfigSpec/clusterConfiguration/apiServer/extraArgs
    method: add
    data_selector: admission-control-config-file
    params:
      value: /etc/kubernetes/kube-apiserver-admission-pss.yaml
- name: admission-pss
  endpoint:
    path: /spec/template/spec/kubeadmConfigSpec/clusterConfiguration/apiServer/extraVolumes
    method: add
    data_selector: hostPath
    params:
      value: /etc/kubernetes/kube-apiserver-admission-pss.yaml
- name: AdmissionConfiguration
  endpoint:
    path: /spec/template/spec/kubeadmConfigSpec/files
    method: add
    data_selector: content
    params:
      value: "apiVersion: apiserver.config.k8s.io/v1\nkind: AdmissionConfiguration\n\
        plugins:\n- name: PodSecurity\n  configuration:\n    apiVersion: pod-security.admission.config.k8s.io/v1\n\
        \    kind: PodSecurityConfiguration\n    defaults:\n      enforce: '{{ .podSecurity.enforce\
        \ }}'\n      enforce-version: 'latest'\n      audit: '{{ .podSecurity.audit\
        \ }}'\n      audit-version: 'latest'\n      warn: '{{ .podSecurity.warn }}'\n\
        \      warn-version: 'latest'\n    exemptions:\n      usernames: []\n    \
        \  runtimeClasses: []\n      namespaces: [kube-system]"
- name: kubeadmcontrolplanes
  endpoint:
    path: /kubeadmcontrolplanes
    method: GET
- name: machinedeployments
  endpoint:
    path: /machinedeployments
    method: GET
- name: Machine
  endpoint:
    path: /services/data/vXX.X/sobjects/Machine
    method: GET
    data_selector: records
- name: MachinePool
  endpoint:
    path: /services/data/vXX.X/sobjects/MachinePool
    method: GET
    data_selector: records
- name: cluster
  endpoint:
    path: /services/data/vXX.X/sobjects/Cluster
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: MailgunCluster
  endpoint:
    path: /clusters
    method: POST
    data_selector: cluster
    params: {}
- name: MailgunMachine
  endpoint:
    path: /machines
    method: POST
    data_selector: machine
    params: {}
- name: MailgunCluster
  endpoint:
    path: /v1/mailgun/cluster
    method: POST
    data_selector: cluster
    params: {}
- name: fooclusters
  endpoint:
    path: /fooclusters
    method: GET
    data_selector: items
- name: fooclustertemplates
  endpoint:
    path: /fooclustertemplates
    method: GET
    data_selector: items
- name: InfraMachine
  endpoint:
    path: /infra-machines
    method: POST
    data_selector: items
    params: {}
- name: InfraMachineTemplate
  endpoint:
    path: /infra-machine-templates
    method: POST
    data_selector: items
    params: {}
- name: controlPlane
  endpoint:
    path: /controlPlane
    method: GET
- name: FooControlPlaneStatus
  endpoint:
    path: /status/initialization/controlPlaneInitialized
    method: GET
    data_selector: initialization
    params: {}
- name: FooControlPlaneInitializationStatus
  endpoint:
    path: /initialization
    method: GET
    data_selector: controlPlaneInitialized
    params: {}
- name: vpc
  endpoint:
    path: /v1/vpcs
    method: GET
    data_selector: vpcs
- name: powervs
  endpoint:
    path: /v1/powervs
    method: GET
    data_selector: powervs
- name: workload_cluster
  endpoint:
    path: /cluster
    method: POST
    data_selector: results
- name: scaleway-secret
  endpoint:
    path: /v1/secret
    method: POST
    data_selector: data
    params: {}
- name: KubeadmConfig
  endpoint:
    path: /bootstrap.cluster.x-k8s.io/v1beta2/kubeadmconfigs
    method: GET
    data_selector: items
- name: DockerCluster
  endpoint:
    path: /infrastructure.cluster.x-k8s.io/v1beta2/dockerclusters
    method: GET
    data_selector: items
- name: Machine
  endpoint:
    path: /cluster.x-k8s.io/v1beta2/machines
    method: GET
    data_selector: items
- name: MicroK8sControlPlane
  endpoint:
    path: /api/v1beta2/microk8scontrolplanes
    method: GET
    data_selector: items
    params: {}
- name: MachineDeployment
  endpoint:
    path: /api/v1beta2/machinedeployments
    method: GET
    data_selector: items
    params: {}
- name: KubeadmControlPlane
  endpoint:
    path: /kubeadmcontrolplanes
    method: GET
- name: MachineDeployment
  endpoint:
    path: /machinedeployments
    method: GET
- name: MachineDeployment
  endpoint:
    path: /apis/cluster.x-k8s.io/v1alpha4/machinedeployments
    method: GET
    data_selector: items
    params: {}
- name: MachineSet
  endpoint:
    path: /apis/cluster.x-k8s.io/v1alpha4/machinesets
    method: GET
    data_selector: items
    params: {}
- name: machine_health_check
  endpoint:
    path: /services/data/vXX.X/sobjects/MachineHealthCheck
    method: POST
    data_selector: spec
    params:
      clusterName: capi-quickstart
      maxUnhealthy: 40%
      nodeStartupTimeout: 10m
      selector:
        matchLabels:
          nodepool: nodepool-0
      unhealthyNodeConditions:
      - type: Ready
        status: Unknown
        timeout: 300s
      - type: Ready
        status: 'False'
        timeout: 300s
- name: ClusterClass
  endpoint:
    path: /cluster.x-k8s.io/v1beta2/ClusterClass
    method: GET
    data_selector: items
- name: Cluster
  endpoint:
    path: /cluster.x-k8s.io/v1beta2/Cluster
    method: GET
    data_selector: items
- name: customImage
  endpoint:
    path: /spec/template/spec/customImage
    method: add
    data_selector: ''
    params: {}
- name: httpProxy
  endpoint:
    path: /spec/template/spec/httpProxy/url
    method: add
    data_selector: ''
    params: {}
- name: mdConfig
  endpoint:
    path: /spec/template/spec/customImage
    method: add
    data_selector: ''
    params: {}
- name: dnsServers
  endpoint:
    path: /spec/template/spec/dnsServers
    method: add
    data_selector: ''
    params: {}
- name: dnsServer
  endpoint:
    path: /spec/template/spec/dnsServer
    method: add
    data_selector: ''
    params: {}
- name: etcdImageTag
  endpoint:
    path: /spec/template/spec/kubeadmConfigSpec/clusterConfiguration/etcd
    method: add
    data_selector: ''
    params: {}
- name: imageRepository
  endpoint:
    path: /spec/template/spec/kubeadmConfigSpec/clusterConfiguration/imageRepository
    method: add
    data_selector: ''
    params: {}
- name: cluster
  endpoint:
    path: /clusters
    method: PATCH
    data_selector: spec
    params: {}
- name: machinedeployment
  endpoint:
    path: /machinedeployments
    method: GET
    data_selector: spec
    params: {}
- name: kubeadmcontrolplane
  endpoint:
    path: /kubeadmcontrolplanes
    method: GET
    data_selector: spec
    params: {}
- name: BeforeClusterCreate
  endpoint:
    path: /hooks/runtime/cluster.x-k8s.io/v1alpha1/before-cluster-create
    method: POST
    data_selector: status
    params: {}
- name: AfterControlPlaneInitialized
  endpoint:
    path: /hooks/runtime/cluster.x-k8s.io/v1alpha1/after-control-plane-initialized
    method: POST
    data_selector: status
    params: {}
- name: BeforeClusterUpgrade
  endpoint:
    path: /hooks/runtime/cluster.x-k8s.io/v1alpha1/before-cluster-upgrade
    method: POST
    data_selector: status
    params: {}
- name: AfterControlPlaneUpgrade
  endpoint:
    path: /hooks/runtime/cluster.x-k8s.io/v1alpha1/after-control-plane-upgrade
    method: POST
    data_selector: status
    params: {}
- name: AfterClusterUpgrade
  endpoint:
    path: /hooks/runtime/cluster.x-k8s.io/v1alpha1/after-cluster-upgrade
    method: POST
    data_selector: status
    params: {}
- name: BeforeClusterDelete
  endpoint:
    path: /hooks/runtime/cluster.x-k8s.io/v1alpha1/before-cluster-delete
    method: POST
    data_selector: status
    params: {}
- name: metrics
  endpoint:
    path: /metrics
    method: GET
    data_selector: data
    params: {}
- name: pprof
  endpoint:
    path: /debug/pprof
    method: GET
    data_selector: data
    params: {}
- name: KubeadmControlPlaneTemplate
  endpoint:
    path: /spec/template/spec/kubeadmConfigSpec/clusterConfiguration/apiServer/extraArgs
    method: add
    data_selector: value
    params: {}
- name: kubeadmcontrolplanes
  endpoint:
    path: /kubeadmcontrolplanes
    method: GET
- name: machinedeployments
  endpoint:
    path: /machinedeployments
    method: GET
- name: Machine
  endpoint:
    path: /machine
    method: GET
    data_selector: status
    params: {}
- name: MachinePool
  endpoint:
    path: /machinepool
    method: GET
    data_selector: status
    params: {}
- name: controller_logs
  endpoint:
    path: /logs
    method: GET
    data_selector: logs
    params: {}
- name: MailgunCluster
  endpoint:
    path: /v1/mailgunclusters
    method: POST
    data_selector: cluster
    params: {}
- name: MailgunMachine
  endpoint:
    path: /v1/mailgunmachines
    method: POST
    data_selector: machine
    params: {}
- name: MailgunCluster
  endpoint:
    path: /clusters
    method: POST
    data_selector: data
- name: fooclusters
  endpoint:
    path: /fooclusters
    method: GET
- name: fooclustertemplates
  endpoint:
    path: /fooclustertemplates
    method: GET
- name: InfraMachine
  endpoint:
    path: /developer/providers/contracts/infra-machine#inframachine-inframachinelist-resource-definition
    method: GET
    data_selector: records
- name: InfraMachineTemplate
  endpoint:
    path: /developer/providers/contracts/infra-machine#inframachinetemplate-inframachinetemplatelist-resource-definition
    method: GET
    data_selector: records
- name: controlPlane
  endpoint:
    path: /api/v2/controlPlane
    method: GET
- name: management_cluster
  endpoint:
    path: /cluster-api/management
    method: POST
    data_selector: clusters
    params: {}
- name: vpc
  endpoint:
    path: /v1/vpcs
    method: GET
- name: power
  endpoint:
    path: /v1/power
    method: GET
- name: workload_cluster
  endpoint:
    path: /workload-cluster
    method: GET
    data_selector: clusters
- name: scaleway-secret
  endpoint:
    path: /api/v1/secret
    method: POST
    data_selector: data
    params: {}
- name: MicroK8sControlPlane
  endpoint:
    path: /api/v1beta1/microk8scontrolplanes
    method: GET
    data_selector: items
- name: MachineDeployment
  endpoint:
    path: /api/v1beta1/machinedeployments
    method: GET
    data_selector: items
- name: MachineHealthCheck
  endpoint:
    path: /api/v1beta2/machinehealthchecks
    method: GET
    data_selector: items
    params: {}
- name: KubeadmControlPlane
  endpoint:
    path: /api/v1beta2/kubeadmcontrolplanes
    method: GET
    data_selector: items
    params: {}
- name: ClusterClass
  endpoint:
    path: /clusterclass
    method: GET
- name: Cluster
  endpoint:
    path: /cluster
    method: GET
- name: docker-clusterclass
  endpoint:
    path: /cluster/classes/docker-clusterclass
    method: GET
- name: azure-clusterclass
  endpoint:
    path: /cluster/classes/azure-clusterclass
    method: GET
- name: BeforeClusterCreateRequest
  endpoint:
    path: /hooks/runtime/cluster/x-k8s.io/v1alpha1/before-cluster-create
    method: POST
    data_selector: settings
    params: {}
- name: AfterControlPlaneInitializedRequest
  endpoint:
    path: /hooks/runtime/cluster/x-k8s.io/v1alpha1/after-control-plane-initialized
    method: POST
    data_selector: settings
    params: {}
- name: BeforeClusterUpgradeRequest
  endpoint:
    path: /hooks/runtime/cluster/x-k8s.io/v1alpha1/before-cluster-upgrade
    method: POST
    data_selector: settings
    params: {}
- name: AfterControlPlaneUpgradeRequest
  endpoint:
    path: /hooks/runtime/cluster/x-k8s.io/v1alpha1/after-control-plane-upgrade
    method: POST
    data_selector: settings
    params: {}
- name: AfterClusterUpgradeRequest
  endpoint:
    path: /hooks/runtime/cluster/x-k8s.io/v1alpha1/after-cluster-upgrade
    method: POST
    data_selector: settings
    params: {}
- name: BeforeClusterDeleteRequest
  endpoint:
    path: /hooks/runtime/cluster/x-k8s.io/v1alpha1/before-cluster-delete
    method: POST
    data_selector: settings
    params: {}
- name: workload_cluster
  endpoint:
    path: /cluster-api/workload
    method: POST
    data_selector: status
    params: {}
- name: metrics
  endpoint:
    path: /metrics
    method: GET
- name: pprof
  endpoint:
    path: /debug/pprof/goroutine
    method: GET
- name: loglevel
  endpoint:
    path: /debug/flags/v
    method: PUT
- name: podSecurityStandard
  endpoint:
    path: /spec/template/spec/kubeadmConfigSpec/clusterConfiguration/apiServer/extraArgs
    method: add
    data_selector: value
    params: {}
- name: admission-pss
  endpoint:
    path: /spec/template/spec/kubeadmConfigSpec/clusterConfiguration/apiServer/extraVolumes
    method: add
    data_selector: value
    params: {}
- name: files
  endpoint:
    path: /spec/template/spec/kubeadmConfigSpec/files
    method: add
    data_selector: valueFrom.template
    params: {}
- name: provider
  endpoint:
    path: /generate/provider
    method: GET
    data_selector: components
    params: {}
- name: cluster
  endpoint:
    path: /generate/cluster
    method: GET
    data_selector: templates
    params: {}
- name: providers
  endpoint:
    path: /clusterctl/config/repositories
    method: GET
    data_selector: providers
    params: {}
- name: cert-manager
  endpoint:
    path: /clusterctl/cert-manager
    method: GET
    data_selector: cert-manager
    params: {}
- name: local-repository
  endpoint:
    path: /clusterctl/local-repository
    method: GET
    data_selector: local-repository
    params: {}
- name: cluster
  endpoint:
    path: /cluster-api
    method: GET
    data_selector: records
    params: {}
- name: cluster
  endpoint:
    path: /clusters
    method: GET
    data_selector: clusters
- name: machinedeployment
  endpoint:
    path: /machinedeployments
    method: GET
    data_selector: machinedeployments
- name: machineset
  endpoint:
    path: /machinesets
    method: GET
    data_selector: machinesets
- name: logs_from_cluster
  endpoint:
    path: /api/v1/logs
    method: GET
    data_selector: logs
    params:
      Cluster_name: my-cluster
      reconcileID: 6f6ad971-bdb6-4fa3-b803-ef81c5c8f9d0
      controller: cluster
- name: logs_from_providers
  endpoint:
    path: /api/v1/logs
    method: GET
    data_selector: logs
    params:
      app: =capd-controller-manager|capi-kubeadm-bootstrap-controller-manager|capi-kubeadm-control-plane-controller-manager
      Cluster_name: my-cluster
      Machine_name: my-cluster-linux-worker-1
- name: MailgunCluster
  endpoint:
    path: /clusters
    method: POST
    data_selector: clusters
- name: MailgunMachine
  endpoint:
    path: /machines
    method: POST
    data_selector: machines
- name: mailgun_cluster
  endpoint:
    path: /v1/mailgun/cluster
    method: POST
    data_selector: data
- name: InfraMachine
  endpoint:
    path: /infra-machines
    method: GET
    data_selector: items
    params: {}
- name: InfraMachineTemplate
  endpoint:
    path: /infra-machine-templates
    method: GET
    data_selector: items
    params: {}
- name: BootstrapConfig
  endpoint:
    path: /bootstrapconfigs
    method: GET
    data_selector: items
- name: BootstrapConfigList
  endpoint:
    path: /bootstrapconfiglists
    method: GET
    data_selector: items
- name: control_plane
  endpoint:
    path: /api/v1/controlplane
    method: GET
- name: management_cluster
  endpoint:
    path: /cluster-api/v1/management
    method: GET
    data_selector: clusters
    params: {}
- name: control_plane
  endpoint:
    path: /v1/control_plane
    method: POST
    data_selector: control_plane
    params:
      cluster_name: capi-quickstart
- name: worker
  endpoint:
    path: /v1/worker
    method: POST
    data_selector: worker
    params:
      cluster_name: capi-quickstart
- name: scaleway_secret
  endpoint:
    path: /scaleway/secret
    method: POST
- name: MicroK8sControlPlane
  endpoint:
    path: /controlPlane
    method: POST
    data_selector: spec
    params: {}
- name: MachineDeployment
  endpoint:
    path: /machineDeployment
    method: POST
    data_selector: spec
    params: {}
- name: MicroK8sConfigTemplate
  endpoint:
    path: /microK8sConfigTemplate
    method: POST
    data_selector: spec
    params: {}
- name: machine_health_check
  endpoint:
    path: /api/v1/machineHealthCheck
    method: POST
    data_selector: spec
    params: {}
- name: ClusterClass
  endpoint:
    path: /clusterclasses
    method: GET
    data_selector: items
    params: {}
- name: Cluster
  endpoint:
    path: /clusters
    method: GET
    data_selector: items
    params: {}
- name: customImage
  endpoint:
    path: /spec/template/spec/customImage
    method: add
    data_selector: valueFrom.template
    params: {}
- name: httpProxy
  endpoint:
    path: /spec/template/spec/httpProxy/url
    method: add
    data_selector: valueFrom.variable
    params: {}
- name: mdConfig
  endpoint:
    path: /spec/template/spec/customImage
    method: add
    data_selector: valueFrom.template
    params: {}
- name: dnsServers
  endpoint:
    path: /spec/template/spec/dnsServers
    method: add
    data_selector: valueFrom.variable
    params: {}
- name: dnsServer
  endpoint:
    path: /spec/template/spec/dnsServer
    method: add
    data_selector: valueFrom.variable
    params: {}
- name: controlPlane
  endpoint:
    path: /spec/topology/controlPlane
    method: PATCH
    data_selector: spec.topology.controlPlane
    params: {}
- name: machineDeployments
  endpoint:
    path: /spec/topology/workers/machineDeployments
    method: PATCH
    data_selector: spec.topology.workers.machineDeployments
    params: {}
- name: variables
  endpoint:
    path: /spec/topology/variables
    method: PATCH
    data_selector: spec.topology.variables
    params: {}
- name: BeforeClusterCreate
  endpoint:
    path: /v1alpha1/beforeClusterCreate
    method: POST
    data_selector: status
    params: {}
- name: AfterControlPlaneInitialized
  endpoint:
    path: /v1alpha1/afterControlPlaneInitialized
    method: POST
    data_selector: status
    params: {}
- name: BeforeClusterUpgrade
  endpoint:
    path: /v1alpha1/beforeClusterUpgrade
    method: POST
    data_selector: status
    params: {}
- name: AfterControlPlaneUpgrade
  endpoint:
    path: /v1alpha1/afterControlPlaneUpgrade
    method: POST
    data_selector: status
    params: {}
- name: AfterClusterUpgrade
  endpoint:
    path: /v1alpha1/afterClusterUpgrade
    method: POST
    data_selector: status
    params: {}
- name: BeforeClusterDelete
  endpoint:
    path: /v1alpha1/beforeClusterDelete
    method: POST
    data_selector: status
    params: {}
- name: GeneratePatches
  endpoint:
    path: /v1alpha1/generatePatches
    method: POST
    data_selector: status
    params: {}
- name: ValidateTopology
  endpoint:
    path: /v1alpha1/validateTopology
    method: POST
    data_selector: status
    params: {}
- name: DiscoverVariables
  endpoint:
    path: /v1alpha1/discoverVariables
    method: POST
    data_selector: status
    params: {}
- name: podSecurityStandard
  endpoint:
    path: /spec/template/spec/kubeadmConfigSpec/clusterConfiguration/apiServer/extraArgs
    method: add
    data_selector: admission-control-config-file
    params:
      value: /etc/kubernetes/kube-apiserver-admission-pss.yaml
- name: extraVolumes
  endpoint:
    path: /spec/template/spec/kubeadmConfigSpec/clusterConfiguration/apiServer/extraVolumes
    method: add
    data_selector: admission-pss
    params:
      hostPath: /etc/kubernetes/kube-apiserver-admission-pss.yaml
      mountPath: /etc/kubernetes/kube-apiserver-admission-pss.yaml
      readOnly: true
      pathType: File
- name: files
  endpoint:
    path: /spec/template/spec/kubeadmConfigSpec/files
    method: add
    data_selector: AdmissionConfiguration
    params:
      content: "apiVersion: apiserver.config.k8s.io/v1\nkind: AdmissionConfiguration\n\
        plugins:\n- name: PodSecurity\n  configuration:\n    apiVersion: pod-security.admission.config.k8s.io/v1\n\
        \    kind: PodSecurityConfiguration\n    defaults:\n      enforce: \"{{ .podSecurity.enforce\
        \ }}\"\n      enforce-version: \"latest\"\n      audit: \"{{ .podSecurity.audit\
        \ }}\"\n      audit-version: \"latest\"\n      warn: \"{{ .podSecurity.warn\
        \ }}\"\n      warn-version: \"latest\"\n    exemptions:\n      usernames:\
        \ []\n      runtimeClasses: []\n      namespaces: [kube-system]"
      path: /etc/kubernetes/kube-apiserver-admission-pss.yaml
- name: kubeadmcontrolplanes
  endpoint:
    path: /kubeadmcontrolplanes
    method: GET
    data_selector: resources
- name: machinedeployments
  endpoint:
    path: /machinedeployments
    method: GET
    data_selector: resources
- name: capd-controller-manager
  endpoint:
    path: /capd-controller-manager
    method: GET
    data_selector: records
- name: capi-kubeadm-bootstrap-controller-manager
  endpoint:
    path: /capi-kubeadm-bootstrap-controller-manager
    method: GET
    data_selector: records
- name: capi-kubeadm-control-plane-controller-manager
  endpoint:
    path: /capi-kubeadm-control-plane-controller-manager
    method: GET
    data_selector: records
- name: capi-controller-manager
  endpoint:
    path: /capi-controller-manager
    method: GET
    data_selector: records
- name: cert-manager
  endpoint:
    path: /cert-manager
    method: GET
    data_selector: records
- name: cert-manager-cainjector
  endpoint:
    path: /cert-manager-cainjector
    method: GET
    data_selector: records
- name: cert-manager-webhook
  endpoint:
    path: /cert-manager-webhook
    method: GET
    data_selector: records
- name: Cluster
  endpoint:
    path: /api/clusters
    method: GET
    data_selector: items
- name: MachineDeployment
  endpoint:
    path: /api/machinedeployments
    method: GET
    data_selector: items
- name: MachineSet
  endpoint:
    path: /api/machinesets
    method: GET
    data_selector: items
- name: Machine
  endpoint:
    path: /api/v1/machine
    method: GET
    data_selector: machines
- name: MachinePool
  endpoint:
    path: /api/v1/machinepool
    method: GET
    data_selector: machinePools
- name: MachineHealthCheck
  endpoint:
    path: /api/v1/machinehealthcheck
    method: GET
    data_selector: machineHealthChecks
- name: logs
  endpoint:
    path: /logs
    method: GET
    data_selector: msg
    params: {}
- name: MailgunCluster
  endpoint:
    path: /clusters
    method: POST
    data_selector: data
- name: MailgunMachine
  endpoint:
    path: /machines
    method: POST
    data_selector: data
- name: MailgunCluster
  endpoint:
    path: /v3/mailgun/cluster
    method: POST
    data_selector: data
- name: fooclusters
  endpoint:
    path: /fooclusters
    method: GET
    data_selector: items
- name: fooclustertemplates
  endpoint:
    path: /fooclustertemplates
    method: GET
    data_selector: items
- name: InfraMachine
  endpoint:
    path: /infraMachines
    method: GET
    data_selector: items
    params: {}
- name: InfraMachineTemplate
  endpoint:
    path: /infraMachineTemplates
    method: GET
    data_selector: items
    params: {}
- name: BootstrapConfig
  endpoint:
    path: /bootstrapconfigs
    method: POST
    data_selector: items
    params: {}
- name: BootstrapConfigList
  endpoint:
    path: /bootstrapconfiglists
    method: GET
    data_selector: items
    params: {}
- name: ControlPlane
  endpoint:
    path: /api/v1beta2/controlplane
    method: GET
    data_selector: items
    params: {}
- name: management_cluster
  endpoint:
    path: /init
    method: POST
- name: VPC
  endpoint:
    path: /v1/vpcs
    method: GET
- name: PowerVS
  endpoint:
    path: /v1/powervs
    method: GET
- name: workload_cluster
  endpoint:
    path: /clusters
    method: GET
    data_selector: clusters
    params: {}
- name: scaleway-secret
  endpoint:
    path: /api/v1/secrets/scaleway-secret
    method: POST
    data_selector: metadata
    params: {}
- name: KubeadmConfig
  endpoint:
    path: /kubeadmconfig
    method: GET
    data_selector: items
    params: {}
- name: DockerCluster
  endpoint:
    path: /dockercluster
    method: GET
    data_selector: items
    params: {}
- name: Machine
  endpoint:
    path: /machine
    method: GET
    data_selector: items
    params: {}
- name: MicroK8sControlPlane
  endpoint:
    path: /api/v1beta2/controlplane.cluster.x-k8s.io/microk8scontrolplanes
    method: GET
    data_selector: items
    params: {}
- name: MachineDeployment
  endpoint:
    path: /api/v1beta2/machinedeployments
    method: GET
    data_selector: items
    params: {}
- name: KubeadmControlPlane
  endpoint:
    path: /kubeadmcontrolplanes
    method: GET
    data_selector: spec
    params: {}
- name: MachineDeployment
  endpoint:
    path: /machinedeployments
    method: GET
    data_selector: spec
    params: {}
- name: MachineHealthCheck
  endpoint:
    path: /machinehealthchecks
    method: GET
    data_selector: spec
    params: {}
- name: MachineDeployment
  endpoint:
    path: /api/v1/MachineDeployment
    method: POST
    data_selector: items
    params: {}
- name: MachineHealthCheck
  endpoint:
    path: /path/to/machinehealthcheck
    method: GET
    data_selector: items
    params: {}
- name: KubeadmControlPlane
  endpoint:
    path: /path/to/kubeadmcontrolplane
    method: GET
    data_selector: items
    params: {}
- name: ClusterClass
  endpoint:
    path: /clusterclasses
    method: GET
    data_selector: items
    params: {}
- name: Cluster
  endpoint:
    path: /clusters
    method: GET
    data_selector: items
    params: {}
- name: ClusterClass
  endpoint:
    path: /ClusterClass
    method: GET
    data_selector: items
- name: DockerMachineTemplate
  endpoint:
    path: /DockerMachineTemplate
    method: GET
    data_selector: items
- name: KubeadmConfigTemplate
  endpoint:
    path: /KubeadmConfigTemplate
    method: GET
    data_selector: items
- name: BeforeClusterCreate
  endpoint:
    path: /hooks/runtime/cluster.x-k8s.io/v1alpha1/BeforeClusterCreate
    method: POST
    data_selector: settings, cluster
    params: {}
- name: AfterControlPlaneInitialized
  endpoint:
    path: /hooks/runtime/cluster.x-k8s.io/v1alpha1/AfterControlPlaneInitialized
    method: POST
    data_selector: settings, cluster
    params: {}
- name: BeforeClusterUpgrade
  endpoint:
    path: /hooks/runtime/cluster.x-k8s.io/v1alpha1/BeforeClusterUpgrade
    method: POST
    data_selector: settings, cluster, fromKubernetesVersion, toKubernetesVersion
    params: {}
- name: AfterControlPlaneUpgrade
  endpoint:
    path: /hooks/runtime/cluster.x-k8s.io/v1alpha1/AfterControlPlaneUpgrade
    method: POST
    data_selector: settings, cluster, kubernetesVersion
    params: {}
- name: AfterClusterUpgrade
  endpoint:
    path: /hooks.runtime.cluster.x-k8s.io/v1alpha1/AfterClusterUpgrade
    method: POST
    data_selector: settings, cluster, kubernetesVersion
    params: {}
- name: BeforeClusterDelete
  endpoint:
    path: /hooks/runtime/cluster.x-k8s.io/v1alpha1/BeforeClusterDelete
    method: POST
    data_selector: settings, cluster
    params: {}
- name: DiscoverVariablesRequest
  endpoint:
    path: /hooks/runtime/cluster/x-k8s.io/v1alpha1/DiscoverVariablesRequest
    method: POST
    data_selector: variables
- name: DiscoverVariablesResponse
  endpoint:
    path: /hooks/runtime/cluster/x-k8s.io/v1alpha1/DiscoverVariablesResponse
    method: GET
    data_selector: variables
- name: metrics
  endpoint:
    path: /metrics
    method: GET
- name: pprof
  endpoint:
    path: /debug/pprof/*
    method: GET
- name: loglevel
  endpoint:
    path: /debug/flags/v
    method: PUT
- name: podSecurityStandard
  endpoint:
    path: /spec/template/spec/kubeadmConfigSpec/clusterConfiguration/apiServer/extraArgs
    method: add
    data_selector: value
    params: {}
- name: extraVolumes
  endpoint:
    path: /spec/template/spec/kubeadmConfigSpec/clusterConfiguration/apiServer/extraVolumes
    method: add
    data_selector: value
    params: {}
- name: files
  endpoint:
    path: /spec/template/spec/kubeadmConfigSpec/files
    method: add
    data_selector: valueFrom
    params: {}
- name: kubeadmcontrolplanes
  endpoint:
    path: /kubeadmcontrolplanes
    method: POST
- name: machinedeployments
  endpoint:
    path: /machinedeployments
    method: POST
- name: Cluster
  endpoint:
    path: /api/cluster
    method: GET
    data_selector: items
- name: MachineDeployment
  endpoint:
    path: /api/machinedeployments
    method: GET
    data_selector: items
- name: Machine
  endpoint:
    path: /machine
    method: GET
    data_selector: machines
    params: {}
- name: MachinePool
  endpoint:
    path: /machinepool
    method: GET
    data_selector: machinePools
    params: {}
- name: capi-controller-manager
  endpoint:
    path: /capi-controller-manager
    method: GET
    data_selector: logs
    params: {}
- name: capd-controller-manager
  endpoint:
    path: /capd-controller-manager
    method: GET
    data_selector: logs
    params: {}
- name: capi-kubeadm-bootstrap-controller-manager
  endpoint:
    path: /capi-kubeadm-bootstrap-controller-manager
    method: GET
    data_selector: logs
    params: {}
- name: capi-kubeadm-control-plane-controller-manager
  endpoint:
    path: /capi-kubeadm-control-plane-controller-manager
    method: GET
    data_selector: logs
    params: {}
- name: MailgunCluster
  endpoint:
    path: /api/v1alpha1/mailgunclusters
    method: POST
    data_selector: MailgunClusterSpec
- name: MailgunMachine
  endpoint:
    path: /api/v1alpha1/mailgunmachines
    method: POST
    data_selector: MailgunMachineSpec
- name: mailgun_cluster
  endpoint:
    path: /v1/mailgun/cluster
    method: POST
- name: fooclusters
  endpoint:
    path: /fooclusters
    method: GET
- name: fooclustertemplates
  endpoint:
    path: /fooclustertemplates
    method: GET
- name: InfraMachine
  endpoint:
    path: /infra-machines
    method: GET
- name: InfraMachineTemplate
  endpoint:
    path: /infra-machine-templates
    method: GET
- name: BootstrapConfig
  endpoint:
    path: /bootstrapconfig
    method: GET
    data_selector: items
- name: ControlPlane
  endpoint:
    path: /controlplane
    method: GET
    data_selector: items
- name: controlPlane
  endpoint:
    path: /controlPlane
    method: GET
    data_selector: controlPlane
- name: FooControlPlaneTemplate
  endpoint:
    path: /FooControlPlaneTemplate
    method: GET
    data_selector: items
- name: FooControlPlaneTemplateList
  endpoint:
    path: /FooControlPlaneTemplateList
    method: GET
    data_selector: items
- name: vpc
  endpoint:
    path: /v1/vpcs
    method: GET
- name: VM
  endpoint:
    path: /RPC2
    method: POST
    data_selector: result
    params:
      user: oneadmin
      password: opennebula
- name: scaleway-secret
  endpoint:
    path: /api/v1/namespaces/kube-system/secrets
    method: POST
    data_selector: metadata
    params: {}
- name: MicroK8sControlPlane
  endpoint:
    path: /api/v1beta2/microk8scontrolplanes
    method: POST
    data_selector: spec
    params: {}
- name: MachineDeployment
  endpoint:
    path: /api/v1beta2/machinedeployments
    method: POST
    data_selector: spec
    params: {}
- name: KubeadmConfig
  endpoint:
    path: /kubeadm/config
    method: GET
- name: MachineTemplate
  endpoint:
    path: /machine/template
    method: POST
- name: MachineDeployment
  endpoint:
    path: /machine/deployment
    method: PATCH
- name: MachineDeployment
  endpoint:
    path: /api/v1/MachineDeployment
    method: POST
    data_selector: items
    params: {}
- name: MachineSet
  endpoint:
    path: /api/v1/MachineSet
    method: POST
    data_selector: items
    params: {}
- name: MachineHealthCheck
  endpoint:
    path: /api/v1/machinehealthchecks
    method: GET
    data_selector: items
- name: KubeadmControlPlane
  endpoint:
    path: /api/v1/kubeadmcontrolplanes
    method: GET
    data_selector: items
- name: ClusterClass
  endpoint:
    path: /clusterclass
    method: GET
    data_selector: items
    params: {}
- name: Cluster
  endpoint:
    path: /cluster
    method: GET
    data_selector: items
    params: {}
- name: customImage
  endpoint:
    path: /spec/template/spec/customImage
    method: add
    data_selector: valueFrom.template
    params: {}
- name: httpProxy
  endpoint:
    path: /spec/template/spec/httpProxy/url
    method: add
    data_selector: valueFrom.variable
    params: {}
- name: mdConfig
  endpoint:
    path: /spec/template/spec/customImage
    method: add
    data_selector: valueFrom.template
    params: {}
- name: dnsServers
  endpoint:
    path: /spec/template/spec/dnsServers
    method: add
    data_selector: valueFrom.variable
    params: {}
- name: dnsServer
  endpoint:
    path: /spec/template/spec/dnsServer
    method: add
    data_selector: valueFrom.variable
    params: {}
- name: etcdImageTag
  endpoint:
    path: /spec/template/spec/kubeadmConfigSpec/clusterConfiguration/etcd
    method: add
    data_selector: valueFrom.template
    params: {}
- name: imageRepository
  endpoint:
    path: /spec/template/spec/kubeadmConfigSpec/clusterConfiguration/imageRepository
    method: add
    data_selector: value
    params: {}
- name: metrics
  endpoint:
    path: /metrics
    method: GET
- name: pprof
  endpoint:
    path: /debug/pprof/*
    method: GET
- name: log_level
  endpoint:
    path: /debug/flags/v
    method: PUT
- name: podSecurityStandard
  endpoint:
    path: /spec/template/spec/kubeadmConfigSpec/clusterConfiguration/apiServer/extraArgs
    method: add
    data_selector: value
    params:
      admission-control-config-file: /etc/kubernetes/kube-apiserver-admission-pss.yaml
- name: extraVolumes
  endpoint:
    path: /spec/template/spec/kubeadmConfigSpec/clusterConfiguration/apiServer/extraVolumes
    method: add
    data_selector: value
    params:
      name: admission-pss
      hostPath: /etc/kubernetes/kube-apiserver-admission-pss.yaml
      mountPath: /etc/kubernetes/kube-apiserver-admission-pss.yaml
      readOnly: true
      pathType: File
- name: files
  endpoint:
    path: /spec/template/spec/kubeadmConfigSpec/files
    method: add
    data_selector: valueFrom.template
    params:
      content: "apiVersion: apiserver.config.k8s.io/v1\nkind: AdmissionConfiguration\n\
        plugins:\n- name: PodSecurity\n  configuration:\n    apiVersion: pod-security.admission.config.k8s.io/v1\n\
        \    kind: PodSecurityConfiguration\n    defaults:\n      enforce: \"{{ .podSecurity.enforce\
        \ }}\"\n      enforce-version: \"latest\"\n      audit: \"{{ .podSecurity.audit\
        \ }}\"\n      audit-version: \"latest\"\n      warn: \"{{ .podSecurity.warn\
        \ }}\"\n      warn-version: \"latest\"\n    exemptions:\n      usernames:\
        \ []\n      runtimeClasses: []\n      namespaces: [kube-system]"
      path: /etc/kubernetes/kube-apiserver-admission-pss.yaml
- name: kubeadmcontrolplanes
  endpoint:
    path: /clusterctl/alpha/rollout/kubeadmcontrolplanes
    method: GET
    data_selector: resources
- name: machinedeployments
  endpoint:
    path: /clusterctl/alpha/rollout/machinedeployments
    method: GET
    data_selector: resources
- name: Cluster
  endpoint:
    path: /api/v1/cluster
    method: GET
    data_selector: items
    params: {}
- name: Machine
  endpoint:
    path: /api/v1/machine
    method: GET
    data_selector: items
    params: {}
- name: MachineSet
  endpoint:
    path: /api/v1/machineset
    method: GET
    data_selector: items
    params: {}
- name: MachineDeployment
  endpoint:
    path: /api/v1/machinedeployment
    method: GET
    data_selector: items
    params: {}
- name: Machine
  endpoint:
    path: /api/v1/machines
    method: GET
    data_selector: items
- name: MachinePool
  endpoint:
    path: /api/v1/machinepools
    method: GET
    data_selector: items
- name: cluster_logs
  endpoint:
    path: /capi-controller-manager
    method: GET
    data_selector: msg
- name: provider_logs
  endpoint:
    path: /capd-controller-manager|capi-kubeadm-bootstrap-controller-manager|capi-kubeadm-control-plane-controller-manager
    method: GET
    data_selector: msg
- name: MailgunCluster
  endpoint:
    path: /clusters
    method: POST
    data_selector: data
- name: MailgunMachine
  endpoint:
    path: /machines
    method: POST
    data_selector: data
- name: mailgun_cluster
  endpoint:
    path: /clusters
    method: POST
    data_selector: data
    params: {}
- name: fooclusters
  endpoint:
    path: /fooclusters
    method: GET
    data_selector: items
- name: fooclustertemplates
  endpoint:
    path: /fooclustertemplates
    method: GET
    data_selector: items
- name: InfraMachine
  endpoint:
    path: /developer/providers/contracts/infra-machine#inframachine-inframachinelist-resource-definition
    method: GET
    data_selector: records
- name: InfraMachineTemplate
  endpoint:
    path: /developer/providers/contracts/infra-machine#inframachinetemplate-inframachinetemplatelist-resource-definition
    method: GET
    data_selector: records
- name: FooControlPlaneSpec
  endpoint:
    path: /services/data/vXX.X/sobjects/FooControlPlaneSpec
    method: GET
    data_selector: records
- name: FooControlPlaneStatus
  endpoint:
    path: /services/data/vXX.X/sobjects/FooControlPlaneStatus
    method: GET
    data_selector: records
- name: metadata_yaml
  endpoint:
    path: /metadata/yaml
    method: GET
    data_selector: releaseSeries
- name: cluster
  endpoint:
    path: /cluster
    method: GET
- name: scaleway-secret
  endpoint:
    path: /v1/secret
    method: POST
    data_selector: secret
    params: {}
- name: MicroK8sControlPlane
  endpoint:
    path: /api/v1beta1/microk8scontrolplanes
    method: GET
    data_selector: items
    params: {}
- name: MachineDeployment
  endpoint:
    path: /api/v1beta1/machinedeployments
    method: GET
    data_selector: items
    params: {}
- name: KubeadmControlPlane
  endpoint:
    path: /kubeadmcontrolplanes
    method: GET
    data_selector: items
- name: MachineDeployment
  endpoint:
    path: /machinedeployments
    method: GET
    data_selector: items
- name: MachineHealthCheck
  endpoint:
    path: /machinehealthchecks
    method: GET
    data_selector: items
- name: MachineDeployment
  endpoint:
    path: /v1alpha4/machinedeployments
    method: GET
    data_selector: items
    params: {}
- name: Cluster
  endpoint:
    path: /v1beta1/clusters
    method: GET
    data_selector: items
    params: {}
- name: MachineHealthCheck
  endpoint:
    path: /machinehealthchecks
    method: GET
    data_selector: items
- name: ClusterClass
  endpoint:
    path: /cluster.x-k8s.io/v1beta2
    method: GET
    data_selector: items
    params: {}
- name: Cluster
  endpoint:
    path: /cluster.x-k8s.io/v1beta2
    method: GET
    data_selector: items
    params: {}
- name: customImage
  endpoint:
    path: /spec/template/spec/customImage
    method: add
    data_selector: ''
    params: {}
- name: httpProxy
  endpoint:
    path: /spec/template/spec/httpProxy/url
    method: add
    data_selector: ''
    params: {}
- name: mdConfig
  endpoint:
    path: /spec/template/spec/customImage
    method: add
    data_selector: ''
    params: {}
- name: dnsServers
  endpoint:
    path: /spec/template/spec/dnsServers
    method: add
    data_selector: ''
    params: {}
- name: dnsServer
  endpoint:
    path: /spec/template/spec/dnsServer
    method: add
    data_selector: ''
    params: {}
- name: etcdImageTag
  endpoint:
    path: /spec/template/spec/kubeadmConfigSpec/clusterConfiguration/etcd
    method: add
    data_selector: ''
    params: {}
- name: imageRepository
  endpoint:
    path: /spec/template/spec/kubeadmConfigSpec/clusterConfiguration/imageRepository
    method: add
    data_selector: ''
    params: {}
- name: metrics
  endpoint:
    path: /metrics
    method: GET
    data_selector: metrics
    params: {}
- name: pprof
  endpoint:
    path: /debug/pprof/*
    method: GET
    data_selector: pprof
    params: {}
- name: log_level
  endpoint:
    path: /debug/flags/v
    method: PUT
    data_selector: log_level
    params: {}
- name: podSecurityStandard
  endpoint:
    path: /spec/template/spec/kubeadmConfigSpec/clusterConfiguration/apiServer/extraArgs
    method: add
    data_selector: admission-control-config-file
    params: {}
- name: kubeadmcontrolplanes
  endpoint:
    path: /kubeadmcontrolplanes
    method: POST
- name: machinedeployments
  endpoint:
    path: /machinedeployments
    method: POST
- name: capd-controller-manager
  endpoint:
    path: /capd-controller-manager
    method: GET
    data_selector: records
- name: capi-kubeadm-bootstrap-controller-manager
  endpoint:
    path: /capi-kubeadm-bootstrap-controller-manager
    method: GET
    data_selector: records
- name: capi-kubeadm-control-plane-controller-manager
  endpoint:
    path: /capi-kubeadm-control-plane-controller-manager
    method: GET
    data_selector: records
- name: capi-controller-manager
  endpoint:
    path: /capi-controller-manager
    method: GET
    data_selector: records
- name: cert-manager
  endpoint:
    path: /cert-manager
    method: GET
    data_selector: records
- name: cert-manager-cainjector
  endpoint:
    path: /cert-manager-cainjector
    method: GET
    data_selector: records
- name: cert-manager-webhook
  endpoint:
    path: /cert-manager-webhook
    method: GET
    data_selector: records
- name: Cluster
  endpoint:
    path: /api/cluster
    method: GET
    data_selector: clusters
- name: Machine
  endpoint:
    path: /api/machine
    method: GET
    data_selector: machines
- name: MachineSet
  endpoint:
    path: /api/machinesets
    method: GET
    data_selector: machinesets
- name: MachineDeployment
  endpoint:
    path: /api/machinedeployments
    method: GET
    data_selector: machinedeployments
- name: Machine
  endpoint:
    path: /api/machine
    method: GET
    data_selector: machines
- name: MachinePool
  endpoint:
    path: /api/machinepool
    method: GET
    data_selector: machinePools
- name: MailgunCluster
  endpoint:
    path: /apis/infrastructure.cluster.x-k8s.io/v1alpha1/mailgunclusters
    method: GET
    data_selector: items
- name: MailgunMachine
  endpoint:
    path: /apis/infrastructure.cluster.x-k8s.io/v1alpha1/mailgunmachines
    method: GET
    data_selector: items
- name: mailgun_cluster
  endpoint:
    path: /v3/clusters
    method: POST
    data_selector: cluster
    params: {}
- name: fooclusters
  endpoint:
    path: /fooclusters
    method: GET
    data_selector: items
- name: fooclustertemplates
  endpoint:
    path: /fooclustertemplates
    method: GET
    data_selector: items
- name: InfraMachine
  endpoint:
    path: /inframachines
    method: GET
    data_selector: items
- name: InfraMachineTemplate
  endpoint:
    path: /inframachinetemplates
    method: GET
    data_selector: items
- name: Cluster
  endpoint:
    path: /api/v1beta2/cluster
    method: GET
- name: FooControlPlaneTemplate
  endpoint:
    path: ''
    method: ''
    data_selector: ''
    params: {}
- name: FooControlPlaneTemplateList
  endpoint:
    path: ''
    method: ''
    data_selector: ''
    params: {}
- name: management_cluster
  endpoint:
    path: /management-cluster
    method: POST
    data_selector: created
- name: vpc
  endpoint:
    path: /v1/vpcs
    method: GET
- name: workload_cluster
  endpoint:
    path: /v1/cluster
    method: POST
    data_selector: cluster
    params: {}
- name: secret
  endpoint:
    path: /v1/secret
    method: POST
    data_selector: data
    params: {}
- name: KubeadmConfig
  endpoint:
    path: /kubeadmconfig
    method: GET
    data_selector: items
    params: {}
- name: DockerCluster
  endpoint:
    path: /dockercluster
    method: GET
    data_selector: items
    params: {}
- name: Machine
  endpoint:
    path: /machine
    method: GET
    data_selector: items
    params: {}
- name: MicroK8sControlPlane
  endpoint:
    path: /api/v1beta1/microk8scontrolplanes
    method: GET
    data_selector: items
    params: {}
- name: MachineDeployment
  endpoint:
    path: /api/v1beta2/machinedeployments
    method: GET
    data_selector: items
    params: {}
- name: MicroK8sConfigTemplate
  endpoint:
    path: /api/v1beta1/microk8sconfigtemplates
    method: GET
    data_selector: items
    params: {}
- name: KubeadmControlPlane
  endpoint:
    path: /kubeadmcontrolplane
    method: GET
    data_selector: spec
    params: {}
- name: MachineDeployment
  endpoint:
    path: /machinedeployment
    method: GET
    data_selector: spec
    params: {}
- name: MachineHealthCheck
  endpoint:
    path: /machinehealthcheck
    method: GET
    data_selector: spec
    params: {}
- name: MachineDeployment
  endpoint:
    path: /v1beta1/machinedeployments
    method: GET
    data_selector: items
    params: {}
- name: MachineSet
  endpoint:
    path: /v1beta1/machinesets
    method: GET
    data_selector: items
    params: {}
- name: MachinePool
  endpoint:
    path: /v1beta1/machinepools
    method: GET
    data_selector: items
    params: {}
- name: MachineHealthCheck
  endpoint:
    path: /api/v1beta2/machinehealthchecks
    method: GET
    data_selector: items
    params: {}
- name: MachinePool
  endpoint:
    path: /tasks/experimental-features/machine-pools
    method: GET
    data_selector: MachinePool
    params: {}
- name: ClusterClass
  endpoint:
    path: /tasks/experimental-features/cluster-class/
    method: GET
    data_selector: ClusterClass
    params: {}
- name: MachineSetPreflightChecks
  endpoint:
    path: /tasks/experimental-features/machineset-preflight-checks
    method: GET
    data_selector: MachineSetPreflightChecks
    params: {}
- name: ClusterClass
  endpoint:
    path: /cluster.x-k8s.io/v1beta2/ClusterClass
    method: GET
- name: Cluster
  endpoint:
    path: /cluster.x-k8s.io/v1beta2/Cluster
    method: GET
- name: customImage
  endpoint:
    path: /spec/template/spec/customImage
    method: PATCH
    data_selector: valueFrom.template
    params: {}
- name: httpProxy
  endpoint:
    path: /spec/template/spec/httpProxy/url
    method: PATCH
    data_selector: valueFrom.variable
    params: {}
- name: mdConfig
  endpoint:
    path: /spec/template/spec/customImage
    method: PATCH
    data_selector: valueFrom.template
    params: {}
- name: dnsServers
  endpoint:
    path: /spec/template/spec/dnsServers
    method: PATCH
    data_selector: valueFrom.variable
    params: {}
- name: dnsServer
  endpoint:
    path: /spec/template/spec/dnsServer
    method: PATCH
    data_selector: valueFrom.variable
    params: {}
- name: etcdImageTag
  endpoint:
    path: /spec/template/spec/kubeadmConfigSpec/clusterConfiguration/etcd
    method: PATCH
    data_selector: valueFrom.template
    params: {}
- name: imageRepository
  endpoint:
    path: /spec/template/spec/kubeadmConfigSpec/clusterConfiguration/imageRepository
    method: PATCH
    data_selector: value
    params: {}
- name: cluster
  endpoint:
    path: /clusters
    method: PATCH
    data_selector: spec.topology
    params: {}
- name: BeforeClusterCreate
  endpoint:
    path: /before-cluster-create
    method: POST
    data_selector: status
    params: {}
- name: AfterControlPlaneInitialized
  endpoint:
    path: /after-control-plane-initialized
    method: POST
    data_selector: status
    params: {}
- name: BeforeClusterUpgrade
  endpoint:
    path: /before-cluster-upgrade
    method: POST
    data_selector: status
    params: {}
- name: AfterControlPlaneUpgrade
  endpoint:
    path: /after-control-plane-upgrade
    method: POST
    data_selector: status
    params: {}
- name: AfterClusterUpgrade
  endpoint:
    path: /after-cluster-upgrade
    method: POST
    data_selector: status
    params: {}
- name: BeforeClusterDelete
  endpoint:
    path: /before-cluster-delete
    method: POST
    data_selector: status
    params: {}
- name: DiscoverVariablesRequest
  endpoint:
    path: /v1alpha1/DiscoverVariablesRequest
    method: GET
    data_selector: variables
    params: {}
- name: DiscoverVariablesResponse
  endpoint:
    path: /v1alpha1/DiscoverVariablesResponse
    method: GET
    data_selector: variables
    params: {}
- name: metrics
  endpoint:
    path: /metrics
    method: GET
    data_selector: metrics
    params: {}
- name: pprof
  endpoint:
    path: /debug/pprof
    method: GET
    data_selector: profiles
    params: {}
- name: log_level
  endpoint:
    path: /debug/flags/v
    method: PUT
    data_selector: log_level
    params: {}
- name: podSecurityStandard
  endpoint:
    path: /spec/template/spec/kubeadmConfigSpec/clusterConfiguration/apiServer/extraArgs
    method: add
    data_selector: value
    params:
      admission-control-config-file: /etc/kubernetes/kube-apiserver-admission-pss.yaml
- name: extraVolumes
  endpoint:
    path: /spec/template/spec/kubeadmConfigSpec/clusterConfiguration/apiServer/extraVolumes
    method: add
    data_selector: value
    params:
      name: admission-pss
      hostPath: /etc/kubernetes/kube-apiserver-admission-pss.yaml
      mountPath: /etc/kubernetes/kube-apiserver-admission-pss.yaml
      readOnly: true
      pathType: File
- name: files
  endpoint:
    path: /spec/template/spec/kubeadmConfigSpec/files
    method: add
    data_selector: valueFrom.template
    params:
      content: "apiVersion: apiserver.config.k8s.io/v1\nkind: AdmissionConfiguration\n\
        plugins:\n- name: PodSecurity\n  configuration:\n    apiVersion: pod-security.admission.config.k8s.io/v1\n\
        \    kind: PodSecurityConfiguration\n    defaults:\n      enforce: \"{{ .podSecurity.enforce\
        \ }}\"\n      enforce-version: \"latest\"\n      audit: \"{{ .podSecurity.audit\
        \ }}\"\n      audit-version: \"latest\"\n      warn: \"{{ .podSecurity.warn\
        \ }}\"\n      warn-version: \"latest\"\n    exemptions:\n      usernames:\
        \ []\n      runtimeClasses: []\n      namespaces: [kube-system]"
      path: /etc/kubernetes/kube-apiserver-admission-pss.yaml
- name: generate_cluster
  endpoint:
    path: /generate/cluster
    method: POST
- name: generate_provider
  endpoint:
    path: /generate/provider
    method: POST
- name: generate_yaml
  endpoint:
    path: /generate/yaml
    method: POST
- name: get_kubeconfig
  endpoint:
    path: /get/kubeconfig
    method: GET
- name: describe_cluster
  endpoint:
    path: /describe/cluster
    method: GET
- name: move
  endpoint:
    path: /move
    method: POST
- name: upgrade
  endpoint:
    path: /upgrade
    method: POST
- name: delete
  endpoint:
    path: /delete
    method: DELETE
- name: kubeadmcontrolplanes
  endpoint:
    path: /kubeadmcontrolplanes
    method: GET
    data_selector: records
- name: machinedeployments
  endpoint:
    path: /machinedeployments
    method: GET
    data_selector: records
- name: Cluster
  endpoint:
    path: /clusters
    method: GET
    data_selector: clusters
    params: {}
- name: Machine
  endpoint:
    path: /machines
    method: GET
    data_selector: machines
    params: {}
- name: Machine
  endpoint:
    path: /api/v1/machines
    method: GET
    data_selector: items
- name: MachinePool
  endpoint:
    path: /api/v1/machinepools
    method: GET
    data_selector: items
- name: capi-controller-manager
  endpoint:
    path: /services/data/vXX.X/sobjects/capi-controller-manager
    method: GET
    data_selector: records
- name: capd-controller-manager
  endpoint:
    path: /services/data/vXX.X/sobjects/capd-controller-manager
    method: GET
    data_selector: records
- name: capi-kubeadm-bootstrap-controller-manager
  endpoint:
    path: /services/data/vXX.X/sobjects/capi-kubeadm-bootstrap-controller-manager
    method: GET
    data_selector: records
- name: capi-kubeadm-control-plane-controller-manager
  endpoint:
    path: /services/data/vXX.X/sobjects/capi-kubeadm-control-plane-controller-manager
    method: GET
    data_selector: records
- name: MailgunCluster
  endpoint:
    path: /api/v1alpha1/mailgunclusters
    method: GET
    data_selector: items
    params: {}
- name: MailgunMachine
  endpoint:
    path: /api/v1alpha1/mailgunmachines
    method: GET
    data_selector: items
    params: {}
- name: MailgunCluster
  endpoint:
    path: /clusters
    method: POST
    data_selector: data
    params: {}
- name: FooCluster
  endpoint:
    path: /fooclusters
    method: POST
    data_selector: items
    params: {}
- name: FooClusterList
  endpoint:
    path: /fooclusters
    method: GET
    data_selector: items
    params: {}
- name: FooClusterTemplate
  endpoint:
    path: /fooclustertemplates
    method: POST
    data_selector: items
    params: {}
- name: FooClusterTemplateList
  endpoint:
    path: /fooclustertemplates
    method: GET
    data_selector: items
    params: {}
- name: InfraMachine
  endpoint:
    path: /infraMachines
    method: GET
    data_selector: items
    params: {}
- name: InfraMachineList
  endpoint:
    path: /infraMachineLists
    method: GET
    data_selector: items
    params: {}
- name: InfraMachineTemplate
  endpoint:
    path: /infraMachineTemplates
    method: GET
    data_selector: items
    params: {}
- name: InfraMachineTemplateList
  endpoint:
    path: /infraMachineTemplateLists
    method: GET
    data_selector: items
    params: {}
- name: FooControlPlane
  endpoint:
    path: /controlPlane
    method: GET
    data_selector: status
    params: {}
- name: FooControlPlaneTemplate
  endpoint:
    path: /FooControlPlaneTemplate
    method: GET
    data_selector: records
    params: {}
- name: FooControlPlaneTemplateList
  endpoint:
    path: /FooControlPlaneTemplateList
    method: GET
    data_selector: items
    params: {}
- name: CABPK
  endpoint:
    path: cluster.x-k8s.io/provider=bootstrap-kubeadm
    method: GET
- name: CABPM
  endpoint:
    path: cluster.x-k8s.io/provider=bootstrap-microk8s
    method: GET
- name: CABPKK3S
  endpoint:
    path: cluster.x-k8s.io/provider=bootstrap-kubekey-k3s
    method: GET
- name: CABPK0S
  endpoint:
    path: cluster.x-k8s.io/provider=bootstrap-k0smotron
    method: GET
- name: CACPK
  endpoint:
    path: cluster.x-k8s.io/provider=control-plane-kubeadm
    method: GET
- name: CACPM
  endpoint:
    path: cluster.x-k8s.io/provider=control-plane-microk8s
    method: GET
- name: CACPN
  endpoint:
    path: cluster.x-k8s.io/provider=control-plane-nested
    method: GET
- name: CACPKK3S
  endpoint:
    path: cluster.x-k8s.io/provider=control-plane-kubekey-k3s
    method: GET
- name: CACPK0S
  endpoint:
    path: cluster.x-k8s.io/provider=control-plane-k0smotron
    method: GET
- name: CAPA
  endpoint:
    path: cluster.x-k8s.io/provider=infrastructure-aws
    method: GET
- name: CAPB
  endpoint:
    path: cluster.x-k8s.io/provider=infrastructure-byoh
    method: GET
- name: CAPC
  endpoint:
    path: cluster.x-k8s.io/provider=infrastructure-cloudstack
    method: GET
- name: CAPD
  endpoint:
    path: cluster.x-k8s.io/provider=infrastructure-docker
    method: GET
- name: CAPDO
  endpoint:
    path: cluster.x-k8s.io/provider=infrastructure-digitalocean
    method: GET
- name: CAPG
  endpoint:
    path: cluster.x-k8s.io/provider=infrastructure-gcp
    method: GET
- name: CAPH
  endpoint:
    path: cluster.x-k8s.io/provider=infrastructure-hetzner
    method: GET
- name: CAPHV
  endpoint:
    path: cluster.x-k8s.io/provider=infrastructure-hivelocity
    method: GET
- name: CAPHW
  endpoint:
    path: cluster.x-k8s.io/provider=infrastructure-huawei
    method: GET
- name: CAPIBM
  endpoint:
    path: cluster.x-k8s.io/provider=infrastructure-ibmcloud
    method: GET
- name: CAPKK
  endpoint:
    path: cluster.x-k8s.io/provider=infrastructure-kubekey
    method: GET
- name: CAPK
  endpoint:
    path: cluster.x-k8s.io/provider=infrastructure-kubevirt
    method: GET
- name: CAPM3
  endpoint:
    path: cluster.x-k8s.io/provider=infrastructure-metal3
    method: GET
- name: CAPN
  endpoint:
    path: cluster.x-k8s.io/provider=infrastructure-nested
    method: GET
- name: CAPONE
  endpoint:
    path: cluster.x-k8s.io/provider=infrastructure-opennebula
    method: GET
- name: CAPO
  endpoint:
    path: cluster.x-k8s.io/provider=infrastructure-openstack
    method: GET
- name: CAPOCI
  endpoint:
    path: cluster.x-k8s.io/provider=infrastructure-oci
    method: GET
- name: CAPS
  endpoint:
    path: cluster.x-k8s.io/provider=infrastructure-scaleway
    method: GET
- name: CAPT
  endpoint:
    path: cluster.x-k8s.io/provider=infrastructure-tinkerbell
    method: GET
- name: CAPV
  endpoint:
    path: cluster.x-k8s.io/provider=infrastructure-vsphere
    method: GET
- name: CAPVC
  endpoint:
    path: cluster.x-k8s.io/provider=infrastructure-vcluster
    method: GET
- name: CAPVCD
  endpoint:
    path: cluster.x-k8s.io/provider=infrastructure-vcd
    method: GET
- name: CAPX
  endpoint:
    path: cluster.x-k8s.io/provider=infrastructure-nutanix
    method: GET
- name: CAPZ
  endpoint:
    path: cluster.x-k8s.io/provider=infrastructure-azure
    method: GET
- name: CAPOSC
  endpoint:
    path: cluster.x-k8s.io/provider=infrastructure-outscale
    method: GET
- name: CAPK0S
  endpoint:
    path: cluster.x-k8s.io/provider=infrastructure-k0smotron
    method: GET
- name: CAIPAMIC
  endpoint:
    path: cluster.x-k8s.io/provider=ipam-in-cluster
    method: GET
- name: CAIPAMX
  endpoint:
    path: cluster.x-k8s.io/provider=ipam-nutanix
    method: GET
- name: CAIPAM3
  endpoint:
    path: cluster.x-k8s.io/provider=ipam-metal3
    method: GET
- name: CAREX
  endpoint:
    path: cluster.x-k8s.io/provider=runtime-extensions-nutanix
    method: GET
- name: MachineDeployment
  endpoint:
    path: /apis/cluster.x-k8s.io/v1beta2/machinedeployments
    method: GET
    data_selector: items
- name: MachineSet
  endpoint:
    path: /apis/cluster.x-k8s.io/v1beta2/machinesets
    method: GET
    data_selector: items
- name: MachinePool
  endpoint:
    path: /apis/cluster.x-k8s.io/v1beta2/machinepools
    method: GET
    data_selector: items
- name: Machine
  endpoint:
    path: /machine
    method: GET
    data_selector: records
- name: MachineHealthCheck
  endpoint:
    path: /machinehealthcheck
    method: GET
    data_selector: records
- name: KubeadmControlPlane
  endpoint:
    path: /kubeadmcontrolplane
    method: GET
    data_selector: spec
    params: {}
- name: ClusterResourceSet
  endpoint:
    path: /v1beta1/ClusterResourceSet
    method: GET
- name: ClusterResourceSetBinding
  endpoint:
    path: /v1beta1/ClusterResourceSetBinding
    method: GET
- name: IPAddress
  endpoint:
    path: /v1beta1/IPAddress
    method: GET
- name: IPAddressClaim
  endpoint:
    path: /v1beta1/IPAddressClaim
    method: GET
- name: IBM VPC
  endpoint:
    path: /v1/vpc
    method: GET
    data_selector: resources
- name: IBM PowerVS
  endpoint:
    path: /v1/powervs
    method: GET
    data_selector: resources
- name: opennebula
  endpoint:
    path: /RPC2
    method: POST
    data_selector: response
    params: {}
- name: scaleway-secret
  endpoint:
    path: /kube-system/secrets/scaleway-secret
    method: POST
    data_selector: metadata
    params: {}
- name: MicroK8sControlPlane
  endpoint:
    path: /controlplane.cluster.x-k8s.io/v1beta1/MicroK8sControlPlane
    method: GET
    data_selector: spec
    params: {}
- name: MachineDeployment
  endpoint:
    path: /cluster.x-k8s.io/v1beta2/MachineDeployment
    method: GET
    data_selector: spec
    params: {}
- name: MicroK8sConfigTemplate
  endpoint:
    path: /bootstrap.cluster.x-k8s.io/v1beta1/MicroK8sConfigTemplate
    method: GET
    data_selector: spec
    params: {}
- name: KubeadmControlPlane
  endpoint:
    path: /kubeadmcontrolplanes
    method: GET
    data_selector: items
    params: {}
- name: MachineDeployment
  endpoint:
    path: /machinedeployments
    method: GET
    data_selector: items
    params: {}
- name: MachineHealthCheck
  endpoint:
    path: /cluster-api/machinehealthchecks
    method: POST
    data_selector: spec
    params: {}
- name: KubeadmControlPlane
  endpoint:
    path: /cluster-api/kubeadmcontrolplanes
    method: POST
    data_selector: spec
    params: {}
- name: cluster_class
  endpoint:
    path: /clusterclass
    method: GET
    data_selector: items
- name: cluster
  endpoint:
    path: /clusters
    method: GET
    data_selector: items
- name: clusterclass
  endpoint:
    path: /clusterclasses
    method: GET
    data_selector: items
- name: BeforeClusterCreate
  endpoint:
    path: /hooks/runtime/cluster.x-k8s.io/v1alpha1/BeforeClusterCreate
    method: POST
    data_selector: status
    params: {}
- name: AfterControlPlaneInitialized
  endpoint:
    path: /hooks/runtime/cluster.x-k8s.io/v1alpha1/AfterControlPlaneInitialized
    method: POST
    data_selector: status
    params: {}
- name: BeforeClusterUpgrade
  endpoint:
    path: /hooks/runtime/cluster.x-k8s.io/v1alpha1/BeforeClusterUpgrade
    method: POST
    data_selector: status
    params: {}
- name: AfterControlPlaneUpgrade
  endpoint:
    path: /hooks/runtime/cluster.x-k8s.io/v1alpha1/AfterControlPlaneUpgrade
    method: POST
    data_selector: status
    params: {}
- name: AfterClusterUpgrade
  endpoint:
    path: /hooks/runtime/cluster.x-k8s.io/v1alpha1/AfterClusterUpgrade
    method: POST
    data_selector: status
    params: {}
- name: BeforeClusterDelete
  endpoint:
    path: /hooks/runtime/cluster.x-k8s.io/v1alpha1/BeforeClusterDelete
    method: POST
    data_selector: status
    params: {}
- name: metrics
  endpoint:
    path: /metrics
    method: GET
- name: pprof
  endpoint:
    path: /debug/pprof/*
    method: GET
- name: loglevel
  endpoint:
    path: /debug/flags/v
    method: PUT
- name: podSecurityStandard
  endpoint:
    path: /spec/template/spec/kubeadmConfigSpec/clusterConfiguration/apiServer/extraArgs
    method: add
    data_selector: value
    params: {}
- name: admission-pss
  endpoint:
    path: /spec/template/spec/kubeadmConfigSpec/clusterConfiguration/apiServer/extraVolumes
    method: add
    data_selector: value
    params: {}
- name: files
  endpoint:
    path: /spec/template/spec/kubeadmConfigSpec/files
    method: add
    data_selector: valueFrom
    params: {}
- name: kubeadmcontrolplanes
  endpoint:
    path: /kubeadmcontrolplanes
    method: GET
- name: machinedeployments
  endpoint:
    path: /machinedeployments
    method: GET
- name: Cluster
  endpoint:
    path: /api/v1/clusters
    method: GET
    data_selector: clusters
- name: Machine
  endpoint:
    path: /api/v1/machines
    method: GET
    data_selector: machines
- name: MailgunCluster
  endpoint:
    path: /clusters
    method: POST
    data_selector: spec
    params: {}
- name: MailgunMachine
  endpoint:
    path: /machines
    method: POST
    data_selector: spec
    params: {}
- name: MailgunCluster
  endpoint:
    path: /clusters
    method: POST
    data_selector: cluster
    params: {}
- name: fooclusters
  endpoint:
    path: /fooclusters
    method: GET
    data_selector: items
- name: fooclustertemplates
  endpoint:
    path: /fooclustertemplates
    method: GET
    data_selector: items
- name: InfraMachine
  endpoint:
    path: /developer/providers/contracts/infra-machine#inframachine-inframachinelist-resource-definition
    method: GET
    data_selector: records
- name: InfraMachineList
  endpoint:
    path: /developer/providers/contracts/infra-machine#inframachine-inframachinelist-resource-definition
    method: GET
    data_selector: records
- name: InfraMachineTemplate
  endpoint:
    path: /developer/providers/contracts/infra-machine#inframachinetemplate-inframachinetemplatelist-resource-definition
    method: GET
    data_selector: records
- name: InfraMachineTemplateList
  endpoint:
    path: /developer/providers/contracts/infra-machine#inframachinetemplate-inframachinetemplatelist-resource-definition
    method: GET
    data_selector: records
- name: ControlPlane
  endpoint:
    path: /api/v1/controlplanes
    method: GET
    data_selector: items
- name: FooControlPlaneTemplate
  endpoint:
    path: /FooControlPlaneTemplate
    method: GET
    data_selector: items
    params: {}
- name: FooControlPlaneTemplateList
  endpoint:
    path: /FooControlPlaneTemplateList
    method: GET
    data_selector: items
    params: {}
- name: cluster_template
  endpoint:
    path: /cluster-template.yaml
    method: GET
    data_selector: objects
    params: {}
- name: clusterclass_definition
  endpoint:
    path: /clusterclass-{ClusterClass-name}.yaml
    method: GET
    data_selector: objects
    params: {}
- name: Cluster
  endpoint:
    path: /cluster
    method: GET
    data_selector: conditions
    params: {}
- name: MachineDeployment
  endpoint:
    path: /machinedeployment
    method: GET
    data_selector: conditions
    params: {}
- name: MachineSet
  endpoint:
    path: /machineset
    method: GET
    data_selector: conditions
    params: {}
- name: MachineSet
  endpoint:
    path: /cluster.x-k8s.io/v1beta2/MachineSet
    method: GET
    data_selector: conditions
    params: {}
- name: MachinePool
  endpoint:
    path: /cluster.x-k8s.io/v1beta2/MachinePool
    method: GET
    data_selector: conditions
    params: {}
- name: Machine
  endpoint:
    path: /cluster.x-k8s.io/v1beta2/Machine
    method: GET
    data_selector: conditions
    params: {}
- name: MachineHealthCheck
  endpoint:
    path: /cluster.x-k8s.io/v1beta2/MachineHealthCheck
    method: GET
    data_selector: conditions
    params: {}
- name: ClusterClass
  endpoint:
    path: /cluster.x-k8s.io/v1beta2/ClusterClass
    method: GET
    data_selector: conditions
    params: {}
- name: KubeadmConfig
  endpoint:
    path: /bootstrap.cluster.x-k8s.io/v1beta2/kubeadmconfigs
    method: GET
    data_selector: items
- name: KubeadmControlPlane
  endpoint:
    path: /controlplane.cluster.x-k8s.io/v1beta2/kubeadmcontrolplanes
    method: GET
    data_selector: items
- name: vpc
  endpoint:
    path: /v1/vpcs
    method: GET
    data_selector: vpcs
    params: {}
- name: workload_cluster
  endpoint:
    path: /RPC2
    method: POST
    data_selector: result
    params:
      MACHINE_TEMPLATE_NAME: capone131
      ROUTER_TEMPLATE_NAME: capone131-vr
      PUBLIC_NETWORK_NAME: service
      PRIVATE_NETWORK_NAME: private
      CLUSTER_NAME: one
      CCM_IMG: ghcr.io/opennebula/cloud-provider-opennebula:latest
      CONTROL_PLANE_MACHINE_COUNT: '1'
      WORKER_MACHINE_COUNT: '1'
- name: scaleway-secret
  endpoint:
    path: /api/v1/namespaces/kube-system/secrets/scaleway-secret
    method: GET
    data_selector: data
    params: {}
- name: MicroK8sControlPlane
  endpoint:
    path: /api/v1beta2/controlplane.cluster.x-k8s.io
    method: POST
    data_selector: controlPlaneConfig
    params: {}
- name: MachineDeployment
  endpoint:
    path: /api/v1beta2/machinedeployments
    method: POST
    data_selector: spec
    params: {}
- name: MachineDeployment
  endpoint:
    path: /api/v1/MachineDeployment
    method: POST
    data_selector: annotations
    params:
      cluster-api-autoscaler-node-group-max-size: '5'
      cluster-api-autoscaler-node-group-min-size: '0'
      capacity.cluster-autoscaler.kubernetes.io/memory: 128G
      capacity.cluster-autoscaler.kubernetes.io/cpu: '16'
      capacity.cluster-autoscaler.kubernetes.io/ephemeral-disk: 100Gi
      capacity.cluster-autoscaler.kubernetes.io/maxPods: '200'
      capacity.cluster-autoscaler.kubernetes.io/gpu-type: nvidia.com/gpu
      capacity.cluster-autoscaler.kubernetes.io/gpu-count: '2'
- name: MachineHealthCheck
  endpoint:
    path: /api/v1beta2/machinehealthchecks
    method: POST
    data_selector: spec
    params: {}
- name: KubeadmControlPlane
  endpoint:
    path: /api/v1beta2/kubeadmcontrolplanes
    method: POST
    data_selector: spec
    params: {}
- name: MachinePool
  endpoint:
    path: /tasks/experimental-features/machine-pools
    method: GET
    data_selector: records
    params: {}
- name: ClusterClass
  endpoint:
    path: /tasks/experimental-features/cluster-class/
    method: GET
    data_selector: records
    params: {}
- name: Ignition Bootstrap configuration
  endpoint:
    path: /tasks/experimental-features/ignition
    method: GET
    data_selector: records
    params: {}
- name: Runtime SDK
  endpoint:
    path: /tasks/experimental-features/runtime-sdk/
    method: GET
    data_selector: records
    params: {}
- name: ClusterClass
  endpoint:
    path: /clusterclasses
    method: GET
    data_selector: items
- name: Cluster
  endpoint:
    path: /clusters
    method: GET
    data_selector: items
- name: docker-clusterclass-v0.1.0
  endpoint:
    path: /clusterclasses/docker-clusterclass-v0.1.0
    method: GET
    data_selector: spec
    params: {}
- name: azure-clusterclass-v0.1.0
  endpoint:
    path: /clusterclasses/azure-clusterclass-v0.1.0
    method: GET
    data_selector: spec
    params: {}
- name: Cluster
  endpoint:
    path: /clusters
    method: PATCH
    data_selector: spec
    params: {}
- name: MachineDeployment
  endpoint:
    path: /machinedeployments
    method: PATCH
    data_selector: spec
    params: {}
- name: ExtensionConfig
  endpoint:
    path: /api/v1/namespaces/default/services/https:webhook-service:443/proxy/hooks.runtime.cluster.x-k8s.io/v1alpha1/discovery
    method: POST
    data_selector: items
- name: BeforeClusterCreate
  endpoint:
    path: /hooks/runtime/cluster.x-k8s.io/v1alpha1/BeforeClusterCreate
    method: POST
    data_selector: status
    params: {}
- name: AfterControlPlaneInitialized
  endpoint:
    path: /hooks/runtime/cluster.x-k8s.io/v1alpha1/AfterControlPlaneInitialized
    method: POST
    data_selector: status
    params: {}
- name: BeforeClusterUpgrade
  endpoint:
    path: /hooks/runtime/cluster.x-k8s.io/v1alpha1/BeforeClusterUpgrade
    method: POST
    data_selector: status
    params: {}
- name: AfterControlPlaneUpgrade
  endpoint:
    path: /hooks/runtime/cluster.x-k8s.io/v1alpha1/AfterControlPlaneUpgrade
    method: POST
    data_selector: status
    params: {}
- name: AfterClusterUpgrade
  endpoint:
    path: /hooks/runtime/cluster.x-k8s.io/v1alpha1/AfterClusterUpgrade
    method: POST
    data_selector: status
    params: {}
- name: BeforeClusterDelete
  endpoint:
    path: /hooks/runtime/cluster.x-k8s.io/v1alpha1/BeforeClusterDelete
    method: POST
    data_selector: status
    params: {}
- name: metrics
  endpoint:
    path: /metrics
    method: GET
- name: pprof
  endpoint:
    path: /debug/pprof/*
    method: GET
- name: loglevel
  endpoint:
    path: /debug/flags/v
    method: PUT
- name: ClusterClass
  endpoint:
    path: /cluster.x-k8s.io/v1beta2
    method: GET
    data_selector: spec.patches.definitions
    params: {}
- name: Cluster
  endpoint:
    path: /cluster.x-k8s.io/v1beta2
    method: GET
    data_selector: spec.topology.classRef
    params: {}
- name: kubeadmcontrolplanes
  endpoint:
    path: /alpha/rollout/kubeadmcontrolplanes
    method: POST
- name: machinedeployments
  endpoint:
    path: /alpha/rollout/machinedeployments
    method: POST
- name: bootstrap_data_secret
  endpoint:
    path: /bootstrap/data/secret
    method: POST
    data_selector: data
    params: {}
- name: conditions
  endpoint:
    path: /bootstrap/conditions
    method: GET
    data_selector: conditions
    params: {}
- name: terminal_failures
  endpoint:
    path: /bootstrap/terminal/failures
    method: GET
    data_selector: failures
    params: {}
- name: taint_nodes
  endpoint:
    path: /bootstrap/taint/nodes
    method: POST
    data_selector: taint
    params: {}
- name: sentinel_file
  endpoint:
    path: /bootstrap/sentinel/file
    method: CREATE
    data_selector: file
    params: {}
- name: MailgunCluster
  endpoint:
    path: /clusters
    method: POST
    data_selector: data
    params: {}
- name: MailgunMachine
  endpoint:
    path: /machines
    method: POST
    data_selector: data
    params: {}
- name: MailgunCluster
  endpoint:
    path: /clusters
    method: POST
    data_selector: data
- name: fooclusters
  endpoint:
    path: /fooclusters
    method: GET
    data_selector: items
- name: fooclustertemplates
  endpoint:
    path: /fooclustertemplates
    method: GET
    data_selector: items
- name: InfraMachine
  endpoint:
    path: /infra-machines
    method: GET
    data_selector: items
- name: InfraMachineTemplate
  endpoint:
    path: /infra-machine-templates
    method: GET
    data_selector: items
- name: BootstrapConfig
  endpoint:
    path: /bootstrapconfigs
    method: GET
    data_selector: items
- name: ControlPlane
  endpoint:
    path: /controlplanes
    method: GET
    data_selector: items
- name: FooControlPlaneTemplate
  endpoint:
    path: /fooControlPlaneTemplates
    method: GET
    data_selector: items
- name: FooControlPlaneTemplateList
  endpoint:
    path: /fooControlPlaneTemplateLists
    method: GET
    data_selector: items
- name: Cluster
  endpoint:
    path: /clusters
    method: GET
    data_selector: clusters
- name: MachineDeployment
  endpoint:
    path: /machinedeployments
    method: GET
    data_selector: machinedeployments
- name: MachineSet
  endpoint:
    path: /machinesets
    method: GET
    data_selector: machinesets
- name: MachineSet
  endpoint:
    path: /api/v1beta2/machinesets
    method: GET
    data_selector: items
    params: {}
- name: MachinePool
  endpoint:
    path: /api/v1beta2/machinepools
    method: GET
    data_selector: items
    params: {}
- name: Machine
  endpoint:
    path: /api/v1beta2/machines
    method: GET
    data_selector: items
    params: {}
- name: MachineHealthCheck
  endpoint:
    path: /api/v1beta2/machinehealthchecks
    method: GET
    data_selector: items
    params: {}
- name: ClusterClass
  endpoint:
    path: /api/v1/ClusterClass
    method: GET
    data_selector: items
    params: {}
- name: KubeadmConfig
  endpoint:
    path: /api/v1/KubeadmConfig
    method: GET
    data_selector: items
    params: {}
- name: KubeadmConfig
  endpoint:
    path: /kubeadmconfig
    method: GET
    data_selector: spec
    params: {}
- name: KubeadmControlPlane
  endpoint:
    path: /controlplane.cluster.x-k8s.io/v1beta2/kubeadmcontrolplanes
    method: GET
    data_selector: items
- name: annotations
  endpoint:
    path: /cluster/api/v1/annotations
    method: GET
    data_selector: annotations
    params: {}
- name: machines
  endpoint:
    path: /cluster/api/v1/machines
    method: GET
    data_selector: machines
    params: {}
- name: management_cluster
  endpoint:
    path: /init
    method: POST
    data_selector: cluster
- name: provider_components
  endpoint:
    path: /providers
    method: GET
    data_selector: providers
- name: vpc
  endpoint:
    path: /v1/vpcs
    method: GET
    data_selector: vpcs
    params: {}
- name: powerVS
  endpoint:
    path: /v1/power-vs
    method: GET
    data_selector: powerVS
    params: {}
- name: workload_clusters
  endpoint:
    path: /v1/workload_clusters
    method: GET
    data_selector: clusters
- name: scaleway-secret
  endpoint:
    path: /api/v1/namespaces/kube-system/secrets
    method: POST
    data_selector: metadata
    params: {}
- name: KubeadmConfig
  endpoint:
    path: /kubeadm-config
    method: GET
    data_selector: items
- name: DockerCluster
  endpoint:
    path: /docker-cluster
    method: GET
    data_selector: items
- name: Cluster
  endpoint:
    path: /clusters
    method: GET
    data_selector: items
- name: Machine
  endpoint:
    path: /machines
    method: GET
    data_selector: items
- name: MicroK8sControlPlane
  endpoint:
    path: /api/v1beta1/controlplane.cluster.x-k8s.io/microk8scontrolplanes
    method: GET
    data_selector: items
    params: {}
- name: MachineDeployment
  endpoint:
    path: /api/v1beta1/machinedeployments
    method: GET
    data_selector: items
    params: {}
- name: KubeadmControlPlane
  endpoint:
    path: /kubeadmcontrolplane
    method: POST
- name: MachineDeployment
  endpoint:
    path: /machinedeployment
    method: POST
- name: MachineHealthCheck
  endpoint:
    path: /machinehealthcheck
    method: POST
- name: MachineDeployment
  endpoint:
    path: /v1alpha4/MachineDeployment
    method: POST
    data_selector: items
    params: {}
- name: MachineSet
  endpoint:
    path: /v1alpha4/MachineSet
    method: POST
    data_selector: items
    params: {}
- name: MachinePool
  endpoint:
    path: /v1alpha4/MachinePool
    method: POST
    data_selector: items
    params: {}
- name: MachineHealthCheck
  endpoint:
    path: /api/v1beta2/machinehealthchecks
    method: GET
    data_selector: items
    params: {}
- name: KubeadmControlPlane
  endpoint:
    path: /api/v1beta2/kubeadmcontrolplanes
    method: GET
    data_selector: items
    params: {}
- name: ClusterClass
  endpoint:
    path: /clusterclass
    method: GET
    data_selector: items
- name: Cluster
  endpoint:
    path: /clusters
    method: GET
    data_selector: items
- name: ClusterClass
  endpoint:
    path: /clusterclass
    method: GET
    data_selector: items
- name: BeforeClusterCreate
  endpoint:
    path: /hooks/runtime/cluster.x-k8s.io/v1alpha1/beforeClusterCreate
    method: POST
    data_selector: status
    params: {}
- name: AfterControlPlaneInitialized
  endpoint:
    path: /hooks/runtime/cluster.x-k8s.io/v1alpha1/afterControlPlaneInitialized
    method: POST
    data_selector: status
    params: {}
- name: BeforeClusterUpgrade
  endpoint:
    path: /hooks/runtime/cluster.x-k8s.io/v1alpha1/beforeClusterUpgrade
    method: POST
    data_selector: status
    params: {}
- name: AfterControlPlaneUpgrade
  endpoint:
    path: /hooks/runtime/cluster.x-k8s.io/v1alpha1/afterControlPlaneUpgrade
    method: POST
    data_selector: status
    params: {}
- name: AfterClusterUpgrade
  endpoint:
    path: /hooks/runtime/cluster.x-k8s.io/v1alpha1/afterClusterUpgrade
    method: POST
    data_selector: status
    params: {}
- name: BeforeClusterDelete
  endpoint:
    path: /hooks/runtime/cluster.x-k8s.io/v1alpha1/beforeClusterDelete
    method: POST
    data_selector: status
    params: {}
- name: metrics
  endpoint:
    path: /metrics
    method: GET
    data_selector: metrics
    params: {}
- name: pprof
  endpoint:
    path: /debug/pprof
    method: GET
    data_selector: profiles
    params: {}
- name: log_level
  endpoint:
    path: /debug/flags/v
    method: PUT
    data_selector: log_level
    params: {}
- name: ClusterClass
  endpoint:
    path: /cluster.x-k8s.io/v1beta2
    method: GET
    data_selector: spec.patches
    params: {}
- name: Cluster
  endpoint:
    path: /cluster.x-k8s.io/v1beta2
    method: GET
    data_selector: metadata.name
    params: {}
- name: kubeadmcontrolplanes
  endpoint:
    path: /kubeadmcontrolplanes
    method: POST
- name: machinedeployments
  endpoint:
    path: /machinedeployments
    method: POST
- name: Cluster
  endpoint:
    path: /api/v1/clusters
    method: GET
    data_selector: clusters
- name: Machine
  endpoint:
    path: /api/v1/machines
    method: GET
    data_selector: machines
- name: MailgunCluster
  endpoint:
    path: /clusters
    method: POST
    data_selector: data
    params: {}
- name: MailgunMachine
  endpoint:
    path: /machines
    method: POST
    data_selector: data
    params: {}
- name: MailgunCluster
  endpoint:
    path: /v1/clusters
    method: POST
    data_selector: message
    params: {}
- name: fooclusters
  endpoint:
    path: /fooclusters
    method: GET
    data_selector: items
- name: fooclustertemplates
  endpoint:
    path: /fooclustertemplates
    method: GET
    data_selector: items
- name: InfraMachine
  endpoint:
    path: /developer/providers/contracts/infra-machine
    method: GET
    data_selector: resources
    params: {}
- name: InfraMachineList
  endpoint:
    path: /developer/providers/contracts/infra-machine-list
    method: GET
    data_selector: resources
    params: {}
- name: InfraMachineTemplate
  endpoint:
    path: /developer/providers/contracts/infra-machinetemplate
    method: GET
    data_selector: resources
    params: {}
- name: InfraMachineTemplateList
  endpoint:
    path: /developer/providers/contracts/infra-machinetemplatelist
    method: GET
    data_selector: resources
    params: {}
- name: FooControlPlane
  endpoint:
    path: /controlplane
    method: GET
    data_selector: controlPlane
    params: {}
- name: FooControlPlaneTemplate
  endpoint:
    path: /controlplanetemplates
    method: GET
    data_selector: controlPlaneTemplate
    params: {}
- name: FooControlPlaneTemplate
  endpoint:
    path: /FooControlPlaneTemplate
    method: GET
    data_selector: items
- name: FooControlPlaneTemplateList
  endpoint:
    path: /FooControlPlaneTemplateList
    method: GET
    data_selector: items
- name: cluster_template
  endpoint:
    path: /cluster-template.yaml
    method: GET
    data_selector: objects
    params: {}
- name: clusterclass_definition
  endpoint:
    path: /clusterclass-{ClusterClass-name}.yaml
    method: GET
    data_selector: objects
    params: {}
- name: Cluster
  endpoint:
    path: /cluster
    method: GET
    data_selector: metadata
    params: {}
- name: MachineDeployment
  endpoint:
    path: /machinedeployment
    method: GET
    data_selector: metadata
    params: {}
- name: MachineSet
  endpoint:
    path: /machineset
    method: GET
    data_selector: metadata
    params: {}
- name: MachineSet
  endpoint:
    path: /cluster/x-k8s.io/v1beta2/machinesets
    method: GET
- name: MachinePool
  endpoint:
    path: /cluster/x-k8s.io/v1beta2/machinepools
    method: GET
- name: Machine
  endpoint:
    path: /cluster/x-k8s.io/v1beta2/machines
    method: GET
- name: MachineHealthCheck
  endpoint:
    path: /cluster/x-k8s.io/v1beta2/machinehealthchecks
    method: GET
- name: KubeadmConfig
  endpoint:
    path: /KubeadmConfig
    method: GET
    data_selector: conditions
    params: {}
- name: KubeadmControlPlane
  endpoint:
    path: /controlplane.cluster.x-k8s.io/v1beta2/kubeadmcontrolplanes
    method: GET
    data_selector: items
- name: KubeadmControlPlaneTemplate
  endpoint:
    path: /controlplane.cluster.x-k8s.io/v1beta2/kubeadmcontrolplanetemplates
    method: GET
    data_selector: items
- name: ClusterResourceSet
  endpoint:
    path: /cluster.x-k8s.io/v1beta2/clusterresourcesets
    method: GET
    data_selector: items
- name: workload_cluster
  endpoint:
    path: /workload
    method: GET
    data_selector: workloads
    params: {}
- name: scaleway-secret
  endpoint:
    path: /services/data/vXX.X/sobjects/Secret
    method: POST
    data_selector: stringData
    params: {}
- name: KubeadmConfig
  endpoint:
    path: /kubeadmconfig
    method: GET
    data_selector: items
    params: {}
- name: DockerCluster
  endpoint:
    path: /dockercluster
    method: GET
    data_selector: items
    params: {}
- name: Machine
  endpoint:
    path: /machine
    method: GET
    data_selector: items
    params: {}
- name: MicroK8sControlPlane
  endpoint:
    path: /api/v1/MicroK8sControlPlane
    method: GET
    data_selector: items
    params: {}
- name: MachineDeployment
  endpoint:
    path: /api/v1/MachineDeployment
    method: GET
    data_selector: items
    params: {}
- name: KubeadmControlPlane
  endpoint:
    path: /kubeadmcontrolplane
    method: POST
    data_selector: spec
    params: {}
- name: MachineDeployment
  endpoint:
    path: /machinedeployment
    method: POST
    data_selector: spec
    params: {}
- name: MachineHealthCheck
  endpoint:
    path: /machinehealthcheck
    method: POST
    data_selector: spec
    params: {}
- name: MachineDeployment
  endpoint:
    path: /cluster-api/MachineDeployment
    method: POST
    data_selector: metadata.annotations
    params:
      cluster.x-k8s.io/cluster-api-autoscaler-node-group-max-size: '5'
      cluster.x-k8s.io/cluster-api-autoscaler-node-group-min-size: '0'
      capacity.cluster-autoscaler.kubernetes.io/memory: 128G
      capacity.cluster-autoscaler.kubernetes.io/cpu: '16'
      capacity.cluster-autoscaler.kubernetes.io/ephemeral-disk: 100Gi
      capacity.cluster-autoscaler.kubernetes.io/maxPods: '200'
      capacity.cluster-autoscaler.kubernetes.io/gpu-type: nvidia.com/gpu
      capacity.cluster-autoscaler.kubernetes.io/gpu-count: '2'
- name: MachineSet
  endpoint:
    path: /cluster-api/MachineSet
    method: POST
    data_selector: metadata.annotations
    params:
      cluster.x-k8s.io/cluster-api-autoscaler-node-group-max-size: '5'
      cluster.x-k8s.io/cluster-api-autoscaler-node-group-min-size: '0'
      capacity.cluster-autoscaler.kubernetes.io/memory: 128G
      capacity.cluster-autoscaler.kubernetes.io/cpu: '16'
      capacity.cluster-autoscaler.kubernetes.io/labels: key1=value1,key2=value2
      capacity.cluster-autoscaler.kubernetes.io/taints: key1=value1:NoSchedule,key2=value2:NoExecute
- name: MachineHealthCheck
  endpoint:
    path: /health-checks
    method: POST
    data_selector: status
    params:
      clusterName: capi-quickstart
      maxUnhealthy: 40%
      nodeStartupTimeout: 10m
- name: cluster
  endpoint:
    path: /api/v1/clusters
    method: GET
    data_selector: items
    params: {}
- name: customImage
  endpoint:
    path: /spec/template/spec/customImage
    method: PATCH
    data_selector: valueFrom.template
- name: httpProxy
  endpoint:
    path: /spec/template/spec/httpProxy/url
    method: PATCH
    data_selector: valueFrom.variable
- name: mdConfig
  endpoint:
    path: /spec/template/spec/customImage
    method: PATCH
    data_selector: valueFrom.template
- name: dnsServers
  endpoint:
    path: /spec/template/spec/dnsServers
    method: PATCH
    data_selector: valueFrom.variable
- name: cluster
  endpoint:
    path: /clusters
    method: GET
    data_selector: items
    params: {}
- name: BeforeClusterCreate
  endpoint:
    path: /hooks/runtime/cluster.x-k8s.io/v1alpha1/BeforeClusterCreate
    method: POST
    data_selector: status
    params: {}
- name: AfterControlPlaneInitialized
  endpoint:
    path: /hooks/runtime/cluster.x-k8s.io/v1alpha1/AfterControlPlaneInitialized
    method: POST
    data_selector: status
    params: {}
- name: BeforeClusterUpgrade
  endpoint:
    path: /hooks/runtime/cluster.x-k8s.io/v1alpha1/BeforeClusterUpgrade
    method: POST
    data_selector: status
    params: {}
- name: AfterControlPlaneUpgrade
  endpoint:
    path: /hooks/runtime/cluster.x-k8s.io/v1alpha1/AfterControlPlaneUpgrade
    method: POST
    data_selector: status
    params: {}
- name: AfterClusterUpgrade
  endpoint:
    path: /hooks/runtime/cluster.x-k8s.io/v1alpha1/AfterClusterUpgrade
    method: POST
    data_selector: status
    params: {}
- name: BeforeClusterDelete
  endpoint:
    path: /hooks.runtime.cluster.x-k8s.io/v1alpha1/BeforeClusterDelete
    method: POST
    data_selector: status
    params: {}
- name: DiscoverVariablesRequest
  endpoint:
    path: /v1alpha1/DiscoverVariablesRequest
    method: POST
    data_selector: variables
    params: {}
- name: DiscoverVariablesResponse
  endpoint:
    path: /v1alpha1/DiscoverVariablesResponse
    method: GET
    data_selector: variables
    params: {}
- name: metrics
  endpoint:
    path: /metrics
    method: GET
    data_selector: metrics
    params: {}
- name: pprof
  endpoint:
    path: /debug/pprof/*
    method: GET
    data_selector: profiles
    params: {}
- name: log_level
  endpoint:
    path: /debug/flags/v
    method: PUT
    data_selector: log_level
    params: {}
- name: podSecurityStandard
  endpoint:
    path: /spec/template/spec/kubeadmConfigSpec/clusterConfiguration/apiServer/extraArgs
    method: add
    data_selector: value
    params:
      admission-control-config-file: /etc/kubernetes/kube-apiserver-admission-pss.yaml
- name: extraVolumes
  endpoint:
    path: /spec/template/spec/kubeadmConfigSpec/clusterConfiguration/apiServer/extraVolumes
    method: add
    data_selector: value
    params:
      name: admission-pss
      hostPath: /etc/kubernetes/kube-apiserver-admission-pss.yaml
      mountPath: /etc/kubernetes/kube-apiserver-admission-pss.yaml
      readOnly: true
      pathType: File
- name: files
  endpoint:
    path: /spec/template/spec/kubeadmConfigSpec/files
    method: add
    data_selector: valueFrom
    params:
      template: "apiVersion: apiserver.config.k8s.io/v1\nkind: AdmissionConfiguration\n\
        plugins:\n- name: PodSecurity\n  configuration:\n    apiVersion: pod-security.admission.config.k8s.io/v1\n\
        \    kind: PodSecurityConfiguration\n    defaults:\n      enforce: \"{{ .podSecurity.enforce\
        \ }}\"\n      enforce-version: \"latest\"\n      audit: \"{{ .podSecurity.audit\
        \ }}\"\n      audit-version: \"latest\"\n      warn: \"{{ .podSecurity.warn\
        \ }}\"\n      warn-version: \"latest\"\n    exemptions:\n      usernames:\
        \ []\n      runtimeClasses: []\n      namespaces: [kube-system]"
- name: provider
  endpoint:
    path: /generate/provider
    method: GET
    data_selector: components
    params: {}
- name: cluster
  endpoint:
    path: /generate/cluster
    method: GET
    data_selector: templates
    params: {}
- name: kubeadmcontrolplanes
  endpoint:
    path: /kubeadmcontrolplanes
    method: GET
- name: machinedeployments
  endpoint:
    path: /machinedeployments
    method: GET
- name: Cluster
  endpoint:
    path: /api/cluster
    method: GET
    data_selector: items
- name: MachineDeployment
  endpoint:
    path: /api/machinedeployments
    method: GET
    data_selector: items
- name: MachineSet
  endpoint:
    path: /api/machinesets
    method: GET
    data_selector: items
- name: Machine
  endpoint:
    path: /machines
    method: GET
- name: MachinePool
  endpoint:
    path: /machinepools
    method: GET
- name: BootstrapConfig
  endpoint:
    path: /bootstrapconfigs
    method: GET
- name: logs
  endpoint:
    path: /logs
    method: GET
    data_selector: msg
- name: MailgunCluster
  endpoint:
    path: /apis/infrastructure.cluster.x-k8s.io/v1alpha1/mailgunclusters
    method: GET
    data_selector: items
- name: MailgunMachine
  endpoint:
    path: /apis/infrastructure.cluster.x-k8s.io/v1alpha1/mailgunmachines
    method: GET
    data_selector: items
- name: mailgunCluster
  endpoint:
    path: /v3/clusters
    method: POST
    data_selector: clusters
    params: {}
- name: fooclusters
  endpoint:
    path: /fooclusters
    method: GET
    data_selector: items
    params: {}
- name: fooclustertemplates
  endpoint:
    path: /fooclustertemplates
    method: GET
    data_selector: items
    params: {}
- name: InfraMachine
  endpoint:
    path: /inframachines
    method: GET
    data_selector: items
    params: {}
- name: InfraMachineTemplate
  endpoint:
    path: /inframachinetemplates
    method: GET
    data_selector: items
    params: {}
- name: FooConfig
  endpoint:
    path: /fooconfig
    method: GET
    data_selector: items
- name: FooConfigList
  endpoint:
    path: /fooconfigs
    method: GET
    data_selector: items
- name: controlPlane
  endpoint:
    path: /controlPlane
    method: GET
    data_selector: spec.controlPlaneEndpoint
    params: {}
- name: FooControlPlaneTemplate
  endpoint:
    path: /api/v1/FooControlPlaneTemplate
    method: GET
    data_selector: items
    params: {}
- name: FooControlPlaneTemplateList
  endpoint:
    path: /api/v1/FooControlPlaneTemplateList
    method: GET
    data_selector: items
    params: {}
- name: Cluster
  endpoint:
    path: /api/v1beta2/cluster
    method: GET
- name: MachineDeployment
  endpoint:
    path: /api/v1beta2/machinedeployment
    method: GET
- name: MachineSet
  endpoint:
    path: /api/v1beta2/machineset
    method: GET
- name: ClusterClass
  endpoint:
    path: /ClusterClass
    method: GET
    data_selector: conditions
    params: {}
- name: KubeadmConfig
  endpoint:
    path: /KubeadmConfig
    method: GET
    data_selector: conditions
    params: {}
- name: kubeadmControlPlane
  endpoint:
    path: /kubeadmcontrolplanes
    method: GET
- name: kubeadmControlPlaneTemplate
  endpoint:
    path: /kubeadmcontrolplanetemplates
    method: GET
- name: clusterResourceSet
  endpoint:
    path: /clusterresourcesets
    method: GET
- name: ClusterResourceSet
  endpoint:
    path: /addons.cluster.x-k8s.io/v1beta1/ClusterResourceSet
    method: GET
    data_selector: items
- name: ClusterResourceSetBinding
  endpoint:
    path: /addons.cluster.x-k8s.io/v1beta1/ClusterResourceSetBinding
    method: GET
    data_selector: items
- name: ExtensionConfig
  endpoint:
    path: /runtime.cluster.x-k8s.io/v1beta2/ExtensionConfig
    method: GET
    data_selector: items
- name: IPAddress
  endpoint:
    path: /ipam.cluster.x-k8s.io/v1beta2/IPAddress
    method: GET
    data_selector: items
- name: IPAddressClaim
  endpoint:
    path: /ipam.cluster.x-k8s.io/v1beta2/IPAddressClaim
    method: GET
    data_selector: items
- name: workload_cluster
  endpoint:
    path: /workload_clusters
    method: GET
    data_selector: clusters
    params: {}
- name: scaleway-secret
  endpoint:
    path: /
    method: POST
    data_selector: stringData
    params: {}
- name: KubeadmConfig
  endpoint:
    path: /kubeadm/config
    method: GET
    data_selector: items
    params: {}
- name: DockerCluster
  endpoint:
    path: /dockercluster
    method: GET
    data_selector: items
    params: {}
- name: Machine
  endpoint:
    path: /machines
    method: GET
    data_selector: items
    params: {}
- name: MicroK8sControlPlane
  endpoint:
    path: /controlplane/microk8s
    method: GET
    data_selector: spec
    params: {}
- name: MachineDeployment
  endpoint:
    path: /machinedeployments
    method: GET
    data_selector: spec
    params: {}
- name: MachineDeployment
  endpoint:
    path: /api/v1/MachineDeployment
    method: GET
    data_selector: items
    params: {}
- name: MachineSet
  endpoint:
    path: /api/v1/MachineSet
    method: GET
    data_selector: items
    params: {}
- name: MachinePool
  endpoint:
    path: /api/v1/MachinePool
    method: GET
    data_selector: items
    params: {}
- name: MachineHealthCheck
  endpoint:
    path: /services/data/vXX.X/sobjects/MachineHealthCheck
    method: GET
    data_selector: records
- name: cluster
  endpoint:
    path: /api/v1/clusters
    method: GET
    data_selector: items
    params: {}
- name: customImage
  endpoint:
    path: /spec/template/spec/customImage
    method: add
    data_selector: valueFrom.template
    params: {}
- name: httpProxy
  endpoint:
    path: /spec/template/spec/httpProxy/url
    method: add
    data_selector: valueFrom.variable
    params: {}
- name: mdConfig
  endpoint:
    path: /spec/template/spec/customImage
    method: add
    data_selector: valueFrom.template
    params: {}
- name: dnsServers
  endpoint:
    path: /spec/template/spec/dnsServers
    method: add
    data_selector: valueFrom.variable
    params: {}
- name: dnsServer
  endpoint:
    path: /spec/template/spec/dnsServer
    method: add
    data_selector: valueFrom.variable
    params: {}
- name: etcdImageTag
  endpoint:
    path: /spec/template/spec/kubeadmConfigSpec/clusterConfiguration/etcd
    method: add
    data_selector: valueFrom.template
    params: {}
- name: imageRepository
  endpoint:
    path: /spec/template/spec/kubeadmConfigSpec/clusterConfiguration/imageRepository
    method: add
    data_selector: value
    params: {}
- name: cluster
  endpoint:
    path: /spec/topology
    method: PATCH
    data_selector: spec
    params:
      incremental: version
- name: machinedeployment
  endpoint:
    path: /spec/topology/workers/machineDeployments
    method: PATCH
    data_selector: spec
    params: {}
- name: controlPlane
  endpoint:
    path: /spec/topology/controlPlane
    method: PATCH
    data_selector: spec
    params: {}
- name: BeforeClusterCreate
  endpoint:
    path: /v1alpha1/before-cluster-create
    method: POST
    data_selector: status
    params: {}
- name: AfterControlPlaneInitialized
  endpoint:
    path: /v1alpha1/after-control-plane-initialized
    method: POST
    data_selector: status
    params: {}
- name: BeforeClusterUpgrade
  endpoint:
    path: /v1alpha1/before-cluster-upgrade
    method: POST
    data_selector: status
    params: {}
- name: AfterControlPlaneUpgrade
  endpoint:
    path: /v1alpha1/after-control-plane-upgrade
    method: POST
    data_selector: status
    params: {}
- name: AfterClusterUpgrade
  endpoint:
    path: /v1alpha1/after-cluster-upgrade
    method: POST
    data_selector: status
    params: {}
- name: BeforeClusterDelete
  endpoint:
    path: /v1alpha1/before-cluster-delete
    method: POST
    data_selector: status
    params: {}
- name: GeneratePatches
  endpoint:
    path: /v1alpha1/generate-patches
    method: POST
    data_selector: status
    params: {}
- name: ValidateTopology
  endpoint:
    path: /v1alpha1/validate-topology
    method: POST
    data_selector: status
    params: {}
- name: DiscoverVariables
  endpoint:
    path: /v1alpha1/discover-variables
    method: POST
    data_selector: status
    params: {}
- name: DiscoverVariablesRequest
  endpoint:
    path: /hooks/runtime/cluster/x-k8s.io/v1alpha1/DiscoverVariablesRequest
    method: GET
    data_selector: variables
- name: DiscoverVariablesResponse
  endpoint:
    path: /hooks/runtime/cluster/x-k8s.io/v1alpha1/DiscoverVariablesResponse
    method: GET
    data_selector: variables
- name: metrics
  endpoint:
    path: /metrics
    method: GET
- name: pprof
  endpoint:
    path: /debug/pprof/*
    method: GET
- name: log_level
  endpoint:
    path: /debug/flags/v
    method: PUT
- name: podSecurityStandard
  endpoint:
    path: /spec/template/spec/kubeadmConfigSpec/clusterConfiguration/apiServer/extraArgs
    method: add
    data_selector: admission-control-config-file
    params:
      value: /etc/kubernetes/kube-apiserver-admission-pss.yaml
- name: extraVolumes
  endpoint:
    path: /spec/template/spec/kubeadmConfigSpec/clusterConfiguration/apiServer/extraVolumes
    method: add
    data_selector: admission-pss
    params:
      hostPath: /etc/kubernetes/kube-apiserver-admission-pss.yaml
      mountPath: /etc/kubernetes/kube-apiserver-admission-pss.yaml
      readOnly: true
      pathType: File
- name: files
  endpoint:
    path: /spec/template/spec/kubeadmConfigSpec/files
    method: add
    data_selector: AdmissionConfiguration
    params:
      content: "apiVersion: apiserver.config.k8s.io/v1\nkind: AdmissionConfiguration\n\
        plugins:\n- name: PodSecurity\n  configuration:\n    apiVersion: pod-security.admission.config.k8s.io/v1\n\
        \    kind: PodSecurityConfiguration\n    defaults:\n      enforce: \"{{ .podSecurity.enforce\
        \ }}\"\n      enforce-version: \"latest\"\n      audit: \"{{ .podSecurity.audit\
        \ }}\"\n      audit-version: \"latest\"\n      warn: \"{{ .podSecurity.warn\
        \ }}\"\n      warn-version: \"latest\"\n    exemptions:\n      usernames:\
        \ []\n      runtimeClasses: []\n      namespaces: [kube-system]\n"
      path: /etc/kubernetes/kube-apiserver-admission-pss.yaml
- name: kubeadmcontrolplanes
  endpoint:
    path: /alpha/rollout/kubeadmcontrolplanes
    method: POST
- name: machinedeployments
  endpoint:
    path: /alpha/rollout/machinedeployments
    method: POST
- name: capi-controller-manager
  endpoint:
    path: /capi-controller-manager
    method: GET
- name: capd-controller-manager
  endpoint:
    path: /capd-controller-manager
    method: GET
- name: capi-kubeadm-bootstrap-controller-manager
  endpoint:
    path: /capi-kubeadm-bootstrap-controller-manager
    method: GET
- name: capi-kubeadm-control-plane-controller-manager
  endpoint:
    path: /capi-kubeadm-control-plane-controller-manager
    method: GET
- name: E2E config
  endpoint:
    path: /test/framework/clusterctl
    method: GET
- name: ClusterTemplate
  endpoint:
    path: /test/framework/clusterctl
    method: GET
- name: InitManagementClusterAndWatchControllerLogs
  endpoint:
    path: /test/framework/clusterctl
    method: GET
- name: GetIntervals
  endpoint:
    path: /test/framework/clusterctl
    method: GET
- name: InfrastructureProvider
  endpoint:
    path: /test/framework/clusterctl
    method: GET
- name: MailgunCluster
  endpoint:
    path: /apis/infrastructure.cluster.x-k8s.io/v1alpha1/mailgunclusters
    method: GET
    data_selector: items
    params: {}
- name: MailgunMachine
  endpoint:
    path: /apis/infrastructure.cluster.x-k8s.io/v1alpha1/mailgunmachines
    method: GET
    data_selector: items
    params: {}
- name: MailgunCluster
  endpoint:
    path: /clusters
    method: POST
- name: fooclusters
  endpoint:
    path: /fooclusters
    method: GET
    data_selector: items
- name: fooclustertemplates
  endpoint:
    path: /fooclustertemplates
    method: GET
    data_selector: items
- name: InfraMachine
  endpoint:
    path: /infraMachines
    method: GET
    data_selector: items
    params: {}
- name: InfraMachineTemplate
  endpoint:
    path: /infraMachineTemplates
    method: GET
    data_selector: items
    params: {}
- name: controlPlane
  endpoint:
    path: /controlPlane
    method: GET
- name: FooControlPlaneTemplateList
  endpoint:
    path: /FooControlPlaneTemplateList
    method: GET
    data_selector: items
- name: cluster_template
  endpoint:
    path: /cluster-template.yaml
    method: GET
    data_selector: templates
    params: {}
- name: clusterclass_definition
  endpoint:
    path: /clusterclass-{ClusterClass-name}.yaml
    method: GET
    data_selector: definitions
    params: {}
- name: Cluster
  endpoint:
    path: /api/v1beta1/cluster
    method: GET
    data_selector: ''
    params: {}
- name: MachineDeployment
  endpoint:
    path: /api/v1beta1/machinedeployment
    method: GET
    data_selector: ''
    params: {}
- name: MachineSet
  endpoint:
    path: /api/v1beta1/machineset
    method: GET
    data_selector: ''
    params: {}
- name: MachineSet
  endpoint:
    path: /v1beta2/MachineSet
    method: GET
- name: MachinePool
  endpoint:
    path: /v1beta2/MachinePool
    method: GET
- name: Machine
  endpoint:
    path: /v1beta2/Machine
    method: GET
- name: MachineHealthCheck
  endpoint:
    path: /v1beta2/MachineHealthCheck
    method: GET
- name: ClusterClass
  endpoint:
    path: /ClusterClass
    method: GET
    data_selector: metadata
- name: KubeadmConfig
  endpoint:
    path: /KubeadmConfig
    method: GET
    data_selector: metadata
- name: KubeadmConfig
  endpoint:
    path: /kubeadmconfig
    method: GET
- name: KubeadmConfigTemplate
  endpoint:
    path: /kubeadmconfigtemplate
    method: GET
- name: KubeadmControlPlane
  endpoint:
    path: /kubeadmcontrolplane
    method: GET
- name: kubeadmConfigSpec
  endpoint:
    path: /kubeadmConfigSpec
    method: GET
    data_selector: spec
    params: {}
- name: management_cluster
  endpoint:
    path: /init
    method: POST
- name: VPC
  endpoint:
    params:
      IBMVPC_REGION: us-south
      IBMVPC_ZONE: us-south-1
      IBMVPC_RESOURCEGROUP: <your-resource-group-id>
      IBMVPC_NAME: ibm-vpc-0
      IBMVPC_IMAGE_ID: <you-image-id>
      IBMVPC_PROFILE: bx2-4x16
      IBMVPC_SSHKEY_ID: <your-sshkey-id>
- name: PowerVS
  endpoint:
    params:
      IBMPOWERVS_SSHKEY_NAME: <your-ssh-key>
      IBMPOWERVS_VIP: <internal-ip>
      IBMPOWERVS_VIP_EXTERNAL: <external-ip>
      IBMPOWERVS_VIP_CIDR: 29
      IBMPOWERVS_IMAGE_NAME: <your-capi-image-name>
      IBMPOWERVS_SERVICE_INSTANCE_ID: <service-instance-id>
      IBMPOWERVS_NETWORK_NAME: <your-capi-network-name>
- name: VMs
  endpoint:
    path: /vms
    method: GET
    data_selector: vms
- name: Networks
  endpoint:
    path: /networks
    method: GET
    data_selector: networks
- name: KubeadmConfig
  endpoint:
    path: /apis/bootstrap.cluster.x-k8s.io/v1beta2/kubeadmconfigs
    method: GET
    data_selector: items
    params: {}
- name: DockerMachine
  endpoint:
    path: /apis/infrastructure.cluster.x-k8s.io/v1beta2/dockermachines
    method: GET
    data_selector: items
    params: {}
- name: Cluster
  endpoint:
    path: /apis/cluster.x-k8s.io/v1beta2/clusters
    method: GET
    data_selector: items
    params: {}
- name: Machine
  endpoint:
    path: /apis/cluster.x-k8s.io/v1beta2/machines
    method: GET
    data_selector: items
    params: {}
- name: MicroK8sControlPlane
  endpoint:
    path: /api/v1/MicroK8sControlPlane
    method: GET
    data_selector: spec.controlPlaneConfig
    params: {}
- name: MachineDeployment
  endpoint:
    path: /api/v1/MachineDeployment
    method: GET
    data_selector: spec.template.spec
    params: {}
- name: KubeadmControlPlane
  endpoint:
    path: /kubeadmcontrolplane
    method: GET
    data_selector: spec
    params: {}
- name: MachineDeployment
  endpoint:
    path: /machinedeployments
    method: GET
    data_selector: spec
    params: {}
- name: machine_health_check
  endpoint:
    path: /api/v1beta2/machinehealthchecks
    method: GET
    data_selector: items
- name: ClusterClass
  endpoint:
    path: /api/v1beta2/clusterclasses
    method: GET
    data_selector: items
- name: Cluster
  endpoint:
    path: /api/v1beta2/clusters
    method: GET
    data_selector: items
- name: httpProxy
  endpoint:
    path: /spec/template/spec/httpProxy/url
    method: add
    data_selector: url
    params: {}
- name: mdConfig
  endpoint:
    path: /spec/template/spec/customImage
    method: add
    data_selector: osImage
    params: {}
- name: dnsServers
  endpoint:
    path: /spec/template/spec/dnsServers
    method: add
    data_selector: dnsServers
    params: {}
- name: dnsServer
  endpoint:
    path: /spec/template/spec/dnsServer
    method: add
    data_selector: dnsServers[0]
    params: {}
- name: DiscoverVariablesRequest
  endpoint:
    path: /DiscoverVariablesRequest
    method: GET
    data_selector: variables
    params: {}
- name: DiscoverVariablesResponse
  endpoint:
    path: /DiscoverVariablesResponse
    method: GET
    data_selector: variables
    params: {}
- name: metrics
  endpoint:
    path: /metrics
    method: GET
- name: pprof
  endpoint:
    path: /debug/pprof/*
    method: GET
- name: loglevel
  endpoint:
    path: /debug/flags/v
    method: PUT
- name: podSecurityStandard
  endpoint:
    path: /spec/template/spec/kubeadmConfigSpec/clusterConfiguration/apiServer/extraArgs
    method: ADD
    data_selector: value
    params: {}
- name: extraVolumes
  endpoint:
    path: /spec/template/spec/kubeadmConfigSpec/clusterConfiguration/apiServer/extraVolumes
    method: ADD
    data_selector: value
    params: {}
- name: files
  endpoint:
    path: /spec/template/spec/kubeadmConfigSpec/files
    method: ADD
    data_selector: valueFrom
    params: {}
- name: kubeadmcontrolplanes
  endpoint:
    path: /kubeadmcontrolplanes
    method: GET
- name: machinedeployments
  endpoint:
    path: /machinedeployments
    method: GET
- name: Machine
  endpoint:
    path: /machine
    method: GET
    data_selector: machines
    params: {}
- name: MachinePool
  endpoint:
    path: /machinepool
    method: GET
    data_selector: machinePools
    params: {}
- name: capi-controller-manager-logs
  endpoint:
    path: /capi-controller-manager
    method: GET
    data_selector: msg
    params: {}
- name: capd-controller-manager-logs
  endpoint:
    path: /capd-controller-manager
    method: GET
    data_selector: msg
    params: {}
- name: capi-kubeadm-bootstrap-controller-manager-logs
  endpoint:
    path: /capi-kubeadm-bootstrap-controller-manager
    method: GET
    data_selector: msg
    params: {}
- name: capi-kubeadm-control-plane-controller-manager-logs
  endpoint:
    path: /capi-kubeadm-control-plane-controller-manager
    method: GET
    data_selector: msg
    params: {}
- name: MailgunCluster
  endpoint:
    path: /api/v1alpha1/mailgunclusters
    method: GET
- name: MailgunMachine
  endpoint:
    path: /api/v1alpha1/mailgunmachines
    method: GET
- name: mailgun_config
  endpoint:
    path: /api/v1/config
    method: GET
    data_selector: data
    params: {}
- name: fooclusters
  endpoint:
    path: /fooclusters
    method: GET
    data_selector: items
- name: fooclustertemplates
  endpoint:
    path: /fooclustertemplates
    method: GET
    data_selector: items
- name: InfraMachine
  endpoint:
    path: /developer/providers/contracts/infra-machine
    method: GET
    data_selector: resources
    params: {}
- name: InfraMachineTemplate
  endpoint:
    path: /developer/providers/contracts/infra-machine
    method: GET
    data_selector: resources
    params: {}
- name: FooControlPlane
  endpoint:
    path: /controlplane
    method: GET
- name: FooControlPlaneTemplate
  endpoint:
    path: /foocontrolplanetemplates
    method: GET
- name: FooControlPlaneTemplate
  endpoint:
    path: /FooControlPlaneTemplate
    method: GET
- name: FooControlPlaneTemplateList
  endpoint:
    path: /FooControlPlaneTemplateList
    method: GET
- name: MachineSet
  endpoint:
    path: /v1beta2/machinesets
    method: GET
    data_selector: items
- name: MachinePool
  endpoint:
    path: /v1beta2/machinepools
    method: GET
    data_selector: items
- name: Machine
  endpoint:
    path: /v1beta2/machines
    method: GET
    data_selector: items
- name: MachineHealthCheck
  endpoint:
    path: /v1beta2/machinehealthchecks
    method: GET
    data_selector: items
- name: ClusterClass
  endpoint:
    path: /cluster-classes
    method: GET
    data_selector: items
    params: {}
- name: KubeadmConfig
  endpoint:
    path: /bootstrap.cluster.x-k8s.io/v1beta1/kubeadmconfigs
    method: GET
    data_selector: items
- name: KubeadmConfigTemplate
  endpoint:
    path: /bootstrap.cluster.x-k8s.io/v1beta1/kubeadmconfigtemplates
    method: GET
    data_selector: items
- name: KubeadmControlPlane
  endpoint:
    path: /controlplane.cluster.x-k8s.io/v1beta1/kubeadmcontrolplanes
    method: GET
    data_selector: items
- name: kubeadmControlPlane
  endpoint:
    path: /kubeadmControlPlane
    method: GET
- name: ClusterResourceSet
  endpoint:
    path: /addons.cluster.x-k8s.io/v1beta1/ClusterResourceSet
    method: GET
    data_selector: items
- name: ClusterResourceSetBinding
  endpoint:
    path: /addons.cluster.x-k8s.io/v1beta1/ClusterResourceSetBinding
    method: GET
    data_selector: items
- name: ExtensionConfig
  endpoint:
    path: /runtime.cluster.x-k8s.io/v1beta2/ExtensionConfig
    method: GET
    data_selector: items
- name: IPAddress
  endpoint:
    path: /ipam.cluster.x-k8s.io/v1beta2/IPAddress
    method: GET
    data_selector: items
- name: IPAddressClaim
  endpoint:
    path: /ipam.cluster.x-k8s.io/v1beta2/IPAddressClaim
    method: GET
    data_selector: items
- name: cluster
  endpoint:
    path: /cluster
    method: GET
    data_selector: clusters
    params: {}
- name: machine
  endpoint:
    path: /machines
    method: GET
    data_selector: machines
    params: {}
- name: Management Cluster
  endpoint:
    path: /reference/glossary#management-cluster
    method: GET
    data_selector: cluster
    params: {}
- name: VPC
  endpoint:
    params:
      IBM_VPC_REGION: us-south
      IBM_VPC_RESOURCEGROUP: <your-resource-group-id>
      IBM_VPC_NAME: ibm-vpc-0
      IBM_VPC_IMAGE_ID: <you-image-id>
      IBM_VPC_PROFILE: bx2-4x16
      IBM_VPC_SSHKEY_ID: <your-sshkey-id>
- name: PowerVS
  endpoint:
    params:
      IBM_POWERVS_SSHKEY_NAME: <your-ssh-key>
      IBM_POWERVS_VIP: <internal-ip>
      IBM_POWERVS_VIP_EXTERNAL: <external-ip>
      IBM_POWERVS_VIP_CIDR: 29
      IBM_POWERVS_IMAGE_NAME: <your-capi-image-name>
      IBM_POWERVS_SERVICE_INSTANCE_ID: <service-instance-id>
      IBM_POWERVS_NETWORK_NAME: <your-capi-network-name>
- name: workload_cluster
  endpoint:
    path: /cluster
    method: POST
    data_selector: clusters
    params:
      cluster_name: one
      public_network_name: service
      private_network_name: private
      control_plane_machine_count: '1'
      worker_machine_count: '1'
- name: MicroK8sControlPlane
  endpoint:
    path: /api/v1beta2/microk8scontrolplanes
    method: GET
    data_selector: items
    params: {}
- name: MachineDeployment
  endpoint:
    path: /api/v1beta2/machinedeployments
    method: GET
    data_selector: items
    params: {}
- name: MicroK8sConfigTemplate
  endpoint:
    path: /api/v1beta1/microk8sconfigtemplates
    method: GET
    data_selector: items
    params: {}
- name: KubeadmControlPlane
  endpoint:
    path: /kubeadmcontrolplane
    method: GET
    data_selector: items
    params: {}
- name: MachineDeployment
  endpoint:
    path: /machinedeployment
    method: GET
    data_selector: items
    params: {}
- name: machine_health_check
  endpoint:
    path: /api/machinehealthchecks
    method: POST
    data_selector: spec
    params: {}
- name: ClusterClass
  endpoint:
    path: /api/v1/clusterclass
    method: GET
    data_selector: items
    params: {}
- name: Cluster
  endpoint:
    path: /api/v1/cluster
    method: GET
    data_selector: items
    params: {}
- name: customImage
  endpoint:
    path: /spec/template/spec/customImage
    method: add
    data_selector: valueFrom
    params: {}
- name: httpProxy
  endpoint:
    path: /spec/template/spec/httpProxy/url
    method: add
    data_selector: valueFrom
    params: {}
- name: mdConfig
  endpoint:
    path: /spec/template/spec/customImage
    method: add
    data_selector: valueFrom
    params: {}
- name: dnsServers
  endpoint:
    path: /spec/template/spec/dnsServers
    method: add
    data_selector: valueFrom
    params: {}
- name: dnsServer
  endpoint:
    path: /spec/template/spec/dnsServer
    method: add
    data_selector: valueFrom
    params: {}
- name: etcdImageTag
  endpoint:
    path: /spec/template/spec/kubeadmConfigSpec/clusterConfiguration/etcd
    method: add
    data_selector: valueFrom
    params: {}
- name: imageRepository
  endpoint:
    path: /spec/template/spec/kubeadmConfigSpec/clusterConfiguration/imageRepository
    method: add
    data_selector: value
    params: {}
- name: ExtensionConfig
  endpoint:
    path: /api/v1/namespaces/default/services/https:webhook-service:443/proxy/hooks.runtime.cluster.x-k8s.io/v1alpha1/discovery
    method: POST
    data_selector: apiVersion
    params: {}
- name: BeforeClusterCreate
  endpoint:
    path: /hooks/runtime/cluster/x-k8s.io/v1alpha1/before-cluster-create
    method: POST
    data_selector: status
    params: {}
- name: AfterControlPlaneInitialized
  endpoint:
    path: /hooks/runtime/cluster/x-k8s.io/v1alpha1/after-control-plane-initialized
    method: POST
    data_selector: status
    params: {}
- name: BeforeClusterUpgrade
  endpoint:
    path: /hooks/runtime/cluster/x-k8s.io/v1alpha1/before-cluster-upgrade
    method: POST
    data_selector: status
    params: {}
- name: AfterControlPlaneUpgrade
  endpoint:
    path: /hooks/runtime/cluster/x-k8s.io/v1alpha1/after-control-plane-upgrade
    method: POST
    data_selector: status
    params: {}
- name: AfterClusterUpgrade
  endpoint:
    path: /hooks.runtime.cluster.x-k8s.io/v1alpha1/after-cluster-upgrade
    method: POST
    data_selector: status
    params: {}
- name: BeforeClusterDelete
  endpoint:
    path: /hooks/runtime/cluster/x-k8s.io/v1alpha1/before-cluster-delete
    method: POST
    data_selector: status
    params: {}
- name: metrics
  endpoint:
    path: /metrics
    method: GET
- name: pprof
  endpoint:
    path: /debug/pprof
    method: GET
- name: log_level
  endpoint:
    path: /debug/flags/v
    method: PUT
- name: podSecurityStandard
  endpoint:
    path: /spec/template/spec/kubeadmConfigSpec/clusterConfiguration/apiServer/extraArgs
    method: add
    data_selector: value
    params: {}
- name: extraVolumes
  endpoint:
    path: /spec/template/spec/kubeadmConfigSpec/clusterConfiguration/apiServer/extraVolumes
    method: add
    data_selector: value
    params: {}
- name: files
  endpoint:
    path: /spec/template/spec/kubeadmConfigSpec/files
    method: add
    data_selector: valueFrom
    params: {}
- name: Cluster
  endpoint:
    path: /cluster-api/Cluster
    method: GET
    data_selector: clusters
    params: {}
- name: Machine
  endpoint:
    path: /cluster-api/Machine
    method: GET
    data_selector: machines
    params: {}
- name: MachineDeployment
  endpoint:
    path: /cluster-api/MachineDeployment
    method: GET
    data_selector: machineDeployments
    params: {}
- name: kubeadmcontrolplanes
  endpoint:
    path: /kubeadmcontrolplanes
    method: GET
- name: machinedeployments
  endpoint:
    path: /machinedeployments
    method: GET
- name: Machine
  endpoint:
    path: /developer/providers/contracts/bootstrap-config#bootstrapconfig-initialization-completed
    method: GET
    data_selector: Status.initialization.dataSecretCreated
    params: {}
- name: InfrastructureMachinePool
  endpoint:
    path: /developer/providers/contracts/bootstrap-config#bootstrapconfig-conditions
    method: GET
    data_selector: Status.Ready
    params: {}
- name: capi-controller-manager
  endpoint:
    path: '{app="capi-controller-manager"}'
    method: GET
    data_selector: msg
- name: capd-controller-manager
  endpoint:
    path: '{app=~"capd-controller-manager|capi-kubeadm-bootstrap-controller-manager|capi-kubeadm-control-plane-controller-manager"}'
    method: GET
    data_selector: msg
- name: MailgunCluster
  endpoint:
    path: /v1/clusters
    method: POST
    data_selector: cluster
    params: {}
- name: MailgunMachine
  endpoint:
    path: /v1/machines
    method: POST
    data_selector: machine
    params: {}
- name: mailgunCluster
  endpoint:
    path: /clusters
    method: POST
    data_selector: data
    params: {}
- name: fooclusters
  endpoint:
    path: /fooclusters
    method: GET
    data_selector: items
- name: fooclustertemplates
  endpoint:
    path: /fooclustertemplates
    method: GET
    data_selector: items
- name: InfraMachine
  endpoint:
    path: /path/to/inframachine
    method: GET
    data_selector: items
    params: {}
- name: InfraMachineList
  endpoint:
    path: /path/to/inframachinelist
    method: GET
    data_selector: items
    params: {}
- name: InfraMachineTemplate
  endpoint:
    path: /path/to/inframachinetemplate
    method: GET
    data_selector: items
    params: {}
- name: InfraMachineTemplateList
  endpoint:
    path: /path/to/inframachinetemplatelist
    method: GET
    data_selector: items
    params: {}
- name: FooControlPlane
  endpoint:
    path: /controlPlane
    method: GET
- name: FooControlPlaneTemplate
  endpoint:
    path: /FooControlPlaneTemplate
    method: GET
- name: FooControlPlaneTemplateList
  endpoint:
    path: /FooControlPlaneTemplateList
    method: GET
- name: cluster_templates
  endpoint:
    path: /cluster-templates
    method: GET
    data_selector: templates
- name: clusterclass_definitions
  endpoint:
    path: /clusterclass-definitions
    method: GET
    data_selector: definitions
- name: Cluster
  endpoint:
    path: /clusters
    method: GET
- name: MachineDeployment
  endpoint:
    path: /machinedeployments
    method: GET
- name: MachineSet
  endpoint:
    path: /machinesets
    method: GET
- name: MachineSet
  endpoint:
    path: /v1beta2/MachineSet
    method: GET
    data_selector: conditions
- name: MachinePool
  endpoint:
    path: /v1beta2/MachinePool
    method: GET
    data_selector: conditions
- name: Machine
  endpoint:
    path: /v1beta2/Machine
    method: GET
    data_selector: conditions
- name: MachineHealthCheck
  endpoint:
    path: /v1beta2/MachineHealthCheck
    method: GET
    data_selector: conditions
- name: ClusterClass
  endpoint:
    path: /clusterclasses
    method: GET
    data_selector: items
    params: {}
- name: KubeadmConfig
  endpoint:
    path: /kubeadmconfig
    method: GET
    data_selector: status
    params: {}
- name: KubeadmControlPlane
  endpoint:
    path: /kubeadmcontrolplanes
    method: GET
- name: KubeadmControlPlaneTemplate
  endpoint:
    path: /kubeadmcontrolplanetemplates
    method: GET
- name: ClusterResourceSet
  endpoint:
    path: /clusterresourcesets
    method: GET
- name: cluster
  endpoint:
    path: /
    method: GET
    data_selector: clusters
    params: {}
- name: machine
  endpoint:
    path: /machines
    method: GET
    data_selector: machines
    params: {}
- name: management_cluster
  endpoint:
    path: /management-cluster
    method: POST
    data_selector: cluster
- name: VPC
  endpoint:
    path: /v1/vpcs
    method: GET
    data_selector: vpcs
- name: PowerVS
  endpoint:
    path: /v1/power-vs
    method: GET
    data_selector: powervs
- name: workload_cluster
  endpoint:
    path: /workload_clusters
    method: GET
    data_selector: clusters
    params: {}
- name: MicroK8sControlPlane
  endpoint:
    path: /api/v1/microk8s/controlplane
    method: GET
    data_selector: items
    params: {}
- name: MachineDeployment
  endpoint:
    path: /api/v1/microk8s/machinedeployment
    method: GET
    data_selector: items
    params: {}
- name: MachineTemplate
  endpoint:
    path: /services/data/vXX.X/sobjects/MachineTemplate
    method: POST
- name: KubeadmControlPlane
  endpoint:
    path: /services/data/vXX.X/sobjects/KubeadmControlPlane
    method: PATCH
- name: MachineDeployment
  endpoint:
    path: /services/data/vXX.X/sobjects/MachineDeployment
    method: PATCH
- name: MachineDeployment
  endpoint:
    path: /k8s.io/v1alpha4/machineDeployments
    method: GET
    data_selector: items
    params: {}
- name: MachineSet
  endpoint:
    path: /k8s.io/v1alpha4/machineSets
    method: GET
    data_selector: items
    params: {}
- name: MachinePool
  endpoint:
    path: /k8s.io/v1alpha4/machinePools
    method: GET
    data_selector: items
    params: {}
- name: MachineHealthCheck
  endpoint:
    path: /cluster.x-k8s.io/v1beta2/machinehealthchecks
    method: GET
    data_selector: items
- name: KubeadmControlPlane
  endpoint:
    path: /cluster.x-k8s.io/v1beta2/kubeadmcontrolplanes
    method: GET
    data_selector: items
- name: ClusterClass
  endpoint:
    path: /cluster.x-k8s.io/v1beta2/ClusterClass
    method: GET
    data_selector: items
    params: {}
- name: Cluster
  endpoint:
    path: /cluster.x-k8s.io/v1beta2/Cluster
    method: GET
    data_selector: items
    params: {}
- name: BeforeClusterCreate
  endpoint:
    path: /hooks/runtime/cluster.x-k8s.io/v1alpha1/before-cluster-create
    method: POST
    data_selector: status
    params: {}
- name: AfterControlPlaneInitialized
  endpoint:
    path: /hooks/runtime/cluster.x-k8s.io/v1alpha1/after-control-plane-initialized
    method: POST
    data_selector: status
    params: {}
- name: BeforeClusterUpgrade
  endpoint:
    path: /hooks/runtime/cluster.x-k8s.io/v1alpha1/before-cluster-upgrade
    method: POST
    data_selector: status
    params: {}
- name: AfterControlPlaneUpgrade
  endpoint:
    path: /hooks/runtime/cluster.x-k8s.io/v1alpha1/after-control-plane-upgrade
    method: POST
    data_selector: status
    params: {}
- name: AfterClusterUpgrade
  endpoint:
    path: /hooks.runtime.cluster.x-k8s.io/v1alpha1/after-cluster-upgrade
    method: POST
    data_selector: status
    params: {}
- name: BeforeClusterDelete
  endpoint:
    path: /hooks.runtime.cluster.x-k8s.io/v1alpha1/before-cluster-delete
    method: POST
    data_selector: status
    params: {}
- name: metrics
  endpoint:
    path: /metrics
    method: GET
    data_selector: metrics
    params: {}
- name: pprof
  endpoint:
    path: /debug/pprof
    method: GET
    data_selector: pprof
    params: {}
- name: podSecurityStandard
  endpoint:
    path: /spec/template/spec/kubeadmConfigSpec/clusterConfiguration/apiServer/extraArgs
    method: ADD
    data_selector: value
    params: {}
- name: extraVolumes
  endpoint:
    path: /spec/template/spec/kubeadmConfigSpec/clusterConfiguration/apiServer/extraVolumes
    method: ADD
    data_selector: value
    params: {}
- name: files
  endpoint:
    path: /spec/template/spec/kubeadmConfigSpec/files
    method: ADD
    data_selector: valueFrom.template
    params: {}
- name: provider
  endpoint:
    path: /generate/provider
    method: GET
    data_selector: components
- name: cluster
  endpoint:
    path: /generate/cluster
    method: GET
    data_selector: workloadClusters
- name: Cluster
  endpoint:
    path: /api/v1/clusters
    method: GET
- name: MachineDeployment
  endpoint:
    path: /api/v1/machinedeployments
    method: GET
- name: MachineSet
  endpoint:
    path: /api/v1/machinesets
    method: GET
- name: Machine
  endpoint:
    path: /api/v1/machines
    method: GET
- name: capi-controller-manager
  endpoint:
    path: '{app="capi-controller-manager"}'
    method: json
    data_selector: Cluster_name
    params: {}
- name: capd-controller-manager
  endpoint:
    path: '{app=~"capd-controller-manager|capi-kubeadm-bootstrap-controller-manager|capi-kubeadm-control-plane-controller-manager"}'
    method: json
    data_selector: Cluster_name
    params: {}
- name: MailgunCluster
  endpoint:
    path: /clusters
    method: POST
    data_selector: data
- name: MailgunMachine
  endpoint:
    path: /machines
    method: POST
    data_selector: data
- name: MailgunCluster
  endpoint:
    path: /clusters
    method: POST
    data_selector: data
- name: fooclusters
  endpoint:
    path: /fooclusters
    method: GET
    data_selector: items
- name: fooclustertemplates
  endpoint:
    path: /fooclustertemplates
    method: GET
    data_selector: items
- name: InfraMachine
  endpoint:
    path: /inframachines
    method: GET
    data_selector: items
- name: InfraMachineTemplate
  endpoint:
    path: /inframachinetemplates
    method: GET
    data_selector: items
- name: BootstrapConfig
  endpoint:
    path: /bootstrapconfig
    method: GET
    data_selector: items
- name: BootstrapConfigList
  endpoint:
    path: /bootstrapconfiglist
    method: GET
    data_selector: items
- name: FooControlPlane
  endpoint:
    path: /spec/controlPlaneEndpoint
    method: GET
- name: FooControlPlaneTemplate
  endpoint:
    path: /api/v1/fooControlPlaneTemplates
    method: GET
    data_selector: items
- name: FooControlPlaneTemplateList
  endpoint:
    path: /api/v1/fooControlPlaneTemplateLists
    method: GET
    data_selector: items
- name: cluster_template
  endpoint:
    path: /cluster-template.yaml
    method: GET
    data_selector: templates
    params: {}
- name: cluster_class
  endpoint:
    path: /clusterclass-{ClusterClass-name}.yaml
    method: GET
    data_selector: classes
    params: {}
- name: Cluster
  endpoint:
    path: /cluster
    method: GET
    data_selector: metadata
    params: {}
- name: MachineDeployment
  endpoint:
    path: /machinedeployment
    method: GET
    data_selector: metadata
    params: {}
- name: MachineSet
  endpoint:
    path: /machineset
    method: GET
    data_selector: metadata
    params: {}
- name: ClusterClass
  endpoint:
    path: /v1beta2/clusterclasses
    method: GET
- name: KubeadmConfig
  endpoint:
    path: /kubeadmconfigs
    method: GET
- name: kubeadmControlPlane
  endpoint:
    path: /controlplane.cluster.x-k8s.io/v1beta2/kubeadmControlPlanes
    method: GET
    data_selector: items
- name: machines
  endpoint:
    path: /api/v1/machines
    method: GET
    data_selector: items
    params: {}
- name: machineSets
  endpoint:
    path: /api/v1/machineSets
    method: GET
    data_selector: items
    params: {}
- name: machineDeployments
  endpoint:
    path: /api/v1/machineDeployments
    method: GET
    data_selector: items
    params: {}
- name: vpc
  endpoint:
    params:
      IBMVPC_REGION: us-south
      IBMVPC_ZONE: us-south-1
      IBMVPC_RESOURCEGROUP: <your-resource-group-id>
      IBMVPC_NAME: ibm-vpc-0
      IBMVPC_IMAGE_ID: <you-image-id>
      IBMVPC_PROFILE: bx2-4x16
      IBMVPC_SSHKEY_ID: <your-sshkey-id>
- name: powervs
  endpoint:
    params:
      IBMPOWERVS_SSHKEY_NAME: <your-ssh-key>
      IBMPOWERVS_VIP: <internal-ip>
      IBMPOWERVS_VIP_EXTERNAL: <external-ip>
      IBMPOWERVS_VIP_CIDR: 29
      IBMPOWERVS_IMAGE_NAME: <your-capi-image-name>
      IBMPOWERVS_SERVICE_INSTANCE_ID: <service-instance-id>
      IBMPOWERVS_NETWORK_NAME: <your-capi-network-name>
- name: workload_clusters
  endpoint:
    path: /RPC2
    method: POST
    data_selector: result
    params:
      cluster_name: one
- name: MicroK8sControlPlane
  endpoint:
    path: /api/v1beta1/microk8scontrolplane
    method: GET
    data_selector: spec
    params: {}
- name: MachineDeployment
  endpoint:
    path: /api/v1beta1/machinedeployment
    method: GET
    data_selector: spec
    params: {}
- name: machine_health_check
  endpoint:
    path: /machinhealthcheck
    method: POST
    data_selector: spec
    params: {}
- name: ClusterClass
  endpoint:
    path: /cluster.x-k8s.io/v1beta2
    method: GET
    data_selector: spec
    params: {}
- name: Cluster
  endpoint:
    path: /cluster.x-k8s.io/v1beta2
    method: GET
    data_selector: spec
    params: {}
- name: customImage
  endpoint:
    path: /spec/template/spec/customImage
    method: add
    data_selector: valueFrom.template
    params: {}
- name: httpProxy
  endpoint:
    path: /spec/template/spec/httpProxy/url
    method: add
    data_selector: valueFrom.variable
    params: {}
- name: mdConfig
  endpoint:
    path: /spec/template/spec/customImage
    method: add
    data_selector: valueFrom.template
    params: {}
- name: dnsServers
  endpoint:
    path: /spec/template/spec/dnsServers
    method: add
    data_selector: valueFrom.variable
    params: {}
- name: dnsServer
  endpoint:
    path: /spec/template/spec/dnsServer
    method: add
    data_selector: valueFrom.variable
    params: {}
- name: etcdImageTag
  endpoint:
    path: /spec/template/spec/kubeadmConfigSpec/clusterConfiguration/etcd
    method: add
    data_selector: valueFrom.template
    params: {}
- name: imageRepository
  endpoint:
    path: /spec/template/spec/kubeadmConfigSpec/clusterConfiguration/imageRepository
    method: add
    data_selector: value
    params: {}
- name: BeforeClusterCreate
  endpoint:
    path: /BeforeClusterCreate
    method: POST
    data_selector: status
    params: {}
- name: AfterControlPlaneInitialized
  endpoint:
    path: /AfterControlPlaneInitialized
    method: POST
    data_selector: status
    params: {}
- name: BeforeClusterUpgrade
  endpoint:
    path: /BeforeClusterUpgrade
    method: POST
    data_selector: status
    params:
      fromKubernetesVersion: v1.21.2
      toKubernetesVersion: v1.22.0
- name: AfterControlPlaneUpgrade
  endpoint:
    path: /AfterControlPlaneUpgrade
    method: POST
    data_selector: status
    params:
      kubernetesVersion: v1.22.0
- name: AfterClusterUpgrade
  endpoint:
    path: /AfterClusterUpgrade
    method: POST
    data_selector: status
    params:
      kubernetesVersion: v1.22.0
- name: BeforeClusterDelete
  endpoint:
    path: /BeforeClusterDelete
    method: POST
    data_selector: status
    params: {}
- name: GeneratePatches
  endpoint:
    path: /GeneratePatches
    method: POST
    data_selector: items
    params: {}
- name: ValidateTopology
  endpoint:
    path: /ValidateTopology
    method: POST
    data_selector: status
    params: {}
- name: DiscoverVariables
  endpoint:
    path: /DiscoverVariables
    method: POST
    data_selector: variables
    params: {}
- name: metrics
  endpoint:
    path: /metrics
    method: GET
    data_selector: metrics
    params: {}
- name: pprof
  endpoint:
    path: /debug/pprof/
    method: GET
    data_selector: pprof
    params: {}
- name: podSecurityStandard
  endpoint:
    path: /spec/template/spec/kubeadmConfigSpec/clusterConfiguration/apiServer/extraArgs
    method: add
    data_selector: value
    params: {}
- name: extraVolumes
  endpoint:
    path: /spec/template/spec/kubeadmConfigSpec/clusterConfiguration/apiServer/extraVolumes
    method: add
    data_selector: value
    params: {}
- name: files
  endpoint:
    path: /spec/template/spec/kubeadmConfigSpec/files
    method: add
    data_selector: valueFrom.template
    params: {}
- name: kubeadmcontrolplanes
  endpoint:
    path: /kubeadmcontrolplanes
    method: GET
- name: machinedeployments
  endpoint:
    path: /machinedeployments
    method: GET
- name: Machine
  endpoint:
    path: /Machine
    method: POST
    data_selector: status
    params: {}
- name: MachinePool
  endpoint:
    path: /MachinePool
    method: POST
    data_selector: status
    params: {}
- name: logs
  endpoint:
    path: /logs
    method: GET
    data_selector: msg
    params:
      Cluster_name: my-cluster
      ReconcileID: 6f6ad971-bdb6-4fa3-b803-ef81c5c8f9d0
      controller: cluster
- name: provider_logs
  endpoint:
    path: /provider-logs
    method: GET
    data_selector: msg
    params:
      app: =capd-controller-manager|capi-kubeadm-bootstrap-controller-manager|capi-kubeadm-control-plane-controller-manager
      Cluster_name: my-cluster
      Machine_name: my-cluster-linux-worker-1
- name: MailgunCluster
  endpoint:
    path: /clusters
    method: POST
    data_selector: data
- name: MailgunMachine
  endpoint:
    path: /machines
    method: POST
    data_selector: data
- name: mailgun_cluster
  endpoint:
    path: /clusters
    method: POST
    data_selector: result
    params: {}
- name: fooclusters
  endpoint:
    path: /fooclusters
    method: GET
    data_selector: items
- name: fooclustertemplates
  endpoint:
    path: /fooclustertemplates
    method: GET
    data_selector: items
- name: InfraMachine
  endpoint:
    path: /inframachines
    method: GET
    data_selector: items
    params: {}
- name: InfraMachineTemplate
  endpoint:
    path: /inframachinetemplates
    method: GET
    data_selector: items
    params: {}
- name: control_plane
  endpoint:
    path: /controlPlane
    method: GET
    data_selector: controlPlane
- name: FooControlPlaneTemplate
  endpoint:
    path: /api/v1/fooControlPlaneTemplates
    method: GET
    data_selector: items
- name: FooControlPlaneTemplateList
  endpoint:
    path: /api/v1/fooControlPlaneTemplateLists
    method: GET
    data_selector: items
- name: cluster_template
  endpoint:
    path: /cluster-template.yaml
    method: GET
    data_selector: templates
    params: {}
- name: clusterclass_definition
  endpoint:
    path: /clusterclass-{ClusterClass-name}.yaml
    method: GET
    data_selector: definitions
    params: {}
- name: Cluster
  endpoint:
    path: /cluster
    method: GET
    data_selector: items
- name: MachineDeployment
  endpoint:
    path: /machinedeployment
    method: GET
    data_selector: items
- name: MachineSet
  endpoint:
    path: /machineset
    method: GET
    data_selector: items
- name: ClusterClass
  endpoint:
    path: /v1beta2
    method: GET
- name: kubeadm_config_v1beta1
  endpoint:
    path: /kubeadm/config/v1beta1
    method: GET
    data_selector: conditions
    params: {}
- name: kubeadm_config_v1beta2
  endpoint:
    path: /kubeadm/config/v1beta2
    method: GET
    data_selector: conditions
    params: {}
- name: kubeadm_config_spec
  endpoint:
    path: /kubeadm/config/spec
    method: GET
    data_selector: spec
    params: {}
- name: ClusterResourceSet
  endpoint:
    path: /addons.cluster.x-k8s.io/v1beta2/ClusterResourceSet
    method: GET
- name: ClusterResourceSetBinding
  endpoint:
    path: /addons.cluster.x-k8s.io/v1beta2/ClusterResourceSetBinding
    method: GET
- name: ExtensionConfig
  endpoint:
    path: /runtime.cluster.x-k8s.io/v1beta2/ExtensionConfig
    method: GET
- name: IPAddress
  endpoint:
    path: /ipam.cluster.x-k8s.io/v1beta2/IPAddress
    method: GET
- name: IPAddressClaim
  endpoint:
    path: /ipam.cluster.x-k8s.io/v1beta2/IPAddressClaim
    method: GET
- name: machine_template
  endpoint:
    path: /machines
    method: GET
    data_selector: machines
    params: {}
- name: router_template
  endpoint:
    path: /routers
    method: GET
    data_selector: routers
    params: {}
- name: KubeadmConfig
  endpoint:
    path: /bootstrap.cluster.x-k8s.io/v1beta2/kubeadmconfigs
    method: GET
    data_selector: items
    params: {}
- name: Machine
  endpoint:
    path: /cluster.x-k8s.io/v1beta2/machines
    method: GET
    data_selector: items
    params: {}
- name: Cluster
  endpoint:
    path: /cluster.x-k8s.io/v1beta2/clusters
    method: GET
    data_selector: items
    params: {}
- name: MicroK8sControlPlane
  endpoint:
    path: /api/v1/MicroK8sControlPlane
    method: POST
    data_selector: spec
    params: {}
- name: MachineDeployment
  endpoint:
    path: /api/v1/MachineDeployment
    method: POST
    data_selector: spec
    params: {}
- name: KubeadmControlPlane
  endpoint:
    path: /kubeadmcontrolplanes
    method: GET
    data_selector: items
- name: MachineDeployment
  endpoint:
    path: /machinedeployments
    method: GET
    data_selector: items
- name: MachineDeployment
  endpoint:
    path: /apis/cluster.x-k8s.io/v1alpha4/machinedeployments
    method: GET
    data_selector: items
    params: {}
- name: MachineSet
  endpoint:
    path: /apis/cluster.x-k8s.io/v1alpha4/machinesets
    method: GET
    data_selector: items
    params: {}
- name: MachinePool
  endpoint:
    path: /apis/cluster.x-k8s.io/v1alpha4/machinepools
    method: GET
    data_selector: items
    params: {}
- name: MachineHealthCheck
  endpoint:
    path: /api/v1beta2/MachineHealthCheck
    method: POST
    data_selector: spec
    params: {}
- name: cluster
  endpoint:
    path: /api/v1beta2/clusters
    method: GET
    data_selector: items
- name: customImage
  endpoint:
    path: /spec/template/spec/customImage
    method: add
    data_selector: valueFrom.template
    params: {}
- name: httpProxy
  endpoint:
    path: /spec/template/spec/httpProxy/url
    method: add
    data_selector: valueFrom.variable
    params: {}
- name: mdConfig
  endpoint:
    path: /spec/template/spec/customImage
    method: add
    data_selector: valueFrom.template
    params: {}
- name: dnsServers
  endpoint:
    path: /spec/template/spec/dnsServers
    method: add
    data_selector: valueFrom.variable
    params: {}
- name: dnsServer
  endpoint:
    path: /spec/template/spec/dnsServer
    method: add
    data_selector: valueFrom.variable
    params: {}
- name: etcdImageTag
  endpoint:
    path: /spec/template/spec/kubeadmConfigSpec/clusterConfiguration/etcd
    method: add
    data_selector: valueFrom.template
    params: {}
- name: imageRepository
  endpoint:
    path: /spec/template/spec/kubeadmConfigSpec/clusterConfiguration/imageRepository
    method: add
    data_selector: value
    params: {}
- name: control_plane
  endpoint:
    path: /spec/topology/controlPlane
    method: PATCH
    data_selector: replicas
- name: machine_deployment
  endpoint:
    path: /spec/topology/workers/machineDeployments
    method: PATCH
    data_selector: replicas
- name: cluster_variables
  endpoint:
    path: /spec/topology/variables
    method: PATCH
    data_selector: value
- name: BeforeClusterCreate
  endpoint:
    path: /beforeclustercreate
    method: POST
    data_selector: status
    params: {}
- name: AfterControlPlaneInitialized
  endpoint:
    path: /aftercontrolplaneinitialized
    method: POST
    data_selector: status
    params: {}
- name: BeforeClusterUpgrade
  endpoint:
    path: /beforeclusterupgrade
    method: POST
    data_selector: status
    params: {}
- name: AfterControlPlaneUpgrade
  endpoint:
    path: /aftercontrolplaneupgrade
    method: POST
    data_selector: status
    params: {}
- name: AfterClusterUpgrade
  endpoint:
    path: /afterclusterupgrade
    method: POST
    data_selector: status
    params: {}
- name: BeforeClusterDelete
  endpoint:
    path: /beforeclusterdelete
    method: POST
    data_selector: status
    params: {}
- name: DiscoverVariablesRequest
  endpoint:
    path: /v1alpha1/discover-variables
    method: GET
- name: DiscoverVariablesResponse
  endpoint:
    path: /v1alpha1/discover-variables-response
    method: GET
- name: metrics
  endpoint:
    path: /metrics
    method: GET
- name: pprof
  endpoint:
    path: /debug/pprof/*
    method: GET
- name: loglevel
  endpoint:
    path: /debug/flags/v
    method: PUT
- name: podSecurityStandard
  endpoint:
    path: /spec/template/spec/kubeadmConfigSpec/clusterConfiguration/apiServer/extraArgs
    method: ADD
    data_selector: value
    params: {}
- name: admission-pss
  endpoint:
    path: /spec/template/spec/kubeadmConfigSpec/clusterConfiguration/apiServer/extraVolumes
    method: ADD
    data_selector: value
    params: {}
- name: files
  endpoint:
    path: /spec/template/spec/kubeadmConfigSpec/files
    method: ADD
    data_selector: valueFrom.template
    params: {}
- name: provider
  endpoint:
    path: /generate/provider
    method: GET
    data_selector: components
- name: cluster
  endpoint:
    path: /generate/cluster
    method: GET
    data_selector: components
- name: kubeadmcontrolplanes
  endpoint:
    path: /kubeadmcontrolplanes
    method: GET
- name: machinedeployments
  endpoint:
    path: /machinedeployments
    method: GET
- name: Cluster
  endpoint:
    path: /api/v1/cluster
    method: GET
    data_selector: items
    params: {}
- name: MachineDeployment
  endpoint:
    path: /api/v1/machinedeployments
    method: GET
    data_selector: items
    params: {}
- name: MachineSet
  endpoint:
    path: /api/v1/machinesets
    method: GET
    data_selector: items
    params: {}
- name: Machine
  endpoint:
    path: /machine
    method: GET
    data_selector: machines
- name: MachinePool
  endpoint:
    path: /machinepool
    method: GET
    data_selector: machinePools
- name: MachineHealthCheck
  endpoint:
    path: /machinehealthcheck
    method: GET
    data_selector: healthChecks
- name: capi-controller-manager
  endpoint:
    path: '{app="capi-controller-manager"}'
    method: GET
    data_selector: msg
    params: {}
- name: capd-controller-manager
  endpoint:
    path: '{app=~"capd-controller-manager|capi-kubeadm-bootstrap-controller-manager|capi-kubeadm-control-plane-controller-manager"}'
    method: GET
    data_selector: msg
    params: {}
- name: MailgunCluster
  endpoint:
    path: /clusters
    method: POST
    data_selector: cluster
    params: {}
- name: MailgunMachine
  endpoint:
    path: /machines
    method: POST
    data_selector: machine
    params: {}
- name: MailgunCluster
  endpoint:
    path: /v3/mailgun/cluster
    method: POST
    data_selector: cluster
    params: {}
- name: fooclusters
  endpoint:
    path: /fooclusters
    method: GET
    data_selector: items
- name: fooclustertemplates
  endpoint:
    path: /fooclustertemplates
    method: GET
    data_selector: items
- name: InfraMachine
  endpoint:
    path: /developer/providers/contracts/infra-machine#inframachine-inframachinelist-resource-definition
    method: GET
    data_selector: items
    params: {}
- name: InfraMachineTemplate
  endpoint:
    path: /developer/providers/contracts/infra-machine#inframachinetemplate-inframachinetemplatelist-resource-definition
    method: GET
    data_selector: items
    params: {}
- name: FooControlPlane
  endpoint:
    path: /controlplane
    method: GET
    data_selector: status
    params: {}
- name: FooControlPlaneTemplate
  endpoint:
    path: /FooControlPlaneTemplate
    method: GET
    data_selector: items
    params: {}
- name: FooControlPlaneTemplateList
  endpoint:
    path: /FooControlPlaneTemplateList
    method: GET
    data_selector: items
    params: {}
- name: cluster_template
  endpoint:
    path: /cluster-template.yaml
    method: GET
    data_selector: templates
    params: {}
- name: clusterclass_definition
  endpoint:
    path: /clusterclass-{ClusterClass-name}.yaml
    method: GET
    data_selector: definitions
    params: {}
- name: Cluster
  endpoint:
    path: /clusters
    method: GET
    data_selector: items
    params: {}
- name: MachineDeployment
  endpoint:
    path: /machinedeployments
    method: GET
    data_selector: items
    params: {}
- name: MachineSet
  endpoint:
    path: /machinesets
    method: GET
    data_selector: items
    params: {}
- name: ClusterClass
  endpoint:
    path: /clusterclass
    method: GET
    data_selector: conditions
    params: {}
- name: KubeadmConfig
  endpoint:
    path: /services/data/v1beta1/kubeadmConfig
    method: GET
    data_selector: items
    params: {}
- name: KubeadmConfigTemplate
  endpoint:
    path: /services/data/v1beta1/kubeadmConfigTemplate
    method: GET
    data_selector: items
    params: {}
- name: KubeadmControlPlane
  endpoint:
    path: /services/data/v1beta1/kubeadmControlPlane
    method: GET
    data_selector: items
    params: {}
- name: KubeadmControlPlane
  endpoint:
    path: /controlplane.cluster.x-k8s.io/v1beta2/kubeadmcontrolplanes
    method: GET
- name: KubeadmControlPlaneTemplate
  endpoint:
    path: /controlplane.cluster.x-k8s.io/v1beta2/kubeadmcontrolplanetemplates
    method: GET
- name: ClusterResourceSet
  endpoint:
    path: /clusterresourceset.cluster.x-k8s.io/v1beta2/clusterresourcesets
    method: GET
- name: Cluster
  endpoint:
    path: /clusters
    method: GET
    data_selector: clusters
    params: {}
- name: Machines
  endpoint:
    path: /machines
    method: GET
    data_selector: machines
    params: {}
- name: VPC
  endpoint:
    path: /v1/vpc
    method: GET
    data_selector: resources
- name: PowerVS
  endpoint:
    path: /v1/powervs
    method: GET
    data_selector: resources
- name: workload_cluster
  endpoint:
    path: /clusters
    method: GET
    data_selector: clusters
    params: {}
- name: microk8s_control_plane
  endpoint:
    path: /api/v1beta2/microk8s/controlplane
    method: GET
    data_selector: items
    params: {}
- name: machine_deployment
  endpoint:
    path: /api/v1beta2/machinedeployment
    method: GET
    data_selector: items
    params: {}
- name: KubeadmControlPlane
  endpoint:
    path: /clusters
    method: GET
    data_selector: items
    params: {}
- name: MachineDeployment
  endpoint:
    path: /machine-deployments
    method: GET
    data_selector: items
    params: {}
- name: MachineSet
  endpoint:
    path: /machine-sets
    method: GET
    data_selector: items
    params: {}
- name: MachinePool
  endpoint:
    path: /machine-pools
    method: GET
    data_selector: items
    params: {}
- name: MachineHealthCheck
  endpoint:
    path: /machinehealthchecks
    method: GET
    data_selector: items
    params: {}
- name: ClusterClass
  endpoint:
    path: /cluster.x-k8s.io/v1beta2/ClusterClass
    method: GET
    data_selector: items
- name: Cluster
  endpoint:
    path: /cluster.x-k8s.io/v1beta2/Cluster
    method: GET
    data_selector: items
- name: customImage
  endpoint:
    path: /spec/template/spec/customImage
    method: add
    data_selector: valueFrom.template
    params: {}
- name: httpProxy
  endpoint:
    path: /spec/template/spec/httpProxy/url
    method: add
    data_selector: valueFrom.variable
    params: {}
- name: mdConfig
  endpoint:
    path: /spec/template/spec/customImage
    method: add
    data_selector: valueFrom.template
    params: {}
- name: dnsServers
  endpoint:
    path: /spec/template/spec/dnsServers
    method: add
    data_selector: valueFrom.variable
    params: {}
- name: dnsServer
  endpoint:
    path: /spec/template/spec/dnsServer
    method: add
    data_selector: valueFrom.variable
    params: {}
- name: Cluster
  endpoint:
    path: /clusters
    method: PATCH
    data_selector: spec
    params: {}
- name: BeforeClusterCreate
  endpoint:
    path: /v1alpha1/beforeClusterCreate
    method: POST
    data_selector: status
    params: {}
- name: AfterControlPlaneInitialized
  endpoint:
    path: /v1alpha1/afterControlPlaneInitialized
    method: POST
    data_selector: status
    params: {}
- name: BeforeClusterUpgrade
  endpoint:
    path: /v1alpha1/beforeClusterUpgrade
    method: POST
    data_selector: status
    params: {}
- name: AfterControlPlaneUpgrade
  endpoint:
    path: /v1alpha1/afterControlPlaneUpgrade
    method: POST
    data_selector: status
    params: {}
- name: AfterClusterUpgrade
  endpoint:
    path: /v1alpha1/afterClusterUpgrade
    method: POST
    data_selector: status
    params: {}
- name: BeforeClusterDelete
  endpoint:
    path: /v1alpha1/beforeClusterDelete
    method: POST
    data_selector: status
    params: {}
- name: DiscoverVariablesRequest
  endpoint:
    path: /hooks/runtime/cluster.x-k8s.io/v1alpha1/discovervariablesrequest
    method: POST
    data_selector: variables
- name: DiscoverVariablesResponse
  endpoint:
    path: /hooks/runtime/cluster.x-k8s.io/v1alpha1/discovervariablesresponse
    method: GET
    data_selector: variables
- name: metrics
  endpoint:
    path: /metrics
    method: GET
    data_selector: metrics
    params: {}
- name: pprof
  endpoint:
    path: /debug/pprof/*
    method: GET
    data_selector: profiles
    params: {}
- name: loglevel
  endpoint:
    path: /debug/flags/v
    method: PUT
    data_selector: log level update
    params: {}
- name: podSecurityStandard
  endpoint:
    path: /spec/template/spec/kubeadmConfigSpec/clusterConfiguration/apiServer/extraArgs
    method: ADD
    data_selector: value
    params: {}
- name: kubeadmcontrolplanes
  endpoint:
    path: /kubeadmcontrolplanes
    method: GET
- name: machinedeployments
  endpoint:
    path: /machinedeployments
    method: GET
- name: Cluster
  endpoint:
    path: /api/cluster
    method: GET
    data_selector: items
    params: {}
- name: Machine
  endpoint:
    path: /api/machine
    method: GET
    data_selector: items
    params: {}
- name: MachineSet
  endpoint:
    path: /api/machineset
    method: GET
    data_selector: items
    params: {}
- name: MachineDeployment
  endpoint:
    path: /api/machinedeployment
    method: GET
    data_selector: items
    params: {}
- name: Machine
  endpoint:
    path: /machines
    method: GET
    data_selector: machines
    params: {}
- name: MachinePool
  endpoint:
    path: /machinepools
    method: GET
    data_selector: machinePools
    params: {}
- name: MachineHealthCheck
  endpoint:
    path: /machinehealthchecks
    method: GET
    data_selector: machineHealthChecks
    params: {}
- name: cluster_logs
  endpoint:
    path: /logs
    method: GET
    data_selector: msg
    params:
      Cluster_name: my-cluster
      reconcileID: 6f6ad971-bdb6-4fa3-b803-ef81c5c8f9d0
- name: provider_logs
  endpoint:
    path: /logs
    method: GET
    data_selector: msg
    params:
      app: =~"capd-controller-manager|capi-kubeadm-bootstrap-controller-manager|capi-kubeadm-control-plane-controller-manager"
      Cluster_name: my-cluster
      Machine_name: my-cluster-linux-worker-1
- name: Cluster
  endpoint:
    path: /api/v1/cluster
    method: POST
    data_selector: items
    params: {}
- name: MailgunCluster
  endpoint:
    path: /v1alpha1/mailgunclusters
    method: POST
    data_selector: data
- name: MailgunMachine
  endpoint:
    path: /v1alpha1/mailgunmachines
    method: POST
    data_selector: data
- name: MailgunCluster
  endpoint:
    path: /v3/mailgun/cluster
    method: POST
    data_selector: cluster
- name: fooclusters
  endpoint:
    path: /services/data/v1/sobjects/FooCluster
    method: GET
    data_selector: items
    params: {}
- name: fooclustertemplates
  endpoint:
    path: /services/data/v1/sobjects/FooClusterTemplate
    method: GET
    data_selector: items
    params: {}
- name: InfraMachine
  endpoint:
    path: /inframachines
    method: GET
    data_selector: items
- name: InfraMachineTemplate
  endpoint:
    path: /inframachinetemplates
    method: GET
    data_selector: items
- name: FooControlPlane
  endpoint:
    path: /controlPlane
    method: GET
    data_selector: data
    params: {}
- name: FooControlPlaneTemplate
  endpoint:
    path: /FooControlPlaneTemplate
    method: GET
- name: FooControlPlaneTemplateList
  endpoint:
    path: /FooControlPlaneTemplateList
    method: GET
- name: cluster_template
  endpoint:
    path: /cluster-template.yaml
    method: GET
- name: clusterclass_definition
  endpoint:
    path: /clusterclass-{ClusterClass-name}.yaml
    method: GET
- name: MachineSet
  endpoint:
    path: /v1beta2/machinesets
    method: GET
- name: MachinePool
  endpoint:
    path: /v1beta2/machinepools
    method: GET
- name: Machine
  endpoint:
    path: /v1beta2/machines
    method: GET
- name: MachineHealthCheck
  endpoint:
    path: /v1beta2/machinehealthchecks
    method: GET
- name: ClusterClass
  endpoint:
    path: /api/v1beta2/clusterclasses
    method: GET
    data_selector: items
    params: {}
- name: clusterConfiguration
  endpoint:
    path: /bootstrap.cluster.x-k8s.io/v1beta2/kubeadmconfig
    method: GET
    data_selector: spec
    params: {}
- name: ClusterResourceSet
  endpoint:
    path: /addons.cluster.x-k8s.io/v1beta1/ClusterResourceSet
    method: GET
    data_selector: resources
    params: {}
- name: ClusterResourceSetBinding
  endpoint:
    path: /addons.cluster.x-k8s.io/v1beta2/ClusterResourceSetBinding
    method: GET
    data_selector: resources
    params: {}
- name: ExtensionConfig
  endpoint:
    path: /runtime.cluster.x-k8s.io/v1beta2/ExtensionConfig
    method: GET
    data_selector: resources
    params: {}
- name: IPAddress
  endpoint:
    path: /ipam.cluster.x-k8s.io/v1beta2/IPAddress
    method: GET
    data_selector: resources
    params: {}
- name: IPAddressClaim
  endpoint:
    path: /ipam.cluster.x-k8s.io/v1beta2/IPAddressClaim
    method: GET
    data_selector: resources
    params: {}
- name: machines
  endpoint:
    path: /machines
    method: GET
    data_selector: items
- name: clusters
  endpoint:
    path: /clusters
    method: GET
    data_selector: items
- name: machinedeployments
  endpoint:
    path: /machinedeployments
    method: GET
    data_selector: items
- name: machinesets
  endpoint:
    path: /machinesets
    method: GET
    data_selector: items
- name: management_cluster
  endpoint:
    path: /init
    method: POST
- name: provider_components
  endpoint:
    path: /reference/glossary#provider-components
    method: GET
- name: VPC
  endpoint:
    path: /v1/vpcs
    method: GET
    data_selector: vpcs
- name: clusters
  endpoint:
    path: /clusters
    method: GET
    data_selector: clusters
- name: KubeadmConfig
  endpoint:
    path: /bootstrap.cluster.x-k8s.io/v1beta2/kubeadmconfigs
    method: GET
    data_selector: items
    params: {}
- name: DockerCluster
  endpoint:
    path: /infrastructure.cluster.x-k8s.io/v1beta2/dockerclusters
    method: GET
    data_selector: items
    params: {}
- name: Machine
  endpoint:
    path: /cluster.x-k8s.io/v1beta2/machines
    method: GET
    data_selector: items
    params: {}
- name: MicroK8sControlPlane
  endpoint:
    path: /api/v1alpha1/microk8scontrolplanes
    method: GET
    data_selector: items
    params: {}
- name: MachineDeployment
  endpoint:
    path: /api/v1alpha1/machinedeployments
    method: GET
    data_selector: items
    params: {}
- name: KubeadmControlPlane
  endpoint:
    method: GET
- name: MachineDeployment
  endpoint:
    method: GET
- name: machine_health_check
  endpoint:
    path: /api/machine_health_check
    method: GET
    data_selector: records
- name: ClusterClass
  endpoint:
    path: /cluster-class
    method: GET
    data_selector: items
- name: Cluster
  endpoint:
    path: /clusters
    method: GET
    data_selector: items
- name: customImage
  endpoint:
    path: /spec/template/spec/customImage
    method: ADD
    data_selector: valueFrom.template
    params: {}
- name: httpProxy
  endpoint:
    path: /spec/template/spec/httpProxy/url
    method: ADD
    data_selector: valueFrom.variable
    params: {}
- name: mdConfig
  endpoint:
    path: /spec/template/spec/customImage
    method: ADD
    data_selector: valueFrom.template
    params: {}
- name: dnsServers
  endpoint:
    path: /spec/template/spec/dnsServers
    method: ADD
    data_selector: valueFrom.variable
    params: {}
- name: dnsServer
  endpoint:
    path: /spec/template/spec/dnsServer
    method: ADD
    data_selector: valueFrom.variable
    params: {}
- name: etcdImageTag
  endpoint:
    path: /spec/template/spec/kubeadmConfigSpec/clusterConfiguration/etcd
    method: ADD
    data_selector: valueFrom.template
    params: {}
- name: imageRepository
  endpoint:
    path: /spec/template/spec/kubeadmConfigSpec/clusterConfiguration/imageRepository
    method: ADD
    data_selector: value
    params: {}
- name: controlPlane
  endpoint:
    path: /spec/topology/controlPlane
    method: PATCH
    data_selector: spec
    params: {}
- name: machineDeployments
  endpoint:
    path: /spec/topology/workers/machineDeployments
    method: PATCH
    data_selector: spec
    params: {}
- name: BeforeClusterCreate
  endpoint:
    path: /hooks/runtime/cluster.x-k8s.io/v1alpha1/before-cluster-create
    method: POST
    data_selector: status
    params: {}
- name: AfterControlPlaneInitialized
  endpoint:
    path: /hooks/runtime/cluster.x-k8s.io/v1alpha1/after-control-plane-initialized
    method: POST
    data_selector: status
    params: {}
- name: BeforeClusterUpgrade
  endpoint:
    path: /hooks/runtime/cluster.x-k8s.io/v1alpha1/before-cluster-upgrade
    method: POST
    data_selector: status
    params: {}
- name: AfterControlPlaneUpgrade
  endpoint:
    path: /hooks/runtime/cluster.x-k8s.io/v1alpha1/after-control-plane-upgrade
    method: POST
    data_selector: status
    params: {}
- name: AfterClusterUpgrade
  endpoint:
    path: /hooks.runtime.cluster.x-k8s.io/v1alpha1/after-cluster-upgrade
    method: POST
    data_selector: status
    params: {}
- name: BeforeClusterDelete
  endpoint:
    path: /hooks/runtime/cluster.x-k8s.io/v1alpha1/before-cluster-delete
    method: POST
    data_selector: status
    params: {}
- name: GeneratePatches
  endpoint:
    path: /hooks/runtime/cluster.x-k8s.io/v1alpha1/generate-patches
    method: POST
    data_selector: items
    params: {}
- name: ValidateTopology
  endpoint:
    path: /hooks/runtime/cluster.x-k8s.io/v1alpha1/validate-topology
    method: POST
    data_selector: status
    params: {}
- name: etcdImageTag
  endpoint:
    path: /etcdImageTag
    method: GET
    data_selector: schema
- name: preLoadImages
  endpoint:
    path: /preLoadImages
    method: GET
    data_selector: schema
- name: podSecurityStandard
  endpoint:
    path: /podSecurityStandard
    method: GET
    data_selector: schema
- name: metrics
  endpoint:
    path: /metrics
    method: GET
- name: pprof
  endpoint:
    path: /debug/pprof/*
    method: GET
- name: log_level
  endpoint:
    path: /debug/flags/v
    method: PUT
- name: podSecurityStandard
  endpoint:
    path: /spec/template/spec/kubeadmConfigSpec/clusterConfiguration/apiServer/extraArgs
    method: add
    data_selector: value
    params: {}
- name: extraVolumes
  endpoint:
    path: /spec/template/spec/kubeadmConfigSpec/clusterConfiguration/apiServer/extraVolumes
    method: add
    data_selector: value
    params: {}
- name: files
  endpoint:
    path: /spec/template/spec/kubeadmConfigSpec/files
    method: add
    data_selector: valueFrom.template
    params: {}
- name: provider
  endpoint:
    path: /generate/provider
    method: GET
    data_selector: components
    params: {}
- name: cluster
  endpoint:
    path: /generate/cluster
    method: GET
    data_selector: components
    params: {}
- name: providers
  endpoint:
    path: /config/repositories
    method: GET
    data_selector: providers
    params: {}
- name: cert-manager
  endpoint:
    path: /cert-manager/config
    method: GET
    data_selector: cert-manager
    params: {}
- name: Machine
  endpoint:
    path: /developer/providers/contracts/bootstrap-config#bootstrapconfig-initialization-completed
    method: GET
- name: MachinePool
  endpoint:
    path: /developer/providers/contracts/bootstrap-config#bootstrapconfig-conditions
    method: GET
- name: MailgunCluster
  endpoint:
    path: /clusters
    method: POST
    data_selector: cluster
    params: {}
- name: MailgunMachine
  endpoint:
    path: /machines
    method: POST
    data_selector: machine
    params: {}
- name: MailgunCluster
  endpoint:
    path: /v3/mailgun.org/clusters
    method: POST
    data_selector: cluster
    params: {}
- name: FooCluster
  endpoint:
    path: /fooclusters
    method: GET
    data_selector: items
    params: {}
- name: FooClusterList
  endpoint:
    path: /fooclusterlist
    method: GET
    data_selector: items
    params: {}
- name: FooClusterTemplate
  endpoint:
    path: /fooclustertemplates
    method: GET
    data_selector: items
    params: {}
- name: FooClusterTemplateList
  endpoint:
    path: /fooclustertemplatelist
    method: GET
    data_selector: items
    params: {}
- name: InfraMachine
  endpoint:
    path: /inframachines
    method: GET
    data_selector: items
- name: InfraMachineTemplate
  endpoint:
    path: /inframachinetemplates
    method: GET
    data_selector: items
- name: BootstrapConfig
  endpoint:
    path: /bootstrapconfigs
    method: GET
    data_selector: items
    params: {}
- name: BootstrapConfigList
  endpoint:
    path: /bootstrapconfiglists
    method: GET
    data_selector: items
    params: {}
- name: controlPlane
  endpoint:
    path: /controlPlane
    method: GET
    data_selector: spec
    params: {}
- name: FooControlPlaneTemplate
  endpoint:
    path: /FooControlPlaneTemplate
    method: GET
    data_selector: items
    params: {}
- name: FooControlPlaneTemplateList
  endpoint:
    path: /FooControlPlaneTemplateList
    method: GET
    data_selector: items
    params: {}
- name: cluster_template
  endpoint:
    path: cluster-template.yaml
    method: GET
    data_selector: templates
    params: {}
- name: clusterclass_definition
  endpoint:
    path: clusterclass-{ClusterClass-name}.yaml
    method: GET
    data_selector: definitions
    params: {}
- name: MachineSet
  endpoint:
    path: /v1beta2/machinesets
    method: GET
    data_selector: items
- name: MachinePool
  endpoint:
    path: /v1beta2/machinepools
    method: GET
    data_selector: items
- name: Machine
  endpoint:
    path: /v1beta2/machines
    method: GET
    data_selector: items
- name: MachineHealthCheck
  endpoint:
    path: /v1beta2/machinehealthchecks
    method: GET
    data_selector: items
- name: ClusterClass
  endpoint:
    path: /clusterclass
    method: GET
- name: KubeadmConfig
  endpoint:
    path: /kubeadmconfig
    method: GET
- name: kubeadm_config
  endpoint:
    path: /api/v1beta2/kubeadmconfigs
    method: GET
    data_selector: items
    params: {}
- name: kubeadmControlPlane
  endpoint:
    path: /controlplane.cluster.x-k8s.io/v1beta2/kubeadmControlPlanes
    method: GET
- name: VPC
  endpoint:
    path: /v1/vpcs
    method: GET
- name: PowerVS
  endpoint:
    path: /v1/powervs
    method: GET
- name: workload_cluster
  endpoint:
    path: /cluster
    method: POST
- name: scaleway-secret
  endpoint:
    path: /api/v1/secrets
    method: POST
    data_selector: metadata
    params: {}
- name: KubeadmConfig
  endpoint:
    path: /kubeadmconfig
    method: GET
    data_selector: items
    params: {}
- name: DockerMachine
  endpoint:
    path: /dockermachine
    method: GET
    data_selector: items
    params: {}
- name: Cluster
  endpoint:
    path: /cluster
    method: GET
    data_selector: items
    params: {}
- name: MicroK8sControlPlane
  endpoint:
    path: /api/v1beta1/microk8scontrolplanes
    method: POST
    data_selector: spec
    params: {}
- name: MachineDeployment
  endpoint:
    path: /api/v1beta2/machinedeployments
    method: POST
    data_selector: spec
    params: {}
- name: MachineTemplate
  endpoint:
    path: /services/data/vXX.X/sobjects/MachineTemplate
    method: POST
    data_selector: records
- name: KubeadmControlPlane
  endpoint:
    path: /services/data/vXX.X/sobjects/KubeadmControlPlane
    method: PATCH
    data_selector: spec
- name: MachineDeployment
  endpoint:
    path: /services/data/vXX.X/sobjects/MachineDeployment
    method: PUT
    data_selector: spec
- name: MachineDeployment
  endpoint:
    path: /api/v1/MachineDeployment
    method: POST
    data_selector: items
- name: MachineSet
  endpoint:
    path: /api/v1/MachineSet
    method: POST
    data_selector: items
- name: MachinePool
  endpoint:
    path: /api/v1/MachinePool
    method: POST
    data_selector: items
- name: MachineHealthCheck
  endpoint:
    path: /services/data/vXX.X/sobjects/MachineHealthCheck
    method: POST
    data_selector: spec
    params: {}
- name: cluster
  endpoint:
    path: /api/v1/clusters
    method: GET
    data_selector: items
    params: {}
- name: customImage
  endpoint:
    path: /spec/template/spec/customImage
    method: add
    data_selector: valueFrom.template
    params: {}
- name: httpProxy
  endpoint:
    path: /spec/template/spec/httpProxy/url
    method: add
    data_selector: valueFrom.variable
    params: {}
- name: mdConfig
  endpoint:
    path: /spec/template/spec/customImage
    method: add
    data_selector: valueFrom.template
    params: {}
- name: dnsServers
  endpoint:
    path: /spec/template/spec/dnsServers
    method: add
    data_selector: valueFrom.variable
    params: {}
- name: dnsServer
  endpoint:
    path: /spec/template/spec/dnsServer
    method: add
    data_selector: valueFrom.variable
    params: {}
- name: etcdImageTag
  endpoint:
    path: /spec/template/spec/kubeadmConfigSpec/clusterConfiguration/etcd
    method: add
    data_selector: valueFrom.template
    params: {}
- name: imageRepository
  endpoint:
    path: /spec/template/spec/kubeadmConfigSpec/clusterConfiguration/imageRepository
    method: add
    data_selector: value
    params: {}
- name: BeforeClusterCreate
  endpoint:
    path: /hooks/runtime/cluster.x-k8s.io/v1alpha1/before-cluster-create
    method: POST
    data_selector: status
    params: {}
- name: AfterControlPlaneInitialized
  endpoint:
    path: /hooks/runtime/cluster.x-k8s.io/v1alpha1/after-control-plane-initialized
    method: POST
    data_selector: status
    params: {}
- name: BeforeClusterUpgrade
  endpoint:
    path: /hooks/runtime/cluster.x-k8s.io/v1alpha1/before-cluster-upgrade
    method: POST
    data_selector: status
    params: {}
- name: AfterControlPlaneUpgrade
  endpoint:
    path: /hooks/runtime/cluster.x-k8s.io/v1alpha1/after-control-plane-upgrade
    method: POST
    data_selector: status
    params: {}
- name: AfterClusterUpgrade
  endpoint:
    path: /hooks/runtime/cluster.x-k8s.io/v1alpha1/after-cluster-upgrade
    method: POST
    data_selector: status
    params: {}
- name: BeforeClusterDelete
  endpoint:
    path: /hooks/runtime/cluster.x-k8s.io/v1alpha1/before-cluster-delete
    method: POST
    data_selector: status
    params: {}
- name: workload_cluster
  endpoint:
    path: /clusters
    method: POST
    data_selector: cluster
    params: {}
- name: metrics
  endpoint:
    path: /metrics
    method: GET
- name: pprof
  endpoint:
    path: /debug/pprof
    method: GET
- name: loglevel
  endpoint:
    path: /debug/flags/v
    method: PUT
- name: podSecurityStandard
  endpoint:
    path: /spec/template/spec/kubeadmConfigSpec/clusterConfiguration/apiServer/extraArgs
    method: add
    data_selector: value
    params:
      admission-control-config-file: /etc/kubernetes/kube-apiserver-admission-pss.yaml
- name: extraVolumes
  endpoint:
    path: /spec/template/spec/kubeadmConfigSpec/clusterConfiguration/apiServer/extraVolumes
    method: add
    data_selector: value
    params:
      name: admission-pss
      hostPath: /etc/kubernetes/kube-apiserver-admission-pss.yaml
      mountPath: /etc/kubernetes/kube-apiserver-admission-pss.yaml
      readOnly: true
      pathType: File
- name: files
  endpoint:
    path: /spec/template/spec/kubeadmConfigSpec/files
    method: add
    data_selector: valueFrom
    params:
      template:
        content:
          apiVersion: apiserver.config.k8s.io/v1
          kind: AdmissionConfiguration
          plugins:
          - name: PodSecurity
            configuration:
              apiVersion: pod-security.admission.config.k8s.io/v1
              kind: PodSecurityConfiguration
              defaults:
                enforce: '{{ .podSecurity.enforce }}'
                enforce-version: latest
                audit: '{{ .podSecurity.audit }}'
                audit-version: latest
                warn: '{{ .podSecurity.warn }}'
                warn-version: latest
              exemptions:
                usernames: []
                runtimeClasses: []
                namespaces:
                - kube-system
        path: /etc/kubernetes/kube-apiserver-admission-pss.yaml
- name: generate_cluster
  endpoint:
    path: /generate/cluster
    method: POST
- name: generate_provider
  endpoint:
    path: /generate/provider
    method: POST
- name: generate_yaml
  endpoint:
    path: /generate/yaml
    method: POST
- name: get_kubeconfig
  endpoint:
    path: /get/kubeconfig
    method: GET
- name: describe_cluster
  endpoint:
    path: /describe/cluster
    method: GET
- name: move
  endpoint:
    path: /move
    method: POST
- name: upgrade
  endpoint:
    path: /upgrade
    method: POST
- name: delete
  endpoint:
    path: /delete
    method: DELETE
- name: kubeadmcontrolplanes
  endpoint:
    path: /kubeadmcontrolplanes
    method: GET
- name: machinedeployments
  endpoint:
    path: /machinedeployments
    method: GET
- name: Machine
  endpoint:
    path: /api/v1/machines
    method: GET
    data_selector: items
    params: {}
- name: MachinePool
  endpoint:
    path: /api/v1/machinepools
    method: GET
    data_selector: items
    params: {}
- name: capi-controller-manager
  endpoint:
    path: /capi-controller-manager
    method: GET
- name: capd-controller-manager
  endpoint:
    path: /capd-controller-manager
    method: GET
- name: capi-kubeadm-bootstrap-controller-manager
  endpoint:
    path: /capi-kubeadm-bootstrap-controller-manager
    method: GET
- name: capi-kubeadm-control-plane-controller-manager
  endpoint:
    path: /capi-kubeadm-control-plane-controller-manager
    method: GET
- name: MailgunCluster
  endpoint:
    path: /clusters
    method: POST
    data_selector: data
    params: {}
- name: MailgunMachine
  endpoint:
    path: /machines
    method: POST
    data_selector: data
    params: {}
- name: MailgunCluster
  endpoint:
    path: /v3/mailgun/cluster
    method: POST
- name: fooclusters
  endpoint:
    path: /fooclusters
    method: GET
    data_selector: items
- name: fooclustertemplates
  endpoint:
    path: /fooclustertemplates
    method: GET
    data_selector: items
- name: InfraMachine
  endpoint:
    path: /inframachines
    method: GET
    data_selector: items
    params: {}
- name: InfraMachineTemplate
  endpoint:
    path: /inframachinetemplates
    method: GET
    data_selector: items
    params: {}
- name: BootstrapConfig
  endpoint:
    path: /bootstrapconfig
    method: GET
    data_selector: items
- name: BootstrapConfigList
  endpoint:
    path: /bootstrapconfiglist
    method: GET
    data_selector: items
- name: controlPlaneEndpoint
  endpoint:
    path: /controlPlaneEndpoint
    method: GET
- name: FooControlPlaneTemplate
  endpoint:
    path: /FooControlPlaneTemplate
    method: GET
- name: FooControlPlaneTemplateList
  endpoint:
    path: /FooControlPlaneTemplateList
    method: GET
- name: cluster_template
  endpoint:
    path: /cluster-template.yaml
    method: GET
    data_selector: templates
    params: {}
- name: clusterclass_definition
  endpoint:
    path: /clusterclass-{ClusterClass-name}.yaml
    method: GET
    data_selector: definitions
    params: {}
- name: cluster
  endpoint:
    path: /api/v1beta2/clusters
    method: GET
    data_selector: items
    params: {}
- name: machinedeployment
  endpoint:
    path: /api/v1beta2/machinedeployments
    method: GET
    data_selector: items
    params: {}
- name: machineset
  endpoint:
    path: /api/v1beta2/machinesets
    method: GET
    data_selector: items
    params: {}
- name: MachineSet
  endpoint:
    path: /services/data/v1beta2/machineset
    method: GET
    data_selector: records
- name: MachinePool
  endpoint:
    path: /services/data/v1beta2/machinepool
    method: GET
    data_selector: records
- name: Machine
  endpoint:
    path: /services/data/v1beta2/machine
    method: GET
    data_selector: records
- name: MachineHealthCheck
  endpoint:
    path: /services/data/v1beta2/machinehealthcheck
    method: GET
    data_selector: records
- name: ClusterClass
  endpoint:
    path: /cluster-classes
    method: GET
    data_selector: items
    params: {}
- name: KubeadmConfig
  endpoint:
    path: /kubeadm-configs
    method: GET
    data_selector: items
    params: {}
- name: KubeadmConfig
  endpoint:
    path: /kubeadmconfig
    method: GET
- name: KubeadmControlPlane
  endpoint:
    path: /controlplane.cluster.x-k8s.io/v1beta2
    method: GET
- name: management_cluster
  endpoint:
    path: /init
    method: POST
    data_selector: result
    params: {}
- name: VPC
  endpoint:
    path: /v1/vpcs
    method: GET
    data_selector: resources
    params: {}
- name: PowerVS
  endpoint:
    path: /v1/powervs
    method: GET
    data_selector: resources
    params: {}
- name: OpenNebula
  endpoint:
    path: /RPC2
    method: POST
    data_selector: response
    params: {}
- name: scaleway-secret
  endpoint:
    path: /kube-system/scaleway-secret
    method: POST
    data_selector: metadata.name
    params: {}
- name: KubeadmConfig
  endpoint:
    path: /kubeadmConfig
    method: GET
    data_selector: items
- name: Cluster
  endpoint:
    path: /clusters
    method: GET
    data_selector: items
- name: Machine
  endpoint:
    path: /machines
    method: GET
    data_selector: items
- name: MicroK8sControlPlane
  endpoint:
    path: /controlplane.cluster.x-k8s.io/v1beta1/MicroK8sControlPlane
    method: GET
    data_selector: spec
    params: {}
- name: MachineDeployment
  endpoint:
    path: /cluster.x-k8s.io/v1beta2/MachineDeployment
    method: GET
    data_selector: spec
    params: {}
- name: MachineTemplate
  endpoint:
    path: /services/data/vXX.X/sobjects/MachineTemplate
    method: POST
    data_selector: records
- name: KubeadmControlPlane
  endpoint:
    path: /services/data/vXX.X/sobjects/KubeadmControlPlane
    method: PATCH
    data_selector: spec
- name: MachineDeployment
  endpoint:
    path: /services/data/vXX.X/sobjects/MachineDeployment
    method: PATCH
    data_selector: spec
- name: MachineHealthCheck
  endpoint:
    path: /api/v1/machinehealthchecks
    method: POST
    data_selector: spec
    params:
      clusterName: capi-quickstart
      maxUnhealthy: 40%
      nodeStartupTimeout: 10m
      selector:
        matchLabels:
          nodepool: nodepool-0
      unhealthyNodeConditions:
      - type: Ready
        status: Unknown
        timeout: 300s
      - type: Ready
        status: 'False'
        timeout: 300s
- name: MachinePool
  endpoint:
    path: /tasks/experimental-features/machine-pools
    method: GET
    data_selector: ''
    params: {}
- name: MachineSetPreflightChecks
  endpoint:
    path: /tasks/experimental-features/machineset-preflight-checks
    method: GET
    data_selector: ''
    params: {}
- name: ClusterClass
  endpoint:
    path: /tasks/experimental-features/cluster-class/
    method: GET
    data_selector: ''
    params: {}
- name: ClusterClass
  endpoint:
    path: /api/v1beta2/ClusterClass
    method: GET
    data_selector: items
    params: {}
- name: Cluster
  endpoint:
    path: /api/v1beta2/Cluster
    method: GET
    data_selector: items
    params: {}
- name: customImage
  endpoint:
    path: /spec/template/spec/customImage
    method: add
    data_selector: valueFrom.template
    params: {}
- name: httpProxy
  endpoint:
    path: /spec/template/spec/httpProxy/url
    method: add
    data_selector: valueFrom.variable
    params: {}
- name: mdConfig
  endpoint:
    path: /spec/template/spec/customImage
    method: add
    data_selector: valueFrom.template
    params: {}
- name: dnsServers
  endpoint:
    path: /spec/template/spec/dnsServers
    method: add
    data_selector: valueFrom.variable
    params: {}
- name: dnsServer
  endpoint:
    path: /spec/template/spec/dnsServer
    method: add
    data_selector: valueFrom.variable
    params: {}
- name: etcdImageTag
  endpoint:
    path: /spec/template/spec/kubeadmConfigSpec/clusterConfiguration/etcd
    method: add
    data_selector: valueFrom.template
    params: {}
- name: imageRepository
  endpoint:
    path: /spec/template/spec/kubeadmConfigSpec/clusterConfiguration/imageRepository
    method: add
    data_selector: value
    params: {}
- name: cluster
  endpoint:
    path: /clusters
    method: PATCH
    data_selector: results
    params: {}
- name: BeforeClusterCreate
  endpoint:
    path: /v1alpha1/hooks.runtime.cluster.x-k8s.io/beforeclustercreate
    method: POST
    data_selector: status
    params: {}
- name: AfterControlPlaneInitialized
  endpoint:
    path: /v1alpha1/hooks.runtime.cluster.x-k8s.io/aftercontrolplaneinitialized
    method: POST
    data_selector: status
    params: {}
- name: BeforeClusterUpgrade
  endpoint:
    path: /v1alpha1/hooks.runtime.cluster.x-k8s.io/beforeclusterupgrade
    method: POST
    data_selector: status
    params: {}
- name: AfterControlPlaneUpgrade
  endpoint:
    path: /v1alpha1/hooks.runtime.cluster.x-k8s.io/aftercontrolplaneupgrade
    method: POST
    data_selector: status
    params: {}
- name: AfterClusterUpgrade
  endpoint:
    path: /v1alpha1/hooks.runtime.cluster.x-k8s.io/afterclusterupgrade
    method: POST
    data_selector: status
    params: {}
- name: BeforeClusterDelete
  endpoint:
    path: /v1alpha1/hooks.runtime.cluster.x-k8s.io/beforeclusterdelete
    method: POST
    data_selector: status
    params: {}
- name: GeneratePatches
  endpoint:
    path: /v1alpha1/hooks.runtime.cluster.x-k8s.io/generatepatches
    method: POST
    data_selector: status
    params: {}
- name: ValidateTopology
  endpoint:
    path: /v1alpha1/hooks.runtime.cluster.x-k8s.io/validatetopology
    method: POST
    data_selector: status
    params: {}
- name: DiscoverVariables
  endpoint:
    path: /v1alpha1/hooks.runtime.cluster.x-k8s.io/discovervariables
    method: POST
    data_selector: status
    params: {}
- name: metrics
  endpoint:
    path: /metrics
    method: GET
    data_selector: metrics
    params: {}
- name: pprof
  endpoint:
    path: /debug/pprof
    method: GET
    data_selector: pprof
    params: {}
- name: log_level
  endpoint:
    path: /debug/flags/v
    method: PUT
    data_selector: log_level
    params: {}
- name: podSecurityStandard
  endpoint:
    path: /spec/template/spec/kubeadmConfigSpec/clusterConfiguration/apiServer/extraArgs
    method: ADD
    data_selector: value
    params: {}
- name: admissionConfiguration
  endpoint:
    path: /spec/template/spec/kubeadmConfigSpec/files
    method: ADD
    data_selector: valueFrom.template
    params: {}
- name: kubeadmcontrolplanes
  endpoint:
    path: /kubeadmcontrolplanes
    method: GET
    data_selector: resources
- name: machinedeployments
  endpoint:
    path: /machinedeployments
    method: GET
    data_selector: resources
- name: Machine
  endpoint:
    path: /machines
    method: GET
    data_selector: machines
- name: MachinePool
  endpoint:
    path: /machinepools
    method: GET
    data_selector: machinePools
- name: capi-controller-manager
  endpoint:
    path: /services/data/vXX.X/sobjects/Cluster_name
    method: GET
    data_selector: logs
- name: MailgunCluster
  endpoint:
    path: /clusters
    method: POST
    data_selector: data
    params: {}
- name: MailgunMachine
  endpoint:
    path: /machines
    method: POST
    data_selector: data
    params: {}
- name: mailgun_cluster
  endpoint:
    path: /v3/your-domain.com/messages
    method: POST
    data_selector: data
    params: {}
- name: FooCluster
  endpoint:
    path: /fooclusters
    method: GET
- name: FooClusterTemplate
  endpoint:
    path: /fooclustertemplates
    method: GET
- name: InfraMachine
  endpoint:
    path: /infraMachines
    method: GET
    data_selector: items
    params: {}
- name: InfraMachineTemplate
  endpoint:
    path: /infraMachineTemplates
    method: GET
    data_selector: items
    params: {}
- name: FooControlPlaneSpec
  endpoint:
    path: /foocontrolplane
    method: GET
- name: FooControlPlaneStatus
  endpoint:
    path: /foocontrolplanestatus
    method: GET
- name: FooControlPlaneTemplate
  endpoint:
    path: /services/data/vXX.X/sobjects/FooControlPlaneTemplate
    method: GET
    data_selector: records
    params: {}
- name: FooControlPlaneTemplateList
  endpoint:
    path: /services/data/vXX.X/sobjects/FooControlPlaneTemplateList
    method: GET
    data_selector: items
    params: {}
- name: cluster_template
  endpoint:
    path: /cluster-template.yaml
    method: GET
    data_selector: templates
    params: {}
- name: clusterclass_definition
  endpoint:
    path: /clusterclass-{ClusterClass-name}.yaml
    method: GET
    data_selector: definitions
    params: {}
- name: MachineSet
  endpoint:
    path: /v1beta2/machinesets
    method: GET
- name: MachinePool
  endpoint:
    path: /v1beta2/machinepools
    method: GET
- name: Machine
  endpoint:
    path: /v1beta2/machines
    method: GET
- name: MachineHealthCheck
  endpoint:
    path: /v1beta2/machinehealthchecks
    method: GET
- name: ClusterClass
  endpoint:
    path: /v1beta2/clusterclasses
    method: GET
- name: ClusterClass
  endpoint:
    path: /clusterclass
    method: GET
    data_selector: items
    params: {}
- name: kubeadmConfig
  endpoint:
    path: /kubeadm/config
    method: GET
    data_selector: items
- name: ClusterResourceSet
  endpoint:
    path: /clusterresourcesets
    method: GET
    data_selector: items
- name: ClusterResourceSetBinding
  endpoint:
    path: /clusterresourcesetbindings
    method: GET
    data_selector: items
- name: ExtensionConfig
  endpoint:
    path: /extensionconfigs
    method: GET
    data_selector: items
- name: IPAddress
  endpoint:
    path: /ipaddresses
    method: GET
    data_selector: items
- name: IPAddressClaim
  endpoint:
    path: /ipaddressclaims
    method: GET
    data_selector: items
- name: management_cluster
  endpoint:
    path: /user/quick-start
    method: GET
    data_selector: clusters
    params: {}
- name: workload_clusters
  endpoint:
    path: /RPC2
    method: POST
    data_selector: result
    params: {}
- name: scaleway-secret
  endpoint:
    path: /kube-system/secrets/scaleway-secret
    method: POST
- name: KubeadmConfig
  endpoint:
    path: /kubeadmconfig
    method: GET
    data_selector: items
    params: {}
- name: DockerCluster
  endpoint:
    path: /dockercluster
    method: GET
    data_selector: items
    params: {}
- name: Machine
  endpoint:
    path: /machine
    method: GET
    data_selector: items
    params: {}
- name: MicroK8sControlPlane
  endpoint:
    path: /api/v1beta1/microk8scontrolplanes
    method: GET
    data_selector: items
    params: {}
- name: MachineDeployment
  endpoint:
    path: /api/v1beta1/machinedeployments
    method: GET
    data_selector: items
    params: {}
- name: MachineTemplate
  endpoint:
    path: /path/to/machine/template
    method: POST
    data_selector: template_data
- name: KubeadmControlPlane
  endpoint:
    path: /path/to/kubeadm/control/plane
    method: PATCH
    data_selector: control_plane_data
- name: MachineDeployment
  endpoint:
    path: /api/v1/MachineDeployment
    method: POST
    data_selector: items
    params: {}
- name: MachineSet
  endpoint:
    path: /api/v1/MachineSet
    method: POST
    data_selector: items
    params: {}
- name: MachineHealthCheck
  endpoint:
    path: /api/v1/machinehealthchecks
    method: GET
    data_selector: items
    params: {}
- name: KubeadmControlPlane
  endpoint:
    path: /api/v1/kubeadmcontrolplanes
    method: GET
    data_selector: items
    params: {}
- name: MachinePool
  endpoint:
    path: /tasks/experimental-features/machine-pools
    method: GET
- name: ClusterClass
  endpoint:
    path: /tasks/experimental-features/cluster-class/
    method: GET
- name: ClusterClass
  endpoint:
    path: /cluster.x-k8s.io/v1beta2/ClusterClass
    method: GET
    data_selector: items
- name: Cluster
  endpoint:
    path: /cluster.x-k8s.io/v1beta2/Cluster
    method: GET
    data_selector: items
- name: customImage
  endpoint:
    path: /spec/template/spec/customImage
    method: add
    data_selector: valueFrom.template
    params: {}
- name: httpProxy
  endpoint:
    path: /spec/template/spec/httpProxy/url
    method: add
    data_selector: valueFrom.variable
    params: {}
- name: mdConfig
  endpoint:
    path: /spec/template/spec/customImage
    method: add
    data_selector: valueFrom.template
    params: {}
- name: dnsServers
  endpoint:
    path: /spec/template/spec/dnsServers
    method: add
    data_selector: valueFrom.variable
    params: {}
- name: dnsServer
  endpoint:
    path: /spec/template/spec/dnsServer
    method: add
    data_selector: valueFrom.variable
    params: {}
- name: etcdImageTag
  endpoint:
    path: /spec/template/spec/kubeadmConfigSpec/clusterConfiguration/etcd
    method: add
    data_selector: valueFrom.template
    params: {}
- name: imageRepository
  endpoint:
    path: /spec/template/spec/kubeadmConfigSpec/clusterConfiguration/imageRepository
    method: add
    data_selector: value
    params: {}
- name: BeforeClusterCreate
  endpoint:
    path: /before-cluster-create
    method: POST
    data_selector: status
    params: {}
- name: AfterControlPlaneInitialized
  endpoint:
    path: /after-control-plane-initialized
    method: POST
    data_selector: status
    params: {}
- name: BeforeClusterUpgrade
  endpoint:
    path: /before-cluster-upgrade
    method: POST
    data_selector: status
    params: {}
- name: AfterControlPlaneUpgrade
  endpoint:
    path: /after-control-plane-upgrade
    method: POST
    data_selector: status
    params: {}
- name: AfterClusterUpgrade
  endpoint:
    path: /after-cluster-upgrade
    method: POST
    data_selector: status
    params: {}
- name: BeforeClusterDelete
  endpoint:
    path: /before-cluster-delete
    method: POST
    data_selector: status
    params: {}
- name: metrics
  endpoint:
    path: /metrics
    method: GET
    data_selector: metrics
    params: {}
- name: pprof
  endpoint:
    path: /debug/pprof/*
    method: GET
    data_selector: pprof
    params: {}
- name: loglevel
  endpoint:
    path: /debug/flags/v
    method: PUT
    data_selector: loglevel
    params: {}
- name: podSecurityStandard
  endpoint:
    path: /spec/template/spec/kubeadmConfigSpec/clusterConfiguration/apiServer/extraArgs
    method: ADD
    data_selector: value
    params: {}
- name: extraVolumes
  endpoint:
    path: /spec/template/spec/kubeadmConfigSpec/clusterConfiguration/apiServer/extraVolumes
    method: ADD
    data_selector: value
    params: {}
- name: files
  endpoint:
    path: /spec/template/spec/kubeadmConfigSpec/files
    method: ADD
    data_selector: valueFrom.template
    params: {}
- name: kubeadmcontrolplanes
  endpoint:
    path: /kubeadmcontrolplanes
    method: GET
- name: machinedeployments
  endpoint:
    path: /machinedeployments
    method: GET
- name: Cluster
  endpoint:
    path: /api/cluster
    method: GET
    data_selector: clusters
    params: {}
- name: MachineDeployment
  endpoint:
    path: /api/machinedeployments
    method: GET
    data_selector: machinedeployments
    params: {}
- name: MachineSet
  endpoint:
    path: /api/machinesets
    method: GET
    data_selector: machinesets
    params: {}
- name: Machine
  endpoint:
    path: /api/machines
    method: GET
    data_selector: machines
    params: {}
- name: Machine
  endpoint:
    path: /machines
    method: GET
    data_selector: machines
- name: MachinePool
  endpoint:
    path: /machinepools
    method: GET
    data_selector: machinePools
- name: BootstrapConfig
  endpoint:
    path: /bootstrapconfigs
    method: GET
    data_selector: bootstrapConfigs
- name: capi-controller-manager
  endpoint:
    path: /capi-controller-manager
    method: GET
- name: capd-controller-manager
  endpoint:
    path: /capd-controller-manager
    method: GET
- name: capi-kubeadm-bootstrap-controller-manager
  endpoint:
    path: /capi-kubeadm-bootstrap-controller-manager
    method: GET
- name: capi-kubeadm-control-plane-controller-manager
  endpoint:
    path: /capi-kubeadm-control-plane-controller-manager
    method: GET
- name: MailgunCluster
  endpoint:
    path: /clusters
    method: POST
    data_selector: cluster
    params: {}
- name: MailgunMachine
  endpoint:
    path: /machines
    method: POST
    data_selector: machine
    params: {}
- name: MailgunCluster
  endpoint:
    path: /v3/clusters
    method: POST
    data_selector: data
- name: fooclusters
  endpoint:
    path: /fooclusters
    method: GET
    data_selector: items
- name: fooclustertemplates
  endpoint:
    path: /fooclustertemplates
    method: GET
    data_selector: items
- name: InfraMachine
  endpoint:
    path: /developer/providers/contracts/infra-machine
    method: GET
    data_selector: resources
    params: {}
- name: InfraMachineTemplate
  endpoint:
    path: /developer/providers/contracts/infra-machine-template
    method: GET
    data_selector: resources
    params: {}
- name: control_plane
  endpoint:
    path: /controlPlane
    method: GET
    data_selector: controlPlane
- name: FooControlPlaneTemplateList
  endpoint:
    path: /FooControlPlaneTemplateList
    method: GET
    data_selector: items
- name: cluster_template
  endpoint:
    path: /cluster-template.yaml
    method: GET
    data_selector: objects
- name: clusterclass
  endpoint:
    path: /clusterclass-{ClusterClass-name}.yaml
    method: GET
    data_selector: objects
- name: Cluster
  endpoint:
    path: /api/v1beta2/cluster
    method: GET
    data_selector: clusters
- name: MachineDeployment
  endpoint:
    path: /api/v1beta2/machinedeployments
    method: GET
    data_selector: machineDeployments
- name: MachineSet
  endpoint:
    path: /api/v1beta2/machinesets
    method: GET
    data_selector: machineSets
- name: MachineSet
  endpoint:
    path: /machineSets
    method: GET
    data_selector: items
- name: MachinePool
  endpoint:
    path: /machinePools
    method: GET
    data_selector: items
- name: Machine
  endpoint:
    path: /machines
    method: GET
    data_selector: items
- name: MachineHealthCheck
  endpoint:
    path: /machineHealthChecks
    method: GET
    data_selector: items
- name: ClusterClass
  endpoint:
    path: /clusterclass
    method: GET
    data_selector: records
    params: {}
- name: KubeadmConfig
  endpoint:
    path: /kubeadmconfig
    method: GET
    data_selector: records
    params: {}
- name: KubeadmConfig
  endpoint:
    path: /KubeadmConfig
    method: GET
    data_selector: records
- name: KubeadmControlPlane
  endpoint:
    path: /controlplane.cluster.x-k8s.io/v1beta2/kubeadmcontrolplanes
    method: GET
- name: management_cluster
  endpoint:
    path: /clusterctl/init
    method: POST
    data_selector: resources
    params: {}
- name: workload_cluster
  endpoint:
    path: /workload
    method: POST
    data_selector: cluster
    params: {}
- name: scaleway-secret
  endpoint:
    path: /kube-system/scaleway-secret
    method: POST
- name: KubeadmConfig
  endpoint:
    path: /kubeadmconfig
    method: GET
    data_selector: items
- name: DockerCluster
  endpoint:
    path: /dockercluster
    method: GET
    data_selector: items
- name: Machine
  endpoint:
    path: /machine
    method: GET
    data_selector: items
- name: MicroK8sControlPlane
  endpoint:
    path: /api/v1beta1/microk8scontrolplanes
    method: GET
    data_selector: items
    params: {}
- name: MachineDeployment
  endpoint:
    path: /api/v1beta1/machinedeployments
    method: GET
    data_selector: items
    params: {}
- name: MachineTemplate
  endpoint:
    path: /services/data/vXX.X/sobjects/MachineTemplate
    method: POST
- name: KubeadmControlPlane
  endpoint:
    path: /services/data/vXX.X/sobjects/KubeadmControlPlane
    method: PATCH
- name: MachineDeployment
  endpoint:
    path: /services/data/vXX.X/sobjects/MachineDeployment
    method: PATCH
- name: MachineDeployment
  endpoint:
    path: /api/v1/MachineDeployment
    method: GET
    data_selector: items
    params: {}
- name: MachineSet
  endpoint:
    path: /api/v1/MachineSet
    method: GET
    data_selector: items
    params: {}
- name: MachinePool
  endpoint:
    path: /api/v1/MachinePool
    method: GET
    data_selector: items
    params: {}
- name: MachineHealthCheck
  endpoint:
    path: /apis/cluster.x-k8s.io/v1beta2/machinehealthchecks
    method: GET
    data_selector: items
- name: KubeadmControlPlane
  endpoint:
    path: /apis/cluster.x-k8s.io/v1beta2/kubeadmcontrolplanes
    method: GET
    data_selector: items
- name: ClusterClass
  endpoint:
    path: /clusterclasses
    method: GET
    data_selector: items
    params: {}
- name: Cluster
  endpoint:
    path: /clusters
    method: GET
    data_selector: items
    params: {}
- name: customImage
  endpoint:
    path: /spec/template/spec/customImage
    method: add
    data_selector: valueFrom.template
    params: {}
- name: httpProxy
  endpoint:
    path: /spec/template/spec/httpProxy/url
    method: add
    data_selector: valueFrom.variable
    params: {}
- name: mdConfig
  endpoint:
    path: /spec/template/spec/customImage
    method: add
    data_selector: valueFrom.template
    params: {}
- name: dnsServers
  endpoint:
    path: /spec/template/spec/dnsServers
    method: add
    data_selector: valueFrom.variable
    params: {}
- name: dnsServer
  endpoint:
    path: /spec/template/spec/dnsServer
    method: add
    data_selector: valueFrom.variable
    params: {}
- name: etcdImageTag
  endpoint:
    path: /spec/template/spec/kubeadmConfigSpec/clusterConfiguration/etcd
    method: add
    data_selector: valueFrom.template
    params: {}
- name: imageRepository
  endpoint:
    path: /spec/template/spec/kubeadmConfigSpec/clusterConfiguration/imageRepository
    method: add
    data_selector: value
    params: {}
- name: extension_config
  endpoint:
    path: /api/v1/namespaces/default/services/https:webhook-service:443/proxy/hooks.runtime.cluster.x-k8s.io/v1alpha1/discovery
    method: POST
    data_selector: extensions
    params: {}
- name: BeforeClusterCreate
  endpoint:
    path: /hooks.runtime.cluster.x-k8s.io/v1alpha1/BeforeClusterCreate
    method: POST
    data_selector: status
- name: AfterControlPlaneInitialized
  endpoint:
    path: /hooks.runtime.cluster.x-k8s.io/v1alpha1/AfterControlPlaneInitialized
    method: POST
    data_selector: status
- name: BeforeClusterUpgrade
  endpoint:
    path: /hooks.runtime.cluster.x-k8s.io/v1alpha1/BeforeClusterUpgrade
    method: POST
    data_selector: status
- name: AfterControlPlaneUpgrade
  endpoint:
    path: /hooks.runtime.cluster.x-k8s.io/v1alpha1/AfterControlPlaneUpgrade
    method: POST
    data_selector: status
- name: AfterClusterUpgrade
  endpoint:
    path: /hooks.runtime.cluster.x-k8s.io/v1alpha1/AfterClusterUpgrade
    method: POST
    data_selector: status
- name: BeforeClusterDelete
  endpoint:
    path: /hooks.runtime.cluster.x-k8s.io/v1alpha1/BeforeClusterDelete
    method: POST
    data_selector: status
- name: GeneratePatches
  endpoint:
    path: /hooks.runtime.cluster.x-k8s.io/v1alpha1/GeneratePatches
    method: POST
    data_selector: status
- name: ValidateTopology
  endpoint:
    path: /hooks.runtime.cluster.x-k8s.io/v1alpha1/ValidateTopology
    method: POST
    data_selector: status
- name: DiscoverVariables
  endpoint:
    path: /hooks.runtime.cluster.x-k8s.io/v1alpha1/DiscoverVariables
    method: POST
    data_selector: status
- name: DiscoverVariablesRequest
  endpoint:
    path: /v1alpha1/DiscoverVariablesRequest
    method: GET
    data_selector: variables
    params: {}
- name: DiscoverVariablesResponse
  endpoint:
    path: /v1alpha1/DiscoverVariablesResponse
    method: GET
    data_selector: variables
    params: {}
- name: metrics
  endpoint:
    path: /metrics
    method: GET
    data_selector: metrics
- name: pprof
  endpoint:
    path: /debug/pprof
    method: GET
    data_selector: pprof
- name: pod_security_standard
  endpoint:
    path: /spec/template/spec/kubeadmConfigSpec/clusterConfiguration/apiServer/extraArgs
    method: POST
    data_selector: value
    params: {}
- name: provider
  endpoint:
    path: /generate/provider
    method: GET
    data_selector: provider
    params: {}
- name: cluster
  endpoint:
    path: /generate/cluster
    method: GET
    data_selector: cluster
    params: {}
- name: providers
  endpoint:
    path: /config/repositories
    method: GET
    data_selector: repositories
- name: cluster
  endpoint:
    path: /cluster
    method: GET
    data_selector: records
- name: machine
  endpoint:
    path: /machine
    method: GET
    data_selector: records
- name: logs
  endpoint:
    path: /logs
    method: GET
    data_selector: msg
    params: {}
- name: MailgunCluster
  endpoint:
    path: /v1/clusters
    method: POST
    data_selector: clusters
- name: MailgunMachine
  endpoint:
    path: /v1/machines
    method: POST
    data_selector: machines
- name: MailgunCluster
  endpoint:
    path: /v3/mailgun/cluster
    method: POST
    data_selector: data
    params: {}
- name: fooclusters
  endpoint:
    path: /fooclusters
    method: GET
    data_selector: items
- name: fooclustertemplates
  endpoint:
    path: /fooclustertemplates
    method: GET
    data_selector: items
- name: InfraMachine
  endpoint:
    path: /inframachines
    method: GET
    data_selector: items
- name: InfraMachineTemplate
  endpoint:
    path: /inframachinetemplates
    method: GET
    data_selector: items
- name: BootstrapConfig
  endpoint:
    path: /bootstrapconfig
    method: GET
    data_selector: items
    params: {}
- name: BootstrapConfigList
  endpoint:
    path: /bootstrapconfiglist
    method: GET
    data_selector: items
    params: {}
- name: controlPlaneEndpoint
  endpoint:
    path: /controlPlaneEndpoint
    method: GET
- name: FooControlPlaneTemplate
  endpoint:
    path: /FooControlPlaneTemplate
    method: GET
    data_selector: items
- name: FooControlPlaneTemplateList
  endpoint:
    path: /FooControlPlaneTemplateList
    method: GET
    data_selector: items
- name: cluster_template
  endpoint:
    path: /cluster-template.yaml
    method: GET
    data_selector: template
    params: {}
- name: clusterclass_definition
  endpoint:
    path: /clusterclass-{ClusterClass-name}.yaml
    method: GET
    data_selector: class_definitions
    params: {}
- name: Cluster
  endpoint:
    path: /cluster
    method: GET
    data_selector: metadata
    params: {}
- name: MachineDeployment
  endpoint:
    path: /machinedeployment
    method: GET
    data_selector: metadata
    params: {}
- name: MachineSet
  endpoint:
    path: /machineset
    method: GET
    data_selector: metadata
    params: {}
- name: MachineSet
  endpoint:
    path: /v1beta2/MachineSet
    method: GET
    data_selector: conditions
    params: {}
- name: MachinePool
  endpoint:
    path: /v1beta2/MachinePool
    method: GET
    data_selector: conditions
    params: {}
- name: Machine
  endpoint:
    path: /v1beta2/Machine
    method: GET
    data_selector: conditions
    params: {}
- name: MachineHealthCheck
  endpoint:
    path: /v1beta2/MachineHealthCheck
    method: GET
    data_selector: conditions
    params: {}
- name: ClusterClass
  endpoint:
    path: /clusterclasses
    method: GET
    data_selector: items
    params: {}
- name: KubeadmConfig
  endpoint:
    path: /kubeadmconfig
    method: GET
    data_selector: items
- name: kubeadmControlPlane
  endpoint:
    path: /kubeadmControlPlane
    method: GET
notes:
- For production use-cases a 'real' Kubernetes cluster should be used with appropriate
  backup and disaster recovery policies and procedures in place. The Kubernetes cluster
  must be at least v1.20.0.
- kind is not designed for production use.
- 'Minimum kind supported version: v0.30.0'
- Kubernetes cluster must be at least v1.20.0
- The default CNI will not be installed
- The Docker provider is not designed for production use and is intended for development
  environments only.
- Please ensure that the values for `CLOUD_SDK_AK` and `CLOUD_SDK_SK` are base64 encoded.
- Requires Scaleway access key and secret key for authentication.
- Project ID and region must be specified.
- If the calico-kube-controllers pod is in ErrImagePull status, patch its deployment
  with imagePullSecrets
- The username used to access the remote vSphere endpoint is required.
- The password used to access the remote vSphere endpoint is required.
- Cluster API requires an existing Kubernetes cluster accessible via kubectl.
- Using kind is not designed for production use.
- Ensure that the values for `CLOUD_SDK_AK` and `CLOUD_SDK_SK` are base64 encoded.
- It is recommended to keep the management cluster separated from any application
  workload.
- Make sure you choose a VM size which is available in the desired location for your
  subscription.
- Requires Scaleway credentials (access key and secret key), project ID, and region.
- A ClusterAPI compatible image must be available in your VCD catalog.
- For instructions on how to build and upload a compatible image see CAPVCD.
- The output of `clusterctl init` is similar to provided example.
- Requires setup of connected app in api
- Some objects may return nulls in deeply nested fields
- The Cluster API requires an existing Kubernetes cluster accessible via kubectl.
- It is required to use an official CAPV machine images for your vSphere VM templates.
- After a short while, the calico-node pods will be with `Running` status.
- If the calico-kube-controllers pod is also in `ErrImagePull` status, patch its deployment
  to fix the problem.
- In order to ensure a proper cleanup of your infrastructure you must always delete
  the cluster object.
- Deleting the entire cluster template with kubectl delete -f capi-quickstart.yaml
  might lead to pending resources to be cleaned up manually.
- clusterctl CLI tool handles the lifecycle of a Cluster API management cluster.
- Your Scaleway credentials (access key and secret key) are required for integration.
- Eventually, all the pods in the kube-system namespace will run.
- The --wait flag is REQUIRED for the helm install command to work.
- 'Each certificate must be stored in a single secret named one of: [cluster name]-ca,
  [cluster name]-etcd, [cluster name]-proxy, [cluster name]-sa'
- The certificates must also be labeled with the key-value pair cluster.x-k8s.io/cluster-name=[cluster
  name]
- It is strongly recommended to set the certificatesExpiryDays to a large enough value
  so that all the machines will have time to complete rollout well in advance before
  the certificates expire.
- MicroK8s defines a MicroK8sControlPlane definition as well as the MachineDeployment
  to configure the control plane and worker nodes.
- The time-to-live (TTL) of the token used to join nodes defaults to 10 years.
- Rolling updates are managed by MachineDeployments for seamless scaling.
- A modification to the MachineDeployment's spec will begin a rolling update of the
  machines.
- Cluster API is unable to manage any aspect of the external etcd cluster.
- Depending on how you configure your etcd nodes you may incur additional cloud costs
  in data transfer.
- Depending on the provider, additional changes to the workload cluster’s manifest
  may be necessary to ensure the new CAPI-managed nodes have connectivity to the existing
  etcd nodes. For example, on AWS you will need to leverage the additionalSecurityGroups
  field on the AWSMachine and/or AWSMachineTemplate objects to add the CAPI-managed
  nodes to a security group that has connectivity to the existing etcd cluster.
- Using kustomize can provide additional flexibility for customizing workload cluster
  YAML manifests.
- MachineTemplate resources should be immutable unless specified otherwise.
- Modifying bootstrap templates does not trigger rollouts of existing Machines.
- Cluster autoscaler requires Kubernetes v1.16 or greater.
- Use --cloud-config for specifying a mount volume path to the kubernetes configuration
  for management cluster.
- --kubeconfig is for specifying a mount volume path to the kubernetes configuration
  for workload cluster.
- The cluster autoscaler does not enforce the node group sizes.
- To enable scaling from zero, specify CPU and memory annotations.
- MachineHealthChecks currently only support Machines that are owned by a MachineSet
  or a KubeadmControlPlane.
- If defining more than one MachineHealthCheck for the same Cluster, ensure the selectors
  do not overlap to prevent conflicts.
- To determine which Pods are blocking the drain, check the 'DrainingSucceeded' condition
  on the Machine.
- 'Feature gate name: MachinePool'
- 'Variable name to enable/disable the feature gate: EXP_MACHINE_POOL'
- Uses Ignition v2 and was tested with Flatcar Container Linux only.
- If using ignition with CAPD you should take care of setting kubeletExtraArgs for
  the kindest/node image in use.
- Verification of images hosted by registry.k8s.io.
- If insecure serving is configured the pprof and log level endpoints are disabled
  for security reasons.
- Metrics endpoint is served via https and protected via authentication and authorization.
- The ClusterResourceSet feature is now GA and is enabled by default, but can be disabled
  by setting the EXP_CLUSTER_RESOURCE_SET environment variable to false.
- The version field in Pod Security Admission Config defaults to 'latest'.
- The 'kube-system' namespace is exempt from Pod Security Standards enforcement, because
  it runs control-plane pods that need higher privileges.
- The Cluster API project supports ecosystem growth and extensibility.
- Clusterctl checks if there is a version of cert-manager already installed.
- Uses smart defaults to simplify user experience
- Refer to providers documentation for available flavors
- Every object’s Status subresource is never restored during a move operation.
- A Status subresource should never contain fields that cannot be recreated or derived
  from information in spec, metadata, or external systems.
- The current implementation of the upgrade process does not preserve controllers
  flags that are not set through the components YAML/at the installation time.
- The operation is designed to prevent accidental deletion of user created objects.
- Image override is an advanced feature and wrong configuration can easily lead to
  non-functional clusters.
- It’s strongly recommended to test configurations on dev/test environments before
  using this functionality in production.
- Ensure all required images are available in the kind cluster before running clusterctl
  init.
- Local repository folder does not contain cluster templates.
- When retrieving the kubeconfig using `clusterctl` with Docker Desktop on macOS or
  Windows, additional steps are required.
- Point the kubeconfig to the exposed port of the load balancer, rather than the inaccessible
  container IP.
- You can extend clusterctl with plugins, similar to kubectl.
- Ensure the cert-manager webhook service is ready before creating the Cluster API
  components.
- CAPD is the default as it’s more lightweight and requires less setup.
- KubeVirt is useful when Docker isn’t suitable for whatever reason.
- Uses Docker by default.
- CAPD is the default provider as it’s more lightweight.
- An Azure Service Principal is needed for populating the controller manifests.
- KubeVirt uses container disks to create VMs inside pods.
- This utilizes environment-based authentication.
- Sometimes tilt looks stuck when it’s waiting on connections.
- Ensure that docker/podman is up and running and your kubernetes cluster is reachable.
- Logs are for SRE & developers, not for end users!
- Navigating logs should be easy
- Cluster API developers MUST use logs!
- Set --logging-format=json
- Set a high log verbosity, e.g. v=5
- Enable Promtail, Loki, and Grafana under deploy_observability
- Tests are an integral part of the project codebase.
- Cluster API maintainers and all the contributors should be committed to help in
  ensuring that tests are easily maintainable.
- Unit tests are developed using go test, gomega, and fakeclient.
- Integration tests are based on envtest.
- The envtest framework uses a real kube-apiserver that is shared across many test
  cases.
- Developers should ensure each test runs in isolation from others by creating objects
  in separated namespaces.
- Unit tests focus on individual pieces of logic.
- Integration tests are focused on testing the behavior of an entire controller.
- The e2e tests create a new management cluster with kind on each run.
- To avoid this and speed up the test execution the tests can also be run against
  a management cluster created by tilt.
- Logs of e2e tests can be analyzed with our development environment by pushing logs
  to Loki and then analyzing them via Grafana.
- Start the development environment as described in Developing Cluster API with Tilt.
- Make sure to deploy Loki and Grafana via deploy_observability.
- If you only want to see imported logs, don’t deploy promtail (via deploy_observability).
- If you want to drop all logs from Loki, just delete the Loki Pod in the observability
  namespace.
- Improving and maintaining this document is a collaborative effort.
- Tests should be easily maintainable, easily readable, well documented and consistent
  across the code base.
- E2E tests create a new management cluster with kind on each run.
- Tests can be run against a management cluster created by tilt.
- Cluster API repositories use Moby Buildkit to speed up image builds.
- BuildKit does not currently work on SELinux.
- Developers should take care in ensuring each test runs in isolation from the others,
  by creating objects in separated namespaces.
- Garbage collection behavior may differ in tests as there are no controllers monitoring
  built-in resources.
- E2E tests require a set of artifacts including binaries, manifests, and credentials.
- Setup involves creating a Kubernetes cluster with Cluster API providers installed.
- Cluster API offers options for runtime tuning that should be adjusted based on evidence
  of system bottlenecks.
- Performance improvements can be made by reducing unnecessary work and avoiding expensive
  operations during controller processes.
- 'Users selecting this deployment model, please be aware:'
- Infrastructure objects generated by the Infra providers SHOULD adopt a naming convention
  that directly links to the Kubernetes resource that originated those objects.
- Naming convention above should not be used and advertised as a contract to build
  on top. Instead more robust mechanism MUST always be provided and used for identifying
  objects, like tagging or labeling.
- Cluster API offers a great development environment based on Tilt, which can be easily
  extended to work with any provider.
- Cluster API defines a set of best practices and standards that, if adopted, could
  speed up provider development and improve consistency with core Cluster API.
- Cluster API implements a test framework that, if adopted, could help in ensuring
  the quality of the provider.
- While standard security practices for developing Kubernetes controllers apply, it
  is important to recognize that additional critical security concerns must be addressed.
- Ensure credentials used by Cluster API are least privileged.
- Implement 2FA for all maintainer accounts on GitHub.
- Use short-lived credentials that are automatically renewed.
- Implement rate limits for the creation, deletion, and updating of cloud resources.
- Any cloud resource not linked to a cluster after a fixed configurable period should
  be automatically deleted.
- Managed topologies assumes a slice to be either authored from templates or by the
  users/the infrastructure controllers.
- In cases the slice is instead co-authored (templates provide some info, the infrastructure
  controller fills in other info) this can lead to infinite reconcile.
- It is set on machines linked to a cluster and external objects(bootstrap and infrastructure
  providers).
- If set with the value “skip” on a Pod in the workload cluster, the Pod will not
  be evicted during Node drain.
- This API provides annotations related to Cluster API objects.
- Owner references are used for Kubernetes garbage collection.
- Objects should always be created with an owner reference to prevent leaking objects.
- The default port for diagnostics is 8443.
- Webhook server port is 9443.
- Health endpoint port is 9440.
- You don’t need to have mdBook installed, `make serve-book` will ensure appropriate
  binaries for mdBook and any used plugins are downloaded into hack/tools/bin/ directory.
- Cluster API supports at maximum n-3 minor version skip upgrades.
- Upgrades outside from version older n-3 might lead to a management cluster in a
  non-functional state.
- Version downgrades might lead to a management cluster in a non-functional state.
- Removal of a deprecated APIVersion in Kubernetes can cause issues with garbage collection
  by the kube-controller-manager.
- To avoid these issues it’s advised to ensure a restart of the kube-controller-manager
  is done after upgrading to a version of Cluster API which drops support for an APIVersion.
- Cluster API support for older Kubernetes version is not a replacement/alternative
  for upstream Kubernetes support policies!
- Support for versions of Kubernetes which itself are out of support is limited to
  'Cluster API can start a Cluster with this Kubernetes version' and 'Cluster API
  can upgrade to the next Kubernetes version'; it does not include any extended support
  to Kubernetes itself.
- Your management cluster has been initialized successfully!
- 'You can now create your first workload cluster by running the following: clusterctl
  generate cluster [name] --kubernetes-version [version] | kubectl apply -f -'
- The Docker provider is not designed for production use.
- Ensure correct VM size is selected for your subscription.
- Cluster API is designed to automate cluster lifecycle management.
- Kubeadm is the default bootstrap provider.
- The Docker provider requires the ClusterTopology and MachinePool features to deploy
  ClusterClass-based clusters.
- For Docker Desktop on macOS, Linux or Windows use kind to retrieve the kubeconfig.
- Before deploying the OpenStack external cloud provider, configure the `cloud.conf`
  file for integration with your OpenStack environment.
- CABPK generates new certificates using a specific convention if they do not already
  exist.
- Overriding defaults in KubeadmConfig can lead to broken clusters.
- This method is easy to replace the whole kubelet configuration generated by kubeadm,
  but it is not easy to replace only a part of the kubelet configuration.
- The minimum supported version of kind is v0.30.0.
- First, create the Secret named `scaleway-secret` in your workload cluster.
- The project remains true to its original goals and design principles.
- It is strongly recommended to set the certificatesExpiryDays to a large enough value.
- This method is easy to replace the whole kubelet configuration generated by kubeadm.
- Cluster API is focused on providing declarative APIs and tooling to simplify provisioning,
  upgrading, and operating multiple Kubernetes clusters.
- A ClusterAPI compatible image must be available in your IONOS Cloud contract.
- A ClusterAPI compatible image must be available in your Nutanix image library.
- A ClusterAPI compatible image must be available in your OpenStack.
- A ClusterAPI compatible image must be available in your Outscale account.
- A ClusterAPI compatible image must be available in your Proxmox cluster.
- A ClusterAPI compatible image must be available in your Vultr account.
- The Cluster API project is continuously evolving and aims to provide a stable, reliable
  platform.
- The Cluster API project claims the right to remain unfinished.
- It is recommended to create a long-lived CA or use a long-lived root/offline CA
  with a short lived intermediary CA.
- This method is easy to replace the whole kubelet configuration generated by kubeadm
- It is not easy to replace only a part of the kubelet configuration
- Set kubelet flags via KubeadmConfigSpec.kubeletExtraArgs
- Cluster API is a Kubernetes sub-project focused on providing declarative APIs and
  tooling to simplify provisioning, upgrading, and operating multiple Kubernetes clusters.
- If you are running CAPM3 release prior to v0.5.0, make sure to export certain environment
  variables.
- Uses kubeadm to configure kubelet
- Kubelet flags can be set via KubeadmConfigSpec.kubeletExtraArgs
- Defaults to dns and ingress addons in MicroK8sControlPlane.
- Join token TTL defaults to 10 years.
- The project is developed in the open, and is constantly being improved by users,
  contributors, and maintainers.
- The provider requires the ClusterTopology and MachinePool features to deploy ClusterClass-based
  clusters.
- Make sure to export the required environment variables before running commands.
- The Cluster API project is continuously evolving and improving.
- The `KubeadmControlPlane` and `MachineDeployment` resources have a `spec.rollout.after`
  field that can be set to a timestamp (RFC-3339) after which a rollout should be
  triggered regardless of whether there were any changes to `KubeadmControlPlane.spec`/`MachineDeployment.spec.template`
  or not.
- This field can only be used for triggering a rollout, not for delaying one.
- CA certificates are required to setup etcd cluster.
- Requires configuration of control plane and network settings.
- The MicroK8sControlPlane manages the control plane configuration.
- MachineDeployment is used for configuring worker nodes.
- KubeadmControlPlane is solely supporting CoreDNS as a DNS server at this time.
- KCP will generate and manage the admin Kubeconfig for clusters.
- Client certificate for the admin user is created with a valid lifespan of a year.
- The cluster-autoscaler does not enforce the node group sizes.
- If your Cluster API provider does not have support for scaling from zero, you may
  still use this feature through the capacity annotations.
- The scale from zero annotations will override any capacity information supplied
  by the Cluster API provider in the infrastructure machine templates.
- User should select the annotation for GPU either gpu-type or dra-driver depends
  on whether using Device Plugin or Dynamic Resource Allocation(DRA).
- If you are defining more than one MachineHealthCheck for the same Cluster, make
  sure that the selectors do not overlap in order to prevent conflicts or unexpected
  behaviors when trying to remediate the same set of machines.
- The token which is used to authenticate against the IONOS Cloud API is required.
- Requires setup of connected app in Scaleway
- The Cluster API project is committed to continuously improve and expand its capabilities.
- Kubernetes version must be upgraded in sequence between minor versions (e.g., from
  v1.17 to v1.19 must first go through v1.18).
- MachineTemplate resources are immutable.
- Currently the CACPM does not expose any functionality.
- User should select the annotation for GPU either 'gpu-type' or 'dra-driver' depending
  on whether using Device Plugin or Dynamic Resource Allocation(DRA).
- If defining more than one MachineHealthCheck for the same Cluster, ensure selectors
  do not overlap to prevent conflicts.
- If both maxUnhealthy and unhealthyRange are specified, unhealthyRange takes precedence.
- Node drain can be observed through the DrainingSucceeded condition on the Machine
  and various logs.
- Experimental features are unreliable, i.e., some may one day be promoted to the
  main repository, or they may be modified arbitrarily or even disappear altogether.
- Only fields below /spec can be patched.
- Only add, remove and replace operations are supported.
- Requires configuration of environment variables for IBM Cloud credentials.
- Ensure the OpenNebula server is running and accessible.
- The OpenNebula API requires specific credentials for authentication.
- The Cluster API project claims the right to remain unfinished, because there is
  still a strong, foundational need to continuously evolve, improve and adapt to the
  changing needs of Cluster API’s users and to the growing Cloud Native ecosystem.
- MicroK8s defines a MicroK8sControlPlane definition as well as the MachineDeployment
  to configure the control plane and worker nodes respectively.
- The Cluster API MicroK8s control plane provider is responsible for managing the
  control plane of the provisioned clusters.
- MachinePool support in cluster-autoscaler requires a provider implementation that
  supports the 'MachinePool Machines' feature.
- The maxPods annotation will default to 110 if it is not supplied.
- Make sure that the selectors do not overlap to prevent conflicts or unexpected behaviors.
- ClusterClass name should be generic enough to make sense across multiple clusters.
- Keep ClusterClass names short and consistent.
- Builtin variables can be referenced just like regular variables.
- Builtin variables can be used to dynamically calculate image names.
- The minimum supported version for kind is v0.30.0.
- Create the Secret named `scaleway-secret` in your workload cluster
- If your have a private network on your cluster, you may set its ID here.
- MicroK8s defines a MicroK8sControlPlane definition and a MachineDeployment for configuring
  control plane and worker nodes.
- Modifications to the KubeadmControlPlane resource’s Spec.Version field will trigger
  a rolling upgrade of the control plane.
- Ensure the machine image specified matches the Kubernetes version in the KubeadmControlPlane
  spec.
- Uses MicroK8s for cluster provisioning and management.
- The scale from zero annotations will override any capacity information supplied
  by the Cluster API provider.
- If defining more than one MachineHealthCheck for the same Cluster, ensure that the
  selectors do not overlap to prevent conflicts.
- The ClusterClass name should be generic enough to make sense across multiple clusters.
- Try to keep the ClusterClass names short and consistent.
- Ensure the correct API version is being used.
- Check the response format for data consistency.
- The Cluster API project is committed to keep working with the broader CAPI community.
- The extensibility model implemented by CAPI requires a complementary effort to continuously
  explore new ways to offer a cohesive solution.
- The CACPM does not expose any functionality.
- Changes to fields will not be propagated to Machines, InfraMachines and KubeadmConfigs
  that are marked for deletion.
- Ensure selectors do not overlap when defining multiple MachineHealthChecks for the
  same Cluster.
- This feature is only available for KubeadmControlPlane.
- Prefix the templates used in a ClusterClass with the name of the ClusterClass.
- Hard-coded values can be used to test the impact of a patch during development,
  gradually roll out patches, etc.
- Ensure to set the correct environment variables before running the commands.
- The project is continuously evolving and improving to meet user needs.
- The cluster-api provider requires Kubernetes v1.16 or greater to run the v1alpha3
  version of the API.
- If defining more than one MachineHealthCheck for the same Cluster, ensure selectors
  do not overlap.
- ClusterClass should be generic enough to make sense across multiple clusters.
- Avoid reusing the same template in multiple ClusterClasses.
- Complex variables can be used to make references in templates configurable.
- User should be aware that the lack of validation of users provided data could lead
  to problems.
- 'Important Note: A +2 minor Kubernetes version upgrade is not allowed in Cluster
  Topologies.'
- A Runtime Extension server can serve multiple Runtime Hooks.
- Requires setup of connected app in IBM Cloud
- Cloud-Provider image to deploy inside the new workload cluster
- MicroK8s provides a bootstrap provider for managing Kubernetes clusters.
- Users need to ensure compatible versions of Kubernetes when upgrading.
- The Cluster API MicroK8s control plane provider does not expose any functionality.
- Changes to certain fields of KubeadmControlPlane are propagated in-place to the
  Machines and do not trigger a full rollout.
- Remediation strategy available for KubeadmControlPlane.
- Users should expect the resources in a Cluster (e.g. MachineDeployments) to behave
  consistently no matter if a change is applied via a ClusterClass or directly as
  you do in a Cluster without a ClusterClass.
- User should expect the Cluster topology to change consistently irrespective of how
  the change has been implemented inside the ClusterClass or applied to the ClusterClass.
- A +2 minor Kubernetes version upgrade is not allowed in Cluster Topologies.
- When applying concurrent changes to a Cluster, the topology controller will immediately
  act in order to reconcile to the desired state.
- Runtime SDK is an advanced feature. If implemented incorrectly, a failing Runtime
  Extension can severely impact the Cluster API runtime.
- The project is continuously evolving and must evolve responsibly.
- Important to ensure upgrade paths and minimize disruptions for users.
- Cluster API MicroK8s control plane provider is responsible for managing the control
  plane of the provisioned clusters.
- The cluster autoscaler does not enforce the node group sizes. If a node group is
  below the minimum number of nodes, or above the maximum number of nodes, the cluster
  autoscaler will not scale that node group up or down.
- Remediation for a machine may be skipped under certain conditions like annotations.
- Currently, the case of running multiple providers is not covered in Cluster API
  E2E test suite.
- Expose the environment variable `IBMCLOUD_API_KEY` to authorize the infrastructure
  provider manager against the IBM Cloud API.
- 'To see all required Nutanix environment variables execute: clusterctl generate
  cluster --infrastructure nutanix --list-variables capi-quickstart.'
- Hiding complexity behind a simple declarative API is why the Cluster API project
  ultimately exists.
- Defaults for MicroK8sConfig include dns for addons.
- Some infrastructure providers, such as AWS, require that if a specific machine image
  is specified, it has to match the Kubernetes version specified in the KubeadmControlPlane
  spec.
- The rollout can also happen before the time specified in spec.rollout.after if any
  changes are made to the spec before that time.
- Cluster API MicroK8s control plane provider does not expose any functionality.
- If both the annotations and the provider supplied capacity information are present,
  the annotations will take precedence.
- The 'maxPods' annotation will default to '110' if it is not supplied.
- If you are defining more than one MachineHealthCheck for the same Cluster, make
  sure that the selectors do not overlap.
- If drain is not completed, check logs for Pods with deletionTimestamp set but still
  exist.
- ClusterClass names should be generic enough to make sense across multiple clusters.
- ClusterClass usually evolves over time; consider including a version suffix.
- Users should expect the resources in a Cluster (e.g. MachineDeployments) to behave
  consistently.
- User should expect the Cluster topology to change consistently irrespective of how
  the change has been implemented.
- The diagnostics endpoint is using a self-signed certificate, so we don't verify
  it.
- Requires ServiceAccount token for authorization
- clusterctl init does not install pre-release versions by default.
- clusterctl init forbids users from installing two instances of the same provider
  in the same target namespace.
- Ensure the API endpoint is reachable from the network.
- Ensure a proper cleanup of your infrastructure by deleting the cluster object.
- Cluster API is continuously evolving and aims to remain stable.
- CA key rotation is recommended to create a long-lived CA.
- The https proxy defaults to none.
- The http proxy defaults to none.
- The no-proxy defaults to none.
- The list of addons to be enabled defaults to dns.
- The option to reuse the security group ports set for kubeadm defaults to true.
- ClusterClass names should be generic and consistent.
- Do not reuse the same template in multiple ClusterClasses.
- Cluster API requires that each Runtime Extension must be deployed using an endpoint
  accessible from the Cluster API controllers.
- Runtime Extensions should leverage some form of load-balancing to provide high availability
  and performance benefits.
- ServiceAccount token is required to scrape metrics.
- Insecure diagnostics must be configured to disable certain endpoints.
- Uses OAuth2 with refresh token — requires setup of connected app in api
- Some objects like Contact may return nulls in deeply nested fields
- Before running `clusterctl move`, the user should take care of preparing the target
  management cluster, including also installing all the required provider using `clusterctl
  init`.
- It’s required to have at least one worker node to schedule Cluster API workloads
  (i.e. controllers). A cluster with a single control plane node won’t be sufficient
  due to the `NoSchedule` taint.
- The token which is used to authenticate against the IONOS Cloud API is required
  for access.
- OpenNebula API requires basic authentication using username and password.
- Changes to certain fields of KubeadmControlPlane are propagated in-place.
- Changes will not be propagated to objects marked for deletion.
- Cluster autoscaler does not enforce node group sizes; additional configuration may
  be required.
- Capacity annotations override any provider supplied capacity information.
- If defining more than one MachineHealthCheck, ensure selectors do not overlap to
  avoid conflicts.
- Experimental features are unreliable, some may disappear or change.
- ClusterClass supports MachinePool workers.
- MachineHealthChecks can be configured in the ClusterClass.
- Users should expect the resources in a Cluster to behave consistently no matter
  if a change is applied via a ClusterClass or directly.
- General notes for planning ClusterClass changes suggest understanding the consistency
  of behavior across changes.
- Only certain Kubernetes versions have pre-built Kubernetes AMIs.
- The clusterctl CLI carries a list of predefined providers sponsored by SIG Cluster
  Lifecycle.
- clusterctl fetches the provider components from the provider repository and performs
  variable substitution.
- Paused resources will not be reconciled by a controller. By resuming a resource,
  we allow it to be reconciled again.
- Ensure to create the Secret named `scaleway-secret` in your workload cluster.
- It is important to ensure upgrade paths and minimize disruptions for users.
- Cluster autoscaler does not enforce the node group sizes.
- Use capacity annotations to instruct the autoscaler about sizing of the nodes.
- Only Machines owned by a MachineSet or a KubeadmControlPlane can be remediated by
  a MachineHealthCheck.
- The naming strategy for ControlPlane supports template for generating names.
- Insecure serving is configured, the pprof and log level endpoints are disabled for
  security reasons.
- Docker required v19.03 or newer
- kind required v0.30.0 or newer
- Tilt required v0.30.8 or newer
- kustomize provided via make kustomize
- envsubst provided via make envsubst
- helm required v3.7.1 or newer
- The KubeKey provider documentation is available on GitHub.
- Ensure your environment variables are correctly set before running commands.
- The project aims to evolve responsibly while maintaining stability.
- The kubeconfig file is stored as a secret.
- If a node group is below the minimum number of nodes, or above the maximum number
  of nodes, the cluster autoscaler will not scale that node group up or down.
- Remediation strategy can be defined for KubeadmControlPlane to control how remediation
  occurs.
- External Patch Extensions must validate their input and respond quickly to avoid
  congestion.
- CAPD is the default as it’s more lightweight and requires less setup
- Important! This feature requires the `helm` command to be available in the user’s
  path.
- The token which is used to authenticate against the IONOS Cloud API must be set
  as an environment variable.
- Ensure to configure the necessary templates and images in OpenNebula.
- Cluster operators can edit the labels and annotations applied to a running MachineDeployment
  using the Cluster topology as a single point of control.
- A ServiceAccount token is required to scrape metrics.
- The diagnostics endpoint is using a self-signed certificate.
- Cluster API providers require a cert-manager version supporting the cert-manager.io/v1
  API to be installed in the cluster.
- Changing the etcd version may have unintended impacts on a running Cluster.
- The MicroK8sControlPlane is linked in the cluster definition.
- The join token TTL defaults to 10 years.
- KubeadmControlPlane supports CoreDNS as a DNS server.
- MicroK8s will not set the provider ID automatically.
- Make sure that the selectors do not overlap when defining more than one MachineHealthCheck
  for the same Cluster to prevent conflicts.
- ClusterClass supports MachinePool workers and MachineDeployments.
- Pod Security Standards would be applied by default.
- Use Docker v19.03 or newer for iterating on Cluster API.
- Ensure your cluster is set as the default for kubectl.
- Uses Azure service principal for authentication
- This provider is intended for development purposes only.
- Renewal of the above certificate should be taken care out of band.
- This option does not prevent from providing a cluster CA which is required also
  for other purposes.
- OpenNebula API requires basic authentication using username:password
- 'Important: In order to ensure a proper cleanup of your infrastructure you must
  always delete the cluster object.'
- MicroK8s uses cloud-init scripts for node configuration.
- CACPM does not expose any functionality.
- Cluster API MicroK8s control plane provider uses MicroK8s for cluster provisioning
  and management.
- Make sure that the selectors do not overlap to prevent conflicts
- Consider including a version suffix in the ClusterClass name.
- Don’t reuse the same template in multiple ClusterClasses.
- Concurrent changes to control-plane and/or MachineDeployments should be avoided.
- Runtime SDK is an advanced feature that can impact Cluster API runtime if implemented
  incorrectly.
- It is possible to disable the patch or configure different levels for the configuration
  using variables.
- Cluster API includes a built-in provisioner suitable for testing and development.
- Make sure to follow instructions for the release of cert-manager you are installing.
- Deploys cert-manager into the cluster for use for webhook registration.
- If Tilt is stuck, ensure that docker/podman is up and running and your kubernetes
  cluster is reachable.
- Uses kubeadm bootstrap provider which generates all necessary CAs for you
- Renewal of the above certificate should be taken care out of band
- Use a timestamp in spec.rollout.after to trigger a rollout.
- The rollout can happen before the specified time if changes are made.
- Scaling from zero requires support from the infrastructure provider.
- Ensure that the selectors do not overlap when defining multiple MachineHealthChecks
  for the same Cluster.
- The default value for maxUnhealthy is 100%, which means remediation will occur regardless
  of the state of the cluster.
- Best practices recommend keeping ClusterClass names short and consistent.
- Use of variables can enhance flexibility in ClusterClass definitions.
- Uses a simple call to the Runtime hook.
- If clusterctl installs cert-manager, it will take care of its lifecycle, eventually
  upgrading it during clusterctl upgrade.
- Ensure to replace placeholder values with actual data.
- The project claims the right to remain unfinished as it continuously evolves.
- The project aims to evolve responsibly by ensuring upgrade paths and minimizing
  disruptions for users.
- KubeadmControlPlane resource requires modification to trigger a rolling upgrade.
- Rollback of control plane could be required if the existing and new MachineTemplate
  versions are incompatible.
- Ensure selectors do not overlap to prevent conflicts.
- Metrics scraping requires a ServiceAccount token.
- Existing values inside the KubeadmControlPlaneTemplate will be replaced by this
  patch.
- Requires setup of connected app in Azure
- Cluster associations are made via labels.
- The InfrastructureMachinePool object must have both spec and status objects.
- Once any of failureReason or failureMessage surface on the machine pool, they cannot
  be restored anymore.
- You can cancel the script as soon as it starts the actual test execution via `make
  test-e2e`.
- If you want to run other tests (e.g. upgrade tests), make sure all required env
  variables are set (see the Prow Job config).
- A ClusterAPI compatible image must be available in your OpenNebula.
- The project is continuously evolving and must ensure upgrade paths for users.
- It is recommended to create a long-lived CA for certificate management.
- Cluster API MicroK8s control plane provider (CACPM) is a component responsible for
  managing the control plane of the provisioned clusters.
- Remediation will not be performed if the number of unhealthy Machines exceeds the
  limit set by maxUnhealthy.
- Best practices include keeping ClusterClass names short and consistent.
- If possible, avoid concurrent changes to control-plane and/or MachineDeployments
  to prevent excessive turnover on the underlying infrastructure or bottlenecks in
  the Cluster trying to move workloads from one machine to the other.
- Keep machine labels and annotation stable, because changing those values requires
  machines rollouts.
- It is possible to disable this patch or configure different levels for the configuration
  using variables.
- Cluster API includes a built-in provisioner, Docker, that’s suitable for using for
  testing and development.
- The Docker provider is not designed for production use and is intended for development
  & test only.
- Uses Azure Service Principal for authentication
- This folder contains resources which are not meant to be used directly by users
  of Cluster API.
- once any of `failureReason` or `failureMessage` surface on the machine pool who
  is referencing the bootstrap config object, they cannot be restored anymore (it
  is considered a terminal error; the only way to recover is to delete and recreate
  the machine pool)
- Environment variables are required for configuration.
- Ensure to replace placeholder values in the credentials and URLs.
- The kubeconfig file is stored as a secret and can be retrieved via clusterctl.
- Users should expect the resources in a Cluster to behave consistently.
- The Pod Security Standards would be applied by default.
- It is possible to use the ${HOME} and ${CLUSTERCTL_REPOSITORY_PATH} environment
  variables in url.
- It is possible to use the ${HOME} and ${CLUSTERCTL_REPOSITORY_PATH} environment
  variables in overridesFolder.
- The Cluster API allows for provisioning clusters across various infrastructure providers.
- Once any of `failureReason` or `failureMessage` surface on the machine pool referencing
  the bootstrap config object, they cannot be restored anymore.
- The only way to recover is to delete and recreate the machine pool.
- Integration of Cluster API with OSS Fuzz for continuous testing
- Tests should be easily maintainable, readable, well documented, and consistent
- Uses a real kube-apiserver shared across many test cases.
- Developers should ensure each test runs in isolation from the others.
- For production use-cases a 'real' Kubernetes cluster should be used.
- The project remains unfinished and continuously evolving.
- The MicroK8s bootstrap provider generates cloud-init scripts for machine configuration.
- Users should plan ClusterClass changes before applying them.
- Understand compatibility checks to prevent non-functional Clusters.
- Insecure serving disables pprof and log level endpoints for security.
- Cluster API includes a built-in provisioner, Docker, suitable for testing and development.
- Once any of failureReason or failureMessage surface, they cannot be restored.
- One common example is garbage collection; because there are no controllers monitoring
  built-in resources, objects do not get deleted, even if an OwnerReference is set
  up.
- In case of object used in many test case within the same test, it is possible to
  leverage on Kubernetes GenerateName.
- Cluster API provides a full stack of tools for tuning its own controllers as well
  as controllers for all providers if developed using controller runtime.
- API versioning follows Kubernetes API Deprecation Policy.
- Resource types include MailgunCluster and MailgunMachine.
- Uses environment variables for configuration
- Requires setup of mailgun domain and API key
- The minimum kind supported version is v0.30.0.
- Ensure to specify required environment variables before execution.
- Use Kubernetes secrets to store credentials for cloud providers.
- MicroK8s bootstrap provider generates cloud-init scripts for Kubernetes nodes.
- Only Machines owned by a MachineSet or a KubeadmControlPlane can be remediated by
  a MachineHealthCheck
- ClusterClass allows for flexible cluster configurations.
- Custom naming strategies can be defined for ControlPlane, MachineDeployment, and
  MachinePool.
- A managed Cluster can be used to upgrade, scale, and add MachineDeployments.
- Changes made on the Cluster propagate across all relevant objects.
- Insecure serving disables pprof and log level endpoints.
- Default behavior for this sub-command is to read from stdin.
- The CRD name must have the format produced by sigs.k8s.io/cluster-api/util/contract.CalculateCRDName(Group,
  Kind).
- Make sure to query the correct time range via Grafana or logcli.
- The logs are currently uploaded by using now as the timestamp, because otherwise
  it would take a few minutes until the logs show up in Loki.
- Uses Cluster API test framework for E2E tests
- Environment variables MAILGUN_API_KEY, MAILGUN_DOMAIN, and MAIL_RECIPIENT must be
  set.
- Uses cert-manager to manage the certificates for webhooks
- Ensure that a ClusterAPI compatible image is available in your environment.
- The https proxy to be used defaults to none.
- The http proxy to be used defaults to none.
- The no-proxy to be used defaults to none.
- The maxPods annotation will default to '110' if it is not supplied.
- User should select the annotation for GPU either 'gpu-type' or 'dra-driver' depends
  on whether using Device Plugin or Dynamic Resource Allocation(DRA). 'gpu-count'
  is a common parameter in both.
- E2E tests must use the Cluster API test framework
- Use Ginkgo only for E2E tests
- Requires environment variables MAILGUN_DOMAIN, MAILGUN_API_KEY, and MAIL_RECIPIENT
  to be set.
- Cluster API uses cert-manager to manage the certificates it needs for its webhooks.
- The `spec.rollout.after` field can be set to a timestamp to trigger a rollout.
- Rolling updates can be controlled using `MaxUnavailable` and `MaxSurge` values.
- Cluster Autoscaler requires annotations for min and max node group sizes.
- Scaling from zero support is optional and provider-specific.
- maxUnhealthy is disabled by default and set to 100%.
- Avoid concurrent changes to control-plane and/or MachineDeployments to prevent excessive
  turnover on the underlying infrastructure.
- clusterctl requires a management cluster to operate.
- Provider components must be installed before using clusterctl commands.
- Cluster API requires Docker v19.03 or newer.
- CAPD is the default infrastructure provider for lightweight testing.
- Once any of `failureReason` or `failureMessage` surface on the machine pool, they
  cannot be restored anymore.
- Cluster API metrics still exists only as a dev tool.
- Tracing in Cluster API is not yet implemented.
- 'Ensure to set up environment variables: MAILGUN_DOMAIN, MAILGUN_API_KEY, MAIL_RECIPIENT'
- For instructions on how to build a compatible Image, see our docs.
- Ensure the cluster is provisioned before accessing it.
- The Cluster API project is continuously evolving, requiring responsible evolution
  to minimize disruptions.
- MicroK8s defines a MicroK8sControlPlane and MachineDeployment for node configuration.
- The control plane manifest includes Kubernetes version and replica count.
- Several different components of Cluster API leverage infrastructure machine templates,
  including KubeadmControlPlane, MachineDeployment, and MachineSet.
- The correct process for modifying an infrastructure machine template is to duplicate
  an existing template.
- If the Node for a Machine is removed from the cluster, a MachineHealthCheck will
  consider this Machine unhealthy and remediate it immediately.
- Hooks for Cluster lifecycle events
- Ensure to validate input and handle errors appropriately
- Make sure your cluster is set as the default for `kubectl`.
- Once failureReason or failureMessage surface, they cannot be restored.
- Ensure to set MAILGUN_DOMAIN, MAILGUN_API_KEY, and MAIL_RECIPIENT as environment
  variables.
- Each InfraCluster MUST report when Machine’s infrastructure is fully provisioned
  (initialization) by setting status.initialization.provisioned in the InfraCluster
  resource.
- Cluster API will continue to temporarily support InfraCluster resource using status.ready
  field to report initialization completed.
- The Cluster API project is continuously evolving.
- The defaulting logic for MachineDeployment and MachineSet replicas field is based
  on autoscaler min and max size annotations.
- Uses hooks for cluster lifecycle management
- Multiple hooks for different stages of cluster management
- Ensure to follow the guidelines for deploying Runtime Extensions.
- once any of `failureReason` or `failureMessage` surface on the machine pool who
  is referencing the bootstrap config object, they cannot be restored anymore (it
  is considered a terminal error; the only way to recover is to delete and recreate
  the machine pool).
- once any of `failureReason` or `failureMessage` surface on the machine pool who
  is referencing the InfrastructureMachinePool object, they cannot be restored anymore
  (it is considered a terminal error; the only way to recover is to delete and recreate
  the machine pool).
- In Cluster API you MUST use ginkgo only for E2E tests, where it is required to leverage
  the support for running specs in parallel; in any case, developers MUST NOT use
  the table driven extension DSL (`DescribeTable`, `Entry` commands) which is considered
  unintuitive.
- E2E tests are meant to verify the proper functioning of a Cluster API management
  cluster in an environment that resembles a real production environment.
- A portable E2E test is a test that can run with different infrastructure providers
  by simply changing the test configuration file.
- Cluster API uses infrastructure.cluster.x-k8s.io for infrastructure providers.
- Ensure to follow Kubernetes API Deprecation Policy for versioning.
- Requires setup of connected app in Mailgun
- Environment variables MAILGUN_DOMAIN, MAILGUN_API_KEY, and MAIL_RECIPIENT must be
  set
- In order to ease the transition for providers, the v1beta2 version of the Cluster
  API contract temporarily preserves compatibility with the deprecated v1beta1 contract;
  compatibility will be removed tentatively in August 2026.
- Requires specific environment variables to be set for deployment.
- Change the CIDR to a non-conflicting range
- Change the value of the CLUSTER_TYPE environment variable to k8s
- Change the value of the CALICO_IPV4POOL_IPIP environment variable to Never
- Change the value of the CALICO_IPV4POOL_VXLAN environment variable to Always
- Add the FELIX_VXLANPORT environment variable with the value of a non-conflicting
  port, e.g. 6789.
- Kubernetes version defaults to v1.23.0.
- Ensure that the version of Cluster API is compatible with the Kubernetes version
  of the management cluster.
- If defining multiple MachineHealthChecks for the same Cluster, ensure selectors
  do not overlap.
- Remediation strategy can prevent unnecessary load on infrastructure provider.
- While upgrading a Cluster, if possible avoid any other concurrent change to the
  Cluster.
- Runtime SDK is an advanced feature.
- Runtime Extensions can affect the proper functioning of the Cluster API runtime.
- Uses Ignition v2 for bootstrapping.
- Insecure serving disables pprof and log level endpoints for security reasons.
- It’s required to have at least one worker node to schedule Cluster API workloads.
- Once any of failureReason or failureMessage surface on the machine pool, they cannot
  be restored.
- Make sure you query the correct time range via Grafana or logcli.
- The logs are currently uploaded by using now as the timestamp.
- Each E2E test requires a set of artifacts to be available
- A portable E2E test is a test that can run with different infrastructure providers
  by simply changing the test configuration file
- Controller runtime currently has a limited set of metrics for client-go, making
  it more complex to observe phenomenon like client-go rate limiting.
- Cluster API metrics still exists only as a dev tool, and work is required to automate
  metrics config generation and/or to improve consumption from kube-state-metrics.
- Tuning controllers and finding performance bottlenecks can vary depending on the
  issues.
- Webhooks are implemented using Controller Runtime, requiring interfaces to be defined.
- All resources MUST be namespace-scoped.
- Each Cluster needs a control plane endpoint to sit in front of control plane machines.
- InfraClusterTemplate’s spec.template.spec embeds FooClusterSpec from InfraCluster.
- Automate cluster lifecycle management for platform operators.
- The token which is used to authenticate against the IONOS Cloud API should be set
  in environment variable IONOS_TOKEN.
- The Cluster API project remains true to its original goals and design principles.
- Kubernetes Cluster lifecycle management is a complex problem space.
- Upgrading requires sequential minor version upgrades.
- Scaling from zero support may require provider-specific implementation.
- If implemented incorrectly, a failing Runtime Extension can severely impact the
  Cluster API runtime.
- The diagnostics feature is enabled by default via --diagnostics-address=:8443.
- To serve metrics via HTTP, set --diagnostics-address=localhost:8080 and --insecure-diagnostics.
- Pod Security Standards are applied by default after adding variables and patches.
- Cluster API is made up of many components, all of which need to be running for correct
  operation.
- Once any of `failureReason` or `failureMessage` surface on the machine pool who
  is referencing the InfrastructureMachinePool object, they cannot be restored anymore
  (it is considered a terminal error; the only way to recover is to delete and recreate
  the machine pool).
- Infrastructure providers can support MachinePool Machines by having the InfraMachinePool
  set the `infrastructureMachineKind` to the kind of their InfrastructureMachines.
- One common example is garbage collection; because there are no controllers monitoring
  built-in resources, objects do not get deleted.
- Uses Mailgun API for sending emails
- 'Environment variables required: MAILGUN_API_KEY, MAILGUN_DOMAIN, MAIL_RECIPIENT'
- All resources MUST have the standard Kubernetes TypeMeta and ObjectMeta fields.
- Providers SHOULD implement the pause behaviour for every object with a reconciliation
  loop.
- Changes to certain fields of KubeadmControlPlane are propagated in-place to the
  Machines.
- The `clusterctl` command line interface is specifically designed for providing a
  simple 'day 1 experience'.
- Providers can use variables in the components YAML published in the provider’s repository.
- Uses clusterctl for managing Cluster API resources
- Requires setup of provider components in management cluster
- Cluster API has a direct dependency on cert-manager.
- You must pass `--config ...` to all the clusterctl commands you are running during
  your dev session.
- Cluster API includes a built-in provisioner for testing and development.
- Important! This feature requires the helm command to be available in the user’s
  path.
- 'The `spec` object must have at least one field defined: `providerIDList`.'
- 'The `status` object must have at least one field defined: `ready`.'
- Use sudo setenforce 0 to make SELinux permissive when running e2e tests.
- Uses E2E tests to verify the proper functioning of a Cluster API management cluster
- Tests must use Ginkgo for E2E tests
- Client-go rate limiting must be increased carefully
- Controller concurrency can help keep the work queue clean
- Resync period impacts performance during spikes
- Environment variables MAILGUN_DOMAIN, MAILGUN_API_KEY, and MAIL_RECIPIENT must be
  set.
- InfraCluster MUST report when Machine’s infrastructure is fully provisioned by setting
  status.initialization.provisioned.
- Ensure to set the required environment variables for the OpenNebula API.
- The project is strongly committed to continue its quest in defining a set of common
  API primitives working consistently across all infrastructures.
- MicroK8sControlPlane definition is used to configure the control plane and worker
  nodes.
- The MicroK8sConfig object can be set within both MicroK8sControlPlane and MicroK8sConfigTemplate.
- Users should expect the resources in a Cluster to behave consistently no matter
  if a change is applied via a ClusterClass or directly as you do in a Cluster without
  a ClusterClass.
- If failureReason or failureMessage surfaces, it is a terminal error.
- Environment variables MAILGUN_DOMAIN, MAILGUN_API_KEY, and MAIL_RECIPIENT are required.
- You must tell cluster-api and its developer tooling which type of provider it is.
- InfraCluster must report when Machine’s infrastructure is fully provisioned by setting
  status.initialization.provisioned.
- You MUST define a InfraMachine resource.
- Each Machine needs a provider ID to identify the Kubernetes Node that runs on the
  machine.
- In case you are developing an infrastructure provider which has a notion of failure
  domains where machines should be placed in, the InfraMachine resource MUST comply
  to the value that exists in the spec.failureDomain field of the Machine.
- Infrastructure provider have the opportunity to surface machines addresses on the
  InfraMachine resource; this information won’t be used by core Cluster API controller,
  but it is really useful for operator troubleshooting issues on machines.
- Each InfraMachine MUST report when Machine’s infrastructure is fully provisioned
  (initialization) by setting status.initialization.provisioned in the InfraMachine
  resource.
- Cluster API will continue to temporarily support InfraMachine resource using status.ready
  field to report initialization completed.
- Providers implementers SHOULD implement status.conditions for their InfraMachine
  resource.
- Avoid running workloads on control planes unless absolutely necessary.
- If the replica field is unset in the Cluster definition, Autoscaling can be enabled.
- Users should always aim at ensuring the stability of the Cluster and of the applications
  hosted on it while using spec.topology as a single point of control for making changes
  to the objects that are part of the Cluster.
- A ServiceAccount token is now required to scrape metrics.
- Uses Cluster API for lifecycle management of Kubernetes clusters.
- The Cluster resource references an InfraCluster object.
- The Machine resource references an InfraMachine object.
- Cluster API offers a set of options that can be set on the controller deployment
  at runtime.
- Client-go rate limiting; by increasing the client-go rate limits we allow a controller
  to make more API server calls per second.
- v1beta2 version of the Cluster API contract temporarily preserves compatibility
  with the deprecated v1beta1 contract.
- Each InfraCluster MUST report when Machine’s infrastructure is fully provisioned.
- v1beta2 version of the Cluster API contract *temporarily* preserves compatibility
  with the deprecated v1beta1 contract; compatibility will be removed tentatively
  in August 2026.
- BootstrapConfig resources MUST be namespace-scoped.
- BootstrapConfig MUST report when the bootstrap data secret is fully provisioned.
- It is important to continue and renew efforts to make it easier to bootstrap and
  operate a system composed of many components.
- MicroK8s Control Plane requires specific configuration for addons.
- Cluster version compatibility must be checked before upgrades.
- If defining more than one MachineHealthCheck for the same Cluster, ensure selectors
  do not overlap to avoid conflicts.
- ClusterClass should have a generic name suitable for multiple clusters.
- Consider including version suffix in ClusterClass names.
- Avoid concurrent changes to control-plane and/or MachineDeployments to prevent excessive
  turnover.
- Adds an admission configuration for PodSecurity to the kube-apiserver.
- If the user wants to replace the assets available on a provider repository with
  a locally available asset, the user is required to save the file under $XDG_CONFIG_HOME/cluster-api/overrides/<provider-label>/<version>/<file-name.yaml>.
- The InfrastructureMachinePool object must have both `spec` and `status` objects.
- Use the Cluster API test framework for setup and teardown tasks.
- Ensure cleanup of all resources after tests to prevent resource leakage.
- Client-go rate limiting can limit performance of controllers.
- Traces are not yet implemented in Cluster API.
- Providers implementers SHOULD implement status.conditions for their InfraCluster
  resource.
- Providers MUST set cluster.x-k8s.io/<version> label on the BootstrapConfig Custom
  Resource Definitions.
- The token which is used to authenticate against the IONOS Cloud API must be set.
- The Kubernetes node hosted on the Machine will be cordoned & drained before removal.
- The Machine will respect PreDrainDeleteHook and PreTerminateDeleteHook.
- This hook is called after the Cluster object has been created by the user.
- This hook does not block any further changes to the Cluster.
- Uses clusterctl for managing clusters and providers
- Once any of `failureReason` or `failureMessage` surface on the machine pool who
  is referencing the bootstrap config object, they cannot be restored anymore.
- Never rely on Cluster API behaviours not defined as a contract rule!
- One common example is garbage collection; because there are no controllers monitoring
  built-in resources, objects do not get deleted, even if an OwnerReference is set
  up; as a consequence, usually test implements code for cleaning up created objects.
- Mailgun API requires an API key for authentication.
- Cluster API uses cert-manager to manage the certificates it needs for its webhooks
- The Cluster API contract defines a set of rules a provider is expected to comply
  with in order to interact with Cluster API.
- InfraCluster must report when initialization is completed by setting status.initialization.provisioned.
- All resources MUST have the standard Kubernetes `TypeMeta` and `ObjectMeta` fields.
- In Kubernetes `APIVersion` is a combination of API group and version.
- A bootstrap provider’s bootstrap data must create /run/cluster-api/bootstrap-success.complete
  upon successful bootstrapping of a Kubernetes node.
- Cluster API does not support running multiples instances of the same provider.
- A ClusterAPI compatible image must be available in your Scaleway account.
- Project is continuously evolving and must 'evolve responsibly'.
- The CACPM sets the ProviderID on the provisioned nodes.
- Scaling from zero support is optional and may require provider support.
- The `clusterctl` config file can be used to customize the list of providers and
  provide configuration values.
- The operation of a `clusterctl delete` command is designed to prevent accidental
  deletion of user created objects.
- once any of `failureReason` or `failureMessage` surface on the machine pool who
  is referencing the bootstrap config object, they cannot be restored anymore
- it is considered a terminal error; the only way to recover is to delete and recreate
  the machine pool
- Infrastructure providers can support MachinePool Machines by having the InfraMachinePool
  set the `infrastructureMachineKind` to the kind of their InfrastructureMachines
- the InfrastructureMachinePool will be responsible for creating InfrastructureMachines
  as the MachinePool is scaled up
- the MachinePool controller will create Machines for each InfrastructureMachine and
  set the ownerRef
- the InfrastructureMachinePool will be responsible for deleting the Machines as the
  MachinePool is scaled down
- Requires setting up environment variables MAILGUN_DOMAIN, MAILGUN_API_KEY, and MAIL_RECIPIENT.
- InfraCluster MUST report when Machine’s infrastructure is fully provisioned.
- Each BootstrapConfig MUST store generated bootstrap data into a Kubernetes Secret.
- ControlPlane resource must have a specified control plane endpoint.
- The value must be a valid semantic version; also if the value provided by the user
  does not start with the v prefix, it must be added.
- Ensure that the OpenNebula API is properly configured and accessible.
- Create a Secret named `scaleway-secret` in your workload cluster.
- Cluster API is focused on providing declarative APIs and tooling for Kubernetes
  cluster management.
- Triggers a rolling update of the control plane using the new values found in the
  new MachineTemplate.
- A modification to the KubeadmControlPlane resource’s Spec.Version field will trigger
  a rolling upgrade.
- After adding the variables and patches the Pod Security Standards would be applied
  by default.
- This API is intended for managing Kubernetes clusters and related resources.
- Fuzz tests automatically inject randomly generated inputs, often invalid or with
  unexpected values, into functions to discover vulnerabilities.
- Uses Cluster API test framework for E2E tests.
- Environment variables MAILGUN_DOMAIN, MAILGUN_API_KEY, and MAIL_RECIPIENT are required
  for configuration.
- The v1beta2 version of the Cluster API contract temporarily preserves compatibility
  with the deprecated v1beta1 contract; compatibility will be removed tentatively
  in August 2026.
- The ControlPlane resource name must have the format produced by sigs.k8s.io/cluster-api/util/contract.CalculateCRDName(Group,
  Kind).
- Make sure to export the required environment variables for the setup.
- The cloud-init scripts are saved as secrets that the infrastructure provider uses
  during machine creation.
- User should select the annotation for GPU either gpu-type or dra-driver.
- ClusterClass names should be short and consistent.
- Only certain Kubernetes versions have pre-built Kubernetes AMIs. See list of published
  pre-built Kubernetes AMIs.
- Cluster API publishes nightly versions of the project components’ manifests from
  the main branch to a Google storage bucket for user consumption.
- These files are deleted after a certain period, at the time of this writing 60 days
  after file creation.
- InfraCluster SHOULD report a controlplane endpoint for the Cluster
- InfraCluster MUST report when Cluster’s infrastructure is fully provisioned
- ControlPlane MUST manage a KubeConfig secret for workload clusters
- Make sure to enable the feature gates in the tilt settings file.
- Uses the Cluster API test framework for E2E tests.
- All tests MUST use Gomega assertions.
- Unit and integration tests MUST use go test.
- Client-go rate limiting can affect performance when making API server calls.
- Performance tuning requires careful analysis and data support.
- Mailgun API requires an API key for authentication
- Ensure to set MAILGUN_DOMAIN, MAILGUN_API_KEY, and MAIL_RECIPIENT environment variables
- Compatibility with the deprecated v1beta1 contract will be removed tentatively in
  August 2026.
- BootstrapConfig resource name must follow naming conventions to avoid expensive
  CRD lookup.
- API requires basic authentication with username and password.
- Calico not required for vcluster.
- The Cluster API project claims the right to remain unfinished, because there is
  still a strong, foundational need to continuously evolve, improve and adapt to the
  changing needs of Cluster API’s users.
- MicroK8s defines a MicroK8sControlPlane definition for control plane configuration.
- Worker nodes are configured through the MachineDeployment object.
- KubeadmControlPlane requires modification to trigger rolling upgrade.
- ClusterClass versioning should be included in the name.
- ControlPlane and MachineDeployments require correct metadata for scaling.
- Runtime SDK is an advanced feature and can severely impact the Cluster API runtime
  if implemented incorrectly.
- The hook is called after the Control Plane reports that the control plane is initialized.
- This hook is called after the Cluster object has been updated with a new `spec.topology.version`
  by the user.
- This hook is called after the entire control plane has been upgraded to the version
  specified in `spec.topology.version`.
- This hook is called after the Cluster, control plane and workers have been upgraded.
- This hook is called after the Cluster deletion has been triggered by the user.
- Infrastructure providers can support MachinePool Machines by having the InfraMachinePool
  set the `infrastructureMachineKind`.
- Fuzzing tests automatically inject randomly generated inputs, often invalid or with
  unexpected values, into functions to discover vulnerabilities.
- Use the Cluster API test framework for writing tests.
- E2E tests must run in an environment resembling a real production environment.
- Client-go rate limiting must be increased carefully to avoid problems.
- Tuning parameters should only be adjusted with evidence of bottlenecks.
- Mailgun requires API key for authentication
- The Recipient email must be configured in environment variables
- Each InfraCluster MUST report when Machine’s infrastructure is fully provisioned
  (initialization).
- The name of the secret must surface in .status.dataSecretName.
- nodeDrainTimeoutSeconds is different from `kubectl drain --timeout`
- nodeDeletionTimeoutSeconds allows retry deletion indefinitely if set to 0
- Requires setup of connected app in KubeKey
- Some configurations may require specific environment variables
- MicroK8s defines a MicroK8sControlPlane definition as well as the MachineDeployment
  for configuration.
- Ensure to upgrade Kubernetes minor versions in sequence.
- The autoscaler will not scale down to, or from, zero unless that capability is enabled.
- maxUnhealthy defaults to 100%, which means the short circuiting mechanism is disabled
  by default.
- Basic ClusterClasses are already very powerful.
- It is recommended that Runtime Extensions should leverage some form of load-balancing,
  to provide high availability and performance benefits.
- 'The spec object must have at least one field defined: providerIDList.'
- Logs are currently uploaded by using now as the timestamp.
- Tuning controllers and finding performance bottlenecks can vary depending on the
  issues you are dealing with.
- Mailgun API requires a domain and API key for authentication.
- Cluster API is using a naming convention to avoid an expensive CRD lookup operation
  when looking for labels from the CRD definition of the ControlPlane resource.
- nodeDeletionTimeoutSeconds will retry deletion indefinitely if set to 0
- Control Plane providers are expected to create and maintain a Kubeconfig secret
  for Cluster API to gain access to the workload cluster.
- The kubeconfig secret MUST be created in the same namespace where the Cluster exists.
- The kubeconfig secret MUST be named `<cluster>-kubeconfig`.
- The OpenNebula API requires basic authentication.
- Control plane nodes are configured with addons.
- If using ignition with CAPD you should take care of setting `kubeletExtraArgs` for
  the `kindest/node` image in use.
- Once any of failureReason or failureMessage surface on the machine pool who is referencing
  the bootstrap config object, they cannot be restored anymore.
- Controller runtime currently has a limited set of metrics for client-go.
- Uses API key for authentication — requires setup of Mailgun account
- Cluster API contract defines a set of rules a provider is expected to comply with.
- The Cluster API `Machine` reconciler populates the resource based on the value in
  the `Machine`‘s `spec.bootstrap.configRef` field.
- The project is continuously evolving, ensuring upgrade paths and minimizing disruptions.
- Changes to certain fields do not trigger a full rollout.
- Ensure that the selectors do not overlap when defining more than one MachineHealthCheck
  for the same Cluster.
- Mailgun API requires the MAILGUN_DOMAIN and MAILGUN_API_KEY environment variables
  to be set.
- Bootstrap providers SHOULD implement a BootstrapConfig resource.
- Control plane providers MUST implement a ControlPlane resource.
- Provider’s maintainer are the ultimately responsible for their own project.
- Adding a provider to the clusterctl provider list does not imply any form of quality
  assessment, market screening, entitlement, recognition or support by the Cluster
  API maintainers.
- 'Limitation: Provider artifacts hosted on GitLab don’t support getting all versions.'
- The metadata YAML file must be published to the provider’s repository.
- Strict validation is enforced starting from clusterctl v1.11.
- Being very pragmatic, the resources committed to implement and to maintain a feature
  over time must be considered.
- It is recommended to manage machines with one or more MachineDeployments.
- If defining multiple MachineHealthChecks for the same Cluster, ensure selectors
  do not overlap to prevent conflicts.
- Remediation for machines may be skipped during cluster migration.
- Runtime SDK is an advanced feature and must be implemented with caution.
- Insecure serving configuration disables pprof and log level endpoints.
- Requires MAILGUN_DOMAIN, MAILGUN_API_KEY, and MAIL_RECIPIENT environment variables
- Cluster API contract temporarily preserves compatibility with the deprecated v1beta1
  contract until August 2026.
- Each BootstrapConfig MUST store generated bootstrap data into a Kubernetes Secret
  and surface the secret name in .status.dataSecretName.
- Provider artifacts hosted on GitLab don’t support getting all versions.
- You need to set version explicitly for upgrades.
- If the generated component YAML doesn’t contain a Namespace object, the user will
  be required to provide one to `clusterctl init` using the `--target-namespace` flag.
- In case there is more than one Namespace object in the components YAML, `clusterctl`
  will generate an error and abort the provider installation.
- Enable the experimental Cluster topology feature.
- Ensure to check the API version compatibility.
- Ensure to create the secret with the required keys.
- Refer to the Scaleway documentation for additional setup instructions.
- The project is continuously evolving and adapting to the changing needs of users.
- Cluster API community has defined an opt-in method for infrastructure providers
  to enable scaling from zero-sized node groups.
- Uses clusterctl for managing clusters and provider components.
- Uses Cluster API for managing Kubernetes clusters
- Objects do not get deleted even if an OwnerReference is set up; usually test implements
  code for cleaning up created objects.
- Ensure objects are scoped within the test namespace and deep copied to avoid cross-test
  changes.
- Client-go rate limiting may impact performance of controllers when making many API
  calls.
- Traces in Cluster API are not yet implemented.
- Requires MAILGUN_API_KEY and MAILGUN_DOMAIN environment variables for configuration
- ControlPlane providers MUST implement a ControlPlane resource.
- nodeDeletionTimeoutSeconds can retry deletion indefinitely if set to 0
- IPAM providers are optional when using Cluster API.
- Infrastructure providers need to implement explicit support to be usable in conjunction
  with IPAM providers.
- All fields of type Duration in spec.{controlPlane,workers.machineDeployments[],workers.machinePools[]}
  have been renamed by adding the Seconds suffix.
- The spec.controlPlane.healthCheck field has been restructured and made consistent
  across all resources.
- KubeadmControlPlane (and the entire KCP provider) now implements the v1beta2 Cluster
  API contract
- Pointers have been removed from various struct fields.
- The `spec.machineNamingStrategy` field was renamed to `spec.machineNaming` and is
  now using `MachineNamingSpec` type.
- The `spec.machineTemplate.infrastructureRef` field was moved to `spec.machineTemplate.spec.infrastructureRef`.
- Compatibility support for the v1beta1 version of the Cluster API contract will be
  removed tentatively in August 2026.
- Machines should be started, but Workers are not because Calico isn’t installed yet.
- If you notice Machines are failing to start/restarting your output might look similar
  to this.
- Use basic authentication for accessing OpenNebula API.
- Ensure correct VM and VR templates are specified.
- The worker nodes are configured through the MachineDeployment object.
- Cluster API MicroK8s control plane provider (CACPM) is responsible for managing
  the control plane of provisioned clusters.
- The CACPM does not expose any functionality but sets the ProviderID on provisioned
  nodes.
- Insecure serving is configured the pprof and log level endpoints are disabled for
  security reasons.
- The `clusterctl` config file can be used as an alternative to environment variables.
- It’s possible you could encounter issues if you use a different version to the Cluster
  API default version.
- This API is intended for development purposes only.
- Client-go rate limiting; by increasing the client-go rate limits we allow a controller
  to make more API server calls per second (`--kube-api-qps`) or to have a bigger
  burst to handle spikes (`--kube-api-burst`).
- Providers MUST support the `--namespace` flag in their controllers.
- Providers MUST support the `--watch-filter` flag in their controllers.
- Users must define a InfraCluster resource.
- Each InfraCluster MUST report when Machine's infrastructure is fully provisioned.
- BootstrapConfig resources MUST store generated bootstrap data into a Kubernetes
  Secret.
- BootstrapConfig resources MUST report when the bootstrap data secret is fully provisioned.
- Cluster API temporarily preserves compatibility with the deprecated v1beta1 contract
  until August 2026.
- Important! it is visibility only
- Each provider is responsible for ensuring that all the provider specific resources
  get an OwnerReference.
- The clusterctl command requires that both the components YAML and the cluster templates
  contain all the required objects.
- The type of the `spec.paused` field has been changed from `bool` to `*bool`.
- The spec has been restructured and made consistent across all resources.
- All fields implementing or embedding a reference to a template are now using the
  ClusterClassTemplateReference type.
- The type of the spec.controlPlane.healthCheck.remediation.triggerIf.unhealthyInRange
  field has been changed from *string to string.
- The deprecated spec.variables[].metadata field has been renamed to spec.variables[].deprecatedV1Beta1Metadata.
- KubeadmConfig (and the entire CABPK provider) now implements the v1beta2 Cluster
  API contract
- Support for terminal errors has been dropped (improve status)
- The spec.machineNamingStrategy field was renamed to spec.machineNaming and is now
  using MachineNamingSpec type instead of *MachineNamingStrategy
- The spec.machineTemplate.infrastructureRef field was moved to spec.machineTemplate.spec.infrastructureRef
  and is now using ContractVersionedObjectReference type instead of corev1.ObjectReference
- v1beta1 API version is deprecated and it will be removed tentatively in August 2026
- The implementation of the new v1beta2 version of the Cluster API contract MUST be
  completed before compatibility support for the v1beta1 version of the Cluster API
  contract will be removed tentatively in August 2026.
- When creating many nodes using Cluster API and Docker infrastructure, the OS may
  run into inotify limits which prevent new nodes from being provisioned.
- 'If the error ''Failed to create inotify object: Too many open files'' is present
  in the logs of the Docker Infrastructure provider this limit is being hit.'
- Cluster API manages lifecycle of clusters.
- Annotations are propagated across core API resources.
- To create an IBM Cloud API key, refer to the IBM Cloud documentation.
- Follow the instructions for setting up environment variables before using the API.
- If the nodes don’t become ready after a long period, read the pods in the kube-system
  namespace
- It's important to notice that being a project that is continuously evolving is not
  in contrast with the project being stable.
- Uses MicroK8s for Kubernetes bootstrap.
- Configuration options available via MicroK8sConfig.
- The Kubernetes node hosted on the Machine will be cordoned & drained before removal
  (with well known exceptions like full Cluster deletion).
- Changes to certain fields in KubeadmControlPlane are propagated in-place to Machines.
- Uses Ignition for bootstrapping workload cluster machines.
- Uses patch to add Pod Security Standards configuration.
- Docker provider is not designed for production use and is intended for development
  & test only.
- Once any of `failureReason` or `failureMessage` surface on the machine pool who
  is referencing the InfrastructureMachinePool object, they cannot be restored anymore.
- Client-go rate limiting can affect performance.
- Ensure to configure MAILGUN_DOMAIN, MAILGUN_API_KEY, and MAIL_RECIPIENT environment
  variables.
- Each InfraCluster MUST report when Machine’s infrastructure is fully provisioned
  by setting status.initialization.provisioned.
- InfraCluster controller SHOULD skip reconciliation of InfraCluster resources with
  the cluster.x-k8s.io/managed-by label.
- Metadata must be propagated to control plane instances machines without triggering
  rollouts.
- Control plane providers are expected to create and maintain a Kubeconfig secret
  for Cluster API.
- Each provider MUST define a provider repository.
- ClusterClass definitions files should not use variable substitution.
- Provider authors should be aware of transformations that `clusterctl` applies during
  component installation.
- The spec.machineNamingStrategy field was renamed to spec.machineNaming.
- The spec.machineTemplate.infrastructureRef field was moved to spec.machineTemplate.spec.infrastructureRef.
- Self-assigning Node labels such as node-role.kubernetes.io using the kubelet --node-labels
  flag is not possible due to a security measure imposed by the NodeRestriction admission
  controller.
- Uses Kubernetes annotations for management of cluster resources
- Cluster templates authenticate with Workload Identity by default.
- The control plane provider identifies the VMs’ provider IDs and updates the respective
  machine objects.
- Cluster API provider may not support scaling from zero.
- The metrics endpoint is served via https and protected via authentication.
- Insecure serving is disabled for security reasons when insecure diagnostics is configured.
- clusterctl generate provider --infrastructure aws requires provider components to
  be fetched from the provider repository.
- Once failureReason or failureMessage surfaces, it is a terminal error; recovery
  requires deletion and recreation of the machine pool.
- Uses Ginkgo only for E2E tests, where it is required to leverage the support for
  running specs in parallel.
- Developers MUST NOT use the table driven extension DSL (`DescribeTable`, `Entry`
  commands) which is considered unintuitive.
- Requires configuration of environment variables MAILGUN_DOMAIN, MAILGUN_API_KEY,
  and MAIL_RECIPIENT
- nodeDeletionTimeoutSeconds defines how long the machine controller will attempt
  to delete the Node that the Machine hosts after the Machine is marked for deletion.
  A duration of 0 will retry deletion indefinitely.
- Provider authors should be aware of the transformations that clusterctl applies
  during component installation.
- The `spec.controlPlaneRef` and `spec.infrastructureRef` fields are now using `ContractVersionedObjectReference`
  type.
- Fields of type Duration have been renamed by adding the Seconds suffix and moved
  into the deletion section.
- The `spec.machineNamingStrategy` field was renamed to `spec.machineNaming` and is
  now using `MachineNamingSpec` type instead of `*MachineNamingStrategy`.
- The type of the `spec.kubeadmConfigSpec.clusterConfiguration.apiServer.extraArgs`
  type has been changed to `[]Arg`.
- The type of the `spec.kubeadmConfigSpec.joinConfiguration.nodeRegistration.kubeletExtraArgs`
  type has been changed to `[]Arg`.
- Compatibility support for the v1beta1 version of the Cluster API contract will be
  removed tentatively in August 2026
- Compatibility support for v1beta1 version of the Cluster API contract will be removed
  tentatively in August 2026.
- 'Failed to create control group inotify object: Too many open files'
- When creating many nodes using Cluster API and Docker infrastructure, the OS may
  run into inotify limits.
- Some API methods may require specific configurations.
- MicroK8s uses cloud-init scripts to configure nodes.
- Cluster API MicroK8s control plane provider (CACPM) is responsible for managing
  the control plane of the provisioned clusters.
- Max Unhealthy defaults to 100%.
- Remediation is only possible for Machines owned by a MachineSet or KubeadmControlPlane.
- Cluster operators should ensure the stability of the Cluster and the applications
  hosted on it.
- It is recommended that Runtime Extensions should leverage some form of load-balancing.
- The InfrastructureMachinePool object must have both spec and status objects
- The spec object must have at least one field defined
- Cluster API metrics still exists only as a dev tool, and work is required to automate
  metrics config generation.
- Ensure to set environment variables for MAILGUN_DOMAIN, MAILGUN_API_KEY, and MAIL_RECIPIENT.
- BootstrapConfig resources must have the format produced by sigs.k8s.io/cluster-api/util/contract.CalculateCRDName(Group,
  Kind).
- ControlPlane resource must have the format produced by sigs.k8s.io/cluster-api/util/contract.CalculateCRDName(Group,
  Kind).
- metadata MUST be propagated to control plane instances machines without triggering
  rollouts.
- API version v1beta1 and v1beta2 are available.
- When creating many nodes using Cluster API and Docker infrastructure, either by
  creating large Clusters or a number of small Clusters, the OS may run into inotify
  limits which prevent new nodes from being provisioned.
- Cluster API manages the lifecycle of clusters and their resources
- Required environment variables for VPC include IBMVPC_REGION and IBMVPC_RESOURCEGROUP.
- Required environment variables for PowerVS include IBMPOWERVS_SSHKEY_NAME.
- KubeadmConfig object allows full control of Kubeadm init/join operations.
- Metrics endpoint requires ServiceAccount token with permissions on the /metrics
  path.
- The diagnostics endpoint is using a self-signed certificate, so verification is
  not performed.
- Resync period setting in Cluster API is much lower than default in controller runtime.
- 'Uses environment variables for configuration: MAILGUN_DOMAIN, MAILGUN_API_KEY,
  MAIL_RECIPIENT'
- ControlPlane resource MUST implement initialization completed condition.
- ClusterClass definitions files should not use variable substitution, given that
  ClusterClass and managed topologies provide an alternative model for variable definition.
- 'Provider authors should be aware of the following transformations that `clusterctl`
  applies during component installation: Variable substitution; Enforcement of target
  namespace; All components are labeled.'
- See changes that apply to all CRDs
- Cluster API is designed to automate cluster lifecycle management for platform operators.
- The KKZONE is used to specify where to download the binaries.
- The control plane VIP must be specified.
- A control plane manifest section includes the Kubernetes version, the replica number
  as well as the MicroK8sConfig.
- We don’t suggest running workloads on control planes, and highly encourage avoiding
  it unless absolutely necessary.
- User should select the annotation for GPU either 'gpu-type' or 'dra-driver' depending
  on whether using Device Plugin or Dynamic Resource Allocation(DRA). 'gpu-count'
  is a common parameter in both.
- ClusterClass must be generic enough for multiple clusters.
- Keep ClusterClass names consistent.
- Include version suffix in ClusterClass names.
- The request is a simple call to the Runtime hook.
- The Cluster controller is responsible for reconciling the Cluster resource.
- The Machine controller is responsible for reconciling the Machine resource.
- Fuzz testing is used to discover vulnerabilities.
- Uses Cluster API test framework for setting up management clusters.
- E2E tests require management cluster with all providers installed.
- Environment variables are required for configuring Mailgun integration.
- BootstrapConfig MUST store generated bootstrap data into a Kubernetes Secret.
- 'The provider repository MUST contain the following files: metadata YAML, components
  YAML.'
- The naming conventions for components YAML include core-components.yaml for core
  providers.
- Cluster API v1.8 compared to v1.9 provides an overview of relevant changes for maintainers
  of providers and consumers.
- The Go version used by Cluster API is Go 1.23.x.
- extraArg field types have been changed from map[string]sting to []Arg, thus aligning
  with kubeadm v1beta4 API.
- The spec.machineNamingStrategy field was renamed to spec.machineNaming and is now
  using MachineNamingSpec type instead of *MachineNamingStrategy.
- The spec.machineTemplate.infrastructureRef field was moved to spec.machineTemplate.spec.infrastructureRef
  and is now using ContractVersionedObjectReference type instead of corev1.ObjectReference.
- v1beta1 version of the Cluster API contract is now deprecated
- Docker provider is intended for development environments only.
- Cluster autoscaler does not enforce node group sizes.
- Scaling from zero support may vary by provider.
- Make sure your cluster is set as the default for kubectl.
- This repository includes a reference implementation of the Cluster API.
- The spec object must have at least one field defined.
- The status object must have at least one field defined.
- The Cluster API test framework provides support for building and retrieving the
  manifest files for Cluster API core components and for the Cluster API infrastructure
  provider.
- Status subresource has been added to MailgunCluster and MailgunMachine.
- Requires setup of Mailgun API key and domain in environment variables
- Cluster API will only consider conditions providing type and status.
- Must implement pause behavior for every object with a reconciliation loop.
- BootstrapConfig resources must store generated bootstrap data into a Kubernetes
  Secret.
- BootstrapConfig resources are namespace-scoped.
- All resources must be namespace-scoped.
- Each Cluster needs a control plane endpoint.
- The provider repository must contain metadata YAML and components YAML files.
- Closed source providers cannot be added to the pre-defined list of providers.
- The transition to the new v1beta2 version of the Cluster API contract MUST be completed
  before compatibility support for the v1beta1 version of the Cluster API contract
  will be removed tentatively in August 2026.
- 'If the error ''Failed to create inotify object: Too many open files'' is present
  in the logs, this limit is being hit.'
- The Cluster API project is continuously evolving and aims for stability.
- It is important to manage complexity to maintain quality.
- Changes to certain fields will not be propagated to Machines and KubeadmConfigs
  that are marked for deletion.
- ClusterClass names should be generic and not correspond to a single Cluster.
- Client-go rate limiting requires careful adjustment to avoid API server issues.
- Cluster API metrics are still under development and may require manual configuration.
- BootstrapConfig resource must store generated bootstrap data in a Kubernetes Secret.
- The resource must report when the bootstrap data secret is fully provisioned.
- Control Plane resources must be namespace-scoped.
- All resources must have standard Kubernetes TypeMeta and ObjectMeta fields.
- 'nodeDeletionTimeoutSeconds: A duration of 0 will retry deletion indefinitely.'
- Cluster templates MUST be stored in the same location as the component YAML.
- When using the 'move' label, if the CRD is a global resource, the object is copied
  to the target cluster but not removed from the source cluster.
- The type of the spec.paused field has been changed from bool to *bool (compliance
  with K8s API guidelines)
- All fields of type Duration in spec.topology.{controlPlane,workers.machineDeployments[],workers.machinePools[]}
  have been renamed by adding the Seconds suffix.
- If using a version of Docker Desktop for Mac 4.3 or 4.4, increasing the inotify
  limits is a workaround.
- The OpenNebula API requires basic authentication using a username and password.
- The project is continuously evolving and aims to provide stability.
- MicroK8s uses cloud-init to configure nodes.
- Uses annotations to control scaling of node groups
- Cluster autoscaler does not enforce node group sizes
- Cluster administrators should carefully vet any Runtime Extension registration.
- Requires Azure CLI for authentication setup
- This API supports multiple versions and deployments.
- Cluster API providers are intended for use in Kubernetes environments.
- E2E tests require a set of artifacts to be available.
- You need the right tools for the job when tuning controllers.
- Provider must implement InfraCluster resource with control plane endpoint.
- Resources must be namespace-scoped.
- BootstrapConfig resource must have the format `${env}Config`.
- Each BootstrapConfig must store generated bootstrap data into a Kubernetes Secret.
- Closed source provider can not be added to the pre-defined list of provider shipped
  with clusterctl.
- Provider authors should be aware of the following transformations that `clusterctl`
  applies during component installation
- IPAM providers are optional when using Cluster API
- The `spec.machineTemplate.infrastructureRef` field was moved to `spec.machineTemplate.spec.infrastructureRef`
  and is now using `ContractVersionedObjectReference` type instead of `corev1.ObjectReference`.
- Cluster API contract version v1.11 supports compatibility with the deprecated v1beta1
  contract until August 2026.
- Providers must plan to implement the new v1beta2 version of the Cluster API contract
  before August 2026.
- Inspect conditions of objects using `clusterctl describe --show-conditions all cluster
  capi-quickstart`
- Access logs using `docker logs <MACHINE-NAME>`
- The project is continuously evolving and aims to remain stable.
- The new MachineTemplate should be created first before modifying Version and InfrastructureTemplate.
- spec.rollout.after field can only be used for triggering a rollout.
- A managed Cluster can be used to upgrade, scale, and modify MachineDeployments.
- Cluster API requires infrastructure providers to be defined.
- Some resources may have dependencies on each other.
- When tuning controllers, both for scalability, performance or for reducing their
  footprint, having the right tools for the job is essential.
- Client-go rate limiting can prevent a Kubernetes client from being too aggressive
  to the API server.
- Investigate rate limiting metrics by looking for logs containing 'client-side throttling'.
- Ensure to set MAILGUN_DOMAIN, MAILGUN_API_KEY, and MAIL_RECIPIENT environment variables.
- BootstrapConfig resource name must have the format produced by sigs.k8s.io/cluster-api/util/contract.CalculateCRDName(Group,
  Kind).
- Closed source providers cannot be added to the pre-defined list of provider shipped
  with clusterctl.
- If the generated component YAML doesn’t contain a Namespace object, the user will
  be required to provide one to clusterctl init using the --target-namespace flag.
- Provider authors should ensure that all the provider specific resources have a Metadata.OwnerReferences
  entry.
- Cluster API is a Kubernetes sub-project focused on providing declarative APIs and
  tooling to simplify provisioning.
- If you are expecting built-in support for scaling from zero, please check with the
  Cluster API infrastructure providers that you are using.
- This hook is called after the Control Plane reports that the control plane is initialized.
- 'You can generate a base64 version of your GCP json credentials file using: base64
  -i ~/path/to/gcp/credentials.json'
- Uses Cluster API with no authentication required.
- Uses Cluster API test framework for testing.
- Client-go rate limiting must be increased carefully to avoid issues.
- Resync period in Cluster API is lower than in controller runtime.
- MAILGUN_DOMAIN, MAILGUN_API_KEY, and MAIL_RECIPIENT must be set as environment variables.
- You must define an InfraCluster resource.
- The InfraCluster resource name must have the format produced by sigs.k8s.io/cluster-api/util/contract.CalculateCRDName(Group,
  Kind).
- Failure domains must have unique names.
- Initialization must be reported when infrastructure is fully provisioned.
- A duration of 0 will retry deletion indefinitely
- The Kubeadm Control Plane provider uses a year of validity and refreshes the certificate
  after 6 months.
- Closed source providers cannot be added to the pre-defined list of providers shipped
  with clusterctl.
- Cluster API doesn’t define strict rules about how providers should implement controllers.
- Provider authors should be aware of variable substitution and enforcement of target
  namespace during component installation.
- To resolve 'too many open files' error, increase inotify limits.
- For Node bootstrap failures, check cloud-init logs.
- The project is continuously evolving and aims to provide stable APIs.
- MicroK8s defines a MicroK8sControlPlane definition as well as the MachineDeployment
  to configure control plane and worker nodes.
- The default value for maxUnhealthy is 100%.
- The metrics endpoint is served via https and protected via authentication and authorization.
- Insecure serving configuration disables pprof and log level endpoints for security
  reasons.
- Ensure to define test spec reflecting real user workflow.
- Uses cert-manager to manage certificates for webhooks
- Cluster API requires a management cluster to be deployed first
- A bootstrap provider can optionally taint worker nodes at creation with node.cluster.x-k8s.io/uninitialized:NoSchedule.
- 'During move: Namespaced objects, if not existing in the target cluster, are created.
  Namespaced objects, if already existing in the target cluster, are updated. Namespaced
  objects are removed from the source cluster.'
- The type of the spec.paused field has been changed from bool to *bool.
- The spec.controlPlaneRef and spec.infrastructureRef fields are now using ContractVersionedObjectReference
  type instead of corev1.ObjectReference.
- KubeadmConfig now implements the v1beta2 Cluster API contract
- The initConfiguration.timeouts and joinConfiguration.timeouts fields have been standardized.
- 'If using a version of Docker Desktop for Mac 4.3 or 4.4, the following workaround
  can be used: Increase the maximum inotify file watch settings in the Docker Desktop
  VM.'
- Docker provider is not designed for production use and is intended for development
  environments only.
- The token which is used to authenticate against the IONOS Cloud API
- The API requires basic authentication with the username and password.
- The project is committed to keep working with the broader CAPI community.
- CABPK generates new certificates using specified convention.
- MicroK8s defines a MicroK8sControlPlane definition to configure the control plane.
- To enable scaling from zero, check with the Cluster API infrastructure providers.
- This folder contains various implementations and resources related to Cluster API.
- E2E tests require a set of artifacts including binaries and credentials.
- Use Cluster API test framework for setting up and running tests.
- Client-go rate limiting must be increased carefully to avoid issues with API server.
- Resync period is much lower in Cluster API than in controller runtime.
- Make sure to add environment variables for MAILGUN_DOMAIN, MAILGUN_API_KEY, and
  MAIL_RECIPIENT.
- BootstrapConfig resources must include TypeMeta and ObjectMeta fields.
- BootstrapConfigTemplate resources must support SSA dry run.
- Control plane providers are expected to place machines in failure domains defined
  in Cluster’s status.failureDomains field.
- For clusterctl versions pre-v1alpha4, if provider implementers only update the clusterctl’s
  built-in metadata and don’t provide a metadata.yaml in a new release, users are
  forced to update clusterctl to the latest released version in order to properly
  install the provider.
- Cluster API v1.8 compared to v1.9 provides updates for maintainers of providers.
- Cluster API v1.9 compared to v1.10 outlines changes relevant for provider maintainers.
- 'The following fields have been removed: namespace, uid, resourceVersion, fieldPath'
- apiVersion has been replaced with apiGroup. As before, the version will be read
  from the corresponding CRD
- The spec.machineTemplate.readinessGates field was moved to spec.machineTemplate.spec.readinessGates.
- extraArg field types have been changed from map[string]sting to []Arg, thus aligning
  with kubeadm v1beta4 API
- The spec.kubeadmConfigSpec.clusterConfiguration.apiServer.extraArgs type has been
  changed to []Arg
- The spec.kubeadmConfigSpec.clusterConfiguration.controllerManager.extraArgs type
  has been changed to []Arg
- The spec.kubeadmConfigSpec.clusterConfiguration.scheduler.extraArgs type has been
  changed to []Arg
- The spec.kubeadmConfigSpec.clusterConfiguration.etcd.local.extraArgs type has been
  changed to []Arg
- The spec.kubeadmConfigSpec.initConfiguration.nodeRegistration.kubeletExtraArgs type
  has been changed to []Arg
- The spec.kubeadmConfigSpec.joinConfiguration.nodeRegistration.kubeletExtraArgs type
  has been changed to []Arg
- The spec.kubeadmConfigSpec.clusterConfiguration.certificateValidityPeriodDays and
  spec.kubeadmConfigSpec.clusterConfiguration.caCertificateValidityPeriodDays have
  been added thus aligning with kubeadm v1beta4 API
- The spec.kubeadmConfigSpec.clusterConfiguration.apiServer field does not embed ControlPlaneComponent
  anymore
- The type of the spec.kubeadmConfigSpec.clusterConfiguration.controllerManager field
  has been changed from ControlPlaneComponent to ControllerManager
- The type of the spec.kubeadmConfigSpec.clusterConfiguration.scheduler field has
  been changed from ControlPlaneComponent to Scheduler
- The type of the extraEnvs fields in spec.kubeadmConfigSpec.clusterConfiguration.apiServer,
  spec.kubeadmConfigSpec.clusterConfiguration.controllerManager, spec.kubeadmConfigSpec.clusterConfiguration.scheduler
  and spec.kubeadmConfigSpec.clusterConfiguration.etcd.local has been changed from
  []EnvVar to *[]EnvVar
- The type of the spec.kubeadmConfigSpec.initConfiguration.bootstrapTokens[].token
  field has been changed from *BootstrapTokenString to BootstrapTokenString
- The type of the spec.kubeadmConfigSpec.initConfiguration.nodeRegistration, spec.kubeadmConfigSpec.joinConfiguration.nodeRegistration
  fields have been changed from []corev1.Taint to *[]corev1.Taint
- The type of the spec.kubeadmConfigSpec.joinConfiguration.discovery.bootstrapToken.unsafeSkipCAVerification
  field has been changed from bool to *bool
- The type of the spec.kubeadmConfigSpec.joinConfiguration.discovery.file.kubeConfig.cluster.insecureSkipTLSVerify
  field has been changed from bool to *bool
- The type of the spec.kubeadmConfigSpec.joinConfiguration.discovery.file.kubeConfig.user.exec.provideClusterInfo
  field has been changed from bool to *bool
- The type of the spec.kubeadmConfigSpec.files[].append field has been changed from
  bool to *bool
- The type of the spec.kubeadmConfigSpec.users[].gecos, spec.kubeadmConfigSpec.users[].groups,
  spec.kubeadmConfigSpec.users[].homeDir, spec.kubeadmConfigSpec.users[].shell, spec.kubeadmConfigSpec.users[].passwd,
  spec.kubeadmConfigSpec.users[].primaryGroup, spec.kubeadmConfigSpec.users[].sudo
  fields have been changed from *string to string
- The type of the spec.kubeadmConfigSpec.diskSetup.filesystems[].partition, spec.kubeadmConfigSpec.diskSetup.filesystems[].replaceFS
  fields have been changed from *string to string
- The type of the spec.kubeadmConfigSpec.diskSetup.partitions[].tableType field has
  been changed from *string to string
- The type of the spec.kubeadmConfigSpec.diskSetup.partitions[].layout field has been
  changed from bool to *bool
- The type of the spec.kubeadmConfigSpec.ignition.containerLinuxConfig.strict field
  has been changed from bool to *bool
- The spec.kubeadmConfigSpec.useExperimentalRetryJoin field (deprecated in CAPI v1.2!)
  has been removed
- The following spec.kubeadmConfigSpec fields have been removed because they are not
  necessary
- All fields of type Duration in spec.kubeadmConfigSpec.initConfiguration.bootstrapTokens[]
  have been renamed by adding the Seconds suffix and their type was changed to int32
- The type of the spec.kubeadmConfigSpec.initConfiguration.bootstrapTokens[].expires
  field has been changed from *metav1.Time to metav1.Time
- All fields of type Duration in spec.machineTemplate have been renamed by adding
  the Seconds suffix, moved into the deletion section and their type was changed to
  int32
- All fields of type Duration in spec.remediationStrategy have been renamed by adding
  the Seconds suffix and their type was changed to int32
- The type of the spec.version field has been changed from *string to string
- The type of the spec.remediation field (previously spec.remediationStrategy) has
  been changed from RemediationStrategy to KubeadmControlPlaneRemediationSpec
- A new spec.rollout field has been introduced, it combines previous spec.rolloutBefore,
  spec.rolloutAfter and spec.rolloutStrategy fields.
- The type of the spec.rollout.after, previously spec.rolloutAfter, field has been
  changed from *metav1.Time to metav1.Time
- The type of the spec.remediation.retryPeriodSeconds field (previously spec.remediationStrategy.retryPeriod)
  has been changed from *string to string
- status.conditions has been replaced with status.v1beta2.conditions based on metav1
  condition types
- Replica counters fields are now consistent with replica counters from other resources
- Information about the initial provisioning process is now surfacing under the new
  status.initialization field
- Support for terminal errors has been dropped
- The type of the status.version field has been changed from *string to string
- The status.lastRemediation.timestamp field has been renamed to status.lastRemediation.time
- The type of the status.lastRemediation.retryCount field has been changed from int32
  to *int32
- When using Cluster API with Docker infrastructure, provisioning might be stuck if
  there are stopped containers on your machine from previous runs.
- MicroK8sConfig can be used to configure control plane and worker nodes.
- Changes to certain fields may not be propagated to Machines, InfraMachines and KubeadmConfigs
  that are marked for deletion.
- Use clusterctl generate cluster to create a management cluster.
- Ensure environment variables are set before executing commands.
- Once any of `failureReason` or `failureMessage` surface, they cannot be restored.
- The CRD name must follow a specific format.
- 'Each E2E test requires a set of artifacts to be available: Binaries & Docker images
  for Kubernetes, CNI, CRI & CSI, Manifests & Docker images for the Cluster API core
  components, Manifests & Docker images for the Cluster API infrastructure provider.'
- Client-go rate limiting; by increasing the client-go rate limits we allow a controller
  to make more API server calls per second
- Controller concurrency; by increasing the number of concurrent reconcile loops for
  each controller it is possible to help the system in keeping the work queue clean
- Resync period; this setting defines the interval after which reconcile events for
  all current objects will be triggered
- InfraCluster control plane endpoint and status.failureDomains will be surfaced on
  Cluster’s corresponding fields.
- BootstrapConfig resources must follow the naming convention '${env}Config'.
- Providers MUST set cluster.x-k8s.io/<version> label on the InfraCluster Custom Resource
  Definitions.
- Each provider must have a unique name & type in the pre-defined list of providers.
- Cluster API v1.9 adds new features and improvements over v1.8.
- Cloud infrastructure management requires careful handling of credentials.
- All fields of type Duration in spec.controlPlane, workers.machineDeployments[],
  workers.machinePools[] have been renamed by adding the Seconds suffix.
- 'If the error ''Failed to create inotify object: Too many open files'' is present
  in the logs of the Docker Infrastructure provider, this limit is being hit.'
- Access the Node via ssh to troubleshoot bootstrap failures.
- Add the FELIX_VXLANPORT environment variable with the value of a non-conflicting
  port, e.g. "6789".
- The Cluster API project is committed to continuously evolve and improve.
- Kubernetes Cluster lifecycle management is complex, requiring a simple declarative
  API.
- Ensure that selectors for multiple MachineHealthChecks do not overlap to prevent
  conflicts.
- Remediation for Machines managed by a KubeadmControlPlane follows specific guidelines.
- A +2 minor Kubernetes version upgrade is not allowed in Cluster Topologies. This
  is to align with existing control plane providers.
- This API requires a valid request body with the appropriate fields.
- Ensure that the cluster name and namespace are correctly specified in the request.
- Metrics scraping requires ServiceAccount token with permissions on the /metrics
  path.
- The `spec` object must have at least one field defined.
- Ensure tests are easily maintainable, readable, well documented, and consistent.
- Uses Cluster API test framework for testing
- E2E tests meant to verify the proper functioning of a Cluster API management cluster
- Uses API Key for authentication
- Requires configuration of MAILGUN_DOMAIN and MAILGUN_API_KEY as environment variables
- BootstrapConfig resource generates bootstrap data used to bootstrap a Kubernetes
  node.
- Provider authors should be aware of the transformations that `clusterctl` applies
  during component installation.
- Scaling up control plane to 3 replicas (actual 2)
- Minimum availability requires 3 replicas, current 0 available
- The API requires basic authentication with username and password.
- The project is continuously evolving and improving.
- Users can provide required certificate authorities for kubeadm operations.
- Cluster autoscaler requires setup of annotations for min and max node group sizes.
- Scaling from zero is opt-in and depends on provider support.
- If no Node joins the cluster for a Machine after the NodeStartupTimeout, the Machine
  will be remediated
- A managed Cluster can be used to perform operations like upgrading, scaling, and
  adding MachineDeployments.
- Runtime SDK is an advanced feature that can severely impact the Cluster API runtime
  if implemented incorrectly.
- The default configuration engine for bootstrapping workload cluster machines is
  cloud-init.
- Docker is used as the default provider, which is lightweight and requires less setup.
- Ensure your test can run with different infrastructure providers.
- Controller concurrency can help the system in keeping the work queue clean.
- Environment variables MAILGUN_API_KEY, MAILGUN_DOMAIN, and MAIL_RECIPIENT are required.
- Provider authors should be aware of the following transformations that clusterctl
  applies during component installation.
- Some changes apply to all CRDs
- Ensure compliance with K8s API guidelines
- 'Failed to create inotify object: Too many open files'
- MicroK8s defines a MicroK8sControlPlane definition and MachineDeployment.
- Changes to the fields of KubeadmControlPlane are propagated in-place.
- User should select the annotation for GPU either `gpu-type` or `dra-driver`.
- Ensure the cluster in the default context is reachable by running `kubectl cluster-info`.
- Fuzz testing is used on the Cluster API repository.
- Client-go rate limiting can impact performance when making many API server calls.
- Ensure to set MAILGUN_DOMAIN and MAILGUN_API_KEY environment variables for the controller.
- The resource Version defines the stability of the API and its backward compatibility
  guarantees.
- Avoid relying on Cluster API behaviours not defined as a contract rule.
- Cluster templates with managed topologies require only the cluster object in the
  template.
- Provider authors should implement explicit support to be usable in conjunction with
  IPAM providers.
- IPAM contract is single-stack; two pools and two IPAddressClaims are necessary for
  both v4 and v6 addresses.
- Cluster API follows the license policy of the CNCF.
- Ensure the API endpoint URL is reachable and valid.
- Cluster API is a Kubernetes sub-project focused on providing declarative APIs and
  tooling.
- The project is continuously evolving and aims to keep operational complexity low.
- The correct process for modifying an infrastructure machine template includes duplicating
  an existing template, updating desired fields, and creating the new template on
  the API server.
- If defining more than one MachineHealthCheck for the same Cluster, selectors must
  not overlap.
- It’s required to have at least one worker node to schedule Cluster API workloads
  (i.e. controllers).
- A cluster with a single control plane node won’t be sufficient due to the NoSchedule
  taint.
- This API supports multiple versions with separate endpoints.
- Use the Cluster API test framework for E2E tests.
- Define test spec reflecting real user workflow.
- Client-go rate limiting is a mechanism built inside client-go to prevent a Kubernetes
  client from being too aggressive to the API server.
- Requires MAILGUN_DOMAIN, MAILGUN_API_KEY, and MAIL_RECIPIENT environment variables.
- A bootstrap provider’s bootstrap data must create `/run/cluster-api/bootstrap-success.complete`
  upon successful bootstrapping of a Kubernetes node.
- ControlPlane resource name must have the format produced by sigs.k8s.io/cluster-api/util/contract.CalculateCRDName(Group,
  Kind).
- metadata MUST be propagated to control plane instances machines without triggering
  rollouts
- A ClusterClass definition is automatically included in the output of `clusterctl
  generate cluster` if the cluster template uses a managed topology.
- The spec.paused field has been changed from bool to *bool.
- The type of the spec.clusterNetwork.apiServerPort field has been changed from *int32
  to int32.
- Compatibility support for v1beta1 will be removed tentatively in August 2026.
- external providers (e.g. infrastructure, bootstrap, or control-plane) might allocate
  ports differently
- Cluster API does not support version downgrades.
- When Kubernetes 1.30 is released, it will be supported in v1.7.x (but not in v1.6.x)
- 'Minimum kind supported version: v0.9.0'
- The password used to access the remote vSphere endpoint may want to be set in ~/.cluster-api/clusterctl.yaml
  so your password is not in bash history.
- Kind is not designed for production use.
- The Docker provider is intended for development environments only.
- Azure does not currently support Calico networking
- It is recommended that Azure clusters use the Calico spec that uses VXLAN
- If using a provider that does not yet support v1alpha4, please follow the release
  0.3 quickstart instructions.
- The clusterawsadm utility takes the credentials that you set as environment variables.
- You can retrieve your token directly from the Packet Portal.
- Uses clusterctl for managing clusters
- Requires Kubernetes cluster accessible via kubectl
- A ClusterAPI compatible image must be available in your DigitalOcean account.
- Azure does not currently support Calico networking, recommended workaround provided.
- 'Minimum kind supported version: v0.30.0.'
- This is required to install Kubernetes clusters < v1.24 and for the upgrade from
  v1.23 to v1.24 as we have to use different cgroupDrivers depending on Kubernetes
  version.
- If the Calico pods are in image pull error state (`ErrImagePull`), it’s probably
  because of the Docker Hub pull rate limit.
- The password used to access the remote vSphere endpoint should not be stored in
  bash history.
- If using a provider that does not support v1beta1 or v1alpha4 yet, please follow
  the release 0.3 or release 0.4 quickstart instructions instead.
- Requires setup of connected app in Proxmox
- Some configurations may require specific network settings
- If the Calico pods are in image pull error state (ErrImagePull), it’s probably because
  of the Docker Hub pull rate limit.
- After patching, the calico-node pods will be with Running status.
- If the calico-kube-controllers pod is also in ErrImagePull status, patch its deployment
  to fix the problem.
- The installation procedure depends on the version of kind.
- Ensure your credentials are base64 encoded for cloud providers.
- Requires setup of connected app for cloud provider integration
- Ensure VMs are running before deploying CNI
- Feature gates can be enabled by exporting environment variables before executing
  clusterctl init.
- We can try to fix that by adding a secret with our Docker Hub credentials.
- 'IMPORTANT: In order to ensure a proper cleanup of your infrastructure you must
  always delete the cluster object.'
- The Proxmox credentials are optional, when creating a cluster they can be set in
  the ProxmoxCluster resource, if you do not set them here.
- To fix that, add a secret with Docker Hub credentials.
- Cluster API expects certificates and keys used for bootstrapping to follow a specific
  convention.
- Certificates must be labeled with the key-value pair cluster.x-k8s.io/cluster-name=[cluster
  name].
- Rotating CA certificates is non-trivial; creating a long-lived CA or using a long-lived
  root/offline CA with a short lived intermediary CA is recommended.
- This guide applies when you are using custom certificates for a Cluster API workload
  cluster, rather than relying on automatically generated certificates.
- MicroK8sControlPlane requires Kubernetes version and replica count.
- MachineDeployment specifies clusterName and replica count.
- The spec.rollout.after field can only be used for triggering a rollout, not for
  delaying one.
- Depending on the provider, additional changes to the workload cluster’s manifest
  may be necessary to ensure the new CAPI-managed nodes have connectivity to the existing
  etcd nodes.
- Users can use kustomize to specify custom OS images for Cluster API nodes.
- The kustomize 'namePrefix' and 'nameSuffix' transformers are not currently 'Cluster
  API aware'.
- Uses a single kubeconfig for both management and workload cluster
- MachineHealthChecks only support Machines that are owned by a MachineSet or a KubeadmControlPlane.
- Make sure that the selectors do not overlap when defining multiple MachineHealthChecks
  for the same Cluster.
- Take a closer look at the logs to determine which Pods still have to be evicted
  or haven't gone away yet.
- Future releases are expected to add Ignition v3 support.
- Insecure serving can be configured but disables certain security features.
- ClusterResourceSet feature is enabled by default but can be disabled by setting
  the EXP_CLUSTER_RESOURCE_SET environment variable to false.
- The version field in Pod Security Admission Config defaults to latest.
- The kube-system namespace is exempt from Pod Security Standards enforcement, because
  it runs control-plane pods that need higher privileges.
- Implement a review process where at least two people must approve privileged actions
  such as creating, deleting, or updating clusters.
- GitOps provides an effective way to enforce this requirement through pull request
  workflows, where changes to cluster configurations must be reviewed and approved
  by another team member before being merged and applied to the infrastructure.
- To avoid rate limiting for the public repos set the GITHUB_TOKEN environment variable.
- The token only needs repo scope for clusterctl.
- The `cluster-api` core provider, the `kubeadm` bootstrap provider, and the `kubeadm`
  control-plane provider are automatically installed only if certain conditions are
  met.
- The `clusterctl init` command forbids users from installing two instances of the
  same provider in the same target namespace.
- The implementation assumes the cluster must be stable while doing the move operation.
- User is required to re-apply flag values after the upgrade completes.
- If you want to delete the namespace where the provider components are hosted, use
  the --include-namespace flag.
- If you want to delete the provider’s CRDs, use the --include-crd flag.
- This requires the bash-completion framework.
- Zsh completions are only supported in versions of zsh >= 5.2
- Must pass --config ... to all the clusterctl commands during dev session
- Local repository folder does not contain cluster templates, so the clusterctl generate
  cluster command will fail if a template is not copied into the local repository
- When retrieving the kubeconfig using clusterctl with Docker Desktop on macOS or
  Windows, extra steps may be needed.
- clusterctl plugins are implemented in the same way as kubectl plugins
- The CAPK script uses MetalLB to expose the API servers of workload clusters on the
  local machine.
- Logs are for SRE & developers, not for end users
- Cluster API developers MUST use logs
- Set `--logging-format=json`.
- Set a high log verbosity, e.g. `v=5`.
- Enable alloy, Loki, and Grafana under `deploy_observability`.
- Improving and maintaining this document is a collaborative effort, so we are encouraging
  constructive feedback and suggestions.
- Developers should take care in ensuring each test runs in isolation from the others.
- Objects do not get deleted, even if an OwnerReference is set up.
- Fuzzing tests automatically inject randomly generated inputs.
- Developers should ensure each test runs in isolation from the others, by creating
  objects in separated namespaces.
- The informers cache used to access envtest depends on actual etcd watches/API calls
  for updates, and thus it could happen that after creating or deleting objects the
  cache takes a few milliseconds to get updated.
- Developers should be aware that the informers cache depends on actual etcd watches/API
  calls for updates.
- Test control plane will behave differently from real clusters.
- Using fakeclient is not suitable for all use cases.
- Cluster API offers runtime tuning options that can be set on the controller deployment
  without changing the CAPI code.
- Client-go rate limiting should be set carefully to avoid problems with the API server.
- Increasing controller concurrency helps in keeping the work queue clean but can
  increase API server calls.
- Resync period defines the interval after which reconcile events are triggered and
  can impact performance at scale.
- Providers MUST support the --namespace flag in their controllers.
- Providers MUST support the --watch-filter flag in their controllers.
- While standard security practices for developing Kubernetes controllers apply, it
  is important to recognize that given that infrastructure provider deal with cloud
  credentials and cloud infrastructure, there are additional critical security concerns
  that must be addressed.
- Any cloud resource not linked to a cluster after a fixed configurable period should
  be automatically deleted or marked for garbage collection.
- Protection of machine's bootstrap data is important.
- If you’ve run the Quick Start before ensure that you’ve cleaned up all resources
  before trying it again.
- When provisioning workload clusters using Cluster API with the Docker infrastructure
  provider, provisioning might be stuck if there are stopped containers on your machine
  from previous runs.
- This error was fixed in more recent Cluster API releases on the 0.4 and 1.0 release
  branches.
- The simplest way to resolve the issue is to upgrade to a newer version of Cluster
  API for a given release.
- external providers (e.g. infrastructure, bootstrap, or control-plane) might allocate
  ports differently, please refer to the respective documentation.
- Cluster API releases a new version approximately every four months.
- It’s advised to ensure a restart of the kube-controller-manager is done after upgrading
  to a version of Cluster API which drops support for an APIVersion.
- In another deployment model for Cluster API, the Cluster API providers are used
  not only to manage the lifecycle of separate Workload clusters, but also to manage
  the lifecycle of the Management cluster itself.
- You may want to set this in `$XDG_CONFIG_HOME/cluster-api/clusterctl.yaml` so your
  password is not in bash history.
- The `--wait` flag is REQUIRED for the helm install command to work.
- A ClusterAPI compatible image must be available in your IBM Cloud account.
- Make sure to export required environment variables.
- Ensure to configure the cloud provider image for compatibility.
- Make sure to adjust your Docker config file path before creating the secret.
- Ensure to delete the cluster object for proper cleanup.
- The project is committed to keep working with the broader CAPI community – all the
  Cluster API providers – as a single team in order to continuously improve and expand
  the capability of this solution.
- Cluster API is developed in the open, and is constantly being improved by our users,
  contributors, and maintainers.
- API key is required for authentication.
- Ensure you have the correct permissions set for your API key.
- Use of ClusterAPI compatible images is required for various providers.
- Ensuring a predictable release calendar and clear support windows is crucial.
- Required environment variables for VPC include IBMVPC_REGION, IBMVPC_ZONE, IBMVPC_RESOURCEGROUP,
  IBMVPC_NAME, IBMVPC_IMAGE_ID, IBMVPC_PROFILE, and IBMVPC_SSHKEY_ID.
- Required environment variables for PowerVS include IBMPOWERVS_SSHKEY_NAME, IBMPOWERVS_VIP,
  IBMPOWERVS_VIP_EXTERNAL, IBMPOWERVS_VIP_CIDR, IBMPOWERVS_IMAGE_NAME, IBMPOWERVS_SERVICE_INSTANCE_ID,
  and IBMPOWERVS_NETWORK_NAME.
- The control plane won’t be `Ready` until a CNI is installed.
- 'Configuration options available via MicroK8sConfig include: joinTokenTTLInSecs,
  httpsProxy, httpProxy, noProxy, addons, and portCompatibilityRemap.'
- If you are running CAPM3 release prior to v0.5.0, make sure to export additional
  environment variables.
- Use Kubernetes secrets to store credentials for cloud providers
- The Kubernetes version of the Management and Workload Clusters are allowed to be
  different.
- Management Clusters and Workload Clusters can be upgraded independently and in any
  order.
- If you are running CAPM3 release prior to v0.5.0, make sure to export the required
  environment variables.
- The control plane requires a specific version and replica number.
- The Cluster API provider requires Kubernetes v1.16 or greater to run the v1alpha3
  version of the API.
- This is useful for dynamically scaling clusters where the number of machines keep
  changing frequently.
- ClusterClass can be specified in the ClusterClass template under the workers section.
- MachineHealthChecks can be configured in the ClusterClass for the control plane.
- The OpenNebula API requires basic authentication using the username and password.
- The project is continuously evolving and aims to provide a stable platform.
- Addons can be specified in the control plane configuration.
- Upgrades to the control plane can be triggered by modifying the KubeadmControlPlane
  resource's Spec.Version field.
- If the cluster-autoscaler is below the minimum number of nodes, or above the maximum
  number of nodes, it will not scale that node group up or down.
- Ensure that the OpenNebula API is accessible from the network.
- Basic authentication requires a valid username and password.
- Make sure to create the Secret named `scaleway-secret` in your workload cluster.
- The project is continuously evolving, ensuring stability while adding features.
- Users must specify the cloud provider in the command line arguments to the cluster
  autoscaler binary.
- Scaling from zero support may not be available for all providers.
- In another deployment model for Cluster API, the Cluster API providers are used
  not only to manage the lifecycle of *separate* Workload clusters, but also to manage
  the lifecycle of the Management cluster itself.
- Requires setup of API key for authentication
- If you are running CAPM3 release prior to v0.5.0, make sure to export specific environment
  variables.
- This will trigger a rolling update of the control plane using the new values found
  in the new MachineTemplate.
- The default value for maxUnhealthy is 100%, which disables short-circuiting.
- Experimental features are unreliable, some may be promoted or disappear.
- Automates cluster lifecycle management for Kubernetes.
- Required environment variables for VPC
- Required environment variables for PowerVS
- This API uses basic authentication with username and password
- Runtime Extension can serve multiple Runtime Hooks simultaneously.
- Uses basic authentication for OpenNebula API.
- The project is continuously evolving and adapts to user needs.
- Make sure that the selectors do not overlap to prevent conflicts or unexpected behaviors
  when trying to remediate the same set of machines.
- Ensure to export required environment variables for the cluster.
- The project is continuously evolving.
- Users can provide required certificate authorities (CAs) for kubeadm.
- The autoscaler can be configured to enforce the minimum node group size by enabling
  the --enforce-node-group-min-size flag.
- Variable definitions can be inline in the ClusterClass or from any number of external
  DiscoverVariables hooks.
- The source of a variable definition is recorded in the from field in ClusterClass
  .status.variables.
- Make sure to export the required environment variables before running the setup.
- The project claims the right to remain unfinished, evolving responsibly.
- The Cluster API project is committed to working with the broader CAPI community.
- Time-to-live (TTL) of the token used to join nodes defaults to 10 years
- The default http and https proxy are none
- If draining is not completed, check logs for Pods with deletionTimestamp set but
  still exist.
- Ensure to prevent conflicts between the kind cluster’s CNI and the workload cluster
  CNI.
- Default addons enabled include dns.
- Default join token TTL is 10 years.
- Defaults for proxies are set to none.
- To avoid rate limiting for the public repos set the `GITHUB_TOKEN` environment variable.
  The token only needs `repo` scope for clusterctl.
- Per default `clusterctl` will use a go proxy to detect the available versions to
  prevent additional API calls to the GitHub API.
- Cluster API automates cluster lifecycle management for platform operators.
- Ensure a compatible image is available in the image library before proceeding.
- The project is continuously evolving and aims to provide a stable and consistent
  platform.
- In `MicroK8sControlPlane`, `MicroK8sConfig` is under `MicroK8sConfig.spec.controlPlaneConfig`.
- In `MicroK8sConfigTemplate`, `MicroK8sConfig` is under `MicroK8sConfigTemplate.spec.template.spec`.
- ClusterClass supports MachinePools and MachineHealthChecks.
- Best practices include using generic names for ClusterClass.
- Each Runtime Extension must be deployed using an endpoint accessible from the Cluster
  API controllers.
- Insecure serving is configured disables pprof and log level endpoints.
- clusterctl.cluster.x-k8s.io labels and cluster.x-k8s.io/provider labels must not
  be altered
- Cert-manager version v1.19.1 will be installed if not already present
- clusterctl publishes nightly versions of the project components’ manifests from
  the main branch to a Google storage bucket for user consumption.
- If shell completion is not already enabled in your environment you will need to
  enable it.
- Ensure you have the necessary environment variables set for the KubeKey configuration.
- MicroK8s defines a MicroK8sControlPlane definition as well as the MachineDeployment.
- The MicroK8sConfig object can be set in both MicroK8sControlPlane and MicroK8sConfigTemplate.
- Some infrastructure providers may support in-place modifications of certain infrastructure
  machine template fields.
- Cluster operators can edit labels and annotations applied to a running MachineDeployment
  using the Cluster topology as a single point of control.
- Existing values inside the KubeadmControlPlaneTemplate at the mentioned keys will
  be replaced by this patch.
- If cert-manager is provided by the users, the user is responsible for upgrading
  this component when required.
- Every object's Status subresource, including every nested field (e.g. Status.Conditions),
  is never restored during a move operation.
- clusterctl config file is located at $XDG_CONFIG_HOME/cluster-api/clusterctl.yaml.
- The project is committed to define common API primitives working consistently across
  all infrastructures.
- MicroK8s uses cloud-init scripts to configure control plane and worker nodes.
- Cluster Autoscaler does not enforce the node group sizes.
- The autoscaler can be configured to enforce the minimum node group size.
- Machines managed by a KubeadmControlPlane are remediated according to the delete-and-recreate
  guidelines.
- Keep the ClusterClass names short and consistent.
- When selecting the --kubernetes-version, ensure that the kindest/node image is available.
- When retrieving the kubeconfig using clusterctl with Docker Desktop on macOS or
  Windows or Docker Desktop (Docker Engine works fine) on Linux, you’ll need to take
  a few extra steps to get the kubeconfig for a workload cluster created with the
  Docker provider.
- Ensure all environment variables are set before deployment.
- Cluster API MicroK8s control plane provider does not expose any functionality. It
  sets the ProviderID on the provisioned nodes.
- Use the --enforce-node-group-min-size flag to enforce minimum node group size.
- If defining more than one MachineHealthCheck for the same Cluster, make sure selectors
  do not overlap to prevent conflicts.
- Make sure to add the ExtensionConfig object to the YAML manifest used to deploy
  the runtime extensions.
- Cluster API has a direct dependency on cert-manager. It’s possible you could encounter
  issues if you use a different version to the Cluster API default version.
- Allow deploying CAPK workload clusters from the Tilt UI (optional)
- Other infrastructure providers may be added to the cluster using local clones
- Some objects like ManagementCluster may return nulls in deeply nested fields
- Kubernetes Cluster lifecycle management is a complex problem space, especially if
  you consider doing this across so many different types of infrastructures.
- The first node cloud-init will be a control plane node.
- Control plane nodes need to join a cluster and contribute to its HA.
- Requires an IBM Cloud API key for authorization
- Ensure proper IAM roles are assigned for the API key
- The KubeKey is used to specify where to download the binaries.
- The `spec.rollout.after` field can only be used for triggering a rollout, not for
  delaying one.
- Changing the `KubeadmControlPlane` resource’s `Spec.Version` field triggers a rolling
  upgrade.
- User should select the annotation for GPU either `gpu-type` or `dra-driver` depending
  on whether using Device Plugin or Dynamic Resource Allocation(DRA).
- Insecure serving can disable pprof and log level endpoints for security reasons.
- clusterctl uses a configuration file located at $XDG_CONFIG_HOME/cluster-api/clusterctl.yaml
- The code is the source of truth!
- A ClusterAPI compatible image must be available in your Nutanix image library
- A ClusterAPI compatible image must be available in your OpenStack
- A ClusterAPI compatible image must be available in your Outscale account
- A ClusterAPI compatible image must be available in your VCD catalog
- A ClusterAPI compatible image must be available in your Vultr account
- Changes to certain fields will not be propagated to Machines, InfraMachines and
  KubeadmConfigs that are marked for deletion.
- Uses a set of predefined providers sponsored by SIG Cluster Lifecycle.
- It’s required to have at least one worker node to schedule Cluster API workloads
  (i.e. controllers). A cluster with a single control plane node won’t be sufficient
  due to the NoSchedule taint.
- Also renewal of the above certificate should be taken care out of band.
- Ensure the IBM Cloud API key is set as an environment variable.
- Ensure the OpenNebula API is reachable at the specified endpoint.
- KubeadmControlPlane supports CoreDNS as a DNS server at this time.
- The feature controlling remediation retries is only available for KubeadmControlPlane.
- This requires the bash-completion framework
- Ensure the cluster in the default context is reachable by running `kubectl cluster-info`
- Switch to the right context with `kubectl config use-context`
- Ensure required environment variables are set for deployment.
- Use a compatible image for Kubernetes.
- If you are defining more than one MachineHealthCheck for the same Cluster, make
  sure that the selectors do not overlap to prevent conflicts or unexpected behaviors.
- Experimental features are unreliable.
- Some features may require infrastructure providers to implement a separate CRD.
- Uses Ignition v2 for bootstrapping workload clusters.
- Metrics endpoint requires a ServiceAccount token.
- Uses Docker for testing and development — not designed for production use.
- Cluster API supports separate management and workload clusters.
- Changes to specific fields of MachineDeployment and MachineSet are propagated in-place.
- Cluster API providers are developed by independent teams, and each team is free
  to define their own processes and conventions.
- The project aims to evolve responsibly, ensuring upgrade paths and minimizing disruptions.
- MicroK8s uses cloud-init scripts for node configuration
- Control plane nodes require addons to be enabled
- Scaling from zero support depends on provider implementation.
- maxUnhealthy defaults to 100%.
- Users should expect the resources in a Cluster (e.g. MachineDeployments) to behave
  consistently no matter if a change is applied via a ClusterClass or directly.
- Paused resources will not be reconciled by a controller.
- BootstrapConfig MUST create a bootstrap data secret where machines should be placed
  in
- BootstrapConfig MUST report when Machine’s bootstrap data secret is fully provisioned
- BootstrapConfig SHOULD report conditions
- BootstrapConfig SHOULD report terminal failures
- BootstrapConfig SHOULD report taint Nodes at creation
- BootstrapConfig SHOULD create a sentinel file on machines
- Ensure KubeKey is correctly set up before proceeding.
- Use the correct SSH credentials for the Linux user.
- The time-to-live (TTL) of join token defaults to 10 years.
- The default https proxy is none.
- The default http proxy is none.
- The default no-proxy is none.
- The default addon is dns.
- If defining more than one MachineHealthCheck for the same Cluster, make sure that
  the selectors do not overlap.
- External Patch Extensions must respond quickly to avoid delaying reconciles.
- Cluster API is designed to work with Kubernetes clusters.
- Ensure that the Kubernetes cluster is reachable.
- BootstrapConfig MUST create a bootstrap data secret.
- BootstrapConfig MUST report when Machine's bootstrap data secret is fully provisioned.
- BootstrapConfig SHOULD report conditions.
- BootstrapConfig SHOULD report terminal failures.
- BootstrapConfig SHOULD report taint Nodes at creation.
- BootstrapConfig SHOULD create a sentinel file on machines.
- Logs can be filtered by Cluster and Machine names.
- The OpenNebula API requires basic authentication with the username and password
  provided in ONE_AUTH.
- Ensure that selectors do not overlap for multiple MachineHealthChecks.
- Short-circuiting mechanism is disabled by default.
- Ensure unique ClusterClass names across multiple clusters.
- Use variable definitions for customizable parameters.
- It is possible to disable the pod security patch or configure different levels.
- BootstrapConfig MUST report when Machine's bootstrap data secret is fully provisioned
- Improving and maintaining this document is a collaborative effort
- The IONOS Cloud credentials are configured in the IONOSCloudCluster.
- The project is continuously evolving and focuses on providing declarative APIs for
  Kubernetes cluster management.
- User should select the annotation for GPU either 'gpu-type' or 'dra-driver'.
- Ensure the stability of the Cluster and of the applications hosted on it while using
  spec.topology as a single point of control for making changes to the objects that
  are part of the Cluster.
- All external patches must support the new apiVersion before bumping apiVersions.
- Ensure each test runs in isolation from the others by creating objects in separated
  namespaces.
- Garbage collection may behave differently in tests.
- 'Users selecting this deployment model, please be aware: Giving the increasingly
  complex task that is to manage multiple instances of the same controllers, the Cluster
  API community may only provide best effort support for users that choose this model.'
- Cluster API infrastructure provider generally has two main API types, one modeling
  the infrastructure for the cluster and one for a machine/VM.
- Regenerate the RBAC roles after modifying the controller annotations.
- Environment variable IBMCLOUD_API_KEY is used to authorize the infrastructure provider
  manager against the IBM Cloud API.
- Requires setup of connected app in KubeKey.
- Cluster resource references an InfraCluster object.
- Machine resource references an InfraMachine object.
- Logs can be analyzed with Grafana and Loki.
- Cluster API requires setup of connected app in api
- The Mailgun API has specific requirements for email-based fields.
- Ensure that the Cluster API controller sets ownership references.
- Uses environment variables for configuration — MAILGUN_DOMAIN, MAILGUN_API_KEY,
  MAIL_RECIPIENT
- Ensure to export the required environment variables for OpenNebula.
- The project is continuously evolving and aims to provide stable and reliable APIs.
- KCP manages certificate rotations automatically if configured.
- MicroK8s uses cloud-init scripts for node configurations.
- The kubeconfig file is stored as a secret and the user can retrieve via `clusterctl`.
- Uses Pod Security Standards by default.
- BootstrapConfig must create a bootstrap data secret where machines should be placed
  in.
- BootstrapConfig must report when Machine’s bootstrap data secret is fully provisioned.
- BootstrapConfig should report conditions.
- BootstrapConfig should report terminal failures.
- BootstrapConfig should report taint Nodes at creation.
- BootstrapConfig should create a sentinel file on machines.
- Ensure to handle API rate limits.
- Webhook implementation requires additional setup.
- Uses environment variables for configuration — MAILGUN_DOMAIN, MAILGUN_API_KEY,
  and MAIL_RECIPIENT must be set.
- VPC region
- Ensure you have the necessary credentials set for accessing the OpenNebula API.
- Add the FELIX_VXLANPORT environment variable with the value of a non-conflicting
  port, e.g. '6789'.
- The project is continuously evolving, ensuring upgrade paths and minimizing disruptions
  for users.
- MicroK8s uses cloud-init scripts for node provisioning.
- Changes to certain fields are propagated in-place to the Machines and do not trigger
  a full rollout.
- User should select the annotation for GPU either gpu-type or dra-driver depending
  on whether using Device Plugin or Dynamic Resource Allocation(DRA).
- Insecure serving can disable pprof and log level endpoints.
- Uses the Cluster API for managing clusters
- Ensure podSecurityStandard is enabled for security compliance
- BootstrapConfig MUST create a bootstrap data secret where machines should be placed
  in.
- BootstrapConfig MUST report when Machine’s bootstrap data secret is fully provisioned.
- Uses Moby Buildkit to speed up image builds
- BuildKit does not currently work on SELinux
- Maintainers are continuously working on improving Cluster API developer environment
  and tooling.
- Cluster API resources have a domain of cluster.x-k8s.io
- API versioning does not need to be in sync with Cluster API version
- Ensure that API key is kept secure and not exposed in source code.
- Ensure to set the correct API endpoint and credentials.
- The provider sets the ProviderID on the provisioned nodes.
- Cluster autoscaler can be configured to enforce minimum node group size by enabling
  the --enforce-node-group-min-size flag.
- Scaling from zero support is optional and may require provider implementation.
- Using spec.topology as a single point of control for making changes to the objects.
- The objects which are part of a Cluster topology are the infrastructure Cluster,
  the Control Plane, the MachineDeployments and the templates derived from the ClusterClass.
- While the upgrade is blocked changes made to the Cluster Topology will be delayed
  propagating to the underlying objects while the object is waiting for upgrade.
- Applies Pod Security Standards by default.
- Uses the clusterctl configuration file for customization.
- Ensure required images are available in the kind cluster before running clusterctl
  init.
- Recommended to use cluster-templates.yaml for creating objects
- Mailgun API requires a valid API key for access.
- Ensure to follow Kubernetes API conventions for resource definitions.
- 'Environment variables are required for configuration: MAILGUN_DOMAIN, MAILGUN_API_KEY,
  MAIL_RECIPIENT.'
- The write permissions allow the Cluster controller to set owner references and labels
  on the InfraCluster resources; write permissions are not used for general mutations
  of InfraCluster resources, unless specifically required.
- Ensure all required environment variables are set correctly.
- Node group sizes are not enforced by the cluster autoscaler.
- Changes made on the Cluster are propagated across all relevant objects.
- All guidelines defined in Implementing Runtime Extensions apply to the implementation
  of Runtime Extensions for lifecycle hooks as well.
- Runtime SDK is an advanced feature that requires proper implementation.
- Variable conflicts must be resolved by ClusterClass authors.
- Ensure that the clusterctl completion script gets sourced in all your shell sessions.
- Uses real kube-apiserver shared across many test cases
- Developer should ensure each test runs in isolation from the others
- Ensure to define your API types correctly when creating MailgunCluster and MailgunMachine.
- 'Environment variables required: MAILGUN_DOMAIN, MAILGUN_API_KEY, MAIL_RECIPIENT'
- The version of your provider does not need to be in sync with the version of core
  Cluster API resources.
- Cluster API is using a naming convention to avoid an expensive CRD lookup operation.
- Create the Secret named scaleway-secret in your workload cluster.
- Cluster API is continuously evolving and improving to adapt to user needs.
- MicroK8s bootstrap provider generates cloud-init scripts for node configuration.
- The configuration includes control plane and worker node specifics.
- Scaling from zero support is optional and depends on the provider.
- Understand what Compatibility Checks are and how to prevent changes that can lead
  to non-functional Clusters.
- The Machine controller sets OwnerReferences on associated objects.
- The MachinePool controller maintains status synchronization with InfrastructureMachinePool.
- Use 'sudo setenforce 0' to make SELinux permissive when running e2e tests.
- Developers should create objects in separated namespaces to ensure test isolation.
- Use apikey for authentication
- Ensure idempotency in API calls
- Environment variables must be set for MAILGUN_DOMAIN, MAILGUN_API_KEY, and MAIL_RECIPIENT.
- Make sure to export necessary environment variables before running commands.
- The combination of declarative APIs and controllers defines how this project aims
  to make Kubernetes and Cluster API a stable, reliable and consistent platform.
- MicroK8s is a lightweight Kubernetes distribution designed for developers and DevOps.
- Addons must be enabled on the control plane node.
- Machines managed by a KubeadmControlPlane are remediated according to the delete-and-recreate
  guidelines
- Ensure ClusterClass names are generic and consistent.
- Cluster operators can edit the labels and annotations applied to a running MachineDeployment.
- Uses admission configuration for PodSecurity to the kube-apiserver.
- BootstrapConfig must create a bootstrap data secret where machines should be placed
  in
- BootstrapConfig must report when Machine’s bootstrap data secret is fully provisioned
- BootstrapConfig should report conditions
- BootstrapConfig should report terminal failures
- BootstrapConfig should report taint Nodes at creation
- BootstrapConfig should create a sentinel file on machines
- Logs can be analyzed with Loki and Grafana.
- Uses Mailgun API for email notifications.
- Uses environment variables for configuration.
- Ensure correct authentication credentials are provided for API access.
- The project is committed to continue its quest in defining a set of common API primitives
  working consistently across all infrastructures.
- Before getting started you should be aware of the expectations that come with using
  an external etcd cluster.
- Autoscaler requires annotations on MachineSet, MachineDeployment, or MachinePool
  resources.
- Insecure serving can be configured but disables pprof and log level endpoints.
- Do not rely on Cluster API behaviours not defined as a contract rule.
- Users should be aware of the complexity in managing multiple instances of the same
  controllers.
- Kubernetes resources have a Group, Version and Kind that uniquely identifies them.
- The domain for Cluster API resources is cluster.x-k8s.io.
- If the resource is externally managed, exit the reconciliation.
- Providers MUST set 'cluster.x-k8s.io/<version>' label on the InfraMachine Custom
  Resource Definitions.
- The API key must be set in the environment variable IBMCLOUD_API_KEY.
- Cluster API claims the right to remain unfinished, continuously evolving and adapting
  to the changing needs of its users.
- Some infrastructure providers may choose to support in-place modifications of certain
  infrastructure machine template fields.
- A managed Cluster can be used to upgrade a Cluster, scale a ControlPlane, scale
  a MachineDeployment, add a MachineDeployment, and use variables in a Cluster.
- Ensure all variables exist and have the right type.
- An additional Provider object is created in the target namespace where the provider
  is installed.
- 'Uses environment variables for configuration: MAILGUN_DOMAIN, MAILGUN_API_KEY,
  MAIL_RECIPIENT.'
- Providers MUST set cluster.x-k8s.io/<version> label on the InfraMachine Custom Resource
  Definitions.
- Ensure to provide correct authentication details for Ironic API.
- Overriding default configurations in KubeadmConfig may lead to broken Clusters.
- The MicroK8s bootstrap provider generates cloud-init scripts for Kubernetes nodes.
- If defining more than one MachineHealthCheck for the same Cluster, ensure that selectors
  do not overlap to prevent conflicts.
- Plan ClusterClass changes before applying them.
- Understand Compatibility Checks to prevent changes that can lead to non-functional
  Clusters.
- Logs are currently uploaded by using now as the timestamp, because otherwise it
  would take a few minutes until the logs show up in Loki.
- Tests should run in isolation from each other
- Cluster API provides a full stack of tools for tuning its own controllers.
- Ensure to handle rate limits and retries appropriately.
- Uses API key for authentication.
- Make sure to set environment variables for MAILGUN_DOMAIN and MAILGUN_API_KEY.
- InfraCluster resource name must have the format produced by sigs.k8s.io/cluster-api/util/contract.CalculateCRDName(Group,
  Kind).
- Providers MUST set `cluster.x-k8s.io/<version>` label on the InfraMachine Custom
  Resource Definitions.
- When developing a provider, you MUST consider any Cluster API behaviour that is
  not defined by a contract rule as a Cluster API internal implementation detail.
- dataSecretName is part of status and must be deterministically recreatable
- Ensure to have the correct OpenNebula credentials for access.
- Ensure that relevant infrastructure machine templates reference the appropriate
  image for the Kubernetes version.
- The metrics endpoint is served via HTTPS and protected via authentication.
- Using insecure serving disables pprof and log level endpoints for security reasons.
- Uses local repositories for provider assets.
- The code is the source of truth.
- The API version of Cluster API and the version of your provider do not need to be
  in sync.
- Reconcile method needs to ensure idempotency to avoid sending duplicate emails.
- Uses environment variables for configuration like MAILGUN_DOMAIN, MAILGUN_API_KEY,
  MAIL_RECIPIENT.
- Each InfraMachine MUST report when Machine’s infrastructure is fully provisioned.
- Cluster API does not support running multiple instances of the same provider.
- Requires specific environment variables to be set for configuration.
- Upgrades to the control plane may require specific configurations depending on the
  infrastructure provider.
- Metrics are only available if the diagnostics feature is enabled.
- Pod Security Standards would be applied by default after adding the variables and
  patches.
- If a DOCKER_HOST is specified, check that the DOCKER_HOST has the correct prefix
  (usually unix://).
- Cluster API will continue to temporarily support InfraMachine resource using `status.ready`
  field to report initialization completed.
- Environment variables must be set for proper configuration.
- Cluster API compatible images must be available.
- The project aims to simplify Kubernetes cluster lifecycle management.
- Continuous evolution of the API to meet user needs is a priority.
- MicroK8s defines a MicroK8sControlPlane definition and MachineDeployment for configuration.
- The correct process for modifying an infrastructure machine template involves duplicating
  an existing template and updating the desired fields.
- Remediation retries can be controlled by defining an optional remediationStrategy.
- Use generic names for ClusterClass to avoid confusion.
- Avoid reusing templates in multiple ClusterClasses.
- Cluster API provides a set of options that can be set on the controller deployment
  at runtime, without the need of changing the CAPI code.
- BootstrapConfigTemplate MUST specifically implement support for SSA dry run calls
  from the topology controller.
- Ensure to configure the KubeKey environment variables correctly.
- Kubernetes version must be compatible with the desired images.
- Users may choose to provide their own certificate authorities or let KCP generate
  self-signed CA.
- MicroK8s requires specific configuration options to be set for the control plane
  and worker nodes.
- If defining more than one MachineHealthCheck for the same Cluster, make sure selectors
  do not overlap.
- Remediation strategy feature is only available for KubeadmControlPlane.
- If you change a template field 'in place', or if you rotate the template referenced
  in the ClusterClass by pointing to a new template with the same field changed, or
  if you change the same field via a patch, the effects on the Cluster are the same.
- Insecure serving is configurable but disables pprof and log level endpoints.
- Setup of a Kubernetes cluster with providers is necessary to run E2E tests.
- Creating a suite of E2E tests can provide value for long-term success.
- Cluster API includes tools for tuning controllers and observability.
- Ensure to set up your Mailgun account with proper API keys.
- Follow the Mailgun documentation for specific API usage and limits.
- When developing a provider, you MUST consider any Cluster API behaviour that is
  not defined by a contract rule as an internal implementation detail.
- Requires setup of environment variables for OpenNebula API credentials
- Ensure that the provided image is compatible with ClusterAPI
- The project is continuously evolving and may have unfinished features.
- The MicroK8sControlPlane can be configured with a Kubernetes version and replica
  count.
- Uses Pod Security Standards by default after applying the patches.
- Logs are uploaded using now as the timestamp to ensure quick availability in Loki.
- Make sure to add this annotation to MailgunClusterReconciler.
- Secrets and config maps are used for sensitive data.
- Compatibility will be removed tentatively in August 2026.
- The Version field should be of type string.
- The minimum Kubernetes version will be used to determine when a control plane is
  fully upgraded.
- Make sure to set the required environment variables before initializing.
- The node that hosts the VM template to be used to provision VMs
- Ensure that the correct version of Kubernetes is referenced in MachineTemplate.
- User should select the annotation for GPU either 'gpu-type' or 'dra-driver' depends
  on whether using Device Plugin or Dynamic Resource Allocation(DRA).
- If defining more than one MachineHealthCheck for the same Cluster, ensure that the
  selectors do not overlap.
- Can configure different levels for the configuration using variables.
- If clusterctl installs cert-manager, it will take care of its lifecycle.
- 'Only the following Cluster API resources are supported by the rollout command:
  kubeadmcontrolplanes, machinedeployments.'
- Some objects like Cluster may return nulls in deeply nested fields
- Use `jq` to query the logs
- Building images on SELinux may require setting SELinux to permissive
- Every Kubernetes resource has a Group, Version and Kind that uniquely identifies
  it.
- Providers MUST implement the pause behaviour for every object with a reconciliation
  loop.
- The Docker provider requires the `ClusterTopology` and `MachinePool` features to
  deploy ClusterClass-based clusters.
- Ensure to export all required environment variables before proceeding.
- The Cluster API project is focused on providing declarative APIs and tooling to
  simplify provisioning.
- Runtime SDK is an advanced feature and must be implemented correctly to avoid impacting
  the Cluster API runtime.
- Variable definition conflicts must be resolved by ClusterClass authors.
- If you are using the kubeadm bootstrap provider you do not have to provide any Cluster
  API secrets.
- Logs are uploaded using now as the timestamp to ensure they appear promptly.
- The API version of Mailgun and the version of your provider do not need to be in
  sync.
- Uses API key for authentication
- Each InfraMachine MUST report when Machine's infrastructure is fully provisioned.
- Cluster API does not support running multiples instances of the same provider
- Providers MUST set cluster.x-k8s.io/<version> label on the BootstrapConfig Custom
  Resource Definitions
- The v1beta2 version temporarily preserves compatibility with the deprecated v1beta1
  contract; compatibility will be removed tentatively in August 2026.
- Ensure the KubeKey environment variables are set correctly.
- Ensure proper cleanup of your infrastructure by deleting the cluster object.
- Control plane configuration includes Kubernetes version and replicas.
- Ignition support will be added to more providers in the future.
- clusterctl manages the lifecycle of cert-manager when installed.
- Ensure docker/podman is up and running and your kubernetes cluster is reachable.
- Maintainers are continuously working on improving Cluster API developer environment
  and tooling; any help is more than welcome and with the community contribution we
  can make this happen sooner!
- Ensure to check the ownership reference for the MailgunCluster before proceeding.
- Uses API Key for authentication.
- Kubernetes is a complex system that relies on several components being configured
  correctly to have a working cluster.
- The project is committed to keep working with the broader CAPI community to continuously
  improve and expand the capability of this solution.
- The kubeconfig file is stored as a secret and the user can retrieve via clusterctl.
- User should expect the Cluster topology to change consistently.
- Changes can affect a Cluster, so ensure stability while using spec.topology.
- Use the `restart` sub-command to force an immediate rollout.
- Machine controller waits for bootstrap and infrastructure objects to have Status.initialization.dataSecretCreated
  set to true.
- MachinePool controller waits for bootstrap and infrastructure objects to have Status.Ready
  set to true.
- The provider uses Mailgun for sending emails related to cluster requests.
- Environment variables MAILGUN_DOMAIN, MAILGUN_API_KEY, and MAIL_RECIPIENT must be
  set for configuration.
- Write permissions allow the Cluster controller to set owner references and labels
  on the InfraCluster resources
- The version of your provider does not need to be in sync with the version of core
  Cluster API resources
- Provider MUST set cluster.x-k8s.io/<version> label on the InfraMachine Custom Resource
  Definitions.
- The kubeconfig secret MUST not be shared with other users or applications built
  on top of Cluster API.
- VPC and PowerVS require different sets of credentials.
- Make sure the VMs are running before deploying the Calico CNI.
- Ensure proper implementation to avoid severe impact on Cluster API runtime.
- Cluster API providers are developed by independent teams.
- No well-defined suite of E2E tests for Cluster API conformance is available.
- Ensure to run 'make' to regenerate code after modifying API types.
- Use appropriate RBAC roles to access resources.
- In Kubernetes APIVersion is a combination of API group and version.
- Must implement pause behavior for reconciliation loop.
- If you want to make it possible for users to run multiples instances of your provider,
  your controller’s SHOULD support the `--namespace` flag and the `--watch-filter`
  flag.
- Ensure the OpenNebula API endpoint is accessible.
- Check credentials before making API calls.
- MicroK8s requires cloud-init scripts to be stored as secrets for machine creation.
- Maintainers are continuously working on improving Cluster API developer environment
  and tooling; any help is more than welcome.
- This guide is one of those parts, simply because Cluster API maintainers do not
  create new providers very often.
- Uses Mailgun API for sending emails.
- Requires setup of mailgun configuration in environment variables
- Providers MUST set `cluster.x-k8s.io/<version>` label on the InfraCluster Custom
  Resource Definitions.
- Providers SHOULD implement the pause behaviour for every object with a reconciliation
  loop
- The kubeconfig secret MUST be created in the same namespace where the Cluster exists
- The kubeconfig secret MUST be named `<cluster>-kubeconfig`
- The kubeconfig secret MUST have type `cluster.x-k8s.io/secret`
- The kubeconfig secret MUST be labelled with the key-pair `cluster.x-k8s.io/cluster-name=${CLUSTER_NAME}`
- Cluster certificates MUST be stored as a secrets in the same namespace where the
  Cluster exists
- Cluster certificates MUST follow a naming convention `<cluster>-<certificate>`
- Cluster certificates MUST have type `cluster.x-k8s.io/secret`
- Cluster certificates MUST be labelled with the key-pair `cluster.x-k8s.io/cluster-name=${CLUSTER_NAME}`
- The metadata YAML file is required to document the release series of each provider.
- This provider is not designed for production use and is intended for development
  environments only.
- Docker provider requires ClusterTopology and MachinePool features to deploy ClusterClass-based
  clusters.
- The project is committed to continuously evolve and improve.
- Hiding complexity behind a simple declarative API.
- MicroK8s is used for Kubernetes bootstrap.
- Changes to the specified fields will not be propagated to Machines, InfraMachines
  and KubeadmConfigs that are marked for deletion.
- Cluster autoscaler requires annotations for scaling configuration
- Scaling from zero support requires specific provider implementation
- Kubernetes resources have a Group, Version, and Kind that uniquely identifies them.
- 'If implementing the pause behavior, providers SHOULD surface the paused status
  of an object using the Paused condition: Status.Conditions[Paused].'
- Compatibility with the deprecated v1beta1 contract; compatibility will be removed
  tentatively in August 2026.
- The provider is required to generate a components YAML file and publish it to the
  provider’s repository.
- All the objects in the components YAML MUST belong to the target namespace.
- While defining the Deployment Spec, the container that executes the controller/runtime
  extension server binary MUST be called `manager`.
- It is highly recommended to prefix the variable name with the provider name e.g.
  `${AWS_CREDENTIALS}`.
- '`clusterctl` currently supports variables with leading/trailing spaces such as:
  `${ VAR }`, `${ VAR}`,`${VAR }`. However, these formats will be deprecated in the
  near future.'
- Cluster API is focused on providing declarative APIs to simplify provisioning, upgrading,
  and operating multiple Kubernetes clusters.
- If running CAPM3 release prior to v0.5.0, make sure to export additional environment
  variables.
- Kubernetes images must be available in your Nutanix/OpenNebula/OpenStack account.
- The KubeadmConfig object allows full control of Kubeadm init/join operations.
- The cloud-init scripts are saved as secrets that then the infrastructure provider
  uses during the machine creation.
- We don’t suggest running workloads on control planes.
- Scaling from zero requires opt-in from the infrastructure provider.
- Please note Runtime SDK is an advanced feature. If implemented incorrectly, a failing
  Runtime Extension can severely impact the Cluster API runtime.
- Cluster API resources domain is cluster.x-k8s.io
- Infrastructure providers generally use infrastructure.cluster.x-k8s.io
- Ensure API key is stored securely.
- Providers MUST implement a BootstrapConfig resource
- Cluster API will continue to read conditions from providers using deprecated Cluster
  API condition types.
- Provider that will continue to use deprecated Cluster API condition types MUST carefully
  take into account the implication of this choice.
- The kubeconfig secret MUST not be shared with other users or applications.
- If a control plane provider uses client certificates for authentication in these
  Kubeconfigs, the client certificate MUST be kept with a reasonably short expiration
  period.
- Cluster templates MUST assume the target namespace already exists.
- ClusterClass definitions SHOULD NOT have any environment variables in them.
- All fields of type Duration in spec.{controlPlane,workers.machineDeployments[],workers.machinePools[]}
  have been renamed by adding the Seconds suffix, moved into the deletion section
  and their type was changed to int32 (compliance with K8s API guidelines)
- The deprecated spec.variables[].metadata and .status.variables[].definitions[].metadata
  fields have been renamed to spec.variables[].deprecatedV1Beta1Metadata and .status.variables[].definitions[].deprecatedV1Beta1Metadata
- The minimal Go version required to build Cluster API is v1.24.x.
- The project claims the right to remain unfinished, continuously evolving and adapting.
- ClusterClass supports variables and patches for customization.
- Patches apply if specific keys do not exist in KubeadmControlPlaneTemplate.
- By default, cert-manager will be fetched from https://github.com/cert-manager/cert-manager/releases
- If using kubeadm bootstrap provider, it will generate all necessary CAs.
- Improving and maintaining documentation is a collaborative effort.
- Cluster API provides a full stack of tools for tuning its own controllers as well
  as controllers for all providers.
- Environment variables MAILGUN_DOMAIN, MAILGUN_API_KEY, MAIL_RECIPIENT are required
  for configuration.
- Multi tenancy in Cluster API defines the capability of an infrastructure provider
  to manage different credentials.
- In case a Bootstrap provider reports that a BootstrapConfig resource is in a state
  that cannot be recovered (terminal failure) by setting `status.failureReason` and
  `status.failureMessage`.
- Kubeconfig secret must be created in the same namespace where the Cluster exists
- Kubeconfig secret must not be shared with other users or applications built on top
  of Cluster API
- ClusterClass definitions MUST be stored in the same location as the component YAML.
- Use short-lived credentials that are automatically renewed via node-level attestation
  mechanisms.
- Bootstrap data are usually stored in machine’s metadata and might contain sensitive
  data.
- Fields have been renamed for consistency.
- The deprecated builtin.cluster.network.ipFamily variable has been removed and it
  cannot be used anymore in patches.
- The `spec.clusterConfiguration.apiServer` field does not embed `ControlPlaneComponent`
  anymore (avoid embedding structs)
- Users should avoid concurrent changes to control-plane and/or MachineDeployments.
- The end-to-end tests create a new management cluster with kind on each run.
- Requires setup of Mailgun account and API key
- Uses API key for authorization
- Environment variables must be set for configuration
- Never rely on Cluster API behaviours not defined as a contract rule.
- BootstrapConfig status can surface terminal failures using conditions.
- ControlPlane resource must implement control plane endpoint.
- Cluster templates MUST be stored in the same location as the component YAML and
  follow specific naming conventions.
- All the objects in the cluster template YAML MUST be deployed in the same namespace.
- New fields for replica counters have been added to the cluster object.
- KubeadmConfig implements the v1beta2 Cluster API contract
- Pointers have been removed from various struct fields
- Providers are highly recommended to start planning the move to the new v1beta2 version
  of the Cluster API contract.
- Top-level labels and annotations do not propagate.
- Controllers must check the existence of certain annotations on reconciled objects.
- Requires setup of IBM Cloud API Key.
- Ensure to create the Secret named 'scaleway-secret' in your workload cluster.
- Calico is used as an example for CNI solution.
- For scaling from zero support, check with the Cluster API infrastructure providers.
- Make sure that the selectors do not overlap to prevent conflicts.
- Metrics endpoint is protected via authentication and authorization.
- Pod Security Standards are applied by default.
- Ensure all required images are available in the kind cluster.
- If a DOCKER_HOST is specified, check that the DOCKER_HOST has the correct prefix
  (usually `unix://`)
- Uses a real kube-apiserver that is shared across many test cases.
- Never hard code the infrastructure provider name in your test spec.
- Never hard code wait intervals in your test spec.
- Email sending requires Mailgun API key and domain.
- Ensure the recipient email is verified in Mailgun.
- The kubeconfig secret MUST be named '<cluster>-kubeconfig'
- Control plane providers are expected to create and maintain all the certificates
  required to create and run a Kubernetes cluster.
- 'Cluster templates must follow naming convention: cluster-template.yaml for default
  and cluster-template-{flavor}.yaml for additional.'
- 'ClusterClass definitions must follow naming convention: clusterclass-{ClusterClass-name}.yaml.'
- The minimal Go version required to build Cluster API is v1.24.x
- The Go version used by Cluster API is v1.24.x
- The Controller Runtime version used by Cluster API is v0.21.x
- The version of the Kubernetes libraries used by Cluster API is v1.33.x
- The spec.controlPlaneRef and spec.infrastructureRef fields are now using ContractVersionedObjectReference
  type.
- The spec.infrastructureNamingStrategy field was renamed to spec.infrastructure.naming.
- The `spec.machineNamingStrategy` field was renamed to `spec.machineNaming` and is
  now using `MachineNamingSpec` type instead of `*MachineNamingStrategy`
- A new `spec.rollout` field has been introduced, it combines previous `spec.rolloutBefore`,
  `spec.rolloutAfter` and `spec.rolloutStrategy` fields.
- Cluster API is focused on providing declarative APIs and tooling to automate cluster
  lifecycle management.
- Supports multiple control plane machines initializing at the same time.
- Some of the configuration options available via MicroK8sConfig include joinTokenTTLInSecs,
  httpsProxy, httpProxy, noProxy, addons, and portCompatibilityRemap.
- Scale from zero support requires opt-in method from infrastructure providers.
- Ensure to avoid concurrent changes to control-plane and/or MachineDeployments to
  prevent excessive turnover.
- This API requires the use of specific Kubernetes hooks for lifecycle events.
- Uses admission control configurations for PodSecurity.
- cert-manager version must support cert-manager.io/v1 API
- Cluster API providers require a cert-manager to be installed in the cluster
- Run 'make manager manifests' to regenerate data files after modifying the API.
- Ensure to minimize imports within the API folder to allow clean imports into other
  projects.
- Uses Mailgun for email notifications
- Requires environment variables for configuration
- Starting from the v1beta2 contract version, there is no more special treatment for
  provider’s terminal failures within Cluster API.
- APIs have been moved to the top-level `api` folder
- v1beta1 API version is now deprecated and it will be removed tentatively in August
  2026
- KubeadmControlPlane (and the entire KCP provider) now implements the v1beta2 Cluster
  API contract.
- The v1beta2 version of the Cluster API contract temporarily preserves compatibility
  with the deprecated v1beta1 contract; a few limitations apply.
- The OpenNebula API requires basic authentication with the format 'oneadmin:opennebula'.
- The project is continuously evolving and improving based on user feedback.
- Stable and reliable platform supported by cloud-native applications.
- The MicroK8sConfig object can be set under MicroK8sConfigTemplate.spec.template.spec.
- Metrics require ServiceAccount token and permissions on the /metrics path.
- Developers should ensure each test runs in isolation from the others by creating
  objects in separated namespaces.
- Avoiding object name conflict is recommended.
- The informers cache depends on actual etcd watches/API calls for updates, and may
  take a few milliseconds to get updated.
- Garbage collection does not occur in the test control plane due to the absence of
  controllers monitoring built-in resources.
- Every Kubernetes resource has a Group, Version, and Kind that uniquely identifies
  it.
- Requires setup of environment variables MAILGUN_DOMAIN, MAILGUN_API_KEY, and MAIL_RECIPIENT
- All resources MUST report when the bootstrap data secret is fully provisioned.
- In order to ease the transition for providers, the v1beta2 version of the Cluster
  API contract temporarily preserves compatibility with the deprecated v1beta1 contract.
- The spec.machineNamingStrategy field was renamed to spec.machineNaming and is now
  using MachineNamingSpec type instead of *MachineNamingStrategy (improve consistency,
  drop unnecessary pointers)
- The v1beta2 version of the Cluster API contract MUST be completed before compatibility
  support for the v1beta1 version of the Cluster API contract will be removed tentatively
  in August 2026.
- If you see that kubeadm times out waiting for the static Pods to come up, take a
  look at containerd and Kubelet logs.
- The OpenNebula API requires basic authentication using the oneadmin user.
- Cluster API aims to provide a declarative API for managing Kubernetes clusters.
- The project is continuously evolving to meet the changing needs of users.
- User should select the annotation for GPU either gpu-type or dra-driver depends
  on whether using Device Plugin or Dynamic Resource Allocation(DRA). gpu-count is
  a common parameter in both.
- Be sure to follow Kubernetes API design conventions.
- MAILGUN_DOMAIN, MAILGUN_API_KEY, and MAIL_RECIPIENT must be set.
- Cluster certificates MUST be stored as secrets.
- Implementing the new v1beta2 version of the Cluster API contract MUST be completed
  before compatibility support for the v1beta1 version of the Cluster API contract
  will be removed tentatively in August 2026.
- The Go version used by Cluster API is v1.24.x.
- The Controller Runtime version used by Cluster API is v0.22.x.
- The version of the Kubernetes libraries used by Cluster API is v1.34.x.
- For more detailed information on configuring and using the Scaleway external cloud
  provider, see the scaleway-cloud-controller-manager repository
- Ensuring a predictable release calendar is crucial.
- MicroK8s defines a MicroK8sControlPlane for control plane configuration and MachineDeployment
  for worker nodes.
- Ensure that selectors do not overlap to prevent conflicts during remediation.
- This API is for managing hooks during cluster lifecycle events.
- If insecure serving is configured, the pprof and log level endpoints are disabled
  for security reasons.
- Uses cert-manager v1.19.1 if not already installed
- BootstrapConfig SHOULD report conditions, terminal failures, and taint Nodes at
  creation
- Ensure to handle idempotency when sending requests.
- API requests require valid API Key and Domain setup.
- Error handling is crucial for email delivery statuses.
- Cluster templates must be stored in the same location as the component YAML.
- ClusterClass definitions must be stored in the same location as the component YAML.
- The `spec.clusterConfiguration.certificateValidityPeriodDays` and `spec.clusterConfiguration.caCertificateValidityPeriodDays`
  have been added thus aligning with kubeadm v1beta4 API
- The transition MUST be completed before compatibility support for the v1beta1 version
  of the Cluster API contract will be removed tentatively in August 2026.
- Access the logs using `docker logs <MACHINE-NAME>`.
- The complexity budget is handled by saying no to things today for future improvements.
- Scaling from zero support is optional and must be enabled by the provider.
- The Cluster resource references an InfraCluster object to support different infrastructure.
- The Machine resource references a BootstrapConfig object for different machine bootstrappers.
- Email fields are critical for Mailgun operations.
- Requires valid API key for authentication.
- Requires setup of secret and config map for Mailgun credentials
- The write permissions allow the Cluster controller to set owner references and labels
  on the InfraCluster resources.
- write permissions are not used for general mutations of InfraCluster resources,
  unless specifically required.
- Support for running multiple instances of the same provider is not available.
- Various struct fields have had pointers removed for compliance with K8s API guidelines.
- Several fields have been renamed or restructured for consistency.
- All fields of type Duration in spec.{controlPlane,workers.machineDeployments[],workers.machinePools[]}
  have been renamed by adding the Seconds suffix
- Annotations and labels are propagated across API resources.
- Top-level labels and annotations do not propagate at all.
- Using a provider that does not support v1beta1 or v1alpha4 requires following the
  release 0.3 or 0.4 quickstart instructions.
- kind is not designed for production use and requires appropriate setup for Docker.
- The project claims the right to remain unfinished, continuously evolving and improving.
- Kubernetes version can be configured in the MicroK8sControlPlane definition.
- Replicas can be set for both control plane and worker nodes.
- The Secrets must be created before creating the workload cluster.
- Ensure that the External Patch Extensions respond quickly (<=200ms) to avoid congestion.
- This patch adds an admission configuration for PodSecurity to the kube-apiserver.
- Uses Lima for developing Cluster API
- Ensure that docker/podman is up and running and your kubernetes cluster is reachable
- This API requires an API key for authentication.
- Requires Mailgun API key and domain to be set as environment variables.
- The type of the field status.patches[].definitionsConflict has been changed from
  bool to *bool.
- v1beta1 version of the Cluster API contract is now deprecated and it will be removed
  tentatively in August 2026
- Basic authentication is used with username and password.
- The Cluster API project is continuously evolving and aims to provide a stable platform.
- It emphasizes simplicity by hiding complexity behind declarative APIs.
- MicroK8s bootstrap provider generates cloud-init scripts for nodes.
- KubeadmControlPlane only supports CoreDNS as a DNS server at this time.
- Running workloads on control plane machines is not suggested.
- Cluster API is subject to rapid changes; refer to the code for the source of truth.
- BootstrapConfig must create a bootstrap data secret.
- BootstrapConfig should report conditions and terminal failures.
- The domain for Cluster API resources is `cluster.x-k8s.io`.
- Updated API version to v1beta2 with consistent naming for resources.
- KubeadmControlPlane now implements the v1beta2 Cluster API contract
- The spec.machineNamingStrategy field was renamed to spec.machineNaming
- Use `docker ps --all` to see the containers running and ensure they are not restarting.
- Requires setup of IBM Cloud API Key to authenticate
- Ensure the correct Resource Group ID is used
- Kubernetes version must be upgraded in sequence between minor versions.
- Current implementation uses MicroK8s for cluster provisioning and management.
- The diagnostics endpoint is protected via authentication and authorization.
- Avoid object name conflict.
- Ensure to use the correct API version based on provider stability.
- Uses environment variables to configure MAILGUN_DOMAIN, MAILGUN_API_KEY, and MAIL_RECIPIENT
- Multi tenancy in Cluster API defines the capability of an infrastructure provider
  to manage different credentials, each one of them corresponding to an infrastructure
  tenant.
- The Machine’s controller will surface bootstrap data secret information when the
  bootstrap data secret is fully provisioned.
- The 'spec.controlPlane.healthCheck' field has been restructured and made consistent
  across all resources.
- If you see that kubeadm times out waiting for the static Pods to come up, take a
  look at kubelet logs.
- Self-assigning Node labels such as node-role.kubernetes.io is not possible due to
  a security measure.
- Cluster API manages Kubernetes clusters and their resources.
- Annotations provide metadata for managing resources effectively.
- The clusterctl command line interface is specifically designed for providing a simple
  'day 1 experience'.
- Required environment variables must be set for IBM Cloud authentication.
- Environment variables must be set before executing commands
- Ensure the cluster API compatible image is available in the image library
- Cluster API provides declarative APIs for managing Kubernetes clusters.
- The project aims to simplify the lifecycle management of Kubernetes clusters.
- MicroK8s uses cloud-init scripts saved as secrets during machine creation.
- The cluster-autoscaler does not enforce the node group sizes. If a node group is
  below the minimum number of nodes, or above the maximum number of nodes, the cluster
  autoscaler will not scale that node group up or down.
- Only Machines owned by a MachineSet or a KubeadmControlPlane can be remediated.
- Requires the bash-completion framework.
- The logs are currently uploaded by using now as the timestamp, because otherwise
  it would take a few minutes until the logs show up in Loki. The original timestamp
  is preserved as original_ts.
- Ensure to set up Mailgun API credentials to send emails.
- Ensure MAILGUN_DOMAIN, MAILGUN_API_KEY, and MAIL_RECIPIENT are set as environment
  variables
- The kubeconfig secret MUST not be shared with other users or applications build
  on top of Cluster API.
- The cluster template YAML MUST assume the target namespace already exists.
- If Node bootstrapping consistently fails and the kubeadm logs are not verbose enough,
  the kubeadm verbosity can be increased via KubeadmConfigSpec.Verbosity.
- The project is committed to continue evolving while ensuring stability.
- The control plane manifest section includes the Kubernetes version, the replica
  number as well as the MicroK8sConfig.
- The rollout can also happen before the time specified in `spec.rollout.after` if
  any changes are made to the spec before that time.
- The ClusterClass name should be generic enough to make sense across multiple clusters,
  i.e. a name which corresponds to a single Cluster, e.g. 'my-cluster', is not recommended.
- Try to keep the ClusterClass names short and consistent (if you publish multiple
  ClusterClasses).
- As a ClusterClass usually evolves over time and you might want to rebase Clusters
  from one version of a ClusterClass to another, consider including a version suffix
  in the ClusterClass name.
- If using kubeadm bootstrap provider, necessary CAs are generated automatically.
- Requires an API key for authentication.
- Ensure the control plane is properly configured before starting the cluster.
- Some fields may have changed between versions, consult the migration guide.
- The spec.controlPlane.healthCheck field has been restructured for consistency.
- 'If you see that kubeadm times out waiting for the static Pods to come up, take
  a look at: containerd: crictl ps -a, crictl logs, journalctl -u containerd.'
- If you are defining more than one MachineHealthCheck for the same Cluster, make
  sure that the selectors do not overlap
- Keep machine labels and annotations stable to avoid rollouts.
- Extensions should be designed and deployed with caution.
- Patch can be disabled or configured differently.
- Will return logs from the capi-controller-manager, associated with the Cluster my-cluster
  and the Reconcile ID.
- Ensure MAILGUN_DOMAIN and MAILGUN_API_KEY are set as environment variables
- The kubeconfig secret MUST have type `cluster.x-k8s.io/secret`.
- Important! If a control plane provider uses client certificates for authentication
  in these Kubeconfigs, the client certificate MUST be kept with a reasonably short
  expiration period.
- Fields of type Duration in spec.{controlPlane,workers.machineDeployments[],workers.machinePools[]}
  have been renamed by adding the Seconds suffix.
- Use spec.initConfiguration.timeouts.controlPlaneComponentHealthCheckSeconds and
  spec.joinConfiguration.timeouts.controlPlaneComponentHealthCheckSeconds instead
  of spec.clusterConfiguration.apiServer.timeoutForControlPlane
- The `spec.machineNamingStrategy` field was renamed to `spec.machineNaming` and is
  now using `MachineNamingSpec` type instead of `*MachineNamingStrategy` (improve
  consistency, drop unnecessary pointers)
- The `spec.machineTemplate.infrastructureRef` field was moved to `spec.machineTemplate.spec.infrastructureRef`
  and is now using `ContractVersionedObjectReference` type instead of `corev1.ObjectReference`
- v1beta1 version of the Cluster API contract is now deprecated and will be removed
  tentatively in August 2026.
- Providers are recommended to start planning the move to the new v1beta2 version
  of the Cluster API contract.
- Ensure to set the required environment variables before running the API.
- The control plane manifest section includes the Kubernetes version and the replica
  number.
- Ensure that the selectors for multiple MachineHealthChecks for the same Cluster
  do not overlap to prevent conflicts.
- The diagnostics endpoint is using a self-signed certificate, so it doesn't verify
  it.
- This API is intended for managing Kubernetes clusters.
- Ensure to set up Mailgun API credentials in your environment.
- Uses API key for authentication — requires setup of mailgun secrets
- Environment variables must be set for MAILGUN_DOMAIN, MAILGUN_API_KEY, and MAIL_RECIPIENT
- The write permissions allow the Cluster controller to set owner references and labels
  on the InfraCluster resources; write permissions are not used for general mutations
  of InfraCluster resources, unless specifically required (e.g. when using ClusterClass
  and managed topologies).
- Providers must set cluster.x-k8s.io/<version> label on the InfraMachine Custom Resource
  Definitions.
- The kubeconfig secret MUST have the base64 encoded kubeconfig in the field called
  `value`
- Fields of type Duration have been renamed by adding the `Seconds` suffix.
- The `spec.controlPlane.healthCheck` field has been restructured for consistency.
- Transition to the new v1beta2 version of the Cluster API contract MUST be completed
  before compatibility support for the v1beta1 version of the Cluster API contract
  will be removed tentatively in August 2026.
- The project does not follow Go Modules guidelines for compatibility requirements
  for 1.x semver releases.
- Documentation available at multiple branches and formats.
- 'The user can choose two approaches for certificate management: provide required
  certificate authorities or let KCP generate the necessary Secrets objects.'
- Cluster API MicroK8s control plane provider (CACPM) manages the control plane of
  provisioned clusters using MicroK8s.
- If defining more than one MachineHealthCheck for the same Cluster, ensure that the
  selectors do not overlap to avoid conflicts.
- Runtime SDK is an advanced feature and should be implemented with caution.
- Metrics endpoint is served via https and protected via authentication.
- Uses environment variables for configuration paths.
- This API is for managing clusters and machines.
- Creating E2E tests can provide long-term value for the project.
- Tools for tuning controllers include logs, metrics, traces, and profiles.
- Rate limits may apply based on usage
- Breaking changes are generally allowed in the main branch, as this is the branch
  used to develop the next minor release of Cluster API.
errors:
- '401 Unauthorized: Check your API key or credentials.'
- '503 Service Unavailable: Check if the service is up and running.'
- 'REQUEST_LIMIT_EXCEEDED: Throttle API calls or reduce frequency'
- 'QUERY_TIMEOUT: Break down filters or add selectivity'
- '401 Unauthorized: Recheck OAuth scopes or token expiration'
- If the drain doesn't complete, check logs for Pods with deletionTimestamp still
  existing.
- Rate limiting from GitHub may affect provider version detection.
- Be aware that this operation deletes all the object existing in a namespace, not
  only the provider’s components.
- Be aware that this operation deletes all the objects of Kind’s defined in the provider’s
  CRDs.
- Logs at the lower levels of verbosity (<=3) are meant to document 'what happened'
- Logs at higher levels of verbosity (>=4) are meant to document 'how it happened'
- No specific error codes mentioned.
- 'unable to start the controlplane: fork/exec /usr/local/kubebuilder/bin/etcd: no
  such file or directory'
- CLOUD_SDK_AK and CLOUD_SDK_SK must be base64 encoded.
- 'RESOURCE_NOT_FOUND: Verify your resource IDs and configurations.'
- 'INVALID_PARAMETER: Check for correct input values.'
- 'maxUnhealthy: Invalid percentage specified'
- '400 Bad Request: Check your request schema.'
- '404 Not Found: Ensure the resource exists.'
- '409 Conflict: Resource already exists.'
- '401 Unauthorized: Verify your credentials.'
- '404 Not Found: Check if the endpoint exists.'
- '500 Internal Server Error: Retry the request.'
- '400 Bad Request: Check your resource definition syntax.'
- '404 Not Found: Verify the specified endpoint exists.'
- '400 Bad Request: Check your request payload for validation errors.'
- '404 Not Found: Verify the resource exists at the specified path.'
- '401 Unauthorized: Recheck API key or permissions'
- 'Conflict: Ensure MachineHealthCheck selectors do not overlap.'
- Error creating webhook server
- Unable to start extension
- If a provider does not follow Go’s semantic versioning, clusterctl may fail when
  detecting the correct version.
- '401 Unauthorized: Check your API key or token.'
- Error adding handler
- '403 Forbidden: Check ServiceAccount permissions for scraping metrics.'
- '404 Not Found: Verify the endpoint path is correct.'
- 'CLOUD_SDK_AK: Ensure that the values are base64 encoded.'
- Node group below minimum size will not scale up.
- Node group above maximum size will not scale down.
- 'Unauthorized: Recheck ServiceAccount permissions or token validity'
- 'Unauthorized: Recheck API token.'
- '400 Bad Request: Check your request parameters'
- '404 Not Found: Resource does not exist'
- '500 Internal Server Error: Check server status'
- 'Node group below minimum number of nodes: The cluster autoscaler will not scale
  that node group up or down.'
- 'Node group above maximum number of nodes: The cluster autoscaler will not scale
  that node group up or down.'
- Runtime Extension processing adds to reconcile durations of Cluster API controllers.
  They should respond to requests as quickly as possible, typically in milliseconds.
- 'Success # or Failure: Indicates the status of the request.'
- 'error message if status == Failure: Contains the error message when the status
  is Failure.'
- '401 Unauthorized: Recheck ServiceAccount permissions.'
- Excessive turnover on the underlying infrastructure or bottlenecks in the Cluster
  trying to move workloads from one machine to the other.
- Runtime Extension failure could result in errors in handling the workload clusters
  lifecycle.
- '401 Unauthorized: Check ServiceAccount permissions'
- '401 Unauthorized: Recheck API token or permissions.'
- 'Unauthorized: Check ServiceAccount permissions'
- 'CLOUD_SDK_AK or CLOUD_SDK_SK not base64 encoded: Ensure these are properly encoded.'
- '400 Bad Request: Check your request parameters and structure.'
- '404 Not Found: Ensure the resource you are trying to access exists.'
- '500 Internal Server Error: Review server logs for more details.'
- '400 Bad Request: Check the syntax of your patch.'
- '403 Forbidden: Ensure you have the appropriate permissions.'
- 'Unauthorized: Recheck ServiceAccount permissions'
- '400 Bad Request: Check the request parameters and ensure they are valid.'
- '404 Not Found: The specified resource could not be found.'
- '500 Internal Server Error: An error occurred on the server.'
- '401 Unauthorized: Ensure ServiceAccount has permissions on the /metrics path'
- '403 Forbidden: Check ServiceAccount permissions.'
- 'Unauthorized: Recheck API key.'
- 'InvalidCertificate: The provided certificate is invalid.'
- 'MachineNotReady: The machine is not in a ready state.'
- '401 Unauthorized: Recheck ServiceAccount permissions'
- 'Terminal error: deletion and recreation of the machine pool required if failureReason
  or failureMessage surface.'
- Error messages must not contain any sensitive information.
- '400 Bad Request: Ensure that the request body is properly structured.'
- '404 Not Found: Verify that the specified resource exists.'
- Error running webhook server
- '401 Unauthorized: Ensure ServiceAccount has permissions on /metrics path.'
- '403 Forbidden: Check RBAC configuration for ServiceAccount.'
- 'Terminal error: failureReason or failureMessage cannot be restored.'
- '401 Unauthorized: Check ServiceAccount permissions.'
- 'E0210 16:11:04.222471  132945 server.go:329] controller-runtime/test-env "msg"="unable
  to start the controlplane" "error"="fork/exec /usr/local/kubebuilder/bin/etcd: no
  such file or directory" "tries"=0'
- '401 Unauthorized: Recheck API key or token expiration'
- '400 Bad Request: Check your annotations for min/max sizes.'
- '403 Forbidden: Ensure proper RBAC permissions are set.'
- '401 Unauthorized: Check API key'
- '400 Bad Request: Check request parameters'
- '400 Bad Request: Check request format and parameters'
- '404 Not Found: Ensure endpoint exists and is correct'
- '500 Internal Server Error: Review server logs for more details'
- '401 Unauthorized: Ensure ServiceAccount has permissions on the /metrics path.'
- '400 Bad Request: Check the request format and parameters.'
- '401 Unauthorized: Ensure API credentials are correct.'
- '404 Not Found: Verify the resource exists.'
- '400 Bad Request: Check the request payload for errors.'
- '404 Not Found: The requested resource does not exist.'
- '500 Internal Server Error: Check the server logs for more details.'
- Failure policy can be set to Ignore or Fail.
- 'Unauthorized: Check ServiceAccount permissions for /metrics.'
- 'Forbidden: Ensure the ServiceAccount has the correct ClusterRole bindings.'
- '404 Not Found: Verify the resource path or name.'
- '500 Internal Server Error: Server encountered an unexpected condition.'
- 'unauthorized: recheck ServiceAccount permissions for accessing /metrics'
- '400 Bad Request: Check your request parameters.'
- '401 Unauthorized: Check your API key.'
- '404 Not Found: The requested resource could not be found.'
- '400 Bad Request: Check the request payload for correctness'
- '404 Not Found: Ensure the resource exists and the path is correct'
- '401 Unauthorized: Check if the provided credentials are correct.'
- '404 Not Found: Verify the endpoint URL.'
- '400 Bad Request: Check the request format and required fields.'
- '403 Forbidden: Insufficient permissions to access the resource.'
- '404 Not Found: The specified resource does not exist.'
- '403 Forbidden: Ensure the ServiceAccount has permissions on the /metrics path.'
- '401 Unauthorized: Recheck ServiceAccount token.'
- '404 Not Found: Check the resource path or identifiers.'
- '403 Forbidden: Check ServiceAccount permissions on /metrics or /debug/pprof'
- 'status: Success # or Failure: error message if status == Failure'
- '401 Unauthorized: Recheck permissions on the /metrics path.'
- '403 Forbidden: Check ServiceAccount permissions on the /debug flags.'
- 'terminal error: once any of `failureReason` or `failureMessage` surface on the
  machine pool who is referencing the bootstrap config object, they cannot be restored
  anymore'
- '404 Not Found: Resource not found.'
- '400 Bad Request: The request could not be understood by the server.'
- Changing the etcd version may have unintended impacts on a running Cluster.
- Error message must be deterministic, and must avoid to including timestamps or values
  changing at every call.
- '401 Unauthorized: ServiceAccount token is required to scrape metrics.'
- '403 Forbidden: Check RBAC permissions for /metrics path.'
- 'Terminal error: the only way to recover is to delete and recreate the machine pool.'
- '401 Unauthorized: Recheck API credentials'
- '404 Not Found: Check endpoint URL'
- 'Unauthorized: Check ServiceAccount permissions.'
- '400 Bad Request: Check the request syntax and required fields.'
- '401 Unauthorized: Verify API key and permissions.'
- '404 Not Found: Ensure the resource exists and the path is correct.'
- 'Terminal error: delete and recreate the machine pool if failureReason or failureMessage
  is surfaced.'
- '400 Bad Request: Check the request format and required fields'
- '401 Unauthorized: Verify API key'
- '401 Unauthorized: Ensure ServiceAccount has required permissions.'
- '403 Forbidden: Check your access rights to the resource.'
- '404 Not Found: Verify the endpoint and the resource ID.'
- '400 Bad Request: Check the request parameters'
- '401 Unauthorized: Invalid API key'
- '404 Not Found: Resource not found'
- 'Failed to create control group inotify object: Too many open files'
- 'Failed to allocate manager object: Too many open files'
- Scaling up control plane to 3 replicas (actual 2)
- BootstrapFailed
- '401 Unauthorized: Recheck API key'
- 'INVALID_CREDENTIALS: Check your username and password.'
- 'NOT_FOUND: Verify the resource path.'
- 'UNAUTHORIZED_ACCESS: Ensure you have the right permissions.'
- 'Failure policy is Ignore: The error is going to be recorded in the controller’s
  logs, but the processing will continue.'
- 'Failure policy is Fail: The system will retry the operation until it passes.'
- 'Unauthorized: Ensure the ServiceAccount has permission on the /metrics path.'
- '401 Unauthorized: Check API key.'
- Cluster API behaviors not defined as a contract rule may change at any time.
- '400 Bad Request: The request was invalid or cannot be served.'
- 'invalid argument ''ClusterTopology=false,KubeadmBootstrapFormatIgnition=false''
  for ''--feature-gates'' flag: unrecognized feature gate: KubeadmBootstrapFormatIgnition'
- '404 Not Found: Check the endpoint path or parameters.'
- '500 Internal Server Error: Retry the request or check server logs.'
- '401 Unauthorized: Check your authentication credentials.'
- '404 Not Found: Verify the endpoint paths.'
- 'ErrImagePull: Check Docker Hub pull rate limit'
- '404 Not Found: Ensure the specified cluster exists.'
- 'status: Success # or Failure'
- 'message: error message if status == Failure'
- 'Failed to update cert-manager component apiextensions.k8s.io/v1, Kind=CustomResourceDefinition,
  /certificaterequests.cert-manager.io: CustomResourceDefinition.apiextensions.k8s.io
  invalid: status.storedVersions[0]: Invalid value: "v1alpha2": must appear in spec.versions'
- '400 Bad Request: Check your input data for correctness.'
- '404 Not Found: Ensure the endpoint is correct and the resource exists.'
- kubeadm times out waiting for the static Pods to come up
- '400 Bad Request: Invalid request data.'
- Concurrent changes may create excessive turnover on the underlying infrastructure.
- 'Terminal error: once failureReason or failureMessage surface, the machine pool
  cannot be restored'
- '401 Unauthorized: Check your IBMVPC_TOKEN and ensure it is valid.'
- '404 Not Found: Ensure the endpoint and resource names are correct.'
- 'REQUEST_LIMIT_EXCEEDED: Throttle API calls or reduce frequency.'
- 'QUERY_TIMEOUT: Break down filters or add selectivity.'
- '401 Unauthorized: Check API key and permissions'
- '404 Not Found: Verify endpoint and resource identifiers'
- '400 Bad Request: Check input parameters for validity'
- '404 Not Found: Ensure the specified MachineHealthCheck exists'
- Error message must not contain any sensitive information.
- status.failureReason and status.failureMessage will continue to exist temporarily
  under status.deprecated.v1beta1.
- 'Failed to create inotify object: Too many open files'
- Exiting PID 1...
- '401 Unauthorized: Check the token used for authentication.'
- Terminal error if failureReason or failureMessage surface on the machine pool.
- '403 Forbidden: Check API key permissions'
- '500 Internal Server Error: Retry the request'
- Exiting PID 1
- 'Cluster initialization failed: Ensure that the management cluster is correctly
  set up.'
- '400 Bad Request: Check your parameters'
- '401 Unauthorized: Recheck your credentials'
- '404 Not Found: Verify the endpoint URL'
- '401 Unauthorized: Ensure the ServiceAccount has permissions on the /metrics path.'
- '404 Not Found: Ensure the resource exists and the correct path is used.'
- 'definitionsConflict: true'
- '401 Unauthorized: Ensure ServiceAccount has permissions on /metrics and /debug/pprof/*
  paths.'
- '401 Unauthorized: Check API key and permissions.'
- '422 Unprocessable Entity: Check request parameters for validity.'
- status.failureReason and status.failureMessage will continue to exist temporarily
  under status.deprecated.v1beta1
- Node drain may be skipped if the Node doesn't exist anymore or is unreachable.
- 'terminal error: once `failureReason` or `failureMessage` surface, they cannot be
  restored.'
- '400 Bad Request: Check the request payload for required fields.'
- '401 Unauthorized: Verify the Mailgun API key.'
- 'status: Failure: error message if status == Failure'
- '401 Unauthorized: Ensure ServiceAccount has permission on /metrics or /debug/pprof/'
- '401 Unauthorized: Check API key or permissions'
- '400 Bad Request: Check the request body for InfraCluster fields.'
- '404 Not Found: Ensure the specified InfraCluster resource exists.'
- 'BootstrapFailed: Node bootstrap failure'
- 'WaitingForAvailableMachines: Minimum availability requires 3 replicas'
- '404 Not Found: Check if the resource exists or if the endpoint is correct.'
- If no Node joins the cluster for a Machine after the NodeStartupTimeout, the Machine
  will be remediated.
- 'Unauthorized: Check ServiceAccount token permissions for /metrics and /debug endpoints.'
- '401 Unauthorized: Check your credentials.'
- '404 Not Found: Ensure the endpoint is correct.'
- 'Terminal error: Delete and recreate the machine pool to recover.'
- '401 Unauthorized: Verify your API key.'
- 'BootstrapFailed: 1 of 2 completed'
- 'WaitingForAvailableMachines: Minimum availability requires 3 replicas, current
  0 available'
- '401 Unauthorized: Ensure the ServiceAccount has permission on the /metrics path'
- '400 Bad Request: Check the request body for errors'
- '404 Not Found: Ensure the resource exists before querying'
- '500 Internal Server Error: Check the server logs for details'
- '400 Bad Request: Check the specification of the MachineHealthCheck.'
- '500 Internal Server Error: An unexpected error occurred.'
- '400 Bad Request: Validate request parameters'
- 'Too many open files: Failed to create control group inotify object'
- 'WaitingForAvailableMachines: Current 0 available'
- '404 Not Found: Verify the endpoint path.'
- '401 Unauthorized: Check your ServiceAccount permissions.'
- '400 Bad Request: Check the request parameters and body.'
- Throttle API calls or reduce frequency
- Break down filters or add selectivity
- '403 Forbidden: Check RBAC configurations.'
- '401 Unauthorized: Ensure API key is valid and included in the Authorization header.'
- '500 Internal Server Error: Retry the request or contact support.'
- 'Warning: Upgrades outside from version older n-3 might lead to a management cluster
  in a non-functional state.'
- 'Warning: Version downgrades might lead to a management cluster in a non-functional
  state.'
- 'Unauthorized: Check your API key or token'
- '403 Forbidden: Check RBAC configuration for access.'
- 'Initialization failed: Check your provider configuration'
- 'Cluster creation failed: Ensure your credentials are correct'
- '401 Unauthorized: Recheck your credentials.'
- '401 Unauthorized: Recheck credentials or access permissions'
- Help with common issues can be found in the Troubleshooting Guide.
- 'maxUnhealthy exceeded: Remediation will not be performed.'
- 'Unauthorized: Check permissions on the /metrics path.'
- '403 Forbidden: Ensure the ServiceAccount has the required roles.'
- Error when creating CAPD workload cluster with --kubernetes-version=vX.Y.Z if no
  corresponding image is available on Docker Hub
- 'unable to start the controlplane: "fork/exec /usr/local/kubebuilder/bin/etcd: no
  such file or directory"'
- Test flakes may occur due to cache update delays after object creation or deletion.
- 'BootstrapFailed: Inspect the conditions of the objects using `clusterctl describe
  --show-conditions all cluster capi-quickstart`.'
- 'Too many open files: Read Cluster API with Docker - “too many open files” for resolution.'
- Port allocation conflicts may occur with external providers.
- 'InvalidCredentials: Check your AWS credentials or configuration.'
- 'Unauthorized: Ensure your token is valid.'
- 'FeatureNotSupported: Check if the provider supports the requested feature.'
- '401 Unauthorized: Check ONE_AUTH credentials.'
- '400 Bad Request: Check the request body for correct structure.'
- '404 Not Found: Ensure the resource exists in the cluster.'
- '500 Internal Server Error: Check the cluster''s operational status.'
- '404 Not Found: Verify endpoint and resource IDs'
- '401 Unauthorized: Check your credentials and permissions.'
- '400 Bad Request: Invalid MachineHealthCheck specification.'
- '404 Not Found: The specified MachineHealthCheck does not exist.'
- 'Cluster initialization failed: Check infrastructure provider configurations.'
- 'Invalid configuration: Check your YAML files for errors.'
- 'Unauthorized: Check your authentication credentials.'
- '400 Bad Request: Check the structure of your request.'
- Runtime Extension processing adds to reconcile durations of Cluster API controllers.
- '403 Forbidden: Ensure ServiceAccount has permissions on the /metrics path'
- '401 Unauthorized: Check ServiceAccount token'
- '404 Not Found: Check if the specified MachineHealthCheck exists'
- '500 Internal Server Error: Check server logs for more details'
- '400 Bad Request: Invalid request parameters'
- '404 Not Found: Specified MachineHealthCheck not found'
- '403 Forbidden: Check ServiceAccount permissions on /metrics'
- '401 Unauthorized: Check Bearer token validity'
- Error message must be deterministic, and must avoid including timestamps or values
  changing at every call.
- '404 Not Found: Check the endpoint path.'
- '400 Bad Request: Validate request parameters.'
- '404 Not Found: Verify endpoint URL'
- '500 Internal Server Error: Retry after some time'
- '401 Unauthorized: Recheck credentials or token expiration'
- '403 Forbidden: Insufficient permissions for the requested operation.'
- '401 Unauthorized: Check your OpenNebula authentication credentials.'
- '500 Internal Server Error: Check the OpenNebula server logs for more details.'
- 'failed to get current context from the KubeConfig file: Ensure the cluster in the
  default context is reachable'
- 'Cannot connect to the Docker daemon: Ensure the docker daemon is running'
- '401 Unauthorized: Ensure ServiceAccount has permissions on /metrics.'
- '403 Forbidden: Check RBAC permissions for the ServiceAccount.'
- Concurrent changes may lead to excessive turnover on the underlying infrastructure.
- '400 Bad Request: Check the input parameters for correctness.'
- '404 Not Found: The requested resource was not found.'
- '401 Unauthorized: Ensure ServiceAccount has permissions on /metrics'
- '400 Bad Request: Check schema definitions for errors.'
- '404 Not Found: Verify the existence of the specified ClusterClass.'
- 'REQUEST_FAILED: Ensure that the request is correctly formatted and all required
  fields are filled.'
- 'TIMEOUT: Check if the external service is reachable and responsive.'
- '403 Forbidden: Check ServiceAccount permissions for accessing /metrics'
- '404 Not Found: Verify the endpoint path for metrics or pprof'
- '400 Bad Request: Ensure the log level value is valid'
- '401 Unauthorized: Recheck credentials.'
- '400 Bad Request: Check the request format and content'
- '404 Not Found: Ensure the specified cluster exists'
- '403 Forbidden: Check RBAC configuration for default metrics service account'
- '500 Internal Server Error: An unexpected error occurred'
- '401 Unauthorized: Check your ONE_AUTH credentials.'
- '404 Not Found: Verify the endpoint and resource existence.'
- '404 Not Found: Check the endpoint URL or resource identifier.'
- '400 Bad Request: Validate the request payload and parameters.'
- 'Unauthorized: Check your API key'
- '400 Bad Request: Check request parameters and body.'
- '401 Unauthorized: Ensure API key is correct.'
- '403 Forbidden: Check permissions for the API key.'
- 'AUTH_ERROR: Check your username and password.'
- 'NETWORK_ERROR: Unable to reach the OpenNebula API.'
- '401 Unauthorized: Invalid API key.'
- '404 Not Found: Resource does not exist.'
- '404 Not Found: Check the endpoint path or resource existence.'
- '403 Forbidden: Verify API key permissions.'
- Changing the InfrastructureProvider from AWS to Azure may lead to a non-functional
  Cluster.
- '500 Internal Server Error: Check the server logs for details.'
- '401 Unauthorized: Recheck authentication credentials'
- '404 Not Found: Verify endpoint path or resource existence'
- 'Permission denied: Ensure that the service account has correct permissions.'
- 'Invalid annotation: Check the format of the annotations provided.'
- '404 Not Found: Ensure the specified resource exists.'
- '401 Unauthorized: Recheck ServiceAccount permissions or token expiration'
- '400 Bad Request: Ensure the request body is correctly formatted.'
- '404 Not Found: Check if the specified resource exists.'
- '500 Internal Server Error: An unexpected error occurred on the server.'
- '401 Unauthorized: Verify the API key'
- '404 Not Found: Ensure the specified resource exists'
- '409 Conflict: The resource is in a state that cannot be modified'
- 'CONCURRENT_CHANGE: Avoid concurrent changes to control-plane and/or MachineDeployments.'
- 'UPGRADE_FAILED: Ensure the Cluster is not undergoing other changes during upgrade.'
- '401 Unauthorized: Recheck permissions for ServiceAccount token'
- Terminal errors cannot be restored once failureReason or failureMessage is surfaced
- 'failed to get current context from the KubeConfig file: Ensure the cluster in the
  default context is reachable by running `kubectl cluster-info`'
- 'connection refused / denied / not found: Ensure the default_registry field is a
  valid registry where you can pull and push images.'
- '403 Forbidden: Check your API key permissions.'
- '400 Bad Request: Verify the request parameters.'
- '401 Unauthorized: Check ServiceAccount permissions on the /metrics path.'
- '404 Not Found: Ensure the endpoint exists.'
- '401 Unauthorized: Check ServiceAccount token validity'
- '403 Forbidden: Check ServiceAccount permissions on /metrics path.'
- '404 Not Found: Ensure the correct endpoint is being called.'
- '500 Internal Server Error: Check server health and logs.'
- '400 Bad Request: Check the request parameters.'
- '401 Unauthorized: Check authentication credentials.'
- 'Max unhealthy exceeded: Remediation will not be performed'
- 'Node not found: Cannot drain a non-existing Node'
- 'Terminal error: once any failure reason or message surfaces on the machine pool
  referencing the bootstrap config object, they cannot be restored anymore'
- '400 Bad Request: Check the request parameters and payload.'
- '401 Unauthorized: Verify your API key and permissions.'
- '500 Internal Server Error: Contact Mailgun support if the problem persists.'
- '401 Unauthorized: Check ONE_AUTH credentials'
- '400 Bad Request: Verify template names and configurations'
- '401 Unauthorized: Check your API key or authentication details.'
- Error messages must be deterministic and avoid including timestamps or values changing
  at every call.
- '400 Bad Request: Ensure all required fields are present and valid.'
- '503 Service Unavailable: The external patch extension is not reachable.'
- '401 Unauthorized: Recheck permissions on the ServiceAccount token'
- '401 Unauthorized: Check your API key and permissions'
- '1000: MachineHealthCheck failed due to unhealthy nodes'
- '401 Unauthorized: Check permissions on the /metrics path.'
- '403 Forbidden: Ensure ServiceAccount has the correct roles.'
- 'failed to get current context from the KubeConfig file: Ensure the cluster in the
  default context is reachable.'
- 'Cannot connect to the Docker daemon: Ensure the docker daemon is running.'
- '429 Too Many Requests: Rate limit exceeded, please slow down your requests.'
- '401 Unauthorized: Recheck API Key or permissions'
- '400 Bad Request: Check request parameters or body format.'
- '404 Not Found: Verify the endpoint or resource ID.'
- '500 Internal Server Error: Try again later or contact support.'
- '400 Bad Request: Check the request payload for errors'
- '404 Not Found: Ensure the endpoint and resource are correct'
- '401 Unauthorized: Check your API key and permissions.'
- 'failed to get current context from the KubeConfig file: Ensure the cluster in the
  default context is reachable by running ''kubectl cluster-info'''
- '500 Internal Server Error: Check the backend service.'
- '500 Internal Server Error: Check the OpenNebula server logs.'
- '404 Not Found: Ensure the resource exists'
- '500 Internal Server Error: Try again later'
- '401 Unauthorized: Check API key or domain configuration'
- '400 Bad Request: Check annotations and configuration'
- '404 Not Found: Verify resource paths and names'
- '403 Forbidden: Ensure appropriate permissions are set'
- '401 Unauthorized: Recheck credentials and permissions'
- '404 Not Found: Verify endpoint URLs and paths'
- '500 Internal Server Error: Check server logs for details'
- Error message must be deterministic and must avoid including timestamps or values
  changing at every call.
- 'Unauthorized: Ensure ServiceAccount has permissions on /metrics path.'
- 'Unauthorized: Recheck credentials'
- '401 Unauthorized: Check your API key and authentication method.'
- '401 Unauthorized: Ensure ServiceAccount has permissions for metrics'
- 'server gave HTTP response to HTTPS client: By default all registries except localhost:5000
  are accessed via HTTPS.'
- '422 Unprocessable Entity: Verify request payload format'
- 'ErrImagePull: This may be due to Docker Hub pull rate limit.'
- 'connection refused: Ensure the docker daemon is running'
- 'denied: Ensure the default_registry field is a valid registry'
- 'not found: Check for valid resources in the specified context'
- '401 Unauthorized: Invalid API key provided.'
- 'UNAUTHORIZED: Check your API key.'
- 'FORBIDDEN: You do not have permission to perform this action.'
- 'INVALID_REQUEST: Check your request parameters.'
- Minimum availability requires 3 replicas, current 0 available
- 'Unauthorized: Ensure ServiceAccount permissions on /metrics.'
- '400 Bad Request: Check the request format and parameters'
- '500 Internal Server Error: Retry the request later'
- '404 Not Found: Verify the resource path or identifier'
- '500 Internal Server Error: Server encountered an unexpected condition'
- Failed to get cert-manager object
- 'NotFound: The resource was not found.'
- 'Unauthorized: Check RBAC permissions.'
- The cluster-autoscaler-management role for accessing cluster api scalable resources
  is scoped to ClusterRole.
- This may not be ideal for all environments (eg. Multi tenant environments).
- 'Cluster initialization failure: Check provider configurations.'
- 'Docker provider limitations: Not suitable for production.'
- 'Unauthorized: Check ServiceAccount permissions on the /metrics path.'
- 'Unauthorized: Check ServiceAccount permissions on the /debug/pprof/ path.'
- 'Unauthorized: Check ServiceAccount permissions on the /debug/flags/v path.'
- '401 Unauthorized: Verify API key is correct.'
- '403 Forbidden: Ensure you have permission to access this resource.'
- '429 Too Many Requests: Rate limit exceeded, try again later.'
- '400 Bad Request: Check request parameters and data format.'
- '401 Unauthorized: Verify API key is valid.'
- '500 Internal Server Error: Try again later or check service status.'
- '401 Unauthorized: Check your API key'
- Important! Please pay special attention to use the correct patch helper import everywhere,
  because using a wrong one could in some cases lead to dropping conditions at runtime
  while not having compile errors.
- 'Status: Failure: error message if status == Failure'
- 'connection refused: Ensure the default_registry field is a valid registry'
- 'server gave HTTP response to HTTPS client: Configure the registry in docker/podman
  for HTTP'
- '400 Bad Request: Check for missing required fields'
- '401 Unauthorized: Invalid API key provided'
- '400 Bad Request: Check request format and required fields.'
- '401 Unauthorized: Check if the username and password are correct.'
- '404 Not Found: Verify the endpoint path and parameters.'
- Please pay special attention to use the correct patch helper import everywhere,
  because using a wrong one could in some cases lead to dropping conditions at runtime
  while not having compile errors.
- 'request_timeout: Break down filters or add selectivity'
- 'object_not_found: Check if the object exists in the expected namespace'
- 'Missing MAILGUN_DOMAIN: Ensure the environment variable is set'
- 'Missing MAILGUN_API_KEY: Ensure the environment variable is set'
- 'Missing MAIL_RECIPIENT: Ensure the environment variable is set'
- 'Initialization failed: Check your configuration and prerequisites.'
- '401 Unauthorized: Check your credentials'
- '404 Not Found: Verify the endpoint and resource availability'
- 'Node group below minimum nodes: The cluster autoscaler will not scale that node
  group up.'
- 'Node group above maximum nodes: The cluster autoscaler will not scale that node
  group down.'
- 'server gave HTTP response to HTTPS client: All registries except localhost:5000
  are accessed via HTTPS.'
- '400 Bad Request: Check required fields and format'
- '401 Unauthorized: Check API key validity'
- '404 Not Found: Verify endpoint existence'
- 'Error in creating MicroK8sControlPlane: Check the configuration provided.'
- 'Error in creating MachineDeployment: Ensure the cluster name matches.'
- 'Node not found: Node deletion will be retried until either the Node object is gone
  or Machine.spec.nodeDeletionTimeout is expired'
- 'Failure policy is Ignore: the error is going to be recorded in the controller’s
  logs, but the processing will continue.'
- 'Failure policy is Fail: the system will retry the operation until it passes.'
- 'connection refused / denied / not found: Ensure the default_registry field is a
  valid registry.'
- 'server gave HTTP response to HTTPS client: Ensure the registry is configured for
  HTTP if accessed via HTTP.'
- '404 Not Found: Check if the resource exists and the path is correct.'
- '500 Internal Server Error: Retry the request or check server logs for details.'
- '404 Not Found: Verify the resource exists before accessing'
- '400 Bad Request: Check the request payload and ensure all required fields are provided.'
- Error message if status == Failure
- '403 Forbidden: Check your API key and permissions.'
- '401 Unauthorized: Recheck OAuth scopes or token expiration.'
- '500 Internal Server Error: Try again later or check the service status.'
- 'RuntimeExtensionError: Ensure all external patches support the new apiVersion.'
- 'InvalidRequest: Check the request format and parameters.'
- '403 Forbidden: API key is invalid or insufficient permissions'
- '404 Not Found: The requested resource could not be found'
auth_info:
  mentioned_objects:
  - IBMCLOUD_API_KEY
  - IONOSCloudCluster
  - IONOS_TOKEN
  - ServiceAccount
  - ClusterRole
  - ClusterRoleBinding
  - Mailgun
  - CONTROL_PLANE_ENDPOINT_IP
  - ServicePrincipalName
  - Tenant ID
  - Client ID
  - Client Secret
  - CONTROL_PLANE_ENDPOINT_LOCATION
  - IONOSCLOUD_MACHINE_IMAGE_ID
  - IONOSCLOUD_MACHINE_SSH_KEYS
  - ClusterTopology
  - MachinePool
  - CloudFormation
  - IBMVPC_REGION
  - IBMVPC_ZONE
  - IBMVPC_RESOURCEGROUP
  - IBMVPC_NAME
  - IBMVPC_IMAGE_ID
  - IBMVPC_PROFILE
  - IBMVPC_SSHKEY_ID
  - IBMPOWERVS_SSHKEY_NAME
  - IBMPOWERVS_VIP
  - IBMPOWERVS_VIP_EXTERNAL
  - IBMPOWERVS_VIP_CIDR
  - IBMPOWERVS_IMAGE_NAME
  - IBMPOWERVS_SERVICE_INSTANCE_ID
  - IBMPOWERVS_NETWORK_NAME
  - RuntimeExtension
  - RuntimeHook
  - OauthToken
  - AuthProvider
  - NamedCredential
  - ApiKey
  - IAMService
  - PROXMOX_URL
  - PROXMOX_TOKEN
  - PROXMOX_SECRET
  - OSC_SECRET_KEY
  - OSC_ACCESS_KEY
  - OSC_REGION
  - VSPHERE_USERNAME
  - VSPHERE_PASSWORD
  - VULTR_API_KEY
  - IBM Cloud API
  - VPC
  - PowerVS
  - ONE_XMLRPC
  - ONE_AUTH
  - MailgunCluster
  - MailgunMachine
  - oneadmin
  - opennebula
  - MAILGUN_API_KEY
  - MAILGUN_DOMAIN
  - MAIL_RECIPIENT
  - MailgunSecret
  - MailgunConfig
  - podSecurity
  - AdmissionConfiguration
  - IBM Cloud API Key
  - Resource Group ID
  - VPC Name
  - Kubernetes Secret
  - ExtensionConfig
client:
  base_url: https://github.com/kubernetes-sigs/cluster-api
  headers:
    Accept: application/json
source_metadata: null
