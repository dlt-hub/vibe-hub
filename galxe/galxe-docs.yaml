resources:
- name: quest_details
  endpoint:
    path: /query
    method: POST
    data_selector: quest
    params: {}
- name: space_quests
  endpoint:
    path: /query
    method: POST
    data_selector: quests
    params:
      input:
        spaceId: '40'
        statuses:
        - Active
        - NotStarted
        types:
        - Drop
        - Points
        first: 20
- name: user_eligibility
  endpoint:
    path: /query
    method: POST
    data_selector: quest
    params: {}
- name: credentials
  endpoint:
    path: /identity/credentials
    method: GET
    data_selector: records
- name: GAL Token Contracts
  endpoint:
    path: /about/gal/token-contracts
    method: GET
    data_selector: contracts
    params: {}
- name: Token Distribution
  endpoint:
    path: /about/gal/token-distribution
    method: GET
    data_selector: distribution
    params: {}
- name: Vesting Contracts
  endpoint:
    path: /about/gal/vesting-contracts
    method: GET
    data_selector: vesting
    params: {}
- name: GAL Token Contracts
  endpoint:
    path: /about/gal/token-contracts
    method: GET
    data_selector: contracts
    params: {}
- name: Token Distribution
  endpoint:
    path: /about/gal/token-distribution
    method: GET
    data_selector: distribution
    params: {}
- name: Vesting Contracts
  endpoint:
    path: /about/gal/vesting-contracts
    method: GET
    data_selector: vesting
    params: {}
- name: user_account
  endpoint:
    path: /api/v1/user/account
    method: GET
    data_selector: data
    params: {}
- name: blockchain_data
  endpoint:
    path: /api/v1/blockchain/data
    method: GET
    data_selector: data
    params: {}
- name: Galxe Contributor Factions
  endpoint:
    path: /about/community-programs/galxe-contributor
    method: GET
    data_selector: factions
    params: {}
- name: Application for Contributor
  endpoint:
    path: /contributorapplicationform
    method: GET
    data_selector: application
    params: {}
- name: quest
  endpoint:
    path: /query
    method: POST
    data_selector: data.quest
    params: {}
- name: quest
  endpoint:
    path: /query
    method: POST
    data_selector: data.quest
    params: {}
- name: quest
  endpoint:
    path: /query
    method: POST
    data_selector: data.quest
    params: {}
- name: space_quests
  endpoint:
    path: /query
    method: POST
    data_selector: data.quests.list
    params: {}
- name: quest
  endpoint:
    path: /query
    method: POST
    data_selector: data.quest
    params: {}
- name: space_quests
  endpoint:
    path: /query
    method: POST
    data_selector: data.quests
    params: {}
- name: GetLeaderboard
  endpoint:
    path: /query
    method: POST
    data_selector: data.space.loyaltyPointsRanks.list
    params: {}
- name: GetQuestPoints
  endpoint:
    path: /query
    method: POST
    data_selector: data.quest
    params: {}
- name: GetQuestPoints
  endpoint:
    path: /query
    method: POST
    data_selector: data.quest
- name: GetLeaderboard
  endpoint:
    path: /query
    method: POST
    data_selector: data.space.loyaltyPointsRanks
- name: GetSprintLeaderboard
  endpoint:
    path: /query
    method: POST
    data_selector: data.space.loyaltyPointsRanks
- name: credential_info
  endpoint:
    path: /query
    method: POST
    data_selector: data.credential
    params: {}
- name: user_eligibility
  endpoint:
    path: /query
    method: POST
    data_selector: data.credential
    params: {}
- name: credential_info
  endpoint:
    path: /query
    method: POST
    data_selector: data.credential
    params: {}
- name: user_eligibility
  endpoint:
    path: /query
    method: POST
    data_selector: data.credential
    params: {}
- name: leaderboard
  endpoint:
    path: /query
    method: POST
    data_selector: data.space.loyaltyPointsRanks.list
- name: leaderboard
  endpoint:
    path: /query
    method: POST
    data_selector: data.space.loyaltyPointsRanks.list
- name: starboard
  endpoint:
    path: /query
    method: POST
    data_selector: data.starboard
    params: {}
- name: leaderboard
  endpoint:
    path: /query
    method: POST
    data_selector: data.starboard.leaderboard
    params: {}
- name: user
  endpoint:
    path: /query
    method: POST
    data_selector: data.starboard.leaderboard.edges
    params: {}
- name: starboard
  endpoint:
    path: /query
    method: POST
    data_selector: data.starboard
    params: {}
- name: GetCredential
  endpoint:
    path: /query
    method: POST
    data_selector: data.credential
    params: {}
- name: CheckEligibility
  endpoint:
    path: /query
    method: POST
    data_selector: data.credential
    params: {}
- name: GetCredential
  endpoint:
    path: /query
    method: POST
    data_selector: data.credential
    params: {}
- name: CheckEligibility
  endpoint:
    path: /query
    method: POST
    data_selector: data.credential
    params: {}
- name: space_information
  endpoint:
    path: /query
    method: POST
    data_selector: data.space
    params: {}
- name: loyalty_points_rankings
  endpoint:
    path: /query
    method: POST
    data_selector: data.space.loyaltyPointsRanks
    params: {}
- name: space_information
  endpoint:
    path: /query
    method: POST
    data_selector: data.space
    params: {}
- name: loyalty_points_rankings
  endpoint:
    path: /query
    method: POST
    data_selector: data.space.loyaltyPointsRanks
    params:
      sprintId: null
- name: starboard_information
  endpoint:
    path: /query
    method: POST
    data_selector: data.starboard.basicInfo
    params: {}
- name: starboard_leaderboard
  endpoint:
    path: /query
    method: POST
    data_selector: data.starboard.leaderboard.edges
    params: {}
- name: search_user
  endpoint:
    path: /query
    method: POST
    data_selector: data.starboard.leaderboard.edges
    params: {}
- name: twitter_handle_by_evm_address
  endpoint:
    path: /query
    method: POST
    data_selector: data.starboard.twitterHandleByEvmAddress
    params: {}
- name: user_detail
  endpoint:
    path: /query
    method: POST
    data_selector: data.starboard.userDetail
    params: {}
- name: GetStarboardInformation
  endpoint:
    path: /query
    method: POST
    data_selector: data.starboard.basicInfo
    params:
      id: '1'
- name: GetStarboardLeaderboard
  endpoint:
    path: /query
    method: POST
    data_selector: data.starboard.leaderboard.edges
    params:
      id: '1'
- name: SearchSpecificUser
  endpoint:
    path: /query
    method: POST
    data_selector: data.starboard.leaderboard.edges
    params:
      id: '1'
      twitterId: elonmusk
- name: GetTwitterHandleByEvmAddress
  endpoint:
    path: /query
    method: POST
    data_selector: data.starboard.twitterHandleByEvmAddress
    params:
      id: '1'
- name: GetUserDetail
  endpoint:
    path: /query
    method: POST
    data_selector: data.starboard.userDetail
    params:
      id: '1'
notes:
- Uses OAuth2 with refresh token — requires setup of connected app in Galxe
- Some objects may return nulls in deeply nested fields
- Galxe is a technological platform only. We are not a broker, financial institution,
  creditor, borrower, agent, or provide any financial services, products or advice.
- Uses OAuth2 with refresh token — requires setup of connected app in api
- Smart Balance funds or credits cannot be withdrawn and must be used exclusively
  on Galxe.com.
- Service fees may apply depending on the type of deposit.
- GAL has a total supply of 200,000,000 tokens.
- Terms describe rights and obligations when using the Services
- Eligibility requires legal age in the jurisdiction you reside
- Our Services are restricted for users at least 18 years old (or of legal age in
  their jurisdiction) and children under the age of 18 are not allowed to use our
  Services.
- Some data may be subject to blockchain regulations
- The Services are strictly offered on a non-custodial basis.
- Some Supported Staking Protocols require that your Digital Assets be locked for
  a period of time while staking or unstaking.
- Token must be generated from the Galxe Dashboard Settings.
- None of the features on GALXE will require you to mint GALXE Passport.
- We cannot guarantee that unauthorized access, hacking, data loss, or other breaches
  will never occur.
- The Galxe Contributor program is an exclusive community program that has limited
  available spots.
- Secure token setup and best practices
- Check quest status before showing participation UI
- Handle cases where quests are not found or access is denied
- Always check quest status before showing participation UI
- Search optimization recommended to limit user search to 20-50 pages max for UI responsiveness.
- Caching user positions for 5-10 minutes is advised to reduce API calls.
- Search performance may require multiple API calls for user lookups.
- No direct user lookup available.
- The B2B API is designed for verification and querying only. Credential management
  is handled through the Galxe Dashboard.
- The B2B API is designed for verification and querying only.
- Uses cursor-based pagination
- Sprint information must come from external sources as sprint management is not available
  through this API
- Pagination is cursor-based using cursorAfter.
- No direct user lookup; must paginate to find specific users.
- Cache leaderboard data for 1-2 minutes to reduce API calls
- Limit updates to reasonable frequencies
- Uses GraphQL for queries
- Rate limit recommendations advise caching data for 1-2 minutes
- Check syncStatus is SYNCED before relying on eligibility results
- Use campaignId parameter for quest-specific verifications
- When your application exceeds the rate limit (10 QPS), the API will return a HTTP
  429 Too Many Requests response code. You should implement exponential backoff and
  retry logic to handle these responses.
- When you reach your monthly quota (100k requests), the API will return a HTTP 429
  Too Many Requests response code until the next billing cycle begins.
- 'Rate limiting: Limit monitoring requests to once every 5 minutes'
- 'Pagination: Use forward pagination for efficient data retrieval'
- When your application exceeds the rate limit (10 QPS), the API will return a `HTTP
  429 Too Many Requests` response code.
- When you reach your monthly quota (100k requests), the API will return a `HTTP 429
  Too Many Requests` response code until the next billing cycle begins.
- Invalid Access Token may result in 401 Unauthorized errors
- Insufficient Permissions may result in 403 Forbidden errors
- Rate Limiting may result in 429 Too Many Requests
- Invalid Access Token may lead to 401 Unauthorized errors
- Insufficient Permissions may lead to 403 Forbidden errors
- Rate Limiting may lead to 429 Too Many Requests
errors:
- 'Quest not found: Verify quest ID exists'
- 'Quest is private: Check quest permissions'
- 'Rate limit exceeded: Implement retry logic'
- 'Invalid status filter: Use valid status values'
- 'REQUEST_LIMIT_EXCEEDED: Throttle API calls or reduce frequency'
- '401 Unauthorized: Recheck OAuth scopes or token expiration'
- 'QUERY_TIMEOUT: Break down filters or add selectivity'
- '400 Bad Request: Check request parameters'
- 'TOKEN_REQUIRED: Access token missing'
- 'INVALID_TOKEN: Access token invalid'
- 'QUOTA_EXCEEDED: API quota exceeded'
- Quest not found
- Quest is in draft mode
- Quest has expired
- Quest capacity reached
- User not found in top rankings
- '401 Unauthorized: Check if the access token is valid.'
- 'User not found in rankings: Handle gracefully in UI.'
- 'Rate Limit Exceeded: Implement delays between requests.'
- 'NETWORK_ERROR: Handle network errors appropriately.'
- 'INVALID_CREDENTIAL_ID: Always validate credential IDs before usage.'
- 'No Direct User Lookup: Must search through pages'
- 'No Sprint Management: Sprint IDs from external sources'
- 'Search Performance: Finding users requires multiple API calls'
- 'Rate limit exceeded: Implement delays between requests.'
- 'User not found: Return appropriate message.'
- User not found in starboard
- 'Credential not found: Verify credential ID exists'
- 'Address not provided: Include user address in query'
- 'Invalid access token: Regenerate access token'
- 'Space not found: Verify space ID exists'
- 'Invalid sprint ID: Check sprint ID or omit parameter'
- 'Invalid cursor: Start fresh without cursor'
- 'Starboard not found: Verify starboard ID exists'
- 'Twitter user not found: Check if user is in starboard'
- 'Invalid pagination: Use proper PaginationInput structure'
- 'HTTP 429 Too Many Requests: Implement exponential backoff and retry logic to handle
  these responses.'
- 'INVALID_TOKEN: Invalid access token: invalid token'
- 'TOKEN_REQUIRED: Missing access token'
- 'PERMISSION_DENIED: Permission denied'
- 'QUOTA_EXCEEDED: API quota exceeded: monthly limit reached'
- 'INVALID_ARGUMENT: Invalid argument provided'
- 'INVALID_ADDRESS: Invalid address format'
- 'COMPLEXITY_LIMIT_EXCEEDED: Query complexity limit exceeded'
- 'DEPTH_LIMIT_EXCEEDED: Query too deep'
- 'NOT_FOUND: Resource not found'
- 'INTERNAL_ERROR: Internal server error'
- 'UNAVAILABLE: Service unavailable'
- '401 Unauthorized: Verify token is correctly set in headers'
- '403 Forbidden: Verify token has access to the specific space/credential'
- '429 Too Many Requests: Implement exponential backoff'
- 'TOKEN_REQUIRED: Missing Access Token'
- 'INVALID_ADDRESS: Invalid Address Format'
- 'COMPLEXITY_LIMIT_EXCEEDED: Query complexity limit exceeded: 1500 > 1000'
- 'NOT_FOUND: Quest not found: invalid_id'
- 'UNAVAILABLE: Service temporarily unavailable'
auth_info:
  mentioned_objects:
  - OauthToken
  - CredentialHolder
  - Issuer
  - Verifier
  - CredentialTypeDesigner
  - AuthProvider
client:
  base_url: https://graphigo-business.prd.galaxy.eco
  headers:
    Content-Type: application/json
source_metadata: null
