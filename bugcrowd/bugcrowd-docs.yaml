resources:
- name: submission
  endpoint:
    path: /api/getting-started/submission
    method: GET
    data_selector: submission
    params: {}
- name: submission
  endpoint:
    path: /submissions/{id}
    method: PATCH
    data_selector: data
- name: submissions
  endpoint:
    path: /submissions
    method: GET
    data_selector: data
    params:
      filter[assignee]: []
      filter[blocked_by]: []
      filter[duplicate]: false
      filter[payments]: []
      filter[points]: []
      filter[program]: []
      filter[researcher]: []
      filter[retest]: []
      filter[search]: ''
      filter[severity]: []
      filter[source]: []
      filter[state]: []
      filter[submitted]: ''
      filter[target]: []
      filter[target_type]: []
      filter[updated]: ''
      filter[vrt]: ''
      sort: []
- name: programs
  endpoint:
    path: /api/programs
    method: GET
    data_selector: data
    params:
      fields[organization]:
      - name
      - programs
      fields[program]:
      - code
      - name
      - organization
      - engagements
      - submissions
      page[limit]: 25
      page[offset]: 0
- name: engagement
  endpoint:
    path: /engagement
    method: GET
    data_selector: data
    params: {}
- name: activity
  endpoint:
    path: /submissions?fields[submission]=activities&include=activities&fields[activity]=key
    method: GET
    data_selector: data
    params: {}
- name: engagement
  endpoint:
    path: /engagements/{id}
    method: GET
    data_selector: data
- name: claim_ticket
  endpoint:
    path: /claim_ticket
    method: POST
    data_selector: data
    params: {}
- name: comment
  endpoint:
    path: /comments
    method: POST
    data_selector: data
    params: {}
- name: submission
  endpoint:
    path: /api/getting-started
    method: GET
    data_selector: data
    params: {}
- name: submission
  endpoint:
    path: /submissions/{id}
    method: PATCH
    data_selector: data
- name: target
  endpoint:
    path: /targets
    method: GET
    data_selector: data
- name: event
  endpoint:
    path: /submissions?fields[submission]=activities&include=activities&fields[activity]=event
    method: GET
- name: file_attachment
  endpoint:
    path: /submissions?fields[submission]=file_attachments&include=file_attachments&fields[file_attachment]=s3_signed_url
    method: GET
- name: identity
  endpoint:
    path: /submissions?fields[submission]=researcher&include=researcher&fields[researcher]=name
    method: GET
- name: monetary_reward
  endpoint:
    path: /monetary_rewards/{id}
    method: GET
- name: submissions
  endpoint:
    path: /index/submissions
    method: GET
    data_selector: data
- name: organization
  endpoint:
    path: /organizations/{id}
    method: GET
    data_selector: data
    params:
      fields[organization]: name,programs
- name: program
  endpoint:
    path: /api/programs
    method: GET
    data_selector: data
    params: {}
- name: submission
  endpoint:
    path: /api/submissions
    method: POST
    data_selector: data
    params: {}
- name: organizations
  endpoint:
    path: /organizations
    method: GET
    data_selector: data
    params: {}
- name: payments
  endpoint:
    path: /monetary_rewards/{monetary_reward_uuid}
    method: GET
    data_selector: data
    params:
      fields[payment]: amount_cents
- name: engagement
  endpoint:
    path: /engagements
    method: GET
    data_selector: data
    params: {}
- name: submission
  endpoint:
    path: /submissions
    method: GET
    data_selector: data
    params: {}
- name: program_brief
  endpoint:
    path: /programs
    method: GET
    data_selector: data
    params: {}
- name: reward_range
  endpoint:
    path: /programs
    method: GET
    data_selector: data
    params: {}
- name: target
  endpoint:
    path: /targets
    method: GET
    data_selector: data
    params: {}
- name: target_group
  endpoint:
    path: /target_groups
    method: GET
    data_selector: data
    params: {}
- name: submissionCreated
  endpoint:
    path: /api/webhooks/submissionCreated
    method: POST
    data_selector: data
    params: {}
- name: submissionUpdated
  endpoint:
    path: /api/webhooks/submissionUpdated
    method: POST
    data_selector: data
    params: {}
- name: engagement
  endpoint:
    path: /engagements/{id}
    method: GET
    data_selector: data
    params:
      fields[engagement]: id,cancellation_reason,code,ends_at,expected_completed_at,last_transition_at,paused_reason,starts_at,state,created_at,updated_at,engagement_type,engagement_brief,bounty
      fields[engagement_brief]: id,additional_information,collaboration_enabled,coordinated_disclosure,crowdstream_visible,description,name,safe_harbor_status,share_known_issues,tagline,targets_overview,engagement,engagement_brief_target_groups
      include: engagement_brief
      fields[reward_range]: p1_max_cents,p1_min_cents,p2_max_cents,p2_min_cents,p3_max_cents,p3_min_cents,p4_max_cents,p4_min_cents,p5_max_cents,p5_min_cents,program_max_cents
      fields[target_group]: name,description,in_scope,reward_range,engagement_brief,targets
      fields[target]: name,category,organization,submissions
- name: submissionUpdated
  endpoint:
    path: /api/webhooks/submissionUpdated
    method: POST
    data_selector: data
- name: claim_ticket
  endpoint:
    path: /claim_ticket
    method: POST
    data_selector: data
- name: comment
  endpoint:
    path: /submissions
    method: POST
    data_selector: data
- name: event
  endpoint:
    path: /submissions
    method: GET
    data_selector: data
    params: {}
- name: file_attachment
  endpoint:
    path: /submissions
    method: GET
    data_selector: data
    params: {}
- name: identity
  endpoint:
    path: /submissions
    method: GET
    data_selector: data
    params: {}
- name: monetary_reward
  endpoint:
    path: /monetary_rewards/{id}
    method: GET
    data_selector: data
    params: {}
- name: organization
  endpoint:
    path: /organizations/{id}
    method: GET
    data_selector: data
    params:
      fields[organization]: name,programs
- name: submissions
  endpoint:
    path: /api/v1/submissions
    method: GET
    data_selector: data
    params:
      incremental: submitted_at
- name: notifications
  endpoint:
    path: /api/v1/notifications
    method: GET
    data_selector: data
    params: {}
- name: organizations
  endpoint:
    path: /organizations
    method: GET
    data_selector: data
    params:
      fields[organization]: name,programs
      page[limit]: 50
      page[offset]: 0
- name: payments
  endpoint:
    path: /monetary_rewards/MONETARY_REWARD_UUID
    method: GET
    data_selector: data
    params:
      fields[monetary_reward]: payments
      include: payments
- name: program_brief
  endpoint:
    path: /programs
    method: GET
    data_selector: data
    params: {}
- name: target
  endpoint:
    path: /targets
    method: GET
    data_selector: data
    params:
      fields[organization]: name,programs
      fields[target]: name,category
- name: submissionCreated
  endpoint:
    path: /api/webhooks/submissionCreated
    method: POST
    data_selector: data
    params: {}
- name: submissionUpdated
  endpoint:
    path: /api/webhooks/submissionUpdated
    method: POST
    data_selector: data
    params: {}
- name: submission
  endpoint:
    path: /api/submission
    method: GET
    data_selector: data
    params: {}
- name: comments
  endpoint:
    path: /api/comments
    method: GET
    data_selector: data
    params: {}
- name: submission
  endpoint:
    path: /submissions/{id}
    method: GET
    data_selector: data
- name: slack_integration
  endpoint:
    path: /customers/integration-management/slack
    method: GET
    data_selector: integration_details
    params: {}
- name: submission_activity
  endpoint:
    path: /submissions/{id}/activities
    method: GET
    data_selector: data
    params:
      fields[identity]: name,email
      fields[submission_activity]: key,submission
      fields[submission_activity_event]: created_at,key,data
- name: update_submission
  endpoint:
    path: /submissions/{id}
    method: PATCH
    data_selector: data
    params: {}
- name: submissions
  endpoint:
    path: /submissions
    method: GET
    data_selector: data
    params:
      page[limit]: 25
      page[offset]: 0
- name: submissions
  endpoint:
    path: /submissions/{id}/activities
    method: GET
    data_selector: data
    params:
      fields[identity]: name,email
      fields[submission_activity]: key,submission
      fields[submission_activity_event]: created_at,key,data
- name: researcher_dashboard
  endpoint:
    path: /researchers/onboarding/researcher-dashboard
    method: GET
- name: performance_stats
  endpoint:
    path: /researchers/managing-account/performance-metrics
    method: GET
- name: account_settings
  endpoint:
    path: /researchers/managing-account/account-settings
    method: GET
- name: security
  endpoint:
    path: /researchers/managing-account/security
    method: GET
- name: programs
  endpoint:
    path: /programs
    method: GET
    data_selector: data
    params:
      fields[organization]: name,programs
      fields[program]: code,name,organization,engagements,submissions
      fields[submission]: bug_url,custom_fields,description,duplicate,extra_info,http_request,last_transitioned_to_informational_at,last_transitioned_to_not_applicable_at,last_transitioned_to_not_reproducible_at,last_transitioned_to_out_of_scope_at,last_transitioned_to_resolved_at,last_transitioned_to_triaged_at,last_transitioned_to_unresolved_at,remediation_advice,severity,source,state,submitted_at,title,vrt_id,vrt_version,vulnerability_references,activities,assignee,assignees,claim_ticket,comments,cvss_vector,duplicate_of,duplicates,engagement,engagement_brief,external_issues,file_attachments,monetary_rewards,program,researcher,target
      fields[engagement]: id,cancellation_reason,code,ends_at,expected_completed_at,last_transition_at,paused_reason,starts_at,state,created_at,updated_at,engagement_type,engagement_brief,bounty,submissions
      include: organization,submissions,engagements
      page[limit]: 25
      page[offset]: 0
- name: submission
  endpoint:
    path: /api/submission
    method: GET
- name: fetch_comments
  endpoint:
    path: /api/comments
    method: GET
- name: activity
  endpoint:
    path: /submissions
    method: GET
    data_selector: data
    params: {}
- name: engagement
  endpoint:
    path: /engagement
    method: GET
    data_selector: data
    params: {}
- name: submission
  endpoint:
    path: /submissions/{id}
    method: GET
    data_selector: data
- name: engagement
  endpoint:
    path: /engagements/{id}
    method: GET
    data_selector: data
    params: {}
- name: submission_activity
  endpoint:
    path: /submissions/{id}/activities
    method: GET
    data_selector: data
    params: {}
- name: update_submission
  endpoint:
    path: /submissions/{id}
    method: PATCH
    data_selector: data
    params: {}
- name: claim_ticket
  endpoint:
    path: /claim_ticket
    method: POST
    data_selector: data
- name: comment
  endpoint:
    path: /comments
    method: POST
    data_selector: data
- name: submissions
  endpoint:
    path: /submissions
    method: GET
    data_selector: data
    params: {}
- name: submission
  endpoint:
    path: /submissions
    method: GET
    data_selector: data
- name: identity
  endpoint:
    path: /submissions?fields[submission]=researcher&include=researcher&fields[researcher]=name
    method: GET
    data_selector: included
- name: monetary_reward
  endpoint:
    path: /submissions
    method: GET
    data_selector: data
- name: fetch_reward
  endpoint:
    path: /rewards/{id}
    method: GET
    data_selector: data
    params: {}
- name: update_reward
  endpoint:
    path: /rewards/{id}
    method: PATCH
    data_selector: data
    params: {}
- name: submission_activity
  endpoint:
    path: /submissions/{submission_id}/activities
    method: GET
    data_selector: data
    params: {}
- name: program
  endpoint:
    path: /programs/{program_id}
    method: GET
    data_selector: data
    params: {}
- name: index_programs
  endpoint:
    path: /programs
    method: GET
    params:
      page[limit]: 25
      page[offset]: 0
- name: fetch_program
  endpoint:
    path: /programs/{id}
    method: GET
    params: {}
- name: organization
  endpoint:
    path: /organizations/{id}
    method: GET
    data_selector: data
    params:
      fields[organization]:
      - name
      - programs
      - targets
      include:
      - programs
      - targets
- name: organization_member
  endpoint:
    path: /api/org_members
    method: GET
    data_selector: data
    params: {}
- name: engagement
  endpoint:
    path: /engagements
    method: GET
    data_selector: data
    params:
      fields[engagement]:
      - id
      - cancellation_reason
      - code
      - ends_at
      - expected_completed_at
      - last_transition_at
      - paused_reason
      - starts_at
      - state
      - created_at
      - updated_at
      - engagement_type
      - engagement_brief
      - bounty
      - submissions
      page[limit]: 25
      page[offset]: 0
- name: activity
  endpoint:
    path: /submissions/{submission_id}/activities
    method: GET
    data_selector: data
- name: program_role
  endpoint:
    path: /api/program_roles
    method: GET
    data_selector: data
    params: {}
- name: engagement
  endpoint:
    path: /engagements/{id}
    method: GET
    data_selector: data
    params: {}
- name: organization_member
  endpoint:
    path: /api/organization_members/{id}/{member_id}
    method: GET
    data_selector: data
    params: {}
- name: program_role
  endpoint:
    path: /api/program_roles/{program_role_id}
    method: DELETE
    data_selector: data
    params: {}
- name: delete_org_member
  endpoint:
    path: /org_members/{id}
    method: DELETE
- name: update_member_role
  endpoint:
    path: /org_members/{id}/role
    method: PATCH
- name: claim_ticket
  endpoint:
    path: /claim_tickets
    method: POST
    data_selector: data
- name: comment
  endpoint:
    path: /comments
    method: POST
    data_selector: data
- name: submission
  endpoint:
    path: /submissions
    method: GET
    data_selector: data
- name: organizations
  endpoint:
    path: /api/organizations
    method: GET
    params:
      fields[organization]:
      - name
      - programs
      - targets
      page[limit]: 25
      page[offset]: 0
- name: reward
  endpoint:
    path: /rewards/{id}
    method: GET
    params: {}
- name: update_reward
  endpoint:
    path: /rewards/{id}
    method: PATCH
    params: {}
- name: organization
  endpoint:
    path: /organizations/{id}
    method: GET
    data_selector: data
    params: {}
- name: access_invitations
  endpoint:
    path: /access_invitations
    method: GET
    data_selector: data
    params:
      fields[access_invitation]:
      - approved_at
      - created_at
      - grantee_email
      - granting_identity
      - organization
      - resource_roles
      page[limit]: 25
      page[offset]: 0
- name: organization_member
  endpoint:
    path: /api/organization_members
    method: GET
    data_selector: data
    params:
      include: access_grants
      fields[organization_member]:
      - name
      - email
      - access_grants
      page[limit]: 25
      page[offset]: 0
- name: payment
  endpoint:
    path: /monetary_rewards/MONETARY_REWARD_UUID?fields[monetary_reward]=payments&include=payments&fields[payment]=amount_cents
    method: GET
    data_selector: data
    params: {}
- name: reward_range
  endpoint:
    path: /programs
    method: GET
    data_selector: data
    params: {}
- name: target
  endpoint:
    path: /programs
    method: GET
    data_selector: data
    params: {}
- name: authentication_log
  endpoint:
    path: /authorization_logs
    method: GET
    data_selector: data
    params:
      fields[authentication_log]: time,actor,action,ip_address,reason
      page[limit]: 25
      page[offset]: 0
      filter[organization_id]: 10000000-0000-0000-0000-000000000000
      filter[start_date]: string
      filter[end_date]: string
- name: program_roles
  endpoint:
    path: /api/program_roles
    method: GET
    data_selector: data
    params: {}
- name: create_program_role
  endpoint:
    path: /api/program_roles
    method: POST
    data_selector: data
    params: {}
- name: authentication_log
  endpoint:
    path: /authentication_logs
    method: GET
    data_selector: data
    params:
      filter[start_date]: ''
      filter[end_date]: ''
      fields[authentication_log]: []
      filter[organization_id]: []
      page[limit]: 25
      page[offset]: 0
- name: organization_member
  endpoint:
    path: /organizations/{id}/members/{member_id}
    method: GET
    data_selector: data
    params:
      fields[organization_member]: name,email,access_grants
      fields[member_access_grant]: role,source,resource_type,grantee_id,resource_id,email
      include: access_grants
- name: program_role
  endpoint:
    path: /program_roles/{program_role_id}
    method: DELETE
    data_selector: data
    params: {}
- name: disclosure_request
  endpoint:
    path: /disclosure_requests
    method: GET
    data_selector: data
    params: {}
- name: team
  endpoint:
    path: /teams
    method: GET
    data_selector: data
    params: {}
- name: teams
  endpoint:
    path: /api/teams
    method: GET
    params:
      page[limit]: 25
      page[offset]: 0
- name: delete_org_member
  endpoint:
    path: /organizations/{id}/members/{member_id}
    method: DELETE
- name: update_member_role
  endpoint:
    path: /organizations/{id}/members/{member_id}
    method: PATCH
    data_selector: data
- name: team
  endpoint:
    path: /teams/{id}
    method: DELETE
- name: fetch_team
  endpoint:
    path: /teams/{id}
    method: GET
- name: organizations
  endpoint:
    path: /organizations
    method: GET
    data_selector: data
    params: {}
- name: team_member
  endpoint:
    path: /team_members
    method: GET
    data_selector: data
    params: {}
- name: delete_team_member
  endpoint:
    path: /team_members/{id}
    method: DELETE
    data_selector: data
    params: {}
- name: access_invitation
  endpoint:
    path: /invitations
    method: GET
    data_selector: data
    params: {}
- name: team_members
  endpoint:
    path: /team_members
    method: GET
    data_selector: data
    params:
      include: access_grants
      fields[team_member]:
      - name
      - email
      - access_grants
      page[limit]: 25
      page[offset]: 0
- name: create_team_role
  endpoint:
    path: /team_roles
    method: POST
    data_selector: data
- name: payment
  endpoint:
    path: /monetary_rewards/MONETARY_REWARD_UUID?fields[monetary_reward]=payments&include=payments&fields[payment]=amount_cents
    method: GET
    data_selector: data
    params: {}
- name: reward_range
  endpoint:
    path: /programs
    method: GET
    data_selector: data
    params: {}
- name: target
  endpoint:
    path: /targets
    method: GET
    data_selector: data
    params: {}
- name: activities
  endpoint:
    path: /submissions/{id}/activities
    method: GET
    data_selector: data
    params: {}
- name: authentication_log
  endpoint:
    path: /authorization_logs
    method: GET
    data_selector: data
    params:
      filter[start_date]: ''
      filter[end_date]: ''
- name: blockerCreated
  endpoint:
    path: /webhooks/blockerCreated
    method: POST
    data_selector: data
- name: blockerUpdated
  endpoint:
    path: /webhooks/blockerUpdated
    method: POST
    data_selector: data
- name: authentication_log
  endpoint:
    path: /authentication_logs
    method: GET
    data_selector: data
    params:
      filter[start_date]: string
      filter[end_date]: string
      fields[authentication_log]: array of strings
      filter[organization_id]: array of strings
      page[limit]: integer
      page[offset]: integer
- name: submission_created
  endpoint:
    path: /api/webhooks/submissionCreated
    method: POST
    data_selector: data
    params: {}
- name: submission_updated
  endpoint:
    path: /api/webhooks/submissionUpdated
    method: POST
    data_selector: data
    params: {}
- name: disclosure_request
  endpoint:
    path: /disclosure_requests
    method: GET
    data_selector: data
    params: {}
- name: team
  endpoint:
    path: /teams
    method: GET
    data_selector: data
    params: {}
- name: teams
  endpoint:
    path: /teams
    method: GET
    data_selector: data
    params: {}
- name: activity_notifications
  endpoint:
    path: /customers/general-activity-notifications
    method: GET
- name: industry_comparison_report
  endpoint:
    path: /customers/industry-comparison-report
    method: GET
- name: submission_details
  endpoint:
    path: /researchers/submission-details
    method: GET
- name: activity
  endpoint:
    path: /activities
    method: GET
    data_selector: data
    params: {}
- name: team
  endpoint:
    path: /teams/{id}
    method: DELETE
    data_selector: ''
    params: {}
- name: team_member
  endpoint:
    path: /team_members/{id}/{member_id}
    method: GET
- name: delete_team_member
  endpoint:
    path: /team_members/{id}/{member_id}
    method: DELETE
- name: index_team_members
  endpoint:
    path: /team_members
    method: GET
    data_selector: data
    params:
      page[limit]: 25
      page[offset]: 0
- name: create_team_role
  endpoint:
    path: /team_roles
    method: POST
    data_selector: data
- name: activities
  endpoint:
    path: /submissions/{id}/activities
    method: GET
    data_selector: data
    params:
      include: actor,event
      fields[submission_activity]: key,submission
      fields[identity]: name,email
      fields[submission_activity_event]: created_at,key,data
- name: delete_team_role
  endpoint:
    path: /teams/{id}/roles/{role_id}
    method: DELETE
- name: engagements
  endpoint:
    path: /api/engagements
    method: GET
    data_selector: data
    params: {}
- name: submissions
  endpoint:
    path: /api/submissions
    method: GET
    data_selector: data
    params: {}
- name: blockerCreated
  endpoint:
    path: /blockerCreated
    method: POST
    data_selector: data
- name: blockerUpdated
  endpoint:
    path: /blockerUpdated
    method: POST
    data_selector: data
- name: engagement_states
  endpoint:
    path: /customers/engagement-states
    method: GET
    data_selector: engagement_states
- name: submission_created
  endpoint:
    path: /api/webhooks/submissionCreated
    method: POST
    data_selector: data
    params: {}
- name: submission_updated
  endpoint:
    path: /api/webhooks/submissionUpdated
    method: POST
    data_selector: data
    params: {}
- name: submissions
  endpoint:
    path: /api/v1/submissions
    method: GET
    data_selector: data
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: submissions
  endpoint:
    path: /customers/submission-management/submissions
    method: GET
    data_selector: submissions
- name: engagement
  endpoint:
    path: /engagements
    method: GET
    data_selector: records
    params: {}
- name: submissions
  endpoint:
    path: /submissions
    method: GET
    data_selector: records
- name: engagements
  endpoint:
    path: /engagements
    method: GET
    data_selector: records
- name: submissions
  endpoint:
    path: /submissions
    method: GET
    data_selector: data
    params: {}
- name: programs
  endpoint:
    path: /programs
    method: GET
    data_selector: data
    params: {}
- name: submission
  endpoint:
    path: /api/submission
    method: GET
    data_selector: data
    params: {}
- name: comments
  endpoint:
    path: /api/comments
    method: GET
    data_selector: data
    params: {}
- name: submission
  endpoint:
    path: /submissions
    method: GET
    data_selector: data
    params: {}
- name: submission_activity
  endpoint:
    path: /submissions/{id}/activities
    method: GET
    data_selector: data
    params:
      fields[identity]: name,email
      fields[submission_activity]: key,submission
      fields[submission_activity_event]: created_at,key,data
- name: update_submission
  endpoint:
    path: /submissions/{id}
    method: PATCH
    data_selector: data
    params: {}
- name: submission
  endpoint:
    path: /index_submissions
    method: GET
    data_selector: data
    params: {}
- name: submission_activity
  endpoint:
    path: /submissions/{submission_id}/activities
    method: GET
    data_selector: data
- name: submissions
  endpoint:
    path: /submissions
    method: GET
    data_selector: data
    params: {}
- name: programs
  endpoint:
    path: /programs
    method: GET
    data_selector: data
    params: {}
- name: programs
  endpoint:
    path: /programs
    method: GET
    data_selector: data
    params: {}
- name: fetch_program
  endpoint:
    path: /programs/{id}
    method: GET
    data_selector: data
    params:
      id: required
- name: activity
  endpoint:
    path: /submissions?fields[submission]=activities&include=activities&fields[activity]=key
    method: GET
    data_selector: data
    params: {}
- name: engagement
  endpoint:
    path: /engagement?
    method: GET
    data_selector: data
    params: {}
- name: engagement
  endpoint:
    path: /engagements/{id}
    method: GET
    data_selector: data
    params: {}
- name: outgoing_webhook
  endpoint:
    path: /api/latest/#tag/submission_webhooks
    method: POST
- name: claim_ticket
  endpoint:
    path: /claim_ticket
    method: POST
    data_selector: data
- name: comment
  endpoint:
    path: /comments
    method: POST
    data_selector: data
- name: submission
  endpoint:
    path: /api/submission
    method: GET
    data_selector: data
- name: comments
  endpoint:
    path: /api/comments
    method: GET
    data_selector: data
- name: submission
  endpoint:
    path: /submissions
    method: GET
    data_selector: data
    params: {}
- name: submission
  endpoint:
    path: /submissions/{id}
    method: GET
    data_selector: data
    params: {}
- name: fetch_reward
  endpoint:
    path: /fetch_reward/{id}
    method: GET
    data_selector: data
    params:
      fields[identity]: []
      fields[monetary_reward]: []
      fields[payment]: []
      fields[submission]: []
      include: []
- name: update_reward
  endpoint:
    path: /update_reward/{id}
    method: POST
    data_selector: data
- name: organization
  endpoint:
    path: /organizations/{id}
    method: GET
    data_selector: data
    params:
      fields[organization]: name,programs,targets
      include: programs,targets
- name: submission_activity
  endpoint:
    path: /submissions/{id}/activities
    method: GET
    data_selector: data
    params:
      fields[identity]: name,email
      fields[submission_activity]: key,submission
      fields[submission_activity_event]: created_at,key,data
      include: actor,event
- name: update_submission
  endpoint:
    path: /submissions/{id}
    method: PATCH
    data_selector: data
    params: {}
- name: submission
  endpoint:
    path: /submissions
    method: GET
    params:
      page[limit]: 25
      page[offset]: 0
- name: organization_members
  endpoint:
    path: /organizations/{id}/members
    method: GET
    data_selector: data
    params:
      include: access_grants
      fields[organization_member]:
      - name
      - email
      - access_grants
      page[limit]: 25
      page[offset]: 0
- name: submission_activity
  endpoint:
    path: /submissions/{submission_id}/activities
    method: GET
    data_selector: data
    params: {}
- name: program
  endpoint:
    path: /programs/{program_id}
    method: GET
    data_selector: data
    params: {}
- name: program_roles
  endpoint:
    path: /program_roles
    method: GET
    data_selector: data
    params: {}
- name: organization_member
  endpoint:
    path: /organizations/{id}/members/{member_id}
    method: GET
    data_selector: data
    params: {}
- name: program_role
  endpoint:
    path: /program_roles/{program_role_id}
    method: DELETE
    data_selector: data
    params: {}
- name: programs
  endpoint:
    path: /programs
    method: GET
    params:
      page[limit]: 25
      page[offset]: 0
- name: fetch_program
  endpoint:
    path: /programs/{id}
    method: GET
    params: {}
- name: delete_org_member
  endpoint:
    path: /organizations/{id}/members/{member_id}
    method: DELETE
- name: update_member_role
  endpoint:
    path: /organizations/{id}/members/{member_id}
    method: PATCH
- name: activity
  endpoint:
    path: /submissions
    method: GET
    data_selector: data
    params: {}
- name: engagement
  endpoint:
    path: /engagement
    method: GET
    data_selector: data
    params: {}
- name: organizations
  endpoint:
    path: /organizations
    method: GET
    params:
      fields[organization]: name,programs
      page[limit]: 25
      page[offset]: 0
- name: engagement
  endpoint:
    path: /engagements/{id}
    method: GET
- name: access_invitation
  endpoint:
    path: /access_invitations
    method: GET
    data_selector: data
    params: {}
- name: comment
  endpoint:
    path: /submissions
    method: GET
    data_selector: data
    params:
      fields[submission]: comments
      include: comments
      fields[comment]: body,author
- name: claim_ticket
  endpoint:
    path: /claim_tickets
    method: POST
    data_selector: data
    params: {}
- name: submission
  endpoint:
    path: /submissions
    method: GET
    data_selector: data
    params: {}
- name: payment
  endpoint:
    path: /monetary_rewards/MONETARY_REWARD_UUID?fields[monetary_reward]=payments&include=payments&fields[payment]=amount_cents
    method: GET
    data_selector: data
- name: reward_range
  endpoint:
    path: /programs
    method: GET
    data_selector: data
- name: target
  endpoint:
    path: /targets
    method: GET
    data_selector: data
- name: authorization_log
  endpoint:
    path: /authorization_logs
    method: GET
    data_selector: data
    params:
      filter:
        start_date: required
        end_date: required
      page:
        limit: '25'
        offset: '0'
- name: fetch_reward
  endpoint:
    path: /fetch_reward/{id}
    method: GET
    data_selector: data
    params:
      fields[identity]: name,email
      fields[monetary_reward]: amount_cents,cancellation_comment,cancellation_reason,cancelled_at,comment,created_at,reason,rewarded_at,formatted_amount,cancelled,submission,rewarded_by,cancelled_by,payments
      fields[payment]: amount_cents,created_at,remitted_at,monetary_reward,researcher
      fields[submission]: bug_url,custom_fields,description,duplicate,extra_info,http_request,last_transitioned_to_informational_at,last_transitioned_to_not_applicable_at,last_transitioned_to_not_reproducible_at,last_transitioned_to_out_of_scope_at,last_transitioned_to_resolved_at,last_transitioned_to_triaged_at,last_transitioned_to_unresolved_at,remediation_advice,severity,source,state,submitted_at,title,vrt_id,vrt_version,vulnerability_references,activities,assignee,assignees,claim_ticket,comments,cvss_vector,duplicate_of,duplicates,engagement,engagement_brief,external_issues,file_attachments,monetary_rewards,program,researcher,target
      include: submission,rewarded_by,payments
- name: update_reward
  endpoint:
    path: /update_reward/{id}
    method: POST
    data_selector: data
- name: authentication_log
  endpoint:
    path: /authentication_logs
    method: GET
    data_selector: data
    params:
      filter[start_date]: string
      filter[end_date]: string
- name: organization
  endpoint:
    path: /organizations/{id}
    method: GET
    data_selector: data
    params:
      fields[organization]: name,programs,targets
      include: programs,targets
- name: disclosure_request
  endpoint:
    path: /disclosure_requests
    method: GET
    data_selector: data
    params: {}
- name: team
  endpoint:
    path: /teams
    method: GET
    data_selector: data
    params: {}
- name: organization_member
  endpoint:
    path: /organizations/{id}/members
    method: GET
    data_selector: data
    params:
      include: access_grants
      fields[organization_member]:
      - name
      - email
      - access_grants
      page[limit]: 25
      page[offset]: 0
- name: teams
  endpoint:
    path: /teams
    method: GET
    data_selector: data
    params: {}
- name: program_roles
  endpoint:
    path: /programs/{id}/roles
    method: GET
    data_selector: data
    params: {}
- name: create_program_role
  endpoint:
    path: /programs/{id}/roles
    method: POST
    data_selector: data
    params: {}
- name: fetch_team
  endpoint:
    path: /teams/{id}
    method: GET
    data_selector: data
    params: {}
- name: delete_team
  endpoint:
    path: /teams/{id}
    method: DELETE
    data_selector: null
    params: {}
- name: organization_member
  endpoint:
    path: /organizations/{id}/members/{member_id}
    method: GET
    data_selector: data
    params: {}
- name: program_role
  endpoint:
    path: /program_roles/{program_role_id}
    method: DELETE
    data_selector: data
    params: {}
- name: fetch_team_member
  endpoint:
    path: /team_members/{id}/{member_id}
    method: GET
    params:
      include: access_grants
      fields[team_member]:
      - name
      - email
      - access_grants
      fields[member_access_grant]:
      - role
      - source
      - resource_type
      - grantee_id
      - resource_id
      - email
- name: delete_team_member
  endpoint:
    path: /team_members/{id}/{member_id}
    method: DELETE
- name: update_member_role
  endpoint:
    path: /update/member/role
    method: POST
    data_selector: data
- name: delete_org_member
  endpoint:
    path: /delete/org/member
    method: DELETE
    data_selector: data
- name: organizations
  endpoint:
    path: /api/organizations
    method: GET
    data_selector: data
    params:
      fields[organization]: name,programs
      page[limit]: 25
      page[offset]: 0
      include: programs
- name: team_member
  endpoint:
    path: /team_members
    method: GET
    data_selector: data
    params:
      include: access_grants
- name: create_team_role
  endpoint:
    path: /team_roles
    method: POST
    data_selector: data
- name: access_invitation
  endpoint:
    path: /access_invitation
    method: GET
    data_selector: data
    params: {}
- name: activities
  endpoint:
    path: /submissions/{id}/activities
    method: GET
    data_selector: data
    params: {}
- name: team_role
  endpoint:
    path: /team_roles/{role_id}
    method: DELETE
    data_selector: data
    params: {}
- name: payment
  endpoint:
    path: /monetary_rewards/MONETARY_REWARD_UUID?fields[monetary_reward]=payments&include=payments&fields[payment]=amount_cents
    method: GET
    data_selector: data
    params: {}
- name: reward_range
  endpoint:
    path: /programs
    method: GET
    data_selector: data
    params: {}
- name: target
  endpoint:
    path: /targets
    method: GET
    data_selector: data
    params: {}
- name: authentication_log
  endpoint:
    path: /authorization_logs
    method: GET
    data_selector: data
    params:
      fields[authentication_log]: time,actor,action,ip_address,reason
      page[limit]: 25
      filter[start_date]: required
      filter[end_date]: required
- name: submission
  endpoint:
    path: /api/submission
    method: GET
    data_selector: data
    params: {}
- name: fetch_comments
  endpoint:
    path: /api/fetch_comments
    method: GET
    data_selector: data
    params: {}
- name: authentication_log
  endpoint:
    path: /authentication_logs
    method: GET
    data_selector: data
    params: {}
- name: submission
  endpoint:
    path: /submissions/{id}
    method: GET
    data_selector: data
    params:
      id: string
- name: disclosure_request
  endpoint:
    path: /disclosure_requests
    method: GET
    data_selector: data
    params: {}
- name: team
  endpoint:
    path: /teams
    method: GET
    data_selector: data
    params: {}
- name: submission_activity
  endpoint:
    path: /submissions/{id}/activities
    method: GET
    data_selector: data
    params:
      fields[identity]: name,email
      fields[submission_activity]: key,submission
      fields[submission_activity_event]: created_at,key,data
      include: actor,event
      page[limit]: 50
      page[offset]: 0
- name: update_submission
  endpoint:
    path: /submissions/{id}
    method: PATCH
    data_selector: data
    params: {}
- name: teams
  endpoint:
    path: /api/teams
    method: GET
    data_selector: data
    params: {}
- name: submissions
  endpoint:
    path: /index_submissions
    method: GET
    params:
      page[limit]: 25
      page[offset]: 0
- name: team
  endpoint:
    path: /teams
    method: GET
    data_selector: data
    params: {}
- name: fetch_team
  endpoint:
    path: /teams/{id}
    method: GET
    data_selector: data
    params:
      include: team_members
      fields[team]: name,description
      fields[role]: role,resource,resource_type
      fields[team_member]: name,email
- name: delete_team
  endpoint:
    path: /teams/{id}
    method: DELETE
    data_selector: ''
    params: {}
- name: submission_activity
  endpoint:
    path: /submissions/{id}/activities
    method: GET
    data_selector: data
    params:
      fields[identity]: name,email
      fields[submission_activity]: key,submission
      fields[submission_activity_event]: created_at,key,data
- name: program
  endpoint:
    path: /programs
    method: GET
    data_selector: data
    params: {}
- name: team_member
  endpoint:
    path: /team_members/{id}
    method: DELETE
- name: index_programs
  endpoint:
    path: /programs
    method: GET
    params:
      fields[organization]: name,programs
      fields[program]: code,name,organization,engagements,submissions
      page[limit]: 25
      page[offset]: 0
- name: fetch_program
  endpoint:
    path: /programs/{id}
    method: GET
    params:
      fields[organization]: name,programs
      fields[program]: code,name,organization,engagements,submissions
      include: organization,engagements
- name: team_members
  endpoint:
    path: /api/team_members
    method: GET
    data_selector: data
    params:
      page[limit]: 25
      page[offset]: 0
- name: create_team_role
  endpoint:
    path: /api/team_roles
    method: POST
    data_selector: data
- name: activities
  endpoint:
    path: /submissions/{id}/activities
    method: GET
    data_selector: data
    params:
      include: actor,event
      fields[submission_activity]: key,submission
      fields[identity]: name,email
      fields[submission_activity_event]: created_at,key,data
      page[limit]: 50
      page[offset]: 0
- name: activity
  endpoint:
    path: /submissions?fields[submission]=activities&include=activities&fields[activity]=key
    method: GET
    data_selector: data
    params: {}
- name: engagement
  endpoint:
    path: /engagement?
    method: GET
    data_selector: data
    params: {}
- name: engagement
  endpoint:
    path: /engagements/{id}
    method: GET
    data_selector: data
    params: {}
- name: blockerCreated
  endpoint:
    path: /blockerCreated
    method: POST
    data_selector: data
    params: {}
- name: blockerUpdated
  endpoint:
    path: /blockerUpdated
    method: POST
    data_selector: data
    params: {}
- name: claim_ticket
  endpoint:
    path: /claim_ticket
    method: POST
    data_selector: data
    params: {}
- name: comment
  endpoint:
    path: /comments
    method: POST
    data_selector: data
    params: {}
- name: submission
  endpoint:
    path: /submissions
    method: GET
    data_selector: data
- name: comments
  endpoint:
    path: /comments
    method: GET
    data_selector: data
- name: submission
  endpoint:
    path: /submissions
    method: GET
    data_selector: data
    params: {}
- name: monetary_reward
  endpoint:
    path: /monetary_reward/{id}
    method: GET
    data_selector: data
    params:
      fields[monetary_reward]: amount_cents,cancellation_comment,cancellation_reason,cancelled_at,comment,created_at,reason,rewarded_at,formatted_amount,cancelled,submission,rewarded_by,cancelled_by,payments
      include: submission,rewarded_by,payments
- name: update_reward
  endpoint:
    path: /monetary_reward/{id}
    method: PATCH
    data_selector: data
- name: create_reward
  endpoint:
    path: /api/rewards
    method: POST
    data_selector: data
- name: submission
  endpoint:
    path: /submissions/{id}
    method: GET
    data_selector: data
    params:
      fields[activity]:
      - created_at
      - key
      - actor
      - event
      - program
      - submission
      include:
      - activities
      - activities.actor
      - activities.event
      - claim_ticket
      - comments
      - comments.author
      - comments.file_attachments
      - cvss_vector
      - duplicates
      - duplicate_of
      - external_issues
      - file_attachments
      - monetary_rewards
      - program
      - program.organization
      - engagement
      - engagement_brief
      - researcher
      - target
- name: organization
  endpoint:
    path: /organizations/{id}
    method: GET
    data_selector: data
    params:
      fields[organization]:
      - name
      - programs
      - targets
      include:
      - programs
      - targets
- name: organization_members
  endpoint:
    path: /organizations/{id}/members
    method: GET
    data_selector: data
    params:
      include:
      - access_grants
      fields[organization_member]:
      - name
      - email
      - access_grants
      fields[member_access_grant]:
      - role
      - source
      - resource_type
      - grantee_id
      - resource_id
      - email
      page[limit]: 25
      page[offset]: 0
- name: submission_activity
  endpoint:
    path: /submissions/{id}/activities
    method: GET
    data_selector: data
    params:
      fields[identity]: name,email
      fields[submission_activity]: key,submission
      fields[submission_activity_event]: created_at,key,data
      include: actor,event
- name: update_submission
  endpoint:
    path: /submissions/{id}
    method: PATCH
    data_selector: data
    params: {}
- name: submission
  endpoint:
    path: /submissions
    method: GET
    data_selector: data
    params: {}
- name: program_roles
  endpoint:
    path: /api/roles
    method: GET
    data_selector: data
    params:
      fields[organization_program_role]: name,email,program_name,program_code,role
- name: program_role
  endpoint:
    path: /programs/{id}/roles
    method: DELETE
    data_selector: data
    params: {}
- name: submission_activity
  endpoint:
    path: /submissions/{id}/activities
    method: GET
    data_selector: data
    params: {}
- name: program
  endpoint:
    path: /programs/{id}
    method: GET
    data_selector: data
    params: {}
- name: fetch_org_member
  endpoint:
    path: /org/member
    method: GET
    params:
      fields[organization_member]:
      - name
      - email
      - access_grants
      fields[member_access_grant]:
      - role
      - source
      - resource_type
      - grantee_id
      - resource_id
      - email
      include:
      - access_grants
- name: delete_org_member
  endpoint:
    path: /org/member
    method: DELETE
    params: {}
- name: update_member_role
  endpoint:
    path: /org/member/role
    method: PATCH
    params: {}
- name: organizations
  endpoint:
    path: /organizations
    method: GET
    data_selector: data
    params: {}
- name: programs
  endpoint:
    path: /programs
    method: GET
    params:
      fields[organization]:
      - name
      - programs
      - targets
      fields[program]:
      - code
      - name
      - organization
      - engagements
      - submissions
      fields[submission]:
      - bug_url
      - custom_fields
      - description
      - duplicate
      - extra_info
      - http_request
      - last_transitioned_to_informational_at
      - last_transitioned_to_not_applicable_at
      - last_transitioned_to_not_reproducible_at
      - last_transitioned_to_out_of_scope_at
      - last_transitioned_to_resolved_at
      - last_transitioned_to_triaged_at
      - last_transitioned_to_unresolved_at
      - remediation_advice
      - severity
      - source
      - state
      - submitted_at
      - title
      - vrt_id
      - vrt_version
      - vulnerability_references
      - activities
      - assignees
      - claim_ticket
      - comments
      - cvss_vector
      - duplicate_of
      - duplicates
      - engagement
      - engagement_brief
      - external_issues
      - file_attachments
      - monetary_rewards
      - program
      - researcher
      - target
      fields[engagement]:
      - id
      - cancellation_reason
      - code
      - ends_at
      - expected_completed_at
      - last_transition_at
      - paused_reason
      - starts_at
      - state
      - created_at
      - updated_at
      - engagement_type
      - engagement_brief
      - bounty
      - submissions
      page[limit]: 25
      page[offset]: 0
      include:
      - organization
      - submissions
      - engagements
- name: access_invitation
  endpoint:
    path: /access_invitations
    method: GET
    data_selector: data
    params: {}
- name: activity
  endpoint:
    path: /submissions?fields[submission]=activities&include=activities&fields[activity]=key
    method: GET
    data_selector: data
    params: {}
- name: engagement
  endpoint:
    path: /engagement?
    method: GET
    data_selector: data
    params: {}
- name: payment
  endpoint:
    path: /monetary_rewards/MONETARY_REWARD_UUID?fields[monetary_reward]=payments&include=payments&fields[payment]=amount_cents
    method: GET
    data_selector: data
    params: {}
- name: reward_range
  endpoint:
    path: /programs
    method: GET
    data_selector: data
    params: {}
- name: authorization_log
  endpoint:
    path: /authorization_logs
    method: GET
    data_selector: data
    params:
      fields[authentication_log]: time,actor,action,ip_address,reason
- name: engagement
  endpoint:
    path: /engagements/{id}
    method: GET
    data_selector: data
    params: {}
- name: submission
  endpoint:
    path: /submissions
    method: GET
    data_selector: data
    params: {}
- name: activity
  endpoint:
    path: /submissions/{id}/activities
    method: GET
    data_selector: data
    params: {}
- name: authentication_log
  endpoint:
    path: /authentication_logs
    method: GET
    data_selector: data
    params:
      fields[authentication_log]:
      - time
      - actor
      - action
      - ip_address
      - reason
      page[limit]: 25
      page[offset]: 0
- name: claim_ticket
  endpoint:
    path: /claim_tickets
    method: POST
    data_selector: data
- name: comment
  endpoint:
    path: /comments
    method: POST
    data_selector: data
- name: disclosure_request
  endpoint:
    path: /disclosure_requests
    method: GET
    data_selector: data
    params: {}
- name: team
  endpoint:
    path: /teams
    method: GET
    data_selector: data
    params: {}
- name: teams
  endpoint:
    path: /api/teams
    method: GET
    data_selector: data
    params: {}
- name: submission
  endpoint:
    path: /submissions
    method: GET
    data_selector: data
    params: {}
- name: activity
  endpoint:
    path: /submissions?fields[submission]=activities&include=activities&fields[activity]=event
    method: GET
    data_selector: data
    params: {}
- name: file_attachment
  endpoint:
    path: /submissions?fields[submission]=file_attachments&include=file_attachments&fields[file_attachment]=s3_signed_url
    method: GET
    data_selector: data
    params: {}
- name: identity
  endpoint:
    path: /submissions?fields[submission]=researcher&include=researcher&fields[researcher]=name
    method: GET
    data_selector: data
    params: {}
- name: team
  endpoint:
    path: /teams/{id}
    method: GET
    data_selector: data
    params: {}
- name: delete_team
  endpoint:
    path: /teams/{id}
    method: DELETE
    data_selector: data
    params: {}
- name: monetary_reward
  endpoint:
    path: /monetary_rewards/{id}
    method: GET
    data_selector: data
    params:
      fields[monetary_reward]:
      - amount_cents
      - cancellation_comment
      - cancellation_reason
      - cancelled_at
      - comment
      - created_at
      - reason
      - rewarded_at
      - formatted_amount
      - cancelled
      - submission
      - rewarded_by
      - cancelled_by
      - payments
      include:
      - submission
      - rewarded_by
      - payments
- name: fetch_team_member
  endpoint:
    path: /fetch_team_member
    method: GET
    params:
      include: access_grants
      fields[team_member]:
      - name
      - email
      - access_grants
      page[limit]: 25
      page[offset]: 0
- name: delete_team_member
  endpoint:
    path: /delete_team_member
    method: DELETE
    params: {}
- name: create_reward
  endpoint:
    path: /rewards
    method: POST
    data_selector: data
- name: team_members
  endpoint:
    path: /api/team_members
    method: GET
    data_selector: data
    params:
      include: access_grants
      fields[team_member]:
      - name
      - email
      - access_grants
      page[limit]: 25
      page[offset]: 0
- name: create_team_role
  endpoint:
    path: /api/team_roles
    method: POST
    data_selector: data
    params: {}
- name: organization
  endpoint:
    path: /organizations/{id}
    method: GET
    data_selector: data.attributes
    params:
      fields[organization]:
      - name
      - programs
      - targets
- name: organization_members
  endpoint:
    path: /organizations/{id}/members
    method: GET
    data_selector: data
    params:
      include:
      - access_grants
      fields[organization_member]:
      - name
      - email
      - access_grants
      page[limit]: 25
      page[offset]: 0
- name: activities
  endpoint:
    path: /submissions/{id}/activities
    method: GET
    data_selector: data
    params:
      include: actor,event
      fields[submission_activity]: key,submission
      fields[identity]: name,email
      fields[submission_activity_event]: created_at,key,data
- name: delete_team_role
  endpoint:
    path: /team_roles/{role_id}
    method: DELETE
    data_selector: data
    params: {}
- name: program_roles
  endpoint:
    path: /api/program_roles
    method: GET
    data_selector: data
    params: {}
- name: blockerCreated
  endpoint:
    path: /blockerCreated
    method: POST
    data_selector: data
- name: blockerUpdated
  endpoint:
    path: /blockerUpdated
    method: POST
    data_selector: data
- name: submissionCreated
  endpoint:
    path: /api/webhooks/submissionCreated
    method: POST
    data_selector: data
- name: submissionUpdated
  endpoint:
    path: /api/webhooks/submissionUpdated
    method: POST
    data_selector: data
- name: program_role
  endpoint:
    path: /programs/{program_role_id}
    method: DELETE
    data_selector: data
    params:
      id: '{uuid}'
      program_role_id: '{uuid}'
- name: submission_activity
  endpoint:
    path: /submissions/{id}/activities
    method: GET
    data_selector: data
    params:
      fields[identity]: name,email
      fields[submission_activity]: key,submission
      fields[submission_activity_event]: created_at,key,data
- name: submission
  endpoint:
    path: /api/v1/submission
    method: GET
- name: org_member
  endpoint:
    path: /org/members
    method: GET
- name: delete_org_member
  endpoint:
    path: /org/members/{member_id}
    method: DELETE
- name: update_member_role
  endpoint:
    path: /org/members/{member_id}/role
    method: PATCH
- name: submission
  endpoint:
    path: /submissions/{id}
    method: PATCH
    data_selector: data
    params: {}
- name: organizations
  endpoint:
    path: /organizations
    method: GET
    params:
      fields[organization]:
      - name
      - programs
      - targets
      page[limit]: 25
      page[offset]: 0
- name: submissions
  endpoint:
    path: /submissions
    method: GET
    params:
      page[limit]: '25'
      page[offset]: '0'
- name: program
  endpoint:
    path: /api/programs
    method: GET
    params:
      page[limit]: 25
      page[offset]: 0
- name: access_invitation
  endpoint:
    path: /access_invitations
    method: GET
    data_selector: data
    params: {}
- name: payment
  endpoint:
    path: /monetary_rewards/MONETARY_REWARD_UUID?fields[monetary_reward]=payments&include=payments&fields[payment]=amount_cents
    method: GET
    data_selector: data
    params: {}
- name: reward_range
  endpoint:
    path: /programs
    method: GET
    data_selector: data
    params: {}
- name: engagements
  endpoint:
    path: /engagement
    method: GET
    data_selector: data
    params: {}
- name: submissions
  endpoint:
    path: /submissions
    method: GET
    data_selector: data
    params: {}
- name: claim_ticket
  endpoint:
    path: /claim_ticket
    method: POST
    data_selector: data
- name: authorization_log
  endpoint:
    path: /authorization_logs
    method: GET
    data_selector: data
    params:
      fields[authentication_log]: time,actor,action,ip_address,reason
      filter[start_date]: ''
      filter[end_date]: ''
- name: comment
  endpoint:
    path: /submissions
    method: GET
    data_selector: data
    params:
      fields[submission]: comments
      include: comments
      fields[comment]: body,author
- name: event
  endpoint:
    path: /submissions
    method: GET
    data_selector: data
    params:
      fields[submission]: activities
      include: activities
      fields[activity]: event
- name: identity
  endpoint:
    path: /submissions
    method: GET
    data_selector: data
    params:
      fields[submission]: researcher
      include: researcher
      fields[researcher]: name
- name: authentication_log
  endpoint:
    path: /authentication_logs
    method: GET
    data_selector: data
    params:
      filter[start_date]: required
      filter[end_date]: required
- name: monetary_reward
  endpoint:
    path: /monetary_rewards/{id}
    method: GET
    data_selector: data
    params:
      fields[monetary_reward]:
      - amount_cents
      - cancellation_comment
      - cancellation_reason
      - cancelled_at
      - comment
      - created_at
      - reason
      - rewarded_at
      - formatted_amount
      - cancelled
      - submission
      - rewarded_by
      - cancelled_by
      - payments
      include:
      - submission
      - rewarded_by
      - payments
- name: disclosure_request
  endpoint:
    path: /disclosure_requests
    method: GET
    data_selector: data
- name: team
  endpoint:
    path: /teams
    method: POST
    data_selector: data
- name: teams
  endpoint:
    path: /api/teams
    method: GET
    data_selector: data
    params:
      include: team_members,roles
      page[limit]: 25
      page[offset]: 0
- name: organization
  endpoint:
    path: /organizations
    method: GET
    data_selector: data
    params: {}
- name: fetch_organization
  endpoint:
    path: /organizations/{id}
    method: GET
    data_selector: data
    params: {}
- name: team
  endpoint:
    path: /teams/{id}
    method: DELETE
- name: fetch_team_member
  endpoint:
    path: /fetch/team/member
    method: GET
- name: delete_team_member
  endpoint:
    path: /delete/team/member
    method: DELETE
- name: payment
  endpoint:
    path: /monetary_rewards/MONETARY_REWARD_UUID?fields[monetary_reward]=payments&include=payments&fields[payment]=amount_cents
    method: GET
    data_selector: data
    params: {}
- name: program_brief
  endpoint:
    path: /programs?include=current_brief.target_groups.targets,current_brief.target_groups.reward_range&fields[program]=current_brief&fields[program_brief]=target_groups&fields[target_group]=targets,reward_range&fields[target]=name
    method: GET
    data_selector: data
    params: {}
- name: reward_range
  endpoint:
    path: /programs
    method: GET
    data_selector: data
    params: {}
- name: target
  endpoint:
    path: /targets
    method: GET
    data_selector: data
    params: {}
- name: team_members
  endpoint:
    path: /team_members
    method: GET
    data_selector: data
    params: {}
- name: create_team_role
  endpoint:
    path: /team_roles
    method: POST
    data_selector: data
    params: {}
- name: authentication_log
  endpoint:
    path: /authentication_logs
    method: GET
    data_selector: data
    params:
      filter[start_date]: ''
      filter[end_date]: ''
      fields[authentication_log]: ''
      filter[organization_id]: ''
      page[limit]: 25
      page[offset]: 0
- name: fetch_activities
  endpoint:
    path: /submissions/{id}/activities
    method: GET
    data_selector: data
    params:
      include: actor,event
      fields[submission_activity]: key,submission
      fields[identity]: name,email
      fields[submission_activity_event]: created_at,key,data
      page[limit]: 50
      page[offset]: 0
- name: disclosure_request
  endpoint:
    path: /disclosure_requests
    method: GET
    data_selector: data
    params: {}
- name: submissionCreated
  endpoint:
    path: /api/webhooks/submissionCreated
    method: POST
    data_selector: data
- name: submissionUpdated
  endpoint:
    path: /api/webhooks/submissionUpdated
    method: POST
    data_selector: data
- name: submissionCreated
  endpoint:
    path: /api/webhooks/submissionCreated
    method: POST
    data_selector: data
    params: {}
- name: submissionUpdated
  endpoint:
    path: /api/webhooks/submissionUpdated
    method: POST
    data_selector: data
    params: {}
- name: submission
  endpoint:
    path: /api/submission
    method: GET
    data_selector: records
- name: submission
  endpoint:
    path: /api/submission
    method: GET
    data_selector: data
- name: fetch_submission
  endpoint:
    path: /api/submission/{id}
    method: GET
    data_selector: data
- name: submission
  endpoint:
    path: /submissions
    method: POST
    data_selector: data
    params: {}
- name: update_submission
  endpoint:
    path: /submissions/{id}
    method: PATCH
    data_selector: data
    params: {}
- name: submission
  endpoint:
    path: /submissions/{id}
    method: PATCH
    data_selector: data
    params: {}
- name: submissions
  endpoint:
    path: /api/index_submissions
    method: GET
    params: {}
- name: submissions
  endpoint:
    path: /index_submissions
    method: GET
    data_selector: data
    params: {}
- name: program
  endpoint:
    path: /api/programs
    method: GET
    data_selector: data
- name: program
  endpoint:
    path: /programs
    method: GET
    data_selector: data
    params: {}
- name: submission
  endpoint:
    path: /submissions
    method: POST
    data_selector: data
    params: {}
- name: engagement
  endpoint:
    path: /engagement
    method: GET
    data_selector: data
    params: {}
- name: submission
  endpoint:
    path: /submissions
    method: GET
    data_selector: data
    params: {}
- name: activity
  endpoint:
    path: /submissions
    method: GET
    data_selector: data
    params:
      fields[submission]: activities
      include: activities
      fields[activity]: key
- name: engagement
  endpoint:
    path: /engagement
    method: GET
    data_selector: data
    params: {}
- name: claim_ticket
  endpoint:
    path: /api/claim_ticket
    method: POST
    data_selector: data
    params: {}
- name: engagements
  endpoint:
    path: /engagements
    method: GET
    data_selector: data
    params: {}
- name: engagement
  endpoint:
    path: /engagements/{id}
    method: GET
    data_selector: data
    params:
      id: string
- name: submission
  endpoint:
    path: /submissions
    method: GET
    data_selector: data
- name: comment
  endpoint:
    path: /submissions/{submission_id}/comments
    method: POST
    data_selector: data
- name: monetary_reward
  endpoint:
    path: /monetary_reward
    method: GET
    data_selector: data
    params: {}
- name: claim_ticket
  endpoint:
    path: /claim_tickets
    method: POST
    data_selector: data
- name: comment
  endpoint:
    path: /comments
    method: POST
    data_selector: data
- name: monetary_reward
  endpoint:
    path: /monetary_rewards/{id}
    method: GET
    data_selector: data
    params:
      fields[monetary_reward]:
      - amount_cents
      - cancellation_comment
      - cancellation_reason
      - cancelled_at
      - comment
      - created_at
      - reason
      - rewarded_at
      - formatted_amount
      - cancelled
      - submission
      - rewarded_by
      - cancelled_by
      - payments
      include:
      - submission
      - rewarded_by
      - payments
- name: organizations
  endpoint:
    path: /api/organizations
    method: GET
    data_selector: data
    params:
      fields[organization]: name,programs,targets
      page[offset]: 0
- name: organization
  endpoint:
    path: /api/organizations/{id}
    method: GET
    data_selector: data
    params:
      fields[organization]: name,programs,targets
- name: reward
  endpoint:
    path: /rewards
    method: POST
    data_selector: data
- name: update_reward
  endpoint:
    path: /rewards/{id}
    method: PATCH
    data_selector: data
- name: payment
  endpoint:
    path: /monetary_rewards/MONETARY_REWARD_UUID?fields[monetary_reward]=payments&include=payments&fields[payment]=amount_cents
    method: GET
    data_selector: data
- name: program_brief
  endpoint:
    path: /programs?include=current_brief.target_groups.targets,current_brief.target_groups.reward_range&fields[program]=current_brief&fields[program_brief]=target_groups&fields[target_group]=targets,reward_range&fields[target]=name
    method: GET
    data_selector: data
- name: reward_range
  endpoint:
    path: /programs
    method: GET
    data_selector: data
- name: target
  endpoint:
    path: /targets
    method: GET
    data_selector: data
- name: organization
  endpoint:
    path: /organizations/{id}
    method: GET
    data_selector: data
    params:
      fields[organization]: name,programs,targets
- name: index_organizations
  endpoint:
    path: /organizations
    method: GET
    data_selector: data
    params:
      page[limit]: 25
      page[offset]: 0
      include: programs,targets
- name: targets
  endpoint:
    path: /targets
    method: GET
    data_selector: data
    params:
      fields[organization]: name,programs,targets
      fields[target]: name,category
      page[offset]: 0
- name: authentication_log
  endpoint:
    path: /authentication_logs
    method: GET
    data_selector: data
    params:
      filter[start_date]: ''
      filter[end_date]: ''
      fields[authentication_log]: ''
      filter[organization_id]: ''
      page[limit]: ''
      page[offset]: ''
- name: submissionCreated
  endpoint:
    path: /api/webhooks/submissionCreated
    method: POST
    data_selector: data
    params: {}
- name: submissionUpdated
  endpoint:
    path: /api/webhooks/submissionUpdated
    method: POST
    data_selector: data
    params: {}
- name: disclosure_request
  endpoint:
    path: /disclosure_requests
    method: GET
    data_selector: data
- name: blockerCreated
  endpoint:
    path: /webhooks/blocker_created
    method: POST
    data_selector: data
- name: blockerUpdated
  endpoint:
    path: /webhooks/blocker_updated
    method: POST
    data_selector: data
- name: submission
  endpoint:
    path: /api/submissions
    method: GET
    data_selector: data
    params: {}
- name: submissionCreated
  endpoint:
    path: /api/webhooks/submissionCreated
    method: POST
    data_selector: data
- name: submissionUpdated
  endpoint:
    path: /api/webhooks/submissionUpdated
    method: POST
    data_selector: data
- name: submission
  endpoint:
    path: /submissions
    method: POST
    data_selector: data
    params: {}
- name: update_submission
  endpoint:
    path: /submissions/{id}
    method: PATCH
    data_selector: data
    params: {}
- name: submission
  endpoint:
    path: /api/getting-started
    method: GET
- name: submissions
  endpoint:
    path: /index_submissions
    method: GET
    data_selector: data
    params:
      filter:
        assignee: ''
        blocked_by: ''
        duplicate: ''
        payments: ''
        points: ''
        program: ''
        researcher: ''
        retest: ''
        search: ''
        severity: ''
        source: ''
        state: ''
        submitted: ''
        target: ''
        target_type: ''
        updated: ''
        vrt: ''
      sort: []
- name: submission
  endpoint:
    path: /submissions/{id}
    method: PATCH
    data_selector: data
    params:
      id: string
- name: targets
  endpoint:
    path: /targets
    method: GET
    data_selector: data
    params: {}
- name: submissions
  endpoint:
    path: /api/submissions
    method: POST
    data_selector: data
- name: programs
  endpoint:
    path: /api/programs
    method: GET
    data_selector: data
- name: submissions
  endpoint:
    path: /index/submissions
    method: GET
    data_selector: data
    params: {}
- name: claim_ticket
  endpoint:
    path: /claim_tickets
    method: POST
    data_selector: data
- name: program
  endpoint:
    path: /programs
    method: GET
    data_selector: data
    params: {}
- name: submission
  endpoint:
    path: /submissions
    method: POST
    data_selector: data
    params: {}
- name: submission_comments
  endpoint:
    path: /submissions
    method: GET
    data_selector: data
    params:
      fields[submission]: comments
      include: comments
      fields[comment]: body,author
- name: event
  endpoint:
    path: /submissions
    method: GET
    data_selector: data
    params:
      fields[submission]: activities
      include: activities
      fields[activity]: event
- name: submission
  endpoint:
    path: /submissions
    method: GET
    data_selector: data
    params:
      fields[submission]: activities
      include: activities
- name: activity
  endpoint:
    path: /activities
    method: GET
    data_selector: data
- name: engagements
  endpoint:
    path: /engagements
    method: GET
    data_selector: data
    params:
      page[limit]: 25
      page[offset]: 0
- name: fetch_engagement
  endpoint:
    path: /engagements/{id}
    method: GET
    data_selector: data
    params: {}
- name: file_attachment
  endpoint:
    path: /submissions
    method: GET
    data_selector: file_attachments
    params:
      fields[submission]: file_attachments
      include: file_attachments
      fields[file_attachment]: s3_signed_url
- name: identity
  endpoint:
    path: /submissions
    method: GET
    data_selector: researcher
    params:
      fields[submission]: researcher
      include: researcher
      fields[researcher]: name
- name: monetary_reward
  endpoint:
    path: /monetary_rewards/{id}
    method: GET
    data_selector: monetary_reward
    params: {}
- name: organization
  endpoint:
    path: /organizations/{id}
    method: GET
    data_selector: data
    params:
      fields[organization]:
      - name
      - programs
      - targets
      include:
      - programs
      - targets
- name: claim_ticket
  endpoint:
    path: /claim_tickets
    method: POST
    data_selector: data
    params: {}
- name: comment
  endpoint:
    path: /comments
    method: POST
    data_selector: data
    params: {}
- name: monetary_reward
  endpoint:
    path: /monetary_rewards/{id}
    method: GET
    data_selector: data
    params:
      fields[identity]: name,email,staff
      fields[monetary_reward]: amount_cents,cancellation_comment,cancellation_reason,cancelled_at,comment,created_at,reason,rewarded_at,formatted_amount,cancelled,submission,rewarded_by,cancelled_by,payments
      include: submission,rewarded_by,payments
- name: organizations
  endpoint:
    path: /organizations
    method: GET
    data_selector: data
    params:
      fields[organization]: name,programs
      page[limit]: 50
      page[offset]: 0
- name: payments
  endpoint:
    path: /monetary_rewards/MONETARY_REWARD_UUID
    method: GET
    data_selector: data
    params:
      fields[monetary_reward]: payments
      include: payments
      fields[payment]: amount_cents
- name: targets
  endpoint:
    path: /targets
    method: GET
    data_selector: data
    params:
      fields[organization]: name,programs
      fields[target]: name,category
- name: programs
  endpoint:
    path: /programs
    method: GET
    data_selector: data
    params: {}
- name: organization
  endpoint:
    path: /organizations/{id}
    method: GET
    data_selector: data
    params: {}
- name: index_organizations
  endpoint:
    path: /organizations
    method: GET
    data_selector: data
    params:
      page[limit]: 25
      page[offset]: 0
- name: submissionUpdated
  endpoint:
    path: /webhooks/submissionUpdated
    method: POST
    data_selector: data
- name: submissionCreated
  endpoint:
    path: /webhooks/submissionCreated
    method: POST
    data_selector: data
- name: targets
  endpoint:
    path: /targets
    method: GET
    data_selector: data
    params:
      fields[organization]: name,programs
      fields[target]: name,category
- name: submission_updated
  endpoint:
    path: /webhooks/submissionUpdated
    method: POST
    data_selector: data
- name: submissionCreated
  endpoint:
    method: POST
    data_selector: data
- name: submissionUpdated
  endpoint:
    method: POST
    data_selector: data
- name: submission
  endpoint:
    path: /api/getting-started
    method: GET
    data_selector: submission
    params: {}
- name: submission
  endpoint:
    path: /submissions/{id}
    method: PATCH
    data_selector: data
    params: {}
- name: submission
  endpoint:
    path: /submissions
    method: GET
    data_selector: data
- name: program
  endpoint:
    path: /api/programs
    method: GET
    data_selector: data
    params: {}
- name: submission
  endpoint:
    path: /api/submissions
    method: POST
    data_selector: data
    params: {}
- name: claim_ticket
  endpoint:
    path: /claim_ticket
    method: POST
    data_selector: data
- name: submissions
  endpoint:
    path: /submissions
    method: GET
    data_selector: data
    params: {}
- name: file_attachment
  endpoint:
    path: /submissions
    method: GET
    data_selector: file_attachments
    params:
      fields[submission]: file_attachments
      include: file_attachments
      fields[file_attachment]: s3_signed_url
- name: identity
  endpoint:
    path: /submissions
    method: GET
    data_selector: researcher
    params:
      fields[submission]: researcher
      include: researcher
      fields[researcher]: name
- name: monetary_reward
  endpoint:
    path: /monetary_rewards
    method: GET
    data_selector: monetary_reward
    params:
      fields[monetary_reward]: amount_cents,cancellation_comment,cancellation_reason,cancelled_at,comment,created_at,reason,rewarded_at,formatted_amount,cancelled,submission,rewarded_by,cancelled_by,payments
      include: submission,rewarded_by,payments
- name: organization
  endpoint:
    path: /organizations/{id}
    method: GET
    data_selector: data
    params:
      fields[organization]: name,programs,targets
      include: programs,targets
- name: organizations
  endpoint:
    path: /organizations
    method: GET
    data_selector: data
    params:
      fields[organization]: name,programs
      page[limit]: 25
      page[offset]: 0
- name: payments
  endpoint:
    path: /monetary_rewards/MONETARY_REWARD_UUID
    method: GET
    data_selector: attributes
    params:
      fields[monetary_reward]: payments
      include: payments
- name: program_brief
  endpoint:
    path: /programs
    method: GET
    data_selector: data
    params: {}
- name: reward_range
  endpoint:
    path: /programs
    method: GET
    data_selector: data
    params: {}
- name: target
  endpoint:
    path: /targets
    method: GET
    data_selector: data
    params: {}
- name: target_group
  endpoint:
    path: /target_groups
    method: GET
    data_selector: data
    params: {}
- name: submissionUpdated
  endpoint:
    path: /api/webhooks/submissionUpdated
    method: POST
    data_selector: data
- name: submissionCreated
  endpoint:
    path: /api/webhooks/submissionCreated
    method: POST
    data_selector: data
- name: submission
  endpoint:
    path: /api/webhooks/submissionUpdated
    method: POST
    data_selector: data
    params: {}
notes:
- The consumer should return an empty 200 status response to indicate that the data
  was received successfully.
- The request header used to test new API versions before updating the pinned account
  version.
- The 200 response should be returned as soon as possible, processing the webhook
  delivery should happen asynchronously.
- Responses are returned as soon as possible, processing the webhook delivery happens
  asynchronously.
- API responses are in application/vnd.bugcrowd.v4+json format.
- Use the Search icon to find documentation topics.
- To stay up to date on Crowdcontrol updates, please view the Customer Changelog.
- Subscribe to customer specific updates at https://docs.bugcrowd.com/feed/changelogs/customer.xml
- Requires setup of connected app in Bugcrowd
- The request header used to test new API versions is 'Bugcrowd-Version'.
- If you cannot find the answer to your question in the Bugcrowd documentation, submit
  a support ticket through the Bugcrowd Support Portal.
- Webhooks for the blocker resource
- 'A header for validating the request is required: X-Bugcrowd-Digest'
- Payload structure includes attributes such as created_at and key
- Relationships include actor and resource
- Bugcrowd limits API requests to 60 requests per minute per IP Address.
- If an API endpoint is called from an IP address not added to an Allowlist, then
  it will be rejected.
- The media type of the Bugcrowd API for the current request is application/vnd.bugcrowd.v4+json
- Returns a single submission by UUID
- Slack integration is now available
- Some API resources may require specific permissions to access.
- Update submission requires a valid UUID as path parameter.
- Some responses may contain nulls in nested fields
- This is Bugcrowd's primary REST API and follows the JSON API specification.
- Returns a filtered list of submissions based on tokenized search and sort parameters.
- Uses OAuth2 with refresh token — requires setup of connected app in api
- Manage organization members, invitations and program roles requires organization
  Owner or Admin level access.
- Processing the webhook delivery should happen asynchronously.
- Rate limits apply to API calls.
- 200 response should be returned as soon as possible, processing the webhook delivery
  should happen asynchronously.
- The media type of the Bugcrowd API for the current request is application/vnd.bugcrowd.v4+json.
- Manage organization members, invitations and program roles requires organization
  Owner or Admin level access
- The API supports pagination with a limit of 100.
- Returns a list of organizations belonging to the user.
- Returns 200 status response to confirm successful data reception.
- Responses should be returned as soon as possible, processing the webhook delivery
  should happen asynchronously.
- Returns a list authentication logs for the organization.
- A header for validating the request is required.
- The Activity feed can be multiple pages, and each page displays fifty activities
  at a time.
- The Bugcrowd Platform employs a flexible and efficient approach to Security Program
  Management.
- Submissions are created by an Engagement, but reside at the Security Program.
- Running a Security Program requires consideration of various components and configurations.
- Import all known issues into Crowdcontrol using a properly formatted CSV file.
- X-Bugcrowd-Digest required as a header for validating the request
- Some responses may contain nested nulls
- Uses OAuth2 with refresh token — requires setup of connected app in Bugcrowd
- Some objects like Contact may return nulls in deeply nested fields
- Customers usually do not need to review submissions in the New state.
- Do not move a submission from Unresolved into Resolved until it is truly fixed.
- Strong partnerships with Researchers is one of the key factors that contributes
  to the success and health of a customer’s Security Program.
- The Security Program defines the scope, teams, SDLC integrations, reward pool and
  credentials.
- Each Engagement in the Security Program can inherit these resources.
- Set-and-forget is not applicable to a successful program.
- Relationships with researchers, ASEs, and success teams are critical.
- Running a Security Program requires ongoing attention.
- It is important to have internal processes for timely processing and remediation
  of found issues.
- Once an engagement is transitioned to Canceling, it cannot be reversed.
- Ensure to configure your OAuth settings correctly.
- The maximum number of root records that can be returned is 100.
- API requests are limited to 60 requests per minute per IP Address.
- Make sure that your API token uses version 2021-10-28 or later to receive the event
  data attribute.
- The API follows the JSON API specification.
- Accept triaged submissions within five days of being moved to Triaged by the Bugcrowd
  team.
- If you expect it to take longer than one week for a submission to be accepted, please
  leave a status update in the form of a comment to the researcher.
- Engagement Brief must clearly outline expectations.
- The page[offset] limitation has been removed as of version 2025-04-23.
- Transitioning from a date-based versioning system to a semantic versioning system.
- Current API customers will be automatically transitioned to the major version V1.
- The API responds with a 200 status for successful requests.
- Consumer should return a 200 status response as soon as possible.
- The API requires a valid UUID format for submission IDs.
- Uses token authentication.
- The API supports pagination.
- The API requires authorization via tokenAuth
- Manage teams and members requires organization Owner or Admin level access
- The API uses UUID for unique identifiers.
- Responses include various attributes specific to each resource type.
- X-Bugcrowd-Digest required for validating the request
- The API supports pagination by offset.
- Responses are asynchronous and should return a 200 status quickly.
- API versioning is in place with specific version headers.
- The 200 response should be returned as soon as possible.
- The request header used to test new API versions before updating the pinned account
  version
- Returns a 200 status response to indicate that the data was received successfully.
- Uses token-based authentication
- Asynchronous processing for submission updates
- Uses OAuth2 with token authentication — requires setup of Bugcrowd API credentials.
- The media type of the Bugcrowd API for the current request is specified in the headers.
- Token-based authentication is required for all requests.
- Responses should return a 200 status to indicate successful reception of data
- The API requires valid UUIDs for certain parameters.
- Processing the webhook delivery happens asynchronously.
- The request header used to test new API versions before updating the pinned account
  version is Bugcrowd-Version.
- Responses should return an empty 200 status response
- Follow the JSON API specification.
- The request header used to test new API versions before updating the pinned account
  version is 'Bugcrowd-Version'.
- The activity resource describes a historic action on a resource.
- The engagement resource defines a pipe to receive submissions.
- A claim_ticket represents an ability for someone to claim a submission as theirs.
- Requires setup of token authentication.
- The API requires token authentication.
- Returns a list of authentication logs for the organization.
- Returns a single monetary reward by UUID.
- API supports pagination with default page size.
- Requires a valid token for authorization.
- Returns a single organization by UUID.
- Payload structure includes 'data', 'relationships', and 'included' fields
- The CVSS calculator is enabled on a program, submissions in that program will have
  a cvss_vector relationship.
- Some endpoints provide nested relationships using a dot in between.
errors:
- '400: Bad Request'
- '404: Not Found'
- '200: The consumer should return an empty status response to indicate that the data
  was received successfully.'
- '400 Bad Request: Check request body format and required fields'
- '404 Not Found: Verify the endpoint and resource identifiers'
- '400 Bad Request: Invalid request format or parameters.'
- '404 Not Found: The requested resource could not be found.'
- '400 Bad Request: Check the request parameters.'
- '404 Not Found: Verify the endpoint and resource ID.'
- '200: The consumer should return an empty 200 status response to indicate that the
  data was received successfully.'
- '400: Invalid request'
- '404: Not found'
- '200: Successful response'
- '400: Bad request'
- '401 Unauthorized: Check OAuth tokens and scopes'
- '429 Too Many Requests: Rate limit exceeded'
- '400: Bad Request - The request is invalid.'
- '404: Not Found - The requested resource could not be found.'
- 'REQUEST_LIMIT_EXCEEDED: Throttle API calls or reduce frequency'
- '400 Bad Request: Check the request parameters'
- '404 Not Found: Submission not found'
- '401 Unauthorized: Recheck OAuth scopes or token expiration'
- '401 Unauthorized: Check your credentials or token expiration.'
- '403 Forbidden: You do not have permission to access this resource.'
- '400: Bad Request - Invalid UUID or request body.'
- '404: Not Found - Submission not found.'
- 'QUERY_TIMEOUT: Break down filters or add selectivity'
- '400 Bad Request: Invalid request format'
- '404 Not Found: Resource not found'
- '404: Resource not found'
- '400 Bad Request: The request is invalid.'
- '404 Not Found: The specified resource could not be found.'
- '200: Data received successfully'
- '401: Unauthorized'
- '400 Bad Request: Check request parameters'
- '500 Internal Server Error: Retry the request'
- '400 Bad Request: Invalid request body'
- '200: Successful data reception'
- '400 Bad Request: Check the request parameters and formats'
- '404 Not Found: Verify the resource ID'
- '400 Bad Request: Check request format and required fields.'
- '400 Bad Request: Verify request parameters'
- '404 Not Found: Ensure the resource exists'
- '400 Bad Request: Check the request parameters and format'
- '404 Not Found: The requested resource could not be found'
- '400 Bad Request: Check request format or parameters'
- '404 Not Found: Verify the endpoint or resource ID'
- '200: Data received successfully.'
- '400: Bad request.'
- '404: Resource not found.'
- '400: Bad Request - Check request parameters.'
- '404: Not Found - Verify endpoint and resource.'
- '400 Bad Request: Invalid request parameters'
- '400 Bad Request: Check the request body schema.'
- '404 Not Found: Ensure the endpoint path is correct.'
- '200: The consumer should return an empty 200 status response to indicate that the
  data was received successfully'
- '400 Bad Request: Check request body and parameters'
- '404 Not Found: Ensure resource ID is correct'
- '200: Successful request'
- '401: Unauthorized access'
- '404 Not Found: Verify the endpoint and resource ID'
- '400 Bad Request: Check the request format or parameters'
- '404 Not Found: Verify the resource ID or endpoint'
- '400: Invalid request parameters'
- '404: Submission not found'
- '400 Bad Request: Check your request parameters.'
- '404 Not Found: Verify the resource ID.'
- '200: Data was received successfully'
- '400 Bad Request: Invalid or missing parameters'
- '400 Bad Request: Check query parameters'
- '404 Not Found: Ensure resource exists'
- '400 Bad Request: Invalid request parameters.'
- '404 Not Found: Resource not found.'
- '200: Indicates successful receipt of data.'
- '400: Bad Request - The request was invalid.'
- '404: Not Found - The resource could not be found.'
- '400 Bad Request: Invalid request format or parameters'
- '400 Bad Request: Check request format or parameters.'
- '404 Not Found: Resource does not exist.'
- '500 Internal Server Error: Try again later.'
- '200: The data was received successfully.'
- '200: Successfully received data'
- 400 Bad Request
- 404 Not Found
- '400 Bad Request: Check the request parameters and payload.'
- '404 Not Found: Ensure the endpoint and resource id are correct.'
- '400 Bad Request: Check request format.'
- '400: Invalid request, check your parameters'
- '404: Engagement not found'
- '400 Bad Request: Check the request payload format'
- '404 Not Found: Verify the endpoint path'
- '400 Bad Request: Invalid request body or parameters.'
- '500 Internal Server Error: An unexpected error occurred.'
- '404 Not Found: Resource does not exist'
- '400 Bad Request: Ensure the request body is valid'
- '404 Not Found: Check the endpoint URL'
- '400 Bad Request: Check request body and headers'
- '404 Not Found: Verify endpoint and resource ID'
- '500 Internal Server Error: Retry the request later'
- '400 Bad Request: Invalid query parameters'
- '404 Not Found: The specified resource does not exist.'
- '400 Bad Request: Check the request parameters and body.'
- '404 Not Found: Verify the endpoint and resource identifiers.'
- '400 Bad Request: Check the query parameters for validity'
- '404 Not Found: The requested resource does not exist'
- '400 Bad Request: Check the request payload for correctness'
- '404 Not Found: Ensure the endpoint is correct'
- '400 Bad Request: Check the request parameters and payload format.'
- '404 Not Found: Ensure the resource ID is valid.'
- '400 Bad Request: Check your request format or parameters'
- '400 Bad Request: Check the request body for required fields.'
- '404 Not Found: Ensure the endpoint and parameters are correct.'
- '200: Indicate that the data was received successfully'
- '400 Bad Request: Check your request body and parameters'
- '404 Not Found: Ensure the endpoint exists'
- '400 Bad Request: The request could not be understood or was missing required parameters.'
- '400 Bad Request: Check the request format and body.'
- '404 Not Found: Verify the resource exists.'
- '404: Not found.'
- '400: Bad Request — Check the request parameters and their values.'
- '404: Not Found — The requested resource was not found.'
- '401: Unauthorized — Authentication token is missing or invalid.'
- '400 Bad Request: Check your request payload for errors.'
- '404 Not Found: Ensure the resource ID is correct.'
- '400 Bad Request: Check request parameters and body format'
- '404 Not Found: Verify endpoint path and resource existence'
- '400 Bad Request: Check the request format and required fields'
- '404 Not Found: Verify resource ID'
- '400 Bad Request: Check the request payload format.'
- '404 Not Found: Verify the endpoint path.'
- '400 Bad Request: Check request body for validation errors'
- '404 Not Found: Check endpoint or resource ID'
- '400 Bad Request: Check your request body or parameters.'
- '404 Not Found: Resource could not be found.'
- '400 Bad Request: Check the request format or parameters.'
- '404 Not Found: The specified resource ID does not exist.'
- '404: Not Found - Resource does not exist.'
- '401: Unauthorized - Token is missing or invalid.'
- '404 Not Found: Verify the UUID of the resource.'
- '400 Bad Request: Check request body format or required fields'
- '400 Bad Request: Check the request format and parameters'
- '404 Not Found: Ensure the requested resource exists'
- '400: Invalid request format'
- '404: Organization not found'
auth_info:
  mentioned_objects:
  - WebhookSubmissionCreatedEvent
  - WebhookSubmissionUpdatedEvent
  - tokenAuth
  - OauthToken
  - AuthProvider
  - NamedCredential
  - identity
  - submission
  - event
  - file_attachment
client:
  base_url: https://api.bugcrowd.com
  auth:
    type: tokenAuth
  headers:
    Bugcrowd-Version: '2024-02-12'
  paginator:
    type: offset
    page_size_param: page[limit]
    default_page_size: 25
    cursor_param: page[offset]
source_metadata: null
