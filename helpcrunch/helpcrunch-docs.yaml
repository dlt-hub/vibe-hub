resources:
- name: custom_email_domains
  endpoint:
    path: /settings/team/custom_email_domains
    method: GET
    data_selector: domains
    params: {}
- name: custom_email_domains
  endpoint:
    path: /custom_email_domains
    method: GET
    data_selector: domains
    params: {}
- name: default_roles
  endpoint:
    path: /roles/default
    method: GET
    data_selector: roles
    params: {}
- name: custom_roles
  endpoint:
    path: /roles/custom
    method: GET
    data_selector: roles
    params: {}
- name: subscription
  endpoint:
    path: /settings/subscription
    method: GET
    data_selector: subscription_details
    params: {}
- name: billing_details
  endpoint:
    path: /settings/billing_details
    method: GET
    data_selector: billing_info
    params: {}
- name: invoices
  endpoint:
    path: /settings/invoices
    method: GET
    data_selector: invoice_list
    params: {}
- name: HelpCrunch WordPress plugin
  endpoint:
    path: /wordpress/plugins/helpcrunch-live-chat
    method: GET
    data_selector: plugin_data
- name: website_widget
  endpoint:
    path: /settings/website_widgets
    method: POST
    data_selector: widget_code
- name: installation_guide
  endpoint:
    path: /installation/helpcrunch-installation-guide-opencart
    method: GET
- name: chat_rating
  endpoint:
    path: /chat/rating
    method: GET
    data_selector: ratings
    params: {}
- name: chat_status
  endpoint:
    path: /rest-api-v1/update-chat-status-v1
    method: POST
    data_selector: status
    params: {}
- name: pre_chat_form
  endpoint:
    path: /settings/website_widgets/pre_chat_form
    method: GET
    data_selector: forms
    params: {}
- name: offline_form
  endpoint:
    path: /settings/website_widgets/offline_form
    method: GET
    data_selector: forms
    params: {}
- name: chat_rating
  endpoint:
    path: /chat/rating
    method: GET
    data_selector: ratings
    params: {}
- name: chat_status
  endpoint:
    path: /update-chat-status-v1
    method: POST
- name: Knowledge Base
  endpoint:
    path: /knowledge-base
    method: GET
- name: Custom Answers
  endpoint:
    path: /custom-answers
    method: GET
- name: unseen_chat_messages
  endpoint:
    path: /settings/automations/unseen_chats
    method: GET
    data_selector: notifications
    params: {}
- name: proactive_chat_auto_messages
  endpoint:
    path: /auto-and-manual-messages/create-a-new-auto-message
    method: GET
- name: contacts
  endpoint:
    path: /api/v1/contacts
    method: POST
    data_selector: contacts
- name: chatbot_flow
  endpoint:
    path: /api/v1/chatbot/flows
    method: POST
    data_selector: flow
- name: CloudFront
  endpoint:
    path: /create-distribution
    method: POST
    data_selector: distribution
    params:
      origin_domain: yourdomain.crunch.help
      protocol: HTTPS only
- name: Route53
  endpoint:
    path: /create-record
    method: POST
    data_selector: record
    params:
      record_name: help
      record_type: A
      route_traffic: Alias
- name: proactive_chat_auto_messages
  endpoint:
    path: /auto-messages/proactive
    method: POST
    data_selector: messages
    params: {}
- name: export_report_data
  endpoint:
    path: /reports/export
    method: POST
    data_selector: data
    params: {}
- name: manual_messages
  endpoint:
    path: /api/manual_messages
    method: POST
    data_selector: data
    params: {}
- name: New Chat Created
- name: Chat Assignee Updated
- name: Chat Status Updated
- name: Chat Closed
- name: New Customer Created
- name: Customer Email Updated
- name: Customer Tags Updated
- name: Customer Unsubscribed
- name: Create Customer
- name: Find Customer
- name: CloudFront
  endpoint:
    path: /create-distribution
    method: POST
- name: Route 53
  endpoint:
    path: /create-record
    method: POST
- name: viber_bot
  endpoint:
    path: /viber/bot
    method: POST
    data_selector: data
    params: {}
- name: chat
  endpoint:
    path: /chats/new
    method: GET
- name: contacts
  endpoint:
    path: /contacts
    method: GET
- name: report_data
  endpoint:
    path: /reports/export
    method: POST
    data_selector: data
    params: {}
- name: cookies
  endpoint:
    path: /cookies
    method: GET
    data_selector: cookies
- name: New Chat Created
  endpoint:
    method: POST
- name: Chat Assignee Updated
  endpoint:
    method: POST
- name: Chat Status Updated
  endpoint:
    method: POST
- name: Chat Closed
  endpoint:
    method: POST
- name: New Customer Created
  endpoint:
    method: POST
- name: Customer Email Updated
  endpoint:
    method: POST
- name: Customer Tags Updated
  endpoint:
    method: POST
- name: Customer Unsubscribed
  endpoint:
    method: POST
- name: Create Customer
  endpoint:
    method: POST
- name: Find Customer
  endpoint:
    method: GET
- name: chat
  endpoint:
    path: /api/chat
    method: GET
    data_selector: records
    params: {}
- name: user_authentication
  endpoint:
    path: /user/authentication
    method: POST
    data_selector: user
    params: {}
- name: helpcrunch_widget
  endpoint:
    path: /widget
    method: GET
    data_selector: widgetData
- name: viber_bot
  endpoint:
    path: /viber/bot
    method: POST
- name: onReady
  endpoint:
    path: onReady
    method: GET
- name: onScriptLoaded
  endpoint:
    path: onScriptLoaded
    method: GET
- name: onChatOpen
  endpoint:
    path: onChatOpen
    method: GET
- name: onChatClose
  endpoint:
    path: onChatClose
    method: GET
- name: onCustomerMessage
  endpoint:
    path: onCustomerMessage
    method: GET
- name: onAgentMessage
  endpoint:
    path: onAgentMessage
    method: GET
- name: onNewUnreadChat
  endpoint:
    path: onNewUnreadChat
    method: GET
- name: onPreChatFormSubmit
  endpoint:
    path: onPreChatFormSubmit
    method: GET
- name: onError
  endpoint:
    path: onError
    method: GET
- name: typeUserMessage
  endpoint:
    path: /developers/methods#typeUserMessage
- name: openChat
  endpoint:
    path: /developers/methods#openchat
- name: showChatWidget
  endpoint:
    path: /developers/methods#showchatwidget
    method: GET
- name: hideChatWidget
  endpoint:
    path: /developers/methods#hidechatwidget
    method: GET
- name: openChat
  endpoint:
    path: /developers/methods#openchat
    method: GET
- name: openChatById
  endpoint:
    path: /developers/methods#openChatById
    method: GET
- name: closeChat
  endpoint:
    path: /developers/methods#closechat
    method: GET
- name: init
  endpoint:
    path: /developers/methods#init
    method: GET
- name: updateUser
  endpoint:
    path: /developers/methods#updateuser
    method: GET
- name: userAuth
  endpoint:
    path: /developers/methods#userauth
    method: GET
- name: updateUserData
  endpoint:
    path: /developers/methods#updateuserdata
    method: GET
- name: trackEvent
  endpoint:
    path: /developers/methods#trackevent
    method: GET
- name: setLocalization
  endpoint:
    path: /developers/methods#setLocalization
    method: GET
- name: sendProactiveChatAutoMessage
  endpoint:
    path: /developers/methods#sendproactivechatautomessage
    method: GET
- name: sendUserMessage
  endpoint:
    path: /developers/methods#sendusermessage
    method: GET
- name: typeUserMessage
  endpoint:
    path: /developers/methods#typeUserMessage
    method: GET
- name: logout
  endpoint:
    path: /developers/methods#logout
    method: GET
- name: muteNotificationSound
  endpoint:
    path: /developers/methods#muteNotificationSound
    method: GET
- name: setChatButtonOffset
  endpoint:
    path: /developers/methods#setChatButtonOffset
    method: GET
- name: setOperatingHours
  endpoint:
    path: setOperatingHours
    method: POST
    data_selector: hours
    params: {}
- name: openKBArticle
  endpoint:
    path: openKBArticle
    method: POST
    data_selector: articleId
    params: {}
- name: setMediaCSS
  endpoint:
    path: setMediaCSS
    method: POST
    data_selector: maxWidth
    params: {}
- name: setWidgetColor
  endpoint:
    path: setWidgetColor
    method: POST
    data_selector: widgetColor
    params: {}
- name: setWidgetLogo
  endpoint:
    path: setWidgetLogo
    method: POST
    data_selector: widgetLogo
    params: {}
- name: user_authentication
  endpoint:
    path: /api/user/authenticate
    method: POST
    data_selector: user
    params: {}
- name: localization
  endpoint:
    path: /localization
    method: POST
    data_selector: localizations
    params: {}
- name: widget_settings
  endpoint:
    path: /developers/ways-to-init-chat
    method: GET
    data_selector: widget_settings
- name: track_event
  endpoint:
    path: /trackEvent
    method: POST
    data_selector: event_data
    params: {}
- name: updateUser
  endpoint:
    path: /updateUser
    method: POST
    data_selector: user
    params: {}
- name: updateUserData
  endpoint:
    path: /updateUserData
    method: POST
    data_selector: userData
    params: {}
- name: user
  endpoint:
    path: /api/v1/user
    method: POST
    data_selector: user
    params: {}
- name: customer
  endpoint:
    path: /get-customers-v1
    method: GET
- name: chat
  endpoint:
    path: /get-chats-v1
    method: GET
- name: message
  endpoint:
    path: /get-messages-v1
    method: GET
- name: agent
  endpoint:
    path: /get-agents-v1
    method: GET
- name: department
  endpoint:
    path: /get-departments-v1
    method: GET
- name: application
  endpoint:
    path: /get-applications-v1
    method: GET
- name: organization
  endpoint:
    path: /get-organization-v1
    method: GET
- name: onReady
  endpoint:
    path: /onReady
    method: GET
    data_selector: callback
- name: onScriptLoaded
  endpoint:
    path: /onScriptLoaded
    method: GET
    data_selector: callback
- name: onChatOpen
  endpoint:
    path: /onChatOpen
    method: GET
    data_selector: callback
- name: onChatClose
  endpoint:
    path: /onChatClose
    method: GET
    data_selector: callback
- name: onCustomerMessage
  endpoint:
    path: /onCustomerMessage
    method: GET
    data_selector: callback
- name: onAgentMessage
  endpoint:
    path: /onAgentMessage
    method: GET
    data_selector: callback
- name: onNewUnreadChat
  endpoint:
    path: /onNewUnreadChat
    method: GET
    data_selector: callback
- name: onPreChatFormSubmit
  endpoint:
    path: /onPreChatFormSubmit
    method: GET
    data_selector: callback
- name: onError
  endpoint:
    path: /onError
    method: GET
    data_selector: callback
- name: customer
  endpoint:
    path: /customers
    method: GET
- name: chat
  endpoint:
    path: /chats
    method: GET
- name: message
  endpoint:
    path: /messages
    method: GET
- name: agent
  endpoint:
    path: /agents
    method: GET
- name: department
  endpoint:
    path: /departments
    method: GET
- name: application
  endpoint:
    path: /applications
    method: GET
- name: showChatWidget
  endpoint:
    path: /showChatWidget
    method: GET
    data_selector: ''
    params: {}
- name: hideChatWidget
  endpoint:
    path: /hideChatWidget
    method: GET
    data_selector: ''
    params: {}
- name: openChat
  endpoint:
    path: /openChat
    method: GET
    data_selector: ''
    params: {}
- name: openChatById
  endpoint:
    path: /openChatById
    method: GET
    data_selector: ''
    params: {}
- name: closeChat
  endpoint:
    path: /closeChat
    method: GET
    data_selector: ''
    params: {}
- name: init
  endpoint:
    path: /init
    method: GET
    data_selector: ''
    params: {}
- name: updateUser
  endpoint:
    path: /updateUser
    method: GET
    data_selector: ''
    params: {}
- name: userAuth
  endpoint:
    path: /userAuth
    method: GET
    data_selector: ''
    params: {}
- name: updateUserData
  endpoint:
    path: /updateUserData
    method: GET
    data_selector: ''
    params: {}
- name: trackEvent
  endpoint:
    path: /trackEvent
    method: GET
    data_selector: ''
    params: {}
- name: setLocalization
  endpoint:
    path: /setLocalization
    method: GET
    data_selector: ''
    params: {}
- name: sendProactiveChatAutoMessage
  endpoint:
    path: /sendProactiveChatAutoMessage
    method: GET
    data_selector: ''
    params: {}
- name: sendUserMessage
  endpoint:
    path: /sendUserMessage
    method: GET
    data_selector: ''
    params: {}
- name: typeUserMessage
  endpoint:
    path: /typeUserMessage
    method: GET
    data_selector: ''
    params: {}
- name: logout
  endpoint:
    path: /logout
    method: GET
    data_selector: ''
    params: {}
- name: muteNotificationSound
  endpoint:
    path: /muteNotificationSound
    method: GET
    data_selector: ''
    params: {}
- name: setChatButtonOffset
  endpoint:
    path: /setChatButtonOffset
    method: GET
    data_selector: ''
    params: {}
- name: contact
  endpoint:
    path: /rest-api-1/otrymaty-vsi-kontakty
    method: GET
    data_selector: records
- name: chat
  endpoint:
    path: /rest-api-1/otrymaty-vsi-chaty
    method: GET
    data_selector: records
- name: setOperatingHours
  endpoint:
    path: /setOperatingHours
    method: POST
    data_selector: hours
    params: {}
- name: openKBArticle
  endpoint:
    path: /openKBArticle
    method: POST
    data_selector: articleId
    params: {}
- name: setMediaCSS
  endpoint:
    path: /setMediaCSS
    method: POST
    data_selector: maxWidth
    params: {}
- name: setWidgetColor
  endpoint:
    path: /setWidgetColor
    method: POST
    data_selector: widgetColor
    params: {}
- name: setWidgetLogo
  endpoint:
    path: /setWidgetLogo
    method: POST
    data_selector: widgetLogo
    params: {}
- name: customer
  endpoint:
    path: /rest-api-v1/customer-model-v1
    method: GET
    data_selector: records
- name: proactive_chat_auto_message
  endpoint:
    path: /sendProactiveChatAutoMessage
    method: POST
    data_selector: response
    params: {}
- name: customer
  endpoint:
    path: /customers/<customer_id>
    method: GET
- name: customers
  endpoint:
    path: /customers
    method: GET
    data_selector: data
    params:
      offset: 0
      limit: 100
- name: track_event
  endpoint:
    path: /trackEvent
    method: POST
    data_selector: event_data
- name: search_customers
  endpoint:
    path: /customers/search
    method: POST
    data_selector: data
    params: {}
- name: updateUser
  endpoint:
    path: /updateUser
    method: POST
    data_selector: user
    params: {}
- name: updateUserData
  endpoint:
    path: /updateUserData
    method: POST
    data_selector: userData
    params: {}
- name: untag_customer
  endpoint:
    path: /customers/<customer_id>/tags
    method: DELETE
- name: widget
  endpoint:
    path: /developers/displaying-the-chat-widget-on-your-site
    method: GET
    data_selector: widget
- name: tag_customer
  endpoint:
    path: /customers/<customer_id>/tags
    method: PUT
    data_selector: tags
- name: customer
  endpoint:
    path: /en/rest-api-v1/get-customers-v1
    method: GET
- name: chat
  endpoint:
    path: /en/rest-api-v1/get-chats-v1
    method: GET
- name: message
  endpoint:
    path: /en/rest-api-v1/get-messages-v1
    method: GET
- name: agent
  endpoint:
    path: /en/rest-api-v1/get-agents-v1
    method: GET
- name: department
  endpoint:
    path: /en/rest-api-v1/get-departments-v1
    method: GET
- name: application
  endpoint:
    path: /en/rest-api-v1/get-applications-v1
    method: GET
- name: customer_event
  endpoint:
    path: /events
    method: POST
    data_selector: id
    params: {}
- name: customer
  endpoint:
    path: /customers/<customer_id>
    method: DELETE
    data_selector: null
    params: {}
- name: customer
  endpoint:
    path: /api/v1/customers
    method: GET
    data_selector: data
- name: chat
  endpoint:
    path: /api/v1/chats
    method: GET
    data_selector: data
- name: message
  endpoint:
    path: /api/v1/messages
    method: GET
    data_selector: data
- name: agent
  endpoint:
    path: /api/v1/agents
    method: GET
    data_selector: data
- name: department
  endpoint:
    path: /api/v1/departments
    method: GET
    data_selector: data
- name: batch_update_customers
  endpoint:
    path: /customers/batch
    method: PUT
    data_selector: records
- name: update_customer
  endpoint:
    path: /customers/<customer_id>
    method: PUT
    data_selector: customer
    params: {}
- name: contacts
  endpoint:
    path: /rest-api-1/otrymaty-vsi-kontakty
    method: GET
- name: chats
  endpoint:
    path: /rest-api-1/otrymaty-vsi-chaty
    method: GET
- name: messages
  endpoint:
    path: /rest-api-1/otrymaty-povidomlennia-chatu
    method: GET
- name: team_members
  endpoint:
    path: /rest-api-1/otrymaty-vsikh-uchasnykiv-komandy
    method: GET
- name: departments
  endpoint:
    path: /rest-api-1/otrymaty-vsi-viddily
    method: GET
- name: applications
  endpoint:
    path: /rest-api-1/otrymaty-vsi-zastosunky
    method: GET
- name: organization_status
  endpoint:
    path: /rest-api-1/otrymaty-status-dostupnosti-komandy
    method: GET
- name: customer
  endpoint:
    path: /customers
    method: POST
    data_selector: id
    params: {}
- name: customer
  endpoint:
    path: /rest-api-v1/customers
    method: GET
    data_selector: customers
    params: {}
- name: customer
  endpoint:
    path: /customers/<customer_id>
    method: GET
- name: chat
  endpoint:
    path: /v1/chats
    method: GET
    data_selector: data
- name: search_chats
  endpoint:
    path: /v1/search-chats
    method: GET
    data_selector: data
- name: create_chat
  endpoint:
    path: /v1/create-chat
    method: POST
    data_selector: data
- name: snooze_chat
  endpoint:
    path: /v1/snooze-chat
    method: POST
    data_selector: data
- name: update_chat_status
  endpoint:
    path: /v1/update-chat-status
    method: POST
    data_selector: data
- name: update_chat_assignee
  endpoint:
    path: /v1/update-chat-assignee
    method: POST
    data_selector: data
- name: update_chat_department
  endpoint:
    path: /v1/update-chat-department
    method: POST
    data_selector: data
- name: customers
  endpoint:
    path: /customers
    method: GET
    data_selector: data
    params:
      offset: '0'
      limit: '100'
- name: chat
  endpoint:
    path: /chats/<chat_id>
    method: GET
- name: customers
  endpoint:
    path: /customers/search
    method: POST
    data_selector: data
    params: {}
- name: chats
  endpoint:
    path: /v1/chats
    method: GET
    params:
      sort: chats.closedAt
      order: asc
      offset: 0
      limit: 100
- name: untag_customer
  endpoint:
    path: /customers/<customer_id>/tags
    method: DELETE
    data_selector: response
    params: {}
- name: chats
  endpoint:
    path: /chats/search
    method: POST
    data_selector: data
    params:
      limit: 100
      offset: 0
- name: tag_customer
  endpoint:
    path: /customers/<customer_id>/tags
    method: PUT
    data_selector: tags
- name: create_chat
  endpoint:
    path: /chats
    method: POST
    data_selector: id
    params: {}
- name: mark_chat_as_read_by_agent
  endpoint:
    path: /v1/chats/readByAgent
    method: PUT
- name: mark_chat_as_read_by_customer
  endpoint:
    path: /v1/chats/readByCustomer
    method: PUT
- name: customer_event
  endpoint:
    path: /v1/events
    method: POST
    data_selector: data
    params: {}
- name: update_chat_department
  endpoint:
    path: /chats/department
    method: PUT
- name: customer
  endpoint:
    path: /customers/<customer_id>
    method: DELETE
    data_selector: null
    params: {}
- name: snooze_chat
  endpoint:
    path: /v1/chats/snooze
    method: PUT
    data_selector: chat
    params:
      required: chat id, snoozed until date
- name: batch_update_customers
  endpoint:
    path: /customers/batch
    method: PUT
    data_selector: records
- name: update_chat_assignee
  endpoint:
    path: /v1/chats/assignee
    method: PUT
    data_selector: body
- name: customer
  endpoint:
    path: /customers/<customer_id>
    method: PUT
    data_selector: response
    params: {}
- name: chat_status
  endpoint:
    path: /chats/status
    method: PUT
    data_selector: response
    params: {}
- name: customer
  endpoint:
    path: /v1/customers
    method: POST
    data_selector: records
    params: {}
- name: chat_rating
  endpoint:
    path: /chats/rate
    method: PUT
    data_selector: response
    params: {}
- name: messages
  endpoint:
    path: /rest-api-v1/messages
    method: GET
    data_selector: messages
    params: {}
- name: create_message
  endpoint:
    path: /rest-api-v1/create-message
    method: POST
    data_selector: message
    params: {}
- name: chat
  endpoint:
    path: /rest-api-v1/chat
    method: GET
    data_selector: data
- name: search_chats
  endpoint:
    path: /rest-api-v1/search-chats
    method: GET
    data_selector: data
- name: create_chat
  endpoint:
    path: /rest-api-v1/create-chat
    method: POST
    data_selector: data
- name: snooze_chat
  endpoint:
    path: /rest-api-v1/snooze-chat
    method: POST
    data_selector: data
- name: update_chat_status
  endpoint:
    path: /rest-api-v1/update-chat-status
    method: POST
    data_selector: data
- name: update_chat_assignee
  endpoint:
    path: /rest-api-v1/update-chat-assignee
    method: POST
    data_selector: data
- name: update_chat_department
  endpoint:
    path: /rest-api-v1/update-chat-department
    method: POST
    data_selector: data
- name: chat
  endpoint:
    path: /chats/<chat_id>
    method: GET
- name: create_message
  endpoint:
    path: /v1/messages
    method: POST
    data_selector: response
    params: {}
- name: chat_messages
  endpoint:
    path: /v1/chats/<chat_id>/messages
    method: GET
    data_selector: data
    params:
      offset: '0'
      limit: '100'
- name: chats
  endpoint:
    path: /v1/chats
    method: GET
    data_selector: data
    params:
      sort: chats.closedAt
      order: asc
      offset: 0
      limit: 100
- name: agents
  endpoint:
    path: /rest-api-v1/agents-v1
    method: GET
    data_selector: data
- name: chats
  endpoint:
    path: /chats/search
    method: POST
- name: agents
  endpoint:
    path: /agents
    method: GET
    data_selector: data
    params:
      offset: '0'
      limit: '100'
- name: create_chat
  endpoint:
    path: /chats
    method: POST
    data_selector: id
    params: {}
- name: unsubscribe_team_member
  endpoint:
    path: /agents/<agent_id>/unsubscribe
    method: GET
- name: mark_chat_as_read_by_agent
  endpoint:
    path: /v1/chats/readByAgent
    method: PUT
- name: mark_chat_as_read_by_customer
  endpoint:
    path: /v1/chats/readByCustomer
    method: PUT
- name: departments
  endpoint:
    path: /rest-api-v1/get-departments-v1
    method: GET
    data_selector: data
    params: {}
- name: update_chat_department
  endpoint:
    path: /chats/department
    method: PUT
- name: departments
  endpoint:
    path: /departments
    method: GET
    data_selector: data
    params:
      offset: 0
      limit: 100
- name: snooze_chat
  endpoint:
    path: /v1/chats/snooze
    method: PUT
    data_selector: id
    params: {}
- name: applications
  endpoint:
    path: /rest-api-v1/get-applications-v1
    method: GET
    data_selector: data
- name: update_chat_assignee
  endpoint:
    path: /v1/chats/assignee
    method: PUT
    data_selector: response
    params: {}
- name: update_chat_status
  endpoint:
    path: /chats/status
    method: PUT
- name: applications
  endpoint:
    path: /applications
    method: GET
    data_selector: data
- name: chat_rating
  endpoint:
    path: /v1/chats/rate
    method: PUT
    data_selector: null
    params: {}
- name: messages
  endpoint:
    path: /rest-api-v1/messages
    method: GET
    data_selector: messages
- name: organization
  endpoint:
    path: /v1/organization
    method: GET
    data_selector: data
    params: {}
- name: organization
  endpoint:
    path: /rest-api-v1/get-organization-v1
    method: GET
    data_selector: data
    params: {}
- name: create_message
  endpoint:
    path: /messages
    method: POST
    data_selector: response
    params: {}
- name: chat_messages
  endpoint:
    path: /chats/<chat_id>/messages
    method: GET
    data_selector: data
    params:
      offset: 0
      limit: 100
- name: agents
  endpoint:
    path: /rest-api-v1/get-agents-v1
    method: GET
    data_selector: data
- name: unsubscribe_agent
  endpoint:
    path: /rest-api-v1/unsubscribe-agent-v1
    method: POST
    data_selector: data
- name: chat_events
  endpoint:
    path: /webhooks/chat
    method: POST
    data_selector: eventData
    params: {}
- name: agents
  endpoint:
    path: /agents
    method: GET
    data_selector: data
    params:
      offset: '0'
      limit: '100'
- name: message_events
  endpoint:
    path: /webhooks/message
    method: POST
    data_selector: eventData
    params: {}
- name: customer_events
  endpoint:
    path: /webhooks/customer-events
    method: POST
    data_selector: eventData
    params: {}
- name: unsubscribe_team_member
  endpoint:
    path: /agents/<agent_id>/unsubscribe
    method: GET
- name: departments
  endpoint:
    path: /rest-api-v1/get-departments-v1
    method: GET
    data_selector: data
- name: Knowledge Base
  endpoint:
    path: /ios-sdk/function-how-users-access-the-knowledge-base
    method: GET
    data_selector: articles
- name: HelpCrunchSDK
  endpoint:
    path: /helpcrunch/helpcrunchsdk-ios
    method: GET
    data_selector: records
- name: departments
  endpoint:
    path: /v1/departments
    method: GET
    data_selector: data
    params:
      offset: 0
      limit: 100
- name: applications
  endpoint:
    path: /rest-api-v1/get-applications-v1
    method: GET
    data_selector: data
- name: user
  endpoint:
    path: /updateUser
    method: POST
    data_selector: user
    params: {}
- name: init
  endpoint:
    path: /initWithConfiguration
    method: POST
    data_selector: configuration
    params: {}
- name: user_attributes
  endpoint:
    path: /settings/user-attributes
    method: GET
    data_selector: attributes
    params: {}
- name: applications
  endpoint:
    path: /v1/applications
    method: GET
    data_selector: data
- name: track_event
  endpoint:
    path: /track/event
    method: POST
    data_selector: event
    params: {}
- name: organization
  endpoint:
    path: /organization
    method: GET
    data_selector: data
    params: {}
- name: organization
  endpoint:
    path: /organization
    method: GET
    data_selector: data
- name: chat_events
  endpoint:
    path: /webhooks/chat
    method: POST
    data_selector: eventData
    params: {}
- name: message_event
  endpoint:
    path: /webhooks/message
    method: POST
    data_selector: eventData
    params: {}
- name: customer_events
  endpoint:
    path: /webhooks/customer
    method: POST
    data_selector: eventData
- name: chat_widget
  endpoint:
    path: /v1/chat_widget
    method: GET
    data_selector: data
    params: {}
- name: user_data
  endpoint:
    path: /v1/user_data
    method: GET
    data_selector: data
    params: {}
- name: knowledge_base
  endpoint:
    path: /ios-sdk/function-how-users-access-the-knowledge-base
    method: GET
    data_selector: articles
    params: {}
- name: chat_sdk
  endpoint:
    path: /chat-sdk
    method: GET
    data_selector: implementation
    params: {}
- name: HCTheme
  endpoint:
    path: /HCTheme
    method: GET
    data_selector: themes
    params: {}
- name: HCOptions
  endpoint:
    path: /HCOptions
    method: GET
    data_selector: options
    params: {}
- name: user
  endpoint:
    path: /user
    method: POST
    data_selector: user
    params: {}
- name: chat_widget_options
  endpoint:
    path: /api/chat/widget/options
    method: GET
    data_selector: options
    params: {}
- name: user_attributes
  endpoint:
    path: /settings/ios_apps/user_attributes
    method: GET
    data_selector: userAttributes
- name: Knowledge Base Article
  endpoint:
    path: /android-sdk/showKbScreen
    method: POST
    data_selector: articleUrl
    params: {}
- name: HCSTheme
  endpoint:
    path: /ios-sdk/themes
    method: GET
    data_selector: themes
    params: {}
- name: push_notifications
  endpoint:
    path: /ios-sdk/push-notifications
    method: GET
    data_selector: notifications
    params: {}
- name: user_data
  endpoint:
    path: /api/v1/users
    method: POST
    data_selector: user
    params: {}
- name: HelpCrunchWidget
  endpoint:
    path: /widget
    method: GET
    data_selector: widgetData
- name: hc_waiting_message
  endpoint:
    path: /resources/hc_waiting_message
    method: GET
    data_selector: string
    params: {}
- name: hc_offline_message
  endpoint:
    path: /resources/hc_offline_message
    method: GET
    data_selector: string
    params: {}
- name: HCOptions
  endpoint:
    path: /configure/chat/widget/options
    method: POST
    data_selector: options
    params: {}
- name: KnowledgeBase
  endpoint:
    path: /showKbScreen
    method: GET
    data_selector: articles
    params:
      articleUrl: https://docs.helpcrunch.com/en/android-sdk/add-helpcrunch-android-sdk-to-your-app
- name: track_event
  endpoint:
    path: /track_event
    method: POST
    data_selector: eventData
    params: {}
- name: pre_chat_form
  endpoint:
    path: /set/pre-chat/form
    method: POST
    data_selector: form
    params: {}
- name: push_notifications
  endpoint:
    path: /android-sdk/change-push-notifications-icons-texts
    method: GET
    data_selector: notifications
    params: {}
- name: HelpCrunchWidget
  endpoint:
    path: /api/helpcrunch/widget
    method: POST
    data_selector: widgetData
    params: {}
notes:
- The number of email domains is limited to 1 per account.
- Only administrators and supervisors are able to manage custom email domains and
  addresses.
- Each subscription plan comes with all the default roles.
- After adding billing info, you'll be charged automatically after the trial expiration
- Free trial lasts for 14 days.
- Subscription can be changed anytime in settings.
- Installation can be done through Installation Wizard or directly from account settings.
- Installation requires adding a code snippet to every page of your website.
- To get the HelpCrunch code, log in to your HelpCrunch dashboard.
- If you are using WordPress caching plugins, like 'WP Super Cache', 'WP Rocket',
  'Hyper Cache', or similar, you may need to clear your website cache after installing
  HelpCrunch.
- Insert the code by using hot keys (Cmd + V for Mac and Ctrl +V for PC) as pasting
  with mouse click won’t be active.
- Users must have 'Developer' rights to add code to SpaceCraft website.
- Follow the installation steps to add HelpCrunch live chat to your Big Cartel store.
- Installation involves modifying HTML code in the 3DCart dashboard.
- Users must log in to both 3DCart and HelpCrunch to complete the installation.
- Enable push notifications to never miss incoming messages
- AI outputs have boundaries due to ongoing research.
- Might provide inaccurate information.
- Could create harmful content in certain situations.
- May struggle with message language, producing results in another language.
- Might show bias in responses.
- Enable push notifications when the app will display the corresponding dialogue.
- AI limitations are related to factors like limited data, biases, or quality issues.
- Advanced widget customization is only available in our Premium and Enterprise subscription
  plans.
- Customization settings can be changed whenever you want and as many times as you
  need.
- Pre-chat form can be turned ON or OFF based on preferences.
- Offline form can be utilized when the team is unavailable.
- Users cannot rate reopened closed chats.
- The rating option for messaging platforms can only be enabled or disabled for all
  users.
- Emails are sent from helpcrunch-mail.com by default, but a custom email domain can
  be used.
- Reply notification emails can be customized, but they are sent in a single language
  only.
- Key and data type for a custom attribute cannot be changed once added.
- The maximum length for string, integer and float values is 255 characters.
- Chat statuses are visible only to the support team and cannot be seen by users.
- Use inbox filters to filter chats by status or create Custom Inboxes for better
  organization.
- This report is your go-to tool for identifying blind spots in your AI Agents.
- AI Agents are not available in the Basic plan
- All AI-related limits reset at the beginning of each billing cycle
- Your account includes a free limit - you can test AI features with no cost
- For better results, we recommend enabling the User Authentication mode
- Emails are sent from helpcrunch-mail.com by default, but a custom email domain can
  be set up.
- Manual messages empower your team to launch timely, relevant campaigns that strengthen
  customer engagement and drive results - all without complicated automation setups.
- Be aware of Gmail changes from September 2024
- Consider turning off open tracking in your email outreach tools to reduce the likelihood
  of triggering Gmail's warnings
- Eliminating images, including logos and signatures, can help prevent emails from
  being flagged as suspicious
- Maintain good sending practices, such as obtaining proper permissions and ensuring
  high-quality content, to build and preserve a positive sender reputation
- Ensure iOS SDK is updated to version 4.5.1 or higher
- Ensure Android SDK is updated to version 3.4.7 or higher
- The better your knowledge base and custom answers - the higher the resolution rate.
- Uses CNAME for custom domain setup
- SSL certificate required for custom domain security
- Sometimes it's required to allow access to the knowledge base only to specific users.
- It can be password-protected, or access by restricted by ip address.
- For better results, we recommend enabling the User Authentication mode.
- Customize your knowledge base's name, domain and header text.
- Your default domain at the beginning is crunch.help.
- Proactive chat auto messages are triggered by real-time visitor behavior.
- Ensure your popups look great on all devices.
- Manual messages require user authentication setup.
- Ensure recipient conditions are accurately defined to avoid duplicate sends.
- Deleted chats are excluded from the FRT calculation.
- Leverage the HelpCrunch REST API for advanced reporting, including automated reports,
  data aggregation, and integration with BI tools.
- Connect your company's Facebook Pages and Instagram Business accounts to HelpCrunch
  for seamless customer support integration
- Connecting your WhatsApp Business Account opens opportunities to effortlessly reach
  more customers and drive business growth.
- Your Instagram account has to be switched to a Professional (Business) Account.
- Your Instagram account has to be associated with your Facebook Page.
- Allow all possible permissions for HelpCrunch during the connection process.
- Telegram integration supports only direct messages to your Telegram bot.
- Once connected, the Telegram bot will no longer be available for other apps or services.
- Access to the integration is available only in the Pro plan and above.
- Please ensure that you have Cloud API hosted by Meta in your phone number settings
  in 360dialog for Hosting Platform Type.
- Your default domain at the beginning is crunch.help, but you can change it any time
  you want.
- Supports only direct messages to your Viber bot.
- Once connected, the Viber bot will no longer be available for other apps or services.
- 'Keep it concise: Use clear and compelling messaging.'
- 'Offer value: Provide discounts, exclusive content, or useful resources.'
- 'Optimize for mobile: Ensure your popups look great on all devices.'
- 'Use exit intent wisely: Reduce bounce rates by engaging leaving visitors.'
- 'Test and iterate: Continuously analyze data and refine your strategy.'
- Start parameter is not visible on the customer’s side. Only visible in the agent's
  side of the chat.
- Uses HelpCrunch REST API for advanced reporting, including automated reports, data
  aggregation, and integration with BI tools.
- Ensure that the 'Focus Mode' is turned off on your phone, as it could be blocking
  notifications from showing up.
- Android OS selects the priority of displaying notifications based on the activity
  of the application.
- Check the Firebase settings and the presence of a token in the android application
  in HelpCrunch Settings → Android Apps.
- Check the browser console for 'Content Security Policy' related errors.
- If you use the 'Content Security Policy' header on your website, make sure to add
  HelpCrunch domains to the list of exceptions.
- User can type messages using the typeUserMessage method.
- Make sure you are an administrator for Facebook Pages you want to connect.
- Integration supports only direct messages to your Telegram bot.
- You can have just one active chat with a Viber user at a time.
- API key is located in the 'Settings - Developers - Public API' section of your HelpCrunch
  account.
- The security signature is designed to prevent any tampering with user data - even
  by the user themselves.
- Ensure that the user data is hashed in the exact order it is sent to the HelpCrunch
  backend.
- HelpCrunch relies on WebSocket technology for real-time communication.
- Ensure that the Focus Mode is turned off on your phone, as it could be blocking
  notifications from showing up.
- Set the maximum priority in the application's power consumption settings.
- Check the browser console for 'Content Security Policy' related errors
- 'If you use the ''Content Security Policy'' header on your website, make sure to
  add HelpCrunch domains to the list of exceptions: helpcrunch.com, *.helpcrunch.com,
  wss://ws.helpcrunch.com, ucarecdn.com, *.crunch.help'
- User authentication mode helps prevent user impersonation.
- Allows dynamic updating of user attributes and custom attributes.
- Modifying visitor information requires a secret key, which must never be exposed
  on the client side.
- Features like the Pre-chat form will not work when the security signature is enabled.
- 'Widget is shown by default, so make sure to add showWidget: false, to the widget
  settings.'
- Customers API allows you to get, search, create, update, tag or untag, and delete
  your customers.
- Custom attributes can be created in Settings → Contacts → Custom attributes → Add
  new attribute.
- You should specify at least one customer in the request body.
- Maximum number of customers you can add to the request body is 10.
- Uses OAuth2 with refresh token — requires setup of connected app in HelpCrunch
- There are no required fields for creating a customer, but name, email, and userId
  are preferred.
- If a message was sent from Chabot, it will still be shown as sent from an agent
  named 'HelpBot'
- Chats API allows you to get, search, create and snooze your chats.
- Application API allows you to get all your website widgets and apps
- Each webhook event is signed by HelpCrunch via an X-HelpCrunch-Signature header.
- If any webhook event is marked as failed 3 times in a row, it will be turned off.
- All webhook events contain the same attributes.
- You can subscribe to chat, customer, and message events.
- Highly configurable function for displaying Knowledge Base screen
- In order to send files and photos, you need to have the NSCameraUsageDescription,
  NSPhotoLibraryAddUsageDescription and NSPhotoLibraryUsageDescription entries in
  your Info.plist.
- You can customize your chat widget's look by yourself
- You can customize your pre-chat form with various properties
- You can use one of our predefined themes or configure your chat appearance by yourself.
- Push notifications are not available in the iOS Simulator.
- HelpCrunch SDK can provide the built-in UNUserNotificationCenterDelegate.
- Webhooks allow receiving real-time updates from HelpCrunch
- If any webhook event is marked as failed 3 times in a row, it will be turned off
  and no more events will be sent for that webhook.
- Ensure proper OAuth setup for authentication.
- Highly configurable with localization settings and callbacks for user interactions.
- To customize your chat widget appearance.
- Users do not need to enter information before starting a chat conversation.
- Customizable chat widget settings using HCOptions
- Pre-chat form settings must be managed through organization settings
- You can configure custom attributes in SDK
- You can customize your chat widget's look by yourself.
- To make your chat widget look exactly like you want, use the HCSTheme object.
- The HelpCrunch Mobile SDK does not necessarily require implementing push notifications.
- You need to generate and export Push Certificate to receive push notifications.
- Push notifications are optional and do not require implementation to receive messages.
- Firebase Cloud Messaging (FCM) is used for push notifications.
- Google has announced that starting June 20, 2024, the legacy Firebase Cloud Messaging
  (FCM) APIs will be discontinued.
- The discontinued APIs will be completely shut down by July-August 2024.
- We recommend storing the private key file on both your desktop and in the cloud
  (e.g., Google Drive) in private folders.
- Customize notification avatar and theme using HCNotificationsTheme.Builder
- SDK state tracking available with BroadcastReceiver
- Uses Coil for image loading
- Copy 'organizationId' and 'appId' from HelpCrunch settings into the code of the
  widget component.
- Push-повідомлення чудово підходять для обміну повідомленнями в реальному часі та
  інформування користувачів вашого застосунку про те, що для них є нове повідомлення.
- Current version of the SDK can always be found on the demo page or the Maven Central
  Repository Search.
- Не використовуйте старий ключ API, оскільки він сумісний лише зі старим REST API,
  підтримка якого скоро буде припинена.
- You can easily use your brand color instead of the main color in our SDK using a
  special builder.
- All other colors of icons and text are adapted to the color of your choice.
- Advanced chat widget configuration with HCOptions
- Customize the chat widget's appearance using the setTheme function
- The showKbScreen function allows you to display the HelpCrunch Knowledge Base (KB)
  screen within your Android app.
- A pre-chat form will help you know more about users to give them a perfect consultation.
- Push notifications are optional; the app can function without them.
- Store the private key file securely, as the key cannot be recovered if lost.
- New packages have been introduced in version 3.x.
- Initialization may take longer in version 3.x.
- The application into which the widget is embedded is responsible for all actions
  with the user (creation, storage, authorization, etc.)
- API key is permanent and does not expire.
- Do not use the old API key as it is compatible only with the old REST API.
errors:
- '429 Too Many Requests: You reached a rate-limit of 120 API calls per minute.'
- '401 Unauthorized: Make sure you pass the API key as described in the Authentication
  section.'
- '400 Bad Request: The request could not be understood by HelpCrunch server due to
  malformed syntax or invalid attribute value.'
- 400 Bad Request
- 401 Unauthorized
- 404 Not Found
- 429 Too Many Requests
- 'Unable to process billing: Check payment information.'
- 'Subscription cancellation: Contact support before canceling.'
- 'Usage limits exceed: One user can use up to 10000 tokens in 30 minutes.'
- 'Character limit exceeded: The length of a single request should not exceed 1000
  characters.'
- 'Usage limits exceeded: one user can use up to 10000 tokens in 30 minutes.'
- Exceeding usage limits may result in an error, but access will be restored after
  a while.
- Length of a single request should not exceed 2000 characters.
- '400 Bad Request: Check the request format and parameters.'
- '401 Unauthorized: Ensure that the authentication token is valid.'
- '400 Bad Request: Check the request payload for errors.'
- '401 Unauthorized: Verify OAuth credentials and token validity.'
- '429 Too Many Requests: Reduce the rate of requests.'
- 'Error validating access token: Facebook takes away access to the token for various
  reasons.'
- Max files size for photos is 5 MB and for other types of content is 20 MB.
- 'Error validating access token: Check if the token has been revoked or if there
  are permission issues.'
- '403 Forbidden: Mismatch in the order of user data.'
- '403 Forbidden: Ensure that the user data is hashed in the exact order it is sent
  to the HelpCrunch backend.'
- '401 Unauthorized: Invalid request'
- '404 Not Found: Chat not found'
- '429 Too Many Requests: Too many requests'
- '400 Bad Request: Invalid request'
- '401 Unauthorized: Unauthorized'
- '401 Unauthorized: Recheck OAuth scopes or token expiration'
- '404 Not Found: Invalid request'
- '429 Too Many Requests: Invalid request'
- '409 Conflict: Snooze chat is not allowed for closed chat'
- '404 Not Found: Chat for ID "%s" was not found'
- '404 Not Found: Chat for ID was not found'
- '400 Bad Request: Chat must me closed to rate'
- '400 Bad Request: The value you selected is not a valid choice. Valid rating: ''perfect'',
  ''great'', ''average'', ''poor'', ''very poor'''
- '409 Conflict: Chat is already rated'
- '409 Conflict: Cannot rate chat without agent communication'
- '404 Unauthorized: Invalid request'
- '410: Your endpoint or app is not available, so we mark the event as failed'
- '4xx (except 410): Client or server errors - We''ll retry after 1 min, 5 min, 20
  min, 60 min and 2 hours.'
- '4xx (except 410): Client or server errors - We''ll retry after 1 min, 5 min, 20
  min, 60 min and 2 hours. If all retries fail, we mark the event as failed.'
- '401 Unauthorized: Check your credentials or token expiration.'
- '404 Not Found: Verify the endpoint path.'
- Please, check your internet connection
- Something went wrong. Please try again later
- This chat was removed by agent. You'll be logged out
- You can't send files bigger than 16 MB.
- 'REQUEST_LIMIT_EXCEEDED: Throttle API calls or reduce frequency'
- 'QUERY_TIMEOUT: Break down filters or add selectivity'
- '400 Bad Request: The request could not be understood by HelpCrunch server due to
  malformed syntax or invalid attribute value. DO NOT repeat such requests without
  modifications.'
- '401 Unauthorized: This means that something is wrong with your API key or it''s
  not added to the request headers at all. Make sure you pass it as described in the
  Authentication section above.'
- '404 Not Found: We were unable to find anything matching your request.'
- 'hc_no_internet_connection_error: Please, check your internet connection'
- 'hc_handler_unknown_error: Something went wrong. Please try again later'
- 'hc_chat_deleted_error: This chat was removed by agent. You''ll be logged out'
- '401 Unauthorized: This means that something is wrong with your API key or it''s
  not added to the request headers at all.'
auth_info:
  mentioned_objects:
  - OauthToken
  - AuthProvider
client:
  base_url: https://api.helpcrunch.com/v1
  auth:
    type: apikey
    location: header
    header_name: Authorization
source_metadata: null
