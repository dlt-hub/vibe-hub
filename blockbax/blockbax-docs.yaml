resources:
- name: projects
  endpoint:
    path: /v1/projects/<PROJECT_ID>
    method: GET
    data_selector: result
- name: property_types
  endpoint:
    path: /v1/projects/<PROJECT_ID>/propertyTypes
    method: GET
    data_selector: result
- name: get_property_type
  endpoint:
    path: /v1/projects/<PROJECT_ID>/propertyTypes/<PROPERTY_TYPE_ID>
    method: GET
    data_selector: result
- name: property_types
  endpoint:
    path: /projects/<PROJECT_ID>/propertyTypes
    method: POST
    data_selector: result
- name: subject_types
  endpoint:
    path: /projects/<PROJECT_ID>/subjectTypes
    method: POST
    data_selector: result
- name: subjects
  endpoint:
    path: /subjects
    method: GET
    data_selector: result
    params:
      size: 20
- name: get_subject
  endpoint:
    path: /subjects/<SUBJECT_ID>
    method: GET
    data_selector: result
- name: create_or_update_subject
  endpoint:
    path: /subjects
    method: POST
- name: update_subject
  endpoint:
    path: /subjects/<SUBJECT_ID>
    method: PUT
- name: delete_subject
  endpoint:
    path: /subjects/<SUBJECT_ID>
    method: DELETE
- name: search_metrics
  endpoint:
    path: /metrics
    method: GET
- name: get_metric
  endpoint:
    path: /metrics/<METRIC_ID>
    method: GET
- name: create_or_update_metric
  endpoint:
    path: /metrics
    method: POST
- name: update_metric
  endpoint:
    path: /metrics/<METRIC_ID>
    method: PUT
- name: delete_metric
  endpoint:
    path: /metrics/<METRIC_ID>
    method: DELETE
- name: event_triggers
  endpoint:
    path: /v1/projects/<PROJECT_ID>/eventTriggers
    method: GET
    data_selector: result
    params:
      size: '20'
- name: event_trigger
  endpoint:
    path: /v1/projects/<PROJECT_ID>/eventTriggers/<EVENT_TRIGGER_ID>
    method: GET
    data_selector: result
    params: {}
- name: event_trigger
  endpoint:
    path: /v1/projects/<PROJECT_ID>/eventTriggers
    method: POST
- name: event_trigger
  endpoint:
    path: /services/data/vXX.X/sobjects/EventTrigger
    method: GET
    data_selector: records
    params: {}
- name: event_trigger
  endpoint:
    path: /projects/<PROJECT_ID>/eventTriggers/<EVENT_TRIGGER_ID>
    method: DELETE
    data_selector: response
    params: {}
- name: webhook_settings
  endpoint:
    path: /projects/<PROJECT_ID>/webhookSettings
    method: GET
    data_selector: result
    params:
      size: '20'
- name: webhook_setting
  endpoint:
    path: /projects/<PROJECT_ID>/webhookSettings/<WEBHOOK_SETTING_ID>
    method: GET
    data_selector: response
    params: {}
- name: measurements
  endpoint:
    path: /projects/<PROJECT_ID>/measurements
    method: GET
    data_selector: series
    params: {}
- name: measurements
  endpoint:
    path: /<PROJECT_ID>/measurements
    method: POST
    data_selector: series
    params: {}
- name: events
  endpoint:
    path: /<PROJECT_ID>/events
    method: GET
    data_selector: result
    params:
      size: 20
- name: event_details
  endpoint:
    path: /<PROJECT_ID>/events/<EVENT_ID>
    method: GET
    data_selector: ''
    params: {}
- name: measurements
  endpoint:
    path: /measurements
    method: POST
- name: arguments
  endpoint:
    path: /metrics/arguments
    method: GET
    data_selector: arguments
    params: {}
- name: calculation
  endpoint:
    path: /metrics/calculation
    method: GET
    data_selector: calculations
    params: {}
- name: editor_features
  endpoint:
    path: /metrics/editor_features
    method: GET
    data_selector: features
    params: {}
- name: examples
  endpoint:
    path: /metrics/examples
    method: GET
    data_selector: examples
    params: {}
- name: alarms
  endpoint:
    path: /api/alarms
    method: GET
    data_selector: alarms
- name: inbound_connector
  endpoint:
    path: /measurements
    method: POST
    data_selector: payload
    params: {}
- name: projects
  endpoint:
    path: /v1/projects/<PROJECT_ID>
    method: GET
    data_selector: result
- name: propertyTypes
  endpoint:
    path: /v1/projects/<PROJECT_ID>/propertyTypes
    method: GET
    data_selector: result
- name: getPropertyType
  endpoint:
    path: /v1/projects/<PROJECT_ID>/propertyTypes/<PROPERTY_TYPE_ID>
    method: GET
    data_selector: result
- name: property_types
  endpoint:
    path: /v1/projects/<PROJECT_ID>/propertyTypes
    method: POST
- name: subject_types
  endpoint:
    path: /v1/projects/<PROJECT_ID>/subjectTypes
    method: POST
- name: subjects
  endpoint:
    path: /subjects
    method: GET
    data_selector: result
    params:
      size: '20'
- name: subject
  endpoint:
    path: /subjects/<SUBJECT_ID>
    method: GET
    data_selector: result
    params: {}
- name: create_or_update_subject
  endpoint:
    path: /v1/projects/<PROJECT_ID>/subjects
    method: POST
    data_selector: result
- name: update_subject
  endpoint:
    path: /v1/projects/<PROJECT_ID>/subjects/<SUBJECT_ID>
    method: PUT
    data_selector: result
- name: delete_subject
  endpoint:
    path: /v1/projects/<PROJECT_ID>/subjects/<SUBJECT_ID>
    method: DELETE
    data_selector: result
- name: search_metrics
  endpoint:
    path: /v1/projects/<PROJECT_ID>/metrics
    method: GET
    data_selector: result
- name: get_metric
  endpoint:
    path: /v1/projects/<PROJECT_ID>/metrics/<METRIC_ID>
    method: GET
    data_selector: result
- name: create_or_update_metric
  endpoint:
    path: /v1/projects/<PROJECT_ID>/metrics
    method: POST
    data_selector: result
- name: delete_metric
  endpoint:
    path: /v1/projects/<PROJECT_ID>/metrics/<METRIC_ID>
    method: DELETE
    data_selector: result
- name: event_triggers
  endpoint:
    path: /eventTriggers
    method: GET
    data_selector: result
    params:
      size: 20
- name: get_event_trigger
  endpoint:
    path: /eventTriggers/<EVENT_TRIGGER_ID>
    method: GET
    data_selector: result
    params: {}
- name: event_trigger
  endpoint:
    path: /v1/projects/<PROJECT_ID>/eventTriggers
    method: POST
    data_selector: null
    params: {}
- name: event_trigger_update
  endpoint:
    path: /v1/projects/<PROJECT_ID>/eventTriggers/<EVENT_TRIGGER_ID>
    method: PUT
    data_selector: null
    params: {}
- name: event_trigger
  endpoint:
    path: /services/data/vXX.X/sobjects/EventTrigger
    method: GET
    data_selector: records
    params: {}
- name: event_trigger
  endpoint:
    path: /projects/<PROJECT_ID>/eventTriggers/<EVENT_TRIGGER_ID>
    method: DELETE
    data_selector: '{}'
    params: {}
- name: webhook_settings
  endpoint:
    path: /projects/<PROJECT_ID>/webhookSettings
    method: GET
    data_selector: '{}'
    params:
      size: 20
- name: webhook_response
  endpoint:
    path: /projects/<PROJECT_ID>/webhookSettings/<WEBHOOK_SETTING_ID>/webhookResponses
    method: GET
    data_selector: '{}'
    params: {}
- name: measurements
  endpoint:
    path: /projects/<PROJECT_ID>/measurements
    method: GET
    data_selector: '{}'
    params: {}
- name: measurements
  endpoint:
    path: /measurements
    method: POST
    data_selector: series
    params: {}
- name: events
  endpoint:
    path: /events
    method: GET
    data_selector: result
    params:
      size: '20'
      page: '0'
notes:
- Every request to the API needs to send an authorization header.
- At the moment the deprecated fields `latestVersion` and `archived` are included
  in the response for backward compatibility. Please do not use these fields, they
  will be removed in the near future.
- The subjectTypeId cannot be changed later.
- Uses OAuth2 with refresh token â€” requires setup of connected app in api
- The total number of measurements per batch is limited to 500.
- Results for events are paginated with a maximum of 200 results at a time.
- You can export your data anytime using our API
- Every project comes with a default dashboard.
- The maximum number of columns you can use is 12.
- Subjects can be a machine, office or production line.
- The primary location determines the location that is used to display a subject on
  the map.
- The timezone is in UTC, conversion to local timezone is required.
- Ingestion IDs are used when sending measurements
- It is highly use case dependent if historic data can be accurately forecasted.
- Forecasted metrics use machine learning technology, which can sometimes result in
  inaccurate, inappropriate, or biased outcomes.
- Alarms are created automatically from an event, if this is configured for the event
  trigger.
- An alarm can only be closed if the latest event is suppressed or no longer a problem
  or a warning.
- Alarms can be filtered based on subjects and event triggers.
- A personal access key gives you read-only permissions to everything you have access
  to.
- Available to projects on the Enterprise plan.
- Just-in-time (JIT) provisioning is enabled by default.
- We discourage rewriting history as it can become hard to trace why something led
  to an event.
- Measurements need to be a JSON UTF-8 encoded string.
- We support several operations in which your device can interact with the platform
  or vice versa.
- 'In case a call fails (due to receiving a non-2xx response code or exceeding timeout
  of 5 seconds), we will try 4 more times: after 5 seconds, 1 minute, 5 minutes and
  15 minutes.'
- Date ordering is guaranteed for all events related to a specific event trigger and
  subject.
- During the execution of the script, the timezone is in UTC, this means that you
  have to convert it to your local timezone yourself.
- Events can optionally lead to the creation of an alarm.
- Suppressions prevent follow-up actions for given subjects and triggers.
- Payload must always be sent as bytes
- Payload conversion scripts can be tested in the Blockbax Web Client
- Available to projects on our Enterprise plan.
- Requires setup of connected app in Blockbax
- Measurements should have a strict increasing time order.
- Invalid measurements count towards usage statistics.
- This Master Subscription Agreement was last updated on July 28, 2025.
- This Privacy Policy was last updated on July 8, 2025.
- Expert services available for customized needs
- All endpoints are rate limited except the endpoint for sending measurements.
- Results are paginated with a maximum of 200 results at a time.
- At the moment the deprecated fields latestVersion and archived are included in the
  response for backward compatibility. Please do not use these fields, they will be
  removed in the near future.
- Beta Functionality is experimental and might not function as intended.
errors:
- '429: Rate limit exceeded'
- 'REQUEST_LIMIT_EXCEEDED: Throttle API calls or reduce frequency'
- 'QUERY_TIMEOUT: Break down filters or add selectivity'
- '401 Unauthorized: Recheck OAuth scopes or token expiration'
- '207 MULTI_STATUS: The request is syntactically correct, but not everything can
  be ingested.'
- 'Received invalid measurement values for ingestion ids: Verify that the sent value
  is of the correct type for the metric data type.'
auth_info:
  mentioned_objects: []
client:
  base_url: https://login.blockbax.com
source_metadata: null
