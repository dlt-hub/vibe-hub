resources:
- name: models
  endpoint:
    path: /models
    method: GET
    data_selector: records
- name: modules
  endpoint:
    path: /modules
    method: GET
    data_selector: records
- name: models
  endpoint:
    path: /models
    method: GET
    data_selector: models
- name: ATCNet
  endpoint:
    path: /generated/braindecode.models.ATCNet.html#braindecode.models.ATCNet
    method: GET
    data_selector: ''
    params: {}
- name: AttentionBaseNet
  endpoint:
    path: /generated/braindecode.models.AttentionBaseNet.html#braindecode.models.AttentionBaseNet
    method: GET
    data_selector: ''
    params: {}
- name: BDTCN
  endpoint:
    path: /generated/braindecode.models.BDTCN.html#braindecode.models.BDTCN
    method: GET
    data_selector: ''
    params: {}
- name: BIOT
  endpoint:
    path: /generated/braindecode.models.BIOT.html#braindecode.models.BIOT
    method: GET
    data_selector: ''
    params: {}
- name: ContraWR
  endpoint:
    path: /generated/braindecode.models.ContraWR.html#braindecode.models.ContraWR
    method: GET
    data_selector: ''
    params: {}
- name: CTNet
  endpoint:
    path: /generated/braindecode.models.CTNet.html#braindecode.models.CTNet
    method: GET
    data_selector: ''
    params: {}
- name: Deep4Net
  endpoint:
    path: /generated/braindecode.models.Deep4Net.html#braindecode.models.Deep4Net
    method: GET
    data_selector: ''
    params: {}
- name: DeepSleepNet
  endpoint:
    path: /generated/braindecode.models.DeepSleepNet.html#braindecode.models.DeepSleepNet
    method: GET
    data_selector: ''
    params: {}
- name: EEGConformer
  endpoint:
    path: /generated/braindecode.models.EEGConformer.html#braindecode.models.EEGConformer
    method: GET
    data_selector: ''
    params: {}
- name: EEGInceptionERP
  endpoint:
    path: /generated/braindecode.models.EEGInceptionERP.html#braindecode.models.EEGInceptionERP
    method: GET
    data_selector: ''
    params: {}
- name: EEGInceptionMI
  endpoint:
    path: /generated/braindecode.models.EEGInceptionMI.html#braindecode.models.EEGInceptionMI
    method: GET
    data_selector: ''
    params: {}
- name: EEGITNet
  endpoint:
    path: /generated/braindecode.models.EEGITNet.html#braindecode.models.EEGITNet
    method: GET
    data_selector: ''
    params: {}
- name: EEGMiner
  endpoint:
    path: /generated/braindecode.models.EEGMiner.html#braindecode.models.EEGMiner
    method: GET
    data_selector: ''
    params: {}
- name: EEGNetv1
  endpoint:
    path: /generated/braindecode.models.EEGNetv1.html#braindecode.models.EEGNetv1
    method: GET
    data_selector: ''
    params: {}
- name: EEGNetv4
  endpoint:
    path: /generated/braindecode.models.EEGNetv4.html#braindecode.models.EEGNetv4
    method: GET
    data_selector: ''
    params: {}
- name: EEGNeX
  endpoint:
    path: /generated/braindecode.models.EEGNeX.html#braindecode.models.EEGNeX
    method: GET
    data_selector: ''
    params: {}
- name: EEGResNet
  endpoint:
    path: /generated/braindecode.models.EEGResNet.html#braindecode.models.EEGResNet
    method: GET
    data_selector: ''
    params: {}
- name: EEGSimpleConv
  endpoint:
    path: /generated/braindecode.models.EEGSimpleConv.html#braindecode.models.EEGSimpleConv
    method: GET
    data_selector: ''
    params: {}
- name: EEGTCNet
  endpoint:
    path: /generated/braindecode.models.EEGTCNet.html#braindecode.models.EEGTCNet
    method: GET
    data_selector: ''
    params: {}
- name: FBCNet
  endpoint:
    path: /generated/braindecode.models.FBCNet.html#braindecode.models.FBCNet
    method: GET
    data_selector: ''
    params: {}
- name: FBLightConvNet
  endpoint:
    path: /generated/braindecode.models.FBLightConvNet.html#braindecode.models.FBLightConvNet
    method: GET
    data_selector: ''
    params: {}
- name: FBMSNet
  endpoint:
    path: /generated/braindecode.models.FBMSNet.html#braindecode.models.FBMSNet
    method: GET
    data_selector: ''
    params: {}
- name: IFNet
  endpoint:
    path: /generated/braindecode.models.IFNet.html#braindecode.models.IFNet
    method: GET
    data_selector: ''
    params: {}
- name: Labram
  endpoint:
    path: /generated/braindecode.models.Labram.html#braindecode.models.Labram
    method: GET
    data_selector: ''
    params: {}
- name: MSVTNet
  endpoint:
    path: /generated/braindecode.models.MSVTNet.html#braindecode.models.MSVTNet
    method: GET
    data_selector: ''
    params: {}
- name: SCCNet
  endpoint:
    path: /generated/braindecode.models.SCCNet.html#braindecode.models.SCCNet
    method: GET
    data_selector: ''
    params: {}
- name: ShallowFBCSPNet
  endpoint:
    path: /generated/braindecode.models.ShallowFBCSPNet.html#braindecode.models.ShallowFBCSPNet
    method: GET
    data_selector: ''
    params: {}
- name: SignalJEPA
  endpoint:
    path: /generated/braindecode.models.SignalJEPA.html#braindecode.models.SignalJEPA
    method: GET
    data_selector: ''
    params: {}
- name: SignalJEPA_Contextual
  endpoint:
    path: /generated/braindecode.models.SignalJEPA_Contextual.html#braindecode.models.SignalJEPA_Contextual
    method: GET
    data_selector: ''
    params: {}
- name: SignalJEPA_PostLocal
  endpoint:
    path: /generated/braindecode.models.SignalJEPA_PostLocal.html#braindecode.models.SignalJEPA_PostLocal
    method: GET
    data_selector: ''
    params: {}
- name: SignalJEPA_PreLocal
  endpoint:
    path: /generated/braindecode.models.SignalJEPA_PreLocal.html#braindecode.models.SignalJEPA_PreLocal
    method: GET
    data_selector: ''
    params: {}
- name: SincShallowNet
  endpoint:
    path: /generated/braindecode.models.SincShallowNet.html#braindecode.models.SincShallowNet
    method: GET
    data_selector: ''
    params: {}
- name: SleepStagerBlanco2020
  endpoint:
    path: /generated/braindecode.models.SleepStagerBlanco2020.html#braindecode.models.SleepStagerBlanco2020
    method: GET
    data_selector: ''
    params: {}
- name: SleepStagerChambon2018
  endpoint:
    path: /generated/braindecode.models.SleepStagerChambon2018.html#braindecode.models.SleepStagerChambon2018
    method: GET
    data_selector: ''
    params: {}
- name: SleepStagerEldele2021
  endpoint:
    path: /generated/braindecode.models.SleepStagerEldele2021.html#braindecode.models.SleepStagerEldele2021
    method: GET
    data_selector: ''
    params: {}
- name: SPARCNet
  endpoint:
    path: /generated/braindecode.models.SPARCNet.html#braindecode.models.SPARCNet
    method: GET
    data_selector: ''
    params: {}
- name: SyncNet
  endpoint:
    path: /generated/braindecode.models.SyncNet.html#braindecode.models.SyncNet
    method: GET
    data_selector: ''
    params: {}
- name: TIDNet
  endpoint:
    path: /generated/braindecode.models.TIDNet.html#braindecode.models.TIDNet
    method: GET
    data_selector: ''
    params: {}
- name: TSceptionV1
  endpoint:
    path: /generated/braindecode.models.TSceptionV1.html#braindecode.models.TSceptionV1
    method: GET
    data_selector: ''
    params: {}
- name: USleep
  endpoint:
    path: /generated/braindecode.models.USleep.html#braindecode.models.USleep
    method: GET
    data_selector: ''
    params: {}
- name: models
  endpoint:
    path: /braindecode/models
    method: GET
    data_selector: models
    params: {}
- name: BCICompetitionIVDataset4
  endpoint:
    path: source/braindecode.datasets.BCICompetitionIVDataset4
    method: GET
    data_selector: subject_ids
    params: {}
- name: BNCI2014001
  endpoint:
    path: source/braindecode.datasets.BNCI2014001
    method: GET
    data_selector: subject_ids
    params: {}
- name: HGD
  endpoint:
    path: source/braindecode.datasets.HGD
    method: GET
    data_selector: subject_ids
    params: {}
- name: MOABBDataset
  endpoint:
    path: source/braindecode.datasets.MOABBDataset
    method: GET
    data_selector: dataset_name
    params: {}
- name: NMT
  endpoint:
    path: source/braindecode.datasets.NMT
    method: GET
    data_selector: path
    params: {}
- name: SleepPhysionet
  endpoint:
    path: source/braindecode.datasets.SleepPhysionet
    method: GET
    data_selector: subject_ids
    params: {}
- name: SleepPhysionetChallenge2018
  endpoint:
    path: source/braindecode.datasets.SleepPhysionetChallenge2018
    method: GET
    data_selector: subject_ids
    params: {}
- name: TUH
  endpoint:
    path: source/braindecode.datasets.TUH
    method: GET
    data_selector: path
    params: {}
- name: TUHAbnormal
  endpoint:
    path: source/braindecode.datasets.TUHAbnormal
    method: GET
    data_selector: path
    params: {}
- name: BaseDataset
  endpoint:
    path: /generated/braindecode.datasets.BaseDataset
    method: GET
- name: BaseConcatDataset
  endpoint:
    path: /generated/braindecode.datasets.BaseConcatDataset
    method: GET
- name: WindowsDataset
  endpoint:
    path: /generated/braindecode.datasets.WindowsDataset
    method: GET
- name: MOABBDataset
  endpoint:
    path: /generated/braindecode.datasets.MOABBDataset
    method: GET
- name: HGD
  endpoint:
    path: /generated/braindecode.datasets.HGD
    method: GET
- name: BNCI2014001
  endpoint:
    path: /generated/braindecode.datasets.BNCI2014001
    method: GET
- name: TUH
  endpoint:
    path: /generated/braindecode.datasets.TUH
    method: GET
- name: TUHAbnormal
  endpoint:
    path: /generated/braindecode.datasets.TUHAbnormal
    method: GET
- name: SleepPhysionet
  endpoint:
    path: /generated/braindecode.datasets.SleepPhysionet
    method: GET
- name: BCICompetitionIVDataset4
  endpoint:
    path: /generated/braindecode.datasets.BCICompetitionIVDataset4
    method: GET
- name: EEGModuleMixin
  endpoint:
    path: /braindecode/models/EEGModuleMixin
    method: GET
    data_selector: records
    params: {}
- name: AttentionBaseNet
  endpoint:
    path: /1.1/generated/braindecode.models.AttentionBaseNet.html
    method: GET
- name: BIOT
  endpoint:
    path: /braindecode/models/biot
    method: GET
- name: EEGNetv4
  endpoint:
    path: /braindecode/models/EEGNetv4
    method: GET
- name: EEGResNet
  endpoint:
    params:
      n_chans: null
      n_outputs: null
      n_times: null
      final_pool_length: auto
      n_first_filters: 20
      n_layers_per_block: 2
      first_filter_length: 3
      activation: <class 'torch.nn.modules.activation.ELU'>
      split_first_layer: true
      batch_norm_alpha: 0.1
      batch_norm_epsilon: 0.0001
      input_window_seconds: null
      sfreq: 250
- name: EEGTCNet
  endpoint:
    path: /braindecode/models/EEGTCNet
    method: GET
    data_selector: records
- name: IFNet
  endpoint:
    path: /braindecode/models/IFNet
    method: GET
    data_selector: model_data
- name: ShallowFBCSPNet
  endpoint:
    path: /braindecode/models/ShallowFBCSPNet
    method: GET
    data_selector: parameters
    params: {}
- name: SleepStagerBlanco2020
  endpoint:
    path: /braindecode/models/SleepStagerBlanco2020
    method: GET
    data_selector: parameters
    params: {}
- name: SleepStagerEldele2021
  endpoint:
    path: /braindecode/models/SleepStagerEldele2021
    method: GET
    data_selector: records
    params: {}
- name: USleep
  endpoint:
    path: /braindecode/models/USleep
    method: GET
- name: glorot_weight_zero_bias
  endpoint:
    path: /braindecode/functional/glorot_weight_zero_bias
    method: GET
    data_selector: parameters
    params: {}
- name: hilbert_freq
  endpoint:
    path: /braindecode/functional/hilbert_freq
    method: GET
    data_selector: output_tensor
- name: plv_time
  endpoint:
    path: /braindecode/functional/plv_time
    method: GET
    data_selector: plv
    params:
      forward_fourier: true
      epsilon: 1.0e-06
- name: rescale_parameter
  endpoint:
    path: /braindecode.functional.rescale_parameter
    method: GET
    data_selector: param, layer_id
    params: {}
- name: safe_log
  endpoint:
    path: /braindecode/functional/safe_log
    method: GET
    data_selector: Tensor
- name: BaseConcatDataset
  endpoint:
    path: /datasets/BaseConcatDataset
    method: GET
    data_selector: records
- name: get_metadata
  endpoint:
    path: get_metadata
    method: GET
    data_selector: metadata
- name: save
  endpoint:
    path: save
    method: POST
    data_selector: save_info
- name: set_description
  endpoint:
    path: set_description
    method: POST
    data_selector: description_info
- name: split
  endpoint:
    path: split
    method: POST
    data_selector: splits_info
- name: BaseDataset
  endpoint:
    path: /braindecode/datasets/BaseDataset
    method: GET
    data_selector: samples
- name: WindowsDataset
  endpoint:
    path: /braindecode/datasets/WindowsDataset
    method: GET
    data_selector: windows
    params: {}
- name: BCICompetitionIVDataset4
  endpoint:
    path: /braindecode/datasets/BCICompetitionIVDataset4
    method: GET
    data_selector: recordings
    params:
      subject_ids: '[1, 2, 3]'
- name: BNCI2014001
  endpoint:
    path: /braindecode/datasets/BNCI2014001
    method: GET
    data_selector: data
    params:
      subject_ids: null
- name: HGD
  endpoint:
    path: /braindecode/datasets/HGD
    method: GET
    data_selector: records
    params:
      subject_ids: list(int) | int | None
- name: MOABBDataset
  endpoint:
    path: /braindecode/datasets/MOABBDataset
    method: GET
- name: NMT Dataset
  endpoint:
    path: /braindecode/datasets/nmt
    method: GET
    data_selector: recordings
- name: Sleep Physionet dataset
  endpoint:
    path: /content/sleep-edfx/1.0.0/
    method: GET
    data_selector: records
    params: {}
- name: polysomnography_dataset
  endpoint:
    path: /content/challenge-2018/1.0.0/
    method: GET
- name: TUH EEG Corpus
  endpoint:
    path: /braindecode/datasets/TUH
    method: GET
    data_selector: records
    params: {}
- name: TUHAbnormal
  endpoint:
    path: /braindecode/datasets/TUHAbnormal
    method: GET
    data_selector: records
- name: create_from_X_y
  endpoint:
    path: /braindecode/datasets/create_from_X_y
    method: POST
- name: create_from_mne_raw
  endpoint:
    path: /braindecode/datasets/create_from_mne_raw
    method: POST
    data_selector: windows_datasets
    params:
      trial_start_offset_samples: int
      trial_stop_offset_samples: int
      window_size_samples: int
      window_stride_samples: int
      drop_last_window: bool
      descriptions: list
      mapping: dict
      preload: bool
      drop_bad_windows: bool
      accepted_bads_ratio: float
- name: create_from_mne_epochs
  endpoint:
    path: /datasets/create_from_mne_epochs
    method: GET
- name: create_from_mne_epochs
  endpoint:
    path: /braindecode/datasets/create_from_mne_epochs
    method: POST
    data_selector: windows_datasets
    params: {}
- name: create_windows_from_events
  endpoint:
    path: braindecode/preprocessing/create_windows_from_events
    method: GET
    data_selector: windows_datasets
- name: create_fixed_length_windows
  endpoint:
    path: /braindecode/preprocessing/create_fixed_length_windows
    method: GET
- name: create_fixed_length_windows
  endpoint:
    path: /braindecode/preprocessing/create_fixed_length_windows
    method: GET
    data_selector: windows_datasets
- name: create_windows_from_target_channels
  endpoint:
    path: /braindecode/preprocessing/create_windows_from_target_channels
    method: GET
- name: exponential_moving_demean
  endpoint:
    path: /braindecode/preprocessing/exponential_moving_demean
    method: GET
- name: exponential_moving_demean
  endpoint:
    path: /braindecode/preprocessing/exponential_moving_demean
    method: GET
    data_selector: demeaned
- name: exponential_moving_standardize
  endpoint:
    path: /braindecode/preprocessing/exponential_moving_standardize
    method: GET
    data_selector: standardized
    params: {}
- name: BaseConcatDataset
  endpoint:
    path: /braindecode/datasets/BaseConcatDataset
    method: GET
    data_selector: datasets
    params: {}
- name: Preprocessor
  endpoint:
    path: /braindecode/preprocessing/Preprocessor
    method: GET
    data_selector: preprocessors
    params: {}
- name: Preprocessor
  endpoint:
    path: /braindecode/preprocessing/Preprocessor
    method: GET
    data_selector: records
- name: DropChannels
  endpoint:
    path: /braindecode/preprocessing/DropChannels
    method: GET
- name: SetEEGReference
  endpoint:
    path: /braindecode/preprocessing/SetEEGReference
    method: GET
    data_selector: ''
    params: {}
- name: SetEEGReference
  endpoint:
    path: /braindecode/preprocessing/seteegreference
    method: GET
- name: Filter
  endpoint:
    path: /braindecode/preprocessing/Filter
    method: GET
- name: Pick
  endpoint:
    path: /braindecode/preprocessing/Pick
    method: GET
    data_selector: parameters
    params: {}
- name: crop_raw_data
  endpoint:
    path: /braindecode/preprocessing/Crop
    method: POST
    data_selector: raw
    params: {}
- name: save_concat_dataset
  endpoint:
    path: /datautil/save_concat_dataset
    method: POST
    data_selector: records
    params:
      overwrite: 'False'
- name: load_concat_dataset
  endpoint:
    path: /braindecode/datautil/load_concat_dataset
    method: GET
    data_selector: concat_dataset
    params: {}
- name: info
  endpoint:
    path: /info
    method: GET
    data_selector: Series
    params: {}
- name: n_recordings
  endpoint:
    path: /n_recordings
    method: GET
    data_selector: int
    params: {}
- name: sample_recording
  endpoint:
    path: /sample_recording
    method: GET
    data_selector: index
    params: {}
- name: sample_window
  endpoint:
    path: /sample_window
    method: GET
    data_selector: window
    params: {}
- name: SequenceSampler
  endpoint:
    path: /braindecode/samplers/SequenceSampler
    method: GET
    data_selector: parameters
    params: {}
- name: RelativePositioningSampler
  endpoint:
    path: /samplers/RelativePositioningSampler
    method: GET
- name: RelativePositioningSampler
  endpoint:
    path: /braindecode/samplers/RelativePositioningSampler
    method: GET
    data_selector: parameters
    params: {}
- name: DistributedRelativePositioningSampler
  endpoint:
    path: /braindecode/samplers/DistributedRelativePositioningSampler
    method: GET
    data_selector: examples
    params: {}
- name: BalancedSequenceSampler
  endpoint:
    path: braindecode/samplers/BalancedSequenceSampler
    method: GET
    data_selector: parameters
    params: {}
- name: IdentityTransform
  endpoint:
    path: /braindecode/augmentation/IdentityTransform
    method: GET
    data_selector: none
- name: Compose
  endpoint:
    path: /braindecode/augmentation/Compose
    method: GET
    data_selector: transforms
    params: {}
- name: dataset
  endpoint:
    path: braindecode.datasets.BaseDataset
    method: GET
    data_selector: signals
- name: transforms
  endpoint:
    path: braindecode.augmentation.Transform
    method: GET
    data_selector: Transform
- name: get_augmentation_params
  endpoint:
    path: /braindecode/augmentation/get_augmentation_params
    method: GET
- name: operation
  endpoint:
    path: /braindecode/augmentation/operation
    method: GET
- name: ChannelsSymmetry
  endpoint:
    path: /braindecode/augmentation/ChannelsSymmetry
    method: GET
    data_selector: params
    params: {}
- name: get_augmentation_params
  endpoint:
    path: /braindecode/augmentation/SmoothTimeMask/get_augmentation_params
    method: GET
    data_selector: params
    params: {}
- name: operation
  endpoint:
    path: /braindecode/augmentation/SmoothTimeMask/operation
    method: GET
    data_selector: params
    params: {}
- name: BandstopFilter
  endpoint:
    path: /braindecode/augmentation/BandstopFilter
    method: GET
- name: FrequencyShift
  endpoint:
    path: /braindecode/augmentation/FrequencyShift
    method: GET
    data_selector: parameters
    params: {}
- name: get_augmentation_params
  endpoint:
    path: /braindecode/augmentation/SensorsRotation/get_augmentation_params
    method: GET
- name: operation
  endpoint:
    path: /braindecode/augmentation/SensorsRotation/operation
    method: POST
- name: SensorsZRotation
  endpoint:
    path: /braindecode/augmentation/SensorsZRotation
    method: GET
    data_selector: parameters
    params: {}
- name: SensorsXRotation
  endpoint:
    path: /braindecode/augmentation/SensorsXRotation
    method: GET
    data_selector: parameters
    params: {}
- name: get_augmentation_params
  endpoint:
    path: /braindecode/augmentation/Mixup/get_augmentation_params
    method: GET
    data_selector: params
- name: operation
  endpoint:
    path: /braindecode/augmentation/Mixup/operation
    method: GET
    data_selector: results
- name: MaskEncoding
  endpoint:
    path: /braindecode/augmentation/MaskEncoding
    method: GET
    data_selector: parameters
    params:
      probability: float
      max_mask_ratio: '0.1'
      n_segments: '1'
      random_state: None
- name: identity
  endpoint:
    path: /braindecode/augmentation/functional/identity
    method: GET
    data_selector: parameters
    params: {}
- name: time_reverse
  endpoint:
    path: /braindecode/augmentation/functional/time_reverse
    method: GET
    data_selector: X, y
    params: {}
- name: sign_flip
  endpoint:
    path: /braindecode/augmentation/functional/sign_flip
    method: GET
    data_selector: outputs
    params: {}
- name: ft_surrogate
  endpoint:
    path: /braindecode/augmentation/functional/ft_surrogate
    method: GET
- name: channels_dropout
  endpoint:
    path: /braindecode/augmentation/functional/channels_dropout
    method: GET
    data_selector: parameters
- name: channels_shuffle
  endpoint:
    path: /braindecode/augmentation/functional/channels_shuffle
    method: GET
    data_selector: records
- name: channels_permute
  endpoint:
    path: /braindecode/augmentation/functional/channels_permute
    method: GET
    data_selector: parameters
    params: {}
- name: gaussian_noise
  endpoint:
    path: /braindecode/augmentation/functional/gaussian_noise
    method: GET
    data_selector: parameters
    params: {}
- name: gaussian_noise
  endpoint:
    path: /augmentation/functional/gaussian_noise
    method: GET
- name: smooth_time_mask
  endpoint:
    path: /braindecode/augmentation/functional/smooth_time_mask
    method: GET
    data_selector: parameters
    params: {}
- name: bandstop_filter
  endpoint:
    path: /bandstop_filter
    method: GET
- name: bandstop_filter
  endpoint:
    path: /braindecode/augmentation/functional/bandstop_filter
    method: GET
    data_selector: parameters
    params: {}
- name: frequency_shift
  endpoint:
    path: /braindecode/augmentation/functional/frequency_shift
    method: GET
    data_selector: parameters
    params: {}
- name: segmentation_reconstruction
  endpoint:
    path: /braindecode/augmentation/functional/segmentation_reconstruction
    method: GET
    data_selector: records
- name: SegmentationReconstruction
  endpoint:
    path: /braindecode/augmentation/functional/segmentation_reconstruction
    method: GET
- name: mask_encoding
  endpoint:
    path: /braindecode/augmentation/functional/mask_encoding
    method: GET
    data_selector: parameters
    params: {}
- name: EEGClassifier
  endpoint:
    path: /braindecode/classifier/EEGClassifier
    method: GET
    data_selector: parameters
    params: {}
- name: predict_proba
  endpoint:
    path: /braindecode/classifier/predict_proba
    method: GET
    data_selector: y_pred
- name: predict_trials
  endpoint:
    path: /braindecode/classifier/predict_trials
    method: GET
    data_selector: trial_predictions
- name: set_partial_fit_request
  endpoint:
    path: /braindecode/classifier/set_partial_fit_request
    method: GET
    data_selector: self
- name: set_score_request
  endpoint:
    path: /braindecode/classifier/set_score_request
    method: GET
    data_selector: self
- name: EEGRegressor
  endpoint:
    path: /braindecode/regressor
    method: GET
    data_selector: records
    params: {}
- name: fit
  endpoint:
    path: /braindecode/regressor/fit
    method: POST
    data_selector: fit_params
    params: {}
- name: predict_proba
  endpoint:
    path: /braindecode/regressor/predict_proba
    method: POST
    data_selector: X
    params: {}
- name: CroppedLoss
  endpoint:
    path: /braindecode/training/CroppedLoss
    method: GET
    data_selector: records
- name: TimeSeriesLoss
  endpoint:
    path: /braindecode/training/TimeSeriesLoss
    method: GET
    data_selector: preds, targets
- name: mixup_criterion
  endpoint:
    path: /braindecode/training/losses.py#L69-L105
    method: GET
    data_selector: loss
    params: {}
- name: trial_preds_from_window_preds
  endpoint:
    path: /braindecode/training/trial_preds_from_window_preds
    method: GET
    data_selector: preds_per_trial
    params: {}
- name: predict_trials
  endpoint:
    path: /braindecode/training/predict_trials
    method: POST
    data_selector: trial_predictions
    params:
      module: torch.nn.Module
      dataset: braindecode.datasets.BaseConcatDataset
      return_targets: true
      batch_size: 1
      num_workers: 0
- name: set_random_seeds
  endpoint:
    path: /braindecode/util/set_random_seeds
    method: GET
    data_selector: parameters
    params: {}
- name: confusion_matrix
  endpoint:
    path: /braindecode/visualization/plot_confusion_matrix
    method: GET
    data_selector: fig
    params: {}
- name: EEGModuleMixin
  endpoint:
    path: /1.3/models/EEGModuleMixin
    method: GET
- name: model_parameters
  endpoint:
    path: /braindecode/models/ContraWR
    method: GET
    data_selector: parameters
    params: {}
- name: DeepSleepNet
  endpoint:
    path: /braindecode/models/DeepSleepNet
    method: GET
    data_selector: model
- name: EEG signal classification
  endpoint:
    path: /braindecode/models/eegminer
    method: GET
    data_selector: records
- name: EEGTCNet
  endpoint:
    path: /braindecode/models/eegtcnet
    method: GET
    data_selector: model_parameters
    params: {}
- name: ShallowFBCSPNet
  endpoint:
    path: /braindecode/models/ShallowFBCSPNet
    method: GET
    data_selector: records
- name: SignalJEPA_PostLocal
  endpoint:
    path: /models/SignalJEPA_PostLocal
    method: POST
- name: SignalJEPA_PostLocal
  endpoint:
    path: /braindecode/models/SignalJEPA_PostLocal
    method: GET
- name: SleepStagerBlanco2020
  endpoint:
    path: braindecode/models/SleepStagerBlanco2020
    method: GET
    data_selector: parameters
    params: {}
- name: TIDNet
  endpoint:
    path: /braindecode/models/tidnet
    method: GET
    data_selector: records
    params: {}
- name: tsception
  endpoint:
    path: /braindecode/models/TSception
    method: GET
    data_selector: parameters
    params: {}
- name: USleep
  endpoint:
    path: /services/data/vXX.X/sobjects/USleep
    method: GET
    data_selector: records
    params: {}
- name: hilbert_freq
  endpoint:
    path: /braindecode/functional/hilbert_freq
    method: GET
    data_selector: output_tensor
    params:
      forward_fourier: true
- name: identity
  endpoint:
    path: /braindecode/functional/identity
    method: GET
- name: plv_time
  endpoint:
    path: /braindecode/functional/plv_time
    method: GET
    data_selector: plv
    params:
      forward_fourier: true
      epsilon: 1.0e-06
- name: rescale_parameter
  endpoint:
    path: /braindecode/functional/rescale_parameter
    method: GET
    data_selector: parameters
    params: {}
- name: safe_log
  endpoint:
    path: /braindecode/functional/safe_log
    method: GET
    data_selector: Tensor
- name: square
  endpoint:
    path: /braindecode.functional.square
    method: GET
- name: BaseConcatDataset
  endpoint:
    path: /braindecode/datasets/BaseConcatDataset
    method: GET
- name: get_metadata
  endpoint:
    path: /braindecode/datasets/base.py#get_metadata
    method: GET
    data_selector: metadata
    params: {}
- name: save
  endpoint:
    path: /braindecode/datasets/base.py#save
    method: POST
    data_selector: save_response
    params: {}
- name: set_description
  endpoint:
    path: /braindecode/datasets/base.py#set_description
    method: PUT
    data_selector: set_description_response
    params: {}
- name: split
  endpoint:
    path: /braindecode/datasets/base.py#split
    method: POST
    data_selector: split_response
    params: {}
- name: BaseDataset
  endpoint:
    path: /datasets/BaseDataset
    method: GET
    data_selector: records
- name: BaseDataset
  endpoint:
    path: /braindecode/datasets/BaseDataset
    method: GET
    data_selector: samples
- name: BNCI2014001
  endpoint:
    path: /braindecode/datasets/moabb.py
    method: GET
    data_selector: data
    params:
      subject_ids: list(int) | int | None
- name: subject_data
  endpoint:
    path: /braindecode/datasets/HGD
    method: GET
    data_selector: data
    params:
      subject_ids: list(int) | int | None
- name: MOABBDataset
  endpoint:
    path: /datasets/moabb
    method: GET
    data_selector: datasets
    params: {}
- name: NMT Scalp EEG Dataset
  endpoint:
    path: /braindecode/datasets/nmt
    method: GET
    data_selector: recordings
    params: {}
- name: sleep_physionet_dataset
  endpoint:
    path: /content/sleep-edfx/1.0.0/
    method: GET
    data_selector: recordings
    params: {}
- name: SleepPhysionetChallenge2018
  endpoint:
    path: /content/challenge-2018/1.0.0/
    method: GET
- name: TUH EEG Corpus
  endpoint:
    path: /braindecode/datasets/TUH
    method: GET
    data_selector: records
    params: {}
- name: create_from_X_y
  endpoint:
    path: /braindecode/datasets/create_from_X_y
    method: POST
    data_selector: windows_datasets
    params: {}
- name: create_from_mne_raw
  endpoint:
    path: braindecode.datasets.create_from_mne_raw
    method: POST
    data_selector: windows_datasets
    params: {}
- name: create_from_mne_epochs
  endpoint:
    path: /braindecode/datasets/create_from_mne_epochs
    method: POST
    data_selector: windows_datasets
    params: {}
- name: create_windows_from_events
  endpoint:
    path: braindecode/preprocessing/create_windows_from_events
    method: GET
    data_selector: windows_datasets
- name: windows_datasets
  endpoint:
    path: /braindecode/preprocessing/create_fixed_length_windows
    method: GET
    data_selector: windows_datasets
    params: {}
- name: exponential_moving_standardize
  endpoint:
    path: /braindecode/preprocessing/exponential_moving_standardize
    method: GET
    data_selector: standardized
    params:
      factor_new: 0.001
      init_block_size: null
      eps: 0.0001
- name: filterbank
  endpoint:
    path: /braindecode/preprocessing/filterbank
    method: GET
- name: filterbank
  endpoint:
    path: /braindecode/preprocessing/filterbank
    method: GET
    data_selector: raw
    params:
      drop_original_signals: true
      order_by_frequency_band: false
- name: preprocess
  endpoint:
    path: /braindecode/preprocessing/preprocess
    method: GET
- name: DropChannels
  endpoint:
    path: /braindecode/preprocessing/DropChannels
    method: GET
    data_selector: ch_names
    params: {}
- name: SetEEGReference
  endpoint:
    path: /braindecode/preprocessing/SetEEGReference
    method: GET
- name: Filter
  endpoint:
    path: /braindecode/preprocessing/Filter
    method: GET
- name: filter
  endpoint:
    path: /braindecode/preprocessing/Filter
    method: GET
    data_selector: parameters
    params: {}
- name: picks
  endpoint:
    path: ''
    method: ''
    data_selector: ''
    params: {}
- name: exclude
  endpoint:
    path: ''
    method: ''
    data_selector: ''
    params: {}
- name: verbose
  endpoint:
    path: ''
    method: ''
    data_selector: ''
    params: {}
- name: Crop
  endpoint:
    path: /braindecode/preprocessing/Crop
    method: GET
    data_selector: raw
    params:
      tmin: '0.0'
      tmax: null
      include_tmax: true
      verbose: null
- name: save_concat_dataset
  endpoint:
    path: /datautil/save_concat_dataset
    method: POST
- name: load_concat_dataset
  endpoint:
    path: /braindecode/datautil/load_concat_dataset
    method: GET
    data_selector: concat_dataset
    params: {}
- name: RecordingSampler
  endpoint:
    path: /samplers/RecordingSampler
    method: GET
- name: info
  endpoint:
    path: /braindecode/samplers/RecordingSampler/info
    method: GET
    data_selector: Series
    params: {}
- name: n_recordings
  endpoint:
    path: /braindecode/samplers/RecordingSampler/n_recordings
    method: GET
    data_selector: int
    params: {}
- name: sample_recording
  endpoint:
    path: /braindecode/samplers/RecordingSampler/sample_recording
    method: GET
    data_selector: index
    params: {}
- name: sample_window
  endpoint:
    path: /braindecode/samplers/RecordingSampler/sample_window
    method: GET
    data_selector: window
    params: {}
- name: info
  endpoint:
    path: /info
    method: GET
    data_selector: pd.DataFrame
- name: n_recordings
  endpoint:
    path: /n_recordings
    method: GET
    data_selector: int
- name: kwargs
  endpoint:
    path: /kwargs
    method: GET
    data_selector: dict
- name: SequenceSampler
  endpoint:
    path: /braindecode/samplers/SequenceSampler
    method: GET
    data_selector: metadata
    params: {}
- name: relative_positioning_sampler
  endpoint:
    path: /braindecode/samplers/RelativePositioningSampler
    method: GET
    data_selector: examples
    params: {}
- name: presample
  endpoint:
    path: /braindecode/samplers/presample
    method: GET
    data_selector: examples
    params: {}
- name: sample_class
  endpoint:
    path: /braindecode/samplers/BalancedSequenceSampler/sample_class
    method: GET
    data_selector: rec_ind
- name: IdentityTransform
  endpoint:
    path: /braindecode/augmentation/IdentityTransform
    method: GET
    data_selector: records
- name: Compose
  endpoint:
    path: /braindecode/augmentation/Compose
    method: GET
    data_selector: transforms
    params: {}
- name: BaseDataset
  endpoint:
    path: /braindecode/datasets/BaseDataset
    method: GET
- name: Transform
  endpoint:
    path: /braindecode/augmentation/Transform
    method: GET
- name: TimeReverse
  endpoint:
    path: /braindecode/augmentation/TimeReverse
    method: GET
    data_selector: parameters
    params: {}
- name: SignFlip
  endpoint:
    path: /braindecode/augmentation/SignFlip
    method: GET
- name: ChannelsShuffle
  endpoint:
    path: /braindecode/augmentation/ChannelsShuffle
    method: GET
    data_selector: records
    params: {}
- name: get_augmentation_params
  endpoint:
    path: /braindecode/augmentation/ChannelsShuffle/get_augmentation_params
    method: GET
    data_selector: records
    params: {}
- name: operation
  endpoint:
    path: /braindecode/augmentation/ChannelsShuffle/operation
    method: GET
    data_selector: records
    params: {}
- name: get_augmentation_params
  endpoint:
    path: /braindecode/augmentation/ChannelsDropout/get_augmentation_params
    method: GET
    data_selector: params
    params: {}
- name: operation
  endpoint:
    path: /braindecode/augmentation/ChannelsDropout/operation
    method: GET
    data_selector: params
    params: {}
- name: get_augmentation_params
  endpoint:
    path: /braindecode/augmentation/get_augmentation_params
    method: GET
    data_selector: params
- name: operation
  endpoint:
    path: /braindecode/augmentation/operation
    method: GET
    data_selector: params
- name: ChannelsSymmetry
  endpoint:
    path: /braindecode/augmentation/ChannelsSymmetry
    method: GET
    data_selector: parameters
    params: {}
- name: SmoothTimeMask
  endpoint:
    path: /braindecode/augmentation/SmoothTimeMask
    method: GET
- name: get_augmentation_params
  endpoint:
    path: /braindecode/augmentation/SmoothTimeMask/get_augmentation_params
    method: GET
    data_selector: params
- name: operation
  endpoint:
    path: /braindecode/augmentation/SmoothTimeMask/operation
    method: GET
    data_selector: params
- name: FrequencyShift
  endpoint:
    path: /braindecode/augmentation/FrequencyShift
    method: GET
    data_selector: parameters
    params: {}
- name: get_augmentation_params
  endpoint:
    path: get_augmentation_params
    method: GET
    data_selector: params
- name: operation
  endpoint:
    path: operation
    method: GET
    data_selector: params
- name: SensorsZRotation
  endpoint:
    path: /braindecode/augmentation/SensorsZRotation
    method: GET
    data_selector: records
    params: {}
- name: Mixup
  endpoint:
    path: /braindecode/augmentation/Mixup
    method: GET
- name: get_augmentation_params
  endpoint:
    path: /braindecode/augmentation/get_augmentation_params
    method: GET
    data_selector: params
- name: operation
  endpoint:
    path: /braindecode/augmentation/operation
    method: GET
    data_selector: transformed_inputs
- name: time_reverse
  endpoint:
    path: /braindecode/augmentation/functional/time_reverse
    method: GET
    data_selector: X, y
    params: {}
- name: sign_flip
  endpoint:
    path: /braindecode/augmentation/functional/sign_flip
    method: GET
    data_selector: inputs
- name: ft_surrogate
  endpoint:
    path: /braindecode/augmentation/functional/ft_surrogate
    method: GET
    data_selector: records
    params: {}
- name: ft_surrogate
  endpoint:
    path: /braindecode/augmentation/functional/ft_surrogate
    method: GET
    data_selector: ''
    params: {}
- name: channels_dropout
  endpoint:
    path: /braindecode/augmentation/functional/channels_dropout
    method: GET
    data_selector: parameters
    params: {}
- name: channels_shuffle
  endpoint:
    path: /braindecode/augmentation/functional/channels_shuffle
    method: GET
- name: channels_shuffle
  endpoint:
    path: /braindecode/augmentation/functional/channels_shuffle
    method: GET
    data_selector: records
    params: {}
- name: channels_permute
  endpoint:
    path: /braindecode/augmentation/functional/channels_permute
    method: GET
    data_selector: parameters
- name: gaussian_noise
  endpoint:
    path: /braindecode/augmentation/functional/gaussian_noise
    method: GET
- name: gaussian_noise
  endpoint:
    path: /braindecode/augmentation/functional/gaussian_noise
    method: GET
    data_selector: parameters
    params: {}
- name: smooth_time_mask
  endpoint:
    path: /augmentation/functional/smooth_time_mask
    method: GET
- name: smooth_time_mask
  endpoint:
    path: /braindecode/augmentation/functional/smooth_time_mask
    method: GET
    data_selector: parameters
    params: {}
- name: bandstop_filter
  endpoint:
    path: braindecode/augmentation/functional/bandstop_filter
    method: GET
- name: bandstop_filter
  endpoint:
    path: /braindecode/augmentation/functional/bandstop_filter
    method: GET
    data_selector: parameters
    params: {}
- name: frequency_shift
  endpoint:
    path: /braindecode/augmentation/functional/frequency_shift
    method: GET
    data_selector: parameters
    params: {}
- name: sensors_rotation
  endpoint:
    path: /braindecode/augmentation/functional/sensors_rotation
    method: GET
    data_selector: records
- name: mixup
  endpoint:
    path: /braindecode/augmentation/functional/mixup
    method: GET
- name: mixup
  endpoint:
    path: /braindecode/augmentation/functional/mixup
    method: GET
    data_selector: X, y
    params: {}
- name: segmentation_reconstruction
  endpoint:
    path: /braindecode/augmentation/functional/segmentation_reconstruction
    method: GET
    data_selector: records
- name: EEGModel
  endpoint:
    path: /braindecode/eegmodel
    method: POST
    data_selector: results
- name: predict_trials
  endpoint:
    path: /braindecode/regressor/predict_trials
    method: GET
    data_selector: trial_predictions
    params: {}
- name: set_partial_fit_request
  endpoint:
    path: /braindecode/regressor/set_partial_fit_request
    method: GET
    data_selector: self
    params: {}
- name: set_score_request
  endpoint:
    path: /braindecode/regressor/set_score_request
    method: GET
    data_selector: self
    params: {}
- name: CroppedLoss
  endpoint:
    path: /braindecode/training/losses
    method: GET
    data_selector: preds
- name: TimeSeriesLoss
  endpoint:
    path: /braindecode/training/TimeSeriesLoss
    method: GET
    data_selector: loss_function
    params: {}
- name: mixup_criterion
  endpoint:
    path: /braindecode/training/losses/mixup_criterion
    method: GET
    data_selector: loss
    params: {}
- name: trial_preds
  endpoint:
    path: /braindecode/training/trial_preds
    method: POST
    data_selector: preds_per_trial
- name: predict_trials
  endpoint:
    path: /braindecode/training/predict_trials
    method: POST
    data_selector: trial_predictions
    params:
      module: torch.nn.Module
      dataset: braindecode.datasets.BaseConcatDataset
      return_targets: true
      batch_size: 1
      num_workers: 0
notes:
- Some objects like Contact may return nulls in deeply nested fields
- Removing deprecated variable `use_log_softmax` from `braindecode.models.base`
- Removing function `squeze_final_output` with Expression because of not compatibility
  with torch script
- Fixing conda env in the CI
- Adding data Augmentation module
- Adding Mixup augmentation
- If some input signal-related parameters are not specified, there will be an attempt
  to infer them from the other parameters.
- Mixin class for all EEG models in braindecode.
- BIOT is a large language model for biosignal classification.
- The architecture is based on the LinearAttentionTransformer and PatchFrequencyEmbedding
  modules.
- The model is trained with a contrastive loss on large EEG datasets TUH Abnormal
  EEG Corpus with 400K samples and Sleep Heart Health Study 5M.
- This implementation is not guaranteed to be correct, has not been checked by original
  authors.
- This implementation is adapted from the original CTNet source code to comply with
  Braindecode’s model standards.
- The authors recommend using data augmentation before using Conformer, e.g. segmentation
  and recombination.
- Please refer to the original paper and code for more details.
- The model was initially tuned on 4 seconds of 250 Hz data.
- Please adjust the scale of the temporal convolutional layer, and the pooling layer
  for better performance.
- This implementation is not guaranteed to be correct, has not been checked by original
  authors, only reimplemented from the paper based on [2].
- This implementation is not guaranteed to be correct, has not been checked by original
  authors, only reimplemented based on the paper.
- This implementation is not guaranteed to be correct, has not been checked by original
  authors, only reimplemented from the paper based on author implementation.
- EEGMiner incorporates learnable parameters for filter characteristics, allowing
  the model to adaptively learn optimal frequency bands and phase delays for the classification
  task.
- By default, using the PLV as a connectivity metric makes EEGMiner suitable for tasks
  requiring the analysis of phase relationships between different EEG channels.
- This implementation is not guaranteed to be correct, has not been checked by original
  authors, only reimplemented from the paper description.
- This implementation is not guaranteed to be correct, has not been checked by original
  authors, only reimplemented from the paper description and source code in tensorflow.
- The authors recommend using the default parameters for MI decoding.
- An intensive ablation study is included in the paper to understand the effect of
  each parameter on the model performance.
- This implementation is not guaranteed to be correct and has not been checked by
  the original authors; it has only been reimplemented from the paper description
  and source code.
- This implementation is not guaranteed to be correct and has not been checked by
  the original authors.
- This implementation is not guaranteed to be correct, has not been checked by original
  authors, only reimplemented from the paper description and Torch source code.
- This implementation is not guaranteed to be correct, has not been checked by original
  authors, only reimplemented based on the original code.
- This implementation is not guaranteed to be correct, has not been checked by original
  authors, only reimplemented from the paper description and the source that have
  not been tested.
- Model described in Schirrmeister2017.
- This implementation is based on the implementation from borra2020.
- Warning - This model was designed for signals of 30 seconds at 100Hz or 125Hz.
- This implementation is not guaranteed to be correct! it has not been checked by
  original authors.
- 'Code adapted from: SPOClab-ca/ThinkerInvariance'
- This implementation is not guaranteed to be correct, has not been checked by original
  authors. The modifications are minimal and the model is expected to work as intended.
- Sleep staging architecture from Perslev et al. (2021)
- This implementation is taken from timm library.
- All credit goes to Ross Wightman.
- The implementation is matching scipy implementation, but using torch.
- Experimental dataset for loading mne.Epochs organised in BIDS.
- The files must end with _epo.fif.
- Epoched data is not officially supported in BIDS.
- 'When using this dataset please cite Miller, Kai J. “A library of human electrocorticographic
  data and analyses.” Nature human behaviour 3, no. 11 (2019): 1225-1235.'
- Contains overnight recordings from 78 healthy subjects.
- Parent directory of the dataset is required
- Recording ids can be provided to specify which data to read
- Target name can be 'gender' or 'age'
- Can be ‘pathological’, ‘gender’, or ‘age’.
- If the last window does not end at trial_stop_offset_samples and drop_last_window
  is set to False, an additional overlapping window that ends at trial_stop_offset_samples
  is created.
- Windower that creates sliding windows.
- Added in version 0.15.
- Can raise an error, emit a warning, or ignore when channels to drop are not present.
- If a reference is requested that is not the average reference, this function removes
  any pre-existing average reference projections.
- During source localization, the EEG signal should have an average reference.
- Function operates in-place on the instance.
- Use mne.io.Raw.copy() if operation on a copy is desired.
- Flip the sign axis of each input with a given probability.
- Adds a random shift in the frequency domain to all channels.
- Classifier that does not assume softmax activation.
- Calls loss function directly without applying log or anything.
- This method is only relevant if enable_metadata_routing=True
- The module should be passed as a string or directly as a PyTorch module
- Can work with various data types including numpy arrays and pandas DataFrames
- 'Assumes predictions are in shape: n_batch size x n_classes x n_predictions (in
  time)'
- 'Assumes targets are in shape: n_batch size x n_classes x window_len (in time)'
- If the targets contain NaNs, the NaNs will be masked out and the loss will be only
  computed for predictions valid corresponding to valid target values.
- For unknown reasons, this affects global random generator and therefore all results
  may change slightly if you add this scoring callback.
- In some cases setting environment variable PYTHONHASHSEED may be needed before running
  a script to ensure full reproducibility.
- Inputs substantially shorter than the implied minimum length trigger automatic downscaling
  of kernels, pools, windows, and TCN kernel size to maintain validity.
- This model was designed for signals of 30 seconds at 100Hz or 125Hz.
- The authors recommend using data augmentation before using Conformer, e.g. segmentation
  and recombination, Please refer to the original paper and code for more details.
- The model was initially tuned on 4 seconds of 250 Hz data. Please adjust the scale
  of the temporal convolutional layer, and the pooling layer for better performance.
- The braindecode implementation follows the paper’s conv-only design with five blocks
  and reproduces the depthwise spatial step and dilated temporal stack.
- This implementation is not guaranteed to be correct and has not been checked by
  the original authors; it is a braindecode adaptation from the Pytorch source-code.
- This model is not meant for classification but for SSL pre-training.
- This implementation is based on the implementation from sincshallowcode.
- Resample PSG to 128 Hz and provide at least two channels (one EEG, one EOG). Choose
  epoch length i (often 30 s); ensure windows long enough to exploit the model’s receptive
  field (e.g., training on ≥ 17.5 min chunks).
- A base class for concatenated datasets.
- Holds either mne.Raw or mne.Epoch in self.datasets and has a pandas DataFrame with
  additional description.
- For loading “unofficial” BIDS datasets containing epoched data, you can use BIDSEpochsDataset.
- When using this dataset please cite [1].
- Dataset consists of EEG data from 9 subjects.
- The total size is 266 GB, so make sure you have enough space before downloading.
- Windows are extracted from the interval defined by the trial onset and offsets.
- Operates along the last dimension of the array.
- Can be 'raise', 'warn', or 'ignore' when entries in ch_names are not present in
  the raw instance.
- In order to apply a reference, the data must be preloaded. This is not necessary
  if `ref_channels='average'` and `projection=True`.
- For an average or REST reference, bad EEG channels are automatically excluded if
  they are properly set in `info['bads']`.
- Defaults to 0.1 for standard deviation.
- Permute EEG channels inverting left and right-side sensors.
- Add a random shift in the frequency domain to all channels.
- The shift is the same for all channels of a single example.
- Interpolates EEG signals over sensors rotated around the Z axis with an angle sampled
  uniformly between -max_degree and max_degree.
- Maximum rotation angles will be sampled between -max_degree and max_degree. Defaults
  to 15 degrees.
- Whether to use spherical splines for the interpolation or not. Defaults to True.
- Implementation based on ding2024
- Defines whether torch model passed to this class is cropped or not.
errors:
- 'ValueError: If some input signal-related parameters are not specified: and can
  not be inferred.'
- 'ValueError: If some input signal-related parameters are not specified and can not
  be inferred.'
- If the number of trials whose length is exceeded by the window size is smaller than
  accepted_bads_ratio, then only the corresponding trials are dropped, but the computation
  continues. Otherwise, an error is raised.
- 'FutureWarning: If add_log_softmax is True, since LogSoftmax final layer: will be
  removed in the future.'
- 'ValueError: If some input signal-related parameters are not specified and cannot
  be inferred.'
auth_info:
  mentioned_objects: []
client:
  base_url: https://braindecode.org
  auth:
    type: oauth2
    flow: refresh_token
    token_url: https://login.braindecode.org/services/oauth2/token
    client_id: '{{ dlt.secrets[''api_client_id''] }}'
    client_secret: '{{ dlt.secrets[''api_client_secret''] }}'
    refresh_token: '{{ dlt.secrets[''api_refresh_token''] }}'
    location: header
    header_name: Authorization
  headers:
    Accept: application/json
source_metadata: null
