resources:
- name: summaries
  endpoint:
    path: /summaries
    method: POST
    data_selector: summary
    params: {}
- name: videos
  endpoint:
    path: /videos
    method: POST
    data_selector: video
    params: {}
- name: videos
  endpoint:
    path: /videos
    method: GET
    data_selector: pagination.links
    params: {}
- name: live_streams
  endpoint:
    path: /live-streams
    method: GET
    data_selector: pagination.links
    params: {}
- name: videos
  endpoint:
    path: /videos
    method: POST
    data_selector: videoId
- name: upload
  endpoint:
    path: /upload
    method: POST
    data_selector: response
    params: {}
- name: uploadStatus
  endpoint:
    path: /uploadStatus
    method: POST
    data_selector: response
    params: {}
- name: videos
  endpoint:
    path: /videos
    method: POST
    data_selector: response
    params: {}
- name: videos
  endpoint:
    path: /videos
    method: POST
    data_selector: ''
    params: {}
- name: video
  endpoint:
    path: /videos
    method: POST
    data_selector: data
- name: create_video
  endpoint:
    path: /videos
    method: POST
    data_selector: ''
    params: {}
- name: upload_video
  endpoint:
    path: /videos/{videoId}/source
    method: POST
    data_selector: ''
    params: {}
- name: videos
  endpoint:
    path: /videos
    method: POST
    data_selector: ''
    params: {}
- name: videos
  endpoint:
    path: /videos/{video_id}/source
    method: POST
    data_selector: source
- name: videos
  endpoint:
    path: /videos
    method: POST
    data_selector: videoId
- name: delete_token
  endpoint:
    path: /upload-tokens/{token_id}
    method: DELETE
- name: upload_tokens
  endpoint:
    path: /upload-tokens
    method: POST
    data_selector: null
    params:
      ttl: 100
- name: upload
  endpoint:
    path: /upload
    method: POST
    data_selector: null
    params: {}
- name: list_tokens
  endpoint:
    path: /upload-tokens
    method: GET
    data_selector: null
    params:
      currentPage: 1
      pageSize: 25
- name: specific_token
  endpoint:
    path: /upload-tokens/{token_id}
    method: GET
    data_selector: null
    params: {}
- name: videos
  endpoint:
    path: /vod/list-videos-2
    method: GET
    data_selector: records
- name: video_details
  endpoint:
    path: /vod/show-video-details
    method: GET
    data_selector: records
- name: update_video
  endpoint:
    path: /vod/update-video-details
    method: POST
    data_selector: records
- name: add_thumbnail
  endpoint:
    path: /vod/add-a-thumbnail-to-your-video
    method: POST
    data_selector: records
- name: delete_video
  endpoint:
    path: /vod/delete-a-video
    method: DELETE
    data_selector: records
- name: video_status
  endpoint:
    path: /videos/{videoId}/status
    method: GET
    data_selector: status
- name: webhooks
  endpoint:
    path: /webhooks
    method: POST
    data_selector: webhook
- name: video
  endpoint:
    path: /vod/video-object
    method: POST
    data_selector: video
    params: {}
- name: tags
  endpoint:
    path: /tags
    method: GET
    data_selector: tags
    params: {}
- name: videos
  endpoint:
    path: /videos
    method: POST
    data_selector: video
    params: {}
- name: videos
  endpoint:
    path: /videos
    method: GET
- name: videos
  endpoint:
    path: /videos
    method: POST
    data_selector: data
- name: videos
  endpoint:
    path: /videos/{videoId}
    method: PATCH
    data_selector: data
- name: captions
  endpoint:
    path: /reference/api/Captions
    method: POST
    data_selector: captions
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: watermark
  endpoint:
    path: /watermarks
    method: POST
    data_selector: watermark
    params: {}
- name: list_watermarks
  endpoint:
    path: /watermarks
    method: GET
    data_selector: watermarks
    params: {}
- name: add_watermark_to_video
  endpoint:
    path: /videos
    method: POST
    data_selector: video
    params: {}
- name: delete_watermark
  endpoint:
    path: /watermarks/{watermark_id}
    method: DELETE
    data_selector: 'null'
    params: {}
- name: chapters
  endpoint:
    path: /videos/{video_id}/chapters
    method: GET
    data_selector: chapters
- name: upload_chapter
  endpoint:
    path: /videos/{video_id}/chapters/{language}
    method: POST
    data_selector: upload_response
- name: show_chapter
  endpoint:
    path: /videos/{video_id}/chapters/{language}
    method: GET
    data_selector: chapter_details
- name: delete_chapter
  endpoint:
    path: /videos/{video_id}/chapters/{language}
    method: DELETE
    data_selector: delete_response
- name: live_stream
  endpoint:
    path: /reference/api/Live-Streams#create-live-stream
    method: POST
- name: player_theme
  endpoint:
    path: /playerThemes
    method: POST
    data_selector: playerId
- name: player_logo
  endpoint:
    path: /players/{player_id}/logo
    method: POST
    data_selector: playerTheme
- name: update_video
  endpoint:
    path: /videos/{video_id}
    method: PATCH
    data_selector: updatedVideo
- name: videos
  endpoint:
    path: /videos
    method: GET
    data_selector: videos
- name: live_streams
  endpoint:
    path: /live-streams
    method: GET
    data_selector: live_streams
- name: analytics
  endpoint:
    path: /data/metrics/{metric}/{aggregation}
    method: GET
    data_selector: metrics
- name: tags
  endpoint:
    path: /tags
    method: GET
    data_selector: tags
- name: webhooks
  endpoint:
    path: /webhooks
    method: GET
    data_selector: webhooks
- name: videos
  endpoint:
    path: /videos
    method: GET
- name: live_streams
  endpoint:
    path: /live-streams
    method: GET
- name: webhooks
  endpoint:
    path: /webhooks
    method: GET
- name: AnalyticsApi
  endpoint:
    path: /data/metrics/{metric}/{aggregation}
    method: GET
- name: CaptionsApi
  endpoint:
    path: /videos/{videoId}/captions/{language}
    method: POST
- name: ChaptersApi
  endpoint:
    path: /videos/{videoId}/chapters/{language}
    method: POST
- name: LiveStreamsApi
  endpoint:
    path: /live-streams
    method: POST
- name: PlayerThemesApi
  endpoint:
    path: /players
    method: POST
- name: SummariesApi
  endpoint:
    path: /summaries
    method: POST
- name: TagsApi
  endpoint:
    path: /tags
    method: GET
- name: UploadTokensApi
  endpoint:
    path: /upload-tokens
    method: POST
- name: VideosApi
  endpoint:
    path: /videos
    method: POST
- name: WatermarksApi
  endpoint:
    path: /watermarks
    method: POST
- name: WebhooksApi
  endpoint:
    path: /webhooks
    method: POST
- name: videos
  endpoint:
    path: /videos
    method: GET
- name: analytics
  endpoint:
    path: /data/metrics/{metric}/{aggregation}
    method: GET
- name: captions
  endpoint:
    path: /videos/{videoId}/captions
    method: GET
- name: chapters
  endpoint:
    path: /videos/{videoId}/chapters
    method: GET
- name: live-streams
  endpoint:
    path: /live-streams
    method: GET
- name: player-themes
  endpoint:
    path: /players
    method: GET
- name: summaries
  endpoint:
    path: /summaries
    method: GET
- name: tags
  endpoint:
    path: /tags
    method: GET
- name: upload-tokens
  endpoint:
    path: /upload-tokens
    method: GET
- name: watermarks
  endpoint:
    path: /watermarks
    method: GET
- name: webhooks
  endpoint:
    path: /webhooks
    method: GET
- name: analytics
  endpoint:
    path: /data/metrics/{metric}/{aggregation}
    method: GET
- name: captions
  endpoint:
    path: /videos/{videoId}/captions/{language}
    method: POST
- name: chapters
  endpoint:
    path: /videos/{videoId}/chapters/{language}
    method: POST
- name: live_streams
  endpoint:
    path: /live-streams
    method: POST
- name: player_themes
  endpoint:
    path: /players
    method: POST
- name: summaries
  endpoint:
    path: /summaries
    method: POST
- name: tags
  endpoint:
    path: /tags
    method: GET
- name: upload_tokens
  endpoint:
    path: /upload-tokens
    method: POST
- name: videos
  endpoint:
    path: /videos
    method: POST
- name: watermarks
  endpoint:
    path: /watermarks
    method: POST
- name: webhooks
  endpoint:
    path: /webhooks
    method: POST
- name: analytics
  endpoint:
    path: /data/metrics/{metric}/{aggregation}
    method: GET
- name: captions
  endpoint:
    path: /videos/{videoId}/captions/{language}
    method: POST
- name: chapters
  endpoint:
    path: /videos/{videoId}/chapters/{language}
    method: POST
- name: live_streams
  endpoint:
    path: /live-streams
    method: POST
- name: player_themes
  endpoint:
    path: /players
    method: POST
- name: summaries
  endpoint:
    path: /summaries
    method: POST
- name: tags
  endpoint:
    path: /tags
    method: GET
- name: upload_tokens
  endpoint:
    path: /upload-tokens
    method: POST
- name: videos
  endpoint:
    path: /videos
    method: POST
- name: watermarks
  endpoint:
    path: /watermarks
    method: POST
- name: webhooks
  endpoint:
    path: /webhooks
    method: POST
- name: AnalyticsAPI
  endpoint:
    path: /data/metrics/{metric}/{aggregation}
    method: GET
- name: CaptionsAPI
  endpoint:
    path: /videos/{videoId}/captions/{language}
    method: GET
- name: ChaptersAPI
  endpoint:
    path: /videos/{videoId}/chapters/{language}
    method: GET
- name: LiveStreamsAPI
  endpoint:
    path: /live-streams
    method: GET
- name: PlayerThemesAPI
  endpoint:
    path: /players
    method: GET
- name: SummariesAPI
  endpoint:
    path: /summaries
    method: GET
- name: TagsAPI
  endpoint:
    path: /tags
    method: GET
- name: UploadTokensAPI
  endpoint:
    path: /upload-tokens
    method: GET
- name: VideosAPI
  endpoint:
    path: /videos
    method: GET
- name: WatermarksAPI
  endpoint:
    path: /watermarks
    method: GET
- name: WebhooksAPI
  endpoint:
    path: /webhooks
    method: GET
- name: videos
  endpoint:
    path: /videos
    method: GET
- name: watermarks
  endpoint:
    path: /watermarks
    method: GET
- name: webhooks
  endpoint:
    path: /webhooks
    method: GET
- name: Analytics
  endpoint:
    path: /data/metrics/{metric}/{aggregation}
    method: GET
- name: Captions
  endpoint:
    path: /videos/{videoId}/captions/{language}
    method: POST
- name: Chapters
  endpoint:
    path: /videos/{videoId}/chapters/{language}
    method: POST
- name: LiveStreams
  endpoint:
    path: /live-streams
    method: POST
- name: PlayerThemes
  endpoint:
    path: /players
    method: POST
- name: Summaries
  endpoint:
    path: /summaries
    method: POST
- name: Tags
  endpoint:
    path: /tags
    method: GET
- name: UploadTokens
  endpoint:
    path: /upload-tokens
    method: POST
- name: summaries
  endpoint:
    path: /summaries
    method: GET
    data_selector: summary-source
- name: generate_video_summary
  endpoint:
    path: /summaries
    method: POST
    data_selector: summary-source
- name: delete_video_summary
  endpoint:
    path: /summaries/{summaryId}
    method: DELETE
    data_selector: summary-source
- name: get_summary_details
  endpoint:
    path: /summaries/{summaryId}
    method: GET
    data_selector: summary-source
- name: update_summary_details
  endpoint:
    path: /summaries/{summaryId}
    method: PATCH
    data_selector: summary-source
- name: webhooks
  endpoint:
    path: /webhooks
    method: POST
    data_selector: webhookId
- name: upload_tokens
  endpoint:
    path: /upload-tokens
    method: GET
    data_selector: tokens
- name: videos
  endpoint:
    path: /videos
    method: GET
    data_selector: videos
    params: {}
- name: discarded_videos
  endpoint:
    path: /videos/discarded
    method: GET
    data_selector: videos
    params: {}
- name: videos
  endpoint:
    path: /videos
    method: GET
    data_selector: video
    params: {}
- name: video
  endpoint:
    path: /videos
    method: POST
    data_selector: videoId
- name: watermarks
  endpoint:
    path: /watermarks
    method: GET
    data_selector: watermarks
    params:
      sortBy: createdAt
      sortOrder: asc
      currentPage: 1
      pageSize: 25
- name: upload_watermark
  endpoint:
    path: /watermarks
    method: POST
    data_selector: watermark
    params: {}
- name: delete_watermark
  endpoint:
    path: /watermarks/{watermarkId}
    method: DELETE
    data_selector: watermark
    params: {}
- name: captions
  endpoint:
    path: /videos/{videoId}/captions
    method: GET
    data_selector: data
    params:
      currentPage: 1
      pageSize: 25
- name: caption
  endpoint:
    path: /videos/{videoId}/captions/{language}
    method: GET
    data_selector: data
    params: {}
- name: upload_caption
  endpoint:
    path: /videos/{videoId}/captions
    method: POST
    data_selector: data
    params: {}
- name: delete_caption
  endpoint:
    path: /videos/{videoId}/captions/{language}
    method: DELETE
    data_selector: data
    params: {}
- name: update_caption
  endpoint:
    path: /videos/{videoId}/captions/{language}
    method: PATCH
    data_selector: data
    params: {}
- name: chapters
  endpoint:
    path: /videos/{videoId}/chapters/{language}
    method: GET
    data_selector: data
    params:
      currentPage: 1
      pageSize: 25
- name: tags
  endpoint:
    path: /tags
    method: GET
    data_selector: data
    params:
      currentPage: 1
      pageSize: 25
- name: live_streams
  endpoint:
    path: /live-streams
    method: GET
- name: create_live_stream
  endpoint:
    path: /live-streams
    method: POST
- name: retrieve_live_stream
  endpoint:
    path: /live-streams/{liveStreamId}
    method: GET
- name: delete_live_stream
  endpoint:
    path: /live-streams/{liveStreamId}
    method: DELETE
- name: update_live_stream
  endpoint:
    path: /live-streams/{liveStreamId}
    method: PATCH
- name: upload_thumbnail
  endpoint:
    path: /live-streams/{liveStreamId}/thumbnail
    method: POST
- name: delete_thumbnail
  endpoint:
    path: /live-streams/{liveStreamId}/thumbnail
    method: DELETE
- name: player_themes
  endpoint:
    path: /players
    method: GET
    data_selector: records
    params:
      currentPage: 1
      pageSize: 25
- name: create_player
  endpoint:
    path: /players
    method: POST
    data_selector: records
- name: retrieve_player
  endpoint:
    path: /players/{playerId}
    method: GET
    data_selector: records
- name: delete_player
  endpoint:
    path: /players/{playerId}
    method: DELETE
    data_selector: records
- name: update_player
  endpoint:
    path: /players/{playerId}
    method: PATCH
    data_selector: records
- name: upload_logo
  endpoint:
    path: /players/logo
    method: POST
    data_selector: records
- name: delete_logo
  endpoint:
    path: /players/logo/{playerId}
    method: DELETE
    data_selector: records
- name: metrics
  endpoint:
    path: /data/metrics/{metric}/{aggregation}
    method: GET
    data_selector: data
    params:
      from: '2024-02-05T00:00:00+01:00'
      to: '2024-02-06T00:00:00+01:00'
      unique: true
      viewDuration: 5s
- name: metrics_over_time
  endpoint:
    path: /data/metrics/play/total
    method: GET
    data_selector: data
    params:
      from: '2024-02-05T00:00:00+01:00'
      to: '2024-02-06T00:00:00+01:00'
      interval: hour
      sortBy: metricValue
      sortOrder: asc
      unique: true
      viewDuration: 5s
      pageSize: 30
- name: webhooks
  endpoint:
    path: /webhooks
    method: GET
    data_selector: records
    params:
      currentPage: 1
      pageSize: 25
- name: create_webhook
  endpoint:
    path: /webhooks
    method: POST
- name: retrieve_webhook
  endpoint:
    path: /webhooks/{webhookId}
    method: GET
- name: delete_webhook
  endpoint:
    path: /webhooks/{webhookId}
    method: DELETE
- name: projects
  endpoint:
    path: /projects
    method: GET
    data_selector: items
- name: api_keys
  endpoint:
    path: /api-keys
    method: GET
    data_selector: items
- name: get_project_count
  endpoint:
    path: /projects/count
    method: GET
- name: list_projects
  endpoint:
    path: /projects
    method: GET
    params:
      page_size: 20
      page: 1
- name: create_project
  endpoint:
    path: /projects
    method: POST
- name: get_project
  endpoint:
    path: /projects/{project_id}
    method: GET
- name: update_project
  endpoint:
    path: /projects/{project_id}
    method: PATCH
- name: count_api_keys
  endpoint:
    path: /projects/{project_id}/api-keys/count
    method: GET
- name: list_api_keys
  endpoint:
    path: /projects/{project_id}/api-keys
    method: GET
    params:
      page_size: 20
      page: 1
- name: create_api_key
  endpoint:
    path: /projects/{project_id}/api-keys
    method: POST
- name: get_api_key
  endpoint:
    path: /projects/{project_id}/api-keys/{api_key_id}
    method: GET
- name: delete_api_key
  endpoint:
    path: /projects/{project_id}/api-keys/{api_key_id}
    method: DELETE
- name: update_api_key
  endpoint:
    path: /projects/{project_id}/api-keys/{api_key_id}
    method: PATCH
- name: delivery_usage
  endpoint:
    path: /projects/{project_id}/delivery-usage
    method: GET
    data_selector: items
    params:
      interval: month
- name: hosting_usage
  endpoint:
    path: /projects/{project_id}/hosting-usage
    method: GET
    data_selector: items
    params:
      interval: month
- name: webhooks
  endpoint:
    path: /reference/api/Webhooks#list-all-webhooks
    method: GET
notes:
- The API requires at least 50 spoken words in the video you upload to create a transcript
  and a summary.
- The length of a summary abstract is between 20 to 300 words.
- The sandbox mode has limitations including video length and watermark.
- API limitations depend on pricing plan and environment.
- The video ID is a unique identifier for the video object that you create.
- On creation, the video can either be public or private.
- API key is required for authentication.
- The video object will be created as public by default.
- Progressive upload allows breaking the video into chunks and uploading while recording.
- E-learning breaks the boundaries of the classic and conventional learning in a classroom.
- Every video uploaded to api.video is encoded/transcoded into an H264 MP4 and an
  HLS video stream with up to 6 different sizes.
- The API deletes empty video containers after 7 days.
- 'All api.video clients automatically use the Content-Range: bytes method to upload
  big videos for you.'
- Anyone who has a token can make an upload, so be careful how you set and manage
  tokens.
- If you do not include a TTL (time-to-live) value for a token, it lasts until you
  delete it.
- It's important to feel safe and know that the content you've uploaded is backed
  up.
- You might want to take an extra step and have your own backup.
- There are also cases where you would only want to use api.video's transcoding power
  but then host your transcoded videos on a different storage solution.
- Tags can be used to filter for specific content when listing videos.
- Videos are clipped by the definition of the object.
- The path to the video must be local.
- The `mp4Support` tag is set to `true` by default, making videos downloadable.
- Transcription is available in multiple languages using IETF language tags.
- The captions are uploaded per language.
- The api.video API does not return an error for incorrectly formatted VTT files.
  The response from the API will be 200, however, the captions will not be displayed.
- Uses OAuth2 with refresh token â€” requires setup of connected app in api
- Some objects like Contact may return nulls in deeply nested fields
- You can only add watermarks when creating a new video object.
- You cannot delete or edit watermarks after you add them to a video.
- Currently only VTT file format is supported.
- The api.video API does not return an error for incorrectly formatted VTT files.
- The primary consideration while selecting the region should be proximity to the
  majority of your user base and company legal requirements.
- For optimal performance for Asia, Africa, and Oceania, we recommend selecting the
  EU region.
- api.video supports RTMPS, RTMP, and SRT protocols for live streaming.
- The player logo should not exceed 200px x 100px, preferably in PNG format.
- Live streaming SDKs for mobile
- The access token generation mechanism is automatically handled by the client.
- Some endpoints don't require authentication.
- It's recommended to create an instance of ApiClient per thread in a multithreaded
  environment to avoid any potential issues.
- The /auth endpoint is the only route without rate limitation.
- You must NOT store your API key in your application code to prevent your API key
  from being exposed in your source code.
- Only the Public endpoints can be called without authentication.
- Most endpoints required to be authenticated using the API key mechanism.
- Public endpoints can be called without authentication.
- We recommend using Postman for testing purposes only and not for production.
- Webhook notifications are sent as POST requests with a JSON payload.
- Disposable bearer token authentication is more secure and has a short time to live.
- Token expires every 3600 seconds.
- Uses OAuth2 with delegated upload token
- The maximum value for 'from' is 30 days ago.
- The 'to' value is non-inclusive.
- Webhooks can push notifications to your server.
- Events include video encoding completion, live stream started/ended, and video caption
  generation.
- The basic authentication requires adding an HTTP header in your request.
- Deleting an API key is permanent - there is no way to retrieve it after deletion.
- Your request was missing an attribute that is required by the API.
- The request made to the endpoint didn't contain a supported HTTP method. For example,
  a request was made to the `/webhooks` endpoint with the `DELETE` method, which is
  not supported for the endpoint in question.
errors:
- 'Summary already exists: Using the Generate summaries or Update video object endpoint
  to generate a summary is only allowed for videos where no summary is generated yet.'
- 'REQUEST_LIMIT_EXCEEDED: Throttle API calls or reduce frequency.'
- '429 - Too many requests: Implement a retry method.'
- '401 Unauthorized: Recheck API key'
- 'Error! status: {response.status}'
- Mp4 asset not found
- 'Invalid language tag: The API returns an error if the language does not match supported
  tags.'
- 'REQUEST_LIMIT_EXCEEDED: Throttle API calls or reduce frequency'
- 'QUERY_TIMEOUT: Break down filters or add selectivity'
- '401 Unauthorized: Recheck OAuth scopes or token expiration'
- '200: Response for incorrectly formatted VTT files, captions will not be displayed.'
- '201: Created'
- '409: Conflict'
- '3xx: Redirection responses.'
- '4xx: Client errors.'
- '5xx: Server errors.'
- '401 Unauthorized: Recheck API key or token expiration'
- 204 No Content
- 404 Not Found
- 429 Too Many Requests
- '201'
- '400'
- '429'
- '400 Bad Request: Check request parameters'
- '404: Not Found'
- '429: Too Many Requests'
- '404 Not Found: Video or caption not found'
- '429 Too Many Requests: Rate limit exceeded'
- '404 Not Found: Check the videoId or language'
- '404 Not Found: Resource does not exist'
- 400 Bad Request
- '400: Bad Request'
- Authentication Errors
- General Errors
- Video Ingestion Errors
- The API key is invalid.
- The access token is invalid or expired.
- The upload token is invalid or expired.
- The refresh token is invalid.
- The "Authorization" header value is invalid.
- The "Authorization" header is missing.
- The upload token is missing.
- Suspended account
- Invalid attributes.
- The payload is invalid.
- Your account has reached the webhook urls limit.
- The requested resource could not be found.
- Unrecognized request URL.
- Method is not allowed for this route.
- Too many requests.
- Server error
- The uploaded file is empty.
- The uploaded file is invalid.
- There are more than one uploaded file in the request.
- There is no uploaded file in the request.
- The uploaded file is too large.
- This video source has already been copied from an existing video when the video
  was created.
- This video source has already been downloaded when the video was created.
- This video source has already been uploaded.
- This "Content-Range" upload has been started with "part", you cannot continue it
  with "bytes".
- This "Content-Range" upload has been started with "bytes", you cannot continue it
  with "part".
- The value of the "Content-Range" header is malformed, the expected format is "bytes
  <from_byte>-<to_byte>/<total_bytes>" or "part <part>/<total_parts>".
- This video source has already been initiated with a "Content-Range" upload.
- The "total_bytes" value in the "Content-Range" header must be the same than the
  one you already set for this video.
- The "from_byte" value in the "Content-Range" header is higher than the "to_byte"
  value.
- The size of the file you sent is different than the range length you set in the
  "Content-Range" header.
- The range in the "Content-Range" header overlaps with a previous one you already
  sent for this video.
- The range in the "Content-Range" header is too small.
- The "to_byte" value in the "Content-Range" header is higher than the maximum upper
  bound allowed for a video.
- The "to_byte" value in the "Content-Range" header is higher than the "total_bytes"
  value you set for this video.
- The "total_bytes" value in the "Content-Range" header is higher than the maximum
  allowed limit.
- The "total_bytes" value in the "Content-Range" header is lower than or equal to
  the upper bound of a range you already sent for this video.
- The "total_bytes" value in the "Content-Range" header must be greater than 0.
- The "total_parts" value in the "Content-Range" header must be the same than the
  one you already set for this video.
- The "part" value in the "Content-Range" header collides with a previous one you
  already sent for this video.
- The "part" value in the "Content-Range" header is higher than the maximum number
  of parts allowed for a video.
- The "part" value in the "Content-Range" header must be greater than 0.
- The "total_parts" value in the "Content-Range" header is higher than the maximum
  number of parts allowed for a video.
- The "total_parts" value in the "Content-Range" header is lower than or equal to
  a part number you already sent for this video.
- The "total_parts" value in the "Content-Range" header must be greater than 0.
- The uploaded file is too small.
- '409: A summary already exists or is being created on this video.'
- 'Attribute required: Your request was missing an attribute that is required by the
  API.'
- 'Invalid Query Parameter: You sent in a query parameter that doesn''t exist, isn''t
  correct for the endpoint you''re using, or has a bad value.'
- 'Invalid Payload: The payload you sent is missing OR it cannot be json decoded.'
- 'Method Not Allowed: The request made to the endpoint didn''t contain a supported
  HTTP method.'
- 'Unrecognized Request Url: A request was made to an invalid URL. For example, you''ve
  requested an endpoint `/foobar`.'
- 'Webhook Limit Reached: The amount of webhook subscriptions has been reached.'
auth_info:
  mentioned_objects:
  - OauthToken
  - AuthProvider
  - NamedCredential
client:
  base_url: https://api.video
  auth:
    type: oauth2
    flow: refresh_token
source_metadata: null
