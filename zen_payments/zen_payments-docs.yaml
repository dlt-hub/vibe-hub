resources:
- name: payment_methods
  endpoint:
    path: /payments/plugins/payment_methods
    method: GET
    data_selector: methods
    params: {}
- name: currencies
  endpoint:
    path: /api/v1/projects/685053/resources/345804
    method: GET
    data_selector: local_currencies
    params: {}
- name: Instant Payment Notification
  endpoint:
    path: /payments/plugins/ipn
    method: GET
- name: transaction_statuses
  endpoint:
    path: /payments/api-reference/transaction-statuses
    method: GET
    data_selector: statuses
- name: purchase
  endpoint:
    path: /payments/api-reference/create-purchase-transaction
    method: POST
- name: refund
  endpoint:
    path: /payments/api-reference/create-refund-transaction
    method: POST
- name: payout
  endpoint:
    path: /payments/api-reference/create-payout-transaction
    method: POST
- name: transaction
  endpoint:
    path: /v1/transactions
    method: POST
    data_selector: id
- name: capture_transaction
  endpoint:
    path: /v1/transactions/capture
    method: POST
    data_selector: body
    params: {}
- name: transaction
  endpoint:
    path: /payments/api-reference/create-transaction
    method: POST
    data_selector: transaction
    params: {}
- name: transaction_details
  endpoint:
    path: /payments/api-reference/purchase-transaction-details-zen-id
    method: GET
    data_selector: transaction_details
    params: {}
- name: transaction_details
  endpoint:
    path: /v1/transactions/{id}
    method: GET
    data_selector: transaction details
    params:
      id: string <uuid>
- name: transaction_details
  endpoint:
    path: /payments/api-reference/transaction-details
    method: GET
    data_selector: records
    params: {}
- name: transaction_details
  endpoint:
    path: /v1/transactions/merchant/{merchantTransactionId}
    method: GET
    params: {}
- name: transaction_details
  endpoint:
    path: /payments/api-reference/purchase-transaction-details-merchantTransactionId
    method: GET
    data_selector: body
- name: cancel_transaction
  endpoint:
    path: /v1/transactions/cancel
    method: POST
    data_selector: transaction
    params: {}
- name: transaction
  endpoint:
    path: /payments/api-reference/purchase-transaction
    method: GET
    data_selector: records
- name: renew_authorization
  endpoint:
    path: /v1/transactions/renewAuthorization
    method: POST
    data_selector: body
    params: {}
- name: transaction
  endpoint:
    path: /payments/api-reference/cancel-purchase-transaction
    method: GET
    data_selector: records
    params: {}
- name: validate_applepay_session
  endpoint:
    path: /v1/applepay/session
    method: POST
    data_selector: body
- name: cashback_calculate
  endpoint:
    path: /v1/cashback/calculate
    method: POST
    data_selector: paymentMethod
    params: {}
- name: refund
  endpoint:
    path: /v1/transactions/refund
    method: POST
    data_selector: null
    params: {}
- name: transaction
  endpoint:
    path: /payments/api-reference/create-transaction
    method: POST
    data_selector: id
    params: {}
- name: create_transaction
  endpoint:
    path: /v1/payouts
    method: POST
    data_selector: authorization
    params: {}
- name: payouts
  endpoint:
    path: /payouts
    method: POST
    data_selector: authorization
    params: {}
- name: transaction
  endpoint:
    path: /payments/api-reference/create-transaction
    method: POST
    data_selector: payout
    params: {}
- name: payout_details
  endpoint:
    path: /v1/payouts/{id}
    method: GET
    data_selector: payout details
    params:
      id: string
- name: transaction_details
  endpoint:
    path: /payments/api-reference/transaction-details
    method: GET
    data_selector: records
- name: transaction_details
  endpoint:
    path: /v1/payouts/merchant/{merchantTransactionId}
    method: GET
    data_selector: payout details
- name: transaction_details
  endpoint:
    path: /payments/api-reference/transaction-details
    method: GET
    data_selector: body
    params: {}
- name: capture_transaction
  endpoint:
    path: /v1/payouts/capture
    method: POST
    data_selector: null
    params: {}
- name: transaction
  endpoint:
    path: /payments/api-reference/purchase-transaction-details-meerchant-id
    method: GET
    data_selector: records
    params: {}
- name: cancel_transaction
  endpoint:
    path: /v1/payouts/cancel
    method: POST
    data_selector: response
    params: {}
- name: transaction
  endpoint:
    path: /transactions
    method: GET
    data_selector: records
- name: renew_transaction
  endpoint:
    path: /v1/payouts/renewAuthorization
    method: POST
    data_selector: null
    params: {}
- name: transaction
  endpoint:
    path: /payments/api-reference/transaction
    method: GET
    data_selector: data
- name: transaction_details
  endpoint:
    path: /v1/payouts/{id}/offers
    method: GET
    data_selector: array
    params: {}
- name: refresh_transaction_offers
  endpoint:
    path: /v1/payouts/offersRenew
    method: POST
    data_selector: array
    params: {}
- name: select_transaction_offer
  endpoint:
    path: /v1/payouts/offerSelect
    method: POST
    data_selector: transactionId
    params: {}
- name: transaction_offer
  endpoint:
    path: /payments/api-reference/transaction_offer
    method: GET
    data_selector: records
- name: payment_methods
  endpoint:
    path: /v3/terminals
    method: GET
    data_selector: data
    params:
      transactionType: TRT_REFUND
      limit: '10'
      offset: '0'
      sortBy: rank
      direction: asc
- name: payment_methods
  endpoint:
    path: /terminals
    method: GET
    data_selector: data
    params:
      transactionType: ''
- name: payment_links
  endpoint:
    path: /v1/payment-links
    method: POST
    data_selector: id
- name: payment_links
  endpoint:
    path: /v1/payment-links
    method: GET
    data_selector: data
    params:
      itemsPerPage: '10'
      page: '1'
- name: payment_link
  endpoint:
    path: /v1/payment-links/{id}
    method: GET
    data_selector: ''
    params: {}
- name: payment_link
  endpoint:
    path: /v1/payment-links/{id}
    method: PATCH
    data_selector: status
- name: customers
  endpoint:
    path: /v3/customers
    method: POST
    data_selector: id
- name: remove_customer
  endpoint:
    path: /v3/customers/{merchantCustomerId}
    method: DELETE
- name: add_customer_recipient
  endpoint:
    path: /v3/customers/{merchantCustomerId}/withdrawals/dragon
    method: POST
    data_selector: response
    params: {}
- name: add_payout_card
  endpoint:
    path: /v2/payout-profiles/card
    method: POST
    data_selector: response
    params: {}
- name: remove_payout_card
  endpoint:
    path: /v2/payout-profiles/card/{id}
    method: DELETE
    data_selector: success
    params: {}
- name: payout_card
  endpoint:
    path: /v2/payout-profiles/card
    method: GET
    data_selector: data
    params:
      itemsPerPage: '10'
      page: '1'
      direction: asc
      sortBy: createdAt
- name: payout_card
  endpoint:
    path: /v2/payout-profiles/card/{id}
    method: PATCH
    data_selector: id
    params: {}
- name: customers
  endpoint:
    path: /v3/customers
    method: GET
    data_selector: data
    params:
      itemsPerPage: '10'
      page: '1'
      direction: asc
      sortBy: createdAt
- name: customer
  endpoint:
    path: /v3/customers/{merchantCustomerId}
    method: GET
    data_selector: id
    params: {}
- name: customers
  endpoint:
    path: /v3/customers/{merchantCustomerId}
    method: PATCH
    data_selector: id
- name: fetch_card
  endpoint:
    path: /v3/customers/{merchantCustomerId}/payments/card/{id}
    method: GET
    data_selector: records
- name: update_card_details
  endpoint:
    path: /v3/customers/{merchantCustomerId}/payments/card/{id}
    method: PATCH
- name: remove_card
  endpoint:
    path: /v3/customers/{merchantCustomerId}/payments/card/{id}
    method: DELETE
    data_selector: success
    params: {}
- name: fetch_card_list
  endpoint:
    path: /v3/customers/{merchantCustomerId}/payments/card
    method: GET
    data_selector: data
    params:
      itemsPerPage: '10'
      page: '1'
      direction: asc
      sortBy: createdAt
- name: customer_recipient
  endpoint:
    path: /v3/customers/{merchantCustomerId}/withdrawals/dragon
    method: GET
    data_selector: data
    params:
      itemsPerPage: '10'
      page: '1'
      direction: asc
      sortBy: createdAt
- name: fetch_customer_recipient
  endpoint:
    path: /v3/customers/{merchantCustomerId}/withdrawals/dragon/{id}
    method: GET
    data_selector: application/json
- name: update_customer_details_recipient
  endpoint:
    path: /v3/customers/{merchantCustomerId}/withdrawals/dragon/{id}
    method: PATCH
    data_selector: ''
- name: remove_customer_recipient
  endpoint:
    path: /v3/customers/{merchantCustomerId}/withdrawals/dragon/{id}
    method: DELETE
    data_selector: success
    params: {}
- name: saved_merchant_customer_payout_recipient_list
  endpoint:
    path: /v3/customers/{merchantCustomerId}/payouts/recipients
    method: GET
    data_selector: data
    params:
      phoneNumber: ''
      currency: ''
      amount: ''
      itemsPerPage: '10'
      page: '1'
      direction: desc
      sortBy: lastUsedAt
- name: verify_merchant_customer_payout_recipient_card
  endpoint:
    path: /v3/customers/{merchantCustomerId}/payouts/recipients/pme_card/verify
    method: POST
    data_selector: id
    params: {}
- name: fetch_saved_merchant_customer_payout_card
  endpoint:
    path: /v3/customers/{merchantCustomerId}/payouts/recipients/pme_card/{id}
    method: GET
    data_selector: application/json
    params:
      phoneNumber: string
      currency: string
      amount: string
- name: widget_payout_card_process
  endpoint:
    path: /v3/customers/{merchantCustomerId}/payouts/card/widget-init
    method: POST
    data_selector: processId
    params:
      merchantCustomerId: string
- name: update_merchant_payout_card_alias
  endpoint:
    path: /v3/customers/{merchantCustomerId}/payouts/recipients/pme_card/{id}
    method: PATCH
    data_selector: success
    params:
      phoneNumber: string
- name: fetch_saved_payout_card_list
  endpoint:
    path: /v3/customers/{merchantCustomerId}/payouts/card
    method: GET
    data_selector: data
    params:
      itemsPerPage: '10'
      page: '1'
      direction: asc
      sortBy: createdAt
- name: remove_merchant_customer_payout_card
  endpoint:
    path: /v3/customers/{merchantCustomerId}/payouts/recipients/pme_card/{id}
    method: DELETE
    params:
      phoneNumber: string
- name: add_customer_payout_card
  endpoint:
    path: /v3/customers/{merchantCustomerId}/payouts/card
    method: POST
    data_selector: id
    params: {}
- name: fetch_saved_payout_card
  endpoint:
    path: /v3/customers/{merchantCustomerId}/payouts/card/{id}
    method: GET
    data_selector: body
    params: {}
- name: remove_customer_saved_payout_card
  endpoint:
    path: /v3/customers/{merchantCustomerId}/payouts/card/{id}
    method: DELETE
    data_selector: success
    params: {}
- name: add_paynow_recipient
  endpoint:
    path: /v3/customers/{merchantCustomerId}/withdrawals/paynow
    method: POST
    data_selector: id
- name: remove_paynow_profile
  endpoint:
    path: /v3/customers/{merchantCustomerId}/withdrawals/paynow/{id}
    method: DELETE
    params:
      merchantCustomerId: string
      id: string
- name: calculate_authorization
  endpoint:
    path: /v1/authorization/calculate
    method: POST
    data_selector: array
    params: {}
- name: calculate_reversed_authorization
  endpoint:
    path: /v1/authorization/calculate/reversed
    method: POST
    data_selector: data
    params: {}
- name: subscription_products
  endpoint:
    path: /v1/subscriptions/products
    method: GET
    data_selector: data
    params:
      itemsPerPage: '10'
      page: '1'
      direction: asc
      sortBy: createdAt
- name: subscription_product
  endpoint:
    path: /v1/subscriptions/products
    method: POST
    data_selector: url
- name: fetch_subscription_product
  endpoint:
    path: /v1/subscriptions/products/{id}
    method: GET
    data_selector: ''
- name: subscription_product
  endpoint:
    path: /v1/subscriptions/products/{id}
    method: PATCH
    data_selector: url
    params: {}
- name: remove_subscription_product
  endpoint:
    path: /v1/subscriptions/products/{id}
    method: DELETE
    data_selector: success
    params: {}
- name: subscription_plans
  endpoint:
    path: /subscriptions/plans
    method: GET
    data_selector: data
    params:
      itemsPerPage: '10'
      page: '1'
      direction: asc
      sortBy: createdAt
- name: subscriptions
  endpoint:
    path: /subscriptions/plans
    method: POST
    data_selector: id
    params: {}
- name: subscription_plan
  endpoint:
    path: /v1/subscriptions/plans/{id}
    method: GET
    data_selector: id
    params: {}
- name: remove_subscription_plan
  endpoint:
    path: /v1/subscriptions/plans/{id}
    method: DELETE
- name: activate_subscription_plan
  endpoint:
    path: /v1/subscriptions/plans/{id}/activate
    method: POST
    data_selector: ''
- name: deactivate_subscription_plan
  endpoint:
    path: /v1/subscriptions/plans/{id}/deactivate
    method: POST
    data_selector: id
    params:
      id: string<uuid>
- name: subscriptions
  endpoint:
    path: /v1/subscriptions
    method: GET
    data_selector: data
    params:
      itemsPerPage: '10'
      page: '1'
      direction: asc
      sortBy: createdAt
- name: subscription
  endpoint:
    path: /v1/subscriptions/{id}
    method: GET
    data_selector: records
    params:
      id: string<uuid>
- name: remove_subscription
  endpoint:
    path: /v1/subscriptions/{id}
    method: DELETE
    data_selector: success
    params: {}
- name: cancel_subscription
  endpoint:
    path: /v1/subscriptions/{id}/cancel
    method: POST
    data_selector: deletedAt
    params: {}
- name: download_report
  endpoint:
    path: /v1/reports/{id}/download
    method: GET
    data_selector: string
    params: {}
- name: payment_methods
  endpoint:
    path: /payments/api-reference/available-payment-methods
    method: GET
    data_selector: methods
    params: {}
- name: currency_conversion
  endpoint:
    path: /payments/api-integration/currency-conversion
    method: GET
- name: fraud_collector
  endpoint:
    path: /payments/api-integration/fraud-collector
    method: GET
- name: response_codes
  endpoint:
    path: /payments/api-integration/response-codes
    method: GET
- name: error_codes
  endpoint:
    path: /payments/api-integration/error-codes
    method: GET
- name: payment_methods
  endpoint:
    path: /terminals
    method: GET
    params:
      transactionType: string
- name: create_transaction
  endpoint:
    path: /create-purchase-transaction
    method: POST
- name: capture_transaction
  endpoint:
    path: /capture-purchase-transaction
    method: POST
- name: cancel_transaction
  endpoint:
    path: /cancel-purchase-transaction
    method: POST
- name: renew_transaction
  endpoint:
    path: /renew-purchase-transaction
    method: POST
- name: validate_applepay_session
  endpoint:
    path: /applepay-session
    method: POST
- name: calculate_cashback
  endpoint:
    path: /calculate-cashback
    method: POST
- name: get_transaction_details_by_zen_id
  endpoint:
    path: /purchase-transaction-details-zen-id
    method: GET
- name: get_transaction_details_by_merchant_id
  endpoint:
    path: /purchase-transaction-details-merchant-id
    method: GET
- name: refund_transaction
  endpoint:
    path: /v1/transactions/refund
    method: POST
- name: create_payout_transaction
  endpoint:
    path: /v1/transactions
    method: POST
- name: create_customer
  endpoint:
    path: /v3/customers
    method: POST
- name: add_payout_card
  endpoint:
    path: /v2/payout-profiles/card
    method: POST
- name: transaction_status
  endpoint:
    path: /v1/transactions/{id}
    method: GET
- name: merchant_transaction_status
  endpoint:
    path: /v1/transactions/merchant/{merchantTransactionId}
    method: GET
- name: transactions
  endpoint:
    path: /v1/transactions
    method: POST
    data_selector: cardInfo.token
- name: fetch_card_list
  endpoint:
    path: /v3/customers/{merchantCustomerId}/payments/card
    method: GET
    data_selector: records
- name: fetch_card
  endpoint:
    path: /v3/customers/{merchantCustomerId}/payments/card/{id}
    method: GET
    data_selector: records
- name: update_card
  endpoint:
    path: /v3/customers/{merchantCustomerId}/payments/card/{id}
    method: PATCH
    data_selector: records
- name: remove_card
  endpoint:
    path: /v3/customers/{merchantCustomerId}/payments/card/{id}
    method: DELETE
    data_selector: records
- name: customers
  endpoint:
    path: /v3/customers
    method: POST
- name: payout_card
  endpoint:
    path: /v2/payout-profiles/card
    method: POST
- name: payout_transaction
  endpoint:
    path: /payments/api-reference/create-payout-transaction
    method: POST
notes:
- Uses OAuth2 for authentication
- For plugin integration ZEN.COM supports the production environment only.
- You need to be fully onboarded to get access to production environment my.zen.com
  Merchant panel.
- API keys have special permissions that allow access to certain functionalities or
  data. It's important to keep them secure.
- Access to specific Payment methods depends on your agreement signed with ZEN.COM,
  subscription plan, the country where you operate, the type of your business, as
  well as individual conditions and the method of integration with ZEN.COM.
- Supports over 20 local languages to ensure the highest level of user experience
  during the Payment process.
- No-code integration
- ZEN.COM hosted checkout page
- Embedded Payment methods
- Card widget
- Payment links
- Currency Conversion Service
- Authorization Fee
- Shop logo on ZEN.COM checkout
- 3-Domain Secure
- Google Pay compatibility
- Apple Pay compatibility
- PayPal compatibility
- Instant Payment Notifications
- The demo stores have the most up-to-date versions of the e-commerce plugins offered
  by ZEN.COM installed.
- This manual is intended solely for the Magento version 2.0.x - 2.2.x.
- This manual is intended solely for the Prestashop version 1.7.x. Before the installation
  please ensure you are using the appropriate version.
- This manual is intended solely for the WooCommerce version 8.9.x or higher.
- You need to be fully onboarded to get access to API and Merchant panel
- Available Payment methods depend on your subscription plan and agreement.
- Payments begin with an authorization request and can have various statuses like
  New, Pending, Authorized, Accepted, Rejected, and Canceled.
- Instant Payment Notifications (IPN) inform you about transaction status updates,
  e.g., about changing the status from pending to rejected.
- Allows to get transaction details with defined Merchant's ID. Response contains
  all transaction details including status, fees and transaction type.
- Transaction cancel is only possible for specific types of transactions, such as
  card transactions and PayPal transactions.
- Allows to create new authorization attempt on the same transaction in case of expired
  or rejected previous authorization.
- Redirect url provided by PSP if 'actions' states it, buyer should be redirected
  to this url in order to proceed with payment
- Transaction fee, amount and currency details are optional
- Allows to process transaction refund when the parent transaction has 'accepted'
  status.
- It is possible to process full refund and partial refund.
- A service that allows the Merchant to create a single withdrawal order from the
  account.
- Allows to get payout details using Merchant transaction ID.
- Specific parameter 'capture' (true / false) determines if it is possible to capture
  the transaction.
- The service allows for the retry of authorization in case the initial process fails.
- Updates customer's cryptocurrency recipient (one customer each time). It is possible
  to update wallets supported by ZEN only.
- A unique identifier generated by requesting client must be provided in the request
  header.
- The added plan is activated by default.
- Full integration via API is intended for those Merchants, who want to fully customize
  ZEN.COM Payment system to their needs and preferences.
- Available Payment methods depend on your subscription plan and agreement
- Access to specific Payment methods depends on your agreement signed with ZEN.COM.
- Customers using the ZEN.COM checkout have the option to pay for goods or services
  in any currency, including those not listed below.
- You can display, search and filter all Transactions processed with ZEN.COM in your
  my.zen.com panel.
- API integration requires some mandatory features, some of them depend on the country
  context, type of Transaction or type of Payment method / Payment channel.
- Account Funding Transactions (AFT) is only required for specific card Transactions
  and specific Merchants.
- Address Verification Service is highly recommended as mandatory for United States,
  Canada, the United Kingdom, Australia, and New Zealand because sending additional
  AVS data significantly increases the approval rate for Transactions.
- Authorization Fee allows for the transfer of part or all of the Payment processing
  costs from the company or Merchant to the Customer.
- Merchants can continue to offer Customers high-cost Payment methods without burdening
  their budget with Transaction fees.
- Service eliminates the risk associated with currency exchange rate fluctuations
- Allows for Payments to be accepted in a chosen, specified currency
- This feature is mandatory for all API Integrations.
- This feature is only supported for API Integration.
- Each Payment link has a limited lifespan and restricted access.
- E-commerce reports are generated according to GMT+0 time zone.
- Request header with Authorization parameter is obliged for all requests sent to
  ZEN.COM API.
- One-click feature allows Merchants to initiate card Payment for Customer without
  a need for the Customer to input card data.
errors:
- '400 Bad Request: the request could not be understood or was missing required parameters'
- '401 Unauthorized: authentication failed or user does not have permissions for requested
  operation'
- '403 Forbidden: access denied'
- '404 Not Found: the resource was not found'
- '500 Internal Server Error: the server encountered an unexpected condition that
  prevented it from fulfilling the request'
- '503 Service unavailable: the server is not ready to handle the request'
- 'REQUEST_LIMIT_EXCEEDED: Throttle API calls or reduce frequency'
- 'QUERY_TIMEOUT: Break down filters or add selectivity'
- '401 Unauthorized: Recheck OAuth scopes or token expiration'
- 404 Record Not Found
- Request ID is required and must be between 38 to 1024 characters.
- '404: Record Not Found'
- 'Invalid request-id: Ensure it meets the length requirement of 38-1024 characters'
- '400 Bad Request: Check request parameters and their formats'
- 404 Not Found
- '404 Not Found: Ensure the merchantCustomerId is valid.'
- 401 Unauthorized - authentication failed or user does not have permissions for requested
  operation
- 403 Forbidden - access denied
- 404 Not Found - the resource was not found
- 405 Method Not Allowed - requested method is not supported for the resource
- 500 Internal Server Error - the server encountered an unexpected condition that
  prevented it from fulfilling the request
- 503 Service unavailable - the server is not ready to handle the request
- C30M17 | Technical error
- C30M16 | Technical error
- C30M15 | Technical error
- C30M13 | Technical error
- C30M12 | Technical error
- C30M11 | Format Error
- C30M10 | Internal server error.
- C30M09 | The parameter is malformed.
- C30M08 | The Package Signature is malformed.
- C30M07 | Incorrect Gateway Response. Connection is broken.
- C30001 | The transaction has been denied by the Gateway.
- C30002 | Technical error
- C30003 | Technical error
- C30004 | The transaction has been denied by the Gateway due to an interchange timeout.
- C30005 | The transaction has been declined.
- C30006 | Transaction pending cardholder authentication.
- C30009 | Technical error
- C30010 | The transaction has been partially approved.
- C30011 | The queried transaction is currently being processed.
- C30013 | Technical error
- C30015 | Technical error
- C40001 | Refer to card issuer
- C40003 | Technical error
- C40004 | Technical error
- C40005 | Do not honor
- C40006 | General error
- C40007 | Technical error
- C40008 | Honor with identification
- C40012 | Invalid transaction
- C40013 | Invalid transaction amount
- C40014 | Invalid card number
- C40015 | No such issuer
- C40030 | Format error
- C40041 | Merchant should retain card (card reported lost)
- C40043 | Merchant should retain card (card reported stolen)
- C40046 | Closed Card Account
- C40051 | Insufficient funds
- C40054 | Expired card
- C40055 | Incorrect PIN
- C40057 | Transaction not permitted to cardholder
- C40058 | Technical error
- C40059 | Suspected transaction. Contact Your Bank
- C40061 | Exceeds approval amount limit
- C40062 | Restricted Card
- C40063 | Technical error
- C40065 | Exceeds withdrawal frequency limit
- C40075 | Allowable number of PIN-entry tries exceeded
- C40078 | Blocked or card not activated
- C40089 | Account Closed – Do not try again
- C40090 | Cutoff is in process
- C40091 | Issuer unavailable or switch inoperative
- C40093 | Technical error
- C40094 | Duplicate transaction
- C40096 | System malfunction, System malfunction or certain field error conditions
- E40555 | Exchange rate expired. Please try again
- C400N0 | Unable to authorize / CVV2 failure
- C400O5 | Soft decline (SCA required)
- C3PM14 | At least one of the input parameters is missing. Parameter [X] is missing.
- C3PM09 | Transaction failed due to too many requests.
- C3PM18 | Payment Method not allowed for this merchant.
- C3PM20 | Operation not allowed for this merchant
- C3PM21 | Invalid Payment Method
- C3PM22 | Payment Method missing.
- C3PM50 | Transaction Amount not within pre-defined threshold.
- C3PM52 | Transaction Amount exceeds or does not match the Transaction amount referenced
  in the request.
- C3PM53 | Amount exceeds the Transaction Amount referenced in the request
- C3PM55 | The grand total amount does not match the item total amount.
- C3PM64 | The operation on the transaction referenced in the request has already
  been executed successful
- C3PM66 | Referral operation not allowed.
- C3PM67 | Could not find the original transaction. Make sure that it exists and that
  its details were transmitted correctly
- C3PM80 | Technical error
- CR0004 | Technical error
- C20001 | Card authentication failed
- C20002 | Unknown Device
- C20003 | Unsupported Device
- C20004 | Exceeds authentication frequency limit
- C20005 | Expired card
- C20006 | Invalid card number
- C20007 | Invalid transaction
- C20008 | No Card record
- C20009 | Technical error
- C20010 | Stolen card
- C20011 | Suspected fraud
- C20012 | Transaction not permitted to cardholder
- C20013 | Cardholder not enrolled in service
- C20014 | Transaction timed out / Abandoned transaction
- C20015 | Technical error
- C20016 | Technical error
- C20017 | Technical error
- C20018 | Technical error
- C20019 | Exceeds ACS maximum challenges
- C20020 | Non-Payment transaction not supported
- C20021 | Technical error
- C20022 | ACS technical issue
- C20023 | Decoupled Authentication required by ACS but not requested by 3DS Requestor
- C20024 | 3DS Requestor Decoupled Max Expiry Time exceeded
- C20025 | Decoupled Authentication was provided insufficient time to authenticate
  cardholder. ACS will not make attempt
- C20026 | Authentication attempted but not performed by the cardholder
- C20101 | 3DS Authentication Error
- C20102 | 3DS Authentication Error
- C20103 | 3DS Authentication Error
- C20201 | 3DS Authentication Error
- C20202 | 3DS Authentication Error
- C20203 | 3DS Authentication Error – Invalid data
- C20204 | 3DS Authentication Error – Duplicate Data Element
- C20301 | 3DS Authentication Error
- C20302 | 3DS Authentication Error
- C20303 | 3DS Authentication Error
- C20304 | 3DS Authentication Error – ISO Code Invalid
- C20305 | 3DS Authentication Error
- C20306 | 3DS Authentication Error – Invalid Merchant Category Code (MCC)
- C20307 | 3DS Authentication Error – Serial Number Not Valid
- C20402 | 3DS Authentication Error – Time Out
- C20403 | 3DS Authentication Error
- C20404 | 3DS Authentication Error
- C20405 | 3DS Authentication Error
- CR0102 | Limit
- CR0103 | Connection
- CR0109 | Payment Missmatch
- CR0110 | Payment method swapping
- S00001 | Creating new sendout in payment service provider failed.
- S00002 | Capturing sendout in payment service provider failed.
- 'Unauthorized: Check your Terminal API key.'
auth_info:
  mentioned_objects: []
client:
  base_url: https://api.zen.com
  auth:
    type: oauth2
source_metadata: null
