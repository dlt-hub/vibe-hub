resources:
- name: contributing_guide
  endpoint:
    path: /contributing
    method: GET
    data_selector: content
- name: overview_of_meg_eeg_analysis
  endpoint:
    path: intro/10_overview.html
    method: GET
    data_selector: records
- name: modifying_data_in_place
  endpoint:
    path: intro/15_inplace.html
    method: GET
    data_selector: records
- name: parsing_events_from_raw_data
  endpoint:
    path: intro/20_events_from_raw.html
    method: GET
    data_selector: records
- name: the_info_data_structure
  endpoint:
    path: intro/30_info.html
    method: GET
    data_selector: records
- name: working_with_sensor_locations
  endpoint:
    path: intro/40_sensor_locations.html
    method: GET
    data_selector: records
- name: configuring_mne_python
  endpoint:
    path: intro/50_configure_mne.html
    method: GET
    data_selector: records
- name: getting_started_with_mne_report
  endpoint:
    path: intro/70_report.html
    method: GET
    data_selector: records
- name: intro_overview
  endpoint:
    path: intro/10_overview.html
    method: GET
    data_selector: records
- name: intro_modifying_data
  endpoint:
    path: intro/15_inplace.html
    method: GET
    data_selector: records
- name: intro_parsing_events
  endpoint:
    path: intro/20_events_from_raw.html
    method: GET
    data_selector: records
- name: intro_info_structure
  endpoint:
    path: intro/30_info.html
    method: GET
    data_selector: records
- name: intro_sensor_locations
  endpoint:
    path: intro/40_sensor_locations.html
    method: GET
    data_selector: records
- name: intro_configuring_mne
  endpoint:
    path: intro/50_configure_mne.html
    method: GET
    data_selector: records
- name: intro_getting_started
  endpoint:
    path: intro/70_report.html
    method: GET
    data_selector: records
- name: meg_data
  endpoint:
    path: /api/v1/meg
    method: GET
    data_selector: data
    params: {}
- name: eeg_data
  endpoint:
    path: /api/v1/eeg
    method: GET
    data_selector: data
    params: {}
- name: meg_data
  endpoint:
    path: /meg/data
    method: GET
    data_selector: records
    params: {}
- name: eeg_data
  endpoint:
    path: /eeg/data
    method: GET
    data_selector: records
    params: {}
- name: fnirs_data
  endpoint:
    path: /fnirs/data
    method: GET
    data_selector: records
    params: {}
- name: coil_geometry
  endpoint:
    path: /mne/data/coil_def.dat
    method: GET
    data_selector: coil_descriptions
    params: {}
- name: data_formats
  endpoint:
    path: /docs/supported_data_formats
    method: GET
    data_selector: formats
    params: {}
- name: channel_types
  endpoint:
    path: /docs/supported_channel_types
    method: GET
    data_selector: channels
    params: {}
- name: 3D_locations
  endpoint:
    path: /docs/supported_formats_for_digitized_3D_locations
    method: GET
    data_selector: locations
    params: {}
- name: anonymize
  endpoint:
    path: /anonymize
    method: GET
    data_selector: records
    params: {}
- name: browse_raw
  endpoint:
    path: /browse_raw
    method: GET
    data_selector: records
    params: {}
- name: bti2fiff
  endpoint:
    path: /bti2fiff
    method: GET
    data_selector: records
    params: {}
- name: clean_eog_ecg
  endpoint:
    path: /clean_eog_ecg
    method: GET
    data_selector: records
    params: {}
- name: compare_fiff
  endpoint:
    path: /compare_fiff
    method: GET
    data_selector: records
    params: {}
- name: compute_proj_ecg
  endpoint:
    path: /compute_proj_ecg
    method: GET
    data_selector: records
    params: {}
- name: compute_proj_eog
  endpoint:
    path: /compute_proj_eog
    method: GET
    data_selector: records
    params: {}
- name: coreg
  endpoint:
    path: /coreg
    method: GET
    data_selector: records
    params: {}
- name: flash_bem
  endpoint:
    path: /flash_bem
    method: GET
    data_selector: records
    params: {}
- name: freeview_bem_surfaces
  endpoint:
    path: /freeview_bem_surfaces
    method: GET
    data_selector: records
    params: {}
- name: kit2fiff
  endpoint:
    path: /kit2fiff
    method: GET
    data_selector: records
    params: {}
- name: make_scalp_surfaces
  endpoint:
    path: /make_scalp_surfaces
    method: GET
    data_selector: options
    params: {}
- name: prepare_bem_model
  endpoint:
    path: /prepare_bem_model
    method: GET
    data_selector: options
    params: {}
- name: report
  endpoint:
    path: /report
    method: GET
    data_selector: options
    params: {}
- name: setup_forward_model
  endpoint:
    path: /setup_forward_model
    method: GET
    data_selector: options
    params: {}
- name: setup_source_space
  endpoint:
    path: /setup_source_space
    method: GET
    data_selector: options
    params: {}
- name: show_fiff
  endpoint:
    path: /show_fiff
    method: GET
    data_selector: options
    params: {}
- name: show_info
  endpoint:
    path: /show_info
    method: GET
    data_selector: options
    params: {}
- name: surf2bem
  endpoint:
    path: /surf2bem
    method: GET
    data_selector: options
    params: {}
- name: sys_info
  endpoint:
    path: /sys_info
    method: GET
    data_selector: options
    params: {}
- name: watershed_bem
  endpoint:
    path: /watershed_bem
    method: GET
    data_selector: options
    params: {}
- name: sample
  endpoint:
    path: /generated/mne.datasets.sample.data_path/
    method: GET
    data_selector: data
    params: {}
- name: ucl_opm_auditory
  endpoint:
    path: /generated/mne.datasets.ucl_opm_auditory.data_path/
    method: GET
    data_selector: data
    params: {}
- name: brainstorm_bst_raw
  endpoint:
    path: /generated/mne.datasets.brainstorm.bst_raw.data_path/
    method: GET
    data_selector: data
    params: {}
- name: brainstorm_bst_resting
  endpoint:
    path: /generated/mne.datasets.brainstorm.bst_resting.data_path/
    method: GET
    data_selector: data
    params: {}
- name: brainstorm_bst_median_nerve
  endpoint:
    path: /generated/mne.datasets.brainstorm.bst_raw.data_path/
    method: GET
    data_selector: data
    params: {}
- name: spm_faces
  endpoint:
    path: /generated/mne.datasets.spm_face.data_path/
    method: GET
    data_selector: data
    params: {}
- name: eegbci
  endpoint:
    path: /generated/mne.datasets.eegbci.load_data/
    method: GET
    data_selector: data
    params: {}
- name: somato
  endpoint:
    path: /generated/mne.datasets.somato.data_path/
    method: GET
    data_selector: data
    params: {}
- name: multimodal
  endpoint:
    path: /generated/mne.datasets.multimodal.data_path/
    method: GET
    data_selector: data
    params: {}
- name: fnirs_motor
  endpoint:
    path: /generated/mne.datasets.fnirs_motor.data_path/
    method: GET
    data_selector: data
    params: {}
- name: hf_sef
  endpoint:
    path: /generated/mne.datasets.hf_sef.data_path/
    method: GET
    data_selector: data
    params: {}
- name: visual_92_categories
  endpoint:
    path: /generated/mne.datasets.visual_92_categories.data_path/
    method: GET
    data_selector: data
    params: {}
- name: mtrf
  endpoint:
    path: /generated/mne.datasets.mtrf.data_path/
    method: GET
    data_selector: data
    params: {}
- name: kiloword
  endpoint:
    path: /generated/mne.datasets.kiloword.data_path/
    method: GET
    data_selector: data
    params: {}
- name: phantom_kit
  endpoint:
    path: /generated/mne.datasets.phantom_kit.data_path/
    method: GET
    data_selector: data
    params: {}
- name: phantom_4dbti
  endpoint:
    path: /generated/mne.datasets.phantom_4dbti.data_path/
    method: GET
    data_selector: data
    params: {}
- name: phantom_kernel
  endpoint:
    path: /generated/mne.datasets.phantom_kernel.data_path/
    method: GET
    data_selector: data
    params: {}
- name: opm
  endpoint:
    path: /generated/mne.datasets.opm.data_path/
    method: GET
    data_selector: data
    params: {}
- name: sleep_physionet_age
  endpoint:
    path: /generated/mne.datasets.sleep_physionet.age.fetch_data/
    method: GET
    data_selector: data
    params: {}
- name: refmeg_noise
  endpoint:
    path: /generated/mne.datasets.refmeg_noise.data_path/
    method: GET
    data_selector: data
    params: {}
- name: fsaverage
  endpoint:
    path: /generated/mne.datasets.fetch_fsaverage/
    method: GET
    data_selector: data
    params: {}
- name: infant_template
  endpoint:
    path: /generated/mne.datasets.fetch_infant_template/
    method: GET
    data_selector: data
    params: {}
- name: bad_channels
  endpoint:
    path: /marking_bad_channels
    method: POST
    data_selector: bads
- name: artifact_suppression_ssp
  endpoint:
    path: /artifact_suppression/ssp
    method: POST
    data_selector: ssp
- name: artifact_suppression_ica
  endpoint:
    path: /artifact_suppression/ica
    method: POST
    data_selector: ica
- name: epoching
  endpoint:
    path: /epoching
    method: POST
    data_selector: epochs
- name: source_localization
  endpoint:
    path: /source_localization
    method: POST
    data_selector: source_estimates
- name: anonymize
  endpoint:
    path: /anonymize
    method: POST
    data_selector: results
    params: {}
- name: browse_raw
  endpoint:
    path: /browse_raw
    method: GET
    data_selector: results
    params: {}
- name: bti2fiff
  endpoint:
    path: /bti2fiff
    method: POST
    data_selector: results
    params: {}
- name: clean_eog_ecg
  endpoint:
    path: /clean_eog_ecg
    method: POST
    data_selector: results
    params: {}
- name: compare_fiff
  endpoint:
    path: /compare_fiff
    method: GET
    data_selector: results
    params: {}
- name: compute_proj_ecg
  endpoint:
    path: /compute_proj_ecg
    method: POST
    data_selector: results
    params: {}
- name: compute_proj_eog
  endpoint:
    path: /compute_proj_eog
    method: POST
    data_selector: results
    params: {}
- name: coreg
  endpoint:
    path: /coreg
    method: GET
    data_selector: results
    params: {}
- name: flash_bem
  endpoint:
    path: /flash_bem
    method: POST
    data_selector: results
    params: {}
- name: freeview_bem_surfaces
  endpoint:
    path: /freeview_bem_surfaces
    method: GET
    data_selector: results
    params: {}
- name: kit2fiff
  endpoint:
    path: /kit2fiff
    method: POST
    data_selector: results
    params: {}
- name: what
  endpoint:
    path: /mne/what
    method: GET
    data_selector: raw
    params: {}
- name: raw_data
  endpoint:
    path: /api/read_raw_data
    method: GET
    data_selector: records
- name: epochs_data
  endpoint:
    path: /api/read_epochs_data
    method: GET
    data_selector: records
- name: epochs
  endpoint:
    path: /api/epochs
    method: GET
    data_selector: records
    params: {}
- name: evoked
  endpoint:
    path: /api/evoked
    method: GET
    data_selector: records
    params: {}
- name: Maintainer Team
  endpoint:
    path: /maintainer_team
    method: GET
    data_selector: team_members
- name: Steering Council
  endpoint:
    path: /steering_council
    method: GET
    data_selector: council_members
- name: External Advisory Board
  endpoint:
    path: /external_advisory_board
    method: GET
    data_selector: board_members
- name: bad_channel_repair
  endpoint:
    path: /bad_channel_repair
    method: POST
    data_selector: interpolated_data
    params: {}
- name: signal_space_projection
  endpoint:
    path: /signal_space_projection
    method: POST
    data_selector: projected_data
    params: {}
- name: coil_def
  endpoint:
    path: /mne/data/coil_def.dat
    method: GET
    data_selector: coil geometries
    params: {}
- name: minimum_norm_estimates
  endpoint:
    path: /minimum_norm_estimates
    method: GET
    data_selector: estimates
    params: {}
- name: linear_inverse_operator
  endpoint:
    path: /linear_inverse_operator
    method: GET
    data_selector: inverse_operator
    params: {}
- name: regularization
  endpoint:
    path: /regularization
    method: GET
    data_selector: regularization_info
    params: {}
- name: sample
  endpoint:
    path: /generated/mne.datasets.sample.data_path()
    method: GET
    data_selector: data
    params: {}
- name: ucl_opm_auditory
  endpoint:
    path: /generated/mne.datasets.ucl_opm_auditory.data_path()
    method: GET
    data_selector: data
    params: {}
- name: brainstorm_bst_raw
  endpoint:
    path: /generated/mne.datasets.brainstorm.bst_raw.data_path()
    method: GET
    data_selector: data
    params: {}
- name: brainstorm_bst_resting
  endpoint:
    path: /generated/mne.datasets.brainstorm.bst_resting.data_path()
    method: GET
    data_selector: data
    params: {}
- name: brainstorm_median_nerve
  endpoint:
    path: /generated/mne.datasets.brainstorm.bst_raw.data_path()
    method: GET
    data_selector: data
    params: {}
- name: spm_faces
  endpoint:
    path: /generated/mne.datasets.spm_face.data_path()
    method: GET
    data_selector: data
    params: {}
- name: eegbci
  endpoint:
    path: /generated/mne.datasets.eegbci.load_data()
    method: GET
    data_selector: data
    params: {}
- name: somato
  endpoint:
    path: /generated/mne.datasets.somato.data_path()
    method: GET
    data_selector: data
    params: {}
- name: multimodal
  endpoint:
    path: /generated/mne.datasets.multimodal.data_path()
    method: GET
    data_selector: data
    params: {}
- name: fnirs_motor
  endpoint:
    path: /generated/mne.datasets.fnirs_motor.data_path()
    method: GET
    data_selector: data
    params: {}
- name: hf_sef
  endpoint:
    path: /generated/mne.datasets.hf_sef.data_path()
    method: GET
    data_selector: data
    params: {}
- name: visual_92_categories
  endpoint:
    path: /generated/mne.datasets.visual_92_categories.data_path()
    method: GET
    data_selector: data
    params: {}
- name: mtrf
  endpoint:
    path: /generated/mne.datasets.mtrf.data_path()
    method: GET
    data_selector: data
    params: {}
- name: kiloword
  endpoint:
    path: /generated/mne.datasets.kiloword.data_path()
    method: GET
    data_selector: data
    params: {}
- name: phantom_kit
  endpoint:
    path: /generated/mne.datasets.phantom_kit.data_path()
    method: GET
    data_selector: data
    params: {}
- name: phantom_4dbti
  endpoint:
    path: /generated/mne.datasets.phantom_4dbti.data_path()
    method: GET
    data_selector: data
    params: {}
- name: phantom_kernel
  endpoint:
    path: /generated/mne.datasets.phantom_kernel.data_path()
    method: GET
    data_selector: data
    params: {}
- name: opm
  endpoint:
    path: /generated/mne.datasets.opm.data_path()
    method: GET
    data_selector: data
    params: {}
- name: sleep_physionet_age
  endpoint:
    path: /generated/mne.datasets.sleep_physionet.age.fetch_data()
    method: GET
    data_selector: data
    params: {}
- name: refmeg_noise
  endpoint:
    path: /generated/mne.datasets.refmeg_noise.data_path()
    method: GET
    data_selector: data
    params: {}
- name: fsaverage
  endpoint:
    path: /generated/mne.datasets.fetch_fsaverage()
    method: GET
    data_selector: data
    params: {}
- name: infant_template
  endpoint:
    path: /generated/mne.datasets.fetch_infant_template()
    method: GET
    data_selector: data
    params: {}
- name: ecog
  endpoint:
    path: /generated/mne.datasets.misc.data_path()
    method: GET
    data_selector: data
    params: {}
- name: internal_representation_units
  endpoint:
    path: /internal_representation_units
    method: GET
    data_selector: records
- name: floating_point_precision
  endpoint:
    path: /floating_point_precision
    method: GET
    data_selector: records
- name: supported_channel_types
  endpoint:
    path: /supported_channel_types
    method: GET
    data_selector: records
- name: supported_data_formats
  endpoint:
    path: /supported_data_formats
    method: GET
    data_selector: records
- name: supported_formats_for_digitized_3D_locations
  endpoint:
    path: /supported_formats_for_digitized_3D_locations
    method: GET
    data_selector: records
- name: minimum_norm_estimates
  endpoint:
    path: /minimum_norm/estimates
    method: GET
    data_selector: results
- name: linear_inverse_operator
  endpoint:
    path: /linear_inverse/operator
    method: GET
    data_selector: results
- name: anonymize
  endpoint:
    path: /anonymize
    method: POST
    data_selector: output
    params: {}
- name: browse_raw
  endpoint:
    path: /browse_raw
    method: GET
    data_selector: raw_data
    params: {}
- name: bti2fiff
  endpoint:
    path: /bti2fiff
    method: POST
    data_selector: fiff_data
    params: {}
- name: clean_eog_ecg
  endpoint:
    path: /clean_eog_ecg
    method: POST
    data_selector: cleaned_data
    params: {}
- name: compare_fiff
  endpoint:
    path: /compare_fiff
    method: GET
    data_selector: comparison_result
    params: {}
- name: compute_proj_ecg
  endpoint:
    path: /compute_proj_ecg
    method: POST
    data_selector: ecg_projection
    params: {}
- name: compute_proj_eog
  endpoint:
    path: /compute_proj_eog
    method: POST
    data_selector: eog_projection
    params: {}
- name: coreg
  endpoint:
    path: /coreg
    method: GET
    data_selector: coregistration_gui
    params: {}
- name: flash_bem
  endpoint:
    path: /flash_bem
    method: POST
    data_selector: bem_model
    params: {}
- name: freeview_bem_surfaces
  endpoint:
    path: /freeview_bem_surfaces
    method: GET
    data_selector: bem_visualization
    params: {}
- name: kit2fiff
  endpoint:
    path: /kit2fiff
    method: POST
    data_selector: imported_data
    params: {}
- name: sample
  endpoint:
    path: /datasets/sample/data_path
    method: GET
- name: ucl_opm_auditory
  endpoint:
    path: /datasets/ucl_opm_auditory/data_path
    method: GET
- name: brainstorm_bst_raw
  endpoint:
    path: /datasets/brainstorm/bst_raw/data_path
    method: GET
- name: brainstorm_bst_resting
  endpoint:
    path: /datasets/brainstorm/bst_resting/data_path
    method: GET
- name: brainstorm_bst_median_nerve
  endpoint:
    path: /datasets/brainstorm/bst_raw/data_path
    method: GET
- name: spm_face
  endpoint:
    path: /datasets/spm_face/data_path
    method: GET
- name: eegbci
  endpoint:
    path: /datasets/eegbci/load_data
    method: GET
- name: somato
  endpoint:
    path: /datasets/somato/data_path
    method: GET
- name: multimodal
  endpoint:
    path: /datasets/multimodal/data_path
    method: GET
- name: fnirs_motor
  endpoint:
    path: /datasets/fnirs_motor/data_path
    method: GET
- name: hf_sef
  endpoint:
    path: /datasets/hf_sef/data_path
    method: GET
- name: visual_92_categories
  endpoint:
    path: /datasets/visual_92_categories/data_path
    method: GET
- name: mtrf
  endpoint:
    path: /datasets/mtrf/data_path
    method: GET
- name: kiloword
  endpoint:
    path: /datasets/kiloword/data_path
    method: GET
- name: phantom_kit
  endpoint:
    path: /datasets/phantom_kit/data_path
    method: GET
- name: phantom_4dbti
  endpoint:
    path: /datasets/phantom_4dbti/data_path
    method: GET
- name: phantom_kernel
  endpoint:
    path: /datasets/phantom_kernel/data_path
    method: GET
- name: opm
  endpoint:
    path: /datasets/opm/data_path
    method: GET
- name: sleep_physionet
  endpoint:
    path: /datasets/sleep_physionet/age/fetch_data
    method: GET
- name: refmeg_noise
  endpoint:
    path: /datasets/refmeg_noise/data_path
    method: GET
- name: fsaverage
  endpoint:
    path: /datasets/fetch_fsaverage
    method: GET
- name: infant_template
  endpoint:
    path: /datasets/fetch_infant_template
    method: GET
- name: ecog
  endpoint:
    path: /datasets/misc/data_path
    method: GET
- name: anonymize
  endpoint:
    path: /mne/anonymize
    method: GET
    data_selector: options
    params: {}
- name: browse_raw
  endpoint:
    path: /mne/browse_raw
    method: GET
    data_selector: options
    params: {}
- name: bti2fiff
  endpoint:
    path: /mne/bti2fiff
    method: GET
    data_selector: options
    params: {}
- name: clean_eog_ecg
  endpoint:
    path: /mne/clean_eog_ecg
    method: GET
    data_selector: options
    params: {}
- name: compare_fiff
  endpoint:
    path: /mne/compare_fiff
    method: GET
    data_selector: options
    params: {}
- name: compute_proj_ecg
  endpoint:
    path: /mne/compute_proj_ecg
    method: GET
    data_selector: options
    params: {}
- name: compute_proj_eog
  endpoint:
    path: /mne/compute_proj_eog
    method: GET
    data_selector: options
    params: {}
- name: coreg
  endpoint:
    path: /mne/coreg
    method: GET
    data_selector: options
    params: {}
- name: flash_bem
  endpoint:
    path: /mne/flash_bem
    method: GET
    data_selector: options
    params: {}
- name: freeview_bem_surfaces
  endpoint:
    path: /mne/freeview_bem_surfaces
    method: GET
    data_selector: options
    params: {}
- name: kit2fiff
  endpoint:
    path: /mne/kit2fiff
    method: GET
    data_selector: options
    params: {}
- name: make_scalp_surfaces
  endpoint:
    path: mne make_scalp_surfaces
    method: OPTIONS
    data_selector: options
    params: {}
- name: prepare_bem_model
  endpoint:
    path: mne prepare_bem_model
    method: OPTIONS
    data_selector: options
    params: {}
- name: report
  endpoint:
    path: mne report
    method: OPTIONS
    data_selector: options
    params: {}
- name: setup_forward_model
  endpoint:
    path: mne setup_forward_model
    method: OPTIONS
    data_selector: options
    params: {}
- name: setup_source_space
  endpoint:
    path: mne setup_source_space
    method: OPTIONS
    data_selector: options
    params: {}
- name: show_fiff
  endpoint:
    path: mne show_fiff
    method: OPTIONS
    data_selector: options
    params: {}
- name: show_info
  endpoint:
    path: mne show_info
    method: OPTIONS
    data_selector: options
    params: {}
- name: surf2bem
  endpoint:
    path: mne surf2bem
    method: OPTIONS
    data_selector: options
    params: {}
- name: sys_info
  endpoint:
    path: mne sys_info
    method: OPTIONS
    data_selector: options
    params: {}
- name: watershed_bem
  endpoint:
    path: mne watershed_bem
    method: OPTIONS
    data_selector: options
    params: {}
- name: check_type_of_fif_file
  endpoint:
    path: /mne/what
    method: GET
    data_selector: raw
    params: {}
- name: raw_data
  endpoint:
    path: /mne.io.read_raw_eeglab
    method: GET
    data_selector: raw
    params: {}
- name: epochs_data
  endpoint:
    path: /mne.read_epochs_eeglab
    method: GET
    data_selector: epochs
    params: {}
- name: apply_hilbert
  endpoint:
    path: /mne/io/Raw/apply_hilbert
    method: GET
    data_selector: self
    params: {}
- name: apply_proj
  endpoint:
    path: /mne/_fiff/proj/apply_proj
    method: GET
    data_selector: self
    params: {}
- name: compute_psd
  endpoint:
    path: /compute/psd
    method: POST
    data_selector: spectrum
- name: compute_tfr
  endpoint:
    path: /compute/tfr
    method: POST
    data_selector: tfr
- name: crop
  endpoint:
    path: /crop
    method: GET
    data_selector: raw
    params: {}
- name: crop_by_annotations
  endpoint:
    path: /crop_by_annotations
    method: GET
    data_selector: raws
    params: {}
- name: del_proj
  endpoint:
    path: /del_proj
    method: GET
    data_selector: self
    params: {}
- name: describe
  endpoint:
    path: /describe
    method: GET
    data_selector: result
    params: {}
- name: drop_channels
  endpoint:
    path: /drop_channels
    method: GET
    data_selector: inst
    params: {}
- name: export
  endpoint:
    path: /export
    method: GET
    data_selector: output
    params: {}
- name: plot_raw_data
  endpoint:
    path: /plot
    method: GET
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: plot_psd_topomap
  endpoint:
    path: /plot_psd_topomap
    method: GET
    data_selector: parameters
- name: epochs
  endpoint:
    params: {}
- name: apply_proj
  endpoint:
    method: POST
- name: crop
  endpoint:
    path: /crop
    method: GET
    data_selector: raw
    params:
      tmin: '0.0'
      tmax: null
      include_tmax: true
      verbose: null
- name: crop_by_annotations
  endpoint:
    path: /crop_by_annotations
    method: GET
    data_selector: raws
    params:
      annotations: null
      verbose: null
- name: del_proj
  endpoint:
    path: /del_proj
    method: GET
    data_selector: self
    params:
      idx: all
- name: describe
  endpoint:
    path: /describe
    method: GET
    data_selector: result
    params:
      data_frame: false
- name: drop_channels
  endpoint:
    path: /drop_channels
    method: GET
    data_selector: inst
    params:
      ch_names: null
      on_missing: raise
- name: export
  endpoint:
    path: /export
    method: GET
    data_selector: raw
    params:
      fname: null
      fmt: auto
      physical_range: auto
      add_ch_type: false
      overwrite: false
      verbose: null
- name: get_montage
  endpoint:
    path: /get_montage
    method: GET
    data_selector: montage
    params: {}
- name: interpolate_bads
  endpoint:
    path: /interpolate_bads
    method: GET
    data_selector: inst
    params: {}
- name: iter_evoked
  endpoint:
    path: /iter_evoked
    method: GET
    data_selector: evoked
    params: {}
- name: load_data
  endpoint:
    path: /load_data
    method: GET
    data_selector: epochs
    params: {}
- name: metadata
  endpoint:
    path: /metadata
    method: GET
    data_selector: metadata
    params: {}
- name: next
  endpoint:
    path: /next
    method: GET
    data_selector: epoch
    params: {}
- name: pick
  endpoint:
    path: /pick
    method: GET
    data_selector: inst
    params: {}
- name: pick_channels
  endpoint:
    path: /pick_channels
    method: GET
    data_selector: inst
    params: {}
- name: pick_types
  endpoint:
    path: /pick_types
    method: GET
    data_selector: inst
    params: {}
- name: dipole_time_course_channels
  endpoint:
    path: /dipole/time_course
    method: GET
    data_selector: channels
- name: dipole_goodness_of_fit_channels
  endpoint:
    path: /dipole/goodness_of_fit
    method: GET
    data_selector: channels
- name: bio_channels
  endpoint:
    path: /bio
    method: GET
    data_selector: channels
- name: electrocorticography_channels
  endpoint:
    path: /ecog
    method: GET
    data_selector: channels
- name: functional_near_infrared_spectroscopy_channels
  endpoint:
    path: /fnirs
    method: GET
    data_selector: channels
- name: eeg_csd_channels
  endpoint:
    path: /csd
    method: GET
    data_selector: channels
- name: deep_brain_stimulation_channels
  endpoint:
    path: /dbs
    method: GET
    data_selector: channels
- name: temperature_channels
  endpoint:
    path: /temperature
    method: GET
    data_selector: channels
- name: galvanic_skin_response_channels
  endpoint:
    path: /gsr
    method: GET
    data_selector: channels
- name: eyetracking_channels
  endpoint:
    path: /eyetrack
    method: GET
    data_selector: channels
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: plot_psd_topomap
  endpoint:
    path: /plot_psd_topomap
    method: GET
    data_selector: records
    params: {}
- name: plot_drop_log
  endpoint:
    path: /plot_drop_log
    method: GET
    data_selector: parameters
    params:
      threshold: 0
      n_max_plot: 20
      subject: null
      color:
      - 0.9
      - 0.9
      - 0.9
      width: 0.8
      ignore:
      - IGNORED
      show: true
- name: plot_image
  endpoint:
    path: /plot_image
    method: GET
    data_selector: parameters
    params:
      picks: null
      sigma: 0.0
      vmin: null
      vmax: null
      colorbar: true
      order: null
      show: true
      units: null
      scalings: null
      cmap: null
      fig: null
      axes: null
      overlay_times: null
      combine: null
      group_by: null
      evoked: true
- name: set_annotations
  endpoint:
    path: /set_annotations
    method: POST
- name: set_channel_types
  endpoint:
    path: /set_channel_types
    method: POST
- name: set_eeg_reference
  endpoint:
    path: /set_eeg_reference
    method: POST
- name: set_meas_date
  endpoint:
    path: /set_meas_date
    method: POST
- name: set_montage
  endpoint:
    path: /set_montage
    method: POST
- name: plot_psd
  endpoint:
    path: /mne/epochs.py
    method: GET
    data_selector: power or amplitude spectra
    params: {}
- name: plot_psd_topo
  endpoint:
    path: /mne/time_frequency/spectrum.py
    method: GET
    data_selector: power spectral density
    params: {}
- name: topomap
  endpoint:
    path: /plot_psd_topomap
    method: GET
- name: plot_psd_topomap
  endpoint:
    path: /plot_psd_topomap
    method: GET
    data_selector: fig
    params: {}
- name: plot_sensors
  endpoint:
    path: /plot_sensors
    method: GET
    data_selector: fig
    params: {}
- name: plot_topo_image
  endpoint:
    path: /plot_topo_image
    method: GET
    data_selector: fig
    params: {}
- name: rename_channels
  endpoint:
    path: /rename_channels
    method: GET
    data_selector: None
    params: {}
- name: apply_proj
  endpoint:
    path: /apply_proj
    method: POST
    data_selector: self
    params: {}
- name: Epochs
  endpoint:
    path: /mne/Epochs
    method: GET
    data_selector: records
- name: epochs
  endpoint:
    path: /epochs
    method: GET
    data_selector: epochs
    params: {}
- name: evoked
  endpoint:
    path: /evoked
    method: GET
    data_selector: evoked
    params: {}
- name: compute_tfr
  endpoint:
    path: /compute_tfr
    method: GET
- name: evoked_data
  endpoint:
    path: /mne/evoked
    method: GET
    data_selector: data
    params: {}
- name: apply_hilbert
  endpoint:
    path: /apply_hilbert
    method: GET
- name: apply_proj
  endpoint:
    path: /apply_proj
    method: GET
- name: crop
  endpoint:
    path: /mne/epochs/crop
    method: GET
    data_selector: epochs
    params: {}
- name: decimate
  endpoint:
    path: /mne/utils/decimate
    method: GET
    data_selector: inst
    params: {}
- name: del_proj
  endpoint:
    path: /mne/_fiff/proj
    method: GET
    data_selector: self
    params: {}
- name: drop
  endpoint:
    path: /mne/epochs/drop
    method: GET
    data_selector: epochs
    params: {}
- name: drop_bad
  endpoint:
    path: /mne/epochs/drop_bad
    method: GET
    data_selector: epochs
    params: {}
- name: drop_channels
  endpoint:
    path: /mne/epochs/drop_channels
    method: GET
    data_selector: inst
    params: {}
- name: drop_log_stats
  endpoint:
    path: /mne/epochs/drop_log_stats
    method: GET
    data_selector: perc
    params: {}
- name: plot_field
  endpoint:
    path: /mne/evoked/plot_field
    method: GET
- name: get_montage
  endpoint:
    path: /get_montage
    method: GET
    data_selector: montage
    params: {}
- name: interpolate_bads
  endpoint:
    path: /interpolate_bads
    method: GET
    data_selector: inst
    params: {}
- name: iter_evoked
  endpoint:
    path: /iter_evoked
    method: GET
    data_selector: inst
    params: {}
- name: load_data
  endpoint:
    path: /load_data
    method: GET
    data_selector: epochs
    params: {}
- name: next
  endpoint:
    path: /next
    method: GET
    data_selector: epoch
    params: {}
- name: pick
  endpoint:
    path: /pick
    method: GET
    data_selector: inst
    params: {}
- name: pick_channels
  endpoint:
    path: /pick_channels
    method: GET
    data_selector: inst
    params: {}
- name: pick_types
  endpoint:
    path: /pick_types
    method: GET
    data_selector: inst
    params: {}
- name: plot_image
  endpoint:
    path: /plot_image
    method: GET
- name: plot_joint
  endpoint:
    path: /plot_joint
    method: GET
- name: plot_psd
  endpoint:
    path: /plot_psd
    method: GET
    data_selector: fig
    params:
      fmin: 0
      fmax: inf
      tmin: null
      tmax: null
      proj: false
      method: auto
      average: false
      dB: true
      estimate: power
      xscale: linear
      area_mode: std
      area_alpha: 0.33
      color: black
      line_alpha: null
      spatial_colors: true
      exclude: bads
      show: true
      n_jobs: 1
      verbose: null
- name: plot_psd_topo
  endpoint:
    path: /plot_psd_topo
    method: GET
    data_selector: fig
    params:
      tmin: null
      tmax: null
      fmin: 0
      fmax: 100
      proj: false
      method: auto
      dB: true
      layout: null
      color: w
      fig_facecolor: k
      axis_facecolor: k
      show: true
      n_jobs: null
      verbose: null
- name: plot_drop_log
  endpoint:
    path: /plot_drop_log
    method: GET
    data_selector: stats
    params:
      threshold: 0
      n_max_plot: 20
      subject: null
      color: (0.9, 0.9, 0.9)
      width: 0.8
      ignore:
      - IGNORED
      show: true
- name: plot_image
  endpoint:
    path: /plot_image
    method: GET
    data_selector: image
    params:
      picks: null
      sigma: 0.0
      vmin: null
      vmax: null
      colorbar: true
      order: null
      show: true
      units: null
      scalings: null
      cmap: null
      fig: null
      axes: null
      overlay_times: null
      combine: null
      group_by: null
      evoked: true
- name: plot_white
  endpoint:
    path: /mne/evoked/plot_white
    method: GET
    data_selector: fig
    params: {}
- name: plot_psd
  endpoint:
    path: /mne/epochs.py#L2689-L2784
    method: GET
    data_selector: records
    params: {}
- name: plot_psd_topo
  endpoint:
    path: /mne/time_frequency/spectrum.py#L143-L192
    method: GET
    data_selector: records
    params: {}
- name: proj
  endpoint:
    path: ''
    method: ''
    data_selector: ''
    params: {}
- name: rename_channels
  endpoint:
    path: ''
    method: ''
    data_selector: ''
    params: {}
- name: reorder_channels
  endpoint:
    path: ''
    method: ''
    data_selector: ''
    params: {}
- name: resample
  endpoint:
    path: ''
    method: ''
    data_selector: ''
    params: {}
- name: save
  endpoint:
    path: ''
    method: ''
    data_selector: ''
    params: {}
- name: savgol_filter
  endpoint:
    path: ''
    method: ''
    data_selector: ''
    params: {}
- name: set_channel_types
  endpoint:
    path: ''
    method: ''
    data_selector: ''
    params: {}
- name: set_eeg_reference
  endpoint:
    path: ''
    method: ''
    data_selector: ''
    params: {}
- name: to_data_frame
  endpoint:
    path: /to_data_frame
    method: GET
    data_selector: df
- name: Evoked Data
  endpoint:
    path: /mne/evoked
    method: GET
    data_selector: data
    params: {}
- name: evoked
  endpoint:
    path: /evoked
    method: GET
    data_selector: evoked_data
    params: {}
- name: read_raw
  endpoint:
    path: /mne/io/read_raw
    method: GET
    data_selector: records
- name: raw
  endpoint:
    path: /read_raw_artemis123
    method: GET
    data_selector: raw
    params: {}
- name: noise_cov
  endpoint:
    path: /Covariance
    method: GET
    data_selector: covariance
- name: time_unit
  endpoint:
    path: /time_unit
    method: GET
    data_selector: unit
- name: sphere
  endpoint:
    path: /sphere
    method: GET
    data_selector: parameters
- name: highlight
  endpoint:
    path: /highlight
    method: GET
    data_selector: segments
- name: verbose
  endpoint:
    path: /verbose
    method: GET
    data_selector: verbosity
- name: plot_image
  endpoint:
    path: /plot_image
    method: GET
- name: plot_joint
  endpoint:
    path: /plot_joint
    method: GET
- name: plot_projs_topomap
  endpoint:
    path: /plot_projs_topomap
    method: GET
    data_selector: fig
    params: {}
- name: raw_bti
  endpoint:
    path: /mne/io/read_raw_bti
    method: GET
    data_selector: raw
    params: {}
- name: plot_psd
  endpoint:
    method: POST
    params:
      fmin: 0
      fmax: inf
      tmin: null
      tmax: null
      proj: false
      method: auto
      average: false
      dB: true
      estimate: power
      xscale: linear
      area_mode: std
      area_alpha: 0.33
      color: black
      spatial_colors: true
      exclude: bads
      show: true
      n_jobs: 1
- name: plot_psd_topo
  endpoint:
    method: POST
    params:
      tmin: null
      tmax: null
      fmin: 0
      fmax: 100
      proj: false
      method: auto
      dB: true
      color: w
      fig_facecolor: k
      axis_facecolor: k
      show: true
      n_jobs: null
- name: plot_sensors
  endpoint:
    path: /plot_sensors
    method: GET
- name: plot_topo
  endpoint:
    path: /plot_topo
    method: GET
- name: RawCTF
  endpoint:
    path: /read_raw_ctf
    method: GET
    data_selector: raw
    params: {}
- name: evoked_data
  endpoint:
    path: /api/evoked_data
    method: GET
    data_selector: records
- name: Raw
  endpoint:
    path: /api/reading_raw_data
    method: GET
    data_selector: data
- name: Epochs
  endpoint:
    path: /api/read_epochs
    method: GET
    data_selector: data
- name: Evoked
  endpoint:
    path: /api/read_evokeds
    method: GET
    data_selector: data
- name: Info
  endpoint:
    path: /api/read_info
    method: GET
    data_selector: data
- name: curry_data
  endpoint:
    path: /read_raw_curry
    method: GET
    data_selector: raw
    params: {}
- name: raw_edf
  endpoint:
    path: /read_raw_edf
    method: GET
    data_selector: raw
    params: {}
- name: RawEyelink
  endpoint:
    path: /read_raw_eyelink
    method: GET
    data_selector: raw
    params:
      fname: path-to-eyelink-file.asc
      create_annotations: true
      apply_offsets: false
      find_overlaps: false
      overlap_threshold: 0.05
      verbose: null
- name: device_info
  endpoint:
    path: /device_info
    method: GET
    data_selector: device_info
- name: dig
  endpoint:
    path: /dig
    method: GET
    data_selector: dig
- name: events
  endpoint:
    path: /events
    method: GET
    data_selector: events
- name: file_id
  endpoint:
    path: /file_id
    method: GET
    data_selector: file_id
- name: helium_info
  endpoint:
    path: /helium_info
    method: GET
    data_selector: helium_info
- name: hpi_meas
  endpoint:
    path: /hpi_meas
    method: GET
    data_selector: hpi_meas
- name: hpi_results
  endpoint:
    path: /hpi_results
    method: GET
    data_selector: hpi_results
- name: hpi_subsystem
  endpoint:
    path: /hpi_subsystem
    method: GET
    data_selector: hpi_subsystem
- name: mri_id
  endpoint:
    path: /mri_id
    method: GET
    data_selector: mri_id
- name: proc_history
  endpoint:
    path: /proc_history
    method: GET
    data_selector: proc_history
- name: subject_info
  endpoint:
    path: /subject_info
    method: GET
    data_selector: subject_info
- name: RawEDF
  endpoint:
    path: /mne/io/read_raw_bdf
    method: GET
    data_selector: raw
    params: {}
- name: raw_gdf
  endpoint:
    path: /read_raw_gdf
    method: GET
    data_selector: raw
    params: {}
- name: Raw
  endpoint:
    path: /api/raw
    method: GET
- name: Epochs
  endpoint:
    path: /api/epochs
    method: GET
- name: Evoked
  endpoint:
    path: /api/evoked
    method: GET
- name: Info
  endpoint:
    path: /api/info
    method: GET
- name: events
  endpoint:
    path: /api/events
    method: GET
    data_selector: records
- name: sensor_data
  endpoint:
    path: /api/sensor_data
    method: GET
    data_selector: records
- name: raw_kit
  endpoint:
    path: mne.io.read_raw_kit
    method: GET
    data_selector: raw
    params: {}
- name: raw_nedf
  endpoint:
    path: /read_raw_nedf
    method: GET
    data_selector: raw
    params:
      filename: path-like
      preload: bool or str
      verbose: bool or str or int or None
- name: anonymize_info
  endpoint:
    path: anonymize_info
    method: GET
    data_selector: info
- name: read_raw
  endpoint:
    path: read_raw
    method: GET
    data_selector: fname
- name: read_raw_artemis123
  endpoint:
    path: read_raw_artemis123
    method: GET
    data_selector: input_fname
- name: read_raw_bti
  endpoint:
    path: read_raw_bti
    method: GET
    data_selector: pdf_fname
- name: read_raw_cnt
  endpoint:
    path: read_raw_cnt
    method: GET
    data_selector: input_fname
- name: read_raw_ctf
  endpoint:
    path: read_raw_ctf
    method: GET
    data_selector: directory
- name: read_raw_curry
  endpoint:
    path: read_raw_curry
    method: GET
    data_selector: fname
- name: read_raw_edf
  endpoint:
    path: read_raw_edf
    method: GET
    data_selector: input_fname
- name: read_raw_eyelink
  endpoint:
    path: read_raw_eyelink
    method: GET
    data_selector: fname
- name: read_raw_bdf
  endpoint:
    path: read_raw_bdf
    method: GET
    data_selector: input_fname
- name: read_raw_gdf
  endpoint:
    path: read_raw_gdf
    method: GET
    data_selector: input_fname
- name: read_raw_kit
  endpoint:
    path: read_raw_kit
    method: GET
    data_selector: input_fname
- name: read_raw_nedf
  endpoint:
    path: read_raw_nedf
    method: GET
    data_selector: filename
- name: read_raw_nicolet
  endpoint:
    path: read_raw_nicolet
    method: GET
    data_selector: input_fname
- name: read_raw_hitachi
  endpoint:
    path: read_raw_hitachi
    method: GET
    data_selector: fname
- name: read_raw_nirx
  endpoint:
    path: read_raw_nirx
    method: GET
    data_selector: fname
- name: read_raw_snirf
  endpoint:
    path: read_raw_snirf
    method: GET
    data_selector: fname
- name: read_raw_eeglab
  endpoint:
    path: read_raw_eeglab
    method: GET
    data_selector: input_fname
- name: read_raw_brainvision
  endpoint:
    path: read_raw_brainvision
    method: GET
    data_selector: vhdr_fname
- name: read_raw_egi
  endpoint:
    path: read_raw_egi
    method: GET
    data_selector: input_fname
- name: read_raw_fif
  endpoint:
    path: read_raw_fif
    method: GET
    data_selector: fname
- name: read_raw_eximia
  endpoint:
    path: read_raw_eximia
    method: GET
    data_selector: fname
- name: read_raw_fieldtrip
  endpoint:
    path: read_raw_fieldtrip
    method: GET
    data_selector: fname
- name: read_raw_boxy
  endpoint:
    path: read_raw_boxy
    method: GET
    data_selector: fname
- name: read_raw_persyst
  endpoint:
    path: read_raw_persyst
    method: GET
    data_selector: fname
- name: read_raw_nihon
  endpoint:
    path: read_raw_nihon
    method: GET
    data_selector: fname
- name: read_raw_fil
  endpoint:
    path: read_raw_fil
    method: GET
    data_selector: binfile
- name: read_raw_nsx
  endpoint:
    path: read_raw_nsx
    method: GET
    data_selector: input_fname
- name: read_raw_neuralynx
  endpoint:
    path: read_raw_neuralynx
    method: GET
    data_selector: fname
- name: UIEvent
  endpoint:
    path: /mne/viz/ui_events/UIEvent
    method: GET
- name: ColormapRange
  endpoint:
    path: /mne/viz/ui_events/ColormapRange
    method: GET
- name: Contours
  endpoint:
    path: /mne/viz/ui_events/Contours
    method: GET
- name: FigureClosing
  endpoint:
    path: /mne/viz/ui_events/FigureClosing
    method: GET
- name: PlaybackSpeed
  endpoint:
    path: /mne/viz/ui_events/PlaybackSpeed
    method: GET
- name: TimeChange
  endpoint:
    path: /mne/viz/ui_events/TimeChange
    method: GET
- name: VertexSelect
  endpoint:
    path: /mne/viz/ui_events/VertexSelect
    method: GET
- name: RawNIRX
  endpoint:
    path: /mne/io/read_raw_nirx
    method: GET
    data_selector: raw
    params:
      saturated: annotate
      preload: false
      encoding: latin-1
      verbose: null
- name: RawEEGLAB
  endpoint:
    path: /mne/io/read_raw_eeglab
    method: GET
    data_selector: raw
    params: {}
- name: RawCTF
  endpoint:
    path: mne.io.read_raw_ctf
    method: GET
    data_selector: raw
    params: {}
- name: raw_brainvision
  endpoint:
    path: /mne/io/read_raw_brainvision
    method: GET
    data_selector: raw
    params:
      vhdr_fname: path-like
      eog:
      - HEOGL
      - HEOGR
      - VEOGb
      misc: auto
      scale: 1.0
      ignore_marker_types: false
      preload: false
      verbose: null
- name: raw_curry
  endpoint:
    path: /read_raw_curry
    method: GET
    data_selector: raw
    params: {}
- name: RawEGI
  endpoint:
    path: /read_raw_egi
    method: GET
    data_selector: raw
    params: {}
- name: raw
  endpoint:
    path: mne.io.read_raw_fif
    method: GET
    data_selector: Raw
    params: {}
- name: RawEximia
  endpoint:
    path: ''
    method: ''
    data_selector: ''
    params: {}
- name: raw
  endpoint:
    path: mne.io.read_raw_bdf
    method: GET
    data_selector: raw
    params: {}
- name: RawGDF
  endpoint:
    path: /read_raw_gdf
    method: GET
    data_selector: raw
    params: {}
- name: raw
  endpoint:
    path: ''
    method: ''
    data_selector: ''
    params: {}
- name: raw
  endpoint:
    path: read_raw_kit
    method: GET
    data_selector: raw
    params: {}
- name: raw_persyst
  endpoint:
    path: /mne/io/read_raw_persyst
    method: GET
    data_selector: raw
    params: {}
- name: raw_data
  endpoint:
    path: /api/raw_data
    method: GET
    data_selector: data
    params: {}
- name: epochs
  endpoint:
    path: /api/epochs
    method: GET
    data_selector: data
    params: {}
- name: evoked
  endpoint:
    path: /api/evoked
    method: GET
    data_selector: data
    params: {}
- name: raw_nedf
  endpoint:
    path: /read_raw_nedf
    method: GET
    data_selector: raw
    params: {}
- name: raw_nihon
  endpoint:
    path: /read_raw_nihon
    method: GET
    data_selector: raw
    params:
      fname: path-like
      preload: bool
      verbose: bool or str or int or None
- name: raw_nicolet
  endpoint:
    path: read_raw_nicolet
    method: GET
    data_selector: raw
    params: {}
- name: events
  endpoint:
    path: /api/events
    method: GET
    data_selector: records
- name: annotations
  endpoint:
    path: /api/annotations
    method: GET
    data_selector: records
- name: RawHitachi
  endpoint:
    path: /mne/io/hitachi/hitachi.py
    method: GET
- name: NIRX_data
  endpoint:
    path: /read_raw_nirx
    method: GET
    data_selector: raw
- name: raw_neuralynx
  endpoint:
    path: /mne/io/read_raw_neuralynx
    method: GET
    data_selector: raw
    params: {}
- name: raw_data
  endpoint:
    path: /api/raw_data
    method: GET
    data_selector: records
- name: epochs
  endpoint:
    path: /api/epochs
    method: GET
    data_selector: records
- name: evoked
  endpoint:
    path: /api/evoked
    method: GET
    data_selector: records
- name: RawEEGLAB
  endpoint:
    path: /mne/io/read_raw_eeglab
    method: GET
    data_selector: raw
    params: {}
- name: Raw
  endpoint:
    path: /api/reading_raw_data
    method: GET
    data_selector: records
- name: Epochs
  endpoint:
    path: /api/read_epochs
    method: GET
    data_selector: records
- name: Evoked
  endpoint:
    path: /api/read_evoked
    method: GET
    data_selector: records
- name: Info
  endpoint:
    path: /api/read_info
    method: GET
    data_selector: records
- name: marker_points
  endpoint:
    path: /read_mrk
    method: GET
    data_selector: mrk_points
    params:
      fname: path-like
- name: RawBrainVision
  endpoint:
    path: mne.io.read_raw_brainvision
    method: GET
    data_selector: raw
    params: {}
- name: channel_type
  endpoint:
    path: /mne/channel_type
    method: GET
    data_selector: type
    params: {}
- name: read_raw_egi
  endpoint:
    path: mne.io.read_raw_egi
    method: GET
    data_selector: raw
    params: {}
- name: channel_indices
  endpoint:
    path: /mne/channel_indices_by_type
    method: GET
    data_selector: idx_by_type
    params: {}
- name: RawEximia
  endpoint:
    path: /mne/io/read_raw_eximia
    method: GET
    data_selector: raw
    params: {}
- name: unsubscribe
  endpoint:
    path: /events/unsubscribe
    method: GET
    data_selector: records
- name: head_surface
  endpoint:
    path: /get_head_surf
    method: GET
    data_selector: surf
    params: {}
- name: raw_data
  endpoint:
    path: /mne/io/read_raw_fieldtrip
    method: GET
    data_selector: raw
    params: {}
- name: RawBOXY
  endpoint:
    path: /mne/io/read_raw_boxy
    method: GET
    data_selector: raw
    params: {}
- name: volume_labels
  endpoint:
    path: /get_volume_labels_from_aseg
    method: GET
    data_selector: label_names
    params: {}
- name: raw_persyst
  endpoint:
    path: /mne/io/read_raw_persyst
    method: GET
    data_selector: raw
    params: {}
- name: get_volume_labels_from_src
  endpoint:
    path: /mne/get_volume_labels_from_src
    method: GET
    data_selector: labels_aseg
    params:
      src: SourceSpaces
      subject: str
      subjects_dir: str
- name: ui_events
  endpoint:
    path: /api/ui_events
    method: GET
    data_selector: events
    params: {}
- name: preprocessing
  endpoint:
    path: /api/preprocessing
    method: GET
    data_selector: preprocess
    params: {}
- name: events
  endpoint:
    path: /api/events
    method: GET
    data_selector: event_data
    params: {}
- name: sensor_space
  endpoint:
    path: /api/sensor_space
    method: GET
    data_selector: sensor_data
    params: {}
- name: covariance
  endpoint:
    path: /api/covariance
    method: GET
    data_selector: covariance_data
    params: {}
- name: conditions
  endpoint:
    path: /parse_config
    method: GET
    data_selector: conditions
    params: {}
- name: RawNihon
  endpoint:
    path: /read_raw_nihon
    method: GET
    data_selector: raw
    params: {}
- name: raw_fil
  endpoint:
    path: /read_raw_fil
    method: GET
    data_selector: raw
    params: {}
- name: read_labels_from_annot
  endpoint:
    path: /mne/read_labels_from_annot
    method: GET
    data_selector: labels
    params: {}
- name: raw_nsx
  endpoint:
    path: /read_raw_nsx
    method: GET
    data_selector: raw
    params: {}
- name: RawNeuralynx
  endpoint:
    path: /path/to/your/data
    method: GET
    data_selector: raw
    params: {}
- name: read_bem_surfaces
  endpoint:
    path: /mne.read_bem_surfaces
    method: GET
    data_selector: list
    params: {}
- name: raw_data
  endpoint:
    path: /mne/io/BaseRaw
    method: GET
    data_selector: records
- name: covariance_matrix
  endpoint:
    path: /mne/read_cov
    method: GET
    data_selector: cov
    params: {}
- name: marker_points
  endpoint:
    path: /read_mrk
    method: GET
    data_selector: mrk_points
    params:
      fname: path-like
- name: dipole
  endpoint:
    path: /mne/read_dipole
    method: GET
    data_selector: dipole
    params: {}
- name: epochs
  endpoint:
    path: /mne/read_epochs
    method: GET
    data_selector: epochs
    params: {}
- name: channel_type
  endpoint:
    path: /mne/channel_type
    method: GET
    data_selector: type
    params: {}
- name: EpochsEEGLAB
  endpoint:
    path: mne.read_epochs_eeglab
    method: GET
    data_selector: instance of BaseEpochs
    params: {}
- name: channel_indices
  endpoint:
    path: /mne/channel_indices_by_type
    method: GET
    data_selector: idx_by_type
- name: epochs
  endpoint:
    path: /mne/read_epochs_fieldtrip
    method: GET
    data_selector: epochs
    params:
      fname: path-like
      info: dict or None
      data_name: str
      trialinfo_column: int
- name: head_surface
  endpoint:
    path: /mne/get_head_surf
    method: GET
    data_selector: surf
    params: {}
- name: events
  endpoint:
    path: /read_events
    method: GET
    data_selector: events
    params: {}
- name: evoked_dataset
  endpoint:
    path: /mne/read_evokeds
    method: GET
    data_selector: list
- name: volume_labels
  endpoint:
    path: /mne/get_volume_labels_from_aseg
    method: GET
    data_selector: label_names
    params:
      mgz_fname: aseg.mgz
      return_colors: false
      atlas_ids: null
- name: get_volume_labels_from_src
  endpoint:
    path: /mne/get_volume_labels_from_src
    method: GET
    data_selector: labels_aseg
    params: {}
- name: Annotations
  endpoint:
    path: /api/annotations
    method: GET
- name: AcqParserFIF
  endpoint:
    path: /api/acqparserfif
    method: GET
- name: Events
  endpoint:
    path: /api/events
    method: GET
- name: Sensor Space Data
  endpoint:
    path: /api/sensor_space
    method: GET
- name: Covariance
  endpoint:
    path: /api/covariance
    method: GET
- name: evoked_data
  endpoint:
    path: /mne/read_evoked_fieldtrip
    method: GET
    data_selector: evoked
    params: {}
- name: conditions
  endpoint:
    path: /parse_config
    method: GET
    data_selector: conditions
    params: {}
- name: evoked
  endpoint:
    path: /mne/read_evokeds_mff
    method: GET
    data_selector: evoked
    params: {}
- name: Raw
  endpoint:
    path: /api/reading_raw_data
    method: GET
    data_selector: data
- name: Epochs
  endpoint:
    path: /api/read_epochs
    method: GET
    data_selector: data
- name: Evoked
  endpoint:
    path: /api/read_evokeds
    method: GET
    data_selector: data
- name: Info
  endpoint:
    path: /api/read_info
    method: GET
    data_selector: data
- name: labels
  endpoint:
    path: /mne/read_labels_from_annot
    method: GET
    data_selector: labels
    params: {}
- name: atlas_ids
  endpoint:
    path: /mne/read_freesurfer_lut
    method: GET
    data_selector: dict
- name: colors
  endpoint:
    path: /mne/read_freesurfer_lut
    method: GET
    data_selector: dict
- name: bem_solution
  endpoint:
    path: /mne/read_bem_solution
    method: GET
    data_selector: bem
    params: {}
- name: forward_solution
  endpoint:
    path: /mne/read_forward_solution
    method: GET
    data_selector: fwd
    params:
      fname: path-like
      include: list
      exclude: list
      ordered: bool
      verbose: bool | str | int | None
- name: label
  endpoint:
    path: /mne/read_label
    method: GET
    data_selector: label
    params: {}
- name: read_bem_surfaces
  endpoint:
    path: /mne/read_bem_surfaces
    method: GET
    data_selector: surf
    params:
      patch_stats: false
      s_id: null
      on_defects: raise
      verbose: null
- name: Raw
  endpoint:
    path: /api/reading_raw_data
    method: GET
- name: Epochs
  endpoint:
    path: /api/read_epochs
    method: GET
- name: Evoked
  endpoint:
    path: /api/read_evokeds
    method: GET
- name: Info
  endpoint:
    path: /api/read_info
    method: GET
- name: morph_map
  endpoint:
    path: /mne/read_morph_map
    method: GET
    data_selector: left_map, right_map
    params: {}
- name: covariance_matrix
  endpoint:
    path: /mne/read_cov
    method: GET
    data_selector: cov
    params: {}
- name: projections
  endpoint:
    path: /read_proj
    method: GET
    data_selector: projs
    params: {}
- name: dipole
  endpoint:
    path: mne.read_dipole
    method: GET
    data_selector: dipole
    params: {}
- name: params
  endpoint:
    path: /mne/read_reject_parameters
    method: GET
    data_selector: dict
    params: {}
- name: epochs
  endpoint:
    path: /path/to/epochs
    method: GET
    data_selector: epochs
    params: {}
- name: EpochsKIT
  endpoint:
    path: /mne/read_epochs_kit
    method: GET
    data_selector: EpochsKIT
    params: {}
- name: source_spaces
  endpoint:
    path: /mne/read_source_spaces
    method: GET
    data_selector: src
    params: {}
- name: surface_mesh
  endpoint:
    path: /mne/read_surface
    method: GET
    data_selector: rr, tris, volume_info, surf
    params:
      fname: path-like
      read_metadata: bool
      return_dict: bool
      file_format: auto
      verbose: bool | str | int | None
- name: events
  endpoint:
    path: mne.read_events
    method: GET
    data_selector: events
    params: {}
- name: transformation_dictionary
  endpoint:
    path: /mne/read_trans
    method: GET
    data_selector: trans
    params: {}
- name: evoked_dataset
  endpoint:
    path: /mne/read_evokeds
    method: GET
    data_selector: Evoked
    params: {}
- name: evoked_data
  endpoint:
    path: /mne/read_evoked_besa
    method: GET
    data_selector: ev
    params: {}
- name: UIEvent
  endpoint:
    path: /ui_events
    method: GET
    data_selector: events
- name: ColormapRange
  endpoint:
    path: /colormap_range
    method: GET
    data_selector: ranges
- name: Contours
  endpoint:
    path: /contours
    method: GET
    data_selector: contours
- name: FigureClosing
  endpoint:
    path: /figure_closing
    method: GET
    data_selector: figure_closing_events
- name: PlaybackSpeed
  endpoint:
    path: /playback_speed
    method: GET
    data_selector: playback_speeds
- name: TimeChange
  endpoint:
    path: /time_change
    method: GET
    data_selector: time_changes
- name: VertexSelect
  endpoint:
    path: /vertex_select
    method: GET
    data_selector: vertex_selections
- name: triangle_definitions
  endpoint:
    path: /mne/read_tri
    method: GET
    data_selector: rr
- name: UIEvent
  endpoint:
    path: /api/ui_events
    method: GET
    data_selector: events
    params: {}
- name: Annotations
  endpoint:
    path: /api/annotations
    method: GET
    data_selector: annotations
    params: {}
- name: Covariance
  endpoint:
    path: /api/covariance
    method: GET
    data_selector: covariance
    params: {}
- name: write_bem_solution
  endpoint:
    path: /mne/write_bem_solution
    method: POST
    data_selector: params
    params:
      overwrite: false
      verbose: null
- name: evoked
  endpoint:
    path: /mne/read_evokeds_mff
    method: GET
    data_selector: evoked
    params: {}
- name: events
  endpoint:
    path: /api/events
    method: GET
    data_selector: events
    params: {}
- name: write_bem_surfaces
  endpoint:
    path: /mne/write_bem_surfaces
    method: POST
    data_selector: surfs
    params:
      overwrite: false
- name: write_head_bem
  endpoint:
    path: /mne/write_head_bem
    method: POST
    data_selector: parameters
    params:
      on_defects: raise
      overwrite: false
- name: forward_solution
  endpoint:
    path: /mne/read_forward_solution
    method: GET
    data_selector: fwd
    params: {}
- name: write_cov
  endpoint:
    path: /mne/write_cov
    method: POST
    data_selector: parameters
    params:
      overwrite: false
      verbose: null
- name: label
  endpoint:
    path: /mne/read_label
    method: GET
    data_selector: label
    params: {}
- name: write_events
  endpoint:
    path: /mne/write_events
    method: POST
    data_selector: events
    params:
      overwrite: false
      verbose: null
- name: morph_map
  endpoint:
    path: /mne/read_morph_map
    method: GET
    data_selector: left_map, right_map
    params: {}
- name: most_used_classes
  endpoint:
    path: /api/most_used_classes
    method: GET
    data_selector: classes
- name: reading_raw_data
  endpoint:
    path: /api/reading_raw_data
    method: GET
    data_selector: raw_data
- name: file_io
  endpoint:
    path: /api/file_io
    method: GET
    data_selector: file_operations
- name: creating_data_objects
  endpoint:
    path: /api/creating_from_arrays
    method: GET
    data_selector: data_objects
- name: exporting
  endpoint:
    path: /api/export
    method: GET
    data_selector: export_options
- name: projections
  endpoint:
    path: /read_proj
    method: GET
    data_selector: projs
    params:
      fname: path-like
      verbose: optional
- name: write_evokeds
  endpoint:
    path: /mne/write_evokeds
    method: POST
    data_selector: evoked
    params: {}
- name: params
  endpoint:
    path: /mne/read_reject_parameters
    method: GET
    data_selector: dict
    params: {}
- name: source_estimate
  endpoint:
    path: /mne/read_source_estimate
    method: GET
- name: most_used_classes
  endpoint:
    path: /api/most_used_classes.html
    method: GET
    data_selector: records
- name: reading_raw_data
  endpoint:
    path: /api/reading_raw_data.html
    method: GET
    data_selector: records
- name: file_io
  endpoint:
    path: /api/file_io.html
    method: GET
    data_selector: records
- name: creating_data_objects_from_arrays
  endpoint:
    path: /api/creating_from_arrays.html
    method: GET
    data_selector: records
- name: exporting
  endpoint:
    path: /api/export.html
    method: GET
    data_selector: records
- name: datasets
  endpoint:
    path: /api/datasets.html
    method: GET
    data_selector: records
- name: visualization
  endpoint:
    path: /api/visualization.html
    method: GET
    data_selector: records
- name: ui_events
  endpoint:
    path: /api/ui_events
    method: GET
    data_selector: events
- name: preprocessing
  endpoint:
    path: /api/preprocessing
    method: GET
    data_selector: processes
- name: events
  endpoint:
    path: /api/events
    method: GET
    data_selector: event_data
- name: sensor_space
  endpoint:
    path: /api/sensor_space
    method: GET
    data_selector: sensor_data
- name: covariance
  endpoint:
    path: /api/covariance
    method: GET
    data_selector: covariance_data
- name: source_spaces
  endpoint:
    path: /read_source_spaces
    method: GET
    data_selector: src
- name: write_label
  endpoint:
    path: /mne/write_label
    method: POST
    data_selector: parameters
    params: {}
- name: events
  endpoint:
    path: /api/events
    method: GET
    data_selector: records
    params: {}
- name: sensor_space_data
  endpoint:
    path: /api/sensor_space
    method: GET
    data_selector: records
    params: {}
- name: projections
  endpoint:
    path: /mne/write_proj
    method: POST
    data_selector: projs
    params:
      overwrite: 'False'
      verbose: None
- name: surface_mesh
  endpoint:
    path: mne/read_surface
    method: GET
    data_selector: rr, tris, volume_info, surf
    params: {}
- name: raw_data
  endpoint:
    path: /api/raw_data
    method: GET
    data_selector: records
    params: {}
- name: epochs_data
  endpoint:
    path: /api/epochs_data
    method: GET
    data_selector: records
    params: {}
- name: write_source_spaces
  endpoint:
    path: /mne/write_source_spaces
    method: POST
    data_selector: parameters
    params:
      overwrite: false
      verbose: null
- name: transformation
  endpoint:
    path: mne.read_trans
    method: GET
    data_selector: trans
    params:
      return_all: 'False'
- name: write_surface
  endpoint:
    path: /mne/write_surface
    method: POST
    data_selector: parameters
    params: {}
- name: read_triangle_definitions
  endpoint:
    path: /mne/read_tri
    method: GET
    data_selector: rr, tris
    params:
      fname_in: path-like
      swap: bool
      verbose: bool | str | int | None
- name: write_trans
  endpoint:
    path: /mne/write_trans
    method: POST
    data_selector: trans
    params:
      overwrite: false
      verbose: null
- name: what
  endpoint:
    path: /mne/what
    method: GET
- name: write_bem_solution
  endpoint:
    path: /mne/write_bem_solution
    method: POST
    data_selector: parameters
    params:
      overwrite: false
      verbose: null
- name: info
  endpoint:
    path: /mne/io/read_info
    method: GET
    data_selector: info
    params: {}
- name: write_bem_surfaces
  endpoint:
    path: /mne/write_bem_surfaces
    method: POST
    data_selector: surfs
    params:
      overwrite: 'False'
- name: write_info
  endpoint:
    path: /mne/io/write_info
    method: POST
    data_selector: parameters
    params: {}
- name: show_fiff
  endpoint:
    path: /mne/io/show_fiff
    method: GET
    data_selector: contents
    params: {}
- name: write_cov
  endpoint:
    path: /mne/write_cov
    method: POST
    data_selector: parameters
    params:
      overwrite: false
      verbose: null
- name: evoked_dataset
  endpoint:
    path: /write_evokeds
    method: POST
    data_selector: evoked
    params:
      on_mismatch: raise
      overwrite: false
      verbose: null
- name: apply_hilbert
  endpoint:
    path: /apply_hilbert
    method: GET
- name: apply_proj
  endpoint:
    path: /apply_proj
    method: GET
- name: write_proj
  endpoint:
    path: /mne/write_proj
    method: POST
    data_selector: projections
    params:
      overwrite: false
      verbose: null
- name: source_spaces
  endpoint:
    path: /write_source_spaces
    method: POST
    data_selector: source_spaces
    params:
      overwrite: false
      verbose: null
- name: plot
  endpoint:
    path: plot
    method: GET
    data_selector: fig
- name: write_surface
  endpoint:
    path: /mne/write_surface
    method: POST
    data_selector: parameters
    params: {}
- name: plot_psd
  endpoint:
    path: plot_psd
    method: GET
- name: transformation_file
  endpoint:
    params:
      overwrite: false
      verbose: null
- name: sensors
  endpoint:
    path: /plot_sensors
    method: GET
    data_selector: sensors
    params: {}
- name: what
  endpoint:
    path: /what
    method: GET
    data_selector: returns
    params:
      fname: path-like
- name: proj
  endpoint:
    path: /proj
    method: GET
- name: rename_channels
  endpoint:
    path: /rename_channels
    method: GET
- name: reorder_channels
  endpoint:
    path: /reorder_channels
    method: GET
- name: resample
  endpoint:
    path: /resample
    method: GET
- name: save
  endpoint:
    path: /save
    method: GET
- name: savgol_filter
  endpoint:
    path: /savgol_filter
    method: GET
- name: info
  endpoint:
    path: /mne/_fiff/meas_info.py
    method: GET
    data_selector: info
    params: {}
- name: set_channel_types
  endpoint:
    path: /mne/_fiff/meas_info.py
    method: GET
    data_selector: records
    params: {}
- name: set_eeg_reference
  endpoint:
    path: /mne/channels/channels.py
    method: GET
    data_selector: records
    params: {}
- name: set_meas_date
  endpoint:
    path: /mne/_fiff/meas_info.py
    method: GET
    data_selector: records
    params: {}
- name: set_montage
  endpoint:
    path: /mne/_fiff/meas_info.py
    method: GET
    data_selector: records
    params: {}
- name: shift_time
  endpoint:
    path: /mne/utils/mixin.py
    method: GET
    data_selector: records
    params: {}
- name: time_as_index
  endpoint:
    path: /mne/utils/mixin.py
    method: GET
    data_selector: records
    params: {}
- name: to_data_frame
  endpoint:
    path: /mne/evoked.py/to_data_frame
    method: GET
    data_selector: df
- name: show_fiff
  endpoint:
    path: /mne/io/show_fiff
    method: GET
    data_selector: contents
- name: channel_types
  endpoint:
    path: /mne/io/get_channel_type_constants
    method: GET
    data_selector: channel_types
    params:
      include_defaults: 'False'
- name: __contains__
  endpoint:
    path: __contains__
    method: GET
    data_selector: in
- name: __getitem__
  endpoint:
    path: __getitem__
    method: GET
    data_selector: epochs
- name: __iter__
  endpoint:
    path: __iter__
    method: GET
    data_selector: epoch
- name: __len__
  endpoint:
    path: __len__
    method: GET
    data_selector: n_epochs
- name: add_annotations_to_metadata
  endpoint:
    path: add_annotations_to_metadata
    method: GET
    data_selector: annotations
- name: add_channels
  endpoint:
    path: add_channels
    method: POST
    data_selector: self
    params:
      force_update_info: false
- name: add_proj
  endpoint:
    path: add_proj
    method: POST
    data_selector: self
    params:
      remove_existing: false
- name: add_reference_channels
  endpoint:
    path: add_reference_channels
    method: POST
    data_selector: self
- name: anonymize
  endpoint:
    path: anonymize
    method: POST
    data_selector: self
    params:
      daysback: null
      keep_his: false
- name: apply_baseline
  endpoint:
    path: apply_baseline
    method: POST
    data_selector: epochs
    params:
      baseline:
      - null
      - 0
- name: apply_function
  endpoint:
    path: apply_function
    method: POST
    data_selector: self
    params:
      channel_wise: true
- name: apply_hilbert
  endpoint:
    path: apply_hilbert
    method: POST
    data_selector: self
    params:
      envelope: false
- name: epochs
  endpoint:
    path: /mne/epochs.py
    method: GET
    data_selector: parameters
    params: {}
- name: evoked
  endpoint:
    path: /evoked
    method: GET
    data_selector: data
    params: {}
- name: crop
  endpoint:
    path: /crop
    method: GET
    data_selector: records
    params: {}
- name: decimate
  endpoint:
    path: /decimate
    method: GET
    data_selector: records
    params: {}
- name: del_proj
  endpoint:
    path: /del_proj
    method: GET
    data_selector: records
    params: {}
- name: detrend
  endpoint:
    path: /detrend
    method: GET
    data_selector: records
    params: {}
- name: drop_channels
  endpoint:
    path: /drop_channels
    method: GET
    data_selector: records
    params: {}
- name: export
  endpoint:
    path: /export
    method: GET
    data_selector: records
    params: {}
- name: filter
  endpoint:
    path: /filter
    method: GET
    data_selector: records
    params: {}
- name: plot_drop_log
  endpoint:
    path: /plot_drop_log
    method: GET
    data_selector: records
    params:
      threshold: 0
      n_max_plot: 20
      subject: null
      color:
      - 0.9
      - 0.9
      - 0.9
      width: 0.8
      ignore:
      - IGNORED
      show: true
- name: plot_image
  endpoint:
    path: /plot_image
    method: GET
    data_selector: records
    params:
      picks: null
      sigma: 0.0
      vmin: null
      vmax: null
      colorbar: true
      order: null
      show: true
      units: null
      scalings: null
      cmap: null
      fig: null
      axes: null
      overlay_times: null
      combine: null
      group_by: null
      evoked: true
      ts_args: null
      title: null
      clear: false
- name: plot
  endpoint:
    path: plot
    method: GET
    data_selector: instance
- name: plot_field
  endpoint:
    path: /plot_field
    method: GET
    data_selector: parameters
    params: {}
- name: plot_image
  endpoint:
    path: /plot_image
    method: GET
    data_selector: parameters
    params: {}
- name: plot_psd
  endpoint:
    path: /plot_psd
    method: GET
    data_selector: records
    params:
      fmin: 0
      fmax: inf
      tmin: null
      tmax: null
      picks: null
      proj: false
      method: auto
      average: false
      dB: true
      estimate: power
      xscale: linear
      area_mode: std
      area_alpha: 0.33
      color: black
      line_alpha: null
      spatial_colors: true
      sphere: null
      exclude: bads
      ax: null
      show: true
      n_jobs: 1
- name: sensors
  endpoint:
    path: /plot_sensors
    method: GET
- name: mask
  endpoint:
    path: /mask
    method: GET
    data_selector: records
- name: mask_params
  endpoint:
    path: /mask_params
    method: GET
    data_selector: records
- name: contours
  endpoint:
    path: /contours
    method: GET
    data_selector: records
- name: outlines
  endpoint:
    path: /outlines
    method: GET
    data_selector: records
- name: sphere
  endpoint:
    path: /sphere
    method: GET
    data_selector: records
- name: image_interp
  endpoint:
    path: /image_interp
    method: GET
    data_selector: records
- name: extrapolate
  endpoint:
    path: /extrapolate
    method: GET
    data_selector: records
- name: border
  endpoint:
    path: /border
    method: GET
    data_selector: records
- name: res
  endpoint:
    path: /res
    method: GET
    data_selector: records
- name: size
  endpoint:
    path: /size
    method: GET
    data_selector: records
- name: cmap
  endpoint:
    path: /cmap
    method: GET
    data_selector: records
- name: vlim
  endpoint:
    path: /vlim
    method: GET
    data_selector: records
- name: cnorm
  endpoint:
    path: /cnorm
    method: GET
    data_selector: records
- name: colorbar
  endpoint:
    path: /colorbar
    method: GET
    data_selector: records
- name: cbar_fmt
  endpoint:
    path: /cbar_fmt
    method: GET
    data_selector: records
- name: units
  endpoint:
    path: /units
    method: GET
    data_selector: records
- name: axes
  endpoint:
    path: /axes
    method: GET
    data_selector: records
- name: show
  endpoint:
    path: /show
    method: GET
    data_selector: records
- name: n_jobs
  endpoint:
    path: /n_jobs
    method: GET
    data_selector: records
- name: verbose
  endpoint:
    path: /verbose
    method: GET
    data_selector: records
- name: set_channel_types
  endpoint:
    path: /_fiff/meas_info.py
    method: GET
    data_selector: records
- name: set_eeg_reference
  endpoint:
    path: /channes/channels.py
    method: GET
    data_selector: records
- name: set_meas_date
  endpoint:
    path: /_fiff/meas_info.py
    method: GET
    data_selector: records
- name: set_montage
  endpoint:
    path: /_fiff/meas_info.py
    method: GET
    data_selector: records
- name: shift_time
  endpoint:
    path: /utils/mixin.py
    method: GET
    data_selector: records
- name: time_as_index
  endpoint:
    path: /utils/mixin.py
    method: GET
    data_selector: records
- name: RawArray
  endpoint:
    path: /mne/io/RawArray
    method: GET
    data_selector: records
    params: {}
- name: epochs
  endpoint:
    path: /mne/epochs
    method: GET
    data_selector: data
    params: {}
- name: annotations
  endpoint:
    path: /annotations
    method: GET
    data_selector: annotations
    params: {}
- name: raw
  endpoint:
    path: /mne/io/base.py
    method: GET
    data_selector: records
    params: {}
- name: annotations_per_epoch
  endpoint:
    path: /get_annotations_per_epoch
    method: GET
    data_selector: epoch_annots
- name: channel_types
  endpoint:
    path: /get_channel_types
    method: GET
    data_selector: channel_types
- name: data
  endpoint:
    path: /get_data
    method: GET
    data_selector: data
- name: montage
  endpoint:
    path: /get_montage
    method: GET
    data_selector: montage
- name: interpolate_bads
  endpoint:
    path: /interpolate_bads
    method: GET
- name: plot_psd
  endpoint:
    path: /plot_psd
    method: GET
    data_selector: parameters
    params:
      fmin: 0
      fmax: inf
      tmin: null
      tmax: null
      picks: null
      proj: false
      reject_by_annotation: true
      method: auto
      average: false
      dB: true
      estimate: power
      xscale: linear
      area_mode: std
      area_alpha: 0.33
      color: black
      line_alpha: null
      spatial_colors: true
      sphere: null
      exclude: bads
      ax: null
      show: true
      n_jobs: 1
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: plot_psd
  endpoint:
    path: /plot_psd
    method: GET
    data_selector: records
    params: {}
- name: sensors
  endpoint:
    path: /plot/sensors
    method: GET
- name: plot_psd_topo
  endpoint:
    path: /mne/time_frequency/spectrum/plot_psd_topo
    method: GET
    data_selector: fig
    params: {}
- name: plot_psd_topomap
  endpoint:
    path: /mne/time_frequency/spectrum/plot_psd_topomap
    method: GET
    data_selector: fig
    params: {}
- name: plot_sensors
  endpoint:
    path: /maint/1.8/mne/_fiff/meas_info.py
    method: GET
    data_selector: parameters
    params: {}
- name: create_info
  endpoint:
    path: /mne/create_info
    method: GET
    data_selector: info
    params: {}
- name: compute_psd
  endpoint:
    path: compute_psd
    method: GET
    data_selector: records
- name: compute_tfr
  endpoint:
    path: compute_tfr
    method: GET
    data_selector: records
- name: crop
  endpoint:
    path: crop
    method: GET
    data_selector: records
- name: crop_by_annotations
  endpoint:
    path: crop_by_annotations
    method: GET
    data_selector: records
- name: export_evoked
  endpoint:
    path: /mne/export/export_evokeds
    method: GET
    data_selector: evoked
    params:
      fmt: auto
      overwrite: false
      verbose: null
- name: load_data
  endpoint:
    path: /load_data
    method: GET
    data_selector: raw
    params: {}
- name: notch_filter
  endpoint:
    path: /notch_filter
    method: GET
    data_selector: filtered_data
    params: {}
- name: pick
  endpoint:
    path: /pick
    method: GET
    data_selector: picked_instance
    params: {}
- name: pick_channels
  endpoint:
    path: /pick_channels
    method: GET
    data_selector: picked_channels
    params: {}
- name: export_raw
  endpoint:
    path: /mne/export/export_raw
    method: GET
    data_selector: raw
    params:
      fname: str
      raw: instance of Raw
      fmt: '''auto'' | ''brainvision'' | ''edf'' | ''eeglab'''
      physical_range: '''auto'' | ''channelwise'' | ''tuple'''
      add_ch_type: bool
      overwrite: bool
      verbose: bool | str | int | None
- name: plot_psd
  endpoint:
    path: /plot_psd
    method: GET
    data_selector: records
    params:
      fmin: 0
      fmax: inf
      tmin: null
      tmax: null
      picks: null
      proj: false
      reject_by_annotation: true
      method: auto
      average: false
      dB: true
      estimate: power
      xscale: linear
      area_mode: std
      area_alpha: 0.33
      color: black
      line_alpha: null
      spatial_colors: true
      exclude: bads
      n_jobs: 1
      show: true
- name: fetch_dataset
  endpoint:
    path: /generated/mne.datasets.fetch_dataset.html
    method: GET
    data_selector: dataset_params
- name: has_dataset
  endpoint:
    path: /generated/mne.datasets.has_dataset.html
    method: GET
    data_selector: name
- name: brainstorm.bst_auditory.data_path
  endpoint:
    path: /generated/mne.datasets.brainstorm.bst_auditory.data_path.html
    method: GET
    data_selector: path
- name: eegbci.load_data
  endpoint:
    path: /generated/mne.datasets.eegbci.load_data.html
    method: GET
    data_selector: subject
- name: fetch_aparc_sub_parcellation
  endpoint:
    path: /generated/mne.datasets.fetch_aparc_sub_parcellation.html
    method: GET
    data_selector: subjects_dir
- name: fetch_fsaverage
  endpoint:
    path: /generated/mne.datasets.fetch_fsaverage.html
    method: GET
    data_selector: subjects_dir
- name: proj
  endpoint:
    path: /mne.io.RawArray.proj
    method: GET
    data_selector: inst
    params: {}
- name: rename_channels
  endpoint:
    path: /mne.io.RawArray.rename_channels
    method: GET
    data_selector: inst
    params: {}
- name: reorder_channels
  endpoint:
    path: /mne.io.RawArray.reorder_channels
    method: GET
    data_selector: inst
    params: {}
- name: resample
  endpoint:
    path: /mne.io.RawArray.resample
    method: GET
    data_selector: raw
    params: {}
- name: save
  endpoint:
    path: /mne.io.RawArray.save
    method: GET
    data_selector: None
    params: {}
- name: savgol_filter
  endpoint:
    path: /mne.io.RawArray.savgol_filter
    method: GET
    data_selector: None
    params: {}
- name: dataset_params
  endpoint:
    path: /mne/datasets/fetch_dataset
    method: GET
    data_selector: dataset_name
    params: {}
- name: has_dataset
  endpoint:
    path: /mne/datasets/has_dataset
    method: GET
    data_selector: has
    params: {}
- name: info
  endpoint:
    path: /mne/create_info
    method: POST
    data_selector: info
    params: {}
- name: data_path
  endpoint:
    path: /mne.datasets.brainstorm.bst_auditory.data_path
    method: GET
    data_selector: path
    params:
      force_update: 'False'
      update_path: 'True'
      download: 'True'
      accept: 'False'
- name: export_evokeds
  endpoint:
    path: /export/evokeds
    method: POST
    data_selector: exported_data
    params: {}
- name: fetch_aparc_sub_parcellation
  endpoint:
    path: /mne/datasets/fetch_aparc_sub_parcellation
    method: GET
    data_selector: files
- name: export_raw
  endpoint:
    path: /mne/export/export_raw
    method: GET
    data_selector: records
    params: {}
- name: fsaverage
  endpoint:
    path: /mne/datasets/fetch_fsaverage
    method: GET
    data_selector: fs_dir
    params: {}
- name: raw_data
  endpoint:
    path: /api/raw_data
    method: GET
    data_selector: records
- name: events
  endpoint:
    path: /api/events
    method: GET
    data_selector: records
- name: fetch_hcp_mmp_parcellation
  endpoint:
    path: /datasets/fetch_hcp_mmp_parcellation
    method: GET
    data_selector: files
    params: {}
- name: Raw Data
  endpoint:
    path: /api/reading_raw_data
    method: GET
- name: File I/O
  endpoint:
    path: /api/file_io
    method: GET
- name: Creating Data Objects
  endpoint:
    path: /api/creating_from_arrays
    method: GET
- name: Exporting
  endpoint:
    path: /api/export
    method: GET
- name: Datasets
  endpoint:
    path: /api/datasets
    method: GET
- name: Visualization
  endpoint:
    path: /api/visualization
    method: GET
- name: fetch_infant_template
  endpoint:
    path: /mne/datasets/fetch_infant_template
    method: GET
    data_selector: subject
    params: {}
- name: fetch_phantom
  endpoint:
    path: mne.datasets.fetch_phantom
    method: GET
    data_selector: subject_dir
    params: {}
- name: data_path
  endpoint:
    path: /mne/datasets/fnirs_motor/data_path
    method: GET
    data_selector: path
    params: {}
- name: data_path
  endpoint:
    path: /mne/datasets/hf_sef/data_path
    method: GET
- name: fetch_dataset
  endpoint:
    path: /generated/mne.datasets.fetch_dataset.html
    method: GET
    data_selector: dataset_params
- name: has_dataset
  endpoint:
    path: /generated/mne.datasets.has_dataset.html
    method: GET
    data_selector: name
- name: brainstorm_bst_auditory
  endpoint:
    path: /generated/mne.datasets.brainstorm.bst_auditory.data_path.html
    method: GET
    data_selector: path
- name: brainstorm_bst_resting
  endpoint:
    path: /generated/mne.datasets.brainstorm.bst_resting.data_path.html
    method: GET
    data_selector: path
- name: brainstorm_bst_raw
  endpoint:
    path: /generated/mne.datasets.brainstorm.bst_raw.data_path.html
    method: GET
    data_selector: path
- name: eegbci_load_data
  endpoint:
    path: /generated/mne.datasets.eegbci.load_data.html
    method: GET
    data_selector: subject
- name: eegbci_standardize
  endpoint:
    path: /generated/mne.datasets.eegbci.standardize.html
    method: GET
    data_selector: raw
- name: fetch_aparc_sub_parcellation
  endpoint:
    path: /generated/mne.datasets.fetch_aparc_sub_parcellation.html
    method: GET
    data_selector: subjects_dir
- name: fetch_fsaverage
  endpoint:
    path: /generated/mne.datasets.fetch_fsaverage.html
    method: GET
    data_selector: subjects_dir
- name: fetch_hcp_mmp_parcellation
  endpoint:
    path: /generated/mne.datasets.fetch_hcp_mmp_parcellation.html
    method: GET
    data_selector: subjects_dir
- name: fetch_infant_template
  endpoint:
    path: /generated/mne.datasets.fetch_infant_template.html
    method: GET
    data_selector: age
- name: fetch_phantom
  endpoint:
    path: /generated/mne.datasets.fetch_phantom.html
    method: GET
    data_selector: kind
- name: fnirs_motor
  endpoint:
    path: /generated/mne.datasets.fnirs_motor.data_path.html
    method: GET
    data_selector: path
- name: hf_sef
  endpoint:
    path: /generated/mne.datasets.hf_sef.data_path.html
    method: GET
    data_selector: dataset
- name: kiloword
  endpoint:
    path: /generated/mne.datasets.kiloword.data_path.html
    method: GET
    data_selector: path
- name: limo_load_data
  endpoint:
    path: /generated/mne.datasets.limo.load_data.html
    method: GET
    data_selector: subject
- name: misc
  endpoint:
    path: /generated/mne.datasets.misc.data_path.html
    method: GET
    data_selector: path
- name: mtrf
  endpoint:
    path: /generated/mne.datasets.mtrf.data_path.html
    method: GET
    data_selector: path
- name: multimodal
  endpoint:
    path: /generated/mne.datasets.multimodal.data_path.html
    method: GET
    data_selector: path
- name: opm
  endpoint:
    path: /generated/mne.datasets.opm.data_path.html
    method: GET
    data_selector: path
- name: sleep_physionet_age
  endpoint:
    path: /generated/mne.datasets.sleep_physionet.age.fetch_data.html
    method: GET
    data_selector: subjects
- name: sleep_physionet_temazepam
  endpoint:
    path: /generated/mne.datasets.sleep_physionet.temazepam.fetch_data.html
    method: GET
    data_selector: subjects
- name: sample
  endpoint:
    path: /generated/mne.datasets.sample.data_path.html
    method: GET
    data_selector: path
- name: somato
  endpoint:
    path: /generated/mne.datasets.somato.data_path.html
    method: GET
    data_selector: path
- name: spm_face
  endpoint:
    path: /generated/mne.datasets.spm_face.data_path.html
    method: GET
    data_selector: path
- name: ucl_opm_auditory
  endpoint:
    path: /generated/mne.datasets.ucl_opm_auditory.data_path.html
    method: GET
    data_selector: path
- name: visual_92_categories
  endpoint:
    path: /generated/mne.datasets.visual_92_categories.data_path.html
    method: GET
    data_selector: path
- name: phantom_kit
  endpoint:
    path: /generated/mne.datasets.phantom_kit.data_path.html
    method: GET
    data_selector: path
- name: phantom_4dbti
  endpoint:
    path: /generated/mne.datasets.phantom_4dbti.data_path.html
    method: GET
    data_selector: path
- name: phantom_kernel
  endpoint:
    path: /generated/mne.datasets.phantom_kernel.data_path.html
    method: GET
    data_selector: path
- name: refmeg_noise
  endpoint:
    path: /generated/mne.datasets.refmeg_noise.data_path.html
    method: GET
    data_selector: path
- name: ssvep
  endpoint:
    path: /generated/mne.datasets.ssvep.data_path.html
    method: GET
    data_selector: path
- name: erp_core
  endpoint:
    path: /generated/mne.datasets.erp_core.data_path.html
    method: GET
    data_selector: path
- name: epilepsy_ecog
  endpoint:
    path: /generated/mne.datasets.epilepsy_ecog.data_path.html
    method: GET
    data_selector: path
- name: eyelink
  endpoint:
    path: /generated/mne.datasets.eyelink.data_path.html
    method: GET
    data_selector: path
- name: load_data
  endpoint:
    path: /datasets/limo/load_data
    method: GET
    data_selector: epochs
    params: {}
- name: has_dataset
  endpoint:
    path: /mne/datasets/has_dataset
    method: GET
    data_selector: has
    params: {}
- name: misc_dataset
  endpoint:
    path: /mne/datasets/misc/_misc.py
    method: GET
    data_selector: path
    params: {}
- name: data_path
  endpoint:
    path: mne.datasets.brainstorm.bst_raw.data_path
    method: GET
- name: data_path
  endpoint:
    path: /data_path
    method: GET
    data_selector: path
    params:
      force_update: false
      update_path: true
      download: true
- name: fetch_aparc_sub_parcellation
  endpoint:
    path: /mne/datasets/fetch_aparc_sub_parcellation
    method: GET
    data_selector: files
    params: {}
- name: fetch_data
  endpoint:
    path: /mne.datasets.sleep_physionet.temazepam.fetch_data
    method: GET
    data_selector: paths
    params:
      subjects: list
      path: None
      force_update: bool
      base_url: str
      verbose: bool | str | int | None
- name: fsaverage
  endpoint:
    path: /mne/datasets/fetch_fsaverage
    method: GET
    data_selector: fs_dir
    params:
      subjects_dir: null
      verbose: null
- name: somato_dataset
  endpoint:
    path: /data_path
    method: GET
    data_selector: path
    params: {}
- name: fetch_infant_template
  endpoint:
    path: mne.datasets.fetch_infant_template
    method: GET
    data_selector: subject
    params: {}
- name: fetch_phantom
  endpoint:
    path: /mne/datasets/fetch_phantom
    method: GET
    data_selector: subject_dir
    params: {}
- name: data_path
  endpoint:
    path: /data_path
    method: GET
    data_selector: path
    params: {}
- name: data_path
  endpoint:
    path: /datasets/hf_sef/data_path
    method: GET
    data_selector: path
    params: {}
- name: data_path
  endpoint:
    path: /mne/datasets/phantom_kit/data_path
    method: GET
    data_selector: path
    params: {}
- name: load_data
  endpoint:
    path: mne.datasets.limo.load_data
    method: GET
    data_selector: epochs
    params:
      subject: int
      path: str
      force_update: bool
      update_path: bool | None
      verbose: bool | str | int | None
- name: raw_data
  endpoint:
    path: /api/raw_data
    method: GET
    data_selector: data
- name: epochs
  endpoint:
    path: /api/epochs
    method: GET
    data_selector: data
- name: evoked
  endpoint:
    path: /api/evoked
    method: GET
    data_selector: data
- name: data_path
  endpoint:
    path: /mne/datasets/ssvep/data_path
    method: GET
    data_selector: path
    params: {}
- name: most_used_classes
  endpoint:
    path: /api/most_used_classes.html
    method: GET
- name: reading_raw_data
  endpoint:
    path: /api/reading_raw_data.html
    method: GET
- name: file_io
  endpoint:
    path: /api/file_io.html
    method: GET
- name: creating_data_objects_from_arrays
  endpoint:
    path: /api/creating_from_arrays.html
    method: GET
- name: exporting
  endpoint:
    path: /api/export.html
    method: GET
- name: datasets
  endpoint:
    path: /api/datasets.html
    method: GET
- name: visualization
  endpoint:
    path: /api/visualization.html
    method: GET
- name: data_path
  endpoint:
    path: /mne/datasets/eyelink/data_path
    method: GET
    data_selector: path
    params: {}
- name: eyetracking
  endpoint:
    path: /generated/mne.viz.eyetracking.plot_gaze
    method: GET
    data_selector: epochs
    params: {}
- name: fetch_data
  endpoint:
    path: /mne/datasets/sleep_physionet/age.py
    method: GET
    data_selector: paths
    params: {}
- name: fetch_data
  endpoint:
    path: /mne/datasets/sleep_physionet/temazepam/fetch_data
    method: GET
    data_selector: paths
    params: {}
- name: add_annotation
  endpoint:
    path: /mne/viz/Brain/add_annotation
    method: POST
    data_selector: records
- name: add_data
  endpoint:
    path: /mne/viz/Brain/add_data
    method: POST
    data_selector: records
- name: add_dipole
  endpoint:
    path: /maint/1.8/mne/viz/_brain/_brain.py
    method: GET
    data_selector: params
- name: add_foci
  endpoint:
    path: /maint/1.8/mne/viz/_brain/_brain.py
    method: GET
    data_selector: params
- name: add_forward
  endpoint:
    path: /maint/1.8/mne/viz/_brain/_brain.py
    method: GET
    data_selector: params
- name: add_head
  endpoint:
    path: /maint/1.8/mne/viz/_brain/_brain.py
    method: GET
    data_selector: params
- name: add_label
  endpoint:
    path: /maint/1.8/mne/viz/_brain/_brain.py
    method: GET
    data_selector: params
- name: add_sensors
  endpoint:
    path: /maint/1.8/mne/viz/_brain/_brain.py
    method: GET
    data_selector: params
- name: most_used_classes
  endpoint:
    path: /api/most_used_classes
    method: GET
- name: reading_raw_data
  endpoint:
    path: /api/reading_raw_data
    method: GET
- name: file_io
  endpoint:
    path: /api/file_io
    method: GET
- name: creating_data_objects_from_arrays
  endpoint:
    path: /api/creating_from_arrays
    method: GET
- name: exporting
  endpoint:
    path: /api/export
    method: GET
- name: datasets
  endpoint:
    path: /api/datasets
    method: GET
- name: visualization
  endpoint:
    path: /api/visualization
    method: GET
- name: onclick
  endpoint:
    path: /mne/viz/ClickableImage/onclick
    method: GET
- name: plot_clicks
  endpoint:
    path: /mne/viz/ClickableImage/plot_clicks
    method: GET
- name: to_layout
  endpoint:
    path: /mne/viz/ClickableImage/to_layout
    method: GET
- name: set_contours
  endpoint:
    path: mne.viz.EvokedField.set_contours
    method: POST
    data_selector: n_contours
- name: set_time
  endpoint:
    path: mne.viz.EvokedField.set_time
    method: POST
    data_selector: time
- name: set_vmax
  endpoint:
    path: mne.viz.EvokedField.set_vmax
    method: POST
    data_selector: vmax
- name: data_path
  endpoint:
    path: /data_path
    method: GET
    data_selector: path
    params: {}
- name: compare_fiff
  endpoint:
    path: /mne/viz/compare_fiff
    method: GET
    data_selector: results
    params: {}
- name: circular_layout
  endpoint:
    path: /mne/viz/circular_layout
    method: GET
    data_selector: node_angles
    params: {}
- name: refmeg_noise
  endpoint:
    path: /mne/datasets/refmeg_noise
    method: GET
    data_selector: path
    params: {}
- name: data_path
  endpoint:
    path: /mne/datasets/ssvep/data_path
    method: GET
    data_selector: path
    params: {}
- name: plot_bem
  endpoint:
    path: /mne/viz/plot_bem
    method: GET
    data_selector: fig
    params: {}
- name: plot_brain_colorbar
  endpoint:
    path: /mne/viz/plot_brain_colorbar
    method: GET
- name: plot_bridged_electrodes
  endpoint:
    path: /mne/viz/plot_bridged_electrodes
    method: GET
    data_selector: fig
    params: {}
- name: data_path
  endpoint:
    path: /datasets/eyelink/data_path
    method: GET
    data_selector: path
    params:
      force_update: false
      update_path: true
      download: true
- name: add_annotation
  endpoint:
    path: /mne/viz/Brain/add_annotation
    method: POST
    data_selector: parameters
    params: {}
- name: add_data
  endpoint:
    path: /mne/viz/Brain/add_data
    method: POST
    data_selector: parameters
    params: {}
- name: add_dipole
  endpoint:
    path: /add_dipole
    method: POST
    data_selector: records
- name: add_foci
  endpoint:
    path: /add_foci
    method: POST
    data_selector: records
- name: add_forward
  endpoint:
    path: /add_forward
    method: POST
    data_selector: records
- name: add_head
  endpoint:
    path: /add_head
    method: POST
    data_selector: records
- name: add_label
  endpoint:
    path: /add_label
    method: POST
    data_selector: records
- name: add_sensors
  endpoint:
    path: /add_sensors
    method: POST
    data_selector: records
- name: plot_time_course
  endpoint:
    path: /plot_time_course
    method: GET
- name: plot_time_line
  endpoint:
    path: /plot_time_line
    method: GET
- name: remove_annotations
  endpoint:
    path: /remove_annotations
    method: GET
- name: remove_data
  endpoint:
    path: /remove_data
    method: GET
- name: remove_dipole
  endpoint:
    path: /remove_dipole
    method: GET
- name: remove_forward
  endpoint:
    path: /remove_forward
    method: GET
- name: remove_head
  endpoint:
    path: /remove_head
    method: GET
- name: remove_labels
  endpoint:
    path: /remove_labels
    method: GET
- name: remove_sensors
  endpoint:
    path: /remove_sensors
    method: GET
- name: remove_skull
  endpoint:
    path: /remove_skull
    method: GET
- name: remove_text
  endpoint:
    path: /remove_text
    method: GET
- name: remove_volume_labels
  endpoint:
    path: /remove_volume_labels
    method: GET
- name: reset
  endpoint:
    path: /reset
    method: GET
- name: reset_view
  endpoint:
    path: /reset_view
    method: GET
- name: restore_user_scaling
  endpoint:
    path: /restore_user_scaling
    method: GET
- name: save_image
  endpoint:
    path: /save_image
    method: GET
- name: save_movie
  endpoint:
    path: /save_movie
    method: GET
- name: screenshot
  endpoint:
    path: /screenshot
    method: GET
- name: set_data_smoothing
  endpoint:
    path: /set_data_smoothing
    method: GET
- name: set_playback_speed
  endpoint:
    path: /set_playback_speed
    method: GET
- name: set_time
  endpoint:
    path: /set_time
    method: GET
- name: set_time_interpolation
  endpoint:
    path: /set_time_interpolation
    method: GET
- name: set_time_point
  endpoint:
    path: /set_time_point
    method: GET
- name: setup_time_viewer
  endpoint:
    path: /setup_time_viewer
    method: GET
- name: show
  endpoint:
    path: /show
    method: GET
- name: show_view
  endpoint:
    path: /show_view
    method: GET
- name: onclick
  endpoint:
    path: onclick
    method: GET
    data_selector: event
- name: plot_clicks
  endpoint:
    path: plot_clicks
    method: GET
    data_selector: coords
- name: to_layout
  endpoint:
    path: to_layout
    method: GET
    data_selector: layout
- name: events
  endpoint:
    path: /api/events
    method: GET
    data_selector: records
- name: annotations
  endpoint:
    path: /api/annotations
    method: GET
    data_selector: records
- name: Annotations
  endpoint:
    path: /api/annotations
    method: GET
- name: AcqParserFIF
  endpoint:
    path: /api/acqparserfif
    method: GET
- name: compare_fiff
  endpoint:
    path: /mne/viz/compare_fiff
    method: GET
    data_selector: parameters
    params:
      fname_1: path-like
      fname_2: path-like
      fname_out: path-like
      show: bool
      indent: str
      read_limit: int
      max_str: int
      verbose: bool | str | int | None
- name: iter_topography
  endpoint:
    path: /mne/viz/iter_topography
    method: GET
    data_selector: gen
    params: {}
- name: colormap
  endpoint:
    path: /mne/viz/mne_analyze_colormap
    method: GET
    data_selector: cmap
    params:
      limits:
      - 5
      - 10
      - 15
      format: vtk
- name: plot_bem
  endpoint:
    path: /mne/viz/plot_bem
    method: GET
- name: colorbar
  endpoint:
    path: /mne/viz/plot_brain_colorbar
    method: GET
    data_selector: cbar
    params: {}
- name: plot_bridged_electrodes
  endpoint:
    path: /mne/viz/plot_bridged_electrodes
    method: GET
    data_selector: fig
    params: {}
- name: plot_chpi_snr
  endpoint:
    path: /mne/viz/plot_chpi_snr
    method: GET
    data_selector: snr_dict
- name: covariance_data
  endpoint:
    path: /mne/viz/plot_cov
    method: POST
    data_selector: fig_cov
    params: {}
notes:
- Cite specific version numbers of the software using the DOIs provided by Zenodo
- All contributors are expected to follow our code of conduct.
- Installation requires Anaconda or Miniconda.
- Development version requires cloning the repository.
- Cite specific version numbers of the software using DOIs provided by Zenodo
- To cite MNE-Python, also cite the canonical journal article
- MNE-Python is an open-source project sustained mostly by volunteer effort.
- Support for Python environments is recommended through Anaconda or Miniconda.
- You should repeat the installation process to create a new, separate environment
  for MNE-Python development.
- Use single quotes whenever possible.
- Prefer generators or comprehensions over filter() and map().
- Avoid nested functions or class methods if possible — use private functions instead.
- 'Reminder: all contributors are expected to follow our code of conduct.'
- Check the graphviz_dot setting if you encounter issues with the dot command.
- Optipng is optional for Windows users.
- Some objects may return nulls in deeply nested fields
- These tutorials provide narrative explanations, sample code, and expected output
  for the most common MNE-Python analysis tasks.
- The sections and tutorials are arranged in a fixed order, so in theory a new user
  should be able to progress through in order without encountering any cases where
  background knowledge is assumed and unexplained.
- Tutorials describe statistical analysis of sensor-level data and source estimates.
- Some tutorials cover machine learning methods available in MNE-Python.
- Clinical applications are supported in MNE-Python.
- The API does not require authentication.
- Data structures for MEG, EEG, and fNIRS are provided.
- If tutorial-scripts contain plots and are run locally, using the interactive flag
  with `python -i tutorial_script.py` keeps them open.
- Tutorials cover various topics on statistical analysis of sensor data and source
  estimates.
- Uses OAuth2 with refresh token — requires setup of connected app in api
- Some objects like Contact may return nulls in deeply nested fields
- Coordinate systems in MNE-Python are encoded as a constant integer value.
- The coordinate systems used in MNE software and FreeSurfer are depicted in MEG/EEG
  and MRI coordinate systems.
- The head coordinate system is a right-handed Cartesian coordinate system.
- The x axis of the head coordinate system passes through the two periauricular or
  preauricular points.
- The y axis passes through the nasion and is normal to the x axis.
- The z axis points up according to the right-hand rule.
- The origin of the MEG device coordinate system is device dependent.
- MNE ships with several coil geometry configurations.
- Coil geometry information is stored in the file mne/data/coil_def.dat.
- If the add_dists=True option was used in source space creation, the source space
  file will contain Cortical Patch Statistics (CPS) for each vertex of the cortical
  surface.
- The principal sources of MEG and EEG signals are generally believed to be postsynaptic
  currents in the cortical pyramidal neurons.
- The minimum-norm estimates have a bias towards superficial currents.
- Morphing is performed with help of the registered spherical surfaces (lh.sphere.reg
  and rh.sphere.reg) which must be produced in FreeSurfer.
- MNE-Python performs all computation in memory using the double-precision 64-bit
  floating point format.
- Saving intermediate results to disk and re-loading them from disk later may lead
  to loss in precision.
- Uses spherical spline interpolation for data repair
- Maxwell filtering is implemented in MNE-Python
- SSP does not require additional reference sensors
- The coordinate systems used in MNE software (and FreeSurfer) are Cartesian and have
  the 'RAS' orientation.
- In FreeSurfer, MNE, as well as in Neuromag software an integer voxel coordinate
  corresponds to the location of the center of a voxel.
- All dataset fetchers are available in mne.datasets.
- Use the data_path or load_data functions to fetch datasets.
- The coil geometry information is stored in the file mne/data/coil_def.dat.
- Many of the MNE-Python objects have methods that operate in-place to save memory
  (i.e., the data in the Raw object is changed when you call raw.filter(lfreq, hfreq)).
  If you do not want this, it is always possible to first call the object’s copy()
  method (e.g., filtered_raw = raw.copy().filter(lfreq, hfreq)). In addition, some
  MNE-Python functions have a boolean copy parameter that achieves the same purpose.
- The concept of channel types is critical in MNE because it supports analysis of
  multimodal data (e.g., EEG, MEG, EOG, Stim channel, etc) whereas most EEGLAB functions
  assume all channels are of the same type (EEG). To restrict channels to a single
  type, see mne.pick_types(), raw.pick(), epochs.pick() and evoked.pick().
- On Windows, add 'set' before the variable names ('set GITHUB_USERNAME=...', etc.)
- 'On Windows, if you installed graphviz using the conda command above but still get
  an error like this: WARNING: dot command ''dot'' cannot be run (needed for graphviz
  output), check the graphviz_dot setting'
- Many of the MNE-Python objects have methods that operate in-place to save memory.
- The concept of channel types is critical in MNE because it supports analysis of
  multimodal data.
- The package build backend was switched from setuptools to hatchling.
- 'On Windows, if you installed graphviz using the conda command but still get an
  error like this: WARNING: dot command ''dot'' cannot be run (needed for graphviz
  output), check the graphviz_dot setting'
- Adhere to standard Python style guidelines
- Use consistent variable naming
- We (mostly) follow NumPy style for docstrings
- Cross-reference everywhere
- Use single quotes whenever possible
- Avoid nested functions or class methods if possible — use private functions instead
- Avoid *args and **kwargs in function/method signatures
- Fix bug in mne.export.export_raw() when exporting raw to EDF with EDFLib when subject
  sex is missing
- Fix bugs in documentation of mne.time_frequency.tfr_array_multitaper() and related
  functions/methods
- Fix bug to be able to customize legends when using mne.viz.Brain.add_volume_labels()
- Fix bug in documentation of mne.channels.make_dig_montage()
- Add support for bad channel handling in mne.set_bipolar_reference()
- Fix X coordinates of ear_left and ear_right in head outlines dict
- Add type checking for tmin and tmax arguments for crop
- Fix bug where trying to setup projection without an EEG average reference projector
  would fail
- Fix bug where ica.reject_ was not saved to disk, and the ica.reject_ property was
  not inherited from Epochs when doing ICA.fit(epochs)
- Fix bug in automatic MESA detection for disabling advanced 3D options
- Fix bug in mne.head_to_mri() when unscale=True
- Fix bug in set_montage('mgh60') and related functions where the 'mgh60' sensor positions
  were incorrectly ordered
- Fix bug in the .compute_psd() methods where the number of unaggregated Welch segments
  was wrongly computed for some inputs, leading to an assertion error when computing
  the PSD
- Fix bug in the plot_evoked_topo() and plot_topo() where legend colors were shown
  incorrectly on newer matplotlib versions
- Fix bug where EEGLAB channel positions were read as meters, while they are commonly
  in millimeters, leading to head outlies of the size of one channel when plotting
  topomaps. Now montage_units argument has been added to read_raw_eeglab() and read_epochs_eeglab()
  to control in what units EEGLAB channel positions are read. The default is millimeters,
  'mm'
- Fix bug where computing PSD with welch’s method with more jobs than channels would
  fail
- Fix bug where the default FFT length changed for spectrum plots
- Fix bug with mne.decoding.cross_val_multiscore() where progress bars were not displayed
  correctly
- Fix channel selection edge-cases in find_bads_muscle
- Fix bug with mne.io.read_raw_curry() where a dot in the parent folders prevented
  files from being read
- Fix bug with mne.Report with replace=True where the wrong content was replaced and
  section was not respected
- Fix bug with unit conversion when setting reference MEG as the channel type in mne.io.Raw.set_channel_types()
  and related methods
- Fix bug where reference MEG channels could not be plotted using mne.viz.plot_epochs_image()
- Fix bug where image_format='gif' was errantly documented as being supported by mne.Report,
  it is now only supported in mne.Report.add_image()
- Multitaper spectral estimation now uses periodic (rather than symmetric) taper windows.
  This also necessitated changing the default max_iter of our cross-spectral density
  functions from 150 to 250.
- Fix mne.Epochs.plot_image() and mne.viz.plot_epochs_image() when using EMG signals
- Fix selection of ICA components in mne.viz.plot_ica_components() and mne.preprocessing.ICA.plot_components()
- Fix bug where a Freesurfer reconstruction run with both a T1 and a T2 caused mne.viz.Brain
  not to initialize pial surfaces properly
- A new argument events_as_annotations has been added to mne.io.read_raw_egi() with
  a default value of False that will change to True in version 1.9
- mne.Info.ch_names will now return an empty list instead of raising a KeyError if
  no channels are present
- The HTML representations of Raw, Epochs, and Evoked have been updated to be more
  consistent and contain slightly more information.
- When creating BEM surfaces via mne.bem.make_watershed_bem() and mne.bem.make_flash_bem(),
  the copy parameter now defaults to True.
- The ordering of channels returned by mne.io.read_raw_nirx() is now ordered by channel
  name.
- For mne.viz.plot_topomap(), the topomap image interpolation was previously a cubic
  interpolation but now can be 'linear' and 'nearest'.
- The FLASH BEM surface generation via mne.bem.make_flash_bem() or the mne flash_bem
  command has now been clarified in terms of expected inputs.
- plot_compare_evokeds() gets a new parameter time_unit which can be 's' or 'ms'.
- The to_data_frame methods for Raw, Epochs, Evoked, SourceEstimate, EpochsTFR, and
  AverageTFR all now have default time_format=None.
- mne.Evoked.decimate() now aligns to the sample at time=0.
- Fix bug where `mne.io.read_raw_gdf()` would fail due to improper usage of `np.clip`.
- Fix bugs with `mne.preprocessing.realign_raw()` where the start of `other` was incorrectly
  cropped; and onsets and durations in `other.annotations` were left unsynced with
  the resampled data.
- Fix bug where `encoding` argument was ignored when reading annotations from an EDF
  file.
- Mark tests `test_adjacency_matches_ft` and `test_fetch_uncompressed_file` as network
  tests.
- Fix bug where `epochs.get_data(..., scalings=...)` would errantly modify the preloaded
  data.
- Fix bugs with saving splits for `Epochs`.
- Fix bug with multi-plot 3D rendering where only one plot was updated.
- Fix bug where `verbose` level was not respected inside parallel jobs.
- Fix bug where subject birthdays were not correctly read by `mne.io.read_raw_snirf()`.
- Fix bug where warnings were emitted when computing spectra for channels marked as
  bad.
- The ordering of channels returned by mne.io.read_raw_nirx() is now ordered by channel
  name, rather than the order provided by the manufacturer.
- For mne.viz.plot_topomap(), mne.viz.plot_evoked_topomap(), mne.viz.plot_arrowmap(),
  mne.viz.plot_ica_components(), mne.Covariance.plot_topomap(), mne.Evoked.plot_topomap(),
  mne.Evoked.animate_topomap(), mne.decoding.CSP.plot_patterns(), mne.Projection.plot_topomap()
  and mne.preprocessing.ICA.plot_components() the topomap image interpolation was
  previously a cubic interpolation but now can be 'linear' and 'nearest' as well.
- The to_data_frame methods for Raw, Epochs, Evoked, SourceEstimate, EpochsTFR, and
  AverageTFR all now have default time_format=None (keep time in seconds) instead
  of time_format='ms' (convert time to milliseconds).
- Fix bug where `raw.crop()` from the beginning of the instance could break annotations
  and `raw.first_samp`
- '`sys_info()` output now contains the installed version of `pooch`, too; this output
  had been accidentally removed previously'
- Fix VTK version extraction in `mne.sys_info()`
- Fix automatic channel type detection from channel labels in `mne.io.read_raw_edf()`
  and `mne.io.read_raw_bdf()`
- Fix bug that appears during automatic calculation of the colormap of `mne.viz.Brain`
  when data values of `fmin` and `fmax` are too close
- Creating `mne.Epochs` now provides clearer logging when the `preload` and/or `metadata`
  parameters are set
- Argument `verbose` is now respected by dataset fetching
- Numerous external dependencies that used to be bundled with MNE-Python are now not
  shipped with the package anymore and will instead be retrieved automatically from
  their official sources when you install MNE-Python. This simplifies MNE-Python maintenance
  and keeps the package smaller.
- Fix bug with mne.time_frequency.tfr() where plot misbehaved. Plot now always returns
  a list of figures instead of a single figure handle
- Fix bug with mne.viz.plot_evoked_topo() where set ylim parameters gets swapped across
  channel types.
- Fix bug with mne.io.read_raw_edf() where µV was not correctly recognized
- Fix bug with mne.viz.plot_compare_evokeds() did not check type of combine.
- Fix bug with mne.viz.plot_evoked_topo() where ylim was only being applied to the
  first channel in the dataset
- Fix bug with mne.Epochs.plot_image() allowing interactive zoom to work properly
- Fix bug with mne.Epochs.plot_image() where the x_label was different depending on
  the evoked parameter
- Fix bug with restricting mne.io.Raw.save() saving options to .fif and .fif.gz extensions
- Fix bug with mne.io.read_raw_kit() where missing marker coils were not handled
- Fix bug with mne.connectivity.spectral_connectivity where time axis in Epochs data
  object was dropped.
- Fix bug with mne.io.Raw.resample to allow passing stim_picks='misc'
- Fix bugs with mne.io.read_raw_persyst where multiple Comments with the same name
  are allowed, and Comments with a “,” character are now allowed
- Fix zen mode and scalebar toggling for mne.io.Raw.plot() when using the macosx matplotlib
  backend
- Fix bug with mne.viz.snapshot_brain_montage() where the positions were incorrect
- Fix bug with mne.preprocessing.maxwell_filter() where the eSSS basis had to exactly
  match the good channels instead of being a superset
- Fix bug with mne.Report.add_bem_to_section where n_jobs != 1 would cause n_jobs
  subsets of MRI images in some orientations to be flipped
- Fix bug with raw.plot() where annotations didn’t immediately appear when changing
  window duration
- Fix bug with raw.plot() where scalings='auto' did not compute scalings using the
  full range of data
- Fix bug with raw.plot() where setting a lowpass could lead to non-data-channels
  not plotting
- Fix bug with mne.io.Raw.load_data() and mne.Epochs.drop_bad() where verbose logging
  was not handled properly
- Fix bug with mne.io.read_raw_nicolet() where header type values such as num_sample
  and duration_in_sec where not parsed properly
- Fix bug with mne.preprocessing.read_ica_eeglab() when reading decompositions using
  PCA dimensionality reduction
- Fix bug with mne.minimum_norm.make_inverse_operator() where depth was errantly restricted
  to be less than or equal to 1.
- Fix bug with mne.stats.permutation_cluster_1samp_test() and related clustering functions
  when adjacency=None and out_type='indices'
- Fix bug with mne.viz.plot_alignment() where plotting a sphere model could ignore
  the brain argument
- Fix bug with mne.SourceEstimate.plot() where flatmaps were not positioned properly
  when using hemi='both'
- Fix bug with mne.Annotations.save() where files could be overwritten accidentally,
  it can now be controlled via the overwrite argument
- Fix bug with replace argument of mne.Report.add_bem_to_section and mne.Report.add_slider_to_section
- Fix bug with mne.chpi.compute_chpi_locs() where all cHPI coils being off would lead
  to an empty array of the wrong dimensionality
- Fix bug with mne.extract_label_time_course() where labels, STCs, and the source
  space were not checked for compatible subject attributes
- Fix bug with mne.grow_labels() where overlap=False could run forever or raise an
  error
- Fix compatibility bugs with mne_realtime
- Fix bug with mne.viz.Brain where non-inflated surfaces had an X-offset imposed by
  default
- Fix bug with mne coreg where nasion values were not updated when clicking
- Fix bug with matplotlib-based 3D plotting where Axes3D were not properly initialized
  in mne.viz.plot_source_estimates()
- Allow sEEG channel types in mne.Evoked.plot_joint()
- Fix bug where hidden annotations could be deleted interactively in mne.io.Raw.plot()
  windows
- Function mne.set_bipolar_reference() was not working when passing Epochs constructed
  with some picks
- Fix anonymization issue of FIF files after IO round trip
- Fix bug in mne.preprocessing.ICA.plot_sources where right-clicking component names
  could yield plot_properties windows for the wrong component if picks had been specified
- Fix title not shown in mne.viz.plot_montage()
- mne.io.read_raw_egi now correctly handles pathlib.Path filenames
- mne.viz.plot_evoked and mne.Evoked.plot now correctly plot global field power (GFP)
  for EEG data when gfp=True or gfp='only' is passed
- Minimum required versions were increased for core dependencies NumPy (1.15.4), SciPy
  (1.1.0), and Matplotlib (3.0)
- The parameter `on_split_missing` has been added to `mne.io.read_raw_fif()` and its
  default will change from 'warn' to 'raise' in 0.23
- The `max_pca_components` argument of `ICA` has been deprecated, use `n_components`
  during initialization and `n_pca_components` in `apply()` instead
- The `n_pca_components` argument of `ICA` has been deprecated, use `n_pca_components`
  in `apply()`
- The `trans` argument of `mne.extract_label_time_course()` is deprecated and will
  be removed in 0.23 as it is no longer necessary
- Parameter `event_colors` in `mne.viz.plot_epochs` and `mne.Epochs.plot` is deprecated,
  replaced by `event_color` which is consistent with `mne.viz.plot_raw` and provides
  greater flexibility
- Fix bug in mne.io.Raw.pick() and related functions when parameter list contains
  channels which are not in info instance
- Fix a few typos
- Fix bug with mne.Epochs.crop() and mne.Evoked.crop() when include_tmax=False, where
  the last sample was always cut off, even when tmax > epo.times[-1]
- Fix bug with mne.io.read_raw_curry to allow reading Curry 7 and 8 event files with
  ‘.ceo’ and ‘.cdt.ceo’ extensions
- Fix bug with mne.compute_rank, mne.cov.compute_whitener and mne.preprocessing.ICA.fit
  when explicit picks including bad channels are provided
- Fix bug with mne.concatenate_epochs() where the concatenated events could end up
  in non-chronological order.
- Fix bug where mne.time_frequency.psd_array_welch() and mne.time_frequency.psd_array_multitaper()
  failed to handle negative integer for n_jobs argument
- Fix bug where resampling returns empty instances
- Fix bug with mne.io.Raw.get_montage now returning both good and bad channels in
  the montage.
- Fix bug with mne.io.read_raw_nihon() where latin-1 annotations could not be read
- Fix bug when printing a mne.io.RawArray in the notebook
- Fix bug when computing rank from info for SSS data with only gradiometers or magnetometers
- Fix bug with mne.preprocessing.find_bad_channels_maxwell where all-flat segments
  could lead to an error
- Fix bug with mne.io.Raw.set_montage and related functions where the channel coordinate
  frame was not properly set to head
- Fix bug with mne.io.read_raw_fieldtrip and mne.read_epochs_fieldtrip where channel
  positions were not set properly
- Fix bug with mne.io.read_raw_kit() where omitting HPI coils could lead to an AssertionError
  on reading
- Fix bug with mne.io.read_raw_edf() where reading only stimulus channels would lead
  to an error
- Fix bug with mne.preprocessing.nirs.optical_density where protection against zero
  values was not guaranteed
- mne.concatenate_raws() now raises an exception if raw.info['dev_head_t'] differs
  between files. This behavior can be controlled using the new on_mismatch parameter
- Fixed bug in mne.Epochs.drop_bad() where subsequent rejections failed if they only
  specified thresholds for a subset of the channel types used in a previous rejection
- Fix bug with mne.simulation.simulate_evoked, mne.apply_forward, and mne.apply_forward_raw
  where systems with EEG channels that come before MEG channels would have them mixed
  up in the output evoked or raw object
- In mne.viz.plot_ica_scores() and mne.preprocessing.ICA.plot_scores(), the figure
  and axis titles no longer overlap when plotting only a single EOG or ECG channel
- Ensure mne.io.Raw.get_montage works with SNIRF data
- Fix bug in mne.setup_volume_source_space() where non-finite positions could be used
  in a discrete source space
- Fix bug in mne.viz.plot_topomap (and related methods like mne.Evoked.plot_topomap)
  where large distances between electrodes (higher than head radius) would lead to
  an error
- Fix bug in mne.viz.plot_topomap (and related methods) where passing axes that are
  part of a matplotlib figure that uses a constrained layout would emit warnings
- Fix bug in mne.make_forward_solution() where impossible sensor-BEM geometries were
  not checked
- Fix bug in mne.concatenate_epochs() when concatenating mne.Epochs objects with 0
  events
- Fix bug in mne.viz.Brain.screenshot() where the RGBA mode was not supported
- Add support for exporting to EEGLAB’s set format with eeglabio (in eeglabio v0.0.2-4)
  with new methods mne.io.Raw.export() and mne.Epochs.export().
- mne.viz.plot_evoked_topo() now uses a Minimum/Maximum of peaks for each channel
  type to calculate ylim when input param is None.
- Add exclude parameter to mne.viz.plot_evoked_topo().
- Add mne.time_frequency.EpochsTFR.to_data_frame() and mne.time_frequency.AverageTFR.to_data_frame()
  methods.
- Add selection and drop_log to mne.time_frequency.EpochsTFR.
- Add CSV, TSV, and XYZ support to mne.channels.read_custom_montage().
- Add HTML representation for Epochs in Jupyter Notebooks.
- Speed up mne.viz.plot_ica_properties() by refactoring.
- Add apply_function method to epochs and evoked objects.
- New tutorial for function mne.make_fixed_length_epochs().
- Add different colors for each volume source space in mne.viz.plot_alignment().
- Add overlap parameter to mne.make_fixed_length_epochs() to allow creating overlapping
  fixed length epochs.
- Add mne.Dipole.to_mni() for more convenient dipole.pos to MNI conversion.
- Update citations in maxwell.py.
- New Tutorial for analyzing frequency-tagging data.
- Add dbs as new channel type for deep brain stimulation (DBS) recordings.
- Add some preprocessing functions to the EEGLAB migration guide.
- Add mne.chpi.extract_chpi_locs_kit() to read cHPI coil locations from KIT/Yokogawa
  data.
- Add match_alias parameter to mne.io.Raw.set_montage() and related functions to match
  unrecognized channel location names to known aliases.
- Update the notebook 3d backend to use ipyvtk_simple for a better integration within
  Jupyter.
- Remove the 15-character limitation for channel names when writing to FIF format.
- Fixed a bug when creating spherical volumetric grid source spaces in `setup_volume_source_space()`
  by improving the minimum-distance computations, which in general will decrease the
  number of used source space points.
- Fix bug in `mne.io.read_raw_brainvision()` read .vhdr files with ANSI codepage.
- Fix unit scaling when reading in EGI digitization files using `mne.channels.read_dig_montage`.
- Fix `picks` default in `mne.io.Raw.filter()` to include `ref_meg` channels by default.
- Fix `mne.decoding.CSP` order of spatial filter in `patterns_`.
- '`mne.concatenate_epochs()` now maintains the relative position of events during
  concatenation.'
- Fix bug in script `mne make_scalp_surfaces` (this bug prevented creation of high-resolution
  meshes when they were absent in the first place.)
- Fix writing of raw files with empty set of annotations.
- Fix bug in `mne.preprocessing.ICA.plot_properties()` where merging gradiometers
  would fail.
- Fix `mne.viz.plot_sensors()` to maintain proper aspect ratio.
- Removed the mne.datasets.megsim dataset because it was taken down by its host (MRN).
  Use the mne.simulation functions instead.
- Add skip_by_annotation to mne.io.Raw.filter() to process data concatenated with
  e.g. mne.concatenate_raws() separately.
- ICA channel names have now been reformatted to start from zero, e.g. "ICA000", to
  match indexing schemes in mne.preprocessing.ICA and related functions.
- Add mne.beamformer.make_lcmv() and mne.beamformer.apply_lcmv() to enable the separate
  computation and application of LCMV beamformer weights.
- Add weight_norm parameter to enable both unit-noise-gain beamformer and neural activity
  index.
- Add new filtering mode fir_design='firwin' that gets improved attenuation using
  fewer samples compared to fir_design='firwin2'.
- Make the goodness of fit (GOF) of the dipoles returned by mne.beamformer.rap_music()
  consistent with the GOF of dipoles returned by mne.fit_dipole().
- mne.decoding.SlidingEstimator will now replace mne.decoding.TimeDecoding to make
  it generic and fully compatible with scikit-learn.
- mne.decoding.GeneralizingEstimator will now replace mne.decoding.GeneralizationAcrossTime
  to make it generic and fully compatible with scikit-learn.
- mne.viz.decoding.plot_gat_times, mne.viz.decoding.plot_gat_matrix are now deprecated.
  Use matplotlib instead as shown in the examples.
- Add norm_trace parameter to control single-epoch covariance normalization in mne.decoding.CSP.
- Allow passing a list of channel names as show_names in function mne.viz.plot_sensors().
- Make function mne.io.eeglab.read_events_eeglab public to allow loading overlapping
  events from EEGLAB files.
- mne.find_events() mask_type parameter will change from 'not_and' to 'and'.
- Instead of raising an error, duplicate channel names in the data file are now appended
  with a running number.
- mne.io.read_raw_edf() has now 'auto' option for stim_channel that automatically
  detects if EDF annotations or GDF events exist.
- mne.io.Raw.plot_psd() now rejects data annotated bad by default.
- mne.set_eeg_reference() and the related methods have a new argument projection.
- Deprecate plot_trans in favor of mne.viz.plot_alignment() and add bem parameter
  for plotting conductor model.
- mne.beamformer.tf_lcmv now has a raw parameter to accommodate epochs objects that
  already have data loaded with preload=True.
- mne.time_frequency.psd_welch and mne.time_frequency.psd_array_welch now use a Hamming
  window.
- picks parameter in mne.beamformer.lcmv is now deprecated.
- The keyword argument frequencies has been deprecated in favor of freqs in various
  time-frequency functions.
- Add patterns=False parameter in mne.decoding.ReceptiveField.
- The scale, scale_time, and unit parameters have been deprecated in favor of scalings,
  scalings_time, and units in mne.viz.plot_evoked_topomap().
- loose parameter in inverse solvers has now a default value 'auto'.
- The behavior of 'mean_flip' label-flipping in mne.extract_label_time_course() has
  been changed.
- Deprecate force_fixed and surf_ori in mne.read_forward_solution().
- mne.convert_forward_solution() has a new argument use_cps.
- mne.write_forward_solution() writes a forward solution as a forward solution with
  free orientation in X/Y/Z RAS coordinates.
- loose=None in inverse solvers is deprecated.
- Zero-channel-value in PSD calculation in mne.viz.plot_raw_psd() has been relaxed
  from error to warning.
- Expose 'rank' parameter in mne.viz.plot_evoked_white() to correct rank estimates
  on the spot during visualization.
- Show channel name under mouse cursor on topography plots.
- Return maximum response amplitude from mne.Evoked.get_peak()
- Fix orthogonalization of power envelopes in mne.connectivity.envelope_correlation
- Fix data overwrite of cascading simulation operations :mne.simulation.simulate_raw
- Fix a transpose issue of mne.decoding.CSP.plot_filters()
- Fix mne.io.read_raw_curry() to deal with Curry datasets that have channels that
  are listed in the labels file, but which are absent from the saved data file (e.g.
  ‘Ref’ channel). Also now populates info[‘meas_date’] if possible
- Fix bug with mne.io.egi.tests/test_egi.py where it mandatorily downloaded testing
  data when it was not necessary
- Fix bug with reading split files that have dashes in the filename
- Fix bug with parsing EDF dates and date integers
- Fix bug with reading EDF and KIT files on big endian architectures such as s390x
- Fix bug with mne.beamformer.make_dics() where the rank parameter was not properly
  handled
- Fix bug with mne.beamformer.apply_dics() where the whitener was not properly applied
- Fix bug with plot_epochs_image when order is supplied and multiple conditions are
  plotted
- Fix bug with mne.viz.plot_source_estimates() when using the PyVista backend where
  singleton time points were not handled properly
- Fix bug when passing axes to plotting functions, matplotlib.pyplot.tight_layout()
  will not be called when the figure was created using a constrained layout
- Fix bug with compensated CTF data when picking channels without preload
- Fix bug with plotting MEG topographies where the wrong extrapolation made was used
  in ICA
- Fix bug when merging fNIRS channels in mne.viz.plot_evoked_topomap() and related
  functions
- Fix bug where events could overflow when writing to FIF
- mne.io.read_raw_edf() now supports EDF files with invalid recording dates
- Fix bug with mne.io.Raw.save() when using split_naming='bids' where non-split files
  would still be named name_split-01_meg.fif instead of the requested name_meg.fif
- Fix bug with mne.preprocessing.ICA where n_pca_components as a float would give
  the number of components that explained less than or equal to the given variance.
  It now gives greater than the given number for better usability and consistency
  with sklearn.decomposition.PCA
- Fix bug with mne.preprocessing.ICA where projections were not tracked properly
- Fix bug where extrapolation points created artifacts in mne.viz.plot_evoked_topomap()
  and related functions
- Fix bug with mne.preprocessing.read_ica_eeglab() where full-rank data were not handled
  properly
- Fix bug where the BEM was not included
- Fix bug with coordinate frames when performing volumetric morphs via mne.compute_source_morph()
  and mne.SourceMorph.apply() that could lead to ~5 mm bias
- Fix bug with volumetric rendering alpha in mne.VolSourceEstimate.plot_3d() and related
  functions
- Fix missing documentation of mne.io.read_raw_nihon() in Importing data from EEG
  devices
- Fix bug with mne.add_reference_channels() when mne.io.Raw.reorder_channels() or
  related methods are used afterward
- Fix bug where the verbose arguments to mne.Evoked.apply_baseline() and mne.Epochs.apply_baseline()
  were not keyword-only
- ICA.max_pca_components will not be altered by calling fit anymore. Instead, the
  new attribute ICA.max_pca_components_ will be set
- Fix bug that plot_ica_overlay would sometimes not create red traces
- Fix bug with ICA where n_components=None, n_pca_components=None could lead to unstable
  unmixing matrix inversion by making n_components=None also use the lesser of n_components=0.999999
  and n_components=n_pca_components
- The ica.n_pca_components property is no longer be updated during mne.preprocessing.ICA.fit(),
  instead ica.n_components_ will be added to the instance
- Pass rank everywhere in forward preparation for source imaging. This bug affected
  sparse solvers when using maxfilter data
- Fix bug in mne.viz.plot_alignment() where ECoG and sEEG channels were not plotted
  and fNIRS channels were always plotted in the head coordinate frame
- Fix bug in mne.set_bipolar_reference() where ch_info could contain invalid channel
  information keys
- When reading BrainVision raw data, the channel units and types were sometimes not
  inferred correctly
- Attempting to remove baseline correction from preloaded Epochs will now raise an
  exception
- mne.Report.parse_folder() will now correctly handle split FIFF files
- Fix bug where BrainVision channel names, event types, and event descriptions containing
  commas were incorrectly parsed
- Fix bug in mne.preprocessing.compute_fine_calibration() where the magnetometer calibration
  coefficients were computed incorrectly
- Fix bug in mne.io.read_raw_eeglab() where empty event durations led to an error
- Fix inset sensor plots to always use equal aspect
- Fix bug in mne.viz.plot_compare_evokeds where evokeds with identical comment attributes
  would not plot properly if passed as a list
- Fix bug in mne.time_frequency.psd_welch and related functions where the window default
  errantly changed from 'hamming' to ('tukey', 0.25)
- Fix bug in mne.io.read_raw_kit() where scale factors for EEG channels could be set
  to zero
- Fix reading GDF files with excluded channels in mne.io.read_raw_gdf()
- Fix automatic selection of extrapolation mask type from channel type when plotting
  field maps
- Fix bug in mne.viz.set_3d_title() where 3D plot could have multiple titles that
  overlap
- Fix bug in mne.viz.set_3d_view() where plotter is not updated properly causing camera
  issues in the doc
- mne.preprocessing.find_ecg_events() didn’t take the tstart parameter value into
  account when calculating the average heart rate
- Noise normalization factors weight_norm='unit-noise-gain' and weight_norm='nai'
  were computed incorrectly
- pick_ori='max-power' computed the max-power orientation incorrectly
- pick_ori='normal' did not compute power or noise normalization factors correctly
- Fix bug with mne.io.read_raw_edf() where null bytes were not properly handled, causing
  an error when opening a file
- Fix bug with mne.Report() where unicode characters were not rendered properly (encoding
  for HTML was not set)
- Fix bug with mne.preprocessing.nirs.scalp_coupling_index() where filter transition
  was incorrectly assigned
- Fix bug that prevents n_jobs from being a NumPy integer type
- Fix bug with mne.get_volume_labels_from_aseg() where the returned labels were alphabetical
  instead of reflecting their volumetric ID-based order
- Throw proper error when trying to import FieldTrip Epochs data with non-uniform
  time for trials
- Throw proper error when trying to import FieldTrip data saved by an old, incompatible
  version
- regularization, which was off by roughly a factor of a square root
- units, which are now nAm instead of being arbitrary
- explained variance and residuals, which were previously unavailable
- Users sometimes encounter difficulty getting a working MNE-Python environment on
  shared resources (such as compute clusters), due to various problems (old versions
  of package managers or graphics libraries, lack of sufficient permissions, etc).
- Fix setting montage eeg ref position for captrak
- Fix saving raw read from BDF file using `tmin` and `tmax` using `preload=False`
- Fix one-sample baseline issue in [`mne.BaseEpochs`](../generated/mne.BaseEpochs.html#mne.BaseEpochs)
  when using `tmin=0`
- The Project is developed by a team of distributed developers, called Contributors.
- The Project is released under the BSD (or similar) open source license, developed
  openly and is hosted publicly under the mne-tools GitHub organization.
- Deprecated separate reading of annotations and synthesis of STI014 channels in readers
- Prepare transition to Python 3. This release will be the last release compatible
  with Python 2.
- Fix bug with DICS and LCMV where regularization was done improperly.
- The default reg=0.01 has been changed to reg=0.05.
- If you haven’t already installed MNE-Python, please take a look at our installation
  guides.
- Add Python3 support
- Add full provenance tracking for epochs
- Uses double-precision 64-bit floating point format for computations.
- Saving intermediate results to disk in 32-bit format may lead to loss in precision.
- The Maintainer Team is responsible for implementing changes to the software and
  supporting the user community.
- The Steering Council is responsible for guiding and shepherding the project on a
  day-to-day basis.
- SSP may remove both artifact and signal of interest, check effects
- Coordinate systems in MNE-Python are encoded as constant integer values.
- The head and device coordinate systems are right-handed Cartesian coordinate systems.
- Coil geometry information is stored in the file `mne/data/coil_def.dat`.
- The MNE software employs data whitening so that a ‘whitened’ inverse operator assumes
  a specific form.
- The expected current values are calculated using the inverse operator.
- MNE-Python converts measurements to standard units.
- Operations are performed in double-precision 64-bit format.
- This section does not discuss the transformation between the MRI voxel indices and
  the different MRI coordinates.
- MNE ships with several coil geometry configurations. They can be found in mne/data.
- If a plus-minus sign occurs in several coordinates, all possible combinations have
  to be included.
- Computing the inverse operator is accomplished using mne.minimum_norm.make_inverse_operator()
  and mne.minimum_norm.apply_inverse()
- The current estimates are normally defined only in a decimated grid which is a sparse
  subset of the vertices in the triangular tessellation of the cortical surface.
- This API does not require authentication.
- Documentation primarily focuses on tutorials and examples for MNE-Python.
- Bad channels should be marked in the original raw data files.
- Alignment of coordinate frames is crucial for processing.
- Data must be preloaded in order to add events.
- Boundaries of the raw files are annotated bad. If you wish to use the data as continuous
  recording, you can remove the boundary annotations after concatenation.
- Uses REST API for data processing
- Requires installation of MNE-Python
- Export to external format may not preserve all the information from the instance.
- To save in native MNE format (`.fif`) without information loss, use [`mne.io.Raw.save()`]
  instead.
- Export does not apply projector(s). Unapplied projector(s) will be lost.
- Consider applying projector(s) before exporting with [`mne.io.Raw.apply_proj()`].
- Although this function supports storing channel types in the signal label (e.g.
  `EEG Fz` or `MISC E`), other software may not support this (optional) feature of
  the EDF standard.
- Be careful when using method="nan"; the default value reset_bads=True may not be
  what you want.
- Applies a zero-phase notch filter to the channels selected by 'picks'. By default
  the data of the Raw object is modified inplace.
- If n_jobs > 1, more memory is required as len(picks) * n_times additional time points
  need to be temporarily stored in memory.
- If True (default), a splash screen is shown during the application startup. Only
  applicable to the qt backend.
- For the PyQtGraph backend to run in IPython with `block=False` you must run the
  magic command `%gui qt5` first.
- Channel names must be unique.
- For some data, it may be more accurate to use npad=0 to reduce artifacts.
- 'The following sensor types are accepted: bio, chpi, csd, dbs, dipole, ecg, ecog,
  eeg, emg, eog, exci, eyegaze, fnirs_cw_amplitude, fnirs_fd_ac_amplitude, fnirs_fd_phase,
  fnirs_od, gof, gsr, hbo, hbr, ias, misc, pupil, ref_meg, resp, seeg, stim, syst,
  temperature.'
- Only EEG/sEEG/ECoG/DBS/fNIRS channels can have their positions set using a montage.
  Other channel types (e.g., MEG channels) should have their positions defined properly
  using their data reading functions.
- Applying a montage will only set locations of channels that exist at the time it
  is applied. This means when re-referencing make sure to apply the montage only after
  calling mne.add_reference_channels()
- Removes potentially identifying information if it exists in info.
- If `raw` contains annotations, `Epochs` can be constructed around `raw.annotations.onset`,
  but note that the durations of the annotations are ignored in this case.
- This function only works if bad epochs have been dropped.
- New in v1.0.
- Control verbosity of the logging output.
- New in v1.2.
- New in v1.8.
- 'Changed in version 0.23: Default to equalizing all events in the passed instance
  if no event names were specified explicitly.'
- New in v0.24.
- EDF does not support storing a montage. You will need to store the montage separately.
- Applies a zero-phase low-pass, high-pass, band-pass, or band-stop filter to the
  channels selected by `picks`.
- The data are modified inplace.
- Be careful when using method='nan'; the default value reset_bads=True may not be
  what you want.
- A particular scaling value `s` corresponds to half of the visualized signal range
  around zero (i.e. from `0` to `+s` or from `0` to `-s`).
- If True (default), a splash screen is shown during the application startup.
- To report issues with the PyQtGraph backend, please use the issues of `mne-qt-browser`.
- New in v0.9.0.
- Interactive mode works smoothly only for a small amount of topomaps. Interactive
  mode is disabled by default for more than 2 topomaps.
- You can control how channels are aggregated into one figure or plotted in separate
  figures through a combination of the picks, group_by, and combine parameters.
- 'LEGACY: New code should use .compute_psd().plot_topo()'
- Applying a montage will only set locations of channels that exist at the time it
  is applied.
- 'LEGACY: New code should use .compute_psd().plot_topomap().'
- This function plots the sensor locations from the info structure using matplotlib.
- In an interactive Python session, this plot will be interactive.
- When accessing data, Epochs are detrended, baseline-corrected, and decimated, then
  projectors are (optionally) applied.
- New in v0.22.0.
- New in v0.16.0.
- New in v0.10.0.
- New in v0.17.
- New in v0.18.
- New in v0.15.
- New in v1.7.
- New in v1.4.
- If `self` is a Raw instance that has been preloaded into a numpy.memmap instance,
  the memmap will be resized.
- If `info['meas_date']` is `None`, it will remain `None` during processing the above
  fields.
- Baseline correction can be done multiple times, but can never be reverted once the
  data has been loaded.
- New in v0.13.0.
- 'Some common referencing schemes and the corresponding value for the ref_channels
  parameter: Average reference: A new virtual reference electrode is created by averaging
  the current EEG signal by setting ref_channels=''average''. Bad EEG channels are
  automatically excluded if they are properly set in info[''bads''].'
- During source localization, the EEG signal should have an average reference.
- Once the projectors have been applied, they can no longer be removed.
- It is usually not recommended to apply the projectors at too early stages, as they
  are applied automatically later on (e.g. when computing inverse solutions).
- Using virtual epochs to compute inverse can yield unexpected results.
- When picks is None and epochs contain only ICA channels, no channels are selected,
  resulting in an error.
- Evoked objects can only contain the average of a single set of conditions.
- To save in native MNE format (`.fif`) without information loss, use [`mne.Evoked.save()`]
  instead.
- Consider applying projector(s) before exporting with [`mne.Evoked.apply_proj()`].
- New in v0.20.0.
- 'Changed in version 1.7: The default changed from False in 1.6 to True in 1.7.'
- New in v1.1.
- New in v0.20.
- 'Changed in version 1.6: Passing events=None was disallowed. The new equivalent
  is events=False.'
- Defaults to True for show_density parameter.
- Defaults to 'terrain' for interaction parameter.
- New in v0.12.0.
- Default is None.
- New in v0.15.0.
- 'Changed in version 1.1: Support for array-like input.'
- 'Changed in version 0.21: Support for ‘reconstruct’ was added.'
- 'Changed in version 1.1: Added ‘eeglab’ option.'
- 'Changed in version 0.21: The default was changed to ''local'' for MEG sensors.'
- For the PyQtGraph backend to run in IPython with block=False you must run the magic
  command %gui qt5 first.
- When existing axes are provided and colorbar=True, note that the colorbar scale
  will only accurately reflect topomaps that are generated in the same call as the
  colorbar.
- 'LEGACY: New code should use .compute_psd().plot_topomap.'
- If True (default False), allow duplicates, which will automatically be renamed with
  `-N` at the end.
- If True, the DataFrame is returned in long format where each row is one observation
  of the signal at a unique combination of time point and channel.
- Desired time format. If `None`, no conversion is applied, and time values remain
  as float values in seconds.
- 'Some common referencing schemes and the corresponding value for the ref_channels
  parameter: Average reference: A new virtual reference electrode is created by averaging
  the current EEG signal by setting ref_channels=''average''. Bad EEG channels are
  automatically excluded if they are properly set in info[''bads'']. A single electrode:
  Set ref_channels to a list containing the name of the channel that will act as the
  new reference, for example ref_channels=[''Cz'']. The mean of multiple electrodes:
  A new virtual reference electrode is created by computing the average of the current
  EEG signal recorded from two or more selected channels. Set ref_channels to a list
  of channel names, indicating which channels to use. For example, to apply an average
  mastoid reference, when using the 10-20 naming scheme, set ref_channels=[''M1'',
  ''M2'']. REST: The given EEG electrodes are referenced to a point at infinity using
  the lead fields in forward, which helps standardize the signals.'
- This class should not be instantiated directly via `mne.Info(...)`. Instead, use
  [`mne.create_info()`] to create measurement information from scratch.
- 'The only entries that should be manually changed by the user are: `info[''bads'']`,
  `info[''description'']`, `info[''device_info'']`, `info[''dev_head_t'']`, `info[''experimenter'']`,
  `info[''helium_info'']`, `info[''line_freq'']`, `info[''temp'']`, and `info[''subject_info'']`.'
- All other entries should be considered read-only, though they can be modified by
  various MNE-Python functions or methods (which have safeguards to ensure all fields
  remain in sync).
- Defaults to True.
- If envelope=False, the analytic signal for the channels/vertices defined in picks
  is computed and the data of the Raw object is converted to a complex representation
  (the analytic signal is complex valued).
- If envelope=True, the absolute value of the analytic signal for the channels/vertices
  defined in picks is computed, resulting in the envelope signal.
- Using virtual evoked to compute inverse can yield unexpected results. The virtual
  channels have '_v' appended at the end of the names to emphasize that the data contained
  in them are interpolated.
- This method returns a copy and does not modify the data it operates on.
- Export to external format may not preserve all the information from the instance.
  To save in native MNE format (`.fif`) without information loss, use [`mne.Evoked.save()`]
  instead.
- Export does not apply projector(s). Unapplied projector(s) will be lost. Consider
  applying projector(s) before exporting with [`mne.Evoked.apply_proj()`].
- If a string, must be a sub-multiple of SI units that will be used to scale the data
  from all channels of the type associated with that unit.
- If a dictionary is provided, keys must be channel types, and values must be units
  to scale the data of that channel type to.
- The channel names given are assumed to be a set, i.e. the order does not matter.
  The original order of the channels is preserved. You can use `reorder_channels`
  to set channel order if necessary.
- If bad channels are not excluded they are shown in red.
- 'Changed in version 1.1: Added ''eeglab'' option.'
- Defaults to 'terrain' for interaction.
- Currently direct inclusion of reference channel weights is not supported. Please
  use `mne_create_comp_data` to include the weights or use the low level functions
  from this module to include them by yourself.
- The informed guess for the 4D name is E31 for the ECG channel and E63, E63 for the
  EOG channels. Please check and adjust if those channels are present in your dataset
  but ‘ECG 01’ and ‘EOG 01’, ‘EOG 02’ don’t appear in the channel names of the raw
  object.
- 2d spatial coordinates (x, y) for EEG channels are read from the file header and
  fit to a sphere to compute corresponding z-coordinates.
- If channels assigned as EEG channels have locations far away from the head, all
  the channel locations will be distorted.
- May not work on all systems / platforms.
- To read in the Polhemus digitization data (for example, from a .pos file), include
  the file in the CTF directory.
- When existing `axes` are provided and `colorbar=True`, note that the colorbar scale
  will only accurately reflect topomaps that are generated in the same call as the
  colorbar.
- Note also that the colorbar will not be resized automatically when `axes` are provided;
  use Matplotlib’s [`axes.set_position()`](https://matplotlib.org/stable/api/_as_gen/matplotlib.axes.Axes.set_position.html#matplotlib.axes.Axes.set_position)
  method or [gridspec](https://matplotlib.org/stable/users/explain/axes/arranging_axes.html#arranging-axes)
  interface to adjust the colorbar size yourself.
- 'A single electrode: Set ref_channels to a list containing the name of the channel
  that will act as the new reference, for example ref_channels=[''Cz''].'
- 'The mean of multiple electrodes: A new virtual reference electrode is created by
  computing the average of the current EEG signal recorded from two or more selected
  channels. Set ref_channels to a list of channel names, indicating which channels
  to use. For example, to apply an average mastoid reference, when using the 10-20
  naming scheme, set ref_channels=[''M1'', ''M2''].'
- 'REST: The given EEG electrodes are referenced to a point at infinity using the
  lead fields in forward, which helps standardize the signals.'
- If a reference is requested that is not the average reference, this function removes
  any pre-existing average reference projections.
- In order to apply a reference, the data must be preloaded. This is not necessary
  if ref_channels='average' and projection=True.
- For an average or REST reference, bad EEG channels are automatically excluded if
  they are properly set in info['bads'].
- Desired time format. If None, no conversion is applied, and time values remain as
  float values in seconds.
- mne.io.Raw only stores signals with matching sampling frequencies.
- Using preload=True is recommended to avoid edge artifacts when upsampling mixed
  frequency signals.
- This class should not be instantiated directly via mne.Info(...). Instead, use mne.create_info()
  to create measurement information from scratch.
- It is common for SR Research Eyelink eye trackers to only record data during trials.
  To avoid frequent data discontinuities and to ensure that the data is continuous
  so that it can be aligned with EEG and MEG data (if applicable), this reader will
  preserve the times between recording trials and annotate them with 'BAD_ACQ_SKIP'.
- If mixed sampling frequency signals are requested, all signals are upsampled to
  the highest loaded sampling frequency.
- New in v0.14.0.
- 'Changed in version 0.20: Return the instance.'
- New in v0.20.1.
- If channels named ‘status’ or ‘trigger’ are present, they are considered as STIM
  channels by default.
- Uses OAuth2 with refresh token — requires setup of connected app in mne
- elp and hsp are usually the exported text files (*.txt) from the Polhemus FastScan
  system.
- If mrk, hsp or elp are array_like inputs, then the numbers in xyz coordinates should
  be in units of meters.
- This reader takes data files with the extension .data as an input. The header file
  with the same file name stem and an extension .head is expected to be found in the
  same directory.
- Hitachi does not encode their channel positions, so you will need to create a suitable
  mapping using mne.channels.make_standard_montage() or mne.channels.make_dig_montage()
- Operates in place.
- This function is a convenient wrapper for readers defined in mne.io. The correct
  reader is automatically selected based on the detected file format.
- This function has only been tested with NIRScout and NIRSport devices, and with
  the NIRStar software version 15 and above and Aurora software 2021 and above.
- This reader supports the .snirf file type only, not the .jnirs version.
- Files with either 3D or 2D locations can be read. However, we strongly recommend
  using 3D positions.
- If 2D positions are used the behaviour of MNE functions can not be guaranteed.
- New in v0.11.0.
- If channels assigned as EEG channels have locations far away from the head (i.e.
  x and y coordinates don’t fit to a sphere), all the channel locations will be distorted.
- If you are not sure that the channel locations in the header are correct, it is
  probably safer to replace them with mne.io.Raw.set_montage().
- Montages can be created/imported with standard montages with mne.channels.make_standard_montage()
  or montages for Compumedics systems with mne.channels.read_dig_dat().
- New in v0.12.
- BrainVision markers consist of a type and a description.
- Preload data into memory for data manipulation and faster indexing.
- When events_from_annotations=True, event codes on stimulus channels like DIN1 are
  stored as annotations with the description set to the stimulus channel name.
- When events_from_annotations=False and events are present on the included stimulus
  channels, a new stim channel STI014 will be synthesized from the events.
- In some special cases, it may be necessary to shift event values in order to retrieve
  correct event triggers.
- When reading a FIF file, note that the first N seconds annotated BAD_ACQ_SKIP are
  skipped.
- It is common for SR Research Eyelink eye trackers to only record data during trials.
- mne.io.Raw only stores signals with matching sampling frequencies. Therefore, if
  mixed sampling frequency signals are requested, all signals are upsampled to the
  highest loaded sampling frequency.
- FieldTrip does not normally store the original information concerning channel location,
  orientation, type etc. It is therefore highly recommended to provide the info field.
- elp and hsp are usually the exported text files (*.txt) from the Polhemus FastScan
  system. hsp refers to the headshape surface points. elp refers to the points in
  head-space that corresponds to the HPI points.
- It is assumed that the .lay and .dat file are in the same directory.
- API does not require authentication.
- NEDF file versions starting from 1.3 are supported.
- Requires setup of OAuth2 for authentication
- NSx files with id (= NEURALSG), i.e., version 2.1 is currently not supported.
- Neuralynx files are read from disk using the Neo package.
- Currently, only reading of the .ncs files is supported.
- This class is public to allow for stable type-checking in user code (i.e., `isinstance(my_raw_object,
  BaseRaw)`) but should not be used as a constructor for [`Raw`](mne.io.Raw.html#mne.io.Raw)
  objects (use instead one of the subclass constructors, or one of the `mne.io.read_raw_*`
  functions).
- BrainVision markers consist of a type and a description (in addition to other fields
  like onset and duration).
- If you want to ignore the type and instead only use the description, set `ignore_marker_types=True`.
- When reading a FIF file, note that the first N seconds annotated BAD_ACQ_SKIP are
  skipped. They are removed from raw.times and raw.n_times parameters but raw.first_samp
  and raw.first_time are updated accordingly.
- Requires setup of connected app in api
- FieldTrip does not normally store the original information concerning channel location,
  orientation, type etc.
- It is therefore highly recommended to provide the info field.
- A built-in helmet is loaded if possible. If not, a helmet surface will be approximated
  based on the sensor locations.
- The label names are now sorted in the same order as their corresponding values in
  the MRI file.
- API requires OAuth2 authentication.
- Certain metadata may not be available for all requests.
- Only cortical labels will be returned.
- Control verbosity of the logging output. If None, use the default verbosity level.
- If `s_id` is not None, only the requested surface will be returned.
- This class is public to allow for stable type-checking in user code (i.e., `isinstance(my_raw_object,
  BaseRaw)`)
- 'Changed in version 0.20: Support for reading bdip (Xfit binary) format.'
- Only epochs with the same amount of channels and samples are supported.
- This function will discard the offset line (i.e., first line with zero event number)
  if it is present in a text file.
- The filename should end with `-ave.fif` or `-ave.fif.gz`.
- Correction is applied to each channel individually.
- New in v0.22.
- for volume source estimates, fname should provide the path to a single file named
  '*-vl.stc' or '*-vol.stc'
- for surface source estimates, fname should either provide the path to the file corresponding
  to a single hemisphere ('*-lh.stc', '*-rh.stc') or only specify the asterisk part
  in these patterns. In any case, the function expects files for both hemisphere with
  names following this pattern.
- for vector surface source estimates, only HDF5 files are supported.
- for mixed source estimates, only HDF5 files are supported.
- for single time point .w files, fname should follow the same pattern as for surface
  estimates, except that files are named '*-lh.w' and '*-rh.w'.
- Only epochs with the same amount of channels and samples are supported!
- Only works when reading a FreeSurfer surface file. For .obj files this dictionary
  will be empty.
- If True, return all transformations in the file. False (default) will only return
  the first.
- If the read Evoked objects have already been baseline-corrected, the data retrieved
  from disk will always be baseline-corrected.
- Some endpoints may require specific query parameters.
- Vertices that are not covered by any of the labels are assigned to a label named
  "unknown".
- Forward solutions, which are derived from an original forward solution with free
  orientation, are always stored on disk as forward solution with free orientation
  in X/Y/Z RAS coordinates.
- To apply any transformation to the forward operator (surface orientation, fixed
  orientation) please apply `convert_forward_solution()` after reading the forward
  solution with `read_forward_solution()`.
- Forward solutions, which are derived from an original forward solution with fixed
  orientation, are stored on disk as forward solution with fixed surface-based orientations.
- 'Changed in version 0.23: Information on baseline correction will be stored with
  each individual Evoked object, and will be restored when reading the data again
  via mne.read_evokeds.'
- Forward solutions, which are derived from an original forward solution with free
  orientation, are always stored on disk as forward solution with free orientation
  in X/Y/Z RAS coordinates. Transformations (surface orientation, fixed orientation)
  will be reverted. To reapply any transformation to the forward operator please apply
  [`convert_forward_solution()`] after reading the forward solution with [`read_forward_solution()`].
- Forward solutions, which are derived from an original forward solution with fixed
  orientation, are stored on disk as forward solution with fixed surface-based orientations.
  Please note that the transformation to surface-based, fixed orientation cannot be
  reverted after loading the forward solution with [`read_forward_solution()`].
- for surface source estimates, fname should either provide the path to the file corresponding
  to a single hemisphere ('*-lh.stc', '*-rh.stc') or only specify the asterisk part
  in these patterns
- for vector surface source estimates, only HDF5 files are supported
- for mixed source estimates, only HDF5 files are supported
- for single time point .w files, fname should follow the same pattern as for surface
  estimates, except that files are named '*-lh.w' and '*-rh.w'
- Note that due to file specification limitations, the Label’s subject and color attributes
  are not saved to disk.
- The name of the file should end with '-src.fif' or '-src.fif.gz'.
- Vertices that are not covered by any of the labels are assigned to a label named
  'unknown'.
- If True (default False), overwrite the destination file if it exists.
- Values which might vary within a channel type across real data recordings are excluded
  unless `include_defaults=True`.
- This class should not be instantiated directly via mne.BaseEpochs(...)
- If the extension is `.fif`, events are written in binary FIF format, otherwise (e.g.,
  `.eve`, `.lst`, `.txt`) events are written as plain text.
- New format event files do not contain the 'time' column (used to be the second column).
- The BaseEpochs class is public to allow for stable type-checking in user code (i.e.,
  isinstance(my_epochs, BaseEpochs)) but should not be used as a constructor for Epochs
  objects (use instead mne.Epochs).
- The file name should end with '-ave.fif' or '-ave.fif.gz'.
- 'Proper units of measure: V: eeg, eog, seeg, dbs, emg, ecg, bio, ecog; T: mag; T/m:
  grad; M: hbo, hbr; Am: dipole; AU: misc'
- Applies a zero-phase low-pass, high-pass, band-pass, or band-stop filter to the
  channels selected by picks.
- New in v0.16.
- This method exists to support legacy code; for new code the preferred idiom is `inst.compute_psd().plot()`
  (where `inst` is an instance of [`Raw`](mne.io.Raw.html#mne.io.Raw), [`Epochs`](mne.Epochs.html#mne.Epochs),
  or [`Evoked`](mne.Evoked.html#mne.Evoked)).
- 'LEGACY: New code should use .compute_psd().plot_topo().'
- Note also that the colorbar will not be resized automatically when axes are provided;
  use Matplotlib’s axes.set_position method or gridspec interface to adjust the colorbar
  size yourself.
- New in v0.19.
- Values which might vary within a channel type across real data recordings are excluded
  unless include_defaults=True.
- If envelope=False, more memory is required since the original raw data as well as
  the analytic signal have temporarily to be stored in memory.
- The n_fft parameter will allow you to pad the signal with zeros before performing
  the Hilbert transform.
- 'Proper units of measure: V: eeg, eog, seeg, dbs, emg, ecg, bio, ecog; T: mag; T/m:
  grad; M: hbo, hbr; Am: dipole; AU: misc.'
- If average=True (or method="stockwell", average="auto") the result will be an AverageTFR
  instead of an EpochsTFR.
- Dropping bad epochs can be done multiple times with different reject and flat parameters.
  However, once an epoch is dropped, it is dropped forever, so if more lenient thresholds
  may subsequently be applied, epochs.copy should be used.
- Using virtual evoked to compute inverse can yield unexpected results.
- 'LEGACY: New code should use .compute_psd().plot()'
- Parameters for plotting functions include various options for customization.
- For drawing the sensors using PyVista see mne.viz.plot_alignment().
- Note also that the colorbar will not be resized automatically when axes are provided;
  use Matplotlib’s axes.set_position() method or gridspec interface to adjust the
  colorbar size yourself.
- If baseline signals match the assumption of Gaussian white noise, values should
  be centered at 0, and be within 2 standard deviations (±1.96) for 95% of the time
  points. For the global field power (GFP), we expect it to fluctuate around a value
  of 1.
- If one single covariance object is passed, the GFP panel (bottom) will depict different
  sensor types. If multiple covariance objects are passed as a list, the left column
  will display the whitened evoked responses for each channel based on the whitener
  from the noise covariance that has the highest log-likelihood.
- The sphere parameters to use for the head outline. Can be array-like of shape (4,)
  to give the X/Y/Z origin and radius in meters, or a single float to give just the
  radius (origin assumed 0, 0, 0). Can also be an instance of a spherical ConductorModel
  to use the origin and radius from that object. If 'auto' the sphere is fit to digitization
  points. If 'eeglab' the head circle is defined by EEG electrodes 'Fpz', 'Oz', 'T7',
  and 'T8' (if 'Fpz' is not present, it will be approximated from the coordinates
  of 'Oz'). None (the default) is equivalent to 'auto' when enough extra digitization
  points are available, and (0, 0, 0, 0.095) otherwise.
- Bad epochs will be dropped before saving the epochs to disk.
- Channels are converted to columns in the DataFrame.
- By default, an additional column 'time' is added, unless index='time'.
- Proper units of measure include V for eeg, eog, seeg, dbs, emg, ecg, bio, ecog;
  T for mag; T/m for grad; M for hbo, hbr; Am for dipole; AU for misc.
- Epochs object from numpy array.
- EpochsArray does not set Annotations.
- The analytic signal can be used for the computation of the envelope signal.
- Using virtual epochs to compute inverse can yield unexpected results. The virtual
  channels have '_v' appended at the end of the names to emphasize that the data contained
  in them are interpolated.
- New in v0.23.0.
- Since we are exporting to external formats, there’s no guarantee that all the info
  will be preserved in the external format.
- Uses REST API
- The projection vector can only be removed if it is inactive (has not been applied
  to the data).
- Consider applying projector(s) before exporting.
- The default changed from False in 1.6 to True in 1.7.
- 'LEGACY: New code should use .compute_psd().plot_topomap()'
- 'For Savitzky-Golay low-pass approximation, see: https://gist.github.com/larsoner/bbac101d50176611136b'
- Defaults for parameters are provided in the documentation.
- The sphere parameters to use for the head outline can be array-like of shape (4,)
  to give the X/Y/Z origin and radius in meters, or a single float to give just the
  radius (origin assumed 0, 0, 0).
- If 'auto' the sphere is fit to digitization points.
- If 'eeglab' the head circle is defined by EEG electrodes 'Fpz', 'Oz', 'T7', and
  'T8'.
- None is equivalent to 'auto' when enough extra digitization points are available.
- The info dictionary will be sparsely populated to enable functionality within the
  rest of the package.
- Advanced functionality such as source localization can only be obtained through
  substantial, proper modifications of the info structure (not recommended).
- Only EEG/sEEG/ECoG/DBS/fNIRS channels can have their positions set using a montage.
- Export to external format may not preserve all the information from the instance.
  To save in native MNE format (`.fif`) without information loss, use [`mne.Epochs.save()`]
  instead.
- Export does not apply projector(s). Unapplied projector(s) will be lost. Consider
  applying projector(s) before exporting with [`mne.Epochs.apply_proj()`].
- For EEGLAB exports, channel locations are expanded to full EEGLAB format.
- Also note that the n_fft parameter will allow you to pad the signal with zeros before
  performing the Hilbert transform.
- To save in native MNE format (`.fif`) without information loss, use [`mne.Evoked.save()`].
- Applies a zero-phase notch filter to the channels selected by 'picks'.
- 'Changed in version 0.21: Support for float, and default changed from None to 1.5.'
- To save in native MNE format (.fif) without information loss, use mne.Evoked.save()
  instead.
- Consider applying projector(s) before exporting with mne.Evoked.apply_proj().
- Only EEG channels are written to the output file.
- info['device_info']['type'] must be a valid MFF recording device (e.g. ‘HydroCel
  GSN 256 1.0’). This field is automatically populated when using MFF read functions.
- Whether to apply projectors prior to plotting (default is True). Individual projectors
  can be enabled/disabled interactively.
- How to group channels. 'type' groups by channel type, 'original' plots in the order
  of ch_names, 'selection' uses Elekta’s channel groupings, 'position' groups the
  channels by the positions of the sensors.
- Whether to start in butterfly mode. Defaults to False.
- Amount to decimate the data during display for speed purposes. The ‘auto’ mode (default)
  uses the decimation that results in a sampling rate least three times larger than
  min(info['lowpass'], lowpass).
- Noise covariance used to whiten the data while plotting. Whitened data channels
  are scaled by scalings['whitened'].
- Event IDs used to show at event markers (default None shows the event numbers).
- Whether to show scrollbars when the plot is initialized. Default is True.
- Whether to show scale bars when the plot is initialized. Default is True.
- Style of time labels on the horizontal axis. If 'float', labels will be number of
  seconds from the start of the recording. If 'clock', labels will show 'clock time'
  (hours/minutes/seconds). Default is 'float'.
- Whether to load all data into RAM and apply preprocessing (default None uses the
  MNE_BROWSER_PRECOMPUTE variable, which defaults to 'auto').
- Whether to use OpenGL when rendering the plot (requires pyopengl). Default is None.
- Channels to include. None (default) will pick all channels.
- Can be 'auto', 'light', or 'dark' or a path-like to a custom stylesheet. Default
  is 'auto'.
- Can be 'channels', 'empty', or 'hidden' to set the overview bar mode. Default is
  'channels'.
- 'The dataset_params argument must contain the following keys: archive_name, url,
  folder_name, hash, config_key (optional).'
- To save in native MNE format (`.fif`) without information loss, use [`mne.Epochs.save()`].
- Consider applying projector(s) before exporting with [`mne.Epochs.apply_proj()`].
- If the brainstorm (bst_raw) dataset is not found under the given path, the data
  will be automatically downloaded to the specified folder.
- '`info[''device_info''][''type'']` must be a valid MFF recording device (e.g. ‘HydroCel
  GSN 256 1.0’). This field is automatically populated when using MFF read functions.'
- This function is designed to provide all modern (Freesurfer 6) fsaverage subject
  files.
- This function will compare the contents of subjects_dir/fsaverage to the ones provided
  in the remote zip file.
- Use of this parcellation is subject to terms of use on the HCP-MMP webpage
- If you use these templates in your work, please cite Christian O’Reilly et al. and
  John E. Richards et al.
- This function is designed to provide a head surface and T1.mgz for the 32-dipole
  Otaniemi phantom.
- 'The dataset_params argument must contain the following keys: archive_name, url,
  folder_name, hash'
- If the brainstorm (bst_auditory) dataset is not found under the given path, the
  data will be automatically downloaded to the specified folder.
- If the opm dataset is not found under the given path, the data will be automatically
  downloaded to the specified folder.
- If False and the opm dataset has not been downloaded yet, it will not be downloaded
  and the path will be returned as an empty string.
- 'The subjects to use can be in the range of 0-82 (inclusive), however the following
  subjects are not available: 39, 68, 69, 78 and 79.'
- 'The night recording indices are: [1], [2], or [1, 2]. The following recordings
  are not available: recording 1 for subject 36 and 52, and recording 2 for subject
  13.'
- If the Polysomnography dataset is not found under the given path, the data will
  be automatically downloaded to the specified folder.
- If the sample dataset is not found under the given path, the data will be automatically
  downloaded to the specified folder.
- If False and the sample dataset has not been downloaded yet, it will not be downloaded
  and the path will be returned as ‘’ (empty string).
- If None, the environment variable or config parameter MNE_DATASETS_UCL_OPM_AUDITORY_PATH
  is used.
- If the ucl_opm_auditory dataset is not found under the given path, the data will
  be automatically downloaded to the specified folder.
- If the fnirs_motor dataset is not found under the given path, the data will be automatically
  downloaded to the specified folder.
- If the visual_92_categories dataset is not found under the given path, the data
  will be automatically downloaded to the specified folder.
- If the kiloword dataset is not found under the given path, the data will be automatically
  downloaded to the specified folder.
- If False and the kiloword dataset has not been downloaded yet, it will not be downloaded
  and the path will be returned as '' (empty string).
- If None, the environment variable or config parameter `MNE_DATASETS_PHANTOM_4DBTI_PATH`
  is used.
- If the phantom_4dbti dataset is not found under the given path, the data will be
  automatically downloaded to the specified folder.
- If the phantom_kernel dataset is not found under the given path, the data will be
  automatically downloaded to the specified folder.
- If False and the phantom_kernel dataset has not been downloaded yet, it will not
  be downloaded and the path will be returned as '' (empty string).
- If None, the environment variable or config parameter MNE_DATASETS_MISC_PATH is
  used.
- If it doesn’t exist, the “~/mne_data” directory is used.
- If None, the environment variable or config parameter MNE_DATASETS_ERP_CORE_PATH
  is used.
- If the erp_core dataset is not found under the given path, the data will be automatically
  downloaded to the specified folder.
- If the multimodal dataset is not found under the given path, the data will be automatically
  downloaded to the specified folder.
- If False and the multimodal dataset has not been downloaded yet, it will not be
  downloaded and the path will be returned as '' (empty string).
- If None, the environment variable or config parameter MNE_DATASETS_OPML_PATH is
  used.
- The subjects to use can be in the range of 0-82 (inclusive).
- 'Valid night recording indices are: [1], [2], or [1, 2].'
- The API for this class is not currently complete.
- We suggest using mne.viz.plot_source_estimates() with the PyVista backend enabled
  to obtain a Brain instance.
- This will fetch data from the publicly available subjects from PhysioNet’s study
  of Temazepam effects on sleep.
- Offers flexibility over the colormap and displays four-dimensional data.
- If data is defined for a subset of vertices, a smoothing method is used to interpolate.
- If None, the environment variable or config parameter MNE_DATASETS_SAMPLE_PATH is
  used.
- The builtin string views are based on the RAS convention.
- If None, the environment variable or config parameter MNE_DATASETS_SPM_DATA_PATH
  is used.
- Default is False.
- If True (default), set the MNE_DATASETS_SPM_DATA_PATH in mne-python config to the
  given path.
- The figure will publish and subscribe to UI events.
- This class should not be instantiated directly via mne.viz.Figure3D(...). Instead,
  use mne.viz.create_3d_figure().
- If None, the environment variable or config parameter MNE_DATASETS_VISUAL_92_CATEGORIES_PATH
  is used.
- If True (default), set the MNE_DATASETS_VISUAL_92_CATEGORIES_PATH in mne-python
  config to the given path.
- This modifies the figure and/or axes in place.
- If None, the environment variable or config parameter MNE_DATASETS_PHANTOM_4DBTI_PATH
  is used.
- If path is None, the environment variable or config parameter MNE_DATASETS_PHANTOM_KERNEL_PATH
  is used.
- If the phantom_kernel dataset is not found under the given path, the data will be
  automatically downloaded.
- For this will return a colormap that will display correctly for data that are scaled
  by the plotting function to span [-fmax, fmax].
- Images are plotted in MRI voxel coordinates.
- If the epilepsy_ecog dataset is not found under the given path, the data will be
  automatically downloaded to the specified folder.
- If False and the epilepsy_ecog dataset has not been downloaded yet, it will not
  be downloaded and the path will be returned as '' (empty string). This is mostly
  used for debugging purposes and can be safely ignored by most users.
- For each channel type, the rank is estimated using mne.compute_rank().
- 'Changed in version 0.19: Approximate ranks for each channel type are shown with
  red dashed lines.'
- The API for this class is not currently complete. We suggest using mne.viz.plot_source_estimates()
  with the PyVista backend enabled to obtain a Brain instance.
- Functions available for visualization of brain data
- Parameters include various customization options for display
- The builtin string views are the following perspectives, based on the RAS convention.
  If not otherwise noted, the view will have the top of the brain (superior, +Z) in
  3D space shown upward in the 2D perspective.
- 'The figure will publish and subscribe to the following UI events: TimeChange, Contours,
  ColormapRange'
- This class should not be instantiated directly via mne.viz.Figure3D(...)
- Defaults to None, which does nothing to axes.
- API may have rate limits.
- Some endpoints require specific query parameters.
- If you supply a list of existing Axes, then the figure legend will not be drawn
  automatically.
- For each channel type, the rank is estimated using mne.compute_rank.
errors:
- 'REQUEST_LIMIT_EXCEEDED: Throttle API calls or reduce frequency'
- 'QUERY_TIMEOUT: Break down filters or add selectivity'
- '401 Unauthorized: Recheck OAuth scopes or token expiration'
- '400 Bad Request: Check the request format and parameters.'
- '403 Forbidden: Verify your access rights.'
- '404 Not Found: Ensure the endpoint exists.'
- 'ValueError: If fname has file extension other than ‘.mff’.'
- 'ValueError: If the MFF file specified by fname is not averaged.'
- 'ValueError: If no categories.xml file in MFF directory specified by fname.'
- '404 Not Found: Verify the endpoint path'
- '403 Forbidden: Check your permissions'
- '500 Internal Server Error: Try again later'
- If two hemispheres are being shown, an error will be thrown.
- 'INVALID_PARAMETER: Ensure parameters are correctly formatted'
- 'DATA_NOT_FOUND: Verify that the data exists for the requested visualization'
auth_info:
  mentioned_objects:
  - io.Raw
  - Epochs
  - Evoked
  - Info
  - OauthToken
  - AuthProvider
  - NamedCredential
  - mne.io.Raw
  - mne.Epochs
  - mne.Evoked
  - mne.Info
client:
  base_url: https://mne.tools
  headers:
    Accept: application/json
source_metadata: null
