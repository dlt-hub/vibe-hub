resources:
- name: index
  endpoint:
    path: /create_index
    method: POST
    data_selector: response
    params: {}
- name: upsert_records
  endpoint:
    path: /upsert
    method: POST
    data_selector: response
    params: {}
- name: search
  endpoint:
    path: /search
    method: POST
    data_selector: response
    params: {}
- name: dense_indexes
  endpoint:
    path: /guides/index-data/create-an-index#create-a-dense-index
    method: GET
    data_selector: records
    params: {}
- name: sparse_indexes
  endpoint:
    path: /guides/index-data/create-an-index#create-a-sparse-index
    method: GET
    data_selector: records
    params: {}
- name: data_ingestion
  endpoint:
    path: /guides/index-data/import-data
    method: GET
    data_selector: records
    params: {}
- name: create_index
  endpoint:
    path: /indexes
    method: POST
    data_selector: schema
    params: {}
- name: describe_index
  endpoint:
    path: /indexes/{index_name}
    method: GET
    data_selector: schema
    params: {}
- name: multilingual-e5-large
  endpoint:
    path: /models/multilingual-e5-large
    method: GET
    data_selector: details
- name: llama-text-embed-v2
  endpoint:
    path: /models/llama-text-embed-v2
    method: GET
    data_selector: details
- name: pinecone-sparse-english-v0
  endpoint:
    path: /models/pinecone-sparse-english-v0
    method: GET
    data_selector: details
- name: document_chunks
  endpoint:
    path: /v1/indices/{index_name}/vectors/upsert
    method: POST
    data_selector: records
- name: upsert_chunks
  endpoint:
    path: /upsert
    method: POST
    data_selector: vectors
- name: fetch_chunks
  endpoint:
    path: /fetch
    method: POST
    data_selector: vectors
- name: multitenant-app
  endpoint:
    path: /create_index
    method: POST
    data_selector: index
    params: {}
- name: dedicated_read_capacity
  endpoint:
    path: /guides/index-data/dedicated-read-capacity
    method: GET
    data_selector: records
    params: {}
- name: search_records
  endpoint:
    path: /reference/api/latest/data-plane/search_records
    method: POST
    data_selector: records
- name: query
  endpoint:
    path: /reference/api/latest/data-plane/query
    method: POST
    data_selector: records
- name: search_records
  endpoint:
    path: /records/namespaces/{namespace}/search
    method: POST
    data_selector: result.hits
    params: {}
- name: query
  endpoint:
    path: /query
    method: POST
    data_selector: result.hits
    params: {}
- name: dense_index
  endpoint:
    path: /indexes/dense-for-hybrid-py
    method: POST
    data_selector: records
- name: sparse_index
  endpoint:
    path: /indexes/sparse-for-hybrid-py
    method: POST
    data_selector: records
- name: dense_index
  endpoint:
    path: /dense_index
    method: POST
    data_selector: result.hits
    params: {}
- name: sparse_index
  endpoint:
    path: /sparse_index
    method: POST
    data_selector: result.hits
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: rerank_results
  endpoint:
    path: /inference/rerank
    method: POST
    data_selector: data
    params: {}
- name: create_index
  endpoint:
    path: /control-plane/create_index
    method: POST
    data_selector: data
    params: {}
- name: records
  endpoint:
    path: /reference/api/latest/data-plane/upsert
    method: POST
    data_selector: records
- name: query
  endpoint:
    path: /reference/api/latest/data-plane/query
    method: POST
    data_selector: results
- name: query
  endpoint:
    path: /query
    method: POST
    data_selector: matches
    params:
      namespace: example-namespace
      top_k: 40
- name: search
  endpoint:
    path: /reference/api/latest/data-plane/search_records
    method: POST
    data_selector: result.hits
    params: {}
- name: rerank
  endpoint:
    path: /reference/api/latest/inference/rerank
    method: POST
    data_selector: data
    params: {}
- name: index
  endpoint:
    path: /describe_index
    method: GET
    data_selector: host
- name: list_indexes
  endpoint:
    path: /reference/api/latest/control-plane/list_indexes
    method: GET
    data_selector: indexes
- name: describe_index
  endpoint:
    path: /reference/api/latest/control-plane/describe_index
    method: GET
    data_selector: index
    params:
      incremental: name
- name: delete_index
  endpoint:
    path: /reference/api/latest/control-plane/delete_index
    method: DELETE
- name: configure_index
  endpoint:
    path: /reference/api/latest/control-plane/configure_index
    method: POST
- name: index_list
  endpoint:
    path: /reference/api/latest/control-plane/list_indexes
    method: GET
    data_selector: '[]'
    params: {}
- name: describe_index
  endpoint:
    path: /reference/api/latest/control-plane/describe_index
    method: GET
    data_selector: '{}'
    params: {}
- name: delete_index
  endpoint:
    path: /reference/api/latest/control-plane/delete_index
    method: DELETE
    data_selector: '{}'
    params: {}
- name: configure_index
  endpoint:
    path: /reference/api/latest/control-plane/configure_index
    method: POST
    data_selector: '{}'
    params: {}
- name: list_backups
  endpoint:
    path: /reference/api/latest/control-plane/list_index_backups
    method: GET
    data_selector: '[]'
    params: {}
- name: create_namespace
  endpoint:
    path: /reference/api/2025-10/data-plane/createnamespace
    method: POST
- name: list_namespaces
  endpoint:
    path: /reference/api/latest/data-plane/listnamespaces
    method: GET
- name: describe_namespace
  endpoint:
    path: /reference/api/latest/data-plane/describenamespace
    method: GET
- name: delete_namespace
  endpoint:
    path: /reference/api/latest/data-plane/deletenamespace
    method: DELETE
- name: move_records_to_new_namespace
  endpoint:
    path: /guides/manage-data/delete-data
    method: DELETE
- name: use_default_namespace
  endpoint:
    path: /guides/index-data/upsert-data
    method: POST
- name: update_record
  endpoint:
    path: /reference/api/latest/data-plane/update
    method: POST
    data_selector: records
    params:
      namespace: __default__
      id: id-3
      values: '[4.0, 2.0]'
      setMetadata: '{"type": "doc", "genre": "drama"}'
- name: update_records
  endpoint:
    path: /vectors/update
    method: POST
    data_selector: matchedVectors
    params:
      namespace: __default__
- name: update_record
  endpoint:
    path: /vectors/update
    method: POST
    data_selector: matchedVectors
    params:
      namespace: example-namespace
- name: update_record
  endpoint:
    path: /vectors/update
    method: POST
    data_selector: matchedVectors
    params:
      namespace: __default__
- name: update_records
  endpoint:
    path: /vectors/update
    method: POST
    data_selector: matchedVectors
    params:
      namespace: __default__
      filter:
        document_title:
          $eq: Introduction to Vector Databases
      setMetadata:
        author: Del Klein
      dry_run: true
- name: delete_records_by_id
  endpoint:
    path: /delete-records-by-id
    method: DELETE
    data_selector: records
    params:
      namespace: __default__
- name: delete_records_by_metadata
  endpoint:
    path: /delete-records-by-metadata
    method: DELETE
    data_selector: records
    params: {}
- name: delete_all_records_in_namespace
  endpoint:
    path: /delete-all-records-in-a-namespace
    method: DELETE
    data_selector: records
    params:
      namespace: __default__
- name: delete_entire_namespace
  endpoint:
    path: /delete-an-entire-namespace
    method: DELETE
    data_selector: records
    params: {}
- name: delete_entire_index
  endpoint:
    path: /delete-an-entire-index
    method: DELETE
    data_selector: records
    params: {}
- name: list_record_ids
  endpoint:
    path: /reference/api/latest/data-plane/list
    method: GET
    data_selector: results
    params:
      namespace: example-namespace
      limit: 100
- name: metrics
  endpoint:
    path: /prometheus/projects/PROJECT_ID/metrics/discovery
    method: GET
- name: dense-index
  endpoint:
    path: /services/data/v2025-01/indexes/dense-index
    method: GET
    data_selector: records
    params: {}
- name: sparse-index
  endpoint:
    path: /services/data/v2025-01/indexes/sparse-index
    method: GET
    data_selector: records
    params: {}
- name: upload_file
  endpoint:
    path: /reference/api/latest/assistant/upload_file
    method: POST
    data_selector: response
- name: chat_assistant
  endpoint:
    path: /reference/api/latest/assistant/chat_assistant
    method: POST
    data_selector: response
- name: create_assistant
  endpoint:
    path: /reference/api/latest/assistant/create_assistant
    method: POST
    data_selector: response
- name: delete_assistant
  endpoint:
    path: /reference/api/latest/assistant/delete_assistant
    method: DELETE
    data_selector: response
- name: upsert_records
  endpoint:
    path: /reference/api/latest/data-plane/upsert_records
    method: POST
- name: upsert_records
  endpoint:
    path: /reference/api/latest/data-plane/upsert_records
    method: POST
    data_selector: records
- name: index
  endpoint:
    path: /create_index
    method: POST
    data_selector: index
- name: query_namespaces
  endpoint:
    path: /query_namespaces
    method: POST
    data_selector: results
- name: indexes
  endpoint:
    path: /indexes
    method: GET
- name: upsert
  endpoint:
    path: /path/to/input/directory/
    method: POST
    data_selector: lines
    params:
      apiKey: PINECONE_API_KEY
      indexName: PINECONE_INDEX_NAME
      sourceTag: PINECONE_SOURCE_TAG
      checkpointLocation: path/to/checkpoint/dir
notes:
- Pinecone Support is available to customers on the Standard billing plan.
- First-response SLAs only apply to tickets created by users in an organization subscribed
  to a support plan.
- 'Breaking Change: After August 31, 2025 at 11:59:59 PM UTC, the SSE-based MCP endpoint
  for assistants will no longer work.'
- Some features are in public preview.
- Uses OAuth2 with refresh token — requires setup of connected app in api
- Some objects like Contact may return nulls in deeply nested fields
- Pinecone is eventually consistent, so there can be a slight delay before new or
  changed records are visible to queries.
- API keys are project-specific.
- Sparse indexes have a maximum of 1000 non-zero values per vector.
- 'Max queries per second per sparse index: 100.'
- Indexes with integrated embedding do not support updating or importing with text.
- Pinecone is eventually consistent, so it’s possible that a write followed immediately
  by a read may not return the latest version of the data.
- Pinecone is eventually consistent, so a write followed immediately by a read may
  not return the latest version of the data.
- Pinecone is eventually consistent, so immediate reads after writes may not return
  the latest data.
- This feature is in early access and not yet available to all users.
- Filtering by required terms is supported only for indexes with integrated embedding.
- Recommended to use separate dense and sparse indexes for hybrid search.
- Use 'bge-reranker-v2-m3' model for reranking.
- Ensure to use dense vector type with dotproduct metric for hybrid indexing.
- Only dense indexes using the dotproduct distance metric support dense and sparse
  vectors.
- Upserting records with dense and sparse vectors into dense indexes with a different
  distance metric will succeed, but querying will return an error.
- Pinecone provides hosted reranking models for two-stage vector retrieval.
- Do not target an index by name in production.
- This feature is in early access and is available only on the unstable version of
  the API.
- Pinecone is eventually consistent, so there can be a slight delay before your update
  request is processed.
- This feature is available only on the unstable version of the API.
- Each request updates a maximum of 100,000 records.
- The list endpoint is supported only for serverless indexes.
- Users on Standard and Enterprise plans can contact Support for help in optimizing
  costs.
- Consider creating a separate project for your development and production indexes,
  to allow for testing changes to your index before deploying them to production.
- Ensure that you have properly configured user access to the Pinecone console, so
  that only those users who need to access the production index can do so.
- Ensure that you have properly configured access through the API by managing API
  keys and using API key permissions.
- Pinecone Local is not suitable for production.
- Records loaded into Pinecone Local do not persist after it is stopped.
- Upserting text is supported only for indexes with integrated embedding.
- To control costs when ingesting large datasets (10,000,000+ records), use import
  instead of upsert.
- Uses API key for authentication
- Pinecone Assistant is generally available (GA) for all users.
- All HTTP requests to Pinecone APIs must contain an Api-Key header that specifies
  a valid API key
- Python SDK requires Python 3.9 or later.
- Ensure that your project is targeting .NET Standard 2.0+, .NET Core 3.0+, .NET Framework
  4.6.2+, or .NET 6.0+
- Use the pinecone-text Python client to encode sparse vectors for use in Pinecone’s
  hybrid search.
- Rate limits are restrictions on the frequency of requests within a specified period
  of time.
- Rate limits vary based on pricing plan and apply to serverless indexes only.
- These quotas are intended to provide reasonable boundaries and prevent unexpected
  or unintentional misuse.
errors:
- Index creation error - missing spec parameter
- Serverless index creation error - max serverless indexes
- Serverless index connection errors
- 'REQUEST_LIMIT_EXCEEDED: Throttle API calls or reduce frequency'
- '401 Unauthorized: Recheck API key or permissions'
- 'Max query results size: 4MB'
- '400 Bad Request: Check your request parameters.'
- '404 Not Found: The specified index does not exist.'
- 'Max result size exceeded: Choose a lower `top_k` value, or use `include_metadata=False`
  or `include_values=False` to exclude metadata or values from the result.'
- 'QUERY_TIMEOUT: Break down filters or add selectivity'
- '401 Unauthorized: Recheck OAuth scopes or token expiration'
- 'INVALID_API_KEY: Check your API key.'
- 'INDEX_NOT_FOUND: Ensure the index exists before performing operations.'
- '401 Unauthorized: Check API key.'
- '403 - FORBIDDEN: Deletion protection is enabled for this index. Disable deletion
  protection before retrying.'
- '200 OK: No records affected if a non-existent record ID is specified.'
- 'maxRecordsExceeded: Each request updates a maximum of 100,000 records.'
- '200 OK: No records are affected if a non-existent record ID is specified.'
- 'Max number of records per index: 100,000.'
- '401 Unauthorized: Recheck API Key or token expiration'
- 400 - INVALID ARGUMENT
- 401 - UNAUTHENTICATED
- 402 - PAYMENT REQUIRED
- 403 - FORBIDDEN
- 404 - NOT FOUND
- 409 - ALREADY EXISTS
- 412 - FAILED PRECONDITIONS
- 422 - UNPROCESSABLE ENTITY
- 429 - TOO MANY REQUESTS
- 500 - UNKNOWN
- 503 - UNAVAILABLE
- '429 - TOO_MANY_REQUESTS: Request failed. You''ve reached your read unit limit for
  the current month limit. To continue reading data, upgrade your plan.'
- '429 - TOO_MANY_REQUESTS: Request failed. You''ve reached your write unit limit
  for the current month. To continue writing data, upgrade your plan.'
- '429 - TOO_MANY_REQUESTS: Request failed. You''ve reached the max upsert size limit
  per second for index <index name>. Pace your upserts or contact Pinecone Support
  to request a higher limit.'
- '429 - TOO_MANY_REQUESTS: Request failed. You''ve reached the max query read units
  per second for index <index name>. Pace your queries or contact Pinecone Support
  to request a higher limit.'
- '429 - TOO_MANY_REQUESTS: Request failed. You''ve reached the max update records
  per second for namespace <namespace name>. Pace your update requests or contact
  Pinecone Support to request a higher limit.'
- '429 - TOO_MANY_REQUESTS: Request failed. You''ve reached the max fetch requests
  per second for index <index name>. Pace your fetch requests or contact Pinecone
  Support to request a higher limit.'
- '429 - TOO_MANY_REQUESTS: Request failed. You''ve reached the max list requests
  per second for index <index name>. Pace your list requests or contact Pinecone Support
  to request a higher limit.'
- '429 - TOO_MANY_REQUESTS: Request failed. You''ve reached the max describe_index_stats
  requests per second for index <index>. Pace your describe_index_stats requests or
  contact Pinecone Support to request a higher limit.'
- '429 - TOO_MANY_REQUESTS: Request failed. You''ve reached the max delete records
  per second for namespace <namespace name>. Pace your delete requests or contact
  Pinecone Support to request a higher limit.'
- '429 - TOO_MANY_REQUESTS: Request failed. You''ve reached the max delete records
  per second for index <index name>. Pace your delete requests or contact Pinecone
  Support to request a higher limit.'
- '429 - TOO_MANY_REQUESTS: Request failed. You''ve reached the rerank request limit
  (<limit>) for model <model name> for the current month. To continue using this model,
  upgrade your plan.'
- '403 - QUOTA_EXCEEDED: Request failed. You''ve reached the max projects allowed
  in organization <org name>. To add more projects, upgrade your plan.'
auth_info:
  mentioned_objects:
  - OauthToken
  - AuthProvider
  - NamedCredential
client:
  base_url: https://app.pinecone.io
  auth:
    type: oauth2
    location: header
    header_name: Authorization
source_metadata: null
