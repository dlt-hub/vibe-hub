resources:
- name: events
  endpoint:
    path: /v1/events
    method: GET
    data_selector: body.events
    params:
      page_size: '100'
      ordering: asc
- name: events
  endpoint:
    path: /v1/events
    method: GET
    data_selector: body.events
    params:
      start_time: 0
      ordering: asc
- name: realms
  endpoint:
    path: /v1/tenants/{tenant_id}/realms
    method: GET
    data_selector: realms
- name: realms
  endpoint:
    path: /v1/tenants/{tenant_id}/realms
    method: GET
    data_selector: realms
    params:
      page_size: 20
- name: groups
  endpoint:
    path: /v1/tenants/{tenant_id}/realms/{realm_id}/groups
    method: GET
    data_selector: schemas
    params:
      page_size: 20
- name: group
  endpoint:
    path: /v1/tenants/{tenant_id}/realms/{realm_id}/groups/{group_id}
    method: GET
    data_selector: schemas
    params: {}
- name: groups
  endpoint:
    path: /v1/tenants/{tenant_id}/realms/{realm_id}/groups
    method: GET
    data_selector: schemas
    params:
      page_size: 20
- name: group
  endpoint:
    path: /v1/tenants/{tenant_id}/realms/{realm_id}/groups/{group_id}
    method: GET
    data_selector: schemas
    params: {}
- name: patch_group
  endpoint:
    path: /Groups/{group_id}
    method: PATCH
    data_selector: schemas
    params: {}
- name: ServiceProviderConfig
  endpoint:
    path: /v1/tenants/{tenant_id}/realms/{realm_id}/scim/v2/ServiceProviderConfig
    method: GET
    data_selector: schemas
- name: identities
  endpoint:
    path: /v1/tenants/{tenant_id}/realms/{realm_id}/identities
    method: GET
    data_selector: identities
- name: ServiceProviderConfig
  endpoint:
    path: /v1/tenants/{tenant_id}/realms/{realm_id}/scim/v2/ServiceProviderConfig
    method: GET
    data_selector: schemas
    params: {}
- name: service_provider_config
  endpoint:
    path: /v1/tenants/{tenant_id}/realms/{realm_id}/scim/v2/ServiceProviderConfig
    method: GET
    data_selector: schemas
    params: {}
- name: credential_binding_jobs
  endpoint:
    path: /v1/tenants/{tenant_id}/realms/{realm_id}/identities/{identity_id}/credential-binding-jobs
    method: GET
    data_selector: schemas
    params:
      page_size: 20
- name: themes
  endpoint:
    path: /v1/tenants/{tenant_id}/realms/{realm_id}/themes/active
    method: GET
    data_selector: schemas
    params: {}
- name: ServiceProviderConfig
  endpoint:
    path: /v1/tenants/{tenant_id}/realms/{realm_id}/scim/v2/ServiceProviderConfig
    method: GET
    data_selector: schemas
    params: {}
- name: AddMembers
  endpoint:
    path: /v1/tenants/{tenant_id}/realms/{realm_id}/groups/{group_id}:addMembers
    method: POST
    data_selector: schemas
    params: {}
- name: DeleteMembers
  endpoint:
    path: /v1/tenants/{tenant_id}/realms/{realm_id}/groups/{group_id}:deleteMembers
    method: POST
    data_selector: schemas
    params: {}
- name: ListMembers
  endpoint:
    path: /v1/tenants/{tenant_id}/realms/{realm_id}/groups/{group_id}:listMembers
    method: GET
    data_selector: schemas
    params:
      page_size: integer
      page_token: string
      skip: integer
- name: ListRoles
  endpoint:
    path: /v1/tenants/{tenant_id}/realms/{realm_id}/groups/{group_id}:listRoles
    method: GET
    data_selector: schemas
    params:
      resource_server_id: string
      page_size: integer
      page_token: string
      skip: integer
- name: CreateIdentity
  endpoint:
    path: /v1/tenants/{tenant_id}/realms/{realm_id}/identities
    method: POST
    data_selector: schemas
    params: {}
- name: ListIdentities
  endpoint:
    path: /v1/tenants/{tenant_id}/realms/{realm_id}/identities
    method: GET
    data_selector: schemas
    params:
      filter: string
      page_size: integer
      page_token: string
      skip: integer
- name: ServiceProviderConfig
  endpoint:
    path: /v1/tenants/{tenant_id}/realms/{realm_id}/scim/v2/ServiceProviderConfig
    method: GET
    data_selector: schemas
- name: applications
  endpoint:
    path: /v1/tenants/{tenant_id}/realms/{realm_id}/applications
    method: GET
    data_selector: schemas
- name: application
  endpoint:
    path: /v1/tenants/{tenant_id}/realms/{realm_id}/applications/{application_id}
    method: GET
    data_selector: schemas
- name: ServiceProviderConfig
  endpoint:
    path: /v1/tenants/{tenant_id}/realms/{realm_id}/scim/v2/ServiceProviderConfig
    method: GET
    data_selector: schemas
    params: {}
- name: ListGroupMemberships
  endpoint:
    path: /v1/tenants/{tenant_id}/realms/{realm_id}/identities/{identity_id}:listGroups
    method: GET
    data_selector: schemas
    params:
      page_size: 20
- name: ListRoleMemberships
  endpoint:
    path: /v1/tenants/{tenant_id}/realms/{realm_id}/identities/{identity_id}:listRoles
    method: GET
    data_selector: schemas
    params: {}
- name: ListCredentials
  endpoint:
    path: /v1/tenants/{tenant_id}/realms/{realm_id}/identities/{identity_id}/credentials
    method: GET
    data_selector: schemas
    params:
      page_size: 20
- name: authenticator_configurations
  endpoint:
    path: /v1/tenants/{tenant_id}/realms/{realm_id}/authenticator-configs
    method: GET
- name: resource_servers
  endpoint:
    path: /v1/tenants/{tenant_id}/realms/{realm_id}/resource-servers
    method: GET
- name: credential_binding_jobs
  endpoint:
    path: /v1/tenants/{tenant_id}/realms/{realm_id}/identities/{identity_id}/credential-binding-jobs
    method: GET
- name: theme
  endpoint:
    path: /v1/tenants/{tenant_id}/realms/{realm_id}/themes/active
    method: GET
- name: ServiceProviderConfig
  endpoint:
    path: /v1/tenants/{tenant_id}/realms/{realm_id}/scim/v2/ServiceProviderConfig
    method: GET
    data_selector: schemas
- name: Roles
  endpoint:
    path: /v1/tenants/{tenant_id}/realms/{realm_id}/resource-servers/{resource_server_id}/roles
    method: GET
    data_selector: schemas
- name: ServiceProviderConfig
  endpoint:
    path: /v1/tenants/{tenant_id}/realms/{realm_id}/scim/v2/ServiceProviderConfig
    method: GET
    data_selector: schemas
- name: Applications
  endpoint:
    path: /v1/tenants/{tenant_id}/realms/{realm_id}/applications
    method: GET
    data_selector: applications
- name: Authenticator Configurations
  endpoint:
    path: /v1/tenants/{tenant_id}/realms/{realm_id}/authenticator-configs
    method: GET
- name: Resource Servers
  endpoint:
    path: /v1/tenants/{tenant_id}/realms/{realm_id}/resource-servers
    method: GET
- name: list_members
  endpoint:
    path: /v1/tenants/{tenant_id}/realms/{realm_id}/resource-servers/{resource_server_id}/roles/{role_id}:listMembers
    method: GET
    data_selector: members
- name: assign_scopes
  endpoint:
    path: /v1/tenants/{tenant_id}/realms/{realm_id}/resource-servers/{resource_server_id}/roles/{role_id}:addScopes
    method: POST
    data_selector: scopes
- name: assign_members
  endpoint:
    path: /v1/tenants/{tenant_id}/realms/{realm_id}/resource-servers/{resource_server_id}/roles/{role_id}:addMembers
    method: POST
    data_selector: members
- name: unassign_members
  endpoint:
    path: /v1/tenants/{tenant_id}/realms/{realm_id}/resource-servers/{resource_server_id}/roles/{role_id}:deleteMembers
    method: POST
    data_selector: members
- name: patch_role
  endpoint:
    path: /v1/tenants/{tenant_id}/realms/{realm_id}/resource-servers/{resource_server_id}/roles/{role_id}
    method: PATCH
    data_selector: role
- name: delete_role
  endpoint:
    path: /v1/tenants/{tenant_id}/realms/{realm_id}/resource-servers/{resource_server_id}/roles/{role_id}
    method: DELETE
    data_selector: role
- name: ServiceProviderConfig
  endpoint:
    path: /v1/tenants/{tenant_id}/realms/{realm_id}/scim/v2/ServiceProviderConfig
    method: GET
    data_selector: schemas
    params: {}
- name: roles
  endpoint:
    path: /v1/tenants/{tenant_id}/realms/{realm_id}/resource-servers/{resource_server_id}/roles
    method: GET
    data_selector: schemas
    params:
      page_size: 20
- name: users
  endpoint:
    path: /Users
    method: GET
    data_selector: schemas
    params:
      filter: string
      count: 0
      startIndex: 1
- name: user
  endpoint:
    path: /Users/{user_id}
    method: GET
    data_selector: schemas
- name: tokens
  endpoint:
    path: /v1/tenants/{tenant_id}/realms/{realm_id}/applications/{application_id}/tokens
    method: GET
    data_selector: schemas
- name: list_members
  endpoint:
    path: /v1/tenants/{tenant_id}/realms/{realm_id}/resource-servers/{resource_server_id}/roles/{role_id}:listMembers
    method: GET
- name: assign_members
  endpoint:
    path: /v1/tenants/{tenant_id}/realms/{realm_id}/resource-servers/{resource_server_id}/roles/{role_id}:addMembers
    method: POST
- name: unassign_members
  endpoint:
    path: /v1/tenants/{tenant_id}/realms/{realm_id}/resource-servers/{resource_server_id}/roles/{role_id}:deleteMembers
    method: POST
- name: assign_scopes
  endpoint:
    path: /v1/tenants/{tenant_id}/realms/{realm_id}/resource-servers/{resource_server_id}/roles/{role_id}:addScopes
    method: POST
- name: patch_role
  endpoint:
    path: /v1/tenants/{tenant_id}/realms/{realm_id}/resource-servers/{resource_server_id}/roles/{role_id}
    method: PATCH
- name: delete_role
  endpoint:
    path: /v1/tenants/{tenant_id}/realms/{realm_id}/resource-servers/{resource_server_id}/roles/{role_id}
    method: DELETE
- name: users
  endpoint:
    path: /Users/$USER_ID
    method: PATCH
    data_selector: user
- name: groups
  endpoint:
    path: /Groups
    method: GET
    data_selector: groups
- name: service_provider_config
  endpoint:
    path: /v1/tenants/{tenant_id}/realms/{realm_id}/scim/v2/ServiceProviderConfig
    method: GET
    data_selector: schemas
- name: users
  endpoint:
    path: /Users
    method: GET
    data_selector: schemas
    params:
      filter: ''
      count: 0
      startIndex: 1
- name: service_provider_config
  endpoint:
    path: /v1/tenants/{tenant_id}/realms/{realm_id}/scim/v2/ServiceProviderConfig
    method: GET
    data_selector: schemas
    params: {}
- name: ServiceProviderConfig
  endpoint:
    path: /v1/tenants/{tenant_id}/realms/{realm_id}/scim/v2/ServiceProviderConfig
    method: GET
    data_selector: schemas
- name: ResourceTypes
  endpoint:
    path: /ResourceTypes
    method: GET
    data_selector: schemas
- name: Schemas
  endpoint:
    path: /Schemas
    method: GET
    data_selector: schemas
- name: users
  endpoint:
    path: /Users/$USER_ID
    method: PATCH
    data_selector: user
- name: groups
  endpoint:
    path: /Groups/$GROUP_ID
    method: PATCH
    data_selector: group
- name: ServiceProviderConfig
  endpoint:
    path: /v1/tenants/{tenant_id}/realms/{realm_id}/scim/v2/ServiceProviderConfig
    method: GET
    data_selector: schemas
- name: ResourceTypes
  endpoint:
    path: /ResourceTypes
    method: GET
    data_selector: schemas
- name: Schemas
  endpoint:
    path: /Schemas
    method: GET
    data_selector: schemas
- name: application
  endpoint:
    path: /api/v1/applications
    method: POST
    data_selector: application
    params: {}
- name: applications
  endpoint:
    path: /api/v1/applications
    method: GET
    data_selector: applications
    params: {}
- name: realm
  endpoint:
    path: /realms
    method: POST
    data_selector: realm
    params: {}
- name: application
  endpoint:
    path: /applications
    method: POST
    data_selector: application
    params: {}
- name: Admin Console
  endpoint:
    path: /api/auth/callback/beyondidentity
    method: GET
    data_selector: records
    params: {}
- name: My First Application
  endpoint:
    path: /authentication/apps/my-first-application
    method: GET
    data_selector: data
- name: realm
  endpoint:
    path: /realms
    method: POST
    data_selector: realm_id
- name: application
  endpoint:
    path: /applications
    method: POST
    data_selector: application_id
- name: My First Application
  endpoint:
    path: /v1/tenants/{tenant_id}/realms/{realm_id}/applications/{application_id}
    method: GET
    data_selector: records
- name: My First Realm
  endpoint:
    path: /api/v1/realms
    method: GET
    data_selector: realms
    params: {}
- name: My First Application
  endpoint:
    path: /api/v1/applications
    method: GET
    data_selector: applications
    params: {}
- name: My First Application
  endpoint:
    path: /v1/tenants/{tenant_id}/realms/{realm_id}/applications/{application_id}
    method: GET
    data_selector: data
- name: realms
  endpoint:
    path: /realms
    method: POST
- name: resource_server
  endpoint:
    path: /resource-servers
    method: POST
    data_selector: resource_server
    params: {}
- name: identities
  endpoint:
    path: /v1/tenants/$(TENANT_ID)/realms/$(REALM_ID)/identities
    method: POST
    data_selector: id
    params: {}
- name: realms
  endpoint:
    path: /realms
    method: POST
    data_selector: null
    params: {}
- name: resource_server
  endpoint:
    path: /resource-servers
    method: POST
    data_selector: resource_server
    params: {}
- name: identities
  endpoint:
    path: /v1/tenants/$(TENANT_ID)/realms/$(REALM_ID)/identities
    method: POST
    data_selector: identity
    params: {}
- name: credential_binding_jobs
  endpoint:
    path: /v1/tenants/$(TENANT_ID)/realms/$(REALM_ID)/identities/$(IDENTITY_ID)/credential-binding-jobs
    method: POST
    data_selector: credential_binding_job
    params: {}
- name: credential_binding_jobs
  endpoint:
    path: /credential-binding-jobs
    method: POST
    data_selector: job
- name: identities
  endpoint:
    path: /v1/tenants/$(TENANT_ID)/realms/$(REALM_ID)/identities
    method: POST
    data_selector: identity
    params: {}
- name: identities
  endpoint:
    path: /v1/tenants/$(TENANT_ID)/realms/$(REALM_ID)/identities
    method: POST
    data_selector: identity
    params: {}
- name: credential_binding_jobs
  endpoint:
    path: /v1/tenants/$(TENANT_ID)/realms/$(REALM_ID)/identities/$(IDENTITY_ID)/credential-binding-jobs
    method: POST
    data_selector: credential_binding_link
- name: credential_binding_jobs
  endpoint:
    path: /v1/tenants/$(TENANT_ID)/realms/$(REALM_ID)/identities/$(IDENTITY_ID)/credential-binding-jobs
    method: POST
    data_selector: job
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: create_role
  endpoint:
    path: /docs/create-role
    method: POST
- name: Customer AuthN
  endpoint:
    path: /plugin/beyond-identity-customer-authn
    method: POST
- name: Customer Mgmt
  endpoint:
    path: /plugin/beyond-identity-customer-mgmt
    method: POST
- name: Beyond Identity
  endpoint:
    path: /openid-connect
    method: POST
- name: passkey
  endpoint:
    path: /v1/tenants/$TENANT_ID/realms/$REALM_ID/applications/$APPLICATION_ID/passkeys
    method: GET
    data_selector: passkeys
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
- name: identities
  endpoint:
    path: /v1/tenants/${process.env.BEYOND_IDENTITY_TENANT_ID}/realms/${process.env.BEYOND_IDENTITY_REALM_ID}/identities
    method: POST
    data_selector: id
- name: Customer Mgmt
  endpoint:
    path: /plugins/beyond-identity-customer-mgmt
    method: POST
    data_selector: identity
    params: {}
- name: Customer AuthN
  endpoint:
    path: /plugins/beyond-identity-customer-authn
    method: POST
    data_selector: authentication
    params: {}
- name: Beyond Identity
  endpoint:
    path: /openid-connect
    method: POST
- name: credential_binding_jobs
  endpoint:
    path: /v1/tenants/${process.env.BEYOND_IDENTITY_TENANT_ID}/realms/${process.env.BEYOND_IDENTITY_REALM_ID}/identities/${identityId}/credential-binding-jobs
    method: POST
    data_selector: job
    params: {}
- name: realm
  endpoint:
    path: /admin/realms
    method: POST
- name: application
  endpoint:
    path: /admin/apps
    method: POST
- name: identities
  endpoint:
    path: /v1/tenants/${process.env.BEYOND_IDENTITY_TENANT_ID}/realms/${process.env.BEYOND_IDENTITY_REALM_ID}/identities
    method: POST
    data_selector: id
- name: recover_user
  endpoint:
    path: /v1/manage/recover-user
    method: POST
- name: create_user
  endpoint:
    path: /v1/manage/users
    method: POST
- name: get_events
  endpoint:
    path: /v1/events
    method: GET
    params:
      page_size: '100'
- name: credential_binding_jobs
  endpoint:
    path: /v1/tenants/${process.env.BEYOND_IDENTITY_TENANT_ID}/realms/${process.env.BEYOND_IDENTITY_REALM_ID}/identities/${identityId}/credential-binding-jobs
    method: POST
    data_selector: job
    params: {}
- name: bi_authenticate
  endpoint:
    path: /bi-authenticate
    method: GET
    data_selector: request
    params: {}
- name: plugin_configuration
  endpoint:
    path: /wp-admin/admin-ajax.php?action=openid-connect-authorize
    method: POST
    data_selector: data
    params: {}
- name: CreateTenant
  endpoint:
    path: /create-tenant
    method: POST
    data_selector: data
    params: {}
- name: GroupChange
  endpoint:
    path: /group-change
    method: POST
    data_selector: data
    params: {}
- name: UserChange
  endpoint:
    path: /user-change
    method: POST
    data_selector: data
    params: {}
- name: GroupMembershipChange
  endpoint:
    path: /group-membership-change
    method: POST
    data_selector: data
    params: {}
- name: ContinuousAuthentication
  endpoint:
    path: /continuous-authentication
    method: POST
    data_selector: data
    params: {}
- name: DeviceCredentialChange
  endpoint:
    path: /device-credential-change
    method: POST
    data_selector: data
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: AddDevice
  endpoint:
    path: /AddDevice
    method: POST
    data_selector: result
- name: Policy
  endpoint:
    path: /Policy
    method: GET
    data_selector: result
- name: User
  endpoint:
    path: /User
    method: GET
    data_selector: result
- name: recover_user
  endpoint:
    path: /v1/manage/recover-user
    method: POST
- name: create_user
  endpoint:
    path: /v1/manage/users
    method: POST
- name: get_events
  endpoint:
    path: /v1/events
    method: GET
    params:
      page_size: '100'
- name: Device
  endpoint:
    path: /components/schemas/Device
    method: GET
    data_selector: properties
- name: EnrollmentCode
  endpoint:
    path: /components/schemas/EnrollmentCode
    method: GET
    data_selector: properties
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: Tenant
  endpoint:
    path: /tenants
    method: GET
    data_selector: tenants
- name: OIDCClientConfiguration
  endpoint:
    path: /oidc_clients
    method: GET
    data_selector: oidc_clients
- name: SAMLConnectionConfiguration
  endpoint:
    path: /saml_connections
    method: GET
    data_selector: saml_connections
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: Device
  endpoint:
    path: Device
    method: GET
    data_selector: properties
    params: {}
- name: EnrollmentCode
  endpoint:
    path: EnrollmentCode
    method: GET
    data_selector: properties
    params: {}
- name: Tenant
  endpoint:
    path: /components/schemas/Tenant
    method: GET
    data_selector: properties
    params: {}
- name: OIDCClientConfiguration
  endpoint:
    path: /components/schemas/OIDCClientConfiguration
    method: GET
    data_selector: properties
    params: {}
- name: SAMLConnectionConfiguration
  endpoint:
    path: /components/schemas/SAMLConnectionConfiguration
    method: GET
    data_selector: properties
    params: {}
- name: OktaDesktopLoginConfiguration
  endpoint:
    path: /okta/desktop/login/configuration
    method: GET
    data_selector: properties
    params: {}
- name: Enrollment
  endpoint:
    path: /enrollment
    method: GET
    data_selector: properties
    params: {}
- name: Realm
  endpoint:
    path: /realm
    method: GET
    data_selector: properties
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
notes:
- Access tokens are scoped at a minimum to your tenant.
- Page tokens expire after one week.
- The Beyond Identity SCIM server currently does not support atomic PATCH operations.
- Member changes will take effect, but they will not be reflected in the response.
- Requests which specify an expired page token will result in undefined behavior.
- Bearer authentication is required for all requests.
- Rate limit is enforced; 429 status code indicates limit exceeded.
- Rate limit exceeded will return a 429 status.
- Bearer authentication required for all requests.
- Requests may be subject to rate limits.
- The response will include at most 200 items and may include a page token to query
  the remaining items.
- Currently, only 'add' and 'replace' operations are supported for users.
- The Beyond Identity SCIM server does not support atomic PATCH operations.
- Currently, 'replace' operations are supported for displayName while 'add' and 'remove'
  operations are supported for members.
- Implement passwordless authentication with Universal Passkeys.
- See something not documented or want to contribute?
- All Beyond Identity API endpoints require an access token for authentication.
- Uses OAuth2 with refresh token — requires setup of connected app in api
- Access tokens are valid for three months (TTL 7776000 seconds).
- Uses OIDC to verify identities of end users
- API access tokens are valid for three months (TTL 7776000 seconds).
- The Admin Console supports the client credentials flow.
- The Beyond Identity Management API only supports the client credentials flow.
- The client uses HTTP Basic for Token Endpoint Auth Method.
- Client uses HTTP Basic as defined in OAuth 2.0, Section 2.3.1. Namely, client_id
  and client_secret are sent in the Basic Authorization header.
- Uses OAuth2 with authorization code flow — requires setup of Beyond Identity application
- Hosted Web handles passkey registration and authentication
- API requests from the SDK are made from the frontend, so specify the trusted origins
  accordingly.
- Uses OAuth2 with authorization code flow — requires setup of application in Beyond
  Identity
- Hosted Web handles user registration and authentication
- Uses Hosted Web authenticator type for authentication.
- The Hosted Web authenticator type has a lighter footprint in your app.
- To use any SCIM functionality, an access token with `scim:all` scope is required.
- The Beyond Identity platform offers multiple authenticator configuration types including
  Hosted Web and Embedded SDK.
- You can find the REGION, TENANT_ID and REALM_ID in your console.
- You can generate an API_TOKEN from your Beyond Identity Management API application
  where the token contains the scope identities:create.
- You will NOT need to manage creating a user identity and binding a passkey for this
  user in Hosted Web.
- You will need to manage creating a user identity and binding a passkey for this
  user in Embedded SDK.
- You must set your application's Resource Server to Beyond Identity Management API.
- You can generate an API_TOKEN from your Beyond Identity Management API application.
- You will need the user's IDENTITY_ID from identity creation.
- You can find the REGION, TENANT_ID, REALM_ID and AUTHENTICATOR_CONFIG_ID in your
  console.
- You can generate an API_TOKEN where the token contains the scope identities:create.
- You do not need to continue reading this document if using Hosted Web.
- RBAC only comes into play with access management of access tokens of identities.
- Integrate with other identity providers
- You can find the REGION, TENANT_ID, REALM_ID, and AUTHENTICATOR_CONFIG_ID in your
  console.
- You will need the user's IDENTITY_ID from identity creation above.
- Some objects like Contact may return nulls in deeply nested fields
- You must select Client Secret Post for the Token Endpoint Auth Method in your application.
- User roles will need to be managed from your admin dashboard.
- New users created in your Drupal database will have a default 'Authenticated' user
  role.
- Requires setup of connected app in admin console
- Use your application's App Scheme or Universal URL for redirect URIs
- Ensure to set the correct region and tenant ID in the base URL.
- PKCE is recommended but optional.
- Uses Embedded SDK for full app customization.
- Select Client Secret Post for the Token Endpoint Auth Method in your application.
- User roles will need to be managed from your admin dashboard. New users created
  in your Drupal database will have a default 'Authenticated' user role.
- Uses OAuth2 with email as the delivery method for binding passkeys.
- Uses OAuth2 with Authorization Code grant type — requires setup of an application
  in the admin console
- 'Minimum native versions required for SDK: Android minSdkVersion 26, iOS deploymentTarget
  13.0'
- Clicking or tapping the link redirects your user to the Beyond Identity Cloud.
- The URL is validated through the Beyond Identity Embedded SDK.
- While you can only have one tenant, a tenant can have many realms, but a tenant
  will always have the Beyond Identity Admin Realm.
- A device enrollment email is sent to your user's primary email address with a link
  to create their passkey.
- Requires setup of authentication configurations for different events.
- Ensure proper permissions are configured for API access.
- Requires proper configuration of SAML settings.
- The ultimate status of a continuous authentication can be one of ALLOW, USER_INACTIVE,
  DEVICE_INACTIVE, or POLICY_DENY.
- Failure message if unauthorized; customizable if denied by a policy rule.
errors:
- 400 Bad request.
- 401 Not authorized.
- 403 Forbidden user
- '400: Bad request.'
- '401: Not authorized.'
- '403: Forbidden user'
- '401 Unauthorized: unauthorized'
- '403 Forbidden: forbidden'
- '404 Not Found: group not found'
- '400 Bad Request: invalid parameters'
- '401 Unauthorized: Token is not recognized'
- '403 Forbidden: Access token does not have access to the requested resource'
- '404 Not Found: Requested resource does not exist'
- '400 Bad Request: Invalid parameters'
- '429: Rate limit exceeded.'
- '500: Server error.'
- '429: Rate limit exceeded'
- '500: Server error'
- 429 Rate limit exceeded.
- 500 Server error.
- 429 Rate limit exceeded
- 500 Server error
- '401 Unauthorized: Recheck OAuth scopes or token expiration'
- '401 Unauthorized: Recheck API token or permissions.'
- '401 Unauthorized: Check client credentials or authorization'
- '401 Unauthorized: Check Client ID and Client Secret.'
- 'http.post error: statusCode= ${res.statusCode}'
- '400 Bad Request: Check your JSON payload for correctness.'
- '401 Unauthorized: Verify your API token and scopes.'
- 'REQUEST_LIMIT_EXCEEDED: Throttle API calls or reduce frequency'
- 'QUERY_TIMEOUT: Break down filters or add selectivity'
- '401 Unauthorized: Check client credentials and redirect URI.'
- '400 Bad Request: Validate request parameters.'
- '401 Unauthorized: Check API token and permissions.'
- '400: Malformed request: start_time must be an integer.'
- '401: User unauthorized.'
- '403: Authorization token is not active'
- '400 Bad Request: Check the request payload and structure.'
- '403 Forbidden: Verify permissions for the API key used.'
- '404 Not Found: Ensure the endpoint path is correct.'
- '401 Unauthorized: Failure message if unauthorized; customizable if denied by a
  policy rule.'
auth_info:
  mentioned_objects:
  - BearerAuth
  - OAuth2
  - Client ID
  - Client Secret
  - Discovery Endpoint
  - Beyond Identity Admin Realm
  - Admin Console
  - access tokens
  - allowed_scopes
  - OauthToken
  - AuthProvider
  - NamedCredential
  - Realm
  - Application
  - API key
  - TENANT_ID
  - REALM_ID
  - Authenticator Config
  - identityId
  - accessToken
  - AuthResult
  - User
  - AddDeviceGrantor
  - Device
  - AddDevice_result
  - PolicyAction
  - PolicyResult
client:
  base_url: https://api-us.beyondidentity.com
  auth:
    type: oauth2
    flow: authorization_code
  headers:
    Content-Type: application/json
  paginator:
    type: page
    page_size_param: page_size
    default_page_size: 20
source_metadata: null
