resources:
- name: listtransactions
  endpoint:
    path: /listtransactions
    method: POST
    data_selector: '[]'
    params: {}
- name: abandontransaction
  endpoint:
    path: /abandontransaction
    method: POST
- name: abortrescan
  endpoint:
    path: /abortrescan
    method: POST
- name: addmultisigaddress
  endpoint:
    path: /addmultisigaddress
    method: POST
- name: backupwallet
  endpoint:
    path: /backupwallet
    method: POST
- name: bumpfee
  endpoint:
    path: /bumpfee
    method: POST
- name: createwallet
  endpoint:
    path: /createwallet
    method: POST
- name: dumpprivkey
  endpoint:
    path: /dumpprivkey
    method: POST
- name: dumpwallet
  endpoint:
    path: /dumpwallet
    method: POST
- name: encryptwallet
  endpoint:
    path: /encryptwallet
    method: POST
- name: getaddressesbylabel
  endpoint:
    path: /getaddressesbylabel
    method: GET
- name: getaddressinfo
  endpoint:
    path: /getaddressinfo
    method: GET
- name: getbalance
  endpoint:
    path: /getbalance
    method: GET
- name: getbalances
  endpoint:
    path: /getbalances
    method: GET
- name: getnewaddress
  endpoint:
    path: /getnewaddress
    method: GET
- name: getrawchangeaddress
  endpoint:
    path: /getrawchangeaddress
    method: GET
- name: getreceivedbyaddress
  endpoint:
    path: /getreceivedbyaddress
    method: GET
- name: getreceivedbylabel
  endpoint:
    path: /getreceivedbylabel
    method: GET
- name: gettransaction
  endpoint:
    path: /gettransaction
    method: GET
- name: getunconfirmedbalance
  endpoint:
    path: /getunconfirmedbalance
    method: GET
- name: getwalletinfo
  endpoint:
    path: /getwalletinfo
    method: GET
- name: importaddress
  endpoint:
    path: /importaddress
    method: POST
- name: importdescriptors
  endpoint:
    path: /importdescriptors
    method: POST
- name: importmulti
  endpoint:
    path: /importmulti
    method: POST
- name: importprivkey
  endpoint:
    path: /importprivkey
    method: POST
- name: importprunedfunds
  endpoint:
    path: /importprunedfunds
    method: POST
- name: importpubkey
  endpoint:
    path: /importpubkey
    method: POST
- name: importwallet
  endpoint:
    path: /importwallet
    method: POST
- name: keypoolrefill
  endpoint:
    path: /keypoolrefill
    method: POST
- name: listaddressgroupings
  endpoint:
    path: /listaddressgroupings
    method: GET
- name: listlabels
  endpoint:
    path: /listlabels
    method: GET
- name: listlockunspent
  endpoint:
    path: /listlockunspent
    method: GET
- name: listreceivedbyaddress
  endpoint:
    path: /listreceivedbyaddress
    method: GET
- name: listreceivedbylabel
  endpoint:
    path: /listreceivedbylabel
    method: GET
- name: listsinceblock
  endpoint:
    path: /listsinceblock
    method: GET
- name: listtransactions
  endpoint:
    path: /listtransactions
    method: GET
- name: listunspent
  endpoint:
    path: /listunspent
    method: GET
- name: listwalletdir
  endpoint:
    path: /listwalletdir
    method: GET
- name: listwallets
  endpoint:
    path: /listwallets
    method: GET
- name: loadwallet
  endpoint:
    path: /loadwallet
    method: POST
- name: lockunspent
  endpoint:
    path: /lockunspent
    method: POST
- name: removeprunedfunds
  endpoint:
    path: /removeprunedfunds
    method: POST
    data_selector: result
- name: rescanblockchain
  endpoint:
    path: /rescanblockchain
    method: POST
    data_selector: result
- name: send
  endpoint:
    path: /send
    method: POST
    data_selector: result
- name: sendmany
  endpoint:
    path: /sendmany
    method: POST
    data_selector: result
- name: sendtoaddress
  endpoint:
    path: /sendtoaddress
    method: POST
    data_selector: result
- name: sethdseed
  endpoint:
    path: /sethdseed
    method: POST
    data_selector: result
- name: setlabel
  endpoint:
    path: /setlabel
    method: POST
    data_selector: result
- name: settxfee
  endpoint:
    path: /settxfee
    method: POST
    data_selector: result
- name: setwalletflag
  endpoint:
    path: /setwalletflag
    method: POST
    data_selector: result
- name: signmessage
  endpoint:
    path: /signmessage
    method: POST
    data_selector: result
- name: signrawtransactionwithwallet
  endpoint:
    path: /signrawtransactionwithwallet
    method: POST
    data_selector: result
- name: unloadwallet
  endpoint:
    path: /unloadwallet
    method: POST
    data_selector: result
- name: upgradewallet
  endpoint:
    path: /upgradewallet
    method: POST
    data_selector: result
- name: walletcreatefundedpsbt
  endpoint:
    path: /walletcreatefundedpsbt
    method: POST
    data_selector: result
- name: walletlock
  endpoint:
    path: /walletlock
    method: POST
    data_selector: result
- name: walletpassphrase
  endpoint:
    path: /walletpassphrase
    method: POST
    data_selector: result
- name: walletpassphrasechange
  endpoint:
    path: /walletpassphrasechange
    method: POST
    data_selector: result
- name: walletprocesspsbt
  endpoint:
    path: /walletprocesspsbt
    method: POST
    data_selector: result
- name: transactions
  endpoint:
    path: /transactions
    method: GET
    data_selector: transactions
    params: {}
- name: transactions
  endpoint:
    path: /transactions
    method: GET
    data_selector: transactions
    params: {}
- name: pubkey
  endpoint:
    path: /pubkey
    method: GET
    data_selector: pubkey
    params: {}
- name: null_data
  endpoint:
    path: /null_data
    method: GET
    data_selector: null_data
    params: {}
- name: non_standard_transactions
  endpoint:
    path: /non_standard_transactions
    method: GET
    data_selector: non_standard_transactions
    params: {}
- name: signature_hash_types
  endpoint:
    path: /signature_hash_types
    method: GET
    data_selector: signature_hash_types
    params: {}
- name: locktime_and_sequence_number
  endpoint:
    path: /locktime_and_sequence_number
    method: GET
    data_selector: locktime_and_sequence_number
    params: {}
- name: transaction_fees_and_change
  endpoint:
    path: /transaction_fees_and_change
    method: GET
    data_selector: transaction_fees_and_change
    params: {}
- name: avoiding_key_reuse
  endpoint:
    path: /avoiding_key_reuse
    method: GET
    data_selector: avoiding_key_reuse
    params: {}
- name: transaction_malleability
  endpoint:
    path: /transaction_malleability
    method: GET
    data_selector: transaction_malleability
    params: {}
- name: Contracts
  endpoint:
    path: /contracts
    method: GET
    data_selector: contracts
- name: Micropayment Channel
  endpoint:
    path: /micropayment_channel
    method: GET
    data_selector: micropayment_channels
- name: CoinJoin
  endpoint:
    path: /coinjoin
    method: GET
    data_selector: coinjoins
- name: wallets
  endpoint:
    path: /wallets
    method: GET
    data_selector: wallets
    params: {}
- name: wallet_files
  endpoint:
    path: /wallet_files
    method: GET
    data_selector: wallet_files
    params: {}
- name: Requesting Payments
  endpoint:
    path: /payment_processing/request
    method: GET
    data_selector: payment_requests
- name: peer_discovery
  endpoint:
    path: /p2p/peer_discovery
    method: GET
- name: initial_block_download
  endpoint:
    path: /p2p/initial_block_download
    method: GET
- name: getheaders
  endpoint:
    path: /reference/p2p_networking.html#getheaders
    method: GET
- name: headers
  endpoint:
    path: /reference/p2p_networking.html#headers
    method: GET
- name: getdata
  endpoint:
    path: /reference/p2p_networking.html#getdata
    method: GET
- name: block
  endpoint:
    path: /reference/p2p_networking.html#block
    method: GET
- name: inv
  endpoint:
    path: /reference/p2p_networking.html#inv
    method: GET
- name: tx
  endpoint:
    path: /reference/p2p_networking.html#tx
    method: GET
- name: merkleblock
  endpoint:
    path: /reference/p2p_networking.html#merkleblock
    method: GET
- name: getblocktemplate
  endpoint:
    path: /reference/rpc/getblocktemplate
    method: POST
    data_selector: result
- name: getwork
  endpoint:
    path: /reference/rpc/getwork
    method: POST
    data_selector: result
- name: block
  endpoint:
    path: /block
    method: GET
    data_selector: blocks
    params: {}
- name: transactions
  endpoint:
    path: /transactions
    method: GET
    data_selector: transactions
    params: {}
- name: coinbase_transaction
  endpoint:
    path: /transactions/coinbase
    method: GET
    data_selector: coinbase
- name: getblocks
  endpoint:
    path: /getblocks
    method: POST
    data_selector: header_hashes
- name: getdata
  endpoint:
    path: /getdata
    method: POST
    data_selector: data_objects
- name: getheaders
  endpoint:
    path: /getheaders
    method: POST
    data_selector: headers
- name: headers
  endpoint:
    path: /headers
    method: POST
    data_selector: headers
- name: inv
  endpoint:
    path: /inv
    method: POST
    data_selector: inventories
- name: mempool
  endpoint:
    path: /mempool
    method: POST
    data_selector: txids
- name: sendcmpct
  endpoint:
    path: /sendcmpct
    method: POST
    data_selector: message
    params: {}
- name: getblocktxn
  endpoint:
    path: /getblocktxn
    method: POST
    data_selector: message
    params: {}
- name: blocktxn
  endpoint:
    path: /blocktxn
    method: POST
    data_selector: message
    params: {}
- name: notfound
  endpoint:
    path: /notfound
    method: POST
    data_selector: message
    params: {}
- name: tx
  endpoint:
    path: /tx
    method: POST
    data_selector: message
    params: {}
- name: addr
  endpoint:
    path: /addr
    method: POST
    data_selector: message
    params: {}
- name: addrv2
  endpoint:
    path: /addrv2
    method: POST
    data_selector: message
    params: {}
- name: feefilter
  endpoint:
    path: /feefilter
    method: POST
    data_selector: message
    params: {}
- name: filteradd
  endpoint:
    path: /filteradd
    method: POST
    data_selector: element
    params: {}
- name: filterclear
  endpoint:
    path: /filterclear
    method: POST
    data_selector: ''
    params: {}
- name: filterload
  endpoint:
    path: /filterload
    method: POST
    data_selector: filter
    params: {}
- name: getaddr
  endpoint:
    path: /getaddr
    method: GET
    data_selector: addresses
    params: {}
- name: ping
  endpoint:
    path: /ping
    method: POST
    data_selector: nonce
    params: {}
- name: pong
  endpoint:
    path: /pong
    method: POST
    data_selector: nonce
    params: {}
- name: reject
  endpoint:
    path: /reject
    method: GET
    data_selector: message
- name: sendheaders
  endpoint:
    path: /sendheaders
    method: GET
    data_selector: message
- name: sendaddrv2
  endpoint:
    path: /sendaddrv2
    method: GET
    data_selector: message
- name: verack
  endpoint:
    path: /verack
    method: GET
    data_selector: message
- name: version
  endpoint:
    path: /version
    method: GET
    data_selector: message
- name: getbestblockhash
  endpoint:
    path: getbestblockhash
    method: GET
- name: getblock
  endpoint:
    path: getblock
    method: GET
- name: getblockchaininfo
  endpoint:
    path: getblockchaininfo
    method: GET
- name: getblockcount
  endpoint:
    path: getblockcount
    method: GET
- name: getblockfilter
  endpoint:
    path: getblockfilter
    method: GET
- name: getblockhash
  endpoint:
    path: getblockhash
    method: GET
- name: getblockheader
  endpoint:
    path: getblockheader
    method: GET
- name: getblockstats
  endpoint:
    path: getblockstats
    method: GET
- name: getchaintips
  endpoint:
    path: getchaintips
    method: GET
- name: getchaintxstats
  endpoint:
    path: getchaintxstats
    method: GET
- name: getdifficulty
  endpoint:
    path: getdifficulty
    method: GET
- name: getmempoolancestors
  endpoint:
    path: getmempoolancestors
    method: GET
- name: getmempooldescendants
  endpoint:
    path: getmempooldescendants
    method: GET
- name: getmempoolentry
  endpoint:
    path: getmempoolentry
    method: GET
- name: getmempoolinfo
  endpoint:
    path: getmempoolinfo
    method: GET
- name: getrawmempool
  endpoint:
    path: getrawmempool
    method: GET
- name: gettxout
  endpoint:
    path: gettxout
    method: GET
- name: gettxoutproof
  endpoint:
    path: gettxoutproof
    method: GET
- name: gettxoutsetinfo
  endpoint:
    path: gettxoutsetinfo
    method: GET
- name: preciousblock
  endpoint:
    path: preciousblock
    method: GET
- name: pruneblockchain
  endpoint:
    path: pruneblockchain
    method: GET
- name: savemempool
  endpoint:
    path: savemempool
    method: GET
- name: scantxoutset
  endpoint:
    path: scantxoutset
    method: GET
- name: verifychain
  endpoint:
    path: verifychain
    method: GET
- name: verifytxoutproof
  endpoint:
    path: verifytxoutproof
    method: GET
- name: transactions
  endpoint:
    path: /reference/rpc/sendtoaddress
    method: POST
    data_selector: txid
    params: {}
- name: transactions
  endpoint:
    path: /transactions
    method: POST
    data_selector: transaction
    params: {}
- name: sendtoaddress
  endpoint:
    path: /reference/rpc/sendtoaddress.html
    method: POST
    data_selector: result
    params: {}
- name: listunspent
  endpoint:
    path: /reference/rpc/listunspent.html
    method: POST
    data_selector: result
    params: {}
- name: createrawtransaction
  endpoint:
    path: /reference/rpc/createrawtransaction.html
    method: POST
    data_selector: result
    params: {}
- name: signrawtransaction
  endpoint:
    path: /reference/rpc/signrawtransaction.html
    method: POST
    data_selector: result
    params: {}
- name: sendrawtransaction
  endpoint:
    path: /reference/rpc/sendrawtransaction.html
    method: POST
    data_selector: result
    params: {}
- name: transactions
  endpoint:
    path: /decoderawtransaction
    method: POST
    data_selector: txid
    params: {}
- name: createrawtransaction
  endpoint:
    path: /createrawtransaction
    method: POST
    data_selector: hex
    params: {}
- name: signrawtransaction
  endpoint:
    path: /signrawtransaction
    method: POST
    data_selector: hex
    params: {}
- name: sendrawtransaction
  endpoint:
    path: /sendrawtransaction
    method: POST
    data_selector: txid
    params: {}
- name: listunspent
  endpoint:
    path: /rest/tx/listunspent
    method: GET
    data_selector: unspent
- name: dumpprivkey
  endpoint:
    path: /rest/privkey/dump
    method: GET
    data_selector: private_key
- name: getnewaddress
  endpoint:
    path: /rest/address/new
    method: GET
    data_selector: new_address
- name: createrawtransaction
  endpoint:
    path: /rest/tx/create
    method: POST
    data_selector: raw_transaction
- name: signrawtransaction
  endpoint:
    path: /rest/tx/sign
    method: POST
    data_selector: signed_transaction
- name: sendrawtransaction
  endpoint:
    path: /rest/tx/send
    method: POST
    data_selector: transaction_id
- name: create_multisig_address
  endpoint:
    path: /createmultisig
    method: POST
    data_selector: address
    params: {}
- name: validate_address
  endpoint:
    path: /validateaddress
    method: POST
    data_selector: pubkey
    params: {}
- name: send_to_address
  endpoint:
    path: /sendtoaddress
    method: POST
    data_selector: txid
    params: {}
- name: get_raw_transaction
  endpoint:
    path: /getrawtransaction
    method: POST
    data_selector: hex
    params: {}
- name: sign_raw_transaction
  endpoint:
    path: /signrawtransaction
    method: POST
    data_selector: hex
    params: {}
- name: decoderawtransaction
  endpoint:
    path: /decoderawtransaction
    method: POST
    data_selector: result
- name: createrawtransaction
  endpoint:
    path: /createrawtransaction
    method: POST
    data_selector: result
- name: signrawtransaction
  endpoint:
    path: /signrawtransaction
    method: POST
    data_selector: result
- name: sendrawtransaction
  endpoint:
    path: /sendrawtransaction
    method: POST
    data_selector: result
- name: PaymentRequest
  endpoint:
    path: /payment/request
    method: POST
    data_selector: payment_request
    params: {}
- name: createmultisig
  endpoint:
    path: /createmultisig
    method: POST
    data_selector: address
    params: {}
- name: validateaddress
  endpoint:
    path: /validateaddress
    method: POST
    data_selector: isvalid
    params: {}
- name: sendtoaddress
  endpoint:
    path: /sendtoaddress
    method: POST
    data_selector: txid
    params: {}
- name: getrawtransaction
  endpoint:
    path: /getrawtransaction
    method: POST
    data_selector: hex
    params: {}
- name: signrawtransaction
  endpoint:
    path: /signrawtransaction
    method: POST
    data_selector: hex
    params: {}
- name: filterload
  endpoint:
    path: /filterload
    method: POST
    data_selector: filter
    params:
      filter_bytes: '2'
      filter: b50f
      nHashFuncs: '11'
      nTweak: '0'
      nFlags: '00'
- name: getdata
  endpoint:
    path: /getdata
    method: POST
    data_selector: data
    params:
      number_of_inventories: '1'
      inventory_type: filtered block
      block_header_hash: a4deb66c0d726b0aefb03ed51be407fb
- name: merkleblock
  endpoint:
    path: /reference/p2p_networking.html#merkleblock
    method: GET
    data_selector: transactions
    params: {}
- name: PaymentRequest
  endpoint:
    path: /payment/request
    method: POST
    data_selector: details
    params: {}
- name: payment_details
  endpoint:
    path: /payment/details
    method: POST
- name: bloom_filter
  endpoint:
    path: /filterload
    method: POST
    data_selector: filter
    params: {}
- name: merkle_block
  endpoint:
    path: /getdata
    method: POST
    data_selector: merkle_block
    params: {}
- name: getmemoryinfo
  endpoint:
    path: /rpc/getmemoryinfo
    method: GET
    data_selector: result
- name: getrpcinfo
  endpoint:
    path: /rpc/getrpcinfo
    method: GET
    data_selector: result
- name: getnetworkinfo
  endpoint:
    path: /rpc/getnetworkinfo
    method: GET
    data_selector: result
- name: getconnectioncount
  endpoint:
    path: /rpc/getconnectioncount
    method: GET
    data_selector: result
- name: getmemoryinfo
  endpoint:
    path: /getmemoryinfo
    method: POST
    data_selector: result
- name: getrpcinfo
  endpoint:
    path: /getrpcinfo
    method: POST
    data_selector: result
- name: uptime
  endpoint:
    path: /uptime
    method: POST
    data_selector: result
- name: deriveaddresses
  endpoint:
    path: /rpc/deriveaddresses
    method: POST
    data_selector: result
    params: {}
- name: estimatesmartfee
  endpoint:
    path: /rpc/estimatesmartfee
    method: POST
    data_selector: result
    params: {}
- name: getdescriptorinfo
  endpoint:
    path: /rpc/getdescriptorinfo
    method: POST
    data_selector: result
    params: {}
- name: getindexinfo
  endpoint:
    path: /rpc/getindexinfo
    method: POST
    data_selector: result
    params: {}
- name: signmessagewithprivkey
  endpoint:
    path: /rpc/signmessagewithprivkey
    method: POST
    data_selector: result
    params: {}
- name: validateaddress
  endpoint:
    path: /rpc/validateaddress
    method: POST
    data_selector: result
    params: {}
- name: verifymessage
  endpoint:
    path: /rpc/verifymessage
    method: POST
    data_selector: result
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
- name: getbestblockhash
  endpoint:
    path: /getbestblockhash
    method: POST
    data_selector: hex
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: getblock
  endpoint:
    path: /
    method: POST
    data_selector: result
    params:
      blockhash: string
      verbosity: numeric
- name: getbestblockhash
  endpoint:
    path: /getbestblockhash
    method: POST
    data_selector: hex
    params: {}
- name: getblock
  endpoint:
    path: /getblock
    method: POST
    data_selector: result
    params: {}
- name: getblockchaininfo
  endpoint:
    path: /
    method: POST
    data_selector: result
    params:
      jsonrpc: '1.0'
      id: curltest
      method: getblockchaininfo
      params: []
- name: getblockcount
  endpoint:
    path: /getblockcount
    method: POST
    data_selector: n
    params: {}
- name: blockchain_info
  endpoint:
    path: /
    method: POST
    data_selector: result
    params: {}
- name: getblockfilter
  endpoint:
    path: /
    method: POST
    data_selector: filter
    params: {}
- name: block_count
  endpoint:
    path: /
    method: POST
    data_selector: n
    params: {}
- name: block_hash
  endpoint:
    path: getblockhash
    method: POST
    data_selector: hex
    params:
      height: numeric
- name: getblockhash
  endpoint:
    path: /getblockhash
    method: POST
    data_selector: hex
    params:
      height: numeric
- name: getblockheader
  endpoint:
    path: /
    method: POST
    data_selector: result
    params: {}
- name: getblockheader
  endpoint:
    path: /
    method: POST
    data_selector: result
    params:
      blockhash: string
      verbose: boolean
- name: getblockstats
  endpoint:
    path: /getblockstats
    method: POST
    data_selector: result
    params: {}
- name: getblockstats
  endpoint:
    path: /
    method: POST
    data_selector: result
    params: {}
- name: getchaintips
  endpoint:
    path: /
    method: POST
    data_selector: '[]'
    params: {}
- name: getchaintips
  endpoint:
    path: ''
    method: POST
    data_selector: ''
    params: {}
- name: getchaintxstats
  endpoint:
    path: /
    method: POST
    data_selector: result
    params: {}
- name: getchaintxstats
  endpoint:
    path: /
    method: POST
    data_selector: result
    params:
      nblocks: default=one month
      blockhash: default=chain tip
- name: getdifficulty
  endpoint:
    path: /
    method: POST
    data_selector: result
    params: {}
- name: getdifficulty
  endpoint:
    path: /
    method: POST
    data_selector: result
    params:
      jsonrpc: '1.0'
      id: curltest
      method: getdifficulty
      params: []
- name: getmempoolancestors
  endpoint:
    path: /
    method: POST
    data_selector: result
    params:
      txid: string
- name: getmempoolancestors
  endpoint:
    path: /
    method: POST
    data_selector: result
- name: getmempooldescendants
  endpoint:
    path: /getmempooldescendants
    method: POST
    data_selector: result
    params: {}
- name: mempool_entry
  endpoint:
    path: /getmempoolentry
    method: POST
    data_selector: result
    params:
      txid: string
- name: getmempooldescendants
  endpoint:
    path: /
    method: POST
    data_selector: result
    params:
      txid: string
      verbose: boolean
- name: mempool_entry
  endpoint:
    path: /getmempoolentry
    method: POST
    data_selector: result
    params:
      txid: string
- name: mempool_info
  endpoint:
    path: /
    method: POST
    data_selector: result
    params:
      jsonrpc: '1.0'
      id: curltest
      method: getmempoolinfo
      params: []
- name: getrawmempool
  endpoint:
    path: /getrawmempool
    method: POST
    data_selector: result
    params: {}
- name: mempool_info
  endpoint:
    path: /
    method: POST
    data_selector: loaded
    params: {}
- name: gettxout
  endpoint:
    path: /
    method: POST
    data_selector: result
    params: {}
- name: getrawmempool
  endpoint:
    path: /getrawmempool
    method: POST
    data_selector: result
    params:
      verbose: false
      mempool_sequence: false
- name: gettxoutproof
  endpoint:
    path: /gettxoutproof
    method: POST
    data_selector: result
    params: {}
- name: gettxout
  endpoint:
    path: /
    method: POST
    data_selector: result
    params: {}
- name: gettxoutsetinfo
  endpoint:
    path: /gettxoutsetinfo
    method: POST
    data_selector: json
    params: {}
- name: gettxoutproof
  endpoint:
    path: /gettxoutproof
    method: POST
    data_selector: str
- name: gettxoutsetinfo
  endpoint:
    path: /gettxoutsetinfo
    method: POST
    data_selector: result
    params: {}
- name: preciousblock
  endpoint:
    path: /
    method: POST
    data_selector: result
    params: {}
- name: preciousblock
  endpoint:
    path: /
    method: POST
    data_selector: 'null'
    params: {}
- name: pruneblockchain
  endpoint:
    path: /
    method: POST
    data_selector: result
    params:
      height: numeric, required
- name: pruneblockchain
  endpoint:
    path: /
    method: POST
    data_selector: result
    params:
      height: numeric
- name: savemempool
  endpoint:
    path: /rpc/savemempool
    method: POST
    data_selector: null
    params: {}
- name: scantxoutset
  endpoint:
    path: /scantxoutset
    method: POST
    data_selector: success
    params: {}
- name: savemempool
  endpoint:
    path: /
    method: POST
    data_selector: 'null'
    params: {}
- name: verifychain
  endpoint:
    path: /
    method: POST
    data_selector: result
    params:
      checklevel: 3
      nblocks: 6
- name: scantxoutset
  endpoint:
    path: /scantxoutset
    method: POST
    data_selector: result
    params: {}
- name: verifytxoutproof
  endpoint:
    path: /verifytxoutproof
    method: POST
    data_selector: result
    params: {}
- name: verifychain
  endpoint:
    path: /
    method: POST
    data_selector: result
    params:
      checklevel: 3
      nblocks: 6
- name: memory_info
  endpoint:
    path: /
    method: POST
    data_selector: result
    params:
      method: getmemoryinfo
      params: []
- name: verifytxoutproof
  endpoint:
    path: /verifytxoutproof
    method: POST
    data_selector: result
    params:
      proof: string
- name: getrpcinfo
  endpoint:
    path: /
    method: POST
    data_selector: result
    params: {}
- name: memory_info
  endpoint:
    path: /
    method: POST
    data_selector: result
    params:
      method: getmemoryinfo
      params: []
- name: help
  endpoint:
    path: /help
    method: GET
    data_selector: str
- name: logging
  endpoint:
    path: /logging
    method: POST
    data_selector: category
    params: {}
- name: rpc_info
  endpoint:
    path: /
    method: POST
    data_selector: result
    params:
      method: getrpcinfo
      params: []
- name: stop
  endpoint:
    path: /stop
    method: POST
    data_selector: str
- name: logging
  endpoint:
    path: /logging
    method: POST
    data_selector: category
- name: uptime
  endpoint:
    path: ''
    method: POST
    data_selector: n
    params: {}
- name: stop
  endpoint:
    path: /stop
    method: POST
    data_selector: str
- name: generateblock
  endpoint:
    path: /generateblock
    method: POST
    data_selector: hash
    params: {}
- name: generatetoaddress
  endpoint:
    path: /generatetoaddress
    method: POST
    data_selector: hashes
    params:
      nblocks: numeric
      address: string
      maxtries: numeric
- name: uptime
  endpoint:
    path: /
    method: POST
    data_selector: result
    params: {}
- name: generatetodescriptor
  endpoint:
    path: /generatetodescriptor
    method: POST
    data_selector: hashes
    params: {}
- name: generateblock
  endpoint:
    path: /generateblock
    method: POST
    data_selector: hash
    params: {}
- name: getblocktemplate
  endpoint:
    path: ''
    method: POST
    data_selector: ''
    params: {}
- name: generatetoaddress
  endpoint:
    path: /generatetoaddress
    method: POST
    data_selector: result
    params: {}
- name: mining_info
  endpoint:
    path: /
    method: POST
    data_selector: result
    params: {}
- name: generatetodescriptor
  endpoint:
    path: /rpc/generatetodescriptor
    method: POST
    data_selector: hashes
    params:
      num_blocks: required
      descriptor: required
      maxtries: optional, default=1000000
- name: getnetworkhashps
  endpoint:
    path: /
    method: POST
    data_selector: result
    params:
      nblocks: 120
      height: -1
- name: getblocktemplate
  endpoint:
    path: /getblocktemplate
    method: POST
    data_selector: result
    params: {}
- name: prioritisetransaction
  endpoint:
    path: /
    method: POST
    data_selector: result
    params: {}
- name: mining_info
  endpoint:
    path: /getmininginfo
    method: POST
    data_selector: result
    params: {}
- name: submitblock
  endpoint:
    path: /
    method: POST
    data_selector: result
    params: {}
- name: getnetworkhashps
  endpoint:
    path: /
    method: POST
    data_selector: result
    params:
      nblocks: 120
      height: -1
- name: submitheader
  endpoint:
    path: /
    method: POST
    data_selector: null
    params:
      hexdata: string
- name: prioritisetransaction
  endpoint:
    path: /
    method: POST
    data_selector: result
    params: {}
- name: addnode
  endpoint:
    path: /addnode
    method: POST
    data_selector: null
    params: {}
- name: submitblock
  endpoint:
    path: /submitblock
    method: POST
    data_selector: 'null'
- name: clearbanned
  endpoint:
    path: /
    method: POST
    data_selector: result
    params: {}
- name: submitheader
  endpoint:
    path: /
    method: POST
    data_selector: 'null'
- name: disconnectnode
  endpoint:
    path: /rpc/disconnectnode
    method: POST
    data_selector: null
    params: {}
- name: addnode
  endpoint:
    path: /addnode
    method: POST
    data_selector: null
    params: {}
- name: getaddednodeinfo
  endpoint:
    path: /getaddednodeinfo
    method: POST
    data_selector: ''
    params: {}
- name: getconnectioncount
  endpoint:
    path: /getconnectioncount
    method: POST
    data_selector: n
    params: {}
- name: clearbanned
  endpoint:
    path: /
    method: POST
    data_selector: null
    params: {}
- name: getnettotals
  endpoint:
    path: /
    method: POST
    data_selector: result
    params: {}
- name: disconnectnode
  endpoint:
    path: /disconnectnode
    method: POST
    data_selector: 'null'
    params: {}
- name: network_info
  endpoint:
    path: /
    method: POST
    data_selector: result
    params:
      method: getnetworkinfo
      params: []
- name: getaddednodeinfo
  endpoint:
    path: /
    method: POST
    data_selector: result
    params:
      node: all nodes
- name: getnodeaddresses
  endpoint:
    path: /
    method: POST
    data_selector: result
    params:
      count: 1
- name: connection_count
  endpoint:
    path: /
    method: POST
    data_selector: n
    params: {}
- name: getnettotals
  endpoint:
    path: /
    method: POST
    data_selector: result
    params: {}
- name: getpeerinfo
  endpoint:
    path: /
    method: POST
    data_selector: ''
- name: getnetworkinfo
  endpoint:
    path: /
    method: POST
    data_selector: result
    params: {}
- name: listbanned
  endpoint:
    path: /
    method: POST
    data_selector: result
    params: {}
- name: getnodeaddresses
  endpoint:
    path: /getnodeaddresses
    method: POST
    data_selector: result
    params:
      count: 1
- name: ping
  endpoint:
    path: /
    method: POST
    data_selector: 'null'
    params: {}
- name: getpeerinfo
  endpoint:
    path: /getpeerinfo
    method: POST
    data_selector: json array
- name: setban
  endpoint:
    path: /
    method: POST
    data_selector: 'null'
    params: {}
- name: banned_ips
  endpoint:
    path: /
    method: POST
    data_selector: result
    params:
      method: listbanned
      params: []
- name: setnetworkactive
  endpoint:
    path: /setnetworkactive
    method: POST
    data_selector: result
- name: analyzepsbt
  endpoint:
    path: /analyzepsbt
    method: POST
    data_selector: inputs
    params: {}
- name: ping
  endpoint:
    path: /
    method: POST
    data_selector: 'null'
    params: {}
- name: combinepsbt
  endpoint:
    path: /combinepsbt
    method: POST
    data_selector: str
    params: {}
- name: setban
  endpoint:
    path: /
    method: POST
    data_selector: null
    params: {}
- name: combinerawtransaction
  endpoint:
    path: /combinerawtransaction
    method: POST
    data_selector: str
    params: {}
- name: setnetworkactive
  endpoint:
    path: /setnetworkactive
    method: POST
    data_selector: result
    params:
      state: boolean
- name: converttopsbt
  endpoint:
    path: /converttopsbt
    method: POST
    data_selector: result
    params: {}
- name: analyzepsbt
  endpoint:
    path: /analyzepsbt
    method: POST
    data_selector: result
    params:
      psbt: string
- name: createpsbt
  endpoint:
    path: /createpsbt
    method: POST
    data_selector: result
- name: combinepsbt
  endpoint:
    path: /rpc/combinepsbt
    method: POST
    data_selector: str
    params: {}
- name: createrawtransaction
  endpoint:
    path: /
    method: POST
    data_selector: hex
    params: {}
- name: combinerawtransaction
  endpoint:
    path: /combinerawtransaction
    method: POST
    data_selector: str
    params: {}
- name: decodepsbt
  endpoint:
    path: /decodepsbt
    method: POST
    data_selector: result
    params: {}
- name: converttopsbt
  endpoint:
    path: /converttopsbt
    method: POST
    data_selector: result
- name: decoderawtransaction
  endpoint:
    path: /
    method: POST
    data_selector: result
    params: {}
- name: createpsbt
  endpoint:
    path: /createpsbt
    method: POST
    data_selector: result
    params: {}
- name: decodescript
  endpoint:
    path: /
    method: POST
    data_selector: result
    params: {}
- name: finalizepsbt
  endpoint:
    path: /finalizepsbt
    method: POST
    data_selector: result
    params: {}
- name: createrawtransaction
  endpoint:
    path: /
    method: POST
    data_selector: hex
    params: {}
- name: fundrawtransaction
  endpoint:
    path: /fundrawtransaction
    method: POST
    data_selector: result
    params: {}
- name: decodepsbt
  endpoint:
    path: /rpc/decodepsbt
    method: POST
    data_selector: result
    params: {}
- name: getrawtransaction
  endpoint:
    path: /getrawtransaction
    method: POST
    data_selector: result
    params: {}
- name: decoderawtransaction
  endpoint:
    path: /
    method: POST
    data_selector: result
    params: {}
- name: decodescript
  endpoint:
    path: /decodescript
    method: POST
    data_selector: result
    params: {}
- name: finalizepsbt
  endpoint:
    path: /finalizepsbt
    method: POST
    data_selector: result
    params:
      psbt: string
      extract: boolean
- name: joinpsbts
  endpoint:
    path: /joinpsbts
    method: POST
    data_selector: str
    params: {}
- name: fundrawtransaction
  endpoint:
    path: /fundrawtransaction
    method: POST
    data_selector: result
    params: {}
- name: sendrawtransaction
  endpoint:
    path: /
    method: POST
    data_selector: result
    params:
      hexstring: string
      maxfeerate: numeric or string
- name: getrawtransaction
  endpoint:
    path: /getrawtransaction
    method: POST
    data_selector: ''
    params: {}
- name: signrawtransactionwithkey
  endpoint:
    path: /signrawtransactionwithkey
    method: POST
    data_selector: result
    params: {}
- name: joinpsbts
  endpoint:
    path: /rpc/joinpsbts
    method: POST
    data_selector: str
    params: {}
- name: testmempoolaccept
  endpoint:
    path: /testmempoolaccept
    method: POST
    data_selector: result
    params: {}
- name: sendrawtransaction
  endpoint:
    path: /
    method: POST
    data_selector: result
    params: {}
- name: utxoupdatepsbt
  endpoint:
    path: /utxoupdatepsbt
    method: POST
    data_selector: result
    params: {}
- name: signrawtransactionwithkey
  endpoint:
    path: /
    method: POST
    data_selector: result
    params: {}
- name: createmultisig
  endpoint:
    path: /
    method: POST
    data_selector: address
    params: {}
- name: deriveaddresses
  endpoint:
    path: /deriveaddresses
    method: POST
    data_selector: result
- name: test_mempool_accept
  endpoint:
    path: /testmempoolaccept
    method: POST
    data_selector: result
- name: estimatesmartfee
  endpoint:
    path: /estimatesmartfee
    method: POST
    data_selector: feerate
    params: {}
- name: utxoupdatepsbt
  endpoint:
    path: /utxoupdatepsbt
    method: POST
    data_selector: result
- name: createmultisig
  endpoint:
    path: /
    method: POST
    data_selector: ''
    params: {}
- name: getdescriptorinfo
  endpoint:
    path: /getdescriptorinfo
    method: POST
    data_selector: result
    params: {}
- name: getindexinfo
  endpoint:
    path: /
    method: POST
    data_selector: result
    params: {}
- name: deriveaddresses
  endpoint:
    path: /rpc/deriveaddresses
    method: POST
    data_selector: result
    params: {}
- name: signmessagewithprivkey
  endpoint:
    path: /signmessagewithprivkey
    method: POST
    data_selector: signature
    params: {}
- name: validateaddress
  endpoint:
    path: /
    method: POST
    data_selector: result
    params: {}
- name: estimatesmartfee
  endpoint:
    path: /estimatesmartfee
    method: POST
    data_selector: feerate
    params:
      conf_target: numeric
      estimate_mode: string
- name: verifymessage
  endpoint:
    path: /
    method: POST
    data_selector: result
    params: {}
- name: getdescriptorinfo
  endpoint:
    path: /getdescriptorinfo
    method: POST
    data_selector: result
- name: abandontransaction
  endpoint:
    path: /
    method: POST
    data_selector: 'null'
    params: {}
- name: getindexinfo
  endpoint:
    path: /getindexinfo
    method: POST
    data_selector: name
    params: {}
- name: abortrescan
  endpoint:
    path: /
    method: POST
    data_selector: result
    params: {}
- name: signmessagewithprivkey
  endpoint:
    path: /signmessagewithprivkey
    method: POST
    data_selector: result
    params: {}
- name: validateaddress
  endpoint:
    path: /
    method: POST
    data_selector: result
    params: {}
- name: addmultisigaddress
  endpoint:
    path: /addmultisigaddress
    method: POST
    data_selector: result
    params: {}
- name: backupwallet
  endpoint:
    path: /
    method: POST
    data_selector: null
    params: {}
- name: verifymessage
  endpoint:
    path: /
    method: POST
    data_selector: result
    params: {}
- name: abandontransaction
  endpoint:
    path: /abandontransaction
    method: POST
    data_selector: result
    params: {}
- name: bumpfee
  endpoint:
    path: /bumpfee
    method: POST
    data_selector: result
    params: {}
- name: abortrescan
  endpoint:
    path: /
    method: POST
    data_selector: result
    params: {}
- name: createwallet
  endpoint:
    path: /
    method: POST
    data_selector: result
    params: {}
- name: addmultisigaddress
  endpoint:
    path: ''
    method: POST
    data_selector: ''
    params: {}
- name: dumpprivkey
  endpoint:
    path: /
    method: POST
    data_selector: result
    params:
      address: string
- name: backupwallet
  endpoint:
    path: /
    method: POST
    data_selector: 'null'
    params: {}
- name: dumpwallet
  endpoint:
    path: /
    method: POST
    data_selector: result
    params:
      filename: string
- name: bumpfee
  endpoint:
    path: /bumpfee
    method: POST
    data_selector: result
    params: {}
- name: encryptwallet
  endpoint:
    path: /
    method: POST
    data_selector: result
    params: {}
- name: createwallet
  endpoint:
    path: /createwallet
    method: POST
    data_selector: result
    params: {}
- name: addresses_by_label
  endpoint:
    path: /
    method: POST
    data_selector: address
    params:
      label: string
- name: getaddressinfo
  endpoint:
    path: /
    method: POST
    data_selector: result
    params:
      address: string
- name: dumpprivkey
  endpoint:
    path: /
    method: POST
    data_selector: result
    params:
      method: dumpprivkey
      params:
      - address
- name: getbalance
  endpoint:
    path: /getbalance
    method: POST
    data_selector: result
    params: {}
- name: dumpwallet
  endpoint:
    path: /
    method: POST
    data_selector: result
    params:
      filename: string
- name: balances
  endpoint:
    path: /
    method: POST
    data_selector: result
    params: {}
- name: encryptwallet
  endpoint:
    path: /encryptwallet
    method: POST
    data_selector: result
    params: {}
- name: getnewaddress
  endpoint:
    path: /
    method: POST
    data_selector: result
    params: {}
- name: getaddressesbylabel
  endpoint:
    path: /getaddressesbylabel
    method: POST
    data_selector: address
    params:
      label: string
- name: getaddressinfo
  endpoint:
    path: /
    method: POST
    data_selector: result
    params:
      method: getaddressinfo
      params:
      - address
- name: getrawchangeaddress
  endpoint:
    path: /
    method: POST
    data_selector: str
    params: {}
- name: getbalance
  endpoint:
    path: /getbalance
    method: POST
    data_selector: result
    params: {}
- name: getreceivedbyaddress
  endpoint:
    path: /
    method: POST
    data_selector: result
    params:
      address: string
      minconf: numeric
- name: getreceivedbylabel
  endpoint:
    path: /
    method: POST
    data_selector: result
    params: {}
- name: getbalances
  endpoint:
    path: ''
    method: POST
    data_selector: result
    params: {}
- name: gettransaction
  endpoint:
    path: /gettransaction
    method: POST
    data_selector: result
    params:
      txid: string
      include_watchonly: boolean
      verbose: boolean
- name: getunconfirmedbalance
  endpoint:
    path: /getunconfirmedbalance
    method: POST
    data_selector: result
    params: {}
- name: getnewaddress
  endpoint:
    path: /
    method: POST
    data_selector: result
    params: {}
- name: getwalletinfo
  endpoint:
    path: /
    method: POST
    data_selector: result
    params: {}
- name: getrawchangeaddress
  endpoint:
    path: /getrawchangeaddress
    method: POST
    data_selector: str
    params: {}
- name: importaddress
  endpoint:
    path: /importaddress
    method: POST
    data_selector: 'null'
    params: {}
- name: getreceivedbyaddress
  endpoint:
    path: /
    method: POST
    data_selector: result
    params:
      address: string, required
      minconf: numeric, optional, default=1
- name: importdescriptors
  endpoint:
    path: /importdescriptors
    method: POST
    data_selector: result
    params: {}
- name: getreceivedbylabel
  endpoint:
    path: /
    method: POST
    data_selector: result
    params:
      label: ''
      minconf: 1
- name: importmulti
  endpoint:
    path: /importmulti
    method: POST
    data_selector: result
    params: {}
- name: transaction
  endpoint:
    path: gettransaction
    method: POST
    data_selector: result
    params:
      txid: string
      include_watchonly: boolean
      verbose: boolean
- name: importprivkey
  endpoint:
    path: /importprivkey
    method: POST
    data_selector: null
    params: {}
- name: getunconfirmedbalance
  endpoint:
    path: /getunconfirmedbalance
    method: POST
    data_selector: n
- name: importprunedfunds
  endpoint:
    path: /importprunedfunds
    method: POST
    data_selector: null
    params: {}
- name: getwalletinfo
  endpoint:
    path: /
    method: POST
    data_selector: result
    params: {}
- name: importpubkey
  endpoint:
    path: /importpubkey
    method: POST
    data_selector: 'null'
    params: {}
- name: importaddress
  endpoint:
    path: /importaddress
    method: POST
    data_selector: null
    params: {}
- name: importwallet
  endpoint:
    path: /
    method: POST
    data_selector: null
    params: {}
- name: requests
  endpoint:
    path: /importdescriptors
    method: POST
    data_selector: success
    params: {}
- name: keypoolrefill
  endpoint:
    path: /
    method: POST
    data_selector: 'null'
    params:
      newsize: 100
- name: importmulti
  endpoint:
    path: /importmulti
    method: POST
    data_selector: result
    params: {}
- name: listaddressgroupings
  endpoint:
    path: /
    method: POST
    data_selector: result
    params: {}
- name: importprivkey
  endpoint:
    path: /importprivkey
    method: POST
    data_selector: null
    params:
      privkey: string
      label: string
      rescan: boolean
- name: listlabels
  endpoint:
    path: /listlabels
    method: POST
    data_selector: result
    params:
      purpose: optional
- name: importprunedfunds
  endpoint:
    path: /importprunedfunds
    method: POST
    data_selector: null
    params:
      rawtransaction: string
      txoutproof: string
- name: listlockunspent
  endpoint:
    path: /
    method: POST
    data_selector: result
    params: {}
- name: importpubkey
  endpoint:
    path: importpubkey
    method: POST
    data_selector: 'null'
    params:
      pubkey: string, required
      label: string, optional, default=""
      rescan: boolean, optional, default=true
- name: listreceivedbyaddress
  endpoint:
    path: /listreceivedbyaddress
    method: POST
    data_selector: ''
    params:
      minconf: 1
      include_empty: false
      include_watchonly: true
      address_filter: ''
- name: listreceivedbylabel
  endpoint:
    path: /listreceivedbylabel
    method: POST
    data_selector: result
    params:
      minconf: 1
      include_empty: false
      include_watchonly: true
- name: importwallet
  endpoint:
    path: /
    method: POST
    data_selector: null
    params:
      filename: string
- name: listsinceblock
  endpoint:
    path: /listsinceblock
    method: POST
    data_selector: transactions
    params: {}
- name: keypoolrefill
  endpoint:
    path: /
    method: POST
    data_selector: 'null'
    params:
      newsize: 100
- name: listunspent
  endpoint:
    path: /
    method: POST
    data_selector: result
    params:
      minconf: 1
      maxconf: 9999999
      include_unsafe: true
- name: listaddressgroupings
  endpoint:
    path: /listaddressgroupings
    method: POST
    data_selector: ''
    params: {}
- name: wallets
  endpoint:
    path: /
    method: POST
    data_selector: wallets
    params: {}
- name: listlabels
  endpoint:
    path: /listlabels
    method: POST
    data_selector: result
    params:
      purpose: string
- name: listwallets
  endpoint:
    path: /
    method: POST
    data_selector: ''
    params: {}
- name: listlockunspent
  endpoint:
    path: ''
    method: POST
    data_selector: ''
    params: {}
- name: loadwallet
  endpoint:
    path: /loadwallet
    method: POST
    data_selector: result
    params:
      filename: string
      load_on_startup: boolean
- name: listreceivedbyaddress
  endpoint:
    path: /
    method: POST
    data_selector: ''
    params:
      minconf: 1
      include_empty: false
      include_watchonly: true
      address_filter: ''
- name: lockunspent
  endpoint:
    path: /lockunspent
    method: POST
    data_selector: result
    params: {}
- name: listreceivedbylabel
  endpoint:
    path: /listreceivedbylabel
    method: POST
    data_selector: ''
    params:
      minconf: 1
      include_empty: false
      include_watchonly: true
- name: listsinceblock
  endpoint:
    path: /listsinceblock
    method: POST
    data_selector: transactions
    params: {}
- name: bump_fee
  endpoint:
    path: /psbtbumpfee
    method: POST
    data_selector: result
    params: {}
- name: listunspent
  endpoint:
    path: /
    method: POST
    data_selector: ''
    params: {}
- name: removeprunedfunds
  endpoint:
    path: /
    method: POST
    data_selector: 'null'
    params: {}
- name: listwalletdir
  endpoint:
    path: /listwalletdir
    method: POST
    data_selector: wallets
    params: {}
- name: rescanblockchain
  endpoint:
    path: /
    method: POST
    data_selector: result
    params: {}
- name: send
  endpoint:
    path: /send
    method: POST
    data_selector: result
    params: {}
- name: wallets
  endpoint:
    path: /
    method: POST
    data_selector: result
    params:
      method: listwallets
      params: []
- name: sendmany
  endpoint:
    path: /
    method: POST
    data_selector: result
- name: loadwallet
  endpoint:
    path: /loadwallet
    method: POST
    data_selector: result
    params:
      filename: string
      load_on_startup: boolean
- name: lockunspent
  endpoint:
    path: /lockunspent
    method: POST
    data_selector: ''
    params: {}
- name: sendtoaddress
  endpoint:
    path: /sendtoaddress
    method: POST
    data_selector: result
    params: {}
- name: psbtbumpfee
  endpoint:
    path: /psbtbumpfee
    method: POST
    data_selector: result
    params: {}
- name: sethdseed
  endpoint:
    path: /
    method: POST
    data_selector: result
    params: {}
- name: setlabel
  endpoint:
    path: /
    method: POST
    data_selector: null
    params: {}
- name: removeprunedfunds
  endpoint:
    path: /
    method: POST
    data_selector: 'null'
    params: {}
- name: settxfee
  endpoint:
    path: /
    method: POST
    data_selector: result
    params: {}
- name: rescanblockchain
  endpoint:
    path: /
    method: POST
    data_selector: result
    params: {}
- name: setwalletflag
  endpoint:
    path: /
    method: POST
    data_selector: result
    params: {}
- name: signmessage
  endpoint:
    path: /
    method: POST
    data_selector: result
    params: {}
- name: send
  endpoint:
    path: /send
    method: POST
    data_selector: result
    params: {}
- name: signrawtransactionwithwallet
  endpoint:
    path: /signrawtransactionwithwallet
    method: POST
    data_selector: hex
    params: {}
- name: sendmany
  endpoint:
    path: /sendmany
    method: POST
    data_selector: result
- name: unloadwallet
  endpoint:
    path: /
    method: POST
    data_selector: warning
    params: {}
- name: sendtoaddress
  endpoint:
    path: /sendtoaddress
    method: POST
    data_selector: result
- name: upgradewallet
  endpoint:
    path: /
    method: POST
    data_selector: result
    params:
      version: 169900
- name: sethdseed
  endpoint:
    path: /
    method: POST
    data_selector: null
    params: {}
- name: walletcreatefundedpsbt
  endpoint:
    path: /wallet/createfundedpsbt
    method: POST
    data_selector: result
    params: {}
- name: setlabel
  endpoint:
    path: /setlabel
    method: POST
    data_selector: 'null'
- name: walletlock
  endpoint:
    path: /
    method: POST
    data_selector: 'null'
    params: {}
- name: settxfee
  endpoint:
    path: /
    method: POST
    data_selector: result
    params:
      amount: required
- name: walletpassphrase
  endpoint:
    path: /
    method: POST
    data_selector: result
    params: {}
- name: setwalletflag
  endpoint:
    path: /
    method: POST
    data_selector: result
    params: {}
- name: signmessage
  endpoint:
    path: /
    method: POST
    data_selector: result
    params: {}
- name: walletpassphrasechange
  endpoint:
    path: /
    method: POST
    data_selector: null
    params: {}
- name: signrawtransactionwithwallet
  endpoint:
    path: /signrawtransactionwithwallet
    method: POST
    data_selector: null
    params: {}
- name: walletprocesspsbt
  endpoint:
    path: /walletprocesspsbt
    method: POST
    data_selector: result
    params: {}
- name: unloadwallet
  endpoint:
    path: /
    method: POST
    data_selector: result
    params:
      wallet_name: wallet_name
      load_on_startup: 'null'
- name: upgradewallet
  endpoint:
    path: /
    method: POST
    data_selector: result
    params:
      version: 169900
- name: walletcreatefundedpsbt
  endpoint:
    path: /walletcreatefundedpsbt
    method: POST
    data_selector: result
    params: {}
- name: walletlock
  endpoint:
    path: /
    method: POST
    data_selector: result
- name: walletpassphrase
  endpoint:
    path: /walletpassphrase
    method: POST
    data_selector: null
    params: {}
- name: walletpassphrasechange
  endpoint:
    path: /
    method: POST
    data_selector: 'null'
    params: {}
- name: walletprocesspsbt
  endpoint:
    path: /walletprocesspsbt
    method: POST
    data_selector: result
    params: {}
notes:
- Contracts are transactions which use the decentralized Bitcoin system to enforce
  financial agreements.
- Micropayment channels are best suited to small payments.
- HD wallet programs are not expected to be fully compatible
- Users must only use the same HD wallet program with the same HD-related settings
  for a particular root seed.
- Applications must create a Bitcoin address for payment requests.
- Programs should not rely on DNS seeds exclusively.
- Peers often leave the network or change IP addresses, requiring multiple connection
  attempts.
- Bitcoin Core uses an initial block download (IBD) method called headers-first.
- Headers-first nodes avoid some complexity by always requesting block headers with
  the getheaders message.
- Coinbase transaction must have exactly one input.
- Coinbase script is arbitrary data not exceeding 100 bytes minus the height bytes.
- All peer-to-peer communication occurs entirely over TCP.
- All multi-byte integers mentioned are transmitted in little-endian order.
- New banning behavior was added to the compact block logic in protocol version 70015
  to prevent node abuse.
- Nodes SHOULD NOT announce a 'cmpctblock' message to a peer with a version number
  below 70015 before fully validating the block.
- A 'filteradd' message will not be accepted unless a filter was previously set with
  the 'filterload' message.
- Bitcoin Core does not require a 'filterclear' message before a replacement filter
  is loaded with 'filterload'.
- Message could not be decoded. Be careful of 'reject' message feedback loops.
- Block is invalid for some reason (invalid proof-of-work, invalid signature, etc).
- 'Duplicate input spend (double spend): the rejected transaction spends the same
  input as a previously-received transaction.'
- Add RPC password to bitcoin.conf
- Make bitcoin.conf file only readable to its owner
- You need to add a RPC password to your bitcoin.conf file.
- Make the bitcoin.conf file only readable to its owner.
- Testnet is a public resource provided for free by members of the community, so please
  don’t abuse it.
- Regtest mode lets you instantly create a brand-new private block chain with the
  same basic rules as testnet.
- Users should never manually manage private keys on mainnet.
- You must not lose the redeem script, especially if you don’t have a record of which
  public keys you used to create the P2SH multisig address.
- The memo field can be used by the spender after payment as part of a cryptographically-proven
  receipt.
- Ensure the computed merkle root is identical to the merkle root in the header.
- The payment protocol is considered to be deprecated and will be removed in a later
  version of Bitcoin Core.
- Merchants should transition away from BIP70 to more secure options such as BIP21.
- The memo field can be arbitrarily long, but if you make them too long, you’ll run
  into the 50,000 byte limit on the entire PaymentRequest.
- Uses a bloom filter for transaction matching
- 'Not to be confused with: Fork (a regular fork where all nodes follow the same consensus
  rules, so the fork is resolved once one chain has more proof of work than another),
  Hard fork (a permanent divergence in the block chain caused by non-upgraded nodes
  not following new consensus rules), Software fork (when one or more developers permanently
  develops a codebase separately from other developers), Git fork (when one or more
  developers temporarily develops a codebase separately from other developers)'
- 'Not to be confused with: Orphan block (a block whose previous (parent) hash field
  points to an unknown block, meaning the orphan can’t be validated)'
- 'Not to be confused with: Minimum relay fee (the lowest fee a transaction must pay
  to be accepted into the memory pool and relayed by Bitcoin Core nodes)'
- 'Not to be confused with: HD wallet (a protocol that allows all of a wallet’s keys
  to be created from a single seed)'
- Uses OAuth2 with refresh token — requires setup of connected app in api
- Some objects like Contact may return nulls in deeply nested fields
- It won’t work for some heights with pruning.
- If txid is in the mempool, returns all in-mempool ancestors.
- The effects of preciousblock are not retained across restarts.
- checklevel is optional with a default of 3, range 0-4
- nblocks is optional with a default of 6, where 0=all
- API-Compatibility for previous API. Must be zero or null for the dummy parameter.
- Throws when the header is invalid.
- Attempts to add or remove an IP/Subnet from the banned list.
- Should be used only with createrawtransaction and fundrawtransaction
- Requires the transaction hex string and base58-encoded private keys for signing.
- Using this for manual rebroadcast may degrade privacy by leaking the transaction’s
  origin.
- The request target will be clamped between 2 and the highest target fee estimation
  is able to return based on how long it has been running.
- An error is returned if not enough transactions and blocks have been observed to
  make an estimate for any number of blocks.
- The command will fail if the wallet or mempool contains a transaction that spends
  one of T’s outputs.
- By default, the new fee will be calculated automatically using the estimatesmartfee
  RPC.
- 'WARNING: before version 0.21, fee_rate was in BTC/kvB. As of 0.21, fee_rate is
  in sat/vB.'
- Requires a valid username and password for basic authentication
- If an address/script is imported without all of the private keys required to spend
  from that address, it will be watchonly.
- This call can take over an hour to complete if rescan is true.
- Use 'getwalletinfo' to query the scanning progress.
- This call can take over an hour to complete if rescan is true, during that time,
  other rpc calls may report that the imported pubkey exists but related transactions
  are still missing.
- Other rpc calls may report that the imported address exists but related transactions
  are still missing.
- This call can take over an hour to complete if using an early timestamp; during
  that time, other rpc calls may report that the imported keys, addresses or scripts
  exist but related transactions are still missing.
- Requires wallet passphrase to be set with walletpassphrase call if wallet is encrypted.
- Locks are stored in memory only. Nodes start with zero locked outputs, and the locked
  output list is always cleared when a node stops or fails.
- 'EXPERIMENTAL warning: this call may be changed in future releases.'
- Issuing the walletpassphrase command while the wallet is already unlocked will set
  a new unlock time that overrides the old one.
- Change the state of the given wallet flag for a wallet.
- Changes the wallet passphrase from ‘oldpassphrase’ to ‘newpassphrase’.
- Requires wallet passphrase to be set with walletpassphrase call if wallet is encrypted
errors:
- 'BANSCORE_EXCEEDED: Peer banned for exceeding banscore threshold'
- 'INVALID_TRANSACTION: Transaction validation failed'
- Any undefined behavior in this spec may cause failure to transfer block to, peer
  disconnection by, or self-destruction by the receiving node.
- '0x01: Message could not be decoded.'
- '0x10: Block is invalid for some reason.'
- '0x12: Duplicate input spend (double spend).'
- 'REQUEST_LIMIT_EXCEEDED: Throttle API calls or reduce frequency'
- 'QUERY_TIMEOUT: Break down filters or add selectivity'
- '401 Unauthorized: Recheck OAuth scopes or token expiration'
- 'Invalid transaction: Ensure all inputs and outputs are correctly formed.'
- Not enough transactions and blocks have been observed to make an estimate for any
  number of blocks.
- Errors encountered during processing
- 'null'
- 'ERROR: Transaction cannot be bumped'
- 'ERROR: Invalid txid'
- Error messages may be returned during processing.
- 'Error: Transaction not found'
- 'Error: Insufficient funds'
- 'Error: Invalid txid'
- Errors encountered during processing may be empty.
auth_info:
  mentioned_objects:
  - OauthToken
  - AuthProvider
  - NamedCredential
client:
  base_url: http://127.0.0.1:8332/
source_metadata: null
