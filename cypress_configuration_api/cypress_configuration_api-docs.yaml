resources:
- name: config
  endpoint:
    path: /setupNodeEvents
    method: GET
    data_selector: config
    params: {}
- name: accessibility_reports
  endpoint:
    path: /accessibility/results
    method: GET
    data_selector: reports
    params: {}
- name: check
  endpoint:
    path: /api/commands/check
    method: GET
    data_selector: records
- name: children
  endpoint:
    path: /api/commands/children
    method: GET
    data_selector: records
- name: clear
  endpoint:
    path: /api/commands/clear
    method: GET
    data_selector: records
    params: {}
- name: clearAllCookies
  endpoint:
    path: /api/commands/clearallcookies
    method: GET
    data_selector: 'null'
    params: {}
- name: clearAllSessionStorage
  endpoint:
    path: /api/commands/clearallsessionstorage
    method: GET
    data_selector: 'null'
    params: {}
- name: click
  endpoint:
    path: /api/commands/click
    method: GET
    data_selector: null
    params: {}
- name: clock
  endpoint:
    path: /api/commands/clock
    method: GET
    data_selector: clock
    params: {}
- name: closest
  endpoint:
    path: /api/commands/closest
    method: GET
- name: document
  endpoint:
    path: /api/commands/document
    method: GET
    data_selector: window.document
    params: {}
- name: end
  endpoint:
    path: /api/commands/end
    method: GET
    data_selector: examples
- name: filter
  endpoint:
    path: /api/commands/filter
    method: GET
    data_selector: records
    params: {}
- name: find
  endpoint:
    path: /api/commands/find
    method: GET
    data_selector: results
    params: {}
- name: first
  endpoint:
    path: /api/commands/first
    method: GET
    data_selector: records
    params: {}
- name: fixture
  endpoint:
    path: /api/commands/fixture
    method: GET
    data_selector: usage
    params: {}
- name: focus
  endpoint:
    path: /api/commands/focus
    method: GET
    data_selector: commands
    params: {}
- name: getAllCookies
  endpoint:
    path: /api/commands/getallcookies
    method: GET
    data_selector: cookie objects
- name: getAllLocalStorage
  endpoint:
    path: /api/commands/getallocalstorage
    method: GET
    data_selector: results
    params: {}
- name: session_storage
  endpoint:
    path: /sessionStorage
    method: GET
    data_selector: results
    params: {}
- name: cookies
  endpoint:
    path: /api/commands/getCookies
    method: GET
    data_selector: cookies
    params: {}
- name: hash
  endpoint:
    path: /api/commands/hash
    method: GET
    data_selector: hash
    params: {}
- name: intercept
  endpoint:
    path: /api/commands/intercept
    method: GET
    data_selector: records
- name: last
  endpoint:
    path: /last
    method: GET
    data_selector: element
    params: {}
- name: log
  endpoint:
    path: /api/commands/log
    method: GET
    data_selector: records
    params: {}
- name: mount_command
  endpoint:
    path: /api/commands/mount
    method: GET
    data_selector: commands
    params: {}
- name: nextAll
  endpoint:
    path: /api/commands/nextAll
    method: GET
    data_selector: records
    params: {}
- name: nextUntil
  endpoint:
    path: /api/commands/nextuntil
    method: GET
    data_selector: records
    params: {}
- name: not
  endpoint:
    path: /api/commands/not
    method: GET
    data_selector: records
- name: origin
  endpoint:
    path: /api/commands/origin
    method: GET
    data_selector: commands
    params: {}
- name: parent
  endpoint:
    path: /api/commands/parent
    method: GET
    data_selector: records
    params: {}
- name: parentsUntil
  endpoint:
    path: /api/commands/parentsUntil
    method: GET
    data_selector: records
    params: {}
- name: prevUntil
  endpoint:
    path: /api/commands/prevUntil
    method: GET
    data_selector: records
    params: {}
- name: readFile
  endpoint:
    path: /api/commands/readfile
    method: GET
    data_selector: contents
- name: reload
  endpoint:
    path: /api/commands/reload
    method: GET
    data_selector: command
    params: {}
- name: request
  endpoint:
    path: /api/commands/request
    method: GET
    data_selector: response
- name: rightclick
  endpoint:
    path: /api/commands/rightclick
    method: GET
    data_selector: examples
- name: select
  endpoint:
    path: /api/commands/select
    method: GET
    data_selector: usage
- name: selectFile
  endpoint:
    path: /api/cypress-api/selectFile
    method: GET
    data_selector: records
- name: session
  endpoint:
    path: /api/commands/session
    method: GET
    data_selector: session
- name: setCookie
  endpoint:
    path: /api/commands/setcookie
    method: POST
    data_selector: arguments
- name: shadow
  endpoint:
    path: /api/commands/shadow
    method: GET
    data_selector: records
- name: siblings
  endpoint:
    path: /api/commands/siblings
    method: GET
    data_selector: records
    params: {}
- name: submit
  endpoint:
    path: /api/commands/submit
    method: GET
    data_selector: ''
    params: {}
- name: task
  endpoint:
    path: /api/commands/task
    method: GET
    data_selector: usage
    params: {}
- name: tick
  endpoint:
    path: /api/commands/tick
    method: GET
    data_selector: ''
    params: {}
- name: trigger
  endpoint:
    path: /api/commands/trigger
    method: GET
    data_selector: records
    params: {}
- name: type
  endpoint:
    path: /api/commands/type
    method: GET
    data_selector: arguments
- name: key_combinations
  endpoint:
    path: /api/commands/type
    method: GET
    data_selector: records
    params: {}
- name: uncheck
  endpoint:
    path: /api/commands/uncheck
    method: GET
- name: viewport
  endpoint:
    path: /api/commands/viewport
    method: GET
    data_selector: records
- name: writeFile
  endpoint:
    path: /api/commands/writefile
    method: GET
    data_selector: records
    params: {}
- name: App Events
  endpoint:
    path: /api/cypress-api/app-events
    method: GET
    data_selector: events
- name: Cypress Events
  endpoint:
    path: /api/cypress-api/cypress-events
    method: GET
    data_selector: events
- name: Other Events
  endpoint:
    path: /api/cypress-api/other-events
    method: GET
    data_selector: events
- name: CPU Architecture
  endpoint:
    path: /api/cypress-api/arch
    method: GET
    data_selector: Cypress.arch
- name: defaultCommandTimeout
  endpoint:
    path: /
    method: GET
    data_selector: defaultCommandTimeout
    params: {}
- name: pageLoadTimeout
  endpoint:
    path: /
    method: GET
    data_selector: pageLoadTimeout
    params: {}
- name: viewportWidth
  endpoint:
    path: /
    method: GET
    data_selector: viewportWidth
    params: {}
- name: viewportHeight
  endpoint:
    path: /
    method: GET
    data_selector: viewportHeight
    params: {}
- name: selectorPriority
  endpoint:
    path: /api/cypress-api/element-selector-api
    method: GET
    data_selector: options
- name: Keys
  endpoint:
    path: /api/commands/press
    method: GET
    data_selector: keys
    params: {}
- name: defaults
  endpoint:
    path: /api/commands/type
    method: GET
    data_selector: defaults
    params: {}
- name: Cypress.log
  endpoint:
    path: /api/cypress-api/cypress-log
    method: GET
    data_selector: options
- name: platform
  endpoint:
    path: /api/cypress-api/platform
    method: GET
    data_selector: platform
- name: session
  endpoint:
    path: /api/commands/session
    method: GET
    data_selector: Cypress.session
    params: {}
- name: spec
  endpoint:
    path: /api/cypress-api/spec
    method: GET
    data_selector: spec
    params: {}
- name: testing_type
  endpoint:
    path: /api/cypress-api/testing-type
    method: GET
- name: method
  endpoint:
    path: /api/utilities/blob
    method: GET
- name: setupNodeEvents
  endpoint:
    path: /api/node-events/setupNodeEvents
    method: GET
    data_selector: nodeEvents
    params: {}
- name: 'on'
  endpoint:
    path: /api/node-events/on
    method: GET
    data_selector: nodeEvents
    params: {}
- name: after_run_event
  endpoint:
    path: /api/node-events/after-run-api
    method: GET
    data_selector: results
- name: after:screenshot
  endpoint:
    path: /api/node-events/after-screenshot-api
    method: GET
    data_selector: details
    params: {}
- name: after_spec_event
  endpoint:
    path: /api/node-events/after-spec
    method: GET
    data_selector: results
- name: before:run
  endpoint:
    path: /api/node-events/before-run-api
    method: GET
- name: before:spec
  endpoint:
    path: /api/node-events/before-spec
    method: GET
- name: browser_launch_event
  endpoint:
    path: /api/node-events/before:browser:launch
    method: GET
    data_selector: events
- name: first_test
  endpoint:
    path: /app/end-to-end-testing/writing-your-first-end-to-end-test
    method: GET
    data_selector: test_steps
    params: {}
- name: home_page
  endpoint:
    path: /
    method: GET
    data_selector: page
    params: {}
- name: component_testing
  endpoint:
    path: /app/component-testing/get-started
    method: GET
    data_selector: tests
    params: {}
- name: Framework Definition
  endpoint:
    path: /app/component-testing/custom-frameworks
    method: GET
    data_selector: definitions
    params: {}
- name: Mount Adapter
  endpoint:
    path: /app/component-testing/mount-adapter
    method: GET
    data_selector: mountAdapters
    params: {}
- name: asset_files
  endpoint:
    path: /cypress/assets
    method: GET
    data_selector: assets
    params: {}
- name: downloads
  endpoint:
    path: /cypress/downloads
    method: GET
    data_selector: downloads
    params: {}
- name: screenshots
  endpoint:
    path: /cypress/screenshots
    method: GET
    data_selector: screenshots
    params: {}
- name: videos
  endpoint:
    path: /cypress/videos
    method: GET
    data_selector: videos
    params: {}
- name: test_retries
  endpoint:
    path: /app/guides/test-retries
    method: GET
    data_selector: test_retries
    params: {}
- name: cypress_tests
  endpoint:
    path: /app/continuous-integration/overview
    method: GET
    data_selector: tests
- name: cypress_tests
  endpoint:
    path: /cloud/get-started/introduction
    method: GET
    data_selector: tests
    params: {}
- name: cypress_run
  endpoint:
    path: /cypress/run
    method: POST
    data_selector: jobs
    params: {}
- name: cypress_tests
  endpoint:
    path: /run-tests
    method: POST
    data_selector: run_results
- name: webpack
  endpoint:
    path: https://github.com/cypress-io/cypress/tree/develop/npm/webpack-preprocessor
    method: GET
- name: watch
  endpoint:
    path: https://github.com/cypress-io/cypress-watch-preprocessor
    method: GET
- name: cucumber
  endpoint:
    path: https://github.com/badeball/cypress-cucumber-preprocessor
    method: GET
- name: cypress-markdown-preprocessor
  endpoint:
    path: https://github.com/bahmutov/cypress-markdown-preprocessor
    method: GET
- name: cypress-rollup-preprocessor
  endpoint:
    path: https://github.com/lmarqs/cypress-rollup-preprocessor
    method: GET
- name: '@bahmutov/cypress-esbuild-preprocessor'
  endpoint:
    path: https://github.com/bahmutov/cypress-esbuild-preprocessor
    method: GET
- name: cypress-vite
  endpoint:
    path: https://github.com/mammadataei/cypress-vite
    method: GET
- name: cypress-laravel
  endpoint:
    path: https://github.com/noeldemartin/cypress-laravel
    method: GET
- name: Mocha
  endpoint:
    path: /mocha
    method: GET
    data_selector: libraries
    params: {}
- name: Chai
  endpoint:
    path: /chai
    method: GET
    data_selector: libraries
    params: {}
- name: Chai-jQuery
  endpoint:
    path: /chai-jquery
    method: GET
    data_selector: libraries
    params: {}
- name: Sinon.js
  endpoint:
    path: /sinon
    method: GET
    data_selector: libraries
    params: {}
- name: Sinon-Chai
  endpoint:
    path: /sinon-chai
    method: GET
    data_selector: libraries
    params: {}
- name: e2e
  endpoint:
    path: /e2e
    method: POST
- name: component
  endpoint:
    path: /component
    method: POST
- name: cypress_env
  endpoint:
    path: /cypress.env.json
    method: GET
    data_selector: env
    params: {}
- name: experimentalCspAllowList
  endpoint:
    path: /app/references/content-security-policy
    method: GET
    data_selector: options
    params: {}
- name: experimentalFetchPolyfill
  endpoint:
    path: /app/references/content-security-policy
    method: GET
    data_selector: options
    params: {}
- name: experimentalInteractiveRunEvents
  endpoint:
    path: /app/references/content-security-policy
    method: GET
    data_selector: options
    params: {}
- name: experimentalMemoryManagement
  endpoint:
    path: /app/references/content-security-policy
    method: GET
    data_selector: options
    params: {}
- name: experimentalModifyObstructiveThirdPartyCode
  endpoint:
    path: /app/references/content-security-policy
    method: GET
    data_selector: options
    params: {}
- name: experimentalSourceRewriting
  endpoint:
    path: /app/references/content-security-policy
    method: GET
    data_selector: options
    params: {}
- name: experimentalWebKitSupport
  endpoint:
    path: /app/references/content-security-policy
    method: GET
    data_selector: options
    params: {}
- name: retries.experimentalStrategy
  endpoint:
    path: /app/references/content-security-policy
    method: GET
    data_selector: options
    params: {}
- name: retries.experimentalOptions
  endpoint:
    path: /app/references/content-security-policy
    method: GET
    data_selector: options
    params: {}
- name: browsers
  endpoint:
    path: /api/node-events/configuration-api
    method: GET
    data_selector: browsers
    params: {}
- name: cypress_run
  endpoint:
    path: /cypress/run
    method: POST
    data_selector: results
- name: cypress_open
  endpoint:
    path: /cypress/open
    method: POST
    data_selector: results
- name: component_testing
  endpoint:
    path: /app/component-testing
    method: GET
    data_selector: components
    params: {}
- name: performance_testing
  endpoint:
    path: /app/performance-testing
    method: GET
    data_selector: performance
    params: {}
- name: project
  endpoint:
    path: /cloud/projects
    method: POST
    data_selector: projectId
- name: recorded_runs
  endpoint:
    path: /runs
    method: GET
    data_selector: runs
- name: test_run
  endpoint:
    path: /api/test_runs
    method: GET
    data_selector: runs
    params: {}
- name: project_list
  endpoint:
    path: /report
    method: GET
    data_selector: data
    params:
      report_id: project-list
      export_format: csv
      start_date: '2025-03-01'
- name: usage_per_project_summary
  endpoint:
    path: /report
    method: GET
    data_selector: data
    params:
      report_id: usage-per-project-summary
      export_format: csv
      start_date: '2025-03-01'
- name: usage_per_project_over_time
  endpoint:
    path: /report
    method: GET
    data_selector: data
    params:
      report_id: usage-per-project-over-time
      export_format: csv
      start_date: '2025-03-01'
- name: cypress_test_types
  endpoint:
    path: /report
    method: GET
    data_selector: data
    params:
      report_id: cypress-test-types
      export_format: csv
      start_date: '2025-03-01'
- name: test_suite_size_summary
  endpoint:
    path: /report
    method: GET
    data_selector: data
    params:
      report_id: test-suite-size-summary
      export_format: csv
      start_date: '2025-03-01'
- name: test_suite_size_over_time
  endpoint:
    path: /report
    method: GET
    data_selector: data
    params:
      report_id: test-suite-size-over-time
      export_format: csv
      start_date: '2025-03-01'
- name: status_per_test_daily
  endpoint:
    path: /report
    method: GET
    data_selector: data
    params:
      report_id: status-per-test-daily
      export_format: csv
      start_date: '2025-03-01'
- name: status_per_build_summary
  endpoint:
    path: /report
    method: GET
    data_selector: data
    params:
      report_id: status-per-build-summary
      export_format: csv
      start_date: '2025-03-01'
- name: status_per_build_over_time
  endpoint:
    path: /report
    method: GET
    data_selector: data
    params:
      report_id: status-per-build-over-time
      export_format: csv
      start_date: '2025-03-01'
- name: status_per_spec_summary
  endpoint:
    path: /report
    method: GET
    data_selector: data
    params:
      report_id: status-per-spec-summary
      export_format: csv
      start_date: '2025-03-01'
- name: status_per_spec_over_time
  endpoint:
    path: /report
    method: GET
    data_selector: data
    params:
      report_id: status-per-spec-over-time
      export_format: csv
      start_date: '2025-03-01'
- name: status_per_test_summary
  endpoint:
    path: /report
    method: GET
    data_selector: data
    params:
      report_id: status-per-test-summary
      export_format: csv
      start_date: '2025-03-01'
- name: status_per_test_over_time
  endpoint:
    path: /report
    method: GET
    data_selector: data
    params:
      report_id: status-per-test-over-time
      export_format: csv
      start_date: '2025-03-01'
- name: cypress_build_versions_summary
  endpoint:
    path: /report
    method: GET
    data_selector: data
    params:
      report_id: cypress-build-versions-summary
      export_format: csv
      start_date: '2025-03-01'
- name: cypress_build_versions_over_time
  endpoint:
    path: /report
    method: GET
    data_selector: data
    params:
      report_id: cypress-build-versions-over-time
      export_format: csv
      start_date: '2025-03-01'
- name: cypress_build_versions_per_project_over_time
  endpoint:
    path: /report
    method: GET
    data_selector: data
    params:
      report_id: cypress-build-versions-per-project-over-time
      export_format: csv
      start_date: '2025-03-01'
- name: browsers_tested
  endpoint:
    path: /report
    method: GET
    data_selector: data
    params:
      report_id: browsers-tested
      export_format: csv
      start_date: '2025-03-01'
- name: browser_versions
  endpoint:
    path: /report
    method: GET
    data_selector: data
    params:
      report_id: browser-versions
      export_format: csv
      start_date: '2025-03-01'
- name: browser_versions_over_time
  endpoint:
    path: /report
    method: GET
    data_selector: data
    params:
      report_id: browser-versions-over-time
      export_format: csv
      start_date: '2025-03-01'
- name: browser_versions_per_project_over_time
  endpoint:
    path: /report
    method: GET
    data_selector: data
    params:
      report_id: browser-versions-per-project-over-time
      export_format: csv
      start_date: '2025-03-01'
- name: spec-details
  endpoint:
    path: /enterprise-reporting/report
    method: GET
    data_selector: data
    params:
      report_id: spec-details
- name: failed-test-details
  endpoint:
    path: /enterprise-reporting/report
    method: GET
    data_selector: data
    params:
      report_id: failed-test-details
- name: test-details
  endpoint:
    path: /enterprise-reporting/report
    method: GET
    data_selector: data
    params:
      report_id: test-details
- name: average-passing-build-duration
  endpoint:
    path: /enterprise-reporting/report
    method: GET
    data_selector: data
    params:
      report_id: average-passing-build-duration
- name: average-passing-spec-duration
  endpoint:
    path: /enterprise-reporting/report
    method: GET
    data_selector: data
    params:
      report_id: average-passing-spec-duration
- name: flake-per-project-over-time
  endpoint:
    path: /enterprise-reporting/report
    method: GET
    data_selector: data
    params:
      report_id: flake-per-project-over-time
- name: flake-rate-per-project
  endpoint:
    path: /enterprise-reporting/report
    method: GET
    data_selector: data
    params:
      report_id: flake-rate-per-project
- name: flake-rate-per-project-over-time
  endpoint:
    path: /enterprise-reporting/report
    method: GET
    data_selector: data
    params:
      report_id: flake-rate-per-project-over-time
- name: flaky-test-details
  endpoint:
    path: /enterprise-reporting/report
    method: GET
    data_selector: data
    params:
      report_id: flaky-test-details
- name: top-flaky-per-project
  endpoint:
    path: /enterprise-reporting/report
    method: GET
    data_selector: data
    params:
      report_id: top-flaky-per-project
- name: top-failures-per-project
  endpoint:
    path: /enterprise-reporting/report
    method: GET
    data_selector: data
    params:
      report_id: top-failures-per-project
- name: top-errors-per-project
  endpoint:
    path: /enterprise-reporting/report
    method: GET
    data_selector: data
    params:
      report_id: top-errors-per-project
- name: ui-coverage-per-project-summary
  endpoint:
    path: /enterprise-reporting/report
    method: GET
    data_selector: data
    params:
      report_id: ui-coverage-per-project-summary
- name: ui-coverage-per-project-over-time
  endpoint:
    path: /enterprise-reporting/report
    method: GET
    data_selector: data
    params:
      report_id: ui-coverage-per-project-over-time
- name: ui-coverage-details
  endpoint:
    path: /enterprise-reporting/report
    method: GET
    data_selector: data
    params:
      report_id: ui-coverage-details
- name: accessibility-per-project-summary
  endpoint:
    path: /enterprise-reporting/report
    method: GET
    data_selector: data
    params:
      report_id: accessibility-per-project-summary
- name: accessibility-per-project-over-time
  endpoint:
    path: /enterprise-reporting/report
    method: GET
    data_selector: data
    params:
      report_id: accessibility-per-project-over-time
- name: accessibility-details
  endpoint:
    path: /enterprise-reporting/report
    method: GET
    data_selector: data
    params:
      report_id: accessibility-details
- name: organizations
  endpoint:
    path: /cloud/account-management/organizations
    method: GET
- name: projects
  endpoint:
    path: /projects
    method: GET
    data_selector: projects
- name: users
  endpoint:
    path: /cloud/account-management/users
    method: GET
- name: organizations
  endpoint:
    path: /cloud/account-management/organizations
    method: GET
- name: UI Coverage Results
  endpoint:
    path: /results
    method: GET
    data_selector: results
- name: significant_attributes
  endpoint:
    path: /ui-coverage/configuration/significantattributes
    method: GET
    data_selector: significantAttributes
    params: {}
- name: attribute_filters
  endpoint:
    path: /ui-coverage/configuration/attributefilters
    method: GET
    data_selector: attributeFilters
    params: {}
- name: elementFilters
  endpoint:
    path: /ui-coverage/configuration/elementfilters
    method: GET
    data_selector: elementFilters
- name: viewGroups
  endpoint:
    path: /ui-coverage/viewGroups
    method: POST
    data_selector: views
- name: elementGroups
  endpoint:
    path: /ui-coverage/elementGroups
    method: POST
    data_selector: elementGroups
- name: significantAttributes
  endpoint:
    path: /ui-coverage/significantAttributes
    method: POST
    data_selector: significantAttributes
- name: attributeFilters
  endpoint:
    path: /ui-coverage/attributeFilters
    method: POST
    data_selector: attributeFilters
- name: Results API
  endpoint:
    path: /ui-coverage/results-api
    method: GET
- name: Branch Review
  endpoint:
    path: /ui-coverage/guides/compare-reports
    method: GET
- name: Cross-project analytics
  endpoint:
    path: /cloud/features/analytics/enterprise-reporting#UI-Coverage
    method: GET
- name: viewFilters
  endpoint:
    path: /ui-coverage/configuration/viewfilters
    method: GET
    data_selector: viewFilters
- name: elementFilters
  endpoint:
    path: /ui-coverage/configuration/elementfilters
    method: GET
    data_selector: elementFilters
- name: significantAttributes
  endpoint:
    path: /ui-coverage/configuration/significantattributes
    method: GET
    data_selector: significantAttributes
- name: uiCoverage
  endpoint:
    path: /ui-coverage
    method: GET
    data_selector: attributeFilters
- name: uiCoverage
  endpoint:
    path: /ui-coverage
    method: GET
    data_selector: elements
- name: uiCoverage
  endpoint:
    path: /ui-coverage/configuration/additionalinteractioncommands
    method: GET
    data_selector: commands
    params: {}
- name: allowedInteractionCommands
  endpoint:
    path: /ui-coverage/configuration/allowedinteractioncommands
    method: GET
    data_selector: uiCoverage.allowedInteractionCommands
    params: {}
- name: accessibility_results
  endpoint:
    path: /accessibility/results
    method: GET
    data_selector: results
    params: {}
- name: Branch Review
  endpoint:
    path: /accessibility/core-concepts/compare-reports
    method: GET
    data_selector: results
- name: Results API
  endpoint:
    path: /accessibility/results-api
    method: GET
    data_selector: results
- name: Analytics
  endpoint:
    path: /cloud/features/analytics/enterprise-reporting
    method: GET
    data_selector: trends
- name: views
  endpoint:
    path: /accessibility/configuration/views
    method: GET
    data_selector: views
    params: {}
- name: viewFilters
  endpoint:
    path: /configuration/viewfilters
    method: GET
    data_selector: viewFilters
- name: elementFilters
  endpoint:
    path: /elementFilters
    method: GET
    data_selector: elementFilters
- name: significantAttributes
  endpoint:
    path: /accessibility/configuration/significantattributes
    method: GET
    data_selector: significantAttributes
    params: {}
- name: accessibility_results
  endpoint:
    path: /results
    method: GET
    data_selector: results
- name: accessibility_results
  endpoint:
    path: /accessibility/results
    method: GET
    data_selector: results
    params: {}
- name: data_extract
  endpoint:
    path: /cloud/integrations/data-extract-api
    method: GET
    data_selector: data
    params: {}
notes:
- Cypress Cloud unlocks the full potential of Cypress test automation tools in your
  CI pipeline.
- Business and Enterprise plans include secure integration with self-managed GitHub
  and GitLab instances.
- Cypress Accessibility delivers detailed, actionable accessibility reports directly
  from your tests, powered by the industry-leading Axe Core® library.
- .and() requires being chained off a previous command.
- .and() will continue to retry its specified assertions until it times out.
- Aliases are reset before each test.
- .blur() is not an action command
- .blur() can time out because your browser did not receive any blur events
- This element must be an <input> with type checkbox or radio.
- .check() is an 'action command' that follows all the rules of Actionability.
- .clear() is an alias for [.type({selectall}{del})](/api/commands/type).
- Cypress automatically clears all cookies before each test to prevent state from
  being shared across tests when test isolation is enabled.
- You shouldn't need to use this command unless you're using it to clear all cookies
  inside a single test or test isolation is disabled.
- Cypress automatically clears all local storage before each test to prevent state
  from being shared across tests when test isolation is enabled.
- Cypress automatically clears all session storage before each test to prevent state
  from being shared across tests when test isolation is enabled.
- You shouldn't need to use this command unless you're using it to clear specific
  cookies inside a single test or test isolation is disabled.
- The element must first reach actionability before clicking.
- cy.clock() only applies to the top window on a web page. It will not override the
  time functions of any iframe embedded on the page.
- .closest() requires being chained off a command that yields DOM element(s).
- .closest() can time out waiting for the element(s) to exist in the DOM.
- Cypress prefers some DOM elements over the deepest element found.
- Cypress will ignore this element preference order if you pass a selector argument
  to .contains()
- Element contains text 'New User'
- .dblclick() is an 'action command' that follows all the rules of Actionability.
- .dblclick() will automatically wait for the element to reach an actionable state.
- cy.document() requires being chained off of cy.
- cy.document() will automatically retry until all chained assertions have passed.
- Iterates through an array like structure (arrays or objects with a length property)
- It is unsafe to chain further commands that rely on the subject after .each()
- .end() requires being chained off a previous command.
- .end() cannot have any assertions chained.
- .end() cannot time out.
- .end() does not log in the Command Log
- Commands that do not exit are not supported
- Cypress will not continue running any other commands until cy.exec() has finished
- .first() yields the new DOM element it found.
- Fixture files are assumed to be unchanged during the test, and thus Cypress loads
  them just once.
- .focus() is not implemented like other action commands, and does not follow the
  same rules of waiting for actionability.
- .focus() can time out waiting for assertions you've added to pass.
- cy.focused() requires being chained off a command that yields DOM element(s).
- cy.focused() can time out waiting for the element(s) to exist in the DOM.
- Cypress has a command `cy.get()` to retrieve DOM elements.
- cy.getAllCookies() should never time out.
- cy.getAllLocalStorage() requires being chained off of cy.
- cy.getAllLocalStorage() cannot time out.
- Displays the command in the Command log
- Cannot time out
- cy.getCookie() requires being chained off of cy.
- cy.getCookie() will only run assertions you have chained once, and will not retry.
- cy.getCookies() requires being chained off of cy.
- cy.getCookies() will only run assertions you have chained once, and will not retry.
- Cypress will wait for the new page to load before moving on to new commands.
- Cypress handles situations where a page load was not caused (such as hash routing)
  and will resolve immediately.
- cy.hash() is an alias of cy.location('hash')
- 'Cypress does not have a cy.hover() command. See Issue #10.'
- Using .trigger() will only affect events in JavaScript and will not trigger any
  effects in CSS.
- All intercepts are automatically cleared before every test.
- Cypress logs all requests that match any `cy.intercept()`
- You can only enable/disable a request's logs when defining the `cy.intercept()`
- calling `res.send()` will end the response phase and stop the response from propagating
  to the next matching response handler in line.
- .invoke() automatically retries invoking the specified method until the returned
  value satisfies the attached assertions.
- Cypress automatically normalizes the `cy.location()` command and strips out extraneous
  values and properties found in `window.location`.
- Cypress does not have a built-in `cy.mount()` command. The command must be set up
  in your support file.
- The querying behavior of this command matches exactly how .nextAll() works in jQuery.
- .nextAll() requires being chained off a command that yields DOM element(s).
- .nextAll() will automatically retry until the element(s) exist in the DOM.
- .nextUntil() requires being chained off a command that yields DOM element(s).
- .nextUntil() will automatically retry until the element(s) exist in the DOM.
- .nextUntil() can time out waiting for the element(s) to exist in the DOM.
- The querying behavior of this command matches exactly how .not() works in jQuery.
- .not() requires being chained off a command that yields DOM element(s).
- By default Cypress will search through the response streams coming from your server
  on first party .html and .js files and replace code that matches patterns commonly
  found in framebusting.
- Cypress no longer injects document.domain by default, which means cy.origin() must
  now be used to navigate between any two origins in the same test.
- Cypress uses the structured clone algorithm to transfer the args option to the secondary
  origin.
- .parent() only travels a single level up the DOM tree
- The querying behavior of this command matches exactly how `.parents()` works in
  jQuery.
- .parentsUntil() is a query, and it is safe to chain further commands.
- .parentsUntil() requires being chained off a command that yields DOM element(s).
- This does not set a debugger in your code, unlike .debug()
- .pause() yields the same subject it was given.
- .pause() will not run assertions. Assertions will pass through as if this command
  did not exist.
- .pause() cannot time out.
- F1-F12 keys are not supported. These keys are used for browser shortcuts, and can
  prevent the test suite from executing properly after they are pressed.
- Get all previous siblings of each DOM element in a set of matched DOM elements.
- .prevUntil() requires being chained off a command that yields DOM element(s).
- .prevUntil() can time out waiting for the element(s) to exist in the DOM.
- By default, cy.readFile() asserts that the file exists and will fail if it does
  not exist.
- cy.readFile() will continue to read the file until it passes all of its assertions.
- cy.reload() requires being chained off of cy
- 'cy.reload() requires the response to be content-type: text/html'
- cy.reload() requires the response code to be 2xx after following redirects
- cy.reload() requires the load load event to eventually fire
- Cypress assumes the host is the baseUrl property configured inside of cypress.config.js
- Cypress automatically gets and sets cookies as if the requests had come from the
  browser.
- cy.request() sends requests to actual endpoints, bypassing those defined using cy.intercept()
- .rightclick() will not open context menus native to the browser.
- .rightclick() should be used to test your app's handling of right click related
  events such as contextmenu.
- Screenshots are saved inside the screenshots folder.
- Automatic screenshots on test failure.
- Taking a screenshot is an asynchronous action that takes around 100ms to complete.
- It is possible something in your application may have changed in the 100ms timeframe.
- 'Elements that are position: fixed or position: sticky will appear multiple times
  in the final screenshot.'
- Chromium will not capture screenshots when the renderer process for the Cypress
  tab is paused.
- Cypress does not reflect the accurate scroll positions of any elements within snapshots.
- Scroll to a specific position.
- .select() is an action command that follows the rules of Actionability.
- 'Passing { force: true } to .select() will not override the actionability checks
  for selecting a disabled <option> or an option within a disabled <optgroup>.'
- Whenever resolving a file path, .selectFile() asserts that the file exists and will
  fail if it does not exist.
- .selectFile() is an 'action command' that follows all the rules of Actionability.
- .selectFile() will automatically wait for the element to reach an actionable state.
- .selectFile() can time out waiting for the element to reach an actionable state.
- .selectFile() can time out waiting for a file to exist on disk or for an alias to
  resolve.
- Caches and restores cookies, localStorage, and sessionStorage in order to recreate
  a consistent browser context between tests.
- The cy.session() command will inherit the testIsolation value to determine whether
  or not the page is cleared when caching and restoring the browser context.
- When test isolation is enabled, ensure that you're calling cy.visit() after calling
  cy.session(), otherwise your tests will be running on a blank page.
- Disabling test isolation may improve performance of end-to-end tests, however, previous
  tests could impact the browser state of the next test and cause inconsistency when
  using .only(). Be mindful to write isolated tests when test isolation is disabled.
- When the page and session data are cleared
- Test Isolation Enabled
- Test Isolation Disabled
- Session caching
- Explicitly clearing sessions
- Where to call `cy.session()`
- Choosing the correct id to cache a session
- Requires being chained off of cy
- When working with `cy.click()`, it sometimes won't click the right element in Chrome.
  It's happening because of the ambiguity in spec.
- .should() requires being chained off a previous command.
- .should() will continue to retry its specified assertions until it times out.
- .spread() requires being chained off a previous command.
- .spread() requires being chained off a command that yields an array-like structure.
- cy.spy() is a utility function, and is not a Cypress command, query or assertion.
  It is not retryable, chainable, or timeout-able.
- cy.spy() creates spies in a sandbox, so all spies created are automatically reset/restored
  between tests without you having to explicitly reset/restore them.
- '.stub() assumes you are already familiar with our guide: Stubs, Spies, and Clocks'
- .submit() is not implemented like other action commands, and does not follow the
  same rules of waiting for actionability.
- .submit() will fail if there are form validation errors.
- Uses cy.task() to execute code in Node via the task plugin event.
- Do not recommend starting a web server using cy.task().
- Tasks must end
- Tasks are merged automatically
- Argument should be serializable
- .then() assumes you are already familiar with core concepts such as closures.
- Prefer .should() with callback over .then() for assertions as they are automatically
  rerun until no assertions throw within it.
- cy.clock() must be called before cy.tick() in order to override native time functions
  first.
- .trigger() is an 'action command' that follows all the rules of Actionability.
- Last updated on May 20, 2025
- It is unsafe to chain further commands that rely on the subject after .type()
- .uncheck() requires being chained off a command that yields DOM element(s).
- .uncheck() requires the element to have type `checkbox`.
- Uses OAuth2 with refresh token — requires setup of connected app in api
- Some objects like Contact may return nulls in deeply nested fields
- Cypress automatically sets the viewport to its default size between each test.
- Restores viewport via `Cypress.config()`
- Set viewport in the test configuration
- Cypress will prefix the URL with the baseUrl if it has been set. Configure baseUrl
  in the Cypress configuration to prevent repeating yourself in every cy.visit() command.
- cy.visit() requires being chained off of cy.
- 'cy.visit() requires the response to be content-type: text/html.'
- cy.visit() requires the response code to be 2xx after following redirects.
- cy.visit() requires the load load event to eventually fire.
- Cypress automatically waits for the network call to complete before proceeding to
  the next command.
- cy.wait() can time out waiting for the request to go out.
- cy.wait() can time out waiting for the response to return.
- Cypress uses 2 different windows.
- .within() requires being chained off a previous command that yields exactly one
  DOM element.
- .within() will only run assertions you have chained once, and will not retry.
- .within() cannot time out.
- Cypress emits a series of events as it runs in your browser.
- Cypress uses the debug node module for both the back end server process, and for
  everything running in the browser.
- Custom commands work well when you're needing to describe behavior that's desirable
  across all of your tests.
- Cypress does not have cy.hover() or cy.mount() commands out-of-the-box.
- Validations always work as 'or' not 'and'.
- Custom commands are a great way to abstract away setup (specific to your app).
- Queries are synchronous and retriable.
- Queries are idempotent.
- Cypress performs very little validation around queries - it is the responsibility
  of each implementation to ensure that its arguments and subject are of the correct
  type.
- Testing in Cypress is all about readability and simplicity. You don't have to do
  that much actual programming to get a lot done.
- Not all configuration values can be changed during runtime.
- Debugging will be turned on until you explicitly turn it off.
- Cypress.currentRetry may only be used inside tests and test hooks, and will be null
  outside of tests and test hooks.
- Cypress.currentTest may only be used inside tests and test hooks, and will be null
  outside of tests and test hooks.
- The selectorPriority API is under active development and may change in future versions.
- Many of these functions accept an optional `onFail` argument. This is a legacy feature
  used to customize the thrown error, and may be removed in a future release; we recommend
  against relying on it.
- 'Scope: Environment variables set using Cypress.env are only in scope for the current
  spec file.'
- Difference between OS-level and Cypress environment variables.
- A great place to put this configuration is in the supportFile, since it is loaded
  before any test files are evaluated.
- The keystroke delay can also be set via test configuration, which can be useful
  when setting it for a single test or a subset of tests.
- Using `Cypress.require()` within the `cy.origin()` callback requires enabling the
  `experimentalOriginDependencies` option in the Cypress configuration.
- '`Cypress.require` only works when called within the `cy.origin()` callback function.
  It will error if used elsewhere.'
- 'Only the following file extensions are supported for dependencies required: .js,
  .jsx, .ts, .tsx, .mjs, .json, .coffee.'
- Cypress will clear the current session data before each test when testIsolation
  is enabled.
- Ensure clean test slate for tests when testIsolation is disabled.
- Calling `Cypress.stop()` will stop the execution of remaining tests, but any code
  after `Cypress.stop()` in the same container block (such as `beforeEach` or `afterEach`)
  will still run.
- To prevent additional logic from executing after `Cypress.stop()`, add a `return`
  statement immediately after it.
- Rejected test promises do not fail tests
- Node event hooks enable you to tap into, modify, or extend the internal behavior
  of Cypress.
- setupNodeEvents enables you to tap into the Node process running outside of the
  browser.
- Errors in your setupNodeEvents function will not crash Cypress.
- results will be undefined in interactive mode
- This event is called after the screenshot image is written to disk.
- When running via cypress open, the after:spec event only fires if the experimentalInteractiveRunEvents
  flag is enabled.
- When running via cypress open, the before:run event only fires if the experimentalInteractiveRunEvents
  flag is enabled.
- When running via cypress open, the before:spec event only fires if the experimentalInteractiveRunEvents
  flag is enabled.
- This code is part of the setupNodeEvents function and executes in the Node environment.
- You cannot call Cypress or cy commands in this function.
- Cypress supports a myriad of mime types when testing file downloads, but in case
  you have a unique one, you can add support for it.
- A preprocessor could transpile your file from another language (CoffeeScript or
  ClojureScript) or from a newer version of JavaScript (ES2017).
- The built file is the file that is created by the preprocessor that will eventually
  be served to the browser.
- Make sure not to start a new watcher each time it is called. Instead, cache the
  watcher and, on subsequent calls, return a promise that resolves when the latest
  version of the file has been processed.
- Retry-ability is a core feature of Cypress that assists with testing dynamic web
  applications.
- Cypress retries assertions until they pass or the timeout is reached.
- Very rarely you may want to retry a command like `.click()`. We describe one case
  like that where the event listeners are attached to a modal popup only after a delay,
  thus causing default events fired during `.click()` to not register.
- Because of the implicit assertions built into every command, and action commands
  in particular, you should rarely need this pattern.
- Cypress bundles the popular Chai assertion library, as well as helpful extensions
  for Sinon and jQuery, bringing you dozens of powerful assertions for free.
- Cypress checks the current state of the DOM and takes actions to ensure the DOM
  element is ready to receive actions.
- Cypress will always scroll elements into view before interaction.
- Cypress Studio is currently experimental and works only in E2E tests.
- Cucumber tests are not yet supported.
- Studio cannot load when running in open mode with @cypress/grep.
- Cypress maintains a curated list of plugins created by us and the community.
- Plugins from our official list are npm modules. This enables them to be versioned
  and updated separately without needing to update Cypress itself.
- Cypress supports running under macOS, Linux, and Windows operating systems.
- Cypress requires Node.js versions 20.x, 22.x, or >=24.x.
- Cypress can be installed using npm, Yarn, or pnpm.
- Don't use `cypress` as the exact name of a script, especially if you use Yarn as
  package manager.
- Cypress monitors your spec files for any changes and automatically displays any
  changes.
- Cypress provides detailed, human-readable error messages that explain exactly what
  went wrong.
- Cypress automatically detects things like a page transition event and will automatically
  halt running commands until the next page has finished loading.
- Cypress increases the timeout to 60 seconds for the single PAGE LOAD event.
- Logging in is one of those features that are mission critical and should likely
  involve your server.
- You're likely wondering what happened to our advice about logging in 'only once'.
- Cypress Component Testing includes official support for many popular libraries and
  frameworks.
- The Definition is required when users configure Component Testing for the first
  time.
- Cypress wraps all DOM queries with robust retry-and-timeout logic that better suits
  how real web apps work.
- Cypress commands do not return their subjects, they yield them.
- Commands are asynchronous and get queued for execution at a later time.
- Cypress may create asset files in a downloadsFolder, a screenshotsFolder or a videosFolder
  to store any downloads, screenshots or videos created during the testing of your
  application.
- Many users will opt to add these folders to their .gitignore file.
- Cypress may create asset files in a downloadsFolder, screenshotsFolder or videosFolder.
- Cypress commands are async.
- All aliases are reset before each test.
- Tests should always be able to be run independently from one another and still pass.
- Disabling test isolation may improve the overall performance of end-to-end tests.
- Best practices on how to organize tests, log in, and control state
- Strategies for selecting elements and assigning return values
- Best practices on visiting external sites
- How to avoid relying on the state of previous tests
- When to use after or afterEach hooks
- How to avoid unnecessary waiting in your tests
- Setting a global base URL for your tests to save time
- Cypress Accessibility is a paid premium solution.
- Conditional testing can lead to flaky tests if the state of the DOM is not stable.
- You cannot do conditional testing on the DOM unless you are either server side rendering
  with no asynchronous JavaScript or using client side JavaScript that only ever does
  synchronous rendering.
- If you cannot accurately know the state of your application then no matter what
  programming idioms you have available - you cannot write 100% deterministic tests.
- Cypress has the capability to run tests across multiple browsers.
- Excluding Electron, any browser you want to run Cypress tests in needs to be installed
  on your local system or CI environment.
- Cypress requires that the URLs navigated to have the same port
- We don't recommend visiting an origin that you don't control in your tests
- If you cannot work around any of the issues using the suggested workarounds above,
  including modifying obstructive third-party code with cy.origin, you may want to
  disable web security.
- Disabling web security is only supported in Chrome-based browsers.
- Cypress provides access to the objects with information about the request, enabling
  assertions about its properties.
- 'Logging can be disabled by passing { log: false } with the static response.'
- Capturing of screenshots when a test fails can be turned off entirely by setting
  screenshotOnRunFailure to false from within the Cypress configuration or by setting
  screenshotOnRunFailure to false in the Cypress.Screenshot.defaults().
- Cypress clears any existing screenshots before cypress run.
- Video recording is disabled by default, but can be turned on by setting video to
  true from within your configuration.
- Cypress clears any existing videos before a cypress run.
- Cypress comes built in with the ability to stub and spy with cy.stub(), cy.spy()
  and modify your application's time with cy.clock()
- Experimental feature introduced in Cypress 13.4.0 offers more options for detecting
  flaky tests.
- The attempt variable will have values 0 through 3 (the first default test execution
  plus three allowed retries).
- The retries constant in this case is always 3.
- AWS CodeBuild creates a separate build for each possible configuration combination
  for a batch build-list strategy.
- Caching with AWS CodeBuild directly can be challenging.
- Cypress Cloud offers the ability to parallelize and group test runs.
- Cypress Cloud offers the ability to parallelize and group test runs
- Recording test results requires setting up recording to Cypress Cloud
- Cypress attempts to find available file editors on your system and display those
  as options. If your preferred editor is not listed, you can specify the (full) path
  to it by selecting Other.
- Cypress provides several options to review results of a test run.
- Cypress ships with official type declarations for TypeScript.
- TypeScript 5.0+ is required.
- Opt out of sending exception data to Cypress by setting CYPRESS_CRASH_REPORTS=0.
- Cypress may occasionally display messages in your CI logs related to our commercial
  offerings and how they could benefit you during your workflows.
- Cypress now only officially supports the latest 3 major versions of Chrome, Firefox,
  and Edge - older browser versions may still work, but we recommend keeping your
  browsers up to date to ensure compatibility with Cypress.
- The `cy.origin()` command must now be used when navigating between subdomains.
- Fixed a performance issue with activated service workers that aren't controlling
  clients which could lead to correlation timeouts.
- Fixed a regression introduced in 13.6.0 where Cypress would occasionally exit with
  status code 1, even when a test run was successful, due to an unhandled WebSocket
  exception.
- Improved the UI of the Debug page.
- Cypress dropped support for Node.js 12, 15 and 17.
- Cypress enforces running tests in a clean browser context through test isolation.
- Cypress Studio provides a visual way to generate tests within Cypress by recording
  interactions against the application under test.
- Users can now log into the Dashboard from the 'Choose a browser' page of the Launchpad
  even if a browser is not open.
- Component testing is now beta!
- Cypress has made several configuration option changes including renaming options,
  removing options, and only allowing some options within a specific testing type.
- Cypress now catches uncaught errors and fails the test even if the application under
  test has defined window.onerror.
- Cypress now fails tests if there is an unhandled promise rejection in the application
  under test.
- Improved the startup time of `cypress open` and `cypress run`.
- Expanded search bar in desktop GUI to fill the entire width.
- There's a new `scrollBehavior` configuration option that controls the viewport position
  when an element is scrolled prior to action commands.
- The **Tests** tab in the Test Runner now orders folders before files.
- Cypress now includes support for test retries.
- Cypress now requires TypeScript 3.4+.
- Installing Cypress on your system now requires Node.js 10+.
- Now you can control whether screenshots are automatically taken on test failure
  during `cypress run` by setting [`screenshotOnRunFailure`](/app/references/configuration#Screenshots)
  in your configuration.
- The `pluginsFile` now has access to a readonly `version` property within the `config`
  object that returns the current Cypress version being run.
- Cypress now displays the currently running file at the top of the Test Runner's
  Command Log.
- Cypress now supports the execution of component tests using framework-specific adaptors
  when setting the experimentalComponentTesting configuration option to true.
- Cypress `4.0.0` includes support for Mozilla Firefox browsers (beta support) and
  Microsoft Edge (Chromium based) browsers.
- Installing Cypress on your system now requires Node.js 8+.
- Cypress now automatically reads from your system's `HTTP_PROXY`, `HTTPS_PROXY`,
  and `NO_PROXY` environment variables and proxies traffic accordingly through Cypress
  based on these values.
- Cypress now detects more instances of browser installations.
- Cypress's recognition of websites attempting framebusting has been updated.
- Released 7/30/2018
- We now run each spec file in isolation from one another.
- Cypress now caches globally per version which prevents it from being installed multiple
  times across projects.
- All CORS related issues should finally be fixed now.
- Cypress now correctly injects and handles pages which are missing a `<head>`, a
  `<body>`, or even an `<html>` tag.
- Updating through the Desktop App in Linux does not work. To update please run [cypress
  install](/app/references/command-line) from the command line.
- All users must LOG IN AGAIN and re-add their projects. Sorry, we've changed the
  way we store local data.
- We are aware of issues running in CI with Linux builds, and are working through
  those issues.
- 'Cypress now requires a viewport to be issued at all times. By default it is 1000x660
  but can be changed in your cypress.json file with the keys: viewportWidth and viewportHeight.'
- Cypress will automatically clear all cookies before each test run.
- Cookies are automatically cleared between page refreshes, during app startup, and
  leaving the test page.
- Drastically improved file watching on large projects with many tests.
- Increased `cy.visit()` timeout from 15s to 20s.
- 'Best Practice: Don''t use `cypress` as the exact name of a script, especially if
  you use Yarn as package manager.'
- Cypress runs tests in headless mode by default.
- Use --headed to run tests with the browser shown.
- Uses debug logs with DEBUG=cypress:* npx cypress run
- This guide is for Cypress 10+.
- Cypress additionally supports config files with .mjs or .cjs extensions.
- 'Cypress uses minimatch with the options: {dot: true, matchBase: true}.'
- The **/node_modules/** pattern is automatically added to excludeSpecPattern and
  does not need to be specified.
- The `<meta>` tag implementation is fully supported by Cypress without any configuration
  required.
- Cypress will remove any CSP headers from the response before it is sent to the browser.
- Cypress automatically normalizes both the key and the value. The leading CYPRESS_
  or cypress_ is removed and the remaining name is camelCased, while values are converted
  to Number or Boolean wherever possible.
- Not as obvious where values come from versus the other options.
- No support for nested fields.
- Cypress supports Firefox and Chrome-family browsers including Edge and Electron.
- Cypress automatically detects available browsers on your OS.
- Cypress generates its own isolated profile apart from your normal browser profile.
- Some browsers such as Internet Explorer are not currently supported.
- Proxy Auto-Configuration (PAC) files are not currently supported.
- SOCKS proxies are not currently supported.
- Cypress automates the browser with its own unique architecture.
- Each test is bound to a single superdomain.
- Cypress utilizes a Chrome extension in order to run properly. If you or your company
  block specific Chrome extensions, this may cause problems with running Cypress.
- Cypress needs free access to some URLs for effective communication.
- By default, process information is collected, summarized and is printed once every
  10 seconds.
- With CYPRESS_NO_COMMAND_LOG set, screenshots and videos will not include the Command
  Log.
- chrome-for-testing and chromium typically require the downloaded application file
  to be manually moved to the /Applications folder to be auto-detected.
- chrome-for-testing and chromium typically require the binary to be manually added
  to the PATH or a symlink created to be auto-detected.
- If you find a patch for an error, please add a comment to the relevant Cypress GitHub
  issue explaining your workaround.
- Cypress is a free, downloadable and open source application.
- Cypress works in any CI provider.
- Cypress modifies network traffic in real time and therefore must sit between your
  server and the browser.
- Cypress is not built for performance testing.
- Test Replay is available to all Cypress Cloud plans at no additional cost, subject
  to usage limits.
- Requires setup of a project in Cypress Cloud with a record key.
- In-app notifications are available in Cypress v12.17.0 and above and requires macOS
  or Linux.
- Recording exactly one run for every commit is the best way to ensure complete and
  accurate comparisons.
- Only one Active installation is supported
- You need a Cypress Cloud account
- You must be an admin or the owner of your Cypress Cloud organization
- Organization ID is a unique identifier in UUID format found under the Organization
  settings section.
- Cypress uses projectId and Record Key to uniquely identify projects.
- A record key is a GUID.
- Only owners can give other users 'owner' access.
- Option to request access to organization is not available if configured for SSO.
- public projects are visible to all users in the organization in Cypress Cloud
- Once SSO is successfully set up, users will need to be invited via your SSO provider,
  as the Cypress Cloud invitation option will be disabled.
- All SSO Users are initially added with the User Role of Member. If a User needs
  different User Role permissions, this can be changed via Cypress Cloud by a current
  member with the role of Owner or Admin.
- SSO users are separate accounts from Google/GitHub or email/password users. If there
  are duplicate users, duplicates can be removed by any Owner or Admin.
- Cypress Cloud does not capture anything related to the code of your application
  under test or the code within any repositories that are associated with your project.
- You, the customer, own and are responsible for your test content.
- Cypress Cloud is a separate service from the Cypress app and will always remain
  optional.
- Test Replay is available for tests recorded using Cypress v13 and up.
- Requires setup of connected app in Cypress Cloud
- UI Coverage simplifies testing by grouping related elements.
- Improving test coverage often requires collaboration.
- By default, setting configuration is limited to Admin users.
- At your request, this can be changed to allow setting config by all users.
- setting `views` impacts both Accessibility and UI Coverage reports
- setting viewFilters impacts both Accessibility and UI Coverage reports
- setting elementFilters impacts both Accessibility and UI Coverage reports if set
  at the root of the configuration
- setting significantAttributes impacts both Cypress Accessibility and UI Coverage
  reports if set at the root of the configuration
- setting attributeFilters impacts both Cypress Accessibility and UI Coverage reports
  if set at the root of the configuration
- Command names are case-sensitive and must match exactly as they appear in your test
  code.
- The additional commands are merged with the default interaction commands, the default
  commands are not replaced.
- Only commands that actually interact with DOM elements should be included in this
  configuration.
- Elements that don't match any selector will have all interaction commands tracked
  (default behavior).
- If an element matches multiple selectors, commands from all matching rules will
  be allowed. A high degree of specificity for these selectors is recommended.
- Certain attributes are prioritized by Cypress Accessibility for element identification.
- Exclude irrelevant or dynamically generated attributes to reduce noise in Cypress
  Accessibility reports.
- Cypress provides a top-line percentage score to give a general sense of accessibility
  for your project.
- This rule requires that runs be recorded using Cypress version 13.14.0 or above.
- Interactive elements that are not semantically correct often don't appear in automated
  scans, but do appear in manual testing.
- Incremental progress is key to long-term accessibility improvements.
- Achieving milestones provides a clear finish line for you and your team.
- Maintaining accessibility is an ongoing effort requiring organization-wide commitment.
- Cypress Accessibility serves as an early warning system.
- Cypress Accessibility reports are generated server-side in Cypress Cloud, based
  on test artifacts uploaded during execution.
- Cypress is commonly used in CI and local development workflows.
- It can also be used to monitor production or staging environments through scheduled
  tests.
- By default, setting configuration is limited to Admin users. At your request, this
  can be changed to allow setting config by all users.
- setting `viewFilters` impacts both Accessibility and UI Coverage reports
- Do not check this module in as a dependency. You should install it separately outside
  of your normal module installation.
- Use --force to get the latest version.
- Results API supports fetching results in various CI environments.
errors:
- Commands must exit
- Timeouts can occur waiting for the system command to exist
- 'cy.go() requires the response to be content-type: text/html.'
- cy.go() requires the response code to be 2xx after following redirects.
- cy.go() can time out waiting for the page to fire its load event.
- Cypress does not have a cy.hover() command.
- If cy.hover() is used, an error will display and redirect you to the documentation.
- '404 Not Found: Request was not found at the specified endpoint'
- '500 Internal Server Error: Server encountered an unexpected condition'
- 'File does not exist: will fail if the specified file does not exist'
- 'REQUEST_LIMIT_EXCEEDED: Throttle API calls or reduce frequency'
- 'QUERY_TIMEOUT: Break down filters or add selectivity'
- '401 Unauthorized: Recheck OAuth scopes or token expiration'
- Throw error if Cypress command used in callback
- No matching request found
- Timeout error when waiting for route response
- Errors, cannot be chained off 'cy'
- Errors, 'getCookies' does not yield DOM element
- Probably errors, because get('div') yields multiple elements
- 'defaultCommandTimeout: The default command timeout is 4 seconds.'
- 'Element not found: Ensure the element is not hidden or disabled'
- 'Element not actionable: Check if the element is covered or detached'
- You cannot add error handling to Cypress commands.
- No test retries will not count as extra test results in your billing.
- '`REQUEST_LIMIT_EXCEEDED`: Throttle API calls or reduce frequency'
- '`QUERY_TIMEOUT`: Break down filters or add selectivity'
- '`401 Unauthorized`: Recheck OAuth scopes or token expiration'
- 'No spec files found: Verify the spec path.'
- 'Invalid configuration file: Ensure the path is correct.'
- Cypress cannot execute commands outside a running test
- '`cy...()` failed because the page updated'
- '`cy...()` failed because the element cannot be interacted with'
- '`cy...()` failed because the element is currently animating'
- The test has finished but Cypress still has commands in its queue
- '`cy.visit()` failed because you are attempting to visit a second unique domain'
- '`cy.visit()` failed because you are attempting to visit a different origin domain'
- '`cy.visit()` succeeded, but commands are timing out'
- '`Cypress.addParentCommand()` / `Cypress.addDualCommand()` / `Cypress.addChildCommand()`
  has been removed and replaced by `Cypress.Commands.add()`'
- Cypress detected that you invoked one or more `cy` commands in a custom command
  but returned a different value.
- Cypress detected that you invoked one or more `cy` commands but returned a different
  value.
- Cypress detected that you returned a promise from a command while also invoking
  one or more cy commands in that promise.
- Cypress detected that you returned a promise in a test, but also invoked one or
  more `cy` commands inside of that promise.
- Cypress detected that you returned a promise in a test, but also invoked a done
  callback.
- 'CypressError: Timed out retrying: Expected to find element: ‘…’, but never found
  it.'
- You passed the `--record` flag but did not provide us your Record Key.
- The `cypress ci` command has been deprecated
- A Cached Cypress Binary Could not be found
- Incorrect usage of `--ci-build-id` flag
- The `--ci-build-id`, `--group`, `--tag`, `--parallel`, or `--auto-cancel-after-failures`
  flags can only be used when recording
- We could not determine a unique CI build ID
- Group name has already been used for this run
- Cannot parallelize tests across environments
- Cannot parallelize tests in this group
- Run must pass `--parallel` flag
- Cannot parallelize tests on a stale run
- Run is not accepting any new groups
- The Cypress App could not be unzipped. This is most likely because the maximum path
  length is being exceeded on your system.
- 'error: unknown option: --auto-cancel-after-failures'
- --auto-cancel-after-failures must be an integer or false
- --auto-cancel-after-failures passed without a Business or Enterprise Cloud account
- You passed the --auto-cancel-after-failures flag for a run that is already in progress
- Cypress detected a cross-origin error happened on page load
- Cypress detected that an uncaught error was thrown from a cross-origin script.
- The browser process running your tests just exited unexpectedly
- Whoops, we can't run your tests
- Cannot connect to API server
- Cypress detected policy settings on your computer that may cause issues
- Uncaught exceptions from your application
- --record flag but did not provide us your Record Key
- cypress ci command has been deprecated
- 'Failed to upload after X attempts error: This error occurs when the Test Replay
  data is not uploaded to the Cloud due to network issues.'
- 'Network or HTTP error: These errors indicate that Cypress could not establish a
  connection to upload.'
- 'Invalid or missing Test Replay upload URL: Specs that take longer than the run
  timeout will not successfully upload.'
- Exposing a record key could allow unauthorized access to project.
- If a record key is exposed, delete it and create a new one.
- No interactive elements with semantic issues were detected during the test run.
- Interactive elements with potential semantic issues were detected.
- Installation may fail if the package is checked in as a dependency.
- Ensure the correct version of Cypress is installed.
auth_info:
  mentioned_objects:
  - OauthToken
  - AuthProvider
  - NamedCredential
client:
  base_url: https://www.cypress.io
  headers:
    Accept: application/json
source_metadata: null
