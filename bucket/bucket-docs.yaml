resources:
- name: features
  endpoint:
    path: /features
    method: GET
    data_selector: features
- name: features_evaluated
  endpoint:
    path: /features/evaluated
    method: GET
    data_selector: features
- name: features_enabled
  endpoint:
    path: /features/enabled
    method: GET
    data_selector: features
- name: features_events
  endpoint:
    path: /features/events
    method: POST
    data_selector: success
- name: user
  endpoint:
    path: /user
    method: POST
    data_selector: success
- name: company
  endpoint:
    path: /company
    method: POST
    data_selector: success
- name: event
  endpoint:
    path: /event
    method: POST
    data_selector: success
- name: feedback
  endpoint:
    path: /feedback
    method: POST
    data_selector: success
- name: feature
  endpoint:
    path: /features
    method: GET
    data_selector: data
- name: flags
  endpoint:
    path: /api/flags
    method: GET
    data_selector: flags
- name: flags
  endpoint:
    path: /api/flags
    method: GET
    data_selector: flags
- name: flags
  endpoint:
    path: /flags
    method: GET
    data_selector: flags
- name: feedback
  endpoint:
    path: /feedback
    method: POST
    data_selector: feedback
    params: {}
- name: feedback
  endpoint:
    path: /feedback
    method: POST
    data_selector: data
    params: {}
- name: flags
  endpoint:
    path: /api/v1/flags
    method: GET
    data_selector: flags
    params: {}
- name: feedback
  endpoint:
    path: /feedback
    method: POST
    data_selector: feedback
    params: {}
- name: features
  endpoint:
    path: /features
    method: GET
    data_selector: features
- name: features_enabled
  endpoint:
    path: /features/enabled
    method: GET
    data_selector: features
- name: features_evaluated
  endpoint:
    path: /features/evaluated
    method: GET
    data_selector: object
    params: {}
- name: features_events
  endpoint:
    path: /features/events
    method: POST
    data_selector: object
    params: {}
- name: user
  endpoint:
    path: /user
    method: POST
    data_selector: object
    params: {}
- name: company
  endpoint:
    path: /company
    method: POST
    data_selector: object
    params: {}
- name: event
  endpoint:
    path: /event
    method: POST
    data_selector: object
    params: {}
- name: feedback
  endpoint:
    path: /feedback
    method: POST
    data_selector: object
    params: {}
- name: bulk
  endpoint:
    path: /bulk
    method: POST
    data_selector: object
    params: {}
- name: flags
  endpoint:
    path: /api/flags
    method: GET
    data_selector: flags
- name: apps
  endpoint:
    path: /api/apps
    method: GET
    data_selector: apps
- name: feature_flags
  endpoint:
    path: /api/v1/feature_flags
    method: GET
    data_selector: data
    params: {}
- name: notifications
  endpoint:
    path: /api/notifications
    method: GET
- name: Agent
  endpoint:
    path: /agent
    method: POST
    data_selector: data
    params: {}
- name: Broadcast
  endpoint:
    path: /broadcast
    method: POST
    data_selector: data
    params: {}
- name: Template
  endpoint:
    path: /template
    method: POST
    data_selector: data
    params: {}
- name: features
  endpoint:
    path: /api/features
    method: GET
    data_selector: features
    params: {}
- name: features
  endpoint:
    path: /api/v1/features
    method: GET
    data_selector: features
- name: s3_bucket
  endpoint:
    path: /s3/buckets/
    method: GET
- name: feature_rollouts
  endpoint:
    path: /product-handbook/feature-rollouts
    method: GET
    data_selector: features
    params: {}
- name: access_rules
  endpoint:
    path: /api/access_rules
    method: GET
    data_selector: rules
    params: {}
- name: app
  endpoint:
    path: /v1/apps
    method: GET
    data_selector: data
    params: {}
- name: environments
  endpoint:
    path: /environments
    method: GET
    data_selector: environments
    params: {}
- name: app
  endpoint:
    path: /api/apps
    method: GET
    data_selector: data
    params: {}
- name: environment
  endpoint:
    path: /api/environments
    method: GET
    data_selector: data
    params: {}
- name: features
  endpoint:
    path: /api/v1/features
    method: GET
    data_selector: features
    params: {}
- name: company_segments
  endpoint:
    path: /api/v1/company_segments
    method: GET
    data_selector: segments
    params: {}
- name: companies
  endpoint:
    path: /api/companies
    method: GET
- name: users
  endpoint:
    path: /api/users
    method: GET
- name: track_events
  endpoint:
    path: /api/track_events
    method: GET
- name: feedback
  endpoint:
    path: /api/feedback
    method: GET
- name: feature_events
  endpoint:
    path: /api/feature_events
    method: GET
- name: feature
  endpoint:
    path: /api/features
    method: GET
    data_selector: features
    params: {}
- name: feature_view
  endpoint:
    path: /api/feature_views
    method: GET
    data_selector: features
    params: {}
- name: company
  endpoint:
    path: /api/company
    method: GET
    data_selector: data
    params: {}
- name: user
  endpoint:
    path: /api/user
    method: GET
    data_selector: attributes
    params: {}
- name: track_event
  endpoint:
    path: /api/track_event
    method: POST
    data_selector: eventData
    params: {}
- name: feature_events
  endpoint:
    path: /api/feature_events
    method: POST
    data_selector: events
    params: {}
- name: feedback
  endpoint:
    path: /api/feedback
    method: POST
    data_selector: feedback
    params: {}
- name: filter
  endpoint:
    path: /filters
    method: GET
    data_selector: filters
    params: {}
- name: feature_flags
  endpoint:
    path: /api/feature_flags
    method: GET
    data_selector: data
    params: {}
- name: feature_flags
  endpoint:
    path: /api/v1/feature_flags
    method: GET
    data_selector: data
    params: {}
- name: features
  endpoint:
    path: /features
    method: GET
    data_selector: features
- name: features_evaluated
  endpoint:
    path: /features/evaluated
    method: GET
    data_selector: features
- name: features_enabled
  endpoint:
    path: /features/enabled
    method: GET
    data_selector: features
- name: features_events
  endpoint:
    path: /features/events
    method: POST
    data_selector: success
- name: user
  endpoint:
    path: /user
    method: POST
    data_selector: success
- name: company
  endpoint:
    path: /company
    method: POST
    data_selector: success
- name: event
  endpoint:
    path: /event
    method: POST
    data_selector: success
- name: feedback
  endpoint:
    path: /feedback
    method: POST
    data_selector: success
notes:
- Secret keys should stay secret and only be used on your backend services.
- For POST requests, the API only accepts JSON. The Content-Type header must be set
  to application/json.
- Requires setup of connected app in reflag
- Requires setup of connected app in Reflag
- Uses OAuth2 with refresh token — requires setup of connected app in reflag
- Some objects may return nulls in deeply nested fields
- Reflag determines which flags are active based on user and company context.
- Automated feedback collection mode enabled by default
- The toolbar will automatically appear on localhost
- Automated feedback surveys are enabled by default.
- The default feedback UI behavior is a dialog placed in the bottom right corner of
  the viewport.
- Either score or comment must be defined in order to pass validation in the Reflag
  API.
- Secret keys are meant for use in server side SDKs only.
- Uses OAuth2 with refresh token — requires setup of connected app in api
- API keys are bound to one app only.
- MCP is in a very early stage of development, and changes are frequent.
- Uses OAuth2 with refresh token — requires setup of connected app in Reflag
- Slack notifications are only supported in the Production environment.
- GitHub integration is available on Pro and Enterprise plans
- With the PostHog integration, you can attach feature access properties to users
  and groups on PostHog.
- Data should start flowing immediately after enabling the destination.
- With the Amplitude integration, you can attach feature access properties to users
  and groups on Amplitude.
- Create a new restricted user to access the designated S3 bucket.
- Replace <user_arn> and <bucket_arn> with the real values from your AWS account.
- Release stages let you easily signal features' rollout progress to your team
- 'New apps come with 4 default release stages: In development, Internal, Beta, and
  General availability'
- Feature access configuration is under the Access tab in each feature.
- Rollout percentages are stable and consistent across features.
- There are three checks that must pass for the feature to be safe to archive
- There are two automations that can be enabled at the feature level
- Works best when using the React SDK, but stay tuned for improved Node.js support
- Collects end-user feedback on new feature releases to catch and fix issues faster.
- The feedback widget will automatically close if a user doesn't interact with it.
- Reflag's feature flagging is purpose-built for B2B with native support for gating
  features at the company subscription level.
- Segments are reusable lists of companies created based off one or more conditions.
- All new users invited to the organization will be assigned the Viewer role by default,
  ensuring they have appropriate access without making any changes.
- Environments can be managed through the Settings page.
- Authentication requires a connected app setup in Reflag.
- 'Each new app comes with three predefined environments: Production, Staging and
  Development.'
- Deleted environments cannot be restored, and all collected data for that environment
  will essentially be lost.
- Do not include PII data when sending in company attributes. It is recommended that
  any sensitive data should be hashed or otherwise not included.
- Do not include PII data when sending in user attributes. It is recommended that
  any sensitive data should be hashed or otherwise not included.
- Do not include PII data when sending in event attributes.
- It is recommended that any sensitive data should be hashed or otherwise not included.
- Feature events are generated automatically by Reflag in some cases.
- Rate-limiting is applied to avoid unnecessary traffic.
- Feedback can be submitted manually or automatically when feedback surveys are enabled.
- Release stages in Reflag are entities that allow setting up app-wide feature access
  targeting rules.
- Filters can be aggregated into logical expressions.
- Invalid filters may not give expected results.
- Reflag supports OpenFeature
- Ensure that the connected app is properly set up for OAuth2 authentication.
- Need some help? Chat with us
errors:
- '400: Invalid request body'
- '500: Retry the request'
- '401 Unauthorized: Recheck OAuth scopes or token expiration'
- 'REQUEST_LIMIT_EXCEEDED: Throttle API calls or reduce frequency'
- 'QUERY_TIMEOUT: Break down filters or add selectivity'
- '401 Unauthorized: Check API Key or permissions'
- 'Flag Evaluation Failures: If flag evaluation fails, isEnabled will be false'
- 'Network Errors: Network errors during tracking are logged but don''t affect your
  application'
- 'Missing Context: The SDK tracks missing context fields but continues operation'
- '400 Bad request: Check query parameters'
- '401 Unauthorized: Check API key or permissions.'
- 'REQUEST_LIMIT_EXCEEDED: Throttle API calls or reduce frequency.'
- 'QUERY_TIMEOUT: Break down filters or add selectivity.'
- '401 Unauthorized: Recheck OAuth scopes or token expiration.'
- '403 Forbidden: Check your API key permissions.'
- 'INVALID_TOKEN: Check if the token is valid.'
- 'FORBIDDEN: Ensure you have the right permissions.'
- 'REQUEST_LIMIT_EXCEEDED: Rate limit exceeded, reduce frequency of requests.'
- 'INVALID_CONTEXT: Context provided for feature evaluation is invalid.'
- '400 Bad Request: Check the filter parameters.'
- '401 Unauthorized: Ensure the token is valid.'
- '404 Not Found: The requested resource does not exist.'
- '401 Unauthorized: Check client credentials or token expiration.'
- '404 Not Found: Verify the feature flag identifier.'
auth_info:
  mentioned_objects:
  - REFLAG_SECRET_KEY
  - OauthToken
  - AuthProvider
client:
  base_url: https://reflag.com
  auth:
    type: oauth2
source_metadata: null
