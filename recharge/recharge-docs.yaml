resources:
- name: checkout
  endpoint:
    path: /checkouts/{checkout_id}
    method: GET
    data_selector: checkout
- name: token_information
  endpoint:
    path: /token_information
    method: GET
    data_selector: token_information
- name: refund_charge
  endpoint:
    path: /charges/{charge_id}/refund
    method: POST
    data_selector: charge
- name: addresses_count
  endpoint:
    path: /addresses/count
    method: GET
    data_selector: count
    params:
      created_at_max: ''
      created_at_min: ''
      discount_code: ''
      discount_id: ''
      updated_at_max: ''
      updated_at_min: ''
- name: checkout
  endpoint:
    path: /checkouts/{checkout_id}
    method: GET
    data_selector: checkout
- name: refund_charge
  endpoint:
    path: /charges/{charge_id}/refund
    method: POST
    data_selector: charge
    params:
      amount: '{{ amount }}'
      full_refund: '{{ full_refund }}'
- name: charge
  endpoint:
    path: /charge
    method: GET
    data_selector: charge
- name: charge
  endpoint:
    path: /charges/{id}
    method: GET
- name: addresses
  endpoint:
    path: /addresses
    method: GET
- name: charges
  endpoint:
    path: /charges
    method: GET
- name: charge
  endpoint:
    path: /charges/{id}
    method: GET
- name: charges
  endpoint:
    path: /charges
    method: GET
    data_selector: charges
    params:
      address_id: string
      created_at_max: string
      created_at_min: string
      customer_id: string
      date: string
      date_max: string
      date_min: string
      discount_code: string
      discount_id: string
      ids: string
      shopify_order_id: string
      status: string
      subscription_id: string
      updated_at_max: string
      updated_at_min: string
- name: charges
  endpoint:
    path: /charges
    method: GET
    data_selector: charges
    params:
      limit: 250
- name: addresses
  endpoint:
    path: /addresses
    method: GET
    data_selector: addresses
    params:
      limit: 250
- name: addresses
  endpoint:
    path: /addresses
    method: GET
    params:
      include: customer,discount,payment_methods,subscriptions
- name: addresses_by_id
  endpoint:
    path: /addresses/:id
    method: GET
    params:
      include: customer,discount,payment_methods,subscriptions
- name: charges
  endpoint:
    path: /charges
    method: GET
    params:
      include: metafields
- name: charges_by_id
  endpoint:
    path: /charges/:id
    method: GET
    params:
      include: metafields
- name: customers
  endpoint:
    path: /customers
    method: GET
    params:
      include: addresses,metafields,payment_methods,subscriptions
- name: customers_by_id
  endpoint:
    path: /customers/:id
    method: GET
    params:
      include: addresses,metafields,payment_methods,subscriptions
- name: orders
  endpoint:
    path: /orders
    method: GET
    params:
      include: customer,metafields
- name: orders_by_id
  endpoint:
    path: /orders/:id
    method: GET
    params:
      include: customer,metafields
- name: products
  endpoint:
    path: /products
    method: GET
    params:
      include: collections,metafields
- name: products_by_id
  endpoint:
    path: /products/:id
    method: GET
    params:
      include: collections,metafields
- name: subscriptions
  endpoint:
    path: /subscriptions
    method: GET
    params:
      include: address,metafields
- name: subscriptions_by_id
  endpoint:
    path: /subscriptions/:id
    method: GET
    params:
      include: address,metafields
- name: checkout
  endpoint:
    path: /checkouts/{checkout_id}
    method: GET
    data_selector: checkout
- name: refund_charge
  endpoint:
    path: /charges/{charge_id}/refund
    method: POST
    data_selector: charge
    params:
      amount: required
      full_refund: optional
- name: skip_charge
  endpoint:
    path: /charges/{charge_id}/skip
    method: POST
    data_selector: charge
- name: checkout
  endpoint:
    path: /checkouts/{checkout_id}
    method: GET
- name: refund_charge
  endpoint:
    path: /charges/{charge_id}/refund
    method: POST
    data_selector: charge
- name: charges_process
  endpoint:
    path: /charges/{id}/process
    method: POST
- name: addresses
  endpoint:
    path: /addresses
    method: GET
    data_selector: addresses
- name: charges
  endpoint:
    path: /charges
    method: GET
    data_selector: charges
- name: capture_payment
  endpoint:
    path: /charges/{charge_id}/capture_payment
    method: POST
    data_selector: charge
- name: checkout
  endpoint:
    method: POST
- name: checkout
  endpoint:
    path: /services/data/vXX.X/sobjects/Checkout
    method: GET
    data_selector: checkout
- name: addresses
  endpoint:
    path: /addresses
    method: GET
- name: async_batches
  endpoint:
    path: /async_batches
    method: GET
- name: async_batches_tasks
  endpoint:
    path: /async_batches/:id/tasks
    method: GET
- name: charges
  endpoint:
    path: /charges
    method: GET
- name: customers
  endpoint:
    path: /customers
    method: GET
- name: discounts
  endpoint:
    path: /discounts
    method: GET
- name: orders
  endpoint:
    path: /orders
    method: GET
- name: products
  endpoint:
    path: /products
    method: GET
- name: subscriptions
  endpoint:
    path: /subscriptions
    method: GET
- name: checkout
  endpoint:
    path: /checkouts
    method: POST
    data_selector: checkout
    params: {}
- name: checkout
  endpoint:
    path: /checkouts/{checkout_id}
    method: GET
    data_selector: checkout
- name: checkout
  endpoint:
    path: /checkouts/{checkout_id}
    method: PUT
    data_selector: checkout
    params:
      analytics_data: utm_params
      billing_address: null
      buyer_accepts_marketing: false
      currency: USD
      discount_code: POPUS_25
      email: somerandomemail@test.com
      external_checkout_id: <cart_token>
      external_checkout_source: headless
      line_items:
      - product_id: 4546063663207
        quantity: 6
        variant_id: 3844924611
      note: null
      note_attributes: null
      partial_shipping: false
      phone: null
      shipping_address:
      - address1: 6419 Ocean Front Walk
        address2: Apt 2
        city: Los Angeles
        country: United States
        first_name: Novak
        last_name: Djokovic
        phone: 1-800-800-8000
        province: California
        zip: '90293'
- name: shipping_rates
  endpoint:
    path: /checkouts/{id}/shipping_rates
    method: GET
    data_selector: shipping_rates
- name: checkout_charge
  endpoint:
    path: /checkouts/{id}/charge
    method: POST
    data_selector: checkout_charge
- name: customer
  endpoint:
    path: /
    method: POST
    data_selector: customer
    params:
      billing_address1: Required
      billing_city: Required
      billing_country: Required
      billing_first_name: Required
      billing_last_name: Required
      billing_province: Required
      billing_zip: Required
      email: Required
      first_name: Required
      last_name: Required
- name: customer
  endpoint:
    path: /customers/{customer_id}
    method: GET
    data_selector: customer
- name: update_customer
  endpoint:
    path: /customers/{customer_id}
    method: PUT
    data_selector: customer
- name: customer
  endpoint:
    path: /customers
    method: GET
    data_selector: customers
    params:
      limit: 50
      page: 1
- name: delete_customer
  endpoint:
    path: /customers/{customer_id}
    method: DELETE
- name: customers_count
  endpoint:
    path: /customers/count
    method: GET
    data_selector: count
    params:
      created_at_max: '2019-11-11'
      created_at_min: '2019-11-11'
      updated_at_max: '2019-11-11'
      updated_at_min: '2019-11-11'
      status: ACTIVE
- name: payment_sources
  endpoint:
    path: /customers/18819267/payment_sources
    method: GET
    data_selector: payment_sources
    params:
      cardholder_name: string
      card_brand: string
      card_exp_month: string
      card_exp_year: string
      card_last4: string
      customer_id: string
      has_card_error_in_dunning: 'true'
      processor_name: string
      status: active
      status_reason: string
- name: batch_task
  endpoint:
    path: /async_batches/<batch_id>/tasks
    method: POST
    data_selector: tasks
- name: discount
  endpoint:
    path: /discounts
    method: POST
    data_selector: discount
    params:
      applies_to_product_type: ONETIME
      channel_settings:
        api:
          can_apply: false
        checkout_page:
          can_apply: true
        customer_portal:
          can_apply: true
        merchant_portal:
          can_apply: false
      code: Discount
      discount_type: percentage
      duration: usage_limit
      duration_usage_limit: 1
      ends_at: '2023-12-31'
      starts_at: '2018-05-16'
      status: enabled
      usage_limit: 1
      value: 12
- name: Address
  endpoint:
    params:
      sort_by:
        default: id-desc
        options:
        - id-asc
        - id-desc
        - updated_at-asc
        - updated_at-desc
- name: Async Batch
  endpoint:
    params:
      sort_by:
        default: id-desc
        options:
        - id-asc
        - id-desc
        - created_at-asc
        - created_at-desc
- name: Charge
  endpoint:
    params:
      sort_by:
        default: id-asc
        options:
        - id-asc
        - id-desc
        - created_at-asc
        - created_at-desc
        - updated_at-asc
        - updated_at-desc
        - charge_date-asc
        - charge_date-desc
- name: Customer
  endpoint:
    params:
      sort_by:
        default: id-desc
        options:
        - id-asc
        - id-desc
        - created_at-asc
        - created_at-desc
        - updated_at-asc
        - updated_at-desc
- name: Discount
  endpoint:
    params:
      sort_by:
        default: id-desc
        options:
        - id-asc
        - id-desc
        - created_at-asc
        - created_at-desc
        - updated_at-asc
        - updated_at-desc
- name: Metafield
  endpoint:
    params:
      sort_by:
        default: id-desc
        options:
        - id-asc
        - id-desc
        - updated_at-asc
        - updated_at-desc
- name: Onetime
  endpoint:
    params:
      sort_by:
        default: id-desc
        options:
        - id-asc
        - id-desc
        - created_at-asc
        - created_at-desc
        - updated_at-asc
        - updated_at-desc
- name: Order
  endpoint:
    params:
      sort_by:
        default: id-desc
        options:
        - id-asc
        - id-desc
        - created_at-asc
        - created_at-desc
        - shipped_date-asc
        - shipped_date-desc
        - shipping_date-asc
        - shipping_date-desc
        - updated_at-asc
        - updated_at-desc
- name: Product
  endpoint:
    params:
      sort_by:
        default: id-desc
        options:
        - id-asc
        - id-desc
        - created_at-asc
        - created_at-desc
        - updated_at-asc
        - updated_at-desc
        - title-asc
        - title-desc
- name: Subscription
  endpoint:
    params:
      sort_by:
        default: id-desc
        options:
        - id-asc
        - id-desc
        - created_at-asc
        - created_at-desc
        - updated_at-asc
        - updated_at-desc
- name: Webhook
  endpoint:
    params:
      sort_by:
        default: id-desc
        options:
        - id-asc
        - id-desc
- name: tasks
  endpoint:
    path: /async_batches/<batch_id>/tasks
    method: POST
    params:
    - batch_id
- name: discount_update
  endpoint:
    path: /discounts/{discount_id}
    method: PUT
    data_selector: discount
    params:
      starts_at: datetime
      ends_at: datetime
      status: string
      usage_limit: integer
      channel_settings:
        api:
          can_apply: boolean
        checkout_page:
          can_apply: boolean
        customer_portal:
          can_apply: boolean
        merchant_portal:
          can_apply: boolean
- name: discount_delete
  endpoint:
    path: /discounts/{discount_id}
    method: DELETE
- name: discount_list
  endpoint:
    path: /discounts
    method: GET
- name: discounts
  endpoint:
    path: /discounts
    method: GET
    data_selector: discounts
    params:
      created_at_max: ''
      created_at_min: ''
      discount_code: ''
      discount_type: ''
      ids: ''
      limit: '50'
      page: ''
      status: ''
      updated_at_max: ''
      updated_at_min: ''
- name: discounts_count
  endpoint:
    path: /discounts/count
    method: GET
    data_selector: count
    params:
      created_at_max: ''
      created_at_min: ''
      discount_type: ''
      status: ''
      updated_at_max: ''
      updated_at_min: ''
- name: apply_discount
  endpoint:
    path: /addresses/{address_id}/apply_discount
    method: POST
    data_selector: address
    params:
      discount_code: string
      discount_id: integer
- name: apply_discount_to_charge
  endpoint:
    path: /charges/{charge_id}/apply_discount
    method: POST
    data_selector: charge
    params:
      discount_code: string
      discount_id: integer
- name: task
  endpoint:
    path: /async_batches/<batch_id>/tasks
    method: POST
    data_selector: tasks
- name: remove_discount_address
  endpoint:
    path: /addresses/<address_id>/remove_discount/
    method: POST
- name: remove_discount_charge
  endpoint:
    path: /charges/<charge_id>/remove_discount/
    method: POST
- name: task
  endpoint:
    path: /async_batches/<batch_id>/tasks
    method: POST
    data_selector: tasks
- name: metafield
  endpoint:
    path: /metafields
    method: POST
    params:
      description: customer_phone_number
      key: phone_number
      namespace: personal_info
      owner_id: 18301938
      owner_resource: customer
      value: '3103103101'
      value_type: integer
- name: batch_task
  endpoint:
    path: /async_batches/<batch_id>/tasks
    method: POST
    data_selector: tasks
    params: {}
- name: address
  endpoint:
    path: /address
    method: GET
    data_selector: address
    params:
      incremental: updated_at
- name: metafield_update
  endpoint:
    path: /metafields/{id}
    method: PUT
    data_selector: metafield
- name: metafield_delete
  endpoint:
    path: /metafields/{id}
    method: DELETE
- name: metafield_list
  endpoint:
    path: /metafields
    method: GET
- name: metafields
  endpoint:
    path: /metafields
    method: GET
    data_selector: metafields
    params:
      owner_resource: owner_resource
      limit: 50
      owner_id: owner_idstring
      namespace: namespacestring
- name: task
  endpoint:
    path: /async_batches/<batch_id>/tasks
    method: POST
    data_selector: tasks
- name: metafields_count
  endpoint:
    path: /metafields/count
    method: GET
    params:
      namespace: string
      owner_id: string
      owner_resource: string
- name: customer_notifications
  endpoint:
    path: /customers/{customer_id}/notifications
    method: POST
    params:
      type: integer
      template_type: string
      template_vars: object
- name: batch_task
  endpoint:
    path: /async_batches/<batch_id>/tasks
    method: POST
    data_selector: tasks
    params:
      batch_id: integer
      body: object
      completed_at: datetime
      created_at: datetime
      deleted_at: datetime
      id: integer
      queued_at: datetime
      result: string
      started_at: datetime
      status: string
      updated_at: datetime
- name: onetime
  endpoint:
    data_selector: onetime
- name: batch_task
  endpoint:
    path: /async_batches/<batch_id>/tasks
    method: POST
    params:
      batch_type:
      - discount_create
- name: onetime
  endpoint:
    path: /onetimes/{id}
    method: GET
- name: onetime_update
  endpoint:
    path: /onetimes/{id}
    method: PUT
    params:
      next_charge_scheduled_at: boolean
      price: integer
      product_title: string
      properties: string
      quantity: integer
      shopify_variant_id: integer
      sku: string
      variant_title: string
- name: onetime_delete
  endpoint:
    path: /onetimes/{id}
    method: DELETE
- name: onetimes
  endpoint:
    path: /onetimes
    method: GET
    data_selector: onetimes
    params:
      address_id: string
      created_at_max: string
      created_at_min: string
      customer_id: string
      shopify_customer_id: string
      updated_at_max: string
      updated_at_min: string
- name: order
  endpoint:
    path: /orders
    method: GET
    data_selector: order
    params: {}
- name: address
  endpoint:
    path: /customers/3411137/addresses
    method: POST
    data_selector: address
- name: order
  endpoint:
    path: /orders/{order_id}
    method: GET
    data_selector: order
- name: order
  endpoint:
    path: /orders/{order_id}
    method: PUT
    data_selector: order
    params:
      billing_address:
        province: required
        address1: optional
        address2: optional
        city: optional
        company: optional
        country: optional
        first_name: optional
        last_name: optional
        phone: optional
        zip: optional
      shipping_address:
        province: required
        address1: optional
        address2: optional
        city: optional
        company: optional
        country: optional
        first_name: optional
        last_name: optional
        phone: optional
        zip: optional
      customer:
        first_name: optional
        last_name: required
        email: optional
- name: delete_order
  endpoint:
    path: /orders/{order_id}
    method: DELETE
- name: list_orders
  endpoint:
    path: /orders
    method: GET
- name: orders
  endpoint:
    path: /orders
    method: GET
    data_selector: orders
    params:
      address_id: string
      charge_id: string
      created_at_max: string
      created_at_min: string
      customer_id: string
      ids: string
      limit: '50'
      page: '1'
      scheduled_at_max: string
      scheduled_at_min: string
      shipping_date: string
      shopify_order_id: string
      has_external_order: string
      status: string
      subscription_id: string
      updated_at_max: string
      updated_at_min: string
- name: order_count
  endpoint:
    path: /orders/count
    method: GET
    data_selector: count
    params:
      address_id: string
      charge_id: string
      created_at_min: string
      created_at_max: string
      customer_id: string
      scheduled_at_min: string
      scheduled_at_max: string
      shopify_customer_id: string
      status: string
      subscription_id: string
      updated_at_min: string
      updated_at_max: string
- name: change_order_date
  endpoint:
    path: /7271806/change_date
    method: POST
    data_selector: order
    params:
      scheduled_at: ISO 8601 date format
- name: change_order_variant
  endpoint:
    path: /orders/{order_id}/update_shopify_variant/{shopify_variant_id}
    method: POST
    data_selector: order
    params:
      new_shopify_variant_id: integer
      shopify_variant_id: string
- name: tasks
  endpoint:
    path: /async_batches/<batch_id>/tasks
    method: POST
- name: order_delay
  endpoint:
    path: /orders/{id}/delay
    method: POST
- name: batch_task
  endpoint:
    path: /async_batches/<batch_id>/tasks
    method: POST
    params:
      batch_type: discount_create
- name: address
  endpoint:
    path: /addresses/{address_id}
    method: GET
    data_selector: address
- name: product
  endpoint:
    path: /products
    method: GET
    data_selector: product
    params: {}
- name: product
  endpoint:
    path: /products
    method: POST
    data_selector: product
    params:
      discount_amount: null
      discount_type: percentage
      shopify_product_id: null
      charge_interval_frequency: null
      modifiable_properties: null
      order_interval_frequency_options: null
      order_interval_unit: null
      storefront_purchase_options: null
- name: product
  endpoint:
    path: /products/{product_id}
    method: GET
    data_selector: product
    params:
      charge_interval_frequency: string
      created_at: string
      cutoff_day_of_month: string
      cutoff_day_of_week: string
      discount_amount: string
      discount_type: string
      expire_after_specific_number_of_charges: string
      handle: string
      images: string
      modifiable_properties: string
      number_charges_until_expiration: string
      order_day_of_month: string
      order_day_of_week: string
      order_interval_frequency: string
      order_interval_frequency_options: string
      order_interval_unit: string
      product_id: string
      shopify_product_id: integer
      storefront_purchase_options: string
      title: string
      updated_at: string
- name: update_product
  endpoint:
    path: /products/{product_id}
    method: PUT
    data_selector: product
    params:
      charge_interval_frequency: charge_interval_frequency
      collection_id: collection_id
      cutoff_day_of_month: cutoff_day_of_month
      cutoff_day_of_week: cutoff_day_of_week
      discount_amount: discount_amount
      discount_type: discount_type
      expire_after_specific_number_of_charges: expire_after_specific_number_of_charges
      modifiable_properties: modifiable_properties
      order_day_of_month: order_day_of_month
      order_day_of_week: order_day_of_week
      order_interval_frequency_options: order_interval_frequency_options
      order_interval_unit: order_interval_unit
      shopify_product_id: shopify_product_id
      storefront_purchase_options: storefront_purchase_options
- name: delete_product
  endpoint:
    path: /products/{product_id}
    method: DELETE
- name: list_products
  endpoint:
    path: /products
    method: GET
- name: products
  endpoint:
    path: /products
    method: GET
    data_selector: products
    params:
      limit: '50'
- name: product_count
  endpoint:
    path: /products/count
    method: GET
    data_selector: count
- name: shop
  endpoint:
    path: /shop
    method: GET
    data_selector: shop
    params:
      id: integer
      created_at: datetime
      currency: string
      domain: string
      email: string
      iana_timezone: string
      my_shopify_domain: string
      name: string
      shop_phone: string
      shop_email: string
      timezone: string
      updated_at: datetime
- name: task
  endpoint:
    path: /async_batches/{batch_id}/tasks
    method: POST
    params:
      batch_id: integer
      body: object
      completed_at: datetime
      created_at: datetime
      deleted_at: datetime
      id: integer
      queued_at: datetime
      result: string
      started_at: datetime
      status: string
      updated_at: datetime
- name: shipping_countries
  endpoint:
    path: /shop/shipping_countries
    method: GET
    data_selector: shipping_countries
    params:
      id: integer
      code: string
      country_id: integer
      name: string
- name: batch_task
  endpoint:
    path: /async_batches/<batch_id>/tasks
    method: POST
- name: subscription
  endpoint:
    path: /subscriptions
    method: GET
    data_selector: subscription
- name: update_address
  endpoint:
    path: /addresses/{address_id}
    method: PUT
- name: delete_address
  endpoint:
    path: /addresses/{address_id}
    method: DELETE
- name: subscription
  endpoint:
    path: /
    method: POST
    data_selector: subscription
    params:
      address_id: '{{ address_id }}'
      charge_interval_frequency: '{{ charge_interval_frequency }}'
      next_charge_scheduled_at: '{{ next_charge_scheduled_at }}'
      order_interval_frequency: '{{ order_interval_frequency }}'
      order_interval_unit: '{{ order_interval_unit }}'
      properties: '{{ properties }}'
      shopify_variant_id: '{{ shopify_variant_id }}'
      shopify_product_id: '{{ shopify_product_id }}'
      quantity: '{{ quantity }}'
- name: subscription
  endpoint:
    path: /subscriptions/{subscription_id}
    method: GET
    data_selector: subscription
- name: batch_task
  endpoint:
    path: /async_batches/<batch_id>/tasks
    method: POST
    params:
      batch_type: '{batch_type}'
      tasks: '{tasks_list}'
- name: delete_subscription
  endpoint:
    path: /subscriptions/{subscription_id}
    method: DELETE
- name: subscriptions
  endpoint:
    path: /subscriptions
    method: GET
    data_selector: subscriptions
    params:
      limit: '50'
      include_onetimes: 'true'
      created_at_min: '2018-10-10'
      created_at_max: '2019-10-16'
      customer_id: <customer_id>
      address_id: <address_id>
      shopify_customer_id: <shopify_customer_id>
      shopify_variant_id: <shopify_variant_id>
      status: ACTIVE,CANCELLED,EXPIRED
      updated_at_min: <updated_at_min>
      updated_at_max: <updated_at_max>
      ids: <ids>
- name: subscriptions_count
  endpoint:
    path: /subscriptions/count
    method: GET
    params:
      address_id: string
      created_at_max: string
      created_at_min: string
      customer_id: string
      shopify_customer_id: string
      shopify_variant_id: string
      status: string
      updated_at_max: string
      updated_at_min: string
- name: subscription_set_next_charge_date
  endpoint:
    path: /subscriptions/{subscription_id}/set_next_charge_date
    method: POST
    params:
      date: string
- name: change_subscription_address
  endpoint:
    path: /subscriptions/{subscription_id}/change_address
    method: POST
    params:
      address_id: '{{ address_id }}'
      next_charge_scheduled_at: '{{ next_charge_scheduled_at }}'
- name: batch_tasks
  endpoint:
    path: /async_batches/<batch_id>/tasks
    method: POST
    data_selector: tasks
    params:
      batch_id: 21
- name: activate_subscription
  endpoint:
    path: /subscriptions/{subscription_id}/activate
    method: POST
    data_selector: subscription
- name: batch_tasks
  endpoint:
    path: /async_batches/<batch_id>/tasks
    method: POST
- name: bulk_update_subscriptions
  endpoint:
    path: /addresses/{address_id}/subscriptions-bulk
    method: PUT
    data_selector: subscriptions
    params:
      max_items_per_request: 20
- name: addresses
  endpoint:
    path: /addresses
    method: GET
    data_selector: addresses
- name: charges
  endpoint:
    path: /charges
    method: GET
    data_selector: charges
- name: customers
  endpoint:
    path: /customers
    method: GET
    data_selector: customers
- name: discounts
  endpoint:
    path: /discounts
    method: GET
    data_selector: discounts
- name: orders
  endpoint:
    path: /orders
    method: GET
    data_selector: orders
- name: products
  endpoint:
    path: /products
    method: GET
    data_selector: products
- name: subscriptions
  endpoint:
    path: /subscriptions
    method: GET
    data_selector: subscriptions
- name: bulk_delete_subscriptions
  endpoint:
    path: /addresses/{address_id}/subscriptions-bulk
    method: DELETE
    params:
      send_email: 0
- name: webhook
  endpoint:
    path: /webhooks
    method: POST
    data_selector: webhook
- name: webhook
  endpoint:
    path: /webhooks
    method: POST
    data_selector: webhook
    params:
      address: https://request.in/foo
      topic: subscription/created
- name: webhook_retrieval
  endpoint:
    path: /webhooks/{webhook_id}
    method: GET
    data_selector: webhook
- name: webhook_update
  endpoint:
    path: /webhooks/{webhook_id}
    method: PUT
    data_selector: webhook
    params:
      address: https://request.in/foo
- name: webhook_deletion
  endpoint:
    path: /webhooks/{webhook_id}
    method: DELETE
    data_selector: {}
- name: list_webhooks
  endpoint:
    path: /webhooks
    method: GET
    data_selector: webhooks
- name: test_webhook
  endpoint:
    path: /webhooks/<webhook_id>/test
    method: POST
- name: customer_activated
  endpoint:
    path: /webhooks/customer/activated
    method: GET
- name: customer_created
  endpoint:
    path: /webhooks/customer/created
    method: GET
- name: customer_deactivated
  endpoint:
    path: /webhooks/customer/deactivated
    method: GET
- name: customer_payment_method_updated
  endpoint:
    path: /webhooks/customer/payment_method_updated
    method: GET
- name: customer_updated
  endpoint:
    path: /webhooks/customer/updated
    method: GET
- name: customer_deleted
  endpoint:
    path: /webhooks/customer/deleted
    method: GET
- name: onetime_created
  endpoint:
    path: /webhooks/onetime/created
    method: GET
- name: onetime_deleted
  endpoint:
    path: /webhooks/onetime/deleted
    method: GET
- name: onetime_updated
  endpoint:
    path: /webhooks/onetime/updated
    method: GET
- name: order_created
  endpoint:
    path: /webhooks/order/created
    method: GET
- name: order_deleted
  endpoint:
    path: /webhooks/order/deleted
    method: GET
- name: order_processed
  endpoint:
    path: /webhooks/order/processed
    method: GET
- name: order_upcoming
  endpoint:
    path: /webhooks/order/upcoming
    method: GET
- name: order_updated
  endpoint:
    path: /webhooks/order/updated
    method: GET
- name: plan_created
  endpoint:
    path: /webhooks/plan/created
    method: GET
- name: plan_deleted
  endpoint:
    path: /webhooks/plan/deleted
    method: GET
- name: plan_updated
  endpoint:
    path: /webhooks/plan/updated
    method: GET
- name: subscription
  endpoint:
    path: /subscriptions
    method: POST
- name: async_batch
  endpoint:
    path: /async_batches
    method: POST
- name: async_batch
  endpoint:
    path: /async_batches
    method: POST
    data_selector: async_batch
    params:
      batch_type: desired_batch_type
- name: async_batch
  endpoint:
    path: /async_batches/<batch_id>
    method: GET
    data_selector: async_batch
- name: async_batches
  endpoint:
    path: /async_batches
    method: GET
    data_selector: async_batches
- name: process_async_batch
  endpoint:
    path: /async_batches/<batch_id>/process
    method: POST
    data_selector: async_batch
- name: async_batch_tasks
  endpoint:
    path: /discounts
    method: POST
    data_selector: async_batch_tasks
- name: batch_task
  endpoint:
    path: /async_batches/<batch_id>/tasks
    method: POST
    params:
      batch_type: batch_id
- name: batch_tasks
  endpoint:
    path: /async_batches/{batch_id}/tasks
    method: GET
    data_selector: async_batch_tasks
    params:
      ids: idsstring
- name: checkout
  endpoint:
    path: /checkouts/{checkout_id}
    method: GET
    data_selector: checkout
- name: token_information
  endpoint:
    path: /token_information
    method: GET
    data_selector: token_information
- name: refund_charge
  endpoint:
    path: /charges/{charge_id}/refund
    method: POST
    data_selector: charge
    params:
      amount: 11.0
      full_refund: true
- name: addresses_count
  endpoint:
    path: /addresses/count
    method: GET
    data_selector: count
    params:
      created_at_max: created_at_max
      created_at_min: created_at_min
      discount_code: discount_code
      discount_id: discount_id
      updated_at_max: updated_at_max
      updated_at_min: updated_at_min
- name: checkout
  endpoint:
    path: /checkouts/{checkout_id}
    method: GET
    data_selector: checkout
- name: refund_charge
  endpoint:
    path: /charges/{charge_id}/refund
    method: POST
    data_selector: charge
- name: charge
  endpoint:
    path: /charges
    method: GET
    data_selector: charge
    params: {}
- name: charge
  endpoint:
    path: /charges/{id}
    method: GET
    data_selector: charge
- name: addresses
  endpoint:
    path: /addresses
    method: GET
- name: charges
  endpoint:
    path: /charges
    method: GET
- name: charges
  endpoint:
    path: /
    method: GET
    data_selector: charges
    params:
      address_id: '{{address_id}}'
      created_at_max: '{{created_at_max}}'
      created_at_min: '{{created_at_min}}'
      customer_id: '{{customer_id}}'
      date: '{{date}}'
      date_max: '{{date_max}}'
      date_min: '{{date_min}}'
      discount_code: '{{discount_code}}'
      discount_id: '{{discount_id}}'
      ids: '{{ids}}'
      shopify_order_id: '{{shopify_order_id}}'
      status: '{{status}}'
      subscription_id: '{{subscription_id}}'
      updated_at_max: '{{updated_at_max}}'
      updated_at_min: '{{updated_at_min}}'
- name: addresses
  endpoint:
    path: /addresses
    method: GET
- name: charges
  endpoint:
    path: /charges
    method: GET
- name: customers_addresses
  endpoint:
    path: /customers/:id/addresses
    method: GET
- name: addresses
  endpoint:
    path: /addresses
    method: GET
    params:
      include: customer,discount,payment_methods,subscriptions
- name: addresses_by_id
  endpoint:
    path: /addresses/:id
    method: GET
    params:
      include: customer,discount,payment_methods,subscriptions
- name: charges
  endpoint:
    path: /charges
    method: GET
    params:
      include: metafields
- name: charges_by_id
  endpoint:
    path: /charges/:id
    method: GET
    params:
      include: metafields
- name: customers
  endpoint:
    path: /customers
    method: GET
    params:
      include: addresses,metafields,payment_methods,subscriptions
- name: customers_by_id
  endpoint:
    path: /customers/:id
    method: GET
    params:
      include: addresses,metafields,payment_methods,subscriptions
- name: orders
  endpoint:
    path: /orders
    method: GET
    params:
      include: customer,metafields
- name: orders_by_id
  endpoint:
    path: /orders/:id
    method: GET
    params:
      include: customer,metafields
- name: products
  endpoint:
    path: /products
    method: GET
    params:
      include: collections,metafields
- name: products_by_id
  endpoint:
    path: /products/:id
    method: GET
    params:
      include: collections,metafields
- name: subscriptions
  endpoint:
    path: /subscriptions
    method: GET
    params:
      include: address,metafields
- name: subscriptions_by_id
  endpoint:
    path: /subscriptions/:id
    method: GET
    params:
      include: address,metafields
- name: checkout
  endpoint:
    path: /checkouts/{checkout_id}
    method: GET
    data_selector: checkout
- name: charge_refund
  endpoint:
    path: /charges/{charge_id}/refund
    method: POST
    data_selector: charge
    params:
      amount: null
      full_refund: null
- name: charge_skip
  endpoint:
    path: /charges/{charge_id}/skip
    method: POST
    data_selector: charge
    params:
      subscription_id: single string or list
- name: checkout
  endpoint:
    path: /checkouts/{checkout_id}
    method: GET
    data_selector: checkout
- name: refund_charge
  endpoint:
    path: /charges/{charge_id}/refund
    method: POST
    data_selector: charge
- name: charge_process
  endpoint:
    path: /charges/{id}/process
    method: POST
    data_selector: charge
- name: address
  endpoint:
    path: /addresses
    method: GET
    data_selector: addresses
    params:
      limit: 250
      page: 1
- name: charge
  endpoint:
    path: /charges
    method: GET
    data_selector: charges
    params:
      limit: 250
      status: queued
- name: capture_payment
  endpoint:
    path: /charges/{charge_id}/capture_payment
    method: POST
- name: checkout
  endpoint:
    path: undefined
    method: undefined
    data_selector: undefined
    params: undefined
- name: checkout
  endpoint:
    path: /checkout
    method: POST
    data_selector: checkout
- name: addresses
  endpoint:
    path: /addresses
    method: GET
- name: async_batches
  endpoint:
    path: /async_batches
    method: GET
- name: async_batches_tasks
  endpoint:
    path: /async_batches/:id/tasks
    method: GET
- name: charges
  endpoint:
    path: /charges
    method: GET
- name: customers
  endpoint:
    path: /customers
    method: GET
- name: discounts
  endpoint:
    path: /discounts
    method: GET
- name: orders
  endpoint:
    path: /orders
    method: GET
- name: products
  endpoint:
    path: /products
    method: GET
- name: subscriptions
  endpoint:
    path: /subscriptions
    method: GET
- name: checkout
  endpoint:
    path: /
    method: POST
    data_selector: checkout
- name: checkout
  endpoint:
    path: /checkouts/{checkout_id}
    method: GET
    data_selector: checkout
- name: checkout
  endpoint:
    path: /checkouts/{checkout_id}
    method: PUT
    data_selector: checkout
    params:
      analytics_data: utm_params
      billing_address: null
      buyer_accepts_marketing: boolean
      currency: string
      discount_code: string
      email: string
      external_checkout_id: string
      external_checkout_source: string
      line_items: array
      note: string
      partial_shipping: boolean
      phone: string
      shipping_address: object
- name: shipping_rates
  endpoint:
    path: /checkouts/{checkout_id}/shipping_rates
    method: GET
    data_selector: shipping_rates
- name: checkout_charge
  endpoint:
    path: /checkouts/{checkout_id}/charge
    method: POST
    data_selector: checkout_charge
    params:
      payment_processor: stripe
      payment_token: <payment_token>
      payment_type: CREDIT_CARD
- name: customer
  endpoint:
    path: /customers
    method: POST
    params:
      accepts_marketing: boolean
      billing_address1: string
      billing_city: string
      billing_country: string
      billing_first_name: string
      billing_last_name: string
      email: string
      first_name: string
      last_name: string
- name: customer
  endpoint:
    path: /customers/{customer_id}
    method: GET
    data_selector: customer
- name: update_customer
  endpoint:
    path: /customers/{customer_id}
    method: PUT
    data_selector: customer
    params:
      billing_zip: required if billing_country is US
- name: delete_customer
  endpoint:
    path: /customers/{customer_id}
    method: DELETE
- name: list_customers
  endpoint:
    path: /customers
    method: GET
    data_selector: customers
    params:
      limit: '250'
      page: '1'
- name: count_customers
  endpoint:
    path: /customers/count
    method: GET
- name: customers_count
  endpoint:
    path: /customers/count
    method: GET
    params:
      created_at_max: date
      created_at_min: date
      updated_at_max: date
      updated_at_min: date
      status: ACTIVE or INACTIVE
- name: payment_sources
  endpoint:
    path: /customers/{customer_id}/payment_sources
    method: GET
    params:
      cardholder_name: string
      card_brand: string
      card_exp_month: string
      card_exp_year: string
      card_last4: string
      customer_id: string
      has_card_error_in_dunning: true or false
      status: active or failed
      status_reason: string
- name: task
  endpoint:
    path: /async_batches/<batch_id>/tasks
    method: POST
    params:
    - batch_idinteger
    - bodyobject
    - completed_atdatetime
    - created_atdatetime
    - deleted_atdatetime
    - idinteger
    - queued_atdatetime
    - resultstring
    - started_atdatetime
    - statusstring
    - updated_atdatetime
- name: discount
  endpoint:
    path: /discounts
    method: POST
    data_selector: discount
    params:
      applies_to_id: integer
      applies_to_product_type: string
      channel_settings: object
      code: string
      created_at: datetime
      discount_type: string
      duration: string
      duration_usage_limit: integer
      ends_at: datetime
      first_time_customer_restriction: string
      once_per_customer: boolean
      prerequisite_subtotal_min: integer
      starts_at: datetime
      status: string
      usage_limit: integer
      value: string
- name: Address
  endpoint:
    params:
      sort_by:
        default: id-desc
        options:
        - id-asc
        - id-desc
        - updated_at-asc
        - updated_at-desc
- name: Async Batch
  endpoint:
    params:
      sort_by:
        default: id-desc
        options:
        - id-asc
        - id-desc
        - created_at-asc
        - created_at-desc
- name: Charge
  endpoint:
    params:
      sort_by:
        default: id-asc
        options:
        - id-asc
        - id-desc
        - created_at-asc
        - created_at-desc
        - updated_at-asc
        - updated_at-desc
        - charge_date-asc
        - charge_date-desc
- name: Customer
  endpoint:
    params:
      sort_by:
        default: id-desc
        options:
        - id-asc
        - id-desc
        - created_at-asc
        - created_at-desc
        - updated_at-asc
        - updated_at-desc
- name: Discount
  endpoint:
    params:
      sort_by:
        default: id-desc
        options:
        - id-asc
        - id-desc
        - created_at-asc
        - created_at-desc
        - updated_at-asc
        - updated_at-desc
- name: Metafield
  endpoint:
    params:
      sort_by:
        default: id-desc
        options:
        - id-asc
        - id-desc
        - updated_at-asc
        - updated_at-desc
- name: Onetime
  endpoint:
    params:
      sort_by:
        default: id-desc
        options:
        - id-asc
        - id-desc
        - created_at-asc
        - created_at-desc
        - updated_at-asc
        - updated_at-desc
- name: Order
  endpoint:
    params:
      sort_by:
        default: id-desc
        options:
        - id-asc
        - id-desc
        - created_at-asc
        - created_at-desc
        - shipped_date-asc
        - shipped_date-desc
        - shipping_date-asc
        - shipping_date-desc
        - updated_at-asc
        - updated_at-desc
- name: Product
  endpoint:
    params:
      sort_by:
        default: id-desc
        options:
        - id-asc
        - id-desc
        - created_at-asc
        - created_at-desc
        - updated_at-asc
        - updated_at-desc
        - title-asc
        - title-desc
- name: Subscription
  endpoint:
    params:
      sort_by:
        default: id-desc
        options:
        - id-asc
        - id-desc
        - created_at-asc
        - created_at-desc
        - updated_at-asc
        - updated_at-desc
- name: Webhook
  endpoint:
    params:
      sort_by:
        default: id-desc
        options:
        - id-asc
        - id-desc
- name: task
  endpoint:
    path: /async_batches/<batch_id>/tasks
    method: POST
    data_selector: tasks
- name: update_discount
  endpoint:
    path: /discounts/{discount_id}
    method: PUT
    data_selector: discount
- name: delete_discount
  endpoint:
    path: /discounts/{discount_id}
    method: DELETE
- name: list_discounts
  endpoint:
    path: /discounts
    method: GET
    data_selector: discounts
- name: discounts
  endpoint:
    path: /discounts
    method: GET
    data_selector: discounts
    params:
      created_at_max: '2017-10-01'
      created_at_min: '2017-10-01'
      discount_code: Discount
      discount_type: percentage
      ids: comma separated values
      limit: '50'
      status: enabled
      updated_at_max: '2017-10-01'
      updated_at_min: '2017-10-01'
- name: discounts_count
  endpoint:
    path: /discounts/count
    method: GET
    params:
      created_at_max: '2019-11-11'
      created_at_min: '2019-11-10'
      discount_type: percentage
      status: enabled
      updated_at_max: '2019-11-11'
      updated_at_min: '2019-11-10'
- name: apply_discount_to_address
  endpoint:
    path: /addresses/{address_id}/apply_discount
    method: POST
    params:
      discount_code: string
      discount_id: integer
- name: apply_discount_to_charge
  endpoint:
    path: /charges/{charge_id}/apply_discount
    method: POST
    params:
      discount_code: string
      discount_id: integer
- name: batch_task
  endpoint:
    path: /async_batches/<batch_id>/tasks
    method: POST
- name: remove_discount_address
  endpoint:
    path: /addresses/<address_id>/remove_discount/
    method: POST
- name: remove_discount_charge
  endpoint:
    path: /charges/<charge_id>/remove_discount/
    method: POST
- name: task
  endpoint:
    path: /async_batches/<batch_id>/tasks
    method: POST
    data_selector: tasks
    params:
      batch_id: '{{ batch_id }}'
      body: '{{ task_request_body }}'
      completed_at: '{{ completed_at_datetime }}'
      created_at: '{{ created_at_datetime }}'
      deleted_at: '{{ deleted_at_datetime }}'
      id: '{{ task_id }}'
      queued_at: '{{ queued_at_datetime }}'
      result: '{{ task_result_body }}'
      started_at: '{{ started_at_datetime }}'
      status: '{{ task_status }}'
      updated_at: '{{ updated_at_datetime }}'
- name: metafield
  endpoint:
    path: /metafields
    method: POST
    data_selector: metafield
    params:
      description: customer_phone_number
      key: phone_number
      namespace: personal_info
      owner_id: 18301938
      owner_resource: customer
      value_type: integer
      value: '3103103101'
- name: metafield_retrieve
  endpoint:
    path: /metafields/{id}
    method: GET
    data_selector: metafield
- name: task
  endpoint:
    path: /async_batches/<batch_id>/tasks
    method: POST
- name: address
  endpoint:
    path: /addresses
    method: GET
    data_selector: address
    params: {}
- name: update_metafield
  endpoint:
    path: /metafields/{id}
    method: PUT
    data_selector: metafield
- name: delete_metafield
  endpoint:
    path: /metafields/{id}
    method: DELETE
- name: list_metafields
  endpoint:
    path: /metafields
    method: GET
- name: metafields
  endpoint:
    path: /metafields
    method: GET
    data_selector: metafields
    params:
      limit: 50
      owner_resource: owner_resource
      owner_id: owner_id
      namespace: namespace
- name: batch_task
  endpoint:
    path: /async_batches/<batch_id>/tasks
    method: POST
- name: metafields_count
  endpoint:
    path: /metafields/count
    method: GET
    params:
      owner_resource: '{{ owner_resource }}'
      namespace: '{{ namespace }}'
      owner_id: '{{ owner_id }}'
- name: customer_notifications
  endpoint:
    path: /customers/{customer_id}/notifications
    method: POST
    params:
      type: email
      template_type: '{{ template_type }}'
      template_vars: '{{ template_vars }}'
- name: task
  endpoint:
    path: /async_batches/<batch_id>/tasks
    method: POST
    data_selector: tasks
- name: onetime
  endpoint:
    path: /onetime
    method: GET
    data_selector: onetime
- name: batch_task
  endpoint:
    path: /async_batches/<batch_id>/tasks
    method: POST
    data_selector: tasks
- name: onetime
  endpoint:
    path: /onetimes/16909886
    method: GET
    data_selector: onetime
- name: update_onetime
  endpoint:
    path: /onetimes/16909886
    method: PUT
    data_selector: onetime
- name: delete_onetime
  endpoint:
    path: /onetimes/16665185
    method: DELETE
    data_selector: ''
- name: onetimes
  endpoint:
    path: /onetimes
    method: GET
    data_selector: onetimes
    params:
      limit: 50
      address_id: '{{address_id}}'
      created_at_max: '{{created_at_max}}'
      created_at_min: '{{created_at_min}}'
      customer_id: '{{customer_id}}'
      shopify_customer_id: '{{shopify_customer_id}}'
      updated_at_max: '{{updated_at_max}}'
      updated_at_min: '{{updated_at_min}}'
- name: order
  endpoint:
    path: /admin/api/2022-07/orders.json
    method: GET
    data_selector: orders
    params:
      incremental: updated_at
- name: address
  endpoint:
    path: /customers/{customer_id}/addresses
    method: POST
    data_selector: address
    params:
      address1: '{{ address1 }}'
      address2: '{{ address2 }}'
      city: '{{ city }}'
      company: '{{ company }}'
      country: '{{ country }}'
      first_name: '{{ first_name }}'
      last_name: '{{ last_name }}'
      phone: '{{ phone }}'
      presentment_currency: '{{ presentment_currency }}'
      province: '{{ province }}'
      zip: '{{ zip }}'
      note_attributes:
      - name: '{{ custom name }}'
        value: '{{ custom value }}'
      shipping_lines_override:
      - code: '{{ Standard Shipping }}'
        price: '{{ 0.00 }}'
        title: '{{ Standard Shipping }}'
- name: order
  endpoint:
    path: /orders/{order_id}
    method: GET
    data_selector: order
- name: order
  endpoint:
    path: /orders/{order_id}
    method: PUT
    data_selector: order
    params:
      billing_address:
        province:
          required: true
        address1:
          optional: true
        address2:
          optional: true
        city:
          optional: true
        company:
          optional: true
        country:
          optional: true
        first_name:
          optional: true
        last_name:
          optional: true
        phone:
          optional: true
        zip:
          optional: true
      shipping_address:
        province:
          required: true
        address1:
          optional: true
        address2:
          optional: true
        city:
          optional: true
        company:
          optional: true
        country:
          optional: true
        first_name:
          optional: true
        last_name:
          optional: true
        phone:
          optional: true
        zip:
          optional: true
      customer:
        first_name:
          optional: true
        last_name:
          required: true
        email:
          optional: true
- name: delete_order
  endpoint:
    path: /orders/{order_id}
    method: DELETE
- name: list_orders
  endpoint:
    path: /orders
    method: GET
- name: orders
  endpoint:
    path: /orders
    method: GET
    data_selector: orders
    params:
      address_id: string
      charge_id: string
      created_at_max: string
      created_at_min: string
      customer_id: string
      ids: string
      limit: '50'
      page: '1'
      scheduled_at_max: string
      scheduled_at_min: string
      shipping_date: string
      shopify_order_id: string
      has_external_order: string
      status: string
      subscription_id: string
      updated_at_max: string
      updated_at_min: string
- name: order_count
  endpoint:
    path: /orders/count
    method: GET
    data_selector: count
    params:
      address_id: string
      charge_id: string
      created_at_min: string
      created_at_max: string
      customer_id: string
      scheduled_at_min: string
      scheduled_at_max: string
      shopify_customer_id: string
      status: string
      subscription_id: string
      updated_at_min: string
      updated_at_max: string
- name: order_date_change
  endpoint:
    path: /orders/7271806/change_date
    method: POST
    data_selector: order
    params:
      scheduled_at: '2018-07-01T00:00:00'
- name: update_shopify_variant
  endpoint:
    path: /orders/{order_id}/update_shopify_variant/{shopify_variant_id}
    method: POST
    data_selector: order
- name: batch_task
  endpoint:
    path: /async_batches/<batch_id>/tasks
    method: POST
- name: order_delay
  endpoint:
    path: /orders/{id}/delay
    method: POST
- name: batch_task
  endpoint:
    path: /async_batches/<batch_id>/tasks
    method: POST
    params:
      batch_id: integer
      body: object
      completed_at: datetime
      created_at: datetime
      deleted_at: datetime
      id: integer
      queued_at: datetime
      result: string
      started_at: datetime
      status: string
      updated_at: datetime
- name: address
  endpoint:
    path: /addresses/{address_id}
    method: GET
    data_selector: address
- name: product
  endpoint:
    path: /products
    method: GET
    data_selector: product
    params: {}
- name: product
  endpoint:
    path: /products
    method: POST
    data_selector: product
    params:
      shopify_product_id: 4354268856408
      discount_type: percentage
      storefront_purchase_options: subscription_only
      order_interval_unit: month
- name: product
  endpoint:
    path: /products/{product_id}
    method: GET
    data_selector: product
    params:
      charge_interval_frequency: string
      created_at: string
      cutoff_day_of_month: string
      cutoff_day_of_week: string
      discount_amount: string
      discount_type: string
      expire_after_specific_number_of_charges: string
      handle: string
      images: array
      modifiable_properties: array
      number_charges_until_expiration: string
      order_day_of_month: string
      order_day_of_week: string
      order_interval_frequency: string
      order_interval_frequency_options: string
      order_interval_unit: string
      product_id: string
      shopify_product_id: integer
      storefront_purchase_options: string
      title: string
      updated_at: string
- name: update_product
  endpoint:
    path: /products/{product_id}
    method: PUT
    params:
      charge_interval_frequency: integer
      collection_id: integer
      cutoff_day_of_month: string
      cutoff_day_of_week: string
      discount_amount: string
      discount_type: string
      expire_after_specific_number_of_charges: string
      modifiable_properties: string
      order_day_of_month: string
      order_day_of_week: string
      order_interval_frequency_options: string
      order_interval_unit: string
      shopify_product_id: integer
      storefront_purchase_options: string
- name: delete_product
  endpoint:
    path: /products/{product_id}
    method: DELETE
- name: list_products
  endpoint:
    path: /products
    method: GET
- name: products
  endpoint:
    path: /products
    method: GET
    data_selector: products
    params:
      limit: 50
- name: product_count
  endpoint:
    path: /products/count
    method: GET
    data_selector: count
- name: shop_info
  endpoint:
    path: /shop
    method: GET
- name: shop
  endpoint:
    path: /shop
    method: GET
    data_selector: shop
    params:
      id: integer
      created_at: datetime
      currency: string
      domain: string
      email: string
      iana_timezone: string
      my_shopify_domain: string
      name: string
      shop_phone: string
      shop_email: string
      timezone: string
      updated_at: datetime
- name: batch_task
  endpoint:
    path: /async_batches/<batch_id>/tasks
    method: POST
- name: shipping_countries
  endpoint:
    path: /shop/shipping_countries
    method: GET
    data_selector: shipping_countries
    params:
      id: idinteger
      code: codestring
      country_id: country_idinteger
      name: namestring
- name: batch_task
  endpoint:
    path: /async_batches/<batch_id>/tasks
    method: POST
    data_selector: tasks
- name: subscription
  endpoint:
    path: /subscription
    method: GET
    data_selector: subscription
    params:
      incremental: updated_at
- name: address_update
  endpoint:
    path: /addresses/{address_id}
    method: PUT
    data_selector: address
    params:
      country: countrystring
      zip: zipstring
- name: address_delete
  endpoint:
    path: /addresses/{address_id}
    method: DELETE
- name: subscription
  endpoint:
    path: /subscriptions
    method: POST
    data_selector: subscription
    params:
      address_id: 48563471
      charge_interval_frequency: 30
      next_charge_scheduled_at: 2020-07-15
      order_interval_frequency: 15
      order_interval_unit: day
      properties:
      - name: Colour
        value: Yellow
      - name: Bottle Material
        value: Glass
      shopify_variant_id: 32165284380775
      shopify_product_id: 4546063663207
      quantity: 3
- name: subscription
  endpoint:
    path: /subscriptions/{subscription_id}
    method: GET
    data_selector: subscription
- name: batch_task
  endpoint:
    path: /async_batches/<batch_id>/tasks
    method: POST
    params:
      batch_id: integer
      body: object
      completed_at: datetime
      created_at: datetime
      deleted_at: datetime
      id: integer
      queued_at: datetime
      result: string
      started_at: datetime
      status: string
      updated_at: datetime
- name: delete_subscription
  endpoint:
    path: /subscriptions/<subscription_id>
    method: DELETE
    params:
      send_email: boolean
- name: subscriptions
  endpoint:
    path: /subscriptions
    method: GET
    data_selector: subscriptions
    params:
      limit: 50
      include_onetimes: true
      status: ACTIVE,CANCELLED,EXPIRED
- name: subscription_count
  endpoint:
    path: /subscriptions/count
    method: GET
- name: subscription_count
  endpoint:
    path: /subscriptions/count
    method: GET
    params:
      address_id: string
      created_at_max: string
      created_at_min: string
      customer_id: string
      shopify_customer_id: string
      shopify_variant_id: string
      status: string
      updated_at_max: string
      updated_at_min: string
- name: set_next_charge_date
  endpoint:
    path: /subscriptions/{subscription_id}/set_next_charge_date
    method: POST
    params:
      date: string
- name: change_subscription_address
  endpoint:
    path: /subscriptions/{subscription_id}/change_address
    method: POST
    data_selector: subscription
    params:
      address_id: address_id
      next_charge_scheduled_at: next_charge_scheduled_at
- name: batch_task
  endpoint:
    path: /async_batches/<batch_id>/tasks
    method: POST
    data_selector: tasks
    params:
      batch_id: integer
      body: object
      completed_at: datetime
      created_at: datetime
      deleted_at: datetime
      id: integer
      queued_at: datetime
      result: string
      started_at: datetime
      status: string
      updated_at: datetime
- name: activate_subscription
  endpoint:
    path: /subscriptions/{subscription_id}/activate
    method: POST
    data_selector: subscription
- name: tasks
  endpoint:
    path: /async_batches/<batch_id>/tasks
    method: POST
    data_selector: tasks
- name: subscriptions_bulk_update
  endpoint:
    path: /addresses/{address_id}/subscriptions-bulk
    method: PUT
    data_selector: subscriptions
- name: addresses
  endpoint:
    path: /addresses
    method: GET
- name: charges
  endpoint:
    path: /charges
    method: GET
- name: customers
  endpoint:
    path: /customers
    method: GET
- name: discounts
  endpoint:
    path: /discounts
    method: GET
- name: orders
  endpoint:
    path: /orders
    method: GET
- name: products
  endpoint:
    path: /products
    method: GET
- name: subscriptions
  endpoint:
    path: /subscriptions
    method: GET
- name: bulk_delete_subscriptions
  endpoint:
    path: /addresses/{address_id}/subscriptions-bulk
    method: DELETE
    data_selector: subscriptions
- name: webhook
  endpoint:
    path: /webhooks
    method: POST
    data_selector: webhook
- name: create_webhook
  endpoint:
    path: /
    method: POST
    data_selector: webhook
- name: retrieve_webhook
  endpoint:
    path: /{id}
    method: GET
    data_selector: webhook
- name: update_webhook
  endpoint:
    path: /{id}
    method: PUT
    data_selector: webhook
- name: delete_webhook
  endpoint:
    path: /{id}
    method: DELETE
    data_selector: {}
- name: webhooks
  endpoint:
    path: /webhooks
    method: GET
    data_selector: webhooks
- name: test_webhook
  endpoint:
    path: /webhooks/<webhook_id>/test
    method: POST
- name: customer_activated
  endpoint:
    path: /webhooks/customer/activated
    method: POST
- name: customer_created
  endpoint:
    path: /webhooks/customer/created
    method: POST
- name: customer_deactivated
  endpoint:
    path: /webhooks/customer/deactivated
    method: POST
- name: customer_payment_method_updated
  endpoint:
    path: /webhooks/customer/payment_method_updated
    method: POST
- name: customer_updated
  endpoint:
    path: /webhooks/customer/updated
    method: POST
- name: customer_deleted
  endpoint:
    path: /webhooks/customer/deleted
    method: POST
- name: onetime_created
  endpoint:
    path: /webhooks/onetime/created
    method: POST
- name: onetime_deleted
  endpoint:
    path: /webhooks/onetime/deleted
    method: POST
- name: onetime_updated
  endpoint:
    path: /webhooks/onetime/updated
    method: POST
- name: order_created
  endpoint:
    path: /webhooks/order/created
    method: POST
- name: order_deleted
  endpoint:
    path: /webhooks/order/deleted
    method: POST
- name: order_processed
  endpoint:
    path: /webhooks/order/processed
    method: POST
- name: order_upcoming
  endpoint:
    path: /webhooks/order/upcoming
    method: POST
- name: order_updated
  endpoint:
    path: /webhooks/order/updated
    method: POST
- name: plan_created
  endpoint:
    path: /webhooks/plan/created
    method: POST
- name: plan_deleted
  endpoint:
    path: /webhooks/plan/deleted
    method: POST
- name: plan_updated
  endpoint:
    path: /webhooks/plan/updated
    method: POST
- name: subscription_webhooks
  endpoint:
    method: GET
    params:
      permissions: read_subscriptions
- name: store_webhooks
  endpoint:
    method: GET
    params:
      permissions: read_store
- name: async_batch_operations
  endpoint:
    method: POST
    path: /async_batches
    params:
      batch_type: desired_batch_type
      max_tasks: 1000
      max_tasks_per_batch: 10000
- name: async_batch
  endpoint:
    path: /async_batches
    method: POST
    data_selector: async_batch
    params:
      batch_type: desired_batch_type
- name: retrieve_batch
  endpoint:
    path: /async_batches/{id}
    method: GET
    data_selector: async_batch
- name: batch
  endpoint:
    path: /async_batches/<batch_id>
    method: GET
    data_selector: async_batch
- name: batches
  endpoint:
    path: /async_batches
    method: GET
    data_selector: async_batches
- name: process_batch
  endpoint:
    path: /async_batches/<batch_id>/process
    method: POST
    data_selector: async_batch
- name: async_batch_tasks
  endpoint:
    path: /discounts
    method: POST
    data_selector: async_batch_tasks
    params:
      incremental: updated_at
- name: batch_task
  endpoint:
    path: /async_batches/<batch_id>/tasks
    method: POST
    params:
      batch_id: integer
      body: object
      completed_at: datetime
      created_at: datetime
      deleted_at: datetime
      id: integer
      queued_at: datetime
      result: string
      started_at: datetime
      status: string
      updated_at: datetime
- name: async_batch_tasks
  endpoint:
    path: /async_batches/{batch_id}/tasks
    method: GET
    data_selector: async_batch_tasks
- name: checkout
  endpoint:
    path: /checkouts/{checkout_id}
    method: GET
- name: token_information
  endpoint:
    path: /token_information
    method: GET
    data_selector: token_information
- name: refund_charge
  endpoint:
    path: /charges/{charge_id}/refund
    method: POST
    data_selector: charge
    params:
      amount: '{{ amount }}'
      full_refund: '{{ full_refund }}'
- name: addresses_count
  endpoint:
    path: /addresses/count
    method: GET
    data_selector: count
    params:
      created_at_max: date
      created_at_min: date
      discount_code: string
      discount_id: string
      updated_at_max: date
      updated_at_min: date
- name: checkout
  endpoint:
    path: /checkouts/{checkout_id}
    method: GET
    data_selector: checkout
- name: refund_charge
  endpoint:
    path: /charges/{charge_id}/refund
    method: POST
    data_selector: charge
- name: charge
  endpoint:
    path: /charge
    method: GET
    data_selector: charge
- name: charge
  endpoint:
    path: /charges/{id}
    method: GET
    data_selector: charge
- name: addresses
  endpoint:
    path: /addresses
    method: GET
- name: charges
  endpoint:
    path: /charges
    method: GET
- name: customers
  endpoint:
    path: /customers
    method: GET
- name: charges
  endpoint:
    path: /charges
    method: GET
    data_selector: charges
    params:
      address_id: string
      created_at_max: string
      created_at_min: string
      customer_id: string
      date: string
      date_max: string
      date_min: string
      discount_code: string
      discount_id: string
      ids: string
      limit: string
      page: string
      shopify_order_id: string
      status: string
      subscription_id: string
      updated_at_max: string
      updated_at_min: string
- name: addresses
  endpoint:
    path: /addresses
    method: GET
- name: charges
  endpoint:
    path: /charges
    method: GET
- name: customers_addresses
  endpoint:
    path: /customers/:id/addresses
    method: GET
- name: addresses
  endpoint:
    path: /addresses
    method: GET
    params:
      include: customer,discount,payment_methods,subscriptions
- name: addresses_by_id
  endpoint:
    path: /addresses/:id
    method: GET
    params:
      include: customer,discount,payment_methods,subscriptions
- name: charges
  endpoint:
    path: /charges
    method: GET
    params:
      include: metafields
- name: charges_by_id
  endpoint:
    path: /charges/:id
    method: GET
    params:
      include: metafields
- name: customers
  endpoint:
    path: /customers
    method: GET
    params:
      include: addresses,metafields,payment_methods,subscriptions
- name: customers_by_id
  endpoint:
    path: /customers/:id
    method: GET
    params:
      include: addresses,metafields,payment_methods,subscriptions
- name: orders
  endpoint:
    path: /orders
    method: GET
    params:
      include: customer,metafields
- name: orders_by_id
  endpoint:
    path: /orders/:id
    method: GET
    params:
      include: customer,metafields
- name: products
  endpoint:
    path: /products
    method: GET
    params:
      include: collections,metafields
- name: products_by_id
  endpoint:
    path: /products/:id
    method: GET
    params:
      include: collections,metafields
- name: subscriptions
  endpoint:
    path: /subscriptions
    method: GET
    params:
      include: address,metafields
- name: subscriptions_by_id
  endpoint:
    path: /subscriptions/:id
    method: GET
    params:
      include: address,metafields
- name: checkout
  endpoint:
    path: /checkouts/{checkout_id}
    method: GET
    data_selector: checkout
- name: refund_charge
  endpoint:
    path: /charges/{charge_id}/refund
    method: POST
    data_selector: charge
- name: charge_skip
  endpoint:
    path: /charges/{charge_id}/skip
    method: POST
    data_selector: charge
    params:
      subscription_ids:
      - subscription_id
- name: checkout
  endpoint:
    path: /checkouts/{checkout_id}
    method: GET
    data_selector: checkout
- name: charge_refund
  endpoint:
    path: /charges/{id}/refund
    method: POST
    data_selector: charge
- name: process_charge
  endpoint:
    path: /charges/{id}/process
    method: POST
- name: addresses
  endpoint:
    path: /addresses
    method: GET
    data_selector: addresses
- name: charges
  endpoint:
    path: /charges
    method: GET
    data_selector: charges
- name: charge
  endpoint:
    path: /charges/{id}
    method: GET
    data_selector: charge
- name: capture_payment
  endpoint:
    path: /charges/{charge_id}/capture_payment
    method: POST
- name: checkout
  endpoint:
    method: GET
- name: checkout
  endpoint:
    method: GET
    data_selector: checkout
- name: addresses
  endpoint:
    path: /addresses
    method: GET
- name: async_batches
  endpoint:
    path: /async_batches
    method: GET
- name: async_batches_tasks
  endpoint:
    path: /async_batches/:id/tasks
    method: GET
- name: charges
  endpoint:
    path: /charges
    method: GET
- name: customers
  endpoint:
    path: /customers
    method: GET
- name: discounts
  endpoint:
    path: /discounts
    method: GET
- name: orders
  endpoint:
    path: /orders
    method: GET
- name: products
  endpoint:
    path: /products
    method: GET
- name: subscriptions
  endpoint:
    path: /subscriptions
    method: GET
- name: checkout
  endpoint:
    path: /checkouts
    method: POST
    data_selector: checkout
- name: checkout
  endpoint:
    path: /checkouts/{checkout_id}
    method: GET
    data_selector: checkout
- name: checkout
  endpoint:
    path: /checkouts/{checkout_id}
    method: PUT
    data_selector: checkout
    params:
      currency: store_presentment_currencies
      external_checkout_source:
      - big_commerce
      - headless
      - shopify
- name: shipping_rates
  endpoint:
    path: /checkouts/{checkout_id}/shipping_rates
    method: GET
    data_selector: shipping_rates
- name: checkout_charge
  endpoint:
    path: /checkouts/{checkout_id}/charge
    method: POST
    data_selector: checkout_charge
    params:
      payment_processor:
      - stripe
      - braintree
      - mollie
      - authorize
      payment_token: <payment_token>
      payment_type:
      - CREDIT_CARD
      - PAYPAL
      - APPLE_PAY
      - GOOGLE_PAY
- name: customer
  endpoint:
    path: /customers
    method: POST
    params:
      billing_address1: required
      billing_city: required
      billing_country: required
      billing_first_name: required
      billing_last_name: required
      billing_province: required
      billing_zip: required
      email: required
      first_name: required
      last_name: required
- name: customer
  endpoint:
    path: /customers/{customer_id}
    method: GET
    data_selector: customer
- name: update_customer
  endpoint:
    path: /customers/{customer_id}
    method: PUT
    data_selector: customer
- name: customer
  endpoint:
    path: /customers
    method: GET
    data_selector: customers
    params:
      limit: 50
      page: 1
- name: delete_customer
  endpoint:
    path: /customers/{customer_id}
    method: DELETE
- name: customers_count
  endpoint:
    path: /customers/count
    method: GET
    data_selector: count
    params:
      created_at_max: '2019-11-11'
      created_at_min: '2019-11-11'
      updated_at_max: '2019-11-11'
      updated_at_min: '2019-11-11'
      status: ACTIVE
- name: payment_sources
  endpoint:
    path: /customers/{customer_id}/payment_sources
    method: GET
    data_selector: payment_sources
    params:
      cardholder_name: null
      card_brand: null
      card_exp_month: null
      card_exp_year: null
      card_last4: null
      customer_id: null
      has_card_error_in_dunning: false
      payment_type: credit
      processor_name: stripe
      status: active
      status_reason: null
- name: batch_task
  endpoint:
    path: /async_batches/<batch_id>/tasks
    method: POST
- name: discount
  endpoint:
    path: /discounts
    method: POST
    data_selector: discount
    params:
      code: Discount
      discount_type: percentage
      duration: usage_limit
      duration_usage_limit: 1
      ends_at: '2023-12-31'
      starts_at: '2018-05-16'
      status: enabled
      usage_limit: 1
      value: 12
      applies_to_product_type: ONETIME
      channel_settings:
        api:
          can_apply: false
        checkout_page:
          can_apply: true
        customer_portal:
          can_apply: true
        merchant_portal:
          can_apply: false
- name: address
  endpoint:
    params:
      sort_by:
        default: id-desc
        options:
        - id-asc
        - id-desc
        - updated_at-asc
        - updated_at-desc
- name: async_batch
  endpoint:
    params:
      sort_by:
        default: id-desc
        options:
        - id-asc
        - id-desc
        - created_at-asc
        - created_at-desc
- name: charge
  endpoint:
    params:
      sort_by:
        default: id-asc
        options:
        - id-asc
        - id-desc
        - created_at-asc
        - created_at-desc
        - updated_at-asc
        - updated_at-desc
        - charge_date-asc
        - charge_date-desc
- name: customer
  endpoint:
    params:
      sort_by:
        default: id-desc
        options:
        - id-asc
        - id-desc
        - created_at-asc
        - created_at-desc
        - updated_at-asc
        - updated_at-desc
- name: discount
  endpoint:
    params:
      sort_by:
        default: id-desc
        options:
        - id-asc
        - id-desc
        - created_at-asc
        - created_at-desc
        - updated_at-asc
        - updated_at-desc
- name: metafield
  endpoint:
    params:
      sort_by:
        default: id-desc
        options:
        - id-asc
        - id-desc
        - updated_at-asc
        - updated_at-desc
- name: onetime
  endpoint:
    params:
      sort_by:
        default: id-desc
        options:
        - id-asc
        - id-desc
        - created_at-asc
        - created_at-desc
        - updated_at-asc
        - updated_at-desc
- name: order
  endpoint:
    params:
      sort_by:
        default: id-desc
        options:
        - id-asc
        - id-desc
        - created_at-asc
        - created_at-desc
        - shipped_date-asc
        - shipped_date-desc
        - shipping_date-asc
        - shipping_date-desc
        - updated_at-asc
        - updated_at-desc
- name: product
  endpoint:
    params:
      sort_by:
        default: id-desc
        options:
        - id-asc
        - id-desc
        - created_at-asc
        - created_at-desc
        - updated_at-asc
        - updated_at-desc
        - title-asc
        - title-desc
- name: subscription
  endpoint:
    params:
      sort_by:
        default: id-desc
        options:
        - id-asc
        - id-desc
        - created_at-asc
        - created_at-desc
        - updated_at-asc
        - updated_at-desc
- name: webhook
  endpoint:
    params:
      sort_by:
        default: id-desc
        options:
        - id-asc
        - id-desc
- name: batch_task
  endpoint:
    path: /async_batches/<batch_id>/tasks
    method: POST
    params:
      batch_id: '{{ batch_id }}'
- name: update_discount
  endpoint:
    path: /discounts/{discount_id}
    method: PUT
- name: delete_discount
  endpoint:
    path: /discounts/{discount_id}
    method: DELETE
- name: list_discounts
  endpoint:
    path: /discounts
    method: GET
- name: discounts
  endpoint:
    path: /discounts
    method: GET
    data_selector: discounts
    params:
      created_at_max: '2017-10-01'
      created_at_min: '2017-10-01'
      discount_code: Discount
      discount_type: percentage
      ids: comma_separated_ids
      limit: 50
      status: enabled
      updated_at_max: '2017-10-01'
      updated_at_min: '2017-10-01'
- name: discounts_count
  endpoint:
    path: /discounts/count
    method: GET
    data_selector: count
    params:
      created_at_max: '2019-11-11'
      created_at_min: '2019-11-10'
      discount_type: percentage
      status: enabled
      updated_at_max: '2019-11-11'
      updated_at_min: '2019-11-10'
- name: apply_discount
  endpoint:
    path: /addresses/{address_id}/apply_discount
    method: POST
    params:
      discount_code: string
      discount_id: integer
- name: apply_discount
  endpoint:
    path: /charges/105805051/apply_discount
    method: POST
    params:
      discount_code: example_code
      discount_id: 12345
- name: batch_task
  endpoint:
    path: /async_batches/<batch_id>/tasks
    method: POST
- name: remove_discount_address
  endpoint:
    path: /addresses/<address_id>/remove_discount/
    method: POST
- name: remove_discount_charge
  endpoint:
    path: /charges/<charge_id>/remove_discount/
    method: POST
- name: tasks
  endpoint:
    path: /async_batches/<batch_id>/tasks
    method: POST
- name: metafield
  endpoint:
    path: /metafields
    method: POST
    params:
      description: string
      key: string
      namespace: string
      owner_id: integer
      owner_resource: string
      value: string
      value_type: string
- name: batch_task
  endpoint:
    path: /async_batches/<batch_id>/tasks
    method: POST
- name: address
  endpoint:
    path: /addresses
    method: GET
    data_selector: address
    params:
      incremental: updated_at
- name: metafield
  endpoint:
    path: /metafields/{id}
    method: PUT
    data_selector: metafield
    params:
      description: descriptionstring
      owner_id: owner_idstring
      owner_resource: owner_resourcestring
      value: valuestring
      value_type: value_typestring
- name: metafield
  endpoint:
    path: /metafields/{id}
    method: DELETE
- name: metafield
  endpoint:
    path: /metafields
    method: GET
- name: metafields
  endpoint:
    path: /metafields
    method: GET
    data_selector: metafields
    params:
      owner_resource: subscription
      limit: 50
      owner_id: '{{ owner_id }}'
      namespace: '{{ namespace }}'
      page: '{{ page }}'
- name: batch_task
  endpoint:
    path: /async_batches/<batch_id>/tasks
    method: POST
    params:
      batch_id: integer
      body: object
      completed_at: datetime
      created_at: datetime
      deleted_at: datetime
      id: integer
      queued_at: datetime
      result: string
      started_at: datetime
      status: string
      updated_at: datetime
- name: metafields_count
  endpoint:
    path: /metafields/count
    method: GET
    data_selector: count
    params:
      owner_resource: '{{ owner_resource }}'
      namespace: '{{ namespace }}'
      owner_id: '{{ owner_id }}'
- name: customer_notifications
  endpoint:
    path: /customers/{customer_id}/notifications
    method: POST
    params:
      type: email
      template_type: '{{ template_type }}'
      template_vars:
        address_id: '{{ address_id }}'
        charge_id: '{{ charge_id }}'
- name: batch_task
  endpoint:
    path: /async_batches/<batch_id>/tasks
    method: POST
    params:
      batch_id: integer
      body: object
      completed_at: datetime
      created_at: datetime
      deleted_at: datetime
      id: integer
      queued_at: datetime
      result: string
      started_at: datetime
      status: string
      updated_at: datetime
- name: onetime
  endpoint:
    data_selector: onetime
- name: tasks
  endpoint:
    path: /async_batches/<batch_id>/tasks
    method: POST
    data_selector: tasks
- name: retrieve_onetime
  endpoint:
    path: /onetimes/16909886
    method: GET
- name: update_onetime
  endpoint:
    path: /onetimes/16909886
    method: PUT
- name: delete_onetime
  endpoint:
    path: /onetimes/16665185
    method: DELETE
- name: onetimes
  endpoint:
    path: /onetimes
    method: GET
    data_selector: onetimes
    params:
      address_id: string
      created_at_max: string
      created_at_min: string
      customer_id: string
      limit: '50'
      page: '1'
      shopify_customer_id: string
      updated_at_max: string
      updated_at_min: string
- name: order
  endpoint:
    path: /orders/{order_id}
    method: GET
    data_selector: order
    params:
      incremental: updated_at
- name: customer_address
  endpoint:
    path: /customers/{customer_id}/addresses
    method: POST
    data_selector: address
    params: {}
- name: order
  endpoint:
    path: /orders/{order_id}
    method: GET
    data_selector: order
- name: order
  endpoint:
    path: /orders/{order_id}
    method: PUT
    data_selector: order
    params:
      billing_address:
        address1: optional
        address2: optional
        city: optional
        company: optional
        country: optional
        first_name: optional
        last_name: optional
        phone: optional
        province: required
        zip: optional
      shipping_address:
        address1: optional
        address2: optional
        city: optional
        company: optional
        country: optional
        first_name: optional
        last_name: optional
        phone: optional
        province: required
        zip: optional
      customer:
        first_name: optional
        last_name: required
        email: optional
- name: delete_order
  endpoint:
    path: /orders/{order_id}
    method: DELETE
- name: list_orders
  endpoint:
    path: /orders
    method: GET
- name: orders
  endpoint:
    path: /orders
    method: GET
    data_selector: orders
    params:
      address_id: string
      charge_id: string
      created_at_max: string
      created_at_min: string
      customer_id: string
      ids: string
      page: string
      scheduled_at_max: string
      scheduled_at_min: string
      shipping_date: string
      shopify_order_id: string
      has_external_order: string
      status: string
      subscription_id: string
      updated_at_max: string
      updated_at_min: string
- name: orders_count
  endpoint:
    path: /orders/count
    method: GET
    data_selector: count
    params:
      address_id: string
      charge_id: string
      created_at_min: string
      created_at_max: string
      customer_id: string
      scheduled_at_min: string
      scheduled_at_max: string
      shopify_customer_id: string
      status: string
      subscription_id: string
      updated_at_min: string
      updated_at_max: string
- name: change_order_date
  endpoint:
    path: /orders/7271806/change_date
    method: POST
    data_selector: order
    params:
      scheduled_at: ISO 8601 format date
- name: update_shopify_variant
  endpoint:
    path: /orders/{order_id}/update_shopify_variant/{shopify_variant_id}
    method: POST
    data_selector: order
- name: batch_task
  endpoint:
    path: /async_batches/<batch_id>/tasks
    method: POST
    data_selector: tasks
- name: order_delay
  endpoint:
    path: /orders/{id}/delay
    method: POST
- name: tasks
  endpoint:
    path: /async_batches/<batch_id>/tasks
    method: POST
- name: address
  endpoint:
    path: /addresses/{address_id}
    method: GET
    data_selector: address
- name: product
  endpoint:
    path: /products
    method: GET
    data_selector: product
    params:
      incremental: updated_at
- name: product
  endpoint:
    path: /products
    method: POST
    data_selector: product
    params:
      discount_type: percentage
      storefront_purchase_options:
      - subscription_only
      - subscription_and_onetime
- name: product
  endpoint:
    path: /products/{product_id}
    method: GET
    data_selector: product
    params:
      charge_interval_frequency: string
      created_at: string
      cutoff_day_of_month: string
      cutoff_day_of_week: string
      discount_amount: string
      discount_type: string
      expire_after_specific_number_of_charges: string
      handle: string
      images: array of dictionary object
      modifiable_properties: string
      number_charges_until_expiration: string
      order_day_of_month: string
      order_day_of_week: string
      order_interval_frequency: string
      order_interval_frequency_options: string
      order_interval_unit: string
      product_id: string
      shopify_product_id: integer
      storefront_purchase_options: string
      title: string
      updated_at: string
- name: update_product
  endpoint:
    path: /products/{product_id}
    method: PUT
- name: delete_product
  endpoint:
    path: /products/{product_id}
    method: DELETE
- name: list_products
  endpoint:
    path: /products
    method: GET
- name: products
  endpoint:
    path: /products
    method: GET
    data_selector: products
    params:
      id: idstring
      shopify_product_id: shopify_product_idinteger
      limit: limitstring
- name: product_count
  endpoint:
    path: /products/count
    method: GET
    data_selector: count
- name: shop
  endpoint:
    path: /shop
    method: GET
    data_selector: shop
    params:
      id: integer
      created_at: datetime
      currency: string
      domain: string
      email: string
      iana_timezone: string
      my_shopify_domain: string
      name: string
      shop_phone: string
      shop_email: string
      timezone: string
      updated_at: datetime
- name: batch_task
  endpoint:
    path: /async_batches/<batch_id>/tasks
    method: POST
    data_selector: tasks
    params: {}
- name: shipping_countries
  endpoint:
    path: /shop/shipping_countries
    method: GET
    data_selector: shipping_countries
    params:
      id: integer
      code: string
      country_id: integer
      name: string
- name: task
  endpoint:
    path: /async_batches/<batch_id>/tasks
    method: POST
    data_selector: tasks
    params:
      batch_id: id
      body: body
      completed_at: datetime
      created_at: datetime
      deleted_at: datetime
      id: integer
      queued_at: datetime
      result: string
      started_at: datetime
      status: string
      updated_at: datetime
- name: subscription
  endpoint:
    path: /subscription
    method: GET
    data_selector: subscription
- name: address_update
  endpoint:
    path: /addresses/{address_id}
    method: PUT
    data_selector: address
    params:
      address1: 3020 Nebraska Avenue
- name: address_delete
  endpoint:
    path: /addresses/{address_id}
    method: DELETE
- name: subscription
  endpoint:
    path: /subscriptions
    method: POST
    data_selector: subscription
    params:
      address_id: Required
      charge_interval_frequency: Required
      next_charge_scheduled_at: Required
      order_interval_frequency: Required
      order_interval_unit: Required
      quantity: Required
      shopify_product_id: Required
      shopify_variant_id: Required
- name: subscription
  endpoint:
    path: /subscriptions/{subscription_id}
    method: GET
    data_selector: subscription
- name: batch_task
  endpoint:
    path: /async_batches/<batch_id>/tasks
    method: POST
    params:
      batch_id: null
      body: null
      completed_at: null
      created_at: null
      deleted_at: null
      id: null
      queued_at: null
      result: null
      started_at: null
      status: null
      updated_at: null
- name: delete_subscription
  endpoint:
    path: /subscriptions/<subscription_id>
    method: DELETE
    params:
      send_email: null
- name: subscriptions
  endpoint:
    path: /subscriptions
    method: GET
    data_selector: subscriptions
    params:
      created_at_min: '2018-10-10'
      created_at_max: '2019-10-16'
      customer_id: <customer_id>
      address_id: <address_id>
      ids: <comma-separated_ids>
      include_onetimes: 'true'
      limit: '50'
      page: '1'
      shopify_customer_id: <shopify_customer_id>
      shopify_variant_id: <shopify_variant_id>
      status: ACTIVE
      updated_at_max: <updated_at_max>
      updated_at_min: <updated_at_min>
- name: subscription_count
  endpoint:
    path: /subscriptions/count
    method: GET
    data_selector: count
    params:
      address_id: string
      created_at_max: string
      created_at_min: string
      customer_id: string
      shopify_customer_id: string
      shopify_variant_id: string
      status: string
      updated_at_max: string
      updated_at_min: string
- name: update_subscription_charge_date
  endpoint:
    path: /subscriptions/{subscription_id}/set_next_charge_date
    method: POST
    params:
      date: string
- name: subscription_address_change
  endpoint:
    path: /subscriptions/{subscription_id}/change_address
    method: POST
    data_selector: subscription
    params:
      address_id: '{{ address_id }}'
      next_charge_scheduled_at: '{{ next_charge_scheduled_at }}'
- name: batch_task
  endpoint:
    path: /async_batches/<batch_id>/tasks
    method: POST
    data_selector: tasks
- name: activate_subscription
  endpoint:
    path: /subscriptions/{subscription_id}/activate
    method: POST
- name: batch_task
  endpoint:
    path: /async_batches/<batch_id>/tasks
    method: POST
    params:
      batch_type: discount_create
- name: subscriptions_bulk_update
  endpoint:
    path: /addresses/{address_id}/subscriptions-bulk
    method: PUT
    data_selector: subscriptions
- name: address
  endpoint:
    path: /addresses
    method: GET
    data_selector: address
    params:
      limit: 250
      page: 1
- name: customers
  endpoint:
    path: /customers
    method: GET
    data_selector: customer
    params:
      limit: 250
      page: 1
- name: charges
  endpoint:
    path: /charges
    method: GET
    data_selector: charge
    params:
      limit: 250
      page: 1
- name: orders
  endpoint:
    path: /orders
    method: GET
    data_selector: order
    params:
      limit: 250
      page: 1
- name: products
  endpoint:
    path: /products
    method: GET
    data_selector: product
    params:
      limit: 250
      page: 1
- name: subscriptions
  endpoint:
    path: /subscriptions
    method: GET
    data_selector: subscription
    params:
      limit: 250
      page: 1
- name: subscriptions_bulk_delete
  endpoint:
    path: /addresses/{address_id}/subscriptions-bulk
    method: DELETE
    data_selector: subscriptions
- name: webhook
  endpoint:
    path: /webhooks
    method: POST
    data_selector: webhook
- name: webhook_create
  endpoint:
    path: /webhooks
    method: POST
    data_selector: webhook
- name: webhook_retrieve
  endpoint:
    path: /webhooks/{id}
    method: GET
    data_selector: webhook
- name: webhook_update
  endpoint:
    path: /webhooks/{id}
    method: PUT
    data_selector: webhook
- name: webhook_delete
  endpoint:
    path: /webhooks/{id}
    method: DELETE
    data_selector: webhook
- name: webhooks
  endpoint:
    path: /
    method: GET
    data_selector: webhooks
- name: webhook_test
  endpoint:
    path: /<webhook_id>/test
    method: POST
- name: customer_activated
  endpoint:
    path: /webhooks/customer/activated
    method: POST
- name: customer_created
  endpoint:
    path: /webhooks/customer/created
    method: POST
- name: customer_deactivated
  endpoint:
    path: /webhooks/customer/deactivated
    method: POST
- name: customer_payment_method_updated
  endpoint:
    path: /webhooks/customer/payment_method_updated
    method: POST
- name: customer_updated
  endpoint:
    path: /webhooks/customer/updated
    method: POST
- name: customer_deleted
  endpoint:
    path: /webhooks/customer/deleted
    method: POST
- name: onetime_created
  endpoint:
    path: /webhooks/onetime/created
    method: POST
- name: onetime_deleted
  endpoint:
    path: /webhooks/onetime/deleted
    method: POST
- name: onetime_updated
  endpoint:
    path: /webhooks/onetime/updated
    method: POST
- name: order_created
  endpoint:
    path: /webhooks/order/created
    method: POST
- name: order_deleted
  endpoint:
    path: /webhooks/order/deleted
    method: POST
- name: order_processed
  endpoint:
    path: /webhooks/order/processed
    method: POST
- name: order_upcoming
  endpoint:
    path: /webhooks/order/upcoming
    method: POST
- name: order_updated
  endpoint:
    path: /webhooks/order/updated
    method: POST
- name: plan_created
  endpoint:
    path: /webhooks/plan/created
    method: POST
- name: plan_deleted
  endpoint:
    path: /webhooks/plan/deleted
    method: POST
- name: plan_updated
  endpoint:
    path: /webhooks/plan/updated
    method: POST
- name: subscription_activated
  endpoint:
    path: /subscription/activated
    method: POST
- name: subscription_cancelled
  endpoint:
    path: /subscription/cancelled
    method: POST
- name: subscription_created
  endpoint:
    path: /subscription/created
    method: POST
- name: subscription_deleted
  endpoint:
    path: /subscription/deleted
    method: POST
- name: subscription_skipped
  endpoint:
    path: /subscription/skipped
    method: POST
- name: subscription_unskipped
  endpoint:
    path: /subscription/unskipped
    method: POST
- name: subscription_updated
  endpoint:
    path: /subscription/updated
    method: PUT
- name: subscription_swapped
  endpoint:
    path: /subscription/swapped
    method: POST
- name: subscription_paused
  endpoint:
    path: /subscription/paused
    method: POST
- name: app_uninstalled
  endpoint:
    path: /app/uninstalled
    method: POST
- name: recharge_uninstalled
  endpoint:
    path: /recharge/uninstalled
    method: POST
- name: store_updated
  endpoint:
    path: /store/updated
    method: POST
- name: async_batch_create
  endpoint:
    path: /async_batches
    method: POST
    params:
      batch_type: '{{ desired_batch_type }}'
      tasks: '{{ up_to_10000_tasks }}'
- name: async_batch_submit
  endpoint:
    path: /async_batches/submit
    method: POST
- name: async_batch_retrieve
  endpoint:
    path: /async_batches/{batch_id}
    method: GET
- name: async_batch_tasks
  endpoint:
    path: /async_batches/{batch_id}/tasks
    method: GET
- name: async_batch
  endpoint:
    path: /
    method: POST
    data_selector: async_batch
    params:
      batch_type: '{{ desired_batch_type }}'
- name: retrieve_batch
  endpoint:
    path: /{batch_id}
    method: GET
- name: async_batch
  endpoint:
    path: /async_batches/<batch_id>
    method: GET
    data_selector: async_batch
- name: async_batches
  endpoint:
    path: /async_batches
    method: GET
    data_selector: async_batches
- name: async_batch_process
  endpoint:
    path: /async_batches/<batch_id>/process
    method: POST
    data_selector: async_batch
- name: async_batch_tasks
  endpoint:
    data_selector: async_batch_tasks
- name: batch_task
  endpoint:
    path: /async_batches/<batch_id>/tasks
    method: POST
- name: async_batch_tasks
  endpoint:
    path: /async_batches/{batch_id}/tasks
    method: GET
    data_selector: async_batch_tasks
    params:
      idsstring: comma separated list of ids
- name: skip_charge
  endpoint:
    path: /addresses/{address_id}/charges/skip
    method: POST
    data_selector: charge
    params:
      date: datetime
      subscription_ids: array
- name: bundle_selection
  endpoint:
    path: /bundle_selections/{id}
    method: GET
    data_selector: bundle_selection
- name: async_batch
  endpoint:
    path: /async_batches/<batch_id>
    method: GET
- name: charge
  endpoint:
    path: /charges
    method: GET
    data_selector: charge
    params: {}
- name: charge
  endpoint:
    path: /charges/{id}
    method: GET
- name: charges
  endpoint:
    path: /async_batches/<batch_id>
    method: GET
    data_selector: async_batch
- name: charge_discount
  endpoint:
    path: /charges/{charge_id}/apply_discount
    method: POST
    params:
      discount_code: string
      discount_id: integer
- name: async_batch
  endpoint:
    path: /async_batches/<batch_id>
    method: GET
    data_selector: async_batch
- name: charges_skip
  endpoint:
    path: /charges/{charge_id}/skip
    method: POST
    data_selector: charge
- name: unskip_charge
  endpoint:
    path: /charges/{charge_id}/unskip
    method: POST
- name: charge_refund
  endpoint:
    path: /charges/{charge_id}/refund
    method: POST
    data_selector: charge
    params:
      amount: 11.0
      full_refund: true
      retry: true
      error: insufficient_inventory
      error_type: required_field
- name: addresses
  endpoint:
    path: /addresses
    method: GET
    params:
      include: charge_activities,customer,discount,payment_methods,subscriptions
- name: addresses_by_id
  endpoint:
    path: /addresses/{id}
    method: GET
    params:
      include: charge_activities,customer,discount,payment_methods,subscriptions
- name: charges
  endpoint:
    path: /charges
    method: GET
    params:
      include: charge_activities,customer,metafields,payment_methods
- name: charges_by_id
  endpoint:
    path: /charges/{id}
    method: GET
    params:
      include: charge_activities,customer,metafields,payment_methods
- name: customers
  endpoint:
    path: /customers
    method: GET
    params:
      include: addresses,metafields,payment_methods,subscriptions
- name: customers_by_id
  endpoint:
    path: /customers/{id}
    method: GET
    params:
      include: addresses,metafields,payment_methods,subscriptions
- name: orders
  endpoint:
    path: /orders
    method: GET
    params:
      include: customer,metafields
- name: orders_by_id
  endpoint:
    path: /orders/{id}
    method: GET
    params:
      include: customer,metafields
- name: payment_methods
  endpoint:
    path: /payment_methods
    method: GET
    params:
      include: addresses
- name: payment_methods_by_id
  endpoint:
    path: /payment_methods/{id}
    method: GET
    params:
      include: addresses
- name: subscriptions
  endpoint:
    path: /subscriptions
    method: GET
    params:
      include: address,charge_activities,customer,metafields,bundle_product,bundle_selections
- name: subscriptions_by_id
  endpoint:
    path: /subscriptions/{id}
    method: GET
    params:
      include: address,charge_activities,customer,metafields,bundle_product,bundle_selections
- name: charge_process
  endpoint:
    path: /charges/{id}/process
    method: POST
- name: capture_charge
  endpoint:
    path: /charge/{id}/capture_payment
    method: POST
- name: charges_capture_payment
  endpoint:
    path: /charges/{id}/capture_payment
    method: POST
- name: checkout
  endpoint:
    path: /checkouts
    method: POST
- name: checkout
  endpoint:
    path: /checkouts
    method: POST
    data_selector: checkout
- name: checkout
  endpoint:
    path: /checkouts
    method: POST
    params:
      get_shipping_rates: true
- name: checkout
  endpoint:
    path: /checkouts/{checkout_id}
    method: GET
    data_selector: checkout
- name: checkout
  endpoint:
    path: /checkouts/{checkout_token}
    method: PUT
    params:
      get_shipping_rates: true
- name: shipping_rates
  endpoint:
    path: /checkouts/{checkout_id}/shipping_rates
    method: GET
    data_selector: shipping_rates
- name: checkout_process
  endpoint:
    path: /checkouts/{checkout_id}/process
    method: POST
    data_selector: checkout_charge
- name: collections
  endpoint:
    path: /collections
    method: GET
- name: collection
  endpoint:
    path: /collections
    method: POST
    data_selector: collection
    params:
      description: description
      sort_order: id-desc
      title: title
- name: collection
  endpoint:
    path: /collections/{collection_id}
    method: GET
    data_selector: collection
- name: address
  endpoint:
    path: /charges
    method: GET
    params:
      sort_by:
        default: id-desc
        options:
        - id-asc
        - id-desc
        - updated_at-asc
        - updated_at-desc
- name: async_batch
  endpoint:
    path: /charges
    method: GET
    params:
      sort_by:
        default: id-desc
        options:
        - id-asc
        - id-desc
        - created_at-asc
        - created_at-desc
- name: charge
  endpoint:
    path: /charges
    method: GET
    params:
      sort_by:
        default: id-asc
        options:
        - id-asc
        - id-desc
        - created_at-asc
        - created_at-desc
        - updated_at-asc
        - updated_at-desc
        - scheduled_at-asc
        - scheduled_at-desc
- name: customer
  endpoint:
    path: /charges
    method: GET
    params:
      sort_by:
        default: id-desc
        options:
        - id-asc
        - id-desc
        - created_at-asc
        - created_at-desc
        - updated_at-asc
        - updated_at-desc
- name: discount
  endpoint:
    path: /charges
    method: GET
    params:
      sort_by:
        default: id-desc
        options:
        - id-asc
        - id-desc
        - created_at-asc
        - created_at-desc
        - updated_at-asc
        - updated_at-desc
- name: metafield
  endpoint:
    path: /charges
    method: GET
    params:
      sort_by:
        default: id-desc
        options:
        - id-asc
        - id-desc
        - updated_at-asc
        - updated_at-desc
- name: onetime
  endpoint:
    path: /charges
    method: GET
    params:
      sort_by:
        default: id-desc
        options:
        - id-asc
        - id-desc
        - created_at-asc
        - created_at-desc
        - updated_at-asc
        - updated_at-desc
- name: order
  endpoint:
    path: /charges
    method: GET
    params:
      sort_by:
        default: id-desc
        options:
        - id-asc
        - id-desc
        - updated_at-asc
        - updated_at-desc
        - processed_at-asc
        - processed_at-desc
        - scheduled_at-asc
        - scheduled_at-desc
- name: plan
  endpoint:
    path: /charges
    method: GET
    params:
      sort_by:
        default: id-desc
        options:
        - id-asc
        - id-desc
        - updated_at-asc
        - updated_at-desc
- name: subscription
  endpoint:
    path: /charges
    method: GET
    params:
      sort_by:
        default: id-desc
        options:
        - id-asc
        - id-desc
        - created_at-asc
        - created_at-desc
        - updated_at-asc
        - updated_at-desc
- name: webhook
  endpoint:
    path: /charges
    method: GET
    params:
      sort_by:
        default: id-desc
        options:
        - id-asc
        - id-desc
- name: collection
  endpoint:
    path: /collections/{collection_id}
    method: PUT
    data_selector: collection
- name: delete_collection
  endpoint:
    path: /collections/{collection_id}
    method: DELETE
- name: list_collections
  endpoint:
    path: /async_batches/{batch_id}
    method: GET
    data_selector: async_batch
- name: list_collections_products
  endpoint:
    path: /async_batches/{batch_id}
    method: GET
    data_selector: async_batch
- name: collection_products_add
  endpoint:
    path: /collections/{collection_id}/collection_products-bulk
    method: POST
    params:
      limit: 250
- name: collection_products_delete
  endpoint:
    path: /collections/{collection_id}/collection_products-bulk
    method: DELETE
    params:
      limit: 250
- name: credit_accounts
  endpoint:
    path: /credit_accounts
    method: GET
    data_selector: credit_accounts
    params:
      customer_id: customer_id
      limit: limit
- name: credit_account
  endpoint:
    path: /credit_accounts/{credit_account_id}
    method: GET
    data_selector: credit_account
- name: credit_adjustments
  endpoint:
    path: /credit_adjustments
    method: GET
    data_selector: credit_adjustments
    params:
      limit: limit
- name: credit_adjustment
  endpoint:
    path: /credit_adjustments/{credit_adjustment_id}
    method: GET
    data_selector: credit_adjustments
- name: credit_adjustments_for_credit_account
  endpoint:
    path: /credit_accounts/{credit_account_id}/credit_adjustments
    method: GET
    data_selector: credit_adjustments
    params:
      limit: '50'
- name: customer
  endpoint:
    path: /customers
    method: POST
    data_selector: customer
    params:
      email: required
      first_name: required
      last_name: required
      phone: optional
      tax_exempt: optional
      external_customer_id: optional
- name: customer
  endpoint:
    path: /customers/{customer_id}
    method: GET
    data_selector: customer
- name: update_customer
  endpoint:
    path: /customers/{customer_id}
    method: PUT
    data_selector: customer
- name: delete_customer
  endpoint:
    path: /customers/{customer_id}
    method: DELETE
    data_selector: ''
- name: async_batches
  endpoint:
    path: /async_batches/<batch_id>
    method: GET
    data_selector: async_batch
- name: customer_delivery_schedule
  endpoint:
    path: /customers/<customer_id>/delivery_schedule
    method: GET
    data_selector: deliverySchedule
    params:
      delivery_count_future: integer
      future_interval: integer (default 90, max 365)
      date_max: string (max 365 days in future)
- name: credit_summary
  endpoint:
    path: /customers/{customer_id}/credit_summary
    method: GET
    data_selector: credit_summary
- name: discounts
  endpoint:
    path: /update_address
    method: undefined
    data_selector: undefined
- name: discount
  endpoint:
    path: /discounts
    method: GET
    data_selector: discount
- name: discount
  endpoint:
    path: /discounts
    method: POST
    data_selector: discount
    params:
      code: Discount1
      status: enabled
      value: '100.00'
      value_type: percentage
- name: address
  endpoint:
    path: /address
    method: GET
    data_selector: address
    params:
      incremental: updated_at
- name: discount
  endpoint:
    path: /discounts/{discount_id}
    method: GET
    data_selector: discount
- name: update_discount
  endpoint:
    path: /discounts/{discount_id}
    method: PUT
- name: delete_discount
  endpoint:
    path: /discounts/{discount_id}
    method: DELETE
- name: list_discounts
  endpoint:
    path: /discounts
    method: GET
- name: async_batch
  endpoint:
    path: /async_batches/<batch_id>
    method: GET
    data_selector: async_batch
- name: metafield
  endpoint:
    path: /metafields
    method: GET
    data_selector: metafield
    params:
      include: metafields
- name: metafield
  endpoint:
    path: /metafields
    method: POST
    data_selector: metafield
    params:
      description: string
      key: string
      namespace: string
      owner_id: string
      owner_resource: string
      value: string
      value_type: string
- name: async_batch
  endpoint:
    path: /async_batches/<batch_id>
    method: GET
    data_selector: async_batch
- name: update_metafield
  endpoint:
    path: /metafields/{metafield_id}
    method: PUT
- name: delete_metafield
  endpoint:
    path: /metafields/{metafield_id}
    method: DELETE
- name: list_metafields
  endpoint:
    path: /async_batches/{batch_id}
    method: GET
- name: notifications
  endpoint:
    path: /notifications/{customer_id}
    method: POST
- name: send_email_notification
  endpoint:
    path: /customers/{customer_id}/notifications
    method: POST
    data_selector: .
    params:
      type: email
      template_type: upcoming_charge
      template_vars:
        address_id: 1234567890
        charge_id: 9876543210
- name: onetime
  endpoint:
    path: /onetime
    method: GET
    data_selector: onetime
- name: onetime_create
  endpoint:
    path: /onetimes
    method: POST
    data_selector: onetime
- name: onetime_retrieve
  endpoint:
    path: /onetimes/{id}
    method: GET
    data_selector: onetime
- name: onetime_update
  endpoint:
    path: /onetimes/16909886
    method: PUT
    data_selector: onetime
- name: onetime_delete
  endpoint:
    path: /onetimes/16665185
    method: DELETE
- name: onetimes
  endpoint:
    path: /
    method: GET
    data_selector: onetimes
    params:
      address_id: string
      address_ids: string
      created_at_max: datetime
      created_at_min: datetime
      customer_id: string
      include_cancelled: boolean
      limit: string
      page: string
      external_variant_id: string
      updated_at_max: datetime
      updated_at_min: datetime
      ids: array
  paginator:
    type: cursor
    cursor_path: next
    cursor_param: next_cursor
    page_size_param: limit
    default_page_size: 50
- name: order
  endpoint:
    path: /orders
    method: GET
    data_selector: order
- name: addresses
  endpoint:
    path: /addresses
    method: POST
    data_selector: address
    params:
      customer_id: '{{ customer_id }}'
      address1: '{{ address1 }}'
      city: '{{ city }}'
      country_code: '{{ country_code }}'
      first_name: '{{ first_name }}'
      last_name: '{{ last_name }}'
      phone: '{{ phone }}'
      province: '{{ province }}'
      zip: '{{ zip }}'
- name: order
  endpoint:
    path: /orders/{order_id}
    method: GET
    data_selector: order
- name: order_clone
  endpoint:
    path: /orders/{order_id}/clone
    method: POST
    data_selector: order
    params:
      scheduled_at: '{{scheduled_at}}'
- name: order_delay
  endpoint:
    path: /orders/{id}/delay
    method: POST
- name: order
  endpoint:
    path: /orders/{order_id}
    method: PUT
    data_selector: order
- name: delete_order
  endpoint:
    path: /orders/{order_id}
    method: DELETE
- name: list_orders
  endpoint:
    path: /async_batches/{batch_id}
    method: GET
    data_selector: async_batch
- name: payment_method
  endpoint:
    path: /services/data/vXX.X/sobjects/PaymentMethod
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: payment_method
  endpoint:
    path: /payment_methods
    method: POST
    data_selector: payment_method
    params:
      customer_id: integer
      default: boolean
      payment_type: string
      processor_customer_token: string
      processor_name: string
      processor_payment_method_token: string
      billing_address: object
      retry_charges: boolean
- name: payment_method
  endpoint:
    path: /payment_methods/1234567
    method: GET
    data_selector: payment_method
- name: update_payment_method
  endpoint:
    path: /payment_methods/1234567
    method: PUT
    data_selector: payment_method
- name: delete_payment_method
  endpoint:
    path: /payment_methods/1234567
    method: DELETE
- name: async_batches
  endpoint:
    path: /async_batches/<batch_id>
    method: GET
    data_selector: async_batch
- name: plan
  endpoint:
    path: /plans
    method: GET
    data_selector: plan
    params: {}
- name: address
  endpoint:
    path: /addresses/{address_id}
    method: GET
- name: update_address
  endpoint:
    path: /addresses/{address_id}
    method: PUT
- name: plan
  endpoint:
    path: /plans
    method: POST
    data_selector: plan
    params:
      discount_amount: '10'
      discount_type: percentage
      external_product_id:
        ecommerce: '2103271587891'
      sort_order: 1
      subscription_preferences:
        charge_interval_frequency: 30
        expire_after_specific_number_of_charges: 6
        interval_unit: day
        order_day_of_month: 1
        order_interval_frequency: 30
      title: Concert T-Shirt
      type: subscription
- name: plan_update
  endpoint:
    path: /plans/{plan_id}
    method: PUT
- name: plan_delete
  endpoint:
    path: /plans/{plan_id}
    method: DELETE
- name: plans
  endpoint:
    path: /plans
    method: GET
    data_selector: plans
    params:
      limit: 50
      page: 1
      external_product_id: null
      ids: null
      updated_at_max: null
      updated_at_min: null
      type: null
- name: bulk_create_plans
  endpoint:
    path: /products/2103271587891/plans-bulk
    method: POST
    data_selector: plans
- name: plans_bulk_update
  endpoint:
    path: /products/2103271587891/plans-bulk
    method: PUT
    data_selector: plans
- name: plans_bulk_delete
  endpoint:
    path: /products/2103271587891/plans-bulk
    method: DELETE
    data_selector: plans
- name: product
  endpoint:
    path: /products
    method: GET
    data_selector: products
    params: {}
- name: product
  endpoint:
    path: /products
    method: POST
    data_selector: product
    params:
      external_product_id: numeric
      brand: string
      external_created_at: datetime
      external_updated_at: datetime
      images: array
      options: array
      published_at: datetime
      requires_shipping: string
      title: string
      variants: array
      vendor: string
- name: product
  endpoint:
    path: /products/{external_product_id}
    method: GET
    data_selector: product
- name: product
  endpoint:
    path: /products/{product_id}
    method: PUT
    data_selector: product
    params:
      brand: string
      external_created_at: datetime
      external_updated_at: datetime
      images: array
      options: array
      published_at: datetime
      requires_shipping: boolean
      title: string
      variants: array
      vendor: string
- name: product
  endpoint:
    path: /products
    method: GET
    data_selector: products
    params:
      external_product_ids: '{{ external_product_ids }}'
- name: delete_product
  endpoint:
    path: /products/{product_id}
    method: DELETE
- name: address_update
  endpoint:
    path: /addresses/{address_id}
    method: PUT
- name: address_delete
  endpoint:
    path: /addresses/{address_id}
    method: DELETE
- name: addresses_list
  endpoint:
    path: /addresses
    method: GET
- name: update_retention_strategy
  endpoint:
    path: /retention_strategies/12345
    method: PUT
- name: delete_retention_strategy
  endpoint:
    path: /retention_strategies/12345
    method: DELETE
- name: list_retention_strategies
  endpoint:
    path: /retention_strategies
    method: GET
- name: store
  endpoint:
    path: /
    method: GET
    data_selector: store
- name: subscription
  endpoint:
    path: /subscriptions
    method: GET
    data_selector: subscription
- name: subscription
  endpoint:
    path: /subscriptions
    method: POST
    data_selector: subscription
    params:
      address_id:
        required: true
        type: integer
      charge_interval_frequency:
        required: true
        type: integer
      next_charge_scheduled_at:
        required: true
        type: datetime
      order_interval_frequency:
        required: true
        type: integer
      order_interval_unit:
        required: true
        type: string
        values:
        - day
        - week
        - month
      quantity:
        required: true
        type: integer
      external_variant_id:
        required: true
        type: object
      status:
        type: string
        default: active
        values:
        - active
        - cancelled
        - expired
- name: subscription
  endpoint:
    path: /subscriptions/{subscription_id}
    method: GET
    data_selector: subscription
- name: subscription
  endpoint:
    path: /subscriptions/{subscription_id}
    method: PUT
    data_selector: subscription
    params:
      commit: false
      force_update: null
- name: delete_subscription
  endpoint:
    path: /subscriptions/{subscription_id}
    method: DELETE
- name: list_subscriptions
  endpoint:
    path: /async_batches/{batch_id}
    method: GET
- name: change_subscription_next_charge_date
  endpoint:
    path: /subscriptions/{subscription_id}/set_next_charge_date
    method: POST
- name: change_subscription_address
  endpoint:
    path: /subscriptions/{subscription_id}/change_address
    method: POST
    data_selector: subscription
    params:
      address_id: required
      next_charge_scheduled_at: optional
- name: cancel_subscription
  endpoint:
    path: /subscriptions/{subscription_id}/cancel
    method: POST
    data_selector: subscription
    params:
      cancellation_reason: other reason
      send_email: false
- name: addresses
  endpoint:
    path: /addresses
    method: GET
    data_selector: addresses
    params:
      limit: '50'
      created_at_min: datetime
      created_at_max: datetime
      customer_id: integer
      discount_id: string
      discount_code: string
      ids: string
      updated_at_min: string
      updated_at_max: string
      is_active: boolean
- name: activate_subscription
  endpoint:
    path: /subscriptions/{subscription_id}/activate
    method: POST
- name: gift_skipped_subscription
  endpoint:
    path: /subscriptions/skip_gift
    method: POST
- name: webhook
  endpoint:
    method: POST
    params:
      included_objects:
      - addresses
      - collections
      - customer
      - metafields
- name: webhook_create
  endpoint:
    path: /
    method: POST
    data_selector: webhook
    params:
      address: https://request.in/foo
      topic: subscription/created
- name: webhook_retrieve
  endpoint:
    path: /{webhook_id}
    method: GET
    data_selector: webhook
- name: webhook
  endpoint:
    path: /<webhook_id>
    method: PUT
    params:
      address: https://request.in/foo
      topic: subscription/created
      version: 2021-01
- name: webhook
  endpoint:
    path: /<webhook_id>
    method: DELETE
- name: webhook
  endpoint:
    path: /
    method: GET
- name: webhook
  endpoint:
    path: /<webhook_id>/test
    method: POST
- name: charge
  endpoint:
    path: /webhooks/charge
    method: POST
- name: checkout
  endpoint:
    path: /webhooks/checkout
    method: POST
- name: customer
  endpoint:
    path: /webhooks/customer
    method: POST
- name: onetime
  endpoint:
    path: /webhooks/onetime
    method: POST
- name: order
  endpoint:
    path: /webhooks/order
    method: POST
- name: plan_created
  endpoint:
    path: /plan/created
    method: POST
- name: plan_deleted
  endpoint:
    path: /plan/deleted
    method: POST
- name: plan_updated
  endpoint:
    path: /plan/updated
    method: POST
- name: subscription_activated
  endpoint:
    path: /subscription/activated
    method: POST
- name: subscription_cancelled
  endpoint:
    path: /subscription/cancelled
    method: POST
- name: subscription_created
  endpoint:
    path: /subscription/created
    method: POST
- name: subscription_deleted
  endpoint:
    path: /subscription/deleted
    method: POST
- name: subscription_skipped
  endpoint:
    path: /subscription/skipped
    method: POST
- name: subscription_unskipped
  endpoint:
    path: /subscription/unskipped
    method: POST
- name: subscription_updated
  endpoint:
    path: /subscription/updated
    method: PUT
- name: subscription_swapped
  endpoint:
    path: /subscription/swapped
    method: POST
- name: subscription_paused
  endpoint:
    path: /subscription/paused
    method: POST
- name: app_uninstalled
  endpoint:
    path: /app/uninstalled
    method: POST
- name: recharge_uninstalled
  endpoint:
    path: /recharge/uninstalled
    method: POST
- name: store_updated
  endpoint:
    path: /store/updated
    method: POST
- name: async_batch
  endpoint:
    method: GET
    data_selector: async_batch
- name: async_batch
  endpoint:
    method: POST
    data_selector: async_batch
- name: async_batch
  endpoint:
    method: PUT
    data_selector: async_batch
- name: async_batch
  endpoint:
    method: DELETE
    data_selector: async_batch
- name: create_batch
  endpoint:
    path: /async_batches
    method: POST
    data_selector: async_batch
    params:
      batch_type: desired_batch_type
- name: retrieve_batch
  endpoint:
    path: /async_batches/{batch_id}
    method: GET
    data_selector: async_batch
- name: list_batches
  endpoint:
    path: /async_batches
    method: GET
    data_selector: async_batches
- name: process_batch
  endpoint:
    path: /async_batches/{id}/process
    method: POST
    data_selector: async_batch
- name: batch_tasks
  endpoint:
    path: /async_batches/{id}/tasks
    method: GET
    data_selector: tasks
- name: async_batch_tasks
  endpoint:
    path: /tasks
    method: POST
    data_selector: body
    params: {}
- name: merge_addresses
  endpoint:
    path: /addresses/merge
    method: POST
    data_selector: address
    params:
      delete_source_addresses: boolean
      next_charge_date: string
      target_address: object
      source_addresses: array
- name: batch_task
  endpoint:
    path: /async_batches/<batch_id>/tasks
    method: POST
    data_selector: tasks
- name: batch_tasks
  endpoint:
    path: /async_batches/{batch_id}/tasks
    method: GET
    data_selector: async_batch_tasks
- name: token_information
  endpoint:
    path: /token_information
    method: GET
    data_selector: token_information
- name: account
  endpoint:
    path: /accounts/{account_id}
    method: GET
    data_selector: account
- name: accounts
  endpoint:
    path: /accounts
    method: GET
    data_selector: accounts
- name: events
  endpoint:
    path: /events
    method: GET
    data_selector: event
- name: events
  endpoint:
    path: /events
    method: GET
    data_selector: events
    params:
      created_at_min: created_at_minstring
      created_at_max: created_at_maxstring
      object_type: object_typestring
      object_id: object_idinteger
      verbs: verbsstring
      customer_id: customer_idinteger
      origin: originstring
- name: skip_charge
  endpoint:
    path: /addresses/{address_id}/charges/skip
    method: POST
    data_selector: charge
    params:
      date: date
      subscription_ids: subscription_ids
- name: bundle_selection
  endpoint:
    path: /bundle_selections
    method: GET
    data_selector: items
- name: async_batch
  endpoint:
    path: /async_batches/<batch_id>
    method: GET
    data_selector: async_batch
- name: charge
  endpoint:
    path: /charges/<charge_id>
    method: GET
- name: charge
  endpoint:
    path: /charges
    method: GET
    data_selector: charge
    params: {}
- name: charge
  endpoint:
    path: /charges/{id}
    method: GET
- name: async_batch
  endpoint:
    path: /async_batches/<batch_id>
    method: GET
    data_selector: async_batch
- name: charge_discount
  endpoint:
    path: /charges/{charge_id}/apply_discount
    method: POST
    data_selector: charge
    params:
      discount_code: string
      discount_id: integer
- name: async_batch
  endpoint:
    path: /async_batches/<batch_id>
    method: GET
    data_selector: async_batch
- name: charge
  endpoint:
    path: /charges/{charge_id}/skip
    method: POST
    data_selector: charge
- name: unskip_charge
  endpoint:
    path: /charges/{charge_id}/unskip
    method: POST
- name: charge_refund
  endpoint:
    path: /charges/{charge_id}/refund
    method: POST
    data_selector: charge
    params:
      amount: float
      full_refund: boolean
      retry: boolean
      error: string
      error_type: string
- name: addresses
  endpoint:
    path: /addresses
    method: GET
    params:
      include: charge_activities,customer,discount,payment_methods,subscriptions
- name: addresses_by_id
  endpoint:
    path: /addresses/{id}
    method: GET
    params:
      include: charge_activities,customer,discount,payment_methods,subscriptions
- name: charges
  endpoint:
    path: /charges
    method: GET
    params:
      include: charge_activities,customer,metafields,payment_methods
- name: charges_by_id
  endpoint:
    path: /charges/{id}
    method: GET
    params:
      include: charge_activities,customer,metafields,payment_methods
- name: customers
  endpoint:
    path: /customers
    method: GET
    params:
      include: addresses,metafields,payment_methods,subscriptions
- name: customers_by_id
  endpoint:
    path: /customers/{id}
    method: GET
    params:
      include: addresses,metafields,payment_methods,subscriptions
- name: orders
  endpoint:
    path: /orders
    method: GET
    params:
      include: customer,metafields
- name: orders_by_id
  endpoint:
    path: /orders/{id}
    method: GET
    params:
      include: customer,metafields
- name: payment_methods
  endpoint:
    path: /payment_methods
    method: GET
    params:
      include: addresses
- name: payment_methods_by_id
  endpoint:
    path: /payment_methods/{id}
    method: GET
    params:
      include: addresses
- name: subscriptions
  endpoint:
    path: /subscriptions
    method: GET
    params:
      include: address,charge_activities,customer,metafields,bundle_product,bundle_selections
- name: subscriptions_by_id
  endpoint:
    path: /subscriptions/{id}
    method: GET
    params:
      include: address,charge_activities,customer,metafields,bundle_product,bundle_selections
- name: charge_process
  endpoint:
    path: /charges/{id}/process
    method: POST
- name: charge_capture
  endpoint:
    path: /charge/{id}/capture_payment
    method: POST
- name: charge_capture
  endpoint:
    path: /charges/{id}/capture_payment
    method: POST
- name: checkout
  endpoint:
    path: /checkouts
    method: POST
- name: checkout
  endpoint:
    path: /checkouts
    method: POST
    data_selector: checkout
    params: {}
- name: checkout
  endpoint:
    path: /checkouts
    method: POST
    data_selector: checkout
    params:
      get_shipping_rates: true
- name: checkout
  endpoint:
    path: /checkouts/{checkout_id}
    method: GET
    data_selector: checkout
- name: checkout
  endpoint:
    path: /checkouts/{checkout_token}
    method: PUT
    params:
      get_shipping_rates: true
- name: shipping_rates
  endpoint:
    path: /checkouts/{checkout_id}/shipping_rates
    method: GET
    data_selector: shipping_rates
- name: process_checkout
  endpoint:
    path: /checkouts/{checkout_id}/process
    method: POST
    data_selector: checkout_charge
- name: collection
  endpoint:
    path: /collections
    method: POST
    data_selector: collection
    params:
      description: cat products new release
      sort_order: id-desc
      title: Cats Spring 2022
- name: collection
  endpoint:
    path: /collections/{collection_id}
    method: GET
    data_selector: collection
- name: address
  endpoint:
    path: /charges
    method: GET
    params:
      sort_by: id-desc
- name: async_batch
  endpoint:
    path: /charges
    method: GET
    params:
      sort_by: id-desc
- name: charge
  endpoint:
    path: /charges
    method: GET
    params:
      sort_by: id-asc
- name: customer
  endpoint:
    path: /charges
    method: GET
    params:
      sort_by: id-desc
- name: discount
  endpoint:
    path: /charges
    method: GET
    params:
      sort_by: id-desc
- name: metafield
  endpoint:
    path: /charges
    method: GET
    params:
      sort_by: id-desc
- name: onetime
  endpoint:
    path: /charges
    method: GET
    params:
      sort_by: id-desc
- name: order
  endpoint:
    path: /charges
    method: GET
    params:
      sort_by: id-desc
- name: plan
  endpoint:
    path: /charges
    method: GET
    params:
      sort_by: id-desc
- name: subscription
  endpoint:
    path: /charges
    method: GET
    params:
      sort_by: id-desc
- name: webhook
  endpoint:
    path: /charges
    method: GET
    params:
      sort_by: id-desc
- name: collection
  endpoint:
    path: /collections/{id}
    method: PUT
    data_selector: collection
- name: delete_collection
  endpoint:
    path: /collections/{id}
    method: DELETE
- name: list_collections
  endpoint:
    path: /async_batches/{batch_id}
    method: GET
    data_selector: async_batch
- name: list_collections_products
  endpoint:
    path: /async_batches/{batch_id}
    method: GET
    data_selector: async_batch
- name: add_collection_products
  endpoint:
    path: /collections/{collection_id}/collection_products-bulk
    method: POST
    data_selector: collection_products
    params:
      max_items_per_request: 250
- name: delete_collection_products
  endpoint:
    path: /collections/{collection_id}/collection_products-bulk
    method: DELETE
    data_selector: collection_products
    params:
      max_items_per_request: 250
- name: credit_account
  endpoint:
    path: /credits/{credit_account_id}
    method: GET
    data_selector: credit_account
- name: credit_accounts
  endpoint:
    path: /credit_accounts
    method: GET
    data_selector: credit_accounts
    params:
      customer_id: '{{ customer_id }}'
      limit: '50'
- name: credit_account
  endpoint:
    path: /credit_accounts/{credit_account_id}
    method: GET
    data_selector: credit_account
- name: credit_adjustments
  endpoint:
    path: /credit_adjustments
    method: GET
    data_selector: credit_adjustments
    params:
      limit: '50'
- name: credit_adjustment
  endpoint:
    path: /credit_adjustments/{credit_adjustment_id}
    method: GET
    data_selector: credit_adjustments
- name: credit_account_adjustments
  endpoint:
    path: /credit_accounts/{credit_account_id}/credit_adjustments
    method: GET
    data_selector: credit_adjustments
    params:
      limit: 50
- name: customer
  endpoint:
    path: /customers
    method: POST
    data_selector: customer
    params:
      email: fake@example.com
      first_name: Niels
      last_name: Bohr
- name: customer
  endpoint:
    path: /customers/{customer_id}
    method: GET
    data_selector: customer
- name: update_customer
  endpoint:
    path: /customers/{customer_id}
    method: PUT
    data_selector: customer
- name: delete_customer
  endpoint:
    path: /customers/{customer_id}
    method: DELETE
- name: list_customers
  endpoint:
    path: /customers
    method: GET
    data_selector: customer
- name: async_batch
  endpoint:
    path: /async_batches/<batch_id>
    method: GET
    data_selector: async_batch
- name: delivery_schedule
  endpoint:
    path: /customers/{customer_id}/delivery_schedule
    method: GET
    params:
      delivery_count_future: <delivery_count_future>
      future_interval: <future_interval>
      date_max: <date_max>
- name: credit_summary
  endpoint:
    path: /customers/{customer_id}/credit_summary
    method: GET
    data_selector: credit_summary
- name: discount
  endpoint:
    path: /discounts
    method: GET
    data_selector: discount
    params: {}
- name: discount
  endpoint:
    path: /discounts
    method: POST
    params:
      status: enabled
      value_type: percentage
      code: Discount1
- name: discount
  endpoint:
    path: /discounts/{discount_id}
    method: GET
    data_selector: discount
- name: update_discount
  endpoint:
    path: /discounts/{discount_id}
    method: PUT
    data_selector: discount
- name: delete_discount
  endpoint:
    path: /discounts/{discount_id}
    method: DELETE
- name: list_discounts
  endpoint:
    path: /discounts
    method: GET
    data_selector: discounts
- name: async_batch
  endpoint:
    path: /async_batches/<batch_id>
    method: GET
    data_selector: async_batch
- name: metafield
  endpoint:
    path: /metafields
    method: GET
    data_selector: metafield
- name: metafield
  endpoint:
    path: /metafields
    method: POST
    data_selector: metafield
- name: async_batch
  endpoint:
    path: /async_batches/<batch_id>
    method: GET
    data_selector: async_batch
- name: metafield_update
  endpoint:
    path: /metafields/{id}
    method: PUT
    data_selector: metafield
- name: metafield_delete
  endpoint:
    path: /metafields/{id}
    method: DELETE
- name: list_metafields
  endpoint:
    path: /async_batches/{batch_id}
    method: GET
    data_selector: async_batch
- name: notifications
  endpoint:
    path: /{customer_id}/notifications
    method: POST
- name: send_email_notification
  endpoint:
    path: /customers/{customer_id}/notifications
    method: POST
    data_selector: '{ "type": "email", "template_type": "upcoming_charge", "template_vars":
      { "address_id": 1234567890, "charge_id": 9876543210 } }'
- name: onetime
  endpoint:
    path: /onetime
    method: GET
    data_selector: onetime
- name: onetime_create
  endpoint:
    path: /onetimes
    method: POST
    data_selector: onetime
- name: onetime_retrieve
  endpoint:
    path: /onetimes/{id}
    method: GET
    data_selector: onetime
- name: onetime_update
  endpoint:
    path: /onetimes/16909886
    method: PUT
    data_selector: onetime
- name: onetime_delete
  endpoint:
    path: /onetimes/16665185
    method: DELETE
    data_selector: ''
- name: onetimes
  endpoint:
    path: /onetimes
    method: GET
    data_selector: onetimes
    params:
      address_id: string
      address_ids: string
      created_at_max: datetime
      created_at_min: datetime
      customer_id: string
      include_cancelled: boolean
      limit: string
      page: string
      external_variant_id: string
      updated_at_max: datetime
      updated_at_min: datetime
      ids: array
- name: order
  endpoint:
    path: /orders
    method: GET
    data_selector: order
- name: address
  endpoint:
    path: /addresses
    method: POST
    data_selector: address
    params:
      customer_id: integer
      address1: string
      address2: string
      city: string
      company: string
      country_code: string
      discounts: array
      first_name: string
      last_name: string
      order_note: string
      payment_method_id: integer
      phone: string
      presentment_currency: string
      province: string
      shipping_lines_override: array
      zip: string
- name: order
  endpoint:
    path: /orders/{order_id}
    method: GET
    data_selector: order
- name: clone_order
  endpoint:
    path: /orders/{order_id}/clone
    method: POST
    data_selector: order
    params:
      scheduled_at: future_date
- name: order_delay
  endpoint:
    path: /orders/{order_id}/delay
    method: POST
- name: order
  endpoint:
    path: /orders/{order_id}
    method: PUT
    data_selector: order
    params:
      billing_address:
        city: string
        first_name: string
        last_name: string
        zip: string
      customer: object
      line_items: array
      external_order_id: object
      scheduled_at: datetime
      shipping_address: object
      status: string
- name: delete_order
  endpoint:
    path: /orders/{order_id}
    method: DELETE
- name: list_orders
  endpoint:
    path: /async_batches/{batch_id}
    method: GET
- name: payment_method
  endpoint:
    path: /payment_method
    method: GET
    data_selector: payment_method
    params: {}
- name: payment_method
  endpoint:
    path: /payment_methods
    method: POST
    data_selector: payment_method
    params:
      customer_id: integer
      default: boolean
      payment_type: string
      processor_customer_token: string
      processor_name: string
      processor_payment_method_token: string
- name: payment_method
  endpoint:
    path: /payment_methods/{id}
    method: GET
    data_selector: payment_method
- name: update_payment_method
  endpoint:
    path: /payment_methods/{id}
    method: PUT
    data_selector: payment_method
- name: delete_payment_method
  endpoint:
    path: /payment_methods/{id}
    method: DELETE
- name: async_batches
  endpoint:
    path: /async_batches/<batch_id>
    method: GET
    data_selector: async_batch
- name: plans
  endpoint:
    path: /plans
    method: POST
- name: plan
  endpoint:
    path: /products
    method: GET
    data_selector: plan
    params: {}
- name: address
  endpoint:
    path: /addresses/{address_id}
    method: GET
    data_selector: address
- name: update_address
  endpoint:
    path: /addresses/{address_id}
    method: POST
- name: plan
  endpoint:
    path: /plans
    method: POST
    data_selector: plan
    params:
      discount_amount: '10'
      discount_type: percentage
      external_product_id:
        ecommerce: '2103271587891'
      sort_order: 1
      subscription_preferences:
        charge_interval_frequency: 30
        expire_after_specific_number_of_charges: 6
        interval_unit: day
        order_day_of_month: 1
        order_interval_frequency: 30
      title: Concert T-Shirt
      type: subscription
- name: plan_update
  endpoint:
    path: /plans/{plan_id}
    method: PUT
    data_selector: plan
- name: plan_delete
  endpoint:
    path: /plans/{plan_id}
    method: DELETE
- name: plans
  endpoint:
    path: /plans
    method: GET
    data_selector: plans
    params:
      external_product_id: '{{ external_product_id }}'
      ids: '{{ ids }}'
      updated_at_max: '{{ updated_at_max }}'
      updated_at_min: '{{ updated_at_min }}'
      type: '{{ type }}'
- name: plans_bulk
  endpoint:
    path: /products/2103271587891/plans-bulk
    method: POST
- name: bulk_update_plans
  endpoint:
    path: /products/2103271587891/plans-bulk
    method: PUT
    data_selector: plans
    params:
      limit: 20
- name: bulk_delete_plans
  endpoint:
    path: /products/2103271587891/plans-bulk
    method: DELETE
    data_selector: plans
    params:
      limit: 20
- name: product
  endpoint:
    path: /products
    method: GET
    data_selector: products
    params:
      incremental: external_updated_at
- name: product
  endpoint:
    path: /
    method: POST
    data_selector: product
    params:
      external_product_id: unique numeric identifier
      brand: brand name
      external_created_at: datetime
      external_updated_at: datetime
      images: array of urls
      options: array of options
      published_at: datetime
      requires_shipping: boolean
      title: product title
      variants: array of variants
      vendor: vendor name
- name: product
  endpoint:
    path: /products/{external_product_id}
    method: GET
    data_selector: product
- name: product
  endpoint:
    path: /products/{product_id}
    method: PUT
    data_selector: product
    params: {}
- name: product_deletion
  endpoint:
    path: /products/{product_id}
    method: DELETE
- name: product_list
  endpoint:
    path: /products/
    method: GET
    data_selector: products
    params:
      external_product_ids: comma-separated-values
- name: address_update
  endpoint:
    path: /addresses/{address_id}
    method: PUT
    data_selector: address
    params:
      address1: string
      address2: string
      city: string
      company: string
      country_code: string
      discounts: array
      first_name: string
      last_name: string
      order_note: string
      payment_method_id: integer
      phone: string
      province: string
      zip: string
- name: address_delete
  endpoint:
    path: /addresses/{address_id}
    method: DELETE
- name: address_list
  endpoint:
    path: /addresses
    method: GET
- name: retention_strategy
  endpoint:
    path: /retention_strategies
    method: POST
    data_selector: retention_strategy
    params:
      incentive_type: swap_product
      prevention_text: Would you like to swap the product out for another item?
      reason: I want a different product or variety
- name: retention_strategy
  endpoint:
    path: /retention_strategies/{retention_strategy_id}
    method: GET
    data_selector: retention_strategy
- name: update_retention_strategy
  endpoint:
    path: /retention_strategies/12345
    method: PUT
    data_selector: retention_strategy
- name: delete_retention_strategy
  endpoint:
    path: /retention_strategies/12345
    method: DELETE
- name: list_retention_strategies
  endpoint:
    path: /retention_strategies
    method: GET
    data_selector: retention_strategies
- name: store
  endpoint:
    path: /store
    method: GET
    data_selector: store
- name: subscription
  endpoint:
    path: /subscriptions
    method: GET
    data_selector: subscription
    params: {}
- name: subscription
  endpoint:
    path: /
    method: POST
    data_selector: subscription
    params:
      address_id: integer
      charge_interval_frequency: integer
      next_charge_scheduled_at: datetime
      order_interval_frequency: integer
      order_interval_unit: string
      quantity: integer
      external_variant_id: object
      status: string
- name: subscription
  endpoint:
    path: /subscriptions/{subscription_id}
    method: GET
    data_selector: subscription
- name: subscription
  endpoint:
    path: /subscriptions/{subscription_id}
    method: PUT
    data_selector: subscription
    params:
      commit: false
      force_update: null
- name: delete_subscription
  endpoint:
    path: /subscriptions/{subscription_id}
    method: DELETE
- name: list_subscriptions
  endpoint:
    path: /async_batches/{batch_id}
    method: GET
- name: update_subscription_next_charge_date
  endpoint:
    path: /subscriptions/{subscription_id}/set_next_charge_date
    method: POST
- name: change_subscription_address
  endpoint:
    path: /subscriptions/{subscription_id}/change_address
    method: POST
    data_selector: subscription
- name: cancel_subscription
  endpoint:
    path: /subscriptions/{subscription_id}/cancel
    method: POST
    data_selector: subscription
    params:
      cancellation_reason: other reason
- name: addresses
  endpoint:
    path: /addresses
    method: GET
    data_selector: addresses
    params:
      created_at_max: datetime
      created_at_min: datetime
      customer_id: integer
      discount_code: string
      discount_id: string
      ids: string
      limit: string
      page: string
      updated_at_max: string
      updated_at_min: string
      is_active: boolean
- name: activate_subscription
  endpoint:
    path: /subscriptions/{subscription_id}/activate
    method: POST
    data_selector: subscription
- name: gift_skipped_subscription
  endpoint:
    path: /subscriptions/skip_gift
    method: POST
    data_selector: onetimes
- name: webhook
  endpoint:
    method: POST
    params:
      included_objects:
      - addresses
      - collections
      - customer
      - metafields
- name: create_webhook
  endpoint:
    path: /webhooks
    method: POST
    data_selector: webhook
- name: retrieve_webhook
  endpoint:
    path: /webhooks/{id}
    method: GET
    data_selector: webhook
- name: update_webhook
  endpoint:
    path: /webhooks/{webhook_id}
    method: PUT
    data_selector: webhook
    params:
      address: https://request.in/foo
      topic: subscription/created
      version: 2021-01
      included_objects:
      - addresses
      - collections
      - customer
      - metafields
- name: delete_webhook
  endpoint:
    path: /webhooks/{webhook_id}
    method: DELETE
- name: list_webhooks
  endpoint:
    path: /webhooks
    method: GET
    data_selector: webhooks
- name: test_webhook
  endpoint:
    path: /webhooks/{webhook_id}/test
    method: POST
- name: charge
  endpoint:
    path: /webhooks/charge
    method: GET
- name: checkout
  endpoint:
    path: /webhooks/checkout
    method: GET
- name: customer
  endpoint:
    path: /webhooks/customer
    method: GET
- name: onetime
  endpoint:
    path: /webhooks/onetime
    method: GET
- name: order
  endpoint:
    path: /webhooks/order
    method: GET
- name: plan
  endpoint:
    method: undefined
- name: subscription
  endpoint:
    method: PUT
    path: /subscriptions/<subscription_id>set_next_charge_date
- name: store
  endpoint:
    method: undefined
- name: async_batch
  endpoint:
    path: /async_batch
    method: POST
    data_selector: async_batch
    params:
      batch_type:
      - discount_create
      - discount_update
      - discount_delete
      - bulk_plans_create
      - bulk_plans_update
      - bulk_plans_delete
      - onetime_create
      - onetime_delete
- name: create_batch
  endpoint:
    path: /async_batches
    method: POST
    data_selector: async_batch
- name: retrieve_batch
  endpoint:
    path: /async_batches/<batch_id>
    method: GET
    data_selector: async_batch
- name: async_batches
  endpoint:
    path: /async_batches
    method: GET
    data_selector: async_batches
- name: process_async_batch
  endpoint:
    path: /async_batches/{id}/process
    method: POST
- name: async_batch_tasks
  endpoint:
    path: /tasks
    method: GET
    data_selector: tasks
- name: merge_addresses
  endpoint:
    path: /addresses/merge
    method: POST
    data_selector: address
    params: {}
- name: batch_task
  endpoint:
    path: /async_batches/<batch_id>/tasks
    method: POST
    params:
      batch_type: discount_create
- name: batch_tasks
  endpoint:
    path: /async_batches/{batch_id}/tasks
    method: GET
    data_selector: async_batch_tasks
    params:
      idsstring: comma separated values
- name: token_information
  endpoint:
    path: /token_information
    method: GET
    data_selector: token_information
- name: account
  endpoint:
    path: /accounts/{account_id}
    method: GET
    data_selector: account
- name: accounts
  endpoint:
    path: /accounts
    method: GET
    data_selector: accounts
- name: events
  endpoint:
    path: /events
    method: GET
    data_selector: event
- name: events
  endpoint:
    path: /events
    method: GET
    data_selector: events
    params:
      created_at_min: string
      created_at_max: string
      object_type: string
      object_id: integer
      verbs: string
      customer_id: integer
      origin: string
- name: skip_charge
  endpoint:
    path: /addresses/{address_id}/charges/skip
    method: POST
    data_selector: charge
    params:
      date:
        required: true
      subscription_ids:
        required: true
- name: bundle_selection
  endpoint:
    path: /bundle_selections
    method: GET
    data_selector: bundle_selection
- name: async_batch
  endpoint:
    path: /async_batches/<batch_id>
    method: GET
    data_selector: async_batch
- name: charge
  endpoint:
    path: /charges
    method: GET
    data_selector: charge
    params:
      incremental: updated_at
- name: charge
  endpoint:
    path: /charges/{id}
    method: GET
    data_selector: charge
- name: charges
  endpoint:
    path: /async_batches/<batch_id>
    method: GET
- name: async_batch
  endpoint:
    path: /async_batches/<batch_id>
    method: GET
    data_selector: async_batch
- name: charges_skip
  endpoint:
    path: /charges/{charge_id}/skip
    method: POST
    data_selector: charge
- name: unskip_charge
  endpoint:
    path: /charges/{charge_id}/unskip
    method: POST
    data_selector: charge
- name: charge_refund
  endpoint:
    path: /charges/{charge_id}/refund
    method: POST
    data_selector: charge
    params:
      amount: '11.00'
      full_refund: true
      retry: true
      error: insufficient_inventory
      error_type: string
- name: addresses
  endpoint:
    path: /addresses
    method: GET
    params:
      include: charge_activities,customer,discount,payment_methods,subscriptions
- name: addresses_by_id
  endpoint:
    path: /addresses/{id}
    method: GET
    params:
      include: charge_activities,customer,discount,payment_methods,subscriptions
- name: charges
  endpoint:
    path: /charges
    method: GET
    params:
      include: charge_activities (beta),customer,metafields,payment_methods
- name: charges_by_id
  endpoint:
    path: /charges/{id}
    method: GET
    params:
      include: charge_activities (beta),customer,metafields,payment_methods
- name: customers
  endpoint:
    path: /customers
    method: GET
    params:
      include: addresses,metafields,payment_methods,subscriptions
- name: customers_by_id
  endpoint:
    path: /customers/{id}
    method: GET
    params:
      include: addresses,metafields,payment_methods,subscriptions
- name: orders
  endpoint:
    path: /orders
    method: GET
    params:
      include: customer,metafields
- name: orders_by_id
  endpoint:
    path: /orders/{id}
    method: GET
    params:
      include: customer,metafields
- name: payment_methods
  endpoint:
    path: /payment_methods
    method: GET
    params:
      include: addresses
- name: payment_methods_by_id
  endpoint:
    path: /payment_methods/{id}
    method: GET
    params:
      include: addresses
- name: subscriptions
  endpoint:
    path: /subscriptions
    method: GET
    params:
      include: address,charge_activities,customer,metafields,bundle_product,bundle_selections
- name: subscriptions_by_id
  endpoint:
    path: /subscriptions/{id}
    method: GET
    params:
      include: address,charge_activities,customer,metafields,bundle_product,bundle_selections
- name: charge_process
  endpoint:
    path: /charges/{id}/process
    method: POST
    data_selector: charge
- name: charge_capture_payment
  endpoint:
    path: /charge/{id}/capture_payment
    method: POST
- name: charge_capture
  endpoint:
    path: /charges/{id}/capture_payment
    method: POST
    data_selector: charge
- name: checkout
  endpoint:
    method: POST
- name: checkout
  endpoint:
    method: PUT
- name: checkout
  endpoint:
    method: GET
- name: checkout
  endpoint:
    path: /checkouts
    method: POST
    data_selector: checkout
- name: checkout
  endpoint:
    path: /checkouts
    method: POST
    data_selector: checkout
    params:
      get_shipping_rates: true
- name: checkout
  endpoint:
    path: /checkouts/{checkout_id}
    method: GET
    data_selector: checkout
- name: checkout
  endpoint:
    path: /checkouts/<checkout_token>
    method: PUT
    params:
      get_shipping_rates: true
- name: shipping_rates
  endpoint:
    path: /checkouts/{checkout_id}/shipping_rates
    method: GET
    data_selector: shipping_rates
- name: process_checkout
  endpoint:
    path: /checkouts/{checkout_id}/process
    method: POST
    params:
      payment_processor:
      - stripe
      - braintree
      - authorize
      payment_type:
      - CREDIT_CARD
      - PAYPAL
      - APPLE_PAY
      - GOOGLE_PAY
      - SEPA_DEBIT
      payment_token: <dynamic>
- name: collections
  endpoint:
    path: /collections
    method: GET
- name: collection
  endpoint:
    path: /collections
    method: POST
    data_selector: collection
    params:
      sort_order: id-desc
- name: collection
  endpoint:
    path: /collections/{collection_id}
    method: GET
    data_selector: collection
- name: address
  endpoint:
    path: /charges
    method: GET
    data_selector: .
    params:
      sort_by: id-desc
- name: async_batch
  endpoint:
    path: /charges
    method: GET
    data_selector: .
    params:
      sort_by: id-desc
- name: charge
  endpoint:
    path: /charges
    method: GET
    data_selector: .
    params:
      sort_by: id-asc
- name: customer
  endpoint:
    path: /charges
    method: GET
    data_selector: .
    params:
      sort_by: id-desc
- name: discount
  endpoint:
    path: /charges
    method: GET
    data_selector: .
    params:
      sort_by: id-desc
- name: metafield
  endpoint:
    path: /charges
    method: GET
    data_selector: .
    params:
      sort_by: id-desc
- name: onetime
  endpoint:
    path: /charges
    method: GET
    data_selector: .
    params:
      sort_by: id-desc
- name: order
  endpoint:
    path: /charges
    method: GET
    data_selector: .
    params:
      sort_by: id-desc
- name: plan
  endpoint:
    path: /charges
    method: GET
    data_selector: .
    params:
      sort_by: id-desc
- name: subscription
  endpoint:
    path: /charges
    method: GET
    data_selector: .
    params:
      sort_by: id-desc
- name: webhook
  endpoint:
    path: /charges
    method: GET
    data_selector: .
    params:
      sort_by: id-desc
- name: collection
  endpoint:
    path: /collections/{collection_id}
    method: PUT
    params:
      description: string
      sort_order: string
      title: string
- name: collection_delete
  endpoint:
    path: /collections/{collection_id}
    method: DELETE
- name: collections_list
  endpoint:
    path: /async_batches/{batch_id}
    method: GET
- name: add_collection_products
  endpoint:
    path: /collections/{collection_id}/collection_products-bulk
    method: POST
- name: delete_collection_products
  endpoint:
    path: /collections/{collection_id}/collection_products-bulk
    method: DELETE
- name: credit_account
  endpoint:
    path: /credits/{credit_account_id}
    method: GET
- name: credit_accounts
  endpoint:
    path: /credit_accounts
    method: GET
    data_selector: credit_accounts
    params:
      customer_id: '{{ customer_id }}'
      limit: '{{ limit }}'
- name: credit_account
  endpoint:
    path: /credit_accounts/{credit_account_id}
    method: GET
    data_selector: credit_account
- name: credit_adjustments
  endpoint:
    path: /credit_adjustments
    method: GET
    data_selector: credit_adjustments
    params:
      limit: '{{ limit }}'
- name: credit_adjustment
  endpoint:
    path: /credit_adjustments/{credit_adjustment_id}
    method: GET
    data_selector: credit_adjustments
- name: credit_account_adjustments
  endpoint:
    path: /credit_accounts/{credit_account_id}/credit_adjustments
    method: GET
    data_selector: credit_adjustments
    params:
      limit: '250'
- name: customer
  endpoint:
    path: /customers
    method: POST
    data_selector: customer
- name: customer
  endpoint:
    path: /customers/37657002
    method: GET
    data_selector: customer
- name: update_customer
  endpoint:
    path: /customers/37657002
    method: PUT
    data_selector: customer
- name: delete_customer
  endpoint:
    path: /customers/37657002
    method: DELETE
- name: async_batch
  endpoint:
    path: /async_batches/<batch_id>
    method: GET
    data_selector: async_batch
- name: customer_delivery_schedule
  endpoint:
    path: /customers/{customer_id}/delivery_schedule
    method: GET
    params:
      delivery_count_future: integer
      future_interval: integer
      date_max: string
- name: credit_summary
  endpoint:
    path: /customers/{customer_id}/credit_summary
    method: GET
    data_selector: credit_summary
- name: discount
  endpoint:
    path: /discounts
    method: GET
    data_selector: discount
    params: {}
- name: discount
  endpoint:
    path: /discounts
    method: POST
    data_selector: discount
- name: address
  endpoint:
    path: /services/data/vXX.X/sobjects/Address
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: discount
  endpoint:
    path: /discounts/{discount_id}
    method: GET
    data_selector: discount
- name: discount
  endpoint:
    path: /discounts
    method: GET
- name: update_discount
  endpoint:
    path: /discounts/{discount_id}
    method: PUT
    params:
      starts_at: '2021-11-01T00:00:00+00:00'
- name: delete_discount
  endpoint:
    path: /discounts/{discount_id}
    method: DELETE
- name: async_batch
  endpoint:
    path: /async_batches/<batch_id>
    method: GET
    data_selector: async_batch
- name: metafield
  endpoint:
    path: /metafields
    method: GET
    params:
      include: metafields
- name: metafield
  endpoint:
    path: /metafields
    method: POST
    data_selector: metafield
    params:
      description: string
      key: string* Required
      namespace: string* Required
      owner_id: string* Required
      owner_resource: string* Required
      value: string* Required
      value_type: string* Required
- name: async_batches
  endpoint:
    path: /async_batches/<batch_id>
    method: GET
    data_selector: async_batch
- name: metafield_update
  endpoint:
    path: /metafields/{id}
    method: PUT
    data_selector: metafield
    params: {}
- name: metafield_delete
  endpoint:
    path: /metafields/{id}
    method: DELETE
    data_selector: {}
- name: list_metafields
  endpoint:
    path: /async_batches/{batch_id}
    method: GET
    data_selector: async_batch
    params: {}
- name: send_email_notification
  endpoint:
    path: /customers/{customer_id}/notifications
    method: POST
    data_selector: '{}'
- name: onetime
  endpoint:
    path: /onetimes
    method: POST
    data_selector: onetime
    params:
      address_id:
        type: integer
        required: true
      add_to_next_charge:
        type: boolean
      external_product_id:
        type: object
      external_variant_id:
        type: object
        required: true
      next_charge_scheduled_at:
        type: datetime
        required: true
      price:
        type: string
        required: true
      product_title:
        type: string
        required: true
      properties:
        type: string
      quantity:
        type: integer
        required: true
      sku:
        type: string
- name: onetime_retrieve
  endpoint:
    path: /onetimes/{id}
    method: GET
    data_selector: onetime
- name: update_onetime
  endpoint:
    path: /onetimes/{id}
    method: PUT
    data_selector: onetime
    params:
      address_id: integer
      next_charge_scheduled_at: datetime
      price: string
      product_title: string
      properties: array
      quantity: integer
      external_variant_id: object
      sku: string
      variant_title: string
- name: delete_onetime
  endpoint:
    path: /onetimes/{id}
    method: DELETE
- name: onetimes
  endpoint:
    path: /onetimes
    method: GET
    data_selector: onetimes
    params:
      address_id: string
      address_ids: string
      created_at_max: datetime
      created_at_min: datetime
      customer_id: string
      include_cancelled: boolean
      limit: string
      page: string
      external_variant_id: string
      updated_at_max: datetime
      updated_at_min: datetime
      ids: array
- name: order
  endpoint:
    path: /services/data/vXX.X/sobjects/Order
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: address
  endpoint:
    path: /addresses
    method: POST
    data_selector: address
    params:
      customer_id: integer
      address1: string
      city: string
      country_code: string
      first_name: string
      last_name: string
      phone: string
      province: string
      zip: string
- name: order
  endpoint:
    path: /orders/{order_id}
    method: GET
    data_selector: order
- name: clone_order
  endpoint:
    path: /orders/{order_id}/clone
    method: POST
    data_selector: order
    params:
      scheduled_at: datetime
- name: order_delay
  endpoint:
    path: /orders/{id}/delay
    method: POST
- name: order
  endpoint:
    path: /orders/{order_id}
    method: PUT
    data_selector: order
- name: order_deletion
  endpoint:
    path: /orders/{order_id}
    method: DELETE
- name: list_orders
  endpoint:
    path: /async_batches/{batch_id}
    method: GET
    data_selector: async_batch
- name: payment_method
  endpoint:
    path: /payment_method
    method: GET
    data_selector: payment_method
    params: {}
- name: payment_method
  endpoint:
    path: /payment_methods
    method: POST
    data_selector: payment_method
- name: payment_method
  endpoint:
    path: /payment_methods/{id}
    method: GET
    data_selector: payment_method
- name: update_payment_method
  endpoint:
    path: /payment_methods/{id}
    method: PUT
    data_selector: payment_method
- name: delete_payment_method
  endpoint:
    path: /payment_methods/{id}
    method: DELETE
- name: async_batches
  endpoint:
    path: /async_batches/<batch_id>
    method: GET
    data_selector: async_batch
- name: plan
  endpoint:
    path: /plans
    method: GET
    data_selector: plan
- name: address
  endpoint:
    path: /addresses/{address_id}
    method: GET
    data_selector: address
- name: update_address
  endpoint:
    path: /addresses/{address_id}
    method: POST
- name: plan
  endpoint:
    path: /plans
    method: POST
    data_selector: plan
    params:
      discount_type: percentage
      type:
      - subscription
      - prepaid
      - onetime
- name: plan_update
  endpoint:
    path: /plans/16909886
    method: PUT
- name: plan_delete
  endpoint:
    path: /plans/321654
    method: DELETE
- name: plans
  endpoint:
    path: /plans
    method: GET
    data_selector: plans
    params:
      limit: 50
      updated_at_min: '{{ updated_at_min }}'
      updated_at_max: '{{ updated_at_max }}'
      ids: '{{ ids }}'
      external_product_id: '{{ external_product_id }}'
      type: '{{ type }}'
- name: plans_bulk
  endpoint:
    path: /products/2103271587891/plans-bulk
    method: POST
    data_selector: plans
    params:
      limit: 20
- name: bulk_update_plans
  endpoint:
    path: /products/2103271587891/plans-bulk
    method: PUT
    data_selector: plans
    params:
      limit: 20
- name: bulk_delete_plans
  endpoint:
    path: /products/2103271587891/plans-bulk
    method: DELETE
    data_selector: plans
    params:
      limit: 20
- name: product
  endpoint:
    path: /products
    method: GET
    data_selector: products
    params:
      published_at: datetime
      requires_shipping: boolean
      brand: string
      external_created_at: datetime
      external_updated_at: datetime
      title: string
      vendor: string
- name: product
  endpoint:
    path: /products
    method: POST
    data_selector: product
- name: product
  endpoint:
    path: /products/{external_product_id}
    method: GET
    data_selector: product
- name: product_update
  endpoint:
    path: /products/{product_id}
    method: PUT
    data_selector: product
- name: delete_product
  endpoint:
    path: /products/{product_id}
    method: DELETE
- name: list_products
  endpoint:
    path: /products/
    method: GET
    data_selector: products
    params:
      external_product_ids: comma-separated IDs
- name: address_update
  endpoint:
    path: /addresses/{address_id}
    method: PUT
    data_selector: address
- name: address_delete
  endpoint:
    path: /addresses/{address_id}
    method: DELETE
- name: address_list
  endpoint:
    path: /addresses
    method: GET
- name: retention_strategy
  endpoint:
    path: /retention_strategies
    method: POST
    data_selector: retention_strategy
    params:
      incentive_type: swap_product
      prevention_text: Would you like to swap the product out for another item?
      reason: I want a different product or variety
- name: retrieve_retention_strategy
  endpoint:
    path: /retention_strategies/{retention_strategy_id}
    method: GET
    data_selector: retention_strategy
- name: update_retention_strategy
  endpoint:
    path: /retention_strategies/12345
    method: PUT
- name: delete_retention_strategy
  endpoint:
    path: /retention_strategies/12345
    method: DELETE
- name: list_retention_strategies
  endpoint:
    path: /retention_strategies
    method: GET
- name: store
  endpoint:
    path: /store
    method: GET
    data_selector: store
- name: subscription
  endpoint:
    path: /
    method: POST
    data_selector: subscription
    params:
      address_id: null
      charge_interval_frequency: null
      next_charge_scheduled_at: null
      order_interval_frequency: null
      order_interval_unit: null
      quantity: null
      external_variant_id: null
      status: null
- name: subscription
  endpoint:
    path: /subscriptions/{subscription_id}
    method: GET
    data_selector: subscription
- name: update_subscription
  endpoint:
    path: /subscriptions/{subscription_id}
    method: PUT
    data_selector: subscription
    params:
      commit: false
      force_update: false
- name: delete_subscription
  endpoint:
    path: /subscriptions/{subscription_id}
    method: DELETE
- name: list_subscriptions
  endpoint:
    path: /async_batches/{batch_id}
    method: GET
- name: change_subscription_next_charge_date
  endpoint:
    path: /subscriptions/{subscription_id}/set_next_charge_date
    method: POST
    params:
      date: required
- name: subscription_address_change
  endpoint:
    path: /subscriptions/{subscription_id}/change_address
    method: POST
    data_selector: subscription
- name: subscription_cancellation
  endpoint:
    path: /subscriptions/{subscription_id}/cancel
    method: POST
    data_selector: subscription
    params:
      cancellation_reason: '{{ cancellation_reason }}'
      cancellation_reason_comments: '{{ cancellation_reason_comments }}'
      send_email: '{{ send_email }}'
- name: addresses
  endpoint:
    path: /addresses
    method: GET
    data_selector: addresses
    params:
      created_at_max: datetime
      created_at_min: datetime
      updated_at_max: string
      updated_at_min: string
      customer_id: integer
      discount_id: string
      discount_code: string
      ids: string
      is_active: boolean
      limit: string
- name: activate_subscription
  endpoint:
    path: /subscriptions/27363808/activate
    method: POST
- name: gift_skipped_subscription
  endpoint:
    path: /subscriptions/skip_gift
    method: POST
- name: webhook
  endpoint:
    path: /webhook
    method: POST
    data_selector: webhook
    params:
      topic: subscription/created
      version: 2021-11
      included_objects:
      - addresses
      - collections
      - customer
      - metafields
- name: webhook
  endpoint:
    path: /webhooks
    method: POST
    data_selector: webhook
    params:
      address: https://request.in/foo
      topic: subscription/created
- name: retrieve_webhook
  endpoint:
    path: /webhooks/19451
    method: GET
    data_selector: webhook
- name: update_webhook
  endpoint:
    path: /webhooks/958
    method: PUT
    data_selector: webhook
- name: delete_webhook
  endpoint:
    path: /webhooks/958
    method: DELETE
- name: list_webhooks
  endpoint:
    path: /webhooks
    method: GET
    data_selector: webhooks
- name: test_webhook
  endpoint:
    path: /webhooks/<webhook_id>/test
    method: POST
- name: charge
  endpoint:
    path: /webhooks/charge
    method: POST
- name: checkout
  endpoint:
    path: /webhooks/checkout
    method: POST
- name: customer
  endpoint:
    path: /webhooks/customer
    method: POST
- name: onetime
  endpoint:
    path: /webhooks/onetime
    method: POST
- name: order
  endpoint:
    path: /webhooks/order
    method: POST
- name: plan_created
  endpoint:
    path: /webhooks/plan/created
    method: POST
- name: plan_deleted
  endpoint:
    path: /webhooks/plan/deleted
    method: POST
- name: plan_updated
  endpoint:
    path: /webhooks/plan/updated
    method: POST
- name: subscription_activated
  endpoint:
    path: /webhooks/subscription/activated
    method: POST
- name: subscription_cancelled
  endpoint:
    path: /webhooks/subscription/cancelled
    method: POST
- name: subscription_created
  endpoint:
    path: /webhooks/subscription/created
    method: POST
- name: subscription_deleted
  endpoint:
    path: /webhooks/subscription/deleted
    method: POST
- name: subscription_skipped
  endpoint:
    path: /webhooks/subscription/skipped
    method: POST
- name: subscription_unskipped
  endpoint:
    path: /webhooks/subscription/unskipped
    method: POST
- name: subscription_updated
  endpoint:
    path: /webhooks/subscription/updated
    method: POST
- name: subscription_swapped
  endpoint:
    path: /webhooks/subscription/swapped
    method: POST
- name: subscription_paused
  endpoint:
    path: /webhooks/subscription/paused
    method: POST
- name: app_uninstalled
  endpoint:
    path: /webhooks/app/uninstalled
    method: POST
- name: recharge_uninstalled
  endpoint:
    path: /webhooks/recharge/uninstalled
    method: POST
- name: store_updated
  endpoint:
    path: /webhooks/store/updated
    method: POST
- name: async_batch
  endpoint:
    path: /async_batches
    method: POST
    data_selector: async_batch
    params:
      batch_type:
        discount_create: null
        discount_update: null
        discount_delete: null
        bulk_plans_create: null
        bulk_plans_update: null
        bulk_plans_delete: null
        onetime_create: null
        onetime_delete: null
- name: create_batch
  endpoint:
    path: /async_batches
    method: POST
    data_selector: async_batch
    params:
      batch_type: desired_batch_type
- name: retrieve_batch
  endpoint:
    path: /async_batches/<batch_id>
    method: GET
    data_selector: async_batch
- name: async_batches
  endpoint:
    path: /async_batches
    method: GET
    data_selector: async_batches
- name: process_async_batch
  endpoint:
    path: /async_batches/{batch_id}/process
    method: POST
- name: async_batch_tasks
  endpoint:
    path: /async_batches/{batch_id}/tasks
    method: GET
- name: task
  endpoint:
    data_selector: body
- name: merge_addresses
  endpoint:
    path: /addresses/merge
    method: POST
    data_selector: address
- name: batch_task
  endpoint:
    path: /async_batches/<batch_id>/tasks
    method: POST
    params:
      version: 2021-11
- name: async_batch_tasks
  endpoint:
    path: /async_batches/{batch_id}/tasks
    method: GET
    data_selector: async_batch_tasks
    params:
      idsstring: '{{ idsstring }}'
- name: token_information
  endpoint:
    path: /token_information
    method: GET
    data_selector: token_information
- name: account
  endpoint:
    path: /accounts/331512
    method: GET
    data_selector: account
- name: accounts
  endpoint:
    path: /accounts
    method: GET
    data_selector: accounts
- name: events
  endpoint:
    path: /events
    method: GET
    data_selector: event
- name: events
  endpoint:
    path: /events
    method: GET
    data_selector: events
    params:
      created_at_min: string
      created_at_max: string
      object_type: string
      object_id: integer
      verbs: string
      customer_id: integer
      origin: string
- name: skip_charge
  endpoint:
    path: /addresses/{address_id}/charges/skip
    method: POST
    params:
      date: '2022-09-15'
      subscription_ids:
      - 27363808
      - 27363809
- name: async_batches
  endpoint:
    path: /async_batches/<batch_id>
    method: GET
    data_selector: async_batch
- name: charge
  endpoint:
    path: /charges
    method: GET
    data_selector: charge
    params: {}
- name: charge
  endpoint:
    path: /charges/{id}
    method: GET
    data_selector: charge
- name: charges
  endpoint:
    path: /async_batches/<batch_id>
    method: GET
- name: discount_application
  endpoint:
    path: /charges/{charge_id}/apply_discount
    method: POST
    data_selector: charge
    params:
      discount_code: string
      discount_id: integer
- name: async_batch
  endpoint:
    path: /async_batches/<batch_id>
    method: GET
    data_selector: async_batch
- name: charge_skip
  endpoint:
    path: /charges/{charge_id}/skip
    method: POST
    data_selector: charge
- name: unskip_charge
  endpoint:
    path: /charges/{charge_id}/unskip
    method: POST
- name: charge
  endpoint:
    path: /charges/{charge_id}/refund
    method: POST
    data_selector: charge
    params:
      amount: null
      full_refund: null
      retry: null
      error: null
      error_type: null
- name: addresses
  endpoint:
    path: /addresses
    method: GET
    params:
      include: charge_activities,customer,discount,payment_methods,subscriptions
- name: addresses_id
  endpoint:
    path: /addresses/{id}
    method: GET
    params:
      include: charge_activities,customer,discount,payment_methods,subscriptions
- name: charges
  endpoint:
    path: /charges
    method: GET
    params:
      include: charge_activities,customer,metafields,payment_methods
- name: charges_id
  endpoint:
    path: /charges/{id}
    method: GET
    params:
      include: charge_activities,customer,metafields,payment_methods
- name: customers
  endpoint:
    path: /customers
    method: GET
    params:
      include: addresses,metafields,payment_methods,subscriptions
- name: customers_id
  endpoint:
    path: /customers/{id}
    method: GET
    params:
      include: addresses,metafields,payment_methods,subscriptions
- name: orders
  endpoint:
    path: /orders
    method: GET
    params:
      include: customer,metafields
- name: orders_id
  endpoint:
    path: /orders/{id}
    method: GET
    params:
      include: customer,metafields
- name: payment_methods
  endpoint:
    path: /payment_methods
    method: GET
    params:
      include: addresses
- name: payment_methods_id
  endpoint:
    path: /payment_methods/{id}
    method: GET
    params:
      include: addresses
- name: subscriptions
  endpoint:
    path: /subscriptions
    method: GET
    params:
      include: address,charge_activities,customer,metafields,bundle_product,bundle_selections
- name: subscriptions_id
  endpoint:
    path: /subscriptions/{id}
    method: GET
    params:
      include: address,charge_activities,customer,metafields,bundle_product,bundle_selections
- name: charge_processing
  endpoint:
    path: /charges/{id}/process
    method: POST
- name: charge_capture_payment
  endpoint:
    path: /charge/{id}/capture_payment
    method: POST
- name: capture_charge
  endpoint:
    path: /charges/{id}/capture_payment
    method: POST
- name: checkout
  endpoint:
    method: POST
- name: checkout
  endpoint:
    path: /checkouts
    method: GET
    data_selector: checkout
- name: checkout
  endpoint:
    path: /checkouts
    method: POST
    data_selector: checkout
    params:
      get_shipping_rates: true
      custom_shipping_rate_options: []
- name: checkout
  endpoint:
    path: /checkouts/{id}
    method: GET
    data_selector: checkout
- name: checkout_update
  endpoint:
    path: /checkouts/<checkout_token>
    method: PUT
    params:
      get_shipping_rates: true
- name: shipping_rates
  endpoint:
    path: /checkouts/{checkout_id}/shipping_rates
    method: GET
    data_selector: shipping_rates
- name: process_checkout
  endpoint:
    path: /checkouts/{checkout_id}/process
    method: POST
    data_selector: checkout_charge
- name: collections
  endpoint:
    path: /collections
    method: GET
- name: collection
  endpoint:
    path: /collections
    method: POST
    data_selector: collection
    params:
      description: '{{ description }}'
      sort_order: id-desc
      title: '{{ title }}'
- name: collection
  endpoint:
    path: /collections/{collection_id}
    method: GET
    data_selector: collection
- name: address
  endpoint:
    path: /addresses
    method: GET
    params:
      sort_by: id-desc
- name: async_batch
  endpoint:
    path: /async_batches
    method: GET
    params:
      sort_by: id-desc
- name: charge
  endpoint:
    path: /charges
    method: GET
    params:
      sort_by: id-asc
- name: customer
  endpoint:
    path: /customers
    method: GET
    params:
      sort_by: id-desc
- name: discount
  endpoint:
    path: /discounts
    method: GET
    params:
      sort_by: id-desc
- name: metafield
  endpoint:
    path: /metafields
    method: GET
    params:
      sort_by: id-desc
- name: onetime
  endpoint:
    path: /onetimes
    method: GET
    params:
      sort_by: id-desc
- name: order
  endpoint:
    path: /orders
    method: GET
    params:
      sort_by: id-desc
- name: plan
  endpoint:
    path: /plans
    method: GET
    params:
      sort_by: id-desc
- name: subscription
  endpoint:
    path: /subscriptions
    method: GET
    params:
      sort_by: id-desc
- name: webhook
  endpoint:
    path: /webhooks
    method: GET
    params:
      sort_by: id-desc
- name: collection
  endpoint:
    path: /collections/{collection_id}
    method: PUT
    params:
      description: string
      sort_order: string
      title: string
- name: collection
  endpoint:
    path: /collections/{collection_id}
    method: DELETE
- name: collections
  endpoint:
    path: /async_batches/{batch_id}
    method: GET
- name: collections_products
  endpoint:
    path: /async_batches/{batch_id}
    method: GET
- name: add_collection_products
  endpoint:
    path: /collections/{collection_id}/collection_products-bulk
    method: POST
    params:
      limit: 250
- name: delete_collection_products
  endpoint:
    path: /collections/{collection_id}/collection_products-bulk
    method: DELETE
    params:
      limit: 250
- name: credit_accounts
  endpoint:
    path: /credit_accounts
    method: GET
    data_selector: credit_accounts
    params:
      limit: 50; maximum 250
- name: credit_account
  endpoint:
    path: /credit_accounts/{credit_account_id}
    method: GET
    data_selector: credit_account
- name: credit_adjustments
  endpoint:
    path: /credit_adjustments
    method: GET
    data_selector: credit_adjustments
    params:
      limit: 50; maximum 250
- name: credit_adjustment
  endpoint:
    path: /credit_adjustments/{credit_adjustment_id}
    method: GET
    data_selector: credit_adjustments
- name: credit_account_adjustments
  endpoint:
    path: /credit_accounts/{credit_account_id}/credit_adjustments
    method: GET
    data_selector: credit_adjustments
    params:
      limit: 50
- name: customer
  endpoint:
    path: /
    method: POST
    data_selector: customer
    params:
      email: '{{ required }}'
      first_name: '{{ required }}'
      last_name: '{{ required }}'
      phone: null
      tax_exempt: false
- name: customer
  endpoint:
    path: /customers/{customer_id}
    method: GET
    data_selector: customer
- name: update_customer
  endpoint:
    path: /customers/{customer_id}
    method: PUT
    data_selector: customer
- name: delete_customer
  endpoint:
    path: /customers/{customer_id}
    method: DELETE
- name: list_customers
  endpoint:
    path: /customers
    method: GET
    data_selector: customer
- name: async_batch
  endpoint:
    path: /async_batches/<batch_id>
    method: GET
    data_selector: async_batch
- name: delivery_schedule
  endpoint:
    path: /customers/{customer_id}/delivery_schedule
    method: GET
    params:
      delivery_count_future:
        type: integer
      future_interval:
        type: integer
        default: 90
        max: 365
      date_max:
        type: string
- name: customer_credit_summary
  endpoint:
    path: /customers/{customer_id}/credit_summary
    method: GET
    data_selector: credit_summary
- name: discount
  endpoint:
    path: /discounts
    method: GET
    data_selector: discount
    params: {}
- name: discount
  endpoint:
    path: /discounts
    method: POST
    data_selector: discount
- name: address
  endpoint:
    data_selector: address
- name: discount
  endpoint:
    path: /discounts/1234567
    method: GET
- name: update_discount
  endpoint:
    path: /discounts/{discount_id}
    method: PUT
- name: delete_discount
  endpoint:
    path: /discounts/{discount_id}
    method: DELETE
- name: list_discounts
  endpoint:
    path: /discounts
    method: GET
- name: async_batch
  endpoint:
    path: /async_batches/<batch_id>
    method: GET
    data_selector: async_batch
- name: metafield
  endpoint:
    path: /<owner_resource>/metafields
    method: GET
    params:
      include?: metafields
- name: metafield
  endpoint:
    path: /metafields
    method: POST
    data_selector: metafield
    params:
      description: string
      key: string
      namespace: string
      owner_id: string
      owner_resource: string
      value: string
      value_type: string
- name: async_batch
  endpoint:
    path: /async_batches/<batch_id>
    method: GET
    data_selector: async_batch
- name: metafield
  endpoint:
    path: /metafields/{id}
    method: PUT
    data_selector: metafield
- name: metafield
  endpoint:
    path: /metafields/{id}
    method: DELETE
- name: async_batches
  endpoint:
    path: /async_batches/{batch_id}
    method: GET
    data_selector: async_batch
- name: email_notification
  endpoint:
    path: /customers/{customer_id}/notifications
    method: POST
    data_selector: '{}'
    params:
      type: email
      template_type: upcoming_charge
- name: onetime_creation
  endpoint:
    path: /onetimes
    method: POST
    data_selector: onetime
- name: onetime_retrieval
  endpoint:
    path: /onetimes/{id}
    method: GET
    data_selector: onetime
- name: update_onetime
  endpoint:
    path: /{onetime_id}
    method: PUT
    data_selector: onetime
- name: delete_onetime
  endpoint:
    path: /{onetime_id}
    method: DELETE
- name: onetimes
  endpoint:
    path: /onetimes
    method: GET
    data_selector: onetimes
    params:
      address_id: string
      address_ids: string
      created_at_max: datetime
      created_at_min: datetime
      customer_id: string
      include_cancelled: boolean
      limit: string
      page: string
      external_variant_id: string
      updated_at_max: datetime
      updated_at_min: datetime
      ids: array
- name: order
  endpoint:
    path: /orders/{id}
    method: GET
    data_selector: order
- name: address
  endpoint:
    path: /
    method: POST
    data_selector: address
- name: order
  endpoint:
    path: /orders/{order_id}
    method: GET
    data_selector: order
- name: cloned_order
  endpoint:
    path: /orders/{order_id}/clone
    method: POST
    data_selector: order
    params:
      scheduled_at: future_datetime
- name: delay_order
  endpoint:
    path: /orders/{order_id}/delay
    method: POST
- name: order
  endpoint:
    path: /orders/{order_id}
    method: PUT
    data_selector: order
    params:
      billing_address: object
      customer: object
      line_items: array
      external_order_id: object
      scheduled_at: datetime
      shipping_address: object
      status: string
- name: delete_order
  endpoint:
    path: /orders/{order_id}
    method: DELETE
- name: list_orders
  endpoint:
    path: /async_batches/{batch_id}
    method: GET
    data_selector: async_batch
- name: payment_method
  endpoint:
    path: /payment_method
    method: GET
    data_selector: payment_method
    params:
      incremental: updated_at
- name: payment_method
  endpoint:
    path: /payment_methods
    method: POST
    data_selector: payment_method
    params:
      customer_id: integer
      default: boolean
      payment_type: string
      processor_customer_token: string
      processor_name: string
      processor_payment_method_token: string
      billing_address: object
      retry_charges: boolean
- name: payment_method
  endpoint:
    path: /payment_methods/{id}
    method: GET
    data_selector: payment_method
- name: update_payment_method
  endpoint:
    path: /payment_methods/{id}
    method: PUT
    data_selector: payment_method
- name: delete_payment_method
  endpoint:
    path: /payment_methods/{id}
    method: DELETE
- name: list_payment_methods
  endpoint:
    path: /payment_methods
    method: GET
- name: async_batches
  endpoint:
    path: /async_batches/<batch_id>
    method: GET
    data_selector: async_batch
- name: plan
  endpoint:
    path: /products
    method: GET
    data_selector: plan
    params:
      type:
      - subscription
      - prepaid
      - onetime
- name: address_retrieve
  endpoint:
    path: /addresses/{address_id}
    method: GET
    data_selector: address
- name: address_update
  endpoint:
    path: /addresses/{address_id}
    method: POST
- name: plan
  endpoint:
    path: /plans
    method: POST
    data_selector: plan
    params:
      discount_type: percentage
      type:
      - subscription
      - prepaid
      - onetime
- name: update_plan
  endpoint:
    path: /plans/{plan_id}
    method: PUT
    data_selector: plan
- name: delete_plan
  endpoint:
    path: /plans/{plan_id}
    method: DELETE
- name: plans
  endpoint:
    path: /plans
    method: GET
    data_selector: plans
    params:
      limit: 50
      updated_at_min: '{{ updated_at_min }}'
      updated_at_max: '{{ updated_at_max }}'
      type: '{{ type }}'
      ids: '{{ ids }}'
      external_product_id: '{{ external_product_id }}'
- name: plans_bulk
  endpoint:
    path: /products/2103271587891/plans-bulk
    method: POST
    data_selector: plans
- name: bulk_update_plans
  endpoint:
    path: /products/2103271587891/plans-bulk
    method: PUT
    data_selector: plans
- name: bulk_delete_plans
  endpoint:
    path: /products/2103271587891/plans-bulk
    method: DELETE
    data_selector: plans
- name: product
  endpoint:
    path: /products
    method: GET
    data_selector: products
    params:
      incremental: external_updated_at
- name: variant
  endpoint:
    path: /variants
    method: GET
    data_selector: variants
    params:
      incremental: external_updated_at
- name: product
  endpoint:
    path: /products
    method: POST
    data_selector: product
    params:
      external_product_id: external_product_id
      brand: brand
      external_created_at: external_created_at
      external_updated_at: external_updated_at
      images: images
      options: options
      published_at: published_at
      requires_shipping: requires_shipping
      title: title
      variants: variants
      vendor: vendor
- name: product
  endpoint:
    path: /products/{external_product_id}
    method: GET
    data_selector: product
- name: product
  endpoint:
    path: /products/{product_id}
    method: PUT
    data_selector: product
- name: product
  endpoint:
    path: /products
    method: GET
    data_selector: products
    params:
      external_product_ids: '{{external_product_ids}}'
- name: delete_product
  endpoint:
    path: /products/{product_id}
    method: DELETE
- name: address_update
  endpoint:
    path: /addresses/{address_id}
    method: PUT
    data_selector: address
- name: address_delete
  endpoint:
    path: /addresses/{address_id}
    method: DELETE
- name: addresses_list
  endpoint:
    path: /addresses
    method: GET
    data_selector: addresses
- name: retention_strategy
  endpoint:
    path: /retention_strategies
    method: POST
    data_selector: retention_strategy
    params:
      cancellation_flow_type: subscription
      incentive_type: swap_product
      prevention_text: Would you like to swap the product out for another item?
      reason: I want a different product or variety
- name: retrieve_retention_strategy
  endpoint:
    path: /retention_strategies/{retention_strategy_id}
    method: GET
    data_selector: retention_strategy
- name: retention_strategy_update
  endpoint:
    path: /retention_strategies/12345
    method: PUT
- name: retention_strategy_delete
  endpoint:
    path: /retention_strategies/12345
    method: DELETE
- name: retention_strategy_list
  endpoint:
    path: /retention_strategies
    method: GET
- name: store
  endpoint:
    path: /store
    method: GET
    data_selector: store
- name: subscription
  endpoint:
    path: /subscriptions
    method: GET
    data_selector: subscription
    params: {}
- name: subscription
  endpoint:
    path: /
    method: POST
    data_selector: subscription
    params:
      address_id: null
      charge_interval_frequency: null
      next_charge_scheduled_at: null
      order_interval_frequency: null
      order_interval_unit: null
      properties: null
      external_variant_id: null
      quantity: null
- name: subscription
  endpoint:
    path: /subscriptions/{subscription_id}
    method: GET
    data_selector: subscription
- name: subscription
  endpoint:
    path: /subscriptions/{subscription_id}
    method: PUT
    data_selector: subscription
    params:
      commit: false
      force_update: null
- name: delete_subscription
  endpoint:
    path: /subscriptions/{subscription_id}
    method: DELETE
- name: list_subscriptions
  endpoint:
    path: /async_batches/{batch_id}
    method: GET
- name: change_subscription_next_charge_date
  endpoint:
    path: /subscriptions/{subscription_id}/set_next_charge_date
    method: POST
- name: change_subscription_address
  endpoint:
    path: /subscriptions/{subscription_id}/change_address
    method: POST
    params:
      address_id: integer
      next_charge_scheduled_at: string
- name: cancel_subscription
  endpoint:
    path: /subscriptions/{subscription_id}/cancel
    method: POST
    data_selector: subscription
    params:
      cancellation_reason: other reason
      send_email: false
- name: addresses
  endpoint:
    path: /addresses
    method: GET
    data_selector: addresses
    params:
      created_at_min: datetime
      created_at_max: datetime
      customer_id: integer
      discount_code: string
      discount_id: string
      ids: string
      updated_at_min: string
      updated_at_max: string
      is_active: boolean
- name: activate_subscription
  endpoint:
    path: /subscriptions/{id}/activate
    method: POST
- name: gift_skipped_subscription
  endpoint:
    path: /subscriptions/skip_gift
    method: POST
- name: webhook
  endpoint:
    path: /webhooks
    method: POST
    data_selector: webhook
    params:
      included_objects:
      - addresses
      - collections
      - customer
      - metafields
- name: webhook_creation
  endpoint:
    path: /webhooks
    method: POST
    data_selector: webhook
    params:
      address: https://request.in/foo
      topic: subscription/created
      version: 2021-01
- name: webhook_retrieval
  endpoint:
    path: /webhooks/19451
    method: GET
    data_selector: webhook
- name: update_webhook
  endpoint:
    path: /webhooks/{webhook_id}
    method: PUT
    params:
      address: https://request.in/foo
      included_objects:
      - addresses
      - collections
      - customer
      - metafields
      topic: subscription/created
      version: 2021-01
- name: delete_webhook
  endpoint:
    path: /webhooks/{webhook_id}
    method: DELETE
- name: list_webhooks
  endpoint:
    path: /webhooks
    method: GET
- name: test_webhook
  endpoint:
    path: /webhooks/{webhook_id}/test
    method: POST
- name: charge_webhooks
  endpoint:
    method: POST
- name: checkout_webhooks
  endpoint:
    method: POST
- name: customer_webhooks
  endpoint:
    method: POST
- name: onetime_webhooks
  endpoint:
    method: POST
- name: order_webhooks
  endpoint:
    method: POST
- name: plan
  endpoint:
    path: /plan
    method: POST
    data_selector: data
- name: subscription
  endpoint:
    path: /subscription
    method: POST
    data_selector: data
- name: store
  endpoint:
    path: /store
    method: POST
    data_selector: data
- name: async_batch
  endpoint:
    path: /async_batches
    method: POST
    params:
      batch_type: required
- name: async_batch_tasks
  endpoint:
    path: /async_batches/{id}/tasks
    method: POST
- name: async_batch_process
  endpoint:
    path: /async_batches/{id}/process
    method: POST
- name: async_batch_status
  endpoint:
    path: /async_batches/{id}
    method: GET
- name: async_batch_results
  endpoint:
    path: /async_batches/{id}/tasks
    method: GET
- name: create_batch
  endpoint:
    path: /async_batches
    method: POST
    data_selector: async_batch
- name: retrieve_batch
  endpoint:
    path: /async_batches/<batch_id>
    method: GET
    data_selector: async_batch
- name: async_batches
  endpoint:
    path: /async_batches
    method: GET
    data_selector: async_batches
- name: process_async_batch
  endpoint:
    path: /async_batches/{id}/process
    method: POST
    data_selector: async_batch
- name: async_batch_tasks
  endpoint:
    method: POST
    data_selector: body
- name: merge_addresses
  endpoint:
    path: /addresses/merge
    method: POST
    data_selector: address
    params:
      delete_source_addresses: boolean
      next_charge_date: string
      target_address: object
      source_addresses: array
- name: batch_task
  endpoint:
    path: /async_batches/<batch_id>/tasks
    method: POST
    data_selector: tasks
    params:
      version: 2021-11
- name: batch_tasks
  endpoint:
    path: /async_batches/{batch_id}/tasks
    method: GET
    data_selector: async_batch_tasks
    params:
      ids: idsstring
- name: token_information
  endpoint:
    path: /token_information
    method: GET
    data_selector: token_information
- name: account
  endpoint:
    path: /accounts/{account_id}
    method: GET
    data_selector: account
- name: accounts
  endpoint:
    path: /accounts
    method: GET
    data_selector: accounts
- name: events
  endpoint:
    path: /events
    method: GET
    data_selector: event
- name: events
  endpoint:
    path: /events
    method: GET
    data_selector: events
    params:
      created_at_min: '{{ ''created_at_min'' }}'
      created_at_max: '{{ ''created_at_max'' }}'
      object_type: '{{ ''object_type'' }}'
      object_id: '{{ ''object_id'' }}'
      verbs: '{{ ''verbs'' }}'
      customer_id: '{{ ''customer_id'' }}'
      origin: '{{ ''origin'' }}'
notes:
- API token must be included in the header for authentication
- Supports different API versions using the X-Recharge-Version header
- Token can be null for OAuth App generated tokens in contact fields
- Requires an API key passed as 'X-Recharge-Access-Token' in the header
- Charge object is linked to Orders and Subscriptions.
- Charge can have many parent subscriptions.
- All subscriptions on a given Address with the same next_charge_date will be merged
  into one Charge.
- Starting March 19th, 2025, charges processed over 90 days ago won't appear in API
  responses and will require using the Exports tool in the Recharge merchant portal.
- Predictable, resource-oriented URLs
- Uses API keys for authentication
- Requests must be made over HTTPS
- Supports cursor-based pagination by default
- API version can be specified using 'X-Recharge-Version' header
- Pagination via cursor is available; page-based pagination is deprecated but still
  in use for limited scenarios.
- Charge data older than 90 days will not appear in API responses unless the status
  is queued or error.
- API uses cursor based pagination with `limit` parameter to control the size of each
  page.
- Supports cursor based and page based pagination but cursor based is preferred for
  performance.
- Endpoint is specific to platforms like BigCommerce and Custom; not available for
  Shopify
- API key required in every request header as 'X-Recharge-Access-Token'
- Endpoint expects a charge_id in the path and returns data about the refunded charge
- API supports cursor and page based pagination, default limit is 50; max limit is
  250
- Charges older than 90 days are not retrievable via API but available in the merchant
  portal
- Charges must be captured within 7 days of authorization.
- Checkouts on Shopify must go through Shopify.
- Payment processors supported include Stripe, Apple Pay, Google Pay, Braintree, Authorize
- Checkout endpoints are only available for BigCommerce and Custom; not available
  for Shopify.
- Deprecated fields: stripe_customer_token, paypal_customer_token, authorizedotnet_profile_id,
    authorizedotnet_payment_profile_id
- Creating a customer in Recharge will not create the customer on any other platform
- Write_Payments permission required for creating/updating customers with payment
  token information
- The endpoint for retrieving payment sources is deprecated, use /payment_methods
  instead
- cannot add another discount if the address already has one
- cannot add if an existing queued charge in the address already has a discount
- Page-based pagination is deprecated and only available up to 100 pages; cursor pagination
  is recommended for larger datasets.
- owner_resource must be specified in the URL when getting metafields
- Page-based pagination is deprecated but still available for pages up to 100
- API key must be included in the header to authenticate requests
- Endpoint changes the shipping date of an order; requires new shipping date in ISO
  8601 format
- product_id is scheduled for deprecation, use shopify_product_id instead
- number_charges_until_expiration is scheduled for deprecation, use expire_after_specific_number_of_charges
  instead
- Page-based pagination is deprecated; cursor-based pagination is recommended.
- Deprecated fields are still present but should not be used
- API key must be passed in header as 'X-Recharge-Access-Token'
- API requires authentication via 'X-Recharge-Access-Token'
- Batches are version-specific and must match the '2021-11' version for processing
- When activating subscription, "cancelled_at", "cancellation_reason", and "cancellation_reason_comments"
  attributes are set to null
- Changing certain parameters recalculates 'next_charge_scheduled_at'
- Requires all three parameters: order_interval_unit, order_interval_frequency, charge_interval_frequency
    when one is updated
- Updating status from CANCELLED to ACTIVE resets some fields to null
- API uses cursor based pagination with a limit up to 250 results per call
- Supports additional data inclusion using 'include' query parameter in GET requests
- There is a limit of 20 subscriptions per bulk delete request.
- Webhooks are used for real-time data updates based on specific events.
- The API uses API key authentication method.
- API Token must have specific permissions enabled such as read_customer and read_orders
  depending on the webhook.
- API uses API keys for authentication, with token placed in the header
- Compatible with various ecommerce platforms, with specific features flagged by tags
- API token is used in the header for authentication
- Requires an API token passed via the 'X-Recharge-Access-Token' header for authentication
- Parameter "full_refund" set to true will result in a total refund of the charge
- Starting March 19th, 2025, charges processed over 90 days ago will not appear in
  API responses and will only be available through the Exports tool in the Recharge
  merchant portal.
- API calls default to 50 results; can be increased to a maximum of 250 results using
  the 'limit' parameter
- Supports cursor-based pagination with 'Link' header for next and previous cursors
- Sorting of results is available via 'sort_by' query parameter with options varying
  by resource
- Page-based pagination is deprecated and available only up to page 100
- Charges processed over 90 days ago are available via the Exports tool in the Recharge
  merchant portal
- Default sorting of charges is ascending by id
- API uses API key authentication provided in the header.
- Supports pagination via 'limit' and 'page' parameters.
- Supports extended data retrieval using 'include' parameter in GET requests.
- Cursor based pagination is preferred for performance.
- The status of a charge can be REFUNDED or PARTIALLY_REFUNDED after a refund operation
- Endpoint allows skipping charges for specific subscription items by ID.
- Status of the charge changes to REFUNDED or PARTIALLY_REFUNDED after a refund operation
- Endpoint is available only to Recharge Pro merchants on request
- API uses API keys for authentication.
- Supports both page and cursor based pagination, defaults to 50 results per page.
- Includes extended data in responses using 'include' query parameters.
- Charges older than 90 days are not accessible via API call for retrieval unless
  processed recently.
- undefined
- Only supports BigCommerce and Custom implementations
- Does not support Shopify for checkouts
- Checkouts on Shopify must use Shopify's own system, not applicable here.
- External checkout source can be either 'big_commerce' or 'headless'.
- Token used in test mode can be 'tok_visa'.
- Only currencies set up in the store are accepted for the checkout currency.
- Partial shipping reduces shipping address validation requirements.
- Endpoint paths require a specific checkout ID
- Supports various payment processors like Stripe, Apple Pay, Google Pay, and Braintree
- Endpoint /payment_methods should be used instead of deprecated /customers/{customer_id}/payment_sources.
- To modify a discount, the endpoint supports changing parameters such as status,
  times, and usage limits.
- Deleting a discount requires the discount to be set to 'fully_disabled'.
- The API uses API Key authentication, passed via header.
- Limit of 50 metafields per owner_id
- The owner_resource can be one of several types including address, store, customer,
  subscription, order, charge.
- Value_type for metafields can be "string", "json_string", or "integer".
- Page-based pagination is deprecated but still available up to page 100
- Uses OAuth2 with refresh token; requires setup of connected app in Shopify
- product_id is scheduled for deprecation; use shopify_product_id instead
- number_charges_until_expiration is scheduled for deprecation; use expire_after_specific_number_of_charges
  instead
- Some parameters are deprecated such as collection_id
- Certain fields have defaults that aren't strictly applied unless conditions are
  met
- Endpoints use a unique 'X-Recharge-Access-Token' for authentication
- Deprecated fields are still present but should not be used for new integrations
- Page-based pagination is deprecated but still available up to 100 pages.
- Cursor pagination is recommended for optimal performance.
- When updating country, zip must also be updated; failure to do so results in an
  error.
- Fields cart_note and note_attributes are not honored when sent to Shopify contract
  API.
- Certain address deletions are restricted to those without active subscriptions.
- 'When activating subscription, the following attributes will be set to null: ''cancelled_at'',
  ''cancellation_reason'', ''cancellation_reason_comments'''
- A single request to add tasks may contain up to 1,000 tasks, and a batch may contain
  up to 10,000 tasks
- Batches will only leverage resources from the same version they are created in
- There is a limit of 20 subscriptions per request for bulk delete operations.
- Webhooks use a 5 second time-out period; retries occur 20 times over 2 days before
  deletion.
- Deprecated topics will not be removed in this API version.
- API Token must have specific permissions enabled depending on the webhook topic
- Webhook validation requires API Client Secret, not API Token
- Async batches allow up to 1000 tasks per request and 10000 tasks per batch
- Async batches and their tasks will only be retained in Recharge for one month after
  batch creation
- Batches will only process tasks from the same version they are created in
- API uses API keys for authentication
- Supports both REST and RPC API styles
- Versioning available via X-Recharge-Version header
- The endpoint allows for a full or partial refund of a charge
- Starting March 19th, 2025, processed charges older than 90 days will not appear
  in responses and will result in an error
- API uses API key authentication
- Supports cursor and page-based pagination
- Includes conventional HTTP response codes
- Starting March 19th, 2025, processed charges older than 90 days will not appear
  in responses
- Page-based pagination is deprecated and limited to 100 pages
- API uses cursor based pagination with a default limit of 50; can be increased up
  to 250
- Supports sorting of results using sort_by parameter
- API key must be included in each request via the 'X-Recharge-Access-Token' header
- API key is required in the header as 'X-Recharge-Access-Token' for authentication.
- Endpoint uses API key in the header for authentication
- Refunds can be partial or full based on the 'amount' and 'full_refund' parameters
- API uses API key authentication; include token in header
- Supports cursor pagination with 'Link' header for some resources
- Provides a sorting mechanism using 'sort_by' query parameter
- Charges older than 90 days are not returned unless using specific filters
- Only payments authorized within the last 7 days can be captured.
- Supports multiple payment processors including Stripe, Apple Pay, Google Pay, Braintree,
  Authorize
- Specific implementation details vary between BigCommerce and Custom; not applicable
  for Shopify checkouts
- Checkout endpoints are only available for BigCommerce and Custom platforms
- Checkouts on Shopify must go through Shopify API
- Checkout endpoints are only available for BigCommerce and Custom; Shopify uses its
  own system.
- The billing_zip parameter is required when updating the billing_country for US customers.
- Page-based pagination is deprecated but still available up to page 100; use cursor
  pagination beyond that limit.
- Endpoint /customers/{customer_id}/payment_sources is deprecated; use /payment_methods
  instead.
- Page-based pagination is deprecated and limited to 100 pages; use cursor pagination
  for larger datasets.
- Cannot add another discount if the address already has one.
- Cannot add if an existing queued charge in the address already has a discount.
- Prefer using address_id over charge_id to ensure discounts remain removed even if
  charges are regenerated
- Page-based pagination is deprecated but still available for pages up to 100.
- Page-based pagination is deprecated and limited to 100 pages; cursor-based pagination
  recommended for larger datasets
- Fields 'cart_attributes' and 'original_shipping_lines' are deprecated and should
  use 'note_attributes' and 'shipping_lines_override' respectively.
- API key must be passed in the header for authentication
- Page-based pagination is deprecated but available for pages up to 100 for backward
  compatibility.
- Address updates require the zip field if the country field is changed.
- API key authentication is used; include it in the header as 'X-Recharge-Access-Token'
- When activating subscription, attributes 'cancelled_at', 'cancellation_reason',
  and 'cancellation_reason_comments' will be set to null.
- Limit of 20 subscriptions per request
- Updating certain parameters requires other related parameters to be provided simultaneously
- Specific warnings about the effect of updates on charges and orders
- API uses both API keys and optional headers for version control
- Supports cursor and page-based pagination but defaults to page-based
- Requires API key in the header for authentication
- Webhooks have a 5 second timeout and will retry delivery 20 times over 2 days before
  deletion
- Bulk delete operations are limited to 20 subscriptions per request
- Each API token can register a maximum of 10 webhooks of the same topic
- Create, update, and delete webhooks require an API token with specific read permissions
  depending on the webhook topic
- API Token with specific permissions is required for accessing different types of
  webhooks.
- Webhook 'checkout/completed' is deprecated and will be removed in future updates.
- Webhooks require specific permissions based on the resource accessed; permissions
  include read_customers, read_subscriptions, read_orders, read_products.
- Webhooks require specific permissions like read_subscriptions or read_store
- Async batches allow up to 10,000 tasks per batch
- API keys are used for authentication; ensure secure storage and usage of keys
- API endpoints may have platform-specific restrictions including checkout solutions
  and ecommerce platforms
- Regional and version-specific tags may apply to some features
- Versioning controlled by X-Recharge-Version header unless default version is used
- Charges processed over 90 days ago will not appear in API responses and can only
  be accessed through the Exports tool in the Recharge merchant portal.
- Endpoint used to skip a charge
- Endpoint is only available to Recharge Pro merchants on a request basis.
- Sort order has multiple default options but 'id-desc' is used in examples
- Versioning through header X-Recharge-Version
- API key passed via X-Recharge-Access-Token header
- Pagination uses cursor based strategy with a default page size of 50 and a limit
  parameter to control pagination.
- API key is required in the header as 'X-Recharge-Access-Token'
- Version of the API is specified as a header 'X-Recharge-Version'
- Discounts have specific timeframes and conditions under which they are enabled or
  disabled
- Discounts apply conditions based on customer status and cart totals
- Authentication token must be provided in the X-Recharge-Access-Token header
- To delete a discount, its status must be set to `fully_disabled`.
- Include metafields in the request using 'include?=metafields' to extend responses.
- Requires an API token for authentication.
- The base URL and API version are specified in the request header.
- API token must be provided in the header for authentication
- Requires a valid X-Recharge-Access-Token in header for authentication
- Endpoint expects a future date for 'scheduled_at' field when cloning an order
- When updating line_items, the entire JSON block must be provided, as it overrides
  the previous block.
- Token must be configured with correct access permissions
- Payment Method can have multiple statuses such as unvalidated, valid, invalid, empty
- There is a limit of 20 plans per request.
- API token must be included in header as 'X-Recharge-Access-Token' for authentication
- Fields like 'product_title', 'shipping_date', 'shopify_id', 'address_is_active'
  are deprecated and should not be used.
- The `order_interval_frequency` and `charge_interval_frequency` do not need to match
  values in `Plans`.
- Product must have at least one `Plan` to be added to a subscription.
- Some properties can be automatically filled from `Plan` if not provided directly.
- Cancellation may not send an email under certain conditions despite `send_email`
  being true
- Page-based pagination is deprecated and limited to the first 100 pages; cursor-based
  pagination is recommended for larger datasets.
- Webhooks require idempotency handling due to possible retries
- Maximum of 10 webhooks per topic per API token
- Webhook registration requires specific read permissions depending on the topic
- API Token must have appropriate permissions (read_customer for address webhooks;
  read_subscriptions for bundle webhooks).
- Webhooks can be verified via a digital signature using the X-Recharge-Hmac-Sha256
  header.
- Async batches are retained only for one month after creation
- API uses API key for authentication.
- Ensure systems can handle high rate of webhooks from batch processing.
- Supports multiple API versions; defaults to the store's default version unless specified
- Endpoints use specific headers like 'X-Recharge-Version' and 'Content-Type: application/json'
- Endpoint paths contain placeholders that need to be replaced with actual IDs (e.g.,
  `<batch_id>`, `<charge_id>`)
- The Charge object's status changes based on the amount, retry, error, and error_type
  parameters.
- Checkouts on Shopify must go through Shopify, not applicable for this API
- Requires X-Recharge-Access-Token for authentication
- Uses `get_shipping_rates` query parameter to determine if shipping rates should
  be fetched during the checkout creation
- API uses specific version headers for requests
- Pagination uses a cursor system with next_cursor and previous_cursor
- Default page size is 50, maximum is 250
- Default values are used for fields like 'starts_at' when not specified; translates
  to no restriction
- The 'status' of a Discount changes from 'active' to 'disabled' after 'ends_at'
- To delete a discount, its status must be set to 'fully_disabled'.
- The 'update_discount' and 'delete_discount' endpoints require a specific discount
  ID in the path.
- Endpoints support extension by adding 'include?=metafields' as part of a GET request.
- API uses a versioned header to manage different API versions. Ensure the version
  is correctly set in headers.
- Page-based pagination is deprecated but still available up to a limit of 100 pages.
- 'Ensure correct token permissions: Read access or Read and Write access for Payment
  Methods'
- All plans for a product must have the same discount amount and title.
- Products with a prepaid plan type cannot have plans of other types.
- Page-based pagination is deprecated for pages beyond 100; use cursor pagination
  instead.
- Resource 'Plans' is in Alpha stage and may be subject to changes
- The API uses a specific version header "X-Recharge-Version" which needs to be included
  in requests.
- When updating 'country', 'zip' must also be updated otherwise it results in an error.
- Only addresses with no active Subscriptions can be deleted.
- Fields such as 'product_title', 'shipping_date', and 'shopify_id' are deprecated
  and have replacements specified.
- The 'address_is_active' field is deprecated and not applicable.
- Endpoint requires specifying a subscription ID in the URL path
- Email not sent under certain conditions despite send_email parameter set to true
- Respond to webhook with a 200 OK within 5 seconds to avoid retries
- System retries failed webhooks up to 20 times over 2 days before deletion
- System logs deleted webhooks after repeated failures
- API tokens are required to have read permissions for the relevant object when registering
  a webhook.
- Each API token can register a maximum of 10 webhooks of the same topic.
- API token must have specific permissions enabled like read_customer for address
  webhooks and read_subscriptions for bundle webhooks.
- Webhook topics for various events are triggered under specific conditions.
- API Token must have specific permissions enabled such as read_orders, read_customers,
  read_subscriptions.
- Webhook validation requires API Client Secret found in Recharge Dashboard under
  API Tokens
- Batches are version-specific and must operate within the same version they were
  created.
- Async batches are retained for one month after creation
- Webhooks from batch processing may dispatch at a high rate; ensure systems are capable
  of handling this.
- Data for contact_email can be null
- API keys are used for authentication
- Supports multiple API versions, with a default version used if no specific version
  is specified
- Charge object aggregates multiple subscriptions into a single transaction if they
  share the same next_charge_date at the same address.
- Charge object includes a variety of fields like status, type, and totals, which
  are useful for comprehensive financial tracking.
- Charges processed over 90 days ago will not appear unless processed_at date is within
  last 90 days.
- Charges older than 90 days can be accessed via the Exports tool in the Recharge
  merchant portal.
- API uses a versioned custom header for requests.
- Requires an API key to authenticate requests
- Supports refunding a charge either fully or partially
- Error handling parameters required when retry is true
- Endpoint is available only to Recharge Pro merchants on a request basis
- Interested users must contact their account manager or support team
- Supports specific payment processors like Stripe, Apple Pay, Google Pay, and Braintree
  for checkout processing.
- Collections allow managing logical lists of Products.
- Collections can be either manually created, as indicated by type 'manual'
- Default sort order for new collections is 'id-desc'
- Pagination uses cursor-based method with next_cursor and previous_cursor
- Discounts can be applied to Checkout or Address
- Discounts support configurations like minimum price, single use, recurring, ongoing,
  and effective date settings
- API token must be included in the header for authentication.
- Uses OAuth2 with refresh token; requires setup of connected app in api
- Uses API key authentication with custom headers for version control
- Limit of 50 metafields per owner_id.
- WRITE rights required to create a Metafield.
- Page-based pagination is deprecated but still available for pages up to 100; use
  cursor pagination for larger datasets.
- Data model includes complex nested objects like billing_address, charge, customer,
  and shipping_address which might require careful mapping and extraction strategies.
- API key is passed via header for authentication
- API key must be included in header for authentication
- Updating/modifying plans in 2021-11 will impact /products in 2021-01; These are
  not cross compatible
- API token is required in the header for authentication
- Discount type is restricted to 'percentage'
- Plan types include subscription, prepaid, and onetime; prepaid plans restrict the
  presence of other types
- A fixed API version header (X-Recharge-Version: 2021-11) is used for all requests.
- Page-based pagination is deprecated for pages over 100; cursor pagination is recommended
  for extensive data retrieval.
- There is a limit of 20 plans per request
- Resource 'Plans' is currently in Alpha stage.
- API requires an access token passed in header for authentication
- Fields such as 'product_title', 'shipping_date', and 'shopify_id' are deprecated
  and replaced with 'title', 'scheduled_at', and 'shopify_order_id' respectively.
- Updating subscription parameters like `frequency`, `charge_interval_frequency`,
  `order_interval_frequency`, and `order_interval_unit` will automatically recalculate
  the next charge date.
- Changing subscription status from `cancelled` to `active` will reset `cancelled_at`,
  `cancellation_reason`, and `cancellation_reason_comments` to null.
- 'Requires all three parameters: `order_interval_unit`, `order_interval_frequency`,
  and `charge_interval_frequency` when updating.'
- Setting `commit` to `true` will regenerate charges immediately, while `false` will
  delay this by 5 seconds for faster API responses.
- Setting `force_update` to `true` allows updates to `CANCELLED` subscriptions.
- Header 'X-Recharge-Version' with value '2021-11' is used in all requests.
- Content-Type for requests is 'application/json'.
- Ensure idempotency of the webhook call by detecting duplicates.
- Webhook timeout is 5 seconds, with retries up to 20 times over 2 days.
- Private token shows all storeâ€™s webhooks; integration token shows only that integrationâ€™s
  webhooks.
- Requires API Token with specific permissions per webhook type.
- Webhooks require API Token with specific read permissions depending on the type
  of webhook
- Checkout webhook 'checkout/completed' is deprecated
- Webhooks need specific permissions like read_products, read_subscriptions, read_store
- API Token and API Client Secret are not the same; API Client Secret is used for
  webhook validation
- Async batches and their tasks are retained for only one month after batch creation.
- Merging addresses with different presentment currencies will cause the entire merge
  operation to fail
- Limited to events from the last 7 days
- API uses standard HTTP response codes and methods
- Integrates with various ecommerce platforms
- Tags are used to indicate platform compatibility
- Checkouts endpoints are only available for BigCommerce and Custom; Shopify uses
  its own system
- Endpoint paths contain placeholders that need to be replaced by actual values, e.g.,
  {checkout_id}
- Authentication uses API key passed in header
- Maximum limit for 'credit_account_adjustments' is 250
- Phone numbers must be in E.164 format
- API uses API key authentication with the key passed in the header.
- All endpoints require specifying 'X-Recharge-Version' in the header.
- API key authentication used; must include version header
- Authentication token is passed via 'X-Recharge-Access-Token' header.
- Requires API key authentication with specific headers including version and content
  type
- Metafields creation limited to 50 per owner_id and requires WRITE permissions
- API uses only email type for notifications.
- Authentication via X-Recharge-Access-Token in header.
- Page-based pagination is deprecated but still available; recommended to use cursor
  pagination instead.
- API key must be included in the header for authentication
- Endpoint allows cloning an existing order by posting with a future date
- Endpoint for Payment Methods requires specific token permissions, such as "Read
  access" or "Read and Write access".
- API key must be passed in the header as 'X-Recharge-Access-Token'
- Versioning controlled via 'X-Recharge-Version' header
- API uses API key authentication included in the header.
- Pagination is supported with a cursor method.
- Headers like 'X-Recharge-Version' and 'Content-Type' are used in requests.
- Addresses with no active Subscriptions can be deleted.
- Authentication token must be provided in headers as 'X-Recharge-Access-Token'
- The default value for 'cancellation_flow_type' is 'subscription' when creating a
  retention strategy
- The 'incentive_type' 'discount' requires 'discount_code' to be provided
- Field deprecations present; refer to documentation for replacements
- API token must be included in the header as 'X-Recharge-Access-Token'
- Default status for new subscriptions is 'active'
- Updates to order_interval_unit, charge_interval_frequency, or order_interval_frequency
  require all three to be provided.
- Changing status from cancelled to active nullifies cancelled_at, cancellation_reason,
  and cancellation_reason_comments.
- Warnings about removing skipped and manually changed charges when updating.
- Cancellation does not send an email if subscription was created on the same day
  or customer has other active subscriptions
- Webhooks must respond with 200 OK within 5 seconds to confirm receipt
- Recharge system will retry sending webhook up to 20 times over 2 days before deleting
  if not successfully received
- API token is required with appropriate read permissions for the object related to
  the webhook topic.
- Maximum of 10 webhooks of the same topic can be registered per API token.
- API Token must have specific read permissions depending on the webhook's topic
- API Token must have specific read permissions for each category of webhooks.
- Webhooks require API Token with specific read permissions for each type (e.g., read_products,
  read_subscriptions, read_store)
- Webhook validation involves calculating a digital signature using the API Client
  Secret
- Batches are version-specific; a batch created in one version can only process tasks
  from the same version.
errors:
- 200: Everything worked as expected
- 201: The request was successful; created a new resource; and resource created is
    in the body
- 202: The request has been accepted and is in processing
- 204: The server has successfully fulfilled the request and there is no content to
    send in the response body
- 400: The request was unacceptable, often due to a missing required parameter
- 401: No valid API key was provided
- 402: The parameters were valid but the request failed
- 403: The request was authenticated but not authorized for the requested resource
    (permission scope error)
- 403: Uninstalled Store
- 404: Not Found; The requested resource doesn’t exist
- 405: Method Not Allowed; The method is not allowed for this URI
- 406: The request was unacceptable, or requesting a data source which is not allowed
    although permissions permit the request
- 409: Conflict; You will get this error when you try to send two requests to edit
    an address or any of its child objects at the same time, in order to avoid out
    of date information being returned
- 415: The request body was not a JSON object
- 422: The request was understood but cannot be processed due to invalid or missing
    supplemental information
- 426: The request was made using an invalid API version
- 429: The request has been rate limited
- 500: Internal server error
- 501: The resource requested has not been implemented in the current version but
    may be implemented in the future
- 503: A 3rd party service on which the request depends has timed out
- 200 OK: Everything worked as expected
- 201 OK: The request was successful, created a new resource
- 202 OK: The request has been accepted and is in processing
- 204 OK: The server has successfully fulfilled the request and there is no content
    to send in the response body
- 400 Bad Request: The request was unacceptable, often due to a missing required parameter
- 401 Unauthorized: No valid API key was provided
- 402 Request Failed: The parameters were valid but the request failed
- 403 Forbidden: The request was authenticated but not authorized for the requested
    resource
- 404 Not Found: The requested resource doesn’t exist
- 405 Method Not Allowed: The method is not allowed for this URI
- 406 Not Acceptable: The request was unacceptable, or requesting a data source which
    is not allowed although permissions permit the request
- 409 Conflict: You will get this error when you try to send two requests to edit
    an address or any of its child objects at the same time, in order to avoid out
    of date information being returned
- 415 Unsupported Media Type: The request body was not a JSON object
- 422 Unprocessable Entity: The request was understood but cannot be processed due
    to invalid or missing supplemental information
- 426 Upgrade Required: The request was made using an invalid API version
- 429 Too Many Requests: The request has been rate limited
- 500 Internal Server Error: An error occurred on the server
- 501 Not Implemented: The resource requested has not been implemented in the current
    version but may be implemented in the future
- 503 Service Unavailable: A 3rd party service on which the request depends has timed
    out
- 422: Non-integer values in ids will result in an error.
- 200: successful response
- 401 Unauthorized: Ensure the API token is correct and has the necessary permissions
- 422 Unprocessable Entity: Check request parameters for correctness
- 200: Charge captured successfully
- 400: Bad Request
- 404: Not Found
- 422: Unprocessable
- REQUEST_LIMIT_EXCEEDED: Throttle API calls or reduce frequency
- 401 Unauthorized: Recheck OAuth scopes or token expiration
- 200: Success
- 400 Bad Request: Often due to a missing required parameter
- 429 Too Many Requests: Rate limit exceeded
- Webhook timeout: Recharge waits 5 seconds for a 200 response; retries 20 times over
    2 days before deleting the webhook
- Invalid JSON format: Ensure no spaces are lost in JSON string generation
- '401 Unauthorized: Ensure the API token is correct and active'
- 200: Everything worked as expected.
- 201: The request was successful, created a new resource, and resource created is
    in the body.
- 202: The request has been accepted and is in processing.
- 204: The server has successfully fulfilled the request and there is no content to
    send in the response body.
- 400: The request was unacceptable, often due to a missing required parameter.
- 401: No valid API key was provided.
- 402: The parameters were valid but the request failed.
- 403: The request was authenticated but not authorized for the requested resource
    (permission scope error).
- 403: Uninstalled Store.
- 404: The requested resource doesn’t exist.
- 405: The method is not allowed for this URI.
- 406: The request was unacceptable, or requesting a data source which is not allowed
    although permissions permit the request.
- 409: Conflict; You will get this error when you try to send two requests to edit
    an address or any of its child objects at the same time, in order to avoid out
    of date information being returned.
- 415: The request body was not a JSON object.
- 422: The request was understood but cannot be processed due to invalid or missing
    supplemental information.
- 426: The request was made using an invalid API version.
- 429: The request has been rate limited.
- 500: Internal server error.
- 501: The resource requested has not been implemented in the current version but
    may be implemented in the future.
- 503: A 3rd party service on which the request depends has timed out.
- '200 OK: Everything worked as expected.'
- '201 OK: The request was successful, created a new resource.'
- '202 OK: The request has been accepted and is in processing.'
- '204 OK: The server has successfully fulfilled the request and there is no content
  to send.'
- '400 Bad Request: Often due to a missing required parameter.'
- '401 Unauthorized: No valid API key provided.'
- '403 Forbidden: The request was authenticated but not authorized.'
- '404 Not Found: The requested resource doesn’t exist.'
- '429 Too Many Requests: The request has been rate limited.'
- 422: Non-integer values in 'ids' parameter will result in an error
- 400 Bad Request: Often due to missing required parameter.
- 401 Unauthorized: No valid API key provided.
- 429 Rate Limited: API requests are being rate limited.
- u
- n
- d
- e
- f
- i
- 401 Unauthorized: Ensure correct API keys and tokens are used
- 422 Unprocessable: Validate input fields or check data compatibility
- 200: Successful response
- 200: Successful operation
- 200: Success response, check for 'null' in potentially deprecated fields
- 200: successful response; acknowledgment for webhook receipt
- Invalid HMAC: Ensure no spaces are lost in JSON string generation during webhook
    validation
- 201: Success
- 400: Bad Request; Often due to a missing required parameter
- 401: Unauthorized; No valid API key was provided
- 402: Request Failed; The parameters were valid but the request failed
- 403: Permission scope error or Uninstalled Store
- 406: Request was unacceptable, or requesting a data source which is not allowed
    although permissions permit the request
- 409: Conflict; Issues with concurrent edits
- 422: Cannot be processed due to invalid or missing supplemental information
- 426: Invalid API version used
- 503: A 3rd party service timeout
- 200: OK
- 201: Created
- 202: Accepted
- 204: No Content
- 401: Unauthorized
- 402: Request Failed
- 403: Forbidden
- 405: Method Not Allowed
- 406: Not Acceptable
- 409: Conflict
- 415: Unsupported Media Type
- 422: Unprocessable Entity
- 426: Upgrade Required
- 429: Too Many Requests
- 500: Internal Server Error
- 501: Not Implemented
- 503: Service Unavailable
- 422: Non-integer values in the 'ids' parameter will result in an error
- 401 Unauthorized: Ensure API token is correct
- 429 Rate Limit Exceeded: Implement backoff or rate limiting strategies
- 401 Unauthorized: Ensure API key is correct
- 422 Unprocessable Entity: Check for non-integer ids or incompatible parameters
- 429 Too Many Requests: Implement backoff and retry mechanisms
- QUERY_TIMEOUT: Break down filters or add selectivity
- 200: Request succeeded
- 400: Bad request, often due to missing parameter
- 401: Unauthorized, no valid API key provided
- 404: Not Found, resource doesn't exist
- 429: Rate limited, too many requests
- 401 Unauthorized: Ensure that the API Token is valid and has the necessary permissions.
- WEBHOOK_SIGNATURE_MISMATCH: Ensure no spaces are lost in JSON string generation
    for webhook validation
- 201: The request was successful; created a new resource; and resource created is
    in the body.
- 404: The requested resource doesnât exist.
- 409: Conflict occurred when trying to send two requests to edit an address or any
    of its child objects at the same time, to avoid out of date information being
    returned.
- 404: the Address with id does not exist
- 422: invalid data passed to the endpoint
- 404 Not found: The specified collection_id does not exist or is not accessible
- 404: Not found
- 415: Unprocessable entity
- 204: Content Deleted
- 201: successful response
- 422: unprocessable entity
- 500: internal server error
- 204: 'Content Deleted: The server has successfully fulfilled the request and deleted
    the desired object.'
- 201: OK; The request was successful, created a new resource
- 204: Content Deleted; The server has successfully fulfilled the request and there
    is no content to send in the response body
- status: cancelled
- 201: The request was successful; created a new resource
- You do not have sufficient permissions (scopes) for this object: Update the token
    to have "Read access" or "Read and Write access" depending on your use case
- 201: OK; The request was successful, created a new resource, and resource created
    is in the body
- 204: Content Deleted; The server has successfully fulfilled the request and deleted
    the desired object and there is no content to send in the response body.
- 202: successful response
- No specific error patterns provided in the documentation
- 200 OK response required within 5 seconds to acknowledge receipt of webhook
- If no 200 OK response within 5 seconds, retry up to 20 times over 2 days
- 204: 'Content Deleted: The server has successfully fulfilled the request and deleted
    the desired object and there is no content to send in the response body.'
- '401 Unauthorized: Recheck or regenerate API token'
- 404: The requested resource doesnâ€™t exist.
- 204: Content Deleted; server has successfully fulfilled the request and deleted
    the desired object.
- 204: Content Deleted; The server has successfully fulfilled the request and deleted
    the desired object and there is no content to send in the response body
- You do not have sufficient permissions (scopes) for this object: Update the token
    to have 'Read access' or 'Read and Write access' depending on your use case.
- 422: Non-integer values in ids will result in a 422 error
- No specific error patterns provided in the documentation.
- Response outside of 200 range: Considered a failed reception by Recharge
- '200: successful response'
- '204: Content Deleted'
- If webhooks are not triggering, check if API Token permissions are correctly set
  up.
- Validation Failed: Ensure no spaces are lost in JSON string generation for webhook
    validation
- REQUEST_LIMIT_EXCEEDED: Reduce the number of tasks per batch or decrease the frequency
    of batch submissions
- 201: successful response for creating a batch
- 200: successful response for retrieving a batch
- If one of the Addresses being merged has a different presentment currency: the entire
    merge will fail and throw an error
- '401 Unauthorized: Check the API token or its permissions'
- 201: The request was successful, created a new resource, and resource created is
    in the body
- 404: The requested resource doesn’t exist
- 405: The method is not allowed for this URI
- 404: Address with id does not exist
- error_type: CUSTOMER_NEEDS_TO_UPDATE_CARD
  advice: Instruct customer to update their credit card information.
- code: not specified
  message: Error when processed_at date is older than 90 days.
- 422 Unprocessable: Check request payload for correctness
- 201: OK; The request was successful; created a new resource; and resource created
    is in the body
- 201:
    message: 'OK: The request was successful, created a new resource, and resource
      created is in the body.'
- error_code: insufficient permissions (scopes)
  error_message: You do not have sufficient permissions (scopes) for this object
- No specific errors documented.
- 200: OK response expected to acknowledge receipt.
- 204: Content Deleted; object successfully deleted
- 'Insufficient permissions: Ensure API Token has the required ''read'' permissions'
- status: pending
- status: processing
- status: failed
- status: success
- Error when presentment currency differs: Merge operation will fail
- 401 Unauthorized: Check API key validity
- 404: Not Found; The requested resource doesnâ€™t exist.
- 405: Method Not Allowed; The method is not allowed for this URI.
- 422: Unprocessable entity
- '200': Charge captured successfully
- '400': Bad Request
- '404': Not Found
- '422': Unprocessable
- 401 Unauthorized: Check if the API key is correct and active
- 201 OK: The request was successful, created a new resource, and resource created
    is in the body
- You do not have sufficient permissions (scopes) for this object: Update the token
    to have "Read access" or "Read and Write access" depending on your use case.
- 401 Unauthorized: Recheck API Token validity
- '201: Successful creation of a retention strategy'
- '200: Successful retrieval of a retention strategy'
- Failed webhook: Ensure response is 200 OK within 5 seconds; system retries 20 times
    over 2 days before deletion
- 'REQUEST_LIMIT_EXCEEDED: Throttle API calls or reduce frequency'
- 'QUERY_TIMEOUT: Break down filters or add selectivity'
- '401 Unauthorized: Recheck OAuth scopes or token expiration'
auth_info:
  mentioned_objects:
  - API Token
  - api_token
  - API key
  - API token
  - OauthToken
  - X-Recharge-Access-Token
  - API Client Secret
  - u
  - n
  - d
  - e
  - f
  - i
  - Stripe
  - Apple Pay
  - Google Pay
  - Braintree
  - Authorize
  - AuthProvider
  - API Key
  - Recharge API token
  - API-Token
  - Customer
  - Address
  - Metafield
  - Order
  - Payment Method
  - Addresses
  - PaymentMethod
  - Async batch
  - OAuth App
  - read_events
  - API keys
  - Scopes
  - CreditAdjustment
  - CreditAccount
  - NamedCredential
  - Charge
  - Discount
  - X-Recharge-Version
  - Recharge Checkout resource
client:
  base_url: https://api.rechargeapps.com
  auth:
    type: apikey
    location: header
    header_name: X-Recharge-Access-Token
    flow: refresh_token
    token_url: https://login.api.com/services/oauth2/token
    client_id: '{{ dlt.secrets[''api_client_id''] }}'
    client_secret: '{{ dlt.secrets[''api_client_secret''] }}'
    refresh_token: '{{ dlt.secrets[''api_refresh_token''] }}'
  headers:
    Accept: application/json
    Content-Type: application/json
    X-Recharge-Access-Token: '{{ dlt.secrets[''your_api_token''] }}'
    X-Recharge-Hmac-Sha256: '{{ dlt.secrets[''api_client_secret''] }}'
    X-Recharge-Version: 2021-11
    X-Recharge-External-Platform-Domain: true
  paginator:
    type: cursor
    cursor_path: Link
    cursor_param: page_info
    default_page_size: 50
    page_size_param: limit
source_metadata: null
