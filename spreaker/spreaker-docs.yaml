resources:
- name: users
  endpoint:
    path: /v2/users/USER-ID
    method: GET
- name: me
  endpoint:
    path: /v2/me
    method: GET
- name: shows
  endpoint:
    path: /v2/shows/SHOW-ID
    method: GET
- name: episodes
  endpoint:
    path: /v2/episodes/EPISODE-ID
    method: GET
- name: statistics
  endpoint:
    path: /v2/users/USER-ID/statistics
    method: GET
- name: users
  endpoint:
    path: /api/users/
    method: GET
    data_selector: data
    params: {}
- name: shows
  endpoint:
    path: /api/shows/
    method: GET
    data_selector: data
    params: {}
- name: episodes
  endpoint:
    path: /api/episodes/
    method: GET
    data_selector: data
    params: {}
- name: upload_episode
  endpoint:
    path: /v2/shows/SHOW-ID/episodes
    method: POST
    data_selector: episode_data
- name: shows
  endpoint:
    path: /v2/shows/SHOW-ID
    method: POST
- name: episodes
  endpoint:
    path: /v2/episodes
    method: POST
    data_selector: episode
    params: {}
- name: draft_episode
  endpoint:
    path: /v2/episodes/drafts
    method: POST
    data_selector: episode
    params: {}
- name: edit_episode_metadata
  endpoint:
    path: /v2/episodes/EPISODE-ID
    method: POST
    data_selector: episode
    params: {}
- name: upload_audio_file
  endpoint:
    path: /v2/episodes/EPISODE-ID
    method: POST
    data_selector: episode
    params: {}
- name: publish_episode
  endpoint:
    path: /v2/episodes/EPISODE-ID
    method: POST
    data_selector: episode
    params: {}
- name: episode_waveform
  endpoint:
    path: /v2/episodes/{episode_id}
    method: GET
    data_selector: response.episode.waveform_url
    params: {}
- name: players
  endpoint:
    path: /player
    method: GET
    data_selector: records
- name: user
  endpoint:
    path: /v2/users/USER-ID
    method: GET
    data_selector: response.user
- name: authenticated_user
  endpoint:
    path: /v2/me
    method: GET
    data_selector: response
- name: user_followers
  endpoint:
    path: /v2/users/USER-ID/followers
    method: GET
    data_selector: response.items
- name: user_followings
  endpoint:
    path: /v2/users/USER-ID/followings
    method: GET
    data_selector: response.items
- name: user_blocks
  endpoint:
    path: /v2/users/USER-ID/blocks
    method: GET
    data_selector: response.items
- name: shows
  endpoint:
    path: /v2/shows/SHOW-ID
    method: GET
    data_selector: response.show
- name: update_show
  endpoint:
    path: /v2/shows/SHOW-ID
    method: POST
- name: delete_show
  endpoint:
    path: /v2/shows/SHOW-ID
    method: DELETE
- name: create_show
  endpoint:
    path: /v2/shows
    method: POST
- name: user_shows
  endpoint:
    path: /v2/users/USER-ID/shows
    method: GET
    data_selector: response.items
    params:
      filter: listenable
      access_level: AUTHOR
- name: add_favorite_show
  endpoint:
    path: /v2/users/USER-ID/favorites/SHOW-ID
    method: PUT
    data_selector: response
- name: remove_favorite_show
  endpoint:
    path: /v2/users/USER-ID/favorites/SHOW-ID
    method: DELETE
    data_selector: response
- name: favorited_shows
  endpoint:
    path: /v2/users/USER-ID/favorites
    method: GET
    data_selector: response.items
- name: show_rss_metadata
  endpoint:
    path: /v2/shows/SHOW-ID/rss-metadata
    method: GET
    data_selector: response.metadata
- name: customize_show_rss_metadata
  endpoint:
    path: /v2/shows/SHOW-ID/rss-metadata
    method: POST
- name: episode
  endpoint:
    path: /v2/episodes/EPISODE-ID
    method: GET
    data_selector: response.episode
- name: download_episode
  endpoint:
    path: /v2/episodes/EPISODE-ID/download
    method: GET
    data_selector: response.episode
- name: play_episode
  endpoint:
    path: /v2/episodes/EPISODE-ID/play
    method: GET
    data_selector: response.episode
- name: update_episode
  endpoint:
    path: /v2/episodes/EPISODE-ID
    method: POST
    data_selector: response.episode
- name: delete_episode
  endpoint:
    path: /v2/episodes/EPISODE-ID
    method: DELETE
- name: create_recorded_episode
  endpoint:
    path: /v2/shows/SHOW-ID/episodes
    method: POST
    data_selector: response.episode
    params: {}
- name: create_draft_episode
  endpoint:
    path: /v2/episodes/drafts
    method: POST
    data_selector: response.episode
    params: {}
- name: retrieve_user_episodes
  endpoint:
    path: /v2/users/USER-ID/episodes
    method: GET
    data_selector: response.items
    params: {}
- name: retrieve_show_episodes
  endpoint:
    path: /v2/shows/SHOW-ID/episodes
    method: GET
    data_selector: response.items
    params: {}
- name: like_episode
  endpoint:
    path: /v2/users/USER-ID/likes/EPISODE-ID
    method: PUT
    data_selector: response
    params: {}
- name: remove_like_episode
  endpoint:
    path: /v2/users/USER-ID/likes/EPISODE-ID
    method: DELETE
    data_selector: response
    params: {}
- name: check_like_episode
  endpoint:
    path: /v2/users/USER-ID/likes/EPISODE-ID
    method: GET
    data_selector: response
    params: {}
- name: retrieve_liked_episodes
  endpoint:
    path: /v2/users/USER-ID/likes
    method: GET
    data_selector: response.items
    params: {}
- name: likes
  endpoint:
    path: /v2/episodes/EPISODE-ID/likes
    method: GET
    data_selector: response.items
- name: add_bookmark
  endpoint:
    path: /v2/users/USER-ID/bookmarks/EPISODE-ID
    method: PUT
    data_selector: response
- name: remove_bookmark
  endpoint:
    path: /v2/users/USER-ID/bookmarks/EPISODE-ID
    method: DELETE
    data_selector: response
- name: episode_messages
  endpoint:
    path: /v2/episodes/EPISODE-ID/messages
    method: GET
    data_selector: items
- name: leave_message
  endpoint:
    path: /v2/episodes/EPISODE-ID/messages
    method: POST
    data_selector: null
- name: delete_message
  endpoint:
    path: /v2/episodes/EPISODE-ID/messages/MESSAGE-ID
    method: DELETE
    data_selector: null
- name: report_abuse
  endpoint:
    path: /v2/episodes/EPISODE-ID/messages/MESSAGE-ID/report-abuse
    method: POST
    data_selector: null
- name: chapters
  endpoint:
    path: /v2/episodes/EPISODE-ID/chapters
    method: GET
    data_selector: response.items
    params:
      limit: 2
- name: add_chapter
  endpoint:
    path: /v2/episodes/EPISODE-ID/chapters
    method: POST
    data_selector: response.chapter
- name: update_chapter
  endpoint:
    path: /v2/episodes/EPISODE-ID/chapters/CHAPTER-ID
    method: POST
    data_selector: response.chapter
- name: delete_chapter
  endpoint:
    path: /v2/episodes/EPISODE-ID/chapters/CHAPTER-ID
    method: DELETE
- name: delete_all_chapters
  endpoint:
    path: /v2/episodes/EPISODE-ID/chapters
    method: DELETE
- name: cuepoints
  endpoint:
    path: /v2/episodes/EPISODE-ID/cuepoints
    method: GET
    data_selector: response.cuepoints
- name: update_cuepoints
  endpoint:
    path: /v2/episodes/EPISODE-ID/cuepoints
    method: POST
    data_selector: response.cuepoints
- name: delete_cuepoints
  endpoint:
    path: /v2/episodes/EPISODE-ID/cuepoints
    method: DELETE
- name: listeners_statistics
  endpoint:
    path: /v2/shows/SHOW-ID/statistics/listeners
    method: GET
    data_selector: response.statistics
    params: {}
- name: user_overall_statistics
  endpoint:
    path: /v2/users/USER-ID/statistics
    method: GET
    data_selector: response.statistics
    params: {}
- name: show_overall_statistics
  endpoint:
    path: /v2/shows/SHOW-ID/statistics
    method: GET
    data_selector: response.statistics
    params: {}
- name: episode_overall_statistics
  endpoint:
    path: /v2/episodes/EPISODE-ID/statistics
    method: GET
    data_selector: response.statistics
    params: {}
- name: user_play_statistics
  endpoint:
    path: /v2/users/USER-ID/statistics/plays
    method: GET
    data_selector: response.statistics
    params: {}
- name: show_play_statistics
  endpoint:
    path: /v2/shows/SHOW-ID/statistics/plays
    method: GET
    data_selector: response.statistics
    params: {}
- name: episode_play_statistics
  endpoint:
    path: /v2/episodes/EPISODE-ID/statistics/plays
    method: GET
    data_selector: response.statistics
    params: {}
- name: show_episode_play_statistics
  endpoint:
    path: /v2/shows/SHOW-ID/episodes/statistics/plays/totals
    method: GET
    data_selector: response.items
    params:
      from: YYYY-MM-DD
      to: YYYY-MM-DD
- name: user_likes_statistics
  endpoint:
    path: /v2/users/USER-ID/statistics/likes
    method: GET
    data_selector: response.statistics
    params:
      from: YYYY-MM-DD
      to: YYYY-MM-DD
      group: day
- name: show_likes_statistics
  endpoint:
    path: /v2/shows/SHOW-ID/statistics/likes
    method: GET
    data_selector: response.statistics
- name: episode_likes_statistics
  endpoint:
    path: /v2/episodes/EPISODE-ID/statistics/likes
    method: GET
    data_selector: response.statistics
- name: user_followers_statistics
  endpoint:
    path: /v2/users/USER-ID/statistics/followers
    method: GET
    data_selector: response.statistics
    params:
      from: YYYY-MM-DD
      to: YYYY-MM-DD
      group: month
- name: user_sources_statistics
  endpoint:
    path: /v2/users/USER-ID/statistics/sources
    method: GET
    data_selector: response.statistics
- name: show_sources_statistics
  endpoint:
    path: /v2/shows/SHOW-ID/statistics/sources
    method: GET
    data_selector: response.statistics
- name: episode_sources_statistics
  endpoint:
    path: /v2/episodes/EPISODE-ID/statistics/sources
    method: GET
    data_selector: response.statistics
- name: user_devices_statistics
  endpoint:
    path: /v2/users/USER-ID/statistics/devices
    method: GET
    data_selector: response.statistics
- name: show_devices_statistics
  endpoint:
    path: /v2/shows/SHOW-ID/statistics/devices
    method: GET
    data_selector: response.statistics
- name: episode_devices_statistics
  endpoint:
    path: /v2/episodes/EPISODE-ID/statistics/devices
    method: GET
    data_selector: response.statistics
- name: user_os_statistics
  endpoint:
    path: /v2/users/USER-ID/statistics/os
    method: GET
    data_selector: response.statistics
- name: show_statistics_os
  endpoint:
    path: /v2/shows/SHOW-ID/statistics/os
    method: GET
    data_selector: response.statistics
- name: episode_statistics_os
  endpoint:
    path: /v2/episodes/EPISODE-ID/statistics/os
    method: GET
    data_selector: response.statistics
- name: user_geographic_statistics
  endpoint:
    path: /v2/users/USER-ID/statistics/geographics
    method: GET
    data_selector: response.statistics
- name: show_geographic_statistics
  endpoint:
    path: /v2/shows/SHOW-ID/statistics/geographics
    method: GET
    data_selector: response.statistics
- name: show_listeners_statistics
  endpoint:
    path: /v2/shows/SHOW-ID/statistics/listeners
    method: GET
    data_selector: response.statistics
- name: search_shows
  endpoint:
    path: /v2/search
    method: GET
    data_selector: response.items
    params:
      type: shows
- name: search_episodes
  endpoint:
    path: /v2/search
    method: GET
    data_selector: response.items
    params:
      type: episodes
- name: category_items
  endpoint:
    path: /v2/explore/categories/CATEGORY-ID/items
    method: GET
    data_selector: response.items
    params:
      limit: '3'
- name: latest_episodes_by_tag
  endpoint:
    path: /v2/tags/TAG-NAME/episodes
    method: GET
    data_selector: response.items
- name: oEmbed
  endpoint:
    path: /oembed
    method: GET
    data_selector: rich
    params: {}
- name: widget
  endpoint:
    path: /widget
    method: GET
    data_selector: widget_data
    params: {}
- name: newsfeed
  endpoint:
    path: /v2/users/USER-ID/newsfeed
    method: GET
    data_selector: items
    params:
      l: String
      filter: created_only
- name: widget
  endpoint:
    path: /player
    method: GET
    data_selector: null
    params:
      episode_id: null
      show_id: null
      user_id: null
      theme: null
      cover_image_url: null
      playlist: null
      playlist-continuous: null
      playlist-autoupdate: null
      autoplay: null
notes:
- All API access is over HTTPS
- GET requests do not require authentication unless otherwise documented
- Requests that return multiple items are paginated
- OAuth2 setup required for accessing the API
- Each episode must belong to a show.
- Processing can take anywhere from a few seconds to a few minutes.
- 'Processing: the episode will not be listenable or downloadable until the encoding_status
  switches to READY.'
- Draft episodes allow metadata editing while the audio file is uploaded.
- User-Agent is important to associate plays/downloads to specific applications and
  devices
- The API will only return public user profile data when using GET /v2/users/USER-ID
  unless authenticated.
- Uses OAuth2 for authentication
- The only required parameters for creating an episode are the title and either show_id
  or media_file.
- 'Authenticated: yes. Owner: yes'
- All endpoints require authentication.
- If the TAG-NAME parameter contains spaces or special characters, it needs to be
  url encoded.
- The widget can be embedded using a tiny JS loader or directly via an iframe.
- The only supported value for filter is 'created_only'.
- The widget can be embedded using a tiny JS loader or directly as an iframe.
- The anchor must have the attribute class='spreaker-player' to be recognized by the
  loader.
errors:
- '401 Unauthorized: Authenticating with invalid credentials will return as 401 Unauthorized'
- '429 Too Many Requests: Your IP address will be temporarily blacklisted if you hit
  the rate limit'
- '401 Unauthorized: Check client_id and client_secret'
- '400 Bad Request: Invalid parameters provided'
- '401 Unauthorized: Recheck OAuth scopes or token expiration'
- '401 Unauthorized: Recheck OAuth token.'
- '401 Unauthorized: Recheck OAuth token'
- 'Unauthorized: Recheck OAuth token'
- 'Not Found: Episode does not exist'
- 'Bad Request: Invalid parameters'
auth_info:
  mentioned_objects: []
client:
  base_url: https://api.spreaker.com
  auth:
    type: oauth2
    flow: authorization_code
    token_url: https://api.spreaker.com/oauth2/token
    client_id: '{{ dlt.secrets[''api_client_id''] }}'
    client_secret: '{{ dlt.secrets[''api_client_secret''] }}'
    refresh_token: '{{ dlt.secrets[''api_refresh_token''] }}'
    location: header
    header_name: Authorization
source_metadata: null
