resources:
- name: products
  endpoint:
    path: /graphql/
    method: POST
    data_selector: data.products.edges
    params: {}
- name: checkout
  endpoint:
    path: /graphql/
    method: POST
    data_selector: data.checkoutCreate.checkout
    params: {}
- name: order_create_from_checkout
  endpoint:
    path: /api/checkout
    method: POST
    data_selector: data.orderCreateFromCheckout
    params: {}
- name: order_mark_as_paid
  endpoint:
    path: /api/order
    method: POST
    data_selector: data.orderMarkAsPaid
    params: {}
- name: channels
  endpoint:
    path: /api/channels
    method: GET
    data_selector: channels
    params: {}
- name: channels
  endpoint:
    path: /channels
    method: GET
    data_selector: channels
    params: {}
- name: channelCreate
  endpoint:
    path: /api-reference/channels/mutations/channel-create
    method: POST
    data_selector: data.channelCreate.channel
    params: {}
- name: channels
  endpoint:
    path: /api-reference/channels/queries/channels
    method: GET
    data_selector: data.channels
    params: {}
- name: channelDeactivate
  endpoint:
    path: /api-reference/channels/mutations/channel-deactivate
    method: POST
    data_selector: data.channelDeactivate.channel
    params: {}
- name: channelActivate
  endpoint:
    path: /api-reference/channels/mutations/channel-activate
    method: POST
    data_selector: data.channelActivate.channel
    params: {}
- name: channelReorderWarehouses
  endpoint:
    path: /api-reference/channels/mutations/channel-reorder-warehouses
    method: POST
    data_selector: data.channelReorderWarehouses
    params: {}
- name: channel
  endpoint:
    path: /api-reference/channels/queries/channel
    method: POST
    data_selector: data.channel
    params: {}
- name: channels
  endpoint:
    path: /api-reference/channels/queries/channels
    method: POST
    data_selector: data.channels
    params: {}
- name: channelCreate
  endpoint:
    path: /api-reference/channels/mutations/channel-create
    method: POST
    data_selector: data.channelCreate.channel
    params: {}
- name: channelDeactivate
  endpoint:
    path: /api-reference/channels/mutations/channel-deactivate
    method: POST
    data_selector: data.channelDeactivate.channel
    params: {}
- name: channelActivate
  endpoint:
    path: /api-reference/channels/mutations/channel-activate
    method: POST
    data_selector: data.channelActivate.channel
    params: {}
- name: channelReorderWarehouses
  endpoint:
    path: /api-reference/channels/mutations/channel-reorder-warehouses
    method: POST
    data_selector: data.channelReorderWarehouses.channel
    params: {}
- name: channelDelete
  endpoint:
    path: /api-reference/channels/mutations/channel-delete
    method: POST
    data_selector: data.channelDelete
    params: {}
- name: product
  endpoint:
    path: /api/products/
    method: GET
    data_selector: products
- name: category
  endpoint:
    path: /api/categories/
    method: GET
    data_selector: categories
- name: webhook_triggers
  endpoint:
    path: /api/webhooks
    method: GET
    data_selector: events
    params: {}
- name: products
  endpoint:
    path: /api/products
    method: POST
    data_selector: data.products
    params: {}
- name: products
  endpoint:
    path: /graphql/
    method: POST
    data_selector: data.products.edges
    params:
      incremental: updated_at
- name: attributes
  endpoint:
    path: /attributes
    method: GET
    data_selector: attributes
- name: product_types
  endpoint:
    path: /product-types
    method: GET
    data_selector: productTypes
- name: attributes
  endpoint:
    path: /api/attributes
    method: GET
    data_selector: attributes
    params: {}
- name: products
  endpoint:
    path: /api/products
    method: POST
    data_selector: products
    params: {}
- name: pages
  endpoint:
    path: /api/pages
    method: GET
    data_selector: data
    params: {}
- name: page
  endpoint:
    path: /api/page
    method: GET
    data_selector: data
    params: {}
- name: pageCreate
  endpoint:
    path: /api/pageCreate
    method: POST
    data_selector: data
    params: {}
- name: pageUpdate
  endpoint:
    path: /api/pageUpdate
    method: POST
    data_selector: data
    params: {}
- name: pageDelete
  endpoint:
    path: /api/pageDelete
    method: POST
    data_selector: data
    params: {}
- name: menu
  endpoint:
    path: /api/menu
    method: POST
    data_selector: menu
    params: {}
- name: menuItem
  endpoint:
    path: /api/menu/item
    method: POST
    data_selector: menuItem
    params: {}
- name: checkoutShippingAddressUpdate
  endpoint:
    path: /api-reference/checkout/mutations/checkout-shipping-address-update
    method: POST
    data_selector: data.checkoutShippingAddressUpdate.checkout
    params: {}
- name: checkoutBillingAddressUpdate
  endpoint:
    path: /api-reference/checkout/mutations/checkout-billing-address-update
    method: POST
    data_selector: data.checkoutBillingAddressUpdate.checkout
    params: {}
- name: checkoutCreate
  endpoint:
    path: /api-reference/checkout/mutations/checkout-create
    method: POST
    data_selector: data.checkoutCreate.checkout
    params: {}
- name: checkoutDeliveryMethodUpdate
  endpoint:
    path: /api-reference/checkout/mutations/checkout-delivery-method-update
    method: POST
    data_selector: data.checkoutDeliveryMethodUpdate.checkout
    params: {}
- name: checkoutCreate
  endpoint:
    path: /api-reference/checkout/mutations/checkout-create
    method: POST
    data_selector: checkout
    params: {}
- name: checkoutShippingAddressUpdate
  endpoint:
    path: /api-reference/checkout/mutations/checkout-shipping-address-update
    method: POST
    data_selector: checkout
    params: {}
- name: checkoutBillingAddressUpdate
  endpoint:
    path: /api-reference/checkout/mutations/checkout-billing-address-update
    method: POST
    data_selector: checkout
    params: {}
- name: checkout_problems
  endpoint:
    path: /api-reference/checkout/objects/checkout#checkoutproblemscheckoutproblem---
    method: GET
    data_selector: problems
- name: checkout_line_problems
  endpoint:
    path: /api-reference/checkout/objects/checkout-line#checkoutlineproblemscheckoutlineproblem---
    method: GET
    data_selector: problems
- name: orderCreateFromCheckout
  endpoint:
    path: /api-reference/orders/mutations/order-create-from-checkout
    method: POST
    data_selector: order
    params: {}
- name: checkoutLinesAdd
  endpoint:
    path: /api-reference/checkout/mutations/checkout-lines-add
    method: POST
    data_selector: checkoutLines
    params: {}
- name: transactionInitialize
  endpoint:
    path: /api-reference/payments/mutations/transaction-initialize
    method: POST
    data_selector: transaction
    params: {}
- name: transactionProcess
  endpoint:
    path: /api-reference/payments/mutations/transaction-process
    method: POST
    data_selector: transaction
    params: {}
- name: checkoutCreate
  endpoint:
    path: /api-reference/checkout/mutations/checkout-create
    method: POST
    data_selector: checkout
    params: {}
- name: checkoutEmailUpdate
  endpoint:
    path: /api-reference/checkout/mutations/checkout-email-update
    method: POST
    data_selector: checkout
    params: {}
- name: checkoutLinesAdd
  endpoint:
    path: /api-reference/checkout/mutations/checkout-lines-add
    method: POST
    data_selector: checkout
    params: {}
- name: checkoutShippingAddressUpdate
  endpoint:
    path: /api-reference/checkout/mutations/checkout-shipping-address-update
    method: POST
    data_selector: checkoutShippingAddressUpdate
- name: checkoutDeliveryMethodUpdate
  endpoint:
    path: /api-reference/checkout/mutations/checkout-delivery-method-update
    method: POST
    data_selector: checkoutDeliveryMethodUpdate
- name: checkoutComplete
  endpoint:
    path: /api-reference/checkout/mutations/checkout-complete
    method: POST
    data_selector: checkoutComplete
- name: orders
  endpoint:
    path: /developer/order/overview
    method: GET
    data_selector: orders
    params: {}
- name: order_status
  endpoint:
    path: /api-reference/orders/enums/order-status
    method: GET
    data_selector: orderStates
    params: {}
- name: create_fulfillment
  endpoint:
    path: /api-reference/orders/mutations/order-fulfill
    method: POST
    data_selector: data.orderFulfill.fulfillments
    params: {}
- name: cancel_fulfillment
  endpoint:
    path: /api-reference/orders/mutations/order-fulfillment-cancel
    method: POST
    data_selector: data.orderFulfillmentCancel.fulfillment
    params: {}
- name: orderUpdate
  endpoint:
    path: /api-reference/orders/mutations/order-update
    method: POST
    data_selector: data
    params: {}
- name: orderLinesCreate
  endpoint:
    path: /api-reference/orders/mutations/order-lines-create
    method: POST
    data_selector: data
    params: {}
- name: orderLineUpdate
  endpoint:
    path: /api-reference/orders/mutations/order-line-update
    method: POST
    data_selector: data
    params: {}
- name: orderLineDelete
  endpoint:
    path: /api-reference/orders/mutations/order-line-delete
    method: POST
    data_selector: data
    params: {}
- name: orderUpdateShipping
  endpoint:
    path: /api-reference/orders/mutations/order-update-shipping
    method: POST
    data_selector: data
    params: {}
- name: orderDiscountAdd
  endpoint:
    path: /api-reference/orders/mutations/order-discount-add
    method: POST
    data_selector: data
    params: {}
- name: orderDiscountUpdate
  endpoint:
    path: /api-reference/orders/mutations/order-discount-update
    method: POST
    data_selector: data
    params: {}
- name: orderDiscountDelete
  endpoint:
    path: /api-reference/orders/mutations/order-discount-delete
    method: POST
    data_selector: data
    params: {}
- name: orderLineDiscountUpdate
  endpoint:
    path: /api-reference/orders/mutations/order-line-discount-update
    method: POST
    data_selector: data
    params: {}
- name: orderLineDiscountRemove
  endpoint:
    path: /api-reference/orders/mutations/order-line-discount-remove
    method: POST
    data_selector: data
    params: {}
- name: orderNoteAdd
  endpoint:
    path: /api-reference/orders/mutations/order-note-add
    method: POST
    data_selector: data
    params: {}
- name: orderNoteUpdate
  endpoint:
    path: /api-reference/orders/mutations/order-note-update
    method: POST
    data_selector: data
    params: {}
- name: order_expiration
  endpoint:
    path: /api-reference/orders/order-expiration
    method: POST
    data_selector: data.channelUpdate.channel.orderSettings
    params:
      expireOrdersAfter: 360
      deleteExpiredOrdersAfter: 30
- name: checkoutCreateFromOrder
  endpoint:
    path: /api-reference/checkout/mutations/checkout-create-from-order
    method: POST
    data_selector: data.checkoutCreateFromOrder
    params: {}
- name: draftOrderCreate
  endpoint:
    path: /api-reference/orders/mutations/draft-order-create
    method: POST
- name: draftOrderUpdate
  endpoint:
    path: /api-reference/orders/mutations/draft-order-update
    method: POST
- name: orderUpdateShipping
  endpoint:
    path: /api-reference/orders/mutations/order-update-shipping
    method: POST
- name: draftOrderComplete
  endpoint:
    path: /api-reference/orders/mutations/draft-order-complete
    method: POST
- name: draftOrderDelete
  endpoint:
    path: /api-reference/orders/mutations/draft-order-delete
    method: POST
- name: draftOrderBulkDelete
  endpoint:
    path: /api-reference/orders/mutations/draft-order-bulk-delete
    method: POST
- name: orderLinesCreate
  endpoint:
    path: /api-reference/orders/mutations/order-lines-create
    method: POST
- name: orderLineUpdate
  endpoint:
    path: /api-reference/orders/mutations/order-line-update
    method: POST
- name: orderLineDelete
  endpoint:
    path: /api-reference/orders/mutations/order-line-delete
    method: POST
- name: orderDiscountAdd
  endpoint:
    path: /api-reference/orders/mutations/order-discount-add
    method: POST
- name: orderDiscountUpdate
  endpoint:
    path: /api-reference/orders/mutations/order-discount-update
    method: POST
- name: orderDiscountDelete
  endpoint:
    path: /api-reference/orders/mutations/order-discount-delete
    method: POST
- name: orderLineDiscountUpdate
  endpoint:
    path: /api-reference/orders/mutations/order-line-discount-update
    method: POST
- name: orderLineDiscountRemove
  endpoint:
    path: /api-reference/orders/mutations/order-line-discount-remove
    method: POST
- name: draftOrderCreate
  endpoint:
    path: /api-reference/orders/mutations/draft-order-create
    method: POST
    data_selector: order
    params: {}
- name: draftOrderUpdate
  endpoint:
    path: /api-reference/orders/mutations/draft-order-update
    method: POST
    data_selector: order
    params: {}
- name: draft_orders
  endpoint:
    path: /api/draft-orders
    method: GET
    data_selector: draftOrders
    params:
      draftOrderLinePriceFreezePeriod: '24'
- name: paymentGatewayInitialize
  endpoint:
    path: /api-reference/payments/mutations/payment-gateway-initialize
    method: POST
    data_selector: data.paymentGatewayInitialize
    params: {}
- name: transactionInitialize
  endpoint:
    path: /api-reference/payments/mutations/transaction-initialize
    method: POST
    data_selector: data
    params: {}
- name: transactionProcess
  endpoint:
    path: /api-reference/payments/mutations/transaction-process
    method: POST
    data_selector: data
    params: {}
- name: transaction
  endpoint:
    path: /api-reference/payments/transactions
    method: POST
    data_selector: data.transactionCreate
    params: {}
- name: transactionEventReport
  endpoint:
    path: /api-reference/payments/mutations/transaction-event-report
    method: POST
    data_selector: transactionEvent
    params: {}
- name: transactionRequestAction
  endpoint:
    path: /api-reference/payments/mutations/transaction-request-action
    method: POST
    data_selector: transactionEvent
    params: {}
- name: transactionRequestRefundForGrantedRefund
  endpoint:
    path: /api-reference/payments/mutations/transaction-request-refund-for-granted-refund
    method: POST
    data_selector: transactionEvent
    params: {}
- name: transactions
  endpoint:
    path: /api/transactions
    method: GET
    data_selector: transactions
    params: {}
- name: orders
  endpoint:
    path: /api/orders
    method: GET
    data_selector: orders
    params: {}
- name: transactionRequestAction
  endpoint:
    path: /graphql
    method: POST
    data_selector: data.transactionRequestAction
    params: {}
- name: orderGrantRefundCreate
  endpoint:
    path: /graphql
    method: POST
    data_selector: data.orderGrantRefundCreate
    params: {}
- name: orderGrantRefundUpdate
  endpoint:
    path: /graphql
    method: POST
    data_selector: data.orderGrantRefundUpdate
    params: {}
- name: transactionRequestRefundForGrantedRefund
  endpoint:
    path: /graphql
    method: POST
    data_selector: data.transactionRequestRefundForGrantedRefund
    params: {}
- name: checkout.storedPaymentMethods
  endpoint:
    path: /api-reference/checkout/objects/checkout#checkoutstoredpaymentmethodsstoredpaymentmethod---
    method: GET
- name: User.storedPaymentMethods
  endpoint:
    path: /api-reference/users/objects/user#userstoredpaymentmethodsstoredpaymentmethod---
    method: GET
- name: storedPaymentMethodRequestDelete
  endpoint:
    path: /api-reference/payments/mutations/payment-gateway-initialize
    method: POST
- name: paymentGatewayInitializeTokenization
  endpoint:
    path: /api-reference/payments/mutations/payment-gateway-initialize-tokenization
    method: POST
- name: paymentMethodInitializeTokenization
  endpoint:
    path: /api-reference/payments/mutations/payment-method-initialize-tokenization
    method: POST
- name: paymentMethodProcessTokenization
  endpoint:
    path: /api-reference/payments/mutations/payment-method-process-tokenization
    method: POST
- name: warehouse
  endpoint:
    path: /api-reference/products/mutations/create-warehouse
    method: POST
    data_selector: warehouse
    params: {}
- name: stock
  endpoint:
    path: /api-reference/products/queries/stocks
    method: GET
    data_selector: stocks
    params: {}
- name: checkout
  endpoint:
    path: /graphql
    method: POST
    data_selector: data.checkout
    params: {}
- name: allocation
  endpoint:
    path: /api-reference/channels/mutations/channel-reorder-warehouses
    method: POST
    data_selector: allocation
    params: {}
- name: shippingZoneCreate
  endpoint:
    path: /api-reference/shipping/mutations/shipping-zone-create
    method: POST
    data_selector: shippingZone
    params: {}
- name: shippingZoneUpdate
  endpoint:
    path: /api-reference/shipping/mutations/shipping-zone-update
    method: POST
    data_selector: shippingZone
    params: {}
- name: shipping_methods
  endpoint:
    path: /api-reference/shipping/mutations/shipping-price-create
    method: POST
    data_selector: shippingMethod
    params: {}
- name: shipping_method_channel_listing_update
  endpoint:
    path: /api-reference/shipping/mutations/shipping-method-channel-listing-update
    method: POST
    data_selector: shippingMethod
    params: {}
- name: promotions
  endpoint:
    path: /developer/discounts/promotions
    method: GET
    data_selector: promotions
    params: {}
- name: vouchers
  endpoint:
    path: /developer/discounts/vouchers
    method: GET
    data_selector: vouchers
    params: {}
- name: manual_discounts
  endpoint:
    path: /developer/discounts/manual-discounts
    method: GET
    data_selector: manual_discounts
    params: {}
- name: catalogue_promotions
  endpoint:
    path: /promotions/catalogue
    method: GET
    data_selector: catalogue_rules
    params: {}
- name: order_promotions
  endpoint:
    path: /promotions/order
    method: GET
    data_selector: order_rules
    params: {}
- name: promotionCreate
  endpoint:
    path: /api-reference/discounts/mutations/promotion-create
    method: POST
    data_selector: promotionCreate
    params: {}
- name: promotionRuleCreate
  endpoint:
    path: /api-reference/discounts/mutations/promotion-rule-create
    method: POST
    data_selector: promotionRuleCreate
    params: {}
- name: promotionEvents
  endpoint:
    path: /api-reference/discounts/enums/promotion-events-enum
    method: GET
    data_selector: promotion.events
    params: {}
- name: voucherCreate
  endpoint:
    path: /api-reference/discounts/mutations/voucher-create
    method: POST
    data_selector: voucherCreate
    params: {}
- name: voucherUpdate
  endpoint:
    path: /api-reference/discounts/mutations/voucher-update
    method: POST
    data_selector: voucherUpdate
    params: {}
- name: voucherCataloguesAdd
  endpoint:
    path: /api-reference/discounts/mutations/voucher-catalogues-add
    method: POST
    data_selector: voucher
    params: {}
- name: voucherCataloguesRemove
  endpoint:
    path: /api-reference/discounts/mutations/voucher-catalogues-remove
    method: POST
    data_selector: voucher
    params: {}
- name: checkoutAddPromoCode
  endpoint:
    path: /api-reference/checkout/mutations/checkout-add-promo-code
    method: POST
    data_selector: data.checkoutAddPromoCode
- name: draftOrderCreate
  endpoint:
    path: /api-reference/orders/mutations/draft-order-create
    method: POST
    data_selector: data.draftOrderCreate
- name: draftOrderUpdate
  endpoint:
    path: /api-reference/orders/mutations/draft-order-update
    method: POST
    data_selector: data.draftOrderUpdate
- name: checkoutAddPromoCode
  endpoint:
    path: /checkoutAddPromoCode
    method: POST
    data_selector: checkout
    params: {}
- name: orderLineDiscountUpdate
  endpoint:
    path: /api-reference/orders/mutations/order-line-discount-update
    method: POST
    data_selector: data.orderLineDiscountUpdate
    params: {}
- name: orderDiscountAdd
  endpoint:
    path: /api-reference/orders/mutations/order-discount-add
    method: POST
    data_selector: data.orderDiscountAdd
    params: {}
- name: order_discount_add
  endpoint:
    path: /graphql
    method: POST
    data_selector: data.orderDiscountAdd.order
    params: {}
- name: checkoutLinesAdd
  endpoint:
    path: /graphql
    method: POST
    data_selector: data.checkoutLinesAdd
    params: {}
- name: checkoutAddPromoCode
  endpoint:
    path: /graphql
    method: POST
    data_selector: data.checkoutAddPromoCode
    params: {}
- name: checkoutComplete
  endpoint:
    path: /graphql
    method: POST
    data_selector: data.checkoutComplete
    params: {}
- name: accountRegister
  endpoint:
    path: /api-reference/users/mutations/account-register
    method: POST
    data_selector: accountRegister
    params: {}
- name: confirmAccount
  endpoint:
    path: /api-reference/users/mutations/confirm-account
    method: POST
    data_selector: confirmAccount
    params: {}
- name: sendConfirmationEmail
  endpoint:
    path: /api-reference/users/mutations/send-confirmation-email
    method: POST
    data_selector: sendConfirmationEmail
    params: {}
- name: requestPasswordReset
  endpoint:
    path: /api-reference/users/mutations/request-password-reset
    method: POST
    data_selector: requestPasswordReset
    params: {}
- name: setPassword
  endpoint:
    path: /api-reference/users/mutations/set-password
    method: POST
    data_selector: setPassword
    params: {}
- name: passwordChange
  endpoint:
    path: /api-reference/users/mutations/password-change
    method: POST
    data_selector: passwordChange
    params: {}
- name: requestEmailChange
  endpoint:
    path: /api-reference/users/mutations/request-email-change
    method: POST
    data_selector: requestEmailChange
    params: {}
- name: confirmEmailChange
  endpoint:
    path: /api-reference/users/mutations/confirm-email-change
    method: POST
    data_selector: confirmEmailChange
    params: {}
- name: accountRequestDeletion
  endpoint:
    path: /api-reference/users/mutations/account-request-deletion
    method: POST
    data_selector: accountRequestDeletion
    params: {}
- name: accountDelete
  endpoint:
    path: /api-reference/users/mutations/account-delete
    method: POST
    data_selector: accountDelete
    params: {}
- name: accountAddressCreate
  endpoint:
    path: /api-reference/users/mutations/account-address-create
    method: POST
    data_selector: accountAddressCreate
    params: {}
- name: accountAddressUpdate
  endpoint:
    path: /api-reference/users/mutations/account-address-update
    method: POST
    data_selector: accountAddressUpdate
    params: {}
- name: accountAddressDelete
  endpoint:
    path: /api-reference/users/mutations/account-address-delete
    method: POST
    data_selector: accountAddressDelete
    params: {}
- name: accountSetDefaultAddress
  endpoint:
    path: /api-reference/users/mutations/account-set-default-address
    method: POST
    data_selector: accountSetDefaultAddress
    params: {}
- name: customerCreate
  endpoint:
    path: /api-reference/users/mutations/customer-create
    method: POST
- name: customerUpdate
  endpoint:
    path: /api-reference/users/mutations/customer-update
    method: POST
- name: customerDelete
  endpoint:
    path: /api-reference/users/mutations/customer-delete
    method: POST
- name: customers
  endpoint:
    path: /api-reference/users/queries/customers
    method: GET
- name: staffCreate
  endpoint:
    path: /api-reference/users/mutations/staff-create
    method: POST
    data_selector: staffCreate
    params: {}
- name: staffUpdate
  endpoint:
    path: /api-reference/users/mutations/staff-update
    method: POST
    data_selector: staffUpdate
    params: {}
- name: staffDelete
  endpoint:
    path: /api-reference/users/mutations/staff-delete
    method: POST
    data_selector: staffDelete
    params: {}
- name: staffBulkDelete
  endpoint:
    path: /api-reference/users/mutations/staff-bulk-delete
    method: POST
    data_selector: staffBulkDelete
    params: {}
- name: giftCardCreate
  endpoint:
    path: /graphql
    method: POST
    data_selector: giftCardCreate
    params: {}
- name: giftCardBulkCreate
  endpoint:
    path: /graphql
    method: POST
    data_selector: giftCardBulkCreate
    params: {}
- name: giftCardResend
  endpoint:
    path: /graphql
    method: POST
    data_selector: giftCardResend
    params: {}
- name: giftCardUpdate
  endpoint:
    path: /graphql
    method: POST
    data_selector: giftCardUpdate
    params: {}
- name: giftCardDeactivate
  endpoint:
    path: /graphql
    method: POST
    data_selector: giftCardDeactivate
    params: {}
- name: giftCardSettingsUpdate
  endpoint:
    path: /graphql
    method: POST
    data_selector: giftCardSettingsUpdate
    params: {}
- name: checkoutAddPromoCode
  endpoint:
    path: /graphql
    method: POST
    data_selector: checkoutAddPromoCode
    params: {}
- name: addressValidationRules
  endpoint:
    path: /api-reference/users/queries/address-validation-rules
    method: GET
    data_selector: data.addressValidationRules
    params:
      countryCode: PL
- name: checkoutBillingAddressUpdate
  endpoint:
    path: /api-reference/checkout/mutations/checkout-billing-address-update
    method: POST
    data_selector: data.checkoutBillingAddressUpdate
    params: {}
- name: permissionGroupCreate
  endpoint:
    path: /api
    method: POST
    data_selector: data.permissionGroupCreate
    params: {}
- name: permissionGroupDelete
  endpoint:
    path: /api
    method: POST
    data_selector: data.permissionGroupDelete
    params: {}
- name: permissionGroupUpdate
  endpoint:
    path: /api
    method: POST
    data_selector: data.permissionGroupUpdate
    params: {}
- name: taxConfigurations
  endpoint:
    path: /api/taxes/taxConfigurations
    method: GET
    data_selector: taxConfigurations
    params:
      first: 10
- name: taxConfiguration
  endpoint:
    path: /api/taxes/taxConfiguration
    method: GET
    data_selector: taxConfiguration
    params:
      id: VGF4Q29uZmlndXJhdGlvbjox
- name: taxConfigurationUpdate
  endpoint:
    path: /api/taxes/taxConfigurationUpdate
    method: POST
    data_selector: taxConfiguration
    params:
      id: VGF4Q29uZmlndXJhdGlvbjox
- name: taxCountryConfigurationUpdate
  endpoint:
    path: /api/taxes/taxCountryConfigurationUpdate
    method: POST
    data_selector: taxCountryConfiguration
    params:
      countryCode: PL
- name: taxClassCreate
  endpoint:
    path: /api/taxes/taxClassCreate
    method: POST
    data_selector: taxClass
    params: {}
- name: shippingPriceUpdate
  endpoint:
    path: /api/taxes/shippingPriceUpdate
    method: POST
    data_selector: shippingMethod
    params:
      id: U2hpcHBpbmdNZXRob2RUeXBlOjE=
- name: tax_configuration_update
  endpoint:
    path: /graphql
    method: POST
    data_selector: data.taxConfigurationUpdate
    params: {}
- name: tax_exemption_manage
  endpoint:
    path: /graphql
    method: POST
    data_selector: data.taxExemptionManage
    params: {}
- name: category
  endpoint:
    path: /graphql
    method: POST
    data_selector: data.category
    params: {}
- name: attributeBulkCreate
  endpoint:
    path: /api-reference/attributes/mutations/attribute-bulk-create
    method: POST
- name: attributeBulkUpdate
  endpoint:
    path: /api-reference/attributes/mutations/attribute-bulk-update
    method: POST
- name: customerBulkUpdate
  endpoint:
    path: /api-reference/users/mutations/customer-bulk-update
    method: POST
- name: orderBulkCreate
  endpoint:
    path: /api-reference/orders/mutations/order-bulk-create
    method: POST
- name: productBulkCreate
  endpoint:
    path: /api-reference/products/mutations/product-bulk-create
    method: POST
- name: productVariantBulkCreate
  endpoint:
    path: /api-reference/products/mutations/product-variant-bulk-create
    method: POST
- name: productVariantBulkUpdate
  endpoint:
    path: /api-reference/products/mutations/product-variant-bulk-update
    method: POST
- name: stockBulkUpdate
  endpoint:
    path: /api-reference/products/mutations/stock-bulk-update
    method: POST
- name: productBulkTranslate
  endpoint:
    path: /api-reference/products/mutations/product-bulk-translate
    method: POST
- name: productVariantBulkTranslate
  endpoint:
    path: /api-reference/products/mutations/product-variant-bulk-translate
    method: POST
- name: attributeBulkTranslate
  endpoint:
    path: /api-reference/attributes/mutations/attribute-bulk-translate
    method: POST
- name: attributeValueBulkTranslate
  endpoint:
    path: /api-reference/attributes/mutations/attribute-value-bulk-translate
    method: POST
- name: promotionRuleTranslate
  endpoint:
    path: /api-reference/discounts/mutations/promotion-rule-translate
    method: POST
- name: orderBulkCreate
  endpoint:
    path: /bulk/orders
    method: POST
    data_selector: orders
    params: {}
- name: orderBulkCreate
  endpoint:
    path: /orderBulkCreate
    method: POST
    data_selector: data.orderBulkCreate.results
    params: {}
- name: attributeBulkCreate
  endpoint:
    path: /graphql
    method: POST
    data_selector: data.attributeBulkCreate.results
    params: {}
- name: attributeBulkUpdate
  endpoint:
    path: /graphql
    method: POST
    data_selector: data.attributeBulkUpdate.results
    params: {}
- name: productBulkCreate
  endpoint:
    path: /api-reference/products/mutations/product-bulk-create
    method: POST
    data_selector: productBulkCreate
- name: productVariantBulkCreate
  endpoint:
    path: /api-reference/products/mutations/product-variant-bulk-create
    method: POST
    data_selector: productVariantBulkCreate
- name: productVariantBulkUpdate
  endpoint:
    path: /api-reference/products/mutations/product-variant-bulk-update
    method: POST
    data_selector: productVariantBulkUpdate
- name: stockBulkUpdate
  endpoint:
    path: /api/products/mutations/stock-bulk-update
    method: POST
- name: exportGiftCards
  endpoint:
    path: /exportGiftCards
    method: POST
    data_selector: data.exportGiftCards
    params: {}
- name: export_file
  endpoint:
    path: /exportFile
    method: GET
    data_selector: data.exportFile
- name: export_products
  endpoint:
    path: /graphql/
    method: POST
    data_selector: data.exportProducts
    params: {}
- name: export_products
  endpoint:
    path: /graphql
    method: POST
    data_selector: exportProducts
    params: {}
- name: exportVoucherCodes
  endpoint:
    path: /graphql/
    method: POST
    data_selector: data.exportVoucherCodes
- name: availableCollectionPoints
  endpoint:
    path: /checkout/availableCollectionPoints
    method: GET
    data_selector: availableCollectionPoints
- name: checkoutDeliveryMethodUpdate
  endpoint:
    path: /checkout/deliveryMethodUpdate
    method: POST
    data_selector: checkoutDeliveryMethodUpdate
- name: fulfillment
  endpoint:
    path: /fulfillment
    method: POST
    data_selector: fulfillment
- name: shop
  endpoint:
    path: /graphql/
    method: POST
    data_selector: data.shop.name
- name: graphql
  endpoint:
    path: /graphql/
    method: POST
- name: me
  endpoint:
    path: /graphql/
    method: POST
    data_selector: data.me
- name: tokenCreate
  endpoint:
    path: /graphql/
    method: POST
    data_selector: data.tokenCreate
- name: tokenRefresh
  endpoint:
    path: /graphql/
    method: POST
    data_selector: data.tokenRefresh
- name: tokenVerify
  endpoint:
    path: /graphql/
    method: POST
    data_selector: data.tokenVerify
- name: tokensDeactivateAll
  endpoint:
    path: /graphql/
    method: POST
    data_selector: data.tokensDeactivateAll
- name: products
  endpoint:
    path: /products
    method: GET
    data_selector: data.products.edges
    params: {}
- name: update_metadata
  endpoint:
    path: /update_metadata
    method: POST
    data_selector: data.updateMetadata.item.metadata
    params: {}
- name: delete_metadata
  endpoint:
    path: /delete_metadata
    method: POST
    data_selector: data.deleteMetadata.item.metadata
    params: {}
- name: Saleor Core
  endpoint:
    path: /setup/docker-images
    method: GET
    data_selector: images
- name: Saleor Dashboard
  endpoint:
    path: /setup/docker-images
    method: GET
    data_selector: images
- name: primary_database
  endpoint:
    path: postgres://saleor:saleor@localhost:5432/saleor
    method: GET
    data_selector: records
    params: {}
- name: replica_database
  endpoint:
    path: postgres://saleor_read_only:saleor@localhost:5433/saleor
    method: GET
    data_selector: records
    params: {}
- name: dashboard
  endpoint:
    path: /graphql/
    method: GET
    data_selector: data
    params: {}
- name: storefront
  endpoint:
    path: /
    method: GET
    data_selector: data
    params: {}
- name: AdminEmails
  endpoint:
    path: ''
    method: ''
    data_selector: ''
    params:
      SMTP host: 0.0.0.0
      SMTP port: '1025'
      Sender name: Saleor
      Sender email: hello@example.com
- name: UserEmails
  endpoint:
    path: ''
    method: ''
    data_selector: ''
    params:
      SMTP host: 0.0.0.0
      SMTP port: '1025'
      Sender name: Saleor
      Sender email: hello@example.com
- name: memory_limits
  endpoint:
    path: /developer/running-saleor/memory-limits
    method: GET
    data_selector: memory_limits
    params: {}
- name: media_files
  endpoint:
    params:
      GS_MEDIA_BUCKET_NAME: The GCS bucket name to use for the media files.
- name: static_files
  endpoint:
    params:
      GS_BUCKET_NAME: The GCS bucket name to use for the static files.
- name: private_media_files
  endpoint:
    params:
      GS_MEDIA_PRIVATE_BUCKET_NAME: The GCS bucket name to use for the private media
        files.
- name: media_files
  endpoint:
    path: /setup/media-s3
    method: GET
- name: static_files
  endpoint:
    path: /setup/media-s3
    method: GET
- name: private_media_files
  endpoint:
    path: /setup/media-s3
    method: GET
- name: checkout
  endpoint:
    path: /api/checkout
    method: GET
    data_selector: data.checkout
    params: {}
- name: orders
  endpoint:
    path: /api/orders
    method: GET
    data_selector: data.orders
    params: {}
- name: transaction_initialize_session
  endpoint:
    path: /api-reference/payments/objects/transaction-initialize-session
    method: GET
    data_selector: customerIpAddress
    params: {}
- name: transaction_process_session
  endpoint:
    path: /api-reference/payments/objects/transaction-process-session
    method: GET
    data_selector: customerIpAddress
    params: {}
- name: transactionInitialize
  endpoint:
    path: /api-reference/payments/mutations/transaction-initialize
    method: POST
    data_selector: customerIpAddress
    params: {}
- name: transactionProcess
  endpoint:
    path: /api-reference/payments/mutations/transaction-process
    method: POST
    data_selector: customerIpAddress
    params: {}
notes:
- Public APIs can be accessed without authentication.
- Admin APIs require proper authentication and permissions.
- Production environments automatically create daily snapshots, which are retained
  for 7 days.
- Make sure channel is set to active in the channel configuration.
- Products can be assigned to a single category or multiple collections.
- Requires proper setup for OAuth2 authentication
- Pagination is handled through cursor-based pagination
- stocks field in the ProductVariant object require MANAGE_PRODUCTS permission.
- In the case when the address is not provided, the quantity for the shipping zone
  with the highest available quantity is returned.
- Saleor does not prevent you from deleting an attribute in use. It is up to the developer
  to ensure that the attribute is not in use before deleting it.
- Because attribute values can be missing, it is a good idea to make your code resilient
  to missing values.
- Creating a page requires MANAGE_PAGES permission
- Menu operations require the MANAGE_MENUS permission.
- The shipping and billing addresses need to be valid when finalizing checkout by
  calling checkoutComplete mutation.
- The fields for shipping and billing addresses will be normalized (if needed) on
  completing the checkout by calling checkoutComplete mutation.
- The save setting does not apply to the shipping address when the internal Click
  & Collect delivery method is used.
- Any update to the address, even a partial change, resets the saveAddress flag to
  its default behavior.
- Creating unpaid orders is possible for channels that have allowUnpaidOrders setting
  enabled.
- When taxes app is used to calculate taxes, the app is called every time taxes need
  to be recalculated.
- To improve checkout performance, you can optimize your storefront to avoid recalculating
  taxes when possible.
- 'Creating a fulfillment will trigger the following async webhook events: FULFILLMENT_CREATED,
  ORDER_FULFILLED, FULFILLMENT_TRACKING_NUMBER_UPDATED, FULFILLMENT_APPROVED'
- Canceling a fulfillment will trigger the FULFILLMENT_CANCELED webhook event
- Approving a fulfillment will trigger the FULFILLMENT_APPROVED webhook event
- The order status will change to FULFILLED if all items are fulfilled
- Updating a tracking number will trigger the FULFILLMENT_TRACKING_NUMBER_UPDATED
  webhook event
- The tracking number can be updated multiple times if needed
- When notifyCustomer a notification about the updated tracking information is triggered
  via the configured plugins or apps.
- The tracking number can be set during initial fulfillment creation or updated later
  using this mutation
- All mutations related to updating orders require the MANAGE_ORDERS permission.
- Orders will expire after 360 minutes (6 hours), and after 30 days Saleor will remove
  those orders.
- Draft Orders allow to create and manage orders on behalf of customers through the
  Saleor Dashboard or programmatically via API.
- The setting is treated as part of the address and cannot be provided independently
  in the mutation input.
- The default freeze period is controlled by the channel setting draftOrderLinePriceFreezePeriod.
- To disable automatic price refreshing, set this value to null or 0.
- Payment Apps handle the payment process for specific payment providers.
- Uses OAuth2 with refresh token — requires setup of connected app in api
- Idempotency key should be generated by the storefront and passed as a mutation input.
- The `transactionCreate` mutation can only be called by staff users or apps with
  the `HANDLE_PAYMENTS` permission.
- During the update of transactions, all funds that go to a new state should be subtracted
  from the previous state.
- The amount value is required for several event types.
- Certain events do not require a pspReference.
- This feature isn't compatible with legacy Payments API that uses plugins.
- If any issues occur during checkout validation, the checkout will not be completed.
- Checkout will be automatically completed even if some Transactions are still pending
  and waiting for confirmation from payment provider.
- Authorization status and charge status are calculated based on various transaction
  amounts and order totals.
- Each event can be excluded from calculation if it has matching *_FAILURE event with
  the same pspReference and newer time than the *_REQUEST / *_SUCCESS event.
- Cancel events should only be triggered if the transaction has been previously authorized.
- Triggering a cancel for transactions that didn't have any authorizedAmount can lead
  to negative authorizedAmount.
- Cancel events modify both the canceledAmount and authorizedAmount values, so if
  the transaction wasn’t authorized beforehand, it may result in data inconsistencies.
- In the case of finding CANCEL_SUCCESS and CANCEL_FAILURE with the same pspReference,
  the recalculation for transaction.canceledAmount will not take into account the
  amount from CANCEL_SUCCESS, when CANCEL_SUCCESS is the older one.
- If an CANCEL_FAILURE event is related to an CANCEL_REQUEST event by pspReference,
  then the transactionItem.cancelPendingAmount will be reduced by the amount reported
  in the CANCEL_FAILURE event.
- Pending amounts are treated as they were processed, so are included in all processed
  amounts.
- Authorized amounts, including amountAuthorized and amountAuthorizePending, are also
  considered processed.
- This feature is dedicated to third-party apps.
- Total balance indicates whether the customer has overpaid or underpaid for the order.
- Creating warehouse requires MANAGE_PRODUCTS permission.
- Only public warehouses can later be configured as a collection point.
- Stock will be allocated to the checkout for configured time.
- If stock reservation expires, items will become available for other users.
- Stocks are allocated in the checkout completion process for all lines with track
  inventory turned on.
- Insufficient quantity in all product stocks raises the `InsufficientStock` error.
- Creating shipping zones require `MANAGE_SHIPPING` permission.
- When creating a Shipping Zone, selecting **Rest of the World** automatically includes
  all countries that are not yet assigned to any other shipping zone.
- Shipping Methods and Shipping Rates refer to the same concept.
- Creating shipping methods requires the MANAGE_SHIPPING permission.
- The catalogue discounts from promotions are recalculated by a background task, so
  the discounted price will not be instantly visible after promotion creation.
- The number of PromotionRule with ORDER predicate type is limited to 100.
- Promotions with the SUBTOTAL_DISCOUNT do not work in conjunction with the TAX_APP
  strategy.
- Discounted prices are calculated asynchronously, so the discounted price will be
  not visible immediately after promotion creation or activation.
- The promotion discount is not visible on checkout.discount.amount.
- Order promotion cannot be mixed with Vouchers.
- Vouchers on draft orders are applicable since v3.19
- All voucher actions also generate asynchronous webhooks that can be used for reacting
  to the events emitted by Saleor.
- The discount amount can be found in `order.discounts.amount`, the value is equal
  to the `order.lines.unitDiscount` multiplied by the line quantity.
- The discount can also be seen in the line prices - compare the `undiscountedUnitPrice`
  and the `unitPrice`.
- Uses OAuth2 with refresh token — requires setup of connected app in Saleor
- Manual order discount did not override line-level discounts.
- Order-level discounts are mutually exclusive.
- The sale discount is not visible on checkout.discount.amount.
- The applied discount can be checked on the unit level in the order.lines.unitDiscount
  field.
- Creating a new account may require email confirmation depending on configuration.
- Customers can register and manage their own accounts.
- Customer metadata can be managed via the Dashboard or API.
- You need the `MANAGE_STAFF` permission to invite staff members.
- Filter presets are saved in your browser’s local storage, meaning they are only
  available on the device and browser where they were created.
- Gift cards reduce the total price and are currency-based, usable across channels
  with the same currency.
- Gift cards can be created by staff or purchased directly at checkout.
- When a user is a member of multiple groups, their permissions are summed up.
- When the restrictedAccessToChannels flag is set to false, the channels provided
  in addChannels field will be ignored.
- Thumbnails are generated on demand.
- Media files are served by CDN (Amazon Cloudfront).
- CDN may cache media files for up to 604800 seconds (7 days).
- Limit batch sizes to 100 objects per request
- Run operations during off-peak hours
- Monitor system resources during large imports
- 'Mutation requires a new permission: MANAGE_ORDERS_IMPORT.'
- You can disable address validation by setting the skipValidation flag to true in
  the AddressInput
- Mutations use the same data inputs as attributeCreate and attributeUpdate to keep
  it consistent between single and bulk mutations.
- The mutation will emit ATTRIBUTE_CREATED event for every successfully created attribute.
- The mutation will emit ATTRIBUTE_UPDATED event for every successfully updated attribute
  or when value is added or removed.
- To perform bulk operations on products and variants, you need the MANAGE_PRODUCTS
  permission.
- For large bulk imports, consider disabling webhooks to improve performance.
- Error policies were added to Saleor to allow users to choose how bulk mutations
  should behave if an error occurs.
- All new bulk mutations support errorPolicy argument.
- Products can be exported only by logged users with MANAGE_PRODUCTS permission.
- Voucher codes can be exported only by logged users with MANAGE_DISCOUNTS permission.
- App tokens obtained during the registration should never be sent to the client.
- The Vendor Portal must always validate that the vendor is only able to mutate their
  own products, based on the permissions in the token.
- OIDC itself does not enforce which resources a vendor can access or modify.
- User tokens are short lived and need to be manually refreshed.
- The `externalReference` value must be unique across a single type. The maximum length
  is 250 characters.
- The `where` filtering allows specifying more complex conditions with the use of
  `AND` and `OR` operators.
- You cannot use both filter and where options in the same query. If both are provided,
  an error will be raised.
- Slugs in Saleor are translatable for products, categories, collections, and pages.
- The slug can either be passed in mutations or it will be automatically generated
  by slugifying one of the main fields on the object.
- Saleor Cloud sandboxes are currently limited to 120 requests/minute.
- Saleor Cloud production environments and on-premise deployments have no rate limiting
  in place for the API.
- Apollo Federation doesn't handle the scenario when the federated server doesn't
  return the requested object well.
- Rely on webhooks to update or clear relations stored in your service's database
  when objects are deleted in Saleor.
- Different types can require different permissions to retrieve by the federation.
- Saleor App Store is exclusive for Saleor Cloud users.
- If you are self-hosting, you can install apps manually.
- Saleor is extensible in a microservice-based approach.
- Saleor uses shared folders to enable live code reloading.
- Windows versions before Windows 10 are not officially supported.
- The image is suitable for production use.
- We recommend using a dedicated static hosting platform like Amazon S3 and CloudFront,
  or Vercel, instead of Docker.
- Set the API_URI environment variable to your local API server's URL.
- We recommend using Redis as the message broker.
- The task scheduler is required for proper operation.
- App installation via the GraphQL API runs as a background task.
- We use environment variables to set memory limits for the Saleor process.
- If the process attempts to allocate more memory than is allowed by the limit, a
  'MemoryError' exception will be raised.
- The following integration is maintained by the community. Saleor cannot guarantee
  its quality or support.
- Keep in mind that we strongly recommend using Docker for the scalability that the
  separation of services provides.
- Saleor uses OpenTelemetry standard for telemetry data.
- Telemetry is initialized as part of Saleor's ASGI application, which can be run
  using 'uvicorn'.
- 'To use it, set the following environment variable: SENTRY_DSN'
- Make sure public access is disabled for the private media files bucket.
- Ensure that permissions are correctly configured (AWS_DEFAULT_ACL environment variable).
- These files may contain sensitive information. Make sure that public access and
  static website hosting are disabled for this bucket.
- Migrations don't lock tables, rows etc. for no longer than one second.
- Join our Discord to ask questions and propose features.
- Use the GitHub projects to report bugs.
- Check the upgrade guides for necessary steps for upgrading to the new version.
- It is recommended to first migrate to latest 3.20.X and turn on the Celery worker
  to process all data migrations asynchronously.
- No manual charge (`Transaction` or `Payment`) object will be created for orders
  with a zero total amount.
- Creating a Payment (old API) for a Checkout object with an existing Transaction
  (new API) is no longer permitted.
- To follow the zero-downtime strategy when upgrading to 3.21, it is recommended to
  first migrate to latest 3.20.X and turn on the Celery worker to process all data
  migrations asynchronously.
- Changing the useLegacyLineDiscountPropagation flag only affects orders created after
  upgrading to version 3.21.
- It does not retroactively change Discount types for vouchers already converted from
  PERCENTAGE to FIXED.
- It does not retroactively change unitDiscountReason and unitDiscount.amount fields
  on existing orders.
- Automatic checkout completion is disabled for existing instances by default and
  needs to be enabled manually in the channel settings.
- Ensure that apps or staff users, who utilize the `order` query with `externalReference`
  as input, have the `MANAGE_ORDERS` permission assigned.
- Starting from Saleor 3.16, the `NOTIFY_USER` webhook event will be deprecated.
- To migrate to new events, you need to create new webhooks in Saleor and provide
  subscription queries for the events you want to receive.
- Make sure to provide customerIpAddress parameter in transactionInitialize and transactionProcess
  mutations.
- IP Filtering is enabled by default.
- Loopback addresses are disallowed by default.
- Saleor doesn't share any data to AI vendors.
- Saleor is a 12-factor application that is configured using environment variables.
- We recommend using Docker because it takes care of all necessary dependencies.
- Make sure to add slash at the end
errors:
- 'ALREADY_EXISTS: Object already exists in the database'
- 'GRAPHQL_ERROR: Wrong query'
- 'INVALID: Invalid data provided'
- 'NOT_FOUND: Could not found object'
- 'REQUIRED: Missing required fields'
- 'UNIQUE: Provided value for field needs to be unique'
- 'CHANNEL_TARGET_ID_MUST_BE_DIFFERENT: Cannot move orders into the channel you want
  to delete'
- 'CHANNELS_CURRENCY_MUST_BE_THE_SAME: Target channel has to have the same currency'
- 'INVALID_TOKEN: Check if your token is expired or invalid'
- 'FORBIDDEN: Ensure proper permissions are set for the user'
- 'NOT_FOUND: Verify the requested resource exists'
- 'ADDRESS_VALIDATION_ERROR: Check if all required fields are provided.'
- 'INSUFFICIENT_STOCK: Not enough stock for the requested quantity'
- 'PRODUCT_NOT_PUBLISHED: The product is not published'
- 'PRODUCT_UNAVAILABLE_FOR_PURCHASE: The product is unavailable for purchase'
- 'UNAVAILABLE_VARIANT_IN_CHANNEL: The variant is unavailable in the selected channel'
- 'ORDER_REFUNDED: Triggered when a partial refund is processed'
- 'ORDER_FULLY_REFUNDED: Triggered when the entire order amount has been refunded'
- 'NOT_FOUND: Product variant not found'
- 'PRODUCT_NOT_PUBLISHED: Cannot add lines for unpublished variants.'
- Attempting to set saveShippingAddress or saveBillingAddress without including the
  corresponding shippingAddress or billingAddress will result in an error.
- 'INVALID: Idempotency key is provided as an empty string.'
- 'UNIQUE: Idempotency key and paymentGateway.id pair is already assigned to an existing
  transaction that belongs to a different order/checkout.'
- 'Unauthorized: Recheck OAuth scopes or permissions'
- 'INCORRECT_DETAILS: The event details do not match.'
- 'ALREADY_EXISTS: An event with the same pspReference already exists.'
- contains unavailable items
- billing address is not set
- attached voucher is not applicable
- attached gift card is not valid
- shipping method is invalid
- channel is inactive
- '400 Bad Request: Check input parameters.'
- '401 Unauthorized: Verify OAuth token.'
- '404 Not Found: Resource does not exist.'
- Event with AUTHORIZATION_SUCCESS already reported for the transaction. Use AUTHORIZATION_ADJUSTMENT
  to change the authorization amount.
- The transaction with provided pspReference and type already exists with different
  amount.
- 'PRODUCT_VARIANT_OUT_OF_STOCK: Triggered when a product variant''s stock level reaches
  zero.'
- 'WAREHOUSE_CREATED: Triggered when a new warehouse is added to the system.'
- 'INSUFFICIENT_STOCK: Item is sold out before checkout completion.'
- 'InsufficientStock: Not enough stock available for the order.'
- Error when adding warehouses to the shipping zone if they do not share a common
  channel.
- 'REQUEST_LIMIT_EXCEEDED: Throttle API calls or reduce frequency'
- 'QUERY_TIMEOUT: Break down filters or add selectivity'
- '401 Unauthorized: Recheck OAuth scopes or token expiration'
- 'UNIQUE: Account already registered for the given email.'
- 'REQUIRED: This field is required.'
- 'INVALID: This value is not valid for the address.'
- 'USER_NOT_FOUND: Ensure the user ID is correct and the user exists.'
- 'GROUP_NOT_FOUND: Ensure the group ID is correct and the group exists.'
- order number is not unique
- invalid billing address
- channel can’t be resolved
- delivery method can’t be resolved (if shipping is required)
- at least one of the order lines can’t be created
- at least one of the fulfillments can’t be created
- not enough or non-existing stocks (taking into account stockUpdatePolicy)
- Error with deprecated fields will result in an error during bulk mutations.
- 'NOT_FOUND: Channel ID doesn''t exist'
- 'UNIQUE: SKU already exists in the system'
- 'REQUIRED: Missing required fields for variant creation'
- 'REQUIRED: Missing required fields for variant update'
- 'INVALID_PRICE: Price value is invalid'
- 'PRODUCT_NOT_ASSIGNED_TO_CHANNEL: Variant channel listing references a channel where
  the product is not available'
- 'DUPLICATED_INPUT_ITEM: Channel ID is duplicated in the input'
- 'REQUIRED: Missing required attribute field: id or external_references'
- 'NOT_FOUND: Attribute ID doesn''t exist'
- 'ATTRIBUTE_CANNOT_BE_ASSIGNED: Given attributes are not variant attributes'
- 'NOT_FOUND: Warehouse ID doesn''t exist'
- 'STOCK_ALREADY_EXISTS: Warehouse is already assigned to given variant'
- 'NOT_FOUND: Variant ID doesn''t exist or Warehouse not assigned to product variant'
- 'INVALID: Missing required fields variantId or variantExternalReference'
- 'REJECT_EVERYTHING: If a single error occurs, in at least one of the objects, the
  whole mutation fails and no data is saved.'
- 'REJECT_FAILED_ROWS: The mutation saves only those objects, which do not produce
  any error.'
- 'IGNORE_FAILED: If an error occurs for some object, Saleor will try to save it partially
  and skip the invalid part, if it is possible.'
- Invalid voucher ID or voucher code ID provided.
- User does not have permission to export voucher codes.
- Cannot query field "fullName" on type "User". Did you mean "firstName" or "lastName"?
- 'You need one of the following permissions: MANAGE_STAFF'
- UNIQUE
- 'HTTP 429: Rate limit exceeded'
- '405: Please check if the app is actually connected to the API'
- Please don't use GitHub issues to ask questions.
- 'CHECKOUT_NOT_FULLY_PAID: Checkout hasn''t been paid.'
- 'Unauthorized: Recheck permissions for the `order` query with `externalReference`'
- Not providing customerIpAddress will result in an incorrect calculation of IP Address
  by Saleor.
auth_info:
  mentioned_objects:
  - HANDLE_PAYMENTS
  - externalAuthenticationUrl
  - externalObtainAccessTokens
  - externalRefresh
  - externalVerify
  - externalLogout
client:
  base_url: https://cloud.saleor.io
source_metadata: null
