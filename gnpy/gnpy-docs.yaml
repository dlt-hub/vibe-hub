resources:
- name: path_requests_run
  endpoint:
    path: gnpy-path-request
    method: GET
- name: transmission_example
  endpoint:
    path: gnpy-transmission-example
    method: GET
- name: Edfa
  endpoint:
    path: /equipment/config
    method: GET
    data_selector: Edfa
    params: {}
- name: Equipment Library
  endpoint:
    path: /gnpy/equipment
    method: GET
    data_selector: equipment
- name: EDFA
  endpoint:
    path: /gnpy/edfa
    method: GET
    data_selector: amplifiers
- name: Fiber
  endpoint:
    path: /gnpy/fiber
    method: GET
    data_selector: fibers
- name: RamanFiber
  endpoint:
    path: /gnpy/ramanfiber
    method: GET
    data_selector: ramanfibers
- name: Transceiver
  endpoint:
    path: /gnpy/transceiver
    method: GET
    data_selector: transceivers
- name: roadm-path-impairments
  endpoint:
    path: /roadm/path/impairments
    method: GET
- name: path-request
  endpoint:
    path: /path/request
    method: GET
    data_selector: requests
    params: {}
- name: synchronization
  endpoint:
    path: /synchronization
    method: GET
    data_selector: synchronizations
    params: {}
- name: Edfa
  endpoint:
    data_selector: parameters
- name: Fiber
  endpoint:
    data_selector: parameters
- name: Edfa
  endpoint:
    path: /services/data/vXX.X/sobjects/Edfa
    method: GET
    data_selector: records
    params: {}
- name: Transceiver
  endpoint:
    path: ''
    method: ''
    data_selector: ''
    params: {}
- name: ROADM
  endpoint:
    path: ''
    method: ''
    data_selector: ''
    params: {}
- name: Fused
  endpoint:
    path: ''
    method: ''
    data_selector: ''
    params: {}
- name: Fiber
  endpoint:
    path: ''
    method: ''
    data_selector: ''
    params: {}
- name: RamanFiber
  endpoint:
    path: ''
    method: ''
    data_selector: ''
    params: {}
- name: EDFA
  endpoint:
    path: ''
    method: ''
    data_selector: ''
    params: {}
- name: Nodes
  endpoint:
    path: /nodes
    method: GET
    data_selector: records
- name: Links
  endpoint:
    path: /links
    method: GET
    data_selector: records
- name: Eqpt
  endpoint:
    path: /eqpt
    method: GET
    data_selector: records
- name: Roadms
  endpoint:
    path: /roadms
    method: GET
    data_selector: records
- name: Service
  endpoint:
    path: /service
    method: GET
    data_selector: records
- name: Edfa
  endpoint:
    path: /gnpy/core/elements/edfa
    method: GET
- name: Fiber
  endpoint:
    path: /gnpy/core/elements/fiber
    method: GET
- name: Fused
  endpoint:
    path: /gnpy/core/elements/fused
    method: GET
- name: Location
  endpoint:
    path: /gnpy/core/elements/location
    method: GET
- name: Multiband_amplifier
  endpoint:
    path: /gnpy/core/elements/multiband_amplifier
    method: GET
- name: RamanFiber
  endpoint:
    path: /gnpy/core/elements/ramanfiber
    method: GET
- name: Roadm
  endpoint:
    path: /gnpy/core/elements/roadm
    method: GET
- name: NliSolver
  endpoint:
    path: /gnpy/core/science_utils/NliSolver
    method: GET
    data_selector: records
- name: RamanSolver
  endpoint:
    path: /gnpy/core/science_utils/RamanSolver
    method: GET
    data_selector: records
- name: power_dbm_to_psd_mw_ghz
  endpoint:
    path: /gnpy/core/utils/power_dbm_to_psd_mw_ghz
    method: GET
    data_selector: result
    params: {}
- name: psd2powerdbm
  endpoint:
    path: /gnpy/core/utils/psd2powerdbm
    method: GET
    data_selector: result
    params: {}
- name: psd_mw_per_ghz
  endpoint:
    path: /gnpy/core/utils/psd_mw_per_ghz
    method: GET
    data_selector: result
    params: {}
- name: remove_duplicates
  endpoint:
    path: /gnpy/core/utils/remove_duplicates
    method: GET
    data_selector: result
    params: {}
- name: reorder_per_degree_design_bands
  endpoint:
    path: /gnpy/core/utils/reorder_per_degree_design_bands
    method: GET
    data_selector: result
    params: {}
- name: replace_none
  endpoint:
    path: /gnpy/core/utils/replace_none
    method: GET
    data_selector: result
    params: {}
- name: restore_order
  endpoint:
    path: /gnpy/core/utils/restore_order
    method: GET
    data_selector: result
    params: {}
- name: round2float
  endpoint:
    path: /gnpy/core/utils/round2float
    method: GET
    data_selector: result
    params: {}
- name: rrc
  endpoint:
    path: /gnpy/core/utils/rrc
    method: GET
    data_selector: result
    params: {}
- name: silent_remove
  endpoint:
    path: /gnpy/core/utils/silent_remove
    method: GET
    data_selector: result
    params: {}
- name: snr_sum
  endpoint:
    path: /gnpy/core/utils/snr_sum
    method: GET
    data_selector: result
    params: {}
- name: transform_data
  endpoint:
    path: /gnpy/core/utils/transform_data
    method: GET
    data_selector: result
    params: {}
- name: unique_ordered
  endpoint:
    path: /gnpy/core/utils/unique_ordered
    method: GET
    data_selector: result
    params: {}
- name: use_pmd_coef
  endpoint:
    path: /gnpy/core/utils/use_pmd_coef
    method: GET
    data_selector: result
    params: {}
- name: watt2dbm
  endpoint:
    path: /gnpy/core/utils/watt2dbm
    method: GET
    data_selector: result
    params: {}
- name: write_csv
  endpoint:
    path: /gnpy/core/utils/write_csv
    method: GET
    data_selector: result
    params: {}
- name: Disjunction
  endpoint:
    path: /gnpy/topology/request/Disjunction
    method: GET
    data_selector: records
- name: DisjunctionParams
  endpoint:
    path: /gnpy/topology/request/DisjunctionParams
    method: GET
    data_selector: records
- name: PathRequest
  endpoint:
    path: /gnpy/topology/request/PathRequest
    method: GET
    data_selector: records
- name: RequestParams
  endpoint:
    path: /gnpy/topology/request/RequestParams
    method: GET
    data_selector: records
- name: ResultElement
  endpoint:
    path: /gnpy/topology/request/ResultElement
    method: GET
    data_selector: records
- name: Nodes
  endpoint:
    path: /nodes
    method: GET
    data_selector: records
    params: {}
- name: Links
  endpoint:
    path: /links
    method: GET
    data_selector: records
    params: {}
- name: Eqpt
  endpoint:
    path: /eqpt
    method: GET
    data_selector: records
    params: {}
- name: Amp
  endpoint:
    path: /gnpy/tools/json_io/Amp
    method: GET
    data_selector: default_values
    params: {}
- name: Fiber
  endpoint:
    path: /gnpy/tools/json_io/Fiber
    method: GET
    data_selector: default_values
    params: {}
- name: Model_dual_stage
  endpoint:
    path: /gnpy/tools/json_io/Model_dual_stage
    method: GET
    data_selector: default_values
    params: {}
- name: Model_fg
  endpoint:
    path: /gnpy/tools/json_io/Model_fg
    method: GET
    data_selector: default_values
    params: {}
- name: Model_hybrid
  endpoint:
    path: /gnpy/tools/json_io/Model_hybrid
    method: GET
    data_selector: default_values
    params: {}
- name: Model_openroadm_booster
  endpoint:
    path: /gnpy/tools/json_io/Model_openroadm_booster
    method: GET
    data_selector: default_values
    params: {}
- name: Model_openroadm_ila
  endpoint:
    path: /gnpy/tools/json_io/Model_openroadm_ila
    method: GET
    data_selector: default_values
    params: {}
- name: Model_openroadm_preamp
  endpoint:
    path: /gnpy/tools/json_io/Model_openroadm_preamp
    method: GET
    data_selector: default_values
    params: {}
- name: Model_vg
  endpoint:
    path: /gnpy/tools/json_io/Model_vg
    method: GET
    data_selector: default_values
    params: {}
- name: RamanFiber
  endpoint:
    path: /gnpy/tools/json_io/RamanFiber
    method: GET
    data_selector: default_values
    params: {}
- name: Roadm
  endpoint:
    path: /gnpy/tools/json_io/Roadm
    method: GET
    data_selector: default_values
    params: {}
- name: SI
  endpoint:
    path: /gnpy/tools/json_io/SI
    method: GET
    data_selector: default_values
    params: {}
- name: Span
  endpoint:
    path: /gnpy/tools/json_io/Span
    method: GET
    data_selector: default_values
    params: {}
- name: Transceiver
  endpoint:
    path: /gnpy/tools/json_io/Transceiver
    method: GET
    data_selector: default_values
    params: {}
- name: service_sheet
  endpoint:
    path: /service_sheet
    method: POST
    data_selector: requests
    params: {}
- name: plots
  endpoint:
    path: /plots
    method: GET
    data_selector: graphs
    params: {}
notes:
- gnpy supports Python 3 only. Python 2 is not supported.
- gnpy requires Python ≥3.8
- The gnpy maintainers strongly recommend the use of Anaconda for managing dependencies.
- The default values for EDFA configuration are now hardcoded in parameters.py and
  are no longer read from the default_edfa_config.json file.
- The function calculates the maximum and minimum lengths for fibers based on equipment
  specifications.
- It processes all fiber nodes to ensure they are within acceptable length limits
  and adds necessary amplifiers.
- The function processes all fiber nodes in the network to ensure they have the necessary
  attributes.
- It separates the addition of connector losses and padding losses for clarity in
  the code.
- The function determines the type of amplifier to add based on the connected nodes
  and the design bands of the ROADM.
- It updates the network by adding the amplifier node and connecting it to the ROADM
  and the successor node.
- The amplifier’s location metadata is set to the location of the ROADM.
- The function identifies the predecessor nodes of the ROADM that are not transceivers,
  fused elements, or amplifiers.
- The function processes ROADMs and transceivers to set their design bands and equalization
  targets.
- It also configures amplifiers and sets input powers for fibers in the network.
- If there is no SRS computed, the tilt estimation will be zero for all bands.
- The function uses the maximum center frequency power to compute the deviations and
  tilt targets.
- The function considers both power mode and gain mode when calculating the gain target
  and delta power.
- If the operational parameters are not set, default values are used for calculations.
- The function computes the tilt based on the estimated stimulated Raman scattering
  (SRS) power deviation from the previous and next spans.
- If either node is not a Fiber, the corresponding tilt estimation will not be computed.
- The function calculates the reference total power based on the number of channels
  and their power levels.
- If the node is a RamanFiber and has already estimated gain, it will return the cached
  value.
- The function applies various parameters from the equipment configuration to compute
  the gain.
- The function collects preceding nodes (Fiber and Fused) and computes the stimulated
  Raman scattering for each fiber span to estimate the power deviation.
- The results include center frequency powers normalized to the input powers and the
  in-band power deviation in dB.
- 'The function creates two lists of amplifiers: one for standard EDFAs and another
  for Raman amplifiers, applying different criteria for each.'
- If no amplifiers meet the minimum gain requirement, a warning is issued, and the
  function raises an error.
- If the amplifier node has a specified type variety, that variety takes precedence
  over other restrictions.
- The function checks for restrictions based on the previous and next nodes if applicable.
- For multiband amplifiers, it filters the available amplifiers to ensure they are
  eligible for all design bands.
- If the node is a Transceiver and has no successors, the function will return without
  yielding any nodes.
- The function iteratively filters amplifiers based on the constraints and updates
  the selection based on the results from each band.
- If no amplifiers meet the criteria, an empty list is returned.
- If the node is a Transceiver and has no predecessors, the function will return without
  yielding any nodes.
- The function considers both gain and power limitations when selecting an amplifier.
- If no suitable amplifier is found or if the target gain exceeds the capabilities
  of available amplifiers, a warning is logged.
- If the amplifier’s output VOA is set to None and the power mode is active, the function
  calculates the appropriate VOA value based on the amplifier’s parameters and the
  target power.
- If power_mode is False, the output VOA optimization is not applied.
- The function initializes power and VOA settings for each design band and updates
  them as it traverses through the network nodes.
- It handles different types of nodes (EDFA, RamanFiber, Multiband_amplifier) and
  applies appropriate configurations based on their characteristics.
- The function traverses the network to calculate the cumulative loss from the predecessor
  nodes.
- It sets the reference power based on the type of the preceding node, adjusting for
  losses accordingly.
- If the calculated input power is below the maximum target power, a warning is logged
  to inform the user.
- The function caches the computed span loss in the design_span_loss attribute of
  the node to avoid redundant calculations.
- If the node is passive, its loss is considered; otherwise, it is treated as zero.
- The function calculates the number of spans required and their respective lengths.
- It updates the network by removing the original fiber and adding the new spans with
  updated positions.
- If the node is a ROADM, the function returns 0.
- The target power is calculated based on the span loss and adjusted by the specified
  deviation.
- In theory at the optimum, the slope should be 1/3 (~0.3)
- the returned delta_p will be the optimum deviation with respect to the span_loss_ref.
- Generated CSV file contains results with headers and values.
errors:
- 'ValueError: If the gain_target is not achievable with the given parameters.'
- 'ValueError: If the node is not properly configured or if required parameters are
  missing.'
- 'ValueError: If an unexpected type is encountered for nodes during processing.'
- 'ConfigurationError: If no amplifiers meet the minimum gain requirement.'
- 'NetworkTopologyError: If the node is not properly connected in the network topology.'
- 'NetworkTopologyError: If the fiber is not properly connected in the network topology.'
- 'ConfigurationError: If the delta power range is not defined correctly in the equipment
  configuration.'
auth_info:
  mentioned_objects: []
client:
  base_url: https://hub.docker.com/r/telecominfraproject/oopt-gnpy
source_metadata: null
