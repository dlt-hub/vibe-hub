resources:
- name: consignment_products
  endpoint:
    path: /consignments//products
    method: POST
- name: product_categories
  endpoint:
    path: /product_categories/bulk
    method: DELETE
    data_selector: null
    params: {}
- name: taxes
  endpoint:
    path: /taxes
    method: GET
- name: return
  endpoint:
    path: /api/2.0/sales//actions/return
    method: PUT
- name: transactions
  endpoint:
    path: /gift_cards/transactions/
    method: GET
- name: price_book_products
  endpoint:
    path: /api/2.0/price_books//products
    method: PUT
- name: webhook
  endpoint:
    path: /webhooks/{webhookId}
    method: GET
    data_selector: ''
    params: {}
- name: image_upload
  endpoint:
    path: /products/{product_id}/actions/image_upload
    method: POST
    data_selector: body
    params: {}
- name: price_books
  endpoint:
    path: /api/3.0/price_books
    method: GET
    data_selector: data
- name: price_book_products
  endpoint:
    path: /api/2.0/price_books/:price_book_id/products
    method: GET
    data_selector: data
- name: gift_card
  endpoint:
    path: /gift_cards/
    method: GET
    data_selector: gift_cardtransactions
- name: outlet
  endpoint:
    path: /outlets/{outlet_id}
    method: GET
- name: users
  endpoint:
    path: /api/users
    method: GET
    data_selector: users
- name: set_custom_field_values
  endpoint:
    path: /workflows/custom_fields/values
    method: POST
- name: consignment_totals
  endpoint:
    path: /consignments/totals
    method: GET
    data_selector: null
    params: {}
- name: promotion
  endpoint:
    path: /promotions/{promotion_id}
    method: GET
- name: register_sale
  endpoint:
    path: /api/register_sales/
    method: GET
- name: price_books
  endpoint:
    path: /price_books
    method: GET
- name: webhook
  endpoint:
    path: /api/webhook
    method: POST
- name: update_webhook
  endpoint:
    path: /api/webhooks/:webhook_id
    method: PUT
- name: delete_webhook
  endpoint:
    path: /api/webhooks/:webhook_id
    method: DELETE
- name: products
  endpoint:
    path: /products/
    method: GET
- name: tags
  endpoint:
    path: /tags
    method: POST
- name: suppliers
  endpoint:
    path: /suppliers
    method: POST
- name: subscriptions
  endpoint:
    path: /billing/subscriptions
    method: GET
    data_selector: subscriptions
    params: {}
- name: register_sales
  endpoint:
    path: /api/register_sales
    method: POST
    data_selector: ''
    params: {}
- name: customer
  endpoint:
    path: /customers/{customer_id}
    method: PUT
- name: product_categories
  endpoint:
    path: /product_categories/bulk
    method: POST
- name: update_subscription_token
  endpoint:
    path: /partner/billing/update-subscription/token
    method: POST
- name: register_sale
  endpoint:
    path: /api/register_sales
    method: POST
- name: price_book
  endpoint:
    path: /price_books/{id}
    method: GET
- name: channels
  endpoint:
    path: /channels
    method: GET
- name: sales
  endpoint:
    path: /api/v1/sales
    method: GET
    data_selector: sales
    params:
      incremental: updated_at
- name: customer_group
  endpoint:
    path: /customer_groups/{customer_group_id}
    method: PUT
- name: products
  endpoint:
    path: /api/2.1/products/{id}
    method: PUT
    data_selector: data
- name: brands
  endpoint:
    path: /brands/
    method: PUT
- name: store_credits
  endpoint:
    path: /store_credits
    method: GET
- name: price_book
  endpoint:
    path: /price_books/{id}
    method: PUT
    data_selector: ''
    params: {}
- name: user
  endpoint:
    path: /users/{user_id}
    method: GET
- name: customer_groups_customers
  endpoint:
    path: /customer_groups//customers
    method: POST
- name: inventory_records
  endpoint:
    path: /inventory
    method: GET
- name: tax
  endpoint:
    path: /taxes/{tax_id}
    method: GET
- name: users
  endpoint:
    path: /users
    method: GET
- name: open_register
  endpoint:
    path: /api/2.0/registers/{register_id}/actions/open
    method: PUT
- name: customer
  endpoint:
    path: /customers/{customer_id}
    method: GET
- name: search_promotions
  endpoint:
    path: /promotions/search
    method: GET
    data_selector: ''
    params: {}
- name: store_credit_transaction
  endpoint:
    path: /store_credits//transactions
    method: POST
    data_selector: ''
    params: {}
- name: consignments
  endpoint:
    path: /consignments
    method: POST
    data_selector: id
- name: consignment_products
  endpoint:
    path: /consignments/:id/products
    method: POST
    data_selector: product_id
- name: update_consignment_status
  endpoint:
    path: /consignments/:id
    method: PUT
    data_selector: status
- name: price_book_products
  endpoint:
    path: /price_book_products
    method: GET
- name: channel_requests
  endpoint:
    path: /channel_requests/
    method: GET
    data_selector: ''
- name: register
  endpoint:
    path: /registers
    method: GET
- name: price_book_products
  endpoint:
    path: /products//price_book_products
    method: GET
    data_selector: records
    params: {}
- name: sales
  endpoint:
    path: /redirect/1.0/sales/{id}
    method: GET
    data_selector: ''
    params:
      platform: web
- name: gift_card
  endpoint:
    path: /gift_cards/
    method: GET
    data_selector: gift_cardtransactions
    params: {}
- name: sale_update
  endpoint:
    path: /events/sale:update
    method: POST
    data_selector: data.sale
- name: sale_complete
  endpoint:
    path: /events/sale:complete
    method: POST
    data_selector: data.sale
- name: sale_discard
  endpoint:
    path: /events/sale:discard
    method: POST
    data_selector: data.sale
- name: store_credits
  endpoint:
    path: /api/2.0/store_credits
    method: GET
    data_selector: data
- name: customer_store_credit
  endpoint:
    path: /api/2.0/store_credits/:customerID
    method: GET
    data_selector: data
- name: redeem_store_credit
  endpoint:
    path: /api/2.0/store_credits/:customerID/transactions
    method: POST
    data_selector: data
- name: product_image
  endpoint:
    path: /api/2.0/product_images/{product_image_id}
    method: DELETE
- name: users
  endpoint:
    path: /users/bulkGet
    method: POST
- name: sale
  endpoint:
    path: /sales/{sale_id}
    method: GET
- name: service_fields
  endpoint:
    path: /services/sales
    method: POST
    data_selector: service_fields
- name: products
  endpoint:
    path: /products/all
    method: DELETE
- name: outlets
  endpoint:
    path: /outlets
    method: GET
    data_selector: ''
    params: {}
- name: promocode
  endpoint:
    path: /promotions/{promotion_id}/promocodes
    method: GET
    data_selector: ''
    params: {}
- name: image_upload
  endpoint:
    path: /products/{product_id}/actions/image_upload
    method: POST
- name: webhook
  endpoint:
    path: /api/2.0/webhooks/{webhookId}
    method: PUT
    data_selector: ''
    params: {}
- name: taxes
  endpoint:
    path: /api/taxes
    method: GET
    data_selector: taxes
- name: custom_fields
  endpoint:
    path: /workflows/custom_fields
    method: GET
    data_selector: {}
    params: {}
- name: user_sale_totals
  endpoint:
    path: /users/{user_id}/sale_totals
    method: GET
- name: inventory
  endpoint:
    path: /products//inventory
    method: GET
    data_selector: inventory_data
    params: {}
- name: variant_attributes
  endpoint:
    path: /variant_attributes/
    method: PUT
- name: customer_group
  endpoint:
    path: /customer_groups
    method: POST
- name: products
  endpoint:
    path: /api/2.0/products/
    method: DELETE
- name: add_product
  endpoint:
    path: /add-product
    method: POST
    data_selector: params
- name: add_unknown_product
  endpoint:
    path: /add-unknown-product
    method: POST
    data_selector: params
- name: add_customer
  endpoint:
    path: /add-customer
    method: POST
    data_selector: params
- name: products
  endpoint:
    path: /3.0/products/{id}
    method: GET
- name: delete_variant
  endpoint:
    path: /2.0/products/{id}
    method: DELETE
- name: delete_variant_family
  endpoint:
    path: /2.0/products/{id}/all
    method: DELETE
- name: variant_attributes
  endpoint:
    path: /api/2.0/variant_attributes/
    method: DELETE
- name: image_upload
  endpoint:
    path: /api/2.0/products//actions/image_upload
    method: POST
- name: products
  endpoint:
    path: /products
    method: POST
- name: fulfill_sale
  endpoint:
    path: /api/2.0/sales/{sale_id}/fulfill
    method: POST
- name: consignment_product_delete
  endpoint:
    path: /api/2.0/consignments//products/
    method: DELETE
- name: user_sessions
  endpoint:
    path: /api/2.0/users//sessions
    method: DELETE
- name: customer_group
  endpoint:
    path: /customer_groups/{customer_group_id}
    method: GET
- name: product
  endpoint:
    path: /products/{product_id}
    method: GET
- name: price_book_product
  endpoint:
    path: /api/2.0/price_books//products
    method: DELETE
- name: custom_fields
  endpoint:
    path: /api/2.0/workflows/custom_fields
    method: POST
- name: retailer
  endpoint:
    path: /api/2.0/retailer
    method: GET
- name: brands
  endpoint:
    path: /brands/
    method: DELETE
- name: product_type
  endpoint:
    path: /product_types/{product_type_id}
    method: GET
- name: webhook
  endpoint:
    path: /webhooks
    method: POST
- name: customers
  endpoint:
    path: /api/2.0/customer_groups//customers
    method: GET
- name: services
  endpoint:
    path: /services
    method: GET
- name: retailer_info
  endpoint:
    path: /retailer
    method: GET
    data_selector: retailer
- name: supplier
  endpoint:
    path: /supplier
    method: POST
- name: request_log
  endpoint:
    path: /api/2.0/channel_requests/{request_log_id}
    method: GET
- name: bulk_delete_promo_codes
  endpoint:
    path: /promocode/bulkDelete
    method: DELETE
- name: customer_groups
  endpoint:
    path: /customer_groups
    method: GET
    data_selector: records
    params: {}
- name: remote_rules
  endpoint:
    path: /workflows/remote_rules
    method: GET
    data_selector: records
    params: {}
- name: request_log
  endpoint:
    path: /channel_requests
    method: GET
    data_selector: records
    params: {}
- name: image_upload
  endpoint:
    path: /products/%s/actions/image_upload
    method: POST
- name: payment_types
  endpoint:
    path: /api/payment_types
    method: GET
    data_selector: payment_types
    params: {}
- name: register
  endpoint:
    path: /api/registers
    method: GET
    data_selector: list
    params: {}
- name: register_sales
  endpoint:
    path: /api/register_sales
    method: POST
- name: return_sale
  endpoint:
    path: /api/2.0/sales/:id/actions/return
    method: PUT
    data_selector: data
    params: {}
- name: register_sales
  endpoint:
    path: /api/register_sales/:id
    method: GET
    data_selector: register_sales
    params: {}
- name: product_image
  endpoint:
    path: /product_images/
    method: GET
- name: customer
  endpoint:
    path: /customers
    method: POST
- name: subscriptions
  endpoint:
    path: /partner/billing/subscriptions/
    method: GET
    data_selector: ''
    params: {}
- name: image_upload
  endpoint:
    path: /products/{product_id}/actions/image_upload
    method: POST
    data_selector: response
- name: delete_supplier
  endpoint:
    path: /api/supplier/{supplier_id}
    method: DELETE
- name: update_custom_field
  endpoint:
    path: /workflows/custom_fields/{customFieldId}
    method: PUT
- name: customers
  endpoint:
    path: /customers
    method: GET
- name: gift_card_transaction
  endpoint:
    path: /gift_cards//transactions
    method: POST
    data_selector: null
    params: {}
- name: suppliers
  endpoint:
    path: /suppliers
    method: GET
- name: outlets
  endpoint:
    path: /api/outlets
    method: GET
- name: price_books
  endpoint:
    path: /price_books
    method: POST
- name: consignment_products
  endpoint:
    path: /consignments//products
    method: GET
    data_selector: records
    params: {}
- name: consignments
  endpoint:
    path: /api/2.0/consignments
    method: POST
- name: promotion
  endpoint:
    path: /promotions/
    method: PUT
    data_selector: updatedPromotion
    params: {}
- name: price_book
  endpoint:
    path: /api/2.0/price_books/
    method: GET
- name: audit_log_events
  endpoint:
    path: /auditlog_events
    method: GET
    data_selector: ''
    params: {}
- name: payment_types
  endpoint:
    path: /payment_types
    method: GET
- name: pick_lists
  endpoint:
    path: /sales/{sale_id}/pick_lists
    method: GET
    data_selector: pick_lists
    params: {}
- name: price_book
  endpoint:
    path: /api/2.0/price_books
    method: POST
- name: consignment
  endpoint:
    path: /consignments
    method: GET
- name: delete_business_rule
  endpoint:
    path: /api/2.0/workflows/rules/{ruleId}
    method: DELETE
- name: customers
  endpoint:
    path: /customers
    method: GET
    data_selector: data
    params:
      after: version
- name: customer_groups
  endpoint:
    path: /customer_groups/:id
    method: GET
    data_selector: data
    params: {}
- name: payments_summary
  endpoint:
    path: /registers//payments_summary
    method: GET
    data_selector: payload
    params: {}
- name: brands
  endpoint:
    path: /brands
    method: POST
- name: variant_attributes
  endpoint:
    path: /variant_attributes
    method: GET
- name: customer
  endpoint:
    path: /api/2.0/customers/{customer_id}
    method: DELETE
    data_selector: null
    params: {}
- name: products
  endpoint:
    path: /products
    method: GET
- name: retailer
  endpoint:
    path: /api/2.0/retailer
    method: GET
    data_selector: response
    params: {}
- name: tags
  endpoint:
    path: /tags
    method: GET
- name: consignments
  endpoint:
    path: /api/2.0/consignments/bulk
    method: POST
    data_selector: null
    params: {}
- name: sale_created
  endpoint:
    path: /events/sale.created
    method: POST
    data_selector: payload
    params: {}
- name: sale_updated
  endpoint:
    path: /events/sale.updated
    method: POST
    data_selector: payload
    params: {}
- name: remote_rule
  endpoint:
    path: /api/2.0/workflows/remote_rules
    method: POST
    data_selector: data
    params: {}
- name: rule
  endpoint:
    path: /api/2.0/workflows/rules
    method: POST
    data_selector: data
    params: {}
- name: service_order
  endpoint:
    path: /services/{service_id}
    method: GET
    data_selector: ''
    params: {}
- name: store_credit_report
  endpoint:
    path: /api/2.0/store_credits/report
    method: GET
- name: brand
  endpoint:
    path: /brands/{brand_id}
    method: GET
- name: supplier
  endpoint:
    path: /api/2.0/suppliers/
    method: DELETE
- name: products
  endpoint:
    path: /products
    method: POST
    data_selector: data
- name: tags
  endpoint:
    path: /tags/
    method: PUT
- name: retailer
  endpoint:
    path: /api/2.0/retailer
    method: GET
- name: config
  endpoint:
    path: /api/config
    method: GET
    data_selector: config
- name: products
  endpoint:
    path: /api/products
    method: GET
    data_selector: products
- name: customers
  endpoint:
    path: /api/customers
    method: GET
    data_selector: customers
- name: register_sales
  endpoint:
    path: /api/register_sales
    method: POST
    data_selector: register_sales
- name: payment_types
  endpoint:
    path: /api/payment_types
    method: GET
    data_selector: payment_types
- name: void_gift_card
  endpoint:
    path: /gift_cards/{number}
    method: DELETE
- name: products
  endpoint:
    path: /price_books//products
    method: GET
- name: consignment
  endpoint:
    path: /api/2.0/consignments/
    method: PUT
    data_selector: null
    params: {}
- name: tag
  endpoint:
    path: /tags/{tag_id}
    method: GET
- name: gift_cards
  endpoint:
    path: /gift_cards
    method: POST
- name: custom_field_values
  endpoint:
    path: /workflows/custom_fields/values
    method: GET
    data_selector: records
    params: {}
- name: product_images
  endpoint:
    path: /api/2.0/product_images/{product_image_id}
    method: PUT
    data_selector: ''
    params: {}
- name: promotions
  endpoint:
    path: /promotions
    method: GET
    data_selector: promotions
    params: {}
- name: outlet
  endpoint:
    path: /services_agenda/outlet/
    method: GET
- name: serial_number
  endpoint:
    path: /serialnumbers/{serialnumber_id}
    method: GET
- name: rules
  endpoint:
    path: /workflows/rules
    method: GET
    data_selector: ''
    params: {}
- name: consignment
  endpoint:
    path: /consignments/{consignment_id}
    method: DELETE
- name: remote_rules
  endpoint:
    path: /workflows/remote_rules
    method: POST
- name: discount
  endpoint:
    path: /api/2.0/discount
    method: POST
- name: billing_token
  endpoint:
    path: /api/2.0/partner/billing/token
    method: POST
- name: billing_subscriptions
  endpoint:
    path: /api/2.0/partner/billing/subscriptions/{subscription_id}
    method: GET
- name: image_upload
  endpoint:
    path: /products/{productID}/actions/image_upload
    method: POST
    data_selector: null
    params: {}
- name: bulkReturns
  endpoint:
    path: /store_credits/bulkReturns
    method: POST
- name: create_promotion
  endpoint:
    path: /promotions
    method: POST
- name: list_promotions
  endpoint:
    path: /promotions
    method: GET
- name: get_promotion
  endpoint:
    path: /promotions/:id
    method: GET
- name: update_promotion
  endpoint:
    path: /promotions/:id
    method: PUT
- name: delete_promotion
  endpoint:
    path: /promotions/:id
    method: PUT
- name: search
  endpoint:
    path: /search
    method: GET
    data_selector: null
    params: {}
- name: product_categories
  endpoint:
    path: /product_categories
    method: GET
- name: payments_summary
  endpoint:
    path: /registers/:id/payments_summary
    method: GET
    data_selector: data.payments
    params: {}
- name: close_register
  endpoint:
    path: /registers/:id/actions/close
    method: PUT
    data_selector: data
    params: {}
- name: variant_attributes
  endpoint:
    path: /variant_attributes
    method: POST
- name: serial_numbers
  endpoint:
    path: /serialnumbers
    method: GET
- name: delete_remote_rule
  endpoint:
    path: /workflows/remote_rules/{remoteRuleId}
    method: DELETE
    data_selector: ''
    params: {}
- name: gift_cards
  endpoint:
    path: /gift_cards
    method: GET
    data_selector: gift_cards
    params: {}
- name: create_gift_card
  endpoint:
    path: /gift_cards
    method: POST
    data_selector: gift_card
    params: {}
- name: check_gift_card
  endpoint:
    path: /gift_cards/:number
    method: GET
    data_selector: gift_card
    params: {}
- name: redeem_gift_card
  endpoint:
    path: /gift_cards/:number/transactions
    method: POST
    data_selector: transaction
    params: {}
- name: reload_gift_card
  endpoint:
    path: /gift_cards/:number/transactions
    method: POST
    data_selector: transaction
    params: {}
- name: void_gift_card
  endpoint:
    path: /gift_cards/:number
    method: DELETE
    data_selector: gift_card
    params: {}
- name: supplier
  endpoint:
    path: /api/supplier/
    method: GET
- name: service_items
  endpoint:
    path: /service_items/customer/{customer_id}
    method: GET
- name: create_inventory_count
  endpoint:
    path: /consignments
    method: POST
    data_selector: data
- name: get_inventory_count
  endpoint:
    path: /consignments/:id
    method: GET
    data_selector: data
- name: get_products_for_inventory_count
  endpoint:
    path: /consignments/:id/products
    method: GET
    data_selector: data
- name: update_inventory_count
  endpoint:
    path: /consignments/:id
    method: PUT
    data_selector: data
- name: count_products
  endpoint:
    path: /consignments/:id/products
    method: POST
    data_selector: data
- name: delete_inventory_count
  endpoint:
    path: /consignments/:id
    method: DELETE
- name: cancel_inventory_count
  endpoint:
    path: /consignments/:id
    method: PUT
    data_selector: data
- name: remove_item_from_count
  endpoint:
    path: /consignments/:id/products/:product_id
    method: DELETE
- name: supplier
  endpoint:
    path: /suppliers/{supplier_id}
    method: GET
- name: close_register
  endpoint:
    path: /api/2.0/registers/{register_id}/actions/close
    method: PUT
    data_selector: ''
    params: {}
- name: products
  endpoint:
    path: /products
    method: POST
- name: custom_field
  endpoint:
    path: /workflows/custom_fields/
    method: DELETE
    data_selector: ''
    params: {}
- name: delete_webhook
  endpoint:
    path: /api/2.0/webhooks/{webhookId}
    method: DELETE
- name: inventory.update
  endpoint:
    path: /inventory/update
    method: POST
    data_selector: records
- name: consignment.send
  endpoint:
    path: /consignment/send
    method: POST
    data_selector: records
- name: consignment.receive
  endpoint:
    path: /consignment/receive
    method: POST
    data_selector: records
- name: sale.update
  endpoint:
    path: /sale/update
    method: POST
    data_selector: records
- name: customer.update
  endpoint:
    path: /customer/update
    method: POST
    data_selector: records
- name: register_closure
  endpoint:
    path: /register_closure/create
    method: POST
    data_selector: register
    params: {}
- name: products
  endpoint:
    path: /promotions/products
    method: GET
    params:
      page_size: ''
      offset: ''
      name: ''
- name: rules
  endpoint:
    path: /workflows/rules
    method: POST
- name: product
  endpoint:
    path: /products/{id}
    method: GET
- name: webhooks
  endpoint:
    path: /webhooks
    method: GET
- name: price_book
  endpoint:
    path: /api/2.0/price_books/
    method: DELETE
- name: register_sale_products
  endpoint:
    path: /api/sales/register_sale_products
    method: POST
    data_selector: register_sale_products
- name: register_sale_payments
  endpoint:
    path: /api/sales/register_sale_payments
    method: POST
    data_selector: register_sale_payments
- name: change_sale_status
  endpoint:
    path: /api/sales/change_status
    method: POST
    data_selector: sales
- name: register_sales
  endpoint:
    path: /api/register_sales
    method: POST
    data_selector: data
- name: sales_fulfillments
  endpoint:
    path: /api/2.0/sales/:sale_id/fulfill
    method: POST
    data_selector: data
- name: sales
  endpoint:
    path: /api/2.0/sales
    method: GET
    data_selector: data
- name: single_sale
  endpoint:
    path: /api/2.0/sales/:sale_id
    method: GET
    data_selector: data
- name: sale_fulfillments
  endpoint:
    path: /api/2.0/sales/:sale_id/fulfillments
    method: GET
    data_selector: data
- name: sale_pick_lists
  endpoint:
    path: /api/2.0/sales/:sale_id/pick_lists
    method: GET
    data_selector: data
- name: outlet_taxes
  endpoint:
    path: /outlet_taxes
    method: GET
- name: customer_group
  endpoint:
    path: /api/2.0/customer_groups/{customer_group_id}
    method: DELETE
- name: gift_cards
  endpoint:
    path: /gift_cards
    method: GET
- name: image_upload
  endpoint:
    path: /api/2.0/products/{product_id}/actions/image_upload
    method: POST
- name: quotes
  endpoint:
    path: /quotes
    method: GET
- name: products
  endpoint:
    path: /products/
    method: PUT
- name: update_product_inventory
  endpoint:
    path: /api/2.1/products/{id}
    method: PUT
    data_selector: details.inventory
    params: {}
- name: webhook
  endpoint:
    path: /api/webhook
    method: POST
- name: product_types
  endpoint:
    path: /api/2.0/product_types
    method: GET
- name: create_tax
  endpoint:
    path: /taxes
    method: post
- name: get_tax
  endpoint:
    path: /taxes
    method: get
- name: sales
  endpoint:
    path: /sales
    method: GET
- name: register
  endpoint:
    path: /registers/{register_id}
    method: GET
- name: shifts
  endpoint:
    path: /shifts
    method: GET
- name: serial_number
  endpoint:
    path: /api/2.0/serialnumbers/{serialnumber_id}
    method: DELETE
- name: user
  endpoint:
    path: /users/{user_id}
    method: DELETE
- name: store_credits
  endpoint:
    path: /store_credits/{customerId}
    method: GET
    data_selector: storeCredits
    params: {}
- name: brands
  endpoint:
    path: /brands
    method: GET
- name: quote
  endpoint:
    path: /quotes/{quote_id}
    method: GET
    data_selector: ''
    params: {}
- name: current_user
  endpoint:
    path: /user
    method: GET
- name: security_events
  endpoint:
    path: /security_events
    method: GET
    data_selector: security_events
    params: {}
- name: products
  endpoint:
    path: /api/2.1/products/{product_id}
    method: PUT
    data_selector: details.composite_components
    params: {}
- name: active_promo_codes
  endpoint:
    path: /api/2.0/promocode/bulk/active
    method: POST
- name: retailer
  endpoint:
    path: /api/2.0/retailer
    method: GET
    data_selector: data
- name: registers
  endpoint:
    path: /api/2.0/registers
    method: GET
    data_selector: data
- name: users
  endpoint:
    path: /api/2.0/users
    method: GET
    data_selector: data
- name: taxes
  endpoint:
    path: /api/2.0/taxes
    method: GET
    data_selector: data
- name: payment_types
  endpoint:
    path: /api/2.0/payment_types
    method: GET
    data_selector: data
- name: search_customers
  endpoint:
    path: /api/2.0/search
    method: GET
    data_selector: data
- name: create_customer
  endpoint:
    path: /api/2.0/customers
    method: POST
    data_selector: data
- name: search_products
  endpoint:
    path: /api/2.0/search
    method: GET
    data_selector: data
- name: create_product
  endpoint:
    path: /api/2.0/products
    method: POST
    data_selector: data
- name: register_sales
  endpoint:
    path: /api/register_sales
    method: POST
    data_selector: register_sale
- name: consignment
  endpoint:
    path: /consignments/{consignment_id}
    method: GET
- name: transactions
  endpoint:
    path: /gift_cards/transactions/
    method: DELETE
- name: partner_subscription_token
  endpoint:
    path: /billing/token
    method: POST
- name: update_subscription_token
  endpoint:
    path: /api/2.0/partner/billing/update-subscription/token
    method: POST
- name: partner_consent
  endpoint:
    path: /billing/partner-consent
    method: GET
notes:
- Represents various sale statuses that can transition between different states.
- We highly recommend setting a meaningful `User-Agent` header on all the request
  you make to the API.
- In the case of a public web application, it is sufficient to use the application
  name, but you may also decide to add some more details like the version of your
  app or even a request id.
- Cannot add a product to a RECEIVED or CANCELLED order
- Cannot add a composite product to the order
- If a received value is provided for a consignment product for a SENT Supplier Order
  - the order will be automatically marked as DISPATCHED
- If a cost value is not provided for a consignment product on an OPEN Outlet order
  - the cost will be automatically populated after the fact
- Endpoints currently sunsetting will stop working completely after the sunset date.
- Before the sunset date, those endpoints will randomly, at an increasing rate, return
  `410 Gone` responses.
- When adding a product the retail price is the tax exclusive price of the product
  if your store is tax exclusive, and tax inclusive if your store is tax inclusive.
  The returned value is always tax exclusive.
- The request body may not contain more than 100 price book products.
- You may not create/update/delete more than 100 entities within a single API call.
- This endpoint has a 2.0 equivalent. We recommend using that instead.
- The consignment type can be SUPPLIER, OUTLET or RETURN.
- If the consignment type is OUTLET the sent cost may not be accurate when the status
  is OPEN.
- If the consignment is OPEN or SENT the received count and cost should both be zero.
- For completely received consignments received cost should equal the sent cost and
  the received count should equal the sent count.
- For partially received consignments we would expect the received cost value to be
  less than sent cost value, and the received count to be less than the sent count.
- Webhooks can be created via the /api/webhook endpoint.
- An incorrect payload will not cause an error when posted to the /api/register_sales
  endpoint. Instead, an empty sale, with no products and payments will be created
  and the server will respond with 200 OK.
- The sale should never be posted with OPEN status. That status is reserved for the
  client-side applications and should never make it to the server.
- Promotions cannot be used with this endpoint.
- Requires setup of connected app in Lightspeed
- Some responses may have rate limiting
- The update endpoints cannot create new variants.
- Populate the client_id field with a unique transaction identifier to ensure that
  the transaction is safe from double-submit problems.
- Once the consignment is marked as received you cannot change the received quantities.
- This status change triggers a background job which processes all the consignment
  products included in the consignment.
- The `redirect_uri` must be exactly the same as what is registered for the app in
  your developer dashboard.
- The `state` parameter is required, and it must be at least 8 characters long.
- Optional parameters include platform, action, and callback_url.
- Returns a 404 if the card does not exist.
- The API does NOT support associating store credit transactions with sales on a Lightspeed
  Retail (X-Series) register.
- Vast majority of Lightspeed Retail (X-Series) APIs only support JSON-encoded data
  as requests and responses.
- Headers for both the Content-Type and Accept should be set to application/json.
- 'There are a few exceptions to this rule: POST requests to the /api/webhooks endpoint
  are done with application/x-www-form-urlencoded content.'
- Image upload is done with multipart/form-data requests.
- OAuth requests are done with application/x-www-form-urlencoded content.
- Attributes include service_line_items, service_action, service_agenda, and service_item.
- service_agenda requires date and minutes_scheduled.
- This endpoint has a 3.0 equivalent. We recommend using that instead.
- A Hosted Web Gateway (recommend AWS)
- HTTPS Only
- Failure Resilient
- High Availability
- Familiarity with the postMessage() API
- You should not make any assumption on how many digits will be given as the amount.
- In general you should avoid using price books unless the retailers' price books
  are already defined by an external system.
- The promotions API is the recommended way of providing custom pricing as it is rule
  based and more powerful, which reduces the amount of manual changes required compared
  to price books.
- Note you can't delete a variant attribute that is currently being used by a family.
- This request should be encoded as multipart/form-data
- The generated code will not work as the underlying code generator assumes the image
  will be base64 encoded, which the API does not support.
- Cannot delete a product from a consignment with a status of DISPATCHED, RECEIVED
  or CANCELLED
- 'For consignment type OUTLET: Cannot delete a product if the consignment has a status
  of SENT or RECEIVED'
- 'For consignment type RETURN: Cannot delete a product if the consignment has a status
  of SENT'
- You may not delete more than 100 price book products at a time.
- The request body params can be used within request headers.
- When adding a product the retail price is the tax exclusive price of the product
  if your store is tax exclusive, and tax inclusive if your store is tax inclusive.
- The returned value is always tax exclusive.
- By modifying the final payload, it is possible to only return certain products from
  a sale.
- It is possible to create multiple returns against a single sale.
- For help with OAuth, read our documentation on How to OAuth with Lightspeed Retail
  (X-Series).
- Use 'REDEEMING' for redeeming from gift card balance with a negative amount.
- Use 'RELOADING' to add an amount to the gift card balance.
- A 422 HTTP status code indicates insufficient credit for the transaction.
- Messages are expected to be sent and received as JSON-encoded strings.
- An origin GET parameter is added to your gateway URL.
- In certain environments, security concerns require whitelisting of specific network
  addresses to allow incoming requests.
- These values are subject to change but any such changes will be published in the
  changelog.
- All fields must be specified in the update
- There are no partial updates
- Not every single change in the system is audited.
- The Lightspeed Retail (X-Series) id is a UUID.
- The returned list will have a maximum of 200 entries.
- To get all entries, use version filtering instead of date filtering.
- Personal Tokens are for use by individual retailers to connect to their retailer
  account.
- Add-ons are registered independently and can connect to multiple retailers.
- Must include either count or received for each product.
- It is not recommended to update more than 500 products at a time, as this may lead
  to server timeouts.
- There is a 2 second window for a response from the event triggering the rule.
- 'If the type is SUPPLIER then: If status is OPEN or SENT, the count value will be
  updated. If status is DISPATCHED, the received quantity will be updated. If status
  is OPEN, SENT or DISPATCHED, the cost can be updated. Cannot update a product in
  RECEIVED or CANCELLED status. Any updates to the received quantity field on a product
  in a SENT consignment, will set the consignment status to DISPATCHED.'
- 'If the type is OUTLET then: If the status is OPEN and there is a cost the cost
  will be updated. If the status is SENT or DISPATCHED and received is not null the
  received quantity will be updated. If the status is OPEN or SENT and count is not
  null then the count quantity will be updated.'
- If the type is RETURN and the status is OPEN or SENT and count is not null then
  the count quantity will be updated.
- If the type is STOCKTAKE and the status is STATUS_STOCKTAKE_IN_PROGRESS or STATUS_STOCKTAKE_IN_PROCESS_PROCESSED
  and received is not null then the received quantity will be updated.
- An important thing to remember, related to composite products is that a product
  used as a composite child cannot be deleted. Before that product can be deleted,
  it needs to be removed from all composites it is in, or those composites need to
  be deleted.
- When adding the discount product to the sale, its price should be the positive value
  of the discount and the quantity should be -1.
- When using line item discounts, set the price_set attribute to 1.
- Loyalty is calculated based on loyalty_ratio and price.
- Loyalty_value can be modified on a per-product basis.
- Loyalty cannot be incurred on the portion of the sale's total paid with loyalty.
- The returned retail price is the tax exclusive price of the product.
- Cannot change from SUPPLIER to a different consignment type SUPPLIER
- Can be CANCELLED at any time, except from RECEIVED
- Cannot update a SUPPLIER consignment that has the status RECEIVED or CANCELLED
- Cannot update status if there are no products in the order
- At least one product should have non-zero received quantity before updating to RECEIVED
- The system enforces a caching mechanism on retrieving webhook configurations for
  a duration of 30 minutes.
- Data received from the payments summary should be checked for discrepancies before
  closing the register.
- Idempotency is achieved by providing a unique client_id for transactions.
- Transactions do not associate a sale_id with the Gift Card transactions.
- Only the link is deleted, the customers are not.
- Filters can be used to create a partial count (i.e. count only some products in
  the store).
- Using a payload with reorder_point and restock_level set to null will change those
  values to an empty string.
- The Lightspeed Retail (X-Series) API is rate-limited, to prevent a single API consumer
  from adversely affecting others using the platform.
- Currently, the default rate limit for all sources listed above is calculated based
  on how many registers your retailer has.
- 'The current limit is: 300 x <number of registers> + 50.'
- The rate limiter is currently based on a 5 minute (300 seconds) window.
- If you hit the rate limit, you’ll be unable to make any more API requests for that
  retailer until the limiter resets.
- The best way to deal with rate limiting is to process your Lightspeed Retail (X-Series)
  API requests in a queuing system.
- Webhooks sent to OAuth-authorised applications are signed for verification using
  HMAC-SHA256.
- DEPRECATED We recommend using the product_categories endpoint instead.
- 'WARNING: Once the status of a sale is set to VOIDED it shouldn''t be changed to
  anything else. Doing so may result in corrupting inventory and payment data.'
- The payment_date attribute is optional. If not supplied the current date/time will
  be used.
- The sale should never be posted with OPEN status.
- Promotions cannot currently be used when registering a sale.
- Don't forget to put your access_token in the HTTP header for authorization
- Tokens expire after 24 hours
errors:
- 'RATE_LIMIT_EXCEEDED: Throttle API calls or reduce frequency'
- '401 Unauthorized: Check client credentials'
- '422: Customer account does not have enough credit to honour a REDEMPTION transaction.'
- '429 Too Many Requests: Reduce frequency of calls to the token endpoint.'
- Empty record set if trying to retrieve records after the last version.
- 'REQUEST_LIMIT_EXCEEDED: Throttle API calls or reduce frequency'
- 'QUERY_TIMEOUT: Break down filters or add selectivity'
- '500000: Token not provided'
- '500001: Token is used'
- '500002: Token is expired'
- '500003: Token is invalid'
- '500004: Retailer does not have a Lightspeed Retail (X-Series) subscription'
- '500005: Retailer does not have a Lightspeed Retail (X-Series) subscription'
- '500006: Retailer does not have a paid Lightspeed Retail (X-Series) subscription'
- '500007: Retailer does not have a payment profile associated with their subscription'
- '500008: Retailer has an existing subscription for this partner'
- '500009: Product not found for currency'
- '500010: Retailer rejected consent'
- '500011: Failed to create subscription'
- '500012: Retailer subscription is not active'
- '500100: Product handle not found'
- '500101: Product price point handle not found for currency'
- '500102: Token string creation process failed'
- '500103: Token insertion to DB failed'
- '500104: Component handle not found'
- '500105: Component quantity must be positive'
- '500106: Component price point handle not found'
- '500107: Duplicate components in payload'
- '500108: Invalid coupon code'
- '500109: Product or price point must be different to the current subscription'
- '500110: Component quantity must be different to the current subscription''s component
  quantity'
- '500111: Product price point is required if product handle is specified'
- '500112: Retailer is not authorized to act on this PartnerSubscriptionToken'
- '500113: Updating product and components at the same time is not supported yet'
- '500114: Product handle and components are empty'
- 422 Gift Card does not have sufficient balance
- 'Too Many Requests: Rate limiting enforced'
auth_info:
  mentioned_objects:
  - OauthToken
  - AuthProvider
  - Personal Token
  - Client ID
  - Client Secret
client:
  base_url: https://<<domain_prefix>>.retail.lightspeed.app/api/2.0/partner/billing/token
  headers:
    Content-Type: application/json
    Accept: application/json
    ContentType: multipart/form-data
    Authorization: Bearer {token}
  paginator:
    type: page
    page_size_param: page_size
    default_page_size: 200
    cursor_param: after
  auth:
    type: oauth2
    location: header
    header_name: Authorization
    flow: Authorization Code
    token_url: https://<<domain_prefix>>.retail.lightspeed.app/api/1.0/token
    client_id: '{{dlt.secrets[''client_id'']}}'
    client_secret: '{{dlt.secrets[''client_secret'']}}'
    refresh_token: '{{ dlt.secrets[''api_refresh_token''] }}'
    auth_url: https://secure.retail.lightspeed.app/connect
    access_token_url: https://<<domain_prefix>>.retail.lightspeed.app/api/1.0/token
  resources:
  - name: promotion
    endpoint:
      path: /promotions
      method: POST
  - name: fulfillments
    endpoint:
      path: /sales/{sale_id}/fulfillments
      method: GET
      data_selector: fulfillments
      params: {}
  - name: products
    endpoint:
      path: /products
      method: GET
  - name: price_book
    endpoint:
      path: /price_books/
      method: PUT
  - name: create_variant
    endpoint:
      path: /2.0/products
      method: POST
  - name: get_all_variants
    endpoint:
      path: /3.0/products/{id}
      method: GET
  - name: add_additional_variants
    endpoint:
      path: /2.1/products/
      method: POST
  - name: serial_number
    endpoint:
      path: /serialnumbers
      method: POST
  - name: variant_attribute
    endpoint:
      path: /variant_attributes/{attribute-id}
      method: GET
      data_selector: null
      params: {}
  - name: subscription
    endpoint:
      path: /billing/token/{partner_subscription_token}
      method: GET
  - name: custom_field_definition
    endpoint:
      path: /custom_fields
      method: POST
      data_selector: data
      params: {}
  - name: custom_field_values
    endpoint:
      path: /custom_fields/values
      method: POST
      data_selector: data
      params: {}
source_metadata: null
