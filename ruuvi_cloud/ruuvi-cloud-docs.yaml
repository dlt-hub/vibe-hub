resources:
- name: register_user
  endpoint:
    path: /register
    method: POST
- name: verify_account
  endpoint:
    path: /verify
    method: GET
- name: request_delete_account
  endpoint:
    path: /request-delete
    method: POST
- name: verify_account_deletion
  endpoint:
    path: /verify-delete
    method: GET
- name: claim_sensor
  endpoint:
    path: /claim
    method: POST
- name: unclaim_sensor
  endpoint:
    path: /unclaim
    method: POST
- name: share_sensor
  endpoint:
    path: /share
    method: POST
- name: unshare_sensor
  endpoint:
    path: /unshare
    method: POST
- name: get_sensors
  endpoint:
    path: /sensors
    method: GET
- name: get_sensors_dense
  endpoint:
    path: /sensors-dense
    method: GET
- name: get_user_info
  endpoint:
    path: /user
    method: GET
- name: get_sensor_data
  endpoint:
    path: /get
    method: GET
- name: update_sensor_metadata
  endpoint:
    path: /update
    method: POST
- name: upload_sensor_image
  endpoint:
    path: /upload
    method: POST
- name: get_user_settings
  endpoint:
    path: /settings
    method: GET
- name: update_user_setting
  endpoint:
    path: /settings
    method: POST
- name: create_update_alerts
  endpoint:
    path: /alerts
    method: POST
- name: get_alerts
  endpoint:
    path: /alerts
    method: GET
- name: update_sensor_setting
  endpoint:
    path: /sensor-settings
    method: POST
- name: check_sensor_claimed
  endpoint:
    path: /check
    method: GET
- name: register_user
  endpoint:
    path: /register
    method: POST
- name: verify_account
  endpoint:
    path: /verify
    method: GET
- name: request_deletion
  endpoint:
    path: /request-delete
    method: POST
- name: verify_deletion
  endpoint:
    path: /verify-delete
    method: GET
- name: claim_sensor
  endpoint:
    path: /claim
    method: POST
- name: unclaim_sensor
  endpoint:
    path: /unclaim
    method: POST
- name: contest_sensor
  endpoint:
    path: /contest-sensor
    method: POST
- name: subscription
  endpoint:
    path: /subscription
    method: POST
- name: subscription_history
  endpoint:
    path: /subscription
    method: GET
- name: push_register
  endpoint:
    path: /push-register
    method: POST
- name: push_unregister
  endpoint:
    path: /push-unregister
    method: POST
- name: push_list
  endpoint:
    path: /push-list
    method: GET
- name: sensor_data
  endpoint:
    path: /api/v1/sensor/data
    method: GET
    data_selector: data
    params: {}
- name: share_sensor
  endpoint:
    path: /share
    method: POST
    data_selector: result
- name: unshare_sensor
  endpoint:
    path: /unshare
    method: POST
    data_selector: result
- name: get_sensors
  endpoint:
    path: /sensors
    method: GET
    data_selector: data.sensors
- name: get_user_info
  endpoint:
    path: /user
    method: GET
    data_selector: data
- name: get_sensor_data
  endpoint:
    path: /get
    method: GET
    data_selector: data
- name: update_sensor_metadata
  endpoint:
    path: /update
    method: POST
    data_selector: result
- name: upload_sensor_image
  endpoint:
    path: /upload
    method: POST
    data_selector: result
- name: get_user_settings
  endpoint:
    path: /settings
    method: GET
    data_selector: data.settings
- name: update_user_setting
  endpoint:
    path: /settings
    method: POST
    data_selector: result
- name: create_update_alerts
  endpoint:
    path: /alerts
    method: POST
    data_selector: result
- name: get_alerts
  endpoint:
    path: /alerts
    method: GET
    data_selector: data.alerts
- name: update_sensor_setting
  endpoint:
    path: /sensor-settings
    method: POST
    data_selector: result
- name: check_sensor_claimed
  endpoint:
    path: /check
    method: GET
    data_selector: data.email
- name: gateway
  endpoint:
    path: /api/gateway
    method: GET
    data_selector: data
    params: {}
- name: user
  endpoint:
    path: /api/user
    method: GET
    data_selector: data
    params: {}
- name: contest_sensor
  endpoint:
    path: /contest-sensor
    method: POST
- name: subscription
  endpoint:
    path: /subscription
    method: POST
- name: get_subscription_history
  endpoint:
    path: /subscription
    method: GET
- name: push_register
  endpoint:
    path: /push-register
    method: POST
- name: push_unregister
  endpoint:
    path: /push-unregister
    method: POST
- name: push_list
  endpoint:
    path: /push-list
    method: GET
- name: sensor_data
  endpoint:
    path: /api/v1/sensor_data
    method: GET
    data_selector: data
    params: {}
- name: gateway_status
  endpoint:
    path: /api/gateway/status
    method: GET
    data_selector: status
    params: {}
- name: gateway_api
  endpoint:
    path: /communicate-with-ruuvi-cloud/cloud/gateway-api
    method: GET
    data_selector: records
    params: {}
- name: user_api
  endpoint:
    path: /user/api
    method: GET
    data_selector: records
- name: gateway_api
  endpoint:
    path: /gateway/api
    method: GET
    data_selector: records
- name: gateway
  endpoint:
    path: /gateway/api
    method: GET
    data_selector: data
    params: {}
- name: user
  endpoint:
    path: /user/api
    method: GET
    data_selector: data
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: firmware
  endpoint:
    path: /ruuvi-firmware/1.2.12
    method: GET
    data_selector: records
- name: sensor_data
  endpoint:
    path: /sensors/data
    method: GET
    data_selector: sensorRecords
- name: data_formats
  endpoint:
    path: /ruuvi-gateway-firmware/data-formats
    method: GET
    data_selector: formats
- name: configuration
  endpoint:
    path: /ruuvi-gateway-firmware/gateway-html-pages
    method: GET
    data_selector: configuration
- name: gateway
  endpoint:
    path: /api/gateway
    method: GET
    data_selector: data
    params: {}
- name: user
  endpoint:
    path: /api/user
    method: GET
    data_selector: data
    params: {}
- name: gateway
  endpoint:
    path: /api/v1/gateway
    method: GET
    data_selector: data
    params: {}
- name: software_update
  endpoint:
    path: /ruuvi-gateway-firmware/gateway-html-pages/software-update
    method: GET
- name: gateway
  endpoint:
    path: /api/v1/gateway
    method: GET
    data_selector: data
    params: {}
- name: user
  endpoint:
    path: /api/v1/user
    method: GET
    data_selector: data
    params: {}
- name: gateway_configuration
  endpoint:
    path: /api/gateway/configuration
    method: GET
    data_selector: configuration
    params: {}
- name: sensor_data
  endpoint:
    path: /api/sensors/data
    method: GET
    data_selector: data
    params:
      incremental: timestamp
- name: Bluetooth Sensor Data
  endpoint:
    path: /data/bluetooth-sensor
    method: POST
- name: Gateway Status
  endpoint:
    path: /data/gateway-status
    method: GET
- name: Time Synchronisation Options
  endpoint:
    path: /ruuvi-gateway-firmware/gateway-html-pages/time-synchronisation-options
    method: GET
    data_selector: settings
    params: {}
- name: time_stamped_data
  endpoint:
    path: /data-formats/http-time-stamped-data-from-bluetooth-sensors
    method: GET
- name: gateway_status
  endpoint:
    path: /data-formats/http-gateway-status
    method: GET
- name: selftest
  endpoint:
    path: /gw/nrf52811/selftest
    method: GET
- name: nRF52811_scan
  endpoint:
    path: /gw/nrf52811/scanning
    method: GET
    data_selector: scans
- name: SET sequence
  endpoint:
    path: /gw/nrf52811/uart/set
    method: POST
    data_selector: commands
    params: {}
- name: GET sequence
  endpoint:
    path: /gw/nrf52811/uart/get
    method: GET
    data_selector: device_id
    params: {}
- name: REPORT sequence
  endpoint:
    path: /gw/nrf52811/uart/report
    method: GET
    data_selector: advertisements
    params: {}
- name: SET sequence
  endpoint:
    path: /gw/nrf52811/uart/set
    method: POST
    data_selector: response
    params: {}
- name: GET sequence
  endpoint:
    path: /gw/nrf52811/uart/get
    method: POST
    data_selector: response
    params: {}
- name: REPORT sequence
  endpoint:
    path: /gw/nrf52811/uart/report
    method: POST
    data_selector: response
    params: {}
- name: configuration_request
  endpoint:
    path: /configuration/request
    method: GET
    data_selector: request
    params:
      CMD: RE_CA_UART_GET_ALL
      Param: '0x19'
- name: configuration_request
  endpoint:
    path: /configuration/request
    method: GET
    data_selector: request
    params:
      CMD: RE_CA_UART_GET_ALL
      Param: '0x19'
- name: ruuvi
  endpoint:
    path: /ruuvi.json
    method: GET
- name: ruuvi
  endpoint:
    path: /ruuvi.json
    method: GET
- name: gateway_configuration
  endpoint:
    path: /ruuvi.json
    method: GET
    data_selector: fw_ver
    params: {}
- name: save_configuration
  endpoint:
    path: /ruuvi.json
    method: POST
    data_selector: ''
    params: {}
- name: status
  endpoint:
    path: /status.json
    method: GET
    data_selector: ''
    params: {}
- name: scan_access_points
  endpoint:
    path: /ap.json
    method: GET
    data_selector: ''
    params: {}
- name: disconnect
  endpoint:
    path: /connect.json
    method: DELETE
    data_selector: ''
    params: {}
- name: metrics
  endpoint:
    path: /metrics
    method: GET
    data_selector: ''
    params: {}
- name: history
  endpoint:
    path: /history
    method: GET
    data_selector: ''
    params:
      time: ''
- name: gateway_configuration
  endpoint:
    path: /ruuvi.json
    method: GET
    data_selector: ''
    params: {}
- name: save_network_configuration
  endpoint:
    path: /ruuvi.json
    method: POST
    data_selector: ''
    params: {}
- name: status
  endpoint:
    path: /status.json
    method: GET
    data_selector: ''
    params: {}
- name: available_access_points
  endpoint:
    path: /ap.json
    method: GET
    data_selector: ''
    params: {}
- name: connect
  endpoint:
    path: /connect.json
    method: DELETE
    data_selector: ''
    params: {}
- name: metrics
  endpoint:
    path: /metrics
    method: GET
    data_selector: ''
    params: {}
- name: history
  endpoint:
    path: /history
    method: GET
    data_selector: ''
    params: {}
- name: button_functionality
  endpoint:
    path: /ruuvi-gateway-firmware/gw-esp32-firmware/gw-esp32-button
    method: GET
    data_selector: button functionality
    params: {}
- name: http_time_stamped_data
  endpoint:
    path: /ruuvi-gateway-firmware/data-formats/http-time-stamped-data-from-bluetooth-sensors
    method: GET
- name: http_data_without_timestamps
  endpoint:
    path: /ruuvi-gateway-firmware/data-formats/http-data-from-bluetooth-sensors-without-timestamps
    method: GET
- name: mqtt_time_stamped_data
  endpoint:
    path: /ruuvi-gateway-firmware/data-formats/mqtt-time-stamped-data-from-bluetooth-sensors
    method: GET
- name: mqtt_data_without_timestamps
  endpoint:
    path: /ruuvi-gateway-firmware/data-formats/mqtt-data-from-bluetooth-sensors-without-timestamps
    method: GET
- name: http_get_history
  endpoint:
    path: /ruuvi-gateway-firmware/data-formats/http-get-history-with-timestamps-and-decoding
    method: GET
- name: http_gateway_status
  endpoint:
    path: /ruuvi-gateway-firmware/data-formats/http-gateway-status
    method: GET
- name: gateway_configuration
  endpoint:
    path: /ruuvi-gateway-firmware/data-formats/gateway-configuration
    method: GET
- name: time_stamped_data
  endpoint:
    path: /ruuvi-gateway-firmware/data-formats/http-time-stamped-data-from-bluetooth-sensors
    method: GET
- name: data_without_timestamps
  endpoint:
    path: /ruuvi-gateway-firmware/data-formats/http-data-from-bluetooth-sensors-without-timestamps
    method: GET
- name: mqtt_time_stamped_data
  endpoint:
    path: /ruuvi-gateway-firmware/data-formats/mqtt-time-stamped-data-from-bluetooth-sensors
    method: GET
- name: mqtt_data_without_timestamps
  endpoint:
    path: /ruuvi-gateway-firmware/data-formats/mqtt-data-from-bluetooth-sensors-without-timestamps
    method: GET
- name: http_get_history
  endpoint:
    path: /ruuvi-gateway-firmware/data-formats/http-get-history-with-timestamps-and-decoding
    method: GET
- name: gateway_status
  endpoint:
    path: /ruuvi-gateway-firmware/data-formats/http-gateway-status
    method: GET
- name: gateway_configuration
  endpoint:
    path: /ruuvi-gateway-firmware/data-formats/gateway-configuration
    method: GET
- name: data
  endpoint:
    path: /ruuvi-gateway-firmware/data-formats/http-time-stamped-data-from-bluetooth-sensors
    method: GET
    data_selector: data
    params: {}
- name: time_stamped_data
  endpoint:
    path: /path/to/time-stamped/data
    method: POST
    data_selector: data
    params: {}
- name: bluetooth_data
  endpoint:
    path: /data/bluetooth
    method: POST
    data_selector: data
    params: {}
- name: bluetooth_data
  endpoint:
    path: /data
    method: POST
    data_selector: data
    params: {}
- name: bluetooth_data
  endpoint:
    path: /mqtt/time-stamped-data
    method: POST
    data_selector: data
    params: {}
- name: time_stamped_data
  endpoint:
    path: /data/mqtt/time-stamped
    method: GET
    data_selector: data
    params: {}
- name: mqtt_data_without_timestamps
  endpoint:
    path: /data/mqtt
    method: POST
    data_selector: data
    params: {}
- name: mqtt_data_without_timestamps
  endpoint:
    path: /communication/bluetooth-advertisements
    method: GET
    data_selector: examples
    params: {}
- name: history
  endpoint:
    path: /history
    method: GET
    data_selector: data
    params:
      decode: 'false'
- name: history
  endpoint:
    path: /history
    method: GET
    data_selector: data
    params:
      decode: 'false'
- name: gateway_status
  endpoint:
    path: /data-formats/http-gateway-status
    method: GET
- name: gateway_status
  endpoint:
    path: /data-formats/http-gateway-status
    method: GET
- name: gateway_status
  endpoint:
    path: /ruuvi-gateway-firmware/data-formats/gateway-status
    method: GET
    data_selector: examples
- name: gateway_status
  endpoint:
    path: /ruuvi/gateway/status
    method: GET
    data_selector: examples
    params: {}
- name: gateway_configuration
  endpoint:
    path: /api/gateway/configuration
    method: GET
    data_selector: configuration
- name: gateway_configuration
  endpoint:
    path: /gateway-configuration
    method: GET
    data_selector: configuration
- name: gateway_status
  endpoint:
    path: /status
    method: GET
    data_selector: status
- name: gateway_data
  endpoint:
    path: /record
    method: POST
    data_selector: data
- name: history
  endpoint:
    path: /history
    method: GET
    data_selector: data
- name: metrics
  endpoint:
    path: /metrics
    method: GET
    data_selector: null
    params: {}
- name: history
  endpoint:
    path: /history
    method: GET
    data_selector: data
- name: metrics
  endpoint:
    path: /metrics
    method: GET
- name: configuration_update
  endpoint:
    path: /api/configuration/update
    method: POST
    data_selector: data
    params: {}
- name: configuration
  endpoint:
    path: /ruuvi.json
    method: GET
    data_selector: configurations
- name: configuration
  endpoint:
    path: /api/configuration
    method: POST
    data_selector: data
- name: firmware_update
  endpoint:
    path: /fw_update.json
    method: POST
    data_selector: null
    params: {}
- name: configuration
  endpoint:
    path: /ruuvi.json
    method: GET
    data_selector: json
    params: {}
- name: upload_configuration
  endpoint:
    path: /ruuvi.json
    method: POST
    data_selector: json
    params:
      Content-Type: application/json
- name: configuration_download
  endpoint:
    path: /gw_cfg_download
    method: GET
    data_selector: remote_cfg_use
    params: {}
- name: configuration_download
  endpoint:
    path: /gw_cfg_download
    method: POST
    data_selector: ''
    params: {}
- name: service_messages
  endpoint:
    path: ruuvi/#/gw_status
    method: SUBSCRIBE
    data_selector: messages
    params: {}
- name: service_messages
  endpoint:
    path: ruuvi/#/gw_status
    method: SUBSCRIBE
    data_selector: messages
- name: bluetooth_sensor_messages
  endpoint:
    path: ruuvi/#/<TAG_MAC>/#
    method: SUBSCRIBE
    data_selector: messages
- name: all_messages
  endpoint:
    path: ruuvi/#
    method: SUBSCRIBE
    data_selector: messages
- name: data
  endpoint:
    path: /mqtt/data
    method: POST
    data_selector: payload
    params:
      transport: MQTT over SSL
      port: 8883
      client_id: iotconsole-xxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx
- name: open_ports_services
  endpoint:
    path: /ruuvi-gateway-firmware/gw-open-ports-services
    method: GET
- name: data_format
  endpoint:
    path: /communication/bluetooth-advertisements/data-format-3-rawv1
    method: GET
    data_selector: raw_data
- name: data_format_3_rawv1
  endpoint:
    path: /communication/bluetooth-advertisements/data-format-3-rawv1
    method: GET
    data_selector: data
- name: data_format_4
  endpoint:
    path: /communication/bluetooth-advertisements/data-format-4-url
    method: GET
    data_selector: data
    params: {}
- name: data_format_4
  endpoint:
    path: /communication/bluetooth-advertisements/data-format-4-url
    method: GET
    data_selector: data
    params: {}
- name: gateway_status
  endpoint:
    path: /data/gateway/status
    method: GET
    data_selector: records
    params: {}
- name: bluetooth_data
  endpoint:
    path: /data/bluetooth
    method: GET
    data_selector: records
    params: {}
- name: data
  endpoint:
    path: /data
    method: GET
    data_selector: records
    params: {}
- name: data_format_5_rawv2
  endpoint:
    path: /communication/bluetooth-advertisements/data-format-5-rawv2
    method: GET
    data_selector: data
    params: {}
- name: raw_data
  endpoint:
    path: /communication/bluetooth-advertisements/data-format-5-rawv2
    method: GET
    data_selector: data
    params: {}
- name: data_format_c5
  endpoint:
    path: /communication/bluetooth-advertisements/data-format-c5-rawv2
    method: GET
    data_selector: data
    params: {}
- name: data_format
  endpoint:
    path: /communication/bluetooth-advertisements/data-format-c5-rawv2
    method: GET
    data_selector: data
- name: sensor_data
  endpoint:
    path: /api/sensor/data
    method: GET
    data_selector: data
    params:
      incremental: timestamp
- name: data_format_6
  endpoint:
    path: /communication/bluetooth-advertisements/data-format-6
    method: GET
    data_selector: records
    params: {}
- name: data_format_6
  endpoint:
    path: /communication/bluetooth-advertisements/data-format-6
    method: GET
    data_selector: data
    params: {}
- name: valid_data
  endpoint:
    path: /valid_data
    method: GET
    data_selector: records
- name: maximum_values
  endpoint:
    path: /maximum_values
    method: GET
    data_selector: records
- name: minimum_values
  endpoint:
    path: /minimum_values
    method: GET
    data_selector: records
- name: invalid_values
  endpoint:
    path: /invalid_values
    method: GET
    data_selector: records
- name: valid_data
  endpoint:
    path: /valid_data
    method: GET
    data_selector: records
- name: maximum_values
  endpoint:
    path: /maximum_values
    method: GET
    data_selector: records
- name: minimum_values
  endpoint:
    path: /minimum_values
    method: GET
    data_selector: records
- name: invalid_values
  endpoint:
    path: /invalid_values
    method: GET
    data_selector: records
- name: encrypted_environmental_data
  endpoint:
    path: /communication/bluetooth-advertisements/data-format-8/encrypted-environmental
    method: GET
    data_selector: data
    params: {}
- name: data_format_8
  endpoint:
    path: /communication/bluetooth-advertisements/data-format-8-encrypted-environmental
    method: GET
    data_selector: data
    params: {}
- name: data_format_e1
  endpoint:
    path: /communication/bluetooth-advertisements/data-format-e1
    method: GET
    data_selector: payload
    params: {}
- name: data_format_e1
  endpoint:
    path: /communication/bluetooth-advertisements/data-format-e1
    method: GET
    data_selector: records
- name: valid_data
  endpoint:
    path: /valid_data
    method: GET
    data_selector: records
    params: {}
- name: maximum_values
  endpoint:
    path: /maximum_values
    method: GET
    data_selector: records
    params: {}
- name: minimum_values
  endpoint:
    path: /minimum_values
    method: GET
    data_selector: records
    params: {}
- name: invalid_values
  endpoint:
    path: /invalid_values
    method: GET
    data_selector: records
    params: {}
- name: data_format_E1
  endpoint:
    path: /communication/bluetooth-advertisements/data-format-e1
    method: GET
    data_selector: data
- name: valid_data
  endpoint:
    path: /valid_data
    method: GET
    data_selector: data
    params: {}
- name: maximum_values
  endpoint:
    path: /maximum_values
    method: GET
    data_selector: data
    params: {}
- name: minimum_values
  endpoint:
    path: /minimum_values
    method: GET
    data_selector: data
    params: {}
- name: invalid_values
  endpoint:
    path: /invalid_values
    method: GET
    data_selector: data
    params: {}
- name: Device Information Service
  endpoint:
    path: /communication/bluetooth-connection/device-information-service-dis
    method: GET
- name: Nordic UART Service
  endpoint:
    path: /communication/bluetooth-connection/nordic-uart-service-nus
    method: GET
- name: nordic_uart_service
  endpoint:
    path: /communication/bluetooth-connection/nordic-uart-service-nus
    method: GET
    data_selector: characteristics
    params: {}
- name: user_api
  endpoint:
    path: /communicate-with-ruuvi-cloud/cloud/user-api
    method: GET
- name: gateway_api
  endpoint:
    path: /communicate-with-ruuvi-cloud/cloud/gateway-api
    method: GET
- name: internal_api
  endpoint:
    path: /communicate-with-ruuvi-cloud/cloud/internal-api
    method: GET
- name: alerts
  endpoint:
    path: /communicate-with-ruuvi-cloud/cloud/alerts
    method: GET
- name: cloud_stored_app_settings
  endpoint:
    path: /communicate-with-ruuvi-cloud/cloud/cloud-stored-app-settings
    method: GET
- name: send_sensor_data
  endpoint:
    path: /dev/record
    method: POST
    data_selector: data
    params: {}
- name: RX
  endpoint:
    path: /nordic-uart-service/characteristic/RX
    method: WRITE
    data_selector: payload
    params: {}
- name: TX
  endpoint:
    path: /nordic-uart-service/characteristic/TX
    method: NOTIFY
    data_selector: payload
    params: {}
- name: whitelist
  endpoint:
    path: /whitelist
    method: POST
- name: gateway_info
  endpoint:
    path: /gwinfo
    method: GET
- name: register_sensor
  endpoint:
    path: /register-sensor
    method: POST
- name: subscription_register
  endpoint:
    path: /subscription-register
    method: POST
- name: send_sensor_data
  endpoint:
    path: /dev/record
    method: POST
    data_selector: data
- name: whitelist
  endpoint:
    path: /whitelist
    method: POST
- name: gateway_info
  endpoint:
    path: /gwinfo
    method: GET
- name: register_sensor
  endpoint:
    path: /register-sensor
    method: POST
- name: subscription_register
  endpoint:
    path: /subscription-register
    method: POST
- name: alerts
  endpoint:
    path: /alerts
    method: GET
    data_selector: alerts
    params: {}
- name: cloud_stored_app_settings
  endpoint:
    path: /communicate-with-ruuvi-cloud/cloud/cloud-stored-app-settings
    method: GET
    data_selector: settings
    params: {}
- name: app_settings
  endpoint:
    path: /communicate-with-ruuvi-cloud/cloud/cloud-stored-app-settings
    method: GET
    data_selector: settings
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: gateway
  endpoint:
    path: /api/gateway
    method: GET
    data_selector: data
    params: {}
- name: user
  endpoint:
    path: /api/user
    method: GET
    data_selector: data
    params: {}
notes:
- API is still in Beta phase and may have inconsistencies.
- The API is currently in Beta and may have limited functionality.
- This documentation is work in process and may still have errors and inconsistencies.
- Requires authentication for access to sensor data.
- Requires setup of OAuth2 for API access
- 'Lifecycle: In Production'
- Requires setup of connected app in Ruuvi Cloud
- API may have rate limits and other usage restrictions
- Uses OAuth2 with refresh token — requires setup of connected app in api
- Some objects like Contact may return nulls in deeply nested fields
- The factory firmware was updated on 2019-12 and no new tags with this firmware is
  produced anymore.
- NFC read may hang in rare cases and reboot is required.
- The 3.x firmwares are the bleeding edge versions, which means that they have new
  features but also they cannot be considered stable.
- 'The sensors periodically send their data through all channels they can: this is
  known as sensor heartbeat.'
- Ruuvi firmware version up until 2.x are built on top of Nordic SDK 12.3 / Softdevice
  s132 v3.1.1.
- The bootloader on these RuuviTags uses debug-mode which skips hardware and firmware
  version checks.
- Ruuvi firmware 3 builds on SDK15.3 and Softdevice s132 v6.1.1.
- There are special edition RuuviTags with nRF52811 that do not have bootloader at
  all due to size constraints.
- Ethernet cable must not be connected before the configuration is complete if you
  do not want to use default settings.
- Always power cycle the tag after using a wired programmer. Otherwise the debug interface
  might remain active and consume excess current.
- The Gateway is now ready to use and will send data to Ruuvi Cloud or a third-party
  server according to your configured settings.
- Ruuvi Gateway sets up a WiFi hotspot and a webserver that provides the user interface
  for configuration over HTTP.
- The user interface can be accessed in any major browser.
- OAuth2 authentication requires setup in Ruuvi Cloud.
- You can set up your own server for firmware updates.
- You can also install earlier or beta versions of the software.
- Requires setup of OAuth2 in Ruuvi Cloud
- Configuration downloads with basic HTTP authentication are also supported.
- It supports client authentication via SSL by enabling the upload of a client certificate
  and its associated private key.
- Requires OAuth2 for authentication.
- Requires OAuth2 setup for API access
- You can allow access without a password, but this is not recommended as it is not
  very secure.
- You can also allow access without a password, but this is not recommended as it
  is not very secure.
- If the default set of NTP servers is not accessible, then you can specify the addresses
  of other NTP servers or use DHCP to obtain a list of NTP servers automatically.
- If the Ruuvi Gateway does not have access to the Internet and NTP, you can disable
  time synchronisation, but in this case, relayed messages will not contain timestamps.
- By default, Ruuvi Gateway scans only for Ruuvi sensors (filtered by BLE SIG member
  ID 0x0499)
- Most existing devices only transmit on 1 Mbps PHY. 1 Mbps and Coded PHYs modulations
  are scanned sequentially, so scanning both PHYs will result in at least 50% packet
  loss on one of the PHYs.
- It is possible to filter out the relayed Bluetooth sensors. You can use whitelist
  mode if you only want to share data for specific sensors, or blacklist mode if you
  want to share data from all sensors except the specified list.
- 'If default settings are used, then you can log in using the following credentials:
  Password: Unique ID (in the format XX:XX:XX:XX:XX:XX:XX:XX) which is printed on
  the bottom of the Ruuvi Gateway.'
- Log in using Unique ID printed on the bottom of the Ruuvi Gateway.
- Authentication when accessing from LAN
- The nRF52811 on Ruuvi GW will run a self-test at boot to verify it is operational.
- The self-test will check that data can be received over Bluetooth and the communication
  with ESP32 is working.
- nRF52811 scans continuously with 7000 ms scan window and 7000 ms scan window.
- Each scan is done on one enabled channel at a time.
- Gateway can be configured via UART to enable/disable channels and PHYs.
- Gateway can be configured via UART to enable/disable channels and PHYs with ruuvi_endpoint_ca_uart
  commands.
- nRF52811 Could listen in to advertisements and repeat them for other devices.
- For example if there is a sensor broadcasting at Long Range PHY once per 6 seconds,
  Gateway could repeat the advertisement at faster interval at 1 MBit / s PHY for
  mobile phones etc devices which aren't explicitly designed to scan for BLE advertisements.
- 'CRC is CRC-16-CCITT-FALSE, Polynomial Formula: x16+x12+x5+1, Polynomial: 1021'
- 'Complete configuration request message: CA 00 19 17 9E 0A'
- 'Lifecycle: Beta'
- Last updated 2021-04-15
- ESP32 must activate the internal pull-up resistor and interrupts.
- If the press is less than 5 seconds, the press is considered to be a short press.
- If the press is longer than 5 seconds, all user settings on flash are erased.
- If Gateway is connected to the Internet via Ethernet cable, the default action is
  to connect to Ruuvi Network with default settings and turn the hotspot off.
- ESP32 can send data of Bluetooth beacons to MQTT broker.
- Ruuvi does not offer a dedicated broker at this time, but you can use test.mosquitto.org
  for a quick start.
- Relaying of accumulated time-stamped data from Bluetooth-sensors to HTTP/HTTPS server.
- Immediate relaying of Bluetooth data (with timestamps) to MQTT server.
- Immediate relaying of Bluetooth data (without timestamps) to MQTT server.
- Decoding of data format 5 (RAWv2) is currently supported
- Data format includes both time-stamped and non-time-stamped data from Bluetooth
  sensors.
- Access Settings from LAN requires specific configuration.
- Gateway will connect to the specified WiFi SSID if it's not empty.
- 'If ''mqtt_prefix'' is empty, then default prefix is used: ''ruuvi/<gateway_MAC_address>/'''
- Enable bearer authentication and set the bearer token on the 'Access Settings' page
- Enable bearer authentication and set the bearer token on the Access Settings page.
- Requires setup of connected app in api
- If your Gateway is password protected, you can configure the Gateway to allow you
  to update the configuration on it programmatically using bearer authentication.
- Please note that you can only access the Gateway using the cookie from the same
  PC as the browser used for authentication.
- Enable full access using bearer authentication and set the API-key
- The Gateway is remotely configurable using a bearer token.
- On the 'Access Settings' page, enable full access using bearer authentication and
  set the API-key.
- Configuration on the remote server must contain the field lan_auth_api_key_rw
- Use `mosquitto_sub` command to subscribe to messages from the Ruuvi Gateway.
- Configure Ruuvi Gateway to use Polling mode (configure a Bearer token for read-only
  access).
- Disable the use of retained messages to maintain a stable connection.
- Use client SSL certificate and upload the Client Certificate File (.crt) and the
  Client Private Key File (.key).
- Use custom SSL certificate for the server and upload the Server SSL Certificate.
- Sensitive configuration fields are encrypted during hotspot provisioning. Local
  HTTP is plaintext; place the device on a trusted LAN or use a reverse proxy/TLS
  terminator if HTTPS on LAN is required.
- Don't use the software update provided by Ruuvi but download binary files from URL
  address instead
- You need to prepare firmware binaries and put them on your HTTP server.
- Open Web-UI, go to 'Software Update' page, expand 'Advanced Settings', enable checkbox
  'Don't use the software update provided by Ruuvi but download binary files from
  URL address instead'.
- The data is broadcast and not acknowledged by the listeners, therefore there is
  no guarantee that any single data packet will be heard by a nearby phone or gateway.
- The delay between updates is random, a gateway may miss 10 advertisements in a row
  even in good conditions.
- 'Lifecycle: Deprecated'
- 'Related Ruuvi Devices: RuuviTag, Ruuvi Gateway'
- Data format 4 is obsolete
- Random id of tag is only present in format 4
- 'Lifecycle: Obsolete'
- 'Related Ruuvi Devices: RuuviTag, up to B3 hardware (superceded in 2018)'
- Some objects may return nulls in deeply nested fields
- Requires authentication via OAuth2
- Data is decoded from Manufacturer Specific Data field.
- The data is decoded from Manufacturer Specific Data field.
- Invalid values are represented by the largest presentable number for unsigned values,
  smallest presentable number for signed values, and all bits set for MAC.
- The format resembles original RAWv2, but acceleration is left out to leave 6 bytes
  for other information in primary advertisement.
- Data format is in beta.
- Manufacturer ID is `0x0499`.
- Requires OAuth2 setup in Ruuvi Cloud
- Uses OAuth2 with refresh token — requires setup of connected app in Ruuvi
- This data format uses Bluetooth 4 advertisement extension to be compatible with
  Bluetooth 4 devices.
- Floating point rounding differences may occur.
- This is a proposed encrypted data format which is not yet implemented in Ruuvi devices
  outside of a few proof-of-concept projects.
- The encryption uses nRF52-builtin AES128 encryption in Electronic Codebook (ECB)
  mode.
- This data format uses Bluetooth 5 advertisement extension to provide more data than
  Bluetooth 4 advertisements can.
- In development versions of firmware there is 120 second delay from starting of the
  connection
- In production versions this deadline is 12 seconds
- In development versions of firmware there is 120 second delay from starting of the
  connection in which the central must complete the registration process and register
  to NUS TX Notfications.
- In production versions this deadline is 12 seconds.
- In development versions of firmware there is a 120 second delay from starting of
  the connection.
- RuuviTags are nRF52-based devices.
- The Real-Time Transfer is Segger's technology for printing UART-like messages from
  the attached Cortex-M device.
- In development versions of firmware there is 120 second delay from starting of the
  connection for registration.
- Alerts can trigger at most once per hour per user and alert per sensor
- Business users can configure delay before triggering an alert
- Alerts can trigger at most once per hour for user and alert per sensor.
- 'Lifecycle: In production. Last updated 2021-04-13'
- Ruuvi Network supports serverless architecture.
errors:
- '400: Bad Request Missing authorization or email parameter'
- '403: Forbidden Returned if Authorization token does not match email'
- '429: Too Many Requests Over 10 calls in an hour'
- '401 Unauthorized: Invalid or expired access token'
- '400 Bad Request: Malformed data or missing arguments'
- '403 Forbidden: No valid authentication'
- '409 Conflict: Sensor already shared or cloud has fresher data'
- '500 Internal Server Error: Unknown error occurred'
- '400: Bad Request'
- '403: Forbidden'
- '429: Too Many Requests'
- '500: Internal Server Error'
- '400: Bad Request Missing parameter or user has full claim count'
- '401: Unauthorized User is not authenticated'
- '403: Forbidden macAddress and secret do not match'
- '409: Conflict Subscription code is already used'
- '404: Not Found Subscription code does not exist'
- '401 Unauthorized: Verify OAuth token and permissions.'
- '401 Unauthorized: Unauthorized request.'
- '400 Bad Request: If request doesn''t have required parameters.'
- '403 Forbidden: If there was no valid authentication.'
- '409 Conflict: Cloud has fresher data than timestamp.'
- '401 Unauthorized: Check your token or permissions'
- '404 Not Found: Verify the endpoint path'
- '500: Internal Server Error Internal problem. Try again later.'
- '401 Unauthorized: Check your access token.'
- '404 Not Found: Ensure the endpoint is correct.'
- '500 Internal Server Error: Try again later.'
- '401 Unauthorized: Check your API key or token'
- '404 Not Found: Endpoint does not exist'
- 'REQUEST_LIMIT_EXCEEDED: Throttle API calls or reduce frequency'
- '401 Unauthorized: Recheck OAuth scopes or token expiration'
- 'QUERY_TIMEOUT: Break down filters or add selectivity'
- '401 Unauthorized: Check your credentials or token expiration'
- '404 Not Found: The requested resource does not exist'
- '401 Unauthorized: Check OAuth credentials'
- '404 Not Found: Verify endpoint path'
- '401 Unauthorized: Check your credentials and permissions.'
- '401 Unauthorized: Check your API key and permissions'
- '404 Not Found: Ensure the endpoint path is correct'
- '500 Internal Server Error: Try again later or contact support'
- '0x05: Command to which the ACK responds may return an error'
- '0x0A: Command to which the ACK responds may return an error'
- '0x20: ACK Error'
- '0x0A: Invalid Command'
- '403 Forbidden: Ensure proper permissions are set.'
- '401 Unauthorized: Recheck bearer token or cookie'
- '401 Unauthorized: Invalid credentials or token expired'
- 'Invalid data format: Check data payload for correctness.'
- Invalid values can occur for various fields.
- NaN values may be encountered in invalid cases.
- 'Timeout: Central must complete the registration process within the specified deadline.'
- '400: Bad Request A parameter is missing or data is invalid'
- '403: Forbidden Missing or invalid internal secret'
- '401: If not authorized'
- '409: Conflict Subscription code already used'
- '429 Too Many Requests: Reduce request frequency'
- '404 Not Found: Check endpoint and parameters'
- '403 Forbidden: Check API key permissions'
- '404 Not Found: Ensure the endpoint is correct'
auth_info:
  mentioned_objects:
  - OauthToken
  - AuthProvider
  - NamedCredential
client:
  base_url: https://api.ruuvi.com
  auth:
    type: oauth2
    flow: refresh_token
    token_url: https://api.ruuvi.com/oauth/token
    client_id: '{{ dlt.secrets[''api_client_id''] }}'
    client_secret: '{{ dlt.secrets[''api_client_secret''] }}'
    refresh_token: '{{ dlt.secrets[''api_refresh_token''] }}'
    location: header
    header_name: Authorization
  headers:
    Accept: application/json
source_metadata: null
