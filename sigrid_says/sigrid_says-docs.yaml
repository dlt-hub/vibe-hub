resources:
- name: abap
  endpoint:
    path: /abap
    method: GET
    data_selector: records
- name: abapcds
  endpoint:
    path: /abapcds
    method: GET
    data_selector: records
- name: abapsmartforms
  endpoint:
    path: /abapsmartforms
    method: GET
    data_selector: records
- name: abl
  endpoint:
    path: /abl
    method: GET
    data_selector: records
- name: acl
  endpoint:
    path: /acl
    method: GET
    data_selector: records
- name: accell
  endpoint:
    path: /accell
    method: GET
    data_selector: records
- name: actionscript
  endpoint:
    path: /actionscript
    method: GET
    data_selector: records
- name: actionscript3
  endpoint:
    path: /actionscript3
    method: GET
    data_selector: records
- name: ada
  endpoint:
    path: /ada
    method: GET
    data_selector: records
- name: adabasnatural
  endpoint:
    path: /adabasnatural
    method: GET
    data_selector: records
- name: adfxml
  endpoint:
    path: /adfxml
    method: GET
    data_selector: records
- name: agilepoint
  endpoint:
    path: /agilepoint
    method: GET
    data_selector: records
- name: altovauml
  endpoint:
    path: /altovauml
    method: GET
    data_selector: records
- name: angularjstemplate
  endpoint:
    path: /angularjstemplate
    method: GET
    data_selector: records
- name: ansible
  endpoint:
    path: /ansible
    method: GET
    data_selector: records
- name: apachecamel
  endpoint:
    path: /apachecamel
    method: GET
    data_selector: records
- name: apex
  endpoint:
    path: /apex
    method: GET
    data_selector: records
- name: aps
  endpoint:
    path: /aps
    method: GET
    data_selector: records
- name: applicationmaster
  endpoint:
    path: /applicationmaster
    method: GET
    data_selector: records
- name: ash
  endpoint:
    path: /ash
    method: GET
    data_selector: records
- name: asp
  endpoint:
    path: /asp
    method: GET
    data_selector: records
- name: aspx
  endpoint:
    path: /aspx
    method: GET
    data_selector: records
- name: assembly
  endpoint:
    path: /assembly
    method: GET
    data_selector: records
- name: aura
  endpoint:
    path: /aura
    method: GET
    data_selector: records
- name: axway
  endpoint:
    path: /axway
    method: GET
    data_selector: records
- name: axystudio
  endpoint:
    path: /axystudio
    method: GET
    data_selector: records
- name: axyworkflow
  endpoint:
    path: /axyworkflow
    method: GET
    data_selector: records
- name: baan
  endpoint:
    path: /baan
    method: GET
    data_selector: records
- name: basic
  endpoint:
    path: /basic
    method: GET
    data_selector: records
- name: batch
  endpoint:
    path: /batch
    method: GET
    data_selector: records
- name: beanshell
  endpoint:
    path: /beanshell
    method: GET
    data_selector: records
- name: beinformed
  endpoint:
    path: /beinformed
    method: GET
    data_selector: records
- name: beinformedknowledgemodels
  endpoint:
    path: /beinformedknowledgemodels
    method: GET
    data_selector: records
- name: biztalk
  endpoint:
    path: /biztalk
    method: GET
    data_selector: records
- name: biztalkrules
  endpoint:
    path: /biztalkrules
    method: GET
    data_selector: records
- name: blazerules
  endpoint:
    path: /blazerules
    method: GET
    data_selector: records
- name: blueprism
  endpoint:
    path: /blueprism
    method: GET
    data_selector: records
- name: blueriq
  endpoint:
    path: /blueriq
    method: GET
    data_selector: records
- name: blueriqexpressions
  endpoint:
    path: /blueriqexpressions
    method: GET
    data_selector: records
- name: bpel
  endpoint:
    path: /bpel
    method: GET
    data_selector: records
- name: bpm
  endpoint:
    path: /bpm
    method: GET
    data_selector: records
- name: brail
  endpoint:
    path: /brail
    method: GET
    data_selector: records
- name: bsp
  endpoint:
    path: /bsp
    method: GET
    data_selector: records
- name: c
  endpoint:
    path: /c
    method: GET
    data_selector: records
- name: cache
  endpoint:
    path: /cache
    method: GET
    data_selector: records
- name: cacheobjectscript
  endpoint:
    path: /cacheobjectscript
    method: GET
    data_selector: records
- name: ccl
  endpoint:
    path: /ccl
    method: GET
    data_selector: records
- name: cgdc
  endpoint:
    path: /cgdc
    method: GET
    data_selector: records
- name: cgt
  endpoint:
    path: /cgt
    method: GET
    data_selector: records
- name: cicode
  endpoint:
    path: /cicode
    method: GET
    data_selector: records
- name: cl
  endpoint:
    path: /cl
    method: GET
    data_selector: records
- name: clearbasic
  endpoint:
    path: /clearbasic
    method: GET
    data_selector: records
- name: cobol
  endpoint:
    path: /cobol
    method: GET
    data_selector: records
- name: upload
  endpoint:
    path: /organization-integration/upload-instructions.html
    method: POST
- name: metadata
  endpoint:
    path: /integrations/sigrid-api-documentation.html#system-metadata
    method: POST
    data_selector: metadata
    params: {}
- name: auth-api
  endpoint:
    path: /rest/auth
    method: GET
    data_selector: records
- name: auth-api
  endpoint:
    path: /rest/auth/login/oauth2/code/sigridmfa
    method: GET
- name: import_job
  endpoint:
    path: /some/path/to/import/job
    method: POST
    data_selector: results
    params: {}
- name: gitlab-onprem
  endpoint:
    issuer-uri: https://gitlab.your-domain.com
    base-url: https://gitlab.your-domain.com
    type: gitlab
- name: import_jobs
  endpoint:
    path: /rest/inboundresults/imports/{partner}/{customer}/{system}
    method: GET
    data_selector: '[]'
- name: import_job_status
  endpoint:
    path: /rest/inboundresults/imports/{partner}/{customer}/{system}/{job}
    method: GET
    data_selector: '{}'
- name: import_job_logs
  endpoint:
    path: /rest/inboundresults/imports/{partner}/{customer}/{system}/{job}/logs
    method: GET
    data_selector: '{}'
- name: Open Source Health
  endpoint:
    path: /capabilities/system-open-source-health
    method: GET
    data_selector: results
- name: SigridCI
  endpoint:
    path: /sigridci
    method: POST
    data_selector: results
- name: on_demand_scan
  endpoint:
    path: /rest/inboundresults/qsm/{customer}/{system}
    method: POST
    data_selector: ''
    params: {}
- name: sigridci
  endpoint:
    path: /sigridci
    method: POST
    data_selector: output
- name: sigridpublish
  endpoint:
    path: /sigridpublish
    method: POST
    data_selector: output
- name: maintainability
  endpoint:
    path: /maintainability/{customer}
    method: GET
    data_selector: systems
- name: maintainability_system
  endpoint:
    path: /maintainability/{customer}/{system}
    method: GET
    data_selector: maintainability
- name: maintainability_with_technology
  endpoint:
    path: /maintainability/{customer}/{system}?technologyStats=true
    method: GET
    data_selector: maintainability
- name: maintainability_components
  endpoint:
    path: /maintainability/{customer}/{system}/components
    method: GET
    data_selector: components
- name: full_maintainability_data
  endpoint:
    path: /maintainability/{customer}/{system}/raw
    method: GET
    data_selector: maintainability_data
- name: refactoring_candidates
  endpoint:
    path: /refactoring-candidates/{customer}/{system}/{systemProperty}
    method: GET
    data_selector: refactoringCandidates
- name: security_findings
  endpoint:
    path: /security-findings/{customer}/{system}
    method: GET
    data_selector: findings
- name: reliability_findings
  endpoint:
    path: /reliability-findings/{customer}/{system}
    method: GET
    data_selector: findings
- name: security_ratings
  endpoint:
    path: /model-ratings/{customer}
    method: GET
    data_selector: ratings
- name: osh_findings
  endpoint:
    path: /rest/analysis-results/api/v1/osh-findings/{customer}
    method: GET
    data_selector: results
- name: architecture_quality
  endpoint:
    path: /rest/analysis-results/api/v1/architecture-quality/{customer}
    method: GET
    data_selector: ratings
- name: system_metadata
  endpoint:
    path: /rest/analysis-results/api/v1/system-metadata/{customer}/{system}
    method: GET
    data_selector: metadata
- name: deactivate_system
  endpoint:
    path: /rest/analysis-results/api/v1/systems/{customer}/{system}
    method: PATCH
    data_selector: deactivation
- name: portfolio_objectives
  endpoint:
    path: /analysis-results/api/v1/objectives/{customer}
    method: GET
    data_selector: objectives
- name: system_objectives
  endpoint:
    path: /analysis-results/api/v1/objectives/{customer}/{system}/config
    method: GET
    data_selector: ''
    params: {}
- name: create_edit_system_objectives
  endpoint:
    path: /analysis-results/api/v1/objectives/{customer}/{system}
    method: PUT
    data_selector: ''
    params: {}
- name: delete_system_objectives
  endpoint:
    path: /analysis-results/api/v1/objectives/{customer}/{system}/{type}
    method: DELETE
    data_selector: ''
    params: {}
- name: objectives_status
  endpoint:
    path: /analysis-results/api/v1/objectives-evaluation/{customer}
    method: GET
    data_selector: systems
- name: user_management
  endpoint:
    path: /user-management/{customer}/users
    method: GET
    data_selector: ''
- name: single_user_management
  endpoint:
    path: /user-management/{customer}/users/{userId}
    method: GET
    data_selector: ''
- name: update_user_permissions
  endpoint:
    path: /user-management/{customer}/users/{userID}/permissions
    method: PUT
    data_selector: ''
- name: create_user_group
  endpoint:
    path: /user-management/{customer}/groups
    method: POST
    data_selector: ''
- name: delete_user_group
  endpoint:
    path: /user-management/{customer}/groups/{groupID}
    method: DELETE
    data_selector: ''
- name: update_group_permissions
  endpoint:
    path: /user-management/{customer}/groups/{groupID}/permissions
    method: PUT
    data_selector: ''
- name: update_group_members
  endpoint:
    path: /user-management/{customer}/groups/{groupID}/members
    method: PUT
    data_selector: ''
- name: Maven
  endpoint:
    path: /capabilities/osh-upload-instructions.html#maven
    method: GET
- name: Gradle
  endpoint:
    path: /capabilities/osh-upload-instructions.html#gradle
    method: GET
- name: NPM
  endpoint:
    path: /capabilities/osh-upload-instructions.html#npm
    method: GET
- name: Yarn
  endpoint:
    path: /capabilities/osh-upload-instructions.html#yarn
    method: GET
- name: Poetry
  endpoint:
    path: /capabilities/osh-upload-instructions.html#poetry
    method: GET
- name: SBOM
  endpoint:
    path: /integrations/integration-sbom
    method: POST
    data_selector: sbom
    params: {}
- name: Fortify
  endpoint:
    path: /integrations/integration-security-fortify.html
    method: GET
- name: Checkmarx
  endpoint:
    path: /integrations/integration-security-checkmarx.html
    method: GET
- name: Fortify On Demand
  endpoint:
    path: /api/v3/scans/{currentStaticScanId}/summary
    method: GET
    data_selector: results
    params: {}
- name: objectives_report
  endpoint:
    path: /capabilities/reports/objectives-report.html
    method: GET
    data_selector: report_contents
- name: remove_subsystems
  endpoint:
    path: /integrations/sigrid-api-documentation.html#removing-subsystems
    method: GET
- name: architecture_quality
  endpoint:
    path: /capabilities/architecture-quality.html
    method: GET
- name: portfolio_objectives
  endpoint:
    path: /capabilities/portfolio-objectives.html
    method: GET
- name: user_management
  endpoint:
    path: /organization-integration/usermanagement.html
    method: GET
- name: open_source_health
  endpoint:
    path: /capabilities/osh-upload-instructions
    method: GET
notes:
- Uses OAuth2 with refresh token — requires setup of connected app in api
- Use either `c` or `cpp`, but not both.
- Prefer `cpp` if your system contains a combination of C and C++ code.
- Use one of `javascript`, `vuejs`, `sapui5`, but do not use multiple.
- Prefer `vuejs` if your system contains Vue.js components that use the `.vue` file
  extension.
- Only use `sapui5` if you are using SAP UI.
- Use `javascript` in all other cases.
- Use either `typescript` or `vuets`, but not both.
- Prefer `vuets` if you’re using Vue.js in combination with TypeScript code.
- Prefer `typescript` in all other cases.
- Use either `vb` or `vbnet`, but not both.
- Prefer `vbnet` for Visual Basic code running on the .NET platform, or when not sure.
- Use `vb` for classic Visual Basic, which has been end-of-life since 2008.
- In most cases, configuration files are not considered part of production code and
  are therefore not relevant for Sigrid’s maintainability analysis.
- Only add these technologies if you consider them part of the system’s production
  code.
- Unknown technology will be shown in Sigrid when the technology cannot be detected.
- Use either `html` or `angularjstemplate`, but not both.
- Prefer `angularjstemplate` if you’re using Angular templates.
- Use `html` for all other types of HTML files or templates.
- Technology support is currently in beta, and not yet generally available.
- Uses OAuth2 with refresh token — requires setup of connected app in Sigrid
- SSO improves the ease of use for your colleagues because there is no Sigrid password
  to remember.
- SSO improves security because users are created and deleted centrally in your organization.
- SSO integration with Sigrid is not allowed when your Identity Provider allows public,
  self-service sign-up.
- Tokens have a validity of one year.
- Tokens automatically expire after one year.
- Files uploaded to your account will be removed from your account after (at most)
  3 days and removed from our backup after (at most) 6 weeks.
- The size of one single upload is limited to 2 GB.
- Uses a YAML file called sigrid-metadata.yaml to manage metadata.
- Default behavior for Sigrid CI leads to a situation where every subsystem is published
  to Sigrid at the appropriate time.
- Open Source Health feature requires outbound internet access.
- For viewing source code within Sigrid, the identity provider used for Sigrid authentication
  and for the code storage needs to be the same.
- Sigrid requires a connection to an identity provider (IdP).
- TLS is mandatory for all hosts except localhost.
- Sigrid needs a (sub-)domain to run on, e.g. sigrid.example.com.
- UWTs are JSON web tokens and need to be signed with a keypair
- Access to an S3-compatible object store is mandatory
- Requires setup of environment variables for Sigrid CI
- Use Docker's --env-file option for environment variables
- This documentation covers on-premise Sigrid. It is not applicable for cloud-based
  Sigrid.
- Portfolio objectives allow codifying business objectives in Sigrid.
- Some objects may return nulls in deeply nested fields
- Your URL will be of the convention https://sigrid-says.com/*[clientname]*/-/open-source-health,
  whereas system details will follow https://sigrid-says.com/*[clientname]*/*systemname*/-/open-source-health.
- Uses OAuth2 — requires setup of connected app in Sigrid
- Sigrid provides different landing pages for different audiences.
- The Sigrid management dashboard focuses on answering three clear questions.
- Quality goals can be assessed in the Overview tab.
- The status of quality goals are shown in the System Objective Overview.
- Architecture Quality is available by default.
- Sigrid uses your anonymized repository history to calculate metrics on which code
  has been changed, and when those changes were made.
- If you use Sigrid CI, the developer names will be anonymized client-side.
- 'Teams working with Git will often use slightly different workflows: merge commits
  or squashing commits.'
- Sigrid CI generates a log file called git.log, and you can exclude this file from
  being uploaded.
- Sigrid creates new findings without code changes due to an evolving security knowledge
  base.
- Transitive dependency scanning is configurable but may introduce complexities.
- Open Source Health is based on proprietary technology analyzing multiple ecosystems.
- 'Sigrid scans for six different risk areas: Known vulnerabilities, Freshness, Activity,
  Stability, Management, Legal licenses.'
- 'Maintain a balanced IT management approach: Strive for a hybrid management approach
  where developers have autonomy, but management sets clear quality policies.'
- 'Allocate time for quality assurance: Reserve a portion of each sprint for addressing
  technical debt and improving code quality.'
- 'Leverage team feedback: Incorporate input from all team members to prioritize improvement
  actions effectively.'
- Requires setup of connected app in Sigrid
- Sigrid supports creating objectives for different categories of applications.
- Conduct periodic reviews of objectives to ensure ongoing alignment with organizational
  priorities.
- Adjust objectives and policies as necessary based on feedback and changes in the
  operating environment.
- The guidelines and steps that follow are intended to be helpful in making decisions
  and taking proper actions; since every application context is unique, these guidelines
  and steps should never replace logical thinking, taking your unique situation into
  account.
- Keep application source code separate from frameworks/libraries.
- Do not change the source code of used frameworks/libraries.
- Only a single version of each library or framework should be used directly.
- Regression tests and maintainability of the application code are key to updating
  frameworks/libraries.
- Library implementations should not be modified or customized.
- Sigrid CI reads your Sigrid account credentials from an environment variable called
  SIGRID_CI_TOKEN.
- Sigrid CI reads your Sigrid account credentials from an environment variable called
  SIGRID_CI_TOKEN
- Create a token that is allowed to post merge request comments
- Sigrid CI reads your Sigrid credential from one environment variable, called SIGRID_CI_TOKEN.
- This example downloads the Sigrid CI client scripts directly from GitHub. That might
  be acceptable for some projects, and is in fact increasingly common. However, some
  projects might not allow this as part of their security policy.
- This endpoint requires a Sigrid CI Authentication token that is valid for {customer}.
- Body should remain empty.
- You have created an authentication token using Sigrid
- You have created a Personal access (PAT) token using the Mendix user settings
- Environment variables SIGRID_CI_TOKEN and MENDIX_TOKEN are required.
- The docker image used is softwareimprovementgroup/mendixpreprocessor:latest.
- Commit and push the pipeline configuration file to the repository for Azure DevOps.
- You need to perform this step for every project where you wish to use Sigrid CI.
- The client scripts need to be available to the CI environment.
- 'All requests to Sigrid are rate-limited: at present 2500 per 5 minutes, per source
  IP address.'
- Requests that exceed the limit will return HTTP 429 response.
- Endpoints return data in CycloneDX format.
- Authentication for the Sigrid API uses the same authentication tokens that are used
  by Sigrid CI.
- All endpoints will return HTTP status 401 if the token is invalid, expired or revoked.
- All endpoints will return HTTP status 403 if the token belongs to a non-admin user.
- It is not necessary to submit the binaries for every library.
- If your system uses a dependency management tool, it is usually sufficient to send
  the corresponding configuration files.
- A security license is needed to access Sigrid’s security features.
- The preferred interchange format is SARIF.
- Imported findings will show up in the Security Findings page in Sigrid.
- Uses Fortify's VulnerabilityExporter tool to extract findings in SARIF format.
- Sigrid allows you to import your security findings into Sigrid so you can use Sigrid
  as single source of truth for all software quality needs.
- Modernizing business critical systems will be given higher priority.
- Sigrid will not propose a plan to your from scratch.
- Customer names can only contain lowercase letters and numbers.
- System names can only contain lowercase letters, numbers, and hyphens.
- Values provided are meant as guidance for software producers, and are not strictly
  applicable.
- Producers should strive to reduce risks measured by the SIG Open Source Health Quality
  Model properties.
- QSM connects to your project just like your developers do.
- By default QSM retrieves the mainline on a daily schedule.
- Sigrid does not share your code or any other data with external parties.
- Sigrid makes use of its own private LLM instance in accordance with SIG’s security
  and data sovereignty policies.
- Sigrid CI is limited to uploads of 500 MB.
- Some files and directories are already excluded by default, based on common conventions
  for common technologies.
- Sigrid CI requires Python 3.7 or higher.
- Uses comply-or-explain model for Sigrid CI checks.
errors:
- 'Unauthorized: Check client ID and secret.'
- 'Connection failed: Verify database access.'
- '401 Unauthorized: Recheck API token'
- '404 Not Found: Check the endpoint path and parameters'
- 'REQUEST_LIMIT_EXCEEDED: Throttle API calls or reduce frequency'
- 'QUERY_TIMEOUT: Break down filters or add selectivity'
- '401 Unauthorized: Recheck OAuth scopes or token expiration'
- 'HTTP 401: Invalid or unauthorized token.'
- 'HTTP 429: Rate limit exceeded.'
- '400 BAD REQUEST: Returned if the request body is not in the expected format.'
- 'HTTP 401: Unauthorized - Invalid, expired, or revoked token.'
- 'HTTP 403: Forbidden - Token belongs to a non-admin user.'
auth_info:
  mentioned_objects:
  - SAML
  - OpenID Connect
  - Identity Provider
  - OAuth2
  - client-id
  - client-secret
  - client-authentication-method
  - authorization-grant-type
  - scope
  - redirect-uri
  - provider
  - Sigrid authentication token
  - Mendix user settings
client:
  base_url: https://sigrid-says.com
  auth:
    type: oauth2
    location: header
    header_name: Authorization
source_metadata: null
