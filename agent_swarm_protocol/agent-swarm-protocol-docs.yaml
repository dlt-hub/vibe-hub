resources:
- name: agent_manifest
  endpoint:
    path: /agent/manifest
    method: POST
    data_selector: manifest
- name: agents
  endpoint:
    path: /marketplace
    method: GET
    data_selector: agents
- name: LLM Service
  endpoint:
    path: /llm
    method: POST
- name: Storage Service
  endpoint:
    path: /storage
    method: POST
- name: State Management Service
  endpoint:
    path: /state
    method: POST
- name: Logging Service
  endpoint:
    path: /logging
    method: POST
- name: Web Search Service
  endpoint:
    path: /web-search
    method: POST
- name: Web Browsing Service
  endpoint:
    path: /web-browser
    method: POST
- name: File Service
  endpoint:
    path: /file
    method: POST
- name: Database Service
  endpoint:
    path: /database
    method: POST
- name: API Gateway Service
  endpoint:
    path: /api-gateway
    method: POST
- name: Agent Discovery Service
  endpoint:
    path: /agent-discovery
    method: POST
- name: Child Agent Service
  endpoint:
    path: /agent
    method: POST
- name: Workflow Service
  endpoint:
    path: /workflow
    method: POST
- name: Tool Execution Service (MCP)
  endpoint:
    path: /mcp
    method: POST
- name: Vector Database Service
  endpoint:
    path: /vector-db
    method: POST
- name: Scheduling Service
  endpoint:
    path: /scheduler
    method: POST
- name: Notification Service
  endpoint:
    path: /notification
    method: POST
- name: agents
  endpoint:
    path: /agents
    method: GET
- name: register_agent
  endpoint:
    path: /agents/register
    method: POST
- name: get_agent_details
  endpoint:
    path: /agents/{agent_id}
    method: GET
- name: update_agent
  endpoint:
    path: /agents/{agent_id}
    method: PUT
- name: deregister_agent
  endpoint:
    path: /agents/{agent_id}
    method: DELETE
- name: create_task
  endpoint:
    path: /tasks
    method: POST
- name: get_task_status
  endpoint:
    path: /tasks/{task_id}
    method: GET
- name: cancel_task
  endpoint:
    path: /tasks/{task_id}
    method: DELETE
- name: health_check
  endpoint:
    path: /health
    method: GET
- name: metrics
  endpoint:
    path: /metrics
    method: GET
- name: orchestrator
  endpoint:
    path: /orchestrator
    method: GET
    data_selector: config
    params: {}
notes:
- Ensure the orchestrator is running and the WebSocket URL is correct
- The orchestrator has a default timeout for tasks; increase it if needed
- Create a configuration file for the orchestrator
- Create a simple script to start the orchestrator
- Create a .env file in your project root to store sensitive configuration
- The protocol itself is language-agnostic, and implementations can be created in
  any language that supports WebSockets.
- Ensure you have completed the installation of the ASP Orchestrator
- Set up your environment variables (especially API keys)
- Each agent should have a clear, focused purpose
- Ensure that repeated messages produce the same result
- Handle service failures gracefully
- Set reasonable timeouts for service requests
- Implement comprehensive logging for debugging
- Clean up resources when an agent disconnects
- Validate incoming messages before processing
- Use semantic versioning for your agents
- 'Simplicity: Removes the need for complex workflow configurations'
- 'Flexibility: Agents can dynamically decide when and with whom to collaborate'
- 'Autonomy: Agents can operate more independently and make their own collaboration
  decisions'
- 'Scalability: Enables more organic scaling of agent ecosystems with less central
  coordination'
- 'Fault Tolerance: Failure of a single agent doesn''t break a predefined workflow'
- Use consistent message types (e.g., 'entity.action')
- Consider including version information in messages
- Send only the data that is needed
- Include all necessary context in each message
- Design messages to be safely redelivered
- Ensure your agent has a complete manifest
- Follow semantic versioning principles
- 'Port: 3000'
- 'Host: 0.0.0.0'
- 'Auto-discovery: true'
- 'Registration timeout: 30s'
- 'Health check interval: 60s'
- 'API Keys: true'
- 'Rate limiting: enabled with maxRequests: 100 and window: 60s'
- 'CORS settings: enabled with allowedOrigins: ["https://example.com"]'
errors:
- '400 Bad Request: Check the request parameters'
- '404 Not Found: The requested agent does not exist'
- '401 Unauthorized: Invalid API key or token'
auth_info:
  mentioned_objects: []
client:
  base_url: ws://localhost:3000
source_metadata: null
