resources:
- name: kyc
  endpoint:
    path: /account/kyc
    method: POST
    data_selector: business
    params:
      account_id: '123456789'
- name: kyc_create
  endpoint:
    path: /account/kyc/create
    method: POST
    data_selector: business
    params:
      account_id: '123456789'
- name: kyc_authorize
  endpoint:
    path: /account/kyc/authorize
    method: POST
    data_selector: business
    params:
      account_id: '123456789'
- name: kyc_get_details
  endpoint:
    path: /account/kyc/get_details
    method: POST
    data_selector: business
    params:
      account_id: '123456789'
- name: account_owner
  endpoint:
    path: /api/api-calls/kyc/account_owner
    method: GET
    data_selector: account_owner
    params: {}
- name: individual
  endpoint:
    path: /api/api-calls/kyc/individual
    method: GET
    data_selector: individual
    params: {}
- name: business
  endpoint:
    path: /api/api-calls/kyc/business
    method: GET
    data_selector: business
    params: {}
- name: organization
  endpoint:
    path: /api/calls/kyc/organization
    method: GET
    data_selector: organization
    params: {}
- name: us_owner_compliance
  endpoint:
    path: /api/kyc/us_owner_compliance
    method: POST
    data_selector: us_owner_compliance
- name: additional_beneficial_owner
  endpoint:
    path: /api/kyc/additional_beneficial_owner
    method: POST
    data_selector: additional_beneficial_owner
- name: user
  endpoint:
    path: /v2/user
    method: GET
    data_selector: records
    params: {}
- name: create_account
  endpoint:
    path: /account/create
    method: POST
- name: create_checkout
  endpoint:
    path: /checkout/create
    method: POST
- name: checkout
  endpoint:
    path: /v2/checkout
    method: POST
    data_selector: response
    params:
      checkout_id: '7734724523235'
- name: preapproval
  endpoint:
    path: /preapproval/create
    method: POST
    data_selector: response
    params: {}
- name: checkout
  endpoint:
    path: /v2/checkout/create
    method: POST
- name: account
  endpoint:
    path: /v2/account/create
    method: POST
- name: oauth2_token
  endpoint:
    path: /v2/oauth2/token
    method: POST
- name: checkout_create
  endpoint:
    path: /v2/checkout/create
    method: POST
    data_selector: response
    params: {}
- name: checkout
  endpoint:
    path: /v2/checkout
    method: POST
    data_selector: response
    params: {}
- name: checkout
  endpoint:
    path: /checkout
    method: POST
- name: preapproval
  endpoint:
    path: /preapproval
    method: POST
- name: credit_card
  endpoint:
    path: /credit_card/create
    method: POST
- name: checkout
  endpoint:
    path: /checkout/create
    method: POST
- name: account_create
  endpoint:
    path: /v2/account/create
    method: POST
    data_selector: null
    params: {}
- name: oauth2_token
  endpoint:
    path: /v2/oauth2/token
    method: POST
    data_selector: null
    params: {}
- name: checkout
  endpoint:
    path: /v2/checkout
    method: POST
    data_selector: response
    params:
      checkout_id: '7734724523235'
- name: account
  endpoint:
    path: /v2/account/create
    method: POST
    data_selector: response
    params: {}
- name: checkout_create
  endpoint:
    path: /v2/checkout/create
    method: POST
    data_selector: response
    params: {}
- name: checkout
  endpoint:
    path: /v2/checkout
    method: POST
    data_selector: response
    params: {}
- name: credit_card_create
  endpoint:
    path: /credit_card/create
    method: POST
    data_selector: data
- name: checkout_create
  endpoint:
    path: /checkout/create
    method: POST
    data_selector: data
- name: account
  endpoint:
    path: /account/create
    method: POST
    data_selector: response
    params: {}
- name: oauth2_token
  endpoint:
    path: /oauth2/token
    method: POST
    data_selector: response
    params: {}
- name: account
  endpoint:
    path: /account/create
    method: POST
    data_selector: response
    params: {}
- name: checkout
  endpoint:
    path: /checkout/create
    method: POST
    data_selector: response
    params: {}
- name: user_register
  endpoint:
    path: /user/register
    method: POST
    data_selector: response
    params: {}
- name: account_create
  endpoint:
    path: /account/create
    method: POST
    data_selector: response
    params: {}
- name: user_send_confirmation
  endpoint:
    path: /user/send_confirmation
    method: POST
    data_selector: response
    params: {}
- name: user_register
  endpoint:
    path: /v2/user/register
    method: POST
    data_selector: response
    params: {}
- name: account_create
  endpoint:
    path: /v2/account/create
    method: POST
    data_selector: response
    params: {}
- name: user_send_confirmation
  endpoint:
    path: /v2/user/send_confirmation
    method: POST
    data_selector: response
    params: {}
- name: account_create
  endpoint:
    path: /account/create
    method: POST
    data_selector: response
- name: user_send_confirmation
  endpoint:
    path: /user/send_confirmation
    method: POST
    data_selector: response
- name: account_create
  endpoint:
    path: /account/create
    method: POST
    data_selector: response
    params: {}
- name: user_send_confirmation
  endpoint:
    path: /user/send_confirmation
    method: POST
    data_selector: response
    params: {}
- name: credit_card
  endpoint:
    path: /credit_card/create
    method: POST
- name: checkout
  endpoint:
    path: /checkout/create
    method: POST
- name: credit_card
  endpoint:
    path: /credit_card/create
    method: POST
- name: checkout
  endpoint:
    path: /checkout/create
    method: POST
- name: credit_card
  endpoint:
    path: /credit_card/create
    method: POST
    data_selector: data
    params: {}
- name: checkout
  endpoint:
    path: /checkout/create
    method: POST
    data_selector: data
    params: {}
- name: credit_card
  endpoint:
    path: /credit_card/create
    method: POST
    data_selector: data
    params: {}
- name: checkout
  endpoint:
    path: /checkout/create
    method: POST
    data_selector: data
    params: {}
- name: checkout
  endpoint:
    path: /checkout/create
    method: POST
- name: checkout
  endpoint:
    path: /v2/checkout/create
    method: POST
    data_selector: response
    params: {}
- name: checkout
  endpoint:
    path: /checkout/create
    method: POST
- name: checkout
  endpoint:
    path: /v2/checkout/create
    method: POST
    data_selector: response
    params: {}
- name: checkout_refund
  endpoint:
    path: /v2/checkout/refund
    method: POST
    data_selector: response
    params: {}
- name: checkout_refund
  endpoint:
    path: /v2/checkout/refund
    method: POST
    data_selector: response
    params: {}
- name: checkout_refund
  endpoint:
    path: /v2/checkout/refund
    method: POST
    data_selector: response
    params: {}
- name: checkout_refund
  endpoint:
    path: /v2/checkout/refund
    method: POST
    data_selector: response
    params:
      checkout_id: checkout_id
      refund_reason: refund_reason
      amount: amount
- name: get_update_uri
  endpoint:
    path: /account/get_update_uri
    method: POST
    data_selector: response
    params:
      account_id: '123456789'
      mode: iframe
      redirect_uri: http://example.com/withdraw/success/
- name: get_update_uri
  endpoint:
    path: /account/get_update_uri
    method: POST
    data_selector: response
    params:
      account_id: '123456789'
      mode: iframe
      redirect_uri: http://example.com/withdraw/success/
- name: merchant_onboarding
  endpoint:
    path: /oauth2/authorize
    method: GET
    params:
      scope: manage_accounts,collect_payments,view_user,preapprove_payments,send_money
- name: user_registration
  endpoint:
    path: /user/register
    method: POST
    params:
      scope: manage_accounts,collect_payments,view_user,preapprove_payments,send_money
- name: checkout_create
  endpoint:
    path: /checkout/create
    method: POST
    params:
      fee_payer: payee_from_app
- name: account_create
  endpoint:
    path: /account/create
    method: POST
- name: account_find
  endpoint:
    path: /account/find
    method: GET
- name: account_create
  endpoint:
    path: /account/create
    method: POST
- name: account_find
  endpoint:
    path: /account/find
    method: GET
- name: user_register
  endpoint:
    path: /user/register
    method: POST
    params:
      user_country: CA
      tos_acceptance_time: 1209600
- name: account_create
  endpoint:
    path: /account/create
    method: POST
    params:
      country: CA
      currencies:
      - CAD
      country_options:
        debit_opt_in: true
- name: checkout_create
  endpoint:
    path: /checkout/create
    method: POST
    params:
      currency: CAD
      auto_capture: false
- name: modify_app
  endpoint:
    path: /v2/app/modify
    method: POST
    data_selector: response
    params: {}
- name: create_account
  endpoint:
    path: /account/create
    method: POST
    data_selector: response
    params: {}
- name: modify_account
  endpoint:
    path: /account/modify
    method: POST
    data_selector: response
    params: {}
- name: user_register
  endpoint:
    path: /user/register
    method: POST
    data_selector: user
    params:
      user_country: CA
      tos_acceptance_time: 1209600
- name: account_create
  endpoint:
    path: /account/create
    method: POST
    data_selector: account
    params:
      country: CA
      currencies:
      - CAD
      country_options:
        debit_opt_in: true
- name: checkout_create
  endpoint:
    path: /checkout/create
    method: POST
    data_selector: checkout
    params:
      currency: CAD
      auto_capture: false
- name: app_modify
  endpoint:
    path: /app/modify
    method: POST
- name: account_modify
  endpoint:
    path: /account/modify
    method: POST
    data_selector: response
    params:
      account_id: '123456789'
      theme_object:
        name: My Sample Theme
        primary_color: FFFFFF
        secondary_color: '000000'
        background_color: 004C64
        button_color: 0084A0
- name: app_modify
  endpoint:
    path: /app/modify
    method: POST
    data_selector: response
    params:
      gaq_domains:
      - UA-23421-01
      - UA-23421-02
- name: account_create
  endpoint:
    path: /account/create
    method: POST
    data_selector: response
    params:
      gaq_domains:
      - UA-23421-01
      - UA-23513-02
- name: account_modify
  endpoint:
    path: /account/modify
    method: POST
    data_selector: response
    params:
      gaq_domains:
      - UA-23421-01
      - UA-23421-02
- name: preapproval_create
  endpoint:
    path: /preapproval/create
    method: POST
    data_selector: response
    params: {}
- name: checkout_create
  endpoint:
    path: /checkout/create
    method: POST
    data_selector: response
    params: {}
- name: app_modify
  endpoint:
    path: /app/modify
    method: POST
    data_selector: response
- name: account_modify
  endpoint:
    path: /account/modify
    method: POST
    data_selector: response
    params: {}
- name: bank_account
  endpoint:
    path: /checkout/create
    method: POST
    data_selector: data
    params:
      client_id: '12345'
      email: test@example.com
- name: preapproval_create
  endpoint:
    path: /v2/preapproval/create
    method: POST
    data_selector: response
    params: {}
- name: checkout_create
  endpoint:
    path: /checkout/create
    method: POST
    data_selector: response
    params: {}
- name: payment_bank_tokenization
  endpoint:
    path: /bank_account/create
    method: POST
    data_selector: data
    params:
      client_id: '12345'
      email: test@example.com
- name: checkout_create
  endpoint:
    path: /v2/checkout/create
    method: POST
    data_selector: response
    params:
      auto_release: 'FALSE'
- name: checkout_release
  endpoint:
    path: /v2/checkout/release
    method: POST
    data_selector: response
    params: {}
- name: checkout_create
  endpoint:
    path: /checkout/create
    method: POST
    data_selector: null
    params:
      auto_release: 'FALSE'
- name: checkout_release
  endpoint:
    path: /checkout/release
    method: POST
    data_selector: null
    params: {}
- name: user_register
  endpoint:
    path: /user/register
    method: POST
- name: credit_card_create
  endpoint:
    path: /credit_card/create
    method: POST
- name: account_get_update_uri
  endpoint:
    path: /account/get_update_uri
    method: GET
- name: checkout_create
  endpoint:
    path: /checkout/create
    method: POST
- name: checkout_release
  endpoint:
    path: /checkout/release
    method: POST
- name: checkout_create
  endpoint:
    path: /v2/checkout/create
    method: POST
    data_selector: response
    params:
      account_id: '123456789'
      amount: '25.50'
      currency: USD
      short_description: A brand new soccer ball
      type: goods
      payment_method:
        type: credit_card
        credit_card:
          id: '123456789'
- name: checkout_create
  endpoint:
    path: /checkout/create
    method: POST
    params:
      auto_release: 'false'
- name: checkout_release
  endpoint:
    path: /checkout/release
    method: POST
- name: checkout_create
  endpoint:
    path: /checkout/create
    method: POST
    data_selector: response
    params:
      account_id: '123456789'
      amount: '25.50'
      currency: USD
      short_description: A brand new soccer ball
      type: goods
      payment_method:
        type: credit_card
        credit_card:
          id: '123456789'
- name: checkout_create
  endpoint:
    path: /checkout/create
    method: POST
    data_selector: null
    params:
      account_id: '123456789'
      amount: '24.95'
      currency: USD
      short_description: A brand new soccer ball
      type: goods
      payment_method[type]: credit_card
      payment_method[credit_card][id]: '12345'
      auto_release: false
- name: checkout_release
  endpoint:
    path: /checkout/release
    method: POST
    data_selector: null
    params:
      checkout_id: '123456789'
- name: checkout
  endpoint:
    path: /checkout/create
    method: POST
- name: checkout_create
  endpoint:
    path: /checkout/create
    method: POST
    data_selector: response
- name: user_register
  endpoint:
    path: /user/register
    method: POST
- name: credit_card_create
  endpoint:
    path: /credit_card/create
    method: POST
- name: account_update_uri
  endpoint:
    path: /account/get_update_uri
    method: GET
- name: checkout_create
  endpoint:
    path: /v2/checkout/create
    method: POST
    data_selector: response
    params: {}
- name: payment_request
  endpoint:
    path: /processPayment
    method: POST
    data_selector: response
- name: checkout_create
  endpoint:
    path: /v2/checkout/create
    method: POST
    data_selector: response
    params:
      account_id: '123456789'
      amount: '25.50'
      currency: USD
      short_description: A brand new soccer ball
      type: goods
      payment_method:
        type: credit_card
        credit_card:
          id: credit_card_id
- name: canMakeApplePayPayments
  endpoint:
    path: /wallet/canMakeApplePayPayments
    method: GET
- name: beginTokenization
  endpoint:
    path: /wallet/beginTokenization
    method: POST
- name: completePayment
  endpoint:
    path: /wallet/completePayment
    method: POST
- name: abort
  endpoint:
    path: /wallet/abort
    method: POST
- name: checkout
  endpoint:
    path: /checkout/create
    method: POST
- name: payment_request
  endpoint:
    path: /processPayment
    method: POST
    data_selector: response
    params: {}
- name: checkout_create
  endpoint:
    path: /checkout/create
    method: POST
    data_selector: response
    params: {}
- name: apple_pay_availability_test
  endpoint:
    path: /wallet/canMakeApplePayPayments
    method: GET
    data_selector: canMakePayments
- name: begin_apple_pay_transaction
  endpoint:
    path: /wallet/beginTokenization
    method: POST
    data_selector: PaymentResponse
- name: payment_request
  endpoint:
    path: /processPayment
    method: POST
    data_selector: response
    params: {}
- name: checkout
  endpoint:
    path: /checkout/create
    method: POST
    data_selector: response
    params: {}
- name: account
  endpoint:
    path: /account/create
    method: POST
    data_selector: response
    params: {}
- name: user
  endpoint:
    path: /user
    method: GET
    data_selector: response
    params: {}
- name: checkout_create
  endpoint:
    path: /checkout/create
    method: POST
- name: account_request_review
  endpoint:
    path: /account/request_review
    method: POST
- name: account
  endpoint:
    path: /account
    method: GET
- name: credit_card_create
  endpoint:
    path: /credit_card/create
    method: POST
- name: credit_card_enable_recurring
  endpoint:
    path: /credit_card/enable_recurring
    method: POST
- name: credit_card_transfer
  endpoint:
    path: /credit_card/transfer
    method: POST
- name: user
  endpoint:
    path: /v2/user
    method: GET
    data_selector: ''
- name: account
  endpoint:
    path: /v2/account
    method: POST
- name: get_reserve_details
  endpoint:
    path: /v2/account/get_reserve_details
    method: POST
- name: account_create
  endpoint:
    path: /account/create
    method: POST
- name: checkout_create
  endpoint:
    path: /checkout/create
    method: POST
- name: settlement_method
  endpoint:
    path: /api/api-calls/settlement
    method: POST
    data_selector: data
    params:
      account_id: account_id
      settlement_method: settlement_method
      frequency: frequency
- name: debit_opt_in
  endpoint:
    path: /api/api-calls/debit_opt_in
    method: GET
    data_selector: debit_opt_in
    params: {}
- name: create
  endpoint:
    path: /account/membership/create
    method: POST
    data_selector: account_id, user_id
    params: {}
- name: modify
  endpoint:
    path: /account/membership/modify
    method: POST
    data_selector: account_id, user_id
    params: {}
- name: remove
  endpoint:
    path: /account/membership/remove
    method: POST
    data_selector: account_id, user_id
    params: {}
- name: checkout
  endpoint:
    path: /checkout
    method: POST
    data_selector: null
    params: {}
- name: checkout_find
  endpoint:
    path: /checkout/find
    method: POST
    data_selector: null
    params: {}
- name: checkout_create
  endpoint:
    path: /checkout/create
    method: POST
    data_selector: null
    params: {}
- name: user
  endpoint:
    path: /v2/user
    method: GET
- name: checkout
  endpoint:
    path: /checkout
    method: POST
    data_selector: checkout_id
    params: {}
- name: checkout_cancel
  endpoint:
    path: /checkout/cancel
    method: POST
    data_selector: checkout_id
    params: {}
- name: checkout_refund
  endpoint:
    path: /checkout/refund
    method: POST
    data_selector: checkout_id
    params: {}
- name: account
  endpoint:
    path: /account
    method: POST
    data_selector: debit_opt_in
    params:
      account_id: 'Yes'
- name: get_reserve_details
  endpoint:
    path: /account/get_reserve_details
    method: POST
    data_selector: debit_opt_in
    params:
      account_id: 'Yes'
- name: settlement_method
  endpoint:
    path: /account
    method: POST
    data_selector: debit_opt_in
    params:
      account_id: account_id
      settlement_method: settlement_method
      frequency: frequency
- name: checkout
  endpoint:
    path: /checkout
    method: POST
    data_selector: checkout
    params: {}
- name: checkout_capture
  endpoint:
    path: /checkout/capture
    method: POST
    data_selector: checkout
    params: {}
- name: checkout_modify
  endpoint:
    path: /checkout/modify
    method: POST
    data_selector: checkout
    params: {}
- name: checkout
  endpoint:
    path: /checkout
    method: POST
    data_selector: checkout
    params: {}
- name: checkout_release
  endpoint:
    path: /checkout/release
    method: POST
    data_selector: checkout
    params:
      checkout_id: checkout_id
- name: account_membership_create
  endpoint:
    path: /v2/account/membership
    method: POST
    data_selector: account_id
    params: {}
- name: account_membership_modify
  endpoint:
    path: /v2/account/membership
    method: POST
    data_selector: account_id
    params: {}
- name: account_membership_remove
  endpoint:
    path: /v2/account/membership
    method: POST
    data_selector: account_id
    params: {}
- name: checkout
  endpoint:
    path: /v2/checkout
    method: POST
- name: checkout_find
  endpoint:
    path: /v2/checkout/find
    method: POST
- name: checkout_create
  endpoint:
    path: /v2/checkout/create
    method: POST
- name: credit_card
  endpoint:
    path: /credit_card
    method: POST
    data_selector: credit_card_id
- name: create_credit_card
  endpoint:
    path: /credit_card/create
    method: POST
    data_selector: credit_card_id
- name: authorize_credit_card
  endpoint:
    path: /credit_card/authorize
    method: POST
    data_selector: credit_card_id
- name: find_credit_card
  endpoint:
    path: /credit_card/find
    method: POST
    data_selector: credit_card_id
- name: modify_credit_card
  endpoint:
    path: /credit_card/modify
    method: POST
    data_selector: credit_card_id
- name: transfer_credit_card
  endpoint:
    path: /credit_card/transfer
    method: POST
    data_selector: credit_card_id
- name: delete_credit_card
  endpoint:
    path: /credit_card/delete
    method: POST
    data_selector: credit_card_id
- name: enable_recurring_credit_card
  endpoint:
    path: /credit_card/enable_recurring
    method: POST
    data_selector: credit_card_id
- name: checkout
  endpoint:
    path: /checkout
    method: POST
    data_selector: checkout_id
    params:
      checkout_id: checkout_id
- name: checkout_cancel
  endpoint:
    path: /checkout/cancel
    method: POST
    data_selector: checkout_id
    params:
      checkout_id: checkout_id
- name: checkout_refund
  endpoint:
    path: /checkout/refund
    method: POST
    data_selector: checkout_id
    params:
      checkout_id: checkout_id
- name: checkout
  endpoint:
    path: /checkout
    method: GET
    data_selector: response
- name: checkout_capture
  endpoint:
    path: /checkout/capture
    method: POST
    data_selector: response
- name: checkout_modify
  endpoint:
    path: /checkout/modify
    method: POST
    data_selector: response
- name: checkout
  endpoint:
    path: /checkout
    method: POST
    data_selector: checkout
    params: {}
- name: checkout_release
  endpoint:
    path: /checkout/release
    method: POST
    data_selector: checkout
    params: {}
- name: payment_bank
  endpoint:
    path: /payment_bank
    method: POST
    data_selector: response
    params: {}
- name: payment_bank_persist
  endpoint:
    path: /payment_bank/persist
    method: POST
    data_selector: response
    params: {}
- name: payment_bank_verify
  endpoint:
    path: /payment_bank/verify
    method: POST
    data_selector: response
    params: {}
- name: preapproval
  endpoint:
    path: /preapproval
    method: POST
    data_selector: ''
    params: {}
- name: preapproval_find
  endpoint:
    path: /preapproval/find
    method: POST
    data_selector: ''
    params: {}
- name: preapproval_create
  endpoint:
    path: /preapproval/create
    method: POST
    data_selector: ''
    params: {}
- name: preapproval_cancel
  endpoint:
    path: /preapproval/cancel
    method: POST
    data_selector: ''
    params: {}
- name: preapproval_modify
  endpoint:
    path: /preapproval/modify
    method: POST
    data_selector: ''
    params: {}
- name: preapproval
  endpoint:
    path: /preapproval
    method: POST
    data_selector: preapproval
    params: {}
- name: preapproval_cancel
  endpoint:
    path: /preapproval/cancel
    method: POST
    data_selector: preapproval
    params: {}
- name: preapproval_modify
  endpoint:
    path: /preapproval/modify
    method: POST
    data_selector: preapproval
    params: {}
- name: credit_card
  endpoint:
    path: /credit_card
    method: POST
    data_selector: credit_card_id
    params: {}
- name: create_credit_card
  endpoint:
    path: /credit_card/create
    method: POST
    data_selector: credit_card_id
    params: {}
- name: authorize_credit_card
  endpoint:
    path: /credit_card/authorize
    method: POST
    data_selector: credit_card_id
    params: {}
- name: find_credit_card
  endpoint:
    path: /credit_card/find
    method: POST
    data_selector: credit_card_id
    params: {}
- name: modify_credit_card
  endpoint:
    path: /credit_card/modify
    method: POST
    data_selector: credit_card_id
    params: {}
- name: transfer_credit_card
  endpoint:
    path: /credit_card/transfer
    method: POST
    data_selector: credit_card_id
    params: {}
- name: delete_credit_card
  endpoint:
    path: /credit_card/delete
    method: POST
    data_selector: credit_card_id
    params: {}
- name: enable_recurring
  endpoint:
    path: /credit_card/enable_recurring
    method: POST
    data_selector: credit_card_id
    params: {}
- name: rbit
  endpoint:
    path: /rbit
    method: POST
- name: rbit_find
  endpoint:
    path: /rbit/find
    method: POST
- name: rbit_create
  endpoint:
    path: /rbit/create
    method: POST
- name: rbit_delete
  endpoint:
    path: /rbit/delete
    method: POST
- name: report
  endpoint:
    path: /report
    method: GET
- name: report_create
  endpoint:
    path: /report/create
    method: POST
- name: payment_bank
  endpoint:
    path: /payment_bank
    method: POST
    data_selector: payment_bank
    params:
      client_id: client_id
      client_secret: client_secret
      payment_bank_id: payment_bank_id
      type: microdeposits
      microdeposits: microdeposits
- name: payment_bank_persist
  endpoint:
    path: /payment_bank/persist
    method: POST
    data_selector: payment_bank
    params:
      client_id: client_id
      client_secret: client_secret
      payment_bank_id: payment_bank_id
      type: microdeposits
      microdeposits: microdeposits
- name: payment_bank_verify
  endpoint:
    path: /payment_bank/verify
    method: POST
    data_selector: payment_bank
    params:
      client_id: client_id
      client_secret: client_secret
      payment_bank_id: payment_bank_id
      type: microdeposits
      microdeposits: microdeposits
- name: settlement_bank_create
  endpoint:
    path: /v2/settlement_bank
    method: POST
    data_selector: settlement_bank_id
    params: {}
- name: settlement_bank_authorize
  endpoint:
    path: /v2/settlement_bank/authorize
    method: POST
    data_selector: settlement_bank_id
    params: {}
- name: preapproval
  endpoint:
    path: /v2/preapproval
    method: POST
    data_selector: preapproval_id
- name: preapproval_find
  endpoint:
    path: /v2/preapproval/find
    method: POST
    data_selector: preapproval_id
- name: preapproval_create
  endpoint:
    path: /v2/preapproval/create
    method: POST
    data_selector: preapproval_id
- name: user
  endpoint:
    path: /user
    method: POST
    data_selector: user_id
    params: {}
- name: user_modify
  endpoint:
    path: /user/modify
    method: POST
    data_selector: user_id
    params: {}
- name: user_register
  endpoint:
    path: /user/register
    method: POST
    data_selector: user_id
    params: {}
- name: user_send_confirmation
  endpoint:
    path: /user/send_confirmation
    method: POST
    data_selector: user_id
    params: {}
- name: preapproval
  endpoint:
    path: /preapproval
    method: POST
    data_selector: records
- name: preapproval_cancel
  endpoint:
    path: /preapproval/cancel
    method: POST
    data_selector: records
- name: preapproval_modify
  endpoint:
    path: /preapproval/modify
    method: POST
    data_selector: records
- name: withdrawal
  endpoint:
    path: /v2/withdrawal
    method: POST
    data_selector: withdrawal_id
    params: {}
- name: withdrawal_find
  endpoint:
    path: /v2/withdrawal/find
    method: POST
    data_selector: withdrawal_id
    params: {}
- name: withdrawal_modify
  endpoint:
    path: /v2/withdrawal/modify
    method: POST
    data_selector: withdrawal_id
    params: {}
- name: batch_create
  endpoint:
    path: /batch/create
    method: POST
- name: rbit
  endpoint:
    path: /rbit
    method: POST
- name: rbit_find
  endpoint:
    path: /rbit/find
    method: POST
- name: rbit_create
  endpoint:
    path: /rbit/create
    method: POST
- name: rbit_delete
  endpoint:
    path: /rbit/delete
    method: POST
- name: notification_preference
  endpoint:
    path: /notification_preference
    method: POST
    data_selector: notification_preference_id
- name: notification
  endpoint:
    path: /notification
    method: GET
    data_selector: notification_id
- name: report
  endpoint:
    path: /report
    method: GET
    data_selector: report
    params: {}
- name: report_create
  endpoint:
    path: /report/create
    method: POST
    data_selector: report
    params: {}
- name: notification_preference
  endpoint:
    path: /notification_preference/create
    method: POST
    data_selector: notification_id
    params:
      type: ipn
      topic: payment_bank.*
      callback_uri: https://example.com/callback
- name: settlement_bank_create
  endpoint:
    path: /v2/settlement_bank
    method: POST
    data_selector: settlement_bank_id
- name: settlement_bank_authorize
  endpoint:
    path: /v2/settlement_bank/authorize
    method: POST
    data_selector: settlement_bank_id
- name: notification_preference
  endpoint:
    path: /notification_preference/delete
    method: POST
    data_selector: notification_preference_id
    params: {}
- name: notification_preference
  endpoint:
    path: /notification_preference/find
    method: GET
    data_selector: records
    params: {}
- name: user
  endpoint:
    path: /v2/user
    method: POST
    data_selector: user
    params: {}
- name: user_modify
  endpoint:
    path: /v2/user/modify
    method: POST
    data_selector: user
    params: {}
- name: user_register
  endpoint:
    path: /v2/user/register
    method: POST
    data_selector: user
    params: {}
- name: user_send_confirmation
  endpoint:
    path: /v2/user/send_confirmation
    method: POST
    data_selector: user
    params: {}
- name: notification_preference_modify
  endpoint:
    path: /notification_preference/modify
    method: POST
    data_selector: notification_id
    params:
      notification_preference_id: string
      callback_uri: string
      state: active
- name: notification_preference_delete
  endpoint:
    path: /notification_preference/delete
    method: DELETE
    data_selector: notification_id
    params:
      notification_preference_id: string
- name: notification
  endpoint:
    path: /notification
    method: GET
    data_selector: payload
    params:
      notification_id: string
- name: withdrawal
  endpoint:
    path: /v2/withdrawal
    method: POST
    data_selector: withdrawal
    params: {}
- name: withdrawal_find
  endpoint:
    path: /v2/withdrawal/find
    method: POST
    data_selector: withdrawal
    params: {}
- name: withdrawal_modify
  endpoint:
    path: /v2/withdrawal/modify
    method: POST
    data_selector: withdrawal
    params: {}
- name: batch_create
  endpoint:
    path: /batch/create
    method: POST
    data_selector: calls
- name: payment_bank
  endpoint:
    path: /notification/payment_bank
    method: GET
    data_selector: notifications
    params: {}
- name: adjustment
  endpoint:
    path: /notification/adjustment
    method: GET
    data_selector: notifications
    params: {}
- name: payment
  endpoint:
    path: /notification/payment
    method: GET
    data_selector: notifications
    params: {}
- name: withdrawal
  endpoint:
    path: /notification/withdrawal
    method: GET
    data_selector: notifications
    params: {}
- name: account
  endpoint:
    path: /notification/account
    method: GET
    data_selector: notifications
    params: {}
- name: settlement_path
  endpoint:
    path: /notification/settlement_path
    method: GET
    data_selector: notifications
    params: {}
- name: dispute
  endpoint:
    path: /notification/dispute
    method: GET
    data_selector: notifications
    params: {}
- name: notification_preference
  endpoint:
    path: /v2/notification_preference
    method: POST
    data_selector: notification_preference_id
    params: {}
- name: notification
  endpoint:
    path: /v2/notification
    method: GET
    data_selector: notification_id
    params: {}
- name: create_notification_preference
  endpoint:
    path: /notification_preference/create
    method: POST
    data_selector: notification_id
    params:
      type: ipn
      topic: payment_bank.*
      callback_uri: https://example.com/callback
- name: modify_notification_preference
  endpoint:
    path: /notification_preference/modify
    method: POST
    data_selector: notification_id
    params: {}
- name: delete_notification_preference
  endpoint:
    path: /notification_preference/delete
    method: DELETE
    data_selector: notification_id
    params: {}
- name: notification_preference
  endpoint:
    path: /notification_preference/delete
    method: DELETE
    data_selector: notification_id
    params:
      notification_preference_id: String
- name: account_currency_status
  endpoint:
    path: /api/account_currency_status
    method: GET
    data_selector: records
- name: address
  endpoint:
    path: /api/address
    method: GET
    data_selector: records
- name: admin_context
  endpoint:
    path: /api/admin_context
    method: GET
    data_selector: records
- name: balances
  endpoint:
    path: /api/balances
    method: GET
    data_selector: records
- name: bank_data
  endpoint:
    path: /api/bank_data
    method: GET
    data_selector: records
- name: browser
  endpoint:
    path: /api/browser
    method: GET
    data_selector: records
- name: capture_amounts
  endpoint:
    path: /api/capture_amounts
    method: GET
    data_selector: records
- name: card_reader
  endpoint:
    path: /api/card_reader
    method: GET
    data_selector: records
- name: chargeback_response
  endpoint:
    path: /api/chargeback_response
    method: GET
    data_selector: records
- name: check_data_response
  endpoint:
    path: /api/check_data_response
    method: GET
    data_selector: records
- name: credit_card_additional_data
  endpoint:
    path: /api/credit_card_additional_data
    method: GET
    data_selector: records
- name: credit_card
  endpoint:
    path: /api/credit_card
    method: GET
    data_selector: records
- name: notification_preference
  endpoint:
    path: /notification_preference/find
    method: GET
    data_selector: notifications
    params: {}
- name: payment_method
  endpoint:
    path: /api/payment_method
    method: POST
    data_selector: payment_method
- name: payment_bank
  endpoint:
    path: /api/payment_bank
    method: POST
    data_selector: payment_bank
- name: payment_error
  endpoint:
    path: /api/payment_error
    method: POST
    data_selector: payment_error
- name: notification_preference_modify
  endpoint:
    path: /notification_preference/modify
    method: POST
    data_selector: notification_id
- name: notification_preference_delete
  endpoint:
    path: /notification_preference/delete
    method: DELETE
    data_selector: notification_id
- name: withdrawal
  endpoint:
    path: /api/withdrawal
    method: GET
    data_selector: withdrawals
- name: notification
  endpoint:
    path: /notification
    method: GET
    data_selector: payload
    params:
      notification_id: string
- name: events
  endpoint:
    path: /notification
    method: GET
    data_selector: payload
- name: merchant_category_codes
  endpoint:
    path: /api/reference/mcc
    method: GET
    data_selector: codes
    params: {}
- name: donations_and_personal_services
  endpoint:
    path: /donations_and_personal_services
    method: GET
    data_selector: records
- name: service_providers
  endpoint:
    path: /service_providers
    method: GET
    data_selector: records
- name: professional_services
  endpoint:
    path: /professional_services
    method: GET
    data_selector: records
- name: groups_organizations
  endpoint:
    path: /groups_organizations
    method: GET
    data_selector: records
- name: events_entertainment
  endpoint:
    path: /events_entertainment
    method: GET
    data_selector: records
- name: retail_business
  endpoint:
    path: /retail_business
    method: GET
    data_selector: records
- name: withdrawal
  endpoint:
    path: /api/withdrawal
    method: POST
    data_selector: data
    params: {}
- name: checkout
  endpoint:
    path: /api/checkout
    method: POST
    data_selector: data
    params: {}
- name: rbit
  endpoint:
    path: /rbit/create
    method: POST
    data_selector: rbits
- name: withdrawal
  endpoint:
    path: /api/withdrawal
    method: POST
    data_selector: withdrawal
    params: {}
- name: payment_method
  endpoint:
    path: /api/payment_method
    method: POST
    data_selector: payment_method
    params: {}
- name: payment_bank
  endpoint:
    path: /api/payment_bank
    method: POST
    data_selector: payment_bank
    params: {}
- name: payment_error
  endpoint:
    path: /api/payment_error
    method: POST
    data_selector: payment_error
    params: {}
- name: payments_prefill_info
  endpoint:
    path: /api/payments_prefill_info
    method: POST
    data_selector: payments_prefill_info
    params: {}
- name: preapproval
  endpoint:
    path: /api/preapproval
    method: POST
    data_selector: preapproval
    params: {}
- name: withdrawal_data
  endpoint:
    path: /withdrawal/data
    method: GET
    data_selector: records
- name: refund
  endpoint:
    path: /refund
    method: GET
    data_selector: records
- name: shipping_address
  endpoint:
    path: /shipping/address
    method: GET
    data_selector: records
- name: shipping_contact
  endpoint:
    path: /shipping/contact
    method: GET
    data_selector: records
- name: significant_beneficiaries
  endpoint:
    path: /beneficiaries
    method: GET
    data_selector: records
- name: strong_customer_authentication
  endpoint:
    path: /strong/customer/authentication
    method: POST
    data_selector: records
- name: theme_request
  endpoint:
    path: /theme/request
    method: POST
    data_selector: records
- name: tracking_information
  endpoint:
    path: /tracking/information
    method: GET
    data_selector: records
- name: merchant_category_codes
  endpoint:
    path: /api/reference/mcc
    method: GET
    data_selector: codes
- name: conversation
  endpoint:
    path: /rbit/create
    method: POST
    data_selector: properties
    params: {}
- name: device_info
  endpoint:
    path: /rbit/create
    method: POST
    data_selector: properties
    params: {}
- name: editorial_review
  endpoint:
    path: /rbit/create
    method: POST
    data_selector: properties
    params: {}
- name: email
  endpoint:
    path: /rbit/create
    method: POST
    data_selector: properties
    params: {}
- name: employment
  endpoint:
    path: /rbit/create
    method: POST
    data_selector: properties
    params: {}
- name: expected_volume
  endpoint:
    path: /rbit/create
    method: POST
    data_selector: properties
    params: {}
- name: event_or_conference
  endpoint:
    path: /rbit/create
    method: POST
    data_selector: properties
    params: {}
- name: external_account
  endpoint:
    path: /rbit/create
    method: POST
    data_selector: properties
    params: {}
- name: fundraiser_beneficiary_relationship
  endpoint:
    path: /rbit/create
    method: POST
    data_selector: properties
    params: {}
- name: fundraising_campaign
  endpoint:
    path: /rbit/create
    method: POST
    data_selector: properties
    params: {}
- name: fundraising_team
  endpoint:
    path: /rbit/create
    method: POST
    data_selector: properties
    params: {}
- name: fundraising_update
  endpoint:
    path: /rbit/create
    method: POST
    data_selector: properties
    params: {}
- name: industry_code
  endpoint:
    path: /rbit/create
    method: POST
    data_selector: properties
    params: {}
- name: fundraising_event
  endpoint:
    path: /rbit/create
    method: POST
    data_selector: properties
    params: {}
- name: member_to_member_message
  endpoint:
    path: /rbit/create
    method: POST
    data_selector: properties
    params: {}
- name: Donations and Personal Services
  endpoint:
    path: /donations-and-personal-services
    method: GET
    data_selector: records
    params: {}
- name: Service Providers
  endpoint:
    path: /service-providers
    method: GET
    data_selector: records
    params: {}
- name: Professional Services
  endpoint:
    path: /professional-services
    method: GET
    data_selector: records
    params: {}
- name: Groups/Organizations
  endpoint:
    path: /groups-organizations
    method: GET
    data_selector: records
    params: {}
- name: Events/Entertainment
  endpoint:
    path: /events-entertainment
    method: GET
    data_selector: records
    params: {}
- name: Retail Business
  endpoint:
    path: /retail-business
    method: GET
    data_selector: records
    params: {}
- name: credit_card_create
  endpoint:
    path: /credit_card/create
    method: POST
- name: kyc_create
  endpoint:
    path: /account/kyc/create
    method: POST
- name: settlement_create
  endpoint:
    path: /settlement_bank/create
    method: POST
- name: member_to_member_stats
  endpoint:
    path: /rbit/create
    method: POST
    data_selector: properties
    params: {}
- name: other_document
  endpoint:
    path: /rbit/create
    method: POST
    data_selector: properties
    params: {}
- name: other_web_content
  endpoint:
    path: /rbit/create
    method: POST
    data_selector: properties
    params: {}
- name: paid_invoices
  endpoint:
    path: /rbit/create
    method: POST
    data_selector: properties
    params: {}
- name: partner_service
  endpoint:
    path: /rbit/create
    method: POST
    data_selector: properties
    params: {}
- name: person
  endpoint:
    path: /rbit/create
    method: POST
    data_selector: properties
    params: {}
- name: phone
  endpoint:
    path: /rbit/create
    method: POST
    data_selector: properties
    params: {}
- name: project
  endpoint:
    path: /rbit/create
    method: POST
    data_selector: properties
    params: {}
- name: revenue
  endpoint:
    path: /rbit/create
    method: POST
    data_selector: properties
    params: {}
- name: risk_review
  endpoint:
    path: /rbit/create
    method: POST
    data_selector: properties
    params: {}
- name: risk_score
  endpoint:
    path: /rbit/create
    method: POST
    data_selector: properties
    params: {}
- name: social_media_shares
  endpoint:
    path: /rbit/create
    method: POST
    data_selector: properties
    params: {}
- name: tax_id
  endpoint:
    path: /rbit/create
    method: POST
    data_selector: properties
    params: {}
- name: transaction_details
  endpoint:
    path: /rbit/create
    method: POST
    data_selector: properties
    params: {}
- name: website_uri
  endpoint:
    path: /rbit/create
    method: POST
    data_selector: properties
    params:
      associated_object_type: account
      associated_object_id: 1234
      receive_time: 1367958263
      type: website_uri
      source: partner_database
- name: receipt_line_item
  endpoint:
    path: /receipt/line_item
    method: POST
    data_selector: line_item_details
    params:
      description: test
      item_price: 30.0
      quantity: 10
      amount: 10.0
      currency: USD
- name: shipping_info
  endpoint:
    path: /shipping/info
    method: POST
    data_selector: shipping_details
    params:
      expected_delivery_time: 1397510245
      shipping_time: 1397510245
      carrier: USPS
      tracking_number: YX-33333
      tracking_url: http://www.example.com
      actual_delivery_time: 1397510245
- name: tokenization
  endpoint:
    path: https://static.wepay.com/min/js/tokenization.4.0.2.js
    method: GET
- name: kyc
  endpoint:
    path: https://static.wepay.com/min/js/kyc.1.0.3.js
    method: GET
- name: risk
  endpoint:
    path: https://static.wepay.com/min/js/risk.1.0.1.js
    method: GET
- name: conversation
  endpoint:
    path: /rbit/create
    method: POST
    data_selector: properties
    params: {}
- name: device_info
  endpoint:
    path: /rbit/create
    method: POST
    data_selector: properties
    params: {}
- name: editorial_review
  endpoint:
    path: /rbit/create
    method: POST
    data_selector: properties
    params: {}
- name: email
  endpoint:
    path: /rbit/create
    method: POST
    data_selector: properties
    params: {}
- name: employment
  endpoint:
    path: /rbit/create
    method: POST
    data_selector: properties
    params: {}
- name: expected_volume
  endpoint:
    path: /rbit/create
    method: POST
    data_selector: properties
    params: {}
- name: event_or_conference
  endpoint:
    path: /rbit/create
    method: POST
    data_selector: properties
    params: {}
- name: external_account
  endpoint:
    path: /rbit/create
    method: POST
    data_selector: properties
    params: {}
- name: fundraiser_beneficiary_relationship
  endpoint:
    path: /rbit/create
    method: POST
    data_selector: properties
    params: {}
- name: fundraising_campaign
  endpoint:
    path: /rbit/create
    method: POST
    data_selector: properties
    params: {}
- name: fundraising_team
  endpoint:
    path: /rbit/create
    method: POST
    data_selector: properties
    params: {}
- name: fundraising_update
  endpoint:
    path: /rbit/create
    method: POST
    data_selector: properties
    params: {}
- name: industry_code
  endpoint:
    path: /rbit/create
    method: POST
    data_selector: properties
    params: {}
- name: fundraising_event
  endpoint:
    path: /rbit/create
    method: POST
    data_selector: properties
    params: {}
- name: member_to_member_message
  endpoint:
    path: /rbit/create
    method: POST
    data_selector: properties
    params: {}
- name: member_to_member_stats
  endpoint:
    path: /rbit/create
    method: POST
    data_selector: properties
    params: {}
- name: other_document
  endpoint:
    path: /rbit/create
    method: POST
    data_selector: properties
    params: {}
- name: other_web_content
  endpoint:
    path: /rbit/create
    method: POST
    data_selector: properties
    params: {}
- name: paid_invoices
  endpoint:
    path: /rbit/create
    method: POST
    data_selector: properties
    params: {}
- name: partner_service
  endpoint:
    path: /rbit/create
    method: POST
    data_selector: properties
    params: {}
- name: person
  endpoint:
    path: /rbit/create
    method: POST
    data_selector: properties
    params: {}
- name: phone
  endpoint:
    path: /rbit/create
    method: POST
    data_selector: properties
    params: {}
- name: project
  endpoint:
    path: /rbit/create
    method: POST
    data_selector: properties
    params: {}
- name: revenue
  endpoint:
    path: /rbit/create
    method: POST
    data_selector: properties
    params: {}
- name: risk_review
  endpoint:
    path: /rbit/create
    method: POST
    data_selector: properties
    params: {}
- name: risk_score
  endpoint:
    path: /rbit/create
    method: POST
    data_selector: properties
    params: {}
- name: social_media_shares
  endpoint:
    path: /rbit/create
    method: POST
    data_selector: properties
    params: {}
- name: tax_id
  endpoint:
    path: /rbit/create
    method: POST
    data_selector: properties
    params: {}
- name: transaction_details
  endpoint:
    path: /rbit/create
    method: POST
    data_selector: properties
    params: {}
- name: website_uri
  endpoint:
    path: /rbit/create
    method: POST
    data_selector: properties
    params:
      associated_object_type: account
      associated_object_id: 1234
      receive_time: 1367958263
      type: website_uri
      source: partner_database
      properties:
        uri: http://www.example.com
- name: receipt_line_item
  endpoint:
    path: /receipt/line_item
    method: POST
    data_selector: line_item
    params:
      description: test
      item_price: 30.0
      quantity: 10
      amount: 10.0
      currency: USD
- name: shipping_info
  endpoint:
    path: /shipping/info
    method: POST
    data_selector: shipping
    params:
      expected_delivery_time: 1397510245
      shipping_time: 1397510245
      carrier: USPS
      tracking_number: YX-33333
      tracking_url: http://www.example.com
      actual_delivery_time: 1397510245
notes:
- The /account/kyc endpoint is deprecated.
- The call must be error free. Any error returned will result in the failure of the
  entire call.
- For business and nonprofit organization merchants, account_owner represents the
  controller.
- The API requires setup of specific compliance structures for Canadian and US entities.
- The SSN must be in form nnn-nn-nnnn where only digits between 0 and 9 are valid.
- Every call must include an access_token, which is unique to each user-application
  pair.
- WePay recommends that you integrate in our stage environment before registering
  for production access.
- Redirect to WePay's OAuth2 authorization URI for merchant setup.
- Uses OAuth2 with Bearer token — requires setup of connected app in WePay
- Leverage the WePay user experience by using our embedded iframe as much as possible.
- Uses OAuth2 for merchant account setup
- Access tokens are required for API calls
- Uses OAuth2 with access token
- Change to useProduction for live environments
- OAuth2 flow requires co-branded user action before the merchant can accept payments.
- OAuth2 process involves getting an access_token to act on behalf of a merchant.
- The access_token received during registration is temporary unless confirmed.
- If your platform leverages the deprecated KYC API, then you must implement the changes
  as outlined in the rest of this article.
- If your platform leverages the deprecated KYC API, please integrate new KYC API
  parameters by September 1, 2020.
- Processing payments entails making API calls that facilitate payments from payers
  to merchants on your platform.
- Tokenization requires PCI compliance.
- Tokenization requires approval and adherence to PCI-DSS standards.
- Uses OAuth2 with Bearer token for authentication.
- Partial capture is currently in BETA, so your application may receive errors.
- WePay offers a Credit Card iFrame, which is a simple, pre-built user interface where
  a payer submits their credit card information directly to WePay.
- Find information on the deprecated embedded iFrame checkout here.
- Refunds can only be issued 60 days after the initial payment was released.
- Federal regulations require collection and verification of specific identity information
  from merchants.
- If you refund less than the entire amount, the state of the checkout will remain
  captured.
- Merchants typically only need to complete this step once.
- In a digital setting, this requirement can be fulfilled by including attestation
  language in the same user experience used to collect identity information and obtaining
  the electronic equivalent of a signature - timestamp, IP address, username or any
  other ID.
- Same-Day Deposits are currently rolling out. Rollout will be complete by the end
  of Q4 2019.
- ACH payments have a built-in delay of 2 business days.
- Merchants typically only need to complete the verification step once.
- WePay requires that all permissions be included in the 'scope' parameter.
- You must obtain the electronic signature of each of your merchants on the WePay
  Terms of Service and Privacy Policy.
- 'WePay requires the following elements of an electronic signature: Login credentials,
  Date/time stamp, IP address.'
- WePay provides integrated payment processing APIs in addition to risk and compliance
  overhead management.
- The WePay Terms of Service will always be accessible at https://go.wepay.com/terms-of-service.
- The WePay Privacy Policy will always be accessible at https://go.wepay.com/privacy-policy.
- Tokenization must be enabled before payments from any MoP can be processed.
- WePay doesn’t recommend surcharging.
- Passing rBit data can help improve the accuracy of WePay’s risk solution, reduce
  manual review times, and reduce requests for additional documentation.
- Every partner needs to be PCI compliant, even if you are using iFrame/embedded or
  hosted checkouts.
- WePay requires AVS for fraud protection
- CVV is mandatory for ecommerce transactions in Canada
- Access tokens are private, so they should never be shared or passed as a GET or
  POST argument.
- AVS is required for transactions to reduce fraud.
- CVV is mandatory for first-time card usage.
- Uses OAuth2 for authentication
- Requires client_id and client_secret for API calls
- Delayed payouts are supported in Canada as of API version 2016-05-04.
- WePay’s embedded checkout relies on the client’s browser accepting WePay cookies
  in order to successfully display the iframe.
- Some browsers do not support third-party cookies. A prime example is Safari, which
  blocks third-party cookies by default.
- change to useProduction for live environments
- set _use_stage to false for live environments
- WePay will make changes to minimize impact due to Google's cookie policy changes.
- callback_uri must be publicly available for IPNs to work
- IPNs do not include state information; use relevant API calls to retrieve updated
  information
- Uses OAuth2 with access token for authorization
- Uses OAuth2 — requires setup of application in WePay dashboard.
- For app-level iframe tokenization, use client_secret instead of access_token.
- Surcharges are only supported by custom checkout.
- Certain states (and Canada) limit or prohibit surcharging.
- WePay will make changes to minimize impact on iFrame experiences due to third-party
  cookie support being removed by Google.
- Test Environment is an exact copy of the Production Environment, except credit cards
  and bank accounts are not actually charged.
- Testing IPNs on your local machine requires the callback_uri to be publicly available.
- By default, if your app executes more than 30 API calls over 10 seconds, your app
  will be throttled, and you should retry the call later.
- Throttling is in place to protect API partners and WePay from attacks and programming
  errors in an app that can cause API calls on infinite loops.
- By default, the application can perform API calls from any IP address.
- If you misconfigure whitelisted IP addresses, your application will be broken.
- Your application must use our custom checkout APIs in order to support recurring
  Pay With Bank (ACH) payments.
- Permission is required to use this feature. Please contact your account manager.
- You can only delay payout for 14 days.
- Currently, surcharges are only supported by custom checkout.
- This is an advanced configuration parameter. If you misconfigure whitelisted IP
  addresses, your application will be broken.
- Delayed payouts are available only in the United States and Canada at this time.
- You can only delay payout for 14 days. If the payment has not been released 14 days
  after initial payment, it will be refunded.
- Use accessing token to charge the credit card immediately.
- Set auto_release to false to hold the payment in the captured state.
- Custom checkout (aka tokenization) only. WePay hosted checkout (iframe) is coming
  soon.
- Merchants must be in the United States, Canada, or United Kingdom.
- Use production for live environments
- Merchant ID is reserved for Apple Pay. For Payment Request API, use `undefined`.
- If you ship products, you might want to have a variety of shipping method options
  depending on the shipping contact location.
- Merchants accepting Apple Pay are subject to the Apple Pay terms.
- Platforms that facilitate fundraising for causes and platforms that enable registered
  nonprofits to raise funds are not eligible to enable Apple Pay.
- Uses OAuth2 for authentication.
- This error occurs when using Apple Pay over http (instead of https)
- mPOS can only be used by merchants registered in the US.
- WePay cannot offer direct tech support to merchants for card readers.
- The payment sheet will display in test mode.
- WePay provides a simple RESTful interface to integrate payments into your marketplace.
- Apple Pay can only be used on Safari and requires iOS 10 or macOS Sierra.
- Payers must have a supported bank card loaded on their Apple device.
- WePay does not support test scenarios once production is live.
- WePay's OAuth implementation allows users to create a new WePay account.
- Ensure to handle error responses properly when calling the API.
- WePay does not currently offer direct merchant services and support.
- WePay allows you to customize the OAuth2 Authorization page, the iframe checkout,
  withdrawal flow, and API emails to match your site’s design.
- WePay’s mPOS program requires consultation and approval.
- WePay will migrate credit card information to/from another PCI compliant processor.
- The payment account must belong to the user associated with the access token used
  to make the call.
- Must be explicitly set to True for Canadian merchants to accept debit card payments.
- WePay cannot migrate client profiles, billing schedules, or payment bank information
  associated with ACH payments.
- WePay cannot guarantee completion within 10 business days, as migrations require
  accuracy and active participation from all parties.
- Checkouts expire 30 minutes after they are created if there is no activity on them.
- All calls must include an access_token, which is unique to each user-application
  pair.
- WePay recommends integrating in the stage environment before registering for production
  access.
- The access token must be the token associated with the current admin.
- The admin of an account can only be changed if no funds have been settled.
- Use of the credit card tokenization feature requires special approval from WePay.
- If a credit card is stored but goes without payment activity for 3 or more years,
  then the credit card data will be deleted.
- WePay does not allow underscores in subdomains.
- You can receive callback notifications when the preapproval changes state.
- Reports are processed asynchronously, which typically takes 5 to 10 minutes.
- Reports are available for four days from the time they are generated.
- Do not provide an access token for the create call. Must confirm using the /settlement_bank/authorize
  call within 30 minutes.
- Callback URI must not be localhost or 127.0.0.1.
- The callback_uri must be a full URI and cannot include localhost or wepay.com.
- Batch API calls allow your application to avoid throttling limits on sequential
  API calls.
- You can send up to 50 API calls within a batch.
- The /notification_preference endpoint is deprecated.
- Do not provide an access token for the create call.
- Must authorize the bank account within 30 minutes of creation.
- Unconfirmed accounts created with a temporary access token have restrictions on
  the amount of funds they may accept.
- Duplicate notification preferences are not allowed.
- Must not include localhost or wepay.com in callback_uri.
- The inactive state occurs if WePay is unable to deliver a webhook to your platform's
  callback_uri in 6 attempts.
- Handles various payment structures and supports multiple endpoints.
- The URI that you will send the account owner to to complete the withdrawal. Do not
  store the returned URI on your side as it can change.
- MCCs preceded by an asterisk symbol (*) require a primary_url when making the /account/kyc/create
  call.
- MCCs preceded by two asterisks (**) can only be used by accounts with a legal_form
  of specified types.
- API structures are JSON objects used in the API calls to pass structured data in
  and out.
- Do not store the returned URI on your side as it can change.
- You must include risk-related headers in your requests if you are tokenizing credit
  card or KYC information from your server.
- WePay risk tokens are only valid for 48 hours, so try to generate new ones when
  possible.
- The Risk API provides a way to communicate risk-related account and transaction
  level information.
- Only non-profit merchants may select certain MCCs.
- WePay risk tokens are only valid for 48 hours.
- The Risk API provides a way to communicate risk-related account and transaction
  level information between an application and WePay using rbits.
- All incoming HTTP requests now require a user-agent header.
- Permissions are handled on a per access token basis, and must be requested up front
  when a Merchant creates an account on your platform.
errors:
- 'REQUEST_LIMIT_EXCEEDED: Throttle API calls or reduce frequency'
- 'QUERY_TIMEOUT: Break down filters or add selectivity'
- '400 Bad Request: Ensure all required fields are provided.'
- '401 Unauthorized: Recheck OAuth token and permissions.'
- '404 Not Found: Verify the endpoint path.'
- '3009: Unable to validate the personal identity of the merchant or any beneficial
  owners.'
- '401 Unauthorized: Recheck OAuth scopes or token expiration'
- '401 Unauthorized: Recheck OAuth credentials or permissions'
- '401 Unauthorized: Recheck OAuth token'
- '401 Unauthorized: Recheck OAuth token or credentials.'
- 'invalid_request: Partial capture is not supported'
- '1001: Access Token has been revoked'
- '1008: There was an unknown error - Contact api@wepay.com'
- '1008, 2002, 2003, 2004, 2005, 2006, 2007, 2008, or 2009: Unable to charge payment
  method: general decline'
- '3002, 3302, 4002, 5002, 6002, or 7001: The User with that Access Token cannot access
  this object'
- '4003: This payment method can no longer transact'
- '3003: This account has been deleted'
- '1010: You do not have sufficient permissions'
- '1007: Your app has been throttled for making too many calls. Please retry this
  call later'
- 'invalid_request: CVV required for this transaction.'
- '400 Bad Request: Check request parameters'
- '401 Unauthorized: Recheck OAuth token or client credentials'
- 'Pop-up closing: '
- 'Pop-up opening: '
- '9002: Invalid login credentials.'
- '1003: Window was closed without finishing'
- '401 Unauthorized: Recheck OAuth scopes or token expiration.'
- 'non-200 response code: IPN will be considered failed'
- 'throttle_exceeded: Your app has been throttled for making too many calls. Please
  retry this call later.'
- '1014: WePay will reject any API calls made with your application credentials from
  any other IP address.'
- JavaScript may return errors during payment bank tokenization.
- 'InvalidAccessError: The object does not support the operation or argument.'
- 1008 unable to save credit card
- 10023 This card is not supported
- 10030 The provided transaction info is invalid
- 'STATUS_FAILURE: Indicates a failure in processing the payment.'
- 'STATUS_INVALID_SHIPPING_POSTAL_ADDRESS: Indicates an invalid shipping address.'
- 'STATUS_FAILURE: Transaction failed'
- 'STATUS_INVALID_BILLING_POSTAL_ADDRESS: Invalid billing address'
- 'STATUS_INVALID_SHIPPING_POSTAL_ADDRESS: Invalid shipping address'
- Error - Checkout ID is expected
- Error - cannot create WePay account
- Error - no response from WePay
- 'cURL error while making API call to WePay: SSL certificate problem, verify that
  the CA cert is OK.'
- Authorization must be performed during tokenization.
- Transaction amount cannot be changed after tokenization.
- '1008: there was an unknown error - please contact api@wepay.com for support'
- '401 Unauthorized: Access token must be that of the financial admin.'
- '400 Bad Request: Invalid parameters passed'
- '401 Unauthorized: Invalid client_id or client_secret'
- '403 Forbidden: Permission denied to perform this action'
- '400 Bad Request: Check the request parameters.'
- '401 Unauthorized: Ensure correct authentication details are provided.'
- 'access_denied: this account can no longer transact'
- 'error_code: 3004'
- 'invalid_request: Duplicate Preference'
- 'error_code: 1003'
- Attempts to call `/user/send_confirmation` to a user that already registered with
  that same application will return an error.
- '400: Account names can''t be empty or contain "WePay", please try again.'
- '400: account name cannot contain wepay'
- '400: We were unable to send a verification code to the specified phone number,
  please try again or use a different number'
- '400: Names can only include alpha-numeric characters'
- Updated error message for invalid account_id
- '1001: You try to make an API call that doesn’t exist like /user/robots.'
- '1002: You are missing a required header such as User-Agent, Content-Type, or Authorization.'
- '1003: You passed an invalid parameter value such “robot” for the “fee_payer” parameter.'
- '1004: You did not pass a required parameter.'
- '1005: We were unable to parse the parameters you passed (ie your JSON is malformed).'
- '1006: We were completely unable to authenticate your request (probably your access_token
  doesn’t exist).'
- '1007: You have made too many requests in a short time period. See our throttling
  documentation for more details.'
- '1008: WePay encountered an unexpected error. Contact api@wepay.com.'
- '1009: This error can be displayed to the user and generally relates to user data
  - long term this code will be replaced by more specific error codes.'
- '1010: You do not have sufficient permissions to perform the requested action.'
- '1011: The access_token you passed has been revoked.'
- '1012: The code parameter (OAuth2) has expired.'
- '1013: The client_id you passed does not match the code parameter.'
- '1014: IP address you are making API calls from is not on the IP whitelist for your
  app.'
- '1015: API Version is invalid or expired.'
- '1016: The API version specified in the ‘Api-Version’ header used in the request
  is not valid for the app.'
- 'invalid_request: The API call had a malformed URI, or incorrect or invalid parameters.'
- 'access_denied: The API call tried to access a resource that it does not have permission
  to access.'
- 'invalid_scope: The API call provided non existent permissions in a scope parameter.'
- 'invalid_client: The API call provided a client_id for a client that does not exist,
  or has been disabled.'
- 'processing_error: There was an error on WePay''s end. If you receive this message,
  please contact api@wepay.com.'
- '1001: You try to make an API call that doesn’t exist.'
- '1003: You passed an invalid parameter value.'
- '1005: We were unable to parse the parameters you passed.'
- '1006: We were completely unable to authenticate your request.'
- '1007: You have made too many requests in a short time period.'
- '1008: WePay encountered an unexpected error.'
- '1009: This error can be displayed to the user and generally relates to user data.'
auth_info:
  mentioned_objects:
  - Oauth2
  - WePay::Client
  - OauthToken
  - AuthProvider
client:
  base_url: https://stage.wepayapi.com
  auth:
    type: oauth2
    location: header
    header_name: Authorization
source_metadata: null
