resources:
- name: tables
  endpoint:
    path: /workflow-automation/tables
    method: GET
    data_selector: data
- name: Workflow
  endpoint:
    path: /api/v1/workflows
    method: POST
    data_selector: workflow
    params: {}
- name: approvals
  endpoint:
    path: /api/v1/approvals
    method: POST
    data_selector: data
    params: {}
- name: web_form_trigger
  endpoint:
    path: /create/web-form-trigger
    method: POST
    data_selector: trigger_response
    params: {}
- name: web_form
  endpoint:
    path: /send-web-form
    method: POST
    data_selector: response
    params: {}
- name: purchase_order
  endpoint:
    path: /workflows/purchase_order
    method: POST
    data_selector: workflow_instance
    params: {}
- name: data_table
  endpoint:
    path: /data/tables
    method: POST
    data_selector: tables
- name: mailing_addresses
  endpoint:
    path: /api/v1/mailing_addresses
    method: POST
    data_selector: records
- name: application_table
  endpoint:
    path: /api/v1/application_table
    method: GET
    data_selector: users
- name: mailing_address_table
  endpoint:
    path: /api/v1/mailing_address_table
    method: POST
    data_selector: submitted_addresses
- name: mailing_addresses
  endpoint:
    path: /services/data/vXX.X/sobjects/MailingAddress
    method: GET
    data_selector: records
    params: {}
- name: application_table_users
  endpoint:
    path: /data/tables/application_users
    method: GET
    data_selector: active_users
- name: custom_white_paper
  endpoint:
    path: /workflows
    method: POST
    data_selector: workflow
    params: {}
- name: web_form_trigger
  endpoint:
    path: /api/v1/web_forms
    method: POST
    data_selector: data
    params: {}
- name: assign_task
  endpoint:
    path: /assign-task
    method: POST
    data_selector: task_fields
    params: {}
- name: Download an object
  endpoint:
    path: /docs/amazon-s3-download-an-object
    method: POST
- name: List objects in a bucket
  endpoint:
    path: /docs/amazon-s3-list-objects-in-a-bucket
    method: GET
- name: download_object
  endpoint:
    path: /{bucket}/{object_key}
    method: GET
    data_selector: output
    params: {}
- name: list_objects
  endpoint:
    path: /s3/list-objects
    method: GET
    data_selector: objects
    params:
      permissions: s3:ListBucket
- name: work_item
  endpoint:
    path: /api/workitem
    method: POST
    data_selector: response
    params: {}
- name: File ID
  endpoint:
    path: /v2/repository/file/list
    method: POST
    data_selector: list
    params:
      filter:
        operator: eq
        value: Sample Task.atmx
        field: name
- name: Device ID
  endpoint:
    path: /v2/devices/list
    method: POST
    data_selector: list
    params:
      filter:
        operator: ne
        value: '0'
        field: id
- name: upload_blob
  endpoint:
    path: /upload_blob
    method: POST
    data_selector: results
    params:
      container_name: container_name
      create_new_container: 'true'
      blob_name: filename.pdf
      container_public_access_level: Private
      metadata: 'Company:Vandelay

        Title:Industrialist'
      file_to_upload: file_reference
      output_field_name: result_field
- name: create_user
  endpoint:
    path: /users
    method: POST
- name: deactivate_user
  endpoint:
    path: /deactivate_user
    method: POST
    data_selector: status
    params: {}
- name: key_phrases
  endpoint:
    path: /identify_key_phrases
    method: POST
    data_selector: key_phrases
    params:
      text: text
      output_field_prefix: output_field_prefix
- name: company_info
  endpoint:
    path: /companies
    method: GET
    data_selector: output
    params: {}
- name: contact_lookup
  endpoint:
    path: /contacts/lookup
    method: GET
    data_selector: response
    params: {}
- name: email_validation
  endpoint:
    path: /contacts/validate-email
    method: POST
    data_selector: output
    params: {}
- name: convert_degrees_to_radians
  endpoint:
    path: /convert/degrees_to_radians
    method: POST
    data_selector: result
    params: {}
- name: conversion
  endpoint:
    path: /convert/radians_to_degrees
    method: POST
    data_selector: result
    params: {}
- name: convert_number_to_word
  endpoint:
    path: /convert/number/to/word
    method: POST
    data_selector: result
    params: {}
- name: text_conversion
  endpoint:
    path: /actions/convert-to-lower-case
    method: POST
    data_selector: output
    params: {}
- name: slugified_text
  endpoint:
    path: /text/slugify
    method: POST
    data_selector: result
    params: {}
- name: source_text
  endpoint:
    path: /how-to-configure-this-action
    method: GET
    data_selector: fields
- name: 'Text: Invert casing'
  endpoint:
    path: /text/invert-casing
    method: POST
    data_selector: resulting_text
    params: {}
- name: text_reverse
  endpoint:
    path: /text/reverse
    method: POST
    data_selector: resulting_text
    params: {}
- name: unencode_url
  endpoint:
    path: /unencode-url
    method: POST
    data_selector: resulting_text
    params: {}
- name: purchase_order
  endpoint:
    path: /api/purchase_orders
    method: GET
    data_selector: purchase_orders
    params: {}
- name: user
  endpoint:
    path: /users
    method: GET
- name: csv_file
  endpoint:
    path: /apply-formulas
    method: POST
    data_selector: output
    params: {}
- name: unique_value_spreadsheet
  endpoint:
    path: /csv/create_spreadsheet
    method: POST
    data_selector: output
    params: {}
- name: CatalyticTable
  endpoint:
    path: /run-sql-query
    method: POST
    data_selector: results
    params: {}
- name: result
  endpoint:
    path: /docs/csv-run-sql-query-on-csv-file-and-return-data-table/
    method: GET
- name: CatalyticTable
  endpoint:
    path: /csv
    method: GET
    data_selector: records
    params: {}
- name: result
  endpoint:
    path: /docs/csv-run-sql-query-on-csv-file-and-return-data-table
    method: GET
    data_selector: file
    params: {}
- name: CatalyticTable
  endpoint:
    path: /CSV
    method: GET
    data_selector: records
    params: {}
- name: Result Table
  endpoint:
    path: /docs/csv-run-sql-query-on-csv-file-and-return-csv-file/
    method: GET
    data_selector: table
- name: row_formula
  endpoint:
    path: /docs/csv-summarize-rows-with-formulas
    method: GET
    data_selector: fields
- name: update_file
  endpoint:
    path: /csv/update
    method: POST
    data_selector: result
    params: {}
- name: files
  endpoint:
    path: /api/files
    method: GET
    data_selector: saved_files
- name: input
  endpoint:
    path: /dates/format
    method: POST
    data_selector: result
- name: send_envelope
  endpoint:
    path: /v2.1/accounts/{accountId}/envelopes
    method: POST
    data_selector: envelopeId
    params: {}
- name: invite_user
  endpoint:
    path: /email/invite
    method: POST
    data_selector: output
    params: {}
- name: email_send_form
  endpoint:
    path: /email/send_form
    method: POST
    data_selector: output
    params: {}
- name: email
  endpoint:
    path: /email/send
    method: POST
    data_selector: output
    params: {}
- name: Filtered Spreadsheet
  endpoint:
    path: /docs/excel-apply-filters/#filtered-spreadsheet
    method: GET
    data_selector: filtered_spreadsheet
- name: Sheet Name
  endpoint:
    path: /docs/excel-apply-filters/#sheet-name
    method: GET
    data_selector: sheet_name
- name: Master spreadsheet file
  endpoint:
    path: file_upload
    method: POST
- name: Inbound spreadsheet file
  endpoint:
    path: file_upload
    method: POST
- name: data_table
  endpoint:
    path: /api/data_table
    method: GET
    data_selector: tables
    params: {}
- name: Extract Cell Data
  endpoint:
    path: /excel/extract-cell-data
    method: GET
- name: extract_range
  endpoint:
    path: /excel/extract-range
    method: POST
    data_selector: output
    params: {}
- name: ExcelInsertDataTable
  endpoint:
    path: /excel/insert-data-table
    method: POST
    data_selector: output
    params: {}
- name: Excel Lookup
  endpoint:
    path: /excel/lookup
    method: POST
    data_selector: output
    params: {}
- name: Spreadsheet file
  endpoint:
    path: /docs/reference-fields/
    method: POST
    data_selector: output
    params: {}
- name: remove_duplicate_rows
  endpoint:
    path: /excel/remove-duplicate-rows
    method: POST
    data_selector: output
    params: {}
- name: CatalyticTable
  endpoint:
    path: /CatalyticTable
    method: GET
    data_selector: records
    params: {}
- name: result
  endpoint:
    path: /docs/excel-run-sql-query-on-excel-file-and-return-data-table/
    method: GET
- name: CatalyticTable
  endpoint:
    path: /path/to/catalytic_table
    method: SQL
    data_selector: data
    params: {}
- name: Result
  endpoint:
    path: /docs/excel-run-sql-query-on-excel-file-and-return-data-table/
    method: GET
    data_selector: file
    params: {}
- name: CatalyticTable
  endpoint:
    path: /Excel/RunSQLQuery
    method: POST
    data_selector: data
    params: {}
- name: Result Table
  endpoint:
    path: /docs/field-types/#table
    method: GET
    data_selector: output-field
    params: {}
- name: output_data_table
  endpoint:
    path: /excel/save_spreadsheet_to_table
    method: POST
    data_selector: tableExported
    params: {}
- name: Workflow
  endpoint:
    path: /workflows/start
    method: POST
    data_selector: instances
    params: {}
- name: 'Field: Set the value of a multiple choice field'
  endpoint:
    path: /docs/field-set-value-of-a-multiple-choice-field/
    method: GET
    data_selector: records
    params: {}
- name: file_info
  endpoint:
    path: /file/info
    method: GET
    data_selector: output
    params: {}
- name: convert_file_to_text
  endpoint:
    path: /files/convert_to_text
    method: POST
    data_selector: output
    params: {}
- name: image_conversion
  endpoint:
    path: /images/convert
    method: POST
    data_selector: result
    params: {}
- name: GitHub Repository
  endpoint:
    path: /repos/{owner}/{repo}
    method: GET
    data_selector: repository_info
    params: {}
- name: create_issue
  endpoint:
    path: /issues
    method: POST
- name: issue
  endpoint:
    path: /repos/{repository owner}/{repository}/issues/{issue number}
    method: GET
    data_selector: issue
    params: {}
- name: list_files
  endpoint:
    path: /drive/v3/files
    method: GET
    data_selector: files
    params:
      folderId: 1HqmxgNQFbmDYOzFcd3QAgo7zhGYN4xMM
- name: apply_auto_white_balance
  endpoint:
    path: /docs/image-effects-apply-auto-white-balance
    method: GET
    data_selector: output
    params: {}
- name: grayscale_effect
  endpoint:
    path: /image/effects/grayscale
    method: POST
    data_selector: result
    params: {}
- name: apply_moon_light_effect
  endpoint:
    path: /image-effects/apply-moon-light-effect
    method: POST
    data_selector: result
    params: {}
- name: images_clean_edges
  endpoint:
    path: /images/clean-edges
    method: POST
- name: double_image_width_and_height
  endpoint:
    path: /docs/images-double-image-width-and-height
    method: GET
    data_selector: output
    params: {}
- name: blur_image
  endpoint:
    path: /images/fast-blur
    method: POST
    data_selector: result
    params: {}
- name: images_flip_horizontally
  endpoint:
    path: /images/flip-horizontally
    method: POST
    data_selector: result
    params: {}
- name: Image Flip Vertically
  endpoint:
    path: /images/flip-vertically
    method: POST
    data_selector: output
    params: {}
- name: 'Images: Halve image width and height'
  endpoint:
    path: /images/halve-image-width-and-height
    method: POST
    data_selector: result
    params: {}
- name: median_filter
  endpoint:
    path: /images/median-filter
    method: POST
    data_selector: result
    params: {}
- name: images_remove_comments
  endpoint:
    path: /images/remove-comments-and-information
    method: POST
    data_selector: result
    params: {}
- name: rotate_image
  endpoint:
    path: /images/rotate
    method: POST
    data_selector: result
    params: {}
- name: scale_image
  endpoint:
    path: /images/scale
    method: POST
    data_selector: result
    params: {}
- name: sharpen_image
  endpoint:
    path: /images/sharpen
    method: POST
    data_selector: result
    params: {}
- name: blur_image
  endpoint:
    path: /images/smart-blur
    method: POST
    data_selector: result
- name: image_histogram_equalization
  endpoint:
    path: /images/smart-image-histogram-equalization
    method: POST
    data_selector: result
- name: candidate
  endpoint:
    path: /candidates
    method: POST
- name: candidate
  endpoint:
    path: /candidates
    method: POST
- name: candidate
  endpoint:
    path: /candidates
    method: POST
    data_selector: candidate
    params: {}
- name: stage
  endpoint:
    path: /docs/lever-lists-all-pipeline-stages-in-your-lever-account
    method: GET
    data_selector: Stage data
- name: candidate
  endpoint:
    path: /docs/lever-lists-all-pipeline-candidates-in-your-lever-account
    method: GET
    data_selector: List of candidates
- name: candidate
  endpoint:
    path: /candidates
    method: POST
- name: note
  endpoint:
    path: /notes
    method: POST
    data_selector: noteId
- name: offer_letter
  endpoint:
    path: /offers
    method: GET
    data_selector: offers
- name: candidate_notes
  endpoint:
    path: /lever/candidate_notes
    method: GET
    data_selector: notes
    params: {}
- name: pipeline_candidates
  endpoint:
    path: /api/v1/candidates
    method: GET
    data_selector: candidates
- name: candidates
  endpoint:
    path: /candidates
    method: GET
    data_selector: candidates
- name: pipeline_stages
  endpoint:
    path: /stages
    method: GET
    data_selector: stages
    params: {}
- name: candidate
  endpoint:
    path: /candidates
    method: POST
    data_selector: candidate
    params: {}
- name: tags
  endpoint:
    path: /tags/remove
    method: POST
- name: candidates
  endpoint:
    path: /candidates
    method: GET
- name: feedback_form
  endpoint:
    path: /feedback_forms
    method: GET
    data_selector: feedback_forms
    params: {}
- name: candidate
  endpoint:
    path: /candidates/{user_id}
    method: GET
    data_selector: candidate
    params: {}
- name: Retrieve a single form
  endpoint:
    path: /lever/retrieve_single_form
    method: GET
    data_selector: note
    params: {}
- name: retrieve_stage
  endpoint:
    path: /lever/retrieve_stage
    method: GET
    data_selector: stage
    params: {}
- name: candidates
  endpoint:
    path: /candidates
    method: POST
    data_selector: candidate
    params: {}
- name: archive_reasons
  endpoint:
    path: /archive_reasons
    method: GET
    data_selector: reasons
    params: {}
- name: international_address
  endpoint:
    path: /locations/parse-international-address
    method: POST
    data_selector: output
- name: parsed_address
  endpoint:
    path: /locations/parse-us-street-address
    method: POST
    data_selector: parsed_address
    params: {}
- name: Calculate arctangent2
  endpoint:
    path: /calculate/arctangent2
    method: POST
    data_selector: result
    params: {}
- name: ceil
  endpoint:
    path: /math/ceil
    method: POST
    data_selector: result
    params: {}
- name: MathAction
  endpoint:
    path: /math/floor
    method: POST
    data_selector: result
    params: {}
- name: round_numbers
  endpoint:
    path: /math/round
    method: POST
    data_selector: results
    params: {}
- name: X
  endpoint:
    path: /math/round
    method: POST
    data_selector: result
    params: {}
- name: Total Decimal Places
  endpoint:
    path: /math/round
    method: POST
    data_selector: result
    params: {}
- name: customer
  endpoint:
    path: /add/customer
    method: POST
    data_selector: customerID
    params: {}
- name: return_authorization
  endpoint:
    path: /services/data/vXX.X/sobjects/ReturnAuthorization
    method: POST
    data_selector: transactionID
    params: {}
- name: entity_lookup
  endpoint:
    path: /services/data/v1/entity/lookup
    method: GET
    data_selector: records
    params: {}
- name: user
  endpoint:
    path: /users
    method: POST
    data_selector: user
    params: {}
- name: create_user
  endpoint:
    path: /api/v1/users
    method: POST
    data_selector: user
    params: {}
- name: delete_user
  endpoint:
    path: /api/v1/users/:id
    method: DELETE
    data_selector: User Deleted
- name: email
  endpoint:
    path: /emails
    method: GET
    data_selector: attributes
    params: {}
- name: meeting
  endpoint:
    path: /me/events
    method: POST
    data_selector: value
- name: move_email
  endpoint:
    path: /mail/move
    method: POST
- name: append_rows
  endpoint:
    path: /appendRows
    method: POST
    data_selector: data
    params: {}
- name: Power BI dataset
  endpoint:
    path: /v1.0/myorg/datasets
    method: GET
    data_selector: datasets
    params: {}
- name: PowerPoint Template
  endpoint:
    path: /api/powerpoint/populate
    method: POST
    data_selector: output
    params: {}
- name: template_file
  endpoint:
    path: /path/to/template
    method: POST
    data_selector: output
    params: {}
- name: new_file_name
  endpoint:
    path: /path/to/new/file
    method: POST
    data_selector: output
    params: {}
- name: keep_unmatched_fields
  endpoint:
    path: /path/to/unmatched/fields
    method: POST
    data_selector: output
    params: {}
- name: output_field_name
  endpoint:
    path: /path/to/output/field
    method: POST
    data_selector: output
    params: {}
- name: account
  endpoint:
    path: /services/data/vXX.X/sobjects/Account
    method: GET
    data_selector: records
- name: new_case
  endpoint:
    path: /services/data/vXX.X/sobjects/Case
    method: POST
- name: account
  endpoint:
    path: /services/data/vXX.X/sobjects/Account
    method: GET
    data_selector: records
- name: new_opportunity
  endpoint:
    path: /services/data/vXX.X/sobjects/Opportunity
    method: POST
- name: New Opportunity
  endpoint:
    path: /services/data/vXX.X/sobjects/Opportunity
    method: GET
    data_selector: records
- name: new_order
  endpoint:
    path: /services/data/vXX.X/sobjects/Order
    method: POST
    data_selector: records
- name: Lead
  endpoint:
    path: /services/data/vXX.X/sobjects/Lead
    method: GET
    data_selector: records
- name: user
  endpoint:
    path: /services/data/vXX.X/sobjects/User
    method: GET
    data_selector: records
- name: New account created
  endpoint:
    path: /docs/salesforce-trigger-new-account-created/
    method: GET
- name: New case created
  endpoint:
    path: /docs/salesforce-trigger-new-case-created/
    method: GET
- name: New lead created
  endpoint:
    path: /docs/salesforce-trigger-new-lead-created/
    method: GET
- name: New opportunity created
  endpoint:
    path: /docs/salesforce-trigger-new-opportunity-created/
    method: GET
- name: New order created
  endpoint:
    path: /docs/salesforce-trigger-new-order-created/
    method: GET
- name: Opportunity moved to new stage
  endpoint:
    path: /docs/salesforce-trigger-opportunity-stage-change/
    method: GET
- name: sentiment_analysis
  endpoint:
    path: /sentiment/calculate
    method: POST
    data_selector: results
    params: {}
- name: user
  endpoint:
    path: /services/data/vXX.X/sobjects/User
    method: GET
    data_selector: records
    params: {}
- name: delete_record
  endpoint:
    path: /api/now/table/{table_name}/{sys_id}
    method: DELETE
    data_selector: result
    params:
      sysparm_query_no_domain: 'true'
- name: records
  endpoint:
    path: /api/now/table/{table_name}
    method: GET
    data_selector: result
    params:
      limit: '10000'
- name: sentiment_analysis
  endpoint:
    path: /sentiment/calculate
    method: POST
    data_selector: sentiment_result
    params: {}
- name: single_record
  endpoint:
    path: /api/now/table/{table_name}/{sys_id}
    method: GET
    data_selector: result
- name: file
  endpoint:
    data_selector: uploaded_file
- name: records
  endpoint:
    path: /api/now/table/{table_name}
    method: GET
    data_selector: result
    params:
      sysparm_limit: '10000'
- name: record
  endpoint:
    path: /api/now/table/{table_name}/{sys_id}
    method: GET
    data_selector: result
    params: {}
- name: delete_file
  endpoint:
    path: /sftp/delete
    method: POST
    data_selector: confirmation
    params: {}
- name: download_file
  endpoint:
    path: /download/file
    method: GET
    data_selector: file
    params: {}
- name: uploaded_file
  endpoint:
    path: /folder
    method: POST
    data_selector: file_attributes
- name: SFTP Credentials
  endpoint:
    path: /sftp/credentials
    method: POST
    data_selector: url
    params: {}
- name: delete_file
  endpoint:
    path: /delete_file
    method: POST
    data_selector: confirmation
    params: {}
- name: sftp_download
  endpoint:
    path: /sftp/download
    method: POST
    data_selector: output_field_name
    params: {}
- name: Workflow
  endpoint:
    path: /workflows
    method: POST
    data_selector: commands
    params: {}
- name: SFTP Credentials
  endpoint:
    path: /sftp/credentials
    method: POST
    data_selector: output
    params: {}
- name: SMS Text
  endpoint:
    path: /sms/send
    method: POST
    data_selector: response
    params: {}
- name: sms_text
  endpoint:
    path: /sms/send
    method: POST
    data_selector: smsSent
    params: {}
- name: send_message
  endpoint:
    path: /api/chat.postMessage
    method: POST
    data_selector: message
    params: {}
- name: CatalyticTable
  endpoint:
    path: /tables/catalytic
    method: GET
    data_selector: records
    params: {}
- name: CatalyticTable
  endpoint:
    path: /tables/CatalyticTable
    method: GET
    data_selector: records
    params: {}
- name: CatalyticTable
  endpoint:
    path: /tables/CatalyticTable
    method: GET
    data_selector: data
    params: {}
- name: Result Table
  endpoint:
    path: /tables/run_sql_query
    method: POST
    data_selector: output
- name: send_sms
  endpoint:
    path: /sms/send
    method: POST
    data_selector: smsSent
    params: {}
- name: CatalyticTable
  endpoint:
    path: /tables/catalytic
    method: GET
    data_selector: records
    params: {}
- name: customer
  endpoint:
    path: /v1/customers
    method: POST
    data_selector: customer
- name: CatalyticTable
  endpoint:
    path: /tables/sql
    method: POST
    data_selector: results
    params: {}
- name: data_table
  endpoint:
    path: /tables/add-row
    method: POST
    data_selector: rows
    params: {}
- name: CatalyticTable
  endpoint:
    path: /tables/CatalyticTable
    method: GET
    data_selector: records
    params: {}
- name: filter
  endpoint:
    path: /tables/apply-filters
    method: POST
    data_selector: result
    params: {}
- name: create_charge
  endpoint:
    path: /v1/charges
    method: POST
    data_selector: charge
    params: {}
- name: apply_formulas_to_columns
  endpoint:
    path: /docs/tables-apply-formulas-to-columns/
    method: GET
    data_selector: output
    params: {}
- name: customer
  endpoint:
    path: /v1/customers
    method: POST
    data_selector: customer
- name: 'Tables: Add a Column'
  endpoint:
    path: /tables/add-column
    method: POST
- name: average_data_in_column
  endpoint:
    path: /tables/average-data-in-a-column
    method: GET
    data_selector: output
    params: {}
- name: Data Table 1
  endpoint:
    path: /tables/data_table_1
    method: GET
    data_selector: records
    params: {}
- name: Data Table 2
  endpoint:
    path: /tables/data_table_2
    method: GET
    data_selector: records
    params: {}
- name: Tables
  endpoint:
    path: /tables/apply-filters
    method: GET
    data_selector: results
- name: apply_formulas
  endpoint:
    path: /tables/apply_formulas
    method: POST
    data_selector: results
    params: {}
- name: convert_data_table
  endpoint:
    path: /tables/convert
    method: POST
    data_selector: output
    params: {}
- name: tables_compare
  endpoint:
    path: /tables/compare
    method: POST
    data_selector: output
    params: {}
- name: markdown_table_conversion
  endpoint:
    path: /tables/convert
    method: POST
    data_selector: result
    params: {}
- name: data_table_conversion
  endpoint:
    path: /tables/convert
    method: POST
    data_selector: output
    params: {}
notes:
- Webhook and Web API actions support basic auth or token authentication out of the
  box.
- Common authentication method is OAuth.
- Automation platform meant to help streamline and digitize your business processes.
- Workflows can also be exported and imported into different environments.
- Dynamic field references allow for interactive forms.
- This API is used for routing requests and notifications in workflows.
- Web form triggers can gather information but cannot have actions run beforehand.
- Catalytic is a no code platform — requires setup of webform and email configurations.
- Uses HelloSign for e-signatures.
- Document generation from templates is supported.
- Catalytic can process structured data in common formats such as CSV and Excel files.
- Data tables have specific actions that they can be used with.
- Uploaded tables may adopt the name of the file but can be renamed.
- If the data has special characters, use parentheses around the field reference.
- Uses OAuth2 with refresh token — requires setup of connected app in PagerDuty
- Some objects like MailingAddress may return nulls in deeply nested fields
- Uses OAuth2 for authentication
- Uses OAuth2 with refresh token — requires setup of connected app in api
- Most processes with tasks, triggers, and data can be automated.
- This process populates a template with data collected from a task.
- PagerDuty Workflow Automation helps people, bots + AI get work done better.
- Common tasks that yield quick returns when automated include pulling data from multiple
  files and/or source systems.
- Web forms are publicly accessible links for automation.
- Triggers initiate workflows based on form submissions.
- When a task is assigned to multiple users, any of the assigned users can complete
  the task and once one user completes the task, it’s completed for all users.
- Reminder emails are not sent when testing a task or process.
- This action requires s3:GetObject permissions to access objects.
- This action requires s3:ListBucket permissions to access buckets.
- Requires Automation Anywhere Version 11.3+
- Integration user must have minimum permissions set in Control Room
- Requires preconfigured Automation Anywhere integration
- The File ID is required to identify the correct robot.
- The Device ID is required to deploy to the right device.
- You must have a blob storage account with Azure Blob Storage to set up the integration.
- Configuring with Box is simple and only requires logging in with the email address
  and password for your Box Account.
- The action configuration can only be performed by admins.
- The input text has a character size limit of 64k and the output table cannot exceed
  100,000 identified key phrases.
- This action returns information like full name, organization, or demographics, based
  on the availability of this data.
- Mailbox verification can significantly increase the time it takes for this action
  to complete.
- This action is in beta and the function or availability may change unexpectedly.
- The API key authenticates the integration with PagerDuty Workflow Automation and
  can be created by an admin within your Coupa instance.
- This action requires a preconfigured Coupa integration.
- This action creates a new CSV file for any modifications. The original CSV file
  will not be changed.
- This action applies a formula to one or more columns for each row in a CSV file.
- This action can segment a data table of up to 10,000 rows.
- Any table with more than 10,000 rows will be partially segmented up to this limit.
- Always use the table name CatalyticTable when writing your query.
- The action may return an empty table if a query uses unsupported SQL, or is incorrectly
  formatted.
- Always use the table name `CatalyticTable` when writing your query.
- Not all SQL functions are supported in PagerDuty Workflow Automation.
- The action may return an empty table if a query uses unsupported SQL or is incorrectly
  formatted.
- This action functions similarly to a SQL Join query.
- Only a single key column can be set.
- This action cannot delete instances that are less than 3 hours old.
- It’s advised to create a data deletion Helper Workflow with a 3 hour delay.
- It is not possible to save files from past completed instances, or instances from
  other Workflows.
- By default, PagerDuty Workflow Automation saves and makes all instance data available
  to you; no files, tables or other objects are deleted automatically.
- Unfortunately, deleted runs cannot be recovered. This is strictly enforced in order
  to meet any stringent data retention requirements within an organization or government.
- It is important to save or backup the IDs of any saved files or tables. Once an
  instance is deleted, saved objects may be hard or impossible to relocate.
- 'If the Input is a date value, the Dates: Format a Date Time action will always
  output a date value.'
- Access to this action requires a preconfigured DocuSign integration.
- Access to this action requires a preconfigured DocuSign integration, which can be
  setup through our Integrations page.
- Uses HelloSign for e-signature
- There is a per use cost associated with this action
- The invitation link will expire after 3 days
- If there are tasks dependent on the user joining the team, set 'Mark complete after
  sending' to 'False'.
- 'The maximum number of recipients between To:, CC:, and BCC: is 50.'
- PagerDuty Workflow Automation limits the number of emails you can send to a single
  email address to 100 emails per hour.
- If you need to send an email message to more than 50 recipients, you can split your
  recipient list into groups of 50 recipients or less, then send separate messages
  to each group.
- If an email is opened or bounces after the process ends, the fields can’t be updated.
- If you have a business case that requires you to send over 100 emails an hour to
  a single recipient, please contact PagerDuty Support.
- If an email has the same recipient, subject, and body as an email sent in the last
  hour, it will bounce.
- The output file will depend on the file extension used. Supported formats include
  .xlsx, .xls, .xlsm, .csv.
- Uses standard Excel notation for cell or range references.
- Certain range types like 'A:B' and '1:2' are not supported.
- Some Excel formatting and features may not be compatible with this action.
- If a data table with Excel formulas is inserted into Excel, the formulas will not
  work or evaluate.
- This action only joins data by adding new columns of data, you cannot replace data
  with this action.
- The best columns to use as key columns are those with unique data, like usernames
  or IDs, not overlapping data like age or city.
- Supports .XLSX, .XLS, .XLSM, and .CSV files.
- Always use the table name 'CatalyticTable' when writing your query.
- This action runs a series of steps for each row of a spreadsheet.
- The action will always use the next row after the header row to begin the batch
  processing.
- 'Field: Field formulas is an advanced action that depends on Javascript.'
- A file must exist prior to this action, either uploaded into a previous field or
  Instance Field.
- This action accepts images up to 15,000 Pixels and 15MB based on the PagerDuty Workflow
  Automation system limits.
- This action requires a preconfigured GitHub integration and an account with GitHub.
- The multiple files field type is not supported.
- This action accepts images up to 15,000 Pixels and 15MB.
- This action accepts images up to 15,000 Pixels and 15MB based on system limits.
- Some objects like Contact may return nulls in deeply nested fields
- This action can scan PNG, PDF, JPEG, and JPG file types.
- This action is unable to extract text entered into a PDF file itself, such as a
  user-fillable form.
- This action accepts images up to 15,000 Pixels and 15MB
- An API Token is required for setup, which requires administrator privileges in your
  Lever account.
- Your organization must be on the Professional or Enterprise plan for this integration
  to work.
- This action requires a preconfigured Lever integration.
- Only 1 tag can be added at a time.
- If you enter a tag that does not exist, it will be created and added to the candidate.
- Most fields are optional, except for the Perform as field.
- Users you @-mention in Lever will be able to see the note, even without the Sensitive
  Information Privileges.
- This action outputs a table with a list of Workflow Automation data tables for each
  offer letter.
- The primary table has a row for each offer, and includes details like when the offer
  was created, whether it is a draft, or more.
- The note list does not include the actual content of the note.
- This action outputs a table with a row for each candidate.
- This is a premium action. By default, a premium action is not available in a team
  as there is an additional fee associated with it.
- The parsed address is stored as a single string in the output field, but with field
  references, each item is accessible individually.
- Math actions require integer or decimal values.
- This action requires a preconfigured NetSuite integration.
- Starts a Workflow instance when a new user is created within an Okta organization.
- Currently, this trigger only works for Outlook accounts hosted through Outlook 365.
- This action requires a preconfigured Outlook integration.
- You will need to add an Outlook trigger.
- This action requires a preconfigured Power BI integration.
- The target dataset and the selected Workflow Automation data table must have identical
  columns—they must exactly match and be in the same order.
- To replace a dataset, the Workflow Automation data table must have the same columns,
  in the same order. There can be no missing or extra columns.
- The target dataset and the selected Workflow Automation data table must have identical
  columns.
- This action supports .JPEG, .GIF, .BMP, and .PNG files.
- The Salesforce trigger requires a preconfigured Salesforce integration.
- Integrations can only be set up by Admin users and are enabled per team.
- Requires a preconfigured Salesforce integration.
- Requires a preconfigured Salesforce integration
- Configuring Salesforce triggers require administration permissions within Salesforce.
- Requires a preconfigured ServiceNow integration
- Supports multiple languages for sentiment analysis
- Your SFTP domain must be available outside of an internal network.
- Trigger checks the SFTP directory every 60 seconds.
- The trigger will not respond to files with a .incomplete extension, or without a
  file extension.
- By default, this action returns all records.
- Sysparm fields takes precedent over Sysparm view.
- Requires a preconfigured SFTP integration.
- Some SFTP types may require a dedicated IP.
- We can support SSH-DSS as a host authentication algorithm upon request.
- Some SFTP servers may require a dedicated IP.
- This trigger checks the SFTP directory every 60 seconds.
- Files with a .incomplete extension or without a file extension will not trigger
  the process.
- This action requires a preconfigured SFTP integration.
- When entering a folder name, enter a / before it.
- Only the Cloud version of SharePoint is supported at this time.
- Some SFTP types will require a dedicated IP.
- Users must link the Slack integration to their user profile to trigger a Workflow
  via Slack.
- Users can only be associated with a single PagerDuty Workflow Automation team.
- Requires a preconfigured Slack integration
- This action requires a preconfigured Slack integration.
- This trigger requires a preconfigured Slack integration.
- Premium action requires additional fee.
- Multiple recipients supported using comma separated values.
- To post to a private Slack channel, invite the PagerDuty Workflow Automation app
  to the channel first. The app can only post to channels it is a member of.
- If you test a Workflow with this task, any real Slack recipients will receive the
  message. You must manually adjust the recipient during testing to a dummy account
  or your own Slack account so actual recipients aren’t messaged during the test.
- The action may return an empty table if a query uses unsupported SQL, or is incorrectly
  formatted. At this time, not all SQL functions are supported in PagerDuty Workflow
  Automation. For example, JOIN, CONCAT, INNER, DELETE, UPDATE, and INSERT INTO do
  not currently work.
- The multiple choice question can only be answered once.
- You must manually adjust the recipient during testing to a dummy account or your
  own Slack account so actual recipients aren’t messaged during the test.
- Not all SQL functions are supported in PagerDuty Workflow Automation. For example,
  JOIN, CONCAT, INNER, DELETE, UPDATE, and INSERT INTO do not currently work.
- This is a premium action and requires an additional fee.
- Test recipients must be adjusted manually during testing.
- This action requires a preconfigured Stripe integration.
- 'The Tables: Add a Column action will not create a second version of the table but
  will modify the existing table.'
- The action may return an empty table if a query uses unsupported SQL, or is incorrectly
  formatted. At this time, not all SQL functions are supported in PagerDuty Workflow
  Automation.
- Columns not referenced or containing an empty value display as (none)
- The original data table will not be changed.
- This action may generate multiple fields.
- This action always creates a new data table with the results to avoid unexpected
  overwriting.
- Row formulas use basic Javascript notation to calculate new values based on rows
  and columns.
- If a column name has special characters, or you’re referencing a column with a field
  reference, wrap it in quotation marks (`""`).
- This action outputs a new data table with the filter applied.
- This action can export a maximum of 50 columns. If more than 50 columns are entered,
  only the first 50 will be included.
- For most use cases, such as sending markdown tables via email, 5 columns or less
  typically display the best.
- The action outputs a data table converted into the row template format.
- This action will average values of integers and decimals and has specific behaviors
  for if there are strings or blank values in a column.
- This action can export a maximum of 50 columns.
- For most use cases, 5 columns or less typically display the best.
- The action converts data tables into formatted text using a row template.
errors:
- 'REQUEST_LIMIT_EXCEEDED: Throttle API calls or reduce frequency'
- 'QUERY_TIMEOUT: Break down filters or add selectivity'
- '401 Unauthorized: Recheck OAuth scopes or token expiration'
- '400 Bad Request: Check the form field configurations.'
- '401 Unauthorized: Verify OAuth token validity.'
- '404 Not Found: Ensure the endpoint is correct.'
- '400 Bad Request: Check the task assignment details'
- '401 Unauthorized: Verify OAuth token'
- '101: Unable to connect to server'
- '111: Connection refused, or blocked by configuration or firewall'
- '500: Syntax error'
- '501: Syntax error in parameters or arguments'
- '503: Bad sequence of commands, or requires authentication'
- '550: Non-existent email address'
- '551: User not local or invalid address – relay denied'
- Completed runs cannot be deleted until they are 3 hours old.
- 'The files with IDs: [X,Y,Z] were not found in this run'
- 'Declined: Signature request has been closed'
- 'Expired: Signature request has expired'
- PagerDuty Workflow Automation has sent too many emails to this address recently.
  Please try again later.
- PagerDuty Workflow Automation did not send your email … because an email with the
  exact same subject and body was sent to this address within the last hour.
- PagerDuty Workflow Automation did not send your email … to [addresses] because …
  have a history of bouncing.
- 'Email bounced: A TRUE or FALSE response for whether or not an email bounced.'
- Recipient count exceeds 50.
- PagerDuty Workflow Automation has sent too many emails to this address recently.
  Please try again later
- PagerDuty Workflow Automation did not send your email ... because an email with
  the exact same subject and body was sent to this address within the last hour.
- PagerDuty Workflow Automation did not send your email ... to [addresses] because
  ... have a history of bouncing
- Exceeding 100 emails per hour will result in undelivered emails.
- 'No file chosen: If you choose an incompatible image file for the action, the output
  may be blank.'
- 'No file chosen: If you choose an incompatible image file for the action'
- If an output text field exceeds the field size system limit, there will be a fix
  task.
- If you choose an incompatible image file for the action, the output may be blank.
- Be sure to include the full image format file extension, such as .PNG or .JPEG.
- 'Unable to reset columns for dataset: This is likely because the target dataset
  and your Workflow Automation data table do not have identical columns.'
- 'Unable to reset columns for dataset: The target dataset and your Workflow Automation
  data table do not have identical columns.'
- If multiple files with the same name appear within 60 seconds, only one automation
  is triggered.
- Please sign in with Slack on your PagerDuty Workflow Automation profile page
- 'Invalid phone number: Ensure phone number format is correct.'
- '403 Forbidden: Check if SMS action is enabled for your account.'
- Unsuccessful delivery results in smsSent being False.
- Column names with special characters like commas must be enclosed in quotation marks.
- 'The action is returning “0” as the average: This often happens when the column
  is a Text type field.'
auth_info:
  mentioned_objects:
  - OauthToken
  - AuthProvider
  - NamedCredential
client:
  base_url: https://www.pagerduty.com
  auth:
    type: oauth2
    flow: refresh_token
source_metadata: null
