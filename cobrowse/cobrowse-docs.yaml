resources:
- name: devices
  endpoint:
    path: /devices
    method: GET
- name: sessions
  endpoint:
    path: /sessions
    method: GET
- name: recordings
  endpoint:
    path: /recordings
    method: GET
- name: users
  endpoint:
    path: /users
    method: GET
- name: user
  endpoint:
    path: /get
    method: GET
    data_selector: User
    params: {}
- name: session
  endpoint:
    path: /api/v1/sessions
    method: GET
    data_selector: sessions
- name: redaction
  endpoint:
    path: /redaction
    method: POST
    data_selector: data
    params: {}
- name: pdf_links
  endpoint:
    path: /sdk-features/viewing-pdfs
    method: GET
    data_selector: pdfLinks
    params: {}
- name: session_loaded
  endpoint:
    path: /session.loaded
    method: GET
    data_selector: session
- name: session_updated
  endpoint:
    path: /session.updated
    method: GET
    data_selector: session
- name: session_ended
  endpoint:
    path: /session.ended
    method: GET
    data_selector: session
- name: full_device_screen_sharing
  endpoint:
    path: /sdk-features/full-device-capabilities/full-device-screen-sharing
    method: GET
    data_selector: records
- name: full_device_remote_control
  endpoint:
    path: /sdk-features/full-device-capabilities/full-device-remote-control
    method: GET
    data_selector: records
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: capabilities
  endpoint:
    path: /api/capabilities
    method: GET
    data_selector: capabilities
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: agent_sdk
  endpoint:
    path: /agent-side-integrations/agent-sdk
    method: GET
- name: authentication_jwts
  endpoint:
    path: /agent-side-integrations/json-web-tokens-jwts
    method: GET
- name: iframe_embeds
  endpoint:
    path: /agent-side-integrations/custom-iframe-embeds
    method: GET
- name: sessions
  endpoint:
    path: /sessions
    method: GET
    data_selector: sessions
- name: devices
  endpoint:
    path: /devices
    method: GET
    data_selector: devices
- name: jwt_policy
  endpoint:
    path: /agent-side-integrations/json-web-tokens-jwts
    method: GET
    data_selector: policy
    params: {}
- name: SAML Login
  endpoint:
    path: /api/1/saml/auth/callback
    method: GET
- name: full_dashboard_embed
  endpoint:
    path: /dashboard
    method: GET
- name: six_digit_codes_only
  endpoint:
    path: /code
    method: GET
- name: direct_device_connection
  endpoint:
    path: /connect
    method: GET
- name: screenshare_only
  endpoint:
    path: /session/<session id>
    method: GET
- name: MongoDB
  endpoint:
    path: ./data/db
    method: GET
    data_selector: records
    params: {}
- name: cobrowse
  endpoint:
    path: /cobrowse-enterprise
    method: GET
    data_selector: records
    params: {}
- name: session
  endpoint:
    path: /services/data/vXX.X/sobjects/Session
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: api
  endpoint:
    path: /pod/annotations
    method: POST
- name: frontend
  endpoint:
    path: /frontend/pod/annotations
    method: POST
- name: sockets
  endpoint:
    path: /sockets/pod/annotations
    method: POST
- name: recording
  endpoint:
    path: /recording/pod/annotations
    method: POST
- name: proxy
  endpoint:
    path: /proxy/pod/annotations
    method: POST
- name: S3 bucket
  endpoint:
    path: /create-bucket
    method: POST
    data_selector: bucket
- name: Terraform
  endpoint:
    path: /terraform/deploy
    method: POST
    data_selector: deployment
- name: account_config
  endpoint:
    path: /sdk-features/account-configuration
    method: GET
    data_selector: records
- name: agent_sdk
  endpoint:
    path: /agent-side-integrations/agent-sdk
    method: GET
    data_selector: records
- name: metrics
  endpoint:
    path: /aws/containerinsights/cobrowse-enterprise/performance
    method: GET
    data_selector: metrics
    params: {}
- name: mongo-url
  endpoint:
    path: /keyvault/secret/mongo-url
    method: SET
    data_selector: value
- name: mongo_url
  endpoint:
    path: /secrets/mongo_url
    method: CREATE
    data_selector: value
    params: {}
- name: PodMonitor
  endpoint:
    path: /etc/metrics/cobrowse-svc-podmonitor.yml
    method: POST
    data_selector: metrics
    params: {}
- name: SMTP Configuration
  endpoint:
    path: /enterprise-self-hosting/getting-started/configuring-smtp
    method: GET
    data_selector: configuration
- name: smtp_configuration
  endpoint:
    path: /admin/configuration
    method: POST
    data_selector: smtp_url
    params: {}
- name: metrics
  endpoint:
    path: /metrics
    method: GET
    data_selector: ''
    params: {}
- name: cobrowse_device_registrations_total
  endpoint:
    path: /metrics/cobrowse_device_registrations_total
    method: GET
    data_selector: data
- name: cobrowse_presence_queue_delay_seconds
  endpoint:
    path: /metrics/cobrowse_presence_queue_delay_seconds
    method: GET
    data_selector: data
- name: cobrowse_presence_queue_length_count
  endpoint:
    path: /metrics/cobrowse_presence_queue_length_count
    method: GET
    data_selector: data
- name: cobrowse_session_created_total
  endpoint:
    path: /metrics/cobrowse_session_created_total
    method: GET
    data_selector: data
- name: cobrowse_session_duration_seconds
  endpoint:
    path: /metrics/cobrowse_session_duration_seconds
    method: GET
    data_selector: data
- name: cobrowse_session_unused_total
  endpoint:
    path: /metrics/cobrowse_session_unused_total
    method: GET
    data_selector: data
- name: cobrowse_websocket_byte_in_total
  endpoint:
    path: /metrics/cobrowse_websocket_byte_in_total
    method: GET
    data_selector: data
- name: cobrowse_websocket_connection_duration_seconds
  endpoint:
    path: /metrics/cobrowse_websocket_connection_duration_seconds
    method: GET
    data_selector: data
- name: cobrowse_websocket_connection_end_total
  endpoint:
    path: /metrics/cobrowse_websocket_connection_end_total
    method: GET
    data_selector: data
- name: cobrowse_websocket_connection_start_total
  endpoint:
    path: /metrics/cobrowse_websocket_connection_start_total
    method: GET
    data_selector: data
- name: cobrowse_websocket_connections_count
  endpoint:
    path: /metrics/cobrowse_websocket_connections_count
    method: GET
    data_selector: data
- name: cobrowse_websocket_message_in_total
  endpoint:
    path: /metrics/cobrowse_websocket_message_in_total
    method: GET
    data_selector: data
- name: cobrowse_websocket_message_size_bytes
  endpoint:
    path: /metrics/cobrowse_websocket_message_size_bytes
    method: GET
    data_selector: data
- name: cobrowse_limits_members_used_count
  endpoint:
    path: /metrics/cobrowse_limits_members_used_count
    method: GET
    data_selector: data
- name: cobrowse_limits_members_remaining_count
  endpoint:
    path: /metrics/cobrowse_limits_members_remaining_count
    method: GET
    data_selector: data
- name: cobrowse_limits_members_daily_used_count
  endpoint:
    path: /metrics/cobrowse_limits_members_daily_used_count
    method: GET
    data_selector: data
- name: cobrowse_limits_members_daily_remaining_count
  endpoint:
    path: /metrics/cobrowse_limits_members_daily_remaining_count
    method: GET
    data_selector: data
- name: cobrowse_limits_sessions_used_count
  endpoint:
    path: /metrics/cobrowse_limits_sessions_used_count
    method: GET
    data_selector: data
- name: cobrowse_limits_sessions_remaining_count
  endpoint:
    path: /metrics/cobrowse_limits_sessions_remaining_count
    method: GET
    data_selector: data
- name: cobrowse_limits_session_concurrency_used_count
  endpoint:
    path: /metrics/cobrowse_limits_session_concurrency_used_count
    method: GET
    data_selector: data
- name: cobrowse_limits_session_concurrency_remaining_count
  endpoint:
    path: /metrics/cobrowse_limits_session_concurrency_remaining_count
    method: GET
    data_selector: data
- name: grafana
  endpoint:
    path: /grafana
    method: GET
    data_selector: datasources
    params: {}
- name: prometheus
  endpoint:
    path: /prometheus
    method: GET
    data_selector: datasources
    params: {}
- name: docker_images
  endpoint:
    path: /docker/images
    method: GET
    data_selector: images
    params: {}
- name: Web SDK
  endpoint:
    path: /sdk-js/CobrowseIO.js
    method: GET
- name: agent_api
  endpoint:
    path: /api/1/
    method: GET
    data_selector: null
    params: {}
- name: proxy_api
  endpoint:
    path: /proxy/1/
    method: GET
    data_selector: null
    params: {}
- name: recording_api
  endpoint:
    path: /recording/1/
    method: GET
    data_selector: null
    params: {}
- name: devices_api
  endpoint:
    path: /api/1/devices
    method: GET
    data_selector: null
    params: {}
- name: sessions_api
  endpoint:
    path: /api/1/sessions
    method: GET
    data_selector: null
    params: {}
- name: devices
  endpoint:
    path: /api/1/devices
    method: GET
- name: sessions
  endpoint:
    path: /api/1/sessions
    method: GET
- name: websocket
  endpoint:
    path: /sockets/1/
    method: GET
- name: web_sdk
  endpoint:
    path: /sdk-js/
    method: GET
- name: agent_api
  endpoint:
    path: /api/1/
    method: GET
- name: proxy
  endpoint:
    path: /proxy/1/
    method: GET
- name: recording
  endpoint:
    path: /recording/1/
    method: GET
- name: frontend
  endpoint:
    path: /index.html
    method: GET
- name: devices
  endpoint:
    path: /api/1/devices
    method: GET
- name: sessions
  endpoint:
    path: /api/1/sessions
    method: GET
- name: websocket
  endpoint:
    path: /sockets/1/
    method: GET
- name: frontend
  endpoint:
    path: /index.html
    method: GET
- name: favicon
  endpoint:
    path: /favicon.png
    method: GET
- name: apps
  endpoint:
    path: /apps/
    method: GET
- name: static
  endpoint:
    path: /static/
    method: GET
- name: proxy
  endpoint:
    path: /proxy/1/
    method: GET
- name: recording
  endpoint:
    path: /recording/1/
    method: GET
- name: agent_session
  endpoint:
    path: /api/v1/agent_session
    method: GET
    data_selector: sessions
    params: {}
notes:
- Cobrowse needs to be able to access your website, so localhost addresses are not
  recommended for testing.
- If you self-host your instance, then replace cobrowse.io with your <your instance
  domain> in each case.
- Please register an account and generate your free License Key at https://cobrowse.io/dashboard/settings.
- 6-digit codes expire after approximately 20 minutes, so it's best practice to generate
  a code only when a user wants to start a session.
- Redaction API automatically blocks sensitive data.
- Sensitive data will never leave the user's device.
- Redaction is still supported whilst using Universal Cobrowse.
- When using Universal Cobrowse third-party websites are loaded in a modal window
  within your website.
- Cobrowse customers can use the default UI straight out of the box, or opt to customize
  the interface to meet their specific requirements.
- Cobrowse.io provides some minimal default UI in the SDKs for things like user consent
  and to visually indicate when a session is active.
- By default, the Cobrowse SDKs will show a minimal visual indicator to the end-user
  that a session is active.
- Session codes expire shortly after creation, do not create them on page load.
- Uses Cobrowse.io for screen sharing sessions
- Uses OAuth2 with refresh token — requires setup of connected app in api
- Custom consent dialog UI can be implemented for remote control requests
- Before a session is upgraded to full device, some platforms require a consent from
  the user.
- The website SDK provides support for more than 20 languages.
- Create a new strings file named `CobrowseIO.strings` in your app project and select
  all localization you want to support in the File Inspector.
- For sessions to start by push the user needs to have the client application open
  in the foreground.
- This method will not send a visible push notification to the user.
- 'The lifecycle of a Cobrowse session is based on the following states: pending,
  authorizing, active, ended.'
- Delegate implementation is required for customizing behaviors.
- Redaction, annotation, and remote control are disabled when in full device mode
  via our Web SDK.
- This feature is not available on IE11, or in the mobile browsers such as Mobile
  Chrome and Mobile Safari.
- The full device capability is only available on physical devices, it will not work
  in the iOS Simulator.
- For unattended full device access, we strongly recommend initiating sessions with
  push notifications, rather than our default sockets.
- Please turn off 'Require User Consent' prompts at https://cobrowse.io/dashboard/settings.
- Be wary of battery optimization policies. On some devices you may need to add your
  app to a battery optimization whitelist.
- Enable full device remote control on Android and Windows SDKs, allowing support
  agents to modify system settings or control apps on a user's device.
- Full device remote control for Android, including unattended access, uses an Accessibility
  Service that must be enabled on the device to grant access.
- Due to limitations and restrictions set by Apple we can not support full device
  remote control.
- Some objects like Contact may return nulls in deeply nested fields
- Capabilities can be enabled or disabled from the settings of the dashboard or SDKs.
- Requires iOS 15+ macOS 12+
- Customers may use custom integrations to deliver the agent-side UI directly into
  their own applications.
- Client-side JavaScript SDK to build custom agent-side integrations
- Uses OAuth2 with refresh token — requires setup of connected app in Cobrowse.io
- A valid JWT is required to modify the session
- The Cobrowse docker-compose file will start a MongoDB instance for you.
- Database storage will be exposed on a docker volume at ./data/db relative to the
  path of the docker-compose.yml file.
- The docker password required to access the Cobrowse images is required.
- Your Cobrowse enterprise license is required.
- The domain name for your deployment is required.
- Your MongoDB connection URL is required.
- 'Your Redis cluster connection URL is required in the format: redis://username:password@your-redis-host.com:PORT
  or rediss://username:password@your-redis-host.com:PORT.'
- The ingress class name to use is required.
- Amount of storage to provision for recordings is default 50Gb.
- A storage class available in the cluster that supports 'ReadWriteMany' access is
  required.
- In order for your Kubernetes cluster to install the Cobrowse service components,
  you need to specify the Github token that Cobrowse provided to you.
- Some objects may return nulls in deeply nested fields
- The naming of each resource is prefixed with your .Release.Name.
- Order of priority is followed while resolving environment variables.
- Minimising resource usage by disabling the recording components.
- If session recordings are not enabled for your account, you may optionally disable
  the recording pod and persistent volume requirements.
- You need to manually create an S3 bucket for terraform state.
- The deployment process requires approval for an SSL certificate.
- AWS provides a comprehensive set of instructions for installing the CloudWatch agent
  for a variety of existing OpenMetrics workload metrics, however none of these metrics
  are relevant to the Cobrowse deployment and related technologies.
- Access to Redis metrics through OpenMetrics is not supported.
- Configure Cobrowse on Microsoft Azure using the provided Terraform configurations,
  and seamlessly integrate with Azure Monitor for insightful container metrics.
- A MongoDB cluster is required for running Cobrowse.
- We do not provide this as part of the terraform environment.
- For convenience, we have provided 2 sample PodMonitor resources in your cobrowse
  enterprise for GCP terraform configuration.
- The Cobrowse Enterprise server is an efficient set of micro-services deployed via
  containers which can run on a single VM, or scale to a highly available architecture
  serving 100,000+ concurrent sessions across millions of end-users and devices.
- If session recording is not enabled for your account, you may choose to disable
  certain infrastructure components to optimize costs and simplify deployment.
- The exact container sizing will depend on your use case and will vary by traffic
  patterns and the platforms you use.
- By default your Cobrowse Enterprise instance will not have any superusers configured.
- For Terraform based deployments you need to add a "superusers" entry to the terraform.tfvars.json
  that is created by our configuration utility.
- For Docker Compose based deployments, you must configure the SUPERUSERS environment
  variable with a regular expression describing superuser emails.
- Enter a new configuration key called 'account_creators'. The value should be a regular
  expression that describes the email addresses that should be allowed to create new
  accounts.
- If the email address given passes the regular expression the request to send a magic
  link will progress.
- No magic link email will be sent for any non-matching email address.
- SMTP server can be configured via environment variable as smtp_url
- For production-grade deployment with appropriate authentication, persistence, and
  ingress, research Grafana and Prometheus configuration options.
- Cobrowse Enterprise does not require an internet connection to validate your enterprise
  license, therefore there are no steps needed in an isolated environment.
- Cobrowse Enterprise does not require an internet connection to validate your enterprise
  license.
- All headers, including custom headers, must be forwarded on the non-frontend routes.
- All query parameters must be forwarded on all routes.
- When running our docker-compose setup on a network that requires an HTTP proxy you
  will need to configure some extra settings.
- 'Add these hostnames to your `noProxy` configuration: cobrowse-api, cobrowse-api-sockets,
  cobrowse-frontend, cobrowse-chromium, cobrowse-recording, cobrowse-proxy, redis-node-0,
  redis-node-1, redis-node-2, mongodb, nginx.'
- 'Ensure that your proxy allows access to at least the following domains: Docker
  hub (docker.io, docker.com, and all subdomains of those), GitHub container registry
  (ghcr.io, pkg-containers.githubusercontent.com).'
- 'If you are planning to use our built-in support for LetsEncrypt to issue your SSL
  certificates, you will also need to allow access to: acme-v02.api.letsencrypt.org.'
- 100% white label, not just colors and logos.
errors:
- '400 Bad Request: Check the input parameters for errors.'
- '401 Unauthorized: Verify your authentication credentials.'
- '403 Forbidden: You do not have permission to access this resource.'
- 'REQUEST_LIMIT_EXCEEDED: Throttle API calls or reduce frequency'
- 'QUERY_TIMEOUT: Break down filters or add selectivity'
- '401 Unauthorized: Recheck OAuth scopes or token expiration'
auth_info:
  mentioned_objects:
  - OauthToken
  - AuthProvider
  - NamedCredential
client:
  base_url: https://api.cobrowse.io
  auth:
    type: oauth2
    flow: refresh_token
    token_url: https://api.cobrowse.io/oauth/token
    client_id: '{{ dlt.secrets[''api_client_id''] }}'
    client_secret: '{{ dlt.secrets[''api_client_secret''] }}'
    refresh_token: '{{ dlt.secrets[''api_refresh_token''] }}'
    location: header
    header_name: Authorization
  headers:
    Accept: application/json
source_metadata: null
