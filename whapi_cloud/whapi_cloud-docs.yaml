resources:
- name: Channel
  endpoint:
    path: /health
    method: GET
- name: Users
  endpoint:
    path: /users/profile
    method: GET
- name: Messages
  endpoint:
    path: /messages/list
    method: GET
- name: Chats
  endpoint:
    path: /chats
    method: GET
- name: Contacts
  endpoint:
    path: /contacts
    method: GET
- name: Groups
  endpoint:
    path: /groups
    method: GET
- name: Stories
  endpoint:
    path: /stories
    method: GET
- name: Statuses
  endpoint:
    path: /statuses/{MessageID}
    method: GET
- name: Newsletters
  endpoint:
    path: /newsletters
    method: GET
- name: Media
  endpoint:
    path: /media
    method: GET
- name: Business
  endpoint:
    path: /business
    method: GET
- name: Labels
  endpoint:
    path: /labels
    method: GET
- name: Blacklist
  endpoint:
    path: /blacklist
    method: GET
- name: Communities
  endpoint:
    path: /communities
    method: GET
- name: Bots
  endpoint:
    path: /bots
    method: GET
- name: Calls
  endpoint:
    path: /calls
    method: POST
- name: send_text_message
  endpoint:
    path: /messages/text
    method: POST
    data_selector: response
    params: {}
- name: get_messages
  endpoint:
    path: /messages/list
    method: GET
    data_selector: response
    params: {}
- name: get_groups
  endpoint:
    path: /groups
    method: GET
    data_selector: response
    params: {}
- name: update_settings
  endpoint:
    path: /settings
    method: PATCH
    data_selector: response
    params: {}
- name: message
  endpoint:
    path: /api/v1/messages
    method: POST
    data_selector: data
    params: {}
- name: group
  endpoint:
    path: /api/v1/groups
    method: GET
    data_selector: data
    params: {}
- name: send_text_message
  endpoint:
    path: /messages/text
    method: POST
    data_selector: message
    params: {}
- name: send_text_message
  endpoint:
    path: /send/text
    method: POST
    data_selector: data
    params: {}
- name: send_media_message
  endpoint:
    path: /reference/sendmediamessage
    method: POST
- name: send_image_message
  endpoint:
    path: /reference/sendmessageimage
    method: POST
- name: send_document_message
  endpoint:
    path: /reference/sendmessagedocument
    method: POST
- name: send_audio_message
  endpoint:
    path: /reference/sendmessageaudio
    method: POST
- name: send_voice_message
  endpoint:
    path: /reference/sendmessagevoice
    method: POST
- name: send_video_message
  endpoint:
    path: /reference/sendmessagevideo
    method: POST
- name: send_gif_message
  endpoint:
    path: /reference/sendmessagegif
    method: POST
- name: send_contact_message
  endpoint:
    path: /reference/sendmessagecontact
    method: POST
- name: send_contact_list_message
  endpoint:
    path: /reference/sendmessagecontactlist
    method: POST
- name: send_location_message
  endpoint:
    path: /reference/sendmessagelocation
    method: POST
- name: send_sticker_message
  endpoint:
    path: /reference/sendmessagesticker
    method: POST
- name: groups
  endpoint:
    path: /whatsapp-groups-api
    method: GET
- name: messages
  endpoint:
    path: /api/messages
    method: POST
    data_selector: data
- name: channels
  endpoint:
    path: /api/channels
    method: GET
    data_selector: data
- name: WhatsApp Number Checker
  endpoint:
    path: /whatsapp-check-numbers
    method: GET
- name: newsletters
  endpoint:
    path: /newsletters
    method: GET
    data_selector: records
- name: messages
  endpoint:
    path: /messages
    method: GET
    data_selector: records
- name: users
  endpoint:
    path: /users
    method: GET
    data_selector: records
- name: send_message_text
  endpoint:
    path: /messages/text
    method: POST
    data_selector: response
    params: {}
- name: list_messages
  endpoint:
    path: /messages/list
    method: GET
    data_selector: response
    params: {}
- name: list_groups
  endpoint:
    path: /groups
    method: GET
    data_selector: response
    params: {}
- name: update_settings
  endpoint:
    path: /settings
    method: PATCH
    data_selector: response
    params: {}
- name: send_message_text
  endpoint:
    path: /messages/text
    method: POST
    data_selector: response
    params: {}
- name: list_messages
  endpoint:
    path: /messages/list
    method: GET
    data_selector: response
    params: {}
- name: list_groups
  endpoint:
    path: /groups
    method: GET
    data_selector: response
    params: {}
- name: update_settings
  endpoint:
    path: /settings
    method: PATCH
    data_selector: response
    params: {}
- name: send_message_text
  endpoint:
    path: /messages/text
    method: POST
    data_selector: response
    params: {}
- name: list_messages
  endpoint:
    path: /messages/list
    method: GET
    data_selector: response
    params: {}
- name: list_groups
  endpoint:
    path: /groups
    method: GET
    data_selector: response
    params: {}
- name: update_settings
  endpoint:
    path: /settings
    method: PATCH
    data_selector: response
    params: {}
- name: messages_text
  endpoint:
    path: /messages/text
    method: POST
    data_selector: null
    params: {}
- name: messages_list
  endpoint:
    path: /messages/list
    method: GET
    data_selector: null
    params: {}
- name: groups
  endpoint:
    path: /groups
    method: GET
    data_selector: null
    params: {}
- name: settings
  endpoint:
    path: /settings
    method: PATCH
    data_selector: null
    params: {}
- name: send_message
  endpoint:
    path: /messages/text
    method: POST
    data_selector: response
    params: {}
- name: list_messages
  endpoint:
    path: /messages/list
    method: GET
    data_selector: response
    params: {}
- name: list_groups
  endpoint:
    path: /groups
    method: GET
    data_selector: response
    params: {}
- name: settings
  endpoint:
    path: /settings
    method: PATCH
    data_selector: response
    params: {}
- name: group
  endpoint:
    path: /getgroups
    method: GET
    data_selector: groups
- name: product
  endpoint:
    path: /getproducts
    method: GET
    data_selector: products
- name: send_message
  endpoint:
    path: /messages/text
    method: POST
    data_selector: response
    params: {}
- name: create_group
  endpoint:
    path: /groups
    method: POST
    data_selector: response
    params: {}
- name: profile_picture
  endpoint:
    path: /get-whatsapp-profile-picture
    method: GET
    data_selector: profile_picture
- name: products
  endpoint:
    path: /catalog/products
    method: GET
- name: newsletters
  endpoint:
    path: /newsletters
    method: GET
    data_selector: records
    params:
      count: '100'
- name: send_message
  endpoint:
    path: /messages/text
    method: POST
    data_selector: null
- name: messages
  endpoint:
    path: /api/messages
    method: POST
    data_selector: result
- name: groups
  endpoint:
    path: /api/groups
    method: POST
    data_selector: result
- name: interactive_message
  endpoint:
    path: /messages/interactive
    method: POST
- name: message
  endpoint:
    path: /sendMessage
    method: POST
    data_selector: data
    params: {}
- name: group
  endpoint:
    path: /groups
    method: GET
    data_selector: data
    params: {}
- name: channel
  endpoint:
    path: /health
    method: GET
- name: users
  endpoint:
    path: /users/login
    method: GET
- name: messages
  endpoint:
    path: /messages/list
    method: GET
- name: contacts
  endpoint:
    path: /contacts
    method: GET
- name: groups
  endpoint:
    path: /groups
    method: GET
- name: stories
  endpoint:
    path: /stories
    method: GET
- name: newsletters
  endpoint:
    path: /newsletters
    method: GET
- name: participants
  endpoint:
    path: ''
    method: POST
    data_selector: response.Content
    params: {}
- name: groups
  endpoint:
    path: /groups
    method: POST
    data_selector: id
    params: {}
- name: messages
  endpoint:
    path: /messages/text
    method: POST
    data_selector: response
    params: {}
- name: groups
  endpoint:
    path: /groups
    method: POST
    data_selector: group
    params: {}
- name: messages
  endpoint:
    path: /messages/text
    method: POST
    data_selector: message
    params: {}
- name: groups
  endpoint:
    path: /groups
    method: POST
    data_selector: id
    params: {}
- name: send_message
  endpoint:
    path: /messages/text
    method: POST
    data_selector: response
    params: {}
- name: groups
  endpoint:
    path: /groups
    method: POST
    data_selector: participants
- name: group_participants
  endpoint:
    path: /groups/{GroupID}/participants
    method: POST
    data_selector: participants
- name: groups
  endpoint:
    path: /groups
    method: GET
    data_selector: groups
- name: group_participants
  endpoint:
    path: /groups/{GroupID}
    method: GET
    data_selector: participants
- name: send_message
  endpoint:
    path: /messages/text
    method: POST
    data_selector: response
    params: {}
- name: webhook
  endpoint:
    path: /hook
    method: POST
    data_selector: messages
    params: {}
- name: messages_text
  endpoint:
    path: /messages/text
    method: POST
    data_selector: null
    params: {}
- name: webhook
  endpoint:
    path: /hook
    method: POST
    data_selector: null
    params: {}
- name: send_message
  endpoint:
    path: /messages/text
    method: POST
    data_selector: message
    params: {}
- name: send_image
  endpoint:
    path: /messages/image
    method: POST
    data_selector: response
- name: send_document
  endpoint:
    path: /messages/document
    method: POST
    data_selector: response
- name: create_group
  endpoint:
    path: /groups
    method: POST
    data_selector: response
- name: send_image
  endpoint:
    path: /messages/image
    method: POST
    data_selector: response
    params: {}
- name: send_document
  endpoint:
    path: /messages/document
    method: POST
    data_selector: response
    params: {}
- name: create_group
  endpoint:
    path: /groups
    method: POST
    data_selector: response
    params: {}
- name: send_text_message
  endpoint:
    path: /messages/text
    method: POST
    data_selector: response
    params: {}
- name: send_message_text
  endpoint:
    path: /messages/text
    method: POST
    data_selector: ''
    params: {}
- name: send_document
  endpoint:
    path: /messages/document
    method: POST
    data_selector: ''
    params: {}
- name: create_group
  endpoint:
    path: /groups
    method: POST
    data_selector: ''
    params: {}
- name: messages
  endpoint:
    path: /messages/text
    method: POST
    data_selector: body
    params: {}
- name: groups
  endpoint:
    path: /groups
    method: GET
    data_selector: body
    params: {}
- name: documents
  endpoint:
    path: /messages/document
    method: POST
    data_selector: body
    params: {}
- name: messages
  endpoint:
    path: /messages/text
    method: POST
    data_selector: messages
    params: {}
- name: groups
  endpoint:
    path: /groups
    method: GET
    data_selector: groups
    params: {}
- name: products
  endpoint:
    path: /business/products/{product_id}
    method: GET
    data_selector: product
    params: {}
- name: group_management
  endpoint:
    path: /groups/manage
    method: POST
    data_selector: data
- name: send_message
  endpoint:
    path: /messages/send
    method: POST
    data_selector: data
- name: get_participants
  endpoint:
    path: /groups/participants
    method: GET
    data_selector: data
- name: check_whatsapp_number
  endpoint:
    path: /api/check
    method: POST
- name: newsletters
  endpoint:
    path: /newsletters
    method: GET
    data_selector: newsletters
- name: media
  endpoint:
    path: /media
    method: GET
    data_selector: media
- name: create_call_event
  endpoint:
    path: /createcallevent
    method: POST
    data_selector: data
- name: get_blacklist
  endpoint:
    path: /getblacklist
    method: GET
    data_selector: data
- name: remove_react_from_message
  endpoint:
    path: /removereactfrommessage
    method: POST
    data_selector: data
- name: messages
  endpoint:
    path: /send-message
    method: POST
    data_selector: data
- name: groups
  endpoint:
    path: /groups
    method: GET
    data_selector: data
- name: send_message
  endpoint:
    path: /api/send-message
    method: POST
    data_selector: data
    params: {}
- name: message
  endpoint:
    path: /sendMessage
    method: POST
    data_selector: data
    params: {}
- name: messages
  endpoint:
    path: /api/messages
    method: POST
    data_selector: data
    params: {}
- name: groups
  endpoint:
    path: /api/groups
    method: GET
    data_selector: data
    params: {}
- name: channels
  endpoint:
    path: /api/channels
    method: GET
    data_selector: data
    params: {}
- name: sending_message
  endpoint:
    path: /help-desk/sending/send-text-message
    method: POST
- name: checking_number
  endpoint:
    path: /help-desk/faq/checking-if-the-number-has-whatsapp
    method: GET
- name: messages
  endpoint:
    path: /api/messages
    method: POST
    data_selector: data
- name: webhooks
  endpoint:
    path: /api/webhooks
    method: POST
    data_selector: data
- name: groups
  endpoint:
    path: /api/groups
    method: GET
    data_selector: groups
- name: products
  endpoint:
    path: /api/products
    method: GET
    data_selector: products
- name: send_message
  endpoint:
    path: /messages/text
    method: POST
    data_selector: response
    params: {}
- name: create_group
  endpoint:
    path: /groups
    method: POST
    data_selector: response
    params: {}
- name: messages
  endpoint:
    path: /api/messages
    method: POST
    data_selector: result
    params: {}
- name: groups
  endpoint:
    path: /api/groups
    method: POST
    data_selector: result
    params: {}
- name: interactive_message
  endpoint:
    path: /messages/interactive
    method: POST
- name: channel
  endpoint:
    path: /health
    method: GET
- name: users
  endpoint:
    path: /users/login
    method: GET
- name: messages
  endpoint:
    path: /messages/list
    method: GET
- name: contacts
  endpoint:
    path: /contacts
    method: GET
- name: message
  endpoint:
    path: /send-message
    method: POST
    data_selector: data
    params: {}
- name: status
  endpoint:
    path: /status
    method: GET
    data_selector: data
    params: {}
- name: WhatsApp API
  endpoint:
    path: /api/v1/messages
    method: POST
    data_selector: data
    params: {}
- name: participants
  endpoint:
    path: ''
    method: POST
    data_selector: Content
    params: {}
- name: groups
  endpoint:
    path: /groups
    method: POST
    data_selector: groups
- name: messages
  endpoint:
    path: /messages/text
    method: POST
    data_selector: messages
- name: groups
  endpoint:
    path: /groups
    method: POST
    data_selector: ''
    params: {}
- name: send_message
  endpoint:
    path: /messages/text
    method: POST
    data_selector: ''
    params: {}
- name: groups
  endpoint:
    path: /groups
    method: POST
    data_selector: response
    params: {}
- name: messages
  endpoint:
    path: /messages/text
    method: POST
    data_selector: response
    params: {}
- name: create_group
  endpoint:
    path: /groups
    method: POST
    data_selector: participants
    params: {}
- name: add_participants
  endpoint:
    path: /groups/{GroupID}/participants
    method: POST
    data_selector: participants
    params: {}
- name: groups
  endpoint:
    path: /groups
    method: GET
    data_selector: groups
- name: group_participants
  endpoint:
    path: /groups/{GroupID}/participants
    method: POST
    data_selector: participants
- name: send_text_message
  endpoint:
    path: /messages/text
    method: POST
    data_selector: response
    params: {}
- name: messages
  endpoint:
    path: /messages/text
    method: POST
    data_selector: response
    params: {}
- name: send_message
  endpoint:
    path: /api/send-message
    method: POST
    data_selector: response
    params: {}
- name: receive_messages
  endpoint:
    path: /api/receive-messages
    method: GET
    data_selector: messages
    params: {}
- name: messages
  endpoint:
    path: /messages/text
    method: POST
    data_selector: response
    params: {}
- name: send_image
  endpoint:
    path: /messages/image
    method: POST
    data_selector: response
    params: {}
- name: send_document
  endpoint:
    path: /messages/document
    method: POST
    data_selector: response
    params: {}
- name: create_group
  endpoint:
    path: /groups
    method: POST
    data_selector: response
    params: {}
- name: send_image
  endpoint:
    path: /messages/image
    method: POST
    data_selector: response
    params: {}
- name: send_document
  endpoint:
    path: /messages/document
    method: POST
    data_selector: response
    params: {}
- name: create_group
  endpoint:
    path: /groups
    method: POST
    data_selector: response
    params: {}
- name: send_text_message
  endpoint:
    path: /messages/text
    method: POST
    data_selector: response
    params: {}
- name: send_text_message
  endpoint:
    path: /messages/text
    method: POST
    data_selector: response
    params: {}
- name: send_document
  endpoint:
    path: /messages/document
    method: POST
    data_selector: response
    params: {}
- name: create_group
  endpoint:
    path: /groups
    method: POST
    data_selector: response
    params: {}
- name: messages
  endpoint:
    path: /messages/text
    method: POST
    data_selector: messages
    params: {}
- name: groups
  endpoint:
    path: /groups
    method: GET
    data_selector: groups
    params:
      count: '3'
- name: products
  endpoint:
    path: /business/products/{product_id}
    method: GET
    data_selector: product
    params: {}
- name: send_text_message
  endpoint:
    path: /messages/text
    method: POST
    data_selector: body
- name: send_document
  endpoint:
    path: /messages/document
    method: POST
    data_selector: body
- name: get_groups
  endpoint:
    path: /groups
    method: GET
    data_selector: body
- name: status
  endpoint:
    path: /whatsapp-status-api
    method: GET
- name: check_whatsapp_number
  endpoint:
    path: /check
    method: POST
    data_selector: data
- name: messages
  endpoint:
    path: /messages/list
    method: GET
    data_selector: records
    params:
      incremental: lastMessage
- name: presences
  endpoint:
    path: /presences
    method: GET
    data_selector: records
    params: {}
- name: send_message
  endpoint:
    path: /send/message
    method: POST
    data_selector: data
    params: {}
- name: get_blacklist
  endpoint:
    path: /get/blacklist
    method: GET
    data_selector: data
    params: {}
- name: create_event
  endpoint:
    path: /create/event
    method: POST
    data_selector: data
    params: {}
- name: create_community
  endpoint:
    path: /createcommunity
    method: POST
- name: get_communities
  endpoint:
    path: /getcommunities
    method: GET
- name: link_group_to_community
  endpoint:
    path: /linkgrouptocommunity
    method: POST
- name: unlink_group_from_community
  endpoint:
    path: /unlinkgroupfromcommunity
    method: POST
- name: send_status
  endpoint:
    path: /createstory
    method: POST
- name: get_group_applications_list
  endpoint:
    path: /getgroupapplicationslist
    method: GET
- name: approve_group_applications_list
  endpoint:
    path: /approvegroupapplicationslist
    method: POST
- name: reject_group_applications_list
  endpoint:
    path: /rejectgroupapplicationslist
    method: POST
- name: send_newsletter_invite
  endpoint:
    path: /sendnewsletterinvite
    method: POST
- name: get_newsletter_by_invite_code
  endpoint:
    path: /getnewsletterbyinvitecode
    method: GET
- name: edit_newsletter
  endpoint:
    path: /editnewsletter
    method: PATCH
- name: get_messages_newsletter
  endpoint:
    path: /getmessagesnewsletter
    method: GET
- name: get_media_files
  endpoint:
    path: /getmediafiles
    method: GET
- name: get_contact_profile
  endpoint:
    path: /users/{ContactID}/profile
    method: GET
- name: get_contact_products
  endpoint:
    path: /business/{ContactID}/products
    method: GET
- name: message
  endpoint:
    path: /send-message
    method: POST
    data_selector: data
    params: {}
- name: status
  endpoint:
    path: /status
    method: GET
    data_selector: data
    params: {}
- name: send_message
  endpoint:
    path: /api/send-message
    method: POST
    data_selector: data
    params: {}
- name: WhatsApp
  endpoint:
    path: /api/whatsapp
    method: GET
    data_selector: data
- name: groups
  endpoint:
    path: /api/groups
    method: GET
    data_selector: groups
- name: products
  endpoint:
    path: /api/products
    method: GET
    data_selector: products
- name: send_message
  endpoint:
    path: /messages/text
    method: POST
    data_selector: response
    params: {}
- name: create_group
  endpoint:
    path: /groups
    method: POST
    data_selector: response
    params: {}
- name: messages
  endpoint:
    path: /messages
    method: POST
    data_selector: result
    params: {}
- name: groups
  endpoint:
    path: /groups
    method: POST
    data_selector: result
    params: {}
- name: interactive_message
  endpoint:
    path: /messages/interactive
    method: POST
    data_selector: ''
    params: {}
- name: Channel
  endpoint:
    path: /health
    method: GET
- name: Users
  endpoint:
    path: /users/login
    method: GET
- name: Messages
  endpoint:
    path: /messages/list
    method: GET
- name: Chats
  endpoint:
    path: /chats
    method: GET
- name: Contacts
  endpoint:
    path: /contacts
    method: GET
- name: Presences
  endpoint:
    path: /presences/me
    method: PUT
- name: Groups
  endpoint:
    path: /groups
    method: GET
- name: Stories
  endpoint:
    path: /stories
    method: GET
- name: Statuses
  endpoint:
    path: /statuses/{MessageID}
    method: GET
- name: Newsletters
  endpoint:
    path: /newsletters
    method: GET
- name: Media
  endpoint:
    path: /media
    method: GET
- name: Business
  endpoint:
    path: /business
    method: GET
- name: Labels
  endpoint:
    path: /labels
    method: GET
- name: Blacklist
  endpoint:
    path: /blacklist
    method: GET
- name: Communities
  endpoint:
    path: /communities
    method: GET
- name: Bots
  endpoint:
    path: /bots
    method: GET
- name: Calls
  endpoint:
    path: /calls
    method: POST
- name: groups
  endpoint:
    path: /whatsapp-groups-api
    method: GET
- name: channels
  endpoint:
    path: /whatsapp-channels
    method: GET
- name: stories
  endpoint:
    path: /whatsapp-status-api
    method: GET
- name: community
  endpoint:
    path: /whatsapp-community-api
    method: GET
- name: whatsapp_bot
  endpoint:
    path: /whatsapp-bot
    method: POST
    data_selector: data
- name: groups
  endpoint:
    path: /groups
    method: POST
    data_selector: null
    params: {}
- name: groups
  endpoint:
    path: /groups
    method: GET
    data_selector: groups
- name: send_message
  endpoint:
    path: /messages/text
    method: POST
    data_selector: message
- name: groups
  endpoint:
    path: /groups
    method: POST
    data_selector: response
    params: {}
- name: groups
  endpoint:
    path: /groups
    method: GET
    data_selector: groups
- name: send_message
  endpoint:
    path: /messages/text
    method: POST
    data_selector: message
    params:
      to: group_id
      body: message_content
- name: groups
  endpoint:
    path: /groups
    method: GET
- name: send_message
  endpoint:
    path: /messages/text
    method: POST
- name: groups
  endpoint:
    path: /groups
    method: POST
    data_selector: body
    params: {}
- name: group_participants
  endpoint:
    path: /groups/{GroupID}/participants
    method: POST
    data_selector: body
    params: {}
- name: send_text_message
  endpoint:
    path: /messages/text
    method: POST
    data_selector: response
    params: {}
- name: text_message
  endpoint:
    path: /messages/text
    method: POST
    data_selector: null
    params: {}
- name: send_text_message
  endpoint:
    path: /messages/text
    method: POST
    data_selector: response
    params: {}
- name: send_image
  endpoint:
    path: /messages/image
    method: POST
    data_selector: ''
    params: {}
- name: send_document
  endpoint:
    path: /messages/document
    method: POST
    data_selector: ''
    params: {}
- name: create_group
  endpoint:
    path: /groups
    method: POST
    data_selector: ''
    params: {}
- name: messages_text
  endpoint:
    path: /messages/text
    method: POST
    data_selector: response
    params: {}
- name: messages_image
  endpoint:
    path: /messages/image
    method: POST
    data_selector: response
    params: {}
- name: messages_document
  endpoint:
    path: /messages/document
    method: POST
    data_selector: response
    params: {}
- name: groups
  endpoint:
    path: /groups
    method: POST
    data_selector: response
    params: {}
- name: send_message
  endpoint:
    path: /messages/text
    method: POST
    data_selector: response
    params: {}
- name: send_document
  endpoint:
    path: /messages/document
    method: POST
    data_selector: response
    params: {}
- name: create_group
  endpoint:
    path: /groups
    method: POST
    data_selector: response
    params: {}
- name: messages
  endpoint:
    path: /messages
    method: POST
    data_selector: messages
- name: groups
  endpoint:
    path: /groups
    method: GET
    data_selector: groups
- name: products
  endpoint:
    path: /business/products
    method: GET
    data_selector: products
- name: send_text_message
  endpoint:
    path: /messages/text
    method: POST
    data_selector: body
- name: send_document
  endpoint:
    path: /messages/document
    method: POST
    data_selector: body
- name: get_groups
  endpoint:
    path: /groups
    method: GET
    data_selector: body
- name: group_creation
  endpoint:
    path: /api/group/create
    method: POST
    data_selector: data
    params: {}
- name: group_management
  endpoint:
    path: /api/group/manage
    method: POST
    data_selector: data
    params: {}
- name: message_sending
  endpoint:
    path: /api/message/send
    method: POST
    data_selector: data
    params: {}
- name: channels
  endpoint:
    path: /whatsapp-channels
    method: POST
    data_selector: channels
- name: messages
  endpoint:
    path: /whatsapp-messages
    method: POST
    data_selector: messages
- name: community_management
  endpoint:
    path: /whatsapp-community-api/manage
    method: POST
- name: group_management
  endpoint:
    path: /whatsapp-community-api/groups
    method: POST
- name: WhatsApp Checker
  endpoint:
    path: /whatsapp-check-numbers
    method: GET
- name: messages
  endpoint:
    path: /messages
    method: POST
    data_selector: data
- name: groups
  endpoint:
    path: /groups
    method: POST
    data_selector: data
- name: Get blacklist
  endpoint:
    path: /getblacklist
    method: GET
- name: Create event
  endpoint:
    path: /createevent
    method: POST
- name: Get contacts
  endpoint:
    path: /contacts
    method: GET
- name: user_profile
  endpoint:
    path: /users/{ContactID}/profile
    method: GET
- name: business_products
  endpoint:
    path: /business/{ContactID}/products
    method: GET
- name: messages_image
  endpoint:
    path: /messages/image
    method: POST
- name: newsletter_subscribe
  endpoint:
    path: /subscribe/newsletter
    method: POST
- name: get_newsletters
  endpoint:
    path: /newsletters
    method: GET
- name: create_newsletter
  endpoint:
    path: /newsletters
    method: POST
- name: send_message_text
  endpoint:
    path: /messages/text
    method: POST
- name: get_health
  endpoint:
    path: /health
    method: GET
- name: get_stories
  endpoint:
    path: /stories
    method: GET
- name: post_stories
  endpoint:
    path: /stories
    method: POST
- name: messages
  endpoint:
    path: /api/messages
    method: POST
    data_selector: data
- name: status
  endpoint:
    path: /api/status
    method: GET
    data_selector: status
- name: channel
  endpoint:
    path: /health
    method: GET
- name: users
  endpoint:
    path: /users/login
    method: GET
- name: messages
  endpoint:
    path: /messages/list
    method: GET
- name: contacts
  endpoint:
    path: /contacts
    method: GET
- name: groups
  endpoint:
    path: /groups
    method: GET
- name: channel
  endpoint:
    path: /health
    method: GET
- name: users
  endpoint:
    path: /users/login
    method: GET
- name: messages
  endpoint:
    path: /messages/list
    method: GET
- name: chats
  endpoint:
    path: /chats
    method: GET
- name: contacts
  endpoint:
    path: /contacts
    method: GET
- name: presences
  endpoint:
    path: /presences/me
    method: PUT
- name: groups
  endpoint:
    path: /groups
    method: GET
- name: stories
  endpoint:
    path: /stories
    method: GET
- name: statuses
  endpoint:
    path: /statuses/{MessageID}
    method: GET
- name: newsletters
  endpoint:
    path: /newsletters
    method: GET
- name: media
  endpoint:
    path: /media
    method: GET
- name: business
  endpoint:
    path: /business
    method: GET
- name: labels
  endpoint:
    path: /labels
    method: GET
- name: blacklist
  endpoint:
    path: /blacklist
    method: GET
- name: communities
  endpoint:
    path: /communities
    method: GET
- name: bots
  endpoint:
    path: /bots
    method: GET
- name: calls
  endpoint:
    path: /calls
    method: POST
- name: contact_list
  endpoint:
    path: /messages/contact_list
    method: POST
    data_selector: SentMessage
- name: poll
  endpoint:
    path: /messages/poll
    method: POST
    data_selector: SentMessage
- name: interactive
  endpoint:
    path: /messages/interactive
    method: POST
    data_selector: SentMessage
- name: sticker
  endpoint:
    path: /messages/sticker
    method: POST
    data_selector: SentMessage
- name: story
  endpoint:
    path: /messages/story
    method: POST
    data_selector: SentMessage
- name: story_audio
  endpoint:
    path: /messages/story/audio
    method: POST
    data_selector: SentMessage
- name: story_media
  endpoint:
    path: /messages/story/media
    method: POST
    data_selector: SentMessage
- name: story_text
  endpoint:
    path: /messages/story/text
    method: POST
    data_selector: SentMessage
- name: media_message
  endpoint:
    path: /messages/media/{MediaMessageType}
    method: POST
    data_selector: SentMessage
- name: get_message
  endpoint:
    path: /messages/{MessageID}
    method: GET
    data_selector: Message
- name: forward_message
  endpoint:
    path: /messages/{MessageID}
    method: POST
    data_selector: SentMessage
- name: sendMessageVideo
  endpoint:
    path: /messages/video
    method: POST
    data_selector: SentMessage
    params: {}
- name: sendMessageShort
  endpoint:
    path: /messages/short
    method: POST
    data_selector: SentMessage
    params: {}
- name: sendMessageGif
  endpoint:
    path: /messages/gif
    method: POST
    data_selector: SentMessage
    params: {}
- name: sendMessageAudio
  endpoint:
    path: /messages/audio
    method: POST
    data_selector: SentMessage
    params: {}
- name: sendMessageVoice
  endpoint:
    path: /messages/voice
    method: POST
    data_selector: SentMessage
    params: {}
- name: sendMessageDocument
  endpoint:
    path: /messages/document
    method: POST
    data_selector: SentMessage
    params: {}
- name: sendMessageLinkPreview
  endpoint:
    path: /messages/link_preview
    method: POST
    data_selector: SentMessage
    params: {}
- name: sendMessageLocation
  endpoint:
    path: /messages/location
    method: POST
    data_selector: SentMessage
    params: {}
- name: sendMessageLiveLocation
  endpoint:
    path: /messages/live_location
    method: POST
    data_selector: SentMessage
    params: {}
- name: sendMessageContact
  endpoint:
    path: /messages/contact
    method: POST
    data_selector: SentMessage
    params: {}
- name: markMessageAsRead
  endpoint:
    path: /messages/{MessageID}/mark
    method: PUT
    data_selector: Success
    params: {}
- name: deleteMessage
  endpoint:
    path: /messages/{MessageID}
    method: DELETE
    data_selector: Success
    params: {}
- name: reactToMessage
  endpoint:
    path: /messages/{MessageID}/reaction
    method: PUT
    data_selector: Success
    params: {}
- name: removeReactFromMessage
  endpoint:
    path: /messages/{MessageID}/reaction
    method: DELETE
    data_selector: Success
    params: {}
- name: starMessage
  endpoint:
    path: /messages/{MessageID}/star
    method: PUT
    data_selector: Success
    params: {}
- name: pinMessage
  endpoint:
    path: /messages/{MessageID}/pin
    method: POST
    data_selector: Success
    params: {}
- name: unpinMessage
  endpoint:
    path: /messages/{MessageID}/pin
    method: DELETE
    data_selector: Success
    params: {}
- name: getChats
  endpoint:
    path: /chats
    method: GET
    data_selector: Chats
    params: {}
- name: getChat
  endpoint:
    path: /chats/{ChatID}
    method: GET
    data_selector: Chat
    params: {}
- name: deleteChat
  endpoint:
    path: /chats/{ChatID}
    method: DELETE
    data_selector: Success
    params: {}
- name: archiveChat
  endpoint:
    path: /chats/{ChatID}
    method: POST
    data_selector: Success
    params: {}
- name: patchChat
  endpoint:
    path: /chats/{ChatID}
    method: PATCH
    data_selector: Success
    params: {}
- name: getContacts
  endpoint:
    path: /contacts
    method: GET
    data_selector: Contacts
    params: {}
- name: checkPhones
  endpoint:
    path: /contacts
    method: POST
    data_selector: CheckContactResponse
    params: {}
- name: contact
  endpoint:
    path: /contacts/{ContactID}
    method: GET
    data_selector: Contact
- name: send_contact
  endpoint:
    path: /contacts/{ContactID}
    method: POST
    data_selector: SentMessage
- name: check_exist
  endpoint:
    path: /contacts/{ContactID}
    method: HEAD
    data_selector: Success
- name: get_contact_profile
  endpoint:
    path: /contacts/{ContactID}/profile
    method: GET
    data_selector: UserProfile
- name: get_lid_by_ids
  endpoint:
    path: /contacts/lids
    method: GET
    data_selector: Lids
- name: get_lid_by_id
  endpoint:
    path: /contacts/lids/{ContactID}
    method: GET
    data_selector: Lid
- name: send_me_presence
  endpoint:
    path: /presences/me
    method: PUT
    data_selector: CheckContactResponse
- name: get_presence
  endpoint:
    path: /presences/{EntryID}
    method: GET
    data_selector: Presence
- name: get_groups
  endpoint:
    path: /groups
    method: GET
    data_selector: Groups
- name: newsletters
  endpoint:
    path: /newsletters
    method: POST
- name: media
  endpoint:
    path: /media
    method: POST
- name: blacklist
  endpoint:
    path: /blacklist
    method: GET
- name: business
  endpoint:
    path: /business
    method: GET
- name: products
  endpoint:
    path: /business/products
    method: GET
- name: orders
  endpoint:
    path: /business/orders
    method: POST
- name: remove_group_participant
  endpoint:
    path: /groups/{GroupID}/participants
    method: delete
    data_selector: participants
    params: {}
- name: get_group_icon
  endpoint:
    path: /groups/{GroupID}/icon
    method: get
    data_selector: icon
    params: {}
- name: set_group_icon
  endpoint:
    path: /groups/{GroupID}/icon
    method: put
    data_selector: icon
    params: {}
- name: delete_group_icon
  endpoint:
    path: /groups/{GroupID}/icon
    method: delete
    data_selector: icon
    params: {}
- name: demote_group_admin
  endpoint:
    path: /groups/{GroupID}/admins
    method: delete
    data_selector: admins
    params: {}
- name: promote_to_group_admin
  endpoint:
    path: /groups/{GroupID}/admins
    method: patch
    data_selector: admins
    params: {}
- name: send_group_invite
  endpoint:
    path: /groups/link/{InviteCode}
    method: post
    data_selector: invite
    params: {}
- name: get_group_applications_list
  endpoint:
    path: /groups/{GroupID}/applications
    method: get
    data_selector: applications
    params: {}
- name: approve_group_applications_list
  endpoint:
    path: /groups/{GroupID}/applications
    method: post
    data_selector: applications
    params: {}
- name: reject_group_applications_list
  endpoint:
    path: /groups/{GroupID}/applications
    method: delete
    data_selector: applications
    params: {}
- name: get_stories
  endpoint:
    path: /stories
    method: get
    data_selector: stories
    params: {}
- name: create_story
  endpoint:
    path: /stories
    method: post
    data_selector: story
    params: {}
- name: create_story_text
  endpoint:
    path: /stories/send/text
    method: post
    data_selector: text_story
    params: {}
- name: create_story_media
  endpoint:
    path: /stories/send/media
    method: post
    data_selector: media_story
    params: {}
- name: create_story_audio
  endpoint:
    path: /stories/send/audio
    method: post
    data_selector: audio_story
    params: {}
- name: stories
  endpoint:
    path: /stories/{MessageID}
    method: GET
    data_selector: Message
    params: {}
- name: statuses
  endpoint:
    path: /statuses/{MessageID}
    method: GET
    data_selector: Statuses
    params: {}
- name: newsletters
  endpoint:
    path: /newsletters
    method: GET
    data_selector: Newsletters
    params: {}
- name: find_newsletters
  endpoint:
    path: /newsletters/find
    method: GET
    data_selector: NewslettersListPaged
    params: {}
- name: recommended_newsletters
  endpoint:
    path: /newsletters/recommended
    method: GET
    data_selector: NewslettersListPaged
    params: {}
- name: newsletter_info
  endpoint:
    path: /newsletters/{NewsletterID}
    method: GET
    data_selector: Messages
    params: {}
- name: newsletter_messages
  endpoint:
    path: /newsletters/{NewsletterID}/messages
    method: GET
    data_selector: Messages
    params: {}
- name: cart
  endpoint:
    path: /business/cart
    method: PUT
    data_selector: BusinessCart
    params: {}
- name: cart_enabled
  endpoint:
    path: /business/cart/enabled
    method: POST
    data_selector: Success
    params: {}
- name: catalog_by_id
  endpoint:
    path: /business/catalogs/{ContactID}
    method: POST
    data_selector: SentMessage
    params: {}
- name: collections
  endpoint:
    path: /business/collections
    method: GET
    data_selector: BusinessCollectionList
    params: {}
- name: categories
  endpoint:
    path: /business/categories
    method: GET
    data_selector: BusinessCategories
    params: {}
- name: verified_names
  endpoint:
    path: /business/verified_names
    method: GET
    data_selector: BusinessVerifiedNameDetails
    params: {}
- name: limits
  endpoint:
    path: /limits
    method: GET
    data_selector: Limits
    params: {}
- name: communities
  endpoint:
    path: /communities
    method: GET
    data_selector: CommunityList
    params: {}
- name: ContactID
  endpoint:
    path: /ContactID
    method: GET
    data_selector: ''
    params:
      required: true
- name: ContactIDList
  endpoint:
    path: /ContactIDList
    method: GET
    data_selector: ''
    params:
      required: true
- name: EntryID
  endpoint:
    path: /EntryID
    method: GET
    data_selector: ''
    params:
      required: true
- name: GroupID
  endpoint:
    path: /GroupID
    method: GET
    data_selector: ''
    params:
      required: true
- name: InviteCode
  endpoint:
    path: /InviteCode
    method: GET
    data_selector: ''
    params:
      required: true
- name: NewsletterID
  endpoint:
    path: /NewsletterID
    method: GET
    data_selector: ''
    params:
      required: true
- name: NewsletterInviteCode
  endpoint:
    path: /NewsletterInviteCode
    method: GET
    data_selector: ''
    params:
      required: true
- name: MediaID
  endpoint:
    path: /MediaID
    method: GET
    data_selector: ''
    params:
      required: true
- name: ProductID
  endpoint:
    path: /ProductID
    method: GET
    data_selector: ''
    params:
      required: true
- name: OrderID
  endpoint:
    path: /OrderID
    method: GET
    data_selector: ''
    params:
      required: true
- name: CollectionID
  endpoint:
    path: /CollectionID
    method: GET
    data_selector: ''
    params:
      required: true
- name: UserID
  endpoint:
    path: /UserID
    method: GET
    data_selector: ''
    params:
      required: true
- name: LabelID
  endpoint:
    path: /LabelID
    method: GET
    data_selector: ''
    params:
      required: true
- name: AssociationID
  endpoint:
    path: /AssociationID
    method: GET
    data_selector: ''
    params:
      required: true
- name: CommunityID
  endpoint:
    path: /CommunityID
    method: GET
    data_selector: ''
    params:
      required: true
- name: CallID
  endpoint:
    path: /CallID
    method: GET
    data_selector: ''
    params:
      required: true
- name: revoke_community_invite
  endpoint:
    path: /communities/{CommunityID}/link
    method: DELETE
    data_selector: Success
    params: {}
- name: link_group_to_community
  endpoint:
    path: /communities/{CommunityID}/{GroupID}
    method: PUT
    data_selector: Success
    params: {}
- name: unlink_group_from_community
  endpoint:
    path: /communities/{CommunityID}/{GroupID}
    method: DELETE
    data_selector: Success
    params: {}
- name: join_in_community_group
  endpoint:
    path: /communities/{CommunityID}/{GroupID}/join
    method: POST
    data_selector: Success
    params: {}
- name: change_community_settings
  endpoint:
    path: /communities/{CommunityID}/settings
    method: PATCH
    data_selector: Success
    params: {}
- name: add_community_participant
  endpoint:
    path: /communities/{CommunityID}/participants
    method: POST
    data_selector: ListParticipants
    params: {}
- name: remove_community_participant
  endpoint:
    path: /communities/{CommunityID}/participants
    method: DELETE
    data_selector: ListParticipants
    params: {}
- name: promote_community_participant
  endpoint:
    path: /communities/{CommunityID}/admins
    method: PATCH
    data_selector: ListParticipants
    params: {}
- name: demote_community_participant
  endpoint:
    path: /communities/{CommunityID}/admins
    method: DELETE
    data_selector: ListParticipants
    params: {}
- name: get_community_subgroups
  endpoint:
    path: /communities/{CommunityID}/subgroups
    method: GET
    data_selector: CommunitySubGroups
    params: {}
- name: create_event
  endpoint:
    path: /communities/event
    method: POST
    data_selector: Success
    params: {}
- name: create_group_in_community
  endpoint:
    path: /communities/{CommunityID}/createGroup
    method: POST
    data_selector: Group
    params: {}
- name: create_call_event
  endpoint:
    path: /calls
    method: POST
    data_selector: CreateCallEventResponse
    params: {}
- name: reject_call
  endpoint:
    path: /calls/{CallID}
    method: DELETE
    data_selector: Success
    params: {}
- name: create_group_call_link
  endpoint:
    path: /calls/group_link
    method: POST
    data_selector: CreateGroupCallLinkResponse
    params: {}
- name: get_bots
  endpoint:
    path: /bots
    method: GET
    data_selector: BotList
    params: {}
- name: groups_updates
  endpoint:
    path: /groups/updates
    method: POST
    data_selector: updates
    params: {}
- name: presences
  endpoint:
    path: /presences
    method: POST
    data_selector: presences
    params: {}
- name: labels
  endpoint:
    path: /labels
    method: POST
    data_selector: labels
    params: {}
- name: labels_removed
  endpoint:
    path: /labels/removed
    method: DELETE
    data_selector: labels_removed
    params: {}
- name: calls
  endpoint:
    path: /calls
    method: POST
    data_selector: calls
    params: {}
- name: user
  endpoint:
    path: /user
    method: GET
    data_selector: user
    params: {}
- name: Event
  endpoint:
    path: /events
    method: POST
    data_selector: events
- name: CheckContact
  endpoint:
    path: /check_contact
    method: POST
    data_selector: contact_check
- name: BusinessCart
  endpoint:
    path: /business/cart
    method: GET
    data_selector: products
- name: BusinessCategoriesResponse
  endpoint:
    path: /business/categories
    method: GET
    data_selector: categories
- name: BusinessCollection
  endpoint:
    path: /business/collections
    method: GET
    data_selector: collections
- name: BusinessOrder
  endpoint:
    path: /business/orders
    method: GET
    data_selector: items
- name: BusinessProfile
  endpoint:
    path: /business/profile
    method: GET
    data_selector: profile
- name: BusinessVerifiedName
  endpoint:
    path: /business/verified_name
    method: GET
    data_selector: verifiedName
- name: ChatsList
  endpoint:
    path: /chats/list
    method: GET
    data_selector: chats
- name: Contact
  endpoint:
    path: /contacts
    method: GET
    data_selector: contacts
- name: Group
  endpoint:
    path: /groups
    method: GET
    data_selector: groups
- name: MediaFilesList
  endpoint:
    path: /media/files
    method: GET
    data_selector: files
- name: ProductCreate
  endpoint:
    method: POST
    data_selector: product
- name: SenderProductFromCatalog
  endpoint:
    method: POST
    data_selector: message
- name: BusinessOrderCreate
  endpoint:
    method: POST
    data_selector: order
- name: BusinessCartRefresh
  endpoint:
    method: POST
    data_selector: cart
- name: CartToggle
  endpoint:
    method: POST
    data_selector: toggle
- name: SenderCatalogByID
  endpoint:
    method: POST
    data_selector: catalog
- name: BusinessCollectionCreate
  endpoint:
    method: POST
    data_selector: collection
- name: CreateLabel
  endpoint:
    method: POST
    data_selector: label
- name: CreateCommunityRequest
  endpoint:
    method: POST
    data_selector: community
- name: CreateEventRequest
  endpoint:
    method: POST
    data_selector: event
- name: CreateCallEventRequest
  endpoint:
    method: POST
    data_selector: call_event
- name: CreateGroupCallLinkRequest
  endpoint:
    method: POST
    data_selector: group_call_link
- name: MessageContentProduct
  endpoint:
    path: /messages/content/product
    method: GET
    data_selector: product
    params: {}
- name: MessageAction
  endpoint:
    path: /messages/action
    method: POST
    data_selector: action
    params: {}
- name: get_groups
  endpoint:
    path: /getgroups
    method: GET
- name: get_products
  endpoint:
    path: /getproducts
    method: GET
- name: send_message
  endpoint:
    path: /messages/text
    method: POST
    data_selector: response
    params: {}
- name: create_group
  endpoint:
    path: /groups
    method: POST
    data_selector: response
    params: {}
- name: user_data
  endpoint:
    path: /api/v1/user/data
    method: GET
    data_selector: records
    params: {}
- name: interactive_messages
  endpoint:
    path: /messages/interactive
    method: POST
notes:
- API works stably and does not crash during updates
- Easily scalable solution
- No need to keep the phone on
- Unlimited request fulfillment
- Webhook URL must be specified for webhooks.
- 'The plan for integration development is not limited in functionality, but it has
  its restrictions: No more than 5 conversations per month, No more than 150 messages
  per day, No more than 30 checks for WhatsApp accounts per day, No more than 1,000
  API calls per month.'
- Check the API limit to avoid throttling.
- Ensure to handle error responses gracefully.
- Requires setup of connected app in Whapi.Cloud
- Webhook technology allows incoming notifications to be delivered directly to your
  server.
- Every time the connected number receives an interaction, we will make a request
  with the POST/PUT/PATCH/DELETE method.
- Automate WhatsApp group creation, add and delete members, send messages to the group,
  receive notifications about any events in the group
- You don't need to migrate your number. Work with any number you are already using.
- 5-day Trial access without payment.
- 5-day Trial access without payment
- Uses OAuth2 with refresh token — requires setup of connected app in whapi
- Some objects like Contact may return nulls in deeply nested fields
- No restrictions and limits
- Without moderation and payment for each conversation
- We will always help you if you have any difficulties
- Ejecuciones de solicitudes ilimitadas
- No es necesario tener el teléfono encendido
- API is designed to be easy to use across programming languages.
- Não é necessário deixar o telefone ligado
- Execução ilimitada de pedidos
- Webhook URL should be provided for setting up webhooks.
- API-ul nostru cu suport pentru mai multe dispozitive înseamnă că nu trebuie să ții
  telefonul pornit sau online.
- Webhook URL must be specified in the settings update.
- Не работает на российских номерах.
- Безлимитное выполнение запросов.
- 5 günlük ücretsiz deneme, ödeme gerekmez
- Telefonunuzu açık tutmanıza gerek yok
- Uses OAuth2 — requires setup of connected app in api
- Uses API Token for authentication, obtained during registration
- Webhook URL must end with '/hook'
- You will receive a free channel with some limitations. This will be sufficient for
  testing your development.
- The cell phone user is not made aware of this!
- If you have just bought and registered a new number in WhatsApp, do not connect
  the number immediately. Wait a day or a little more.
- Our partner program is designed for a deeper integration with our service.
- You can continue using the number as usual, including making calls and messaging,
  while simultaneously using the API.
- All dialogs and messages are absolutely free. You only pay a monthly subscription
  for the service.
- 'Our API allows you to check and instantly know message statuses: sent, delivered,
  read.'
- Requires registration and WhatsApp number linked to the API channel
- Includes 30 free daily checks on trial
- Uses OAuth2 with refresh token — requires setup of connected app in api
- 'Channel ID format: ''120363171744447809@newsletter'''
- Work with any number you are already using
- You can now link a device using your primary account phone number and a one-time
  code.
- Always include country code when sending messages.
- Media URLs must be publicly accessible.
- The use of button functionality in messages is subject to additional terms specific
  to Button Functionality on WhatsApp with Whapi.Cloud API.
- Data retrieval and management through the API Token are under user responsibility.
- Whapi.Cloud is not liable for any modifications, suspensions, or removals of button
  functionality by Meta.
- Whapi.Cloud does not store any of the Google user data accessed through DialogFlow.
- Whapi.Cloud does not share, transfer, or disclose any Google user data to third
  parties.
- API funciona de manera estable y sin interrupciones durante las actualizaciones
- Solución escalable fácilmente
- No se requiere tarjeta bancaria
- No more than 5 conversations per month
- No more than 150 messages per day
- No more than 30 WhatsApp account checks per day
- No more than 1,000 API calls per month
- Usa el token como un encabezado de autorización Bearer.
- Prueba gratuita para tus clientes
- A token is required for authentication.
- No agregues usuarios a grupos sin su consentimiento. Respeta la privacidad y evita
  invitaciones no solicitadas.
- Evita enviar spam o contenido no deseado, ya que tu cuenta puede ser marcada o bloqueada
  permanentemente.
- No depender de una sola cuenta admin para gestionar un grupo de WhatsApp vía API.
- A minimum of one participant is required to create a group.
- 'Recomendamos imitar el comportamiento humano: no crees decenas de grupos ni envíes
  muchos mensajes por segundo.'
- El registro es sencillo, no requiere tarjeta de crédito, y obtendrá 5 días de acceso
  completo a la API con limitaciones menores.
- Token must be passed in the Authorization header as Bearer Token.
- The API token is sent in the headers as Bearer Token.
- Requires Bearer Token for authorization
- Webhook URL needs to be registered to receive messages
- Es importante recordar que muchos problemas pueden prevenirse revisando cuidadosamente
  la configuración y la lógica de tu chatbot antes del lanzamiento.
- Requires setup of API token for authentication
- Webhook setup is optional for incoming messages
- El registro es sencillo y no requiere información de tarjeta de crédito.
- Después de los 5 días, puedes usar el Sandbox para continuar desarrollando y probando
  tu integración.
- Ensure the recipient's phone number is in international format, without spaces or
  special characters.
- Webhook Link to your server is at {server link}/hook
- Don't use 443 port for the bot's port.
- No es necesario migrar el número. Trabaja con cualquier número que ya estés utilizando
- Acceso de prueba de 5 días sin pago
- Autorización por número de teléfono permite registrar y conectar números de WhatsApp
  sin un teléfono.
- API designed for high performance interaction with WhatsApp.
- Automatización de WhatsApp sin código
- Sin restricciones ni límites
- Sin moderación y pago por cada conversación
- Inicio rápido sin moderación te da acceso completo e ilimitado para recibir y enviar
  mensajes
- API de nível corporativo
- API functionează stabil și fără întreruperi în timpul actualizărilor.
- Soluție ușor de scalat.
- Бесплатный тест на 5 дней
- API, güncellemeler sırasında stabil ve kesintisiz çalışır
- Kolayca ölçeklenebilir çözüm
- Revisa tu plan tarifario en Whapi.Cloud. Si estás usando el modo de prueba o el
  plan 'Sandbox', la interacción está limitada a una cierta cantidad de chats por
  mes (actualmente hasta 5 chats). En tal caso, el bot no podrá procesar mensajes
  en el sexto chat y siguientes.
- Es importante recordar que muchos problemas pueden prevenirse revisando cuidadosamente
  la configuración y la lógica de tu chatbot antes del lanzamiento. Mantener tu código
  actualizado y prestar atención a los detalles de las configuraciones ayudará a evitar
  la mayoría de los errores comunes.
- El acceso al API tiene un precio fijo, sin cargos por mensajes enviados.
- El registro es rápido y gratuito, y no se requiere información de tarjeta de crédito.
- Después de crear una cuenta, tendrá acceso a un canal de prueba con límites pequeños
  durante 5 días.
- Ensure that the recipient's phone number is in international format without symbols
  (+).
- The bot cannot respond to messages sent from the same number.
- La integración externa es bastante compleja.
- Los diálogos y mensajes son absolutamente gratuitos.
- WhatsApp limits the categories of businesses that can use the WhatsApp Business
  API.
- Siempre incluya el código de país en los números de teléfono.
- Las URLs de medios deben ser accesibles públicamente.
- Uses OAuth2 with refresh token — requires setup of connected app in Whapi.Cloud
- Whapi.Cloud no es responsable de ninguna modificación, suspensión o eliminación
  de la funcionalidad de botón por parte de Meta.
- Los clientes que elijan activar y utilizar la funcionalidad de botón en WhatsApp
  deben ser conscientes de que Meta puede modificar, limitar o terminar el uso de
  esta funcionalidad sin previo aviso.
- API com suporte para múltiplos dispositivos
- A API funciona de forma estável e sem interrupções durante as atualizações
- Faturado mensalmente
- Faturado anualmente
- Plano Sandbox oferece até 5 conversas por mês
- Testes gratuitos disponíveis para clientes
- Suporte rápido e responsivo
- API is essential for creating WhatsApp bots, connecting the bot to the platform.
- Use any active WhatsApp number for API integration.
- Não adicione usuários a grupos sem consentimento. Respeite a privacidade e evite
  convites não solicitados.
- Evite enviar spam ou conteúdo indesejado, pois sua conta pode ser marcada ou banida
  permanentemente.
- 'Embora não haja limites rígidos, recomendamos imitar o comportamento humano: não
  crie dezenas de grupos nem envie muitas mensagens por segundo. Adicione pausas e
  use atrasos razoáveis entre ações ao automatizar tarefas em grupo.'
- Uma prática fundamental é não depender de uma única conta admin para gerenciar um
  grupo do WhatsApp via API.
- Para evitar isso, sempre adicione um administrador secundário a cada grupo automatizado.
- Não adicione usuários a grupos sem consentimento.
- Evite enviar spam ou conteúdo indesejado.
- Webhook URL must be configured to receive messages.
- Authorization token should be included in header.
- Token da API é necessário para autenticar solicitações.
- O token é enviado nos cabeçalhos das solicitações como um Bearer Token.
- Token must be transmitted in the authorization header as a Bearer token.
- Verifique seu plano tarifário na Whapi.Cloud. Se você estiver usando o modo de teste
  ou o plano 'Sandbox', a interação é limitada a um certo número de chats por mês.
- Requires API_TOKEN and API_URL in environment variables.
- O cadastro é simples e não requer informações de cartão de crédito.
- Após 5 dias, você pode usar o Sandbox para continuar desenvolvendo e testando sua
  integração.
- Token deve ser passado no cabeçalho de autorização (Bearer).
- Don't use port 443 for the webhook.
- Webhook URL must be accessible over the internet.
- Token is used for authenticating API requests and should be added as a Bearer token
  in headers.
- Acesso experimental de 5 dias sem pagamento
- Não é necessário migrar o número
- Não é necessário migrar o número. Trabalhe com qualquer número que já esteja usando
- Usuário do celular não é notificado da verificação.
- Introduced the ability to display typing states in the presences method
- The API requires setup of connected app for OAuth2.
- Ensure that the correct scopes are provided during authorization.
- Funcionalidade de comunidades em teste Beta.
- A configuração de cabeçalhos personalizados no webhook foi implementada.
- Automatize a operação da sua loja diretamente no WhatsApp! Receba pedidos pelo mensageiro,
  encaminhe-os para seu CRM, envie os status dos pedidos de volta para o WhatsApp
- Suporte técnico & guias disponíveis
- Automatize a criação de grupos do WhatsApp, adicione e exclua membros, envie mensagens
  para o grupo e receba notificações sobre quaisquer eventos no grupo.
- Verifique cuidadosamente a configuração e a lógica do seu chatbot antes do lançamento.
- Atualizar regularmente seu código ajudará a evitar a maioria dos erros típicos.
- Acesso gratuito à API por 5 dias
- O identificador do grupo só pode ser obtido por meio da API.
- O registro é rápido e gratuito, e não são necessários dados do cartão de crédito.
- Após criar a conta, você terá acesso a um canal de teste com pequenos limites de
  5 dias.
- Todos os diálogos e mensagens são absolutamente gratuitos.
- Você paga apenas uma assinatura mensal pelo serviço.
- Não existem restrições de categorias de negócios no Whapi.Cloud.
- Recomendamos evitar a distribuição de spam e aderir a regras que evitem o bloqueio
  do seu número pelo WhatsApp.
- Always include the country code in phone numbers.
- O uso da funcionalidade de botão em mensagens está sujeito a termos adicionais específicos
  para Funcionalidade de Botão no WhatsApp com a API Whapi.Cloud.
- We do not store or retain any data retrieved via the API Token
- The Meta may modify or discontinue the button functionality at any time without
  notice.
- API funcționează stabil și fără întreruperi în timpul actualizărilor
- Soluție ușor de scalat
- Un instrument puternic pentru creșterea productivității generale, a vânzărilor și
  a satisfacției clienților.
- Offers a trial demo of 5 days for clients
- Easy to set up for beginners with step-by-step guides.
- Token API must be included as Bearer token in the header for authentication.
- Token API must be included in the header as Bearer token.
- Nu adăuga utilizatori în grupuri fără consimțământul lor. Respectă confidențialitatea
  și evită invitațiile nesolicitate
- Evita trimiterea de spam sau conținut nedorit, deoarece contul tău poate fi marcat
  sau blocat permanent
- 'Deși nu există limite stricte, recomandăm să imiți comportamentul uman: nu crea
  zeci de grupuri și nu trimite multe mesaje pe secundă. Adaugă pauze și folosește
  întârzieri rezonabile între acțiuni la automatizarea sarcinilor de grup'
- O bună practică este să nu te bazezi pe un singur cont admin pentru gestionarea
  unui grup WhatsApp prin API
- Adaugă întotdeauna un administrator secundar în fiecare grup automatizat
- API token must be included as Bearer token in requests
- Ensure that numbers are entered in international format without the plus sign.
- Respectă confidențialitatea și evită invitațiile nesolicitate
- Evitați trimiterea de spam sau conținut nedorit, deoarece contul tău poate fi marcat
  sau blocat permanent
- Adaugă întotdeauna un administrator secundar în fiecare grup automatizat pentru
  a asigura accesul și controlul
- Înregistrarea este simplă, nu necesită un card de credit și veți primi 5 zile de
  acces complet la API.
- Token must be sent in the Authorization header as Bearer Token.
- Tokenul trebuie transmis în antetul de autorizare (Bearer)
- Token must be sent in the Authorization header as Bearer token.
- Requires a valid API token for authentication.
- Ensure the webhook URL is publicly accessible and correctly set up.
- The bot can respond to specific commands prefixed with /ai.
- Verificați-vă planul tarifar pe Whapi.Cloud. Dacă utilizați modul de încercare sau
  tariful 'Sandbox', interacțiunea este limitată la un anumit număr de chat-uri pe
  lună.
- Înregistrarea este simplă și nu necesită informații despre cardul de credit.
- După 5 zile, puteți utiliza Sandbox pentru a continua dezvoltarea și testarea integrării.
- Webhook URL must be configured in the channel settings.
- Ensure the recipient's phone number is in international format.
- Token must be added to request headers as Bearer Token or as a request parameter.
- Acces de încercare de 5 zile fără plată
- Supports sending and receiving media files including images, videos, and documents.
- Automated group management features available.
- Extindeți-vă capacitățile de comunicare! Trimiteți automat mesaje către canalul
  WhatsApp.
- Automatizează gestionarea WhatsApp Status și îmbunătățește-ți comunicarea.
- Some endpoints may have rate limits
- Suport adăugat pentru trimiterea de media cu butoane — video sau imaginea transmisă
  prin parametrul media înlocuiește header (dacă este setat); este suportat doar pentru
  tipurile de butoane Quick_reply, Call, Otp și Url.
- Authorization by phone number is supported
- Webhooks are guaranteed to resend notifications if there are issues on your side
- Fără restricții și limite
- Fără moderare și plată pentru fiecare conversație
- Nu este necesar un card de credit
- Fără taxe per mesaj & fără aprobat
- Un instrument puternic pentru creșterea productivității generale, a vânzărilor și
  a satisfacției clienților, fără a epuiza buzunarele și procesul obositor de aprobat
  oficial de la WhatsApp.
- Ensure proper authentication setup for API access.
- Requires setup of connected app in WhatsApp API.
- Acces gratuit la API timp de 5 zile
- Ensure that the token and webhook address are correctly specified in config.js.
- The group identifier can only be obtained through the API.
- Înregistrarea este rapidă și gratuită, iar datele cardului de credit nu sunt necesare.
- Tokenul este utilizat pentru autentificarea tuturor cererilor API.
- Webhook requires a valid URL to receive incoming messages.
- Use Ngrok for local testing to expose your server.
- Nu există restricții în Whapi.Cloud pentru trimiterea mesajelor.
- Este recomandat să evitați distribuirea spamului.
- Alegând Whapi.Cloud, obțineți acces instant la API.
- Includeți întotdeauna codul de țară (de ex., '13016789891' pentru un număr din SUA)
- Nu folosiți caractere speciale sau spații
- URL-uri Media trebuie să fie accesibile public
- Whapi.Cloud is an independent tool not supported by WhatsApp or Meta.
- Whapi.Cloud does not bear any responsibility for any changes, suspension, or removal
  of button functionality by Meta.
errors:
- '400 Bad Request: Check the request parameters.'
- '401 Unauthorized: Invalid or missing token.'
- '404 Not Found: The requested resource does not exist.'
- '400 Bad Request: Invalid parameters were provided.'
- '401 Unauthorized: Access token is missing or invalid.'
- '429 Too Many Requests: Rate limit exceeded.'
- '429 Too Many Requests: Throttle API calls or reduce frequency'
- 'REQUEST_LIMIT_EXCEEDED: Throttle API calls or reduce frequency'
- 'QUERY_TIMEOUT: Break down filters or add selectivity'
- '401 Unauthorized: Recheck OAuth scopes or token expiration'
- 'cURL Error #: Check your request for syntax issues.'
- '400 Bad Request: Check the request body for formatting issues.'
- '401 Unauthorized: Ensure the token is valid.'
- '404 Not Found: Verify the endpoint path.'
- '400 Bad Request: Check request format and parameters.'
- '401 Unauthorized: Ensure token is valid.'
- '404 Not Found: Verify endpoint path.'
- '403 Forbidden: Check your API token or permissions'
- '404 Not Found: Ensure the endpoint is correct'
- '500 Internal Server Error: Try again later or contact support'
- 'Too many messages in quick succession: Avoid sending too many messages.'
- 'Invalid phone number format: Ensure the number includes the country code.'
- '401 Unauthorized: Check API token validity'
- '404 Not Found: Verify endpoint URL'
- '500 Internal Server Error: Try again later'
- 'Error: Ensure you are sending messages to the number where the bot is running from
  another phone.'
- 'Error: Verify webhook functionality and correct URL path.'
- '404 Not Found: Verify endpoint paths and parameters.'
- '401 Unauthorized: Check your authentication credentials.'
- '400 Bad Request: Check request parameters.'
- '400 Bad Request: Kontrol etmeniz gereken bir sorun var.'
- '401 Unauthorized: Geçersiz veya eksik kimlik bilgileri.'
- '404 Not Found: İsteğinize uygun bir kaynak bulunamadı.'
- 'Error: Evite enviar demasiados mensajes en rápida sucesión.'
- 'Error: Implemente un manejo adecuado de errores.'
- '429 Too Many Requests: Rate limit exceeded'
- 'PERMISSION_DENIED: Check admin status or number recognition.'
- 'MESSAGE_NOT_DELIVERED: Verify group ID and message format.'
- 'Permissão negada: Seu número não é reconhecido como admin do grupo.'
- 'Mensagem não entregue: Verifique o ID do grupo — IDs incorretos ou expirados causarão
  falha na entrega.'
- 'PERMISSION_DENIED: Seu número não é reconhecido como admin do grupo.'
- 'MESSAGE_NOT_DELIVERED: Verifique o ID do grupo.'
- '400 Bad Request: Check the payload structure.'
- '401 Unauthorized: Invalid or missing API token.'
- '404 Not Found: Ensure the endpoint is correct.'
- '400 Bad Request: Verifique a formatação dos dados enviados.'
- '401 Unauthorized: Recheck API token.'
- '200 OK: Mensagem enviada com sucesso.'
- '401 Unauthorized: Check API token and permissions.'
- '403 Forbidden: Ensure the request parameters are correct and within limits.'
- '404 Not Found: Verify the endpoint URL and resource availability.'
- '401 Unauthorized: Recheck OAuth token.'
- '500 Internal Server Error: Retry the request later.'
- '400 Bad Request: Verifique os parâmetros da requisição.'
- '401 Unauthorized: Recheck OAuth scopes or token expiration.'
- Avoid sending too many messages in quick succession.
- Implement proper error handling.
- '401 Unauthorized: Check your OAuth token.'
- '400 Bad Request: Ensure all required parameters are provided.'
- '401 Unauthorized: Check API token and authorization header.'
- 'PERMISSION_DENIED: You must be an admin of the group to add members.'
- 'MESSAGE_NOT_DELIVERED: Check group ID or content format.'
- 'Permisiune refuzată: Numărul tău nu este recunoscut ca admin al grupului'
- '401 Unauthorized: Recheck API token validity'
- 'Mesaj nedelivrat: Verifică ID-ul grupului — ID-uri incorecte sau expirate vor duce
  la eșecul livrării'
- '401 Unauthorized: Recheck API token or authorization method.'
- '401 Unauthorized: Check API_TOKEN or API_URL.'
- '400 Bad Request: Ensure the payload is correctly formatted.'
- '400 Bad Request: Verify request parameters'
- '401 Unauthorized: Ensure valid authentication token.'
- '403 Forbidden: Check permissions for the requested resource'
- '404 Not Found: Verify the endpoint path'
- '404: Resursa nu a fost găsită'
- '500: Eroare internă a serverului'
- '400: Wrong request parameters'
- '401: Need channel authorization for send message'
- '402: Trial version limit exceeded'
- '403: It is forbidden to send to this group/recipient'
- '404: Media with specified id not found'
- '413: Request media too large'
- '415: Unsupported media type'
- '429: Too many requests'
- '500: Error'
- '401: Need channel authorization'
- '404: Specified message not found'
- '500: Internal Server Error'
- '404: Specified contact not found'
- '500: Internal server error'
- '404: Specified resource not found'
- '500: Server error'
- '401: Need channel authorization for create newsletter'
- '404: Specified newsletter not found'
- '403: Not permission'
- '404: Community not found'
- '401 Unauthorized: Ensure valid authentication credentials.'
- '404 Not Found: Verify endpoint URLs.'
- '401 Unauthorized: Recheck API token or permissions'
- '400 Bad Request: Ensure correct JSON format in the request body'
- Evitați trimiterea prea multor mesaje într-un timp scurt
- Implementați o gestionare adecvată a erorilor
- 'INVALID_TOKEN: Refresh the token or reauthenticate'
- 'ACCESS_DENIED: Check your permissions or scopes'
auth_info:
  mentioned_objects:
  - OauthToken
  - AuthProvider
  - NamedCredential
  - API_TOKEN
  - API_URL
  - OPENAI_API_KEY
client:
  base_url: https://panel.whapi.cloud
  auth:
    type: oauth2
source_metadata: null
