resources:
- name: item
  endpoint:
    path: /{databaseId}/items/{itemId}
    method: PUT
    data_selector: null
    params: {}
- name: user
  endpoint:
    path: /{databaseId}/users/{userId}
    method: PUT
    data_selector: null
    params: {}
- name: AddUserProperty
  endpoint:
    path: /{databaseId}/users/properties/{propertyName}?type=<string>
    method: PUT
    params:
      databaseId: string
      propertyName: string
      type: string
- name: DeleteUserProperty
  endpoint:
    path: /{databaseId}/users/properties/{propertyName}
    method: DELETE
    params:
      databaseId: string
      propertyName: string
- name: GetUserPropertyInfo
  endpoint:
    path: /{databaseId}/users/properties/{propertyName}
    method: GET
    params:
      databaseId: string
      propertyName: string
- name: ListUserProperties
  endpoint:
    path: /{databaseId}/users/properties/list/
    method: GET
    params:
      databaseId: string
- name: SetUserValues
  endpoint:
    path: /{databaseId}/users/values
    method: POST
    params:
      databaseId: string
      userId: string
      values: object
- name: AddDetailView
  endpoint:
    path: /{databaseId}/detailviews/
    method: POST
    params:
      databaseId: string
      userId: string
      itemId: string
- name: AddRating
  endpoint:
    path: /{databaseId}/ratings/
    method: POST
    params:
      databaseId: string
      userId: string
      itemId: string
      timestamp: string/number
      rating: number
      cascadeCreate: boolean
      recommId: string
- name: items
  endpoint:
    path: /{databaseId}/items/{itemId}
    method: PUT
    data_selector: item
    params: {}
- name: list_items
  endpoint:
    path: /{databaseId}/items/list/
    method: GET
    data_selector: itemIds
    params: {}
- name: delete_item
  endpoint:
    path: /{databaseId}/items/{itemId}
    method: DELETE
    data_selector: response
    params: {}
- name: list_user_properties
  endpoint:
    path: /{databaseId}/users/properties/list/
    method: GET
- name: set_user_values
  endpoint:
    path: /{databaseId}/users/{userId}
    method: POST
- name: get_user_values
  endpoint:
    path: /{databaseId}/users/{userId}
    method: GET
- name: add_detail_view
  endpoint:
    path: /{databaseId}/detailviews/
    method: POST
- name: delete_detail_view
  endpoint:
    path: /{databaseId}/detailviews/
    method: DELETE
- name: list_item_detail_views
  endpoint:
    path: /{databaseId}/items/{itemId}/detailviews/
    method: GET
- name: list_user_detail_views
  endpoint:
    path: /{databaseId}/users/{userId}/detailviews/
    method: GET
- name: add_purchase
  endpoint:
    path: /{databaseId}/purchases/
    method: POST
    data_selector: purchases
- name: delete_purchase
  endpoint:
    path: /{databaseId}/purchases/
    method: DELETE
    data_selector: purchases
- name: list_item_purchases
  endpoint:
    path: /{databaseId}/items/{itemId}/purchases/
    method: GET
    data_selector: purchases
- name: list_user_purchases
  endpoint:
    path: /{databaseId}/users/{userId}/purchases/
    method: GET
    data_selector: purchases
- name: add_cart_addition
  endpoint:
    path: /{databaseId}/cartadditions/
    method: POST
    data_selector: body
    params: {}
- name: delete_cart_addition
  endpoint:
    path: /{databaseId}/cartadditions/
    method: DELETE
    data_selector: body
    params: {}
- name: list_item_cart_additions
  endpoint:
    path: /{databaseId}/items/{itemId}/cartadditions/
    method: GET
    data_selector: body
    params: {}
- name: list_user_cart_additions
  endpoint:
    path: /{databaseId}/users/{userId}/cartadditions/
    method: GET
    data_selector: body
    params: {}
- endpoint:
    params:
      targetUserId: <string>
      count: <integer>
      scenario: <string>
      cascadeCreate: <boolean>
      returnProperties: <boolean>
      includedProperties: <array>
      filter: <string>
      booster: <string>
      logic: <string>
      minRelevance: <string>
      rotationRate: <number>
      rotationTime: <number>
- name: Get Item Values
  endpoint:
    path: /{databaseId}/items/{itemId}
    method: GET
    data_selector: properties
    params: {}
- name: Update More Items
  endpoint:
    path: /{databaseId}/more-items/
    method: POST
    data_selector: itemIds
    params: {}
- name: Add User
  endpoint:
    path: /{databaseId}/users/{userId}
    method: PUT
    data_selector: userId
    params: {}
- name: Delete User
  endpoint:
    path: /{databaseId}/users/{userId}
    method: DELETE
    data_selector: userId
    params: {}
- name: Merge Users
  endpoint:
    path: /{databaseId}/users/{targetUserId}/merge/{sourceUserId}
    method: PUT
    data_selector: targetUserId
    params: {}
- name: List Users
  endpoint:
    path: /{databaseId}/users/list/
    method: GET
    data_selector: userIds
    params: {}
- name: Add User Property
  endpoint:
    path: /{databaseId}/users/properties/{propertyName}
    method: PUT
    data_selector: propertyName
    params: {}
- name: Delete User Property
  endpoint:
    path: /{databaseId}/users/properties/{propertyName}
    method: DELETE
    data_selector: propertyName
    params: {}
- name: Get User Property Info
  endpoint:
    path: /{databaseId}/users/properties/{propertyName}
    method: GET
    data_selector: propertyInfo
    params: {}
- name: List User Properties
  endpoint:
    path: /{databaseId}/users/properties/list/
    method: GET
- name: Set User Values
  endpoint:
    path: /{databaseId}/users/{userId}
    method: POST
- name: Get User Values
  endpoint:
    path: /{databaseId}/users/{userId}
    method: GET
- name: Add Detail View
  endpoint:
    path: /{databaseId}/detailviews/
    method: POST
- name: Delete Detail View
  endpoint:
    path: /{databaseId}/detailviews/
    method: DELETE
- name: List Item Detail Views
  endpoint:
    path: /{databaseId}/items/{itemId}/detailviews/
    method: GET
- name: List User Detail Views
  endpoint:
    path: /{databaseId}/users/{userId}/detailviews/
    method: GET
- name: Add Purchase
  endpoint:
    path: /{databaseId}/purchases/
    method: POST
- name: add_purchase
  endpoint:
    path: /{databaseId}/purchases/
    method: POST
    data_selector: purchases
    params:
      databaseId: string
      userId: string
      itemId: string
- name: delete_purchase
  endpoint:
    path: /{databaseId}/purchases/
    method: DELETE
    data_selector: purchases
    params:
      databaseId: string
      userId: string
      itemId: string
- name: list_item_purchases
  endpoint:
    path: /{databaseId}/items/{itemId}/purchases/
    method: GET
    data_selector: purchases
    params:
      databaseId: string
      itemId: string
- name: list_user_purchases
  endpoint:
    path: /{databaseId}/users/{userId}/purchases/
    method: GET
    data_selector: purchases
    params:
      databaseId: string
      userId: string
- name: AddCartAddition
  endpoint:
    path: /{databaseId}/cartadditions/
    method: POST
    data_selector: userId, itemId, timestamp, cascadeCreate, amount, price, recommId
    params:
      databaseId: string
      userId: string
      itemId: string
      timestamp: string / number
      cascadeCreate: boolean
      amount: number
      price: number
      recommId: string
- name: DeleteCartAddition
  endpoint:
    path: /{databaseId}/cartadditions/
    method: DELETE
    data_selector: userId, itemId, timestamp
    params:
      databaseId: string
      userId: string
      itemId: string
      timestamp: number
- name: ListItemCartAdditions
  endpoint:
    path: /{databaseId}/items/{itemId}/cartadditions/
    method: GET
    data_selector: itemId, userId, timestamp
    params:
      databaseId: string
      itemId: string
- name: ListUserCartAdditions
  endpoint:
    path: /{databaseId}/users/{userId}/cartadditions/
    method: GET
    data_selector: itemId, timestamp, userId
    params:
      databaseId: string
      userId: string
- name: AddBookmark
  endpoint:
    path: /{databaseId}/bookmarks/
    method: POST
    data_selector: userId, itemId, timestamp, cascadeCreate, recommId
    params:
      databaseId: string
      userId: string
      itemId: string
      timestamp: string / number
      cascadeCreate: boolean
      recommId: string
- name: DeleteBookmark
  endpoint:
    path: /{databaseId}/bookmarks/
    method: DELETE
    data_selector: userId, itemId, timestamp
    params:
      databaseId: string
      userId: string
      itemId: string
      timestamp: number
- name: ListItemBookmarks
  endpoint:
    path: /{databaseId}/items/{itemId}/bookmarks/
    method: GET
    data_selector: itemId, userId, timestamp
    params:
      databaseId: string
      itemId: string
- name: ListUserBookmarks
  endpoint:
    path: /{databaseId}/users/{userId}/bookmarks/
    method: GET
    data_selector: itemId, timestamp, userId
    params:
      databaseId: string
      userId: string
- name: recommend_items_to_item
  endpoint:
    path: /{databaseId}/recomms/items/{itemId}/items/
    method: GET
    params:
      targetUserId: <string>
      count: <integer>
      scenario: <string>
      cascadeCreate: <boolean>
      returnProperties: <boolean>
      includedProperties: <array>
      filter: <string>
      booster: <string>
      logic: <string / Object>
      minRelevance: <string>
      rotationRate: <number>
      rotationTime: <number>
- name: recommend_items_to_item_segment
  endpoint:
    path: /{databaseId}/recomms/item-segments/items/
    method: GET
    data_selector: recomms
    params:
      contextSegmentId: <string>
      targetUserId: <string>
      count: <integer>
      scenario: <string>
      cascadeCreate: <boolean>
      returnProperties: <boolean>
      includedProperties: <array>
      filter: <string>
      booster: <string>
      logic: <string>
      minRelevance: <string>
      rotationRate: <number>
      rotationTime: <number>
- name: recommend_next_items
  endpoint:
    path: /{databaseId}/recomms/next/items/{recommId}
    method: GET
    data_selector: recomms
    params:
      count: <integer>
- name: recommend_item_segments_to_user
  endpoint:
    path: /{databaseId}/recomms/users/{userId}/item-segments/
    method: GET
    params:
      count: <integer>
      scenario: <string>
      cascadeCreate: <boolean>
      filter: <string>
      booster: <string>
      logic: <string / Object>
- name: recommend_item_segments_to_item
  endpoint:
    path: /{databaseId}/recomms/items/{itemId}/item-segments/
    method: GET
    params:
      targetUserId: <string>
      count: <integer>
      scenario: <string>
      cascadeCreate: <boolean>
      filter: <string>
      booster: <string>
      logic: <string / Object>
- name: recommend_item_segments_to_item_segment
  endpoint:
    path: /{databaseId}/recomms/item-segments/item-segments/
    method: GET
    params:
      contextSegmentId: <string>
      targetUserId: <string>
      count: <integer>
      scenario: <string>
      cascadeCreate: <boolean>
      filter: <string>
      booster: <string>
      logic: <string / Object>
- name: search_items
  endpoint:
    path: /{databaseId}/search/users/{userId}/items/
    method: GET
    data_selector: results
    params:
      searchQuery: <string>
      count: <integer>
- name: add_search_synonym
  endpoint:
    path: /{databaseId}/synonyms/items/
    method: POST
    data_selector: response
    params:
      term: <string>
      synonym: <string>
- name: list_search_synonyms
  endpoint:
    path: /{databaseId}/synonyms/items/
    method: GET
    data_selector: synonyms
    params: {}
- name: add_series
  endpoint:
    path: /{databaseId}/series/{seriesId}
    method: PUT
    data_selector: response
    params:
      cascadeCreate: <boolean>
- name: delete_series
  endpoint:
    path: /{databaseId}/series/{seriesId}
    method: DELETE
    data_selector: response
    params:
      cascadeDelete: <boolean>
- name: InsertToSeries
  endpoint:
    path: /{databaseId}/series/{seriesId}/items/
    method: POST
    data_selector: itemType,itemId,time,cascadeCreate
- name: RemoveFromSeries
  endpoint:
    path: /{databaseId}/series/{seriesId}/items/
    method: DELETE
    data_selector: itemType,itemId
- name: CreateManualReqlSegmentation
  endpoint:
    path: /{databaseId}/segmentations/manual-reql/{segmentationId}
    method: POST
    data_selector: title,description
- name: UpdateManualReqlSegmentation
  endpoint:
    path: /{databaseId}/segmentations/manual-reql/{segmentationId}
    method: PUT
    data_selector: title,description
- name: AddManualReqlSegment
  endpoint:
    path: /{databaseId}/segmentations/manual-reql/{segmentationId}
    method: POST
    data_selector: segmentId,filter,title
- name: list_scenarios
  endpoint:
    path: /{databaseId}/scenarios/
    method: GET
    data_selector: result
    params:
      databaseId: required
- name: reset_database
  endpoint:
    path: /{databaseId}/
    method: DELETE
    data_selector: result
    params:
      databaseId: required
- name: item_properties
  endpoint:
    path: /api/item_properties
    method: GET
    data_selector: records
- name: user_properties
  endpoint:
    path: /api/user_properties
    method: GET
    data_selector: records
- name: interactions
  endpoint:
    path: /api/interactions
    method: GET
    data_selector: records
- name: search_items
  endpoint:
    path: /myDb/search/users/user-13434/items/
    method: GET
    data_selector: items
    params:
      searchQuery: query
      scenario: search_top
      returnProperties: 'true'
      cascadeCreate: 'true'
- name: set_item_values
  endpoint:
    path: /myDb/items/xyz
    method: POST
    data_selector: response
    params:
      title: Television TV2305
      description: HD resolution LED TV
      price: 200
      categories:
      - Electronics
      - Televisions
      deleted: false
      image: http://examplesite.com/products/xyz.jpg
      '!cascadeCreate': true
- name: search_items
  endpoint:
    path: /myDb/search/users/user-13434/items/
    method: GET
    data_selector: matches
    params:
      searchQuery: query
      scenario: search_top
      returnProperties: true
      cascadeCreate: true
- name: recommend_items_to_item
  endpoint:
    path: /api#request-recommend-items-to-item
    method: POST
    data_selector: results
- name: recommend_items_to_user
  endpoint:
    path: /api#request-recommend-items-to-user
    method: POST
    data_selector: results
- name: recommend_users_to_item
  endpoint:
    path: /api#request-recommend-users-to-item
    method: POST
    data_selector: results
- name: recommend_users_to_user
  endpoint:
    path: /api#request-recommend-users-to-user
    method: POST
    data_selector: results
- name: video:continue-watching
  endpoint:
    path: /api#request-recommend-items-to-user
    method: GET
    data_selector: parameters
    params:
      watchingStartedPercentage: 10
      watchingCompletedPercentage: 90
      assetType: movies+episodes
- name: video:personal
  endpoint:
    path: /api#request-recommend-items-to-user
    method: GET
    data_selector: parameters
    params:
      assetType: movies+episodes
      excludeAlreadyWatched: true
- name: video:popular
  endpoint:
    path: /api#request-recommend-items-to-user
    method: GET
    data_selector: parameters
    params:
      timePeriod: 1209600
      userSegmentFilter: 'true'
      assetType: movies+episodes
      excludeAlreadyWatched: false
- name: news:daily-news
  endpoint:
    path: /api#request-recommend-items-to-user
    method: GET
    data_selector: parameters
    params:
      editorsPicks: []
      publishedTimestamp: None
- name: news:popular
  endpoint:
    path: /api#request-recommend-items-to-user
    method: GET
    data_selector: parameters
    params:
      excludeAlreadyRead: true
      timePeriod: 1209600
- name: recommend_items_to_user
  endpoint:
    path: /my-db-id/recomms/users/user-x/items/
    method: GET
    params:
      count: 10
      logic: ecommerce:homepage
- name: recommend_items_with_settings
  endpoint:
    path: /my-db-id/recomms/users/user-x/items/
    method: POST
    params:
      count: 10
      logic:
        name: recombee:recently-viewed
        settings:
          maxAge: 259200
- name: items
  endpoint:
    path: /api/items
    method: GET
    data_selector: items
- name: interactions
  endpoint:
    path: /api/interactions
    method: POST
    data_selector: interactions
- name: recommend_items_to_user
  endpoint:
    path: /api#request-recommend-items-to-user
    method: GET
    data_selector: recommendations
    params:
      filter: '''state''==''TX'' and ''city''==''Austin'''
- name: recommend_items_to_item
  endpoint:
    path: /api#request-recommend-items-to-item
    method: GET
    data_selector: similar_items
    params: {}
- name: search
  endpoint:
    path: /api#search
    method: GET
    data_selector: search_results
    params: {}
- name: recommend_next_items
  endpoint:
    path: /api#request-recommend-next-items
    method: GET
    data_selector: next_recommendations
    params: {}
- name: item_segmentations
  endpoint:
    path: /api/item-segmentations
    method: POST
    data_selector: segments
- name: recommend_item_segments_to_user
  endpoint:
    path: /api/recommend-item-segments-to-user
    method: GET
    data_selector: recommendations
- name: recommend_item_segments_to_item
  endpoint:
    path: /api/recommend-item-segments-to-item
    method: GET
    data_selector: recommendations
- name: recommend_item_segments_to_item_segment
  endpoint:
    path: /api/recommend-item-segments-to-item-segment
    method: GET
    data_selector: recommendations
- name: search_item_segments
  endpoint:
    path: /api/search-item-segments
    method: GET
    data_selector: segments
- name: recommendations
  endpoint:
    path: /api/recommend
    method: POST
    data_selector: recomms
- name: recommend_items
  endpoint:
    path: /api/recommend_items
    method: POST
    data_selector: recomms
- name: recommend_items_to_item
  endpoint:
    path: /recommend/items/to/item
    method: POST
    data_selector: recomms
    params:
      return_properties: true
- name: recommendations
  endpoint:
    path: /{databaseId}/recomms/users/userId/items/
    method: GET
    data_selector: items
    params:
      count: '10'
      scenario: homepage
- name: recommend_items_to_user
  endpoint:
    path: /api/recommend-items-to-user
    method: POST
- name: recommend_items_to_item
  endpoint:
    path: /api/recommend-items-to-item
    method: POST
- name: search_items
  endpoint:
    path: /api/search-items
    method: POST
- name: user_tracking
  endpoint:
    path: /v1/recombee.js
    method: GET
    data_selector: recombeeIntegration
- name: interactions
  endpoint:
    path: /api/interactions
    method: POST
    data_selector: interaction
- name: users
  endpoint:
    path: /recommend/items/to/user
    method: POST
    data_selector: recommended_items
- name: items
  endpoint:
    path: /recommend/items/to/item
    method: POST
    data_selector: recommended_items
- name: AddToCart
  endpoint:
    path: /addToCart
    method: POST
    data_selector: interaction
    params: {}
- name: DetailView
  endpoint:
    path: /detailView
    method: POST
    data_selector: interaction
    params: {}
- name: Purchase
  endpoint:
    path: /purchase
    method: POST
    data_selector: interaction
    params: {}
- name: Rating
  endpoint:
    path: /rating
    method: POST
    data_selector: interaction
    params: {}
- name: us-west
  endpoint:
    path: /rapi-us-west
    method: GET
- name: ca-east
  endpoint:
    path: /rapi-ca-east
    method: GET
- name: eu-west
  endpoint:
    path: /rapi-eu-west
    method: GET
- name: ap-se
  endpoint:
    path: /rapi-ap-se
    method: GET
notes:
- ID of the item to be created must not match 'undefined'.
- The API has a calls limit of 100 calls per minute for listing items.
- Calls limit per minute for adding and deleting cart additions is 1000.
- Calls limit per minute for listing cart additions is 60.
- API consumes application/json
- API produces application/json
- 'Calls Limit Per Minute: 1000 for detail views.'
- 'Calls Limit Per Minute: 60 for listing detail views.'
- 'Calls Limit Per Minute: 1000 for purchases, 60 for listings'
- Executing the requests in a Batch is equivalent as if they were executed one-by-one
  individually.
- Recombee can be utilized in various domains such as Video, E-commerce, and Music.
- The cascadeCreate parameter indicates that the item of the given itemId should be
  created if it does not exist in the database.
- Some models require interaction data to function properly.
- Each property should be an item in Recombee.
- Property-based Segmentation groups the Items by the value of a particular property.
- NULL values are ignored.
- Filtering options are broad and include city, date, and genres.
- Filtering can be done using ReQL expressions.
- Successful recommendations explicitly reported to Recombee.
- You can set different behavior of the recommendations for each scenario.
- Property name itemId is reserved
- Items deleted from feeds are not deleted in Recombee catalog. Instead, they can
  be updated as not available.
- Recombee by default identifies the user using first-party cookies on the user's
  browser.
- These functions are not enabled by default due to higher resource consumption.
- Contact support@recombee.com if you need to enable them, and please specify the
  types of interactions needed in your request.
- Database ID and Private Token are required.
- Every signature has a limited lifetime (currently 10s). It is therefore important
  for your server time to be synchronized via NTP or other source of precise time.
errors:
- '400: The `itemId` does not match ^[a-zA-Z0-9\_-:@.]+$.'
- '404: The `itemId` is not present in the item catalog.'
- '400: The `userId` or `itemId` does not match ^[a-zA-Z0-9\_-:@.]+$, `timestamp`
  is not a real number ≥ 0.'
- '404: The `userId`, `itemId`, or purchase with the given (`userId`, `itemId`, `timestamp`)
  not found in the database.'
- '409: A purchase of the exact same `userId`, `itemId`, and `timestamp` is already
  present in the database.'
- '404: The `userId`, `itemId`, or cart addition with the given (`userId`, `itemId`,
  `timestamp`) not found in the database.'
- '409: A cart addition of the exact same `userId`, `itemId`, and `timestamp` is already
  present in the database.'
- '400: itemId does not match ^[a-zA-Z0-9\_-:@.]+$, count is not a positive integer,
  filter or booster is not valid [ReQL] expressions, filter expression does not return
  boolean, booster does not return double or integer.'
- '404: itemId not found in the database and cascadeCreate is false. If there is no
  additional info in the JSON response, you probably have an error in your URL.'
- '409: The `itemId` is already present in the item catalog.'
- '400: Property name does not match ^[a-zA-Z0-9\_-:]+$.'
- '404: Property of the given name is not present in the database.'
- '404: Given `userId` or `itemId` not found in the database.'
- '400: count is not a positive integer.'
- '404: contextSegmentId not found in the context segmentation'
- '400: Missing a field, or a field has a wrong type.'
- '409: `synonym` and `term` pair already exists in the database.'
- '200: Successful operation'
- '400: Bad Request'
- '404: Not Found'
auth_info:
  mentioned_objects: []
client:
  base_url: https://api.recombee.com
  auth:
    type: apikey
source_metadata: null
