resources:
- name: Cache
  endpoint:
    path: /api.html#diskcache.Cache
    method: GET
    data_selector: records
    params: {}
- name: FanoutCache
  endpoint:
    path: /api.html#diskcache.FanoutCache
    method: GET
    data_selector: records
    params: {}
- name: DjangoCache
  endpoint:
    path: /api.html#diskcache.DjangoCache
    method: GET
    data_selector: records
    params: {}
- name: DjangoCache
  endpoint:
    path: /django/cache
    method: GET
- name: Cache
  endpoint:
    path: /api.html#diskcache.Cache
    method: GET
    data_selector: records
- name: FanoutCache
  endpoint:
    path: /api.html#diskcache.FanoutCache
    method: GET
    data_selector: records
- name: DjangoCache
  endpoint:
    path: /api.html#diskcache.DjangoCache
    method: GET
    data_selector: records
- name: Cache
  endpoint:
    path: /diskcache/Cache
    method: GET
    data_selector: records
- name: Index
  endpoint:
    path: /Index
    method: GET
    data_selector: items
    params: {}
- name: Deque
  endpoint:
    path: /api.html#diskcache.Deque
    method: GET
    data_selector: records
- name: Index
  endpoint:
    path: /api.html#diskcache.Index
    method: GET
    data_selector: records
- name: urls
  endpoint:
    path: data/urls
    method: GET
    data_selector: results
    params: {}
- name: results
  endpoint:
    path: data/results
    method: GET
    data_selector: results
    params: {}
notes:
- Operation is atomic. Only one concurrent add operation for a given key will succeed.
- Concurrent writes may occur between iterations.
- Raises Timeout error when database timeout occurs and retry is False (default).
- Assumes the key will not be evicted. Set the eviction policy to ‘none’ on the cache
  to guarantee the key is not evicted.
- Uses OAuth2 with refresh token — requires setup of connected app in api
- Operation is atomic. Concurrent operations will be serialized.
- retry parameter defaults to False for several methods, including get, incr, pop,
  and set.
- Cache objects are thread-safe and may be shared between threads.
- Cache operations are atomic.
- Some objects like Contact may return nulls in deeply nested fields
- DiskCache supports a familiar Python mapping interface with additional cache and
  performance parameters.
- Django setting for default timeout of each key.
- The minimum size to store a value in a file is 32 kilobytes.
- Micro-benchmarks have their place but are not a substitute for real measurements.
- DiskCache offers cache benchmarks to defend its performance claims.
- Micro-optimizations are avoided but your mileage may vary.
- Performance is a feature and testing has 100% coverage with unit tests and hours
  of stress.
- Caches may be iterated by either insertion order or sorted order.
- Caches do not automatically remove the underlying directory where keys and values
  are stored.
- DjangoCache will never raise a Timeout exception.
- The keyword parameter retry defaults to True for DjangoCache methods.
- Uses a Django-compatible cache with eight shards and a 10ms timeout.
- Persistent mutable mapping with insertion order iteration.
- Items are serialized to disk.
- Measurements in production systems are much harder to reproduce reliably.
- The generated workload includes a ~1% cache miss rate.
- By default Cache objects raise a timeout error after sixty seconds.
- Django’s filesystem cache backend has a severe drawback. Every set operation checks
  whether a cull operation is necessary.
- Django’s filesystem cache backend has a severe drawback.
- The higher set and delete latencies are due to the retry behavior of DjangoCache
  objects.
- By default the maximum memory consumption of deque and index objects is only a few
  dozen megabytes.
- Provides data types and recipes for memoization and mitigation of cache stampedes.
- The decorators provided are composable for a variety of scenarios.
- Performance matters (often faster than C implementations)
- 100% test coverage
- The maximum memory consumption of deque and index objects is only a few dozen megabytes.
- 'Caveats: NFS and SQLite do not play nice.'
- Not well suited to queues (want read:write at 10:1 or higher).
- The generated workload includes a ~1% cache miss rate. All items were stored with
  no expiry.
- Accurately measuring performance is a difficult task.
- The benchmarks are synthetic and designed to stress getting, setting, and deleting
  items repeatedly.
- DiskCache is actively developed in a GitHub repository.
errors:
- 'Timeout: if database timeout occurs'
- 'REQUEST_LIMIT_EXCEEDED: Throttle API calls or reduce frequency'
- 'QUERY_TIMEOUT: Break down filters or add selectivity'
- '401 Unauthorized: Recheck OAuth scopes or token expiration'
auth_info:
  mentioned_objects: []
client:
  base_url: https://github.com/grantjenks/python-diskcache
  auth:
    type: none
source_metadata: null
