resources:
- name: delete_points
  endpoint:
    path: /collections/:collection_name/points/delete
    method: POST
- name: create_collection
  endpoint:
    path: /collections/:collection_name
    method: PUT
    data_selector: result
    params: {}
- name: collection_details
  endpoint:
    path: /collections/:collection_name
    method: GET
    data_selector: result
    params: {}
- name: delete_collection
  endpoint:
    path: /collections/:collection_name
    method: DELETE
    data_selector: result
    params:
      timeout: integer
- name: upsert_points
  endpoint:
    path: /collections/:collection_name/points
    method: PUT
    data_selector: result
    params:
      wait: boolean
      ordering: enum
- name: points
  endpoint:
    path: /collections/:collection_name/points
    method: POST
    data_selector: result
    params:
      ids: list of uint64s or strings
- name: point
  endpoint:
    path: /collections/:collection_name/points/:id
    method: GET
- name: set_payload
  endpoint:
    path: /collections/:collection_name/points/payload
    method: POST
    data_selector: result
    params:
      collection_name: string
      payload: map from strings to any
      points: list of uint64s or strings or null
- name: delete_vectors
  endpoint:
    path: /collections/:collection_name/points/vectors/delete
    method: POST
- name: overwrite_payload
  endpoint:
    path: /collections/:collection_name/points/payload
    method: PUT
    data_selector: result
    params:
      wait: boolean
      ordering: enum
- name: search_points
  endpoint:
    path: /collections/:collection_name/points/search
    method: POST
    data_selector: result
    params: {}
- name: facet
  endpoint:
    path: /collections/:collection_name/facet
    method: POST
    data_selector: result.hits
    params:
      key: my-payload-key
      limit: 10
- name: search_batch_points
  endpoint:
    path: /collections/:collection_name/points/search/batch
    method: POST
- name: snapshots
  endpoint:
    path: /collections/:collection_name/snapshots
    method: GET
    data_selector: result
    params:
      collection_name: string
- name: delete_payload_index
  endpoint:
    path: /collections/:collection_name/index/:field_name
    method: DELETE
- name: create_snapshot
  endpoint:
    path: /collections/:collection_name/snapshots
    method: POST
    data_selector: result
    params: {}
- name: create_snapshot
  endpoint:
    path: /collections/:collection_name/snapshots
    method: POST
- name: create_shard_key
  endpoint:
    path: /collections/:collection_name/shards
    method: PUT
- name: create_shard_key
  endpoint:
    path: /collections/:collection_name/shards
    method: PUT
- name: cluster_status
  endpoint:
    path: /cluster
    method: GET
    data_selector: result
- name: cluster_status
  endpoint:
    path: /cluster
    method: GET
    data_selector: result
    params: {}
- name: delete_shard_key
  endpoint:
    path: /collections/:collection_name/shards/delete
    method: POST
    data_selector: result
    params:
      shard_key: required
      timeout: optional
- name: delete_shard_key
  endpoint:
    path: /collections/:collection_name/shards/delete
    method: POST
    data_selector: result
    params:
      collection_name: string
      shard_key: string or uint64
- name: update_vectors
  endpoint:
    path: /collections/:collection_name/points/vectors
    method: PUT
    data_selector: result
    params:
      points: list of objects
      wait: boolean
      ordering: enum
- name: update_vectors
  endpoint:
    path: /collections/:collection_name/points/vectors
    method: PUT
    data_selector: result
    params: {}
notes:
- Drops the specified collection and all associated data in it.
- Deletes one or more shard keys for a specified collection.
- Updates specified vectors on points. All other unspecified vectors will stay intact.
errors: []
auth_info:
  mentioned_objects: []
client:
  base_url: http://localhost:6333
  auth:
    type: apikey
    location: header
    header_name: api-key
source_metadata: null
