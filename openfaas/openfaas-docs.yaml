resources:
- name: functions
  endpoint:
    path: /system/functions
    method: GET
    data_selector: functions
    params: {}
- name: async-function
  endpoint:
    path: /async-function/{call-id}
    method: DELETE
    data_selector: status
    params: {}
- name: secrets
  endpoint:
    path: /system/secrets
    method: POST
    data_selector: secrets
    params: {}
- name: list_namespaces
  endpoint:
    path: /system/namespaces
    method: GET
    data_selector: namespaces
    params: {}
- name: create_namespace
  endpoint:
    path: /system/namespace/
    method: POST
    data_selector: namespace
    params: {}
- name: update_namespace
  endpoint:
    path: /system/namespaces/n1
    method: PUT
    data_selector: namespace
    params: {}
- name: delete_namespace
  endpoint:
    path: /system/namespaces/n1
    method: DELETE
    data_selector: namespace
    params: {}
- name: openfaasPro
  endpoint:
    path: /openfaasPro
    method: GET
    data_selector: features
    params: {}
- name: grafana_dashboards
  endpoint:
    path: /dashboards
    method: GET
- name: function_builder_api
  endpoint:
    path: /builder
    method: GET
- name: openfaas
  endpoint:
    path: /openfaas
    method: GET
    data_selector: core components
    params: {}
- name: openfaas-fn
  endpoint:
    path: /openfaas-fn
    method: GET
    data_selector: functions
    params: {}
- name: templates
  endpoint:
    path: /template/store/list
    method: GET
    data_selector: templates
- name: functions
  endpoint:
    path: /functions
    method: POST
    data_selector: functions
- name: withprivate
  endpoint:
    path: /functions/withprivate
    method: POST
    data_selector: result
    params: {}
- name: withprivatenpm
  endpoint:
    path: /functions/withprivatenpm
    method: POST
    data_selector: result
    params: {}
- name: function_logs
  endpoint:
    path: /function/logs
    method: GET
    data_selector: logs
- name: image_tags
  endpoint:
    path: /working-with-image-tags
    method: GET
    data_selector: tags
    params: {}
- name: official_templates
  endpoint:
    path: /cli/templates
    method: GET
- name: custom_templates
  endpoint:
    path: /custom
    method: GET
- name: existing_dockerfiles_images
  endpoint:
    path: /languages/dockerfile
    method: GET
- name: node-fn
  endpoint:
    path: /functions/node-fn
    method: GET
    data_selector: result
    params: {}
- name: python-auth
  endpoint:
    path: /function/python-auth
    method: GET
    data_selector: body
    params: {}
- name: greet
  endpoint:
    path: ''
    method: ''
    data_selector: ''
    params: {}
- name: golang-middleware
  endpoint:
    path: /template/golang-middleware
    method: GET
    data_selector: template
    params: {}
- name: customers
  endpoint:
    path: /function/my-function/customers
    method: GET
    data_selector: customers
- name: curl
  endpoint:
    path: /function/curl
    method: POST
    data_selector: response
    params: {}
- name: template
  endpoint:
    path: /template
    method: GET
    data_selector: templates
- name: autoscaler
  endpoint:
    path: /deployments/openfaas/autoscaler
    method: GET
    data_selector: status
    params: {}
- name: function
  endpoint:
    path: /function/{function_name}
    method: POST
    data_selector: response
    params: {}
- name: functions
  endpoint:
    path: /function
    method: POST
    data_selector: metrics
    params: {}
- name: chaos
  endpoint:
    path: /function/chaos
    method: POST
    data_selector: status
    params: {}
- name: Function
  endpoint:
    path: /functions
    method: GET
    data_selector: functions
    params: {}
- name: function
  endpoint:
    path: /function
    method: POST
    data_selector: status
    params: {}
- name: queue_worker
  endpoint:
    path: /queue-worker
    method: GET
    data_selector: records
    params: {}
- name: customer
  endpoint:
    path: /trigger/event
    method: POST
    data_selector: data
    params: {}
- name: SQS Queue
  endpoint:
    path: /sqs-queue
    method: POST
    data_selector: messages
    params:
      queueURL: URL for your SQS queue
      visibilityTimeout: Maximum time to keep message hidden
      waitTime: Time to wait between polling
      maxMessages: Maximum messages to fetch
- name: sns_topic
  endpoint:
    path: /callback
    method: POST
    data_selector: message
    params:
      topicARN: arn:aws:sns:us-east-1:123456789012:of-event
- name: queue1
  endpoint:
    path: /queues
    method: GET
    data_selector: queues
    params: {}
- name: subscriptions
  endpoint:
    path: /subscriptions
    method: GET
    data_selector: subscriptions
    params: {}
- name: build
  endpoint:
    path: /build
    method: POST
- name: billing_metrics
  endpoint:
    path: /openfaas-events
    method: POST
    data_selector: events
- name: autoscaling_and_usage_metrics_dashboard
  endpoint:
    path: /grafana/dashboards/autoscaling
    method: GET
    data_selector: metrics
- name: spotlight_dashboard
  endpoint:
    path: /grafana/dashboards/spotlight
    method: GET
    data_selector: metrics
- name: queue_worker_dashboard
  endpoint:
    path: /grafana/dashboards/queue-worker
    method: GET
    data_selector: metrics
- name: builder_dashboard
  endpoint:
    path: /grafana/dashboards/builder
    method: GET
    data_selector: metrics
- name: cron-connector
  endpoint:
    path: /services/cron-connector
    method: GET
    data_selector: services
    params: {}
- name: faas-idler
  endpoint:
    path: /services/faas-idler
    method: GET
    data_selector: services
    params: {}
- name: gateway
  endpoint:
    path: /services/gateway
    method: GET
    data_selector: services
    params: {}
- name: nats
  endpoint:
    path: /services/nats
    method: GET
    data_selector: services
    params: {}
- name: prometheus
  endpoint:
    path: /services/prometheus
    method: GET
    data_selector: services
    params: {}
- name: queue-worker
  endpoint:
    path: /services/queue-worker
    method: GET
    data_selector: services
    params: {}
- name: install_custom_dns
  endpoint:
    path: /faasd/install
    method: POST
    data_selector: dns-server
    params:
      dns_server:
      - 1.1.1.1
      - 8.8.4.4
- name: update_existing_installation
  endpoint:
    path: /faasd/update
    method: POST
    data_selector: dns-server
    params: {}
- name: kafka_connector
  endpoint:
    path: /kafka-connector
    method: POST
    data_selector: response
    params: {}
- name: alloy
  endpoint:
    path: /services/data/v1.8.2/alloy
    method: GET
    data_selector: records
- name: env
  endpoint:
    path: /var/lib/faasd-provider/functions/env.yaml
    method: POST
    data_selector: functions.env
    params: {}
- name: nodeinfo
  endpoint:
    path: /var/lib/faasd-provider/functions/nodeinfo.yaml
    method: POST
    data_selector: functions.nodeinfo
    params: {}
- name: fn1
  endpoint:
    path: ./fn1
    method: POST
- name: fn2
  endpoint:
    path: ./fn2
    method: POST
- name: functions
  endpoint:
    path: /system/functions
    method: GET
- name: gateway
  endpoint:
    path: /
    method: GET
- name: dashboard
  endpoint:
    path: /
    method: GET
- name: FunctionIngress
  endpoint:
    path: /function/NAME
    method: POST
    data_selector: spec
    params: {}
- name: async-function
  endpoint:
    path: /async-function/<name>
    method: POST
- name: cancel-async-function
  endpoint:
    path: /async-function/<call-id>
    method: DELETE
- name: protected-api
  endpoint:
    path: /function/protected-api
    method: GET
    data_selector: body
    params: {}
- name: http_webhooks
  endpoint:
    path: /function/<function name>
    method: GET
- name: async_function
  endpoint:
    path: /async-function/<function name>
    method: GET
- name: functions
  endpoint:
    path: /functions
    method: GET
    data_selector: records
- name: node-service
  endpoint:
    path: /function/node-service
    method: GET
    data_selector: records
- name: nodeinfo
  endpoint:
    path: /deploy
    method: POST
    data_selector: functions
    params:
      topic: cron-function
      schedule: '*/5 * * * *'
- name: nodeinfo
  endpoint:
    path: /functions/nodeinfo
    method: POST
    data_selector: result
    params:
      schedule: '*/5 * * * *'
- name: nodeinfo-auth
  endpoint:
    path: /functions/nodeinfo-auth
    method: POST
    data_selector: result
    params:
      schedule: '*/1 * * * *'
- name: namespace
  endpoint:
    path: /system/namespaces
    method: GET
    data_selector: namespaces
- name: echo
  endpoint:
    path: /function/echo
    method: POST
    data_selector: response
- name: env
  endpoint:
    path: /function/env
    method: POST
    data_selector: annotations
    params: {}
- name: autoscaler
  endpoint:
    path: /function/
    method: POST
    data_selector: ''
    params: {}
- name: cows
  endpoint:
    path: /function/cows
    method: POST
    data_selector: data
    params:
      max: 5
      target: 50
      type: cpu
      target-proportion: 0.7
      zero: false
- name: sleep
  endpoint:
    path: /async-function/sleep
    method: POST
    data_selector: data
    params:
      max: 10
      target: 1
      type: queue
      target-proportion: 1
      zero: true
      max_inflight: 1
- name: functions
  endpoint:
    path: /system/functions
    method: GET
    data_selector: functions
- name: functions
  endpoint:
    path: /functions
    method: GET
    data_selector: functions
    params: {}
- name: secrets
  endpoint:
    path: /secrets
    method: GET
    data_selector: secrets
    params: {}
- name: system_logs
  endpoint:
    path: /system/logs
    method: GET
    data_selector: logs
    params: {}
- name: callme
  endpoint:
    path: /functions/callme
    method: POST
    data_selector: status
- name: function
  endpoint:
    path: /function/callme
    method: POST
    data_selector: status
- name: functions_list
  endpoint:
    path: /functions
    method: GET
    data_selector: functions
- name: hello-python
  endpoint:
    path: /function/hello-python
    method: POST
    data_selector: response
    params: {}
- name: hello-python
  endpoint:
    path: /function/hello-python
    method: POST
    data_selector: found
    params: {}
- name: gateway
  endpoint:
    path: /
    method: GET
- name: function
  endpoint:
    path: /system/functions
    method: GET
    data_selector: functions
    params: {}
- name: pydict
  endpoint:
    path: /pydict
    method: POST
    data_selector: Noun, Verb
    params: {}
- name: prometheus
  endpoint:
    path: /federate
    method: GET
    data_selector: metrics
    params:
      scrape_interval: 60s
- name: faas
  endpoint:
    path: /openfaas/faas
    method: GET
- name: faas-cli
  endpoint:
    path: /openfaas/faas-cli
    method: GET
- name: faas-netes
  endpoint:
    path: /openfaas/faas-netes
    method: GET
- name: faasd
  endpoint:
    path: /openfaas/faasd
    method: GET
- name: nats-queue-worker
  endpoint:
    path: /openfaas/nats-queue-worker
    method: GET
- name: certifier
  endpoint:
    path: /openfaas/certifier
    method: GET
- name: of-watchdog
  endpoint:
    path: /openfaas/of-watchdog
    method: GET
- name: classic-watchdog
  endpoint:
    path: /openfaas/classic-watchdog
    method: GET
- name: openfaas.github.io
  endpoint:
    path: /openfaas/openfaas.github.io
    method: GET
- name: store
  endpoint:
    path: /openfaas/store
    method: GET
- name: media
  endpoint:
    path: /openfaas/media
    method: GET
- name: ingress-operator
  endpoint:
    path: /openfaas/ingress-operator
    method: GET
- name: connector-sdk
  endpoint:
    path: /openfaas/connector-sdk
    method: GET
- name: workshop
  endpoint:
    path: /openfaas/workshop
    method: GET
- name: vcenter-connector
  endpoint:
    path: /openfaas/vcenter-connector
    method: GET
- name: faas-memory
  endpoint:
    path: /openfaas/faas-memory
    method: GET
- name: functions
  endpoint:
    path: /function/{function_name}
    method: POST
    data_selector: logs
- name: dashboard
  endpoint:
    path: /function/figlet
    method: POST
    data_selector: null
    params: {}
- name: FunctionIngress
  endpoint:
    path: /functioningress
    method: POST
    data_selector: spec
    params: {}
- name: gateway
  endpoint:
    path: /
    method: GET
    data_selector: records
- name: dashboard
  endpoint:
    path: /
    method: GET
    data_selector: records
notes:
- When accessing the API for development, you may want to port-forward the OpenFaaS
  gateway to your local machine via kubectl port-forward.
- For any code you deploy within the cluster you should always use http://gateway.openfaas:8080
  as the URL.
- OpenFaaS CE and Standard support Basic Authentication.
- OpenFaaS for Enterprises supports IAM using OIDC and JWT.
- OpenFaaS does not operate a mono-repo, so taking statistics just from the (faas)
  repository is misrepresentation.
- Authentication is enabled by default with OpenFaaS, however you will also need to
  obtain a TLS certificate for your cluster if you are using OpenFaaS on the public
  Internet.
- For personal use only, commercial usage is limited
- The cluster will need to have full access to the Internet at all times
- A local cluster is recommended for development and testing, however you can also
  use managed Kubernetes if you wish
- IfNotPresent is particularly useful when developing locally with minikube.
- When set to Never, only local (or pulled) images will work.
- 'Multiple namespaces are automatically detected and enabled, when you set `clusterRole:
  true` in the chart.'
- IAM and SSO can be configured up front, or later down the line when you have the
  base installation complete.
- 10 minute timeout for requests
- Requires setup of connected app for OAuth
- Telemetry is required as part of the OpenFaaS Pro license agreement.
- During the installation of OpenFaaS Standard/Enterprise, the operator and Function
  Custom Resource Definitions (CRDs) will be enabled.
- faasd takes the core OpenFaaS components and packages them for use on a single host,
  without the cost and complexity of Kubernetes.
- The number of functions is tied to your license, with a maximum of 250 functions
  per installation.
- OpenFaaS CE has been tested with OpenShift 3.11 and also works with OpenShift 4.x,
  but no instructions are provided at this time.
- Kubernetes is a complex distributed system, and there are many things that can cause
  friction for new OpenFaaS users.
- Common issues include forgetting to create the password required for the gateway.
- The gateway must be able to talk to nats and prometheus.
- You need enough resources free in your cluster for all the services to start.
- If the body of the HTTP request is empty, the chances are that you are not setting
  a 'Content-type' header in your request to the function.
- If you are using the CRD and Operator, set direct_functions to true.
- Some legacy HTTP servers such as WSGI do not support the default 'chunked' transfer
  encoding.
- Your function is failing because it takes too long to start-up.
- If you're using ArgoCD to install OpenFaaS, then it may be changing the password
  continually whenever it synchronises the app that you created.
- In the worst case, restart all the components to force them to reload the password
  from the Kubernetes secret.
- In order to access the template store you need 0.8.1 version of the CLI or higher
- The OpenFaaS CLI supports various options for building a function.
- Remember to add -f if using a non-default yaml file.
- It is important that you do not install Docker or any build tools on your faasd
  instance. faasd is a server to serve your functions, and should be treated as such.
- Log retention and history will be determined by your cluster configuration and the
  log provider installed.
- If you delete a function, you remove access to its logs.
- All OpenFaaS functions are built into immutable Docker images before deployment.
- You can define your tag in the stack YAML file. By default this tag is ':latest'.
- Uses pre-shared secret for authentication
- The raw body has a default maximum size of 100KB to prevent abuse from users
- Always read secrets from OpenFaaS secrets at /var/openfaas/secrets/secret-name.
- The OpenTelemetry agent can be configured using environment variables on the function
- The functions reads the PostgreSQL connection string from an OpenFaaS secret.
- Dependencies for functions are managed with Composer
- The input and output of the function is a string
- HTTP headers were made available as environment variables
- An OpenFaaS function is a container image or Open Container Initiative (OCI) image.
- To deploy an existing microservice or container image, it'll need to be listening
  to HTTP traffic on port 8080.
- 'Scale to Zero is enabled automatically when you install OpenFaaS Pro with helm
  and set autoscaler.enabled: true.'
- The time taken to scale up a function and have it ready to serve traffic is called
  a 'cold-start'.
- The dashboard will automatically create the required signing keys on startup.
- These keys will be recreated any time the dashboard container is restarted invalidating
  any logged in sessions.
- The publicURL must be a fully qualified domain name (FQDN).
- The signingKeySecret can be left blank to auto-generate signing keys.
- The publicURL doesn't necessarily have to be publicly exposed on the Internet, but
  it does need to be a fully qualified domain name (FQDN).
- The clientSecret can be left blank if your OIDC provider does not require a secret.
- OpenFaaS Pro offers an enterprise-ready queue-worker which retries failed invocations
  using an exponential back-off algorithm.
- Uses Custom Resource Definition (CRD) to manage functions.
- The Queue Worker is part of the built-in queue system for OpenFaaS built upon NATS
  JetStream.
- Trigger function invocations from messages received on Kafka topics.
- It is recommended to deploy one connector per topic.
- This feature is included for OpenFaaS Standard & For Enterprises customers.
- On start-up, the connector will create a database schema named 'openfaas' and a
  function named 'notify_event' which emits events using 'pg_notify()'.
- Each time a function is invoked by the connector it will receive the message from
  the queue as the HTTP body.
- The content type header sent to functions by the connector is text/plain.
- The connector can only be used with Standard topics and not FIFO topics.
- The callback URL has to be publicly accessible to receive SNS messages.
- If your RabbitMQ requires a TLS connection make sure to use amqps:// as the scheme
  in the url.
- Use the subscriptions parameter to configure a list of Pub/Sub subscriptions to
  which the connector should subscribe.
- OpenFaaS Standard and OpenFaaS for Enterprises are licensed for use within an airgap
  when purchased on an annual basis via invoice.
- Authentication is required to publish images to remote registries.
- You must make sure that you do not include a configuration file from your machine
  directly, if the credentials keystore is enabled in Docker Desktop.
- The endpoint is authenticated; do not expose the builder's API to the Internet.
- Uses HMAC with a 256-bit digest to sign the webhook payload
- The defaultRAM under the metering secret is expressed in the same notation as Kubernetes
  Pods, i.e. 128Mi or 1Gi
- It is recommended that you use TLS if the gateway is to be exposed over a public
  network or the Internet.
- The dashboard is an optional add-on for Edge and requires an additional tier or
  purchase.
- The service comes pre-packaged within the default installation, but is disabled
  by default.
- OpenFaaS Edge will use Google's public DNS servers by default.
- You may need to configure custom DNS servers for functions to reach the Internet.
- Functions are automatically scaled up from zero when there is a request.
- The watchdog implements the default ready endpoint `/_/ready`.
- No authentication option is available for development or within enterprise networks.
- SASL authentication can be used with cloud-hosted Kafka brokers.
- Custom TLS CA bundles can be used for self-signed certificates.
- OpenFaaS Pro on Kubernetes supports GPUs for functions via Profiles.
- OpenFaaS Edge supports Nvidia GPUs for core services only.
- The containerd configuration does not need to be updated to use gVisor with OpenFaaS
  Edge.
- Functions and services deployed on OpenFaaS Edge can use the service name when configuring
  the telemetry collection endpoint e,g. alloy:4317 or alloy:4318.
- If your registry requires authentication, you'll have to create a config file for
  the credentials.
- It is possible to run a self-hosted registry with a self-signed certificate directly
  on the host with systemd.
- The only valid value for provider 'name' is 'openfaas'.
- The gateway URL can be hard-coded into the YAML file or overridden at deployment
  time with the --gateway flag or OPENFAAS_URL env-var.
- TLS is required for any OpenFaaS gateway exposed to the Internet.
- Ensure DNS records are created for both the gateway and dashboard.
- FunctionIngress records are always created in the OpenFaaS namespace.
- The FunctionIngress currently makes use of the HTTP01 challenge.
- Asynchronous invocations do not make sense with a HTTP GET verb since they are queued
  and deferred.
- A 202 Accepted message will be issued in response to asynchronous calls.
- Private registry support is part of OpenFaaS Standard/for Enterprises
- Functions using static image tags (e.g. 'latest' tags) are refreshed during an update.
- Secrets should never be set in environment variables, they are made available in
  the container file-system.
- Secrets created with faas-cli can only contain one file, but secrets created with
  kubectl can contain multiple elements.
- All workloads must serve HTTP traffic on TCP port 8080
- Implement /_/health as a HTTP endpoint
- Implement /_/ready as a HTTP endpoint
- Functions must implement '/_/health' and '/_/ready' as HTTP endpoints
- OpenFaaS Pro adds the ability to have a function invoked by Cron and any other number
  of connectors at the same time, with structured JSON logging available and additional
  metrics.
- When using the Community Edition (CE), no other connectors can be used in conjunction
  with the cron-connector.
- The connector can be deployed via Helm or arkade.
- Multiple cron expressions can be added to the schedule annotation separated by a
  semicolon.
- Additional RBAC permissions are required to work with namespaces, using a ClusterRole
  is currently supported for multiple namespaces.
- A namespace is only considered a function namespace if it has been annotated with
  openfaas="1".
- 'Functions are exposed on two routes: /function/ and /async-function/'
- Most OpenFaaS templates enable full control of the HTTP request and response
- Profiles must be pre-created, similar to Secrets, usually by the cluster admin.
- By default, OpenFaaS for Enterprises will drop all Linux capabilities from the container.
- A popular alternative container runtime class is gVisor that provides additional
  sandboxing between containers.
- 'The constraint of whenUnsatisfiable: DoNotSchedule will mean pods are not scheduled
  if they cannot be balanced evenly.'
- The OpenFaaS REST API is used to manage functions, it has basic authentication enabled
  by default.
- OpenFaaS Pro feature designed for commercial use and production systems.
- Configuration is via a label on the function.
- Scaling functions to zero replicas can improve efficiency and reduce costs in your
  Kubernetes clusters.
- The watchdog becomes an 'init process' with an embedded HTTP server written in Golang,
  it can support concurrent requests, timeouts and healthchecks.
- The classic watchdog has historically been used for all of the official OpenFaaS
  templates.
- There is no persistence in the Prometheus Pod, so restarting the Prometheus will
  remove all historic metrics.
- Default retention period is 15 days.
- The OpenFaaS gateway provides a REST API for managing functions, recording metrics
  and scaling them.
- Functions can be triggered via HTTP, Cron, AWS SQS or Apache Kafka.
- OpenFaaS Pro is meant for production.
- It is recommended that you have high-availability for the OpenFaaS components.
- It is recommended that you use a read-only filesystem. You will still be able to
  write to /tmp/
- Load-testing should only be carried out with Kubernetes.
- The default configuration for OpenFaaS targets a development-environment and not
  production.
- There are known issues with CoreDNS under high load, you should consider implementing
  on of the approaches described in KEP 30 NodeLocal DNS Cache.
- 'Functions timeout due to one of the following: Using the default timeout set in
  the Helm chart in values.yaml for the gateway, Using the default timeout in the
  Function''s stack.yaml, or not setting all of the timeout environment variables,
  An error in the function''s code - a blocking I/O operation, a deadlock, or a crash/premature
  exit of the process, Using an Ingress Controller or Load Balancer which has a low
  default timeout.'
- 'To extend the timeout to 30 minutes, use nginx.ingress.kubernetes.io/proxy-read-timeout:
  "1800".'
- If your cluster is remote or not running on port 8080 - then edit this in the YAML
  file before continuing.
- If you get an error at deployment, ensure that prerequisites are followed.
- Deploy OpenFaaS using one of the Deployment guides
- You can use faas-cli to list and invoke your functions
- Usually, Ingress is used when a cluster has a public IP address, and you want to
  obtain TLS certificates from Let's Encrypt.
- Using a local registry is an optimisation, which requires some additional tooling
  and configuration.
- Docker for Mac users may need to change 'localhost' to the IP address of their LAN
  or WiFi adapter.
- Prometheus metrics retention period is only 15 days by default.
- OpenFaaS Pro is a commercially licensed distribution of OpenFaaS with additional
  features, configurations and commercial support from the founders.
- OpenFaaS Standard is meant for any team making use of OpenFaaS at work, whether
  external, or internal-facing.
- OpenFaaS for Enterprises is meant for multi-tenancy, and regulated companies who
  have additional requirements around security, compliance and support.
- OpenFaaS was started in 2016 by Alex Ellis, and now has hundreds of contributors
  across dozens of repositories.
- The `FunctionIngress` currently makes use of the `HTTP01` challenge, so a separate
  TLS certificate will be obtained for each FunctionIngress you create.
- Custom annotations for Ingress can be added to the `FunctionIngress`.
- Use cert-manager to automate TLS certificate management.
errors:
- '401 Unauthorized: Check your credentials.'
- '404 Not Found: Verify the endpoint exists.'
- '401 Unauthorized: Recheck OAuth scopes or token expiration'
- 'REQUEST_LIMIT_EXCEEDED: Throttle API calls or reduce frequency'
- 'QUERY_TIMEOUT: Break down filters or add selectivity'
- '401 Unauthorized: Check credentials for the gateway.'
- 'TIMEOUT: Increase timeout settings for all components.'
- I am getting an incorrect password error or authorized access.
- I forgot my credentials for the gateway.
- '401 Unauthorized: Recheck Authorization header'
- '403 Forbidden: Invalid token'
- '400 Bad Request: Missing .url in request body'
- '401 Unauthorized: Recheck token validation.'
- 'Unauthorized: Recheck JWT signing key or token expiration'
- '429 Conflict: Indicates that the function is too busy to process the request.'
- 'HTTP/1.1 429 Too Many Requests: Concurrent request limit exceeded.'
- Webhook delivery may fail if the signature does not match the payload
- Timeouts may occur if Ingress Controller timeouts are not configured correctly.
- '202 Accepted: Indicates the request has been accepted for processing.'
- '429: Too Many Requests - limit concurrency with `max_inflight` environment variable'
- Timeouts on connections may occur due to Ingress Controller or Load Balancer settings.
auth_info:
  mentioned_objects:
  - JWT
  - Kubernetes Service account
  - JWT signing key
  - OAuth client secret
  - IAM
  - Bearer tokens
  - API keys
  - signing key secret
client:
  base_url: http://127.0.0.1:8080
  auth:
    type: Basic
    location: header
    header_name: Authorization
  headers:
    Content-Type: application/json
source_metadata: null
