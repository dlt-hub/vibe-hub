resources:
- name: screenshot
  endpoint:
    path: /screenshot
    method: GET
    data_selector: data
    params: {}
- name: screenshot
  endpoint:
    path: /v1/YOUR_API_KEY/TOKEN
    method: GET
    data_selector: screenshot
- name: screenshot
  endpoint:
    path: /screenshot
    method: POST
    data_selector: data
    params: {}
- name: screenshot
  endpoint:
    path: /v1/YOUR_API_KEY/TOKEN
    method: GET
    data_selector: screenshot
    params: {}
- name: screenshot
  endpoint:
    path: /v1/API_KEY/TOKEN/png
    method: GET
    data_selector: screenshot
    params:
      url: example.com
      width: 320
- name: screenshot
  endpoint:
    path: /v1/{apiKey}/{token}/png
    method: GET
- name: screenshot
  endpoint:
    path: /v1/{apikey}/{token}/{format}
    method: GET
    data_selector: screenshot
    params:
      url: required
      force: optional
      full_page: optional
      thumb_width: optional
      width: optional
      height: optional
      quality: optional
- name: screenshot
  endpoint:
    path: /screenshot
    method: GET
    data_selector: screenshot
    params:
      width: 1280
      height: 1024
      thumb_width: 240
      full_page: 'true'
      force: 'false'
- name: screenshot
  endpoint:
    path: /screenshot
    method: GET
    data_selector: screenshot
- name: screenshot
  endpoint:
    path: /screenshot
    method: POST
    data_selector: output
    params: {}
- name: screenshot
  endpoint:
    path: /v1/{api_key}/{api_secret}/png
    method: GET
    data_selector: screenshot.url
    params: {}
- name: screenshot
  endpoint:
    path: /{api_key}/png
    method: GET
    data_selector: body
    params:
      url: site
      width: '1400'
      height: '900'
- name: screenshot
  endpoint:
    path: /v1/{apiKey}/png
    method: GET
    data_selector: response
    params: {}
- name: screenshot
  endpoint:
    path: /screenshot
    method: GET
    data_selector: screenshot_url
- name: screenshot
  endpoint:
    path: /v1/{api_key}/png
    method: GET
    data_selector: ''
    params:
      url: https://www.howtogeek.com/
      width: '1920'
      full_page: 'true'
      click_accept: 'true'
      block_ads: 'true'
      hide_cookie_banners: 'true'
      retina: 'true'
      hide_selector: '#notificationAllowPrompt'
- name: automated_screenshots
  endpoint:
    path: /automated-screenshots
    method: GET
    data_selector: records
- name: screenshot_api
  endpoint:
    path: /screenshot-api
    method: GET
    data_selector: records
- name: render_sync
  endpoint:
    path: /v1/render/sync
    method: POST
    data_selector: ''
    params: {}
- name: render_async
  endpoint:
    path: /v1/render/async
    method: POST
    data_selector: ''
    params: {}
- name: render_sync
  endpoint:
    path: /v1/render/sync
    method: POST
- name: render_async
  endpoint:
    path: /v1/render/async
    method: POST
- name: render
  endpoint:
    path: /v1/render
    method: POST
    data_selector: response
    params: {}
- name: pdf_options
  endpoint:
    path: /render/pdf
    method: GET
    data_selector: options
- name: s3_storageclass
  endpoint:
    path: /s3/storage/class
    method: GET
- name: render_sync
  endpoint:
    path: /v1/render/sync
    method: POST
- name: render_async
  endpoint:
    path: /v1/render/async
    method: POST
- name: screenshot
  endpoint:
    path: /v1/{api_key}/{request_id}/jpeg
    method: GET
    data_selector: screenshot
- name: screenshot
  endpoint:
    path: /screenshot
    method: POST
    data_selector: data
    params: {}
- name: screenshot
  endpoint:
    path: /screenshot
    method: GET
    data_selector: screenshotData
- name: projects
  endpoint:
    path: /v1/projects
    method: GET
    data_selector: projects
- name: render
  endpoint:
    path: /v1/render
    method: POST
    data_selector: result
    params: {}
- name: render_sync
  endpoint:
    path: /v1/render/sync
    method: POST
    data_selector: url
- name: render_async
  endpoint:
    path: /v1/render/async
    method: POST
    data_selector: url
- name: render_sync
  endpoint:
    path: /v1/render/sync
    method: POST
    data_selector: null
    params: {}
- name: render_async
  endpoint:
    path: /v1/render/async
    method: POST
    data_selector: null
    params: {}
- name: render_sync
  endpoint:
    path: /v1/render/sync
    method: POST
    data_selector: null
    params: {}
- name: render_sync
  endpoint:
    path: /v1/render/sync
    method: POST
    data_selector: renderId
- name: render_async
  endpoint:
    path: /v1/render/async
    method: POST
    data_selector: renderId
- name: full_page_screenshots
  endpoint:
    path: /v1/render/sync
    method: POST
    data_selector: ''
    params: {}
- name: screenshot
  endpoint:
    path: /v1/render/sync
    method: POST
    data_selector: response
- name: render_sync
  endpoint:
    path: /v1/render/sync
    method: POST
    data_selector: ''
- name: render_async
  endpoint:
    path: /v1/render/async
    method: POST
    data_selector: ''
- name: s3_config
  endpoint:
    path: /v1/s3/config
    method: POST
    data_selector: data
- name: s3_configuration
  endpoint:
    path: /s3/configuration
    method: POST
    data_selector: response
    params:
      bucket_name: private-render-demo
      region: eu-west-2
      private_bucket: true
- name: s3_configuration
  endpoint:
    path: /v1/render/sync
    method: POST
    data_selector: results
    params:
      bucket_name: urlbox-renders
      region: auto
- name: gcs_bucket
  endpoint:
    path: /urlbox-renders-private
    method: POST
    data_selector: renders
    params: {}
- name: render
  endpoint:
    path: /v1/render/sync
    method: POST
    data_selector: render_result
    params:
      use_s3: true
      s3_path: myscreenshots/test.png
- name: s3_configuration
  endpoint:
    path: /v1/render/sync
    method: POST
    data_selector: data
    params:
      use_s3: true
      s3_path: urlbox_test/deleteme.txt
- name: render_sync
  endpoint:
    path: /v1/render/sync
    method: POST
- name: render_async
  endpoint:
    path: /v1/render/async
    method: POST
- name: screenshot
  endpoint:
    path: /v1/{apikey}/{token}/{format}
    method: POST
    data_selector: result
    params: {}
- name: render_sync
  endpoint:
    path: /v1/render/sync
    method: POST
- name: render_async
  endpoint:
    path: /v1/render/async
    method: POST
- name: generate_screenshot
  endpoint:
    path: /v1/API_KEY/TOKEN/png
    method: GET
    data_selector: screenshot
    params:
      url: example.com
      width: 1280
      height: 1024
- name: render_sync
  endpoint:
    path: /v1/render/sync
    method: POST
- name: render_async
  endpoint:
    path: /v1/render/async
    method: POST
notes:
- Accurate automated screenshots
- High volume capabilities
- We know of two issues impacting some complex full page screenshots. We have workarounds
  for these, please contact us if your screenshots are affected.
- We are providing Long Term Support for the current version of our stable engine
  as an option to customers on our Business and Enterprise plans.
- If you are on the Ultra plan we will provide access at no additional cost until
  Tuesday 14th January.
- Requires API key for authentication.
- A single API call to screenshot any URL or chunk of HTML.
- Over 100 rendering options including custom JS.
- Uses API key for authentication.
- Uses API key for authentication
- Supports multiple output formats including PNG, JPEG, WEBP, AVIF, SVG, PDF and HTML
- Urlbox's API is straightforward and allows customization of screenshot options.
- Supports full-page screenshots as a single image.
- Responsive screenshots allow simulating different screen sizes.
- Can block specific sections and dismiss cookie banners.
- Urlbox API isn't limited to capturing screenshots in the PNG format. You can use
  a whole host of formats including PDF.
- Urlbox requires an account to retrieve API credentials.
- Urlbox doesn't offer a Golang package, but they offer a straightforward API.
- Screenshots are taken in 1440 x 900 by default.
- Urlbox removes ads and cookie notices from screenshots.
- It supports full-page screenshots.
- You must sign up and retrieve an API key to use the service.
- Uses Bearer token authentication with your secret key as the token
- Default response type is JSON.
- Options to control how Urlbox caches your screenshots or PDF's. Please note that
  caching only applies to requests from render links.
- The Render Link should be formatted correctly to get the screenshots.
- We offer a 7 day free trial period.
- The Owner reserves the right to make changes to this privacy policy at any time.
- Supports high-volume screenshot requests
- Requires valid API key and secret for access
- Each project has its own unique publishable and secret key.
- You can rotate your API keys if necessary.
- Webhooks allow your application to receive information when a render has been generated.
- Rate limits apply based on the usage headers provided.
- The api is rate limited to prevent abuse and ensure stability.
- Requests to cached render links do not count against your monthly quota.
- API requests are not cached, so every request will generate a fresh render.
- When using proxies, expect slower render times as the request has to go through
  the proxy.
- Some domains are blocked by proxy providers, especially high value scraping targets.
- By default, Urlbox's rendering service will save your renders to our own cloud storage.
- Renders will expire after 30 days.
- Requests made in the sandbox will count towards your monthly quota.
- Ensure that ACLs are enabled for the bucket.
- Block public access settings must be configured correctly.
- Urlbox will not be able to serve the renders from your bucket.
- Bucket created with Enforce public access prevention.
- Service account created named 'urlbox-storage'.
- Service account must have 'Storage Object Admin' role.
- Authentication is through generating the signed token, which is a HMAC-SHA256 hash
  of the query string, signed by your project secret key.
- It is recommended to use authenticated render links when using render links in public.
- Only required option is a url
errors:
- 'NoApiKeySupplied: No API key was supplied in the request'
- 'UserNotFoundError: A user for that API key could not be found'
- 'ApiKeyNotFound: The API key was not found'
- 'ProjectNotFound: A project for the API key was not found'
- 'ProjectNotEnabled: The project is not enabled'
- 'NoPlan: The user currently has no plan'
- 'NotConfirmed: The user has not confirmed their email address'
- 'NotActive: The user is not active (subscription has expired)'
- 'OptionNotAvailableOnPlan: The feature is not available on the user''s plan'
- 'InvalidOptions: The options supplied were invalid'
- 'InvalidTtl: The TTL supplied was invalid'
- 'NoS3BucketConfigured: The user has not configured an S3 bucket for their project'
- 'RateLimitExceededError: The user''s rate limit has been exceeded'
- 'TrialUsageReached: The user''s trial usage has been reached'
- 'HTMLProcessError: The HTML could not be processed'
- 'InvalidQuery: The query string was invalid'
- 'NoUrlSupplied: No URL was supplied in the request'
- 'UrlWasNotAStringError: The URL supplied was not a string'
- 'InvalidURLExtensionError: The URL extension was invalid'
- 'InvalidURLError: The URL was invalid'
- 'URLDoesNotResolveError: The URL does not resolve to a valid IP address'
- 'RenderTimeoutError: The render timed out before it could be completed'
- 'TokenlessRequestsNotEnabled: The user has not enabled tokenless (basic render link)
  requests'
- 'NoQuerySent: No query was sent in the request'
- 'TokenNotMatchedError: The token supplied did not match the token for the query
  string'
- 'EngineResponseNotOkError: The rendering engine was not able to generate the render'
- 'EngineAsyncResponseNotOkError: The rendering engine was not able to generate the
  render (async)'
- 'TimedOutError: The request timed out'
- 'NoRenderIdProvided: No render ID was provided (when looking up a render)'
- 'ApiKeyWrongFormat: The API key was not sent in the correct format'
- '400 Bad Request: Check the API parameters'
- '401 Unauthorized: Verify API key'
- '429 Too Many Requests: Rate limit exceeded'
- 'REQUEST_LIMIT_EXCEEDED: Throttle API calls or reduce frequency'
- 'QUERY_TIMEOUT: Break down filters or add selectivity'
- '401 Unauthorized: Recheck API key or token expiration'
- '400 Bad Request: Check the parameters sent in the request.'
- '401 Unauthorized: Verify your API key.'
- '401 Unauthorized: Check API key and token'
- '500 Internal Server Error: Try again later'
- 'API_KEY_INVALID: Recheck your API key.'
- 'REQUEST_LIMIT_EXCEEDED: Throttle API calls or reduce frequency.'
- '400 Bad Request: Check request parameters.'
- '401 Unauthorized: Validate API key and secret.'
- '401 Unauthorized: Check your API key and secret.'
- 'INVALID_API_KEY: Check if the API key is correct.'
- '400 Bad Request: Validate your request parameters.'
- '401 Unauthorized: Recheck API key'
- 'INVALID_API_KEY: Check your API key and try again'
- 'REQUEST_LIMIT_EXCEEDED: Reduce frequency of requests'
- '400 BAD REQUEST: Check the parameters you are sending'
- '400: Page returned 400 and fail_on_4xx was true'
- '429 Too Many Requests: Exceeded rate limit.'
- '429: Rate limit exceeded'
- 'QUERY_TIMEOUT: Break down filters or add selectivity.'
- 'ERR_TUNNEL_CONNECTION_FAILED: Proxy blocking requests to certain domains.'
- Bucket does not exist
- Bucket does not have the correct public settings
- IAM user does not have the correct permissions
- '401 Unauthorized: Recheck token or authentication setup.'
auth_info:
  mentioned_objects:
  - ApiKey
  - ApiSecret
  - WebhookSecret
  - API credentials
client:
  base_url: https://api.urlbox.io
  auth:
    type: oauth2
source_metadata: null
