resources:
- name: access_evaluation
  endpoint:
    path: /v1/access/evaluation
    method: POST
    data_selector: decision
- name: bulk_access_evaluations
  endpoint:
    path: /v1/access/evaluations
    method: POST
    data_selector: evaluations
- name: subject_search
  endpoint:
    path: /v1/subjects
    method: POST
    data_selector: subjects
- name: resource_search
  endpoint:
    path: /v1/resources
    method: POST
    data_selector: resources
- name: action_search
  endpoint:
    path: /v1/actions
    method: POST
    data_selector: actions
- name: permit_check
  endpoint:
    path: /allowed
    method: POST
    data_selector: result
- name: bulk_check
  endpoint:
    path: /bulk/check
    method: POST
- name: allowed_url
  endpoint:
    path: /allowed_url
    method: POST
    data_selector: response
    params: {}
- name: proxy_configs
  endpoint:
    path: /facts/{project_id}/{env_id}/proxy_configs
    method: POST
    data_selector: null
    params: {}
- name: allowed_url
  endpoint:
    path: /allowed_url
    method: POST
    data_selector: null
    params: {}
- name: permissions_check
  endpoint:
    path: /api/something
    method: POST
    data_selector: permittedList
    params: {}
- name: resource
  endpoint:
    path: /api/resource
    method: POST
    data_selector: resource
    params: {}
- name: roles
  endpoint:
    path: /api/roles
    method: POST
    data_selector: roles
    params: {}
- name: syncUser
  endpoint:
    path: /api/syncUser
    method: POST
    data_selector: user
    params: {}
- name: roleAssignments
  endpoint:
    path: /api/roleAssignments
    method: POST
    data_selector: assignment
    params: {}
- name: users
  endpoint:
    path: /v2/users
    method: GET
    data_selector: data
    params: {}
- name: tenants
  endpoint:
    path: /v2/tenants
    method: GET
    data_selector: data
    params: {}
- name: PDP
  endpoint:
    path: /v2/pdp
    method: GET
    data_selector: data
- name: users
  endpoint:
    path: /api/users
    method: POST
    data_selector: result
- name: tenants
  endpoint:
    path: /api/tenants
    method: GET
    data_selector: result
- name: users
  endpoint:
    path: /v2/facts/{projectKey}/{environmentKey}/users
    method: GET
    data_selector: records
- name: tenants
  endpoint:
    path: /v2/facts/{projectKey}/{environmentKey}/tenants
    method: GET
    data_selector: records
- name: document
  endpoint:
    path: /permitio_resource/document
    method: POST
    data_selector: resource
    params: {}
- name: document
  endpoint:
    path: /api/permit.io/resource/document
    method: POST
    data_selector: data
    params: {}
- name: reader
  endpoint:
    path: /api/permit.io/role/reader
    method: POST
    data_selector: data
    params: {}
- name: writer
  endpoint:
    path: /api/permit.io/role/writer
    method: POST
    data_selector: data
    params: {}
- name: admin
  endpoint:
    path: /api/permit.io/role/admin
    method: POST
    data_selector: data
    params: {}
- name: document
  endpoint:
    path: /api/permit.io
    method: POST
    data_selector: resources
    params: {}
- name: reader
  endpoint:
    path: /api/permit.io
    method: POST
    data_selector: roles
    params: {}
- name: writer
  endpoint:
    path: /api/permit.io
    method: POST
    data_selector: roles
    params: {}
- name: admin
  endpoint:
    path: /api/permit.io
    method: POST
    data_selector: roles
    params: {}
- name: permitio_resource
  endpoint:
    path: /resources
    method: POST
    data_selector: data
    params: {}
- name: permitio_role
  endpoint:
    path: /roles
    method: POST
    data_selector: data
    params: {}
- name: permitio_resource
  endpoint:
    path: /api/permit.io
    method: POST
- name: permitio_role
  endpoint:
    path: /api/permit.io
    method: POST
- name: permitio_resource
  endpoint:
    path: /api/permitio_resource
    method: POST
    data_selector: resource
    params: {}
- name: permitio_role
  endpoint:
    path: /api/permitio_role
    method: POST
    data_selector: role
    params: {}
- name: document
  endpoint:
    path: /permitio/resource/document
    method: POST
    data_selector: attributes
    params: {}
- name: reader
  endpoint:
    path: /permitio/role/reader
    method: POST
    data_selector: attributes
    params: {}
- name: writer
  endpoint:
    path: /permitio/role/writer
    method: POST
    data_selector: attributes
    params: {}
- name: admin
  endpoint:
    path: /permitio/role/admin
    method: POST
    data_selector: attributes
    params: {}
- name: resource
  endpoint:
    path: /api/v2/resources
    method: GET
    data_selector: resources
- name: role
  endpoint:
    path: /api/v2/roles
    method: GET
    data_selector: roles
- name: projects
  endpoint:
    path: /v2/projects
    method: GET
    data_selector: projects
- name: repos
  endpoint:
    path: /v2/projects/<your-project-id-or-key>/repos
    method: POST
    data_selector: repos
- name: activate_repo
  endpoint:
    path: /v2/projects/<your-project-id-or-key>/repos/<your-repo-id-or-key>/activate
    method: PUT
    data_selector: activate
- name: users
  endpoint:
    path: /api/users
    method: POST
    data_selector: user
    params: {}
- name: posts
  endpoint:
    path: /posts
    method: POST
    data_selector: check
    params: {}
- name: users
  endpoint:
    path: /api/users
    method: POST
    data_selector: user
    params: {}
- name: posts
  endpoint:
    path: /posts
    method: POST
    data_selector: post
    params: {}
- name: roles
  endpoint:
    path: /api/roles
    method: POST
    data_selector: role
    params: {}
- name: register_user
  endpoint:
    path: /register
    method: POST
    data_selector: user
    params: {}
- name: create_post
  endpoint:
    path: /posts
    method: POST
    data_selector: user
    params: {}
- name: posts
  endpoint:
    path: /posts
    method: GET
    data_selector: records
- name: comments
  endpoint:
    path: /comments
    method: GET
    data_selector: records
- name: users
  endpoint:
    path: /api/users
    method: POST
    data_selector: user
    params: {}
- name: posts
  endpoint:
    path: /api/posts
    method: POST
    data_selector: post
    params: {}
- name: posts
  endpoint:
    path: /posts
    method: POST
    data_selector: message
    params: {}
- name: register
  endpoint:
    path: /register
    method: POST
    data_selector: message
    params: {}
- name: register_user
  endpoint:
    path: /register
    method: POST
    data_selector: user
    params: {}
- name: check_access
  endpoint:
    path: /posts
    method: POST
    data_selector: user
    params: {}
- name: posts
  endpoint:
    path: /posts
    method: POST
    data_selector: resource
    params: {}
- name: register
  endpoint:
    path: /register
    method: POST
    data_selector: user
    params: {}
- name: Posts
  endpoint:
    path: /api/protected/posts
    method: GET
    data_selector: message
- name: Register User
  endpoint:
    path: /api/register
    method: POST
    data_selector: message
- name: posts
  endpoint:
    path: /posts
    method: GET
    data_selector: records
- name: register
  endpoint:
    path: /register
    method: POST
    data_selector: records
- name: posts
  endpoint:
    path: /posts
    method: POST
- name: register
  endpoint:
    path: /register
    method: POST
- name: health_check
  endpoint:
    path: /
    method: GET
- name: posts
  endpoint:
    path: /posts
    method: POST
    data_selector: result
- name: register
  endpoint:
    path: /register
    method: POST
    data_selector: result
- name: posts
  endpoint:
    path: /posts
    method: POST
- name: register
  endpoint:
    path: /register
    method: POST
    data_selector: user
    params: {}
- name: posts
  endpoint:
    path: /posts
    method: POST
    data_selector: post
    params: {}
- name: posts
  endpoint:
    path: /posts
    method: POST
    data_selector: post
- name: register
  endpoint:
    path: /register
    method: POST
    data_selector: user
- name: roles
  endpoint:
    path: /v2/redoc#tag/Roles/operation/create_role
    method: POST
    data_selector: roles
    params: {}
- name: resources
  endpoint:
    path: /v2/redoc#tag/Roles/operation/create_resource
    method: POST
    data_selector: resources
    params: {}
- name: roles
  endpoint:
    path: /roles
    method: POST
    data_selector: roles
    params: {}
- name: resources
  endpoint:
    path: /resources
    method: POST
    data_selector: resources
    params: {}
- name: permissions
  endpoint:
    path: /permissions
    method: POST
    data_selector: permissions
    params: {}
- name: syncUser
  endpoint:
    path: /sync
    method: POST
    data_selector: syncUser
    params: {}
- name: deleteUser
  endpoint:
    path: /users
    method: DELETE
    data_selector: deleteUser
    params: {}
- name: tenants
  endpoint:
    path: /api/tenants
    method: POST
    data_selector: data
- name: syncUser
  endpoint:
    path: /api/syncUser
    method: POST
    data_selector: data
- name: assignRole
  endpoint:
    path: /api/assignRole
    method: POST
    data_selector: data
- name: notes
  endpoint:
    path: /api/notes
    method: GET
    data_selector: data
    params: {}
- name: user
  endpoint:
    path: /user
    method: GET
    data_selector: data
- name: logto_user
  endpoint:
    path: /api/logto/user
    method: GET
    data_selector: user
    params: {}
- name: check_permission
  endpoint:
    path: /api/check-permission
    method: GET
    data_selector: isPermitted
    params: {}
- name: webhook_logto
  endpoint:
    path: /api/webhooks/logto
    method: POST
    data_selector: event
    params: {}
- name: order_dish
  endpoint:
    path: /order_dish
    method: POST
    data_selector: order_confirmation
    params: {}
- name: access_requests
  endpoint:
    path: /access-requests
    method: POST
    data_selector: data
- name: operation_approvals
  endpoint:
    path: /operation-approvals
    method: POST
    data_selector: data
- name: resource_instances
  endpoint:
    path: /resource-instances
    method: GET
    data_selector: data
- name: access_requests
  endpoint:
    path: /access_requests
    method: POST
    data_selector: request
- name: operation_approval_requests
  endpoint:
    path: /operation_approval_requests
    method: POST
    data_selector: request
- name: resource_instances
  endpoint:
    path: /resources
    method: GET
    data_selector: instances
- name: user_sync
  endpoint:
    path: /api/sync_user
    method: POST
    data_selector: response
    params: {}
- name: resource_instances
  endpoint:
    path: /api/resource_instances
    method: POST
    data_selector: response
    params: {}
- name: user
  endpoint:
    path: /api/users
    method: POST
    data_selector: users
    params: {}
- name: resource_instance
  endpoint:
    path: /api/resource_instances
    method: POST
    data_selector: instances
    params: {}
- name: token
  endpoint:
    path: /token
    method: POST
    data_selector: access_token
    params: {}
- name: ws_chat
  endpoint:
    path: /ws/chat
    method: GET
    data_selector: content
    params: {}
- name: access_requests
  endpoint:
    path: /access-requests
    method: POST
    data_selector: data
    params: {}
- name: operation_approval_requests
  endpoint:
    path: /operation-approval-requests
    method: POST
    data_selector: data
    params: {}
- name: resource_instances
  endpoint:
    path: /resource-instances
    method: GET
    data_selector: data
    params: {}
- name: access_request
  endpoint:
    path: /api/access-request
    method: POST
    data_selector: request
    params: {}
- name: Operation Approval
  endpoint:
    path: /embeddable-uis/element/operation-approval
    method: GET
    data_selector: operation_approval_data
    params: {}
- name: approval_management
  endpoint:
    path: /embeddable-uis/element/approval-management
    method: GET
- name: activity_logs
  endpoint:
    path: /activity/logs
    method: GET
    data_selector: logs
    params:
      timestamp_from: '{{timestamp_from}}'
      timestamp_to: '{{timestamp_to}}'
- name: user
  endpoint:
    path: /users
    method: POST
    data_selector: result
    params: {}
- name: permissions
  endpoint:
    path: /permissions
    method: POST
    data_selector: result
- name: pdp
  endpoint:
    path: /v2/check
    method: POST
    data_selector: result
    params: {}
- name: permissions
  endpoint:
    path: /check
    method: POST
    data_selector: result
    params: {}
- name: tenants
  endpoint:
    path: /list_tenants
    method: GET
    data_selector: tenants
    params: {}
- name: users
  endpoint:
    path: /users
    method: POST
    data_selector: user
- name: create_user
  endpoint:
    path: /v2/users
    method: POST
    data_selector: user
    params: {}
- name: policy
  endpoint:
    path: /policy
    method: GET
    data_selector: policies
- name: user
  endpoint:
    path: /user
    method: GET
    data_selector: users
- name: role
  endpoint:
    path: /role
    method: GET
    data_selector: roles
- name: tenant
  endpoint:
    path: /tenant
    method: GET
    data_selector: tenants
- name: workspaces
  endpoint:
    path: /workspaces
    method: GET
    data_selector: workspaces
- name: projects
  endpoint:
    path: /projects
    method: GET
    data_selector: projects
- name: environments
  endpoint:
    path: /environments
    method: GET
    data_selector: environments
- name: members
  endpoint:
    path: /members
    method: GET
    data_selector: members
- name: users
  endpoint:
    path: /v2/facts/{proj_id}/{env_id}/users
    method: POST
    data_selector: ''
    params: {}
- name: assign_user_role
  endpoint:
    path: /v2/facts/{proj_id}/{env_id}/users/{user_id}/roles
    method: POST
    data_selector: ''
    params: {}
- name: tenants
  endpoint:
    path: /v2/facts/tenants
    method: POST
    data_selector: ''
    params: {}
- name: bulk_users
  endpoint:
    path: /v2/facts/{proj_id}/{env_id}/bulk/users
    method: POST
    data_selector: ''
    params: {}
- name: role
  endpoint:
    path: /roles
    method: POST
- name: resource
  endpoint:
    path: /resources
    method: POST
- name: user
  endpoint:
    path: /users
    method: POST
- name: roles
  endpoint:
    path: /v2/schema/roles
    method: POST
    data_selector: null
    params: {}
- name: health
  endpoint:
    path: /health
    method: GET
    data_selector: health status
    params: {}
- name: metrics
  endpoint:
    path: /metrics
    method: GET
    data_selector: performance metrics
    params: {}
- name: redoc
  endpoint:
    path: /redoc
    method: GET
    data_selector: API documentation
    params: {}
- name: Dashboard
  endpoint:
    path: /api/dashboard
    method: POST
    data_selector: resource
    params: {}
- name: Widget
  endpoint:
    path: /api/widget
    method: POST
    data_selector: resource
    params: {}
- name: users
  endpoint:
    path: /facts/my_project/my_environment/users
    method: POST
    data_selector: data
    params: {}
- name: tenants
  endpoint:
    path: /facts/my_project/my_environment/tenants
    method: POST
    data_selector: data
    params: {}
- name: role_assignments
  endpoint:
    path: /facts/{proj_id}/{env_id}/role_assignments
    method: POST
    data_selector: data
    params: {}
- name: resource_instances
  endpoint:
    path: /facts/my_project/my_environment/resource_instances
    method: POST
    data_selector: data
    params: {}
- name: relationship_tuples
  endpoint:
    path: /facts/my_project/my_environment/relationship_tuples
    method: POST
    data_selector: data
    params: {}
- name: authorized_users
  endpoint:
    path: /authorized_users
    method: POST
    data_selector: results
- name: user_permissions
  endpoint:
    path: /user-permissions
    method: POST
    data_selector: results
- name: bulk_users
  endpoint:
    path: /facts/{proj_id}/{env_id}/bulk/users
    method: POST
    data_selector: operations
- name: bulk_tenants
  endpoint:
    path: /facts/{proj_id}/{env_id}/bulk/tenants
    method: POST
    data_selector: operations
- name: bulk_roles
  endpoint:
    path: /schema/{proj_id}/{env_id}/bulk/roles
    method: PUT
    data_selector: operations
- name: bulk_relationship_tuples
  endpoint:
    path: /facts/{proj_id}/{env_id}/relationship_tuples/bulk
    method: POST
    data_selector: operations
- name: bulk_users
  endpoint:
    path: /facts/{proj_id}/{env_id}/bulk/users
    method: POST
    data_selector: operations
    params: {}
- name: bulk_tenants
  endpoint:
    path: /facts/{proj_id}/{env_id}/bulk/tenants
    method: POST
    data_selector: operations
    params: {}
- name: bulk_role_assignments
  endpoint:
    path: /facts/{proj_id}/{env_id}/role_assignments/bulk
    method: POST
    data_selector: operations
    params: {}
- name: bulk_resource_instances
  endpoint:
    path: /facts/{proj_id}/{env_id}/bulk/resource_instances
    method: PUT
    data_selector: operations
    params: {}
- name: opal_scope
  endpoint:
    path: /projects/{project_id}/{env_id}/opal_scope
    method: PUT
    data_selector: data.entries
    params: {}
- name: document
  endpoint:
    path: ''
    method: ''
    data_selector: ''
    params: {}
- name: allowed_url
  endpoint:
    path: /allowed_url
    method: POST
    data_selector: data
- name: Proxy Config
  endpoint:
    path: /facts/<Project ID>/<Environment ID>/proxy_configs
    method: POST
- name: api_call
  endpoint:
    path: /proxy/<UNIQUE-MAPPING-ID>
    method: POST
    data_selector: data
- name: PDP Statistics
  endpoint:
    path: /stats/{project}/{environment}/pdps
    method: GET
    data_selector: data
- name: Message Delivery Stats
  endpoint:
    path: /stats/{project}/{environment}/messages
    method: GET
    data_selector: data
notes:
- It’s recommended to run Permit alongside your current authorization system for added
  confidence.
- MCPermit is a comprehensive permissions layer designed specifically for Model Context
  Protocol (MCP) servers.
- Permit custom rules are not limited to only one custom.rego file.
- Cloud PDP is limited to RBAC policies only and has a 1MB data restriction.
- Ensure that you are calling either your deployed Permit PDP or the Permit cloud
  PDP.
- Bulk checking is more performance-intensive than regular checking.
- Simple URL mapping is supported in PDP version 0.2.19 or higher
- Always escape special characters in your regex patterns (e.g., `\.` for dots in
  domains).
- Start patterns with `^` and end with `$` to ensure complete URL matching.
- Always use named capture groups for parameters you want to extract.
- Test your regex patterns thoroughly before deploying to production.
- While regex is powerful, try to keep patterns as simple as possible for better maintainability.
- FoAz is deprecated and no longer supported.
- The secret value is still required for now, even though it isn't used.
- The cloud PDP only supports RBAC for the time being. ABAC policies will fail.
- The PDP can be configured to work in offline mode, where it will use a local backup
  of the configuration, data, and policies.
- The cloud PDP is great for quick experimentation with Permit.
- In production deployments, it is best to deploy the Docker Container PDP for better
  latency and availability.
- The cloud PDP is not compatible with Attribute-based Access Control policies (ABAC)
  and Relationship-based Access Control policies (ReBAC).
- Uses API key for authentication
- The cloud PDP is not compatible with Attribute-based Access Control policies and
  also Relationship-based Access Control policies.
- API rate-limited to 5,000 overall requests per minute.
- For fact requests, the limit is 3,000 requests per minute.
- For schema requests, the limit is 1,000 requests per minute.
- API key is required for authentication
- Ensure to keep API key secure and do not expose it in public repositories
- Ensure you're using an environment-level API key, not a workspace-level key
- Verify the API key has the correct permissions
- Use environment-level API key for security.
- Environment-level API key required
- The API defaults to https://api.permit.io if no api_url is provided
- Implementing fine-grained authorization as part of your API Gateway or Reverse Proxy
  services.
- Ensure the deploy key is set up without Two-Factor Authentication (2FA) to allow
  unrestricted access.
- Kotlin SDK is in beta.
- Ensure you have a Permit.io account and the environment API key from your project
  settings.
- A Policy Decision Point (PDP) is required - either Permit’s hosted cloud PDP or
  a local PDP container.
- New users accessing the blog are assigned the Reader role and have permission to
  read posts.
- As users become Authors, they gain access to create and update blog posts and manage
  comments.
- The PDP server runs on port 7766 by default.
- Users are assigned the 'Reader' role by default upon registration.
- Use the blogging-platform template to create the policy.
- Users become Authors and gain access to create and update blog posts and manage
  comments.
- Uses API key for authentication — required for integration
- Users are assigned a default role of Reader.
- Users are assigned the Reader role by default.
- Uses API key for authentication.
- Users accessing the blog are assigned the Reader role.
- To authenticate the CLI, use the command 'permit login' to log in with your Permit
  account.
- Use middleware to protect routes and check permissions.
- Only users with the Author role can create posts.
- Uses API key for authentication — requires setup of Permit account and dashboard
- Only users with the Author role can create a post.
- Requires setup of Permit account and API key.
- To allow a user to create posts, assign them the Author role.
- Ensure roles in Auth0 match exactly with Permit roles (case-sensitive).
- Using Cognito JWT for user information and access token.
- Stytch integration requires API keys to be set as environment variables.
- Uses Hanko for passkey authentication and Permit.io for authorization.
- The application requires setting up Hanko and Permit services.
- Seamless user authentication through Logto
- Automatic user synchronization to Permit.io
- Use a tool like ngrok for local development to expose webhooks
- Optionally base URL for EU users https://scim.eu-central-1.permit.io/scim/v2/{permit_project_id}/{permit_env_id}
- Your configuration should resemble the provided example in the documentation
- Using 'Provision on-demand' feature in Entra ID has known limitations, therefore
  we recommend using 'Automatic' provisioning mode.
- Requires setup of environment variables as per the .env.example file.
- The server uses environment variables for configuration.
- Ensure to set the TENANT, RESOURCE_KEY, PERMIT_PDP_URL, and PERMIT_API_KEY variables.
- Make sure to specify users' names when syncing or creating users in Permit.
- For ReBAC authorization models, include the instance's name as an attribute when
  creating resource instances.
- Requires a valid username and password for authentication.
- To set up the server, you need to supply the environment variables defined in the
  .env.example file.
- Effortlessly manage users and their permissions as a single secure, embeddable UI
  component.
- In order to configure the User Management Element, you’ll need to create roles for
  your policy.
- Important to select the Tenant relevant for this element for it to function properly.
- Uses OAuth2 for authentication
- Uses OAuth2 for authentication.
- More SDK functionality coming soon.
- Permission checks are being run against the PDP container that's running locally
  on your machine - offering minimal latency and without leaving your network.
- User data never goes outside your system, keeping security high.
- The API `Create User` function will not assign the user with a role. This needs
  to be done separately via the [`Assign Role To User`](https://api.permit.io/v2/redoc#tag/Users/operation/assign_role_to_user)
  function.
- Max number of results for this api is 10,000
- This API is in EAP stage might be subject to changes.
- The default permissions are Admin role with actions Read, Create, Update, Delete;
  Editor role with actions Read, Create, Update; Viewer role with action Read.
- Permit delivers enterprise-grade, flexible, and high-performance authorization that
  outmatches traditional solutions.
- Permit supports API/SDK integrations and provides UI capabilities that allow for
  easy data manipulation and testing.
- Control plane includes relations between all entities needed for authorization.
- Data plane includes the actual data about those entities.
- Permit supports user synchronization through SCIM.
- Roles are the foundation of RBAC, determining user permissions.
- You will need your API key, which you can obtain from the Permit dashboard.
- Cloud PDP is limited to RBAC policies only, with 1MB data restriction.
- ABAC policy can enforce fine-grained access control based on user and resource attributes.
- Dynamic roles and resources are configured based on specific attributes.
- Dashboard resource acts as a parent to Widget resource.
- Use the bulkCheck function to validate multiple permissions in a single call.
- Use the filterObjects function to retrieve only the blog posts that users are permitted
  to access.
- Bulk calls are currently limited to 1000 items per call
- Bulk APIs are not meant for full/large-volume data migration; please consult with
  our support team before performing large scale data migrations
- Bulk calls are currently limited to 1000 items per call.
- Bulk APIs are not meant for full/large-volume data migration.
- Bulk APIs are not meant for full/large-volume data migration; consult with support
  before large migrations.
- Custom scopes are supported from PDP v0.2.15.
- Uses PDP version 0.5.1 or above for consistent updates.
- Uses proxy_facts_via_pdp — requires setup of PDP
- Increased API Latency due to waiting for data synchronization
- Sharded PDPs are currently available only for early-access-program customers, make
  sure to contact us to get access to it.
- This feature is deprecated and will be sunsetted on September 1st 2025.
- Automating updates and deployments through CI/CD ensures that changes are applied
  consistently and without human error across all environments.
- Using a Git-like model for environments, where each environment corresponds to a
  branch, helps teams manage development, staging, and production configurations separately
  yet consistently.
- For licensing details, questions, and getting started with Permit.io on-prem please
  reach out to us at support@permit.io
- FoAz is deprecated and no longer supported, but it is still available at app.permit.io/foaz-proxy.
- Fetching JWKs involves generating key pairs, extracting keys from trusted certificates,
  utilizing key management systems, or leveraging web services and identity providers.
- The feature is available in trial to all Permit users as a self-service.
- This api supports pagination.
errors:
- 'PDP_OPA_CLIENT_QUERY_TIMEOUT: Set timeout for the query.'
- '401 Unauthorized: Invalid API Key'
- '404 Not Found: Endpoint does not exist'
- 'REQUEST_LIMIT_EXCEEDED: Throttle API calls or reduce frequency.'
- 'API_KEY_INVALID: Ensure you''re using a valid API key'
- 'PERMISSION_DENIED: Check API key permissions'
- '401 Unauthorized: Check API key permissions'
- '400 Bad Request: Check the request format and required fields'
- 'API_KEY_ISSUE: Ensure you''re using an environment-level API key.'
- 'RESOURCE_DEPENDENCY: Use depends_on when resources reference each other.'
- '401 Unauthorized: Check your API key'
- '403 Forbidden: Insufficient permissions to access resource'
- 'API Key Issues: Ensure you''re using an environment-level API key, not a workspace-level
  key'
- 'Resource Dependencies: Use depends_on when resources reference each other'
- 'Permission Format: Use the format resource_key:action_key for permissions'
- '401 Unauthorized: Invalid API key'
- '403 Forbidden: Insufficient permissions'
- '401 Unauthorized: Recheck API key or authentication setup.'
- '403: You are not authorized to access this resource'
- '400: Missing required fields'
- '500: Permission check failed'
- '400 Bad Request: Missing required fields'
- '500 Internal Server Error: Permission check failed'
- '404: Not found'
- '500: Internal server error'
- '403 Forbidden: User does not have the required permissions.'
- '401 Unauthorized: Invalid or missing token.'
- '403 Forbidden: Token not valid!'
- '400: Missing required parameters'
- '500: Failed to sync user'
- '401 Unauthorized: Check API key and permissions.'
- '404 Not Found: Ensure the endpoint path is correct.'
- '400 Bad Request: Validate request parameters.'
- '403 Forbidden: User is NOT PERMITTED to create document!'
- '401 Unauthorized: Check that the API Key is valid.'
- '401 Unauthorized: Check API key or token.'
- '404 Not Found: Verify the endpoint path.'
- 'REQUEST_LIMIT_EXCEEDED: Throttle API calls or reduce frequency'
- 'QUERY_TIMEOUT: Break down filters or add selectivity'
- 'QUERY_TIMEOUT: Break down filters or add selectivity.'
- '424: Data update did not apply within the timeout period'
- '401 Unauthorized: Recheck OAuth scopes or token expiration'
auth_info:
  mentioned_objects:
  - Permit
  - PDP
  - syncUser
  - permit.check
  - Auth0
  - PermitServer
client:
  base_url: https://api.permit.io/v2
source_metadata: null
