resources:
- name: transactions
  endpoint:
    path: /v1/transactions
    method: GET
    data_selector: transactions
- name: transaction
  endpoint:
    path: /transaction
    method: GET
    data_selector: data
    params: {}
- name: payment_link
  endpoint:
    path: /payment_link
    method: POST
    data_selector: data
    params: {}
- name: payment
  endpoint:
    path: /payment
    method: POST
    data_selector: data
    params: {}
- name: transactions
  endpoint:
    path: /transactions
    method: GET
    data_selector: records
    params: {}
- name: payment
  endpoint:
    path: /payment
    method: POST
    data_selector: data
    params: {}
- name: transaction
  endpoint:
    path: /transactions
    method: GET
    data_selector: data
    params: {}
- name: transactions
  endpoint:
    path: /snap/v1/transactions
    method: POST
    data_selector: transaction_token
- name: payment
  endpoint:
    path: /payments
    method: POST
    data_selector: data
    params: {}
- name: transactions
  endpoint:
    path: /snap/v1/transactions
    method: POST
    data_selector: transactionToken
- name: snap_payment
  endpoint:
    path: /snap/snap.js
    method: GET
    data_selector: transaction_details
    params: {}
- name: transaction
  endpoint:
    path: /services/data/v1/transaction
    method: GET
    data_selector: records
- name: transaction
  endpoint:
    path: /snap/v1/transactions
    method: POST
    data_selector: token
- name: transaction
  endpoint:
    path: /snap/v1/transactions
    method: POST
    data_selector: token
- name: transactions
  endpoint:
    path: /snap/v1/transactions
    method: POST
    data_selector: ''
    params: {}
- name: transactions
  endpoint:
    path: /v2/transactions
    method: POST
    data_selector: transaction_data
    params: {}
- name: transactions
  endpoint:
    path: /snap/v1/transactions
    method: POST
    data_selector: transaction_details
    params: {}
- name: transactions
  endpoint:
    path: /snap/v1/transactions
    method: POST
    data_selector: transaction_details
- name: transactions
  endpoint:
    path: /snap/v1/transactions
    method: POST
    data_selector: transaction_details
    params: {}
- name: transactions
  endpoint:
    path: /transactions
    method: POST
    data_selector: transaction_details
    params: {}
- name: transactions
  endpoint:
    path: /v1/transactions
    method: POST
    data_selector: transaction_details
- name: transactions
  endpoint:
    path: /transactions
    method: POST
    data_selector: ''
    params: {}
- name: transactions
  endpoint:
    path: /snap/v1/transactions
    method: POST
    data_selector: transaction_details
    params: {}
- name: transaction
  endpoint:
    path: /services/data/vXX.X/sobjects/Transaction
    method: GET
    data_selector: records
    params: {}
- name: transactions
  endpoint:
    path: /v1/transactions
    method: POST
    data_selector: data
    params: {}
- name: charge
  endpoint:
    path: /v2/charge
    method: POST
    data_selector: response
    params: {}
- name: transaction
  endpoint:
    path: /v2/token/rba
    method: POST
    data_selector: data
    params: {}
- name: charge
  endpoint:
    path: /charge
    method: POST
- name: charge
  endpoint:
    path: /v2/charge
    method: POST
    data_selector: transaction_details
    params: {}
- name: bank_transfer_transaction
  endpoint:
    path: /bank_transfer
    method: POST
    data_selector: transaction
    params: {}
- name: transaction
  endpoint:
    path: /services/data/v1/transaction
    method: GET
    data_selector: records
    params: {}
- name: charge
  endpoint:
    path: /v2/charge
    method: POST
    data_selector: response
    params: {}
- name: charge
  endpoint:
    path: /v2/charge
    method: POST
    data_selector: response
- name: charge
  endpoint:
    path: /charge
    method: POST
    data_selector: transaction_details
    params: {}
- name: charge
  endpoint:
    path: /charge
    method: POST
    data_selector: null
    params: {}
- name: charge
  endpoint:
    path: /v2/charge
    method: POST
    data_selector: response
- name: transactions
  endpoint:
    path: /v2/transactions
    method: POST
    data_selector: transaction
    params: {}
- name: refunds
  endpoint:
    path: /v2/refunds
    method: POST
    data_selector: refund
    params: {}
- name: charge
  endpoint:
    path: /charge
    method: POST
    data_selector: response
    params: {}
- name: charge
  endpoint:
    path: /v2/charge
    method: POST
    data_selector: transaction_details
- name: charge
  endpoint:
    path: /charge
    method: POST
    data_selector: response
    params: {}
- name: register_card
  endpoint:
    path: /card/register
    method: GET
    data_selector: response
    params: {}
- name: transactions
  endpoint:
    path: /transactions
    method: GET
    data_selector: data
    params: {}
- name: payment_link
  endpoint:
    path: /payment-link
    method: POST
    data_selector: data
    params: {}
- name: transactions
  endpoint:
    path: /v1/transactions
    method: GET
    data_selector: transactions
    params: {}
- name: payments
  endpoint:
    path: /v1/payments
    method: POST
    data_selector: payments
    params: {}
- name: transactions
  endpoint:
    path: /v2/transactions
    method: POST
    data_selector: transaction
    params: {}
- name: Midtrans Snap Plugin
  endpoint:
    path: /midtrans/snap
    method: POST
    data_selector: data
    params: {}
- name: payment_notification
  endpoint:
    path: /snap/payment/notification
    method: POST
- name: finish_redirect
  endpoint:
    path: /snap/index/finish
    method: GET
- name: error_redirect
  endpoint:
    path: /snap/index/finish
    method: GET
- name: unfinish_redirect
  endpoint:
    path: /snap/index/finish
    method: GET
- name: payment_notification
  endpoint:
    path: /payment/notify/midtrans
    method: POST
- name: finish_redirect
  endpoint:
    path: /payment/finish/midtrans
    method: GET
- name: unfinish_redirect
  endpoint:
    path: /payment/finish/midtrans
    method: GET
- name: error_redirect
  endpoint:
    path: /payment/finish/midtrans
    method: GET
- name: merchant_account
  endpoint:
    path: /dashboard/merchant/account
    method: GET
    data_selector: merchant
- name: payment_methods
  endpoint:
    path: /dashboard/payment/methods
    method: GET
    data_selector: methods
- name: payment_notification
  endpoint:
    path: /payment_ipn/veritrans/notify
    method: POST
- name: finish_redirect
  endpoint:
    path: /payment_ipn/veritrans/completed
    method: GET
- name: error_redirect
  endpoint:
    path: /payment_ipn/veritrans/error
    method: GET
- name: unfinish_redirect
  endpoint:
    path: /payment_ipn/veritrans/unfinish
    method: GET
- name: transactions
  endpoint:
    path: /v1/transactions
    method: POST
    data_selector: data
    params: {}
- name: refunds
  endpoint:
    path: /v1/refunds
    method: POST
    data_selector: data
    params: {}
- name: promo_campaign
  endpoint:
    path: /promo/create
    method: POST
    data_selector: campaign
    params: {}
- name: promo_list
  endpoint:
    path: /promo/list
    method: GET
    data_selector: promotions
    params: {}
- name: transactions
  endpoint:
    path: /v1/transactions
    method: GET
    data_selector: transactions
    params: {}
- name: notifications
  endpoint:
    path: /notifications
    method: GET
    data_selector: notifications
    params: {}
- name: transaction_status
  endpoint:
    path: /get-status
    method: GET
    data_selector: status
    params: {}
- name: transactions
  endpoint:
    path: /transactions
    method: GET
    data_selector: records
    params: {}
- name: transaction
  endpoint:
    path: /v2/charge
    method: POST
    data_selector: transaction
    params: {}
- name: transaction
  endpoint:
    path: /transactions
    method: POST
    data_selector: transaction
    params: {}
- name: payment_notification
  endpoint:
    path: /payment-notification-handler/
    method: POST
    data_selector: string
    params: {}
- name: payment_notifications
  endpoint:
    path: /payment/notifications
    method: POST
    data_selector: notifications
    params: {}
- name: status
  endpoint:
    path: /v1/status
    method: GET
- name: transaction_status
  endpoint:
    path: /v2/[ORDER_ID]/status
    method: GET
    data_selector: transaction_status
    params: {}
- name: transaction_status
  endpoint:
    path: /v2/[ORDER_ID]/status
    method: GET
    data_selector: transaction_status
- name: cancel_transaction
  endpoint:
    path: /v2/[ORDER_ID]/cancel
    method: POST
    data_selector: cancel_status
- name: refund_transaction
  endpoint:
    path: /v2/[ORDER_ID]/refund
    method: POST
    data_selector: refund_status
- name: expire_transaction
  endpoint:
    path: /v2/[ORDER_ID]/expire
    method: POST
    data_selector: expire_status
- name: capture_transaction
  endpoint:
    path: /v2/capture
    method: POST
    data_selector: capture_status
- name: transaction
  endpoint:
    path: /api/transaction
    method: GET
    data_selector: data
    params: {}
- name: transaction
  endpoint:
    path: /transactions
    method: GET
    data_selector: data
    params: {}
- name: billing_information
  endpoint:
    path: /billing_information
    method: POST
    data_selector: billing_info
    params: {}
- name: scheduled_payout
  endpoint:
    path: /scheduled_payout
    method: POST
    data_selector: payout_schedule
    params: {}
- name: manual_payout
  endpoint:
    path: /manual_payout
    method: POST
    data_selector: manual_payout
    params: {}
- name: payout_history
  endpoint:
    path: /payout_history
    method: GET
    data_selector: payout_history
    params: {}
- name: transaction
  endpoint:
    path: /v1/transactions
    method: POST
    data_selector: transaction
    params: {}
- name: transactions
  endpoint:
    path: /snap/v1/transactions
    method: POST
    data_selector: transaction_details
    params: {}
- name: token
  endpoint:
    path: /v2/token
    method: GET
    data_selector: ''
    params:
      client_key: <YOUR-CLIENT-KEY>
- name: payment
  endpoint:
    path: /payment
    method: POST
    data_selector: data
- name: Card Payments
  endpoint:
    path: /docs/card-payments
    method: GET
    data_selector: transactions
    params: {}
- name: E-Wallet
  endpoint:
    path: /docs/e-wallet
    method: GET
    data_selector: transactions
    params: {}
- name: Bank Transfer
  endpoint:
    path: /docs/bank-transfer
    method: GET
    data_selector: transactions
    params: {}
- name: Convenience Store
  endpoint:
    path: /docs/convenience-store
    method: GET
    data_selector: transactions
    params: {}
- name: Google Pay
  endpoint:
    path: /docs/google-pay
    method: GET
    data_selector: transactions
    params: {}
- name: Cardless Credit
  endpoint:
    path: /docs/cardless-credit
    method: GET
    data_selector: transactions
    params: {}
- name: payouts
  endpoint:
    path: /disbursement
    method: POST
    data_selector: data
    params: {}
- name: transaction
  endpoint:
    path: /v1/transactions
    method: POST
    data_selector: transaction
    params: {}
- name: transaction
  endpoint:
    path: /transactions
    method: GET
    data_selector: data
    params: {}
- name: snap
  endpoint:
    path: /snap/v1/transactions
    method: POST
    data_selector: transaction_token
    params: {}
- name: register_card
  endpoint:
    path: /register/card
    method: POST
    data_selector: data
- name: charge
  endpoint:
    path: /v2/charge
    method: POST
    data_selector: data
- name: charge
  endpoint:
    path: /v2/charge
    method: POST
    data_selector: transaction_details
    params: {}
- name: transactions
  endpoint:
    path: /v2/transactions
    method: POST
    data_selector: transaction
    params: {}
- name: payment_methods
  endpoint:
    path: /v2/payment-methods
    method: GET
    data_selector: payment_methods
    params: {}
- name: transactions
  endpoint:
    path: /v1/transactions
    method: POST
    data_selector: data
- name: payment_status
  endpoint:
    path: /v1/payment_status
    method: GET
    data_selector: data
- name: transaction
  endpoint:
    path: /v1/transactions
    method: GET
    data_selector: transactions
    params: {}
- name: transaction
  endpoint:
    path: /v1/transaction
    method: POST
    data_selector: transaction_data
- name: transactions
  endpoint:
    path: /v2/charge
    method: POST
    data_selector: transaction
    params: {}
- name: transactions
  endpoint:
    path: /v1/transactions
    method: GET
    data_selector: data
    params: {}
- name: transactions
  endpoint:
    path: /v1/transactions
    method: POST
    data_selector: transaction_data
    params: {}
- name: payment
  endpoint:
    path: /services/payment
    method: POST
    data_selector: transaction
    params: {}
- name: transactions
  endpoint:
    path: /v2/transactions
    method: GET
    data_selector: transactions
    params: {}
- name: transaction
  endpoint:
    path: /services/data/v1/transaction
    method: GET
    data_selector: records
- name: transaction
  endpoint:
    path: /transactions
    method: POST
    data_selector: data
    params: {}
- name: transaction
  endpoint:
    path: /transactions
    method: POST
    data_selector: transactionData
- name: refund
  endpoint:
    path: /refunds
    method: POST
    data_selector: refundData
- name: transactions
  endpoint:
    path: /v2/transactions
    method: POST
    data_selector: transaction
    params: {}
- name: transactions
  endpoint:
    path: /transactions
    method: GET
    data_selector: data
- name: refunds
  endpoint:
    path: /refunds
    method: GET
    data_selector: data
- name: transaction
  endpoint:
    path: /transactions
    method: GET
    data_selector: records
- name: transactions
  endpoint:
    path: /transactions
    method: GET
    data_selector: data
    params: {}
- name: transaction
  endpoint:
    path: /transactions
    method: POST
    data_selector: data
    params: {}
- name: transactions
  endpoint:
    path: /v1/transactions
    method: GET
    data_selector: data
- name: payment_methods
  endpoint:
    path: /v1/payment_methods
    method: GET
    data_selector: data
- name: transaction
  endpoint:
    path: /api/transaction
    method: POST
    data_selector: data
    params: {}
- name: transactions
  endpoint:
    path: /v1/transactions
    method: GET
    data_selector: data
    params: {}
- name: transaction
  endpoint:
    path: /v1/transactions
    method: GET
    data_selector: transactions
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
- name: email_notification
  endpoint:
    path: /settings/email-notification
    method: GET
    data_selector: notifications
    params: {}
- name: http_notification
  endpoint:
    path: /settings/payment/notification-url
    method: GET
    data_selector: notifications
    params: {}
- name: payment
  endpoint:
    path: /services/payment
    method: POST
    data_selector: data
    params: {}
- name: transaction
  endpoint:
    path: /transactions
    method: POST
    data_selector: transaction
    params: {}
- name: refund
  endpoint:
    path: /refunds
    method: POST
    data_selector: refund
    params: {}
- name: payment
  endpoint:
    path: /services/data/v1/payment
    method: POST
    data_selector: transaction_status
    params: {}
- name: refund
  endpoint:
    path: /services/data/v1/refund
    method: POST
    data_selector: refund_status
    params: {}
- name: transaction
  endpoint:
    path: /services/data/vXX.X/sobjects/Transaction
    method: GET
    data_selector: records
    params: {}
- name: transactions
  endpoint:
    path: /v2/transactions
    method: POST
    data_selector: transaction
    params: {}
- name: transactions
  endpoint:
    path: /transactions
    method: POST
    data_selector: data
    params: {}
- name: transaction
  endpoint:
    path: /v1/transactions
    method: POST
    data_selector: transaction_data
    params: {}
- name: payment_methods
  endpoint:
    path: /v1/payment-methods
    method: GET
    data_selector: payment_methods
    params: {}
- name: payment
  endpoint:
    path: /services/data/v1/payment
    method: GET
    data_selector: records
    params: {}
- name: transaction
  endpoint:
    path: /services/data/v1/transaction
    method: GET
    data_selector: records
    params: {}
- name: transaction
  endpoint:
    path: /transactions
    method: GET
    data_selector: data
    params: {}
- name: payment_methods
  endpoint:
    path: /payment_methods
    method: GET
    data_selector: data
    params: {}
- name: transactions
  endpoint:
    path: /v2/transactions
    method: POST
    data_selector: transaction
    params: {}
- name: payment_methods
  endpoint:
    path: /v2/payment_methods
    method: GET
    data_selector: payment_methods
    params: {}
- name: transactions
  endpoint:
    path: /transactions
    method: GET
    data_selector: records
    params: {}
- name: transaction
  endpoint:
    path: /v2/charge
    method: POST
    data_selector: transaction
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: transactions
  endpoint:
    path: /transactions
    method: GET
    data_selector: data
    params: {}
- name: transactions
  endpoint:
    path: /v2/transactions
    method: POST
    data_selector: transaction
    params: {}
- name: payout
  endpoint:
    path: /v1/payout
    method: POST
- name: transaction
  endpoint:
    path: /v1/transaction
    method: POST
    data_selector: transaction
    params: {}
- name: transaction
  endpoint:
    path: /v1/transactions
    method: POST
    data_selector: transaction
    params: {}
- name: transactions
  endpoint:
    path: /transactions
    method: GET
    data_selector: records
    params: {}
- name: transactions
  endpoint:
    path: /transactions
    method: GET
    data_selector: records
- name: transactions
  endpoint:
    path: /v2/transactions
    method: POST
    data_selector: data
    params: {}
- name: payment_methods
  endpoint:
    path: /v2/payment_methods
    method: GET
    data_selector: payment_methods
    params: {}
- name: transaction
  endpoint:
    path: /v1/transaction
    method: POST
    data_selector: transaction
    params: {}
- name: transaction
  endpoint:
    path: /v1/transactions
    method: POST
    data_selector: data
    params: {}
- name: transaction
  endpoint:
    path: /services/data/vXX.X/sobjects/Transaction
    method: GET
    data_selector: records
    params: {}
- name: transactions
  endpoint:
    path: /v2/transactions
    method: POST
    data_selector: transaction
    params: {}
- name: transaction
  endpoint:
    path: /transactions
    method: GET
    data_selector: data
- name: transaction
  endpoint:
    path: /services/data/vXX.X/sobjects/Transaction
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: transaction
  endpoint:
    path: /transactions
    method: GET
    data_selector: data
- name: refund
  endpoint:
    path: /refunds
    method: POST
    data_selector: data
- name: payments
  endpoint:
    path: /v1/payments
    method: POST
    data_selector: transaction
    params: {}
- name: status
  endpoint:
    path: /v1/status
    method: GET
    data_selector: status
    params: {}
- name: payment
  endpoint:
    path: /v2/payment
    method: POST
    data_selector: transaction
    params: {}
- name: transactions
  endpoint:
    path: /v2/transactions
    method: POST
    data_selector: transaction
    params: {}
- name: refunds
  endpoint:
    path: /v2/refunds
    method: POST
    data_selector: refund
    params: {}
- name: transactions
  endpoint:
    path: /services/data/v1/transactions
    method: GET
    data_selector: records
    params: {}
- name: transactions
  endpoint:
    path: /v2/transactions
    method: GET
    data_selector: transactions
    params: {}
- name: transaction
  endpoint:
    path: /services/data/vXX.X/sobjects/Transaction
    method: GET
    data_selector: records
    params: {}
- name: transactions
  endpoint:
    path: /v2/transactions
    method: POST
    data_selector: transaction
    params: {}
- name: transactions
  endpoint:
    path: /api/transactions
    method: POST
    data_selector: data
    params: {}
- name: transaction
  endpoint:
    path: /transactions
    method: POST
    data_selector: data
    params: {}
- name: transaction
  endpoint:
    path: /transactions
    method: GET
    data_selector: transactions
    params: {}
- name: payment_method
  endpoint:
    path: /payment_methods
    method: GET
    data_selector: methods
    params: {}
- name: transactions
  endpoint:
    path: /services/data/v1/transactions
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: merchant_list
  endpoint:
    path: /merchant/list
    method: GET
- name: transaction_history
  endpoint:
    path: /transaction/history
    method: GET
- name: withdrawal_summary
  endpoint:
    path: /withdrawal/summary
    method: GET
- name: user_management
  endpoint:
    path: /user/manage
    method: GET
- name: activity_log
  endpoint:
    path: /activity/log
    method: GET
- name: transactions
  endpoint:
    path: /v1/transactions
    method: GET
    data_selector: data
- name: balance
  endpoint:
    path: /balance
    method: GET
    data_selector: transactions
    params:
      max_period: 6 months
- name: withdrawal
  endpoint:
    path: /withdrawals
    method: GET
    data_selector: withdrawals
    params:
      max_period: 6 months
- name: transactions
  endpoint:
    path: /v1/transactions
    method: GET
    data_selector: transactions
    params: {}
- name: unified_balance
  endpoint:
    path: /unified_balance
    method: GET
    data_selector: balance_data
    params: {}
- name: withdrawal
  endpoint:
    path: /withdrawal
    method: POST
    data_selector: withdrawal_data
    params: {}
- name: top_up
  endpoint:
    path: /top_up
    method: POST
    data_selector: top_up_data
    params: {}
- name: transaction
  endpoint:
    path: /services/data/vXX.X/sobjects/Transaction
    method: GET
    data_selector: records
- name: transaction
  endpoint:
    path: /transaction
    method: GET
    data_selector: records
- name: transaction
  endpoint:
    path: /api/transaction
    method: POST
    data_selector: data
    params: {}
- name: payout_report
  endpoint:
    path: /docs/how-to-download-payout-report
    method: GET
    data_selector: report
    params: {}
- name: transaction
  endpoint:
    path: /services/data/v1/transactions
    method: GET
    data_selector: records
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: transactions
  endpoint:
    path: /v1/transactions
    method: POST
    data_selector: data
    params: {}
- name: transaction
  endpoint:
    path: /transaction
    method: POST
    data_selector: data
    params: {}
- name: payment_link
  endpoint:
    path: /payment/link
    method: POST
    data_selector: data
    params: {}
- name: transactions
  endpoint:
    path: /transactions
    method: GET
    data_selector: data
    params: {}
- name: transactions
  endpoint:
    path: /transactions
    method: GET
    data_selector: data
    params: {}
- name: transactions
  endpoint:
    path: /transactions
    method: GET
    data_selector: data
    params: {}
- name: payment_methods
  endpoint:
    path: /payment_methods
    method: GET
    data_selector: data
    params: {}
- name: transaction
  endpoint:
    path: /v1/transaction
    method: POST
    data_selector: transaction
    params: {}
- name: refund
  endpoint:
    path: /v1/refund
    method: POST
    data_selector: refund
    params: {}
- name: transaction
  endpoint:
    path: /v2/transaction
    method: POST
    data_selector: transactionData
    params: {}
- name: transaction
  endpoint:
    path: /transactions
    method: GET
    data_selector: transactions
    params: {}
- name: transaction
  endpoint:
    path: /transactions
    method: GET
    data_selector: records
    params: {}
- name: transactions
  endpoint:
    path: /v1/transactions
    method: POST
    data_selector: transaction
    params: {}
- name: payment_methods
  endpoint:
    path: /v1/payment_methods
    method: GET
    data_selector: payment_methods
    params: {}
- name: payment
  endpoint:
    path: /payments
    method: POST
    data_selector: transaction
    params: {}
- name: transactions
  endpoint:
    path: /v2/transactions
    method: POST
    data_selector: transaction
    params: {}
- name: payment
  endpoint:
    path: /services/data/v1/payments
    method: POST
    data_selector: data
    params: {}
- name: transaction
  endpoint:
    path: /v1/transaction
    method: POST
    data_selector: transaction_data
- name: refund
  endpoint:
    path: /v1/refund
    method: POST
    data_selector: refund_data
- name: transactions
  endpoint:
    path: /transactions
    method: GET
    data_selector: data
    params: {}
- name: transactions
  endpoint:
    path: /v1/transactions
    method: GET
    data_selector: data
- name: transaction
  endpoint:
    path: /services/data/vXX.X/sobjects/Transaction
    method: GET
    data_selector: records
    params: {}
- name: payment
  endpoint:
    path: /v1/payment
    method: POST
    data_selector: transaction
    params: {}
- name: payments
  endpoint:
    path: /payments
    method: GET
    data_selector: records
- name: payment
  endpoint:
    path: /services/payment
    method: POST
    data_selector: payment_response
    params: {}
- name: disbursement
  endpoint:
    path: /disbursement
    method: GET
    data_selector: records
- name: receiver_list
  endpoint:
    path: /receiver_list
    method: GET
    data_selector: records
- name: disbursement_statement
  endpoint:
    path: /disbursement_statement
    method: GET
    data_selector: records
- name: transaction
  endpoint:
    path: /transactions
    method: GET
    data_selector: records
    params: {}
- name: transaction
  endpoint:
    path: /v1/transactions
    method: POST
    data_selector: transaction
    params: {}
- name: refund
  endpoint:
    path: /v1/refunds
    method: POST
    data_selector: refund
    params: {}
- name: transactions
  endpoint:
    path: /v2/charge
    method: POST
    data_selector: transaction
    params: {}
- name: transactions
  endpoint:
    path: /api/transactions
    method: GET
    data_selector: data
    params: {}
- name: payment
  endpoint:
    path: /payment
    method: POST
    data_selector: data
    params: {}
- name: payment
  endpoint:
    path: /payment
    method: POST
    data_selector: transaction
    params: {}
- name: transactions
  endpoint:
    path: /v1/transactions
    method: GET
    data_selector: transactions
    params: {}
- name: payments
  endpoint:
    path: /v1/payments
    method: POST
    data_selector: transaction
    params: {}
- name: payments
  endpoint:
    path: /v1/payments
    method: POST
    data_selector: transaction
    params: {}
- name: transaction_status
  endpoint:
    path: /v1/transaction/status
    method: GET
    data_selector: status
    params: {}
- name: transactions
  endpoint:
    path: /transactions
    method: GET
    data_selector: data
    params: {}
- name: transaction
  endpoint:
    path: /transactions
    method: POST
    data_selector: transaction_details
    params: {}
- name: transactions
  endpoint:
    path: /v2/transactions
    method: POST
    data_selector: data
    params: {}
- name: transactions
  endpoint:
    path: /v1/transactions
    method: POST
    data_selector: transaction
    params: {}
- name: payment_methods
  endpoint:
    path: /v1/payment-methods
    method: GET
    data_selector: payment_methods
    params: {}
- name: transactions
  endpoint:
    path: /v2/transactions
    method: POST
    data_selector: transactions
    params: {}
- name: transactions
  endpoint:
    path: /transactions
    method: GET
    data_selector: data
    params:
      incremental: updated_at
- name: transaction
  endpoint:
    path: /transactions
    method: GET
    data_selector: records
    params: {}
- name: transactions
  endpoint:
    path: /transactions
    method: GET
    data_selector: data
    params: {}
- name: payment
  endpoint:
    path: /payment
    method: POST
    data_selector: data
    params: {}
- name: email_notification
  endpoint:
    path: /settings/email_notification
    method: POST
    data_selector: notification
    params: {}
- name: http_notification
  endpoint:
    path: /settings/payment/notification
    method: POST
    data_selector: notification
    params: {}
- name: payments
  endpoint:
    path: /v1/payments
    method: POST
    data_selector: transaction
    params: {}
- name: transaction
  endpoint:
    path: /services/data/vXX.X/sobjects/Transaction
    method: GET
    data_selector: records
    params: {}
- name: transactions
  endpoint:
    path: /api/transactions
    method: GET
    data_selector: data
    params: {}
- name: transactions
  endpoint:
    path: /v1/transactions
    method: GET
    data_selector: data
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
- name: payment_methods
  endpoint:
    path: /v1/payment_methods
    method: GET
    data_selector: payment_methods
    params: {}
- name: transactions
  endpoint:
    path: /v1/transactions
    method: GET
    data_selector: data
    params: {}
- name: transaction
  endpoint:
    path: /v2/charge
    method: POST
    data_selector: transaction
    params: {}
- name: transaction
  endpoint:
    path: /transactions
    method: GET
    data_selector: data
    params: {}
- name: transaction
  endpoint:
    path: /transaction
    method: GET
    data_selector: records
    params: {}
- name: transaction
  endpoint:
    path: /api/transaction
    method: POST
    data_selector: data
    params: {}
- name: transaction
  endpoint:
    path: /transactions
    method: GET
    data_selector: transactions
    params:
      incremental: updated_at
- name: transaction
  endpoint:
    path: /services/data/v1/transaction
    method: GET
    data_selector: records
    params: {}
- name: transaction
  endpoint:
    path: /transaction
    method: GET
    data_selector: records
    params: {}
- name: payment_methods
  endpoint:
    path: /payment_methods
    method: GET
    data_selector: records
    params: {}
- name: transactions
  endpoint:
    path: /transactions
    method: GET
    data_selector: data
    params: {}
- name: transaction
  endpoint:
    path: /transactions
    method: GET
    data_selector: data
- name: transaction
  endpoint:
    path: /v1/transaction
    method: POST
    data_selector: transaction
    params: {}
- name: transaction
  endpoint:
    path: /services/data/v1/transactions
    method: GET
    data_selector: data
    params: {}
- name: transaction
  endpoint:
    path: /transactions
    method: GET
    data_selector: transactions
    params: {}
- name: transaction
  endpoint:
    path: /services/data/v1/transaction
    method: GET
    data_selector: transactions
    params: {}
- name: refund
  endpoint:
    path: /services/data/v1/refund
    method: POST
    data_selector: refunds
    params: {}
- name: transactions
  endpoint:
    path: /v2/transactions
    method: POST
    data_selector: data
    params: {}
- name: transactions
  endpoint:
    path: /v2/charge
    method: POST
    data_selector: transaction
    params: {}
- name: payments
  endpoint:
    path: /v1/payments
    method: POST
    data_selector: transaction
- name: transactions
  endpoint:
    path: /transactions
    method: GET
    data_selector: data
    params: {}
- name: transactions
  endpoint:
    path: /v2/transactions
    method: POST
    data_selector: transaction
    params: {}
- name: transaction
  endpoint:
    path: /transaction
    method: GET
notes:
- Uses OAuth2 with refresh token — requires setup of connected app in api
- Uses OAuth2 with refresh token — requires setup of connected app in Midtrans
- Some objects may return nulls in deeply nested fields
- Requires setup of connected app in api
- Requires setup of connected app in Midtrans.
- Some responses may include null values in certain fields.
- Access Keys are unique for every merchant. Always keep Server Key confidential.
- Requires setup of Midtrans account to get API keys.
- API requires setup of connected app in Midtrans
- Midtrans API validates HTTP request by using Basic Authentication method.
- Requires setup of connected app in Midtrans
- Midtrans API validates HTTP request by using Basic Authentication method. The username
  is your Server Key while the password is empty.
- Ensure to update Redirection Settings (Finish URL, Unfinish URL, Error URL) to redirect
  customers properly.
- Unlike in Pop Up mode; in Embedded mode, X button in the modal is intentionally
  removed to prevent users from accidentally exiting after making a payment.
- It is possible to hide the header section in Snap modal that shows your merchant/display
  name.
- Make sure to update your Redirection Settings (Finish URL, Unfinish URL, Error URL)
  to make sure your customers will be redirected properly after finishing a payment.
- To configure the Payment Notification URL, enter the URL on the Configuration page.
- Make sure to at least update your Redirection Settings (Finish URL, Unfinish URL,
  Error URL) to make sure your customers will be redirected properly after finishing
  a payment.
- Midtrans Account and API keys will be used in this integration, but we will be using
  a predefined demo keys.
- Uses Basic Auth for authentication - requires setup of merchant account in Midtrans
- Midtrans API requires OAuth2 authentication.
- Ensure to use the correct client ID and client secret.
- Ensure customer explicitly gives consent that their card will be securely saved
  during the first payment.
- This feature requires special MID from acquiring bank, consult Midtrans Activation
  team.
- It might take up to 5 minutes for the configuration setup to reflect in your Snap
  checkout page.
- Page expiry is optional.
- 3DS should always be enabled whenever possible.
- Final redirect URL is appended with query parameter like ?order_id=xxx&status_code=xxx&transaction_status=xxx.
- If the payment method is Credit Card & processed via 3DS 2, there is a possibility
  of the transaction being pending.
- Midtrans API allows maximum size of 16kb per request (~16000 total characters).
- The default lifetime for regular Snap transaction, Snap token and also the redirect_url,
  is 24 hours.
- Different banks have different specifications for their custom VA numbers.
- If the number provided is currently active for another order, then a different unique
  number will be used instead.
- If the number provided is longer than required, then the unnecessary digits in the
  end will be trimmed.
- If the number provided is shorter than required, then the number will be prefixed
  with zeros.
- Ensure to handle token expiration properly.
- Read here to simulate/test success payment on Sandbox
- You can include more information such as customer_details, item_details, and so
  on.
- Some responses may have nested fields that could return nulls
- The redirection back from Kredivo to your Finish Redirect URL will be using straight-forward
  HTTP GET.
- HTTP POST request with JSON body will be sent to your Payment Notification URL configured
  on Dashboard.
- The redirection back from Akulaku to your Finish Redirect URL will be using HTTP
  POST.
- API integration requires proper authentication setup.
- You must encode your server key in Base64 for authorization.
- Card token_id expires in 3 minutes and 3DS redirect_url expires in 10 minutes.
- This feature requires no additional MID from acquiring bank, this utilize your regular
  card MID.
- This feature requires special MID from acquiring bank, this utilize what bank usually
  call as 'recurring MID'.
- Midtrans's mobile SDK provides tools and libraries for integrating Midtrans's services
  into a mobile app.
- Payment Link can be created via dashboard or API.
- Some objects like Contact may return nulls in deeply nested fields
- Integration requires setup of API keys in Midtrans dashboard.
- It's mandatory to ensure the link is not guessable in order to protect you and your
  customer.
- Ensure API keys are configured correctly
- Access Key and Server Key are unique for every merchant. Always keep Server Key
  confidential.
- Please make sure to input **http://** or **https://** when filling Notification
  URL and Redirect URL, according to your web-server configuration.
- You can try with Shopify Trial plan to test payment integration in Sandbox mode.
- You may be required by Shopify to have an active paid-plan in order to allow your
  customer to do checkout on Production mode.
- Not all payment methods support online refund on Midtrans side, capability is mostly
  limited to Card & e-Wallet/QRIS transaction.
- Shopify's refund UI/UX can be confusing, refund processing does not indicate success.
- It is recommended to manage payment refund & cancellation from Midtrans Dashboard
  for better indication.
- Please make sure to input http:// or https:// when filling Notification URL and
  Redirect URL, according to your web-server configuration.
- Implement promotion directly in the checkout flow
- Budget control
- User maximum transaction cap
- Implement BIN based campaign
- Set campaign active period
- Set campaign recurrence
- Promotion reporting
- Customer's limitation will last as long as the campaign is active.
- Once the day changed, the limitation will be reset.
- Once the month changed, the limitation will be reset.
- Max days that can be set is 30 days.
- Ensure you have set up the necessary authentication to access Midtrans API.
- Promo campaigns can be created via Midtrans Dashboard.
- Campaigns' budget and terms cannot be modified once set to active.
- You can now apply e-Meterai to your invoices created with Invoicing to increase
  its legitimacy
- You can modify the Invoicing label within the generated invoices to suit your use
  cases (e.g. Donations, etc).
- Text invoice template has been further improved - links are now shortened to make
  the text template look professional.
- You can now input tax in % instead of absolute amount.
- It's possible to add item level discounts on top of overall discounts.
- Reminders can only be sent to customers via emails at the moment. In order to use
  the reminder feature, ensure that Client email is filled when creating an invoice.
- Ensure to handle authentication errors properly.
- Rate limiting may apply during peak usage.
- Most recommended way to receive notifications is via HTTP(S) Notification / Webhook.
- Requires setup of merchant account for API access
- API provides webhooks for notifications
- URL protocol prefix `https://` or `http://` are required. We highly recommended
  to use `https://` for security purposes.
- Uses OAuth2 with refresh token — requires setup of connected app in midtrans
- Make sure that the Notification URL can be reached from Public Internet.
- Midtrans cannot send notifications to localhost, URL protected with authorization
  or password, URL behind VPN, unusual destination port, and so on.
- Transaction notifications contain various payment methods.
- It's recommended to check the transaction_status as reference of the most accurate
  transaction status. Transaction can be considered success if transaction_status
  value is settlement (or capture in case of card transaction) and if fraud_status
  exists ensure the value is accept. Then you are safe to deliver good/service to
  customer.
- Not every payment methods may return fraud_status field. Some payment methods (like
  Indomaret, Alfamart, etc.) which considered have lower risk of fraud, may not be
  evaluated by Fraud Detection System, and may not return fraud_status. In this case,
  the transaction can be considered as relatively safe from fraud.
- Use HTTPS endpoint for better security & to avoid Man-in-the-Middle (MITM) attacks.
- Midtrans may not be able to help you with any financial loss caused if merchants
  fail to verify payment status authenticity.
- Kendala pada proses Disbursement, pesan error 'Invalid Destination Account'
- Saya mendapatkan pesan error 'OTP is invalid. Please enter correct password', apa
  yang harus dilakukan?
- Each of the official Midtrans Language Libraries has easy-to-use functions implementing
  most of the endpoints.
- Transaction data is retained on MAP for 6 months.
- The default settings for GoPay is 15 Minutes.
- The default settings for other payment methods is one day.
- Login to your Midtrans's account first from the Login menu in the top right section
  of this docs to test directly in our docs using your credentials!
- Some endpoints may be rate-limited
- Uses Basic Authentication with Server Key — keep it confidential.
- For frontend requests, use Client Key instead of Server Key.
- Uses OAuth2 with refresh token
- Do not attempt to pay with a real-world payment-provider/bank to a transaction created
  in the Sandbox environment.
- Sandbox transactions cannot be paid with real payment, and should only be paid with
  the Sandbox Payment Simulator/Credentials explained in this page.
- Midtrans will not be responsible and may not be able to help you recover any real-world
  payment funds if you do such an action.
- For QRIS payment method, usually the sandbox reference will refer to the same Merchant
  ID you have in your Midtrans Production environment.
- Sandbox Environment can be used to create 'testing' transactions which do not require
  real payment/fund.
- Midtrans uses web-based simulator to simulate a response from payment provider or
  bank's system.
- We strongly recommend you to verify the authenticity by implementing the methods
  explained here.
- Switching to Production Mode
- Server Key and Client Key for Production environment are different from Sandbox
  environment.
- Payouts connects to the banks’ hosts for seamless transfer using integrated APIs.
- If there is no activity on Iris Portal for 15 minutes, the account will automatically
  be logged out.
- An account will be required to update their password at least every 90 days.
- After three failed Login attempts, you will be temporarily locked out from trying
  to log in.
- Please make sure that you do not use this on Production environment.
- The multi-layer approval feature is designed for security and thorough review.
- Security is a priority at Midtrans and all transactions processed by our system
  are always securely encrypted.
- Midtrans never store any sensitive information in the system and all transactions
  are transmitted and processed via secured networks.
- Can I charge service fees to my customers?
- Do not call an API which requires Server Key authorization from the Frontend.
- Always use the domain name to contact our API — avoid using IP address.
- Midtrans cannot send notifications to localhost, URL protected with authorization
  or password, URL behind VPN, unusual destination port.
- The main goal is to configure your WebView to allow opening the universal/deeplink
  redirect URL to the (external) destination payment app.
- The URLs from the payment provider may change without prior notice, so you may need
  to update your implementation when that happens.
- Snap payment page is loaded within iframe inside merchant's website.
- Do not deliver good/service to customer, if the transaction status on Midtrans is
  not `settlement`/success.
- WooCommerce Blocks is not currently compatible with Midtrans WooCommerce Payment
  Plugin
- The customer transaction is blocked by Fraud Detection System (FDS), but I am sure
  that the customer is legitimate. I want to continue with the transaction. What should
  I do?
- Ensure that the transaction is 3DS by checking the ECI code.
- By default expiry for GoPay transaction is 15 minutes.
- Do not deliver goods/services to customer if transaction's status on Midtrans is
  not `settlement`/`success`.
- Ensure to use valid credentials for accessing the API
- Ensure to handle errors related to payment processing.
- API usage is subject to rate limits.
- Requires API key and server key for access
- API requires authentication with OAuth2.
- Ensure to set up the credentials in the DLT secrets.
- Midtrans cannot see transactions processed by other acquirers.
- Some operations may have rate limits
- Some endpoints may require specific headers for authentication
- Please make sure the Business Email and Business Phone Number haven't registered
  in the other Midtrans/GoBiz/GoFood account yet.
- 'Note: no minimum/maximum transaction limit must be fulfilled by merchants if they
  want to join.'
- Some endpoints may have specific requirements for parameters
- Some endpoints may have rate limits
- Make sure the total amount in item_details is the same as the gross_amount to avoid
  errors.
- Midtrans requires a valid Merchant ID and API key for integration.
- API Authorization & Headers documentation available
- Saya mendapatkan pesan error 'failed to register transaction', apa yang harus Saya
  lakukan?
- Apa arti dari error 411 dengan pesan 'Token id is missing, invalid, or timed out'?
- Apa arti dari error 401 dengan pesan 'Access denied due to unauthorized transaction,
  please check client key or server key'?
- Apa arti dari error 402 dengan pesan 'Merchant doesn’t have access for this payment
  type'?
- Ada masalah dengan transaksi Disbursement Saya, apa yang harus dilakukan?
- The process above can only be done by the user that role is Admin.
- Please ensure the telephone number is never used in the other Midtrans accounts.
- Some API responses may vary based on transaction status
- This process can only be done by users with the Admin role.
- Some responses may contain nulls in optional fields
- Requires specific configuration for each merchant account.
- The email template cannot be changed.
- Please do not use unusual ports in your notification URL endpoint.
- The URL you use can receive HTTP notifications that Midtrans sends and not be redirected
  to another URL when accessed.
- Do not use the IP Address format.
- Ensure to handle API limits and retries
- Responses may vary based on transaction status
- Both keys, collectively known as Access Keys, are vital identification components
  of your Midtrans account.
- Some endpoints may have specific requirements for recurring transactions.
- Uses OAuth2
- Ensure to handle OAuth token expiration properly.
- You can integrate with Midtrans for one or several payment methods.
- Two clicks is available if you already become active Midtrans’ merchant with activated
  credit card payment channel.
- One click / recurring / subscription needs additional bank’s approval and agreement,
  contact us to apply for this feature.
- Uses OAuth2 for authentication
- Requires OAuth2 authentication.
- API may have rate limits.
- API may have rate limits that should be considered in integration
- Some endpoints may have specific query parameters
- Ensure to provide valid client and server keys for authentication.
- Ensure to follow the API Authorization & Headers for proper integration
- API Authorization & Headers
- Some API calls may be subject to rate limits
- API requires setup for merchant account.
- Requires setup of connected app in Midtrans API
- You can modify it from your Midtrans portal.
- Midtrans does not directly provide official SDK for a hybrid mobile framework, because
  currently we focus on supporting native Android & iOS experience via our Mobile
  SDK.
- The simplest and easiest method is to utilize webview (or similar method to display
  HTML page), the developer can display (via webview) the HTML page of SNAP payment.
- Requires setup of API keys in the Midtrans dashboard
- Some parameters may have specific format or length requirements
- Some responses may return null values for certain fields
- Beberapa objek mungkin mengembalikan null di bidang yang dalam
- Menggunakan OAuth2 dengan refresh token - memerlukan pengaturan aplikasi terhubung
  di Midtrans
- Some responses may vary based on the payment method
- Ensure to set up the required OAuth2 credentials in the Midtrans dashboard.
- API Authorization & Headers documentation available.
- If you want to activate any payment methods other than Bank Transfer (PermataBank
  VA, BNI VA, BRI VA, & Mandiri Bill), Card Payment, QRIS, and GoPay - please login
  to your dashboard and select “Add Payment Methods”.
- If you want to integrate Midtrans into your website using Core API, please check
  this link for further information.
- Ensure to set up the client ID and secret in the DLT secrets.
- API Authorization & Headers should be reviewed for correct setup.
- Some endpoints may require specific permissions to access.
- Merchant Administration Portal allows viewing and managing transactions.
- In cases where your customers’ transactions are declined by the banks, Midtrans
  shares as much information as what we receive from the bank, through HTTP notification
  and within the dashboard.
- While in some cases the banks may provide helpful explanation such as 'insufficient
  funds', 'invalid card number', 'expired cards', unfortunately some other explanation
  such as 'do not honour' are rather generic.
- Some endpoints may have specific rate limits
- You can only view the data with the maximum period up to the last 6 months.
- You can only see the Balance menu on the navigation bar when your user role is Finance
  or Admin.
- The unified balance includes Withdrawable balance and Top-up balance.
- Uses OAuth2 for API access
- Refund only applies to credit card, e-wallet, QRIS, Shopeepay and Akulaku.
- Refund can be processed if the status is Settlement.
- If there are any unexpected behaviors related to the refund process, please contact
  our support team.
- SLA (Service Level Agreement) is a working day, funds may be returned sooner or
  later than the information stated.
- Ensure to follow the API Authorization & Headers guidelines for proper connectivity.
- Saya mendapatkan pesan error "failed to register transaction", apa yang harus Saya
  lakukan ?
- Apa arti dari error 411 dengan pesan “Token id is missing, invalid, or timed out”?
- Apa arti dari error 401 dengan pesan “Access denied due to unauthorized transaction,
  please check client key or server key”?
- Apa arti dari error 402 dengan pesan “Merchant doesn’t have access for this payment
  type”?
- The payout report will be sent to the email you use when logging in to the Midtrans
  portal.
- The excel file on this payout email report will expire in 3 hours.
- You can only download transactions within the last 6 months from the dashboard.
- You will not be able to download transactions that are older than 6 months.
- Unified Reporting allows merchant Partners to view and filter transactions without
  logging in to a specific merchant.
- Some endpoints may return nulls in deeply nested fields
- API Authorization & Headers are detailed in the documentation.
- Use OAuth2 for authentication.
- Ensure that your API keys are correctly set.
- API Authorization & Headers documentation available for further details
- Ensure correct setup of OAuth2 credentials for proper authentication.
- API Authorization & Headers documentation should be reviewed for authentication
  setup.
- Login Issue
- This additional security feature is optional to be activated.
- Some fields may return nulls in deeply nested structures
- Some methods may have different parameters or requirements
- Token id is missing, invalid, or timed out
- this issue can happen only if you integrate with Android.
- Be sure to follow the integration steps outlined in the documentation.
- Access Key is unique and would differ between Production and Sandbox environments,
  as well as between Approval and Creator roles.
- GoPay is always considered an in-house transfer.
- For disbursement transactions that are approved after the cut-off time or during
  bank maintenance schedule, please expect that the transaction status will be on
  hold as 'Approved'. As it will be waiting to be 'Processed' during the next operational
  period.
- For disbursement transactions that are 'Processed' as inter-bank transfer with 'SKN'
  method, please expect it may take a few hours (up to around 22.00 WIB on that day)
  to be completely processed by the SKN batch.
- Some requests may require additional parameters depending on the transaction type
- Issue with Disbursement process, return error 'Invalid Destination Account' message
- Invalid Destination Account during the disbursement process can mean the account
  is inactive/dormant/temporarily blocked from the bank side, e.g., due to lost ATM
  card, wrong PIN input, etc.
- Response from the bank/provider for account validation only indicates the account
  is 'exists', so it will return success. But, it does not indicate account status,
  which can be inactive/dormant/temporarily blocked from the bank side.
- API Authorization & Headers must be set up correctly.
- Merchants need to register for a GoPay product to receive static QRIS.
- Transactions with status SETTLEMENT can be withdrawn within 2 working days.
- Some requests may return nulls in deeply nested fields
- Aktivasi metode pembayaran yang belum aktif
- Tidak ada batasan minimal/maksimal transaksi yang harus dipenuhi oleh merchant jika
  ingin bergabung dengan Midtrans.
- Pastikan data yang diberikan saat pendaftaran sudah benar.
- Requires setup of OAuth2 in Midtrans dashboard
- Some responses may vary based on merchant settings
- Ensure total amount in item_details matches gross_amount to avoid errors.
- API Authorization & Headers must be followed.
- Uses OAuth2 with refresh token — requires setup of connected app in Midtrans.
- Some API endpoints may have rate limits.
- API Authorization & Headers must be followed for all requests.
- login secara bersamaan dibatasi hingga tiga orang
- jika Anda melakukan proses login-logout sebanyak lebih dari tiga kali dalam kurun
  waktu 15 menit, maka hal tersebut tidak memungkinkan
- Proses tersebut hanya dapat dilakukan oleh user dengan role Admin.
- Silahkan pastikan nomor telepon yang diisi belum terdaftar di Midtrans untuk akun
  lain.
- Ensure to check API Authorization & Headers for proper setup
- Testing Payment on Sandbox is recommended before going to production
- Some API responses may vary based on merchant settings
- Uses OAuth2 for authorization
- Lakukan pergantian pada mode menjadi 'Production'
- Anda akan menemukan Access Keys yang berbeda dengan sebelumnya
- Template email notifikasi tersebut tidak dapat dirubah.
- Mohon untuk tidak menggunakan port yang tidak biasa pada endpoint URL notifikasi
  Anda.
- URL yang Anda gunakan dapat menerima notifikasi HTTP yang dikirimkan Midtrans dan
  tidak ter-redirect ke URL lainnya saat diakses.
- Tidak menggunakan format IP Address.
- Payment Notification URL adalah endpoint URL Anda, dimana Midtrans akan mengirimkan
  notifikasi HTTP ketika terjadi transaksi sukses, gagal, cancel, dan berbagai status
  lainnya.
- Finish Redirect URL adalah URL dari halaman yang akan dilihat pelanggan saat mereka
  menyelesaikan transaksi dengan sukses.
- Unfinish Redirect URL adalah URL dari halaman yang akan dilihat pelanggan saat mereka
  tidak menyelesaikan transaksi.
- Error Redirect URL adalah URL dari halaman yang akan dilihat pelanggan saat mereka
  gagal dalam melakukan transaksi.
- Uses API key for authentication
- Access Keys are required for configuration
- Requires setup of OAuth2 for authentication
- Requires setup of merchant account in Midtrans
- Anda dapat melakukan integrasi dengan Midtrans hanya untuk satu atau beberapa metode
  pembayaran saja.
- Ensure total amount in item_details matches gross_amount to avoid error.
- API Authorization & Headers provides details on how to set up authentication.
- Ensure to check API Authorization & Headers documentation for proper setup.
- API requires authorization headers.
- Mengapa status transaksi customer Saya Pending/Failure sedangkan dana sudah berkurang?
- hal ini bisa dilakukan hanya jika Anda melakukan integrasi dengan Android.
- API requires authorization headers for requests.
- Some API responses may vary based on the payment method used
- Midtrans uses OAuth2 for authentication.
- Ensure the correct client ID and secret are used.
errors:
- '411: Token id is missing, invalid, or timed out'
- '401: Access denied due to unauthorized transaction, please check client key or
  server key'
- '402: Merchant doesn’t have access for this payment type'
- '401 Unauthorized: Recheck OAuth scopes or token expiration'
- '401 Unauthorized: Check OAuth token and permissions.'
- '404 Not Found: Ensure the endpoint path is correct.'
- 'REQUEST_LIMIT_EXCEEDED: Throttle API calls or reduce frequency'
- Token id is missing, invalid, or timed out
- Access denied due to unauthorized transaction, please check client key or server
  key
- Merchant doesn’t have access for this payment type
- 'QUERY_TIMEOUT: Break down filters or add selectivity'
- Invalid Destination Account
- OTP is invalid. Please enter correct password
- 'Unauthorized: Check your Server Key'
- '401 Unauthorized: Recheck Server Key'
- '401: Access denied, please check client or server key'
- '4xx: Follow the error_message and check your parameter.'
- '5xx: Sorry, we encountered internal server error. We will fix this soon.'
- '201: Successful creation of Snap token.'
- '401: Failed to create a token, as wrong authorization is sent.'
- '4xx: Failed to create a token, as wrong parameter is sent.'
- '5xx: Failed to create a token, because of Midtrans internal error.'
- '401 Unauthorized: Recheck API keys or token expiration'
- '400 Bad Request: Check the request body for errors'
- '401 Unauthorized: Recheck API key or credentials'
- '404 Not Found: Verify the endpoint URL'
- '401 Unauthorized: Check your client ID and client secret.'
- '400 Bad Request: Validate request parameters.'
- '200: Success, Credit Card transaction is successful'
- '401 Unauthorized: Recheck Authorization header or credentials.'
- '400: One or more parameters in the payload is invalid.'
- '4xx: transaction_details.gross_amount is not equal to the sum of item_details'
- '401 Unauthorized: Check client_id and client_secret.'
- '403 Forbidden: Ensure the account has access to the requested resource.'
- '401 Unauthorized: Recheck Server Key or authorization header'
- '400: The `transaction_details` are missing.'
- '413: There is syntax error.'
- '500: Internal system error occurred.'
- '413: Syntax error.'
- 'INVALID_PARAMETER: Check the parameters sent in the request'
- 'UNAUTHORIZED: Verify your credentials and OAuth scopes'
- 'NOT_FOUND: The requested resource does not exist'
- '201: Successful transaction.'
- '400: The transaction_details are missing.'
- Maximum request size limit of 16kb or 16000 total characters.
- '400 Bad Request: Check your input data for required fields.'
- '401 Unauthorized: Recheck OAuth credentials.'
- '401 Unauthorized: Check your API key or auth token.'
- '403 Forbidden: Insufficient permissions for this action.'
- '404 Not Found: Endpoint does not exist.'
- '400 Bad Request: Invalid request parameters'
- '404 Not Found: Ensure the endpoint is correct'
- '401 Unauthorized: Check your API keys'
- '500 Internal Server Error: Review server logs for more details'
- '400 Bad Request: Check your request parameters.'
- '401 Unauthorized: Verify your authentication credentials.'
- '404 Not Found: The requested resource could not be found.'
- 'INVALID_PROMO_CODE: Check the promo code entered.'
- 'BUDGET_EXCEEDED: The promo budget has been exhausted.'
- B2B/Open amount VA type as a payment method is not yet properly supported in this
  beta phase. Please refrain from using it, otherwise invoices using B2B/Open amount
  VA will not properly be marked as paid.
- '401 Unauthorized: Check your API credentials.'
- '403 Forbidden: You do not have permission to access this resource.'
- '500 Internal Server Error: Please try again later.'
- '402 Payment Required: Payment failed due to insufficient funds'
- '403 Forbidden: Access denied to the requested resource'
- '2XX: No retries, it is considered successful.'
- '500: Retry only once.'
- '503: Retry four times.'
- '400/404: Retry two times.'
- '301/302/303: No retries. Update notification endpoint in SETTINGS menu.'
- '400: Missing or invalid data.'
- '401: Authentication error.'
- '404: The requested resource is not found.'
- Access denied due to unauthorized transaction, please check client or server key
- '401: Access denied due to unauthorized transaction, please check client or server
  key'
- '406: order_id has been paid and utilized, please use another order ID'
- '503: Bank/partner is experiencing connection issue.'
- '05: Do not honor'
- '900: GENERIC_SERVICE_ERROR'
- 'HTTP Basic: Access denied'
- '403: Blocked by Cloudflare, ensure HTTP request header and format are correct.'
- '3xx: Redirection status code 301, 302 and 303 are not supported.'
- '401: Ensure that your backend does not require/ask for any specific authorization.'
- '5xx: Try to send the request again if the issue persists.'
- 'Credit card token is no longer available: Ensure Server Key and Client Key match
  the same MID/account.'
- GO-PAY transaction is rejected
- 'transaction_status: deny'
- 'channel_response_code: 900'
- 'transaction_details.order_id sudah digunakan: Order ID is re-using a previous ID
  that has been paid'
- '403: Access denied due to insufficient permissions'
- 'GO-PAY transaction is rejected: Check API response for more details.'
- 'REQUEST_LIMIT_EXCEEDED: Throttle API calls or reduce frequency.'
- '401 Unauthorized: Check client credentials'
- '403 Forbidden: Access denied for the requested resource'
- '404 Not Found: Endpoint does not exist'
- '404 Not Found: Check the endpoint path.'
- '401 Unauthorized: Verify authentication credentials.'
- '401 Unauthorized: Check API key or server key'
- '403 Forbidden: Access denied to this resource'
- '401 Unauthorized: Check your authentication credentials.'
- '401 Unauthorized: Check API credentials'
- '404 Not Found: Verify endpoint URL'
- '500 Internal Server Error: Try again later'
- '400 Bad Request: Check request parameters'
- '401 Unauthorized: Verify your credentials'
- '404 Not Found: Endpoint doesn''t exist'
- '401 Unauthorized: Recheck client key or server key'
- 402 Merchant doesn’t have access for this payment type
- 411 Token id is missing, invalid, or timed out
- '404 Not Found: Check if the endpoint is correct'
- '401 Unauthorized: Invalid credentials provided.'
- '403 Forbidden: Access denied for the requested resource.'
- Error Code & Response Code documentation available
- failed to register transaction
- '401 Unauthorized: Recheck OAuth credentials'
- '500 Internal Server Error: Retry the request'
- '400 Bad Request: Check request parameters.'
- '401 Unauthorized: Verify API key and secret.'
- '400 Bad Request: Check your request parameters'
- '404 Not Found: Check the endpoint URL'
- '401 Unauthorized: Check your credentials or token expiration.'
- '404 Not Found: Verify the endpoint path.'
- '400 Bad Request: Check the request payload for correctness.'
- '401 Unauthorized: Check client key or server key.'
- '402 Payment Required: Insufficient funds or invalid payment method.'
- '401 Unauthorized: Check your OAuth token.'
- '400 Bad Request: Check request parameters and payload'
- '401 Unauthorized: Access denied due to unauthorized transaction, please check client
  key or server key'
- '403 Forbidden: Check your permissions for this operation'
- '401 Unauthorized: Check your API key and credentials'
- '400 Bad Request: Check the request format and required fields'
- '401 Unauthorized: Recheck your API key'
- '429 Too Many Requests: Throttle API calls'
- 'INVALID_REQUEST: Check the request parameters'
- '402 Payment Required: Check payment method or insufficient funds'
- '401 Unauthorized: Check your client ID and secret.'
- '403 Forbidden: Ensure your account has the necessary permissions.'
- 401 Access denied due to unauthorized transaction, please check client key or server
  key
- '401 Unauthorized: Check your API key and credentials.'
- 'channel_response_code: 05'
- '401 Unauthorized: Check your API key and account status.'
- '404 Not Found: Ensure the endpoint is correct.'
- '400 Bad Request: Check the request parameters.'
- '404 Not Found: Verify endpoint path.'
- '422 Unprocessable Entity: Check request parameters.'
- phone number or email address has been taken
- 'REQUEST_LIMIT_EXCEEDED: Token id is missing, invalid, or timed out'
- '403 Forbidden: Ensure API key is valid'
- '404 Not Found: Check endpoint path'
- '404 Not Found: Check the endpoint path'
- '402 Payment Required: Check payment method availability'
- '500 Internal Server Error: Try again later or contact support'
- 'Invalid Destination Account: Account is inactive/dormant/temporarily blocked from
  the bank side.'
- '401 Unauthorized: Check your API key or token.'
- '401 Unauthorized: Check client credentials or token expiration'
- '401 Unauthorized: Check client_id and client_secret'
- 'INVALID_REQUEST: Check request parameters'
- 'UNAUTHORIZED: Verify API key and credentials'
- 'NOT_FOUND: Verify endpoint and resource'
- 'Error: total amount mismatch between item_details and gross_amount.'
- '401 Unauthorized: Check your client credentials.'
- '403 Forbidden: You do not have access to this resource.'
- '400 Bad Request: Check request payload'
- '429 Too Many Requests: Rate limit exceeded'
- '422 Unprocessable Entity: Validate request parameters'
- '401 Unauthorized: Please check client key or server key'
- '401 Unauthorized: Recheck OAuth credentials or token expiration'
- '401 Unauthorized: Invalid credentials or token expired'
- '200: Success'
- '400: Bad Request - check the request body'
- '401: Unauthorized - check your authentication credentials'
- '404 Not Found: Ensure the correct endpoint is being called'
- '401 Unauthorized: Verify credentials.'
- '403 Forbidden: Check permissions.'
auth_info:
  mentioned_objects:
  - OauthToken
  - AuthProvider
  - NamedCredential
  - Token
client:
  base_url: https://api.midtrans.com
  auth:
    type: oauth2
source_metadata: null
