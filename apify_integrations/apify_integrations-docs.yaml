resources:
- name: run_actor
  endpoint:
    path: /acts/compass~crawler-google-places/run-sync-get-dataset-items
    method: POST
    data_selector: items
- name: Run Actor
  endpoint:
    path: /v2/acts/[actor_id]/runs
    method: POST
- name: actor
  endpoint:
    path: /v2/actor
    method: GET
    data_selector: items
- name: instagram_analysis_agent
  endpoint:
    path: /v2/actor/instagram-scraper
    method: POST
    data_selector: output
    params: {}
- name: Actor run
  endpoint:
    path: /v2/actor-run-get
    method: GET
    data_selector: data
- name: actor_run
  endpoint:
    path: /v2/acts/compass~crawler-google-places/runs
    method: POST
    data_selector: items
- name: Actor
  endpoint:
    path: /platform/actors
    method: GET
    data_selector: actors
    params: {}
- name: schedules
  endpoint:
    path: /api/v2/schedules
    method: POST
- name: dataset
  endpoint:
    path: /api/v2/dataset
    method: GET
- name: key_value_store
  endpoint:
    path: /api/v2/key-value-store
    method: GET
- name: request_queue
  endpoint:
    path: /api/v2/request-queue
    method: GET
- name: get_run
  endpoint:
    path: /v2/actor-runs/:runId
    method: GET
    data_selector: run
    params: {}
- name: actor_run
  endpoint:
    path: /v2/actor-runs/:runId
    method: GET
    data_selector: data
    params:
      runId: path
- name: users_me
  endpoint:
    path: /v2/users/me
    method: GET
- name: actor_run_sync
  endpoint:
    path: /v2/acts/:actorId/run-sync
    method: POST
- name: actor_run_async
  endpoint:
    path: /v2/acts/:actorId/runs
    method: POST
- name: dataset_items
  endpoint:
    path: /v2/datasets/:datasetId/items
    method: GET
- name: key_value_store_records
  endpoint:
    path: /v2/key-value-stores/:storeId/records/:recordKey
    method: GET
- name: get_log
  endpoint:
    path: /v2/logs/:buildOrRunId
    method: GET
- name: monitor_run_status
  endpoint:
    path: /v2/actor-runs/:runId
    method: GET
- name: store_data_in_dataset
  endpoint:
    path: /v2/datasets/:datasetId/items
    method: POST
- name: store_data_in_key_value_store
  endpoint:
    path: /v2/key-value-stores/:storeId/records/:recordKey
    method: PUT
- name: actors
  endpoint:
    path: /acts
    method: GET
- name: actor
  endpoint:
    path: /acts/{actorId}
    method: GET
- name: actors
  endpoint:
    path: /v2/acts
    method: GET
    data_selector: items
    params:
      my: 'true'
      offset: 0
      limit: 1000
      desc: false
- name: actors
  endpoint:
    path: /acts
    method: GET
    params:
      my: '1'
      offset: 0
      limit: 1000
      desc: '0'
- name: MyActor
  endpoint:
    path: /api/v2/actors
    method: POST
- name: Create Actor
  endpoint:
    path: /acts
    method: POST
    data_selector: Actor object
    params: {}
- name: actor
  endpoint:
    path: /v2/acts/:actorId
    method: GET
- name: MyActor
- name: Update Actor
  endpoint:
    path: /acts/:actorId
    method: PUT
- name: Delete Actor
  endpoint:
    path: /v2/acts/:actorId
    method: DELETE
    data_selector: '{}'
- name: actor_versions
  endpoint:
    path: /acts/{actorId}/versions
    method: GET
- name: create_actor_version
  endpoint:
    path: /acts/{actorId}/versions
    method: POST
- name: get_actor_version
  endpoint:
    path: /acts/{actorId}/versions/{versionNumber}
    method: GET
- name: update_actor_version
  endpoint:
    path: /acts/{actorId}/versions/{versionNumber}
    method: PUT
- name: delete_actor_version
  endpoint:
    path: /acts/{actorId}/versions/{versionNumber}
    method: DELETE
- name: get_environment_variables
  endpoint:
    path: /acts/{actorId}/versions/{versionNumber}/env-vars
    method: GET
- name: create_environment_variable
  endpoint:
    path: /acts/{actorId}/versions/{versionNumber}/env-vars
    method: POST
- name: get_environment_variable
  endpoint:
    path: /acts/{actorId}/versions/{versionNumber}/env-vars/{envVarName}
    method: GET
- name: update_environment_variable
  endpoint:
    path: /acts/{actorId}/versions/{versionNumber}/env-vars/{envVarName}
    method: PUT
- name: delete_environment_variable
  endpoint:
    path: /acts/{actorId}/versions/{versionNumber}/env-vars/{envVarName}
    method: DELETE
- name: actor_versions
  endpoint:
    path: /acts/:actorId/versions
    method: GET
- name: create_version
  endpoint:
    path: /acts/:actorId/versions
    method: POST
    data_selector: Version object
- name: version
  endpoint:
    path: /v2/acts/:actorId/versions
    method: POST
    data_selector: data
    params: {}
- name: actor_version
  endpoint:
    path: /acts/:actorId/versions/:versionNumber
    method: GET
- name: actor_version
  endpoint:
    path: /v2/acts/:actorId/versions/:versionNumber
    method: GET
    data_selector: data
    params:
      actorId: path
      versionNumber: path
- name: Update Actor version
  endpoint:
    path: /acts/:actorId/versions/:versionNumber
    method: PUT
- name: actor_version
  endpoint:
    path: /v2/acts/:actorId/versions/:versionNumber
    method: PUT
    data_selector: data
    params: {}
- name: Delete version
  endpoint:
    path: /v2/acts/:actorId/versions/:versionNumber
    method: DELETE
- name: environment_variables
  endpoint:
    path: /v2/acts/:actorId/versions/:versionNumber/env-vars
    method: GET
- name: create_environment_variable
  endpoint:
    path: /acts/:actorId/versions/:versionNumber/env-vars
    method: POST
    data_selector: null
    params: {}
- name: env-vars
  endpoint:
    path: /v2/acts/:actorId/versions/:versionNumber/env-vars
    method: POST
    data_selector: data
    params: {}
- name: environment_variable
  endpoint:
    path: /v2/acts/:actorId/versions/:versionNumber/env-vars/:envVarName
    method: GET
    data_selector: data
    params: {}
- name: update_environment_variable
  endpoint:
    path: /acts/:actorId/versions/:versionNumber/env-vars/:envVarName
    method: PUT
- name: env_var
  endpoint:
    path: /v2/acts/:actorId/versions/:versionNumber/env-vars/:envVarName
    method: PUT
    data_selector: data
    params: {}
- name: delete_environment_variable
  endpoint:
    path: /v2/acts/:actorId/versions/:versionNumber/env-vars/:envVarName
    method: DELETE
    data_selector: '{}'
    params: {}
- name: builds
  endpoint:
    path: /acts/{actorId}/builds
    method: GET
- name: create_build
  endpoint:
    path: /acts/{actorId}/builds
    method: POST
- name: default_build
  endpoint:
    path: /acts/{actorId}/builds/default
    method: GET
- name: get_build
  endpoint:
    path: /acts/{actorId}/builds/{buildId}
    method: GET
- name: abort_build
  endpoint:
    path: /acts/{actorId}/builds/{buildId}/abort
    method: POST
- name: builds
  endpoint:
    path: /acts/:actorId/builds
    method: GET
    params:
      offset: 0
      limit: 1000
- name: builds
  endpoint:
    path: /v2/acts/:actorId/builds
    method: GET
    data_selector: items
    params:
      offset: offset
      limit: limit
      desc: desc
- name: build_actor
  endpoint:
    path: /v2/acts/:actorId/builds
    method: POST
    data_selector: data
    params:
      actorId: path
      version: query
- name: default_build
  endpoint:
    path: /v2/acts/:actorId/builds/default
    method: GET
    data_selector: data
    params:
      actorId: path
- name: default_build
  endpoint:
    path: /acts/:actorId/builds/default
    method: GET
    data_selector: build
    params: {}
- name: actor_build_openapi
  endpoint:
    path: /acts/:actorId/builds/:buildId/openapi.json
    method: GET
- name: actor_build_default_openapi
  endpoint:
    path: /actor-build-openapi-json-get
    method: GET
- name: run-sync-get-dataset-items
  endpoint:
    path: /acts/<username>~<actor>/run-sync-get-dataset-items
    method: POST
    data_selector: application/json
    params:
      token:
        in: query
        required: true
        schema:
          type: string
        description: Enter your Apify token here
- name: runs
  endpoint:
    path: /acts/<username>~<actor>/runs
    method: POST
    data_selector: application/json
    params:
      string:
        in: query
        required: true
        schema:
          type: string
        description: string
- name: run-sync
  endpoint:
    path: /acts/<username>~<actor>/run-sync
    method: POST
    data_selector: application/json
    params:
      string:
        in: query
        required: true
        schema:
          type: string
        description: string
- name: get_build
  endpoint:
    path: /v2/acts/:actorId/builds/:buildId
    method: GET
    params:
      waitForFinish: 0
- name: build
  endpoint:
    path: /v2/acts/:actorId/builds/:buildId
    method: GET
    data_selector: data
    params:
      actorId: path
      buildId: path
- name: abort_build
  endpoint:
    path: /acts/:actorId/builds/:buildId/abort
    method: POST
- name: abort_build
  endpoint:
    path: /v2/acts/:actorId/builds/:buildId/abort
    method: POST
- name: actor_runs
  endpoint:
    path: /acts/{actorId}/runs
    method: GET
    data_selector: runs
    params: {}
- name: run_actor
  endpoint:
    path: /acts/{actorId}/runs
    method: POST
    data_selector: run
    params: {}
- name: get_last_run
  endpoint:
    path: /acts/{actorId}/runs/last
    method: GET
    data_selector: run
    params: {}
- name: runs
  endpoint:
    path: /v2/acts/:actorId/runs
    method: GET
    data_selector: items
    params:
      actorId: path
      offset: query
      limit: query
      desc: query
      status: query
- name: runs
  endpoint:
    path: /acts/:actorId/runs
    method: GET
    params:
      offset: 0
      limit: 1000
- name: Run Actor
  endpoint:
    path: /acts/:actorId/runs
    method: POST
- name: actor_runs
  endpoint:
    path: /v2/acts/:actorId/runs
    method: POST
    data_selector: data
    params:
      actorId: path
      timeout: query
      memory: query
      maxItems: query
      maxTotalChargeUsd: query
      build: query
      waitForFinish: query
      webhooks: query
- name: run_actor_sync
  endpoint:
    path: /acts/:actorId/run-sync
    method: POST
    data_selector: OUTPUT
    params: {}
- name: run_actor
  endpoint:
    path: /v2/acts/:actorId/run-sync
    method: POST
    data_selector: '{}'
- name: run_actor_sync
  endpoint:
    path: /acts/:actorId/run-sync
    method: GET
- name: run_actor_sync_get_dataset_items
  endpoint:
    path: /acts/:actorId/run-sync-get-dataset-items
    method: POST
    data_selector: dataset items
- name: dataset_items
  endpoint:
    path: /v2/acts/:actorId/run-sync-get-dataset-items
    method: POST
    data_selector: data
    params:
      actorId: required
      timeout: optional
      memory: optional
      maxItems: optional
      maxTotalChargeUsd: optional
      build: optional
      webhooks: optional
      format: optional
      clean: optional
      offset: optional
      limit: optional
      fields: optional
      omit: optional
      unwind: optional
      flatten: optional
      desc: optional
      attachment: optional
      delimiter: optional
      bom: optional
      xmlRoot: optional
      xmlRow: optional
      skipHeaderRow: optional
      skipHidden: optional
      skipEmpty: optional
      simplified: optional
      skipFailedPages: optional
- name: run_sync_get_dataset_items
  endpoint:
    path: /v2/acts/:actorId/run-sync-get-dataset-items
    method: GET
- name: run_actor_sync_get_dataset_items
  endpoint:
    path: /acts/:actorId/run-sync-get-dataset-items
    method: GET
    data_selector: items
    params: {}
- name: resurrect_run
  endpoint:
    path: /v2/acts/:actorId/runs/:runId/resurrect
    method: POST
- name: resurrect_run
  endpoint:
    path: /v2/acts/:actorId/runs/:runId/resurrect
    method: POST
    data_selector: data
    params:
      actorId: path
      runId: path
      build: query
      timeout: query
      memory: query
- name: last_run
  endpoint:
    path: /v2/acts/:actorId/runs/last
    method: GET
    params:
      status: SUCCEEDED
- name: last_run_log
  endpoint:
    path: /v2/acts/:actorId/runs/last/log
    method: GET
    params: {}
- name: last_run_key_value_store
  endpoint:
    path: /v2/acts/:actorId/runs/last/key-value-store
    method: GET
    params: {}
- name: last_run_dataset
  endpoint:
    path: /v2/acts/:actorId/runs/last/dataset
    method: GET
    params: {}
- name: last_run_request_queue
  endpoint:
    path: /v2/acts/:actorId/runs/last/request-queue
    method: GET
    params: {}
- name: last_run
  endpoint:
    path: /v2/acts/:actorId/runs/last
    method: GET
    data_selector: data
    params:
      actorId: path
- name: get_run
  endpoint:
    path: /v2/acts/:actorId/runs/:runId
    method: GET
    params:
      waitForFinish: '0'
- name: get_run
  endpoint:
    path: /v2/acts/:actorId/runs/:runId
    method: GET
- name: abort_run
  endpoint:
    path: /acts/:actorId/runs/:runId/abort
    method: POST
- name: abort_run
  endpoint:
    path: /v2/acts/:actorId/runs/:runId/abort
    method: POST
    params:
      actorId: path
      runId: path
      gracefully: query
- name: metamorph_run
  endpoint:
    path: /v2/acts/:actorId/runs/:runId/metamorph
    method: POST
- name: metamorph
  endpoint:
    path: /v2/acts/:actorId/runs/:runId/metamorph
    method: POST
    data_selector: data
    params:
      actorId: path
      runId: path
      targetActorId: query
- name: webhooks
  endpoint:
    path: /acts/{actorId}/webhooks
    method: GET
    data_selector: webhooks
    params: {}
- name: webhooks
  endpoint:
    path: /acts/:actorId/webhooks
    method: GET
    data_selector: webhooks
    params:
      offset: 0
      limit: 1000
- name: webhooks
  endpoint:
    path: /v2/acts/:actorId/webhooks
    method: GET
    data_selector: items
    params:
      actorId: path
      offset: query
      limit: query
      desc: query
- name: user_builds
  endpoint:
    path: /actor-builds
    method: GET
    data_selector: builds
- name: build
  endpoint:
    path: /actor-builds/{buildId}
    method: GET
    data_selector: build
- name: delete_build
  endpoint:
    path: /actor-builds/{buildId}
    method: DELETE
    data_selector: 'null'
- name: abort_build
  endpoint:
    path: /actor-builds/{buildId}/abort
    method: POST
    data_selector: 'null'
- name: build_log
  endpoint:
    path: /actor-builds/{buildId}/log
    method: GET
    data_selector: log
- name: openapi_definition
  endpoint:
    path: /actor-builds/{buildId}/openapi.json
    method: GET
    data_selector: definition
- name: actor_builds
  endpoint:
    path: /actor-builds
    method: GET
    params:
      offset: 0
      limit: 1000
- name: actor_builds
  endpoint:
    path: /v2/actor-builds
    method: GET
    data_selector: items
    params:
      offset: query
      limit: query
      desc: query
- name: actor_builds
  endpoint:
    path: /v2/actor-builds/:buildId
    method: GET
    data_selector: data
- name: get_build
  endpoint:
    path: /actor-builds/:buildId
    method: GET
    data_selector: build
    params: {}
- name: delete_build
  endpoint:
    path: /v2/actor-builds/:buildId
    method: DELETE
- name: abort_build
  endpoint:
    path: /v2/actor-builds/:buildId/abort
    method: POST
- name: abort_build
  endpoint:
    path: /actor-builds/:buildId/abort
    method: POST
- name: get_log
  endpoint:
    path: /v2/actor-builds/:buildId/log
    method: GET
    data_selector: string
    params:
      buildId: required
      stream: required
      download: required
- name: get_openapi_definition
  endpoint:
    path: /actor-builds/:buildId/openapi.json
    method: GET
- name: get_openapi_definition_default
  endpoint:
    path: /act-openapi-json-get
    method: GET
- name: run-sync-get-dataset-items
  endpoint:
    path: /acts/<username>~<actor>/run-sync-get-dataset-items
    method: POST
    data_selector: application/json
    params: {}
- name: runs
  endpoint:
    path: /acts/<username>~<actor>/runs
    method: POST
    data_selector: application/json
    params: {}
- name: run-sync
  endpoint:
    path: /acts/<username>~<actor>/run-sync
    method: POST
    data_selector: application/json
    params: {}
- name: actor_runs
  endpoint:
    path: /actor-runs
    method: GET
- name: get_run
  endpoint:
    path: /actor-runs/{runId}
    method: GET
- name: update_status_message
  endpoint:
    path: /actor-runs/{runId}
    method: PUT
- name: delete_run
  endpoint:
    path: /actor-runs/{runId}
    method: DELETE
- name: abort_run
  endpoint:
    path: /actor-runs/{runId}/abort
    method: POST
- name: metamorph_run
  endpoint:
    path: /actor-runs/{runId}/metamorph
    method: POST
- name: reboot_run
  endpoint:
    path: /actor-runs/{runId}/reboot
    method: POST
- name: resurrect_run
  endpoint:
    path: /actor-runs/{runId}/resurrect
    method: POST
- name: charge_events_in_run
  endpoint:
    path: /actor-runs/{runId}/charge
    method: POST
- name: actor_runs
  endpoint:
    path: /actor-runs
    method: GET
    params:
      offset: 0
      limit: 1000
- name: actor_runs
  endpoint:
    path: /v2/actor-runs
    method: GET
    data_selector: items
    params:
      offset: query
      limit: query
      desc: query
      status: query
- name: update_status_message
  endpoint:
    path: /v2/actor-runs/:runId
    method: PUT
    data_selector: application/json
- name: actor_runs
  endpoint:
    path: /v2/actor-runs/:runId
    method: PUT
    data_selector: object
    params:
      runId: path
- name: delete_run
  endpoint:
    path: /v2/actor-runs/:runId
    method: DELETE
- name: abort_run
  endpoint:
    path: /actor-runs/:runId/abort
    method: POST
    data_selector: details
    params: {}
- name: abort_run
  endpoint:
    path: /v2/actor-runs/:runId/abort
    method: POST
    data_selector: response
    params:
      runId: path
      gracefully: query
- name: metamorph_run
  endpoint:
    path: /v2/actor-runs/:runId/metamorph
    method: POST
- name: metamorph_run
  endpoint:
    path: /v2/actor-runs/:runId/metamorph
    method: POST
    data_selector: data
    params:
      runId: ''
      targetActorId: ''
- name: reboot_run
  endpoint:
    path: /v2/actor-runs/:runId/reboot
    method: POST
- name: reboot_run
  endpoint:
    path: /v2/actor-runs/:runId/reboot
    method: POST
    data_selector: data
    params:
      runId: path
- name: resurrect_run
  endpoint:
    path: /v2/actor-runs/:runId/resurrect
    method: POST
- name: resurrect_run
  endpoint:
    path: /v2/actor-runs/:runId/resurrect
    method: POST
    params:
      runId: path
      build: query
      timeout: query
      memory: query
      maxItems: query
      maxTotalChargeUsd: query
- name: charge_events_in_run
  endpoint:
    path: /actor-runs/:runId/charge
    method: POST
- name: charge_events
  endpoint:
    path: /v2/actor-runs/:runId/charge
    method: POST
    data_selector: null
    params:
      runId: path
- name: actor_tasks
  endpoint:
    path: /actor-tasks
    method: GET
- name: create_task
  endpoint:
    path: /actor-tasks
    method: POST
- name: get_task
  endpoint:
    path: /actor-tasks/{actorTaskId}
    method: GET
- name: update_task
  endpoint:
    path: /actor-tasks/{actorTaskId}
    method: PUT
- name: delete_task
  endpoint:
    path: /actor-tasks/{actorTaskId}
    method: DELETE
- name: get_task_input
  endpoint:
    path: /actor-tasks/{actorTaskId}/input
    method: GET
- name: update_task_input
  endpoint:
    path: /actor-tasks/{actorTaskId}/input
    method: PUT
- name: get_list_of_webhooks
  endpoint:
    path: /actor-tasks/{actorTaskId}/webhooks
    method: GET
- name: get_list_of_task_runs
  endpoint:
    path: /actor-tasks/{actorTaskId}/runs
    method: GET
- name: run_task
  endpoint:
    path: /actor-tasks/{actorTaskId}/runs
    method: POST
- name: run_task_synchronously
  endpoint:
    path: /actor-tasks/{actorTaskId}/run-sync
    method: GET
- name: run_task_synchronously_with_items
  endpoint:
    path: /actor-tasks/{actorTaskId}/run-sync-get-dataset-items
    method: GET
- name: get_last_run
  endpoint:
    path: /actor-tasks/{actorTaskId}/runs/last
    method: GET
- name: actor_tasks
  endpoint:
    path: /actor-tasks
    method: GET
    params:
      offset: 0
      limit: 1000
- name: actor_tasks
  endpoint:
    path: /v2/actor-tasks
    method: GET
    data_selector: items
    params:
      offset: query
      limit: query
      desc: query
- name: actor-tasks
  endpoint:
    path: /v2/actor-tasks
    method: POST
    data_selector: data
- name: create_task
  endpoint:
    path: /actor-tasks
    method: POST
    data_selector: task
    params: {}
- name: actor_task
  endpoint:
    path: /v2/actor-tasks/:actorTaskId
    method: GET
    data_selector: data
- name: actor_task
  endpoint:
    path: /v2/actor-tasks/:actorTaskId
    method: PUT
    data_selector: data
    params: {}
- name: update_task
  endpoint:
    path: /actor-tasks/:actorTaskId
    method: PUT
- name: delete_task
  endpoint:
    path: /v2/actor-tasks/:actorTaskId
    method: DELETE
    data_selector: object
    params: {}
- name: get_task_input
  endpoint:
    path: /v2/actor-tasks/:actorTaskId/input
    method: GET
    data_selector: object
    params: {}
- name: update_task_input
  endpoint:
    path: /v2/actor-tasks/:actorTaskId/input
    method: PUT
    data_selector: object
- name: webhooks
  endpoint:
    path: /actor-tasks/:actorTaskId/webhooks
    method: GET
    data_selector: webhooks
    params:
      offset: 0
      limit: 1000
- name: webhooks
  endpoint:
    path: /v2/actor-tasks/:actorTaskId/webhooks
    method: GET
    data_selector: data.items
    params:
      actorTaskId: path
      offset: query
      limit: query
      desc: query
- name: task_runs
  endpoint:
    path: /actor-tasks/:actorTaskId/runs
    method: GET
    params:
      offset: 0
      limit: 1000
- name: task_runs
  endpoint:
    path: /v2/actor-tasks/:actorTaskId/runs
    method: GET
    params:
      actorTaskId: required
      offset: optional
      limit: optional
      desc: optional
      status: optional
- name: run_task
  endpoint:
    path: /actor-tasks/:actorTaskId/runs
    method: POST
- name: actor_task_runs
  endpoint:
    path: /v2/actor-tasks/:actorTaskId/runs
    method: POST
    data_selector: results
- name: run_task_synchronously
  endpoint:
    path: /actor-tasks/:actorTaskId/run-sync
    method: GET
    params: {}
- name: run_task_synchronously
  endpoint:
    path: /actor-tasks/:actorTaskId/run-sync
    method: POST
- name: actor_task_run_sync
  endpoint:
    path: /v2/actor-tasks/:actorTaskId/run-sync
    method: POST
    data_selector: '{}'
- name: run_task_synchronously_and_get_dataset_items
  endpoint:
    path: /actor-tasks/:actorTaskId/run-sync-get-dataset-items
    method: GET
- name: run_task_sync_get_dataset_items
  endpoint:
    path: /actor-tasks/:actorTaskId/run-sync-get-dataset-items
    method: POST
- name: run_sync_get_dataset_items
  endpoint:
    path: /v2/actor-tasks/:actorTaskId/run-sync-get-dataset-items
    method: POST
    data_selector: error
    params:
      actorTaskId: path
- name: last_run
  endpoint:
    path: /v2/actor-tasks/:actorTaskId/runs/last
    method: GET
- name: last_run
  endpoint:
    path: /v2/actor-tasks/{actorTaskId}/runs/last
    method: GET
    params:
      status: SUCCEEDED
- name: last_run_log
  endpoint:
    path: /v2/actor-tasks/{actorTaskId}/runs/last/log
    method: GET
    params:
      status: null
- name: last_run_key_value_store
  endpoint:
    path: /v2/actor-tasks/{actorTaskId}/runs/last/key-value-store
    method: GET
    params:
      status: null
- name: last_run_dataset
  endpoint:
    path: /v2/actor-tasks/{actorTaskId}/runs/last/dataset
    method: GET
    params:
      status: null
- name: last_run_request_queue
  endpoint:
    path: /v2/actor-tasks/{actorTaskId}/runs/last/request-queue
    method: GET
    params:
      status: null
- name: datasets
  endpoint:
    path: /datasets
    method: GET
    data_selector: records
    params: {}
- name: create_dataset
  endpoint:
    path: /datasets
    method: POST
    data_selector: records
    params: {}
- name: get_dataset
  endpoint:
    path: /datasets/{datasetId}
    method: GET
    data_selector: records
    params: {}
- name: update_dataset
  endpoint:
    path: /datasets/{datasetId}
    method: PUT
    data_selector: records
    params: {}
- name: delete_dataset
  endpoint:
    path: /datasets/{datasetId}
    method: DELETE
    data_selector: records
    params: {}
- name: get_items
  endpoint:
    path: /datasets/{datasetId}/items
    method: GET
    data_selector: records
    params: {}
- name: store_items
  endpoint:
    path: /datasets/{datasetId}/items
    method: POST
    data_selector: records
    params: {}
- name: get_dataset_statistics
  endpoint:
    path: /datasets/{datasetId}/statistics
    method: GET
    data_selector: records
    params: {}
- name: datasets
  endpoint:
    path: /datasets
    method: GET
    data_selector: array
    params:
      offset: 0
      limit: 1000
- name: datasets
  endpoint:
    path: /v2/datasets
    method: GET
    data_selector: items
    params:
      offset: query
      limit: query
      desc: query
- name: datasets
  endpoint:
    path: /datasets
    method: POST
    data_selector: object
    params:
      name: Custom unique name to easily identify the dataset in the future
- name: datasets
  endpoint:
    path: /v2/datasets
    method: POST
    data_selector: data
    params: {}
- name: dataset
  endpoint:
    path: /v2/datasets/:datasetId
    method: GET
    data_selector: data
    params:
      datasetId: path
- name: dataset
  endpoint:
    path: /datasets/:datasetId
    method: GET
    data_selector: dataset
    params: {}
- name: dataset
  endpoint:
    path: /v2/datasets/:datasetId
    method: PUT
    data_selector: name
    params:
      datasetId: path
- name: delete_dataset
  endpoint:
    path: /v2/datasets/:datasetId
    method: DELETE
- name: items
  endpoint:
    path: /v2/datasets/:datasetId/items
    method: GET
    params:
      format: json
- name: dataset_items
  endpoint:
    path: /datasets/:datasetId/items
    method: GET
    data_selector: items
- name: store_items
  endpoint:
    path: /datasets/:datasetId/items
    method: POST
    data_selector: items
    params: {}
- name: dataset_statistics
  endpoint:
    path: /datasets/:datasetId/statistics
    method: GET
    data_selector: field statistics
    params: {}
- name: dataset_statistics
  endpoint:
    path: /v2/datasets/:datasetId/statistics
    method: GET
    data_selector: data
- name: Get list of key-value stores
  endpoint:
    path: /key-value-stores
    method: GET
- name: Create key-value store
  endpoint:
    path: /key-value-stores
    method: POST
- name: Get store
  endpoint:
    path: /key-value-stores/{storeId}
    method: GET
- name: Update store
  endpoint:
    path: /key-value-stores/{storeId}
    method: PUT
- name: Delete store
  endpoint:
    path: /key-value-stores/{storeId}
    method: DELETE
- name: Get list of keys
  endpoint:
    path: /key-value-stores/{storeId}/keys
    method: GET
- name: Get record
  endpoint:
    path: /key-value-stores/{storeId}/records/{recordKey}
    method: GET
- name: Check if a record exists
  endpoint:
    path: /key-value-stores/{storeId}/records/{recordKey}
    method: HEAD
- name: Store record
  endpoint:
    path: /key-value-stores/{storeId}/records/{recordKey}
    method: PUT
- name: Delete record
  endpoint:
    path: /key-value-stores/{storeId}/records/{recordKey}
    method: DELETE
- name: key_value_stores
  endpoint:
    path: /key-value-stores
    method: GET
    params:
      offset: 0
      limit: 1000
- name: key_value_stores
  endpoint:
    path: /v2/key-value-stores
    method: GET
    data_selector: data.items
    params:
      offset: query
      limit: query
      desc: query
- name: key_value_store
  endpoint:
    path: /key-value-stores
    method: POST
- name: key_value_store
  endpoint:
    path: /key-value-stores/:storeId
    method: GET
    data_selector: details
    params: {}
- name: key-value-store
  endpoint:
    path: /v2/key-value-stores/:storeId
    method: GET
    data_selector: data
    params: {}
- name: key_value_store
  endpoint:
    path: /key-value-stores/:storeId
    method: PUT
- name: key_value_store
  endpoint:
    path: /v2/key-value-stores/:storeId
    method: PUT
    data_selector: name
    params: {}
- name: key_value_store
  endpoint:
    path: /v2/key-value-stores/:storeId
    method: DELETE
    data_selector: 'null'
    params: {}
- name: keys
  endpoint:
    path: /key-value-stores/:storeId/keys
    method: GET
    data_selector: keys
    params: {}
- name: keys
  endpoint:
    path: /v2/key-value-stores/:storeId/keys
    method: GET
    params:
      storeId: path
      exclusiveStartKey: query
      limit: query
      collection: query
      prefix: query
- name: key_value_store_record
  endpoint:
    path: /v2/key-value-stores/:storeId/records/:recordKey
    method: GET
    data_selector: foo
    params: {}
- name: check_if_record_exists
  endpoint:
    path: /v2/key-value-stores/:storeId/records/:recordKey
    method: HEAD
- name: store_record
  endpoint:
    path: /key-value-stores/:storeId/records/:recordKey
    method: PUT
    data_selector: foo
    params: {}
- name: key_value_store_record
  endpoint:
    path: /v2/key-value-stores/:storeId/records/:recordKey
    method: PUT
    data_selector: '{}'
    params:
      storeId: path required
      recordKey: path required
- name: delete_record
  endpoint:
    path: /v2/key-value-stores/:storeId/records/:recordKey
    method: DELETE
    data_selector: null
    params:
      storeId: path
      recordKey: path
- name: request_queues
  endpoint:
    path: /request-queues
    method: GET
- name: create_request_queue
  endpoint:
    path: /request-queues
    method: POST
- name: get_request_queue
  endpoint:
    path: /request-queues/{queueId}
    method: GET
- name: update_request_queue
  endpoint:
    path: /request-queues/{queueId}
    method: PUT
- name: delete_request_queue
  endpoint:
    path: /request-queues/{queueId}
    method: DELETE
- name: add_requests
  endpoint:
    path: /request-queues/{queueId}/requests/batch
    method: POST
- name: delete_requests
  endpoint:
    path: /request-queues/{queueId}/requests/batch
    method: DELETE
- name: request_queues
  endpoint:
    path: /request-queues
    method: GET
    data_selector: queues
    params:
      offset: 0
      limit: 1000
- name: request_queues
  endpoint:
    path: /v2/request-queues
    method: GET
    data_selector: items
    params:
      offset: query
      limit: query
      desc: query
      unnamed: query
- name: request_queue
  endpoint:
    path: /request-queues
    method: POST
    params:
      name: string
- name: request_queue
  endpoint:
    path: /request-queues/:queueId
    method: GET
- name: request_queue
  endpoint:
    path: /v2/request-queues/:queueId
    method: GET
    data_selector: data
    params:
      queueId: path
- name: update_request_queue
  endpoint:
    path: /v2/request-queues/:queueId
    method: PUT
- name: request_queue
  endpoint:
    path: /v2/request-queues/:queueId
    method: PUT
    data_selector: name
    params: {}
- name: Delete request queue
  endpoint:
    path: /v2/request-queues/:queueId
    method: DELETE
- name: add_requests
  endpoint:
    path: /request-queues/:queueId/requests/batch
    method: POST
    data_selector: array
    params: {}
- name: request-queue-requests-batch
  endpoint:
    path: /v2/request-queues/:queueId/requests/batch
    method: POST
    data_selector: data.processedRequests
    params:
      queueId: path
- name: delete_requests
  endpoint:
    path: /request-queues/:queueId/requests/batch
    method: DELETE
- name: request-queues
  endpoint:
    path: /v2/request-queues/:queueId/requests/batch
    method: DELETE
    data_selector: data
    params:
      Content-Type: application/json
      queueId: path
- name: list_requests
  endpoint:
    path: /request-queues/{queueId}/requests
    method: GET
- name: add_request
  endpoint:
    path: /request-queues/{queueId}/requests
    method: POST
- name: get_request
  endpoint:
    path: /request-queues/{queueId}/requests/{requestId}
    method: GET
- name: update_request
  endpoint:
    path: /request-queues/{queueId}/requests/{requestId}
    method: PUT
- name: delete_request
  endpoint:
    path: /request-queues/{queueId}/requests/{requestId}
    method: DELETE
- name: list_requests
  endpoint:
    path: /request-queues/:queueId/requests
    method: GET
    params:
      clientKey: string
      exclusiveStartId: string
      limit: double
- name: request_queue_requests
  endpoint:
    path: /v2/request-queues/:queueId/requests
    method: GET
    params:
      queueId: path
      clientKey: query
      exclusiveStartId: query
      limit: query
- name: add_request
  endpoint:
    path: /request-queues/:queueId/requests
    method: POST
- name: request-queue-requests
  endpoint:
    path: /v2/request-queues/:queueId/requests
    method: POST
    data_selector: data
- name: request
  endpoint:
    path: /request-queues/:queueId/requests/:requestId
    method: GET
- name: request_queue_request
  endpoint:
    path: /v2/request-queues/:queueId/requests/:requestId
    method: GET
- name: update_request
  endpoint:
    path: /request-queues/:queueId/requests/:requestId
    method: PUT
- name: request
  endpoint:
    path: /v2/request-queues/:queueId/requests/:requestId
    method: PUT
    data_selector: data
    params:
      queueId: path
      requestId: path
- name: delete_request
  endpoint:
    path: /v2/request-queues/:queueId/requests/:requestId
    method: DELETE
    params: {}
- name: unlock_requests
  endpoint:
    path: /request-queues/{queueId}/requests/unlock
    method: POST
- name: get_head
  endpoint:
    path: /request-queues/{queueId}/head
    method: GET
- name: get_head_and_lock
  endpoint:
    path: /request-queues/{queueId}/head/lock
    method: POST
- name: prolong_request_lock
  endpoint:
    path: /request-queues/{queueId}/requests/{requestId}/lock
    method: PUT
- name: delete_request_lock
  endpoint:
    path: /request-queues/{queueId}/requests/{requestId}/lock
    method: DELETE
- name: unlock_requests
  endpoint:
    path: /v2/request-queues/:queueId/requests/unlock
    method: POST
- name: get_head
  endpoint:
    path: /v2/request-queues/:queueId/head
    method: GET
    data_selector: hadMultipleClients
    params: {}
- name: request_queue_head
  endpoint:
    path: /v2/request-queues/:queueId/head
    method: GET
- name: get_head_and_lock
  endpoint:
    path: /request-queues/:queueId/head/lock
    method: POST
- name: request_queue_head_lock
  endpoint:
    path: /v2/request-queues/:queueId/head/lock
    method: POST
    params:
      queueId: path
      lockSecs: query
- name: prolong_request_lock
  endpoint:
    path: /v2/request-queues/:queueId/requests/:requestId/lock
    method: PUT
    params:
      lockSecs: double
      clientKey: string
      forefront: string
- name: request_lock
  endpoint:
    path: /v2/request-queues/:queueId/requests/:requestId/lock
    method: PUT
- name: delete_request_lock
  endpoint:
    path: /v2/request-queues/:queueId/requests/:requestId/lock
    method: DELETE
- name: webhooks
  endpoint:
    path: /webhooks
    method: GET
    data_selector: webhooks
    params: {}
- name: create_webhook
  endpoint:
    path: /webhooks
    method: POST
    data_selector: webhook
    params: {}
- name: get_webhook
  endpoint:
    path: /webhooks/{webhookId}
    method: GET
    data_selector: webhook
    params: {}
- name: update_webhook
  endpoint:
    path: /webhooks/{webhookId}
    method: PUT
    data_selector: webhook
    params: {}
- name: delete_webhook
  endpoint:
    path: /webhooks/{webhookId}
    method: DELETE
    data_selector: webhook
    params: {}
- name: test_webhook
  endpoint:
    path: /webhooks/{webhookId}/test
    method: POST
    data_selector: result
    params: {}
- name: get_collection
  endpoint:
    path: /webhooks/{webhookId}/dispatches
    method: GET
    data_selector: dispatches
    params: {}
- name: webhooks
  endpoint:
    path: /v2/webhooks
    method: GET
    params:
      offset: '0'
      limit: '1000'
- name: webhooks
  endpoint:
    path: /v2/webhooks
    method: GET
    data_selector: items
- name: webhook
  endpoint:
    path: /webhooks
    method: POST
    data_selector: ''
- name: webhook
  endpoint:
    path: /v2/webhooks
    method: POST
    data_selector: data
- name: webhook
  endpoint:
    path: /v2/webhooks/:webhookId
    method: GET
- name: webhook
  endpoint:
    path: /v2/webhooks/:webhookId
    method: GET
    data_selector: data
    params:
      webhookId: path
- name: update_webhook
  endpoint:
    path: /webhooks/:webhookId
    method: PUT
- name: webhook
  endpoint:
    path: /v2/webhooks/:webhookId
    method: PUT
    data_selector: data
    params: {}
- name: webhook
  endpoint:
    path: /v2/webhooks/:webhookId
    method: DELETE
    data_selector: '{}'
- name: test_webhook
  endpoint:
    path: /v2/webhooks/:webhookId/test
    method: POST
- name: webhook_test
  endpoint:
    path: /v2/webhooks/:webhookId/test
    method: POST
    data_selector: data
    params:
      webhookId: path
- name: webhook_dispatches
  endpoint:
    path: /v2/webhooks/:webhookId/dispatches
    method: GET
    data_selector: dispatches
- name: webhook_dispatches
  endpoint:
    path: /v2/webhooks/:webhookId/dispatches
    method: GET
    data_selector: data.items
    params:
      webhookId: path
- name: webhook_dispatches
  endpoint:
    path: /webhook-dispatches
    method: GET
- name: webhook_dispatch
  endpoint:
    path: /webhook-dispatches/{dispatchId}
    method: GET
- name: webhook_dispatch
  endpoint:
    path: /webhook-dispatches/:dispatchId
    method: GET
- name: webhook_dispatch
  endpoint:
    path: /v2/webhook-dispatches/:dispatchId
    method: GET
    data_selector: data
    params:
      dispatchId: path
- name: schedules
  endpoint:
    path: /schedules
    method: GET
    data_selector: schedules
- name: create_schedule
  endpoint:
    path: /schedules
    method: POST
    data_selector: schedule
- name: get_schedule
  endpoint:
    path: /schedules/{scheduleId}
    method: GET
    data_selector: schedule
- name: update_schedule
  endpoint:
    path: /schedules/{scheduleId}
    method: PUT
    data_selector: schedule
- name: delete_schedule
  endpoint:
    path: /schedules/{scheduleId}
    method: DELETE
    data_selector: 'null'
- name: get_schedule_log
  endpoint:
    path: /schedules/{scheduleId}/log
    method: GET
    data_selector: log
- name: schedules
  endpoint:
    path: /schedules
    method: GET
    data_selector: records
    params:
      offset: 0
      limit: 1000
- name: schedules
  endpoint:
    path: /v2/schedules
    method: GET
    data_selector: items
    params:
      offset: ''
      limit: ''
      desc: ''
- name: schedules
  endpoint:
    path: /schedules
    method: POST
- name: schedules
  endpoint:
    path: /v2/schedules
    method: POST
    data_selector: data
    params: {}
- name: schedules
  endpoint:
    path: /v2/schedules/:scheduleId
    method: GET
    data_selector: data
- name: schedule
  endpoint:
    path: /schedules/:scheduleId
    method: GET
- name: schedules
  endpoint:
    path: /v2/schedules/:scheduleId
    method: PUT
    data_selector: data
    params: {}
- name: schedules
  endpoint:
    path: /schedules/:scheduleId
    method: PUT
    data_selector: schedule
    params: {}
- name: delete_schedule
  endpoint:
    path: /v2/schedules/:scheduleId
    method: DELETE
    data_selector: object
    params: {}
- name: schedule_log
  endpoint:
    path: /schedules/:scheduleId/log
    method: GET
    data_selector: records
    params: {}
- name: schedule_log
  endpoint:
    path: /v2/schedules/:scheduleId/log
    method: GET
    data_selector: data
    params:
      scheduleId: path
- name: Actors
  endpoint:
    path: /store
    method: GET
- name: actors
  endpoint:
    path: /store
    method: GET
    data_selector: actors
    params:
      limit: 1000
      offset: 0
- name: actors
  endpoint:
    path: /v2/store
    method: GET
    data_selector: items
    params:
      limit: '1000'
      offset: '0'
- name: log
  endpoint:
    path: /logs/{buildOrRunId}
    method: GET
    data_selector: log
- name: get_log
  endpoint:
    path: /logs/:buildOrRunId
    method: GET
    params:
      stream: 'true'
      download: 'true'
      raw: 'false'
- name: logs
  endpoint:
    path: /v2/logs/:buildOrRunId
    method: GET
    data_selector: string
    params:
      buildOrRunId: path
      stream: query
      download: query
      raw: query
- name: public_user_data
  endpoint:
    path: /users/{userId}
    method: GET
- name: private_user_data
  endpoint:
    path: /users/me
    method: GET
- name: monthly_usage
  endpoint:
    path: /users/me/usage/monthly
    method: GET
- name: limits
  endpoint:
    path: /users/me/limits
    method: GET
- name: update_limits
  endpoint:
    path: /users/me/limits
    method: PUT
- name: public_user_data
  endpoint:
    path: /v2/users/:userId
    method: GET
    data_selector: data
    params: {}
- name: private_user_data
  endpoint:
    path: /v2/users/me
    method: GET
    data_selector: ''
- name: user_data
  endpoint:
    path: /v2/users/me
    method: GET
    data_selector: data
- name: monthly_usage
  endpoint:
    path: /users/me/usage/monthly
    method: GET
    data_selector: ''
- name: monthly_usage
  endpoint:
    path: /v2/users/me/usage/monthly
    method: GET
    data_selector: data
- name: limits
  endpoint:
    path: /v2/users/me/limits
    method: GET
    data_selector: data
- name: update_limits
  endpoint:
    path: /v2/users/me/limits
    method: PUT
    data_selector: '{}'
- name: Run Actor
  endpoint:
    path: /run-actor
    method: POST
- name: Run Task
  endpoint:
    path: /run-task
    method: POST
- name: Scrape Single URL
  endpoint:
    path: /scrape-single-url
    method: POST
- name: Set Key-Value Store Record
  endpoint:
    path: /set-key-value-store-record
    method: POST
- name: Fetch Dataset Items
  endpoint:
    path: /fetch-dataset-items
    method: GET
- name: Find Last Actor Run
  endpoint:
    path: /find-last-actor-run
    method: GET
- name: Find Last Task Run
  endpoint:
    path: /find-last-task-run
    method: GET
- name: Get Key-Value Store Record
  endpoint:
    path: /get-key-value-store-record
    method: GET
- name: Get Dataset Items
  endpoint:
    path: /v2/datasets/{datasetId}/items
    method: GET
    data_selector: items
- name: Run an Actor
  endpoint:
    path: /v2/actor-runs
    method: POST
    data_selector: run
- name: Watch Actor Runs
  endpoint:
    path: /v2/actor-runs/{runId}
    method: GET
    data_selector: run
- name: actor_run
  endpoint:
    path: /actor/runs
    method: GET
- name: task_run
  endpoint:
    path: /task/runs
    method: GET
- name: integration
  endpoint:
    path: /integrations/slack
    method: GET
- name: Get Dataset Items
  endpoint:
    path: /platform/storage/dataset
    method: GET
    data_selector: items
- name: Scrape Single URL
  endpoint:
    path: /platform/storage/scrape
    method: POST
    data_selector: content
- name: Get Key-Value Store Record
  endpoint:
    path: /platform/storage/key-value-store
    method: GET
    data_selector: value
- name: Actor
  endpoint:
    path: /v2/actor
    method: GET
- name: Actor Task
  endpoint:
    path: /v2/actor-task
    method: GET
- name: Dataset
  endpoint:
    path: /v2/dataset
    method: GET
- name: datasets
  endpoint:
    path: /datasets
    method: GET
    data_selector: results
    params: {}
- name: dataset_items
  endpoint:
    path: /datasets/{DATASET_ID}/items
    method: GET
    data_selector: items
    params: {}
- name: key-value stores
  endpoint:
    path: /v2/key-value-stores
    method: GET
    data_selector: key-value stores
    params: {}
- name: get store
  endpoint:
    path: /v2/key-value-stores/{STORE_ID}
    method: GET
    data_selector: store details
    params: {}
- name: get record
  endpoint:
    path: /v2/key-value-stores/{STORE_ID}/records/{KEY_ID}
    method: GET
    data_selector: record
    params: {}
- name: store record
  endpoint:
    path: /v2/key-value-stores/{STORE_ID}/records/{KEY_ID}
    method: PUT
    data_selector: record
    params: {}
- name: delete record
  endpoint:
    path: /v2/key-value-stores/{STORE_ID}/records/{KEY_ID}
    method: DELETE
    data_selector: confirmation
    params: {}
- name: dataset
  endpoint:
    path: /api/v2/storage/dataset
    method: GET
    data_selector: records
- name: key_value_store
  endpoint:
    path: /api/v2/storage/key-value-stores
    method: GET
    data_selector: records
- name: request_queue
  endpoint:
    path: /api/v2/storage/request-queue
    method: GET
    data_selector: records
- name: request_queue
  endpoint:
    path: /v2/request-queues
    method: GET
    data_selector: requestQueues
- name: request_queues
  endpoint:
    path: /v2/request-queues
    method: GET
    data_selector: requestQueues
- name: request_queue_details
  endpoint:
    path: /v2/request-queues/{QUEUE_ID}
    method: GET
    data_selector: requestQueue
- name: add_request
  endpoint:
    path: /v2/request-queues/{QUEUE_ID}/requests
    method: POST
    data_selector: requestQueue
- name: get_request
  endpoint:
    path: /v2/request-queues/{QUEUE_ID}/requests/{REQUEST_ID}
    method: GET
    data_selector: request
- name: update_request
  endpoint:
    path: /v2/request-queues/{QUEUE_ID}/requests/{REQUEST_ID}
    method: PUT
    data_selector: request
- name: delete_request
  endpoint:
    path: /v2/request-queues/{QUEUE_ID}/requests/{REQUEST_ID}
    method: DELETE
    data_selector: request
- name: Actor
  endpoint:
    path: /platform/actors
    method: GET
    data_selector: permissions
    params: {}
- name: Actor task
  endpoint:
    path: /platform/actors/tasks
    method: GET
    data_selector: permissions
    params: {}
- name: Dataset
  endpoint:
    path: /platform/storage/dataset
    method: GET
    data_selector: permissions
    params: {}
- name: Key-value-store
  endpoint:
    path: /platform/storage/key-value-store
    method: GET
    data_selector: permissions
    params: {}
- name: Request queue
  endpoint:
    path: /platform/storage/request-queue
    method: GET
    data_selector: permissions
    params: {}
- name: Proxy
  endpoint:
    path: /platform/proxy
    method: GET
    data_selector: permissions
    params: {}
- name: User permissions
  endpoint:
    path: /platform/collaboration/user-permissions
    method: GET
    data_selector: permissions
    params: {}
- name: dataset
  endpoint:
    path: /datasets
    method: GET
    data_selector: datasets
    params: {}
- name: dataset_items
  endpoint:
    path: /v2/datasets/{datasetId}/items
    method: GET
    params:
      limit: 99
      offset: 0
      desc: true
- name: request_queues
  endpoint:
    path: /v2/request-queues
    method: GET
    params:
      limit: 1000
      offset: 0
      desc: true
      unnamed: true
- name: request_queue
  endpoint:
    path: /v2/request-queues/{queueId}
    method: GET
- name: request_queue_update
  endpoint:
    path: /v2/request-queues/{queueId}
    method: PUT
- name: request_queue_delete
  endpoint:
    path: /v2/request-queues/{queueId}
    method: DELETE
- name: request_queue_batch_add
  endpoint:
    path: /v2/request-queues/{queueId}/requests/batch
    method: POST
- name: request_queue_batch_delete
  endpoint:
    path: /v2/request-queues/{queueId}/requests/batch
    method: DELETE
- name: request_queue_unlock
  endpoint:
    path: /v2/request-queues/{queueId}/requests/unlock
    method: POST
- name: webhook
  endpoint:
    path: /v2/webhooks/{webhookId}
    method: GET
- name: webhook_dispatch
  endpoint:
    path: /v2/webhook-dispatches/{dispatchId}
    method: GET
- name: schedules
  endpoint:
    path: /v2/schedules
    method: GET
- name: unlockRequests
  endpoint:
    path: /v2/request-queues/{queueId}/requests/unlock
    method: POST
- name: listRequests
  endpoint:
    path: /v2/request-queues/{queueId}/requests
    method: GET
- name: addRequest
  endpoint:
    path: /v2/request-queues/{queueId}/requests
    method: POST
- name: getRequest
  endpoint:
    path: /v2/request-queues/{queueId}/requests/{requestId}
    method: GET
- name: updateRequest
  endpoint:
    path: /v2/request-queues/{queueId}/requests/{requestId}
    method: PUT
- name: deleteRequest
  endpoint:
    path: /v2/request-queues/{queueId}/requests/{requestId}
    method: DELETE
- name: getHead
  endpoint:
    path: /v2/request-queues/{queueId}/head
    method: GET
- name: request_queue_head
  endpoint:
    path: /v2/request-queues/{queueId}/head
    method: GET
    data_selector: data.items
    params:
      limit: 100
- name: request_queue_head_lock
  endpoint:
    path: /v2/request-queues/{queueId}/head/lock
    method: POST
    data_selector: data.items
    params:
      limit: 25
      lockSecs: 60
- name: webhooks_list
  endpoint:
    path: /v2/webhooks
    method: GET
    data_selector: data
    params:
      limit: 1000
- name: webhooks_create
  endpoint:
    path: /v2/webhooks
    method: POST
    data_selector: data
- name: Actor
  endpoint:
    path: /actors
    method: GET
    data_selector: data
    params: {}
- name: Run
  endpoint:
    path: /runs
    method: GET
    data_selector: data.items
- name: Task
  endpoint:
    path: /tasks
    method: GET
    data_selector: data.items
- name: schedule
  endpoint:
    path: /v2/schedules/{scheduleId}
    method: PUT
    data_selector: ScheduleResponse
    params:
      scheduleId: string
- name: schedule_log
  endpoint:
    path: /v2/schedules/{scheduleId}/log
    method: GET
    data_selector: GetScheduleLogResponse
    params:
      scheduleId: string
- name: store
  endpoint:
    path: /v2/store
    method: GET
    data_selector: GetListOfActorsInStoreResponse
    params: {}
- name: log
  endpoint:
    path: /v2/logs/{buildOrRunId}
    method: GET
    data_selector: string
    params:
      buildOrRunId: string
- name: user
  endpoint:
    path: /v2/users/{userId}
    method: GET
    data_selector: GetPublicUserDataResponse
    params:
      userId: string
- name: users_me
  endpoint:
    path: /v2/users/me
    method: GET
    data_selector: GetPrivateUserDataResponse
    params: {}
- name: users_me_usage_monthly
  endpoint:
    path: /v2/users/me/usage/monthly
    method: GET
    data_selector: GetMonthlyUsageResponse
    params:
      date: string
- name: users_me_limits
  endpoint:
    path: /v2/users/me/limits
    method: GET
    data_selector: GetLimitsResponse
    params: {}
- name: CreateRequestQueueResponse
  endpoint:
    path: /request-queues
    method: POST
    data_selector: data
- name: GetRequestQueueResponse
  endpoint:
    path: /request-queues/{id}
    method: GET
    data_selector: data
- name: UpdateRequestQueueRequest
  endpoint:
    path: /request-queues/{id}
    method: PUT
    data_selector: data
- name: ListRequestsResponse
  endpoint:
    path: /requests
    method: GET
    data_selector: data
- name: AddRequestResponse
  endpoint:
    path: /requests
    method: POST
    data_selector: data
- name: GetListOfKeyValueStoresResponse
  endpoint:
    path: /v2/key-value-stores
    method: GET
    data_selector: data.items
    params: {}
- name: ListOfKeysResponse
  endpoint:
    path: /v2/key-value-stores/{storeId}/keys
    method: GET
    data_selector: items
    params: {}
- name: GetListOfDatasetsResponse
  endpoint:
    path: /v2/datasets
    method: GET
    data_selector: data.items
    params: {}
- name: GetListOfRequestQueuesResponse
  endpoint:
    path: /v2/request-queues
    method: GET
    data_selector: data.items
    params: {}
- name: Actors
  endpoint:
    path: /v2/acts
    method: GET
    data_selector: actors
    params:
      my: '1'
      limit: '1000'
      offset: '0'
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: get_list_of_actors
  endpoint:
    path: /v2/acts
    method: GET
    data_selector: data.items
    params:
      sortBy: createdAt
      limit: 1000
      offset: 0
      desc: false
- name: create_actor
  endpoint:
    path: /v2/acts
    method: POST
    data_selector: data
    params: {}
- name: get_actor
  endpoint:
    path: /v2/acts/{actorId}
    method: GET
    data_selector: data
    params: {}
- name: update_actor
  endpoint:
    path: /v2/acts/{actorId}
    method: PUT
    data_selector: data
    params: {}
- name: actor
  endpoint:
    path: /v2/acts/{actorId}
    method: PUT
    data_selector: data
    params: {}
- name: actor_versions
  endpoint:
    path: /v2/acts/{actorId}/versions
    method: GET
    data_selector: data.items
    params: {}
- name: run_actor_sync
  endpoint:
    path: /v2/acts/{actorId}/run-sync-get-dataset-items
    method: POST
- name: run_actor_sync_without_input
  endpoint:
    path: /v2/acts/{actorId}/run-sync-get-dataset-items
    method: GET
- name: get_environment_variable
  endpoint:
    path: /v2/acts/{actorId}/envVars/{envVarName}
    method: GET
    data_selector: data
    params:
      actorId: janedoe~my-actor
      envVarName: MY_ENV_VAR
- name: update_environment_variable
  endpoint:
    path: /v2/acts/{actorId}/envVars/{envVarName}
    method: PUT
    data_selector: data
    params:
      actorId: janedoe~my-actor
      envVarName: MY_ENV_VAR
- name: delete_environment_variable
  endpoint:
    path: /v2/acts/{actorId}/envVars/{envVarName}
    method: DELETE
    data_selector: data
    params:
      actorId: janedoe~my-actor
      envVarName: MY_ENV_VAR
- name: get_webhooks
  endpoint:
    path: /v2/acts/{actorId}/webhooks
    method: GET
    data_selector: data
    params:
      actorId: janedoe~my-actor
- name: get_builds
  endpoint:
    path: /v2/acts/{actorId}/builds
    method: GET
    data_selector: data
    params:
      actorId: janedoe~my-actor
- name: runActorSynchronous
  endpoint:
    path: /v2/acts/{actorId}/runs
    method: GET
- name: resurrectRun
  endpoint:
    path: /v2/acts/{actorId}/runs/{runId}/resurrect
    method: POST
- name: get_build
  endpoint:
    path: /v2/acts/{actorId}/builds/{buildId}
    method: GET
    data_selector: data
    params:
      actorId: janedoe~my-actor
      buildId: soSkq9ekdmfOslopH
      waitForFinish: 60
- name: abort_build
  endpoint:
    path: /v2/acts/{actorId}/builds/{buildId}/abort
    method: POST
    data_selector: data
    params:
      actorId: janedoe~my-actor
      buildId: 3KH8gEpp4d8uQSe8T
- name: get_runs
  endpoint:
    path: /v2/acts/{actorId}/runs
    method: GET
    data_selector: data
    params:
      actorId: janedoe~my-actor
      offset: 10
      limit: 99
      desc: true
      status: SUCCEEDED
- name: run_actor
  endpoint:
    path: /v2/acts/{actorId}/runs
    method: POST
    data_selector: data
    params:
      actorId: janedoe~my-actor
      timeout: 60
      memory: 256
      maxItems: 1000
      maxTotalChargeUsd: 5
      build: 0.1.234
      waitForFinish: 60
      webhooks: dGhpcyBpcyBqdXN0IGV4YW1wbGUK...
- name: run_actor_sync
  endpoint:
    path: /v2/acts/{actorId}/run-sync
    method: POST
    data_selector: data
    params:
      actorId: janedoe~my-actor
- name: resurrect_run
  endpoint:
    path: /v2/acts/{actorId}/runs/resurrect
    method: POST
    data_selector: data
    params:
      actorId: string
      runId: string
      build: string
      timeout: number
      memory: number
- name: last_run
  endpoint:
    path: /v2/acts/{actorId}/runs/last
    method: GET
    data_selector: data
    params:
      actorId: string
      status: string
- name: get_run
  endpoint:
    path: /v2/acts/{actorId}/runs/{runId}
    method: GET
    data_selector: data
    params:
      actorId: string
      runId: string
      waitForFinish: number
- name: abort_run
  endpoint:
    path: /v2/acts/{actorId}/runs/{runId}/abort
    method: POST
    data_selector: data
    params:
      actorId: string
      runId: string
- name: actor_run_abort
  endpoint:
    path: /v2/acts/{actorId}/runs/{runId}/abort
    method: POST
    data_selector: data
    params: {}
- name: actor_run_metamorph
  endpoint:
    path: /v2/acts/{actorId}/runs/{runId}/metamorph
    method: POST
    data_selector: data
    params: {}
- name: actor_tasks
  endpoint:
    path: /v2/actor-tasks
    method: GET
    data_selector: data.items
    params:
      limit: 1000
      offset: 0
- name: runTask
  endpoint:
    path: /actor-tasks/runSyncGetDatasetItems
    method: POST
    data_selector: datasetItems
    params: {}
- name: actorTask
  endpoint:
    path: /v2/actor-tasks/{actorTaskId}
    method: PUT
    data_selector: data
    params: {}
- name: actorTask_input
  endpoint:
    path: /v2/actor-tasks/{actorTaskId}/input
    method: GET
    data_selector: data
    params: {}
- name: actorTask_webhooks
  endpoint:
    path: /v2/actor-tasks/{actorTaskId}/webhooks
    method: GET
    data_selector: data
    params:
      limit: 1000
      offset: 0
- name: actorTask_runs
  endpoint:
    path: /v2/actor-tasks/{actorTaskId}/runs
    method: GET
    data_selector: data
    params:
      limit: 1000
      offset: 0
- name: actorTask_runs_post
  endpoint:
    path: /v2/actor-tasks/{actorTaskId}/run-sync
    method: post
    data_selector: data
    params:
      timeout: 60
      memory: 256
      maxItems: 1000
      build: 0.1.234
      outputRecordKey: OUTPUT
- name: actorTask_runSync_get
  endpoint:
    path: /v2/actor-tasks/{actorTaskId}/run-sync-get-dataset-items
    method: get
    data_selector: data
- name: actor_runs
  endpoint:
    path: /v2/actor-runs
    method: GET
    params:
      offset: 0
      limit: 1000
      desc: 1
      status: SUCCEEDED
- name: actor_run
  endpoint:
    path: /v2/actor-runs/{runId}
    method: GET
    params:
      waitForFinish: 60
- name: run_task
  endpoint:
    path: /v2/actor-tasks/{actorTaskId}/runs
    method: POST
    data_selector: data
    params: {}
- name: get_last_run
  endpoint:
    path: /v2/actor-tasks/{actorTaskId}/runs/last
    method: GET
    data_selector: data
    params:
      status: SUCCEEDED
- name: user_runs_list
  endpoint:
    path: /v2/actor-runs
    method: GET
    data_selector: data
    params: {}
- name: resurrect_run
  endpoint:
    path: /v2/actor-runs/{runId}/resurrect
    method: POST
    data_selector: data
    params: {}
- name: charge_run
  endpoint:
    path: /v2/actor-runs/{runId}/charge
    method: POST
    data_selector: data
    params: {}
- name: get_user_builds
  endpoint:
    path: /v2/actor-builds
    method: GET
    data_selector: data
    params: {}
- name: get_build
  endpoint:
    path: /v2/actor-builds/{buildId}
    method: GET
    data_selector: data
    params: {}
- name: abort_run
  endpoint:
    path: /v2/actor-runs/{runId}/abort
    method: POST
    data_selector: data
    params:
      runId: string
      gracefully: boolean
- name: metamorph_run
  endpoint:
    path: /v2/actor-runs/{runId}/metamorph
    method: POST
    data_selector: data
    params:
      runId: string
      targetActorId: string
      build: string
- name: reboot_run
  endpoint:
    path: /v2/actor-runs/{runId}/reboot
    method: POST
    data_selector: data
    params:
      runId: string
- name: resurrect_run
  endpoint:
    path: /v2/actor-runs/{runId}/resurrect
    method: POST
    data_selector: data
    params:
      runId: string
- name: datasets
  endpoint:
    path: /v2/datasets
    method: GET
    data_selector: data.items
    params:
      limit: 1000
      offset: 0
- name: dataset
  endpoint:
    path: /v2/datasets/{datasetId}
    method: GET
    data_selector: data
- name: dataset_items
  endpoint:
    path: /v2/datasets/{datasetId}/items
    method: GET
    params:
      offset: 0
      limit: 99
      desc: true
- name: request_queues
  endpoint:
    path: /v2/request-queues
    method: GET
    params:
      offset: 10
      limit: 99
      desc: true
      unnamed: true
- name: listKeyValueStores
  endpoint:
    path: /v2/key-value-stores
    method: GET
    data_selector: data
    params:
      offset: 0
      limit: 1000
- name: createKeyValueStore
  endpoint:
    path: /v2/key-value-stores
    method: POST
    data_selector: data
    params:
      name: eshop-values
- name: getKeyValueStore
  endpoint:
    path: /v2/key-value-stores/{storeId}
    method: GET
    data_selector: data
    params: {}
- name: updateKeyValueStore
  endpoint:
    path: /v2/key-value-stores/{storeId}
    method: PUT
    data_selector: data
    params: {}
- name: deleteKeyValueStore
  endpoint:
    path: /v2/key-value-stores/{storeId}
    method: DELETE
    data_selector: data
    params: {}
- name: listKeys
  endpoint:
    path: /v2/key-value-stores/{storeId}/keys
    method: GET
    data_selector: data
    params:
      limit: 1000
- name: getRecord
  endpoint:
    path: /v2/key-value-stores/{storeId}/records/{recordKey}
    method: GET
    data_selector: data
    params: {}
- name: storeRecord
  endpoint:
    path: /v2/key-value-stores/{storeId}/records/{recordKey}
    method: PUT
    data_selector: data
    params:
      Content-Encoding: gzip
- name: deleteRecord
  endpoint:
    path: /v2/key-value-stores/{storeId}/records/{recordKey}
    method: DELETE
    data_selector: data
    params: {}
- name: request_queue
  endpoint:
    path: /v2/request-queues/{queueId}
    method: GET
    data_selector: data
    params: {}
- name: request_queue_create
  endpoint:
    path: /v2/request-queues
    method: POST
    data_selector: data
    params: {}
- name: request_queue_update
  endpoint:
    path: /v2/request-queues/{queueId}
    method: PUT
    data_selector: data
    params: {}
- name: request_queue_delete
  endpoint:
    path: /v2/request-queues/{queueId}
    method: DELETE
    data_selector: data
    params: {}
- name: webhook
  endpoint:
    path: /v2/webhooks/{webhookId}
    method: GET
    data_selector: application/json
- name: webhook_dispatch
  endpoint:
    path: /v2/webhook-dispatches
    method: GET
    data_selector: application/json
- name: schedule
  endpoint:
    path: /v2/schedules
    method: GET
    data_selector: application/json
- name: requestQueueHead
  endpoint:
    path: /v2/request-queues/{queueId}/head
    method: GET
    data_selector: data.items
    params:
      limit: '100'
- name: webhooks
  endpoint:
    path: /v2/webhooks
    method: GET
    data_selector: data
    params:
      limit: '1000'
- name: GetVersionListResponse
  endpoint:
    path: /acts/<username>~<actor>/versions
    method: GET
    data_selector: data.items
    params: {}
- name: GetEnvVarListResponse
  endpoint:
    path: /acts/<username>~<actor>/env-vars
    method: GET
    data_selector: data.items
    params: {}
- name: GetListOfWebhooksResponse
  endpoint:
    path: /acts/<username>~<actor>/webhooks
    method: GET
    data_selector: data.items
    params: {}
- name: schedule_log
  endpoint:
    path: /v2/schedules/{scheduleId}/log
    method: GET
- name: store
  endpoint:
    path: /v2/store
    method: GET
- name: log
  endpoint:
    path: /v2/logs/{buildOrRunId}
    method: GET
- name: user
  endpoint:
    path: /v2/users/{userId}
    method: GET
- name: user_me
  endpoint:
    path: /v2/users/me
    method: GET
- name: user_usage_monthly
  endpoint:
    path: /v2/users/me/usage/monthly
    method: GET
- name: user_limits
  endpoint:
    path: /v2/users/me/limits
    method: GET
- name: unlockRequests
  endpoint:
    path: /v2/request-queues/{queueId}/requests/unlock
    method: POST
    data_selector: data
    params:
      queueId: WkzbQMuFYuamGv3YF
      clientKey: client-abc
- name: listRequests
  endpoint:
    path: /v2/request-queues/{queueId}/requests
    method: GET
    data_selector: data.items
    params:
      queueId: WkzbQMuFYuamGv3YF
      clientKey: client-abc
      exclusiveStartId: Ihnsp8YrvJ8102Kj
      limit: 100
- name: addRequest
  endpoint:
    path: /v2/request-queues/{queueId}/requests
    method: POST
    data_selector: data
    params:
      queueId: WkzbQMuFYuamGv3YF
      clientKey: client-abc
      forefront: 'false'
- name: getRequest
  endpoint:
    path: /v2/request-queues/{queueId}/requests/{requestId}
    method: GET
    data_selector: data
    params:
      queueId: WkzbQMuFYuamGv3YF
      requestId: xpsmkDlspokDSmklS
- name: updateRequest
  endpoint:
    path: /v2/request-queues/{queueId}/requests/{requestId}
    method: PUT
    data_selector: data
    params:
      queueId: WkzbQMuFYuamGv3YF
      requestId: xpsmkDlspokDSmklS
      forefront: 'false'
      clientKey: client-abc
- name: deleteRequest
  endpoint:
    path: /v2/request-queues/{queueId}/requests/{requestId}
    method: DELETE
    data_selector: data
    params:
      queueId: WkzbQMuFYuamGv3YF
      requestId: xpsmkDlspokDSmklS
      clientKey: client-abc
- name: getHead
  endpoint:
    path: /v2/request-queues/{queueId}/head
    method: GET
    data_selector: data
    params:
      queueId: WkzbQMuFYuamGv3YF
- name: KeyValueStore
  endpoint:
    path: /key-value-store
    method: GET
    data_selector: records
- name: KeyValueStoreStats
  endpoint:
    path: /key-value-store/stats
    method: GET
    data_selector: records
- name: key_value_stores
  endpoint:
    path: /key-value-stores
    method: GET
    data_selector: items
- name: datasets
  endpoint:
    path: /datasets
    method: GET
    data_selector: items
- name: request_queues
  endpoint:
    path: /request-queues
    method: GET
    data_selector: items
- name: ScheduleResponse
  endpoint:
    path: /api/schedule
    method: POST
    data_selector: data
    params: {}
- name: GetScheduleLogResponse
  endpoint:
    path: /api/schedule/logs
    method: GET
    data_selector: data
    params: {}
- name: GetPublicUserDataResponse
  endpoint:
    path: /api/users/public
    method: GET
    data_selector: data
    params: {}
- name: GetPrivateUserDataResponse
  endpoint:
    path: /api/users/private
    method: GET
    data_selector: data
    params: {}
- name: GetLimitsResponse
  endpoint:
    path: /api/limits
    method: GET
    data_selector: data
    params: {}
- name: GetMonthlyUsageResponse
  endpoint:
    path: /api/usage/monthly
    method: GET
    data_selector: data
    params: {}
- name: Actors
  endpoint:
    path: /v2/acts
    method: GET
- name: Storage/Datasets
  endpoint:
    path: /v2/datasets
    method: GET
- name: Storage/Key-value stores
  endpoint:
    path: /v2/key-value-stores
    method: GET
- name: Storage/Request queues
  endpoint:
    path: /v2/request-queues
    method: GET
- name: Users
  endpoint:
    path: /v2/users
    method: GET
- name: Run Actor
  endpoint:
    path: /acts/[actor_id]/runs
    method: POST
    data_selector: data
- name: Get list of Actors
  endpoint:
    path: /actors
    method: GET
    data_selector: data
- name: list_of_actors
  endpoint:
    path: /v2/acts
    method: GET
    data_selector: data.items
    params:
      my: '1'
      limit: '1000'
      offset: '0'
      desc: 'false'
      sortBy: createdAt
- name: get_actor
  endpoint:
    path: /v2/acts/{actorId}
    method: GET
    data_selector: data
- name: build_default
  endpoint:
    path: /v2/acts/{actorId}/builds/default
    method: GET
- name: build
  endpoint:
    path: /v2/acts/{actorId}/builds/{buildId}
    method: GET
- name: abort_build
  endpoint:
    path: /v2/acts/{actorId}/builds/{buildId}/abort
    method: POST
- name: get_openapi_definition
  endpoint:
    path: /v2/acts/{actorId}/builds/{buildId}/openapi.json
    method: GET
- name: versions
  endpoint:
    path: /v2/acts/{actorId}/versions/{versionNumber}
    method: PUT
    params: {}
- name: environment_variables
  endpoint:
    path: /v2/acts/{actorId}/versions/{versionNumber}/env-vars
    method: GET
    params: {}
- name: webhooks
  endpoint:
    path: /v2/acts/{actorId}/webhooks
    method: GET
    params:
      limit: 1000
      offset: 0
- name: builds
  endpoint:
    path: /v2/acts/{actorId}/builds
    method: GET
    params:
      limit: 1000
      offset: 0
- name: update_actor
  endpoint:
    path: /v2/acts/{actorId}
    method: PUT
- name: delete_actor
  endpoint:
    path: /v2/acts/{actorId}
    method: DELETE
- name: get_actor_versions
  endpoint:
    path: /v2/acts/{actorId}/versions
    method: GET
- name: create_actor_version
  endpoint:
    path: /v2/acts/{actorId}/versions
    method: POST
- name: get_actor_version
  endpoint:
    path: /v2/acts/{actorId}/versions/{versionNumber}
    method: GET
- name: update_actor_version
  endpoint:
    path: /v2/acts/{actorId}/versions/{versionNumber}
    method: PUT
- name: actor_run
  endpoint:
    path: /v2/acts/{actorId}/runs
    method: GET
    params:
      incremental: startedAt
- name: run_actor
  endpoint:
    path: /v2/acts/{actorId}/run
    method: POST
    params: {}
- name: run_actor_sync
  endpoint:
    path: /v2/acts/{actorId}/run-sync
    method: POST
    params: {}
- name: run_actor_synchronously
  endpoint:
    path: /actors/{actorId}/runs
    method: GET
    data_selector: dataset.items
- name: run_actor_asynchronously
  endpoint:
    path: /actors/run
    method: POST
    data_selector: run
- name: resurrect_run
  endpoint:
    path: /v2/acts/{actorId}/runs/{runId}/resurrect
    method: POST
    params:
      actorId: janedoe~my-actor
      runId: 3KH8gEpp4d8uQSe8T
- name: last_run
  endpoint:
    path: /v2/acts/{actorId}/runs/last
    method: GET
    params:
      actorId: janedoe~my-actor
- name: get_run
  endpoint:
    path: /v2/acts/{actorId}/runs/{runId}
    method: GET
    params:
      actorId: janedoe~my-actor
      runId: 3KH8gEpp4d8uQSe8T
- name: actor_tasks
  endpoint:
    path: /v2/actor-tasks
    method: GET
    data_selector: data
- name: actor_task
  endpoint:
    path: /v2/actor-tasks/{actorTaskId}
    method: GET
    data_selector: data
- name: webhooks
  endpoint:
    path: /v2/actor-tasks/{actorTaskId}/webhooks
    method: GET
    data_selector: data.items
    params:
      limit: 1000
      desc: false
- name: task_runs
  endpoint:
    path: /v2/actor-tasks/{actorTaskId}/runs
    method: GET
    data_selector: data.items
    params:
      limit: 1000
      offset: 0
      desc: false
- name: run_task
  endpoint:
    path: /v2/actor-tasks/{actorTaskId}/runs
    method: POST
    data_selector: data
    params:
      timeout: 60
      memory: 256
      maxItems: 1000
      maxTotalChargeUsd: 5
      waitForFinish: 60
- name: run_task
  endpoint:
    path: /v2/actor-tasks/{actorTaskId}/run-sync
    method: post
    data_selector: data
    params:
      timeout: 60
      memory: 256
      maxItems: 1000
      build: 0.1.234
      outputRecordKey: OUTPUT
      webhooks: dGhpcyBpcyBqdXN0IGV4YW1wbGUK...
- name: run_task_sync_get_dataset_items
  endpoint:
    path: /v2/actor-tasks/{actorTaskId}/run-sync-get-dataset-items
    method: get
    data_selector: data
    params:
      timeout: 60
      memory: 256
      maxItems: 1000
- name: actor_tasks
  endpoint:
    path: /v2/actor-tasks
    method: GET
    data_selector: tasks
    params:
      offset: 0
      limit: 1000
- name: abort_run
  endpoint:
    path: /v2/acts/{actorId}/runs/{runId}/abort
    method: POST
    data_selector: data
    params: {}
- name: metamorph_run
  endpoint:
    path: /v2/acts/{actorId}/runs/{runId}/metamorph
    method: POST
    data_selector: data
    params:
      targetActorId: ''
      build: latest
- name: run task synchronously and get dataset items
  endpoint:
    path: /actor-tasks/run-task-synchronously-and-get-dataset-items
    method: POST
    params:
      timeout: 60
      memory: 256
      maxItems: 1000
      maxTotalChargeUsd: 5
      build: 0.1.234
      format: json
      clean: false
      offset: 0
      limit: 99
- name: abort_run
  endpoint:
    path: /v2/actor-runs/{runId}/abort
    method: POST
- name: metamorph_run
  endpoint:
    path: /v2/actor-runs/{runId}/metamorph
    method: POST
- name: reboot_run
  endpoint:
    path: /v2/actor-runs/{runId}/reboot
    method: POST
- name: resurrect_run
  endpoint:
    path: /v2/actor-runs/{runId}/resurrect
    method: POST
- name: actor_runs
  endpoint:
    path: /v2/actor-runs
    method: GET
    data_selector: data
    params:
      limit: 1000
- name: last_run
  endpoint:
    path: /v2/actor-tasks/{actorTaskId}/runs/last
    method: GET
    data_selector: data
    params: {}
- name: get_user_runs_list
  endpoint:
    path: /v2/actor-runs
    method: GET
    data_selector: data.items
    params: {}
- name: get_run
  endpoint:
    path: /v2/actor-runs/{runId}
    method: GET
    data_selector: data
    params: {}
- name: update_status_message
  endpoint:
    path: /v2/actor-runs/{runId}
    method: PUT
    data_selector: data
    params: {}
- name: delete_run
  endpoint:
    path: /v2/actor-runs/{runId}
    method: DELETE
    data_selector: data
    params: {}
- name: abort_run
  endpoint:
    path: /v2/actor-runs/{runId}/abort
    method: POST
    data_selector: data
    params: {}
- name: actor_runs_charge
  endpoint:
    path: /v2/actor-runs/{runId}/charge
    method: POST
    data_selector: data
    params: {}
- name: actor_builds
  endpoint:
    path: /v2/actor-builds
    method: GET
    data_selector: data
    params:
      limit: 1000
      offset: 0
- name: actor_build
  endpoint:
    path: /v2/actor-builds/{buildId}
    method: GET
    data_selector: data
    params: {}
- name: actor_build_log
  endpoint:
    path: /v2/actor-builds/{buildId}/log
    method: GET
    data_selector: data
    params: {}
- name: key_value_stores
  endpoint:
    path: /v2/key-value-stores
    method: GET
    data_selector: items
    params:
      limit: 1000
      offset: 0
- name: get_store
  endpoint:
    path: /v2/key-value-stores/{storeId}
    method: GET
    data_selector: data
- name: create_store
  endpoint:
    path: /v2/key-value-stores
    method: POST
    data_selector: data
- name: update_store
  endpoint:
    path: /v2/key-value-stores/{storeId}
    method: PUT
    data_selector: data
- name: delete_store
  endpoint:
    path: /v2/key-value-stores/{storeId}
    method: DELETE
- name: record_get
  endpoint:
    path: /key-value-stores/{storeId}/records/{recordKey}
    method: GET
    data_selector: foo
- name: record_put
  endpoint:
    path: /key-value-stores/{storeId}/records/{recordKey}
    method: PUT
    data_selector: example
- name: record_delete
  endpoint:
    path: /key-value-stores/{storeId}/records/{recordKey}
    method: DELETE
- name: datasets_get
  endpoint:
    path: /datasets
    method: GET
    data_selector: data.items
    params:
      limit: 1000
- name: datasets_post
  endpoint:
    path: /datasets
    method: POST
    data_selector: data
- name: get_dataset
  endpoint:
    path: /v2/datasets/{datasetId}
    method: GET
    data_selector: data
    params: {}
- name: update_dataset
  endpoint:
    path: /v2/datasets/{datasetId}
    method: PUT
    data_selector: data
    params: {}
- name: delete_dataset
  endpoint:
    path: /v2/datasets/{datasetId}
    method: DELETE
    data_selector: data
    params: {}
- name: get_items
  endpoint:
    path: /v2/datasets/{datasetId}/items
    method: GET
    data_selector: data
    params: {}
- name: datasets
  endpoint:
    path: /datasets
    method: GET
- name: request_queues
  endpoint:
    path: /request-queues
    method: GET
- name: unlockRequests
  endpoint:
    path: /v2/request-queues/{queueId}/unlock
    method: POST
- name: list_requests
  endpoint:
    path: /v2/request-queues/{queueId}/requests
    method: GET
- name: addRequest
  endpoint:
    path: /v2/request-queues/{queueId}/requests
    method: POST
- name: get
  endpoint:
    path: /v2/request-queues/{queueId}/requests/{requestId}
    method: GET
- name: update
  endpoint:
    path: /v2/request-queues/{queueId}/requests/{requestId}
    method: PUT
- name: delete
  endpoint:
    path: /v2/request-queues/{queueId}/requests/{requestId}
    method: DELETE
- name: create_request_queue
  endpoint:
    path: /request-queues
    method: POST
- name: get_request_queue
  endpoint:
    path: /request-queues/{queueId}
    method: GET
- name: update_request_queue
  endpoint:
    path: /request-queues/{queueId}
    method: PUT
- name: delete_request_queue
  endpoint:
    path: /request-queues/{queueId}
    method: DELETE
- name: batch_add_requests
  endpoint:
    path: /request-queues/{queueId}/requests/batch
    method: POST
- name: batch_delete_requests
  endpoint:
    path: /request-queues/{queueId}/requests/batch
    method: DELETE
- name: unlock_requests
  endpoint:
    path: /request-queues/{queueId}/requests/unlock
    method: POST
- name: request_queues
  endpoint:
    path: /v2/request-queues
    method: GET
    data_selector: data
    params: {}
- name: webhooks
  endpoint:
    path: /v2/webhooks
    method: GET
    data_selector: data
    params:
      limit: 1000
- name: get_public_user_data
  endpoint:
    path: /v2/users/{userId}
    method: GET
- name: get_private_user_data
  endpoint:
    path: /v2/users/me
    method: GET
- name: get_monthly_usage
  endpoint:
    path: /v2/users/me/usage/monthly
    method: GET
    params:
      date: YYYY-MM-DD
- name: get_limits
  endpoint:
    path: /v2/users/me/limits
    method: GET
- name: update_limits
  endpoint:
    path: /v2/users/me/limits
    method: PUT
- name: webhook
  endpoint:
    path: /v2/webhooks
    method: POST
    data_selector: application/json
    params: {}
- name: webhook_dispatch
  endpoint:
    path: /v2/webhook-dispatches
    method: GET
    data_selector: application/json
    params: {}
- name: schedules
  endpoint:
    path: /v2/schedules
    method: GET
    data_selector: application/json
    params: {}
- name: schedules
  endpoint:
    path: /v2/schedules
    method: GET
    data_selector: data
- name: actors
  endpoint:
    path: /v2/store
    method: GET
    data_selector: data.items
- name: logs
  endpoint:
    path: /v2/logs/{buildOrRunId}
    method: GET
    data_selector: data
- name: Webhook
  endpoint:
    path: /webhooks
    method: GET
    data_selector: records
- name: run_sync_get_dataset_items
  endpoint:
    path: /acts/<username>~<actor>/run-sync-get-dataset-items
    method: POST
- name: runs
  endpoint:
    path: /acts/<username>~<actor>/runs
    method: POST
- name: run_sync
  endpoint:
    path: /acts/<username>~<actor>/run-sync
    method: POST
- name: KeyValueStore
  endpoint:
    path: /key-value-stores
    method: GET
    data_selector: records
- name: KeyValueStoreStats
  endpoint:
    path: /key-value-stores/stats
    method: GET
    data_selector: records
- name: ChargeRunRequest
  endpoint:
    path: /charge-run-requests
    method: POST
    data_selector: records
- name: WebhookCreate
  endpoint:
    path: /webhook/create
    method: POST
    data_selector: data
    params: {}
- name: GetWebhookResponse
  endpoint:
    path: /webhook/get
    method: GET
    data_selector: data
    params: {}
- name: WebhookDispatchList
  endpoint:
    path: /webhook/dispatch/list
    method: GET
    data_selector: data
    params: {}
- name: ScheduleCreate
  endpoint:
    path: /schedule/create
    method: POST
    data_selector: data
    params: {}
- name: GetListOfSchedulesResponse
  endpoint:
    path: /schedules
    method: GET
    data_selector: data
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: ScheduleResponse
  endpoint:
    path: /api/schedule
    method: POST
    data_selector: data
    params: {}
- name: GetScheduleLogResponse
  endpoint:
    path: /api/schedule/log
    method: GET
    data_selector: data
    params: {}
- name: GetListOfKeyValueStoresResponse
  endpoint:
    path: /key-value-stores
    method: GET
    data_selector: data.items
    params: {}
- name: CreateKeyValueStoreResponse
  endpoint:
    path: /key-value-stores
    method: POST
    data_selector: data
    params: {}
- name: GetStoreResponse
  endpoint:
    path: /key-value-stores/{id}
    method: GET
    data_selector: data
    params: {}
- name: UpdateStoreResponse
  endpoint:
    path: /key-value-stores/{id}
    method: PUT
    data_selector: data
    params: {}
- name: ListOfKeysResponse
  endpoint:
    path: /key-value-stores/{id}/records
    method: GET
    data_selector: data.items
    params: {}
- name: GetRecordResponse
  endpoint:
    path: /key-value-stores/{id}/records/{key}
    method: GET
    data_selector: foo
    params: {}
- name: PutRecordRequest
  endpoint:
    path: /key-value-stores/{id}/records/{key}
    method: PUT
    data_selector: data
    params: {}
- name: GetPrivateUserDataResponse
  endpoint:
    path: /user/private
    method: GET
    data_selector: data
    params: {}
- name: GetMonthlyUsageResponse
  endpoint:
    path: /user/usage/monthly
    method: GET
    data_selector: data
    params: {}
- name: GetLimitsResponse
  endpoint:
    path: /user/limits
    method: GET
    data_selector: data
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: RAG Web Browser
  endpoint:
    path: /apify/rag-web-browser
    method: GET
- name: Google Places Crawler
  endpoint:
    path: /compass/crawler-google-places
    method: GET
- name: RAG Web Browser
  endpoint:
    path: /v2/actors/apify/rag-web-browser
    method: GET
- name: Google Places Crawler
  endpoint:
    path: /v2/actors/compass/crawler-google-places
    method: GET
- name: Apify Actors
  endpoint:
    path: /platform/actors
    method: GET
    data_selector: records
    params: {}
- name: CrewAI Documentation
  endpoint:
    path: /platform/integrations/crewai
    method: GET
    data_selector: records
    params: {}
- name: website_content_crawler
  endpoint:
    path: /apify/website-content-crawler
    method: POST
    data_selector: documents
    params:
      maxCrawlPages: 3
      startUrls:
      - url: https://haystack.deepset.ai/
- name: website_content_crawler
  endpoint:
    path: /api/v2/actor/apify/website-content-crawler
    method: POST
    data_selector: results
    params:
      maxCrawlPages: 10
      crawlerType: cheerio
- name: rag_web_browser
  endpoint:
    path: /api/v2/actor/apify/rag-web-browser
    method: POST
    data_selector: results
    params:
      maxResults: 3
- name: rag-web-browser
  endpoint:
    path: /apify/rag-web-browser
    method: GET
- name: free-tiktok-scraper
  endpoint:
    path: /clockworks/free-tiktok-scraper
    method: GET
- name: Apify Actor
  endpoint:
    path: /apify/website-content-crawler
    method: POST
    data_selector: documents
    params: {}
- name: Apify Dataset
  endpoint:
    path: /datasets/my_dataset_id
    method: GET
    data_selector: documents
    params: {}
- name: Run Actor
  endpoint:
    path: /integrations/lindy/run-actor
    method: POST
- name: mastra-client
  endpoint:
    path: /mastra-client
    method: GET
    data_selector: tools
- name: assistant
  endpoint:
    path: /beta/assistants
    method: POST
    data_selector: assistant
    params: {}
- name: thread
  endpoint:
    path: /beta/threads
    method: POST
    data_selector: thread
    params: {}
- name: message
  endpoint:
    path: /beta/threads/messages
    method: POST
    data_selector: message
    params: {}
- name: run
  endpoint:
    path: /beta/threads/runs
    method: POST
    data_selector: run
    params: {}
- name: pinecone_integration
  endpoint:
    path: /apify/pinecone-integration
    method: POST
- name: qdrant_integration
  endpoint:
    path: /apify/qdrant-integration
    method: POST
    data_selector: data
    params: {}
notes:
- 'Apify supports two main authentication methods for secure API access: OAuth 2.0
  and API token.'
- Uses OAuth2 with refresh token — requires setup of connected app in api
- Learn everything about web scraping and automation with our free courses that will
  turn you into an expert scraper developer.
- 'Use Authorization: Bearer <YOUR_API_TOKEN> for authentication.'
- Required for private Actors, tasks, or resources (e.g., builds of private Actors).
- Required when using named formats for IDs (e.g., username~store-name for stores
  or username~queue-name for queues).
- Optional for public Actors or resources (e.g., builds of public Actors can be queried
  without a token).
- Requires an API key to access the data.
- Crawling functionality is available in Crawlee.
- Apify SDK v3 is designed specifically for building actors on the Apify platform.
- Open-source tools and libraries created and maintained by Apify experts to help
  you with web scraping, browser automation, and proxy management.
- Many APIs will require the session cookie, an API key, or some other special value
  to be included within the header of the request in order to receive any data back.
- Use high-quality proxies.
- Set real-user-like HTTP settings and browser fingerprints.
- Use a browser to pass bot capture challenges.
- Increase the number of request retries significantly to at least 10.
- Consider extracting data from private APIs or mobile app APIs.
- Try different browsers.
- Add human-like behavior.
- Agent memory capabilities are available.
- Ensure that OPENAI_API_KEY is set as a secret environment variable.
- Supports large-scale web scraping and automation.
- Integration with both Google and GitHub supported.
- Any program running in a Docker container can become an Apify Actor.
- Good email communication keeps users engaged and informed.
- Apify platform requires Docker image configuration for running Actors.
- Actors can be integrated with various automation platforms.
- Each Actor run is available at a unique URL (container URL)
- APIFY_CONTAINER_PORT is the default port where the server starts
- Actors are serverless cloud programs that can perform anything from a simple action,
  like filling out a web form, to a complex operation, like crawling an entire website
  or removing duplicates from a large dataset.
- Uses Google or GitHub for authentication
- CAPTCHA is used to prevent spam accounts
- An Actor's input and its content type can be passed as a payload of the POST request.
- Learn how to turn your arbitrary code into an Actor simply by adding an Actor definition
  directory.
- If your Actor allows for integration with external services, or performs some post-processing
  of datasets generated by other Actors, check out the section integration-ready Actors.
- Publishing your Actor on the Apify Store transforms your code, eliminating traditional
  SaaS development overhead.
- Public Actors demand a higher level of responsibility.
- Schedules allow timezone settings and support daylight saving time shifts (DST).
- Each schedule can be associated with a maximum of 10 Actors and 10 Actor tasks.
- Apify Proxy allows you to change your IP address when web scraping to reduce the
  chance of being blocked because of your geographical location.
- Apify Proxy monitors the health of your IP pool and intelligently rotates addresses
  to prevent IP address-based blocking.
- Apify's RESTful API allows you to interact with the platform programmatically.
- Monitoring allows you to track and observe how the software works.
- The monitoring system is free for all users.
- If needed, the limits shown below can be increased on paid accounts.
- Manage permissions for your private resources such as Actors, Actor runs, and storages.
- Some organizations might require two-factor authentication (2FA) to access their
  resources.
- Apify SDK v3 includes only the Apify platform specific functionality.
- To build crawlers on the Apify platform, you need to combine it with Crawlee.
- Apify SDK requires Node.js 16 or later.
- Integration Actors provide a way to connect your Actors with other Actors or tasks
  easily.
- New integrations can be created by the community itself.
- This endpoint does not require the authentication token.
- Required for private Actors, tasks, or resources.
- You must authenticate all API requests.
- API token can be found in the Apify Console under Settings > Integrations.
- For API endpoints that require the actorId parameter to identify an Actor, you can
  provide either the Actor ID or a tilde-separated combination of the Actor owner's
  username and the Actor name.
- Required for private Actors, tasks, or resources
- Optional for public Actors or resources.
- Required when using named formats for IDs (e.g., `username~store-name` for stores
  or `username~queue-name` for queues).
- Use your API token to authenticate requests.
- Do not share your API token (or account password) with untrusted parties.
- The request must specify versionNumber and sourceType parameters in the JSON payload.
- 'The request needs to specify the Content-Type: application/json HTTP header!'
- When providing your API authentication token, we recommend using the request's Authorization
  header, rather than the URL.
- This endpoint does not require an authentication token. Instead, calls are authenticated
  using the Actor's unique ID.
- Authentication is based on the build's unique ID. No authentication token is required.
- Executes an Actor, waits for its completion, and returns Actor's dataset items in
  response.
- Executes an Actor and returns information about the initiated run in response.
- Executes an Actor, waits for completion, and returns the OUTPUT from Key-value store
  in response.
- Records are sorted by the startedAt field in ascending order by default.
- The POST payload including its Content-Type header is passed as INPUT to the Actor
  (usually application/json).
- To fetch the Actor run results that are typically stored in the default dataset,
  you need to pass the ID received in the defaultDatasetId field.
- Use your API token to authenticate requests. This method is more secure than query
  parameters, as headers are not logged in browser history or server logs.
- Beware that it might be impossible to maintain an idle HTTP connection for a long
  period of time, due to client timeout or network conditions.
- The run must finish in 300 seconds otherwise the API endpoint returns a timeout
  error.
- This endpoint has been deprecated and may be replaced or removed in future versions
  of the API.
- Use your API token to authenticate requests. This method is more secure than query
  parameters.
- There is a limit on how many times you can metamorph a single run.
- Authorization is required for private Actors, tasks, or resources.
- Authentication required for private Actors, tasks, or resources.
- Only finished runs can be deleted.
- Only the person or organization that initiated the run can delete it.
- Bearer token provided in the `Authorization` header is recommended.
- Bearer token provided in the Authorization header is recommended.
- The event you are charging for must be one of the configured events in your Actor.
- Use the request's Authorization header for API authentication.
- Authorization header uses Bearer token.
- If the object in the POST payload does not define a particular input property, the
  Actor run uses the default value defined by the task.
- The run must finish in 300 seconds otherwise the HTTP request fails with a timeout
  error
- Beware that it might be impossible to maintain an idle HTTP connection for an extended
  period
- The run must finish in 300 seconds otherwise the HTTP request fails with a timeout
  error.
- Beware that it might be impossible to maintain an idle HTTP connection for an extended
  period, due to client timeout or network conditions.
- Beware that it might be impossible to maintain an idle HTTP connection for an extended
  period.
- Data stored under unnamed dataset follows data retention period
- Keep in mind that attributes itemCount and cleanItemCount are not propagated right
  away after data are pushed into a dataset.
- The response format depends on the format query parameter.
- Pagination is always performed with the granularity of a single item.
- The limit of request payload size for the dataset is 5 MB. If the array exceeds
  the size, you'll need to split it into a number of smaller arrays.
- Some of the endpoints do not require the authentication token, the calls are authenticated
  using a hard-to-guess ID of the key-value store.
- Bearer token provided in the 'Authorization' header is required for private Actors,
  tasks, or resources.
- 'Authorization: Bearer token provided in the Authorization header is recommended.'
- 'To save bandwidth, storage, and speed up your upload, send the request payload
  compressed with Gzip compression and add the Content-Encoding: gzip header.'
- Use your API token to authenticate requests. You can find it on the Integrations
  page in Apify Console.
- Some of the endpoints do not require the authentication token, the calls are authenticated
  using the hard-to-guess ID of the queue.
- Updates a request queue's name using a value specified by a JSON object passed in
  the PUT payload.
- 'Authorization: Bearer token provided in the Authorization header (e.g., Authorization:
  Bearer your_token—recommended).'
- Authentication is required for private Actors, tasks, or resources.
- To avoid duplicating a webhook, use the idempotencyKey parameter in the request
  body.
- 'Bearer token provided in the Authorization header (e.g., Authorization: Bearer
  your_token—recommended).'
- When providing your API authentication token, it is recommended to use the request's
  Authorization header.
- Gets the schedule log as a JSON array containing information about up to a 1000
  invocations of the schedule.
- Only the trailing 5M characters of the log are stored, the rest is discarded.
- No authentication token required for public user data.
- Returns a complete summary of your usage for the current usage cycle, an overall
  sum, as well as a daily breakdown of usage.
- Triggers when a selected Actor run is finished.
- Triggers when a selected Actor task run is finished.
- Make.com imposes a hard timeout for synchronous runs based on your plan.
- Retrieving data from Apify Actors is included in your Gumloop subscription.
- The Task Runner only displays tasks that have been saved in your Apify Console,
  not individual Actors.
- You can run the same Actor or task directly from Slack by typing `/apify call [Actor
  or task ID]` into the Slack message box.
- By default, the integration is triggered by successful runs only.
- Triggers when an Actor or task run finishes
- OAuth2 is cloud-only.
- API key works for both self-hosted and cloud instances.
- The rate limit for pushing data to a dataset through the API is capped at 200 requests
  per second for each dataset.
- For all other dataset API endpoints, the rate limit is 30 requests per second for
  each dataset.
- Dataset storage is append-only - data can only be added and cannot be modified or
  deleted once stored.
- Unnamed datasets expire after 7 days unless otherwise specified.
- The maximum length for key of key-value store is 63 characters.
- Operations such as update or delete require the authentication token.
- The maximum length for request queue name is 63 characters.
- CRUD operation requests are limited to 200 requests per second per request queue.
- All other request queue API endpoints are limited to 30 requests per second per
  request queue.
- Named request queues are retained indefinitely.
- Unnamed request queues expire after 7 days unless otherwise specified.
- Unnamed request queues expire after 7 days.
- You will need to provide your Apify API credentials.
- Credentials can be found on your Apify account page by navigating to Settings >
  Integrations.
- The integration is triggered by successful runs only.
- Uses OAuth 2.0 to connect your Airtable account to Apify
- Add the token to your request's Authorization header as Bearer <token>.
- Using your token in the request header is more secure than using it as a URL parameter.
- Supports pagination using limit and offset parameters
- Idempotency keys must be unique
- Some objects like Contact may return nulls in deeply nested fields
- Requires setup of OAuth2 for authentication.
- Runs an Actor task and synchronously returns its dataset items.
- If the connection breaks, you will not receive any information about the run and
  its status.
- CSV, XLSX and HTML tables are limited to 2000 columns and the column names cannot
  be longer than 200 characters.
- JSON, XML and RSS formats do not have such restrictions.
- The endpoint supports pagination using the limit and offset parameters and it will
  not return more than 1000 records.
- Some endpoints do not require the authentication token, the calls are authenticated
  using a hard-to-guess ID.
- Default sorting is by createdAt in ascending order.
- The endpoint supports pagination using the `limit` and `offset` parameters.
- API endpoints related to run of the Actor were moved under new namespace.
- Pagination supports a maximum of 1000 records.
- Deprecated features are not recommended for new integrations.
- By default, the records are sorted by the `createdAt` field in ascending order.
- It will not return more than 1000 records.
- The endpoint supports pagination using the limit and offset parameters.
- Only provided to clients with WRITE permission for the key-value store.
- Requires proper authentication setup to access user private data and usage limits.
- Obtain your API token from the Apify console
- Ensure Python is installed (version 3.8+ recommended)
- Uses Apify API token — requires setup in Apify console
- Interact with the MCP server over SSE
- Rate limit of 30 requests per second per user.
- Ensure you provided a correct Apify API token.
- Crawling may take some time
- To use Apify Actors in Langflow, you need an Apify API token.
- To work with agents in Langflow, you need an OpenAI API key.
- To use Apify Actors in LangGraph, you need an Apify API token.
- In order to work with agents in LangGraph, you need an OpenAI API key.
- A Lindy account with access to premium actions is required for certain integrations
  or higher usage limits.
- Provide your Apify API token, which you can find in your Apify account
- The agent's execution may take some time as it searches the web for the OpenAI TikTok
  profile and extracts data from it.
- Ensure that the Lambda function has enough memory and timeout to call the RAG Web
  Browser.
- AWS Bedrock enforces a 25KB limit on response bodies. Limit results and truncate
  text as needed to stay within this constraint.
- Uses API key for authentication
- The collection does not need to exist beforehand. It will be automatically created
  when data is uploaded to the database.
- Ensure that your embedding model in the Pinecone index configuration matches the
  Actor settings.
- Requires Qdrant URL and API token
- Uses OpenAI API key for computing text embeddings
errors:
- '400: invalid-request: POST data must be a JSON object'
- '400: invalid-value: Invalid value provided: Comments required'
- '400: invalid-record-key: Record key contains invalid character'
- '401: token-not-provided: Authentication token was not provided'
- '404: record-not-found: Store was not found'
- '429: rate-limit-exceeded: You have exceeded the rate limit of 30 requests per second'
- '405: method-not-allowed: This API endpoint can only be accessed using the following
  HTTP methods: OPTIONS, POST'
- '403 Forbidden: Check your API key permissions.'
- '404 Not Found: Ensure the endpoint is correct.'
- 'REQUEST_LIMIT_EXCEEDED: Throttle API calls or reduce frequency'
- 'IP rate-limiting: Prevent DDoS attacks, but may block scrapers.'
- 'Header checking: Based on specific header sets.'
- 'URL analysis: Compares data-rich page visits to other page visits.'
- '401 Unauthorized: Ensure API key is valid.'
- '404 Not Found: Check endpoint URL.'
- '500 Internal Server Error: Retry the request.'
- 'QUERY_TIMEOUT: Break down filters or add selectivity'
- '401 Unauthorized: Recheck OAuth scopes or token expiration'
- '401 Unauthorized: Recheck API token.'
- Unauthorized access to data
- Elevation of privileges
- Server-side vulnerabilities (e.g., SSRF, RCE)
- If you lose access to your authenticator app and do not have any recovery codes
  left, or you lost them as well, you will not be able to sign in to your account.
- '200: The request has succeeded.'
- '201: The request has been fulfilled and a new resource has been created.'
- '302: A redirection response indicating that the requested resource has been temporarily
  moved to a different URL.'
- '400: The server cannot process the request due to client error.'
- '408: The server timed out waiting for the request to complete.'
- 'Unauthorized: Ensure correct token is provided.'
- '401 Unauthorized: Use your API token to authenticate requests.'
- '204: No Content'
- '401 Unauthorized: Check your API token.'
- '404 Not Found: Ensure the actor ID is correct.'
- '408 Request Timeout: The Actor run exceeds 300 seconds.'
- 400 Bad Request
- 408 Request Timeout
- 'REQUEST_TIMEOUT: The run must finish in 300 seconds'
- '408 Request Timeout: If the Actor run exceeds 300 seconds.'
- 'run-failed: Actor run did not succeed (run ID: 55uatRrZib4xbZs, status: FAILED)'
- 'run-timeout-exceeded: Actor run exceeded timeout of 300 seconds for this API endpoint'
- run-failed
- 'Actor run did not succeed (run ID: 55uatRrZib4xbZs, status: FAILED)'
- Actor run exceeded timeout of 60 seconds for this API endpoint
- '204: No Content - Successful deletion'
- '401 Unauthorized: Use your API token for authentication.'
- '401 Unauthorized: Recheck API token or scopes'
- Error if the Actor is not set up as pay per event, or if the event is not configured.
- '201: The charge was successful.'
- '401 Unauthorized: Recheck your API token.'
- Timeout error if the run exceeds the specified time limit
- '400: Bad Request'
- 'REQUEST_TIMEOUT: the HTTP request exceeded the 300 second limit'
- 'TIMEOUT: The run must finish in 300 seconds.'
- 'CONNECTION_ERROR: If the connection breaks, you will not receive any information
  about the run and its status.'
- 'Timeout error: The run must finish in 300 seconds.'
- '204 No Content: Successful deletion'
- 'schema-validation-error: Schema validation failed'
- '400: If the data you attempt to store in the dataset is invalid, the whole request
  is discarded.'
- '204: Record deleted successfully'
- 'Invalid API token: Verify your token and try again.'
- '404 Not Found: Check if the queueId is correct.'
- '401 Unauthorized: Recheck token'
- '401 Unauthorized: Recheck API token validity.'
- '401 Unauthorized: Recheck API token'
- '429 Too Many Requests: You have exceeded the rate limit of ... requests per second'
- 'REQUEST_LIMIT_EXCEEDED: Throttle API calls or reduce frequency.'
- '401 Unauthorized: Check API token.'
- '404 Not Found: Ensure the queue ID is correct.'
- '401 Unauthorized: This means you need to add your secret API token to the request''s
  Authorization header or as a URL query parameter.'
- '400 Bad Request: Check request parameters'
- '401 Unauthorized: Check API key'
- '404 Not Found: Requested resource does not exist'
- '401 Unauthorized: Check authentication token.'
- '400 Bad Request: Check the request parameters.'
- '404 Not Found: Verify the actorId.'
- '401 Unauthorized: Recheck OAuth token.'
- '400: Actor run did not succeed (run ID: 55uatRrZib4xbZs, status: FAILED)'
- '408: Actor run exceeded timeout of 300 seconds for this API endpoint'
- '400: Actor run did not succeed'
- '408: Actor run exceeded timeout'
- '408: Request Timeout: the HTTP request exceeded the 300 second limit'
- '400 Bad Request: Check request parameters or payload.'
- '401 Unauthorized: Ensure valid API key.'
- '404 Not Found: Verify endpoint and resource identifiers.'
- '404 Not Found: Check if the actorId is correct.'
- '408: Actor run exceeded timeout of 60 seconds for this API endpoint'
- '408: Request Timeout'
- '404 Not Found: Check the actorTaskId or ensure the task exists.'
- '400: Bad Request - Check the request parameters.'
- '401: Unauthorized - Check your API token.'
- '404: Not Found - Check the endpoint and parameters.'
- '404: The record does not exist'
- '204: No content'
- '400: Invalid request parameters'
- '404: Resource not found'
- '400 Bad Request: Check the query parameters for correctness.'
- '404 Not Found: The requested resource does not exist.'
- '404 Not Found: Ensure the resource ID is correct.'
- '401 Unauthorized: Check your API key or token.'
- '404 Not Found: The resource you requested does not exist.'
- '429 Too Many Requests: Exceeding rate limit.'
auth_info:
  mentioned_objects:
  - OauthToken
  - API token
  - ApiKey
  - httpBearer
  - Bearer Token
  - Bearer token
  - Authorization
  - apiKey
  - AuthProvider
  - NamedCredential
  - clientKey
client:
  base_url: https://api.apify.com
  auth:
    type: oauth2
  headers:
    Accept: application/json
source_metadata: null
