resources:
- name: launch_settings
  endpoint:
    path: /app/getLaunchSettings
    method: GET
    data_selector: launchSettings
- name: set_launch_settings
  endpoint:
    path: /app/setLaunchSettings
    method: POST
    data_selector: response
- name: app
  endpoint:
    path: /API/client-core.app
    method: GET
- name: app.dock
  endpoint:
    path: /API/client-core.app.dock
    method: GET
- name: nativeWindow
  endpoint:
    path: /API/client-core.nativewindow
    method: GET
- name: browser_navigation
  endpoint:
    path: /docs/application/add-browser-controls-to-your-desktop-app
    method: GET
    data_selector: browser-navigation
- name: find_in_page
  endpoint:
    path: /docs/application/add-find-in-page-to-your-desktop-app
    method: GET
    data_selector: findInPage
    params: {}
- name: offline_support
  endpoint:
    path: /application/basic-offline-support
    method: GET
    data_selector: offline_screen
    params: {}
- name: file_system_plugin
  endpoint:
    path: /plugins/file-system
    method: GET
    data_selector: plugin_details
    params: {}
- name: file_exec_plugin
  endpoint:
    path: /plugins/file-exec
    method: GET
    data_selector: plugin_details
    params: {}
- name: nativeWindow
  endpoint:
    path: '@todesktop/client-core/nativeWindow'
    method: POST
    data_selector: windowRef
    params: {}
- name: webContents
  endpoint:
    path: '@todesktop/client-core/webContents'
    method: POST
    data_selector: loadURL
    params: {}
- name: BroadcastChannel
  endpoint:
    path: /docs/API/client-core.nativewindow
    method: GET
    data_selector: BroadcastChannel API
- name: IPC Plugin
  endpoint:
    path: /docs/plugins/ipc-communication
    method: GET
    data_selector: IPC Plugin
- name: window_visibility
  endpoint:
    path: /docs/windows/window-visibility-on-launch
    method: GET
    data_selector: settings
    params: {}
- name: remembering_window_state
  endpoint:
    path: /docs/windows/remembering-window-state
    method: GET
    data_selector: windowState
- name: nativeWindow
  endpoint:
    path: /API/client-core.nativewindow
    method: GET
    data_selector: records
- name: platform
  endpoint:
    path: /API/client-core.platform
    method: GET
    data_selector: records
- name: setWindowOpenRules
  endpoint:
    path: /docs/windows/setWindowOpenRules
    method: POST
    data_selector: rules
    params: {}
- name: nativeWindow
  endpoint:
    path: /nativeWindow
    method: GET
    data_selector: window_data
- name: object
  endpoint:
    path: /object
    method: GET
    data_selector: object_data
- name: nativeWindow
  endpoint:
    path: /API/client-core.nativewindow
    method: GET
    data_selector: records
- name: screen
  endpoint:
    path: /API/client-core.screen
    method: GET
    data_selector: records
- name: globalShortcut
  endpoint:
    path: /API/client-core.globalshortcut
    method: GET
    data_selector: records
- name: globalShortcut
  endpoint:
    path: /API/client-core.globalShortcut
    method: GET
- name: nativeWindow
  endpoint:
    path: /API/client-core.nativeWindow
    method: GET
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: tray
  endpoint:
    path: /trays
    method: GET
    data_selector: trays
    params: {}
- name: auto_updates
  endpoint:
    path: /api/auto-updates
    method: GET
    data_selector: settings
    params: {}
- name: Code Signing Certificates
  endpoint:
    path: /releases/code-signing-certificates
    method: GET
    data_selector: certificates
    params: {}
- name: active_window
  endpoint:
    path: /getActiveWin
    method: GET
    data_selector: metadata
    params: {}
- name: checkIfCommServerRunning
  endpoint:
    path: /checkIfCommServerRunning
    method: GET
    data_selector: isRunning
- name: broadcast
  endpoint:
    path: /broadcast
    method: POST
    data_selector: response
- name: handleBroadcast
  endpoint:
    path: /handleBroadcast
    method: POST
    data_selector: acknowledged
- name: execute
  endpoint:
    path: /execute
    method: POST
    data_selector: result
    params: {}
- name: subscribe
  endpoint:
    path: /subscribe
    method: GET
    data_selector: logs
    params: {}
- name: readFile
  endpoint:
    path: /api/readFile
    method: GET
    data_selector: fileContents
- name: writeFile
  endpoint:
    path: /api/writeFile
    method: POST
    data_selector: status
- name: appendFile
  endpoint:
    path: /api/appendFile
    method: POST
    data_selector: status
- name: copyFile
  endpoint:
    path: /api/copyFile
    method: POST
    data_selector: status
- name: readdir
  endpoint:
    path: /api/readdir
    method: GET
    data_selector: fileList
- name: mkdir
  endpoint:
    path: /api/mkdir
    method: POST
    data_selector: status
- name: rename
  endpoint:
    path: /api/rename
    method: POST
    data_selector: status
- name: rm
  endpoint:
    path: /api/rm
    method: DELETE
    data_selector: status
- name: stat
  endpoint:
    path: /api/stat
    method: GET
    data_selector: stats
- name: extractIcon
  endpoint:
    path: /extractIcon
    method: GET
    data_selector: icon
    params: {}
- name: getSelectedText
  endpoint:
    path: /getSelectedText
    method: GET
    data_selector: selectedText
- name: registerShortcut
  endpoint:
    path: /registerShortcut
    method: POST
    data_selector: registrationStatus
- name: unregisterShortcut
  endpoint:
    path: /unregisterShortcut
    method: POST
    data_selector: unregistrationStatus
- name: file_system
  endpoint:
    path: /plugins/file-system
    method: GET
    data_selector: plugin
    params: {}
- name: getCaptureSources
  endpoint:
    path: /getCaptureSources
    method: GET
    data_selector: DesktopCapturerSource
    params: {}
- name: getCaptureSources
  endpoint:
    path: /api/getCaptureSources
    method: GET
    data_selector: DesktopCapturerSource
    params: {}
- name: setDisplayMediaRequestHandler
  endpoint:
    path: /api/setDisplayMediaRequestHandler
    method: POST
    data_selector: request
    params: {}
- name: nativeWindow
  endpoint:
    path: /api/nativeWindow
    method: GET
    data_selector: records
- name: webContents
  endpoint:
    path: /api/webContents
    method: GET
    data_selector: records
- name: object
  endpoint:
    path: /api/object
    method: GET
    data_selector: records
- name: push_notifications
  endpoint:
    path: /api/push_notifications
    method: POST
    data_selector: response
    params: {}
- name: notifications
  endpoint:
    path: /notifications
    method: POST
    data_selector: notifications
    params: {}
- name: TodoMVC
  endpoint:
    path: /api/todomvc
    method: GET
    data_selector: records
- name: app
  endpoint:
    path: /docs/API/client-core.app
    method: GET
    data_selector: records
- name: appMenu
  endpoint:
    path: /docs/API/client-core.appmenu
    method: GET
    data_selector: records
- name: contextMenu
  endpoint:
    path: /docs/API/client-core.contextmenu
    method: GET
    data_selector: records
- name: globalShortcut
  endpoint:
    path: /docs/API/client-core.globalshortcut
    method: GET
    data_selector: records
- name: menuBar
  endpoint:
    path: /docs/API/client-core.menubar
    method: GET
    data_selector: records
- name: nativeWindow
  endpoint:
    path: /docs/API/client-core.nativewindow
    method: GET
    data_selector: records
- name: notification
  endpoint:
    path: /docs/API/client-core.notification
    method: GET
    data_selector: records
- name: performance
  endpoint:
    path: /docs/API/client-core.performance
    method: GET
    data_selector: records
- name: screen
  endpoint:
    path: /docs/API/client-core.screen
    method: GET
    data_selector: records
- name: tray
  endpoint:
    path: /docs/API/client-core.tray
    method: GET
    data_selector: records
- name: index
  endpoint:
    path: /index
    method: GET
- name: workspaces
  endpoint:
    path: /workspaces
    method: GET
    data_selector: workspaces
- name: todos
  endpoint:
    path: /todos
    method: GET
    data_selector: todos
- name: app
  endpoint:
    path: /docs/API/client-core.app
    method: GET
- name: appMenu
  endpoint:
    path: /docs/API/client-core.appmenu
    method: GET
- name: contextMenu
  endpoint:
    path: /docs/API/client-core.contextmenu
    method: GET
- name: nativeWindow
  endpoint:
    path: /docs/API/client-core.nativewindow
    method: GET
- name: notification
  endpoint:
    path: /docs/API/client-core.notification
    method: GET
- name: views
  endpoint:
    path: /docs/API/client-core.views
    method: GET
- name: comm_server
  endpoint:
    path: /comm-server
    method: GET
    data_selector: records
    params: {}
- name: isRegistered
  endpoint:
    path: /globalShortcut/isRegistered
    method: POST
    data_selector: result
- name: register
  endpoint:
    path: /globalShortcut/register
    method: POST
    data_selector: result
- name: unregister
  endpoint:
    path: /globalShortcut/unregister
    method: POST
    data_selector: result
- name: unregisterAll
  endpoint:
    path: /globalShortcut/unregisterAll
    method: POST
    data_selector: result
- name: enlarge
  endpoint:
    path: /enlarge
    method: POST
    data_selector: Promise<void>
    params: {}
- name: shrink
  endpoint:
    path: /shrink
    method: POST
    data_selector: Promise<void>
    params: {}
- name: browser_window
  endpoint:
    path: /nativeWindow
    method: POST
    data_selector: result
- name: notification
  endpoint:
    path: /client-core/notification
    method: POST
    data_selector: notification
- name: performance
  endpoint:
    path: /API/client-core.performance
    method: GET
    data_selector: ''
- name: pushNotifications
  endpoint:
    path: /API/pushNotifications
    method: POST
    data_selector: notifications
    params: {}
- name: screen
  endpoint:
    path: /API/screen
    method: GET
    data_selector: records
- name: askForMediaAccess
  endpoint:
    path: /askForMediaAccess
    method: POST
    data_selector: Promise<boolean>
- name: getMediaAccessStatus
  endpoint:
    path: /getMediaAccessStatus
    method: POST
    data_selector: Promise<AccessStatus>
- name: views
  endpoint:
    path: /API/views
    method: GET
    data_selector: results
- name: availablePrinters
  endpoint:
    path: /availablePrinters
    method: GET
    data_selector: Printer[]
- name: canGoBack
  endpoint:
    path: /canGoBack
    method: GET
    data_selector: boolean
- name: canGoForward
  endpoint:
    path: /canGoForward
    method: GET
    data_selector: boolean
- name: getZoomFactor
  endpoint:
    path: /getZoomFactor
    method: GET
    data_selector: number
- name: getZoomLevel
  endpoint:
    path: /getZoomLevel
    method: GET
    data_selector: number
- name: loadURL
  endpoint:
    path: /loadURL
    method: POST
    data_selector: void
- name: openUrlInApp
  endpoint:
    path: /openUrlInApp
    method: POST
    data_selector: void
- name: print
  endpoint:
    path: /print
    method: POST
    data_selector: PrintJob
- name: setZoomFactor
  endpoint:
    path: /setZoomFactor
    method: POST
    data_selector: void
- name: setZoomLevel
  endpoint:
    path: /setZoomLevel
    method: POST
    data_selector: void
- name: toggleDevTools
  endpoint:
    path: /toggleDevTools
    method: POST
    data_selector: void
notes:
- Uses OAuth2 with refresh token — requires setup of connected app in ToDesktop
- ToDesktop Builder supports all web apps.
- By default, launch at startup is disabled for Desktop apps and enabled for Menubar
  apps.
- By default, login provider URLs (also known as OAuth) and URLs on the same domain
  as your app are considered internal.
- Starting on January 4th 2021 Google began blocking Google account sign-ins from
  embedded browsers including Electron.
- Universal URL detects the operating system and delivers the correct installer.
- Always delivers the latest version of the desktop app.
- The offline screen will inform users that no connection was detected.
- Combining plugins offers more opportunities for improving offline support.
- ToDesktop will automatically insert the Toggle Developer Tools menu item into the
  View group if developer tools are enabled.
- You can completely disable developer tools functionality by toggling the Disable
  Dev Tools checkbox.
- If using the 'Show window' option, it's recommended that you choose a window background
  color that matches the color of your application.
- This functionality is only accessible for windows that are specified in the ToDesktop
  Builder interface. Windows that are created programmatically using `@todesktop/client-core`
  are ignored.
- By default, the native desktop window uses a white background color.
- To avoid the flashing effect, the background color needs to be set in the ToDesktop
  Builder UI.
- The `setWindowOpenRules` method takes an object with properties for window rules.
- Uses OAuth2 with refresh token — requires setup of connected app in api
- Some objects like Contact may return nulls in deeply nested fields
- This API is in beta and may change (or be completely removed) without warning.
- Each tray has a unique ID that needs to be matched in code.
- Works on macOS only. Will throw on Windows & Linux
- Auto-updates can be managed programmatically via the @todesktop/client-core API.
- Setting up an EV certificate is more expensive and involved, but will get you immediate
  reputation.
- Order code signing for HSM when purchasing a certificate.
- This feature is in beta and it's possible that we will change how this works in
  the future. We'll do our best to stay backwards compatible though.
- Authorize downloads directory access.
- Authorize readdir functionality.
- It's helpful to have access to the application logs when debugging a ToDesktop Builder
  application.
- 'By default, ToDesktop writes logs to the following locations: on Linux: ~/.config/[app
  name]/logs/main.log, on macOS: ~/Library/Logs/[app name]/main.log, on Windows: %USERPROFILE%\AppData\Roaming\[app
  name]\logs\main.log.'
- Capture Screen Contents with loopback audio requires ToDesktop Builder v0.22.3 or
  higher
- Important for managing the desktop app's memory footprint
- The `html.todesktop` class pre-selector will ensure that the css is only applied
  when running as a desktop app.
- This API requires `@todesktop/client-core@1.9.0` or later and ToDesktop Builder
  `v0.23.1` or later
- Notifications are only available in secure contexts (HTTPS).
- You do not have to request permission first with the Notification.requestPermission()
  method as you would in a web app.
- This approach will soon be deprecated. Use the API under the next section, *Subscribing
  to custom events*, with newer versions of ToDesktop Builder.
- Requires setup of connected app in ToDesktop
- Uses ToDesktop Builder for creating multi-window applications.
- Uses publish/subscribe pattern for workspace and todo events.
- We are using local development URL for the app.
- Requires setup of ToDesktop account for access.
- Uses a communication server for interaction between web and desktop apps
errors:
- 'REQUEST_LIMIT_EXCEEDED: Throttle API calls or reduce frequency'
- 'QUERY_TIMEOUT: Break down filters or add selectivity'
- '401 Unauthorized: Recheck OAuth scopes or token expiration'
auth_info:
  mentioned_objects:
  - OauthToken
  - AuthProvider
  - NamedCredential
client:
  base_url: https://app.todesktop.com
source_metadata: null
