resources:
- name: invoice_creation
  endpoint:
    path: /invoice_create.xml
    method: POST
    data_selector: invoice
    params: {}
- name: invoice
  endpoint:
    path: /invoices
    method: POST
    data_selector: invoice
    params: {}
- name: invoice_create
  endpoint:
    path: /gateway/invoice_create.xml
    method: POST
    data_selector: invoice
- name: accounts
  endpoint:
    path: /reference/account
    method: GET
    data_selector: accounts
- name: payouts
  endpoint:
    path: /reference/getpayoutsbyaccountidanddate
    method: GET
    data_selector: payouts
- name: transactions
  endpoint:
    path: /reference/gettransactionsbypayout
    method: GET
    data_selector: transactions
- name: pending_payouts
  endpoint:
    path: /reference/getpendingaccount
    method: GET
    data_selector: pending_payouts
- name: pending_transactions
  endpoint:
    path: /reference/getpendingtransactionbyaccount-1
    method: GET
    data_selector: pending_transactions
- name: transaction_management
  endpoint:
    path: /transactions
    method: POST
    data_selector: transaction
    params: {}
- name: payment_processing
  endpoint:
    path: /remote/payment
    method: POST
- name: transaction_management
  endpoint:
    path: /remote/transaction
    method: POST
- name: agreement_related_webhooks
  endpoint:
    path: /webhook/agreement
    method: POST
    data_selector: fields
    params: {}
- name: accounts
  endpoint:
    path: /reference/getaccounts
    method: GET
- name: payouts
  endpoint:
    path: /reference/getpayoutsbyaccountidanddate
    method: GET
- name: transaction_details
  endpoint:
    path: /reference/gettransactionsbypayout
    method: GET
- name: pending_payouts
  endpoint:
    path: /reference/getpendingaccount
    method: GET
- name: pending_transaction_details
  endpoint:
    path: /reference/getpendingtransactionbyaccount-1
    method: GET
- name: transaction_related_webhooks
  endpoint:
    path: /webhook/transaction
    method: POST
    data_selector: fields
- name: agreement_related_webhooks
  endpoint:
    path: /agreement/webhooks
    method: POST
    data_selector: fields
- name: supported_currencies
  endpoint:
    path: /reference/supported-currencies
    method: GET
    data_selector: currencies
    params: {}
- name: get_accounts_information
  endpoint:
    path: /reference/getaccounts
    method: GET
- name: get_account_payouts
  endpoint:
    path: /reference/getpayoutsbyaccountidanddate
    method: GET
- name: get_payout_transaction_details
  endpoint:
    path: /reference/gettransactionsbypayout
    method: GET
- name: get_pending_payouts
  endpoint:
    path: /reference/getpendingaccount
    method: GET
- name: get_pending_transaction_details
  endpoint:
    path: /reference/getpendingtransactionbyaccount-1
    method: GET
- name: Apple Pay
  endpoint:
    path: /reference/payment-page
    method: POST
    data_selector: paymentOptions
- name: ApplePayTransaction
  endpoint:
    path: /reference/post_remote_applepay
    method: POST
    data_selector: payment_data
    params: {}
- name: Make an ApplePay transaction
  endpoint:
    path: /gateway/remote.json
    method: POST
- name: Apple Pay
  endpoint:
    path: /payment-page
    method: POST
- name: Create session
  endpoint:
    path: /payment-page
    method: POST
    data_selector: ''
    params: {}
- name: Check status
  endpoint:
    path: /check-status-1
    method: POST
    data_selector: ''
    params: {}
- name: Make a Samsung Pay transaction
  endpoint:
    path: /reference/post_samsungpay
    method: POST
- name: payment_request
  endpoint:
    path: /reference/post_remote_applepay
    method: POST
    data_selector: payment_data
    params:
      currency_code: currency code
      country_code: country code
      amount: amount
      supported_networks: supported networks
      merchant_capabilities: merchant capabilities
- name: samsung_pay_transaction
  endpoint:
    path: /gateway/remote.json
    method: POST
    data_selector: SuccessResponse
    params: {}
- name: applepay_transaction
  endpoint:
    path: /remote.json
    method: POST
    data_selector: SuccessResponse
    params: {}
- name: create_session
  endpoint:
    path: /gateway/process.html
    method: POST
- name: check_status
  endpoint:
    path: /check-status
    method: POST
- name: Create session
  endpoint:
    path: /payment-page
    method: POST
- name: Check status
  endpoint:
    path: /check-status-1
    method: POST
- name: Make a Samsung Pay transaction
  endpoint:
    path: /reference/post_samsungpay
    method: POST
- name: create_session
  endpoint:
    path: /gateway/order.json
    method: POST
    data_selector: object
    params: {}
- name: samsung_pay_transaction
  endpoint:
    path: /gateway/remote.json
    method: POST
    data_selector: SuccessResponse
- name: check_status
  endpoint:
    path: /gateway/order.json
    method: POST
- name: create_session
  endpoint:
    path: /payment-page
    method: POST
- name: check_status
  endpoint:
    path: /check-status-1
    method: POST
- name: order_creation
  endpoint:
    path: /gateway/process.html
    method: POST
    data_selector: order
    params: {}
- name: ga
  endpoint:
    path: /google-analytics
    method: POST
    data_selector: ga
    params: {}
- name: create_session
  endpoint:
    path: /gateway/order.json
    method: POST
    data_selector: null
    params: {}
- name: stored_cards
  endpoint:
    path: /stored/cards
    method: POST
    data_selector: response
    params:
      bill_custref: ref
- name: payment_page_customisation
  endpoint:
    path: /reference/payment-page-customisation
    method: GET
    data_selector: content
- name: Payment Agreement
  endpoint:
    path: /repeat-billing/manage-agreement
    method: POST
    data_selector: transaction
    params: {}
- name: stored_cards
  endpoint:
    path: /stored-cards
    method: POST
    data_selector: transaction
    params:
      bill_custref: ref
- name: change_due_date
  endpoint:
    path: /gateway/ManageAgreement.json
    method: POST
- name: Manage Agreement
  endpoint:
    path: /gateway/ManageAgreement.json
    method: POST
- name: payment_agreement
  endpoint:
    path: /repeat-billing
    method: POST
    data_selector: repeat
    params: {}
- name: Manage Agreement
  endpoint:
    path: /gateway/ManageAgreement.json
    method: POST
- name: ManageAgreement
  endpoint:
    path: /gateway/ManageAgreement.json
    method: POST
- name: cancelled_agreements
  endpoint:
    path: /gateway/cancelledAgreement.json
    method: POST
    data_selector: Cancelled Agreement Response
- name: forecast_agreement
  endpoint:
    path: /gateway/forecastagreement.json
    method: POST
- name: update_agreement_details
  endpoint:
    path: /gateway/ManageAgreement.json
    method: POST
- name: Manage Agreement
  endpoint:
    path: /gateway/ManageAgreement.json
    method: POST
- name: failed_agreements
  endpoint:
    path: /gateway/failedAgreement.json
    method: POST
    data_selector: Failed Agreement Response
- name: Change Card in Repeat Billing Agreement
  endpoint:
    path: /reference/card-change-in-repeat-billing-agreement
    method: POST
    data_selector: details
- name: cancelled_agreements
  endpoint:
    path: /gateway/cancelledAgreement.json
    method: POST
    data_selector: Cancelled Agreement Response
- name: card_change
  endpoint:
    path: /api_quicklink.json
    method: POST
    data_selector: QuickLinkRequest
    params: {}
- name: forecast_agreement
  endpoint:
    path: /gateway/forecastagreement.json
    method: POST
- name: Repeat Billing Agreement
  endpoint:
    path: /repeat-billing
    method: POST
    data_selector: agreement
    params: {}
- name: failed_agreements
  endpoint:
    path: /gateway/failedAgreement.json
    method: POST
    data_selector: Failed Agreement Response
- name: Card Change in Repeat Billing Agreement
  endpoint:
    path: /reference/card-change-in-repeat-billing-agreement
    method: POST
    data_selector: transaction_details
    params: {}
- name: Repeat Billing Agreement
  endpoint:
    path: /post_gateway-manageagreement-json
    method: POST
    data_selector: records
    params:
      repeat_period: T
- name: card_change
  endpoint:
    path: /gateway/api_quicklink.json
    method: POST
    data_selector: QuickLinkRequest
    params: {}
- name: set_future_cancel_date
  endpoint:
    path: /set-future-cancel-date-in-repeat-billing
    method: POST
    data_selector: agreement
    params: {}
- name: tokens
  endpoint:
    path: /guides/lang_en.txt
    method: GET
    data_selector: tokens
    params: {}
- name: iso_language_codes
  endpoint:
    path: /guides/iso_language_codes
    method: GET
    data_selector: language_codes
    params: {}
- name: repeat_billing_agreement
  endpoint:
    path: /post_gateway-manageagreement-json
    method: POST
    data_selector: agreement
    params:
      repeat_period: T
- name: create_order
  endpoint:
    path: /order.json
    method: POST
    data_selector: order
    params: {}
- name: check_order
  endpoint:
    path: /checkorder
    method: POST
    data_selector: order
    params: {}
- name: set_future_cancel_date
  endpoint:
    path: /reference/set-future-cancel-date-in-repeat-billing
    method: POST
- name: change_due_date
  endpoint:
    path: /reference/change-the-due-date-of-an-existing-agreement
    method: POST
- name: transaction_detail
  endpoint:
    path: /transaction/detail/on/return/url
    method: GET
    data_selector: transactionDetails
    params: {}
- name: create_order
  endpoint:
    path: /create_order
    method: POST
    data_selector: filter_entries
- name: create_order
  endpoint:
    path: /order.json
    method: POST
    data_selector: order
    params: {}
- name: check_order
  endpoint:
    path: /checkorder.json
    method: POST
    data_selector: order
    params: {}
- name: transaction
  endpoint:
    path: /process.php
    method: POST
    data_selector: transaction_data
- name: transaction_detail
  endpoint:
    path: /transaction/detail
    method: GET
    data_selector: transaction
    params: {}
- name: create_order
  endpoint:
    path: /create/order
    method: POST
    data_selector: response
    params: {}
- name: filter_cards
  endpoint:
    path: /reference/card-filter
    method: GET
    data_selector: records
- name: quick_link
  endpoint:
    path: /api_quicklink.json
    method: POST
- name: transaction
  endpoint:
    path: /process
    method: POST
    data_selector: transaction_data
- name: quicklinkrequest
  endpoint:
    path: /create/quicklink
    method: POST
    data_selector: quicklinkrequest
    params: {}
- name: create_invoice
  endpoint:
    path: /generate-invoice
    method: POST
    data_selector: invoice_data
- name: Create QuickLink
  endpoint:
    path: /api_quicklink.json
    method: POST
- name: create_subscription
  endpoint:
    path: /path/to/create_subscription
    method: POST
    data_selector: subscription_details
- name: existing_subscriptions
  endpoint:
    path: /path/to/existing_subscriptions
    method: GET
    data_selector: subscriptions
- name: get_accounts_information
  endpoint:
    path: /getaccounts
    method: GET
- name: get_account_payouts
  endpoint:
    path: /getpayoutsbyaccountidanddate
    method: GET
- name: get_payout_transaction_details
  endpoint:
    path: /gettransactionsbypayout
    method: GET
- name: get_pending_payouts
  endpoint:
    path: /getpendingaccount
    method: GET
- name: get_pending_transaction_details
  endpoint:
    path: /getpendingtransactionbyaccount-1
    method: GET
- name: create_invoice
  endpoint:
    path: /reference/generating-an-invoice
    method: POST
- name: accounts
  endpoint:
    path: /accounts
    method: GET
- name: create_subscription
  endpoint:
    path: /subscriptions/create
    method: POST
    data_selector: subscription
    params: {}
- name: existing_subscriptions
  endpoint:
    path: /subscriptions/existing
    method: GET
    data_selector: subscriptions
    params: {}
- name: account_payouts
  endpoint:
    path: /accounts/{accountId}/payouts
    method: GET
- name: payout_transactions
  endpoint:
    path: /accounts/{accountId}/payouts/{payoutId}/transactions
    method: GET
- name: pending_payouts
  endpoint:
    path: /accounts/{accountId}/pendings
    method: GET
- name: accounts
  endpoint:
    path: /getaccounts
    method: GET
- name: payouts
  endpoint:
    path: /getpayoutsbyaccountidanddate
    method: GET
- name: payout_transaction_details
  endpoint:
    path: /gettransactionsbypayout
    method: GET
- name: pending_payouts
  endpoint:
    path: /getpendingaccount
    method: GET
- name: pending_transaction_details
  endpoint:
    path: /getpendingtransactionbyaccount-1
    method: GET
- name: pending_transaction
  endpoint:
    path: /accounts/{accountId}/pendings/transactions
    method: GET
    data_selector: array of objects
    params:
      offset: integer
      limit: integer
- name: accounts
  endpoint:
    path: /accounts
    method: GET
- name: account_payouts
  endpoint:
    path: /accounts/{accountId}/payouts
    method: GET
- name: payout_transactions
  endpoint:
    path: /accounts/{accountId}/payouts/{payoutId}/transactions
    method: GET
- name: transaction_types
  endpoint:
    path: /reference/transaction-types
    method: GET
- name: pending_payouts
  endpoint:
    path: /accounts/{accountId}/pendings
    method: GET
- name: pending_transaction
  endpoint:
    path: /accounts/{accountId}/pendings/transactions
    method: GET
    data_selector: array of objects
    params: {}
- name: webview_start
  endpoint:
    path: /gateway/mobile_complete.xml
    method: POST
    data_selector: mobile
- name: webview_abort
  endpoint:
    path: /gateway/mobile_abort.xml
    method: POST
    data_selector: mobile
- name: location
  endpoint:
    path: /device/location
    method: POST
    data_selector: location
    params: {}
- name: mobile
  endpoint:
    path: /mobile
    method: POST
    data_selector: mobile
    params: {}
- name: transaction_types
  endpoint:
    path: /transaction/types
    method: GET
    data_selector: transactions
    params: {}
- name: accounts_api
  endpoint:
    path: /accounts
    method: GET
    data_selector: accounts
    params: {}
- name: Hosted Payment Page
  endpoint:
    path: /payment-page
    method: POST
- name: Check Status
  endpoint:
    path: /check-status-1
    method: POST
- name: transaction_complete
  endpoint:
    path: /gateway/mobile_complete.xml
    method: POST
    data_selector: mobile
- name: transaction_abort
  endpoint:
    path: /gateway/mobile_abort.xml
    method: POST
    data_selector: mobile
- name: transaction
  endpoint:
    path: /transaction
    method: GET
- name: report
  endpoint:
    path: /report
    method: GET
- name: agreement
  endpoint:
    path: /agreement
    method: GET
- name: accounts
  endpoint:
    path: /accounts
    method: GET
- name: device_information
  endpoint:
    path: /device/identification
    method: POST
    data_selector: transaction_request
    params: {}
- name: stored_cards
  endpoint:
    path: /stored-cards
    method: POST
    data_selector: mobile
    params: {}
- name: recent_transaction_list
  endpoint:
    path: /transaction
    method: GET
    data_selector: transactions
    params: {}
- name: transaction_details
  endpoint:
    path: /transaction/{tranref}
    method: GET
    data_selector: transaction
    params: {}
- name: linked_transactions
  endpoint:
    path: /transaction/{tranref}/linked
    method: GET
    data_selector: transactions
    params: {}
- name: transactions_search_cart_id
  endpoint:
    path: /transaction/{ref}/cart
    method: GET
    data_selector: transactions
    params: {}
- name: transactions_search_cart_id_special_chars
  endpoint:
    path: /transaction?cart_id=
    method: GET
    data_selector: transactions
    params: {}
- name: transactions_search_email
  endpoint:
    path: /transaction/{addr}/email
    method: GET
    data_selector: transactions
    params: {}
- name: transactions_search_card_number
  endpoint:
    path: /transaction/{num}/card
    method: GET
    data_selector: transactions
    params: {}
- name: report_list
  endpoint:
    path: /report
    method: GET
    data_selector: reports
- name: report_download
  endpoint:
    path: /report/{report_id}
    method: GET
    data_selector: null
- name: repeat_billing_agreements_list
  endpoint:
    path: /agreement
    method: GET
    data_selector: agreements
- name: repeat_billing_agreement_details
  endpoint:
    path: /agreement/{agreement_id}
    method: GET
    data_selector: agreement
- name: repeat_billing_agreement_history
  endpoint:
    path: /agreement/{agreement_id}/history
    method: GET
    data_selector: agreement
- name: cancel_repeat_billing_agreement
  endpoint:
    path: /agreement/{agreement_id}
    method: DELETE
    data_selector: agreement
- name: Transaction
  endpoint:
    path: /transaction
    method: GET
    data_selector: transaction
    params: {}
- name: transaction
  endpoint:
    path: /transaction
    method: GET
- name: report
  endpoint:
    path: /report
    method: GET
- name: agreement
  endpoint:
    path: /agreement
    method: GET
- name: accounts
  endpoint:
    path: /accounts
    method: GET
- name: agreement
  endpoint:
    path: /agreement
    method: GET
    data_selector: agreement
    params: {}
- name: transaction_types
  endpoint:
    path: /reference/transaction-types
    method: GET
- name: recent_transactions
  endpoint:
    path: /xml/transaction
    method: GET
    data_selector: transactions
- name: transaction_details
  endpoint:
    path: /xml/transaction/{tranref}
    method: GET
    data_selector: transaction
- name: linked_transactions
  endpoint:
    path: /xml/transaction/{tranref}/linked
    method: GET
    data_selector: transactions
- name: transactions_by_cart_id
  endpoint:
    path: /xml/transaction/{ref}/cart
    method: GET
    data_selector: transactions
- name: transactions_by_cart_id_with_special_chars
  endpoint:
    path: /xml/transaction?cart_id=
    method: GET
    data_selector: transactions
- name: transactions_by_email
  endpoint:
    path: /xml/transaction/{addr}/email
    method: GET
    data_selector: transactions
- name: transactions_by_card_number
  endpoint:
    path: /xml/transaction/{num}/card
    method: GET
    data_selector: transactions
- name: Device data collection
  endpoint:
    path: /path/to/device-data-collection
    method: POST
    data_selector: data
    params: {}
- name: Check enrollment
  endpoint:
    path: /path/to/check-enrollment
    method: POST
    data_selector: data
    params: {}
- name: Authorization
  endpoint:
    path: /path/to/authorization
    method: POST
    data_selector: data
    params: {}
- name: device_collection
  endpoint:
    path: /remote_mpi.xml
    method: POST
    data_selector: remote
    params: {}
- name: report_list
  endpoint:
    path: /report
    method: GET
    data_selector: reports
- name: report_download
  endpoint:
    path: /report/{report_id}
    method: GET
    data_selector: report
- name: recent_repeat_billing_agreements_list
  endpoint:
    path: /agreement
    method: GET
    data_selector: agreements
- name: repeat_billing_agreement_details
  endpoint:
    path: /agreement/{agreement_id}
    method: GET
    data_selector: agreement
- name: repeat_billing_agreement_history
  endpoint:
    path: /agreement/{agreement_id}/history
    method: GET
    data_selector: agreement
- name: cancel_repeat_billing_agreement
  endpoint:
    path: /agreement/{agreement_id}
    method: DELETE
    data_selector: agreement
- name: transaction
  endpoint:
    path: /transaction
    method: GET
    data_selector: transaction
    params: {}
- name: Check Enrollment
  endpoint:
    path: /gateway/remote_mpi.xml
    method: POST
    data_selector: remote
    params: {}
- name: Authorization
  endpoint:
    path: /gateway/remote.xml
    method: POST
    data_selector: remote
    params: {}
- name: agreement
  endpoint:
    path: /repeat_billing_agreement
    method: GET
    data_selector: agreement
- name: recurring_transaction
  endpoint:
    path: /recurring-transactions
    method: POST
    data_selector: tran
    params: {}
- name: Repeat Billing Agreement
  endpoint:
    path: /gateway/remote.xml
    method: POST
    data_selector: remote
- name: transaction_types
  endpoint:
    path: /reference/transaction-types
    method: GET
    data_selector: transaction_types
    params: {}
- name: Device data collection
  endpoint:
    method: POST
- name: Check enrollment
  endpoint:
    method: POST
- name: Authorization
  endpoint:
    method: POST
- name: order
  endpoint:
    path: order.json
    method: POST
    data_selector: splits
- name: mobile
  endpoint:
    path: mobile.xml
    method: POST
    data_selector: splits
- name: remote
  endpoint:
    path: remote.json
    method: POST
    data_selector: splits
- name: api_quicklink
  endpoint:
    path: api_quicklink.json
    method: POST
    data_selector: splits
- name: Create QuickLink
  endpoint:
    path: /create-quicklink
    method: POST
- name: Create Invoice
  endpoint:
    path: /generating-an-invoice
    method: POST
- name: Remote creation of invoices
  endpoint:
    path: /remote-creation-of-invoices
    method: POST
- name: device_collection
  endpoint:
    path: /gateway/remote_mpi.xml
    method: POST
    data_selector: remote.mpi
    params: {}
- name: debit_account
  endpoint:
    path: /api/v1/accounts/{accountId}/debit
    method: POST
- name: credit_account
  endpoint:
    path: /api/v1/accounts/{subMerchantAccountId}/credit
    method: POST
- name: check_enrollment
  endpoint:
    path: /remote_mpi.xml
    method: POST
    data_selector: remote
    params: {}
- name: authorization
  endpoint:
    path: /remote.xml
    method: POST
    data_selector: remote
    params: {}
- name: create_agreement
  endpoint:
    path: /gateway/remote.xml
    method: POST
    data_selector: remote
    params: {}
- name: payment_page
  endpoint:
    path: /payment-page
    method: POST
    data_selector: paymentRequest
    params: {}
- name: check_status
  endpoint:
    path: /check-status
    method: POST
    data_selector: statusResponse
    params: {}
- name: sub_merchant
  endpoint:
    path: /onboarding/sub-merchant
    method: POST
    data_selector: subMerchants
    params: {}
- name: payment_request
  endpoint:
    path: /payment/request
    method: POST
    data_selector: paymentReq
    params: {}
- name: authorization_response
  endpoint:
    path: /payment/authorization
    method: GET
    data_selector: response
    params: {}
- name: order
  endpoint:
    path: /order.json
    method: POST
    data_selector: splits
- name: remote
  endpoint:
    path: /remote.json
    method: POST
    data_selector: splits
- name: api_quicklink
  endpoint:
    path: /api_quicklink.json
    method: POST
    data_selector: splits
- name: Create QuickLink
  endpoint:
    path: /create-quicklink
    method: POST
- name: Create Invoice
  endpoint:
    path: /generating-an-invoice
    method: POST
- name: Remote creation of invoices
  endpoint:
    path: /remote-creation-of-invoices
    method: POST
- name: payments
  endpoint:
    path: /payment-page
    method: POST
    data_selector: result
    params: {}
- name: check_status
  endpoint:
    path: /check-status
    method: POST
    data_selector: status
    params: {}
- name: debit_account
  endpoint:
    path: /api/v1/accounts/{accountId}/debit
    method: POST
- name: telr_payments
  endpoint:
    path: /modules/telr_payments
    method: POST
    data_selector: result
    params: {}
- name: credit_account
  endpoint:
    path: /accounts/{subMerchantAccountId}/credit
    method: POST
- name: payment
  endpoint:
    path: /payment
    method: POST
    data_selector: data
- name: status
  endpoint:
    path: /check-status
    method: POST
    data_selector: data
- name: payment
  endpoint:
    path: /payment
    method: POST
    data_selector: response
    params: {}
- name: check_status
  endpoint:
    path: /check-status
    method: POST
    data_selector: status
    params: {}
- name: zoho_books
  endpoint:
    path: /app/books/telr-for-zoho-books
    method: GET
- name: zoho_inventory
  endpoint:
    path: /app/inventory/telr-for-zoho-inventory
    method: GET
- name: zoho_billing
  endpoint:
    path: /app/billing/telr-for-zoho-billing
    method: GET
- name: zoho_checkout
  endpoint:
    path: /app/checkout/telr-for-zoho-checkout
    method: GET
- name: zoho_invoice
  endpoint:
    path: /app/invoice/telr-for-zoho-invoice
    method: GET
- name: zoho_commerce
  endpoint:
    path: /app/commerce/telr-for-zoho-commerce
    method: GET
- name: payment_gateway
  endpoint:
    path: /payment-gateways/telr
    method: GET
- name: payment_request
  endpoint:
    path: /payment/request
    method: POST
    data_selector: paymentReq
    params: {}
- name: authorization_response
  endpoint:
    path: /payment/authorization
    method: GET
    data_selector: authResponse
    params: {}
- name: Telr Secure Payments
  endpoint:
    path: /Payment/TelrSecurePayments
    method: POST
    data_selector: transactionResult
    params:
      store_id: your_store_id
      authentication_key: your_authentication_key
- name: payment_providers
  endpoint:
    path: /payment-providers
    method: GET
    data_selector: providers
- name: payment
  endpoint:
    path: /payment
    method: POST
- name: Telr Payment
  endpoint:
    path: /Payments/Telr
    method: POST
    data_selector: response
    params: {}
- name: device_info
  endpoint:
    path: /device-identification
    method: POST
    data_selector: device
    params: {}
- name: telr_payments
  endpoint:
    path: /modules/telr_payments
    method: POST
- name: recurring_transaction
  endpoint:
    path: /remote
    method: POST
    data_selector: tran
    params: {}
- name: telr_integration
  endpoint:
    path: /marketplace.zoho.com/app/telr-integration
    method: GET
    data_selector: data
    params: {}
- name: payment_gateway
  endpoint:
    path: /payment-gateway/telr
    method: POST
    data_selector: response
    params: {}
- name: payment_page
  endpoint:
    path: /api/v1/payment
    method: POST
    data_selector: transaction
- name: telr_payment
  endpoint:
    path: /payment-page
    method: POST
- name: Telr Payment
  endpoint:
    path: /payments/telr
    method: POST
- name: Recurring Transaction
  endpoint:
    path: /reference/recurring-transactions-1
    method: POST
    data_selector: tran
    params: {}
notes:
- Amounts must be sent in major units without currency symbols and without commas
  between digit groups.
- The early and late payment sections are optional, but if included, they must contain
  valid dates and amounts.
- Password is mandatory for all remote requests; any request without the password
  will be rejected.
- All data must be transmitted in UTF-8 encoding.
- All card details are handled securely by our PCI DSS certified systems, eliminating
  the need for you to obtain your own certification.
- Remote API is not enabled by default. Please contact our support team by submitting
  a request through the support ticket system or by sending an email to support@telr.com.
- If the late payment section is used, invoices displayed after the specified date
  will be marked as overdue.
- Omitting the Details Section will still generate an invoice reference and a payment
  URL.
- PCI certification required for card capture by merchant systems.
- Remote API is not available as a standard integration method.
- Contact support@telr.com to request access.
- The 3-D Secure protocol was developed to improve the security of online payments.
- Webhook provides a server-to-server messaging system that facilitates communication
  regarding various transaction types and agreement-related changes.
- The URL used must be accessible over the internet.
- The original email address used to create the account is assigned at account creation
  time.
- Agreement-related webhooks are sent using the HTTP POST method.
- Your systems must indicate successful receipt of the message by using the HTTP 200
  OK response code.
- Webhook provides a server-to-server messaging system that facilitate communication
  regarding various transaction types and agreement-related changes.
- You will need to supply the URL that is to be used by the advice service. This URL
  must use either the HTTP or HTTPS protocol and must be on either port 80 or port
  443.
- Webhooks are sent using the HTTP POST method.
- Successful receipt of the message is indicated by using the HTTP 200 OK response
  code.
- These card numbers can be used when testing your integration to the payment gateway.
  These cards will not work for live transactions.
- 'Website must display: Company name, Email address, Phone numbers, P.O. Box, Office
  address, Country (UAE)'
- Merchants using the hosted payment page can enable the Apple Pay payment option.
- Website content must reflect the merchant licensed business activity.
- Website must not contain prohibited products or services.
- Merchants will verify their domain name in their Apple Developer account, where
  Apple Pay will be utilized.
- Create a Merchant ID (e.g. merchant.com.Telr.applepay) in the Apple developer account.
- Obtain payment processing certificate from the Apple Developer account.
- Obtain session certificate from the Apple developer account.
- Share the apple pay token processing certificate (#3) (file with extension .cer)
  and key (file with extension .p12), along with any required password, with Telr
  to update at Telr's side.
- This configuration is suitable for merchants who prefer a simplified setup process
  without the need to manage their own Apple Developer Account.
- Merchants must verify their domain name in their Apple Developer account, where
  Apple Pay will be utilized.
- Merchants must create a Merchant ID specific to Apple Pay in their Apple developer
  account.
- Merchants using the hosted payment page have the option to enable Samsung Pay.
- To activate Samsung Pay, please connect with our support team at support@telr.com.
- Merchants must contact the support team via email to enable Samsung Pay using the
  Remote JSON API.
- If the Samsung Pay status is Enabled, click the 'Generate' button under 'Samsung
  Pay' to create a CSR.
- Make a Samsung Pay transaction using POST method.
- Requires store and authkey in body params
- tran object must include applepay and customer objects
- The Hosted Payment Page service allows your website with its own shopping system
  to work in conjunction with our payment service.
- Defaults to create for method
- Requires store ID and authentication key
- Your website does not gather card details from the shopper – we do this in our payment
  pages.
- It is always best to send customer information with the request whenever possible,
  as that improves the customer experience of completing the transaction and reduces
  cart abandonment.
- To use framed mode your store must be operating under https, not http
- The request method being used. Set to ‘create’ to generate a new transaction.
- Your store ID. Numeric value only.
- Your authentication key
- To avail stored card functionality without CVV and OTP, please send an Email request
  to 'Support@telr.com' or raise a ticket through Merchant admin 'Support Ticket'
  option.
- If any part of the customer details are not supplied, or if they are not valid,
  then the payment pages will prompt for the correct details.
- The payment page can be customized using a CSS file.
- The page structure is based on the BootStrap 3 responsive framework.
- Files can be uploaded using the Additional Files section within the payment page
  menu in the Merchant Administration System.
- The hosted payment pages can use the Google Analytics Measurement Protocol to send
  information on customer progress through the payment pages.
- You can upload your custom style sheet by uploading a file titled ‘custom_pp2.css’
- This file must be un-compressed CSS file, must not include any JavaScript, nor any
  references to other external css files.
- The maximum size of an image file is 256K.
- You will need to get the client ID from the Google Analytics code you are operating
  on your site prior to sending the transaction request.
- Initial payment amount, payment period, payment interval, regular payment amount,
  start date, term, and final payment amount are required fields.
- To enable the Stored card functionality, you first need to select the ‘Stored cards’
  option within the payment page configuration in the Merchant Admin System.
- This date cannot be the past date, and cannot be the same date as the date the agreement
  is being made on.
- When the payment interval is specified in weeks, it will be taken on the same day
  of the week as the day that this date represents.
- When the payment interval is specified in months, it will be taken of the same day
  of the month as the day given here.
- In the event that this is scheduled for a day that not all months have, then the
  payment will be taken on the last day of the month instead.
- API for updating agreement details using the changedetails action.
- Response body contains agreementid, cartdesc, cartid, period, firsttranref, email,
  phone, amount, interval, overdue.
- The Repeat Billing system gives merchants who use the Hosted Payment Pages the ability
  to setup and manage automatic recurring payments.
- Payment Agreements specify the value and frequency of the payments to be made.
- This date cannot be the past date, and cannot be the same date as the date the agreement
  is being made on
- When the payment interval is specified in weeks, it will be taken on the same day
  of the week as the day that this date represents
- When the payment interval is specified in months, it will be taken of the same day
  of the month as the day given here
- Retrieves a list of failed agreements based on the provided filters.
- 200 Successful response with cancelled agreements data or error information.
- Setting future cancel date option is available only on the Repeat billing agreement
  created for unlimited period on all the mode i.e. through API, Invoice or Quicklink.
  Repeat term should not be set for any set period.
- Agreement not getting cancelled by the system due to failed transaction attempts.
  If all the transaction attempts fail, then the agreement will not be cancelled,
  and system will start the transaction attempt for the next month or week
- Increase the repeat transaction to 10 attempts throughout the month with gap for
  3 days (No changes in transaction attempts in weekly agreement)
- Files must be UTF-8 or US-ASCII encoded.
- Agreement not getting cancelled by the system due to failed transaction attempts.
- Increase the repeat transaction to 10 attempts throughout the month with gap for
  3 days.
- Supports a maximum of 5 parameters for additional data in requests
- Exceeding the parameter limit generates an exception
- The configuration to transmit transaction variables is optional and currently deactivated
  by default.
- Do not enable this feature if using Zoho or Mobile integration.
- If the value contained in ivp_lang is not a 2 character code, or does not match
  a language file uploaded to your store, then it will be ignored and the default
  value of ‘en’ will be used.
- Use comma-separated BINs without spaces.
- You can block up to 200 BINs.
- Each BIN must be 6 or 8 digits long.
- Card Filter Feature allows merchants to restrict types of cards accepted for transactions
  by specifying allowed BIN or PAN patterns.
- Supports a maximum of 5 parameters for additional data in order creation.
- Merchant needs to pass the store credentials and transaction-related data through
  a form tag.
- The configuration to transmit transaction variables in return URLs is optional and
  deactivated by default.
- To switch between the Sandbox (test) environment and the LIVE environment, modify
  the test parameter in the process.php file.
- Set 'ivp_test' to '1' for Sandbox mode, '0' for LIVE mode.
- Payments are processed through Hosted Payment Pages, which need to be set up beforehand.
- 1 for testing mode, 0 for live mode
- Set 'ivp_test' to '1' for Sandbox mode, '0' for LIVE mode
- The ‘Pay Now’ button used within the invoice email will update according to the
  invoices current status without you having to resend the invoice.
- The transaction type and transaction class parameters define how a transaction will
  be processed, determining both the processing action and the processing category.
- The Authentication Key will be supplied by Telr as part of the Mobile API setup
  process after you request that this integration type is enabled for your account.
  This should not be stored permanently within the App.
- Test mode of zero indicates a live transaction. If this is set to any other value
  the transaction will be treated as a test.
- Customer Email Address is the minimum required customer information for a transaction
  to be processed.
- Country must be sent as a 2 character ISO code. A list of 2 letter country codes
  can be found at https://www.iban.com/country-codes.
- The transaction cannot be processed until the verification process completes.
- To ensure the security of the authentication key required for each transaction request,
  it is critical that this key is not stored within the actual App code.
- Storing sensitive details, such as your Store ID, within the App code is acceptable,
  but the authentication key should be handled with extra precautions.
- We would advise that your App obtains the authentication key by downloading it from
  your servers as part of either an installation or registration phase.
- This process must be over a secure encrypted link (for example, HTTPS).
- Once the App has the authentication key, it should store it in the device in a secure
  method, such as using the iOS Keychain.
- This method also allows you to update the authentication key should this be needed.
- To enable the Save Card option in the Mobile API integration, store the initial
  transaction reference number against the customer.
- IP address limitations are strongly recommended for API access.
- The transaction type and transaction class parameters define how a transaction will
  be processed.
- The use of 3-D Secure is mandatory for Internet-based E-Commerce transactions.
- Each request made to the API must include authentication details.
- HTTP Basic authentication implementation is one of the easiest methods to use as
  it doesn’t require cookies, session handling, or a login sequence.
- Requests to the Mobile API endpoint generate a link to the Hosted Payment Pages
  to securely capture the customer’s card details.
- 'Email Address is Mandatory: The customer’s email address must be included in the
  request, as it is required for the payment process.'
- All values must be dynamically determined based on the actual device the App is
  running on.
- For Continuous-Authority requests, the reference must exactly match the one generated
  during the initial transaction.
- The verification request will contain the transaction details received by the mobile
  API.
- If the request to the verification URL cannot be completed, the gateway will assume
  that verification has failed and will block the transaction request.
- It is strongly recommended to set IP address limitations.
- The IP addresses specified must be publicly routable IP addresses.
- Many of the responses contain common data elements.
- 'Agreement status codes: 0 - Pending, 1 - Running, 2 - Completed, 3 - Failed, 4
  - Overdue, 5 - Cancelled.'
- Remote API is not enabled by default, please contact support using the support ticket
  system to request this.
- The collection and storage of payment information must take place in a secure environment.
- All payment requests must be sent as an XML request using the HTTP POST method.
- For E-Commerce transactions it is mandatory that you also implement 3-D Secure as
  part of the authorisation process.
- To include the delivery details, add a delivery section.
- To include the extra data fields, add an extra field.
- The returned device collection URL must be injected into a hidden iframe to perform
  device fingerprinting.
- The invocation must occur within 30 seconds inside a modal view; otherwise, the
  redirecthtml URL may time out.
- 'Agreement status codes: 0 - Pending, 1 - Running, 2 - Completed, 3 - Failed, 4
  - Overdue, 5 - Cancelled'
- Requires initial E-Commerce or MoTo transaction for recurring payments
- Must use transaction ID of the initial authorisation for additional transactions
- Data must be sent in UTF-8 encoding.
- Only certain characters can be used in requests.
- Additional permissions are required for Merchant Admin users to provide access to
  the Split Payment option.
- Multi-split payments are not supported for form-based requests.
- Split fields are not supported in authorization (auth) transactions.
- Split fields can be used during capture transactions processed via the remote API.
- In remote_mpi.xml, split fields must only be included in the first request and excluded
  from the third and any subsequent requests.
- The 'remaining' split type is only supported via API, not via dashboard.
- 'When using id: 0, exactly one ''remaining'' split must be included.'
- 'Only one remaining split and one id: 0 split are allowed per transaction.'
- Multi Split payment is not supported in Quicklink and E-invoicing.
- The AVS check is currently only available for cards issued in the United Kingdom,
  United States of America or Canada.
- Recurring transactions require an initial authorised sale transaction.
- Card and billing details must not be sent with follow-up transaction requests.
- The ability to directly debit a card for each payment is contingent upon your acquiring
  bank supporting 'Continuous Authority' transactions for your merchant account.
- The Telr iOS SDK requires Xcode 11 or later and supports apps targeting iOS 9 or
  above.
- It is compatible with Catalyst on macOS 10.15 or later.
- Authorization status can be A or H for successful transactions.
- Transaction details include authorization code, message, and CVV check result.
- No card details are captured or stored within the Magento system, alleviating the
  need for PCI compliance.
- Ensure the IP details of your server are entered into the Hosted Payment Page configuration
  in the Telr Merchant Administration System.
- 'When using ''id: 0'', exactly one ''remaining'' split must be included.'
- No card details are captured by or stored within the OpenCart system, so there are
  no PCI requirements for the store.
- The module has been tested with OpenCart versions 2.3.x, 3.x.x and 4.x.x.
- No card details are captured by or stored within the PrestaShop system, so there
  are no PCI requirements for the store.
- The actual data entry section for 3D-Secure authentication is presented directly
  by the card issuer and cannot be customised.
- Update the demo's configuration to use your StoreID and Key as provided by Telr.
  These details are necessary for authenticating your transactions with the payment
  gateway.
- Uses OAuth2 for authentication
- To save the card for future transactions, you will be required to store tranRef.
- No card details are captured by or stored within the WooCommerce system, so there
  are no PCI requirements for the store.
- Requires setup of payment gateway configuration
- CVV check results are returned in the authorization response
- Extension ensures that no card details are captured or stored within the Magento
  system.
- Before processing live transactions, ensure that the IP details of your server are
  entered into the Hosted Payment Page configuration.
- Ensure that the IP of your server system is updated into the Payment Page configuration
  in the Telr Merchant Administration System.
- You must take a back-up of your system before installing the extension.
- All data must be sent in UTF-8 encoding.
- Transaction amount must be sent in major units, for example 9 dollars 50 cents must
  be sent as 9.50.
- To activate seamless payment mode, select 'Seamless Mode' as the payment option
  in Telr payment settings.
- If the Shopify domain name is currently linked to another store and user wants to
  change it, he can do but changing it will unlink the previous store for all installed
  payment apps affecting its follow-up transactions like refund/void/capture.
- If the selected Telr store already has the payment app installed with a different
  Shopify domain, proceeding with this store will deactivate the payment apps for
  the other domain, impacting all associated transactions in the other domain.
- The first transaction must be processed as either an E-Commerce transaction or as
  a MoTo transaction.
- Merchant must provide their Telr Store ID in 'storeid' and Authentication key.
- 'Merchant will get the Store ID and Authentication Key on the path: Merchant dashboard
  > Integrations > Hosted Payment Page > Configuration.'
- For refund functionality, input the Telr Remote Authentication key.
- For Continuous-Authority requests (recurring payments), this reference must exactly
  match the one generated during the initial transaction.
- It is recommended to check these headers either at App startup or right before a
  transaction requiring them.
- The transaction amount must be sent in major units, for example 9 dollars 50 cents
  must be sent as 9.50 not 950.
- The first transaction must be processed as either an E-Commerce transaction or as
  a MoTo (Mail Order / Telephone Order) transaction.
- Recurring transactions using the Network Transaction reference are now supported.
errors:
- 'Error: Invoice could not be created due to a problem within the invoice details.'
- 'Error: Problem within the invoice details'
- 'E1: Invalid request'
- 'E2: Transaction cost or currency not supplied'
- 'E3: Cart ID not set'
- 'E4: Invalid store ID'
- 'E5: Transaction cost or currency not valid'
- 'E6: Invalid transaction mode'
- 'E7: Card expiry not supplied'
- 'E8: Card start date not supplied'
- 'E9: Card issue number not supplied'
- 'E10: Card number not supplied'
- 'E11: Invalid card number'
- 'E12: Card expired'
- 'E14: Card type mismatch'
- 'E15: Invalid card security code (CVV)'
- 'E16: Card security code (CVV) not supplied'
- 'E17: Name not valid/not supplied'
- 'E18: Address not valid/not supplied'
- 'E19: Country not valid/not supplied'
- 'E20: IP address not valid/not supplied'
- 'E21: Card/Currency/Class combination not supported'
- 'E22: Invalid transaction reference'
- 'E23: Amount differs from original'
- 'E24: Currency differs from original'
- 'E25: Original transaction not authorised'
- 'E26: Original transaction already voided'
- 'E27: Original transaction mismatch'
- 'E28: Invalid start date'
- 'E29: Amount greater than available balance'
- 'E30: Card details differ from original'
- 'D31: Not authorised'
- 'D32: Original transaction cannot be voided'
- 'C33: Cancelled'
- 'D34: No response'
- 'E35: Unable to refund'
- 'E36: Previous transaction is on hold'
- 'D37: Blocked by acquirer'
- 'E38: Invalid expiry date'
- 'E39: Invalid transaction class'
- 'E40: Invalid transaction type'
- 'D41: Insufficient funds'
- 'D42: Card security code (CVV) mismatch'
- 'E43: Email not valid/not supplied'
- 'E44: Phone number not valid/not supplied'
- 'E45: Transaction mode differs from original'
- 'D46: 3DSecure authentication not available for this card'
- 'D47: 3DSecure authentication rejected'
- 'E48: Description not set'
- 'D49: Sold out'
- 'E50: Card is for ATM use only'
- 'E52: Invalid Transaction Method'
- 'X53: Authorisation expired'
- 'E54: Transaction part not specified'
- 'E55: Unable to access transaction part'
- 'E56: Duplicate transaction'
- 'D57: Continuous authority not available on referenced transaction'
- 'E58: Error connecting to service provider'
- 'E59: Request aborted'
- 'E60: Verification failed'
- 'D61: Refer to card issuer'
- 'D62: Do not honor'
- 'D63: Address verification (AVS) mismatch'
- 'D64: Card security code (CVV) and address (AVS) mismatch'
- 'D65: Card is not enabled for e-commerce'
- 'D66: Card cancelled'
- 'D67: Transaction not permitted by issuer'
- 'D68: No/invalid account'
- 'E69: Refund needs to be completed manually by the bank'
- 'E70: Currently refund cannot be processed, please reach out to client experience'
- 'D71: Invalid Terminal configurations'
- 'E72: Invalid value for split parameter'
- 'E73: Split Payment not enabled for the store'
- 'E74: Card token validation failed'
- 'E75: STCPay order creation failed'
- 'E76: Paypal order creation failed'
- 'D77: Problem with Cybersource configurations'
- 'E78: Timeout at payment processor'
- 'D90: Anti-fraud pre-auth'
- 'D91: Fraud detected by issuer'
- 'D92: Anti-fraud post-auth'
- 'D93: Card limits exceeded'
- 'D94: Terminal limits'
- 'D95: Not authorised'
- 'D96: Fraud detected by acquirer'
- 'D97: Multiple email used with same card'
- 'E98: Internal system error'
- 'E99: Unknown error'
- 'E100: Invalid end date'
- 'E101: Limit value should be less than or equal to 4000'
- 'E102: The date range exceeds seven days'
- 'E103: Invalid or Less parameters in URL'
- 'E104: From date can not be greater than to date'
- 'E105: Transaction is already captured'
- 'E106: Invalid path parameter'
- 'D107: Acquirer system error'
- 'D108: Invalid merchant'
- 'D109: Invalid transaction'
- 'D110: Invalid issuer'
- 'D111: Restricted'
- 'D112: Closed card/account'
- 'D113: Authorisation revoked'
- 'D114: Fraud suspected by issuer'
- 'D115: Fraud suspected by scheme'
- 'D116: No/invalid pin'
- 'D117: Scheme lifecycle/policy'
- 'D118: Unable to route'
- 'D119: No/invalid OTP'
- 'D120: OTP limit exceeded'
- 'D121: Inactive account'
- 'D122: Already paid'
- 'D123: Payment expired'
- 'D124: Account limit exceeded'
- 'INVALID_REQUEST: Common causes include unauthorized IP address or incorrect password.'
- 'REQUEST_MOBILE_API_NOT_ENABLED: Request mobile API to be added to your account
  before use.'
- 'REQUEST_LIMIT_EXCEEDED: Throttle API calls or reduce frequency'
- 'QUERY_TIMEOUT: Break down filters or add selectivity'
- Transaction records must be retained by cardholders.
- '400 Bad Request: Check required parameters'
- '401 Unauthorized: Verify authkey'
- '500 Internal Server Error: Try again later'
- E56:Duplicate transaction
- 200 - Order Response
- 200 - Invoice Not Paid
- 200 - Invoice Cancelled
- 200 - Invoice Expired
- 200 - Invoice Paid
- 'E56:Duplicate transaction: Cart ID must be unique'
- '400 Bad Request: Check for missing required fields in the agreement.'
- 200 Successful operation.
- '200: Successful response'
- 'error: Error response'
- 200 Successful response with failed agreements data or error information.
- 'EXCEPTION: Number of parameters exceeds limit during order creation.'
- 403 FORBIDDEN
- 404 NOT FOUND
- 500 INTERNAL ERROR
- '403 Forbidden: Access is denied'
- '400 Bad Request: Check request parameters'
- '401 Unauthorized: Recheck API key or credentials'
- '5: Error message corresponding to the error code'
- '400 Bad Request: Check request parameters for correctness.'
- '401 Unauthorized: Ensure API key is valid.'
- 'DECLINED: Do not honour'
- 'Invalid credentials: Check the provided keys and store ID.'
- 'Transaction failed: Review the error message for details.'
- 'Invalid Split ID: The request will be rejected with an exception if the split ID
  value is greater than 100 but not a multiple of 1000.'
- '401 Unauthorized: Recheck OAuth scopes or token expiration'
- 'INVALID_REQUEST: Ensure all required fields are included'
- 'TRANSACTION_DECLINED: Check card details and try again'
- 'AUTHORIZATION_FAILED: Verify authorization credentials'
- 'InvalidTransactionType: Transaction type must be ''sale'' for follow-up transactions.'
- 'TransactionNotAuthorised: The referenced transaction must be an authorised sale.'
auth_info:
  mentioned_objects: []
client:
  base_url: https://www.telr.com
  headers:
    Accept: application/json
source_metadata: null
