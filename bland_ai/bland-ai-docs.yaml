resources:
- name: A2P Registration
  endpoint:
    path: /sms/register
    method: POST
    data_selector: ''
    params: {}
- name: calls
  endpoint:
    path: /v1/calls
    method: POST
    data_selector: status
    params: {}
- name: calls
  endpoint:
    path: /v1/calls
    method: POST
    data_selector: null
    params: {}
- name: voice_audio
  endpoint:
    path: /api/v1/voice_audio
    method: GET
    data_selector: records
    params: {}
- name: sms_features
  endpoint:
    path: /api/v1/sms_features
    method: GET
    data_selector: records
    params: {}
- name: Conversational Pathways
  endpoint:
    path: /tutorials/pathways
    method: GET
- name: batch_calls
  endpoint:
    path: /api-v1/post/batches
    method: POST
    data_selector: results
    params: {}
- name: post_call_webhook
  endpoint:
    path: /api-v1/post/calls
    method: POST
- name: delayed_webhook_with_citations
  endpoint:
    path: /v1/webhooks/delayed
    method: POST
    data_selector: payload
- name: personas
  endpoint:
    path: /v1/personas
    method: GET
    data_selector: id
    params: {}
- name: widget
  endpoint:
    path: /api-v1/post/widget
    method: POST
    data_selector: null
    params: {}
- name: blocked_numbers
  endpoint:
    path: /api-v1/post/blocked-numbers
    method: POST
- name: Memory Store
  endpoint:
    path: /v1/calls
    method: POST
    data_selector: memory_id
    params: {}
- name: bland_widget
  endpoint:
    path: /incoming
    method: GET
    data_selector: ''
    params:
      encrypted_key: YOUR_ENCRYPTED_KEY
      param: YOUR_PARAM
- name: custom_dialing_pool
  endpoint:
    path: /api-v1/get/custom-dialing-pool
    method: GET
- name: available_slots
  endpoint:
    path: /api/v1/getAvailableSlots
    method: POST
    data_selector: available_slots
- name: warm_transfer
  endpoint:
    path: /api-v1/post/calls-simple-pathway
    method: POST
    data_selector: data
    params: {}
- name: attach_sip_endpoint
  endpoint:
    path: /sip/attach
    method: POST
    data_selector: none
    params: {}
- name: verify_sip_number
  endpoint:
    path: /sip/verify
    method: PUT
    data_selector: none
    params: {}
- name: update_sip_direction
  endpoint:
    path: /sip/update
    method: POST
    data_selector: none
    params: {}
- name: detach_sip_endpoint
  endpoint:
    path: /sip/detach
    method: POST
    data_selector: none
    params: {}
- name: get_sip_config
  endpoint:
    path: /sip
    method: GET
    data_selector: data
    params: {}
- name: OIDC Configuration
  endpoint:
    path: /authorization/sso/callback/[provider-id]
    method: GET
    data_selector: records
    params: {}
- name: SAML Configuration
  endpoint:
    path: /authorization/sso/saml2/callback/[provider-id]
    method: GET
    data_selector: records
    params: {}
- name: oidc_endpoints
  endpoint:
    path: /authorization/sso/callback/[provider-id]
    method: GET
    data_selector: redirect_uri
    params: {}
- name: saml_endpoints
  endpoint:
    path: /authorization/sso/saml2/callback/[provider-id]
    method: GET
    data_selector: acs_url
    params: {}
- name: send_call
  endpoint:
    path: /calls
    method: POST
    data_selector: null
    params: {}
- name: list_calls
  endpoint:
    path: /get/calls
    method: GET
    data_selector: null
    params: {}
- name: send_call
  endpoint:
    path: /calls
    method: POST
    data_selector: status
- name: calls
  endpoint:
    path: /calls
    method: POST
    data_selector: status
    params: {}
- name: calls
  endpoint:
    path: /calls
    method: POST
    data_selector: status
    params: {}
- name: calls
  endpoint:
    path: /v1/calls
    method: POST
    data_selector: status
    params: {}
- name: calls
  endpoint:
    path: /v1/calls
    method: POST
    data_selector: status
    params: {}
- name: analyze_call
  endpoint:
    path: /v1/calls/{call_id}/analyze
    method: POST
    data_selector: answers
- name: analyze_call
  endpoint:
    path: /v1/calls/{call_id}/analyze
    method: POST
    data_selector: answers
- name: analyze_call
  endpoint:
    path: /v1/calls/{call_id}/analyze
    method: POST
- name: Stop Active Call
  endpoint:
    path: /v1/calls/{call_id}/stop
    method: POST
- name: List Active Calls
  endpoint:
    path: /v1/get/active
    method: GET
- name: Call Details
  endpoint:
    path: /v1/get/calls-id
    method: GET
- name: analyze_call
  endpoint:
    path: /v1/calls/{call_id}/analyze
    method: POST
    data_selector: answers
- name: stop_active_call
  endpoint:
    path: /v1/calls/{call_id}/stop
    method: POST
    data_selector: status
    params: {}
- name: stop_active_call
  endpoint:
    path: /v1/calls/{call_id}/stop
    method: POST
    data_selector: status
- name: listen_to_active_call
  endpoint:
    path: /v1/calls/{call_id}/listen
    method: POST
    data_selector: data
    params: {}
- name: stop_active_call
  endpoint:
    path: /v1/calls/{call_id}/stop
    method: POST
    data_selector: status
    params: {}
- name: stop_all_active_calls
  endpoint:
    path: /v1/calls/active/stop
    method: POST
    data_selector: status
- name: listen_to_active_call
  endpoint:
    path: /v1/calls/{call_id}/listen
    method: POST
    data_selector: data
    params: {}
- name: stop_all_active_calls
  endpoint:
    path: /v1/calls/active/stop
    method: POST
    data_selector: status
    params: {}
- name: stop_all_active_calls
  endpoint:
    path: /v1/calls/active/stop
    method: POST
- name: list_calls
  endpoint:
    path: /v1/get/calls
    method: GET
- name: calls
  endpoint:
    path: /v1/calls
    method: GET
    data_selector: calls
- name: stop_all_active_calls
  endpoint:
    path: /v1/calls/active/stop
    method: POST
    data_selector: status
    params: {}
- name: calls
  endpoint:
    path: /v1/calls
    method: GET
    data_selector: calls
- name: list_calls
  endpoint:
    path: /v1/calls
    method: GET
    data_selector: calls
    params:
      limit: '1000'
      ascending: 'false'
      sort_by: created_at
- name: active_calls
  endpoint:
    path: /v1/calls/active
    method: GET
    data_selector: data
- name: calls
  endpoint:
    path: /v1/calls
    method: GET
    data_selector: calls
    params:
      limit: '1000'
      ascending: 'false'
      sort_by: created_at
- name: active_calls
  endpoint:
    path: /calls/active
    method: GET
    data_selector: data
- name: active_calls
  endpoint:
    path: /v1/calls/active
    method: GET
    data_selector: data
- name: call_details
  endpoint:
    path: /api-v1/get/calls-id
    method: GET
    data_selector: null
    params: {}
- name: active_calls
  endpoint:
    path: /calls/active
    method: GET
    data_selector: data
- name: call_details
  endpoint:
    path: /v1/calls/{call_id}
    method: GET
    data_selector: call_id
- name: call_details
  endpoint:
    path: /api-v1/get/calls-id
    method: GET
    data_selector: call_id
- name: calls
  endpoint:
    path: /api-v1/get/calls-id
    method: GET
    data_selector: transcripts
    params:
      call_id: string
- name: call_details
  endpoint:
    path: /v1/calls/{call_id}
    method: GET
    data_selector: call_id
- name: call
  endpoint:
    path: /api-v1/get/calls-id
    method: GET
    data_selector: transcripts
    params:
      call_id: string
- name: event_stream
  endpoint:
    path: /v1/event_stream/{call_id}
    method: GET
    data_selector: level, message, category, call_id, timestamp
- name: event_stream
  endpoint:
    path: /v1/event_stream/{call_id}
    method: GET
    data_selector: level, message, category, call_id, timestamp
- name: event_stream
  endpoint:
    path: /v1/event_stream/{call_id}
    method: GET
    data_selector: <string>
    params: {}
- name: event_stream
  endpoint:
    path: /v1/event_stream/{call_id}
    method: GET
    data_selector: level, message, category, call_id, timestamp
    params: {}
- name: call_recording
  endpoint:
    path: /v1/recordings/{call_id}
    method: GET
    data_selector: data
    params: {}
- name: Get Call Recording
  endpoint:
    path: /v1/recordings/{call_id}
    method: GET
    data_selector: data
    params: {}
- name: call_recording
  endpoint:
    path: /v1/recordings/{call_id}
    method: GET
    data_selector: data
    params: {}
- name: call_recording
  endpoint:
    path: /v1/recordings/{call_id}
    method: GET
    data_selector: data
    params: {}
- name: corrected_transcripts
  endpoint:
    path: /v1/calls/{call_id}/correct
    method: GET
- name: corrected_transcripts
  endpoint:
    path: /v1/calls/{call_id}/correct
    method: GET
- name: corrected
  endpoint:
    path: /calls/corrected
    method: GET
    data_selector: corrected
- name: aligned
  endpoint:
    path: /calls/aligned
    method: GET
    data_selector: aligned
- name: original
  endpoint:
    path: /calls/original
    method: GET
    data_selector: original
- name: calls
  endpoint:
    path: /api/v1/calls
    method: GET
    data_selector: corrected
- name: corrected_transcripts
  endpoint:
    path: /v1/calls/{call_id}/correct
    method: GET
- name: corrected_transcripts
  endpoint:
    path: /v1/calls/{call_id}/correct
    method: GET
- name: corrected_transcripts
  endpoint:
    path: /v1/calls/{call_id}/correct
    method: GET
    data_selector: corrected
    params: {}
- name: corrected_transcripts
  endpoint:
    path: /v1/calls/{call_id}/correct
    method: GET
    data_selector: corrected
- name: orders
  endpoint:
    path: /api/v1/orders
    method: GET
    data_selector: data
    params:
      incremental: updated_at
- name: orders
  endpoint:
    path: /services/data/vXX.X/sobjects/Order
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: calls_corrected_transcript
  endpoint:
    path: /api-v1/get/calls-corrected-transcript
    method: GET
- name: corrected_transcripts
  endpoint:
    path: /api-v1/get/calls-corrected-transcript
    method: GET
    data_selector: corrected
- name: speak
  endpoint:
    path: /speak
    method: POST
    data_selector: audio
    params: {}
- name: speak
  endpoint:
    path: /speak
    method: POST
    data_selector: audio
    params: {}
- name: list_calls
  endpoint:
    path: /get/calls
    method: GET
    data_selector: calls
    params: {}
- name: clone_voice
  endpoint:
    path: /v1/voices/clone
    method: POST
    data_selector: data
    params: {}
- name: clone_voice
  endpoint:
    path: /v1/voices/clone
    method: POST
    data_selector: data
    params: {}
- name: analyze_call_emotions
  endpoint:
    path: /v1/intelligence/emotions
    method: POST
    data_selector: data.data
    params: {}
- name: analyze_call_emotions
  endpoint:
    path: /v1/intelligence/emotions
    method: POST
    data_selector: data
    params: {}
- name: pathway
  endpoint:
    path: /v1/pathway
    method: GET
    data_selector: nodes
- name: pathway
  endpoint:
    path: /v1/pathway
    method: GET
    data_selector: nodes
- name: pathway
  endpoint:
    path: /pathway
    method: GET
    data_selector: nodes
    params: {}
- name: pathway
  endpoint:
    path: /pathway
    method: GET
    data_selector: nodes
    params: {}
- name: single_pathway
  endpoint:
    path: /v1/pathway/{pathway_id}
    method: GET
    data_selector: nodes
    params: {}
- name: pathway
  endpoint:
    path: /v1/pathway/{pathway_id}
    method: GET
    data_selector: nodes
    params: {}
- name: pathway
  endpoint:
    path: /v1/pathway/{pathway_id}
    method: GET
- name: pathway
  endpoint:
    path: /v1/pathway/{pathway_id}
    method: GET
    data_selector: nodes
    params: {}
- name: pathway_session
  endpoint:
    path: /v1/pathway/session
    method: GET
- name: pathway_session
  endpoint:
    path: /v1/pathway/session
    method: GET
- name: pathway_session
  endpoint:
    path: /v1/pathway/session
    method: GET
    data_selector: token
    params: {}
- name: pathway_session
  endpoint:
    path: /v1/pathway/session
    method: GET
    data_selector: token
    params: {}
- name: create_pathway
  endpoint:
    path: /v1/pathway/create
    method: POST
    data_selector: status
- name: create_pathway
  endpoint:
    path: /v1/pathway/create
    method: POST
    data_selector: status
    params: {}
- name: create_pathway
  endpoint:
    path: /v1/pathway/create
    method: POST
    data_selector: status
    params: {}
- name: create_pathway
  endpoint:
    path: /v1/pathway/create
    method: POST
    data_selector: status
    params: {}
- name: update_pathway
  endpoint:
    path: /v1/pathway/{pathway_id}
    method: POST
    data_selector: pathway_data
    params: {}
- name: update_pathway
  endpoint:
    path: /v1/pathway/{pathway_id}
    method: POST
    data_selector: pathway_data
- name: update_pathway
  endpoint:
    path: /v1/pathway/{pathway_id}
    method: POST
- name: Update Pathway
  endpoint:
    path: /v1/pathway/{pathway_id}
    method: POST
    data_selector: pathway_data
    params: {}
- name: pathway
  endpoint:
    path: /api-v1/post/update_pathways
    method: POST
- name: create_pathway
  endpoint:
    path: /api-v1/post/pathways
    method: POST
- name: delete_pathway
  endpoint:
    path: /api-v1/post/delete_pathway
    method: DELETE
- name: pathway
  endpoint:
    path: /api-v1/post/update_pathways
    method: POST
    data_selector: pathway_data
- name: create_pathway
  endpoint:
    path: /api-v1/post/pathways
    method: POST
    data_selector: pathway_data
- name: delete_pathway
  endpoint:
    path: /api-v1/post/delete_pathway
    method: DELETE
    data_selector: pathway_data
- name: Delete Pathway
  endpoint:
    path: /v1/pathway/{pathway_id}
    method: DEL
- name: Delete Pathway
  endpoint:
    path: /v1/pathway/{pathway_id}
    method: DELETE
- name: delete_pathway
  endpoint:
    path: /v1/pathway/{pathway_id}
    method: DELETE
- name: delete_pathway
  endpoint:
    path: /v1/pathway/{pathway_id}
    method: DEL
- name: knowledge_base
  endpoint:
    path: /v1/knowledge/learn
    method: POST
    data_selector: data
    params: {}
- name: knowledge_base
  endpoint:
    path: /knowledge/learn
    method: POST
    data_selector: data
    params: {}
- name: knowledge_base
  endpoint:
    path: /v1/knowledge/learn
    method: POST
    data_selector: data
    params: {}
- name: knowledge_base
  endpoint:
    path: /knowledge/learn
    method: POST
    data_selector: data
    params: {}
- name: knowledge_base
  endpoint:
    path: /v1/knowledge/learn
    method: POST
    data_selector: data
    params: {}
- name: knowledge_base
  endpoint:
    path: /v1/knowledge/learn
    method: POST
    data_selector: data
    params: {}
- name: knowledge_base
  endpoint:
    path: /v1/knowledge/learn
    method: POST
    data_selector: data
    params: {}
- name: knowledge_base
  endpoint:
    path: /knowledge/learn
    method: POST
    data_selector: data
    params: {}
- name: knowledge_learn_web
  endpoint:
    path: /v1/knowledge/learn
    method: POST
    data_selector: data
    params: {}
- name: knowledge
  endpoint:
    path: /v1/knowledge/learn
    method: POST
    data_selector: data
    params: {}
- name: knowledge_base
  endpoint:
    path: /v1/knowledge/learn
    method: POST
    data_selector: data
    params: {}
- name: knowledge_base
  endpoint:
    path: /knowledge/learn
    method: POST
    data_selector: data
    params: {}
- name: knowledge_bases
  endpoint:
    path: /v1/knowledge
    method: GET
    data_selector: data.kbs
    params: {}
- name: knowledge_bases
  endpoint:
    path: /knowledge
    method: GET
    data_selector: data.kbs
    params:
      page: 1
      limit: 20
- name: knowledge_bases
  endpoint:
    path: /knowledge
    method: GET
    data_selector: data.kbs
    params:
      page: '1'
      limit: '20'
- name: knowledge_base
  endpoint:
    path: /v1/knowledge/kb_01H8X9QK5R2N7P3M6Z8W4Y1V5T
    method: GET
    data_selector: data
    params: {}
- name: knowledge_base
  endpoint:
    path: /v1/knowledge/kb_01H8X9QK5R2N7P3M6Z8W4Y1V5T
    method: GET
    data_selector: data
- name: knowledge_base
  endpoint:
    path: /v1/knowledge/{knowledge_base_id}
    method: GET
    data_selector: data
    params: {}
- name: knowledge_base
  endpoint:
    path: /v1/knowledge/{knowledge_base_id}
    method: GET
    data_selector: data
    params: {}
- name: knowledge_base
  endpoint:
    path: /v1/knowledge
    method: GET
    data_selector: data
    params: {}
- name: knowledge_base
  endpoint:
    path: /v1/knowledge/{knowledge_base_id}
    method: PUT
    data_selector: data
    params: {}
- name: knowledge_base
  endpoint:
    path: /v1/knowledge
    method: GET
    data_selector: data
    params: {}
- name: knowledge_base
  endpoint:
    path: /v1/knowledge
    method: GET
    data_selector: data
- name: knowledge_base
  endpoint:
    path: /knowledge/{knowledge_base_id}
    method: PUT
    data_selector: data
    params: {}
- name: knowledge_base
  endpoint:
    path: /v1/knowledge/{knowledge_base_id}
    method: DEL
    data_selector: data
    params: {}
- name: knowledge_base
  endpoint:
    path: /v1/knowledge/kb_01H8X9QK5R2N7P3M6Z8W4Y1V5T
    method: DELETE
    data_selector: data
    params: {}
- name: discover_sitemap_urls
  endpoint:
    path: /v1/knowledge/crawl
    method: POST
    data_selector: data.urls
- name: knowledge_base
  endpoint:
    path: /knowledge/{knowledge_base_id}
    method: DEL
    data_selector: data
    params: {}
- name: discover_sitemap_urls
  endpoint:
    path: /v1/knowledge/crawl
    method: POST
    data_selector: data.urls
- name: discover_sitemap_urls
  endpoint:
    path: /v1/knowledge/crawl
    method: POST
    data_selector: data.urls
    params: {}
- name: knowledge_chat
  endpoint:
    path: /v1/knowledge/chat
    method: POST
    data_selector: data
    params: {}
- name: knowledge_chat
  endpoint:
    path: /knowledge/chat
    method: POST
    data_selector: data
    params: {}
- name: discover_sitemap_urls
  endpoint:
    path: /v1/knowledge/crawl
    method: POST
    data_selector: data.urls
    params:
      url: https://example.com
- name: purchase_phone_number
  endpoint:
    path: /numbers/purchase
    method: POST
    data_selector: null
    params: {}
- name: knowledge_chat
  endpoint:
    path: /v1/knowledge/chat
    method: POST
    data_selector: data
    params: {}
- name: purchase_phone_number
  endpoint:
    path: /numbers/purchase
    method: POST
    data_selector: records
    params:
      area_code: '415'
      country_code: US
- name: knowledge_chat
  endpoint:
    path: /v1/knowledge/chat
    method: POST
    data_selector: data
    params: {}
- name: inbound_number_update
  endpoint:
    path: /v1/inbound/{phone_number}
    method: POST
    data_selector: updates
- name: purchase_phone_number
  endpoint:
    path: /numbers/purchase
    method: POST
    data_selector: data
- name: update_inbound_number_details
  endpoint:
    path: /v1/inbound/{phone_number}
    method: POST
    data_selector: updates
    params: {}
- name: inbound_number_update
  endpoint:
    path: /api-v1/post/inbound-number-update
    method: POST
    data_selector: updates
    params: {}
- name: purchase_phone_number
  endpoint:
    path: /numbers/purchase
    method: POST
    data_selector: null
    params:
      area_code: '415'
      country_code: US
- name: inbound_numbers
  endpoint:
    path: /v1/inbound
    method: GET
    data_selector: inbound_numbers
- name: update_inbound_number_details
  endpoint:
    path: /v1/inbound/{phone_number}
    method: POST
    data_selector: updates
- name: inbound_numbers
  endpoint:
    path: /inbound
    method: GET
    data_selector: inbound_numbers
    params: {}
- name: update_inbound_number_details
  endpoint:
    path: /inbound/{phone_number}
    method: POST
    data_selector: updates
    params: {}
- name: number_details
  endpoint:
    path: /v1/inbound/{phone_number}
    method: GET
    data_selector: created_at
- name: update_inbound_number
  endpoint:
    path: /api-v1/post/inbound-number-update
    method: POST
    data_selector: updates
- name: number_details
  endpoint:
    path: /v1/inbound/{phone_number}
    method: GET
    data_selector: phone_number
    params: {}
- name: inbound_numbers
  endpoint:
    path: /v1/inbound
    method: GET
    data_selector: inbound_numbers
- name: inbound_session
  endpoint:
    path: /v1/inbound/session
    method: POST
    data_selector: token
- name: inbound_numbers
  endpoint:
    path: /v1/inbound
    method: GET
    data_selector: inbound_numbers
- name: inbound_session
  endpoint:
    path: /v1/inbound/session
    method: POST
    data_selector: token
    params: {}
- name: inbound_number_details
  endpoint:
    path: /v1/inbound/{phone_number}
    method: GET
    data_selector: created_at, phone_number, prompt, webhook, voice_id, dynamic_data,
      max_duration
    params: {}
- name: blocked_numbers
  endpoint:
    path: /v1/blocked_numbers
    method: POST
    data_selector: data.blocks
    params: {}
- name: list_block_rules
  endpoint:
    path: /v1/get/blocked-numbers
    method: GET
    data_selector: data.blocks
    params: {}
- name: number_details
  endpoint:
    path: /v1/inbound/{phone_number}
    method: GET
    data_selector: records
- name: inbound_session
  endpoint:
    path: /v1/inbound/session
    method: POST
    data_selector: token
    params: {}
- name: blocked_numbers
  endpoint:
    path: /blocked_numbers
    method: POST
    data_selector: data.blocks
    params: {}
- name: list_block_rules
  endpoint:
    path: /blocked-numbers
    method: GET
    data_selector: data.blocks
    params: {}
- name: get_block_rule
  endpoint:
    path: /blocked-numbers-id
    method: GET
    data_selector: data
    params: {}
- name: delete_block_rule
  endpoint:
    path: /blocked-numbers-id
    method: DEL
    data_selector: data
    params: {}
- name: edit_block_rule
  endpoint:
    path: /blocked-numbers-id-edit
    method: POST
    data_selector: data
    params: {}
- name: blocked_numbers
  endpoint:
    path: /v1/blocked_numbers
    method: GET
    data_selector: data.blocks
- name: inbound_session
  endpoint:
    path: /v1/inbound/session
    method: POST
    data_selector: token
- name: blocked_numbers
  endpoint:
    path: /v1/blocked_numbers
    method: GET
    data_selector: data.blocks
    params:
      inbound_number: <inbound_number>
      active_only: true
- name: blocked_numbers
  endpoint:
    path: /v1/blocked_numbers
    method: POST
    data_selector: data.blocks
- name: list_block_rules
  endpoint:
    path: /v1/get/blocked-numbers
    method: GET
    data_selector: data
- name: block_rule
  endpoint:
    path: /blocked-numbers/{block_id}
    method: GET
    data_selector: data
    params: {}
- name: blocked_numbers
  endpoint:
    path: /v1/blocked_numbers
    method: POST
    data_selector: data.blocks
    params: {}
- name: list_block_rules
  endpoint:
    path: /v1/get/blocked-numbers
    method: GET
    data_selector: data.blocks
    params: {}
- name: block_rule
  endpoint:
    path: /blocked_numbers/{block_id}
    method: GET
    data_selector: data
    params: {}
- name: blocked_numbers
  endpoint:
    path: /v1/blocked_numbers
    method: GET
    data_selector: data.blocks
    params: {}
- name: delete_block_rule
  endpoint:
    path: /v1/blocked_numbers/{block_id}
    method: DEL
    data_selector: data
    params: {}
- name: delete_block_rule
  endpoint:
    path: /v1/blocked_numbers/{block_id}
    method: DELETE
    data_selector: data
    params: {}
- name: blocked_numbers
  endpoint:
    path: /v1/blocked_numbers
    method: GET
    data_selector: data.blocks
    params:
      inbound_number: '+19999999999'
      active_only: true
- name: blocked_numbers
  endpoint:
    path: /v1/blocked_numbers/{block_id}/edit
    method: POST
    data_selector: data
    params: {}
- name: block_rule
  endpoint:
    path: /v1/blocked_numbers/{block_id}
    method: GET
    data_selector: data
    params: {}
- name: block_rule
  endpoint:
    path: /v1/blocked_numbers/{block_id}
    method: GET
    data_selector: data
    params: {}
- name: blocked_numbers
  endpoint:
    path: /v1/blocked_numbers/{block_id}/edit
    method: POST
    data_selector: data
    params: {}
- name: delete_block_rule
  endpoint:
    path: /v1/blocked_numbers/{block_id}
    method: DELETE
    data_selector: data
    params: {}
- name: rename_voice
  endpoint:
    path: /v1/voices/{id}/rename
    method: PATCH
    data_selector: voice_id
    params: {}
- name: delete_block_rule
  endpoint:
    path: /v1/blocked_numbers/{block_id}
    method: DELETE
    data_selector: data
    params: {}
- name: rename_voice
  endpoint:
    path: /v1/voices/{id}/rename
    method: PATCH
    data_selector: voice_id
- name: edit_block_rule
  endpoint:
    path: /v1/blocked_numbers/{block_id}/edit
    method: POST
    data_selector: data
    params: {}
- name: voices
  endpoint:
    path: /v1/voices/{id}
    method: DEL
- name: blocked_numbers
  endpoint:
    path: /v1/blocked_numbers/{block_id}/edit
    method: POST
    data_selector: data
    params: {}
- name: delete_voice
  endpoint:
    path: /v1/voices/{id}
    method: DELETE
    data_selector: voice_id
    params: {}
- name: rename_voice
  endpoint:
    path: /v1/voices/{id}/rename
    method: PATCH
    data_selector: voice_id
    params: {}
- name: voices
  endpoint:
    path: /v1/voices
    method: GET
    data_selector: voices
- name: voices
  endpoint:
    path: /voices
    method: GET
    data_selector: voices
- name: rename_voice
  endpoint:
    path: /v1/voices/{id}/rename
    method: PATCH
    data_selector: voice_id
    params: {}
- name: voice_details
  endpoint:
    path: /v1/voices/{id}
    method: GET
    data_selector: voice
- name: voices
  endpoint:
    path: /v1/voices/{id}
    method: DEL
- name: delete_voice
  endpoint:
    path: /v1/voices/{id}
    method: DELETE
- name: voice_details
  endpoint:
    path: /v1/voices/{id}
    method: GET
    data_selector: voice
    params: {}
- name: voices
  endpoint:
    path: /v1/voices
    method: GET
    data_selector: voices
- name: generate_audio_sample
  endpoint:
    path: /v1/voices/{id}/sample
    method: POST
    data_selector: audio file
    params: {}
- name: voices
  endpoint:
    path: /v1/voices
    method: GET
    data_selector: voices
- name: generate_audio_sample
  endpoint:
    path: /v1/voices/{id}/sample
    method: POST
    data_selector: sample
- name: voice_details
  endpoint:
    path: /v1/voices/{id}
    method: GET
    data_selector: voice
- name: voice_details
  endpoint:
    path: /v1/voices/{id}
    method: GET
    data_selector: voice
- name: list_voices
  endpoint:
    path: /v1/voices
    method: GET
    data_selector: voices
- name: widget
  endpoint:
    path: /v1/widget
    method: POST
    data_selector: data
    params: {}
- name: generate_audio_sample
  endpoint:
    path: /v1/voices/{id}/sample
    method: POST
    data_selector: audio file
    params: {}
- name: widget
  endpoint:
    path: /v1/widget
    method: POST
    data_selector: data
    params: {}
- name: widgets_list
  endpoint:
    path: /v1/get/widgets
    method: GET
    data_selector: data
    params: {}
- name: generate_audio_sample
  endpoint:
    path: /v1/voices/{id}/sample
    method: POST
    data_selector: sample
- name: widgets
  endpoint:
    path: /v1/widgets
    method: GET
    data_selector: data
- name: widget
  endpoint:
    path: /v1/widget
    method: POST
    data_selector: data
    params: {}
- name: widgets
  endpoint:
    path: /widgets
    method: GET
    data_selector: data
    params: {}
- name: widget
  endpoint:
    path: /v1/widget
    method: POST
    data_selector: data
    params: {}
- name: widget
  endpoint:
    path: /v1/widget/{id}
    method: GET
    data_selector: data
- name: widgets
  endpoint:
    path: /v1/widgets
    method: GET
    data_selector: data
- name: widget
  endpoint:
    path: /v1/widget/{id}
    method: GET
    data_selector: data
    params: {}
- name: widgets
  endpoint:
    path: /widgets
    method: GET
    data_selector: data
- name: widget
  endpoint:
    path: /v1/widget/{id}
    method: GET
    data_selector: data
- name: widget
  endpoint:
    path: /v1/widget/{id}
    method: PATCH
    data_selector: data
    params: {}
- name: widget
  endpoint:
    path: /v1/widget/{id}
    method: GET
    data_selector: data
    params: {}
- name: widget
  endpoint:
    path: /v1/widget/{id}
    method: PATCH
    data_selector: data
    params: {}
- name: widget
  endpoint:
    path: /v1/widget/{id}
    method: PATCH
    data_selector: data
    params: {}
- name: widget_threads
  endpoint:
    path: /v1/widget/{id}/threads
    method: GET
    data_selector: data
- name: widget_threads
  endpoint:
    path: /widget/{id}/threads
    method: GET
    data_selector: data
    params: {}
- name: widget
  endpoint:
    path: /v1/widget/{id}
    method: PATCH
    data_selector: data
    params: {}
- name: custom_components
  endpoint:
    path: /v1/widget/custom_components
    method: GET
    data_selector: data
- name: widget_threads
  endpoint:
    path: /v1/widget/{id}/threads
    method: GET
    data_selector: data
- name: custom_components
  endpoint:
    path: /v1/widget/custom_components
    method: GET
    data_selector: data
- name: widget_threads
  endpoint:
    path: /v1/widget/{id}/threads
    method: GET
    data_selector: data
- name: custom_component
  endpoint:
    path: /v1/widget/custom_components
    method: POST
    data_selector: data
    params: {}
- name: custom_components
  endpoint:
    path: /v1/widget/custom_components
    method: GET
    data_selector: data
- name: custom_component
  endpoint:
    path: /v1/widget/custom_components
    method: POST
    data_selector: data
    params: {}
- name: custom_components
  endpoint:
    path: /v1/widget/custom_components
    method: GET
    data_selector: data
- name: custom_component
  endpoint:
    path: /v1/widget/custom_components/{id}
    method: PATCH
    data_selector: data
    params: {}
- name: custom_component
  endpoint:
    path: /v1/widget/custom_components
    method: POST
    data_selector: data
- name: custom_component
  endpoint:
    path: /v1/widget/custom_components/{id}
    method: PATCH
    data_selector: data
    params: {}
- name: custom_component
  endpoint:
    path: /v1/widget/custom_components
    method: POST
    data_selector: data
    params: {}
- name: custom_component
  endpoint:
    path: /v1/widget/custom_components
    method: DEL
    data_selector: null
    params: {}
- name: custom_component
  endpoint:
    path: /v1/widget/custom_components/{id}
    method: PATCH
    data_selector: data
- name: custom_component
  endpoint:
    path: /v1/widget/custom_components/{id}
    method: DELETE
    data_selector: status
    params: {}
- name: custom_component
  endpoint:
    path: /v1/widget/custom_components/{id}
    method: PATCH
    data_selector: data
    params: {}
- name: custom_component
  endpoint:
    path: /v1/widget/custom_components/{id}
    method: DELETE
- name: custom_tool
  endpoint:
    path: /api-v1/post/tools
    method: POST
    data_selector: status
    params: {}
- name: custom_tool
  endpoint:
    path: /tools
    method: POST
    data_selector: status
    params: {}
- name: tool
  endpoint:
    path: /api-v1/post/tools
    method: POST
- name: custom_component
  endpoint:
    path: /v1/widget/custom_components/{id}
    method: DELETE
- name: custom_tool
  endpoint:
    path: /api-v1/post/tools-tool-id
    method: POST
    data_selector: status
    params: {}
- name: custom_tool
  endpoint:
    path: /api-v1/post/tools
    method: POST
    data_selector: status
    params: {}
- name: create_custom_tool
  endpoint:
    path: /v1/tools
    method: POST
    data_selector: status
- name: Custom Tool
  endpoint:
    path: ''
    method: GET
    data_selector: ''
    params: {}
- name: tool
  endpoint:
    path: /api-v1/post/tools
    method: POST
- name: custom_tool
  endpoint:
    path: /api-v1/post/tools-tool-id
    method: POST
    data_selector: status
- name: custom_tool
  endpoint:
    path: /api-v1/get/tools
    method: GET
- name: update_custom_tool
  endpoint:
    path: /v1/tools/{tool_id}
    method: POST
    data_selector: status
    params: {}
- name: custom_tool
  endpoint:
    path: /v1/tools/{tool_id}
    method: DEL
    data_selector: status
    params: {}
- name: custom_tool
  endpoint:
    path: /api-v1/post/tools
    method: POST
- name: custom_tools
  endpoint:
    path: /v1/tools
    method: GET
    data_selector: tools
- name: custom_tools
  endpoint:
    path: /tools
    method: GET
    data_selector: tools
- name: custom_tool
  endpoint:
    path: /api-v1/get/tools
    method: GET
- name: Custom Tool
  endpoint:
    path: /v1/tools/{tool_id}
    method: GET
    data_selector: tool
- name: delete_custom_tool
  endpoint:
    path: /v1/tools/{tool_id}
    method: DELETE
- name: custom_tool
  endpoint:
    path: /v1/tools/{tool_id}
    method: GET
    data_selector: tool
    params: {}
- name: tools
  endpoint:
    path: /v1/tools
    method: GET
    data_selector: tools
- name: memory
  endpoint:
    path: /v1/memory
    method: GET
    data_selector: memories
- name: custom_tools
  endpoint:
    path: /tools
    method: GET
    data_selector: tools
- name: memory
  endpoint:
    path: /v1/memory
    method: GET
    data_selector: data.memories
    params: {}
- name: Custom Tool
  endpoint:
    path: /v1/tools/{tool_id}
    method: GET
- name: memory_details
  endpoint:
    path: /v1/memory/{memory_id}
    method: GET
    data_selector: data
    params: {}
- name: custom_tool
  endpoint:
    path: /tools/{tool_id}
    method: GET
    data_selector: tool
    params: {}
- name: memory_details
  endpoint:
    path: /v1/memory/{memory_id}
    method: GET
    data_selector: data
    params: {}
- name: memory
  endpoint:
    path: /v1/memory
    method: GET
    data_selector: memories
- name: memory
  endpoint:
    path: /v1/memory/create
    method: POST
    data_selector: data
    params: {}
- name: memory
  endpoint:
    path: /v1/memory
    method: GET
    data_selector: data.memories
    params: {}
- name: memory
  endpoint:
    path: /v1/memory/create
    method: POST
    data_selector: data
    params: {}
- name: memory_details
  endpoint:
    path: /v1/memory/{memory_id}
    method: GET
    data_selector: data
- name: memory
  endpoint:
    path: /v1/memory/{memory_id}/update
    method: POST
    data_selector: data
    params: {}
- name: memory
  endpoint:
    path: /memory/{memory_id}
    method: GET
    data_selector: data
    params: {}
- name: memory
  endpoint:
    path: /v1/memory/{memory_id}/update
    method: POST
    data_selector: data
    params: {}
- name: memory
  endpoint:
    path: /v1/memory/create
    method: POST
    data_selector: data
    params: {}
- name: enable_memory_for_inbound_number
  endpoint:
    path: /v1/memory/inbound/enable
    method: POST
    data_selector: data
    params: {}
- name: memory
  endpoint:
    path: /v1/memory/create
    method: POST
    data_selector: data
    params: {}
- name: enable_memory_inbound_number
  endpoint:
    path: /v1/memory/inbound/enable
    method: POST
    data_selector: data
    params: {}
- name: memory
  endpoint:
    path: /v1/memory
    method: GET
    data_selector: data
- name: delete_memory
  endpoint:
    path: /v1/memory/{memory_id}/delete
    method: POST
    data_selector: data
    params: {}
- name: memory
  endpoint:
    path: /v1/memory/{memory_id}/update
    method: POST
    data_selector: data
    params: {}
- name: delete_memory
  endpoint:
    path: /v1/memory/{memory_id}/delete
    method: POST
- name: enable_memory_inbound_number
  endpoint:
    path: /v1/memory/inbound/enable
    method: POST
    data_selector: data
    params: {}
- name: web_agent
  endpoint:
    path: /v1/agents
    method: POST
    data_selector: agent
    params: {}
- name: Enable Memory for Inbound Number
  endpoint:
    path: /v1/memory/inbound/enable
    method: POST
    data_selector: data
    params: {}
- name: web_agent
  endpoint:
    path: /v1/agents
    method: POST
    data_selector: agent
    params: {}
- name: agent
  endpoint:
    path: /api-v1/post/agents
    method: POST
- name: Delete Memory
  endpoint:
    path: /v1/memory/{memory_id}/delete
    method: POST
    data_selector: data
    params: {}
- name: web_agent
  endpoint:
    path: /v1/agents/{agent_id}
    method: POST
    data_selector: updates
- name: delete_memory
  endpoint:
    path: /v1/memory/{memory_id}/delete
    method: POST
    data_selector: data
    params: {}
- name: web_agent
  endpoint:
    path: /agents/{agent_id}
    method: POST
- name: agent
  endpoint:
    path: /v1/agents
    method: POST
    data_selector: agent
- name: update_agent
  endpoint:
    path: /api-v1/post/agents-id
    method: POST
    data_selector: updates
    params: {}
- name: authorize_web_agent_call
  endpoint:
    path: /v1/agents/{agent_id}/authorize
    method: POST
    data_selector: null
    params: {}
- name: agents
  endpoint:
    path: /v1/agents
    method: POST
    data_selector: agent
    params: {}
- name: calls
  endpoint:
    path: /v1/get/calls
    method: GET
    data_selector: calls
    params: {}
- name: agent
  endpoint:
    path: /post/agents
    method: POST
    data_selector: agent
    params: {}
- name: authorize_web_agent_call
  endpoint:
    path: /v1/agents/{agent_id}/authorize
    method: POST
    data_selector: token
    params: {}
- name: web_agent
  endpoint:
    path: /v1/agents/{agent_id}
    method: POST
    data_selector: updates
    params: {}
- name: delete_web_agent
  endpoint:
    path: /v1/agents/{agent_id}/delete
    method: POST
    data_selector: status
    params: {}
- name: update_web_agent_settings
  endpoint:
    path: /agents/{agent_id}
    method: POST
- name: delete_web_agent
  endpoint:
    path: /v1/agents/{agent_id}/delete
    method: POST
- name: agent_update
  endpoint:
    path: /api-v1/post/agents-id
    method: POST
    data_selector: updates
    params: {}
- name: web_agents
  endpoint:
    path: /agents
    method: GET
    data_selector: agents
- name: authorize_web_agent_call
  endpoint:
    path: /v1/agents/{agent_id}/authorize
    method: POST
    data_selector: request_data
    params: {}
- name: web_agents
  endpoint:
    path: /v1/agents
    method: GET
    data_selector: agents
- name: authorize_web_agent_call
  endpoint:
    path: /v1/agents/{agent_id}/authorize
    method: POST
    data_selector: token
- name: agents
  endpoint:
    path: /api-v1/get/agents
    method: GET
    data_selector: agents
    params: {}
- name: create_encrypted_key
  endpoint:
    path: /v1/accounts
    method: POST
    data_selector: status
- name: delete_web_agent
  endpoint:
    path: /v1/agents/{agent_id}/delete
    method: POST
    data_selector: status
- name: delete_web_agent
  endpoint:
    path: /v1/agents/{agent_id}/delete
    method: POST
    data_selector: status
    params: {}
- name: create_encrypted_key
  endpoint:
    path: /v1/accounts
    method: POST
    data_selector: encrypted_key
- name: web_agents
  endpoint:
    path: /v1/agents
    method: GET
    data_selector: agents
- name: Delete Encrypted Key
  endpoint:
    path: /v1/accounts/delete
    method: POST
    data_selector: status
- name: web_agents
  endpoint:
    path: /v1/agents
    method: GET
    data_selector: agents
- name: delete_encrypted_key
  endpoint:
    path: /v1/accounts/delete
    method: POST
    data_selector: status
    params: {}
- name: agents
  endpoint:
    path: /api-v1/get/agents
    method: GET
    data_selector: agents
    params: {}
- name: inbound_phone_numbers
  endpoint:
    path: /v1/inbound/insert
    method: POST
    data_selector: status
    params: {}
- name: create_encrypted_key
  endpoint:
    path: /v1/accounts
    method: POST
    data_selector: encrypted_key
- name: upload_inbound_phone_numbers
  endpoint:
    path: /v1/inbound/insert
    method: POST
    data_selector: status
    params: {}
- name: create_encrypted_key
  endpoint:
    path: /v1/accounts
    method: POST
    data_selector: status
- name: Delete Inbound Phone Number
  endpoint:
    path: /v1/inbound/{phone_number}/delete
    method: POST
    data_selector: status
    params: {}
- name: Delete Encrypted Key
  endpoint:
    path: /api-v1/accounts/delete
    method: POST
    data_selector: status
    params: {}
- name: delete_inbound_phone_number
  endpoint:
    path: /v1/inbound/{phone_number}/delete
    method: POST
    data_selector: status
    params: {}
- name: delete_encrypted_key
  endpoint:
    path: /v1/accounts/delete
    method: POST
    data_selector: status
    params: {}
- name: create_batch
  endpoint:
    path: /v2/batches/create
    method: POST
    data_selector: data.batch_id
- name: list_batches
  endpoint:
    path: /v2/batches
    method: GET
    data_selector: data
- name: upload_inbound_phone_numbers
  endpoint:
    path: /v1/inbound/insert
    method: POST
    data_selector: status
- name: upload_inbound_phone_numbers
  endpoint:
    path: /v1/inbound/insert
    method: POST
    data_selector: status
    params: {}
- name: create_batch
  endpoint:
    path: /v2/batches/create
    method: POST
    data_selector: data.batch_id
- name: Delete Inbound Phone Number
  endpoint:
    path: /v1/inbound/{phone_number}/delete
    method: POST
    data_selector: status
    params: {}
- name: batches
  endpoint:
    path: /v2/batches/list
    method: GET
    data_selector: data
- name: delete_inbound_phone_number
  endpoint:
    path: /v1/inbound/{phone_number}/delete
    method: POST
    data_selector: status
    params: {}
- name: batches
  endpoint:
    path: /batches/list
    method: GET
    data_selector: data
    params: {}
- name: batches
  endpoint:
    path: /v2/batches/create
    method: POST
    data_selector: data.batch_id
- name: batch
  endpoint:
    path: /v2/batches/{batch_id}
    method: GET
    data_selector: data
- name: batch
  endpoint:
    path: /v2/batches/{batch_id}
    method: GET
    data_selector: data
    params: {}
- name: batches
  endpoint:
    path: /batches/create
    method: POST
    data_selector: data.batch_id
- name: batch_logs
  endpoint:
    path: /v2/batches/{batch_id}/logs
    method: GET
    data_selector: data
- name: batches
  endpoint:
    path: /v2/batches/list
    method: GET
    data_selector: data
- name: batch_logs
  endpoint:
    path: /v2/batches/{batch_id}/logs
    method: GET
    data_selector: data
    params: {}
- name: batches
  endpoint:
    path: /batches/list
    method: GET
    data_selector: data
    params: {}
- name: stop_batch
  endpoint:
    path: /v2/batches/{batch_id}/stop
    method: POST
    data_selector: data
    params: {}
- name: batch
  endpoint:
    path: /v2/batches/{batch_id}
    method: GET
    data_selector: data
- name: stop_batch
  endpoint:
    path: /v2/batches/{batch_id}/stop
    method: POST
    data_selector: null
    params: {}
- name: batch
  endpoint:
    path: /v2/batches/{batch_id}
    method: GET
    data_selector: data
    params: {}
- name: prompts
  endpoint:
    path: /v1/prompts
    method: GET
    data_selector: prompts
- name: batch_logs
  endpoint:
    path: /v2/batches/{batch_id}/logs
    method: GET
    data_selector: data
    params: {}
- name: prompts
  endpoint:
    path: /v1/prompts
    method: GET
    data_selector: prompts
- name: batch_logs
  endpoint:
    path: /batches/{batch_id}/logs
    method: GET
- name: prompt_details
  endpoint:
    path: /v1/prompts/{prompt_id}
    method: GET
    data_selector: prompt
- name: stop_batch
  endpoint:
    path: /v2/batches/{batch_id}/stop
    method: POST
    data_selector: data
    params: {}
- name: prompts
  endpoint:
    path: /v1/prompts/{prompt_id}
    method: GET
    data_selector: prompt
    params: {}
- name: stop_batch
  endpoint:
    path: /v2/batches/{batch_id}/stop
    method: POST
    data_selector: data
    params: {}
- name: prompts
  endpoint:
    path: /v1/prompts
    method: POST
    data_selector: prompt
    params: {}
- name: prompts
  endpoint:
    path: /v1/prompts
    method: GET
    data_selector: prompts
- name: prompts
  endpoint:
    path: /v1/prompts
    method: POST
    data_selector: prompt
    params: {}
- name: prompts
  endpoint:
    path: /v1/prompts
    method: GET
    data_selector: prompts
- name: account
  endpoint:
    path: /v1/me
    method: GET
    data_selector: status
- name: prompts
  endpoint:
    path: /api-v1/get/prompts
    method: GET
    data_selector: prompts
- name: prompt_details
  endpoint:
    path: /api-v1/get/prompts/{prompt_id}
    method: GET
    data_selector: prompt
- name: account_details
  endpoint:
    path: /v1/me
    method: GET
    data_selector: status
    params: {}
- name: prompt
  endpoint:
    path: /prompts/{prompt_id}
    method: GET
    data_selector: prompt
    params: {}
- name: create_organization
  endpoint:
    path: /v1/orgs/create
    method: POST
    data_selector: data
    params: {}
- name: get_organization
  endpoint:
    path: /v1/get/orgs
    method: GET
    data_selector: data
    params: {}
- name: prompts
  endpoint:
    path: /v1/prompts
    method: POST
    data_selector: prompt
    params: {}
- name: create_organization
  endpoint:
    path: /orgs/create
    method: POST
    data_selector: data
    params: {}
- name: get_organization
  endpoint:
    path: /orgs
    method: GET
    data_selector: data
    params: {}
- name: prompts
  endpoint:
    path: /api-v1/post/prompts
    method: POST
    data_selector: prompt
    params: {}
- name: organizations
  endpoint:
    path: /v1/orgs
    method: DEL
    data_selector: data
- name: account_details
  endpoint:
    path: /v1/me
    method: GET
    data_selector: ''
- name: delete_organization
  endpoint:
    path: /v1/orgs/{org_id}
    method: DELETE
    data_selector: data
    params:
      delete_confirm: <string>
- name: account_details
  endpoint:
    path: /v1/me
    method: GET
    data_selector: status
    params: {}
- name: organization
  endpoint:
    path: /v1/orgs/{org_id}
    method: GET
    data_selector: data
- name: organization
  endpoint:
    path: /v1/orgs/create
    method: POST
    data_selector: data
    params: {}
- name: organization
  endpoint:
    path: /orgs/{org_id}
    method: GET
    data_selector: data
    params: {}
- name: create_organization
  endpoint:
    path: /orgs/create
    method: POST
    data_selector: data
    params: {}
- name: organization_members
  endpoint:
    path: /v1/orgs/{org_id}/members
    method: GET
    data_selector: data
- name: organization_members
  endpoint:
    path: /orgs/{org_id}/members
    method: GET
    data_selector: data
    params: {}
- name: delete_organization
  endpoint:
    path: /v1/orgs/{org_id}
    method: DELETE
    data_selector: data
    params: {}
- name: delete_organization
  endpoint:
    path: /v1/orgs/{org_id}
    method: DELETE
    data_selector: null
    params:
      delete_confirm: <string>
- name: organization_current_service_version
  endpoint:
    path: /v1/orgs/{org_id}/versions/{service}/current
    method: GET
    data_selector: data.version
- name: organization
  endpoint:
    path: /v1/orgs/{org_id}
    method: GET
    data_selector: data
    params: {}
- name: organization_current_service_version
  endpoint:
    path: /v1/orgs/{org_id}/versions/{service}/current
    method: GET
    data_selector: data.version
    params: {}
- name: organization_service_versions
  endpoint:
    path: /v1/orgs/{org_id}/versions/{service}/list
    method: GET
    data_selector: data.versions
- name: organization
  endpoint:
    path: /v1/orgs/{org_id}
    method: GET
    data_selector: data
    params: {}
- name: list_organization_service_versions
  endpoint:
    path: /v1/orgs/{org_id}/versions/{service}/list
    method: GET
- name: organization_members
  endpoint:
    path: /v1/orgs/{org_id}/members
    method: GET
    data_selector: data
- name: Update Organization's Service Version
  endpoint:
    path: /v1/orgs/{org_id}/versions/{service}
    method: PATCH
    data_selector: data
- name: organization_members
  endpoint:
    path: /orgs/{org_id}/members
    method: GET
    data_selector: data
- name: update_organization_service_version
  endpoint:
    path: /v1/orgs/{org_id}/versions/{service}
    method: PATCH
    data_selector: data
    params: {}
- name: current_service_version
  endpoint:
    path: /v1/orgs/{org_id}/versions/{service}/current
    method: GET
    data_selector: data.version
- name: Update Organization Members
  endpoint:
    path: /v1/orgs/{org_id}/members
    method: PATCH
    data_selector: data
- name: organization_current_service_version
  endpoint:
    path: /v1/orgs/{org_id}/versions/{service}/current
    method: GET
    data_selector: data.version
    params: {}
- name: update_organization_members
  endpoint:
    path: /v1/orgs/{org_id}/members
    method: PATCH
    data_selector: 'null'
    params: {}
- name: organization_service_versions
  endpoint:
    path: /v1/orgs/{org_id}/versions/{service}/list
    method: GET
    data_selector: data.versions
- name: organization_member_permissions
  endpoint:
    path: /v1/orgs/{org_id}/members/permissions
    method: PATCH
    data_selector: data.newPermissions
    params: {}
- name: List Organization's Service Versions
  endpoint:
    path: /v1/orgs/{org_id}/versions/{service}/list
    method: GET
    data_selector: data.versions
- name: update_organization_member_permissions
  endpoint:
    path: /v1/orgs/{org_id}/members/permissions
    method: PATCH
    data_selector: data.newPermissions
    params: {}
- name: organization_service_version
  endpoint:
    path: /v1/orgs/{org_id}/versions/{service}
    method: PATCH
    data_selector: data
- name: organization_properties
  endpoint:
    path: /v1/orgs/{org_id}/properties
    method: PATCH
    data_selector: data
- name: organization_service_version
  endpoint:
    path: /v1/orgs/{org_id}/versions/{service}
    method: PATCH
    data_selector: data
    params: {}
- name: organization_properties
  endpoint:
    path: /v1/orgs/{org_id}/properties
    method: PATCH
    data_selector: data
    params: {}
- name: organization_members
  endpoint:
    path: /v1/orgs/{org_id}/members
    method: PATCH
    data_selector: data
    params: {}
- name: user_organization_memberships
  endpoint:
    path: /v1/orgs/self/memberships
    method: GET
    data_selector: data
- name: organization_members
  endpoint:
    path: /v1/orgs/{org_id}/members
    method: PATCH
    data_selector: data
    params: {}
- name: user_organization_memberships
  endpoint:
    path: /v1/orgs/self/memberships
    method: GET
    data_selector: data
    params: {}
- name: organization_member_permissions
  endpoint:
    path: /v1/orgs/{org_id}/members/permissions
    method: PATCH
    data_selector: data.newPermissions
    params: {}
- name: leave_organization
  endpoint:
    path: /v1/orgs/self/leave
    method: DELETE
    data_selector: data
    params: {}
- name: update_organization_member_permissions
  endpoint:
    path: /v1/orgs/{org_id}/members/permissions
    method: PATCH
    data_selector: data.newPermissions
    params: {}
- name: leave_organization
  endpoint:
    path: /v1/orgs/self/leave
    method: DELETE
    data_selector: data
    params:
      org_id: <string>
- name: organization_properties
  endpoint:
    path: /v1/orgs/{org_id}/properties
    method: PATCH
    data_selector: data
    params: {}
- name: organization_properties
  endpoint:
    path: /orgs/{org_id}/properties
    method: PATCH
    data_selector: data
    params: {}
- name: organization_billing
  endpoint:
    path: /v1/orgs/{org_id}/billing
    method: GET
    data_selector: data
- name: organization_billing_information
  endpoint:
    path: /v1/orgs/{org_id}/billing
    method: GET
    data_selector: data
    params:
      org_id: string
- name: user_organization_memberships
  endpoint:
    path: /v1/orgs/self/memberships
    method: GET
    data_selector: data
- name: user_organization_memberships
  endpoint:
    path: /v1/orgs/self/memberships
    method: GET
    data_selector: data
    params: {}
- name: organization_billing_refill
  endpoint:
    path: /v1/orgs/{org_id}/billing/refill
    method: GET
    data_selector: data
- name: Leave Organization
  endpoint:
    path: /v1/orgs/self/leave
    method: DELETE
    data_selector: data
- name: organization_billing_refill
  endpoint:
    path: /v1/orgs/{org_id}/billing/refill
    method: GET
    data_selector: data
    params: {}
- name: leave_organization
  endpoint:
    path: /v1/orgs/self/leave
    method: DELETE
    data_selector: null
    params:
      org_id: <string>
- name: sms_numbers
  endpoint:
    path: /sms/numbers
    method: GET
    data_selector: data
- name: organization_billing_information
  endpoint:
    path: /v1/orgs/{org_id}/billing
    method: GET
    data_selector: data
- name: sms_numbers
  endpoint:
    path: /sms/numbers
    method: GET
    data_selector: data
- name: organization_billing_information
  endpoint:
    path: /v1/orgs/{org_id}/billing
    method: GET
    data_selector: data
    params: {}
- name: organization_billing_refill
  endpoint:
    path: /v1/orgs/{org_id}/billing/refill
    method: GET
    data_selector: data
- name: update_sms_configuration
  endpoint:
    path: /sms/number/update
    method: POST
    data_selector: data.sms_config
- name: list_sms_numbers
  endpoint:
    path: /sms-numbers
    method: GET
    data_selector: data
- name: send_sms_message
  endpoint:
    path: /sms/send
    method: POST
    data_selector: data
- name: create_sms_conversation
  endpoint:
    path: /sms/create
    method: POST
    data_selector: data
- name: list_conversations
  endpoint:
    path: /sms-conversations
    method: GET
    data_selector: data
- name: organization_billing_refill
  endpoint:
    path: /v1/orgs/{org_id}/billing/refill
    method: GET
    data_selector: data
    params:
      org_id: string
- name: sms_update
  endpoint:
    path: /v1/sms/number/update
    method: POST
    data_selector: data.sms_config
    params: {}
- name: sms_numbers
  endpoint:
    path: /v1/sms/numbers
    method: GET
    data_selector: data
- name: send_sms
  endpoint:
    path: /v1/sms/send
    method: POST
    data_selector: data
    params: {}
- name: sms_numbers
  endpoint:
    path: /v1/sms/numbers
    method: GET
    data_selector: data
- name: send_sms_message
  endpoint:
    path: /sms/send
    method: POST
    data_selector: data
    params: {}
- name: update_sms_configuration
  endpoint:
    path: /v1/sms/number/update
    method: POST
    data_selector: data.sms_config
    params: {}
- name: create_sms_conversation
  endpoint:
    path: /v1/sms/create
    method: POST
    data_selector: data
    params: {}
- name: sms_update
  endpoint:
    path: /v1/sms/number/update
    method: POST
    data_selector: data.sms_config
    params: {}
- name: create_sms_conversation
  endpoint:
    path: /v1/sms/create
    method: POST
    data_selector: data
    params: {}
- name: send_sms
  endpoint:
    path: /v1/sms/send
    method: POST
    data_selector: data
    params: {}
- name: sms_conversations
  endpoint:
    path: /v1/sms/conversations
    method: GET
    data_selector: data
- name: send_sms
  endpoint:
    path: /sms/send
    method: POST
    data_selector: data
    params: {}
- name: sms_conversations
  endpoint:
    path: /v1/sms/conversations
    method: GET
    data_selector: data
    params:
      page: '1'
      pageSize: '25'
- name: create_sms_conversation
  endpoint:
    path: /v1/sms/create
    method: POST
    data_selector: data
    params: {}
- name: conversation
  endpoint:
    path: /sms/conversations/{id}
    method: GET
    data_selector: data
    params: {}
- name: conversation
  endpoint:
    path: /sms/conversations/{id}
    method: GET
    data_selector: data
    params:
      id: required
- name: create_sms_conversation
  endpoint:
    path: /v1/sms/create
    method: POST
    data_selector: data
    params: {}
- name: sms_conversations
  endpoint:
    path: /v1/sms/conversations
    method: GET
    data_selector: data
- name: sms_conversation
  endpoint:
    path: /v1/sms/conversations/{conversation_id}
    method: PATCH
    data_selector: conversation
    params: {}
- name: update_sms_conversation
  endpoint:
    path: /v1/sms/conversations/{conversation_id}
    method: PATCH
    data_selector: conversation
    params: {}
- name: sms_conversations
  endpoint:
    path: /v1/sms/conversations
    method: GET
    data_selector: data
    params:
      page: 1
      pageSize: 25
- name: delete_messages
  endpoint:
    path: /sms/conversations/{id}/messages
    method: DELETE
    data_selector: data
    params: {}
- name: conversation
  endpoint:
    path: /sms/conversations/{id}
    method: GET
    data_selector: data
    params: {}
- name: delete_messages_from_conversation
  endpoint:
    path: /v1/sms/conversations/{id}/messages
    method: DELETE
    data_selector: data
    params: {}
- name: conversation
  endpoint:
    path: /sms/conversations/{id}
    method: GET
    data_selector: data
- name: delete_conversation
  endpoint:
    path: /sms/conversations/{id}
    method: DEL
    data_selector: data
- name: update_sms_conversation
  endpoint:
    path: /sms/conversations/{conversation_id}
    method: PATCH
    data_selector: conversation
- name: delete_conversation
  endpoint:
    path: /v1/sms/conversations/{id}
    method: DELETE
    data_selector: data.message
    params: {}
- name: sms_conversation
  endpoint:
    path: /v1/sms/conversations/{conversation_id}
    method: PATCH
    data_selector: conversation
    params: {}
- name: sms_conversation_analysis
  endpoint:
    path: /v1/sms/analyze
    method: POST
    data_selector: data
    params: {}
- name: delete_messages
  endpoint:
    path: /sms/conversations/{id}/messages
    method: DELETE
    data_selector: data
    params: {}
- name: sms_analysis
  endpoint:
    path: /sms/analyze
    method: POST
    data_selector: data
    params: {}
- name: delete_messages_from_conversation
  endpoint:
    path: /v1/sms/conversations/{id}/messages
    method: DELETE
    data_selector: data
    params: {}
- name: Delete Conversation
  endpoint:
    path: /sms/conversations/{id}
    method: DELETE
- name: custom_dialing_pool
  endpoint:
    path: /v1/custom-dialing-pool
    method: GET
    data_selector: data
    params: {}
- name: list_custom_dialing_pools
  endpoint:
    path: /v1/custom-dialing-pools
    method: GET
    data_selector: data
    params: {}
- name: create_custom_dialing_pool
  endpoint:
    path: /v1/custom-dialing-pools
    method: POST
    data_selector: data
    params: {}
- name: update_custom_dialing_pool
  endpoint:
    path: /v1/custom-dialing-pool-update
    method: POST
    data_selector: data
    params: {}
- name: delete_conversation
  endpoint:
    path: /v1/sms/conversations/{id}
    method: DELETE
    data_selector: data
    params: {}
- name: sms_conversation_analysis
  endpoint:
    path: /sms/analyze
    method: POST
    data_selector: data
    params: {}
- name: custom_dialing_pool
  endpoint:
    path: /custom-dialing-pool/{pool_id}
    method: GET
    data_selector: data
    params: {}
- name: list_custom_dialing_pools
  endpoint:
    path: /custom-dialing-pools
    method: GET
    data_selector: data
    params: {}
- name: sms_conversation_analysis
  endpoint:
    path: /v1/sms/analyze
    method: POST
    data_selector: data
    params: {}
- name: custom_dialing_pools
  endpoint:
    path: /custom-dialing-pools
    method: GET
    data_selector: data
- name: custom_dialing_pools
  endpoint:
    path: /custom-dialing-pools
    method: GET
    data_selector: data
- name: custom_dialing_pool
  endpoint:
    path: /custom-dialing-pool
    method: GET
    data_selector: data
    params: {}
- name: list_custom_dialing_pools
  endpoint:
    path: /custom-dialing-pools
    method: GET
    data_selector: data
    params: {}
- name: create_custom_dialing_pool
  endpoint:
    path: /custom-dialing-pools
    method: POST
    data_selector: data
    params: {}
- name: update_custom_dialing_pool
  endpoint:
    path: /custom-dialing-pool-update
    method: POST
    data_selector: data
    params: {}
- name: custom_dialing_pool
  endpoint:
    path: /custom-dialing-pools
    method: POST
    data_selector: data
    params: {}
- name: list_custom_dialing_pools
  endpoint:
    path: /get/custom-dialing-pools
    method: GET
    data_selector: data
    params: {}
- name: custom_dialing_pool
  endpoint:
    path: /custom-dialing-pool
    method: GET
    data_selector: data
    params: {}
- name: list_custom_dialing_pools
  endpoint:
    path: /custom-dialing-pools
    method: GET
    data_selector: data
    params: {}
- name: custom_dialing_pool
  endpoint:
    path: /v1/custom-dialing-pools
    method: POST
    data_selector: data
    params: {}
- name: custom_dialing_pool
  endpoint:
    path: /custom-dialing-pools
    method: GET
    data_selector: data
- name: custom_dialing_pool
  endpoint:
    path: /custom-dialing-pools
    method: GET
    data_selector: data
- name: custom_dialing_pools
  endpoint:
    path: /custom-dialing-pools
    method: GET
    data_selector: data
- name: custom_dialing_pool
  endpoint:
    path: /v1/custom-dialing-pools/{pool_id}/update
    method: POST
    data_selector: data
    params: {}
- name: custom_dialing_pool
  endpoint:
    path: /custom-dialing-pools
    method: POST
    data_selector: data
- name: personas
  endpoint:
    path: /api-v1/get/personas
    method: GET
    data_selector: data
    params: {}
- name: personas
  endpoint:
    path: /v1/personas
    method: GET
    data_selector: data
- name: custom_dialing_pool
  endpoint:
    path: /custom-dialing-pools
    method: POST
    data_selector: data
    params: {}
- name: list_custom_dialing_pools
  endpoint:
    path: /custom-dialing-pools
    method: GET
    data_selector: data
    params: {}
- name: get_custom_dialing_pool
  endpoint:
    path: /custom-dialing-pool
    method: GET
    data_selector: data
    params: {}
- name: update_custom_dialing_pool
  endpoint:
    path: /custom-dialing-pool-update
    method: POST
    data_selector: data
    params: {}
- name: customer_support_agent
  endpoint:
    path: /data/titles/customer_support_agent
    method: GET
    data_selector: data
- name: sales_representative
  endpoint:
    path: /data/titles/sales_representative
    method: GET
    data_selector: data
- name: custom_dialing_pool
  endpoint:
    path: /custom-dialing-pools
    method: GET
- name: update_custom_dialing_pool
  endpoint:
    path: /custom-dialing-pool-update
    method: POST
- name: personas
  endpoint:
    path: /api-v1/get/personas
    method: GET
    data_selector: data
    params:
      page: '1'
- name: persona
  endpoint:
    path: /v1/personas/{persona_id}
    method: GET
    data_selector: data
- name: custom_dialing_pool
  endpoint:
    path: /v1/custom-dialing-pools/{pool_id}/update
    method: POST
    data_selector: data
    params: {}
- name: persona
  endpoint:
    path: /v1/personas/{persona_id}
    method: GET
    data_selector: data
    params: {}
- name: personas
  endpoint:
    path: /api-v1/get/personas
    method: GET
    data_selector: data
- name: persona
  endpoint:
    path: /api-v1/get/personas-id
    method: GET
    data_selector: data
- name: personas
  endpoint:
    path: /v1/personas
    method: GET
    data_selector: data
- name: personas
  endpoint:
    path: /api-v1/get/personas
    method: GET
- name: data
  endpoint:
    path: /data
    method: GET
    data_selector: data
    params: {}
- name: personas
  endpoint:
    path: /v1/personas
    method: POST
    data_selector: data
    params: {}
- name: personas
  endpoint:
    path: /api-v1/get/personas
    method: GET
    data_selector: data
    params:
      page: 1
- name: persona
  endpoint:
    path: /api-v1/post/personas
    method: POST
    data_selector: data
    params: {}
- name: get_persona
  endpoint:
    path: /api-v1/get/personas-id
    method: GET
    data_selector: data
    params: {}
- name: update_persona
  endpoint:
    path: /api-v1/patch/personas-id
    method: PATCH
    data_selector: data
    params: {}
- name: persona
  endpoint:
    path: /v1/personas/{persona_id}
    method: GET
    data_selector: data
- name: persona
  endpoint:
    path: /v1/personas/{persona_id}
    method: GET
    data_selector: data
- name: personas
  endpoint:
    path: /api-v1/get/personas
    method: GET
    data_selector: data
    params: {}
- name: update_persona
  endpoint:
    path: /api-v1/post/personas
    method: PATCH
    data_selector: data
    params: {}
- name: persona
  endpoint:
    path: /api-v1/get/personas-id
    method: GET
    data_selector: data
- name: personas
  endpoint:
    path: /v1/personas/{persona_id}
    method: PATCH
    data_selector: data
    params: {}
- name: persona
  endpoint:
    path: /v1/personas
    method: POST
    data_selector: data
- name: update_persona
  endpoint:
    path: /api-v1/patch/personas-id
    method: PATCH
    data_selector: data
- name: create_persona
  endpoint:
    path: /api-v1/post/personas
    method: POST
    data_selector: data
- name: delete_persona
  endpoint:
    path: /api-v1/delete/personas-id
    method: DELETE
    data_selector: data
- name: create_persona
  endpoint:
    path: /v1/personas
    method: POST
    data_selector: data
    params: {}
- name: list_personas
  endpoint:
    path: /v1/get/personas
    method: GET
    data_selector: data
    params: {}
- name: persona
  endpoint:
    path: /v1/personas/{persona_id}
    method: DELETE
- name: persona
  endpoint:
    path: /api-v1/post/personas
    method: POST
    data_selector: data
    params: {}
- name: delete_persona
  endpoint:
    path: /v1/personas/{persona_id}
    method: DELETE
    data_selector: data
    params:
      force: 'false'
- name: personas
  endpoint:
    path: /api-v1/get/personas
    method: GET
    data_selector: data
- name: update_persona
  endpoint:
    path: /api-v1/post/update_pathways
    method: PATCH
    data_selector: data
- name: list_persona_versions
  endpoint:
    path: /v1/personas/{persona_id}/versions
    method: GET
    data_selector: data
- name: update_persona
  endpoint:
    path: /v1/personas/{persona_id}
    method: PATCH
    data_selector: data
    params: {}
- name: list_persona_versions
  endpoint:
    path: /v1/personas/{persona_id}/versions
    method: GET
    data_selector: data
    params: {}
- name: update_persona
  endpoint:
    path: /api-v1/patch/personas-id
    method: PATCH
    data_selector: data
    params: {}
- name: create_persona
  endpoint:
    path: /api-v1/post/personas
    method: POST
    data_selector: data
    params: {}
- name: delete_persona
  endpoint:
    path: /api-v1/delete/personas-id
    method: DELETE
    data_selector: data
    params: {}
- name: promote_persona_version
  endpoint:
    path: /v1/personas/{persona_id}/versions/promote
    method: POST
- name: persona
  endpoint:
    path: /v1/personas/{persona_id}
    method: DELETE
    data_selector: data
    params: {}
- name: promote_persona_version
  endpoint:
    path: /v1/personas/{persona_id}/versions/promote
    method: POST
- name: delete_persona
  endpoint:
    path: /v1/personas/{persona_id}
    method: DELETE
    data_selector: data
    params:
      force: 'false'
- name: persona
  endpoint:
    path: /api-v1/post/personas-id-versions-promote
    method: POST
    data_selector: data
- name: personas_versions
  endpoint:
    path: /v1/personas/{persona_id}/versions
    method: GET
    data_selector: data
- name: specific_persona_version
  endpoint:
    path: /v1/personas/{persona_id}/versions/{version_id}
    method: GET
- name: list_persona_versions
  endpoint:
    path: /personas/{persona_id}/versions
    method: GET
    data_selector: data
- name: Get Specific Persona Version
  endpoint:
    path: /v1/personas/{persona_id}/versions/{version_id}
    method: GET
- name: promote_persona_version
  endpoint:
    path: /v1/personas/{persona_id}/versions/promote
    method: POST
- name: citation_schemas
  endpoint:
    path: /api-v1/get/citation-schemas-list
    method: GET
    data_selector: data
- name: promote_persona_version
  endpoint:
    path: /v1/personas/{persona_id}/versions/promote
    method: POST
- name: citation_schemas
  endpoint:
    path: /citation_schemas/list
    method: GET
    data_selector: data
- name: persona
  endpoint:
    path: /api-v1/post/personas-id-versions-promote
    method: POST
    data_selector: data
    params: {}
- name: citation_schemas
  endpoint:
    path: /api-v1/get/citation-schemas-list
    method: GET
    data_selector: data
- name: specific_persona_version
  endpoint:
    path: /v1/personas/{persona_id}/versions/{version_id}
    method: GET
    data_selector: data
    params: {}
- name: citation_schema
  endpoint:
    path: /citation_schemas/
    method: GET
    data_selector: data
    params:
      id: required
- name: Get Specific Persona Version
  endpoint:
    path: /v1/personas/{persona_id}/versions/{version_id}
    method: GET
- name: citation_schema
  endpoint:
    path: /v1/citation_schemas/
    method: POST
    data_selector: data
    params: {}
- name: citation_schemas
  endpoint:
    path: /api-v1/get/citation-schemas-list
    method: GET
    data_selector: data
- name: citation_schemas
  endpoint:
    path: /citation_schemas/list
    method: GET
    data_selector: data
    params: {}
- name: citation_schema
  endpoint:
    path: /api-v1/get/citation-schemas-list
    method: GET
    data_selector: data
    params: {}
- name: update_citation_schema
  endpoint:
    path: /api-v1/patch/citation-schemas
    method: PATCH
    data_selector: status
    params: {}
- name: citation_schemas
  endpoint:
    path: /v1/citation_schemas/
    method: GET
    data_selector: data
    params: {}
- name: citation_schema
  endpoint:
    path: /citation_schemas
    method: PATCH
- name: citation_schema
  endpoint:
    path: /citation_schemas/
    method: GET
    data_selector: data
    params:
      id: string
- name: backfill_citation_schema
  endpoint:
    path: /v1/citation_schemas/backfill
    method: POST
    data_selector: result
    params: {}
- name: citation_schema
  endpoint:
    path: /v1/citation_schemas
    method: POST
    data_selector: data
    params: {}
- name: citation_schema
  endpoint:
    path: /api-v1/get/citation-schemas-id
    method: GET
    data_selector: data
    params: {}
- name: update_citation_schema
  endpoint:
    path: /api-v1/patch/citation-schemas
    method: PATCH
    data_selector: data
    params: {}
- name: backfill
  endpoint:
    path: /citation_schemas/backfill
    method: POST
    data_selector: result
    params: {}
- name: status
  endpoint:
    path: /citation_schemas/backfill/status/{workflow_id}
    method: GET
    data_selector: result
    params: {}
- name: citation_schema
  endpoint:
    path: /v1/citation_schemas/
    method: PATCH
    data_selector: data
    params: {}
- name: citation_schemas
  endpoint:
    path: /v1/citation_schemas
    method: PATCH
    data_selector: data
    params:
      id: <string>
- name: backfill_citation_schema
  endpoint:
    path: /v1/citation_schemas/backfill
    method: POST
    data_selector: result
    params: {}
- name: citation_schemas_backfill
  endpoint:
    path: /citation_schemas/backfill
    method: POST
    data_selector: result
    params: {}
- name: citation_schemas_backfill_status
  endpoint:
    path: /citation_schemas/backfill/status/{workflow_id}
    method: GET
    data_selector: result
    params: {}
notes:
- Bland is fully self hosted, meaning your data stays entirely secure from end-to-end.
- We have the lowest latency on the planet, making your calls sound human.
- Authorization header must include a valid token.
- Uses OAuth2 with refresh token — requires setup of connected app in Bland AI
- Some objects may return nulls in deeply nested fields
- You can set your from number in the API request - this will need to be a number
  owned by that Twilio account (and not one purchased through Bland).
- By default, we’ll send calls from a randomly selected number in the specified Twilio
  account if a from is not specified.
- Webhook node enables outbound API requests during a live call.
- Authorization can be configured as None, Bearer, or Basic.
- Column names cannot contain spaces since they are used as variables in pathways.
  Use underscores or camelCase instead.
- Webhook parameter sends data after the call completes.
- For live events during the call, check out the webhook_events parameter.
- Bland webhooks are signed with a secret key to ensure that they are not tampered
  with in transit.
- You must create a webhook signing secret in the Account Settings in the Dev Portal.
- Use personas programmatically through the Bland API for automated workflows
- The ID of the widget you want to use on your website is required.
- Enterprise accounts may be eligible for custom pricing.
- By default, Bland customers can dispatch 100 calls/day before hitting rate limits.
- Enterprise customers start at 20,000 calls per hour, and 100,000 calls per day.
- Citations will only be processed on calls with a status of “completed”. Calls that
  are unanswered, busy, or fail for other reasons will not generate citation data.
- The scheduling node requires a webhook endpoint that can provide a flat array of
  dates in ISO format representing available time slots for the caller to choose from.
- The scheduling node will expect a response of a flat array of dates in ISO format.
- Requires setup of connected app in Bland
- Warm Transfer requires an enterprise account due to its advanced call routing and
  management capabilities.
- Each SMS will cost $0.02.
- Phone numbers can be attached independently for inbound and outbound routing via
  the API.
- All requests must conform to the expected schema; invalid payloads will be rejected
  with a 400 response.
- Choose OIDC for simpler setup and modern authentication, or SAML for enterprise
  compliance and legacy system compatibility.
- Bland supports both OIDC and SAML protocols.
- OIDC is recommended for simpler setup.
- Users signing in via SSO still need to verify their phone number during first-time
  setup
- SSO users are automatically added to your organization
- Each email domain can only be configured for one organization
- Existing users are automatically converted to SSO on first SSO login
- JWT signatures eliminate the risks of shared secrets.
- Unique 'jti' prevents token reuse.
- The phone number must be in E.164 format.
- JWT signatures eliminate risks through asymmetric cryptography
- 'Select a model to use for your call. Options: `base` or `turbo`.'
- Default language is `en-US`.
- By default, the agent starts talking as soon as the call connects.
- Uses OAuth2 with refresh token — requires setup of connected app in Bland
- Authorization header must be included in requests
- A valid Bland API key is required for authorization.
- A valid Bland API key is required, located in the organization portal.
- Requires authorization in the header
- 'Each question should be an array with two elements: the question text and the expected
  answer type.'
- Call ended successfully.
- API requires OAuth2 authentication.
- Uses OAuth2 with refresh token — requires setup of connected app in api
- Requires authorization header for API calls
- Webhooks may take up to a minute to fire after the call ends while the call audio
  is processed.
- Determinations are based on audio from the first five seconds of the phone call.
- The call was a conversation between a hotel booking service assistant and a customer.
- Use authorization header for access
- The API returns conversation analysis for calls.
- Response includes both corrected and aligned transcripts.
- Requires setup of OAuth2 connected app in the pizza-order API
- Ensure proper permissions are granted for the token
- Uses OAuth2 with refresh token — requires setup of connected app in pizza-order
  API
- Authorization header is required for requests
- Your API key for authentication is required.
- Must provide an array of URLs to scrape (maximum 100 URLs).
- Must provide an array of URLs to scrape (maximum 100 URLs)
- Requires setup of connected app in API
- When the call ends, we’ll send the call details in a POST request to the specified
  webhook URL.
- $15/mo. subscription using your stored payment method.
- Requires authorization token in header
- Use 'phone_number' as a path parameter in the endpoint.
- Use this to provide a more natural, seamless, engaging experience for the conversation.
- Create a session token that can be used to pass variables to inbound calls via SIP
  headers.
- Blocking can apply globally or to specific inbound lines.
- Session tokens have a default lifetime of 1 hour.
- Permanently delete a block rule.
- You can only update fields like reason or is_active. Phone numbers and scope (global/inbound)
  are immutable after creation.
- The voice_id must be provided in the URL and the name in the request body.
- The 'id' of the voice to update is required.
- Authorization header should contain the token
- Character limit for text is 200 characters.
- The voice ID must be provided in the endpoint.
- Ratings are under development and may show incomplete or inaccurate data.
- Authorization header must include a valid token
- Authorization header must be included for requests.
- Character limit for text content is 200 characters.
- Authorization token must be included in the header.
- Rate limit for messages minimum is 0.
- This endpoint does not return 404 if no threads exist; it returns an empty array
  instead.
- Your API key for authentication.
- Requires authorization token in the header
- Uses OAuth2 with authorization header
- Authorization header is required for API calls.
- Descriptive two to three-word names are preferred.
- Authorization is required for accessing the tools API
- Ensure to replace <authorization> with a valid token.
- Choosing too similar of names to the default tools could cause the AI to select
  the wrong one, so descriptive two to three-word names are preferred.
- Authorization must be included in the header.
- Authorization header is required to access the API.
- Names cannot share reserved words like 'input', 'speak', 'transfer', etc.
- Books the appointment. Can only be used once.
- Missing Name
- The inbound phone number must already exist in your account before enabling memory
  functionality
- Once enabled, all incoming calls to this number will automatically be tracked and
  organized in the associated memory
- 'This action is irreversible. Deleting a memory will permanently remove: The memory
  itself and all its metadata, All user entries and their associated data, All call
  associations and summaries, Any custom metadata and summaries.'
- Authorization header is required.
- The maximum duration that calls to your agent can last before being automatically
  terminated is 30 seconds.
- Authorization header must be included in requests.
- This action is irreversible. Deleting a memory will permanently remove all associated
  data.
- Set a webhook URL to receive call data after the web call completes.
- The maximum duration that calls to your agent can last is 30 seconds.
- Each agent can have various customizable properties including voice and prompt.
- Authorization and encrypted key are required in the headers.
- Authorization token is required in the header for API requests
- Requires authorization and encrypted key in headers
- Authorization is required for all requests.
- Authorization and encrypted_key are required in the header
- Remove an inbound number that was uploaded through your own Twilio account.
- Requires authorization header for access
- 'Must include at least one of: ''task'' or ''pathway_id'' in global object.'
- Authorization header is required for authentication.
- The organization’s plan defaults to 'starter'.
- The organization type defaults to 'normal'.
- KYC level defaults to 0.
- Authorization token is required in the header.
- Replace {org_id} and {service} with actual values in the endpoint.
- Requires authorization token to be passed in the header
- Valid values for service are 'api_server' and 'ws_server'.
- Valid keys for updates include 'org_display_name' and 'preferences'.
- The 'is_invite' parameter must be set to true.
- Valid values for action are 'add' and 'remove'.
- Permissions are required only when action is 'add'.
- The organization’s request rate limit defaults to 5.
- Retrieve the recharge amount for an organization’s billing.
- SMS is only available on Enterprise plans. Contact your Bland representative for
  access.
- The `refill_amount` and `refill_at` fields may return null if refilling is not enabled.
- SMS is only available on Enterprise plans.
- Ensure to provide valid authorization token in the header.
- This endpoint is available for enterprise customers only.
- Conversation and all associated messages deleted successfully
- Custom dialing is only available on Enterprise plans.
- Custom dialing is only available on Enterprise plans. Contact your Bland representative
  for access.
- Uses OAuth2 for authorization
- Requires setup of authorization token.
- Requires authorization header with a valid token.
- 'Success Response: { "data": { "success": true, "message": "Persona deleted successfully"
  }, "errors": null }'
- Deleting a persona will remove all versions and configuration data permanently.
  Any phone numbers currently using this persona will need to be reconfigured with
  a different persona or direct configuration.
- Create a citation schema to define what data should be extracted from call transcripts.
- Backfilling will update citation variables for the specified call(s) and schema(s).
- Authorization token required in the header for requests
- At least one field (name, description, or schema) must be provided in the request
  body.
- Backfill operations are asynchronous.
- This is an Enterprise-only feature.
errors:
- '400 Bad Request: This response occurs if any required fields are missing in your
  request or if the state code is invalid.'
- '500 Internal Server Error: Indicates an unexpected error on the server side.'
- 'REQUEST_LIMIT_EXCEEDED: Throttle API calls or reduce frequency'
- 'QUERY_TIMEOUT: Break down filters or add selectivity'
- '401 Unauthorized: Recheck OAuth scopes or token expiration'
- Invalid or blank numbers will be skipped automatically and reported in the error
  logs.
- Account not allowed to call +12345678901
- Call failed. The number you dialed is not found.
- Call failed. The number you dialed is temporarily unavailable.
- Call failed. The number you dialed is busy. Please try again later.
- Call failed. Service Provider Blocked Call due to Spam or Number Reputation. Try
  a different number.
- '400: Invalid payloads will be rejected'
- 'INVALID_ISSUER: Issuer URL format invalid'
- 'DOMAIN_CONFLICT: Domain already used'
- 'SSO_PROVIDER_NOT_FOUND: Provider doesn’t exist'
- 'SIGNATURE_VALIDATION_FAILED: SAML signature invalid'
- 'INVALID_CLIENT_CREDENTIALS: OIDC auth failed'
- 'ACCOUNT_LINKING_FAILED: Cannot link SSO account'
- 'METADATA_FETCH_FAILED: Cannot retrieve metadata'
- 'USER_NOT_AUTHORIZED: User not assigned in IdP'
- 'ERR_JWKS_NO_MATCHING_KEY: Force JWKS cache refresh and retry once'
- 'Token expired: Increase token expiration to 600-900 seconds'
- 'Replay detection: Implement idempotency keys separate from JWT ''jti'''
- 'INVALID_ISSUER: Check URL format, remove trailing slash'
- 'DOMAIN_CONFLICT: Contact support to transfer domain'
- 'SSO_PROVIDER_NOT_FOUND: Verify provider ID is correct'
- 'SIGNATURE_VALIDATION_FAILED: Update certificate from IdP'
- 'INVALID_CLIENT_CREDENTIALS: Check client ID/secret'
- 'ACCOUNT_LINKING_FAILED: Contact support with details'
- 'METADATA_FETCH_FAILED: Check metadata URL accessibility'
- 'USER_NOT_AUTHORIZED: Add user to application in IdP'
- 'ERR_JWKS_NO_MATCHING_KEY: Key rotation occurred, your cache has old keys'
- 'Token expired errors during normal operations: Clock skew or network latency exceeding
  token lifetime'
- '401 Unauthorized: Recheck API key.'
- 'AUTH_FAILURE: Unauthorized'
- The Bland Team has flagged your account for security purposes. As a precautionary
  measure against recent heightened malicious use cases, we have flagged your account
  for review and temporarily blocked from dispatching calls. If you need to be unblocked
  urgently, please email us at hello@bland.ai with your account phone number.
- Calls can only be sent every 10 seconds to the same number. Please try again in
  a few seconds.
- Rate limit exceeded
- This number is blacklisted.
- Rate limit exceeded for newly created accounts. Please try again soon.
- International rate limit exceeded for your account type.
- '400 - Missing Required Parameter: Invalid parameters. Error: ["Missing required
  parameter: phone_number."]'
- '400 - Invalid Field Types: Field values are the wrong data type according to TypeBox
  validation.'
- '400 - Invalid Voicemail Action: Invalid voicemail action. Must be one of: hangup,
  leave_message, ignore'
- '400 - Number Range Validation: Max duration must be at least 1'
- '400 - Invalid DTMF Sequence: Precall DTMF sequence must be a valid DTMF sequence'
- '400 - Invalid Date Format: Start time must be a valid ISO date-time string.'
- '400 - Invalid Webhook URL: Webhook must be a valid URI'
- '400 - Invalid From Number Format: Invalid from number format'
- '400 - Invalid Transfer Phone Format: Invalid transfer phone number format'
- '400 - Invalid Transfer List Format: Invalid phone number format in transfer list'
- '400 - Additional Properties Not Allowed: Request contains fields that are not allowed
  in the schema.'
- '400 - Invalid Phone Number: Invalid phone number. Please include a country code
  if outside the US.'
- '400 - Invalid Transfer Number: Invalid transfer_phone_number.'
- '400 - Invalid Language Code: Invalid language code'
- '400 - Invalid Pronunciation Guide: Invalid pronunciation guide type.'
- '400 - Platform Not Supported: Precall DTMF sequence is not supported for this platform.'
- '400 - Invalid From Number: Invalid ''from'' - must be a phone number string with
  10 or 12 digits.'
- '400 - DNC List Violation: Number found in DNC list. You cannot dial sensitive numbers.
  More attempts will result in being blocked.'
- '400 - Transfer List Validation: Transfer list must be an object.'
- '400 - Retry Parameter Validation: Retry must be an object.'
- '400 - Version Number Validation: version_number must be a number.'
- '400 - Pathway Version Validation: pathway_version needs to either be a number,
  or a string of ''production'' or ''staging''.'
- '400 - From Phone Number Validation: Invalid from phone number.'
- '400 - Boolean Parameter Validation: wait_for_greeting must be a boolean.'
- '400 - First Sentence Validation: First sentence must be a string.'
- '400 - Voicemail Message Validation: Voicemail message must be a string.'
- '400 - Voicemail SMS Validation: voicemail_sms must be an object.'
- '400 - Interruption Threshold Validation: interruption_threshold must be a number.'
- '400 - Webhook URL Validation: webhook must be a string that starts with https://.'
- '400 - Request Data Validation: request_data must be an object.'
- '400 - Metadata Validation: metadata must be an object.'
- '400 - Analysis Schema Validation: analysis_schema must be an object.'
- '400 - Voice Parameter Validation: Voice must be a string.'
- '400 - Voicemail Action Validation: Invalid voicemail_action. Options are: [list_of_options].'
- '400 - Keywords Validation: Keywords must be an array of strings.'
- '400 - Timezone Validation: Timezone must be a string.'
- '400 - Summary Prompt Validation: Summary prompt must be a string.'
- '400 - Start Time Validation: start_time must be a string.'
- '400 - Background Track Validation: background_track must be a string.'
- '400 - Max Duration Validation: max_duration must be a number.'
- '400 - Invalid Dynamic Data: Unable to parse dynamic data/tools.'
- '400 - Invalid Pathway Data: Invalid pathway data - no blocks or links found for
  pathway {pathway_id}'
- '400 - Invalid Start Node ID: Invalid start node ID: {start_node_id}'
- '400 - Content Flagged: Flagged Node: [flagged content]'
- '400 - Sensitive Number Protection: Cannot dial sensitive numbers. More attempts
  will result in being blocked.'
- '400 - Unable to Save Request: Unable to save request body.'
- '400 - Unable to Queue Call: Unable to queue call.'
- '400 - Warm Transfer Parent Call Completed: Parent call has completed or does not
  exist. Warm Transfer Request Cancelled'
- '500 - Internal Server Errors: Internal server error during flagging process.'
- '400 - Call Parameters Validation: Call parameters must be an object.'
- '402 - No Billing Record: No billing record found.'
- '402 - Insufficient Balance: Insufficient balance.'
- '404 - Pathway Not Found: Pathway with ID "{pathway_id}" not found'
- '404 - Pathway Version Not Found: Pathway version with ID "{version_number}" not
  found'
- '418 - Invalid Objective: The objective parameter failed validation (returns validation
  details).'
- '400 - Missing Required Parameter: Missing required parameter: phone_number.'
- '400 - Invalid Field Types: Task must be a string'
- '400 - Invalid Date Format: Start time must be a valid date-time format'
- '400 - Additional Properties Not Allowed: Additional properties are not allowed'
- '400 - Warm Transfer Parent Call Completed: Parent call has completed or does not
  exist. Warm Transfer Request Cancelled.'
- '418 - Invalid Objective: OBJECTIVE_VALIDATION_ERROR, Custom validation response'
- '500 - Twilio Connection Error: Error in creating Twilio connection.'
- '500 - Invalid Encrypted Key: Invalid `encrypted_key`. Please use the correct key
  for your account.'
- '500 - Internal Server Error: Error triggering call. Please check your twilio account
  for errors'
- '500 - Content Moderation Error: Internal server error during flagging process'
- '500 - BYOT Number Error: Error in getting BYOT Number'
- '500 - Dialer Data Error: Error in getting dialer data from encrypted key'
- '500 - User Data Fetch Error: Error in fetching user data'
- '500 - Retry Call Error: Retry attempt not provided for retry call: {call_id}'
- '401 Unauthorized: A valid Bland API key is required.'
- 'error: Indicates a failure during the API call.'
- '401 Unauthorized: Recheck authorization token'
- '401 Unauthorized: Recheck API key for authentication.'
- SID not found for the given c_id.
- Internal server error.
- 'MISSING_CALL_ID: Call ID parameter is required'
- 'INVALID_ORG_PREFERENCES: Live listen is not enabled for organization'
- 'CALL_NOT_FOUND: Call does not exist or does not belong to organization'
- 'INVALID_CALL_STATUS: Call is not currently active'
- 'INTERNAL_SERVER_ERROR: Server error occurred'
- 'null'
- 'errors: null'
- '401 Unauthorized: Recheck authorization'
- '401 Unauthorized: Recheck API key'
- '401 Unauthorized: Recheck your API key'
- 'CALL_RECORDING_NOT_FOUND: Call recording not found'
- '400 Bad Request: Check the request parameters'
- '401 Unauthorized: Verify client credentials'
- '500 Internal Server Error: Retry the request later'
- 400 - Missing Text
- 400 - Missing Voice Parameter
- 400 - Invalid Output Format
- 400 - Invalid Consistency
- 400 - Invalid Expressiveness
- 400 - Text Too Long
- 400 - Service Not Supported
- 429 - Rate Limit Exceeded
- 500 - Validation Error
- 500 - Streaming Error
- 500 - Internal Server Error
- 400 - Voice Name Required
- 400 - Voice Name Too Long
- 400 - Voice Name Already Taken
- 400 - Invalid Gender
- 400 - No Audio Files
- 400 - Too Many Files
- 400 - File Too Large
- 400 - Total Upload Too Large
- 400 - Audio Too Short
- 400 - Audio Too Long
- 400 - Too Many Samples Per Voice
- 400 - Voice Limit Exceeded
- 400 - BTTS Processing Failed
- 400 - Failed to Add Sample
- 400 - Failed to Add Samples
- 401 - Unauthorized
- 405 - Method Not Allowed
- 500 - Database Error
- 500 - Generic Server Error
- '413 Payload Too Large: Returned when the audio file exceeds the 25MB size limit'
- '404 Not Found: Returned when the specified call_id does not exist'
- '401 Unauthorized: Returned when the API key is invalid or missing'
- '401 Unauthorized: Invalid or expired token.'
- 401 Unauthorized
- 500 Internal Server Error
- '401 Unauthorized: User authentication required.'
- '500 Internal server error: Token creation failed or unexpected error occurred.'
- 401 Unauthorized - User authentication required.
- 500 Internal server error - Token creation failed or unexpected error occurred.
- 'Pathway deleted successfully: success or error'
- Rate Limited Response
- '400 Bad Request: Check your request body for required fields'
- '401 Unauthorized: Ensure your API key is correct'
- '500 Internal Server Error: Try again later'
- Error response structure not defined
- '401 Unauthorized: Recheck API key or token expiration'
- '400 Bad Request: Check that all required fields are provided'
- Not Found Response
- '404 Not Found: Check the knowledge base ID'
- 'Not Found: Knowledge base does not exist'
- 'Not Found: Knowledge base not found'
- No Sitemap Found
- '404 Not Found: Knowledge base ID does not exist'
- '401 Unauthorized: Check your authorization token'
- '400 Bad Request: Check the request data for validity.'
- '401 Unauthorized: Verify your authentication credentials.'
- '500 Internal Server Error: Try again later or contact support.'
- 'null: indicates success or validation fails'
- 'null: on success, or an array of error objects if validation fails'
- 'null: on success, or a list of error objects if the block ID is invalid or not
  found'
- null on success, or a list of error objects if the rule was not found or deletion
  failed.
- null on success, or a list of error objects if the rule was not found or deletion
  failed
- '401 Unauthorized: Your API key for authentication is required.'
- '401 Unauthorized: Recheck authorization token.'
- '200: HTTP status code for success'
- 'status: 200'
- '400 Bad Request: Check the request body for missing or incorrect fields'
- '404 Not Found: Verify the widget ID'
- 'Unauthorized: Check authorization credentials.'
- 'Bad Request: Validate request body format.'
- '401 Unauthorized: Check authorization token.'
- 'status: success'
- Memory Not Found
- Server Error
- Missing Name
- Missing or Invalid Data
- Missing Phone Number
- Inbound Number Not Found
- 'Server Error: Memory deleted successfully'
- '401 Unauthorized: Check your API key.'
- Error deleting Twilio credentials
- Missing encrypted key
- '401 Unauthorized: Check authorization token'
- 'Error deleting Twilio credentials: The encrypted key could not be deleted or already
  has been deleted.'
- 'Missing encrypted key: The encrypted_key parameter is missing.'
- success
- error
- 'null: Always null on success.'
- 'null: Always `null` on success'
- '401 Unauthorized: Your API key for authentication.'
- Contains error details if the request fails.
- null if successful; contains error details if the request fails
- 'Invalid request: Ensure all required fields are included.'
- Always null upon successful update.
- Errors may be returned as null in the response.
- Always returns null data and null errors upon successful update.
- 'null: No errors'
- Always null upon successful removal.
- 'null: Always null upon successful removal'
- 'null: Always null on success'
- '401 Unauthorized: Invalid authorization token'
- 'null: on success, or a list of error objects if the request failed.'
- '400 Bad Request: Check input parameters'
- '401 Unauthorized: Invalid or missing authorization'
- 'null: Operation successful'
- null on success, or a list of error objects if the request failed
- 'null: indicates success.'
- List of errors on failure.
- '401 Unauthorized: Check your authorization token.'
- 'null: on success, or a list of error objects on failure'
- Conversation and all associated messages deleted successfully
- 400 Error Response
- 404 Error Response
- '400: Bad Request'
- '404: Not Found'
- 'message_ids: Invalid input'
- Pool Not Found
- Invalid Pool ID
- Unauthorized
- '400 Bad Request: Ensure schema_id and conversation_id are provided'
- Invalid Phone Numbers
- Invalid Credentials
- 'null: No errors returned from the API'
- Error Response (Persona in Use)
- Error Response (Not Found)
- Persona in Use
- Not Found
- Error Response (No Draft)
- Version Not Found
- '400 Bad Request: Returned when the schema ID parameter is missing.'
- '404 Not Found: Returned when the specified citation schema is not found or doesn’t
  belong to your organization.'
- '400 Bad Request: Returned when the required `name` parameter is missing.'
- '200: Successful request'
- '400 Bad Request: The schema ID parameter is missing or no update fields are provided
  in the request body'
- '404 Not Found: The specified citation schema is not found or doesn’t belong to
  your organization'
- '401 Unauthorized: Recheck API key or permissions'
- '400 Bad Request: Check the request body for missing or invalid fields'
- '401 Unauthorized: Ensure the authorization header is set correctly'
- '400 Bad Request: No schema parameter provided, No call parameter provided, Invalid
  parameter combinations, Empty arrays provided'
- '403 Forbidden: Account does not have enterprise features enabled, Attempting to
  access another organization’s calls or schemas'
- '404 Not Found: Specified call ID(s) not found, Specified schema ID(s) not found,
  Resources don’t belong to your organization'
- '500 Internal Server Error: Unexpected error occurs starting the workflow'
- '400 Bad Request: Check the request format and required fields'
- '401 Unauthorized: Recheck your authorization token'
- '404 Not Found: Ensure the requested resource exists'
- '400 Bad Request: Ensure at least one field is provided in the request body.'
- '400 Bad Request: The schema ID parameter is missing'
- '202 Accepted: Indicates the workflow has been started.'
- '500 Internal Server Error: An unexpected error occurs starting the workflow'
auth_info:
  mentioned_objects:
  - OauthToken
  - AuthProvider
  - NamedCredential
  - IdP
  - OAuth 2.0
  - SAML 2.0
  - Bland API key
  - authorization
  - encrypted_key
client:
  base_url: https://api.bland.ai
  auth:
    type: oauth2
    location: header
    header_name: authorization
  headers:
    Content-Type: application/json
source_metadata: null
