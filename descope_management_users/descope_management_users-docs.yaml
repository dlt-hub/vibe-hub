resources:
- name: load_user
  endpoint:
    path: /api/management/users/load-user
    method: GET
- name: create_user
  endpoint:
    path: /api/management/users/create-user
    method: POST
- name: update_user
  endpoint:
    path: /api/management/users/update-user
    method: POST
- name: users
  endpoint:
    path: /v1/users
    method: GET
    data_selector: data
    params: {}
- name: sessions
  endpoint:
    path: /v1/sessions
    method: GET
    data_selector: data
    params: {}
- name: sign_up_email
  endpoint:
    path: /api/otp/email/sign-up
    method: POST
    data_selector: empty_response
- name: verify_otp_email
  endpoint:
    path: /api/otp/email/verify-otp
    method: POST
    data_selector: empty_response
- name: update_phone_number
  endpoint:
    path: /api/otp/sms/update-phone
    method: POST
    data_selector: empty_response
- name: sign_up
  endpoint:
    path: /api/magic-link/email/sign-up
    method: POST
- name: verify_token
  endpoint:
    path: /api/magic-link/verification/verify-token
    method: POST
- name: sign_in
  endpoint:
    path: /api/magic-link/email/sign-in
    method: POST
- name: sign_in_auto_sign_up
  endpoint:
    path: /api/magic-link/email/sign-in-auto-sign-up
    method: POST
- name: sign_up
  endpoint:
    path: /api/enchanted-link/sign-up
    method: POST
- name: poll_session
  endpoint:
    path: /api/enchanted-link/poll-session
    method: POST
- name: verify_token
  endpoint:
    path: /api/enchanted-link/verify-token
    method: POST
- name: sign-up-sign-in
  endpoint:
    path: /api/oauth/sign-up-sign-in
    method: POST
- name: exchange-code
  endpoint:
    path: /api/oauth/exchange-code
    method: POST
- name: Sign-Up
  endpoint:
    path: /api/totp/sign-up
    method: POST
- name: Sign-In / Verify
  endpoint:
    path: /api/totp/sign-in-verify
    method: POST
- name: Add / Update Key
  endpoint:
    path: /api/totp/add-update-key
    method: POST
- name: sign-up
  endpoint:
    path: /api/notp/sign-up
    method: POST
- name: sign-in
  endpoint:
    path: /api/notp/sign-in
    method: POST
- name: get pending session
  endpoint:
    path: /api/notp/pending-session
    method: POST
- name: start_sso
  endpoint:
    path: /api/sso/start-sso
    method: POST
- name: exchange_code
  endpoint:
    path: /api/sso/exchange-code
    method: POST
- name: sign_up
  endpoint:
    path: /api/passwords/sign-up
    method: POST
- name: sign_in
  endpoint:
    path: /api/passwords/sign-in
    method: POST
- name: reset_password
  endpoint:
    path: /api/passwords/email/password-reset
    method: POST
- name: update_password
  endpoint:
    path: /api/passwords/update-password
    method: POST
- name: list_search_flows
  endpoint:
    path: /api/management/flows/list-flows
    method: POST
    data_selector: flows
    params: {}
- name: export_flow
  endpoint:
    path: /api/management/flows/export-flow
    method: POST
    data_selector: flow
    params: {}
- name: import_flow
  endpoint:
    path: /api/management/flows/import-flow
    method: POST
    data_selector: imported_flow
    params: {}
- name: load_access_key
  endpoint:
    path: /api/management/access-keys/load-access-key
    method: GET
- name: search_access_keys
  endpoint:
    path: /api/management/access-keys/search-access-keys
    method: POST
- name: create_access_key
  endpoint:
    path: /api/management/access-keys/create-access-key
    method: POST
- name: update_access_key
  endpoint:
    path: /api/management/access-keys/update-access-key
    method: POST
- name: activate_access_key
  endpoint:
    path: /api/management/access-keys/activate-access-key
    method: POST
- name: deactivate_access_key
  endpoint:
    path: /api/management/access-keys/deactivate-access-key
    method: POST
- name: batch_activate_access_keys
  endpoint:
    path: /api/management/access-keys/batch-activate-access-keys
    method: POST
- name: batch_deactivate_access_keys
  endpoint:
    path: /api/management/access-keys/batch-deactivate-access-keys
    method: POST
- name: batch_delete_access_keys
  endpoint:
    path: /api/management/access-keys/batch-delete-access-keys
    method: POST
- name: delete_access_key
  endpoint:
    path: /api/management/access-keys/delete-access-key
    method: POST
- name: Load All Tenants
  endpoint:
    path: /api/management/tenants/load-all-tenants
    method: GET
- name: Load Tenant By ID
  endpoint:
    path: /api/management/tenants/load-tenant-by-id
    method: GET
- name: Search Tenants
  endpoint:
    path: /api/management/tenants/search-tenants
    method: POST
- name: Create Tenant
  endpoint:
    path: /api/management/tenants/create-tenant
    method: POST
- name: Update Tenant
  endpoint:
    path: /api/management/tenants/update-tenant
    method: POST
- name: Delete Tenant
  endpoint:
    path: /api/management/tenants/delete-tenant
    method: POST
- name: Load All Permissions
  endpoint:
    path: /api/management/permissions/load-all-permissions
    method: GET
- name: Create Permission
  endpoint:
    path: /api/management/permissions/create-permission
    method: POST
- name: Update Permission
  endpoint:
    path: /api/management/permissions/update-permission
    method: POST
- name: Delete Permission
  endpoint:
    path: /api/management/permissions/delete-permission
    method: POST
- name: Load All Roles
  endpoint:
    path: /api/management/roles/load-all-roles
    method: GET
- name: Search Roles
  endpoint:
    path: /api/management/roles/search-roles
    method: POST
- name: Create Role
  endpoint:
    path: /api/management/roles/create-role
    method: POST
- name: Update Role
  endpoint:
    path: /api/management/roles/update-role
    method: POST
- name: Delete Role
  endpoint:
    path: /api/management/roles/delete-role
    method: POST
- name: Batch Delete Roles
  endpoint:
    path: /api/management/roles/delete-roles
    method: POST
- name: access_key_exchange
  endpoint:
    path: /v1/auth/accesskey/exchange
    method: POST
    data_selector: keyId
- name: user_info
  endpoint:
    path: /oauth2/v1/apps/userinfo
    method: POST
    data_selector: userInfoClaims
- name: finish_authorization
  endpoint:
    path: /oauth2/v1/apps/finish-authorize
    method: POST
    data_selector: '{}'
- name: authorization
  endpoint:
    path: /oauth2/v1/apps/authorize
    method: POST
- name: OIDC revoke endpoint
  endpoint:
    path: /oauth2/v1/apps/revoke
    method: POST
- name: user_info
  endpoint:
    path: /oauth2/v1/apps/userinfo
    method: GET
    data_selector: userInfoClaims
- name: User JWT Template
  endpoint:
    path: /management/jwt-templates/user
    method: POST
    data_selector: templates
    params: {}
- name: Access Key JWT Template
  endpoint:
    path: /management/jwt-templates/access-key
    method: POST
    data_selector: templates
    params: {}
- name: create_user
  endpoint:
    path: /management/user/create
    method: POST
- name: batch_create_users
  endpoint:
    path: /management/user/batch-create
    method: POST
- name: invite_user
  endpoint:
    path: /management/user/invite
    method: POST
- name: update_user
  endpoint:
    path: /management/user/update
    method: PUT
- name: load_existing_user_details
  endpoint:
    path: /management/user/load
    method: GET
- name: get_users_login_history
  endpoint:
    path: /management/user/history
    method: GET
- name: load_existing_users_provider_token
  endpoint:
    path: /management/user/getProviderToken
    method: GET
- name: remove_sso_apps
  endpoint:
    path: /management/user/removeSSOapps
    method: POST
    data_selector: resp.data
    params:
      loginId: xxxx
      ssoAppIds:
      - app1
      - app2
- name: activate_user
  endpoint:
    path: /management/user/activate
    method: POST
    data_selector: resp.data
    params:
      loginId: xxxx
- name: deactivate_user
  endpoint:
    path: /management/user/deactivate
    method: POST
    data_selector: resp.data
    params:
      loginId: xxxx
- name: logout_user_sessions
  endpoint:
    path: /management/user/logoutUser
    method: POST
    data_selector: resp.data
    params:
      loginId: email@company.com
- name: delete_users_passkeys
  endpoint:
    path: /management/user/removeAllPasskeys
    method: POST
    data_selector: resp.data
    params:
      loginId: email@company.com
- name: delete_user
  endpoint:
    path: /management/user/delete
    method: POST
    data_selector: resp.data
    params:
      loginId: email@company.com
- name: search_users
  endpoint:
    path: /management/user/searchAll
    method: GET
    data_selector: data
- name: update_user_email
  endpoint:
    path: /management/user/updateEmail
    method: POST
    data_selector: data
- name: update_user_login_id
  endpoint:
    path: /management/user/updateLoginId
    method: POST
    data_selector: data
- name: update_user_phone
  endpoint:
    path: /management/user/updatePhone
    method: POST
    data_selector: data
- name: update_user_display_name
  endpoint:
    path: /management/user/updateDisplayName
    method: POST
    data_selector: data
- name: update_user_picture
  endpoint:
    path: /management/user/updatePicture
    method: POST
    data_selector: data
- name: update_user_custom_attributes
  endpoint:
    path: /management/user/updateCustomAttribute
    method: POST
    data_selector: data
- name: expire_user_password
  endpoint:
    path: /management/user/expirePassword
    method: POST
    data_selector: data
- name: set_temporary_password
  endpoint:
    path: /management/user/setTemporaryPassword
    method: POST
    data_selector: data
- name: set_active_password
  endpoint:
    path: /management/user/setActivePassword
    method: POST
    data_selector: data
- name: add_roles
  endpoint:
    path: /management/user/addRoles
    method: POST
    data_selector: data
- name: set_roles
  endpoint:
    path: /management/user/setRoles
    method: POST
    data_selector: data
- name: remove_roles
  endpoint:
    path: /management/user/removeRoles
    method: POST
    data_selector: data
- name: add_tenant
  endpoint:
    path: /management/user/addTenant
    method: POST
    data_selector: data
- name: remove_tenant
  endpoint:
    path: /management/user/removeTenant
    method: POST
    data_selector: data
- name: add_roles_in_tenant
  endpoint:
    path: /management/user/addTenantRoles
    method: POST
    data_selector: data
- name: set_roles_in_tenant
  endpoint:
    path: /management/user/setTenantRoles
    method: POST
    data_selector: data
- name: remove_roles_in_tenant
  endpoint:
    path: /management/user/removeTenantRoles
    method: POST
    data_selector: data
- name: associate_application
  endpoint:
    path: /management/user/addSSOapps
    method: POST
    data_selector: data
- name: set_applications
  endpoint:
    path: /management/user/setSSOapps
    method: POST
    data_selector: data
- name: users
  endpoint:
    path: /v1/mgmt/user/search
    method: POST
    data_selector: users
    params: {}
- name: search_users
  endpoint:
    path: /v2/mgmt/user/search
    method: POST
    data_selector: users
    params:
      fromModifiedTime: ''
- name: tenants
  endpoint:
    path: /management/tenants
    method: GET
- name: tenant_admins
  endpoint:
    path: /management/tenant-management/tenant-admins
    method: GET
- name: styles
  endpoint:
    path: /management/styles
    method: GET
    data_selector: styles
    params: {}
- name: themes
  endpoint:
    path: /management/themes
    method: GET
    data_selector: themes
    params: {}
- name: user
  endpoint:
    path: /user
    method: GET
- name: unauthUser
  endpoint:
    path: /unauthUser
    method: GET
- name: register
  endpoint:
    path: /register
    method: POST
    data_selector: client_id
    params: {}
- name: user_profile
  endpoint:
    path: /user/profile
    method: GET
    data_selector: properties
    params: {}
- name: contacts
  endpoint:
    path: /contacts
    method: GET
    data_selector: items
    params: {}
- name: create_contact
  endpoint:
    path: /contacts
    method: POST
    data_selector: properties
    params: {}
- name: admin_users
  endpoint:
    path: /admin/users
    method: GET
    data_selector: items
    params: {}
- name: user_profile
  endpoint:
    path: /user/profile
    method: GET
    data_selector: properties
    params: {}
- name: contacts
  endpoint:
    path: /contacts
    method: GET
    data_selector: items
    params: {}
- name: create_contact
  endpoint:
    path: /contacts
    method: POST
    data_selector: properties
    params: {}
- name: all_users
  endpoint:
    path: /admin/users
    method: GET
    data_selector: items
    params: {}
- name: project
  endpoint:
    path: /api/projects
    method: GET
    data_selector: projects
- name: ProjectSettings
  endpoint:
    path: /settings/project
    method: GET
- name: ManagementKeys
  endpoint:
    path: /settings/company/managementkeys
    method: GET
- name: GitLab CI/CD Template
  endpoint:
    path: /managing-environments/manage-envs-in-gitlab
    method: GET
    data_selector: variables
    params: {}
- name: descope_project
  endpoint:
    path: /projects
    method: GET
    data_selector: projects
notes:
- 'Use authorization bearer header with the format: Authorization: Bearer <ProjectId:ManagementKey>'
- Uses OAuth2 with authorization code flow.
- Flows are the easiest and recommended approach to implementing auth in your application.
- Descope allows configuring authorization with RBAC, ReBAC, and ABAC.
- Widgets can be exported from the Descope Console as a JSON file.
- Widgets are embeddable components designed for user management.
- Descope provides applications to handle various identity federation scenarios.
- Management keys can also be associated with specific projects within your company.
- Migrating to Descope supports various hashing protocols to ensure smooth migration
  of passwords.
- Always here to help you with questions and issues.
- Uses OAuth2 with refresh token — requires setup of connected app in Descope
- Extensive customization capabilities for styles for the screens designed in Descope
  flows.
- Uses OAuth2 for authentication
- 'Use authorization bearer header with the format: Authorization: Bearer <Project
  ID>'
- Sending multiple OTP codes will invalidate any previously sent OTP codes.
- 'Use authorization bearer header with the following format: Authorization: Bearer
  <Project ID>'
- Upon successful authentication, the user's JWT will be returned.
- The password reset endpoint will only succeed if the user has a validated email
  address.
- 'Use authorization bearer header with the following format: Authorization: Bearer
  <ProjectId:ManagementKey>'
- 'Use authorization bearer header with the format: Authorization: Bearer <token>'
- JWT Templates allow for easy, code-manageable customization.
- Claims in JWT templates can be dynamically updated based on real-time changes.
- If you're using phone numbers as a login ID, make sure that the phone numbers are
  formatted properly before adding them, if using the Management SDK or User Management
  APIs.
- Management SDK requires a management key.
- This method of export is not meant to transfer users between different projects.
- Anonymous Users allow applications to gradually build out user profiles without
  requiring identifying information like a phone number, email, or username.
- This flow is a demonstration of a specific authentication method.
- Audit Webhook has an internal throttling mechanism to manage system load.
- Access keys enable machine-to-machine authentication for your application.
- Access keys will continue to function as long as they are active and not expired.
- Styles help you create and scale user-facing screens while adhering to your brand's
  guidelines.
- They are applied project-wide, making them the ideal solution for consistent JWT
  formatting.
- Template options allow you to pass dynamic data to your templates.
- Leaving approved domains empty disables validation and creates security vulnerabilities.
- 'Enforce MFA will force Descopers to go through MFA, while allowing the Descoper
  to choose their preferred MFA method from the following options: Passkeys, OTP via
  SMS, or TOTP.'
- Descope supports custom claims to restrict data based on user privileges.
- Each key can have a maximum of 60 chars, each claim value can have a maximum of
  500 chars, and each JWT can have a maximum of 100 keys.
- Descope allows you to configure what to do in the event of an action error during
  flow execution.
- The Check Rate Limit Action is only available to Growth and Enterprise license holders.
- Descope's External Token feature enables hybrid authentication by allowing you to
  keep using your existing token format and infrastructure.
- You can configure whether only tenant admins are allowed to invite users, or if
  any authenticated user can send invitations.
- Dynamic values can be used within Descope conditions, actions, connectors, etc.
- Management Flows are autonomous, backend operations that run without user interaction.
- Every Management Flow should conclude with an End action that defines what data
  gets returned in the JSON response.
- Inbound Apps allow users to sign in to third-party applications using Descope as
  their identity provider (IdP) via OAuth 2.0.
- Configuring federated applications is a Pro/Enterprise-tier feature.
- If you have a custom domain configured, the system-generated URLs will use your
  custom domain instead of api.descope.com.
- Enforces OAuth scopes at the API level.
- Currently, Inbound App management functions are only supported in the Java SDK.
- Descope securely stores and manages all tokens and API keys.
- The terraform provider works with Pro or Enterprise type license.
- Descope allows you to create many projects to fit your needs.
- Selecting production or non-production does not effect the features within the project.
- Ensure the management key has access to both projects you are exporting/importing
  from/to.
- Workflows must be allowed to create pull requests and update the repository.
- Create a GitLab Project Access Token
- Add project IDs and management key to CI/CD variables
- The pulumi package works with 'Pro' or 'Enterprise' type license.
- Create a Management Key on the Company Settings for use in all projects.
- Test users are not audited, counted as active users, or monitored within your analytics.
- It is essential to monitor and clean up your dynamic test users as it could quickly
  reach the Test User Limits.
- User impersonation is a feature that enables application administrators to temporarily
  sign in and interact with your application as another user.
- Descope logs impersonation logins within the Audit Trail as a LoginSucceed action.
errors:
- '401 Unauthorized: Check your credentials.'
- '403 Forbidden: Insufficient permissions.'
- '404 Not Found: Ensure the endpoint is correct.'
- 'REQUEST_LIMIT_EXCEEDED: Throttle API calls or reduce frequency'
- 'QUERY_TIMEOUT: Break down filters or add selectivity'
- '401 Unauthorized: Recheck OAuth scopes or token expiration'
- '400 Bad Request: Invalid JWT template configuration.'
- '404 Not Found: JWT template not found.'
- Failed to create user.
- Failed to batch create invite users.
- Failed to load user.
- Failed to load users history.
- Unable to load user's provider token.
- Unable to remove sso apps to user.
- Failed to activate user.
- Failed to deactivate user.
- Failed to logout user.
- Failed to remove user's passkeys.
- Failed to delete user.
- Failed to initialize signUpOrIn flow
- 403 Forbidden - Missing required scope
- '401 Unauthorized: Invalid or expired token'
- 'INVALID_MANAGEMENT_KEY: Ensure the management key is valid and scoped correctly.'
- 'E111111: Failed to create user - Test users limit exceeded'
auth_info:
  mentioned_objects:
  - OAuth2
  - AccessToken
  - OauthToken
  - AuthProvider
  - NamedCredential
  - ManagementKey
  - Project
client:
  base_url: https://app.descope.com
  auth:
    type: oauth2
source_metadata: null
