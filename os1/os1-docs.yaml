resources:
- name: tenant
  endpoint:
    path: /v1/aaa/tenants/{tenantId}
    method: GET
    data_selector: ''
    params: {}
- name: validate
  endpoint:
    path: /core/api/v1/validate
    method: POST
    data_selector: ''
    params: {}
- name: define_policy
  endpoint:
    path: /core/api/v1/aaa/apps/{{appId}}/resources/{{resourceId}}
    method: PUT
    data_selector: ''
    params: {}
- name: tenant_configuration
  endpoint:
    path: /core/api/v1/aaa/tenants/{{tenantId}}
    method: PUT
    data_selector: ''
    params: {}
- name: entity
  endpoint:
    path: /entity
    method: POST
    data_selector: payload
    params: {}
- name: batch_entity
  endpoint:
    path: /batch/entity
    method: POST
    data_selector: payload
    params: {}
- name: teams
  endpoint:
    path: /teams
    method: GET
    data_selector: participants
    params:
      size: 10
      page: 1
      sortBy: desc
      additionalInfo: true
- name: team
  endpoint:
    path: /teams/{teamId}
    method: GET
    data_selector: data
    params: {}
- name: team_state
  endpoint:
    path: /teams/{teamId}/state
    method: GET
    data_selector: data
    params: {}
- name: filter_teams
  endpoint:
    path: /teams/filter
    method: GET
    data_selector: data
    params:
      aggregateQuery: '[{"name":"state_count","field":"state.keyword","aggregation":"terms"}]'
      query: '{"arr":[{"term":{"properties.teamType.keyword":"Operations"}}],"op":"and"}'
- name: dispatch
  endpoint:
    path: /create-new-dispatch
    method: POST
    data_selector: dispatch
    params: {}
- name: Jobs
  endpoint:
    path: /jobs
    method: POST
    data_selector: objectives
- name: participant
  endpoint:
    path: /create-participant
    method: POST
- name: participant_type
  endpoint:
    path: /create-participant-type
    method: POST
- name: Create Batch Request
  endpoint:
    path: /create-batch-request
    method: POST
    data_selector: payload
    params: {}
- name: Update Batch Request
  endpoint:
    path: /update-batch-request
    method: POST
    data_selector: payload
    params: {}
- name: dispatch_config
  endpoint:
    path: /dispatch-service/dispatch-types/{dispatchTypeId}/config/attributes
    method: PUT
- name: create_dispatch
  endpoint:
    path: /dispatch-service/dispatches
    method: POST
    data_selector: data
- name: plugins
  endpoint:
    path: /plugins
    method: POST
    data_selector: null
    params: {}
- name: plugin-workflows
  endpoint:
    path: /plugin-workflows
    method: POST
    data_selector: null
    params: {}
- name: Users
  endpoint:
    path: /users
    method: GET
    data_selector: records
- name: Create User
  endpoint:
    path: /user-management-service/create-user
    method: POST
    data_selector: user
    params: {}
- name: Get all Users
  endpoint:
    path: /user-management-service/get-all-users
    method: GET
    data_selector: users
    params: {}
- name: designation
  endpoint:
    path: /user-management-service/designations
    method: GET
- name: User State Transition
  endpoint:
    path: /user/state/transition
    method: POST
    data_selector: data
    params: {}
- name: Get User State
  endpoint:
    path: /user/state
    method: GET
    data_selector: data
    params: {}
- name: update_user
  endpoint:
    path: /updateUser/{UserID}
    method: POST
- name: Get all Users
  endpoint:
    path: /user-management-service
    method: GET
- name: Update User
  endpoint:
    path: /update-user
    method: POST
- name: Get User
  endpoint:
    path: /get-user
    method: GET
- name: create_batch_request
  endpoint:
    path: /create_batch_request
    method: POST
    data_selector: payload
    params: {}
- name: update_batch_request
  endpoint:
    path: /update_batch_request
    method: POST
    data_selector: payload
    params: {}
- name: get_batch_status
  endpoint:
    path: /get_batch_status
    method: GET
    data_selector: status
    params: {}
- name: organizations
  endpoint:
    path: /developer/organizations/assigned
    method: GET
    data_selector: organizations
- name: RegisterApp
  endpoint:
    path: /developer/apps
    method: POST
    params:
      organizationId: unique_id_of_organization
      teamId: unique_id_of_team
- name: solution
  endpoint:
    path: /register-your-solution
    method: POST
- name: solution_attributes
  endpoint:
    path: /update-solution-attributes
    method: PUT
- name: solution_lifecycle
  endpoint:
    path: /manage-solution-lifecycle
    method: PATCH
- name: solution_artifacts
  endpoint:
    path: /manage-solution-artifacts
    method: POST
- name: solution_version
  endpoint:
    path: /solution-version-management
    method: POST
- name: solution_details
  endpoint:
    path: /get-solution-details
    method: GET
- name: Create Entity
  endpoint:
    path: /state-machine/create-entity
    method: POST
    data_selector: entity
    params: {}
- name: Create Event
  endpoint:
    path: /state-machine/create-event
    method: POST
    data_selector: event
    params: {}
- name: Create Reason Code
  endpoint:
    path: /state-machine/create-reason
    method: POST
    data_selector: reason
    params: {}
- name: state_machine_configuration
  endpoint:
    path: /reference/register-state-machine-config-for-entity-type
    method: POST
- name: instance_creation
  endpoint:
    path: /reference/create-state-machine-config
    method: POST
- name: state_transition
  endpoint:
    path: /reference/state-transition
    method: POST
- name: MTS
  endpoint:
    path: /{mtsEndpoint}
    method: POST
    data_selector: data
    params: {}
- name: startMTS
  endpoint:
    path: /startMTS
    method: POST
    data_selector: accessToken
    params:
      resetSequence: false
      dispatchID: '12345'
      expiryTime: Date.now() + 24 * 2600 * 1000
- name: publishEvent
  endpoint:
    path: /publishEvent
    method: POST
    data_selector: event
    params:
      eventName: TESTEVENT
      battery: 56
      network: 100
- name: stopMTS
  endpoint:
    path: /stopMTS
    method: POST
    data_selector: null
    params: {}
- name: etData
  endpoint:
    path: /etData
    method: GET
    data_selector: data.etData
- name: workflows
  endpoint:
    path: workflow-wrapper/workflows
    method: GET
- name: macros
  endpoint:
    path: workflow-wrapper/macros
    method: GET
- name: drafts
  endpoint:
    path: workflow-wrapper/drafts
    method: GET
- name: jobs
  endpoint:
    path: workflow-wrapper/job-workflows
    method: GET
- name: jobs_drafts
  endpoint:
    path: workflow-wrapper/job-drafts
    method: GET
- name: get_logs
  endpoint:
    path: /developer/logs/{listingId}
    method: GET
    params:
      listingId: vehicle-trackers
      type: APP
- name: get_versions_diff
  endpoint:
    path: /developer/versionsdiff/{versionId1}/{versionId2}
    method: GET
    params:
      type: APP
- name: get_permission_diff
  endpoint:
    path: /developer/permissionsdiff/{tenantId}/{versionId}
    method: GET
- name: get_diff_status
  endpoint:
    path: /developer/diff/{statusId}
    method: GET
- name: get_onboarding_activity_logs
  endpoint:
    path: /developer/onboarding/logs
    method: GET
- name: LogisticsOrder
  endpoint:
    path: /logisticsorder
    method: GET
    data_selector: records
- name: User
  endpoint:
    path: /user
    method: GET
    data_selector: records
- name: Facility
  endpoint:
    path: /facility
    method: GET
    data_selector: records
- name: Vehicle
  endpoint:
    path: /vehicle
    method: GET
    data_selector: records
- name: event_broker_url
  endpoint:
    path: /getEventBrokerUrl
    method: GET
- name: api_request
  endpoint:
    path: /api
    method: POST
    headers:
      Callback: callbackUrl
- name: banners
  endpoint:
    path: /api/v1/banners
    method: GET
    data_selector: banners
    params: {}
- name: application
  endpoint:
    path: /developer/apps
    method: POST
    data_selector: id
    params:
      organizationId: string
      teamId: string
- name: health_check
  endpoint:
    path: /developer/health
    method: GET
    data_selector: status
    params: {}
- name: application
  endpoint:
    path: /developer/apps
    method: GET
    data_selector: AppDTO
    params:
      listingId: string
- name: solution
  endpoint:
    path: /developer/solutions/{solutionId}
    method: GET
    data_selector: SolutionDTO
    params: {}
- name: AddApplicationVersion
  endpoint:
    path: /developer/apps/{appId}/versions
    method: POST
    data_selector: id
    params:
      version: 1.0.1
- name: solution
  endpoint:
    path: /developer/solutions/versions/{solutionVersionId}
    method: GET
    data_selector: SolutionDTO
- name: upload_artifacts
  endpoint:
    path: /developer/artifacts
    method: POST
    data_selector: file
    params:
      appVersionId: appVersionId
      artifactType: ICON
- name: retrieve_artifacts
  endpoint:
    path: /developer/artifacts
    method: GET
    data_selector: data.images
    params:
      appVersionId: appVersionId
      artifactType: ICON
- name: delete_artifacts
  endpoint:
    path: /developer/artifacts/{artifactId}
    method: DELETE
    params:
      appVersionId: appVersionId
      artifactType: ICON
- name: download_artifacts
  endpoint:
    path: /developer/artifacts/{artifactId}/download
    method: GET
    params:
      appVersionId: appVersionId
- name: onboard_app
  endpoint:
    path: /developer/tenants/v2/onboarding
    method: POST
    data_selector: data
    params: {}
- name: onboard_solution
  endpoint:
    path: /developer/tenants/onboarding
    method: POST
    data_selector: data
    params: {}
- name: artifacts
  endpoint:
    path: /developer/artifacts
    method: POST
    params:
      artifactType: string
- name: update_lifecycle_state
  endpoint:
    path: /developer/solutions/versions/{solutionVersionId}/states
    method: PUT
    data_selector: '{}'
- name: artifacts
  endpoint:
    path: /developer/artifacts
    method: GET
    data_selector: artifacts
    params:
      artifacttype: string
- name: create_app_role
  endpoint:
    path: /core/api/v1/aaa/apps/{appId}/roles
    method: POST
- name: banner
  endpoint:
    path: /developer/support/banners/{bannerId}
    method: GET
    data_selector: GetBannerByIdResponseDto
    params: {}
- name: roles
  endpoint:
    path: /core/api/v1/aaa/apps/{appId}/roles
    method: GET
    params:
      isPaginated: boolean
- name: create_folder
  endpoint:
    path: /folders
    method: POST
    data_selector: data
    params: {}
- name: update_roles_mapping
  endpoint:
    path: /core/api/v1/aaa/groups/{groupId}/roles
    method: PUT
- name: folders
  endpoint:
    path: /folders
    method: GET
    data_selector: data
    params:
      limit: '50'
- name: CreateApp
  endpoint:
    path: /reference/register-application
    method: POST
- name: UpdateApp
  endpoint:
    path: /reference/update-app-public-key
    method: POST
- name: CreateVault
  endpoint:
    path: /reference/create-vault
    method: POST
- name: UpdateVault
  endpoint:
    path: /reference/update-vault
    method: POST
- name: CreateData
  endpoint:
    path: /create-data
    method: POST
    data_selector: data
    params: {}
- name: UpdateData
  endpoint:
    path: /update-data
    method: POST
    data_selector: data
    params: {}
- name: ReadData
  endpoint:
    path: /read-data
    method: GET
    data_selector: data
    params: {}
- name: UploadFile
  endpoint:
    path: /upload-file
    method: POST
    data_selector: file
    params: {}
- name: register_application
  endpoint:
    path: /sds/apps
    method: POST
    data_selector: data
    params: {}
- name: update_app_public_key
  endpoint:
    path: /core/api/v1/sds/apps/{appId}
    method: PUT
    data_selector: data
    params: {}
- name: create_vault
  endpoint:
    path: /core/api/v1/sds/vaults
    method: POST
    data_selector: data
    params: {}
- name: get_vault
  endpoint:
    path: /core/api/v1/sds/vaults
    method: GET
    data_selector: data
    params: {}
- name: upload_file
  endpoint:
    path: /core/api/v1/file-manager/folders/{folderName}/files
    method: POST
    data_selector: data
    params: {}
- name: RegisterMobileAppNotification
  endpoint:
    path: /reference/register-new-app
    method: POST
- name: RegisterAppNotificationConfig
  endpoint:
    path: /reference/add-app-notification-configuration
    method: POST
- name: SendMobilePushNotifications
  endpoint:
    path: /reference/-asO-send-notifications
    method: POST
- name: create_folder
  endpoint:
    path: /create-folder
    method: POST
    data_selector: data
    params: {}
- name: upload_file
  endpoint:
    path: /upload-file
    method: POST
    data_selector: data
    params: {}
- name: download_file
  endpoint:
    path: /download-file
    method: GET
    data_selector: data
    params: {}
- name: search_files
  endpoint:
    path: /search-files
    method: GET
    data_selector: data
    params: {}
- name: plugin
  endpoint:
    path: /core/api/v1/plugins/
    method: POST
    data_selector: data
    params: {}
- name: plugin
  endpoint:
    path: /plugins/{pluginId}
    method: PUT
    data_selector: data
    params: {}
- name: Execution Task
  endpoint:
    path: /workflow-service/tasks
    method: POST
    data_selector: data
    params: {}
- name: batch_file_request_status
  endpoint:
    path: /containers/{containerType}/batch/upload/status
    method: GET
    data_selector: data
    params:
      batchId: BatchId
- name: execution_task
  endpoint:
    path: /core/api/v1/workflow-service/tasks/{taskId}
    method: GET
    data_selector: data
    params: {}
- name: trace_data
  endpoint:
    path: /core/api/v1/mts/devices/{deviceId}/apps/{app}/trace
    method: GET
    data_selector: data
    params:
      duration: 1h
- name: job_cancellation_failed
  endpoint:
    path: /cancellationManager/jobCancellationFailed
    method: POST
    data_selector: data
- name: trace_data
  endpoint:
    path: /core/api/v1/mts/devices/{deviceId}/apps/{app}/trace
    method: PUT
- name: order_config
  endpoint:
    path: /orders/config/attributes
    method: POST
    data_selector: data
    params: {}
- name: county
  endpoint:
    path: /locations/countries/{countryCode}/search/counties
    method: GET
    data_selector: data
    params:
      query: string
      limit: 50
- name: order_config
  endpoint:
    path: /core/api/v1/orders/config/attributes
    method: PUT
- name: participant_type
  endpoint:
    path: /participants/participant-types
    method: POST
    data_selector: data
    params: {}
- name: update_attribute_config
  endpoint:
    path: /participants/tenants/config/attributes
    method: PUT
- name: participant_types
  endpoint:
    path: /participants/participant-types
    method: GET
- name: entity_type
  endpoint:
    path: /entity/entity-type
    method: POST
    data_selector: data
    params: {}
- name: entity_type
  endpoint:
    path: /entity/apps/{appId}/entity-type
    method: GET
- name: entity_type
  endpoint:
    path: /entity/entity-type
    method: GET
    data_selector: data.entityTypes
    params:
      limit: integer
      nextPage: string
- name: create_container_type
  endpoint:
    path: /reference/create-a-new-container-type
    method: POST
    data_selector: data
    params: {}
- name: create_container
  endpoint:
    path: /reference/create-a-container
    method: POST
    data_selector: data
    params: {}
- name: create_container_batch
  endpoint:
    path: /reference/create-container-in-batches
    method: POST
    data_selector: payload
    params: {}
- name: update_container_batch
  endpoint:
    path: /reference/perform-update-operation-on-container-in-batches
    method: POST
    data_selector: payload
    params: {}
- name: update_container_type_attributes
  endpoint:
    path: /reference/update-core-attributes-configurations-for-a-container-type
    method: POST
    data_selector: attributes
    params: {}
- name: container_type
  endpoint:
    path: /containers/container-types
    method: POST
    data_selector: data
    params: {}
- name: create_container
  endpoint:
    path: /containers
    method: POST
- name: fetch_container
  endpoint:
    path: /containers/{containerId}
    method: GET
- name: create_container_batch
  endpoint:
    path: /containers/{containerType}/batch
    method: POST
    data_selector: data
    params: {}
- name: container_batch_update
  endpoint:
    path: /containers/{containerType}/batch
    method: PUT
    data_selector: data
    params: {}
- name: attributes_config
  endpoint:
    path: /containers/container-types/{containerTypeName}/config/attributes
    method: PUT
    data_selector: attributes
    params: {}
- name: custom_attributes
  endpoint:
    path: /config/attribute
    method: PUT
    data_selector: attributes
    params: {}
- name: bulk_containerization
  endpoint:
    path: /bulk/containerization
    method: POST
    data_selector: payload
    params: {}
- name: bulk_decontainerization
  endpoint:
    path: /bulk/decontainerization
    method: POST
    data_selector: payload
    params: {}
- name: create_participants_batch_json
  endpoint:
    path: /reference/perform-create-operation-on-participants-in-batch
    method: POST
    data_selector: payload
- name: create_participants_batch_csv
  endpoint:
    path: /reference/perform-create-operation-on-participants-via-file-upload
    method: POST
    data_selector: payload
- name: update_participants_batch_json
  endpoint:
    path: /reference/perform-update-operation-on-participants-in-batch
    method: POST
    data_selector: payload
- name: update_participants_batch_csv
  endpoint:
    path: /reference/perform-create-operation-on-participants-via-file-upload
    method: POST
    data_selector: payload
- name: retrieve_participant_batch_status
  endpoint:
    path: /reference/QwSP-get-the-status-of-batch-file-request
    method: GET
    data_selector: status
- name: Create a new order
  endpoint:
    path: /app/logisticsorders/v1/api/orders/
    method: POST
    data_selector: data
- name: Get Order Details
  endpoint:
    path: /app/logisticsorders/v1/api/orders/
    method: GET
    data_selector: data
- name: update_vehicle_state
  endpoint:
    path: /vehicles/{vehicleId}/transition
    method: PUT
    data_selector: data
    params: {}
- name: order
  endpoint:
    path: /orders/{orderId}
    method: GET
    data_selector: data
- name: user
  endpoint:
    path: /app/api/v2/users
    method: POST
    data_selector: data
- name: plugin_workflow
  endpoint:
    path: /core/api/v1/orders/plugin-workflows/{pluginWorkflowId}
    method: DELETE
- name: users
  endpoint:
    path: /users
    method: GET
    data_selector: data.users
- name: facilities
  endpoint:
    path: /facilities
    method: POST
    data_selector: data
- name: aggregate_count
  endpoint:
    path: /teams/filter
    method: GET
    data_selector: data.data.aggregateResult
    params:
      aggregateQuery: array
      query: Query2
- name: facilities
  endpoint:
    path: /facilities
    method: GET
    data_selector: facilities
    params: {}
- name: vehicles
  endpoint:
    path: /vehicles
    method: POST
    data_selector: data
- name: secure_data
  endpoint:
    path: /facilities/{facilityId}/vault/{secureId}/{dataType}
    method: GET
- name: vehicles
  endpoint:
    path: /vehicles
    method: GET
    data_selector: data.vehicles
    params: {}
- name: ping
  endpoint:
    path: /developer/ping
    method: GET
    data_selector: string
notes:
- Avoid passing large payloads to prevent exceeding the 375KB size limit.
- Access Token has a validity of 24 hours.
- ABAC requires ABAC-related config for the tenants.
- Batch endpoints support JSON and CSV file upload.
- The Tenant can configure a terminal TTL that governs the availability of data in
  the transactional database.
- If the value is not provided, the data is deleted from the transactional database
  after 30 days.
- If the data warehouse feature is enabled, then the data is available to query from
  the DWH after the deletion from the transactional database.
- If it is not enabled the data is permanently deleted.
- Parameters marked with an asterisk (*) are required.
- The dispatch service does not check execution feasibility.
- The dispatch must start and end with zero inventory in custody.
- The platform provides a default of five states for an Objective.
- Participants allow for the representation and management of various logistical entities,
  facilitating better organization and tracking of tasks and workflows.
- The items marked (*) are mandatory attributes required while creating the Participants
  via batch processing.
- The request bodies are specified in JSON format.
- Creating Users requires passing specific user details in the request body.
- Get all Users endpoint is deprecated and will reach EOL on Sept 30, 2023.
- Response body is returned in JSON format
- Retrieve the User ID of the User before calling the update endpoint.
- 'Batch endpoints support two methods to supply data: JSON and CSV file upload.'
- State Machine Configuration cannot be partially updated.
- Transition can happen between Substates and NOT between substates to states.
- Ensure to request permissions for MTS.
- Uses SDK Utility Methods for configuration and downloading APK files.
- Ensure MTS service is running before calling startGeofence()
- Geofence start failed. Please try again
- Geofence status check failed. Please try again
- Geofence abort failed. Please try again
- Geofence data flush failed. Please try again
- Required API endpoints include workflows, macros, drafts, jobs, and jobs_drafts.
- This feature is only available for web apps that integrate with Console.
- Uses SSE for real-time event handling
- Banners are displayed based on specified active time ranges.
- Banners may appear as sticky notifications at the top of the console UI.
- Ensure your solution doesn’t include any app that has more than one backend with
  one front-end.
- Your solution and the apps within it should be multi-tenant.
- Core Apps are mandatory for a particular use case across all solutions.
- Your solution must be fully functional and bug-free.
- When you submit your solution for review, clearly state your user data collection
  and retention policy.
- Social login is enabled by default for all tenants.
- The current application version must be in a LIVE state before a new version can
  be added.
- Onboarding process should be repeated whenever there are changes in permissions
  files associated with apps.
- The application must generate an RSA key pair and maintain the private key securely.
- The owner application can only modify its own vault.
- Developers can use the Mobile Push Notifications APIs to register their Android
  or iOS applications and receive push notifications.
- The maximum request size is 375 KB.
- The TTL value for folder files must be a minimum of 1 day.
- After a Container type is created it cannot be deleted and its name and isLeaf attributes
  are immutable.
- Attributes such as the Capacity of a Container, or Container Temperature controlled,
  while essential to certain businesses, are not required to define a Container, and
  hence they have not been listed under Base attributes.
- Parent Container state should be OPENED.
- The child Container state should be CLOSED.
- Parent Container should have isLeaf property as false.
- Child Container should have isContainerizable as true.
- To change the Lifecycle state of a Container, you must specify the App ID associated
  with the container.
- The OTO app controls the addition of new custom attributes, preventing irrelevant
  or duplicate attributes.
- The CAO app defines access levels to control information sharing between apps.
- All read/write requests for data should go through the OTO App, rather than directly
  interacting with OS1, to maintain secure data management.
- Change the value for the action attribute to 'DECONTAINERIZE' for decontainerization.
- Batch endpoints support JSON and CSV file upload methods for creating and updating
  Participants.
- 'State Transitions Allowed: onboarding:onboarding -> active:available, active:available
  -> active:inuse, active:unavailable, inactive:inactive, active:inuse -> active:available,
  active:unavailable -> active:available, inactive:inactive, inactive:inactive ->
  active:available, inactive:terminal -> '
- One of email or primaryMobile is required to create a user.
- Do not use groups with Single Leg designations ['Business Owner', 'Team Manager',
  'Field Executive']
- Request Accepted response includes error and request metadata.
errors:
- '403: Forbidden: User does not have access to the specified resource.'
- 'REQUEST_LIMIT_EXCEEDED: Throttle API calls or reduce frequency.'
- '400 Bad Request: Check if required fields are missing or invalid.'
- '404 Not Found: Ensure the endpoint is correct.'
- '500 Internal Server Error: Retry the request or check service status.'
- '400: Error Occurred'
- '401: Error Occurred'
- '400: Bad Request - The request was unacceptable, often due to missing a required
  parameter.'
- '401: Unauthorized - No valid API key provided.'
- 'Unauthorized: Confirm you are using the correct orgId or teamId.'
- '401 Unauthorized: Check access token validity'
- '403 Forbidden: Insufficient permissions'
- '404 Not Found: Check the endpoint path'
- 'InvalidArgumentError: ''100100'''
- 'InvalidBaseURL: ''100101'''
- 'SyncManagerNotInitialized: ''100102'''
- 'MissingOrInvalidProps: ''100103'''
- 'SQLiteDBIssue: ''100104'''
- 'AppSyncNotInitialized: ''100105'''
- 'FMS_FOLDER_CREATION_ERROR: ''100106'''
- 'REASON_CODE_API_ERROR: ''100107'''
- 'MERGING_ERROR: ''100108'''
- 'LOCATION_PERMISSION_DENIED: ''100109'''
- 'CAMERA_PERMISSION_DENIED: ''100110'''
- 'STORAGE_PERMISSION_DENIED: ''100111'''
- 'GRAPHQL_CLIENT_NOT_INITIALIZED: ''100112'''
- 'FMS_GRAPHQL_API_ERROR: ''100113'''
- 'INTERNET_NOT_ENABLED: ''100114'''
- 'LOCATION_OR_GPS_NOT_ENABLED: ''100115'''
- 'EXECUTION_ENGINE_ERROR: ''100116'''
- 'UNEXPECTED_ERROR: ''100117'''
- 'PERMISSIONS_ERROR[2500]: Mandatory Android Permissions not provided'
- 'MTS_INIT_ERROR[2501]: MTS INIT Not called! MTS Device ID is Empty'
- 'PARAM_MISSING[2502]: Mandatory Parameter is missing in request'
- 'START_GEOFENCE_ERROR_CODE[2507]: Geofence start failed. Please try again'
- 'CHECK_GEOFENCE_STATUS_ERROR_CODE[2508]: Geofence status check failed. Please try
  again'
- 'ABORT_GEOFENCE_ERROR_CODE[2509]: Geofence abort failed. Please try again'
- 'FLUSH_GEOFENCE_ERROR_CODE[2510]: Geofence data flush failed. Please try again'
- If there are any internal errors during connection setup, the Console will throw
  an error, and an API call will be made with null as the callback URL.
- '400 Bad Request: Invalid request parameters'
- 404 Org or Team not found
- '403: User does not have access to the app''s org/team combo'
- '404: App not found based on provided listing id'
- '403: User does not have access to the solution''s org'
- '404: Solution not found based on provided solution id'
- '400: Something is incorrect in the request body.'
- '403: User does not have access to the app''s org/team combo.'
- '404: App not found based on provided app id.'
- '404: Solution not found based on provided solution version id'
- '400: Something is wrong with the request such as a bad artifact type or missing
  file.'
- '403: User not authorized on the app or solution.'
- '404: App or solution version not found based on provided id.'
- '400: Something is wrong with the request such as an incorrect action'
- '403: User not authorized on the solution''s organization'
- '404: Solution version not found by solution version id'
- '403: User not authorized on the app or solution'
- '404: App or solution version not found based on provided id'
- '400: Bad request - The server is unable to process the request due to something
  that is perceived to be a client error.'
- '401: Unauthorized - The client''s identity is unknown to the server. Verify that
  you are accessing the correct tenant and that your client ID and client secret are
  valid on that Tenant.'
- '403: Forbidden - The client''s identity is known to the server but it does not
  have access rights to the requested resource. Verify that you''re using the correct
  client ID and client secret or grant the client the necessary roles to access the
  resource.'
- '404: Not found - The server can not find the requested resource.'
- '503: Server error - The server is not ready to handle the request. This could be
  due to maintenance downtime or system resource constraints.'
- 400 Bad Request
- 403 User does not have a support role.
- 404 Banner Id not found.
- 400 Bad request - The server is unable to process the request due to something that
  is perceived to be a client error.
- 401 Unauthorized - The client's identity is unknown to the server. Verify that you
  are accessing the correct tenant and that your client ID and client secret are valid
  on that Tenant.
- 403 Forbidden - The client's identity is known to the server but it does not have
  access rights to the requested resource. Verify that you're using the correct client
  ID and client secret or grant the client the necessary roles to access the resource.
- 404 Not found - The server can not find the requested resource.
- 503 Server error - The server is not ready to handle the request. This could be
  due to maintenance downtime or system resource constraints.
- 503 Server error - The server is not ready to handle the request.
- 'Unauthorized Access: Ensure proper permissions are set for the app accessing the
  vault.'
- 'Vault Not Found: Check if the vault ID is correct.'
- bad request the server is unable to process the request due to something that is
  perceived to be a client error
- unauthorized the client's identity is unknown to the server verify that you are
  accessing the correct tenant and that your client id and client secret are valid
  on that tenant
- forbidden the client's identity is known to the server but it does not have access
  rights to the requested resource verify that you're using the correct client id
  and client secret or grant the client the necessary roles to access the resource
- server error the server is not ready to handle the request this could be due to
  maintenance downtime or system resource constraints
- 400 Bad request - The server is unable to process the request due to something that
  is perceived to be a client error
- 401 Unauthorized - The client's identity is unknown to the server. Verify that you
  are accessing the correct tenant and that your client ID and client secret are valid
  on that tenant.
- 403 Forbidden - The client's identity is known to the server, but it does not have
  access rights to the requested resource. Verify that you're using the correct client
  ID and client secret or grant the client the necessary roles to access the resource.
- '400 - Bad Request: The request was unacceptable, often due to missing a required
  parameter.'
- '401 - Unauthorized: No valid API key provided.'
- '503 - Server Errors: Something went wrong on our end. (These are rare.)'
- '401: Unauthorized - The client''s identity is unknown to the server. Verify that
  you are accessing the correct Tenant and that your client ID and client secret are
  valid on that Tenant.'
- 400 Error Occurred
- 401 Error Occurred
- 401 Unauthorized - The client's identity is unknown to the server. Verify that you
  are accessing the correct Tenant and that your client ID and client secret are valid
  on that Tenant.
- '403: Error Occurred'
- '404: Error Occurred'
- '503: Error Occurred'
- '400: Bad request - The server is unable to process the request due to something
  that is perceived to be a client error'
- '401: Unauthorized - The client''s identity is unknown to the server. Verify that
  you are accessing the correct tenant and that your client ID and client secret are
  valid on that tenant.'
- '400 Bad Request: Check the request payload for required fields and validation rules.'
- '404 Not Found: The specified endpoint or resource does not exist.'
- '500 Internal Server Error: An unexpected error occurred on the server.'
- '404 - Not Found: The requested resource doesn''t exist.'
- '503 - Server Error: Something went wrong. (These are rare.)'
- '503 - Server Error: Something went wrong.. (These are rare.)'
- '503 - Server Error: Something went wrong on our end.'
- '202: Request Accepted'
- 'Default Error Response: error, request, data'
- Default Error Response
- '400 Bad Request: Check the parameters sent in the request'
auth_info:
  mentioned_objects: []
client:
  base_url: https://{domain}/app/api/v2
  headers:
    X-COREOS-TID: '{tenantId}'
    X-COREOS-ACCESS: '{access_token}'
    X-COREOS-USERINFO: '{"name":"admin","id":"123"}'
source_metadata: null
