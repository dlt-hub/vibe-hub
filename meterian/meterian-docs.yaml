resources:
- name: codebase_scanner
  endpoint:
    path: /the-client/client
    method: GET
- name: container_scanner
  endpoint:
    path: /containers-support/container-scanner
    method: GET
- name: iac_scanner
  endpoint:
    path: /dedicated-instance/using-the-scanners/iac-scanner
    method: GET
- name: projects
  endpoint:
    path: /api/v1/projects
    method: GET
    data_selector: projects
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: two_phases_build
  endpoint:
    path: /the-client/using-client-ci-cd/two-phases-build
    method: GET
- name: client_interrupt
  endpoint:
    path: /the-client/using-the-client/interrupting-the-client
    method: GET
- name: report_console
  endpoint:
    path: /generating-a-report
    method: POST
    data_selector: report
    params:
      report_type: console
- name: report_file
  endpoint:
    path: /generating-a-report
    method: POST
    data_selector: report
    params:
      report_type: file
- name: report_json
  endpoint:
    path: /generating-a-report
    method: POST
    data_selector: report
    params:
      report_type: json
- name: report_pdf
  endpoint:
    path: /generating-a-report
    method: POST
    data_selector: report
    params:
      report_type: pdf
- name: report_console
  endpoint:
    path: /generating/report
    method: GET
    data_selector: report
    params:
      report_type: console
- name: report_file
  endpoint:
    path: /generating/report
    method: GET
    data_selector: report
    params:
      report_type: file
- name: report_json
  endpoint:
    path: /generating/report
    method: GET
    data_selector: report
    params:
      report_type: json
- name: report_pdf
  endpoint:
    path: /generating/report
    method: GET
    data_selector: report
    params:
      report_type: pdf
- name: reports
  endpoint:
    path: /producing/reports
    method: GET
    data_selector: reports
- name: project
  endpoint:
    path: /api/projects
    method: GET
    data_selector: projects
- name: project
  endpoint:
    path: /api/projects
    method: POST
    data_selector: data
- name: Dockerized Client
  endpoint:
    path: /the-client/the-meterian-client-dockerized
    method: GET
- name: score_report
  endpoint:
    path: /api/v1/score
    method: GET
    data_selector: scores
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: projects
  endpoint:
    path: /projects
    method: GET
    data_selector: records
- name: projects
  endpoint:
    path: /api/projects
    method: GET
    data_selector: data
    params: {}
- name: policies
  endpoint:
    path: /api/policies
    method: GET
    data_selector: policies
    params: {}
- name: tags
  endpoint:
    path: /api/tags
    method: GET
    data_selector: records
    params: {}
- name: teams
  endpoint:
    path: /api/teams
    method: POST
    data_selector: teams
- name: members
  endpoint:
    path: /api/members
    method: POST
    data_selector: members
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: License Bible
  endpoint:
    path: /api/v1/license_bible
    method: GET
    data_selector: components
- name: Classic SBOM
  endpoint:
    path: /api/v1/classic_sbom
    method: GET
    data_selector: components
- name: CycloneDX SBOM
  endpoint:
    path: /api/v1/cyclonedx_sbom
    method: GET
    data_selector: components
- name: License Bible
  endpoint:
    path: /api/license-bible
    method: GET
    data_selector: components
- name: Classic SBOM
  endpoint:
    path: /api/classic-sbom
    method: GET
    data_selector: components
- name: CycloneDX SBOM
  endpoint:
    path: /api/cyclonedx-sbom
    method: GET
    data_selector: components
- name: vulnerability_exclusion
  endpoint:
    path: /advanced-functionalities/set-exclusion
    method: POST
    data_selector: exclusions
- name: notifications
  endpoint:
    path: /notifications/sentinel
    method: GET
- name: notifications_slack
  endpoint:
    path: /notifications/sentinel/slack
    method: GET
- name: notifications_email
  endpoint:
    path: /notifications/sentinel/email-notification
    method: GET
- name: notifications
  endpoint:
    path: /api/notifications
    method: GET
    data_selector: notifications
    params: {}
- name: Allerta
  endpoint:
    path: /notifications/allerta
    method: GET
- name: github_badges
  endpoint:
    path: /api/v1/badges
    method: GET
    data_selector: badges
    params: {}
- name: badges
  endpoint:
    path: /api/badges
    method: GET
    data_selector: badges
    params: {}
- name: projects
  endpoint:
    path: /api/projects
    method: GET
    data_selector: data
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: go_analyser
  endpoint:
    path: /go/analyser
    method: POST
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
- name: Java/Kotlin/Scala
  endpoint:
    path: /api/java-kotlin-scala
    method: GET
    data_selector: records
- name: scanning
  endpoint:
    path: /scanning/ear-or-war-files
    method: POST
    data_selector: results
- name: scanning
  endpoint:
    path: /scanning/ear-or-war
    method: GET
    data_selector: scan_results
- name: Javascript
  endpoint:
    path: /languages-support/vanilla
    method: GET
- name: dotnet_analysis
  endpoint:
    path: /analyze/dotnet
    method: POST
    data_selector: results
- name: dependencies
  endpoint:
    path: /api/dependencies
    method: GET
    data_selector: records
- name: Perl
  endpoint:
    path: /languages-support/perl
    method: GET
    data_selector: dependencies
    params: {}
- name: php_analyser
  endpoint:
    path: /api/php/analyser
    method: POST
    data_selector: results
- name: ruby_analyser
  endpoint:
    path: /api/ruby/analyser
    method: GET
    data_selector: records
- name: third_party_dependencies
  endpoint:
    path: /api/third-party-dependencies
    method: GET
    data_selector: dependencies
    params: {}
- name: license_detection
  endpoint:
    path: /jupyter-notebooks/license-detection
    method: GET
    data_selector: metadata.license
- name: license_detection
  endpoint:
    path: /api/license_detection
    method: GET
    data_selector: metadata.license
    params: {}
- name: container_scanner
  endpoint:
    path: /containers-support/container-scanner
    method: GET
    data_selector: results
- name: container_scanner
  endpoint:
    path: /api/v1/container_scanner
    method: GET
    data_selector: results
- name: projects
  endpoint:
    path: /projects
    method: GET
    data_selector: records
    params: {}
- name: insights
  endpoint:
    path: /insights
    method: GET
    data_selector: records
    params: {}
- name: vulnerability_exclusion
  endpoint:
    path: /api/v1/vulnerability/exclusion
    method: POST
    data_selector: data
- name: project
  endpoint:
    path: /projects
    method: GET
    data_selector: projects
- name: report_json
  endpoint:
    path: /producing-reports
    method: GET
    data_selector: reports
    params: {}
- name: report_pdf
  endpoint:
    path: /producing-reports
    method: GET
    data_selector: reports
    params: {}
- name: report_sbom
  endpoint:
    path: /producing-reports
    method: GET
    data_selector: reports
    params: {}
- name: report_console
  endpoint:
    path: /producing-reports
    method: GET
    data_selector: reports
    params: {}
- name: projects
  endpoint:
    path: /account-apis/listing-your-projects
    method: GET
    data_selector: projects
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: projects
  endpoint:
    path: /api/projects
    method: GET
    data_selector: data
    params: {}
- name: reports
  endpoint:
    path: /api/reports
    method: GET
    data_selector: data
    params: {}
- name: projects
  endpoint:
    path: /api/projects
    method: GET
    data_selector: records
    params: {}
- name: meterian_job
  endpoint:
    path: /meterian/job
    method: POST
- name: project
  endpoint:
    path: /api/projects
    method: GET
    data_selector: data
- name: source-code
  endpoint:
    path: your repository uri
    method: GET
    data_selector: ''
    params: {}
- name: projects
  endpoint:
    path: /api/projects
    method: GET
    data_selector: records
- name: reports
  endpoint:
    path: /api/reports
    method: GET
    data_selector: records
- name: source-code
  endpoint:
    path: your repository uri
    method: GET
    data_selector: ''
    params: {}
- name: projects
  endpoint:
    path: /api/projects
    method: GET
    data_selector: data
    params: {}
- name: insights
  endpoint:
    path: /api/insights
    method: GET
    data_selector: data
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: meterian-analysis
  endpoint:
    path: docker:latest
    method: GET
- name: project
  endpoint:
    path: /api/projects
    method: GET
    data_selector: projects
    params: {}
- name: meterian-analysis
  endpoint:
    path: /downloads/meterian-cli.jar
    method: GET
    data_selector: jar
    params: {}
- name: meterian-analysis
  endpoint:
    path: /downloads/meterian-cli.jar
    method: GET
    data_selector: jar
- name: meterian-analysis
  endpoint:
    path: /api/v1/analysis
    method: POST
    data_selector: results
    params: {}
- name: meterian_analysis
  endpoint:
    path: /downloads/meterian-cli.jar
    method: GET
    data_selector: jar
    params: {}
- name: meterian-analysis
  endpoint:
    path: /downloads/meterian-cli.jar
    method: GET
    data_selector: jar
- name: account
  endpoint:
    path: /account
    method: GET
    data_selector: records
- name: project
  endpoint:
    path: /projects
    method: GET
    data_selector: records
- name: Meterian Scan
  endpoint:
    method: POST
- name: projects
  endpoint:
    path: /api/projects
    method: GET
    data_selector: data
- name: meterian-analysis
  endpoint:
    path: /ci-server-integrations/gitlabcicd
    method: POST
    data_selector: gitlab_report.json
- name: projects
  endpoint:
    path: /account-apis/listing-your-projects
    method: GET
    data_selector: projects
    params: {}
- name: sonar.meterian.reportJsonPath
- name: sonar.meterian.patchUpdateAlertSeverityLevel
  default: MINOR
- name: sonar.meterian.minorUpdateAlertSeverityLevel
  default: None (disabled)
- name: sonar.meterian.majorUpdateAlertSeverityLevel
  default: None (disabled)
- name: sonar-meterian-plugin
  endpoint:
    path: /meterian-sonar-plugin/releases
    method: GET
    data_selector: releases
    params: {}
- name: sonar.meterian.reportJsonPath
  endpoint:
    path: /path/to/report
    method: GET
    data_selector: report
- name: sonar.meterian.patchUpdateAlertSeverityLevel
  endpoint:
    path: /path/to/patch/alert
    method: GET
    data_selector: alert
- name: sonar.meterian.minorUpdateAlertSeverityLevel
  endpoint:
    path: /path/to/minor/alert
    method: GET
    data_selector: alert
- name: sonar.meterian.majorUpdateAlertSeverityLevel
  endpoint:
    path: /path/to/major/alert
    method: GET
    data_selector: alert
- name: Threadfix
  endpoint:
    path: /upload/scan
    method: POST
    data_selector: response
    params: {}
- name: Meterian Report
  endpoint:
    path: /path/to/meterian/report
    method: GET
    data_selector: records
- name: projects
  endpoint:
    path: /api/projects
    method: GET
    data_selector: records
    params: {}
- name: Threadfix
  endpoint:
    path: /upload/scan
    method: POST
- name: Engagements
  endpoint:
    path: /api/v2/engagements/
    method: POST
    data_selector: results
    params: {}
- name: Findings
  endpoint:
    path: /api/v2/findings/
    method: POST
    data_selector: results
    params: {}
- name: project
  endpoint:
    path: /services/data/vXX.X/sobjects/Project
    method: GET
    data_selector: records
    params: {}
- name: account
  endpoint:
    path: /api/account
    method: GET
    data_selector: records
- name: project
  endpoint:
    path: /api/project
    method: GET
    data_selector: records
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: account
  endpoint:
    path: /api/account
    method: GET
    data_selector: data
    params: {}
- name: accounts
  endpoint:
    path: /api/v1/accounts
    method: GET
    data_selector: records
    params:
      account_id: me
- name: projects
  endpoint:
    path: /account-apis/listing-your-projects
    method: GET
    data_selector: projects
    params: {}
- name: account
  endpoint:
    path: /api/v1/account
    method: GET
    data_selector: data
    params: {}
- name: projects
  endpoint:
    path: /api/v1/projects
    method: GET
    data_selector: data
    params: {}
- name: account
  endpoint:
    path: /api/v1/accounts
    method: GET
    data_selector: uuid
    params:
      account_id: me
- name: projects
  endpoint:
    path: /account-apis/listing-your-projects
    method: GET
    data_selector: projects
    params: {}
- name: account_members
  endpoint:
    path: /accounts/$ACCOUNT_UUID/members
    method: GET
    data_selector: records
- name: teams
  endpoint:
    path: /teams
    method: GET
    data_selector: records
- name: add_member_to_account
  endpoint:
    path: /accounts/$ACCOUNT_UUID/members
    method: POST
    data_selector: response
- name: remove_member_from_account
  endpoint:
    path: /accounts/$ACCOUNT_UUID/members/alan%40example.com
    method: DELETE
- name: add_member_to_team
  endpoint:
    path: /teams/$TEAM_UUID/members
    method: POST
    data_selector: response
- name: remove_member_from_team
  endpoint:
    path: /teams/$TEAM_UUID/members/a6fc490b-5a08-492e-a4d9-f09b28701fda
    method: DELETE
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: account_members
  endpoint:
    path: /accounts/$ACCOUNT_UUID/members
    method: GET
    data_selector: records
- name: teams
  endpoint:
    path: /teams
    method: GET
    data_selector: records
- name: team_members
  endpoint:
    path: /teams/$TEAM_UUID/members
    method: GET
    data_selector: records
- name: full_report
  endpoint:
    path: /reports/$PROJECT_UUID/full
    method: GET
    data_selector: results
    params:
      branch: master
- name: pdf_report
  endpoint:
    path: /reports/$PROJECT_UUID/pdf
    method: GET
    data_selector: results
    params:
      branch: master
- name: dependency_tree_report
  endpoint:
    path: /reports/$PROJECT_UUID/tree
    method: GET
    data_selector: results
    params:
      branch: master
- name: sbom_csv_report
  endpoint:
    path: /reports/$PROJECT_UUID/sbom.csv
    method: GET
    data_selector: results
    params:
      branch: master
- name: sbom_cdx_json_report
  endpoint:
    path: /reports/$PROJECT_UUID/sbom-cdx.json
    method: GET
    data_selector: results
    params:
      branch: master
- name: sbom_cdx_xml_report
  endpoint:
    path: /reports/$PROJECT_UUID/sbom-cdx.xml
    method: GET
    data_selector: results
    params:
      branch: master
- name: bible_pdf_report
  endpoint:
    path: /reports/$PROJECT_UUID/bible.pdf
    method: GET
    data_selector: results
    params:
      branch: master
- name: start_preparation
  endpoint:
    path: /reports/$PROJECT_UUID/bible
    method: POST
    data_selector: results
    params:
      branch: master
- name: check_progress
  endpoint:
    path: /reports/$PROJECT_UUID/bible/$ID
    method: GET
    data_selector: results
- name: json_report
  endpoint:
    path: /reports/$PROJECT_UUID/full
    method: GET
    data_selector: results
    params:
      branch: master
- name: pdf_report
  endpoint:
    path: /reports/$PROJECT_UUID/pdf
    method: GET
    data_selector: results
    params:
      branch: master
- name: json_dependency_tree_report
  endpoint:
    path: /reports/$PROJECT_UUID/tree
    method: GET
    data_selector: results
    params:
      branch: master
- name: sbom_csv_report
  endpoint:
    path: /reports/$PROJECT_UUID/sbom.csv
    method: GET
    data_selector: results
    params:
      branch: master
- name: sbom_cyclonedx_json_report
  endpoint:
    path: /reports/$PROJECT_UUID/sbom-cdx.json
    method: GET
    data_selector: results
    params:
      branch: master
- name: sbom_cyclonedx_xml_report
  endpoint:
    path: /reports/$PROJECT_UUID/sbom-cdx.xml
    method: GET
    data_selector: results
    params:
      branch: master
- name: pdf_bible_report
  endpoint:
    path: /reports/$PROJECT_UUID/bible.pdf
    method: GET
    data_selector: results
    params:
      branch: master
- name: start_preparation
  endpoint:
    path: /reports/$PROJECT_UUID/bible
    method: POST
    data_selector: ID
    params:
      branch: master
- name: check_progress
  endpoint:
    path: /reports/$PROJECT_UUID/bible/$ID
    method: GET
    data_selector: progress
    params: {}
notes:
- All our APIs are REST-style, following the principle of the minimum surprise.
- Uses OAuth2 with refresh token — requires setup of connected app in api
- Support is included in all commercial plans.
- Some reporting formats may not be available to non-enterprise licenses.
- Features may incur additional costs.
- Support available via email and chat.
- Extended support hours can be arranged.
- The thin client does not include any standard SDK that is usually needed to produce
  the dependencies graph of your application.
- The client will scan the folder searching for the files where your dependencies
  are listed or it will invoke the relevant tool to generate them.
- Token obtained in interactive mode will last 24 hours.
- Please login from our main page and follow the instructions provided in the dashboard.
- Some objects like Contact may return nulls in deeply nested fields
- A new browser window is opened to authenticate the user
- Alternatively, you can also set up the METERIAN_API_TOKEN environment variable with
  one of tokens available in the account
- Depending on your configuration, this can vary from hours to a day, but by default,
  a token obtained in this way it will last 24 hours.
- The client stores the state of its progress in a hidden folder under your home,
  and can be interrupted at any time.
- The client will refuse to execute another analysis if the previous one is still
  in progress.
- By default the client runs in interactive mode.
- 'I cannot find a valid authorization token: I will open the browser so obtain one'
- Please login as usual with your selected credentials
- A token obtained in this way it will last 24 hours.
- In non-interactive mode the client will assume it's already authorized and will
  fail if such authorization is missing.
- When using non-interactive mode, specify where the token is stored with --auth-file
  argument.
- Alternatively, set the environment variable METERIAN_API_TOKEN to the token value.
- If you use Git, the client usually detects automatically some basic information,
  including the current branch, but when this is not possible you can simply specify
  on the command line the parameter `--project-branch=name-of-your-branch` to enforce
  the branch name.
- If you are running your build process on the same CI machine, sharing between different
  builds the same environment, you will need to run the client in concurrent mode
  using the command line parameter `--concurrent-mode`.
- In this mode the client will allow different builds to run concurrently on the same
  environment.
- Please note that in concurrent mode you cannot execute two phases builds.
- 'Sometimes, especially if you run server side analysis, the process can take several
  minutes: in that situation you may want to start the process, go back to your build
  and collect the results later. This can be done passing the `--start-only` argument
  to the client. In that situation the client will collect the required data, send
  them to the server and return to the shell. You can then run your build, executing
  it in parallel to the work done on the Meterian servers. At the end of your build
  you just need to launch again the client with the same configuration, removing the
  `--start-only` argument: it will pick up the same analysis again, contact the server
  and return the results. Of course, if the server is still not ready, you may need
  to wait until everything is ready, but the client will report about the progress.'
- In concurrent mode the two phases build will not work.
- If you use Git, the client usually detects automatically some basic information,
  including the current branch.
- The default values for these scores are 90 for security and 80 for stability
- Sometimes, especially if you run server side analysis, the process can take several
  minutes
- In concurrent mode the two phases build will not work
- The client will continue as usual, and if the token is valid it will proceed as
  in the interactive scenario.
- remote scanning is possible only for Java and NodeJS
- remote scanning is usually less precise than local scanning
- We generally suggest to use remote analysis unless specifically needed.
- A console-based report is generated using the parameter `--report-console`.
- An HTML report is generated on the file system using the parameter `--report-file=/path/to/file`.
- A JSON formatted report can also be generated using the parameter `--report-json=/path/to/file`.
- A PDF formatted report can also be generated using the parameter `--report-pdf=/path/to/file`.
- The current client will automatically select the correct set of scanners based on
  the content of your project folder.
- A value of “true” will force the scanner to run (and fail if conditions are not
  met).
- By default hidden folders are excluded
- The client can work behind a proxy, which is a common situation in large enterprises.
- The client will read the standard variables 'http_proxy' or 'https_proxy' in order
  to detect such configuration automatically.
- The client is a Java native application written in Java8, so you will need to have
  a suitable JRE to run it.
- As the analysis on the dependencies is performed remotely, the client will need
  to have access to a working internet connection.
- The client will read the standard variables “http_proxy” or "https_proxy" in order
  to detect such configuration automatically.
- The client is a Java native application written in Java8.
- 'Certain scanners are able to work recursively: in that situation is possible to
  exclude folders from the analysis using standard global regexes separated by commas'
- The client uses a default set of score thresholds in order to validate if an analysis
  is successful or not.
- The client can directly generate a few reports
- The client will generally automatically detect manifest files and select/activate
  scanners accordingly.
- Some scanners are not enabled by default and it may be preferable to run separate
  analysis with different scanners enabled.
- For each of the section of the analysis (security, stability, licensing) the client
  can either analyze all the dependencies or only the ones that will be part of the
  production package, skipping the dependencies used in tests.
- This is normally configured in the dashboard, but the client can override those
  defaults.
- Engages the autofix mechanism that, when supported, automatically updates the manifest
  files fixing problems detected during the analysis.
- Enables the processing of Jupyter Notebooks written in Python.
- Enables the processing of DLLs during a .NET scan.
- Allows to run in debug mode, providing extensive log information that can be passed
  to the Meterian support when an intervention is required.
- 'A generic information dump used for diagnostic purposes. Possible values: tree
  -> display a basic dependency tree, dependencies -> display a basic list of dependencies.'
- When connecting to HTTPS websites the client can use additional X509 certificates
  to operate, as long they are accessible from the file system.
- Produces a JSON report file of the analysis (machine-readable)
- Produces a PDF report file of the analysis (human-readable)
- Produces a Junit XML report file of the analysis (machine-readable)
- Emits an analysis report on the console
- Produces a report file compatible with the Threadfix format
- Produces a SBOM report in various formats
- Some scanners are not enabled by default and may need to be activated manually.
- Allow in-depth configuration and control of the scanner engines.
- A set of control flags specific for each platform are available to further configure
  the client behaviour.
- Uses OAuth2 with refresh token — requires setup of connected app in meterian
- Scan for vulnerabilities in your project using the Meterian Client packaged as a
  Docker image.
- The scan happens in an isolated environment, inside the Docker container.
- The easiest way to use the dockerized Meterian Client is via the script meterian-docker.
- Enterprise customers can request to use custom algorithms to compute those scores.
- Scores range from 100 to 0, where 100 is the best score.
- The thin client requires a Java Runtime Environment 1.8+ to run.
- If you want to analyse a Java project based on Maven, then Maven will have to be
  installed on your machine.
- If you want to analyse a .NET project, the .NET SDK will have to be installed and
  correctly configured.
- The thin client requires Java Runtime Environment 1.8+ to run.
- If using Windows, refer to the page 'Use the thin client on Windows'.
- Requires setup of METERIAN_API_TOKEN environment variable
- Workflows are triggered on push; consult the detailed workflow syntax documentation
  for changes.
- Workflows are triggered on push
- Committing action workflow configurations will trigger your first workflow run which
  is visible on GitHub in the Actions tab of your repository
- If your workflow run is not triggered as expected ensure you have GitHub Actions
  enabled in your repository by reviewing the Actions Permissions in the Actions/General
  page of your repository settings.
- Meterian API requires OAuth2 authentication.
- Requires OAuth2 authentication to access the API
- You can setup a token with an expiration (which is recommended) or not.
- At any point in time you can revoke the token so that it won't be usable anymore.
- Badges can be used on public and private projects on GitHub.
- The system already provides pre-compiled templates to manage some common cases.
- Default team called 'Everyone' groups every single user in the account.
- To create a team simply add their name in their description from the left-hand side
  panel and click the 'Add' button.
- To add a member to a team simply select the team to work on first, and then from
  the 'Add a new member' section of the page right next to the teams panel add their
  details and click the button 'Add'.
- Advanced functionalities available
- Multi-factor authentication is an optional feature that has to be specifically requested.
- Users are required to verify their identity via a time-based one-time password (TOTP)
  sent by email.
- Multi-factor authentication enhances the security of your Meterian account. This
  is an optional feature that has to be specifically requested.
- 'Once authenticated, users can set a variety of factors: Authenticator app, SMS,
  Backup codes, Email.'
- New users with recognized email domains are added to existing paid accounts.
- Users can set a vulnerability exclusion from the Report page, the Meterian Dashboard
  or from the codebase using the .meterian file.
- New users usually get a fresh new opensource account, but if their email domain
  is recognized to be of a company that has a paid account in Meterian, then the new
  user is added to that account.
- Exclusions are a way to ignore vulnerabilities so they would not affect the scores.
  Although this is a very useful feature it is highly recommended to handle it with
  extra care.
- Third-party cookie blocks could prevent the Meterian Dashboard from successfully
  completing the login flow.
- Third-party cookie blocks could prevent the Meterian Dashboard from successfully
  completing the login flow. Try disabling the third-party cookie block from the Privacy
  Setting of your browser.
- Your privacy is important to us. By activating Meterian notifications for Slack,
  you agree to our Privacy Policy.
- Some objects may return nulls in deeply nested fields
- Select the Slack channel where to receive the Meterian Sentinel notifications
- A permission request form, handled by Slack, will be opened in a new page.
- Allerta sends notifications exclusively via email.
- Requires setup of OAuth2 credentials for Meterian
- Some endpoints may return nulls in certain fields
- Generating a badge for your repository is very simple and will create and refresh
  a report of your project' vulnerabilities so you do not have to worry about outdated
  reports.
- The report for your project will be automatically created (if not existing) and
  automatically refreshed daily.
- You can mark a project as Public to enable the private badge feature.
- In order to use this integration for private codebases you will need to be on any
  of our paid plans.
- Integration with cloud code repositories such as GitHub or Azure is supported.
- In order to use this integration you will need to be on any of our paid plans.
- Integration requires a paid plan.
- The experimental support for GCC/CLANG can be enabled using the --scan-gcc flag.
- The support is at the moment limited to Debian or RedHat based builds.
- The experimental support for Visual Studio C/C++ builds can be enabled using the
  --scan-gcc flag.
- The support is at the moment limited to Windows based builds.
- The experimental support for Visual Studio C/C++ builds can be enabled using the
  `--scan-gcc` flag.
- The Clojure analyser is disabled by default, so, in order for it to run, you will
  need to specifically request it using the parameter `--scan-clojure`.
- Clojure analyser is disabled by default, so, in order for it to run, you will need
  to specifically request it using the parameter `--scan-clojure`.
- The Dart/Flutter analyser is triggered when a "pubspec.yaml" is found at the root
  of the project.
- When the Dart SDK is not available, an alternative analyzer will be used.
- The Elixir/erlang analyser is triggered when a 'mix.exs' and 'mix.lock' is found
  at the root of the project.
- The analyser will load the dependencies from the lock file, so if a lock is missing,
  the analyser will fail.
- The standard dockerized client does not contain a Dart SDK, so in this situation
  the alternative analyzer will be used.
- The Go analyser is triggered when a “go.mod” is found in the root of the project.
- Your project has to build successfully before using Meterian.
- The Meterian scanner can be used to scan EAR or WAR files when those contain jar
  files.
- The script will also provide a dummy build.xml file to trigger the Ant plugin of
  the scanner.
- Vanilla Javascript is disabled by default, so, in order for it to run, you will
  need to specifically request the Javascript scan using the parameter --scan-javascript=true
- 'The .NET analyser is triggered by different conditions: a ''packages.config'' is
  found in the root folder, a ''packages'' subfolder is found in the root folder,
  a ''.csproj'' file is found in the root folder, or a ''paket.dependencies'' and
  ''paket.lock'' in the root folder.'
- 'Tool requirements: When using the thin client, exiftool needs to be installed on
  the machine running the scan. This is not required when using the dockerized client,
  where exiftool is pre-packaged.'
- When using the thin client, exiftool needs to be installed on the machine running
  the scan.
- This is not required when using the dockerized client, where exiftool is pre-packaged.
- When using the thin client, the required tools will have to be installed and configured
  (Npm). This is not required when using the dockerized client.
- When using the dockerized client via the meterian-docker script note that as a result
  of the global node modules cache directory being mapped into the container by default
  the version of `npm` that is installed on the host machine will be employed for
  the scan should you happen to have it installed.
- The PERL analyser is triggered when a 'cpanfile', 'cpanfile.snapshot', 'Meta.json',
  'Meta.yml' is found at the root of the project or in any subfolder.
- The PHP analyser is triggered when a 'composer.json' or 'composer.lock' is found
  in the root of the project.
- When operating on a PHP project the analyser will directly load the dependencies
  from the lock file.
- The Python analyser cannot work remotely.
- When using the thin client, the required tools will have to be installed and configured.
  This is not required when using the dockerized client.
- The analyser cannot work remotely.
- Requires setup of connected app in api
- The Ruby analyser is triggered when a 'gemfile.lock' is found in the root of the
  project.
- The RUST analyser is triggered when a “Cargo.toml” or “Cargo.lock” is found at the
  root of the project.
- When operating on a Rust project the analyser will load the dependencies from the
  lock file, so if a lock is missing, this will be generated using “cargo generate-lock”.
- The analyser may also use directly the "cargo" command in order to collect more
  information for certain dependencies.
- When using the thin client, the required tools may have to be installed and configured
  (cargo). This is not required when using the dockerized client.
- The scanner is normally disabled and you will need to the parameter `--scan-third-party`
  to activate it.
- The only requirement, assuming your license has the feature enabled, is to add to
  the client invocation the parameter `--scan-unity` when running it.
- Please note that the nodejs scanner is automatically disabled on unit project, unless
  it's explicitly required, using `--scan-nodejs`.
- Processing of Jupyter Notebooks can be slower than normal analysis.
- The only requirement, assuming your license has the feature enabled, is to add to
  the client invocation the parameter --scan-unity when running it.
- Please note that the nodejs scanner is automatically disabled on unit project, unless
  it's explicitly required, using --scan-nodejs.
- We expect licenses declaration in notebooks to be declared with the specific SPDX
  identifier of the license in the metadata of the notebook.
- A special id 'PROPRIETARY' can be used to identify proprietary notebooks.
- Add the parameter --scan-yocto when running the client to scan Yocto license manifest
  files.
- All open source container scanners are known to produce a certain amount of false
  positives.
- The Meterian scanner also offers pre-validated bindings to let customers add other
  non-open source scanners inside the cycle.
- The only requirement, assuming your license has the feature enabled, is to add to
  the client invocation the parameter `--scan-yocto` when running it.
- The Meterian Container Scanner is a separate product from the standard Meterian
  Client and has to be licensed separately.
- Analyses need to be authenticated hence you will need to provide a valid token through
  the environment variable METERIAN_API_TOKEN to execute one.
- Operational overrides are available through the environment variables
- Meterian's scanner is designed to address false positives.
- Uses OAuth2 with refresh token — requires setup of connected app in Meterian
- In order to use a .meterian file with the container scanner it must be present in
  the directory where you launch the scanner.
- In order to use a .trivyignore file to declare exclusions it must also be present
  in the directory where you launch the scanner.
- 'Displays a brief help page and exits (with code 0), like shown here:'
- Requires setup of connected app in Meterian
- The container scanner supports some pre-existing methods for declaring exclusions
- Every scan will be recorded and managed in the Meterian Dashboard
- Meterian servers at https://qa.meterian.io/ are reachable from this system
- Meterian servers are authorizing this client for account "Meterian Team Account"
- Produces a JSON report file of the analysis
- Produces a PDF report file of the analysis
- Produces a SBOM report, the format is defined based on the extension of the file
- Allow to specify a project URL to associate to this analysis.
- Allow to specify a project branch to associate to this analysis.
- Allow to specify a commit id to associate to this analysis.
- To perform a scan a valid Meterian API token must be set as environment variable
  on your system.
- Policy IDs can be found in the output of the console report (generated by invoking
  isaac scanner with flag `--report-console`)
- Resource-specific exclusions can be set via the .isaacignore file.
- The Resource ID is an identifier made by the name of a resource + @ + the relative
  path to the configuration file where it is defined.
- Alternatively, you can use a regular expression to target specific resources.
- Please consider using the 'Secrets Manager' rather than the 'Plaintext' option
- 'API tokens are available only on paid accounts: to upgrade your subscription, please
  contact us'
- checking the 'Keep this value secret' option will prevent the script from working
  as it will not be able to read it
- API tokens are available only on paid accounts
- A working example of the non-native integration via Docker can be found here.
- Rember to set the METERIAN_API_TOKEN environment variable
- A working example of the non-native integration using the Java Thin client can be
  found here.
- API tokens are available only on paid account.
- Requires setup of OAuth2 credentials in the Meterian dashboard
- As of now the git-resource always pulls the specified branch in detached mode causing
  the scan to report a misleading branch name unless the appropriate override is provided.
- Some API responses may include additional metadata fields.
- You can also pin a specific version of the image, like docker:20.10.16.
- OAuth2 with refresh token required for authentication
- This configuration uses the Meterian Dockerized Client image as the image for the
  entire build.
- The Unity scanner reads directly the manifest files of the project (manifest.json
  and packages-lock.json) to produce the bill of materials and detect any vulnerable
  or out of date component.
- We have to explicitly enable the Unity scanner engine (--scan-unity=true) and disable
  the NodeJS scanner (--scan-nodejs=false).
- The Docker-in-Docker pipeline configuration allows you to use the Meterian Dockerized
  Client directly in your pipeline.
- Project branch and project commits are collected from GitLab pipeline variables.
- The example uses the OpenJdk mini image to run a Java program.
- The above 'Meterian Scan' stage uses the withCredentials plugin for credentials
  binding and requires you to set your API token within Jenkins's credentials with
  an ID of choice.
- Once done configuring Save your work
- Now when you update the designated repository, a new build is triggered, as long
  as the Pipeline is configured with an SCM polling trigger.
- The 'Meterian Scan' stage uses the withCredentials plugin for credentials binding
  and requires you to set your API token within Jenkins's credentials with an ID of
  choice.
- Requires setup of a Meterian account and authorization.
- The scan job has the attribute allow_failure set to true and has the exit code of
  the client invocation overridden with the expression || true.
- Meterian will take care of the security of the opensource components used in your
  application.
- To ensure the results of the scan are uploaded the overall pipeline must succeed.
- Compatible with SonarQube v9.x and v10.0, v10.1
- 'Currently supported: SonarQube v9.x, SonarQube v10.0, v10.1'
- 'Roadmap: SonarQube v10.2+ (end of Q3), SonarCloud (Q4)'
- Different SonarScanners default to analyse different source folders.
- It is important that you ensure that your manifest files are within the sources
- DefectDojo supports Meterian security findings in the JSON format.
- You will have to login into Meterian to access the full web report.
- 'A Threadfix compatible report can be generated directly from any meterian client,
  adding the extra parameter: --report-threadfix=/tmp/report.threadfix.'
- Browse Projects and Create Issues permissions are required in Jira for the selected
  user.
- DefectDojo API key found in the user settings
- A dedicated instance on customer premises / private cloud with no internet connectivity
  required (OPO) is also available upon request.
- ArmorCode offers an out-of-the-box integration with Meterian, details are available
  at the ArmorCode integrations page.
- A dedicated and segregated instance, installed and run on customer premises / private
  cloud, will host exclusively the data of the customer.
- The machine will need to be connected to the internet, also via a standard proxy.
- Updates to the component databases can be done automatically, via daily connection
  to the main Meterian cloud databases (preferred) or by the customer.
- Updates to the software will be performed by the customer.
- General maintenance of the VM will have to be performed by the customer.
- Configuration of the Meterian SaaS will have to be performed by the customer.
- The system is distributed using an Ansible installation script.
- The dedicated instance is distributed using a Ansible installation script.
- A standard Ubuntu Linux Virtual Machine with a minimum configuration of 4 cores,
  16GB of memory and 120GB of free disk space.
- In order for the platform to run successfully a license is needed and it's provided
  by Meterian.
- The license needs to be physically copied on the target machine.
- The client is pre-configured to work against the dedicated instance.
- Dockerized Client must be configured manually.
- Ensure to set METERIAN_ENV, METRIAN_PROTO, and METRIAN_DOMAIN environment variables.
- Set environment variables METERIAN_ENV, METERIAN_PROTO, and METERIAN_DOMAIN to target
  the correct instance.
- The dedicated instance will need to be connected to the internet for updates.
- The IaC Scanner needs to be manually configured to ensure the scan runs for your
  dedicated instance.
- Token can be created from the account dashboard of any paid plan.
- Authorize API calls using your token.
- The usage of the dedicated instance client doesn't differ from the public client.
- The Account API gives basic insights and information about your account.
- The Dockerized Client must be configured manually.
- Set environment variables METERIAN_ENV, METERIAN_PROTO, and METERIAN_DOMAIN for
  configuration.
- 'Prior to invocation ensure you set the following environment variables: METERIAN_ENV,
  METERIAN_PROTO, METERIAN_DOMAIN.'
- If not logged in, the default account UUID is 'defadefa-defa-defa-defa-defadefadefa'.
- Token must be created from the account dashboard of any paid plan.
- API calls are authorized using the format 'token YOUR_TOKEN'.
- Do not be scared about the 'DEPRECATED', just click the 'Try it out', then enter
  the UUID of our account
- If you are not logged in, you will get the default account with a specific UUID.
- In order to use APIs to manage teams and members you will need an authorization
  token which is associated to an account administrator
- There are a few APIs that can be used to list your projects, but the simplest one
  is probably this one.
- Requires setup of API token for authorization
- Uses token-based authentication
- Long timeout may be required for generating large reports
- A prepared bible will expire usually in 10 minutes
errors:
- '401 Unauthorized: Check your credentials.'
- '403 Forbidden: You do not have access to this resource.'
- '401 Unauthorized: Recheck OAuth scopes or token expiration'
- 'REQUEST_LIMIT_EXCEEDED: Throttle API calls or reduce frequency'
- 'QUERY_TIMEOUT: Break down filters or add selectivity'
- Client successfully authorized
- No build running found!
- Build allowed
- The client will refuse to execute another analysis if the previous one is still
  in progress.
- -1 "No authorisation found"
- -2 "Failed to get authorisation via browser"
- -3 "Project unsupported"
- -6 "Analysis failed"
- -5 "A running build is present"
- -7 "Project URL was not specified"
- -8 "Error loading the configuration"
- -9 "Error communicating with cloud servers"
- -10 "Build tool not found"
- -12 "Plan limits exceeded"
- -13 "No analysis was run"
- -14 "Treoubleshooting failed"
- -15 "System unsupported"
- 'Using http proxy: http://proxy.acme.org:3128'
- Timeout in milliseconds to establish a connection over http/https is 9000.
- Timeout in milliseconds before declaring a connection over http/https dead is 8000.
- '--min-security: Specifies the minimum security score to pass the build, overriding
  what''s currently configured in the dashboard. Default: 90 or whatever is provided
  in the account.'
- '--min-stability: Specifies the minimum stability score to pass the build, overriding
  what''s currently configured in the dashboard. Default: 80 or whatever is provided
  in the account.'
- '--min-licensing: Specifies the minimum licensing score to pass the build, overriding
  what''s currently configured in the dashboard. Default: 95 or whatever is provided
  in the account.'
- '400 Bad Request: Check the request parameters.'
- '401 Unauthorized: Ensure the token is valid.'
- '403 Forbidden: You do not have permission to access this resource.'
- 'Build unsuccessful! Failed checks: [security]'
- '401 Unauthorized: Check your API token or OAuth scopes'
- '401 Unauthorized: Check your OAuth2 credentials'
- '404 Not Found: Verify the requested resource exists'
- 'Timeout: If the client times out, relaunch it.'
- '401 Unauthorized: Recheck API token'
- '401 Unauthorized: Check your credentials'
- '404 Not Found: The requested resource does not exist'
- '401 Unauthorized: Check token validity'
- '403 Forbidden: Access denied.'
- 'Build unsuccessful! Failed checks: [licensing]'
- 'Invalid token: Ensure you copied the token correctly.'
- '401 Unauthorized: Check your API token and permissions.'
- '403 Forbidden: Insufficient permissions'
- '404 Not Found: Endpoint does not exist'
- '401 Unauthorized: Recheck API token or permissions'
auth_info:
  mentioned_objects:
  - OauthToken
  - AuthProvider
  - NamedCredential
  - OAuthToken
client:
  base_url: https://www.meterian.com
  auth:
    type: oauth2
source_metadata: null
