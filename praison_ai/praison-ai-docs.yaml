resources:
- name: weather_agent
  endpoint:
    path: /weather
    method: POST
- name: stock_agent
  endpoint:
    path: /stock
    method: POST
- name: travel_agent
  endpoint:
    path: /travel
    method: POST
- name: DataCollector
  endpoint:
    path: /api/agents/data_collector
    method: POST
    data_selector: results
- name: internet_search_tool
  endpoint:
    path: /services/data/vXX.X/sobjects/internet_search_tool
    method: POST
    data_selector: results
    params: {}
- name: agents
  endpoint:
    path: /api/praisonaiagents/agents
    method: POST
    data_selector: agents
- name: tasks
  endpoint:
    path: /api/praisonaiagents/tasks
    method: POST
    data_selector: tasks
- name: GuardrailResult
  endpoint:
    path: /guardrailresult
    method: GET
    data_selector: records
- name: LLMGuardrail
  endpoint:
    path: /llmguardrail
    method: GET
    data_selector: records
- name: Task
  endpoint:
    path: /task
    method: GET
    data_selector: records
- name: guardrail_result
  endpoint:
    path: /api/guardrail-result
    method: GET
    data_selector: results
- name: llm_guardrail
  endpoint:
    path: /api/llm-guardrail
    method: GET
    data_selector: results
- name: task
  endpoint:
    path: /api/task
    method: GET
    data_selector: results
- name: input_handling_patterns
  endpoint:
    path: /docs/concepts/input-handling
    method: GET
    data_selector: patterns
    params: {}
- name: validation_workflow
  endpoint:
    path: /docs/features/workflow-validation
    method: GET
    data_selector: workflows
    params: {}
- name: input_handling_patterns
  endpoint:
    path: /docs/concepts/input-handling
    method: GET
    data_selector: patterns
    params: {}
- name: agent
  endpoint:
    path: /api/agent
    method: POST
    data_selector: agent_response
    params: {}
- name: validation
  endpoint:
    path: /api/validation
    method: POST
    data_selector: validation_result
    params: {}
- name: approval
  endpoint:
    path: /api/approval
    method: POST
    data_selector: approval_response
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: user_input
  endpoint:
    path: /api/v1/user_input
    method: POST
    data_selector: data
    params: {}
- name: session
  endpoint:
    path: /api/session
    method: POST
    data_selector: session_data
- name: memory
  endpoint:
    path: /api/memory
    method: POST
    data_selector: memory_data
- name: session
  endpoint:
    path: /api/session
    method: POST
    data_selector: session_data
- name: session
  endpoint:
    path: /api/session
    method: POST
    data_selector: session_data
- name: memory
  endpoint:
    path: /api/memory
    method: POST
    data_selector: memory_data
- name: session
  endpoint:
    path: /agent
    method: GET
    data_selector: response
    params: {}
- name: session
  endpoint:
    path: /api/session
    method: POST
    data_selector: session_data
    params: {}
- name: remote_session
  endpoint:
    path: /api/remote_session
    method: POST
    data_selector: remote_session_data
    params: {}
- name: session
  endpoint:
    path: /session
    method: POST
    data_selector: session_data
    params: {}
- name: session
  endpoint:
    path: /api/sessions
    method: POST
    data_selector: session_data
    params: {}
- name: memory
  endpoint:
    path: /api/memory
    method: GET
    data_selector: memory_data
    params: {}
- name: user_preferences
  endpoint:
    path: /user/preferences
    method: UPDATE
    data_selector: preferences
    params: {}
- name: session
  endpoint:
    path: /session
    method: POST
    data_selector: session_id
    params: {}
- name: session
  endpoint:
    path: /session
    method: POST
    data_selector: session_data
- name: usage_report
  endpoint:
    path: /api/usage/report
    method: GET
    data_selector: models_used
    params: {}
- name: user_preferences
  endpoint:
    path: /user/preferences
    method: POST
    data_selector: preferences
    params: {}
- name: RouterAgent
  endpoint:
    path: /praisonaiagents/agent/router_agent
    method: GET
    data_selector: agent
    params: {}
- name: Task
  endpoint:
    path: /praisonaiagents/task
    method: GET
    data_selector: task
    params: {}
- name: router_agent
  endpoint:
    path: /api/v1/router_agent
    method: POST
    data_selector: results
    params: {}
- name: RouterAgent
  endpoint:
    path: /api/router-agent
    method: POST
    data_selector: results
- name: router_agent
  endpoint:
    path: /api/router
    method: POST
    data_selector: data
    params: {}
- name: synthesis_task
  endpoint:
    path: /tasks/synthesize
    method: POST
    data_selector: results
    params: {}
- name: router_task
  endpoint:
    path: /tasks/route_task
    method: POST
    data_selector: results
    params: {}
- name: monitor_environment
  endpoint:
    path: /api/monitor_environment
    method: GET
    data_selector: results
    params: {}
- name: process_feedback
  endpoint:
    path: /api/process_feedback
    method: POST
    data_selector: results
    params: {}
- name: Agent
  endpoint:
    path: /api/agent
    method: POST
    data_selector: results
    params: {}
- name: Task
  endpoint:
    path: /api/task
    method: POST
    data_selector: results
    params: {}
- name: PraisonAIAgents
  endpoint:
    path: /api/praisonaiagents
    method: POST
    data_selector: results
    params: {}
- name: RouterAgent
  endpoint:
    path: /api/praisonaiagents/agent/router_agent
    method: POST
    data_selector: results
    params: {}
- name: repetitive_agent
  endpoint:
    path: /agents/repetitive
    method: POST
    data_selector: results
- name: route_task
  endpoint:
    path: /docs/api/praisonaiagents/task/route_task
    method: POST
    data_selector: task_results
    params: {}
- name: synthesize
  endpoint:
    path: /docs/api/praisonaiagents/task/synthesize
    method: POST
    data_selector: output
    params: {}
- name: loop_tasks
  endpoint:
    path: /api/loop_tasks
    method: POST
    data_selector: results
- name: agents
  endpoint:
    path: /api/agents
    method: GET
    data_selector: agents
- name: monitor_environment
  endpoint:
    params:
      incremental: updated_at
- name: process_feedback
  endpoint:
    params: {}
- name: repetitive_agents
  endpoint:
    path: /api/repetitive_agents
    method: POST
    data_selector: data
    params: {}
- name: customers
  endpoint:
    path: /customers
    method: GET
    data_selector: records
- name: questions
  endpoint:
    path: /questions
    method: GET
    data_selector: records
- name: repetitive_agents
  endpoint:
    path: /api/praisonaiagents
    method: POST
    data_selector: agents
    params: {}
- name: process_tasks
  endpoint:
    path: /api/praisonaiagents/process
    method: POST
    data_selector: tasks
    params: {}
- name: agents
  endpoint:
    path: /api/praisonaiagents/agents
    method: GET
- name: tasks
  endpoint:
    path: /api/praisonaiagents/tasks
    method: GET
- name: loop_task
  endpoint:
    path: /api/v1/loop_task
    method: POST
    data_selector: results
    params:
      task_type: loop
- name: loop_task
  endpoint:
    path: /api/praisonaiagents/tasks/loop
    method: POST
    data_selector: results
    params:
      input_file: tasks.csv
      max_iter: 30
- name: qa_agent
  endpoint:
    path: /api/praisonaiagents/agents/qa
    method: POST
    data_selector: results
    params:
      input_file: questions.csv
- name: agents
  endpoint:
    path: /api/praisonaiagents/agents
    method: POST
    data_selector: data
- name: tasks
  endpoint:
    path: /api/praisonaiagents/tasks
    method: POST
    data_selector: data
- name: summary_task
  endpoint:
    path: /summarize_results
    method: POST
    data_selector: results
    params:
      depends_on: process_questions
      aggregate_results: true
- name: repetitive_agents
  endpoint:
    path: /api/repetitive_agents
    method: POST
    data_selector: data
- name: customer_support
  endpoint:
    path: /api/customer_support
    method: POST
    data_selector: results
    params: {}
- name: data_processing
  endpoint:
    path: /api/data_processing
    method: POST
    data_selector: results
    params: {}
- name: AutoAgents
  endpoint:
    path: /api/praisonaiagents
    method: POST
- name: repetitive_agents
  endpoint:
    path: /api/praisonaiagents
    method: GET
- name: repetitive_agents
  endpoint:
    path: /api/repetitive_agents
    method: POST
    data_selector: results
- name: Agent
  endpoint:
    path: /api/agent
    method: POST
    data_selector: agent
    params: {}
- name: Task
  endpoint:
    path: /api/task
    method: POST
    data_selector: task
    params: {}
- name: PraisonAIAgents
  endpoint:
    path: /api/praisonaiagents
    method: POST
    data_selector: agents
    params: {}
- name: repetitive_agents
  endpoint:
    path: /api/repetitive_agents
    method: POST
    data_selector: results
- name: summarize_results
  endpoint:
    path: /summarize_results
    method: POST
    data_selector: summary
    params: {}
- name: agent
  endpoint:
    path: /api/agents
    method: POST
    data_selector: agentData
- name: task
  endpoint:
    path: /api/tasks
    method: POST
    data_selector: taskData
- name: Knowledge Agent
  endpoint:
    path: /api/praisonaiagents/agents
    method: POST
    data_selector: agents
    params: {}
- name: RAG Task
  endpoint:
    path: /api/praisonaiagents/tasks
    method: POST
    data_selector: tasks
    params: {}
- name: auto_agents
  endpoint:
    path: /api/praisonaiagents/agents/autoagents
    method: POST
    data_selector: results
- name: knowledge_agent
  endpoint:
    path: /api/praisonaiagents/knowledge
    method: POST
    data_selector: knowledge
    params: {}
- name: rag_agent
  endpoint:
    path: /api/praisonaiagents/rag
    method: POST
    data_selector: rag
    params: {}
- name: Agent
  endpoint:
    path: /api/praisonaiagents/agent
    method: POST
    data_selector: agent
    params: {}
- name: Task
  endpoint:
    path: /api/praisonaiagents/task
    method: POST
    data_selector: task
    params: {}
- name: PraisonAIAgents
  endpoint:
    path: /api/praisonaiagents/agents
    method: POST
    data_selector: agents
    params: {}
- name: agents
  endpoint:
    path: /api/praisonaiagents/agents
    method: POST
    data_selector: data
- name: tasks
  endpoint:
    path: /api/praisonaiagents/tasks
    method: POST
    data_selector: data
- name: agent
  endpoint:
    path: /agents
    method: POST
    data_selector: agent
    params: {}
- name: task
  endpoint:
    path: /tasks
    method: POST
    data_selector: task
    params: {}
- name: agent
  endpoint:
    path: /docs/api/praisonaiagents/agent/agent
    method: POST
    data_selector: result
- name: task
  endpoint:
    path: /docs/api/praisonaiagents/task/task
    method: POST
    data_selector: result
- name: agents
  endpoint:
    path: /docs/api/praisonaiagents/agents/agents
    method: POST
    data_selector: result
- name: Knowledge Agent
  endpoint:
    path: /api/praisonaiagents
    method: POST
    data_selector: records
- name: RAG Agent
  endpoint:
    path: /api/praisonaiagents/agents
    method: POST
    data_selector: records
- name: Knowledge Agent
  endpoint:
    path: /api/praisonaiagents/agent
    method: POST
    data_selector: knowledge
    params: {}
- name: RAG Agent
  endpoint:
    path: /api/praisonaiagents/agents
    method: POST
    data_selector: agents
    params: {}
- name: agents
  endpoint:
    path: /api/praisonaiagents/agents
    method: POST
    data_selector: result
- name: tasks
  endpoint:
    path: /api/praisonaiagents/tasks
    method: POST
    data_selector: result
- name: AsyncAgent
  endpoint:
    path: /api/agent
    method: POST
- name: Task
  endpoint:
    path: /api/task
    method: POST
- name: agents
  endpoint:
    path: /api/agents
    method: GET
    data_selector: agents
    params: {}
- name: tasks
  endpoint:
    path: /api/tasks
    method: GET
    data_selector: tasks
    params: {}
- name: weather_task
  endpoint:
    method: POST
- name: agents
  endpoint:
    path: /api/agents
    method: POST
    data_selector: data
- name: async_task
  endpoint:
    path: /api/praisonaiagents/task/task
    method: POST
    data_selector: task
    params: {}
- name: agent
  endpoint:
    path: /api/agent
    method: POST
    data_selector: results
- name: math_agent
  endpoint:
    path: /agents/math
    method: POST
    data_selector: result
    params:
      description: Calculate compound interest and statistical analysis
      expected_output: Detailed mathematical analysis
- name: code_agent
  endpoint:
    path: /api/agents
    method: POST
    data_selector: result
    params: {}
- name: math_agent
  endpoint:
    path: /agents/math
    method: POST
    data_selector: data
    params: {}
- name: statistician
  endpoint:
    path: /agents/statistics
    method: POST
    data_selector: data
    params: {}
- name: math_agent
  endpoint:
    path: /agents/math
    method: POST
    data_selector: data
    params: {}
- name: task
  endpoint:
    path: /tasks
    method: POST
    data_selector: data
    params: {}
- name: research_report
  endpoint:
    path: /api/research
    method: POST
    data_selector: results
- name: analysis_report
  endpoint:
    path: /api/analysis
    method: POST
    data_selector: results
- name: memory
  endpoint:
    path: /api/memory
    method: POST
    data_selector: memory_config
    params: {}
- name: agent
  endpoint:
    path: /api/agent
    method: POST
    data_selector: agent
    params: {}
- name: session
  endpoint:
    path: /api/session
    method: POST
    data_selector: session
    params: {}
- name: agent
  endpoint:
    path: /api/praisonaiagents/agent
    method: POST
- name: session
  endpoint:
    path: /api/praisonaiagents/session
    method: POST
- name: research_task
  endpoint:
    path: /api/research
    method: POST
    data_selector: structured_findings
- name: analysis_task
  endpoint:
    path: /api/analysis
    method: POST
    data_selector: structured_analysis_report
- name: agents
  endpoint:
    path: /api/v1/agents
    method: GET
    data_selector: agents
    params: {}
- name: sessions
  endpoint:
    path: /api/v1/sessions
    method: GET
    data_selector: sessions
    params: {}
- name: agent
  endpoint:
    path: /api/praisonaiagents/agent
    method: GET
    data_selector: records
    params: {}
- name: session
  endpoint:
    path: /api/praisonaiagents/session
    method: GET
    data_selector: records
    params: {}
- name: agent
  endpoint:
    path: /api/praisonaiagents/agent
    method: POST
    data_selector: agent
    params: {}
- name: session
  endpoint:
    path: /api/praisonaiagents/session
    method: POST
    data_selector: session
    params: {}
- name: agent
  endpoint:
    path: /api/agents
    method: POST
    data_selector: data
    params: {}
- name: session
  endpoint:
    path: /api/session
    method: POST
    data_selector: data
    params: {}
- name: Agent
  endpoint:
    path: /api/praisonaiagents/agent
    method: GET
- name: Session
  endpoint:
    path: /api/praisonaiagents/session
    method: GET
- name: agent
  endpoint:
    path: /api/praisonaiagents/agent
    method: POST
    data_selector: agent
    params: {}
- name: session
  endpoint:
    path: /api/praisonaiagents/session
    method: POST
    data_selector: session
    params: {}
- name: Agent
  endpoint:
    path: /api/praisonaiagents/agent/agent
    method: POST
- name: Session
  endpoint:
    path: /api/praisonaiagents/session
    method: POST
- name: chat
  endpoint:
    path: /chat
    method: POST
    data_selector: response
    params: {}
- name: Agent
  endpoint:
    path: /api/praisonaiagents/agent/agent
    method: POST
    data_selector: data
    params: {}
- name: Session
  endpoint:
    path: /api/praisonaiagents/session
    method: POST
    data_selector: data
    params: {}
- name: DataProcessor
  endpoint:
    path: /api/data_processor
    method: POST
    data_selector: result
    params: {}
- name: DataLoader
  endpoint:
    path: /api/data_loader
    method: POST
    data_selector: result
    params: {}
- name: DataCleaner
  endpoint:
    path: /api/data_cleaner
    method: POST
    data_selector: result
    params: {}
- name: Analyst
  endpoint:
    path: /api/analyst
    method: POST
    data_selector: result
    params: {}
- name: research_agent
  endpoint:
    path: /services/data/vXX.X/sobjects/ResearchAgent
    method: GET
    data_selector: records
- name: session
  endpoint:
    path: /services/data/vXX.X/sobjects/Session
    method: GET
    data_selector: records
- name: load_raw_data
  endpoint:
    path: /load_raw_data
    method: POST
    data_selector: summary
    params: {}
- name: clean_data
  endpoint:
    path: /clean_data
    method: POST
    data_selector: statistics
    params: {}
- name: analyze_data
  endpoint:
    path: /analyze_data
    method: POST
    data_selector: analysis_results
    params: {}
- name: summarize_chapter
  endpoint:
    path: /summarize_chapter
    method: POST
    data_selector: chapter_summary
    params: {}
- name: TaskContextControl
  endpoint:
    path: /api/task-context-control
    method: GET
- name: task_context_control
  endpoint:
    path: /api/task_context_control
    method: GET
    data_selector: records
    params: {}
- name: customer_data
  endpoint:
    path: /api/customer_data
    method: GET
    data_selector: customer_ids
    params: {}
- name: extract_key_data
  endpoint:
    path: /extract_key_data
    method: POST
    data_selector: output
    params: {}
- name: process_customers
  endpoint:
    path: /process_customers
    method: POST
    data_selector: output
    params: {}
- name: task_context_control
  endpoint:
    path: /api/task_context_control
    method: GET
    data_selector: data
    params: {}
- name: interaction_callback
  endpoint:
    path: /callbacks/interaction
    method: POST
    data_selector: interaction
    params: {}
- name: error_callback
  endpoint:
    path: /callbacks/error
    method: POST
    data_selector: error
    params: {}
- name: tool_call_callback
  endpoint:
    path: /callbacks/tool_call
    method: POST
    data_selector: tool_call
    params: {}
- name: self_reflection_callback
  endpoint:
    path: /callbacks/self_reflection
    method: POST
    data_selector: self_reflection
    params: {}
- name: instruction_callback
  endpoint:
    path: /callbacks/instruction
    method: POST
    data_selector: instruction
    params: {}
- name: generating_callback
  endpoint:
    path: /callbacks/generating
    method: POST
    data_selector: generating
    params: {}
- name: agent
  endpoint:
    path: /api/v1/agents
    method: POST
    data_selector: agent
    params: {}
- name: task
  endpoint:
    path: /api/v1/tasks
    method: POST
    data_selector: task
    params: {}
- name: DataProcessor
  endpoint:
    path: /api/v1/data-processor
    method: POST
    data_selector: output
    params: {}
- name: DataLoader
  endpoint:
    path: /api/v1/data-loader
    method: POST
    data_selector: output
    params: {}
- name: DataCleaner
  endpoint:
    path: /api/v1/data-cleaner
    method: POST
    data_selector: output
    params: {}
- name: Analyst
  endpoint:
    path: /api/v1/analyst
    method: POST
    data_selector: output
    params: {}
- name: context_management
  endpoint:
    path: /context
    method: POST
    data_selector: results
- name: context_manager
  endpoint:
    path: /context/manager
    method: POST
    data_selector: context_management
- name: token_counter
  endpoint:
    path: /token/counter
    method: POST
    data_selector: token_counting
- name: context_optimizer
  endpoint:
    path: /context/optimizer
    method: POST
    data_selector: optimization
- name: interaction
  endpoint:
    path: /interaction
    method: POST
    data_selector: message
- name: error
  endpoint:
    path: /error
    method: POST
    data_selector: message
- name: tool_call
  endpoint:
    path: /tool_call
    method: POST
    data_selector: message
- name: instruction
  endpoint:
    path: /instruction
    method: POST
    data_selector: message
- name: self_reflection
  endpoint:
    path: /self_reflection
    method: POST
    data_selector: message
- name: generating
  endpoint:
    path: /generating
    method: POST
    data_selector: content
- name: task
  endpoint:
    path: /tasks
    method: POST
    data_selector: tasks
    params: {}
- name: agent
  endpoint:
    path: /api/agents
    method: GET
    data_selector: agents
- name: task
  endpoint:
    path: /api/tasks
    method: GET
    data_selector: tasks
- name: CameraAnalyst
  endpoint:
    path: /camera/analysis
    method: POST
    data_selector: analysis_result
    params: {}
- name: CameraIntegration
  endpoint:
    path: /api/camera/integration
    method: POST
    data_selector: result
    params: {}
- name: CameraIntegration
  endpoint:
    path: /docs/features/camera-integration
    method: GET
    data_selector: camera integration details
- name: context_management
  endpoint:
    path: /api/context_management
    method: POST
    data_selector: context
    params: {}
- name: camera_feed
  endpoint:
    path: /api/camera
    method: POST
    data_selector: data
    params: {}
- name: camera
  endpoint:
    path: /api/camera
    method: POST
    data_selector: frames
    params: {}
- name: video
  endpoint:
    path: /api/video
    method: POST
    data_selector: videos
    params: {}
- name: Camera Feed
  endpoint:
    path: /camera/integration
    method: POST
    data_selector: results
    params: {}
- name: camera_feed
  endpoint:
    path: /api/camera_integration
    method: POST
    data_selector: data
    params: {}
- name: Camera Feed Analysis
  endpoint:
    path: /api/camera/integration
    method: POST
    data_selector: results
    params: {}
- name: agent
  endpoint:
    path: /api/praisonaiagents/agent
    method: POST
    data_selector: result
    params: {}
- name: memory
  endpoint:
    path: /api/praisonaiagents/memory
    method: POST
    data_selector: result
    params: {}
- name: camera_capture
  endpoint:
    path: /api/camera/capture
    method: POST
    data_selector: data
    params: {}
- name: camera_analysis
  endpoint:
    path: /api/camera/analyze
    method: POST
    data_selector: data
    params: {}
- name: Agent
  endpoint:
    path: /api/praisonaiagents/agent
    method: POST
    data_selector: agent
    params: {}
- name: Memory
  endpoint:
    path: /api/praisonaiagents/memory
    method: POST
    data_selector: memory
    params: {}
- name: camera_feed_analysis
  endpoint:
    path: /api/camera_analysis
    method: POST
    data_selector: results
    params: {}
- name: memory_tiers
  endpoint:
    path: /services/data/vXX.X/sobjects/MemoryTiers
    method: GET
    data_selector: records
- name: CameraIntegration
  endpoint:
    path: /api/camera/integration
    method: POST
    data_selector: data
- name: camera_integration
  endpoint:
    path: /docs/features/camera-integration
    method: GET
    data_selector: data
    params: {}
- name: memory
  endpoint:
    path: /api/memory
    method: GET
    data_selector: records
- name: camera_feed
  endpoint:
    path: /api/v1/camera_feed
    method: POST
    data_selector: results
    params: {}
- name: camera_integration
  endpoint:
    path: /docs/features/camera-integration
    method: GET
    data_selector: camera integration
- name: agent
  endpoint:
    path: /api/praisonaiagents/agent
    method: POST
    data_selector: agent_info
- name: memory
  endpoint:
    path: /api/praisonaiagents/memory
    method: GET
    data_selector: memory_records
- name: agent
  endpoint:
    path: /api/praisonaiagents/agent
    method: POST
    data_selector: agent
    params: {}
- name: memory
  endpoint:
    path: /api/praisonaiagents/memory
    method: POST
    data_selector: memory
    params: {}
- name: short_term_memory
  endpoint:
    path: /short_term_memory
    method: POST
    data_selector: context
    params: {}
- name: long_term_memory
  endpoint:
    path: /long_term_memory
    method: POST
    data_selector: memories
    params: {}
- name: entity_memory
  endpoint:
    path: /entity_memory
    method: POST
    data_selector: entities
    params: {}
- name: knowledge_base
  endpoint:
    path: /docs/api/praisonaiagents
    method: GET
    data_selector: records
- name: session
  endpoint:
    path: /api/v1/sessions
    method: POST
    data_selector: session_data
    params: {}
- name: short_term_memory
  endpoint:
    path: /docs/api/praisonaiagents/memory/short_term
    method: GET
    data_selector: records
- name: long_term_memory
  endpoint:
    path: /docs/api/praisonaiagents/memory/long_term
    method: GET
    data_selector: records
- name: entity_memory
  endpoint:
    path: /docs/api/praisonaiagents/memory/entity
    method: GET
    data_selector: records
- name: user_memory
  endpoint:
    path: /docs/api/praisonaiagents/memory/user
    method: GET
    data_selector: records
- name: session
  endpoint:
    path: /api/praisonaiagents/session
    method: POST
    data_selector: session
    params: {}
- name: remote_agent
  endpoint:
    path: /api/praisonaiagents/remote_agent
    method: POST
    data_selector: remote_agent
    params:
      agent_url: http://192.168.1.10:8000/agent
- name: session
  endpoint:
    path: /agent
    method: POST
    data_selector: content
- name: agent
  endpoint:
    path: /api/agents
    method: POST
    data_selector: data
    params: {}
- name: memory
  endpoint:
    path: /api/memory
    method: GET
    data_selector: memories
    params: {}
- name: session
  endpoint:
    path: /session
    method: POST
    data_selector: session
    params: {}
- name: remote_agent
  endpoint:
    path: /agent
    method: POST
    data_selector: content
    params: {}
- name: session
  endpoint:
    path: /agent
    method: POST
    data_selector: content
    params: {}
- name: memory_config
  endpoint:
    path: /api/memory/config
    method: GET
    data_selector: config
- name: session
  endpoint:
    path: /agent
    method: POST
    data_selector: content
- name: knowledge
  endpoint:
    path: /api/praisonaiagents/knowledge
    method: GET
    data_selector: records
- name: session
  endpoint:
    path: /agent
    method: POST
    data_selector: content
- name: knowledge_base
  endpoint:
    path: /docs/api/praisonaiagents
    method: GET
    data_selector: records
- name: agent
  endpoint:
    path: /api/praisonaiagents/agent
    method: POST
    data_selector: agent_response
- name: approval
  endpoint:
    path: /api/praisonaiagents/approval
    method: POST
    data_selector: approval_response
- name: session
  endpoint:
    path: /api/sessions
    method: POST
    data_selector: session
    params: {}
- name: session
  endpoint:
    path: /api/praisonaiagents/session
    method: POST
    data_selector: session
    params: {}
- name: remote_agent
  endpoint:
    path: /api/praisonaiagents/remote_agent
    method: POST
    data_selector: agent
    params: {}
- name: approval
  endpoint:
    path: /docs/features/approval
    method: GET
- name: session
  endpoint:
    path: /agent
    method: POST
    data_selector: content
    params: {}
- name: session
  endpoint:
    path: /agent
    method: POST
    data_selector: content
    params:
      session_id: unique_session_id
- name: approval_requests
  endpoint:
    path: /api/approval_requests
    method: GET
    data_selector: records
- name: session
  endpoint:
    path: /agent
    method: POST
    data_selector: content
- name: session
  endpoint:
    path: /agent
    method: POST
    data_selector: content
    params:
      session_id: unique_session_id
- name: session
  endpoint:
    path: /agent
    method: POST
    data_selector: content
- name: triage_agent
  endpoint:
    path: /api/agents/triage
    method: POST
    data_selector: response
    params: {}
- name: Agent
  endpoint:
    path: /api/praisonaiagents/agent/agent
    method: GET
- name: ShellTool
  endpoint:
    path: /api/praisonaiagents/tools/shelltool
    method: GET
- name: billing_agent
  endpoint:
    path: /agents/billing
    method: GET
    data_selector: agent_info
    params: {}
- name: technical_agent
  endpoint:
    path: /agents/technical
    method: GET
    data_selector: agent_info
    params: {}
- name: manager_agent
  endpoint:
    path: /agents/manager
    method: GET
    data_selector: agent_info
    params: {}
- name: approval
  endpoint:
    path: /docs/features/approval
    method: GET
    data_selector: operations
- name: risk_levels
  endpoint:
    path: /docs/features/risk-levels
    method: GET
    data_selector: levels
- name: RouterAgent
  endpoint:
    path: /api/praisonaiagents/routeragent
    method: POST
    data_selector: models
    params: {}
- name: RouterAgent
  endpoint:
    path: /api/praisonaiagents/RouterAgent
    method: GET
- name: RouterAgent
  endpoint:
    path: /api/praisonaiagents/router
    method: POST
    data_selector: response
    params: {}
- name: ModelRouter
  endpoint:
    path: /api/praisonaiagents/modelrouter
    method: POST
    data_selector: response
    params: {}
- name: RouterAgent
  endpoint:
    path: /api/praisonaiagents/router
    method: POST
- name: triage_agent
  endpoint:
    path: /api/v1/triage_agent
    method: POST
    data_selector: response
    params: {}
- name: billing_agent
  endpoint:
    path: /api/v1/billing_agent
    method: POST
    data_selector: response
    params: {}
- name: refund_agent
  endpoint:
    path: /api/v1/refund_agent
    method: POST
    data_selector: response
    params: {}
- name: RouterAgent
  endpoint:
    path: /api/praisonaiagents/RouterAgent
    method: GET
    data_selector: models
    params: {}
- name: billing_agent
  endpoint:
    path: /agents/billing
    method: POST
    data_selector: agent
    params: {}
- name: technical_agent
  endpoint:
    path: /agents/technical
    method: POST
    data_selector: agent
    params: {}
- name: manager_agent
  endpoint:
    path: /agents/manager
    method: POST
    data_selector: agent
    params: {}
- name: support_agent
  endpoint:
    path: /agents/support
    method: POST
    data_selector: agent
    params: {}
- name: RouterAgent
  endpoint:
    path: /api/v1/router
    method: POST
    data_selector: response.data
    params: {}
- name: RouterAgent
  endpoint:
    path: /api/praisonaiagents/routeragent
    method: POST
    data_selector: response
    params: {}
- name: RouterAgent
  endpoint:
    path: /api/routeragent
    method: POST
    data_selector: response
    params: {}
- name: ModelRouter
  endpoint:
    path: /api/modelrouter
    method: POST
    data_selector: response
    params: {}
- name: RouterAgent
  endpoint:
    path: /api/praisonaiagents/agent/router
    method: POST
    data_selector: response
    params: {}
- name: ModelRouter
  endpoint:
    path: /api/praisonaiagents/router
    method: POST
    data_selector: response
    params: {}
- name: RouterAgent
  endpoint:
    path: /api/praisonaiagents/routeragent
    method: POST
    data_selector: router
    params: {}
- name: Agent
  endpoint:
    path: /api/praisonaiagents/agent
    method: POST
    data_selector: agent
    params: {}
- name: ModelRouter
  endpoint:
    path: /api/praisonaiagents/modelrouter
    method: POST
    data_selector: model_router
    params: {}
- name: agents
  endpoint:
    path: /agents
    method: GET
- name: Quality RAG Agent
  endpoint:
    path: /quality_rag_agent
    method: POST
    data_selector: results
    params: {}
- name: ollama
  endpoint:
    path: /v1
    method: GET
    data_selector: models
    params: {}
- name: Quality RAG Agent
  endpoint:
    path: /services/data/vXX.X/sobjects/QualityRAGAgent
    method: GET
    data_selector: records
    params: {}
- name: Anthropic Claude
  endpoint:
    path: /models/bedrock/anthropic.claude-3-5-sonnet-20241022-v2
    method: POST
- name: Amazon Titan
  endpoint:
    path: /models/bedrock/amazon.titan-text-express-v1
    method: POST
- name: researcher
  endpoint:
    path: /agents
    method: POST
    data_selector: roles
    params:
      framework: crewai
      topic: create movie script about cat in mars
- name: Knowledge Agent
  endpoint:
    path: /agent
    method: POST
    data_selector: response
    params: {}
- name: ollama
  endpoint:
    path: /v1
    method: GET
    data_selector: records
    params: {}
- name: Ollama
  endpoint:
    path: /v1
    method: GET
    data_selector: records
- name: FastChat
  endpoint:
    path: /v1
    method: GET
    data_selector: records
- name: LM Studio
  endpoint:
    path: /v1
    method: GET
    data_selector: records
- name: Mistral API
  endpoint:
    path: /v1
    method: GET
    data_selector: records
- name: agent
  endpoint:
    path: /api/v1/agents
    method: POST
    data_selector: data
    params: {}
- name: agents
  endpoint:
    path: /api/agents
    method: POST
    data_selector: result
    params: {}
- name: tasks
  endpoint:
    path: /api/tasks
    method: POST
    data_selector: result
    params: {}
- name: models
  endpoint:
    path: /models
    method: GET
- name: latency_tracker
  endpoint:
    path: /api/praisonaiagents
    method: GET
    data_selector: metrics
    params: {}
- name: Knowledge Agent
  endpoint:
    path: /api/praisonaiagents/agents
    method: POST
    data_selector: knowledge
    params: {}
- name: latency
  endpoint:
    path: /putMetricData
    method: POST
    data_selector: metrics
    params: {}
- name: alarm
  endpoint:
    path: /putMetricAlarm
    method: POST
    data_selector: alarms
    params: {}
- name: latency_metrics
  endpoint:
    path: /cloudwatch/put_metric_data
    method: POST
    data_selector: MetricData
- name: latency_alarm
  endpoint:
    path: /cloudwatch/put_metric_alarm
    method: POST
    data_selector: AlarmName
- name: latency_tracker
  endpoint:
    path: /latency/tracker
    method: POST
    data_selector: metrics
    params: {}
- name: latency
  endpoint:
    path: /metrics/latency
    method: POST
    data_selector: metrics
    params: {}
- name: alarm
  endpoint:
    path: /alarms
    method: POST
    data_selector: alarms
    params: {}
- name: latency_tracker
  endpoint:
    path: /api/latency
    method: GET
    data_selector: metrics
    params: {}
- name: latency
  endpoint:
    path: /PutMetricData
    method: POST
    data_selector: MetricData
    params:
      namespace: PraisonAI
- name: alarm
  endpoint:
    path: /PutMetricAlarm
    method: POST
    data_selector: Alarm
    params: {}
- name: latency_tracker
  endpoint:
    path: /api/praisonaiagents/latency-tracking
    method: GET
    data_selector: metrics
- name: telemetry
  endpoint:
    path: /api/praisonaiagents/telemetry
    method: GET
    data_selector: metrics
- name: telemetry
  endpoint:
    path: /api/praisonaiagents/telemetry
    method: GET
    data_selector: metrics
    params: {}
- name: latency
  endpoint:
    path: /put_metric_data
    method: POST
    data_selector: metrics_buffer
    params: {}
- name: alarm
  endpoint:
    path: /put_metric_alarm
    method: POST
    data_selector: alarm
    params: {}
- name: telemetry
  endpoint:
    path: /api/praisonaiagents/telemetry
    method: GET
    data_selector: metrics
- name: latency_metrics
  endpoint:
    path: /put_metric_data
    method: POST
    data_selector: MetricData
    params: {}
- name: alarms
  endpoint:
    path: /put_metric_alarm
    method: POST
    data_selector: AlarmData
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: latency_metrics
  endpoint:
    path: /metrics
    method: POST
    data_selector: metrics
    params: {}
- name: alarms
  endpoint:
    path: /alarms
    method: POST
    data_selector: alarms
    params: {}
- name: latency
  endpoint:
    path: /metrics
    method: PUT
    data_selector: MetricData
- name: alarm
  endpoint:
    path: /alarms
    method: PUT
    data_selector: AlarmName
- name: InternetSearchTool
  endpoint:
    path: /docs/api/praisonaiagents
    method: GET
    data_selector: records
- name: telemetry
  endpoint:
    path: /api/praisonaiagents/telemetry
    method: GET
    data_selector: metrics
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
- name: InternetSearchTool
  endpoint:
    path: /search
    method: GET
    data_selector: results
    params:
      keywords: query
      region: wt-wt
      safesearch: moderate
      max_results: 5
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: agent
  endpoint:
    path: /api/agent
    method: GET
    data_selector: records
    params: {}
- name: InternetSearchTool
  endpoint:
    path: /search
    method: GET
    data_selector: results
    params:
      max_results: 5
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: test_config
  endpoint:
    params:
      test_api_key: test-key-123
      max_test_duration: 30
      mock_response_delay: 0.1
- name: agent_requests
  endpoint:
    path: /api/v1/agent_requests
    method: GET
    data_selector: records
    params: {}
- name: agent_latency
  endpoint:
    path: /api/v1/agent_latency
    method: GET
    data_selector: records
    params: {}
- name: TestAgent
  endpoint:
    path: /api/v1/agent
    method: GET
    data_selector: records
    params: {}
- name: Task
  endpoint:
    path: /api/v1/task
    method: GET
    data_selector: records
    params: {}
- name: memory_test
  endpoint:
    path: /tests/performance/test_memory.py
    method: GET
    data_selector: tests
    params: {}
- name: llm_mock
  endpoint:
    path: /tests/mocks/llm_mock.py
    method: GET
    data_selector: tests
    params: {}
- name: agent
  endpoint:
    path: /api/v1/agent
    method: GET
    data_selector: records
    params: {}
- name: Agent
  endpoint:
    path: /api/agent
    method: POST
    data_selector: data
- name: Task
  endpoint:
    path: /api/task
    method: POST
    data_selector: data
- name: Tool
  endpoint:
    path: /api/tool
    method: POST
    data_selector: data
- name: TestAgent
  endpoint:
    method: GET
- name: ToolAgent
  endpoint:
    method: GET
- name: SearchAgent
  endpoint:
    method: GET
- name: performance_test
  endpoint:
    path: /tests/performance
    method: GET
    data_selector: results
- name: Agent
  endpoint:
    path: /api/agents
    method: GET
    data_selector: agents
- name: Task
  endpoint:
    path: /api/tasks
    method: GET
    data_selector: tasks
- name: Agent
  endpoint:
    path: /api/praisonaiagents/agent
    method: POST
    data_selector: data
- name: Task
  endpoint:
    path: /api/praisonaiagents/task
    method: POST
    data_selector: data
- name: Tool
  endpoint:
    path: /api/praisonaiagents/tool
    method: POST
    data_selector: data
- name: performance_tests
  endpoint:
    path: /tests/performance
    method: GET
    data_selector: ''
    params: {}
- name: memory_tests
  endpoint:
    path: /tests/memory
    method: GET
    data_selector: ''
    params: {}
- name: mock_tests
  endpoint:
    path: /tests/mocks
    method: GET
    data_selector: ''
    params: {}
- name: test_data_management
  endpoint:
    path: /tests/data
    method: GET
    data_selector: ''
    params: {}
- name: continuous_integration
  endpoint:
    path: /.github/workflows/test.yml
    method: GET
    data_selector: ''
    params: {}
- name: agent
  endpoint:
    path: /api/v1/agents
    method: GET
    data_selector: data
    params: {}
- name: task
  endpoint:
    path: /api/v1/tasks
    method: GET
    data_selector: data
    params: {}
- name: agent
  endpoint:
    path: /agents
    method: GET
    data_selector: agents
- name: task
  endpoint:
    path: /tasks
    method: GET
    data_selector: tasks
- name: concurrent_agents
  endpoint:
    path: /tests/performance/test_concurrent_agents
    method: GET
    data_selector: results
    params: {}
- name: async_performance
  endpoint:
    path: /tests/performance/test_async_performance
    method: GET
    data_selector: results
    params: {}
- name: memory_leak
  endpoint:
    path: /tests/performance/test_memory_leak
    method: GET
    data_selector: results
    params: {}
- name: conversation_memory_limit
  endpoint:
    path: /tests/performance/test_conversation_memory_limit
    method: GET
    data_selector: results
    params: {}
- name: performance_tests
  endpoint:
    path: /tests/performance
    method: GET
    data_selector: results
    params: {}
- name: agent
  endpoint:
    path: /api/v1/agents
    method: GET
    data_selector: agents
- name: task
  endpoint:
    path: /api/v1/tasks
    method: GET
    data_selector: tasks
- name: performance_test
  endpoint:
    path: /tests/performance/test_memory
    method: GET
    data_selector: results
    params: {}
- name: mock_testing
  endpoint:
    path: /tests/mocks/tool_mock
    method: GET
    data_selector: results
    params: {}
- name: performance_tests
  endpoint:
    path: /tests/performance
    method: GET
    data_selector: results
    params: {}
- name: memory_tests
  endpoint:
    path: /tests/memory
    method: GET
    data_selector: results
    params: {}
- name: agent
  endpoint:
    path: /agents
    method: GET
    data_selector: data
    params: {}
- name: task
  endpoint:
    path: /tasks
    method: GET
    data_selector: data
    params: {}
- name: agents
  endpoint:
    path: /api/v1/agents
    method: GET
    data_selector: data
    params: {}
- name: tasks
  endpoint:
    path: /api/v1/tasks
    method: GET
    data_selector: data
    params: {}
- name: performance_tests
  endpoint:
    path: /tests/performance
    method: GET
    data_selector: tests
    params: {}
- name: performance_test
  endpoint:
    path: /tests/performance
    method: GET
    data_selector: performance_results
    params: {}
- name: agents
  endpoint:
    path: /api/praisonaiagents
    method: GET
    data_selector: records
- name: TestPerformance
  endpoint:
    path: /tests/performance/test_performance.py
    method: GET
    data_selector: results
- name: TestMemoryUsage
  endpoint:
    path: /tests/performance/test_memory.py
    method: GET
    data_selector: results
- name: agents
  endpoint:
    path: /api/praisonaiagents
    method: GET
    data_selector: records
    params: {}
- name: agents
  endpoint:
    path: /docs/api/praisonaiagents/agents/agents
    method: GET
- name: tasks
  endpoint:
    path: /docs/api/praisonaiagents/task/task
    method: GET
- name: process
  endpoint:
    path: /docs/api/praisonaiagents/process/process
    method: GET
- name: agent
  endpoint:
    path: /api/v1/agents
    method: GET
    data_selector: data
- name: agent
  endpoint:
    path: /agents
    method: POST
    data_selector: data
    params:
      incremental: created_at
- name: task
  endpoint:
    path: /tasks
    method: POST
    data_selector: data
    params: {}
- name: agent
  endpoint:
    path: /agents
    method: POST
    data_selector: data
    params: {}
- name: task
  endpoint:
    path: /tasks
    method: POST
    data_selector: data
    params: {}
- name: agent
  endpoint:
    path: /api/agents
    method: POST
    data_selector: data
- name: task
  endpoint:
    path: /api/tasks
    method: POST
    data_selector: data
- name: agents
  endpoint:
    path: /agents
    method: POST
    data_selector: results
- name: tasks
  endpoint:
    path: /tasks
    method: POST
    data_selector: results
- name: agent
  endpoint:
    path: /api/praisonaiagents/agent/agent
    method: POST
- name: task
  endpoint:
    path: /api/praisonaiagents/task/task
    method: POST
- name: agents
  endpoint:
    path: /api/praisonaiagents/agents/agents
    method: POST
- name: vision_agent
  endpoint:
    path: /api/vision
    method: POST
    data_selector: results
    params: {}
- name: writer_agent
  endpoint:
    path: /api/writer
    method: POST
    data_selector: results
    params: {}
- name: dataset
  endpoint:
    path: /dataset
    method: GET
    data_selector: records
    params: {}
- name: media_processing
  endpoint:
    path: /api/v1/media
    method: POST
    data_selector: results
- name: Database Configuration
  endpoint:
    path: /docs/postgresql-configuration
    method: GET
    data_selector: records
- name: Key Features
  endpoint:
    path: /docs/key-features
    method: GET
    data_selector: records
notes:
- Uses API key for authentication
- Uses OAuth2 with refresh token — requires setup of connected app in api
- Some objects like Contact may return nulls in deeply nested fields
- OpenAI API key required for the agent’s LLM
- API supports multiple agents with different endpoints on the same server.
- Set API Key as an environment variable using OPENAI_API_KEY
- Uses API Key for authentication.
- Ensure you generate your OpenAI API key from OpenAI.
- Set your OpenAI API key as an environment variable in your terminal.
- Generate your OpenAI API key from OpenAI.
- For other LLM providers, see Models for more information.
- Always implement proper error handling and resource management in your agent configurations.
- 'Install the core package: pip install praisonaiagents'
- Generate your OpenAI API key from OpenAI
- Requires setup of OpenAI API key as an environment variable.
- Support for different memory types (short-term, long-term).
- 'Document Preparation: Clean and well-formatted documents work best, break large
  documents into smaller chunks, use consistent formatting.'
- 'Knowledge Organization: Group related documents together, use meaningful file names,
  keep knowledge bases focused and relevant.'
- 'Performance Optimization: Monitor vector store size, clean up unused collections,
  use appropriate chunk sizes.'
- 'Multi-Agent Coordination: Define clear roles and responsibilities, set appropriate
  logging levels for debugging, use unique collection names for different agent groups.'
- Dynamic routing based on conversation context and agent expertise
- Guardrails provide validation and quality assurance for task outputs.
- Proper input handling is crucial for building robust AI applications.
- Input validation is crucial for building robust AI applications.
- 'Always Validate Input: Never trust user input; validate type, format, and content'
- 'Sanitise for Context: Different contexts require different sanitisation (SQL, HTML,
  shell)'
- 'Fail Safely: Provide clear error messages without exposing system details'
- 'Log Suspicious Input: Track validation failures for security monitoring'
- 'Use Approval Systems: Require confirmation for high-risk operations'
- 'Rate Limit: Prevent abuse with appropriate rate limiting'
- 'Test Edge Cases: Include empty strings, special characters, and boundary values'
- 'Provide Clear Feedback: Help users understand validation requirements'
- Uses OAuth2 with refresh token — requires setup of connected app in PraisonAI
- Session management allows for persistent conversations across multiple interactions
- User-specific memory and preferences can be maintained
- Session management supports persistent conversations and user-specific contexts.
- Persistent conversations across multiple interactions
- User-specific memory and preferences
- Session management enables persistent conversations across multiple interactions
- State checkpointing and recovery is supported
- Uses OpenAI API key for authentication
- Requires OpenAI API key to be set as an environment variable
- Dynamic decision-making in workflows
- Conditional task execution paths
- Memory integration supports user-specific memory and preferences
- Requires OpenAI API key.
- The RouterAgent uses execute() or start() methods, not chat()
- Cost threshold is set on ModelRouter, not RouterAgent directly
- Provider preferences are configured via ModelRouter
- Model tracking is done via get_usage_report(), not last_model_used
- Ensure routing logic is well-defined and workers are properly configured for specialized
  tasks.
- Basic understanding of Python required
- Set your OpenAI API key as an environment variable
- Ensure your environment monitoring is reliable and feedback processing logic is
  properly configured for effective adaptation.
- Requires OpenAI API key set as an environment variable
- For optimal results, ensure your chain is properly configured with clear task dependencies
  and conditions for branching logic.
- Ensure to install the PraisonAI Agents package using pip.
- OpenAI API key must be set as an environment variable.
- Enable verbose mode for debugging
- Uses OpenAI API key for authentication.
- Python 3.10 or higher is required.
- Dynamic task distribution and routing
- Specialized worker execution
- Result synthesis and aggregation
- Always use `PraisonAIAgents` class, not `Process` directly
- Set `process="workflow"` for loop tasks to work properly
- Include `max_iter` to prevent infinite loops
- The CSV file must exist before starting the process
- Ensure your environment monitoring is reliable and your feedback processing logic
  is properly configured for effective adaptation.
- Requires OpenAI API key as an environment variable.
- Always use PraisonAIAgents class, not Process directly
- Set process="workflow" for loop tasks to work properly
- Include max_iter to prevent infinite loops
- The input file must exist before starting the process
- Ensure your chain is properly configured with clear task dependencies and conditions
  for branching logic.
- Ensure your generator instructions and evaluation criteria are clear and well-defined
  to achieve the desired optimization outcomes.
- Automated task loops
- Batch processing
- Consistent task execution
- Efficient handling of multiple similar tasks
- Requires OpenAI API key for integration
- Set process='workflow' for loop tasks to work properly
- Ensure CSV files are properly formatted
- Requires OpenAI API key for access
- Always validate input files before processing
- For large files, use streaming
- Save results progressively
- Use quotes for fields with commas
- Requires OpenAI API key set as environment variable
- Set API Key as an environment variable in your terminal.
- Use 'PraisonAIAgents' class, not 'Process' directly.
- Asynchronous operations for better performance in concurrent environments.
- Detailed output logging for better debugging and monitoring.
- Requires OpenAI API key to function.
- Package needs to be installed using pip.
- Complete workflow includes dependencies on other tasks
- Enable verbose mode for debugging and clarity in tasks.
- Set your OpenAI API key as an environment variable.
- Set your OpenAI API key as an environment variable in your terminal
- Uses OpenAI API key for authentication. Set as an environment variable.
- Ensure your vector database is properly configured and indexed for your specific
  use case.
- 'Install required packages: pip install "praisonaiagents[llm]"'
- 'Set API Key: export OPENAI_API_KEY=your_api_key_here'
- Requires OpenAI API key to be set as an environment variable.
- Enable verbose mode for debugging issues with responses or quality.
- Enable verbose mode for debugging.
- OpenAI API key with vision model access is required
- Requires setup of OpenAI API key as environment variable
- Ensure media files are in supported formats and sizes for processing.
- The reasoning agent uses a specialized model (deepseek-reasoner) optimized for step-by-step
  analysis, while the small agent can use a more general-purpose model for processing
  the reasoning output.
- Requires OpenAI API key set as an environment variable.
- OpenAI API key is required as an environment variable.
- Enable verbose mode for detailed logging
- Be mindful of rate limits and resource usage when processing tasks in parallel.
- Requires setup of connected app in PraisonAI
- Some agents may require specific tools to function properly
- Async AI Agents allow you to run AI tasks asynchronously, improving performance
  and efficiency in your applications.
- 'Generate question and answer in csv format without headers: question, answer and
  append to qa_pairs.csv file'
- 'Upload to Huggingface: Save to cot_solutions.csv and upload to mervinpraison/cot-dataset'
- OpenAI API key is required.
- Basic understanding of async/await in Python is necessary.
- Set your OpenAI API key and E2B API key as an environment variable in your terminal
- Requires setup of OpenAI API key as an environment variable
- Ensure code is properly formatted and tested in the sandbox environment before production
  use.
- Ensure agent instructions are clear and complementary
- Install required packages using pip
- Requires OpenAI API key and E2B API key as environment variables
- Model capabilities are constantly evolving.
- System automatically updates capability profiles through regular testing and performance
  monitoring.
- Enable verbose mode for detailed logging during execution.
- Model capabilities are constantly evolving. The system automatically updates capability
  profiles through regular testing and performance monitoring to ensure accurate recommendations.
- PraisonAI provides a comprehensive stateful agents framework that enables building
  persistent, memory-aware agents capable of maintaining context across sessions,
  learning from interactions, and executing complex multi-step workflows.
- Use Python 3.10 or higher
- OpenAI API key is required
- Some responses may have rate limits applied
- PraisonAI provides a comprehensive stateful agents framework that enables building
  persistent, memory-aware agents capable of maintaining context across sessions.
- PraisonAI provides a comprehensive stateful agents framework.
- Memory system includes short-term, long-term, entity, user, and graph memory.
- Some objects may return nulls in deeply nested fields
- Use meaningful session IDs that can be restored later
- Save session state at key workflow milestones
- Uses OAuth2 with refresh token — requires setup of connected app in API
- Some objects like Session may return nulls in deeply nested fields
- Manage context size and information flow in long workflows
- Callbacks can be registered for various events in the AI agent lifecycle.
- Requires setup of API key for authentication.
- Some tasks may have limitations on context size
- Implement proper error handling
- Use try-catch blocks
- Log errors appropriately
- Handle edge cases
- Keep callbacks lightweight
- Avoid blocking operations
- Use async when appropriate
- Monitor resource usage
- 'Context Loss: Important information not reaching later tasks'
- 'Token Limits: Exceeding model token limits'
- 'Performance Degradation: Slow processing with large contexts'
- Ensure your PDFs are properly formatted and text-searchable.
- Python 3.10 or higher is required
- OpenAI API key is needed; generate it at https://platform.openai.com/api-keys
- Automatic token limit handling, context optimization, and intelligent truncation
  for efficient LLM usage.
- The context manager automatically handles the large input.
- Async callbacks allow you to handle events asynchronously.
- For optimal chat experience, ensure your PDFs are properly formatted and text-searchable.
- Effective context window management is crucial for handling large documents, maintaining
  conversation history, and optimizing token usage.
- Camera integration works by capturing frames/videos from camera using OpenCV
- There’s no built-in camera capture, integration requires capturing frames or videos
  and passing them to vision agents
- Context Window Management automatically handles token limits across different models.
- PraisonAI supports camera integration for real-time visual analysis through multimodal
  agents.
- While there’s no built-in camera capture, you can easily integrate camera feeds
  by capturing frames or videos and passing them to vision agents.
- Camera integration supports real-time visual analysis through multimodal agents.
- No built-in camera capture; integration requires frame capture using OpenCV.
- Camera integration for real-time visual analysis through multimodal agents.
- Multi-tiered memory with quality scoring and graph support
- User, agent, and run-specific memory scoping
- Camera integration works by capturing frames/videos from camera using OpenCV.
- Temporary files are cleaned up after analysis.
- Uses OpenCV for capturing frames and videos.
- PraisonAI supports camera integration for real-time visual analysis.
- Uses OpenCV for camera capture
- Temporary files are cleaned up after analysis
- Multi-tiered memory with quality scoring and optional graph database support.
- User-specific memory is supported.
- Provider options include 'rag' and 'mem0' for memory configuration.
- The session system provides stateful conversation management and remote agent connectivity.
- Sessions provide stateful conversation management and remote agent connectivity,
  enabling persistent interactions and distributed agent deployments.
- Response structure may vary based on request type
- Sessions provide stateful conversation management and remote agent connectivity
- 'State persistence location includes: .sessions/{session_id}/state.json, .sessions/{session_id}/memory/,
  .sessions/{session_id}/knowledge/'
- Advanced knowledge management system for AI agents
- Remote agents follow the Google ADK (Agent Development Kit) pattern for standardised
  communication.
- Tools automatically require approval based on risk.
- Categorize tools by risk level (critical, high, medium, low).
- The approval system allows you to require human approval before executing dangerous
  operations.
- Sessions provide stateful conversation management and remote agent connectivity.
- Guardrails provide validation and quality assurance mechanisms for agent outputs,
  supporting both function-based and LLM-based validation to ensure outputs meet specific
  criteria.
- Remote agents follow the Google ADK pattern for standardized communication.
- Handoffs enable seamless task delegation between specialised agents
- Requires human approval for operations categorized by risk level.
- Implement human-in-the-loop approval for dangerous operations
- Uses structured input models for complex handoff scenarios
- Implement callbacks to track handoff patterns
- Categorizes tools by risk level (critical, high, medium, low).
- Dynamic model selection based on task requirements
- Automatic fallback when providers fail
- Cost-optimized routing for different task complexities
- Performance-based routing for critical operations
- Load balancing across providers
- Circuit breaker patterns for provider health
- Guardrails provide output validation and quality assurance for agent tasks, ensuring
  results meet specified criteria before being accepted.
- Advanced patterns for multi-provider LLM switching including fallback, load balancing,
  and circuit breakers.
- Handoffs allow agents to transfer control based on conversation context.
- Useful for customer service routing and specialized task delegation.
- Advanced patterns for multi-provider LLM switching including fallback, load balancing,
  and circuit breakers
- 'Clear Agent Responsibilities: Each agent should have a well-defined role and expertise
  area'
- 'Minimal Context: Use filters to pass only relevant conversation history'
- 'Structured Data: Use Pydantic models for complex handoff scenarios'
- 'Monitoring: Implement callbacks to track handoff patterns'
- 'Graceful Fallbacks: Always have a path for unhandled scenarios'
- Quality metrics are automatically calculated for stored content
- Only high-quality information is stored in long-term memory
- Automatic fallback when primary model fails.
- Cost-optimized routing for different task complexities.
- Advanced multi-provider support allows dynamic model selection.
- Automatic fallback when providers fail.
- Set your Gemini API key
- Implement validation feedback and retry mechanisms in your workflows.
- AWS Bedrock charges are based on input and output tokens.
- 'Infinite Loops: Always implement retry limits or escalation paths'
- 'Context Loss: Ensure feedback is properly propagated between retries'
- 'Unclear Criteria: Define specific, measurable validation criteria'
- Ollama is required for Local RAG Agents.
- Streamlit for UI is optional.
- Uses Ollama's open-source language models with configuration and usage examples.
- Requires setup of API key
- PraisonAI Train currently tested on Linux with 1 GPU. With pytorch-cuda=12.1
- Set your Gemini API key using the environment variable GEMINI_API_KEY.
- Use clear and specific roles and goals for agents
- Implement task callbacks for better error handling
- Make sure to set your AWS_REGION environment variable to a supported region.
- Implement comprehensive performance monitoring to track, analyse, and optimise latency
  across your PraisonAI applications.
- Latency tracking enables phase-specific performance monitoring and request-level
  metrics collection.
- Monitor and optimise performance with comprehensive latency tracking in PraisonAI
- CloudWatch requires correct IAM permissions to access metrics and alarms.
- Low-code solution to run CrewAI with integrated tools and features.
- Low-code solution to run AG2 with integrated tools and features.
- API includes built-in error handling for rate limits, token limits, timeouts, and
  execution failures.
- Requires setup of AGENTOPS_API_KEY environment variable
- Batch send when buffer is full
- Batch send metrics when buffer is full (20 metrics)
- Threshold for alarm can be set to any value, default is 1000ms
- Telemetry is included by default and automatically enabled unless disabled.
- No personal data, prompts, responses, or user content is ever collected.
- Uses CloudWatch for tracking latency metrics and creating alarms.
- Add OPENAI_API_KEY Secrets to Google Colab on the Left Hand Side 🔑 or Enter Manually
- Monitor trends to detect degradation
- Review concurrent request handling
- Guide for implementing and using custom tools in PraisonAI with Google Colab.
- Telemetry tracks automatically without collecting personal data, prompts, or responses.
- No personal data, prompts, responses, or user content is ever collected. Only anonymous
  usage metrics are tracked.
- This setup will allow you to develop locally with live reload, making it easier
  to test and iterate on your code.
- Requires API keys for authentication
- Uses AWS Secrets Manager for secure API key retrieval if use_aws_secrets is True
- Rate limiting is set to 60 requests per minute.
- Testing AI agents presents unique challenges like non-deterministic outputs and
  external dependencies.
- Deploying AI agents in production requires careful consideration of performance
  and scalability, security and compliance, monitoring and observability, cost optimization,
  error handling and recovery.
- 'Testing AI agents presents unique challenges: Non-deterministic outputs, External
  dependencies (LLMs, APIs), Complex interaction patterns, Performance considerations,
  Cost implications.'
- Testing agents may require mock data or services.
- Simulates processing time with a sleep delay
- Returns random default response if no specific response matches
- Enable caching for common queries
- Use faster models for simple tasks
- Implement request queuing
- Add more agent instances
- Implement proper cleanup in agents
- Use context managers
- Limit conversation history
- Regular garbage collection
- Implement exponential backoff
- Use multiple API keys
- Add request queuing
- Cache frequent requests
- Comprehensive testing is crucial for building reliable AI agent systems.
- Average response time under 5 seconds
- Average under 3 seconds
- Testing Agents Guide includes unit tests, integration tests, and performance testing
- Comprehensive testing guide for AI agents.
- Includes unit, integration, and performance testing.
- Good test names
- Some API responses may contain nested structures
- Test API key is provided for testing purposes.
- API responses may vary based on the request parameters.
- Memory increase should be reasonable
- Check memory is limited
- Tests average response times and memory usage of agents.
- Requires API key for authentication
- Performance tests include concurrency and async execution patterns.
- Memory tests check for leaks and limits on conversation memory.
- Good test names include descriptive actions and expected outcomes.
- API key is required for authentication
- Rate limits apply to API calls
- Tests include performance and memory usage scenarios
- Tests include performance tests for both concurrent and asynchronous agents.
- Memory tests check for memory leaks and limits in conversation memory.
- Instructions for initializing PraisonAI with API keys and creating the initial agents
  configuration file
- Supports automatic agent generation with PraisonAI Agents, CrewAI and AG2 frameworks.
- Verbose mode can be enabled for debugging purposes.
- Enable self-reflection for agents to improve response quality.
- Configure reflection parameters based on use case requirements.
- Requires installation of PraisonAI Agents package.
- Ensure your problem descriptions are clear and provide sufficient context for the
  reasoning agents.
- Enable detailed logging for debugging.
- Use supported formats (JPEG, PNG)
- Keep reasonable file sizes
- 'Default Username: admin'
- 'Default Password: admin'
- PraisonAI Chat supports custom database configurations, allowing you to use PostgreSQL
  or other databases instead of the default SQLite database.
- 'If no DATABASE_URL is provided, PraisonAI Chat will automatically use SQLite with
  the following default configuration: DATABASE_URL=sqlite+aiosqlite:///{HOME}/.praison/database.sqlite'
- Supports custom database configurations, including PostgreSQL
- If no DATABASE_URL is provided, defaults to SQLite
errors:
- 'REQUEST_LIMIT_EXCEEDED: Throttle API calls or reduce frequency'
- 'QUERY_TIMEOUT: Break down filters or add selectivity'
- '401 Unauthorized: Recheck OAuth scopes or token expiration'
- '401 Unauthorized: Recheck API key validity'
- 'SESSION_NOT_FOUND: Ensure the session ID is correct'
- 'INVALID_SESSION_STATE: The session is not in a valid state'
- 'FileNotFoundError: Check if the session file exists'
- 'REQUEST_TIMEOUT: Ensure the server is running and reachable'
- '401 Unauthorized: Recheck API key or permissions.'
- 'Routing conditions not met: Check routing conditions and worker availability.'
- '401 Unauthorized: Check your API key and its permissions.'
- '400 Bad Request: Ensure required fields are included in requests.'
- '429 Too Many Requests: Rate limit exceeded, try again later.'
- Check environment access
- Verify state detection
- '401 Unauthorized: Recheck API key or token expiration'
- 'INVALID_API_KEY: Check if the API key is valid'
- 'RATE_LIMIT_EXCEEDED: Slow down your requests'
- '404 Not Found: Check the endpoint URL'
- '400 Bad Request: Validate input data format'
- '400 Bad Request: Check the format of the input data'
- '401 Unauthorized: Ensure API key is valid'
- '429 Too Many Requests: Rate limit exceeded'
- '400 Bad Request: Verify input file format'
- '500 Internal Server Error: Check server logs for details'
- '401 Unauthorized: Check your OpenAI API key.'
- '400 Bad Request: Ensure the request payload is correctly formatted.'
- 'FileNotFoundError: Input file not found'
- '401 Unauthorized: Recheck API key or permissions'
- 'Error during async search: {e}'
- 'INVALID_API_KEY: Check your API key and try again'
- 'TASK_NOT_FOUND: Verify the task ID and try again'
- '401 Unauthorized: Check your API key'
- '404 Not Found: Verify the endpoint path'
- '500 Internal Server Error: Try again later'
- 'ChatCompletion can’t be used in await expression: Use AsyncOpenAI() client.'
- 'Event loop is closed: Use asyncio.run() for main entry.'
- '401 Unauthorized: Recheck API key'
- Check syntax errors
- Verify package imports
- Check environment setup
- '401 Unauthorized: Invalid API key or missing authorization header.'
- '400 Bad Request: Check request parameters and payload.'
- '400 Bad Request: Check input data structure'
- '401 Unauthorized: Verify API key'
- '500 Internal Server Error: Retry the request'
- '401 Unauthorized: Recheck API key or token expiration.'
- '401 Unauthorized: Check API key validity'
- '404 Not Found: Ensure the endpoint path is correct'
- Ensure correct API key is set as an environment variable
- '401 Unauthorized: Check your API key.'
- '500 Internal Server Error: Try again later.'
- Check PDF file format and encoding
- Verify document accessibility
- Enable verbose mode for debugging
- 'CAMERA_NOT_FOUND: Check available cameras'
- 'PERMISSION_ISSUES: Ensure application has camera access'
- 'Camera Not Found: Ensure the camera is connected'
- 'Permission Issues: Check for camera access permissions'
- '401 Unauthorized: Check your API key and permissions.'
- '404 Not Found: Ensure the endpoint URL is correct.'
- '500 Internal Server Error: Try again later or contact support.'
- '400 Bad Request: Check request parameters'
- '401 Unauthorized: Invalid API key'
- '500 Internal Server Error: Retry the request later'
- 'APPROVAL_REQUIRED: User approval is required before executing the command.'
- 'ProviderError: Provider failed'
- 'MaxRetriesError: All providers failed'
- 'AccessDeniedException: Check your IAM permissions'
- 'ResourceNotFoundException: Verify the model ID is correct and available in your
  region'
- 'ThrottlingException: Implement retry logic with exponential backoff'
- 'ValidationException: Check your input parameters and format'
- 'API rate limits: Throttle API calls'
- 'Token limits: Review token usage'
- 'Task timeouts: Ensure tasks are optimized'
- 'Ollama Issues: Check if Ollama is running, Verify model is downloaded, Check port
  availability'
- 'Performance Issues: Check system resources, Adjust max_tokens, Monitor memory usage'
- API rate limits
- Token limits
- Task timeouts
- Tool execution failures
- 'InvalidParameterValue: The value of the parameter is invalid'
- 'ResourceNotFound: The specified resource does not exist'
- 'ThrottlingException: Reduce the frequency of requests'
- 'InvalidParameterValue: Check the parameters provided for the API call'
- 'Telemetry not tracking: Check environment variables aren’t disabling it.'
- Check if telemetry.enabled is True.
- 'Telemetry Not Working: If telemetry isn’t tracking, check environment variables
  aren’t disabling it.'
- No available agents
- '401 Unauthorized: Check API key or authentication settings.'
- '429 errors: rejected requests'
- '401 Unauthorized: Invalid API key.'
- '400 Bad Request: Check the request format and parameters.'
- '401 Unauthorized: API key is missing or invalid.'
- '404 Not Found: The requested resource could not be found.'
- '401 Unauthorized: Check API key'
- '404 Not Found: Verify endpoint path'
- 'ValueError: Invalid input values'
- '400 Bad Request: Check the request payload for correctness.'
- '401 Unauthorized: Ensure API key is set correctly.'
- '401 Unauthorized: Check if the OpenAI API key is set correctly.'
- '400 Bad Request: Ensure all required fields are included in the request.'
- 'INVALID_MEDIA: Check format and size of media files'
- 'PROCESSING_FAILED: Verify media accessibility and quality'
- '400 Bad Request: Check the request format and parameters'
- '401 Unauthorized: Verify API key validity'
auth_info:
  mentioned_objects:
  - OauthToken
  - AuthProvider
  - NamedCredential
  - RouterAgent
  - ModelRouter
  - PraisonAIAgents
  - Session
  - Agent
  - Memory
  - OAuthToken
  - ApprovalDecision
  - OPENROUTER_API_KEY
  - ApiKey
  - APIKey
client:
  base_url: https://api.praisonai.com
  auth:
    type: apikey
    location: header
    header_name: Authorization
  headers:
    Accept: application/json
source_metadata: null
