resources:
- name: name_translation
  endpoint:
    path: /rest/v1/name-translation
    method: POST
    data_selector: translation
- name: name_translation
  endpoint:
    path: /name-translation
    method: POST
    data_selector: translations
    params: {}
- name: supported_languages
  endpoint:
    path: /name-translation/supported-languages
    method: GET
    data_selector: supportedLanguagePairs
    params: {}
- name: topic_extractor
  endpoint:
    path: /analytics/text-analytics/topic-extractor/extract-topics
    method: POST
    data_selector: keyphrases
    params: {}
- name: topic_extractor
  endpoint:
    path: /analytics/text-analytics/topic-extractor/extract-topics
    method: POST
    data_selector: keyphrases
    params: {}
- name: sentiment_analyzer
  endpoint:
    path: /analytics/text-analytics/sentiment-analyzer
    method: POST
    data_selector: sentiment
    params: {}
- name: topic_extractor
  endpoint:
    path: /analytics/text-analytics/topic-extractor/extract-topics
    method: POST
    data_selector: keyphrases
    params: {}
- name: ping
  endpoint:
    path: /ping
    method: GET
- name: info
  endpoint:
    path: /info
    method: GET
- name: sentiment
  endpoint:
    path: /sentiment
    method: POST
    data_selector: result
    params:
      content: sentiment_file_data
      language: eng
- name: categories
  endpoint:
    path: /categories
    method: POST
    data_selector: result
    params:
      content: categories_text_data
- name: name_similarity
  endpoint:
    path: /rest/v1/name-similarity
    method: POST
    data_selector: score
    params: {}
- name: supported_languages
  endpoint:
    path: /name-similarity/supported-languages
    method: GET
    data_selector: languages
    params: {}
- name: name_similarity
  endpoint:
    path: /rest/v1/name-similarity
    method: POST
    data_selector: result
    params: {}
- name: address_similarity
  endpoint:
    path: /rest/v1/address-similarity
    method: POST
    data_selector: results
- name: supported_languages
  endpoint:
    path: /rest/v1/address-similarity/supported-languages
    method: GET
    data_selector: supportedLanguagePairs
- name: name_deduplication
  endpoint:
    path: name-deduplication
    method: POST
    data_selector: result
    params: {}
- name: name_translation
  endpoint:
    path: name-translation
    method: POST
    data_selector: result
    params: {}
- name: name_translation
  endpoint:
    path: /name-translation
    method: POST
    data_selector: content
    params: {}
- name: language_identifier
  endpoint:
    path: /language
    method: POST
    data_selector: content
    params: {}
- name: language
  endpoint:
    path: /rest/v1/language/supported-languages
    method: GET
    data_selector: supportedLanguages
- name: morphology_complete
  endpoint:
    path: /rest/v1/morphology/complete
    method: POST
    data_selector: tokens
- name: morphology_complete
  endpoint:
    path: /morphology/complete
    method: POST
    data_selector: content
- name: morphology_lemmas
  endpoint:
    path: /morphology/lemmas
    method: POST
    data_selector: content
- name: morphology_parts_of_speech
  endpoint:
    path: /morphology/parts-of-speech
    method: POST
    data_selector: content
- name: morphology_compound_components
  endpoint:
    path: /morphology/compound-components
    method: POST
    data_selector: content
- name: morphology
  endpoint:
    path: /morphology/han-readings
    method: POST
    data_selector: content
- name: tokens
  endpoint:
    path: /tokens
    method: POST
    data_selector: content
- name: supported_languages
  endpoint:
    path: /tokens/supported-languages
    method: GET
    data_selector: supportedLanguages
- name: tokens
  endpoint:
    path: /rest/v1/tokens
    method: POST
    data_selector: content
- name: sentences
  endpoint:
    path: /rest/v1/sentences
    method: POST
    data_selector: content
- name: supported_languages_tokens
  endpoint:
    path: /rest/v1/tokens/supported-languages
    method: GET
    data_selector: supportedLanguages
- name: supported_languages_sentences
  endpoint:
    path: /rest/v1/sentences/supported-languages
    method: GET
    data_selector: supportedLanguages
- name: entities
  endpoint:
    path: /rest/v1/entities
    method: POST
    data_selector: entities
- name: ping
  endpoint:
    path: /ping
    method: GET
- name: info
  endpoint:
    path: /info
    method: GET
- name: entities
  endpoint:
    path: /entities
    method: POST
    data_selector: entitiesResponse
- name: sentiment
  endpoint:
    path: sentiment
    method: POST
    data_selector: response
    params:
      content: documentFile
- name: categories
  endpoint:
    path: categories
    method: POST
    data_selector: response
    params:
      content: documentFile
- name: name_similarity
  endpoint:
    path: /rest/v1/name-similarity
    method: GET
    data_selector: ''
- name: supported_languages
  endpoint:
    path: /name-similarity/supported-languages
    method: GET
    data_selector: ''
- name: entities
  endpoint:
    path: /rest/v1/entities
    method: POST
    data_selector: content
    params: {}
- name: similar_terms
  endpoint:
    path: /rest/v1/semantics/similar
    method: POST
    data_selector: similarTerms
    params: {}
- name: vector
  endpoint:
    path: /rest/v1/semantics/vector
    method: POST
    data_selector: documentEmbedding
    params: {}
- name: name_similarity
  endpoint:
    path: /name-similarity
    method: POST
    data_selector: response
    params: {}
- name: sentiment
  endpoint:
    path: /rest/v1/sentiment
    method: POST
    data_selector: document
    params:
      content: string
      language: string
      options:
        modelType: string
- name: supported_languages
  endpoint:
    path: /sentiment/supported-languages
    method: GET
    data_selector: supportedLanguages
    params: {}
- name: address_similarity
  endpoint:
    path: /address-similarity
    method: POST
    data_selector: results
- name: supported_languages
  endpoint:
    path: /address-similarity/supported-languages
    method: GET
    data_selector: supportedLanguagePairs
- name: sentiment
  endpoint:
    path: /rest/v1/sentiment
    method: POST
    data_selector: content
- name: topics
  endpoint:
    path: /rest/v1/topics
    method: POST
    data_selector: content
- name: name_deduplication
  endpoint:
    path: /rest/v1/name-deduplication
    method: POST
    data_selector: response
    params: {}
- name: name_translation
  endpoint:
    path: /rest/v1/name-translation
    method: POST
    data_selector: response
    params: {}
- name: topics
  endpoint:
    path: /topics
    method: POST
    data_selector: content
    params: {}
- name: categories
  endpoint:
    path: /categories
    method: POST
    data_selector: content
    params: {}
- name: name_translation
  endpoint:
    path: name-translation
    method: POST
    data_selector: result
    params: {}
- name: language
  endpoint:
    path: language
    method: POST
    data_selector: result
    params: {}
- name: categories
  endpoint:
    path: /categories
    method: GET
    data_selector: supportedLanguages
- name: language
  endpoint:
    path: /language
    method: POST
    data_selector: content
    params: {}
- name: morphology_complete
  endpoint:
    path: /morphology/complete
    method: POST
    data_selector: content
    params: {}
- name: morphology_complete
  endpoint:
    path: /morphology/complete
    method: POST
    data_selector: content
- name: morphology_lemmas
  endpoint:
    path: /morphology/lemmas
    method: POST
    data_selector: content
- name: lemmas
  endpoint:
    path: /morphology
    method: POST
    data_selector: content
- name: parts-of-speech
  endpoint:
    path: /morphology/parts-of-speech
    method: POST
    data_selector: content
- name: compound-components
  endpoint:
    path: /morphology/compound-components
    method: POST
    data_selector: content
- name: ping
  endpoint:
    path: /ping
    method: GET
    data_selector: response
- name: info
  endpoint:
    path: /info
    method: GET
    data_selector: response
- name: morphology_han_readings
  endpoint:
    path: /morphology/han-readings
    method: POST
    data_selector: content
- name: tokens
  endpoint:
    path: /tokens
    method: POST
    data_selector: content
- name: supported_languages
  endpoint:
    path: /morphology/supported-languages
    method: GET
    data_selector: supportedLanguages
- name: sentiment
  endpoint:
    path: /rest/v1/sentiment
    method: POST
    data_selector: response
    params:
      content: sentiment_file_data
- name: categories
  endpoint:
    path: /rest/v1/categories
    method: POST
    data_selector: response
    params:
      content: categories_text_data
- name: name_similarity
  endpoint:
    path: /rest/v1/name-similarity
    method: POST
    data_selector: score
- name: tokens
  endpoint:
    path: /tokens
    method: POST
    data_selector: content
- name: sentences
  endpoint:
    path: /sentences
    method: POST
    data_selector: content
- name: supported_languages_tokens
  endpoint:
    path: /tokens/supported-languages
    method: GET
- name: supported_languages_sentences
  endpoint:
    path: /sentences/supported-languages
    method: GET
- name: entities
  endpoint:
    path: /entities
    method: POST
    data_selector: content
- name: name_similarity
  endpoint:
    path: /rest/v1/name-similarity
    method: POST
    data_selector: result
- name: entities
  endpoint:
    path: /entities
    method: POST
    data_selector: entitiesResponse
- name: address_similarity
  endpoint:
    path: /rest/v1/address-similarity
    method: POST
    data_selector: results
    params: {}
- name: supported_languages
  endpoint:
    path: /rest/v1/address-similarity/supported-languages
    method: GET
    data_selector: supportedLanguagePairs
    params: {}
- name: entities
  endpoint:
    path: /entities
    method: POST
    data_selector: content
    params: {}
- name: similar_terms
  endpoint:
    path: /semantics/similar
    method: POST
    data_selector: similarTerms
    params: {}
- name: vector
  endpoint:
    path: /semantics/vector
    method: POST
    data_selector: documentEmbedding
    params: {}
- name: name_deduplication
  endpoint:
    path: name-deduplication
    method: POST
    data_selector: result
    params: {}
- name: name_translation
  endpoint:
    path: name-translation
    method: POST
    data_selector: result
    params: {}
- name: sentiment
  endpoint:
    path: /rest/v1/sentiment
    method: POST
    data_selector: document
    params:
      content: string
      language: string
      options:
        modelType: string
- name: supported_languages
  endpoint:
    path: /sentiment/supported-languages
    method: GET
    data_selector: supportedLanguages
    params: {}
- name: name_translation
  endpoint:
    path: name-translation
    method: POST
    data_selector: content
- name: language_identifier
  endpoint:
    path: language
    method: POST
    data_selector: content
- name: morphology
  endpoint:
    path: /morphology/complete
    method: POST
    data_selector: tokens
    params:
      content: string
- name: sentiment
  endpoint:
    path: /rest/v1/sentiment
    method: POST
    data_selector: content
    params: {}
- name: topics
  endpoint:
    path: /rest/v1/topics
    method: POST
    data_selector: content
    params: {}
- name: topics
  endpoint:
    path: topics
    method: POST
    data_selector: content
- name: categories
  endpoint:
    path: categories
    method: POST
    data_selector: content
- name: morphology_complete
  endpoint:
    path: /morphology/complete
    method: POST
    data_selector: content
- name: morphology_lemmas
  endpoint:
    path: /morphology/lemmas
    method: POST
    data_selector: content
- name: categories
  endpoint:
    path: /rest/v1/categories
    method: GET
    data_selector: supportedLanguages
- name: morphology_lemmas
  endpoint:
    path: /morphology
    method: POST
    data_selector: content
- name: morphology_parts_of_speech
  endpoint:
    path: /morphology/parts-of-speech
    method: POST
    data_selector: content
- name: morphology_compound_components
  endpoint:
    path: /morphology/compound-components
    method: POST
    data_selector: content
- name: morphology_han_readings
  endpoint:
    path: /rest/v1/morphology/han-readings
    method: POST
    data_selector: content
- name: tokens
  endpoint:
    path: /rest/v1/tokens
    method: POST
    data_selector: content
- name: supported_languages
  endpoint:
    path: /rest/v1/morphology/supported-languages
    method: GET
    data_selector: supportedLanguages
- name: ping
  endpoint:
    path: /ping
    method: GET
- name: info
  endpoint:
    path: /info
    method: GET
- name: sentences
  endpoint:
    path: /rest/v1/sentences
    method: POST
    data_selector: sentences
    params:
      content: string
- name: supported_languages
  endpoint:
    path: /rest/v1/sentences/supported-languages
    method: GET
    data_selector: supportedLanguages
    params: {}
- name: entity_extraction
  endpoint:
    path: /rest/v1/entities
    method: POST
    data_selector: entities
    params:
      content: string
- name: sentiment
  endpoint:
    path: /sentiment
    method: POST
    data_selector: content
- name: categories
  endpoint:
    path: /categories
    method: POST
    data_selector: content
- name: entities
  endpoint:
    path: /entities
    method: POST
    data_selector: entitiesResponse
- name: name_similarity
  endpoint:
    path: /rest/v1/name-similarity
    method: GET
- name: name_similarity
  endpoint:
    path: /rest/v1/name-similarity
    method: POST
    data_selector: result
- name: entities
  endpoint:
    path: /rest/v1/entities
    method: POST
    data_selector: content
- name: similar_terms
  endpoint:
    path: /rest/v1/semantics/similar
    method: POST
    data_selector: content
- name: vector
  endpoint:
    path: /rest/v1/semantics/vector
    method: POST
    data_selector: content
- name: address_similarity
  endpoint:
    path: /rest/v1/address-similarity
    method: POST
    data_selector: results
- name: name_deduplication
  endpoint:
    path: /rest/v1/name-deduplication
    method: POST
    data_selector: results
- name: sentiment
  endpoint:
    path: /rest/v1/sentiment
    method: POST
    data_selector: document
    params:
      content: string
      language: string
      options:
        modelType: string
- name: supported_languages
  endpoint:
    path: /sentiment/supported-languages
    method: GET
    data_selector: supportedLanguages
    params: {}
- name: name_deduplication
  endpoint:
    path: name-deduplication
    method: POST
    data_selector: content
    params: {}
- name: name_translation
  endpoint:
    path: name-translation
    method: POST
    data_selector: content
    params: {}
- name: sentiment
  endpoint:
    path: /rest/v1/sentiment
    method: POST
    data_selector: content
- name: topics
  endpoint:
    path: /rest/v1/topics
    method: POST
    data_selector: content
- name: name_translation
  endpoint:
    path: /name-translation
    method: POST
    data_selector: content
- name: language_identification
  endpoint:
    path: /language
    method: POST
    data_selector: content
- name: topics
  endpoint:
    path: /topics
    method: POST
    data_selector: result
    params: {}
- name: categories
  endpoint:
    path: /categories
    method: POST
    data_selector: result
    params: {}
- name: morphology_complete
  endpoint:
    path: /morphology/complete
    method: POST
    data_selector: content
- name: language_supported
  endpoint:
    path: /language/supported-languages
    method: GET
    data_selector: supportedLanguages
- name: categories
  endpoint:
    path: /categories
    method: GET
    data_selector: supportedLanguages
- name: morphology_complete
  endpoint:
    path: /morphology/complete
    method: POST
    data_selector: content
- name: morphology_lemmas
  endpoint:
    path: /morphology/lemmas
    method: POST
    data_selector: content
- name: morphology_lemmas
  endpoint:
    path: /morphology/lemmas
    method: POST
    data_selector: content
- name: morphology_parts_of_speech
  endpoint:
    path: /morphology/parts-of-speech
    method: POST
    data_selector: content
- name: morphology_compound_components
  endpoint:
    path: /morphology/compound-components
    method: POST
    data_selector: content
- name: morphology
  endpoint:
    path: /morphology/han-readings
    method: POST
    data_selector: content
- name: tokens
  endpoint:
    path: /tokens
    method: POST
    data_selector: content
- name: supported_languages
  endpoint:
    path: /tokens/supported-languages
    method: GET
    data_selector: supportedLanguages
- name: ping
  endpoint:
    path: /ping
    method: GET
- name: info
  endpoint:
    path: /info
    method: GET
- name: sentiment
  endpoint:
    path: sentiment
    method: POST
    data_selector: response
    params:
      content: <html><head><title>New Ghostbusters Film</title></head><body><p>Original
        Ghostbuster Dan Aykroyd, who also co-wrote the 1984 Ghostbusters film, couldn’t
        be more pleased with the new all-female Ghostbusters cast, telling The Hollywood
        Reporter, “The Aykroyd family is delighted by this inheritance of the Ghostbusters
        torch by these most magnificent women in comedy.”</p></body></html>
- name: categories
  endpoint:
    path: categories
    method: POST
    data_selector: response
    params:
      content: If you are a fan of the British television series Downton Abbey and
        you are planning to be in New York anytime before April 2nd, there is a perfect
        stop for you while in town.
- name: tokens
  endpoint:
    path: /tokens
    method: POST
    data_selector: content
- name: sentences
  endpoint:
    path: /sentences
    method: POST
    data_selector: content
- name: supported_languages_tokens
  endpoint:
    path: /tokens/supported-languages
    method: GET
    data_selector: supportedLanguages
- name: supported_languages_sentences
  endpoint:
    path: /sentences/supported-languages
    method: GET
    data_selector: supportedLanguages
- name: entities
  endpoint:
    path: /entities
    method: POST
    data_selector: content
- name: name_similarity
  endpoint:
    path: /rest/v1/name-similarity
    method: POST
    data_selector: score
- name: supported_languages
  endpoint:
    path: /name-similarity/supported-languages
    method: GET
- name: entities
  endpoint:
    path: /entities
    method: POST
    data_selector: entitiesResponse
    params: {}
- name: name_similarity
  endpoint:
    path: /rest/v1/name-similarity
    method: POST
    data_selector: response
    params: {}
- name: address_similarity
  endpoint:
    path: /address-similarity
    method: POST
    data_selector: results
    params: {}
- name: supported_languages
  endpoint:
    path: /address-similarity/supported-languages
    method: GET
    data_selector: results
    params: {}
- name: entities
  endpoint:
    path: /rest/v1/entities
    method: POST
    data_selector: content
    params: {}
- name: similar_terms
  endpoint:
    path: /rest/v1/semantics/similar
    method: POST
    data_selector: content
    params: {}
- name: vector
  endpoint:
    path: /rest/v1/semantics/vector
    method: POST
    data_selector: content
    params: {}
- name: name_deduplication
  endpoint:
    path: /name-deduplication
    method: POST
    data_selector: result
    params: {}
- name: name_translation
  endpoint:
    path: /name-translation
    method: POST
    data_selector: result
    params: {}
- name: sentiment
  endpoint:
    path: /rest/v1/sentiment
    method: POST
    data_selector: document
    params:
      content: string
      language: string
      options:
        modelType: DNN
- name: supported_languages
  endpoint:
    path: /sentiment/supported-languages
    method: GET
    data_selector: languages
- name: sentiment
  endpoint:
    path: /rest/v1/sentiment
    method: POST
    data_selector: content
- name: topics
  endpoint:
    path: /rest/v1/topics
    method: POST
    data_selector: content
- name: name_translation
  endpoint:
    path: /name-translation
    method: POST
    data_selector: content
    params: {}
- name: language_identifier
  endpoint:
    path: /language
    method: POST
    data_selector: content
    params: {}
- name: topics
  endpoint:
    path: /topics
    method: POST
    data_selector: content
    params: {}
- name: categories
  endpoint:
    path: /categories
    method: POST
    data_selector: content
    params: {}
- name: categories
  endpoint:
    path: /categories
    method: GET
    data_selector: supportedLanguages
- name: language
  endpoint:
    path: /rest/v1/language/supported-languages
    method: GET
    data_selector: supportedLanguages
- name: morphology_complete
  endpoint:
    path: /rest/v1/morphology/complete
    method: POST
    data_selector: tokens
- name: morphology_complete
  endpoint:
    path: /morphology/complete
    method: POST
    data_selector: content
- name: morphology_lemmas
  endpoint:
    path: /morphology/lemmas
    method: POST
    data_selector: content
- name: ping
  endpoint:
    path: /ping
    method: GET
- name: info
  endpoint:
    path: /info
    method: GET
- name: morphology_lemmas
  endpoint:
    path: morphology/lemmas
    method: POST
    data_selector: content
- name: morphology_parts_of_speech
  endpoint:
    path: morphology/parts-of-speech
    method: POST
    data_selector: content
- name: morphology_compound_components
  endpoint:
    path: morphology/compound-components
    method: POST
    data_selector: content
- name: sentiment
  endpoint:
    path: /sentiment
    method: POST
    data_selector: results
    params:
      content: sentiment_file_data
- name: categories
  endpoint:
    path: /categories
    method: POST
    data_selector: results
    params:
      content: categories_text_data
- name: morphology_han_readings
  endpoint:
    path: /morphology/han-readings
    method: POST
    data_selector: content
- name: tokens
  endpoint:
    path: /tokens
    method: POST
    data_selector: content
- name: supported_languages
  endpoint:
    path: /morphology/supported-languages
    method: GET
    data_selector: supportedLanguages
- name: name_similarity
  endpoint:
    path: /rest/v1/name-similarity
    method: POST
- name: supported_languages
  endpoint:
    path: /name-similarity/supported-languages
    method: GET
- name: sentences
  endpoint:
    path: /sentences
    method: POST
    data_selector: sentences
    params:
      content: 'This land is your land. This land is my land, from California to the
        New York island; from the red wood forest to the Gulf Stream waters. This
        land was made for you and Me. As I was walking that ribbon of highway, I saw
        above me that endless skyway: I saw below me that golden valley: This land
        was made for you and me.'
- name: supported_languages
  endpoint:
    path: /sentences/supported-languages
    method: GET
    data_selector: supportedLanguages
    params: {}
- name: entities
  endpoint:
    path: /entities
    method: POST
    data_selector: entities
    params: {}
- name: entities
  endpoint:
    path: /entities
    method: POST
    data_selector: content
- name: name_similarity
  endpoint:
    path: /name-similarity
    method: POST
    data_selector: score
- name: supported_languages
  endpoint:
    path: /name-similarity/supported-languages
    method: GET
    data_selector: supportedLanguagePairs
- name: entities
  endpoint:
    path: /entities
    method: POST
    data_selector: content
    params: {}
- name: similar_terms
  endpoint:
    path: /semantics/similar
    method: POST
    data_selector: content
    params: {}
- name: vector
  endpoint:
    path: /semantics/vector
    method: POST
    data_selector: content
    params: {}
- name: address_similarity
  endpoint:
    path: /address-similarity
    method: POST
    data_selector: results
- name: supported_languages
  endpoint:
    path: /address-similarity/supported-languages
    method: GET
    data_selector: supportedLanguagePairs
- name: sentiment
  endpoint:
    path: /sentiment
    method: POST
    data_selector: document
    params: {}
- name: supported_languages
  endpoint:
    path: /sentiment/supported-languages
    method: GET
    data_selector: supportedLanguages
    params: {}
- name: name_deduplication
  endpoint:
    path: name-deduplication
    method: POST
    data_selector: response
    params: {}
- name: name_translation
  endpoint:
    path: name-translation
    method: POST
    data_selector: response
    params: {}
- name: sentiment
  endpoint:
    path: /rest/v1/sentiment
    method: POST
    data_selector: content
    params: {}
- name: topics
  endpoint:
    path: /rest/v1/topics
    method: POST
    data_selector: content
    params: {}
- name: name_translation
  endpoint:
    path: /name-translation
    method: POST
    data_selector: content
- name: language_identification
  endpoint:
    path: /language
    method: POST
    data_selector: content
- name: topics
  endpoint:
    path: /topics
    method: POST
    data_selector: content
- name: categories
  endpoint:
    path: /categories
    method: POST
    data_selector: content
- name: morphology_complete
  endpoint:
    path: /morphology/complete
    method: POST
    data_selector: result
    params:
      content: string
- name: morphology_supported_languages
  endpoint:
    path: /morphology/supported-languages
    method: GET
    data_selector: supportedLanguages
    params: {}
- name: categories
  endpoint:
    path: /categories
    method: GET
    data_selector: supportedLanguages
    params: {}
- name: morphology_complete
  endpoint:
    path: morphology/complete
    method: POST
    data_selector: content
- name: morphology_lemmas
  endpoint:
    path: morphology/lemmas
    method: POST
    data_selector: content
- name: transliteration
  endpoint:
    path: /rest/v1/transliteration
    method: GET
    data_selector: output
    params: {}
- name: supported_languages
  endpoint:
    path: /rest/v1/transliteration/supported-languages
    method: GET
    data_selector: languages
    params: {}
- name: morphology_lemmas
  endpoint:
    path: morphology
    method: POST
    data_selector: content
- name: morphology_parts_of_speech
  endpoint:
    path: morphology/parts-of-speech
    method: POST
    data_selector: content
- name: morphology_compound_components
  endpoint:
    path: morphology/compound-components
    method: POST
    data_selector: content
- name: morphology_han_readings
  endpoint:
    path: /morphology/han-readings
    method: POST
    data_selector: content
- name: tokens
  endpoint:
    path: /tokens
    method: POST
    data_selector: content
- name: supported_languages
  endpoint:
    path: /morphology/supported-languages
    method: GET
    data_selector: ''
- name: ping
  endpoint:
    path: /ping
    method: GET
    data_selector: response
- name: info
  endpoint:
    path: /info
    method: GET
    data_selector: response
- name: sentences
  endpoint:
    path: /rest/v1/sentences
    method: POST
    data_selector: sentences
    params:
      content: string
- name: supported_languages
  endpoint:
    path: /rest/v1/sentences/supported-languages
    method: GET
    data_selector: supportedLanguages
    params: {}
- name: entity_extraction
  endpoint:
    path: /rest/v1/entities
    method: POST
    data_selector: entities
    params:
      content: string
- name: sentiment
  endpoint:
    path: /sentiment
    method: POST
    data_selector: content
- name: categories
  endpoint:
    path: /categories
    method: POST
    data_selector: content
- name: name_similarity
  endpoint:
    path: /name-similarity
    method: GET
    data_selector: score
- name: supported_languages
  endpoint:
    path: /name-similarity/supported-languages
    method: GET
    data_selector: ''
- name: entities
  endpoint:
    path: /entities
    method: POST
    data_selector: entitiesResponse
    params: {}
- name: name_similarity
  endpoint:
    path: /rest/v1/name-similarity
    method: POST
    data_selector: response
    params: {}
- name: supported_languages
  endpoint:
    path: /rest/v1/name-similarity/supported-languages
    method: GET
    data_selector: supportedLanguagePairs
    params: {}
- name: entities
  endpoint:
    path: /rest/v1/entities
    method: POST
    data_selector: content
    params: {}
- name: similar_terms
  endpoint:
    path: /rest/v1/semantics/similar
    method: POST
    data_selector: content
    params: {}
- name: vector
  endpoint:
    path: /rest/v1/semantics/vector
    method: POST
    data_selector: content
    params: {}
- name: address_similarity
  endpoint:
    path: /rest/v1/address-similarity
    method: POST
    data_selector: results
    params: {}
- name: name_deduplication
  endpoint:
    path: /rest/v1/name-deduplication
    method: POST
    data_selector: results
    params: {}
- name: supported_languages
  endpoint:
    path: /rest/v1/address-similarity/supported-languages
    method: GET
    data_selector: supportedLanguagePairs
    params: {}
- name: sentiment
  endpoint:
    path: /rest/v1/sentiment
    method: POST
    data_selector: document
    params:
      content: string
      language: string
      options:
        modelType: string
- name: supported_languages
  endpoint:
    path: /sentiment/supported-languages
    method: GET
    data_selector: supportedLanguages
    params: {}
- name: name_deduplication
  endpoint:
    path: name-deduplication
    method: POST
    data_selector: result
- name: name_translation
  endpoint:
    path: name-translation
    method: POST
    data_selector: result
- name: sentiment
  endpoint:
    path: /rest/v1/sentiment
    method: POST
    data_selector: content
- name: topics
  endpoint:
    path: /rest/v1/topics
    method: POST
    data_selector: content
- name: name_translation
  endpoint:
    path: /name-translation
    method: POST
    data_selector: result
- name: language_identifier
  endpoint:
    path: /language
    method: POST
    data_selector: result
- name: topics
  endpoint:
    path: /topics
    method: POST
    data_selector: content
- name: categories
  endpoint:
    path: /categories
    method: POST
    data_selector: content
- name: language
  endpoint:
    path: /rest/v1/language/supported-languages
    method: GET
    data_selector: supportedLanguages
- name: morphology_complete
  endpoint:
    path: /rest/v1/morphology/complete
    method: POST
    data_selector: tokens
    params:
      content: string
- name: categories
  endpoint:
    path: /rest/v1/categories
    method: GET
    data_selector: supportedLanguages
- name: transliteration
  endpoint:
    path: /rest/v1/transliteration
    method: GET
    data_selector: result
- name: supported_languages
  endpoint:
    path: /rest/v1/transliteration/supported-languages
    method: GET
    data_selector: languages
- name: morphology_complete
  endpoint:
    path: /morphology/complete
    method: POST
    data_selector: content
- name: morphology_lemmas
  endpoint:
    path: /morphology/lemmas
    method: POST
    data_selector: content
- name: morphology_lemmas
  endpoint:
    path: morphology
    method: POST
    data_selector: content
- name: morphology_parts_of_speech
  endpoint:
    path: morphology/parts-of-speech
    method: POST
    data_selector: content
- name: morphology_compound_components
  endpoint:
    path: morphology/compound-components
    method: POST
    data_selector: content
- name: ping
  endpoint:
    path: /ping
    method: GET
- name: info
  endpoint:
    path: /info
    method: GET
- name: sentiment
  endpoint:
    path: /rest/v1/sentiment
    method: POST
    data_selector: response
    params:
      content: sentiment_file_data
- name: categories
  endpoint:
    path: /rest/v1/categories
    method: POST
    data_selector: response
    params:
      content: categories_text_data
- name: morphology_han_readings
  endpoint:
    path: /rest/v1/morphology/han-readings
    method: POST
    data_selector: content
- name: tokens
  endpoint:
    path: /rest/v1/tokens
    method: POST
    data_selector: content
- name: supported_languages
  endpoint:
    path: /rest/v1/morphology/supported-languages
    method: GET
    data_selector: languages
- name: name_similarity
  endpoint:
    path: /rest/v1/name-similarity
    method: GET
    data_selector: score
- name: supported_languages
  endpoint:
    path: /name-similarity/supported-languages
    method: GET
    data_selector: ''
- name: tokens
  endpoint:
    path: /rest/v1/tokens
    method: POST
    data_selector: header
    params:
      content: string
- name: sentences
  endpoint:
    path: /rest/v1/sentences
    method: POST
    data_selector: header
    params:
      content: string
- name: supported_languages_tokens
  endpoint:
    path: /rest/v1/tokens/supported-languages
    method: GET
    data_selector: header
    params: {}
- name: supported_languages_sentences
  endpoint:
    path: /rest/v1/sentences/supported-languages
    method: GET
    data_selector: header
    params: {}
- name: entities
  endpoint:
    path: /rest/v1/entities
    method: POST
    data_selector: header
    params:
      content: string
- name: name_similarity
  endpoint:
    path: /rest/v1/name-similarity
    method: POST
    data_selector: response
    params: {}
- name: supported_languages
  endpoint:
    path: /rest/v1/name-similarity/supported-languages
    method: GET
    data_selector: supportedLanguagePairs
    params: {}
- name: entities
  endpoint:
    path: /entities
    method: POST
    data_selector: entitiesResponse
- name: supported_languages
  endpoint:
    path: /address-similarity/supported-languages
    method: GET
    data_selector: results
- name: address_similarity
  endpoint:
    path: /address-similarity
    method: POST
    data_selector: results
- name: entities
  endpoint:
    path: /rest/v1/entities
    method: POST
    data_selector: content
- name: similar_terms
  endpoint:
    path: /rest/v1/semantics/similar
    method: POST
    data_selector: similarTerms
    params:
      resultLanguages:
      - spa
      - deu
      - jpn
- name: vector
  endpoint:
    path: /rest/v1/semantics/vector
    method: POST
    data_selector: documentEmbedding
- name: name_deduplication
  endpoint:
    path: /rest/v1/name-deduplication
    method: POST
    data_selector: content
- name: name_translation
  endpoint:
    path: /rest/v1/name-translation
    method: POST
    data_selector: content
- name: sentiment
  endpoint:
    path: /rest/v1/sentiment
    method: POST
    data_selector: document
    params:
      content: string
      language: string
      options:
        modelType: string
- name: supported_languages
  endpoint:
    path: /sentiment/supported-languages
    method: GET
    data_selector: supportedLanguages
    params: {}
- name: name_translation
  endpoint:
    path: /name-translation
    method: POST
    data_selector: content
    params: {}
- name: language_identification
  endpoint:
    path: /language
    method: POST
    data_selector: content
    params: {}
- name: sentiment
  endpoint:
    path: /rest/v1/sentiment
    method: POST
    data_selector: response
    params: {}
- name: topics
  endpoint:
    path: /rest/v1/topics
    method: POST
    data_selector: response
    params: {}
- name: morphology_complete
  endpoint:
    path: /morphology/complete
    method: POST
    data_selector: tokens
    params: {}
- name: morphology_supported_languages
  endpoint:
    path: /morphology/supported-languages
    method: GET
    data_selector: supportedLanguages
    params: {}
- name: topics
  endpoint:
    path: /topics
    method: POST
    data_selector: result
    params: {}
- name: categories
  endpoint:
    path: /categories
    method: POST
    data_selector: result
    params: {}
- name: morphology_complete
  endpoint:
    path: /morphology/complete
    method: POST
    data_selector: content
- name: morphology_lemmas
  endpoint:
    path: /morphology/lemmas
    method: POST
    data_selector: content
- name: categories
  endpoint:
    path: /categories
    method: GET
    data_selector: supportedLanguages
    params: {}
- name: sentiment
  endpoint:
    path: /v1/sentiment
    method: POST
    data_selector: sentiment
- name: morphology_lemmas
  endpoint:
    path: /morphology
    method: POST
    data_selector: content
- name: morphology_parts_of_speech
  endpoint:
    path: /morphology/parts-of-speech
    method: POST
    data_selector: content
- name: morphology_compound_components
  endpoint:
    path: /morphology/compound-components
    method: POST
    data_selector: content
- name: morphology_han_readings
  endpoint:
    path: /rest/v1/morphology/han-readings
    method: POST
    data_selector: content
- name: tokens
  endpoint:
    path: /rest/v1/tokens
    method: POST
    data_selector: content
- name: supported_languages
  endpoint:
    path: /rest/v1/morphology/supported-languages
    method: GET
    data_selector: languages
- name: ping
  endpoint:
    path: /ping
    method: GET
- name: info
  endpoint:
    path: /info
    method: GET
- name: tokens
  endpoint:
    path: /rest/v1/tokens
    method: POST
    data_selector: content
- name: sentences
  endpoint:
    path: /rest/v1/sentences
    method: POST
    data_selector: content
- name: supported_languages_tokens
  endpoint:
    path: /rest/v1/tokens/supported-languages
    method: GET
    data_selector: supportedLanguages
- name: supported_languages_sentences
  endpoint:
    path: /rest/v1/sentences/supported-languages
    method: GET
    data_selector: supportedLanguages
- name: entities
  endpoint:
    path: /rest/v1/entities
    method: POST
    data_selector: entities
- name: sentiment
  endpoint:
    path: /sentiment
    method: POST
    data_selector: content
    params: {}
- name: categories
  endpoint:
    path: /categories
    method: POST
    data_selector: content
    params: {}
- name: name_similarity
  endpoint:
    path: /name-similarity
    method: GET
    data_selector: score
- name: supported_languages
  endpoint:
    path: /name-similarity/supported-languages
    method: GET
    data_selector: languages
- name: entities
  endpoint:
    path: /entities
    method: POST
    data_selector: entitiesResponse
    params: {}
- name: name_similarity
  endpoint:
    path: /rest/v1/name-similarity
    method: POST
    data_selector: result
- name: supported_languages
  endpoint:
    path: /rest/v1/name-similarity/supported-languages
    method: GET
    data_selector: supportedLanguagePairs
- name: entities
  endpoint:
    path: /rest/v1/entities
    method: POST
    data_selector: content
- name: similar_terms
  endpoint:
    path: /rest/v1/semantics/similar
    method: POST
    data_selector: similarTerms
- name: vector
  endpoint:
    path: /rest/v1/semantics/vector
    method: POST
    data_selector: documentEmbedding
- name: supported_languages
  endpoint:
    path: /address-similarity/supported-languages
    method: GET
    data_selector: results
- name: name_deduplication
  endpoint:
    path: /name-deduplication
    method: POST
    data_selector: content
    params: {}
- name: name_translation
  endpoint:
    path: /name-translation
    method: POST
    data_selector: content
    params: {}
- name: sentiment
  endpoint:
    path: /rest/v1/sentiment
    method: POST
    data_selector: document
    params:
      content: string
      language: string
      options:
        modelType: string
- name: supported_languages
  endpoint:
    path: /sentiment/supported-languages
    method: GET
    data_selector: supportedLanguages
    params: {}
- name: name_translation
  endpoint:
    path: /name-translation
    method: POST
    data_selector: result
    params: {}
- name: language_detection
  endpoint:
    path: /language
    method: POST
    data_selector: result
    params: {}
- name: sentiment
  endpoint:
    path: /rest/v1/sentiment
    method: POST
    data_selector: content
- name: topics
  endpoint:
    path: /rest/v1/topics
    method: POST
    data_selector: content
- name: language
  endpoint:
    path: /rest/v1/language/supported-languages
    method: GET
    data_selector: supportedLanguages
- name: morphology_complete
  endpoint:
    path: /rest/v1/morphology/complete
    method: POST
    data_selector: tokens
- name: topics
  endpoint:
    path: /topics
    method: POST
    data_selector: results
    params: {}
- name: categories
  endpoint:
    path: /categories
    method: POST
    data_selector: results
    params: {}
- name: morphology_complete
  endpoint:
    path: /morphology/complete
    method: POST
    data_selector: content
- name: morphology_lemmas
  endpoint:
    path: /morphology/lemmas
    method: POST
    data_selector: content
- name: categories
  endpoint:
    path: /rest/v1/categories
    method: GET
    data_selector: supportedLanguages
- name: morphology_lemmas
  endpoint:
    path: /morphology/lemmas
    method: POST
    data_selector: content
- name: morphology_parts_of_speech
  endpoint:
    path: /morphology/parts-of-speech
    method: POST
    data_selector: content
- name: morphology_compound_components
  endpoint:
    path: /morphology/compound-components
    method: POST
    data_selector: content
- name: document_endpoint
  endpoint:
    path: /features-and-functions#entity-extraction-and-linking
    method: POST
    data_selector: content
    params: {}
- name: morphology_han_readings
  endpoint:
    path: /morphology/han-readings
    method: POST
    data_selector: content
- name: tokens
  endpoint:
    path: /tokens
    method: POST
    data_selector: content
- name: supported_languages
  endpoint:
    path: /morphology/supported-languages
    method: GET
    data_selector: languages
- name: ping
  endpoint:
    path: /ping
    method: GET
    data_selector: null
    params: {}
- name: info
  endpoint:
    path: /info
    method: GET
    data_selector: null
    params: {}
- name: tokens
  endpoint:
    path: /rest/v1/tokens
    method: POST
    data_selector: header
    params:
      content: 北京大学生物系主任办公室内部会议
- name: sentences
  endpoint:
    path: /rest/v1/sentences
    method: POST
    data_selector: header
    params:
      content: 'This land is your land. This land is my land, from California to the
        New York island; from the red wood forest to the Gulf Stream waters. This
        land was made for you and Me. As I was walking that ribbon of highway, I saw
        above me that endless skyway: I saw below me that golden valley: This land
        was made for you and me.'
- name: supported_languages_tokens
  endpoint:
    path: /rest/v1/tokens/supported-languages
    method: GET
    data_selector: supportedLanguages
- name: supported_languages_sentences
  endpoint:
    path: /rest/v1/sentences/supported-languages
    method: GET
    data_selector: supportedLanguages
- name: entities
  endpoint:
    path: /rest/v1/entities
    method: POST
    data_selector: header
- name: sentiment
  endpoint:
    path: sentiment
    method: POST
    data_selector: content
- name: categories
  endpoint:
    path: categories
    method: POST
    data_selector: content
- name: entities
  endpoint:
    path: /entities
    method: POST
    data_selector: entitiesResponse
    params: {}
- name: name_similarity
  endpoint:
    path: /rest/v1/name-similarity
    method: GET
- name: supported_languages
  endpoint:
    path: /name-similarity/supported-languages
    method: GET
- name: entities
  endpoint:
    path: /rest/v1/entities
    method: POST
    data_selector: content
    params: {}
- name: similar_terms
  endpoint:
    path: /rest/v1/semantics/similar
    method: POST
    data_selector: similarTerms
    params: {}
- name: vector
  endpoint:
    path: /rest/v1/semantics/vector
    method: POST
    data_selector: documentEmbedding
    params: {}
- name: supported_languages
  endpoint:
    path: /rest/v1/entities/supported-languages
    method: GET
    data_selector: supportedLanguages
    params: {}
- name: name_similarity
  endpoint:
    path: /rest/v1/name-similarity
    method: POST
    data_selector: result
- name: supported_languages
  endpoint:
    path: /rest/v1/name-similarity/supported-languages
    method: GET
    data_selector: supportedLanguagePairs
- name: sentiment_analysis
  endpoint:
    path: /rest/v1/sentiment
    method: POST
    data_selector: document
    params:
      content: string
      language: string
      options:
        modelType: string
- name: supported_languages
  endpoint:
    path: /sentiment/supported-languages
    method: GET
    data_selector: supportedLanguages
    params: {}
- name: address_similarity
  endpoint:
    path: /address-similarity
    method: POST
    data_selector: result
- name: supported_languages
  endpoint:
    path: /address-similarity/supported-languages
    method: GET
    data_selector: languages
- name: sentiment
  endpoint:
    path: /rest/v1/sentiment
    method: POST
    data_selector: content
- name: topics
  endpoint:
    path: /rest/v1/topics
    method: POST
    data_selector: content
- name: supported_languages
  endpoint:
    path: /rest/v1/sentiment/supported-languages
    method: GET
    data_selector: ''
- name: name_deduplication
  endpoint:
    path: /name-deduplication
    method: POST
    data_selector: result
- name: name_translation
  endpoint:
    path: /name-translation
    method: POST
    data_selector: result
- name: supported_languages
  endpoint:
    path: /name-translation/supported-languages
    method: GET
    data_selector: supportedLanguagePairs
- name: topics
  endpoint:
    path: /topics
    method: POST
    data_selector: content
- name: categories
  endpoint:
    path: /categories
    method: POST
    data_selector: content
- name: categories
  endpoint:
    path: /rest/v1/categories
    method: GET
    data_selector: supportedLanguages
- name: name_translation
  endpoint:
    path: /name-translation
    method: POST
    data_selector: result
- name: language_detection
  endpoint:
    path: /language
    method: POST
    data_selector: languageDetections
- name: categories
  endpoint:
    path: /categories
    method: POST
    data_selector: categories
- name: supported_languages
  endpoint:
    path: /categories/supported-languages
    method: GET
    data_selector: languages
- name: morphology_complete
  endpoint:
    path: /morphology/complete
    method: POST
    data_selector: tokens
    params:
      content: The quick brown fox jumped over the lazy dog. 👍🏾 Yes he did. B)
- name: morphology_complete
  endpoint:
    path: /morphology/complete
    method: POST
    data_selector: content
- name: morphology_lemmas
  endpoint:
    path: /morphology/lemmas
    method: POST
    data_selector: content
- name: ping
  endpoint:
    path: /ping
    method: GET
    data_selector: response
    params: {}
- name: info
  endpoint:
    path: /info
    method: GET
    data_selector: response
    params: {}
- name: morphology_lemmas
  endpoint:
    path: /morphology/lemmas
    method: POST
    data_selector: content
- name: morphology_parts_of_speech
  endpoint:
    path: /morphology/parts-of-speech
    method: POST
    data_selector: content
- name: morphology_compound_components
  endpoint:
    path: /morphology/compound-components
    method: POST
    data_selector: content
- name: sentiment
  endpoint:
    path: /sentiment
    method: POST
    data_selector: response
    params:
      content: sentiment_file_data
- name: categories
  endpoint:
    path: /categories
    method: POST
    data_selector: response
    params:
      content: categories_text_data
- name: name_similarity
  endpoint:
    path: /rest/v1/name-similarity
    method: GET
- name: supported_languages
  endpoint:
    path: /name-similarity/supported-languages
    method: GET
- name: morphology_han_readings
  endpoint:
    path: /rest/v1/morphology/han-readings
    method: POST
    data_selector: content
- name: tokens
  endpoint:
    path: /rest/v1/tokens
    method: POST
    data_selector: content
- name: supported_languages
  endpoint:
    path: /rest/v1/morphology/supported-languages
    method: GET
    data_selector: supportedLanguages
- name: name_similarity
  endpoint:
    path: /rest/v1/name-similarity
    method: POST
    data_selector: response
    params: {}
- name: supported_languages
  endpoint:
    path: /rest/v1/name-similarity/supported-languages
    method: GET
    data_selector: supportedLanguagePairs
    params: {}
- name: sentences
  endpoint:
    path: /rest/v1/sentences
    method: POST
    data_selector: sentences
- name: supported_languages
  endpoint:
    path: /rest/v1/sentences/supported-languages
    method: GET
    data_selector: supportedLanguages
- name: entities
  endpoint:
    path: /rest/v1/entities
    method: POST
    data_selector: entities
- name: supported_languages
  endpoint:
    path: /address-similarity/supported-languages
    method: GET
    data_selector: results
- name: address_similarity
  endpoint:
    path: /address-similarity
    method: POST
    data_selector: results
- name: entities
  endpoint:
    path: /entities
    method: POST
    data_selector: entitiesResponse
- name: name_deduplication
  endpoint:
    path: /name-deduplication
    method: POST
    data_selector: result
    params: {}
- name: name_translation
  endpoint:
    path: /name-translation
    method: POST
    data_selector: translation
    params: {}
- name: entities
  endpoint:
    path: /rest/v1/entities
    method: POST
    data_selector: content
- name: similar_terms
  endpoint:
    path: /rest/v1/semantics/similar
    method: POST
    data_selector: similarTerms
- name: vector
  endpoint:
    path: /rest/v1/semantics/vector
    method: POST
    data_selector: documentEmbedding
- name: name_translation
  endpoint:
    path: /name-translation
    method: POST
    data_selector: content
- name: language_detection
  endpoint:
    path: /language
    method: POST
    data_selector: content
- name: language_detection
  endpoint:
    path: /rest/v1/language
    method: POST
    data_selector: content
- name: morphology_complete
  endpoint:
    path: /rest/v1/morphology/complete
    method: POST
    data_selector: content
- name: sentiment
  endpoint:
    path: /rest/v1/sentiment
    method: POST
    data_selector: document
    params:
      content: string
      language: string
      options:
        modelType: DNN
- name: supported_languages
  endpoint:
    path: /sentiment/supported-languages
    method: GET
    data_selector: supportedLanguages
    params: {}
- name: morphology_complete
  endpoint:
    path: /morphology/complete
    method: POST
    data_selector: content
- name: morphology_lemmas
  endpoint:
    path: /morphology/lemmas
    method: POST
    data_selector: content
- name: sentiment
  endpoint:
    path: /rest/v1/sentiment
    method: POST
    data_selector: content
- name: topics
  endpoint:
    path: /rest/v1/topics
    method: POST
    data_selector: content
- name: morphology_lemmas
  endpoint:
    path: /morphology
    method: POST
    data_selector: content
- name: morphology_parts_of_speech
  endpoint:
    path: /morphology
    method: POST
    data_selector: content
- name: morphology_compound_components
  endpoint:
    path: /morphology
    method: POST
    data_selector: content
- name: topics
  endpoint:
    path: /topics
    method: GET
    data_selector: topics
    params: {}
- name: categories
  endpoint:
    path: /categories
    method: POST
    data_selector: categories
    params: {}
- name: morphology_han_readings
  endpoint:
    path: /morphology/han-readings
    method: POST
    data_selector: content
- name: tokens
  endpoint:
    path: /tokens
    method: POST
    data_selector: content
- name: supported_languages
  endpoint:
    path: /morphology/supported-languages
    method: GET
    data_selector: supportedLanguages
- name: categories
  endpoint:
    path: /rest/v1/categories
    method: GET
    data_selector: supportedLanguages
- name: sentiment
  endpoint:
    path: /sentiment
    method: POST
    data_selector: categories
    params: {}
- name: supported_languages
  endpoint:
    path: /categories/supported-languages
    method: GET
    data_selector: languages
    params: {}
- name: tokens
  endpoint:
    path: /rest/v1/tokens
    method: POST
    data_selector: content
- name: sentences
  endpoint:
    path: /rest/v1/sentences
    method: POST
    data_selector: content
- name: supported_languages
  endpoint:
    path: /rest/v1/tokens/supported-languages
    method: GET
    data_selector: supportedLanguages
- name: entities
  endpoint:
    path: /rest/v1/entities
    method: POST
    data_selector: content
- name: entities
  endpoint:
    path: /entities
    method: POST
    data_selector: entitiesResponse
- name: entities
  endpoint:
    path: /rest/v1/entities
    method: POST
    data_selector: content
- name: similar_terms
  endpoint:
    path: /rest/v1/semantics/similar
    method: POST
    data_selector: similarTerms
- name: vector
  endpoint:
    path: /rest/v1/semantics/vector
    method: POST
    data_selector: documentEmbedding
- name: ping
  endpoint:
    path: /ping
    method: GET
    data_selector: response
    params: {}
- name: info
  endpoint:
    path: /info
    method: GET
    data_selector: response
    params: {}
- name: sentiment
  endpoint:
    path: /rest/v1/sentiment
    method: POST
    data_selector: document
    params:
      language: string
      content: string
- name: supported_languages
  endpoint:
    path: /sentiment/supported-languages
    method: GET
    data_selector: supportedLanguages
    params: {}
- name: sentiment
  endpoint:
    path: /rest/v1/sentiment
    method: POST
    data_selector: response
    params:
      content: sentiment_file_data
      language: eng
- name: categories
  endpoint:
    path: /rest/v1/categories
    method: POST
    data_selector: response
    params:
      content: categories_text_data
- name: name_similarity
  endpoint:
    path: /rest/v1/name-similarity
    method: POST
- name: supported_languages
  endpoint:
    path: /name-similarity/supported-languages
    method: GET
- name: sentiment
  endpoint:
    path: /rest/v1/sentiment
    method: POST
    data_selector: content
- name: topics
  endpoint:
    path: /rest/v1/topics
    method: POST
    data_selector: content
- name: supported_languages
  endpoint:
    path: /rest/v1/sentiment/supported-languages
    method: GET
    data_selector: supportedLanguages
- name: name_similarity
  endpoint:
    path: /name-similarity
    method: POST
    data_selector: result
    params: {}
- name: topics
  endpoint:
    path: /topics
    method: POST
    data_selector: content
- name: categories
  endpoint:
    path: /categories
    method: POST
    data_selector: content
- name: categories
  endpoint:
    path: /rest/v1/categories
    method: POST
    data_selector: content
- name: relationships
  endpoint:
    path: /rest/v1/relationships
    method: POST
    data_selector: content
- name: address_similarity
  endpoint:
    path: /rest/v1/address-similarity
    method: POST
    data_selector: results
- name: name_deduplication
  endpoint:
    path: /rest/v1/name-deduplication
    method: POST
    data_selector: results
- name: supported_languages
  endpoint:
    path: /rest/v1/address-similarity/supported-languages
    method: GET
    data_selector: supportedLanguagePairs
- name: supported_languages
  endpoint:
    path: /rest/v1/relationships/supported-languages
    method: GET
    data_selector: supportedLanguages
- name: transliteration
  endpoint:
    path: /transliteration
    method: POST
    data_selector: content
- name: topic_extractor
  endpoint:
    path: /topics
    method: POST
    data_selector: content
- name: supported_languages
  endpoint:
    path: /topics/supported-languages
    method: GET
    data_selector: languages
- name: name_deduplication
  endpoint:
    path: name-deduplication
    method: POST
    data_selector: result
    params: {}
- name: name_translation
  endpoint:
    path: name-translation
    method: POST
    data_selector: result
    params: {}
- name: name_translation
  endpoint:
    path: /name-translation
    method: POST
    data_selector: result
    params: {}
- name: language_detection
  endpoint:
    path: /language
    method: POST
    data_selector: languageDetections
    params: {}
- name: language
  endpoint:
    path: /rest/v1/language/supported-languages
    method: GET
    data_selector: supportedLanguages
- name: morphology_complete
  endpoint:
    path: /rest/v1/morphology/complete
    method: POST
    data_selector: tokens
- name: ping
  endpoint:
    path: /rest/v1/ping
    method: GET
    data_selector: response
- name: info
  endpoint:
    path: /rest/v1/info
    method: GET
    data_selector: response
- name: morphology_complete
  endpoint:
    path: /morphology/complete
    method: POST
    data_selector: content
- name: morphology_lemmas
  endpoint:
    path: /morphology/lemmas
    method: POST
    data_selector: content
- name: sentiment
  endpoint:
    path: sentiment
    method: POST
    data_selector: result
    params:
      content: sentiment_file_data
      language: eng
- name: categories
  endpoint:
    path: categories
    method: POST
    data_selector: result
    params:
      content: categories_text_data
- name: morphology_lemmas
  endpoint:
    path: /morphology/lemmas
    method: POST
    data_selector: content
- name: morphology_parts_of_speech
  endpoint:
    path: /morphology/parts-of-speech
    method: POST
    data_selector: content
- name: morphology_compound_components
  endpoint:
    path: /morphology/compound-components
    method: POST
    data_selector: content
- name: name_similarity
  endpoint:
    path: /rest/v1/name-similarity
    method: GET
- name: supported_languages
  endpoint:
    path: /name-similarity/supported-languages
    method: GET
- name: name_similarity
  endpoint:
    path: /rest/v1/name-similarity
    method: POST
    data_selector: results
- name: supported_languages
  endpoint:
    path: /rest/v1/name-similarity/supported-languages
    method: GET
    data_selector: supportedLanguagePairs
- name: morphology_han_readings
  endpoint:
    path: /rest/v1/morphology/han-readings
    method: POST
    data_selector: content
- name: tokens
  endpoint:
    path: /rest/v1/tokens
    method: POST
    data_selector: content
- name: supported_languages
  endpoint:
    path: /rest/v1/morphology/supported-languages
    method: GET
    data_selector: languages
- name: address_similarity
  endpoint:
    path: /rest/v1/address-similarity
    method: POST
    data_selector: results
    params: {}
- name: supported_languages
  endpoint:
    path: /rest/v1/address-similarity/supported-languages
    method: GET
    data_selector: languages
    params: {}
- name: tokens
  endpoint:
    path: /rest/v1/tokens
    method: POST
    data_selector: content
- name: sentences
  endpoint:
    path: /rest/v1/sentences
    method: POST
    data_selector: content
- name: supported_languages_tokens
  endpoint:
    path: /rest/v1/tokens/supported-languages
    method: GET
    data_selector: supportedLanguages
- name: supported_languages_sentences
  endpoint:
    path: /rest/v1/sentences/supported-languages
    method: GET
    data_selector: supportedLanguages
- name: entities
  endpoint:
    path: /rest/v1/entities
    method: POST
    data_selector: entities
- name: name_translation
  endpoint:
    path: /name-translation
    method: POST
    data_selector: result
    params: {}
- name: language_detection
  endpoint:
    path: /language
    method: POST
    data_selector: result
    params: {}
- name: supported_languages
  endpoint:
    path: /language/supported-languages
    method: GET
    data_selector: supportedLanguagePairs
    params: {}
- name: entities
  endpoint:
    path: /entities
    method: POST
    data_selector: entitiesResponse
- name: language
  endpoint:
    path: /rest/v1/language
    method: GET
    data_selector: supportedLanguages
- name: morphology_complete
  endpoint:
    path: /rest/v1/morphology/complete
    method: POST
    data_selector: tokens
- name: entities
  endpoint:
    path: /rest/v1/entities
    method: POST
    data_selector: content
- name: similar_terms
  endpoint:
    path: /rest/v1/semantics/similar
    method: POST
    data_selector: similarTerms
- name: vector
  endpoint:
    path: /rest/v1/semantics/vector
    method: POST
    data_selector: documentEmbedding
- name: morphology_complete
  endpoint:
    path: morphology/complete
    method: POST
    data_selector: content
- name: morphology_lemmas
  endpoint:
    path: morphology/lemmas
    method: POST
    data_selector: content
- name: sentiment
  endpoint:
    path: /sentiment
    method: POST
    data_selector: document
    params:
      content: string
      language: string
      options:
        modelType: string
- name: supported_languages
  endpoint:
    path: /sentiment/supported-languages
    method: GET
    data_selector: supportedLanguages
    params: {}
- name: morphology_lemmas
  endpoint:
    path: /morphology/lemmas
    method: POST
    data_selector: content
    params: {}
- name: morphology_parts_of_speech
  endpoint:
    path: /morphology/parts-of-speech
    method: POST
    data_selector: content
    params: {}
- name: morphology_compound_components
  endpoint:
    path: /morphology/compound-components
    method: POST
    data_selector: content
    params: {}
- name: sentiment
  endpoint:
    path: /rest/v1/sentiment
    method: POST
    data_selector: response
    params:
      content: string
- name: topics
  endpoint:
    path: /rest/v1/topics
    method: POST
    data_selector: response
    params:
      content: string
- name: topics
  endpoint:
    path: topics
    method: GET
    data_selector: response
    params: {}
- name: categories
  endpoint:
    path: categories
    method: POST
    data_selector: response
    params: {}
- name: morphology_han_readings
  endpoint:
    path: /morphology/han-readings
    method: POST
    data_selector: content
- name: tokens
  endpoint:
    path: /tokens
    method: POST
    data_selector: content
- name: supported_languages
  endpoint:
    path: /morphology/supported-languages
    method: GET
    data_selector: supportedLanguages
- name: categories
  endpoint:
    path: /rest/v1/categories
    method: POST
    data_selector: content
- name: relationships
  endpoint:
    path: /rest/v1/relationships
    method: POST
    data_selector: content
- name: supported_languages
  endpoint:
    path: /rest/v1/categories/supported-languages
    method: GET
    data_selector: supportedLanguages
- name: tokens
  endpoint:
    path: /rest/v1/tokens
    method: POST
    data_selector: content
- name: sentences
  endpoint:
    path: /rest/v1/sentences
    method: POST
    data_selector: content
- name: supported_languages_tokens
  endpoint:
    path: /rest/v1/tokens/supported-languages
    method: GET
    data_selector: supportedLanguages
- name: supported_languages_sentences
  endpoint:
    path: /rest/v1/sentences/supported-languages
    method: GET
    data_selector: supportedLanguages
- name: entities
  endpoint:
    path: /rest/v1/entities
    method: POST
    data_selector: entities
- name: supported_languages
  endpoint:
    path: /rest/v1/relationships/supported-languages
    method: GET
    data_selector: supportedLanguages
    params: {}
- name: entities
  endpoint:
    path: /entities
    method: POST
    data_selector: entitiesResponse
    params: {}
- name: transliteration
  endpoint:
    path: /transliteration
    method: POST
    data_selector: content
- name: topics
  endpoint:
    path: /topics
    method: POST
    data_selector: content
- name: entities
  endpoint:
    path: /rest/v1/entities
    method: POST
    data_selector: content
    params: {}
- name: similar_terms
  endpoint:
    path: /rest/v1/semantics/similar
    method: POST
    data_selector: content
    params:
      resultLanguages:
      - spa
      - deu
      - jpn
- name: sentiment_analysis
  endpoint:
    path: /sentiment
    method: POST
    data_selector: document
    params:
      content: string
      language: string
      options:
        modelType: string
- name: supported_languages
  endpoint:
    path: /sentiment/supported-languages
    method: GET
    data_selector: supportedLanguages
    params: {}
- name: ping
  endpoint:
    path: /ping
    method: GET
- name: info
  endpoint:
    path: /info
    method: GET
- name: sentiment
  endpoint:
    path: /rest/v1/sentiment
    method: POST
    data_selector: content
- name: topics
  endpoint:
    path: /rest/v1/topics
    method: POST
    data_selector: content
- name: sentiment
  endpoint:
    path: /rest/v1/sentiment
    method: POST
    data_selector: response
    params: {}
- name: categories
  endpoint:
    path: /rest/v1/categories
    method: POST
    data_selector: response
    params: {}
- name: topics
  endpoint:
    path: /topics
    method: POST
    data_selector: content
- name: categories
  endpoint:
    path: /categories
    method: POST
    data_selector: content
- name: categories
  endpoint:
    path: /rest/v1/categories
    method: POST
    data_selector: content
- name: relationships
  endpoint:
    path: /rest/v1/relationships
    method: POST
    data_selector: content
- name: supported_languages
  endpoint:
    path: /rest/v1/relationships/supported-languages
    method: GET
    data_selector: ''
- name: name_similarity
  endpoint:
    path: /rest/v1/name-similarity
    method: GET
    data_selector: score
- name: supported_languages
  endpoint:
    path: /name-similarity/supported-languages
    method: GET
    data_selector: ''
- name: supported_languages
  endpoint:
    path: /rest/v1/relationships/supported-languages
    method: GET
    data_selector: supportedLanguages
- name: name_similarity
  endpoint:
    path: /rest/v1/name-similarity
    method: POST
    data_selector: nameSimilarityResponse
- name: transliteration
  endpoint:
    path: /transliteration
    method: POST
    data_selector: transliteration
- name: supported_languages
  endpoint:
    path: /transliteration/supported-languages
    method: GET
    data_selector: supportedLanguages
- name: address_similarity
  endpoint:
    path: /address-similarity
    method: POST
    data_selector: results
- name: supported_languages
  endpoint:
    path: /address-similarity/supported-languages
    method: GET
    data_selector: supportedLanguagePairs
- name: name_deduplication
  endpoint:
    path: /name-deduplication
    method: POST
    data_selector: content
- name: name_translation
  endpoint:
    path: /name-translation
    method: POST
    data_selector: content
- name: ping
  endpoint:
    path: /ping
    method: GET
- name: info
  endpoint:
    path: /info
    method: GET
- name: name_translation
  endpoint:
    path: name-translation
    method: POST
    data_selector: result
    params: {}
- name: language_identifier
  endpoint:
    path: language
    method: POST
    data_selector: result
    params: {}
- name: language
  endpoint:
    path: /rest/v1/language
    method: GET
    data_selector: supportedLanguages
- name: morphology
  endpoint:
    path: /rest/v1/morphology
    method: POST
    data_selector: tokens
- name: sentiment
  endpoint:
    path: sentiment
    method: POST
    data_selector: results
    params:
      content: documentFile
- name: categories
  endpoint:
    path: categories
    method: POST
    data_selector: results
    params:
      content: documentFile
- name: name_similarity
  endpoint:
    path: /rest/v1/name-similarity
    method: GET
- name: supported_languages
  endpoint:
    path: /name-similarity/supported-languages
    method: GET
- name: morphology_complete
  endpoint:
    path: /morphology/complete
    method: POST
    data_selector: content
- name: morphology_lemmas
  endpoint:
    path: /morphology/lemmas
    method: POST
    data_selector: content
- name: name_similarity
  endpoint:
    path: /rest/v1/name-similarity
    method: POST
    data_selector: response
    params: {}
- name: morphology_lemmas
  endpoint:
    path: /morphology/lemmas
    method: POST
    data_selector: content
- name: morphology_parts_of_speech
  endpoint:
    path: /morphology/parts-of-speech
    method: POST
    data_selector: content
- name: morphology_compound_components
  endpoint:
    path: /morphology/compound-components
    method: POST
    data_selector: content
- name: tokens
  endpoint:
    path: /tokens
    method: POST
    data_selector: tokens
    params: {}
- name: morphology
  endpoint:
    path: /morphology/han-readings
    method: POST
    data_selector: content
    params: {}
- name: address_similarity
  endpoint:
    path: /address-similarity
    method: POST
    data_selector: results
- name: supported_languages
  endpoint:
    path: /address-similarity/supported-languages
    method: GET
    data_selector: supportedLanguagePairs
- name: tokens
  endpoint:
    path: /tokens
    method: POST
    data_selector: content
- name: sentences
  endpoint:
    path: /sentences
    method: POST
    data_selector: content
- name: supported_languages_tokens
  endpoint:
    path: /tokens/supported-languages
    method: GET
    data_selector: supportedLanguages
- name: supported_languages_sentences
  endpoint:
    path: /sentences/supported-languages
    method: GET
    data_selector: supportedLanguages
- name: entities
  endpoint:
    path: /entities
    method: POST
    data_selector: entities
- name: name_deduplication
  endpoint:
    path: name-deduplication
    method: POST
    data_selector: result
- name: name_translation
  endpoint:
    path: name-translation
    method: POST
    data_selector: result
- name: entities
  endpoint:
    path: /entities
    method: POST
    data_selector: entitiesResponse
    params: {}
- name: name_translation
  endpoint:
    path: /name-translation
    method: POST
    data_selector: content
- name: language_identification
  endpoint:
    path: /language
    method: POST
    data_selector: content
- name: entities
  endpoint:
    path: /rest/v1/entities
    method: POST
    data_selector: content
- name: similar_terms
  endpoint:
    path: /rest/v1/semantics/similar
    method: POST
    data_selector: similarTerms
- name: vector
  endpoint:
    path: /rest/v1/semantics/vector
    method: POST
    data_selector: documentEmbedding
- name: morphology_complete
  endpoint:
    path: /morphology/complete
    method: POST
    data_selector: result
    params: {}
- name: sentiment
  endpoint:
    path: /rest/v1/sentiment
    method: POST
    data_selector: document
    params:
      content: string
      language: string
      options:
        modelType: DNN
- name: supported_languages
  endpoint:
    path: /sentiment/supported-languages
    method: GET
    data_selector: supportedLanguages
    params: {}
- name: morphology_complete
  endpoint:
    path: /morphology/complete
    method: POST
    data_selector: content
- name: morphology_lemmas
  endpoint:
    path: /morphology/lemmas
    method: POST
    data_selector: content
- name: sentiment
  endpoint:
    path: /rest/v1/sentiment
    method: POST
    data_selector: content
    params: {}
- name: topics
  endpoint:
    path: /rest/v1/topics
    method: POST
    data_selector: content
    params: {}
- name: morphology_lemmas
  endpoint:
    path: /morphology/lemmas
    method: POST
    data_selector: content
    params: {}
- name: morphology_parts_of_speech
  endpoint:
    path: /morphology/parts-of-speech
    method: POST
    data_selector: content
    params: {}
- name: morphology_compound_components
  endpoint:
    path: /morphology/compound-components
    method: POST
    data_selector: content
    params: {}
- name: topics
  endpoint:
    path: /topics
    method: POST
    data_selector: content
- name: categories
  endpoint:
    path: /categories
    method: POST
    data_selector: content
- name: morphology_han_readings
  endpoint:
    path: /rest/v1/morphology/han-readings
    method: POST
    data_selector: content
- name: tokens
  endpoint:
    path: /rest/v1/tokens
    method: POST
    data_selector: content
- name: supported_languages
  endpoint:
    path: /rest/v1/morphology/supported-languages
    method: GET
    data_selector: supportedLanguages
- name: categories
  endpoint:
    path: /rest/v1/categories
    method: POST
    data_selector: content
- name: relationships
  endpoint:
    path: /rest/v1/relationships
    method: POST
    data_selector: content
- name: supported_languages
  endpoint:
    path: /rest/v1/relationships/supported-languages
    method: GET
    data_selector: supportedLanguages
- name: tokens
  endpoint:
    path: /rest/v1/tokens
    method: POST
    data_selector: content
- name: sentences
  endpoint:
    path: /rest/v1/sentences
    method: POST
    data_selector: content
- name: supported_languages_tokens
  endpoint:
    path: /rest/v1/tokens/supported-languages
    method: GET
    data_selector: supportedLanguages
- name: supported_languages_sentences
  endpoint:
    path: /rest/v1/sentences/supported-languages
    method: GET
    data_selector: supportedLanguages
- name: entities
  endpoint:
    path: /rest/v1/entities
    method: POST
    data_selector: entities
- name: transliteration
  endpoint:
    path: /transliteration
    method: POST
    data_selector: transliteration
    params: {}
- name: supported_languages
  endpoint:
    path: /transliteration/supported-languages
    method: GET
    data_selector: supportedLanguages
    params: {}
- name: entities
  endpoint:
    path: /entities
    method: POST
    data_selector: entitiesResponse
    params: {}
- name: name_similarity
  endpoint:
    path: /name-similarity
    method: GET
    data_selector: null
    params: {}
- name: entities
  endpoint:
    path: /rest/v1/entities
    method: POST
    data_selector: content
- name: similar_terms
  endpoint:
    path: /rest/v1/semantics/similar
    method: POST
    data_selector: similarTerms
- name: vector
  endpoint:
    path: /rest/v1/semantics/vector
    method: POST
    data_selector: documentEmbedding
- name: sentiment
  endpoint:
    path: /rest/v1/sentiment
    method: POST
    data_selector: document
    params: {}
- name: supported_languages
  endpoint:
    path: /sentiment/supported-languages
    method: GET
    data_selector: supportedLanguages
    params: {}
- name: ping
  endpoint:
    path: /ping
    method: GET
- name: info
  endpoint:
    path: /info
    method: GET
- name: sentiment
  endpoint:
    path: /rest/v1/sentiment
    method: POST
    data_selector: content
- name: topics
  endpoint:
    path: /rest/v1/topics
    method: POST
    data_selector: content
- name: sentiment
  endpoint:
    path: /sentiment
    method: POST
    data_selector: response
    params: {}
- name: categories
  endpoint:
    path: /categories
    method: POST
    data_selector: response
    params: {}
- name: topics
  endpoint:
    path: /rest/v1/topics
    method: POST
    data_selector: content
- name: categories
  endpoint:
    path: /rest/v1/categories
    method: POST
    data_selector: content
- name: name_similarity
  endpoint:
    path: /rest/v1/name-similarity
    method: GET
    data_selector: score
- name: categories
  endpoint:
    path: /rest/v1/categories
    method: GET
    data_selector: supportedLanguages
- name: transliteration
  endpoint:
    path: /transliteration
    method: GET
    data_selector: content
    params: {}
- name: name_similarity
  endpoint:
    path: /rest/v1/name-similarity
    method: POST
    data_selector: nameSimilarityResponse
- name: supported_languages
  endpoint:
    path: /rest/v1/name-similarity/supported-languages
    method: GET
    data_selector: supportedLanguagePairs
- name: address_similarity
  endpoint:
    path: /address-similarity
    method: POST
    data_selector: results
- name: supported_languages
  endpoint:
    path: /address-similarity/supported-languages
    method: GET
    data_selector: supportedLanguagePairs
- name: ping
  endpoint:
    path: /ping
    method: GET
- name: info
  endpoint:
    path: /info
    method: GET
- name: name_deduplication
  endpoint:
    path: name-deduplication
    method: POST
    data_selector: content
- name: name_translation
  endpoint:
    path: name-translation
    method: POST
    data_selector: content
- name: language_identifier
  endpoint:
    path: /language
    method: POST
    data_selector: content
- name: name_translation
  endpoint:
    path: /name-translation
    method: POST
    data_selector: content
- name: sentiment
  endpoint:
    path: sentiment
    method: POST
    data_selector: response
    params:
      content: <html><head><title>New Ghostbusters Film</title></head><body><p>Original
        Ghostbuster Dan Aykroyd, who also co-wrote the 1984 Ghostbusters film, couldn’t
        be more pleased with the new all-female Ghostbusters cast, telling The Hollywood
        Reporter, “The Aykroyd family is delighted by this inheritance of the Ghostbusters
        torch by these most magnificent women in comedy.”</p></body></html>
      language: eng
- name: categories
  endpoint:
    path: categories
    method: POST
    data_selector: response
    params:
      content: If you are a fan of the British television series Downton Abbey and
        you are planning to be in New York anytime before April 2nd, there is a perfect
        stop for you while in town.
- name: morphology_complete
  endpoint:
    path: /morphology/complete
    method: POST
    data_selector: content
- name: supported_languages
  endpoint:
    path: /morphology/supported-languages
    method: GET
    data_selector: supportedLanguages
- name: name_similarity
  endpoint:
    path: /rest/v1/name-similarity
    method: GET
    data_selector: score
- name: supported_languages
  endpoint:
    path: /name-similarity/supported-languages
    method: GET
    data_selector: ''
- name: name_similarity
  endpoint:
    path: /rest/v1/name-similarity
    method: POST
    data_selector: response
    params: {}
- name: morphology_complete
  endpoint:
    path: /morphology/complete
    method: POST
    data_selector: content
- name: morphology_lemmas
  endpoint:
    path: /morphology/lemmas
    method: POST
    data_selector: content
- name: supported_languages
  endpoint:
    path: /address-similarity/supported-languages
    method: GET
    data_selector: supportedLanguagePairs
- name: transliteration_supported_languages
  endpoint:
    path: /rest/v1/transliteration/supported-languages
    method: GET
    data_selector: response
- name: morphology_lemmas
  endpoint:
    path: /morphology/lemmas
    method: POST
    data_selector: content
- name: morphology_parts_of_speech
  endpoint:
    path: /morphology/parts-of-speech
    method: POST
    data_selector: content
- name: morphology_compound_components
  endpoint:
    path: /morphology/compound-components
    method: POST
    data_selector: content
- name: morphology_han_readings
  endpoint:
    path: /rest/v1/morphology/han-readings
    method: POST
    data_selector: content
- name: tokens
  endpoint:
    path: /rest/v1/tokens
    method: POST
    data_selector: content
- name: supported_languages
  endpoint:
    path: /rest/v1/morphology/supported-languages
    method: GET
    data_selector: supportedLanguages
- name: ping
  endpoint:
    path: /ping
    method: GET
- name: info
  endpoint:
    path: /info
    method: GET
- name: sentences
  endpoint:
    path: /rest/v1/sentences
    method: POST
    data_selector: sentences
    params:
      content: string
- name: supported_languages
  endpoint:
    path: /rest/v1/sentences/supported-languages
    method: GET
    data_selector: supportedLanguages
    params: {}
- name: entities
  endpoint:
    path: /rest/v1/entities
    method: POST
    data_selector: entities
    params:
      content: string
- name: sentiment
  endpoint:
    path: sentiment
    method: POST
    data_selector: content
- name: categories
  endpoint:
    path: categories
    method: POST
    data_selector: content
- name: name_similarity
  endpoint:
    path: /rest/v1/name-similarity
    method: GET
- name: supported_languages
  endpoint:
    path: /name-similarity/supported-languages
    method: GET
- name: entities
  endpoint:
    path: /entities
    method: POST
    data_selector: entitiesResponse
- name: name_similarity
  endpoint:
    path: /rest/v1/name-similarity
    method: POST
    data_selector: results
- name: entities
  endpoint:
    path: /rest/v1/entities
    method: POST
    data_selector: content
- name: similar_terms
  endpoint:
    path: /rest/v1/semantics/similar
    method: POST
    data_selector: similarTerms
- name: vector
  endpoint:
    path: /rest/v1/semantics/vector
    method: POST
    data_selector: documentEmbedding
- name: address_similarity
  endpoint:
    path: /rest/v1/address-similarity
    method: POST
    data_selector: results
- name: name_deduplication
  endpoint:
    path: /rest/v1/name-deduplication
    method: POST
    data_selector: results
- name: supported_languages
  endpoint:
    path: /rest/v1/address-similarity/supported-languages
    method: GET
    data_selector: supportedLanguagePairs
- name: name_deduplication
  endpoint:
    path: /rest/v1/name-deduplication
    method: POST
    data_selector: result
    params:
      names: name_dedupe_data
      threshold: 0.75
- name: sentiment_analysis
  endpoint:
    path: /rest/v1/sentiment
    method: POST
    data_selector: document
    params:
      content: string
      language: string
      options:
        modelType: DNN
- name: supported_languages
  endpoint:
    path: /sentiment/supported-languages
    method: GET
    data_selector: supportedLanguages
    params: {}
- name: transliteration
  endpoint:
    path: /rest/v1/transliteration
    method: GET
    data_selector: content
- name: supported_languages
  endpoint:
    path: /rest/v1/transliteration/supported-languages
    method: GET
    data_selector: languages
- name: sentiment
  endpoint:
    path: /rest/v1/sentiment
    method: POST
    data_selector: content
- name: topics
  endpoint:
    path: /rest/v1/topics
    method: POST
    data_selector: content
- name: topics
  endpoint:
    path: /topics
    method: POST
    data_selector: result
    params: {}
- name: categories
  endpoint:
    path: /categories
    method: POST
    data_selector: result
    params: {}
- name: categories
  endpoint:
    path: /categories
    method: GET
    data_selector: supportedLanguages
- name: transliteration
  endpoint:
    path: /transliteration
    method: GET
    data_selector: content
- name: ping
  endpoint:
    path: /ping
    method: GET
- name: info
  endpoint:
    path: /info
    method: GET
- name: sentiment
  endpoint:
    path: /rest/v1/sentiment
    method: POST
    data_selector: response
    params: {}
- name: categories
  endpoint:
    path: /rest/v1/categories
    method: POST
    data_selector: response
    params: {}
- name: name_similarity
  endpoint:
    path: /rest/v1/name-similarity
    method: POST
    data_selector: score
- name: supported_languages
  endpoint:
    path: /name-similarity/supported-languages
    method: GET
    data_selector: ''
- name: name_similarity
  endpoint:
    path: /rest/v1/name-similarity
    method: POST
    data_selector: results
    params: {}
- name: ping
  endpoint:
    path: /ping
    method: GET
- name: info
  endpoint:
    path: /info
    method: GET
- name: address_similarity
  endpoint:
    path: /rest/v1/address-similarity
    method: POST
    data_selector: results
    params: {}
- name: supported_languages
  endpoint:
    path: /rest/v1/address-similarity/supported-languages
    method: GET
    data_selector: languages
    params: {}
- name: sentiment
  endpoint:
    path: /rest/v1/sentiment
    method: POST
    data_selector: response
    params:
      content: sentiment_file_data
      language: eng
- name: categories
  endpoint:
    path: /rest/v1/categories
    method: POST
    data_selector: response
    params:
      content: categories_text_data
- name: name_similarity
  endpoint:
    path: /rest/v1/name-similarity
    method: GET
- name: supported_languages
  endpoint:
    path: /name-similarity/supported-languages
    method: GET
- name: name_deduplication
  endpoint:
    path: /name-deduplication
    method: POST
    data_selector: content
    params: {}
- name: name_translation
  endpoint:
    path: /name-translation
    method: POST
    data_selector: content
    params: {}
- name: name_translation
  endpoint:
    path: /name-translation
    method: POST
    data_selector: result
- name: language_identification
  endpoint:
    path: /language
    method: POST
    data_selector: result
- name: name_similarity
  endpoint:
    path: /rest/v1/name-similarity
    method: POST
    data_selector: nameSimilarityResponse
- name: supported_languages
  endpoint:
    path: /rest/v1/language/supported-languages
    method: GET
    data_selector: supportedLanguages
- name: supported_languages
  endpoint:
    path: /address-similarity/supported-languages
    method: GET
    data_selector: supportedLanguagePairs
- name: transliteration_supported_languages
  endpoint:
    path: /rest/v1/transliteration/supported-languages
    method: GET
- name: transliteration
  endpoint:
    path: /rest/v1/transliteration
    method: GET
    data_selector: response
    params: {}
- name: supported_languages
  endpoint:
    path: /rest/v1/transliteration/supported-languages
    method: GET
    data_selector: response
    params: {}
- name: ping
  endpoint:
    path: /ping
    method: GET
- name: info
  endpoint:
    path: /info
    method: GET
- name: ping
  endpoint:
    path: /ping
    method: GET
- name: info
  endpoint:
    path: /info
    method: GET
- name: sentiment
  endpoint:
    path: sentiment
    method: POST
    data_selector: content
- name: categories
  endpoint:
    path: categories
    method: POST
    data_selector: content
- name: sentiment
  endpoint:
    path: /rest/v1/sentiment
    method: POST
    data_selector: response
    params:
      content: text
- name: categories
  endpoint:
    path: /rest/v1/categories
    method: POST
    data_selector: response
    params:
      content: text
- name: name_similarity
  endpoint:
    path: /rest/v1/name-similarity
    method: GET
- name: supported_languages
  endpoint:
    path: /name-similarity/supported-languages
    method: GET
- name: name_similarity
  endpoint:
    path: /rest/v1/name-similarity
    method: GET
- name: supported_languages
  endpoint:
    path: /name-similarity/supported-languages
    method: GET
- name: name_similarity
  endpoint:
    path: /rest/v1/name-similarity
    method: POST
    data_selector: response
    params: {}
- name: supported_languages
  endpoint:
    path: /rest/v1/name-similarity/supported-languages
    method: GET
    data_selector: supportedLanguagePairs
    params: {}
- name: name_similarity
  endpoint:
    path: /rest/v1/name-similarity
    method: POST
    data_selector: response
    params: {}
- name: supported_languages
  endpoint:
    path: /rest/v1/name-similarity/supported-languages
    method: GET
    data_selector: supportedLanguagePairs
    params: {}
- name: address_similarity
  endpoint:
    path: /rest/v1/address-similarity
    method: POST
    data_selector: result
- name: supported_languages
  endpoint:
    path: /rest/v1/address-similarity/supported-languages
    method: GET
    data_selector: supportedLanguagePairs
- name: address_similarity
  endpoint:
    path: /address-similarity
    method: POST
    data_selector: results
    params: {}
- name: supported_languages
  endpoint:
    path: /address-similarity/supported-languages
    method: GET
    data_selector: supportedLanguagePairs
    params: {}
- name: name_deduplication
  endpoint:
    path: /name-deduplication
    method: POST
    data_selector: results
- name: transliteration
  endpoint:
    path: /rest/v1/transliteration
    method: GET
    data_selector: content
    params: {}
- name: name_deduplication
  endpoint:
    path: /name-deduplication
    method: POST
    data_selector: content
- name: name_translation
  endpoint:
    path: /name-translation
    method: POST
    data_selector: content
- name: name_translation
  endpoint:
    path: /name-translation
    method: POST
    data_selector: content
- name: language_identification
  endpoint:
    path: /language
    method: POST
    data_selector: content
- name: language
  endpoint:
    path: /rest/v1/language/supported-languages
    method: GET
    data_selector: supportedLanguages
- name: morphology_complete
  endpoint:
    path: /rest/v1/morphology/complete
    method: POST
    data_selector: tokens
- name: morphology_complete
  endpoint:
    path: /morphology/complete
    method: POST
    data_selector: content
    params: {}
- name: morphology_lemmas
  endpoint:
    path: /morphology/lemmas
    method: POST
    data_selector: content
    params: {}
- name: ping
  endpoint:
    path: /ping
    method: GET
- name: info
  endpoint:
    path: /info
    method: GET
- name: morphology_lemmas
  endpoint:
    path: /morphology/lemmas
    method: POST
    data_selector: content
- name: morphology_parts_of_speech
  endpoint:
    path: /morphology/parts-of-speech
    method: POST
    data_selector: content
- name: morphology_compound_components
  endpoint:
    path: /morphology/compound-components
    method: POST
    data_selector: content
- name: sentiment
  endpoint:
    path: /sentiment
    method: POST
    data_selector: response
    params:
      content: string
      language: eng
- name: categories
  endpoint:
    path: /categories
    method: POST
    data_selector: response
    params:
      content: string
- name: morphology_han_readings
  endpoint:
    path: /rest/v1/morphology/han-readings
    method: POST
    data_selector: content
    params: {}
- name: tokens
  endpoint:
    path: /rest/v1/tokens
    method: POST
    data_selector: content
    params: {}
- name: supported_languages
  endpoint:
    path: /rest/v1/morphology/supported-languages
    method: GET
    data_selector: supportedLanguages
    params: {}
- name: tokens
  endpoint:
    path: /rest/v1/tokens
    method: POST
    data_selector: content
- name: sentences
  endpoint:
    path: /rest/v1/sentences
    method: POST
    data_selector: content
- name: name_similarity
  endpoint:
    path: /rest/v1/name-similarity
    method: POST
- name: supported_languages
  endpoint:
    path: /name-similarity/supported-languages
    method: GET
- name: name_similarity
  endpoint:
    path: /name-similarity
    method: POST
    data_selector: response
    params: {}
- name: entities
  endpoint:
    path: /entities
    method: POST
    data_selector: entitiesResponse
    params: {}
- name: address_similarity
  endpoint:
    path: /address-similarity
    method: POST
    data_selector: results
- name: supported_languages
  endpoint:
    path: /address-similarity/supported-languages
    method: GET
    data_selector: supportedLanguagePairs
- name: entities
  endpoint:
    path: /rest/v1/entities
    method: POST
    data_selector: content
    params: {}
- name: similar_terms
  endpoint:
    path: /rest/v1/semantics/similar
    method: POST
    data_selector: similarTerms
    params: {}
- name: vector
  endpoint:
    path: /rest/v1/semantics/vector
    method: POST
    data_selector: documentEmbedding
    params: {}
- name: name_deduplication
  endpoint:
    path: /name-deduplication
    method: POST
    data_selector: result
    params: {}
- name: name_translation
  endpoint:
    path: /name-translation
    method: POST
    data_selector: result
    params: {}
- name: sentiment
  endpoint:
    path: /rest/v1/sentiment
    method: POST
    data_selector: document
    params:
      content: string
      language: string
      options:
        modelType: string
- name: supported_languages
  endpoint:
    path: /sentiment/supported-languages
    method: GET
    data_selector: supportedLanguages
    params: {}
- name: name_translation
  endpoint:
    path: /name-translation
    method: POST
    data_selector: content
- name: language_identifier
  endpoint:
    path: /language
    method: POST
    data_selector: content
- name: sentiment
  endpoint:
    path: /rest/v1/sentiment
    method: POST
    data_selector: content
- name: topics
  endpoint:
    path: /rest/v1/topics
    method: POST
    data_selector: content
- name: language
  endpoint:
    path: /rest/v1/language
    method: GET
    data_selector: supportedLanguages
- name: topics
  endpoint:
    path: /topics
    method: POST
    data_selector: content
- name: categories
  endpoint:
    path: /categories
    method: POST
    data_selector: content
- name: transliteration
  endpoint:
    path: /rest/v1/transliteration/supported-languages
    method: GET
    data_selector: categories
- name: categories
  endpoint:
    path: /rest/v1/categories
    method: POST
    data_selector: content
- name: relationships
  endpoint:
    path: /rest/v1/relationships
    method: POST
    data_selector: content
- name: supported_languages
  endpoint:
    path: /rest/v1/relationships/supported-languages
    method: GET
    data_selector: supportedLanguages
- name: ping
  endpoint:
    path: /ping
    method: GET
- name: info
  endpoint:
    path: /info
    method: GET
- name: transliteration
  endpoint:
    path: /transliteration
    method: POST
    data_selector: content
- name: categories
  endpoint:
    path: /categories
    method: POST
    data_selector: content
- name: sentiment
  endpoint:
    path: sentiment
    method: POST
    data_selector: response
    params: {}
- name: categories
  endpoint:
    path: categories
    method: POST
    data_selector: response
    params: {}
- name: name_similarity
  endpoint:
    path: /rest/v1/name-similarity
    method: POST
    data_selector: score
- name: supported_languages
  endpoint:
    path: /name-similarity/supported-languages
    method: GET
    data_selector: languages
- name: name_similarity
  endpoint:
    path: /rest/v1/name-similarity
    method: POST
    data_selector: response
    params: {}
- name: address_similarity
  endpoint:
    path: /address-similarity
    method: POST
    data_selector: results
- name: supported_languages
  endpoint:
    path: /address-similarity/supported-languages
    method: GET
    data_selector: supportedLanguagePairs
- name: ping
  endpoint:
    path: /ping
    method: GET
- name: info
  endpoint:
    path: /info
    method: GET
- name: name_deduplication
  endpoint:
    path: /rest/v1/name-deduplication
    method: POST
    data_selector: result
- name: name_translation
  endpoint:
    path: /rest/v1/name-translation
    method: POST
    data_selector: result
- name: supported_languages
  endpoint:
    path: /rest/v1/name-translation/supported-languages
    method: GET
    data_selector: supportedLanguagePairs
- name: sentiment
  endpoint:
    path: sentiment
    method: POST
    data_selector: response
    params:
      content: sentiment_file_data
- name: categories
  endpoint:
    path: categories
    method: POST
    data_selector: response
    params:
      content: categories_text_data
- name: name_translation
  endpoint:
    path: /name-translation
    method: POST
    data_selector: content
- name: language_identifier
  endpoint:
    path: /language
    method: POST
    data_selector: content
- name: name_similarity
  endpoint:
    path: /rest/v1/name-similarity
    method: POST
    data_selector: score
- name: supported_languages
  endpoint:
    path: /name-similarity/supported-languages
    method: GET
- name: name_similarity
  endpoint:
    path: /rest/v1/name-similarity
    method: POST
    data_selector: response
    params: {}
- name: morphology_complete
  endpoint:
    path: /morphology/complete
    method: POST
    data_selector: tokens
    params:
      content: The quick brown fox jumped over the lazy dog. 👍🏾 Yes he did. B)
- name: morphology_complete
  endpoint:
    path: morphology/complete
    method: POST
    data_selector: content
- name: morphology_lemmas
  endpoint:
    path: morphology/lemmas
    method: POST
    data_selector: content
- name: address_similarity
  endpoint:
    path: /address-similarity
    method: POST
    data_selector: results
    params: {}
- name: supported_languages
  endpoint:
    path: /address-similarity/supported-languages
    method: GET
    data_selector: supportedLanguagePairs
    params: {}
- name: name_deduplication
  endpoint:
    path: /rest/v1/name-deduplication
    method: POST
    data_selector: content
    params: {}
- name: name_translation
  endpoint:
    path: /rest/v1/name-translation
    method: POST
    data_selector: content
    params: {}
- name: morphology_lemmas
  endpoint:
    path: /morphology/lemmas
    method: POST
    data_selector: content
- name: morphology_parts_of_speech
  endpoint:
    path: /morphology/parts-of-speech
    method: POST
    data_selector: content
- name: morphology_compound_components
  endpoint:
    path: /morphology/compound-components
    method: POST
    data_selector: content
- name: name_translation
  endpoint:
    path: /name-translation
    method: POST
    data_selector: content
- name: language
  endpoint:
    path: /language
    method: POST
    data_selector: content
- name: morphology_han_readings
  endpoint:
    path: /morphology/han-readings
    method: POST
    data_selector: content
- name: tokens
  endpoint:
    path: /tokens
    method: POST
    data_selector: content
- name: supported_languages
  endpoint:
    path: /morphology/supported-languages
    method: GET
    data_selector: ''
- name: language
  endpoint:
    path: /rest/v1/language
    method: GET
    data_selector: supportedLanguages
- name: morphology_complete
  endpoint:
    path: /rest/v1/morphology/complete
    method: POST
    data_selector: tokens
- name: tokens
  endpoint:
    path: /rest/v1/tokens
    method: POST
    data_selector: content
- name: sentences
  endpoint:
    path: /rest/v1/sentences
    method: POST
    data_selector: content
- name: supported_languages_tokens
  endpoint:
    path: /rest/v1/tokens/supported-languages
    method: GET
    data_selector: supportedLanguages
- name: supported_languages_sentences
  endpoint:
    path: /rest/v1/sentences/supported-languages
    method: GET
    data_selector: supportedLanguages
- name: entities
  endpoint:
    path: /rest/v1/entities
    method: POST
    data_selector: entities
- name: morphology_complete
  endpoint:
    path: /morphology/complete
    method: POST
    data_selector: content
    params: {}
- name: morphology_lemmas
  endpoint:
    path: /morphology/lemmas
    method: POST
    data_selector: content
    params: {}
- name: entities
  endpoint:
    path: /entities
    method: POST
    data_selector: entitiesResponse
- name: morphology_lemmas
  endpoint:
    path: /morphology/lemmas
    method: POST
    data_selector: content
- name: morphology_parts_of_speech
  endpoint:
    path: /morphology/parts-of-speech
    method: POST
    data_selector: content
- name: morphology_compound_components
  endpoint:
    path: /morphology/compound-components
    method: POST
    data_selector: content
- name: morphology
  endpoint:
    path: /morphology/han-readings
    method: POST
    data_selector: content
- name: tokens
  endpoint:
    path: /tokens
    method: POST
    data_selector: content
- name: supported_languages
  endpoint:
    path: /tokens/supported-languages
    method: GET
    data_selector: ''
- name: entities
  endpoint:
    path: /rest/v1/entities
    method: POST
    data_selector: header
    params:
      content: string
      options:
        resultLanguages:
        - string
- name: similar_terms
  endpoint:
    path: /rest/v1/semantics/similar
    method: POST
    data_selector: similarTerms
    params:
      content: string
      options:
        resultLanguages:
        - string
        count: 10
- name: vector
  endpoint:
    path: /rest/v1/semantics/vector
    method: POST
    data_selector: documentEmbedding
    params:
      content: string
      options:
        perToken: false
- name: sentences
  endpoint:
    path: /rest/v1/sentences
    method: POST
    data_selector: sentences
    params: {}
- name: tokens
  endpoint:
    path: /rest/v1/tokens
    method: POST
    data_selector: tokens
    params: {}
- name: supported_languages
  endpoint:
    path: /rest/v1/sentences/supported-languages
    method: GET
    data_selector: supportedLanguages
    params: {}
- name: sentiment_analyzer
  endpoint:
    path: /rest/v1/sentiment
    method: POST
    data_selector: document
    params:
      content: string
      language: string
      options:
        modelType: string
- name: supported_languages
  endpoint:
    path: /sentiment/supported-languages
    method: GET
    data_selector: supportedLanguages
    params: {}
- name: entities
  endpoint:
    path: /entities
    method: POST
    data_selector: entitiesResponse
- name: sentiment
  endpoint:
    path: /rest/v1/sentiment
    method: POST
    data_selector: content
    params: {}
- name: topics
  endpoint:
    path: /rest/v1/topics
    method: POST
    data_selector: content
    params: {}
- name: supported_languages
  endpoint:
    path: /rest/v1/sentiment/supported-languages
    method: GET
    data_selector: supportedLanguages
    params: {}
- name: entities
  endpoint:
    path: /rest/v1/entities
    method: POST
    data_selector: content
- name: similar_terms
  endpoint:
    path: /rest/v1/semantics/similar
    method: POST
    data_selector: content
- name: vector
  endpoint:
    path: /rest/v1/semantics/vector
    method: POST
    data_selector: content
- name: supported_languages
  endpoint:
    path: /rest/v1/entities/supported-languages
    method: GET
    data_selector: supportedLanguages
- name: topics
  endpoint:
    path: topics
    method: GET
    data_selector: content
- name: categories
  endpoint:
    path: categories
    method: POST
    data_selector: content
- name: sentiment
  endpoint:
    path: /rest/v1/sentiment
    method: POST
    data_selector: document
    params:
      content: string
      language: string
      options:
        modelType: string
- name: supported_languages
  endpoint:
    path: /sentiment/supported-languages
    method: GET
    data_selector: supportedLanguages
    params: {}
- name: categories
  endpoint:
    path: /rest/v1/categories
    method: POST
    data_selector: relationships
    params: {}
- name: relationships
  endpoint:
    path: /rest/v1/relationships
    method: POST
    data_selector: relationships
    params: {}
- name: sentiment
  endpoint:
    path: /rest/v1/sentiment
    method: POST
    data_selector: content
- name: topics
  endpoint:
    path: /rest/v1/topics
    method: POST
    data_selector: content
- name: supported_languages
  endpoint:
    path: /rest/v1/relationships/supported-languages
    method: GET
    data_selector: supportedLanguages
    params: {}
- name: transliteration
  endpoint:
    path: /transliteration
    method: POST
    data_selector: content
- name: categories
  endpoint:
    path: /categories
    method: POST
    data_selector: content
- name: topics
  endpoint:
    path: /rest/v1/topics
    method: POST
    data_selector: content
- name: categories
  endpoint:
    path: /rest/v1/categories
    method: POST
    data_selector: content
- name: categories
  endpoint:
    path: /rest/v1/categories
    method: POST
    data_selector: content
- name: relationships
  endpoint:
    path: /rest/v1/relationships
    method: POST
    data_selector: content
- name: ping
  endpoint:
    path: /ping
    method: GET
- name: info
  endpoint:
    path: /info
    method: GET
- name: supported_languages
  endpoint:
    path: /rest/v1/relationships/supported-languages
    method: GET
    data_selector: supportedLanguages
    params: {}
- name: sentiment
  endpoint:
    path: /rest/v1/sentiment
    method: POST
    data_selector: response
    params:
      content: sentiment_file_data
      language: eng
- name: categories
  endpoint:
    path: /rest/v1/categories
    method: POST
    data_selector: response
    params:
      content: categories_text_data
- name: transliteration
  endpoint:
    path: /transliteration
    method: POST
    data_selector: content
    params:
      content: string
- name: categories
  endpoint:
    path: /categories
    method: POST
    data_selector: content
    params:
      content: string
- name: name_similarity
  endpoint:
    path: /rest/v1/name-similarity
    method: GET
- name: supported_languages
  endpoint:
    path: /name-similarity/supported-languages
    method: GET
- name: name_similarity
  endpoint:
    path: /rest/v1/name-similarity
    method: POST
    data_selector: result
- name: supported_languages
  endpoint:
    path: /rest/v1/name-similarity/supported-languages
    method: GET
    data_selector: supportedLanguagePairs
- name: address_similarity
  endpoint:
    path: /address-similarity
    method: POST
    data_selector: results
- name: supported_languages
  endpoint:
    path: /address-similarity/supported-languages
    method: GET
    data_selector: supportedLanguagePairs
- name: ping
  endpoint:
    path: /ping
    method: GET
- name: info
  endpoint:
    path: /info
    method: GET
- name: name_deduplication
  endpoint:
    path: /rest/v1/name-deduplication
    method: POST
    data_selector: result
- name: name_translation
  endpoint:
    path: /rest/v1/name-translation
    method: POST
    data_selector: result
- name: supported_languages
  endpoint:
    path: /rest/v1/name-translation/supported-languages
    method: GET
    data_selector: supportedLanguagePairs
- name: sentiment
  endpoint:
    path: /sentiment
    method: POST
    data_selector: response
    params:
      content: sentiment_file_data
- name: categories
  endpoint:
    path: /categories
    method: POST
    data_selector: response
    params:
      content: categories_text_data
- name: name_translation
  endpoint:
    path: /name-translation
    method: POST
    data_selector: content
- name: language_identifier
  endpoint:
    path: /language
    method: POST
    data_selector: content
- name: name_similarity
  endpoint:
    path: /rest/v1/name-similarity
    method: POST
    data_selector: score
- name: supported_languages
  endpoint:
    path: /name-similarity/supported-languages
    method: GET
    data_selector: ''
- name: language
  endpoint:
    path: /rest/v1/language
    method: GET
    data_selector: supportedLanguages
- name: morphology
  endpoint:
    path: /rest/v1/morphology/complete
    method: POST
    data_selector: tokens
- name: name_similarity
  endpoint:
    path: /rest/v1/name-similarity
    method: POST
    data_selector: response
    params: {}
- name: address_similarity
  endpoint:
    path: /rest/v1/address-similarity
    method: POST
    data_selector: response
    params: {}
- name: supported_languages
  endpoint:
    path: /rest/v1/name-similarity/supported-languages
    method: GET
    data_selector: supportedLanguagePairs
    params: {}
- name: address_similarity
  endpoint:
    path: /address-similarity
    method: POST
    data_selector: results
    params: {}
- name: supported_languages
  endpoint:
    path: /address-similarity/supported-languages
    method: GET
    data_selector: supportedLanguagePairs
    params: {}
- name: morphology_complete
  endpoint:
    path: /morphology/complete
    method: POST
    data_selector: content
- name: morphology_lemmas
  endpoint:
    path: /morphology/lemmas
    method: POST
    data_selector: content
- name: name_deduplication
  endpoint:
    path: /rest/v1/name-deduplication
    method: POST
    data_selector: response
    params: {}
- name: name_translation
  endpoint:
    path: /rest/v1/name-translation
    method: POST
    data_selector: response
    params: {}
- name: morphology_lemmas
  endpoint:
    path: /morphology/lemmas
    method: POST
    data_selector: content
- name: morphology_parts_of_speech
  endpoint:
    path: /morphology/parts-of-speech
    method: POST
    data_selector: content
- name: morphology_compound_components
  endpoint:
    path: /morphology/compound-components
    method: POST
    data_selector: content
- name: name_translation
  endpoint:
    path: /name-translation
    method: POST
    data_selector: result
    params: {}
- name: language_identification
  endpoint:
    path: /language
    method: POST
    data_selector: result
    params: {}
- name: morphology_han_readings
  endpoint:
    path: /rest/v1/morphology/han-readings
    method: POST
    data_selector: content
- name: tokens
  endpoint:
    path: /rest/v1/tokens
    method: POST
    data_selector: content
- name: supported_languages
  endpoint:
    path: /rest/v1/morphology/supported-languages
    method: GET
    data_selector: supportedLanguages
- name: language_detection
  endpoint:
    path: /rest/v1/language
    method: POST
    data_selector: result
- name: morphology
  endpoint:
    path: /rest/v1/morphology/complete
    method: POST
    data_selector: result
- name: morphology_complete
  endpoint:
    path: /morphology/complete
    method: POST
    data_selector: content
- name: morphology_lemmas
  endpoint:
    path: /morphology/lemmas
    method: POST
    data_selector: content
- name: tokens
  endpoint:
    path: /rest/v1/tokens
    method: POST
    data_selector: content
- name: sentences
  endpoint:
    path: /rest/v1/sentences
    method: POST
    data_selector: content
- name: supported_languages_tokens
  endpoint:
    path: /rest/v1/tokens/supported-languages
    method: GET
    data_selector: supportedLanguages
- name: supported_languages_sentences
  endpoint:
    path: /rest/v1/sentences/supported-languages
    method: GET
    data_selector: supportedLanguages
- name: entities
  endpoint:
    path: /rest/v1/entities
    method: POST
    data_selector: entities
- name: entity_extraction
  endpoint:
    path: /entities
    method: POST
    data_selector: entitiesResponse
- name: morphology_lemmas
  endpoint:
    path: morphology
    method: POST
    data_selector: content
    params: {}
- name: morphology_parts_of_speech
  endpoint:
    path: morphology
    method: POST
    data_selector: content
    params: {}
- name: morphology_compound_components
  endpoint:
    path: morphology
    method: POST
    data_selector: content
    params: {}
- name: entities
  endpoint:
    path: /entities
    method: POST
    data_selector: content
- name: similar_terms
  endpoint:
    path: /semantics/similar
    method: POST
    data_selector: similarTerms
- name: vector
  endpoint:
    path: /semantics/vector
    method: POST
    data_selector: documentEmbedding
- name: morphology_han_readings
  endpoint:
    path: /rest/v1/morphology/han-readings
    method: POST
    data_selector: content
- name: tokens
  endpoint:
    path: /rest/v1/tokens
    method: POST
    data_selector: content
- name: supported_languages
  endpoint:
    path: /rest/v1/morphology/supported-languages
    method: GET
    data_selector: supportedLanguages
- name: sentences
  endpoint:
    path: /rest/v1/sentences
    method: POST
    data_selector: sentences
    params: {}
- name: tokens
  endpoint:
    path: /rest/v1/tokens
    method: POST
    data_selector: tokens
    params: {}
- name: sentiment
  endpoint:
    path: /rest/v1/sentiment
    method: POST
    data_selector: document
    params: {}
- name: supported_languages
  endpoint:
    path: /sentiment/supported-languages
    method: GET
    data_selector: supportedLanguages
    params: {}
- name: entities
  endpoint:
    path: /entities
    method: POST
    data_selector: entitiesResponse
    params: {}
- name: entities
  endpoint:
    path: /entities
    method: POST
    data_selector: content
- name: similar_terms
  endpoint:
    path: /semantics/similar
    method: POST
    data_selector: similarTerms
- name: vector
  endpoint:
    path: /semantics/vector
    method: POST
    data_selector: documentEmbedding
- name: sentiment
  endpoint:
    path: /rest/v1/sentiment
    method: POST
    data_selector: content
    params: {}
- name: topics
  endpoint:
    path: /rest/v1/topics
    method: POST
    data_selector: content
    params: {}
- name: supported_languages
  endpoint:
    path: /rest/v1/sentiment/supported-languages
    method: GET
    data_selector: supportedLanguages
    params: {}
- name: topics
  endpoint:
    path: /topics
    method: POST
    data_selector: content
- name: categories
  endpoint:
    path: /categories
    method: POST
    data_selector: content
- name: sentiment
  endpoint:
    path: /rest/v1/sentiment
    method: POST
    data_selector: document
    params: {}
- name: supported_languages
  endpoint:
    path: /rest/v1/sentiment/supported-languages
    method: GET
    data_selector: supportedLanguages
    params: {}
- name: categories
  endpoint:
    path: /categories
    method: POST
    data_selector: content
- name: relationships
  endpoint:
    path: /relationships
    method: POST
    data_selector: content
- name: sentiment
  endpoint:
    path: /rest/v1/sentiment
    method: POST
    data_selector: content
- name: topics
  endpoint:
    path: /rest/v1/topics
    method: POST
    data_selector: content
- name: supported_languages
  endpoint:
    path: /rest/v1/sentiment/supported-languages
    method: GET
    data_selector: supportedLanguages
- name: supported_languages
  endpoint:
    path: /rest/v1/relationships/supported-languages
    method: GET
    data_selector: supportedLanguages
- name: topics
  endpoint:
    path: /topics
    method: POST
    data_selector: content
- name: categories
  endpoint:
    path: /categories
    method: POST
    data_selector: content
- name: transliteration
  endpoint:
    path: /transliteration
    method: POST
    data_selector: content
- name: categories
  endpoint:
    path: /categories
    method: POST
    data_selector: content
- name: categories
  endpoint:
    path: /rest/v1/categories
    method: POST
    data_selector: content
- name: relationships
  endpoint:
    path: /rest/v1/relationships
    method: POST
    data_selector: content
- name: supported_languages
  endpoint:
    path: /rest/v1/categories/supported-languages
    method: GET
    data_selector: ''
- name: supported_languages
  endpoint:
    path: /rest/v1/relationships/supported-languages
    method: GET
    data_selector: supportedLanguages
    params: {}
- name: transliteration
  endpoint:
    path: /transliteration
    method: POST
    data_selector: result
- name: categories
  endpoint:
    path: /categories
    method: POST
    data_selector: result
- name: ping
  endpoint:
    path: /ping
    method: GET
- name: info
  endpoint:
    path: /info
    method: GET
- name: sentiment
  endpoint:
    path: /rest/v1/sentiment
    method: POST
    data_selector: response
    params:
      content: sentiment_file_data
      language: eng
- name: categories
  endpoint:
    path: /rest/v1/categories
    method: POST
    data_selector: response
    params:
      content: categories_text_data
- name: ping
  endpoint:
    path: /ping
    method: GET
    data_selector: response
- name: info
  endpoint:
    path: /info
    method: GET
    data_selector: response
- name: name_similarity
  endpoint:
    path: /rest/v1/name-similarity
    method: POST
    data_selector: score
- name: supported_languages
  endpoint:
    path: /name-similarity/supported-languages
    method: GET
    data_selector: ''
- name: sentiment
  endpoint:
    path: sentiment
    method: POST
    data_selector: content
- name: categories
  endpoint:
    path: categories
    method: POST
    data_selector: content
- name: name_similarity
  endpoint:
    path: /rest/v1/name-similarity
    method: POST
    data_selector: response
    params: {}
- name: name_similarity
  endpoint:
    path: /rest/v1/name-similarity
    method: GET
- name: supported_languages
  endpoint:
    path: /name-similarity/supported-languages
    method: GET
- name: address_similarity
  endpoint:
    path: /address-similarity
    method: POST
    data_selector: results
    params: {}
- name: name_deduplication
  endpoint:
    path: /name-deduplication
    method: POST
    data_selector: results
    params: {}
- name: supported_languages
  endpoint:
    path: /address-similarity/supported-languages
    method: GET
    data_selector: supportedLanguagePairs
    params: {}
- name: name_similarity
  endpoint:
    path: /rest/v1/name-similarity
    method: POST
    data_selector: response
    params: {}
- name: supported_languages
  endpoint:
    path: /rest/v1/name-similarity/supported-languages
    method: GET
    data_selector: supportedLanguagePairs
    params: {}
- name: address_similarity
  endpoint:
    path: /rest/v1/address-similarity
    method: POST
    data_selector: result
    params: {}
- name: supported_languages
  endpoint:
    path: /rest/v1/address-similarity/supported-languages
    method: GET
    data_selector: supportedLanguagePairs
    params: {}
- name: name_deduplication
  endpoint:
    path: /name-deduplication
    method: POST
    data_selector: result
    params:
      name: string
      targetLanguage: string
      targetScript: string
- name: name_translation
  endpoint:
    path: /name-translation
    method: POST
    data_selector: result
    params:
      name: string
      targetLanguage: string
      targetScript: string
- name: name_translation
  endpoint:
    path: /name-translation
    method: POST
    data_selector: translation
- name: name_deduplication
  endpoint:
    path: /name-deduplication
    method: POST
    data_selector: result
- name: name_translation
  endpoint:
    path: /name-translation
    method: POST
    data_selector: content
- name: language_detection
  endpoint:
    path: /language
    method: POST
    data_selector: content
- name: name_translation
  endpoint:
    path: /name-translation
    method: POST
    data_selector: content
    params: {}
- name: language_identification
  endpoint:
    path: /language
    method: POST
    data_selector: content
    params: {}
- name: language
  endpoint:
    path: /rest/v1/language
    method: GET
    data_selector: supportedLanguages
- name: morphology_complete
  endpoint:
    path: /rest/v1/morphology/complete
    method: POST
    data_selector: tokens
- name: language
  endpoint:
    path: /rest/v1/language
    method: GET
    data_selector: supportedLanguages
- name: morphology_complete
  endpoint:
    path: /rest/v1/morphology/complete
    method: POST
    data_selector: tokens
- name: morphology_complete
  endpoint:
    path: morphology/complete
    method: POST
    data_selector: content
- name: morphology_lemmas
  endpoint:
    path: morphology/lemmas
    method: POST
    data_selector: content
- name: morphology_complete
  endpoint:
    path: /morphology/complete
    method: POST
    data_selector: content
- name: morphology_lemmas
  endpoint:
    path: /morphology/lemmas
    method: POST
    data_selector: content
- name: morphology_lemmas
  endpoint:
    path: morphology
    method: POST
    data_selector: content
- name: morphology_parts_of_speech
  endpoint:
    path: morphology
    method: POST
    data_selector: content
- name: morphology_compound_components
  endpoint:
    path: morphology
    method: POST
    data_selector: content
- name: morphology_lemmas
  endpoint:
    path: /morphology
    method: POST
    data_selector: content
    params: {}
- name: morphology_parts_of_speech
  endpoint:
    path: /morphology/parts-of-speech
    method: POST
    data_selector: content
    params: {}
- name: morphology_compound_components
  endpoint:
    path: /morphology/compound-components
    method: POST
    data_selector: content
    params: {}
- name: morphology_han_readings
  endpoint:
    path: /rest/v1/morphology/han-readings
    method: POST
    data_selector: content
- name: tokens
  endpoint:
    path: /rest/v1/tokens
    method: POST
    data_selector: content
- name: supported_languages
  endpoint:
    path: /rest/v1/morphology/supported-languages
    method: GET
    data_selector: languages
- name: morphology_han_readings
  endpoint:
    path: /morphology/han-readings
    method: POST
    data_selector: content
- name: tokens
  endpoint:
    path: /tokens
    method: POST
    data_selector: content
- name: supported_languages
  endpoint:
    path: /morphology/supported-languages
    method: GET
    data_selector: ''
- name: tokens
  endpoint:
    path: /rest/v1/tokens
    method: POST
    data_selector: content
    params: {}
- name: sentences
  endpoint:
    path: /rest/v1/sentences
    method: POST
    data_selector: content
    params: {}
- name: supported_languages_tokens
  endpoint:
    path: /rest/v1/tokens/supported-languages
    method: GET
    data_selector: supportedLanguages
    params: {}
- name: supported_languages_sentences
  endpoint:
    path: /rest/v1/sentences/supported-languages
    method: GET
    data_selector: supportedLanguages
    params: {}
- name: entities
  endpoint:
    path: /rest/v1/entities
    method: POST
    data_selector: entities
    params: {}
- name: tokens
  endpoint:
    path: /rest/v1/tokens
    method: POST
    data_selector: content
    params: {}
- name: sentences
  endpoint:
    path: /rest/v1/sentences
    method: POST
    data_selector: content
    params: {}
- name: supported_languages
  endpoint:
    path: /rest/v1/tokens/supported-languages
    method: GET
    data_selector: supportedLanguages
    params: {}
- name: entities
  endpoint:
    path: /entities
    method: POST
    data_selector: entitiesResponse
    params: {}
- name: entities
  endpoint:
    path: /entities
    method: POST
    data_selector: entitiesResponse
- name: entities
  endpoint:
    path: /entities
    method: GET
    data_selector: content
    params: {}
- name: similar_terms
  endpoint:
    path: /semantics/similar
    method: POST
    data_selector: similarTerms
    params: {}
- name: vector
  endpoint:
    path: /semantics/vector
    method: POST
    data_selector: documentEmbedding
    params: {}
- name: entities
  endpoint:
    path: /entities
    method: POST
    data_selector: content
    params: {}
- name: similar_terms
  endpoint:
    path: /semantics/similar
    method: POST
    data_selector: similarTerms
    params: {}
- name: vector
  endpoint:
    path: /semantics/vector
    method: POST
    data_selector: documentEmbedding
    params: {}
- name: supported_languages
  endpoint:
    path: /entities/supported-languages
    method: GET
    data_selector: supportedLanguages
    params: {}
- name: sentiment
  endpoint:
    path: /rest/v1/sentiment
    method: POST
    data_selector: document
    params:
      content: string
      language: string
      options:
        modelType: DNN
- name: supported_languages
  endpoint:
    path: /sentiment/supported-languages
    method: GET
    data_selector: supportedLanguages
    params: {}
- name: sentiment
  endpoint:
    path: /sentiment
    method: POST
    data_selector: document
    params:
      content: string
      language: string
      options:
        modelType: string
- name: supported_languages
  endpoint:
    path: /sentiment/supported-languages
    method: GET
    data_selector: supportedLanguages
    params: {}
- name: sentiment
  endpoint:
    path: /rest/v1/sentiment
    method: POST
    data_selector: content
    params: {}
- name: topics
  endpoint:
    path: /rest/v1/topics
    method: POST
    data_selector: content
    params: {}
- name: sentiment
  endpoint:
    path: /rest/v1/sentiment
    method: POST
    data_selector: content
    params: {}
- name: topics
  endpoint:
    path: /rest/v1/topics
    method: POST
    data_selector: content
    params: {}
- name: supported_languages
  endpoint:
    path: /rest/v1/sentiment/supported-languages
    method: GET
    data_selector: ''
    params: {}
- name: topics
  endpoint:
    path: /topics
    method: POST
    data_selector: content
- name: categories
  endpoint:
    path: /categories
    method: POST
    data_selector: content
- name: topics
  endpoint:
    path: /topics
    method: POST
    data_selector: content
    params: {}
- name: categories
  endpoint:
    path: /categories
    method: POST
    data_selector: content
    params: {}
- name: categories
  endpoint:
    path: /rest/v1/categories
    method: GET
    data_selector: content
- name: relationships
  endpoint:
    path: /rest/v1/relationships
    method: POST
    data_selector: relationships
- name: supported_languages
  endpoint:
    path: /rest/v1/relationships/supported-languages
    method: GET
    data_selector: supportedLanguages
    params: {}
- name: categories
  endpoint:
    path: /rest/v1/categories
    method: POST
    data_selector: content
    params: {}
- name: relationships
  endpoint:
    path: /rest/v1/relationships
    method: POST
    data_selector: content
    params: {}
- name: supported_languages_categories
  endpoint:
    path: /rest/v1/categories/supported-languages
    method: GET
    data_selector: supportedLanguages
    params: {}
- name: supported_languages_relationships
  endpoint:
    path: /rest/v1/relationships/supported-languages
    method: GET
    data_selector: supportedLanguages
    params: {}
- name: transliteration
  endpoint:
    path: /transliteration
    method: POST
    data_selector: content
- name: categories
  endpoint:
    path: /categories
    method: POST
    data_selector: categories
- name: supported_languages
  endpoint:
    path: /rest/v1/relationships/supported-languages
    method: GET
    data_selector: supportedLanguages
- name: transliteration
  endpoint:
    path: /transliteration
    method: POST
    data_selector: content
- name: categories
  endpoint:
    path: /categories
    method: POST
    data_selector: content
- name: ping
  endpoint:
    path: /ping
    method: GET
- name: info
  endpoint:
    path: /info
    method: GET
- name: sentiment
  endpoint:
    path: /sentiment
    method: POST
    data_selector: content
    params: {}
- name: categories
  endpoint:
    path: /categories
    method: POST
    data_selector: content
    params: {}
- name: sentiment
  endpoint:
    path: sentiment
    method: POST
    data_selector: results
    params: {}
- name: categories
  endpoint:
    path: categories
    method: POST
    data_selector: results
    params: {}
- name: name_similarity
  endpoint:
    path: /rest/v1/name-similarity
    method: GET
- name: supported_languages
  endpoint:
    path: /name-similarity/supported-languages
    method: GET
- name: name_similarity
  endpoint:
    path: /rest/v1/name-similarity
    method: POST
    data_selector: score
- name: supported_languages
  endpoint:
    path: /name-similarity/supported-languages
    method: GET
- name: name_similarity
  endpoint:
    path: /rest/v1/name-similarity
    method: POST
    data_selector: score
    params: {}
- name: supported_languages
  endpoint:
    path: /rest/v1/name-similarity/supported-languages
    method: GET
    data_selector: ''
    params: {}
- name: name_similarity
  endpoint:
    path: /rest/v1/name-similarity
    method: POST
    data_selector: response
    params: {}
- name: address_similarity
  endpoint:
    path: /address-similarity
    method: POST
    data_selector: results
- name: supported_languages
  endpoint:
    path: /address-similarity/supported-languages
    method: GET
    data_selector: supportedLanguagePairs
- name: address_similarity
  endpoint:
    path: /address-similarity
    method: POST
    data_selector: results
    params: {}
- name: supported_languages
  endpoint:
    path: /address-similarity/supported-languages
    method: GET
    data_selector: supportedLanguagePairs
    params: {}
- name: name_deduplication
  endpoint:
    path: /rest/v1/name-deduplication
    method: POST
    data_selector: result
- name: name_translation
  endpoint:
    path: /rest/v1/name-translation
    method: POST
    data_selector: result
- name: supported_languages
  endpoint:
    path: /rest/v1/name-translation/supported-languages
    method: GET
    data_selector: supportedLanguagePairs
- name: name_deduplication
  endpoint:
    path: name-deduplication
    method: POST
    data_selector: result
    params: {}
- name: name_translation
  endpoint:
    path: name-translation
    method: POST
    data_selector: result
    params: {}
- name: name_translation
  endpoint:
    path: /name-translation
    method: POST
    data_selector: result
- name: language_detection
  endpoint:
    path: /language
    method: POST
    data_selector: result
- name: name_translation
  endpoint:
    path: /name-translation
    method: POST
    data_selector: result
    params: {}
- name: language_identifier
  endpoint:
    path: /language
    method: POST
    data_selector: languageDetections
    params: {}
- name: supported_languages
  endpoint:
    path: /language/supported-languages
    method: GET
    data_selector: supportedLanguagePairs
    params: {}
- name: language
  endpoint:
    path: /rest/v1/language
    method: GET
    data_selector: supportedLanguages
- name: morphology_complete
  endpoint:
    path: /rest/v1/morphology/complete
    method: POST
    data_selector: tokens
- name: language
  endpoint:
    path: /rest/v1/language
    method: GET
    data_selector: supportedLanguages
- name: morphology_complete
  endpoint:
    path: /rest/v1/morphology/complete
    method: POST
    data_selector: tokens
- name: morphology_complete
  endpoint:
    path: /morphology/complete
    method: POST
    data_selector: content
- name: morphology_lemmas
  endpoint:
    path: /morphology/lemmas
    method: POST
    data_selector: content
- name: morphology_complete
  endpoint:
    path: /morphology/complete
    method: POST
    data_selector: content
- name: morphology_lemmas
  endpoint:
    path: /morphology/lemmas
    method: POST
    data_selector: content
- name: morphology_lemmas
  endpoint:
    path: /morphology/lemmas
    method: POST
    data_selector: content
    params: {}
- name: morphology_parts_of_speech
  endpoint:
    path: /morphology/parts-of-speech
    method: POST
    data_selector: content
    params: {}
- name: morphology_compound_components
  endpoint:
    path: /morphology/compound-components
    method: POST
    data_selector: content
    params: {}
- name: morphology_lemmas
  endpoint:
    path: /morphology/lemmas
    method: POST
    data_selector: content
- name: morphology_parts_of_speech
  endpoint:
    path: /morphology/parts-of-speech
    method: POST
    data_selector: content
- name: morphology_compound_components
  endpoint:
    path: /morphology/compound-components
    method: POST
    data_selector: content
- name: morphology_han_readings
  endpoint:
    path: /morphology/han-readings
    method: POST
    data_selector: content
- name: tokens
  endpoint:
    path: /tokens
    method: POST
    data_selector: content
- name: supported_languages
  endpoint:
    path: /morphology/supported-languages
    method: GET
    data_selector: supportedLanguages
- name: morphology_han_readings
  endpoint:
    path: /morphology/han-readings
    method: POST
    data_selector: content
    params: {}
- name: tokens
  endpoint:
    path: /tokens
    method: POST
    data_selector: content
    params: {}
- name: supported_languages
  endpoint:
    path: /morphology/supported-languages
    method: GET
    data_selector: supportedLanguages
    params: {}
- name: tokens
  endpoint:
    path: /rest/v1/tokens
    method: POST
    data_selector: content
- name: sentences
  endpoint:
    path: /rest/v1/sentences
    method: POST
    data_selector: content
- name: supported_languages_tokens
  endpoint:
    path: /rest/v1/tokens/supported-languages
    method: GET
    data_selector: supportedLanguages
- name: supported_languages_sentences
  endpoint:
    path: /rest/v1/sentences/supported-languages
    method: GET
    data_selector: supportedLanguages
- name: entities
  endpoint:
    path: /rest/v1/entities
    method: POST
    data_selector: entities
- name: tokens
  endpoint:
    path: /rest/v1/tokens
    method: POST
    data_selector: content
- name: sentences
  endpoint:
    path: /rest/v1/sentences
    method: POST
    data_selector: content
- name: supported_languages_tokens
  endpoint:
    path: /rest/v1/tokens/supported-languages
    method: GET
    data_selector: supportedLanguages
- name: supported_languages_sentences
  endpoint:
    path: /rest/v1/sentences/supported-languages
    method: GET
    data_selector: supportedLanguages
- name: entities
  endpoint:
    path: /rest/v1/entities
    method: POST
    data_selector: entities
- name: entities
  endpoint:
    path: /entities
    method: POST
    data_selector: entitiesResponse
    params: {}
- name: entities
  endpoint:
    path: /entities
    method: POST
    data_selector: entitiesResponse
- name: entities
  endpoint:
    path: /rest/v1/entities
    method: POST
    data_selector: content
- name: similar_terms
  endpoint:
    path: /rest/v1/semantics/similar
    method: POST
    data_selector: content
- name: vector
  endpoint:
    path: /rest/v1/semantics/vector
    method: POST
    data_selector: content
- name: entities
  endpoint:
    path: /rest/v1/entities
    method: POST
    data_selector: header
    params: {}
- name: similar_terms
  endpoint:
    path: /rest/v1/semantics/similar
    method: POST
    data_selector: content
    params:
      resultLanguages:
      - spa
      - deu
      - jpn
- name: vector
  endpoint:
    path: /rest/v1/semantics/vector
    method: POST
    data_selector: content
    params: {}
- name: sentiment
  endpoint:
    path: /rest/v1/sentiment
    method: POST
    data_selector: document
    params:
      content: string
      language: string
- name: supported_languages
  endpoint:
    path: /sentiment/supported-languages
    method: GET
    data_selector: supportedLanguages
    params: {}
- name: sentiment
  endpoint:
    path: /rest/v1/sentiment
    method: POST
    data_selector: document
    params:
      content: string
      language: string
      options:
        modelType: string
- name: supported_languages
  endpoint:
    path: /sentiment/supported-languages
    method: GET
    data_selector: supportedLanguages
    params: {}
- name: sentiment
  endpoint:
    path: /rest/v1/sentiment
    method: POST
    data_selector: content
    params: {}
- name: topics
  endpoint:
    path: /rest/v1/topics
    method: POST
    data_selector: content
    params: {}
- name: supported_languages
  endpoint:
    path: /rest/v1/sentiment/supported-languages
    method: GET
    data_selector: ''
    params: {}
- name: sentiment
  endpoint:
    path: /rest/v1/sentiment
    method: POST
    data_selector: content
    params: {}
- name: topics
  endpoint:
    path: /rest/v1/topics
    method: POST
    data_selector: content
    params: {}
- name: topics
  endpoint:
    path: /topics
    method: GET
    data_selector: content
- name: categories
  endpoint:
    path: /categories
    method: POST
    data_selector: categories
- name: topics
  endpoint:
    path: /topics
    method: POST
    data_selector: content
- name: categories
  endpoint:
    path: /categories
    method: POST
    data_selector: content
- name: categories
  endpoint:
    path: /rest/v1/categories
    method: POST
    data_selector: content
- name: relationships
  endpoint:
    path: /rest/v1/relationships
    method: POST
    data_selector: content
- name: supported_languages
  endpoint:
    path: /rest/v1/categories/supported-languages
    method: GET
    data_selector: supportedLanguages
- name: supported_languages
  endpoint:
    path: /rest/v1/relationships/supported-languages
    method: GET
    data_selector: supportedLanguages
    params: {}
- name: categories
  endpoint:
    path: /rest/v1/categories
    method: POST
    data_selector: content
- name: relationships
  endpoint:
    path: /rest/v1/relationships
    method: POST
    data_selector: content
- name: supported_languages
  endpoint:
    path: /rest/v1/categories/supported-languages
    method: GET
    data_selector: supportedLanguages
- name: relationships_supported_languages
  endpoint:
    path: /rest/v1/relationships/supported-languages
    method: GET
    data_selector: supportedLanguages
- name: transliteration
  endpoint:
    path: /transliteration
    method: POST
    data_selector: content
    params: {}
- name: categories
  endpoint:
    path: /categories
    method: POST
    data_selector: content
    params: {}
- name: supported_languages
  endpoint:
    path: /rest/v1/relationships/supported-languages
    method: GET
    data_selector: supportedLanguages
- name: transliteration
  endpoint:
    path: /transliteration
    method: POST
    data_selector: content
- name: categories
  endpoint:
    path: /categories
    method: POST
    data_selector: content
- name: ping
  endpoint:
    path: /ping
    method: GET
    data_selector: response
    params: {}
- name: info
  endpoint:
    path: /info
    method: GET
    data_selector: response
    params: {}
- name: sentiment
  endpoint:
    path: sentiment
    method: POST
    data_selector: content
- name: categories
  endpoint:
    path: categories
    method: POST
    data_selector: content
- name: name_similarity
  endpoint:
    path: /rest/v1/name-similarity
    method: GET
    data_selector: score
- name: supported_languages
  endpoint:
    path: /name-similarity/supported-languages
    method: GET
    data_selector: languages
- name: ping
  endpoint:
    path: /ping
    method: GET
- name: info
  endpoint:
    path: /info
    method: GET
- name: name_similarity
  endpoint:
    path: /rest/v1/name-similarity
    method: POST
    data_selector: response
    params: {}
- name: supported_languages
  endpoint:
    path: /rest/v1/name-similarity/supported-languages
    method: GET
    data_selector: supportedLanguagePairs
    params: {}
- name: sentiment
  endpoint:
    path: /rest/v1/sentiment
    method: POST
    data_selector: content
- name: categories
  endpoint:
    path: /rest/v1/categories
    method: POST
    data_selector: content
- name: address_similarity
  endpoint:
    path: /address-similarity
    method: POST
    data_selector: results
    params: {}
- name: supported_languages
  endpoint:
    path: /address-similarity/supported-languages
    method: GET
    data_selector: supportedLanguagePairs
    params: {}
- name: name_similarity
  endpoint:
    path: /rest/v1/name-similarity
    method: POST
    data_selector: ''
- name: supported_languages
  endpoint:
    path: /name-similarity/supported-languages
    method: GET
    data_selector: ''
- name: name_deduplication
  endpoint:
    path: name-deduplication
    method: POST
    data_selector: result
    params: {}
- name: name_translation
  endpoint:
    path: name-translation
    method: POST
    data_selector: result
    params: {}
- name: name_similarity
  endpoint:
    path: /rest/v1/name-similarity
    method: POST
    data_selector: response
    params: {}
- name: supported_languages
  endpoint:
    path: /rest/v1/name-similarity/supported-languages
    method: GET
    data_selector: supportedLanguagePairs
    params: {}
- name: name_translation
  endpoint:
    path: /name-translation
    method: POST
    data_selector: content
- name: language_detection
  endpoint:
    path: /language
    method: POST
    data_selector: content
- name: address_similarity
  endpoint:
    path: /address-similarity
    method: POST
    data_selector: results
- name: supported_languages
  endpoint:
    path: /address-similarity/supported-languages
    method: GET
    data_selector: supportedLanguagePairs
- name: language
  endpoint:
    path: /rest/v1/language
    method: GET
    data_selector: supportedLanguages
- name: morphology_complete
  endpoint:
    path: /rest/v1/morphology/complete
    method: POST
    data_selector: tokens
- name: name_deduplication
  endpoint:
    path: /name-deduplication
    method: POST
    data_selector: result
- name: name_translation
  endpoint:
    path: /name-translation
    method: POST
    data_selector: result
- name: morphology_complete
  endpoint:
    path: /morphology/complete
    method: POST
    data_selector: content
- name: morphology_lemmas
  endpoint:
    path: /morphology/lemmas
    method: POST
    data_selector: content
- name: name_translation
  endpoint:
    path: /name-translation
    method: POST
    data_selector: result
- name: language_identification
  endpoint:
    path: /language
    method: POST
    data_selector: languageDetections
- name: morphology_lemmas
  endpoint:
    path: /morphology
    method: POST
    data_selector: content
    params: {}
- name: morphology_parts_of_speech
  endpoint:
    path: /morphology
    method: POST
    data_selector: content
    params: {}
- name: morphology_compound_components
  endpoint:
    path: /morphology
    method: POST
    data_selector: content
    params: {}
- name: morphology_complete
  endpoint:
    path: /morphology/complete
    method: POST
    data_selector: tokens
    params: {}
- name: language
  endpoint:
    path: /language
    method: GET
    data_selector: supportedLanguages
    params: {}
- name: morphology
  endpoint:
    path: /rest/v1/morphology/han-readings
    method: POST
    data_selector: content
- name: tokens
  endpoint:
    path: /rest/v1/tokens
    method: POST
    data_selector: content
- name: morphology_complete
  endpoint:
    path: /morphology/complete
    method: POST
    data_selector: content
- name: morphology_lemmas
  endpoint:
    path: /morphology/lemmas
    method: POST
    data_selector: content
- name: tokens
  endpoint:
    path: /rest/v1/tokens
    method: POST
    data_selector: content
- name: sentences
  endpoint:
    path: /rest/v1/sentences
    method: POST
    data_selector: content
- name: supported_languages
  endpoint:
    path: /rest/v1/tokens/supported-languages
    method: GET
    data_selector: supportedLanguages
- name: entity_extraction
  endpoint:
    path: /rest/v1/entities
    method: POST
    data_selector: entities
- name: morphology_lemmas
  endpoint:
    path: /morphology/lemmas
    method: POST
    data_selector: content
- name: morphology_parts_of_speech
  endpoint:
    path: /morphology/parts-of-speech
    method: POST
    data_selector: content
- name: morphology_compound_components
  endpoint:
    path: /morphology/compound-components
    method: POST
    data_selector: content
- name: entities
  endpoint:
    path: /entities
    method: POST
    data_selector: entitiesResponse
- name: entities
  endpoint:
    path: /rest/v1/entities
    method: POST
    data_selector: content
- name: similar_terms
  endpoint:
    path: /rest/v1/semantics/similar
    method: POST
    data_selector: content
- name: vector
  endpoint:
    path: /rest/v1/semantics/vector
    method: POST
    data_selector: content
- name: supported_languages
  endpoint:
    path: /rest/v1/entities/supported-languages
    method: GET
    data_selector: supportedLanguages
- name: morphology_han_readings
  endpoint:
    path: /morphology/han-readings
    method: POST
    data_selector: tokens
    params: {}
- name: tokens
  endpoint:
    path: /tokens
    method: POST
    data_selector: tokens
    params: {}
- name: supported_languages
  endpoint:
    path: /morphology/supported-languages
    method: GET
    data_selector: supportedLanguages
    params: {}
- name: sentiment
  endpoint:
    path: /v1/sentiment
    method: POST
    data_selector: document
    params:
      content: string
      language: string
      options:
        modelType: string
- name: supported_languages
  endpoint:
    path: /sentiment/supported-languages
    method: GET
    data_selector: supportedLanguages
    params: {}
- name: tokens
  endpoint:
    path: /rest/v1/tokens
    method: POST
    data_selector: content
- name: sentences
  endpoint:
    path: /rest/v1/sentences
    method: POST
    data_selector: content
- name: supported_languages
  endpoint:
    path: /rest/v1/sentences/supported-languages
    method: GET
    data_selector: supportedLanguages
- name: entities
  endpoint:
    path: /rest/v1/entities
    method: POST
    data_selector: entities
- name: entities
  endpoint:
    path: /entities
    method: POST
    data_selector: entitiesResponse
- name: sentiment
  endpoint:
    path: /rest/v1/sentiment
    method: POST
    data_selector: content
- name: topics
  endpoint:
    path: /rest/v1/topics
    method: POST
    data_selector: content
- name: supported_languages
  endpoint:
    path: /rest/v1/sentiment/supported-languages
    method: GET
    data_selector: languages
- name: entities
  endpoint:
    path: /rest/v1/entities
    method: POST
    data_selector: content
    params: {}
- name: similar_terms
  endpoint:
    path: /rest/v1/semantics/similar
    method: POST
    data_selector: similarTerms
    params: {}
- name: vector
  endpoint:
    path: /rest/v1/semantics/vector
    method: POST
    data_selector: documentEmbedding
    params: {}
- name: topics
  endpoint:
    path: /topics
    method: POST
    data_selector: content
    params: {}
- name: categories
  endpoint:
    path: /categories
    method: POST
    data_selector: content
    params: {}
- name: categories
  endpoint:
    path: /rest/v1/categories
    method: POST
    data_selector: content
- name: relationships
  endpoint:
    path: /rest/v1/relationships
    method: POST
    data_selector: content
- name: supported_languages
  endpoint:
    path: /rest/v1/categories/supported-languages
    method: GET
    data_selector: languages
- name: sentiment
  endpoint:
    path: /rest/v1/sentiment
    method: POST
    data_selector: document
    params: {}
- name: supported_languages
  endpoint:
    path: /sentiment/supported-languages
    method: GET
    data_selector: supportedLanguages
    params: {}
- name: supported_languages
  endpoint:
    path: /rest/v1/relationships/supported-languages
    method: GET
    data_selector: supportedLanguages
    params: {}
- name: sentiment
  endpoint:
    path: /rest/v1/sentiment
    method: POST
    data_selector: content
- name: topics
  endpoint:
    path: /rest/v1/topics
    method: POST
    data_selector: content
- name: transliteration
  endpoint:
    path: /transliteration
    method: POST
    data_selector: content
- name: supported_languages
  endpoint:
    path: /transliteration/supported-languages
    method: GET
- name: topics
  endpoint:
    path: /topics
    method: POST
    data_selector: content
- name: categories
  endpoint:
    path: /categories
    method: POST
    data_selector: content
- name: categories
  endpoint:
    path: /categories
    method: POST
    data_selector: content
- name: relationships
  endpoint:
    path: /relationships
    method: POST
    data_selector: content
- name: supported_languages
  endpoint:
    path: /categories/supported-languages
    method: GET
- name: supported_languages
  endpoint:
    path: /rest/v1/relationships/supported-languages
    method: GET
    data_selector: supportedLanguages
- name: ping
  endpoint:
    path: /ping
    method: GET
- name: info
  endpoint:
    path: /info
    method: GET
- name: transliteration
  endpoint:
    path: /transliteration
    method: POST
    data_selector: content
    params: {}
- name: categories
  endpoint:
    path: /categories
    method: POST
    data_selector: content
    params: {}
- name: sentiment
  endpoint:
    path: sentiment
    method: POST
    data_selector: response
    params:
      content: sentiment_file_data
      language: eng
- name: categories
  endpoint:
    path: categories
    method: POST
    data_selector: response
    params:
      content: categories_text_data
- name: name_similarity
  endpoint:
    path: /rest/v1/name-similarity
    method: GET
- name: supported_languages
  endpoint:
    path: /name-similarity/supported-languages
    method: GET
- name: name_similarity
  endpoint:
    path: /rest/v1/name-similarity
    method: POST
    data_selector: result
- name: supported_languages
  endpoint:
    path: /rest/v1/name-similarity/supported-languages
    method: GET
    data_selector: supportedLanguagePairs
- name: ping
  endpoint:
    path: /ping
    method: GET
- name: info
  endpoint:
    path: /info
    method: GET
- name: address_similarity
  endpoint:
    path: /rest/v1/address-similarity
    method: POST
    data_selector: results
    params: {}
- name: supported_languages
  endpoint:
    path: /rest/v1/address-similarity/supported-languages
    method: GET
    data_selector: supportedLanguagePairs
    params: {}
- name: sentiment
  endpoint:
    path: /sentiment
    method: POST
    data_selector: content
- name: categories
  endpoint:
    path: /categories
    method: POST
    data_selector: content
- name: name_deduplication
  endpoint:
    path: /rest/v1/name-deduplication
    method: POST
    data_selector: result
- name: name_translation
  endpoint:
    path: /rest/v1/name-translation
    method: POST
    data_selector: result
- name: name_similarity
  endpoint:
    path: /rest/v1/name-similarity
    method: GET
    data_selector: score
- name: supported_languages
  endpoint:
    path: /name-similarity/supported-languages
    method: GET
    data_selector: ''
- name: name_translation
  endpoint:
    path: /name-translation
    method: POST
    data_selector: content
- name: language
  endpoint:
    path: /language
    method: POST
    data_selector: content
- name: name_similarity
  endpoint:
    path: /rest/v1/name-similarity
    method: POST
    data_selector: result
    params: {}
- name: address_similarity
  endpoint:
    path: /address-similarity
    method: POST
    data_selector: results
- name: supported_languages
  endpoint:
    path: /address-similarity/supported-languages
    method: GET
    data_selector: supportedLanguagePairs
- name: language
  endpoint:
    path: /rest/v1/language
    method: GET
    data_selector: supportedLanguages
- name: morphology
  endpoint:
    path: /rest/v1/morphology/{morphoFeature}
    method: POST
    data_selector: tokens
- name: morphology_complete
  endpoint:
    path: /morphology/complete
    method: POST
    data_selector: content
- name: morphology_lemmas
  endpoint:
    path: /morphology/lemmas
    method: POST
    data_selector: content
- name: name_deduplication
  endpoint:
    path: /rest/v1/name-deduplication
    method: POST
    data_selector: content
    params: {}
- name: name_translation
  endpoint:
    path: /rest/v1/name-translation
    method: POST
    data_selector: content
    params: {}
- name: name_translation
  endpoint:
    path: /name-translation
    method: POST
    data_selector: content
- name: language_identifier
  endpoint:
    path: /language
    method: POST
    data_selector: languageDetections
- name: morphology_lemmas
  endpoint:
    path: /morphology
    method: POST
    data_selector: content
- name: morphology_parts_of_speech
  endpoint:
    path: /morphology/parts-of-speech
    method: POST
    data_selector: content
- name: morphology_compound_components
  endpoint:
    path: /morphology/compound-components
    method: POST
    data_selector: content
- name: morphology_complete
  endpoint:
    path: /morphology/complete
    method: POST
    data_selector: tokens
    params:
      content: The quick brown fox jumped over the lazy dog. 👍🏾 Yes he did. B)
- name: language_supported
  endpoint:
    path: /language/supported-languages
    method: GET
    data_selector: supportedLanguages
    params: {}
- name: morphology_han_readings
  endpoint:
    path: /morphology/han-readings
    method: POST
    data_selector: content
- name: tokens
  endpoint:
    path: /tokens
    method: POST
    data_selector: content
- name: supported_languages
  endpoint:
    path: /morphology/supported-languages
    method: GET
    data_selector: supportedLanguages
- name: morphology_complete
  endpoint:
    path: morphology/complete
    method: POST
    data_selector: content
- name: morphology_lemmas
  endpoint:
    path: morphology/lemmas
    method: POST
    data_selector: content
- name: tokens
  endpoint:
    path: /rest/v1/tokens
    method: POST
    data_selector: content
    params: {}
- name: sentences
  endpoint:
    path: /rest/v1/sentences
    method: POST
    data_selector: content
    params: {}
- name: supported_languages
  endpoint:
    path: /rest/v1/tokens/supported-languages
    method: GET
    data_selector: supportedLanguages
    params: {}
- name: morphology_lemmas
  endpoint:
    path: /morphology/lemmas
    method: POST
    data_selector: result
    params: {}
- name: morphology_parts_of_speech
  endpoint:
    path: /morphology/parts-of-speech
    method: POST
    data_selector: result
    params: {}
- name: morphology_compound_components
  endpoint:
    path: /morphology/compound-components
    method: POST
    data_selector: result
    params: {}
- name: entities
  endpoint:
    path: /entities
    method: POST
    data_selector: entitiesResponse
- name: morphology_han_readings
  endpoint:
    path: /morphology/han-readings
    method: POST
    data_selector: content
- name: tokens
  endpoint:
    path: /tokens
    method: POST
    data_selector: content
- name: supported_languages
  endpoint:
    path: /morphology/supported-languages
    method: GET
    data_selector: languages
- name: entities
  endpoint:
    path: /rest/v1/entities
    method: POST
    data_selector: content
    params: {}
- name: similar_terms
  endpoint:
    path: /rest/v1/semantics/similar
    method: POST
    data_selector: content
    params: {}
- name: vector
  endpoint:
    path: /rest/v1/semantics/vector
    method: POST
    data_selector: content
    params: {}
- name: tokens
  endpoint:
    path: /tokens
    method: POST
    data_selector: content
    params: {}
- name: sentences
  endpoint:
    path: /sentences
    method: POST
    data_selector: content
    params: {}
- name: supported_languages
  endpoint:
    path: /sentences/supported-languages
    method: GET
    data_selector: supportedLanguages
    params: {}
- name: entities
  endpoint:
    path: /entities
    method: POST
    data_selector: entities
    params: {}
- name: sentiment
  endpoint:
    path: /rest/v1/sentiment
    method: POST
    data_selector: document
    params: {}
- name: supported_languages
  endpoint:
    path: /sentiment/supported-languages
    method: GET
    data_selector: supportedLanguages
    params: {}
- name: entities
  endpoint:
    path: /entities
    method: POST
    data_selector: entitiesResponse
- name: sentiment
  endpoint:
    path: /rest/v1/sentiment
    method: POST
    data_selector: content
- name: topics
  endpoint:
    path: /rest/v1/topics
    method: POST
    data_selector: content
- name: supported_languages
  endpoint:
    path: /rest/v1/sentiment/supported-languages
    method: GET
- name: entities
  endpoint:
    path: /rest/v1/entities
    method: POST
    data_selector: content
- name: similar_terms
  endpoint:
    path: /rest/v1/semantics/similar
    method: POST
    data_selector: similarTerms
- name: topics
  endpoint:
    path: /topics
    method: POST
    data_selector: content
- name: categories
  endpoint:
    path: /categories
    method: POST
    data_selector: content
- name: sentiment
  endpoint:
    path: /rest/v1/sentiment
    method: POST
    data_selector: document
    params:
      content: string
      language: string
      options:
        modelType: string
- name: supported_languages
  endpoint:
    path: /sentiment/supported-languages
    method: GET
    data_selector: supportedLanguages
- name: categories
  endpoint:
    path: /rest/v1/categories
    method: POST
    data_selector: content
- name: relationships
  endpoint:
    path: /rest/v1/relationships
    method: POST
    data_selector: content
- name: sentiment
  endpoint:
    path: /rest/v1/sentiment
    method: POST
    data_selector: content
- name: topics
  endpoint:
    path: /rest/v1/topics
    method: POST
    data_selector: content
- name: supported_languages
  endpoint:
    path: /rest/v1/relationships/supported-languages
    method: GET
    data_selector: supportedLanguages
- name: supported_languages
  endpoint:
    path: /sentences/supported-languages
    method: GET
- name: transliteration
  endpoint:
    path: /transliteration
    method: POST
    data_selector: content
- name: topics
  endpoint:
    path: /topics
    method: GET
    data_selector: response
    params: {}
- name: categories
  endpoint:
    path: /categories
    method: POST
    data_selector: response
    params: {}
- name: categories
  endpoint:
    path: /categories
    method: POST
    data_selector: categories
    params:
      scoreThreshold: -0.25
      singleLabel: 'false'
- name: categories
  endpoint:
    path: /rest/v1/categories
    method: POST
    data_selector: content
- name: relationships
  endpoint:
    path: /rest/v1/relationships
    method: POST
    data_selector: content
- name: supported_languages
  endpoint:
    path: /rest/v1/relationships/supported-languages
    method: GET
    data_selector: supportedLanguages
- name: transliteration
  endpoint:
    path: /rest/v1/transliteration
    method: GET
    data_selector: content
- name: ping
  endpoint:
    path: /ping
    method: GET
- name: info
  endpoint:
    path: /info
    method: GET
- name: sentiment
  endpoint:
    path: /sentiment
    method: POST
    data_selector: response
    params:
      content: sentiment_file_data
- name: categories
  endpoint:
    path: /categories
    method: POST
    data_selector: response
    params:
      content: categories_text_data
- name: ping
  endpoint:
    path: /ping
    method: GET
- name: info
  endpoint:
    path: /info
    method: GET
- name: name_similarity
  endpoint:
    path: /rest/v1/name-similarity
    method: GET
- name: supported_languages
  endpoint:
    path: /name-similarity/supported-languages
    method: GET
- name: sentiment
  endpoint:
    path: /sentiment
    method: POST
    data_selector: response
    params:
      content: document content
      language: eng
- name: categories
  endpoint:
    path: /categories
    method: POST
    data_selector: response
    params:
      content: document content
- name: name_similarity
  endpoint:
    path: /rest/v1/name-similarity
    method: POST
    data_selector: response
    params: {}
- name: supported_languages
  endpoint:
    path: /rest/v1/name-similarity/supported-languages
    method: GET
    data_selector: supportedLanguagePairs
    params: {}
- name: name_similarity
  endpoint:
    path: /rest/v1/name-similarity
    method: POST
    data_selector: score
- name: supported_languages
  endpoint:
    path: /name-similarity/supported-languages
    method: GET
- name: name_similarity
  endpoint:
    path: /rest/v1/name-similarity
    method: POST
    data_selector: response
    params: {}
- name: address_similarity
  endpoint:
    path: /address-similarity
    method: POST
    data_selector: results
    params: {}
- name: supported_languages
  endpoint:
    path: /address-similarity/supported-languages
    method: GET
    data_selector: supportedLanguagePairs
    params: {}
- name: name_deduplication
  endpoint:
    path: /name-deduplication
    method: POST
    data_selector: result
- name: name_translation
  endpoint:
    path: /name-translation
    method: POST
    data_selector: translation
- name: address_similarity
  endpoint:
    path: /address-similarity
    method: POST
    data_selector: results
- name: supported_languages
  endpoint:
    path: /address-similarity/supported-languages
    method: GET
    data_selector: supportedLanguagePairs
- name: name_translation
  endpoint:
    path: /name-translation
    method: POST
    data_selector: content
- name: language_identification
  endpoint:
    path: /language
    method: POST
    data_selector: content
- name: name_deduplication
  endpoint:
    path: /rest/v1/name-deduplication
    method: POST
    data_selector: result
- name: name_translation
  endpoint:
    path: /rest/v1/name-translation
    method: POST
    data_selector: result
- name: supported_languages
  endpoint:
    path: /rest/v1/name-translation/supported-languages
    method: GET
    data_selector: result
- name: morphology_complete
  endpoint:
    path: /morphology/complete
    method: POST
    data_selector: tokens
    params:
      content: string
- name: language
  endpoint:
    path: /language
    method: GET
    data_selector: supportedLanguages
    params: {}
- name: name_translation
  endpoint:
    path: /name-translation
    method: POST
    data_selector: result
- name: language_identifier
  endpoint:
    path: /language
    method: POST
    data_selector: languageDetections
- name: morphology_complete
  endpoint:
    path: /morphology/complete
    method: POST
    data_selector: content
    params: {}
- name: morphology_lemmas
  endpoint:
    path: /morphology/lemmas
    method: POST
    data_selector: content
    params: {}
- name: language
  endpoint:
    path: /rest/v1/language
    method: GET
    data_selector: supportedLanguages
- name: morphology
  endpoint:
    path: /rest/v1/morphology/complete
    method: POST
    data_selector: tokens
- name: morphology_lemmas
  endpoint:
    path: /morphology
    method: POST
    data_selector: content
    params: {}
- name: morphology_parts_of_speech
  endpoint:
    path: /morphology/parts-of-speech
    method: POST
    data_selector: content
    params: {}
- name: morphology_compound_components
  endpoint:
    path: /morphology/compound-components
    method: POST
    data_selector: content
    params: {}
- name: morphology_complete
  endpoint:
    path: /morphology/complete
    method: POST
    data_selector: content
- name: morphology_lemmas
  endpoint:
    path: /morphology/lemmas
    method: POST
    data_selector: content
- name: morphology_han_readings
  endpoint:
    path: /rest/v1/morphology/han-readings
    method: POST
    data_selector: content
- name: tokens
  endpoint:
    path: /rest/v1/tokens
    method: POST
    data_selector: content
- name: supported_languages
  endpoint:
    path: /rest/v1/morphology/supported-languages
    method: GET
    data_selector: supportedLanguages
- name: morphology_lemmas
  endpoint:
    path: /morphology/lemmas
    method: POST
    data_selector: content
- name: morphology_parts_of_speech
  endpoint:
    path: /morphology/parts-of-speech
    method: POST
    data_selector: content
- name: morphology_compound_components
  endpoint:
    path: /morphology/compound-components
    method: POST
    data_selector: content
- name: morphology_han_readings
  endpoint:
    path: /morphology/han-readings
    method: POST
    data_selector: content
- name: tokens
  endpoint:
    path: /tokens
    method: POST
    data_selector: content
- name: supported_languages
  endpoint:
    path: /morphology/supported-languages
    method: GET
    data_selector: languages
- name: tokens
  endpoint:
    path: /tokens
    method: POST
    data_selector: content
- name: sentences
  endpoint:
    path: /sentences
    method: POST
    data_selector: content
- name: supported_languages_tokens
  endpoint:
    path: /tokens/supported-languages
    method: GET
    data_selector: supportedLanguages
- name: supported_languages_sentences
  endpoint:
    path: /sentences/supported-languages
    method: GET
    data_selector: supportedLanguages
- name: entities
  endpoint:
    path: /entities
    method: POST
    data_selector: entities
- name: entities
  endpoint:
    path: /entities
    method: POST
    data_selector: entitiesResponse
- name: tokens
  endpoint:
    path: /tokens
    method: POST
    data_selector: content
- name: sentences
  endpoint:
    path: /sentences
    method: POST
    data_selector: content
- name: supported_languages_tokens
  endpoint:
    path: /tokens/supported-languages
    method: GET
    data_selector: supportedLanguages
- name: supported_languages_sentences
  endpoint:
    path: /sentences/supported-languages
    method: GET
    data_selector: supportedLanguages
- name: entities
  endpoint:
    path: /entities
    method: POST
    data_selector: entities
- name: entities
  endpoint:
    path: /entities
    method: POST
    data_selector: content
    params: {}
- name: similar_terms
  endpoint:
    path: /semantics/similar
    method: POST
    data_selector: similarTerms
    params: {}
- name: vector
  endpoint:
    path: /semantics/vector
    method: POST
    data_selector: documentEmbedding
    params: {}
- name: entities
  endpoint:
    path: /entities
    method: POST
    data_selector: entitiesResponse
- name: sentiment
  endpoint:
    path: /rest/v1/sentiment
    method: POST
    data_selector: document
    params:
      content: string
      language: string
      options:
        modelType: string
- name: supported_languages
  endpoint:
    path: /sentiment/supported-languages
    method: GET
    data_selector: supportedLanguages
    params: {}
- name: entities
  endpoint:
    path: /rest/v1/entities
    method: POST
    data_selector: content
    params: {}
- name: similar_terms
  endpoint:
    path: /rest/v1/semantics/similar
    method: POST
    data_selector: similarTerms
    params: {}
- name: vector
  endpoint:
    path: /rest/v1/semantics/vector
    method: POST
    data_selector: documentEmbedding
    params: {}
- name: sentiment
  endpoint:
    path: /rest/v1/sentiment
    method: POST
    data_selector: content
- name: topics
  endpoint:
    path: /rest/v1/topics
    method: POST
    data_selector: content
- name: sentiment_analysis
  endpoint:
    path: /sentiment
    method: POST
    data_selector: document
    params:
      content: string
      language: string
      options:
        modelType: string
- name: supported_languages
  endpoint:
    path: /sentiment/supported-languages
    method: GET
    data_selector: supportedLanguages
    params: {}
- name: topics
  endpoint:
    path: /rest/v1/topics
    method: GET
    data_selector: response
    params: {}
- name: categories
  endpoint:
    path: /rest/v1/categories
    method: POST
    data_selector: response
    params: {}
- name: categories
  endpoint:
    path: /rest/v1/categories
    method: POST
    data_selector: content
- name: relationships
  endpoint:
    path: /rest/v1/relationships
    method: POST
    data_selector: content
- name: sentiment
  endpoint:
    path: /rest/v1/sentiment
    method: POST
    data_selector: content
- name: topics
  endpoint:
    path: /rest/v1/topics
    method: POST
    data_selector: content
- name: supported_languages
  endpoint:
    path: /rest/v1/sentiment/supported-languages
    method: GET
    data_selector: languages
- name: supported_languages
  endpoint:
    path: /rest/v1/relationships/supported-languages
    method: GET
    data_selector: supportedLanguages
    params: {}
- name: topics
  endpoint:
    path: /topics
    method: POST
    data_selector: content
- name: categories
  endpoint:
    path: /categories
    method: POST
    data_selector: content
- name: transliteration
  endpoint:
    path: /transliteration
    method: POST
    data_selector: content
    params: {}
- name: similar_terms
  endpoint:
    path: /semantics/similar
    method: POST
    data_selector: content
    params: {}
- name: categories
  endpoint:
    path: /categories
    method: POST
    data_selector: content
    params: {}
- name: categories
  endpoint:
    path: /categories
    method: GET
    data_selector: results
- name: relationships
  endpoint:
    path: /relationships
    method: POST
    data_selector: relationships
- name: supported_languages
  endpoint:
    path: /rest/v1/relationships/supported-languages
    method: GET
    data_selector: supportedLanguages
- name: transliteration
  endpoint:
    path: /transliteration
    method: POST
    data_selector: content
- name: supported_languages
  endpoint:
    path: /transliteration/supported-languages
    method: GET
    data_selector: supportedLanguages
- name: ping
  endpoint:
    path: /ping
    method: GET
- name: info
  endpoint:
    path: /info
    method: GET
- name: categories
  endpoint:
    path: /rest/v1/categories
    method: POST
    data_selector: categories
    params: {}
- name: supported_languages
  endpoint:
    path: /categories/supported-languages
    method: GET
    data_selector: languages
    params: {}
- name: sentiment
  endpoint:
    path: /rest/v1/sentiment
    method: POST
    data_selector: response
    params:
      content: sentiment_file_data
      language: eng
- name: categories
  endpoint:
    path: /rest/v1/categories
    method: POST
    data_selector: response
    params:
      content: categories_text_data
- name: name_similarity
  endpoint:
    path: /rest/v1/name-similarity
    method: GET
    data_selector: score
- name: supported_languages
  endpoint:
    path: /name-similarity/supported-languages
    method: GET
    data_selector: languages
- name: name_similarity
  endpoint:
    path: /rest/v1/name-similarity
    method: POST
    data_selector: response
    params: {}
- name: supported_languages
  endpoint:
    path: /rest/v1/name-similarity/supported-languages
    method: GET
    data_selector: supportedLanguagePairs
    params: {}
- name: supported_languages
  endpoint:
    path: /address-similarity/supported-languages
    method: GET
    data_selector: supportedLanguagePairs
- name: address_similarity
  endpoint:
    path: /address-similarity
    method: POST
    data_selector: results
- name: sentiment
  endpoint:
    path: sentiment
    method: POST
    data_selector: response
    params:
      content: sentiment_file_data
      language: eng
- name: categories
  endpoint:
    path: categories
    method: POST
    data_selector: response
    params:
      content: categories_text_data
- name: name_deduplication
  endpoint:
    path: /rest/v1/name-deduplication
    method: POST
    data_selector: result
- name: name_translation
  endpoint:
    path: /rest/v1/name-translation
    method: POST
    data_selector: result
- name: supported_languages
  endpoint:
    path: /rest/v1/name-translation/supported-languages
    method: GET
    data_selector: supportedLanguagePairs
- name: name_similarity
  endpoint:
    path: /rest/v1/name-similarity
    method: GET
    data_selector: ''
- name: supported_languages
  endpoint:
    path: /name-similarity/supported-languages
    method: GET
    data_selector: ''
- name: name-translation
  endpoint:
    path: /name-translation
    method: POST
    data_selector: content
- name: language
  endpoint:
    path: /language
    method: POST
    data_selector: content
- name: morphology_complete
  endpoint:
    path: /morphology/complete
    method: POST
    data_selector: tokens
- name: language
  endpoint:
    path: /language/supported-languages
    method: GET
    data_selector: supportedLanguages
- name: name_similarity
  endpoint:
    path: /rest/v1/name-similarity
    method: POST
    data_selector: result
- name: supported_languages
  endpoint:
    path: /rest/v1/name-similarity/supported-languages
    method: GET
    data_selector: supportedLanguagePairs
- name: morphology_complete
  endpoint:
    path: morphology/complete
    method: POST
    data_selector: content
- name: morphology_lemmas
  endpoint:
    path: morphology/lemmas
    method: POST
    data_selector: content
- name: address_similarity
  endpoint:
    path: /address-similarity
    method: POST
    data_selector: results
    params: {}
- name: supported_languages
  endpoint:
    path: /address-similarity/supported-languages
    method: GET
    data_selector: supportedLanguagePairs
    params: {}
- name: morphology_lemmas
  endpoint:
    path: /morphology/lemmas
    method: POST
    data_selector: content
- name: morphology_parts_of_speech
  endpoint:
    path: /morphology/parts-of-speech
    method: POST
    data_selector: content
- name: morphology_compound_components
  endpoint:
    path: /morphology/compound-components
    method: POST
    data_selector: content
- name: name_deduplication
  endpoint:
    path: /rest/v1/name-deduplication
    method: POST
    data_selector: result
- name: name_translation
  endpoint:
    path: /rest/v1/name-translation
    method: POST
    data_selector: result
- name: supported_languages
  endpoint:
    path: /rest/v1/name-translation/supported-languages
    method: GET
    data_selector: supportedLanguagePairs
- name: morphology_han_readings
  endpoint:
    path: /rest/v1/morphology/han-readings
    method: POST
    data_selector: content
- name: tokens
  endpoint:
    path: /rest/v1/tokens
    method: POST
    data_selector: content
- name: supported_languages
  endpoint:
    path: /rest/v1/morphology/supported-languages
    method: GET
    data_selector: supportedLanguages
- name: name_translation
  endpoint:
    path: /name-translation
    method: POST
    data_selector: result
    params: {}
- name: language_detection
  endpoint:
    path: /language
    method: POST
    data_selector: result
    params: {}
- name: tokens
  endpoint:
    path: /rest/v1/tokens
    method: POST
    data_selector: content
- name: sentences
  endpoint:
    path: /rest/v1/sentences
    method: POST
    data_selector: content
- name: supported_languages
  endpoint:
    path: /rest/v1/sentences/supported-languages
    method: GET
    data_selector: supportedLanguages
- name: language
  endpoint:
    path: /rest/v1/language/supported-languages
    method: GET
    data_selector: supportedLanguages
- name: morphology
  endpoint:
    path: /rest/v1/morphology/complete
    method: POST
    data_selector: tokens
- name: entities
  endpoint:
    path: /entities
    method: POST
    data_selector: entitiesResponse
    params: {}
- name: morphology_complete
  endpoint:
    path: /morphology/complete
    method: POST
    data_selector: content
    params: {}
- name: morphology_lemmas
  endpoint:
    path: /morphology/lemmas
    method: POST
    data_selector: content
    params: {}
- name: entities
  endpoint:
    path: /rest/v1/entities
    method: POST
    data_selector: header
    params: {}
- name: similar_terms
  endpoint:
    path: /rest/v1/semantics/similar
    method: POST
    data_selector: similarTerms
    params: {}
- name: vector
  endpoint:
    path: /rest/v1/semantics/vector
    method: POST
    data_selector: documentEmbedding
    params: {}
- name: morphology_lemmas
  endpoint:
    path: morphology
    method: POST
    data_selector: content
- name: morphology_parts_of_speech
  endpoint:
    path: morphology
    method: POST
    data_selector: content
- name: morphology_compound_components
  endpoint:
    path: morphology
    method: POST
    data_selector: content
- name: sentiment
  endpoint:
    path: /rest/v1/sentiment
    method: POST
    data_selector: document
    params: {}
- name: supported_languages
  endpoint:
    path: /rest/v1/sentiment/supported-languages
    method: GET
    data_selector: supportedLanguages
    params: {}
- name: sentiment
  endpoint:
    path: /rest/v1/sentiment
    method: POST
    data_selector: content
- name: topics
  endpoint:
    path: /rest/v1/topics
    method: POST
    data_selector: content
- name: morphology_han_readings
  endpoint:
    path: /rest/v1/morphology/han-readings
    method: POST
    data_selector: content
- name: tokens
  endpoint:
    path: /rest/v1/tokens
    method: POST
    data_selector: content
- name: supported_languages
  endpoint:
    path: /rest/v1/morphology/supported-languages
    method: GET
    data_selector: supportedLanguages
- name: topics
  endpoint:
    path: /topics
    method: POST
    data_selector: content
- name: categories
  endpoint:
    path: /categories
    method: POST
    data_selector: content
- name: sentences
  endpoint:
    path: /rest/v1/sentences
    method: POST
    data_selector: sentences
    params:
      content: 'This land is your land. This land is my land, from California to the
        New York island; from the red wood forest to the Gulf Stream waters. This
        land was made for you and Me. As I was walking that ribbon of highway, I saw
        above me that endless skyway: I saw below me that golden valley: This land
        was made for you and me.'
- name: supported_languages
  endpoint:
    path: /rest/v1/sentences/supported-languages
    method: GET
    data_selector: supportedLanguages
- name: entities
  endpoint:
    path: /rest/v1/entities
    method: POST
    data_selector: entities
- name: categories
  endpoint:
    path: /rest/v1/categories
    method: POST
    data_selector: response
    params:
      content: string
- name: relationships
  endpoint:
    path: /rest/v1/relationships
    method: POST
    data_selector: response
    params:
      content: string
- name: entities
  endpoint:
    path: /entities
    method: POST
    data_selector: entitiesResponse
- name: supported_languages
  endpoint:
    path: /rest/v1/relationships/supported-languages
    method: GET
    data_selector: supportedLanguages
- name: categories
  endpoint:
    path: /categories
    method: POST
    data_selector: categories
- name: entities
  endpoint:
    path: /entities
    method: POST
    data_selector: header
    params: {}
- name: similar_terms
  endpoint:
    path: /semantics/similar
    method: POST
    data_selector: header
    params:
      resultLanguages: ''
- name: vector
  endpoint:
    path: /semantics/vector
    method: POST
    data_selector: header
    params: {}
- name: sentiment
  endpoint:
    path: /rest/v1/sentiment
    method: POST
    data_selector: document
    params:
      content: string
      language: string
      options:
        modelType: string
- name: supported_languages
  endpoint:
    path: /sentiment/supported-languages
    method: GET
    data_selector: supportedLanguages
    params: {}
- name: sentiment
  endpoint:
    path: /rest/v1/sentiment
    method: POST
    data_selector: content
- name: topics
  endpoint:
    path: /rest/v1/topics
    method: POST
    data_selector: content
- name: ping
  endpoint:
    path: /ping
    method: GET
- name: info
  endpoint:
    path: /info
    method: GET
- name: sentiment
  endpoint:
    path: /sentiment
    method: POST
    data_selector: content
- name: categories
  endpoint:
    path: /categories
    method: POST
    data_selector: content
- name: topics
  endpoint:
    path: /topics
    method: POST
    data_selector: content
- name: categories
  endpoint:
    path: /categories
    method: POST
    data_selector: content
- name: name_similarity
  endpoint:
    path: /rest/v1/name-similarity
    method: POST
    data_selector: score
- name: supported_languages
  endpoint:
    path: /name-similarity/supported-languages
    method: GET
    data_selector: ''
- name: categories
  endpoint:
    path: /categories
    method: POST
    data_selector: content
- name: relationships
  endpoint:
    path: /relationships
    method: POST
    data_selector: content
- name: supported_languages
  endpoint:
    path: /categories/supported-languages
    method: GET
    data_selector: ''
- name: name_similarity
  endpoint:
    path: /rest/v1/name-similarity
    method: POST
    data_selector: response
    params: {}
- name: supported_languages
  endpoint:
    path: /rest/v1/name-similarity/supported-languages
    method: GET
    data_selector: supportedLanguagePairs
    params: {}
- name: supported_languages
  endpoint:
    path: /rest/v1/relationships/supported-languages
    method: GET
    data_selector: supportedLanguages
    params: {}
- name: address_similarity
  endpoint:
    path: /address-similarity
    method: POST
    data_selector: results
    params: {}
- name: supported_languages
  endpoint:
    path: /address-similarity/supported-languages
    method: GET
    data_selector: supportedLanguagePairs
    params: {}
- name: similar_terms
  endpoint:
    path: /semantics/similar
    method: POST
    data_selector: similarTerms
    params:
      resultLanguages:
      - spa
      - deu
      - jpn
- name: transliteration
  endpoint:
    path: /transliteration
    method: POST
    data_selector: result
    params: {}
- name: name_deduplication
  endpoint:
    path: /name-deduplication
    method: POST
    data_selector: result
    params: {}
- name: name_translation
  endpoint:
    path: /name-translation
    method: POST
    data_selector: result
    params: {}
- name: name_translation
  endpoint:
    path: name-translation
    method: POST
    data_selector: content
- name: language_detection
  endpoint:
    path: language
    method: POST
    data_selector: content
- name: language
  endpoint:
    path: /rest/v1/language/supported-languages
    method: GET
    data_selector: supportedLanguages
- name: morphology_complete
  endpoint:
    path: /rest/v1/morphology/complete
    method: POST
    data_selector: results
- name: morphology_complete
  endpoint:
    path: morphology/complete
    method: POST
    data_selector: content
- name: morphology_lemmas
  endpoint:
    path: morphology/lemmas
    method: POST
    data_selector: content
- name: ping
  endpoint:
    path: /ping
    method: GET
- name: info
  endpoint:
    path: /info
    method: GET
- name: morphology_lemmas
  endpoint:
    path: /morphology/lemmas
    method: POST
    data_selector: content
- name: morphology_parts_of_speech
  endpoint:
    path: /morphology/parts-of-speech
    method: POST
    data_selector: content
- name: morphology_compound_components
  endpoint:
    path: /morphology/compound-components
    method: POST
    data_selector: content
- name: sentiment
  endpoint:
    path: /sentiment
    method: POST
    data_selector: response
    params:
      content: sentiment_file_data
      language: eng
- name: categories
  endpoint:
    path: /categories
    method: POST
    data_selector: response
    params:
      content: categories_text_data
- name: morphology_han_readings
  endpoint:
    path: /rest/v1/morphology/han-readings
    method: POST
    data_selector: content
- name: tokens
  endpoint:
    path: /rest/v1/tokens
    method: POST
    data_selector: content
- name: supported_languages
  endpoint:
    path: /rest/v1/morphology/supported-languages
    method: GET
    data_selector: supportedLanguages
- name: name_similarity
  endpoint:
    path: /rest/v1/name-similarity
    method: GET
- name: supported_languages
  endpoint:
    path: /name-similarity/supported-languages
    method: GET
- name: name_similarity
  endpoint:
    path: /rest/v1/name-similarity
    method: POST
    data_selector: response
    params: {}
- name: tokens
  endpoint:
    path: /rest/v1/tokens
    method: POST
    data_selector: content
- name: sentences
  endpoint:
    path: /rest/v1/sentences
    method: POST
    data_selector: content
- name: supported_languages_tokens
  endpoint:
    path: /rest/v1/tokens/supported-languages
    method: GET
    data_selector: supportedLanguages
- name: supported_languages_sentences
  endpoint:
    path: /rest/v1/sentences/supported-languages
    method: GET
    data_selector: supportedLanguages
- name: entities
  endpoint:
    path: /rest/v1/entities
    method: POST
    data_selector: entities
- name: supported_languages
  endpoint:
    path: /rest/v1/address-similarity/supported-languages
    method: GET
    data_selector: results
- name: entities
  endpoint:
    path: /entities
    method: POST
    data_selector: entitiesResponse
    params: {}
- name: name_deduplication
  endpoint:
    path: /name-deduplication
    method: POST
    data_selector: result
    params: {}
- name: name_translation
  endpoint:
    path: /name-translation
    method: POST
    data_selector: result
    params: {}
- name: entities
  endpoint:
    path: /rest/v1/entities
    method: POST
    data_selector: content
- name: similar_terms
  endpoint:
    path: /rest/v1/semantics/similar
    method: POST
    data_selector: similarTerms
- name: vector
  endpoint:
    path: /rest/v1/semantics/vector
    method: POST
    data_selector: documentEmbedding
- name: name_translation
  endpoint:
    path: /name-translation
    method: POST
    data_selector: content
    params: {}
- name: language_identifier
  endpoint:
    path: /language
    method: POST
    data_selector: languageDetections
    params: {}
- name: sentiment
  endpoint:
    path: /rest/v1/sentiment
    method: POST
    data_selector: document
    params: {}
- name: supported_languages
  endpoint:
    path: /sentiment/supported-languages
    method: GET
    data_selector: supportedLanguages
    params: {}
- name: language
  endpoint:
    path: /rest/v1/language/supported-languages
    method: GET
    data_selector: supportedLanguages
- name: morphology_complete
  endpoint:
    path: /rest/v1/morphology/complete
    method: POST
    data_selector: tokens
- name: sentiment
  endpoint:
    path: /rest/v1/sentiment
    method: POST
    data_selector: content
- name: topics
  endpoint:
    path: /rest/v1/topics
    method: POST
    data_selector: content
- name: supported_languages
  endpoint:
    path: /rest/v1/sentiment/supported-languages
    method: GET
    data_selector: languages
- name: topics
  endpoint:
    path: /topics
    method: POST
    data_selector: content
- name: categories
  endpoint:
    path: /categories
    method: POST
    data_selector: content
- name: morphology_complete
  endpoint:
    path: morphology/complete
    method: POST
    data_selector: content
- name: morphology_lemmas
  endpoint:
    path: morphology/lemmas
    method: POST
    data_selector: content
- name: categories
  endpoint:
    path: /rest/v1/categories
    method: POST
    data_selector: content
- name: relationships
  endpoint:
    path: /rest/v1/relationships
    method: POST
    data_selector: content
- name: supported_languages
  endpoint:
    path: /rest/v1/relationships/supported-languages
    method: GET
    data_selector: supportedLanguages
- name: morphology_lemmas
  endpoint:
    path: /morphology/lemmas
    method: POST
    data_selector: content
- name: morphology_parts_of_speech
  endpoint:
    path: /morphology/parts-of-speech
    method: POST
    data_selector: content
- name: morphology_compound_components
  endpoint:
    path: /morphology/compound-components
    method: POST
    data_selector: content
- name: supported_languages
  endpoint:
    path: /rest/v1/relationships/supported-languages
    method: GET
    data_selector: supportedLanguages
    params: {}
- name: morphology
  endpoint:
    path: /rest/v1/morphology/han-readings
    method: POST
    data_selector: content
- name: tokens
  endpoint:
    path: /rest/v1/tokens
    method: POST
    data_selector: content
- name: supported_languages
  endpoint:
    path: /rest/v1/morphology/supported-languages
    method: GET
    data_selector: supportedLanguages
- name: transliteration
  endpoint:
    path: /rest/v1/transliteration
    method: GET
    data_selector: response
    params: {}
- name: supported_languages
  endpoint:
    path: /rest/v1/transliteration/supported-languages
    method: GET
    data_selector: response
    params: {}
- name: tokens
  endpoint:
    path: /rest/v1/tokens
    method: POST
    data_selector: content
- name: sentences
  endpoint:
    path: /rest/v1/sentences
    method: POST
    data_selector: content
- name: supported_languages
  endpoint:
    path: /rest/v1/sentences/supported-languages
    method: GET
    data_selector: supportedLanguages
- name: entities
  endpoint:
    path: /entities
    method: POST
    data_selector: entitiesResponse
- name: ping
  endpoint:
    path: /ping
    method: GET
- name: info
  endpoint:
    path: /info
    method: GET
- name: entities
  endpoint:
    path: /rest/v1/entities
    method: GET
    data_selector: content
- name: similar_terms
  endpoint:
    path: /rest/v1/semantics/similar
    method: POST
    data_selector: similarTerms
- name: vector
  endpoint:
    path: /rest/v1/semantics/vector
    method: POST
    data_selector: documentEmbedding
- name: sentiment
  endpoint:
    path: sentiment
    method: POST
    data_selector: response
    params:
      content: sentiment_file_data
      language: eng
- name: categories
  endpoint:
    path: categories
    method: POST
    data_selector: response
    params:
      content: categories_text_data
- name: sentiment
  endpoint:
    path: /rest/v1/sentiment
    method: POST
    data_selector: document
    params: {}
- name: supported_languages
  endpoint:
    path: /sentiment/supported-languages
    method: GET
    data_selector: supportedLanguages
    params: {}
- name: name_similarity
  endpoint:
    path: /rest/v1/name-similarity
    method: POST
    data_selector: score
- name: supported_languages
  endpoint:
    path: /name-similarity/supported-languages
    method: GET
- name: sentiment
  endpoint:
    path: /rest/v1/sentiment
    method: POST
    data_selector: content
- name: topics
  endpoint:
    path: /rest/v1/topics
    method: POST
    data_selector: content
- name: name_similarity
  endpoint:
    path: /name-similarity
    method: POST
    data_selector: response
    params: {}
- name: supported_languages
  endpoint:
    path: /name-similarity/supported-languages
    method: GET
    data_selector: supportedLanguagePairs
    params: {}
- name: topics
  endpoint:
    path: /topics
    method: POST
    data_selector: results
- name: categories
  endpoint:
    path: /categories
    method: POST
    data_selector: results
- name: supported_languages
  endpoint:
    path: /address-similarity/supported-languages
    method: GET
    data_selector: supportedLanguagePairs
- name: address_similarity
  endpoint:
    path: /address-similarity
    method: POST
    data_selector: results
- name: name_deduplication
  endpoint:
    path: /name-deduplication
    method: POST
    data_selector: result
- name: name_translation
  endpoint:
    path: /name-translation
    method: POST
    data_selector: result
- name: categories
  endpoint:
    path: /rest/v1/categories
    method: POST
    data_selector: content
- name: relationships
  endpoint:
    path: /rest/v1/relationships
    method: POST
    data_selector: content
- name: supported_languages_categories
  endpoint:
    path: /rest/v1/categories/supported-languages
    method: GET
- name: supported_languages_relationships
  endpoint:
    path: /rest/v1/relationships/supported-languages
    method: GET
- name: supported_languages
  endpoint:
    path: /rest/v1/relationships/supported-languages
    method: GET
    data_selector: supportedLanguages
- name: name_translation
  endpoint:
    path: /name-translation
    method: POST
    data_selector: content
- name: language_identifier
  endpoint:
    path: /language
    method: POST
    data_selector: languageDetections
- name: categories
  endpoint:
    path: /categories
    method: POST
    data_selector: categories
    params:
      scoreThreshold: -0.25
      singleLabel: 'false'
- name: language
  endpoint:
    path: /rest/v1/language
    method: GET
    data_selector: supportedLanguages
- name: morphology_complete
  endpoint:
    path: /rest/v1/morphology/complete
    method: POST
    data_selector: tokens
- name: morphology_complete
  endpoint:
    path: /morphology/complete
    method: POST
    data_selector: content
- name: morphology_lemmas
  endpoint:
    path: /morphology/lemmas
    method: POST
    data_selector: content
- name: morphology_parts_of_speech
  endpoint:
    path: /morphology/parts-of-speech
    method: POST
    data_selector: content
- name: morphology_compound_components
  endpoint:
    path: /morphology/compound-components
    method: POST
    data_selector: content
- name: ping
  endpoint:
    path: /ping
    method: GET
    data_selector: null
    params: {}
- name: info
  endpoint:
    path: /info
    method: GET
    data_selector: null
    params: {}
- name: sentiment
  endpoint:
    path: /rest/v1/sentiment
    method: POST
    data_selector: response
    params: {}
- name: categories
  endpoint:
    path: /rest/v1/categories
    method: POST
    data_selector: response
    params: {}
- name: tokens
  endpoint:
    path: /rest/v1/tokens
    method: POST
    data_selector: tokens
    params: {}
- name: morphology
  endpoint:
    path: /rest/v1/morphology/han-readings
    method: POST
    data_selector: content
    params: {}
- name: supported_languages
  endpoint:
    path: /rest/v1/morphology/supported-languages
    method: GET
    data_selector: supportedLanguages
    params: {}
- name: name_similarity
  endpoint:
    path: /rest/v1/name-similarity
    method: GET
- name: supported_languages
  endpoint:
    path: /name-similarity/supported-languages
    method: GET
- name: name_similarity
  endpoint:
    path: /rest/v1/name-similarity
    method: POST
    data_selector: response
- name: supported_languages
  endpoint:
    path: /rest/v1/name-similarity/supported-languages
    method: GET
    data_selector: supportedLanguagePairs
- name: tokens
  endpoint:
    path: /rest/v1/tokens
    method: POST
    data_selector: content
- name: sentences
  endpoint:
    path: /rest/v1/sentences
    method: POST
    data_selector: content
- name: supported_languages_tokens
  endpoint:
    path: /rest/v1/tokens/supported-languages
    method: GET
    data_selector: supportedLanguages
- name: supported_languages_sentences
  endpoint:
    path: /rest/v1/sentences/supported-languages
    method: GET
    data_selector: supportedLanguages
- name: entities
  endpoint:
    path: /rest/v1/entities
    method: POST
    data_selector: entities
- name: entities
  endpoint:
    path: /entities
    method: POST
    data_selector: entitiesResponse
    params: {}
- name: address_similarity
  endpoint:
    path: /address-similarity
    method: POST
    data_selector: results
- name: name_deduplication
  endpoint:
    path: /name-deduplication
    method: POST
    data_selector: results
- name: supported_languages_address_similarity
  endpoint:
    path: /address-similarity/supported-languages
    method: GET
    data_selector: supportedLanguagePairs
- name: supported_languages_name_deduplication
  endpoint:
    path: /name-deduplication/supported-languages
    method: GET
    data_selector: supportedLanguagePairs
- name: entities
  endpoint:
    path: /rest/v1/entities
    method: POST
    data_selector: content
- name: similar_terms
  endpoint:
    path: /rest/v1/semantics/similar
    method: POST
    data_selector: similarTerms
- name: name_deduplication
  endpoint:
    path: /rest/v1/name-deduplication
    method: POST
    data_selector: result
- name: name_translation
  endpoint:
    path: /rest/v1/name-translation
    method: POST
    data_selector: result
- name: supported_languages
  endpoint:
    path: /rest/v1/name-translation/supported-languages
    method: GET
    data_selector: supportedLanguagePairs
- name: sentiment_analysis
  endpoint:
    path: /sentiment
    method: POST
    data_selector: document
    params:
      content: string
      language: string
      options:
        modelType: string
- name: supported_languages
  endpoint:
    path: /sentiment/supported-languages
    method: GET
    data_selector: supportedLanguages
    params: {}
- name: name_translation
  endpoint:
    path: /name-translation
    method: POST
    data_selector: content
- name: language_identification
  endpoint:
    path: /language
    method: POST
    data_selector: content
- name: sentiment
  endpoint:
    path: /rest/v1/sentiment
    method: POST
    data_selector: content
- name: topics
  endpoint:
    path: /rest/v1/topics
    method: POST
    data_selector: content
- name: language_detection
  endpoint:
    path: /rest/v1/language
    method: POST
    data_selector: content
- name: morphology_complete
  endpoint:
    path: /rest/v1/morphology/complete
    method: POST
    data_selector: content
- name: topics
  endpoint:
    path: topics
    method: GET
    data_selector: response
    params: {}
- name: categories
  endpoint:
    path: categories
    method: POST
    data_selector: response
    params: {}
- name: morphology_complete
  endpoint:
    path: /morphology/complete
    method: POST
    data_selector: content
- name: morphology_lemmas
  endpoint:
    path: /morphology/lemmas
    method: POST
    data_selector: content
- name: categories
  endpoint:
    path: /rest/v1/categories
    method: POST
    data_selector: content
- name: relationships
  endpoint:
    path: /rest/v1/relationships
    method: POST
    data_selector: content
- name: supported_languages
  endpoint:
    path: /rest/v1/categories/supported-languages
    method: GET
    data_selector: supportedLanguages
- name: morphology_lemmas
  endpoint:
    path: /morphology/lemmas
    method: POST
    data_selector: content
- name: morphology_parts_of_speech
  endpoint:
    path: /morphology/parts-of-speech
    method: POST
    data_selector: content
- name: morphology_compound_components
  endpoint:
    path: /morphology/compound-components
    method: POST
    data_selector: content
- name: supported_languages
  endpoint:
    path: /rest/v1/relationships/supported-languages
    method: GET
    data_selector: supportedLanguages
- name: transliteration
  endpoint:
    path: /transliteration
    method: POST
    data_selector: result
    params: {}
- name: topics
  endpoint:
    path: /topics
    method: POST
    data_selector: result
    params: {}
- name: supported_languages
  endpoint:
    path: /transliteration/supported-languages
    method: GET
    data_selector: supportedLanguages
    params: {}
- name: morphology_han_readings
  endpoint:
    path: /rest/v1/morphology/han-readings
    method: POST
    data_selector: content
- name: tokens
  endpoint:
    path: /rest/v1/tokens
    method: POST
    data_selector: content
- name: supported_languages
  endpoint:
    path: /rest/v1/morphology/supported-languages
    method: GET
    data_selector: supportedLanguages
- name: categories
  endpoint:
    path: /categories
    method: POST
    data_selector: categories
- name: supported_languages
  endpoint:
    path: /categories/supported-languages
    method: GET
    data_selector: languages
- name: tokens
  endpoint:
    path: /tokens
    method: POST
    data_selector: content
- name: sentences
  endpoint:
    path: /sentences
    method: POST
    data_selector: content
- name: supported_languages
  endpoint:
    path: /sentences/supported-languages
    method: GET
    data_selector: supportedLanguages
- name: entities
  endpoint:
    path: /entities
    method: POST
    data_selector: entities
- name: entities
  endpoint:
    path: /entities
    method: POST
    data_selector: entitiesResponse
- name: ping
  endpoint:
    path: /ping
    method: GET
- name: info
  endpoint:
    path: /info
    method: GET
- name: entities
  endpoint:
    path: /rest/v1/entities
    method: POST
    data_selector: content
- name: similar_terms
  endpoint:
    path: /rest/v1/semantics/similar
    method: POST
    data_selector: similarTerms
- name: vector
  endpoint:
    path: /rest/v1/semantics/vector
    method: POST
    data_selector: documentEmbedding
- name: supported_languages
  endpoint:
    path: /rest/v1/entities/supported-languages
    method: GET
    data_selector: supportedLanguages
- name: sentiment
  endpoint:
    path: /sentiment
    method: POST
    data_selector: response
    params: {}
- name: categories
  endpoint:
    path: /categories
    method: POST
    data_selector: response
    params: {}
- name: sentiment
  endpoint:
    path: /sentiment
    method: POST
    data_selector: document
    params: {}
- name: supported_languages
  endpoint:
    path: /sentiment/supported-languages
    method: GET
    data_selector: supportedLanguages
    params: {}
- name: name_similarity
  endpoint:
    path: /rest/v1/name-similarity
    method: GET
    data_selector: score
- name: supported_languages
  endpoint:
    path: /name-similarity/supported-languages
    method: GET
    data_selector: ''
- name: sentiment
  endpoint:
    path: /rest/v1/sentiment
    method: POST
    data_selector: content
- name: topics
  endpoint:
    path: /rest/v1/topics
    method: POST
    data_selector: content
- name: supported_languages
  endpoint:
    path: /rest/v1/sentiment/supported-languages
    method: GET
    data_selector: supportedLanguages
- name: name_similarity
  endpoint:
    path: /rest/v1/name-similarity
    method: POST
    data_selector: response
    params: {}
- name: topics
  endpoint:
    path: /topics
    method: POST
    data_selector: content
- name: categories
  endpoint:
    path: /categories
    method: POST
    data_selector: content
- name: address_similarity
  endpoint:
    path: /address-similarity
    method: POST
    data_selector: results
- name: supported_languages
  endpoint:
    path: /address-similarity/supported-languages
    method: GET
    data_selector: supportedLanguagePairs
- name: categories
  endpoint:
    path: /rest/v1/categories
    method: POST
    data_selector: content
- name: relationships
  endpoint:
    path: /rest/v1/relationships
    method: POST
    data_selector: content
- name: supported_languages
  endpoint:
    path: /rest/v1/categories/supported-languages
    method: GET
    data_selector: supportedLanguages
- name: supported_languages
  endpoint:
    path: /rest/v1/relationships/supported-languages
    method: GET
    data_selector: supportedLanguages
- name: name_deduplication
  endpoint:
    path: /name-deduplication
    method: POST
    data_selector: result
    params: {}
- name: name_translation
  endpoint:
    path: /name-translation
    method: POST
    data_selector: result
    params: {}
- name: transliteration_supported_languages
  endpoint:
    path: /rest/v1/transliteration/supported-languages
    method: GET
    data_selector: response
- name: name_translation
  endpoint:
    path: /name-translation
    method: POST
    data_selector: result
    params: {}
- name: language_identifier
  endpoint:
    path: /language
    method: POST
    data_selector: result
    params: {}
- name: language
  endpoint:
    path: /rest/v1/language/supported-languages
    method: GET
    data_selector: supportedLanguages
- name: morphology_complete
  endpoint:
    path: /rest/v1/morphology/complete
    method: POST
    data_selector: tokens
- name: morphology_complete
  endpoint:
    path: morphology/complete
    method: POST
    data_selector: content
- name: morphology_lemmas
  endpoint:
    path: morphology/lemmas
    method: POST
    data_selector: content
- name: ping
  endpoint:
    path: /ping
    method: GET
- name: info
  endpoint:
    path: /info
    method: GET
- name: morphology_lemmas
  endpoint:
    path: /morphology/lemmas
    method: POST
    data_selector: content
- name: morphology_parts_of_speech
  endpoint:
    path: /morphology/parts-of-speech
    method: POST
    data_selector: content
- name: morphology_compound_components
  endpoint:
    path: /morphology/compound-components
    method: POST
    data_selector: content
- name: sentiment
  endpoint:
    path: /rest/v1/sentiment
    method: POST
    data_selector: content
- name: categories
  endpoint:
    path: /rest/v1/categories
    method: POST
    data_selector: content
- name: name_similarity
  endpoint:
    path: /rest/v1/name-similarity
    method: GET
    data_selector: ''
- name: supported_languages
  endpoint:
    path: /name-similarity/supported-languages
    method: GET
    data_selector: ''
- name: morphology_han_readings
  endpoint:
    path: /rest/v1/morphology/han-readings
    method: POST
    data_selector: content
    params: {}
- name: tokens
  endpoint:
    path: /rest/v1/tokens
    method: POST
    data_selector: content
    params: {}
- name: supported_languages
  endpoint:
    path: /rest/v1/morphology/supported-languages
    method: GET
    data_selector: supportedLanguages
    params: {}
- name: name_similarity
  endpoint:
    path: /rest/v1/name-similarity
    method: POST
    data_selector: results
- name: supported_languages
  endpoint:
    path: /rest/v1/name-similarity/supported-languages
    method: GET
    data_selector: supportedLanguagePairs
- name: tokens
  endpoint:
    path: /rest/v1/tokens
    method: POST
    data_selector: content
- name: sentences
  endpoint:
    path: /rest/v1/sentences
    method: POST
    data_selector: content
- name: supported_languages_tokens
  endpoint:
    path: /rest/v1/tokens/supported-languages
    method: GET
    data_selector: supportedLanguages
- name: supported_languages_sentences
  endpoint:
    path: /rest/v1/sentences/supported-languages
    method: GET
    data_selector: supportedLanguages
- name: entities
  endpoint:
    path: /rest/v1/entities
    method: POST
    data_selector: entities
- name: address_similarity
  endpoint:
    path: /address-similarity
    method: POST
    data_selector: results
- name: supported_languages
  endpoint:
    path: /address-similarity/supported-languages
    method: GET
    data_selector: supportedLanguagePairs
- name: entities
  endpoint:
    path: /entities
    method: POST
    data_selector: entitiesResponse
- name: name_deduplication
  endpoint:
    path: name-deduplication
    method: POST
    data_selector: content
- name: name_translation
  endpoint:
    path: name-translation
    method: POST
    data_selector: content
- name: entities
  endpoint:
    path: /rest/v1/entities
    method: POST
    data_selector: content
    params: {}
- name: similar_terms
  endpoint:
    path: /rest/v1/semantics/similar
    method: POST
    data_selector: content
    params: {}
- name: vector
  endpoint:
    path: /rest/v1/semantics/vector
    method: POST
    data_selector: content
    params: {}
- name: supported_languages
  endpoint:
    path: /rest/v1/entities/supported-languages
    method: GET
    data_selector: supportedLanguages
    params: {}
- name: name_translation
  endpoint:
    path: name-translation
    method: POST
    data_selector: content
- name: language_identifier
  endpoint:
    path: language
    method: POST
    data_selector: content
- name: sentiment
  endpoint:
    path: /rest/v1/sentiment
    method: POST
    data_selector: document
    params:
      content: string
      language: string
      options:
        modelType: string
- name: supported_languages
  endpoint:
    path: /sentiment/supported-languages
    method: GET
    data_selector: supportedLanguages
    params: {}
- name: morphology_complete
  endpoint:
    path: /morphology/complete
    method: POST
    data_selector: tokens
    params:
      content: string
- name: language_supported
  endpoint:
    path: /language/supported-languages
    method: GET
    data_selector: language
    params: {}
- name: morphology_complete
  endpoint:
    path: /morphology/complete
    method: POST
    data_selector: content
- name: morphology_lemmas
  endpoint:
    path: /morphology/lemmas
    method: POST
    data_selector: content
- name: sentiment
  endpoint:
    path: /rest/v1/sentiment
    method: POST
    data_selector: content
- name: topics
  endpoint:
    path: /rest/v1/topics
    method: POST
    data_selector: content
- name: supported_languages
  endpoint:
    path: /rest/v1/sentiment/supported-languages
    method: GET
    data_selector: supportedLanguages
- name: morphology_lemmas
  endpoint:
    path: /morphology/lemmas
    method: POST
    data_selector: content
- name: morphology_parts_of_speech
  endpoint:
    path: /morphology/parts-of-speech
    method: POST
    data_selector: content
- name: morphology_compound_components
  endpoint:
    path: /morphology/compound-components
    method: POST
    data_selector: content
- name: topics
  endpoint:
    path: /topics
    method: POST
    data_selector: content
- name: categories
  endpoint:
    path: /categories
    method: POST
    data_selector: content
- name: morphology_han_readings
  endpoint:
    path: /rest/v1/morphology/han-readings
    method: POST
    data_selector: content
- name: tokens
  endpoint:
    path: /rest/v1/tokens
    method: POST
    data_selector: content
- name: supported_languages
  endpoint:
    path: /rest/v1/morphology/supported-languages
    method: GET
    data_selector: supportedLanguages
- name: categories
  endpoint:
    path: /rest/v1/categories
    method: POST
    data_selector: content
- name: relationships
  endpoint:
    path: /rest/v1/relationships
    method: POST
    data_selector: content
- name: supported_languages
  endpoint:
    path: /rest/v1/categories/supported-languages
    method: GET
    data_selector: supportedLanguages
- name: supported_languages
  endpoint:
    path: /rest/v1/relationships/supported-languages
    method: GET
    data_selector: supportedLanguages
    params: {}
- name: tokens
  endpoint:
    path: /rest/v1/tokens
    method: POST
    data_selector: content
- name: sentences
  endpoint:
    path: /rest/v1/sentences
    method: POST
    data_selector: content
- name: supported_languages_tokens
  endpoint:
    path: /rest/v1/tokens/supported-languages
    method: GET
    data_selector: supportedLanguages
- name: supported_languages_sentences
  endpoint:
    path: /rest/v1/sentences/supported-languages
    method: GET
    data_selector: supportedLanguages
- name: entities
  endpoint:
    path: /rest/v1/entities
    method: POST
    data_selector: entities
- name: categories
  endpoint:
    path: /categories
    method: POST
    data_selector: content
    params: {}
- name: entities
  endpoint:
    path: /entities
    method: POST
    data_selector: entitiesResponse
    params: {}
- name: ping
  endpoint:
    path: /ping
    method: GET
- name: info
  endpoint:
    path: /info
    method: GET
- name: sentiment
  endpoint:
    path: /rest/v1/sentiment
    method: POST
    data_selector: response
    params:
      content: sentiment_file_data
- name: categories
  endpoint:
    path: /rest/v1/categories
    method: POST
    data_selector: response
    params:
      content: categories_text_data
- name: entities
  endpoint:
    path: /entities
    method: POST
    data_selector: content
- name: similar_terms
  endpoint:
    path: /semantics/similar
    method: POST
    data_selector: similarTerms
- name: vector
  endpoint:
    path: /semantics/vector
    method: POST
    data_selector: documentEmbedding
- name: name_similarity
  endpoint:
    path: /rest/v1/name-similarity
    method: POST
- name: supported_languages
  endpoint:
    path: /name-similarity/supported-languages
    method: GET
- name: sentiment
  endpoint:
    path: /rest/v1/sentiment
    method: POST
    data_selector: document
    params:
      content: string
      language: string
      options:
        modelType: DNN
- name: supported_languages
  endpoint:
    path: /sentiment/supported-languages
    method: GET
    data_selector: supportedLanguages
    params: {}
- name: name_similarity
  endpoint:
    path: /rest/v1/name-similarity
    method: POST
    data_selector: result
- name: supported_languages
  endpoint:
    path: /rest/v1/name-similarity/supported-languages
    method: GET
    data_selector: supportedLanguagePairs
- name: sentiment
  endpoint:
    path: /rest/v1/sentiment
    method: POST
    data_selector: content
- name: topics
  endpoint:
    path: /rest/v1/topics
    method: POST
    data_selector: content
- name: address_similarity
  endpoint:
    path: /address-similarity
    method: POST
    data_selector: results
- name: supported_languages
  endpoint:
    path: /address-similarity/supported-languages
    method: GET
    data_selector: results
- name: topics
  endpoint:
    path: /topics
    method: POST
    data_selector: content
    params: {}
- name: categories
  endpoint:
    path: /categories
    method: POST
    data_selector: content
    params: {}
- name: name_deduplication
  endpoint:
    path: /name-deduplication
    method: POST
    data_selector: content
- name: name_translation
  endpoint:
    path: /name-translation
    method: POST
    data_selector: content
- name: name_translation
  endpoint:
    path: /name-translation
    method: POST
    data_selector: result
    params: {}
- name: language_detection
  endpoint:
    path: /language
    method: POST
    data_selector: result
    params: {}
- name: categories
  endpoint:
    path: /rest/v1/categories
    method: POST
    data_selector: content
    params: {}
- name: relationships
  endpoint:
    path: /rest/v1/relationships
    method: POST
    data_selector: content
    params: {}
- name: supported_languages
  endpoint:
    path: /rest/v1/categories/supported-languages
    method: GET
    data_selector: supportedLanguages
    params: {}
- name: supported_languages
  endpoint:
    path: /rest/v1/relationships/supported-languages
    method: GET
    data_selector: supportedLanguages
    params: {}
- name: language
  endpoint:
    path: /rest/v1/language/supported-languages
    method: GET
    data_selector: supportedLanguages
- name: morphology_complete
  endpoint:
    path: /rest/v1/morphology/complete
    method: POST
    data_selector: tokens
- name: transliteration
  endpoint:
    path: /transliteration
    method: POST
    data_selector: content
- name: topics
  endpoint:
    path: /topics
    method: POST
    data_selector: content
- name: supported_languages
  endpoint:
    path: /transliteration/supported-languages
    method: GET
    data_selector: supportedLanguages
- name: morphology_complete
  endpoint:
    path: /morphology/complete
    method: POST
    data_selector: content
- name: morphology_lemmas
  endpoint:
    path: /morphology/lemmas
    method: POST
    data_selector: content
- name: categories
  endpoint:
    path: /rest/v1/categories
    method: POST
    data_selector: categories
    params:
      scoreThreshold: -0.25
      singleLabel: 'false'
- name: supported_languages
  endpoint:
    path: /categories/supported-languages
    method: GET
    data_selector: languages
    params: {}
- name: morphology_lemmas
  endpoint:
    path: /morphology
    method: POST
    data_selector: content
- name: morphology_parts_of_speech
  endpoint:
    path: /morphology/parts-of-speech
    method: POST
    data_selector: content
- name: morphology_compound_components
  endpoint:
    path: /morphology/compound-components
    method: POST
    data_selector: content
- name: morphology_han_readings
  endpoint:
    path: /morphology/han-readings
    method: POST
    data_selector: content
- name: tokens
  endpoint:
    path: /tokens
    method: POST
    data_selector: content
- name: supported_languages
  endpoint:
    path: /morphology/supported-languages
    method: GET
    data_selector: supportedLanguages
- name: ping
  endpoint:
    path: /ping
    method: GET
- name: info
  endpoint:
    path: /info
    method: GET
- name: tokens
  endpoint:
    path: /rest/v1/tokens
    method: POST
    data_selector: content
    params: {}
- name: sentences
  endpoint:
    path: /rest/v1/sentences
    method: POST
    data_selector: content
    params: {}
- name: supported_languages_tokens
  endpoint:
    path: /rest/v1/tokens/supported-languages
    method: GET
    data_selector: supportedLanguages
    params: {}
- name: supported_languages_sentences
  endpoint:
    path: /rest/v1/sentences/supported-languages
    method: GET
    data_selector: supportedLanguages
    params: {}
- name: entities
  endpoint:
    path: /rest/v1/entities
    method: POST
    data_selector: entities
    params: {}
- name: sentiment
  endpoint:
    path: /sentiment
    method: POST
    data_selector: response
    params:
      content: string
      language: eng
- name: categories
  endpoint:
    path: /categories
    method: POST
    data_selector: response
    params:
      content: string
- name: entities
  endpoint:
    path: /entities
    method: POST
    data_selector: entitiesResponse
    params: {}
- name: name_similarity
  endpoint:
    path: /rest/v1/name-similarity
    method: GET
    data_selector: score
- name: supported_languages
  endpoint:
    path: /name-similarity/supported-languages
    method: GET
    data_selector: languages
- name: name_similarity
  endpoint:
    path: /rest/v1/name-similarity
    method: POST
    data_selector: result
- name: supported_languages
  endpoint:
    path: /rest/v1/name-similarity/supported-languages
    method: GET
    data_selector: supportedLanguagePairs
- name: entities
  endpoint:
    path: /rest/v1/entities
    method: POST
    data_selector: content
- name: similar_terms
  endpoint:
    path: /rest/v1/semantics/similar
    method: POST
    data_selector: content
- name: vector
  endpoint:
    path: /rest/v1/semantics/vector
    method: POST
    data_selector: content
- name: address_similarity
  endpoint:
    path: /rest/v1/address-similarity
    method: POST
    data_selector: results
- name: supported_languages
  endpoint:
    path: /rest/v1/address-similarity/supported-languages
    method: GET
    data_selector: supportedLanguagePairs
- name: sentiment
  endpoint:
    path: /rest/v1/sentiment
    method: POST
    data_selector: document
    params: {}
- name: supported_languages
  endpoint:
    path: /sentiment/supported-languages
    method: GET
    data_selector: supportedLanguages
    params: {}
- name: name_deduplication
  endpoint:
    path: /name-deduplication
    method: POST
    data_selector: result
    params: {}
- name: name_translation
  endpoint:
    path: /name-translation
    method: POST
    data_selector: result
    params: {}
- name: sentiment
  endpoint:
    path: /rest/v1/sentiment
    method: POST
    data_selector: content
- name: topics
  endpoint:
    path: /rest/v1/topics
    method: POST
    data_selector: content
- name: name_translation
  endpoint:
    path: /name-translation
    method: POST
    data_selector: content
- name: language_identification
  endpoint:
    path: /language
    method: POST
    data_selector: content
- name: topics
  endpoint:
    path: /topics
    method: POST
    data_selector: result
    params: {}
- name: categories
  endpoint:
    path: /categories
    method: POST
    data_selector: result
    params: {}
- name: language
  endpoint:
    path: /rest/v1/language
    method: GET
    data_selector: supportedLanguages
- name: morphology_complete
  endpoint:
    path: /rest/v1/morphology/complete
    method: POST
    data_selector: tokens
- name: categories
  endpoint:
    path: /rest/v1/categories
    method: GET
    data_selector: supportedLanguages
- name: relationships
  endpoint:
    path: /relationships
    method: POST
    data_selector: result
- name: morphology_complete
  endpoint:
    path: /morphology/complete
    method: POST
    data_selector: content
- name: morphology_lemmas
  endpoint:
    path: /morphology/lemmas
    method: POST
    data_selector: content
- name: morphology_lemmas
  endpoint:
    path: /morphology
    method: POST
    data_selector: content
- name: morphology_parts_of_speech
  endpoint:
    path: /morphology/parts-of-speech
    method: POST
    data_selector: content
- name: morphology_compound_components
  endpoint:
    path: /morphology/compound-components
    method: POST
    data_selector: content
- name: morphology_han_readings
  endpoint:
    path: /morphology/han-readings
    method: POST
    data_selector: content
- name: tokens
  endpoint:
    path: /tokens
    method: POST
    data_selector: content
- name: supported_languages
  endpoint:
    path: /morphology/supported-languages
    method: GET
    data_selector: language
- name: ping
  endpoint:
    path: /ping
    method: GET
- name: info
  endpoint:
    path: /info
    method: GET
- name: sentiment
  endpoint:
    path: /rest/v1/sentiment
    method: POST
    data_selector: response
    params: {}
- name: categories
  endpoint:
    path: /rest/v1/categories
    method: POST
    data_selector: response
    params: {}
- name: name_similarity
  endpoint:
    path: /rest/v1/name-similarity
    method: POST
- name: supported_languages
  endpoint:
    path: /name-similarity/supported-languages
    method: GET
- name: tokens
  endpoint:
    path: /rest/v1/tokens
    method: POST
    data_selector: content
- name: sentences
  endpoint:
    path: /rest/v1/sentences
    method: POST
    data_selector: content
- name: supported_languages_tokens
  endpoint:
    path: /rest/v1/tokens/supported-languages
    method: GET
    data_selector: supportedLanguages
- name: supported_languages_sentences
  endpoint:
    path: /rest/v1/sentences/supported-languages
    method: GET
    data_selector: supportedLanguages
- name: entities
  endpoint:
    path: /rest/v1/entities
    method: POST
    data_selector: entities
- name: name_similarity
  endpoint:
    path: name-similarity
    method: POST
    data_selector: result
- name: supported_languages
  endpoint:
    path: name-similarity/supported-languages
    method: GET
    data_selector: supportedLanguagePairs
- name: entities
  endpoint:
    path: /entities
    method: POST
    data_selector: entitiesResponse
- name: address_similarity
  endpoint:
    path: /rest/v1/address-similarity
    method: POST
    data_selector: results
- name: supported_languages
  endpoint:
    path: /rest/v1/address-similarity/supported-languages
    method: GET
    data_selector: supportedLanguagePairs
- name: entities
  endpoint:
    path: /rest/v1/entities
    method: POST
    data_selector: content
- name: similar_terms
  endpoint:
    path: /rest/v1/semantics/similar
    method: POST
    data_selector: similarTerms
    params:
      resultLanguages:
      - spa
      - jpn
      - deu
- name: vector
  endpoint:
    path: /rest/v1/semantics/vector
    method: POST
    data_selector: documentEmbedding
- name: sentiment
  endpoint:
    path: /rest/v1/sentiment
    method: POST
    data_selector: document
    params:
      content: string
      language: string
      options:
        modelType: DNN
- name: supported_languages
  endpoint:
    path: /sentiment/supported-languages
    method: GET
    data_selector: supportedLanguages
    params: {}
- name: name_deduplication
  endpoint:
    path: /name-deduplication
    method: POST
    data_selector: result
    params: {}
- name: name_translation
  endpoint:
    path: /name-translation
    method: POST
    data_selector: result
    params: {}
- name: sentiment
  endpoint:
    path: /rest/v1/sentiment
    method: POST
    data_selector: content
- name: topics
  endpoint:
    path: /rest/v1/topics
    method: POST
    data_selector: content
- name: supported_languages
  endpoint:
    path: /rest/v1/sentiment/supported-languages
    method: GET
    data_selector: supportedLanguages
- name: name_translation
  endpoint:
    path: /name-translation
    method: POST
    data_selector: content
- name: language_identifier
  endpoint:
    path: /language
    method: POST
    data_selector: content
- name: supported_languages
  endpoint:
    path: /language/supported-languages
    method: GET
    data_selector: supportedLanguagePairs
- name: topics
  endpoint:
    path: topics
    method: POST
    data_selector: content
    params: {}
- name: categories
  endpoint:
    path: categories
    method: POST
    data_selector: content
    params: {}
- name: supported_languages
  endpoint:
    path: topics/supported-languages
    method: GET
    data_selector: supportedLanguages
    params: {}
- name: language
  endpoint:
    path: /rest/v1/language
    method: GET
    data_selector: tokens
- name: morphology_complete
  endpoint:
    path: /rest/v1/morphology/complete
    method: POST
    data_selector: tokens
- name: categories
  endpoint:
    path: /rest/v1/categories
    method: POST
    data_selector: content
- name: relationships
  endpoint:
    path: /rest/v1/relationships
    method: POST
    data_selector: content
- name: morphology_complete
  endpoint:
    path: /morphology/complete
    method: POST
    data_selector: content
- name: morphology_lemmas
  endpoint:
    path: /morphology/lemmas
    method: POST
    data_selector: content
- name: supported_languages
  endpoint:
    path: /rest/v1/relationships/supported-languages
    method: GET
    data_selector: supportedLanguages
- name: morphology_lemmas
  endpoint:
    path: /morphology/lemmas
    method: POST
    data_selector: content
- name: morphology_parts_of_speech
  endpoint:
    path: /morphology/parts-of-speech
    method: POST
    data_selector: content
- name: morphology_compound_components
  endpoint:
    path: /morphology/compound-components
    method: POST
    data_selector: content
- name: categories
  endpoint:
    path: /categories
    method: POST
    data_selector: result
- name: morphology_han_readings
  endpoint:
    path: /morphology/han-readings
    method: POST
    data_selector: content
- name: tokens
  endpoint:
    path: /tokens
    method: POST
    data_selector: content
- name: supported_languages
  endpoint:
    path: /tokens/supported-languages
    method: GET
    data_selector: supportedLanguages
- name: tokens
  endpoint:
    path: /rest/v1/tokens
    method: POST
    data_selector: content
    params: {}
- name: sentences
  endpoint:
    path: /rest/v1/sentences
    method: POST
    data_selector: content
    params: {}
- name: supported_languages_tokens
  endpoint:
    path: /rest/v1/tokens/supported-languages
    method: GET
    data_selector: supportedLanguages
    params: {}
- name: supported_languages_sentences
  endpoint:
    path: /rest/v1/sentences/supported-languages
    method: GET
    data_selector: supportedLanguages
    params: {}
- name: entities
  endpoint:
    path: /rest/v1/entities
    method: POST
    data_selector: entities
    params: {}
- name: entities
  endpoint:
    path: /entities
    method: POST
    data_selector: entitiesResponse
- name: ping
  endpoint:
    path: /ping
    method: GET
- name: info
  endpoint:
    path: /info
    method: GET
- name: sentiment
  endpoint:
    path: /rest/v1/sentiment
    method: POST
    data_selector: response
    params: {}
- name: categories
  endpoint:
    path: /rest/v1/categories
    method: POST
    data_selector: response
    params: {}
- name: entities
  endpoint:
    path: /rest/v1/entities
    method: POST
    data_selector: content
- name: similar_terms
  endpoint:
    path: /rest/v1/semantics/similar
    method: POST
    data_selector: similarTerms
- name: vector
  endpoint:
    path: /rest/v1/semantics/vector
    method: POST
    data_selector: documentEmbedding
- name: supported_languages
  endpoint:
    path: /rest/v1/entities/supported-languages
    method: GET
    data_selector: supportedLanguages
- name: name_similarity
  endpoint:
    path: /name-similarity
    method: GET
    data_selector: score
- name: supported_languages
  endpoint:
    path: /name-similarity/supported-languages
    method: GET
    data_selector: languages
- name: sentiment_analysis
  endpoint:
    path: /rest/v1/sentiment
    method: POST
    data_selector: document
    params: {}
- name: supported_languages
  endpoint:
    path: /sentiment/supported-languages
    method: GET
    data_selector: supportedLanguages
    params: {}
- name: name_similarity
  endpoint:
    path: /rest/v1/name-similarity
    method: POST
    data_selector: response
    params: {}
- name: supported_languages
  endpoint:
    path: /rest/v1/name-similarity/supported-languages
    method: GET
    data_selector: supportedLanguagePairs
    params: {}
- name: sentiment
  endpoint:
    path: /rest/v1/sentiment
    method: POST
    data_selector: content
- name: topics
  endpoint:
    path: /rest/v1/topics
    method: POST
    data_selector: content
- name: address_similarity
  endpoint:
    path: /address-similarity
    method: POST
    data_selector: results
    params: {}
- name: supported_languages
  endpoint:
    path: /address-similarity/supported-languages
    method: GET
    data_selector: supportedLanguagePairs
    params: {}
- name: topics
  endpoint:
    path: /topics
    method: POST
    data_selector: content
- name: categories
  endpoint:
    path: /categories
    method: POST
    data_selector: content
- name: name_deduplication
  endpoint:
    path: /name-deduplication
    method: POST
    data_selector: result
- name: name_translation
  endpoint:
    path: /name-translation
    method: POST
    data_selector: result
- name: name_translation
  endpoint:
    path: /name-translation
    method: POST
    data_selector: response
    params: {}
- name: language_identifier
  endpoint:
    path: /language
    method: POST
    data_selector: response
    params: {}
- name: categories
  endpoint:
    path: /categories
    method: GET
    data_selector: supportedLanguages
- name: relationships
  endpoint:
    path: /relationships
    method: POST
    data_selector: relationships
- name: supported_languages
  endpoint:
    path: /rest/v1/relationships/supported-languages
    method: GET
    data_selector: supportedLanguages
- name: morphology_complete
  endpoint:
    path: /morphology/complete
    method: POST
    data_selector: tokens
    params: {}
- name: language
  endpoint:
    path: /language/supported-languages
    method: GET
    data_selector: supportedLanguages
    params: {}
- name: transliteration
  endpoint:
    path: /rest/v1/transliteration
    method: POST
    data_selector: transliteration
    params: {}
- name: supported_languages
  endpoint:
    path: /rest/v1/transliteration/supported-languages
    method: GET
    data_selector: supportedLanguages
    params: {}
- name: morphology_complete
  endpoint:
    path: /morphology/complete
    method: POST
    data_selector: content
- name: morphology_lemmas
  endpoint:
    path: /morphology/lemmas
    method: POST
    data_selector: content
- name: categories
  endpoint:
    path: /rest/v1/categories
    method: POST
    data_selector: categories
- name: supported_languages
  endpoint:
    path: /categories/supported-languages
    method: GET
    data_selector: languages
- name: morphology_lemmas
  endpoint:
    path: /morphology/lemmas
    method: POST
    data_selector: content
- name: morphology_parts_of_speech
  endpoint:
    path: /morphology/parts-of-speech
    method: POST
    data_selector: content
- name: morphology_compound_components
  endpoint:
    path: /morphology/compound-components
    method: POST
    data_selector: content
- name: ping
  endpoint:
    path: /ping
    method: GET
- name: info
  endpoint:
    path: /info
    method: GET
- name: morphology_han_readings
  endpoint:
    path: /rest/v1/morphology/han-readings
    method: POST
    data_selector: content
- name: tokens
  endpoint:
    path: /rest/v1/tokens
    method: POST
    data_selector: content
- name: supported_languages
  endpoint:
    path: /rest/v1/morphology/supported-languages
    method: GET
- name: sentiment
  endpoint:
    path: /sentiment
    method: POST
    data_selector: response
    params:
      content: sentiment_file_data
      language: eng
- name: categories
  endpoint:
    path: /categories
    method: POST
    data_selector: response
    params:
      content: categories_text_data
- name: tokens
  endpoint:
    path: /rest/v1/tokens
    method: POST
    data_selector: content
- name: sentences
  endpoint:
    path: /rest/v1/sentences
    method: POST
    data_selector: content
- name: supported_languages_tokens
  endpoint:
    path: /rest/v1/tokens/supported-languages
    method: GET
    data_selector: supportedLanguages
- name: supported_languages_sentences
  endpoint:
    path: /rest/v1/sentences/supported-languages
    method: GET
    data_selector: supportedLanguages
- name: entities
  endpoint:
    path: /rest/v1/entities
    method: POST
    data_selector: entities
- name: name_similarity
  endpoint:
    path: /rest/v1/name-similarity
    method: POST
    data_selector: score
- name: supported_languages
  endpoint:
    path: /name-similarity/supported-languages
    method: GET
- name: entities
  endpoint:
    path: /entities
    method: POST
    data_selector: entitiesResponse
- name: name_similarity
  endpoint:
    path: /rest/v1/name-similarity
    method: POST
    data_selector: response
    params: {}
- name: supported_languages
  endpoint:
    path: /rest/v1/name-similarity/supported-languages
    method: GET
    data_selector: response
    params: {}
- name: entities
  endpoint:
    path: /rest/v1/entities
    method: POST
    data_selector: content
    params: {}
- name: similar_terms
  endpoint:
    path: /rest/v1/semantics/similar
    method: POST
    data_selector: content
    params:
      resultLanguages: string
- name: address_similarity
  endpoint:
    path: /address-similarity
    method: POST
    data_selector: results
- name: supported_languages
  endpoint:
    path: /address-similarity/supported-languages
    method: GET
    data_selector: supportedLanguagePairs
- name: sentiment
  endpoint:
    path: /rest/v1/sentiment
    method: POST
    data_selector: document
    params:
      content: string
      language: string
      options:
        modelType: string
- name: supported_languages
  endpoint:
    path: /sentiment/supported-languages
    method: GET
    data_selector: supportedLanguages
    params: {}
- name: name_deduplication
  endpoint:
    path: /name-deduplication
    method: POST
    data_selector: result
- name: name_translation
  endpoint:
    path: /name-translation
    method: POST
    data_selector: result
- name: sentiment
  endpoint:
    path: /rest/v1/sentiment
    method: POST
    data_selector: content
- name: topics
  endpoint:
    path: /rest/v1/topics
    method: POST
    data_selector: content
- name: name_translation
  endpoint:
    path: /name-translation
    method: POST
    data_selector: content
- name: language
  endpoint:
    path: /language
    method: POST
    data_selector: content
- name: topics
  endpoint:
    path: /topics
    method: POST
    data_selector: content
- name: categories
  endpoint:
    path: /categories
    method: POST
    data_selector: content
- name: language
  endpoint:
    path: /rest/v1/language
    method: GET
    data_selector: tokens
- name: morphology
  endpoint:
    path: /rest/v1/morphology/complete
    method: POST
    data_selector: tokens
- name: categories
  endpoint:
    path: /rest/v1/categories
    method: GET
    data_selector: supportedLanguages
- name: relationships
  endpoint:
    path: /relationships
    method: POST
    data_selector: content
    params: {}
- name: morphology_complete
  endpoint:
    path: morphology/complete
    method: POST
    data_selector: content
- name: morphology_lemmas
  endpoint:
    path: morphology/lemmas
    method: POST
    data_selector: content
- name: entities
  endpoint:
    path: /entities
    method: POST
    data_selector: entities
    params: {}
- name: name_similarity
  endpoint:
    path: /name-similarity
    method: POST
    data_selector: similarity
    params: {}
- name: address_similarity
  endpoint:
    path: /address-similarity
    method: POST
    data_selector: similarity
    params: {}
- name: morphology_lemmas
  endpoint:
    path: /morphology/lemmas
    method: POST
    data_selector: content
    params: {}
- name: morphology_parts_of_speech
  endpoint:
    path: /morphology/parts-of-speech
    method: POST
    data_selector: content
    params: {}
- name: morphology_compound_components
  endpoint:
    path: /morphology/compound-components
    method: POST
    data_selector: content
    params: {}
- name: ping
  endpoint:
    path: /ping
    method: GET
- name: info
  endpoint:
    path: /info
    method: GET
- name: morphology_han_readings
  endpoint:
    path: /rest/v1/morphology/han-readings
    method: POST
    data_selector: content
- name: tokens
  endpoint:
    path: /rest/v1/tokens
    method: POST
    data_selector: content
- name: supported_languages
  endpoint:
    path: /rest/v1/morphology/supported-languages
    method: GET
    data_selector: supportedLanguages
- name: sentiment
  endpoint:
    path: sentiment
    method: POST
    data_selector: response
    params: {}
- name: categories
  endpoint:
    path: categories
    method: POST
    data_selector: response
    params: {}
- name: sentences
  endpoint:
    path: /rest/v1/sentences
    method: POST
    data_selector: sentences
    params:
      content: 'This land is your land. This land is my land, from California to the
        New York island; from the red wood forest to the Gulf Stream waters. This
        land was made for you and Me. As I was walking that ribbon of highway, I saw
        above me that endless skyway: I saw below me that golden valley: This land
        was made for you and me.'
- name: supported_languages
  endpoint:
    path: /rest/v1/sentences/supported-languages
    method: GET
    data_selector: supportedLanguages
- name: name_similarity
  endpoint:
    path: /rest/v1/name-similarity
    method: GET
- name: supported_languages
  endpoint:
    path: /name-similarity/supported-languages
    method: GET
- name: entities
  endpoint:
    path: /entities
    method: POST
    data_selector: entitiesResponse
- name: name_similarity
  endpoint:
    path: /rest/v1/name-similarity
    method: POST
    data_selector: result
    params: {}
- name: supported_languages
  endpoint:
    path: /rest/v1/name-similarity/supported-languages
    method: GET
    data_selector: supportedLanguagePairs
    params: {}
- name: entities
  endpoint:
    path: /rest/v1/entities
    method: POST
    data_selector: content
- name: similar_terms
  endpoint:
    path: /rest/v1/semantics/similar
    method: POST
    data_selector: similarTerms
- name: vector
  endpoint:
    path: /rest/v1/semantics/vector
    method: POST
    data_selector: documentEmbedding
- name: supported_languages
  endpoint:
    path: /rest/v1/address-similarity/supported-languages
    method: GET
    data_selector: supportedLanguagePairs
- name: name_deduplication
  endpoint:
    path: /rest/v1/name-deduplication
    method: POST
    data_selector: results
- name: sentiment
  endpoint:
    path: /rest/v1/sentiment
    method: POST
    data_selector: document
    params:
      content: string
      language: string
      options:
        modelType: string
- name: supported_languages
  endpoint:
    path: /sentiment/supported-languages
    method: GET
    data_selector: supportedLanguages
    params: {}
- name: sentiment
  endpoint:
    path: /rest/v1/sentiment
    method: POST
    data_selector: content
- name: topics
  endpoint:
    path: /rest/v1/topics
    method: POST
    data_selector: content
- name: supported_languages
  endpoint:
    path: /rest/v1/sentiment/supported-languages
    method: GET
    data_selector: supportedLanguages
- name: name_deduplication
  endpoint:
    path: /name-deduplication
    method: POST
    data_selector: result
    params: {}
- name: name_translation
  endpoint:
    path: /name-translation
    method: POST
    data_selector: result
    params: {}
- name: topics
  endpoint:
    path: /topics
    method: POST
    data_selector: content
- name: categories
  endpoint:
    path: /categories
    method: POST
    data_selector: content
- name: language_detection
  endpoint:
    path: /language
    method: POST
    data_selector: content
- name: name_translation
  endpoint:
    path: /name-translation
    method: POST
    data_selector: content
- name: categories
  endpoint:
    path: /rest/v1/categories
    method: GET
    data_selector: content
- name: relationships
  endpoint:
    path: /rest/v1/relationships
    method: POST
    data_selector: content
- name: language
  endpoint:
    path: /rest/v1/language/supported-languages
    method: GET
    data_selector: supportedLanguages
- name: morphology_complete
  endpoint:
    path: /rest/v1/morphology/complete
    method: POST
    data_selector: tokens
- name: supported_languages
  endpoint:
    path: /rest/v1/relationships/supported-languages
    method: GET
    data_selector: supportedLanguages
- name: morphology_complete
  endpoint:
    path: /morphology/complete
    method: POST
    data_selector: content
- name: morphology_lemmas
  endpoint:
    path: /morphology/lemmas
    method: POST
    data_selector: content
- name: morphology_lemmas
  endpoint:
    path: /morphology
    method: POST
    data_selector: content
- name: morphology_parts_of_speech
  endpoint:
    path: /morphology/parts-of-speech
    method: POST
    data_selector: content
- name: morphology_compound_components
  endpoint:
    path: /morphology/compound-components
    method: POST
    data_selector: content
- name: morphology_han_readings
  endpoint:
    path: /morphology/han-readings
    method: POST
    data_selector: content
    params: {}
- name: tokens
  endpoint:
    path: /tokens
    method: POST
    data_selector: content
    params: {}
- name: supported_languages
  endpoint:
    path: /morphology/supported-languages
    method: GET
    data_selector: supportedLanguages
    params: {}
- name: entities
  endpoint:
    path: /entities
    method: POST
    data_selector: entities
- name: sentences
  endpoint:
    path: /sentences
    method: POST
    data_selector: sentences
- name: entities
  endpoint:
    path: /entities
    method: POST
    data_selector: entitiesResponse
- name: entities
  endpoint:
    path: /entities
    method: POST
    data_selector: content
- name: similar_terms
  endpoint:
    path: /semantics/similar
    method: POST
    data_selector: content
- name: vector
  endpoint:
    path: /semantics/vector
    method: POST
    data_selector: content
- name: sentiment
  endpoint:
    path: /sentiment
    method: POST
    data_selector: document
    params: {}
- name: supported_languages
  endpoint:
    path: /sentiment/supported-languages
    method: GET
    data_selector: supportedLanguages
    params: {}
- name: sentiment
  endpoint:
    path: /rest/v1/sentiment
    method: POST
    data_selector: content
- name: topics
  endpoint:
    path: /rest/v1/topics
    method: POST
    data_selector: content
- name: supported_languages
  endpoint:
    path: /rest/v1/sentiment/supported-languages
    method: GET
    data_selector: supportedLanguages
- name: topics
  endpoint:
    path: /topics
    method: POST
    data_selector: content
    params: {}
- name: categories
  endpoint:
    path: /categories
    method: POST
    data_selector: content
    params: {}
- name: pair_match
  endpoint:
    path: /rni_plugin/_pair_match
    method: POST
    data_selector: ''
    params: {}
- name: pair_match
  endpoint:
    path: /rni_plugin/_pair_match
    method: POST
    data_selector: score
    params: {}
- name: pair_match
  endpoint:
    path: /rni_plugin/_pair_match
    method: POST
    data_selector: score
    params: {}
- name: categories
  endpoint:
    path: /rest/v1/categories
    method: POST
    data_selector: content
- name: relationships
  endpoint:
    path: /rest/v1/relationships
    method: POST
    data_selector: content
- name: supported_languages
  endpoint:
    path: /rest/v1/relationships/supported-languages
    method: GET
    data_selector: supportedLanguages
- name: pair_match
  endpoint:
    path: /rni_plugin/_pair_match
    method: POST
    data_selector: score
    params: {}
- name: transliteration
  endpoint:
    path: /rest/v1/transliteration
    method: POST
    data_selector: transliteration
    params: {}
- name: supported_languages
  endpoint:
    path: /rest/v1/transliteration/supported-languages
    method: GET
    data_selector: supportedLanguages
    params: {}
- name: categories
  endpoint:
    path: /categories
    method: POST
    data_selector: categories
    params:
      scoreThreshold: -0.25
      singleLabel: 'false'
- name: supported_languages
  endpoint:
    path: /categories/supported-languages
    method: GET
    data_selector: languages
    params: {}
- name: pair_match
  endpoint:
    path: /rni_plugin/_pair_match
    method: POST
    data_selector: score
    params: {}
- name: pair_match
  endpoint:
    path: /rni_plugin/_pair_match
    method: POST
    data_selector: score
    params: {}
- name: pair_match
  endpoint:
    path: /rni_plugin/_pair_match
    method: POST
    data_selector: score
    params: {}
- name: ping
  endpoint:
    path: /ping
    method: GET
- name: info
  endpoint:
    path: /info
    method: GET
- name: pair_match_rni_date
  endpoint:
    path: /rni_plugin/_pair_match
    method: POST
    data_selector: score
    params:
      type: rni_date
- name: pair_match_rni_name
  endpoint:
    path: /rni_plugin/_pair_match
    method: POST
    data_selector: score
    params:
      type: rni_name
- name: pair_match_rni_address
  endpoint:
    path: /rni_plugin/_pair_match
    method: POST
    data_selector: score
    params:
      type: rni_address
- name: pair_match_text
  endpoint:
    path: /rni_plugin/_pair_match
    method: POST
    data_selector: score
    params:
      type: text
- name: sentiment
  endpoint:
    path: /sentiment
    method: POST
    data_selector: response
    params:
      content: sentiment_file_data
- name: categories
  endpoint:
    path: /categories
    method: POST
    data_selector: response
    params:
      content: categories_text_data
- name: pair_match
  endpoint:
    path: /rni_plugin/_pair_match
    method: POST
    data_selector: ''
    params: {}
- name: name_similarity
  endpoint:
    path: /rest/v1/name-similarity
    method: GET
- name: supported_languages
  endpoint:
    path: /name-similarity/supported-languages
    method: GET
- name: name_similarity
  endpoint:
    path: /rest/v1/name-similarity
    method: POST
    data_selector: response
    params: {}
- name: address_similarity
  endpoint:
    path: /rest/v1/address-similarity
    method: POST
    data_selector: result
    params: {}
- name: supported_languages
  endpoint:
    path: /rest/v1/address-similarity/supported-languages
    method: GET
    data_selector: supportedLanguagePairs
    params: {}
- name: name_deduplication
  endpoint:
    path: name-deduplication
    method: POST
    data_selector: content
- name: name_translation
  endpoint:
    path: name-translation
    method: POST
    data_selector: content
- name: name_translation
  endpoint:
    path: /name-translation
    method: POST
    data_selector: content
    params: {}
- name: language_detection
  endpoint:
    path: /language
    method: POST
    data_selector: content
    params: {}
- name: morphology_complete
  endpoint:
    path: /morphology/complete
    method: POST
    data_selector: tokens
    params: {}
- name: language
  endpoint:
    path: /language/supported-languages
    method: GET
    data_selector: supportedLanguages
    params: {}
- name: morphology_complete
  endpoint:
    path: /morphology/complete
    method: POST
    data_selector: content
- name: morphology_lemmas
  endpoint:
    path: /morphology/lemmas
    method: POST
    data_selector: content
- name: morphology_lemmas
  endpoint:
    path: /morphology/lemmas
    method: POST
    data_selector: content
- name: morphology_parts_of_speech
  endpoint:
    path: /morphology/parts-of-speech
    method: POST
    data_selector: content
- name: morphology_compound_components
  endpoint:
    path: /morphology/compound-components
    method: POST
    data_selector: content
- name: morphology_han_readings
  endpoint:
    path: /morphology/han-readings
    method: POST
    data_selector: content
- name: tokens
  endpoint:
    path: /tokens
    method: POST
    data_selector: content
- name: supported_languages
  endpoint:
    path: /morphology/supported-languages
    method: GET
    data_selector: language
- name: rni-test
  endpoint:
    path: /rni-test/_mapping
    method: PUT
    data_selector: properties
    params: {}
- name: rni-test-doc
  endpoint:
    path: /rni-test/_doc/1
    method: PUT
    data_selector: _source
    params: {}
- name: rni-test-search
  endpoint:
    path: /rni-test/_search
    method: GET
    data_selector: hits
    params: {}
- name: tokens
  endpoint:
    path: /tokens
    method: POST
    data_selector: content
- name: sentences
  endpoint:
    path: /sentences
    method: POST
    data_selector: content
- name: supported_languages_tokens
  endpoint:
    path: /tokens/supported-languages
    method: GET
    data_selector: supportedLanguages
- name: supported_languages_sentences
  endpoint:
    path: /sentences/supported-languages
    method: GET
    data_selector: supportedLanguages
- name: entities
  endpoint:
    path: /entities
    method: POST
    data_selector: entities
- name: entities
  endpoint:
    path: /entities
    method: POST
    data_selector: entitiesResponse
- name: entities
  endpoint:
    path: /rest/v1/entities
    method: POST
    data_selector: content
- name: similar_terms
  endpoint:
    path: /rest/v1/semantics/similar
    method: POST
    data_selector: content
- name: vector
  endpoint:
    path: /rest/v1/semantics/vector
    method: POST
    data_selector: content
- name: leftInput
  endpoint:
    path: /leftInput
    method: GET
    data_selector: fieldInputInfos
- name: rightInput
  endpoint:
    path: /rightInput
    method: GET
    data_selector: fieldInputInfos
- name: dateResponse
  endpoint:
    path: /dateResponse
    method: GET
    data_selector: scoreTuples
- name: pair_match
  endpoint:
    path: /rni_plugin/_pair_match
    method: POST
- name: sentiment
  endpoint:
    path: /rest/v1/sentiment
    method: POST
    data_selector: document
    params:
      content: string
      language: string
      options:
        modelType: string
- name: supported_languages
  endpoint:
    path: /sentiment/supported-languages
    method: GET
    data_selector: supportedLanguages
    params: {}
- name: pair_match
  endpoint:
    path: /rni_plugin/_pair_match
    method: POST
    data_selector: score
    params: {}
- name: sentiment
  endpoint:
    path: /rest/v1/sentiment
    method: POST
    data_selector: content
- name: topics
  endpoint:
    path: /rest/v1/topics
    method: POST
    data_selector: content
- name: pairwise_match
  endpoint:
    path: /_pair_match
    method: POST
    data_selector: results
- name: topics
  endpoint:
    path: /topics
    method: POST
    data_selector: result
    params: {}
- name: categories
  endpoint:
    path: /categories
    method: POST
    data_selector: result
    params: {}
- name: pair_match
  endpoint:
    path: /rni_plugin/_pair_match
    method: POST
    data_selector: score
    params: {}
- name: categories
  endpoint:
    path: /rest/v1/categories
    method: POST
    data_selector: content
- name: relationships
  endpoint:
    path: /rest/v1/relationships
    method: POST
    data_selector: content
- name: supported_languages
  endpoint:
    path: /rest/v1/relationships/supported-languages
    method: GET
    data_selector: supportedLanguages
- name: OpenSearch User Creation
  endpoint:
    path: /_plugins/_security/api/internalusers/MatchStudioUser
    method: PUT
    data_selector: users
    params: {}
- name: OpenSearch Role Creation
  endpoint:
    path: /_plugins/_security/api/roles/MatchStudioRole
    method: PUT
    data_selector: roles
    params: {}
- name: OpenSearch Role Mapping
  endpoint:
    path: /_plugins/_security/api/rolesmapping/MatchStudioRole
    method: PUT
    data_selector: rolesmapping
    params: {}
- name: pair_match
  endpoint:
    path: /rni_plugin/_pair_match
    method: POST
    data_selector: score
    params: {}
- name: pair_match_rni_date
  endpoint:
    path: /rni_plugin/_pair_match
    method: POST
    data_selector: score
    params:
      type: rni_date
- name: pair_match_text
  endpoint:
    path: /rni_plugin/_pair_match
    method: POST
    data_selector: score
    params:
      type: text
- name: pair_match_rni_name
  endpoint:
    path: /rni_plugin/_pair_match
    method: POST
    data_selector: score
    params:
      type: rni_name
- name: pair_match_rni_address
  endpoint:
    path: /rni_plugin/_pair_match
    method: POST
    data_selector: score
    params:
      type: rni_address
- name: pair_match
  endpoint:
    path: /rni_plugin/_pair_match
    method: POST
    data_selector: score
    params: {}
- name: elasticsearch_parameters
  endpoint:
    path: /elasticsearch-<version>/config/elasticsearch.yml
    method: GET
    data_selector: parameters
    params:
      network.host: 0.0.0.0
      http.max_content_length: 400mb
      xpack.security.enabled: false
- name: elasticsearch_auth_parameters
  endpoint:
    path: /elasticsearch-<version>/config/elasticsearch.yml
    method: GET
    data_selector: parameters
    params:
      network.host: 0.0.0.0
      http.max_content_length: 400mb
      xpack.security.enabled: true
- name: parameter_defs
  endpoint:
    path: /elasticsearch-<version>/plugins/babel-street-match/bt_root/rlpnc/data/etc/parameter_defs.yaml
    method: GET
    data_selector: parameters
    params:
      enableDynamicConfigurationEndpoints:
        type: boolean
        static: true
        default: true
- name: pair_match
  endpoint:
    path: /rni_plugin/_pair_match
    method: POST
    data_selector: score
    params: {}
- name: pair_match
  endpoint:
    path: /rni_plugin/_pair_match
    method: POST
    data_selector: score
    params: {}
- name: pair_match
  endpoint:
    path: /rni_plugin/_pair_match
    method: POST
    data_selector: score
    params: {}
- name: pair_match
  endpoint:
    path: /rni_plugin/_pair_match
    method: POST
    data_selector: score
    params: {}
- name: pair_match
  endpoint:
    path: /rni_plugin/_pair_match
    method: POST
    data_selector: score
    params: {}
- name: match_names
  endpoint:
    path: /analytics/match-names/name-similarity/match-names
    method: POST
    data_selector: results
- name: pair_match
  endpoint:
    path: /rni_plugin/_pair_match
    method: POST
    data_selector: score
    params: {}
- name: index_mapping
  endpoint:
    path: /_mapping
    method: PUT
    data_selector: properties
- name: index_documents
  endpoint:
    path: /_doc/1
    method: PUT
    data_selector: properties
- name: base_query
  endpoint:
    path: /_search
    method: GET
    data_selector: query
- name: match_rescore
  endpoint:
    path: /_search
    method: GET
    data_selector: rescore
- name: pair_match
  endpoint:
    path: /rni_plugin/_pair_match
    method: POST
    data_selector: score
    params: {}
- name: pair_match
  endpoint:
    path: /rni_plugin/_pair_match
    method: POST
    data_selector: score
    params: {}
- name: pair_match
  endpoint:
    path: /rni_plugin/_pair_match
    method: POST
    data_selector: score
    params: {}
- name: pair_match
  endpoint:
    path: /rni_plugin/_pair_match
    method: POST
    data_selector: score
    params: {}
- name: pair_match
  endpoint:
    path: /rni_plugin/_pair_match
    method: POST
    data_selector: score
    params: {}
- name: pair_match
  endpoint:
    path: /rni_plugin/_pair_match
    method: POST
    data_selector: ''
    params: {}
- name: pair_match
  endpoint:
    path: /rni_plugin/_pair_match
    method: POST
    data_selector: score
    params: {}
- name: pair_match
  endpoint:
    path: /rni_plugin/_pair_match
    method: POST
    data_selector: score
    params: {}
- name: pair_match
  endpoint:
    path: /rni_plugin/_pair_match
    method: POST
    data_selector: score
    params: {}
- name: pair_match
  endpoint:
    path: /rni_plugin/_pair_match
    method: POST
    data_selector: score
    params: {}
- name: pair_match_rni_date
  endpoint:
    path: /rni_plugin/_pair_match
    method: POST
    data_selector: score
    params:
      type: rni_date
- name: pair_match_rni_name
  endpoint:
    path: /rni_plugin/_pair_match
    method: POST
    data_selector: score
    params:
      type: rni_name
- name: pair_match_rni_address
  endpoint:
    path: /rni_plugin/_pair_match
    method: POST
    data_selector: score
    params:
      type: rni_address
- name: pair_match_text
  endpoint:
    path: /rni_plugin/_pair_match
    method: POST
    data_selector: score
    params:
      type: text
- name: pair_match
  endpoint:
    path: /rni_plugin/_pair_match
    method: POST
    data_selector: score
    params: {}
- name: index
  endpoint:
    path: /rni-test/_mapping
    method: PUT
    data_selector: properties
- name: documents
  endpoint:
    path: /rni-test/_doc/1
    method: PUT
    data_selector: _source
- name: search
  endpoint:
    path: /rni-test/_search
    method: GET
    data_selector: hits.hits
- name: pair_match
  endpoint:
    path: /rni_plugin/_pair_match
    method: POST
    data_selector: score
    params: {}
- name: pairwise_match
  endpoint:
    path: /_pair_match
    method: POST
- name: pair_match
  endpoint:
    path: /rni_plugin/_pair_match
    method: POST
    data_selector: ''
    params: {}
- name: OpenSearchUser
  endpoint:
    path: /_plugins/_security/api/internalusers/MatchStudioUser
    method: PUT
    data_selector: ''
    params: {}
- name: MatchStudioRole
  endpoint:
    path: /_plugins/_security/api/roles/MatchStudioRole
    method: PUT
    data_selector: ''
    params: {}
- name: rolesmapping
  endpoint:
    path: /_plugins/_security/api/rolesmapping/MatchStudioRole
    method: PUT
    data_selector: ''
    params: {}
- name: OpenSearchUser
  endpoint:
    path: /_plugins/_security/api/internalusers/MatchStudioUser
    method: PUT
    data_selector: null
    params:
      password: qwerQWER!@#$1234
- name: MatchStudioRole
  endpoint:
    path: /_plugins/_security/api/roles/MatchStudioRole
    method: PUT
    data_selector: null
    params:
      cluster_permissions:
      - cluster:monitor/main
      - cluster:monitor/health
      - cluster:monitor/state
      - cluster:monitor/nodes/info
      - indices:data/read/scroll*
      index_permissions:
      - index_patterns:
        - '*'
        allowed_actions:
        - indices:data/*
        - indices:monitor/settings/get
        - indices:monitor/stats
        - indices:admin/get
        - indices:admin/create
        - indices:admin/mapping/put
        - indices:admin/mappings/get
        - indices:admin/delete
        - indices:admin/refresh*
- name: rolesmapping
  endpoint:
    path: /_plugins/_security/api/rolesmapping/MatchStudioRole
    method: PUT
    data_selector: null
    params:
      users:
      - MatchStudioUser
- name: elasticsearch
  endpoint:
    path: /_plugins/_security/api/internalusers/MatchStudioUser
    method: PUT
- name: elasticsearch_role
  endpoint:
    path: /_plugins/_security/api/roles/MatchStudioRole
    method: PUT
- name: role_mapping
  endpoint:
    path: /_plugins/_security/api/rolesmapping/MatchStudioRole
    method: PUT
- name: record_match
  endpoint:
    path: /rni_plugin/_record_match
    method: GET
    data_selector: records
- name: ParameterProfileUtils
  endpoint:
    path: /com.basistech.names.parameters.ParameterProfileUtils/displayParameterUniverses
    method: GET
- name: name_match
  endpoint:
    path: /api/v1/name_match
    method: POST
    data_selector: results
- name: address_match
  endpoint:
    path: /api/v1/address_match
    method: POST
    data_selector: results
- name: pairwise_match
  endpoint:
    path: /match/pairwise
    method: POST
    data_selector: results
    params: {}
- name: name_similarity
  endpoint:
    path: /analytics/match-names/name-similarity
    method: GET
    data_selector: records
    params: {}
- name: pair_match
  endpoint:
    path: /rni_plugin/_pair_match
    method: POST
    data_selector: score
    params: {}
- name: pair_match
  endpoint:
    path: /rni_plugin/_pair_match
    method: POST
    data_selector: score
    params: {}
- name: pair_match
  endpoint:
    path: /rni_plugin/_pair_match
    method: POST
    data_selector: score
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: pair_match
  endpoint:
    path: /rni_plugin/_pair_match
    method: POST
    data_selector: score
    params: {}
- name: pair_match
  endpoint:
    path: /rni_plugin/_pair_match
    method: POST
    data_selector: ''
    params: {}
- name: pair_match
  endpoint:
    path: /rni_plugin/_pair_match
    method: POST
    data_selector: score
    params: {}
- name: pair_match
  endpoint:
    path: /rni_plugin/_pair_match
    method: POST
    data_selector: score
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: pair_match
  endpoint:
    path: /rni_plugin/_pair_match
    method: POST
    data_selector: score
    params: {}
- name: pair_match
  endpoint:
    path: /rni_plugin/_pair_match
    method: POST
    data_selector: ''
    params: {}
- name: mapping
  endpoint:
    path: /rni-test/_mapping
    method: PUT
    data_selector: properties
- name: index_document
  endpoint:
    path: /rni-test/_doc/1
    method: PUT
    data_selector: documents
- name: search
  endpoint:
    path: /rni-test/_search
    method: GET
    data_selector: query
- name: health_services
  endpoint:
    path: /health/services
    method: GET
- name: entities
  endpoint:
    path: /entities
    method: GET
- name: events
  endpoint:
    path: /events
    method: GET
- name: morphology
  endpoint:
    path: /morphology/{morphoFeature}
    method: GET
- name: name_similarity
  endpoint:
    path: /name-similarity
    method: GET
- name: name_translation
  endpoint:
    path: /name-translation
    method: GET
- name: record_similarity
  endpoint:
    path: /record-similarity
    method: GET
- name: relationships
  endpoint:
    path: /relationships
    method: GET
- name: sentiment
  endpoint:
    path: /sentiment
    method: GET
- name: tokens
  endpoint:
    path: /tokens
    method: GET
- name: topics
  endpoint:
    path: /topics
    method: GET
- name: pair_match
  endpoint:
    path: /rni_plugin/_pair_match
    method: POST
    data_selector: score
    params: {}
- name: pairwise_match
  endpoint:
    path: /_pair_match
    method: POST
- name: address_similarity
  endpoint:
    path: /address-similarity
    method: GET
    data_selector: records
- name: entity_extraction
  endpoint:
    path: /entities
    method: GET
    data_selector: records
- name: event_extractor
  endpoint:
    path: /events
    method: GET
    data_selector: records
- name: morphological_analysis
  endpoint:
    path: /morphology/{morphoFeature}
    method: GET
    data_selector: records
- name: name_similarity
  endpoint:
    path: /name-similarity
    method: GET
    data_selector: records
- name: name_translation
  endpoint:
    path: /name-translation
    method: GET
    data_selector: records
- name: record_similarity
  endpoint:
    path: /record-similarity
    method: GET
    data_selector: records
- name: semantic_similarity
  endpoint:
    path: /semantics/{semanticsFeature}
    method: GET
    data_selector: records
- name: sentence_tagging
  endpoint:
    path: /sentences
    method: GET
    data_selector: records
- name: tokenization
  endpoint:
    path: /tokens
    method: GET
    data_selector: records
- name: pair_match
  endpoint:
    path: /rni_plugin/_pair_match
    method: POST
    data_selector: score
    params: {}
- name: entity_extraction_and_linking
  endpoint:
    path: /entities
    method: GET
    data_selector: entities
    params:
      options: '{"includePermID": true}'
- name: language_identification
  endpoint:
    path: /language
    method: GET
    data_selector: languages
    params: {}
- name: morphological_analysis
  endpoint:
    path: /morphology/{morphoFeature}
    method: GET
    data_selector: analysis
    params: {}
- name: address_similarity
  endpoint:
    path: /address-similarity
    method: GET
    data_selector: similarity
    params: {}
- name: name_similarity
  endpoint:
    path: /name-similarity
    method: GET
    data_selector: similarity
    params: {}
- name: address_similarity
  endpoint:
    path: /address-similarity
    method: GET
- name: entities
  endpoint:
    path: /entities
    method: GET
- name: morphology
  endpoint:
    path: /morphology/{morphoFeature}
    method: GET
- name: name_similarity
  endpoint:
    path: /name-similarity
    method: GET
- name: name_translation
  endpoint:
    path: /name-translation
    method: GET
- name: tokens
  endpoint:
    path: /tokens
    method: GET
- name: custom_profiles
  endpoint:
    path: /rest/v1/custom-profiles
    method: GET
- name: record_match
  endpoint:
    path: /rni_plugin/_record_match
    method: GET
- name: morphological_analysis
  endpoint:
    path: /morphology/{morphoFeature}
    method: GET
    data_selector: records
- name: name_similarity
  endpoint:
    path: /name-similarity
    method: GET
    data_selector: records
- name: name_translation
  endpoint:
    path: /name-translation
    method: GET
    data_selector: records
- name: semantic_similarity
  endpoint:
    path: /semantics/{semanticsFeature}
    method: GET
    data_selector: records
- name: entity_extraction_and_linking
  endpoint:
    path: /entities
    method: GET
    data_selector: records
- name: address_similarity
  endpoint:
    path: /address-similarity
    method: GET
    data_selector: records
- name: ParameterProfileUtils
  endpoint:
    path: /com.basistech.names.parameters.ParameterProfileUtils/displayParameterUniverses
    method: GET
- name: address_similarity
  endpoint:
    path: /address-similarity
    method: GET
    data_selector: records
- name: entities
  endpoint:
    path: /entities
    method: GET
    data_selector: records
- name: morphology
  endpoint:
    path: /morphology/{morphoFeature}
    method: GET
    data_selector: records
- name: name_similarity
  endpoint:
    path: /name-similarity
    method: GET
    data_selector: records
- name: name_translation
  endpoint:
    path: /name-translation
    method: GET
    data_selector: records
- name: entity_extraction_and_linking
  endpoint:
    path: /entities
    method: GET
- name: language_identification
  endpoint:
    path: /language
    method: GET
- name: morphological_analysis
  endpoint:
    path: /morphology/{morphoFeature}
    method: GET
- name: name_similarity
  endpoint:
    path: /name-similarity
    method: GET
- name: semantic_vectors
  endpoint:
    path: /semantics/vector
    method: GET
- name: categorization
  endpoint:
    path: /categories
    method: GET
- name: sentiment
  endpoint:
    path: /sentiment
    method: GET
- name: semantic_similarity
  endpoint:
    path: /semantics/similar
    method: GET
- name: semantic_vectors
  endpoint:
    path: /semantics/vector
    method: GET
- name: entity_extraction
  endpoint:
    path: /entities
    method: GET
- name: morphological_analysis
  endpoint:
    path: /morphology/{morphoFeature}
    method: GET
- name: name_similarity
  endpoint:
    path: /name-similarity
    method: GET
- name: entity_extraction
  endpoint:
    path: /entities
    method: POST
    data_selector: results
- name: morphological_analysis
  endpoint:
    path: /morphology/{morphoFeature}
    method: POST
    data_selector: results
- name: name_similarity
  endpoint:
    path: /name-similarity
    method: POST
    data_selector: results
- name: topic_extraction
  endpoint:
    path: /topic-extraction
    method: POST
    data_selector: results
- name: name_deduplication
  endpoint:
    path: /name-deduplication
    method: POST
    data_selector: results
- name: sentiment_analysis
  endpoint:
    path: /sentiment
    method: POST
    data_selector: results
- name: entity_extraction
  endpoint:
    path: /entities
    method: POST
    data_selector: results
- name: relationship_extraction
  endpoint:
    path: /relationships
    method: POST
    data_selector: results
- name: entity_extraction
  endpoint:
    path: /entities
    method: GET
    data_selector: records
- name: morphological_analysis
  endpoint:
    path: /morphology
    method: GET
    data_selector: records
- name: name_similarity
  endpoint:
    path: /name-similarity
    method: GET
    data_selector: records
- name: name_translation
  endpoint:
    path: /name-translation
    method: GET
    data_selector: records
- name: record_similarity
  endpoint:
    path: /record-similarity
    method: GET
    data_selector: records
- name: entity_extraction_and_linking
  endpoint:
    path: /entities
    method: GET
- name: language_identification
  endpoint:
    path: /language
    method: GET
- name: morphological_analysis
  endpoint:
    path: /morphology/{morphoFeature}
    method: GET
- name: name_similarity
  endpoint:
    path: /name-similarity
    method: GET
- name: semantic_vectors
  endpoint:
    path: /semantics/vector
    method: GET
- name: address_similarity
  endpoint:
    path: /address-similarity
    method: GET
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: morphological_analysis
  endpoint:
    path: /morphology/{morphoFeature}
    method: GET
- name: name_similarity
  endpoint:
    path: /name-similarity
    method: GET
- name: name_translation
  endpoint:
    path: /name-translation
    method: GET
- name: tokenization
  endpoint:
    path: /tokens
    method: GET
- name: address_similarity
  endpoint:
    path: /address-similarity
    method: GET
- name: entity_extraction_and_linking
  endpoint:
    path: /entities
    method: GET
- name: sentence_tagging
  endpoint:
    path: /sentences
    method: GET
- name: semantic_similarity
  endpoint:
    path: /semantics/{semanticsFeature}
    method: GET
- name: address_similarity
  endpoint:
    path: /address-similarity
    method: GET
- name: entity_extraction
  endpoint:
    path: /entities
    method: GET
- name: morphological_analysis
  endpoint:
    path: /morphology
    method: GET
- name: name_similarity
  endpoint:
    path: /name-similarity
    method: GET
- name: name_translation
  endpoint:
    path: /name-translation
    method: GET
- name: tokenization
  endpoint:
    path: /tokens
    method: GET
- name: language_identification
  endpoint:
    path: /language
    method: GET
- name: sentence_tagging
  endpoint:
    path: /sentences
    method: GET
- name: address_similarity
  endpoint:
    path: /address-similarity
    method: POST
    data_selector: result
- name: entity_extraction
  endpoint:
    path: /entities
    method: POST
    data_selector: result
- name: morphological_analysis
  endpoint:
    path: /morphology/{morphoFeature}
    method: GET
    data_selector: result
- name: name_deduplication
  endpoint:
    path: /name-deduplication
    method: POST
    data_selector: result
- name: name_similarity
  endpoint:
    path: /name-similarity
    method: POST
    data_selector: result
- name: name_translation
  endpoint:
    path: /name-translation
    method: POST
    data_selector: result
- name: address_similarity
  endpoint:
    path: /address-similarity
    method: POST
    data_selector: results
- name: entity_extraction
  endpoint:
    path: /entities
    method: POST
    data_selector: results
- name: name_similarity
  endpoint:
    path: /name-similarity
    method: POST
    data_selector: results
- name: morphological_analysis
  endpoint:
    path: /morphology/{morphoFeature}
    method: POST
    data_selector: results
- name: name_translation
  endpoint:
    path: /name-translation
    method: POST
    data_selector: results
- name: semantic_similarity
  endpoint:
    path: /semantics/{semanticsFeature}
    method: POST
    data_selector: results
- name: address_similarity
  endpoint:
    path: /address-similarity
    method: GET
- name: entity_extraction
  endpoint:
    path: /entities
    method: GET
- name: morphological_analysis
  endpoint:
    path: /morphology/{morphoFeature}
    method: GET
- name: name_similarity
  endpoint:
    path: /name-similarity
    method: GET
- name: tokenization
  endpoint:
    path: /tokens
    method: GET
- name: supported_languages
  endpoint:
    path: /supported-languages
    method: GET
- name: address_similarity
  endpoint:
    path: /address-similarity
    method: GET
    data_selector: records
- name: entities
  endpoint:
    path: /entities
    method: GET
    data_selector: records
- name: morphology
  endpoint:
    path: /morphology/{morphoFeature}
    method: GET
    data_selector: records
- name: name_similarity
  endpoint:
    path: /name-similarity
    method: GET
    data_selector: records
- name: name_translation
  endpoint:
    path: /name-translation
    method: GET
    data_selector: records
- name: entity_extraction_and_linking
  endpoint:
    path: /entities
    method: GET
    data_selector: entities
- name: language_identification
  endpoint:
    path: /language
    method: GET
    data_selector: language
- name: morphological_analysis
  endpoint:
    path: /morphology/{morphoFeature}
    method: GET
    data_selector: morphology
- name: name_similarity
  endpoint:
    path: /name-similarity
    method: GET
    data_selector: name_similarity
- name: semantic_similarity
  endpoint:
    path: /semantics/vector
    method: GET
    data_selector: semantic_similarity
- name: sentiment_analysis
  endpoint:
    path: /sentiment
    method: GET
    data_selector: sentiment
- name: similar_terms
  endpoint:
    path: /semantics/similar
    method: GET
- name: semantic_vectors
  endpoint:
    path: /semantics/vector
    method: GET
- name: entities
  endpoint:
    path: /entities
    method: GET
- name: morphology
  endpoint:
    path: /morphology/{morphoFeature}
    method: GET
- name: name_similarity
  endpoint:
    path: /name-similarity
    method: GET
- name: entity_extraction_and_linking
  endpoint:
    path: /entities
    method: GET
- name: morphological_analysis
  endpoint:
    path: /morphology/{morphoFeature}
    method: GET
- name: name_similarity
  endpoint:
    path: /name-similarity
    method: GET
- name: topic_extraction
  endpoint:
    path: /topic-extraction
    method: POST
- name: name_deduplication
  endpoint:
    path: /name-deduplication
    method: POST
- name: sentiment_analysis
  endpoint:
    path: /sentiment
    method: POST
- name: entity_extraction
  endpoint:
    path: /entities
    method: POST
- name: relationship_extraction
  endpoint:
    path: /relationships
    method: POST
- name: transliteration
  endpoint:
    path: /transliteration
    method: POST
- name: entities
  endpoint:
    path: /entities
    method: GET
- name: events
  endpoint:
    path: /events
    method: GET
- name: morphology
  endpoint:
    path: /morphology/{morphoFeature}
    method: GET
- name: name-similarity
  endpoint:
    path: /name-similarity
    method: GET
- name: name-translation
  endpoint:
    path: /name-translation
    method: GET
- name: record-similarity
  endpoint:
    path: /record-similarity
    method: GET
- name: relationships
  endpoint:
    path: /relationships
    method: GET
- name: sentiment
  endpoint:
    path: /sentiment
    method: GET
- name: tokens
  endpoint:
    path: /tokens
    method: GET
- name: topics
  endpoint:
    path: /topics
    method: GET
- name: Adaptation Studio
  endpoint:
    path: /adaptation/studio
    method: GET
    data_selector: data
    params: {}
- name: Events Training Server
  endpoint:
    path: /events/training/server
    method: GET
    data_selector: data
    params: {}
- name: REX Training Server
  endpoint:
    path: /rex/training/server
    method: GET
    data_selector: data
    params: {}
- name: Rosette Server
  endpoint:
    path: /rosette/server
    method: GET
    data_selector: data
    params: {}
- name: address_similarity
  endpoint:
    path: /address-similarity
    method: GET
- name: entities
  endpoint:
    path: /entities
    method: GET
- name: events
  endpoint:
    path: /events
    method: GET
- name: morphology
  endpoint:
    path: /morphology/{morphoFeature}
    method: GET
- name: name_similarity
  endpoint:
    path: /name-similarity
    method: GET
- name: name_translation
  endpoint:
    path: /name-translation
    method: GET
- name: record_similarity
  endpoint:
    path: /record-similarity
    method: GET
- name: semantics
  endpoint:
    path: /semantics/{semanticsFeature}
    method: GET
- name: sentences
  endpoint:
    path: /sentences
    method: GET
- name: tokens
  endpoint:
    path: /tokens
    method: GET
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: address_similarity
  endpoint:
    path: /address-similarity
    method: GET
- name: entities
  endpoint:
    path: /entities
    method: GET
- name: morphology
  endpoint:
    path: /morphology/{morphoFeature}
    method: GET
- name: name_similarity
  endpoint:
    path: /name-similarity
    method: GET
- name: name_translation
  endpoint:
    path: /name-translation
    method: GET
- name: tokens
  endpoint:
    path: /tokens
    method: GET
- name: entity_extraction
  endpoint:
    path: /entities
    method: GET
    data_selector: entities
- name: event_extraction
  endpoint:
    path: /events
    method: GET
    data_selector: events
- name: info
  endpoint:
    path: /info
    method: GET
    data_selector: info
- name: name_similarity
  endpoint:
    path: /name-similarity
    method: GET
    data_selector: similarity
- name: name_translation
  endpoint:
    path: /nametranslation
    method: GET
    data_selector: translation
- name: ping
  endpoint:
    path: /ping
    method: GET
    data_selector: ping
- name: events
  endpoint:
    path: /events
    method: GET
- name: morphology
  endpoint:
    path: /morphology/{morphoFeature}
    method: GET
- name: name_similarity
  endpoint:
    path: /name-similarity
    method: GET
- name: name_translation
  endpoint:
    path: /name-translation
    method: GET
- name: record_similarity
  endpoint:
    path: /record-similarity
    method: GET
- name: relationship_extraction
  endpoint:
    path: /relationships
    method: GET
- name: sentiment_analysis
  endpoint:
    path: /sentiment
    method: GET
- name: tokenization
  endpoint:
    path: /tokens
    method: GET
- name: topic_extraction
  endpoint:
    path: /topics
    method: GET
- name: morphological_analysis
  endpoint:
    path: /morphology/{morphoFeature}
    method: GET
- name: name_similarity
  endpoint:
    path: /name-similarity
    method: GET
- name: name_translation
  endpoint:
    path: /name-translation
    method: GET
- name: semantic_similarity
  endpoint:
    path: /semantics/{semanticsFeature}
    method: GET
- name: entity_extraction_and_linking
  endpoint:
    path: /entities
    method: GET
- name: address_similarity
  endpoint:
    path: /address-similarity
    method: GET
- name: Adaptation Studio
  endpoint:
    path: /adaptation_studio
    method: GET
    data_selector: versions
    params: {}
- name: Events Training Server
  endpoint:
    path: /events_training_server
    method: GET
    data_selector: versions
    params: {}
- name: REX Training Server
  endpoint:
    path: /rex_training_server
    method: GET
    data_selector: versions
    params: {}
- name: Rosette Server
  endpoint:
    path: /rosette_server
    method: GET
    data_selector: versions
    params: {}
- name: entities
  endpoint:
    path: /entities
    method: GET
- name: morphology
  endpoint:
    path: /morphology/{morphoFeature}
    method: GET
- name: tokens
  endpoint:
    path: /tokens
    method: GET
- name: name-similarity
  endpoint:
    path: /name-similarity
    method: GET
- name: sentences
  endpoint:
    path: /sentences
    method: GET
- name: address_similarity
  endpoint:
    path: /address-similarity
    method: GET
- name: entities
  endpoint:
    path: /entities
    method: GET
- name: morphology
  endpoint:
    path: /morphology/{morphoFeature}
    method: GET
- name: name_similarity
  endpoint:
    path: /name-similarity
    method: GET
- name: name_translation
  endpoint:
    path: /name-translation
    method: GET
- name: entity_extraction_and_linking
  endpoint:
    path: /entities
    method: GET
- name: language_identification
  endpoint:
    path: /language
    method: GET
- name: morphological_analysis
  endpoint:
    path: /morphology/{morphoFeature}
    method: GET
- name: name_similarity
  endpoint:
    path: /name-similarity
    method: GET
- name: semantic_vectors
  endpoint:
    path: /semantics/vector
    method: GET
- name: categorization
  endpoint:
    path: /categories
    method: GET
- name: sentiment_analysis
  endpoint:
    path: /sentiment
    method: GET
- name: similar_terms
  endpoint:
    path: /semantics/similar
    method: GET
- name: semantic_vectors
  endpoint:
    path: /semantics/vector
    method: GET
- name: entities
  endpoint:
    path: /entities
    method: GET
- name: morphology
  endpoint:
    path: /morphology/{morphoFeature}
    method: GET
- name: name_similarity
  endpoint:
    path: /name-similarity
    method: GET
- name: entity_extraction
  endpoint:
    path: /entities
    method: POST
    data_selector: entities
    params: {}
- name: morphological_analysis
  endpoint:
    path: /morphology/{morphoFeature}
    method: GET
    data_selector: results
    params: {}
- name: name_similarity
  endpoint:
    path: /name-similarity
    method: POST
    data_selector: similarity
    params: {}
- name: MatchStudioUser
  endpoint:
    path: /_plugins/_security/api/internalusers/MatchStudioUser
    method: PUT
    data_selector: user
    params: {}
- name: MatchStudioRole
  endpoint:
    path: /_plugins/_security/api/roles/MatchStudioRole
    method: PUT
    data_selector: role
    params: {}
- name: rolesmapping
  endpoint:
    path: /_plugins/_security/api/rolesmapping/MatchStudioRole
    method: PUT
    data_selector: mapping
    params: {}
- name: topic_extraction
  endpoint:
    path: /topic-extraction
    method: POST
    data_selector: keyphrases
    params: {}
- name: name_deduplication
  endpoint:
    path: /name-deduplication
    method: POST
    data_selector: clusters
    params: {}
- name: sentiment_analysis
  endpoint:
    path: /sentiment
    method: POST
    data_selector: sentiment
    params: {}
- name: entity_extraction
  endpoint:
    path: /entities
    method: POST
    data_selector: entities
    params: {}
- name: relationship_extraction
  endpoint:
    path: /relationships
    method: POST
    data_selector: relationships
    params: {}
- name: transliteration
  endpoint:
    path: /transliteration
    method: POST
    data_selector: transliteration
    params: {}
- name: MatchStudioUser
  endpoint:
    path: /_plugins/_security/api/internalusers/MatchStudioUser
    method: PUT
- name: MatchStudioRole
  endpoint:
    path: /_plugins/_security/api/roles/MatchStudioRole
    method: PUT
- name: rolesmapping
  endpoint:
    path: /_plugins/_security/api/rolesmapping/MatchStudioRole
    method: PUT
- name: entity_extraction
  endpoint:
    path: /entities
    method: GET
    data_selector: records
- name: morphological_analysis
  endpoint:
    path: /morphology/{morphoFeature}
    method: GET
    data_selector: records
- name: name_similarity
  endpoint:
    path: /name-similarity
    method: GET
    data_selector: records
- name: name_translation
  endpoint:
    path: /name-translation
    method: GET
    data_selector: records
- name: record_similarity
  endpoint:
    path: /record-similarity
    method: GET
    data_selector: records
- name: tokenization
  endpoint:
    path: /tokens
    method: GET
    data_selector: records
- name: entity_extraction_and_linking
  endpoint:
    path: /entities
    method: GET
- name: language_identification
  endpoint:
    path: /language
    method: GET
- name: morphological_analysis
  endpoint:
    path: /morphology/{morphoFeature}
    method: GET
- name: name_similarity
  endpoint:
    path: /name-similarity
    method: GET
- name: name_translation
  endpoint:
    path: /name-translation
    method: GET
- name: record_similarity
  endpoint:
    path: /record-similarity
    method: GET
- name: semantic_similarity
  endpoint:
    path: /semantics/{semanticsFeature}
    method: GET
- name: sentences
  endpoint:
    path: /sentences
    method: GET
- name: tokens
  endpoint:
    path: /tokens
    method: GET
- name: address_similarity
  endpoint:
    path: /address-similarity
    method: GET
- name: event_extractor
  endpoint:
    path: /events
    method: GET
- name: entity_extraction_and_linking
  endpoint:
    path: /entities
    method: GET
    data_selector: entities
- name: language_identification
  endpoint:
    path: /language
    method: GET
    data_selector: languages
- name: morphological_analysis
  endpoint:
    path: /morphology/{morphoFeature}
    method: GET
    data_selector: analysis
- name: name_similarity
  endpoint:
    path: /name-similarity
    method: GET
    data_selector: similarity
- name: semantic_vectors
  endpoint:
    path: /semantics/vector
    method: GET
    data_selector: vectors
- name: morphological_analysis
  endpoint:
    path: /morphology/{morphoFeature}
    method: GET
- name: name_similarity
  endpoint:
    path: /name-similarity
    method: GET
- name: name_translation
  endpoint:
    path: /name-translation
    method: GET
- name: tokenization
  endpoint:
    path: /tokens
    method: GET
- name: address_similarity
  endpoint:
    path: /address-similarity
    method: GET
- name: entity_extraction_and_linking
  endpoint:
    path: /entities
    method: GET
- name: sentence_tagging
  endpoint:
    path: /sentences
    method: GET
- name: semantic_similarity
  endpoint:
    path: /semantics/{semanticsFeature}
    method: GET
- name: address_similarity
  endpoint:
    path: /address-similarity
    method: GET
    data_selector: results
- name: entity_extraction
  endpoint:
    path: /entities
    method: GET
    data_selector: results
- name: morphology
  endpoint:
    path: /morphology
    method: GET
    data_selector: results
- name: name_similarity
  endpoint:
    path: /name-similarity
    method: GET
    data_selector: results
- name: name_translation
  endpoint:
    path: /name-translation
    method: GET
    data_selector: results
- name: tokenization
  endpoint:
    path: /tokens
    method: GET
    data_selector: results
- name: address_similarity
  endpoint:
    path: /address-similarity
    method: GET
- name: entity_extraction
  endpoint:
    path: /entities
    method: GET
- name: morphological_analysis
  endpoint:
    path: /morphology/{morphoFeature}
    method: GET
- name: name_deduplication
  endpoint:
    path: /name-deduplication
    method: GET
- name: name_similarity
  endpoint:
    path: /name-similarity
    method: GET
- name: name_translation
  endpoint:
    path: /name-translation
    method: GET
- name: language_identification
  endpoint:
    path: /language
    method: GET
- name: pair_match
  endpoint:
    path: /rni_plugin/_pair_match
    method: POST
    data_selector: score
    params: {}
- name: pair_match
  endpoint:
    path: /rni_plugin/_pair_match
    method: POST
    data_selector: score
    params: {}
- name: pair_match
  endpoint:
    path: /rni_plugin/_pair_match
    method: POST
    data_selector: ''
    params: {}
- name: address_similarity
  endpoint:
    path: /address-similarity
    method: POST
    data_selector: results
- name: entity_extraction
  endpoint:
    path: /entities
    method: POST
    data_selector: results
- name: name_similarity
  endpoint:
    path: /name-similarity
    method: POST
    data_selector: results
- name: morphology
  endpoint:
    path: /morphology/{morphoFeature}
    method: GET
    data_selector: results
- name: name_translation
  endpoint:
    path: /name-translation
    method: POST
    data_selector: results
- name: semantic_similarity
  endpoint:
    path: /semantics/{semanticsFeature}
    method: GET
    data_selector: results
- name: address_similarity
  endpoint:
    path: /address-similarity
    method: GET
    data_selector: records
- name: entity_extraction
  endpoint:
    path: /entities
    method: GET
    data_selector: records
- name: morphological_analysis
  endpoint:
    path: /morphology/{morphoFeature}
    method: GET
    data_selector: records
- name: name_similarity
  endpoint:
    path: /name-similarity
    method: GET
    data_selector: records
- name: tokens
  endpoint:
    path: /tokens
    method: GET
    data_selector: records
- name: supported_languages
  endpoint:
    path: /supported-languages
    method: GET
    data_selector: records
- name: pair_match
  endpoint:
    path: /rni_plugin/_pair_match
    method: POST
    data_selector: score
    params: {}
- name: entity_extraction_and_linking
  endpoint:
    path: /entities
    method: GET
    data_selector: records
    params: {}
- name: language_identification
  endpoint:
    path: /language
    method: GET
    data_selector: records
    params: {}
- name: morphological_analysis
  endpoint:
    path: /morphology/{morphoFeature}
    method: GET
    data_selector: records
    params: {}
- name: name_similarity
  endpoint:
    path: /name-similarity
    method: GET
    data_selector: records
    params: {}
- name: categorization
  endpoint:
    path: /categories
    method: GET
    data_selector: records
    params: {}
- name: sentiment_analysis
  endpoint:
    path: /sentiment
    method: GET
    data_selector: records
    params: {}
- name: semantic_similarity
  endpoint:
    path: /semantics/vector
    method: GET
    data_selector: records
    params: {}
- name: pair_match
  endpoint:
    path: /rni_plugin/_pair_match
    method: POST
    data_selector: score
    params: {}
- name: semantic_similarity
  endpoint:
    path: /semantics/similar
    method: GET
- name: semantic_vectors
  endpoint:
    path: /semantics/vector
    method: GET
- name: entity_extraction
  endpoint:
    path: /entities
    method: GET
- name: morphological_analysis
  endpoint:
    path: /morphology/{morphoFeature}
    method: GET
- name: name_similarity
  endpoint:
    path: /name-similarity
    method: GET
- name: pair_match
  endpoint:
    path: /rni_plugin/_pair_match
    method: POST
    data_selector: score
    params: {}
- name: entity_extraction
  endpoint:
    path: /entities
    method: GET
    data_selector: records
- name: morphological_analysis
  endpoint:
    path: /morphology/{morphoFeature}
    method: GET
    data_selector: records
- name: name_similarity
  endpoint:
    path: /name-similarity
    method: GET
    data_selector: records
- name: pair_match
  endpoint:
    path: /rni_plugin/_pair_match
    method: POST
    data_selector: score
    params: {}
- name: pair_match
  endpoint:
    path: /rni_plugin/_pair_match
    method: POST
    data_selector: score
    params: {}
- name: pair_match
  endpoint:
    path: /rni_plugin/_pair_match
    method: POST
    data_selector: score
    params: {}
- name: topic_extraction
  endpoint:
    path: /topic/extraction
    method: POST
    data_selector: results
- name: name_deduplication
  endpoint:
    path: /name/deduplication
    method: POST
    data_selector: results
- name: rni-test
  endpoint:
    path: /rni-test/_mapping
    method: PUT
    data_selector: properties
- name: rni-test-doc
  endpoint:
    path: /rni-test/_doc/1
    method: PUT
    data_selector: _source
- name: rni-test-search
  endpoint:
    path: /rni-test/_search
    method: GET
    data_selector: hits
- name: entity_extraction
  endpoint:
    path: /entities
    method: GET
- name: event_extraction
  endpoint:
    path: /events
    method: GET
- name: info
  endpoint:
    path: /info
    method: GET
- name: name_similarity
  endpoint:
    path: /name-similarity
    method: GET
- name: name_translation
  endpoint:
    path: /nametranslation
    method: GET
- name: ping
  endpoint:
    path: /ping
    method: GET
- name: event_extractor
  endpoint:
    path: /events
    method: GET
- name: morphological_analysis
  endpoint:
    path: /morphology/{morphoFeature}
    method: GET
- name: name_similarity
  endpoint:
    path: /name-similarity
    method: GET
- name: name_translation
  endpoint:
    path: /name-translation
    method: GET
- name: pair_match
  endpoint:
    path: /rni_plugin/_pair_match
    method: POST
    data_selector: score
    params:
      type: rni_date
- name: pair_match
  endpoint:
    path: /rni_plugin/_pair_match
    method: POST
    data_selector: score
    params: {}
- name: record_similarity
  endpoint:
    path: /record-similarity
    method: POST
- name: relationship_extractor
  endpoint:
    path: /relationships
    method: POST
- name: sentiment_analyzer
  endpoint:
    path: /sentiment
    method: POST
- name: tokenizer
  endpoint:
    path: /tokens
    method: POST
- name: topic_extractor
  endpoint:
    path: /topics
    method: POST
- name: Adaptation Studio
  endpoint:
    path: /adaptation_studio
    method: GET
    data_selector: records
- name: Events Training Server
  endpoint:
    path: /events_training_server
    method: GET
    data_selector: records
- name: REX Training Server
  endpoint:
    path: /rex_training_server
    method: GET
    data_selector: records
- name: Rosette Server
  endpoint:
    path: /rosette_server
    method: GET
    data_selector: records
- name: pairwise_match
  endpoint:
    path: /_pair_match
    method: POST
    data_selector: results
- name: pair_match
  endpoint:
    path: /rni_plugin/_pair_match
    method: POST
    data_selector: score
    params: {}
- name: name_frequency
  endpoint:
    path: /rni_plugin/name_frequency
    method: GET
    data_selector: frequency
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: Evaluate
  endpoint:
    path: /evaluate
    method: POST
    data_selector: evaluation_results
    params: {}
- name: deduplication_report
  endpoint:
    path: /deduplication_report
    method: GET
    data_selector: records
- name: deduplication_statistics
  endpoint:
    path: /deduplication_statistics
    method: GET
    data_selector: totalDuplicateClusters
- name: entities
  endpoint:
    path: /entities
    method: POST
    data_selector: results
- name: entity_types
  endpoint:
    path: /entity/types
    method: GET
    data_selector: entity_types
- name: entity_extraction
  endpoint:
    path: /entities
    method: POST
    data_selector: entities
- name: labelScoreThresholds
  endpoint:
    path: /labelScoreThresholds
    method: GET
    data_selector: thresholds
    params: {}
- name: entities
  endpoint:
    path: /entities
    method: GET
    data_selector: records
- name: events
  endpoint:
    path: /events
    method: GET
    data_selector: records
- name: entities
  endpoint:
    path: /entities
    method: POST
    data_selector: results
- name: entities
  endpoint:
    path: /entities
    method: GET
    data_selector: records
- name: modelType
  endpoint:
    path: /entity-extractor/modelType
    method: POST
    data_selector: content
    params: {}
- name: nameClassifier
  endpoint:
    path: /entity-extractor/nameClassifier
    method: POST
    data_selector: content
    params: {}
- name: entities
  endpoint:
    path: /entities/configuration/gazetteer/add
    method: POST
    data_selector: configuration
    params: {}
- name: pair_match
  endpoint:
    path: /rni_plugin/_pair_match
    method: POST
    data_selector: score
    params: {}
- name: event_extraction
  endpoint:
    path: /api/event_extraction
    method: GET
    data_selector: data
    params: {}
- name: pair_match
  endpoint:
    path: /rni_plugin/_pair_match
    method: POST
    data_selector: score
    params: {}
- name: pair_match
  endpoint:
    path: /rni_plugin/_pair_match
    method: POST
    data_selector: score
    params: {}
- name: entities
  endpoint:
    path: /entities
    method: GET
    data_selector: entities
    params: {}
- name: pair_match
  endpoint:
    path: /rni_plugin/_pair_match
    method: POST
    data_selector: score
    params: {}
- name: gazetteer
  endpoint:
    path: /data/gazetteer
    method: GET
- name: add_entity_gazetteer
  endpoint:
    path: /rest/v1/entities/configuration/gazetteer/add
    method: POST
    data_selector: configuration.entities
    params: {}
- name: pair_match
  endpoint:
    path: /rni_plugin/_pair_match
    method: POST
    data_selector: score
- name: pair_match
  endpoint:
    path: /rni_plugin/_pair_match
    method: POST
    data_selector: score
    params: {}
- name: activity
  endpoint:
    path: /activities
    method: GET
    data_selector: records
    params: {}
- name: anatomy
  endpoint:
    path: /anatomy
    method: GET
    data_selector: records
    params: {}
- name: disease
  endpoint:
    path: /diseases
    method: GET
    data_selector: records
    params: {}
- name: event
  endpoint:
    path: /events
    method: GET
    data_selector: records
    params: {}
- name: food
  endpoint:
    path: /foods
    method: GET
    data_selector: records
    params: {}
- name: identifier
  endpoint:
    path: /identifiers
    method: GET
    data_selector: records
    params: {}
- name: language
  endpoint:
    path: /languages
    method: GET
    data_selector: records
    params: {}
- name: location
  endpoint:
    path: /locations
    method: GET
    data_selector: records
    params: {}
- name: measure
  endpoint:
    path: /measures
    method: GET
    data_selector: records
    params: {}
- name: misc
  endpoint:
    path: /misc
    method: GET
    data_selector: records
    params: {}
- name: WrittenWorkAnnotation
  endpoint:
    path: /WrittenWork/Annotation
    method: GET
- name: WrittenWorkReference
  endpoint:
    path: /Work/WrittenWork/Annotation/Reference
    method: GET
- name: WrittenWorkLaw
  endpoint:
    path: /Work/WrittenWork/Law
    method: GET
- name: WrittenWorkLetter
  endpoint:
    path: /Work/WrittenWork/Letter
    method: GET
- name: WrittenWorkQuote
  endpoint:
    path: /Work/WrittenWork/Quote
    method: GET
- name: WrittenWorkResume
  endpoint:
    path: /Work/WrittenWork/Resume
    method: GET
- name: WrittenWorkStatedResolution
  endpoint:
    path: /Work/WrittenWork/StatedResolution
    method: GET
- name: WrittenWorkTreaty
  endpoint:
    path: /Work/WrittenWork/Treaty
    method: GET
- name: Document
  endpoint:
    path: /Work/Document
    method: GET
- name: Image
  endpoint:
    path: /MISC/Image
    method: GET
- name: SpatialThing
  endpoint:
    path: /MISC/SpatialThing
    method: GET
- name: Feature
  endpoint:
    path: /MISC/_Feature
    method: GET
- name: Property
  endpoint:
    path: /MISC/Property
    method: GET
- name: Concept
  endpoint:
    path: /MISC/Concept
    method: GET
- name: OrderedCollection
  endpoint:
    path: /MISC/OrderedCollection
    method: GET
- name: pair_match_date
  endpoint:
    path: /rni_plugin/_pair_match?type=rni_date
    method: POST
    data_selector: score
    params: {}
- name: pair_match_text
  endpoint:
    path: /rni_plugin/_pair_match?type=text
    method: POST
    data_selector: score
    params: {}
- name: pair_match_name
  endpoint:
    path: /rni_plugin/_pair_match?type=rni_name
    method: POST
    data_selector: score
    params: {}
- name: pair_match_address
  endpoint:
    path: /rni_plugin/_pair_match?type=rni_address
    method: POST
    data_selector: score
    params: {}
- name: pair_match
  endpoint:
    path: /rni_plugin/_pair_match
    method: POST
    data_selector: score
    params: {}
- name: species
  endpoint:
    path: /species
    method: GET
    data_selector: records
- name: substance
  endpoint:
    path: /substance
    method: GET
    data_selector: records
- name: title
  endpoint:
    path: /title
    method: GET
    data_selector: records
- name: transport
  endpoint:
    path: /transport
    method: GET
    data_selector: records
- name: pair_match
  endpoint:
    path: /rni_plugin/_pair_match
    method: POST
    data_selector: score
    params: {}
- name: events
  endpoint:
    path: /api/events
    method: GET
    data_selector: data
    params:
      incremental: updated_at
- name: documents
  endpoint:
    path: /_doc
    method: PUT
    data_selector: properties
- name: search
  endpoint:
    path: /_search
    method: GET
    data_selector: query
- name: event_extraction
  endpoint:
    path: /services/data/vXX.X/sobjects/EventExtraction
    method: GET
    data_selector: records
    params: {}
- name: leftInput
  endpoint:
    path: /leftInput
    method: GET
    data_selector: fieldInputInfos
- name: rightInput
  endpoint:
    path: /rightInput
    method: GET
    data_selector: fieldInputInfos
- name: scoreTuples
  endpoint:
    path: /scoreTuples
    method: GET
    data_selector: scoreTuples
- name: scoreAdjustments
  endpoint:
    path: /scoreAdjustments
    method: GET
    data_selector: scoreAdjustments
- name: finalScore
  endpoint:
    path: /finalScore
    method: GET
    data_selector: finalScore
- name: entities
  endpoint:
    path: /entities
    method: POST
    data_selector: entities
- name: events
  endpoint:
    path: /events
    method: POST
    data_selector: events
- name: language
  endpoint:
    path: /language
    method: GET
    data_selector: language
- name: morphology
  endpoint:
    path: /morphology
    method: GET
    data_selector: morphology
- name: semantics
  endpoint:
    path: /semantics
    method: GET
    data_selector: semantics
- name: sentences
  endpoint:
    path: /sentences
    method: GET
    data_selector: sentences
- name: tokens
  endpoint:
    path: /tokens
    method: GET
    data_selector: tokens
- name: info
  endpoint:
    path: /info
    method: GET
    data_selector: info
- name: ping
  endpoint:
    path: /ping
    method: GET
    data_selector: ping
- name: pair_match
  endpoint:
    path: /rni_plugin/_pair_match
    method: POST
    data_selector: score
    params: {}
- name: pair_match
  endpoint:
    path: /rni_plugin/_pair_match
    method: POST
    data_selector: score
    params: {}
- name: custom-profiles
  endpoint:
    path: /custom-profiles
    method: GET
- name: entities
  endpoint:
    path: /entities
    method: POST
- name: pairwise_match
  endpoint:
    path: /_pair_match
    method: POST
    data_selector: results
- name: usage
  endpoint:
    path: /rest/usage
    method: GET
    data_selector: ''
    params: {}
- name: metrics
  endpoint:
    path: /rest/metrics
    method: GET
    data_selector: ''
    params: {}
- name: pair_match
  endpoint:
    path: /_pair_match
    method: POST
    data_selector: score
    params: {}
- name: match_sentences
  endpoint:
    path: /rest/v1/match-sentences
    method: GET
    data_selector: records
    params: {}
- name: entities
  endpoint:
    path: /entities
    method: GET
    data_selector: records
    params: {}
- name: name_frequency
  endpoint:
    path: /rni_plugin/name_frequency
    method: GET
    data_selector: frequency
- name: dynamic_gazetteer
  endpoint:
    path: /configuration/gazetteer/add
    method: POST
    data_selector: configuration.entities
- name: entities
  endpoint:
    path: /entities
    method: POST
    data_selector: entities
- name: events
  endpoint:
    path: /events
    method: POST
    data_selector: events
- name: language
  endpoint:
    path: /language
    method: GET
    data_selector: language
- name: morphology
  endpoint:
    path: /morphology
    method: GET
    data_selector: morphology
- name: semantics
  endpoint:
    path: /semantics
    method: GET
    data_selector: semantics
- name: sentences
  endpoint:
    path: /sentences
    method: GET
    data_selector: sentences
- name: tokens
  endpoint:
    path: /tokens
    method: GET
    data_selector: tokens
- name: info
  endpoint:
    path: /info
    method: GET
    data_selector: info
- name: ping
  endpoint:
    path: /ping
    method: GET
    data_selector: ping
- name: health_check
  endpoint:
    path: /rest/v1/health/services
    method: GET
    data_selector: .
    params: {}
- name: pairwise_match
  endpoint:
    path: /pairwise/match
    method: POST
    data_selector: results
- name: record_similarity
  endpoint:
    path: /record/similarity
    method: POST
    data_selector: similarityResults
- name: custom-profiles
  endpoint:
    path: /custom-profiles
    method: GET
    data_selector: ''
- name: entities
  endpoint:
    path: /entities
    method: POST
    data_selector: ''
- name: usage
  endpoint:
    path: /rest/usage
    method: GET
- name: metrics
  endpoint:
    path: /rest/metrics
    method: GET
- name: deduplication_report
  endpoint:
    path: /deduplication_report_<timestamp>.jsonl
    method: GET
    data_selector: records
- name: deduplication_statistics
  endpoint:
    path: /deduplication_statistics_<timestamp>.json
    method: GET
    data_selector: totalDuplicateClusters
- name: match_sentences
  endpoint:
    path: /rest/v1/match-sentences
    method: GET
- name: python_example
  endpoint:
    path: /rest/v1/python_example
    method: GET
- name: event_extraction
  endpoint:
    path: /required-endpoints
    method: GET
- name: entity_extractor
  endpoint:
    path: /configuring-the-entity-extractor
    method: GET
- name: add_gazetteer_entry
  endpoint:
    path: /configuration/gazetteer/add
    method: POST
    data_selector: entities
    params: {}
- name: entities
  endpoint:
    path: /entities
    method: POST
- name: Linker Configuration Parameters
  endpoint:
    params:
      kbs: Custom list of Knowledge Bases for the linker, in order of priority
      linkEntities: The option to link mentions to knowledge base entities with disambiguation
        model. Enabling this option also enables calculateConfidence.
      calculateConfidence: If true, entity confidence values are calculated.
      useDefaultConfidence: The option to assign default confidence value 1.0 to non-statistical
        entities instead of null.
      linkingConfidenceThreshold: The confidence value threshold below which linking
        results by the kbLinker processor are ignored.
      linkMentionMode: If set to entities, the linker processor uses the statistical,
        pattern-matching, and exact-matching processors.
- name: language
  endpoint:
    path: /language
    method: GET
    data_selector: ''
    params:
      shortStringThreshold: 20
- name: entities
  endpoint:
    path: /entities
    method: GET
    data_selector: entities
    params: {}
- name: Pattern Matching Processor
  endpoint:
    path: /entity-extractor.html#accept-regex
    method: GET
- name: event_extraction
  endpoint:
    path: /services/data/vXX.X/sobjects/EventExtraction
    method: GET
    data_selector: records
    params: {}
- name: entities
  endpoint:
    path: /entities
    method: POST
    data_selector: entities
- name: events
  endpoint:
    path: /events
    method: POST
    data_selector: events
- name: language
  endpoint:
    path: /language
    method: GET
    data_selector: language
- name: morphology
  endpoint:
    path: /morphology
    method: GET
    data_selector: morphology
- name: semantics
  endpoint:
    path: /semantics
    method: GET
    data_selector: semantics
- name: sentences
  endpoint:
    path: /sentences
    method: GET
    data_selector: sentences
- name: tokens
  endpoint:
    path: /tokens
    method: GET
    data_selector: tokens
- name: info
  endpoint:
    path: /info
    method: GET
    data_selector: info
- name: ping
  endpoint:
    path: /ping
    method: GET
    data_selector: ping
- name: entities
  endpoint:
    path: /entities
    method: POST
    data_selector: entities
    params: {}
- name: health_check
  endpoint:
    path: /rest/v1/health/services
    method: GET
    data_selector: .
    params: {}
- name: logs
  endpoint:
    path: /logs/
    method: GET
    data_selector: .
    params: {}
- name: entities
  endpoint:
    path: /entities
    method: GET
    data_selector: entities
- name: name_classifier
  endpoint:
    path: /data/name_classifier
    method: GET
    data_selector: languages
    params: {}
- name: custom-profiles
  endpoint:
    path: /custom-profiles
    method: GET
- name: entities
  endpoint:
    path: /entities/configuration/gazetteer/add
    method: POST
    data_selector: configuration.entities
    params: {}
- name: usage
  endpoint:
    path: /rest/usage
    method: GET
- name: metrics
  endpoint:
    path: /rest/metrics
    method: GET
- name: tokens
  endpoint:
    path: /rest/v1/tokens
    method: POST
- name: categories
  endpoint:
    path: /rest/v1/categories
    method: GET
- name: language
  endpoint:
    path: /rest/v1/language
    method: GET
- name: match_sentences
  endpoint:
    path: /rest/v1/match-sentences
    method: GET
    data_selector: records
    params: {}
- name: python_example
  endpoint:
    path: /rest/v1/python_example
    method: GET
    data_selector: records
    params: {}
- name: entities
  endpoint:
    path: /entities
    method: GET
    data_selector: entities
- name: dynamic_gazetteer
  endpoint:
    path: /entities/configuration/gazetteer/add
    method: POST
    data_selector: configuration.entities
    params: {}
- name: name_classifier
  endpoint:
    path: /data/name_classifier/<lang>/<lang>_config.yaml
    method: GET
    data_selector: labelScoreThresholds
- name: gazetteer
  endpoint:
    path: /data/gazetteer/<lang>/accept
    method: GET
    data_selector: gazetteer_entries
- name: language
  endpoint:
    path: /language
    method: GET
    data_selector: ''
    params:
      shortStringThreshold: 20
- name: sentiment
  endpoint:
    path: /sentiment
    method: GET
    data_selector: ''
    params:
      lang: ara|eng|fas|fra|jpn|spa
- name: categories
  endpoint:
    path: /categories
    method: GET
    data_selector: ''
    params:
      lang: eng
- name: linker_configuration_parameters
  endpoint:
    path: /linker/configuration
    method: GET
    data_selector: parameters
    params: {}
- name: activity
  endpoint:
    path: /activity
    method: GET
    data_selector: Entity type
- name: anatomy
  endpoint:
    path: /anatomy
    method: GET
    data_selector: Entity type
- name: disease
  endpoint:
    path: /disease
    method: GET
    data_selector: Entity type
- name: event
  endpoint:
    path: /event
    method: GET
    data_selector: Entity type
- name: food
  endpoint:
    path: /food
    method: GET
    data_selector: Entity type
- name: identifier
  endpoint:
    path: /identifier
    method: GET
    data_selector: Entity type
- name: language
  endpoint:
    path: /language
    method: GET
    data_selector: Entity type
- name: location
  endpoint:
    path: /location
    method: GET
    data_selector: Entity type
- name: measure
  endpoint:
    path: /measure
    method: GET
    data_selector: Entity type
- name: misc
  endpoint:
    path: /misc
    method: GET
    data_selector: Entity type
- name: entities
  endpoint:
    path: /entities
    method: POST
    data_selector: entities
- name: events
  endpoint:
    path: /events
    method: GET
    data_selector: events
- name: language
  endpoint:
    path: /language
    method: GET
    data_selector: language
- name: morphology
  endpoint:
    path: /morphology
    method: GET
    data_selector: morphology
- name: semantics
  endpoint:
    path: /semantics
    method: GET
    data_selector: semantics
- name: sentences
  endpoint:
    path: /sentences
    method: GET
    data_selector: sentences
- name: tokens
  endpoint:
    path: /tokens
    method: GET
    data_selector: tokens
- name: info
  endpoint:
    path: /info
    method: GET
    data_selector: info
- name: ping
  endpoint:
    path: /ping
    method: GET
    data_selector: ping
- name: WrittenWork
  endpoint:
    path: /WrittenWork
    method: GET
    data_selector: records
- name: MISC
  endpoint:
    path: /MISC
    method: GET
    data_selector: records
- name: MONEY
  endpoint:
    path: /MONEY
    method: GET
    data_selector: records
- name: ORGANIZATION
  endpoint:
    path: /ORGANIZATION
    method: GET
    data_selector: records
- name: PERSON
  endpoint:
    path: /PERSON
    method: GET
    data_selector: records
- name: PRODUCT
  endpoint:
    path: /PRODUCT
    method: GET
    data_selector: records
- name: SPECIES
  endpoint:
    path: /SPECIES
    method: GET
    data_selector: records
- name: species
  endpoint:
    path: /species
    method: GET
    data_selector: records
- name: substance
  endpoint:
    path: /substance
    method: GET
    data_selector: records
- name: title
  endpoint:
    path: /title
    method: GET
    data_selector: records
- name: transport
  endpoint:
    path: /transport
    method: GET
    data_selector: records
- name: custom-profiles
  endpoint:
    path: /custom-profiles
    method: GET
    data_selector: profiles
- name: entities
  endpoint:
    path: /entities
    method: POST
    data_selector: entities
- name: usage
  endpoint:
    path: /rest/usage
    method: GET
    data_selector: calls
- name: metrics
  endpoint:
    path: /rest/metrics
    method: GET
    data_selector: rosette_http_requests_total
- name: match_sentences
  endpoint:
    path: /rest/v1/match-sentences
    method: POST
    data_selector: response
- name: info
  endpoint:
    path: /info
    method: GET
    data_selector: app
- name: health
  endpoint:
    path: /health
    method: GET
    data_selector: status
- name: match_sentences
  endpoint:
    path: /rest/v1/match-sentences/**
    method: GET
    data_selector: records
- name: python_example
  endpoint:
    path: /rest/v1/python_example
    method: GET
    data_selector: records
- name: add_gazetteer_entry
  endpoint:
    path: /rest/v1/entities/configuration/gazetteer/add
    method: POST
    data_selector: null
    params: {}
- name: event_extraction
  endpoint:
    path: /services/data/vXX.X/event_extraction
    method: GET
    data_selector: records
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: entities
  endpoint:
    path: /entities
    method: POST
    data_selector: entities
- name: events
  endpoint:
    path: /events
    method: GET
    data_selector: events
- name: language
  endpoint:
    path: /language
    method: GET
    data_selector: language
- name: morphology
  endpoint:
    path: /morphology
    method: GET
    data_selector: morphology
- name: semantics
  endpoint:
    path: /semantics
    method: GET
    data_selector: semantics
- name: sentences
  endpoint:
    path: /sentences
    method: GET
    data_selector: sentences
- name: tokens
  endpoint:
    path: /tokens
    method: GET
    data_selector: tokens
- name: info
  endpoint:
    path: /info
    method: GET
    data_selector: info
- name: ping
  endpoint:
    path: /ping
    method: GET
    data_selector: ping
- name: custom-profiles
  endpoint:
    path: /custom-profiles
    method: GET
    data_selector: profiles
- name: custom-profiles
  endpoint:
    path: /custom-profiles
    method: GET
    data_selector: profiles
    params: {}
- name: entities
  endpoint:
    path: /entities
    method: POST
    data_selector: entities
    params: {}
- name: usage
  endpoint:
    path: /rest/usage
    method: GET
    data_selector: no-app-id
- name: metrics
  endpoint:
    path: /rest/metrics
    method: GET
    data_selector: rosette_http_requests_total
- name: usage
  endpoint:
    path: /rest/usage
    method: GET
- name: metrics
  endpoint:
    path: /rest/metrics
    method: GET
- name: match_sentences
  endpoint:
    path: /rest/v1/match-sentences
    method: GET
- name: python_example
  endpoint:
    path: /rest/v1/python_example
    method: GET
- name: match_sentences
  endpoint:
    path: /rest/v1/match-sentences/**
    method: GET
- name: rosette_pass_thru
  endpoint:
    path: /rest/v1/**
    method: GET
- name: python_example
  endpoint:
    path: /rest/v1/python_example
    method: GET
- name: dynamic_gazetteer
  endpoint:
    path: /entities/configuration/gazetteer/add
    method: POST
    data_selector: configuration.entities.COMPANY
- name: entities_gazetteer_add
  endpoint:
    path: /entities/configuration/gazetteer/add
    method: POST
    data_selector: entities
    params: {}
- name: sentiment
  endpoint:
    path: /sentiment
    method: GET
    data_selector: response
    params: {}
- name: categories
  endpoint:
    path: /categories
    method: GET
    data_selector: response
    params: {}
- name: event_extraction
  endpoint:
    path: /analytics/event_extraction
    method: GET
- name: entity_extractor
  endpoint:
    path: /analytics/entity_extractor
    method: GET
- name: entities
  endpoint:
    path: /entities
    method: POST
- name: events
  endpoint:
    path: /events
    method: GET
- name: language
  endpoint:
    path: /language
    method: GET
- name: morphology
  endpoint:
    path: /morphology
    method: GET
- name: semantics
  endpoint:
    path: /semantics
    method: GET
- name: sentences
  endpoint:
    path: /sentences
    method: GET
- name: tokens
  endpoint:
    path: /tokens
    method: GET
- name: info
  endpoint:
    path: /info
    method: GET
- name: ping
  endpoint:
    path: /ping
    method: GET
- name: entities
  endpoint:
    path: /entities
    method: POST
    data_selector: entities
- name: events
  endpoint:
    path: /events
    method: GET
    data_selector: events
- name: language
  endpoint:
    path: /language
    method: GET
    data_selector: language
- name: morphology
  endpoint:
    path: /morphology
    method: GET
    data_selector: morphology
- name: semantics
  endpoint:
    path: /semantics
    method: GET
    data_selector: semantics
- name: sentences
  endpoint:
    path: /sentences
    method: GET
    data_selector: sentences
- name: tokens
  endpoint:
    path: /tokens
    method: GET
    data_selector: tokens
- name: info
  endpoint:
    path: /info
    method: GET
    data_selector: info
- name: ping
  endpoint:
    path: /ping
    method: GET
    data_selector: ping
- name: custom-profiles
  endpoint:
    path: /custom-profiles
    method: GET
- name: entities
  endpoint:
    path: /entities
    method: POST
    data_selector: entities
- name: usage
  endpoint:
    path: /rest/usage
    method: GET
    data_selector: ''
- name: metrics
  endpoint:
    path: /rest/metrics
    method: GET
    data_selector: ''
- name: match_sentences
  endpoint:
    path: /rest/v1/match-sentences
    method: GET
- name: entities
  endpoint:
    path: /entities
    method: GET
- name: usage
  endpoint:
    path: /rest/usage
    method: GET
- name: metrics
  endpoint:
    path: /rest/metrics
    method: GET
- name: matchSentences
  endpoint:
    path: /rest/v1/match-sentences
    method: POST
- name: configuration_gazetteer_add
  endpoint:
    path: /configuration/gazetteer/add
    method: POST
    data_selector: configuration.entities
    params: {}
- name: name_similarity
  endpoint:
    path: /document/preview/76162#UUID-01286cbd-a01e-9580-5a65-7dca4ddcc359
    method: GET
- name: name_deduplication
  endpoint:
    path: /document/preview/141755#UUID-2098d1d7-8abd-f468-e996-06771976b229
    method: GET
- name: address_similarity
  endpoint:
    path: /document/preview/79341#UUID-eebdad42-dad1-e3d5-b97e-cccf5fb6618b
    method: GET
- name: record_similarity
  endpoint:
    path: /document/preview/186284#UUID-e2b53211-8493-9659-21d9-4f3d5eecd150
    method: GET
- name: language
  endpoint:
    path: /language
    method: GET
    data_selector: shortStringThreshold
    params:
      shortStringThreshold: 20
- name: entities
  endpoint:
    path: /entities
    method: POST
    data_selector: entities
    params: {}
- name: Event Extraction
  endpoint:
    path: /required-endpoints
    method: GET
- name: entities
  endpoint:
    path: /entities
    method: POST
    data_selector: extracted_entities
- name: events
  endpoint:
    path: /events
    method: GET
    data_selector: event_data
- name: language
  endpoint:
    path: /language
    method: GET
    data_selector: language_data
- name: morphology
  endpoint:
    path: /morphology
    method: GET
    data_selector: morphology_data
- name: semantics
  endpoint:
    path: /semantics
    method: GET
    data_selector: semantics_data
- name: sentences
  endpoint:
    path: /sentences
    method: GET
    data_selector: sentences_data
- name: tokens
  endpoint:
    path: /tokens
    method: GET
    data_selector: tokens_data
- name: info
  endpoint:
    path: /info
    method: GET
    data_selector: info_data
- name: ping
  endpoint:
    path: /ping
    method: GET
    data_selector: ping_response
- name: health_check
  endpoint:
    path: /rest/v1/health/services
    method: GET
    data_selector: services
- name: entities
  endpoint:
    path: /rest/v1/entities
    method: POST
    data_selector: entities
- name: events
  endpoint:
    path: /rest/v1/events
    method: GET
    data_selector: events
- name: language
  endpoint:
    path: /rest/v1/language
    method: GET
    data_selector: language
- name: morphology
  endpoint:
    path: /rest/v1/morphology
    method: GET
    data_selector: morphology
- name: semantics
  endpoint:
    path: /rest/v1/semantics
    method: GET
    data_selector: semantics
- name: sentences
  endpoint:
    path: /rest/v1/sentences
    method: GET
    data_selector: sentences
- name: tokens
  endpoint:
    path: /rest/v1/tokens
    method: GET
    data_selector: tokens
- name: info
  endpoint:
    path: /rest/v1/info
    method: GET
    data_selector: info
- name: ping
  endpoint:
    path: /rest/v1/ping
    method: GET
    data_selector: ping
- name: custom-profiles
  endpoint:
    path: /custom-profiles
    method: GET
    data_selector: profiles
- name: usage
  endpoint:
    path: /rest/usage
    method: GET
- name: metrics
  endpoint:
    path: /rest/metrics
    method: GET
- name: matchSentences
  endpoint:
    path: /rest/v1/match-sentences
    method: POST
- name: info
  endpoint:
    path: /info
    method: GET
- name: health
  endpoint:
    path: /health
    method: GET
- name: language
  endpoint:
    path: /language
    method: GET
    data_selector: shortStringThreshold
    params:
      shortStringThreshold: 20
- name: match_sentences
  endpoint:
    path: /rest/v1/match-sentences
    method: GET
    data_selector: records
    params: {}
- name: entities
  endpoint:
    path: /entities
    method: GET
    data_selector: records
    params: {}
- name: event_extraction
  endpoint:
    path: /services/data/vXX.X/event-extraction
    method: GET
    data_selector: records
    params: {}
- name: language_identification
  endpoint:
    path: /language
    method: GET
    data_selector: ''
    params:
      shortStringThreshold: 20
- name: sentiment
  endpoint:
    path: /sentiment
    method: GET
    data_selector: ''
    params:
      lang: ara|eng|fas|fra|jpn|spa
- name: categories
  endpoint:
    path: /categories
    method: GET
    data_selector: ''
    params:
      lang: eng
- name: entities
  endpoint:
    path: /entities
    method: POST
    data_selector: entities
- name: events
  endpoint:
    path: /events
    method: GET
    data_selector: events
- name: language
  endpoint:
    path: /language
    method: GET
    data_selector: language
- name: morphology
  endpoint:
    path: /morphology
    method: GET
    data_selector: morphology
- name: semantics
  endpoint:
    path: /semantics
    method: GET
    data_selector: semantics
- name: sentences
  endpoint:
    path: /sentences
    method: GET
    data_selector: sentences
- name: tokens
  endpoint:
    path: /tokens
    method: GET
    data_selector: tokens
- name: info
  endpoint:
    path: /info
    method: GET
    data_selector: info
- name: ping
  endpoint:
    path: /ping
    method: GET
    data_selector: ping
- name: custom-profiles
  endpoint:
    path: /custom-profiles
    method: GET
    data_selector: profiles
- name: entities
  endpoint:
    path: /entities
    method: POST
    data_selector: entities
- name: usage
  endpoint:
    path: /rest/usage
    method: GET
- name: metrics
  endpoint:
    path: /rest/metrics
    method: GET
- name: matchSentences
  endpoint:
    path: /rest/v1/match-sentences
    method: POST
- name: entities
  endpoint:
    path: /entities
    method: POST
    data_selector: entities
- name: events
  endpoint:
    path: /events
    method: GET
    data_selector: events
- name: language
  endpoint:
    path: /language
    method: GET
    data_selector: language
- name: morphology
  endpoint:
    path: /morphology
    method: GET
    data_selector: morphology
- name: semantics
  endpoint:
    path: /semantics
    method: GET
    data_selector: semantics
- name: sentences
  endpoint:
    path: /sentences
    method: GET
    data_selector: sentences
- name: tokens
  endpoint:
    path: /tokens
    method: GET
    data_selector: tokens
- name: info
  endpoint:
    path: /info
    method: GET
    data_selector: info
- name: ping
  endpoint:
    path: /ping
    method: GET
    data_selector: ping
- name: match_sentences
  endpoint:
    path: /rest/v1/match-sentences
    method: GET
- name: python_example
  endpoint:
    path: /rest/v1/python_example
    method: GET
- name: analytics_server
  endpoint:
    path: /rest/v1/
    method: GET
- name: dynamic_gazetteer
  endpoint:
    path: /configuration/gazetteer/add
    method: POST
    data_selector: configuration.entities
    params: {}
- name: usage
  endpoint:
    path: /rest/usage
    method: GET
- name: metrics
  endpoint:
    path: /rest/metrics
    method: GET
- name: configuration_gazetteer_add
  endpoint:
    path: /configuration/gazetteer/add
    method: POST
    data_selector: language
    params: {}
- name: ping
  endpoint:
    path: /ping
    method: GET
    data_selector: null
    params: {}
- name: info
  endpoint:
    path: /info
    method: GET
    data_selector: null
    params: {}
- name: entities
  endpoint:
    path: /entities
    method: POST
    data_selector: null
    params: {}
- name: event_extraction
  endpoint:
    path: /services/data/vXX.X/eventExtraction
    method: POST
    data_selector: records
    params: {}
- name: usage
  endpoint:
    path: /rest/usage
    method: GET
    data_selector: null
    params: {}
- name: metrics
  endpoint:
    path: /rest/metrics
    method: GET
    data_selector: null
    params: {}
- name: match_sentences
  endpoint:
    path: /rest/v1/match-sentences
    method: POST
    data_selector: null
    params: {}
- name: Name Similarity
  endpoint:
    path: /document/preview/76162#UUID-01286cbd-a01e-9580-5a65-7dca4ddcc359
    method: GET
- name: Name Deduplication
  endpoint:
    path: /document/preview/141755#UUID-2098d1d7-8abd-f468-e996-06771976b229
    method: GET
- name: Address Similarity
  endpoint:
    path: /document/preview/79341#UUID-eebdad42-dad1-e3d5-b97e-cccf5fb6618b
    method: GET
- name: Record Similarity
  endpoint:
    path: /document/preview/186284#UUID-e2b53211-8493-9659-21d9-4f3d5eecd150
    method: GET
- name: ping
  endpoint:
    path: /ping
    method: GET
    data_selector: message
- name: info
  endpoint:
    path: /info
    method: GET
    data_selector: name
- name: entities
  endpoint:
    path: /entities
    method: POST
    data_selector: entities
- name: usage
  endpoint:
    path: /rest/usage
    method: GET
- name: metrics
  endpoint:
    path: /rest/metrics
    method: GET
- name: entities
  endpoint:
    path: /entities
    method: POST
    data_selector: entities
- name: events
  endpoint:
    path: /events
    method: GET
    data_selector: events
- name: language
  endpoint:
    path: /language
    method: GET
    data_selector: language
- name: morphology
  endpoint:
    path: /morphology
    method: GET
    data_selector: morphology
- name: semantics
  endpoint:
    path: /semantics
    method: GET
    data_selector: semantics
- name: sentences
  endpoint:
    path: /sentences
    method: GET
    data_selector: sentences
- name: tokens
  endpoint:
    path: /tokens
    method: GET
    data_selector: tokens
- name: info
  endpoint:
    path: /info
    method: GET
    data_selector: info
- name: ping
  endpoint:
    path: /ping
    method: GET
    data_selector: ping
- name: Name Similarity
  endpoint:
    path: /document/preview/76162#UUID-01286cbd-a01e-9580-5a65-7dca4ddcc359
    method: GET
- name: Name Deduplication
  endpoint:
    path: /document/preview/141755#UUID-2098d1d7-8abd-f468-e996-06771976b229
    method: GET
- name: Address Similarity
  endpoint:
    path: /document/preview/79341#UUID-eebdad42-dad1-e3d5-b97e-cccf5fb6618b
    method: GET
- name: Record Similarity
  endpoint:
    path: /document/preview/186284#UUID-e2b53211-8493-9659-21d9-4f3d5eecd150
    method: GET
- name: sentiment
  endpoint:
    path: /sentiment
    method: GET
    data_selector: records
    params: {}
- name: categories
  endpoint:
    path: /categories
    method: GET
    data_selector: records
    params: {}
- name: custom-profiles
  endpoint:
    path: /custom-profiles
    method: GET
    data_selector: profiles
- name: entities
  endpoint:
    path: /entities
    method: POST
    data_selector: entities
- name: usage
  endpoint:
    path: /rest/usage
    method: GET
- name: metrics
  endpoint:
    path: /rest/metrics
    method: GET
- name: match_sentences
  endpoint:
    path: /rest/v1/match-sentences
    method: GET
    data_selector: records
    params: {}
- name: python_example
  endpoint:
    path: /rest/v1/python_example
    method: GET
    data_selector: records
    params: {}
- name: dynamic_gazetteer
  endpoint:
    path: /configuration/gazetteer/add
    method: POST
    data_selector: language
    params: {}
- name: entities
  endpoint:
    path: /entities
    method: POST
    data_selector: extracted_entities
- name: events
  endpoint:
    path: /events
    method: GET
    data_selector: event_data
- name: language
  endpoint:
    path: /language
    method: GET
    data_selector: language_info
- name: morphology
  endpoint:
    path: /morphology
    method: GET
    data_selector: morphology_data
- name: semantics
  endpoint:
    path: /semantics
    method: GET
    data_selector: semantics_data
- name: sentences
  endpoint:
    path: /sentences
    method: GET
    data_selector: sentence_data
- name: tokens
  endpoint:
    path: /tokens
    method: GET
    data_selector: token_data
- name: info
  endpoint:
    path: /info
    method: GET
    data_selector: info_data
- name: ping
  endpoint:
    path: /ping
    method: GET
    data_selector: ping_data
- name: sentiment
  endpoint:
    path: /sentiment
    method: GET
- name: categories
  endpoint:
    path: /categories
    method: GET
- name: usage
  endpoint:
    path: /rest/usage
    method: GET
- name: metrics
  endpoint:
    path: /rest/metrics
    method: GET
- name: match_sentences
  endpoint:
    path: /rest/v1/match-sentences
    method: POST
- name: Name Similarity
  endpoint:
    path: /document/preview/76162#UUID-01286cbd-a01e-9580-5a65-7dca4ddcc359
    method: GET
- name: Name Deduplication
  endpoint:
    path: /document/preview/141755#UUID-2098d1d7-8abd-f468-e996-06771976b229
    method: GET
- name: Address Similarity
  endpoint:
    path: /document/preview/79341#UUID-eebdad42-dad1-e3d5-b97e-cccf5fb6618b
    method: GET
- name: Record Similarity
  endpoint:
    path: /document/preview/186284#UUID-e2b53211-8493-9659-21d9-4f3d5eecd150
    method: GET
- name: entities
  endpoint:
    path: /entities
    method: POST
    data_selector: entities
- name: events
  endpoint:
    path: /events
    method: POST
    data_selector: events
- name: language
  endpoint:
    path: /language
    method: GET
    data_selector: language
- name: morphology
  endpoint:
    path: /morphology
    method: GET
    data_selector: morphology
- name: semantics
  endpoint:
    path: /semantics
    method: GET
    data_selector: semantics
- name: sentences
  endpoint:
    path: /sentences
    method: GET
    data_selector: sentences
- name: tokens
  endpoint:
    path: /tokens
    method: GET
    data_selector: tokens
- name: info
  endpoint:
    path: /info
    method: GET
    data_selector: info
- name: ping
  endpoint:
    path: /ping
    method: GET
    data_selector: ping
- name: dynamic_gazetteer
  endpoint:
    path: /entities/configuration/gazetteer/add
    method: POST
    data_selector: configuration.entities
    params: {}
- name: sentiment
  endpoint:
    path: /sentiment
    data_selector: languages
    params: {}
- name: categories
  endpoint:
    path: /categories
    data_selector: lang
    params: {}
- name: info
  endpoint:
    path: v1/info
    method: GET
- name: ping
  endpoint:
    path: v1/ping
    method: GET
- name: info
  endpoint:
    path: /v1/info
    method: GET
- name: ping
  endpoint:
    path: /v1/ping
    method: GET
- name: required_endpoints
  endpoint:
    path: /required/endpoints
    method: GET
    data_selector: records
- name: ping
  endpoint:
    path: /ping
    method: GET
    data_selector: message
    params: {}
- name: info
  endpoint:
    path: /info
    method: GET
    data_selector: version
    params: {}
- name: entities
  endpoint:
    path: /entities
    method: POST
    data_selector: entities
    params: {}
- name: info
  endpoint:
    path: /v1/info
    method: GET
- name: ping
  endpoint:
    path: /v1/ping
    method: GET
- name: entities
  endpoint:
    path: /entities
    method: POST
    data_selector: entities
    params: {}
- name: events
  endpoint:
    path: /events
    method: GET
    data_selector: events
    params: {}
- name: language
  endpoint:
    path: /language
    method: GET
    data_selector: language
    params: {}
- name: morphology
  endpoint:
    path: /morphology
    method: GET
    data_selector: morphology
    params: {}
- name: semantics
  endpoint:
    path: /semantics
    method: GET
    data_selector: semantics
    params: {}
- name: sentences
  endpoint:
    path: /sentences
    method: GET
    data_selector: sentences
    params: {}
- name: tokens
  endpoint:
    path: /tokens
    method: GET
    data_selector: tokens
    params: {}
- name: info
  endpoint:
    path: /info
    method: GET
    data_selector: info
    params: {}
- name: ping
  endpoint:
    path: /ping
    method: GET
    data_selector: ping
    params: {}
- name: usage
  endpoint:
    path: /rest/usage
    method: GET
- name: metrics
  endpoint:
    path: /rest/metrics
    method: GET
- name: match_sentences
  endpoint:
    path: /rest/v1/match-sentences
    method: GET
    data_selector: records
    params: {}
- name: python_example
  endpoint:
    path: /rest/v1/python_example
    method: GET
    data_selector: records
    params: {}
- name: language
  endpoint:
    path: /language
    method: GET
    data_selector: shortStringThreshold
    params:
      shortStringThreshold: 20
- name: dynamic_gazetteer
  endpoint:
    path: /entities/configuration/gazetteer/add
    method: POST
    data_selector: entities
    params: {}
- name: custom_profiles
  endpoint:
    path: /custom-profiles
    method: GET
    data_selector: records
    params: {}
- name: sentiment
  endpoint:
    path: /sentiment
    method: GET
- name: categories
  endpoint:
    path: /categories
    method: GET
- name: ping
  endpoint:
    path: /rest/v1/ping
    method: GET
    data_selector: message
- name: info
  endpoint:
    path: /rest/v1/info
    method: GET
    data_selector: version
- name: entities
  endpoint:
    path: /rest/v1/entities
    method: POST
    data_selector: entities
- name: entities
  endpoint:
    path: /v1/entities
    method: POST
    data_selector: entities
- name: events
  endpoint:
    path: /v1/events
    method: GET
    data_selector: events
- name: language
  endpoint:
    path: /v1/language
    method: GET
    data_selector: language
- name: morphology
  endpoint:
    path: /v1/morphology
    method: GET
    data_selector: morphology
- name: semantics
  endpoint:
    path: /v1/semantics
    method: GET
    data_selector: semantics
- name: sentences
  endpoint:
    path: /v1/sentences
    method: GET
    data_selector: sentences
- name: tokens
  endpoint:
    path: /v1/tokens
    method: GET
    data_selector: tokens
- name: info
  endpoint:
    path: /v1/info
    method: GET
    data_selector: info
- name: ping
  endpoint:
    path: /v1/ping
    method: GET
    data_selector: ping
- name: match_sentences
  endpoint:
    path: /rest/v1/match-sentences/**
    method: GET
- name: rosette_pass_thru
  endpoint:
    path: /rest/v1/**
    method: GET
- name: python_example
  endpoint:
    path: /rest/v1/python_example
    method: GET
- name: health_check
  endpoint:
    path: /rest/v1/health/services
    method: GET
    data_selector: .
- name: dynamic_gazetteer
  endpoint:
    path: /configuration/gazetteer/add
    method: POST
    data_selector: configuration.entities
    params: {}
- name: custom-profiles
  endpoint:
    path: /custom-profiles
    method: GET
    data_selector: profiles
- name: custom-profiles
  endpoint:
    path: /custom-profiles
    method: GET
    data_selector: profiles
- name: event-extraction
  endpoint:
    path: /event-extraction
    method: GET
    data_selector: events
- name: usage
  endpoint:
    path: /rest/usage
    method: GET
- name: metrics
  endpoint:
    path: /rest/metrics
    method: GET
- name: match_sentences
  endpoint:
    path: /rest/v1/match-sentences/**
    method: GET
- name: entities
  endpoint:
    path: /entities
    method: GET
- name: dynamic_gazetteer
  endpoint:
    path: /entities
    method: POST
    data_selector: configuration
    params: {}
- name: sentiment
  endpoint:
    path: /sentiment
    method: POST
- name: categories
  endpoint:
    path: /categories
    method: POST
- name: entities
  endpoint:
    path: /entities
    method: POST
    data_selector: entities
- name: events
  endpoint:
    path: /events
    method: GET
    data_selector: events
- name: language
  endpoint:
    path: /language
    method: GET
    data_selector: language
- name: morphology
  endpoint:
    path: /morphology
    method: GET
    data_selector: morphology
- name: semantics
  endpoint:
    path: /semantics
    method: GET
    data_selector: semantics
- name: sentences
  endpoint:
    path: /sentences
    method: GET
    data_selector: sentences
- name: tokens
  endpoint:
    path: /tokens
    method: GET
    data_selector: tokens
- name: info
  endpoint:
    path: /info
    method: GET
    data_selector: info
- name: ping
  endpoint:
    path: /ping
    method: GET
    data_selector: ping
- name: info
  endpoint:
    path: /v1/info
    method: GET
- name: ping
  endpoint:
    path: /v1/ping
    method: GET
- name: custom-profiles
  endpoint:
    path: /custom-profiles
    method: GET
    data_selector: profiles
- name: entities
  endpoint:
    path: /entities
    method: POST
    data_selector: entities
- name: entities
  endpoint:
    path: /entities
    method: POST
    data_selector: entities
- name: info
  endpoint:
    path: /info
    method: GET
    data_selector: info
- name: ping
  endpoint:
    path: /ping
    method: GET
    data_selector: ping
- name: usage
  endpoint:
    path: /rest/usage
    method: GET
    data_selector: no-app-id
    params: {}
- name: metrics
  endpoint:
    path: /rest/metrics
    method: GET
    data_selector: rosette_http_requests_total
    params: {}
- name: health_check
  endpoint:
    path: /rest/v1/health/services
    method: GET
    data_selector: .
    params: {}
- name: Name Similarity
  endpoint:
    path: /document/preview/76162#UUID-01286cbd-a01e-9580-5a65-7dca4ddcc359
    method: GET
- name: Name Deduplication
  endpoint:
    path: /document/preview/141755#UUID-2098d1d7-8abd-f468-e996-06771976b229
    method: GET
- name: Address Similarity
  endpoint:
    path: /document/preview/79341#UUID-eebdad42-dad1-e3d5-b97e-cccf5fb6618b
    method: GET
- name: Record Similarity
  endpoint:
    path: /document/preview/186284#UUID-e2b53211-8493-9659-21d9-4f3d5eecd150
    method: GET
- name: usage
  endpoint:
    path: /rest/usage
    method: GET
    data_selector: no-app-id
- name: metrics
  endpoint:
    path: /rest/metrics
    method: GET
    data_selector: rosette_http_requests_total
- name: dynamic_gazetteer
  endpoint:
    path: /configuration/gazetteer/add
    method: POST
    data_selector: language
    params: {}
- name: match_sentences
  endpoint:
    path: /rest/v1/match-sentences
    method: GET
- name: python_example
  endpoint:
    path: /rest/v1/python_example
    method: GET
- name: dynamic_gazetteer
  endpoint:
    path: /configuration/gazetteer/add
    method: POST
    data_selector: language
    params: {}
- name: sentiment
  endpoint:
    path: /sentiment
    method: GET
- name: categories
  endpoint:
    path: /categories
    method: GET
- name: info
  endpoint:
    path: v1/info
    method: GET
- name: ping
  endpoint:
    path: v1/ping
    method: GET
- name: entities
  endpoint:
    path: /entities
    method: POST
    data_selector: message
    params: {}
- name: events
  endpoint:
    path: /events
    method: GET
    data_selector: message
    params: {}
- name: language
  endpoint:
    path: /language
    method: GET
    data_selector: message
    params: {}
- name: morphology
  endpoint:
    path: /morphology
    method: GET
    data_selector: message
    params: {}
- name: semantics
  endpoint:
    path: /semantics
    method: GET
    data_selector: message
    params: {}
- name: sentences
  endpoint:
    path: /sentences
    method: GET
    data_selector: message
    params: {}
- name: tokens
  endpoint:
    path: /tokens
    method: GET
    data_selector: message
    params: {}
- name: info
  endpoint:
    path: /info
    method: GET
    data_selector: message
    params: {}
- name: ping
  endpoint:
    path: /ping
    method: GET
    data_selector: message
    params: {}
- name: name-similarity
  endpoint:
    path: /name-similarity
    method: GET
- name: name-translation
  endpoint:
    path: /name-translation
    method: GET
- name: name-deduplication
  endpoint:
    path: /name-deduplication
    method: GET
- name: sentiment
  endpoint:
    path: /sentiment
    method: GET
- name: entities
  endpoint:
    path: /entities
    method: GET
- name: relationships
  endpoint:
    path: /relationships
    method: GET
- name: ping
  endpoint:
    path: /v1/ping
    method: GET
    data_selector: message
- name: info
  endpoint:
    path: /v1/info
    method: GET
    data_selector: version
- name: usage
  endpoint:
    path: /rest/usage
    method: GET
    data_selector: ''
- name: metrics
  endpoint:
    path: /rest/metrics
    method: GET
    data_selector: ''
- name: match_sentences
  endpoint:
    path: /rest/v1/match-sentences
    method: GET
- name: python_example
  endpoint:
    path: /rest/v1/python_example
    method: GET
- name: add_gazetteer_entry
  endpoint:
    path: /configuration/gazetteer/add
    method: POST
    data_selector: language
    params: {}
- name: custom-profiles
  endpoint:
    path: /custom-profiles
    method: GET
    data_selector: profiles
- name: usage
  endpoint:
    path: /rest/usage
    method: GET
    data_selector: calls
    params: {}
- name: metrics
  endpoint:
    path: /rest/metrics
    method: GET
    data_selector: rosette_http_requests_total
    params: {}
- name: match_sentences
  endpoint:
    path: /rest/v1/match-sentences
    method: GET
- name: entities
  endpoint:
    path: /entities
    method: GET
- name: indoc_coref
  endpoint:
    path: /entities/indoc-coref-server/supported-languages
    method: GET
    data_selector: records
    params: {}
- name: dynamic_gazetteer
  endpoint:
    path: /entities/configuration/gazetteer/add
    method: POST
    data_selector: configuration
    params: {}
- name: sentiment
  endpoint:
    path: /sentiment
    method: GET
- name: categories
  endpoint:
    path: /categories
    method: GET
- name: entities
  endpoint:
    path: /entities
    method: POST
    data_selector: entities
- name: events
  endpoint:
    path: /events
    method: GET
    data_selector: events
- name: language
  endpoint:
    path: /language
    method: GET
    data_selector: language
- name: morphology
  endpoint:
    path: /morphology
    method: GET
    data_selector: morphology
- name: semantics
  endpoint:
    path: /semantics
    method: GET
    data_selector: semantics
- name: sentences
  endpoint:
    path: /sentences
    method: GET
    data_selector: sentences
- name: tokens
  endpoint:
    path: /tokens
    method: GET
    data_selector: tokens
- name: info
  endpoint:
    path: /info
    method: GET
    data_selector: info
- name: ping
  endpoint:
    path: /ping
    method: GET
    data_selector: ping
- name: event_extraction
  endpoint:
    path: /services/data/vXX.X/sobjects/EventExtraction
    method: GET
    data_selector: records
    params: {}
- name: entities
  endpoint:
    path: /entities
    method: POST
    data_selector: entities
- name: events
  endpoint:
    path: /events
    method: GET
    data_selector: events
- name: language
  endpoint:
    path: /language
    method: GET
    data_selector: language
- name: morphology
  endpoint:
    path: /morphology
    method: GET
    data_selector: morphology
- name: semantics
  endpoint:
    path: /semantics
    method: GET
    data_selector: semantics
- name: sentences
  endpoint:
    path: /sentences
    method: GET
    data_selector: sentences
- name: tokens
  endpoint:
    path: /tokens
    method: GET
    data_selector: tokens
- name: info
  endpoint:
    path: /info
    method: GET
    data_selector: info
- name: ping
  endpoint:
    path: /ping
    method: GET
    data_selector: ping
- name: ping
  endpoint:
    path: /ping
    method: GET
    data_selector: message
    params: {}
- name: info
  endpoint:
    path: /info
    method: GET
    data_selector: name
    params: {}
- name: entities
  endpoint:
    path: /entities
    method: POST
    data_selector: entities
    params: {}
- name: health_services
  endpoint:
    path: /rest/v1/health/services
    method: GET
    data_selector: .
    params: {}
- name: endpoints
  endpoint:
    path: /services/data/vXX.X/endpoints
    method: GET
    data_selector: records
- name: info
  endpoint:
    path: /rest/v1/info
    method: GET
- name: ping
  endpoint:
    path: /rest/v1/ping
    method: GET
- name: usage
  endpoint:
    path: /rest/usage
    method: GET
- name: metrics
  endpoint:
    path: /rest/metrics
    method: GET
- name: match_sentences
  endpoint:
    path: /rest/v1/match-sentences
    method: GET
- name: add_gazetteer
  endpoint:
    path: /configuration/gazetteer/add
    method: POST
    data_selector: null
    params: {}
- name: ping
  endpoint:
    path: /ping
    method: GET
    data_selector: message
    params: {}
- name: info
  endpoint:
    path: /info
    method: GET
    data_selector: version
    params: {}
- name: entities
  endpoint:
    path: /entities
    method: POST
    data_selector: entities
    params: {}
- name: events
  endpoint:
    path: /events
    method: GET
    data_selector: events
    params: {}
- name: language
  endpoint:
    path: /language
    method: GET
    data_selector: language
    params: {}
- name: morphology
  endpoint:
    path: /morphology
    method: GET
    data_selector: morphology
    params: {}
- name: semantics
  endpoint:
    path: /semantics
    method: GET
    data_selector: semantics
    params: {}
- name: sentences
  endpoint:
    path: /sentences
    method: GET
    data_selector: sentences
    params: {}
- name: tokens
  endpoint:
    path: /tokens
    method: GET
    data_selector: tokens
    params: {}
- name: sentiment
  endpoint:
    path: /sentiment
    method: POST
- name: categories
  endpoint:
    path: /categories
    method: POST
- name: info
  endpoint:
    path: v1/info
    method: GET
- name: ping
  endpoint:
    path: v1/ping
    method: GET
- name: entities
  endpoint:
    path: /entities
    method: POST
    data_selector: results
- name: info
  endpoint:
    path: /info
    method: GET
    data_selector: results
- name: ping
  endpoint:
    path: /ping
    method: GET
    data_selector: results
- name: health_check
  endpoint:
    path: /rest/v1/health/services
    method: GET
    data_selector: .
    params: {}
- name: info
  endpoint:
    path: /v1/info
    method: GET
- name: ping
  endpoint:
    path: /v1/ping
    method: GET
- name: entities
  endpoint:
    path: /entities
    method: POST
- name: events
  endpoint:
    path: /events
    method: GET
- name: language
  endpoint:
    path: /language
    method: GET
- name: morphology
  endpoint:
    path: /morphology
    method: GET
- name: semantics
  endpoint:
    path: /semantics
    method: GET
- name: sentences
  endpoint:
    path: /sentences
    method: GET
- name: tokens
  endpoint:
    path: /tokens
    method: GET
- name: info
  endpoint:
    path: /info
    method: GET
- name: ping
  endpoint:
    path: /ping
    method: GET
- name: usage
  endpoint:
    path: /rest/usage
    method: GET
- name: metrics
  endpoint:
    path: /rest/metrics
    method: GET
- name: match_sentences
  endpoint:
    path: /rest/v1/match-sentences
    method: POST
- name: info
  endpoint:
    path: /info
    method: GET
- name: health
  endpoint:
    path: /health
    method: GET
- name: match_sentences
  endpoint:
    path: /rest/v1/match-sentences
    method: GET
    data_selector: records
    params: {}
- name: entities
  endpoint:
    path: /entities
    method: POST
- name: sentiment
  endpoint:
    path: /sentiment
    method: POST
- name: categories
  endpoint:
    path: /categories
    method: POST
- name: ping
  endpoint:
    path: /rest/v1/ping
    method: GET
    data_selector: message
- name: info
  endpoint:
    path: /rest/v1/info
    method: GET
    data_selector: version
- name: entities
  endpoint:
    path: /rest/v1/entities
    method: POST
    data_selector: entities
- name: events
  endpoint:
    path: /rest/v1/events
    method: POST
    data_selector: events
- name: language
  endpoint:
    path: /rest/v1/language
    method: GET
    data_selector: language
- name: morphology
  endpoint:
    path: /rest/v1/morphology
    method: GET
    data_selector: morphology
- name: semantics
  endpoint:
    path: /rest/v1/semantics
    method: GET
    data_selector: semantics
- name: sentences
  endpoint:
    path: /rest/v1/sentences
    method: GET
    data_selector: sentences
- name: tokens
  endpoint:
    path: /rest/v1/tokens
    method: GET
    data_selector: tokens
- name: entities
  endpoint:
    path: /v1/entities
    method: POST
    data_selector: results
- name: info
  endpoint:
    path: /v1/info
    method: GET
    data_selector: info
- name: ping
  endpoint:
    path: /v1/ping
    method: GET
    data_selector: message
- name: health_check
  endpoint:
    path: /rest/v1/health/services
    method: GET
    data_selector: .
- name: usage
  endpoint:
    path: /rest/usage
    method: GET
    data_selector: ''
    params: {}
- name: metrics
  endpoint:
    path: /rest/metrics
    method: GET
    data_selector: ''
    params: {}
- name: custom-profiles
  endpoint:
    path: /custom-profiles
    method: GET
- name: usage
  endpoint:
    path: /rest/usage
    method: GET
- name: metrics
  endpoint:
    path: /rest/metrics
    method: GET
- name: match_sentences
  endpoint:
    path: /rest/v1/match-sentences/**
    method: GET
- name: entities
  endpoint:
    path: /entities
    method: GET
- name: entities
  endpoint:
    path: /entities
    method: POST
- name: categories
  endpoint:
    path: /categories
    method: GET
    data_selector: null
    params:
      lang: eng
- name: sentiment
  endpoint:
    path: /sentiment
    method: GET
    data_selector: null
    params:
      lang: ara|eng|fas|fra|jpn|spa
- name: info
  endpoint:
    path: /v1/info
    method: GET
- name: ping
  endpoint:
    path: /v1/ping
    method: GET
- name: entities
  endpoint:
    path: /entities
    method: POST
    data_selector: entities
- name: events
  endpoint:
    path: /events
    method: GET
    data_selector: events
- name: language
  endpoint:
    path: /language
    method: GET
    data_selector: language
- name: morphology
  endpoint:
    path: /morphology
    method: GET
    data_selector: morphology
- name: semantics
  endpoint:
    path: /semantics
    method: GET
    data_selector: semantics
- name: sentences
  endpoint:
    path: /sentences
    method: GET
    data_selector: sentences
- name: tokens
  endpoint:
    path: /tokens
    method: GET
    data_selector: tokens
- name: info
  endpoint:
    path: /info
    method: GET
    data_selector: info
- name: ping
  endpoint:
    path: /ping
    method: GET
    data_selector: ping
- name: health_check
  endpoint:
    path: /rest/v1/health/services
    method: GET
    data_selector: .
    params: {}
- name: ping
  endpoint:
    path: /ping
    method: GET
    data_selector: message
- name: info
  endpoint:
    path: /info
    method: GET
    data_selector: name
- name: entities
  endpoint:
    path: /entities
    method: POST
    data_selector: entities
- name: health_services
  endpoint:
    path: /rest/v1/health/services
    method: GET
    data_selector: .
    params: {}
- name: usage
  endpoint:
    path: /rest/usage
    method: GET
    data_selector: calls
    params: {}
- name: metrics
  endpoint:
    path: /rest/metrics
    method: GET
    data_selector: calls
    params: {}
- name: match_sentences
  endpoint:
    path: /rest/v1/match-sentences/**
    method: GET
    data_selector: ''
    params: {}
- name: rosette_pass_thru
  endpoint:
    path: /rest/v1/**
    method: GET
    data_selector: ''
    params: {}
- name: custom-profiles
  endpoint:
    path: /custom-profiles
    method: GET
- name: info
  endpoint:
    path: /rest/v1/info
    method: GET
- name: ping
  endpoint:
    path: /rest/v1/ping
    method: GET
- name: dynamic_gazetteer
  endpoint:
    path: /entities/configuration/gazetteer/add
    method: POST
    data_selector: language
    params: {}
- name: match_sentences
  endpoint:
    path: /rest/v1/match-sentences
    method: GET
    data_selector: records
- name: dynamic_gazetteer
  endpoint:
    path: /entities/configuration/gazetteer/add
    method: POST
    data_selector: null
    params: {}
- name: sentiment
  endpoint:
    path: /sentiment
    method: POST
    data_selector: sentiment
- name: categories
  endpoint:
    path: /categories
    method: POST
    data_selector: categories
- name: ping
  endpoint:
    path: /ping
    method: GET
    data_selector: message
- name: info
  endpoint:
    path: /info
    method: GET
    data_selector: version
- name: entities
  endpoint:
    path: /entities
    method: POST
    data_selector: entities
- name: health_check
  endpoint:
    path: /rest/v1/health/services
    method: GET
    data_selector: null
    params: {}
- name: entities
  endpoint:
    path: /entities
    method: POST
    data_selector: entities
- name: events
  endpoint:
    path: /events
    method: GET
    data_selector: events
- name: language
  endpoint:
    path: /language
    method: GET
    data_selector: language
- name: morphology
  endpoint:
    path: /morphology
    method: GET
    data_selector: morphology
- name: semantics
  endpoint:
    path: /semantics
    method: GET
    data_selector: semantics
- name: sentences
  endpoint:
    path: /sentences
    method: GET
    data_selector: sentences
- name: tokens
  endpoint:
    path: /tokens
    method: GET
    data_selector: tokens
- name: info
  endpoint:
    path: /info
    method: GET
    data_selector: info
- name: ping
  endpoint:
    path: /ping
    method: GET
    data_selector: ping
- name: usage
  endpoint:
    path: /rest/usage
    method: GET
    data_selector: calls
    params: {}
- name: metrics
  endpoint:
    path: /rest/metrics
    method: GET
    data_selector: metrics
    params: {}
- name: match_sentences
  endpoint:
    path: /rest/v1/match-sentences
    method: POST
    data_selector: response
    params: {}
- name: health_check
  endpoint:
    path: /rest/v1/health/services
    method: GET
    data_selector: .
    params: {}
- name: match_sentences
  endpoint:
    path: /rest/v1/match-sentences/**
    method: GET
- name: python_example
  endpoint:
    path: /rest/v1/python_example
    method: GET
- name: entities
  endpoint:
    path: /entities/configuration/gazetteer/add
    method: POST
    data_selector: entities
    params: {}
- name: required_endpoints
  endpoint:
    path: /required/endpoints
    method: GET
    data_selector: records
- name: usage_tracking
  endpoint:
    path: /usage/tracking
    method: GET
- name: event_extraction
  endpoint:
    path: /event/extraction
    method: POST
- name: name_similarity
  endpoint:
    path: /analytics/match-names/name-similarity/match-names
    method: GET
    data_selector: results
    params: {}
- name: entities
  endpoint:
    path: /entities
    method: POST
    data_selector: results
- name: info
  endpoint:
    path: /info
    method: GET
    data_selector: results
- name: ping
  endpoint:
    path: /ping
    method: GET
    data_selector: results
- name: entities
  endpoint:
    path: /entities
    method: POST
    data_selector: entities
- name: events
  endpoint:
    path: /events
    method: GET
    data_selector: events
- name: language
  endpoint:
    path: /language
    method: GET
    data_selector: language
- name: morphology
  endpoint:
    path: /morphology
    method: GET
    data_selector: morphology
- name: semantics
  endpoint:
    path: /semantics
    method: GET
    data_selector: semantics
- name: sentences
  endpoint:
    path: /sentences
    method: GET
    data_selector: sentences
- name: tokens
  endpoint:
    path: /tokens
    method: GET
    data_selector: tokens
- name: info
  endpoint:
    path: /info
    method: GET
    data_selector: info
- name: ping
  endpoint:
    path: /ping
    method: GET
    data_selector: ping
- name: usage
  endpoint:
    path: /rest/usage
    method: GET
    data_selector: calls
- name: metrics
  endpoint:
    path: /rest/metrics
    method: GET
    data_selector: requests
- name: name_similarity
  endpoint:
    path: /document/preview/76162#UUID-01286cbd-a01e-9580-5a65-7dca4ddcc359
    method: GET
- name: name_deduplication
  endpoint:
    path: /document/preview/141755#UUID-2098d1d7-8abd-f468-e996-06771976b229
    method: GET
- name: address_similarity
  endpoint:
    path: /document/preview/79341#UUID-eebdad42-dad1-e3d5-b97e-cccf5fb6618b
    method: GET
- name: record_similarity
  endpoint:
    path: /document/preview/186284#UUID-e2b53211-8493-9659-21d9-4f3d5eecd150
    method: GET
- name: dynamic_gazetteer
  endpoint:
    path: /configuration/gazetteer/add
    method: POST
    data_selector: language
    params: {}
- name: event_extraction
  endpoint:
    path: /services/data/vXX.X/sobjects/EventExtraction
    method: POST
    data_selector: records
    params: {}
- name: ping
  endpoint:
    path: /ping
    method: GET
    data_selector: message
- name: info
  endpoint:
    path: /info
    method: GET
    data_selector: name
- name: entities
  endpoint:
    path: /entities
    method: POST
    data_selector: entities
- name: entities
  endpoint:
    path: /entities
    method: POST
    data_selector: entities
    params: {}
- name: events
  endpoint:
    path: /events
    method: GET
    data_selector: events
    params: {}
- name: language
  endpoint:
    path: /language
    method: GET
    data_selector: language
    params: {}
- name: morphology
  endpoint:
    path: /morphology
    method: GET
    data_selector: morphology
    params: {}
- name: semantics
  endpoint:
    path: /semantics
    method: GET
    data_selector: semantics
    params: {}
- name: sentences
  endpoint:
    path: /sentences
    method: GET
    data_selector: sentences
    params: {}
- name: tokens
  endpoint:
    path: /tokens
    method: GET
    data_selector: tokens
    params: {}
- name: info
  endpoint:
    path: /info
    method: GET
    data_selector: info
    params: {}
- name: ping
  endpoint:
    path: /ping
    method: GET
    data_selector: ping
    params: {}
- name: usage
  endpoint:
    path: /rest/usage
    method: GET
    data_selector: ''
- name: metrics
  endpoint:
    path: /rest/metrics
    method: GET
    data_selector: ''
- name: match_sentences
  endpoint:
    path: /rest/v1/match-sentences
    method: GET
- name: entities
  endpoint:
    path: /entities
    method: GET
- name: entities
  endpoint:
    path: /entities
    method: POST
    data_selector: results
- name: info
  endpoint:
    path: /rest/v1/match-sentences/info
    method: GET
- name: health
  endpoint:
    path: /rest/v1/match-sentences/health
    method: GET
- name: prometheus
  endpoint:
    path: /rest/v1/match-sentences/prometheus
    method: GET
- name: env
  endpoint:
    path: /rest/v1/match-sentences/env
    method: GET
- name: match_sentences
  endpoint:
    path: /rest/v1/match-sentences
    method: GET
- name: ping
  endpoint:
    path: /ping
    method: GET
    data_selector: message
- name: info
  endpoint:
    path: /info
    method: GET
    data_selector: version
- name: entities
  endpoint:
    path: /entities
    method: POST
    data_selector: entities
- name: events
  endpoint:
    path: /events
    method: GET
    data_selector: events
- name: language
  endpoint:
    path: /language
    method: GET
    data_selector: languages
- name: morphology
  endpoint:
    path: /morphology
    method: GET
    data_selector: morphology
- name: semantics
  endpoint:
    path: /semantics
    method: GET
    data_selector: semantics
- name: sentences
  endpoint:
    path: /sentences
    method: GET
    data_selector: sentences
- name: tokens
  endpoint:
    path: /tokens
    method: GET
    data_selector: tokens
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: custom-profiles
  endpoint:
    path: /custom-profiles
    method: GET
    data_selector: profiles
- name: entities
  endpoint:
    path: /entities
    method: POST
    data_selector: entities
- name: usage
  endpoint:
    path: /rest/usage
    method: GET
    data_selector: calls
- name: metrics
  endpoint:
    path: /rest/metrics
    method: GET
    data_selector: rosette_http_requests_total
- name: ping
  endpoint:
    path: /rest/v1/ping
    method: GET
    data_selector: message
- name: info
  endpoint:
    path: /rest/v1/info
    method: GET
    data_selector: name
- name: entities
  endpoint:
    path: /rest/v1/entities
    method: POST
    data_selector: entities
- name: events
  endpoint:
    path: /rest/v1/events
    method: GET
    data_selector: events
- name: language
  endpoint:
    path: /rest/v1/language
    method: GET
    data_selector: language
- name: morphology
  endpoint:
    path: /rest/v1/morphology
    method: GET
    data_selector: morphology
- name: semantics
  endpoint:
    path: /rest/v1/semantics
    method: GET
    data_selector: semantics
- name: sentences
  endpoint:
    path: /rest/v1/sentences
    method: GET
    data_selector: sentences
- name: tokens
  endpoint:
    path: /rest/v1/tokens
    method: GET
    data_selector: tokens
- name: sample_app_route
  endpoint:
    path: /rest/v1/match-sentences/**
    method: GET
- name: rosette_pass_thru
  endpoint:
    path: /rest/v1/**
    method: GET
- name: add_gazetteer_entry
  endpoint:
    path: /configuration/gazetteer/add
    method: POST
    data_selector: entities
    params: {}
- name: usage
  endpoint:
    path: /rest/usage
    method: GET
- name: metrics
  endpoint:
    path: /rest/metrics
    method: GET
- name: match-sentences
  endpoint:
    path: /rest/v1/match-sentences
    method: POST
- name: match_sentences
  endpoint:
    path: /rest/v1/match-sentences
    method: POST
    data_selector: response
    params: {}
- name: sample_app_route
  endpoint:
    path: /rest/v1/match-sentences
    method: GET
    data_selector: ''
    params: {}
- name: rosette_pass_thru
  endpoint:
    path: /rest/v1
    method: GET
    data_selector: ''
    params: {}
- name: Name Similarity
  endpoint:
    path: /document/preview/76162#UUID-01286cbd-a01e-9580-5a65-7dca4ddcc359
    method: GET
- name: Name Deduplication
  endpoint:
    path: /document/preview/141755#UUID-2098d1d7-8abd-f468-e996-06771976b229
    method: GET
- name: Address Similarity
  endpoint:
    path: /document/preview/79341#UUID-eebdad42-dad1-e3d5-b97e-cccf5fb6618b
    method: GET
- name: Record Similarity
  endpoint:
    path: /document/preview/186284#UUID-e2b53211-8493-9659-21d9-4f3d5eecd150
    method: GET
- name: entities
  endpoint:
    path: /configuration/gazetteer/add
    method: POST
    data_selector: entities
- name: entities
  endpoint:
    path: /rest/v1/entities
    method: POST
    data_selector: entities
- name: events
  endpoint:
    path: /rest/v1/events
    method: GET
    data_selector: events
- name: language
  endpoint:
    path: /rest/v1/language
    method: GET
    data_selector: language
- name: morphology
  endpoint:
    path: /rest/v1/morphology
    method: GET
    data_selector: morphology
- name: semantics
  endpoint:
    path: /rest/v1/semantics
    method: GET
    data_selector: semantics
- name: sentences
  endpoint:
    path: /rest/v1/sentences
    method: GET
    data_selector: sentences
- name: tokens
  endpoint:
    path: /rest/v1/tokens
    method: GET
    data_selector: tokens
- name: info
  endpoint:
    path: /rest/v1/info
    method: GET
    data_selector: info
- name: ping
  endpoint:
    path: /rest/v1/ping
    method: GET
    data_selector: ping
- name: usage
  endpoint:
    path: /rest/usage
    method: GET
- name: metrics
  endpoint:
    path: /rest/metrics
    method: GET
- name: entities
  endpoint:
    path: /entities
    method: POST
    data_selector: entities
- name: events
  endpoint:
    path: /events
    method: GET
    data_selector: events
- name: language
  endpoint:
    path: /language
    method: GET
    data_selector: language
- name: morphology
  endpoint:
    path: /morphology
    method: GET
    data_selector: morphology
- name: semantics
  endpoint:
    path: /semantics
    method: GET
    data_selector: semantics
- name: sentences
  endpoint:
    path: /sentences
    method: GET
    data_selector: sentences
- name: tokens
  endpoint:
    path: /tokens
    method: GET
    data_selector: tokens
- name: info
  endpoint:
    path: /info
    method: GET
    data_selector: info
- name: ping
  endpoint:
    path: /ping
    method: GET
    data_selector: ping
- name: match_sentences
  endpoint:
    path: /rest/v1/match-sentences/**
    method: GET
- name: python_example
  endpoint:
    path: /rest/v1/python_example
    method: GET
- name: entities
  endpoint:
    path: /entities
    method: POST
    data_selector: configuration
    params: {}
- name: indoc-coref-server
  endpoint:
    path: /entities/indoc-coref-server/supported-languages
    method: GET
    data_selector: languages
    params: {}
- name: custom-profiles
  endpoint:
    path: /custom-profiles
    method: GET
- name: usage_statistics
  endpoint:
    path: /rest/usage
    method: GET
    data_selector: no-app-id
    params: {}
- name: metrics
  endpoint:
    path: /rest/metrics
    method: GET
    data_selector: rosette_http_requests_total
    params: {}
- name: match_sentences
  endpoint:
    path: /rest/v1/match-sentences
    method: POST
    data_selector: result
    params: {}
- name: entities
  endpoint:
    path: /entities
    method: POST
    data_selector: entities
- name: sentiment
  endpoint:
    path: /sentiment
    method: GET
- name: categories
  endpoint:
    path: /categories
    method: GET
- name: language_identification
  endpoint:
    path: /language
    method: GET
    data_selector: shortStringThreshold
    params: {}
- name: ping
  endpoint:
    path: /rest/v1/ping
    method: GET
    data_selector: message
- name: info
  endpoint:
    path: /rest/v1/info
    method: GET
    data_selector: version
- name: entities
  endpoint:
    path: /rest/v1/entities
    method: POST
    data_selector: entities
- name: events
  endpoint:
    path: /rest/v1/events
    method: GET
    data_selector: events
- name: language
  endpoint:
    path: /rest/v1/language
    method: GET
    data_selector: language
- name: morphology
  endpoint:
    path: /rest/v1/morphology
    method: GET
    data_selector: morphology
- name: semantics
  endpoint:
    path: /rest/v1/semantics
    method: GET
    data_selector: semantics
- name: sentences
  endpoint:
    path: /rest/v1/sentences
    method: GET
    data_selector: sentences
- name: tokens
  endpoint:
    path: /rest/v1/tokens
    method: GET
    data_selector: tokens
- name: usage
  endpoint:
    path: /rest/usage
    method: GET
    data_selector: calls
    params: {}
- name: metrics
  endpoint:
    path: /rest/metrics
    method: GET
    data_selector: metrics
    params: {}
- name: match_sentences
  endpoint:
    path: /rest/v1/match-sentences/**
    method: GET
- name: python_example
  endpoint:
    path: /rest/v1/python_example
    method: GET
- name: entities
  endpoint:
    path: /rest/v1/entities
    method: POST
- name: events
  endpoint:
    path: /rest/v1/events
    method: GET
- name: language
  endpoint:
    path: /rest/v1/language
    method: GET
- name: morphology
  endpoint:
    path: /rest/v1/morphology
    method: GET
- name: semantics
  endpoint:
    path: /rest/v1/semantics
    method: GET
- name: sentences
  endpoint:
    path: /rest/v1/sentences
    method: GET
- name: tokens
  endpoint:
    path: /rest/v1/tokens
    method: GET
- name: info
  endpoint:
    path: /rest/v1/info
    method: GET
- name: ping
  endpoint:
    path: /rest/v1/ping
    method: GET
- name: entities
  endpoint:
    path: /entities
    method: POST
    data_selector: results
- name: custom-profiles
  endpoint:
    path: /custom-profiles
    method: GET
    data_selector: profiles
- name: entity_extractor
  endpoint:
    path: /entity/extractor
    method: GET
- name: model_training_suite
  endpoint:
    path: /model/training
    method: GET
- name: usage
  endpoint:
    path: /rest/usage
    method: GET
    data_selector: ''
    params: {}
- name: metrics
  endpoint:
    path: /rest/metrics
    method: GET
    data_selector: ''
    params: {}
- name: match_sentences
  endpoint:
    path: /rest/v1/match-sentences
    method: GET
- name: entities
  endpoint:
    path: /entities
    method: GET
- name: add_gazetteer
  endpoint:
    path: /configuration/gazetteer/add
    method: POST
    data_selector: entities
    params: {}
- name: morphology
  endpoint:
    path: /launcher/config/rosapi/rbl-factory-config.yaml
    method: GET
- name: sentences
  endpoint:
    path: /launcher/config/rosapi/rbl-factory-config.yaml
    method: GET
- name: entities
  endpoint:
    path: /entities
    method: POST
    data_selector: records
- name: events
  endpoint:
    path: /events
    method: GET
    data_selector: records
- name: language
  endpoint:
    path: /language
    method: GET
    data_selector: records
- name: morphology
  endpoint:
    path: /morphology
    method: GET
    data_selector: records
- name: semantics
  endpoint:
    path: /semantics
    method: GET
    data_selector: records
- name: sentences
  endpoint:
    path: /sentences
    method: GET
    data_selector: records
- name: tokens
  endpoint:
    path: /tokens
    method: GET
    data_selector: records
- name: info
  endpoint:
    path: /info
    method: GET
    data_selector: records
- name: ping
  endpoint:
    path: /ping
    method: GET
    data_selector: records
- name: usage
  endpoint:
    path: /rest/usage
    method: GET
- name: metrics
  endpoint:
    path: /rest/metrics
    method: GET
- name: events
  endpoint:
    path: /api/events
    method: GET
    data_selector: records
- name: match_sentences
  endpoint:
    path: /rest/v1/match-sentences
    method: GET
- name: python_example
  endpoint:
    path: /rest/v1/python_example
    method: GET
- name: event_extraction
  endpoint:
    path: /required-endpoints
    method: GET
    data_selector: records
- name: custom_profiles
  endpoint:
    path: /custom-profiles-endpoint
    method: GET
    data_selector: records
- name: event_extraction
  endpoint:
    path: /services/data/vXX.X/sobjects/EventExtraction
    method: GET
    data_selector: records
    params: {}
- name: required_endpoints
  endpoint:
    path: /services/data/vXX.X/sobjects/RequiredEndpoints
    method: GET
    data_selector: records
    params: {}
- name: entities
  endpoint:
    path: /entities
    method: POST
- name: events
  endpoint:
    path: /events
    method: GET
- name: language
  endpoint:
    path: /language
    method: GET
- name: morphology
  endpoint:
    path: /morphology
    method: GET
- name: semantics
  endpoint:
    path: /semantics
    method: GET
- name: sentences
  endpoint:
    path: /sentences
    method: GET
- name: tokens
  endpoint:
    path: /tokens
    method: GET
- name: info
  endpoint:
    path: /info
    method: GET
- name: ping
  endpoint:
    path: /ping
    method: GET
- name: event_extraction
  endpoint:
    path: /services/data/vXX.X/event_extraction
    method: POST
    data_selector: records
- name: usage
  endpoint:
    path: /rest/usage
    method: GET
- name: metrics
  endpoint:
    path: /rest/metrics
    method: GET
- name: sample_app_route
  endpoint:
    path: /rest/v1/match-sentences/**
    method: GET
- name: rosette_pass_thru
  endpoint:
    path: /rest/v1/**
    method: GET
- name: event_extraction
  endpoint:
    path: /services/data/vXX.X/eventExtraction
    method: POST
    data_selector: records
    params: {}
- name: info
  endpoint:
    path: /info
    method: GET
- name: health
  endpoint:
    path: /health
    method: GET
- name: prometheus
  endpoint:
    path: /prometheus
    method: GET
- name: env
  endpoint:
    path: /env
    method: GET
- name: matchSentences
  endpoint:
    path: /matchSentences
    method: GET
- name: name_similarity
  endpoint:
    path: /analytics/match-names/name-similarity/match-names
    method: GET
    data_selector: results
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
- name: entities
  endpoint:
    path: /entities
    method: POST
    data_selector: entities
- name: events
  endpoint:
    path: /events
    method: GET
    data_selector: events
- name: language
  endpoint:
    path: /language
    method: GET
    data_selector: language
- name: morphology
  endpoint:
    path: /morphology
    method: GET
    data_selector: morphology
- name: semantics
  endpoint:
    path: /semantics
    method: GET
    data_selector: semantics
- name: sentences
  endpoint:
    path: /sentences
    method: GET
    data_selector: sentences
- name: tokens
  endpoint:
    path: /tokens
    method: GET
    data_selector: tokens
- name: info
  endpoint:
    path: /info
    method: GET
    data_selector: info
- name: ping
  endpoint:
    path: /ping
    method: GET
    data_selector: ping
- name: custom_profiles
  endpoint:
    path: /api/custom_profiles
    method: GET
    data_selector: profiles
- name: entity_extraction
  endpoint:
    path: /api/entity_extraction
    method: POST
    data_selector: entities
- name: usage
  endpoint:
    path: /rest/usage
    method: GET
- name: metrics
  endpoint:
    path: /rest/metrics
    method: GET
- name: sample_app_route
  endpoint:
    path: /rest/v1/match-sentences/**
    method: GET
    data_selector: ''
    params: {}
- name: rosette_pass_thru
  endpoint:
    path: /rest/v1/**
    method: GET
    data_selector: ''
    params: {}
- name: python_example
  endpoint:
    path: /rest/v1/python_example
    method: GET
    data_selector: ''
    params: {}
- name: required_endpoints
  endpoint:
    path: /required/endpoints
    method: GET
    data_selector: records
- name: health_check
  endpoint:
    path: /health/check
    method: GET
    data_selector: status
- name: name_similarity
  endpoint:
    path: /document/preview/76162#UUID-01286cbd-a01e-9580-5a65-7dca4ddcc359
    method: GET
- name: name_deduplication
  endpoint:
    path: /document/preview/141755#UUID-2098d1d7-8abd-f468-e996-06771976b229
    method: GET
- name: address_similarity
  endpoint:
    path: /document/preview/79341#UUID-eebdad42-dad1-e3d5-b97e-cccf5fb6618b
    method: GET
- name: record_similarity
  endpoint:
    path: /document/preview/186284#UUID-e2b53211-8493-9659-21d9-4f3d5eecd150
    method: GET
- name: entities
  endpoint:
    path: /configuration/gazetteer/add
    method: POST
    data_selector: configuration
    params: {}
- name: required_endpoints
  endpoint:
    path: /required/endpoints
    method: GET
    data_selector: records
- name: entities
  endpoint:
    path: /entities
    method: GET
    data_selector: records
- name: events
  endpoint:
    path: /events
    method: GET
    data_selector: records
- name: language
  endpoint:
    path: /language
    method: GET
    data_selector: records
- name: morphology
  endpoint:
    path: /morphology
    method: GET
    data_selector: records
- name: semantics
  endpoint:
    path: /semantics
    method: GET
    data_selector: records
- name: sentences
  endpoint:
    path: /sentences
    method: GET
    data_selector: records
- name: tokens
  endpoint:
    path: /tokens
    method: GET
    data_selector: records
- name: info
  endpoint:
    path: /info
    method: GET
    data_selector: records
- name: ping
  endpoint:
    path: /ping
    method: GET
    data_selector: records
- name: entities
  endpoint:
    path: /rest/v1/entities
    method: POST
    data_selector: extracted_entities
    params: {}
- name: events
  endpoint:
    path: /rest/v1/events
    method: GET
    data_selector: event_data
    params: {}
- name: language
  endpoint:
    path: /rest/v1/language
    method: GET
    data_selector: language_data
    params: {}
- name: morphology
  endpoint:
    path: /rest/v1/morphology
    method: GET
    data_selector: morphology_data
    params: {}
- name: semantics
  endpoint:
    path: /rest/v1/semantics
    method: GET
    data_selector: semantics_data
    params: {}
- name: sentences
  endpoint:
    path: /rest/v1/sentences
    method: GET
    data_selector: sentences_data
    params: {}
- name: tokens
  endpoint:
    path: /rest/v1/tokens
    method: GET
    data_selector: tokens_data
    params: {}
- name: info
  endpoint:
    path: /rest/v1/info
    method: GET
    data_selector: info_data
    params: {}
- name: ping
  endpoint:
    path: /rest/v1/ping
    method: GET
    data_selector: ping_data
    params: {}
- name: usage
  endpoint:
    path: /rest/usage
    method: GET
- name: metrics
  endpoint:
    path: /rest/metrics
    method: GET
- name: match_sentences
  endpoint:
    path: /rest/v1/match-sentences
    method: GET
- name: entities
  endpoint:
    path: /entities
    method: GET
- name: entities
  endpoint:
    path: /configuration/gazetteer/add
    method: POST
- name: language_identification
  endpoint:
    path: /language
    method: POST
    data_selector: result
    params:
      shortStringThreshold: 20
- name: troop_movement
  endpoint:
    path: /event_extraction/troop_movement
    method: GET
    data_selector: event_mentions
- name: entities
  endpoint:
    path: /rest/v1/entities
    method: POST
    data_selector: entities
    params: {}
- name: entities
  endpoint:
    path: /entities
    method: POST
- name: events
  endpoint:
    path: /events
    method: GET
- name: language
  endpoint:
    path: /language
    method: GET
- name: morphology
  endpoint:
    path: /morphology
    method: GET
- name: semantics
  endpoint:
    path: /semantics
    method: GET
- name: sentences
  endpoint:
    path: /sentences
    method: GET
- name: tokens
  endpoint:
    path: /tokens
    method: GET
- name: info
  endpoint:
    path: /info
    method: GET
- name: ping
  endpoint:
    path: /ping
    method: GET
- name: required_endpoints
  endpoint:
    path: /services/data/vXX.X/required
    method: GET
    data_selector: records
- name: event_extraction
  endpoint:
    path: /services/data/vXX.X/eventExtraction
    method: GET
    data_selector: records
- name: health_check
  endpoint:
    path: /rest/v1/health/services
    method: GET
    data_selector: .
    params: {}
- name: entities
  endpoint:
    path: /rest/v1/entities
    method: POST
    data_selector: entities
- name: usage
  endpoint:
    path: /rest/usage
    method: GET
    data_selector: no-app-id
    params: {}
- name: metrics
  endpoint:
    path: /rest/metrics
    method: GET
    data_selector: rosette_http_requests_total
    params: {}
- name: match_sentences
  endpoint:
    path: /rest/v1/match-sentences
    method: GET
- name: entities
  endpoint:
    path: /entities
    method: GET
- name: add_gazetteer_entry
  endpoint:
    path: /configuration/gazetteer/add
    method: POST
    data_selector: language
    params: {}
- name: events
  endpoint:
    path: /ets/info
    method: GET
    data_selector: info
- name: Indoc Coref Server
  endpoint:
    path: /install-coref
    method: POST
    data_selector: server
    params: {}
- name: event_extraction
  endpoint:
    path: /services/data/vXX.X/eventExtraction
    method: GET
    data_selector: records
    params: {}
- name: Event Training Server
  endpoint:
    path: /ets/info
    method: GET
    data_selector: info
    params: {}
- name: indoc_coref_server
  endpoint:
    path: /install-coref
    method: POST
    data_selector: installation_response
    params:
      install_dir: /basis/coref
      load_image: 'true'
      coref_port: '5000'
- name: adaptation_studio
  endpoint:
    path: /install-ras
    method: POST
    data_selector: installation_response
    params: {}
- name: Event Training Server
  endpoint:
    path: /ets/health
    method: GET
- name: Entity Training Server
  endpoint:
    path: /health
    method: GET
- name: Analytics Server
  endpoint:
    path: /rest/v1/info
    method: GET
- name: ping
  endpoint:
    path: /rest/v1/ping
    method: GET
    data_selector: message
- name: info
  endpoint:
    path: /rest/v1/info
    method: GET
    data_selector: version
- name: server_info
  endpoint:
    path: /rts/info/server
    method: GET
    data_selector: version
- name: dal_connector_test
  endpoint:
    path: /rts/rex/test-dal-connector
    method: POST
    data_selector: tests
- name: Required endpoints
  endpoint:
    path: /services/data/vXX.X/sobjects/RequiredEndpoints
    method: GET
    data_selector: records
- name: indoc_coref_server
  endpoint:
    path: /install-coref
    method: POST
    data_selector: server_installation
    params:
      install_dir: /basis/coref
      load_image: 'true'
      coref_port: '5000'
- name: adaptation_studio
  endpoint:
    path: /install-ras
    method: POST
    data_selector: studio_installation
    params:
      install_dir: /basis/ras
      logs_dir: /basis/ras/logs
      ssl_enabled: 'true'
      ssl_cert_dir: /basis/ras/certs
      ssl_cert_key: path/to/cert/key
      ssl_cert_file: path/to/cert/file
      https_port: '443'
      http_port: '80'
      rex_training_server_host: localhost
      rex_training_server_port: '9080'
      event_training_server_host: localhost
      event_training_server_port: '9999'
      analytics_server_host: localhost
      analytics_server_port: '8181'
      db_data_dir: /basis/ras/mongo_data_db
      backup_dir: /basis/ras/mongo_data_dump
      db_port: '27017'
- name: server_info
  endpoint:
    path: /rts/info/server
    method: GET
    data_selector: version
    params: {}
- name: dal_connection_test
  endpoint:
    path: /rts/rex/test-dal-connector
    method: POST
    data_selector: tests
    params: {}
- name: entities
  endpoint:
    path: /entities
    method: POST
    data_selector: entities
- name: required_endpoints
  endpoint:
    path: /required/endpoints
    method: GET
    data_selector: records
- name: custom_profiles
  endpoint:
    path: /custom-profiles
    method: GET
    data_selector: profiles
    params: {}
- name: Event Training Server
  endpoint:
    path: /ets
    method: GET
    data_selector: info
    params: {}
- name: server_info
  endpoint:
    path: /rts/info/server
    method: GET
    data_selector: version
- name: dal_connection_test
  endpoint:
    path: /rts/rex/test-dal-connector
    method: POST
    data_selector: tests
    params:
      connectorId: AS_MONGO
      corpusType: ANNOTATED_TRAIN_CORPUS
      healthCheck: 'true'
      config:
        projectId: 5f1470b6412ff29b8e4982f3
        sampleIds: 5f158b0e412ff29b8e4983b8,5f158b0e412ff29b8e4983b5,5f158b0e412ff29b8e4983b7
- name: events
  endpoint:
    path: /events
    method: POST
    data_selector: data
    params: {}
- name: required_endpoints
  endpoint:
    path: /services/data/vXX.X/required_endpoints
    method: GET
    data_selector: records
- name: health_check
  endpoint:
    path: /services/data/vXX.X/health_check
    method: GET
    data_selector: records
- name: rex-training-server
  endpoint:
    path: /
    method: GET
    data_selector: data
    params: {}
- name: indoc_coref
  endpoint:
    path: /indoc/coref
    method: POST
    data_selector: results
    params: {}
- name: server_info
  endpoint:
    path: /rts/info/server
    method: GET
    data_selector: version
- name: dal_connection_test
  endpoint:
    path: /rts/rex/test-dal-connector
    method: POST
    data_selector: tests
- name: entities
  endpoint:
    path: /entities
    method: GET
    data_selector: ''
    params: {}
- name: events
  endpoint:
    path: /events
    method: GET
    data_selector: ''
    params: {}
- name: language
  endpoint:
    path: /language
    method: GET
    data_selector: ''
    params: {}
- name: morphology
  endpoint:
    path: /morphology
    method: GET
    data_selector: ''
    params: {}
- name: semantics
  endpoint:
    path: /semantics
    method: GET
    data_selector: ''
    params: {}
- name: sentences
  endpoint:
    path: /sentences
    method: GET
    data_selector: ''
    params: {}
- name: tokens
  endpoint:
    path: /tokens
    method: GET
    data_selector: ''
    params: {}
- name: info
  endpoint:
    path: /info
    method: GET
    data_selector: ''
    params: {}
- name: ping
  endpoint:
    path: /ping
    method: GET
    data_selector: ''
    params: {}
- name: Analytics Server
  endpoint:
    path: /update-rs-configuration
    method: POST
    data_selector: response
    params: {}
- name: event_extraction
  endpoint:
    path: /services/data/vXX.X/sobjects/EventExtraction
    method: GET
    data_selector: records
    params: {}
- name: Indoc Coref Server
  endpoint:
    path: /coref
    method: POST
    data_selector: response
    params: {}
- name: troop_movement
  endpoint:
    path: /services/data/vXX.X/sobjects/troop_movement
    method: GET
    data_selector: records
- name: server_info
  endpoint:
    path: /rts/info/server
    method: GET
    data_selector: version
- name: dal_connection_test
  endpoint:
    path: /rts/rex/test-dal-connector
    method: POST
    data_selector: tests
    params:
      connectorId: AS_MONGO
      corpusType: ANNOTATED_TRAIN_CORPUS
      healthCheck: 'true'
      config:
        projectId: 5f1470b6412ff29b8e4982f3
        sampleIds: 5f158b0e412ff29b8e4983b8,5f158b0e412ff29b8e4983b5,5f158b0e412ff29b8e4983b7
- name: entities
  endpoint:
    path: /rest/v1/entities
    method: POST
    data_selector: entities
- name: entities
  endpoint:
    path: /rest/v1/entities
    method: POST
    data_selector: entities
- name: entities
  endpoint:
    path: /rest/v1/entities
    method: POST
    data_selector: entities
- name: events
  endpoint:
    path: /rest/v1/events
    method: POST
    data_selector: events
- name: entities
  endpoint:
    path: /rest/v1/entities
    method: POST
    data_selector: entities
- name: custom-profiles
  endpoint:
    path: /rest/v1/custom-profiles
    method: GET
    data_selector: profiles
- name: required_endpoints
  endpoint:
    path: /services/data/vXX.X/required_endpoints
    method: GET
    data_selector: records
    params: {}
- name: entities
  endpoint:
    path: /rest/v1/entities
    method: POST
    data_selector: entities
- name: required_endpoints
  endpoint:
    path: /required/endpoints
    method: GET
    data_selector: records
- name: event_extraction
  endpoint:
    path: /event/extraction
    method: GET
    data_selector: records
- name: entities
  endpoint:
    path: /ets/info
    method: GET
- name: install_coref
  endpoint:
    path: /install-coref.sh
    method: POST
    data_selector: installation
    params: {}
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
- name: indoc_coref_server
  endpoint:
    path: /install-coref
    method: POST
    data_selector: installation
    params:
      install_dir: /basis/coref
      load_image: 'true'
      coref_port: '5000'
- name: adaptation_studio
  endpoint:
    path: /install-ras
    method: POST
    data_selector: installation
    params: {}
- name: Event Training Server
  endpoint:
    path: /ets/health
    method: GET
- name: Entity Training Server
  endpoint:
    path: /health
    method: GET
- name: Analytics Server
  endpoint:
    path: /rest/v1/info
    method: GET
- name: Adaptation Studio
  endpoint:
    path: /
    method: GET
- name: ping
  endpoint:
    path: /ping
    method: GET
    data_selector: message
- name: info
  endpoint:
    path: /info
    method: GET
    data_selector: name
- name: server_info
  endpoint:
    path: /rts/info/server
    method: GET
    data_selector: version
- name: dal_connection_test
  endpoint:
    path: /rts/rex/test-dal-connector
    method: POST
    data_selector: tests
    params:
      connectorId: AS_MONGO
      corpusType: ANNOTATED_TRAIN_CORPUS
      healthCheck: 'true'
- name: event_extraction
  endpoint:
    path: /services/data/vXX.X/sobjects/EventExtraction
    method: GET
    data_selector: records
- name: Analytics Server
  endpoint:
    path: /analytics/server
    method: GET
    data_selector: records
    params: {}
- name: Entity Training Server
  endpoint:
    path: /entity/training/server
    method: GET
    data_selector: records
    params: {}
- name: Event Training Server
  endpoint:
    path: /event/training/server
    method: GET
    data_selector: records
    params: {}
- name: Adaptation Studio
  endpoint:
    path: /adaptation/studio
    method: GET
    data_selector: records
    params: {}
- name: ADJ
  endpoint:
    path: /tags/ADJ
    method: GET
    data_selector: records
    params: {}
- name: ADJCMP
  endpoint:
    path: /tags/ADJCMP
    method: GET
    data_selector: records
    params: {}
- name: ADJING
  endpoint:
    path: /tags/ADJING
    method: GET
    data_selector: records
    params: {}
- name: ADJPAP
  endpoint:
    path: /tags/ADJPAP
    method: GET
    data_selector: records
    params: {}
- name: ADJPRON
  endpoint:
    path: /tags/ADJPRON
    method: GET
    data_selector: records
    params: {}
- name: ADJSUP
  endpoint:
    path: /tags/ADJSUP
    method: GET
    data_selector: records
    params: {}
- name: ADV
  endpoint:
    path: /tags/ADV
    method: GET
    data_selector: records
    params: {}
- name: ADVCMP
  endpoint:
    path: /tags/ADVCMP
    method: GET
    data_selector: records
    params: {}
- name: ADVSUP
  endpoint:
    path: /tags/ADVSUP
    method: GET
    data_selector: records
    params: {}
- name: CARD
  endpoint:
    path: /tags/CARD
    method: GET
    data_selector: records
    params: {}
- name: CARDONE
  endpoint:
    path: /tags/CARDONE
    method: GET
    data_selector: records
    params: {}
- name: CM
  endpoint:
    path: /tags/CM
    method: GET
    data_selector: records
    params: {}
- name: COADV
  endpoint:
    path: /tags/COADV
    method: GET
    data_selector: records
    params: {}
- name: COORD
  endpoint:
    path: /tags/COORD
    method: GET
    data_selector: records
    params: {}
- name: COSUB
  endpoint:
    path: /tags/COSUB
    method: GET
    data_selector: records
    params: {}
- name: COTHAN
  endpoint:
    path: /tags/COTHAN
    method: GET
    data_selector: records
    params: {}
- name: DET
  endpoint:
    path: /tags/DET
    method: GET
    data_selector: records
    params: {}
- name: DETREL
  endpoint:
    path: /tags/DETREL
    method: GET
    data_selector: records
    params: {}
- name: INFTO
  endpoint:
    path: /tags/INFTO
    method: GET
    data_selector: records
    params: {}
- name: ITJ
  endpoint:
    path: /tags/ITJ
    method: GET
    data_selector: records
    params: {}
- name: MEAS
  endpoint:
    path: /tags/MEAS
    method: GET
    data_selector: records
    params: {}
- name: MONEY
  endpoint:
    path: /tags/MONEY
    method: GET
    data_selector: records
    params: {}
- name: NOT
  endpoint:
    path: /tags/NOT
    method: GET
    data_selector: records
    params: {}
- name: NOUN
  endpoint:
    path: /tags/NOUN
    method: GET
    data_selector: records
    params: {}
- name: NOUNING
  endpoint:
    path: /tags/NOUNING
    method: GET
    data_selector: records
    params: {}
- name: ORD
  endpoint:
    path: /tags/ORD
    method: GET
    data_selector: records
    params: {}
- name: PARTPAST
  endpoint:
    path: /tags/PARTPAST
    method: GET
    data_selector: records
    params: {}
- name: PARTPRES
  endpoint:
    path: /tags/PARTPRES
    method: GET
    data_selector: records
    params: {}
- name: POSS
  endpoint:
    path: /tags/POSS
    method: GET
    data_selector: records
    params: {}
- name: PREDET
  endpoint:
    path: /tags/PREDET
    method: GET
    data_selector: records
    params: {}
- name: PREP
  endpoint:
    path: /tags/PREP
    method: GET
    data_selector: records
    params: {}
- name: PREPADVAS
  endpoint:
    path: /tags/PREPADVAS
    method: GET
    data_selector: records
    params: {}
- name: PRON
  endpoint:
    path: /tags/PRON
    method: GET
    data_selector: records
    params: {}
- name: PRONONE
  endpoint:
    path: /tags/PRONONE
    method: GET
    data_selector: records
    params: {}
- name: PRONPERS
  endpoint:
    path: /tags/PRONPERS
    method: GET
    data_selector: records
    params: {}
- name: PRONREFL
  endpoint:
    path: /tags/PRONREFL
    method: GET
    data_selector: records
    params: {}
- name: PRONREL
  endpoint:
    path: /tags/PRONREL
    method: GET
    data_selector: records
    params: {}
- name: PROP
  endpoint:
    path: /tags/PROP
    method: GET
    data_selector: records
    params: {}
- name: PUNCT
  endpoint:
    path: /tags/PUNCT
    method: GET
    data_selector: records
    params: {}
- name: QUANT
  endpoint:
    path: /tags/QUANT
    method: GET
    data_selector: records
    params: {}
- name: QUANTADV
  endpoint:
    path: /tags/QUANTADV
    method: GET
    data_selector: records
    params: {}
- name: QUANTCMP
  endpoint:
    path: /tags/QUANTCMP
    method: GET
    data_selector: records
    params: {}
- name: QUANTSUP
  endpoint:
    path: /tags/QUANTSUP
    method: GET
    data_selector: records
    params: {}
- name: SENT
  endpoint:
    path: /tags/SENT
    method: GET
    data_selector: records
    params: {}
- name: TIT
  endpoint:
    path: /tags/TIT
    method: GET
    data_selector: records
    params: {}
- name: VAUX
  endpoint:
    path: /tags/VAUX
    method: GET
    data_selector: records
    params: {}
- name: VBI
  endpoint:
    path: /tags/VBI
    method: GET
    data_selector: records
    params: {}
- name: VBPAP
  endpoint:
    path: /tags/VBPAP
    method: GET
    data_selector: records
    params: {}
- name: VBPAST
  endpoint:
    path: /tags/VBPAST
    method: GET
    data_selector: records
    params: {}
- name: VBPRES
  endpoint:
    path: /tags/VBPRES
    method: GET
    data_selector: records
    params: {}
- name: VPROG
  endpoint:
    path: /tags/VPROG
    method: GET
    data_selector: records
    params: {}
- name: VS
  endpoint:
    path: /tags/VS
    method: GET
    data_selector: records
    params: {}
- name: WADV
  endpoint:
    path: /tags/WADV
    method: GET
    data_selector: records
    params: {}
- name: WDET
  endpoint:
    path: /tags/WDET
    method: GET
    data_selector: records
    params: {}
- name: WPRON
  endpoint:
    path: /tags/WPRON
    method: GET
    data_selector: records
    params: {}
- name: ADJ
  endpoint:
    path: /ADJ
    method: GET
    data_selector: description
    params: {}
- name: ADV
  endpoint:
    path: /ADV
    method: GET
    data_selector: description
    params: {}
- name: CONJ
  endpoint:
    path: /CONJ
    method: GET
    data_selector: description
    params: {}
- name: coreference_server
  endpoint:
    path: /install-coref-headless.properties
    method: GET
    data_selector: properties
    params: {}
- name: server_info
  endpoint:
    path: /rts/info/server
    method: GET
    data_selector: version
- name: dal_connection_test
  endpoint:
    path: /rts/rex/test-dal-connector
    method: POST
    data_selector: tests
    params: {}
- name: tokenize_analyze
  endpoint:
    path: /rbl-je-<version>/samples/tokenize-analyze
    method: GET
- name: annotator_tokenize
  endpoint:
    path: /rbl-je-<version>/samples/annotator-tokenize
    method: GET
- name: adjective
  endpoint:
    path: /hungarian/pos/adjective
    method: GET
    data_selector: records
- name: adverb
  endpoint:
    path: /hungarian/pos/adverb
    method: GET
    data_selector: records
- name: conjunction
  endpoint:
    path: /hungarian/pos/conjunction
    method: GET
    data_selector: records
- name: noun
  endpoint:
    path: /hungarian/pos/noun
    method: GET
    data_selector: records
- name: verb
  endpoint:
    path: /hungarian/pos/verb
    method: GET
    data_selector: records
- name: POS Tags
  endpoint:
    path: /api/tags/italian
    method: GET
    data_selector: tags
- name: standard_entity_types
  endpoint:
    path: /standard/entity/types
    method: GET
    data_selector: records
- name: custom_profiles
  endpoint:
    path: /custom/profiles
    method: GET
    data_selector: records
- name: ADJ
  endpoint:
    path: /tags/ADJ
    method: GET
    data_selector: records
    params: {}
- name: ADV
  endpoint:
    path: /tags/ADV
    method: GET
    data_selector: records
    params: {}
- name: CONJ
  endpoint:
    path: /tags/CONJ
    method: GET
    data_selector: records
    params: {}
- name: NOUN
  endpoint:
    path: /tags/NOUN
    method: GET
    data_selector: records
    params: {}
- name: NUM
  endpoint:
    path: /tags/NUM
    method: GET
    data_selector: records
    params: {}
- name: Entity Training Server
  endpoint:
    path: /basis/rts
    method: GET
    data_selector: records
    params: {}
- name: Event Training Server
  endpoint:
    path: /basis/ets
    method: GET
    data_selector: records
    params: {}
- name: server_info
  endpoint:
    path: /rts/info/server
    method: GET
    data_selector: assetRoot
    params: {}
- name: dal_connection_test
  endpoint:
    path: /rts/rex/test-dal-connector
    method: POST
    data_selector: tests
    params:
      connectorId: AS_MONGO
      corpusType: ANNOTATED_TRAIN_CORPUS
      healthCheck: 'true'
- name: analytics_server
  endpoint:
    path: /update-rs-configuration
    method: POST
    data_selector: response
    params: {}
- name: adjective
  endpoint:
    path: /pos-tags/adjective
    method: GET
    data_selector: records
- name: adverb
  endpoint:
    path: /pos-tags/adverb
    method: GET
    data_selector: records
- name: conjunction
  endpoint:
    path: /pos-tags/conjunction
    method: GET
    data_selector: records
- name: copula
  endpoint:
    path: /pos-tags/copula
    method: GET
    data_selector: records
- name: existential
  endpoint:
    path: /pos-tags/existential
    method: GET
    data_selector: records
- name: indInf
  endpoint:
    path: /pos-tags/indInf
    method: GET
    data_selector: records
- name: interjection
  endpoint:
    path: /pos-tags/interjection
    method: GET
    data_selector: records
- name: interrogative
  endpoint:
    path: /pos-tags/interrogative
    method: GET
    data_selector: records
- name: modal
  endpoint:
    path: /pos-tags/modal
    method: GET
    data_selector: records
- name: negation
  endpoint:
    path: /pos-tags/negation
    method: GET
    data_selector: records
- name: noun
  endpoint:
    path: /pos-tags/noun
    method: GET
    data_selector: records
- name: numeral
  endpoint:
    path: /pos-tags/numeral
    method: GET
    data_selector: records
- name: participle
  endpoint:
    path: /pos-tags/participle
    method: GET
    data_selector: records
- name: passiveParticiple
  endpoint:
    path: /pos-tags/passiveParticiple
    method: GET
    data_selector: records
- name: preposition
  endpoint:
    path: /pos-tags/preposition
    method: GET
    data_selector: records
- name: pronoun
  endpoint:
    path: /pos-tags/pronoun
    method: GET
    data_selector: records
- name: properName
  endpoint:
    path: /pos-tags/properName
    method: GET
    data_selector: records
- name: quantifier
  endpoint:
    path: /pos-tags/quantifier
    method: GET
    data_selector: records
- name: title
  endpoint:
    path: /pos-tags/title
    method: GET
    data_selector: records
- name: unknown
  endpoint:
    path: /pos-tags/unknown
    method: GET
    data_selector: records
- name: verb
  endpoint:
    path: /pos-tags/verb
    method: GET
    data_selector: records
- name: wPrefix
  endpoint:
    path: /pos-tags/wPrefix
    method: GET
    data_selector: records
- name: italian_pos_tags
  endpoint:
    path: /api/italian/pos_tags
    method: GET
    data_selector: tags
    params: {}
- name: Analytics Server
  endpoint:
    path: /rest/v1/custom-profiles
    method: GET
    data_selector: profiles
- name: ADJ
  endpoint:
    path: /tags/ADJ
    method: GET
    data_selector: tags
    params: {}
- name: ADV
  endpoint:
    path: /tags/ADV
    method: GET
    data_selector: tags
    params: {}
- name: CONJ
  endpoint:
    path: /tags/CONJ
    method: GET
    data_selector: tags
    params: {}
- name: NOUN
  endpoint:
    path: /tags/NOUN
    method: GET
    data_selector: tags
    params: {}
- name: NUM
  endpoint:
    path: /tags/NUM
    method: GET
    data_selector: tags
    params: {}
- name: French_POS_Tags
  endpoint:
    path: /french/pos/tags
    method: GET
    data_selector: tags
    params: {}
- name: language_neutral_tags
  endpoint:
    path: /api/language_neutral/tags
    method: GET
    data_selector: tags
    params: {}
- name: server_info
  endpoint:
    path: /rts/info/server
    method: GET
    data_selector: version
- name: dal_connection_test
  endpoint:
    path: /rts/rex/test-dal-connector
    method: POST
    data_selector: tests
    params:
      connectorId: AS_MONGO
      corpusType: ANNOTATED_TRAIN_CORPUS
      healthCheck: 'true'
      config:
        projectId: 5f1470b6412ff29b8e4982f3
        sampleIds: 5f158b0e412ff29b8e4983b8,5f158b0e412ff29b8e4983b5,5f158b0e412ff29b8e4983b7
- name: ADJ
  endpoint:
    path: /BT_PORTUGUESE/ADJ
    method: GET
    data_selector: description
    params: {}
- name: ADV
  endpoint:
    path: /BT_PORTUGUESE/ADV
    method: GET
    data_selector: description
    params: {}
- name: CONJ
  endpoint:
    path: /BT_PORTUGUESE/CONJ
    method: GET
    data_selector: description
    params: {}
- name: Chinese and Japanese Lexical Tokenization
  endpoint:
    path: /analysis/tokenization/zh-jp
    method: GET
    data_selector: options
    params: {}
- name: Hebrew Analyses
  endpoint:
    path: /analysis/hebrew
    method: GET
    data_selector: options
    params: {}
- name: Arabic, Persian, and Urdu Token Analysis
  endpoint:
    path: /analysis/tokenization/ar-pe-ur
    method: GET
    data_selector: options
    params: {}
- name: entities
  endpoint:
    path: /rest/v1/entities
    method: POST
    data_selector: content
    params:
      profileId: group1
- name: COLORS
  endpoint:
    path: /entities/COLORS
    method: POST
- name: ANIMALS
  endpoint:
    path: /entities/ANIMALS
    method: POST
- name: french_pos_tags
  endpoint:
    path: /french_pos_tags
    method: GET
    data_selector: tags
    params: {}
- name: analyze_language
  endpoint:
    path: /analyze/language
    method: GET
    data_selector: tags
    params: {}
- name: Analytics Server
  endpoint:
    path: /services/data/vXX.X/sobjects/AnalyticsServer
    method: GET
- name: Entity Training Server
  endpoint:
    path: /services/data/vXX.X/sobjects/EntityTrainingServer
    method: GET
- name: Event Training Server
  endpoint:
    path: /services/data/vXX.X/sobjects/EventTrainingServer
    method: GET
- name: Adaptation Studio
  endpoint:
    path: /services/data/vXX.X/sobjects/AdaptationStudio
    method: GET
- name: language_neutral_pos_tags
  endpoint:
    path: /api/language/neutral/pos/tags
    method: GET
    data_selector: tags
    params: {}
- name: Titles
  endpoint:
    path: /titles/analyze_language
    method: GET
    data_selector: records
- name: Indoc Coref Server Installer
  endpoint:
    path: /coref-installation
    method: POST
    data_selector: installation
    params: {}
- name: Adaptation Studio Installer
  endpoint:
    path: /ras-installation
    method: POST
    data_selector: installation
    params: {}
- name: BaseLinguisticsAnalyzer
  endpoint:
    path: /base-linguistics/analyzer
    method: GET
    data_selector: analyzer
- name: BaseLinguisticsTokenizerFactory
  endpoint:
    path: /base-linguistics/tokenizer
    method: GET
    data_selector: tokenizer
- name: BaseLinguisticsTokenFilterFactory
  endpoint:
    path: /base-linguistics/tokenfilter
    method: GET
    data_selector: tokenfilter
- name: server_info
  endpoint:
    path: /rts/info/server
    method: GET
    data_selector: version
- name: dal_connection_test
  endpoint:
    path: /rts/rex/test-dal-connector
    method: POST
    data_selector: tests
- name: entities
  endpoint:
    path: /entities
    method: POST
    data_selector: entities
- name: entities
  endpoint:
    path: /rest/v1/entities
    method: POST
    data_selector: entities
- name: events
  endpoint:
    path: /rest/v1/events
    method: POST
    data_selector: events
- name: mentions
  endpoint:
    path: /api/mentions
    method: GET
    data_selector: mentions
- name: emails
  endpoint:
    path: /api/emails
    method: GET
    data_selector: emails
- name: emojis
  endpoint:
    path: /api/emojis
    method: GET
    data_selector: emojis
- name: hashtags
  endpoint:
    path: /api/hashtags
    method: GET
    data_selector: hashtags
- name: urls
  endpoint:
    path: /api/urls
    method: GET
    data_selector: urls
- name: POS_Tags
  endpoint:
    path: /api/pos_tags
    method: GET
    data_selector: tags
    params: {}
- name: entities
  endpoint:
    path: /entities
    method: POST
    data_selector: entities
- name: custom_profiles
  endpoint:
    path: /custom-profiles
    method: GET
    data_selector: ''
- name: English_POS_Tags
  endpoint:
    path: /api/english_pos_tags
    method: GET
    data_selector: tags
    params: {}
- name: French_POS_Tags
  endpoint:
    path: /api/french_pos_tags
    method: GET
    data_selector: tags
    params: {}
- name: German_POS_Tags
  endpoint:
    path: /api/german_pos_tags
    method: GET
    data_selector: tags
    params: {}
- name: Greek_POS_Tags
  endpoint:
    path: /api/greek_pos_tags
    method: GET
    data_selector: tags
    params: {}
- name: Hebrew_POS_Tags
  endpoint:
    path: /api/hebrew_pos_tags
    method: GET
    data_selector: tags
    params: {}
- name: Hungarian_POS_Tags
  endpoint:
    path: /api/hungarian_pos_tags
    method: GET
    data_selector: tags
    params: {}
- name: POS Tags
  endpoint:
    path: /bt_italian/pos_tags
    method: GET
    data_selector: tags
    params: {}
- name: event_extraction
  endpoint:
    path: /required/endpoints
    method: GET
    data_selector: records
- name: ADJ
  endpoint:
    path: /tags/adjective
    method: GET
    data_selector: records
    params: {}
- name: ADV
  endpoint:
    path: /tags/adverb
    method: GET
    data_selector: records
    params: {}
- name: CONJ
  endpoint:
    path: /tags/conjunction
    method: GET
    data_selector: records
    params: {}
- name: NOUN
  endpoint:
    path: /tags/noun
    method: GET
    data_selector: records
    params: {}
- name: dictionaryDirectory
  endpoint:
    path: ${rootDirectory}/dicts
    method: GET
- name: licensePath
  endpoint:
    path: ${rootDirectory}/licenses/rlp-license.xml
    method: GET
- name: modelDirectory
  endpoint:
    path: ${rootDirectory}/models
    method: GET
- name: rootDirectory
  endpoint:
    path: ''
    method: GET
- name: language_neutral_tags
  endpoint:
    path: /api/language_neutral/tags
    method: GET
    data_selector: tags
- name: language_detection
  endpoint:
    path: /detect
    method: POST
    data_selector: results
- name: language_region_detection
  endpoint:
    path: /detect/regions
    method: POST
    data_selector: regions
- name: tokenize
  endpoint:
    path: /tokenize
    method: POST
    data_selector: data
- name: analyze
  endpoint:
    path: /analyze
    method: POST
    data_selector: data
- name: POS Tags
  endpoint:
    path: /api/v1/pos_tags
    method: GET
    data_selector: tags
    params: {}
- name: required_rosette_endpoints
  endpoint:
    path: /services/data/vXX.X/sobjects/RequiredRosetteEndpoints
    method: GET
    data_selector: records
    params: {}
- name: french_pos_tags
  endpoint:
    path: /api/french/pos/tags
    method: GET
    data_selector: tags
    params: {}
- name: language_neutral_pos_tags
  endpoint:
    path: /api/language_neutral/pos_tags
    method: GET
    data_selector: tags
- name: analyzer_options
  endpoint:
    path: /analyzers/options
    method: GET
    data_selector: options
    params: {}
- name: entities
  endpoint:
    path: /entities
    method: POST
    data_selector: entities
- name: ping
  endpoint:
    path: /ping
    method: GET
    data_selector: message
- name: info
  endpoint:
    path: /info
    method: GET
    data_selector: version
- name: mention
  endpoint:
    path: /api/v1/mentions
    method: GET
    data_selector: mentions
- name: email
  endpoint:
    path: /api/v1/emails
    method: GET
    data_selector: emails
- name: hashtag
  endpoint:
    path: /api/v1/hashtags
    method: GET
    data_selector: hashtags
- name: url
  endpoint:
    path: /api/v1/urls
    method: GET
    data_selector: urls
- name: emoji
  endpoint:
    path: /api/v1/emojis
    method: GET
    data_selector: emojis
- name: health
  endpoint:
    path: /rest/v1/health/services
    method: GET
    data_selector: services
- name: ADJ
  endpoint:
    path: /tags/ADJ
    method: GET
    data_selector: tags
- name: ADV
  endpoint:
    path: /tags/ADV
    method: GET
    data_selector: tags
- name: CONJ
  endpoint:
    path: /tags/CONJ
    method: GET
    data_selector: tags
- name: NOUN
  endpoint:
    path: /tags/NOUN
    method: GET
    data_selector: tags
- name: custom-profiles
  endpoint:
    path: /custom-profiles
    method: GET
    data_selector: profiles
- name: entities
  endpoint:
    path: /entities
    method: POST
    data_selector: entities
- name: Chinese Language Analyzer
  endpoint:
    path: /base-linguistics/chinese-analyzer
    method: GET
    data_selector: records
- name: Japanese Language Analyzer
  endpoint:
    path: /base-linguistics/japanese-analyzer
    method: GET
    data_selector: records
- name: Hebrew Analyzer
  endpoint:
    path: /base-linguistics/hebrew-analyzer
    method: GET
    data_selector: records
- name: Arabic Token Analysis
  endpoint:
    path: /base-linguistics/arabic-token-analysis
    method: GET
    data_selector: records
- name: Persian Token Analysis
  endpoint:
    path: /base-linguistics/persian-token-analysis
    method: GET
    data_selector: records
- name: Urdu Token Analysis
  endpoint:
    path: /base-linguistics/urdu-token-analysis
    method: GET
    data_selector: records
- name: usage
  endpoint:
    path: /rest/usage
    method: GET
- name: metrics
  endpoint:
    path: /rest/metrics
    method: GET
- name: matchSentences
  endpoint:
    path: /rest/v1/match-sentences
    method: POST
    data_selector: result
- name: entities
  endpoint:
    path: /rest/v1/entities
    method: POST
- name: adjective
  endpoint:
    path: /tags/adjective
    method: GET
    data_selector: tags
- name: adverb
  endpoint:
    path: /tags/adverb
    method: GET
    data_selector: tags
- name: noun
  endpoint:
    path: /tags/noun
    method: GET
    data_selector: tags
- name: Japanese POS Tags
  endpoint:
    path: /pos_tags/japanese
    method: GET
    data_selector: tags
    params: {}
- name: fragment_boundary_detection
  endpoint:
    path: /sentences
    method: GET
    data_selector: records
    params: {}
- name: language_identification
  endpoint:
    path: /language
    method: GET
    data_selector: records
    params: {}
- name: categorization
  endpoint:
    path: /categories
    method: GET
    data_selector: records
    params: {}
- name: sentiment
  endpoint:
    path: /sentiment
    method: GET
    data_selector: records
    params: {}
- name: mention
  endpoint:
    path: /mentions
    method: GET
    data_selector: mentions
- name: email
  endpoint:
    path: /emails
    method: GET
    data_selector: emails
- name: emoji
  endpoint:
    path: /emojis
    method: GET
    data_selector: emojis
- name: hashtag
  endpoint:
    path: /hashtags
    method: GET
    data_selector: hashtags
- name: url
  endpoint:
    path: /urls
    method: GET
    data_selector: urls
- name: entities
  endpoint:
    path: /entities
    method: POST
    data_selector: entities
- name: info
  endpoint:
    path: /info
    method: GET
    data_selector: info
- name: ping
  endpoint:
    path: /ping
    method: GET
    data_selector: message
- name: JapaneseAnalyzerSample
  endpoint:
    path: /samples/lucene-7-0/JapaneseAnalyzerSample.java
    method: GET
    data_selector: samples
    params: {}
- name: JapaneseTokenizerAndFilterSample
  endpoint:
    path: /samples/lucene-7-0/JapaneseTokenizerAndFilterSample.java
    method: GET
    data_selector: samples
    params: {}
- name: AnalysesAttributeSample
  endpoint:
    path: /samples/lucene-<version>/AnalysesAttributeSample.java
    method: GET
    data_selector: samples
    params: {}
- name: pos_tags
  endpoint:
    path: /api/v1/pos_tags
    method: GET
    data_selector: tags
- name: usage
  endpoint:
    path: /rest/usage
    method: GET
- name: metrics
  endpoint:
    path: /rest/metrics
    method: GET
- name: matchSentences
  endpoint:
    path: /rest/v1/match-sentences
    method: POST
- name: ADJ
  endpoint:
    path: /tags/adjective
    method: GET
    data_selector: tags
    params: {}
- name: ADV
  endpoint:
    path: /tags/adverb
    method: GET
    data_selector: tags
    params: {}
- name: CONJ
  endpoint:
    path: /tags/conjunction
    method: GET
    data_selector: tags
    params: {}
- name: NOUN
  endpoint:
    path: /tags/noun
    method: GET
    data_selector: tags
    params: {}
- name: NUM
  endpoint:
    path: /tags/number
    method: GET
    data_selector: tags
    params: {}
- name: entities
  endpoint:
    path: /rest/v1/entities
    method: POST
    data_selector: entities
- name: fragment_boundary_detection
  endpoint:
    path: /sentences
    method: GET
    data_selector: fragmentBoundaries
- name: language_identification
  endpoint:
    path: /language
    method: GET
    data_selector: languageData
- name: categorization
  endpoint:
    path: /categories
    method: GET
    data_selector: categoriesData
- name: sentiment
  endpoint:
    path: /sentiment
    method: GET
    data_selector: sentimentData
- name: language
  endpoint:
    path: /language
    method: GET
    data_selector: shortStringThreshold
    params: {}
- name: ping
  endpoint:
    path: /ping
    method: GET
    data_selector: message
- name: info
  endpoint:
    path: /info
    method: GET
    data_selector: name
- name: entities
  endpoint:
    path: /entities
    method: POST
    data_selector: entities
- name: health_check
  endpoint:
    path: /rest/v1/health/services
    method: GET
    data_selector: .
    params: {}
- name: custom-profiles
  endpoint:
    path: /custom-profiles
    method: GET
    data_selector: profiles
- name: entities
  endpoint:
    path: /entities
    method: POST
    data_selector: entities
- name: usage
  endpoint:
    path: /rest/usage
    method: GET
- name: metrics
  endpoint:
    path: /rest/metrics
    method: GET
- name: match_sentences
  endpoint:
    path: /rest/v1/match-sentences
    method: POST
- name: entities
  endpoint:
    path: /rest/v1/entities
    method: POST
    data_selector: entities
    params: {}
- name: fragment_boundary_detection
  endpoint:
    path: /sentences
    method: GET
    data_selector: ''
    params: {}
- name: language_identification
  endpoint:
    path: /language
    method: GET
    data_selector: ''
    params: {}
- name: categorization
  endpoint:
    path: /categories
    method: GET
    data_selector: ''
    params: {}
- name: sentiment
  endpoint:
    path: /sentiment
    method: GET
    data_selector: ''
    params: {}
- name: entities
  endpoint:
    path: /entities
    method: POST
    data_selector: response
    params: {}
- name: ping
  endpoint:
    path: /ping
    method: GET
    data_selector: message
    params: {}
- name: info
  endpoint:
    path: /info
    method: GET
    data_selector: version
    params: {}
- name: health_check
  endpoint:
    path: /rest/v1/health/services
    method: GET
    data_selector: services
- name: ADJEX
  endpoint:
    path: /api/italian/pos/ADJEX
    method: GET
    data_selector: records
- name: ADJPL
  endpoint:
    path: /api/italian/pos/ADJPL
    method: GET
    data_selector: records
- name: ADJSG
  endpoint:
    path: /api/italian/pos/ADJSG
    method: GET
    data_selector: records
- name: ADV
  endpoint:
    path: /api/italian/pos/ADV
    method: GET
    data_selector: records
- name: CLIT
  endpoint:
    path: /api/italian/pos/CLIT
    method: GET
    data_selector: records
- name: CM
  endpoint:
    path: /api/italian/pos/CM
    method: GET
    data_selector: records
- name: CONJ
  endpoint:
    path: /api/italian/pos/CONJ
    method: GET
    data_selector: records
- name: CONNADV
  endpoint:
    path: /api/italian/pos/CONNADV
    method: GET
    data_selector: records
- name: CONNCHE
  endpoint:
    path: /api/italian/pos/CONNCHE
    method: GET
    data_selector: records
- name: CONNCHI
  endpoint:
    path: /api/italian/pos/CONNCHI
    method: GET
    data_selector: records
- name: DEML
  endpoint:
    path: /api/italian/pos/DEML
    method: GET
    data_selector: records
- name: DEMSG
  endpoint:
    path: /api/italian/pos/DEMSG
    method: GET
    data_selector: records
- name: DETPL
  endpoint:
    path: /api/italian/pos/DETPL
    method: GET
    data_selector: records
- name: DETSG
  endpoint:
    path: /api/italian/pos/DETSG
    method: GET
    data_selector: records
- name: DIG
  endpoint:
    path: /api/italian/pos/DIG
    method: GET
    data_selector: records
- name: INTERJ
  endpoint:
    path: /api/italian/pos/INTERJ
    method: GET
    data_selector: records
- name: ITEM
  endpoint:
    path: /api/italian/pos/ITEM
    method: GET
    data_selector: records
- name: LET
  endpoint:
    path: /api/italian/pos/LET
    method: GET
    data_selector: records
- name: NPL
  endpoint:
    path: /api/italian/pos/NPL
    method: GET
    data_selector: records
- name: NSG
  endpoint:
    path: /api/italian/pos/NSG
    method: GET
    data_selector: records
- name: ORDPL
  endpoint:
    path: /api/italian/pos/ORDPL
    method: GET
    data_selector: records
- name: ORDSG
  endpoint:
    path: /api/italian/pos/ORDSG
    method: GET
    data_selector: records
- name: POSSPL
  endpoint:
    path: /api/italian/pos/POSSPL
    method: GET
    data_selector: records
- name: POSSSG
  endpoint:
    path: /api/italian/pos/POSSSG
    method: GET
    data_selector: records
- name: PRECLIT
  endpoint:
    path: /api/italian/pos/PRECLIT
    method: GET
    data_selector: records
- name: PRECONJ
  endpoint:
    path: /api/italian/pos/PRECONJ
    method: GET
    data_selector: records
- name: PREDET
  endpoint:
    path: /api/italian/pos/PREDET
    method: GET
    data_selector: records
- name: PREP
  endpoint:
    path: /api/italian/pos/PREP
    method: GET
    data_selector: records
- name: PREPARTPL
  endpoint:
    path: /api/italian/pos/PREPARTPL
    method: GET
    data_selector: records
- name: PREPARTSG
  endpoint:
    path: /api/italian/pos/PREPARTSG
    method: GET
    data_selector: records
- name: PREPREP
  endpoint:
    path: /api/italian/pos/PREPREP
    method: GET
    data_selector: records
- name: PRON
  endpoint:
    path: /api/italian/pos/PRON
    method: GET
    data_selector: records
- name: PRONINDPL
  endpoint:
    path: /api/italian/pos/PRONINDPL
    method: GET
    data_selector: records
- name: PRONINDSG
  endpoint:
    path: /api/italian/pos/PRONINDSG
    method: GET
    data_selector: records
- name: PRONINTPL
  endpoint:
    path: /api/italian/pos/PRONINTPL
    method: GET
    data_selector: records
- name: PRONINTSG
  endpoint:
    path: /api/italian/pos/PRONINTSG
    method: GET
    data_selector: records
- name: PRONPL
  endpoint:
    path: /api/italian/pos/PRONPL
    method: GET
    data_selector: records
- name: PRONREL
  endpoint:
    path: /api/italian/pos/PRONREL
    method: GET
    data_selector: records
- name: PRONRELPL
  endpoint:
    path: /api/italian/pos/PRONRELPL
    method: GET
    data_selector: records
- name: PRONRELSG
  endpoint:
    path: /api/italian/pos/PRONRELSG
    method: GET
    data_selector: records
- name: PROP
  endpoint:
    path: /api/italian/pos/PROP
    method: GET
    data_selector: records
- name: PUNCT
  endpoint:
    path: /api/italian/pos/PUNCT
    method: GET
    data_selector: records
- name: QUANT
  endpoint:
    path: /api/italian/pos/QUANT
    method: GET
    data_selector: records
- name: QUANTPL
  endpoint:
    path: /api/italian/pos/QUANTPL
    method: GET
    data_selector: records
- name: QUANTSG
  endpoint:
    path: /api/italian/pos/QUANTSG
    method: GET
    data_selector: records
- name: SENT
  endpoint:
    path: /api/italian/pos/SENT
    method: GET
    data_selector: records
- name: VAUXF
  endpoint:
    path: /api/italian/pos/VAUXF
    method: GET
    data_selector: records
- name: VAUXGER
  endpoint:
    path: /api/italian/pos/VAUXGER
    method: GET
    data_selector: records
- name: VAUXGER_CLIT
  endpoint:
    path: /api/italian/pos/VAUXGER_CLIT
    method: GET
    data_selector: records
- name: VAUXIMP
  endpoint:
    path: /api/italian/pos/VAUXIMP
    method: GET
    data_selector: records
- name: VAUXIMP_CLIT
  endpoint:
    path: /api/italian/pos/VAUXIMP_CLIT
    method: GET
    data_selector: records
- name: VAUXINF
  endpoint:
    path: /api/italian/pos/VAUXINF
    method: GET
    data_selector: records
- name: VAUXINF_CLIT
  endpoint:
    path: /api/italian/pos/VAUXINF_CLIT
    method: GET
    data_selector: records
- name: VAUXPPPL
  endpoint:
    path: /api/italian/pos/VAUXPPPL
    method: GET
    data_selector: records
- name: VAUXPPPL_CLIT
  endpoint:
    path: /api/italian/pos/VAUXPPPL_CLIT
    method: GET
    data_selector: records
- name: VAUXPPSG
  endpoint:
    path: /api/italian/pos/VAUXPPSG
    method: GET
    data_selector: records
- name: VAUXPPSG_CLIT
  endpoint:
    path: /api/italian/pos/VAUXPPSG_CLIT
    method: GET
    data_selector: records
- name: VAUXPRPL
  endpoint:
    path: /api/italian/pos/VAUXPRPL
    method: GET
    data_selector: records
- name: VAUXPRPL_CLIT
  endpoint:
    path: /api/italian/pos/VAUXPRPL_CLIT
    method: GET
    data_selector: records
- name: VAUXPRSG
  endpoint:
    path: /api/italian/pos/VAUXPRSG
    method: GET
    data_selector: records
- name: VAUXPRSG_CLIT
  endpoint:
    path: /api/italian/pos/VAUXPRSG_CLIT
    method: GET
    data_selector: records
- name: VF
  endpoint:
    path: /api/italian/pos/VF
    method: GET
    data_selector: records
- name: VF_CLIT
  endpoint:
    path: /api/italian/pos/VF_CLIT
    method: GET
    data_selector: records
- name: VGER
  endpoint:
    path: /api/italian/pos/VGER
    method: GET
    data_selector: records
- name: VGER_CLIT
  endpoint:
    path: /api/italian/pos/VGER_CLIT
    method: GET
    data_selector: records
- name: VIMP
  endpoint:
    path: /api/italian/pos/VIMP
    method: GET
    data_selector: records
- name: VIMP_CLIT
  endpoint:
    path: /api/italian/pos/VIMP_CLIT
    method: GET
    data_selector: records
- name: VINF
  endpoint:
    path: /api/italian/pos/VINF
    method: GET
    data_selector: records
- name: VINF_CLIT
  endpoint:
    path: /api/italian/pos/VINF_CLIT
    method: GET
    data_selector: records
- name: VPPPL
  endpoint:
    path: /api/italian/pos/VPPPL
    method: GET
    data_selector: records
- name: VPPPL_CLIT
  endpoint:
    path: /api/italian/pos/VPPPL_CLIT
    method: GET
    data_selector: records
- name: VPPSG
  endpoint:
    path: /api/italian/pos/VPPSG
    method: GET
    data_selector: records
- name: VPPSG_CLIT
  endpoint:
    path: /api/italian/pos/VPPSG_CLIT
    method: GET
    data_selector: records
- name: VPRPL
  endpoint:
    path: /api/italian/pos/VPRPL
    method: GET
    data_selector: records
- name: VPRPL_CLIT
  endpoint:
    path: /api/italian/pos/VPRPL_CLIT
    method: GET
    data_selector: records
- name: VPRSG
  endpoint:
    path: /api/italian/pos/VPRSG
    method: GET
    data_selector: records
- name: VPRSG_CLIT
  endpoint:
    path: /api/italian/pos/VPRSG_CLIT
    method: GET
    data_selector: records
- name: ADJ
  endpoint:
    path: /tags/ADJ
    method: GET
    data_selector: description
- name: ADV
  endpoint:
    path: /tags/ADV
    method: GET
    data_selector: description
- name: CONJ
  endpoint:
    path: /tags/CONJ
    method: GET
    data_selector: description
- name: NOUN
  endpoint:
    path: /tags/NOUN
    method: GET
    data_selector: description
- name: custom-profiles
  endpoint:
    path: /custom-profiles
    method: GET
    data_selector: profiles
- name: entities
  endpoint:
    path: /entities
    method: POST
    data_selector: entities
- name: usage
  endpoint:
    path: /rest/usage
    method: GET
- name: metrics
  endpoint:
    path: /rest/metrics
    method: GET
- name: matchSentences
  endpoint:
    path: /rest/v1/match-sentences
    method: POST
- name: language_detection
  endpoint:
    path: /language/detect
    method: POST
    data_selector: results
    params: {}
- name: entities
  endpoint:
    path: /rest/v1/entities
    method: POST
- name: fragment_boundary_detection
  endpoint:
    path: /sentences
    method: GET
    data_selector: records
- name: language_identification
  endpoint:
    path: /language
    method: GET
    data_selector: records
- name: categorization
  endpoint:
    path: /categories
    method: GET
    data_selector: records
- name: sentiment
  endpoint:
    path: /sentiment
    method: GET
    data_selector: records
- name: required_rosette_endpoints
  endpoint:
    path: /required/rosette/endpoints
    method: GET
    data_selector: records
- name: rosette-roots-vol
  endpoint:
    path: /rosette/server/roots
    method: ro
    data_selector: ''
    params: {}
- name: endpoint
  endpoint:
    path: /services/data/vXX.X/sobjects/Endpoint
    method: GET
    data_selector: records
- name: ping
  endpoint:
    path: /ping
    method: GET
    data_selector: message
- name: info
  endpoint:
    path: /info
    method: GET
    data_selector: version
- name: entities
  endpoint:
    path: /entities
    method: POST
    data_selector: entities
- name: health_check
  endpoint:
    path: /rest/v1/health/services
    method: GET
    data_selector: services
- name: custom-profiles
  endpoint:
    path: /custom-profiles
    method: GET
    data_selector: profiles
- name: entities
  endpoint:
    path: /entities
    method: POST
    data_selector: entities
- name: entities
  endpoint:
    path: /entities
    method: POST
    data_selector: entities
- name: events
  endpoint:
    path: /events
    method: POST
    data_selector: events
- name: language
  endpoint:
    path: /language
    method: GET
    data_selector: language
- name: morphology
  endpoint:
    path: /morphology
    method: GET
    data_selector: morphology
- name: semantics
  endpoint:
    path: /semantics
    method: GET
    data_selector: semantics
- name: sentences
  endpoint:
    path: /sentences
    method: GET
    data_selector: sentences
- name: tokens
  endpoint:
    path: /tokens
    method: GET
    data_selector: tokens
- name: info
  endpoint:
    path: /info
    method: GET
    data_selector: info
- name: ping
  endpoint:
    path: /ping
    method: GET
    data_selector: ping
- name: usage
  endpoint:
    path: /rest/usage
    method: GET
    data_selector: ''
- name: metrics
  endpoint:
    path: /rest/metrics
    method: GET
    data_selector: ''
- name: match_sentences
  endpoint:
    path: /rest/v1/match-sentences
    method: POST
    data_selector: ''
- name: entities
  endpoint:
    path: /rest/v1/entities
    method: POST
    data_selector: configuration
- name: custom-profiles
  endpoint:
    path: /custom-profiles
    method: GET
    data_selector: profiles
- name: entities
  endpoint:
    path: /entities
    method: POST
    data_selector: entities
- name: fragment_boundary_detection
  endpoint:
    path: /sentences
    method: GET
    data_selector: fragment_boundaries
- name: language_identification
  endpoint:
    path: /language
    method: GET
    data_selector: language_identification
- name: categorization
  endpoint:
    path: /categories
    method: GET
    data_selector: categories
- name: sentiment
  endpoint:
    path: /sentiment
    method: GET
    data_selector: sentiment_analysis
- name: usage
  endpoint:
    path: /rest/usage
    method: GET
    data_selector: calls
- name: metrics
  endpoint:
    path: /rest/metrics
    method: GET
    data_selector: rosette_http_requests_total
- name: match_sentences
  endpoint:
    path: /rest/v1/match-sentences
    method: POST
    data_selector: result
- name: entities
  endpoint:
    path: /rest/v1/entities
    method: POST
    data_selector: configuration
    params: {}
- name: entities
  endpoint:
    path: /entities
    method: POST
    data_selector: entities
- name: info
  endpoint:
    path: /info
    method: GET
    data_selector: info
- name: ping
  endpoint:
    path: /ping
    method: GET
    data_selector: message
- name: health
  endpoint:
    path: /rest/v1/health/services
    method: GET
    data_selector: .
- name: ping
  endpoint:
    path: /ping
    method: GET
    data_selector: message
- name: info
  endpoint:
    path: /info
    method: GET
    data_selector: name
- name: entities
  endpoint:
    path: /entities
    method: POST
    data_selector: entities
- name: events
  endpoint:
    path: /events
    method: GET
    data_selector: events
- name: language
  endpoint:
    path: /language
    method: GET
    data_selector: language
- name: morphology
  endpoint:
    path: /morphology
    method: GET
    data_selector: morphology
- name: semantics
  endpoint:
    path: /semantics
    method: GET
    data_selector: semantics
- name: sentences
  endpoint:
    path: /sentences
    method: GET
    data_selector: sentences
- name: tokens
  endpoint:
    path: /tokens
    method: GET
    data_selector: tokens
- name: custom-profiles
  endpoint:
    path: /custom-profiles
    method: GET
- name: entities
  endpoint:
    path: /entities
    method: POST
    data_selector: entities
- name: usage
  endpoint:
    path: /rest/usage
    method: GET
    data_selector: null
    params: {}
- name: metrics
  endpoint:
    path: /rest/metrics
    method: GET
    data_selector: null
    params: {}
- name: match_sentences
  endpoint:
    path: /rest/v1/match-sentences
    method: POST
    data_selector: null
    params: {}
- name: custom-profiles
  endpoint:
    path: /custom-profiles
    method: GET
    data_selector: profiles
- name: entities
  endpoint:
    path: /entities
    method: POST
    data_selector: entities
- name: entities
  endpoint:
    path: /rest/v1/entities
    method: POST
    data_selector: configuration
    params: {}
- name: gazetteer_add
  endpoint:
    path: /rest/v1/entities/configuration/gazetteer/add
    method: POST
    data_selector: configuration
    params: {}
- name: usage
  endpoint:
    path: /rest/usage
    method: GET
- name: metrics
  endpoint:
    path: /rest/metrics
    method: GET
- name: match_sentences
  endpoint:
    path: /rest/v1/match-sentences
    method: POST
- name: info
  endpoint:
    path: /info
    method: GET
- name: health
  endpoint:
    path: /health
    method: GET
- name: entities
  endpoint:
    path: /rest/v1/entities
    method: POST
- name: fragment_boundary_detection
  endpoint:
    path: /sentences
    method: GET
    data_selector: ''
    params: {}
- name: language_identification
  endpoint:
    path: /language
    method: GET
    data_selector: ''
    params: {}
- name: categorization
  endpoint:
    path: /categories
    method: GET
    data_selector: ''
    params: {}
- name: sentiment
  endpoint:
    path: /sentiment
    method: GET
    data_selector: ''
    params: {}
- name: entities
  endpoint:
    path: /entities
    method: POST
    data_selector: entities
- name: info
  endpoint:
    path: /info
    method: GET
    data_selector: info
- name: ping
  endpoint:
    path: /ping
    method: GET
    data_selector: message
- name: ping
  endpoint:
    path: /ping
    method: GET
    data_selector: message
    params: {}
- name: info
  endpoint:
    path: /info
    method: GET
    data_selector: name
    params: {}
- name: entities
  endpoint:
    path: /entities
    method: POST
    data_selector: entities
    params: {}
- name: language
  endpoint:
    path: /language
    method: GET
    data_selector: ''
    params:
      shortStringThreshold: 20
- name: usage
  endpoint:
    path: /rest/usage
    method: GET
- name: metrics
  endpoint:
    path: /rest/metrics
    method: GET
- name: matchSentences
  endpoint:
    path: /rest/v1/match-sentences
    method: POST
- name: entities
  endpoint:
    path: /rest/v1/entities
    method: POST
    data_selector: configuration
- name: language
  endpoint:
    path: /language
    method: GET
    data_selector: ''
    params: {}
- name: entities
  endpoint:
    path: /entities
    method: POST
    data_selector: entities
    params: {}
- name: info
  endpoint:
    path: /info
    method: GET
    data_selector: info
    params: {}
- name: ping
  endpoint:
    path: /ping
    method: GET
    data_selector: ping
    params: {}
- name: custom-profiles
  endpoint:
    path: /custom-profiles
    method: GET
    data_selector: profiles
- name: entities
  endpoint:
    path: /entities
    method: POST
    data_selector: entities
- name: ping
  endpoint:
    path: /rest/v1/ping
    method: GET
    data_selector: message
- name: info
  endpoint:
    path: /rest/v1/info
    method: GET
    data_selector: name
- name: entities
  endpoint:
    path: /rest/v1/entities
    method: POST
    data_selector: entities
- name: usage
  endpoint:
    path: /rest/usage
    method: GET
    data_selector: ''
- name: metrics
  endpoint:
    path: /rest/metrics
    method: GET
    data_selector: ''
- name: matchSentences
  endpoint:
    path: /rest/v1/match-sentences
    method: POST
    data_selector: ''
- name: entities
  endpoint:
    path: /rest/v1/entities
    method: POST
    data_selector: entities
    params: {}
- name: usage
  endpoint:
    path: /rest/usage
    method: GET
    data_selector: no-app-id
    params: {}
- name: metrics
  endpoint:
    path: /rest/metrics
    method: GET
    data_selector: rosette_http_requests_total
    params: {}
- name: match_sentences
  endpoint:
    path: /rest/v1/match-sentences
    method: POST
    data_selector: response
    params: {}
- name: info
  endpoint:
    path: /info
    method: GET
    data_selector: app
    params: {}
- name: health
  endpoint:
    path: /health
    method: GET
    data_selector: status
    params: {}
- name: entities
  endpoint:
    path: /rest/v1/entities
    method: POST
    data_selector: configuration
    params: {}
- name: required_rosette_endpoints
  endpoint:
    path: /required/rosette/endpoints
    method: GET
    data_selector: endpoints
- name: ping
  endpoint:
    path: /ping
    method: GET
    data_selector: message
- name: info
  endpoint:
    path: /info
    method: GET
    data_selector: name
- name: entities
  endpoint:
    path: /entities
    method: POST
    data_selector: entities
- name: events
  endpoint:
    path: /events
    method: GET
    data_selector: events
- name: language
  endpoint:
    path: /language
    method: GET
    data_selector: language
- name: morphology
  endpoint:
    path: /morphology
    method: GET
    data_selector: morphology
- name: semantics
  endpoint:
    path: /semantics
    method: GET
    data_selector: semantics
- name: sentences
  endpoint:
    path: /sentences
    method: GET
    data_selector: sentences
- name: tokens
  endpoint:
    path: /tokens
    method: GET
    data_selector: tokens
- name: rosette-roots-vol
  endpoint:
    path: /rosette/server/roots
    method: ro
    data_selector: volumes
    params: {}
- name: health_check
  endpoint:
    path: /rest/v1/health/services
    method: GET
    data_selector: health
    params: {}
- name: entity_extractor
  endpoint:
    path: /entity-extractor
    method: GET
    data_selector: records
- name: usage
  endpoint:
    path: /rest/usage
    method: GET
    data_selector: ''
- name: metrics
  endpoint:
    path: /rest/metrics
    method: GET
    data_selector: ''
- name: ping
  endpoint:
    path: /ping
    method: GET
    data_selector: message
- name: info
  endpoint:
    path: /info
    method: GET
    data_selector: name
- name: entities
  endpoint:
    path: /entities
    method: POST
    data_selector: entities
- name: entities
  endpoint:
    path: /rest/v1/entities
    method: POST
    data_selector: configuration
- name: usage
  endpoint:
    path: /rest/usage
    method: GET
- name: metrics
  endpoint:
    path: /rest/metrics
    method: GET
- name: matchSentences
  endpoint:
    path: /rest/v1/match-sentences
    method: POST
- name: entities
  endpoint:
    path: /rest/v1/entities
    method: POST
- name: ping
  endpoint:
    path: /ping
    method: GET
    data_selector: null
    params: {}
- name: info
  endpoint:
    path: /info
    method: GET
    data_selector: null
    params: {}
- name: entities
  endpoint:
    path: /entities
    method: POST
    data_selector: null
    params: {}
- name: events
  endpoint:
    path: /events
    method: GET
    data_selector: null
    params: {}
- name: language
  endpoint:
    path: /language
    method: GET
    data_selector: null
    params: {}
- name: morphology
  endpoint:
    path: /morphology
    method: GET
    data_selector: null
    params: {}
- name: semantics
  endpoint:
    path: /semantics
    method: GET
    data_selector: null
    params: {}
- name: sentences
  endpoint:
    path: /sentences
    method: GET
    data_selector: null
    params: {}
- name: tokens
  endpoint:
    path: /tokens
    method: GET
    data_selector: null
    params: {}
- name: ping
  endpoint:
    path: /ping
    method: GET
    data_selector: message
- name: info
  endpoint:
    path: /info
    method: GET
    data_selector: version
- name: entities
  endpoint:
    path: /entities
    method: POST
    data_selector: entities
- name: custom-profiles
  endpoint:
    path: /custom-profiles
    method: GET
    data_selector: profiles
- name: entities
  endpoint:
    path: /entities
    method: POST
    data_selector: entities
- name: usage
  endpoint:
    path: /rest/usage
    method: GET
- name: metrics
  endpoint:
    path: /rest/metrics
    method: GET
- name: matchSentences
  endpoint:
    path: /rest/v1/match-sentences
    method: POST
    data_selector: results
- name: info
  endpoint:
    path: /info
    method: GET
- name: health
  endpoint:
    path: /health
    method: GET
- name: entities
  endpoint:
    path: /rest/v1/entities
    method: POST
    data_selector: entities
    params: {}
- name: gazetteer_add
  endpoint:
    path: /rest/v1/entities/configuration/gazetteer/add
    method: POST
    data_selector: configuration
    params: {}
- name: usage
  endpoint:
    path: /rest/usage
    method: GET
- name: metrics
  endpoint:
    path: /rest/metrics
    method: GET
- name: entities
  endpoint:
    path: /rest/v1/entities
    method: POST
- name: ping
  endpoint:
    path: /ping
    method: GET
    data_selector: message
- name: info
  endpoint:
    path: /info
    method: GET
    data_selector: name
- name: entities
  endpoint:
    path: /entities
    method: POST
    data_selector: entities
- name: entities
  endpoint:
    path: /entities
    method: POST
    data_selector: entities
- name: events
  endpoint:
    path: /events
    method: GET
    data_selector: events
- name: language
  endpoint:
    path: /language
    method: GET
    data_selector: language
- name: morphology
  endpoint:
    path: /morphology
    method: GET
    data_selector: morphology
- name: semantics
  endpoint:
    path: /semantics
    method: GET
    data_selector: semantics
- name: sentences
  endpoint:
    path: /sentences
    method: GET
    data_selector: sentences
- name: tokens
  endpoint:
    path: /tokens
    method: GET
    data_selector: tokens
- name: info
  endpoint:
    path: /info
    method: GET
    data_selector: info
- name: ping
  endpoint:
    path: /ping
    method: GET
    data_selector: ping
- name: info
  endpoint:
    path: /v1/info
    method: GET
- name: ping
  endpoint:
    path: /v1/ping
    method: GET
- name: language
  endpoint:
    path: /language
    method: GET
    data_selector: shortStringThreshold
    params: {}
- name: entities
  endpoint:
    path: /entities
    method: GET
- name: sentiment
  endpoint:
    path: /sentiment
    method: GET
- name: topics
  endpoint:
    path: /topics
    method: GET
- name: relationships
  endpoint:
    path: /relationships
    method: GET
- name: ping
  endpoint:
    path: /ping
    method: GET
    data_selector: message
- name: info
  endpoint:
    path: /info
    method: GET
    data_selector: version
- name: entities
  endpoint:
    path: /entities
    method: POST
    data_selector: entities
- name: entities
  endpoint:
    path: /entities
    method: POST
    data_selector: entities
- name: ping
  endpoint:
    path: /ping
    method: GET
    data_selector: message
- name: info
  endpoint:
    path: /info
    method: GET
    data_selector: version
- name: health_check
  endpoint:
    path: /health/services
    method: GET
    data_selector: .
    params: {}
- name: usage
  endpoint:
    path: /rest/usage
    method: GET
- name: metrics
  endpoint:
    path: /rest/metrics
    method: GET
- name: usage
  endpoint:
    path: /rest/usage
    method: GET
    data_selector: ''
- name: metrics
  endpoint:
    path: /rest/metrics
    method: GET
    data_selector: ''
- name: matchSentences
  endpoint:
    path: /rest/v1/match-sentences
    method: POST
    data_selector: ''
    params: {}
- name: entities
  endpoint:
    path: /rest/v1/entities
    method: POST
- name: entities
  endpoint:
    path: /rest/v1/entities
    method: POST
    data_selector: entities
    params: {}
- name: fragment_boundary_detection
  endpoint:
    path: /sentences
    method: GET
    data_selector: records
- name: language_identification
  endpoint:
    path: /language
    method: GET
    data_selector: records
- name: categorization
  endpoint:
    path: /categories
    method: GET
    data_selector: records
- name: sentiment
  endpoint:
    path: /sentiment
    method: GET
    data_selector: records
- name: ping
  endpoint:
    path: /ping
    method: GET
    data_selector: null
    params: {}
- name: info
  endpoint:
    path: /info
    method: GET
    data_selector: null
    params: {}
- name: entities
  endpoint:
    path: /entities
    method: POST
    data_selector: null
    params: {}
- name: info
  endpoint:
    path: /v1/info
    method: GET
    data_selector: records
- name: ping
  endpoint:
    path: /v1/ping
    method: GET
    data_selector: records
- name: usage
  endpoint:
    path: /rest/usage
    method: GET
- name: metrics
  endpoint:
    path: /rest/metrics
    method: GET
- name: usage
  endpoint:
    path: /rest/usage
    method: GET
    data_selector: calls
    params: {}
- name: metrics
  endpoint:
    path: /rest/metrics
    method: GET
    data_selector: rosette_http_requests_total
    params: {}
- name: matchSentences
  endpoint:
    path: /rest/v1/match-sentences
    method: POST
    data_selector: scores
    params: {}
- name: entities
  endpoint:
    path: /rest/v1/entities
    method: POST
    data_selector: entities
    params: {}
- name: entities
  endpoint:
    path: /rest/v1/entities
    method: POST
    data_selector: configuration
    params: {}
- name: fragment_boundary_detection
  endpoint:
    path: /sentences
    method: GET
    data_selector: records
- name: language_identification
  endpoint:
    path: /language
    method: GET
    data_selector: records
- name: categorization
  endpoint:
    path: /categories
    method: GET
    data_selector: records
- name: sentiment
  endpoint:
    path: /sentiment
    method: GET
    data_selector: records
- name: info
  endpoint:
    path: v1/info
    method: GET
- name: ping
  endpoint:
    path: v1/ping
    method: GET
- name: ping
  endpoint:
    path: /rest/v1/ping
    method: GET
    data_selector: message
- name: info
  endpoint:
    path: /rest/v1/info
    method: GET
    data_selector: version
- name: entities
  endpoint:
    path: /rest/v1/entities
    method: POST
    data_selector: entities
- name: entities
  endpoint:
    path: /entities
    method: POST
    data_selector: entities
- name: ping
  endpoint:
    path: /ping
    method: GET
    data_selector: message
- name: info
  endpoint:
    path: /info
    method: GET
    data_selector: version
- name: health_check
  endpoint:
    path: /rest/v1/health/services
    method: GET
    data_selector: .
    params: {}
- name: usage
  endpoint:
    path: /rest/usage
    method: GET
- name: metrics
  endpoint:
    path: /rest/metrics
    method: GET
- name: entities
  endpoint:
    path: /rest/v1/entities
    method: POST
    data_selector: configuration
    params: {}
- name: usage
  endpoint:
    path: /rest/usage
    method: GET
- name: metrics
  endpoint:
    path: /rest/metrics
    method: GET
- name: entities
  endpoint:
    path: /rest/v1/entities
    method: POST
- name: fragment_boundary_detection
  endpoint:
    path: /sentences
    method: GET
    data_selector: ''
- name: language_identification
  endpoint:
    path: /language
    method: GET
    data_selector: ''
- name: categorization
  endpoint:
    path: /categories
    method: GET
    data_selector: ''
- name: sentiment
  endpoint:
    path: /sentiment
    method: GET
    data_selector: ''
- name: model_training
  endpoint:
    path: /services/data/vXX.X/sobjects/ModelTraining
    method: GET
    data_selector: records
    params: {}
- name: info
  endpoint:
    path: v1/info
    method: GET
- name: ping
  endpoint:
    path: v1/ping
    method: GET
- name: info
  endpoint:
    path: /v1/info
    method: GET
- name: ping
  endpoint:
    path: /v1/ping
    method: GET
- name: entities
  endpoint:
    path: /entities
    method: POST
    data_selector: entities
    params: {}
- name: info
  endpoint:
    path: /info
    method: GET
    data_selector: info
    params: {}
- name: ping
  endpoint:
    path: /ping
    method: GET
    data_selector: message
    params: {}
- name: entities
  endpoint:
    path: /entities
    method: GET
    data_selector: records
    params: {}
- name: sentiment
  endpoint:
    path: /sentiment
    method: GET
    data_selector: records
    params: {}
- name: topics
  endpoint:
    path: /topics
    method: GET
    data_selector: records
    params: {}
- name: relationships
  endpoint:
    path: /relationships
    method: GET
    data_selector: records
    params: {}
- name: info
  endpoint:
    path: v1/info
    method: GET
- name: ping
  endpoint:
    path: v1/ping
    method: GET
- name: info
  endpoint:
    path: v1/info
    method: GET
- name: ping
  endpoint:
    path: v1/ping
    method: GET
- name: entities
  endpoint:
    path: /v1/entities
    method: POST
    data_selector: entities
- name: events
  endpoint:
    path: /v1/events
    method: POST
    data_selector: events
- name: language
  endpoint:
    path: /v1/language
    method: POST
    data_selector: language
- name: morphology
  endpoint:
    path: /v1/morphology
    method: POST
    data_selector: morphology
- name: semantics
  endpoint:
    path: /v1/semantics
    method: POST
    data_selector: semantics
- name: sentences
  endpoint:
    path: /v1/sentences
    method: POST
    data_selector: sentences
- name: tokens
  endpoint:
    path: /v1/tokens
    method: POST
    data_selector: tokens
- name: info
  endpoint:
    path: /v1/info
    method: GET
    data_selector: info
- name: ping
  endpoint:
    path: /v1/ping
    method: GET
    data_selector: ping
- name: health_check
  endpoint:
    path: /rest/v1/health/services
    method: GET
    data_selector: .
    params: {}
- name: entities
  endpoint:
    path: /entities
    method: POST
    data_selector: entity
    params: {}
- name: ping
  endpoint:
    path: /ping
    method: GET
    data_selector: message
    params: {}
- name: info
  endpoint:
    path: /info
    method: GET
    data_selector: version
    params: {}
- name: usage
  endpoint:
    path: /rest/usage
    method: GET
- name: metrics
  endpoint:
    path: /rest/metrics
    method: GET
- name: health_check
  endpoint:
    path: /rest/v1/health/services
    method: GET
    data_selector: .
    params: {}
- name: entities
  endpoint:
    path: /rest/v1/entities
    method: POST
    data_selector: entities
- name: fragment_boundary_detection
  endpoint:
    path: /sentences
    method: GET
- name: language_identification
  endpoint:
    path: /language
    method: GET
- name: categorization
  endpoint:
    path: /categories
    method: GET
- name: sentiment
  endpoint:
    path: /sentiment
    method: GET
- name: usage
  endpoint:
    path: /rest/usage
    method: GET
- name: metrics
  endpoint:
    path: /rest/metrics
    method: GET
- name: entities
  endpoint:
    path: /rest/v1/entities
    method: POST
    data_selector: entities/configuration
    params: {}
- name: fragment_boundary_detection
  endpoint:
    path: /sentences
    method: GET
    data_selector: ''
- name: language_identification
  endpoint:
    path: /language
    method: GET
    data_selector: ''
- name: categorization
  endpoint:
    path: /categories
    method: GET
    data_selector: ''
- name: sentiment
  endpoint:
    path: /sentiment
    method: GET
    data_selector: ''
- name: ping
  endpoint:
    path: /ping
    method: GET
    data_selector: message
- name: info
  endpoint:
    path: /info
    method: GET
    data_selector: name
- name: entities
  endpoint:
    path: /entities
    method: POST
    data_selector: entities
- name: info
  endpoint:
    path: /v1/info
    method: GET
- name: ping
  endpoint:
    path: /v1/ping
    method: GET
- name: info
  endpoint:
    path: v1/info
    method: GET
- name: ping
  endpoint:
    path: v1/ping
    method: GET
- name: entities
  endpoint:
    path: /entities
    method: POST
    data_selector: entities
    params: {}
- name: ping
  endpoint:
    path: /ping
    method: GET
    data_selector: message
    params: {}
- name: info
  endpoint:
    path: /info
    method: GET
    data_selector: version
    params: {}
- name: health_check
  endpoint:
    path: /rest/v1/health/services
    method: GET
    data_selector: .
    params: {}
- name: ping
  endpoint:
    path: /ping
    method: GET
    data_selector: message
- name: info
  endpoint:
    path: /info
    method: GET
    data_selector: version
- name: entities
  endpoint:
    path: /entities
    method: POST
    data_selector: entities
- name: usage
  endpoint:
    path: /rest/usage
    method: GET
- name: metrics
  endpoint:
    path: /rest/metrics
    method: GET
- name: entities
  endpoint:
    path: /rest/v1/entities
    method: POST
- name: fragment_boundary_detection
  endpoint:
    path: /sentences
    method: GET
    data_selector: ''
    params: {}
- name: language_identification
  endpoint:
    path: /language
    method: GET
    data_selector: ''
    params: {}
- name: categorization
  endpoint:
    path: /categories
    method: GET
    data_selector: ''
    params: {}
- name: sentiment
  endpoint:
    path: /sentiment
    method: GET
    data_selector: ''
    params: {}
- name: info
  endpoint:
    path: /v1/info
    method: GET
- name: ping
  endpoint:
    path: /v1/ping
    method: GET
- name: info
  endpoint:
    path: /v1/info
    method: GET
- name: ping
  endpoint:
    path: /v1/ping
    method: GET
- name: info
  endpoint:
    path: /v1/info
    method: GET
- name: ping
  endpoint:
    path: /v1/ping
    method: GET
- name: entities
  endpoint:
    path: /entities
    method: POST
    data_selector: entities
- name: info
  endpoint:
    path: /info
    method: GET
    data_selector: info
- name: ping
  endpoint:
    path: /ping
    method: GET
    data_selector: message
- name: entities
  endpoint:
    path: /entities
    method: POST
    data_selector: entities
- name: info
  endpoint:
    path: /info
    method: GET
    data_selector: info
- name: ping
  endpoint:
    path: /ping
    method: GET
    data_selector: message
- name: health_check
  endpoint:
    path: /rest/v1/health/services
    method: GET
    data_selector: .
    params: {}
- name: usage
  endpoint:
    path: /rest/usage
    method: GET
- name: metrics
  endpoint:
    path: /rest/metrics
    method: GET
- name: entities
  endpoint:
    path: /rest/v1/entities
    method: POST
    data_selector: configuration
- name: fragment_boundary_detection
  endpoint:
    path: /sentences
    method: GET
    data_selector: records
- name: language_identification
  endpoint:
    path: /language
    method: GET
    data_selector: records
- name: categorization
  endpoint:
    path: /categories
    method: GET
    data_selector: records
- name: sentiment
  endpoint:
    path: /sentiment
    method: GET
    data_selector: records
- name: info
  endpoint:
    path: v1/info
    method: GET
- name: ping
  endpoint:
    path: v1/ping
    method: GET
- name: entities
  endpoint:
    path: /entities
    method: POST
    data_selector: entities
    params: {}
- name: info
  endpoint:
    path: /info
    method: GET
    data_selector: info
    params: {}
- name: ping
  endpoint:
    path: /ping
    method: GET
    data_selector: message
    params: {}
- name: info
  endpoint:
    path: /v1/info
    method: GET
- name: ping
  endpoint:
    path: /v1/ping
    method: GET
- name: info
  endpoint:
    path: /v1/info
    method: GET
- name: ping
  endpoint:
    path: /v1/ping
    method: GET
- name: usage
  endpoint:
    path: /rest/usage
    method: GET
- name: metrics
  endpoint:
    path: /rest/metrics
    method: GET
- name: match_sentences
  endpoint:
    path: /rest/v1/match-sentences
    method: POST
- name: info
  endpoint:
    path: /info
    method: GET
- name: health
  endpoint:
    path: /health
    method: GET
- name: ping
  endpoint:
    path: /ping
    method: GET
    data_selector: message
- name: info
  endpoint:
    path: /info
    method: GET
    data_selector: version
- name: entities
  endpoint:
    path: /entities
    method: POST
    data_selector: entities
- name: health_check
  endpoint:
    path: /rest/v1/health/services
    method: GET
    data_selector: .
- name: entities
  endpoint:
    path: /rest/v1/entities
    method: POST
    data_selector: configuration
- name: gazetteer_add
  endpoint:
    path: /rest/v1/entities/configuration/gazetteer/add
    method: POST
    data_selector: configuration
- name: usage
  endpoint:
    path: /rest/usage
    method: GET
- name: metrics
  endpoint:
    path: /rest/metrics
    method: GET
- name: entities
  endpoint:
    path: /rest/v1/entities
    method: POST
    data_selector: configuration
    params: {}
- name: fragment_boundary_detection
  endpoint:
    path: /sentences
    method: GET
    data_selector: fragmentBoundaries
    params: {}
- name: language_identification
  endpoint:
    path: /language
    method: GET
    data_selector: languageData
    params: {}
- name: categorization
  endpoint:
    path: /categories
    method: GET
    data_selector: categoriesData
    params: {}
- name: sentiment
  endpoint:
    path: /sentiment
    method: GET
    data_selector: sentimentData
    params: {}
- name: entities
  endpoint:
    path: /rest/v1/entities
    method: POST
    data_selector: entities
- name: ping
  endpoint:
    path: /rest/v1/ping
    method: GET
    data_selector: message
- name: info
  endpoint:
    path: /rest/v1/info
    method: GET
    data_selector: version
- name: health_check
  endpoint:
    path: /rest/v1/health/services
    method: GET
    data_selector: .
    params: {}
- name: entities
  endpoint:
    path: /entities
    method: GET
    data_selector: records
- name: sentiment
  endpoint:
    path: /sentiment
    method: GET
    data_selector: records
- name: topics
  endpoint:
    path: /topics
    method: GET
    data_selector: records
- name: relationships
  endpoint:
    path: /relationships
    method: GET
    data_selector: records
- name: entities
  endpoint:
    path: /rest/v1/entities
    method: POST
    data_selector: entities
- name: info
  endpoint:
    path: /rest/v1/info
    method: GET
    data_selector: info
- name: ping
  endpoint:
    path: /rest/v1/ping
    method: GET
    data_selector: ping
- name: usage
  endpoint:
    path: /rest/usage
    method: GET
- name: metrics
  endpoint:
    path: /rest/metrics
    method: GET
- name: entities
  endpoint:
    path: /rest/v1/entities
    method: POST
- name: gazetteer_add
  endpoint:
    path: /rest/v1/entities/configuration/gazetteer/add
    method: POST
- name: ping
  endpoint:
    path: /ping
    method: GET
    data_selector: message
- name: info
  endpoint:
    path: /info
    method: GET
    data_selector: name
- name: entities
  endpoint:
    path: /entities
    method: POST
    data_selector: entities
- name: health_check
  endpoint:
    path: /rest/v1/health/services
    method: GET
    data_selector: events-training-server, indoc-coref-server, rex-training-server
- name: usage
  endpoint:
    path: /rest/usage
    method: GET
    data_selector: calls
    params: {}
- name: metrics
  endpoint:
    path: /rest/metrics
    method: GET
    data_selector: metrics
    params: {}
- name: matchSentences
  endpoint:
    path: /rest/v1/match-sentences
    method: POST
    data_selector: results
    params: {}
- name: entities
  endpoint:
    path: /rest/v1/entities
    method: POST
- name: fragment_boundary_detection
  endpoint:
    path: /sentences
    method: GET
    data_selector: fragmentBoundaries
- name: language_identification
  endpoint:
    path: /language
    method: GET
    data_selector: languageDetection
- name: categorization
  endpoint:
    path: /categories
    method: GET
    data_selector: categories
- name: sentiment
  endpoint:
    path: /sentiment
    method: GET
    data_selector: sentimentAnalysis
- name: ping
  endpoint:
    path: /ping
    method: GET
    data_selector: null
    params: {}
- name: info
  endpoint:
    path: /info
    method: GET
    data_selector: null
    params: {}
- name: entities
  endpoint:
    path: /entities
    method: POST
    data_selector: null
    params: {}
- name: usage
  endpoint:
    path: /rest/usage
    method: GET
- name: metrics
  endpoint:
    path: /rest/metrics
    method: GET
- name: match_sentences
  endpoint:
    path: /rest/v1/match-sentences
    method: POST
- name: entities
  endpoint:
    path: /rest/v1/entities
    method: POST
- name: entities
  endpoint:
    path: /rest/v1/entities
    method: POST
    data_selector: entities
- name: ping
  endpoint:
    path: /rest/v1/ping
    method: GET
    data_selector: message
- name: info
  endpoint:
    path: /rest/v1/info
    method: GET
    data_selector: version
- name: custom-profiles
  endpoint:
    path: /custom-profiles
    method: GET
    data_selector: profiles
- name: entities
  endpoint:
    path: /entities
    method: POST
    data_selector: entities
- name: info
  endpoint:
    path: /info
    method: GET
    data_selector: info
- name: ping
  endpoint:
    path: /ping
    method: GET
    data_selector: ping
- name: entities
  endpoint:
    path: /entities
    method: GET
    data_selector: records
    params: {}
- name: sentiment
  endpoint:
    path: /sentiment
    method: GET
    data_selector: records
    params: {}
- name: topics
  endpoint:
    path: /topics
    method: GET
    data_selector: records
    params: {}
- name: usage
  endpoint:
    path: /rest/usage
    method: GET
- name: metrics
  endpoint:
    path: /rest/metrics
    method: GET
- name: entities
  endpoint:
    path: /rest/v1/entities
    method: POST
- name: entities
  endpoint:
    path: /rest/v1/entities
    method: POST
    data_selector: entities
- name: ping
  endpoint:
    path: /rest/v1/ping
    method: GET
    data_selector: message
- name: info
  endpoint:
    path: /rest/v1/info
    method: GET
    data_selector: version
- name: info
  endpoint:
    path: /rest/v1/match-sentences/info
    method: GET
- name: health
  endpoint:
    path: /rest/v1/match-sentences/health
    method: GET
- name: prometheus
  endpoint:
    path: /rest/v1/match-sentences/prometheus
    method: GET
- name: env
  endpoint:
    path: /rest/v1/match-sentences/env
    method: GET
- name: matchSentences
  endpoint:
    path: /rest/v1/match-sentences
    method: GET
- name: entity_extractor
  endpoint:
    path: /entity-extractor
    method: POST
- name: entities
  endpoint:
    path: /entities
    method: POST
    data_selector: entities
    params: {}
- name: info
  endpoint:
    path: /info
    method: GET
    data_selector: info
    params: {}
- name: ping
  endpoint:
    path: /ping
    method: GET
    data_selector: message
    params: {}
- name: entities
  endpoint:
    path: /rest/v1/entities
    method: POST
    data_selector: entities
- name: ping
  endpoint:
    path: /rest/v1/ping
    method: GET
    data_selector: message
- name: info
  endpoint:
    path: /rest/v1/info
    method: GET
    data_selector: version
- name: custom-profiles
  endpoint:
    path: /custom-profiles
    method: GET
    data_selector: profiles
- name: entities
  endpoint:
    path: /entities
    method: POST
    data_selector: entities
- name: usage
  endpoint:
    path: /rest/usage
    method: GET
- name: metrics
  endpoint:
    path: /rest/metrics
    method: GET
- name: match_sentences
  endpoint:
    path: /rest/v1/match-sentences
    method: POST
    data_selector: response
- name: usage
  endpoint:
    path: /rest/usage
    method: GET
- name: metrics
  endpoint:
    path: /rest/metrics
    method: GET
- name: entities
  endpoint:
    path: /rest/v1/entities
    method: POST
- name: rosette_pass_thru
  endpoint:
    path: /rest/v1/**
    method: GET
    data_selector: records
    params: {}
- name: python_example
  endpoint:
    path: /rest/v1/python_example
    method: GET
    data_selector: records
    params: {}
- name: entities
  endpoint:
    path: /entities
    method: POST
    data_selector: entities
- name: language
  endpoint:
    path: /language
    method: POST
    data_selector: language
- name: sentences
  endpoint:
    path: /sentences
    method: POST
    data_selector: sentences
- name: categorization
  endpoint:
    path: /categories
    method: GET
- name: sentiment
  endpoint:
    path: /sentiment
    method: GET
- name: entities
  endpoint:
    path: /entities
    method: POST
    data_selector: entities
- name: events
  endpoint:
    path: /events
    method: POST
    data_selector: events
- name: ping
  endpoint:
    path: /ping
    method: GET
    data_selector: message
- name: info
  endpoint:
    path: /info
    method: GET
    data_selector: version
- name: entities
  endpoint:
    path: /entities
    method: POST
    data_selector: entities
- name: ping
  endpoint:
    path: /ping
    method: GET
    data_selector: message
    params: {}
- name: info
  endpoint:
    path: /info
    method: GET
    data_selector: name
    params: {}
- name: entities
  endpoint:
    path: /entities
    method: POST
    data_selector: entities
    params: {}
- name: health_check
  endpoint:
    path: /rest/v1/health/services
    method: GET
    data_selector: .
    params: {}
- name: usage
  endpoint:
    path: /rest/usage
    method: GET
- name: metrics
  endpoint:
    path: /rest/metrics
    method: GET
- name: match_sentences
  endpoint:
    path: /rest/v1/match-sentences
    method: POST
- name: usage
  endpoint:
    path: /rest/usage
    method: GET
    data_selector: ''
- name: metrics
  endpoint:
    path: /rest/metrics
    method: GET
    data_selector: ''
- name: entities
  endpoint:
    path: /rest/v1/entities
    method: POST
- name: gazetteer
  endpoint:
    path: /rest/v1/entities/configuration/gazetteer/add
    method: POST
- name: entities
  endpoint:
    path: /rest/v1/entities
    method: POST
- name: gazetteer_add
  endpoint:
    path: /rest/v1/entities/configuration/gazetteer/add
    method: POST
- name: language
  endpoint:
    path: /language
    method: GET
- name: ping
  endpoint:
    path: /ping
    method: GET
    data_selector: message
- name: info
  endpoint:
    path: /info
    method: GET
    data_selector: name
- name: entities
  endpoint:
    path: /entities
    method: POST
    data_selector: entities
- name: entities
  endpoint:
    path: /v1/entities
    method: POST
    data_selector: results
- name: events
  endpoint:
    path: /v1/events
    method: POST
    data_selector: results
- name: usage
  endpoint:
    path: /rest/usage
    method: GET
    data_selector: calls
    params: {}
- name: metrics
  endpoint:
    path: /rest/metrics
    method: GET
    data_selector: rosette_http_requests_total
    params: {}
- name: entities
  endpoint:
    path: /rest/v1/entities
    method: POST
- name: ping
  endpoint:
    path: /ping
    method: GET
    data_selector: null
    params: {}
- name: info
  endpoint:
    path: /info
    method: GET
    data_selector: null
    params: {}
- name: entities
  endpoint:
    path: /entities
    method: POST
    data_selector: null
    params: {}
- name: events
  endpoint:
    path: /events
    method: GET
    data_selector: null
    params: {}
- name: language
  endpoint:
    path: /language
    method: GET
    data_selector: null
    params: {}
- name: morphology
  endpoint:
    path: /morphology
    method: GET
    data_selector: null
    params: {}
- name: semantics
  endpoint:
    path: /semantics
    method: GET
    data_selector: null
    params: {}
- name: sentences
  endpoint:
    path: /sentences
    method: GET
    data_selector: null
    params: {}
- name: tokens
  endpoint:
    path: /tokens
    method: GET
    data_selector: null
    params: {}
- name: health
  endpoint:
    path: /rest/v1/health/services
    method: GET
    data_selector: events-training-server, indoc-coref-server, rex-training-server
- name: custom-profiles
  endpoint:
    path: /custom-profiles
    method: GET
    data_selector: profiles
- name: entities
  endpoint:
    path: /entities
    method: POST
    data_selector: entities
- name: ping
  endpoint:
    path: /ping
    method: GET
    data_selector: message
- name: info
  endpoint:
    path: /info
    method: GET
    data_selector: name
- name: entities
  endpoint:
    path: /entities
    method: POST
    data_selector: entities
- name: usage
  endpoint:
    path: /rest/usage
    method: GET
- name: metrics
  endpoint:
    path: /rest/metrics
    method: GET
- name: usage
  endpoint:
    path: /rest/usage
    method: GET
- name: metrics
  endpoint:
    path: /rest/metrics
    method: GET
- name: matchSentences
  endpoint:
    path: /rest/v1/match-sentences
    method: POST
- name: tokens
  endpoint:
    path: /rest/v1/tokens
    method: POST
- name: categories
  endpoint:
    path: /rest/v1/categories
    method: GET
- name: language
  endpoint:
    path: /rest/v1/language
    method: POST
- name: semantics_vector
  endpoint:
    path: /rest/v1/semantics/vector
    method: POST
- name: morphology_compound_components
  endpoint:
    path: /rest/v1/morphology/compound-components
    method: POST
- name: syntax_dependencies
  endpoint:
    path: /rest/v1/syntax/dependencies
    method: POST
- name: morphology_lemmas
  endpoint:
    path: /rest/v1/morphology/lemmas
    method: POST
- name: topics
  endpoint:
    path: /rest/v1/topics
    method: POST
- name: transliteration
  endpoint:
    path: /rest/v1/transliteration
    method: POST
- name: sentences
  endpoint:
    path: /rest/v1/sentences
    method: POST
- name: address_similarity
  endpoint:
    path: /rest/v1/address-similarity
    method: POST
- name: name_deduplication
  endpoint:
    path: /rest/v1/name-deduplication
    method: POST
- name: morphology_complete
  endpoint:
    path: /rest/v1/morphology/complete
    method: POST
- name: entities
  endpoint:
    path: /rest/v1/entities
    method: POST
- name: name_translation
  endpoint:
    path: /rest/v1/name-translation
    method: POST
- name: morphology_parts_of_speech
  endpoint:
    path: /rest/v1/morphology/parts-of-speech
    method: POST
- name: semantics_similar
  endpoint:
    path: /rest/v1/semantics/similar
    method: POST
- name: sentiment
  endpoint:
    path: /rest/v1/sentiment
    method: POST
- name: name_similarity
  endpoint:
    path: /rest/v1/name-similarity
    method: POST
- name: morphology_han_readings
  endpoint:
    path: /rest/v1/morphology/han-readings
    method: POST
- name: relationships
  endpoint:
    path: /rest/v1/relationships
    method: POST
- name: entities
  endpoint:
    path: /rest/v1/entities/configuration/gazetteer/add
    method: POST
    data_selector: language
    params: {}
- name: entities
  endpoint:
    path: /rest/v1/entities
    method: POST
    data_selector: configuration
    params: {}
- name: fragment_boundary_detection
  endpoint:
    path: /sentences
    method: GET
    data_selector: records
    params: {}
- name: language_identification
  endpoint:
    path: /language
    method: GET
    data_selector: records
    params: {}
- name: categorization
  endpoint:
    path: /categories
    method: GET
    data_selector: records
    params: {}
- name: sentiment
  endpoint:
    path: /sentiment
    method: GET
    data_selector: records
    params: {}
- name: ping
  endpoint:
    path: /ping
    method: GET
    data_selector: message
- name: info
  endpoint:
    path: /info
    method: GET
    data_selector: version
- name: entities
  endpoint:
    path: /entities
    method: POST
    data_selector: entities
- name: events_info
  endpoint:
    path: /events/info
    method: GET
- name: events_info_workspace
  endpoint:
    path: /events/info
    method: GET
    params:
      workspaceId: '{wid}'
- name: usage
  endpoint:
    path: /rest/usage
    method: GET
- name: metrics
  endpoint:
    path: /rest/metrics
    method: GET
- name: matchSentences
  endpoint:
    path: /rest/v1/match-sentences
    method: POST
- name: info
  endpoint:
    path: /info
    method: GET
- name: health
  endpoint:
    path: /health
    method: GET
- name: entities
  endpoint:
    path: /rest/v1/entities
    method: POST
- name: gazetteer_add
  endpoint:
    path: /rest/v1/entities/configuration/gazetteer/add
    method: POST
- name: events
  endpoint:
    path: /rest/v1/events
    method: GET
    data_selector: events
- name: info
  endpoint:
    path: /rest/v1/match-sentences/info
    method: GET
- name: health
  endpoint:
    path: /rest/v1/match-sentences/health
    method: GET
- name: prometheus
  endpoint:
    path: /rest/v1/match-sentences/prometheus
    method: GET
- name: env
  endpoint:
    path: /rest/v1/match-sentences/env
    method: GET
- name: matchSentences
  endpoint:
    path: /rest/v1/match-sentences
    method: GET
- name: events_info
  endpoint:
    path: /events/info
    method: GET
- name: events_info_workspace
  endpoint:
    path: /events/info
    method: GET
    params:
      workspaceId: '{wid}'
- name: events_info
  endpoint:
    path: /events/info
    method: GET
- name: events_info_workspace
  endpoint:
    path: /events/info
    method: GET
    params:
      workspaceId: '{wid}'
- name: ping
  endpoint:
    path: /ping
    method: GET
    data_selector: message
- name: info
  endpoint:
    path: /info
    method: GET
    data_selector: name
- name: entities
  endpoint:
    path: /entities
    method: POST
    data_selector: entities
- name: events
  endpoint:
    path: /events
    method: POST
    data_selector: events
- name: events_info
  endpoint:
    path: /events/info
    method: GET
- name: events_info_workspace
  endpoint:
    path: /events/info
    method: GET
    params:
      workspaceId: '{wid}'
- name: events-training-server
  endpoint:
    path: /ets/info
    method: GET
    data_selector: info
    params: {}
- name: usage
  endpoint:
    path: /rest/usage
    method: GET
- name: metrics
  endpoint:
    path: /rest/metrics
    method: GET
- name: match_sentences
  endpoint:
    path: /rest/v1/match-sentences
    method: POST
- name: coreference_server
  endpoint:
    path: /install-coref.sh
    method: POST
    data_selector: response
    params: {}
- name: rosette_pass_thru
  endpoint:
    path: /rest/v1/**
    method: GET
- name: python_example
  endpoint:
    path: /rest/v1/python_example
    method: GET
- name: entities
  endpoint:
    path: /configuration/gazetteer/add
    method: POST
    data_selector: null
    params: {}
- name: categorization
  endpoint:
    path: /categories
    method: POST
- name: sentiment
  endpoint:
    path: /sentiment
    method: POST
- name: event_training_server
  endpoint:
    path: /ets/info
    method: GET
    data_selector: info
    params: {}
- name: indoc_coref_server
  endpoint:
    path: /install-coref.sh
    method: POST
    data_selector: installation
    params: {}
- name: adaptation_studio
  endpoint:
    path: /install-ras.sh
    method: POST
    data_selector: installation
    params: {}
- name: healthcheck_scripts
  endpoint:
    path: /basis/rs/scripts/rs-healthcheck.sh
    method: GET
- name: healthcheck_scripts
  endpoint:
    path: /basis/rts/scripts/rts-healthcheck.sh
    method: GET
- name: healthcheck_scripts
  endpoint:
    path: /basis/ras/scripts/ras-healthcheck.sh
    method: GET
- name: events_info
  endpoint:
    path: /events/info
    method: GET
- name: events_info_workspace
  endpoint:
    path: /events/info
    method: GET
    params:
      workspaceId: '{wid}'
- name: entities
  endpoint:
    path: /entities
    method: POST
    data_selector: records
- name: events
  endpoint:
    path: /events
    method: GET
    data_selector: records
- name: language
  endpoint:
    path: /language
    method: GET
    data_selector: records
- name: morphology
  endpoint:
    path: /morphology
    method: GET
    data_selector: records
- name: semantics
  endpoint:
    path: /semantics
    method: GET
    data_selector: records
- name: sentences
  endpoint:
    path: /sentences
    method: GET
    data_selector: records
- name: tokens
  endpoint:
    path: /tokens
    method: GET
    data_selector: records
- name: info
  endpoint:
    path: /info
    method: GET
    data_selector: records
- name: ping
  endpoint:
    path: /ping
    method: GET
    data_selector: records
- name: health
  endpoint:
    path: /rest/v1/health/services
    method: GET
    data_selector: health
    params: {}
- name: ping
  endpoint:
    path: /rest/v1/ping
    method: GET
    data_selector: message
- name: info
  endpoint:
    path: /rest/v1/info
    method: GET
    data_selector: name
- name: server_info
  endpoint:
    path: /rts/info/server
    method: GET
    data_selector: version
- name: dal_connection_test
  endpoint:
    path: /rts/rex/test-dal-connector
    method: POST
    data_selector: tests
    params:
      connectorId: AS_MONGO
      corpusType: ANNOTATED_TRAIN_CORPUS
      healthCheck: 'true'
- name: custom-profiles
  endpoint:
    path: /custom-profiles
    method: GET
    data_selector: profiles
- name: entities
  endpoint:
    path: /entities
    method: POST
    data_selector: entities
- name: usage
  endpoint:
    path: /rest/usage
    method: GET
    data_selector: ''
- name: metrics
  endpoint:
    path: /rest/metrics
    method: GET
    data_selector: ''
- name: matchSentences
  endpoint:
    path: /rest/v1/match-sentences
    method: POST
    data_selector: ''
    params: {}
- name: entity_extraction
  endpoint:
    path: /api/v1/entities
    method: POST
    data_selector: results
    params: {}
- name: entities
  endpoint:
    path: /rest/v1/entities
    method: POST
    data_selector: configuration.entities
- name: events-training-server
  endpoint:
    path: /ets/info
    method: GET
    data_selector: info
    params: {}
- name: language
  endpoint:
    path: /language
    method: GET
    data_selector: ''
    params:
      shortStringThreshold: 20
- name: events_info
  endpoint:
    path: /events/info
    method: GET
- name: events_info_workspace
  endpoint:
    path: /events/info
    method: GET
    params:
      workspaceId: '{wid}'
- name: ping
  endpoint:
    path: /rest/v1/ping
    method: GET
    data_selector: message
- name: info
  endpoint:
    path: /rest/v1/info
    method: GET
    data_selector: name
- name: entities
  endpoint:
    path: /rest/v1/entities
    method: POST
    data_selector: entities
- name: events
  endpoint:
    path: /rest/v1/events
    method: GET
    data_selector: events
- name: language
  endpoint:
    path: /rest/v1/language
    method: GET
    data_selector: language
- name: morphology
  endpoint:
    path: /rest/v1/morphology
    method: GET
    data_selector: morphology
- name: semantics
  endpoint:
    path: /rest/v1/semantics
    method: GET
    data_selector: semantics
- name: sentences
  endpoint:
    path: /rest/v1/sentences
    method: GET
    data_selector: sentences
- name: tokens
  endpoint:
    path: /rest/v1/tokens
    method: GET
    data_selector: tokens
- name: extractable_data
  endpoint:
    path: /v1/extract
    method: POST
    data_selector: data
    params: {}
- name: events-training-server
  endpoint:
    path: /ets
    method: GET
    data_selector: records
    params: {}
- name: usage
  endpoint:
    path: /rest/usage
    method: GET
- name: metrics
  endpoint:
    path: /rest/metrics
    method: GET
- name: matchSentences
  endpoint:
    path: /rest/v1/match-sentences
    method: POST
    data_selector: keywords
- name: indoc_coref_installer
  endpoint:
    path: /coref-installation
    method: POST
    data_selector: installation_status
- name: entities
  endpoint:
    path: /rest/v1/entities
    method: POST
- name: gazetteer_add
  endpoint:
    path: /rest/v1/entities/configuration/gazetteer/add
    method: POST
- name: dal_connection_test
  endpoint:
    path: /rts/rex/test-dal-connector
    method: POST
    data_selector: tests
    params:
      connectorId: AS_MONGO
      corpusType: ANNOTATED_TRAIN_CORPUS
      healthCheck: 'true'
      config:
        projectId: 5f1470b6412ff29b8e4982f3
        sampleIds: 5f158b0e412ff29b8e4983b8,5f158b0e412ff29b8e4983b5,5f158b0e412ff29b8e4983b7
- name: fragment_boundary_detection
  endpoint:
    path: /sentences
    method: GET
    data_selector: records
- name: language_identification
  endpoint:
    path: /language
    method: GET
    data_selector: records
- name: categorization
  endpoint:
    path: /categories
    method: GET
    data_selector: records
- name: sentiment
  endpoint:
    path: /sentiment
    method: GET
    data_selector: records
- name: categories
  endpoint:
    path: /categories
    method: GET
    data_selector: custom models
- name: entities
  endpoint:
    path: /entities
    method: GET
    data_selector: gazetteers, regular expression files, custom models, linking knowledge
      base
- name: morphology
  endpoint:
    path: /morphology
    method: GET
    data_selector: user dictionaries
- name: sentiment
  endpoint:
    path: /sentiment
    method: GET
    data_selector: custom models
- name: tokens
  endpoint:
    path: /tokens
    method: GET
    data_selector: custom tokenization dictionaries
- name: custom_profiles
  endpoint:
    path: /custom/profiles
    method: POST
    data_selector: content
    params:
      profileId: myProfileId
- name: events-training-server
  endpoint:
    path: /ets/info
    method: GET
    data_selector: info
    params: {}
- name: log_file
  endpoint:
    path: /logs/ets-server.log
    method: GET
    data_selector: logs
    params:
      max-size: 20 MB
- name: events
  endpoint:
    path: /events/info
    method: GET
    data_selector: events
    params: {}
- name: events_by_workspace
  endpoint:
    path: /events/info
    method: GET
    data_selector: events
    params:
      workspaceId: '{wid}'
- name: entities
  endpoint:
    path: /entities
    method: POST
- name: sentiment
  endpoint:
    path: /sentiment
    method: POST
- name: events
  endpoint:
    path: /events
    method: GET
- name: rex_training_server
  endpoint:
    path: /rest/v1/entities
    method: POST
    data_selector: results
    params: {}
- name: events-training-server
  endpoint:
    path: /ets/info
    method: GET
    data_selector: info
- name: events_info
  endpoint:
    path: /events/info
    method: GET
- name: events_info_workspace
  endpoint:
    path: /events/info
    method: GET
    params:
      workspaceId: '{wid}'
- name: installation_directory
  endpoint:
    path: /basis/coref
    method: GET
    data_selector: directory
    params: {}
- name: docker_compose_files
  endpoint:
    path: /basis/ets/ets-docker
    method: GET
    data_selector: docker_files
    params: {}
- name: events_info
  endpoint:
    path: /events/info
    method: GET
- name: events_info_with_workspace
  endpoint:
    path: /events/info?workspaceId={wid}
    method: GET
- name: dal_connection_test
  endpoint:
    path: /rts/rex/test-dal-connector
    method: POST
    data_selector: tests
    params: {}
- name: events_info
  endpoint:
    path: /events/info
    method: GET
- name: events_info_workspace
  endpoint:
    path: /events/info
    method: GET
    params:
      workspaceId: '{wid}'
- name: categories
  endpoint:
    path: /categories
    method: GET
    data_selector: data
    params: {}
- name: entities
  endpoint:
    path: /entities
    method: POST
    data_selector: data
    params: {}
- name: morphology
  endpoint:
    path: /morphology
    method: GET
    data_selector: data
    params: {}
- name: sentiment
  endpoint:
    path: /sentiment
    method: POST
    data_selector: data
    params: {}
- name: tokens
  endpoint:
    path: /tokens
    method: GET
    data_selector: data
    params: {}
- name: events
  endpoint:
    path: /rest/v1/events
    method: POST
    data_selector: events
- name: coreference_server
  endpoint:
    path: /install-coref
    method: POST
    data_selector: response
    params: {}
- name: events_info
  endpoint:
    path: /events/info
    method: GET
    data_selector: events
    params: {}
- name: events_info_by_workspace
  endpoint:
    path: /events/info
    method: GET
    data_selector: events
    params:
      workspaceId: '{wid}'
- name: entities
  endpoint:
    path: /rest/v1/entities
    method: POST
    data_selector: entitiesResponse
- name: events
  endpoint:
    path: /rest/v1/events
    method: GET
    data_selector: events
- name: events-training-server
  endpoint:
    path: /ets/info
    method: GET
    data_selector: info
- name: events_info
  endpoint:
    path: /events/info
    method: GET
    data_selector: events
- name: events_info_workspace
  endpoint:
    path: /events/info
    method: GET
    data_selector: events
    params:
      workspaceId: '{wid}'
- name: indoc_coref_server
  endpoint:
    path: /install-coref
    method: POST
- name: adaptation_studio
  endpoint:
    path: /install-ras
    method: POST
- name: Adaptation Studio logs
  endpoint:
    path: /basis/ras/logs
    method: GET
- name: SSL certificate files
  endpoint:
    path: /basis/ras/certs
    method: GET
- name: Adaptation Studio database
  endpoint:
    path: /basis/ras/mongo_data_db
    method: GET
- name: Database backups
  endpoint:
    path: /basis/ras/mongo_data_dump
    method: GET
- name: events_info
  endpoint:
    path: /events/info
    method: GET
- name: events_info_workspace
  endpoint:
    path: /events/info
    method: GET
    params:
      workspaceId: '{wid}'
- name: events_info
  endpoint:
    path: /events/info
    method: GET
- name: events_info_workspace
  endpoint:
    path: /events/info
    method: GET
    params:
      workspaceId: '{wid}'
- name: events_info
  endpoint:
    path: /events/info
    method: GET
- name: events_info_workspace
  endpoint:
    path: /events/info
    method: GET
    params:
      workspaceId: '{wid}'
- name: events_info
  endpoint:
    path: /events/info
    method: GET
- name: events_info_workspace
  endpoint:
    path: /events/info?workspaceId={wid}
    method: GET
- name: ping
  endpoint:
    path: /rest/v1/ping
    method: GET
    data_selector: message
- name: info
  endpoint:
    path: /rest/v1/info
    method: GET
    data_selector: name
- name: server_info
  endpoint:
    path: /rts/info/server
    method: GET
    data_selector: version
- name: required_analytics_endpoints
  endpoint:
    path: /required/analytics/endpoints
    method: GET
    data_selector: records
- name: ping
  endpoint:
    path: /rest/v1/ping
    method: GET
    data_selector: response
    params: {}
- name: dal_connection_test
  endpoint:
    path: /rts/rex/test-dal-connector
    method: POST
    data_selector: tests
    params: {}
- name: info
  endpoint:
    path: /rest/v1/info
    method: GET
    data_selector: records
- name: events_info
  endpoint:
    path: /events/info
    method: GET
- name: events_info_workspace
  endpoint:
    path: /events/info
    method: GET
    params:
      workspaceId: '{wid}'
- name: entity_types
  endpoint:
    path: /entity-types
    method: GET
    data_selector: entityTypes
- name: worker_threads
  endpoint:
    path: /config/com.basistech.ws.transport.embedded.cfg
    method: POST
    data_selector: workerThreadCount
- name: name_similarity
  endpoint:
    path: /rest/v1/name-similarity
    method: POST
    data_selector: null
    params: {}
- name: name_similarity
  endpoint:
    path: /name-similarity
    method: POST
    data_selector: score
- name: supported_languages
  endpoint:
    path: /name-similarity/supported-languages
    method: GET
    data_selector: supportedLanguagePairs
- name: indoc_coref_server
  endpoint:
    path: /coref/install
    method: POST
    data_selector: installation_status
    params: {}
- name: adaptation_studio
  endpoint:
    path: /adaptation/studio/install
    method: POST
    data_selector: installation_status
    params: {}
- name: address_similarity
  endpoint:
    path: /rest/v1/address-similarity
    method: POST
    data_selector: null
    params: {}
- name: mongo_connection
  endpoint:
    path: /rts/rex/test-dal-connector
    method: POST
    data_selector: tests
    params:
      connectorId: AS_MONGO
      corpusType: ANNOTATED_TRAIN_CORPUS
      healthCheck: 'true'
      config:
        projectId: 5f1470b6412ff29b8e4982f3
        sampleIds: 5f158b0e412ff29b8e4983b8,5f158b0e412ff29b8e4983b5,5f158b0e412ff29b8e4983b7
- name: address_similarity
  endpoint:
    path: /address-similarity
    method: GET
    data_selector: supportedLanguagePairs
- name: record_similarity
  endpoint:
    path: /record/similarity
    method: GET
- name: categories
  endpoint:
    path: /categories
    method: GET
    data_selector: data files for custom profile
    params: {}
- name: entities
  endpoint:
    path: /entities
    method: GET
    data_selector: data files for custom profile
    params: {}
- name: morphology
  endpoint:
    path: /morphology
    method: GET
    data_selector: data files for custom profile
    params: {}
- name: sentiment
  endpoint:
    path: /sentiment
    method: GET
    data_selector: data files for custom profile
    params: {}
- name: tokens
  endpoint:
    path: /tokens
    method: GET
    data_selector: data files for custom profile
    params: {}
- name: record_similarity
  endpoint:
    path: /rest/v1/record-similarity
    method: POST
    data_selector: results
- name: supported_languages
  endpoint:
    path: /record-similarity/supported-languages
    method: GET
    data_selector: supportedLanguagePairs
- name: name_deduplication
  endpoint:
    path: /rest/v1/name-deduplication
    method: POST
    data_selector: names
    params:
      threshold: 0.75
- name: name-deduplication
  endpoint:
    path: /name-deduplication
    method: POST
    data_selector: results
    params: {}
- name: supported-languages
  endpoint:
    path: /name-deduplication/supported-languages
    method: GET
    data_selector: supportedLanguagePairs
    params: {}
- name: Indoc Coref Server
  endpoint:
    path: /install-coref
    method: GET
- name: Adaptation Studio
  endpoint:
    path: /install-ras
    method: GET
- name: language
  endpoint:
    path: /rest/v1/language
    method: POST
    data_selector: content
    params: {}
- name: categories
  endpoint:
    path: /rest/v1/categories
    method: POST
    data_selector: content
    params: {}
- name: DAL Connector
  endpoint:
    path: /rts/rex/test-dal-connector
    method: POST
    data_selector: tests
    params:
      connectorId: AS_MONGO
      corpusType: ANNOTATED_TRAIN_CORPUS
      healthCheck: 'true'
      config:
        projectId: 5f1470b6412ff29b8e4982f3
        sampleIds: 5f158b0e412ff29b8e4983b8,5f158b0e412ff29b8e4983b5,5f158b0e412ff29b8e4983b7
- name: annotated_data_model
  endpoint:
    path: /rest/v1/language
    method: POST
    data_selector: annotations
    params:
      output: rosette
- name: language_identifier
  endpoint:
    path: /rest/v1/language
    method: POST
    data_selector: languageDetections
    params: {}
- name: Base Linguistics
  endpoint:
    path: /base-linguistics
    method: GET
- name: morphology
  endpoint:
    path: /morphology/{morphoFeature}
    method: POST
    data_selector: results
- name: DAL Connection Test
  endpoint:
    path: /rts/rex/test-dal-connector
    method: POST
    data_selector: tests
    params: {}
- name: complete
  endpoint:
    path: /rest/v1/morphology/complete
    method: POST
    data_selector: response
- name: lemmas
  endpoint:
    path: /rest/v1/morphology/lemmas
    method: POST
    data_selector: response
- name: parts_of_speech
  endpoint:
    path: /rest/v1/morphology/parts-of-speech
    method: POST
    data_selector: response
- name: compound_components
  endpoint:
    path: /rest/v1/morphology/compound-components
    method: POST
    data_selector: response
- name: han_readings
  endpoint:
    path: /rest/v1/morphology/han-readings
    method: POST
    data_selector: response
- name: supported_languages
  endpoint:
    path: /morphology/supported-languages
    method: GET
    data_selector: supportedLanguages
- name: tokenizer
  endpoint:
    path: /tokens
    method: POST
    data_selector: tokens
    params: {}
- name: events
  endpoint:
    path: /rest/v1/events
    method: POST
    data_selector: events
- name: supported_languages
  endpoint:
    path: /tokens/supported-languages
    method: GET
    data_selector: supportedLanguages
- name: sentences
  endpoint:
    path: /rest/v1/sentences
    method: POST
    data_selector: sentences
    params:
      output: rosette
- name: events_info
  endpoint:
    path: /events/info
    method: GET
    data_selector: ''
    params: {}
- name: events_info_workspace
  endpoint:
    path: /events/info
    method: GET
    data_selector: ''
    params:
      workspaceId: '{wid}'
- name: supported_languages
  endpoint:
    path: /sentences/supported-languages
    method: GET
    data_selector: supportedLanguages
- name: entities
  endpoint:
    path: /rest/v1/entities
    method: POST
    data_selector: entitiesResponse
- name: entities
  endpoint:
    path: /rest/v1/entities
    method: POST
    data_selector: response
    params:
      output: rosette
- name: event_extractor
  endpoint:
    path: /rest/v1/events
    method: POST
- name: events_info
  endpoint:
    path: /events/info
    method: GET
- name: events_info_workspace
  endpoint:
    path: /events/info
    method: GET
    params:
      workspaceId: '{wid}'
- name: events
  endpoint:
    path: /rest/v1/events
    method: POST
    data_selector: events
    params: {}
- name: events
  endpoint:
    path: /rest/v1/events
    method: GET
    data_selector: events
- name: semantic_similarity
  endpoint:
    path: /semantic-similarity
    method: GET
- name: events
  endpoint:
    path: /events/info
    method: GET
- name: events_with_workspace
  endpoint:
    path: /events/info?workspaceId={wid}
    method: GET
- name: semantics_similar
  endpoint:
    path: /rest/v1/semantics/similar
    method: POST
    data_selector: tokens
    params: {}
- name: semantics_vector
  endpoint:
    path: /semantics/vector/supported-languages
    method: GET
    data_selector: supportedLanguages
    params: {}
- name: sentiment
  endpoint:
    path: /rest/v1/sentiment
    method: POST
    data_selector: response
    params: {}
- name: events_info
  endpoint:
    path: /events/info
    method: GET
    data_selector: events
    params: {}
- name: events_info_workspace
  endpoint:
    path: /events/info
    method: GET
    data_selector: events
    params:
      workspaceId: '{wid}'
- name: supported_languages
  endpoint:
    path: /sentiment/supported-languages
    method: GET
    data_selector: supportedLanguages
- name: topic_extractor
  endpoint:
    path: /rest/v1/topics
    method: POST
    data_selector: response
    params: {}
- name: events_info
  endpoint:
    path: /events/info
    method: GET
- name: events_info_workspace
  endpoint:
    path: /events/info
    method: GET
    params:
      workspaceId: '{wid}'
- name: categorizer
  endpoint:
    path: /rest/v1/categories
    method: POST
    data_selector: response
    params: {}
- name: supported_languages
  endpoint:
    path: /categories/supported-languages
    method: GET
    data_selector: supportedLanguages
- name: relationship_extractor
  endpoint:
    path: /relationship-extractor
    method: GET
- name: relationship_extractor
  endpoint:
    path: /rest/v1/relationships
    method: POST
    data_selector: relationships
- name: chat_translator
  endpoint:
    path: /rest/v1/transliteration
    method: POST
    data_selector: content
- name: supported_languages
  endpoint:
    path: /transliteration/supported-languages
    method: GET
    data_selector: supportedLanguages
    params: {}
- name: ping
  endpoint:
    path: /rest/v1/ping
    method: GET
    data_selector: null
    params: {}
- name: info
  endpoint:
    path: /rest/v1/info
    method: GET
    data_selector: ''
- name: entity_types
  endpoint:
    path: /entity/types
    method: GET
    data_selector: entity_types
- name: name_similarity
  endpoint:
    path: /rest/v1/name-similarity
    method: POST
    data_selector: match_score
- name: name_similarity
  endpoint:
    path: /name-similarity
    method: POST
    data_selector: score
    params: {}
- name: supported_languages
  endpoint:
    path: /name-similarity/supported-languages
    method: GET
    data_selector: supportedLanguagePairs
    params: {}
- name: address_similarity
  endpoint:
    path: /rest/v1/address-similarity
    method: POST
    data_selector: match_score
    params: {}
- name: address_similarity
  endpoint:
    path: /address-similarity
    method: GET
    data_selector: score
    params: {}
- name: supported_languages
  endpoint:
    path: /address-similarity/supported-languages
    method: GET
    data_selector: supportedLanguagePairs
    params: {}
- name: record_similarity
  endpoint:
    path: /record-similarity
    method: GET
- name: record_similarity
  endpoint:
    path: /rest/v1/record-similarity
    method: POST
    data_selector: results
- name: name_deduplication
  endpoint:
    path: /rest/v1/name-deduplication
    method: POST
    data_selector: names
    params:
      threshold: 0.75
- name: name-deduplication
  endpoint:
    path: /name-deduplication
    method: POST
    data_selector: results
- name: supported-languages
  endpoint:
    path: /name-deduplication/supported-languages
    method: GET
    data_selector: supportedLanguagePairs
- name: language_identifier
  endpoint:
    path: /rest/v1/language
    method: POST
    data_selector: response
    params: {}
- name: categories
  endpoint:
    path: /rest/v1/categories
    method: POST
    data_selector: response
    params: {}
- name: Annotated Data Model
  endpoint:
    path: /rest/v1/language
    method: POST
    data_selector: annotations
    params:
      output: rosette
- name: language_identifier
  endpoint:
    path: /rest/v1/language
    method: POST
    data_selector: languageDetections
    params: {}
- name: morphology
  endpoint:
    path: /morphology
    method: GET
- name: sentences
  endpoint:
    path: /sentences
    method: GET
- name: tokenizer
  endpoint:
    path: /tokenizer
    method: GET
- name: morphology
  endpoint:
    path: /morphology/{morphoFeature}
    method: POST
    data_selector: results
- name: complete
  endpoint:
    path: /rest/v1/morphology/complete
    method: POST
    data_selector: results
- name: lemmas
  endpoint:
    path: /rest/v1/morphology/lemmas
    method: POST
    data_selector: results
- name: parts_of_speech
  endpoint:
    path: /rest/v1/morphology/parts-of-speech
    method: POST
    data_selector: results
- name: compound_components
  endpoint:
    path: /rest/v1/morphology/compound-components
    method: POST
    data_selector: results
- name: han_readings
  endpoint:
    path: /rest/v1/morphology/han-readings
    method: POST
    data_selector: results
- name: supported_languages
  endpoint:
    path: /morphology/supported-languages
    method: GET
    data_selector: supportedLanguages
- name: tokenizer
  endpoint:
    path: /tokens
    method: POST
    data_selector: tokens
    params: {}
- name: sentences
  endpoint:
    path: /sentences
    method: POST
    data_selector: sentences
    params: {}
- name: supported_languages
  endpoint:
    path: /sentences/supported-languages
    method: GET
    data_selector: supportedLanguages
- name: entity_extractor
  endpoint:
    path: /entity-extractor
    method: GET
    data_selector: records
- name: event_extractor
  endpoint:
    path: /event-extractor
    method: GET
    data_selector: records
- name: entities
  endpoint:
    path: /rest/v1/entities
    method: POST
    data_selector: entities
- name: event_extractor
  endpoint:
    path: /rest/v1/events
    method: POST
    data_selector: event
    params: {}
- name: events
  endpoint:
    path: /rest/v1/events
    method: POST
    data_selector: events
    params:
      output: rosette
- name: semantics_similar
  endpoint:
    path: /rest/v1/semantics/similar
    method: POST
    data_selector: content
    params: {}
- name: semantics_vector
  endpoint:
    path: /semantics/vector/supported-languages
    method: GET
    data_selector: supportedLanguages
    params: {}
- name: sentiment_analyzer
  endpoint:
    path: /rest/v1/sentiment
    method: POST
    data_selector: response
    params: {}
- name: sentiment
  endpoint:
    path: /sentiment
    method: GET
    data_selector: document
    params: {}
- name: supported_languages
  endpoint:
    path: /sentiment/supported-languages
    method: GET
    data_selector: supportedLanguages
    params: {}
- name: topic_extractor
  endpoint:
    path: /rest/v1/topics
    method: POST
    data_selector: response
    params: {}
- name: supported_languages
  endpoint:
    path: /topics/supported-languages
    method: GET
    data_selector: supportedLanguages
- name: categorizer
  endpoint:
    path: /rest/v1/categories
    method: POST
    data_selector: response
    params: {}
- name: relationship_extractor
  endpoint:
    path: /relationship-extractor
    method: GET
- name: relationship_extractor
  endpoint:
    path: /rest/v1/relationships
    method: POST
    data_selector: relationships
- name: transliteration
  endpoint:
    path: /rest/v1/transliteration
    method: POST
    data_selector: content
    params: {}
- name: supported_languages
  endpoint:
    path: /transliteration/supported-languages
    method: GET
    data_selector: supportedLanguages
    params: {}
notes:
- Do not use the Analytics language identification endpoint to determine source language
  of names.
- Extracts keyphrases from the text that best represent its content.
- Extracts concepts contained in the text, but which may not be explicitly stated.
- The maximum payload size is 600KB, with a maximum character count of 50,000.
- By default, Rosette will only process one call at a time.
- Do not use the Rosette language identification endpoint to determine source language
  of names.
- The endpoint supports matching between the source and target of each pair.
- Requires API key setup.
- Ensure proper headers are set for requests.
- By default, Rosette will only process one call (active HTTP connection) at a time.
- content and contentUri are mutually exclusive; only one can be specified per call.
- API key is required for authentication.
- Default service URL is https://analytics.babelstreet.com/rest/v1/
- Both content and contentUri are mutually exclusive; only one can be specified per
  call.
- Requires API key for authentication.
- The maximum size name for any of the name processing endpoints is 500 characters.
- The API key must be provided to access the service.
- API key must be provided
- Alternative API URL can be specified
- Entity linking must be enabled to return DBpediaTypes and PermIDs.
- The API key must be provided for every request.
- API Key required for access.
- Content and contentUri are mutually exclusive; only one can be specified per call.
- Requires API key to access the service.
- The `content` and `contentUri` fields are mutually exclusive.
- Requires API key for access
- The address similarity endpoint supports English, Simplified Chinese, and Traditional
  Chinese.
- The name deduplication endpoint allows a maximum of 1000 names per request.
- Recommended to include sourceLanguageOfUse for optimal results.
- Requires API key and optional alternative URL for service.
- Requires API key for authentication
- Requires setup of API key.
- Requires setup of API key for access.
- Addresses can be defined either as a set of address fields or as a single string.
- API key required for authentication.
- Endpoints for name translation and language identification
- Some features require additional setup for specific use cases.
- Content and contentUri are mutually exclusive in requests.
- API key is required to access the endpoints.
- Uses API key for authentication — required for all requests.
- Addresses being matched do not have to contain all the same fields.
- Supports matching between English, Simplified Chinese, and Traditional Chinese addresses.
- Uses API key for authentication
- Content and contentUri are mutually exclusive
- API Key required for all requests
- Requires setup of API keys for access.
- Requires valid API key for access.
- Requires API key for access.
- Maximum payload size is 600KB, with a maximum character count of 50,000.
- Analytics API requires an API key for authentication
- Supported languages are available via a specific endpoint
- Requires setup of API key for access
- All endpoints expect the API Key to be passed as an HTTP header
- You must replace '[your_api_key]' with your personal API key.
- Content must be provided in the body of the request
- The `content` and `contentUri` are mutually exclusive; only one can be specified
  per call.
- Supports matching between source and target language pairs.
- Supported languages are identified by their ISO codes
- Requires setup of API key
- No authentication is supported.
- No cookies or other persistence mechanism is supported.
- API key is required for authentication
- Requires an API key for authentication
- Ensure to set the correct content type for requests
- Requires setup of API key to access the service
- Rosette Categorizer currently only supports English language input.
- Requires API key to access the API.
- contentUri must be a valid HTTP, HTTPS, or FTP URL
- Supported MIME types include text and HTML.
- The URL must be publicly accessible from the internet.
- Page content (HTML) dynamically generated by JavaScript cannot be downloaded.
- Sites that deny programmatic (without a real browser controlled by an end user)
  requests cannot be downloaded.
- Ensure the API key is included in every request header
- Uses API key for authentication.
- The API key must be provided for access.
- Endpoints require specific input formats for requests.
- Requires an API key for access
- The content key should contain the text to analyze
- The `content` and `contentUri` parameters are mutually exclusive.
- The API requires an API key to access.
- The name translation uses a specific algorithm tuned for names.
- The API can detect multiple languages in a document when multilingual is set to
  true.
- Requires API key to access endpoints.
- Supports both single label and multi-label categorization.
- API requires a valid API key for authentication
- Use appropriate API key for authentication
- Use the Rosette API for name deduplication and translation.
- API requires an API key to be passed in the header.
- Optimized for addresses in English, Simplified Chinese, and Traditional Chinese.
- Content must be provided for tokenization and sentence extraction.
- Rosette Name Translator supports translations from English to all languages, except
  Greek, Hebrew, Japanese, Thai, and Urdu.
- API requires a valid API key in the header for authentication.
- You may set the API key via command line argument.
- The API key must be provided to access the API.
- The content parameter must contain the text to be analyzed.
- API endpoints require content in JSON format.
- Supports English language input for categorization.
- Rosette Relationship Extractor currently only supports English language input.
- Requires an API key for access.
- Do not use the Rosette language identification endpoint to determine the source
  language of names.
- Requires API key to access the service
- Content must be set in the request parameters.
- Uses API key for authentication — required in the request header.
- Non-English addresses in Latin script may also be matched; results will vary by
  language.
- Entity linking is on by default for Cloud instances.
- Alternative API URL can be specified.
- Requires setup of BabelStreet API key.
- Requires setup of API key and possibly an alternate URL.
- Transliteration is only supported for Arabic.
- Use of content and contentUri is mutually exclusive for requests.
- Both keyphrases and concepts are returned with a salience value between 0 and 1.
- Supports multiple programming languages for API calls.
- Do not use the Rosette language identification endpoint to determine source language
  of names. Name similarity uses an algorithm specifically tuned to identify the language
  of names rather than general text.
- Name similarity uses an algorithm specifically tuned to identify the language of
  names rather than general text.
- The API key must be provided for authentication.
- Default API URL is https://analytics.babelstreet.com/rest/v1/
- Requires an API key for authentication.
- The API supports deduplication and translation of names.
- Ensure to use the correct API key for authentication.
- API key must be provided as a header in each request.
- API key is required for access.
- Alternative API URL can be provided.
- API key is required for access to endpoints.
- Only one of content or contentUri can be specified per call.
- The API requires a valid API key for authentication.
- Ensure the API key has the appropriate permissions for the requested endpoints.
- The API supports both topics and categories extraction.
- Supports file upload for sentiment analysis.
- The endpoint supports matching between the source and target of each language pair.
- Requires an API key to access the API.
- API key must be provided for authentication.
- The API requires an API key to access the endpoints.
- Default URL can be overridden with an alternate URL
- Requires setup of API key when making requests
- The threshold salience values for keyphrases and concepts are independently configurable.
- Requires setting of API key for authentication
- The Rosette address similarity endpoint is optimized for addresses in English, Simplified
  Chinese, and Traditional Chinese.
- Use the Rosette API key for authentication in the header.
- Ensure to handle potential errors when making API calls.
- Requires setup of API key for authentication
- The address similarity endpoint is optimized for addresses in English, Simplified
  Chinese, and Traditional Chinese.
- Requires API key to access
- The content field should be provided in the request body
- For Chinese and Japanese, 'modelType' can be set to 'perceptron' for a specific
  tokenization algorithm
- Requires API key in the request header.
- The API supports morphological analysis.
- API key must be provided to access the API.
- Requests must specify the content for processing.
- Supports document uploads for sentiment analysis
- This API uses an API key for authentication.
- Optimal results for name translation can be achieved by specifying sourceLanguageOfUse.
- Ensure to use the correct API key for authentication
- The content and contentUri parameters are mutually exclusive
- The content parameter must be provided for requests.
- Requires API key to access endpoints
- Content and contentUri are mutually exclusive in requests
- Entity linking must be enabled to return DBpediaTypes and PermIDs
- Different endpoints support different options and parameters
- content and contentUri are mutually exclusive for the topics API.
- Only one of 'content' or 'contentUri' can be specified per call.
- Name translation uses an algorithm specifically tuned to identify the language of
  names rather than general text.
- Requires a valid API key to access the endpoints.
- API requires an API key for authentication.
- Default API URL can be overridden.
- Content and contentUri are mutually exclusive for tokenization.
- The 'content' and 'contentUri' are mutually exclusive; only one can be specified
  per call.
- Content and contentUri are mutually exclusive for the sentences endpoint.
- API requires an API key to access.
- Language parameter is set as 'eng' for sentiment analysis.
- Content must be in a specific format for processing
- Ensure to include proper API key for authentication.
- The content needs to be sent in the body as JSON.
- API key required for requests
- Alternate URL can be specified, defaults to main API URL
- The content must be provided in the request body as JSON.
- For Chinese and Japanese, modelType can be set to 'perceptron'.
- Use `content` or `contentUri`, not both.
- The API supports both single label and multi-label categorization.
- Before analyzing, Rosette filters out some stop words and punctuation.
- Requires API key to access the endpoints
- API key required for all requests.
- Requires API key to access the Analytics API.
- Include the three-letter language code to speed up response time.
- When translating from English, use the endpoint to translate names of people to
  the name’s native language.
- Requires API key provided in the header.
- Requires setup of connected app in API
- Uses API key authentication
- The API requires an API key passed in the header.
- Ensure to provide the correct API key in the header.
- API key required for authentication
- Alternative URL can be specified
- Requires setup of API key as a command line argument or environment variable.
- Uses API key for authentication — key must be provided in every request header.
- content and contentUri are mutually exclusive for tokenization
- Default API URL can be overridden with an alternative URL
- To transliterate from native Arabic script to Arabizi set 'reversed' to true.
- API supports multiple programming languages
- For optimal results, specify sourceLanguageOfUse when translating names.
- Similarity scores range from 0 to 1.
- API responses are in JSON format.
- Ensure to handle the rate limiting as per the API guidelines.
- Default URL can be overridden by providing an alternate URL
- Calculate confidence scores with the calculateConfidence option.
- Calculate salience scores with the calculateSalience option.
- API key must be provided as a command line argument or set in the environment.
- Some endpoints may have optional parameters for result languages and count
- content and contentUri are mutually exclusive.
- The deep neural network model and the statistical model cannot be used together.
- The count option for similar terms can range between 1 and 50.
- Categories API only supports English language input.
- Rosette API requires a valid API key provided in the request headers.
- The default API URL is https://analytics.babelstreet.com/rest/v1/
- API key must be provided to access the service.
- Content and contentUri are mutually exclusive for sentences endpoint.
- Only one of `content` or `contentUri` can be specified per call.
- Content and contentUri are mutually exclusive — only one can be specified per call.
- Requires setup of connected app in api
- The API key must be provided either via command line argument or through the header.
- API key is required to access the service
- Uses API key for authentication — requires setup of API key in the header.
- The API key is required for authentication.
- content and contentUri are mutually exclusive
- Rosette API supports various language processing features.
- The API key is required for access.
- API key is required for access
- Response will return in JSON format
- The API requires an API key for authentication.
- It is recommended to specify the source language of use for optimal results.
- To transliterate from native Arabic script to Arabizi, set `reversed` to `true`.
- The API requires an API key to be passed in the header.
- API key is required to access the service.
- Non-English addresses in Latin script may vary in results.
- Entity linking is on by default in the Cloud instance.
- Requires setup of the API key for access
- The API requires an API key to be passed in the request header.
- Content must be provided in JSON format
- content and contentUri are mutually exclusive for sentences API
- Entity linking is on by default in Cloud — can be disabled for performance.
- API Key required for authentication.
- Endpoints require specific payloads for processing.
- Addresses do not have to contain all the same fields when using address similarity.
- The API Key is required for authentication.
- Handle exceptions properly to avoid crashes.
- You must replace [your_api_key] with your personal API key.
- API key must be provided as a parameter.
- Valid model types for Chinese and Japanese analyses are 'default' and 'perceptron'.
- Response format is JSON.
- The API requires a valid API key for access.
- Rosette supports both single label and multi-label categorization.
- Supports matching between the source and target of each language pair.
- The API key is required to access the endpoints.
- Requires API key for access to endpoints.
- API key is required and can be passed via command line argument.
- Use the default URL if no alternative URL is provided.
- Alternative URL can be specified for API calls
- Content must be provided in the request body.
- Addresses are defined as a set of address fields or as a single string.
- The endpoint supports matching between source and target of each pair.
- Use of API key is required to access the service.
- The name deduplication endpoint accepts a list of names and a threshold.
- The default API URL is https://analytics.babelstreet.com/rest/v1/.
- The API requires an API key and an optional alternative URL.
- You can only process one call at a time by default.
- The default URL can be overridden in the API request.
- Default URL can be overridden with an alternative URL
- The API supports matching between the source and target of each language pair.
- The API requires an API Key to access services.
- Some requests require specific content formats.
- Some API endpoints require a specific content format.
- API requires an API key
- The endpoint returns morphological analysis results for a given text
- Prior to release 7.36.0, Match did not support any limited languages; when presented
  with names in those languages, an 'unsupported language' error would be returned.
- To set Match to behave as it did previously, set `allLanguageSupport` to `false`.
- We recommend against modifying these parameters unless advised to by support.
- Prior to release 7.36.0, Match did not support any limited languages; when presented
  with names in those languages, an "unsupported language" error would be returned.
- 'Supported types include: rni_name, rni_date, rni_address, date, keyword, text,
  string, integer, long, short, double, float, boolean, geo_point.'
- Transliteration is only supported for Arabic, so Rosette ignores the language field
  and assumes the language is Arabic.
- The endpoint is optimized for addresses in English, Simplified Chinese, and Traditional
  Chinese.
- 'The api object creates an http client, but to provide your own: api.httpClient(CloseableHttpClient)'
- The API requires an API key for authentication and can accept an alternate URL.
- Uses API key — required for every request
- Specifying an Elasticsearch format disables support for unspecified fields.
- Requests must include either content or contentUri
- The plugin includes Elasticsearch REST APIs to customize and tune matching through
  stop words, token overrides, and parameter universes.
- You may use the optional responseFormat URL parameter to control the format of the
  response.
- Uses OAuth2 with refresh token — requires setup of connected app in api
- By default, Analytics will only process one call (active HTTP connection) at a time.
- Tokenization, normalization, and transliteration are required before matching.
- Match Studio is in locked mode when connected to an external Elasticsearch server.
- If Match Studio is in locked mode, it must be connected to a different external
  Elasticsearch server.
- Each version of Match Studio supports specific versions of the Match plugins for
  Elasticsearch and OpenSearch.
- Match Studio requires certain permissions to function.
- Each version of Match Studio supports specific versions of the Match plugins for
  Elasticsearch and OpenSearch. The supported versions are listed at the top of the
  Configure Servers page.
- You can only be connected to one server at a time.
- Supports both fielded and unfielded addresses.
- Parameters are specified directly in the request.
- Match Studio Limited (free trial) only supports English, Arabic, Chinese, Japanese,
  Korean, and Russian.
- Match Studio can now be installed with default Elasticsearch security enabled.
- When installing the free trial, default security is enabled by default.
- Effective name evaluation should be treated with the same attention and effort as
  any other investment.
- Entity type and language/script arguments are optional but recommended for better
  results.
- Token frequency analysis can identify potential candidates for stopwords.
- Match supports the ability to have individual named parameter universes for each
  scenario.
- The examples provided represent match phenomena when using the default parameter
  values unless indicated otherwise.
- If using a privately managed instance, install OpenSearch and the Match for OpenSearch
  plugin as instructed.
- Parameters can be configured to adjust the score for each match phenomenon.
- The pairwise match endpoint supports both fielded and unfielded addresses.
- This feature requires access to system parameters not currently available in this
  release.
- Match can match dates returning a data match score reflecting the time similarity
  of the two dates.
- Specifying an OpenSearch format disables support for unspecified fields.
- The examples provided represent match phenomena when using the default parameter
  values unless indicated otherwise. Parameters can be configured to adjust the score
  for each match phenomenon.
- Match Studio must be connected to a different external Elasticsearch server if in
  locked mode.
- The match score is a value between 0.0 and 1.0; the higher the score, the stronger
  the match.
- Similar name matches in different languages may generate different match scores.
- A value of 1.0 is returned if and only if the two names are identical.
- The doc_score, name_score and date_score functions are not currently supported in
  percolator queries.
- When using the parameter filter_out_scores_below, the filter will always return
  at least one document, even if the highest scoring document is below the filter
  threshold value.
- 'Overlay directory: RNI now allows users to specify an ''overlay directory'' location
  along with the existing BT_ROOT location.'
- If you have any customizations for address stop words or overrides from previous
  releases, the file names must be renamed to the new file naming convention. The
  file names now include three letter language codes.
- The free trial is a limited edition of Match Studio that lets you try the tool with
  your own data for 5 days.
- When using RNI-RNT with Solr 7, the flag -XX:+IgnoreUnrecognizedVMOptions must be
  added to the jvm arguments.
- Improved Hebrew-English name matching and token overrides.
- Some objects like Contact may return nulls in deeply nested fields
- Requires setup of authentication credentials.
- Some endpoints may have rate limits.
- Added new parameters, allowNullValue and ignoreBadData, in rlpnc/data/etc/parameter_defs.yaml.
  Both parameters will be used by the RNI elasticsearch plugin and are set to false
  by default.
- The reorderPenalty parameter now controls an exponentially decaying penalty instead
  of a linear one, in order to improve matching of longer names.
- Normalized some Katakana 'small' characters into their full sized counterparts to
  improve Japanese name matching and translation.
- Normalized Extension A Chinese characters into their variants to improve Chinese
  name matching and translation.
- Uses Java 1.8 or higher
- Match Studio can now be installed with default Elasticsearch security enabled. This
  setup automatically creates a user for accessing Elasticsearch and adds a self-signed
  certificate for SSL.
- When installing the free trial, default security is enabled by default. This is
  an option when installing the full product.
- The response format for calls to the pairwise match endpoint has changed significantly
  in this version.
- When using the parameter `filter_out_scores_below`, the filter will always return
  at least one document, even if the highest scoring document is below the filter
  threshold value.
- Katakana-Latin name matching with the enableSeq2SeqTokenScorer parameter enabled
  is not currently supported.
- The doc_score, name_score, and date_score functions currently are not supported
  in percolator queries.
- Uses OAuth2 with refresh token — requires setup of connected app in Babel Street
- While we have fixed a bug involving nested fields and the doc_score function, due
  to limitations of Elasticsearch, one still cannot rescore nested text fields with
  the doc_score function.
- The name_score, date_score, and doc_score functions currently are not supported
  in percolator queries. Percolator queries that utilize rni_name or rni_date fields
  will work, however.
- We recommend using a single entity type per Evaluation file to perform accuracy
  evaluations.
- The Docker build is not supported on machines with an ARM chip, such as the 'Apple
  Silicon' (M1/M2/...) Macs.
- The Docker build is not supported on machines with the Apple M1 chip. This is a
  known issue that should be addressed in a future release of Docker for Mac.
- The time taken to perform evaluations increases as more evaluations are run. This
  will be improved in a future version.
- 'Wikidata refreshed: We''ve updated the knowledge base data. The QID assigned to
  some extracted entities may differ from previous versions.'
- The Chinese Script Converter must be licensed distinctly from the rest of RBL. Old
  licenses won’t work for it anymore.
- Lemmatization is supported for Persian.
- A dictionary-based disambiguator is available for Hebrew and is now the default.
  To run disambiguation in TensorFlow, set the option `disambiguatorType` to `DisambiguatorType.DNN`.
- We are currently working with OpenSearch to provide access and enable these features.
- 'Any feature using TensorFlow will not work with Elasticsearch 8.1.1 including:
  Hebrew disambiguation with disambiguatorType set to dnn. Korean tokenization with
  tokenizerType set to spaceless_statistical. Indonesian POS tagging. Malaysian POS
  tagging.'
- Parameters for matching are specified directly in the request.
- 'Java support: Java 11 is no longer supported. Java 17 and Java 21 are supported.'
- This release is for compatibility with other Rosette SDKs. There are no new features
  or bug fixes.
- New feature to enable on-premise installations to require an API key and control
  user access to the API endpoints. This feature is disabled by default.
- Match supports a wide variety of date formats.
- New status endpoint for health information of servers connected to Rosette Server.
- 'New Feature - PermID Linking (LABS): We have augmented QID (Wikidata) linked entities
  by also linking them to Thomson Reuters Permanent Identifiers (PermIDs) when PermIDs
  are included in the Wikidata entry.'
- 'Wikidata update: We’ve refreshed and re-indexed the internal database for Wikidata
  linking. As a result, QIDs for some entities may have changed from previous versions.'
- 'DBpedia update: A QID can now be associated with more than one DBpedia subtype.'
- 'Bug fix: We fixed a bug in entity extraction and linking where it would crash when
  the modelType option is set to DNN.'
- When performing address matching, the setting `allLanguageSupport` must be set to
  `true`. If it is set to `false`, an unsupported language exception will be thrown.
- By default, `regexCurrencySplit` is set to false.
- 'New default settings: Entity linking is disabled, no supplemental regular expressions
  are loaded, pronominal resolution is not enabled.'
- Some objects may return nulls in deeply nested fields
- The plugin has been renamed to Babel Street Match for OpenSearch. The new file structure
  will now be /plugins/babel-street-match/bt_root.
- Java 11 or greater is supported on all platforms.
- 'Basic support for all languages: RNI can now index and match names in any language.
  Languages which previously would have returned an ''unsupported language'' error
  now return a match score.'
- When performing address matching, the setting `allLanguageSupport` must be set to
  `true`.
- Removed support for integrating RNI into a Solr 1.4 Application.
- The RWS-Names web service was sometimes returning UNKNOWN as the language for a
  name.
- RLPNC support for Java 1.5 is deprecated. RLPNC users of Java 1.5 should move to
  Java 1.6.
- New deep neural network processor available for entity extraction.
- Improved accuracy for several languages.
- The response format for calls to the pairwise match endpoint has changed significantly
  in this version. Please review the changes before upgrading if you rely on this
  feature.
- New endpoints available for topic extraction and name deduplication.
- Supports sentiment analysis in French and Arabic.
- Katakana-Latin name matching with the `enableSeq2SeqTokenScorer` parameter enabled
  is not currently supported.
- Improved explainability in record matching — request-level information is now included
  in the response.
- 'Wikidata update: We’ve refreshed and re-indexed the internal database for Wikidata
  linking.'
- The default configuration of the Entity Extraction and Linking endpoint has fewer
  options enabled to optimize performance.
- External internet access is required for the OFAC index update to function properly.
- New language support for Indonesian, Standard Malay, and Tagalog.
- Improved handling of postal codes.
- Expanded UK and CA address override tables.
- Requests can specify a parameters object to update parameter values for individual
  requests.
- 'Solr and Lucene support: Solr 9.9.0 and Lucene 9.12.2 are now supported.'
- Some objects like Contact may return nulls in deeply nested fields.
- New Tagalog support includes Part of Speech tagging and lemmatization.
- Indonesian and Standard Malay support for lemmatization added.
- Bug fixes include improvements in Russian lexicon.
- If disambiguate is set to false, or if no disambiguator for the language exists,
  BaseLinguisticsTokenFilter does not set the type correctly for compound components
  when adding them to the token stream.
- The prefixes and suffixes that the RSE tokenizer returns for Hebrew may include
  punctuation attached to the underlying tokens.
- If you use LanguageCode.SIMPLIFIED_CHINESE (zhs) or LanguageCode.TRADITIONAL_CHINESE
  (zht) when you load a Chinese token user dictionary, the dictionary is not loaded.
- To avoid a potential out-of-memory error, RSE does not attempt to decompound words
  longer than 30 characters.
- Inconsistent handling of numbers and punctuation during lemmatization.
- RSE expects valid Unicode strings as input.
- 'Java 21 support: Java 21 is now supported. Java 11 and 17 are still supported.'
- 'Java 17 support added: Java 8 and 9 support has been removed. Java 11 and Java
  17 are supported.'
- New endpoints added for topic extraction and name deduplication.
- Support for sentiment analysis in French and Arabic.
- This feature is disabled by default.
- The health check scripts require a version of curl > 7.64.0.
- 'When running all services, you may see a message: `docker-compose.yaml: version
  is obsolete`.'
- 'Known issue: If the indoc-coref-server is enabled, errors may be returned from
  the /sentiment, /topics, and /relationships endpoints if multiple entity mentions
  are returned for the same entity.'
- Adjudication is not supported for events.
- You cannot upload ETS model files that were created with older versions of MTS and
  contain invalid or unknown entity types.
- 'Be sure to check below if you use the following features: Entity linking with DBpedia,
  Language identification with Malaysian, Entity extraction and linking with Rosette
  Enterprise On-Premise'
- Be sure to check below if you use features like Entity linking with DBpedia, Language
  identification with Malaysian, Entity extraction and linking with Rosette Enterprise
  On-Premise.
- 'New model name restriction: Event model names and workspaces can no longer contain
  a colon (:)'
- Dutch event extraction is not supported by Rosette Server.
- If the indoc-coref-server is enabled, errors may be returned from the /sentiment,
  /topics, and /relationships endpoints if multiple entity mentions are returned for
  the same entity.
- Greek coverage expanded for POS tags and lemmas.
- Arabic improvements for name matching.
- Hebrew to English translation support added.
- Adjudication is not supported for events. We recommend only having a single annotator
  for each sample.
- Adjudication is not supported for events models.
- Input documents for event extraction should be no larger than 4K characters.
- Match Studio must be connected to a different external Elasticsearch server in locked
  mode.
- Entity extraction and linking supports multiple languages including Korean.
- New features added to improve accuracy for various languages.
- Match Studio requires specific permissions in OpenSearch to function.
- New endpoints for topic extraction and name deduplication added.
- Sentiment analysis now supports French and Arabic.
- Some endpoints may have specific performance improvements or bug fixes.
- Japanese translation improvements have been made.
- Supports multiple languages including Tagalog, Ukrainian, and Turkish.
- Improvements in name matching and tokenization efficiency.
- Improved address matching for various address formats.
- Tokenization enhancements for Japanese and emoji support.
- Uses JSON format for requests and responses
- Supports multiple data types for pair matching
- Dynamic custom profiles can now be loaded without restarting Rosette Enterprise.
- Supports various data types including rni_name, rni_date, rni_address, etc.
- LABS feature usage tracking for Rosette Enterprise
- LABS feature for custom endpoints in Rosette Enterprise
- Improved accuracy for entity extraction in Korean.
- New support for Hungarian language in entity extraction.
- Confidence scores for entities resolved to Wikipedia entries will now be returned.
- Rosette now supports document and entity-level sentiment analysis in French.
- 'When running all services, you may see a message: `` docker-compose.yaml: `version`
  is obsolete ``.'
- 'When running healthcheck scripts for RAS, RTS and ETS you may see curl: option
  --http0.9: is unknown'
- 'When running all services you may see a message: docker-compose.yaml: `version`
  is obsolete.'
- When adjudicating entity annotations, skip for now will only skip a single item.
- The source language of the name is optional, but recommended if known.
- If the indoc-coref-server is enabled, errors may be returned from multiple endpoints
  if multiple entity mentions are returned for the same entity.
- New SSL scripts updated for Rosette Server configuration.
- docker compose version 1.26.0 is deprecated and not supported.
- When an extremely common name is matched, the names returned by the first pass may
  be cropped to fit the window size.
- Authentication credentials can also be set as environment variables or system properties
  instead of storing the authentication information in plain text.
- The input data cannot contain any curly braces { }.
- The data must be valid json (no illegal backslash escape sequences, extraneous curly
  braces, etc.).
- 'For servers without authentication, the following parameters must be set in `elasticsearch-<version>/config/elasticsearch.yml`:
  network.host: 0.0.0.0, http.max_content_length: 400mb, xpack.security.enabled: false.'
- 'For servers with basic authentication, the following parameters must be set in
  `elasticsearch-<version>/config/elasticsearch.yml`: network.host: 0.0.0.0, http.max_content_length:
  400mb, xpack.security.enabled: true.'
- Match Studio requires certain permissions in order to function.
- Entity linking must be enabled by setting the linkEntities value to true in the
  rex-factory-config.yaml file.
- Uses linker processor for entity extraction which may differ from statistical, pattern-matching,
  and exact-matching processors.
- Custom processors can be added for additional pre-processing or modifying extractor
  output.
- Entity linking can be enabled by setting linkEntities to true.
- The accuracy of the current ORG model is too low and so it is better to turn it
  off for now.
- Entity Extractor has extensive customization features.
- The linker performs its own entity extraction and does NOT use entities found by
  the default entity extraction processors.
- The Entity Extractor endpoint comes fully configured to extract entities.
- The deep neural network processor is currently in beta.
- These steps are only necessary when Entity Extractor is configured to use linking.
- Entity Extractor detects entities within sentences.
- While the fragment boundary detector improves Entity Extractor's performance on
  tables, lists, and other non-prose content, Entity Extractor is, by design, tuned
  for prose and may not return high accuracy results on content with significant non-prose
  elements.
- By default, indoc coref is disabled.
- If you use the linker processor to extracts entities, the entities from the linker
  processor may differ from those returned by the statistical, pattern-matching, and
  exact-matching processors.
- Some responses may include nested null values
- Analytics Server was previously named Rosette Server.
- Docker is required to install the indoc coref server.
- The response time is much slower when indoc coref is enabled.
- Pre-warm is not enabled by default.
- Entity linking is disabled by default.
- Pronominal resolution is disabled by default.
- In-document coreference is disabled by default.
- No authorization is required when making calls to an on-premise installation of
  Analytics Server.
- Statistics are cumulative from the file creation date.
- Custom profiles are available to all application ids without requiring file duplication.
- Parameters for pair matching are specified directly in the request.
- Use the custom endpoint for accessing analytics server features.
- If you know the frequency of a name, you can dynamically adjust the window size
  for common names.
- Dynamic gazetteer entries are held completely in memory and state is not saved on
  disk.
- Depending on your specific FTK version, existing models may have different lexicon
  file names.
- If both lexicon.filtered and lexicon_filtered files are in the same model directory,
  lexicon.filtered will take precedence.
- Depending on your specific FTK version, your newly created model may have a `lexicon_filtered`
  file while the existing model has `lexicon.filtered` instead.
- Parameters can be configured via internal_param_profiles.yaml
- Configuring Analytics Server for event extraction
- Each release of Analytics Server is a complete release and should be installed in
  a new directory.
- The /ping and /info endpoints are always enabled.
- Health check endpoint is disabled by default.
- Requires proper configuration of Elasticsearch before integration.
- No authorization is required when using an on-premises installation of Analytics.
- A JSONL file containing detailed information about identified duplicate clusters
- A summary JSON file with statistics about the deduplication process
- Custom routing rules can be added for different application servers.
- Entity linking must be enabled to use the linker processor.
- Linking can identify real-world entities and disambiguate between different entities
  with the same name.
- Depending on the FTK version, newly created models may have a lexicon_filtered file
  while existing models have lexicon.filtered. Remove existing filtered lexicon file
  before adding the one from the new model.
- The linker processor’s entities will not necessarily match those from the default
  entity extraction processors.
- Entity linking must be enabled to return DBpedia entity types.
- The Entity Extractor comes fully configured to extract entities.
- Notes regarding the MTS Analytics Server
- Custom processors at the preExtractor phase can provide additional text pre-processing.
- Custom processors at the preRedaction phase are run after the default processors.
- Health check endpoint is configurable and disabled by default.
- Logging is configured using Log4j.
- Entity Extractor comes fully configured to extract entities.
- By default, no authorization is required when making calls to an on-premise installation
  of Analytics Server.
- To enable the name classifier for structured regions, set structuredRegionProcessingType
  to nameClassifier in the rex-factory-config.yaml file.
- Custom profiles are not currently supported for the address-similarity, name-deduplication,
  name-similarity, record-similarity, and name-translation endpoints.
- Entity Extractor has extensive customization features, including adding new entity
  patterns.
- The entity extraction endpoint comes fully configured to extract entities.
- Entity Extractor is tuned for prose and may not return high accuracy results on
  content with significant non-prose elements.
- Depending on your specific FTK version, your newly created model may have a lexicon_filtered
  file while the existing model has lexicon.filtered instead.
- Analytics supports both naming schemes for backwards compatibility.
- Remove the existing filtered lexicon file before adding the one from your new model.
- Currently, the ORG entity type is excluded for all languages. LOC is enabled for
  English and Japanese only.
- Lookbehind assertions are not supported.
- Pronominal resolution is supported for English only.
- By default, Entity Extractor factory is configured so the linker finds candidates
  in text before attempting to link them with knowledge base entries.
- Ping the server to test that Server is running and you can connect to it.
- Note that depending on your specific FTK version, your newly created model may have
  a lexicon_filtered file while the existing model has lexicon.filtered instead.
- Regardless of which naming scheme you see, you should remove the existing filtered
  lexicon file before adding the one from your new model.
- Whether to enable API key security for the Rosette Server endpoints. Can be true
  or false. Default is false.
- Whether API key security is used in authentication only mode.
- Many installations will require more than 32 GB of disk space.
- By default, fragment boundary detection is turned on.
- For production work, we strongly recommended that the indoc coref server is installed
  on a system with a GPU.
- The recommended browser for viewing the documentation is Chrome.
- Health check endpoints include events-training-server, indoc-coref-server, and rex-training-server.
- The health check endpoint is disabled by default.
- Analytics Server can be pre-warmed to speed up first call response time.
- An Analytics License secret available in the namespace where the installation will
  happen and licenseSecretName set in values.yaml or provided during installation
  with --set licenseSecretName=<license secret name>.
- A static persistent volume or a storage class capable of dynamically provisioning
  persistent volumes for the Analytics roots and the corresponding key set in values.yaml
  or provided during installation with --set storageClassName=<storage class> or --set
  rootsVolumeName=<volume>.
- The persistent volume should have ownership of 2001:0 and a permission mode of 775
  or 770.
- Health check endpoint is configurable but disabled by default.
- Logging can be customized through the log4j2.xml file.
- Pre-warming can be enabled to speed up response times.
- Entity linking and pronominal resolution are disabled by default.
- Dynamic gazetteer entries are held completely in memory and state is not saved on
  disk. When Analytics Server is brought down, the contents are lost.
- To save the new entries, add the new values to the related gazetteer file before
  restarting Analytics Server.
- If both `lexicon.filtered` and `lexicon_filtered` files are in the same model directory,
  `lexicon.filtered` will take precedence.
- The sentiment analysis endpoint can be configured to return document-level sentiment
  analysis only by turning off entity-level sentiment analysis.
- For both endpoints, edit the `transport-rules.tsv` file.
- To enable the short-string algorithm, edit the `rli-factory-config.yaml` file and
  set `shortStringThreshold` to your preferred value.
- Out of the box, the /sentiment and /categories endpoints only support the languages
  of the models that ship with the distribution.
- For the /sentiment endpoint only, edit the worker-config.yaml file to add new languages.
- Requires a valid Analytics License secret for installation.
- For production work, it is strongly recommended that the indoc coref server is installed
  on a system with a GPU.
- Health check endpoints are configurable and report health status.
- Logging can be configured using Log4j and customized in log4j2.xml.
- CXF logging is disabled by default.
- keyPassword and keyStore.password must have the same value.
- If your custom data sets are intended to supplement the shipped files, the directory
  name must not be 'rex'.
- If your custom data sets are intended to completely replace the shipped files, use
  the directory name 'rex'.
- Depending on your specific FTK version, your newly created model may have a `lexicon_filtered`
  file while the existing model has `lexicon.filtered` instead. Analytics supports
  both naming schemes for backwards compatibility.
- The sentiment analysis endpoint can be configured to return document-level sentiment
  analysis only, by turning off entity-level sentiment analysis.
- For both endpoints, edit the transport-rules.tsv file. Each endpoint is listed,
  with a lang= statement listing the supported languages for the endpoint.
- We recommend that you do not disable the /language endpoint as it is used by many
  endpoints to identify the language of the request.
- The /ping and /info endpoints are always enabled. They do not have to be listed
  in the override-endpoints.yaml file.
- Health check is disabled by default
- To enable health check, modify config/com.basistech.ws.fe.health.cfg
- No authorization is required when making calls to an on-premise installation of
  Analytics Server by default.
- If required, additional checks on API calls can be added.
- Health check endpoint configuration is in the file config/com.basistech.ws.fe.health.cfg
  and is disabled by default.
- 'By default, Analytics generates the following log files in the /logs/ directory:
  500-exception.log, rosapi.log, wrapper.log.'
- Logging in Analytics Server is configured through an XML configuration file named
  log4j2.xml, found in the server/conf directory.
- Each endpoint has a supported-languages method which returns the languages supported
  by the endpoint in addition to your license status for the language.
- The GPU must be an NVIDIA GPU.
- Depending on your specific FTK version, your newly created model may have a lexicon_filtered
  file while the existing model has lexicon.filtered.
- Calls to Analytics Server Endpoints
- Calling an endpoint that you are not licensed for will result in an error.
- The recommended minimum Java heap size to run all endpoints is 16 GB
- API key security can be enabled, and there are endpoints that do not require API
  keys
- If required, you can add additional checks on API calls.
- Usage tracking is turned on by default.
- The default is false for useIndocServer.
- If your installation includes the entity extraction component (`rex-root`), you
  may see `failed to open ...` warning messages for data files in languages not installed
  in your system. These can safely be ignored.
- 'Match functionality is provided through four endpoints: Name Similarity, Name Deduplication,
  Address Similarity, and Record Similarity.'
- Depending on your specific FTK version, the newly created model may have a `lexicon_filtered`
  file while the existing model has `lexicon.filtered`. Analytics supports both naming
  schemes for backwards compatibility.
- Call statistics are cumulative from the file creation date.
- The response time is much slower when indoc coref is enabled. For production work,
  it is recommended that the indoc coref server is installed on a system with a GPU.
- If you have $ROSAPI_ROOTS set from a previous release, you will need to remove it
  before starting the install script.
- Match uses machine learning and NLP techniques for various matching tasks.
- Name matching can be complex due to variations in names across languages.
- The indoc coref server is an additional server which must be installed on your system
  for Server.
- The recommended browser for viewing the documentation is Chrome. Edge and IE may
  not properly display the pages.
- Default logging is quiet on successful calls and client-side (4xx) errors.
- API key security is used in authentication only mode.
- API key security needs to be enabled.
- Typically, the global certificate authority certificate truststore is in `<JAVA_INSTALL>/lib/security/cacerts`
  with the default password of `changeit`.
- Uses self-signed certificates for testing.
- Names are complex to match because of the large number of variations that occur
  within a language and across languages.
- The parameter files are contained in two .yaml files located in /rlpnc/data/etc.
- Analytics Server contains a configurable health check endpoint to report the health
  information of servers connected to Analytics.
- The health check feature is disabled by default.
- To run the entity extraction and linking, sentiment analysis, and topic extraction
  endpoints, the recommended value for ROSETTE_JVM_MAX_HEAP is 16GB.
- The /ping endpoint checks if the server is running.
- The /info endpoint provides server version information.
- Health check endpoints are configurable and disabled by default.
- Logging is configured through log4j2.xml in the server/conf directory.
- For production work, it is strongly recommended to install the indoc coref server
  on a system with a GPU.
- Timeout for health requests can be set with the asyncResponseTimeoutMs field.
- 'By default, Analytics generates the following log files in the /logs/ directory:
  500-exception.log, rosapi.log, wrapper.log'
- The current default logging is deliberately quiet on successful calls and client-side
  (4xx) errors.
- To speed up first call response time, Analytics Server can be pre-warmed by loading
  data files at startup at the cost of a larger memory footprint.
- Endpoints requiring native OS libraries include /name-similarity, /name-translation,
  and name-deduplication when the language is Chinese, Japanese, Korean, Russian,
  or Arabic.
- Entity linking and Pronominal resolution are disabled by default.
- No authorization is required by default for on-premise installations.
- Health check endpoints report the health of connected servers.
- Endpoints requiring native OS libraries.
- You must run the installer while connected to the internet to download the files.
- Once you have trained a model in a new language, you must add the new languages
  to the transport-rules.tsv and worker-config.yaml files in Analytics Server.
- The Analytics Server configuration must be updated to support events.
- Health check endpoint is disabled by default
- Pre-warm is not enabled by default
- If no application id is provided in the call header, the calls are allocated to
  the no-app-id group.
- The health status supports UP, DOWN, and UNAVAILABLE states for services.
- These instructions assume all workers are on a single machine. If Analytics Server
  is installed in an environment with distributed workers, contact Support.
- Do not modify the parameter_defs.yaml file. All changes should be made in the parameter_profiles.yaml
  file.
- Calls made to the endpoints `/rest/v1/info`, `/rest/v1/ping`, and `/rest/v1/custom`
  are not included in the statistics.
- The server must be running to access endpoints.
- Ensure proper licensing for endpoints.
- Endpoints may require additional native OS libraries depending on the language.
- For optimal performance, reserve enough free memory for memory mapping of data files.
- The key is passed using the header, X-BabelStreetAPI-Key.
- Calls made to the endpoints /rest/v1/info, /rest/v1/ping, and /rest/v1/custom are
  not included in the statistics.
- Default logging configuration is quiet on successful calls and client-side (4xx)
  errors.
- No authorization is required when making calls to an on-premise installation of
  Analytics Server. If required, you can add additional checks on API calls.
- A complete installation may require up to 90GB to install Analytics Server.
- 'The health status supports the following states for each service: UP, DOWN, UNAVAILABLE.'
- The default for pre-warming is set to false.
- The indoc coref server is enabled for all calls when useIndocServer is set to true.
- Depending on FTK version, lexicon naming may vary.
- To speed up document-level sentiment analysis, remove entity extraction from the
  worker-config.yaml.
- API requires API key for authentication.
- Typically, the global certificate authority certificate truststore is in <JAVA_INSTALL>/lib/security/cacerts
  with the default password of changeit.
- If your custom data sets are intended to supplement the shipped files, the directory
  name must not be `rex`.
- If your custom data sets are intended to completely replace the shipped files, use
  the directory name `rex`.
- API key security is enabled.
- Certain endpoints may require additional disk space.
- All endpoints require a valid license.
- Health check endpoint reports the status of connected servers.
- Be careful when editing any of these files as the endpoints will not work if not
  configured properly.
- Timeout for health requests can be set in the config file.
- Fragment boundary detection is turned on by default.
- Access to these endpoints can be restricted to network interface if required.
- Usage tracking is turned on by default. To disable tracking, uncomment the `enabled`
  parameter and change the value to false.
- By default, usage tracking is kept in the file `launcher/config/rosette-usage.yaml`.
- API keys are sent in headers and are vulnerable in transfer if unencrypted.
- If there is an empty file in the overlay directory, Entity Extractor will ignore
  the corresponding file in the default data directory.
- '`lexicon.filtered` will take precedence if both files are in the same model directory.'
- If you are licensed for event extraction, the Events Training Server (ETS) must
  be installed with Analytics Server.
- Logging can be customized using the log4j2.xml configuration file.
- Pre-warming can be set to true for quicker response times.
- Uses Docker for installation.
- Requires an Analytics License secret.
- Health check endpoints report UP, DOWN, UNAVAILABLE status.
- Default is to disable health/services endpoint.
- Analytics generates logs in the /logs/ directory.
- Calls made to the endpoints '/rest/v1/info', '/rest/v1/ping', and '/rest/v1/custom'
  are not included in the statistics.
- The Root Certificate Authority can also be added to the truststore used system-wide
  by Java.
- The health services endpoint is disabled by default.
- Default value for worker threads is 2.
- No authorization is required for on-premise installation.
- 'By default, fragment boundary detection is turned on. To turn off fragment boundary
  detection: Edit the file /launcher/config/rosapi/rbl-factor-config.yaml Remove the
  comment from the fragmentBoundaryDetection parameter Set fragmentBoundaryDetection:
  false'
- When running the custom endpoint as a stand-alone spring boot application
- When running the custom endpoint as a war file in tomcat
- Endpoints requiring native OS libraries include /name-similarity, /name-translation,
  and /name-deduplication when the language is Chinese, Japanese, Korean, Russian,
  or Arabic.
- To speed up document-level sentiment analysis, remove the entity extraction step
  from the process.
- macOS and Linux Users must remove $ROSAPI_ROOTS set from a previous release before
  starting the install script.
- Health check endpoints are configurable and report the health status of various
  servers.
- The default logging configuration is quiet on successful calls and client-side errors.
- Pre-warming can reduce first call response time but increases memory usage.
- Logging in Analytics Server is configured through an XML configuration file named
  log4j2.xml.
- Pre-warming is not enabled by default.
- For the /sentiment and /categories endpoints, edit the transport-rules.tsv file.
  Each endpoint is listed, with a lang= statement listing the supported languages
  for the endpoint.
- 'Fragment boundary detection is turned on by default. To turn it off, set fragmentBoundaryDetection:
  false in rbl-factor-config.yaml.'
- Out of the box, the `/sentiment` and `/categories` endpoints only support the languages
  of the models that ship with the distribution.
- Once you have trained a model in a new language, you must add the new languages
  to the `transport-rules.tsv` and `worker-config.yaml` files in Analytics Server.
- Use the interactive documentation to make calls to Rosette from within the browser.
- If you try to view the documentation from a browser that's not on the server where
  Server is installed, you will need to replace `localhost:8181` with the appropriate
  hostname.
- Health check endpoints are configurable.
- Call statistics are kept in the file `launcher/config/rosette-usage.yaml`. The statistics
  are cumulative from the file creation date.
- Pre-warming is set to false by default.
- The short-string threshold is 0 by default and can be set to a non-negative integer
  to activate short-string language detection.
- No authorization required by default when making calls to an on-premise installation.
- Pre-warm feature is not enabled by default.
- The sentiment analysis endpoint can be configured to return document-level sentiment
  analysis only.
- Health check endpoints report server health status.
- Analytics Server can be pre-warmed by loading data files at startup.
- When authentication or authorization is required, a key must be passed in each API
  call.
- Check the logs in <rosette>/server/logs/ to see any errors from startup or during
  the server run.
- To bypass language identification, add the language parameter to the input.
- No authorization is required for on-premises installation of Analytics.
- Calculating the match score is a complex process that involves multiple steps and
  algorithms.
- Custom profiles may require specific configurations.
- Entity extraction has specific input requirements.
- Do not modify the parameter_defs.yaml file.
- Global changes are made with the any profile.
- For production work, it is recommended that the indoc coref server is installed
  on a system with a GPU.
- Health check endpoints are configurable and report health information of connected
  servers.
- Machine-learning models are completely dependent on the quality of the data used
  for training.
- Inconsistent annotation or lack of adherence to the project annotation guidelines
  will lead to less accurate models.
- You must be registered as a manager.
- If no `app-id` is included in the header, calls are allocated to the `no-app-id`
  group.
- Ensure that the application server is properly configured for each endpoint.
- Note that depending on your specific FTK version, your newly created model may have
  a `lexicon_filtered` file while the existing model has `lexicon.filtered` instead.
- Event modeling can be complex.
- When extracting event mentions from text, each mention is of a specific, pre-defined
  type.
- The training servers can be installed on the same server.
- A single machine install is adequate for light loads and configuration testing.
- The '/ping' and '/info' endpoints are always enabled.
- For all Docker installations, `localhost` is not an acceptable name; the hostname
  must be addressable from within the Docker containers.
- No authorization is required by default when making calls to an on-premise installation
  of Analytics Server.
- Windows deployment (including Docker Desktop for Windows) is not tested or supported
  at this time.
- Please note that it’s not recommended setting the max heap to the amount of physical
  RAM in the system.
- More heap doesn’t always translate to better performance, especially depending on
  your garbage collection settings.
- Analytics Server’s data files are loaded into virtual memory.
- Some endpoints, such as `/entities`, involve a large amount of data.
- In order for Analytics Server to operate at its peak performance, we recommend that
  you reserve enough free memory to allow memory mapping of all our data files so
  that page misses are minimized at runtime.
- We also recommend increasing the worker threads to 4.
- The Entity Training Server must be installed on both the training and the Analytics
  Server production instance.
- Indoc coref is supported for English only.
- Response time will be slower when the request includes options such as {'useIndocserver':true}.
- 'Recommended Operating System: 64 bit Linux or macOS.'
- Windows deployment is not tested or supported at this time.
- Entity Training Server used to be called REX Training Server.
- The product can be installed interactively or with a headless installer.
- By default, once logs reach 10 MB they are archived.
- Supported values for the max-size include MB and KB.
- Model Training Suite is shipped with a sample events model that can be used to verify
  the installation for events.
- Not recommended to set max heap to the amount of physical RAM in the system.
- Reserve enough free memory to allow memory mapping of all data files.
- The DAL connector is configured using the file /basis/rts/config/mongodal_config.yaml.
- SSL for the front end browser can be enabled when Adaptation Studio is installed.
- Enabling front end SSL support is independent of enabling SSL between the servers.
- If all components are running on a single host, the same certificate and key PEM
  files can be shared.
- Event Training Server, Entity Training Server, and Analytics Server are Java processes,
  so they require a keystore for the host and truststore for the root CA in a password
  protected Java Key Store (JKS) format.
- To verify that the regex is being used, add ?output=rosette to the request.
- Docker, dockercompose, and unzip must be installed.
- The file size at which logs are archived can be changed by setting the max-size
  in the file /basis/ets/config/application.yml.
- Health check verifies connection to mongo instance on Adaptation Studio
- Use cURL to test the connection to the mongo server without going through Entity
  Training Server
- Sets ENABLE_OUTGOING_SSL to false.
- Requests for the latest version should be sent to analyticssupport@babelstreet.com.
- Windows deployment (including Docker Desktop for Windows) is not tested or supported.
- It’s not recommended setting the max heap to the amount of physical RAM in the system.
- The disk requirements for the docker compose files are minimal (< 1 MB). However,
  other parts of the install require greater disk space.
- The training server is a Java application and all operations use the JVM heap.
- To allow more simultaneous annotations on more projects, increase the RAM allocated
  to the JVM in Entity Training Server.
- Response time may be slower when using indoc coref.
- Uses advanced entity extraction capabilities provided by Entity Extractor.
- Model naming convention requires prefix `model.` and suffix `-LE.bin`.
- Any alphanumeric ASCII characters are allowed in between.
- The binary gazetteer file name must end with `-LE.bin`.
- A gazetteer file is a .txt file encoded in UTF-8.
- Role types and extractors are generalized, reusable objects.
- Once the schema is defined, use Adaptation Studio to annotate documents containing
  event mentions to train an events model.
- If Adaptation Studio is not reachable, the DAL connection test could hang for 1-2
  minutes waiting for the connection.
- The default values were determined as optimal during early rounds of performance
  tests targeting < 2 second response times.
- Custom profiles allow Analytics Server to be customized without altering the server-wide
  (global) settings.
- Analytics Server is pre-configured to store custom profiles in the '${INSTALL}/config/custom-profiles'
  directory.
- Any path inside the configuration files is defined in terms of the Analytics Server
  container's filesystem.
- Analytics Server is pre-configured to store custom profiles in the ${INSTALL}/config/custom-profiles
  directory.
- 'Any path inside the configuration files, such as dataOverlayDirectory: file:///rosette/server/launcher/config/custom-profiles/my-config,
  is defined in terms of the Analytics Server container''s filesystem, not the host''s
  filesystem.'
- Regexes can be very difficult to get correct.
- For all Docker installations, localhost is not an acceptable name; the hostname
  must be addressable from within the Docker containers.
- The variable values set in the .env file are used in the docker-compose.yml file.
- For a mapping of the part-of-speech tags that appear in this appendix to the tags
  used in the Penn Treebank Project, see the tab-delimited .csv files distributed
  along with this Application Developer's Guide in the penn_treebank subdirectory.
- The RBL Korean part-of-speech tags conform to the Penn Treebank standard.
- In RBL, each language has its own set of POS tags and a few languages have multiple
  tag sets.
- Docker installations require the hostname to be addressable from within the Docker
  containers.
- To modify the JVM heap for standalone, edit the file server/conf/wrapper.conf and
  modify the value of wrapper.java.maxmemory.
- We also recommend increasing the worker threads to 4, as described in [Configuring
  worker threads for HTTP transport](analytics-server-user-guide.html#configuring-worker-threads-for-http-transport-13546
  "Configuring worker threads for HTTP transport").
- The Event Training Server must be installed on both the training and the Analytics
  Server production instance.
- The installation can be done interactively or with a headless installer.
- The installation directory for REX Training Server defaults to `/<installDir>/rts`.
- The installation directory for Event Training Server defaults to `/<installDir>/ets`.
- In a closed network this may not be required however, passwords from the client
  to server are initially sent using clear-text so it is recommended to enable SSL.
- Uses OAuth2 with refresh token
- Docker installations require the hostname to be addressable from within Docker containers.
- Windows deployment is not tested or supported.
- The source file is UTF-8 encoded.
- The file may begin with a byte order mark (BOM).
- Each entry is a single line.
- Empty lines are ignored.
- If the test is not successful, use cURL or a mongo client to test the connection
  to the mongo server without going through Entity Training Server.
- For a mapping of the part-of-speech tags that appear in this appendix to the tags
  used in the Penn Treebank Project, see the tab-delimited .csv files (one per language)
  distributed along with this Application Developer's Guide in the penn_treebank subdirectory.
- If all components are running on a single host, the same certificate and key PEM
  files can be shared by Adaptation Studio, Event Training Server, Entity Training
  Server, and Analytics Server.
- Event Training Server, Entity Training Server, and Analytics Server require a keystore
  for the host and truststore for the root CA in a password protected Java Key Store
  (JKS) format.
- As long as the root CA is included, any truststore can be used.
- A warning message about the files being identical and not being copied can safely
  be ignored when re-enabling SSL.
- New profiles are automatically loaded in Analytics Server. You do not have to bring
  down or restart the instance to add new models or data.
- The connection string points to the mongo instance in Adaptation Studio.
- Be cautious not to change the indentation of the file as YAML files are sensitive
  to indentation. Indentation is done using spaces, not tabs.
- The configuration file to customize Analytics Server is located at `/basis/rs/config`.
- The directory for Events Training Server is mounted as a volume.
- The Entity Training Server used to be called REX Training Server.
- You must have Docker, dockercompose, and unzip installed.
- Total memory consumption depends on the number of models being trained simultaneously,
  as well as the size of the models.
- Maximum number of entries in the analysis cache. Larger values increase throughput,
  but use extra memory. If zero, caching is off.
- Indicates whether analyzers produced by the factory are case sensitive. If false,
  they ignore case distinctions.
- If Adaptation Studio is not reachable, this test could hang for 1-2 minutes waiting
  for the connection.
- The profile-data-root value must be set correctly in the configuration files.
- If the data overlay directory is named rex, it will completely replace all supplied
  data files.
- Dynamic dictionaries are held completely in memory and state is not saved on disk.
- Uses Penn Treebank standard for part-of-speech tags.
- The number of models that can be simultaneously trained depends on the size of the
  models and the memory available.
- By default, once logs reach 10 MB they are archived. That is, they are compressed
  with a date stamp and sequence number such as ets-server.log.2022-03-04.0.gz. The
  file size at which this occurs can be changed by setting the max-size in the file
  /basis/ets/config/application.yml.
- RBL supports Lucene versions 7.0 - 9.10 and Solr versions 7.0 - 9.6
- Case sensitivity options can be configured.
- The DAL connection test verifies the connection between Entity Training Server and
  the mongo instance on Adaptation Studio.
- Sets NGINX_CONF_FILE to nginx-not-ssl.conf.
- Sets NGINX_CERT_PEM_FILE, NGINX_KEY_PEM_FILE and NGINX_TRUSTED_PEM_FILE to placeholder
  files in the ./certs directory.
- Deletes ETS_KEYSTORE_PW and ETS_TRUSTSTORE_PW.
- Sets ETS_KEYSTORE_FILE and ETS_TRUSTSTORE_FILE to placeholder files in the ./certs
  directory.
- The configuration file to customize Analytics Server is located at /basis/rs/config.
- The directory for Analytics Server roots is mounted as a volume at /basis/rs/roots.
- 'Any path inside the configuration files, such as ''dataOverlayDirectory: file:///rosette/server/launcher/config/custom-profiles/my-config'',
  is defined in terms of the Analytics Server container''s filesystem, not the host''s
  filesystem.'
- 'Any path inside the configuration files, such as dataOverlayDirectory: file:///rosette/server/launcher/config/custom-profiles/my-config,
  is defined in terms of the Analytics Server container''s filesystem, not the host''s
  filesystem. Use /rosette/server/launcher/config/custom-profiles in the configuration
  files instead of ${INSTALL}/config/custom-profiles.'
- 'The configuration setting startingWithDefaultConfiguration: true controls if the
  server-wide configuration is used in addition to the custom profile. If startingWithDefaultConfiguration:
  is set to false, the custom profile must include all NER models, gazetteers, regexes,
  and other data files from the REX root.'
- This API provides POS tags for multiple languages including Portuguese.
- Ensure to validate the tag descriptions for specific use cases.
- RLI requires a Java Runtime Environment 11 or 17.
- Best results are achieved by disabling unnecessary language profiles.
- When using the `SPACELESS_LEXICAL` tokenizer, you must use the CLA/JLA dictionaries
  instead of the segmentation dictionary.
- The analysis dictionary is not intended to be used with the `SPACELESS_LEXICAL`
  tokenizer.
- When RLI is performing short-string language detection, only languageHint and language
  weight adjustments are used.
- If a non-scriptio-continua region has fewer characters than the minimum and is adjacent
  to a scriptio continua region, the former will be merged into the latter.
- Your license (`rlp-license.xml`) must be in the `licenses` subdirectory of the RBL
  installation.
- When using the SPACELESS_LEXICAL tokenizer, you must use the CLA/JLA dictionaries
  instead of the segmentation dictionary.
- The analysis dictionary is not intended to be used with the SPACELESS_LEXICAL tokenizer.
- Rosette Server was previously named Rosette Enterprise.
- The option name to set the analysis cache depends on the accepting factory.
- Uses HTTP REST endpoints for accessing the server
- This API provides various parts of speech tags for different languages.
- By default, no authorization is required when making calls to an on-premise installation
  of Rosette Server.
- Custom profiles are not currently supported for the address-similarity, name-deduplication,
  name-similarity, and name-translation endpoints.
- Uses statistical model for Chinese and Japanese tokenization.
- Supports Hebrew and Arabic token analysis.
- No authorization is required when using an on-premises installation of Rosette.
- The short-string threshold for language detection is 0 by default.
- If you try to view the documentation from a browser that's not on the server where
  Rosette Server is installed, you will need to replace `localhost:8181` with the
  appropriate hostname and ensure that the port is accessible.
- 'Optimal memory settings: Rosette’s memory consumption includes the JVM heap and
  memory mapping of on-disk files.'
- 'Disk requirements: You should have sufficient amount of free space to unpack the
  application and data from your shipment.'
- 'Shipment: You will receive an email containing all the files needed to install
  Rosette Server, for multiple operating systems and also for using Docker.'
- Accessing the deployed documentation requires the correct hostname.
- No authorization is required by default when making calls to an on-premise installation
  of Rosette Server.
- To track Rosette calls by groups within your organization, include an application
  id in the request header.
- The API provides access to various POS tags for Portuguese.
- Data examples provided in the documentation are illustrative.
- Short-string language detection is inactive by default.
- By default, the short-string threshold is 0 and short-string language detection
  is inactive.
- To enable the short-string algorithm, set the threshold to a non-negative integer,
  such as 20.
- No authorization is required when making calls to an on-premise installation of
  Rosette Server.
- If Rosette Server is installed in an environment with distributed workers, contact
  Rosette support.
- To enable the short-string algorithm, set shortStringThreshold to your preferred
  value.
- Ping the server to test that Rosette is running and you can connect to it.
- For best results, disable language profiles that you are certain will not appear
  in your data.
- Short-string detection is turned off by default.
- When RLI is performing short-string language detection, only languageHint and language
  weight adjustments are used. The other options are ignored.
- This is only used for script region detection.
- Docker disk image size must be increased to 120GB to install the full Rosette Server
  package.
- If your installation includes the entity extraction component, you may see failed
  to open warning messages for data files in languages not installed in your system.
  These can safely be ignored.
- If required, you can add additional checks on API calls. There are three supported
  modes of authorization and authentication in Rosette Server.
- These instructions assume all workers are on a single machine.
- Rosette can be pre-warmed by loading data files at startup.
- 'Disk requirements: You should have sufficient amount of free space to unpack the
  application and data from your shipment. This could range from 1GB to 90GB.'
- If you are licensed for event extraction, the Events Training Server (ETS) must
  be installed on Rosette Server.
- Access to documentation can be done through http://localhost:8181/rest/doc/
- The default installation uses port 8181 for the Rosette endpoints.
- When changing the port, update the documentation hostname as well.
- Dynamic gazetteer entries are held completely in memory and state is not saved on
  disk. When Rosette Server is brought down, the contents are lost.
- To enable the short-string algorithm, set shortStringThreshold to a non-negative
  integer.
- Uses Docker for deployment.
- The response time is slower when indoc coref is enabled.
- Docker must be installed for the installation of the indoc coref server.
- Timeout for health requests can be set with asyncResponseTimeoutMs in the configuration
  file.
- No authorization is required when making calls to an on-premise installation of
  Rosette Server. If required, you can add additional checks on API calls.
- Rosette uses Log4j for logging configuration.
- Default root log level is ERROR.
- There are multiple types of Appenders including File and Console.
- These instructions assume all workers are on a single machine. If Rosette Server
  is installed in an environment with distributed workers, contact Rosette support.
- By default, the short-string threshold is 0 and short-string language detection
  is inactive. To turn it on, set the threshold to a non-negative integer, such as
  20.
- To enable the short-string algorithm, set shortStringThreshold to a non-negative
  integer, such as 20.
- The indoc coref server is enabled for all calls when set to true.
- By default, usage tracking is turned on.
- Usage tracking statistics are cumulative from the file creation date.
- The key is passed using the header, X-RosetteAPI-Key.
- 'To turn off fragment boundary detection: Edit the file `/launcher/config/rosapi/rbl-factor-config.yaml`,
  remove the comment from the `fragmentBoundaryDetection` parameter, and set `fragmentBoundaryDetection:
  false`.'
- 'To turn off fragment boundary detection, set fragmentBoundaryDetection: false.'
- The short-string threshold is 0 and short-string language detection is inactive
  by default.
- Rosette Server must be licensed for endpoint access.
- Health check endpoints report the health information of servers connected to Rosette
  Server.
- For the /sentiment endpoint only, edit the worker-config.yaml file. Go to the section
  labeled textPipelines.
- To enable API key security, uncomment the corresponding line in conf/wrapper.conf.
- '`keyPassword` and `keyStore.password` must have the same value.'
- All custom profiles are now available to all application ids without requiring file
  duplication.
- Uses fragment boundary detection — defaults to on
- Short-string language detection is inactive by default
- If you try to view the documentation from a browser that's not on the server where
  Rosette Server is installed, you will need to replace localhost:8181 with the appropriate
  hostname and ensure that the port is accessible.
- Rosette Server is installed at localhost:31818.
- Each release of Rosette Server is a complete release and should be installed in
  a new directory.
- Health check endpoints include ETS, indoc-coref-server, and RTS.
- Logging configuration is done through log4j2.xml.
- To enable short-string algorithm, set shortStringThreshold to a non-negative integer.
- Needs API key security to be enabled.
- The /ping and /info endpoints are always enabled and do not have to be listed in
  the override-endpoints.yaml file.
- The health check endpoint is configurable and disabled by default.
- The default port for the Events Training Server is 9999.
- The installation requires Docker and Docker Compose.
- For testing, import the certificate to the truststore file, `cacerts.jks`, as trusted.
- Uses Log4j for logging configuration
- Log files are generated in the /logs/ directory
- A complete installation may require up to 90GB.
- If you call a disabled endpoint, you will receive an 'unknownError'.
- Set 'asyncResponseTimeoutMs' in the 'config/com.basistech.ws.fe.health.cfg' file
  to configure timeout for health requests.
- Health check endpoint is configurable and reports health information of connected
  servers.
- A complete installation may require up to 90GB to install Rosette Server.
- Rosette Server configuration must be updated to support events.
- Health check endpoint configuration is disabled by default.
- To log to files, ensure the ROOT logger references the File-Appender.
- Rosette Server uses Log4j for logging configuration.
- No authorization is required by default.
- To disable tracking, uncomment the 'enabled' parameter and change the value to false.
- API key security is enabled for the Rosette Server endpoints.
- Log4j configuration is customizable through /conf/log4j2.xml.
- To support authentication and authorization, a database is created to store users
  and keys.
- Health check endpoint reports the health information of connected servers.
- By default, health check is disabled.
- Requires a valid Rosette License to access the features.
- Health check endpoint disabled by default.
- Docker configuration uses port 8181 for the Rosette endpoints.
- Note that depending on your specific FTK version, your newly created model may have
  a `lexicon_filtered` file while the existing model has `lexicon.filtered` instead.
  Rosette supports both naming schemes for backwards compatibility. Regardless of
  which naming scheme you see, you should remove the existing filtered lexicon file
  before adding the one from your new model. If both `lexicon.filtered` and `lexicon_filtered`
  files are in the same model directory, `lexicon.filtered` will take precedence.
- Uses API key security for the Rosette Server endpoints.
- Certain endpoints may require additional disk space and memory.
- Health check endpoint to report the health information of servers connected to Rosette
  Server.
- Ping returns a message confirming the server is running.
- Accessing documentation requires the correct hostname and port.
- The /ping endpoint can be used to test if Rosette is running.
- The /info endpoint provides version information.
- If your installation includes the entity extraction component (`rex-root`), you
  may see `failed to open ...` warning messages for data files in languages not installed
  in your system.
- Health requests timeout can be set with asyncResponseTimeoutMs in config/com.basistech.ws.fe.health.cfg.
- Default log level for ROOT logger is ERROR.
- The rosette-server and rosette-apikeys services should have the same volume mounted
  to /rosette/server/db.
- Multiple docker installations on the host can use the same database.
- If you try to view the documentation from a browser that's not on the server where
  Rosette Server is installed, you will need to replace localhost:8181 with the appropriate
  hostname.
- Use this is to change the default port on Windows installations or to change the
  server port after installation on Linux and macOS.
- Model naming convention requires prefix 'model.' and suffix '-LE.bin'.
- Rosette supports both naming schemes 'lexicon.filtered' and 'lexicon_filtered' for
  backwards compatibility.
- Default installation uses port 8181 for the Rosette endpoints.
- To change the default port, edit the file conf/wrapper.conf; uncomment and modify
  the port value.
- On creation, keys will never expire unless an expiration is explicitly defined.
- Certain endpoints may require more system resources
- Ping endpoint returns a simple message to confirm the server is running.
- Info endpoint provides version information about the server.
- By default, short-string language detection is inactive.
- Access to these endpoints can be restricted to network interface if required. Details
  on restricting access can be obtained from [BasisTech support](mailto:support@basistech.com)
  or [Spring Boot Actuator documentation](https://docs.spring.io/spring-boot/docs/current/reference/html/production-ready-features.html
  ), by setting the management server address and port.
- Health check endpoint reports health status of servers connected to Rosette Server.
- Health status includes UP, DOWN, UNAVAILABLE states.
- No authorization is required by default for calls to on-premise installation.
- The exact amount needed will depend on the endpoints and the languages installed.
- Uses Docker for installation and operation
- Rosette Server configuration must be updated to support events
- Health check status supports UP, DOWN, and UNAVAILABLE states.
- To enable short-string language detection, set the threshold to a non-negative integer.
- To enable short-string language detection, set shortStringThreshold to a non-negative
  integer, such as 20.
- Logging is controlled through log4j2.xml and can be customized for different log
  levels.
- If the data overlay directory is named rex, the contents of the overlay directory
  will completely replace all supplied REX data files, including models, regex, and
  gazetteer files.
- If your custom data sets are intended to supplement the shipped files, the directory
  name must not be rex.
- If your custom data sets are intended to completely replace the shipped files, use
  the directory name rex.
- Default log level is ERROR.
- There are two .yaml files located in the installDirectory/roots/rni-rnt/<version>/rlpnc/data/etc
  directory to guide you in configuring the name-similarity endpoint, parameter_defs.yaml
  and parameter_profiles.yaml.
- To configure the name-similarity results, change the values of the parameters in
  the parameter_profiles.yaml file.
- The configuration is in the file config/com.basistech.ws.fe.health.cfg.
- The default is set to false, pre-warm is not enabled.
- API keys are passed using the header, X-RosetteAPI-Key.
- Titles:linkEntities is default true for the Cloud
- Logging is configured using Log4j and can be customized.
- Rosette can be set to pre-warm at startup.
- To secure API keys, enable SSL/TLS for Rosette Server.
- Short-string language detection is inactive by default. To enable it, set shortStringThreshold
  to a non-negative integer.
- 'Ensure that, for the language you are targeting, the following directory exists:
  ${tcat-root}/models/<lang>/combined-iab-qag'
- Uses OAuth2 with refresh token — requires setup of connected app in Rosette
- Some endpoints may have rate limits
- The default is to disable the indoc coref server unless specified otherwise.
- Health check is disabled by default.
- 'To turn off fragment boundary detection: Edit the file `/launcher/config/rosapi/rbl-factor-config.yaml`,
  remove the comment from the `fragmentBoundaryDetection` parameter, set `fragmentBoundaryDetection:
  false`.'
- If your installation includes the entity extraction component, you may see 'failed
  to open ...' warning messages for data files in languages not installed in your
  system.
- To enable the short-string algorithm, edit the rli-factory-config.yaml file and
  set shortStringThreshold to your preferred value.
- Authentication only mode requires a valid API key for endpoint access.
- Authentication and authorization require a valid API key and authorization for the
  endpoint.
- Assumes all workers are on a single machine.
- Default port for Event Training Server is 9999.
- Ping endpoint to test server connectivity.
- 'To turn off fragment boundary detection: Edit the file `/launcher/config/rosapi/rbl-factor-config.yaml`
  and set `fragmentBoundaryDetection: false`.'
- Short-string language detection is inactive by default. To enable it, set `shortStringThreshold`
  to a non-negative integer, such as 20.
- Common Rosette Server error codes are documented.
- FAQs include information on maximum character count and payload limits.
- Rosette supports both naming schemes for backwards compatibility.
- The negation option is only available for English models.
- Health check endpoint is configured in the file config/com.basistech.ws.fe.health.cfg
  and is disabled by default.
- The hostname must be addressable from within the Docker containers.
- When installing on macOS or Linux, Rosette can be set to pre-warm in the installation.
  Select Y when asked Pre-warm Rosette at startup? You can always change the option
  by editing the com.basistech.ws.worker.cfg file.
- 'With Docker: Set ROSETTE_PRE_WARM=true in docker-compose.yml'
- The `negation` option is only available for English models.
- If no `workspaceId` or `plan` is specified, then all events models in the Rosette
  Server instance are used for extraction.
- The `language` parameter is optional. If not provided, Rosette Server will automatically
  identify the language of the content provided.
- If no language is provided, and Rosette is unable to auto-detect it, the endpoint
  may provide a 'Language xxx is not supported' error.
- If the model identified by `workspaceId` does not exist on the Server, a 400 will
  be returned.
- If any of the `workspaceId`s listed in the target plan do not exist on the servicing
  ETS, a 400 will be returned.
- If any of the workspaces were trained with a custom entity model and any of the
  custom entity models are not deployed to Rosette Server, a 400 Bad Request will
  be returned.
- If both `workspaceId` and `plan` options are provided in the same request, a 400
  Bad Request will be returned.
- To enable, set showExternalServicesHealth=true in config/com.basistech.ws.fe.health.cfg.
- Default health request timeout can be set with asyncResponseTimeoutMs in config/com.basistech.ws.fe.health.cfg.
- Rosette can be pre-warmed at startup by setting warmUpWorker=true in /com.basistech.ws.worker.cfg.
- The rosette-server and rosette-apikeys services should have the same volume mounted
  to /rosette/server/db. This is done by default.
- If you need to change the database connection parameters, com.basistech.ws.apikeys.cfg
  needs to be mounted to /rosette/server/launcher/config/com.basistech.ws.apikeys.cfg
  for both services.
- The default value of worker threads is 2.
- Once the model is written to disk, it consumes relatively little memory (~2 GB)
  for runtime requirements.
- The indoc coref server is an additional server which may be installed alongside
  Rosette Server.
- 'Ensure that the directory exists for the language targeting: ${tcat-root}/models/<lang>/combined-iab-qag'
- Remove existing filtered lexicon file before adding the one from your new model.
- Recommended to reserve enough free memory for optimal performance.
- More heap doesn’t always translate to better performance.
- Ensure Docker is installed and privileges are verified.
- New profiles are automatically loaded in Rosette Server.
- If the profile has been called since Rosette Server was started, the Server must
  be restarted for the changes to take effect.
- Ensure to handle token expiration gracefully.
- The recommended maximum JVM heap size is 32 GB.
- Increase worker threads to 4 for better performance.
- Use cURL or a mongo client to test the connection to the mongo server without going
  through RTS.
- 'With Docker: Edit the file docker-compose.yml Set ROSETTE_PRE_WARM=true'
- To import models into Adaptation Studio from the command line, the utility jq must
  be installed on your system.
- To import a project, you must have an exported project file.
- Multiple worker threads allow you to implement parallel request processing. Generally,
  we recommend that the number of threads should be less than the number of physical
  cores or less than the total number of hyperthreads, if enabled.
- You can experiment with 2-4 worker threads per core. More worker threads may improve
  throughput a bit, but typically won't improve latency.
- No authorization is required by default for on-premise installation.
- API keys are sent using the header 'X-RosetteAPI-Key'.
- Rate limits apply to API calls.
- It is recommended to reserve enough free memory for memory mapping of all data files.
- Usage tracking is turned on by default. To disable, set enabled to false.
- If RAS is not reachable, the DAL connection test could hang for 1-2 minutes waiting
  for the connection.
- Be cautious not to change the indentation of the file as YAML files are sensitive
  to indentation.
- Java application requires tuning of JVM heap sizes for performance.
- The max-size for logging can be specified in MB and KB.
- The connectionString points to the mongo instance in RAS which is needed by the
  DAL connector in RTS.
- Mutual authentication is the most secure type of authentication.
- Any models, gazetteers, and regular expressions used when training a model must
  also be used when performing event extraction.
- When installing on macOS or Linux, Rosette can be set to pre-warm in the installation.
- You can experiment with 2-4 worker threads per core.
- Docker memory must be set to at least 16 GB if all endpoints are licensed and activated.
- The language parameter is optional. If not provided, Rosette Server will automatically
  identify the language of the content provided.
- If the model identified by workspaceId does not exist on the Server, a 400 will
  be returned.
- If any of the workspaceId's listed in the target plan do not exist on the servicing
  ETS, a 400 will be returned.
- Event extraction models are identified by a `workspaceId`.
- The correct entity mention is almost always the longer mention.
- We strongly recommend keeping the default redactorPreferLength as true.
- Default value of worker threads is 2.
- We recommend increasing the worker threads to 4.
- The Events Training Server must be installed on both the training and the Rosette
  Server production instance (extraction).
- If the model was trained with an instance of Rosette Server using a custom profile,
  the same profile must be used for event extraction.
- The Event Training Server (ETS) supports both training and extraction.
- Enable SSL for NGINX is recommended to secure passwords transmitted between client
  and server.
- If no workspaceId or plan is specified, then all events models in the Rosette Server
  instance are used for extraction.
- It’s not recommended setting the max heap to the amount of physical RAM in the system.
  More heap doesn’t always translate to better performance, especially depending on
  your garbage collection settings.
- We recommend that you reserve enough free memory to allow memory mapping of all
  our data files so that page misses are minimized at runtime.
- You must run the installer while connected to the internet to download the files.
  Once the files are downloaded, re-run the installer locally, without a connection,
  to resume the install.
- If the test is not successful, use cURL or a mongo client to test the connection
  to the mongo server without going through RTS.
- When installing on macOS or Linux, Rosette can be set to pre-warm in the installation.
  Select `Y` when asked `Pre-warm Rosette at startup?` You can always change the option
  by editing the `com.basistech.ws.worker.cfg` file.
- 'With Docker: Edit the file `docker-compose.yml` and set `ROSETTE_PRE_WARM=true`.'
- The entityType should always be specified to utilize all available methods when
  indexing and matching names.
- Docker disk image size must be increased to 120GB (from the default of 60GB) to
  install the full Rosette Server package.
- The Docker maximum memory should be the same or more than the Rosette JVM heap size.
- If RAS is not reachable, the connection test could hang for 1-2 minutes waiting
  for the connection.
- If you run `./enable-rs-ssl.sh` again you will need to change this parameter back
  to `false` as the script will overwrite the setting.
- Name Deduplication takes a list of names and groups similar names into clusters.
- To allow more simultaneous annotations on more projects, increase the RAM allocated
  to the JVM in REX Training Server.
- No authentication is supported for processing URIs.
- All input parameters, including the text being analyzed and any relevant options,
  are defined in the request body.
- The morphological analysis endpoint provides language-specific tools for returning
  part of speech, lemmas, compound components, and Han readings for each token in
  the input.
- Some endpoints, such as /entities, involve a large amount of data.
- If RAS is not reachable, the connection test could hang for 1-2 minutes.
- We offer two algorithms for Chinese and Japanese tokenization and morphological
  analysis.
- We strongly recommend keeping the default `redactorPreferLength` as true.
- You must first train a model to extract the event types you are interested in.
- If both workspaceId and plan options are provided in the same request, a 400 Bad
  Request will be returned.
- Uses OAuth2 authentication.
- Sentiment analyzer returns a sentiment label (subjective attitude) of the input
  text as positive (`pos`), negative (`neg`), or neutral (`neu`), with a confidence
  score between 0 and 1.
- When working with English text, there is also an option to use an alternative, deep
  neural network sentiment model.
- When editing an existing profile, you may need to restart Rosette Server.
- Categorizer currently only supports English language input.
- Relationship Extractor currently only supports English language input.
- When Analytics is installed on premise, no authentication is required.
- Endpoints analyze unstructured text or names and addresses.
- If no language is provided, an endpoint may provide a 'Language xxx is not supported'
  error.
- If you don't specify an entityType, the type PERSON will be used.
- The matching algorithm is optimized based on the field type.
- Matches across name variations (such as misspellings and nicknames) have multilingual
  support.
- Append a morphoFeature to the morphology/endpoint to specify which feature you want
  returned, or complete to return all features.
- Tokens identifies and separates each word into one or more tokens through advanced
  statistical modeling.
- Requires setup of connected app in the API
- When working with English text, there is also an option to use an alternative, deep
  neural network sentiment model. To use this model, set the modelType option to DNN.
- Topic Extractor extracts the most salient themes of a piece of text.
- '`content` and `contentUri` are mutually exclusive; only one can be specified per
  call.'
- Transliteration is only supported for Arabic, so the language field is ignored and
  the language is set to Arabic.
errors:
- 'REQUEST_LIMIT_EXCEEDED: Throttle API calls or reduce frequency'
- 'QUERY_TIMEOUT: Break down filters or add selectivity'
- '401 Unauthorized: Recheck API key'
- '400 invalidParameter: The provided parameter is unsupported or of the wrong type.'
- '400 badRequestFormat: The data sent cannot be parsed; the format of the request
  is invalid.'
- '400 unsupportedLanguage: The data is in a language which is not supported by the
  endpoint.'
- '400 noMatch: The language code provided is not supported by the endpoint.'
- '400 notEnoughData: There was insufficient data for the endpoint to produce meaningful
  results.'
- '400 badInput: There is a problem with the input data.'
- '400 nonWorkingURL: There is a problem downloading content from the provided URL;
  it is either invalid, non-existent, inaccesible, or having other problems.'
- '400 unsupportedContentType: The text extractor doesn’t support the raw data’s content
  type.'
- '401 unauthorized: You have not specified an API key.'
- '403 forbidden: Access denied. You have either provided an invalid API key or are
  not authorized to call the endpoint.'
- '404 notFound: The specified URI could not be found.'
- '406 notAcceptable: You requested a format that isn’t JSON.'
- '409 incompatibleClientVersion: Your binding is out of date. Please update to the
  latest version.'
- '413 tooMuchData: Too much data for Rosette to process in a single request. Your
  payload was bigger than the size limit of 600KB, or 50K characters.'
- '429 tooManyRequests: Too many requests - Slow down! Rosette can only process one
  call at a time.'
- '429 overPlanLimit: You have exceeded your daily or monthly call limit.'
- '500 internalServerError: There was a problem with the server. Please try again
  later.'
- '503: Service Unavailable - We’re temporarily offline for maintenance. Please try
  again later.'
- 'Invalid name format: Ensure names are correctly formatted for matching.'
- 'Language not supported: Check if the specified language is supported by the API.'
- '400: invalidParameter'
- '400: badRequestFormat'
- '400: unsupportedLanguage'
- '400: noMatch'
- '400: notEnoughData'
- '400: badInput'
- '400: nonWorkingURL'
- '400: unsupportedContentType'
- '401: unauthorized'
- '403: forbidden'
- '404: notFound'
- '406: notAcceptable'
- '409: incompatibleClientVersion'
- '413: tooMuchData'
- '429: tooManyRequests'
- '429: overPlanLimit'
- '500: internalServerError'
- '503: Service Unavailable'
- '401 Unauthorized: Invalid API key'
- '401 Unauthorized: API key is missing or invalid.'
- '400 Bad Request: Invalid input data or parameters.'
- '401 Unauthorized: API Key required'
- '400 Bad Request: Check request format and required fields'
- API Key required
- '400 Bad Request: Check the request body for errors.'
- '401 Unauthorized: Verify API key and permissions.'
- '404 Not Found: Check the endpoint URL.'
- 'invalidParameter: The provided parameter is unsupported or of the wrong type.'
- 'badRequestFormat: The data sent cannot be parsed; the format of the request is
  invalid.'
- 'unsupportedLanguage: The data is in a language which is not supported by the endpoint.'
- 'noMatch: The language code provided is not supported by the endpoint.'
- 'notEnoughData: There was insufficient data for the endpoint to produce meaningful
  results.'
- 'badInput: There is a problem with the input data.'
- 'nonWorkingURL: There is a problem downloading content from the provided URL; it
  is either invalid, non-existent, inaccesible, or having other problems.'
- 'unsupportedContentType: The text extractor doesn’t support the raw data’s content
  type.'
- 'unauthorized: You have not specified an API key.'
- 'forbidden: Access denied. You have either provided an invalid API key or are not
  authorized to call the endpoint.'
- 'notFound: The specified URI could not be found.'
- 'notAcceptable: You requested a format that isn’t JSON.'
- 'incompatibleClientVersion: Your binding is out of date. Please update to the latest
  version.'
- 'tooMuchData: Too much data for Rosette to process in a single request. Your payload
  was bigger than the size limit of 600KB, or 50K characters.'
- 'tooManyRequests: Too many requests - Slow down! Rosette can only process one call
  at a time.'
- 'overPlanLimit: You have exceeded your daily or monthly call limit.'
- 'internalServerError: There was a problem with the server. Please try again later.'
- '400 Bad Request: Check the input parameters'
- '401 Unauthorized: API Key may be missing or invalid'
- '404 Not Found: The requested resource could not be found'
- '401 Unauthorized: Recheck API key or permissions'
- '401 Unauthorized: Invalid API key.'
- '400 Bad Request: Check the request parameters.'
- '401 Unauthorized: API Key is missing or invalid.'
- invalidParameter
- badRequestFormat
- unsupportedLanguage
- noMatch
- notEnoughData
- badInput
- nonWorkingURL
- unsupportedContentType
- unauthorized
- forbidden
- notFound
- notAcceptable
- incompatibleClientVersion
- tooMuchData
- tooManyRequests
- overPlanLimit
- internalServerError
- Service Unavailable
- 'INVALID_INPUT: Check your input parameters and structure'
- '401 Unauthorized: Check API key.'
- '400 Bad Request: Verify request parameters.'
- '401 Unauthorized: Check API key validity'
- '400 Bad Request: Check request parameters'
- '401 Unauthorized: Check your API key.'
- '400 Bad Request: Ensure the request body is correctly formatted.'
- '401 Unauthorized: Check your API key validity'
- '400 Bad Request: Check the request body format'
- '401 Unauthorized: Check API key or permissions.'
- 'nonWorkingURL: There is a problem downloading content from the provided URL; it
  is either invalid, non-existent, inaccessible, or having other problems.'
- Service Unavailable - We’re temporarily offline for maintenance. Please try again
  later.
- '401 Unauthorized: Recheck API key or token expiration'
- '400 Bad Request: Check request payload for required fields'
- '401 Unauthorized: API key is missing or invalid'
- '400 Bad Request: Invalid input data'
- '400 Bad Request: Invalid input data.'
- '401 Unauthorized: Check API key validity.'
- '400 Bad Request: Invalid input parameters.'
- '500 Internal Server Error: An unexpected error occurred.'
- '401 Unauthorized: Check API key'
- '401 Unauthorized: Check your API key'
- '400 Bad Request: Check your request format'
- '401 Unauthorized: Invalid API key or missing required headers.'
- '400 Bad Request: Invalid request parameters.'
- '401 Unauthorized: Verify API key.'
- '401 Unauthorized: Recheck API key validity'
- '401 Unauthorized: Check the API key'
- '400 Bad Request: Invalid parameters'
- 'tooMuchData: Too much data for Rosette to process in a single request.'
- 'tooManyRequests: Too many requests - Slow down!'
- 'internalServerError: There was a problem with the server.'
- '503: Service Unavailable - We’re temporarily offline for maintenance.'
- '401 Unauthorized: API key is required.'
- '429 Too Many Requests: Rate limit exceeded.'
- '400 Bad Request: Check for missing required fields or invalid input'
- '415 Unsupported Media Type: Ensure content type is application/json'
- '400 Bad Request: Check your request format or parameters'
- '404 Not Found: Check endpoint path'
- '400 Bad Request: Validate input format'
- '401 Unauthorized: Recheck API Key or token expiration'
- '503'
- '429 Too Many Requests: Rate limit exceeded'
- '400 Bad Request: Check request format or parameters'
- '401 Unauthorized: Check API key and permissions.'
- '400 Bad Request: Check request payload for validity'
- 'API_KEY_REQUIRED: API key must be provided'
- '401 Unauthorized: Check API key and permissions'
- '400 Bad Request: Validate request parameters'
- '400 Bad Request: Ensure request parameters are correct'
- '400 Bad Request: Verify request parameters'
- 'nonWorkingURL: There is a problem downloading content from the provided URL.'
- Service Unavailable - We’re temporarily offline for maintenance.
- 'API Key required: Ensure that you provide a valid API key.'
- 'Invalid language code: Check that the language code is supported.'
- '400 Bad Request: Check the input parameters.'
- '401 Unauthorized: Recheck API key or permissions.'
- '500 Internal Server Error: Try again later.'
- '400 Bad Request: Verify the request parameters'
- 'Invalid language: Ensure the language code is correct.'
- 'Missing name: The name field is required.'
- '401 Unauthorized: Check if the API key is valid.'
- '400 Bad Request: Check the request syntax or parameters.'
- '404 Not Found: Ensure the endpoint URL is correct.'
- '400 Bad Request: Check the request payload structure'
- '400 Bad Request: Missing required parameters'
- '401 Unauthorized: API Key is required'
- '400 Bad Request: Invalid input parameters'
- '401 Unauthorized: Check API key or permissions'
- '400 Bad Request: Verify the request format'
- '400 Bad Request: Check the request payload for required fields.'
- '401 Unauthorized: Ensure the API key is valid.'
- '400 Bad Request: Check the request payload'
- '400 Bad Request: Check input data and parameters'
- '400 Bad Request: Check your request parameters.'
- '401 Unauthorized: Ensure API key is valid.'
- 'API Key required: Ensure API key is provided'
- 'API_KEY_INVALID: Check if the API key provided is correct'
- 'REQUEST_LIMIT_EXCEEDED: Reduce the frequency of requests'
- 'INVALID_REQUEST: Ensure the request format is correct'
- '400 Bad Request: Ensure the request body is correctly formatted'
- '400 Bad Request: Check input data format.'
- '400 Bad Request: Ensure required parameters are provided.'
- '400 Bad Request: Check if the input parameters are valid.'
- '401 Unauthorized: Ensure the API key is correct.'
- '404 Not Found: Verify the endpoint path.'
- '400 Bad Request: Missing required parameters.'
- '400 Bad Request: Review request parameters.'
- '404 Not Found: Check the endpoint path.'
- '401 Unauthorized: Check if your API key is valid.'
- '500 Internal Server Error: Retry the request.'
- '401 Unauthorized: Recheck OAuth scopes or token expiration'
- '400 Bad Request: Check the request parameters'
- '500 Internal Server Error: Try again later'
- '400 Bad Request: Check request format or parameters.'
- '401 Unauthorized: Verify API key is correct.'
- '400 Bad Request: Validate request payload structure'
- '401 Unauthorized: API Key invalid or not provided'
- '400 Bad Request: Invalid parameters supplied'
- '400 Bad Request: Ensure required fields are included in the request.'
- '400 Bad Request: Verify request format and parameters'
- '401 Unauthorized: Check API key and access permissions.'
- 'cURL Error #: error_message'
- 'API Key required: Make sure to include your API key in the request.'
- '401 Unauthorized: Check API key or token'
- '404 Not Found: Endpoint does not exist'
- '400 Bad Request: Check the request format and data.'
- '400 Bad Request: Check request parameters or body.'
- 'Invalid API Key: Ensure the API key is correct.'
- 'Unsupported language: Check if the requested language is supported.'
- 'Invalid API Key: Ensure your API Key is valid and active.'
- 'REQUEST_LIMIT_EXCEEDED: Throttle API calls or reduce frequency.'
- '400 Bad Request: Check the request format and parameters.'
- '500 Internal Server Error: Retry the request after some time.'
- 'cURL Error #: {error_message}'
- 'Rosette API Error: General error message'
- 'Rosette API Error: Check the API key and endpoint.'
- 'cURL Error #:'
- Rosette API Error
- '400 Bad Request: Check the request format and required fields.'
- '500 Internal Server Error: An error occurred on the server.'
- 'Rosette API Error: Check your API key or URL.'
- '400 Bad Request: Ensure all required fields are provided.'
- '401 Unauthorized: Check your authentication credentials.'
- '401 Unauthorized: Recheck API key and permissions.'
- '401 Unauthorized: Recheck API key or endpoint URL'
- 'Unauthorized: Check API key or permissions'
- '400 Bad Request: Check input parameters and format.'
- '400 Bad Request: Ensure your request is well-formed'
- '401 Unauthorized: Check if API key is valid.'
- '400 Bad Request: Check that the request body is formatted correctly'
- '401 Unauthorized: Verify the API key used in the request'
- '500 Internal Server Error: An error occurred on the server'
- '400 Bad Request: Ensure request parameters are correct.'
- '400 Bad Request: Check required parameters and data format'
- '401 Unauthorized: Verify API key'
- '400 Bad Request: Check the input data format.'
- '401 Unauthorized: Check the API key.'
- '404 Not Found: The requested endpoint does not exist.'
- '400 Bad Request: Check request parameters.'
- '400 Bad Request: Check your input data formatting'
- '401 Unauthorized: Ensure API key is valid'
- '400 Bad Request: Check API key and request format.'
- '401 Unauthorized: Recheck API key validity.'
- '400 Bad Request: Verify request format and parameters.'
- '400 Bad Request: Ensure the request conforms to API specifications.'
- '400 Bad Request: Check input parameters'
- '401 Unauthorized: Recheck OAuth credentials'
- '400 Bad Request: Ensure content is provided'
- '400 Bad Request: Ensure that the content parameter is included'
- '401 Unauthorized: Check API Key'
- '401 Unauthorized: Invalid API Key'
- '401 Unauthorized: API Key is required.'
- '401 Unauthorized: API key may be invalid.'
- '400 Bad Request: Check the request body for formatting errors.'
- '400 Bad Request: Check request body format'
- '400 Bad Request: Ensure content is properly formatted.'
- '429 Too Many Requests: Throttle your requests'
- 'Invalid API Key: Ensure that the provided API key is correct.'
- 'Unsupported Language: The specified language is not supported.'
- '400 Bad Request: Check request format and parameters'
- 'cURL Error #: {err}'
- '401 Unauthorized: Check if the API key is valid'
- '400 Bad Request: Review the request format and data'
- '400 Bad Request: Ensure the request parameters are valid.'
- '400 Bad Request: Check the request format.'
- '400 Bad Request: Ensure correct request format and parameters'
- '400 Bad Request: Check input data format'
- '403 Forbidden: Insufficient permissions to access this resource'
- '400 Bad Request: Ensure your request body is correctly formatted.'
- '400 Bad Request: Check parameters for correctness.'
- '401 Unauthorized: Check API key and URL'
- '400: invalidParameter - The provided parameter is unsupported or of the wrong type.'
- '400: badRequestFormat - The data sent cannot be parsed; the format of the request
  is invalid.'
- '400: unsupportedLanguage - The data is in a language which is not supported by
  the endpoint.'
- '401: unauthorized - You have not specified an API key.'
- '403: forbidden - Access denied. You have either provided an invalid API key or
  are not authorized to call the endpoint.'
- '401 Unauthorized: Recheck API key or endpoint.'
- '429 Too Many Requests: Throttle API calls.'
- 'Invalid API Key: Recheck your API key.'
- '400 Bad Request: Check your request format and parameters.'
- '400 Bad Request: Ensure content field is included.'
- '401 Unauthorized: Invalid API Key.'
- '400 Bad Request: Check that the required parameters are provided.'
- '400 Bad Request: Check the request payload and ensure all required fields are present.'
- '401 Unauthorized: Verify the API key and its permissions.'
- '404 Not Found: Ensure the endpoint is correct.'
- '400 Bad Request: Check your request parameters'
- 'Rosette API Error: Check API key validity or URL.'
- '400 Bad Request: Ensure the request format is correct'
- '401 Unauthorized: Invalid API key provided.'
- '401 Unauthorized: API Key is missing or invalid'
- '400 Bad Request: Check your input parameters'
- '401 Unauthorized: Ensure API key is correct'
- '400 Bad Request: Ensure content is valid and options are correctly set.'
- 'InvalidLanguage: Check the language code provided'
- 'InvalidContent: Ensure content is not empty'
- 'Unauthorized: Verify API key'
- '400 Bad Request: Ensure required parameters are provided'
- '403 Forbidden: Check if the API key is valid or if you have access to the resource.'
- '400 Bad Request: Ensure that the required fields are provided in the request.'
- '401 Unauthorized: Check if the API key is correct'
- '400 Bad Request: Check if all required fields are provided.'
- '500 Internal Server Error: Retry the request later.'
- '401 Unauthorized: Invalid authentication credentials.'
- '401 Unauthorized: Check API key or authentication method'
- '400 Bad Request: Ensure all required parameters are provided'
- '500 Internal Server Error: Retry the request after some time'
- '400 Bad Request: Ensure required parameters are included'
- '401 Unauthorized: Invalid API key. Please check your API key and try again.'
- '403 Forbidden: Access denied'
- 'Invalid API key: Check your API key.'
- 'Request limit exceeded: Throttle API calls.'
- '400 Bad Request: Ensure ''content'' or ''contentUri'' is provided.'
- '400 Bad Request: Check if the content is provided correctly.'
- '400 Bad Request: Check your input data format.'
- '500 Internal Server Error: Retry the request'
- '400 Bad Request: Check the content and parameters provided.'
- '400 Bad Request: Invalid parameters provided'
- '400 Bad Request: The request was malformed or contained invalid parameters.'
- 'Rosette API Error: Check the API key and endpoint'
- '400 Bad Request: Check input parameters and data structure.'
- '401 Unauthorized: API Key may be invalid or missing.'
- 'Invalid request: Check required fields for name similarity'
- 'Rate limit exceeded: Reduce request frequency'
- '400 Bad Request: Check content and language parameters'
- '400 Bad Request: Check request format and parameters.'
- '401 Unauthorized: Verify the API key.'
- '429 Too Many Requests: Slow down the request rate.'
- '400 Bad Request: Verify the request body format.'
- '400 Bad Request: Verify input parameters'
- '401 Unauthorized: API key may be missing or invalid'
- '400 Bad Request: Verify your request parameters'
- '400 Bad Request: Check request parameters or payload'
- '400 Bad Request: Ensure that the address format is correct'
- '400 Bad Request: Ensure the request body is correctly formed'
- '401 Unauthorized: Check if the API key is provided and valid.'
- '401 Unauthorized: Recheck API key.'
- '401 Unauthorized: Invalid API key or missing key.'
- '403 Forbidden: Check API key permissions'
- '400 Bad Request: Ensure correct structure of the request payload'
- '400 Bad Request: Check the request parameters and payload format.'
- '400 Bad Request: Check input parameters for correctness.'
- '403 Forbidden: Access denied.'
- 'cURL Error #: <error_message>'
- '400 Bad Request: Verify input parameters.'
- 'API Error: {status_code}: {message}'
- '400 Bad Request: Ensure content parameter is provided.'
- '400 Bad Request: Ensure the required fields are filled correctly.'
- '400 Bad Request: Check for missing parameters or incorrect data format'
- '400 Bad Request: Check the request format and parameters'
- '400 Bad Request: Ensure correct content format.'
- 'cURL Error #: Various errors may occur'
- 'Invalid API Key: Check if the API key is correct.'
- 'Unsupported Language: Ensure the provided language code is supported.'
- '400 Bad Request: Check your input parameters.'
- '401 Unauthorized: Ensure your API key is valid.'
- 'Unauthorized: Recheck API key or permissions'
- '401 Unauthorized: Ensure valid API key is provided.'
- '400 Bad Request: Invalid parameters.'
- '401 Unauthorized: API key is invalid or missing.'
- '404 Not Found: The requested resource does not exist.'
- 'API Key required: Ensure that the API key is provided.'
- '429 Too Many Requests: Throttle API calls or reduce frequency'
- '400 Bad Request: Check request parameters and structure'
- '400 Bad Request: Ensure request format is correct'
- 'Rosette API Error: Check API key or URL'
- 'API Key required: Ensure you provide a valid API key.'
- 'cURL Error: Check your cURL setup and endpoint.'
- 'Rosette API Error: Check your API Key'
- 'Invalid request: Check your request parameters'
- '401 Unauthorized: Check if the API key is correct.'
- '400 Bad Request: Check input parameters and data formats.'
- '401 Unauthorized: Check credentials or token expiration'
- The doc_score, name_score and date_score functions are not currently supported in
  percolator queries.
- When using the parameter filter_out_scores_below, the filter will always return
  at least one document, even if the highest scoring document is below the filter
  threshold value.
- 'filter_out_scores_below: This parameter filters out documents that do not rescore
  above the set threshold.'
- The doc_score, name_score, and date_score functions currently are not supported
  in percolator queries.
- Docker build is not supported on machines with an ARM chip, such as the 'Apple Silicon'
  (M1/M2/...) Macs.
- 'CONFLICT: The tokens do not match.'
- 'DELETION: The token is unmatched.'
- 'EMBEDDING_MATCH: The tokens are semantically similar as determined by word-embedding
  vectors.'
- 'FIELD_BLOCKED: This field cannot be matched because of a cross-field match involving
  the same field in the other name.'
- 'FIELD_CONFLICT: When comparing two names that are divided into fields, these fields
  do not match.'
- 'FIELD_DELETION: When comparing two names that are divided into fields, this field
  is unmatched.'
- 'GIVEN_NAME_DELETION: When comparing two names that are divided into fields, the
  GIVEN_NAME field is unmatched.'
- 'HANI_ABBREVIATION: One Hani token appears to be an abbreviation of another Hani
  token.'
- 'HMM_MATCH: The tokens are similar but not identical, and the match was determined
  by a particular model (hidden Markov model).'
- 'INITIALISM: One token is a name and the other token is the initials of the words
  which make up the name.'
- 'INITIAL_MATCH: One token is the first initial of the other.'
- 'LANGUAGE_SPECIFIC_MATCH: The match was determined by a language-specific matcher.'
- 'MATCH: The tokens are identical (after stop word elimination and normalization).'
- 'OUT_OF_ORDER_DELETION: This unmatched token still leaves the remaining tokens out
  of order when it is removed.'
- 'OVERRIDE: The tokens appear as a pair on the override list.'
- 'PREFIX_INITIAL: One token is an initial that matches a prefix in the other token.'
- 'STRING_SIMILARITY: The tokens are similar in string edit distance (number of insertions,
  deletions, and substitutions) but not similar enough to be a fuzzy match.'
- 'STUCK_INITIAL: One name appears to have an initial mistakenly attached to a preceding
  token.'
- 'SURNAME_DELETION: When comparing two names that are divided into fields, the SURNAME
  field is unmatched.'
- 'TRAILING_PATRONYMIC_DELETION: The unmatched token is a patronymic which has been
  truncated in the other name.'
- 'TRUNCATED_EXACT_MATCH: The tokens are identical except that one has been slightly
  truncated.'
- 'TRUNCATED_HMM_MATCH: The tokens are similar, but not identical, and one has been
  slightly truncated.'
- 'UNKNOWN_FIELD_MATCH: One of the tokens is part of an ''unknown'' field in a fielded
  name.'
- doc_score, name_score and date_score functions are not currently supported in percolator
  queries.
- 'QUERY_TIMEOUT: Break down filters or add selectivity.'
- '401 Unauthorized: Recheck OAuth scopes or token expiration.'
- 'filter_out_scores_below: filters out documents that do not rescore above the set
  threshold.'
- '409 Error: Update your binding to the most recent version.'
- The doc_score, name_score and date_score functions currently are not supported in
  percolator queries.
- '400: Bad Request — Please check your request parameters.'
- '500: Internal Server Error — An error occurred on the server.'
- Docker build is not supported on machines with an ARM chip.
- We recommend using Vault to encrypt and decrypt the authentication data being used
  to connect to external Elasticsearch.
- 'ETROG-1552: BaseLinguisticsTokenFilter does not set the type correctly for compound
  components.'
- 'ETROG-697: The prefixes and suffixes that the RSE tokenizer returns for Hebrew
  may include punctuation.'
- 'ETROG-588: Dictionary not loaded when using LanguageCode.SIMPLIFIED_CHINESE or
  LanguageCode.TRADITIONAL_CHINESE.'
- 'ETROG-191: RSE does not attempt to decompound words longer than 30 characters.'
- 'ETROG-266: Inconsistent handling of numbers and punctuation during lemmatization.'
- 'ETROG-284: RSE expects valid Unicode strings as input.'
- '500: Server error when language does not match model''s workspace.'
- '400: Bad request when the output=rosette parameter is used incorrectly.'
- '400 Bad Request: Check the input format and required fields.'
- '401 Unauthorized: Verify your authentication credentials.'
- '429 Too Many Requests: Reduce the frequency of API calls.'
- '429 Too Many Requests: Contact us for greater concurrency.'
- '400: Bad Request'
- '500: Internal Server Error'
- 500 (server error) when Analytics Server determines the language of an incoming
  sample does not match the language of the event model's workspace.
- 'InvalidRequest: Check request parameters.'
- 'ProcessingError: An error occurred during entity extraction.'
- '401 Unauthorized: Invalid API key or authentication missing'
- 'unknownError: Worker unsupported target Endpoint'
- '401: the key is expired, it has been disabled, it doesn''t exist in the database,
  or, no key was included in the request.'
- '403: the key is valid (enabled, unexpired, exists) but does not have authorization
  for the endpoint being called.'
- '400 Bad Request: Check request format and required fields.'
- 'unknownError: Occurs when calling a disabled endpoint.'
- 'unknownError: Endpoint is disabled or unsupported'
- 'unknownError: Worker unsupported target Endpoint{path=/topics}/eng'
- '404: Not Found'
- '401 Unauthorized: Check license status for endpoints'
- 'unknownError: Calling a disabled endpoint will return this error.'
- 'unknownError: If you call a disabled endpoint.'
- '401 Unauthorized: No authorization is required when using an on-premises installation.'
- 'unknownError: Endpoint is disabled or unavailable.'
- 'unknownError: If you call a disabled endpoint, this error will occur.'
- 'Unable to link entities: Check entity linking configuration'
- 'Invalid language code: Ensure language code is supported'
- '401: The key is expired, it has been disabled, it doesn''t exist in the database,
  or no key was included in the request.'
- '403: The key is valid but does not have authorization for the endpoint being called.'
- '400 Bad Request: There was something wrong with your request, or the language was
  not supported by the endpoint.'
- '403 Forbidden: Access denied. This could be based on plan, limits, or profiles.'
- '404 Not Found: The specified URI could not be found'
- '405 Method Not Allowed: You tried to access Analytics with an invalid method'
- '409 Incompatible Client Version: Your binding was out of date. Please update to
  the latest version.'
- '413 Too Much Data: Your payload was bigger than the size limit of 600KB, or 50K
  characters.'
- '429 Too Many Requests: Slow down! Analytics can only process one call at a time.'
- '500 Internal Server Error: There is a problem with your server.'
- 'unknownError: A call to a disabled endpoint returns this error message.'
- 'EVENT_TYPE_NOT_FOUND: Ensure the event type is correctly defined.'
- 'INVALID_KEY_PHRASE: Check the key phrase for the event type.'
- No errors specified.
- 'RosetteException: unauthorizedProfile: Access to profile ''ad-suggestions'' not
  granted'
- '400 Bad Request: Verify that all required fields are filled out correctly.'
- '500 Internal Server Error: Retry the request or check server logs for more information.'
- 'Unauthorized: Access to profile not granted'
- 'Health check failed: Check the connection to mongo instance.'
- 'Unauthorized: Access to profile ''ad-suggestions'' not granted.'
- 'Failed to connect to mongo instance: Check mongo server status and connection string.'
- 'Health check failed: MongoDB server not reachable.'
- 'UnsupportedOperationException: Short string detection on RawData is not supported.'
- 'UnsupportedOperationException: Short-string detection does not support RawData
  input.'
- 'failed to open ...: Warning messages for data files in languages not installed'
- '401 Unauthorized: Check your endpoint license'
- 'unknownError: Call to disabled endpoint'
- failed to open ... warning messages for data files in languages not installed in
  your system.
- '404 Not Found: Check if the endpoint URL is correct'
- '500 Internal Server Error: Check server logs for more details'
- '401: the key is expired, disabled, doesn''t exist, or no key was included.'
- '403: the key is valid but does not have authorization for the endpoint.'
- 'unknownError: Returned when calling a disabled endpoint.'
- '401 Unauthorized: Ensure proper authentication'
- failed to open ... warning messages for data files in languages not installed in
  your system. These can safely be ignored.
- 'failed to open ...: Warning messages for data files in languages not installed
  can be safely ignored.'
- '401 Unauthorized: Recheck API key validity or permissions'
- 'unknownError: Received when calling a disabled endpoint.'
- 'unknownError: Indicates that the endpoint is disabled or unsupported.'
- '401 Unauthorized: Check your license or authentication'
- failed to open ... warning messages for data files in languages not installed in
  your system can safely be ignored.
- '401 Unauthorized: Verify OAuth token'
- '400 Bad Request: If the model identified by workspaceId does not exist on the Server'
- '400 Bad Request: If any of the workspaceId''s listed in the target plan do not
  exist on the servicing ETS'
- '400 Bad Request: If any of the workspaces were trained with a custom entity model
  and any of the custom entity models are not deployed to Rosette Server'
- '400 Bad Request: If both workspaceId and plan options are provided in the same
  request'
- '400 Bad Request: No model listed for the identified language.'
- '400 Bad Request: Language `xxx` is not supported.'
- '400 Bad Request: Model identified by `workspaceId` does not exist.'
- '400 Bad Request: Any of the `workspaceId`s listed in the target plan do not exist.'
- '400 Bad Request: Custom entity models are not deployed to Rosette Server.'
- '400 Bad Request: Both `workspaceId` and `plan` options provided.'
- '400 Bad Request: The language parameter is optional. If not provided, Rosette Server
  will automatically identify the language of the content provided.'
- '400 Bad Request: If the model identified by workspaceId does not exist on the Server.'
- '400 Bad Request: If any of the workspaceId''s listed in the target plan do not
  exist on the servicing ETS.'
- '400 Bad Request: If any of the workspaces were trained with a custom entity model
  and any of the custom entity models are not deployed to Rosette Server.'
- '400 Bad Request: If both workspaceId and plan options are provided in the same
  request.'
- '400 Bad Request: If no language is provided, and Rosette is unable to auto-detect
  it'
- '401 Unauthorized: Check your access token.'
- '400 Bad Request: Model identified by workspaceId does not exist'
- '400 Bad Request: Language xxx is not supported'
- '403 Forbidden: Check API key and permissions.'
- '500 Internal Server Error: Server issue, try again later.'
- '400 Bad Request: Language parameter is optional and not provided.'
- '400 Bad Request: WorkspaceId does not exist on the Server.'
- '400 Bad Request: WorkspaceId listed in target plan do not exist on the servicing
  ETS.'
- '400 Bad Request: Custom entity models not deployed to Rosette Server.'
- '400 Bad Request: Both workspaceId and plan options are provided in the same request.'
- 'HTTP 404: Indicates a misconfiguration if workspace is not found.'
- 'RosetteException: Access to profile not granted.'
- '400 Bad Request: If no language is provided, and Rosette is unable to auto-detect
  it.'
- '400 Bad Request: Language is not supported'
- '400 Bad Request: Custom entity model not deployed to Rosette Server'
- '400 Bad Request: The model identified by `workspaceId` does not exist on the Server.'
- '400 Bad Request: If language is not determined.'
- '400 Bad Request: If any of the `workspaceId`s listed in the target plan do not
  exist.'
- '400 Bad Request: If no language is provided and Rosette is unable to auto-detect
  it'
- '400 Bad Request: If any of the workspaceIds listed in the target plan do not exist
  on the servicing ETS'
- '400 Bad Request: Language parameter is not provided or model does not exist'
- '400 Bad Request: Invalid workspaceId'
- '400 Bad Request: Custom entity model not deployed'
- Health check passed
- It looks like you are trying to access MongoDB over HTTP on the native driver port.
- 'Health check failed: If it is not working, use cURL or a mongo client to test the
  connection to the mongo server.'
- 'Health check failed: Use cURL or a mongo client to test the connection to the mongo
  server without going through RTS.'
- '400 Bad Request: If the language parameter is not provided and unable to auto-detect'
- '400 Bad Request: Language parameter is optional, if not provided, Rosette Server
  will automatically identify the language of the content.'
- '400 Bad Request: If any of the workspaceIds listed in the target plan do not exist
  on the servicing ETS.'
- Language xxx is not supported
- '400: noMatch - The language code provided is not supported by the endpoint.'
- '400: notEnoughData - There was insufficient data for the endpoint to produce meaningful
  results.'
- '400: badInput - There is a problem with the input data.'
- '400: nonWorkingURL - There is a problem downloading content from the provided URL;
  it is either invalid, non-existent, inaccesible, or having other problems.'
- '400: unsupportedContentType - The text extractor doesn’t support the raw data’s
  content type.'
- '404: notFound - The specified URI could not be found.'
- '406: notAcceptable - You requested a format that isn’t JSON.'
- '409: incompatibleClientVersion - Your binding is out of date. Please update to
  the latest version.'
- '413: tooMuchData - Too much data to process in a single request. Your payload was
  bigger than the size limit of 600KB, or 50K characters.'
- '429: tooManyRequests - Too many requests - Slow down! Only one call can be processed
  at a time.'
- '429: overPlanLimit - You have exceeded your daily or monthly call limit.'
- '500: internalServerError - There was a problem with the server. Please try again
  later.'
- Limit of 1000 names per list per call.
- '413 tooMuchData: Too much data to process in a single request. Your payload was
  bigger than the size limit of 600KB, or 50K characters.'
- '429 tooManyRequests: Too many requests - Slow down! Only one call can be processed
  at a time.'
- '503 : Service Unavailable - We’re temporarily offline for maintenance. Please try
  again later.'
auth_info:
  mentioned_objects:
  - Api
  - DocumentParameters
  - RosetteException
  - API
  - NameTranslationParameters
  - OauthToken
  - AuthProvider
  - NamedCredential
  - X-BabelStreetAPI-Key
  - API keys
  - key management console
  - rosette-license.xml
  - OAuthToken
client:
  base_url: https://analytics.babelstreet.com/rest/v1/
  auth:
    type: apikey
    location: header
    header_name: X-BabelStreetAPI-Key
source_metadata: null
