resources:
- name: create_token
  endpoint:
    path: /orgs/{orgID}/tokens
    method: POST
    data_selector: response
    params: {}
- name: list_tokens
  endpoint:
    path: /orgs/{orgID}/tokens
    method: GET
    data_selector: response
    params:
      show_expired: 'false'
- name: C/C++ Applications
  endpoint:
    path: /analysis/c_cpp
    method: POST
    data_selector: results
- name: Java Applications
  endpoint:
    path: /analysis/java
    method: POST
    data_selector: results
- name: JavaScript Applications
  endpoint:
    path: /analysis/javascript
    method: POST
    data_selector: results
- name: Python Applications
  endpoint:
    path: /analysis/python
    method: POST
    data_selector: results
- name: Ruby Applications
  endpoint:
    path: /analysis/ruby
    method: POST
    data_selector: results
- name: Scala Applications
  endpoint:
    path: /analysis/scala
    method: POST
    data_selector: results
- name: Kotlin Applications
  endpoint:
    path: /analysis/kotlin
    method: POST
    data_selector: results
- name: PHP Applications
  endpoint:
    path: /analysis/php
    method: POST
    data_selector: results
- name: Terraform Projects
  endpoint:
    path: /analysis/terraform
    method: POST
    data_selector: results
- name: analyze
  endpoint:
    path: /analyze
    method: POST
- name: analyze
  endpoint:
    path: /analyze
    method: POST
    data_selector: results
    params: {}
- name: analyze
  endpoint:
    path: /analyze
    method: POST
    data_selector: results
    params: {}
- name: analyze_application
  endpoint:
    path: /analyze
    method: POST
    data_selector: results
    params: {}
- name: analyze_php_application
  endpoint:
    path: /analyze
    method: POST
    data_selector: results
- name: analyze
  endpoint:
    path: /analyze
    method: POST
    data_selector: results
    params: {}
- name: Python Application Analysis
  endpoint:
    path: /analyze
    method: GET
    data_selector: results
- name: analyze
  endpoint:
    path: /analyze
    method: POST
    data_selector: results
    params: {}
- name: analyze_kotlin_app
  endpoint:
    path: /analyze
    method: POST
    data_selector: results
    params: {}
- name: plsql_analysis
  endpoint:
    path: /analyze
    method: POST
    data_selector: results
    params:
      app: <name>
      plsql: true
- name: analyze_application
  endpoint:
    path: /analyze
    method: POST
    data_selector: results
    params: {}
- name: analyze_application
  endpoint:
    path: /analyze
    method: POST
    data_selector: results
- name: List app findings
  endpoint:
    path: /api/findings
    method: GET
    data_selector: findings
    params: {}
- name: list_app_findings
  endpoint:
    path: /api/findings
    method: GET
    data_selector: findings
    params: {}
- name: applications
  endpoint:
    path: /applications
    method: GET
    data_selector: results
- name: organizations
  endpoint:
    path: /organizations
    method: GET
    data_selector: results
- name: findings
  endpoint:
    path: /api/findings
    method: GET
    data_selector: records
- name: list_app_findings
  endpoint:
    path: /orgs/{orgID}/apps/{appID}/findings
    method: GET
    data_selector: findings
- name: read_app_finding
  endpoint:
    path: /orgs/{orgID}/apps/{appID}/findings/{findingID}
    method: GET
    data_selector: id
- name: list_apps
  endpoint:
    path: /orgs/{orgID}/apps
    method: GET
    data_selector: response
- name: findings
  endpoint:
    path: /api/findings
    method: GET
    data_selector: records
    params: {}
- name: scans
  endpoint:
    path: /api/scans
    method: GET
    data_selector: records
    params: {}
- name: organization_roles
  endpoint:
    path: /orgs/{orgId}/roles
    method: GET
    data_selector: response
- name: tokens
  endpoint:
    path: /orgs/{orgId}/tokens
    method: GET
    data_selector: response
    params:
      show_expired: true|false
- name: create_token
  endpoint:
    path: /orgs/{orgID}/tokens
    method: POST
    data_selector: response
- name: delete_token
  endpoint:
    path: /orgs/{orgID}/tokens/{tokenID}
    method: DELETE
    data_selector: ok
- name: tokens
  endpoint:
    path: /tokens
    method: POST
- name: roles
  endpoint:
    path: /api/roles
    method: GET
    data_selector: roles
- name: custom_roles
  endpoint:
    path: /api/custom_roles
    method: GET
    data_selector: custom_roles
- name: Qwiet Jira Integration Token
  endpoint:
    path: /organization/integrations
    method: POST
    data_selector: token
    params: {}
- name: findings_summary
  endpoint:
    path: /orgs/{orgID}/findings/summary
    method: GET
    data_selector: response.findings_summaries
- name: findings_summary
  endpoint:
    path: /orgs/{orgID}/findings/summary
    method: GET
    data_selector: response.findings_summaries
- name: app_groups
  endpoint:
    path: /orgs/{orgID}/findings/summary
    method: GET
    data_selector: response.apps
- name: create_or_update_app_group
  endpoint:
    path: /orgs/{orgID}/findings/summary
    method: POST
    data_selector: response.findings_summaries
- name: list_app_findings
  endpoint:
    path: /orgs/{orgID}/apps/{appID}/findings
    method: GET
    data_selector: response.findings
    params: {}
- name: read_app_finding
  endpoint:
    path: /orgs/{orgID}/apps/{appID}/findings/{findingID}
    method: GET
    data_selector: response
    params: {}
- name: list_apps
  endpoint:
    path: /orgs/{orgID}/apps
    method: GET
    data_selector: response
    params: {}
- name: organization_roles
  endpoint:
    path: /orgs/{orgId}/roles
    method: GET
- name: tokens
  endpoint:
    path: /orgs/{orgId}/tokens
    method: GET
    params:
      show_expired: true|false
- name: create_token
  endpoint:
    path: /orgs/{orgID}/tokens
    method: POST
- name: delete_token
  endpoint:
    path: /orgs/{orgID}/tokens/{tokenID}
    method: DELETE
- name: findings_summary
  endpoint:
    path: /orgs/{orgID}/findings/summary
    method: GET
    data_selector: response.findings_summaries
    params:
      orgID: required
- name: create_apps
  endpoint:
    path: /orgs/{orgID}/apps
    method: POST
    data_selector: response.apps
    params:
      orgID: required
- name: list_apps
  endpoint:
    path: /orgs/{orgID}/apps
    method: GET
    data_selector: response.apps
    params:
      orgID: required
- name: delete_app
  endpoint:
    path: /orgs/{orgID}/apps/{appID}
    method: DELETE
    data_selector: response
    params:
      orgID: required
      appID: required
- name: findings_summary
  endpoint:
    path: /orgs/{orgID}/findings/summary
    method: GET
    data_selector: response.findings_summaries
    params: {}
- name: app_branches
  endpoint:
    path: /orgs/{orgID}/findings/summary
    method: GET
    data_selector: response.apps
    params: {}
- name: app_config
  endpoint:
    path: /orgs/{orgID}/findings/summary
    method: GET
    data_selector: response.apps
    params: {}
- name: update_app_config
  endpoint:
    path: /orgs/{orgID}/findings/summary
    method: POST
    data_selector: response.apps
    params: {}
- name: merged_app_config
  endpoint:
    path: /orgs/{orgID}/findings/summary
    method: GET
    data_selector: response.apps
    params: {}
- name: findings_summary
  endpoint:
    path: /orgs/{orgID}/findings/summary
    method: GET
    data_selector: response.findings_summaries
- name: create_finding_comment
  endpoint:
    path: /orgs/{orgID}/findings/{findingID}/comments
    method: POST
- name: findings_summary
  endpoint:
    path: /orgs/{orgID}/findings/summary
    method: GET
    data_selector: response.findings_summaries
    params: {}
- name: findings_summary
  endpoint:
    path: /orgs/{orgID}/findings/summary
    method: GET
    data_selector: response.findings_summaries
- name: read_compound_scan
  endpoint:
    path: /orgs/{orgID}/findings/summary
    method: GET
    data_selector: response.apps
- name: findings_summary
  endpoint:
    path: /orgs/{orgID}/findings/summary
    method: GET
    data_selector: response.findings_summaries
    params: {}
- name: app_group
  endpoint:
    path: /orgs/{orgID}/app_groups
    method: GET
    data_selector: response.apps
    params: {}
- name: list_compounds
  endpoint:
    path: /orgs/{orgID}/findings/summary
    method: GET
    data_selector: response.findings_summaries
    params:
      archived: boolean
      page: integer
      per_page: integer
- name: read_shallow_compound
  endpoint:
    path: /orgs/{orgID}/findings/summary
    method: GET
    data_selector: response.findings_summaries
    params:
      compoundID: string
- name: delete_compound
  endpoint:
    path: /orgs/{orgID}/findings/summary
    method: DELETE
    data_selector: response.findings_summaries
    params:
      compoundID: string
- name: findings_summary
  endpoint:
    path: /orgs/{orgID}/findings/summary
    method: GET
    data_selector: response.findings_summaries
    params:
      orgID: string<uuid>
- name: delete_app
  endpoint:
    path: /orgs/{orgID}/apps/{appID}
    method: DELETE
    data_selector: response
    params:
      orgID: string<uuid>
      appID: string
- name: findings_summary
  endpoint:
    path: /orgs/{orgID}/findings/summary
    method: GET
    data_selector: response.findings_summaries
- name: list_app_findings
  endpoint:
    path: /orgs/{orgID}/findings/summary
    method: GET
    data_selector: response.apps
- name: findings_summary
  endpoint:
    path: /orgs/{orgID}/findings/summary
    method: GET
    data_selector: response.findings_summaries
- name: app_branches
  endpoint:
    path: /orgs/{orgID}/findings/summary
    method: GET
    data_selector: response.apps
- name: app_config
  endpoint:
    path: /orgs/{orgID}/findings/summary
    method: GET
    data_selector: response.apps
- name: update_app_config
  endpoint:
    path: /orgs/{orgID}/findings/summary
    method: PUT
    data_selector: response.apps
- name: compound_findings
  endpoint:
    path: /orgs/{orgID}/findings/summary
    method: GET
    data_selector: findings_summaries
    params:
      orgID: string <uuid>
      compoundName: string
- name: findings_summary
  endpoint:
    path: /orgs/{orgID}/findings/summary
    method: GET
    data_selector: response.findings_summaries
- name: create_app_finding_comment
  endpoint:
    path: /orgs/{orgID}/findings/{findingID}/comment
    method: POST
    data_selector: response
- name: findings_summary
  endpoint:
    path: /orgs/{orgID}/findings/summary
    method: GET
    data_selector: response.findings_summaries
- name: set_finding_status
  endpoint:
    path: /orgs/{orgID}/findings/status
    method: POST
- name: set_finding_assignee
  endpoint:
    path: /orgs/{orgID}/findings/assignee
    method: POST
- name: set_multiple_findings_status
  endpoint:
    path: /orgs/{orgID}/findings/status/multiple
    method: POST
- name: findings_summary
  endpoint:
    path: /orgs/{orgID}/findings/summary
    method: GET
    data_selector: response.findings_summaries
- name: list_app_finding_comments
  endpoint:
    path: /orgs/{orgID}/findings/{findingID}/comments
    method: GET
    data_selector: response.apps
- name: read_specific_comment
  endpoint:
    path: /orgs/{orgID}/findings/{findingID}/comments/{commentID}
    method: GET
    data_selector: response
- name: unarchive_compound
  endpoint:
    path: /orgs/{orgID}/compounds/{compoundName}/archive
    method: POST
    data_selector: response
- name: read_compound_scan
  endpoint:
    path: /orgs/{orgID}/compounds/{compoundName}/scans/{scanID}
    method: GET
    data_selector: response
- name: org_findings_summary
  endpoint:
    path: /orgs/{orgID}/findings/summary
    method: GET
    data_selector: response.findings_summaries
    params: {}
- name: list_org_findings
  endpoint:
    path: /orgs/{orgID}/findings
    method: GET
    data_selector: response.findings_summaries
    params: {}
- name: branches_for_compound
  endpoint:
    path: /orgs/{orgID}/findings/summary
    method: GET
    data_selector: response.findings_summaries
    params:
      archived: boolean
- name: list_scans_of_compound
  endpoint:
    path: /orgs/{orgID}/findings/summary
    method: GET
    data_selector: response.findings_summaries
    params:
      archived: boolean
      status: string
      branch: string
      limit: integer
- name: list_compounds
  endpoint:
    path: /orgs/{orgID}/findings/summary
    method: GET
    data_selector: response.findings_summaries
    params:
      archived: boolean
      page: integer
      per_page: integer
- name: read_shallow_compound
  endpoint:
    path: /orgs/{orgID}/findings/summary
    method: GET
    data_selector: response.findings_summaries
    params: {}
- name: delete_compound
  endpoint:
    path: /orgs/{orgID}/findings/summary
    method: DELETE
    data_selector: response.findings_summaries
    params: {}
- name: findings_summary
  endpoint:
    path: /orgs/{orgID}/findings/summary
    method: GET
    data_selector: response.findings_summaries
- name: list_app_findings
  endpoint:
    path: /orgs/{orgID}/findings/summary
    method: GET
    data_selector: response.apps
- name: findings_summary
  endpoint:
    path: /orgs/{orgID}/findings/summary
    method: GET
    params:
      orgID: string <uuid>
      compoundName: string
- name: findings_summary
  endpoint:
    path: /orgs/{orgID}/findings/summary
    method: GET
    data_selector: response.findings_summaries
- name: set_finding_status
  endpoint:
    path: /orgs/{orgID}/findings/status
    method: POST
    data_selector: response.ok
- name: set_finding_assignee
  endpoint:
    path: /orgs/{orgID}/findings/assignee
    method: POST
    data_selector: response.ok
- name: findings_summary
  endpoint:
    path: /orgs/{orgID}/findings/summary
    method: GET
    data_selector: response.findings_summaries
- name: list_org_findings
  endpoint:
    path: /orgs/{orgID}/findings/summary
    method: GET
    data_selector: response.findings_summaries
- name: policy
  endpoint:
    path: /policy
    method: GET
- name: check_environment
  endpoint:
    path: /check-environment
    method: GET
    data_selector: environment_info
    params: {}
- name: subscription_info
  endpoint:
    path: /subscription
    method: GET
    data_selector: subscriptions
    params: {}
- name: check_environment
  endpoint:
    path: /check-environment
    method: GET
    data_selector: environment_info
    params: {}
- name: build_rules
  endpoint:
    path: /shiftleft.yml
    method: GET
    data_selector: build_rules
    params: {}
- name: count_lines
  endpoint:
    path: /sl/count-lines
    method: GET
    data_selector: lines
    params: {}
- name: finding-modifications
  endpoint:
    path: /sast/config-file
    method: POST
    data_selector: ngsast
    params: {}
- name: sarif_export
  endpoint:
    path: /sl/sarif/export
    method: GET
- name: subscription_info
  endpoint:
    path: /subscription
    method: GET
    data_selector: entitlements
    params: {}
- name: ngsast
  endpoint:
    path: /sast/config-file
    method: GET
    data_selector: ngsast
    params: {}
- name: build_rules
  endpoint:
    path: /sast/build-rules-v2
    method: GET
    data_selector: build_rules
- name: finding-modifications
  endpoint:
    path: /sast/config-file
    method: POST
    data_selector: ngsast
    params: {}
notes:
- Service account tokens can only be used to create CI tokens.
- preZero is capable of inferring from your code repository the language in which
  the code is written, as well as the application's name.
- Requires setup of connected app in Qwiet
- Some API responses may include null fields
- Qwiet preZero supports the analysis of applications written in C and C++.
- Qwiet preZero is supported on Windows, Linux, and macOS.
- Qwiet preZero supports the analysis of applications written in Go 1.12 - 1.23.
- Qwiet preZero supports the analysis of Java source code written using Java 21 or
  earlier.
- Qwiet preZero supports the analysis of JavaScript and TypeScript applications.
- Qwiet preZero supports the analysis of Kotlin applications for Android written using
  SDK versions 24-30.
- Qwiet preZero supports the analysis of applications written using PHP 5.2-8.3.
- Qwiet preZero supports the analysis of applications written using Python 3.8 or
  later.
- Qwiet preZero supports the analysis of applications written in Ruby 2.x and 3.x.
- Qwiet preZero supports the analysis of applications written in Scala 2.12 or later.
- Qwiet preZero supports the analysis of Terraform projects on workstations with Docker
  Desktop installed and running.
- If you're using Windows, be sure to set the environment variable at the user level,
  not the system level.
- Environment variables override configuration file values.
- Environment variable SHIFTLEFT_ACCESS_TOKEN needs to be set with your access token.
- Maximum length for project/module name is 100 characters.
- Uses CLI commands for analysis.
- Qwiet offers a sample application that you can use to run and test preZero.
- Ensure that the application was built to include all used dependencies.
- Ensure that the environment on which you run Qwiet mirrors your development environment
  as closely as possible.
- Java 1.8 and JDK 11 are required for code analysis.
- preZero currently cannot support multi-module repos where the `src` directory contains
  multiple separate modules.
- Ensure your application dependencies are restored before analysis.
- To improve performance, consider excluding projects or files that are not necessary.
- Ensure node_modules does not exist
- The --dotnet, --dotnet-core, and --dotnet-framework flags have been deprecated,
  since Qwiet AI will automatically select the best option for the application.
- The --msbuild-proj and --msbuild-proj-iter flags have been deprecated. These were
  previously used to control how transitive project dependencies are included in the
  scan.
- 'You may see parsing errors due to: Use of strict mode, Unsupported syntaxes, such
  as spread objects or dynamic imports'
- If your VCS link ends incorrectly (that is, it uses .js instead of .ts or .tsx),
  you might see an HTTP 404 error.
- If you would like to use preZero to scan non-Android applications written in Kotlin
  or applications written in both Java and Kotlin, please contact Qwiet's customer
  support team for further assistance.
- Most of the errors seen regarding the analysis of Go applications involve an environment
  that had not been set up correctly.
- Uses OAuth2 with refresh token — requires setup of connected app in api
- preZero currently cannot support multi-module repos where the src directory contains
  multiple separate modules.
- Qwiet offers sample applications that you can use to run and test preZero.
- When analyzing a Vue.js application, you must include a vue.config.js file in the
  root of your repository.
- You can ignore TypeScript compiler errors as they do not affect a security analysis
  tool.
- If your VCS link ends incorrectly, you might see an HTTP 404 error.
- The Kotlin analyzer requires that the dependencies of the project to be scanned
  are available in a folder.
- Assumes that you have already set up and authenticated with Qwiet.
- Maximum length for app name is 100 characters
- Use --ignore-list for ignoring specific files
- If you see an error and a return value of `None`, you have probably pointed Ocular
  to the wrong input path for the directory containing the source code for the sample
  project.
- AutoFix capability is not enabled by default. Please contact Customer Success if
  you need assistance.
- Users must always consider the limitations of AI and review and edit the suggestion
  or pull request to ensure that the resulting code and application are correct, secure,
  performant, compliant, etc.
- Because no code analysis is performed, no reachability information is available.
- 'The name of the project/module to be analyzed (maximum length: 100 characters)'
- Path (file or directory) to skip, using regular expression logic, relative to the
  current working directory. Word boundaries are not implicit.
- Qwiet preZero supports both Linux- and Windows-based containers; however, you can
  analyze Windows-based containers only using Windows machines at this time.
- Environment variables take precedence over Application Settings, and Application
  Settings take precedence over Organization Settings.
- Default settings should ideally be changed only at the application level.
- This feature only supports a subset of languages (currently javascript and llvm).
- The feature intentionally does not support regular expressions.
- Ocular is a command-line tool for static code analysis.
- The prompt is the prompt of a Scala-based REPL.
- First, you'll need your access token, which you can obtain in the Dashboard.
- This capability is not enabled by default. Please contact Customer Success if you
  need assistance.
- Qwiet AI does NOT do any model training with customer data
- Allows the submission of diagnostic data to Qwiet
- Disables automatic updating of the CLI
- Disables the submission of diagnostic data; this is the default setting
- New Ungrouped Apps tab in the Applications page lets quickly find apps that are
  not currently part of a group.
- Team Manager role has been added to the Team Roles.
- ShiftLeft is now QwietAI
- Once you have your access token, create an environment variable called SHIFTLEFT_ACCESS_TOKEN
  and set its value to your access token.
- The CLI accepts various commands for different functionalities.
- Some objects may return nulls in deeply nested fields
- You can only view your token once, so please be sure to save its value before closing
  out of the dialog window.
- The Qwiet API uses bearer authentication, which means that you must pass in a bearer
  token before you make calls to any of the endpoints.
- Roles that you assign to users are additive.
- Organizations can have a maximum of 10 custom roles.
- Webhook configuration version defaults to 2 if not specified.
- Tokens tied to a user are automatically created by Qwiet preZero whenever an org
  owner/super admin creates a user.
- Org owners/super admins can create integration tokens and a general access token
  via the dashboard or the /tokens endpoints of the Qwiet API.
- Roles-based access control (RBAC) allows assigning permissions to users based on
  their role within an organization.
- Custom Roles allows administrators to create their own roles with specific sets
  of permissions.
- Webhook configuration version defaults to 2 (normal flow) if not specified.
- Uses Bearer Token for authorization
- Requires Bearer Token for authentication.
- Multi-Language Apps are groups of applications that are scanned together as a single
  application.
- You can obtain your access token from the Dashboard's Account Settings page under
  Access Token.
- Currently, Qwiet supports SSO integrations with providers supporting the SAML v2.0
  protocol.
- Return findings from scans of the app's configured default branch
- You need to create and set an environment variable called SHIFTLEFT_ACCESS_TOKEN.
- The `policy` command allows you to manage your custom policies.
- The list of finding types is subject to change as our security team identifies additional
  finding types.
- The access token associated with the Qwiet account can be obtained in the Dashboard
- The command will try to exclude directories that do not contain your application
  code directly (e.g., `node_modules` for Node.js or `vendor` for Go).
- The `ngsast` command allows you to generate a sample Qwiet preZero configuration
  file and validate any changes you make.
- Ensure IAM policies that allow full administrative privileges are not created.
- Ensure AKS has an API Server Authorized IP Ranges enabled.
- Ensure Kube Dashboard is disabled.
- Ensure AKS logging to Azure Monitoring is Configured.
- Ensure AKS cluster has Network Policy configured.
- Ensure ALB protocol is HTTPS.
- CIS Benchmark 5.2.8** Minimize the admission of containers with added capabilities.
- CIS Benchmark 5.2.5** Minimize the admission of containers with allowPrivilegeEscalation.
- Ensure there is no open access to back-end resources through API.
- Ensure App Service Authentication is set on Azure App Service.
- Ensure that `HTTP Version` is the latest if used to run the web app.
- Ensure web app redirects all HTTP traffic to HTTPS in Azure App Service.
- Ensure web app is using the latest version of TLS encryption.
- Ensure that Register with Azure Active Directory is enabled on App Service.
- Ensure Azure Instance does not use basic authentication(Use SSH Key Instead).
- Ensure Azure managed disk have encryption enabled.
- Ensure cloudfront distribution ViewerProtocolPolicy is set to HTTPS.
- Ensure Cloudfront distribution has Access Logging enabled.
- Ensure CloudTrail logs are encrypted at rest using KMS CMKs.
- Ensure CloudTrail log file validation is enabled.
- Ensure CloudTrail is enabled in all Regions.
- CIS Benchmark 5.7.3** Apply Security Context to Your Pods and Containers.
- CPU limits should be set.
- CPU requests should be set.
- Ensure no hardcoded AWS access key and secret key exists in the provider.
- CIS Benchmark 5.7.4** Kubernetes provides a default namespace, where objects are
  placed if no namespace is specified for them.
- CIS Benchmark 5.1.5** Ensure that default service accounts are not actively used.
- Do not expose the Docker daemon socket to containers.
- CIS Benchmark 5.2.7** Do not generally permit containers with the potentially dangerous
  NET_RAW capability.
- Ensure Dynamodb point in time recovery (backup) is enabled.
- Ensure all data stored in the EBS is securely encrypted.
- Ensure no hardcoded AWS access key and secret key exists in EC2 user data.
- Ensure ECR image scanning on push is enabled.
- Ensure ECR Image Tags are immutable.
- Ensure Amazon EKS control plane logging enabled for all log types.
- Ensure Amazon EKS public endpoint disabled.
- Ensure Amazon EKS public endpoint not accessible to 0.0.0.0/0.
- Ensure EKS Cluster has Secrets Encryption Enabled.
- Ensure all data stored in the Elasticache Replication Group is securely encrypted
  at rest.
- Ensure all data stored in the Elasticache Replication Group is securely encrypted
  at transit.
- Ensure all data stored in the Elasticsearch is securely encrypted at rest.
- Ensure Kubernetes Cluster is created with Alias IP ranges enabled.
- Ensure a client certificate is used by clients to authenticate to Kubernetes Engine
  Clusters.
- Ensure Stackdriver Logging is set to Enabled on Kubernetes Engine Clusters.
- Ensure Kubernetes Clusters are configured with Labels.
- Ensure Stackdriver Monitoring is set to Enabled on Kubernetes Engine Clusters.
- Ensure Network Policy is enabled on Kubernetes Engine Clusters.
- Ensure `Automatic node repair` is enabled for Kubernetes Clusters.
- Ensure `Automatic node upgrade` is enabled for Kubernetes Clusters.
- Ensure PodSecurityPolicy controller is enabled on the Kubernetes Engine Clusters.
- Ensure Kubernetes Cluster is created with Private cluster enabled.
- Ensure GKE Control Plane is not public.
- Ensure Container-Optimized OS (cos) is used for Kubernetes Engine Clusters Node
  image.
- Ensure that BigQuery datasets are not anonymously or publicly accessible.
- Ensure all Cloud SQL database instance requires all incoming connections to use
  SSL.
- Ensure VM disks for critical VMs are encrypted with Customer Supplied Encryption
  Keys (CSEK).
- Ensure Google compute firewall ingress does not allow unrestricted SSH access.
- Ensure Google compute firewall ingress does not allow unrestricted rdp access.
- Ensure that no instance in the project overrides the project setting for enabling
  OSLogin(OSLogin needs to be enabled in prject metadata for all instances).
- Ensure that IP forwarding is not enabled on Instances.
- Ensure Compute instances are launched with Shielded VM enabled.
- Ensure `Block Project-wide SSH keys` is enabled for VM instances.
- Ensure that VPC Flow Logs is enabled for every subnet in a VPC Network.
- Do not specify hostPort unless absolutely necessary.
- Ensure IAM policies are attached only to groups or roles (Reducing access management
  complexity may in-turn reduce opportunity for a principal to receive or retain excessive
  privileges inadvertently).
- Ensure IAM role allows only specific principals in account to assume it.
- Image should use digest.
- Image Pull Policy should be Always.
- Image Tag should be fixed - not latest or blank.
- Ensure Instance Metadata Service Version 1 is not enabled.
- Ensure that the expiration date is set on all keys.
- Ensure the key vault is recoverable.
- Ensure Kinesis Stream is securely encrypted.
- Ensure rotation for customer-created CMKs is enabled.
- Ensure the Kubernetes dashboard is not deployed.
- Ensure all data stored in the Launch configuration EBS is securely encrypted.
- Liveness Probe Should be Configured.
- Memory limits should be set.
- CIS Benchmark 5.2.9. Minimize the admission of containers with capabilities assigned.
- Ensure audit profile captures all the activities.
- Ensure that Activity Log Retention is set 365 days or greater.
- Ensure MQ Broker logging is enabled.
- Ensure `Enforce SSL connection` is set to `ENABLED` for MySQL Database Server.
- Ensure Neptune storage is securely encrypted.
- Ensure that Network Security Group Flow Log retention period is `greater than 90
  days`.
- Ensure that RDP access is restricted from the internet.
- Ensure that SSH access is restricted from the internet.
- CIS Benchmark 5.7.3. Apply Security Context to Your Pods and Containers.
- Ensure server parameter `connection_throttling` is set to `ON` for PostgreSQL Database
  Server.
- Ensure server parameter `log_checkpoints` is set to `ON` for PostgreSQL Database
  Server.
- Ensure `Enforce SSL connection` is set to `ENABLED` for PostgreSQL Database Server.
- Ensure Repository is Private.
- CIS Benchmark 5.2.1. Minimize the admission of privileged containers.
- Ensure all data stored in the RDS is securely encrypted at rest.
- Ensure all data stored in the RDS bucket is not public accessible.
- Readiness Probe Should be Configured.
- Use read-only filesystem for containers where possible.
- Ensure all data stored in the Redshift cluster is securely encrypted at rest.
- CIS Benchmark 5.2.6. Minimize the admission of root containers.
- Containers should run as a high UID to avoid host conflict.
- Ensure the S3 bucket has access logging enabled.
- Ensure S3 bucket does not allow an action with any Principal.
- Ensure S3 bucket has block public ACLS enabled.
- Ensure S3 bucket has block public policy enabled.
- Ensure all data stored in the S3 bucket is securely encrypted at rest.
- Ensure S3 bucket has ignore public ACLs enabled.
- Ensure S3 bucket has MFA delete enabled.
- S3 bucket has an ACL defined which allows public READ access.
- Ensure S3 bucket has `restrict_public_bucket` enabled.
- CIS Benchmark 5.7.2. Ensure that the seccomp profile is set to docker/default in
  your pod definitions.
- Ensure that the expiration date is set on all secrets.
- CIS Benchmark 5.4.1. Kubernetes supports mounting secrets as data volumes or as
  environment variables. Minimize the use of environment variable secrets.
- Ensure that `Send email notification for high severity alerts` is set to `On`.
- Ensure that security contact `Phone number` is set.
- Ensure that standard pricing tier is selected.
- Ensure every security groups rule has a description.
- Ensure no security groups allow ingress from 0.0.0.0:0 to port 22.
- Ensure no security groups allow ingress from 0.0.0.0:0 to port 3389.
- CIS Benchmark 5.1.6. Ensure that Service Account Tokens are only mounted where necessary.
- CIS Benchmark 5.2.4. Minimize the admission of containers wishing to share the host
  network namespace.
- CIS Benchmark 5.2.3. Minimize the admission of containers wishing to share the host
  IPC namespace.
- CIS Benchmark 5.2.2. Minimize the admission of containers wishing to share the host
  process ID namespace.
- Ensure all data stored in the SNS topic is encrypted.
- Ensure that `Auditing` is set to `On` for SQL servers.
- Ensure that `Auditing` Retention is `greater than 90 days` for SQL servers.
- Ensure that `Send Alerts To` is enabled for MSSQL servers.
- Ensure that `Email service and co-administrators` is `Enabled` for MSSQL servers.
- Ensure that `Threat Detection types` is set to `All`.
- Ensure `Trusted Microsoft Services` is enabled for Storage Account access.
- Ensure default network access rule for Storage Accounts is set to deny.
- Ensure Storage logging is enabled for Queue service for read, write and delete requests.
- Ensure Storage Account is using the latest version of TLS encryption.
- Ensure that `Secure transfer required` is set to `Enabled`.
- CloudFront Distribution should have WAF enabled.
- The software does not neutralize or incorrectly neutralizes user-controllable input
  before it is placed in output that is used as a web page that is served to other
  users.
- The `sarif export` command allows you to export Qwiet findings in the Static Analysis
  Results Interchange Format (SARIF).
- This feature is primarily designed to export findings to import into GitHub Code
  Scanning.
- Max apps allowed = no limit, Current usage = 305 (demo apps do not count to overall
  limit)
- Max users allowed = no limit, Current usage = 1
- The access token associated with the Qwiet account can be obtained in the Dashboard.
- Qwiet will automatically check your config file for rules defined as finding-modifications.
- Integrating Qwiet into your CI/CD platform results in applications and application
  groups automatically created for your organization.
- Qwiet supports the use of app groups.
- Demo apps do not count to overall limit
- Qwiet will retain support for version 1 of the sl check-analysis --v2 config file,
  but we recommend that newly created files use version 2.
- Supports well-known SAML 2.0-based single-sign on (SSO) providers
- Qwiet can help organize training and demo sessions for the identified security champions
  and AppSec team members to help you train the trainers, easing scalability and adoption
  of Qwiet preZero across all teams.
- Qwiet offers support during each step of the onboarding process via the agreed-upon
  channels, such as email, ZenDesk, or Slack.
- Qwiet's reporting capabilities are accessible via the UI and the REST API.
- Super Admin users can create and manage integration tokens.
- Deleting a token may break any integrations and automation you've set up using that
  token.
errors:
- 'REQUEST_LIMIT_EXCEEDED: Throttle API calls or reduce frequency'
- 'QUERY_TIMEOUT: Break down filters or add selectivity'
- '401 Unauthorized: Recheck OAuth scopes or token expiration'
- '400 Bad Request: Check the request parameters.'
- '401 Unauthorized: Ensure correct authentication credentials are provided.'
- '404 Not Found: Verify the endpoint path.'
- '404 Not Found: Request failed'
- 'error An unexpected error occurred: "https://registry.yarnpkg.com/yourModule/-/recess-5.11.0.tgz:
  Request failed "404 Not Found"".'
- check-analysis determines that a build rule fails
- There are issues with the configuration file
- There is an error of any type
- '0: Successful execution'
- '1: Error occurred during execution'
- 'default: Error'
- '200: Success'
- 'Error code 2: Build rules fail'
- 'Error code 1: All other types of failure, e.g., network issues, incorrect template'
- '2: Build rules fail'
- '1: All other types of failure, e.g., network issues, incorrect template, etc.'
auth_info:
  mentioned_objects:
  - OauthToken
  - AuthProvider
  - NamedCredential
  - BearerToken
  - SAML 2.0
  - Azure Active Directory
  - Okta
  - OneLogin
client:
  base_url: https://app.shiftleft.io
source_metadata: null
