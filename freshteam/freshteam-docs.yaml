resources:
- name: onEmployeeCreate
  endpoint:
    path: /events/onEmployeeCreate
    method: POST
    data_selector: args
    params: {}
- name: onAppInstall
  endpoint:
    path: /install
    method: POST
    data_selector: payload
    params: {}
- name: afterAppUpdate
  endpoint:
    path: /update
    method: POST
    data_selector: payload
    params: {}
- name: onAppUninstall
  endpoint:
    path: /uninstall
    method: POST
    data_selector: payload
    params: {}
- name: onEmployeeCreate
  endpoint:
    path: /events/onEmployeeCreate
    method: POST
- name: onEmployeeUpdate
  endpoint:
    path: /events/onEmployeeUpdate
    method: POST
- name: onNewHireCreate
  endpoint:
    path: /events/onNewHireCreate
    method: POST
- name: onNewHireUpdate
  endpoint:
    path: /events/onNewHireUpdate
    method: POST
- name: onJobPostingCreate
  endpoint:
    path: /events/onJobPostingCreate
    method: POST
- name: onJobPostingUpdate
  endpoint:
    path: /events/onJobPostingUpdate
    method: POST
- name: onTimeOffCreate
  endpoint:
    path: /events/onTimeOffCreate
    method: POST
- name: onTimeOffUpdate
  endpoint:
    path: /events/onTimeOffUpdate
    method: POST
- name: onApplicantCreate
  endpoint:
    path: /events/onApplicantCreate
    method: POST
- name: onApplicantUpdate
  endpoint:
    path: /events/onApplicantUpdate
    method: POST
- name: job_boards
  endpoint:
    path: template.html
    method: GET
- name: employees
  endpoint:
    path: /api/employees/{id}
    method: GET
    data_selector: employee
    params: {}
- name: employee_fields
  endpoint:
    path: /api/employee_fields
    method: GET
    data_selector: fields
    params: {}
- name: branches
  endpoint:
    path: /api/branches
    method: GET
    data_selector: branches
    params: {}
- name: departments
  endpoint:
    path: /api/departments
    method: GET
    data_selector: departments
    params: {}
- name: sub_departments
  endpoint:
    path: /api/sub_departments
    method: GET
    data_selector: sub_departments
    params: {}
- name: business_units
  endpoint:
    path: /api/business_units
    method: GET
    data_selector: business_units
    params: {}
- name: teams
  endpoint:
    path: /api/teams
    method: GET
    data_selector: teams
- name: levels
  endpoint:
    path: /api/levels
    method: GET
    data_selector: levels
- name: time_offs
  endpoint:
    path: /api/time_offs
    method: GET
    data_selector: time_offs
- name: time_off_types
  endpoint:
    path: /api/time_off_types
    method: GET
    data_selector: time_off_types
- name: job_postings
  endpoint:
    path: /api/job_postings
    method: GET
    params: {}
- name: job_posting_fields
  endpoint:
    path: /api/job_posting_fields
    method: GET
    params: {}
- name: applicant_fields
  endpoint:
    path: /api/job_postings/{id}/applicant_fields
    method: GET
    params: {}
- name: new_hire
  endpoint:
    path: /new_hires
    method: GET
    data_selector: records
- name: employee
  endpoint:
    path: /api/v1/employees
    method: GET
    data_selector: employees
    params: {}
- name: employees
  endpoint:
    path: /employees
    method: GET
- name: employee_fields
  endpoint:
    path: /employee_fields
    method: GET
- name: employees
  endpoint:
    path: /api/employees
    method: GET
    params: {}
- name: create_employee
  endpoint:
    path: /api/employees
    method: POST
    params: {}
- name: time_off
  endpoint:
    path: /api/time_offs/{id}
    method: GET
- name: cancel_time_off
  endpoint:
    path: /api/time_offs/{id}/cancel
    method: PUT
- name: approve_time_off
  endpoint:
    path: /api/time_offs/{id}/approve
    method: PUT
- name: roles
  endpoint:
    path: /api/roles
    method: GET
- name: job_postings
  endpoint:
    path: /job_postings
    method: GET
- name: create_applicant
  endpoint:
    path: /api/job_postings/{id}/applicants
    method: POST
- name: candidate_sources
  endpoint:
    path: /api/candidate_sources
    method: GET
- name: candidate_source_categories
  endpoint:
    path: /api/candidate_source_categories
    method: GET
- name: user_functions
  endpoint:
    path: /api/user_functions
    method: GET
- name: new_hires
  endpoint:
    path: /new_hires
    method: POST
- name: new_hires
  endpoint:
    path: /api/new_hires
    method: POST
- name: new_hire_info
  endpoint:
    path: /api/new_hires/{id}
    method: GET
- name: update_new_hire
  endpoint:
    path: /api/new_hires/{id}
    method: PUT
- name: custom_app_submission
  endpoint:
    path: /api/custom_apps
    method: POST
    data_selector: app_details
- name: custom_app_status
  endpoint:
    path: /api/custom_apps/status
    method: GET
    data_selector: app_status
- name: custom_app_installation
  endpoint:
    path: /api/custom_apps/install
    method: POST
    data_selector: installation_details
- name: loggedInUser
  endpoint:
    path: /api/v1/loggedInUser
    method: GET
    data_selector: data
    params: {}
- name: domainName
  endpoint:
    path: /api/v1/domainName
    method: GET
    data_selector: data
    params: {}
- name: jobPosting
  endpoint:
    path: /api/v1/jobPosting
    method: GET
    data_selector: data
    params: {}
- name: applicant
  endpoint:
    path: /api/v1/applicant
    method: GET
    data_selector: data
    params: {}
- name: candidate
  endpoint:
    path: /api/v1/candidate
    method: GET
    data_selector: data
    params: {}
- name: onEmployeeCreate
  endpoint:
    path: /server/test_data/onEmployeeCreate.json
    method: POST
- name: employees
  endpoint:
    path: /api/employees
    method: GET
    data_selector: employees
    params: {}
- name: create_employee
  endpoint:
    path: /api/employees
    method: POST
    data_selector: employee
    params: {}
- name: employees
  endpoint:
    path: /employees
    method: GET
- name: employee_fields
  endpoint:
    path: /employee_fields
    method: GET
- name: employee
  endpoint:
    path: /api/v1/employees
    method: GET
    data_selector: employees
    params:
      incremental: updated_at
- name: time_offs
  endpoint:
    path: /api/time_offs/{id}
    method: GET
- name: cancel_time_off
  endpoint:
    path: /api/time_offs/{id}/cancel
    method: PUT
- name: approve_time_off
  endpoint:
    path: /api/time_offs/{id}/approve
    method: PUT
- name: roles
  endpoint:
    path: /api/roles
    method: GET
- name: job_postings
  endpoint:
    path: /api/job_postings
    method: GET
- name: new_hire
  endpoint:
    path: /new_hire
    method: GET
    data_selector: records
- name: employees
  endpoint:
    path: /api/employees/{id}
    method: GET
    data_selector: employee
    params: {}
- name: employee_fields
  endpoint:
    path: /api/employee_fields
    method: GET
    data_selector: fields
    params: {}
- name: branches
  endpoint:
    path: /api/branches
    method: GET
    data_selector: branches
    params: {}
- name: departments
  endpoint:
    path: /api/departments
    method: GET
    data_selector: departments
    params: {}
- name: sub_departments
  endpoint:
    path: /api/sub_departments
    method: GET
    data_selector: sub_departments
    params: {}
- name: business_units
  endpoint:
    path: /api/business_units
    method: GET
    data_selector: business_units
    params: {}
- name: job_postings
  endpoint:
    path: /api/job_postings
    method: GET
    data_selector: records
    params: {}
- name: job_posting_fields
  endpoint:
    path: /api/job_posting_fields
    method: GET
    data_selector: records
    params: {}
- name: applicant_fields
  endpoint:
    path: /api/job_postings/{id}/applicant_fields
    method: GET
    data_selector: records
    params: {}
- name: create_applicant
  endpoint:
    path: /api/job_postings/{id}/applicants
    method: POST
    data_selector: candidate
    params:
      id: Mandatory
- name: list_candidate_sources
  endpoint:
    path: /api/candidate_sources
    method: GET
    data_selector: sources
    params: {}
- name: list_candidate_source_categories
  endpoint:
    path: /api/candidate_source_categories
    method: GET
    data_selector: categories
    params: {}
- name: list_user_functions
  endpoint:
    path: /api/user_functions
    method: GET
    data_selector: user_functions
    params: {}
- name: new_hires
  endpoint:
    path: /new_hires
    method: POST
    data_selector: new_hire
    params: {}
- name: teams
  endpoint:
    path: /api/teams
    method: GET
    data_selector: teams
- name: levels
  endpoint:
    path: /api/levels
    method: GET
    data_selector: levels
- name: time_offs
  endpoint:
    path: /api/time_offs
    method: GET
    data_selector: time_offs
- name: time_off_types
  endpoint:
    path: /api/time_off_types
    method: GET
    data_selector: time_off_types
- name: new_hires
  endpoint:
    path: /api/new_hires
    method: POST
    data_selector: new_hire
    params: {}
- name: new_hire_by_id
  endpoint:
    path: /api/new_hires/{id}
    method: GET
    data_selector: new_hire
    params: {}
- name: update_new_hire
  endpoint:
    path: /api/new_hires/{id}
    method: PUT
    data_selector: new_hire
    params: {}
- contact:
    display_name: Contact Details
    description: Please enter the contact details
    type: text
    required: true
- age:
    display_name: Age
    description: Please enter your age in years
    type: number
- contactType:
    display_name: Contact Type
    description: Please select the contact type
    type: dropdown
    options:
    - Phone
    - Email
    default_value: Email
- domainName:
    display_name: Domain Name
    description: Please enter your domain name
    type: domain
    type_attributes:
      product: freshteam
    required: true
- apiKey:
    display_name: API Key
    description: Please enter your api_key
    type: api_key
    secure: true
    required: true
    type_attributes:
      product: freshteam
- contact:
    display_name: Contact Details
    description: Please enter the contact details
    type: text
    required: true
- age:
    display_name: Age
    description: Please enter your age in years
    type: number
- contactType:
    display_name: Contact Type
    description: Please select the contact type
    type: dropdown
    options:
    - Phone
    - Email
    default_value: Email
- domainName:
    display_name: Domain Name
    description: Please enter your domain name
    type: domain
    type_attributes:
      product: freshteam
    required: true
- apiKey:
    display_name: API Key
    description: Please enter your api_key
    type: api_key
    secure: true
    required: true
    type_attributes:
      product: freshteam
- name: campaign_member
  endpoint:
    path: /services/data/vXX.X/sobjects/CampaignMember
    method: GET
    data_selector: records
    params:
      incremental: updated_at
- name: contact
  endpoint:
    path: /services/data/vXX.X/sobjects/Contact
    method: GET
    data_selector: records
    params: {}
- name: jwt_request
  endpoint:
    path: https://url.com
    method: POST
notes:
- When you run Freshworks CLI commands, an upgrade check is performed only if it hasn’t
  been performed in the last 24 hours.
- The FDK displays a warning message stating that your FDK version is deprecated.
- Data is stored on a per account AND per app basis.
- A rate limit of 50 requests per minute applies.
- Use the renderData() method to control event completion.
- Mandatory actions can be defined to either complete or disallow events.
- Ensure that submitted code is readable (with consistent naming schemes and indentation
  and follows the DRY principle).
- Do not hardcode keys, credentials, or sensitive data in the app.
- You can have a maximum of 1000 one-time schedules and 1 recurring schedule.
- The timeout period for app execution is 20 seconds and the default time zone is
  UTC.
- The schedule_at time must be at least 5 minutes from the current time.
- You must be 18 years or older to use the Developer Portal.
- Developer must maintain the confidentiality of the Developer Account login credentials
  and not share such login credentials.
- Freshworks reserves the right to suspend or terminate the Developer Account at its
  discretion.
- Ensure that the config directory contains only one of the two files - iparams.json
  or iparams.html.
- Use the latest version of FDK to test the Custom Installation page in your computer.
- Specifies the Node.js version and FDK version that are used to build the app
- Ensure to use npm for CLI installation. Also, ensure to use the npm version that
  is shipped with Node.
- The iparam_test_data.json file has been deprecated. Before testing the app, navigate
  to http://localhost:10001/custom_configs and enter appropriate values for the configured
  installation parameters.
- Use the latest version of Chrome browser.
- Ensure to sign up for a Freshteam account.
- Each component in the coverage summary should be at least 80% for apps to be submitted
  in Freshworks Marketplace.
- Currently, only onAppInstall and onAppUninstall can be tested through end-to-end
  testing. The afterAppUpdate event cannot be tested through end-to-end testing.
- All apps that make requests to third-party domains must use the Request method or
  they will not be published in Freshworks Marketplace.
- The timeout for requests is six seconds.
- There is a rate limit of 50 requests per minute per app per account.
- Only users in HR Partner, Admin, and Account Admin roles can access this API.
- The Content-Type should always be multipart/form-data for create/update requests
  with attachments.
- Ensure that all instances to which data is sent are active instances.
- Incoming content type should be of JSON or XML type.
- The rate limit for receiving external events is 250 per minute.
- The timeout period for the app execution is 20 seconds.
- Custom apps are not subject to the review process and are available for installation
  within 30 minutes of app submission.
- If you update the app and republish it, the changes are deployed within 30 minutes.
- The rate limit for the serverless component is 50 triggers per minute.
- The serverless component’s app execution timeout is five seconds.
- The payload passed to the severless component should not exceed 100KB.
- Uses OAuth2 with refresh token — requires setup of connected app in Freshteam
- The serverless component of the app is executed in sandbox mode where some methods,
  such as setTimeout and setInterval, cannot be used.
- The app must complete its execution within 20 seconds or it will timeout.
- Requires setup of connected app in Freshteam.
- Ensure that REST API calls are made from front-end apps using the Request API to
  subvert many security issues and to work within the CORS policy of a browser.
- In serverless applications, avoid using dependencies that are declared but left
  unused and dependencies that are used but undeclared.
- The current threshold is 7 for cyclomatic complexity.
- The threshold of nested callbacks is 4.
- The maximum supported length of each log is 2000 characters beyond which the log
  is truncated.
- Viewing serverless logs is possible for custom apps that have at least one installation
  parameter (iparam).
- Uses OAuth2 with refresh token — requires setup of connected app in api
- Some objects like Contact may return nulls in deeply nested fields
- You can use external front-end libraries and node packages to enhance an app's functionality.
- You can use jQuery libraries to add certain UI elements to an app.
- You can use handlebars to build semantic templates.
- You can use npm packages to leverage back-end functionalities for an app.
- JWT is generated from data comprising of three parts - header, payload, and signature.
- The generated token is passed in the Authorization header of a request.
- Ensure that the directory in which the app is to be created is empty.
- Ensure to install or update to the latest FDK version.
errors:
- '400: Key length should not exceed 30 characters'
- '401: Is returned if you performed an unauthorized request.'
- '404: Is returned if the record is not found.'
- '422: Is returned if the server does not recognize your request.'
- '429: Is returned when the number of requests exceeds the threshold.'
- '500: Is returned if the server encounters an unexpected condition.'
- '502: Is returned if the server cannot process the request due to request overload.'
- 'Invalid API Key: Installation or update failed due to invalid credentials.'
- Uninstallation failed due to network error.
- '400: Is returned due to invalid input.'
- '500: Is returned if the server encountered an unexpected error.'
- '502: Is returned when there is a network error.'
- '503: Is returned when the service is temporarily unavailable.'
- '504: Is returned when there is a timeout error while processing the request.'
- 400 Bad Request
- 401 Unauthenticated Request
- 403 Forbidden
- 404 Resource Not Found
- 429 Too Many Requests
- 500 Internal Server Request
- 'REQUEST_LIMIT_EXCEEDED: Throttle API calls or reduce frequency.'
- 'QUERY_TIMEOUT: Break down filters or add selectivity.'
- '401 Unauthorized: Recheck OAuth scopes or token expiration.'
- Avoid using JavaScript's eval() function, on untrusted code, as it can open a program
  to several different injection attacks.
- Variables that are declared and not used anywhere in the code might be residues
  of incomplete refactoring.
- In production code, avoid using debugger; as it stops the browser from running code
  and opens an appropriate debugger.
- Avoid having unreachable statements.
- 'REQUEST_LIMIT_EXCEEDED: Throttle API calls or reduce frequency'
- 'QUERY_TIMEOUT: Break down filters or add selectivity'
- '401 Unauthorized: Recheck OAuth scopes or token expiration'
auth_info:
  mentioned_objects:
  - OauthToken
  - AuthProvider
  - NamedCredential
client:
  base_url: https://your-instance.api-name.com
  auth:
    type: jwt
    flow: refresh_token
    token_url: https://login.api.com/services/oauth2/token
    client_id: '{{ dlt.secrets[''api_client_id''] }}'
    client_secret: '{{ dlt.secrets[''api_client_secret''] }}'
    refresh_token: '{{ dlt.secrets[''api_refresh_token''] }}'
    location: header
    header_name: Authorization
  headers:
    Accept: application/json
    accept: application/json
    Authorization: Bearer D4HN6sD0qjUVI32cDCnQeQ
    Content-Type: application/json
  paginator:
    type: cursor
    page_size_param: pageSize
    default_page_size: 200
    cursor_path: nextRecordsUrl
    cursor_param: nextUrl
source_metadata: null
