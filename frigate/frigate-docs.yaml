resources:
- name: camera
  endpoint:
    path: /cameras/back
    method: GET
    data_selector: records
- name: frigate
  endpoint:
    path: /
    method: GET
- name: camera_setup
  endpoint:
    path: /frigate/camera_setup
    method: GET
- name: cameras
  endpoint:
    path: /cameras
    method: GET
    data_selector: cameras
- name: streams
  endpoint:
    path: /go2rtc/streams
    method: GET
- name: notifications
  endpoint:
    path: /api/frigate/notifications
    method: GET
- name: events
  endpoint:
    path: /api/frigate/events
    method: GET
- name: reviews
  endpoint:
    path: /api/frigate/reviews
    method: GET
- name: media_share
  endpoint:
    path: /settings/system/storage/add_network_storage
    method: POST
    data_selector: response
    params:
      share_name: frigate
      type: media
- name: mqtt
  endpoint:
    path: /mqtt
    method: GET
    data_selector: records
    params: {}
- name: cameras
  endpoint:
    path: /cameras
    method: GET
    data_selector: records
    params: {}
- name: front_steps
  endpoint:
    path: /cameras/front_steps
    method: GET
    params:
      coordinates: 0.033,0.306,0.324,0.138,0.439,0.185,0.042,0.428
- name: coral
  endpoint:
    path: /configuration/object_detectors
    method: GET
- name: hailo
  endpoint:
    path: /configuration/object_detectors
    method: GET
- name: openvino
  endpoint:
    path: /configuration/object_detectors
    method: GET
- name: ssdlite_mobilenet_v2
  endpoint:
    path: /openvino-model/ssdlite_mobilenet_v2.xml
    method: GET
    data_selector: ''
    params: {}
- name: yolonas
  endpoint:
    path: /config/yolo_nas_s.onnx
    method: GET
    data_selector: ''
    params: {}
- name: yolo-generic
  endpoint:
    path: /config/model_cache/yolo.onnx
    method: GET
    data_selector: ''
    params: {}
- name: yolox
  endpoint:
    path: /config/model_cache/yolox_tiny.onnx
    method: GET
    data_selector: ''
    params: {}
- name: rfdetr
  endpoint:
    path: /config/model_cache/rfdetr.onnx
    method: GET
    data_selector: ''
    params: {}
- name: dfine
  endpoint:
    path: /config/model_cache/dfine_m_obj2coco.onnx
    method: GET
    data_selector: ''
    params: {}
- name: deepstack
  endpoint:
    path: http://<your_codeproject_ai_server_ip>:<port>/v1/vision/detection
    method: GET
    data_selector: ''
    params: {}
- name: detectors
  endpoint:
    path: /configuration/object_detectors
    method: GET
    data_selector: detectors
    params: {}
- name: model
  endpoint:
    path: model
    method: GET
    data_selector: model
    params: {}
- name: detectors
  endpoint:
    path: /configuration/object_detectors
    method: GET
    data_selector: detectors
    params: {}
- name: detector
  endpoint:
    path: /detector
    method: POST
    data_selector: results
    params: {}
- name: model
  endpoint:
    path: /model
    method: GET
    data_selector: model
    params: {}
- name: RF-DETR Model
  endpoint:
    path: /download/rf-detr
    method: GET
    data_selector: model_data
- name: YOLO-NAS Model
  endpoint:
    path: /download/yolo-nas
    method: GET
    data_selector: model_data
- name: YOLOx
  endpoint:
    path: /download/yolox
    method: GET
    data_selector: model_data
- name: YOLOv3
  endpoint:
    path: /download/yolov3
    method: GET
    data_selector: model_data
- name: YOLOv4
  endpoint:
    path: /download/yolov4
    method: GET
    data_selector: model_data
- name: YOLOv7
  endpoint:
    path: /download/yolov7
    method: GET
    data_selector: model_data
- name: YOLOv9
  endpoint:
    path: /download/yolov9
    method: GET
    data_selector: model_data
- name: audio_events
  endpoint:
    path: /configuration/audio_detectors
    method: GET
    data_selector: audio
    params: {}
- name: semantic_search
  endpoint:
    path: /configuration/semantic_search
    method: GET
    data_selector: ''
    params: {}
- name: face_recognition
  endpoint:
    path: /configuration/face_recognition
    method: GET
    data_selector: face_recognition
    params: {}
- name: license_plate_recognition
  endpoint:
    path: /configuration/license_plate_recognition
    method: GET
    data_selector: lpr
    params: {}
- name: lpr
  endpoint:
    path: /configuration/license_plate_recognition
    method: GET
    data_selector: lpr
    params: {}
- name: license_plate_recognition
  endpoint:
    path: /configuration/license_plate_recognition
    method: GET
    data_selector: lpr
    params: {}
- name: bird_classification
  endpoint:
    path: /configuration/bird_classification
    method: GET
    data_selector: classification.bird
    params: {}
- name: review_items
  endpoint:
    path: /configuration/review
    method: GET
    data_selector: review_items
    params: {}
- name: recording
  endpoint:
    path: /configuration/record
    method: GET
    data_selector: record
    params: {}
- name: snapshot
  endpoint:
    path: /integrations/api/event-snapshot-events-event-id-snapshot-jpg-get
    method: GET
- name: motion_detection
  endpoint:
    path: /configuration/motion_detection
    method: GET
    data_selector: motion
    params: {}
- name: birdseye
  endpoint:
    path: /configuration/birdseye
    method: GET
    data_selector: birdseye
    params: {}
- name: birdseye
  endpoint:
    path: /configuration/birdseye
    method: GET
    data_selector: birdseye_settings
    params: {}
- name: live_view
  endpoint:
    path: /configuration/live
    method: GET
    data_selector: streams
    params: {}
- name: go2rtc_streams
  endpoint:
    path: /api/go2rtc/streams
    method: GET
    data_selector: streams
- name: camera_autotracking
  endpoint:
    path: /configuration/autotracking
    method: GET
    data_selector: cameras
    params: {}
- name: object_scores
  endpoint:
    path: /configuration/object_filters
    method: GET
    data_selector: object_scores
    params: {}
- name: object_shape
  endpoint:
    path: /configuration/object_filters
    method: GET
    data_selector: object_shape
    params: {}
- name: zones
  endpoint:
    path: /configuration/zones
    method: GET
    data_selector: zones
    params: {}
- name: object_masks
  endpoint:
    path: /configuration/masks
    method: GET
    data_selector: object_masks
    params: {}
- name: motion_masks
  endpoint:
    path: /configuration/masks/motion
    method: GET
    data_selector: mask
- name: object_filter_masks
  endpoint:
    path: /configuration/masks/object_filter
    method: GET
    data_selector: mask
- name: zones
  endpoint:
    path: /configuration/zones
    method: GET
- name: available_objects
  endpoint:
    path: /configuration/objects
    method: GET
    data_selector: objects
    params: {}
- name: stationary_objects
  endpoint:
    path: /configuration/stationary_objects
    method: GET
    data_selector: config
    params: {}
- name: ffmpeg
  endpoint:
    path: config.yml
    method: POST
    data_selector: ffmpeg
    params: {}
- name: notifications
  endpoint:
    path: /configuration/notifications
    method: POST
    data_selector: notifications
    params: {}
- name: hwaccel_presets
  endpoint:
    path: /configuration/hardware_acceleration_video
    method: GET
    data_selector: presets
    params: {}
- name: input_args_presets
  endpoint:
    path: /configuration/camera_specific
    method: GET
    data_selector: presets
    params: {}
- name: output_args_presets
  endpoint:
    path: /configuration/output_args_presets
    method: GET
    data_selector: presets
    params: {}
- name: tls
  endpoint:
    path: /configuration/tls
    method: GET
    data_selector: tls_config
    params: {}
- name: certificates
  endpoint:
    path: /configuration/tls/certificates
    method: GET
    data_selector: certificate_info
    params: {}
- name: acme_challenge
  endpoint:
    path: /configuration/tls/acme_challenge
    method: GET
    data_selector: acme_info
    params: {}
- name: config
  endpoint:
    path: /api/config/save
    method: POST
- name: camera
  endpoint:
    path: /api/camera
    method: GET
    data_selector: cameras
- name: image
  endpoint:
    path: /api/image
    method: GET
    data_selector: images
- name: sensor
  endpoint:
    path: /api/sensor
    method: GET
    data_selector: sensors
- name: switch
  endpoint:
    path: /api/switch
    method: GET
    data_selector: switches
- name: binary_sensor
  endpoint:
    path: /api/binary_sensor
    method: GET
    data_selector: binary_sensors
- name: Auth
  endpoint:
    path: /integrations/api/auth-auth-get
    method: GET
- name: Events
  endpoint:
    path: /integrations/api/get-faces-faces-get
    method: GET
- name: Review
  endpoint:
    path: /integrations/api/review-review-get
    method: GET
- name: App
  endpoint:
    path: /integrations/api/is-healthy-get
    method: GET
- name: Logs
  endpoint:
    path: /integrations/api/logs-logs-service-get
    method: GET
- name: Preview
  endpoint:
    path: /integrations/api/preview-ts-preview-camera-name-start-start-ts-end-end-ts-get
    method: GET
- name: Notifications
  endpoint:
    path: /integrations/api/get-vapid-pub-key-notifications-pubkey-get
    method: GET
- name: Export
  endpoint:
    path: /integrations/api/get-exports-exports-get
    method: GET
- name: Media
  endpoint:
    path: /integrations/api/mjpeg-feed-camera-name-get
    method: GET
- name: Schemas
  endpoint:
    path: /integrations/api/schemas/appconfigsetbody
    method: GET
- name: availability
  endpoint:
    path: frigate/available
    method: GET
    data_selector: messages
- name: events
  endpoint:
    path: frigate/events
    method: GET
    data_selector: messages
- name: tracked_object_update
  endpoint:
    path: frigate/tracked_object_update
    method: GET
    data_selector: messages
- name: reviews
  endpoint:
    path: frigate/reviews
    method: GET
    data_selector: messages
- name: stats
  endpoint:
    path: frigate/stats
    method: GET
    data_selector: messages
- name: camera_activity
  endpoint:
    path: frigate/camera_activity
    method: GET
    data_selector: messages
- name: notifications_set
  endpoint:
    path: frigate/notifications/set
    method: GET
    data_selector: messages
- name: notifications_state
  endpoint:
    path: frigate/notifications/state
    method: GET
    data_selector: messages
- name: improve_contrast
  endpoint:
    path: frigate/<camera_name>/improve_contrast/set
    method: SET
    data_selector: value
    params: {}
- name: improve_contrast_state
  endpoint:
    path: frigate/<camera_name>/improve_contrast/state
    method: GET
    data_selector: state
    params: {}
- name: motion_threshold
  endpoint:
    path: frigate/<camera_name>/motion_threshold/set
    method: SET
    data_selector: value
    params: {}
- name: motion_threshold_state
  endpoint:
    path: frigate/<camera_name>/motion_threshold/state
    method: GET
    data_selector: threshold
    params: {}
- name: motion_contour_area
  endpoint:
    path: frigate/<camera_name>/motion_contour_area/set
    method: SET
    data_selector: value
    params: {}
- name: motion_contour_area_state
  endpoint:
    path: frigate/<camera_name>/motion_contour_area/state
    method: GET
    data_selector: contour_area
    params: {}
- name: review_status
  endpoint:
    path: frigate/<camera_name>/review_status
    method: GET
    data_selector: status
    params: {}
- name: ptz
  endpoint:
    path: frigate/<camera_name>/ptz
    method: SET
    data_selector: command
    params: {}
- name: ptz_autotracker
  endpoint:
    path: frigate/<camera_name>/ptz_autotracker/set
    method: SET
    data_selector: state
    params: {}
- name: ptz_autotracker_state
  endpoint:
    path: frigate/<camera_name>/ptz_autotracker/state
    method: GET
    data_selector: state
    params: {}
- name: review_alerts
  endpoint:
    path: frigate/<camera_name>/review_alerts/set
    method: SET
    data_selector: state
    params: {}
- name: review_alerts_state
  endpoint:
    path: frigate/<camera_name>/review_alerts/state
    method: GET
    data_selector: state
    params: {}
- name: review_detections
  endpoint:
    path: frigate/<camera_name>/review_detections/set
    method: SET
    data_selector: state
    params: {}
- name: review_detections_state
  endpoint:
    path: frigate/<camera_name>/review_detections/state
    method: GET
    data_selector: state
    params: {}
- name: birdseye
  endpoint:
    path: frigate/<camera_name>/birdseye/set
    method: SET
    data_selector: state
    params: {}
- name: birdseye_state
  endpoint:
    path: frigate/<camera_name>/birdseye/state
    method: GET
    data_selector: state
    params: {}
- name: birdseye_mode
  endpoint:
    path: frigate/<camera_name>/birdseye_mode/set
    method: SET
    data_selector: mode
    params: {}
- name: birdseye_mode_state
  endpoint:
    path: frigate/<camera_name>/birdseye_mode/state
    method: GET
    data_selector: mode
    params: {}
- name: notifications
  endpoint:
    path: frigate/<camera_name>/notifications/set
    method: SET
    data_selector: state
    params: {}
- name: notifications_state
  endpoint:
    path: frigate/<camera_name>/notifications/state
    method: GET
    data_selector: state
    params: {}
- name: notifications_suspend
  endpoint:
    path: frigate/<camera_name>/notifications/suspend
    method: SET
    data_selector: minutes
    params: {}
- name: notifications_suspended
  endpoint:
    path: frigate/<camera_name>/notifications/suspended
    method: GET
    data_selector: timestamp
    params: {}
- name: metrics
  endpoint:
    path: /api/metrics
    method: GET
    data_selector: ''
- name: Auth
  endpoint:
    path: /integrations/api/auth-auth-get
    method: GET
- name: Events
  endpoint:
    path: /integrations/api/get-faces-faces-get
    method: GET
- name: Review
  endpoint:
    path: /integrations/api/review-review-get
    method: GET
- name: App
  endpoint:
    path: /integrations/api/is-healthy-get
    method: GET
- name: Logs
  endpoint:
    path: /integrations/api/logs-logs-service-get
    method: GET
- name: Preview
  endpoint:
    path: /integrations/api/preview-ts-preview-camera-name-start-start-ts-end-end-ts-get
    method: GET
- name: Notifications
  endpoint:
    path: /integrations/api/get-vapid-pub-key-notifications-pubkey-get
    method: GET
- name: Export
  endpoint:
    path: /integrations/api/get-exports-exports-get
    method: GET
- name: Media
  endpoint:
    path: /integrations/api/mjpeg-feed-camera-name-get
    method: GET
- name: Schemas
  endpoint:
    path: /integrations/api/schemas/appconfigsetbody
    method: GET
notes:
- 'If disabled: config is used but no live stream and no capture etc.'
- WiFi cameras are not recommended as their streams are less reliable and cause connection
  loss and/or lost video data.
- Many users have reported various issues with 4K-plus Reolink cameras, it is best
  to stick with 5MP and lower for Reolink cameras.
- For commercial installations it is important to verify the number of supported concurrent
  streams on your GPU, many consumer GPUs max out at ~20 concurrent camera streams.
- MQTT broker is required for the Home Assistant integration.
- Users of the Snapcraft build of Docker cannot use storage locations outside your
  $HOME folder.
- Execute container using high privilege option needs to be enabled in order to give
  the frigate container the elevated privileges it may need.
- Enable auto-restart option can be enabled if you want the container to automatically
  restart whenever it improperly shuts down due to an error.
- Always back up your /config directory before updating.
- Ensure your /config/frigate.yml is compatible with the new version by reviewing
  the Release notes.
- Cameras configured to output H.264 video and AAC audio will offer the most compatibility
  with all features of Frigate and Home Assistant.
- The recommended frame rate for detection is 5fps, but may need to be higher (10fps
  is the recommended maximum for most users) for very fast moving objects.
- Typical recording feed frame rate is 15 fps.
- Frigate uses a sophisticated video pipeline that starts with the camera feed and
  progressively applies transformations to it.
- Frigate will create a config file if one does not exist on the initial startup.
- If you only define one stream in your inputs and do not assign a detect role to
  it, Frigate will automatically assign it the detect role.
- Adding go2rtc is required for WebRTC or MSE for live viewing with audio, higher
  resolutions and frame rates.
- Some camera streams may need to use the ffmpeg module in go2rtc.
- When using a reverse proxy, the TLS session is usually terminated at the proxy,
  sending the internal request over plain HTTP. If this is the desired behavior, TLS
  must first be disabled in Frigate.
- A reverse proxy can be used to secure access to an internal web server, but the
  user will be entirely reliant on the steps they have taken.
- 'When using a reverse proxy, the TLS session is usually terminated at the proxy,
  sending the internal request over plain HTTP. If this is the desired behavior, TLS
  must first be disabled in Frigate, or you will encounter an HTTP 400 error: "The
  plain HTTP request was sent to HTTPS port."'
- A reverse proxy can be used to secure access to an internal web server, but the
  user will be entirely reliant on the steps they have taken. You must ensure you
  are following security best practices.
- 'When using a reverse proxy, the TLS session is usually terminated at the proxy,
  sending the internal request over plain HTTP. If this is the desired behavior, TLS
  must first be disabled in Frigate, or you will encounter an HTTP 400 error: ''The
  plain HTTP request was sent to HTTPS port.'''
- For Home Assistant Add-on installations, the config file should be at /addon_configs/<addon_directory>/config.yml
- It is recommended to start with a minimal configuration and add to it as described
  in the guide
- It is not recommended to copy this full configuration file. Only specify values
  that are different from the defaults. Configuration options and default values may
  change in future versions.
- 'Multiple detectors can not be mixed for object detection (ex: OpenVINO and Coral
  EdgeTPU can not be used for object detection at the same time).'
- Multiple detectors can not be mixed for object detection.
- Frigate supports multiple different detectors that work on different types of hardware.
- Uses ONNX models for object detection
- Labelmap uses a subset of the complete COCO label set that has only 80 objects
- All models are automatically downloaded and stored in the folder config/model_cache/rknn_cache.
- After upgrading Frigate, you should remove older models to free up space.
- The input image size in the YOLO-NAS notebook is set to 320x320.
- Pre-trained YOLO-NAS weights from DeciAI are subject to their license and can't
  be used commercially.
- Audio detection runs on the CPU.
- Recommended to use the go2rtc restream for audio capture.
- Semantic Search is disabled by default, and must be enabled in your config file
  or in the UI's Enrichments Settings page before it can be used.
- If you are enabling Semantic Search for the first time, be advised that Frigate
  does not automatically index older tracked objects.
- To use a different Gemini-compatible API endpoint, set the GEMINI_BASE_URL environment
  variable to your provider's API URL.
- To use a different OpenAI-compatible API endpoint, set the OPENAI_BASE_URL environment
  variable to your provider's API URL.
- Face recognition must be enabled in the UI or in your config file before it can
  be used.
- License plate recognition is disabled by default. Enable it in your config file.
- Frigate's dedicated LPR mode is optimized for cameras with a narrow field of view.
- LPR must be enabled globally to use the feature.
- Tune your motion detection and increase the contour_area until you see only larger
  motion boxes being created as cars pass through the frame (likely somewhere between
  50-90 for a 1920x1080 detect stream).
- Disable the improve_contrast motion setting, especially if you are running LPR at
  night and the frame is mostly dark.
- Ensure your camera's timestamp is covered with a motion mask so that it's not incorrectly
  detected as a license plate.
- For non-Frigate+ users, you may need to change your camera settings for a clearer
  image or decrease your global recognition_threshold config if your plates are not
  being accurately recognized at night.
- The secondary pipeline mode runs a local AI model on your CPU or GPU (depending
  on how device is configured) to detect plates. Increasing detect fps will increase
  resource usage proportionally.
- If you want to detect cars on cameras but don't want to use resources to run LPR
  on those cars, you should disable LPR for those specific cameras.
- Ensure your camera has a clear, human-readable, well-lit view of the plate.
- Adjust detection_threshold and recognition_threshold values.
- Use match_distance to allow small character mismatches.
- Bird classification is disabled by default, it must be enabled in your config file
  before it can be used.
- Recordings can be enabled and are stored at `/media/frigate/recordings`.
- The folder structure for the recordings is `YYYY-MM-DD/HH/<camera_name>/MM.SS.mp4`
  in UTC time.
- The default motion settings should work well for the majority of cameras, however
  there are cases where tuning motion detection can lead to better and more optimal
  results.
- Remember that motion detection is just used to determine when object detection should
  be used.
- Motion detection is just used to determine when object detection should be used.
- Windy days are still going to result in lots of motion being detected.
- Birdseye allows specific modes that intelligently show and disappear based on what
  you care about.
- Birdseye can be used in Home Assistant dashboards, cast to media devices, etc.
- Birdseye shows all cameras that have had the configured activity in the last 30
  seconds by default
- Cameras are sorted by default using their name to ensure a constant view inside
  Birdseye
- Frigate employs 'smart streaming' where camera images update once per minute when
  no detectable activity is occurring to conserve bandwidth and resources.
- Birdseye RTSP restream will cause birdseye to run 24/7 which may increase CPU usage
  somewhat.
- This does not apply to localhost requests, there is no need to provide credentials
  when using the restream as a source for frigate cameras.
- Autotracking is disabled by default but can be enabled in the configuration or by
  MQTT.
- This page makes use of presets of FFmpeg args.
- Many cameras support encoding options which greatly affect the live view experience.
- Motion masks prevent unwanted types of motion from triggering detection.
- Object filter masks filter out false positives based on location.
- Zones cannot have the same name as a camera.
- During testing, enable the Zones option for the Debug view of your camera.
- Zones allow you to define a specific area of the frame and apply additional filters
  for object types.
- Presence in a zone is evaluated based on the bottom center of the bounding box for
  the object.
- 'The default config for stationary objects is: detect: stationary: interval: 50,
  threshold: 50'
- If you are using the HA Add-on, you may need to use the full access variant and
  turn off *Protection mode* for hardware acceleration.
- If running Frigate through Docker, you either need to run in privileged mode or
  map the `/dev/video*` devices to Frigate.
- The `runtime:` tag is not supported on older versions of docker-compose.
- Make sure that your SoC supports hardware acceleration for your input stream.
- 'If one or more of your cameras are not properly processed and this error is shown
  in the logs: [segment @ 0xaaaaff694790] Timestamps are unset in a packet for stream
  0. This is deprecated and will stop working in the future. Fix your code to set
  the timestamps properly [Parsed_scale_rkrga_0 @ 0xaaaaff819070] No hw context provided
  on input [Parsed_scale_rkrga_0 @ 0xaaaaff819070] Failed to configure output pad
  on Parsed_scale_rkrga_0 Error initializing filters! Error marking filters as finished
  [out#1/rawvideo @ 0xaaaaff3d8730] Nothing was written into output file, because
  at least one of its streams received no packets. Restarting ffmpeg...'
- Frigate stores user information in its database. Password hashes are generated using
  industry standard PBKDF2-SHA256 with 600,000 iterations. Upon successful login,
  a JWT token is issued with an expiration date and set as a cookie.
- The default session length for user authentication in Frigate is 24 hours.
- Currently, only Chrome supports images in notifications. Safari and Firefox will
  only show a title and message in the notification.
- It is highly recommended to use hwaccel presets in the config.
- Input args presets help make the config more readable and handle use cases for different
  types of streams to ensure maximum compatibility.
- Output args presets help make the config more readable and handle use cases for
  different types of streams to ensure consistent recordings.
- Frigate's integrated NGINX server supports TLS certificates.
- By default Frigate will generate a self signed certificate that will be used for
  port 8971.
- Frigate is designed to make it easy to use whatever tool you prefer to manage certificates.
- 'In many deployments, TLS will be unnecessary. It can be disabled in the config
  with the following yaml: tls: enabled: False.'
- You cannot use the environment_vars section of your Frigate configuration file to
  set this environment variable. It must be defined as an environment variable in
  the docker config or Home Assistant Add-on config.
- This page does not recommend or rate the presented projects.
- Model IDs are not secret values and can be shared freely. Access to your model is
  protected by your API key.
- Frigate+ models can be used offline.
- Models are built by fine tuning a base model with annotated images.
- Frigate removes audio from recordings to reduce the likelihood of failing for invalid
  data.
- Ensure your cameras send h264 encoded video, or transcode them.
- Frigate generally recommends cameras with configurable sub streams.
- Make sure your camera's timestamp is masked out with a motion mask.
- If you have audio detection enabled, keep in mind that audio that is heard above
  min_volume is considered motion.
- Check RAM, swap, cache utilization, and disk utilization.
- Some users have noted that an HDMI dummy plug was necessary to be plugged into the
  motherboard's HDMI port.
- When mixing an Intel iGPU with Nvidia GPU, the devices can be mixed up between /dev/dri/renderD128
  and /dev/dri/renderD129 so it is important to confirm the correct device, or map
  the entire /dev/dri directory into the Frigate container.
- Using lsusb or checking the hardware page in HA OS will show as 1a6e:089a Global
  Unichip Corp. until Frigate runs an inferance using the coral.
- Some users have found the cable included with the coral to cause this problem and
  that switching to a different cable fixed it entirely.
errors:
- 'REQUEST_TIMEOUT: Increase the api_timeout value'
- 'INVALID_MODEL: Ensure the correct model is specified'
- 'Unknown error when taking a photo directly with iPhone: Ensure to use JPG format
  instead of HEIC.'
- 'Error running ... model: This usually happens when your GPU is unable to compile
  or use one of the LPR models.'
- Some cameras may have missed detections when someone walks directly in front of
  the camera.
- '1/second;5/minute;20/hour: Limit login failures to prevent brute force attacks.'
- 'Fatal Python error: Bus error: Try updating your shm-size.'
- 'Error: Database Is Locked: SQLite does not work well on a network share.'
- 'Unable to publish to MQTT: client is not connected: Use the IP of the device hosting
  the MQTT server.'
- 'WARNING : Unable to keep up with recording segments in cache for camera. Keeping
  the 5 most recent segments out of 6 and discarding the rest.'
auth_info:
  mentioned_objects: []
client:
  base_url: https://frigate.video
  ports:
    authenticated_ui_api: 8971
    internal_unauthenticated_ui_api: 5000
    rtsp_restreaming: 8554
    webrtc_connections: 8555
source_metadata: null
